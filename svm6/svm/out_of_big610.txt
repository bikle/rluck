
SQL*Plus: Release 11.2.0.1.0 Production on Fri Dec 31 10:12:50 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

10:12:50 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
10:12:50 SQL> 10:12:50 SQL> --
10:12:50 SQL> -- eur610.sql
10:12:50 SQL> --
10:12:50 SQL> 
10:12:50 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:12:50 SQL> 
10:12:50 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.02
10:12:50 SQL> 
10:12:50 SQL> -- I created di5min here:
10:12:50 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:12:50 SQL> 
10:12:50 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:12:50   2  SELECT
10:12:50   3  pair
10:12:50   4  ,ydate
10:12:50   5  ,prdate
10:12:50   6  ,rownum rnum -- acts as t in my time-series
10:12:50   7  ,clse
10:12:50   8  -- Derive a bunch of attributes from clse, the latest price:
10:12:50   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:12:50  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:12:50  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:12:50  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:12:50  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:12:50  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:12:50  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:12:50  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:12:50  17  --
10:12:50  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:12:50  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:12:50  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:12:50  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:12:50  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:12:50  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:12:50  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:12:50  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:12:50  26  --
10:12:50  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:12:50  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:12:50  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:12:50  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:12:50  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:12:50  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:12:50  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:12:50  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:12:50  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:12:50  36  FROM di5min WHERE pair LIKE'%eur%'
10:12:50  37  AND ydate > sysdate - 95
10:12:50  38  ORDER BY ydate
10:12:50  39  /

View created.

Elapsed: 00:00:00.08
10:12:50 SQL> 
10:12:50 SQL> -- rpt
10:12:50 SQL> 
10:12:50 SQL> SELECT
10:12:50   2  pair
10:12:50   3  ,COUNT(pair)
10:12:50   4  ,MIN(clse),MAX(clse)
10:12:50   5  ,MIN(avg6),MAX(avg6)
10:12:50   6  ,MIN(ydate),MAX(ydate)
10:12:50   7  FROM svm6102
10:12:50   8  GROUP BY pair
10:12:50   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19838    1.29735	   1.4273 1.29875103 1.42436233 2010-09-27 10:15:01 2010-12-31 10:05:00

Elapsed: 00:00:00.90
10:12:51 SQL> 
10:12:51 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:12:51 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.10
10:12:51 SQL> CREATE TABLE svm6122 COMPRESS AS
10:12:51   2  SELECT
10:12:51   3  pair
10:12:51   4  ,ydate
10:12:51   5  ,prdate
10:12:51   6  ,clse
10:12:51   7  -- g6 is important. I want to predict g6:
10:12:51   8  ,ld6 - clse g6
10:12:51   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:12:51  10  -- I want more attributes from the ones I derived above:
10:12:51  11  -- clse relation to moving-min
10:12:51  12  ,clse-min4  cm4
10:12:51  13  ,clse-min6  cm6
10:12:51  14  ,clse-min8  cm8
10:12:51  15  ,clse-min10 cm10
10:12:51  16  ,clse-min12 cm12
10:12:51  17  ,clse-min14 cm14
10:12:51  18  ,clse-min16 cm16
10:12:51  19  ,clse-min18 cm18
10:12:51  20  -- clse relation to moving-avg
10:12:51  21  ,clse-avg4  ca4
10:12:51  22  ,clse-avg6  ca6
10:12:51  23  ,clse-avg8  ca8
10:12:51  24  ,clse-avg10 ca10
10:12:51  25  ,clse-avg12 ca12
10:12:51  26  ,clse-avg14 ca14
10:12:51  27  ,clse-avg16 ca16
10:12:51  28  ,clse-avg18 ca18
10:12:51  29  -- clse relation to moving-max
10:12:51  30  ,clse-max4  cx4
10:12:51  31  ,clse-max6  cx6
10:12:51  32  ,clse-max8  cx8
10:12:51  33  ,clse-max10 cx10
10:12:51  34  ,clse-max12 cx12
10:12:51  35  ,clse-max14 cx14
10:12:51  36  ,clse-max16 cx16
10:12:51  37  ,clse-max18 cx18
10:12:51  38  -- Derive more attributes.
10:12:51  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:12:51  40  -- But COVAR_POP is more stable:
10:12:51  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:12:51  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:12:51  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:12:51  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:12:51  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:12:51  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:12:51  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:12:51  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:12:51  49  -- Derive date related attributes:
10:12:51  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:12:51  51  ,0+TO_CHAR(ydate,'D')d
10:12:51  52  ,0+TO_CHAR(ydate,'W')w
10:12:51  53  -- mpm stands for minutes-past-midnight:
10:12:51  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:12:51  55  -- mph stands for minutes-past-hour:
10:12:51  56  ,0+TO_CHAR(ydate,'MI')mph
10:12:51  57  FROM svm6102
10:12:51  58  ORDER BY ydate
10:12:51  59  /

Table created.

Elapsed: 00:00:02.52
10:12:54 SQL> 
10:12:54 SQL> -- rpt
10:12:54 SQL> 
10:12:54 SQL> SELECT
10:12:54   2  pair
10:12:54   3  ,COUNT(pair)
10:12:54   4  ,MIN(clse),MAX(clse)
10:12:54   5  ,MIN(ydate),MAX(ydate)
10:12:54   6  FROM svm6122
10:12:54   7  GROUP BY pair
10:12:54   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19838    1.29735	   1.4273 2010-09-27 10:15:01 2010-12-31 10:05:00

Elapsed: 00:00:00.04
10:12:54 SQL> 
10:12:54 SQL> -- Prepare for derivation of NTILE based params:
10:12:54 SQL> 
10:12:54 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.70
10:12:55 SQL> CREATE TABLE svm6142 COMPRESS AS
10:12:55   2  SELECT
10:12:55   3  pair
10:12:55   4  ,ydate
10:12:55   5  ,prdate
10:12:55   6  ,clse
10:12:55   7  ,g6
10:12:55   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:12:55   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:12:55  10  ,CASE WHEN trend IS NULL THEN 1
10:12:55  11  	    WHEN trend =0      THEN 1
10:12:55  12  	    ELSE trend END trend
10:12:55  13  ,cm4
10:12:55  14  ,cm6
10:12:55  15  ,cm8
10:12:55  16  ,cm10
10:12:55  17  ,cm12
10:12:55  18  ,cm14
10:12:55  19  ,cm16
10:12:55  20  ,cm18
10:12:55  21  --
10:12:55  22  ,ca4
10:12:55  23  ,ca6
10:12:55  24  ,ca8
10:12:55  25  ,ca10
10:12:55  26  ,ca12
10:12:55  27  ,ca14
10:12:55  28  ,ca16
10:12:55  29  ,ca18
10:12:55  30  --
10:12:55  31  ,cx4
10:12:55  32  ,cx6
10:12:55  33  ,cx8
10:12:55  34  ,cx10
10:12:55  35  ,cx12
10:12:55  36  ,cx14
10:12:55  37  ,cx16
10:12:55  38  ,cx18
10:12:55  39  --
10:12:55  40  ,crr4
10:12:55  41  ,crr6
10:12:55  42  ,crr8
10:12:55  43  ,crr10
10:12:55  44  ,crr12
10:12:55  45  ,crr14
10:12:55  46  ,crr16
10:12:55  47  ,crr18
10:12:55  48  --
10:12:55  49  ,hh
10:12:55  50  ,d
10:12:55  51  ,w
10:12:55  52  ,mpm
10:12:55  53  ,mph
10:12:55  54  FROM svm6122
10:12:55  55  ORDER BY ydate
10:12:55  56  /

Table created.

Elapsed: 00:00:00.37
10:12:55 SQL> 
10:12:55 SQL> -- rpt
10:12:55 SQL> 
10:12:55 SQL> SELECT
10:12:55   2  pair
10:12:55   3  ,trend
10:12:55   4  ,gatt
10:12:55   5  ,COUNT(pair)
10:12:55   6  ,AVG(g6)
10:12:55   7  FROM svm6142
10:12:55   8  GROUP BY pair,trend,gatt
10:12:55   9  ORDER BY pair,trend,gatt
10:12:55  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6062 -.00310332
eur_usd 	-1 up	      3715 .004509041
eur_usd 	 1 nup	      6071 -.00307607
eur_usd 	 1 up	      3918 .005034488
eur_usd 	 1		72

Elapsed: 00:00:00.04
10:12:55 SQL> 
10:12:55 SQL> 
10:12:55 SQL> -- Derive NTILE based params:
10:12:55 SQL> 
10:12:55 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.08
10:12:55 SQL> CREATE TABLE svm6162 COMPRESS AS
10:12:55   2  SELECT
10:12:55   3  pair
10:12:55   4  ,ydate
10:12:55   5  ,prdate
10:12:55   6  ,clse
10:12:55   7  ,g6
10:12:55   8  ,gatt
10:12:55   9  ,gattn
10:12:55  10  ,trend
10:12:55  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:12:55  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:12:55  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:12:55  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:12:55  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:12:55  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:12:55  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:12:55  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:12:55  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:12:55  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:12:55  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:12:55  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:12:55  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:12:55  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:12:55  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:12:55  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:12:55  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:12:55  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:12:55  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:12:55  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:12:55  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:12:55  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:12:55  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:12:55  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:12:55  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:12:55  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:12:55  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:12:55  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:12:55  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:12:55  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:12:55  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:12:55  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:12:55  43  ,hh  att32
10:12:55  44  ,d   att33
10:12:55  45  ,w   att34
10:12:55  46  ,mpm att35
10:12:55  47  ,mph att36
10:12:55  48  ,trend att37
10:12:55  49  FROM svm6142
10:12:55  50  ORDER BY ydate
10:12:55  51  /

Table created.

Elapsed: 00:00:04.81
10:13:00 SQL> 
10:13:00 SQL> -- rpt
10:13:00 SQL> 
10:13:00 SQL> SELECT
10:13:00   2  pair
10:13:00   3  ,trend
10:13:00   4  ,gatt
10:13:00   5  ,COUNT(pair)
10:13:00   6  ,AVG(g6)
10:13:00   7  FROM svm6162
10:13:00   8  GROUP BY pair,trend,gatt
10:13:00   9  ORDER BY pair,trend,gatt
10:13:00  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6062 -.00310332
eur_usd 	-1 up	      3715 .004509041
eur_usd 	 1 nup	      6071 -.00307607
eur_usd 	 1 up	      3918 .005034488
eur_usd 	 1		72

Elapsed: 00:00:00.03
10:13:00 SQL> 
10:13:00 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.04
10:13:00 SQL> CREATE TABLE modsrc COMPRESS AS
10:13:00   2  SELECT
10:13:00   3  pair
10:13:00   4  ,ydate
10:13:00   5  ,prdate
10:13:00   6  ,trend
10:13:00   7  ,g6
10:13:00   8  ,gatt
10:13:00   9  ,gattn
10:13:00  10  FROM svm6162
10:13:00  11  /

Table created.

Elapsed: 00:00:00.09
10:13:00 SQL> 
10:13:00 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
10:13:00 SQL> 
10:13:00 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.18
10:13:01 SQL> CREATE TABLE eur_ms610 COMPRESS AS
10:13:01   2  SELECT
10:13:01   3  ydate
10:13:01   4  ,trend eur_trend
10:13:01   5  ,g6    eur_g6
10:13:01   6  ,gatt  eur_gatt
10:13:01   7  ,gattn eur_gattn
10:13:01   8  FROM modsrc
10:13:01   9  /

Table created.

Elapsed: 00:00:00.07
10:13:01 SQL> 
10:13:01 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
10:13:01 SQL> 
10:13:01 SQL> -- I need a copy of the attributes:
10:13:01 SQL> 
10:13:01 SQL> 
10:13:01 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.06
10:13:01 SQL> CREATE TABLE eur_att COMPRESS AS
10:13:01   2  SELECT
10:13:01   3  ydate
10:13:01   4  ,att00 eur_att00
10:13:01   5  ,att01 eur_att01
10:13:01   6  ,att02 eur_att02
10:13:01   7  ,att03 eur_att03
10:13:01   8  ,att04 eur_att04
10:13:01   9  ,att05 eur_att05
10:13:01  10  ,att06 eur_att06
10:13:01  11  ,att07 eur_att07
10:13:01  12  ,att08 eur_att08
10:13:01  13  ,att09 eur_att09
10:13:01  14  ,att10 eur_att10
10:13:01  15  ,att11 eur_att11
10:13:01  16  ,att12 eur_att12
10:13:01  17  ,att13 eur_att13
10:13:01  18  ,att14 eur_att14
10:13:01  19  ,att15 eur_att15
10:13:01  20  ,att16 eur_att16
10:13:01  21  ,att17 eur_att17
10:13:01  22  ,att18 eur_att18
10:13:01  23  ,att19 eur_att19
10:13:01  24  ,att20 eur_att20
10:13:01  25  ,att21 eur_att21
10:13:01  26  ,att22 eur_att22
10:13:01  27  ,att23 eur_att23
10:13:01  28  ,att24 eur_att24
10:13:01  29  ,att25 eur_att25
10:13:01  30  ,att26 eur_att26
10:13:01  31  ,att27 eur_att27
10:13:01  32  ,att28 eur_att28
10:13:01  33  ,att29 eur_att29
10:13:01  34  ,att30 eur_att30
10:13:01  35  ,att31 eur_att31
10:13:01  36  ,att32 eur_att32
10:13:01  37  ,att33 eur_att33
10:13:01  38  ,att34 eur_att34
10:13:01  39  ,att35 eur_att35
10:13:01  40  ,att36 eur_att36
10:13:01  41  ,att37 eur_att37
10:13:01  42  FROM svm6162
10:13:01  43  /

Table created.

Elapsed: 00:00:00.18
10:13:01 SQL> 
10:13:01 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
10:13:02 SQL> 
10:13:02 SQL> -- rpt
10:13:02 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19838

Elapsed: 00:00:00.89
10:13:02 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19838

Elapsed: 00:00:00.01
10:13:02 SQL> 
10:13:02 SQL> --
10:13:02 SQL> -- aud610.sql
10:13:02 SQL> --
10:13:02 SQL> 
10:13:02 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:13:02 SQL> 
10:13:02 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.55
10:13:03 SQL> 
10:13:03 SQL> -- I created di5min here:
10:13:03 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:13:03 SQL> 
10:13:03 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:13:03   2  SELECT
10:13:03   3  pair
10:13:03   4  ,ydate
10:13:03   5  ,prdate
10:13:03   6  ,rownum rnum -- acts as t in my time-series
10:13:03   7  ,clse
10:13:03   8  -- Derive a bunch of attributes from clse, the latest price:
10:13:03   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:13:03  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:13:03  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:13:03  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:13:03  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:13:03  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:13:03  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:13:03  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:13:03  17  --
10:13:03  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:13:03  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:13:03  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:13:03  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:13:03  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:13:03  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:13:03  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:13:03  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:13:03  26  --
10:13:03  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:13:03  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:13:03  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:13:03  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:13:03  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:13:03  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:13:03  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:13:03  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:13:03  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:13:03  36  FROM di5min WHERE pair LIKE'%aud%'
10:13:03  37  AND ydate > sysdate - 95
10:13:03  38  ORDER BY ydate
10:13:03  39  /

View created.

Elapsed: 00:00:00.04
10:13:03 SQL> 
10:13:03 SQL> -- rpt
10:13:03 SQL> 
10:13:03 SQL> SELECT
10:13:03   2  pair
10:13:03   3  ,COUNT(pair)
10:13:03   4  ,MIN(clse),MAX(clse)
10:13:03   5  ,MIN(avg6),MAX(avg6)
10:13:03   6  ,MIN(ydate),MAX(ydate)
10:13:03   7  FROM svm6102
10:13:03   8  GROUP BY pair
10:13:03   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19835	.95405	1.0195625 .957141438 1.01819366 2010-09-27 10:15:01 2010-12-31 10:05:00

Elapsed: 00:00:00.88
10:13:04 SQL> 
10:13:04 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:13:04 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.19
10:13:04 SQL> CREATE TABLE svm6122 COMPRESS AS
10:13:04   2  SELECT
10:13:04   3  pair
10:13:04   4  ,ydate
10:13:04   5  ,prdate
10:13:04   6  ,clse
10:13:04   7  -- g6 is important. I want to predict g6:
10:13:04   8  ,ld6 - clse g6
10:13:04   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:13:04  10  -- I want more attributes from the ones I derived above:
10:13:04  11  -- clse relation to moving-min
10:13:04  12  ,clse-min4  cm4
10:13:04  13  ,clse-min6  cm6
10:13:04  14  ,clse-min8  cm8
10:13:04  15  ,clse-min10 cm10
10:13:04  16  ,clse-min12 cm12
10:13:04  17  ,clse-min14 cm14
10:13:04  18  ,clse-min16 cm16
10:13:04  19  ,clse-min18 cm18
10:13:04  20  -- clse relation to moving-avg
10:13:04  21  ,clse-avg4  ca4
10:13:04  22  ,clse-avg6  ca6
10:13:04  23  ,clse-avg8  ca8
10:13:04  24  ,clse-avg10 ca10
10:13:04  25  ,clse-avg12 ca12
10:13:04  26  ,clse-avg14 ca14
10:13:04  27  ,clse-avg16 ca16
10:13:04  28  ,clse-avg18 ca18
10:13:04  29  -- clse relation to moving-max
10:13:04  30  ,clse-max4  cx4
10:13:04  31  ,clse-max6  cx6
10:13:04  32  ,clse-max8  cx8
10:13:04  33  ,clse-max10 cx10
10:13:04  34  ,clse-max12 cx12
10:13:04  35  ,clse-max14 cx14
10:13:04  36  ,clse-max16 cx16
10:13:04  37  ,clse-max18 cx18
10:13:04  38  -- Derive more attributes.
10:13:04  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:13:04  40  -- But COVAR_POP is more stable:
10:13:04  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:13:04  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:13:04  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:13:04  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:13:04  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:13:04  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:13:04  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:13:04  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:13:04  49  -- Derive date related attributes:
10:13:04  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:13:04  51  ,0+TO_CHAR(ydate,'D')d
10:13:04  52  ,0+TO_CHAR(ydate,'W')w
10:13:04  53  -- mpm stands for minutes-past-midnight:
10:13:04  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:13:04  55  -- mph stands for minutes-past-hour:
10:13:04  56  ,0+TO_CHAR(ydate,'MI')mph
10:13:04  57  FROM svm6102
10:13:04  58  ORDER BY ydate
10:13:04  59  /

Table created.

Elapsed: 00:00:02.17
10:13:06 SQL> 
10:13:06 SQL> -- rpt
10:13:06 SQL> 
10:13:06 SQL> SELECT
10:13:06   2  pair
10:13:06   3  ,COUNT(pair)
10:13:06   4  ,MIN(clse),MAX(clse)
10:13:06   5  ,MIN(ydate),MAX(ydate)
10:13:06   6  FROM svm6122
10:13:06   7  GROUP BY pair
10:13:06   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19835	.95405	1.0195625 2010-09-27 10:15:01 2010-12-31 10:05:00

Elapsed: 00:00:00.09
10:13:06 SQL> 
10:13:06 SQL> -- Prepare for derivation of NTILE based params:
10:13:06 SQL> 
10:13:06 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.24
10:13:07 SQL> CREATE TABLE svm6142 COMPRESS AS
10:13:07   2  SELECT
10:13:07   3  pair
10:13:07   4  ,ydate
10:13:07   5  ,prdate
10:13:07   6  ,clse
10:13:07   7  ,g6
10:13:07   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:13:07   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:13:07  10  ,CASE WHEN trend IS NULL THEN 1
10:13:07  11  	    WHEN trend =0      THEN 1
10:13:07  12  	    ELSE trend END trend
10:13:07  13  ,cm4
10:13:07  14  ,cm6
10:13:07  15  ,cm8
10:13:07  16  ,cm10
10:13:07  17  ,cm12
10:13:07  18  ,cm14
10:13:07  19  ,cm16
10:13:07  20  ,cm18
10:13:07  21  --
10:13:07  22  ,ca4
10:13:07  23  ,ca6
10:13:07  24  ,ca8
10:13:07  25  ,ca10
10:13:07  26  ,ca12
10:13:07  27  ,ca14
10:13:07  28  ,ca16
10:13:07  29  ,ca18
10:13:07  30  --
10:13:07  31  ,cx4
10:13:07  32  ,cx6
10:13:07  33  ,cx8
10:13:07  34  ,cx10
10:13:07  35  ,cx12
10:13:07  36  ,cx14
10:13:07  37  ,cx16
10:13:07  38  ,cx18
10:13:07  39  --
10:13:07  40  ,crr4
10:13:07  41  ,crr6
10:13:07  42  ,crr8
10:13:07  43  ,crr10
10:13:07  44  ,crr12
10:13:07  45  ,crr14
10:13:07  46  ,crr16
10:13:07  47  ,crr18
10:13:07  48  --
10:13:07  49  ,hh
10:13:07  50  ,d
10:13:07  51  ,w
10:13:07  52  ,mpm
10:13:07  53  ,mph
10:13:07  54  FROM svm6122
10:13:07  55  ORDER BY ydate
10:13:07  56  /

Table created.

Elapsed: 00:00:00.37
10:13:07 SQL> 
10:13:07 SQL> -- rpt
10:13:07 SQL> 
10:13:07 SQL> SELECT
10:13:07   2  pair
10:13:07   3  ,trend
10:13:07   4  ,gatt
10:13:07   5  ,COUNT(pair)
10:13:07   6  ,AVG(g6)
10:13:07   7  FROM svm6142
10:13:07   8  GROUP BY pair,trend,gatt
10:13:07   9  ORDER BY pair,trend,gatt
10:13:07  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5255  -.0021256
aud_usd 	-1 up	      3862 .003729036
aud_usd 	-1		15
aud_usd 	 1 nup	      6863 -.00209006
aud_usd 	 1 up	      3783 .004021937
aud_usd 	 1		57

6 rows selected.

Elapsed: 00:00:00.08
10:13:07 SQL> 
10:13:07 SQL> 
10:13:07 SQL> -- Derive NTILE based params:
10:13:07 SQL> 
10:13:07 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.18
10:13:07 SQL> CREATE TABLE svm6162 COMPRESS AS
10:13:07   2  SELECT
10:13:07   3  pair
10:13:07   4  ,ydate
10:13:07   5  ,prdate
10:13:07   6  ,clse
10:13:07   7  ,g6
10:13:07   8  ,gatt
10:13:07   9  ,gattn
10:13:07  10  ,trend
10:13:07  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:13:07  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:13:07  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:13:07  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:13:07  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:13:07  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:13:07  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:13:07  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:13:07  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:13:07  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:13:07  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:13:07  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:13:07  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:13:07  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:13:07  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:13:07  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:13:07  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:13:07  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:13:07  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:13:07  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:13:07  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:13:07  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:13:07  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:13:07  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:13:07  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:13:07  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:13:07  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:13:07  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:13:07  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:13:07  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:13:07  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:13:07  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:13:07  43  ,hh  att32
10:13:07  44  ,d   att33
10:13:07  45  ,w   att34
10:13:07  46  ,mpm att35
10:13:07  47  ,mph att36
10:13:07  48  ,trend att37
10:13:07  49  FROM svm6142
10:13:07  50  ORDER BY ydate
10:13:07  51  /

Table created.

Elapsed: 00:00:04.88
10:13:12 SQL> 
10:13:12 SQL> -- rpt
10:13:12 SQL> 
10:13:12 SQL> SELECT
10:13:12   2  pair
10:13:12   3  ,trend
10:13:12   4  ,gatt
10:13:12   5  ,COUNT(pair)
10:13:12   6  ,AVG(g6)
10:13:12   7  FROM svm6162
10:13:12   8  GROUP BY pair,trend,gatt
10:13:12   9  ORDER BY pair,trend,gatt
10:13:12  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5255  -.0021256
aud_usd 	-1 up	      3862 .003729036
aud_usd 	-1		15
aud_usd 	 1 nup	      6863 -.00209006
aud_usd 	 1 up	      3783 .004021937
aud_usd 	 1		57

6 rows selected.

Elapsed: 00:00:00.03
10:13:12 SQL> 
10:13:12 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.23
10:13:12 SQL> CREATE TABLE modsrc COMPRESS AS
10:13:12   2  SELECT
10:13:12   3  pair
10:13:12   4  ,ydate
10:13:12   5  ,prdate
10:13:12   6  ,trend
10:13:12   7  ,g6
10:13:12   8  ,gatt
10:13:12   9  ,gattn
10:13:12  10  FROM svm6162
10:13:12  11  /

Table created.

Elapsed: 00:00:00.09
10:13:12 SQL> 
10:13:12 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.26
10:13:13 SQL> 
10:13:13 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.07
10:13:13 SQL> CREATE TABLE aud_ms610 COMPRESS AS
10:13:13   2  SELECT
10:13:13   3  ydate
10:13:13   4  ,trend aud_trend
10:13:13   5  ,g6    aud_g6
10:13:13   6  ,gatt  aud_gatt
10:13:13   7  ,gattn aud_gattn
10:13:13   8  FROM modsrc
10:13:13   9  /

Table created.

Elapsed: 00:00:00.07
10:13:13 SQL> 
10:13:13 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
10:13:13 SQL> 
10:13:13 SQL> -- I need a copy of the attributes:
10:13:13 SQL> 
10:13:13 SQL> 
10:13:13 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.05
10:13:13 SQL> CREATE TABLE aud_att COMPRESS AS
10:13:13   2  SELECT
10:13:13   3  ydate
10:13:13   4  ,att00 aud_att00
10:13:13   5  ,att01 aud_att01
10:13:13   6  ,att02 aud_att02
10:13:13   7  ,att03 aud_att03
10:13:13   8  ,att04 aud_att04
10:13:13   9  ,att05 aud_att05
10:13:13  10  ,att06 aud_att06
10:13:13  11  ,att07 aud_att07
10:13:13  12  ,att08 aud_att08
10:13:13  13  ,att09 aud_att09
10:13:13  14  ,att10 aud_att10
10:13:13  15  ,att11 aud_att11
10:13:13  16  ,att12 aud_att12
10:13:13  17  ,att13 aud_att13
10:13:13  18  ,att14 aud_att14
10:13:13  19  ,att15 aud_att15
10:13:13  20  ,att16 aud_att16
10:13:13  21  ,att17 aud_att17
10:13:13  22  ,att18 aud_att18
10:13:13  23  ,att19 aud_att19
10:13:13  24  ,att20 aud_att20
10:13:13  25  ,att21 aud_att21
10:13:13  26  ,att22 aud_att22
10:13:13  27  ,att23 aud_att23
10:13:13  28  ,att24 aud_att24
10:13:13  29  ,att25 aud_att25
10:13:13  30  ,att26 aud_att26
10:13:13  31  ,att27 aud_att27
10:13:13  32  ,att28 aud_att28
10:13:13  33  ,att29 aud_att29
10:13:13  34  ,att30 aud_att30
10:13:13  35  ,att31 aud_att31
10:13:13  36  ,att32 aud_att32
10:13:13  37  ,att33 aud_att33
10:13:13  38  ,att34 aud_att34
10:13:13  39  ,att35 aud_att35
10:13:13  40  ,att36 aud_att36
10:13:13  41  ,att37 aud_att37
10:13:13  42  FROM svm6162
10:13:13  43  /

Table created.

Elapsed: 00:00:00.18
10:13:13 SQL> 
10:13:13 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
10:13:14 SQL> 
10:13:14 SQL> -- rpt
10:13:14 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19835

Elapsed: 00:00:00.87
10:13:15 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19835

Elapsed: 00:00:00.00
10:13:15 SQL> 
10:13:15 SQL> --
10:13:15 SQL> -- gbp610.sql
10:13:15 SQL> --
10:13:15 SQL> 
10:13:15 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:13:15 SQL> 
10:13:15 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
10:13:15 SQL> 
10:13:15 SQL> -- I created di5min here:
10:13:15 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:13:15 SQL> 
10:13:15 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:13:15   2  SELECT
10:13:15   3  pair
10:13:15   4  ,ydate
10:13:15   5  ,prdate
10:13:15   6  ,rownum rnum -- acts as t in my time-series
10:13:15   7  ,clse
10:13:15   8  -- Derive a bunch of attributes from clse, the latest price:
10:13:15   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:13:15  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:13:15  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:13:15  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:13:15  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:13:15  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:13:15  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:13:15  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:13:15  17  --
10:13:15  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:13:15  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:13:15  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:13:15  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:13:15  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:13:15  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:13:15  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:13:15  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:13:15  26  --
10:13:15  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:13:15  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:13:15  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:13:15  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:13:15  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:13:15  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:13:15  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:13:15  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:13:15  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:13:15  36  FROM di5min WHERE pair LIKE'%gbp%'
10:13:15  37  AND ydate > sysdate - 95
10:13:15  38  ORDER BY ydate
10:13:15  39  /

View created.

Elapsed: 00:00:00.04
10:13:15 SQL> 
10:13:15 SQL> -- rpt
10:13:15 SQL> 
10:13:15 SQL> SELECT
10:13:15   2  pair
10:13:15   3  ,COUNT(pair)
10:13:15   4  ,MIN(clse),MAX(clse)
10:13:15   5  ,MIN(avg6),MAX(avg6)
10:13:15   6  ,MIN(ydate),MAX(ydate)
10:13:15   7  FROM svm6102
10:13:15   8  GROUP BY pair
10:13:15   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19837   1.535325	   1.6295 1.53696747 1.62716986 2010-09-27 10:15:01 2010-12-31 10:05:00

Elapsed: 00:00:00.88
10:13:16 SQL> 
10:13:16 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:13:16 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
10:13:16 SQL> CREATE TABLE svm6122 COMPRESS AS
10:13:16   2  SELECT
10:13:16   3  pair
10:13:16   4  ,ydate
10:13:16   5  ,prdate
10:13:16   6  ,clse
10:13:16   7  -- g6 is important. I want to predict g6:
10:13:16   8  ,ld6 - clse g6
10:13:16   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:13:16  10  -- I want more attributes from the ones I derived above:
10:13:16  11  -- clse relation to moving-min
10:13:16  12  ,clse-min4  cm4
10:13:16  13  ,clse-min6  cm6
10:13:16  14  ,clse-min8  cm8
10:13:16  15  ,clse-min10 cm10
10:13:16  16  ,clse-min12 cm12
10:13:16  17  ,clse-min14 cm14
10:13:16  18  ,clse-min16 cm16
10:13:16  19  ,clse-min18 cm18
10:13:16  20  -- clse relation to moving-avg
10:13:16  21  ,clse-avg4  ca4
10:13:16  22  ,clse-avg6  ca6
10:13:16  23  ,clse-avg8  ca8
10:13:16  24  ,clse-avg10 ca10
10:13:16  25  ,clse-avg12 ca12
10:13:16  26  ,clse-avg14 ca14
10:13:16  27  ,clse-avg16 ca16
10:13:16  28  ,clse-avg18 ca18
10:13:16  29  -- clse relation to moving-max
10:13:16  30  ,clse-max4  cx4
10:13:16  31  ,clse-max6  cx6
10:13:16  32  ,clse-max8  cx8
10:13:16  33  ,clse-max10 cx10
10:13:16  34  ,clse-max12 cx12
10:13:16  35  ,clse-max14 cx14
10:13:16  36  ,clse-max16 cx16
10:13:16  37  ,clse-max18 cx18
10:13:16  38  -- Derive more attributes.
10:13:16  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:13:16  40  -- But COVAR_POP is more stable:
10:13:16  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:13:16  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:13:16  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:13:16  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:13:16  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:13:16  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:13:16  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:13:16  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:13:16  49  -- Derive date related attributes:
10:13:16  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:13:16  51  ,0+TO_CHAR(ydate,'D')d
10:13:16  52  ,0+TO_CHAR(ydate,'W')w
10:13:16  53  -- mpm stands for minutes-past-midnight:
10:13:16  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:13:16  55  -- mph stands for minutes-past-hour:
10:13:16  56  ,0+TO_CHAR(ydate,'MI')mph
10:13:16  57  FROM svm6102
10:13:16  58  ORDER BY ydate
10:13:16  59  /

Table created.

Elapsed: 00:00:02.10
10:13:18 SQL> 
10:13:18 SQL> -- rpt
10:13:18 SQL> 
10:13:18 SQL> SELECT
10:13:18   2  pair
10:13:18   3  ,COUNT(pair)
10:13:18   4  ,MIN(clse),MAX(clse)
10:13:18   5  ,MIN(ydate),MAX(ydate)
10:13:18   6  FROM svm6122
10:13:18   7  GROUP BY pair
10:13:18   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19837   1.535325	   1.6295 2010-09-27 10:15:01 2010-12-31 10:05:00

Elapsed: 00:00:00.04
10:13:18 SQL> 
10:13:18 SQL> -- Prepare for derivation of NTILE based params:
10:13:18 SQL> 
10:13:18 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.33
10:13:19 SQL> CREATE TABLE svm6142 COMPRESS AS
10:13:19   2  SELECT
10:13:19   3  pair
10:13:19   4  ,ydate
10:13:19   5  ,prdate
10:13:19   6  ,clse
10:13:19   7  ,g6
10:13:19   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:13:19   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:13:19  10  ,CASE WHEN trend IS NULL THEN 1
10:13:19  11  	    WHEN trend =0      THEN 1
10:13:19  12  	    ELSE trend END trend
10:13:19  13  ,cm4
10:13:19  14  ,cm6
10:13:19  15  ,cm8
10:13:19  16  ,cm10
10:13:19  17  ,cm12
10:13:19  18  ,cm14
10:13:19  19  ,cm16
10:13:19  20  ,cm18
10:13:19  21  --
10:13:19  22  ,ca4
10:13:19  23  ,ca6
10:13:19  24  ,ca8
10:13:19  25  ,ca10
10:13:19  26  ,ca12
10:13:19  27  ,ca14
10:13:19  28  ,ca16
10:13:19  29  ,ca18
10:13:19  30  --
10:13:19  31  ,cx4
10:13:19  32  ,cx6
10:13:19  33  ,cx8
10:13:19  34  ,cx10
10:13:19  35  ,cx12
10:13:19  36  ,cx14
10:13:19  37  ,cx16
10:13:19  38  ,cx18
10:13:19  39  --
10:13:19  40  ,crr4
10:13:19  41  ,crr6
10:13:19  42  ,crr8
10:13:19  43  ,crr10
10:13:19  44  ,crr12
10:13:19  45  ,crr14
10:13:19  46  ,crr16
10:13:19  47  ,crr18
10:13:19  48  --
10:13:19  49  ,hh
10:13:19  50  ,d
10:13:19  51  ,w
10:13:19  52  ,mpm
10:13:19  53  ,mph
10:13:19  54  FROM svm6122
10:13:19  55  ORDER BY ydate
10:13:19  56  /

Table created.

Elapsed: 00:00:00.37
10:13:19 SQL> 
10:13:19 SQL> -- rpt
10:13:19 SQL> 
10:13:19 SQL> SELECT
10:13:19   2  pair
10:13:19   3  ,trend
10:13:19   4  ,gatt
10:13:19   5  ,COUNT(pair)
10:13:19   6  ,AVG(g6)
10:13:19   7  FROM svm6142
10:13:19   8  GROUP BY pair,trend,gatt
10:13:19   9  ORDER BY pair,trend,gatt
10:13:19  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6353 -.00262198
gbp_usd 	-1 up	      3617 .004281843
gbp_usd 	 1 nup	      6278 -.00268316
gbp_usd 	 1 up	      3517 .004359788
gbp_usd 	 1		72

Elapsed: 00:00:00.08
10:13:19 SQL> 
10:13:19 SQL> 
10:13:19 SQL> -- Derive NTILE based params:
10:13:19 SQL> 
10:13:19 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.19
10:13:19 SQL> CREATE TABLE svm6162 COMPRESS AS
10:13:19   2  SELECT
10:13:19   3  pair
10:13:19   4  ,ydate
10:13:19   5  ,prdate
10:13:19   6  ,clse
10:13:19   7  ,g6
10:13:19   8  ,gatt
10:13:19   9  ,gattn
10:13:19  10  ,trend
10:13:19  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:13:19  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:13:19  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:13:19  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:13:19  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:13:19  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:13:19  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:13:19  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:13:19  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:13:19  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:13:19  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:13:19  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:13:19  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:13:19  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:13:19  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:13:19  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:13:19  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:13:19  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:13:19  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:13:19  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:13:19  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:13:19  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:13:19  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:13:19  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:13:19  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:13:19  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:13:19  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:13:19  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:13:19  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:13:19  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:13:19  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:13:19  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:13:19  43  ,hh  att32
10:13:19  44  ,d   att33
10:13:19  45  ,w   att34
10:13:19  46  ,mpm att35
10:13:19  47  ,mph att36
10:13:19  48  ,trend att37
10:13:19  49  FROM svm6142
10:13:19  50  ORDER BY ydate
10:13:19  51  /

Table created.

Elapsed: 00:00:04.76
10:13:24 SQL> 
10:13:24 SQL> -- rpt
10:13:24 SQL> 
10:13:24 SQL> SELECT
10:13:24   2  pair
10:13:24   3  ,trend
10:13:24   4  ,gatt
10:13:24   5  ,COUNT(pair)
10:13:24   6  ,AVG(g6)
10:13:24   7  FROM svm6162
10:13:24   8  GROUP BY pair,trend,gatt
10:13:24   9  ORDER BY pair,trend,gatt
10:13:24  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6353 -.00262198
gbp_usd 	-1 up	      3617 .004281843
gbp_usd 	 1 nup	      6278 -.00268316
gbp_usd 	 1 up	      3517 .004359788
gbp_usd 	 1		72

Elapsed: 00:00:00.02
10:13:24 SQL> 
10:13:24 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.10
10:13:24 SQL> CREATE TABLE modsrc COMPRESS AS
10:13:24   2  SELECT
10:13:24   3  pair
10:13:24   4  ,ydate
10:13:24   5  ,prdate
10:13:24   6  ,trend
10:13:24   7  ,g6
10:13:24   8  ,gatt
10:13:24   9  ,gattn
10:13:24  10  FROM svm6162
10:13:24  11  /

Table created.

Elapsed: 00:00:00.09
10:13:24 SQL> 
10:13:24 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
10:13:25 SQL> 
10:13:25 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.09
10:13:25 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
10:13:25   2  SELECT
10:13:25   3  ydate
10:13:25   4  ,trend gbp_trend
10:13:25   5  ,g6    gbp_g6
10:13:25   6  ,gatt  gbp_gatt
10:13:25   7  ,gattn gbp_gattn
10:13:25   8  FROM modsrc
10:13:25   9  /

Table created.

Elapsed: 00:00:00.07
10:13:25 SQL> 
10:13:25 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
10:13:25 SQL> 
10:13:25 SQL> -- I need a copy of the attributes:
10:13:25 SQL> 
10:13:25 SQL> 
10:13:25 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.06
10:13:25 SQL> CREATE TABLE gbp_att COMPRESS AS
10:13:25   2  SELECT
10:13:25   3  ydate
10:13:25   4  ,att00 gbp_att00
10:13:25   5  ,att01 gbp_att01
10:13:25   6  ,att02 gbp_att02
10:13:25   7  ,att03 gbp_att03
10:13:25   8  ,att04 gbp_att04
10:13:25   9  ,att05 gbp_att05
10:13:25  10  ,att06 gbp_att06
10:13:25  11  ,att07 gbp_att07
10:13:25  12  ,att08 gbp_att08
10:13:25  13  ,att09 gbp_att09
10:13:25  14  ,att10 gbp_att10
10:13:25  15  ,att11 gbp_att11
10:13:25  16  ,att12 gbp_att12
10:13:25  17  ,att13 gbp_att13
10:13:25  18  ,att14 gbp_att14
10:13:25  19  ,att15 gbp_att15
10:13:25  20  ,att16 gbp_att16
10:13:25  21  ,att17 gbp_att17
10:13:25  22  ,att18 gbp_att18
10:13:25  23  ,att19 gbp_att19
10:13:25  24  ,att20 gbp_att20
10:13:25  25  ,att21 gbp_att21
10:13:25  26  ,att22 gbp_att22
10:13:25  27  ,att23 gbp_att23
10:13:25  28  ,att24 gbp_att24
10:13:25  29  ,att25 gbp_att25
10:13:25  30  ,att26 gbp_att26
10:13:25  31  ,att27 gbp_att27
10:13:25  32  ,att28 gbp_att28
10:13:25  33  ,att29 gbp_att29
10:13:25  34  ,att30 gbp_att30
10:13:25  35  ,att31 gbp_att31
10:13:25  36  ,att32 gbp_att32
10:13:25  37  ,att33 gbp_att33
10:13:25  38  ,att34 gbp_att34
10:13:25  39  ,att35 gbp_att35
10:13:25  40  ,att36 gbp_att36
10:13:25  41  ,att37 gbp_att37
10:13:25  42  FROM svm6162
10:13:25  43  /

Table created.

Elapsed: 00:00:00.18
10:13:25 SQL> 
10:13:25 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
10:13:26 SQL> 
10:13:26 SQL> -- rpt
10:13:26 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19837

Elapsed: 00:00:00.86
10:13:26 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19837

Elapsed: 00:00:00.01
10:13:26 SQL> 
10:13:26 SQL> --
10:13:26 SQL> -- jpy610.sql
10:13:26 SQL> --
10:13:26 SQL> 
10:13:26 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:13:26 SQL> 
10:13:26 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.46
10:13:27 SQL> 
10:13:27 SQL> -- I created di5min here:
10:13:27 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:13:27 SQL> 
10:13:27 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:13:27   2  SELECT
10:13:27   3  pair
10:13:27   4  ,ydate
10:13:27   5  ,prdate
10:13:27   6  ,rownum rnum -- acts as t in my time-series
10:13:27   7  ,clse
10:13:27   8  -- Derive a bunch of attributes from clse, the latest price:
10:13:27   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:13:27  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:13:27  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:13:27  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:13:27  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:13:27  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:13:27  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:13:27  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:13:27  17  --
10:13:27  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:13:27  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:13:27  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:13:27  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:13:27  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:13:27  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:13:27  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:13:27  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:13:27  26  --
10:13:27  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:13:27  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:13:27  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:13:27  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:13:27  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:13:27  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:13:27  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:13:27  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:13:27  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:13:27  36  FROM di5min WHERE pair LIKE'%jpy%'
10:13:27  37  AND ydate > sysdate - 95
10:13:27  38  ORDER BY ydate
10:13:27  39  /

View created.

Elapsed: 00:00:00.04
10:13:27 SQL> 
10:13:27 SQL> -- rpt
10:13:27 SQL> 
10:13:27 SQL> SELECT
10:13:27   2  pair
10:13:27   3  ,COUNT(pair)
10:13:27   4  ,MIN(clse),MAX(clse)
10:13:27   5  ,MIN(avg6),MAX(avg6)
10:13:27   6  ,MIN(ydate),MAX(ydate)
10:13:27   7  FROM svm6102
10:13:27   8  GROUP BY pair
10:13:27   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19835	 80.25	   84.485 80.3595205 84.3105479 2010-09-27 10:15:01 2010-12-31 10:05:00

Elapsed: 00:00:00.90
10:13:28 SQL> 
10:13:28 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:13:28 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.19
10:13:28 SQL> CREATE TABLE svm6122 COMPRESS AS
10:13:28   2  SELECT
10:13:28   3  pair
10:13:28   4  ,ydate
10:13:28   5  ,prdate
10:13:28   6  ,clse
10:13:28   7  -- g6 is important. I want to predict g6:
10:13:28   8  ,ld6 - clse g6
10:13:28   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:13:28  10  -- I want more attributes from the ones I derived above:
10:13:28  11  -- clse relation to moving-min
10:13:28  12  ,clse-min4  cm4
10:13:28  13  ,clse-min6  cm6
10:13:28  14  ,clse-min8  cm8
10:13:28  15  ,clse-min10 cm10
10:13:28  16  ,clse-min12 cm12
10:13:28  17  ,clse-min14 cm14
10:13:28  18  ,clse-min16 cm16
10:13:28  19  ,clse-min18 cm18
10:13:28  20  -- clse relation to moving-avg
10:13:28  21  ,clse-avg4  ca4
10:13:28  22  ,clse-avg6  ca6
10:13:28  23  ,clse-avg8  ca8
10:13:28  24  ,clse-avg10 ca10
10:13:28  25  ,clse-avg12 ca12
10:13:28  26  ,clse-avg14 ca14
10:13:28  27  ,clse-avg16 ca16
10:13:28  28  ,clse-avg18 ca18
10:13:28  29  -- clse relation to moving-max
10:13:28  30  ,clse-max4  cx4
10:13:28  31  ,clse-max6  cx6
10:13:28  32  ,clse-max8  cx8
10:13:28  33  ,clse-max10 cx10
10:13:28  34  ,clse-max12 cx12
10:13:28  35  ,clse-max14 cx14
10:13:28  36  ,clse-max16 cx16
10:13:28  37  ,clse-max18 cx18
10:13:28  38  -- Derive more attributes.
10:13:28  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:13:28  40  -- But COVAR_POP is more stable:
10:13:28  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:13:28  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:13:28  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:13:28  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:13:28  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:13:28  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:13:28  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:13:28  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:13:28  49  -- Derive date related attributes:
10:13:28  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:13:28  51  ,0+TO_CHAR(ydate,'D')d
10:13:28  52  ,0+TO_CHAR(ydate,'W')w
10:13:28  53  -- mpm stands for minutes-past-midnight:
10:13:28  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:13:28  55  -- mph stands for minutes-past-hour:
10:13:28  56  ,0+TO_CHAR(ydate,'MI')mph
10:13:28  57  FROM svm6102
10:13:28  58  ORDER BY ydate
10:13:28  59  /

Table created.

Elapsed: 00:00:02.13
10:13:30 SQL> 
10:13:30 SQL> -- rpt
10:13:30 SQL> 
10:13:30 SQL> SELECT
10:13:30   2  pair
10:13:30   3  ,COUNT(pair)
10:13:30   4  ,MIN(clse),MAX(clse)
10:13:30   5  ,MIN(ydate),MAX(ydate)
10:13:30   6  FROM svm6122
10:13:30   7  GROUP BY pair
10:13:30   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19835	 80.25	   84.485 2010-09-27 10:15:01 2010-12-31 10:05:00

Elapsed: 00:00:00.07
10:13:30 SQL> 
10:13:30 SQL> -- Prepare for derivation of NTILE based params:
10:13:30 SQL> 
10:13:30 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
10:13:30 SQL> CREATE TABLE svm6142 COMPRESS AS
10:13:30   2  SELECT
10:13:30   3  pair
10:13:30   4  ,ydate
10:13:30   5  ,prdate
10:13:30   6  ,clse
10:13:30   7  ,g6
10:13:30   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:13:30   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:13:30  10  ,CASE WHEN trend IS NULL THEN 1
10:13:30  11  	    WHEN trend =0      THEN 1
10:13:30  12  	    ELSE trend END trend
10:13:30  13  ,cm4
10:13:30  14  ,cm6
10:13:30  15  ,cm8
10:13:30  16  ,cm10
10:13:30  17  ,cm12
10:13:30  18  ,cm14
10:13:30  19  ,cm16
10:13:30  20  ,cm18
10:13:30  21  --
10:13:30  22  ,ca4
10:13:30  23  ,ca6
10:13:30  24  ,ca8
10:13:30  25  ,ca10
10:13:30  26  ,ca12
10:13:30  27  ,ca14
10:13:30  28  ,ca16
10:13:30  29  ,ca18
10:13:30  30  --
10:13:30  31  ,cx4
10:13:30  32  ,cx6
10:13:30  33  ,cx8
10:13:30  34  ,cx10
10:13:30  35  ,cx12
10:13:30  36  ,cx14
10:13:30  37  ,cx16
10:13:30  38  ,cx18
10:13:30  39  --
10:13:30  40  ,crr4
10:13:30  41  ,crr6
10:13:30  42  ,crr8
10:13:30  43  ,crr10
10:13:30  44  ,crr12
10:13:30  45  ,crr14
10:13:30  46  ,crr16
10:13:30  47  ,crr18
10:13:30  48  --
10:13:30  49  ,hh
10:13:30  50  ,d
10:13:30  51  ,w
10:13:30  52  ,mpm
10:13:30  53  ,mph
10:13:30  54  FROM svm6122
10:13:30  55  ORDER BY ydate
10:13:30  56  /

Table created.

Elapsed: 00:00:00.39
10:13:31 SQL> 
10:13:31 SQL> -- rpt
10:13:31 SQL> 
10:13:31 SQL> SELECT
10:13:31   2  pair
10:13:31   3  ,trend
10:13:31   4  ,gatt
10:13:31   5  ,COUNT(pair)
10:13:31   6  ,AVG(g6)
10:13:31   7  FROM svm6142
10:13:31   8  GROUP BY pair,trend,gatt
10:13:31   9  ORDER BY pair,trend,gatt
10:13:31  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5381 -.16614102
usd_jpy 	-1 up	      5022 .162741985
usd_jpy 	-1		72
usd_jpy 	 1 nup	      5213 -.15553128
usd_jpy 	 1 up	      4147 .165305123

Elapsed: 00:00:00.07
10:13:31 SQL> 
10:13:31 SQL> 
10:13:31 SQL> -- Derive NTILE based params:
10:13:31 SQL> 
10:13:31 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.47
10:13:31 SQL> CREATE TABLE svm6162 COMPRESS AS
10:13:31   2  SELECT
10:13:31   3  pair
10:13:31   4  ,ydate
10:13:31   5  ,prdate
10:13:31   6  ,clse
10:13:31   7  ,g6
10:13:31   8  ,gatt
10:13:31   9  ,gattn
10:13:31  10  ,trend
10:13:31  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:13:31  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:13:31  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:13:31  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:13:31  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:13:31  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:13:31  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:13:31  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:13:31  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:13:31  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:13:31  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:13:31  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:13:31  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:13:31  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:13:31  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:13:31  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:13:31  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:13:31  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:13:31  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:13:31  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:13:31  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:13:31  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:13:31  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:13:31  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:13:31  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:13:31  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:13:31  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:13:31  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:13:31  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:13:31  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:13:31  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:13:31  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:13:31  43  ,hh  att32
10:13:31  44  ,d   att33
10:13:31  45  ,w   att34
10:13:31  46  ,mpm att35
10:13:31  47  ,mph att36
10:13:31  48  ,trend att37
10:13:31  49  FROM svm6142
10:13:31  50  ORDER BY ydate
10:13:31  51  /

Table created.

Elapsed: 00:00:05.62
10:13:37 SQL> 
10:13:37 SQL> -- rpt
10:13:37 SQL> 
10:13:37 SQL> SELECT
10:13:37   2  pair
10:13:37   3  ,trend
10:13:37   4  ,gatt
10:13:37   5  ,COUNT(pair)
10:13:37   6  ,AVG(g6)
10:13:37   7  FROM svm6162
10:13:37   8  GROUP BY pair,trend,gatt
10:13:37   9  ORDER BY pair,trend,gatt
10:13:37  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5381 -.16614102
usd_jpy 	-1 up	      5022 .162741985
usd_jpy 	-1		72
usd_jpy 	 1 nup	      5213 -.15553128
usd_jpy 	 1 up	      4147 .165305123

Elapsed: 00:00:00.18
10:13:37 SQL> 
10:13:37 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.75
10:13:38 SQL> CREATE TABLE modsrc COMPRESS AS
10:13:38   2  SELECT
10:13:38   3  pair
10:13:38   4  ,ydate
10:13:38   5  ,prdate
10:13:38   6  ,trend
10:13:38   7  ,g6
10:13:38   8  ,gatt
10:13:38   9  ,gattn
10:13:38  10  FROM svm6162
10:13:38  11  /

Table created.

Elapsed: 00:00:00.15
10:13:38 SQL> 
10:13:38 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.31
10:13:38 SQL> 
10:13:38 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.08
10:13:38 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
10:13:38   2  SELECT
10:13:38   3  ydate
10:13:38   4  ,trend jpy_trend
10:13:38   5  ,g6    jpy_g6
10:13:38   6  ,gatt  jpy_gatt
10:13:38   7  ,gattn jpy_gattn
10:13:38   8  FROM modsrc
10:13:38   9  /

Table created.

Elapsed: 00:00:00.13
10:13:39 SQL> 
10:13:39 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
10:13:39 SQL> 
10:13:39 SQL> -- I need a copy of the attributes:
10:13:39 SQL> 
10:13:39 SQL> 
10:13:39 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.05
10:13:39 SQL> CREATE TABLE jpy_att COMPRESS AS
10:13:39   2  SELECT
10:13:39   3  ydate
10:13:39   4  ,att00 jpy_att00
10:13:39   5  ,att01 jpy_att01
10:13:39   6  ,att02 jpy_att02
10:13:39   7  ,att03 jpy_att03
10:13:39   8  ,att04 jpy_att04
10:13:39   9  ,att05 jpy_att05
10:13:39  10  ,att06 jpy_att06
10:13:39  11  ,att07 jpy_att07
10:13:39  12  ,att08 jpy_att08
10:13:39  13  ,att09 jpy_att09
10:13:39  14  ,att10 jpy_att10
10:13:39  15  ,att11 jpy_att11
10:13:39  16  ,att12 jpy_att12
10:13:39  17  ,att13 jpy_att13
10:13:39  18  ,att14 jpy_att14
10:13:39  19  ,att15 jpy_att15
10:13:39  20  ,att16 jpy_att16
10:13:39  21  ,att17 jpy_att17
10:13:39  22  ,att18 jpy_att18
10:13:39  23  ,att19 jpy_att19
10:13:39  24  ,att20 jpy_att20
10:13:39  25  ,att21 jpy_att21
10:13:39  26  ,att22 jpy_att22
10:13:39  27  ,att23 jpy_att23
10:13:39  28  ,att24 jpy_att24
10:13:39  29  ,att25 jpy_att25
10:13:39  30  ,att26 jpy_att26
10:13:39  31  ,att27 jpy_att27
10:13:39  32  ,att28 jpy_att28
10:13:39  33  ,att29 jpy_att29
10:13:39  34  ,att30 jpy_att30
10:13:39  35  ,att31 jpy_att31
10:13:39  36  ,att32 jpy_att32
10:13:39  37  ,att33 jpy_att33
10:13:39  38  ,att34 jpy_att34
10:13:39  39  ,att35 jpy_att35
10:13:39  40  ,att36 jpy_att36
10:13:39  41  ,att37 jpy_att37
10:13:39  42  FROM svm6162
10:13:39  43  /

Table created.

Elapsed: 00:00:00.20
10:13:39 SQL> 
10:13:39 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.51
10:13:40 SQL> 
10:13:40 SQL> -- rpt
10:13:40 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19835

Elapsed: 00:00:00.91
10:13:40 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19835

Elapsed: 00:00:00.00
10:13:40 SQL> 
10:13:40 SQL> --
10:13:40 SQL> -- cad610.sql
10:13:40 SQL> --
10:13:40 SQL> 
10:13:40 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:13:40 SQL> 
10:13:40 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.57
10:13:41 SQL> 
10:13:41 SQL> -- I created di5min here:
10:13:41 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:13:41 SQL> 
10:13:41 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:13:41   2  SELECT
10:13:41   3  pair
10:13:41   4  ,ydate
10:13:41   5  ,prdate
10:13:41   6  ,rownum rnum -- acts as t in my time-series
10:13:41   7  ,clse
10:13:41   8  -- Derive a bunch of attributes from clse, the latest price:
10:13:41   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:13:41  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:13:41  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:13:41  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:13:41  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:13:41  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:13:41  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:13:41  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:13:41  17  --
10:13:41  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:13:41  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:13:41  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:13:41  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:13:41  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:13:41  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:13:41  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:13:41  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:13:41  26  --
10:13:41  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:13:41  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:13:41  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:13:41  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:13:41  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:13:41  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:13:41  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:13:41  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:13:41  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:13:41  36  FROM di5min WHERE pair LIKE'%cad%'
10:13:41  37  AND ydate > sysdate - 95
10:13:41  38  ORDER BY ydate
10:13:41  39  /

View created.

Elapsed: 00:00:00.04
10:13:41 SQL> 
10:13:41 SQL> -- rpt
10:13:41 SQL> 
10:13:41 SQL> SELECT
10:13:41   2  pair
10:13:41   3  ,COUNT(pair)
10:13:41   4  ,MIN(clse),MAX(clse)
10:13:41   5  ,MIN(avg6),MAX(avg6)
10:13:41   6  ,MIN(ydate),MAX(ydate)
10:13:41   7  FROM svm6102
10:13:41   8  GROUP BY pair
10:13:41   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19835	.99755	    1.036 .998845205 1.03336849 2010-09-27 10:15:01 2010-12-31 10:05:00

Elapsed: 00:00:00.84
10:13:42 SQL> 
10:13:42 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:13:42 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.20
10:13:42 SQL> CREATE TABLE svm6122 COMPRESS AS
10:13:42   2  SELECT
10:13:42   3  pair
10:13:42   4  ,ydate
10:13:42   5  ,prdate
10:13:42   6  ,clse
10:13:42   7  -- g6 is important. I want to predict g6:
10:13:42   8  ,ld6 - clse g6
10:13:42   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:13:42  10  -- I want more attributes from the ones I derived above:
10:13:42  11  -- clse relation to moving-min
10:13:42  12  ,clse-min4  cm4
10:13:42  13  ,clse-min6  cm6
10:13:42  14  ,clse-min8  cm8
10:13:42  15  ,clse-min10 cm10
10:13:42  16  ,clse-min12 cm12
10:13:42  17  ,clse-min14 cm14
10:13:42  18  ,clse-min16 cm16
10:13:42  19  ,clse-min18 cm18
10:13:42  20  -- clse relation to moving-avg
10:13:42  21  ,clse-avg4  ca4
10:13:42  22  ,clse-avg6  ca6
10:13:42  23  ,clse-avg8  ca8
10:13:42  24  ,clse-avg10 ca10
10:13:42  25  ,clse-avg12 ca12
10:13:42  26  ,clse-avg14 ca14
10:13:42  27  ,clse-avg16 ca16
10:13:42  28  ,clse-avg18 ca18
10:13:42  29  -- clse relation to moving-max
10:13:42  30  ,clse-max4  cx4
10:13:42  31  ,clse-max6  cx6
10:13:42  32  ,clse-max8  cx8
10:13:42  33  ,clse-max10 cx10
10:13:42  34  ,clse-max12 cx12
10:13:42  35  ,clse-max14 cx14
10:13:42  36  ,clse-max16 cx16
10:13:42  37  ,clse-max18 cx18
10:13:42  38  -- Derive more attributes.
10:13:42  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:13:42  40  -- But COVAR_POP is more stable:
10:13:42  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:13:42  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:13:42  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:13:42  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:13:42  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:13:42  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:13:42  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:13:42  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:13:42  49  -- Derive date related attributes:
10:13:42  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:13:42  51  ,0+TO_CHAR(ydate,'D')d
10:13:42  52  ,0+TO_CHAR(ydate,'W')w
10:13:42  53  -- mpm stands for minutes-past-midnight:
10:13:42  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:13:42  55  -- mph stands for minutes-past-hour:
10:13:42  56  ,0+TO_CHAR(ydate,'MI')mph
10:13:42  57  FROM svm6102
10:13:42  58  ORDER BY ydate
10:13:42  59  /

Table created.

Elapsed: 00:00:02.07
10:13:44 SQL> 
10:13:44 SQL> -- rpt
10:13:44 SQL> 
10:13:44 SQL> SELECT
10:13:44   2  pair
10:13:44   3  ,COUNT(pair)
10:13:44   4  ,MIN(clse),MAX(clse)
10:13:44   5  ,MIN(ydate),MAX(ydate)
10:13:44   6  FROM svm6122
10:13:44   7  GROUP BY pair
10:13:44   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19835	.99755	    1.036 2010-09-27 10:15:01 2010-12-31 10:05:00

Elapsed: 00:00:00.13
10:13:44 SQL> 
10:13:44 SQL> -- Prepare for derivation of NTILE based params:
10:13:44 SQL> 
10:13:44 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
10:13:45 SQL> CREATE TABLE svm6142 COMPRESS AS
10:13:45   2  SELECT
10:13:45   3  pair
10:13:45   4  ,ydate
10:13:45   5  ,prdate
10:13:45   6  ,clse
10:13:45   7  ,g6
10:13:45   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:13:45   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:13:45  10  ,CASE WHEN trend IS NULL THEN 1
10:13:45  11  	    WHEN trend =0      THEN 1
10:13:45  12  	    ELSE trend END trend
10:13:45  13  ,cm4
10:13:45  14  ,cm6
10:13:45  15  ,cm8
10:13:45  16  ,cm10
10:13:45  17  ,cm12
10:13:45  18  ,cm14
10:13:45  19  ,cm16
10:13:45  20  ,cm18
10:13:45  21  --
10:13:45  22  ,ca4
10:13:45  23  ,ca6
10:13:45  24  ,ca8
10:13:45  25  ,ca10
10:13:45  26  ,ca12
10:13:45  27  ,ca14
10:13:45  28  ,ca16
10:13:45  29  ,ca18
10:13:45  30  --
10:13:45  31  ,cx4
10:13:45  32  ,cx6
10:13:45  33  ,cx8
10:13:45  34  ,cx10
10:13:45  35  ,cx12
10:13:45  36  ,cx14
10:13:45  37  ,cx16
10:13:45  38  ,cx18
10:13:45  39  --
10:13:45  40  ,crr4
10:13:45  41  ,crr6
10:13:45  42  ,crr8
10:13:45  43  ,crr10
10:13:45  44  ,crr12
10:13:45  45  ,crr14
10:13:45  46  ,crr16
10:13:45  47  ,crr18
10:13:45  48  --
10:13:45  49  ,hh
10:13:45  50  ,d
10:13:45  51  ,w
10:13:45  52  ,mpm
10:13:45  53  ,mph
10:13:45  54  FROM svm6122
10:13:45  55  ORDER BY ydate
10:13:45  56  /

Table created.

Elapsed: 00:00:00.36
10:13:45 SQL> 
10:13:45 SQL> -- rpt
10:13:45 SQL> 
10:13:45 SQL> SELECT
10:13:45   2  pair
10:13:45   3  ,trend
10:13:45   4  ,gatt
10:13:45   5  ,COUNT(pair)
10:13:45   6  ,AVG(g6)
10:13:45   7  FROM svm6142
10:13:45   8  GROUP BY pair,trend,gatt
10:13:45   9  ORDER BY pair,trend,gatt
10:13:45  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7360 -.00129818
usd_cad 	-1 up	      3123 .003088101
usd_cad 	-1		34
usd_cad 	 1 nup	      6787 -.00160065
usd_cad 	 1 up	      2493  .00359538
usd_cad 	 1		38

6 rows selected.

Elapsed: 00:00:00.04
10:13:45 SQL> 
10:13:45 SQL> 
10:13:45 SQL> -- Derive NTILE based params:
10:13:45 SQL> 
10:13:45 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
10:13:45 SQL> CREATE TABLE svm6162 COMPRESS AS
10:13:45   2  SELECT
10:13:45   3  pair
10:13:45   4  ,ydate
10:13:45   5  ,prdate
10:13:45   6  ,clse
10:13:45   7  ,g6
10:13:45   8  ,gatt
10:13:45   9  ,gattn
10:13:45  10  ,trend
10:13:45  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:13:45  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:13:45  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:13:45  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:13:45  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:13:45  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:13:45  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:13:45  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:13:45  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:13:45  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:13:45  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:13:45  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:13:45  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:13:45  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:13:45  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:13:45  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:13:45  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:13:45  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:13:45  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:13:45  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:13:45  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:13:45  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:13:45  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:13:45  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:13:45  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:13:45  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:13:45  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:13:45  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:13:45  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:13:45  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:13:45  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:13:45  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:13:45  43  ,hh  att32
10:13:45  44  ,d   att33
10:13:45  45  ,w   att34
10:13:45  46  ,mpm att35
10:13:45  47  ,mph att36
10:13:45  48  ,trend att37
10:13:45  49  FROM svm6142
10:13:45  50  ORDER BY ydate
10:13:45  51  /

Table created.

Elapsed: 00:00:04.79
10:13:50 SQL> 
10:13:50 SQL> -- rpt
10:13:50 SQL> 
10:13:50 SQL> SELECT
10:13:50   2  pair
10:13:50   3  ,trend
10:13:50   4  ,gatt
10:13:50   5  ,COUNT(pair)
10:13:50   6  ,AVG(g6)
10:13:50   7  FROM svm6162
10:13:50   8  GROUP BY pair,trend,gatt
10:13:50   9  ORDER BY pair,trend,gatt
10:13:50  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7360 -.00129818
usd_cad 	-1 up	      3123 .003088101
usd_cad 	-1		34
usd_cad 	 1 nup	      6787 -.00160065
usd_cad 	 1 up	      2493  .00359538
usd_cad 	 1		38

6 rows selected.

Elapsed: 00:00:00.03
10:13:50 SQL> 
10:13:50 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.11
10:13:50 SQL> CREATE TABLE modsrc COMPRESS AS
10:13:50   2  SELECT
10:13:50   3  pair
10:13:50   4  ,ydate
10:13:50   5  ,prdate
10:13:50   6  ,trend
10:13:50   7  ,g6
10:13:50   8  ,gatt
10:13:50   9  ,gattn
10:13:50  10  FROM svm6162
10:13:50  11  /

Table created.

Elapsed: 00:00:00.09
10:13:50 SQL> 
10:13:50 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
10:13:50 SQL> 
10:13:50 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.07
10:13:50 SQL> CREATE TABLE cad_ms610 COMPRESS AS
10:13:50   2  SELECT
10:13:50   3  ydate
10:13:50   4  ,trend cad_trend
10:13:50   5  ,g6    cad_g6
10:13:50   6  ,gatt  cad_gatt
10:13:50   7  ,gattn cad_gattn
10:13:50   8  FROM modsrc
10:13:50   9  /

Table created.

Elapsed: 00:00:00.06
10:13:50 SQL> 
10:13:50 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
10:13:51 SQL> 
10:13:51 SQL> -- I need a copy of the attributes:
10:13:51 SQL> 
10:13:51 SQL> 
10:13:51 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.07
10:13:51 SQL> CREATE TABLE cad_att COMPRESS AS
10:13:51   2  SELECT
10:13:51   3  ydate
10:13:51   4  ,att00 cad_att00
10:13:51   5  ,att01 cad_att01
10:13:51   6  ,att02 cad_att02
10:13:51   7  ,att03 cad_att03
10:13:51   8  ,att04 cad_att04
10:13:51   9  ,att05 cad_att05
10:13:51  10  ,att06 cad_att06
10:13:51  11  ,att07 cad_att07
10:13:51  12  ,att08 cad_att08
10:13:51  13  ,att09 cad_att09
10:13:51  14  ,att10 cad_att10
10:13:51  15  ,att11 cad_att11
10:13:51  16  ,att12 cad_att12
10:13:51  17  ,att13 cad_att13
10:13:51  18  ,att14 cad_att14
10:13:51  19  ,att15 cad_att15
10:13:51  20  ,att16 cad_att16
10:13:51  21  ,att17 cad_att17
10:13:51  22  ,att18 cad_att18
10:13:51  23  ,att19 cad_att19
10:13:51  24  ,att20 cad_att20
10:13:51  25  ,att21 cad_att21
10:13:51  26  ,att22 cad_att22
10:13:51  27  ,att23 cad_att23
10:13:51  28  ,att24 cad_att24
10:13:51  29  ,att25 cad_att25
10:13:51  30  ,att26 cad_att26
10:13:51  31  ,att27 cad_att27
10:13:51  32  ,att28 cad_att28
10:13:51  33  ,att29 cad_att29
10:13:51  34  ,att30 cad_att30
10:13:51  35  ,att31 cad_att31
10:13:51  36  ,att32 cad_att32
10:13:51  37  ,att33 cad_att33
10:13:51  38  ,att34 cad_att34
10:13:51  39  ,att35 cad_att35
10:13:51  40  ,att36 cad_att36
10:13:51  41  ,att37 cad_att37
10:13:51  42  FROM svm6162
10:13:51  43  /

Table created.

Elapsed: 00:00:00.17
10:13:51 SQL> 
10:13:51 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
10:13:51 SQL> 
10:13:51 SQL> -- rpt
10:13:51 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19835

Elapsed: 00:00:00.82
10:13:52 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19835

Elapsed: 00:00:00.01
10:13:52 SQL> 
10:13:52 SQL> --
10:13:52 SQL> -- chf610.sql
10:13:52 SQL> --
10:13:52 SQL> 
10:13:52 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:13:52 SQL> 
10:13:52 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.42
10:13:53 SQL> 
10:13:53 SQL> -- I created di5min here:
10:13:53 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:13:53 SQL> 
10:13:53 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:13:53   2  SELECT
10:13:53   3  pair
10:13:53   4  ,ydate
10:13:53   5  ,prdate
10:13:53   6  ,rownum rnum -- acts as t in my time-series
10:13:53   7  ,clse
10:13:53   8  -- Derive a bunch of attributes from clse, the latest price:
10:13:53   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:13:53  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:13:53  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:13:53  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:13:53  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:13:53  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:13:53  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:13:53  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:13:53  17  --
10:13:53  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:13:53  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:13:53  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:13:53  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:13:53  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:13:53  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:13:53  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:13:53  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:13:53  26  --
10:13:53  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:13:53  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:13:53  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:13:53  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:13:53  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:13:53  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:13:53  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:13:53  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:13:53  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:13:53  36  FROM di5min WHERE pair LIKE'%chf%'
10:13:53  37  AND ydate > sysdate - 95
10:13:53  38  ORDER BY ydate
10:13:53  39  /

View created.

Elapsed: 00:00:00.05
10:13:53 SQL> 
10:13:53 SQL> -- rpt
10:13:53 SQL> 
10:13:53 SQL> SELECT
10:13:53   2  pair
10:13:53   3  ,COUNT(pair)
10:13:53   4  ,MIN(clse),MAX(clse)
10:13:53   5  ,MIN(avg6),MAX(avg6)
10:13:53   6  ,MIN(ydate),MAX(ydate)
10:13:53   7  FROM svm6102
10:13:53   8  GROUP BY pair
10:13:53   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19838	 .9343	  1.00635 .935186301 1.00498151 2010-09-27 10:15:01 2010-12-31 10:05:00

Elapsed: 00:00:00.85
10:13:53 SQL> 
10:13:53 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:13:53 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.23
10:13:54 SQL> CREATE TABLE svm6122 COMPRESS AS
10:13:54   2  SELECT
10:13:54   3  pair
10:13:54   4  ,ydate
10:13:54   5  ,prdate
10:13:54   6  ,clse
10:13:54   7  -- g6 is important. I want to predict g6:
10:13:54   8  ,ld6 - clse g6
10:13:54   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:13:54  10  -- I want more attributes from the ones I derived above:
10:13:54  11  -- clse relation to moving-min
10:13:54  12  ,clse-min4  cm4
10:13:54  13  ,clse-min6  cm6
10:13:54  14  ,clse-min8  cm8
10:13:54  15  ,clse-min10 cm10
10:13:54  16  ,clse-min12 cm12
10:13:54  17  ,clse-min14 cm14
10:13:54  18  ,clse-min16 cm16
10:13:54  19  ,clse-min18 cm18
10:13:54  20  -- clse relation to moving-avg
10:13:54  21  ,clse-avg4  ca4
10:13:54  22  ,clse-avg6  ca6
10:13:54  23  ,clse-avg8  ca8
10:13:54  24  ,clse-avg10 ca10
10:13:54  25  ,clse-avg12 ca12
10:13:54  26  ,clse-avg14 ca14
10:13:54  27  ,clse-avg16 ca16
10:13:54  28  ,clse-avg18 ca18
10:13:54  29  -- clse relation to moving-max
10:13:54  30  ,clse-max4  cx4
10:13:54  31  ,clse-max6  cx6
10:13:54  32  ,clse-max8  cx8
10:13:54  33  ,clse-max10 cx10
10:13:54  34  ,clse-max12 cx12
10:13:54  35  ,clse-max14 cx14
10:13:54  36  ,clse-max16 cx16
10:13:54  37  ,clse-max18 cx18
10:13:54  38  -- Derive more attributes.
10:13:54  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:13:54  40  -- But COVAR_POP is more stable:
10:13:54  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:13:54  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:13:54  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:13:54  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:13:54  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:13:54  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:13:54  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:13:54  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:13:54  49  -- Derive date related attributes:
10:13:54  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:13:54  51  ,0+TO_CHAR(ydate,'D')d
10:13:54  52  ,0+TO_CHAR(ydate,'W')w
10:13:54  53  -- mpm stands for minutes-past-midnight:
10:13:54  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:13:54  55  -- mph stands for minutes-past-hour:
10:13:54  56  ,0+TO_CHAR(ydate,'MI')mph
10:13:54  57  FROM svm6102
10:13:54  58  ORDER BY ydate
10:13:54  59  /

Table created.

Elapsed: 00:00:02.03
10:13:56 SQL> 
10:13:56 SQL> -- rpt
10:13:56 SQL> 
10:13:56 SQL> SELECT
10:13:56   2  pair
10:13:56   3  ,COUNT(pair)
10:13:56   4  ,MIN(clse),MAX(clse)
10:13:56   5  ,MIN(ydate),MAX(ydate)
10:13:56   6  FROM svm6122
10:13:56   7  GROUP BY pair
10:13:56   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19838	 .9343	  1.00635 2010-09-27 10:15:01 2010-12-31 10:05:00

Elapsed: 00:00:00.04
10:13:56 SQL> 
10:13:56 SQL> -- Prepare for derivation of NTILE based params:
10:13:56 SQL> 
10:13:56 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.17
10:13:56 SQL> CREATE TABLE svm6142 COMPRESS AS
10:13:56   2  SELECT
10:13:56   3  pair
10:13:56   4  ,ydate
10:13:56   5  ,prdate
10:13:56   6  ,clse
10:13:56   7  ,g6
10:13:56   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:13:56   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:13:56  10  ,CASE WHEN trend IS NULL THEN 1
10:13:56  11  	    WHEN trend =0      THEN 1
10:13:56  12  	    ELSE trend END trend
10:13:56  13  ,cm4
10:13:56  14  ,cm6
10:13:56  15  ,cm8
10:13:56  16  ,cm10
10:13:56  17  ,cm12
10:13:56  18  ,cm14
10:13:56  19  ,cm16
10:13:56  20  ,cm18
10:13:56  21  --
10:13:56  22  ,ca4
10:13:56  23  ,ca6
10:13:56  24  ,ca8
10:13:56  25  ,ca10
10:13:56  26  ,ca12
10:13:56  27  ,ca14
10:13:56  28  ,ca16
10:13:56  29  ,ca18
10:13:56  30  --
10:13:56  31  ,cx4
10:13:56  32  ,cx6
10:13:56  33  ,cx8
10:13:56  34  ,cx10
10:13:56  35  ,cx12
10:13:56  36  ,cx14
10:13:56  37  ,cx16
10:13:56  38  ,cx18
10:13:56  39  --
10:13:56  40  ,crr4
10:13:56  41  ,crr6
10:13:56  42  ,crr8
10:13:56  43  ,crr10
10:13:56  44  ,crr12
10:13:56  45  ,crr14
10:13:56  46  ,crr16
10:13:56  47  ,crr18
10:13:56  48  --
10:13:56  49  ,hh
10:13:56  50  ,d
10:13:56  51  ,w
10:13:56  52  ,mpm
10:13:56  53  ,mph
10:13:56  54  FROM svm6122
10:13:56  55  ORDER BY ydate
10:13:56  56  /

Table created.

Elapsed: 00:00:00.39
10:13:56 SQL> 
10:13:56 SQL> -- rpt
10:13:56 SQL> 
10:13:56 SQL> SELECT
10:13:56   2  pair
10:13:56   3  ,trend
10:13:56   4  ,gatt
10:13:56   5  ,COUNT(pair)
10:13:56   6  ,AVG(g6)
10:13:56   7  FROM svm6142
10:13:56   8  GROUP BY pair,trend,gatt
10:13:56   9  ORDER BY pair,trend,gatt
10:13:56  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7319 -.00197213
usd_chf 	-1 up	      3229 .003875422
usd_chf 	-1		18
usd_chf 	 1 nup	      6657 -.00163183
usd_chf 	 1 up	      2561 .003689384
usd_chf 	 1		54

6 rows selected.

Elapsed: 00:00:00.04
10:13:56 SQL> 
10:13:56 SQL> 
10:13:56 SQL> -- Derive NTILE based params:
10:13:56 SQL> 
10:13:56 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
10:13:57 SQL> CREATE TABLE svm6162 COMPRESS AS
10:13:57   2  SELECT
10:13:57   3  pair
10:13:57   4  ,ydate
10:13:57   5  ,prdate
10:13:57   6  ,clse
10:13:57   7  ,g6
10:13:57   8  ,gatt
10:13:57   9  ,gattn
10:13:57  10  ,trend
10:13:57  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:13:57  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:13:57  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:13:57  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:13:57  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:13:57  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:13:57  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:13:57  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:13:57  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:13:57  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:13:57  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:13:57  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:13:57  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:13:57  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:13:57  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:13:57  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:13:57  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:13:57  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:13:57  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:13:57  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:13:57  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:13:57  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:13:57  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:13:57  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:13:57  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:13:57  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:13:57  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:13:57  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:13:57  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:13:57  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:13:57  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:13:57  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:13:57  43  ,hh  att32
10:13:57  44  ,d   att33
10:13:57  45  ,w   att34
10:13:57  46  ,mpm att35
10:13:57  47  ,mph att36
10:13:57  48  ,trend att37
10:13:57  49  FROM svm6142
10:13:57  50  ORDER BY ydate
10:13:57  51  /

Table created.

Elapsed: 00:00:04.87
10:14:01 SQL> 
10:14:01 SQL> -- rpt
10:14:01 SQL> 
10:14:01 SQL> SELECT
10:14:01   2  pair
10:14:01   3  ,trend
10:14:01   4  ,gatt
10:14:01   5  ,COUNT(pair)
10:14:01   6  ,AVG(g6)
10:14:01   7  FROM svm6162
10:14:01   8  GROUP BY pair,trend,gatt
10:14:01   9  ORDER BY pair,trend,gatt
10:14:01  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7319 -.00197213
usd_chf 	-1 up	      3229 .003875422
usd_chf 	-1		18
usd_chf 	 1 nup	      6657 -.00163183
usd_chf 	 1 up	      2561 .003689384
usd_chf 	 1		54

6 rows selected.

Elapsed: 00:00:00.03
10:14:01 SQL> 
10:14:01 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
10:14:02 SQL> CREATE TABLE modsrc COMPRESS AS
10:14:02   2  SELECT
10:14:02   3  pair
10:14:02   4  ,ydate
10:14:02   5  ,prdate
10:14:02   6  ,trend
10:14:02   7  ,g6
10:14:02   8  ,gatt
10:14:02   9  ,gattn
10:14:02  10  FROM svm6162
10:14:02  11  /

Table created.

Elapsed: 00:00:00.08
10:14:02 SQL> 
10:14:02 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
10:14:02 SQL> 
10:14:02 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
10:14:02 SQL> CREATE TABLE chf_ms610 COMPRESS AS
10:14:02   2  SELECT
10:14:02   3  ydate
10:14:02   4  ,trend chf_trend
10:14:02   5  ,g6    chf_g6
10:14:02   6  ,gatt  chf_gatt
10:14:02   7  ,gattn chf_gattn
10:14:02   8  FROM modsrc
10:14:02   9  /

Table created.

Elapsed: 00:00:00.06
10:14:02 SQL> 
10:14:02 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
10:14:02 SQL> 
10:14:02 SQL> -- I need a copy of the attributes:
10:14:02 SQL> 
10:14:02 SQL> 
10:14:02 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.10
10:14:02 SQL> CREATE TABLE chf_att COMPRESS AS
10:14:02   2  SELECT
10:14:02   3  ydate
10:14:02   4  ,att00 chf_att00
10:14:02   5  ,att01 chf_att01
10:14:02   6  ,att02 chf_att02
10:14:02   7  ,att03 chf_att03
10:14:02   8  ,att04 chf_att04
10:14:02   9  ,att05 chf_att05
10:14:02  10  ,att06 chf_att06
10:14:02  11  ,att07 chf_att07
10:14:02  12  ,att08 chf_att08
10:14:02  13  ,att09 chf_att09
10:14:02  14  ,att10 chf_att10
10:14:02  15  ,att11 chf_att11
10:14:02  16  ,att12 chf_att12
10:14:02  17  ,att13 chf_att13
10:14:02  18  ,att14 chf_att14
10:14:02  19  ,att15 chf_att15
10:14:02  20  ,att16 chf_att16
10:14:02  21  ,att17 chf_att17
10:14:02  22  ,att18 chf_att18
10:14:02  23  ,att19 chf_att19
10:14:02  24  ,att20 chf_att20
10:14:02  25  ,att21 chf_att21
10:14:02  26  ,att22 chf_att22
10:14:02  27  ,att23 chf_att23
10:14:02  28  ,att24 chf_att24
10:14:02  29  ,att25 chf_att25
10:14:02  30  ,att26 chf_att26
10:14:02  31  ,att27 chf_att27
10:14:02  32  ,att28 chf_att28
10:14:02  33  ,att29 chf_att29
10:14:02  34  ,att30 chf_att30
10:14:02  35  ,att31 chf_att31
10:14:02  36  ,att32 chf_att32
10:14:02  37  ,att33 chf_att33
10:14:02  38  ,att34 chf_att34
10:14:02  39  ,att35 chf_att35
10:14:02  40  ,att36 chf_att36
10:14:02  41  ,att37 chf_att37
10:14:02  42  FROM svm6162
10:14:02  43  /

Table created.

Elapsed: 00:00:00.17
10:14:02 SQL> 
10:14:02 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
10:14:03 SQL> 
10:14:03 SQL> -- rpt
10:14:03 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19838

Elapsed: 00:00:00.84
10:14:04 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19838

Elapsed: 00:00:00.00
10:14:04 SQL> 
10:14:04 SQL> --
10:14:04 SQL> -- ech610.sql
10:14:04 SQL> --
10:14:04 SQL> 
10:14:04 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:14:04 SQL> 
10:14:04 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.40
10:14:04 SQL> 
10:14:04 SQL> -- I created di5min here:
10:14:04 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:14:04 SQL> 
10:14:04 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:14:04   2  SELECT
10:14:04   3  pair
10:14:04   4  ,ydate
10:14:04   5  ,prdate
10:14:04   6  ,rownum rnum -- acts as t in my time-series
10:14:04   7  ,clse
10:14:04   8  -- Derive a bunch of attributes from clse, the latest price:
10:14:04   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:14:04  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:14:04  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:14:04  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:14:04  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:14:04  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:14:04  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:14:04  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:14:04  17  --
10:14:04  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:14:04  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:14:04  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:14:04  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:14:04  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:14:04  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:14:04  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:14:04  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:14:04  26  --
10:14:04  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:14:04  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:14:04  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:14:04  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:14:04  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:14:04  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:14:04  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:14:04  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:14:04  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:14:04  36  FROM di5min WHERE pair LIKE'%ech%'
10:14:04  37  AND ydate > sysdate - 95
10:14:04  38  ORDER BY ydate
10:14:04  39  /

View created.

Elapsed: 00:00:00.04
10:14:04 SQL> 
10:14:04 SQL> -- rpt
10:14:04 SQL> 
10:14:04 SQL> SELECT
10:14:04   2  pair
10:14:04   3  ,COUNT(pair)
10:14:04   4  ,MIN(clse),MAX(clse)
10:14:04   5  ,MIN(avg6),MAX(avg6)
10:14:04   6  ,MIN(ydate),MAX(ydate)
10:14:04   7  FROM svm6102
10:14:04   8  GROUP BY pair
10:14:04   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19837 1.24213032 1.38284305 1.24319868 1.37986485 2010-09-27 10:15:01 2010-12-31 10:05:00

Elapsed: 00:00:00.79
10:14:05 SQL> 
10:14:05 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:14:05 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.29
10:14:05 SQL> CREATE TABLE svm6122 COMPRESS AS
10:14:05   2  SELECT
10:14:05   3  pair
10:14:05   4  ,ydate
10:14:05   5  ,prdate
10:14:05   6  ,clse
10:14:05   7  -- g6 is important. I want to predict g6:
10:14:05   8  ,ld6 - clse g6
10:14:05   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:14:05  10  -- I want more attributes from the ones I derived above:
10:14:05  11  -- clse relation to moving-min
10:14:05  12  ,clse-min4  cm4
10:14:05  13  ,clse-min6  cm6
10:14:05  14  ,clse-min8  cm8
10:14:05  15  ,clse-min10 cm10
10:14:05  16  ,clse-min12 cm12
10:14:05  17  ,clse-min14 cm14
10:14:05  18  ,clse-min16 cm16
10:14:05  19  ,clse-min18 cm18
10:14:05  20  -- clse relation to moving-avg
10:14:05  21  ,clse-avg4  ca4
10:14:05  22  ,clse-avg6  ca6
10:14:05  23  ,clse-avg8  ca8
10:14:05  24  ,clse-avg10 ca10
10:14:05  25  ,clse-avg12 ca12
10:14:05  26  ,clse-avg14 ca14
10:14:05  27  ,clse-avg16 ca16
10:14:05  28  ,clse-avg18 ca18
10:14:05  29  -- clse relation to moving-max
10:14:05  30  ,clse-max4  cx4
10:14:05  31  ,clse-max6  cx6
10:14:05  32  ,clse-max8  cx8
10:14:05  33  ,clse-max10 cx10
10:14:05  34  ,clse-max12 cx12
10:14:05  35  ,clse-max14 cx14
10:14:05  36  ,clse-max16 cx16
10:14:05  37  ,clse-max18 cx18
10:14:05  38  -- Derive more attributes.
10:14:05  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:14:05  40  -- But COVAR_POP is more stable:
10:14:05  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:14:05  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:14:05  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:14:05  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:14:05  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:14:05  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:14:05  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:14:05  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:14:05  49  -- Derive date related attributes:
10:14:05  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:14:05  51  ,0+TO_CHAR(ydate,'D')d
10:14:05  52  ,0+TO_CHAR(ydate,'W')w
10:14:05  53  -- mpm stands for minutes-past-midnight:
10:14:05  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:14:05  55  -- mph stands for minutes-past-hour:
10:14:05  56  ,0+TO_CHAR(ydate,'MI')mph
10:14:05  57  FROM svm6102
10:14:05  58  ORDER BY ydate
10:14:05  59  /

Table created.

Elapsed: 00:00:02.09
10:14:07 SQL> 
10:14:07 SQL> -- rpt
10:14:07 SQL> 
10:14:07 SQL> SELECT
10:14:07   2  pair
10:14:07   3  ,COUNT(pair)
10:14:07   4  ,MIN(clse),MAX(clse)
10:14:07   5  ,MIN(ydate),MAX(ydate)
10:14:07   6  FROM svm6122
10:14:07   7  GROUP BY pair
10:14:07   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19837 1.24213032 1.38284305 2010-09-27 10:15:01 2010-12-31 10:05:00

Elapsed: 00:00:00.06
10:14:07 SQL> 
10:14:07 SQL> -- Prepare for derivation of NTILE based params:
10:14:07 SQL> 
10:14:07 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.36
10:14:08 SQL> CREATE TABLE svm6142 COMPRESS AS
10:14:08   2  SELECT
10:14:08   3  pair
10:14:08   4  ,ydate
10:14:08   5  ,prdate
10:14:08   6  ,clse
10:14:08   7  ,g6
10:14:08   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:14:08   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:14:08  10  ,CASE WHEN trend IS NULL THEN 1
10:14:08  11  	    WHEN trend =0      THEN 1
10:14:08  12  	    ELSE trend END trend
10:14:08  13  ,cm4
10:14:08  14  ,cm6
10:14:08  15  ,cm8
10:14:08  16  ,cm10
10:14:08  17  ,cm12
10:14:08  18  ,cm14
10:14:08  19  ,cm16
10:14:08  20  ,cm18
10:14:08  21  --
10:14:08  22  ,ca4
10:14:08  23  ,ca6
10:14:08  24  ,ca8
10:14:08  25  ,ca10
10:14:08  26  ,ca12
10:14:08  27  ,ca14
10:14:08  28  ,ca16
10:14:08  29  ,ca18
10:14:08  30  --
10:14:08  31  ,cx4
10:14:08  32  ,cx6
10:14:08  33  ,cx8
10:14:08  34  ,cx10
10:14:08  35  ,cx12
10:14:08  36  ,cx14
10:14:08  37  ,cx16
10:14:08  38  ,cx18
10:14:08  39  --
10:14:08  40  ,crr4
10:14:08  41  ,crr6
10:14:08  42  ,crr8
10:14:08  43  ,crr10
10:14:08  44  ,crr12
10:14:08  45  ,crr14
10:14:08  46  ,crr16
10:14:08  47  ,crr18
10:14:08  48  --
10:14:08  49  ,hh
10:14:08  50  ,d
10:14:08  51  ,w
10:14:08  52  ,mpm
10:14:08  53  ,mph
10:14:08  54  FROM svm6122
10:14:08  55  ORDER BY ydate
10:14:08  56  /

Table created.

Elapsed: 00:00:00.39
10:14:08 SQL> 
10:14:08 SQL> -- rpt
10:14:08 SQL> 
10:14:08 SQL> SELECT
10:14:08   2  pair
10:14:08   3  ,trend
10:14:08   4  ,gatt
10:14:08   5  ,COUNT(pair)
10:14:08   6  ,AVG(g6)
10:14:08   7  FROM svm6142
10:14:08   8  GROUP BY pair,trend,gatt
10:14:08   9  ORDER BY pair,trend,gatt
10:14:08  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6630  -.0022041
ech_usd 	-1 up	      3690 .003556764
ech_usd 	 1 nup	      6533 -.00231309
ech_usd 	 1 up	      2912 .003832281
ech_usd 	 1		72

Elapsed: 00:00:00.05
10:14:08 SQL> 
10:14:08 SQL> 
10:14:08 SQL> -- Derive NTILE based params:
10:14:08 SQL> 
10:14:08 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
10:14:08 SQL> CREATE TABLE svm6162 COMPRESS AS
10:14:08   2  SELECT
10:14:08   3  pair
10:14:08   4  ,ydate
10:14:08   5  ,prdate
10:14:08   6  ,clse
10:14:08   7  ,g6
10:14:08   8  ,gatt
10:14:08   9  ,gattn
10:14:08  10  ,trend
10:14:08  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:14:08  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:14:08  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:14:08  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:14:08  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:14:08  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:14:08  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:14:08  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:14:08  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:14:08  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:14:08  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:14:08  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:14:08  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:14:08  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:14:08  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:14:08  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:14:08  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:14:08  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:14:08  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:14:08  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:14:08  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:14:08  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:14:08  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:14:08  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:14:08  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:14:08  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:14:08  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:14:08  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:14:08  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:14:08  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:14:08  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:14:08  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:14:08  43  ,hh  att32
10:14:08  44  ,d   att33
10:14:08  45  ,w   att34
10:14:08  46  ,mpm att35
10:14:08  47  ,mph att36
10:14:08  48  ,trend att37
10:14:08  49  FROM svm6142
10:14:08  50  ORDER BY ydate
10:14:08  51  /

Table created.

Elapsed: 00:00:04.92
10:14:13 SQL> 
10:14:13 SQL> -- rpt
10:14:13 SQL> 
10:14:13 SQL> SELECT
10:14:13   2  pair
10:14:13   3  ,trend
10:14:13   4  ,gatt
10:14:13   5  ,COUNT(pair)
10:14:13   6  ,AVG(g6)
10:14:13   7  FROM svm6162
10:14:13   8  GROUP BY pair,trend,gatt
10:14:13   9  ORDER BY pair,trend,gatt
10:14:13  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6630  -.0022041
ech_usd 	-1 up	      3690 .003556764
ech_usd 	 1 nup	      6533 -.00231309
ech_usd 	 1 up	      2912 .003832281
ech_usd 	 1		72

Elapsed: 00:00:00.02
10:14:13 SQL> 
10:14:13 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.10
10:14:13 SQL> CREATE TABLE modsrc COMPRESS AS
10:14:13   2  SELECT
10:14:13   3  pair
10:14:13   4  ,ydate
10:14:13   5  ,prdate
10:14:13   6  ,trend
10:14:13   7  ,g6
10:14:13   8  ,gatt
10:14:13   9  ,gattn
10:14:13  10  FROM svm6162
10:14:13  11  /

Table created.

Elapsed: 00:00:00.08
10:14:13 SQL> 
10:14:13 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
10:14:14 SQL> 
10:14:14 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
10:14:14 SQL> CREATE TABLE ech_ms610 COMPRESS AS
10:14:14   2  SELECT
10:14:14   3  ydate
10:14:14   4  ,trend ech_trend
10:14:14   5  ,g6    ech_g6
10:14:14   6  ,gatt  ech_gatt
10:14:14   7  ,gattn ech_gattn
10:14:14   8  FROM modsrc
10:14:14   9  /

Table created.

Elapsed: 00:00:00.07
10:14:14 SQL> 
10:14:14 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
10:14:14 SQL> 
10:14:14 SQL> -- I need a copy of the attributes:
10:14:14 SQL> 
10:14:14 SQL> 
10:14:14 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.05
10:14:14 SQL> CREATE TABLE ech_att COMPRESS AS
10:14:14   2  SELECT
10:14:14   3  ydate
10:14:14   4  ,att00 ech_att00
10:14:14   5  ,att01 ech_att01
10:14:14   6  ,att02 ech_att02
10:14:14   7  ,att03 ech_att03
10:14:14   8  ,att04 ech_att04
10:14:14   9  ,att05 ech_att05
10:14:14  10  ,att06 ech_att06
10:14:14  11  ,att07 ech_att07
10:14:14  12  ,att08 ech_att08
10:14:14  13  ,att09 ech_att09
10:14:14  14  ,att10 ech_att10
10:14:14  15  ,att11 ech_att11
10:14:14  16  ,att12 ech_att12
10:14:14  17  ,att13 ech_att13
10:14:14  18  ,att14 ech_att14
10:14:14  19  ,att15 ech_att15
10:14:14  20  ,att16 ech_att16
10:14:14  21  ,att17 ech_att17
10:14:14  22  ,att18 ech_att18
10:14:14  23  ,att19 ech_att19
10:14:14  24  ,att20 ech_att20
10:14:14  25  ,att21 ech_att21
10:14:14  26  ,att22 ech_att22
10:14:14  27  ,att23 ech_att23
10:14:14  28  ,att24 ech_att24
10:14:14  29  ,att25 ech_att25
10:14:14  30  ,att26 ech_att26
10:14:14  31  ,att27 ech_att27
10:14:14  32  ,att28 ech_att28
10:14:14  33  ,att29 ech_att29
10:14:14  34  ,att30 ech_att30
10:14:14  35  ,att31 ech_att31
10:14:14  36  ,att32 ech_att32
10:14:14  37  ,att33 ech_att33
10:14:14  38  ,att34 ech_att34
10:14:14  39  ,att35 ech_att35
10:14:14  40  ,att36 ech_att36
10:14:14  41  ,att37 ech_att37
10:14:14  42  FROM svm6162
10:14:14  43  /

Table created.

Elapsed: 00:00:00.16
10:14:14 SQL> 
10:14:14 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
10:14:15 SQL> 
10:14:15 SQL> -- rpt
10:14:15 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19837

Elapsed: 00:00:00.77
10:14:15 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19837

Elapsed: 00:00:00.00
10:14:15 SQL> 
10:14:15 SQL> --
10:14:15 SQL> -- egb610.sql
10:14:15 SQL> --
10:14:15 SQL> 
10:14:15 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:14:15 SQL> 
10:14:15 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
10:14:16 SQL> 
10:14:16 SQL> -- I created di5min here:
10:14:16 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:14:16 SQL> 
10:14:16 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:14:16   2  SELECT
10:14:16   3  pair
10:14:16   4  ,ydate
10:14:16   5  ,prdate
10:14:16   6  ,rownum rnum -- acts as t in my time-series
10:14:16   7  ,clse
10:14:16   8  -- Derive a bunch of attributes from clse, the latest price:
10:14:16   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:14:16  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:14:16  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:14:16  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:14:16  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:14:16  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:14:16  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:14:16  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:14:16  17  --
10:14:16  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:14:16  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:14:16  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:14:16  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:14:16  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:14:16  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:14:16  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:14:16  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:14:16  26  --
10:14:16  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:14:16  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:14:16  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:14:16  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:14:16  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:14:16  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:14:16  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:14:16  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:14:16  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:14:16  36  FROM di5min WHERE pair LIKE'%egb%'
10:14:16  37  AND ydate > sysdate - 95
10:14:16  38  ORDER BY ydate
10:14:16  39  /

View created.

Elapsed: 00:00:00.05
10:14:16 SQL> 
10:14:16 SQL> -- rpt
10:14:16 SQL> 
10:14:16 SQL> SELECT
10:14:16   2  pair
10:14:16   3  ,COUNT(pair)
10:14:16   4  ,MIN(clse),MAX(clse)
10:14:16   5  ,MIN(avg6),MAX(avg6)
10:14:16   6  ,MIN(ydate),MAX(ydate)
10:14:16   7  FROM svm6102
10:14:16   8  GROUP BY pair
10:14:16   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19836 .833520557 .893920122 .834199029 .892400287 2010-09-27 10:15:01 2010-12-31 10:05:00

Elapsed: 00:00:00.95
10:14:17 SQL> 
10:14:17 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:14:17 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.29
10:14:17 SQL> CREATE TABLE svm6122 COMPRESS AS
10:14:17   2  SELECT
10:14:17   3  pair
10:14:17   4  ,ydate
10:14:17   5  ,prdate
10:14:17   6  ,clse
10:14:17   7  -- g6 is important. I want to predict g6:
10:14:17   8  ,ld6 - clse g6
10:14:17   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:14:17  10  -- I want more attributes from the ones I derived above:
10:14:17  11  -- clse relation to moving-min
10:14:17  12  ,clse-min4  cm4
10:14:17  13  ,clse-min6  cm6
10:14:17  14  ,clse-min8  cm8
10:14:17  15  ,clse-min10 cm10
10:14:17  16  ,clse-min12 cm12
10:14:17  17  ,clse-min14 cm14
10:14:17  18  ,clse-min16 cm16
10:14:17  19  ,clse-min18 cm18
10:14:17  20  -- clse relation to moving-avg
10:14:17  21  ,clse-avg4  ca4
10:14:17  22  ,clse-avg6  ca6
10:14:17  23  ,clse-avg8  ca8
10:14:17  24  ,clse-avg10 ca10
10:14:17  25  ,clse-avg12 ca12
10:14:17  26  ,clse-avg14 ca14
10:14:17  27  ,clse-avg16 ca16
10:14:17  28  ,clse-avg18 ca18
10:14:17  29  -- clse relation to moving-max
10:14:17  30  ,clse-max4  cx4
10:14:17  31  ,clse-max6  cx6
10:14:17  32  ,clse-max8  cx8
10:14:17  33  ,clse-max10 cx10
10:14:17  34  ,clse-max12 cx12
10:14:17  35  ,clse-max14 cx14
10:14:17  36  ,clse-max16 cx16
10:14:17  37  ,clse-max18 cx18
10:14:17  38  -- Derive more attributes.
10:14:17  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:14:17  40  -- But COVAR_POP is more stable:
10:14:17  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:14:17  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:14:17  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:14:17  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:14:17  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:14:17  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:14:17  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:14:17  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:14:17  49  -- Derive date related attributes:
10:14:17  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:14:17  51  ,0+TO_CHAR(ydate,'D')d
10:14:17  52  ,0+TO_CHAR(ydate,'W')w
10:14:17  53  -- mpm stands for minutes-past-midnight:
10:14:17  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:14:17  55  -- mph stands for minutes-past-hour:
10:14:17  56  ,0+TO_CHAR(ydate,'MI')mph
10:14:17  57  FROM svm6102
10:14:17  58  ORDER BY ydate
10:14:17  59  /

Table created.

Elapsed: 00:00:02.57
10:14:20 SQL> 
10:14:20 SQL> -- rpt
10:14:20 SQL> 
10:14:20 SQL> SELECT
10:14:20   2  pair
10:14:20   3  ,COUNT(pair)
10:14:20   4  ,MIN(clse),MAX(clse)
10:14:20   5  ,MIN(ydate),MAX(ydate)
10:14:20   6  FROM svm6122
10:14:20   7  GROUP BY pair
10:14:20   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19836 .833520557 .893920122 2010-09-27 10:15:01 2010-12-31 10:05:00

Elapsed: 00:00:00.07
10:14:20 SQL> 
10:14:20 SQL> -- Prepare for derivation of NTILE based params:
10:14:20 SQL> 
10:14:20 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.42
10:14:20 SQL> CREATE TABLE svm6142 COMPRESS AS
10:14:20   2  SELECT
10:14:20   3  pair
10:14:20   4  ,ydate
10:14:20   5  ,prdate
10:14:20   6  ,clse
10:14:20   7  ,g6
10:14:20   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:14:20   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:14:20  10  ,CASE WHEN trend IS NULL THEN 1
10:14:20  11  	    WHEN trend =0      THEN 1
10:14:20  12  	    ELSE trend END trend
10:14:20  13  ,cm4
10:14:20  14  ,cm6
10:14:20  15  ,cm8
10:14:20  16  ,cm10
10:14:20  17  ,cm12
10:14:20  18  ,cm14
10:14:20  19  ,cm16
10:14:20  20  ,cm18
10:14:20  21  --
10:14:20  22  ,ca4
10:14:20  23  ,ca6
10:14:20  24  ,ca8
10:14:20  25  ,ca10
10:14:20  26  ,ca12
10:14:20  27  ,ca14
10:14:20  28  ,ca16
10:14:20  29  ,ca18
10:14:20  30  --
10:14:20  31  ,cx4
10:14:20  32  ,cx6
10:14:20  33  ,cx8
10:14:20  34  ,cx10
10:14:20  35  ,cx12
10:14:20  36  ,cx14
10:14:20  37  ,cx16
10:14:20  38  ,cx18
10:14:20  39  --
10:14:20  40  ,crr4
10:14:20  41  ,crr6
10:14:20  42  ,crr8
10:14:20  43  ,crr10
10:14:20  44  ,crr12
10:14:20  45  ,crr14
10:14:20  46  ,crr16
10:14:20  47  ,crr18
10:14:20  48  --
10:14:20  49  ,hh
10:14:20  50  ,d
10:14:20  51  ,w
10:14:20  52  ,mpm
10:14:20  53  ,mph
10:14:20  54  FROM svm6122
10:14:20  55  ORDER BY ydate
10:14:20  56  /

Table created.

Elapsed: 00:00:00.45
10:14:21 SQL> 
10:14:21 SQL> -- rpt
10:14:21 SQL> 
10:14:21 SQL> SELECT
10:14:21   2  pair
10:14:21   3  ,trend
10:14:21   4  ,gatt
10:14:21   5  ,COUNT(pair)
10:14:21   6  ,AVG(g6)
10:14:21   7  FROM svm6142
10:14:21   8  GROUP BY pair,trend,gatt
10:14:21   9  ORDER BY pair,trend,gatt
10:14:21  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7387 -.00098495
egb_usd 	-1 up	      2801 .003078171
egb_usd 	-1		24
egb_usd 	 1 nup	      6808 -.00128117
egb_usd 	 1 up	      2768 .002961387
egb_usd 	 1		48

6 rows selected.

Elapsed: 00:00:00.19
10:14:21 SQL> 
10:14:21 SQL> 
10:14:21 SQL> -- Derive NTILE based params:
10:14:21 SQL> 
10:14:21 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.73
10:14:22 SQL> CREATE TABLE svm6162 COMPRESS AS
10:14:22   2  SELECT
10:14:22   3  pair
10:14:22   4  ,ydate
10:14:22   5  ,prdate
10:14:22   6  ,clse
10:14:22   7  ,g6
10:14:22   8  ,gatt
10:14:22   9  ,gattn
10:14:22  10  ,trend
10:14:22  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:14:22  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:14:22  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:14:22  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:14:22  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:14:22  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:14:22  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:14:22  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:14:22  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:14:22  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:14:22  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:14:22  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:14:22  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:14:22  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:14:22  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:14:22  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:14:22  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:14:22  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:14:22  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:14:22  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:14:22  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:14:22  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:14:22  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:14:22  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:14:22  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:14:22  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:14:22  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:14:22  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:14:22  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:14:22  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:14:22  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:14:22  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:14:22  43  ,hh  att32
10:14:22  44  ,d   att33
10:14:22  45  ,w   att34
10:14:22  46  ,mpm att35
10:14:22  47  ,mph att36
10:14:22  48  ,trend att37
10:14:22  49  FROM svm6142
10:14:22  50  ORDER BY ydate
10:14:22  51  /

Table created.

Elapsed: 00:00:05.64
10:14:27 SQL> 
10:14:27 SQL> -- rpt
10:14:27 SQL> 
10:14:27 SQL> SELECT
10:14:27   2  pair
10:14:27   3  ,trend
10:14:27   4  ,gatt
10:14:27   5  ,COUNT(pair)
10:14:27   6  ,AVG(g6)
10:14:27   7  FROM svm6162
10:14:27   8  GROUP BY pair,trend,gatt
10:14:27   9  ORDER BY pair,trend,gatt
10:14:27  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7387 -.00098495
egb_usd 	-1 up	      2801 .003078171
egb_usd 	-1		24
egb_usd 	 1 nup	      6808 -.00128117
egb_usd 	 1 up	      2768 .002961387
egb_usd 	 1		48

6 rows selected.

Elapsed: 00:00:00.03
10:14:27 SQL> 
10:14:27 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.36
10:14:28 SQL> CREATE TABLE modsrc COMPRESS AS
10:14:28   2  SELECT
10:14:28   3  pair
10:14:28   4  ,ydate
10:14:28   5  ,prdate
10:14:28   6  ,trend
10:14:28   7  ,g6
10:14:28   8  ,gatt
10:14:28   9  ,gattn
10:14:28  10  FROM svm6162
10:14:28  11  /

Table created.

Elapsed: 00:00:00.10
10:14:28 SQL> 
10:14:28 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.25
10:14:28 SQL> 
10:14:28 SQL> DROP   TABLE egb_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
10:14:28 SQL> CREATE TABLE egb_ms610 COMPRESS AS
10:14:28   2  SELECT
10:14:28   3  ydate
10:14:28   4  ,trend egb_trend
10:14:28   5  ,g6    egb_g6
10:14:28   6  ,gatt  egb_gatt
10:14:28   7  ,gattn egb_gattn
10:14:28   8  FROM modsrc
10:14:28   9  /

Table created.

Elapsed: 00:00:00.07
10:14:28 SQL> 
10:14:28 SQL> ANALYZE TABLE egb_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
10:14:28 SQL> 
10:14:28 SQL> -- I need a copy of the attributes:
10:14:28 SQL> 
10:14:28 SQL> 
10:14:28 SQL> DROP   TABLE egb_att;

Table dropped.

Elapsed: 00:00:00.08
10:14:28 SQL> CREATE TABLE egb_att COMPRESS AS
10:14:28   2  SELECT
10:14:28   3  ydate
10:14:28   4  ,att00 egb_att00
10:14:28   5  ,att01 egb_att01
10:14:28   6  ,att02 egb_att02
10:14:28   7  ,att03 egb_att03
10:14:28   8  ,att04 egb_att04
10:14:28   9  ,att05 egb_att05
10:14:28  10  ,att06 egb_att06
10:14:28  11  ,att07 egb_att07
10:14:28  12  ,att08 egb_att08
10:14:28  13  ,att09 egb_att09
10:14:28  14  ,att10 egb_att10
10:14:28  15  ,att11 egb_att11
10:14:28  16  ,att12 egb_att12
10:14:28  17  ,att13 egb_att13
10:14:28  18  ,att14 egb_att14
10:14:28  19  ,att15 egb_att15
10:14:28  20  ,att16 egb_att16
10:14:28  21  ,att17 egb_att17
10:14:28  22  ,att18 egb_att18
10:14:28  23  ,att19 egb_att19
10:14:28  24  ,att20 egb_att20
10:14:28  25  ,att21 egb_att21
10:14:28  26  ,att22 egb_att22
10:14:28  27  ,att23 egb_att23
10:14:28  28  ,att24 egb_att24
10:14:28  29  ,att25 egb_att25
10:14:28  30  ,att26 egb_att26
10:14:28  31  ,att27 egb_att27
10:14:28  32  ,att28 egb_att28
10:14:28  33  ,att29 egb_att29
10:14:28  34  ,att30 egb_att30
10:14:28  35  ,att31 egb_att31
10:14:28  36  ,att32 egb_att32
10:14:28  37  ,att33 egb_att33
10:14:28  38  ,att34 egb_att34
10:14:28  39  ,att35 egb_att35
10:14:28  40  ,att36 egb_att36
10:14:28  41  ,att37 egb_att37
10:14:28  42  FROM svm6162
10:14:28  43  /

Table created.

Elapsed: 00:00:00.18
10:14:28 SQL> 
10:14:28 SQL> ANALYZE TABLE egb_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.52
10:14:29 SQL> 
10:14:29 SQL> -- rpt
10:14:29 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19836

Elapsed: 00:00:00.95
10:14:30 SQL> SELECT COUNT(*)FROM egb_att;

  COUNT(*)
----------
     19836

Elapsed: 00:00:00.00
10:14:30 SQL> 
10:14:30 SQL> --
10:14:30 SQL> -- ejp610.sql
10:14:30 SQL> --
10:14:30 SQL> 
10:14:30 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:14:30 SQL> 
10:14:30 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
10:14:30 SQL> 
10:14:30 SQL> -- I created di5min here:
10:14:30 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:14:30 SQL> 
10:14:30 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:14:30   2  SELECT
10:14:30   3  pair
10:14:30   4  ,ydate
10:14:30   5  ,prdate
10:14:30   6  ,rownum rnum -- acts as t in my time-series
10:14:30   7  ,clse
10:14:30   8  -- Derive a bunch of attributes from clse, the latest price:
10:14:30   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:14:30  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:14:30  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:14:30  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:14:30  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:14:30  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:14:30  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:14:30  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:14:30  17  --
10:14:30  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:14:30  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:14:30  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:14:30  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:14:30  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:14:30  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:14:30  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:14:30  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:14:30  26  --
10:14:30  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:14:30  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:14:30  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:14:30  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:14:30  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:14:30  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:14:30  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:14:30  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:14:30  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:14:30  36  FROM di5min WHERE pair LIKE'%ejp%'
10:14:30  37  AND ydate > sysdate - 95
10:14:30  38  ORDER BY ydate
10:14:30  39  /

View created.

Elapsed: 00:00:00.04
10:14:30 SQL> 
10:14:30 SQL> -- rpt
10:14:30 SQL> 
10:14:30 SQL> SELECT
10:14:30   2  pair
10:14:30   3  ,COUNT(pair)
10:14:30   4  ,MIN(clse),MAX(clse)
10:14:30   5  ,MIN(avg6),MAX(avg6)
10:14:30   6  ,MIN(ydate),MAX(ydate)
10:14:30   7  FROM svm6102
10:14:30   8  GROUP BY pair
10:14:30   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ejp_usd       19834 107.643765	115.63485 107.776148 115.509678 2010-09-27 10:15:01 2010-12-31 10:05:00

Elapsed: 00:00:00.85
10:14:31 SQL> 
10:14:31 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:14:31 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.27
10:14:31 SQL> CREATE TABLE svm6122 COMPRESS AS
10:14:31   2  SELECT
10:14:31   3  pair
10:14:31   4  ,ydate
10:14:31   5  ,prdate
10:14:31   6  ,clse
10:14:31   7  -- g6 is important. I want to predict g6:
10:14:31   8  ,ld6 - clse g6
10:14:31   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:14:31  10  -- I want more attributes from the ones I derived above:
10:14:31  11  -- clse relation to moving-min
10:14:31  12  ,clse-min4  cm4
10:14:31  13  ,clse-min6  cm6
10:14:31  14  ,clse-min8  cm8
10:14:31  15  ,clse-min10 cm10
10:14:31  16  ,clse-min12 cm12
10:14:31  17  ,clse-min14 cm14
10:14:31  18  ,clse-min16 cm16
10:14:31  19  ,clse-min18 cm18
10:14:31  20  -- clse relation to moving-avg
10:14:31  21  ,clse-avg4  ca4
10:14:31  22  ,clse-avg6  ca6
10:14:31  23  ,clse-avg8  ca8
10:14:31  24  ,clse-avg10 ca10
10:14:31  25  ,clse-avg12 ca12
10:14:31  26  ,clse-avg14 ca14
10:14:31  27  ,clse-avg16 ca16
10:14:31  28  ,clse-avg18 ca18
10:14:31  29  -- clse relation to moving-max
10:14:31  30  ,clse-max4  cx4
10:14:31  31  ,clse-max6  cx6
10:14:31  32  ,clse-max8  cx8
10:14:31  33  ,clse-max10 cx10
10:14:31  34  ,clse-max12 cx12
10:14:31  35  ,clse-max14 cx14
10:14:31  36  ,clse-max16 cx16
10:14:31  37  ,clse-max18 cx18
10:14:31  38  -- Derive more attributes.
10:14:31  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:14:31  40  -- But COVAR_POP is more stable:
10:14:31  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:14:31  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:14:31  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:14:31  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:14:31  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:14:31  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:14:31  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:14:31  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:14:31  49  -- Derive date related attributes:
10:14:31  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:14:31  51  ,0+TO_CHAR(ydate,'D')d
10:14:31  52  ,0+TO_CHAR(ydate,'W')w
10:14:31  53  -- mpm stands for minutes-past-midnight:
10:14:31  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:14:31  55  -- mph stands for minutes-past-hour:
10:14:31  56  ,0+TO_CHAR(ydate,'MI')mph
10:14:31  57  FROM svm6102
10:14:31  58  ORDER BY ydate
10:14:31  59  /

Table created.

Elapsed: 00:00:02.14
10:14:34 SQL> 
10:14:34 SQL> -- rpt
10:14:34 SQL> 
10:14:34 SQL> SELECT
10:14:34   2  pair
10:14:34   3  ,COUNT(pair)
10:14:34   4  ,MIN(clse),MAX(clse)
10:14:34   5  ,MIN(ydate),MAX(ydate)
10:14:34   6  FROM svm6122
10:14:34   7  GROUP BY pair
10:14:34   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ejp_usd       19834 107.643765	115.63485 2010-09-27 10:15:01 2010-12-31 10:05:00

Elapsed: 00:00:00.03
10:14:34 SQL> 
10:14:34 SQL> -- Prepare for derivation of NTILE based params:
10:14:34 SQL> 
10:14:34 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.04
10:14:34 SQL> CREATE TABLE svm6142 COMPRESS AS
10:14:34   2  SELECT
10:14:34   3  pair
10:14:34   4  ,ydate
10:14:34   5  ,prdate
10:14:34   6  ,clse
10:14:34   7  ,g6
10:14:34   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:14:34   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:14:34  10  ,CASE WHEN trend IS NULL THEN 1
10:14:34  11  	    WHEN trend =0      THEN 1
10:14:34  12  	    ELSE trend END trend
10:14:34  13  ,cm4
10:14:34  14  ,cm6
10:14:34  15  ,cm8
10:14:34  16  ,cm10
10:14:34  17  ,cm12
10:14:34  18  ,cm14
10:14:34  19  ,cm16
10:14:34  20  ,cm18
10:14:34  21  --
10:14:34  22  ,ca4
10:14:34  23  ,ca6
10:14:34  24  ,ca8
10:14:34  25  ,ca10
10:14:34  26  ,ca12
10:14:34  27  ,ca14
10:14:34  28  ,ca16
10:14:34  29  ,ca18
10:14:34  30  --
10:14:34  31  ,cx4
10:14:34  32  ,cx6
10:14:34  33  ,cx8
10:14:34  34  ,cx10
10:14:34  35  ,cx12
10:14:34  36  ,cx14
10:14:34  37  ,cx16
10:14:34  38  ,cx18
10:14:34  39  --
10:14:34  40  ,crr4
10:14:34  41  ,crr6
10:14:34  42  ,crr8
10:14:34  43  ,crr10
10:14:34  44  ,crr12
10:14:34  45  ,crr14
10:14:34  46  ,crr16
10:14:34  47  ,crr18
10:14:34  48  --
10:14:34  49  ,hh
10:14:34  50  ,d
10:14:34  51  ,w
10:14:34  52  ,mpm
10:14:34  53  ,mph
10:14:34  54  FROM svm6122
10:14:34  55  ORDER BY ydate
10:14:34  56  /

Table created.

Elapsed: 00:00:00.37
10:14:34 SQL> 
10:14:34 SQL> -- rpt
10:14:34 SQL> 
10:14:34 SQL> SELECT
10:14:34   2  pair
10:14:34   3  ,trend
10:14:34   4  ,gatt
10:14:34   5  ,COUNT(pair)
10:14:34   6  ,AVG(g6)
10:14:34   7  FROM svm6142
10:14:34   8  GROUP BY pair,trend,gatt
10:14:34   9  ORDER BY pair,trend,gatt
10:14:34  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4897 -.32206433
ejp_usd 	-1 up	      5055 .269095999
ejp_usd 	-1		 1
ejp_usd 	 1 nup	      5064 -.28853045
ejp_usd 	 1 up	      4746 .278876488
ejp_usd 	 1		71

6 rows selected.

Elapsed: 00:00:00.05
10:14:34 SQL> 
10:14:34 SQL> 
10:14:34 SQL> -- Derive NTILE based params:
10:14:34 SQL> 
10:14:34 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.20
10:14:34 SQL> CREATE TABLE svm6162 COMPRESS AS
10:14:34   2  SELECT
10:14:34   3  pair
10:14:34   4  ,ydate
10:14:34   5  ,prdate
10:14:34   6  ,clse
10:14:34   7  ,g6
10:14:34   8  ,gatt
10:14:34   9  ,gattn
10:14:34  10  ,trend
10:14:34  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:14:34  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:14:34  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:14:34  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:14:34  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:14:34  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:14:34  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:14:34  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:14:34  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:14:34  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:14:34  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:14:34  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:14:34  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:14:34  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:14:34  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:14:34  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:14:34  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:14:34  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:14:34  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:14:34  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:14:34  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:14:34  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:14:34  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:14:34  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:14:34  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:14:34  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:14:34  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:14:34  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:14:34  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:14:34  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:14:34  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:14:34  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:14:34  43  ,hh  att32
10:14:34  44  ,d   att33
10:14:34  45  ,w   att34
10:14:34  46  ,mpm att35
10:14:34  47  ,mph att36
10:14:34  48  ,trend att37
10:14:34  49  FROM svm6142
10:14:34  50  ORDER BY ydate
10:14:34  51  /

Table created.

Elapsed: 00:00:05.02
10:14:39 SQL> 
10:14:39 SQL> -- rpt
10:14:39 SQL> 
10:14:39 SQL> SELECT
10:14:39   2  pair
10:14:39   3  ,trend
10:14:39   4  ,gatt
10:14:39   5  ,COUNT(pair)
10:14:39   6  ,AVG(g6)
10:14:39   7  FROM svm6162
10:14:39   8  GROUP BY pair,trend,gatt
10:14:39   9  ORDER BY pair,trend,gatt
10:14:39  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4897 -.32206433
ejp_usd 	-1 up	      5055 .269095999
ejp_usd 	-1		 1
ejp_usd 	 1 nup	      5064 -.28853045
ejp_usd 	 1 up	      4746 .278876488
ejp_usd 	 1		71

6 rows selected.

Elapsed: 00:00:00.03
10:14:39 SQL> 
10:14:39 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.21
10:14:40 SQL> CREATE TABLE modsrc COMPRESS AS
10:14:40   2  SELECT
10:14:40   3  pair
10:14:40   4  ,ydate
10:14:40   5  ,prdate
10:14:40   6  ,trend
10:14:40   7  ,g6
10:14:40   8  ,gatt
10:14:40   9  ,gattn
10:14:40  10  FROM svm6162
10:14:40  11  /

Table created.

Elapsed: 00:00:00.09
10:14:40 SQL> 
10:14:40 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
10:14:40 SQL> 
10:14:40 SQL> DROP   TABLE ejp_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
10:14:40 SQL> CREATE TABLE ejp_ms610 COMPRESS AS
10:14:40   2  SELECT
10:14:40   3  ydate
10:14:40   4  ,trend ejp_trend
10:14:40   5  ,g6    ejp_g6
10:14:40   6  ,gatt  ejp_gatt
10:14:40   7  ,gattn ejp_gattn
10:14:40   8  FROM modsrc
10:14:40   9  /

Table created.

Elapsed: 00:00:00.09
10:14:40 SQL> 
10:14:40 SQL> ANALYZE TABLE ejp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
10:14:40 SQL> 
10:14:40 SQL> -- I need a copy of the attributes:
10:14:40 SQL> 
10:14:40 SQL> 
10:14:40 SQL> DROP   TABLE ejp_att;

Table dropped.

Elapsed: 00:00:00.05
10:14:40 SQL> CREATE TABLE ejp_att COMPRESS AS
10:14:40   2  SELECT
10:14:40   3  ydate
10:14:40   4  ,att00 ejp_att00
10:14:40   5  ,att01 ejp_att01
10:14:40   6  ,att02 ejp_att02
10:14:40   7  ,att03 ejp_att03
10:14:40   8  ,att04 ejp_att04
10:14:40   9  ,att05 ejp_att05
10:14:40  10  ,att06 ejp_att06
10:14:40  11  ,att07 ejp_att07
10:14:40  12  ,att08 ejp_att08
10:14:40  13  ,att09 ejp_att09
10:14:40  14  ,att10 ejp_att10
10:14:40  15  ,att11 ejp_att11
10:14:40  16  ,att12 ejp_att12
10:14:40  17  ,att13 ejp_att13
10:14:40  18  ,att14 ejp_att14
10:14:40  19  ,att15 ejp_att15
10:14:40  20  ,att16 ejp_att16
10:14:40  21  ,att17 ejp_att17
10:14:40  22  ,att18 ejp_att18
10:14:40  23  ,att19 ejp_att19
10:14:40  24  ,att20 ejp_att20
10:14:40  25  ,att21 ejp_att21
10:14:40  26  ,att22 ejp_att22
10:14:40  27  ,att23 ejp_att23
10:14:40  28  ,att24 ejp_att24
10:14:40  29  ,att25 ejp_att25
10:14:40  30  ,att26 ejp_att26
10:14:40  31  ,att27 ejp_att27
10:14:40  32  ,att28 ejp_att28
10:14:40  33  ,att29 ejp_att29
10:14:40  34  ,att30 ejp_att30
10:14:40  35  ,att31 ejp_att31
10:14:40  36  ,att32 ejp_att32
10:14:40  37  ,att33 ejp_att33
10:14:40  38  ,att34 ejp_att34
10:14:40  39  ,att35 ejp_att35
10:14:40  40  ,att36 ejp_att36
10:14:40  41  ,att37 ejp_att37
10:14:40  42  FROM svm6162
10:14:40  43  /

Table created.

Elapsed: 00:00:00.20
10:14:40 SQL> 
10:14:40 SQL> ANALYZE TABLE ejp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
10:14:41 SQL> 
10:14:41 SQL> -- rpt
10:14:41 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19834

Elapsed: 00:00:00.83
10:14:42 SQL> SELECT COUNT(*)FROM ejp_att;

  COUNT(*)
----------
     19834

Elapsed: 00:00:00.00
10:14:42 SQL> 
10:14:42 SQL> --
10:14:42 SQL> -- ajp610.sql
10:14:42 SQL> --
10:14:42 SQL> 
10:14:42 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:14:42 SQL> 
10:14:42 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.37
10:14:42 SQL> 
10:14:42 SQL> -- I created di5min here:
10:14:42 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:14:42 SQL> 
10:14:42 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:14:42   2  SELECT
10:14:42   3  pair
10:14:42   4  ,ydate
10:14:42   5  ,prdate
10:14:42   6  ,rownum rnum -- acts as t in my time-series
10:14:42   7  ,clse
10:14:42   8  -- Derive a bunch of attributes from clse, the latest price:
10:14:42   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:14:42  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:14:42  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:14:42  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:14:42  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:14:42  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:14:42  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:14:42  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:14:42  17  --
10:14:42  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:14:42  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:14:42  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:14:42  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:14:42  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:14:42  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:14:42  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:14:42  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:14:42  26  --
10:14:42  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:14:42  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:14:42  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:14:42  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:14:42  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:14:42  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:14:42  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:14:42  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:14:42  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:14:42  36  FROM di5min WHERE pair LIKE'%ajp%'
10:14:42  37  AND ydate > sysdate - 95
10:14:42  38  ORDER BY ydate
10:14:42  39  /

View created.

Elapsed: 00:00:00.06
10:14:42 SQL> 
10:14:42 SQL> -- rpt
10:14:42 SQL> 
10:14:42 SQL> SELECT
10:14:42   2  pair
10:14:42   3  ,COUNT(pair)
10:14:42   4  ,MIN(clse),MAX(clse)
10:14:42   5  ,MIN(avg6),MAX(avg6)
10:14:42   6  ,MIN(ydate),MAX(ydate)
10:14:42   7  FROM svm6102
10:14:42   8  GROUP BY pair
10:14:42   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ajp_usd       19831  78.249976 83.6669853 78.5106193  83.546306 2010-09-27 10:15:01 2010-12-31 10:05:00

Elapsed: 00:00:00.80
10:14:43 SQL> 
10:14:43 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:14:43 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.27
10:14:43 SQL> CREATE TABLE svm6122 COMPRESS AS
10:14:43   2  SELECT
10:14:43   3  pair
10:14:43   4  ,ydate
10:14:43   5  ,prdate
10:14:43   6  ,clse
10:14:43   7  -- g6 is important. I want to predict g6:
10:14:43   8  ,ld6 - clse g6
10:14:43   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:14:43  10  -- I want more attributes from the ones I derived above:
10:14:43  11  -- clse relation to moving-min
10:14:43  12  ,clse-min4  cm4
10:14:43  13  ,clse-min6  cm6
10:14:43  14  ,clse-min8  cm8
10:14:43  15  ,clse-min10 cm10
10:14:43  16  ,clse-min12 cm12
10:14:43  17  ,clse-min14 cm14
10:14:43  18  ,clse-min16 cm16
10:14:43  19  ,clse-min18 cm18
10:14:43  20  -- clse relation to moving-avg
10:14:43  21  ,clse-avg4  ca4
10:14:43  22  ,clse-avg6  ca6
10:14:43  23  ,clse-avg8  ca8
10:14:43  24  ,clse-avg10 ca10
10:14:43  25  ,clse-avg12 ca12
10:14:43  26  ,clse-avg14 ca14
10:14:43  27  ,clse-avg16 ca16
10:14:43  28  ,clse-avg18 ca18
10:14:43  29  -- clse relation to moving-max
10:14:43  30  ,clse-max4  cx4
10:14:43  31  ,clse-max6  cx6
10:14:43  32  ,clse-max8  cx8
10:14:43  33  ,clse-max10 cx10
10:14:43  34  ,clse-max12 cx12
10:14:43  35  ,clse-max14 cx14
10:14:43  36  ,clse-max16 cx16
10:14:43  37  ,clse-max18 cx18
10:14:43  38  -- Derive more attributes.
10:14:43  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:14:43  40  -- But COVAR_POP is more stable:
10:14:43  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:14:43  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:14:43  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:14:43  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:14:43  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:14:43  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:14:43  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:14:43  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:14:43  49  -- Derive date related attributes:
10:14:43  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:14:43  51  ,0+TO_CHAR(ydate,'D')d
10:14:43  52  ,0+TO_CHAR(ydate,'W')w
10:14:43  53  -- mpm stands for minutes-past-midnight:
10:14:43  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:14:43  55  -- mph stands for minutes-past-hour:
10:14:43  56  ,0+TO_CHAR(ydate,'MI')mph
10:14:43  57  FROM svm6102
10:14:43  58  ORDER BY ydate
10:14:43  59  /

Table created.

Elapsed: 00:00:02.03
10:14:45 SQL> 
10:14:45 SQL> -- rpt
10:14:45 SQL> 
10:14:45 SQL> SELECT
10:14:45   2  pair
10:14:45   3  ,COUNT(pair)
10:14:45   4  ,MIN(clse),MAX(clse)
10:14:45   5  ,MIN(ydate),MAX(ydate)
10:14:45   6  FROM svm6122
10:14:45   7  GROUP BY pair
10:14:45   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ajp_usd       19831  78.249976 83.6669853 2010-09-27 10:15:01 2010-12-31 10:05:00

Elapsed: 00:00:00.04
10:14:45 SQL> 
10:14:45 SQL> -- Prepare for derivation of NTILE based params:
10:14:45 SQL> 
10:14:45 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.18
10:14:45 SQL> CREATE TABLE svm6142 COMPRESS AS
10:14:45   2  SELECT
10:14:45   3  pair
10:14:45   4  ,ydate
10:14:45   5  ,prdate
10:14:45   6  ,clse
10:14:45   7  ,g6
10:14:45   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:14:45   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:14:45  10  ,CASE WHEN trend IS NULL THEN 1
10:14:45  11  	    WHEN trend =0      THEN 1
10:14:45  12  	    ELSE trend END trend
10:14:45  13  ,cm4
10:14:45  14  ,cm6
10:14:45  15  ,cm8
10:14:45  16  ,cm10
10:14:45  17  ,cm12
10:14:45  18  ,cm14
10:14:45  19  ,cm16
10:14:45  20  ,cm18
10:14:45  21  --
10:14:45  22  ,ca4
10:14:45  23  ,ca6
10:14:45  24  ,ca8
10:14:45  25  ,ca10
10:14:45  26  ,ca12
10:14:45  27  ,ca14
10:14:45  28  ,ca16
10:14:45  29  ,ca18
10:14:45  30  --
10:14:45  31  ,cx4
10:14:45  32  ,cx6
10:14:45  33  ,cx8
10:14:45  34  ,cx10
10:14:45  35  ,cx12
10:14:45  36  ,cx14
10:14:45  37  ,cx16
10:14:45  38  ,cx18
10:14:45  39  --
10:14:45  40  ,crr4
10:14:45  41  ,crr6
10:14:45  42  ,crr8
10:14:45  43  ,crr10
10:14:45  44  ,crr12
10:14:45  45  ,crr14
10:14:45  46  ,crr16
10:14:45  47  ,crr18
10:14:45  48  --
10:14:45  49  ,hh
10:14:45  50  ,d
10:14:45  51  ,w
10:14:45  52  ,mpm
10:14:45  53  ,mph
10:14:45  54  FROM svm6122
10:14:45  55  ORDER BY ydate
10:14:45  56  /

Table created.

Elapsed: 00:00:00.39
10:14:46 SQL> 
10:14:46 SQL> -- rpt
10:14:46 SQL> 
10:14:46 SQL> SELECT
10:14:46   2  pair
10:14:46   3  ,trend
10:14:46   4  ,gatt
10:14:46   5  ,COUNT(pair)
10:14:46   6  ,AVG(g6)
10:14:46   7  FROM svm6142
10:14:46   8  GROUP BY pair,trend,gatt
10:14:46   9  ORDER BY pair,trend,gatt
10:14:46  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4180  -.2270351
ajp_usd 	-1 up	      5274 .218411111
ajp_usd 	-1		45
ajp_usd 	 1 nup	      5358 -.19965657
ajp_usd 	 1 up	      4947  .20352136
ajp_usd 	 1		27

6 rows selected.

Elapsed: 00:00:00.04
10:14:46 SQL> 
10:14:46 SQL> 
10:14:46 SQL> -- Derive NTILE based params:
10:14:46 SQL> 
10:14:46 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
10:14:46 SQL> CREATE TABLE svm6162 COMPRESS AS
10:14:46   2  SELECT
10:14:46   3  pair
10:14:46   4  ,ydate
10:14:46   5  ,prdate
10:14:46   6  ,clse
10:14:46   7  ,g6
10:14:46   8  ,gatt
10:14:46   9  ,gattn
10:14:46  10  ,trend
10:14:46  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:14:46  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:14:46  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:14:46  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:14:46  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:14:46  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:14:46  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:14:46  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:14:46  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:14:46  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:14:46  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:14:46  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:14:46  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:14:46  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:14:46  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:14:46  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:14:46  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:14:46  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:14:46  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:14:46  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:14:46  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:14:46  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:14:46  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:14:46  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:14:46  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:14:46  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:14:46  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:14:46  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:14:46  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:14:46  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:14:46  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:14:46  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:14:46  43  ,hh  att32
10:14:46  44  ,d   att33
10:14:46  45  ,w   att34
10:14:46  46  ,mpm att35
10:14:46  47  ,mph att36
10:14:46  48  ,trend att37
10:14:46  49  FROM svm6142
10:14:46  50  ORDER BY ydate
10:14:46  51  /

Table created.

Elapsed: 00:00:05.42
10:14:51 SQL> 
10:14:51 SQL> -- rpt
10:14:51 SQL> 
10:14:51 SQL> SELECT
10:14:51   2  pair
10:14:51   3  ,trend
10:14:51   4  ,gatt
10:14:51   5  ,COUNT(pair)
10:14:51   6  ,AVG(g6)
10:14:51   7  FROM svm6162
10:14:51   8  GROUP BY pair,trend,gatt
10:14:51   9  ORDER BY pair,trend,gatt
10:14:51  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4180  -.2270351
ajp_usd 	-1 up	      5274 .218411111
ajp_usd 	-1		45
ajp_usd 	 1 nup	      5358 -.19965657
ajp_usd 	 1 up	      4947  .20352136
ajp_usd 	 1		27

6 rows selected.

Elapsed: 00:00:00.06
10:14:52 SQL> 
10:14:52 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.20
10:14:52 SQL> CREATE TABLE modsrc COMPRESS AS
10:14:52   2  SELECT
10:14:52   3  pair
10:14:52   4  ,ydate
10:14:52   5  ,prdate
10:14:52   6  ,trend
10:14:52   7  ,g6
10:14:52   8  ,gatt
10:14:52   9  ,gattn
10:14:52  10  FROM svm6162
10:14:52  11  /

Table created.

Elapsed: 00:00:00.10
10:14:52 SQL> 
10:14:52 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
10:14:52 SQL> 
10:14:52 SQL> DROP   TABLE ajp_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
10:14:52 SQL> CREATE TABLE ajp_ms610 COMPRESS AS
10:14:52   2  SELECT
10:14:52   3  ydate
10:14:52   4  ,trend ajp_trend
10:14:52   5  ,g6    ajp_g6
10:14:52   6  ,gatt  ajp_gatt
10:14:52   7  ,gattn ajp_gattn
10:14:52   8  FROM modsrc
10:14:52   9  /

Table created.

Elapsed: 00:00:00.08
10:14:52 SQL> 
10:14:52 SQL> ANALYZE TABLE ajp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
10:14:52 SQL> 
10:14:52 SQL> -- I need a copy of the attributes:
10:14:52 SQL> 
10:14:52 SQL> 
10:14:52 SQL> DROP   TABLE ajp_att;

Table dropped.

Elapsed: 00:00:00.05
10:14:52 SQL> CREATE TABLE ajp_att COMPRESS AS
10:14:52   2  SELECT
10:14:52   3  ydate
10:14:52   4  ,att00 ajp_att00
10:14:52   5  ,att01 ajp_att01
10:14:52   6  ,att02 ajp_att02
10:14:52   7  ,att03 ajp_att03
10:14:52   8  ,att04 ajp_att04
10:14:52   9  ,att05 ajp_att05
10:14:52  10  ,att06 ajp_att06
10:14:52  11  ,att07 ajp_att07
10:14:52  12  ,att08 ajp_att08
10:14:52  13  ,att09 ajp_att09
10:14:52  14  ,att10 ajp_att10
10:14:52  15  ,att11 ajp_att11
10:14:52  16  ,att12 ajp_att12
10:14:52  17  ,att13 ajp_att13
10:14:52  18  ,att14 ajp_att14
10:14:52  19  ,att15 ajp_att15
10:14:52  20  ,att16 ajp_att16
10:14:52  21  ,att17 ajp_att17
10:14:52  22  ,att18 ajp_att18
10:14:52  23  ,att19 ajp_att19
10:14:52  24  ,att20 ajp_att20
10:14:52  25  ,att21 ajp_att21
10:14:52  26  ,att22 ajp_att22
10:14:52  27  ,att23 ajp_att23
10:14:52  28  ,att24 ajp_att24
10:14:52  29  ,att25 ajp_att25
10:14:52  30  ,att26 ajp_att26
10:14:52  31  ,att27 ajp_att27
10:14:52  32  ,att28 ajp_att28
10:14:52  33  ,att29 ajp_att29
10:14:52  34  ,att30 ajp_att30
10:14:52  35  ,att31 ajp_att31
10:14:52  36  ,att32 ajp_att32
10:14:52  37  ,att33 ajp_att33
10:14:52  38  ,att34 ajp_att34
10:14:52  39  ,att35 ajp_att35
10:14:52  40  ,att36 ajp_att36
10:14:52  41  ,att37 ajp_att37
10:14:52  42  FROM svm6162
10:14:52  43  /

Table created.

Elapsed: 00:00:00.22
10:14:53 SQL> 
10:14:53 SQL> ANALYZE TABLE ajp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.49
10:14:53 SQL> 
10:14:53 SQL> -- rpt
10:14:53 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19831

Elapsed: 00:00:00.78
10:14:54 SQL> SELECT COUNT(*)FROM ajp_att;

  COUNT(*)
----------
     19831

Elapsed: 00:00:00.00
10:14:54 SQL> 
10:14:54 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
