
SQL*Plus: Release 11.2.0.1.0 Production on Wed Dec 29 04:03:46 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

04:03:46 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
04:03:46 SQL> 04:03:46 SQL> --
04:03:46 SQL> -- eur610.sql
04:03:46 SQL> --
04:03:46 SQL> 
04:03:46 SQL> -- Creates views and tables for backtesting a forex SVM strategy
04:03:46 SQL> 
04:03:46 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.00
04:03:46 SQL> 
04:03:46 SQL> -- I created di5min here:
04:03:46 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
04:03:46 SQL> 
04:03:46 SQL> CREATE OR REPLACE VIEW svm6102 AS
04:03:46   2  SELECT
04:03:46   3  pair
04:03:46   4  ,ydate
04:03:46   5  ,prdate
04:03:46   6  ,rownum rnum -- acts as t in my time-series
04:03:46   7  ,clse
04:03:46   8  -- Derive a bunch of attributes from clse, the latest price:
04:03:46   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
04:03:46  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
04:03:46  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
04:03:46  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
04:03:46  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
04:03:46  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
04:03:46  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
04:03:46  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
04:03:46  17  --
04:03:46  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
04:03:46  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
04:03:46  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
04:03:46  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
04:03:46  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
04:03:46  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
04:03:46  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
04:03:46  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
04:03:46  26  --
04:03:46  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
04:03:46  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
04:03:46  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
04:03:46  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
04:03:46  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
04:03:46  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
04:03:46  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
04:03:46  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
04:03:46  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
04:03:46  36  FROM di5min WHERE pair LIKE'%eur%'
04:03:46  37  AND ydate > sysdate - 95
04:03:46  38  ORDER BY ydate
04:03:46  39  /

View created.

Elapsed: 00:00:00.08
04:03:46 SQL> 
04:03:46 SQL> -- rpt
04:03:46 SQL> 
04:03:46 SQL> SELECT
04:03:46   2  pair
04:03:46   3  ,COUNT(pair)
04:03:46   4  ,MIN(clse),MAX(clse)
04:03:46   5  ,MIN(avg6),MAX(avg6)
04:03:46   6  ,MIN(ydate),MAX(ydate)
04:03:46   7  FROM svm6102
04:03:46   8  GROUP BY pair
04:03:46   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19356    1.29735	   1.4273 1.29875103 1.42436233 2010-09-26 20:55:01 2010-12-29 04:00:00

Elapsed: 00:00:00.89
04:03:47 SQL> 
04:03:47 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
04:03:47 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.12
04:03:47 SQL> CREATE TABLE svm6122 COMPRESS AS
04:03:47   2  SELECT
04:03:47   3  pair
04:03:47   4  ,ydate
04:03:47   5  ,prdate
04:03:47   6  ,clse
04:03:47   7  -- g6 is important. I want to predict g6:
04:03:47   8  ,ld6 - clse g6
04:03:47   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
04:03:47  10  -- I want more attributes from the ones I derived above:
04:03:47  11  -- clse relation to moving-min
04:03:47  12  ,clse-min4  cm4
04:03:47  13  ,clse-min6  cm6
04:03:47  14  ,clse-min8  cm8
04:03:47  15  ,clse-min10 cm10
04:03:47  16  ,clse-min12 cm12
04:03:47  17  ,clse-min14 cm14
04:03:47  18  ,clse-min16 cm16
04:03:47  19  ,clse-min18 cm18
04:03:47  20  -- clse relation to moving-avg
04:03:47  21  ,clse-avg4  ca4
04:03:47  22  ,clse-avg6  ca6
04:03:47  23  ,clse-avg8  ca8
04:03:47  24  ,clse-avg10 ca10
04:03:47  25  ,clse-avg12 ca12
04:03:47  26  ,clse-avg14 ca14
04:03:47  27  ,clse-avg16 ca16
04:03:47  28  ,clse-avg18 ca18
04:03:47  29  -- clse relation to moving-max
04:03:47  30  ,clse-max4  cx4
04:03:47  31  ,clse-max6  cx6
04:03:47  32  ,clse-max8  cx8
04:03:47  33  ,clse-max10 cx10
04:03:47  34  ,clse-max12 cx12
04:03:47  35  ,clse-max14 cx14
04:03:47  36  ,clse-max16 cx16
04:03:47  37  ,clse-max18 cx18
04:03:47  38  -- Derive more attributes.
04:03:47  39  -- I want to use CORR() here to help SVM see the shape of the series.
04:03:47  40  -- But COVAR_POP is more stable:
04:03:47  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
04:03:47  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
04:03:47  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
04:03:47  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
04:03:47  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
04:03:47  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
04:03:47  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
04:03:47  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
04:03:47  49  -- Derive date related attributes:
04:03:47  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
04:03:47  51  ,0+TO_CHAR(ydate,'D')d
04:03:47  52  ,0+TO_CHAR(ydate,'W')w
04:03:47  53  -- mpm stands for minutes-past-midnight:
04:03:47  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
04:03:47  55  -- mph stands for minutes-past-hour:
04:03:47  56  ,0+TO_CHAR(ydate,'MI')mph
04:03:47  57  FROM svm6102
04:03:47  58  ORDER BY ydate
04:03:47  59  /

Table created.

Elapsed: 00:00:02.56
04:03:50 SQL> 
04:03:50 SQL> -- rpt
04:03:50 SQL> 
04:03:50 SQL> SELECT
04:03:50   2  pair
04:03:50   3  ,COUNT(pair)
04:03:50   4  ,MIN(clse),MAX(clse)
04:03:50   5  ,MIN(ydate),MAX(ydate)
04:03:50   6  FROM svm6122
04:03:50   7  GROUP BY pair
04:03:50   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19356    1.29735	   1.4273 2010-09-26 20:55:01 2010-12-29 04:00:00

Elapsed: 00:00:00.51
04:03:50 SQL> 
04:03:50 SQL> -- Prepare for derivation of NTILE based params:
04:03:50 SQL> 
04:03:50 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.58
04:03:51 SQL> CREATE TABLE svm6142 COMPRESS AS
04:03:51   2  SELECT
04:03:51   3  pair
04:03:51   4  ,ydate
04:03:51   5  ,prdate
04:03:51   6  ,clse
04:03:51   7  ,g6
04:03:51   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
04:03:51   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
04:03:51  10  ,CASE WHEN trend IS NULL THEN 1
04:03:51  11  	    WHEN trend =0      THEN 1
04:03:51  12  	    ELSE trend END trend
04:03:51  13  ,cm4
04:03:51  14  ,cm6
04:03:51  15  ,cm8
04:03:51  16  ,cm10
04:03:51  17  ,cm12
04:03:51  18  ,cm14
04:03:51  19  ,cm16
04:03:51  20  ,cm18
04:03:51  21  --
04:03:51  22  ,ca4
04:03:51  23  ,ca6
04:03:51  24  ,ca8
04:03:51  25  ,ca10
04:03:51  26  ,ca12
04:03:51  27  ,ca14
04:03:51  28  ,ca16
04:03:51  29  ,ca18
04:03:51  30  --
04:03:51  31  ,cx4
04:03:51  32  ,cx6
04:03:51  33  ,cx8
04:03:51  34  ,cx10
04:03:51  35  ,cx12
04:03:51  36  ,cx14
04:03:51  37  ,cx16
04:03:51  38  ,cx18
04:03:51  39  --
04:03:51  40  ,crr4
04:03:51  41  ,crr6
04:03:51  42  ,crr8
04:03:51  43  ,crr10
04:03:51  44  ,crr12
04:03:51  45  ,crr14
04:03:51  46  ,crr16
04:03:51  47  ,crr18
04:03:51  48  --
04:03:51  49  ,hh
04:03:51  50  ,d
04:03:51  51  ,w
04:03:51  52  ,mpm
04:03:51  53  ,mph
04:03:51  54  FROM svm6122
04:03:51  55  ORDER BY ydate
04:03:51  56  /

Table created.

Elapsed: 00:00:00.36
04:03:51 SQL> 
04:03:51 SQL> -- rpt
04:03:51 SQL> 
04:03:51 SQL> SELECT
04:03:51   2  pair
04:03:51   3  ,trend
04:03:51   4  ,gatt
04:03:51   5  ,COUNT(pair)
04:03:51   6  ,AVG(g6)
04:03:51   7  FROM svm6142
04:03:51   8  GROUP BY pair,trend,gatt
04:03:51   9  ORDER BY pair,trend,gatt
04:03:51  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6130 -.00308152
eur_usd 	-1 up	      3638  .00447891
eur_usd 	-1		39
eur_usd 	 1 nup	      5871 -.00319026
eur_usd 	 1 up	      3645 .005140343
eur_usd 	 1		33

6 rows selected.

Elapsed: 00:00:00.30
04:03:52 SQL> 
04:03:52 SQL> 
04:03:52 SQL> -- Derive NTILE based params:
04:03:52 SQL> 
04:03:52 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.82
04:03:52 SQL> CREATE TABLE svm6162 COMPRESS AS
04:03:52   2  SELECT
04:03:52   3  pair
04:03:52   4  ,ydate
04:03:52   5  ,prdate
04:03:52   6  ,clse
04:03:52   7  ,g6
04:03:52   8  ,gatt
04:03:52   9  ,gattn
04:03:52  10  ,trend
04:03:52  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
04:03:52  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
04:03:52  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
04:03:52  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
04:03:52  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
04:03:52  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
04:03:52  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
04:03:52  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
04:03:52  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
04:03:52  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
04:03:52  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
04:03:52  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
04:03:52  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
04:03:52  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
04:03:52  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
04:03:52  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
04:03:52  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
04:03:52  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
04:03:52  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
04:03:52  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
04:03:52  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
04:03:52  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
04:03:52  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
04:03:52  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
04:03:52  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
04:03:52  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
04:03:52  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
04:03:52  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
04:03:52  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
04:03:52  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
04:03:52  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
04:03:52  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
04:03:52  43  ,hh  att32
04:03:52  44  ,d   att33
04:03:52  45  ,w   att34
04:03:52  46  ,mpm att35
04:03:52  47  ,mph att36
04:03:52  48  ,trend att37
04:03:52  49  FROM svm6142
04:03:52  50  ORDER BY ydate
04:03:52  51  /

Table created.

Elapsed: 00:00:04.62
04:03:57 SQL> 
04:03:57 SQL> -- rpt
04:03:57 SQL> 
04:03:57 SQL> SELECT
04:03:57   2  pair
04:03:57   3  ,trend
04:03:57   4  ,gatt
04:03:57   5  ,COUNT(pair)
04:03:57   6  ,AVG(g6)
04:03:57   7  FROM svm6162
04:03:57   8  GROUP BY pair,trend,gatt
04:03:57   9  ORDER BY pair,trend,gatt
04:03:57  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6130 -.00308152
eur_usd 	-1 up	      3638  .00447891
eur_usd 	-1		39
eur_usd 	 1 nup	      5871 -.00319026
eur_usd 	 1 up	      3645 .005140343
eur_usd 	 1		33

6 rows selected.

Elapsed: 00:00:00.04
04:03:57 SQL> 
04:03:57 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.49
04:03:57 SQL> CREATE TABLE modsrc COMPRESS AS
04:03:57   2  SELECT
04:03:57   3  pair
04:03:57   4  ,ydate
04:03:57   5  ,prdate
04:03:57   6  ,trend
04:03:57   7  ,g6
04:03:57   8  ,gatt
04:03:57   9  ,gattn
04:03:57  10  FROM svm6162
04:03:57  11  /

Table created.

Elapsed: 00:00:00.09
04:03:58 SQL> 
04:03:58 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
04:03:58 SQL> 
04:03:58 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.19
04:03:58 SQL> CREATE TABLE eur_ms610 COMPRESS AS
04:03:58   2  SELECT
04:03:58   3  ydate
04:03:58   4  ,trend eur_trend
04:03:58   5  ,g6    eur_g6
04:03:58   6  ,gatt  eur_gatt
04:03:58   7  ,gattn eur_gattn
04:03:58   8  FROM modsrc
04:03:58   9  /

Table created.

Elapsed: 00:00:00.07
04:03:58 SQL> 
04:03:58 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
04:03:58 SQL> 
04:03:58 SQL> -- I need a copy of the attributes:
04:03:58 SQL> 
04:03:58 SQL> 
04:03:58 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.04
04:03:58 SQL> CREATE TABLE eur_att COMPRESS AS
04:03:58   2  SELECT
04:03:58   3  ydate
04:03:58   4  ,att00 eur_att00
04:03:58   5  ,att01 eur_att01
04:03:58   6  ,att02 eur_att02
04:03:58   7  ,att03 eur_att03
04:03:58   8  ,att04 eur_att04
04:03:58   9  ,att05 eur_att05
04:03:58  10  ,att06 eur_att06
04:03:58  11  ,att07 eur_att07
04:03:58  12  ,att08 eur_att08
04:03:58  13  ,att09 eur_att09
04:03:58  14  ,att10 eur_att10
04:03:58  15  ,att11 eur_att11
04:03:58  16  ,att12 eur_att12
04:03:58  17  ,att13 eur_att13
04:03:58  18  ,att14 eur_att14
04:03:58  19  ,att15 eur_att15
04:03:58  20  ,att16 eur_att16
04:03:58  21  ,att17 eur_att17
04:03:58  22  ,att18 eur_att18
04:03:58  23  ,att19 eur_att19
04:03:58  24  ,att20 eur_att20
04:03:58  25  ,att21 eur_att21
04:03:58  26  ,att22 eur_att22
04:03:58  27  ,att23 eur_att23
04:03:58  28  ,att24 eur_att24
04:03:58  29  ,att25 eur_att25
04:03:58  30  ,att26 eur_att26
04:03:58  31  ,att27 eur_att27
04:03:58  32  ,att28 eur_att28
04:03:58  33  ,att29 eur_att29
04:03:58  34  ,att30 eur_att30
04:03:58  35  ,att31 eur_att31
04:03:58  36  ,att32 eur_att32
04:03:58  37  ,att33 eur_att33
04:03:58  38  ,att34 eur_att34
04:03:58  39  ,att35 eur_att35
04:03:58  40  ,att36 eur_att36
04:03:58  41  ,att37 eur_att37
04:03:58  42  FROM svm6162
04:03:58  43  /

Table created.

Elapsed: 00:00:00.18
04:03:58 SQL> 
04:03:58 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
04:03:59 SQL> 
04:03:59 SQL> -- rpt
04:03:59 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19356

Elapsed: 00:00:00.85
04:04:00 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19356

Elapsed: 00:00:00.00
04:04:00 SQL> 
04:04:00 SQL> --
04:04:00 SQL> -- aud610.sql
04:04:00 SQL> --
04:04:00 SQL> 
04:04:00 SQL> -- Creates views and tables for backtesting a forex SVM strategy
04:04:00 SQL> 
04:04:00 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.64
04:04:00 SQL> 
04:04:00 SQL> -- I created di5min here:
04:04:00 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
04:04:00 SQL> 
04:04:00 SQL> CREATE OR REPLACE VIEW svm6102 AS
04:04:00   2  SELECT
04:04:00   3  pair
04:04:00   4  ,ydate
04:04:00   5  ,prdate
04:04:00   6  ,rownum rnum -- acts as t in my time-series
04:04:00   7  ,clse
04:04:00   8  -- Derive a bunch of attributes from clse, the latest price:
04:04:00   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
04:04:00  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
04:04:00  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
04:04:00  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
04:04:00  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
04:04:00  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
04:04:00  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
04:04:00  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
04:04:00  17  --
04:04:00  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
04:04:00  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
04:04:00  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
04:04:00  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
04:04:00  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
04:04:00  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
04:04:00  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
04:04:00  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
04:04:00  26  --
04:04:00  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
04:04:00  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
04:04:00  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
04:04:00  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
04:04:00  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
04:04:00  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
04:04:00  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
04:04:00  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
04:04:00  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
04:04:00  36  FROM di5min WHERE pair LIKE'%aud%'
04:04:00  37  AND ydate > sysdate - 95
04:04:00  38  ORDER BY ydate
04:04:00  39  /

View created.

Elapsed: 00:00:00.05
04:04:00 SQL> 
04:04:00 SQL> -- rpt
04:04:00 SQL> 
04:04:00 SQL> SELECT
04:04:00   2  pair
04:04:00   3  ,COUNT(pair)
04:04:00   4  ,MIN(clse),MAX(clse)
04:04:00   5  ,MIN(avg6),MAX(avg6)
04:04:00   6  ,MIN(ydate),MAX(ydate)
04:04:00   7  FROM svm6102
04:04:00   8  GROUP BY pair
04:04:00   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19353	.95405	   1.0181 .957141438 1.01556438 2010-09-26 20:55:01 2010-12-29 04:00:00

Elapsed: 00:00:00.85
04:04:01 SQL> 
04:04:01 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
04:04:01 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.96
04:04:02 SQL> CREATE TABLE svm6122 COMPRESS AS
04:04:02   2  SELECT
04:04:02   3  pair
04:04:02   4  ,ydate
04:04:02   5  ,prdate
04:04:02   6  ,clse
04:04:02   7  -- g6 is important. I want to predict g6:
04:04:02   8  ,ld6 - clse g6
04:04:02   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
04:04:02  10  -- I want more attributes from the ones I derived above:
04:04:02  11  -- clse relation to moving-min
04:04:02  12  ,clse-min4  cm4
04:04:02  13  ,clse-min6  cm6
04:04:02  14  ,clse-min8  cm8
04:04:02  15  ,clse-min10 cm10
04:04:02  16  ,clse-min12 cm12
04:04:02  17  ,clse-min14 cm14
04:04:02  18  ,clse-min16 cm16
04:04:02  19  ,clse-min18 cm18
04:04:02  20  -- clse relation to moving-avg
04:04:02  21  ,clse-avg4  ca4
04:04:02  22  ,clse-avg6  ca6
04:04:02  23  ,clse-avg8  ca8
04:04:02  24  ,clse-avg10 ca10
04:04:02  25  ,clse-avg12 ca12
04:04:02  26  ,clse-avg14 ca14
04:04:02  27  ,clse-avg16 ca16
04:04:02  28  ,clse-avg18 ca18
04:04:02  29  -- clse relation to moving-max
04:04:02  30  ,clse-max4  cx4
04:04:02  31  ,clse-max6  cx6
04:04:02  32  ,clse-max8  cx8
04:04:02  33  ,clse-max10 cx10
04:04:02  34  ,clse-max12 cx12
04:04:02  35  ,clse-max14 cx14
04:04:02  36  ,clse-max16 cx16
04:04:02  37  ,clse-max18 cx18
04:04:02  38  -- Derive more attributes.
04:04:02  39  -- I want to use CORR() here to help SVM see the shape of the series.
04:04:02  40  -- But COVAR_POP is more stable:
04:04:02  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
04:04:02  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
04:04:02  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
04:04:02  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
04:04:02  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
04:04:02  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
04:04:02  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
04:04:02  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
04:04:02  49  -- Derive date related attributes:
04:04:02  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
04:04:02  51  ,0+TO_CHAR(ydate,'D')d
04:04:02  52  ,0+TO_CHAR(ydate,'W')w
04:04:02  53  -- mpm stands for minutes-past-midnight:
04:04:02  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
04:04:02  55  -- mph stands for minutes-past-hour:
04:04:02  56  ,0+TO_CHAR(ydate,'MI')mph
04:04:02  57  FROM svm6102
04:04:02  58  ORDER BY ydate
04:04:02  59  /

Table created.

Elapsed: 00:00:02.13
04:04:04 SQL> 
04:04:04 SQL> -- rpt
04:04:04 SQL> 
04:04:04 SQL> SELECT
04:04:04   2  pair
04:04:04   3  ,COUNT(pair)
04:04:04   4  ,MIN(clse),MAX(clse)
04:04:04   5  ,MIN(ydate),MAX(ydate)
04:04:04   6  FROM svm6122
04:04:04   7  GROUP BY pair
04:04:04   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19353	.95405	   1.0181 2010-09-26 20:55:01 2010-12-29 04:00:00

Elapsed: 00:00:00.17
04:04:05 SQL> 
04:04:05 SQL> -- Prepare for derivation of NTILE based params:
04:04:05 SQL> 
04:04:05 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.27
04:04:05 SQL> CREATE TABLE svm6142 COMPRESS AS
04:04:05   2  SELECT
04:04:05   3  pair
04:04:05   4  ,ydate
04:04:05   5  ,prdate
04:04:05   6  ,clse
04:04:05   7  ,g6
04:04:05   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
04:04:05   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
04:04:05  10  ,CASE WHEN trend IS NULL THEN 1
04:04:05  11  	    WHEN trend =0      THEN 1
04:04:05  12  	    ELSE trend END trend
04:04:05  13  ,cm4
04:04:05  14  ,cm6
04:04:05  15  ,cm8
04:04:05  16  ,cm10
04:04:05  17  ,cm12
04:04:05  18  ,cm14
04:04:05  19  ,cm16
04:04:05  20  ,cm18
04:04:05  21  --
04:04:05  22  ,ca4
04:04:05  23  ,ca6
04:04:05  24  ,ca8
04:04:05  25  ,ca10
04:04:05  26  ,ca12
04:04:05  27  ,ca14
04:04:05  28  ,ca16
04:04:05  29  ,ca18
04:04:05  30  --
04:04:05  31  ,cx4
04:04:05  32  ,cx6
04:04:05  33  ,cx8
04:04:05  34  ,cx10
04:04:05  35  ,cx12
04:04:05  36  ,cx14
04:04:05  37  ,cx16
04:04:05  38  ,cx18
04:04:05  39  --
04:04:05  40  ,crr4
04:04:05  41  ,crr6
04:04:05  42  ,crr8
04:04:05  43  ,crr10
04:04:05  44  ,crr12
04:04:05  45  ,crr14
04:04:05  46  ,crr16
04:04:05  47  ,crr18
04:04:05  48  --
04:04:05  49  ,hh
04:04:05  50  ,d
04:04:05  51  ,w
04:04:05  52  ,mpm
04:04:05  53  ,mph
04:04:05  54  FROM svm6122
04:04:05  55  ORDER BY ydate
04:04:05  56  /

Table created.

Elapsed: 00:00:00.36
04:04:05 SQL> 
04:04:05 SQL> -- rpt
04:04:05 SQL> 
04:04:05 SQL> SELECT
04:04:05   2  pair
04:04:05   3  ,trend
04:04:05   4  ,gatt
04:04:05   5  ,COUNT(pair)
04:04:05   6  ,AVG(g6)
04:04:05   7  FROM svm6142
04:04:05   8  GROUP BY pair,trend,gatt
04:04:05   9  ORDER BY pair,trend,gatt
04:04:05  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5178 -.00213377
aud_usd 	-1 up	      3777 .003738341
aud_usd 	-1		48
aud_usd 	 1 nup	      6679 -.00213644
aud_usd 	 1 up	      3647 .004062925
aud_usd 	 1		24

6 rows selected.

Elapsed: 00:00:00.19
04:04:05 SQL> 
04:04:05 SQL> 
04:04:05 SQL> -- Derive NTILE based params:
04:04:05 SQL> 
04:04:05 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.14
04:04:06 SQL> CREATE TABLE svm6162 COMPRESS AS
04:04:06   2  SELECT
04:04:06   3  pair
04:04:06   4  ,ydate
04:04:06   5  ,prdate
04:04:06   6  ,clse
04:04:06   7  ,g6
04:04:06   8  ,gatt
04:04:06   9  ,gattn
04:04:06  10  ,trend
04:04:06  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
04:04:06  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
04:04:06  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
04:04:06  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
04:04:06  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
04:04:06  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
04:04:06  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
04:04:06  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
04:04:06  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
04:04:06  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
04:04:06  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
04:04:06  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
04:04:06  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
04:04:06  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
04:04:06  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
04:04:06  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
04:04:06  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
04:04:06  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
04:04:06  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
04:04:06  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
04:04:06  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
04:04:06  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
04:04:06  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
04:04:06  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
04:04:06  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
04:04:06  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
04:04:06  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
04:04:06  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
04:04:06  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
04:04:06  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
04:04:06  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
04:04:06  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
04:04:06  43  ,hh  att32
04:04:06  44  ,d   att33
04:04:06  45  ,w   att34
04:04:06  46  ,mpm att35
04:04:06  47  ,mph att36
04:04:06  48  ,trend att37
04:04:06  49  FROM svm6142
04:04:06  50  ORDER BY ydate
04:04:06  51  /

Table created.

Elapsed: 00:00:04.70
04:04:10 SQL> 
04:04:10 SQL> -- rpt
04:04:10 SQL> 
04:04:10 SQL> SELECT
04:04:10   2  pair
04:04:10   3  ,trend
04:04:10   4  ,gatt
04:04:10   5  ,COUNT(pair)
04:04:10   6  ,AVG(g6)
04:04:10   7  FROM svm6162
04:04:10   8  GROUP BY pair,trend,gatt
04:04:10   9  ORDER BY pair,trend,gatt
04:04:10  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5178 -.00213377
aud_usd 	-1 up	      3777 .003738341
aud_usd 	-1		48
aud_usd 	 1 nup	      6679 -.00213644
aud_usd 	 1 up	      3647 .004062925
aud_usd 	 1		24

6 rows selected.

Elapsed: 00:00:00.06
04:04:10 SQL> 
04:04:10 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
04:04:10 SQL> CREATE TABLE modsrc COMPRESS AS
04:04:10   2  SELECT
04:04:10   3  pair
04:04:10   4  ,ydate
04:04:10   5  ,prdate
04:04:10   6  ,trend
04:04:10   7  ,g6
04:04:10   8  ,gatt
04:04:10   9  ,gattn
04:04:10  10  FROM svm6162
04:04:10  11  /

Table created.

Elapsed: 00:00:00.08
04:04:11 SQL> 
04:04:11 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
04:04:11 SQL> 
04:04:11 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
04:04:11 SQL> CREATE TABLE aud_ms610 COMPRESS AS
04:04:11   2  SELECT
04:04:11   3  ydate
04:04:11   4  ,trend aud_trend
04:04:11   5  ,g6    aud_g6
04:04:11   6  ,gatt  aud_gatt
04:04:11   7  ,gattn aud_gattn
04:04:11   8  FROM modsrc
04:04:11   9  /

Table created.

Elapsed: 00:00:00.07
04:04:11 SQL> 
04:04:11 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
04:04:11 SQL> 
04:04:11 SQL> -- I need a copy of the attributes:
04:04:11 SQL> 
04:04:11 SQL> 
04:04:11 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.05
04:04:11 SQL> CREATE TABLE aud_att COMPRESS AS
04:04:11   2  SELECT
04:04:11   3  ydate
04:04:11   4  ,att00 aud_att00
04:04:11   5  ,att01 aud_att01
04:04:11   6  ,att02 aud_att02
04:04:11   7  ,att03 aud_att03
04:04:11   8  ,att04 aud_att04
04:04:11   9  ,att05 aud_att05
04:04:11  10  ,att06 aud_att06
04:04:11  11  ,att07 aud_att07
04:04:11  12  ,att08 aud_att08
04:04:11  13  ,att09 aud_att09
04:04:11  14  ,att10 aud_att10
04:04:11  15  ,att11 aud_att11
04:04:11  16  ,att12 aud_att12
04:04:11  17  ,att13 aud_att13
04:04:11  18  ,att14 aud_att14
04:04:11  19  ,att15 aud_att15
04:04:11  20  ,att16 aud_att16
04:04:11  21  ,att17 aud_att17
04:04:11  22  ,att18 aud_att18
04:04:11  23  ,att19 aud_att19
04:04:11  24  ,att20 aud_att20
04:04:11  25  ,att21 aud_att21
04:04:11  26  ,att22 aud_att22
04:04:11  27  ,att23 aud_att23
04:04:11  28  ,att24 aud_att24
04:04:11  29  ,att25 aud_att25
04:04:11  30  ,att26 aud_att26
04:04:11  31  ,att27 aud_att27
04:04:11  32  ,att28 aud_att28
04:04:11  33  ,att29 aud_att29
04:04:11  34  ,att30 aud_att30
04:04:11  35  ,att31 aud_att31
04:04:11  36  ,att32 aud_att32
04:04:11  37  ,att33 aud_att33
04:04:11  38  ,att34 aud_att34
04:04:11  39  ,att35 aud_att35
04:04:11  40  ,att36 aud_att36
04:04:11  41  ,att37 aud_att37
04:04:11  42  FROM svm6162
04:04:11  43  /

Table created.

Elapsed: 00:00:00.27
04:04:11 SQL> 
04:04:11 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.53
04:04:12 SQL> 
04:04:12 SQL> -- rpt
04:04:12 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19353

Elapsed: 00:00:00.84
04:04:13 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19353

Elapsed: 00:00:00.00
04:04:13 SQL> 
04:04:13 SQL> --
04:04:13 SQL> -- gbp610.sql
04:04:13 SQL> --
04:04:13 SQL> 
04:04:13 SQL> -- Creates views and tables for backtesting a forex SVM strategy
04:04:13 SQL> 
04:04:13 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.60
04:04:13 SQL> 
04:04:13 SQL> -- I created di5min here:
04:04:13 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
04:04:13 SQL> 
04:04:13 SQL> CREATE OR REPLACE VIEW svm6102 AS
04:04:13   2  SELECT
04:04:13   3  pair
04:04:13   4  ,ydate
04:04:13   5  ,prdate
04:04:13   6  ,rownum rnum -- acts as t in my time-series
04:04:13   7  ,clse
04:04:13   8  -- Derive a bunch of attributes from clse, the latest price:
04:04:13   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
04:04:13  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
04:04:13  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
04:04:13  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
04:04:13  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
04:04:13  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
04:04:13  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
04:04:13  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
04:04:13  17  --
04:04:13  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
04:04:13  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
04:04:13  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
04:04:13  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
04:04:13  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
04:04:13  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
04:04:13  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
04:04:13  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
04:04:13  26  --
04:04:13  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
04:04:13  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
04:04:13  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
04:04:13  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
04:04:13  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
04:04:13  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
04:04:13  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
04:04:13  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
04:04:13  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
04:04:13  36  FROM di5min WHERE pair LIKE'%gbp%'
04:04:13  37  AND ydate > sysdate - 95
04:04:13  38  ORDER BY ydate
04:04:13  39  /

View created.

Elapsed: 00:00:00.08
04:04:13 SQL> 
04:04:13 SQL> -- rpt
04:04:13 SQL> 
04:04:13 SQL> SELECT
04:04:13   2  pair
04:04:13   3  ,COUNT(pair)
04:04:13   4  ,MIN(clse),MAX(clse)
04:04:13   5  ,MIN(avg6),MAX(avg6)
04:04:13   6  ,MIN(ydate),MAX(ydate)
04:04:13   7  FROM svm6102
04:04:13   8  GROUP BY pair
04:04:13   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19355   1.535325	   1.6295 1.53696747 1.62716986 2010-09-26 20:55:01 2010-12-29 04:00:00

Elapsed: 00:00:00.83
04:04:14 SQL> 
04:04:14 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
04:04:14 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.18
04:04:14 SQL> CREATE TABLE svm6122 COMPRESS AS
04:04:14   2  SELECT
04:04:14   3  pair
04:04:14   4  ,ydate
04:04:14   5  ,prdate
04:04:14   6  ,clse
04:04:14   7  -- g6 is important. I want to predict g6:
04:04:14   8  ,ld6 - clse g6
04:04:14   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
04:04:14  10  -- I want more attributes from the ones I derived above:
04:04:14  11  -- clse relation to moving-min
04:04:14  12  ,clse-min4  cm4
04:04:14  13  ,clse-min6  cm6
04:04:14  14  ,clse-min8  cm8
04:04:14  15  ,clse-min10 cm10
04:04:14  16  ,clse-min12 cm12
04:04:14  17  ,clse-min14 cm14
04:04:14  18  ,clse-min16 cm16
04:04:14  19  ,clse-min18 cm18
04:04:14  20  -- clse relation to moving-avg
04:04:14  21  ,clse-avg4  ca4
04:04:14  22  ,clse-avg6  ca6
04:04:14  23  ,clse-avg8  ca8
04:04:14  24  ,clse-avg10 ca10
04:04:14  25  ,clse-avg12 ca12
04:04:14  26  ,clse-avg14 ca14
04:04:14  27  ,clse-avg16 ca16
04:04:14  28  ,clse-avg18 ca18
04:04:14  29  -- clse relation to moving-max
04:04:14  30  ,clse-max4  cx4
04:04:14  31  ,clse-max6  cx6
04:04:14  32  ,clse-max8  cx8
04:04:14  33  ,clse-max10 cx10
04:04:14  34  ,clse-max12 cx12
04:04:14  35  ,clse-max14 cx14
04:04:14  36  ,clse-max16 cx16
04:04:14  37  ,clse-max18 cx18
04:04:14  38  -- Derive more attributes.
04:04:14  39  -- I want to use CORR() here to help SVM see the shape of the series.
04:04:14  40  -- But COVAR_POP is more stable:
04:04:14  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
04:04:14  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
04:04:14  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
04:04:14  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
04:04:14  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
04:04:14  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
04:04:14  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
04:04:14  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
04:04:14  49  -- Derive date related attributes:
04:04:14  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
04:04:14  51  ,0+TO_CHAR(ydate,'D')d
04:04:14  52  ,0+TO_CHAR(ydate,'W')w
04:04:14  53  -- mpm stands for minutes-past-midnight:
04:04:14  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
04:04:14  55  -- mph stands for minutes-past-hour:
04:04:14  56  ,0+TO_CHAR(ydate,'MI')mph
04:04:14  57  FROM svm6102
04:04:14  58  ORDER BY ydate
04:04:14  59  /

Table created.

Elapsed: 00:00:02.04
04:04:17 SQL> 
04:04:17 SQL> -- rpt
04:04:17 SQL> 
04:04:17 SQL> SELECT
04:04:17   2  pair
04:04:17   3  ,COUNT(pair)
04:04:17   4  ,MIN(clse),MAX(clse)
04:04:17   5  ,MIN(ydate),MAX(ydate)
04:04:17   6  FROM svm6122
04:04:17   7  GROUP BY pair
04:04:17   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19355   1.535325	   1.6295 2010-09-26 20:55:01 2010-12-29 04:00:00

Elapsed: 00:00:00.17
04:04:17 SQL> 
04:04:17 SQL> -- Prepare for derivation of NTILE based params:
04:04:17 SQL> 
04:04:17 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.20
04:04:17 SQL> CREATE TABLE svm6142 COMPRESS AS
04:04:17   2  SELECT
04:04:17   3  pair
04:04:17   4  ,ydate
04:04:17   5  ,prdate
04:04:17   6  ,clse
04:04:17   7  ,g6
04:04:17   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
04:04:17   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
04:04:17  10  ,CASE WHEN trend IS NULL THEN 1
04:04:17  11  	    WHEN trend =0      THEN 1
04:04:17  12  	    ELSE trend END trend
04:04:17  13  ,cm4
04:04:17  14  ,cm6
04:04:17  15  ,cm8
04:04:17  16  ,cm10
04:04:17  17  ,cm12
04:04:17  18  ,cm14
04:04:17  19  ,cm16
04:04:17  20  ,cm18
04:04:17  21  --
04:04:17  22  ,ca4
04:04:17  23  ,ca6
04:04:17  24  ,ca8
04:04:17  25  ,ca10
04:04:17  26  ,ca12
04:04:17  27  ,ca14
04:04:17  28  ,ca16
04:04:17  29  ,ca18
04:04:17  30  --
04:04:17  31  ,cx4
04:04:17  32  ,cx6
04:04:17  33  ,cx8
04:04:17  34  ,cx10
04:04:17  35  ,cx12
04:04:17  36  ,cx14
04:04:17  37  ,cx16
04:04:17  38  ,cx18
04:04:17  39  --
04:04:17  40  ,crr4
04:04:17  41  ,crr6
04:04:17  42  ,crr8
04:04:17  43  ,crr10
04:04:17  44  ,crr12
04:04:17  45  ,crr14
04:04:17  46  ,crr16
04:04:17  47  ,crr18
04:04:17  48  --
04:04:17  49  ,hh
04:04:17  50  ,d
04:04:17  51  ,w
04:04:17  52  ,mpm
04:04:17  53  ,mph
04:04:17  54  FROM svm6122
04:04:17  55  ORDER BY ydate
04:04:17  56  /

Table created.

Elapsed: 00:00:00.38
04:04:17 SQL> 
04:04:17 SQL> -- rpt
04:04:17 SQL> 
04:04:17 SQL> SELECT
04:04:17   2  pair
04:04:17   3  ,trend
04:04:17   4  ,gatt
04:04:17   5  ,COUNT(pair)
04:04:17   6  ,AVG(g6)
04:04:17   7  FROM svm6142
04:04:17   8  GROUP BY pair,trend,gatt
04:04:17   9  ORDER BY pair,trend,gatt
04:04:17  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6294  -.0025609
gbp_usd 	-1 up	      3501 .004243081
gbp_usd 	-1		19
gbp_usd 	 1 nup	      6124 -.00270402
gbp_usd 	 1 up	      3364 .004354448
gbp_usd 	 1		53

6 rows selected.

Elapsed: 00:00:00.22
04:04:18 SQL> 
04:04:18 SQL> 
04:04:18 SQL> -- Derive NTILE based params:
04:04:18 SQL> 
04:04:18 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.14
04:04:18 SQL> CREATE TABLE svm6162 COMPRESS AS
04:04:18   2  SELECT
04:04:18   3  pair
04:04:18   4  ,ydate
04:04:18   5  ,prdate
04:04:18   6  ,clse
04:04:18   7  ,g6
04:04:18   8  ,gatt
04:04:18   9  ,gattn
04:04:18  10  ,trend
04:04:18  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
04:04:18  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
04:04:18  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
04:04:18  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
04:04:18  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
04:04:18  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
04:04:18  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
04:04:18  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
04:04:18  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
04:04:18  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
04:04:18  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
04:04:18  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
04:04:18  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
04:04:18  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
04:04:18  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
04:04:18  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
04:04:18  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
04:04:18  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
04:04:18  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
04:04:18  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
04:04:18  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
04:04:18  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
04:04:18  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
04:04:18  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
04:04:18  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
04:04:18  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
04:04:18  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
04:04:18  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
04:04:18  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
04:04:18  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
04:04:18  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
04:04:18  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
04:04:18  43  ,hh  att32
04:04:18  44  ,d   att33
04:04:18  45  ,w   att34
04:04:18  46  ,mpm att35
04:04:18  47  ,mph att36
04:04:18  48  ,trend att37
04:04:18  49  FROM svm6142
04:04:18  50  ORDER BY ydate
04:04:18  51  /

Table created.

Elapsed: 00:00:04.71
04:04:22 SQL> 
04:04:22 SQL> -- rpt
04:04:22 SQL> 
04:04:22 SQL> SELECT
04:04:22   2  pair
04:04:22   3  ,trend
04:04:22   4  ,gatt
04:04:22   5  ,COUNT(pair)
04:04:22   6  ,AVG(g6)
04:04:22   7  FROM svm6162
04:04:22   8  GROUP BY pair,trend,gatt
04:04:22   9  ORDER BY pair,trend,gatt
04:04:22  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6294  -.0025609
gbp_usd 	-1 up	      3501 .004243081
gbp_usd 	-1		19
gbp_usd 	 1 nup	      6124 -.00270402
gbp_usd 	 1 up	      3364 .004354448
gbp_usd 	 1		53

6 rows selected.

Elapsed: 00:00:00.08
04:04:22 SQL> 
04:04:22 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
04:04:23 SQL> CREATE TABLE modsrc COMPRESS AS
04:04:23   2  SELECT
04:04:23   3  pair
04:04:23   4  ,ydate
04:04:23   5  ,prdate
04:04:23   6  ,trend
04:04:23   7  ,g6
04:04:23   8  ,gatt
04:04:23   9  ,gattn
04:04:23  10  FROM svm6162
04:04:23  11  /

Table created.

Elapsed: 00:00:00.09
04:04:23 SQL> 
04:04:23 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.24
04:04:23 SQL> 
04:04:23 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
04:04:23 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
04:04:23   2  SELECT
04:04:23   3  ydate
04:04:23   4  ,trend gbp_trend
04:04:23   5  ,g6    gbp_g6
04:04:23   6  ,gatt  gbp_gatt
04:04:23   7  ,gattn gbp_gattn
04:04:23   8  FROM modsrc
04:04:23   9  /

Table created.

Elapsed: 00:00:00.11
04:04:23 SQL> 
04:04:23 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
04:04:23 SQL> 
04:04:23 SQL> -- I need a copy of the attributes:
04:04:23 SQL> 
04:04:23 SQL> 
04:04:23 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.06
04:04:23 SQL> CREATE TABLE gbp_att COMPRESS AS
04:04:23   2  SELECT
04:04:23   3  ydate
04:04:23   4  ,att00 gbp_att00
04:04:23   5  ,att01 gbp_att01
04:04:23   6  ,att02 gbp_att02
04:04:23   7  ,att03 gbp_att03
04:04:23   8  ,att04 gbp_att04
04:04:23   9  ,att05 gbp_att05
04:04:23  10  ,att06 gbp_att06
04:04:23  11  ,att07 gbp_att07
04:04:23  12  ,att08 gbp_att08
04:04:23  13  ,att09 gbp_att09
04:04:23  14  ,att10 gbp_att10
04:04:23  15  ,att11 gbp_att11
04:04:23  16  ,att12 gbp_att12
04:04:23  17  ,att13 gbp_att13
04:04:23  18  ,att14 gbp_att14
04:04:23  19  ,att15 gbp_att15
04:04:23  20  ,att16 gbp_att16
04:04:23  21  ,att17 gbp_att17
04:04:23  22  ,att18 gbp_att18
04:04:23  23  ,att19 gbp_att19
04:04:23  24  ,att20 gbp_att20
04:04:23  25  ,att21 gbp_att21
04:04:23  26  ,att22 gbp_att22
04:04:23  27  ,att23 gbp_att23
04:04:23  28  ,att24 gbp_att24
04:04:23  29  ,att25 gbp_att25
04:04:23  30  ,att26 gbp_att26
04:04:23  31  ,att27 gbp_att27
04:04:23  32  ,att28 gbp_att28
04:04:23  33  ,att29 gbp_att29
04:04:23  34  ,att30 gbp_att30
04:04:23  35  ,att31 gbp_att31
04:04:23  36  ,att32 gbp_att32
04:04:23  37  ,att33 gbp_att33
04:04:23  38  ,att34 gbp_att34
04:04:23  39  ,att35 gbp_att35
04:04:23  40  ,att36 gbp_att36
04:04:23  41  ,att37 gbp_att37
04:04:23  42  FROM svm6162
04:04:23  43  /

Table created.

Elapsed: 00:00:00.20
04:04:24 SQL> 
04:04:24 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
04:04:24 SQL> 
04:04:24 SQL> -- rpt
04:04:24 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19355

Elapsed: 00:00:00.83
04:04:25 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19355

Elapsed: 00:00:00.01
04:04:25 SQL> 
04:04:25 SQL> --
04:04:25 SQL> -- jpy610.sql
04:04:25 SQL> --
04:04:25 SQL> 
04:04:25 SQL> -- Creates views and tables for backtesting a forex SVM strategy
04:04:25 SQL> 
04:04:25 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.45
04:04:25 SQL> 
04:04:25 SQL> -- I created di5min here:
04:04:25 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
04:04:25 SQL> 
04:04:25 SQL> CREATE OR REPLACE VIEW svm6102 AS
04:04:25   2  SELECT
04:04:25   3  pair
04:04:25   4  ,ydate
04:04:25   5  ,prdate
04:04:25   6  ,rownum rnum -- acts as t in my time-series
04:04:25   7  ,clse
04:04:25   8  -- Derive a bunch of attributes from clse, the latest price:
04:04:25   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
04:04:25  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
04:04:25  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
04:04:25  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
04:04:25  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
04:04:25  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
04:04:25  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
04:04:25  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
04:04:25  17  --
04:04:25  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
04:04:25  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
04:04:25  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
04:04:25  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
04:04:25  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
04:04:25  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
04:04:25  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
04:04:25  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
04:04:25  26  --
04:04:25  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
04:04:25  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
04:04:25  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
04:04:25  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
04:04:25  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
04:04:25  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
04:04:25  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
04:04:25  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
04:04:25  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
04:04:25  36  FROM di5min WHERE pair LIKE'%jpy%'
04:04:25  37  AND ydate > sysdate - 95
04:04:25  38  ORDER BY ydate
04:04:25  39  /

View created.

Elapsed: 00:00:00.05
04:04:25 SQL> 
04:04:25 SQL> -- rpt
04:04:25 SQL> 
04:04:25 SQL> SELECT
04:04:25   2  pair
04:04:25   3  ,COUNT(pair)
04:04:25   4  ,MIN(clse),MAX(clse)
04:04:25   5  ,MIN(avg6),MAX(avg6)
04:04:25   6  ,MIN(ydate),MAX(ydate)
04:04:25   7  FROM svm6102
04:04:25   8  GROUP BY pair
04:04:25   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19352	 80.25	   84.485 80.3595205 84.3105479 2010-09-26 20:55:01 2010-12-29 04:00:00

Elapsed: 00:00:00.88
04:04:26 SQL> 
04:04:26 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
04:04:26 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.17
04:04:26 SQL> CREATE TABLE svm6122 COMPRESS AS
04:04:26   2  SELECT
04:04:26   3  pair
04:04:26   4  ,ydate
04:04:26   5  ,prdate
04:04:26   6  ,clse
04:04:26   7  -- g6 is important. I want to predict g6:
04:04:26   8  ,ld6 - clse g6
04:04:26   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
04:04:26  10  -- I want more attributes from the ones I derived above:
04:04:26  11  -- clse relation to moving-min
04:04:26  12  ,clse-min4  cm4
04:04:26  13  ,clse-min6  cm6
04:04:26  14  ,clse-min8  cm8
04:04:26  15  ,clse-min10 cm10
04:04:26  16  ,clse-min12 cm12
04:04:26  17  ,clse-min14 cm14
04:04:26  18  ,clse-min16 cm16
04:04:26  19  ,clse-min18 cm18
04:04:26  20  -- clse relation to moving-avg
04:04:26  21  ,clse-avg4  ca4
04:04:26  22  ,clse-avg6  ca6
04:04:26  23  ,clse-avg8  ca8
04:04:26  24  ,clse-avg10 ca10
04:04:26  25  ,clse-avg12 ca12
04:04:26  26  ,clse-avg14 ca14
04:04:26  27  ,clse-avg16 ca16
04:04:26  28  ,clse-avg18 ca18
04:04:26  29  -- clse relation to moving-max
04:04:26  30  ,clse-max4  cx4
04:04:26  31  ,clse-max6  cx6
04:04:26  32  ,clse-max8  cx8
04:04:26  33  ,clse-max10 cx10
04:04:26  34  ,clse-max12 cx12
04:04:26  35  ,clse-max14 cx14
04:04:26  36  ,clse-max16 cx16
04:04:26  37  ,clse-max18 cx18
04:04:26  38  -- Derive more attributes.
04:04:26  39  -- I want to use CORR() here to help SVM see the shape of the series.
04:04:26  40  -- But COVAR_POP is more stable:
04:04:26  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
04:04:26  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
04:04:26  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
04:04:26  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
04:04:26  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
04:04:26  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
04:04:26  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
04:04:26  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
04:04:26  49  -- Derive date related attributes:
04:04:26  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
04:04:26  51  ,0+TO_CHAR(ydate,'D')d
04:04:26  52  ,0+TO_CHAR(ydate,'W')w
04:04:26  53  -- mpm stands for minutes-past-midnight:
04:04:26  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
04:04:26  55  -- mph stands for minutes-past-hour:
04:04:26  56  ,0+TO_CHAR(ydate,'MI')mph
04:04:26  57  FROM svm6102
04:04:26  58  ORDER BY ydate
04:04:26  59  /

Table created.

Elapsed: 00:00:02.04
04:04:28 SQL> 
04:04:28 SQL> -- rpt
04:04:28 SQL> 
04:04:28 SQL> SELECT
04:04:28   2  pair
04:04:28   3  ,COUNT(pair)
04:04:28   4  ,MIN(clse),MAX(clse)
04:04:28   5  ,MIN(ydate),MAX(ydate)
04:04:28   6  FROM svm6122
04:04:28   7  GROUP BY pair
04:04:28   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19352	 80.25	   84.485 2010-09-26 20:55:01 2010-12-29 04:00:00

Elapsed: 00:00:00.04
04:04:28 SQL> 
04:04:28 SQL> -- Prepare for derivation of NTILE based params:
04:04:28 SQL> 
04:04:28 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.28
04:04:29 SQL> CREATE TABLE svm6142 COMPRESS AS
04:04:29   2  SELECT
04:04:29   3  pair
04:04:29   4  ,ydate
04:04:29   5  ,prdate
04:04:29   6  ,clse
04:04:29   7  ,g6
04:04:29   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
04:04:29   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
04:04:29  10  ,CASE WHEN trend IS NULL THEN 1
04:04:29  11  	    WHEN trend =0      THEN 1
04:04:29  12  	    ELSE trend END trend
04:04:29  13  ,cm4
04:04:29  14  ,cm6
04:04:29  15  ,cm8
04:04:29  16  ,cm10
04:04:29  17  ,cm12
04:04:29  18  ,cm14
04:04:29  19  ,cm16
04:04:29  20  ,cm18
04:04:29  21  --
04:04:29  22  ,ca4
04:04:29  23  ,ca6
04:04:29  24  ,ca8
04:04:29  25  ,ca10
04:04:29  26  ,ca12
04:04:29  27  ,ca14
04:04:29  28  ,ca16
04:04:29  29  ,ca18
04:04:29  30  --
04:04:29  31  ,cx4
04:04:29  32  ,cx6
04:04:29  33  ,cx8
04:04:29  34  ,cx10
04:04:29  35  ,cx12
04:04:29  36  ,cx14
04:04:29  37  ,cx16
04:04:29  38  ,cx18
04:04:29  39  --
04:04:29  40  ,crr4
04:04:29  41  ,crr6
04:04:29  42  ,crr8
04:04:29  43  ,crr10
04:04:29  44  ,crr12
04:04:29  45  ,crr14
04:04:29  46  ,crr16
04:04:29  47  ,crr18
04:04:29  48  --
04:04:29  49  ,hh
04:04:29  50  ,d
04:04:29  51  ,w
04:04:29  52  ,mpm
04:04:29  53  ,mph
04:04:29  54  FROM svm6122
04:04:29  55  ORDER BY ydate
04:04:29  56  /

Table created.

Elapsed: 00:00:00.38
04:04:29 SQL> 
04:04:29 SQL> -- rpt
04:04:29 SQL> 
04:04:29 SQL> SELECT
04:04:29   2  pair
04:04:29   3  ,trend
04:04:29   4  ,gatt
04:04:29   5  ,COUNT(pair)
04:04:29   6  ,AVG(g6)
04:04:29   7  FROM svm6142
04:04:29   8  GROUP BY pair,trend,gatt
04:04:29   9  ORDER BY pair,trend,gatt
04:04:29  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5097 -.16260702
usd_jpy 	-1 up	      4954 .163304745
usd_jpy 	-1		36
usd_jpy 	 1 nup	      5136 -.15507624
usd_jpy 	 1 up	      4093 .165084061
usd_jpy 	 1		36

6 rows selected.

Elapsed: 00:00:00.04
04:04:29 SQL> 
04:04:29 SQL> 
04:04:29 SQL> -- Derive NTILE based params:
04:04:29 SQL> 
04:04:29 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
04:04:29 SQL> CREATE TABLE svm6162 COMPRESS AS
04:04:29   2  SELECT
04:04:29   3  pair
04:04:29   4  ,ydate
04:04:29   5  ,prdate
04:04:29   6  ,clse
04:04:29   7  ,g6
04:04:29   8  ,gatt
04:04:29   9  ,gattn
04:04:29  10  ,trend
04:04:29  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
04:04:29  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
04:04:29  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
04:04:29  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
04:04:29  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
04:04:29  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
04:04:29  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
04:04:29  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
04:04:29  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
04:04:29  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
04:04:29  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
04:04:29  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
04:04:29  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
04:04:29  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
04:04:29  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
04:04:29  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
04:04:29  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
04:04:29  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
04:04:29  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
04:04:29  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
04:04:29  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
04:04:29  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
04:04:29  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
04:04:29  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
04:04:29  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
04:04:29  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
04:04:29  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
04:04:29  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
04:04:29  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
04:04:29  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
04:04:29  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
04:04:29  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
04:04:29  43  ,hh  att32
04:04:29  44  ,d   att33
04:04:29  45  ,w   att34
04:04:29  46  ,mpm att35
04:04:29  47  ,mph att36
04:04:29  48  ,trend att37
04:04:29  49  FROM svm6142
04:04:29  50  ORDER BY ydate
04:04:29  51  /

Table created.

Elapsed: 00:00:05.74
04:04:35 SQL> 
04:04:35 SQL> -- rpt
04:04:35 SQL> 
04:04:35 SQL> SELECT
04:04:35   2  pair
04:04:35   3  ,trend
04:04:35   4  ,gatt
04:04:35   5  ,COUNT(pair)
04:04:35   6  ,AVG(g6)
04:04:35   7  FROM svm6162
04:04:35   8  GROUP BY pair,trend,gatt
04:04:35   9  ORDER BY pair,trend,gatt
04:04:35  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5097 -.16260702
usd_jpy 	-1 up	      4954 .163304745
usd_jpy 	-1		36
usd_jpy 	 1 nup	      5136 -.15507624
usd_jpy 	 1 up	      4093 .165084061
usd_jpy 	 1		36

6 rows selected.

Elapsed: 00:00:00.03
04:04:35 SQL> 
04:04:35 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.43
04:04:36 SQL> CREATE TABLE modsrc COMPRESS AS
04:04:36   2  SELECT
04:04:36   3  pair
04:04:36   4  ,ydate
04:04:36   5  ,prdate
04:04:36   6  ,trend
04:04:36   7  ,g6
04:04:36   8  ,gatt
04:04:36   9  ,gattn
04:04:36  10  FROM svm6162
04:04:36  11  /

Table created.

Elapsed: 00:00:00.08
04:04:36 SQL> 
04:04:36 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
04:04:36 SQL> 
04:04:36 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.07
04:04:36 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
04:04:36   2  SELECT
04:04:36   3  ydate
04:04:36   4  ,trend jpy_trend
04:04:36   5  ,g6    jpy_g6
04:04:36   6  ,gatt  jpy_gatt
04:04:36   7  ,gattn jpy_gattn
04:04:36   8  FROM modsrc
04:04:36   9  /

Table created.

Elapsed: 00:00:00.08
04:04:36 SQL> 
04:04:36 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
04:04:36 SQL> 
04:04:36 SQL> -- I need a copy of the attributes:
04:04:36 SQL> 
04:04:36 SQL> 
04:04:36 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.04
04:04:36 SQL> CREATE TABLE jpy_att COMPRESS AS
04:04:36   2  SELECT
04:04:36   3  ydate
04:04:36   4  ,att00 jpy_att00
04:04:36   5  ,att01 jpy_att01
04:04:36   6  ,att02 jpy_att02
04:04:36   7  ,att03 jpy_att03
04:04:36   8  ,att04 jpy_att04
04:04:36   9  ,att05 jpy_att05
04:04:36  10  ,att06 jpy_att06
04:04:36  11  ,att07 jpy_att07
04:04:36  12  ,att08 jpy_att08
04:04:36  13  ,att09 jpy_att09
04:04:36  14  ,att10 jpy_att10
04:04:36  15  ,att11 jpy_att11
04:04:36  16  ,att12 jpy_att12
04:04:36  17  ,att13 jpy_att13
04:04:36  18  ,att14 jpy_att14
04:04:36  19  ,att15 jpy_att15
04:04:36  20  ,att16 jpy_att16
04:04:36  21  ,att17 jpy_att17
04:04:36  22  ,att18 jpy_att18
04:04:36  23  ,att19 jpy_att19
04:04:36  24  ,att20 jpy_att20
04:04:36  25  ,att21 jpy_att21
04:04:36  26  ,att22 jpy_att22
04:04:36  27  ,att23 jpy_att23
04:04:36  28  ,att24 jpy_att24
04:04:36  29  ,att25 jpy_att25
04:04:36  30  ,att26 jpy_att26
04:04:36  31  ,att27 jpy_att27
04:04:36  32  ,att28 jpy_att28
04:04:36  33  ,att29 jpy_att29
04:04:36  34  ,att30 jpy_att30
04:04:36  35  ,att31 jpy_att31
04:04:36  36  ,att32 jpy_att32
04:04:36  37  ,att33 jpy_att33
04:04:36  38  ,att34 jpy_att34
04:04:36  39  ,att35 jpy_att35
04:04:36  40  ,att36 jpy_att36
04:04:36  41  ,att37 jpy_att37
04:04:36  42  FROM svm6162
04:04:36  43  /

Table created.

Elapsed: 00:00:00.22
04:04:36 SQL> 
04:04:36 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
04:04:37 SQL> 
04:04:37 SQL> -- rpt
04:04:37 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19352

Elapsed: 00:00:00.89
04:04:38 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19352

Elapsed: 00:00:00.00
04:04:38 SQL> 
04:04:38 SQL> --
04:04:38 SQL> -- cad610.sql
04:04:38 SQL> --
04:04:38 SQL> 
04:04:38 SQL> -- Creates views and tables for backtesting a forex SVM strategy
04:04:38 SQL> 
04:04:38 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.41
04:04:38 SQL> 
04:04:38 SQL> -- I created di5min here:
04:04:38 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
04:04:38 SQL> 
04:04:38 SQL> CREATE OR REPLACE VIEW svm6102 AS
04:04:38   2  SELECT
04:04:38   3  pair
04:04:38   4  ,ydate
04:04:38   5  ,prdate
04:04:38   6  ,rownum rnum -- acts as t in my time-series
04:04:38   7  ,clse
04:04:38   8  -- Derive a bunch of attributes from clse, the latest price:
04:04:38   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
04:04:38  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
04:04:38  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
04:04:38  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
04:04:38  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
04:04:38  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
04:04:38  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
04:04:38  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
04:04:38  17  --
04:04:38  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
04:04:38  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
04:04:38  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
04:04:38  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
04:04:38  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
04:04:38  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
04:04:38  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
04:04:38  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
04:04:38  26  --
04:04:38  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
04:04:38  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
04:04:38  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
04:04:38  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
04:04:38  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
04:04:38  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
04:04:38  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
04:04:38  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
04:04:38  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
04:04:38  36  FROM di5min WHERE pair LIKE'%cad%'
04:04:38  37  AND ydate > sysdate - 95
04:04:38  38  ORDER BY ydate
04:04:38  39  /

View created.

Elapsed: 00:00:00.04
04:04:38 SQL> 
04:04:38 SQL> -- rpt
04:04:38 SQL> 
04:04:38 SQL> SELECT
04:04:38   2  pair
04:04:38   3  ,COUNT(pair)
04:04:38   4  ,MIN(clse),MAX(clse)
04:04:38   5  ,MIN(avg6),MAX(avg6)
04:04:38   6  ,MIN(ydate),MAX(ydate)
04:04:38   7  FROM svm6102
04:04:38   8  GROUP BY pair
04:04:38   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19352    .997975	    1.036 .999321575 1.03336849 2010-09-26 20:55:01 2010-12-29 04:00:00

Elapsed: 00:00:00.82
04:04:39 SQL> 
04:04:39 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
04:04:39 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.33
04:04:39 SQL> CREATE TABLE svm6122 COMPRESS AS
04:04:39   2  SELECT
04:04:39   3  pair
04:04:39   4  ,ydate
04:04:39   5  ,prdate
04:04:39   6  ,clse
04:04:39   7  -- g6 is important. I want to predict g6:
04:04:39   8  ,ld6 - clse g6
04:04:39   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
04:04:39  10  -- I want more attributes from the ones I derived above:
04:04:39  11  -- clse relation to moving-min
04:04:39  12  ,clse-min4  cm4
04:04:39  13  ,clse-min6  cm6
04:04:39  14  ,clse-min8  cm8
04:04:39  15  ,clse-min10 cm10
04:04:39  16  ,clse-min12 cm12
04:04:39  17  ,clse-min14 cm14
04:04:39  18  ,clse-min16 cm16
04:04:39  19  ,clse-min18 cm18
04:04:39  20  -- clse relation to moving-avg
04:04:39  21  ,clse-avg4  ca4
04:04:39  22  ,clse-avg6  ca6
04:04:39  23  ,clse-avg8  ca8
04:04:39  24  ,clse-avg10 ca10
04:04:39  25  ,clse-avg12 ca12
04:04:39  26  ,clse-avg14 ca14
04:04:39  27  ,clse-avg16 ca16
04:04:39  28  ,clse-avg18 ca18
04:04:39  29  -- clse relation to moving-max
04:04:39  30  ,clse-max4  cx4
04:04:39  31  ,clse-max6  cx6
04:04:39  32  ,clse-max8  cx8
04:04:39  33  ,clse-max10 cx10
04:04:39  34  ,clse-max12 cx12
04:04:39  35  ,clse-max14 cx14
04:04:39  36  ,clse-max16 cx16
04:04:39  37  ,clse-max18 cx18
04:04:39  38  -- Derive more attributes.
04:04:39  39  -- I want to use CORR() here to help SVM see the shape of the series.
04:04:39  40  -- But COVAR_POP is more stable:
04:04:39  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
04:04:39  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
04:04:39  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
04:04:39  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
04:04:39  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
04:04:39  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
04:04:39  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
04:04:39  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
04:04:39  49  -- Derive date related attributes:
04:04:39  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
04:04:39  51  ,0+TO_CHAR(ydate,'D')d
04:04:39  52  ,0+TO_CHAR(ydate,'W')w
04:04:39  53  -- mpm stands for minutes-past-midnight:
04:04:39  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
04:04:39  55  -- mph stands for minutes-past-hour:
04:04:39  56  ,0+TO_CHAR(ydate,'MI')mph
04:04:39  57  FROM svm6102
04:04:39  58  ORDER BY ydate
04:04:39  59  /

Table created.

Elapsed: 00:00:02.00
04:04:41 SQL> 
04:04:41 SQL> -- rpt
04:04:41 SQL> 
04:04:41 SQL> SELECT
04:04:41   2  pair
04:04:41   3  ,COUNT(pair)
04:04:41   4  ,MIN(clse),MAX(clse)
04:04:41   5  ,MIN(ydate),MAX(ydate)
04:04:41   6  FROM svm6122
04:04:41   7  GROUP BY pair
04:04:41   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19352    .997975	    1.036 2010-09-26 20:55:01 2010-12-29 04:00:00

Elapsed: 00:00:00.04
04:04:41 SQL> 
04:04:41 SQL> -- Prepare for derivation of NTILE based params:
04:04:41 SQL> 
04:04:41 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.16
04:04:42 SQL> CREATE TABLE svm6142 COMPRESS AS
04:04:42   2  SELECT
04:04:42   3  pair
04:04:42   4  ,ydate
04:04:42   5  ,prdate
04:04:42   6  ,clse
04:04:42   7  ,g6
04:04:42   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
04:04:42   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
04:04:42  10  ,CASE WHEN trend IS NULL THEN 1
04:04:42  11  	    WHEN trend =0      THEN 1
04:04:42  12  	    ELSE trend END trend
04:04:42  13  ,cm4
04:04:42  14  ,cm6
04:04:42  15  ,cm8
04:04:42  16  ,cm10
04:04:42  17  ,cm12
04:04:42  18  ,cm14
04:04:42  19  ,cm16
04:04:42  20  ,cm18
04:04:42  21  --
04:04:42  22  ,ca4
04:04:42  23  ,ca6
04:04:42  24  ,ca8
04:04:42  25  ,ca10
04:04:42  26  ,ca12
04:04:42  27  ,ca14
04:04:42  28  ,ca16
04:04:42  29  ,ca18
04:04:42  30  --
04:04:42  31  ,cx4
04:04:42  32  ,cx6
04:04:42  33  ,cx8
04:04:42  34  ,cx10
04:04:42  35  ,cx12
04:04:42  36  ,cx14
04:04:42  37  ,cx16
04:04:42  38  ,cx18
04:04:42  39  --
04:04:42  40  ,crr4
04:04:42  41  ,crr6
04:04:42  42  ,crr8
04:04:42  43  ,crr10
04:04:42  44  ,crr12
04:04:42  45  ,crr14
04:04:42  46  ,crr16
04:04:42  47  ,crr18
04:04:42  48  --
04:04:42  49  ,hh
04:04:42  50  ,d
04:04:42  51  ,w
04:04:42  52  ,mpm
04:04:42  53  ,mph
04:04:42  54  FROM svm6122
04:04:42  55  ORDER BY ydate
04:04:42  56  /

Table created.

Elapsed: 00:00:00.36
04:04:42 SQL> 
04:04:42 SQL> -- rpt
04:04:42 SQL> 
04:04:42 SQL> SELECT
04:04:42   2  pair
04:04:42   3  ,trend
04:04:42   4  ,gatt
04:04:42   5  ,COUNT(pair)
04:04:42   6  ,AVG(g6)
04:04:42   7  FROM svm6142
04:04:42   8  GROUP BY pair,trend,gatt
04:04:42   9  ORDER BY pair,trend,gatt
04:04:42  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7141 -.00133516
usd_cad 	-1 up	      3081  .00310749
usd_cad 	-1		 7
usd_cad 	 1 nup	      6569 -.00162583
usd_cad 	 1 up	      2489 .003597467
usd_cad 	 1		65

6 rows selected.

Elapsed: 00:00:00.06
04:04:42 SQL> 
04:04:42 SQL> 
04:04:42 SQL> -- Derive NTILE based params:
04:04:42 SQL> 
04:04:42 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.18
04:04:42 SQL> CREATE TABLE svm6162 COMPRESS AS
04:04:42   2  SELECT
04:04:42   3  pair
04:04:42   4  ,ydate
04:04:42   5  ,prdate
04:04:42   6  ,clse
04:04:42   7  ,g6
04:04:42   8  ,gatt
04:04:42   9  ,gattn
04:04:42  10  ,trend
04:04:42  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
04:04:42  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
04:04:42  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
04:04:42  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
04:04:42  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
04:04:42  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
04:04:42  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
04:04:42  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
04:04:42  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
04:04:42  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
04:04:42  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
04:04:42  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
04:04:42  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
04:04:42  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
04:04:42  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
04:04:42  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
04:04:42  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
04:04:42  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
04:04:42  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
04:04:42  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
04:04:42  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
04:04:42  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
04:04:42  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
04:04:42  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
04:04:42  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
04:04:42  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
04:04:42  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
04:04:42  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
04:04:42  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
04:04:42  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
04:04:42  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
04:04:42  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
04:04:42  43  ,hh  att32
04:04:42  44  ,d   att33
04:04:42  45  ,w   att34
04:04:42  46  ,mpm att35
04:04:42  47  ,mph att36
04:04:42  48  ,trend att37
04:04:42  49  FROM svm6142
04:04:42  50  ORDER BY ydate
04:04:42  51  /

Table created.

Elapsed: 00:00:04.66
04:04:47 SQL> 
04:04:47 SQL> -- rpt
04:04:47 SQL> 
04:04:47 SQL> SELECT
04:04:47   2  pair
04:04:47   3  ,trend
04:04:47   4  ,gatt
04:04:47   5  ,COUNT(pair)
04:04:47   6  ,AVG(g6)
04:04:47   7  FROM svm6162
04:04:47   8  GROUP BY pair,trend,gatt
04:04:47   9  ORDER BY pair,trend,gatt
04:04:47  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7141 -.00133516
usd_cad 	-1 up	      3081  .00310749
usd_cad 	-1		 7
usd_cad 	 1 nup	      6569 -.00162583
usd_cad 	 1 up	      2489 .003597467
usd_cad 	 1		65

6 rows selected.

Elapsed: 00:00:00.03
04:04:47 SQL> 
04:04:47 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
04:04:47 SQL> CREATE TABLE modsrc COMPRESS AS
04:04:47   2  SELECT
04:04:47   3  pair
04:04:47   4  ,ydate
04:04:47   5  ,prdate
04:04:47   6  ,trend
04:04:47   7  ,g6
04:04:47   8  ,gatt
04:04:47   9  ,gattn
04:04:47  10  FROM svm6162
04:04:47  11  /

Table created.

Elapsed: 00:00:00.08
04:04:47 SQL> 
04:04:47 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
04:04:47 SQL> 
04:04:47 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.07
04:04:47 SQL> CREATE TABLE cad_ms610 COMPRESS AS
04:04:47   2  SELECT
04:04:47   3  ydate
04:04:47   4  ,trend cad_trend
04:04:47   5  ,g6    cad_g6
04:04:47   6  ,gatt  cad_gatt
04:04:47   7  ,gattn cad_gattn
04:04:47   8  FROM modsrc
04:04:47   9  /

Table created.

Elapsed: 00:00:00.07
04:04:47 SQL> 
04:04:47 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
04:04:48 SQL> 
04:04:48 SQL> -- I need a copy of the attributes:
04:04:48 SQL> 
04:04:48 SQL> 
04:04:48 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.07
04:04:48 SQL> CREATE TABLE cad_att COMPRESS AS
04:04:48   2  SELECT
04:04:48   3  ydate
04:04:48   4  ,att00 cad_att00
04:04:48   5  ,att01 cad_att01
04:04:48   6  ,att02 cad_att02
04:04:48   7  ,att03 cad_att03
04:04:48   8  ,att04 cad_att04
04:04:48   9  ,att05 cad_att05
04:04:48  10  ,att06 cad_att06
04:04:48  11  ,att07 cad_att07
04:04:48  12  ,att08 cad_att08
04:04:48  13  ,att09 cad_att09
04:04:48  14  ,att10 cad_att10
04:04:48  15  ,att11 cad_att11
04:04:48  16  ,att12 cad_att12
04:04:48  17  ,att13 cad_att13
04:04:48  18  ,att14 cad_att14
04:04:48  19  ,att15 cad_att15
04:04:48  20  ,att16 cad_att16
04:04:48  21  ,att17 cad_att17
04:04:48  22  ,att18 cad_att18
04:04:48  23  ,att19 cad_att19
04:04:48  24  ,att20 cad_att20
04:04:48  25  ,att21 cad_att21
04:04:48  26  ,att22 cad_att22
04:04:48  27  ,att23 cad_att23
04:04:48  28  ,att24 cad_att24
04:04:48  29  ,att25 cad_att25
04:04:48  30  ,att26 cad_att26
04:04:48  31  ,att27 cad_att27
04:04:48  32  ,att28 cad_att28
04:04:48  33  ,att29 cad_att29
04:04:48  34  ,att30 cad_att30
04:04:48  35  ,att31 cad_att31
04:04:48  36  ,att32 cad_att32
04:04:48  37  ,att33 cad_att33
04:04:48  38  ,att34 cad_att34
04:04:48  39  ,att35 cad_att35
04:04:48  40  ,att36 cad_att36
04:04:48  41  ,att37 cad_att37
04:04:48  42  FROM svm6162
04:04:48  43  /

Table created.

Elapsed: 00:00:00.17
04:04:48 SQL> 
04:04:48 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
04:04:48 SQL> 
04:04:48 SQL> -- rpt
04:04:48 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19352

Elapsed: 00:00:00.80
04:04:49 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19352

Elapsed: 00:00:00.01
04:04:49 SQL> 
04:04:49 SQL> --
04:04:49 SQL> -- chf610.sql
04:04:49 SQL> --
04:04:49 SQL> 
04:04:49 SQL> -- Creates views and tables for backtesting a forex SVM strategy
04:04:49 SQL> 
04:04:49 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.44
04:04:49 SQL> 
04:04:49 SQL> -- I created di5min here:
04:04:49 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
04:04:49 SQL> 
04:04:49 SQL> CREATE OR REPLACE VIEW svm6102 AS
04:04:49   2  SELECT
04:04:49   3  pair
04:04:49   4  ,ydate
04:04:49   5  ,prdate
04:04:49   6  ,rownum rnum -- acts as t in my time-series
04:04:49   7  ,clse
04:04:49   8  -- Derive a bunch of attributes from clse, the latest price:
04:04:49   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
04:04:49  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
04:04:49  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
04:04:49  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
04:04:49  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
04:04:49  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
04:04:49  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
04:04:49  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
04:04:49  17  --
04:04:49  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
04:04:49  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
04:04:49  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
04:04:49  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
04:04:49  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
04:04:49  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
04:04:49  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
04:04:49  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
04:04:49  26  --
04:04:49  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
04:04:49  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
04:04:49  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
04:04:49  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
04:04:49  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
04:04:49  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
04:04:49  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
04:04:49  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
04:04:49  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
04:04:49  36  FROM di5min WHERE pair LIKE'%chf%'
04:04:49  37  AND ydate > sysdate - 95
04:04:49  38  ORDER BY ydate
04:04:49  39  /

View created.

Elapsed: 00:00:00.05
04:04:50 SQL> 
04:04:50 SQL> -- rpt
04:04:50 SQL> 
04:04:50 SQL> SELECT
04:04:50   2  pair
04:04:50   3  ,COUNT(pair)
04:04:50   4  ,MIN(clse),MAX(clse)
04:04:50   5  ,MIN(avg6),MAX(avg6)
04:04:50   6  ,MIN(ydate),MAX(ydate)
04:04:50   7  FROM svm6102
04:04:50   8  GROUP BY pair
04:04:50   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19355	.94525	  1.00635 .947785616 1.00498151 2010-09-26 20:55:01 2010-12-29 04:00:00

Elapsed: 00:00:00.82
04:04:50 SQL> 
04:04:50 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
04:04:50 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
04:04:51 SQL> CREATE TABLE svm6122 COMPRESS AS
04:04:51   2  SELECT
04:04:51   3  pair
04:04:51   4  ,ydate
04:04:51   5  ,prdate
04:04:51   6  ,clse
04:04:51   7  -- g6 is important. I want to predict g6:
04:04:51   8  ,ld6 - clse g6
04:04:51   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
04:04:51  10  -- I want more attributes from the ones I derived above:
04:04:51  11  -- clse relation to moving-min
04:04:51  12  ,clse-min4  cm4
04:04:51  13  ,clse-min6  cm6
04:04:51  14  ,clse-min8  cm8
04:04:51  15  ,clse-min10 cm10
04:04:51  16  ,clse-min12 cm12
04:04:51  17  ,clse-min14 cm14
04:04:51  18  ,clse-min16 cm16
04:04:51  19  ,clse-min18 cm18
04:04:51  20  -- clse relation to moving-avg
04:04:51  21  ,clse-avg4  ca4
04:04:51  22  ,clse-avg6  ca6
04:04:51  23  ,clse-avg8  ca8
04:04:51  24  ,clse-avg10 ca10
04:04:51  25  ,clse-avg12 ca12
04:04:51  26  ,clse-avg14 ca14
04:04:51  27  ,clse-avg16 ca16
04:04:51  28  ,clse-avg18 ca18
04:04:51  29  -- clse relation to moving-max
04:04:51  30  ,clse-max4  cx4
04:04:51  31  ,clse-max6  cx6
04:04:51  32  ,clse-max8  cx8
04:04:51  33  ,clse-max10 cx10
04:04:51  34  ,clse-max12 cx12
04:04:51  35  ,clse-max14 cx14
04:04:51  36  ,clse-max16 cx16
04:04:51  37  ,clse-max18 cx18
04:04:51  38  -- Derive more attributes.
04:04:51  39  -- I want to use CORR() here to help SVM see the shape of the series.
04:04:51  40  -- But COVAR_POP is more stable:
04:04:51  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
04:04:51  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
04:04:51  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
04:04:51  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
04:04:51  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
04:04:51  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
04:04:51  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
04:04:51  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
04:04:51  49  -- Derive date related attributes:
04:04:51  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
04:04:51  51  ,0+TO_CHAR(ydate,'D')d
04:04:51  52  ,0+TO_CHAR(ydate,'W')w
04:04:51  53  -- mpm stands for minutes-past-midnight:
04:04:51  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
04:04:51  55  -- mph stands for minutes-past-hour:
04:04:51  56  ,0+TO_CHAR(ydate,'MI')mph
04:04:51  57  FROM svm6102
04:04:51  58  ORDER BY ydate
04:04:51  59  /

Table created.

Elapsed: 00:00:01.97
04:04:53 SQL> 
04:04:53 SQL> -- rpt
04:04:53 SQL> 
04:04:53 SQL> SELECT
04:04:53   2  pair
04:04:53   3  ,COUNT(pair)
04:04:53   4  ,MIN(clse),MAX(clse)
04:04:53   5  ,MIN(ydate),MAX(ydate)
04:04:53   6  FROM svm6122
04:04:53   7  GROUP BY pair
04:04:53   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19355	.94525	  1.00635 2010-09-26 20:55:01 2010-12-29 04:00:00

Elapsed: 00:00:00.04
04:04:53 SQL> 
04:04:53 SQL> -- Prepare for derivation of NTILE based params:
04:04:53 SQL> 
04:04:53 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.24
04:04:53 SQL> CREATE TABLE svm6142 COMPRESS AS
04:04:53   2  SELECT
04:04:53   3  pair
04:04:53   4  ,ydate
04:04:53   5  ,prdate
04:04:53   6  ,clse
04:04:53   7  ,g6
04:04:53   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
04:04:53   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
04:04:53  10  ,CASE WHEN trend IS NULL THEN 1
04:04:53  11  	    WHEN trend =0      THEN 1
04:04:53  12  	    ELSE trend END trend
04:04:53  13  ,cm4
04:04:53  14  ,cm6
04:04:53  15  ,cm8
04:04:53  16  ,cm10
04:04:53  17  ,cm12
04:04:53  18  ,cm14
04:04:53  19  ,cm16
04:04:53  20  ,cm18
04:04:53  21  --
04:04:53  22  ,ca4
04:04:53  23  ,ca6
04:04:53  24  ,ca8
04:04:53  25  ,ca10
04:04:53  26  ,ca12
04:04:53  27  ,ca14
04:04:53  28  ,ca16
04:04:53  29  ,ca18
04:04:53  30  --
04:04:53  31  ,cx4
04:04:53  32  ,cx6
04:04:53  33  ,cx8
04:04:53  34  ,cx10
04:04:53  35  ,cx12
04:04:53  36  ,cx14
04:04:53  37  ,cx16
04:04:53  38  ,cx18
04:04:53  39  --
04:04:53  40  ,crr4
04:04:53  41  ,crr6
04:04:53  42  ,crr8
04:04:53  43  ,crr10
04:04:53  44  ,crr12
04:04:53  45  ,crr14
04:04:53  46  ,crr16
04:04:53  47  ,crr18
04:04:53  48  --
04:04:53  49  ,hh
04:04:53  50  ,d
04:04:53  51  ,w
04:04:53  52  ,mpm
04:04:53  53  ,mph
04:04:53  54  FROM svm6122
04:04:53  55  ORDER BY ydate
04:04:53  56  /

Table created.

Elapsed: 00:00:00.36
04:04:53 SQL> 
04:04:53 SQL> -- rpt
04:04:53 SQL> 
04:04:53 SQL> SELECT
04:04:53   2  pair
04:04:53   3  ,trend
04:04:53   4  ,gatt
04:04:53   5  ,COUNT(pair)
04:04:53   6  ,AVG(g6)
04:04:53   7  FROM svm6142
04:04:53   8  GROUP BY pair,trend,gatt
04:04:53   9  ORDER BY pair,trend,gatt
04:04:53  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      6895 -.00194307
usd_chf 	-1 up	      3170 .003899842
usd_chf 	-1		35
usd_chf 	 1 nup	      6653 -.00162362
usd_chf 	 1 up	      2565 .003689727
usd_chf 	 1		37

6 rows selected.

Elapsed: 00:00:00.04
04:04:53 SQL> 
04:04:53 SQL> 
04:04:53 SQL> -- Derive NTILE based params:
04:04:53 SQL> 
04:04:53 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
04:04:53 SQL> CREATE TABLE svm6162 COMPRESS AS
04:04:53   2  SELECT
04:04:53   3  pair
04:04:53   4  ,ydate
04:04:53   5  ,prdate
04:04:53   6  ,clse
04:04:53   7  ,g6
04:04:53   8  ,gatt
04:04:53   9  ,gattn
04:04:53  10  ,trend
04:04:53  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
04:04:53  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
04:04:53  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
04:04:53  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
04:04:53  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
04:04:53  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
04:04:53  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
04:04:53  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
04:04:53  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
04:04:53  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
04:04:53  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
04:04:53  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
04:04:53  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
04:04:53  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
04:04:53  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
04:04:53  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
04:04:53  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
04:04:53  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
04:04:53  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
04:04:53  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
04:04:53  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
04:04:53  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
04:04:53  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
04:04:53  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
04:04:53  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
04:04:53  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
04:04:53  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
04:04:53  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
04:04:53  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
04:04:53  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
04:04:53  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
04:04:53  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
04:04:53  43  ,hh  att32
04:04:53  44  ,d   att33
04:04:53  45  ,w   att34
04:04:53  46  ,mpm att35
04:04:53  47  ,mph att36
04:04:53  48  ,trend att37
04:04:53  49  FROM svm6142
04:04:53  50  ORDER BY ydate
04:04:53  51  /

Table created.

Elapsed: 00:00:04.69
04:04:58 SQL> 
04:04:58 SQL> -- rpt
04:04:58 SQL> 
04:04:58 SQL> SELECT
04:04:58   2  pair
04:04:58   3  ,trend
04:04:58   4  ,gatt
04:04:58   5  ,COUNT(pair)
04:04:58   6  ,AVG(g6)
04:04:58   7  FROM svm6162
04:04:58   8  GROUP BY pair,trend,gatt
04:04:58   9  ORDER BY pair,trend,gatt
04:04:58  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      6895 -.00194307
usd_chf 	-1 up	      3170 .003899842
usd_chf 	-1		35
usd_chf 	 1 nup	      6653 -.00162362
usd_chf 	 1 up	      2565 .003689727
usd_chf 	 1		37

6 rows selected.

Elapsed: 00:00:00.03
04:04:58 SQL> 
04:04:58 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.14
04:04:58 SQL> CREATE TABLE modsrc COMPRESS AS
04:04:58   2  SELECT
04:04:58   3  pair
04:04:58   4  ,ydate
04:04:58   5  ,prdate
04:04:58   6  ,trend
04:04:58   7  ,g6
04:04:58   8  ,gatt
04:04:58   9  ,gattn
04:04:58  10  FROM svm6162
04:04:58  11  /

Table created.

Elapsed: 00:00:00.08
04:04:58 SQL> 
04:04:58 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
04:04:59 SQL> 
04:04:59 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
04:04:59 SQL> CREATE TABLE chf_ms610 COMPRESS AS
04:04:59   2  SELECT
04:04:59   3  ydate
04:04:59   4  ,trend chf_trend
04:04:59   5  ,g6    chf_g6
04:04:59   6  ,gatt  chf_gatt
04:04:59   7  ,gattn chf_gattn
04:04:59   8  FROM modsrc
04:04:59   9  /

Table created.

Elapsed: 00:00:00.08
04:04:59 SQL> 
04:04:59 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
04:04:59 SQL> 
04:04:59 SQL> -- I need a copy of the attributes:
04:04:59 SQL> 
04:04:59 SQL> 
04:04:59 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.05
04:04:59 SQL> CREATE TABLE chf_att COMPRESS AS
04:04:59   2  SELECT
04:04:59   3  ydate
04:04:59   4  ,att00 chf_att00
04:04:59   5  ,att01 chf_att01
04:04:59   6  ,att02 chf_att02
04:04:59   7  ,att03 chf_att03
04:04:59   8  ,att04 chf_att04
04:04:59   9  ,att05 chf_att05
04:04:59  10  ,att06 chf_att06
04:04:59  11  ,att07 chf_att07
04:04:59  12  ,att08 chf_att08
04:04:59  13  ,att09 chf_att09
04:04:59  14  ,att10 chf_att10
04:04:59  15  ,att11 chf_att11
04:04:59  16  ,att12 chf_att12
04:04:59  17  ,att13 chf_att13
04:04:59  18  ,att14 chf_att14
04:04:59  19  ,att15 chf_att15
04:04:59  20  ,att16 chf_att16
04:04:59  21  ,att17 chf_att17
04:04:59  22  ,att18 chf_att18
04:04:59  23  ,att19 chf_att19
04:04:59  24  ,att20 chf_att20
04:04:59  25  ,att21 chf_att21
04:04:59  26  ,att22 chf_att22
04:04:59  27  ,att23 chf_att23
04:04:59  28  ,att24 chf_att24
04:04:59  29  ,att25 chf_att25
04:04:59  30  ,att26 chf_att26
04:04:59  31  ,att27 chf_att27
04:04:59  32  ,att28 chf_att28
04:04:59  33  ,att29 chf_att29
04:04:59  34  ,att30 chf_att30
04:04:59  35  ,att31 chf_att31
04:04:59  36  ,att32 chf_att32
04:04:59  37  ,att33 chf_att33
04:04:59  38  ,att34 chf_att34
04:04:59  39  ,att35 chf_att35
04:04:59  40  ,att36 chf_att36
04:04:59  41  ,att37 chf_att37
04:04:59  42  FROM svm6162
04:04:59  43  /

Table created.

Elapsed: 00:00:00.20
04:04:59 SQL> 
04:04:59 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
04:05:00 SQL> 
04:05:00 SQL> -- rpt
04:05:00 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19355

Elapsed: 00:00:00.83
04:05:00 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19355

Elapsed: 00:00:00.01
04:05:00 SQL> 
04:05:00 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
