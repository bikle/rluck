
SQL*Plus: Release 11.2.0.1.0 Production on Thu Jan 6 10:53:15 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

10:53:15 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
10:53:15 SQL> 10:53:15 SQL> --
10:53:15 SQL> -- eur610.sql
10:53:15 SQL> --
10:53:15 SQL> 
10:53:15 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:53:15 SQL> 
10:53:15 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.12
10:53:15 SQL> 
10:53:15 SQL> -- I created di5min here:
10:53:15 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:53:15 SQL> 
10:53:15 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:53:15   2  SELECT
10:53:15   3  pair
10:53:15   4  ,ydate
10:53:15   5  ,prdate
10:53:15   6  ,rownum rnum -- acts as t in my time-series
10:53:15   7  ,clse
10:53:15   8  -- Derive a bunch of attributes from clse, the latest price:
10:53:15   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:53:15  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:53:15  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:53:15  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:53:15  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:53:15  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:53:15  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:53:15  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:53:15  17  --
10:53:15  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:53:15  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:53:15  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:53:15  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:53:15  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:53:15  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:53:15  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:53:15  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:53:15  26  --
10:53:15  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:53:15  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:53:15  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:53:15  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:53:15  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:53:15  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:53:15  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:53:15  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:53:15  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:53:15  36  FROM di5min WHERE pair LIKE'%eur%'
10:53:15  37  AND ydate > sysdate - 95
10:53:15  38  ORDER BY ydate
10:53:15  39  /

View created.

Elapsed: 00:00:00.37
10:53:15 SQL> 
10:53:15 SQL> -- rpt
10:53:15 SQL> 
10:53:15 SQL> SELECT
10:53:15   2  pair
10:53:15   3  ,COUNT(pair)
10:53:15   4  ,MIN(clse),MAX(clse)
10:53:15   5  ,MIN(avg6),MAX(avg6)
10:53:15   6  ,MIN(ydate),MAX(ydate)
10:53:15   7  FROM svm6102
10:53:15   8  GROUP BY pair
10:53:15   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19694    1.29735	   1.4273 1.29875103 1.42436233 2010-10-03 20:55:01 2011-01-06 10:50:00

Elapsed: 00:00:00.95
10:53:16 SQL> 
10:53:16 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:53:16 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.28
10:53:17 SQL> CREATE TABLE svm6122 COMPRESS AS
10:53:17   2  SELECT
10:53:17   3  pair
10:53:17   4  ,ydate
10:53:17   5  ,prdate
10:53:17   6  ,clse
10:53:17   7  -- g6 is important. I want to predict g6:
10:53:17   8  ,ld6 - clse g6
10:53:17   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:53:17  10  -- I want more attributes from the ones I derived above:
10:53:17  11  -- clse relation to moving-min
10:53:17  12  ,clse-min4  cm4
10:53:17  13  ,clse-min6  cm6
10:53:17  14  ,clse-min8  cm8
10:53:17  15  ,clse-min10 cm10
10:53:17  16  ,clse-min12 cm12
10:53:17  17  ,clse-min14 cm14
10:53:17  18  ,clse-min16 cm16
10:53:17  19  ,clse-min18 cm18
10:53:17  20  -- clse relation to moving-avg
10:53:17  21  ,clse-avg4  ca4
10:53:17  22  ,clse-avg6  ca6
10:53:17  23  ,clse-avg8  ca8
10:53:17  24  ,clse-avg10 ca10
10:53:17  25  ,clse-avg12 ca12
10:53:17  26  ,clse-avg14 ca14
10:53:17  27  ,clse-avg16 ca16
10:53:17  28  ,clse-avg18 ca18
10:53:17  29  -- clse relation to moving-max
10:53:17  30  ,clse-max4  cx4
10:53:17  31  ,clse-max6  cx6
10:53:17  32  ,clse-max8  cx8
10:53:17  33  ,clse-max10 cx10
10:53:17  34  ,clse-max12 cx12
10:53:17  35  ,clse-max14 cx14
10:53:17  36  ,clse-max16 cx16
10:53:17  37  ,clse-max18 cx18
10:53:17  38  -- Derive more attributes.
10:53:17  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:53:17  40  -- But COVAR_POP is more stable:
10:53:17  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:53:17  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:53:17  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:53:17  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:53:17  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:53:17  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:53:17  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:53:17  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:53:17  49  -- Derive date related attributes:
10:53:17  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:53:17  51  ,0+TO_CHAR(ydate,'D')d
10:53:17  52  ,0+TO_CHAR(ydate,'W')w
10:53:17  53  -- mpm stands for minutes-past-midnight:
10:53:17  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:53:17  55  -- mph stands for minutes-past-hour:
10:53:17  56  ,0+TO_CHAR(ydate,'MI')mph
10:53:17  57  FROM svm6102
10:53:17  58  ORDER BY ydate
10:53:17  59  /

Table created.

Elapsed: 00:00:02.47
10:53:19 SQL> 
10:53:19 SQL> -- rpt
10:53:19 SQL> 
10:53:19 SQL> SELECT
10:53:19   2  pair
10:53:19   3  ,COUNT(pair)
10:53:19   4  ,MIN(clse),MAX(clse)
10:53:19   5  ,MIN(ydate),MAX(ydate)
10:53:19   6  FROM svm6122
10:53:19   7  GROUP BY pair
10:53:19   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19694    1.29735	   1.4273 2010-10-03 20:55:01 2011-01-06 10:50:00

Elapsed: 00:00:00.04
10:53:19 SQL> 
10:53:19 SQL> -- Prepare for derivation of NTILE based params:
10:53:19 SQL> 
10:53:19 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.51
10:53:20 SQL> CREATE TABLE svm6142 COMPRESS AS
10:53:20   2  SELECT
10:53:20   3  pair
10:53:20   4  ,ydate
10:53:20   5  ,prdate
10:53:20   6  ,clse
10:53:20   7  ,g6
10:53:20   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:53:20   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:53:20  10  ,CASE WHEN trend IS NULL THEN 1
10:53:20  11  	    WHEN trend =0      THEN 1
10:53:20  12  	    ELSE trend END trend
10:53:20  13  ,cm4
10:53:20  14  ,cm6
10:53:20  15  ,cm8
10:53:20  16  ,cm10
10:53:20  17  ,cm12
10:53:20  18  ,cm14
10:53:20  19  ,cm16
10:53:20  20  ,cm18
10:53:20  21  --
10:53:20  22  ,ca4
10:53:20  23  ,ca6
10:53:20  24  ,ca8
10:53:20  25  ,ca10
10:53:20  26  ,ca12
10:53:20  27  ,ca14
10:53:20  28  ,ca16
10:53:20  29  ,ca18
10:53:20  30  --
10:53:20  31  ,cx4
10:53:20  32  ,cx6
10:53:20  33  ,cx8
10:53:20  34  ,cx10
10:53:20  35  ,cx12
10:53:20  36  ,cx14
10:53:20  37  ,cx16
10:53:20  38  ,cx18
10:53:20  39  --
10:53:20  40  ,crr4
10:53:20  41  ,crr6
10:53:20  42  ,crr8
10:53:20  43  ,crr10
10:53:20  44  ,crr12
10:53:20  45  ,crr14
10:53:20  46  ,crr16
10:53:20  47  ,crr18
10:53:20  48  --
10:53:20  49  ,hh
10:53:20  50  ,d
10:53:20  51  ,w
10:53:20  52  ,mpm
10:53:20  53  ,mph
10:53:20  54  FROM svm6122
10:53:20  55  ORDER BY ydate
10:53:20  56  /

Table created.

Elapsed: 00:00:00.37
10:53:20 SQL> 
10:53:20 SQL> -- rpt
10:53:20 SQL> 
10:53:20 SQL> SELECT
10:53:20   2  pair
10:53:20   3  ,trend
10:53:20   4  ,gatt
10:53:20   5  ,COUNT(pair)
10:53:20   6  ,AVG(g6)
10:53:20   7  FROM svm6142
10:53:20   8  GROUP BY pair,trend,gatt
10:53:20   9  ORDER BY pair,trend,gatt
10:53:20  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6479 -.00312143
eur_usd 	-1 up	      3570 .004447223
eur_usd 	-1		70
eur_usd 	 1 nup	      5868  -.0032483
eur_usd 	 1 up	      3705 .005071238
eur_usd 	 1		 2

6 rows selected.

Elapsed: 00:00:00.04
10:53:20 SQL> 
10:53:20 SQL> 
10:53:20 SQL> -- Derive NTILE based params:
10:53:20 SQL> 
10:53:20 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.51
10:53:21 SQL> CREATE TABLE svm6162 COMPRESS AS
10:53:21   2  SELECT
10:53:21   3  pair
10:53:21   4  ,ydate
10:53:21   5  ,prdate
10:53:21   6  ,clse
10:53:21   7  ,g6
10:53:21   8  ,gatt
10:53:21   9  ,gattn
10:53:21  10  ,trend
10:53:21  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:53:21  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:53:21  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:53:21  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:53:21  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:53:21  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:53:21  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:53:21  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:53:21  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:53:21  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:53:21  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:53:21  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:53:21  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:53:21  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:53:21  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:53:21  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:53:21  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:53:21  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:53:21  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:53:21  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:53:21  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:53:21  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:53:21  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:53:21  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:53:21  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:53:21  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:53:21  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:53:21  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:53:21  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:53:21  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:53:21  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:53:21  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:53:21  43  ,hh  att32
10:53:21  44  ,d   att33
10:53:21  45  ,w   att34
10:53:21  46  ,mpm att35
10:53:21  47  ,mph att36
10:53:21  48  ,trend att37
10:53:21  49  FROM svm6142
10:53:21  50  ORDER BY ydate
10:53:21  51  /

Table created.

Elapsed: 00:00:04.74
10:53:25 SQL> 
10:53:25 SQL> -- rpt
10:53:25 SQL> 
10:53:25 SQL> SELECT
10:53:25   2  pair
10:53:25   3  ,trend
10:53:25   4  ,gatt
10:53:25   5  ,COUNT(pair)
10:53:25   6  ,AVG(g6)
10:53:25   7  FROM svm6162
10:53:25   8  GROUP BY pair,trend,gatt
10:53:25   9  ORDER BY pair,trend,gatt
10:53:25  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6479 -.00312143
eur_usd 	-1 up	      3570 .004447223
eur_usd 	-1		70
eur_usd 	 1 nup	      5868  -.0032483
eur_usd 	 1 up	      3705 .005071238
eur_usd 	 1		 2

6 rows selected.

Elapsed: 00:00:00.03
10:53:25 SQL> 
10:53:25 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
10:53:26 SQL> CREATE TABLE modsrc COMPRESS AS
10:53:26   2  SELECT
10:53:26   3  pair
10:53:26   4  ,ydate
10:53:26   5  ,prdate
10:53:26   6  ,trend
10:53:26   7  ,g6
10:53:26   8  ,gatt
10:53:26   9  ,gattn
10:53:26  10  FROM svm6162
10:53:26  11  /

Table created.

Elapsed: 00:00:00.09
10:53:26 SQL> 
10:53:26 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
10:53:26 SQL> 
10:53:26 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
10:53:26 SQL> CREATE TABLE eur_ms610 COMPRESS AS
10:53:26   2  SELECT
10:53:26   3  ydate
10:53:26   4  ,trend eur_trend
10:53:26   5  ,g6    eur_g6
10:53:26   6  ,gatt  eur_gatt
10:53:26   7  ,gattn eur_gattn
10:53:26   8  FROM modsrc
10:53:26   9  /

Table created.

Elapsed: 00:00:00.06
10:53:26 SQL> 
10:53:26 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
10:53:26 SQL> 
10:53:26 SQL> -- I need a copy of the attributes:
10:53:26 SQL> 
10:53:26 SQL> 
10:53:26 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.14
10:53:26 SQL> CREATE TABLE eur_att COMPRESS AS
10:53:26   2  SELECT
10:53:26   3  ydate
10:53:26   4  ,att00 eur_att00
10:53:26   5  ,att01 eur_att01
10:53:26   6  ,att02 eur_att02
10:53:26   7  ,att03 eur_att03
10:53:26   8  ,att04 eur_att04
10:53:26   9  ,att05 eur_att05
10:53:26  10  ,att06 eur_att06
10:53:26  11  ,att07 eur_att07
10:53:26  12  ,att08 eur_att08
10:53:26  13  ,att09 eur_att09
10:53:26  14  ,att10 eur_att10
10:53:26  15  ,att11 eur_att11
10:53:26  16  ,att12 eur_att12
10:53:26  17  ,att13 eur_att13
10:53:26  18  ,att14 eur_att14
10:53:26  19  ,att15 eur_att15
10:53:26  20  ,att16 eur_att16
10:53:26  21  ,att17 eur_att17
10:53:26  22  ,att18 eur_att18
10:53:26  23  ,att19 eur_att19
10:53:26  24  ,att20 eur_att20
10:53:26  25  ,att21 eur_att21
10:53:26  26  ,att22 eur_att22
10:53:26  27  ,att23 eur_att23
10:53:26  28  ,att24 eur_att24
10:53:26  29  ,att25 eur_att25
10:53:26  30  ,att26 eur_att26
10:53:26  31  ,att27 eur_att27
10:53:26  32  ,att28 eur_att28
10:53:26  33  ,att29 eur_att29
10:53:26  34  ,att30 eur_att30
10:53:26  35  ,att31 eur_att31
10:53:26  36  ,att32 eur_att32
10:53:26  37  ,att33 eur_att33
10:53:26  38  ,att34 eur_att34
10:53:26  39  ,att35 eur_att35
10:53:26  40  ,att36 eur_att36
10:53:26  41  ,att37 eur_att37
10:53:26  42  FROM svm6162
10:53:26  43  /

Table created.

Elapsed: 00:00:00.17
10:53:26 SQL> 
10:53:26 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
10:53:27 SQL> 
10:53:27 SQL> -- rpt
10:53:27 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19694

Elapsed: 00:00:00.88
10:53:28 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19694

Elapsed: 00:00:00.00
10:53:28 SQL> 
10:53:28 SQL> --
10:53:28 SQL> -- aud610.sql
10:53:28 SQL> --
10:53:28 SQL> 
10:53:28 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:53:28 SQL> 
10:53:28 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.51
10:53:28 SQL> 
10:53:28 SQL> -- I created di5min here:
10:53:28 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:53:28 SQL> 
10:53:28 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:53:28   2  SELECT
10:53:28   3  pair
10:53:28   4  ,ydate
10:53:28   5  ,prdate
10:53:28   6  ,rownum rnum -- acts as t in my time-series
10:53:28   7  ,clse
10:53:28   8  -- Derive a bunch of attributes from clse, the latest price:
10:53:28   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:53:28  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:53:28  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:53:28  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:53:28  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:53:28  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:53:28  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:53:28  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:53:28  17  --
10:53:28  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:53:28  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:53:28  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:53:28  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:53:28  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:53:28  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:53:28  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:53:28  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:53:28  26  --
10:53:28  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:53:28  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:53:28  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:53:28  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:53:28  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:53:28  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:53:28  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:53:28  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:53:28  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:53:28  36  FROM di5min WHERE pair LIKE'%aud%'
10:53:28  37  AND ydate > sysdate - 95
10:53:28  38  ORDER BY ydate
10:53:28  39  /

View created.

Elapsed: 00:00:00.04
10:53:28 SQL> 
10:53:28 SQL> -- rpt
10:53:28 SQL> 
10:53:28 SQL> SELECT
10:53:28   2  pair
10:53:28   3  ,COUNT(pair)
10:53:28   4  ,MIN(clse),MAX(clse)
10:53:28   5  ,MIN(avg6),MAX(avg6)
10:53:28   6  ,MIN(ydate),MAX(ydate)
10:53:28   7  FROM svm6102
10:53:28   8  GROUP BY pair
10:53:28   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19691	.95405	  1.02495 .957141438 1.02284247 2010-10-03 20:55:01 2011-01-06 10:50:00

Elapsed: 00:00:00.87
10:53:29 SQL> 
10:53:29 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:53:29 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.29
10:53:30 SQL> CREATE TABLE svm6122 COMPRESS AS
10:53:30   2  SELECT
10:53:30   3  pair
10:53:30   4  ,ydate
10:53:30   5  ,prdate
10:53:30   6  ,clse
10:53:30   7  -- g6 is important. I want to predict g6:
10:53:30   8  ,ld6 - clse g6
10:53:30   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:53:30  10  -- I want more attributes from the ones I derived above:
10:53:30  11  -- clse relation to moving-min
10:53:30  12  ,clse-min4  cm4
10:53:30  13  ,clse-min6  cm6
10:53:30  14  ,clse-min8  cm8
10:53:30  15  ,clse-min10 cm10
10:53:30  16  ,clse-min12 cm12
10:53:30  17  ,clse-min14 cm14
10:53:30  18  ,clse-min16 cm16
10:53:30  19  ,clse-min18 cm18
10:53:30  20  -- clse relation to moving-avg
10:53:30  21  ,clse-avg4  ca4
10:53:30  22  ,clse-avg6  ca6
10:53:30  23  ,clse-avg8  ca8
10:53:30  24  ,clse-avg10 ca10
10:53:30  25  ,clse-avg12 ca12
10:53:30  26  ,clse-avg14 ca14
10:53:30  27  ,clse-avg16 ca16
10:53:30  28  ,clse-avg18 ca18
10:53:30  29  -- clse relation to moving-max
10:53:30  30  ,clse-max4  cx4
10:53:30  31  ,clse-max6  cx6
10:53:30  32  ,clse-max8  cx8
10:53:30  33  ,clse-max10 cx10
10:53:30  34  ,clse-max12 cx12
10:53:30  35  ,clse-max14 cx14
10:53:30  36  ,clse-max16 cx16
10:53:30  37  ,clse-max18 cx18
10:53:30  38  -- Derive more attributes.
10:53:30  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:53:30  40  -- But COVAR_POP is more stable:
10:53:30  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:53:30  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:53:30  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:53:30  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:53:30  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:53:30  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:53:30  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:53:30  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:53:30  49  -- Derive date related attributes:
10:53:30  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:53:30  51  ,0+TO_CHAR(ydate,'D')d
10:53:30  52  ,0+TO_CHAR(ydate,'W')w
10:53:30  53  -- mpm stands for minutes-past-midnight:
10:53:30  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:53:30  55  -- mph stands for minutes-past-hour:
10:53:30  56  ,0+TO_CHAR(ydate,'MI')mph
10:53:30  57  FROM svm6102
10:53:30  58  ORDER BY ydate
10:53:30  59  /

Table created.

Elapsed: 00:00:02.08
10:53:32 SQL> 
10:53:32 SQL> -- rpt
10:53:32 SQL> 
10:53:32 SQL> SELECT
10:53:32   2  pair
10:53:32   3  ,COUNT(pair)
10:53:32   4  ,MIN(clse),MAX(clse)
10:53:32   5  ,MIN(ydate),MAX(ydate)
10:53:32   6  FROM svm6122
10:53:32   7  GROUP BY pair
10:53:32   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19691	.95405	  1.02495 2010-10-03 20:55:01 2011-01-06 10:50:00

Elapsed: 00:00:00.04
10:53:32 SQL> 
10:53:32 SQL> -- Prepare for derivation of NTILE based params:
10:53:32 SQL> 
10:53:32 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.20
10:53:32 SQL> CREATE TABLE svm6142 COMPRESS AS
10:53:32   2  SELECT
10:53:32   3  pair
10:53:32   4  ,ydate
10:53:32   5  ,prdate
10:53:32   6  ,clse
10:53:32   7  ,g6
10:53:32   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:53:32   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:53:32  10  ,CASE WHEN trend IS NULL THEN 1
10:53:32  11  	    WHEN trend =0      THEN 1
10:53:32  12  	    ELSE trend END trend
10:53:32  13  ,cm4
10:53:32  14  ,cm6
10:53:32  15  ,cm8
10:53:32  16  ,cm10
10:53:32  17  ,cm12
10:53:32  18  ,cm14
10:53:32  19  ,cm16
10:53:32  20  ,cm18
10:53:32  21  --
10:53:32  22  ,ca4
10:53:32  23  ,ca6
10:53:32  24  ,ca8
10:53:32  25  ,ca10
10:53:32  26  ,ca12
10:53:32  27  ,ca14
10:53:32  28  ,ca16
10:53:32  29  ,ca18
10:53:32  30  --
10:53:32  31  ,cx4
10:53:32  32  ,cx6
10:53:32  33  ,cx8
10:53:32  34  ,cx10
10:53:32  35  ,cx12
10:53:32  36  ,cx14
10:53:32  37  ,cx16
10:53:32  38  ,cx18
10:53:32  39  --
10:53:32  40  ,crr4
10:53:32  41  ,crr6
10:53:32  42  ,crr8
10:53:32  43  ,crr10
10:53:32  44  ,crr12
10:53:32  45  ,crr14
10:53:32  46  ,crr16
10:53:32  47  ,crr18
10:53:32  48  --
10:53:32  49  ,hh
10:53:32  50  ,d
10:53:32  51  ,w
10:53:32  52  ,mpm
10:53:32  53  ,mph
10:53:32  54  FROM svm6122
10:53:32  55  ORDER BY ydate
10:53:32  56  /

Table created.

Elapsed: 00:00:00.38
10:53:32 SQL> 
10:53:32 SQL> -- rpt
10:53:32 SQL> 
10:53:32 SQL> SELECT
10:53:32   2  pair
10:53:32   3  ,trend
10:53:32   4  ,gatt
10:53:32   5  ,COUNT(pair)
10:53:32   6  ,AVG(g6)
10:53:32   7  FROM svm6142
10:53:32   8  GROUP BY pair,trend,gatt
10:53:32   9  ORDER BY pair,trend,gatt
10:53:32  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5647 -.00216561
aud_usd 	-1 up	      3699 .003747114
aud_usd 	-1		40
aud_usd 	 1 nup	      6680 -.00213594
aud_usd 	 1 up	      3593 .004054752
aud_usd 	 1		32

6 rows selected.

Elapsed: 00:00:00.04
10:53:32 SQL> 
10:53:32 SQL> 
10:53:32 SQL> -- Derive NTILE based params:
10:53:32 SQL> 
10:53:32 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.21
10:53:33 SQL> CREATE TABLE svm6162 COMPRESS AS
10:53:33   2  SELECT
10:53:33   3  pair
10:53:33   4  ,ydate
10:53:33   5  ,prdate
10:53:33   6  ,clse
10:53:33   7  ,g6
10:53:33   8  ,gatt
10:53:33   9  ,gattn
10:53:33  10  ,trend
10:53:33  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:53:33  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:53:33  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:53:33  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:53:33  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:53:33  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:53:33  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:53:33  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:53:33  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:53:33  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:53:33  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:53:33  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:53:33  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:53:33  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:53:33  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:53:33  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:53:33  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:53:33  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:53:33  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:53:33  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:53:33  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:53:33  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:53:33  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:53:33  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:53:33  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:53:33  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:53:33  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:53:33  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:53:33  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:53:33  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:53:33  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:53:33  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:53:33  43  ,hh  att32
10:53:33  44  ,d   att33
10:53:33  45  ,w   att34
10:53:33  46  ,mpm att35
10:53:33  47  ,mph att36
10:53:33  48  ,trend att37
10:53:33  49  FROM svm6142
10:53:33  50  ORDER BY ydate
10:53:33  51  /

Table created.

Elapsed: 00:00:04.77
10:53:37 SQL> 
10:53:37 SQL> -- rpt
10:53:37 SQL> 
10:53:37 SQL> SELECT
10:53:37   2  pair
10:53:37   3  ,trend
10:53:37   4  ,gatt
10:53:37   5  ,COUNT(pair)
10:53:37   6  ,AVG(g6)
10:53:37   7  FROM svm6162
10:53:37   8  GROUP BY pair,trend,gatt
10:53:37   9  ORDER BY pair,trend,gatt
10:53:37  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5647 -.00216561
aud_usd 	-1 up	      3699 .003747114
aud_usd 	-1		40
aud_usd 	 1 nup	      6680 -.00213594
aud_usd 	 1 up	      3593 .004054752
aud_usd 	 1		32

6 rows selected.

Elapsed: 00:00:00.03
10:53:37 SQL> 
10:53:37 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.26
10:53:38 SQL> CREATE TABLE modsrc COMPRESS AS
10:53:38   2  SELECT
10:53:38   3  pair
10:53:38   4  ,ydate
10:53:38   5  ,prdate
10:53:38   6  ,trend
10:53:38   7  ,g6
10:53:38   8  ,gatt
10:53:38   9  ,gattn
10:53:38  10  FROM svm6162
10:53:38  11  /

Table created.

Elapsed: 00:00:00.08
10:53:38 SQL> 
10:53:38 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
10:53:38 SQL> 
10:53:38 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
10:53:38 SQL> CREATE TABLE aud_ms610 COMPRESS AS
10:53:38   2  SELECT
10:53:38   3  ydate
10:53:38   4  ,trend aud_trend
10:53:38   5  ,g6    aud_g6
10:53:38   6  ,gatt  aud_gatt
10:53:38   7  ,gattn aud_gattn
10:53:38   8  FROM modsrc
10:53:38   9  /

Table created.

Elapsed: 00:00:00.09
10:53:38 SQL> 
10:53:38 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
10:53:38 SQL> 
10:53:38 SQL> -- I need a copy of the attributes:
10:53:38 SQL> 
10:53:38 SQL> 
10:53:38 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.05
10:53:38 SQL> CREATE TABLE aud_att COMPRESS AS
10:53:38   2  SELECT
10:53:38   3  ydate
10:53:38   4  ,att00 aud_att00
10:53:38   5  ,att01 aud_att01
10:53:38   6  ,att02 aud_att02
10:53:38   7  ,att03 aud_att03
10:53:38   8  ,att04 aud_att04
10:53:38   9  ,att05 aud_att05
10:53:38  10  ,att06 aud_att06
10:53:38  11  ,att07 aud_att07
10:53:38  12  ,att08 aud_att08
10:53:38  13  ,att09 aud_att09
10:53:38  14  ,att10 aud_att10
10:53:38  15  ,att11 aud_att11
10:53:38  16  ,att12 aud_att12
10:53:38  17  ,att13 aud_att13
10:53:38  18  ,att14 aud_att14
10:53:38  19  ,att15 aud_att15
10:53:38  20  ,att16 aud_att16
10:53:38  21  ,att17 aud_att17
10:53:38  22  ,att18 aud_att18
10:53:38  23  ,att19 aud_att19
10:53:38  24  ,att20 aud_att20
10:53:38  25  ,att21 aud_att21
10:53:38  26  ,att22 aud_att22
10:53:38  27  ,att23 aud_att23
10:53:38  28  ,att24 aud_att24
10:53:38  29  ,att25 aud_att25
10:53:38  30  ,att26 aud_att26
10:53:38  31  ,att27 aud_att27
10:53:38  32  ,att28 aud_att28
10:53:38  33  ,att29 aud_att29
10:53:38  34  ,att30 aud_att30
10:53:38  35  ,att31 aud_att31
10:53:38  36  ,att32 aud_att32
10:53:38  37  ,att33 aud_att33
10:53:38  38  ,att34 aud_att34
10:53:38  39  ,att35 aud_att35
10:53:38  40  ,att36 aud_att36
10:53:38  41  ,att37 aud_att37
10:53:38  42  FROM svm6162
10:53:38  43  /

Table created.

Elapsed: 00:00:00.18
10:53:38 SQL> 
10:53:38 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:01.31
10:53:40 SQL> 
10:53:40 SQL> -- rpt
10:53:40 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19691

Elapsed: 00:00:00.86
10:53:41 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19691

Elapsed: 00:00:00.00
10:53:41 SQL> 
10:53:41 SQL> --
10:53:41 SQL> -- gbp610.sql
10:53:41 SQL> --
10:53:41 SQL> 
10:53:41 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:53:41 SQL> 
10:53:41 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.50
10:53:41 SQL> 
10:53:41 SQL> -- I created di5min here:
10:53:41 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:53:41 SQL> 
10:53:41 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:53:41   2  SELECT
10:53:41   3  pair
10:53:41   4  ,ydate
10:53:41   5  ,prdate
10:53:41   6  ,rownum rnum -- acts as t in my time-series
10:53:41   7  ,clse
10:53:41   8  -- Derive a bunch of attributes from clse, the latest price:
10:53:41   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:53:41  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:53:41  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:53:41  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:53:41  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:53:41  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:53:41  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:53:41  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:53:41  17  --
10:53:41  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:53:41  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:53:41  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:53:41  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:53:41  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:53:41  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:53:41  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:53:41  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:53:41  26  --
10:53:41  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:53:41  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:53:41  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:53:41  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:53:41  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:53:41  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:53:41  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:53:41  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:53:41  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:53:41  36  FROM di5min WHERE pair LIKE'%gbp%'
10:53:41  37  AND ydate > sysdate - 95
10:53:41  38  ORDER BY ydate
10:53:41  39  /

View created.

Elapsed: 00:00:00.04
10:53:41 SQL> 
10:53:41 SQL> -- rpt
10:53:41 SQL> 
10:53:41 SQL> SELECT
10:53:41   2  pair
10:53:41   3  ,COUNT(pair)
10:53:41   4  ,MIN(clse),MAX(clse)
10:53:41   5  ,MIN(avg6),MAX(avg6)
10:53:41   6  ,MIN(ydate),MAX(ydate)
10:53:41   7  FROM svm6102
10:53:41   8  GROUP BY pair
10:53:41   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19693   1.535325	   1.6295 1.53696747 1.62716986 2010-10-03 20:55:01 2011-01-06 10:50:00

Elapsed: 00:00:00.85
10:53:42 SQL> 
10:53:42 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:53:42 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
10:53:42 SQL> CREATE TABLE svm6122 COMPRESS AS
10:53:42   2  SELECT
10:53:42   3  pair
10:53:42   4  ,ydate
10:53:42   5  ,prdate
10:53:42   6  ,clse
10:53:42   7  -- g6 is important. I want to predict g6:
10:53:42   8  ,ld6 - clse g6
10:53:42   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:53:42  10  -- I want more attributes from the ones I derived above:
10:53:42  11  -- clse relation to moving-min
10:53:42  12  ,clse-min4  cm4
10:53:42  13  ,clse-min6  cm6
10:53:42  14  ,clse-min8  cm8
10:53:42  15  ,clse-min10 cm10
10:53:42  16  ,clse-min12 cm12
10:53:42  17  ,clse-min14 cm14
10:53:42  18  ,clse-min16 cm16
10:53:42  19  ,clse-min18 cm18
10:53:42  20  -- clse relation to moving-avg
10:53:42  21  ,clse-avg4  ca4
10:53:42  22  ,clse-avg6  ca6
10:53:42  23  ,clse-avg8  ca8
10:53:42  24  ,clse-avg10 ca10
10:53:42  25  ,clse-avg12 ca12
10:53:42  26  ,clse-avg14 ca14
10:53:42  27  ,clse-avg16 ca16
10:53:42  28  ,clse-avg18 ca18
10:53:42  29  -- clse relation to moving-max
10:53:42  30  ,clse-max4  cx4
10:53:42  31  ,clse-max6  cx6
10:53:42  32  ,clse-max8  cx8
10:53:42  33  ,clse-max10 cx10
10:53:42  34  ,clse-max12 cx12
10:53:42  35  ,clse-max14 cx14
10:53:42  36  ,clse-max16 cx16
10:53:42  37  ,clse-max18 cx18
10:53:42  38  -- Derive more attributes.
10:53:42  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:53:42  40  -- But COVAR_POP is more stable:
10:53:42  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:53:42  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:53:42  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:53:42  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:53:42  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:53:42  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:53:42  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:53:42  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:53:42  49  -- Derive date related attributes:
10:53:42  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:53:42  51  ,0+TO_CHAR(ydate,'D')d
10:53:42  52  ,0+TO_CHAR(ydate,'W')w
10:53:42  53  -- mpm stands for minutes-past-midnight:
10:53:42  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:53:42  55  -- mph stands for minutes-past-hour:
10:53:42  56  ,0+TO_CHAR(ydate,'MI')mph
10:53:42  57  FROM svm6102
10:53:42  58  ORDER BY ydate
10:53:42  59  /

Table created.

Elapsed: 00:00:02.03
10:53:44 SQL> 
10:53:44 SQL> -- rpt
10:53:44 SQL> 
10:53:44 SQL> SELECT
10:53:44   2  pair
10:53:44   3  ,COUNT(pair)
10:53:44   4  ,MIN(clse),MAX(clse)
10:53:44   5  ,MIN(ydate),MAX(ydate)
10:53:44   6  FROM svm6122
10:53:44   7  GROUP BY pair
10:53:44   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19693   1.535325	   1.6295 2010-10-03 20:55:01 2011-01-06 10:50:00

Elapsed: 00:00:00.04
10:53:44 SQL> 
10:53:44 SQL> -- Prepare for derivation of NTILE based params:
10:53:44 SQL> 
10:53:44 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.32
10:53:45 SQL> CREATE TABLE svm6142 COMPRESS AS
10:53:45   2  SELECT
10:53:45   3  pair
10:53:45   4  ,ydate
10:53:45   5  ,prdate
10:53:45   6  ,clse
10:53:45   7  ,g6
10:53:45   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:53:45   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:53:45  10  ,CASE WHEN trend IS NULL THEN 1
10:53:45  11  	    WHEN trend =0      THEN 1
10:53:45  12  	    ELSE trend END trend
10:53:45  13  ,cm4
10:53:45  14  ,cm6
10:53:45  15  ,cm8
10:53:45  16  ,cm10
10:53:45  17  ,cm12
10:53:45  18  ,cm14
10:53:45  19  ,cm16
10:53:45  20  ,cm18
10:53:45  21  --
10:53:45  22  ,ca4
10:53:45  23  ,ca6
10:53:45  24  ,ca8
10:53:45  25  ,ca10
10:53:45  26  ,ca12
10:53:45  27  ,ca14
10:53:45  28  ,ca16
10:53:45  29  ,ca18
10:53:45  30  --
10:53:45  31  ,cx4
10:53:45  32  ,cx6
10:53:45  33  ,cx8
10:53:45  34  ,cx10
10:53:45  35  ,cx12
10:53:45  36  ,cx14
10:53:45  37  ,cx16
10:53:45  38  ,cx18
10:53:45  39  --
10:53:45  40  ,crr4
10:53:45  41  ,crr6
10:53:45  42  ,crr8
10:53:45  43  ,crr10
10:53:45  44  ,crr12
10:53:45  45  ,crr14
10:53:45  46  ,crr16
10:53:45  47  ,crr18
10:53:45  48  --
10:53:45  49  ,hh
10:53:45  50  ,d
10:53:45  51  ,w
10:53:45  52  ,mpm
10:53:45  53  ,mph
10:53:45  54  FROM svm6122
10:53:45  55  ORDER BY ydate
10:53:45  56  /

Table created.

Elapsed: 00:00:00.37
10:53:45 SQL> 
10:53:45 SQL> -- rpt
10:53:45 SQL> 
10:53:45 SQL> SELECT
10:53:45   2  pair
10:53:45   3  ,trend
10:53:45   4  ,gatt
10:53:45   5  ,COUNT(pair)
10:53:45   6  ,AVG(g6)
10:53:45   7  FROM svm6142
10:53:45   8  GROUP BY pair,trend,gatt
10:53:45   9  ORDER BY pair,trend,gatt
10:53:45  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6361 -.00263323
gbp_usd 	-1 up	      3570 .004345847
gbp_usd 	-1		27
gbp_usd 	 1 nup	      6236 -.00264746
gbp_usd 	 1 up	      3454 .004526115
gbp_usd 	 1		45

6 rows selected.

Elapsed: 00:00:00.04
10:53:45 SQL> 
10:53:45 SQL> 
10:53:45 SQL> -- Derive NTILE based params:
10:53:45 SQL> 
10:53:45 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.21
10:53:45 SQL> CREATE TABLE svm6162 COMPRESS AS
10:53:45   2  SELECT
10:53:45   3  pair
10:53:45   4  ,ydate
10:53:45   5  ,prdate
10:53:45   6  ,clse
10:53:45   7  ,g6
10:53:45   8  ,gatt
10:53:45   9  ,gattn
10:53:45  10  ,trend
10:53:45  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:53:45  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:53:45  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:53:45  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:53:45  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:53:45  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:53:45  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:53:45  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:53:45  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:53:45  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:53:45  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:53:45  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:53:45  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:53:45  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:53:45  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:53:45  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:53:45  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:53:45  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:53:45  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:53:45  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:53:45  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:53:45  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:53:45  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:53:45  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:53:45  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:53:45  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:53:45  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:53:45  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:53:45  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:53:45  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:53:45  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:53:45  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:53:45  43  ,hh  att32
10:53:45  44  ,d   att33
10:53:45  45  ,w   att34
10:53:45  46  ,mpm att35
10:53:45  47  ,mph att36
10:53:45  48  ,trend att37
10:53:45  49  FROM svm6142
10:53:45  50  ORDER BY ydate
10:53:45  51  /

Table created.

Elapsed: 00:00:04.83
10:53:50 SQL> 
10:53:50 SQL> -- rpt
10:53:50 SQL> 
10:53:50 SQL> SELECT
10:53:50   2  pair
10:53:50   3  ,trend
10:53:50   4  ,gatt
10:53:50   5  ,COUNT(pair)
10:53:50   6  ,AVG(g6)
10:53:50   7  FROM svm6162
10:53:50   8  GROUP BY pair,trend,gatt
10:53:50   9  ORDER BY pair,trend,gatt
10:53:50  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6361 -.00263323
gbp_usd 	-1 up	      3570 .004345847
gbp_usd 	-1		27
gbp_usd 	 1 nup	      6236 -.00264746
gbp_usd 	 1 up	      3454 .004526115
gbp_usd 	 1		45

6 rows selected.

Elapsed: 00:00:00.03
10:53:50 SQL> 
10:53:50 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.20
10:53:50 SQL> CREATE TABLE modsrc COMPRESS AS
10:53:50   2  SELECT
10:53:50   3  pair
10:53:50   4  ,ydate
10:53:50   5  ,prdate
10:53:50   6  ,trend
10:53:50   7  ,g6
10:53:50   8  ,gatt
10:53:50   9  ,gattn
10:53:50  10  FROM svm6162
10:53:50  11  /

Table created.

Elapsed: 00:00:00.09
10:53:50 SQL> 
10:53:50 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
10:53:51 SQL> 
10:53:51 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
10:53:51 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
10:53:51   2  SELECT
10:53:51   3  ydate
10:53:51   4  ,trend gbp_trend
10:53:51   5  ,g6    gbp_g6
10:53:51   6  ,gatt  gbp_gatt
10:53:51   7  ,gattn gbp_gattn
10:53:51   8  FROM modsrc
10:53:51   9  /

Table created.

Elapsed: 00:00:00.07
10:53:51 SQL> 
10:53:51 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
10:53:51 SQL> 
10:53:51 SQL> -- I need a copy of the attributes:
10:53:51 SQL> 
10:53:51 SQL> 
10:53:51 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.04
10:53:51 SQL> CREATE TABLE gbp_att COMPRESS AS
10:53:51   2  SELECT
10:53:51   3  ydate
10:53:51   4  ,att00 gbp_att00
10:53:51   5  ,att01 gbp_att01
10:53:51   6  ,att02 gbp_att02
10:53:51   7  ,att03 gbp_att03
10:53:51   8  ,att04 gbp_att04
10:53:51   9  ,att05 gbp_att05
10:53:51  10  ,att06 gbp_att06
10:53:51  11  ,att07 gbp_att07
10:53:51  12  ,att08 gbp_att08
10:53:51  13  ,att09 gbp_att09
10:53:51  14  ,att10 gbp_att10
10:53:51  15  ,att11 gbp_att11
10:53:51  16  ,att12 gbp_att12
10:53:51  17  ,att13 gbp_att13
10:53:51  18  ,att14 gbp_att14
10:53:51  19  ,att15 gbp_att15
10:53:51  20  ,att16 gbp_att16
10:53:51  21  ,att17 gbp_att17
10:53:51  22  ,att18 gbp_att18
10:53:51  23  ,att19 gbp_att19
10:53:51  24  ,att20 gbp_att20
10:53:51  25  ,att21 gbp_att21
10:53:51  26  ,att22 gbp_att22
10:53:51  27  ,att23 gbp_att23
10:53:51  28  ,att24 gbp_att24
10:53:51  29  ,att25 gbp_att25
10:53:51  30  ,att26 gbp_att26
10:53:51  31  ,att27 gbp_att27
10:53:51  32  ,att28 gbp_att28
10:53:51  33  ,att29 gbp_att29
10:53:51  34  ,att30 gbp_att30
10:53:51  35  ,att31 gbp_att31
10:53:51  36  ,att32 gbp_att32
10:53:51  37  ,att33 gbp_att33
10:53:51  38  ,att34 gbp_att34
10:53:51  39  ,att35 gbp_att35
10:53:51  40  ,att36 gbp_att36
10:53:51  41  ,att37 gbp_att37
10:53:51  42  FROM svm6162
10:53:51  43  /

Table created.

Elapsed: 00:00:00.17
10:53:51 SQL> 
10:53:51 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
10:53:52 SQL> 
10:53:52 SQL> -- rpt
10:53:52 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19693

Elapsed: 00:00:00.87
10:53:52 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19693

Elapsed: 00:00:00.00
10:53:52 SQL> 
10:53:52 SQL> --
10:53:52 SQL> -- jpy610.sql
10:53:52 SQL> --
10:53:52 SQL> 
10:53:52 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:53:52 SQL> 
10:53:52 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.44
10:53:53 SQL> 
10:53:53 SQL> -- I created di5min here:
10:53:53 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:53:53 SQL> 
10:53:53 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:53:53   2  SELECT
10:53:53   3  pair
10:53:53   4  ,ydate
10:53:53   5  ,prdate
10:53:53   6  ,rownum rnum -- acts as t in my time-series
10:53:53   7  ,clse
10:53:53   8  -- Derive a bunch of attributes from clse, the latest price:
10:53:53   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:53:53  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:53:53  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:53:53  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:53:53  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:53:53  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:53:53  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:53:53  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:53:53  17  --
10:53:53  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:53:53  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:53:53  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:53:53  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:53:53  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:53:53  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:53:53  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:53:53  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:53:53  26  --
10:53:53  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:53:53  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:53:53  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:53:53  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:53:53  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:53:53  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:53:53  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:53:53  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:53:53  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:53:53  36  FROM di5min WHERE pair LIKE'%jpy%'
10:53:53  37  AND ydate > sysdate - 95
10:53:53  38  ORDER BY ydate
10:53:53  39  /

View created.

Elapsed: 00:00:00.05
10:53:53 SQL> 
10:53:53 SQL> -- rpt
10:53:53 SQL> 
10:53:53 SQL> SELECT
10:53:53   2  pair
10:53:53   3  ,COUNT(pair)
10:53:53   4  ,MIN(clse),MAX(clse)
10:53:53   5  ,MIN(avg6),MAX(avg6)
10:53:53   6  ,MIN(ydate),MAX(ydate)
10:53:53   7  FROM svm6102
10:53:53   8  GROUP BY pair
10:53:53   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19692	 80.25	   84.485 80.3595205 84.3105479 2010-10-03 20:55:01 2011-01-06 10:50:00

Elapsed: 00:00:00.91
10:53:54 SQL> 
10:53:54 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:53:54 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.49
10:53:54 SQL> CREATE TABLE svm6122 COMPRESS AS
10:53:54   2  SELECT
10:53:54   3  pair
10:53:54   4  ,ydate
10:53:54   5  ,prdate
10:53:54   6  ,clse
10:53:54   7  -- g6 is important. I want to predict g6:
10:53:54   8  ,ld6 - clse g6
10:53:54   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:53:54  10  -- I want more attributes from the ones I derived above:
10:53:54  11  -- clse relation to moving-min
10:53:54  12  ,clse-min4  cm4
10:53:54  13  ,clse-min6  cm6
10:53:54  14  ,clse-min8  cm8
10:53:54  15  ,clse-min10 cm10
10:53:54  16  ,clse-min12 cm12
10:53:54  17  ,clse-min14 cm14
10:53:54  18  ,clse-min16 cm16
10:53:54  19  ,clse-min18 cm18
10:53:54  20  -- clse relation to moving-avg
10:53:54  21  ,clse-avg4  ca4
10:53:54  22  ,clse-avg6  ca6
10:53:54  23  ,clse-avg8  ca8
10:53:54  24  ,clse-avg10 ca10
10:53:54  25  ,clse-avg12 ca12
10:53:54  26  ,clse-avg14 ca14
10:53:54  27  ,clse-avg16 ca16
10:53:54  28  ,clse-avg18 ca18
10:53:54  29  -- clse relation to moving-max
10:53:54  30  ,clse-max4  cx4
10:53:54  31  ,clse-max6  cx6
10:53:54  32  ,clse-max8  cx8
10:53:54  33  ,clse-max10 cx10
10:53:54  34  ,clse-max12 cx12
10:53:54  35  ,clse-max14 cx14
10:53:54  36  ,clse-max16 cx16
10:53:54  37  ,clse-max18 cx18
10:53:54  38  -- Derive more attributes.
10:53:54  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:53:54  40  -- But COVAR_POP is more stable:
10:53:54  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:53:54  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:53:54  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:53:54  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:53:54  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:53:54  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:53:54  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:53:54  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:53:54  49  -- Derive date related attributes:
10:53:54  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:53:54  51  ,0+TO_CHAR(ydate,'D')d
10:53:54  52  ,0+TO_CHAR(ydate,'W')w
10:53:54  53  -- mpm stands for minutes-past-midnight:
10:53:54  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:53:54  55  -- mph stands for minutes-past-hour:
10:53:54  56  ,0+TO_CHAR(ydate,'MI')mph
10:53:54  57  FROM svm6102
10:53:54  58  ORDER BY ydate
10:53:54  59  /

Table created.

Elapsed: 00:00:02.11
10:53:56 SQL> 
10:53:56 SQL> -- rpt
10:53:56 SQL> 
10:53:56 SQL> SELECT
10:53:56   2  pair
10:53:56   3  ,COUNT(pair)
10:53:56   4  ,MIN(clse),MAX(clse)
10:53:56   5  ,MIN(ydate),MAX(ydate)
10:53:56   6  FROM svm6122
10:53:56   7  GROUP BY pair
10:53:56   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19692	 80.25	   84.485 2010-10-03 20:55:01 2011-01-06 10:50:00

Elapsed: 00:00:00.04
10:53:56 SQL> 
10:53:56 SQL> -- Prepare for derivation of NTILE based params:
10:53:56 SQL> 
10:53:56 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
10:53:57 SQL> CREATE TABLE svm6142 COMPRESS AS
10:53:57   2  SELECT
10:53:57   3  pair
10:53:57   4  ,ydate
10:53:57   5  ,prdate
10:53:57   6  ,clse
10:53:57   7  ,g6
10:53:57   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:53:57   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:53:57  10  ,CASE WHEN trend IS NULL THEN 1
10:53:57  11  	    WHEN trend =0      THEN 1
10:53:57  12  	    ELSE trend END trend
10:53:57  13  ,cm4
10:53:57  14  ,cm6
10:53:57  15  ,cm8
10:53:57  16  ,cm10
10:53:57  17  ,cm12
10:53:57  18  ,cm14
10:53:57  19  ,cm16
10:53:57  20  ,cm18
10:53:57  21  --
10:53:57  22  ,ca4
10:53:57  23  ,ca6
10:53:57  24  ,ca8
10:53:57  25  ,ca10
10:53:57  26  ,ca12
10:53:57  27  ,ca14
10:53:57  28  ,ca16
10:53:57  29  ,ca18
10:53:57  30  --
10:53:57  31  ,cx4
10:53:57  32  ,cx6
10:53:57  33  ,cx8
10:53:57  34  ,cx10
10:53:57  35  ,cx12
10:53:57  36  ,cx14
10:53:57  37  ,cx16
10:53:57  38  ,cx18
10:53:57  39  --
10:53:57  40  ,crr4
10:53:57  41  ,crr6
10:53:57  42  ,crr8
10:53:57  43  ,crr10
10:53:57  44  ,crr12
10:53:57  45  ,crr14
10:53:57  46  ,crr16
10:53:57  47  ,crr18
10:53:57  48  --
10:53:57  49  ,hh
10:53:57  50  ,d
10:53:57  51  ,w
10:53:57  52  ,mpm
10:53:57  53  ,mph
10:53:57  54  FROM svm6122
10:53:57  55  ORDER BY ydate
10:53:57  56  /

Table created.

Elapsed: 00:00:00.38
10:53:57 SQL> 
10:53:57 SQL> -- rpt
10:53:57 SQL> 
10:53:57 SQL> SELECT
10:53:57   2  pair
10:53:57   3  ,trend
10:53:57   4  ,gatt
10:53:57   5  ,COUNT(pair)
10:53:57   6  ,AVG(g6)
10:53:57   7  FROM svm6142
10:53:57   8  GROUP BY pair,trend,gatt
10:53:57   9  ORDER BY pair,trend,gatt
10:53:57  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5142 -.16652447
usd_jpy 	-1 up	      4846 .170302088
usd_jpy 	-1		67
usd_jpy 	 1 nup	      5072 -.15506748
usd_jpy 	 1 up	      4560  .17449993
usd_jpy 	 1		 5

6 rows selected.

Elapsed: 00:00:00.04
10:53:57 SQL> 
10:53:57 SQL> 
10:53:57 SQL> -- Derive NTILE based params:
10:53:57 SQL> 
10:53:57 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.23
10:53:57 SQL> CREATE TABLE svm6162 COMPRESS AS
10:53:57   2  SELECT
10:53:57   3  pair
10:53:57   4  ,ydate
10:53:57   5  ,prdate
10:53:57   6  ,clse
10:53:57   7  ,g6
10:53:57   8  ,gatt
10:53:57   9  ,gattn
10:53:57  10  ,trend
10:53:57  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:53:57  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:53:57  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:53:57  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:53:57  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:53:57  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:53:57  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:53:57  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:53:57  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:53:57  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:53:57  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:53:57  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:53:57  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:53:57  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:53:57  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:53:57  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:53:57  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:53:57  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:53:57  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:53:57  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:53:57  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:53:57  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:53:57  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:53:57  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:53:57  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:53:57  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:53:57  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:53:57  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:53:57  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:53:57  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:53:57  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:53:57  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:53:57  43  ,hh  att32
10:53:57  44  ,d   att33
10:53:57  45  ,w   att34
10:53:57  46  ,mpm att35
10:53:57  47  ,mph att36
10:53:57  48  ,trend att37
10:53:57  49  FROM svm6142
10:53:57  50  ORDER BY ydate
10:53:57  51  /

Table created.

Elapsed: 00:00:04.84
10:54:02 SQL> 
10:54:02 SQL> -- rpt
10:54:02 SQL> 
10:54:02 SQL> SELECT
10:54:02   2  pair
10:54:02   3  ,trend
10:54:02   4  ,gatt
10:54:02   5  ,COUNT(pair)
10:54:02   6  ,AVG(g6)
10:54:02   7  FROM svm6162
10:54:02   8  GROUP BY pair,trend,gatt
10:54:02   9  ORDER BY pair,trend,gatt
10:54:02  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5142 -.16652447
usd_jpy 	-1 up	      4846 .170302088
usd_jpy 	-1		67
usd_jpy 	 1 nup	      5072 -.15506748
usd_jpy 	 1 up	      4560  .17449993
usd_jpy 	 1		 5

6 rows selected.

Elapsed: 00:00:00.03
10:54:02 SQL> 
10:54:02 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.20
10:54:02 SQL> CREATE TABLE modsrc COMPRESS AS
10:54:02   2  SELECT
10:54:02   3  pair
10:54:02   4  ,ydate
10:54:02   5  ,prdate
10:54:02   6  ,trend
10:54:02   7  ,g6
10:54:02   8  ,gatt
10:54:02   9  ,gattn
10:54:02  10  FROM svm6162
10:54:02  11  /

Table created.

Elapsed: 00:00:00.08
10:54:02 SQL> 
10:54:02 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
10:54:03 SQL> 
10:54:03 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
10:54:03 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
10:54:03   2  SELECT
10:54:03   3  ydate
10:54:03   4  ,trend jpy_trend
10:54:03   5  ,g6    jpy_g6
10:54:03   6  ,gatt  jpy_gatt
10:54:03   7  ,gattn jpy_gattn
10:54:03   8  FROM modsrc
10:54:03   9  /

Table created.

Elapsed: 00:00:00.08
10:54:03 SQL> 
10:54:03 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
10:54:03 SQL> 
10:54:03 SQL> -- I need a copy of the attributes:
10:54:03 SQL> 
10:54:03 SQL> 
10:54:03 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.05
10:54:03 SQL> CREATE TABLE jpy_att COMPRESS AS
10:54:03   2  SELECT
10:54:03   3  ydate
10:54:03   4  ,att00 jpy_att00
10:54:03   5  ,att01 jpy_att01
10:54:03   6  ,att02 jpy_att02
10:54:03   7  ,att03 jpy_att03
10:54:03   8  ,att04 jpy_att04
10:54:03   9  ,att05 jpy_att05
10:54:03  10  ,att06 jpy_att06
10:54:03  11  ,att07 jpy_att07
10:54:03  12  ,att08 jpy_att08
10:54:03  13  ,att09 jpy_att09
10:54:03  14  ,att10 jpy_att10
10:54:03  15  ,att11 jpy_att11
10:54:03  16  ,att12 jpy_att12
10:54:03  17  ,att13 jpy_att13
10:54:03  18  ,att14 jpy_att14
10:54:03  19  ,att15 jpy_att15
10:54:03  20  ,att16 jpy_att16
10:54:03  21  ,att17 jpy_att17
10:54:03  22  ,att18 jpy_att18
10:54:03  23  ,att19 jpy_att19
10:54:03  24  ,att20 jpy_att20
10:54:03  25  ,att21 jpy_att21
10:54:03  26  ,att22 jpy_att22
10:54:03  27  ,att23 jpy_att23
10:54:03  28  ,att24 jpy_att24
10:54:03  29  ,att25 jpy_att25
10:54:03  30  ,att26 jpy_att26
10:54:03  31  ,att27 jpy_att27
10:54:03  32  ,att28 jpy_att28
10:54:03  33  ,att29 jpy_att29
10:54:03  34  ,att30 jpy_att30
10:54:03  35  ,att31 jpy_att31
10:54:03  36  ,att32 jpy_att32
10:54:03  37  ,att33 jpy_att33
10:54:03  38  ,att34 jpy_att34
10:54:03  39  ,att35 jpy_att35
10:54:03  40  ,att36 jpy_att36
10:54:03  41  ,att37 jpy_att37
10:54:03  42  FROM svm6162
10:54:03  43  /

Table created.

Elapsed: 00:00:00.21
10:54:03 SQL> 
10:54:03 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
10:54:04 SQL> 
10:54:04 SQL> -- rpt
10:54:04 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19692

Elapsed: 00:00:00.90
10:54:05 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19692

Elapsed: 00:00:00.00
10:54:05 SQL> 
10:54:05 SQL> --
10:54:05 SQL> -- cad610.sql
10:54:05 SQL> --
10:54:05 SQL> 
10:54:05 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:54:05 SQL> 
10:54:05 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
10:54:05 SQL> 
10:54:05 SQL> -- I created di5min here:
10:54:05 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:54:05 SQL> 
10:54:05 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:54:05   2  SELECT
10:54:05   3  pair
10:54:05   4  ,ydate
10:54:05   5  ,prdate
10:54:05   6  ,rownum rnum -- acts as t in my time-series
10:54:05   7  ,clse
10:54:05   8  -- Derive a bunch of attributes from clse, the latest price:
10:54:05   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:54:05  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:54:05  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:54:05  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:54:05  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:54:05  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:54:05  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:54:05  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:54:05  17  --
10:54:05  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:54:05  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:54:05  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:54:05  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:54:05  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:54:05  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:54:05  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:54:05  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:54:05  26  --
10:54:05  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:54:05  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:54:05  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:54:05  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:54:05  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:54:05  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:54:05  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:54:05  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:54:05  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:54:05  36  FROM di5min WHERE pair LIKE'%cad%'
10:54:05  37  AND ydate > sysdate - 95
10:54:05  38  ORDER BY ydate
10:54:05  39  /

View created.

Elapsed: 00:00:00.05
10:54:05 SQL> 
10:54:05 SQL> -- rpt
10:54:05 SQL> 
10:54:05 SQL> SELECT
10:54:05   2  pair
10:54:05   3  ,COUNT(pair)
10:54:05   4  ,MIN(clse),MAX(clse)
10:54:05   5  ,MIN(avg6),MAX(avg6)
10:54:05   6  ,MIN(ydate),MAX(ydate)
10:54:05   7  FROM svm6102
10:54:05   8  GROUP BY pair
10:54:05   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19692    .988925	   1.0355 .990603938 1.03282877 2010-10-03 20:55:01 2011-01-06 10:50:00

Elapsed: 00:00:00.84
10:54:06 SQL> 
10:54:06 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:54:06 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.29
10:54:06 SQL> CREATE TABLE svm6122 COMPRESS AS
10:54:06   2  SELECT
10:54:06   3  pair
10:54:06   4  ,ydate
10:54:06   5  ,prdate
10:54:06   6  ,clse
10:54:06   7  -- g6 is important. I want to predict g6:
10:54:06   8  ,ld6 - clse g6
10:54:06   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:54:06  10  -- I want more attributes from the ones I derived above:
10:54:06  11  -- clse relation to moving-min
10:54:06  12  ,clse-min4  cm4
10:54:06  13  ,clse-min6  cm6
10:54:06  14  ,clse-min8  cm8
10:54:06  15  ,clse-min10 cm10
10:54:06  16  ,clse-min12 cm12
10:54:06  17  ,clse-min14 cm14
10:54:06  18  ,clse-min16 cm16
10:54:06  19  ,clse-min18 cm18
10:54:06  20  -- clse relation to moving-avg
10:54:06  21  ,clse-avg4  ca4
10:54:06  22  ,clse-avg6  ca6
10:54:06  23  ,clse-avg8  ca8
10:54:06  24  ,clse-avg10 ca10
10:54:06  25  ,clse-avg12 ca12
10:54:06  26  ,clse-avg14 ca14
10:54:06  27  ,clse-avg16 ca16
10:54:06  28  ,clse-avg18 ca18
10:54:06  29  -- clse relation to moving-max
10:54:06  30  ,clse-max4  cx4
10:54:06  31  ,clse-max6  cx6
10:54:06  32  ,clse-max8  cx8
10:54:06  33  ,clse-max10 cx10
10:54:06  34  ,clse-max12 cx12
10:54:06  35  ,clse-max14 cx14
10:54:06  36  ,clse-max16 cx16
10:54:06  37  ,clse-max18 cx18
10:54:06  38  -- Derive more attributes.
10:54:06  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:54:06  40  -- But COVAR_POP is more stable:
10:54:06  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:54:06  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:54:06  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:54:06  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:54:06  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:54:06  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:54:06  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:54:06  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:54:06  49  -- Derive date related attributes:
10:54:06  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:54:06  51  ,0+TO_CHAR(ydate,'D')d
10:54:06  52  ,0+TO_CHAR(ydate,'W')w
10:54:06  53  -- mpm stands for minutes-past-midnight:
10:54:06  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:54:06  55  -- mph stands for minutes-past-hour:
10:54:06  56  ,0+TO_CHAR(ydate,'MI')mph
10:54:06  57  FROM svm6102
10:54:06  58  ORDER BY ydate
10:54:06  59  /

Table created.

Elapsed: 00:00:02.11
10:54:08 SQL> 
10:54:08 SQL> -- rpt
10:54:08 SQL> 
10:54:08 SQL> SELECT
10:54:08   2  pair
10:54:08   3  ,COUNT(pair)
10:54:08   4  ,MIN(clse),MAX(clse)
10:54:08   5  ,MIN(ydate),MAX(ydate)
10:54:08   6  FROM svm6122
10:54:08   7  GROUP BY pair
10:54:08   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19692    .988925	   1.0355 2010-10-03 20:55:01 2011-01-06 10:50:00

Elapsed: 00:00:00.04
10:54:08 SQL> 
10:54:08 SQL> -- Prepare for derivation of NTILE based params:
10:54:08 SQL> 
10:54:08 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.30
10:54:09 SQL> CREATE TABLE svm6142 COMPRESS AS
10:54:09   2  SELECT
10:54:09   3  pair
10:54:09   4  ,ydate
10:54:09   5  ,prdate
10:54:09   6  ,clse
10:54:09   7  ,g6
10:54:09   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:54:09   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:54:09  10  ,CASE WHEN trend IS NULL THEN 1
10:54:09  11  	    WHEN trend =0      THEN 1
10:54:09  12  	    ELSE trend END trend
10:54:09  13  ,cm4
10:54:09  14  ,cm6
10:54:09  15  ,cm8
10:54:09  16  ,cm10
10:54:09  17  ,cm12
10:54:09  18  ,cm14
10:54:09  19  ,cm16
10:54:09  20  ,cm18
10:54:09  21  --
10:54:09  22  ,ca4
10:54:09  23  ,ca6
10:54:09  24  ,ca8
10:54:09  25  ,ca10
10:54:09  26  ,ca12
10:54:09  27  ,ca14
10:54:09  28  ,ca16
10:54:09  29  ,ca18
10:54:09  30  --
10:54:09  31  ,cx4
10:54:09  32  ,cx6
10:54:09  33  ,cx8
10:54:09  34  ,cx10
10:54:09  35  ,cx12
10:54:09  36  ,cx14
10:54:09  37  ,cx16
10:54:09  38  ,cx18
10:54:09  39  --
10:54:09  40  ,crr4
10:54:09  41  ,crr6
10:54:09  42  ,crr8
10:54:09  43  ,crr10
10:54:09  44  ,crr12
10:54:09  45  ,crr14
10:54:09  46  ,crr16
10:54:09  47  ,crr18
10:54:09  48  --
10:54:09  49  ,hh
10:54:09  50  ,d
10:54:09  51  ,w
10:54:09  52  ,mpm
10:54:09  53  ,mph
10:54:09  54  FROM svm6122
10:54:09  55  ORDER BY ydate
10:54:09  56  /

Table created.

Elapsed: 00:00:01.01
10:54:10 SQL> 
10:54:10 SQL> -- rpt
10:54:10 SQL> 
10:54:10 SQL> SELECT
10:54:10   2  pair
10:54:10   3  ,trend
10:54:10   4  ,gatt
10:54:10   5  ,COUNT(pair)
10:54:10   6  ,AVG(g6)
10:54:10   7  FROM svm6142
10:54:10   8  GROUP BY pair,trend,gatt
10:54:10   9  ORDER BY pair,trend,gatt
10:54:10  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7272 -.00124285
usd_cad 	-1 up	      3125 .003056301
usd_cad 	-1		72
usd_cad 	 1 nup	      6834 -.00161265
usd_cad 	 1 up	      2389 .003648486

Elapsed: 00:00:00.04
10:54:10 SQL> 
10:54:10 SQL> 
10:54:10 SQL> -- Derive NTILE based params:
10:54:10 SQL> 
10:54:10 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
10:54:10 SQL> CREATE TABLE svm6162 COMPRESS AS
10:54:10   2  SELECT
10:54:10   3  pair
10:54:10   4  ,ydate
10:54:10   5  ,prdate
10:54:10   6  ,clse
10:54:10   7  ,g6
10:54:10   8  ,gatt
10:54:10   9  ,gattn
10:54:10  10  ,trend
10:54:10  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:54:10  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:54:10  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:54:10  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:54:10  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:54:10  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:54:10  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:54:10  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:54:10  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:54:10  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:54:10  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:54:10  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:54:10  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:54:10  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:54:10  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:54:10  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:54:10  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:54:10  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:54:10  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:54:10  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:54:10  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:54:10  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:54:10  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:54:10  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:54:10  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:54:10  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:54:10  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:54:10  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:54:10  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:54:10  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:54:10  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:54:10  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:54:10  43  ,hh  att32
10:54:10  44  ,d   att33
10:54:10  45  ,w   att34
10:54:10  46  ,mpm att35
10:54:10  47  ,mph att36
10:54:10  48  ,trend att37
10:54:10  49  FROM svm6142
10:54:10  50  ORDER BY ydate
10:54:10  51  /

Table created.

Elapsed: 00:00:04.82
10:54:15 SQL> 
10:54:15 SQL> -- rpt
10:54:15 SQL> 
10:54:15 SQL> SELECT
10:54:15   2  pair
10:54:15   3  ,trend
10:54:15   4  ,gatt
10:54:15   5  ,COUNT(pair)
10:54:15   6  ,AVG(g6)
10:54:15   7  FROM svm6162
10:54:15   8  GROUP BY pair,trend,gatt
10:54:15   9  ORDER BY pair,trend,gatt
10:54:15  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7272 -.00124285
usd_cad 	-1 up	      3125 .003056301
usd_cad 	-1		72
usd_cad 	 1 nup	      6834 -.00161265
usd_cad 	 1 up	      2389 .003648486

Elapsed: 00:00:00.03
10:54:15 SQL> 
10:54:15 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.09
10:54:15 SQL> CREATE TABLE modsrc COMPRESS AS
10:54:15   2  SELECT
10:54:15   3  pair
10:54:15   4  ,ydate
10:54:15   5  ,prdate
10:54:15   6  ,trend
10:54:15   7  ,g6
10:54:15   8  ,gatt
10:54:15   9  ,gattn
10:54:15  10  FROM svm6162
10:54:15  11  /

Table created.

Elapsed: 00:00:00.09
10:54:15 SQL> 
10:54:15 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.26
10:54:15 SQL> 
10:54:15 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
10:54:15 SQL> CREATE TABLE cad_ms610 COMPRESS AS
10:54:15   2  SELECT
10:54:15   3  ydate
10:54:15   4  ,trend cad_trend
10:54:15   5  ,g6    cad_g6
10:54:15   6  ,gatt  cad_gatt
10:54:15   7  ,gattn cad_gattn
10:54:15   8  FROM modsrc
10:54:15   9  /

Table created.

Elapsed: 00:00:00.06
10:54:15 SQL> 
10:54:15 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
10:54:15 SQL> 
10:54:15 SQL> -- I need a copy of the attributes:
10:54:15 SQL> 
10:54:15 SQL> 
10:54:15 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.05
10:54:15 SQL> CREATE TABLE cad_att COMPRESS AS
10:54:15   2  SELECT
10:54:15   3  ydate
10:54:15   4  ,att00 cad_att00
10:54:15   5  ,att01 cad_att01
10:54:15   6  ,att02 cad_att02
10:54:15   7  ,att03 cad_att03
10:54:15   8  ,att04 cad_att04
10:54:15   9  ,att05 cad_att05
10:54:15  10  ,att06 cad_att06
10:54:15  11  ,att07 cad_att07
10:54:15  12  ,att08 cad_att08
10:54:15  13  ,att09 cad_att09
10:54:15  14  ,att10 cad_att10
10:54:15  15  ,att11 cad_att11
10:54:15  16  ,att12 cad_att12
10:54:15  17  ,att13 cad_att13
10:54:15  18  ,att14 cad_att14
10:54:15  19  ,att15 cad_att15
10:54:15  20  ,att16 cad_att16
10:54:15  21  ,att17 cad_att17
10:54:15  22  ,att18 cad_att18
10:54:15  23  ,att19 cad_att19
10:54:15  24  ,att20 cad_att20
10:54:15  25  ,att21 cad_att21
10:54:15  26  ,att22 cad_att22
10:54:15  27  ,att23 cad_att23
10:54:15  28  ,att24 cad_att24
10:54:15  29  ,att25 cad_att25
10:54:15  30  ,att26 cad_att26
10:54:15  31  ,att27 cad_att27
10:54:15  32  ,att28 cad_att28
10:54:15  33  ,att29 cad_att29
10:54:15  34  ,att30 cad_att30
10:54:15  35  ,att31 cad_att31
10:54:15  36  ,att32 cad_att32
10:54:15  37  ,att33 cad_att33
10:54:15  38  ,att34 cad_att34
10:54:15  39  ,att35 cad_att35
10:54:15  40  ,att36 cad_att36
10:54:15  41  ,att37 cad_att37
10:54:15  42  FROM svm6162
10:54:15  43  /

Table created.

Elapsed: 00:00:00.17
10:54:16 SQL> 
10:54:16 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
10:54:16 SQL> 
10:54:16 SQL> -- rpt
10:54:16 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19692

Elapsed: 00:00:00.83
10:54:17 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19692

Elapsed: 00:00:00.01
10:54:17 SQL> 
10:54:17 SQL> --
10:54:17 SQL> -- chf610.sql
10:54:17 SQL> --
10:54:17 SQL> 
10:54:17 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:54:17 SQL> 
10:54:17 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.33
10:54:17 SQL> 
10:54:17 SQL> -- I created di5min here:
10:54:17 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:54:17 SQL> 
10:54:17 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:54:17   2  SELECT
10:54:17   3  pair
10:54:17   4  ,ydate
10:54:17   5  ,prdate
10:54:17   6  ,rownum rnum -- acts as t in my time-series
10:54:17   7  ,clse
10:54:17   8  -- Derive a bunch of attributes from clse, the latest price:
10:54:17   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:54:17  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:54:17  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:54:17  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:54:17  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:54:17  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:54:17  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:54:17  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:54:17  17  --
10:54:17  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:54:17  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:54:17  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:54:17  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:54:17  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:54:17  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:54:17  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:54:17  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:54:17  26  --
10:54:17  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:54:17  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:54:17  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:54:17  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:54:17  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:54:17  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:54:17  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:54:17  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:54:17  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:54:17  36  FROM di5min WHERE pair LIKE'%chf%'
10:54:17  37  AND ydate > sysdate - 95
10:54:17  38  ORDER BY ydate
10:54:17  39  /

View created.

Elapsed: 00:00:00.04
10:54:17 SQL> 
10:54:17 SQL> -- rpt
10:54:17 SQL> 
10:54:17 SQL> SELECT
10:54:17   2  pair
10:54:17   3  ,COUNT(pair)
10:54:17   4  ,MIN(clse),MAX(clse)
10:54:17   5  ,MIN(avg6),MAX(avg6)
10:54:17   6  ,MIN(ydate),MAX(ydate)
10:54:17   7  FROM svm6102
10:54:17   8  GROUP BY pair
10:54:17   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19695    .931675	  1.00635  .93325411 1.00498151 2010-10-03 20:55:01 2011-01-06 10:50:00

Elapsed: 00:00:00.85
10:54:18 SQL> 
10:54:18 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:54:18 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.28
10:54:18 SQL> CREATE TABLE svm6122 COMPRESS AS
10:54:18   2  SELECT
10:54:18   3  pair
10:54:18   4  ,ydate
10:54:18   5  ,prdate
10:54:18   6  ,clse
10:54:18   7  -- g6 is important. I want to predict g6:
10:54:18   8  ,ld6 - clse g6
10:54:18   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:54:18  10  -- I want more attributes from the ones I derived above:
10:54:18  11  -- clse relation to moving-min
10:54:18  12  ,clse-min4  cm4
10:54:18  13  ,clse-min6  cm6
10:54:18  14  ,clse-min8  cm8
10:54:18  15  ,clse-min10 cm10
10:54:18  16  ,clse-min12 cm12
10:54:18  17  ,clse-min14 cm14
10:54:18  18  ,clse-min16 cm16
10:54:18  19  ,clse-min18 cm18
10:54:18  20  -- clse relation to moving-avg
10:54:18  21  ,clse-avg4  ca4
10:54:18  22  ,clse-avg6  ca6
10:54:18  23  ,clse-avg8  ca8
10:54:18  24  ,clse-avg10 ca10
10:54:18  25  ,clse-avg12 ca12
10:54:18  26  ,clse-avg14 ca14
10:54:18  27  ,clse-avg16 ca16
10:54:18  28  ,clse-avg18 ca18
10:54:18  29  -- clse relation to moving-max
10:54:18  30  ,clse-max4  cx4
10:54:18  31  ,clse-max6  cx6
10:54:18  32  ,clse-max8  cx8
10:54:18  33  ,clse-max10 cx10
10:54:18  34  ,clse-max12 cx12
10:54:18  35  ,clse-max14 cx14
10:54:18  36  ,clse-max16 cx16
10:54:18  37  ,clse-max18 cx18
10:54:18  38  -- Derive more attributes.
10:54:18  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:54:18  40  -- But COVAR_POP is more stable:
10:54:18  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:54:18  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:54:18  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:54:18  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:54:18  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:54:18  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:54:18  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:54:18  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:54:18  49  -- Derive date related attributes:
10:54:18  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:54:18  51  ,0+TO_CHAR(ydate,'D')d
10:54:18  52  ,0+TO_CHAR(ydate,'W')w
10:54:18  53  -- mpm stands for minutes-past-midnight:
10:54:18  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:54:18  55  -- mph stands for minutes-past-hour:
10:54:18  56  ,0+TO_CHAR(ydate,'MI')mph
10:54:18  57  FROM svm6102
10:54:18  58  ORDER BY ydate
10:54:18  59  /

Table created.

Elapsed: 00:00:02.11
10:54:21 SQL> 
10:54:21 SQL> -- rpt
10:54:21 SQL> 
10:54:21 SQL> SELECT
10:54:21   2  pair
10:54:21   3  ,COUNT(pair)
10:54:21   4  ,MIN(clse),MAX(clse)
10:54:21   5  ,MIN(ydate),MAX(ydate)
10:54:21   6  FROM svm6122
10:54:21   7  GROUP BY pair
10:54:21   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19695    .931675	  1.00635 2010-10-03 20:55:01 2011-01-06 10:50:00

Elapsed: 00:00:00.04
10:54:21 SQL> 
10:54:21 SQL> -- Prepare for derivation of NTILE based params:
10:54:21 SQL> 
10:54:21 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.32
10:54:21 SQL> CREATE TABLE svm6142 COMPRESS AS
10:54:21   2  SELECT
10:54:21   3  pair
10:54:21   4  ,ydate
10:54:21   5  ,prdate
10:54:21   6  ,clse
10:54:21   7  ,g6
10:54:21   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:54:21   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:54:21  10  ,CASE WHEN trend IS NULL THEN 1
10:54:21  11  	    WHEN trend =0      THEN 1
10:54:21  12  	    ELSE trend END trend
10:54:21  13  ,cm4
10:54:21  14  ,cm6
10:54:21  15  ,cm8
10:54:21  16  ,cm10
10:54:21  17  ,cm12
10:54:21  18  ,cm14
10:54:21  19  ,cm16
10:54:21  20  ,cm18
10:54:21  21  --
10:54:21  22  ,ca4
10:54:21  23  ,ca6
10:54:21  24  ,ca8
10:54:21  25  ,ca10
10:54:21  26  ,ca12
10:54:21  27  ,ca14
10:54:21  28  ,ca16
10:54:21  29  ,ca18
10:54:21  30  --
10:54:21  31  ,cx4
10:54:21  32  ,cx6
10:54:21  33  ,cx8
10:54:21  34  ,cx10
10:54:21  35  ,cx12
10:54:21  36  ,cx14
10:54:21  37  ,cx16
10:54:21  38  ,cx18
10:54:21  39  --
10:54:21  40  ,crr4
10:54:21  41  ,crr6
10:54:21  42  ,crr8
10:54:21  43  ,crr10
10:54:21  44  ,crr12
10:54:21  45  ,crr14
10:54:21  46  ,crr16
10:54:21  47  ,crr18
10:54:21  48  --
10:54:21  49  ,hh
10:54:21  50  ,d
10:54:21  51  ,w
10:54:21  52  ,mpm
10:54:21  53  ,mph
10:54:21  54  FROM svm6122
10:54:21  55  ORDER BY ydate
10:54:21  56  /

Table created.

Elapsed: 00:00:00.36
10:54:21 SQL> 
10:54:21 SQL> -- rpt
10:54:21 SQL> 
10:54:21 SQL> SELECT
10:54:21   2  pair
10:54:21   3  ,trend
10:54:21   4  ,gatt
10:54:21   5  ,COUNT(pair)
10:54:21   6  ,AVG(g6)
10:54:21   7  FROM svm6142
10:54:21   8  GROUP BY pair,trend,gatt
10:54:21   9  ORDER BY pair,trend,gatt
10:54:21  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7081 -.00199088
usd_chf 	-1 up	      3061 .003824108
usd_chf 	-1		21
usd_chf 	 1 nup	      6515 -.00152881
usd_chf 	 1 up	      2966 .003946902
usd_chf 	 1		51

6 rows selected.

Elapsed: 00:00:00.04
10:54:21 SQL> 
10:54:21 SQL> 
10:54:21 SQL> -- Derive NTILE based params:
10:54:21 SQL> 
10:54:21 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.21
10:54:22 SQL> CREATE TABLE svm6162 COMPRESS AS
10:54:22   2  SELECT
10:54:22   3  pair
10:54:22   4  ,ydate
10:54:22   5  ,prdate
10:54:22   6  ,clse
10:54:22   7  ,g6
10:54:22   8  ,gatt
10:54:22   9  ,gattn
10:54:22  10  ,trend
10:54:22  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:54:22  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:54:22  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:54:22  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:54:22  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:54:22  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:54:22  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:54:22  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:54:22  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:54:22  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:54:22  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:54:22  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:54:22  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:54:22  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:54:22  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:54:22  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:54:22  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:54:22  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:54:22  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:54:22  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:54:22  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:54:22  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:54:22  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:54:22  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:54:22  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:54:22  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:54:22  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:54:22  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:54:22  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:54:22  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:54:22  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:54:22  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:54:22  43  ,hh  att32
10:54:22  44  ,d   att33
10:54:22  45  ,w   att34
10:54:22  46  ,mpm att35
10:54:22  47  ,mph att36
10:54:22  48  ,trend att37
10:54:22  49  FROM svm6142
10:54:22  50  ORDER BY ydate
10:54:22  51  /

Table created.

Elapsed: 00:00:04.84
10:54:26 SQL> 
10:54:26 SQL> -- rpt
10:54:26 SQL> 
10:54:26 SQL> SELECT
10:54:26   2  pair
10:54:26   3  ,trend
10:54:26   4  ,gatt
10:54:26   5  ,COUNT(pair)
10:54:26   6  ,AVG(g6)
10:54:26   7  FROM svm6162
10:54:26   8  GROUP BY pair,trend,gatt
10:54:26   9  ORDER BY pair,trend,gatt
10:54:26  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7081 -.00199088
usd_chf 	-1 up	      3061 .003824108
usd_chf 	-1		21
usd_chf 	 1 nup	      6515 -.00152881
usd_chf 	 1 up	      2966 .003946902
usd_chf 	 1		51

6 rows selected.

Elapsed: 00:00:00.03
10:54:26 SQL> 
10:54:26 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
10:54:27 SQL> CREATE TABLE modsrc COMPRESS AS
10:54:27   2  SELECT
10:54:27   3  pair
10:54:27   4  ,ydate
10:54:27   5  ,prdate
10:54:27   6  ,trend
10:54:27   7  ,g6
10:54:27   8  ,gatt
10:54:27   9  ,gattn
10:54:27  10  FROM svm6162
10:54:27  11  /

Table created.

Elapsed: 00:00:00.08
10:54:27 SQL> 
10:54:27 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
10:54:27 SQL> 
10:54:27 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
10:54:27 SQL> CREATE TABLE chf_ms610 COMPRESS AS
10:54:27   2  SELECT
10:54:27   3  ydate
10:54:27   4  ,trend chf_trend
10:54:27   5  ,g6    chf_g6
10:54:27   6  ,gatt  chf_gatt
10:54:27   7  ,gattn chf_gattn
10:54:27   8  FROM modsrc
10:54:27   9  /

Table created.

Elapsed: 00:00:00.10
10:54:27 SQL> 
10:54:27 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
10:54:27 SQL> 
10:54:27 SQL> -- I need a copy of the attributes:
10:54:27 SQL> 
10:54:27 SQL> 
10:54:27 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.05
10:54:27 SQL> CREATE TABLE chf_att COMPRESS AS
10:54:27   2  SELECT
10:54:27   3  ydate
10:54:27   4  ,att00 chf_att00
10:54:27   5  ,att01 chf_att01
10:54:27   6  ,att02 chf_att02
10:54:27   7  ,att03 chf_att03
10:54:27   8  ,att04 chf_att04
10:54:27   9  ,att05 chf_att05
10:54:27  10  ,att06 chf_att06
10:54:27  11  ,att07 chf_att07
10:54:27  12  ,att08 chf_att08
10:54:27  13  ,att09 chf_att09
10:54:27  14  ,att10 chf_att10
10:54:27  15  ,att11 chf_att11
10:54:27  16  ,att12 chf_att12
10:54:27  17  ,att13 chf_att13
10:54:27  18  ,att14 chf_att14
10:54:27  19  ,att15 chf_att15
10:54:27  20  ,att16 chf_att16
10:54:27  21  ,att17 chf_att17
10:54:27  22  ,att18 chf_att18
10:54:27  23  ,att19 chf_att19
10:54:27  24  ,att20 chf_att20
10:54:27  25  ,att21 chf_att21
10:54:27  26  ,att22 chf_att22
10:54:27  27  ,att23 chf_att23
10:54:27  28  ,att24 chf_att24
10:54:27  29  ,att25 chf_att25
10:54:27  30  ,att26 chf_att26
10:54:27  31  ,att27 chf_att27
10:54:27  32  ,att28 chf_att28
10:54:27  33  ,att29 chf_att29
10:54:27  34  ,att30 chf_att30
10:54:27  35  ,att31 chf_att31
10:54:27  36  ,att32 chf_att32
10:54:27  37  ,att33 chf_att33
10:54:27  38  ,att34 chf_att34
10:54:27  39  ,att35 chf_att35
10:54:27  40  ,att36 chf_att36
10:54:27  41  ,att37 chf_att37
10:54:27  42  FROM svm6162
10:54:27  43  /

Table created.

Elapsed: 00:00:00.16
10:54:27 SQL> 
10:54:27 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
10:54:28 SQL> 
10:54:28 SQL> -- rpt
10:54:28 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19695

Elapsed: 00:00:00.88
10:54:29 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19695

Elapsed: 00:00:00.00
10:54:29 SQL> 
10:54:29 SQL> --
10:54:29 SQL> -- ech610.sql
10:54:29 SQL> --
10:54:29 SQL> 
10:54:29 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:54:29 SQL> 
10:54:29 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.54
10:54:29 SQL> 
10:54:29 SQL> -- I created di5min here:
10:54:29 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:54:29 SQL> 
10:54:29 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:54:29   2  SELECT
10:54:29   3  pair
10:54:29   4  ,ydate
10:54:29   5  ,prdate
10:54:29   6  ,rownum rnum -- acts as t in my time-series
10:54:29   7  ,clse
10:54:29   8  -- Derive a bunch of attributes from clse, the latest price:
10:54:29   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:54:29  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:54:29  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:54:29  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:54:29  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:54:29  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:54:29  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:54:29  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:54:29  17  --
10:54:29  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:54:29  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:54:29  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:54:29  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:54:29  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:54:29  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:54:29  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:54:29  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:54:29  26  --
10:54:29  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:54:29  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:54:29  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:54:29  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:54:29  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:54:29  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:54:29  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:54:29  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:54:29  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:54:29  36  FROM di5min WHERE pair LIKE'%ech%'
10:54:29  37  AND ydate > sysdate - 95
10:54:29  38  ORDER BY ydate
10:54:29  39  /

View created.

Elapsed: 00:00:00.05
10:54:29 SQL> 
10:54:29 SQL> -- rpt
10:54:29 SQL> 
10:54:29 SQL> SELECT
10:54:29   2  pair
10:54:29   3  ,COUNT(pair)
10:54:29   4  ,MIN(clse),MAX(clse)
10:54:29   5  ,MIN(avg6),MAX(avg6)
10:54:29   6  ,MIN(ydate),MAX(ydate)
10:54:29   7  FROM svm6102
10:54:29   8  GROUP BY pair
10:54:29   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19693 1.24182425 1.38284305 1.24320711 1.37986485 2010-10-03 20:55:01 2011-01-06 10:50:00

Elapsed: 00:00:00.85
10:54:30 SQL> 
10:54:30 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:54:30 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.23
10:54:30 SQL> CREATE TABLE svm6122 COMPRESS AS
10:54:30   2  SELECT
10:54:30   3  pair
10:54:30   4  ,ydate
10:54:30   5  ,prdate
10:54:30   6  ,clse
10:54:30   7  -- g6 is important. I want to predict g6:
10:54:30   8  ,ld6 - clse g6
10:54:30   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:54:30  10  -- I want more attributes from the ones I derived above:
10:54:30  11  -- clse relation to moving-min
10:54:30  12  ,clse-min4  cm4
10:54:30  13  ,clse-min6  cm6
10:54:30  14  ,clse-min8  cm8
10:54:30  15  ,clse-min10 cm10
10:54:30  16  ,clse-min12 cm12
10:54:30  17  ,clse-min14 cm14
10:54:30  18  ,clse-min16 cm16
10:54:30  19  ,clse-min18 cm18
10:54:30  20  -- clse relation to moving-avg
10:54:30  21  ,clse-avg4  ca4
10:54:30  22  ,clse-avg6  ca6
10:54:30  23  ,clse-avg8  ca8
10:54:30  24  ,clse-avg10 ca10
10:54:30  25  ,clse-avg12 ca12
10:54:30  26  ,clse-avg14 ca14
10:54:30  27  ,clse-avg16 ca16
10:54:30  28  ,clse-avg18 ca18
10:54:30  29  -- clse relation to moving-max
10:54:30  30  ,clse-max4  cx4
10:54:30  31  ,clse-max6  cx6
10:54:30  32  ,clse-max8  cx8
10:54:30  33  ,clse-max10 cx10
10:54:30  34  ,clse-max12 cx12
10:54:30  35  ,clse-max14 cx14
10:54:30  36  ,clse-max16 cx16
10:54:30  37  ,clse-max18 cx18
10:54:30  38  -- Derive more attributes.
10:54:30  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:54:30  40  -- But COVAR_POP is more stable:
10:54:30  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:54:30  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:54:30  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:54:30  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:54:30  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:54:30  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:54:30  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:54:30  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:54:30  49  -- Derive date related attributes:
10:54:30  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:54:30  51  ,0+TO_CHAR(ydate,'D')d
10:54:30  52  ,0+TO_CHAR(ydate,'W')w
10:54:30  53  -- mpm stands for minutes-past-midnight:
10:54:30  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:54:30  55  -- mph stands for minutes-past-hour:
10:54:30  56  ,0+TO_CHAR(ydate,'MI')mph
10:54:30  57  FROM svm6102
10:54:30  58  ORDER BY ydate
10:54:30  59  /

Table created.

Elapsed: 00:00:02.07
10:54:32 SQL> 
10:54:32 SQL> -- rpt
10:54:32 SQL> 
10:54:32 SQL> SELECT
10:54:32   2  pair
10:54:32   3  ,COUNT(pair)
10:54:32   4  ,MIN(clse),MAX(clse)
10:54:32   5  ,MIN(ydate),MAX(ydate)
10:54:32   6  FROM svm6122
10:54:32   7  GROUP BY pair
10:54:32   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19693 1.24182425 1.38284305 2010-10-03 20:55:01 2011-01-06 10:50:00

Elapsed: 00:00:00.04
10:54:32 SQL> 
10:54:32 SQL> -- Prepare for derivation of NTILE based params:
10:54:32 SQL> 
10:54:32 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.25
10:54:33 SQL> CREATE TABLE svm6142 COMPRESS AS
10:54:33   2  SELECT
10:54:33   3  pair
10:54:33   4  ,ydate
10:54:33   5  ,prdate
10:54:33   6  ,clse
10:54:33   7  ,g6
10:54:33   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:54:33   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:54:33  10  ,CASE WHEN trend IS NULL THEN 1
10:54:33  11  	    WHEN trend =0      THEN 1
10:54:33  12  	    ELSE trend END trend
10:54:33  13  ,cm4
10:54:33  14  ,cm6
10:54:33  15  ,cm8
10:54:33  16  ,cm10
10:54:33  17  ,cm12
10:54:33  18  ,cm14
10:54:33  19  ,cm16
10:54:33  20  ,cm18
10:54:33  21  --
10:54:33  22  ,ca4
10:54:33  23  ,ca6
10:54:33  24  ,ca8
10:54:33  25  ,ca10
10:54:33  26  ,ca12
10:54:33  27  ,ca14
10:54:33  28  ,ca16
10:54:33  29  ,ca18
10:54:33  30  --
10:54:33  31  ,cx4
10:54:33  32  ,cx6
10:54:33  33  ,cx8
10:54:33  34  ,cx10
10:54:33  35  ,cx12
10:54:33  36  ,cx14
10:54:33  37  ,cx16
10:54:33  38  ,cx18
10:54:33  39  --
10:54:33  40  ,crr4
10:54:33  41  ,crr6
10:54:33  42  ,crr8
10:54:33  43  ,crr10
10:54:33  44  ,crr12
10:54:33  45  ,crr14
10:54:33  46  ,crr16
10:54:33  47  ,crr18
10:54:33  48  --
10:54:33  49  ,hh
10:54:33  50  ,d
10:54:33  51  ,w
10:54:33  52  ,mpm
10:54:33  53  ,mph
10:54:33  54  FROM svm6122
10:54:33  55  ORDER BY ydate
10:54:33  56  /

Table created.

Elapsed: 00:00:00.40
10:54:33 SQL> 
10:54:33 SQL> -- rpt
10:54:33 SQL> 
10:54:33 SQL> SELECT
10:54:33   2  pair
10:54:33   3  ,trend
10:54:33   4  ,gatt
10:54:33   5  ,COUNT(pair)
10:54:33   6  ,AVG(g6)
10:54:33   7  FROM svm6142
10:54:33   8  GROUP BY pair,trend,gatt
10:54:33   9  ORDER BY pair,trend,gatt
10:54:33  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6682  -.0022204
ech_usd 	-1 up	      3581 .003574613
ech_usd 	-1		61
ech_usd 	 1 nup	      6451 -.00237166
ech_usd 	 1 up	      2907 .004120788
ech_usd 	 1		11

6 rows selected.

Elapsed: 00:00:00.04
10:54:33 SQL> 
10:54:33 SQL> 
10:54:33 SQL> -- Derive NTILE based params:
10:54:33 SQL> 
10:54:33 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
10:54:33 SQL> CREATE TABLE svm6162 COMPRESS AS
10:54:33   2  SELECT
10:54:33   3  pair
10:54:33   4  ,ydate
10:54:33   5  ,prdate
10:54:33   6  ,clse
10:54:33   7  ,g6
10:54:33   8  ,gatt
10:54:33   9  ,gattn
10:54:33  10  ,trend
10:54:33  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:54:33  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:54:33  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:54:33  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:54:33  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:54:33  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:54:33  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:54:33  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:54:33  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:54:33  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:54:33  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:54:33  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:54:33  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:54:33  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:54:33  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:54:33  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:54:33  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:54:33  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:54:33  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:54:33  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:54:33  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:54:33  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:54:33  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:54:33  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:54:33  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:54:33  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:54:33  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:54:33  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:54:33  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:54:33  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:54:33  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:54:33  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:54:33  43  ,hh  att32
10:54:33  44  ,d   att33
10:54:33  45  ,w   att34
10:54:33  46  ,mpm att35
10:54:33  47  ,mph att36
10:54:33  48  ,trend att37
10:54:33  49  FROM svm6142
10:54:33  50  ORDER BY ydate
10:54:33  51  /

Table created.

Elapsed: 00:00:04.92
10:54:38 SQL> 
10:54:38 SQL> -- rpt
10:54:38 SQL> 
10:54:38 SQL> SELECT
10:54:38   2  pair
10:54:38   3  ,trend
10:54:38   4  ,gatt
10:54:38   5  ,COUNT(pair)
10:54:38   6  ,AVG(g6)
10:54:38   7  FROM svm6162
10:54:38   8  GROUP BY pair,trend,gatt
10:54:38   9  ORDER BY pair,trend,gatt
10:54:38  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6682  -.0022204
ech_usd 	-1 up	      3581 .003574613
ech_usd 	-1		61
ech_usd 	 1 nup	      6451 -.00237166
ech_usd 	 1 up	      2907 .004120788
ech_usd 	 1		11

6 rows selected.

Elapsed: 00:00:00.02
10:54:38 SQL> 
10:54:38 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.28
10:54:39 SQL> CREATE TABLE modsrc COMPRESS AS
10:54:39   2  SELECT
10:54:39   3  pair
10:54:39   4  ,ydate
10:54:39   5  ,prdate
10:54:39   6  ,trend
10:54:39   7  ,g6
10:54:39   8  ,gatt
10:54:39   9  ,gattn
10:54:39  10  FROM svm6162
10:54:39  11  /

Table created.

Elapsed: 00:00:00.10
10:54:39 SQL> 
10:54:39 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:01.21
10:54:40 SQL> 
10:54:40 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.10
10:54:40 SQL> CREATE TABLE ech_ms610 COMPRESS AS
10:54:40   2  SELECT
10:54:40   3  ydate
10:54:40   4  ,trend ech_trend
10:54:40   5  ,g6    ech_g6
10:54:40   6  ,gatt  ech_gatt
10:54:40   7  ,gattn ech_gattn
10:54:40   8  FROM modsrc
10:54:40   9  /

Table created.

Elapsed: 00:00:00.08
10:54:40 SQL> 
10:54:40 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
10:54:40 SQL> 
10:54:40 SQL> -- I need a copy of the attributes:
10:54:40 SQL> 
10:54:40 SQL> 
10:54:40 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.10
10:54:40 SQL> CREATE TABLE ech_att COMPRESS AS
10:54:40   2  SELECT
10:54:40   3  ydate
10:54:40   4  ,att00 ech_att00
10:54:40   5  ,att01 ech_att01
10:54:40   6  ,att02 ech_att02
10:54:40   7  ,att03 ech_att03
10:54:40   8  ,att04 ech_att04
10:54:40   9  ,att05 ech_att05
10:54:40  10  ,att06 ech_att06
10:54:40  11  ,att07 ech_att07
10:54:40  12  ,att08 ech_att08
10:54:40  13  ,att09 ech_att09
10:54:40  14  ,att10 ech_att10
10:54:40  15  ,att11 ech_att11
10:54:40  16  ,att12 ech_att12
10:54:40  17  ,att13 ech_att13
10:54:40  18  ,att14 ech_att14
10:54:40  19  ,att15 ech_att15
10:54:40  20  ,att16 ech_att16
10:54:40  21  ,att17 ech_att17
10:54:40  22  ,att18 ech_att18
10:54:40  23  ,att19 ech_att19
10:54:40  24  ,att20 ech_att20
10:54:40  25  ,att21 ech_att21
10:54:40  26  ,att22 ech_att22
10:54:40  27  ,att23 ech_att23
10:54:40  28  ,att24 ech_att24
10:54:40  29  ,att25 ech_att25
10:54:40  30  ,att26 ech_att26
10:54:40  31  ,att27 ech_att27
10:54:40  32  ,att28 ech_att28
10:54:40  33  ,att29 ech_att29
10:54:40  34  ,att30 ech_att30
10:54:40  35  ,att31 ech_att31
10:54:40  36  ,att32 ech_att32
10:54:40  37  ,att33 ech_att33
10:54:40  38  ,att34 ech_att34
10:54:40  39  ,att35 ech_att35
10:54:40  40  ,att36 ech_att36
10:54:40  41  ,att37 ech_att37
10:54:40  42  FROM svm6162
10:54:40  43  /

Table created.

Elapsed: 00:00:00.17
10:54:40 SQL> 
10:54:40 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
10:54:41 SQL> 
10:54:41 SQL> -- rpt
10:54:41 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19693

Elapsed: 00:00:00.78
10:54:42 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19693

Elapsed: 00:00:00.00
10:54:42 SQL> 
10:54:42 SQL> --
10:54:42 SQL> -- egb610.sql
10:54:42 SQL> --
10:54:42 SQL> 
10:54:42 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:54:42 SQL> 
10:54:42 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
10:54:42 SQL> 
10:54:42 SQL> -- I created di5min here:
10:54:42 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:54:42 SQL> 
10:54:42 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:54:42   2  SELECT
10:54:42   3  pair
10:54:42   4  ,ydate
10:54:42   5  ,prdate
10:54:42   6  ,rownum rnum -- acts as t in my time-series
10:54:42   7  ,clse
10:54:42   8  -- Derive a bunch of attributes from clse, the latest price:
10:54:42   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:54:42  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:54:42  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:54:42  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:54:42  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:54:42  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:54:42  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:54:42  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:54:42  17  --
10:54:42  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:54:42  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:54:42  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:54:42  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:54:42  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:54:42  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:54:42  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:54:42  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:54:42  26  --
10:54:42  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:54:42  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:54:42  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:54:42  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:54:42  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:54:42  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:54:42  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:54:42  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:54:42  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:54:42  36  FROM di5min WHERE pair LIKE'%egb%'
10:54:42  37  AND ydate > sysdate - 95
10:54:42  38  ORDER BY ydate
10:54:42  39  /

View created.

Elapsed: 00:00:00.05
10:54:42 SQL> 
10:54:42 SQL> -- rpt
10:54:42 SQL> 
10:54:42 SQL> SELECT
10:54:42   2  pair
10:54:42   3  ,COUNT(pair)
10:54:42   4  ,MIN(clse),MAX(clse)
10:54:42   5  ,MIN(avg6),MAX(avg6)
10:54:42   6  ,MIN(ydate),MAX(ydate)
10:54:42   7  FROM svm6102
10:54:42   8  GROUP BY pair
10:54:42   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19692 .833520557 .893920122 .834199029 .892400287 2010-10-03 20:55:01 2011-01-06 10:50:00

Elapsed: 00:00:00.94
10:54:43 SQL> 
10:54:43 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:54:43 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.50
10:54:44 SQL> CREATE TABLE svm6122 COMPRESS AS
10:54:44   2  SELECT
10:54:44   3  pair
10:54:44   4  ,ydate
10:54:44   5  ,prdate
10:54:44   6  ,clse
10:54:44   7  -- g6 is important. I want to predict g6:
10:54:44   8  ,ld6 - clse g6
10:54:44   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:54:44  10  -- I want more attributes from the ones I derived above:
10:54:44  11  -- clse relation to moving-min
10:54:44  12  ,clse-min4  cm4
10:54:44  13  ,clse-min6  cm6
10:54:44  14  ,clse-min8  cm8
10:54:44  15  ,clse-min10 cm10
10:54:44  16  ,clse-min12 cm12
10:54:44  17  ,clse-min14 cm14
10:54:44  18  ,clse-min16 cm16
10:54:44  19  ,clse-min18 cm18
10:54:44  20  -- clse relation to moving-avg
10:54:44  21  ,clse-avg4  ca4
10:54:44  22  ,clse-avg6  ca6
10:54:44  23  ,clse-avg8  ca8
10:54:44  24  ,clse-avg10 ca10
10:54:44  25  ,clse-avg12 ca12
10:54:44  26  ,clse-avg14 ca14
10:54:44  27  ,clse-avg16 ca16
10:54:44  28  ,clse-avg18 ca18
10:54:44  29  -- clse relation to moving-max
10:54:44  30  ,clse-max4  cx4
10:54:44  31  ,clse-max6  cx6
10:54:44  32  ,clse-max8  cx8
10:54:44  33  ,clse-max10 cx10
10:54:44  34  ,clse-max12 cx12
10:54:44  35  ,clse-max14 cx14
10:54:44  36  ,clse-max16 cx16
10:54:44  37  ,clse-max18 cx18
10:54:44  38  -- Derive more attributes.
10:54:44  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:54:44  40  -- But COVAR_POP is more stable:
10:54:44  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:54:44  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:54:44  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:54:44  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:54:44  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:54:44  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:54:44  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:54:44  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:54:44  49  -- Derive date related attributes:
10:54:44  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:54:44  51  ,0+TO_CHAR(ydate,'D')d
10:54:44  52  ,0+TO_CHAR(ydate,'W')w
10:54:44  53  -- mpm stands for minutes-past-midnight:
10:54:44  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:54:44  55  -- mph stands for minutes-past-hour:
10:54:44  56  ,0+TO_CHAR(ydate,'MI')mph
10:54:44  57  FROM svm6102
10:54:44  58  ORDER BY ydate
10:54:44  59  /

Table created.

Elapsed: 00:00:02.54
10:54:46 SQL> 
10:54:46 SQL> -- rpt
10:54:46 SQL> 
10:54:46 SQL> SELECT
10:54:46   2  pair
10:54:46   3  ,COUNT(pair)
10:54:46   4  ,MIN(clse),MAX(clse)
10:54:46   5  ,MIN(ydate),MAX(ydate)
10:54:46   6  FROM svm6122
10:54:46   7  GROUP BY pair
10:54:46   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19692 .833520557 .893920122 2010-10-03 20:55:01 2011-01-06 10:50:00

Elapsed: 00:00:00.04
10:54:46 SQL> 
10:54:46 SQL> -- Prepare for derivation of NTILE based params:
10:54:46 SQL> 
10:54:46 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.33
10:54:46 SQL> CREATE TABLE svm6142 COMPRESS AS
10:54:46   2  SELECT
10:54:46   3  pair
10:54:46   4  ,ydate
10:54:46   5  ,prdate
10:54:46   6  ,clse
10:54:46   7  ,g6
10:54:46   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:54:46   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:54:46  10  ,CASE WHEN trend IS NULL THEN 1
10:54:46  11  	    WHEN trend =0      THEN 1
10:54:46  12  	    ELSE trend END trend
10:54:46  13  ,cm4
10:54:46  14  ,cm6
10:54:46  15  ,cm8
10:54:46  16  ,cm10
10:54:46  17  ,cm12
10:54:46  18  ,cm14
10:54:46  19  ,cm16
10:54:46  20  ,cm18
10:54:46  21  --
10:54:46  22  ,ca4
10:54:46  23  ,ca6
10:54:46  24  ,ca8
10:54:46  25  ,ca10
10:54:46  26  ,ca12
10:54:46  27  ,ca14
10:54:46  28  ,ca16
10:54:46  29  ,ca18
10:54:46  30  --
10:54:46  31  ,cx4
10:54:46  32  ,cx6
10:54:46  33  ,cx8
10:54:46  34  ,cx10
10:54:46  35  ,cx12
10:54:46  36  ,cx14
10:54:46  37  ,cx16
10:54:46  38  ,cx18
10:54:46  39  --
10:54:46  40  ,crr4
10:54:46  41  ,crr6
10:54:46  42  ,crr8
10:54:46  43  ,crr10
10:54:46  44  ,crr12
10:54:46  45  ,crr14
10:54:46  46  ,crr16
10:54:46  47  ,crr18
10:54:46  48  --
10:54:46  49  ,hh
10:54:46  50  ,d
10:54:46  51  ,w
10:54:46  52  ,mpm
10:54:46  53  ,mph
10:54:46  54  FROM svm6122
10:54:46  55  ORDER BY ydate
10:54:46  56  /

Table created.

Elapsed: 00:00:00.46
10:54:47 SQL> 
10:54:47 SQL> -- rpt
10:54:47 SQL> 
10:54:47 SQL> SELECT
10:54:47   2  pair
10:54:47   3  ,trend
10:54:47   4  ,gatt
10:54:47   5  ,COUNT(pair)
10:54:47   6  ,AVG(g6)
10:54:47   7  FROM svm6142
10:54:47   8  GROUP BY pair,trend,gatt
10:54:47   9  ORDER BY pair,trend,gatt
10:54:47  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7861 -.00104552
egb_usd 	-1 up	      2636 .002928295
egb_usd 	-1		64
egb_usd 	 1 nup	      6506 -.00137638
egb_usd 	 1 up	      2617   .0029282
egb_usd 	 1		 8

6 rows selected.

Elapsed: 00:00:00.05
10:54:47 SQL> 
10:54:47 SQL> 
10:54:47 SQL> -- Derive NTILE based params:
10:54:47 SQL> 
10:54:47 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
10:54:47 SQL> CREATE TABLE svm6162 COMPRESS AS
10:54:47   2  SELECT
10:54:47   3  pair
10:54:47   4  ,ydate
10:54:47   5  ,prdate
10:54:47   6  ,clse
10:54:47   7  ,g6
10:54:47   8  ,gatt
10:54:47   9  ,gattn
10:54:47  10  ,trend
10:54:47  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:54:47  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:54:47  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:54:47  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:54:47  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:54:47  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:54:47  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:54:47  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:54:47  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:54:47  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:54:47  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:54:47  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:54:47  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:54:47  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:54:47  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:54:47  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:54:47  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:54:47  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:54:47  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:54:47  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:54:47  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:54:47  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:54:47  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:54:47  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:54:47  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:54:47  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:54:47  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:54:47  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:54:47  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:54:47  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:54:47  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:54:47  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:54:47  43  ,hh  att32
10:54:47  44  ,d   att33
10:54:47  45  ,w   att34
10:54:47  46  ,mpm att35
10:54:47  47  ,mph att36
10:54:47  48  ,trend att37
10:54:47  49  FROM svm6142
10:54:47  50  ORDER BY ydate
10:54:47  51  /

Table created.

Elapsed: 00:00:05.61
10:54:53 SQL> 
10:54:53 SQL> -- rpt
10:54:53 SQL> 
10:54:53 SQL> SELECT
10:54:53   2  pair
10:54:53   3  ,trend
10:54:53   4  ,gatt
10:54:53   5  ,COUNT(pair)
10:54:53   6  ,AVG(g6)
10:54:53   7  FROM svm6162
10:54:53   8  GROUP BY pair,trend,gatt
10:54:53   9  ORDER BY pair,trend,gatt
10:54:53  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7861 -.00104552
egb_usd 	-1 up	      2636 .002928295
egb_usd 	-1		64
egb_usd 	 1 nup	      6506 -.00137638
egb_usd 	 1 up	      2617   .0029282
egb_usd 	 1		 8

6 rows selected.

Elapsed: 00:00:00.04
10:54:53 SQL> 
10:54:53 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.21
10:54:53 SQL> CREATE TABLE modsrc COMPRESS AS
10:54:53   2  SELECT
10:54:53   3  pair
10:54:53   4  ,ydate
10:54:53   5  ,prdate
10:54:53   6  ,trend
10:54:53   7  ,g6
10:54:53   8  ,gatt
10:54:53   9  ,gattn
10:54:53  10  FROM svm6162
10:54:53  11  /

Table created.

Elapsed: 00:00:00.08
10:54:53 SQL> 
10:54:53 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
10:54:53 SQL> 
10:54:53 SQL> DROP   TABLE egb_ms610 ;

Table dropped.

Elapsed: 00:00:00.09
10:54:53 SQL> CREATE TABLE egb_ms610 COMPRESS AS
10:54:53   2  SELECT
10:54:53   3  ydate
10:54:53   4  ,trend egb_trend
10:54:53   5  ,g6    egb_g6
10:54:53   6  ,gatt  egb_gatt
10:54:53   7  ,gattn egb_gattn
10:54:53   8  FROM modsrc
10:54:53   9  /

Table created.

Elapsed: 00:00:00.06
10:54:53 SQL> 
10:54:53 SQL> ANALYZE TABLE egb_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
10:54:54 SQL> 
10:54:54 SQL> -- I need a copy of the attributes:
10:54:54 SQL> 
10:54:54 SQL> 
10:54:54 SQL> DROP   TABLE egb_att;

Table dropped.

Elapsed: 00:00:00.05
10:54:54 SQL> CREATE TABLE egb_att COMPRESS AS
10:54:54   2  SELECT
10:54:54   3  ydate
10:54:54   4  ,att00 egb_att00
10:54:54   5  ,att01 egb_att01
10:54:54   6  ,att02 egb_att02
10:54:54   7  ,att03 egb_att03
10:54:54   8  ,att04 egb_att04
10:54:54   9  ,att05 egb_att05
10:54:54  10  ,att06 egb_att06
10:54:54  11  ,att07 egb_att07
10:54:54  12  ,att08 egb_att08
10:54:54  13  ,att09 egb_att09
10:54:54  14  ,att10 egb_att10
10:54:54  15  ,att11 egb_att11
10:54:54  16  ,att12 egb_att12
10:54:54  17  ,att13 egb_att13
10:54:54  18  ,att14 egb_att14
10:54:54  19  ,att15 egb_att15
10:54:54  20  ,att16 egb_att16
10:54:54  21  ,att17 egb_att17
10:54:54  22  ,att18 egb_att18
10:54:54  23  ,att19 egb_att19
10:54:54  24  ,att20 egb_att20
10:54:54  25  ,att21 egb_att21
10:54:54  26  ,att22 egb_att22
10:54:54  27  ,att23 egb_att23
10:54:54  28  ,att24 egb_att24
10:54:54  29  ,att25 egb_att25
10:54:54  30  ,att26 egb_att26
10:54:54  31  ,att27 egb_att27
10:54:54  32  ,att28 egb_att28
10:54:54  33  ,att29 egb_att29
10:54:54  34  ,att30 egb_att30
10:54:54  35  ,att31 egb_att31
10:54:54  36  ,att32 egb_att32
10:54:54  37  ,att33 egb_att33
10:54:54  38  ,att34 egb_att34
10:54:54  39  ,att35 egb_att35
10:54:54  40  ,att36 egb_att36
10:54:54  41  ,att37 egb_att37
10:54:54  42  FROM svm6162
10:54:54  43  /

Table created.

Elapsed: 00:00:00.20
10:54:54 SQL> 
10:54:54 SQL> ANALYZE TABLE egb_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
10:54:54 SQL> 
10:54:54 SQL> -- rpt
10:54:54 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19692

Elapsed: 00:00:00.93
10:54:55 SQL> SELECT COUNT(*)FROM egb_att;

  COUNT(*)
----------
     19692

Elapsed: 00:00:00.00
10:54:55 SQL> 
10:54:55 SQL> --
10:54:55 SQL> -- ejp610.sql
10:54:55 SQL> --
10:54:55 SQL> 
10:54:55 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:54:55 SQL> 
10:54:55 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.49
10:54:56 SQL> 
10:54:56 SQL> -- I created di5min here:
10:54:56 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:54:56 SQL> 
10:54:56 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:54:56   2  SELECT
10:54:56   3  pair
10:54:56   4  ,ydate
10:54:56   5  ,prdate
10:54:56   6  ,rownum rnum -- acts as t in my time-series
10:54:56   7  ,clse
10:54:56   8  -- Derive a bunch of attributes from clse, the latest price:
10:54:56   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:54:56  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:54:56  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:54:56  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:54:56  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:54:56  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:54:56  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:54:56  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:54:56  17  --
10:54:56  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:54:56  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:54:56  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:54:56  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:54:56  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:54:56  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:54:56  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:54:56  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:54:56  26  --
10:54:56  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:54:56  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:54:56  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:54:56  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:54:56  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:54:56  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:54:56  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:54:56  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:54:56  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:54:56  36  FROM di5min WHERE pair LIKE'%ejp%'
10:54:56  37  AND ydate > sysdate - 95
10:54:56  38  ORDER BY ydate
10:54:56  39  /

View created.

Elapsed: 00:00:00.08
10:54:56 SQL> 
10:54:56 SQL> -- rpt
10:54:56 SQL> 
10:54:56 SQL> SELECT
10:54:56   2  pair
10:54:56   3  ,COUNT(pair)
10:54:56   4  ,MIN(clse),MAX(clse)
10:54:56   5  ,MIN(avg6),MAX(avg6)
10:54:56   6  ,MIN(ydate),MAX(ydate)
10:54:56   7  FROM svm6102
10:54:56   8  GROUP BY pair
10:54:56   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ejp_usd       19690 107.643765	115.63485 107.776148 115.509678 2010-10-03 20:55:01 2011-01-06 10:50:00

Elapsed: 00:00:00.88
10:54:57 SQL> 
10:54:57 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:54:57 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.31
10:54:57 SQL> CREATE TABLE svm6122 COMPRESS AS
10:54:57   2  SELECT
10:54:57   3  pair
10:54:57   4  ,ydate
10:54:57   5  ,prdate
10:54:57   6  ,clse
10:54:57   7  -- g6 is important. I want to predict g6:
10:54:57   8  ,ld6 - clse g6
10:54:57   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:54:57  10  -- I want more attributes from the ones I derived above:
10:54:57  11  -- clse relation to moving-min
10:54:57  12  ,clse-min4  cm4
10:54:57  13  ,clse-min6  cm6
10:54:57  14  ,clse-min8  cm8
10:54:57  15  ,clse-min10 cm10
10:54:57  16  ,clse-min12 cm12
10:54:57  17  ,clse-min14 cm14
10:54:57  18  ,clse-min16 cm16
10:54:57  19  ,clse-min18 cm18
10:54:57  20  -- clse relation to moving-avg
10:54:57  21  ,clse-avg4  ca4
10:54:57  22  ,clse-avg6  ca6
10:54:57  23  ,clse-avg8  ca8
10:54:57  24  ,clse-avg10 ca10
10:54:57  25  ,clse-avg12 ca12
10:54:57  26  ,clse-avg14 ca14
10:54:57  27  ,clse-avg16 ca16
10:54:57  28  ,clse-avg18 ca18
10:54:57  29  -- clse relation to moving-max
10:54:57  30  ,clse-max4  cx4
10:54:57  31  ,clse-max6  cx6
10:54:57  32  ,clse-max8  cx8
10:54:57  33  ,clse-max10 cx10
10:54:57  34  ,clse-max12 cx12
10:54:57  35  ,clse-max14 cx14
10:54:57  36  ,clse-max16 cx16
10:54:57  37  ,clse-max18 cx18
10:54:57  38  -- Derive more attributes.
10:54:57  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:54:57  40  -- But COVAR_POP is more stable:
10:54:57  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:54:57  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:54:57  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:54:57  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:54:57  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:54:57  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:54:57  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:54:57  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:54:57  49  -- Derive date related attributes:
10:54:57  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:54:57  51  ,0+TO_CHAR(ydate,'D')d
10:54:57  52  ,0+TO_CHAR(ydate,'W')w
10:54:57  53  -- mpm stands for minutes-past-midnight:
10:54:57  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:54:57  55  -- mph stands for minutes-past-hour:
10:54:57  56  ,0+TO_CHAR(ydate,'MI')mph
10:54:57  57  FROM svm6102
10:54:57  58  ORDER BY ydate
10:54:57  59  /

Table created.

Elapsed: 00:00:02.09
10:54:59 SQL> 
10:54:59 SQL> -- rpt
10:54:59 SQL> 
10:54:59 SQL> SELECT
10:54:59   2  pair
10:54:59   3  ,COUNT(pair)
10:54:59   4  ,MIN(clse),MAX(clse)
10:54:59   5  ,MIN(ydate),MAX(ydate)
10:54:59   6  FROM svm6122
10:54:59   7  GROUP BY pair
10:54:59   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ejp_usd       19690 107.643765	115.63485 2010-10-03 20:55:01 2011-01-06 10:50:00

Elapsed: 00:00:00.04
10:54:59 SQL> 
10:54:59 SQL> -- Prepare for derivation of NTILE based params:
10:54:59 SQL> 
10:54:59 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.34
10:55:00 SQL> CREATE TABLE svm6142 COMPRESS AS
10:55:00   2  SELECT
10:55:00   3  pair
10:55:00   4  ,ydate
10:55:00   5  ,prdate
10:55:00   6  ,clse
10:55:00   7  ,g6
10:55:00   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:55:00   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:55:00  10  ,CASE WHEN trend IS NULL THEN 1
10:55:00  11  	    WHEN trend =0      THEN 1
10:55:00  12  	    ELSE trend END trend
10:55:00  13  ,cm4
10:55:00  14  ,cm6
10:55:00  15  ,cm8
10:55:00  16  ,cm10
10:55:00  17  ,cm12
10:55:00  18  ,cm14
10:55:00  19  ,cm16
10:55:00  20  ,cm18
10:55:00  21  --
10:55:00  22  ,ca4
10:55:00  23  ,ca6
10:55:00  24  ,ca8
10:55:00  25  ,ca10
10:55:00  26  ,ca12
10:55:00  27  ,ca14
10:55:00  28  ,ca16
10:55:00  29  ,ca18
10:55:00  30  --
10:55:00  31  ,cx4
10:55:00  32  ,cx6
10:55:00  33  ,cx8
10:55:00  34  ,cx10
10:55:00  35  ,cx12
10:55:00  36  ,cx14
10:55:00  37  ,cx16
10:55:00  38  ,cx18
10:55:00  39  --
10:55:00  40  ,crr4
10:55:00  41  ,crr6
10:55:00  42  ,crr8
10:55:00  43  ,crr10
10:55:00  44  ,crr12
10:55:00  45  ,crr14
10:55:00  46  ,crr16
10:55:00  47  ,crr18
10:55:00  48  --
10:55:00  49  ,hh
10:55:00  50  ,d
10:55:00  51  ,w
10:55:00  52  ,mpm
10:55:00  53  ,mph
10:55:00  54  FROM svm6122
10:55:00  55  ORDER BY ydate
10:55:00  56  /

Table created.

Elapsed: 00:00:00.41
10:55:00 SQL> 
10:55:00 SQL> -- rpt
10:55:00 SQL> 
10:55:00 SQL> SELECT
10:55:00   2  pair
10:55:00   3  ,trend
10:55:00   4  ,gatt
10:55:00   5  ,COUNT(pair)
10:55:00   6  ,AVG(g6)
10:55:00   7  FROM svm6142
10:55:00   8  GROUP BY pair,trend,gatt
10:55:00   9  ORDER BY pair,trend,gatt
10:55:00  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      5043 -.32060497
ejp_usd 	-1 up	      4933 .277537754
ejp_usd 	-1		72
ejp_usd 	 1 nup	      5013 -.29959844
ejp_usd 	 1 up	      4629 .288544815

Elapsed: 00:00:00.04
10:55:00 SQL> 
10:55:00 SQL> 
10:55:00 SQL> -- Derive NTILE based params:
10:55:00 SQL> 
10:55:00 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.22
10:55:00 SQL> CREATE TABLE svm6162 COMPRESS AS
10:55:00   2  SELECT
10:55:00   3  pair
10:55:00   4  ,ydate
10:55:00   5  ,prdate
10:55:00   6  ,clse
10:55:00   7  ,g6
10:55:00   8  ,gatt
10:55:00   9  ,gattn
10:55:00  10  ,trend
10:55:00  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:55:00  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:55:00  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:55:00  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:55:00  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:55:00  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:55:00  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:55:00  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:55:00  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:55:00  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:55:00  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:55:00  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:55:00  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:55:00  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:55:00  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:55:00  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:55:00  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:55:00  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:55:00  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:55:00  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:55:00  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:55:00  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:55:00  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:55:00  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:55:00  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:55:00  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:55:00  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:55:00  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:55:00  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:55:00  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:55:00  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:55:00  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:55:00  43  ,hh  att32
10:55:00  44  ,d   att33
10:55:00  45  ,w   att34
10:55:00  46  ,mpm att35
10:55:00  47  ,mph att36
10:55:00  48  ,trend att37
10:55:00  49  FROM svm6142
10:55:00  50  ORDER BY ydate
10:55:00  51  /

Table created.

Elapsed: 00:00:04.97
10:55:05 SQL> 
10:55:05 SQL> -- rpt
10:55:05 SQL> 
10:55:05 SQL> SELECT
10:55:05   2  pair
10:55:05   3  ,trend
10:55:05   4  ,gatt
10:55:05   5  ,COUNT(pair)
10:55:05   6  ,AVG(g6)
10:55:05   7  FROM svm6162
10:55:05   8  GROUP BY pair,trend,gatt
10:55:05   9  ORDER BY pair,trend,gatt
10:55:05  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      5043 -.32060497
ejp_usd 	-1 up	      4933 .277537754
ejp_usd 	-1		72
ejp_usd 	 1 nup	      5013 -.29959844
ejp_usd 	 1 up	      4629 .288544815

Elapsed: 00:00:00.03
10:55:05 SQL> 
10:55:05 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.21
10:55:05 SQL> CREATE TABLE modsrc COMPRESS AS
10:55:05   2  SELECT
10:55:05   3  pair
10:55:05   4  ,ydate
10:55:05   5  ,prdate
10:55:05   6  ,trend
10:55:05   7  ,g6
10:55:05   8  ,gatt
10:55:05   9  ,gattn
10:55:05  10  FROM svm6162
10:55:05  11  /

Table created.

Elapsed: 00:00:00.09
10:55:06 SQL> 
10:55:06 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
10:55:06 SQL> 
10:55:06 SQL> DROP   TABLE ejp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
10:55:06 SQL> CREATE TABLE ejp_ms610 COMPRESS AS
10:55:06   2  SELECT
10:55:06   3  ydate
10:55:06   4  ,trend ejp_trend
10:55:06   5  ,g6    ejp_g6
10:55:06   6  ,gatt  ejp_gatt
10:55:06   7  ,gattn ejp_gattn
10:55:06   8  FROM modsrc
10:55:06   9  /

Table created.

Elapsed: 00:00:00.09
10:55:06 SQL> 
10:55:06 SQL> ANALYZE TABLE ejp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
10:55:06 SQL> 
10:55:06 SQL> -- I need a copy of the attributes:
10:55:06 SQL> 
10:55:06 SQL> 
10:55:06 SQL> DROP   TABLE ejp_att;

Table dropped.

Elapsed: 00:00:00.06
10:55:06 SQL> CREATE TABLE ejp_att COMPRESS AS
10:55:06   2  SELECT
10:55:06   3  ydate
10:55:06   4  ,att00 ejp_att00
10:55:06   5  ,att01 ejp_att01
10:55:06   6  ,att02 ejp_att02
10:55:06   7  ,att03 ejp_att03
10:55:06   8  ,att04 ejp_att04
10:55:06   9  ,att05 ejp_att05
10:55:06  10  ,att06 ejp_att06
10:55:06  11  ,att07 ejp_att07
10:55:06  12  ,att08 ejp_att08
10:55:06  13  ,att09 ejp_att09
10:55:06  14  ,att10 ejp_att10
10:55:06  15  ,att11 ejp_att11
10:55:06  16  ,att12 ejp_att12
10:55:06  17  ,att13 ejp_att13
10:55:06  18  ,att14 ejp_att14
10:55:06  19  ,att15 ejp_att15
10:55:06  20  ,att16 ejp_att16
10:55:06  21  ,att17 ejp_att17
10:55:06  22  ,att18 ejp_att18
10:55:06  23  ,att19 ejp_att19
10:55:06  24  ,att20 ejp_att20
10:55:06  25  ,att21 ejp_att21
10:55:06  26  ,att22 ejp_att22
10:55:06  27  ,att23 ejp_att23
10:55:06  28  ,att24 ejp_att24
10:55:06  29  ,att25 ejp_att25
10:55:06  30  ,att26 ejp_att26
10:55:06  31  ,att27 ejp_att27
10:55:06  32  ,att28 ejp_att28
10:55:06  33  ,att29 ejp_att29
10:55:06  34  ,att30 ejp_att30
10:55:06  35  ,att31 ejp_att31
10:55:06  36  ,att32 ejp_att32
10:55:06  37  ,att33 ejp_att33
10:55:06  38  ,att34 ejp_att34
10:55:06  39  ,att35 ejp_att35
10:55:06  40  ,att36 ejp_att36
10:55:06  41  ,att37 ejp_att37
10:55:06  42  FROM svm6162
10:55:06  43  /

Table created.

Elapsed: 00:00:00.19
10:55:06 SQL> 
10:55:06 SQL> ANALYZE TABLE ejp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.52
10:55:07 SQL> 
10:55:07 SQL> -- rpt
10:55:07 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19690

Elapsed: 00:00:00.83
10:55:08 SQL> SELECT COUNT(*)FROM ejp_att;

  COUNT(*)
----------
     19690

Elapsed: 00:00:00.00
10:55:08 SQL> 
10:55:08 SQL> --
10:55:08 SQL> -- ajp610.sql
10:55:08 SQL> --
10:55:08 SQL> 
10:55:08 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:55:08 SQL> 
10:55:08 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.37
10:55:08 SQL> 
10:55:08 SQL> -- I created di5min here:
10:55:08 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:55:08 SQL> 
10:55:08 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:55:08   2  SELECT
10:55:08   3  pair
10:55:08   4  ,ydate
10:55:08   5  ,prdate
10:55:08   6  ,rownum rnum -- acts as t in my time-series
10:55:08   7  ,clse
10:55:08   8  -- Derive a bunch of attributes from clse, the latest price:
10:55:08   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:55:08  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:55:08  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:55:08  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:55:08  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:55:08  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:55:08  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:55:08  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:55:08  17  --
10:55:08  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:55:08  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:55:08  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:55:08  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:55:08  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:55:08  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:55:08  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:55:08  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:55:08  26  --
10:55:08  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:55:08  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:55:08  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:55:08  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:55:08  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:55:08  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:55:08  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:55:08  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:55:08  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:55:08  36  FROM di5min WHERE pair LIKE'%ajp%'
10:55:08  37  AND ydate > sysdate - 95
10:55:08  38  ORDER BY ydate
10:55:08  39  /

View created.

Elapsed: 00:00:00.05
10:55:08 SQL> 
10:55:08 SQL> -- rpt
10:55:08 SQL> 
10:55:08 SQL> SELECT
10:55:08   2  pair
10:55:08   3  ,COUNT(pair)
10:55:08   4  ,MIN(clse),MAX(clse)
10:55:08   5  ,MIN(avg6),MAX(avg6)
10:55:08   6  ,MIN(ydate),MAX(ydate)
10:55:08   7  FROM svm6102
10:55:08   8  GROUP BY pair
10:55:08   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ajp_usd       19687  78.249976 83.6669853 78.5106193  83.546306 2010-10-03 20:55:01 2011-01-06 10:50:00

Elapsed: 00:00:00.80
10:55:09 SQL> 
10:55:09 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:55:09 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:01.30
10:55:10 SQL> CREATE TABLE svm6122 COMPRESS AS
10:55:10   2  SELECT
10:55:10   3  pair
10:55:10   4  ,ydate
10:55:10   5  ,prdate
10:55:10   6  ,clse
10:55:10   7  -- g6 is important. I want to predict g6:
10:55:10   8  ,ld6 - clse g6
10:55:10   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:55:10  10  -- I want more attributes from the ones I derived above:
10:55:10  11  -- clse relation to moving-min
10:55:10  12  ,clse-min4  cm4
10:55:10  13  ,clse-min6  cm6
10:55:10  14  ,clse-min8  cm8
10:55:10  15  ,clse-min10 cm10
10:55:10  16  ,clse-min12 cm12
10:55:10  17  ,clse-min14 cm14
10:55:10  18  ,clse-min16 cm16
10:55:10  19  ,clse-min18 cm18
10:55:10  20  -- clse relation to moving-avg
10:55:10  21  ,clse-avg4  ca4
10:55:10  22  ,clse-avg6  ca6
10:55:10  23  ,clse-avg8  ca8
10:55:10  24  ,clse-avg10 ca10
10:55:10  25  ,clse-avg12 ca12
10:55:10  26  ,clse-avg14 ca14
10:55:10  27  ,clse-avg16 ca16
10:55:10  28  ,clse-avg18 ca18
10:55:10  29  -- clse relation to moving-max
10:55:10  30  ,clse-max4  cx4
10:55:10  31  ,clse-max6  cx6
10:55:10  32  ,clse-max8  cx8
10:55:10  33  ,clse-max10 cx10
10:55:10  34  ,clse-max12 cx12
10:55:10  35  ,clse-max14 cx14
10:55:10  36  ,clse-max16 cx16
10:55:10  37  ,clse-max18 cx18
10:55:10  38  -- Derive more attributes.
10:55:10  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:55:10  40  -- But COVAR_POP is more stable:
10:55:10  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:55:10  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:55:10  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:55:10  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:55:10  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:55:10  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:55:10  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:55:10  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:55:10  49  -- Derive date related attributes:
10:55:10  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:55:10  51  ,0+TO_CHAR(ydate,'D')d
10:55:10  52  ,0+TO_CHAR(ydate,'W')w
10:55:10  53  -- mpm stands for minutes-past-midnight:
10:55:10  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:55:10  55  -- mph stands for minutes-past-hour:
10:55:10  56  ,0+TO_CHAR(ydate,'MI')mph
10:55:10  57  FROM svm6102
10:55:10  58  ORDER BY ydate
10:55:10  59  /

Table created.

Elapsed: 00:00:02.02
10:55:12 SQL> 
10:55:12 SQL> -- rpt
10:55:12 SQL> 
10:55:12 SQL> SELECT
10:55:12   2  pair
10:55:12   3  ,COUNT(pair)
10:55:12   4  ,MIN(clse),MAX(clse)
10:55:12   5  ,MIN(ydate),MAX(ydate)
10:55:12   6  FROM svm6122
10:55:12   7  GROUP BY pair
10:55:12   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ajp_usd       19687  78.249976 83.6669853 2010-10-03 20:55:01 2011-01-06 10:50:00

Elapsed: 00:00:00.04
10:55:12 SQL> 
10:55:12 SQL> -- Prepare for derivation of NTILE based params:
10:55:12 SQL> 
10:55:12 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.20
10:55:12 SQL> CREATE TABLE svm6142 COMPRESS AS
10:55:12   2  SELECT
10:55:12   3  pair
10:55:12   4  ,ydate
10:55:12   5  ,prdate
10:55:12   6  ,clse
10:55:12   7  ,g6
10:55:12   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:55:12   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:55:12  10  ,CASE WHEN trend IS NULL THEN 1
10:55:12  11  	    WHEN trend =0      THEN 1
10:55:12  12  	    ELSE trend END trend
10:55:12  13  ,cm4
10:55:12  14  ,cm6
10:55:12  15  ,cm8
10:55:12  16  ,cm10
10:55:12  17  ,cm12
10:55:12  18  ,cm14
10:55:12  19  ,cm16
10:55:12  20  ,cm18
10:55:12  21  --
10:55:12  22  ,ca4
10:55:12  23  ,ca6
10:55:12  24  ,ca8
10:55:12  25  ,ca10
10:55:12  26  ,ca12
10:55:12  27  ,ca14
10:55:12  28  ,ca16
10:55:12  29  ,ca18
10:55:12  30  --
10:55:12  31  ,cx4
10:55:12  32  ,cx6
10:55:12  33  ,cx8
10:55:12  34  ,cx10
10:55:12  35  ,cx12
10:55:12  36  ,cx14
10:55:12  37  ,cx16
10:55:12  38  ,cx18
10:55:12  39  --
10:55:12  40  ,crr4
10:55:12  41  ,crr6
10:55:12  42  ,crr8
10:55:12  43  ,crr10
10:55:12  44  ,crr12
10:55:12  45  ,crr14
10:55:12  46  ,crr16
10:55:12  47  ,crr18
10:55:12  48  --
10:55:12  49  ,hh
10:55:12  50  ,d
10:55:12  51  ,w
10:55:12  52  ,mpm
10:55:12  53  ,mph
10:55:12  54  FROM svm6122
10:55:12  55  ORDER BY ydate
10:55:12  56  /

Table created.

Elapsed: 00:00:00.41
10:55:13 SQL> 
10:55:13 SQL> -- rpt
10:55:13 SQL> 
10:55:13 SQL> SELECT
10:55:13   2  pair
10:55:13   3  ,trend
10:55:13   4  ,gatt
10:55:13   5  ,COUNT(pair)
10:55:13   6  ,AVG(g6)
10:55:13   7  FROM svm6142
10:55:13   8  GROUP BY pair,trend,gatt
10:55:13   9  ORDER BY pair,trend,gatt
10:55:13  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4302  -.2260453
ajp_usd 	-1 up	      5195 .224579656
ajp_usd 	-1		63
ajp_usd 	 1 nup	      5299 -.20357056
ajp_usd 	 1 up	      4819 .212480761
ajp_usd 	 1		 9

6 rows selected.

Elapsed: 00:00:00.04
10:55:13 SQL> 
10:55:13 SQL> 
10:55:13 SQL> -- Derive NTILE based params:
10:55:13 SQL> 
10:55:13 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
10:55:13 SQL> CREATE TABLE svm6162 COMPRESS AS
10:55:13   2  SELECT
10:55:13   3  pair
10:55:13   4  ,ydate
10:55:13   5  ,prdate
10:55:13   6  ,clse
10:55:13   7  ,g6
10:55:13   8  ,gatt
10:55:13   9  ,gattn
10:55:13  10  ,trend
10:55:13  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:55:13  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:55:13  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:55:13  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:55:13  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:55:13  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:55:13  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:55:13  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:55:13  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:55:13  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:55:13  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:55:13  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:55:13  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:55:13  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:55:13  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:55:13  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:55:13  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:55:13  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:55:13  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:55:13  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:55:13  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:55:13  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:55:13  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:55:13  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:55:13  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:55:13  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:55:13  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:55:13  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:55:13  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:55:13  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:55:13  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:55:13  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:55:13  43  ,hh  att32
10:55:13  44  ,d   att33
10:55:13  45  ,w   att34
10:55:13  46  ,mpm att35
10:55:13  47  ,mph att36
10:55:13  48  ,trend att37
10:55:13  49  FROM svm6142
10:55:13  50  ORDER BY ydate
10:55:13  51  /

Table created.

Elapsed: 00:00:05.08
10:55:18 SQL> 
10:55:18 SQL> -- rpt
10:55:18 SQL> 
10:55:18 SQL> SELECT
10:55:18   2  pair
10:55:18   3  ,trend
10:55:18   4  ,gatt
10:55:18   5  ,COUNT(pair)
10:55:18   6  ,AVG(g6)
10:55:18   7  FROM svm6162
10:55:18   8  GROUP BY pair,trend,gatt
10:55:18   9  ORDER BY pair,trend,gatt
10:55:18  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4302  -.2260453
ajp_usd 	-1 up	      5195 .224579656
ajp_usd 	-1		63
ajp_usd 	 1 nup	      5299 -.20357056
ajp_usd 	 1 up	      4819 .212480761
ajp_usd 	 1		 9

6 rows selected.

Elapsed: 00:00:00.03
10:55:18 SQL> 
10:55:18 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.21
10:55:18 SQL> CREATE TABLE modsrc COMPRESS AS
10:55:18   2  SELECT
10:55:18   3  pair
10:55:18   4  ,ydate
10:55:18   5  ,prdate
10:55:18   6  ,trend
10:55:18   7  ,g6
10:55:18   8  ,gatt
10:55:18   9  ,gattn
10:55:18  10  FROM svm6162
10:55:18  11  /

Table created.

Elapsed: 00:00:00.09
10:55:18 SQL> 
10:55:18 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
10:55:19 SQL> 
10:55:19 SQL> DROP   TABLE ajp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
10:55:19 SQL> CREATE TABLE ajp_ms610 COMPRESS AS
10:55:19   2  SELECT
10:55:19   3  ydate
10:55:19   4  ,trend ajp_trend
10:55:19   5  ,g6    ajp_g6
10:55:19   6  ,gatt  ajp_gatt
10:55:19   7  ,gattn ajp_gattn
10:55:19   8  FROM modsrc
10:55:19   9  /

Table created.

Elapsed: 00:00:00.06
10:55:19 SQL> 
10:55:19 SQL> ANALYZE TABLE ajp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
10:55:19 SQL> 
10:55:19 SQL> -- I need a copy of the attributes:
10:55:19 SQL> 
10:55:19 SQL> 
10:55:19 SQL> DROP   TABLE ajp_att;

Table dropped.

Elapsed: 00:00:00.06
10:55:19 SQL> CREATE TABLE ajp_att COMPRESS AS
10:55:19   2  SELECT
10:55:19   3  ydate
10:55:19   4  ,att00 ajp_att00
10:55:19   5  ,att01 ajp_att01
10:55:19   6  ,att02 ajp_att02
10:55:19   7  ,att03 ajp_att03
10:55:19   8  ,att04 ajp_att04
10:55:19   9  ,att05 ajp_att05
10:55:19  10  ,att06 ajp_att06
10:55:19  11  ,att07 ajp_att07
10:55:19  12  ,att08 ajp_att08
10:55:19  13  ,att09 ajp_att09
10:55:19  14  ,att10 ajp_att10
10:55:19  15  ,att11 ajp_att11
10:55:19  16  ,att12 ajp_att12
10:55:19  17  ,att13 ajp_att13
10:55:19  18  ,att14 ajp_att14
10:55:19  19  ,att15 ajp_att15
10:55:19  20  ,att16 ajp_att16
10:55:19  21  ,att17 ajp_att17
10:55:19  22  ,att18 ajp_att18
10:55:19  23  ,att19 ajp_att19
10:55:19  24  ,att20 ajp_att20
10:55:19  25  ,att21 ajp_att21
10:55:19  26  ,att22 ajp_att22
10:55:19  27  ,att23 ajp_att23
10:55:19  28  ,att24 ajp_att24
10:55:19  29  ,att25 ajp_att25
10:55:19  30  ,att26 ajp_att26
10:55:19  31  ,att27 ajp_att27
10:55:19  32  ,att28 ajp_att28
10:55:19  33  ,att29 ajp_att29
10:55:19  34  ,att30 ajp_att30
10:55:19  35  ,att31 ajp_att31
10:55:19  36  ,att32 ajp_att32
10:55:19  37  ,att33 ajp_att33
10:55:19  38  ,att34 ajp_att34
10:55:19  39  ,att35 ajp_att35
10:55:19  40  ,att36 ajp_att36
10:55:19  41  ,att37 ajp_att37
10:55:19  42  FROM svm6162
10:55:19  43  /

Table created.

Elapsed: 00:00:00.17
10:55:19 SQL> 
10:55:19 SQL> ANALYZE TABLE ajp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
10:55:20 SQL> 
10:55:20 SQL> -- rpt
10:55:20 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19687

Elapsed: 00:00:00.78
10:55:20 SQL> SELECT COUNT(*)FROM ajp_att;

  COUNT(*)
----------
     19687

Elapsed: 00:00:00.00
10:55:20 SQL> 
10:55:20 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
