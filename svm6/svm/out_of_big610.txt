
SQL*Plus: Release 11.2.0.1.0 Production on Thu Jan 6 21:43:00 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

21:43:00 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
21:43:00 SQL> 21:43:00 SQL> --
21:43:00 SQL> -- eur610.sql
21:43:00 SQL> --
21:43:00 SQL> 
21:43:00 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:43:00 SQL> 
21:43:00 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.01
21:43:00 SQL> 
21:43:00 SQL> -- I created di5min here:
21:43:00 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:43:00 SQL> 
21:43:00 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:43:00   2  SELECT
21:43:00   3  pair
21:43:00   4  ,ydate
21:43:00   5  ,prdate
21:43:00   6  ,rownum rnum -- acts as t in my time-series
21:43:00   7  ,clse
21:43:00   8  -- Derive a bunch of attributes from clse, the latest price:
21:43:00   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:43:00  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:43:00  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:43:00  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:43:00  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:43:00  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:43:00  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:43:00  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:43:00  17  --
21:43:00  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:43:00  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:43:00  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:43:00  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:43:00  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:43:00  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:43:00  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:43:00  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:43:00  26  --
21:43:00  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:43:00  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:43:00  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:43:00  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:43:00  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:43:00  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:43:00  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:43:00  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:43:00  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:43:00  36  FROM di5min WHERE pair LIKE'%eur%'
21:43:00  37  AND ydate > sysdate - 95
21:43:00  38  ORDER BY ydate
21:43:00  39  /

View created.

Elapsed: 00:00:00.13
21:43:00 SQL> 
21:43:00 SQL> -- rpt
21:43:00 SQL> 
21:43:00 SQL> SELECT
21:43:00   2  pair
21:43:00   3  ,COUNT(pair)
21:43:00   4  ,MIN(clse),MAX(clse)
21:43:00   5  ,MIN(avg6),MAX(avg6)
21:43:00   6  ,MIN(ydate),MAX(ydate)
21:43:00   7  FROM svm6102
21:43:00   8  GROUP BY pair
21:43:00   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19814    1.29735	   1.4273 1.29875103 1.42436233 2010-10-03 21:45:01 2011-01-06 21:40:00

Elapsed: 00:00:00.93
21:43:01 SQL> 
21:43:01 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:43:01 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.07
21:43:01 SQL> CREATE TABLE svm6122 COMPRESS AS
21:43:01   2  SELECT
21:43:01   3  pair
21:43:01   4  ,ydate
21:43:01   5  ,prdate
21:43:01   6  ,clse
21:43:01   7  -- g6 is important. I want to predict g6:
21:43:01   8  ,ld6 - clse g6
21:43:01   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:43:01  10  -- I want more attributes from the ones I derived above:
21:43:01  11  -- clse relation to moving-min
21:43:01  12  ,clse-min4  cm4
21:43:01  13  ,clse-min6  cm6
21:43:01  14  ,clse-min8  cm8
21:43:01  15  ,clse-min10 cm10
21:43:01  16  ,clse-min12 cm12
21:43:01  17  ,clse-min14 cm14
21:43:01  18  ,clse-min16 cm16
21:43:01  19  ,clse-min18 cm18
21:43:01  20  -- clse relation to moving-avg
21:43:01  21  ,clse-avg4  ca4
21:43:01  22  ,clse-avg6  ca6
21:43:01  23  ,clse-avg8  ca8
21:43:01  24  ,clse-avg10 ca10
21:43:01  25  ,clse-avg12 ca12
21:43:01  26  ,clse-avg14 ca14
21:43:01  27  ,clse-avg16 ca16
21:43:01  28  ,clse-avg18 ca18
21:43:01  29  -- clse relation to moving-max
21:43:01  30  ,clse-max4  cx4
21:43:01  31  ,clse-max6  cx6
21:43:01  32  ,clse-max8  cx8
21:43:01  33  ,clse-max10 cx10
21:43:01  34  ,clse-max12 cx12
21:43:01  35  ,clse-max14 cx14
21:43:01  36  ,clse-max16 cx16
21:43:01  37  ,clse-max18 cx18
21:43:01  38  -- Derive more attributes.
21:43:01  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:43:01  40  -- But COVAR_POP is more stable:
21:43:01  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:43:01  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:43:01  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:43:01  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:43:01  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:43:01  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:43:01  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:43:01  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:43:01  49  -- Derive date related attributes:
21:43:01  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:43:01  51  ,0+TO_CHAR(ydate,'D')d
21:43:01  52  ,0+TO_CHAR(ydate,'W')w
21:43:01  53  -- mpm stands for minutes-past-midnight:
21:43:01  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:43:01  55  -- mph stands for minutes-past-hour:
21:43:01  56  ,0+TO_CHAR(ydate,'MI')mph
21:43:01  57  FROM svm6102
21:43:01  58  ORDER BY ydate
21:43:01  59  /

Table created.

Elapsed: 00:00:02.44
21:43:03 SQL> 
21:43:03 SQL> -- rpt
21:43:03 SQL> 
21:43:03 SQL> SELECT
21:43:03   2  pair
21:43:03   3  ,COUNT(pair)
21:43:03   4  ,MIN(clse),MAX(clse)
21:43:03   5  ,MIN(ydate),MAX(ydate)
21:43:03   6  FROM svm6122
21:43:03   7  GROUP BY pair
21:43:03   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19814    1.29735	   1.4273 2010-10-03 21:45:01 2011-01-06 21:40:00

Elapsed: 00:00:00.07
21:43:03 SQL> 
21:43:03 SQL> -- Prepare for derivation of NTILE based params:
21:43:03 SQL> 
21:43:03 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.11
21:43:04 SQL> CREATE TABLE svm6142 COMPRESS AS
21:43:04   2  SELECT
21:43:04   3  pair
21:43:04   4  ,ydate
21:43:04   5  ,prdate
21:43:04   6  ,clse
21:43:04   7  ,g6
21:43:04   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:43:04   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:43:04  10  ,CASE WHEN trend IS NULL THEN 1
21:43:04  11  	    WHEN trend =0      THEN 1
21:43:04  12  	    ELSE trend END trend
21:43:04  13  ,cm4
21:43:04  14  ,cm6
21:43:04  15  ,cm8
21:43:04  16  ,cm10
21:43:04  17  ,cm12
21:43:04  18  ,cm14
21:43:04  19  ,cm16
21:43:04  20  ,cm18
21:43:04  21  --
21:43:04  22  ,ca4
21:43:04  23  ,ca6
21:43:04  24  ,ca8
21:43:04  25  ,ca10
21:43:04  26  ,ca12
21:43:04  27  ,ca14
21:43:04  28  ,ca16
21:43:04  29  ,ca18
21:43:04  30  --
21:43:04  31  ,cx4
21:43:04  32  ,cx6
21:43:04  33  ,cx8
21:43:04  34  ,cx10
21:43:04  35  ,cx12
21:43:04  36  ,cx14
21:43:04  37  ,cx16
21:43:04  38  ,cx18
21:43:04  39  --
21:43:04  40  ,crr4
21:43:04  41  ,crr6
21:43:04  42  ,crr8
21:43:04  43  ,crr10
21:43:04  44  ,crr12
21:43:04  45  ,crr14
21:43:04  46  ,crr16
21:43:04  47  ,crr18
21:43:04  48  --
21:43:04  49  ,hh
21:43:04  50  ,d
21:43:04  51  ,w
21:43:04  52  ,mpm
21:43:04  53  ,mph
21:43:04  54  FROM svm6122
21:43:04  55  ORDER BY ydate
21:43:04  56  /

Table created.

Elapsed: 00:00:00.38
21:43:04 SQL> 
21:43:04 SQL> -- rpt
21:43:04 SQL> 
21:43:04 SQL> SELECT
21:43:04   2  pair
21:43:04   3  ,trend
21:43:04   4  ,gatt
21:43:04   5  ,COUNT(pair)
21:43:04   6  ,AVG(g6)
21:43:04   7  FROM svm6142
21:43:04   8  GROUP BY pair,trend,gatt
21:43:04   9  ORDER BY pair,trend,gatt
21:43:04  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6596 -.00318049
eur_usd 	-1 up	      3570 .004447223
eur_usd 	-1		72
eur_usd 	 1 nup	      5871  -.0032517
eur_usd 	 1 up	      3705 .005071238

Elapsed: 00:00:00.04
21:43:04 SQL> 
21:43:04 SQL> 
21:43:04 SQL> -- Derive NTILE based params:
21:43:04 SQL> 
21:43:04 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.03
21:43:04 SQL> CREATE TABLE svm6162 COMPRESS AS
21:43:04   2  SELECT
21:43:04   3  pair
21:43:04   4  ,ydate
21:43:04   5  ,prdate
21:43:04   6  ,clse
21:43:04   7  ,g6
21:43:04   8  ,gatt
21:43:04   9  ,gattn
21:43:04  10  ,trend
21:43:04  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:43:04  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:43:04  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:43:04  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:43:04  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:43:04  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:43:04  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:43:04  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:43:04  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:43:04  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:43:04  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:43:04  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:43:04  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:43:04  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:43:04  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:43:04  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:43:04  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:43:04  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:43:04  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:43:04  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:43:04  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:43:04  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:43:04  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:43:04  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:43:04  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:43:04  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:43:04  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:43:04  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:43:04  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:43:04  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:43:04  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:43:04  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:43:04  43  ,hh  att32
21:43:04  44  ,d   att33
21:43:04  45  ,w   att34
21:43:04  46  ,mpm att35
21:43:04  47  ,mph att36
21:43:04  48  ,trend att37
21:43:04  49  FROM svm6142
21:43:04  50  ORDER BY ydate
21:43:04  51  /

Table created.

Elapsed: 00:00:04.90
21:43:09 SQL> 
21:43:09 SQL> -- rpt
21:43:09 SQL> 
21:43:09 SQL> SELECT
21:43:09   2  pair
21:43:09   3  ,trend
21:43:09   4  ,gatt
21:43:09   5  ,COUNT(pair)
21:43:09   6  ,AVG(g6)
21:43:09   7  FROM svm6162
21:43:09   8  GROUP BY pair,trend,gatt
21:43:09   9  ORDER BY pair,trend,gatt
21:43:09  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6596 -.00318049
eur_usd 	-1 up	      3570 .004447223
eur_usd 	-1		72
eur_usd 	 1 nup	      5871  -.0032517
eur_usd 	 1 up	      3705 .005071238

Elapsed: 00:00:00.03
21:43:09 SQL> 
21:43:09 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.06
21:43:09 SQL> CREATE TABLE modsrc COMPRESS AS
21:43:09   2  SELECT
21:43:09   3  pair
21:43:09   4  ,ydate
21:43:09   5  ,prdate
21:43:09   6  ,trend
21:43:09   7  ,g6
21:43:09   8  ,gatt
21:43:09   9  ,gattn
21:43:09  10  FROM svm6162
21:43:09  11  /

Table created.

Elapsed: 00:00:00.09
21:43:09 SQL> 
21:43:09 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
21:43:09 SQL> 
21:43:09 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
21:43:09 SQL> CREATE TABLE eur_ms610 COMPRESS AS
21:43:09   2  SELECT
21:43:09   3  ydate
21:43:09   4  ,trend eur_trend
21:43:09   5  ,g6    eur_g6
21:43:09   6  ,gatt  eur_gatt
21:43:09   7  ,gattn eur_gattn
21:43:09   8  FROM modsrc
21:43:09   9  /

Table created.

Elapsed: 00:00:00.11
21:43:09 SQL> 
21:43:09 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
21:43:10 SQL> 
21:43:10 SQL> -- I need a copy of the attributes:
21:43:10 SQL> 
21:43:10 SQL> 
21:43:10 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.04
21:43:10 SQL> CREATE TABLE eur_att COMPRESS AS
21:43:10   2  SELECT
21:43:10   3  ydate
21:43:10   4  ,att00 eur_att00
21:43:10   5  ,att01 eur_att01
21:43:10   6  ,att02 eur_att02
21:43:10   7  ,att03 eur_att03
21:43:10   8  ,att04 eur_att04
21:43:10   9  ,att05 eur_att05
21:43:10  10  ,att06 eur_att06
21:43:10  11  ,att07 eur_att07
21:43:10  12  ,att08 eur_att08
21:43:10  13  ,att09 eur_att09
21:43:10  14  ,att10 eur_att10
21:43:10  15  ,att11 eur_att11
21:43:10  16  ,att12 eur_att12
21:43:10  17  ,att13 eur_att13
21:43:10  18  ,att14 eur_att14
21:43:10  19  ,att15 eur_att15
21:43:10  20  ,att16 eur_att16
21:43:10  21  ,att17 eur_att17
21:43:10  22  ,att18 eur_att18
21:43:10  23  ,att19 eur_att19
21:43:10  24  ,att20 eur_att20
21:43:10  25  ,att21 eur_att21
21:43:10  26  ,att22 eur_att22
21:43:10  27  ,att23 eur_att23
21:43:10  28  ,att24 eur_att24
21:43:10  29  ,att25 eur_att25
21:43:10  30  ,att26 eur_att26
21:43:10  31  ,att27 eur_att27
21:43:10  32  ,att28 eur_att28
21:43:10  33  ,att29 eur_att29
21:43:10  34  ,att30 eur_att30
21:43:10  35  ,att31 eur_att31
21:43:10  36  ,att32 eur_att32
21:43:10  37  ,att33 eur_att33
21:43:10  38  ,att34 eur_att34
21:43:10  39  ,att35 eur_att35
21:43:10  40  ,att36 eur_att36
21:43:10  41  ,att37 eur_att37
21:43:10  42  FROM svm6162
21:43:10  43  /

Table created.

Elapsed: 00:00:00.16
21:43:10 SQL> 
21:43:10 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.49
21:43:10 SQL> 
21:43:10 SQL> -- rpt
21:43:10 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19814

Elapsed: 00:00:00.90
21:43:11 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19814

Elapsed: 00:00:00.01
21:43:11 SQL> 
21:43:11 SQL> --
21:43:11 SQL> -- aud610.sql
21:43:11 SQL> --
21:43:11 SQL> 
21:43:11 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:43:11 SQL> 
21:43:11 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.44
21:43:12 SQL> 
21:43:12 SQL> -- I created di5min here:
21:43:12 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:43:12 SQL> 
21:43:12 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:43:12   2  SELECT
21:43:12   3  pair
21:43:12   4  ,ydate
21:43:12   5  ,prdate
21:43:12   6  ,rownum rnum -- acts as t in my time-series
21:43:12   7  ,clse
21:43:12   8  -- Derive a bunch of attributes from clse, the latest price:
21:43:12   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:43:12  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:43:12  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:43:12  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:43:12  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:43:12  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:43:12  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:43:12  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:43:12  17  --
21:43:12  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:43:12  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:43:12  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:43:12  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:43:12  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:43:12  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:43:12  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:43:12  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:43:12  26  --
21:43:12  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:43:12  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:43:12  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:43:12  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:43:12  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:43:12  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:43:12  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:43:12  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:43:12  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:43:12  36  FROM di5min WHERE pair LIKE'%aud%'
21:43:12  37  AND ydate > sysdate - 95
21:43:12  38  ORDER BY ydate
21:43:12  39  /

View created.

Elapsed: 00:00:00.05
21:43:12 SQL> 
21:43:12 SQL> -- rpt
21:43:12 SQL> 
21:43:12 SQL> SELECT
21:43:12   2  pair
21:43:12   3  ,COUNT(pair)
21:43:12   4  ,MIN(clse),MAX(clse)
21:43:12   5  ,MIN(avg6),MAX(avg6)
21:43:12   6  ,MIN(ydate),MAX(ydate)
21:43:12   7  FROM svm6102
21:43:12   8  GROUP BY pair
21:43:12   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19811	.95405	  1.02495 .957141438 1.02284247 2010-10-03 21:45:01 2011-01-06 21:40:00

Elapsed: 00:00:00.88
21:43:13 SQL> 
21:43:13 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:43:13 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.20
21:43:13 SQL> CREATE TABLE svm6122 COMPRESS AS
21:43:13   2  SELECT
21:43:13   3  pair
21:43:13   4  ,ydate
21:43:13   5  ,prdate
21:43:13   6  ,clse
21:43:13   7  -- g6 is important. I want to predict g6:
21:43:13   8  ,ld6 - clse g6
21:43:13   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:43:13  10  -- I want more attributes from the ones I derived above:
21:43:13  11  -- clse relation to moving-min
21:43:13  12  ,clse-min4  cm4
21:43:13  13  ,clse-min6  cm6
21:43:13  14  ,clse-min8  cm8
21:43:13  15  ,clse-min10 cm10
21:43:13  16  ,clse-min12 cm12
21:43:13  17  ,clse-min14 cm14
21:43:13  18  ,clse-min16 cm16
21:43:13  19  ,clse-min18 cm18
21:43:13  20  -- clse relation to moving-avg
21:43:13  21  ,clse-avg4  ca4
21:43:13  22  ,clse-avg6  ca6
21:43:13  23  ,clse-avg8  ca8
21:43:13  24  ,clse-avg10 ca10
21:43:13  25  ,clse-avg12 ca12
21:43:13  26  ,clse-avg14 ca14
21:43:13  27  ,clse-avg16 ca16
21:43:13  28  ,clse-avg18 ca18
21:43:13  29  -- clse relation to moving-max
21:43:13  30  ,clse-max4  cx4
21:43:13  31  ,clse-max6  cx6
21:43:13  32  ,clse-max8  cx8
21:43:13  33  ,clse-max10 cx10
21:43:13  34  ,clse-max12 cx12
21:43:13  35  ,clse-max14 cx14
21:43:13  36  ,clse-max16 cx16
21:43:13  37  ,clse-max18 cx18
21:43:13  38  -- Derive more attributes.
21:43:13  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:43:13  40  -- But COVAR_POP is more stable:
21:43:13  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:43:13  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:43:13  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:43:13  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:43:13  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:43:13  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:43:13  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:43:13  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:43:13  49  -- Derive date related attributes:
21:43:13  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:43:13  51  ,0+TO_CHAR(ydate,'D')d
21:43:13  52  ,0+TO_CHAR(ydate,'W')w
21:43:13  53  -- mpm stands for minutes-past-midnight:
21:43:13  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:43:13  55  -- mph stands for minutes-past-hour:
21:43:13  56  ,0+TO_CHAR(ydate,'MI')mph
21:43:13  57  FROM svm6102
21:43:13  58  ORDER BY ydate
21:43:13  59  /

Table created.

Elapsed: 00:00:02.08
21:43:15 SQL> 
21:43:15 SQL> -- rpt
21:43:15 SQL> 
21:43:15 SQL> SELECT
21:43:15   2  pair
21:43:15   3  ,COUNT(pair)
21:43:15   4  ,MIN(clse),MAX(clse)
21:43:15   5  ,MIN(ydate),MAX(ydate)
21:43:15   6  FROM svm6122
21:43:15   7  GROUP BY pair
21:43:15   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19811	.95405	  1.02495 2010-10-03 21:45:01 2011-01-06 21:40:00

Elapsed: 00:00:00.08
21:43:15 SQL> 
21:43:15 SQL> -- Prepare for derivation of NTILE based params:
21:43:15 SQL> 
21:43:15 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.24
21:43:15 SQL> CREATE TABLE svm6142 COMPRESS AS
21:43:15   2  SELECT
21:43:15   3  pair
21:43:15   4  ,ydate
21:43:15   5  ,prdate
21:43:15   6  ,clse
21:43:15   7  ,g6
21:43:15   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:43:15   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:43:15  10  ,CASE WHEN trend IS NULL THEN 1
21:43:15  11  	    WHEN trend =0      THEN 1
21:43:15  12  	    ELSE trend END trend
21:43:15  13  ,cm4
21:43:15  14  ,cm6
21:43:15  15  ,cm8
21:43:15  16  ,cm10
21:43:15  17  ,cm12
21:43:15  18  ,cm14
21:43:15  19  ,cm16
21:43:15  20  ,cm18
21:43:15  21  --
21:43:15  22  ,ca4
21:43:15  23  ,ca6
21:43:15  24  ,ca8
21:43:15  25  ,ca10
21:43:15  26  ,ca12
21:43:15  27  ,ca14
21:43:15  28  ,ca16
21:43:15  29  ,ca18
21:43:15  30  --
21:43:15  31  ,cx4
21:43:15  32  ,cx6
21:43:15  33  ,cx8
21:43:15  34  ,cx10
21:43:15  35  ,cx12
21:43:15  36  ,cx14
21:43:15  37  ,cx16
21:43:15  38  ,cx18
21:43:15  39  --
21:43:15  40  ,crr4
21:43:15  41  ,crr6
21:43:15  42  ,crr8
21:43:15  43  ,crr10
21:43:15  44  ,crr12
21:43:15  45  ,crr14
21:43:15  46  ,crr16
21:43:15  47  ,crr18
21:43:15  48  --
21:43:15  49  ,hh
21:43:15  50  ,d
21:43:15  51  ,w
21:43:15  52  ,mpm
21:43:15  53  ,mph
21:43:15  54  FROM svm6122
21:43:15  55  ORDER BY ydate
21:43:15  56  /

Table created.

Elapsed: 00:00:00.36
21:43:16 SQL> 
21:43:16 SQL> -- rpt
21:43:16 SQL> 
21:43:16 SQL> SELECT
21:43:16   2  pair
21:43:16   3  ,trend
21:43:16   4  ,gatt
21:43:16   5  ,COUNT(pair)
21:43:16   6  ,AVG(g6)
21:43:16   7  FROM svm6142
21:43:16   8  GROUP BY pair,trend,gatt
21:43:16   9  ORDER BY pair,trend,gatt
21:43:16  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5717 -.00214739
aud_usd 	-1 up	      3701 .003745866
aud_usd 	-1		72
aud_usd 	 1 nup	      6728 -.00213861
aud_usd 	 1 up	      3593 .004054752

Elapsed: 00:00:00.07
21:43:16 SQL> 
21:43:16 SQL> 
21:43:16 SQL> -- Derive NTILE based params:
21:43:16 SQL> 
21:43:16 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
21:43:16 SQL> CREATE TABLE svm6162 COMPRESS AS
21:43:16   2  SELECT
21:43:16   3  pair
21:43:16   4  ,ydate
21:43:16   5  ,prdate
21:43:16   6  ,clse
21:43:16   7  ,g6
21:43:16   8  ,gatt
21:43:16   9  ,gattn
21:43:16  10  ,trend
21:43:16  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:43:16  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:43:16  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:43:16  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:43:16  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:43:16  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:43:16  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:43:16  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:43:16  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:43:16  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:43:16  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:43:16  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:43:16  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:43:16  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:43:16  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:43:16  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:43:16  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:43:16  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:43:16  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:43:16  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:43:16  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:43:16  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:43:16  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:43:16  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:43:16  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:43:16  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:43:16  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:43:16  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:43:16  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:43:16  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:43:16  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:43:16  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:43:16  43  ,hh  att32
21:43:16  44  ,d   att33
21:43:16  45  ,w   att34
21:43:16  46  ,mpm att35
21:43:16  47  ,mph att36
21:43:16  48  ,trend att37
21:43:16  49  FROM svm6142
21:43:16  50  ORDER BY ydate
21:43:16  51  /

Table created.

Elapsed: 00:00:04.78
21:43:21 SQL> 
21:43:21 SQL> -- rpt
21:43:21 SQL> 
21:43:21 SQL> SELECT
21:43:21   2  pair
21:43:21   3  ,trend
21:43:21   4  ,gatt
21:43:21   5  ,COUNT(pair)
21:43:21   6  ,AVG(g6)
21:43:21   7  FROM svm6162
21:43:21   8  GROUP BY pair,trend,gatt
21:43:21   9  ORDER BY pair,trend,gatt
21:43:21  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5717 -.00214739
aud_usd 	-1 up	      3701 .003745866
aud_usd 	-1		72
aud_usd 	 1 nup	      6728 -.00213861
aud_usd 	 1 up	      3593 .004054752

Elapsed: 00:00:00.03
21:43:21 SQL> 
21:43:21 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.97
21:43:22 SQL> CREATE TABLE modsrc COMPRESS AS
21:43:22   2  SELECT
21:43:22   3  pair
21:43:22   4  ,ydate
21:43:22   5  ,prdate
21:43:22   6  ,trend
21:43:22   7  ,g6
21:43:22   8  ,gatt
21:43:22   9  ,gattn
21:43:22  10  FROM svm6162
21:43:22  11  /

Table created.

Elapsed: 00:00:00.09
21:43:22 SQL> 
21:43:22 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
21:43:22 SQL> 
21:43:22 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.07
21:43:22 SQL> CREATE TABLE aud_ms610 COMPRESS AS
21:43:22   2  SELECT
21:43:22   3  ydate
21:43:22   4  ,trend aud_trend
21:43:22   5  ,g6    aud_g6
21:43:22   6  ,gatt  aud_gatt
21:43:22   7  ,gattn aud_gattn
21:43:22   8  FROM modsrc
21:43:22   9  /

Table created.

Elapsed: 00:00:00.06
21:43:22 SQL> 
21:43:22 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
21:43:22 SQL> 
21:43:22 SQL> -- I need a copy of the attributes:
21:43:22 SQL> 
21:43:22 SQL> 
21:43:22 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.05
21:43:22 SQL> CREATE TABLE aud_att COMPRESS AS
21:43:22   2  SELECT
21:43:22   3  ydate
21:43:22   4  ,att00 aud_att00
21:43:22   5  ,att01 aud_att01
21:43:22   6  ,att02 aud_att02
21:43:22   7  ,att03 aud_att03
21:43:22   8  ,att04 aud_att04
21:43:22   9  ,att05 aud_att05
21:43:22  10  ,att06 aud_att06
21:43:22  11  ,att07 aud_att07
21:43:22  12  ,att08 aud_att08
21:43:22  13  ,att09 aud_att09
21:43:22  14  ,att10 aud_att10
21:43:22  15  ,att11 aud_att11
21:43:22  16  ,att12 aud_att12
21:43:22  17  ,att13 aud_att13
21:43:22  18  ,att14 aud_att14
21:43:22  19  ,att15 aud_att15
21:43:22  20  ,att16 aud_att16
21:43:22  21  ,att17 aud_att17
21:43:22  22  ,att18 aud_att18
21:43:22  23  ,att19 aud_att19
21:43:22  24  ,att20 aud_att20
21:43:22  25  ,att21 aud_att21
21:43:22  26  ,att22 aud_att22
21:43:22  27  ,att23 aud_att23
21:43:22  28  ,att24 aud_att24
21:43:22  29  ,att25 aud_att25
21:43:22  30  ,att26 aud_att26
21:43:22  31  ,att27 aud_att27
21:43:22  32  ,att28 aud_att28
21:43:22  33  ,att29 aud_att29
21:43:22  34  ,att30 aud_att30
21:43:22  35  ,att31 aud_att31
21:43:22  36  ,att32 aud_att32
21:43:22  37  ,att33 aud_att33
21:43:22  38  ,att34 aud_att34
21:43:22  39  ,att35 aud_att35
21:43:22  40  ,att36 aud_att36
21:43:22  41  ,att37 aud_att37
21:43:22  42  FROM svm6162
21:43:22  43  /

Table created.

Elapsed: 00:00:00.20
21:43:22 SQL> 
21:43:22 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
21:43:23 SQL> 
21:43:23 SQL> -- rpt
21:43:23 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19811

Elapsed: 00:00:00.88
21:43:24 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19811

Elapsed: 00:00:00.00
21:43:24 SQL> 
21:43:24 SQL> --
21:43:24 SQL> -- gbp610.sql
21:43:24 SQL> --
21:43:24 SQL> 
21:43:24 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:43:24 SQL> 
21:43:24 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.59
21:43:24 SQL> 
21:43:24 SQL> -- I created di5min here:
21:43:24 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:43:24 SQL> 
21:43:24 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:43:24   2  SELECT
21:43:24   3  pair
21:43:24   4  ,ydate
21:43:24   5  ,prdate
21:43:24   6  ,rownum rnum -- acts as t in my time-series
21:43:24   7  ,clse
21:43:24   8  -- Derive a bunch of attributes from clse, the latest price:
21:43:24   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:43:24  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:43:24  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:43:24  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:43:24  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:43:24  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:43:24  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:43:24  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:43:24  17  --
21:43:24  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:43:24  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:43:24  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:43:24  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:43:24  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:43:24  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:43:24  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:43:24  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:43:24  26  --
21:43:24  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:43:24  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:43:24  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:43:24  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:43:24  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:43:24  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:43:24  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:43:24  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:43:24  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:43:24  36  FROM di5min WHERE pair LIKE'%gbp%'
21:43:24  37  AND ydate > sysdate - 95
21:43:24  38  ORDER BY ydate
21:43:24  39  /

View created.

Elapsed: 00:00:00.05
21:43:24 SQL> 
21:43:24 SQL> -- rpt
21:43:24 SQL> 
21:43:24 SQL> SELECT
21:43:24   2  pair
21:43:24   3  ,COUNT(pair)
21:43:24   4  ,MIN(clse),MAX(clse)
21:43:24   5  ,MIN(avg6),MAX(avg6)
21:43:24   6  ,MIN(ydate),MAX(ydate)
21:43:24   7  FROM svm6102
21:43:24   8  GROUP BY pair
21:43:24   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19813   1.535325	   1.6295 1.53696747 1.62716986 2010-10-03 21:45:01 2011-01-06 21:40:00

Elapsed: 00:00:00.91
21:43:25 SQL> 
21:43:25 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:43:25 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.38
21:43:26 SQL> CREATE TABLE svm6122 COMPRESS AS
21:43:26   2  SELECT
21:43:26   3  pair
21:43:26   4  ,ydate
21:43:26   5  ,prdate
21:43:26   6  ,clse
21:43:26   7  -- g6 is important. I want to predict g6:
21:43:26   8  ,ld6 - clse g6
21:43:26   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:43:26  10  -- I want more attributes from the ones I derived above:
21:43:26  11  -- clse relation to moving-min
21:43:26  12  ,clse-min4  cm4
21:43:26  13  ,clse-min6  cm6
21:43:26  14  ,clse-min8  cm8
21:43:26  15  ,clse-min10 cm10
21:43:26  16  ,clse-min12 cm12
21:43:26  17  ,clse-min14 cm14
21:43:26  18  ,clse-min16 cm16
21:43:26  19  ,clse-min18 cm18
21:43:26  20  -- clse relation to moving-avg
21:43:26  21  ,clse-avg4  ca4
21:43:26  22  ,clse-avg6  ca6
21:43:26  23  ,clse-avg8  ca8
21:43:26  24  ,clse-avg10 ca10
21:43:26  25  ,clse-avg12 ca12
21:43:26  26  ,clse-avg14 ca14
21:43:26  27  ,clse-avg16 ca16
21:43:26  28  ,clse-avg18 ca18
21:43:26  29  -- clse relation to moving-max
21:43:26  30  ,clse-max4  cx4
21:43:26  31  ,clse-max6  cx6
21:43:26  32  ,clse-max8  cx8
21:43:26  33  ,clse-max10 cx10
21:43:26  34  ,clse-max12 cx12
21:43:26  35  ,clse-max14 cx14
21:43:26  36  ,clse-max16 cx16
21:43:26  37  ,clse-max18 cx18
21:43:26  38  -- Derive more attributes.
21:43:26  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:43:26  40  -- But COVAR_POP is more stable:
21:43:26  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:43:26  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:43:26  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:43:26  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:43:26  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:43:26  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:43:26  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:43:26  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:43:26  49  -- Derive date related attributes:
21:43:26  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:43:26  51  ,0+TO_CHAR(ydate,'D')d
21:43:26  52  ,0+TO_CHAR(ydate,'W')w
21:43:26  53  -- mpm stands for minutes-past-midnight:
21:43:26  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:43:26  55  -- mph stands for minutes-past-hour:
21:43:26  56  ,0+TO_CHAR(ydate,'MI')mph
21:43:26  57  FROM svm6102
21:43:26  58  ORDER BY ydate
21:43:26  59  /

Table created.

Elapsed: 00:00:02.14
21:43:28 SQL> 
21:43:28 SQL> -- rpt
21:43:28 SQL> 
21:43:28 SQL> SELECT
21:43:28   2  pair
21:43:28   3  ,COUNT(pair)
21:43:28   4  ,MIN(clse),MAX(clse)
21:43:28   5  ,MIN(ydate),MAX(ydate)
21:43:28   6  FROM svm6122
21:43:28   7  GROUP BY pair
21:43:28   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19813   1.535325	   1.6295 2010-10-03 21:45:01 2011-01-06 21:40:00

Elapsed: 00:00:00.05
21:43:28 SQL> 
21:43:28 SQL> -- Prepare for derivation of NTILE based params:
21:43:28 SQL> 
21:43:28 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.22
21:43:28 SQL> CREATE TABLE svm6142 COMPRESS AS
21:43:28   2  SELECT
21:43:28   3  pair
21:43:28   4  ,ydate
21:43:28   5  ,prdate
21:43:28   6  ,clse
21:43:28   7  ,g6
21:43:28   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:43:28   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:43:28  10  ,CASE WHEN trend IS NULL THEN 1
21:43:28  11  	    WHEN trend =0      THEN 1
21:43:28  12  	    ELSE trend END trend
21:43:28  13  ,cm4
21:43:28  14  ,cm6
21:43:28  15  ,cm8
21:43:28  16  ,cm10
21:43:28  17  ,cm12
21:43:28  18  ,cm14
21:43:28  19  ,cm16
21:43:28  20  ,cm18
21:43:28  21  --
21:43:28  22  ,ca4
21:43:28  23  ,ca6
21:43:28  24  ,ca8
21:43:28  25  ,ca10
21:43:28  26  ,ca12
21:43:28  27  ,ca14
21:43:28  28  ,ca16
21:43:28  29  ,ca18
21:43:28  30  --
21:43:28  31  ,cx4
21:43:28  32  ,cx6
21:43:28  33  ,cx8
21:43:28  34  ,cx10
21:43:28  35  ,cx12
21:43:28  36  ,cx14
21:43:28  37  ,cx16
21:43:28  38  ,cx18
21:43:28  39  --
21:43:28  40  ,crr4
21:43:28  41  ,crr6
21:43:28  42  ,crr8
21:43:28  43  ,crr10
21:43:28  44  ,crr12
21:43:28  45  ,crr14
21:43:28  46  ,crr16
21:43:28  47  ,crr18
21:43:28  48  --
21:43:28  49  ,hh
21:43:28  50  ,d
21:43:28  51  ,w
21:43:28  52  ,mpm
21:43:28  53  ,mph
21:43:28  54  FROM svm6122
21:43:28  55  ORDER BY ydate
21:43:28  56  /

Table created.

Elapsed: 00:00:00.38
21:43:28 SQL> 
21:43:28 SQL> -- rpt
21:43:28 SQL> 
21:43:28 SQL> SELECT
21:43:28   2  pair
21:43:28   3  ,trend
21:43:28   4  ,gatt
21:43:28   5  ,COUNT(pair)
21:43:28   6  ,AVG(g6)
21:43:28   7  FROM svm6142
21:43:28   8  GROUP BY pair,trend,gatt
21:43:28   9  ORDER BY pair,trend,gatt
21:43:28  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6421 -.00262999
gbp_usd 	-1 up	      3579 .004338911
gbp_usd 	-1		50
gbp_usd 	 1 nup	      6285 -.00264908
gbp_usd 	 1 up	      3456 .004524374
gbp_usd 	 1		22

6 rows selected.

Elapsed: 00:00:00.08
21:43:29 SQL> 
21:43:29 SQL> 
21:43:29 SQL> -- Derive NTILE based params:
21:43:29 SQL> 
21:43:29 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.24
21:43:29 SQL> CREATE TABLE svm6162 COMPRESS AS
21:43:29   2  SELECT
21:43:29   3  pair
21:43:29   4  ,ydate
21:43:29   5  ,prdate
21:43:29   6  ,clse
21:43:29   7  ,g6
21:43:29   8  ,gatt
21:43:29   9  ,gattn
21:43:29  10  ,trend
21:43:29  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:43:29  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:43:29  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:43:29  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:43:29  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:43:29  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:43:29  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:43:29  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:43:29  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:43:29  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:43:29  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:43:29  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:43:29  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:43:29  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:43:29  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:43:29  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:43:29  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:43:29  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:43:29  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:43:29  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:43:29  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:43:29  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:43:29  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:43:29  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:43:29  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:43:29  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:43:29  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:43:29  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:43:29  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:43:29  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:43:29  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:43:29  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:43:29  43  ,hh  att32
21:43:29  44  ,d   att33
21:43:29  45  ,w   att34
21:43:29  46  ,mpm att35
21:43:29  47  ,mph att36
21:43:29  48  ,trend att37
21:43:29  49  FROM svm6142
21:43:29  50  ORDER BY ydate
21:43:29  51  /

Table created.

Elapsed: 00:00:04.96
21:43:34 SQL> 
21:43:34 SQL> -- rpt
21:43:34 SQL> 
21:43:34 SQL> SELECT
21:43:34   2  pair
21:43:34   3  ,trend
21:43:34   4  ,gatt
21:43:34   5  ,COUNT(pair)
21:43:34   6  ,AVG(g6)
21:43:34   7  FROM svm6162
21:43:34   8  GROUP BY pair,trend,gatt
21:43:34   9  ORDER BY pair,trend,gatt
21:43:34  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6421 -.00262999
gbp_usd 	-1 up	      3579 .004338911
gbp_usd 	-1		50
gbp_usd 	 1 nup	      6285 -.00264908
gbp_usd 	 1 up	      3456 .004524374
gbp_usd 	 1		22

6 rows selected.

Elapsed: 00:00:00.06
21:43:34 SQL> 
21:43:34 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.19
21:43:34 SQL> CREATE TABLE modsrc COMPRESS AS
21:43:34   2  SELECT
21:43:34   3  pair
21:43:34   4  ,ydate
21:43:34   5  ,prdate
21:43:34   6  ,trend
21:43:34   7  ,g6
21:43:34   8  ,gatt
21:43:34   9  ,gattn
21:43:34  10  FROM svm6162
21:43:34  11  /

Table created.

Elapsed: 00:00:00.08
21:43:34 SQL> 
21:43:34 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
21:43:34 SQL> 
21:43:34 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
21:43:34 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
21:43:34   2  SELECT
21:43:34   3  ydate
21:43:34   4  ,trend gbp_trend
21:43:34   5  ,g6    gbp_g6
21:43:34   6  ,gatt  gbp_gatt
21:43:34   7  ,gattn gbp_gattn
21:43:34   8  FROM modsrc
21:43:34   9  /

Table created.

Elapsed: 00:00:00.06
21:43:34 SQL> 
21:43:34 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
21:43:35 SQL> 
21:43:35 SQL> -- I need a copy of the attributes:
21:43:35 SQL> 
21:43:35 SQL> 
21:43:35 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.05
21:43:35 SQL> CREATE TABLE gbp_att COMPRESS AS
21:43:35   2  SELECT
21:43:35   3  ydate
21:43:35   4  ,att00 gbp_att00
21:43:35   5  ,att01 gbp_att01
21:43:35   6  ,att02 gbp_att02
21:43:35   7  ,att03 gbp_att03
21:43:35   8  ,att04 gbp_att04
21:43:35   9  ,att05 gbp_att05
21:43:35  10  ,att06 gbp_att06
21:43:35  11  ,att07 gbp_att07
21:43:35  12  ,att08 gbp_att08
21:43:35  13  ,att09 gbp_att09
21:43:35  14  ,att10 gbp_att10
21:43:35  15  ,att11 gbp_att11
21:43:35  16  ,att12 gbp_att12
21:43:35  17  ,att13 gbp_att13
21:43:35  18  ,att14 gbp_att14
21:43:35  19  ,att15 gbp_att15
21:43:35  20  ,att16 gbp_att16
21:43:35  21  ,att17 gbp_att17
21:43:35  22  ,att18 gbp_att18
21:43:35  23  ,att19 gbp_att19
21:43:35  24  ,att20 gbp_att20
21:43:35  25  ,att21 gbp_att21
21:43:35  26  ,att22 gbp_att22
21:43:35  27  ,att23 gbp_att23
21:43:35  28  ,att24 gbp_att24
21:43:35  29  ,att25 gbp_att25
21:43:35  30  ,att26 gbp_att26
21:43:35  31  ,att27 gbp_att27
21:43:35  32  ,att28 gbp_att28
21:43:35  33  ,att29 gbp_att29
21:43:35  34  ,att30 gbp_att30
21:43:35  35  ,att31 gbp_att31
21:43:35  36  ,att32 gbp_att32
21:43:35  37  ,att33 gbp_att33
21:43:35  38  ,att34 gbp_att34
21:43:35  39  ,att35 gbp_att35
21:43:35  40  ,att36 gbp_att36
21:43:35  41  ,att37 gbp_att37
21:43:35  42  FROM svm6162
21:43:35  43  /

Table created.

Elapsed: 00:00:00.19
21:43:35 SQL> 
21:43:35 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
21:43:35 SQL> 
21:43:35 SQL> -- rpt
21:43:35 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19813

Elapsed: 00:00:00.86
21:43:36 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19813

Elapsed: 00:00:00.00
21:43:36 SQL> 
21:43:36 SQL> --
21:43:36 SQL> -- jpy610.sql
21:43:36 SQL> --
21:43:36 SQL> 
21:43:36 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:43:36 SQL> 
21:43:36 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.40
21:43:36 SQL> 
21:43:36 SQL> -- I created di5min here:
21:43:36 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:43:36 SQL> 
21:43:36 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:43:36   2  SELECT
21:43:36   3  pair
21:43:36   4  ,ydate
21:43:36   5  ,prdate
21:43:36   6  ,rownum rnum -- acts as t in my time-series
21:43:36   7  ,clse
21:43:36   8  -- Derive a bunch of attributes from clse, the latest price:
21:43:36   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:43:36  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:43:36  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:43:36  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:43:36  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:43:36  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:43:36  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:43:36  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:43:36  17  --
21:43:36  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:43:36  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:43:36  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:43:36  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:43:36  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:43:36  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:43:36  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:43:36  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:43:36  26  --
21:43:36  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:43:36  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:43:36  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:43:36  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:43:36  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:43:36  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:43:36  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:43:36  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:43:36  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:43:36  36  FROM di5min WHERE pair LIKE'%jpy%'
21:43:36  37  AND ydate > sysdate - 95
21:43:36  38  ORDER BY ydate
21:43:36  39  /

View created.

Elapsed: 00:00:00.05
21:43:37 SQL> 
21:43:37 SQL> -- rpt
21:43:37 SQL> 
21:43:37 SQL> SELECT
21:43:37   2  pair
21:43:37   3  ,COUNT(pair)
21:43:37   4  ,MIN(clse),MAX(clse)
21:43:37   5  ,MIN(avg6),MAX(avg6)
21:43:37   6  ,MIN(ydate),MAX(ydate)
21:43:37   7  FROM svm6102
21:43:37   8  GROUP BY pair
21:43:37   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19812	 80.25	   84.485 80.3595205 84.3105479 2010-10-03 21:45:01 2011-01-06 21:40:00

Elapsed: 00:00:00.95
21:43:37 SQL> 
21:43:37 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:43:37 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.34
21:43:38 SQL> CREATE TABLE svm6122 COMPRESS AS
21:43:38   2  SELECT
21:43:38   3  pair
21:43:38   4  ,ydate
21:43:38   5  ,prdate
21:43:38   6  ,clse
21:43:38   7  -- g6 is important. I want to predict g6:
21:43:38   8  ,ld6 - clse g6
21:43:38   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:43:38  10  -- I want more attributes from the ones I derived above:
21:43:38  11  -- clse relation to moving-min
21:43:38  12  ,clse-min4  cm4
21:43:38  13  ,clse-min6  cm6
21:43:38  14  ,clse-min8  cm8
21:43:38  15  ,clse-min10 cm10
21:43:38  16  ,clse-min12 cm12
21:43:38  17  ,clse-min14 cm14
21:43:38  18  ,clse-min16 cm16
21:43:38  19  ,clse-min18 cm18
21:43:38  20  -- clse relation to moving-avg
21:43:38  21  ,clse-avg4  ca4
21:43:38  22  ,clse-avg6  ca6
21:43:38  23  ,clse-avg8  ca8
21:43:38  24  ,clse-avg10 ca10
21:43:38  25  ,clse-avg12 ca12
21:43:38  26  ,clse-avg14 ca14
21:43:38  27  ,clse-avg16 ca16
21:43:38  28  ,clse-avg18 ca18
21:43:38  29  -- clse relation to moving-max
21:43:38  30  ,clse-max4  cx4
21:43:38  31  ,clse-max6  cx6
21:43:38  32  ,clse-max8  cx8
21:43:38  33  ,clse-max10 cx10
21:43:38  34  ,clse-max12 cx12
21:43:38  35  ,clse-max14 cx14
21:43:38  36  ,clse-max16 cx16
21:43:38  37  ,clse-max18 cx18
21:43:38  38  -- Derive more attributes.
21:43:38  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:43:38  40  -- But COVAR_POP is more stable:
21:43:38  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:43:38  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:43:38  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:43:38  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:43:38  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:43:38  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:43:38  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:43:38  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:43:38  49  -- Derive date related attributes:
21:43:38  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:43:38  51  ,0+TO_CHAR(ydate,'D')d
21:43:38  52  ,0+TO_CHAR(ydate,'W')w
21:43:38  53  -- mpm stands for minutes-past-midnight:
21:43:38  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:43:38  55  -- mph stands for minutes-past-hour:
21:43:38  56  ,0+TO_CHAR(ydate,'MI')mph
21:43:38  57  FROM svm6102
21:43:38  58  ORDER BY ydate
21:43:38  59  /

Table created.

Elapsed: 00:00:02.11
21:43:40 SQL> 
21:43:40 SQL> -- rpt
21:43:40 SQL> 
21:43:40 SQL> SELECT
21:43:40   2  pair
21:43:40   3  ,COUNT(pair)
21:43:40   4  ,MIN(clse),MAX(clse)
21:43:40   5  ,MIN(ydate),MAX(ydate)
21:43:40   6  FROM svm6122
21:43:40   7  GROUP BY pair
21:43:40   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19812	 80.25	   84.485 2010-10-03 21:45:01 2011-01-06 21:40:00

Elapsed: 00:00:00.08
21:43:40 SQL> 
21:43:40 SQL> -- Prepare for derivation of NTILE based params:
21:43:40 SQL> 
21:43:40 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.30
21:43:40 SQL> CREATE TABLE svm6142 COMPRESS AS
21:43:40   2  SELECT
21:43:40   3  pair
21:43:40   4  ,ydate
21:43:40   5  ,prdate
21:43:40   6  ,clse
21:43:40   7  ,g6
21:43:40   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:43:40   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:43:40  10  ,CASE WHEN trend IS NULL THEN 1
21:43:40  11  	    WHEN trend =0      THEN 1
21:43:40  12  	    ELSE trend END trend
21:43:40  13  ,cm4
21:43:40  14  ,cm6
21:43:40  15  ,cm8
21:43:40  16  ,cm10
21:43:40  17  ,cm12
21:43:40  18  ,cm14
21:43:40  19  ,cm16
21:43:40  20  ,cm18
21:43:40  21  --
21:43:40  22  ,ca4
21:43:40  23  ,ca6
21:43:40  24  ,ca8
21:43:40  25  ,ca10
21:43:40  26  ,ca12
21:43:40  27  ,ca14
21:43:40  28  ,ca16
21:43:40  29  ,ca18
21:43:40  30  --
21:43:40  31  ,cx4
21:43:40  32  ,cx6
21:43:40  33  ,cx8
21:43:40  34  ,cx10
21:43:40  35  ,cx12
21:43:40  36  ,cx14
21:43:40  37  ,cx16
21:43:40  38  ,cx18
21:43:40  39  --
21:43:40  40  ,crr4
21:43:40  41  ,crr6
21:43:40  42  ,crr8
21:43:40  43  ,crr10
21:43:40  44  ,crr12
21:43:40  45  ,crr14
21:43:40  46  ,crr16
21:43:40  47  ,crr18
21:43:40  48  --
21:43:40  49  ,hh
21:43:40  50  ,d
21:43:40  51  ,w
21:43:40  52  ,mpm
21:43:40  53  ,mph
21:43:40  54  FROM svm6122
21:43:40  55  ORDER BY ydate
21:43:40  56  /

Table created.

Elapsed: 00:00:00.37
21:43:41 SQL> 
21:43:41 SQL> -- rpt
21:43:41 SQL> 
21:43:41 SQL> SELECT
21:43:41   2  pair
21:43:41   3  ,trend
21:43:41   4  ,gatt
21:43:41   5  ,COUNT(pair)
21:43:41   6  ,AVG(g6)
21:43:41   7  FROM svm6142
21:43:41   8  GROUP BY pair,trend,gatt
21:43:41   9  ORDER BY pair,trend,gatt
21:43:41  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5184 -.16553339
usd_jpy 	-1 up	      4905 .169403449
usd_jpy 	-1		 5
usd_jpy 	 1 nup	      5077 -.15499158
usd_jpy 	 1 up	      4574 .174195109
usd_jpy 	 1		67

6 rows selected.

Elapsed: 00:00:00.05
21:43:41 SQL> 
21:43:41 SQL> 
21:43:41 SQL> -- Derive NTILE based params:
21:43:41 SQL> 
21:43:41 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.19
21:43:41 SQL> CREATE TABLE svm6162 COMPRESS AS
21:43:41   2  SELECT
21:43:41   3  pair
21:43:41   4  ,ydate
21:43:41   5  ,prdate
21:43:41   6  ,clse
21:43:41   7  ,g6
21:43:41   8  ,gatt
21:43:41   9  ,gattn
21:43:41  10  ,trend
21:43:41  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:43:41  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:43:41  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:43:41  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:43:41  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:43:41  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:43:41  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:43:41  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:43:41  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:43:41  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:43:41  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:43:41  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:43:41  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:43:41  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:43:41  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:43:41  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:43:41  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:43:41  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:43:41  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:43:41  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:43:41  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:43:41  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:43:41  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:43:41  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:43:41  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:43:41  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:43:41  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:43:41  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:43:41  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:43:41  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:43:41  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:43:41  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:43:41  43  ,hh  att32
21:43:41  44  ,d   att33
21:43:41  45  ,w   att34
21:43:41  46  ,mpm att35
21:43:41  47  ,mph att36
21:43:41  48  ,trend att37
21:43:41  49  FROM svm6142
21:43:41  50  ORDER BY ydate
21:43:41  51  /

Table created.

Elapsed: 00:00:04.78
21:43:46 SQL> 
21:43:46 SQL> -- rpt
21:43:46 SQL> 
21:43:46 SQL> SELECT
21:43:46   2  pair
21:43:46   3  ,trend
21:43:46   4  ,gatt
21:43:46   5  ,COUNT(pair)
21:43:46   6  ,AVG(g6)
21:43:46   7  FROM svm6162
21:43:46   8  GROUP BY pair,trend,gatt
21:43:46   9  ORDER BY pair,trend,gatt
21:43:46  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5184 -.16553339
usd_jpy 	-1 up	      4905 .169403449
usd_jpy 	-1		 5
usd_jpy 	 1 nup	      5077 -.15499158
usd_jpy 	 1 up	      4574 .174195109
usd_jpy 	 1		67

6 rows selected.

Elapsed: 00:00:00.04
21:43:46 SQL> 
21:43:46 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
21:43:46 SQL> CREATE TABLE modsrc COMPRESS AS
21:43:46   2  SELECT
21:43:46   3  pair
21:43:46   4  ,ydate
21:43:46   5  ,prdate
21:43:46   6  ,trend
21:43:46   7  ,g6
21:43:46   8  ,gatt
21:43:46   9  ,gattn
21:43:46  10  FROM svm6162
21:43:46  11  /

Table created.

Elapsed: 00:00:00.08
21:43:46 SQL> 
21:43:46 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
21:43:46 SQL> 
21:43:46 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
21:43:46 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
21:43:46   2  SELECT
21:43:46   3  ydate
21:43:46   4  ,trend jpy_trend
21:43:46   5  ,g6    jpy_g6
21:43:46   6  ,gatt  jpy_gatt
21:43:46   7  ,gattn jpy_gattn
21:43:46   8  FROM modsrc
21:43:46   9  /

Table created.

Elapsed: 00:00:00.07
21:43:46 SQL> 
21:43:46 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
21:43:47 SQL> 
21:43:47 SQL> -- I need a copy of the attributes:
21:43:47 SQL> 
21:43:47 SQL> 
21:43:47 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.06
21:43:47 SQL> CREATE TABLE jpy_att COMPRESS AS
21:43:47   2  SELECT
21:43:47   3  ydate
21:43:47   4  ,att00 jpy_att00
21:43:47   5  ,att01 jpy_att01
21:43:47   6  ,att02 jpy_att02
21:43:47   7  ,att03 jpy_att03
21:43:47   8  ,att04 jpy_att04
21:43:47   9  ,att05 jpy_att05
21:43:47  10  ,att06 jpy_att06
21:43:47  11  ,att07 jpy_att07
21:43:47  12  ,att08 jpy_att08
21:43:47  13  ,att09 jpy_att09
21:43:47  14  ,att10 jpy_att10
21:43:47  15  ,att11 jpy_att11
21:43:47  16  ,att12 jpy_att12
21:43:47  17  ,att13 jpy_att13
21:43:47  18  ,att14 jpy_att14
21:43:47  19  ,att15 jpy_att15
21:43:47  20  ,att16 jpy_att16
21:43:47  21  ,att17 jpy_att17
21:43:47  22  ,att18 jpy_att18
21:43:47  23  ,att19 jpy_att19
21:43:47  24  ,att20 jpy_att20
21:43:47  25  ,att21 jpy_att21
21:43:47  26  ,att22 jpy_att22
21:43:47  27  ,att23 jpy_att23
21:43:47  28  ,att24 jpy_att24
21:43:47  29  ,att25 jpy_att25
21:43:47  30  ,att26 jpy_att26
21:43:47  31  ,att27 jpy_att27
21:43:47  32  ,att28 jpy_att28
21:43:47  33  ,att29 jpy_att29
21:43:47  34  ,att30 jpy_att30
21:43:47  35  ,att31 jpy_att31
21:43:47  36  ,att32 jpy_att32
21:43:47  37  ,att33 jpy_att33
21:43:47  38  ,att34 jpy_att34
21:43:47  39  ,att35 jpy_att35
21:43:47  40  ,att36 jpy_att36
21:43:47  41  ,att37 jpy_att37
21:43:47  42  FROM svm6162
21:43:47  43  /

Table created.

Elapsed: 00:00:00.17
21:43:47 SQL> 
21:43:47 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
21:43:47 SQL> 
21:43:47 SQL> -- rpt
21:43:47 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19812

Elapsed: 00:00:00.93
21:43:48 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19812

Elapsed: 00:00:00.00
21:43:48 SQL> 
21:43:48 SQL> --
21:43:48 SQL> -- cad610.sql
21:43:48 SQL> --
21:43:48 SQL> 
21:43:48 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:43:48 SQL> 
21:43:48 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.49
21:43:49 SQL> 
21:43:49 SQL> -- I created di5min here:
21:43:49 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:43:49 SQL> 
21:43:49 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:43:49   2  SELECT
21:43:49   3  pair
21:43:49   4  ,ydate
21:43:49   5  ,prdate
21:43:49   6  ,rownum rnum -- acts as t in my time-series
21:43:49   7  ,clse
21:43:49   8  -- Derive a bunch of attributes from clse, the latest price:
21:43:49   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:43:49  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:43:49  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:43:49  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:43:49  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:43:49  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:43:49  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:43:49  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:43:49  17  --
21:43:49  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:43:49  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:43:49  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:43:49  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:43:49  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:43:49  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:43:49  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:43:49  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:43:49  26  --
21:43:49  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:43:49  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:43:49  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:43:49  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:43:49  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:43:49  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:43:49  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:43:49  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:43:49  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:43:49  36  FROM di5min WHERE pair LIKE'%cad%'
21:43:49  37  AND ydate > sysdate - 95
21:43:49  38  ORDER BY ydate
21:43:49  39  /

View created.

Elapsed: 00:00:00.04
21:43:49 SQL> 
21:43:49 SQL> -- rpt
21:43:49 SQL> 
21:43:49 SQL> SELECT
21:43:49   2  pair
21:43:49   3  ,COUNT(pair)
21:43:49   4  ,MIN(clse),MAX(clse)
21:43:49   5  ,MIN(avg6),MAX(avg6)
21:43:49   6  ,MIN(ydate),MAX(ydate)
21:43:49   7  FROM svm6102
21:43:49   8  GROUP BY pair
21:43:49   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19812    .988925	   1.0355 .990602741 1.03282877 2010-10-03 21:45:01 2011-01-06 21:40:00

Elapsed: 00:00:00.86
21:43:50 SQL> 
21:43:50 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:43:50 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
21:43:50 SQL> CREATE TABLE svm6122 COMPRESS AS
21:43:50   2  SELECT
21:43:50   3  pair
21:43:50   4  ,ydate
21:43:50   5  ,prdate
21:43:50   6  ,clse
21:43:50   7  -- g6 is important. I want to predict g6:
21:43:50   8  ,ld6 - clse g6
21:43:50   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:43:50  10  -- I want more attributes from the ones I derived above:
21:43:50  11  -- clse relation to moving-min
21:43:50  12  ,clse-min4  cm4
21:43:50  13  ,clse-min6  cm6
21:43:50  14  ,clse-min8  cm8
21:43:50  15  ,clse-min10 cm10
21:43:50  16  ,clse-min12 cm12
21:43:50  17  ,clse-min14 cm14
21:43:50  18  ,clse-min16 cm16
21:43:50  19  ,clse-min18 cm18
21:43:50  20  -- clse relation to moving-avg
21:43:50  21  ,clse-avg4  ca4
21:43:50  22  ,clse-avg6  ca6
21:43:50  23  ,clse-avg8  ca8
21:43:50  24  ,clse-avg10 ca10
21:43:50  25  ,clse-avg12 ca12
21:43:50  26  ,clse-avg14 ca14
21:43:50  27  ,clse-avg16 ca16
21:43:50  28  ,clse-avg18 ca18
21:43:50  29  -- clse relation to moving-max
21:43:50  30  ,clse-max4  cx4
21:43:50  31  ,clse-max6  cx6
21:43:50  32  ,clse-max8  cx8
21:43:50  33  ,clse-max10 cx10
21:43:50  34  ,clse-max12 cx12
21:43:50  35  ,clse-max14 cx14
21:43:50  36  ,clse-max16 cx16
21:43:50  37  ,clse-max18 cx18
21:43:50  38  -- Derive more attributes.
21:43:50  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:43:50  40  -- But COVAR_POP is more stable:
21:43:50  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:43:50  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:43:50  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:43:50  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:43:50  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:43:50  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:43:50  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:43:50  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:43:50  49  -- Derive date related attributes:
21:43:50  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:43:50  51  ,0+TO_CHAR(ydate,'D')d
21:43:50  52  ,0+TO_CHAR(ydate,'W')w
21:43:50  53  -- mpm stands for minutes-past-midnight:
21:43:50  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:43:50  55  -- mph stands for minutes-past-hour:
21:43:50  56  ,0+TO_CHAR(ydate,'MI')mph
21:43:50  57  FROM svm6102
21:43:50  58  ORDER BY ydate
21:43:50  59  /

Table created.

Elapsed: 00:00:02.08
21:43:52 SQL> 
21:43:52 SQL> -- rpt
21:43:52 SQL> 
21:43:52 SQL> SELECT
21:43:52   2  pair
21:43:52   3  ,COUNT(pair)
21:43:52   4  ,MIN(clse),MAX(clse)
21:43:52   5  ,MIN(ydate),MAX(ydate)
21:43:52   6  FROM svm6122
21:43:52   7  GROUP BY pair
21:43:52   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19812    .988925	   1.0355 2010-10-03 21:45:01 2011-01-06 21:40:00

Elapsed: 00:00:00.05
21:43:52 SQL> 
21:43:52 SQL> -- Prepare for derivation of NTILE based params:
21:43:52 SQL> 
21:43:52 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
21:43:52 SQL> CREATE TABLE svm6142 COMPRESS AS
21:43:52   2  SELECT
21:43:52   3  pair
21:43:52   4  ,ydate
21:43:52   5  ,prdate
21:43:52   6  ,clse
21:43:52   7  ,g6
21:43:52   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:43:52   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:43:52  10  ,CASE WHEN trend IS NULL THEN 1
21:43:52  11  	    WHEN trend =0      THEN 1
21:43:52  12  	    ELSE trend END trend
21:43:52  13  ,cm4
21:43:52  14  ,cm6
21:43:52  15  ,cm8
21:43:52  16  ,cm10
21:43:52  17  ,cm12
21:43:52  18  ,cm14
21:43:52  19  ,cm16
21:43:52  20  ,cm18
21:43:52  21  --
21:43:52  22  ,ca4
21:43:52  23  ,ca6
21:43:52  24  ,ca8
21:43:52  25  ,ca10
21:43:52  26  ,ca12
21:43:52  27  ,ca14
21:43:52  28  ,ca16
21:43:52  29  ,ca18
21:43:52  30  --
21:43:52  31  ,cx4
21:43:52  32  ,cx6
21:43:52  33  ,cx8
21:43:52  34  ,cx10
21:43:52  35  ,cx12
21:43:52  36  ,cx14
21:43:52  37  ,cx16
21:43:52  38  ,cx18
21:43:52  39  --
21:43:52  40  ,crr4
21:43:52  41  ,crr6
21:43:52  42  ,crr8
21:43:52  43  ,crr10
21:43:52  44  ,crr12
21:43:52  45  ,crr14
21:43:52  46  ,crr16
21:43:52  47  ,crr18
21:43:52  48  --
21:43:52  49  ,hh
21:43:52  50  ,d
21:43:52  51  ,w
21:43:52  52  ,mpm
21:43:52  53  ,mph
21:43:52  54  FROM svm6122
21:43:52  55  ORDER BY ydate
21:43:52  56  /

Table created.

Elapsed: 00:00:00.36
21:43:53 SQL> 
21:43:53 SQL> -- rpt
21:43:53 SQL> 
21:43:53 SQL> SELECT
21:43:53   2  pair
21:43:53   3  ,trend
21:43:53   4  ,gatt
21:43:53   5  ,COUNT(pair)
21:43:53   6  ,AVG(g6)
21:43:53   7  FROM svm6142
21:43:53   8  GROUP BY pair,trend,gatt
21:43:53   9  ORDER BY pair,trend,gatt
21:43:53  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7326 -.00124091
usd_cad 	-1 up	      3185 .003051432
usd_cad 	-1		 7
usd_cad 	 1 nup	      6839 -.00160961
usd_cad 	 1 up	      2390 .003645009
usd_cad 	 1		65

6 rows selected.

Elapsed: 00:00:00.04
21:43:53 SQL> 
21:43:53 SQL> 
21:43:53 SQL> -- Derive NTILE based params:
21:43:53 SQL> 
21:43:53 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
21:43:53 SQL> CREATE TABLE svm6162 COMPRESS AS
21:43:53   2  SELECT
21:43:53   3  pair
21:43:53   4  ,ydate
21:43:53   5  ,prdate
21:43:53   6  ,clse
21:43:53   7  ,g6
21:43:53   8  ,gatt
21:43:53   9  ,gattn
21:43:53  10  ,trend
21:43:53  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:43:53  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:43:53  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:43:53  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:43:53  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:43:53  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:43:53  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:43:53  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:43:53  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:43:53  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:43:53  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:43:53  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:43:53  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:43:53  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:43:53  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:43:53  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:43:53  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:43:53  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:43:53  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:43:53  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:43:53  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:43:53  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:43:53  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:43:53  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:43:53  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:43:53  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:43:53  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:43:53  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:43:53  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:43:53  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:43:53  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:43:53  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:43:53  43  ,hh  att32
21:43:53  44  ,d   att33
21:43:53  45  ,w   att34
21:43:53  46  ,mpm att35
21:43:53  47  ,mph att36
21:43:53  48  ,trend att37
21:43:53  49  FROM svm6142
21:43:53  50  ORDER BY ydate
21:43:53  51  /

Table created.

Elapsed: 00:00:04.91
21:43:58 SQL> 
21:43:58 SQL> -- rpt
21:43:58 SQL> 
21:43:58 SQL> SELECT
21:43:58   2  pair
21:43:58   3  ,trend
21:43:58   4  ,gatt
21:43:58   5  ,COUNT(pair)
21:43:58   6  ,AVG(g6)
21:43:58   7  FROM svm6162
21:43:58   8  GROUP BY pair,trend,gatt
21:43:58   9  ORDER BY pair,trend,gatt
21:43:58  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7326 -.00124091
usd_cad 	-1 up	      3185 .003051432
usd_cad 	-1		 7
usd_cad 	 1 nup	      6839 -.00160961
usd_cad 	 1 up	      2390 .003645009
usd_cad 	 1		65

6 rows selected.

Elapsed: 00:00:00.03
21:43:58 SQL> 
21:43:58 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
21:43:58 SQL> CREATE TABLE modsrc COMPRESS AS
21:43:58   2  SELECT
21:43:58   3  pair
21:43:58   4  ,ydate
21:43:58   5  ,prdate
21:43:58   6  ,trend
21:43:58   7  ,g6
21:43:58   8  ,gatt
21:43:58   9  ,gattn
21:43:58  10  FROM svm6162
21:43:58  11  /

Table created.

Elapsed: 00:00:00.08
21:43:58 SQL> 
21:43:58 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
21:43:58 SQL> 
21:43:58 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.07
21:43:58 SQL> CREATE TABLE cad_ms610 COMPRESS AS
21:43:58   2  SELECT
21:43:58   3  ydate
21:43:58   4  ,trend cad_trend
21:43:58   5  ,g6    cad_g6
21:43:58   6  ,gatt  cad_gatt
21:43:58   7  ,gattn cad_gattn
21:43:58   8  FROM modsrc
21:43:58   9  /

Table created.

Elapsed: 00:00:00.07
21:43:58 SQL> 
21:43:58 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
21:43:58 SQL> 
21:43:58 SQL> -- I need a copy of the attributes:
21:43:58 SQL> 
21:43:58 SQL> 
21:43:58 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.04
21:43:58 SQL> CREATE TABLE cad_att COMPRESS AS
21:43:58   2  SELECT
21:43:58   3  ydate
21:43:58   4  ,att00 cad_att00
21:43:58   5  ,att01 cad_att01
21:43:58   6  ,att02 cad_att02
21:43:58   7  ,att03 cad_att03
21:43:58   8  ,att04 cad_att04
21:43:58   9  ,att05 cad_att05
21:43:58  10  ,att06 cad_att06
21:43:58  11  ,att07 cad_att07
21:43:58  12  ,att08 cad_att08
21:43:58  13  ,att09 cad_att09
21:43:58  14  ,att10 cad_att10
21:43:58  15  ,att11 cad_att11
21:43:58  16  ,att12 cad_att12
21:43:58  17  ,att13 cad_att13
21:43:58  18  ,att14 cad_att14
21:43:58  19  ,att15 cad_att15
21:43:58  20  ,att16 cad_att16
21:43:58  21  ,att17 cad_att17
21:43:58  22  ,att18 cad_att18
21:43:58  23  ,att19 cad_att19
21:43:58  24  ,att20 cad_att20
21:43:58  25  ,att21 cad_att21
21:43:58  26  ,att22 cad_att22
21:43:58  27  ,att23 cad_att23
21:43:58  28  ,att24 cad_att24
21:43:58  29  ,att25 cad_att25
21:43:58  30  ,att26 cad_att26
21:43:58  31  ,att27 cad_att27
21:43:58  32  ,att28 cad_att28
21:43:58  33  ,att29 cad_att29
21:43:58  34  ,att30 cad_att30
21:43:58  35  ,att31 cad_att31
21:43:58  36  ,att32 cad_att32
21:43:58  37  ,att33 cad_att33
21:43:58  38  ,att34 cad_att34
21:43:58  39  ,att35 cad_att35
21:43:58  40  ,att36 cad_att36
21:43:58  41  ,att37 cad_att37
21:43:58  42  FROM svm6162
21:43:58  43  /

Table created.

Elapsed: 00:00:00.20
21:43:59 SQL> 
21:43:59 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
21:43:59 SQL> 
21:43:59 SQL> -- rpt
21:43:59 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19812

Elapsed: 00:00:00.85
21:44:00 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19812

Elapsed: 00:00:00.00
21:44:00 SQL> 
21:44:00 SQL> --
21:44:00 SQL> -- chf610.sql
21:44:00 SQL> --
21:44:00 SQL> 
21:44:00 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:44:00 SQL> 
21:44:00 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.37
21:44:00 SQL> 
21:44:00 SQL> -- I created di5min here:
21:44:00 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:44:00 SQL> 
21:44:00 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:44:00   2  SELECT
21:44:00   3  pair
21:44:00   4  ,ydate
21:44:00   5  ,prdate
21:44:00   6  ,rownum rnum -- acts as t in my time-series
21:44:00   7  ,clse
21:44:00   8  -- Derive a bunch of attributes from clse, the latest price:
21:44:00   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:44:00  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:44:00  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:44:00  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:44:00  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:44:00  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:44:00  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:44:00  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:44:00  17  --
21:44:00  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:44:00  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:44:00  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:44:00  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:44:00  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:44:00  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:44:00  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:44:00  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:44:00  26  --
21:44:00  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:44:00  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:44:00  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:44:00  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:44:00  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:44:00  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:44:00  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:44:00  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:44:00  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:44:00  36  FROM di5min WHERE pair LIKE'%chf%'
21:44:00  37  AND ydate > sysdate - 95
21:44:00  38  ORDER BY ydate
21:44:00  39  /

View created.

Elapsed: 00:00:00.05
21:44:00 SQL> 
21:44:00 SQL> -- rpt
21:44:00 SQL> 
21:44:00 SQL> SELECT
21:44:00   2  pair
21:44:00   3  ,COUNT(pair)
21:44:00   4  ,MIN(clse),MAX(clse)
21:44:00   5  ,MIN(avg6),MAX(avg6)
21:44:00   6  ,MIN(ydate),MAX(ydate)
21:44:00   7  FROM svm6102
21:44:00   8  GROUP BY pair
21:44:00   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19815    .931675	  1.00635 .933258732 1.00498151 2010-10-03 21:45:01 2011-01-06 21:40:00

Elapsed: 00:00:00.86
21:44:01 SQL> 
21:44:01 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:44:01 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.25
21:44:01 SQL> CREATE TABLE svm6122 COMPRESS AS
21:44:01   2  SELECT
21:44:01   3  pair
21:44:01   4  ,ydate
21:44:01   5  ,prdate
21:44:01   6  ,clse
21:44:01   7  -- g6 is important. I want to predict g6:
21:44:01   8  ,ld6 - clse g6
21:44:01   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:44:01  10  -- I want more attributes from the ones I derived above:
21:44:01  11  -- clse relation to moving-min
21:44:01  12  ,clse-min4  cm4
21:44:01  13  ,clse-min6  cm6
21:44:01  14  ,clse-min8  cm8
21:44:01  15  ,clse-min10 cm10
21:44:01  16  ,clse-min12 cm12
21:44:01  17  ,clse-min14 cm14
21:44:01  18  ,clse-min16 cm16
21:44:01  19  ,clse-min18 cm18
21:44:01  20  -- clse relation to moving-avg
21:44:01  21  ,clse-avg4  ca4
21:44:01  22  ,clse-avg6  ca6
21:44:01  23  ,clse-avg8  ca8
21:44:01  24  ,clse-avg10 ca10
21:44:01  25  ,clse-avg12 ca12
21:44:01  26  ,clse-avg14 ca14
21:44:01  27  ,clse-avg16 ca16
21:44:01  28  ,clse-avg18 ca18
21:44:01  29  -- clse relation to moving-max
21:44:01  30  ,clse-max4  cx4
21:44:01  31  ,clse-max6  cx6
21:44:01  32  ,clse-max8  cx8
21:44:01  33  ,clse-max10 cx10
21:44:01  34  ,clse-max12 cx12
21:44:01  35  ,clse-max14 cx14
21:44:01  36  ,clse-max16 cx16
21:44:01  37  ,clse-max18 cx18
21:44:01  38  -- Derive more attributes.
21:44:01  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:44:01  40  -- But COVAR_POP is more stable:
21:44:01  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:44:01  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:44:01  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:44:01  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:44:01  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:44:01  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:44:01  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:44:01  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:44:01  49  -- Derive date related attributes:
21:44:01  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:44:01  51  ,0+TO_CHAR(ydate,'D')d
21:44:01  52  ,0+TO_CHAR(ydate,'W')w
21:44:01  53  -- mpm stands for minutes-past-midnight:
21:44:01  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:44:01  55  -- mph stands for minutes-past-hour:
21:44:01  56  ,0+TO_CHAR(ydate,'MI')mph
21:44:01  57  FROM svm6102
21:44:01  58  ORDER BY ydate
21:44:01  59  /

Table created.

Elapsed: 00:00:02.09
21:44:04 SQL> 
21:44:04 SQL> -- rpt
21:44:04 SQL> 
21:44:04 SQL> SELECT
21:44:04   2  pair
21:44:04   3  ,COUNT(pair)
21:44:04   4  ,MIN(clse),MAX(clse)
21:44:04   5  ,MIN(ydate),MAX(ydate)
21:44:04   6  FROM svm6122
21:44:04   7  GROUP BY pair
21:44:04   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19815    .931675	  1.00635 2010-10-03 21:45:01 2011-01-06 21:40:00

Elapsed: 00:00:00.04
21:44:04 SQL> 
21:44:04 SQL> -- Prepare for derivation of NTILE based params:
21:44:04 SQL> 
21:44:04 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.31
21:44:04 SQL> CREATE TABLE svm6142 COMPRESS AS
21:44:04   2  SELECT
21:44:04   3  pair
21:44:04   4  ,ydate
21:44:04   5  ,prdate
21:44:04   6  ,clse
21:44:04   7  ,g6
21:44:04   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:44:04   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:44:04  10  ,CASE WHEN trend IS NULL THEN 1
21:44:04  11  	    WHEN trend =0      THEN 1
21:44:04  12  	    ELSE trend END trend
21:44:04  13  ,cm4
21:44:04  14  ,cm6
21:44:04  15  ,cm8
21:44:04  16  ,cm10
21:44:04  17  ,cm12
21:44:04  18  ,cm14
21:44:04  19  ,cm16
21:44:04  20  ,cm18
21:44:04  21  --
21:44:04  22  ,ca4
21:44:04  23  ,ca6
21:44:04  24  ,ca8
21:44:04  25  ,ca10
21:44:04  26  ,ca12
21:44:04  27  ,ca14
21:44:04  28  ,ca16
21:44:04  29  ,ca18
21:44:04  30  --
21:44:04  31  ,cx4
21:44:04  32  ,cx6
21:44:04  33  ,cx8
21:44:04  34  ,cx10
21:44:04  35  ,cx12
21:44:04  36  ,cx14
21:44:04  37  ,cx16
21:44:04  38  ,cx18
21:44:04  39  --
21:44:04  40  ,crr4
21:44:04  41  ,crr6
21:44:04  42  ,crr8
21:44:04  43  ,crr10
21:44:04  44  ,crr12
21:44:04  45  ,crr14
21:44:04  46  ,crr16
21:44:04  47  ,crr18
21:44:04  48  --
21:44:04  49  ,hh
21:44:04  50  ,d
21:44:04  51  ,w
21:44:04  52  ,mpm
21:44:04  53  ,mph
21:44:04  54  FROM svm6122
21:44:04  55  ORDER BY ydate
21:44:04  56  /

Table created.

Elapsed: 00:00:00.37
21:44:04 SQL> 
21:44:04 SQL> -- rpt
21:44:04 SQL> 
21:44:04 SQL> SELECT
21:44:04   2  pair
21:44:04   3  ,trend
21:44:04   4  ,gatt
21:44:04   5  ,COUNT(pair)
21:44:04   6  ,AVG(g6)
21:44:04   7  FROM svm6142
21:44:04   8  GROUP BY pair,trend,gatt
21:44:04   9  ORDER BY pair,trend,gatt
21:44:04  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7120 -.00198357
usd_chf 	-1 up	      3075 .003818188
usd_chf 	-1		58
usd_chf 	 1 nup	      6583 -.00154478
usd_chf 	 1 up	      2965 .003945905
usd_chf 	 1		14

6 rows selected.

Elapsed: 00:00:00.04
21:44:04 SQL> 
21:44:04 SQL> 
21:44:04 SQL> -- Derive NTILE based params:
21:44:04 SQL> 
21:44:04 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
21:44:04 SQL> CREATE TABLE svm6162 COMPRESS AS
21:44:04   2  SELECT
21:44:04   3  pair
21:44:04   4  ,ydate
21:44:04   5  ,prdate
21:44:04   6  ,clse
21:44:04   7  ,g6
21:44:04   8  ,gatt
21:44:04   9  ,gattn
21:44:04  10  ,trend
21:44:04  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:44:04  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:44:04  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:44:04  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:44:04  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:44:04  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:44:04  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:44:04  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:44:04  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:44:04  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:44:04  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:44:04  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:44:04  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:44:04  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:44:04  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:44:04  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:44:04  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:44:04  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:44:04  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:44:04  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:44:04  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:44:04  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:44:04  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:44:04  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:44:04  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:44:04  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:44:04  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:44:04  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:44:04  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:44:04  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:44:04  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:44:04  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:44:04  43  ,hh  att32
21:44:04  44  ,d   att33
21:44:04  45  ,w   att34
21:44:04  46  ,mpm att35
21:44:04  47  ,mph att36
21:44:04  48  ,trend att37
21:44:04  49  FROM svm6142
21:44:04  50  ORDER BY ydate
21:44:04  51  /

Table created.

Elapsed: 00:00:04.88
21:44:09 SQL> 
21:44:09 SQL> -- rpt
21:44:09 SQL> 
21:44:09 SQL> SELECT
21:44:09   2  pair
21:44:09   3  ,trend
21:44:09   4  ,gatt
21:44:09   5  ,COUNT(pair)
21:44:09   6  ,AVG(g6)
21:44:09   7  FROM svm6162
21:44:09   8  GROUP BY pair,trend,gatt
21:44:09   9  ORDER BY pair,trend,gatt
21:44:09  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7120 -.00198357
usd_chf 	-1 up	      3075 .003818188
usd_chf 	-1		58
usd_chf 	 1 nup	      6583 -.00154478
usd_chf 	 1 up	      2965 .003945905
usd_chf 	 1		14

6 rows selected.

Elapsed: 00:00:00.03
21:44:09 SQL> 
21:44:09 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
21:44:09 SQL> CREATE TABLE modsrc COMPRESS AS
21:44:09   2  SELECT
21:44:09   3  pair
21:44:09   4  ,ydate
21:44:09   5  ,prdate
21:44:09   6  ,trend
21:44:09   7  ,g6
21:44:09   8  ,gatt
21:44:09   9  ,gattn
21:44:09  10  FROM svm6162
21:44:09  11  /

Table created.

Elapsed: 00:00:00.10
21:44:10 SQL> 
21:44:10 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
21:44:10 SQL> 
21:44:10 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
21:44:10 SQL> CREATE TABLE chf_ms610 COMPRESS AS
21:44:10   2  SELECT
21:44:10   3  ydate
21:44:10   4  ,trend chf_trend
21:44:10   5  ,g6    chf_g6
21:44:10   6  ,gatt  chf_gatt
21:44:10   7  ,gattn chf_gattn
21:44:10   8  FROM modsrc
21:44:10   9  /

Table created.

Elapsed: 00:00:00.07
21:44:10 SQL> 
21:44:10 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
21:44:10 SQL> 
21:44:10 SQL> -- I need a copy of the attributes:
21:44:10 SQL> 
21:44:10 SQL> 
21:44:10 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.05
21:44:10 SQL> CREATE TABLE chf_att COMPRESS AS
21:44:10   2  SELECT
21:44:10   3  ydate
21:44:10   4  ,att00 chf_att00
21:44:10   5  ,att01 chf_att01
21:44:10   6  ,att02 chf_att02
21:44:10   7  ,att03 chf_att03
21:44:10   8  ,att04 chf_att04
21:44:10   9  ,att05 chf_att05
21:44:10  10  ,att06 chf_att06
21:44:10  11  ,att07 chf_att07
21:44:10  12  ,att08 chf_att08
21:44:10  13  ,att09 chf_att09
21:44:10  14  ,att10 chf_att10
21:44:10  15  ,att11 chf_att11
21:44:10  16  ,att12 chf_att12
21:44:10  17  ,att13 chf_att13
21:44:10  18  ,att14 chf_att14
21:44:10  19  ,att15 chf_att15
21:44:10  20  ,att16 chf_att16
21:44:10  21  ,att17 chf_att17
21:44:10  22  ,att18 chf_att18
21:44:10  23  ,att19 chf_att19
21:44:10  24  ,att20 chf_att20
21:44:10  25  ,att21 chf_att21
21:44:10  26  ,att22 chf_att22
21:44:10  27  ,att23 chf_att23
21:44:10  28  ,att24 chf_att24
21:44:10  29  ,att25 chf_att25
21:44:10  30  ,att26 chf_att26
21:44:10  31  ,att27 chf_att27
21:44:10  32  ,att28 chf_att28
21:44:10  33  ,att29 chf_att29
21:44:10  34  ,att30 chf_att30
21:44:10  35  ,att31 chf_att31
21:44:10  36  ,att32 chf_att32
21:44:10  37  ,att33 chf_att33
21:44:10  38  ,att34 chf_att34
21:44:10  39  ,att35 chf_att35
21:44:10  40  ,att36 chf_att36
21:44:10  41  ,att37 chf_att37
21:44:10  42  FROM svm6162
21:44:10  43  /

Table created.

Elapsed: 00:00:00.16
21:44:10 SQL> 
21:44:10 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
21:44:11 SQL> 
21:44:11 SQL> -- rpt
21:44:11 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19815

Elapsed: 00:00:00.84
21:44:12 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19815

Elapsed: 00:00:00.01
21:44:12 SQL> 
21:44:12 SQL> --
21:44:12 SQL> -- ech610.sql
21:44:12 SQL> --
21:44:12 SQL> 
21:44:12 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:44:12 SQL> 
21:44:12 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.36
21:44:12 SQL> 
21:44:12 SQL> -- I created di5min here:
21:44:12 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:44:12 SQL> 
21:44:12 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:44:12   2  SELECT
21:44:12   3  pair
21:44:12   4  ,ydate
21:44:12   5  ,prdate
21:44:12   6  ,rownum rnum -- acts as t in my time-series
21:44:12   7  ,clse
21:44:12   8  -- Derive a bunch of attributes from clse, the latest price:
21:44:12   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:44:12  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:44:12  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:44:12  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:44:12  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:44:12  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:44:12  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:44:12  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:44:12  17  --
21:44:12  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:44:12  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:44:12  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:44:12  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:44:12  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:44:12  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:44:12  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:44:12  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:44:12  26  --
21:44:12  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:44:12  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:44:12  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:44:12  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:44:12  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:44:12  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:44:12  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:44:12  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:44:12  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:44:12  36  FROM di5min WHERE pair LIKE'%ech%'
21:44:12  37  AND ydate > sysdate - 95
21:44:12  38  ORDER BY ydate
21:44:12  39  /

View created.

Elapsed: 00:00:00.05
21:44:12 SQL> 
21:44:12 SQL> -- rpt
21:44:12 SQL> 
21:44:12 SQL> SELECT
21:44:12   2  pair
21:44:12   3  ,COUNT(pair)
21:44:12   4  ,MIN(clse),MAX(clse)
21:44:12   5  ,MIN(avg6),MAX(avg6)
21:44:12   6  ,MIN(ydate),MAX(ydate)
21:44:12   7  FROM svm6102
21:44:12   8  GROUP BY pair
21:44:12   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19813 1.24182424 1.38284305 1.24320711 1.37986485 2010-10-03 21:45:01 2011-01-06 21:40:00

Elapsed: 00:00:00.82
21:44:13 SQL> 
21:44:13 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:44:13 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.25
21:44:13 SQL> CREATE TABLE svm6122 COMPRESS AS
21:44:13   2  SELECT
21:44:13   3  pair
21:44:13   4  ,ydate
21:44:13   5  ,prdate
21:44:13   6  ,clse
21:44:13   7  -- g6 is important. I want to predict g6:
21:44:13   8  ,ld6 - clse g6
21:44:13   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:44:13  10  -- I want more attributes from the ones I derived above:
21:44:13  11  -- clse relation to moving-min
21:44:13  12  ,clse-min4  cm4
21:44:13  13  ,clse-min6  cm6
21:44:13  14  ,clse-min8  cm8
21:44:13  15  ,clse-min10 cm10
21:44:13  16  ,clse-min12 cm12
21:44:13  17  ,clse-min14 cm14
21:44:13  18  ,clse-min16 cm16
21:44:13  19  ,clse-min18 cm18
21:44:13  20  -- clse relation to moving-avg
21:44:13  21  ,clse-avg4  ca4
21:44:13  22  ,clse-avg6  ca6
21:44:13  23  ,clse-avg8  ca8
21:44:13  24  ,clse-avg10 ca10
21:44:13  25  ,clse-avg12 ca12
21:44:13  26  ,clse-avg14 ca14
21:44:13  27  ,clse-avg16 ca16
21:44:13  28  ,clse-avg18 ca18
21:44:13  29  -- clse relation to moving-max
21:44:13  30  ,clse-max4  cx4
21:44:13  31  ,clse-max6  cx6
21:44:13  32  ,clse-max8  cx8
21:44:13  33  ,clse-max10 cx10
21:44:13  34  ,clse-max12 cx12
21:44:13  35  ,clse-max14 cx14
21:44:13  36  ,clse-max16 cx16
21:44:13  37  ,clse-max18 cx18
21:44:13  38  -- Derive more attributes.
21:44:13  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:44:13  40  -- But COVAR_POP is more stable:
21:44:13  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:44:13  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:44:13  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:44:13  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:44:13  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:44:13  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:44:13  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:44:13  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:44:13  49  -- Derive date related attributes:
21:44:13  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:44:13  51  ,0+TO_CHAR(ydate,'D')d
21:44:13  52  ,0+TO_CHAR(ydate,'W')w
21:44:13  53  -- mpm stands for minutes-past-midnight:
21:44:13  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:44:13  55  -- mph stands for minutes-past-hour:
21:44:13  56  ,0+TO_CHAR(ydate,'MI')mph
21:44:13  57  FROM svm6102
21:44:13  58  ORDER BY ydate
21:44:13  59  /

Table created.

Elapsed: 00:00:02.16
21:44:15 SQL> 
21:44:15 SQL> -- rpt
21:44:15 SQL> 
21:44:15 SQL> SELECT
21:44:15   2  pair
21:44:15   3  ,COUNT(pair)
21:44:15   4  ,MIN(clse),MAX(clse)
21:44:15   5  ,MIN(ydate),MAX(ydate)
21:44:15   6  FROM svm6122
21:44:15   7  GROUP BY pair
21:44:15   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19813 1.24182424 1.38284305 2010-10-03 21:45:01 2011-01-06 21:40:00

Elapsed: 00:00:00.07
21:44:15 SQL> 
21:44:15 SQL> -- Prepare for derivation of NTILE based params:
21:44:15 SQL> 
21:44:15 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.31
21:44:16 SQL> CREATE TABLE svm6142 COMPRESS AS
21:44:16   2  SELECT
21:44:16   3  pair
21:44:16   4  ,ydate
21:44:16   5  ,prdate
21:44:16   6  ,clse
21:44:16   7  ,g6
21:44:16   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:44:16   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:44:16  10  ,CASE WHEN trend IS NULL THEN 1
21:44:16  11  	    WHEN trend =0      THEN 1
21:44:16  12  	    ELSE trend END trend
21:44:16  13  ,cm4
21:44:16  14  ,cm6
21:44:16  15  ,cm8
21:44:16  16  ,cm10
21:44:16  17  ,cm12
21:44:16  18  ,cm14
21:44:16  19  ,cm16
21:44:16  20  ,cm18
21:44:16  21  --
21:44:16  22  ,ca4
21:44:16  23  ,ca6
21:44:16  24  ,ca8
21:44:16  25  ,ca10
21:44:16  26  ,ca12
21:44:16  27  ,ca14
21:44:16  28  ,ca16
21:44:16  29  ,ca18
21:44:16  30  --
21:44:16  31  ,cx4
21:44:16  32  ,cx6
21:44:16  33  ,cx8
21:44:16  34  ,cx10
21:44:16  35  ,cx12
21:44:16  36  ,cx14
21:44:16  37  ,cx16
21:44:16  38  ,cx18
21:44:16  39  --
21:44:16  40  ,crr4
21:44:16  41  ,crr6
21:44:16  42  ,crr8
21:44:16  43  ,crr10
21:44:16  44  ,crr12
21:44:16  45  ,crr14
21:44:16  46  ,crr16
21:44:16  47  ,crr18
21:44:16  48  --
21:44:16  49  ,hh
21:44:16  50  ,d
21:44:16  51  ,w
21:44:16  52  ,mpm
21:44:16  53  ,mph
21:44:16  54  FROM svm6122
21:44:16  55  ORDER BY ydate
21:44:16  56  /

Table created.

Elapsed: 00:00:00.39
21:44:16 SQL> 
21:44:16 SQL> -- rpt
21:44:16 SQL> 
21:44:16 SQL> SELECT
21:44:16   2  pair
21:44:16   3  ,trend
21:44:16   4  ,gatt
21:44:16   5  ,COUNT(pair)
21:44:16   6  ,AVG(g6)
21:44:16   7  FROM svm6142
21:44:16   8  GROUP BY pair,trend,gatt
21:44:16   9  ORDER BY pair,trend,gatt
21:44:16  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6786 -.00231344
ech_usd 	-1 up	      3581 .003574491
ech_usd 	-1		72
ech_usd 	 1 nup	      6469 -.00239037
ech_usd 	 1 up	      2905 .004122743

Elapsed: 00:00:00.03
21:44:16 SQL> 
21:44:16 SQL> 
21:44:16 SQL> -- Derive NTILE based params:
21:44:16 SQL> 
21:44:16 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.21
21:44:16 SQL> CREATE TABLE svm6162 COMPRESS AS
21:44:16   2  SELECT
21:44:16   3  pair
21:44:16   4  ,ydate
21:44:16   5  ,prdate
21:44:16   6  ,clse
21:44:16   7  ,g6
21:44:16   8  ,gatt
21:44:16   9  ,gattn
21:44:16  10  ,trend
21:44:16  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:44:16  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:44:16  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:44:16  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:44:16  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:44:16  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:44:16  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:44:16  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:44:16  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:44:16  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:44:16  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:44:16  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:44:16  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:44:16  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:44:16  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:44:16  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:44:16  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:44:16  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:44:16  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:44:16  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:44:16  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:44:16  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:44:16  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:44:16  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:44:16  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:44:16  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:44:16  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:44:16  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:44:16  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:44:16  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:44:16  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:44:16  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:44:16  43  ,hh  att32
21:44:16  44  ,d   att33
21:44:16  45  ,w   att34
21:44:16  46  ,mpm att35
21:44:16  47  ,mph att36
21:44:16  48  ,trend att37
21:44:16  49  FROM svm6142
21:44:16  50  ORDER BY ydate
21:44:16  51  /

Table created.

Elapsed: 00:00:05.49
21:44:22 SQL> 
21:44:22 SQL> -- rpt
21:44:22 SQL> 
21:44:22 SQL> SELECT
21:44:22   2  pair
21:44:22   3  ,trend
21:44:22   4  ,gatt
21:44:22   5  ,COUNT(pair)
21:44:22   6  ,AVG(g6)
21:44:22   7  FROM svm6162
21:44:22   8  GROUP BY pair,trend,gatt
21:44:22   9  ORDER BY pair,trend,gatt
21:44:22  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6786 -.00231344
ech_usd 	-1 up	      3581 .003574491
ech_usd 	-1		72
ech_usd 	 1 nup	      6469 -.00239037
ech_usd 	 1 up	      2905 .004122743

Elapsed: 00:00:00.03
21:44:22 SQL> 
21:44:22 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
21:44:22 SQL> CREATE TABLE modsrc COMPRESS AS
21:44:22   2  SELECT
21:44:22   3  pair
21:44:22   4  ,ydate
21:44:22   5  ,prdate
21:44:22   6  ,trend
21:44:22   7  ,g6
21:44:22   8  ,gatt
21:44:22   9  ,gattn
21:44:22  10  FROM svm6162
21:44:22  11  /

Table created.

Elapsed: 00:00:00.09
21:44:22 SQL> 
21:44:22 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.28
21:44:22 SQL> 
21:44:22 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
21:44:22 SQL> CREATE TABLE ech_ms610 COMPRESS AS
21:44:22   2  SELECT
21:44:22   3  ydate
21:44:22   4  ,trend ech_trend
21:44:22   5  ,g6    ech_g6
21:44:22   6  ,gatt  ech_gatt
21:44:22   7  ,gattn ech_gattn
21:44:22   8  FROM modsrc
21:44:22   9  /

Table created.

Elapsed: 00:00:00.08
21:44:22 SQL> 
21:44:22 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
21:44:23 SQL> 
21:44:23 SQL> -- I need a copy of the attributes:
21:44:23 SQL> 
21:44:23 SQL> 
21:44:23 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.05
21:44:23 SQL> CREATE TABLE ech_att COMPRESS AS
21:44:23   2  SELECT
21:44:23   3  ydate
21:44:23   4  ,att00 ech_att00
21:44:23   5  ,att01 ech_att01
21:44:23   6  ,att02 ech_att02
21:44:23   7  ,att03 ech_att03
21:44:23   8  ,att04 ech_att04
21:44:23   9  ,att05 ech_att05
21:44:23  10  ,att06 ech_att06
21:44:23  11  ,att07 ech_att07
21:44:23  12  ,att08 ech_att08
21:44:23  13  ,att09 ech_att09
21:44:23  14  ,att10 ech_att10
21:44:23  15  ,att11 ech_att11
21:44:23  16  ,att12 ech_att12
21:44:23  17  ,att13 ech_att13
21:44:23  18  ,att14 ech_att14
21:44:23  19  ,att15 ech_att15
21:44:23  20  ,att16 ech_att16
21:44:23  21  ,att17 ech_att17
21:44:23  22  ,att18 ech_att18
21:44:23  23  ,att19 ech_att19
21:44:23  24  ,att20 ech_att20
21:44:23  25  ,att21 ech_att21
21:44:23  26  ,att22 ech_att22
21:44:23  27  ,att23 ech_att23
21:44:23  28  ,att24 ech_att24
21:44:23  29  ,att25 ech_att25
21:44:23  30  ,att26 ech_att26
21:44:23  31  ,att27 ech_att27
21:44:23  32  ,att28 ech_att28
21:44:23  33  ,att29 ech_att29
21:44:23  34  ,att30 ech_att30
21:44:23  35  ,att31 ech_att31
21:44:23  36  ,att32 ech_att32
21:44:23  37  ,att33 ech_att33
21:44:23  38  ,att34 ech_att34
21:44:23  39  ,att35 ech_att35
21:44:23  40  ,att36 ech_att36
21:44:23  41  ,att37 ech_att37
21:44:23  42  FROM svm6162
21:44:23  43  /

Table created.

Elapsed: 00:00:00.17
21:44:23 SQL> 
21:44:23 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
21:44:23 SQL> 
21:44:23 SQL> -- rpt
21:44:23 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19813

Elapsed: 00:00:00.79
21:44:24 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19813

Elapsed: 00:00:00.00
21:44:24 SQL> 
21:44:24 SQL> --
21:44:24 SQL> -- egb610.sql
21:44:24 SQL> --
21:44:24 SQL> 
21:44:24 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:44:24 SQL> 
21:44:24 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.47
21:44:24 SQL> 
21:44:24 SQL> -- I created di5min here:
21:44:24 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:44:24 SQL> 
21:44:24 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:44:24   2  SELECT
21:44:24   3  pair
21:44:24   4  ,ydate
21:44:24   5  ,prdate
21:44:24   6  ,rownum rnum -- acts as t in my time-series
21:44:24   7  ,clse
21:44:24   8  -- Derive a bunch of attributes from clse, the latest price:
21:44:24   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:44:24  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:44:24  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:44:24  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:44:24  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:44:24  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:44:24  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:44:24  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:44:24  17  --
21:44:24  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:44:24  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:44:24  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:44:24  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:44:24  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:44:24  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:44:24  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:44:24  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:44:24  26  --
21:44:24  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:44:24  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:44:24  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:44:24  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:44:24  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:44:24  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:44:24  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:44:24  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:44:24  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:44:24  36  FROM di5min WHERE pair LIKE'%egb%'
21:44:24  37  AND ydate > sysdate - 95
21:44:24  38  ORDER BY ydate
21:44:24  39  /

View created.

Elapsed: 00:00:00.04
21:44:25 SQL> 
21:44:25 SQL> -- rpt
21:44:25 SQL> 
21:44:25 SQL> SELECT
21:44:25   2  pair
21:44:25   3  ,COUNT(pair)
21:44:25   4  ,MIN(clse),MAX(clse)
21:44:25   5  ,MIN(avg6),MAX(avg6)
21:44:25   6  ,MIN(ydate),MAX(ydate)
21:44:25   7  FROM svm6102
21:44:25   8  GROUP BY pair
21:44:25   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19812 .833520557 .893920122 .834199029 .892400287 2010-10-03 21:45:01 2011-01-06 21:40:00

Elapsed: 00:00:00.94
21:44:25 SQL> 
21:44:25 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:44:25 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.25
21:44:26 SQL> CREATE TABLE svm6122 COMPRESS AS
21:44:26   2  SELECT
21:44:26   3  pair
21:44:26   4  ,ydate
21:44:26   5  ,prdate
21:44:26   6  ,clse
21:44:26   7  -- g6 is important. I want to predict g6:
21:44:26   8  ,ld6 - clse g6
21:44:26   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:44:26  10  -- I want more attributes from the ones I derived above:
21:44:26  11  -- clse relation to moving-min
21:44:26  12  ,clse-min4  cm4
21:44:26  13  ,clse-min6  cm6
21:44:26  14  ,clse-min8  cm8
21:44:26  15  ,clse-min10 cm10
21:44:26  16  ,clse-min12 cm12
21:44:26  17  ,clse-min14 cm14
21:44:26  18  ,clse-min16 cm16
21:44:26  19  ,clse-min18 cm18
21:44:26  20  -- clse relation to moving-avg
21:44:26  21  ,clse-avg4  ca4
21:44:26  22  ,clse-avg6  ca6
21:44:26  23  ,clse-avg8  ca8
21:44:26  24  ,clse-avg10 ca10
21:44:26  25  ,clse-avg12 ca12
21:44:26  26  ,clse-avg14 ca14
21:44:26  27  ,clse-avg16 ca16
21:44:26  28  ,clse-avg18 ca18
21:44:26  29  -- clse relation to moving-max
21:44:26  30  ,clse-max4  cx4
21:44:26  31  ,clse-max6  cx6
21:44:26  32  ,clse-max8  cx8
21:44:26  33  ,clse-max10 cx10
21:44:26  34  ,clse-max12 cx12
21:44:26  35  ,clse-max14 cx14
21:44:26  36  ,clse-max16 cx16
21:44:26  37  ,clse-max18 cx18
21:44:26  38  -- Derive more attributes.
21:44:26  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:44:26  40  -- But COVAR_POP is more stable:
21:44:26  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:44:26  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:44:26  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:44:26  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:44:26  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:44:26  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:44:26  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:44:26  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:44:26  49  -- Derive date related attributes:
21:44:26  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:44:26  51  ,0+TO_CHAR(ydate,'D')d
21:44:26  52  ,0+TO_CHAR(ydate,'W')w
21:44:26  53  -- mpm stands for minutes-past-midnight:
21:44:26  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:44:26  55  -- mph stands for minutes-past-hour:
21:44:26  56  ,0+TO_CHAR(ydate,'MI')mph
21:44:26  57  FROM svm6102
21:44:26  58  ORDER BY ydate
21:44:26  59  /

Table created.

Elapsed: 00:00:02.58
21:44:28 SQL> 
21:44:28 SQL> -- rpt
21:44:28 SQL> 
21:44:28 SQL> SELECT
21:44:28   2  pair
21:44:28   3  ,COUNT(pair)
21:44:28   4  ,MIN(clse),MAX(clse)
21:44:28   5  ,MIN(ydate),MAX(ydate)
21:44:28   6  FROM svm6122
21:44:28   7  GROUP BY pair
21:44:28   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19812 .833520557 .893920122 2010-10-03 21:45:01 2011-01-06 21:40:00

Elapsed: 00:00:00.07
21:44:28 SQL> 
21:44:28 SQL> -- Prepare for derivation of NTILE based params:
21:44:28 SQL> 
21:44:28 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.36
21:44:29 SQL> CREATE TABLE svm6142 COMPRESS AS
21:44:29   2  SELECT
21:44:29   3  pair
21:44:29   4  ,ydate
21:44:29   5  ,prdate
21:44:29   6  ,clse
21:44:29   7  ,g6
21:44:29   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:44:29   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:44:29  10  ,CASE WHEN trend IS NULL THEN 1
21:44:29  11  	    WHEN trend =0      THEN 1
21:44:29  12  	    ELSE trend END trend
21:44:29  13  ,cm4
21:44:29  14  ,cm6
21:44:29  15  ,cm8
21:44:29  16  ,cm10
21:44:29  17  ,cm12
21:44:29  18  ,cm14
21:44:29  19  ,cm16
21:44:29  20  ,cm18
21:44:29  21  --
21:44:29  22  ,ca4
21:44:29  23  ,ca6
21:44:29  24  ,ca8
21:44:29  25  ,ca10
21:44:29  26  ,ca12
21:44:29  27  ,ca14
21:44:29  28  ,ca16
21:44:29  29  ,ca18
21:44:29  30  --
21:44:29  31  ,cx4
21:44:29  32  ,cx6
21:44:29  33  ,cx8
21:44:29  34  ,cx10
21:44:29  35  ,cx12
21:44:29  36  ,cx14
21:44:29  37  ,cx16
21:44:29  38  ,cx18
21:44:29  39  --
21:44:29  40  ,crr4
21:44:29  41  ,crr6
21:44:29  42  ,crr8
21:44:29  43  ,crr10
21:44:29  44  ,crr12
21:44:29  45  ,crr14
21:44:29  46  ,crr16
21:44:29  47  ,crr18
21:44:29  48  --
21:44:29  49  ,hh
21:44:29  50  ,d
21:44:29  51  ,w
21:44:29  52  ,mpm
21:44:29  53  ,mph
21:44:29  54  FROM svm6122
21:44:29  55  ORDER BY ydate
21:44:29  56  /

Table created.

Elapsed: 00:00:00.42
21:44:29 SQL> 
21:44:29 SQL> -- rpt
21:44:29 SQL> 
21:44:29 SQL> SELECT
21:44:29   2  pair
21:44:29   3  ,trend
21:44:29   4  ,gatt
21:44:29   5  ,COUNT(pair)
21:44:29   6  ,AVG(g6)
21:44:29   7  FROM svm6142
21:44:29   8  GROUP BY pair,trend,gatt
21:44:29   9  ORDER BY pair,trend,gatt
21:44:29  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7958 -.00106576
egb_usd 	-1 up	      2636 .002928295
egb_usd 	-1		72
egb_usd 	 1 nup	      6529 -.00138731
egb_usd 	 1 up	      2617   .0029282

Elapsed: 00:00:00.04
21:44:29 SQL> 
21:44:29 SQL> 
21:44:29 SQL> -- Derive NTILE based params:
21:44:29 SQL> 
21:44:29 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.41
21:44:30 SQL> CREATE TABLE svm6162 COMPRESS AS
21:44:30   2  SELECT
21:44:30   3  pair
21:44:30   4  ,ydate
21:44:30   5  ,prdate
21:44:30   6  ,clse
21:44:30   7  ,g6
21:44:30   8  ,gatt
21:44:30   9  ,gattn
21:44:30  10  ,trend
21:44:30  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:44:30  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:44:30  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:44:30  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:44:30  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:44:30  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:44:30  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:44:30  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:44:30  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:44:30  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:44:30  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:44:30  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:44:30  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:44:30  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:44:30  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:44:30  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:44:30  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:44:30  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:44:30  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:44:30  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:44:30  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:44:30  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:44:30  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:44:30  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:44:30  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:44:30  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:44:30  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:44:30  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:44:30  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:44:30  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:44:30  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:44:30  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:44:30  43  ,hh  att32
21:44:30  44  ,d   att33
21:44:30  45  ,w   att34
21:44:30  46  ,mpm att35
21:44:30  47  ,mph att36
21:44:30  48  ,trend att37
21:44:30  49  FROM svm6142
21:44:30  50  ORDER BY ydate
21:44:30  51  /

Table created.

Elapsed: 00:00:05.63
21:44:35 SQL> 
21:44:35 SQL> -- rpt
21:44:35 SQL> 
21:44:35 SQL> SELECT
21:44:35   2  pair
21:44:35   3  ,trend
21:44:35   4  ,gatt
21:44:35   5  ,COUNT(pair)
21:44:35   6  ,AVG(g6)
21:44:35   7  FROM svm6162
21:44:35   8  GROUP BY pair,trend,gatt
21:44:35   9  ORDER BY pair,trend,gatt
21:44:35  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7958 -.00106576
egb_usd 	-1 up	      2636 .002928295
egb_usd 	-1		72
egb_usd 	 1 nup	      6529 -.00138731
egb_usd 	 1 up	      2617   .0029282

Elapsed: 00:00:00.03
21:44:35 SQL> 
21:44:35 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.20
21:44:35 SQL> CREATE TABLE modsrc COMPRESS AS
21:44:35   2  SELECT
21:44:35   3  pair
21:44:35   4  ,ydate
21:44:35   5  ,prdate
21:44:35   6  ,trend
21:44:35   7  ,g6
21:44:35   8  ,gatt
21:44:35   9  ,gattn
21:44:35  10  FROM svm6162
21:44:35  11  /

Table created.

Elapsed: 00:00:00.09
21:44:36 SQL> 
21:44:36 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
21:44:36 SQL> 
21:44:36 SQL> DROP   TABLE egb_ms610 ;

Table dropped.

Elapsed: 00:00:00.07
21:44:36 SQL> CREATE TABLE egb_ms610 COMPRESS AS
21:44:36   2  SELECT
21:44:36   3  ydate
21:44:36   4  ,trend egb_trend
21:44:36   5  ,g6    egb_g6
21:44:36   6  ,gatt  egb_gatt
21:44:36   7  ,gattn egb_gattn
21:44:36   8  FROM modsrc
21:44:36   9  /

Table created.

Elapsed: 00:00:00.06
21:44:36 SQL> 
21:44:36 SQL> ANALYZE TABLE egb_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
21:44:36 SQL> 
21:44:36 SQL> -- I need a copy of the attributes:
21:44:36 SQL> 
21:44:36 SQL> 
21:44:36 SQL> DROP   TABLE egb_att;

Table dropped.

Elapsed: 00:00:00.04
21:44:36 SQL> CREATE TABLE egb_att COMPRESS AS
21:44:36   2  SELECT
21:44:36   3  ydate
21:44:36   4  ,att00 egb_att00
21:44:36   5  ,att01 egb_att01
21:44:36   6  ,att02 egb_att02
21:44:36   7  ,att03 egb_att03
21:44:36   8  ,att04 egb_att04
21:44:36   9  ,att05 egb_att05
21:44:36  10  ,att06 egb_att06
21:44:36  11  ,att07 egb_att07
21:44:36  12  ,att08 egb_att08
21:44:36  13  ,att09 egb_att09
21:44:36  14  ,att10 egb_att10
21:44:36  15  ,att11 egb_att11
21:44:36  16  ,att12 egb_att12
21:44:36  17  ,att13 egb_att13
21:44:36  18  ,att14 egb_att14
21:44:36  19  ,att15 egb_att15
21:44:36  20  ,att16 egb_att16
21:44:36  21  ,att17 egb_att17
21:44:36  22  ,att18 egb_att18
21:44:36  23  ,att19 egb_att19
21:44:36  24  ,att20 egb_att20
21:44:36  25  ,att21 egb_att21
21:44:36  26  ,att22 egb_att22
21:44:36  27  ,att23 egb_att23
21:44:36  28  ,att24 egb_att24
21:44:36  29  ,att25 egb_att25
21:44:36  30  ,att26 egb_att26
21:44:36  31  ,att27 egb_att27
21:44:36  32  ,att28 egb_att28
21:44:36  33  ,att29 egb_att29
21:44:36  34  ,att30 egb_att30
21:44:36  35  ,att31 egb_att31
21:44:36  36  ,att32 egb_att32
21:44:36  37  ,att33 egb_att33
21:44:36  38  ,att34 egb_att34
21:44:36  39  ,att35 egb_att35
21:44:36  40  ,att36 egb_att36
21:44:36  41  ,att37 egb_att37
21:44:36  42  FROM svm6162
21:44:36  43  /

Table created.

Elapsed: 00:00:00.16
21:44:36 SQL> 
21:44:36 SQL> ANALYZE TABLE egb_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
21:44:37 SQL> 
21:44:37 SQL> -- rpt
21:44:37 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19812

Elapsed: 00:00:00.98
21:44:38 SQL> SELECT COUNT(*)FROM egb_att;

  COUNT(*)
----------
     19812

Elapsed: 00:00:00.00
21:44:38 SQL> 
21:44:38 SQL> --
21:44:38 SQL> -- ejp610.sql
21:44:38 SQL> --
21:44:38 SQL> 
21:44:38 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:44:38 SQL> 
21:44:38 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.47
21:44:38 SQL> 
21:44:38 SQL> -- I created di5min here:
21:44:38 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:44:38 SQL> 
21:44:38 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:44:38   2  SELECT
21:44:38   3  pair
21:44:38   4  ,ydate
21:44:38   5  ,prdate
21:44:38   6  ,rownum rnum -- acts as t in my time-series
21:44:38   7  ,clse
21:44:38   8  -- Derive a bunch of attributes from clse, the latest price:
21:44:38   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:44:38  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:44:38  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:44:38  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:44:38  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:44:38  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:44:38  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:44:38  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:44:38  17  --
21:44:38  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:44:38  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:44:38  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:44:38  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:44:38  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:44:38  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:44:38  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:44:38  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:44:38  26  --
21:44:38  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:44:38  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:44:38  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:44:38  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:44:38  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:44:38  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:44:38  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:44:38  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:44:38  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:44:38  36  FROM di5min WHERE pair LIKE'%ejp%'
21:44:38  37  AND ydate > sysdate - 95
21:44:38  38  ORDER BY ydate
21:44:38  39  /

View created.

Elapsed: 00:00:00.06
21:44:38 SQL> 
21:44:38 SQL> -- rpt
21:44:38 SQL> 
21:44:38 SQL> SELECT
21:44:38   2  pair
21:44:38   3  ,COUNT(pair)
21:44:38   4  ,MIN(clse),MAX(clse)
21:44:38   5  ,MIN(avg6),MAX(avg6)
21:44:38   6  ,MIN(ydate),MAX(ydate)
21:44:38   7  FROM svm6102
21:44:38   8  GROUP BY pair
21:44:38   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ejp_usd       19810 107.643765	115.63485 107.776148 115.509678 2010-10-03 21:45:01 2011-01-06 21:40:00

Elapsed: 00:00:00.87
21:44:39 SQL> 
21:44:39 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:44:39 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.26
21:44:39 SQL> CREATE TABLE svm6122 COMPRESS AS
21:44:39   2  SELECT
21:44:39   3  pair
21:44:39   4  ,ydate
21:44:39   5  ,prdate
21:44:39   6  ,clse
21:44:39   7  -- g6 is important. I want to predict g6:
21:44:39   8  ,ld6 - clse g6
21:44:39   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:44:39  10  -- I want more attributes from the ones I derived above:
21:44:39  11  -- clse relation to moving-min
21:44:39  12  ,clse-min4  cm4
21:44:39  13  ,clse-min6  cm6
21:44:39  14  ,clse-min8  cm8
21:44:39  15  ,clse-min10 cm10
21:44:39  16  ,clse-min12 cm12
21:44:39  17  ,clse-min14 cm14
21:44:39  18  ,clse-min16 cm16
21:44:39  19  ,clse-min18 cm18
21:44:39  20  -- clse relation to moving-avg
21:44:39  21  ,clse-avg4  ca4
21:44:39  22  ,clse-avg6  ca6
21:44:39  23  ,clse-avg8  ca8
21:44:39  24  ,clse-avg10 ca10
21:44:39  25  ,clse-avg12 ca12
21:44:39  26  ,clse-avg14 ca14
21:44:39  27  ,clse-avg16 ca16
21:44:39  28  ,clse-avg18 ca18
21:44:39  29  -- clse relation to moving-max
21:44:39  30  ,clse-max4  cx4
21:44:39  31  ,clse-max6  cx6
21:44:39  32  ,clse-max8  cx8
21:44:39  33  ,clse-max10 cx10
21:44:39  34  ,clse-max12 cx12
21:44:39  35  ,clse-max14 cx14
21:44:39  36  ,clse-max16 cx16
21:44:39  37  ,clse-max18 cx18
21:44:39  38  -- Derive more attributes.
21:44:39  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:44:39  40  -- But COVAR_POP is more stable:
21:44:39  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:44:39  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:44:39  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:44:39  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:44:39  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:44:39  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:44:39  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:44:39  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:44:39  49  -- Derive date related attributes:
21:44:39  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:44:39  51  ,0+TO_CHAR(ydate,'D')d
21:44:39  52  ,0+TO_CHAR(ydate,'W')w
21:44:39  53  -- mpm stands for minutes-past-midnight:
21:44:39  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:44:39  55  -- mph stands for minutes-past-hour:
21:44:39  56  ,0+TO_CHAR(ydate,'MI')mph
21:44:39  57  FROM svm6102
21:44:39  58  ORDER BY ydate
21:44:39  59  /

Table created.

Elapsed: 00:00:02.17
21:44:42 SQL> 
21:44:42 SQL> -- rpt
21:44:42 SQL> 
21:44:42 SQL> SELECT
21:44:42   2  pair
21:44:42   3  ,COUNT(pair)
21:44:42   4  ,MIN(clse),MAX(clse)
21:44:42   5  ,MIN(ydate),MAX(ydate)
21:44:42   6  FROM svm6122
21:44:42   7  GROUP BY pair
21:44:42   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ejp_usd       19810 107.643765	115.63485 2010-10-03 21:45:01 2011-01-06 21:40:00

Elapsed: 00:00:00.04
21:44:42 SQL> 
21:44:42 SQL> -- Prepare for derivation of NTILE based params:
21:44:42 SQL> 
21:44:42 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.25
21:44:42 SQL> CREATE TABLE svm6142 COMPRESS AS
21:44:42   2  SELECT
21:44:42   3  pair
21:44:42   4  ,ydate
21:44:42   5  ,prdate
21:44:42   6  ,clse
21:44:42   7  ,g6
21:44:42   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:44:42   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:44:42  10  ,CASE WHEN trend IS NULL THEN 1
21:44:42  11  	    WHEN trend =0      THEN 1
21:44:42  12  	    ELSE trend END trend
21:44:42  13  ,cm4
21:44:42  14  ,cm6
21:44:42  15  ,cm8
21:44:42  16  ,cm10
21:44:42  17  ,cm12
21:44:42  18  ,cm14
21:44:42  19  ,cm16
21:44:42  20  ,cm18
21:44:42  21  --
21:44:42  22  ,ca4
21:44:42  23  ,ca6
21:44:42  24  ,ca8
21:44:42  25  ,ca10
21:44:42  26  ,ca12
21:44:42  27  ,ca14
21:44:42  28  ,ca16
21:44:42  29  ,ca18
21:44:42  30  --
21:44:42  31  ,cx4
21:44:42  32  ,cx6
21:44:42  33  ,cx8
21:44:42  34  ,cx10
21:44:42  35  ,cx12
21:44:42  36  ,cx14
21:44:42  37  ,cx16
21:44:42  38  ,cx18
21:44:42  39  --
21:44:42  40  ,crr4
21:44:42  41  ,crr6
21:44:42  42  ,crr8
21:44:42  43  ,crr10
21:44:42  44  ,crr12
21:44:42  45  ,crr14
21:44:42  46  ,crr16
21:44:42  47  ,crr18
21:44:42  48  --
21:44:42  49  ,hh
21:44:42  50  ,d
21:44:42  51  ,w
21:44:42  52  ,mpm
21:44:42  53  ,mph
21:44:42  54  FROM svm6122
21:44:42  55  ORDER BY ydate
21:44:42  56  /

Table created.

Elapsed: 00:00:00.39
21:44:42 SQL> 
21:44:42 SQL> -- rpt
21:44:42 SQL> 
21:44:42 SQL> SELECT
21:44:42   2  pair
21:44:42   3  ,trend
21:44:42   4  ,gatt
21:44:42   5  ,COUNT(pair)
21:44:42   6  ,AVG(g6)
21:44:42   7  FROM svm6142
21:44:42   8  GROUP BY pair,trend,gatt
21:44:42   9  ORDER BY pair,trend,gatt
21:44:42  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      5174 -.32382448
ejp_usd 	-1 up	      4926 .277660026
ejp_usd 	-1		72
ejp_usd 	 1 nup	      5011  -.2995154
ejp_usd 	 1 up	      4627 .288513381

Elapsed: 00:00:00.06
21:44:42 SQL> 
21:44:42 SQL> 
21:44:42 SQL> -- Derive NTILE based params:
21:44:42 SQL> 
21:44:42 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
21:44:42 SQL> CREATE TABLE svm6162 COMPRESS AS
21:44:42   2  SELECT
21:44:42   3  pair
21:44:42   4  ,ydate
21:44:42   5  ,prdate
21:44:42   6  ,clse
21:44:42   7  ,g6
21:44:42   8  ,gatt
21:44:42   9  ,gattn
21:44:42  10  ,trend
21:44:42  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:44:42  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:44:42  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:44:42  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:44:42  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:44:42  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:44:42  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:44:42  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:44:42  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:44:42  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:44:42  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:44:42  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:44:42  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:44:42  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:44:42  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:44:42  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:44:42  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:44:42  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:44:42  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:44:42  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:44:42  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:44:42  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:44:42  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:44:42  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:44:42  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:44:42  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:44:42  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:44:42  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:44:42  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:44:42  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:44:42  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:44:42  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:44:42  43  ,hh  att32
21:44:42  44  ,d   att33
21:44:42  45  ,w   att34
21:44:42  46  ,mpm att35
21:44:42  47  ,mph att36
21:44:42  48  ,trend att37
21:44:42  49  FROM svm6142
21:44:42  50  ORDER BY ydate
21:44:42  51  /

Table created.

Elapsed: 00:00:05.07
21:44:48 SQL> 
21:44:48 SQL> -- rpt
21:44:48 SQL> 
21:44:48 SQL> SELECT
21:44:48   2  pair
21:44:48   3  ,trend
21:44:48   4  ,gatt
21:44:48   5  ,COUNT(pair)
21:44:48   6  ,AVG(g6)
21:44:48   7  FROM svm6162
21:44:48   8  GROUP BY pair,trend,gatt
21:44:48   9  ORDER BY pair,trend,gatt
21:44:48  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      5174 -.32382448
ejp_usd 	-1 up	      4926 .277660026
ejp_usd 	-1		72
ejp_usd 	 1 nup	      5011  -.2995154
ejp_usd 	 1 up	      4627 .288513381

Elapsed: 00:00:00.03
21:44:48 SQL> 
21:44:48 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
21:44:48 SQL> CREATE TABLE modsrc COMPRESS AS
21:44:48   2  SELECT
21:44:48   3  pair
21:44:48   4  ,ydate
21:44:48   5  ,prdate
21:44:48   6  ,trend
21:44:48   7  ,g6
21:44:48   8  ,gatt
21:44:48   9  ,gattn
21:44:48  10  FROM svm6162
21:44:48  11  /

Table created.

Elapsed: 00:00:00.08
21:44:48 SQL> 
21:44:48 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
21:44:48 SQL> 
21:44:48 SQL> DROP   TABLE ejp_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
21:44:48 SQL> CREATE TABLE ejp_ms610 COMPRESS AS
21:44:48   2  SELECT
21:44:48   3  ydate
21:44:48   4  ,trend ejp_trend
21:44:48   5  ,g6    ejp_g6
21:44:48   6  ,gatt  ejp_gatt
21:44:48   7  ,gattn ejp_gattn
21:44:48   8  FROM modsrc
21:44:48   9  /

Table created.

Elapsed: 00:00:00.07
21:44:48 SQL> 
21:44:48 SQL> ANALYZE TABLE ejp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
21:44:48 SQL> 
21:44:48 SQL> -- I need a copy of the attributes:
21:44:48 SQL> 
21:44:48 SQL> 
21:44:48 SQL> DROP   TABLE ejp_att;

Table dropped.

Elapsed: 00:00:00.07
21:44:48 SQL> CREATE TABLE ejp_att COMPRESS AS
21:44:48   2  SELECT
21:44:48   3  ydate
21:44:48   4  ,att00 ejp_att00
21:44:48   5  ,att01 ejp_att01
21:44:48   6  ,att02 ejp_att02
21:44:48   7  ,att03 ejp_att03
21:44:48   8  ,att04 ejp_att04
21:44:48   9  ,att05 ejp_att05
21:44:48  10  ,att06 ejp_att06
21:44:48  11  ,att07 ejp_att07
21:44:48  12  ,att08 ejp_att08
21:44:48  13  ,att09 ejp_att09
21:44:48  14  ,att10 ejp_att10
21:44:48  15  ,att11 ejp_att11
21:44:48  16  ,att12 ejp_att12
21:44:48  17  ,att13 ejp_att13
21:44:48  18  ,att14 ejp_att14
21:44:48  19  ,att15 ejp_att15
21:44:48  20  ,att16 ejp_att16
21:44:48  21  ,att17 ejp_att17
21:44:48  22  ,att18 ejp_att18
21:44:48  23  ,att19 ejp_att19
21:44:48  24  ,att20 ejp_att20
21:44:48  25  ,att21 ejp_att21
21:44:48  26  ,att22 ejp_att22
21:44:48  27  ,att23 ejp_att23
21:44:48  28  ,att24 ejp_att24
21:44:48  29  ,att25 ejp_att25
21:44:48  30  ,att26 ejp_att26
21:44:48  31  ,att27 ejp_att27
21:44:48  32  ,att28 ejp_att28
21:44:48  33  ,att29 ejp_att29
21:44:48  34  ,att30 ejp_att30
21:44:48  35  ,att31 ejp_att31
21:44:48  36  ,att32 ejp_att32
21:44:48  37  ,att33 ejp_att33
21:44:48  38  ,att34 ejp_att34
21:44:48  39  ,att35 ejp_att35
21:44:48  40  ,att36 ejp_att36
21:44:48  41  ,att37 ejp_att37
21:44:48  42  FROM svm6162
21:44:48  43  /

Table created.

Elapsed: 00:00:00.15
21:44:49 SQL> 
21:44:49 SQL> ANALYZE TABLE ejp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
21:44:49 SQL> 
21:44:49 SQL> -- rpt
21:44:49 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19810

Elapsed: 00:00:00.83
21:44:50 SQL> SELECT COUNT(*)FROM ejp_att;

  COUNT(*)
----------
     19810

Elapsed: 00:00:00.01
21:44:50 SQL> 
21:44:50 SQL> --
21:44:50 SQL> -- ajp610.sql
21:44:50 SQL> --
21:44:50 SQL> 
21:44:50 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:44:50 SQL> 
21:44:50 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.35
21:44:50 SQL> 
21:44:50 SQL> -- I created di5min here:
21:44:50 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:44:50 SQL> 
21:44:50 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:44:50   2  SELECT
21:44:50   3  pair
21:44:50   4  ,ydate
21:44:50   5  ,prdate
21:44:50   6  ,rownum rnum -- acts as t in my time-series
21:44:50   7  ,clse
21:44:50   8  -- Derive a bunch of attributes from clse, the latest price:
21:44:50   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:44:50  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:44:50  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:44:50  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:44:50  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:44:50  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:44:50  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:44:50  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:44:50  17  --
21:44:50  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:44:50  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:44:50  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:44:50  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:44:50  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:44:50  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:44:50  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:44:50  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:44:50  26  --
21:44:50  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:44:50  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:44:50  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:44:50  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:44:50  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:44:50  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:44:50  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:44:50  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:44:50  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:44:50  36  FROM di5min WHERE pair LIKE'%ajp%'
21:44:50  37  AND ydate > sysdate - 95
21:44:50  38  ORDER BY ydate
21:44:50  39  /

View created.

Elapsed: 00:00:00.05
21:44:50 SQL> 
21:44:50 SQL> -- rpt
21:44:50 SQL> 
21:44:50 SQL> SELECT
21:44:50   2  pair
21:44:50   3  ,COUNT(pair)
21:44:50   4  ,MIN(clse),MAX(clse)
21:44:50   5  ,MIN(avg6),MAX(avg6)
21:44:50   6  ,MIN(ydate),MAX(ydate)
21:44:50   7  FROM svm6102
21:44:50   8  GROUP BY pair
21:44:50   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ajp_usd       19807  78.249976 83.6669853 78.5106193  83.546306 2010-10-03 21:45:01 2011-01-06 21:40:00

Elapsed: 00:00:00.86
21:44:51 SQL> 
21:44:51 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:44:51 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:01.03
21:44:52 SQL> CREATE TABLE svm6122 COMPRESS AS
21:44:52   2  SELECT
21:44:52   3  pair
21:44:52   4  ,ydate
21:44:52   5  ,prdate
21:44:52   6  ,clse
21:44:52   7  -- g6 is important. I want to predict g6:
21:44:52   8  ,ld6 - clse g6
21:44:52   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:44:52  10  -- I want more attributes from the ones I derived above:
21:44:52  11  -- clse relation to moving-min
21:44:52  12  ,clse-min4  cm4
21:44:52  13  ,clse-min6  cm6
21:44:52  14  ,clse-min8  cm8
21:44:52  15  ,clse-min10 cm10
21:44:52  16  ,clse-min12 cm12
21:44:52  17  ,clse-min14 cm14
21:44:52  18  ,clse-min16 cm16
21:44:52  19  ,clse-min18 cm18
21:44:52  20  -- clse relation to moving-avg
21:44:52  21  ,clse-avg4  ca4
21:44:52  22  ,clse-avg6  ca6
21:44:52  23  ,clse-avg8  ca8
21:44:52  24  ,clse-avg10 ca10
21:44:52  25  ,clse-avg12 ca12
21:44:52  26  ,clse-avg14 ca14
21:44:52  27  ,clse-avg16 ca16
21:44:52  28  ,clse-avg18 ca18
21:44:52  29  -- clse relation to moving-max
21:44:52  30  ,clse-max4  cx4
21:44:52  31  ,clse-max6  cx6
21:44:52  32  ,clse-max8  cx8
21:44:52  33  ,clse-max10 cx10
21:44:52  34  ,clse-max12 cx12
21:44:52  35  ,clse-max14 cx14
21:44:52  36  ,clse-max16 cx16
21:44:52  37  ,clse-max18 cx18
21:44:52  38  -- Derive more attributes.
21:44:52  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:44:52  40  -- But COVAR_POP is more stable:
21:44:52  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:44:52  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:44:52  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:44:52  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:44:52  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:44:52  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:44:52  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:44:52  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:44:52  49  -- Derive date related attributes:
21:44:52  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:44:52  51  ,0+TO_CHAR(ydate,'D')d
21:44:52  52  ,0+TO_CHAR(ydate,'W')w
21:44:52  53  -- mpm stands for minutes-past-midnight:
21:44:52  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:44:52  55  -- mph stands for minutes-past-hour:
21:44:52  56  ,0+TO_CHAR(ydate,'MI')mph
21:44:52  57  FROM svm6102
21:44:52  58  ORDER BY ydate
21:44:52  59  /

Table created.

Elapsed: 00:00:02.09
21:44:54 SQL> 
21:44:54 SQL> -- rpt
21:44:54 SQL> 
21:44:54 SQL> SELECT
21:44:54   2  pair
21:44:54   3  ,COUNT(pair)
21:44:54   4  ,MIN(clse),MAX(clse)
21:44:54   5  ,MIN(ydate),MAX(ydate)
21:44:54   6  FROM svm6122
21:44:54   7  GROUP BY pair
21:44:54   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ajp_usd       19807  78.249976 83.6669853 2010-10-03 21:45:01 2011-01-06 21:40:00

Elapsed: 00:00:00.04
21:44:54 SQL> 
21:44:54 SQL> -- Prepare for derivation of NTILE based params:
21:44:54 SQL> 
21:44:54 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.25
21:44:55 SQL> CREATE TABLE svm6142 COMPRESS AS
21:44:55   2  SELECT
21:44:55   3  pair
21:44:55   4  ,ydate
21:44:55   5  ,prdate
21:44:55   6  ,clse
21:44:55   7  ,g6
21:44:55   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:44:55   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:44:55  10  ,CASE WHEN trend IS NULL THEN 1
21:44:55  11  	    WHEN trend =0      THEN 1
21:44:55  12  	    ELSE trend END trend
21:44:55  13  ,cm4
21:44:55  14  ,cm6
21:44:55  15  ,cm8
21:44:55  16  ,cm10
21:44:55  17  ,cm12
21:44:55  18  ,cm14
21:44:55  19  ,cm16
21:44:55  20  ,cm18
21:44:55  21  --
21:44:55  22  ,ca4
21:44:55  23  ,ca6
21:44:55  24  ,ca8
21:44:55  25  ,ca10
21:44:55  26  ,ca12
21:44:55  27  ,ca14
21:44:55  28  ,ca16
21:44:55  29  ,ca18
21:44:55  30  --
21:44:55  31  ,cx4
21:44:55  32  ,cx6
21:44:55  33  ,cx8
21:44:55  34  ,cx10
21:44:55  35  ,cx12
21:44:55  36  ,cx14
21:44:55  37  ,cx16
21:44:55  38  ,cx18
21:44:55  39  --
21:44:55  40  ,crr4
21:44:55  41  ,crr6
21:44:55  42  ,crr8
21:44:55  43  ,crr10
21:44:55  44  ,crr12
21:44:55  45  ,crr14
21:44:55  46  ,crr16
21:44:55  47  ,crr18
21:44:55  48  --
21:44:55  49  ,hh
21:44:55  50  ,d
21:44:55  51  ,w
21:44:55  52  ,mpm
21:44:55  53  ,mph
21:44:55  54  FROM svm6122
21:44:55  55  ORDER BY ydate
21:44:55  56  /

Table created.

Elapsed: 00:00:00.38
21:44:55 SQL> 
21:44:55 SQL> -- rpt
21:44:55 SQL> 
21:44:55 SQL> SELECT
21:44:55   2  pair
21:44:55   3  ,trend
21:44:55   4  ,gatt
21:44:55   5  ,COUNT(pair)
21:44:55   6  ,AVG(g6)
21:44:55   7  FROM svm6142
21:44:55   8  GROUP BY pair,trend,gatt
21:44:55   9  ORDER BY pair,trend,gatt
21:44:55  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4402 -.22321513
ajp_usd 	-1 up	      5220 .223581141
ajp_usd 	-1		53
ajp_usd 	 1 nup	      5301 -.20326796
ajp_usd 	 1 up	      4812  .21265385
ajp_usd 	 1		19

6 rows selected.

Elapsed: 00:00:00.04
21:44:55 SQL> 
21:44:55 SQL> 
21:44:55 SQL> -- Derive NTILE based params:
21:44:55 SQL> 
21:44:55 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
21:44:55 SQL> CREATE TABLE svm6162 COMPRESS AS
21:44:55   2  SELECT
21:44:55   3  pair
21:44:55   4  ,ydate
21:44:55   5  ,prdate
21:44:55   6  ,clse
21:44:55   7  ,g6
21:44:55   8  ,gatt
21:44:55   9  ,gattn
21:44:55  10  ,trend
21:44:55  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:44:55  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:44:55  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:44:55  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:44:55  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:44:55  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:44:55  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:44:55  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:44:55  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:44:55  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:44:55  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:44:55  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:44:55  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:44:55  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:44:55  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:44:55  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:44:55  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:44:55  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:44:55  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:44:55  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:44:55  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:44:55  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:44:55  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:44:55  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:44:55  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:44:55  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:44:55  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:44:55  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:44:55  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:44:55  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:44:55  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:44:55  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:44:55  43  ,hh  att32
21:44:55  44  ,d   att33
21:44:55  45  ,w   att34
21:44:55  46  ,mpm att35
21:44:55  47  ,mph att36
21:44:55  48  ,trend att37
21:44:55  49  FROM svm6142
21:44:55  50  ORDER BY ydate
21:44:55  51  /

Table created.

Elapsed: 00:00:04.92
21:45:00 SQL> 
21:45:00 SQL> -- rpt
21:45:00 SQL> 
21:45:00 SQL> SELECT
21:45:00   2  pair
21:45:00   3  ,trend
21:45:00   4  ,gatt
21:45:00   5  ,COUNT(pair)
21:45:00   6  ,AVG(g6)
21:45:00   7  FROM svm6162
21:45:00   8  GROUP BY pair,trend,gatt
21:45:00   9  ORDER BY pair,trend,gatt
21:45:00  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4402 -.22321513
ajp_usd 	-1 up	      5220 .223581141
ajp_usd 	-1		53
ajp_usd 	 1 nup	      5301 -.20326796
ajp_usd 	 1 up	      4812  .21265385
ajp_usd 	 1		19

6 rows selected.

Elapsed: 00:00:00.03
21:45:00 SQL> 
21:45:00 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.14
21:45:00 SQL> CREATE TABLE modsrc COMPRESS AS
21:45:00   2  SELECT
21:45:00   3  pair
21:45:00   4  ,ydate
21:45:00   5  ,prdate
21:45:00   6  ,trend
21:45:00   7  ,g6
21:45:00   8  ,gatt
21:45:00   9  ,gattn
21:45:00  10  FROM svm6162
21:45:00  11  /

Table created.

Elapsed: 00:00:00.10
21:45:00 SQL> 
21:45:00 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
21:45:01 SQL> 
21:45:01 SQL> DROP   TABLE ajp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
21:45:01 SQL> CREATE TABLE ajp_ms610 COMPRESS AS
21:45:01   2  SELECT
21:45:01   3  ydate
21:45:01   4  ,trend ajp_trend
21:45:01   5  ,g6    ajp_g6
21:45:01   6  ,gatt  ajp_gatt
21:45:01   7  ,gattn ajp_gattn
21:45:01   8  FROM modsrc
21:45:01   9  /

Table created.

Elapsed: 00:00:00.10
21:45:01 SQL> 
21:45:01 SQL> ANALYZE TABLE ajp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
21:45:01 SQL> 
21:45:01 SQL> -- I need a copy of the attributes:
21:45:01 SQL> 
21:45:01 SQL> 
21:45:01 SQL> DROP   TABLE ajp_att;

Table dropped.

Elapsed: 00:00:00.06
21:45:01 SQL> CREATE TABLE ajp_att COMPRESS AS
21:45:01   2  SELECT
21:45:01   3  ydate
21:45:01   4  ,att00 ajp_att00
21:45:01   5  ,att01 ajp_att01
21:45:01   6  ,att02 ajp_att02
21:45:01   7  ,att03 ajp_att03
21:45:01   8  ,att04 ajp_att04
21:45:01   9  ,att05 ajp_att05
21:45:01  10  ,att06 ajp_att06
21:45:01  11  ,att07 ajp_att07
21:45:01  12  ,att08 ajp_att08
21:45:01  13  ,att09 ajp_att09
21:45:01  14  ,att10 ajp_att10
21:45:01  15  ,att11 ajp_att11
21:45:01  16  ,att12 ajp_att12
21:45:01  17  ,att13 ajp_att13
21:45:01  18  ,att14 ajp_att14
21:45:01  19  ,att15 ajp_att15
21:45:01  20  ,att16 ajp_att16
21:45:01  21  ,att17 ajp_att17
21:45:01  22  ,att18 ajp_att18
21:45:01  23  ,att19 ajp_att19
21:45:01  24  ,att20 ajp_att20
21:45:01  25  ,att21 ajp_att21
21:45:01  26  ,att22 ajp_att22
21:45:01  27  ,att23 ajp_att23
21:45:01  28  ,att24 ajp_att24
21:45:01  29  ,att25 ajp_att25
21:45:01  30  ,att26 ajp_att26
21:45:01  31  ,att27 ajp_att27
21:45:01  32  ,att28 ajp_att28
21:45:01  33  ,att29 ajp_att29
21:45:01  34  ,att30 ajp_att30
21:45:01  35  ,att31 ajp_att31
21:45:01  36  ,att32 ajp_att32
21:45:01  37  ,att33 ajp_att33
21:45:01  38  ,att34 ajp_att34
21:45:01  39  ,att35 ajp_att35
21:45:01  40  ,att36 ajp_att36
21:45:01  41  ,att37 ajp_att37
21:45:01  42  FROM svm6162
21:45:01  43  /

Table created.

Elapsed: 00:00:00.17
21:45:01 SQL> 
21:45:01 SQL> ANALYZE TABLE ajp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.49
21:45:02 SQL> 
21:45:02 SQL> -- rpt
21:45:02 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19806

Elapsed: 00:00:00.79
21:45:02 SQL> SELECT COUNT(*)FROM ajp_att;

  COUNT(*)
----------
     19807

Elapsed: 00:00:00.01
21:45:02 SQL> 
21:45:02 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
