
SQL*Plus: Release 11.2.0.1.0 Production on Fri Jan 7 18:00:01 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

18:00:01 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
18:00:01 SQL> 18:00:01 SQL> --
18:00:01 SQL> -- eur610.sql
18:00:01 SQL> --
18:00:01 SQL> 
18:00:01 SQL> -- Creates views and tables for backtesting a forex SVM strategy
18:00:01 SQL> 
18:00:01 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.02
18:00:01 SQL> 
18:00:01 SQL> -- I created di5min here:
18:00:01 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
18:00:01 SQL> 
18:00:01 SQL> CREATE OR REPLACE VIEW svm6102 AS
18:00:01   2  SELECT
18:00:01   3  pair
18:00:01   4  ,ydate
18:00:01   5  ,prdate
18:00:01   6  ,rownum rnum -- acts as t in my time-series
18:00:01   7  ,clse
18:00:01   8  -- Derive a bunch of attributes from clse, the latest price:
18:00:01   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
18:00:01  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
18:00:01  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
18:00:01  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
18:00:01  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
18:00:01  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
18:00:01  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
18:00:01  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
18:00:01  17  --
18:00:01  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
18:00:01  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
18:00:01  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
18:00:01  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
18:00:01  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
18:00:01  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
18:00:01  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
18:00:01  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
18:00:01  26  --
18:00:01  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
18:00:01  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
18:00:01  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
18:00:01  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
18:00:01  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
18:00:01  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
18:00:01  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
18:00:01  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
18:00:01  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
18:00:01  36  FROM di5min WHERE pair LIKE'%eur%'
18:00:01  37  AND ydate > sysdate - 95
18:00:01  38  ORDER BY ydate
18:00:01  39  /

View created.

Elapsed: 00:00:00.09
18:00:02 SQL> 
18:00:02 SQL> -- rpt
18:00:02 SQL> 
18:00:02 SQL> SELECT
18:00:02   2  pair
18:00:02   3  ,COUNT(pair)
18:00:02   4  ,MIN(clse),MAX(clse)
18:00:02   5  ,MIN(avg6),MAX(avg6)
18:00:02   6  ,MIN(ydate),MAX(ydate)
18:00:02   7  FROM svm6102
18:00:02   8  GROUP BY pair
18:00:02   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19810    1.29125	   1.4273 1.29633099 1.42436233 2010-10-04 18:05:01 2011-01-07 17:55:00

Elapsed: 00:00:00.94
18:00:03 SQL> 
18:00:03 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
18:00:03 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.14
18:00:03 SQL> CREATE TABLE svm6122 COMPRESS AS
18:00:03   2  SELECT
18:00:03   3  pair
18:00:03   4  ,ydate
18:00:03   5  ,prdate
18:00:03   6  ,clse
18:00:03   7  -- g6 is important. I want to predict g6:
18:00:03   8  ,ld6 - clse g6
18:00:03   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
18:00:03  10  -- I want more attributes from the ones I derived above:
18:00:03  11  -- clse relation to moving-min
18:00:03  12  ,clse-min4  cm4
18:00:03  13  ,clse-min6  cm6
18:00:03  14  ,clse-min8  cm8
18:00:03  15  ,clse-min10 cm10
18:00:03  16  ,clse-min12 cm12
18:00:03  17  ,clse-min14 cm14
18:00:03  18  ,clse-min16 cm16
18:00:03  19  ,clse-min18 cm18
18:00:03  20  -- clse relation to moving-avg
18:00:03  21  ,clse-avg4  ca4
18:00:03  22  ,clse-avg6  ca6
18:00:03  23  ,clse-avg8  ca8
18:00:03  24  ,clse-avg10 ca10
18:00:03  25  ,clse-avg12 ca12
18:00:03  26  ,clse-avg14 ca14
18:00:03  27  ,clse-avg16 ca16
18:00:03  28  ,clse-avg18 ca18
18:00:03  29  -- clse relation to moving-max
18:00:03  30  ,clse-max4  cx4
18:00:03  31  ,clse-max6  cx6
18:00:03  32  ,clse-max8  cx8
18:00:03  33  ,clse-max10 cx10
18:00:03  34  ,clse-max12 cx12
18:00:03  35  ,clse-max14 cx14
18:00:03  36  ,clse-max16 cx16
18:00:03  37  ,clse-max18 cx18
18:00:03  38  -- Derive more attributes.
18:00:03  39  -- I want to use CORR() here to help SVM see the shape of the series.
18:00:03  40  -- But COVAR_POP is more stable:
18:00:03  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
18:00:03  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
18:00:03  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
18:00:03  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
18:00:03  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
18:00:03  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
18:00:03  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
18:00:03  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
18:00:03  49  -- Derive date related attributes:
18:00:03  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
18:00:03  51  ,0+TO_CHAR(ydate,'D')d
18:00:03  52  ,0+TO_CHAR(ydate,'W')w
18:00:03  53  -- mpm stands for minutes-past-midnight:
18:00:03  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
18:00:03  55  -- mph stands for minutes-past-hour:
18:00:03  56  ,0+TO_CHAR(ydate,'MI')mph
18:00:03  57  FROM svm6102
18:00:03  58  ORDER BY ydate
18:00:03  59  /

Table created.

Elapsed: 00:00:02.49
18:00:05 SQL> 
18:00:05 SQL> -- rpt
18:00:05 SQL> 
18:00:05 SQL> SELECT
18:00:05   2  pair
18:00:05   3  ,COUNT(pair)
18:00:05   4  ,MIN(clse),MAX(clse)
18:00:05   5  ,MIN(ydate),MAX(ydate)
18:00:05   6  FROM svm6122
18:00:05   7  GROUP BY pair
18:00:05   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19810    1.29125	   1.4273 2010-10-04 18:05:01 2011-01-07 17:55:00

Elapsed: 00:00:00.08
18:00:05 SQL> 
18:00:05 SQL> -- Prepare for derivation of NTILE based params:
18:00:05 SQL> 
18:00:05 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.16
18:00:05 SQL> CREATE TABLE svm6142 COMPRESS AS
18:00:05   2  SELECT
18:00:05   3  pair
18:00:05   4  ,ydate
18:00:05   5  ,prdate
18:00:05   6  ,clse
18:00:05   7  ,g6
18:00:05   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
18:00:05   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
18:00:05  10  ,CASE WHEN trend IS NULL THEN 1
18:00:05  11  	    WHEN trend =0      THEN 1
18:00:05  12  	    ELSE trend END trend
18:00:05  13  ,cm4
18:00:05  14  ,cm6
18:00:05  15  ,cm8
18:00:05  16  ,cm10
18:00:05  17  ,cm12
18:00:05  18  ,cm14
18:00:05  19  ,cm16
18:00:05  20  ,cm18
18:00:05  21  --
18:00:05  22  ,ca4
18:00:05  23  ,ca6
18:00:05  24  ,ca8
18:00:05  25  ,ca10
18:00:05  26  ,ca12
18:00:05  27  ,ca14
18:00:05  28  ,ca16
18:00:05  29  ,ca18
18:00:05  30  --
18:00:05  31  ,cx4
18:00:05  32  ,cx6
18:00:05  33  ,cx8
18:00:05  34  ,cx10
18:00:05  35  ,cx12
18:00:05  36  ,cx14
18:00:05  37  ,cx16
18:00:05  38  ,cx18
18:00:05  39  --
18:00:05  40  ,crr4
18:00:05  41  ,crr6
18:00:05  42  ,crr8
18:00:05  43  ,crr10
18:00:05  44  ,crr12
18:00:05  45  ,crr14
18:00:05  46  ,crr16
18:00:05  47  ,crr18
18:00:05  48  --
18:00:05  49  ,hh
18:00:05  50  ,d
18:00:05  51  ,w
18:00:05  52  ,mpm
18:00:05  53  ,mph
18:00:05  54  FROM svm6122
18:00:05  55  ORDER BY ydate
18:00:05  56  /

Table created.

Elapsed: 00:00:00.39
18:00:06 SQL> 
18:00:06 SQL> -- rpt
18:00:06 SQL> 
18:00:06 SQL> SELECT
18:00:06   2  pair
18:00:06   3  ,trend
18:00:06   4  ,gatt
18:00:06   5  ,COUNT(pair)
18:00:06   6  ,AVG(g6)
18:00:06   7  FROM svm6142
18:00:06   8  GROUP BY pair,trend,gatt
18:00:06   9  ORDER BY pair,trend,gatt
18:00:06  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6590 -.00314651
eur_usd 	-1 up	      3568 .004448735
eur_usd 	-1		60
eur_usd 	 1 nup	      5875 -.00324688
eur_usd 	 1 up	      3705 .005071238
eur_usd 	 1		12

6 rows selected.

Elapsed: 00:00:00.04
18:00:06 SQL> 
18:00:06 SQL> 
18:00:06 SQL> -- Derive NTILE based params:
18:00:06 SQL> 
18:00:06 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.04
18:00:06 SQL> CREATE TABLE svm6162 COMPRESS AS
18:00:06   2  SELECT
18:00:06   3  pair
18:00:06   4  ,ydate
18:00:06   5  ,prdate
18:00:06   6  ,clse
18:00:06   7  ,g6
18:00:06   8  ,gatt
18:00:06   9  ,gattn
18:00:06  10  ,trend
18:00:06  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
18:00:06  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
18:00:06  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
18:00:06  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
18:00:06  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
18:00:06  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
18:00:06  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
18:00:06  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
18:00:06  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
18:00:06  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
18:00:06  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
18:00:06  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
18:00:06  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
18:00:06  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
18:00:06  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
18:00:06  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
18:00:06  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
18:00:06  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
18:00:06  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
18:00:06  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
18:00:06  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
18:00:06  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
18:00:06  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
18:00:06  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
18:00:06  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
18:00:06  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
18:00:06  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
18:00:06  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
18:00:06  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
18:00:06  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
18:00:06  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
18:00:06  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
18:00:06  43  ,hh  att32
18:00:06  44  ,d   att33
18:00:06  45  ,w   att34
18:00:06  46  ,mpm att35
18:00:06  47  ,mph att36
18:00:06  48  ,trend att37
18:00:06  49  FROM svm6142
18:00:06  50  ORDER BY ydate
18:00:06  51  /

Table created.

Elapsed: 00:00:04.80
18:00:11 SQL> 
18:00:11 SQL> -- rpt
18:00:11 SQL> 
18:00:11 SQL> SELECT
18:00:11   2  pair
18:00:11   3  ,trend
18:00:11   4  ,gatt
18:00:11   5  ,COUNT(pair)
18:00:11   6  ,AVG(g6)
18:00:11   7  FROM svm6162
18:00:11   8  GROUP BY pair,trend,gatt
18:00:11   9  ORDER BY pair,trend,gatt
18:00:11  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6590 -.00314651
eur_usd 	-1 up	      3568 .004448735
eur_usd 	-1		60
eur_usd 	 1 nup	      5875 -.00324688
eur_usd 	 1 up	      3705 .005071238
eur_usd 	 1		12

6 rows selected.

Elapsed: 00:00:00.03
18:00:11 SQL> 
18:00:11 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.32
18:00:11 SQL> CREATE TABLE modsrc COMPRESS AS
18:00:11   2  SELECT
18:00:11   3  pair
18:00:11   4  ,ydate
18:00:11   5  ,prdate
18:00:11   6  ,trend
18:00:11   7  ,g6
18:00:11   8  ,gatt
18:00:11   9  ,gattn
18:00:11  10  FROM svm6162
18:00:11  11  /

Table created.

Elapsed: 00:00:00.08
18:00:11 SQL> 
18:00:11 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
18:00:11 SQL> 
18:00:11 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.13
18:00:11 SQL> CREATE TABLE eur_ms610 COMPRESS AS
18:00:11   2  SELECT
18:00:11   3  ydate
18:00:11   4  ,trend eur_trend
18:00:11   5  ,g6    eur_g6
18:00:11   6  ,gatt  eur_gatt
18:00:11   7  ,gattn eur_gattn
18:00:11   8  FROM modsrc
18:00:11   9  /

Table created.

Elapsed: 00:00:00.07
18:00:12 SQL> 
18:00:12 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
18:00:12 SQL> 
18:00:12 SQL> -- I need a copy of the attributes:
18:00:12 SQL> 
18:00:12 SQL> 
18:00:12 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.05
18:00:12 SQL> CREATE TABLE eur_att COMPRESS AS
18:00:12   2  SELECT
18:00:12   3  ydate
18:00:12   4  ,att00 eur_att00
18:00:12   5  ,att01 eur_att01
18:00:12   6  ,att02 eur_att02
18:00:12   7  ,att03 eur_att03
18:00:12   8  ,att04 eur_att04
18:00:12   9  ,att05 eur_att05
18:00:12  10  ,att06 eur_att06
18:00:12  11  ,att07 eur_att07
18:00:12  12  ,att08 eur_att08
18:00:12  13  ,att09 eur_att09
18:00:12  14  ,att10 eur_att10
18:00:12  15  ,att11 eur_att11
18:00:12  16  ,att12 eur_att12
18:00:12  17  ,att13 eur_att13
18:00:12  18  ,att14 eur_att14
18:00:12  19  ,att15 eur_att15
18:00:12  20  ,att16 eur_att16
18:00:12  21  ,att17 eur_att17
18:00:12  22  ,att18 eur_att18
18:00:12  23  ,att19 eur_att19
18:00:12  24  ,att20 eur_att20
18:00:12  25  ,att21 eur_att21
18:00:12  26  ,att22 eur_att22
18:00:12  27  ,att23 eur_att23
18:00:12  28  ,att24 eur_att24
18:00:12  29  ,att25 eur_att25
18:00:12  30  ,att26 eur_att26
18:00:12  31  ,att27 eur_att27
18:00:12  32  ,att28 eur_att28
18:00:12  33  ,att29 eur_att29
18:00:12  34  ,att30 eur_att30
18:00:12  35  ,att31 eur_att31
18:00:12  36  ,att32 eur_att32
18:00:12  37  ,att33 eur_att33
18:00:12  38  ,att34 eur_att34
18:00:12  39  ,att35 eur_att35
18:00:12  40  ,att36 eur_att36
18:00:12  41  ,att37 eur_att37
18:00:12  42  FROM svm6162
18:00:12  43  /

Table created.

Elapsed: 00:00:00.18
18:00:12 SQL> 
18:00:12 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
18:00:12 SQL> 
18:00:12 SQL> -- rpt
18:00:12 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19810

Elapsed: 00:00:00.93
18:00:13 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19810

Elapsed: 00:00:00.01
18:00:13 SQL> 
18:00:13 SQL> --
18:00:13 SQL> -- aud610.sql
18:00:13 SQL> --
18:00:13 SQL> 
18:00:13 SQL> -- Creates views and tables for backtesting a forex SVM strategy
18:00:13 SQL> 
18:00:13 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.62
18:00:14 SQL> 
18:00:14 SQL> -- I created di5min here:
18:00:14 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
18:00:14 SQL> 
18:00:14 SQL> CREATE OR REPLACE VIEW svm6102 AS
18:00:14   2  SELECT
18:00:14   3  pair
18:00:14   4  ,ydate
18:00:14   5  ,prdate
18:00:14   6  ,rownum rnum -- acts as t in my time-series
18:00:14   7  ,clse
18:00:14   8  -- Derive a bunch of attributes from clse, the latest price:
18:00:14   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
18:00:14  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
18:00:14  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
18:00:14  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
18:00:14  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
18:00:14  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
18:00:14  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
18:00:14  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
18:00:14  17  --
18:00:14  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
18:00:14  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
18:00:14  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
18:00:14  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
18:00:14  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
18:00:14  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
18:00:14  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
18:00:14  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
18:00:14  26  --
18:00:14  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
18:00:14  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
18:00:14  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
18:00:14  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
18:00:14  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
18:00:14  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
18:00:14  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
18:00:14  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
18:00:14  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
18:00:14  36  FROM di5min WHERE pair LIKE'%aud%'
18:00:14  37  AND ydate > sysdate - 95
18:00:14  38  ORDER BY ydate
18:00:14  39  /

View created.

Elapsed: 00:00:00.05
18:00:14 SQL> 
18:00:14 SQL> -- rpt
18:00:14 SQL> 
18:00:14 SQL> SELECT
18:00:14   2  pair
18:00:14   3  ,COUNT(pair)
18:00:14   4  ,MIN(clse),MAX(clse)
18:00:14   5  ,MIN(avg6),MAX(avg6)
18:00:14   6  ,MIN(ydate),MAX(ydate)
18:00:14   7  FROM svm6102
18:00:14   8  GROUP BY pair
18:00:14   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19807	.95405	  1.02495 .957141438 1.02284247 2010-10-04 18:05:01 2011-01-07 17:55:00

Elapsed: 00:00:00.88
18:00:15 SQL> 
18:00:15 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
18:00:15 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.21
18:00:15 SQL> CREATE TABLE svm6122 COMPRESS AS
18:00:15   2  SELECT
18:00:15   3  pair
18:00:15   4  ,ydate
18:00:15   5  ,prdate
18:00:15   6  ,clse
18:00:15   7  -- g6 is important. I want to predict g6:
18:00:15   8  ,ld6 - clse g6
18:00:15   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
18:00:15  10  -- I want more attributes from the ones I derived above:
18:00:15  11  -- clse relation to moving-min
18:00:15  12  ,clse-min4  cm4
18:00:15  13  ,clse-min6  cm6
18:00:15  14  ,clse-min8  cm8
18:00:15  15  ,clse-min10 cm10
18:00:15  16  ,clse-min12 cm12
18:00:15  17  ,clse-min14 cm14
18:00:15  18  ,clse-min16 cm16
18:00:15  19  ,clse-min18 cm18
18:00:15  20  -- clse relation to moving-avg
18:00:15  21  ,clse-avg4  ca4
18:00:15  22  ,clse-avg6  ca6
18:00:15  23  ,clse-avg8  ca8
18:00:15  24  ,clse-avg10 ca10
18:00:15  25  ,clse-avg12 ca12
18:00:15  26  ,clse-avg14 ca14
18:00:15  27  ,clse-avg16 ca16
18:00:15  28  ,clse-avg18 ca18
18:00:15  29  -- clse relation to moving-max
18:00:15  30  ,clse-max4  cx4
18:00:15  31  ,clse-max6  cx6
18:00:15  32  ,clse-max8  cx8
18:00:15  33  ,clse-max10 cx10
18:00:15  34  ,clse-max12 cx12
18:00:15  35  ,clse-max14 cx14
18:00:15  36  ,clse-max16 cx16
18:00:15  37  ,clse-max18 cx18
18:00:15  38  -- Derive more attributes.
18:00:15  39  -- I want to use CORR() here to help SVM see the shape of the series.
18:00:15  40  -- But COVAR_POP is more stable:
18:00:15  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
18:00:15  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
18:00:15  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
18:00:15  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
18:00:15  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
18:00:15  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
18:00:15  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
18:00:15  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
18:00:15  49  -- Derive date related attributes:
18:00:15  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
18:00:15  51  ,0+TO_CHAR(ydate,'D')d
18:00:15  52  ,0+TO_CHAR(ydate,'W')w
18:00:15  53  -- mpm stands for minutes-past-midnight:
18:00:15  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
18:00:15  55  -- mph stands for minutes-past-hour:
18:00:15  56  ,0+TO_CHAR(ydate,'MI')mph
18:00:15  57  FROM svm6102
18:00:15  58  ORDER BY ydate
18:00:15  59  /

Table created.

Elapsed: 00:00:02.13
18:00:17 SQL> 
18:00:17 SQL> -- rpt
18:00:17 SQL> 
18:00:17 SQL> SELECT
18:00:17   2  pair
18:00:17   3  ,COUNT(pair)
18:00:17   4  ,MIN(clse),MAX(clse)
18:00:17   5  ,MIN(ydate),MAX(ydate)
18:00:17   6  FROM svm6122
18:00:17   7  GROUP BY pair
18:00:17   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19807	.95405	  1.02495 2010-10-04 18:05:01 2011-01-07 17:55:00

Elapsed: 00:00:00.07
18:00:17 SQL> 
18:00:17 SQL> -- Prepare for derivation of NTILE based params:
18:00:17 SQL> 
18:00:17 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.22
18:00:18 SQL> CREATE TABLE svm6142 COMPRESS AS
18:00:18   2  SELECT
18:00:18   3  pair
18:00:18   4  ,ydate
18:00:18   5  ,prdate
18:00:18   6  ,clse
18:00:18   7  ,g6
18:00:18   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
18:00:18   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
18:00:18  10  ,CASE WHEN trend IS NULL THEN 1
18:00:18  11  	    WHEN trend =0      THEN 1
18:00:18  12  	    ELSE trend END trend
18:00:18  13  ,cm4
18:00:18  14  ,cm6
18:00:18  15  ,cm8
18:00:18  16  ,cm10
18:00:18  17  ,cm12
18:00:18  18  ,cm14
18:00:18  19  ,cm16
18:00:18  20  ,cm18
18:00:18  21  --
18:00:18  22  ,ca4
18:00:18  23  ,ca6
18:00:18  24  ,ca8
18:00:18  25  ,ca10
18:00:18  26  ,ca12
18:00:18  27  ,ca14
18:00:18  28  ,ca16
18:00:18  29  ,ca18
18:00:18  30  --
18:00:18  31  ,cx4
18:00:18  32  ,cx6
18:00:18  33  ,cx8
18:00:18  34  ,cx10
18:00:18  35  ,cx12
18:00:18  36  ,cx14
18:00:18  37  ,cx16
18:00:18  38  ,cx18
18:00:18  39  --
18:00:18  40  ,crr4
18:00:18  41  ,crr6
18:00:18  42  ,crr8
18:00:18  43  ,crr10
18:00:18  44  ,crr12
18:00:18  45  ,crr14
18:00:18  46  ,crr16
18:00:18  47  ,crr18
18:00:18  48  --
18:00:18  49  ,hh
18:00:18  50  ,d
18:00:18  51  ,w
18:00:18  52  ,mpm
18:00:18  53  ,mph
18:00:18  54  FROM svm6122
18:00:18  55  ORDER BY ydate
18:00:18  56  /

Table created.

Elapsed: 00:00:00.37
18:00:18 SQL> 
18:00:18 SQL> -- rpt
18:00:18 SQL> 
18:00:18 SQL> SELECT
18:00:18   2  pair
18:00:18   3  ,trend
18:00:18   4  ,gatt
18:00:18   5  ,COUNT(pair)
18:00:18   6  ,AVG(g6)
18:00:18   7  FROM svm6142
18:00:18   8  GROUP BY pair,trend,gatt
18:00:18   9  ORDER BY pair,trend,gatt
18:00:18  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5707 -.00216625
aud_usd 	-1 up	      3725 .003773641
aud_usd 	-1		19
aud_usd 	 1 nup	      6707 -.00212174
aud_usd 	 1 up	      3596 .004052687
aud_usd 	 1		53

6 rows selected.

Elapsed: 00:00:00.07
18:00:18 SQL> 
18:00:18 SQL> 
18:00:18 SQL> -- Derive NTILE based params:
18:00:18 SQL> 
18:00:18 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.23
18:00:18 SQL> CREATE TABLE svm6162 COMPRESS AS
18:00:18   2  SELECT
18:00:18   3  pair
18:00:18   4  ,ydate
18:00:18   5  ,prdate
18:00:18   6  ,clse
18:00:18   7  ,g6
18:00:18   8  ,gatt
18:00:18   9  ,gattn
18:00:18  10  ,trend
18:00:18  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
18:00:18  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
18:00:18  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
18:00:18  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
18:00:18  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
18:00:18  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
18:00:18  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
18:00:18  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
18:00:18  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
18:00:18  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
18:00:18  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
18:00:18  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
18:00:18  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
18:00:18  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
18:00:18  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
18:00:18  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
18:00:18  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
18:00:18  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
18:00:18  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
18:00:18  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
18:00:18  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
18:00:18  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
18:00:18  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
18:00:18  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
18:00:18  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
18:00:18  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
18:00:18  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
18:00:18  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
18:00:18  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
18:00:18  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
18:00:18  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
18:00:18  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
18:00:18  43  ,hh  att32
18:00:18  44  ,d   att33
18:00:18  45  ,w   att34
18:00:18  46  ,mpm att35
18:00:18  47  ,mph att36
18:00:18  48  ,trend att37
18:00:18  49  FROM svm6142
18:00:18  50  ORDER BY ydate
18:00:18  51  /

Table created.

Elapsed: 00:00:04.83
18:00:23 SQL> 
18:00:23 SQL> -- rpt
18:00:23 SQL> 
18:00:23 SQL> SELECT
18:00:23   2  pair
18:00:23   3  ,trend
18:00:23   4  ,gatt
18:00:23   5  ,COUNT(pair)
18:00:23   6  ,AVG(g6)
18:00:23   7  FROM svm6162
18:00:23   8  GROUP BY pair,trend,gatt
18:00:23   9  ORDER BY pair,trend,gatt
18:00:23  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5707 -.00216625
aud_usd 	-1 up	      3725 .003773641
aud_usd 	-1		19
aud_usd 	 1 nup	      6707 -.00212174
aud_usd 	 1 up	      3596 .004052687
aud_usd 	 1		53

6 rows selected.

Elapsed: 00:00:00.03
18:00:23 SQL> 
18:00:23 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
18:00:23 SQL> CREATE TABLE modsrc COMPRESS AS
18:00:23   2  SELECT
18:00:23   3  pair
18:00:23   4  ,ydate
18:00:23   5  ,prdate
18:00:23   6  ,trend
18:00:23   7  ,g6
18:00:23   8  ,gatt
18:00:23   9  ,gattn
18:00:23  10  FROM svm6162
18:00:23  11  /

Table created.

Elapsed: 00:00:00.08
18:00:23 SQL> 
18:00:23 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
18:00:23 SQL> 
18:00:23 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.14
18:00:24 SQL> CREATE TABLE aud_ms610 COMPRESS AS
18:00:24   2  SELECT
18:00:24   3  ydate
18:00:24   4  ,trend aud_trend
18:00:24   5  ,g6    aud_g6
18:00:24   6  ,gatt  aud_gatt
18:00:24   7  ,gattn aud_gattn
18:00:24   8  FROM modsrc
18:00:24   9  /

Table created.

Elapsed: 00:00:00.06
18:00:24 SQL> 
18:00:24 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
18:00:24 SQL> 
18:00:24 SQL> -- I need a copy of the attributes:
18:00:24 SQL> 
18:00:24 SQL> 
18:00:24 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.05
18:00:24 SQL> CREATE TABLE aud_att COMPRESS AS
18:00:24   2  SELECT
18:00:24   3  ydate
18:00:24   4  ,att00 aud_att00
18:00:24   5  ,att01 aud_att01
18:00:24   6  ,att02 aud_att02
18:00:24   7  ,att03 aud_att03
18:00:24   8  ,att04 aud_att04
18:00:24   9  ,att05 aud_att05
18:00:24  10  ,att06 aud_att06
18:00:24  11  ,att07 aud_att07
18:00:24  12  ,att08 aud_att08
18:00:24  13  ,att09 aud_att09
18:00:24  14  ,att10 aud_att10
18:00:24  15  ,att11 aud_att11
18:00:24  16  ,att12 aud_att12
18:00:24  17  ,att13 aud_att13
18:00:24  18  ,att14 aud_att14
18:00:24  19  ,att15 aud_att15
18:00:24  20  ,att16 aud_att16
18:00:24  21  ,att17 aud_att17
18:00:24  22  ,att18 aud_att18
18:00:24  23  ,att19 aud_att19
18:00:24  24  ,att20 aud_att20
18:00:24  25  ,att21 aud_att21
18:00:24  26  ,att22 aud_att22
18:00:24  27  ,att23 aud_att23
18:00:24  28  ,att24 aud_att24
18:00:24  29  ,att25 aud_att25
18:00:24  30  ,att26 aud_att26
18:00:24  31  ,att27 aud_att27
18:00:24  32  ,att28 aud_att28
18:00:24  33  ,att29 aud_att29
18:00:24  34  ,att30 aud_att30
18:00:24  35  ,att31 aud_att31
18:00:24  36  ,att32 aud_att32
18:00:24  37  ,att33 aud_att33
18:00:24  38  ,att34 aud_att34
18:00:24  39  ,att35 aud_att35
18:00:24  40  ,att36 aud_att36
18:00:24  41  ,att37 aud_att37
18:00:24  42  FROM svm6162
18:00:24  43  /

Table created.

Elapsed: 00:00:00.17
18:00:24 SQL> 
18:00:24 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
18:00:25 SQL> 
18:00:25 SQL> -- rpt
18:00:25 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19807

Elapsed: 00:00:00.90
18:00:25 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19807

Elapsed: 00:00:00.00
18:00:25 SQL> 
18:00:25 SQL> --
18:00:25 SQL> -- gbp610.sql
18:00:25 SQL> --
18:00:25 SQL> 
18:00:25 SQL> -- Creates views and tables for backtesting a forex SVM strategy
18:00:25 SQL> 
18:00:25 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.75
18:00:26 SQL> 
18:00:26 SQL> -- I created di5min here:
18:00:26 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
18:00:26 SQL> 
18:00:26 SQL> CREATE OR REPLACE VIEW svm6102 AS
18:00:26   2  SELECT
18:00:26   3  pair
18:00:26   4  ,ydate
18:00:26   5  ,prdate
18:00:26   6  ,rownum rnum -- acts as t in my time-series
18:00:26   7  ,clse
18:00:26   8  -- Derive a bunch of attributes from clse, the latest price:
18:00:26   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
18:00:26  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
18:00:26  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
18:00:26  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
18:00:26  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
18:00:26  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
18:00:26  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
18:00:26  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
18:00:26  17  --
18:00:26  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
18:00:26  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
18:00:26  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
18:00:26  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
18:00:26  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
18:00:26  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
18:00:26  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
18:00:26  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
18:00:26  26  --
18:00:26  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
18:00:26  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
18:00:26  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
18:00:26  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
18:00:26  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
18:00:26  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
18:00:26  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
18:00:26  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
18:00:26  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
18:00:26  36  FROM di5min WHERE pair LIKE'%gbp%'
18:00:26  37  AND ydate > sysdate - 95
18:00:26  38  ORDER BY ydate
18:00:26  39  /

View created.

Elapsed: 00:00:00.04
18:00:26 SQL> 
18:00:26 SQL> -- rpt
18:00:26 SQL> 
18:00:26 SQL> SELECT
18:00:26   2  pair
18:00:26   3  ,COUNT(pair)
18:00:26   4  ,MIN(clse),MAX(clse)
18:00:26   5  ,MIN(avg6),MAX(avg6)
18:00:26   6  ,MIN(ydate),MAX(ydate)
18:00:26   7  FROM svm6102
18:00:26   8  GROUP BY pair
18:00:26   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19809   1.535325	   1.6295 1.53696747 1.62716986 2010-10-04 18:05:01 2011-01-07 17:55:00

Elapsed: 00:00:00.87
18:00:27 SQL> 
18:00:27 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
18:00:27 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.20
18:00:27 SQL> CREATE TABLE svm6122 COMPRESS AS
18:00:27   2  SELECT
18:00:27   3  pair
18:00:27   4  ,ydate
18:00:27   5  ,prdate
18:00:27   6  ,clse
18:00:27   7  -- g6 is important. I want to predict g6:
18:00:27   8  ,ld6 - clse g6
18:00:27   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
18:00:27  10  -- I want more attributes from the ones I derived above:
18:00:27  11  -- clse relation to moving-min
18:00:27  12  ,clse-min4  cm4
18:00:27  13  ,clse-min6  cm6
18:00:27  14  ,clse-min8  cm8
18:00:27  15  ,clse-min10 cm10
18:00:27  16  ,clse-min12 cm12
18:00:27  17  ,clse-min14 cm14
18:00:27  18  ,clse-min16 cm16
18:00:27  19  ,clse-min18 cm18
18:00:27  20  -- clse relation to moving-avg
18:00:27  21  ,clse-avg4  ca4
18:00:27  22  ,clse-avg6  ca6
18:00:27  23  ,clse-avg8  ca8
18:00:27  24  ,clse-avg10 ca10
18:00:27  25  ,clse-avg12 ca12
18:00:27  26  ,clse-avg14 ca14
18:00:27  27  ,clse-avg16 ca16
18:00:27  28  ,clse-avg18 ca18
18:00:27  29  -- clse relation to moving-max
18:00:27  30  ,clse-max4  cx4
18:00:27  31  ,clse-max6  cx6
18:00:27  32  ,clse-max8  cx8
18:00:27  33  ,clse-max10 cx10
18:00:27  34  ,clse-max12 cx12
18:00:27  35  ,clse-max14 cx14
18:00:27  36  ,clse-max16 cx16
18:00:27  37  ,clse-max18 cx18
18:00:27  38  -- Derive more attributes.
18:00:27  39  -- I want to use CORR() here to help SVM see the shape of the series.
18:00:27  40  -- But COVAR_POP is more stable:
18:00:27  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
18:00:27  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
18:00:27  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
18:00:27  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
18:00:27  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
18:00:27  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
18:00:27  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
18:00:27  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
18:00:27  49  -- Derive date related attributes:
18:00:27  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
18:00:27  51  ,0+TO_CHAR(ydate,'D')d
18:00:27  52  ,0+TO_CHAR(ydate,'W')w
18:00:27  53  -- mpm stands for minutes-past-midnight:
18:00:27  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
18:00:27  55  -- mph stands for minutes-past-hour:
18:00:27  56  ,0+TO_CHAR(ydate,'MI')mph
18:00:27  57  FROM svm6102
18:00:27  58  ORDER BY ydate
18:00:27  59  /

Table created.

Elapsed: 00:00:02.13
18:00:29 SQL> 
18:00:29 SQL> -- rpt
18:00:29 SQL> 
18:00:29 SQL> SELECT
18:00:29   2  pair
18:00:29   3  ,COUNT(pair)
18:00:29   4  ,MIN(clse),MAX(clse)
18:00:29   5  ,MIN(ydate),MAX(ydate)
18:00:29   6  FROM svm6122
18:00:29   7  GROUP BY pair
18:00:29   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19809   1.535325	   1.6295 2010-10-04 18:05:01 2011-01-07 17:55:00

Elapsed: 00:00:00.04
18:00:30 SQL> 
18:00:30 SQL> -- Prepare for derivation of NTILE based params:
18:00:30 SQL> 
18:00:30 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.26
18:00:30 SQL> CREATE TABLE svm6142 COMPRESS AS
18:00:30   2  SELECT
18:00:30   3  pair
18:00:30   4  ,ydate
18:00:30   5  ,prdate
18:00:30   6  ,clse
18:00:30   7  ,g6
18:00:30   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
18:00:30   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
18:00:30  10  ,CASE WHEN trend IS NULL THEN 1
18:00:30  11  	    WHEN trend =0      THEN 1
18:00:30  12  	    ELSE trend END trend
18:00:30  13  ,cm4
18:00:30  14  ,cm6
18:00:30  15  ,cm8
18:00:30  16  ,cm10
18:00:30  17  ,cm12
18:00:30  18  ,cm14
18:00:30  19  ,cm16
18:00:30  20  ,cm18
18:00:30  21  --
18:00:30  22  ,ca4
18:00:30  23  ,ca6
18:00:30  24  ,ca8
18:00:30  25  ,ca10
18:00:30  26  ,ca12
18:00:30  27  ,ca14
18:00:30  28  ,ca16
18:00:30  29  ,ca18
18:00:30  30  --
18:00:30  31  ,cx4
18:00:30  32  ,cx6
18:00:30  33  ,cx8
18:00:30  34  ,cx10
18:00:30  35  ,cx12
18:00:30  36  ,cx14
18:00:30  37  ,cx16
18:00:30  38  ,cx18
18:00:30  39  --
18:00:30  40  ,crr4
18:00:30  41  ,crr6
18:00:30  42  ,crr8
18:00:30  43  ,crr10
18:00:30  44  ,crr12
18:00:30  45  ,crr14
18:00:30  46  ,crr16
18:00:30  47  ,crr18
18:00:30  48  --
18:00:30  49  ,hh
18:00:30  50  ,d
18:00:30  51  ,w
18:00:30  52  ,mpm
18:00:30  53  ,mph
18:00:30  54  FROM svm6122
18:00:30  55  ORDER BY ydate
18:00:30  56  /

Table created.

Elapsed: 00:00:00.37
18:00:30 SQL> 
18:00:30 SQL> -- rpt
18:00:30 SQL> 
18:00:30 SQL> SELECT
18:00:30   2  pair
18:00:30   3  ,trend
18:00:30   4  ,gatt
18:00:30   5  ,COUNT(pair)
18:00:30   6  ,AVG(g6)
18:00:30   7  FROM svm6142
18:00:30   8  GROUP BY pair,trend,gatt
18:00:30   9  ORDER BY pair,trend,gatt
18:00:30  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6503  -.0026057
gbp_usd 	-1 up	      3557  .00434541
gbp_usd 	 1 nup	      6204 -.00267151
gbp_usd 	 1 up	      3473 .004568122
gbp_usd 	 1		72

Elapsed: 00:00:00.04
18:00:30 SQL> 
18:00:30 SQL> 
18:00:30 SQL> -- Derive NTILE based params:
18:00:30 SQL> 
18:00:30 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
18:00:30 SQL> CREATE TABLE svm6162 COMPRESS AS
18:00:30   2  SELECT
18:00:30   3  pair
18:00:30   4  ,ydate
18:00:30   5  ,prdate
18:00:30   6  ,clse
18:00:30   7  ,g6
18:00:30   8  ,gatt
18:00:30   9  ,gattn
18:00:30  10  ,trend
18:00:30  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
18:00:30  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
18:00:30  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
18:00:30  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
18:00:30  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
18:00:30  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
18:00:30  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
18:00:30  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
18:00:30  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
18:00:30  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
18:00:30  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
18:00:30  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
18:00:30  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
18:00:30  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
18:00:30  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
18:00:30  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
18:00:30  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
18:00:30  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
18:00:30  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
18:00:30  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
18:00:30  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
18:00:30  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
18:00:30  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
18:00:30  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
18:00:30  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
18:00:30  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
18:00:30  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
18:00:30  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
18:00:30  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
18:00:30  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
18:00:30  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
18:00:30  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
18:00:30  43  ,hh  att32
18:00:30  44  ,d   att33
18:00:30  45  ,w   att34
18:00:30  46  ,mpm att35
18:00:30  47  ,mph att36
18:00:30  48  ,trend att37
18:00:30  49  FROM svm6142
18:00:30  50  ORDER BY ydate
18:00:30  51  /

Table created.

Elapsed: 00:00:04.76
18:00:35 SQL> 
18:00:35 SQL> -- rpt
18:00:35 SQL> 
18:00:35 SQL> SELECT
18:00:35   2  pair
18:00:35   3  ,trend
18:00:35   4  ,gatt
18:00:35   5  ,COUNT(pair)
18:00:35   6  ,AVG(g6)
18:00:35   7  FROM svm6162
18:00:35   8  GROUP BY pair,trend,gatt
18:00:35   9  ORDER BY pair,trend,gatt
18:00:35  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6503  -.0026057
gbp_usd 	-1 up	      3557  .00434541
gbp_usd 	 1 nup	      6204 -.00267151
gbp_usd 	 1 up	      3473 .004568122
gbp_usd 	 1		72

Elapsed: 00:00:00.03
18:00:35 SQL> 
18:00:35 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
18:00:35 SQL> CREATE TABLE modsrc COMPRESS AS
18:00:35   2  SELECT
18:00:35   3  pair
18:00:35   4  ,ydate
18:00:35   5  ,prdate
18:00:35   6  ,trend
18:00:35   7  ,g6
18:00:35   8  ,gatt
18:00:35   9  ,gattn
18:00:35  10  FROM svm6162
18:00:35  11  /

Table created.

Elapsed: 00:00:00.08
18:00:35 SQL> 
18:00:35 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
18:00:36 SQL> 
18:00:36 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
18:00:36 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
18:00:36   2  SELECT
18:00:36   3  ydate
18:00:36   4  ,trend gbp_trend
18:00:36   5  ,g6    gbp_g6
18:00:36   6  ,gatt  gbp_gatt
18:00:36   7  ,gattn gbp_gattn
18:00:36   8  FROM modsrc
18:00:36   9  /

Table created.

Elapsed: 00:00:00.07
18:00:36 SQL> 
18:00:36 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
18:00:36 SQL> 
18:00:36 SQL> -- I need a copy of the attributes:
18:00:36 SQL> 
18:00:36 SQL> 
18:00:36 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.05
18:00:36 SQL> CREATE TABLE gbp_att COMPRESS AS
18:00:36   2  SELECT
18:00:36   3  ydate
18:00:36   4  ,att00 gbp_att00
18:00:36   5  ,att01 gbp_att01
18:00:36   6  ,att02 gbp_att02
18:00:36   7  ,att03 gbp_att03
18:00:36   8  ,att04 gbp_att04
18:00:36   9  ,att05 gbp_att05
18:00:36  10  ,att06 gbp_att06
18:00:36  11  ,att07 gbp_att07
18:00:36  12  ,att08 gbp_att08
18:00:36  13  ,att09 gbp_att09
18:00:36  14  ,att10 gbp_att10
18:00:36  15  ,att11 gbp_att11
18:00:36  16  ,att12 gbp_att12
18:00:36  17  ,att13 gbp_att13
18:00:36  18  ,att14 gbp_att14
18:00:36  19  ,att15 gbp_att15
18:00:36  20  ,att16 gbp_att16
18:00:36  21  ,att17 gbp_att17
18:00:36  22  ,att18 gbp_att18
18:00:36  23  ,att19 gbp_att19
18:00:36  24  ,att20 gbp_att20
18:00:36  25  ,att21 gbp_att21
18:00:36  26  ,att22 gbp_att22
18:00:36  27  ,att23 gbp_att23
18:00:36  28  ,att24 gbp_att24
18:00:36  29  ,att25 gbp_att25
18:00:36  30  ,att26 gbp_att26
18:00:36  31  ,att27 gbp_att27
18:00:36  32  ,att28 gbp_att28
18:00:36  33  ,att29 gbp_att29
18:00:36  34  ,att30 gbp_att30
18:00:36  35  ,att31 gbp_att31
18:00:36  36  ,att32 gbp_att32
18:00:36  37  ,att33 gbp_att33
18:00:36  38  ,att34 gbp_att34
18:00:36  39  ,att35 gbp_att35
18:00:36  40  ,att36 gbp_att36
18:00:36  41  ,att37 gbp_att37
18:00:36  42  FROM svm6162
18:00:36  43  /

Table created.

Elapsed: 00:00:00.17
18:00:36 SQL> 
18:00:36 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
18:00:37 SQL> 
18:00:37 SQL> -- rpt
18:00:37 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.89
18:00:37 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.00
18:00:37 SQL> 
18:00:37 SQL> --
18:00:37 SQL> -- jpy610.sql
18:00:37 SQL> --
18:00:37 SQL> 
18:00:37 SQL> -- Creates views and tables for backtesting a forex SVM strategy
18:00:37 SQL> 
18:00:37 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.47
18:00:38 SQL> 
18:00:38 SQL> -- I created di5min here:
18:00:38 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
18:00:38 SQL> 
18:00:38 SQL> CREATE OR REPLACE VIEW svm6102 AS
18:00:38   2  SELECT
18:00:38   3  pair
18:00:38   4  ,ydate
18:00:38   5  ,prdate
18:00:38   6  ,rownum rnum -- acts as t in my time-series
18:00:38   7  ,clse
18:00:38   8  -- Derive a bunch of attributes from clse, the latest price:
18:00:38   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
18:00:38  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
18:00:38  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
18:00:38  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
18:00:38  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
18:00:38  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
18:00:38  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
18:00:38  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
18:00:38  17  --
18:00:38  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
18:00:38  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
18:00:38  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
18:00:38  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
18:00:38  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
18:00:38  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
18:00:38  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
18:00:38  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
18:00:38  26  --
18:00:38  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
18:00:38  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
18:00:38  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
18:00:38  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
18:00:38  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
18:00:38  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
18:00:38  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
18:00:38  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
18:00:38  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
18:00:38  36  FROM di5min WHERE pair LIKE'%jpy%'
18:00:38  37  AND ydate > sysdate - 95
18:00:38  38  ORDER BY ydate
18:00:38  39  /

View created.

Elapsed: 00:00:00.07
18:00:38 SQL> 
18:00:38 SQL> -- rpt
18:00:38 SQL> 
18:00:38 SQL> SELECT
18:00:38   2  pair
18:00:38   3  ,COUNT(pair)
18:00:38   4  ,MIN(clse),MAX(clse)
18:00:38   5  ,MIN(avg6),MAX(avg6)
18:00:38   6  ,MIN(ydate),MAX(ydate)
18:00:38   7  FROM svm6102
18:00:38   8  GROUP BY pair
18:00:38   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19808	 80.25	   84.485 80.3595205 84.3105479 2010-10-04 18:05:01 2011-01-07 17:55:00

Elapsed: 00:00:00.93
18:00:39 SQL> 
18:00:39 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
18:00:39 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.20
18:00:39 SQL> CREATE TABLE svm6122 COMPRESS AS
18:00:39   2  SELECT
18:00:39   3  pair
18:00:39   4  ,ydate
18:00:39   5  ,prdate
18:00:39   6  ,clse
18:00:39   7  -- g6 is important. I want to predict g6:
18:00:39   8  ,ld6 - clse g6
18:00:39   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
18:00:39  10  -- I want more attributes from the ones I derived above:
18:00:39  11  -- clse relation to moving-min
18:00:39  12  ,clse-min4  cm4
18:00:39  13  ,clse-min6  cm6
18:00:39  14  ,clse-min8  cm8
18:00:39  15  ,clse-min10 cm10
18:00:39  16  ,clse-min12 cm12
18:00:39  17  ,clse-min14 cm14
18:00:39  18  ,clse-min16 cm16
18:00:39  19  ,clse-min18 cm18
18:00:39  20  -- clse relation to moving-avg
18:00:39  21  ,clse-avg4  ca4
18:00:39  22  ,clse-avg6  ca6
18:00:39  23  ,clse-avg8  ca8
18:00:39  24  ,clse-avg10 ca10
18:00:39  25  ,clse-avg12 ca12
18:00:39  26  ,clse-avg14 ca14
18:00:39  27  ,clse-avg16 ca16
18:00:39  28  ,clse-avg18 ca18
18:00:39  29  -- clse relation to moving-max
18:00:39  30  ,clse-max4  cx4
18:00:39  31  ,clse-max6  cx6
18:00:39  32  ,clse-max8  cx8
18:00:39  33  ,clse-max10 cx10
18:00:39  34  ,clse-max12 cx12
18:00:39  35  ,clse-max14 cx14
18:00:39  36  ,clse-max16 cx16
18:00:39  37  ,clse-max18 cx18
18:00:39  38  -- Derive more attributes.
18:00:39  39  -- I want to use CORR() here to help SVM see the shape of the series.
18:00:39  40  -- But COVAR_POP is more stable:
18:00:39  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
18:00:39  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
18:00:39  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
18:00:39  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
18:00:39  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
18:00:39  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
18:00:39  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
18:00:39  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
18:00:39  49  -- Derive date related attributes:
18:00:39  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
18:00:39  51  ,0+TO_CHAR(ydate,'D')d
18:00:39  52  ,0+TO_CHAR(ydate,'W')w
18:00:39  53  -- mpm stands for minutes-past-midnight:
18:00:39  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
18:00:39  55  -- mph stands for minutes-past-hour:
18:00:39  56  ,0+TO_CHAR(ydate,'MI')mph
18:00:39  57  FROM svm6102
18:00:39  58  ORDER BY ydate
18:00:39  59  /

Table created.

Elapsed: 00:00:02.17
18:00:41 SQL> 
18:00:41 SQL> -- rpt
18:00:41 SQL> 
18:00:41 SQL> SELECT
18:00:41   2  pair
18:00:41   3  ,COUNT(pair)
18:00:41   4  ,MIN(clse),MAX(clse)
18:00:41   5  ,MIN(ydate),MAX(ydate)
18:00:41   6  FROM svm6122
18:00:41   7  GROUP BY pair
18:00:41   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19808	 80.25	   84.485 2010-10-04 18:05:01 2011-01-07 17:55:00

Elapsed: 00:00:00.08
18:00:41 SQL> 
18:00:41 SQL> -- Prepare for derivation of NTILE based params:
18:00:41 SQL> 
18:00:41 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.37
18:00:42 SQL> CREATE TABLE svm6142 COMPRESS AS
18:00:42   2  SELECT
18:00:42   3  pair
18:00:42   4  ,ydate
18:00:42   5  ,prdate
18:00:42   6  ,clse
18:00:42   7  ,g6
18:00:42   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
18:00:42   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
18:00:42  10  ,CASE WHEN trend IS NULL THEN 1
18:00:42  11  	    WHEN trend =0      THEN 1
18:00:42  12  	    ELSE trend END trend
18:00:42  13  ,cm4
18:00:42  14  ,cm6
18:00:42  15  ,cm8
18:00:42  16  ,cm10
18:00:42  17  ,cm12
18:00:42  18  ,cm14
18:00:42  19  ,cm16
18:00:42  20  ,cm18
18:00:42  21  --
18:00:42  22  ,ca4
18:00:42  23  ,ca6
18:00:42  24  ,ca8
18:00:42  25  ,ca10
18:00:42  26  ,ca12
18:00:42  27  ,ca14
18:00:42  28  ,ca16
18:00:42  29  ,ca18
18:00:42  30  --
18:00:42  31  ,cx4
18:00:42  32  ,cx6
18:00:42  33  ,cx8
18:00:42  34  ,cx10
18:00:42  35  ,cx12
18:00:42  36  ,cx14
18:00:42  37  ,cx16
18:00:42  38  ,cx18
18:00:42  39  --
18:00:42  40  ,crr4
18:00:42  41  ,crr6
18:00:42  42  ,crr8
18:00:42  43  ,crr10
18:00:42  44  ,crr12
18:00:42  45  ,crr14
18:00:42  46  ,crr16
18:00:42  47  ,crr18
18:00:42  48  --
18:00:42  49  ,hh
18:00:42  50  ,d
18:00:42  51  ,w
18:00:42  52  ,mpm
18:00:42  53  ,mph
18:00:42  54  FROM svm6122
18:00:42  55  ORDER BY ydate
18:00:42  56  /

Table created.

Elapsed: 00:00:00.39
18:00:42 SQL> 
18:00:42 SQL> -- rpt
18:00:42 SQL> 
18:00:42 SQL> SELECT
18:00:42   2  pair
18:00:42   3  ,trend
18:00:42   4  ,gatt
18:00:42   5  ,COUNT(pair)
18:00:42   6  ,AVG(g6)
18:00:42   7  FROM svm6142
18:00:42   8  GROUP BY pair,trend,gatt
18:00:42   9  ORDER BY pair,trend,gatt
18:00:42  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5173 -.16580273
usd_jpy 	-1 up	      4865 .170776605
usd_jpy 	-1		55
usd_jpy 	 1 nup	      5065 -.15595491
usd_jpy 	 1 up	      4633 .172976674
usd_jpy 	 1		17

6 rows selected.

Elapsed: 00:00:00.07
18:00:42 SQL> 
18:00:42 SQL> 
18:00:42 SQL> -- Derive NTILE based params:
18:00:42 SQL> 
18:00:42 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.17
18:00:42 SQL> CREATE TABLE svm6162 COMPRESS AS
18:00:42   2  SELECT
18:00:42   3  pair
18:00:42   4  ,ydate
18:00:42   5  ,prdate
18:00:42   6  ,clse
18:00:42   7  ,g6
18:00:42   8  ,gatt
18:00:42   9  ,gattn
18:00:42  10  ,trend
18:00:42  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
18:00:42  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
18:00:42  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
18:00:42  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
18:00:42  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
18:00:42  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
18:00:42  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
18:00:42  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
18:00:42  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
18:00:42  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
18:00:42  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
18:00:42  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
18:00:42  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
18:00:42  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
18:00:42  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
18:00:42  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
18:00:42  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
18:00:42  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
18:00:42  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
18:00:42  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
18:00:42  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
18:00:42  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
18:00:42  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
18:00:42  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
18:00:42  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
18:00:42  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
18:00:42  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
18:00:42  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
18:00:42  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
18:00:42  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
18:00:42  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
18:00:42  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
18:00:42  43  ,hh  att32
18:00:42  44  ,d   att33
18:00:42  45  ,w   att34
18:00:42  46  ,mpm att35
18:00:42  47  ,mph att36
18:00:42  48  ,trend att37
18:00:42  49  FROM svm6142
18:00:42  50  ORDER BY ydate
18:00:42  51  /

Table created.

Elapsed: 00:00:04.82
18:00:47 SQL> 
18:00:47 SQL> -- rpt
18:00:47 SQL> 
18:00:47 SQL> SELECT
18:00:47   2  pair
18:00:47   3  ,trend
18:00:47   4  ,gatt
18:00:47   5  ,COUNT(pair)
18:00:47   6  ,AVG(g6)
18:00:47   7  FROM svm6162
18:00:47   8  GROUP BY pair,trend,gatt
18:00:47   9  ORDER BY pair,trend,gatt
18:00:47  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5173 -.16580273
usd_jpy 	-1 up	      4865 .170776605
usd_jpy 	-1		55
usd_jpy 	 1 nup	      5065 -.15595491
usd_jpy 	 1 up	      4633 .172976674
usd_jpy 	 1		17

6 rows selected.

Elapsed: 00:00:00.03
18:00:47 SQL> 
18:00:47 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.23
18:00:47 SQL> CREATE TABLE modsrc COMPRESS AS
18:00:47   2  SELECT
18:00:47   3  pair
18:00:47   4  ,ydate
18:00:47   5  ,prdate
18:00:47   6  ,trend
18:00:47   7  ,g6
18:00:47   8  ,gatt
18:00:47   9  ,gattn
18:00:47  10  FROM svm6162
18:00:47  11  /

Table created.

Elapsed: 00:00:00.07
18:00:48 SQL> 
18:00:48 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
18:00:48 SQL> 
18:00:48 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
18:00:48 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
18:00:48   2  SELECT
18:00:48   3  ydate
18:00:48   4  ,trend jpy_trend
18:00:48   5  ,g6    jpy_g6
18:00:48   6  ,gatt  jpy_gatt
18:00:48   7  ,gattn jpy_gattn
18:00:48   8  FROM modsrc
18:00:48   9  /

Table created.

Elapsed: 00:00:00.10
18:00:48 SQL> 
18:00:48 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
18:00:48 SQL> 
18:00:48 SQL> -- I need a copy of the attributes:
18:00:48 SQL> 
18:00:48 SQL> 
18:00:48 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.05
18:00:48 SQL> CREATE TABLE jpy_att COMPRESS AS
18:00:48   2  SELECT
18:00:48   3  ydate
18:00:48   4  ,att00 jpy_att00
18:00:48   5  ,att01 jpy_att01
18:00:48   6  ,att02 jpy_att02
18:00:48   7  ,att03 jpy_att03
18:00:48   8  ,att04 jpy_att04
18:00:48   9  ,att05 jpy_att05
18:00:48  10  ,att06 jpy_att06
18:00:48  11  ,att07 jpy_att07
18:00:48  12  ,att08 jpy_att08
18:00:48  13  ,att09 jpy_att09
18:00:48  14  ,att10 jpy_att10
18:00:48  15  ,att11 jpy_att11
18:00:48  16  ,att12 jpy_att12
18:00:48  17  ,att13 jpy_att13
18:00:48  18  ,att14 jpy_att14
18:00:48  19  ,att15 jpy_att15
18:00:48  20  ,att16 jpy_att16
18:00:48  21  ,att17 jpy_att17
18:00:48  22  ,att18 jpy_att18
18:00:48  23  ,att19 jpy_att19
18:00:48  24  ,att20 jpy_att20
18:00:48  25  ,att21 jpy_att21
18:00:48  26  ,att22 jpy_att22
18:00:48  27  ,att23 jpy_att23
18:00:48  28  ,att24 jpy_att24
18:00:48  29  ,att25 jpy_att25
18:00:48  30  ,att26 jpy_att26
18:00:48  31  ,att27 jpy_att27
18:00:48  32  ,att28 jpy_att28
18:00:48  33  ,att29 jpy_att29
18:00:48  34  ,att30 jpy_att30
18:00:48  35  ,att31 jpy_att31
18:00:48  36  ,att32 jpy_att32
18:00:48  37  ,att33 jpy_att33
18:00:48  38  ,att34 jpy_att34
18:00:48  39  ,att35 jpy_att35
18:00:48  40  ,att36 jpy_att36
18:00:48  41  ,att37 jpy_att37
18:00:48  42  FROM svm6162
18:00:48  43  /

Table created.

Elapsed: 00:00:00.17
18:00:48 SQL> 
18:00:48 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.61
18:00:49 SQL> 
18:00:49 SQL> -- rpt
18:00:49 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.96
18:00:50 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.00
18:00:50 SQL> 
18:00:50 SQL> --
18:00:50 SQL> -- cad610.sql
18:00:50 SQL> --
18:00:50 SQL> 
18:00:50 SQL> -- Creates views and tables for backtesting a forex SVM strategy
18:00:50 SQL> 
18:00:50 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.56
18:00:50 SQL> 
18:00:50 SQL> -- I created di5min here:
18:00:50 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
18:00:50 SQL> 
18:00:50 SQL> CREATE OR REPLACE VIEW svm6102 AS
18:00:50   2  SELECT
18:00:50   3  pair
18:00:50   4  ,ydate
18:00:50   5  ,prdate
18:00:50   6  ,rownum rnum -- acts as t in my time-series
18:00:50   7  ,clse
18:00:50   8  -- Derive a bunch of attributes from clse, the latest price:
18:00:50   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
18:00:50  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
18:00:50  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
18:00:50  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
18:00:50  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
18:00:50  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
18:00:50  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
18:00:50  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
18:00:50  17  --
18:00:50  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
18:00:50  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
18:00:50  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
18:00:50  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
18:00:50  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
18:00:50  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
18:00:50  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
18:00:50  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
18:00:50  26  --
18:00:50  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
18:00:50  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
18:00:50  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
18:00:50  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
18:00:50  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
18:00:50  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
18:00:50  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
18:00:50  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
18:00:50  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
18:00:50  36  FROM di5min WHERE pair LIKE'%cad%'
18:00:50  37  AND ydate > sysdate - 95
18:00:50  38  ORDER BY ydate
18:00:50  39  /

View created.

Elapsed: 00:00:00.11
18:00:51 SQL> 
18:00:51 SQL> -- rpt
18:00:51 SQL> 
18:00:51 SQL> SELECT
18:00:51   2  pair
18:00:51   3  ,COUNT(pair)
18:00:51   4  ,MIN(clse),MAX(clse)
18:00:51   5  ,MIN(avg6),MAX(avg6)
18:00:51   6  ,MIN(ydate),MAX(ydate)
18:00:51   7  FROM svm6102
18:00:51   8  GROUP BY pair
18:00:51   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19808    .988925	   1.0355  .99060274 1.03282877 2010-10-04 18:05:01 2011-01-07 17:55:00

Elapsed: 00:00:00.88
18:00:51 SQL> 
18:00:51 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
18:00:51 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.26
18:00:52 SQL> CREATE TABLE svm6122 COMPRESS AS
18:00:52   2  SELECT
18:00:52   3  pair
18:00:52   4  ,ydate
18:00:52   5  ,prdate
18:00:52   6  ,clse
18:00:52   7  -- g6 is important. I want to predict g6:
18:00:52   8  ,ld6 - clse g6
18:00:52   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
18:00:52  10  -- I want more attributes from the ones I derived above:
18:00:52  11  -- clse relation to moving-min
18:00:52  12  ,clse-min4  cm4
18:00:52  13  ,clse-min6  cm6
18:00:52  14  ,clse-min8  cm8
18:00:52  15  ,clse-min10 cm10
18:00:52  16  ,clse-min12 cm12
18:00:52  17  ,clse-min14 cm14
18:00:52  18  ,clse-min16 cm16
18:00:52  19  ,clse-min18 cm18
18:00:52  20  -- clse relation to moving-avg
18:00:52  21  ,clse-avg4  ca4
18:00:52  22  ,clse-avg6  ca6
18:00:52  23  ,clse-avg8  ca8
18:00:52  24  ,clse-avg10 ca10
18:00:52  25  ,clse-avg12 ca12
18:00:52  26  ,clse-avg14 ca14
18:00:52  27  ,clse-avg16 ca16
18:00:52  28  ,clse-avg18 ca18
18:00:52  29  -- clse relation to moving-max
18:00:52  30  ,clse-max4  cx4
18:00:52  31  ,clse-max6  cx6
18:00:52  32  ,clse-max8  cx8
18:00:52  33  ,clse-max10 cx10
18:00:52  34  ,clse-max12 cx12
18:00:52  35  ,clse-max14 cx14
18:00:52  36  ,clse-max16 cx16
18:00:52  37  ,clse-max18 cx18
18:00:52  38  -- Derive more attributes.
18:00:52  39  -- I want to use CORR() here to help SVM see the shape of the series.
18:00:52  40  -- But COVAR_POP is more stable:
18:00:52  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
18:00:52  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
18:00:52  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
18:00:52  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
18:00:52  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
18:00:52  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
18:00:52  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
18:00:52  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
18:00:52  49  -- Derive date related attributes:
18:00:52  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
18:00:52  51  ,0+TO_CHAR(ydate,'D')d
18:00:52  52  ,0+TO_CHAR(ydate,'W')w
18:00:52  53  -- mpm stands for minutes-past-midnight:
18:00:52  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
18:00:52  55  -- mph stands for minutes-past-hour:
18:00:52  56  ,0+TO_CHAR(ydate,'MI')mph
18:00:52  57  FROM svm6102
18:00:52  58  ORDER BY ydate
18:00:52  59  /

Table created.

Elapsed: 00:00:02.09
18:00:54 SQL> 
18:00:54 SQL> -- rpt
18:00:54 SQL> 
18:00:54 SQL> SELECT
18:00:54   2  pair
18:00:54   3  ,COUNT(pair)
18:00:54   4  ,MIN(clse),MAX(clse)
18:00:54   5  ,MIN(ydate),MAX(ydate)
18:00:54   6  FROM svm6122
18:00:54   7  GROUP BY pair
18:00:54   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19808    .988925	   1.0355 2010-10-04 18:05:01 2011-01-07 17:55:00

Elapsed: 00:00:00.07
18:00:54 SQL> 
18:00:54 SQL> -- Prepare for derivation of NTILE based params:
18:00:54 SQL> 
18:00:54 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.38
18:00:54 SQL> CREATE TABLE svm6142 COMPRESS AS
18:00:54   2  SELECT
18:00:54   3  pair
18:00:54   4  ,ydate
18:00:54   5  ,prdate
18:00:54   6  ,clse
18:00:54   7  ,g6
18:00:54   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
18:00:54   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
18:00:54  10  ,CASE WHEN trend IS NULL THEN 1
18:00:54  11  	    WHEN trend =0      THEN 1
18:00:54  12  	    ELSE trend END trend
18:00:54  13  ,cm4
18:00:54  14  ,cm6
18:00:54  15  ,cm8
18:00:54  16  ,cm10
18:00:54  17  ,cm12
18:00:54  18  ,cm14
18:00:54  19  ,cm16
18:00:54  20  ,cm18
18:00:54  21  --
18:00:54  22  ,ca4
18:00:54  23  ,ca6
18:00:54  24  ,ca8
18:00:54  25  ,ca10
18:00:54  26  ,ca12
18:00:54  27  ,ca14
18:00:54  28  ,ca16
18:00:54  29  ,ca18
18:00:54  30  --
18:00:54  31  ,cx4
18:00:54  32  ,cx6
18:00:54  33  ,cx8
18:00:54  34  ,cx10
18:00:54  35  ,cx12
18:00:54  36  ,cx14
18:00:54  37  ,cx16
18:00:54  38  ,cx18
18:00:54  39  --
18:00:54  40  ,crr4
18:00:54  41  ,crr6
18:00:54  42  ,crr8
18:00:54  43  ,crr10
18:00:54  44  ,crr12
18:00:54  45  ,crr14
18:00:54  46  ,crr16
18:00:54  47  ,crr18
18:00:54  48  --
18:00:54  49  ,hh
18:00:54  50  ,d
18:00:54  51  ,w
18:00:54  52  ,mpm
18:00:54  53  ,mph
18:00:54  54  FROM svm6122
18:00:54  55  ORDER BY ydate
18:00:54  56  /

Table created.

Elapsed: 00:00:00.46
18:00:55 SQL> 
18:00:55 SQL> -- rpt
18:00:55 SQL> 
18:00:55 SQL> SELECT
18:00:55   2  pair
18:00:55   3  ,trend
18:00:55   4  ,gatt
18:00:55   5  ,COUNT(pair)
18:00:55   6  ,AVG(g6)
18:00:55   7  FROM svm6142
18:00:55   8  GROUP BY pair,trend,gatt
18:00:55   9  ORDER BY pair,trend,gatt
18:00:55  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7343   -.001238
usd_cad 	-1 up	      3125 .003054807
usd_cad 	-1		72
usd_cad 	 1 nup	      6837 -.00167358
usd_cad 	 1 up	      2431   .0036212

Elapsed: 00:00:00.04
18:00:55 SQL> 
18:00:55 SQL> 
18:00:55 SQL> -- Derive NTILE based params:
18:00:55 SQL> 
18:00:55 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
18:00:55 SQL> CREATE TABLE svm6162 COMPRESS AS
18:00:55   2  SELECT
18:00:55   3  pair
18:00:55   4  ,ydate
18:00:55   5  ,prdate
18:00:55   6  ,clse
18:00:55   7  ,g6
18:00:55   8  ,gatt
18:00:55   9  ,gattn
18:00:55  10  ,trend
18:00:55  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
18:00:55  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
18:00:55  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
18:00:55  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
18:00:55  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
18:00:55  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
18:00:55  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
18:00:55  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
18:00:55  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
18:00:55  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
18:00:55  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
18:00:55  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
18:00:55  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
18:00:55  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
18:00:55  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
18:00:55  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
18:00:55  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
18:00:55  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
18:00:55  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
18:00:55  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
18:00:55  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
18:00:55  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
18:00:55  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
18:00:55  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
18:00:55  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
18:00:55  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
18:00:55  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
18:00:55  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
18:00:55  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
18:00:55  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
18:00:55  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
18:00:55  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
18:00:55  43  ,hh  att32
18:00:55  44  ,d   att33
18:00:55  45  ,w   att34
18:00:55  46  ,mpm att35
18:00:55  47  ,mph att36
18:00:55  48  ,trend att37
18:00:55  49  FROM svm6142
18:00:55  50  ORDER BY ydate
18:00:55  51  /

Table created.

Elapsed: 00:00:04.89
18:01:00 SQL> 
18:01:00 SQL> -- rpt
18:01:00 SQL> 
18:01:00 SQL> SELECT
18:01:00   2  pair
18:01:00   3  ,trend
18:01:00   4  ,gatt
18:01:00   5  ,COUNT(pair)
18:01:00   6  ,AVG(g6)
18:01:00   7  FROM svm6162
18:01:00   8  GROUP BY pair,trend,gatt
18:01:00   9  ORDER BY pair,trend,gatt
18:01:00  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7343   -.001238
usd_cad 	-1 up	      3125 .003054807
usd_cad 	-1		72
usd_cad 	 1 nup	      6837 -.00167358
usd_cad 	 1 up	      2431   .0036212

Elapsed: 00:00:00.03
18:01:00 SQL> 
18:01:00 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.19
18:01:00 SQL> CREATE TABLE modsrc COMPRESS AS
18:01:00   2  SELECT
18:01:00   3  pair
18:01:00   4  ,ydate
18:01:00   5  ,prdate
18:01:00   6  ,trend
18:01:00   7  ,g6
18:01:00   8  ,gatt
18:01:00   9  ,gattn
18:01:00  10  FROM svm6162
18:01:00  11  /

Table created.

Elapsed: 00:00:00.09
18:01:00 SQL> 
18:01:00 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
18:01:00 SQL> 
18:01:00 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
18:01:00 SQL> CREATE TABLE cad_ms610 COMPRESS AS
18:01:00   2  SELECT
18:01:00   3  ydate
18:01:00   4  ,trend cad_trend
18:01:00   5  ,g6    cad_g6
18:01:00   6  ,gatt  cad_gatt
18:01:00   7  ,gattn cad_gattn
18:01:00   8  FROM modsrc
18:01:00   9  /

Table created.

Elapsed: 00:00:00.07
18:01:00 SQL> 
18:01:00 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
18:01:01 SQL> 
18:01:01 SQL> -- I need a copy of the attributes:
18:01:01 SQL> 
18:01:01 SQL> 
18:01:01 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.05
18:01:01 SQL> CREATE TABLE cad_att COMPRESS AS
18:01:01   2  SELECT
18:01:01   3  ydate
18:01:01   4  ,att00 cad_att00
18:01:01   5  ,att01 cad_att01
18:01:01   6  ,att02 cad_att02
18:01:01   7  ,att03 cad_att03
18:01:01   8  ,att04 cad_att04
18:01:01   9  ,att05 cad_att05
18:01:01  10  ,att06 cad_att06
18:01:01  11  ,att07 cad_att07
18:01:01  12  ,att08 cad_att08
18:01:01  13  ,att09 cad_att09
18:01:01  14  ,att10 cad_att10
18:01:01  15  ,att11 cad_att11
18:01:01  16  ,att12 cad_att12
18:01:01  17  ,att13 cad_att13
18:01:01  18  ,att14 cad_att14
18:01:01  19  ,att15 cad_att15
18:01:01  20  ,att16 cad_att16
18:01:01  21  ,att17 cad_att17
18:01:01  22  ,att18 cad_att18
18:01:01  23  ,att19 cad_att19
18:01:01  24  ,att20 cad_att20
18:01:01  25  ,att21 cad_att21
18:01:01  26  ,att22 cad_att22
18:01:01  27  ,att23 cad_att23
18:01:01  28  ,att24 cad_att24
18:01:01  29  ,att25 cad_att25
18:01:01  30  ,att26 cad_att26
18:01:01  31  ,att27 cad_att27
18:01:01  32  ,att28 cad_att28
18:01:01  33  ,att29 cad_att29
18:01:01  34  ,att30 cad_att30
18:01:01  35  ,att31 cad_att31
18:01:01  36  ,att32 cad_att32
18:01:01  37  ,att33 cad_att33
18:01:01  38  ,att34 cad_att34
18:01:01  39  ,att35 cad_att35
18:01:01  40  ,att36 cad_att36
18:01:01  41  ,att37 cad_att37
18:01:01  42  FROM svm6162
18:01:01  43  /

Table created.

Elapsed: 00:00:00.18
18:01:01 SQL> 
18:01:01 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.50
18:01:01 SQL> 
18:01:01 SQL> -- rpt
18:01:01 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.86
18:01:02 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.00
18:01:02 SQL> 
18:01:02 SQL> --
18:01:02 SQL> -- chf610.sql
18:01:02 SQL> --
18:01:02 SQL> 
18:01:02 SQL> -- Creates views and tables for backtesting a forex SVM strategy
18:01:02 SQL> 
18:01:02 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.56
18:01:03 SQL> 
18:01:03 SQL> -- I created di5min here:
18:01:03 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
18:01:03 SQL> 
18:01:03 SQL> CREATE OR REPLACE VIEW svm6102 AS
18:01:03   2  SELECT
18:01:03   3  pair
18:01:03   4  ,ydate
18:01:03   5  ,prdate
18:01:03   6  ,rownum rnum -- acts as t in my time-series
18:01:03   7  ,clse
18:01:03   8  -- Derive a bunch of attributes from clse, the latest price:
18:01:03   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
18:01:03  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
18:01:03  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
18:01:03  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
18:01:03  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
18:01:03  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
18:01:03  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
18:01:03  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
18:01:03  17  --
18:01:03  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
18:01:03  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
18:01:03  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
18:01:03  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
18:01:03  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
18:01:03  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
18:01:03  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
18:01:03  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
18:01:03  26  --
18:01:03  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
18:01:03  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
18:01:03  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
18:01:03  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
18:01:03  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
18:01:03  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
18:01:03  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
18:01:03  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
18:01:03  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
18:01:03  36  FROM di5min WHERE pair LIKE'%chf%'
18:01:03  37  AND ydate > sysdate - 95
18:01:03  38  ORDER BY ydate
18:01:03  39  /

View created.

Elapsed: 00:00:00.04
18:01:03 SQL> 
18:01:03 SQL> -- rpt
18:01:03 SQL> 
18:01:03 SQL> SELECT
18:01:03   2  pair
18:01:03   3  ,COUNT(pair)
18:01:03   4  ,MIN(clse),MAX(clse)
18:01:03   5  ,MIN(avg6),MAX(avg6)
18:01:03   6  ,MIN(ydate),MAX(ydate)
18:01:03   7  FROM svm6102
18:01:03   8  GROUP BY pair
18:01:03   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19811    .931675	  1.00635 .933257705 1.00498151 2010-10-04 18:05:01 2011-01-07 17:55:00

Elapsed: 00:00:00.90
18:01:04 SQL> 
18:01:04 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
18:01:04 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.28
18:01:04 SQL> CREATE TABLE svm6122 COMPRESS AS
18:01:04   2  SELECT
18:01:04   3  pair
18:01:04   4  ,ydate
18:01:04   5  ,prdate
18:01:04   6  ,clse
18:01:04   7  -- g6 is important. I want to predict g6:
18:01:04   8  ,ld6 - clse g6
18:01:04   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
18:01:04  10  -- I want more attributes from the ones I derived above:
18:01:04  11  -- clse relation to moving-min
18:01:04  12  ,clse-min4  cm4
18:01:04  13  ,clse-min6  cm6
18:01:04  14  ,clse-min8  cm8
18:01:04  15  ,clse-min10 cm10
18:01:04  16  ,clse-min12 cm12
18:01:04  17  ,clse-min14 cm14
18:01:04  18  ,clse-min16 cm16
18:01:04  19  ,clse-min18 cm18
18:01:04  20  -- clse relation to moving-avg
18:01:04  21  ,clse-avg4  ca4
18:01:04  22  ,clse-avg6  ca6
18:01:04  23  ,clse-avg8  ca8
18:01:04  24  ,clse-avg10 ca10
18:01:04  25  ,clse-avg12 ca12
18:01:04  26  ,clse-avg14 ca14
18:01:04  27  ,clse-avg16 ca16
18:01:04  28  ,clse-avg18 ca18
18:01:04  29  -- clse relation to moving-max
18:01:04  30  ,clse-max4  cx4
18:01:04  31  ,clse-max6  cx6
18:01:04  32  ,clse-max8  cx8
18:01:04  33  ,clse-max10 cx10
18:01:04  34  ,clse-max12 cx12
18:01:04  35  ,clse-max14 cx14
18:01:04  36  ,clse-max16 cx16
18:01:04  37  ,clse-max18 cx18
18:01:04  38  -- Derive more attributes.
18:01:04  39  -- I want to use CORR() here to help SVM see the shape of the series.
18:01:04  40  -- But COVAR_POP is more stable:
18:01:04  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
18:01:04  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
18:01:04  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
18:01:04  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
18:01:04  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
18:01:04  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
18:01:04  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
18:01:04  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
18:01:04  49  -- Derive date related attributes:
18:01:04  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
18:01:04  51  ,0+TO_CHAR(ydate,'D')d
18:01:04  52  ,0+TO_CHAR(ydate,'W')w
18:01:04  53  -- mpm stands for minutes-past-midnight:
18:01:04  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
18:01:04  55  -- mph stands for minutes-past-hour:
18:01:04  56  ,0+TO_CHAR(ydate,'MI')mph
18:01:04  57  FROM svm6102
18:01:04  58  ORDER BY ydate
18:01:04  59  /

Table created.

Elapsed: 00:00:02.13
18:01:06 SQL> 
18:01:06 SQL> -- rpt
18:01:06 SQL> 
18:01:06 SQL> SELECT
18:01:06   2  pair
18:01:06   3  ,COUNT(pair)
18:01:06   4  ,MIN(clse),MAX(clse)
18:01:06   5  ,MIN(ydate),MAX(ydate)
18:01:06   6  FROM svm6122
18:01:06   7  GROUP BY pair
18:01:06   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19811    .931675	  1.00635 2010-10-04 18:05:01 2011-01-07 17:55:00

Elapsed: 00:00:00.04
18:01:06 SQL> 
18:01:06 SQL> -- Prepare for derivation of NTILE based params:
18:01:06 SQL> 
18:01:06 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.39
18:01:06 SQL> CREATE TABLE svm6142 COMPRESS AS
18:01:06   2  SELECT
18:01:06   3  pair
18:01:06   4  ,ydate
18:01:06   5  ,prdate
18:01:06   6  ,clse
18:01:06   7  ,g6
18:01:06   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
18:01:06   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
18:01:06  10  ,CASE WHEN trend IS NULL THEN 1
18:01:06  11  	    WHEN trend =0      THEN 1
18:01:06  12  	    ELSE trend END trend
18:01:06  13  ,cm4
18:01:06  14  ,cm6
18:01:06  15  ,cm8
18:01:06  16  ,cm10
18:01:06  17  ,cm12
18:01:06  18  ,cm14
18:01:06  19  ,cm16
18:01:06  20  ,cm18
18:01:06  21  --
18:01:06  22  ,ca4
18:01:06  23  ,ca6
18:01:06  24  ,ca8
18:01:06  25  ,ca10
18:01:06  26  ,ca12
18:01:06  27  ,ca14
18:01:06  28  ,ca16
18:01:06  29  ,ca18
18:01:06  30  --
18:01:06  31  ,cx4
18:01:06  32  ,cx6
18:01:06  33  ,cx8
18:01:06  34  ,cx10
18:01:06  35  ,cx12
18:01:06  36  ,cx14
18:01:06  37  ,cx16
18:01:06  38  ,cx18
18:01:06  39  --
18:01:06  40  ,crr4
18:01:06  41  ,crr6
18:01:06  42  ,crr8
18:01:06  43  ,crr10
18:01:06  44  ,crr12
18:01:06  45  ,crr14
18:01:06  46  ,crr16
18:01:06  47  ,crr18
18:01:06  48  --
18:01:06  49  ,hh
18:01:06  50  ,d
18:01:06  51  ,w
18:01:06  52  ,mpm
18:01:06  53  ,mph
18:01:06  54  FROM svm6122
18:01:06  55  ORDER BY ydate
18:01:06  56  /

Table created.

Elapsed: 00:00:00.40
18:01:07 SQL> 
18:01:07 SQL> -- rpt
18:01:07 SQL> 
18:01:07 SQL> SELECT
18:01:07   2  pair
18:01:07   3  ,trend
18:01:07   4  ,gatt
18:01:07   5  ,COUNT(pair)
18:01:07   6  ,AVG(g6)
18:01:07   7  FROM svm6142
18:01:07   8  GROUP BY pair,trend,gatt
18:01:07   9  ORDER BY pair,trend,gatt
18:01:07  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7084 -.00197626
usd_chf 	-1 up	      3116 .003799163
usd_chf 	-1		24
usd_chf 	 1 nup	      6590 -.00151729
usd_chf 	 1 up	      2949 .003956905
usd_chf 	 1		48

6 rows selected.

Elapsed: 00:00:00.04
18:01:07 SQL> 
18:01:07 SQL> 
18:01:07 SQL> -- Derive NTILE based params:
18:01:07 SQL> 
18:01:07 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.22
18:01:07 SQL> CREATE TABLE svm6162 COMPRESS AS
18:01:07   2  SELECT
18:01:07   3  pair
18:01:07   4  ,ydate
18:01:07   5  ,prdate
18:01:07   6  ,clse
18:01:07   7  ,g6
18:01:07   8  ,gatt
18:01:07   9  ,gattn
18:01:07  10  ,trend
18:01:07  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
18:01:07  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
18:01:07  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
18:01:07  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
18:01:07  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
18:01:07  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
18:01:07  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
18:01:07  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
18:01:07  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
18:01:07  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
18:01:07  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
18:01:07  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
18:01:07  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
18:01:07  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
18:01:07  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
18:01:07  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
18:01:07  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
18:01:07  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
18:01:07  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
18:01:07  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
18:01:07  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
18:01:07  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
18:01:07  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
18:01:07  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
18:01:07  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
18:01:07  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
18:01:07  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
18:01:07  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
18:01:07  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
18:01:07  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
18:01:07  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
18:01:07  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
18:01:07  43  ,hh  att32
18:01:07  44  ,d   att33
18:01:07  45  ,w   att34
18:01:07  46  ,mpm att35
18:01:07  47  ,mph att36
18:01:07  48  ,trend att37
18:01:07  49  FROM svm6142
18:01:07  50  ORDER BY ydate
18:01:07  51  /

Table created.

Elapsed: 00:00:04.94
18:01:12 SQL> 
18:01:12 SQL> -- rpt
18:01:12 SQL> 
18:01:12 SQL> SELECT
18:01:12   2  pair
18:01:12   3  ,trend
18:01:12   4  ,gatt
18:01:12   5  ,COUNT(pair)
18:01:12   6  ,AVG(g6)
18:01:12   7  FROM svm6162
18:01:12   8  GROUP BY pair,trend,gatt
18:01:12   9  ORDER BY pair,trend,gatt
18:01:12  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7084 -.00197626
usd_chf 	-1 up	      3116 .003799163
usd_chf 	-1		24
usd_chf 	 1 nup	      6590 -.00151729
usd_chf 	 1 up	      2949 .003956905
usd_chf 	 1		48

6 rows selected.

Elapsed: 00:00:00.03
18:01:12 SQL> 
18:01:12 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.32
18:01:12 SQL> CREATE TABLE modsrc COMPRESS AS
18:01:12   2  SELECT
18:01:12   3  pair
18:01:12   4  ,ydate
18:01:12   5  ,prdate
18:01:12   6  ,trend
18:01:12   7  ,g6
18:01:12   8  ,gatt
18:01:12   9  ,gattn
18:01:12  10  FROM svm6162
18:01:12  11  /

Table created.

Elapsed: 00:00:00.09
18:01:13 SQL> 
18:01:13 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
18:01:13 SQL> 
18:01:13 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
18:01:13 SQL> CREATE TABLE chf_ms610 COMPRESS AS
18:01:13   2  SELECT
18:01:13   3  ydate
18:01:13   4  ,trend chf_trend
18:01:13   5  ,g6    chf_g6
18:01:13   6  ,gatt  chf_gatt
18:01:13   7  ,gattn chf_gattn
18:01:13   8  FROM modsrc
18:01:13   9  /

Table created.

Elapsed: 00:00:00.19
18:01:13 SQL> 
18:01:13 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
18:01:13 SQL> 
18:01:13 SQL> -- I need a copy of the attributes:
18:01:13 SQL> 
18:01:13 SQL> 
18:01:13 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.04
18:01:13 SQL> CREATE TABLE chf_att COMPRESS AS
18:01:13   2  SELECT
18:01:13   3  ydate
18:01:13   4  ,att00 chf_att00
18:01:13   5  ,att01 chf_att01
18:01:13   6  ,att02 chf_att02
18:01:13   7  ,att03 chf_att03
18:01:13   8  ,att04 chf_att04
18:01:13   9  ,att05 chf_att05
18:01:13  10  ,att06 chf_att06
18:01:13  11  ,att07 chf_att07
18:01:13  12  ,att08 chf_att08
18:01:13  13  ,att09 chf_att09
18:01:13  14  ,att10 chf_att10
18:01:13  15  ,att11 chf_att11
18:01:13  16  ,att12 chf_att12
18:01:13  17  ,att13 chf_att13
18:01:13  18  ,att14 chf_att14
18:01:13  19  ,att15 chf_att15
18:01:13  20  ,att16 chf_att16
18:01:13  21  ,att17 chf_att17
18:01:13  22  ,att18 chf_att18
18:01:13  23  ,att19 chf_att19
18:01:13  24  ,att20 chf_att20
18:01:13  25  ,att21 chf_att21
18:01:13  26  ,att22 chf_att22
18:01:13  27  ,att23 chf_att23
18:01:13  28  ,att24 chf_att24
18:01:13  29  ,att25 chf_att25
18:01:13  30  ,att26 chf_att26
18:01:13  31  ,att27 chf_att27
18:01:13  32  ,att28 chf_att28
18:01:13  33  ,att29 chf_att29
18:01:13  34  ,att30 chf_att30
18:01:13  35  ,att31 chf_att31
18:01:13  36  ,att32 chf_att32
18:01:13  37  ,att33 chf_att33
18:01:13  38  ,att34 chf_att34
18:01:13  39  ,att35 chf_att35
18:01:13  40  ,att36 chf_att36
18:01:13  41  ,att37 chf_att37
18:01:13  42  FROM svm6162
18:01:13  43  /

Table created.

Elapsed: 00:00:00.22
18:01:13 SQL> 
18:01:13 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
18:01:14 SQL> 
18:01:14 SQL> -- rpt
18:01:14 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19811

Elapsed: 00:00:00.89
18:01:15 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19811

Elapsed: 00:00:00.00
18:01:15 SQL> 
18:01:15 SQL> --
18:01:15 SQL> -- ech610.sql
18:01:15 SQL> --
18:01:15 SQL> 
18:01:15 SQL> -- Creates views and tables for backtesting a forex SVM strategy
18:01:15 SQL> 
18:01:15 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.48
18:01:15 SQL> 
18:01:15 SQL> -- I created di5min here:
18:01:15 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
18:01:15 SQL> 
18:01:15 SQL> CREATE OR REPLACE VIEW svm6102 AS
18:01:15   2  SELECT
18:01:15   3  pair
18:01:15   4  ,ydate
18:01:15   5  ,prdate
18:01:15   6  ,rownum rnum -- acts as t in my time-series
18:01:15   7  ,clse
18:01:15   8  -- Derive a bunch of attributes from clse, the latest price:
18:01:15   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
18:01:15  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
18:01:15  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
18:01:15  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
18:01:15  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
18:01:15  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
18:01:15  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
18:01:15  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
18:01:15  17  --
18:01:15  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
18:01:15  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
18:01:15  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
18:01:15  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
18:01:15  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
18:01:15  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
18:01:15  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
18:01:15  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
18:01:15  26  --
18:01:15  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
18:01:15  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
18:01:15  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
18:01:15  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
18:01:15  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
18:01:15  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
18:01:15  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
18:01:15  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
18:01:15  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
18:01:15  36  FROM di5min WHERE pair LIKE'%ech%'
18:01:15  37  AND ydate > sysdate - 95
18:01:15  38  ORDER BY ydate
18:01:15  39  /

View created.

Elapsed: 00:00:00.05
18:01:15 SQL> 
18:01:15 SQL> -- rpt
18:01:15 SQL> 
18:01:15 SQL> SELECT
18:01:15   2  pair
18:01:15   3  ,COUNT(pair)
18:01:15   4  ,MIN(clse),MAX(clse)
18:01:15   5  ,MIN(avg6),MAX(avg6)
18:01:15   6  ,MIN(ydate),MAX(ydate)
18:01:15   7  FROM svm6102
18:01:15   8  GROUP BY pair
18:01:15   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19809 1.24182424 1.38284305 1.24320711 1.37986485 2010-10-04 18:05:01 2011-01-07 17:55:00

Elapsed: 00:00:00.85
18:01:16 SQL> 
18:01:16 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
18:01:16 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.28
18:01:16 SQL> CREATE TABLE svm6122 COMPRESS AS
18:01:16   2  SELECT
18:01:16   3  pair
18:01:16   4  ,ydate
18:01:16   5  ,prdate
18:01:16   6  ,clse
18:01:16   7  -- g6 is important. I want to predict g6:
18:01:16   8  ,ld6 - clse g6
18:01:16   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
18:01:16  10  -- I want more attributes from the ones I derived above:
18:01:16  11  -- clse relation to moving-min
18:01:16  12  ,clse-min4  cm4
18:01:16  13  ,clse-min6  cm6
18:01:16  14  ,clse-min8  cm8
18:01:16  15  ,clse-min10 cm10
18:01:16  16  ,clse-min12 cm12
18:01:16  17  ,clse-min14 cm14
18:01:16  18  ,clse-min16 cm16
18:01:16  19  ,clse-min18 cm18
18:01:16  20  -- clse relation to moving-avg
18:01:16  21  ,clse-avg4  ca4
18:01:16  22  ,clse-avg6  ca6
18:01:16  23  ,clse-avg8  ca8
18:01:16  24  ,clse-avg10 ca10
18:01:16  25  ,clse-avg12 ca12
18:01:16  26  ,clse-avg14 ca14
18:01:16  27  ,clse-avg16 ca16
18:01:16  28  ,clse-avg18 ca18
18:01:16  29  -- clse relation to moving-max
18:01:16  30  ,clse-max4  cx4
18:01:16  31  ,clse-max6  cx6
18:01:16  32  ,clse-max8  cx8
18:01:16  33  ,clse-max10 cx10
18:01:16  34  ,clse-max12 cx12
18:01:16  35  ,clse-max14 cx14
18:01:16  36  ,clse-max16 cx16
18:01:16  37  ,clse-max18 cx18
18:01:16  38  -- Derive more attributes.
18:01:16  39  -- I want to use CORR() here to help SVM see the shape of the series.
18:01:16  40  -- But COVAR_POP is more stable:
18:01:16  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
18:01:16  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
18:01:16  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
18:01:16  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
18:01:16  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
18:01:16  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
18:01:16  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
18:01:16  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
18:01:16  49  -- Derive date related attributes:
18:01:16  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
18:01:16  51  ,0+TO_CHAR(ydate,'D')d
18:01:16  52  ,0+TO_CHAR(ydate,'W')w
18:01:16  53  -- mpm stands for minutes-past-midnight:
18:01:16  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
18:01:16  55  -- mph stands for minutes-past-hour:
18:01:16  56  ,0+TO_CHAR(ydate,'MI')mph
18:01:16  57  FROM svm6102
18:01:16  58  ORDER BY ydate
18:01:16  59  /

Table created.

Elapsed: 00:00:02.11
18:01:19 SQL> 
18:01:19 SQL> -- rpt
18:01:19 SQL> 
18:01:19 SQL> SELECT
18:01:19   2  pair
18:01:19   3  ,COUNT(pair)
18:01:19   4  ,MIN(clse),MAX(clse)
18:01:19   5  ,MIN(ydate),MAX(ydate)
18:01:19   6  FROM svm6122
18:01:19   7  GROUP BY pair
18:01:19   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19809 1.24182424 1.38284305 2010-10-04 18:05:01 2011-01-07 17:55:00

Elapsed: 00:00:00.08
18:01:19 SQL> 
18:01:19 SQL> -- Prepare for derivation of NTILE based params:
18:01:19 SQL> 
18:01:19 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
18:01:19 SQL> CREATE TABLE svm6142 COMPRESS AS
18:01:19   2  SELECT
18:01:19   3  pair
18:01:19   4  ,ydate
18:01:19   5  ,prdate
18:01:19   6  ,clse
18:01:19   7  ,g6
18:01:19   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
18:01:19   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
18:01:19  10  ,CASE WHEN trend IS NULL THEN 1
18:01:19  11  	    WHEN trend =0      THEN 1
18:01:19  12  	    ELSE trend END trend
18:01:19  13  ,cm4
18:01:19  14  ,cm6
18:01:19  15  ,cm8
18:01:19  16  ,cm10
18:01:19  17  ,cm12
18:01:19  18  ,cm14
18:01:19  19  ,cm16
18:01:19  20  ,cm18
18:01:19  21  --
18:01:19  22  ,ca4
18:01:19  23  ,ca6
18:01:19  24  ,ca8
18:01:19  25  ,ca10
18:01:19  26  ,ca12
18:01:19  27  ,ca14
18:01:19  28  ,ca16
18:01:19  29  ,ca18
18:01:19  30  --
18:01:19  31  ,cx4
18:01:19  32  ,cx6
18:01:19  33  ,cx8
18:01:19  34  ,cx10
18:01:19  35  ,cx12
18:01:19  36  ,cx14
18:01:19  37  ,cx16
18:01:19  38  ,cx18
18:01:19  39  --
18:01:19  40  ,crr4
18:01:19  41  ,crr6
18:01:19  42  ,crr8
18:01:19  43  ,crr10
18:01:19  44  ,crr12
18:01:19  45  ,crr14
18:01:19  46  ,crr16
18:01:19  47  ,crr18
18:01:19  48  --
18:01:19  49  ,hh
18:01:19  50  ,d
18:01:19  51  ,w
18:01:19  52  ,mpm
18:01:19  53  ,mph
18:01:19  54  FROM svm6122
18:01:19  55  ORDER BY ydate
18:01:19  56  /

Table created.

Elapsed: 00:00:00.40
18:01:19 SQL> 
18:01:19 SQL> -- rpt
18:01:19 SQL> 
18:01:19 SQL> SELECT
18:01:19   2  pair
18:01:19   3  ,trend
18:01:19   4  ,gatt
18:01:19   5  ,COUNT(pair)
18:01:19   6  ,AVG(g6)
18:01:19   7  FROM svm6142
18:01:19   8  GROUP BY pair,trend,gatt
18:01:19   9  ORDER BY pair,trend,gatt
18:01:19  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6837  -.0022829
ech_usd 	-1 up	      3584 .003572474
ech_usd 	-1		43
ech_usd 	 1 nup	      6410 -.00231128
ech_usd 	 1 up	      2906 .004122016
ech_usd 	 1		29

6 rows selected.

Elapsed: 00:00:00.04
18:01:19 SQL> 
18:01:19 SQL> 
18:01:19 SQL> -- Derive NTILE based params:
18:01:19 SQL> 
18:01:19 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.21
18:01:19 SQL> CREATE TABLE svm6162 COMPRESS AS
18:01:19   2  SELECT
18:01:19   3  pair
18:01:19   4  ,ydate
18:01:19   5  ,prdate
18:01:19   6  ,clse
18:01:19   7  ,g6
18:01:19   8  ,gatt
18:01:19   9  ,gattn
18:01:19  10  ,trend
18:01:19  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
18:01:19  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
18:01:19  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
18:01:19  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
18:01:19  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
18:01:19  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
18:01:19  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
18:01:19  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
18:01:19  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
18:01:19  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
18:01:19  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
18:01:19  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
18:01:19  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
18:01:19  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
18:01:19  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
18:01:19  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
18:01:19  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
18:01:19  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
18:01:19  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
18:01:19  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
18:01:19  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
18:01:19  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
18:01:19  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
18:01:19  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
18:01:19  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
18:01:19  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
18:01:19  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
18:01:19  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
18:01:19  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
18:01:19  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
18:01:19  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
18:01:19  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
18:01:19  43  ,hh  att32
18:01:19  44  ,d   att33
18:01:19  45  ,w   att34
18:01:19  46  ,mpm att35
18:01:19  47  ,mph att36
18:01:19  48  ,trend att37
18:01:19  49  FROM svm6142
18:01:19  50  ORDER BY ydate
18:01:19  51  /

Table created.

Elapsed: 00:00:04.94
18:01:24 SQL> 
18:01:24 SQL> -- rpt
18:01:24 SQL> 
18:01:24 SQL> SELECT
18:01:24   2  pair
18:01:24   3  ,trend
18:01:24   4  ,gatt
18:01:24   5  ,COUNT(pair)
18:01:24   6  ,AVG(g6)
18:01:24   7  FROM svm6162
18:01:24   8  GROUP BY pair,trend,gatt
18:01:24   9  ORDER BY pair,trend,gatt
18:01:24  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6837  -.0022829
ech_usd 	-1 up	      3584 .003572474
ech_usd 	-1		43
ech_usd 	 1 nup	      6410 -.00231128
ech_usd 	 1 up	      2906 .004122016
ech_usd 	 1		29

6 rows selected.

Elapsed: 00:00:00.03
18:01:24 SQL> 
18:01:24 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
18:01:25 SQL> CREATE TABLE modsrc COMPRESS AS
18:01:25   2  SELECT
18:01:25   3  pair
18:01:25   4  ,ydate
18:01:25   5  ,prdate
18:01:25   6  ,trend
18:01:25   7  ,g6
18:01:25   8  ,gatt
18:01:25   9  ,gattn
18:01:25  10  FROM svm6162
18:01:25  11  /

Table created.

Elapsed: 00:00:00.08
18:01:25 SQL> 
18:01:25 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
18:01:25 SQL> 
18:01:25 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
18:01:25 SQL> CREATE TABLE ech_ms610 COMPRESS AS
18:01:25   2  SELECT
18:01:25   3  ydate
18:01:25   4  ,trend ech_trend
18:01:25   5  ,g6    ech_g6
18:01:25   6  ,gatt  ech_gatt
18:01:25   7  ,gattn ech_gattn
18:01:25   8  FROM modsrc
18:01:25   9  /

Table created.

Elapsed: 00:00:00.08
18:01:25 SQL> 
18:01:25 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
18:01:25 SQL> 
18:01:25 SQL> -- I need a copy of the attributes:
18:01:25 SQL> 
18:01:25 SQL> 
18:01:25 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.06
18:01:25 SQL> CREATE TABLE ech_att COMPRESS AS
18:01:25   2  SELECT
18:01:25   3  ydate
18:01:25   4  ,att00 ech_att00
18:01:25   5  ,att01 ech_att01
18:01:25   6  ,att02 ech_att02
18:01:25   7  ,att03 ech_att03
18:01:25   8  ,att04 ech_att04
18:01:25   9  ,att05 ech_att05
18:01:25  10  ,att06 ech_att06
18:01:25  11  ,att07 ech_att07
18:01:25  12  ,att08 ech_att08
18:01:25  13  ,att09 ech_att09
18:01:25  14  ,att10 ech_att10
18:01:25  15  ,att11 ech_att11
18:01:25  16  ,att12 ech_att12
18:01:25  17  ,att13 ech_att13
18:01:25  18  ,att14 ech_att14
18:01:25  19  ,att15 ech_att15
18:01:25  20  ,att16 ech_att16
18:01:25  21  ,att17 ech_att17
18:01:25  22  ,att18 ech_att18
18:01:25  23  ,att19 ech_att19
18:01:25  24  ,att20 ech_att20
18:01:25  25  ,att21 ech_att21
18:01:25  26  ,att22 ech_att22
18:01:25  27  ,att23 ech_att23
18:01:25  28  ,att24 ech_att24
18:01:25  29  ,att25 ech_att25
18:01:25  30  ,att26 ech_att26
18:01:25  31  ,att27 ech_att27
18:01:25  32  ,att28 ech_att28
18:01:25  33  ,att29 ech_att29
18:01:25  34  ,att30 ech_att30
18:01:25  35  ,att31 ech_att31
18:01:25  36  ,att32 ech_att32
18:01:25  37  ,att33 ech_att33
18:01:25  38  ,att34 ech_att34
18:01:25  39  ,att35 ech_att35
18:01:25  40  ,att36 ech_att36
18:01:25  41  ,att37 ech_att37
18:01:25  42  FROM svm6162
18:01:25  43  /

Table created.

Elapsed: 00:00:00.17
18:01:25 SQL> 
18:01:25 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.49
18:01:26 SQL> 
18:01:26 SQL> -- rpt
18:01:26 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.84
18:01:27 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.00
18:01:27 SQL> 
18:01:27 SQL> --
18:01:27 SQL> -- egb610.sql
18:01:27 SQL> --
18:01:27 SQL> 
18:01:27 SQL> -- Creates views and tables for backtesting a forex SVM strategy
18:01:27 SQL> 
18:01:27 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.37
18:01:27 SQL> 
18:01:27 SQL> -- I created di5min here:
18:01:27 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
18:01:27 SQL> 
18:01:27 SQL> CREATE OR REPLACE VIEW svm6102 AS
18:01:27   2  SELECT
18:01:27   3  pair
18:01:27   4  ,ydate
18:01:27   5  ,prdate
18:01:27   6  ,rownum rnum -- acts as t in my time-series
18:01:27   7  ,clse
18:01:27   8  -- Derive a bunch of attributes from clse, the latest price:
18:01:27   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
18:01:27  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
18:01:27  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
18:01:27  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
18:01:27  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
18:01:27  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
18:01:27  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
18:01:27  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
18:01:27  17  --
18:01:27  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
18:01:27  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
18:01:27  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
18:01:27  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
18:01:27  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
18:01:27  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
18:01:27  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
18:01:27  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
18:01:27  26  --
18:01:27  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
18:01:27  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
18:01:27  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
18:01:27  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
18:01:27  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
18:01:27  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
18:01:27  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
18:01:27  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
18:01:27  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
18:01:27  36  FROM di5min WHERE pair LIKE'%egb%'
18:01:27  37  AND ydate > sysdate - 95
18:01:27  38  ORDER BY ydate
18:01:27  39  /

View created.

Elapsed: 00:00:00.05
18:01:27 SQL> 
18:01:27 SQL> -- rpt
18:01:27 SQL> 
18:01:27 SQL> SELECT
18:01:27   2  pair
18:01:27   3  ,COUNT(pair)
18:01:27   4  ,MIN(clse),MAX(clse)
18:01:27   5  ,MIN(avg6),MAX(avg6)
18:01:27   6  ,MIN(ydate),MAX(ydate)
18:01:27   7  FROM svm6102
18:01:27   8  GROUP BY pair
18:01:27   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19808 .830439257 .893920122 .834199029 .892400287 2010-10-04 18:05:01 2011-01-07 17:55:00

Elapsed: 00:00:00.95
18:01:28 SQL> 
18:01:28 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
18:01:28 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.25
18:01:28 SQL> CREATE TABLE svm6122 COMPRESS AS
18:01:28   2  SELECT
18:01:28   3  pair
18:01:28   4  ,ydate
18:01:28   5  ,prdate
18:01:28   6  ,clse
18:01:28   7  -- g6 is important. I want to predict g6:
18:01:28   8  ,ld6 - clse g6
18:01:28   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
18:01:28  10  -- I want more attributes from the ones I derived above:
18:01:28  11  -- clse relation to moving-min
18:01:28  12  ,clse-min4  cm4
18:01:28  13  ,clse-min6  cm6
18:01:28  14  ,clse-min8  cm8
18:01:28  15  ,clse-min10 cm10
18:01:28  16  ,clse-min12 cm12
18:01:28  17  ,clse-min14 cm14
18:01:28  18  ,clse-min16 cm16
18:01:28  19  ,clse-min18 cm18
18:01:28  20  -- clse relation to moving-avg
18:01:28  21  ,clse-avg4  ca4
18:01:28  22  ,clse-avg6  ca6
18:01:28  23  ,clse-avg8  ca8
18:01:28  24  ,clse-avg10 ca10
18:01:28  25  ,clse-avg12 ca12
18:01:28  26  ,clse-avg14 ca14
18:01:28  27  ,clse-avg16 ca16
18:01:28  28  ,clse-avg18 ca18
18:01:28  29  -- clse relation to moving-max
18:01:28  30  ,clse-max4  cx4
18:01:28  31  ,clse-max6  cx6
18:01:28  32  ,clse-max8  cx8
18:01:28  33  ,clse-max10 cx10
18:01:28  34  ,clse-max12 cx12
18:01:28  35  ,clse-max14 cx14
18:01:28  36  ,clse-max16 cx16
18:01:28  37  ,clse-max18 cx18
18:01:28  38  -- Derive more attributes.
18:01:28  39  -- I want to use CORR() here to help SVM see the shape of the series.
18:01:28  40  -- But COVAR_POP is more stable:
18:01:28  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
18:01:28  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
18:01:28  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
18:01:28  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
18:01:28  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
18:01:28  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
18:01:28  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
18:01:28  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
18:01:28  49  -- Derive date related attributes:
18:01:28  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
18:01:28  51  ,0+TO_CHAR(ydate,'D')d
18:01:28  52  ,0+TO_CHAR(ydate,'W')w
18:01:28  53  -- mpm stands for minutes-past-midnight:
18:01:28  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
18:01:28  55  -- mph stands for minutes-past-hour:
18:01:28  56  ,0+TO_CHAR(ydate,'MI')mph
18:01:28  57  FROM svm6102
18:01:28  58  ORDER BY ydate
18:01:28  59  /

Table created.

Elapsed: 00:00:02.54
18:01:31 SQL> 
18:01:31 SQL> -- rpt
18:01:31 SQL> 
18:01:31 SQL> SELECT
18:01:31   2  pair
18:01:31   3  ,COUNT(pair)
18:01:31   4  ,MIN(clse),MAX(clse)
18:01:31   5  ,MIN(ydate),MAX(ydate)
18:01:31   6  FROM svm6122
18:01:31   7  GROUP BY pair
18:01:31   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19808 .830439257 .893920122 2010-10-04 18:05:01 2011-01-07 17:55:00

Elapsed: 00:00:00.05
18:01:31 SQL> 
18:01:31 SQL> -- Prepare for derivation of NTILE based params:
18:01:31 SQL> 
18:01:31 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.24
18:01:31 SQL> CREATE TABLE svm6142 COMPRESS AS
18:01:31   2  SELECT
18:01:31   3  pair
18:01:31   4  ,ydate
18:01:31   5  ,prdate
18:01:31   6  ,clse
18:01:31   7  ,g6
18:01:31   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
18:01:31   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
18:01:31  10  ,CASE WHEN trend IS NULL THEN 1
18:01:31  11  	    WHEN trend =0      THEN 1
18:01:31  12  	    ELSE trend END trend
18:01:31  13  ,cm4
18:01:31  14  ,cm6
18:01:31  15  ,cm8
18:01:31  16  ,cm10
18:01:31  17  ,cm12
18:01:31  18  ,cm14
18:01:31  19  ,cm16
18:01:31  20  ,cm18
18:01:31  21  --
18:01:31  22  ,ca4
18:01:31  23  ,ca6
18:01:31  24  ,ca8
18:01:31  25  ,ca10
18:01:31  26  ,ca12
18:01:31  27  ,ca14
18:01:31  28  ,ca16
18:01:31  29  ,ca18
18:01:31  30  --
18:01:31  31  ,cx4
18:01:31  32  ,cx6
18:01:31  33  ,cx8
18:01:31  34  ,cx10
18:01:31  35  ,cx12
18:01:31  36  ,cx14
18:01:31  37  ,cx16
18:01:31  38  ,cx18
18:01:31  39  --
18:01:31  40  ,crr4
18:01:31  41  ,crr6
18:01:31  42  ,crr8
18:01:31  43  ,crr10
18:01:31  44  ,crr12
18:01:31  45  ,crr14
18:01:31  46  ,crr16
18:01:31  47  ,crr18
18:01:31  48  --
18:01:31  49  ,hh
18:01:31  50  ,d
18:01:31  51  ,w
18:01:31  52  ,mpm
18:01:31  53  ,mph
18:01:31  54  FROM svm6122
18:01:31  55  ORDER BY ydate
18:01:31  56  /

Table created.

Elapsed: 00:00:00.43
18:01:32 SQL> 
18:01:32 SQL> -- rpt
18:01:32 SQL> 
18:01:32 SQL> SELECT
18:01:32   2  pair
18:01:32   3  ,trend
18:01:32   4  ,gatt
18:01:32   5  ,COUNT(pair)
18:01:32   6  ,AVG(g6)
18:01:32   7  FROM svm6142
18:01:32   8  GROUP BY pair,trend,gatt
18:01:32   9  ORDER BY pair,trend,gatt
18:01:32  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7911 -.00107711
egb_usd 	-1 up	      2634 .002928952
egb_usd 	-1		72
egb_usd 	 1 nup	      6572 -.00136223
egb_usd 	 1 up	      2619 .002926819

Elapsed: 00:00:00.04
18:01:32 SQL> 
18:01:32 SQL> 
18:01:32 SQL> -- Derive NTILE based params:
18:01:32 SQL> 
18:01:32 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.45
18:01:32 SQL> CREATE TABLE svm6162 COMPRESS AS
18:01:32   2  SELECT
18:01:32   3  pair
18:01:32   4  ,ydate
18:01:32   5  ,prdate
18:01:32   6  ,clse
18:01:32   7  ,g6
18:01:32   8  ,gatt
18:01:32   9  ,gattn
18:01:32  10  ,trend
18:01:32  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
18:01:32  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
18:01:32  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
18:01:32  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
18:01:32  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
18:01:32  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
18:01:32  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
18:01:32  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
18:01:32  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
18:01:32  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
18:01:32  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
18:01:32  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
18:01:32  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
18:01:32  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
18:01:32  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
18:01:32  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
18:01:32  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
18:01:32  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
18:01:32  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
18:01:32  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
18:01:32  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
18:01:32  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
18:01:32  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
18:01:32  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
18:01:32  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
18:01:32  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
18:01:32  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
18:01:32  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
18:01:32  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
18:01:32  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
18:01:32  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
18:01:32  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
18:01:32  43  ,hh  att32
18:01:32  44  ,d   att33
18:01:32  45  ,w   att34
18:01:32  46  ,mpm att35
18:01:32  47  ,mph att36
18:01:32  48  ,trend att37
18:01:32  49  FROM svm6142
18:01:32  50  ORDER BY ydate
18:01:32  51  /

Table created.

Elapsed: 00:00:05.73
18:01:38 SQL> 
18:01:38 SQL> -- rpt
18:01:38 SQL> 
18:01:38 SQL> SELECT
18:01:38   2  pair
18:01:38   3  ,trend
18:01:38   4  ,gatt
18:01:38   5  ,COUNT(pair)
18:01:38   6  ,AVG(g6)
18:01:38   7  FROM svm6162
18:01:38   8  GROUP BY pair,trend,gatt
18:01:38   9  ORDER BY pair,trend,gatt
18:01:38  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7911 -.00107711
egb_usd 	-1 up	      2634 .002928952
egb_usd 	-1		72
egb_usd 	 1 nup	      6572 -.00136223
egb_usd 	 1 up	      2619 .002926819

Elapsed: 00:00:00.04
18:01:38 SQL> 
18:01:38 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.24
18:01:38 SQL> CREATE TABLE modsrc COMPRESS AS
18:01:38   2  SELECT
18:01:38   3  pair
18:01:38   4  ,ydate
18:01:38   5  ,prdate
18:01:38   6  ,trend
18:01:38   7  ,g6
18:01:38   8  ,gatt
18:01:38   9  ,gattn
18:01:38  10  FROM svm6162
18:01:38  11  /

Table created.

Elapsed: 00:00:00.09
18:01:38 SQL> 
18:01:38 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
18:01:38 SQL> 
18:01:38 SQL> DROP   TABLE egb_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
18:01:39 SQL> CREATE TABLE egb_ms610 COMPRESS AS
18:01:39   2  SELECT
18:01:39   3  ydate
18:01:39   4  ,trend egb_trend
18:01:39   5  ,g6    egb_g6
18:01:39   6  ,gatt  egb_gatt
18:01:39   7  ,gattn egb_gattn
18:01:39   8  FROM modsrc
18:01:39   9  /

Table created.

Elapsed: 00:00:00.07
18:01:39 SQL> 
18:01:39 SQL> ANALYZE TABLE egb_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
18:01:39 SQL> 
18:01:39 SQL> -- I need a copy of the attributes:
18:01:39 SQL> 
18:01:39 SQL> 
18:01:39 SQL> DROP   TABLE egb_att;

Table dropped.

Elapsed: 00:00:00.20
18:01:39 SQL> CREATE TABLE egb_att COMPRESS AS
18:01:39   2  SELECT
18:01:39   3  ydate
18:01:39   4  ,att00 egb_att00
18:01:39   5  ,att01 egb_att01
18:01:39   6  ,att02 egb_att02
18:01:39   7  ,att03 egb_att03
18:01:39   8  ,att04 egb_att04
18:01:39   9  ,att05 egb_att05
18:01:39  10  ,att06 egb_att06
18:01:39  11  ,att07 egb_att07
18:01:39  12  ,att08 egb_att08
18:01:39  13  ,att09 egb_att09
18:01:39  14  ,att10 egb_att10
18:01:39  15  ,att11 egb_att11
18:01:39  16  ,att12 egb_att12
18:01:39  17  ,att13 egb_att13
18:01:39  18  ,att14 egb_att14
18:01:39  19  ,att15 egb_att15
18:01:39  20  ,att16 egb_att16
18:01:39  21  ,att17 egb_att17
18:01:39  22  ,att18 egb_att18
18:01:39  23  ,att19 egb_att19
18:01:39  24  ,att20 egb_att20
18:01:39  25  ,att21 egb_att21
18:01:39  26  ,att22 egb_att22
18:01:39  27  ,att23 egb_att23
18:01:39  28  ,att24 egb_att24
18:01:39  29  ,att25 egb_att25
18:01:39  30  ,att26 egb_att26
18:01:39  31  ,att27 egb_att27
18:01:39  32  ,att28 egb_att28
18:01:39  33  ,att29 egb_att29
18:01:39  34  ,att30 egb_att30
18:01:39  35  ,att31 egb_att31
18:01:39  36  ,att32 egb_att32
18:01:39  37  ,att33 egb_att33
18:01:39  38  ,att34 egb_att34
18:01:39  39  ,att35 egb_att35
18:01:39  40  ,att36 egb_att36
18:01:39  41  ,att37 egb_att37
18:01:39  42  FROM svm6162
18:01:39  43  /

Table created.

Elapsed: 00:00:00.18
18:01:39 SQL> 
18:01:39 SQL> ANALYZE TABLE egb_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
18:01:40 SQL> 
18:01:40 SQL> -- rpt
18:01:40 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.95
18:01:41 SQL> SELECT COUNT(*)FROM egb_att;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.00
18:01:41 SQL> 
18:01:41 SQL> --
18:01:41 SQL> -- ejp610.sql
18:01:41 SQL> --
18:01:41 SQL> 
18:01:41 SQL> -- Creates views and tables for backtesting a forex SVM strategy
18:01:41 SQL> 
18:01:41 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:01.21
18:01:42 SQL> 
18:01:42 SQL> -- I created di5min here:
18:01:42 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
18:01:42 SQL> 
18:01:42 SQL> CREATE OR REPLACE VIEW svm6102 AS
18:01:42   2  SELECT
18:01:42   3  pair
18:01:42   4  ,ydate
18:01:42   5  ,prdate
18:01:42   6  ,rownum rnum -- acts as t in my time-series
18:01:42   7  ,clse
18:01:42   8  -- Derive a bunch of attributes from clse, the latest price:
18:01:42   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
18:01:42  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
18:01:42  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
18:01:42  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
18:01:42  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
18:01:42  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
18:01:42  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
18:01:42  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
18:01:42  17  --
18:01:42  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
18:01:42  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
18:01:42  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
18:01:42  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
18:01:42  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
18:01:42  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
18:01:42  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
18:01:42  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
18:01:42  26  --
18:01:42  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
18:01:42  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
18:01:42  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
18:01:42  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
18:01:42  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
18:01:42  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
18:01:42  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
18:01:42  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
18:01:42  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
18:01:42  36  FROM di5min WHERE pair LIKE'%ejp%'
18:01:42  37  AND ydate > sysdate - 95
18:01:42  38  ORDER BY ydate
18:01:42  39  /

View created.

Elapsed: 00:00:00.05
18:01:42 SQL> 
18:01:42 SQL> -- rpt
18:01:42 SQL> 
18:01:42 SQL> SELECT
18:01:42   2  pair
18:01:42   3  ,COUNT(pair)
18:01:42   4  ,MIN(clse),MAX(clse)
18:01:42   5  ,MIN(avg6),MAX(avg6)
18:01:42   6  ,MIN(ydate),MAX(ydate)
18:01:42   7  FROM svm6102
18:01:42   8  GROUP BY pair
18:01:42   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ejp_usd       19806 107.015572	115.63485 107.776148 115.509678 2010-10-04 18:05:01 2011-01-07 17:55:00

Elapsed: 00:00:00.88
18:01:43 SQL> 
18:01:43 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
18:01:43 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.39
18:01:43 SQL> CREATE TABLE svm6122 COMPRESS AS
18:01:43   2  SELECT
18:01:43   3  pair
18:01:43   4  ,ydate
18:01:43   5  ,prdate
18:01:43   6  ,clse
18:01:43   7  -- g6 is important. I want to predict g6:
18:01:43   8  ,ld6 - clse g6
18:01:43   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
18:01:43  10  -- I want more attributes from the ones I derived above:
18:01:43  11  -- clse relation to moving-min
18:01:43  12  ,clse-min4  cm4
18:01:43  13  ,clse-min6  cm6
18:01:43  14  ,clse-min8  cm8
18:01:43  15  ,clse-min10 cm10
18:01:43  16  ,clse-min12 cm12
18:01:43  17  ,clse-min14 cm14
18:01:43  18  ,clse-min16 cm16
18:01:43  19  ,clse-min18 cm18
18:01:43  20  -- clse relation to moving-avg
18:01:43  21  ,clse-avg4  ca4
18:01:43  22  ,clse-avg6  ca6
18:01:43  23  ,clse-avg8  ca8
18:01:43  24  ,clse-avg10 ca10
18:01:43  25  ,clse-avg12 ca12
18:01:43  26  ,clse-avg14 ca14
18:01:43  27  ,clse-avg16 ca16
18:01:43  28  ,clse-avg18 ca18
18:01:43  29  -- clse relation to moving-max
18:01:43  30  ,clse-max4  cx4
18:01:43  31  ,clse-max6  cx6
18:01:43  32  ,clse-max8  cx8
18:01:43  33  ,clse-max10 cx10
18:01:43  34  ,clse-max12 cx12
18:01:43  35  ,clse-max14 cx14
18:01:43  36  ,clse-max16 cx16
18:01:43  37  ,clse-max18 cx18
18:01:43  38  -- Derive more attributes.
18:01:43  39  -- I want to use CORR() here to help SVM see the shape of the series.
18:01:43  40  -- But COVAR_POP is more stable:
18:01:43  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
18:01:43  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
18:01:43  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
18:01:43  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
18:01:43  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
18:01:43  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
18:01:43  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
18:01:43  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
18:01:43  49  -- Derive date related attributes:
18:01:43  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
18:01:43  51  ,0+TO_CHAR(ydate,'D')d
18:01:43  52  ,0+TO_CHAR(ydate,'W')w
18:01:43  53  -- mpm stands for minutes-past-midnight:
18:01:43  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
18:01:43  55  -- mph stands for minutes-past-hour:
18:01:43  56  ,0+TO_CHAR(ydate,'MI')mph
18:01:43  57  FROM svm6102
18:01:43  58  ORDER BY ydate
18:01:43  59  /

Table created.

Elapsed: 00:00:02.16
18:01:45 SQL> 
18:01:45 SQL> -- rpt
18:01:45 SQL> 
18:01:45 SQL> SELECT
18:01:45   2  pair
18:01:45   3  ,COUNT(pair)
18:01:45   4  ,MIN(clse),MAX(clse)
18:01:45   5  ,MIN(ydate),MAX(ydate)
18:01:45   6  FROM svm6122
18:01:45   7  GROUP BY pair
18:01:45   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ejp_usd       19806 107.015572	115.63485 2010-10-04 18:05:01 2011-01-07 17:55:00

Elapsed: 00:00:00.04
18:01:45 SQL> 
18:01:45 SQL> -- Prepare for derivation of NTILE based params:
18:01:45 SQL> 
18:01:45 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.27
18:01:46 SQL> CREATE TABLE svm6142 COMPRESS AS
18:01:46   2  SELECT
18:01:46   3  pair
18:01:46   4  ,ydate
18:01:46   5  ,prdate
18:01:46   6  ,clse
18:01:46   7  ,g6
18:01:46   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
18:01:46   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
18:01:46  10  ,CASE WHEN trend IS NULL THEN 1
18:01:46  11  	    WHEN trend =0      THEN 1
18:01:46  12  	    ELSE trend END trend
18:01:46  13  ,cm4
18:01:46  14  ,cm6
18:01:46  15  ,cm8
18:01:46  16  ,cm10
18:01:46  17  ,cm12
18:01:46  18  ,cm14
18:01:46  19  ,cm16
18:01:46  20  ,cm18
18:01:46  21  --
18:01:46  22  ,ca4
18:01:46  23  ,ca6
18:01:46  24  ,ca8
18:01:46  25  ,ca10
18:01:46  26  ,ca12
18:01:46  27  ,ca14
18:01:46  28  ,ca16
18:01:46  29  ,ca18
18:01:46  30  --
18:01:46  31  ,cx4
18:01:46  32  ,cx6
18:01:46  33  ,cx8
18:01:46  34  ,cx10
18:01:46  35  ,cx12
18:01:46  36  ,cx14
18:01:46  37  ,cx16
18:01:46  38  ,cx18
18:01:46  39  --
18:01:46  40  ,crr4
18:01:46  41  ,crr6
18:01:46  42  ,crr8
18:01:46  43  ,crr10
18:01:46  44  ,crr12
18:01:46  45  ,crr14
18:01:46  46  ,crr16
18:01:46  47  ,crr18
18:01:46  48  --
18:01:46  49  ,hh
18:01:46  50  ,d
18:01:46  51  ,w
18:01:46  52  ,mpm
18:01:46  53  ,mph
18:01:46  54  FROM svm6122
18:01:46  55  ORDER BY ydate
18:01:46  56  /

Table created.

Elapsed: 00:00:00.39
18:01:46 SQL> 
18:01:46 SQL> -- rpt
18:01:46 SQL> 
18:01:46 SQL> SELECT
18:01:46   2  pair
18:01:46   3  ,trend
18:01:46   4  ,gatt
18:01:46   5  ,COUNT(pair)
18:01:46   6  ,AVG(g6)
18:01:46   7  FROM svm6142
18:01:46   8  GROUP BY pair,trend,gatt
18:01:46   9  ORDER BY pair,trend,gatt
18:01:46  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      5183 -.32337391
ejp_usd 	-1 up	      4925 .277967124
ejp_usd 	-1		72
ejp_usd 	 1 nup	      5001 -.29526569
ejp_usd 	 1 up	      4625 .288477571

Elapsed: 00:00:00.04
18:01:46 SQL> 
18:01:46 SQL> 
18:01:46 SQL> -- Derive NTILE based params:
18:01:46 SQL> 
18:01:46 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.22
18:01:46 SQL> CREATE TABLE svm6162 COMPRESS AS
18:01:46   2  SELECT
18:01:46   3  pair
18:01:46   4  ,ydate
18:01:46   5  ,prdate
18:01:46   6  ,clse
18:01:46   7  ,g6
18:01:46   8  ,gatt
18:01:46   9  ,gattn
18:01:46  10  ,trend
18:01:46  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
18:01:46  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
18:01:46  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
18:01:46  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
18:01:46  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
18:01:46  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
18:01:46  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
18:01:46  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
18:01:46  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
18:01:46  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
18:01:46  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
18:01:46  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
18:01:46  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
18:01:46  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
18:01:46  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
18:01:46  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
18:01:46  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
18:01:46  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
18:01:46  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
18:01:46  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
18:01:46  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
18:01:46  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
18:01:46  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
18:01:46  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
18:01:46  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
18:01:46  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
18:01:46  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
18:01:46  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
18:01:46  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
18:01:46  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
18:01:46  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
18:01:46  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
18:01:46  43  ,hh  att32
18:01:46  44  ,d   att33
18:01:46  45  ,w   att34
18:01:46  46  ,mpm att35
18:01:46  47  ,mph att36
18:01:46  48  ,trend att37
18:01:46  49  FROM svm6142
18:01:46  50  ORDER BY ydate
18:01:46  51  /

Table created.

Elapsed: 00:00:04.92
18:01:51 SQL> 
18:01:51 SQL> -- rpt
18:01:51 SQL> 
18:01:51 SQL> SELECT
18:01:51   2  pair
18:01:51   3  ,trend
18:01:51   4  ,gatt
18:01:51   5  ,COUNT(pair)
18:01:51   6  ,AVG(g6)
18:01:51   7  FROM svm6162
18:01:51   8  GROUP BY pair,trend,gatt
18:01:51   9  ORDER BY pair,trend,gatt
18:01:51  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      5183 -.32337391
ejp_usd 	-1 up	      4925 .277967124
ejp_usd 	-1		72
ejp_usd 	 1 nup	      5001 -.29526569
ejp_usd 	 1 up	      4625 .288477571

Elapsed: 00:00:00.03
18:01:51 SQL> 
18:01:51 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
18:01:51 SQL> CREATE TABLE modsrc COMPRESS AS
18:01:51   2  SELECT
18:01:51   3  pair
18:01:51   4  ,ydate
18:01:51   5  ,prdate
18:01:51   6  ,trend
18:01:51   7  ,g6
18:01:51   8  ,gatt
18:01:51   9  ,gattn
18:01:51  10  FROM svm6162
18:01:51  11  /

Table created.

Elapsed: 00:00:00.09
18:01:51 SQL> 
18:01:51 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.26
18:01:52 SQL> 
18:01:52 SQL> DROP   TABLE ejp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
18:01:52 SQL> CREATE TABLE ejp_ms610 COMPRESS AS
18:01:52   2  SELECT
18:01:52   3  ydate
18:01:52   4  ,trend ejp_trend
18:01:52   5  ,g6    ejp_g6
18:01:52   6  ,gatt  ejp_gatt
18:01:52   7  ,gattn ejp_gattn
18:01:52   8  FROM modsrc
18:01:52   9  /

Table created.

Elapsed: 00:00:00.08
18:01:52 SQL> 
18:01:52 SQL> ANALYZE TABLE ejp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
18:01:52 SQL> 
18:01:52 SQL> -- I need a copy of the attributes:
18:01:52 SQL> 
18:01:52 SQL> 
18:01:52 SQL> DROP   TABLE ejp_att;

Table dropped.

Elapsed: 00:00:00.07
18:01:52 SQL> CREATE TABLE ejp_att COMPRESS AS
18:01:52   2  SELECT
18:01:52   3  ydate
18:01:52   4  ,att00 ejp_att00
18:01:52   5  ,att01 ejp_att01
18:01:52   6  ,att02 ejp_att02
18:01:52   7  ,att03 ejp_att03
18:01:52   8  ,att04 ejp_att04
18:01:52   9  ,att05 ejp_att05
18:01:52  10  ,att06 ejp_att06
18:01:52  11  ,att07 ejp_att07
18:01:52  12  ,att08 ejp_att08
18:01:52  13  ,att09 ejp_att09
18:01:52  14  ,att10 ejp_att10
18:01:52  15  ,att11 ejp_att11
18:01:52  16  ,att12 ejp_att12
18:01:52  17  ,att13 ejp_att13
18:01:52  18  ,att14 ejp_att14
18:01:52  19  ,att15 ejp_att15
18:01:52  20  ,att16 ejp_att16
18:01:52  21  ,att17 ejp_att17
18:01:52  22  ,att18 ejp_att18
18:01:52  23  ,att19 ejp_att19
18:01:52  24  ,att20 ejp_att20
18:01:52  25  ,att21 ejp_att21
18:01:52  26  ,att22 ejp_att22
18:01:52  27  ,att23 ejp_att23
18:01:52  28  ,att24 ejp_att24
18:01:52  29  ,att25 ejp_att25
18:01:52  30  ,att26 ejp_att26
18:01:52  31  ,att27 ejp_att27
18:01:52  32  ,att28 ejp_att28
18:01:52  33  ,att29 ejp_att29
18:01:52  34  ,att30 ejp_att30
18:01:52  35  ,att31 ejp_att31
18:01:52  36  ,att32 ejp_att32
18:01:52  37  ,att33 ejp_att33
18:01:52  38  ,att34 ejp_att34
18:01:52  39  ,att35 ejp_att35
18:01:52  40  ,att36 ejp_att36
18:01:52  41  ,att37 ejp_att37
18:01:52  42  FROM svm6162
18:01:52  43  /

Table created.

Elapsed: 00:00:00.17
18:01:52 SQL> 
18:01:52 SQL> ANALYZE TABLE ejp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
18:01:53 SQL> 
18:01:53 SQL> -- rpt
18:01:53 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19806

Elapsed: 00:00:00.88
18:01:54 SQL> SELECT COUNT(*)FROM ejp_att;

  COUNT(*)
----------
     19806

Elapsed: 00:00:00.00
18:01:54 SQL> 
18:01:54 SQL> --
18:01:54 SQL> -- ajp610.sql
18:01:54 SQL> --
18:01:54 SQL> 
18:01:54 SQL> -- Creates views and tables for backtesting a forex SVM strategy
18:01:54 SQL> 
18:01:54 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.37
18:01:54 SQL> 
18:01:54 SQL> -- I created di5min here:
18:01:54 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
18:01:54 SQL> 
18:01:54 SQL> CREATE OR REPLACE VIEW svm6102 AS
18:01:54   2  SELECT
18:01:54   3  pair
18:01:54   4  ,ydate
18:01:54   5  ,prdate
18:01:54   6  ,rownum rnum -- acts as t in my time-series
18:01:54   7  ,clse
18:01:54   8  -- Derive a bunch of attributes from clse, the latest price:
18:01:54   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
18:01:54  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
18:01:54  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
18:01:54  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
18:01:54  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
18:01:54  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
18:01:54  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
18:01:54  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
18:01:54  17  --
18:01:54  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
18:01:54  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
18:01:54  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
18:01:54  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
18:01:54  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
18:01:54  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
18:01:54  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
18:01:54  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
18:01:54  26  --
18:01:54  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
18:01:54  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
18:01:54  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
18:01:54  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
18:01:54  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
18:01:54  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
18:01:54  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
18:01:54  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
18:01:54  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
18:01:54  36  FROM di5min WHERE pair LIKE'%ajp%'
18:01:54  37  AND ydate > sysdate - 95
18:01:54  38  ORDER BY ydate
18:01:54  39  /

View created.

Elapsed: 00:00:00.05
18:01:54 SQL> 
18:01:54 SQL> -- rpt
18:01:54 SQL> 
18:01:54 SQL> SELECT
18:01:54   2  pair
18:01:54   3  ,COUNT(pair)
18:01:54   4  ,MIN(clse),MAX(clse)
18:01:54   5  ,MIN(avg6),MAX(avg6)
18:01:54   6  ,MIN(ydate),MAX(ydate)
18:01:54   7  FROM svm6102
18:01:54   8  GROUP BY pair
18:01:54   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ajp_usd       19803  78.249976 83.6669853 78.5106193  83.546306 2010-10-04 18:05:01 2011-01-07 17:55:00

Elapsed: 00:00:00.80
18:01:55 SQL> 
18:01:55 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
18:01:55 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.31
18:01:55 SQL> CREATE TABLE svm6122 COMPRESS AS
18:01:55   2  SELECT
18:01:55   3  pair
18:01:55   4  ,ydate
18:01:55   5  ,prdate
18:01:55   6  ,clse
18:01:55   7  -- g6 is important. I want to predict g6:
18:01:55   8  ,ld6 - clse g6
18:01:55   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
18:01:55  10  -- I want more attributes from the ones I derived above:
18:01:55  11  -- clse relation to moving-min
18:01:55  12  ,clse-min4  cm4
18:01:55  13  ,clse-min6  cm6
18:01:55  14  ,clse-min8  cm8
18:01:55  15  ,clse-min10 cm10
18:01:55  16  ,clse-min12 cm12
18:01:55  17  ,clse-min14 cm14
18:01:55  18  ,clse-min16 cm16
18:01:55  19  ,clse-min18 cm18
18:01:55  20  -- clse relation to moving-avg
18:01:55  21  ,clse-avg4  ca4
18:01:55  22  ,clse-avg6  ca6
18:01:55  23  ,clse-avg8  ca8
18:01:55  24  ,clse-avg10 ca10
18:01:55  25  ,clse-avg12 ca12
18:01:55  26  ,clse-avg14 ca14
18:01:55  27  ,clse-avg16 ca16
18:01:55  28  ,clse-avg18 ca18
18:01:55  29  -- clse relation to moving-max
18:01:55  30  ,clse-max4  cx4
18:01:55  31  ,clse-max6  cx6
18:01:55  32  ,clse-max8  cx8
18:01:55  33  ,clse-max10 cx10
18:01:55  34  ,clse-max12 cx12
18:01:55  35  ,clse-max14 cx14
18:01:55  36  ,clse-max16 cx16
18:01:55  37  ,clse-max18 cx18
18:01:55  38  -- Derive more attributes.
18:01:55  39  -- I want to use CORR() here to help SVM see the shape of the series.
18:01:55  40  -- But COVAR_POP is more stable:
18:01:55  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
18:01:55  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
18:01:55  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
18:01:55  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
18:01:55  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
18:01:55  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
18:01:55  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
18:01:55  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
18:01:55  49  -- Derive date related attributes:
18:01:55  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
18:01:55  51  ,0+TO_CHAR(ydate,'D')d
18:01:55  52  ,0+TO_CHAR(ydate,'W')w
18:01:55  53  -- mpm stands for minutes-past-midnight:
18:01:55  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
18:01:55  55  -- mph stands for minutes-past-hour:
18:01:55  56  ,0+TO_CHAR(ydate,'MI')mph
18:01:55  57  FROM svm6102
18:01:55  58  ORDER BY ydate
18:01:55  59  /

Table created.

Elapsed: 00:00:02.11
18:01:57 SQL> 
18:01:57 SQL> -- rpt
18:01:57 SQL> 
18:01:57 SQL> SELECT
18:01:57   2  pair
18:01:57   3  ,COUNT(pair)
18:01:57   4  ,MIN(clse),MAX(clse)
18:01:57   5  ,MIN(ydate),MAX(ydate)
18:01:57   6  FROM svm6122
18:01:57   7  GROUP BY pair
18:01:57   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ajp_usd       19803  78.249976 83.6669853 2010-10-04 18:05:01 2011-01-07 17:55:00

Elapsed: 00:00:00.04
18:01:57 SQL> 
18:01:57 SQL> -- Prepare for derivation of NTILE based params:
18:01:57 SQL> 
18:01:57 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.25
18:01:57 SQL> CREATE TABLE svm6142 COMPRESS AS
18:01:57   2  SELECT
18:01:57   3  pair
18:01:57   4  ,ydate
18:01:57   5  ,prdate
18:01:57   6  ,clse
18:01:57   7  ,g6
18:01:57   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
18:01:57   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
18:01:57  10  ,CASE WHEN trend IS NULL THEN 1
18:01:57  11  	    WHEN trend =0      THEN 1
18:01:57  12  	    ELSE trend END trend
18:01:57  13  ,cm4
18:01:57  14  ,cm6
18:01:57  15  ,cm8
18:01:57  16  ,cm10
18:01:57  17  ,cm12
18:01:57  18  ,cm14
18:01:57  19  ,cm16
18:01:57  20  ,cm18
18:01:57  21  --
18:01:57  22  ,ca4
18:01:57  23  ,ca6
18:01:57  24  ,ca8
18:01:57  25  ,ca10
18:01:57  26  ,ca12
18:01:57  27  ,ca14
18:01:57  28  ,ca16
18:01:57  29  ,ca18
18:01:57  30  --
18:01:57  31  ,cx4
18:01:57  32  ,cx6
18:01:57  33  ,cx8
18:01:57  34  ,cx10
18:01:57  35  ,cx12
18:01:57  36  ,cx14
18:01:57  37  ,cx16
18:01:57  38  ,cx18
18:01:57  39  --
18:01:57  40  ,crr4
18:01:57  41  ,crr6
18:01:57  42  ,crr8
18:01:57  43  ,crr10
18:01:57  44  ,crr12
18:01:57  45  ,crr14
18:01:57  46  ,crr16
18:01:57  47  ,crr18
18:01:57  48  --
18:01:57  49  ,hh
18:01:57  50  ,d
18:01:57  51  ,w
18:01:57  52  ,mpm
18:01:57  53  ,mph
18:01:57  54  FROM svm6122
18:01:57  55  ORDER BY ydate
18:01:57  56  /

Table created.

Elapsed: 00:00:00.40
18:01:58 SQL> 
18:01:58 SQL> -- rpt
18:01:58 SQL> 
18:01:58 SQL> SELECT
18:01:58   2  pair
18:01:58   3  ,trend
18:01:58   4  ,gatt
18:01:58   5  ,COUNT(pair)
18:01:58   6  ,AVG(g6)
18:01:58   7  FROM svm6142
18:01:58   8  GROUP BY pair,trend,gatt
18:01:58   9  ORDER BY pair,trend,gatt
18:01:58  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4355 -.22440499
ajp_usd 	-1 up	      5209 .222956182
ajp_usd 	-1		30
ajp_usd 	 1 nup	      5297 -.19980812
ajp_usd 	 1 up	      4870 .211272199
ajp_usd 	 1		42

6 rows selected.

Elapsed: 00:00:00.04
18:01:58 SQL> 
18:01:58 SQL> 
18:01:58 SQL> -- Derive NTILE based params:
18:01:58 SQL> 
18:01:58 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.23
18:01:58 SQL> CREATE TABLE svm6162 COMPRESS AS
18:01:58   2  SELECT
18:01:58   3  pair
18:01:58   4  ,ydate
18:01:58   5  ,prdate
18:01:58   6  ,clse
18:01:58   7  ,g6
18:01:58   8  ,gatt
18:01:58   9  ,gattn
18:01:58  10  ,trend
18:01:58  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
18:01:58  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
18:01:58  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
18:01:58  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
18:01:58  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
18:01:58  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
18:01:58  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
18:01:58  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
18:01:58  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
18:01:58  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
18:01:58  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
18:01:58  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
18:01:58  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
18:01:58  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
18:01:58  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
18:01:58  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
18:01:58  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
18:01:58  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
18:01:58  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
18:01:58  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
18:01:58  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
18:01:58  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
18:01:58  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
18:01:58  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
18:01:58  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
18:01:58  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
18:01:58  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
18:01:58  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
18:01:58  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
18:01:58  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
18:01:58  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
18:01:58  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
18:01:58  43  ,hh  att32
18:01:58  44  ,d   att33
18:01:58  45  ,w   att34
18:01:58  46  ,mpm att35
18:01:58  47  ,mph att36
18:01:58  48  ,trend att37
18:01:58  49  FROM svm6142
18:01:58  50  ORDER BY ydate
18:01:58  51  /

Table created.

Elapsed: 00:00:04.98
18:02:03 SQL> 
18:02:03 SQL> -- rpt
18:02:03 SQL> 
18:02:03 SQL> SELECT
18:02:03   2  pair
18:02:03   3  ,trend
18:02:03   4  ,gatt
18:02:03   5  ,COUNT(pair)
18:02:03   6  ,AVG(g6)
18:02:03   7  FROM svm6162
18:02:03   8  GROUP BY pair,trend,gatt
18:02:03   9  ORDER BY pair,trend,gatt
18:02:03  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4355 -.22440499
ajp_usd 	-1 up	      5209 .222956182
ajp_usd 	-1		30
ajp_usd 	 1 nup	      5297 -.19980812
ajp_usd 	 1 up	      4870 .211272199
ajp_usd 	 1		42

6 rows selected.

Elapsed: 00:00:00.02
18:02:03 SQL> 
18:02:03 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
18:02:03 SQL> CREATE TABLE modsrc COMPRESS AS
18:02:03   2  SELECT
18:02:03   3  pair
18:02:03   4  ,ydate
18:02:03   5  ,prdate
18:02:03   6  ,trend
18:02:03   7  ,g6
18:02:03   8  ,gatt
18:02:03   9  ,gattn
18:02:03  10  FROM svm6162
18:02:03  11  /

Table created.

Elapsed: 00:00:00.09
18:02:03 SQL> 
18:02:03 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.24
18:02:04 SQL> 
18:02:04 SQL> DROP   TABLE ajp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
18:02:04 SQL> CREATE TABLE ajp_ms610 COMPRESS AS
18:02:04   2  SELECT
18:02:04   3  ydate
18:02:04   4  ,trend ajp_trend
18:02:04   5  ,g6    ajp_g6
18:02:04   6  ,gatt  ajp_gatt
18:02:04   7  ,gattn ajp_gattn
18:02:04   8  FROM modsrc
18:02:04   9  /

Table created.

Elapsed: 00:00:00.08
18:02:04 SQL> 
18:02:04 SQL> ANALYZE TABLE ajp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.25
18:02:04 SQL> 
18:02:04 SQL> -- I need a copy of the attributes:
18:02:04 SQL> 
18:02:04 SQL> 
18:02:04 SQL> DROP   TABLE ajp_att;

Table dropped.

Elapsed: 00:00:00.05
18:02:04 SQL> CREATE TABLE ajp_att COMPRESS AS
18:02:04   2  SELECT
18:02:04   3  ydate
18:02:04   4  ,att00 ajp_att00
18:02:04   5  ,att01 ajp_att01
18:02:04   6  ,att02 ajp_att02
18:02:04   7  ,att03 ajp_att03
18:02:04   8  ,att04 ajp_att04
18:02:04   9  ,att05 ajp_att05
18:02:04  10  ,att06 ajp_att06
18:02:04  11  ,att07 ajp_att07
18:02:04  12  ,att08 ajp_att08
18:02:04  13  ,att09 ajp_att09
18:02:04  14  ,att10 ajp_att10
18:02:04  15  ,att11 ajp_att11
18:02:04  16  ,att12 ajp_att12
18:02:04  17  ,att13 ajp_att13
18:02:04  18  ,att14 ajp_att14
18:02:04  19  ,att15 ajp_att15
18:02:04  20  ,att16 ajp_att16
18:02:04  21  ,att17 ajp_att17
18:02:04  22  ,att18 ajp_att18
18:02:04  23  ,att19 ajp_att19
18:02:04  24  ,att20 ajp_att20
18:02:04  25  ,att21 ajp_att21
18:02:04  26  ,att22 ajp_att22
18:02:04  27  ,att23 ajp_att23
18:02:04  28  ,att24 ajp_att24
18:02:04  29  ,att25 ajp_att25
18:02:04  30  ,att26 ajp_att26
18:02:04  31  ,att27 ajp_att27
18:02:04  32  ,att28 ajp_att28
18:02:04  33  ,att29 ajp_att29
18:02:04  34  ,att30 ajp_att30
18:02:04  35  ,att31 ajp_att31
18:02:04  36  ,att32 ajp_att32
18:02:04  37  ,att33 ajp_att33
18:02:04  38  ,att34 ajp_att34
18:02:04  39  ,att35 ajp_att35
18:02:04  40  ,att36 ajp_att36
18:02:04  41  ,att37 ajp_att37
18:02:04  42  FROM svm6162
18:02:04  43  /

Table created.

Elapsed: 00:00:00.19
18:02:04 SQL> 
18:02:04 SQL> ANALYZE TABLE ajp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
18:02:05 SQL> 
18:02:05 SQL> -- rpt
18:02:05 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19803

Elapsed: 00:00:00.78
18:02:06 SQL> SELECT COUNT(*)FROM ajp_att;

  COUNT(*)
----------
     19803

Elapsed: 00:00:00.00
18:02:06 SQL> 
18:02:06 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
