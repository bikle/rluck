
SQL*Plus: Release 11.2.0.1.0 Production on Wed Dec 29 02:43:19 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

02:43:19 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
02:43:19 SQL> 02:43:19 SQL> --
02:43:19 SQL> -- eur610.sql
02:43:19 SQL> --
02:43:19 SQL> 
02:43:19 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:43:19 SQL> 
02:43:19 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.02
02:43:19 SQL> 
02:43:19 SQL> -- I created di5min here:
02:43:19 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:43:19 SQL> 
02:43:19 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:43:19   2  SELECT
02:43:19   3  pair
02:43:19   4  ,ydate
02:43:19   5  ,prdate
02:43:19   6  ,rownum rnum -- acts as t in my time-series
02:43:19   7  ,clse
02:43:19   8  -- Derive a bunch of attributes from clse, the latest price:
02:43:19   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:43:19  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:43:19  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:43:19  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:43:19  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:43:19  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:43:19  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:43:19  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:43:19  17  --
02:43:19  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:43:19  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:43:19  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:43:19  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:43:19  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:43:19  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:43:19  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:43:19  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:43:19  26  --
02:43:19  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:43:19  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:43:19  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:43:19  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:43:19  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:43:19  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:43:19  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:43:19  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:43:19  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:43:19  36  FROM di5min WHERE pair LIKE'%eur%'
02:43:19  37  AND ydate > sysdate - 95
02:43:19  38  ORDER BY ydate
02:43:19  39  /

View created.

Elapsed: 00:00:00.07
02:43:19 SQL> 
02:43:19 SQL> -- rpt
02:43:19 SQL> 
02:43:19 SQL> SELECT
02:43:19   2  pair
02:43:19   3  ,COUNT(pair)
02:43:19   4  ,MIN(clse),MAX(clse)
02:43:19   5  ,MIN(avg6),MAX(avg6)
02:43:19   6  ,MIN(ydate),MAX(ydate)
02:43:19   7  FROM svm6102
02:43:19   8  GROUP BY pair
02:43:19   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19340    1.29735	   1.4273 1.29875103 1.42436233 2010-09-26 20:55:01 2010-12-29 02:40:00

Elapsed: 00:00:00.90
02:43:20 SQL> 
02:43:20 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:43:20 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.08
02:43:20 SQL> CREATE TABLE svm6122 COMPRESS AS
02:43:20   2  SELECT
02:43:20   3  pair
02:43:20   4  ,ydate
02:43:20   5  ,prdate
02:43:20   6  ,clse
02:43:20   7  -- g6 is important. I want to predict g6:
02:43:20   8  ,ld6 - clse g6
02:43:20   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:43:20  10  -- I want more attributes from the ones I derived above:
02:43:20  11  -- clse relation to moving-min
02:43:20  12  ,clse-min4  cm4
02:43:20  13  ,clse-min6  cm6
02:43:20  14  ,clse-min8  cm8
02:43:20  15  ,clse-min10 cm10
02:43:20  16  ,clse-min12 cm12
02:43:20  17  ,clse-min14 cm14
02:43:20  18  ,clse-min16 cm16
02:43:20  19  ,clse-min18 cm18
02:43:20  20  -- clse relation to moving-avg
02:43:20  21  ,clse-avg4  ca4
02:43:20  22  ,clse-avg6  ca6
02:43:20  23  ,clse-avg8  ca8
02:43:20  24  ,clse-avg10 ca10
02:43:20  25  ,clse-avg12 ca12
02:43:20  26  ,clse-avg14 ca14
02:43:20  27  ,clse-avg16 ca16
02:43:20  28  ,clse-avg18 ca18
02:43:20  29  -- clse relation to moving-max
02:43:20  30  ,clse-max4  cx4
02:43:20  31  ,clse-max6  cx6
02:43:20  32  ,clse-max8  cx8
02:43:20  33  ,clse-max10 cx10
02:43:20  34  ,clse-max12 cx12
02:43:20  35  ,clse-max14 cx14
02:43:20  36  ,clse-max16 cx16
02:43:20  37  ,clse-max18 cx18
02:43:20  38  -- Derive more attributes.
02:43:20  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:43:20  40  -- But COVAR_POP is more stable:
02:43:20  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:43:20  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:43:20  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:43:20  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:43:20  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:43:20  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:43:20  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:43:20  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:43:20  49  -- Derive date related attributes:
02:43:20  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:43:20  51  ,0+TO_CHAR(ydate,'D')d
02:43:20  52  ,0+TO_CHAR(ydate,'W')w
02:43:20  53  -- mpm stands for minutes-past-midnight:
02:43:20  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:43:20  55  -- mph stands for minutes-past-hour:
02:43:20  56  ,0+TO_CHAR(ydate,'MI')mph
02:43:20  57  FROM svm6102
02:43:20  58  ORDER BY ydate
02:43:20  59  /

Table created.

Elapsed: 00:00:02.32
02:43:22 SQL> 
02:43:22 SQL> -- rpt
02:43:22 SQL> 
02:43:22 SQL> SELECT
02:43:22   2  pair
02:43:22   3  ,COUNT(pair)
02:43:22   4  ,MIN(clse),MAX(clse)
02:43:22   5  ,MIN(ydate),MAX(ydate)
02:43:22   6  FROM svm6122
02:43:22   7  GROUP BY pair
02:43:22   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19340    1.29735	   1.4273 2010-09-26 20:55:01 2010-12-29 02:40:00

Elapsed: 00:00:00.22
02:43:22 SQL> 
02:43:22 SQL> -- Prepare for derivation of NTILE based params:
02:43:22 SQL> 
02:43:22 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.11
02:43:22 SQL> CREATE TABLE svm6142 COMPRESS AS
02:43:22   2  SELECT
02:43:22   3  pair
02:43:22   4  ,ydate
02:43:22   5  ,prdate
02:43:22   6  ,clse
02:43:22   7  ,g6
02:43:22   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:43:22   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:43:22  10  ,CASE WHEN trend IS NULL THEN 1
02:43:22  11  	    WHEN trend =0      THEN 1
02:43:22  12  	    ELSE trend END trend
02:43:22  13  ,cm4
02:43:22  14  ,cm6
02:43:22  15  ,cm8
02:43:22  16  ,cm10
02:43:22  17  ,cm12
02:43:22  18  ,cm14
02:43:22  19  ,cm16
02:43:22  20  ,cm18
02:43:22  21  --
02:43:22  22  ,ca4
02:43:22  23  ,ca6
02:43:22  24  ,ca8
02:43:22  25  ,ca10
02:43:22  26  ,ca12
02:43:22  27  ,ca14
02:43:22  28  ,ca16
02:43:22  29  ,ca18
02:43:22  30  --
02:43:22  31  ,cx4
02:43:22  32  ,cx6
02:43:22  33  ,cx8
02:43:22  34  ,cx10
02:43:22  35  ,cx12
02:43:22  36  ,cx14
02:43:22  37  ,cx16
02:43:22  38  ,cx18
02:43:22  39  --
02:43:22  40  ,crr4
02:43:22  41  ,crr6
02:43:22  42  ,crr8
02:43:22  43  ,crr10
02:43:22  44  ,crr12
02:43:22  45  ,crr14
02:43:22  46  ,crr16
02:43:22  47  ,crr18
02:43:22  48  --
02:43:22  49  ,hh
02:43:22  50  ,d
02:43:22  51  ,w
02:43:22  52  ,mpm
02:43:22  53  ,mph
02:43:22  54  FROM svm6122
02:43:22  55  ORDER BY ydate
02:43:22  56  /

Table created.

Elapsed: 00:00:00.50
02:43:23 SQL> 
02:43:23 SQL> -- rpt
02:43:23 SQL> 
02:43:23 SQL> SELECT
02:43:23   2  pair
02:43:23   3  ,trend
02:43:23   4  ,gatt
02:43:23   5  ,COUNT(pair)
02:43:23   6  ,AVG(g6)
02:43:23   7  FROM svm6142
02:43:23   8  GROUP BY pair,trend,gatt
02:43:23   9  ORDER BY pair,trend,gatt
02:43:23  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6118 -.00308928
eur_usd 	-1 up	      3634 .004482303
eur_usd 	-1		55
eur_usd 	 1 nup	      5871 -.00319026
eur_usd 	 1 up	      3645 .005140343
eur_usd 	 1		17

6 rows selected.

Elapsed: 00:00:00.10
02:43:23 SQL> 
02:43:23 SQL> 
02:43:23 SQL> -- Derive NTILE based params:
02:43:23 SQL> 
02:43:23 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.35
02:43:23 SQL> CREATE TABLE svm6162 COMPRESS AS
02:43:23   2  SELECT
02:43:23   3  pair
02:43:23   4  ,ydate
02:43:23   5  ,prdate
02:43:23   6  ,clse
02:43:23   7  ,g6
02:43:23   8  ,gatt
02:43:23   9  ,gattn
02:43:23  10  ,trend
02:43:23  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:43:23  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:43:23  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:43:23  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:43:23  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:43:23  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:43:23  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:43:23  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:43:23  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:43:23  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:43:23  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:43:23  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:43:23  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:43:23  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:43:23  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:43:23  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:43:23  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:43:23  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:43:23  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:43:23  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:43:23  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:43:23  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:43:23  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:43:23  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:43:23  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:43:23  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:43:23  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:43:23  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:43:23  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:43:23  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:43:23  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:43:23  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:43:23  43  ,hh  att32
02:43:23  44  ,d   att33
02:43:23  45  ,w   att34
02:43:23  46  ,mpm att35
02:43:23  47  ,mph att36
02:43:23  48  ,trend att37
02:43:23  49  FROM svm6142
02:43:23  50  ORDER BY ydate
02:43:23  51  /

Table created.

Elapsed: 00:00:04.81
02:43:28 SQL> 
02:43:28 SQL> -- rpt
02:43:28 SQL> 
02:43:28 SQL> SELECT
02:43:28   2  pair
02:43:28   3  ,trend
02:43:28   4  ,gatt
02:43:28   5  ,COUNT(pair)
02:43:28   6  ,AVG(g6)
02:43:28   7  FROM svm6162
02:43:28   8  GROUP BY pair,trend,gatt
02:43:28   9  ORDER BY pair,trend,gatt
02:43:28  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6118 -.00308928
eur_usd 	-1 up	      3634 .004482303
eur_usd 	-1		55
eur_usd 	 1 nup	      5871 -.00319026
eur_usd 	 1 up	      3645 .005140343
eur_usd 	 1		17

6 rows selected.

Elapsed: 00:00:00.02
02:43:28 SQL> 
02:43:28 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.27
02:43:28 SQL> CREATE TABLE modsrc COMPRESS AS
02:43:28   2  SELECT
02:43:28   3  pair
02:43:28   4  ,ydate
02:43:28   5  ,prdate
02:43:28   6  ,trend
02:43:28   7  ,g6
02:43:28   8  ,gatt
02:43:28   9  ,gattn
02:43:28  10  FROM svm6162
02:43:28  11  /

Table created.

Elapsed: 00:00:00.09
02:43:29 SQL> 
02:43:29 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
02:43:29 SQL> 
02:43:29 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
02:43:29 SQL> CREATE TABLE eur_ms610 COMPRESS AS
02:43:29   2  SELECT
02:43:29   3  ydate
02:43:29   4  ,trend eur_trend
02:43:29   5  ,g6    eur_g6
02:43:29   6  ,gatt  eur_gatt
02:43:29   7  ,gattn eur_gattn
02:43:29   8  FROM modsrc
02:43:29   9  /

Table created.

Elapsed: 00:00:00.09
02:43:29 SQL> 
02:43:29 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
02:43:29 SQL> 
02:43:29 SQL> -- I need a copy of the attributes:
02:43:29 SQL> 
02:43:29 SQL> 
02:43:29 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.05
02:43:29 SQL> CREATE TABLE eur_att COMPRESS AS
02:43:29   2  SELECT
02:43:29   3  ydate
02:43:29   4  ,att00 eur_att00
02:43:29   5  ,att01 eur_att01
02:43:29   6  ,att02 eur_att02
02:43:29   7  ,att03 eur_att03
02:43:29   8  ,att04 eur_att04
02:43:29   9  ,att05 eur_att05
02:43:29  10  ,att06 eur_att06
02:43:29  11  ,att07 eur_att07
02:43:29  12  ,att08 eur_att08
02:43:29  13  ,att09 eur_att09
02:43:29  14  ,att10 eur_att10
02:43:29  15  ,att11 eur_att11
02:43:29  16  ,att12 eur_att12
02:43:29  17  ,att13 eur_att13
02:43:29  18  ,att14 eur_att14
02:43:29  19  ,att15 eur_att15
02:43:29  20  ,att16 eur_att16
02:43:29  21  ,att17 eur_att17
02:43:29  22  ,att18 eur_att18
02:43:29  23  ,att19 eur_att19
02:43:29  24  ,att20 eur_att20
02:43:29  25  ,att21 eur_att21
02:43:29  26  ,att22 eur_att22
02:43:29  27  ,att23 eur_att23
02:43:29  28  ,att24 eur_att24
02:43:29  29  ,att25 eur_att25
02:43:29  30  ,att26 eur_att26
02:43:29  31  ,att27 eur_att27
02:43:29  32  ,att28 eur_att28
02:43:29  33  ,att29 eur_att29
02:43:29  34  ,att30 eur_att30
02:43:29  35  ,att31 eur_att31
02:43:29  36  ,att32 eur_att32
02:43:29  37  ,att33 eur_att33
02:43:29  38  ,att34 eur_att34
02:43:29  39  ,att35 eur_att35
02:43:29  40  ,att36 eur_att36
02:43:29  41  ,att37 eur_att37
02:43:29  42  FROM svm6162
02:43:29  43  /

Table created.

Elapsed: 00:00:00.18
02:43:29 SQL> 
02:43:29 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
02:43:30 SQL> 
02:43:30 SQL> -- rpt
02:43:30 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19340

Elapsed: 00:00:00.86
02:43:31 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19340

Elapsed: 00:00:00.01
02:43:31 SQL> 
02:43:31 SQL> --
02:43:31 SQL> -- aud610.sql
02:43:31 SQL> --
02:43:31 SQL> 
02:43:31 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:43:31 SQL> 
02:43:31 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.71
02:43:31 SQL> 
02:43:31 SQL> -- I created di5min here:
02:43:31 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:43:31 SQL> 
02:43:31 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:43:31   2  SELECT
02:43:31   3  pair
02:43:31   4  ,ydate
02:43:31   5  ,prdate
02:43:31   6  ,rownum rnum -- acts as t in my time-series
02:43:31   7  ,clse
02:43:31   8  -- Derive a bunch of attributes from clse, the latest price:
02:43:31   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:43:31  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:43:31  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:43:31  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:43:31  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:43:31  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:43:31  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:43:31  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:43:31  17  --
02:43:31  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:43:31  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:43:31  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:43:31  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:43:31  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:43:31  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:43:31  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:43:31  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:43:31  26  --
02:43:31  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:43:31  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:43:31  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:43:31  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:43:31  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:43:31  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:43:31  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:43:31  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:43:31  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:43:31  36  FROM di5min WHERE pair LIKE'%aud%'
02:43:31  37  AND ydate > sysdate - 95
02:43:31  38  ORDER BY ydate
02:43:31  39  /

View created.

Elapsed: 00:00:00.08
02:43:31 SQL> 
02:43:31 SQL> -- rpt
02:43:31 SQL> 
02:43:31 SQL> SELECT
02:43:31   2  pair
02:43:31   3  ,COUNT(pair)
02:43:31   4  ,MIN(clse),MAX(clse)
02:43:31   5  ,MIN(avg6),MAX(avg6)
02:43:31   6  ,MIN(ydate),MAX(ydate)
02:43:31   7  FROM svm6102
02:43:31   8  GROUP BY pair
02:43:31   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19336	.95405	   1.0181 .957141438 1.01556438 2010-09-26 20:55:01 2010-12-29 02:35:00

Elapsed: 00:00:00.87
02:43:32 SQL> 
02:43:32 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:43:32 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.28
02:43:33 SQL> CREATE TABLE svm6122 COMPRESS AS
02:43:33   2  SELECT
02:43:33   3  pair
02:43:33   4  ,ydate
02:43:33   5  ,prdate
02:43:33   6  ,clse
02:43:33   7  -- g6 is important. I want to predict g6:
02:43:33   8  ,ld6 - clse g6
02:43:33   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:43:33  10  -- I want more attributes from the ones I derived above:
02:43:33  11  -- clse relation to moving-min
02:43:33  12  ,clse-min4  cm4
02:43:33  13  ,clse-min6  cm6
02:43:33  14  ,clse-min8  cm8
02:43:33  15  ,clse-min10 cm10
02:43:33  16  ,clse-min12 cm12
02:43:33  17  ,clse-min14 cm14
02:43:33  18  ,clse-min16 cm16
02:43:33  19  ,clse-min18 cm18
02:43:33  20  -- clse relation to moving-avg
02:43:33  21  ,clse-avg4  ca4
02:43:33  22  ,clse-avg6  ca6
02:43:33  23  ,clse-avg8  ca8
02:43:33  24  ,clse-avg10 ca10
02:43:33  25  ,clse-avg12 ca12
02:43:33  26  ,clse-avg14 ca14
02:43:33  27  ,clse-avg16 ca16
02:43:33  28  ,clse-avg18 ca18
02:43:33  29  -- clse relation to moving-max
02:43:33  30  ,clse-max4  cx4
02:43:33  31  ,clse-max6  cx6
02:43:33  32  ,clse-max8  cx8
02:43:33  33  ,clse-max10 cx10
02:43:33  34  ,clse-max12 cx12
02:43:33  35  ,clse-max14 cx14
02:43:33  36  ,clse-max16 cx16
02:43:33  37  ,clse-max18 cx18
02:43:33  38  -- Derive more attributes.
02:43:33  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:43:33  40  -- But COVAR_POP is more stable:
02:43:33  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:43:33  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:43:33  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:43:33  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:43:33  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:43:33  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:43:33  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:43:33  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:43:33  49  -- Derive date related attributes:
02:43:33  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:43:33  51  ,0+TO_CHAR(ydate,'D')d
02:43:33  52  ,0+TO_CHAR(ydate,'W')w
02:43:33  53  -- mpm stands for minutes-past-midnight:
02:43:33  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:43:33  55  -- mph stands for minutes-past-hour:
02:43:33  56  ,0+TO_CHAR(ydate,'MI')mph
02:43:33  57  FROM svm6102
02:43:33  58  ORDER BY ydate
02:43:33  59  /

Table created.

Elapsed: 00:00:02.02
02:43:35 SQL> 
02:43:35 SQL> -- rpt
02:43:35 SQL> 
02:43:35 SQL> SELECT
02:43:35   2  pair
02:43:35   3  ,COUNT(pair)
02:43:35   4  ,MIN(clse),MAX(clse)
02:43:35   5  ,MIN(ydate),MAX(ydate)
02:43:35   6  FROM svm6122
02:43:35   7  GROUP BY pair
02:43:35   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19336	.95405	   1.0181 2010-09-26 20:55:01 2010-12-29 02:35:00

Elapsed: 00:00:00.12
02:43:35 SQL> 
02:43:35 SQL> -- Prepare for derivation of NTILE based params:
02:43:35 SQL> 
02:43:35 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.52
02:43:35 SQL> CREATE TABLE svm6142 COMPRESS AS
02:43:35   2  SELECT
02:43:35   3  pair
02:43:35   4  ,ydate
02:43:35   5  ,prdate
02:43:35   6  ,clse
02:43:35   7  ,g6
02:43:35   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:43:35   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:43:35  10  ,CASE WHEN trend IS NULL THEN 1
02:43:35  11  	    WHEN trend =0      THEN 1
02:43:35  12  	    ELSE trend END trend
02:43:35  13  ,cm4
02:43:35  14  ,cm6
02:43:35  15  ,cm8
02:43:35  16  ,cm10
02:43:35  17  ,cm12
02:43:35  18  ,cm14
02:43:35  19  ,cm16
02:43:35  20  ,cm18
02:43:35  21  --
02:43:35  22  ,ca4
02:43:35  23  ,ca6
02:43:35  24  ,ca8
02:43:35  25  ,ca10
02:43:35  26  ,ca12
02:43:35  27  ,ca14
02:43:35  28  ,ca16
02:43:35  29  ,ca18
02:43:35  30  --
02:43:35  31  ,cx4
02:43:35  32  ,cx6
02:43:35  33  ,cx8
02:43:35  34  ,cx10
02:43:35  35  ,cx12
02:43:35  36  ,cx14
02:43:35  37  ,cx16
02:43:35  38  ,cx18
02:43:35  39  --
02:43:35  40  ,crr4
02:43:35  41  ,crr6
02:43:35  42  ,crr8
02:43:35  43  ,crr10
02:43:35  44  ,crr12
02:43:35  45  ,crr14
02:43:35  46  ,crr16
02:43:35  47  ,crr18
02:43:35  48  --
02:43:35  49  ,hh
02:43:35  50  ,d
02:43:35  51  ,w
02:43:35  52  ,mpm
02:43:35  53  ,mph
02:43:35  54  FROM svm6122
02:43:35  55  ORDER BY ydate
02:43:35  56  /

Table created.

Elapsed: 00:00:00.35
02:43:36 SQL> 
02:43:36 SQL> -- rpt
02:43:36 SQL> 
02:43:36 SQL> SELECT
02:43:36   2  pair
02:43:36   3  ,trend
02:43:36   4  ,gatt
02:43:36   5  ,COUNT(pair)
02:43:36   6  ,AVG(g6)
02:43:36   7  FROM svm6142
02:43:36   8  GROUP BY pair,trend,gatt
02:43:36   9  ORDER BY pair,trend,gatt
02:43:36  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5166 -.00214056
aud_usd 	-1 up	      3772 .003741417
aud_usd 	-1		65
aud_usd 	 1 nup	      6679 -.00213644
aud_usd 	 1 up	      3647 .004062925
aud_usd 	 1		 7

6 rows selected.

Elapsed: 00:00:00.07
02:43:36 SQL> 
02:43:36 SQL> 
02:43:36 SQL> -- Derive NTILE based params:
02:43:36 SQL> 
02:43:36 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
02:43:36 SQL> CREATE TABLE svm6162 COMPRESS AS
02:43:36   2  SELECT
02:43:36   3  pair
02:43:36   4  ,ydate
02:43:36   5  ,prdate
02:43:36   6  ,clse
02:43:36   7  ,g6
02:43:36   8  ,gatt
02:43:36   9  ,gattn
02:43:36  10  ,trend
02:43:36  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:43:36  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:43:36  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:43:36  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:43:36  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:43:36  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:43:36  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:43:36  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:43:36  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:43:36  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:43:36  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:43:36  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:43:36  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:43:36  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:43:36  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:43:36  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:43:36  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:43:36  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:43:36  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:43:36  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:43:36  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:43:36  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:43:36  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:43:36  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:43:36  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:43:36  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:43:36  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:43:36  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:43:36  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:43:36  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:43:36  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:43:36  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:43:36  43  ,hh  att32
02:43:36  44  ,d   att33
02:43:36  45  ,w   att34
02:43:36  46  ,mpm att35
02:43:36  47  ,mph att36
02:43:36  48  ,trend att37
02:43:36  49  FROM svm6142
02:43:36  50  ORDER BY ydate
02:43:36  51  /

Table created.

Elapsed: 00:00:04.64
02:43:40 SQL> 
02:43:40 SQL> -- rpt
02:43:40 SQL> 
02:43:40 SQL> SELECT
02:43:40   2  pair
02:43:40   3  ,trend
02:43:40   4  ,gatt
02:43:40   5  ,COUNT(pair)
02:43:40   6  ,AVG(g6)
02:43:40   7  FROM svm6162
02:43:40   8  GROUP BY pair,trend,gatt
02:43:40   9  ORDER BY pair,trend,gatt
02:43:40  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5166 -.00214056
aud_usd 	-1 up	      3772 .003741417
aud_usd 	-1		65
aud_usd 	 1 nup	      6679 -.00213644
aud_usd 	 1 up	      3647 .004062925
aud_usd 	 1		 7

6 rows selected.

Elapsed: 00:00:00.03
02:43:40 SQL> 
02:43:40 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.14
02:43:41 SQL> CREATE TABLE modsrc COMPRESS AS
02:43:41   2  SELECT
02:43:41   3  pair
02:43:41   4  ,ydate
02:43:41   5  ,prdate
02:43:41   6  ,trend
02:43:41   7  ,g6
02:43:41   8  ,gatt
02:43:41   9  ,gattn
02:43:41  10  FROM svm6162
02:43:41  11  /

Table created.

Elapsed: 00:00:00.08
02:43:41 SQL> 
02:43:41 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.29
02:43:41 SQL> 
02:43:41 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
02:43:41 SQL> CREATE TABLE aud_ms610 COMPRESS AS
02:43:41   2  SELECT
02:43:41   3  ydate
02:43:41   4  ,trend aud_trend
02:43:41   5  ,g6    aud_g6
02:43:41   6  ,gatt  aud_gatt
02:43:41   7  ,gattn aud_gattn
02:43:41   8  FROM modsrc
02:43:41   9  /

Table created.

Elapsed: 00:00:00.07
02:43:41 SQL> 
02:43:41 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.14
02:43:41 SQL> 
02:43:41 SQL> -- I need a copy of the attributes:
02:43:41 SQL> 
02:43:41 SQL> 
02:43:41 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.04
02:43:41 SQL> CREATE TABLE aud_att COMPRESS AS
02:43:41   2  SELECT
02:43:41   3  ydate
02:43:41   4  ,att00 aud_att00
02:43:41   5  ,att01 aud_att01
02:43:41   6  ,att02 aud_att02
02:43:41   7  ,att03 aud_att03
02:43:41   8  ,att04 aud_att04
02:43:41   9  ,att05 aud_att05
02:43:41  10  ,att06 aud_att06
02:43:41  11  ,att07 aud_att07
02:43:41  12  ,att08 aud_att08
02:43:41  13  ,att09 aud_att09
02:43:41  14  ,att10 aud_att10
02:43:41  15  ,att11 aud_att11
02:43:41  16  ,att12 aud_att12
02:43:41  17  ,att13 aud_att13
02:43:41  18  ,att14 aud_att14
02:43:41  19  ,att15 aud_att15
02:43:41  20  ,att16 aud_att16
02:43:41  21  ,att17 aud_att17
02:43:41  22  ,att18 aud_att18
02:43:41  23  ,att19 aud_att19
02:43:41  24  ,att20 aud_att20
02:43:41  25  ,att21 aud_att21
02:43:41  26  ,att22 aud_att22
02:43:41  27  ,att23 aud_att23
02:43:41  28  ,att24 aud_att24
02:43:41  29  ,att25 aud_att25
02:43:41  30  ,att26 aud_att26
02:43:41  31  ,att27 aud_att27
02:43:41  32  ,att28 aud_att28
02:43:41  33  ,att29 aud_att29
02:43:41  34  ,att30 aud_att30
02:43:41  35  ,att31 aud_att31
02:43:41  36  ,att32 aud_att32
02:43:41  37  ,att33 aud_att33
02:43:41  38  ,att34 aud_att34
02:43:41  39  ,att35 aud_att35
02:43:41  40  ,att36 aud_att36
02:43:41  41  ,att37 aud_att37
02:43:41  42  FROM svm6162
02:43:41  43  /

Table created.

Elapsed: 00:00:00.20
02:43:42 SQL> 
02:43:42 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
02:43:42 SQL> 
02:43:42 SQL> -- rpt
02:43:42 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19336

Elapsed: 00:00:00.84
02:43:43 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19336

Elapsed: 00:00:00.00
02:43:43 SQL> 
02:43:43 SQL> --
02:43:43 SQL> -- gbp610.sql
02:43:43 SQL> --
02:43:43 SQL> 
02:43:43 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:43:43 SQL> 
02:43:43 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:01.38
02:43:44 SQL> 
02:43:44 SQL> -- I created di5min here:
02:43:44 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:43:44 SQL> 
02:43:44 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:43:44   2  SELECT
02:43:44   3  pair
02:43:44   4  ,ydate
02:43:44   5  ,prdate
02:43:44   6  ,rownum rnum -- acts as t in my time-series
02:43:44   7  ,clse
02:43:44   8  -- Derive a bunch of attributes from clse, the latest price:
02:43:44   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:43:44  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:43:44  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:43:44  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:43:44  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:43:44  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:43:44  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:43:44  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:43:44  17  --
02:43:44  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:43:44  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:43:44  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:43:44  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:43:44  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:43:44  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:43:44  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:43:44  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:43:44  26  --
02:43:44  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:43:44  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:43:44  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:43:44  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:43:44  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:43:44  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:43:44  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:43:44  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:43:44  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:43:44  36  FROM di5min WHERE pair LIKE'%gbp%'
02:43:44  37  AND ydate > sysdate - 95
02:43:44  38  ORDER BY ydate
02:43:44  39  /

View created.

Elapsed: 00:00:00.07
02:43:44 SQL> 
02:43:44 SQL> -- rpt
02:43:44 SQL> 
02:43:44 SQL> SELECT
02:43:44   2  pair
02:43:44   3  ,COUNT(pair)
02:43:44   4  ,MIN(clse),MAX(clse)
02:43:44   5  ,MIN(avg6),MAX(avg6)
02:43:44   6  ,MIN(ydate),MAX(ydate)
02:43:44   7  FROM svm6102
02:43:44   8  GROUP BY pair
02:43:44   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19339   1.535325	   1.6295 1.53696747 1.62716986 2010-09-26 20:55:01 2010-12-29 02:40:00

Elapsed: 00:00:00.83
02:43:45 SQL> 
02:43:45 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:43:45 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.23
02:43:45 SQL> CREATE TABLE svm6122 COMPRESS AS
02:43:45   2  SELECT
02:43:45   3  pair
02:43:45   4  ,ydate
02:43:45   5  ,prdate
02:43:45   6  ,clse
02:43:45   7  -- g6 is important. I want to predict g6:
02:43:45   8  ,ld6 - clse g6
02:43:45   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:43:45  10  -- I want more attributes from the ones I derived above:
02:43:45  11  -- clse relation to moving-min
02:43:45  12  ,clse-min4  cm4
02:43:45  13  ,clse-min6  cm6
02:43:45  14  ,clse-min8  cm8
02:43:45  15  ,clse-min10 cm10
02:43:45  16  ,clse-min12 cm12
02:43:45  17  ,clse-min14 cm14
02:43:45  18  ,clse-min16 cm16
02:43:45  19  ,clse-min18 cm18
02:43:45  20  -- clse relation to moving-avg
02:43:45  21  ,clse-avg4  ca4
02:43:45  22  ,clse-avg6  ca6
02:43:45  23  ,clse-avg8  ca8
02:43:45  24  ,clse-avg10 ca10
02:43:45  25  ,clse-avg12 ca12
02:43:45  26  ,clse-avg14 ca14
02:43:45  27  ,clse-avg16 ca16
02:43:45  28  ,clse-avg18 ca18
02:43:45  29  -- clse relation to moving-max
02:43:45  30  ,clse-max4  cx4
02:43:45  31  ,clse-max6  cx6
02:43:45  32  ,clse-max8  cx8
02:43:45  33  ,clse-max10 cx10
02:43:45  34  ,clse-max12 cx12
02:43:45  35  ,clse-max14 cx14
02:43:45  36  ,clse-max16 cx16
02:43:45  37  ,clse-max18 cx18
02:43:45  38  -- Derive more attributes.
02:43:45  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:43:45  40  -- But COVAR_POP is more stable:
02:43:45  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:43:45  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:43:45  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:43:45  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:43:45  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:43:45  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:43:45  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:43:45  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:43:45  49  -- Derive date related attributes:
02:43:45  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:43:45  51  ,0+TO_CHAR(ydate,'D')d
02:43:45  52  ,0+TO_CHAR(ydate,'W')w
02:43:45  53  -- mpm stands for minutes-past-midnight:
02:43:45  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:43:45  55  -- mph stands for minutes-past-hour:
02:43:45  56  ,0+TO_CHAR(ydate,'MI')mph
02:43:45  57  FROM svm6102
02:43:45  58  ORDER BY ydate
02:43:45  59  /

Table created.

Elapsed: 00:00:02.00
02:43:47 SQL> 
02:43:47 SQL> -- rpt
02:43:47 SQL> 
02:43:47 SQL> SELECT
02:43:47   2  pair
02:43:47   3  ,COUNT(pair)
02:43:47   4  ,MIN(clse),MAX(clse)
02:43:47   5  ,MIN(ydate),MAX(ydate)
02:43:47   6  FROM svm6122
02:43:47   7  GROUP BY pair
02:43:47   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19339   1.535325	   1.6295 2010-09-26 20:55:01 2010-12-29 02:40:00

Elapsed: 00:00:00.04
02:43:47 SQL> 
02:43:47 SQL> -- Prepare for derivation of NTILE based params:
02:43:47 SQL> 
02:43:47 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.27
02:43:48 SQL> CREATE TABLE svm6142 COMPRESS AS
02:43:48   2  SELECT
02:43:48   3  pair
02:43:48   4  ,ydate
02:43:48   5  ,prdate
02:43:48   6  ,clse
02:43:48   7  ,g6
02:43:48   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:43:48   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:43:48  10  ,CASE WHEN trend IS NULL THEN 1
02:43:48  11  	    WHEN trend =0      THEN 1
02:43:48  12  	    ELSE trend END trend
02:43:48  13  ,cm4
02:43:48  14  ,cm6
02:43:48  15  ,cm8
02:43:48  16  ,cm10
02:43:48  17  ,cm12
02:43:48  18  ,cm14
02:43:48  19  ,cm16
02:43:48  20  ,cm18
02:43:48  21  --
02:43:48  22  ,ca4
02:43:48  23  ,ca6
02:43:48  24  ,ca8
02:43:48  25  ,ca10
02:43:48  26  ,ca12
02:43:48  27  ,ca14
02:43:48  28  ,ca16
02:43:48  29  ,ca18
02:43:48  30  --
02:43:48  31  ,cx4
02:43:48  32  ,cx6
02:43:48  33  ,cx8
02:43:48  34  ,cx10
02:43:48  35  ,cx12
02:43:48  36  ,cx14
02:43:48  37  ,cx16
02:43:48  38  ,cx18
02:43:48  39  --
02:43:48  40  ,crr4
02:43:48  41  ,crr6
02:43:48  42  ,crr8
02:43:48  43  ,crr10
02:43:48  44  ,crr12
02:43:48  45  ,crr14
02:43:48  46  ,crr16
02:43:48  47  ,crr18
02:43:48  48  --
02:43:48  49  ,hh
02:43:48  50  ,d
02:43:48  51  ,w
02:43:48  52  ,mpm
02:43:48  53  ,mph
02:43:48  54  FROM svm6122
02:43:48  55  ORDER BY ydate
02:43:48  56  /

Table created.

Elapsed: 00:00:00.35
02:43:48 SQL> 
02:43:48 SQL> -- rpt
02:43:48 SQL> 
02:43:48 SQL> SELECT
02:43:48   2  pair
02:43:48   3  ,trend
02:43:48   4  ,gatt
02:43:48   5  ,COUNT(pair)
02:43:48   6  ,AVG(g6)
02:43:48   7  FROM svm6142
02:43:48   8  GROUP BY pair,trend,gatt
02:43:48   9  ORDER BY pair,trend,gatt
02:43:48  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6292 -.00256202
gbp_usd 	-1 up	      3490 .004250627
gbp_usd 	-1		32
gbp_usd 	 1 nup	      6124 -.00270402
gbp_usd 	 1 up	      3361 .004356966
gbp_usd 	 1		40

6 rows selected.

Elapsed: 00:00:00.05
02:43:48 SQL> 
02:43:48 SQL> 
02:43:48 SQL> -- Derive NTILE based params:
02:43:48 SQL> 
02:43:48 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.14
02:43:48 SQL> CREATE TABLE svm6162 COMPRESS AS
02:43:48   2  SELECT
02:43:48   3  pair
02:43:48   4  ,ydate
02:43:48   5  ,prdate
02:43:48   6  ,clse
02:43:48   7  ,g6
02:43:48   8  ,gatt
02:43:48   9  ,gattn
02:43:48  10  ,trend
02:43:48  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:43:48  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:43:48  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:43:48  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:43:48  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:43:48  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:43:48  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:43:48  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:43:48  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:43:48  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:43:48  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:43:48  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:43:48  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:43:48  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:43:48  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:43:48  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:43:48  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:43:48  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:43:48  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:43:48  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:43:48  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:43:48  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:43:48  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:43:48  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:43:48  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:43:48  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:43:48  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:43:48  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:43:48  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:43:48  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:43:48  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:43:48  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:43:48  43  ,hh  att32
02:43:48  44  ,d   att33
02:43:48  45  ,w   att34
02:43:48  46  ,mpm att35
02:43:48  47  ,mph att36
02:43:48  48  ,trend att37
02:43:48  49  FROM svm6142
02:43:48  50  ORDER BY ydate
02:43:48  51  /

Table created.

Elapsed: 00:00:04.66
02:43:53 SQL> 
02:43:53 SQL> -- rpt
02:43:53 SQL> 
02:43:53 SQL> SELECT
02:43:53   2  pair
02:43:53   3  ,trend
02:43:53   4  ,gatt
02:43:53   5  ,COUNT(pair)
02:43:53   6  ,AVG(g6)
02:43:53   7  FROM svm6162
02:43:53   8  GROUP BY pair,trend,gatt
02:43:53   9  ORDER BY pair,trend,gatt
02:43:53  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6292 -.00256202
gbp_usd 	-1 up	      3490 .004250627
gbp_usd 	-1		32
gbp_usd 	 1 nup	      6124 -.00270402
gbp_usd 	 1 up	      3361 .004356966
gbp_usd 	 1		40

6 rows selected.

Elapsed: 00:00:00.03
02:43:53 SQL> 
02:43:53 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.14
02:43:53 SQL> CREATE TABLE modsrc COMPRESS AS
02:43:53   2  SELECT
02:43:53   3  pair
02:43:53   4  ,ydate
02:43:53   5  ,prdate
02:43:53   6  ,trend
02:43:53   7  ,g6
02:43:53   8  ,gatt
02:43:53   9  ,gattn
02:43:53  10  FROM svm6162
02:43:53  11  /

Table created.

Elapsed: 00:00:00.10
02:43:53 SQL> 
02:43:53 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
02:43:53 SQL> 
02:43:53 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
02:43:53 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
02:43:53   2  SELECT
02:43:53   3  ydate
02:43:53   4  ,trend gbp_trend
02:43:53   5  ,g6    gbp_g6
02:43:53   6  ,gatt  gbp_gatt
02:43:53   7  ,gattn gbp_gattn
02:43:53   8  FROM modsrc
02:43:53   9  /

Table created.

Elapsed: 00:00:00.06
02:43:53 SQL> 
02:43:53 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
02:43:54 SQL> 
02:43:54 SQL> -- I need a copy of the attributes:
02:43:54 SQL> 
02:43:54 SQL> 
02:43:54 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.11
02:43:54 SQL> CREATE TABLE gbp_att COMPRESS AS
02:43:54   2  SELECT
02:43:54   3  ydate
02:43:54   4  ,att00 gbp_att00
02:43:54   5  ,att01 gbp_att01
02:43:54   6  ,att02 gbp_att02
02:43:54   7  ,att03 gbp_att03
02:43:54   8  ,att04 gbp_att04
02:43:54   9  ,att05 gbp_att05
02:43:54  10  ,att06 gbp_att06
02:43:54  11  ,att07 gbp_att07
02:43:54  12  ,att08 gbp_att08
02:43:54  13  ,att09 gbp_att09
02:43:54  14  ,att10 gbp_att10
02:43:54  15  ,att11 gbp_att11
02:43:54  16  ,att12 gbp_att12
02:43:54  17  ,att13 gbp_att13
02:43:54  18  ,att14 gbp_att14
02:43:54  19  ,att15 gbp_att15
02:43:54  20  ,att16 gbp_att16
02:43:54  21  ,att17 gbp_att17
02:43:54  22  ,att18 gbp_att18
02:43:54  23  ,att19 gbp_att19
02:43:54  24  ,att20 gbp_att20
02:43:54  25  ,att21 gbp_att21
02:43:54  26  ,att22 gbp_att22
02:43:54  27  ,att23 gbp_att23
02:43:54  28  ,att24 gbp_att24
02:43:54  29  ,att25 gbp_att25
02:43:54  30  ,att26 gbp_att26
02:43:54  31  ,att27 gbp_att27
02:43:54  32  ,att28 gbp_att28
02:43:54  33  ,att29 gbp_att29
02:43:54  34  ,att30 gbp_att30
02:43:54  35  ,att31 gbp_att31
02:43:54  36  ,att32 gbp_att32
02:43:54  37  ,att33 gbp_att33
02:43:54  38  ,att34 gbp_att34
02:43:54  39  ,att35 gbp_att35
02:43:54  40  ,att36 gbp_att36
02:43:54  41  ,att37 gbp_att37
02:43:54  42  FROM svm6162
02:43:54  43  /

Table created.

Elapsed: 00:00:00.22
02:43:54 SQL> 
02:43:54 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
02:43:54 SQL> 
02:43:54 SQL> -- rpt
02:43:54 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19339

Elapsed: 00:00:00.81
02:43:55 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19339

Elapsed: 00:00:00.00
02:43:55 SQL> 
02:43:55 SQL> --
02:43:55 SQL> -- jpy610.sql
02:43:55 SQL> --
02:43:55 SQL> 
02:43:55 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:43:55 SQL> 
02:43:55 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.43
02:43:56 SQL> 
02:43:56 SQL> -- I created di5min here:
02:43:56 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:43:56 SQL> 
02:43:56 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:43:56   2  SELECT
02:43:56   3  pair
02:43:56   4  ,ydate
02:43:56   5  ,prdate
02:43:56   6  ,rownum rnum -- acts as t in my time-series
02:43:56   7  ,clse
02:43:56   8  -- Derive a bunch of attributes from clse, the latest price:
02:43:56   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:43:56  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:43:56  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:43:56  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:43:56  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:43:56  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:43:56  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:43:56  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:43:56  17  --
02:43:56  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:43:56  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:43:56  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:43:56  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:43:56  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:43:56  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:43:56  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:43:56  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:43:56  26  --
02:43:56  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:43:56  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:43:56  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:43:56  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:43:56  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:43:56  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:43:56  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:43:56  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:43:56  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:43:56  36  FROM di5min WHERE pair LIKE'%jpy%'
02:43:56  37  AND ydate > sysdate - 95
02:43:56  38  ORDER BY ydate
02:43:56  39  /

View created.

Elapsed: 00:00:00.05
02:43:56 SQL> 
02:43:56 SQL> -- rpt
02:43:56 SQL> 
02:43:56 SQL> SELECT
02:43:56   2  pair
02:43:56   3  ,COUNT(pair)
02:43:56   4  ,MIN(clse),MAX(clse)
02:43:56   5  ,MIN(avg6),MAX(avg6)
02:43:56   6  ,MIN(ydate),MAX(ydate)
02:43:56   7  FROM svm6102
02:43:56   8  GROUP BY pair
02:43:56   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19336	 80.25	   84.485 80.3595205 84.3105479 2010-09-26 20:55:01 2010-12-29 02:40:00

Elapsed: 00:00:00.90
02:43:57 SQL> 
02:43:57 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:43:57 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.21
02:43:57 SQL> CREATE TABLE svm6122 COMPRESS AS
02:43:57   2  SELECT
02:43:57   3  pair
02:43:57   4  ,ydate
02:43:57   5  ,prdate
02:43:57   6  ,clse
02:43:57   7  -- g6 is important. I want to predict g6:
02:43:57   8  ,ld6 - clse g6
02:43:57   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:43:57  10  -- I want more attributes from the ones I derived above:
02:43:57  11  -- clse relation to moving-min
02:43:57  12  ,clse-min4  cm4
02:43:57  13  ,clse-min6  cm6
02:43:57  14  ,clse-min8  cm8
02:43:57  15  ,clse-min10 cm10
02:43:57  16  ,clse-min12 cm12
02:43:57  17  ,clse-min14 cm14
02:43:57  18  ,clse-min16 cm16
02:43:57  19  ,clse-min18 cm18
02:43:57  20  -- clse relation to moving-avg
02:43:57  21  ,clse-avg4  ca4
02:43:57  22  ,clse-avg6  ca6
02:43:57  23  ,clse-avg8  ca8
02:43:57  24  ,clse-avg10 ca10
02:43:57  25  ,clse-avg12 ca12
02:43:57  26  ,clse-avg14 ca14
02:43:57  27  ,clse-avg16 ca16
02:43:57  28  ,clse-avg18 ca18
02:43:57  29  -- clse relation to moving-max
02:43:57  30  ,clse-max4  cx4
02:43:57  31  ,clse-max6  cx6
02:43:57  32  ,clse-max8  cx8
02:43:57  33  ,clse-max10 cx10
02:43:57  34  ,clse-max12 cx12
02:43:57  35  ,clse-max14 cx14
02:43:57  36  ,clse-max16 cx16
02:43:57  37  ,clse-max18 cx18
02:43:57  38  -- Derive more attributes.
02:43:57  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:43:57  40  -- But COVAR_POP is more stable:
02:43:57  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:43:57  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:43:57  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:43:57  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:43:57  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:43:57  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:43:57  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:43:57  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:43:57  49  -- Derive date related attributes:
02:43:57  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:43:57  51  ,0+TO_CHAR(ydate,'D')d
02:43:57  52  ,0+TO_CHAR(ydate,'W')w
02:43:57  53  -- mpm stands for minutes-past-midnight:
02:43:57  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:43:57  55  -- mph stands for minutes-past-hour:
02:43:57  56  ,0+TO_CHAR(ydate,'MI')mph
02:43:57  57  FROM svm6102
02:43:57  58  ORDER BY ydate
02:43:57  59  /

Table created.

Elapsed: 00:00:02.06
02:43:59 SQL> 
02:43:59 SQL> -- rpt
02:43:59 SQL> 
02:43:59 SQL> SELECT
02:43:59   2  pair
02:43:59   3  ,COUNT(pair)
02:43:59   4  ,MIN(clse),MAX(clse)
02:43:59   5  ,MIN(ydate),MAX(ydate)
02:43:59   6  FROM svm6122
02:43:59   7  GROUP BY pair
02:43:59   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19336	 80.25	   84.485 2010-09-26 20:55:01 2010-12-29 02:40:00

Elapsed: 00:00:00.10
02:43:59 SQL> 
02:43:59 SQL> -- Prepare for derivation of NTILE based params:
02:43:59 SQL> 
02:43:59 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.32
02:43:59 SQL> CREATE TABLE svm6142 COMPRESS AS
02:43:59   2  SELECT
02:43:59   3  pair
02:43:59   4  ,ydate
02:43:59   5  ,prdate
02:43:59   6  ,clse
02:43:59   7  ,g6
02:43:59   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:43:59   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:43:59  10  ,CASE WHEN trend IS NULL THEN 1
02:43:59  11  	    WHEN trend =0      THEN 1
02:43:59  12  	    ELSE trend END trend
02:43:59  13  ,cm4
02:43:59  14  ,cm6
02:43:59  15  ,cm8
02:43:59  16  ,cm10
02:43:59  17  ,cm12
02:43:59  18  ,cm14
02:43:59  19  ,cm16
02:43:59  20  ,cm18
02:43:59  21  --
02:43:59  22  ,ca4
02:43:59  23  ,ca6
02:43:59  24  ,ca8
02:43:59  25  ,ca10
02:43:59  26  ,ca12
02:43:59  27  ,ca14
02:43:59  28  ,ca16
02:43:59  29  ,ca18
02:43:59  30  --
02:43:59  31  ,cx4
02:43:59  32  ,cx6
02:43:59  33  ,cx8
02:43:59  34  ,cx10
02:43:59  35  ,cx12
02:43:59  36  ,cx14
02:43:59  37  ,cx16
02:43:59  38  ,cx18
02:43:59  39  --
02:43:59  40  ,crr4
02:43:59  41  ,crr6
02:43:59  42  ,crr8
02:43:59  43  ,crr10
02:43:59  44  ,crr12
02:43:59  45  ,crr14
02:43:59  46  ,crr16
02:43:59  47  ,crr18
02:43:59  48  --
02:43:59  49  ,hh
02:43:59  50  ,d
02:43:59  51  ,w
02:43:59  52  ,mpm
02:43:59  53  ,mph
02:43:59  54  FROM svm6122
02:43:59  55  ORDER BY ydate
02:43:59  56  /

Table created.

Elapsed: 00:00:00.35
02:44:00 SQL> 
02:44:00 SQL> -- rpt
02:44:00 SQL> 
02:44:00 SQL> SELECT
02:44:00   2  pair
02:44:00   3  ,trend
02:44:00   4  ,gatt
02:44:00   5  ,COUNT(pair)
02:44:00   6  ,AVG(g6)
02:44:00   7  FROM svm6142
02:44:00   8  GROUP BY pair,trend,gatt
02:44:00   9  ORDER BY pair,trend,gatt
02:44:00  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5097 -.16260702
usd_jpy 	-1 up	      4954 .163304745
usd_jpy 	-1		20
usd_jpy 	 1 nup	      5120 -.15505133
usd_jpy 	 1 up	      4093 .165084061
usd_jpy 	 1		52

6 rows selected.

Elapsed: 00:00:00.06
02:44:00 SQL> 
02:44:00 SQL> 
02:44:00 SQL> -- Derive NTILE based params:
02:44:00 SQL> 
02:44:00 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.19
02:44:00 SQL> CREATE TABLE svm6162 COMPRESS AS
02:44:00   2  SELECT
02:44:00   3  pair
02:44:00   4  ,ydate
02:44:00   5  ,prdate
02:44:00   6  ,clse
02:44:00   7  ,g6
02:44:00   8  ,gatt
02:44:00   9  ,gattn
02:44:00  10  ,trend
02:44:00  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:44:00  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:44:00  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:44:00  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:44:00  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:44:00  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:44:00  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:44:00  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:44:00  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:44:00  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:44:00  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:44:00  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:44:00  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:44:00  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:44:00  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:44:00  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:44:00  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:44:00  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:44:00  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:44:00  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:44:00  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:44:00  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:44:00  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:44:00  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:44:00  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:44:00  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:44:00  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:44:00  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:44:00  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:44:00  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:44:00  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:44:00  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:44:00  43  ,hh  att32
02:44:00  44  ,d   att33
02:44:00  45  ,w   att34
02:44:00  46  ,mpm att35
02:44:00  47  ,mph att36
02:44:00  48  ,trend att37
02:44:00  49  FROM svm6142
02:44:00  50  ORDER BY ydate
02:44:00  51  /

Table created.

Elapsed: 00:00:04.71
02:44:05 SQL> 
02:44:05 SQL> -- rpt
02:44:05 SQL> 
02:44:05 SQL> SELECT
02:44:05   2  pair
02:44:05   3  ,trend
02:44:05   4  ,gatt
02:44:05   5  ,COUNT(pair)
02:44:05   6  ,AVG(g6)
02:44:05   7  FROM svm6162
02:44:05   8  GROUP BY pair,trend,gatt
02:44:05   9  ORDER BY pair,trend,gatt
02:44:05  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5097 -.16260702
usd_jpy 	-1 up	      4954 .163304745
usd_jpy 	-1		20
usd_jpy 	 1 nup	      5120 -.15505133
usd_jpy 	 1 up	      4093 .165084061
usd_jpy 	 1		52

6 rows selected.

Elapsed: 00:00:00.05
02:44:05 SQL> 
02:44:05 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.16
02:44:05 SQL> CREATE TABLE modsrc COMPRESS AS
02:44:05   2  SELECT
02:44:05   3  pair
02:44:05   4  ,ydate
02:44:05   5  ,prdate
02:44:05   6  ,trend
02:44:05   7  ,g6
02:44:05   8  ,gatt
02:44:05   9  ,gattn
02:44:05  10  FROM svm6162
02:44:05  11  /

Table created.

Elapsed: 00:00:00.09
02:44:05 SQL> 
02:44:05 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
02:44:05 SQL> 
02:44:05 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.09
02:44:05 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
02:44:05   2  SELECT
02:44:05   3  ydate
02:44:05   4  ,trend jpy_trend
02:44:05   5  ,g6    jpy_g6
02:44:05   6  ,gatt  jpy_gatt
02:44:05   7  ,gattn jpy_gattn
02:44:05   8  FROM modsrc
02:44:05   9  /

Table created.

Elapsed: 00:00:00.07
02:44:05 SQL> 
02:44:05 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
02:44:05 SQL> 
02:44:05 SQL> -- I need a copy of the attributes:
02:44:05 SQL> 
02:44:05 SQL> 
02:44:05 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.05
02:44:05 SQL> CREATE TABLE jpy_att COMPRESS AS
02:44:05   2  SELECT
02:44:05   3  ydate
02:44:05   4  ,att00 jpy_att00
02:44:05   5  ,att01 jpy_att01
02:44:05   6  ,att02 jpy_att02
02:44:05   7  ,att03 jpy_att03
02:44:05   8  ,att04 jpy_att04
02:44:05   9  ,att05 jpy_att05
02:44:05  10  ,att06 jpy_att06
02:44:05  11  ,att07 jpy_att07
02:44:05  12  ,att08 jpy_att08
02:44:05  13  ,att09 jpy_att09
02:44:05  14  ,att10 jpy_att10
02:44:05  15  ,att11 jpy_att11
02:44:05  16  ,att12 jpy_att12
02:44:05  17  ,att13 jpy_att13
02:44:05  18  ,att14 jpy_att14
02:44:05  19  ,att15 jpy_att15
02:44:05  20  ,att16 jpy_att16
02:44:05  21  ,att17 jpy_att17
02:44:05  22  ,att18 jpy_att18
02:44:05  23  ,att19 jpy_att19
02:44:05  24  ,att20 jpy_att20
02:44:05  25  ,att21 jpy_att21
02:44:05  26  ,att22 jpy_att22
02:44:05  27  ,att23 jpy_att23
02:44:05  28  ,att24 jpy_att24
02:44:05  29  ,att25 jpy_att25
02:44:05  30  ,att26 jpy_att26
02:44:05  31  ,att27 jpy_att27
02:44:05  32  ,att28 jpy_att28
02:44:05  33  ,att29 jpy_att29
02:44:05  34  ,att30 jpy_att30
02:44:05  35  ,att31 jpy_att31
02:44:05  36  ,att32 jpy_att32
02:44:05  37  ,att33 jpy_att33
02:44:05  38  ,att34 jpy_att34
02:44:05  39  ,att35 jpy_att35
02:44:05  40  ,att36 jpy_att36
02:44:05  41  ,att37 jpy_att37
02:44:05  42  FROM svm6162
02:44:05  43  /

Table created.

Elapsed: 00:00:00.18
02:44:06 SQL> 
02:44:06 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.49
02:44:06 SQL> 
02:44:06 SQL> -- rpt
02:44:06 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19336

Elapsed: 00:00:00.86
02:44:07 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19336

Elapsed: 00:00:00.00
02:44:07 SQL> 
02:44:07 SQL> --
02:44:07 SQL> -- cad610.sql
02:44:07 SQL> --
02:44:07 SQL> 
02:44:07 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:44:07 SQL> 
02:44:07 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.43
02:44:07 SQL> 
02:44:07 SQL> -- I created di5min here:
02:44:07 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:44:07 SQL> 
02:44:07 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:44:07   2  SELECT
02:44:07   3  pair
02:44:07   4  ,ydate
02:44:07   5  ,prdate
02:44:07   6  ,rownum rnum -- acts as t in my time-series
02:44:07   7  ,clse
02:44:07   8  -- Derive a bunch of attributes from clse, the latest price:
02:44:07   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:44:07  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:44:07  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:44:07  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:44:07  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:44:07  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:44:07  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:44:07  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:44:07  17  --
02:44:07  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:44:07  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:44:07  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:44:07  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:44:07  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:44:07  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:44:07  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:44:07  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:44:07  26  --
02:44:07  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:44:07  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:44:07  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:44:07  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:44:07  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:44:07  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:44:07  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:44:07  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:44:07  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:44:07  36  FROM di5min WHERE pair LIKE'%cad%'
02:44:07  37  AND ydate > sysdate - 95
02:44:07  38  ORDER BY ydate
02:44:07  39  /

View created.

Elapsed: 00:00:00.11
02:44:08 SQL> 
02:44:08 SQL> -- rpt
02:44:08 SQL> 
02:44:08 SQL> SELECT
02:44:08   2  pair
02:44:08   3  ,COUNT(pair)
02:44:08   4  ,MIN(clse),MAX(clse)
02:44:08   5  ,MIN(avg6),MAX(avg6)
02:44:08   6  ,MIN(ydate),MAX(ydate)
02:44:08   7  FROM svm6102
02:44:08   8  GROUP BY pair
02:44:08   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19336    .997975	    1.036 .999321575 1.03336849 2010-09-26 20:55:01 2010-12-29 02:40:00

Elapsed: 00:00:00.83
02:44:08 SQL> 
02:44:08 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:44:08 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.18
02:44:09 SQL> CREATE TABLE svm6122 COMPRESS AS
02:44:09   2  SELECT
02:44:09   3  pair
02:44:09   4  ,ydate
02:44:09   5  ,prdate
02:44:09   6  ,clse
02:44:09   7  -- g6 is important. I want to predict g6:
02:44:09   8  ,ld6 - clse g6
02:44:09   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:44:09  10  -- I want more attributes from the ones I derived above:
02:44:09  11  -- clse relation to moving-min
02:44:09  12  ,clse-min4  cm4
02:44:09  13  ,clse-min6  cm6
02:44:09  14  ,clse-min8  cm8
02:44:09  15  ,clse-min10 cm10
02:44:09  16  ,clse-min12 cm12
02:44:09  17  ,clse-min14 cm14
02:44:09  18  ,clse-min16 cm16
02:44:09  19  ,clse-min18 cm18
02:44:09  20  -- clse relation to moving-avg
02:44:09  21  ,clse-avg4  ca4
02:44:09  22  ,clse-avg6  ca6
02:44:09  23  ,clse-avg8  ca8
02:44:09  24  ,clse-avg10 ca10
02:44:09  25  ,clse-avg12 ca12
02:44:09  26  ,clse-avg14 ca14
02:44:09  27  ,clse-avg16 ca16
02:44:09  28  ,clse-avg18 ca18
02:44:09  29  -- clse relation to moving-max
02:44:09  30  ,clse-max4  cx4
02:44:09  31  ,clse-max6  cx6
02:44:09  32  ,clse-max8  cx8
02:44:09  33  ,clse-max10 cx10
02:44:09  34  ,clse-max12 cx12
02:44:09  35  ,clse-max14 cx14
02:44:09  36  ,clse-max16 cx16
02:44:09  37  ,clse-max18 cx18
02:44:09  38  -- Derive more attributes.
02:44:09  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:44:09  40  -- But COVAR_POP is more stable:
02:44:09  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:44:09  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:44:09  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:44:09  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:44:09  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:44:09  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:44:09  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:44:09  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:44:09  49  -- Derive date related attributes:
02:44:09  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:44:09  51  ,0+TO_CHAR(ydate,'D')d
02:44:09  52  ,0+TO_CHAR(ydate,'W')w
02:44:09  53  -- mpm stands for minutes-past-midnight:
02:44:09  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:44:09  55  -- mph stands for minutes-past-hour:
02:44:09  56  ,0+TO_CHAR(ydate,'MI')mph
02:44:09  57  FROM svm6102
02:44:09  58  ORDER BY ydate
02:44:09  59  /

Table created.

Elapsed: 00:00:01.98
02:44:11 SQL> 
02:44:11 SQL> -- rpt
02:44:11 SQL> 
02:44:11 SQL> SELECT
02:44:11   2  pair
02:44:11   3  ,COUNT(pair)
02:44:11   4  ,MIN(clse),MAX(clse)
02:44:11   5  ,MIN(ydate),MAX(ydate)
02:44:11   6  FROM svm6122
02:44:11   7  GROUP BY pair
02:44:11   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19336    .997975	    1.036 2010-09-26 20:55:01 2010-12-29 02:40:00

Elapsed: 00:00:00.04
02:44:11 SQL> 
02:44:11 SQL> -- Prepare for derivation of NTILE based params:
02:44:11 SQL> 
02:44:11 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.18
02:44:11 SQL> CREATE TABLE svm6142 COMPRESS AS
02:44:11   2  SELECT
02:44:11   3  pair
02:44:11   4  ,ydate
02:44:11   5  ,prdate
02:44:11   6  ,clse
02:44:11   7  ,g6
02:44:11   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:44:11   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:44:11  10  ,CASE WHEN trend IS NULL THEN 1
02:44:11  11  	    WHEN trend =0      THEN 1
02:44:11  12  	    ELSE trend END trend
02:44:11  13  ,cm4
02:44:11  14  ,cm6
02:44:11  15  ,cm8
02:44:11  16  ,cm10
02:44:11  17  ,cm12
02:44:11  18  ,cm14
02:44:11  19  ,cm16
02:44:11  20  ,cm18
02:44:11  21  --
02:44:11  22  ,ca4
02:44:11  23  ,ca6
02:44:11  24  ,ca8
02:44:11  25  ,ca10
02:44:11  26  ,ca12
02:44:11  27  ,ca14
02:44:11  28  ,ca16
02:44:11  29  ,ca18
02:44:11  30  --
02:44:11  31  ,cx4
02:44:11  32  ,cx6
02:44:11  33  ,cx8
02:44:11  34  ,cx10
02:44:11  35  ,cx12
02:44:11  36  ,cx14
02:44:11  37  ,cx16
02:44:11  38  ,cx18
02:44:11  39  --
02:44:11  40  ,crr4
02:44:11  41  ,crr6
02:44:11  42  ,crr8
02:44:11  43  ,crr10
02:44:11  44  ,crr12
02:44:11  45  ,crr14
02:44:11  46  ,crr16
02:44:11  47  ,crr18
02:44:11  48  --
02:44:11  49  ,hh
02:44:11  50  ,d
02:44:11  51  ,w
02:44:11  52  ,mpm
02:44:11  53  ,mph
02:44:11  54  FROM svm6122
02:44:11  55  ORDER BY ydate
02:44:11  56  /

Table created.

Elapsed: 00:00:00.35
02:44:11 SQL> 
02:44:11 SQL> -- rpt
02:44:11 SQL> 
02:44:11 SQL> SELECT
02:44:11   2  pair
02:44:11   3  ,trend
02:44:11   4  ,gatt
02:44:11   5  ,COUNT(pair)
02:44:11   6  ,AVG(g6)
02:44:11   7  FROM svm6142
02:44:11   8  GROUP BY pair,trend,gatt
02:44:11   9  ORDER BY pair,trend,gatt
02:44:11  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7141 -.00133516
usd_cad 	-1 up	      3081  .00310749
usd_cad 	 1 nup	      6553 -.00162936
usd_cad 	 1 up	      2489 .003597467
usd_cad 	 1		72

Elapsed: 00:00:00.06
02:44:11 SQL> 
02:44:11 SQL> 
02:44:11 SQL> -- Derive NTILE based params:
02:44:11 SQL> 
02:44:11 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
02:44:11 SQL> CREATE TABLE svm6162 COMPRESS AS
02:44:11   2  SELECT
02:44:11   3  pair
02:44:11   4  ,ydate
02:44:11   5  ,prdate
02:44:11   6  ,clse
02:44:11   7  ,g6
02:44:11   8  ,gatt
02:44:11   9  ,gattn
02:44:11  10  ,trend
02:44:11  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:44:11  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:44:11  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:44:11  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:44:11  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:44:11  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:44:11  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:44:11  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:44:11  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:44:11  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:44:11  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:44:11  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:44:11  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:44:11  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:44:11  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:44:11  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:44:11  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:44:11  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:44:11  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:44:11  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:44:11  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:44:11  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:44:11  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:44:11  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:44:11  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:44:11  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:44:11  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:44:11  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:44:11  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:44:11  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:44:11  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:44:11  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:44:11  43  ,hh  att32
02:44:11  44  ,d   att33
02:44:11  45  ,w   att34
02:44:11  46  ,mpm att35
02:44:11  47  ,mph att36
02:44:11  48  ,trend att37
02:44:11  49  FROM svm6142
02:44:11  50  ORDER BY ydate
02:44:11  51  /

Table created.

Elapsed: 00:00:04.74
02:44:16 SQL> 
02:44:16 SQL> -- rpt
02:44:16 SQL> 
02:44:16 SQL> SELECT
02:44:16   2  pair
02:44:16   3  ,trend
02:44:16   4  ,gatt
02:44:16   5  ,COUNT(pair)
02:44:16   6  ,AVG(g6)
02:44:16   7  FROM svm6162
02:44:16   8  GROUP BY pair,trend,gatt
02:44:16   9  ORDER BY pair,trend,gatt
02:44:16  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7141 -.00133516
usd_cad 	-1 up	      3081  .00310749
usd_cad 	 1 nup	      6553 -.00162936
usd_cad 	 1 up	      2489 .003597467
usd_cad 	 1		72

Elapsed: 00:00:00.05
02:44:16 SQL> 
02:44:16 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
02:44:16 SQL> CREATE TABLE modsrc COMPRESS AS
02:44:16   2  SELECT
02:44:16   3  pair
02:44:16   4  ,ydate
02:44:16   5  ,prdate
02:44:16   6  ,trend
02:44:16   7  ,g6
02:44:16   8  ,gatt
02:44:16   9  ,gattn
02:44:16  10  FROM svm6162
02:44:16  11  /

Table created.

Elapsed: 00:00:00.08
02:44:16 SQL> 
02:44:16 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
02:44:17 SQL> 
02:44:17 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
02:44:17 SQL> CREATE TABLE cad_ms610 COMPRESS AS
02:44:17   2  SELECT
02:44:17   3  ydate
02:44:17   4  ,trend cad_trend
02:44:17   5  ,g6    cad_g6
02:44:17   6  ,gatt  cad_gatt
02:44:17   7  ,gattn cad_gattn
02:44:17   8  FROM modsrc
02:44:17   9  /

Table created.

Elapsed: 00:00:00.07
02:44:17 SQL> 
02:44:17 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
02:44:17 SQL> 
02:44:17 SQL> -- I need a copy of the attributes:
02:44:17 SQL> 
02:44:17 SQL> 
02:44:17 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.04
02:44:17 SQL> CREATE TABLE cad_att COMPRESS AS
02:44:17   2  SELECT
02:44:17   3  ydate
02:44:17   4  ,att00 cad_att00
02:44:17   5  ,att01 cad_att01
02:44:17   6  ,att02 cad_att02
02:44:17   7  ,att03 cad_att03
02:44:17   8  ,att04 cad_att04
02:44:17   9  ,att05 cad_att05
02:44:17  10  ,att06 cad_att06
02:44:17  11  ,att07 cad_att07
02:44:17  12  ,att08 cad_att08
02:44:17  13  ,att09 cad_att09
02:44:17  14  ,att10 cad_att10
02:44:17  15  ,att11 cad_att11
02:44:17  16  ,att12 cad_att12
02:44:17  17  ,att13 cad_att13
02:44:17  18  ,att14 cad_att14
02:44:17  19  ,att15 cad_att15
02:44:17  20  ,att16 cad_att16
02:44:17  21  ,att17 cad_att17
02:44:17  22  ,att18 cad_att18
02:44:17  23  ,att19 cad_att19
02:44:17  24  ,att20 cad_att20
02:44:17  25  ,att21 cad_att21
02:44:17  26  ,att22 cad_att22
02:44:17  27  ,att23 cad_att23
02:44:17  28  ,att24 cad_att24
02:44:17  29  ,att25 cad_att25
02:44:17  30  ,att26 cad_att26
02:44:17  31  ,att27 cad_att27
02:44:17  32  ,att28 cad_att28
02:44:17  33  ,att29 cad_att29
02:44:17  34  ,att30 cad_att30
02:44:17  35  ,att31 cad_att31
02:44:17  36  ,att32 cad_att32
02:44:17  37  ,att33 cad_att33
02:44:17  38  ,att34 cad_att34
02:44:17  39  ,att35 cad_att35
02:44:17  40  ,att36 cad_att36
02:44:17  41  ,att37 cad_att37
02:44:17  42  FROM svm6162
02:44:17  43  /

Table created.

Elapsed: 00:00:00.18
02:44:17 SQL> 
02:44:17 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.50
02:44:18 SQL> 
02:44:18 SQL> -- rpt
02:44:18 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19336

Elapsed: 00:00:00.80
02:44:18 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19336

Elapsed: 00:00:00.00
02:44:18 SQL> 
02:44:18 SQL> --
02:44:18 SQL> -- chf610.sql
02:44:18 SQL> --
02:44:18 SQL> 
02:44:18 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:44:18 SQL> 
02:44:18 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.47
02:44:19 SQL> 
02:44:19 SQL> -- I created di5min here:
02:44:19 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:44:19 SQL> 
02:44:19 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:44:19   2  SELECT
02:44:19   3  pair
02:44:19   4  ,ydate
02:44:19   5  ,prdate
02:44:19   6  ,rownum rnum -- acts as t in my time-series
02:44:19   7  ,clse
02:44:19   8  -- Derive a bunch of attributes from clse, the latest price:
02:44:19   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:44:19  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:44:19  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:44:19  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:44:19  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:44:19  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:44:19  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:44:19  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:44:19  17  --
02:44:19  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:44:19  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:44:19  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:44:19  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:44:19  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:44:19  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:44:19  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:44:19  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:44:19  26  --
02:44:19  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:44:19  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:44:19  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:44:19  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:44:19  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:44:19  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:44:19  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:44:19  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:44:19  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:44:19  36  FROM di5min WHERE pair LIKE'%chf%'
02:44:19  37  AND ydate > sysdate - 95
02:44:19  38  ORDER BY ydate
02:44:19  39  /

View created.

Elapsed: 00:00:00.05
02:44:19 SQL> 
02:44:19 SQL> -- rpt
02:44:19 SQL> 
02:44:19 SQL> SELECT
02:44:19   2  pair
02:44:19   3  ,COUNT(pair)
02:44:19   4  ,MIN(clse),MAX(clse)
02:44:19   5  ,MIN(avg6),MAX(avg6)
02:44:19   6  ,MIN(ydate),MAX(ydate)
02:44:19   7  FROM svm6102
02:44:19   8  GROUP BY pair
02:44:19   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19339	.94525	  1.00635 .947785616 1.00498151 2010-09-26 20:55:01 2010-12-29 02:40:00

Elapsed: 00:00:00.82
02:44:20 SQL> 
02:44:20 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:44:20 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.23
02:44:20 SQL> CREATE TABLE svm6122 COMPRESS AS
02:44:20   2  SELECT
02:44:20   3  pair
02:44:20   4  ,ydate
02:44:20   5  ,prdate
02:44:20   6  ,clse
02:44:20   7  -- g6 is important. I want to predict g6:
02:44:20   8  ,ld6 - clse g6
02:44:20   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:44:20  10  -- I want more attributes from the ones I derived above:
02:44:20  11  -- clse relation to moving-min
02:44:20  12  ,clse-min4  cm4
02:44:20  13  ,clse-min6  cm6
02:44:20  14  ,clse-min8  cm8
02:44:20  15  ,clse-min10 cm10
02:44:20  16  ,clse-min12 cm12
02:44:20  17  ,clse-min14 cm14
02:44:20  18  ,clse-min16 cm16
02:44:20  19  ,clse-min18 cm18
02:44:20  20  -- clse relation to moving-avg
02:44:20  21  ,clse-avg4  ca4
02:44:20  22  ,clse-avg6  ca6
02:44:20  23  ,clse-avg8  ca8
02:44:20  24  ,clse-avg10 ca10
02:44:20  25  ,clse-avg12 ca12
02:44:20  26  ,clse-avg14 ca14
02:44:20  27  ,clse-avg16 ca16
02:44:20  28  ,clse-avg18 ca18
02:44:20  29  -- clse relation to moving-max
02:44:20  30  ,clse-max4  cx4
02:44:20  31  ,clse-max6  cx6
02:44:20  32  ,clse-max8  cx8
02:44:20  33  ,clse-max10 cx10
02:44:20  34  ,clse-max12 cx12
02:44:20  35  ,clse-max14 cx14
02:44:20  36  ,clse-max16 cx16
02:44:20  37  ,clse-max18 cx18
02:44:20  38  -- Derive more attributes.
02:44:20  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:44:20  40  -- But COVAR_POP is more stable:
02:44:20  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:44:20  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:44:20  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:44:20  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:44:20  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:44:20  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:44:20  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:44:20  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:44:20  49  -- Derive date related attributes:
02:44:20  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:44:20  51  ,0+TO_CHAR(ydate,'D')d
02:44:20  52  ,0+TO_CHAR(ydate,'W')w
02:44:20  53  -- mpm stands for minutes-past-midnight:
02:44:20  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:44:20  55  -- mph stands for minutes-past-hour:
02:44:20  56  ,0+TO_CHAR(ydate,'MI')mph
02:44:20  57  FROM svm6102
02:44:20  58  ORDER BY ydate
02:44:20  59  /

Table created.

Elapsed: 00:00:02.03
02:44:22 SQL> 
02:44:22 SQL> -- rpt
02:44:22 SQL> 
02:44:22 SQL> SELECT
02:44:22   2  pair
02:44:22   3  ,COUNT(pair)
02:44:22   4  ,MIN(clse),MAX(clse)
02:44:22   5  ,MIN(ydate),MAX(ydate)
02:44:22   6  FROM svm6122
02:44:22   7  GROUP BY pair
02:44:22   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19339	.94525	  1.00635 2010-09-26 20:55:01 2010-12-29 02:40:00

Elapsed: 00:00:00.06
02:44:22 SQL> 
02:44:22 SQL> -- Prepare for derivation of NTILE based params:
02:44:22 SQL> 
02:44:22 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.31
02:44:22 SQL> CREATE TABLE svm6142 COMPRESS AS
02:44:22   2  SELECT
02:44:22   3  pair
02:44:22   4  ,ydate
02:44:22   5  ,prdate
02:44:22   6  ,clse
02:44:22   7  ,g6
02:44:22   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:44:22   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:44:22  10  ,CASE WHEN trend IS NULL THEN 1
02:44:22  11  	    WHEN trend =0      THEN 1
02:44:22  12  	    ELSE trend END trend
02:44:22  13  ,cm4
02:44:22  14  ,cm6
02:44:22  15  ,cm8
02:44:22  16  ,cm10
02:44:22  17  ,cm12
02:44:22  18  ,cm14
02:44:22  19  ,cm16
02:44:22  20  ,cm18
02:44:22  21  --
02:44:22  22  ,ca4
02:44:22  23  ,ca6
02:44:22  24  ,ca8
02:44:22  25  ,ca10
02:44:22  26  ,ca12
02:44:22  27  ,ca14
02:44:22  28  ,ca16
02:44:22  29  ,ca18
02:44:22  30  --
02:44:22  31  ,cx4
02:44:22  32  ,cx6
02:44:22  33  ,cx8
02:44:22  34  ,cx10
02:44:22  35  ,cx12
02:44:22  36  ,cx14
02:44:22  37  ,cx16
02:44:22  38  ,cx18
02:44:22  39  --
02:44:22  40  ,crr4
02:44:22  41  ,crr6
02:44:22  42  ,crr8
02:44:22  43  ,crr10
02:44:22  44  ,crr12
02:44:22  45  ,crr14
02:44:22  46  ,crr16
02:44:22  47  ,crr18
02:44:22  48  --
02:44:22  49  ,hh
02:44:22  50  ,d
02:44:22  51  ,w
02:44:22  52  ,mpm
02:44:22  53  ,mph
02:44:22  54  FROM svm6122
02:44:22  55  ORDER BY ydate
02:44:22  56  /

Table created.

Elapsed: 00:00:00.36
02:44:23 SQL> 
02:44:23 SQL> -- rpt
02:44:23 SQL> 
02:44:23 SQL> SELECT
02:44:23   2  pair
02:44:23   3  ,trend
02:44:23   4  ,gatt
02:44:23   5  ,COUNT(pair)
02:44:23   6  ,AVG(g6)
02:44:23   7  FROM svm6142
02:44:23   8  GROUP BY pair,trend,gatt
02:44:23   9  ORDER BY pair,trend,gatt
02:44:23  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      6894 -.00194326
usd_chf 	-1 up	      3170 .003899842
usd_chf 	-1		22
usd_chf 	 1 nup	      6638 -.00162625
usd_chf 	 1 up	      2565 .003689727
usd_chf 	 1		50

6 rows selected.

Elapsed: 00:00:00.07
02:44:23 SQL> 
02:44:23 SQL> 
02:44:23 SQL> -- Derive NTILE based params:
02:44:23 SQL> 
02:44:23 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.20
02:44:23 SQL> CREATE TABLE svm6162 COMPRESS AS
02:44:23   2  SELECT
02:44:23   3  pair
02:44:23   4  ,ydate
02:44:23   5  ,prdate
02:44:23   6  ,clse
02:44:23   7  ,g6
02:44:23   8  ,gatt
02:44:23   9  ,gattn
02:44:23  10  ,trend
02:44:23  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:44:23  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:44:23  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:44:23  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:44:23  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:44:23  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:44:23  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:44:23  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:44:23  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:44:23  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:44:23  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:44:23  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:44:23  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:44:23  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:44:23  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:44:23  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:44:23  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:44:23  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:44:23  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:44:23  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:44:23  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:44:23  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:44:23  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:44:23  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:44:23  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:44:23  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:44:23  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:44:23  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:44:23  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:44:23  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:44:23  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:44:23  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:44:23  43  ,hh  att32
02:44:23  44  ,d   att33
02:44:23  45  ,w   att34
02:44:23  46  ,mpm att35
02:44:23  47  ,mph att36
02:44:23  48  ,trend att37
02:44:23  49  FROM svm6142
02:44:23  50  ORDER BY ydate
02:44:23  51  /

Table created.

Elapsed: 00:00:04.71
02:44:28 SQL> 
02:44:28 SQL> -- rpt
02:44:28 SQL> 
02:44:28 SQL> SELECT
02:44:28   2  pair
02:44:28   3  ,trend
02:44:28   4  ,gatt
02:44:28   5  ,COUNT(pair)
02:44:28   6  ,AVG(g6)
02:44:28   7  FROM svm6162
02:44:28   8  GROUP BY pair,trend,gatt
02:44:28   9  ORDER BY pair,trend,gatt
02:44:28  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      6894 -.00194326
usd_chf 	-1 up	      3170 .003899842
usd_chf 	-1		22
usd_chf 	 1 nup	      6638 -.00162625
usd_chf 	 1 up	      2565 .003689727
usd_chf 	 1		50

6 rows selected.

Elapsed: 00:00:00.03
02:44:28 SQL> 
02:44:28 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.10
02:44:28 SQL> CREATE TABLE modsrc COMPRESS AS
02:44:28   2  SELECT
02:44:28   3  pair
02:44:28   4  ,ydate
02:44:28   5  ,prdate
02:44:28   6  ,trend
02:44:28   7  ,g6
02:44:28   8  ,gatt
02:44:28   9  ,gattn
02:44:28  10  FROM svm6162
02:44:28  11  /

Table created.

Elapsed: 00:00:00.08
02:44:28 SQL> 
02:44:28 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.24
02:44:28 SQL> 
02:44:28 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
02:44:28 SQL> CREATE TABLE chf_ms610 COMPRESS AS
02:44:28   2  SELECT
02:44:28   3  ydate
02:44:28   4  ,trend chf_trend
02:44:28   5  ,g6    chf_g6
02:44:28   6  ,gatt  chf_gatt
02:44:28   7  ,gattn chf_gattn
02:44:28   8  FROM modsrc
02:44:28   9  /

Table created.

Elapsed: 00:00:00.07
02:44:28 SQL> 
02:44:28 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
02:44:28 SQL> 
02:44:28 SQL> -- I need a copy of the attributes:
02:44:28 SQL> 
02:44:28 SQL> 
02:44:28 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.09
02:44:29 SQL> CREATE TABLE chf_att COMPRESS AS
02:44:29   2  SELECT
02:44:29   3  ydate
02:44:29   4  ,att00 chf_att00
02:44:29   5  ,att01 chf_att01
02:44:29   6  ,att02 chf_att02
02:44:29   7  ,att03 chf_att03
02:44:29   8  ,att04 chf_att04
02:44:29   9  ,att05 chf_att05
02:44:29  10  ,att06 chf_att06
02:44:29  11  ,att07 chf_att07
02:44:29  12  ,att08 chf_att08
02:44:29  13  ,att09 chf_att09
02:44:29  14  ,att10 chf_att10
02:44:29  15  ,att11 chf_att11
02:44:29  16  ,att12 chf_att12
02:44:29  17  ,att13 chf_att13
02:44:29  18  ,att14 chf_att14
02:44:29  19  ,att15 chf_att15
02:44:29  20  ,att16 chf_att16
02:44:29  21  ,att17 chf_att17
02:44:29  22  ,att18 chf_att18
02:44:29  23  ,att19 chf_att19
02:44:29  24  ,att20 chf_att20
02:44:29  25  ,att21 chf_att21
02:44:29  26  ,att22 chf_att22
02:44:29  27  ,att23 chf_att23
02:44:29  28  ,att24 chf_att24
02:44:29  29  ,att25 chf_att25
02:44:29  30  ,att26 chf_att26
02:44:29  31  ,att27 chf_att27
02:44:29  32  ,att28 chf_att28
02:44:29  33  ,att29 chf_att29
02:44:29  34  ,att30 chf_att30
02:44:29  35  ,att31 chf_att31
02:44:29  36  ,att32 chf_att32
02:44:29  37  ,att33 chf_att33
02:44:29  38  ,att34 chf_att34
02:44:29  39  ,att35 chf_att35
02:44:29  40  ,att36 chf_att36
02:44:29  41  ,att37 chf_att37
02:44:29  42  FROM svm6162
02:44:29  43  /

Table created.

Elapsed: 00:00:00.21
02:44:29 SQL> 
02:44:29 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
02:44:29 SQL> 
02:44:29 SQL> -- rpt
02:44:29 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19339

Elapsed: 00:00:00.82
02:44:30 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19339

Elapsed: 00:00:00.00
02:44:30 SQL> 
02:44:30 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
