
SQL*Plus: Release 11.2.0.1.0 Production on Fri Dec 31 09:59:28 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

09:59:29 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
09:59:29 SQL> 09:59:29 SQL> --
09:59:29 SQL> -- eur610.sql
09:59:29 SQL> --
09:59:29 SQL> 
09:59:29 SQL> -- Creates views and tables for backtesting a forex SVM strategy
09:59:29 SQL> 
09:59:29 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.06
09:59:29 SQL> 
09:59:29 SQL> -- I created di5min here:
09:59:29 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
09:59:29 SQL> 
09:59:29 SQL> CREATE OR REPLACE VIEW svm6102 AS
09:59:29   2  SELECT
09:59:29   3  pair
09:59:29   4  ,ydate
09:59:29   5  ,prdate
09:59:29   6  ,rownum rnum -- acts as t in my time-series
09:59:29   7  ,clse
09:59:29   8  -- Derive a bunch of attributes from clse, the latest price:
09:59:29   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
09:59:29  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
09:59:29  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
09:59:29  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
09:59:29  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
09:59:29  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
09:59:29  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
09:59:29  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
09:59:29  17  --
09:59:29  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
09:59:29  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
09:59:29  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
09:59:29  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
09:59:29  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
09:59:29  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
09:59:29  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
09:59:29  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
09:59:29  26  --
09:59:29  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
09:59:29  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
09:59:29  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
09:59:29  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
09:59:29  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
09:59:29  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
09:59:29  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
09:59:29  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
09:59:29  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
09:59:29  36  FROM di5min WHERE pair LIKE'%eur%'
09:59:29  37  AND ydate > sysdate - 95
09:59:29  38  ORDER BY ydate
09:59:29  39  /

View created.

Elapsed: 00:00:00.23
09:59:29 SQL> 
09:59:29 SQL> -- rpt
09:59:29 SQL> 
09:59:29 SQL> SELECT
09:59:29   2  pair
09:59:29   3  ,COUNT(pair)
09:59:29   4  ,MIN(clse),MAX(clse)
09:59:29   5  ,MIN(avg6),MAX(avg6)
09:59:29   6  ,MIN(ydate),MAX(ydate)
09:59:29   7  FROM svm6102
09:59:29   8  GROUP BY pair
09:59:29   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19839    1.29735	   1.4273 1.29875103 1.42436233 2010-09-27 10:00:01 2010-12-31 09:55:00

Elapsed: 00:00:00.94
09:59:30 SQL> 
09:59:30 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
09:59:30 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.12
09:59:30 SQL> CREATE TABLE svm6122 COMPRESS AS
09:59:30   2  SELECT
09:59:30   3  pair
09:59:30   4  ,ydate
09:59:30   5  ,prdate
09:59:30   6  ,clse
09:59:30   7  -- g6 is important. I want to predict g6:
09:59:30   8  ,ld6 - clse g6
09:59:30   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
09:59:30  10  -- I want more attributes from the ones I derived above:
09:59:30  11  -- clse relation to moving-min
09:59:30  12  ,clse-min4  cm4
09:59:30  13  ,clse-min6  cm6
09:59:30  14  ,clse-min8  cm8
09:59:30  15  ,clse-min10 cm10
09:59:30  16  ,clse-min12 cm12
09:59:30  17  ,clse-min14 cm14
09:59:30  18  ,clse-min16 cm16
09:59:30  19  ,clse-min18 cm18
09:59:30  20  -- clse relation to moving-avg
09:59:30  21  ,clse-avg4  ca4
09:59:30  22  ,clse-avg6  ca6
09:59:30  23  ,clse-avg8  ca8
09:59:30  24  ,clse-avg10 ca10
09:59:30  25  ,clse-avg12 ca12
09:59:30  26  ,clse-avg14 ca14
09:59:30  27  ,clse-avg16 ca16
09:59:30  28  ,clse-avg18 ca18
09:59:30  29  -- clse relation to moving-max
09:59:30  30  ,clse-max4  cx4
09:59:30  31  ,clse-max6  cx6
09:59:30  32  ,clse-max8  cx8
09:59:30  33  ,clse-max10 cx10
09:59:30  34  ,clse-max12 cx12
09:59:30  35  ,clse-max14 cx14
09:59:30  36  ,clse-max16 cx16
09:59:30  37  ,clse-max18 cx18
09:59:30  38  -- Derive more attributes.
09:59:30  39  -- I want to use CORR() here to help SVM see the shape of the series.
09:59:30  40  -- But COVAR_POP is more stable:
09:59:30  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
09:59:30  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
09:59:30  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
09:59:30  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
09:59:30  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
09:59:30  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
09:59:30  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
09:59:30  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
09:59:30  49  -- Derive date related attributes:
09:59:30  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
09:59:30  51  ,0+TO_CHAR(ydate,'D')d
09:59:30  52  ,0+TO_CHAR(ydate,'W')w
09:59:30  53  -- mpm stands for minutes-past-midnight:
09:59:30  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
09:59:30  55  -- mph stands for minutes-past-hour:
09:59:30  56  ,0+TO_CHAR(ydate,'MI')mph
09:59:30  57  FROM svm6102
09:59:30  58  ORDER BY ydate
09:59:30  59  /

Table created.

Elapsed: 00:00:02.46
09:59:32 SQL> 
09:59:32 SQL> -- rpt
09:59:32 SQL> 
09:59:32 SQL> SELECT
09:59:32   2  pair
09:59:32   3  ,COUNT(pair)
09:59:32   4  ,MIN(clse),MAX(clse)
09:59:32   5  ,MIN(ydate),MAX(ydate)
09:59:32   6  FROM svm6122
09:59:32   7  GROUP BY pair
09:59:32   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19839    1.29735	   1.4273 2010-09-27 10:00:01 2010-12-31 09:55:00

Elapsed: 00:00:00.04
09:59:32 SQL> 
09:59:32 SQL> -- Prepare for derivation of NTILE based params:
09:59:32 SQL> 
09:59:32 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.18
09:59:33 SQL> CREATE TABLE svm6142 COMPRESS AS
09:59:33   2  SELECT
09:59:33   3  pair
09:59:33   4  ,ydate
09:59:33   5  ,prdate
09:59:33   6  ,clse
09:59:33   7  ,g6
09:59:33   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
09:59:33   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
09:59:33  10  ,CASE WHEN trend IS NULL THEN 1
09:59:33  11  	    WHEN trend =0      THEN 1
09:59:33  12  	    ELSE trend END trend
09:59:33  13  ,cm4
09:59:33  14  ,cm6
09:59:33  15  ,cm8
09:59:33  16  ,cm10
09:59:33  17  ,cm12
09:59:33  18  ,cm14
09:59:33  19  ,cm16
09:59:33  20  ,cm18
09:59:33  21  --
09:59:33  22  ,ca4
09:59:33  23  ,ca6
09:59:33  24  ,ca8
09:59:33  25  ,ca10
09:59:33  26  ,ca12
09:59:33  27  ,ca14
09:59:33  28  ,ca16
09:59:33  29  ,ca18
09:59:33  30  --
09:59:33  31  ,cx4
09:59:33  32  ,cx6
09:59:33  33  ,cx8
09:59:33  34  ,cx10
09:59:33  35  ,cx12
09:59:33  36  ,cx14
09:59:33  37  ,cx16
09:59:33  38  ,cx18
09:59:33  39  --
09:59:33  40  ,crr4
09:59:33  41  ,crr6
09:59:33  42  ,crr8
09:59:33  43  ,crr10
09:59:33  44  ,crr12
09:59:33  45  ,crr14
09:59:33  46  ,crr16
09:59:33  47  ,crr18
09:59:33  48  --
09:59:33  49  ,hh
09:59:33  50  ,d
09:59:33  51  ,w
09:59:33  52  ,mpm
09:59:33  53  ,mph
09:59:33  54  FROM svm6122
09:59:33  55  ORDER BY ydate
09:59:33  56  /

Table created.

Elapsed: 00:00:00.39
09:59:33 SQL> 
09:59:33 SQL> -- rpt
09:59:33 SQL> 
09:59:33 SQL> SELECT
09:59:33   2  pair
09:59:33   3  ,trend
09:59:33   4  ,gatt
09:59:33   5  ,COUNT(pair)
09:59:33   6  ,AVG(g6)
09:59:33   7  FROM svm6142
09:59:33   8  GROUP BY pair,trend,gatt
09:59:33   9  ORDER BY pair,trend,gatt
09:59:33  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6059 -.00310329
eur_usd 	-1 up	      3718  .00450781
eur_usd 	 1 nup	      6074 -.00307611
eur_usd 	 1 up	      3916 .005033357
eur_usd 	 1		72

Elapsed: 00:00:00.07
09:59:33 SQL> 
09:59:33 SQL> 
09:59:33 SQL> -- Derive NTILE based params:
09:59:33 SQL> 
09:59:33 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.57
09:59:34 SQL> CREATE TABLE svm6162 COMPRESS AS
09:59:34   2  SELECT
09:59:34   3  pair
09:59:34   4  ,ydate
09:59:34   5  ,prdate
09:59:34   6  ,clse
09:59:34   7  ,g6
09:59:34   8  ,gatt
09:59:34   9  ,gattn
09:59:34  10  ,trend
09:59:34  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
09:59:34  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
09:59:34  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
09:59:34  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
09:59:34  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
09:59:34  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
09:59:34  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
09:59:34  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
09:59:34  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
09:59:34  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
09:59:34  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
09:59:34  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
09:59:34  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
09:59:34  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
09:59:34  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
09:59:34  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
09:59:34  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
09:59:34  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
09:59:34  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
09:59:34  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
09:59:34  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
09:59:34  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
09:59:34  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
09:59:34  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
09:59:34  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
09:59:34  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
09:59:34  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
09:59:34  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
09:59:34  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
09:59:34  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
09:59:34  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
09:59:34  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
09:59:34  43  ,hh  att32
09:59:34  44  ,d   att33
09:59:34  45  ,w   att34
09:59:34  46  ,mpm att35
09:59:34  47  ,mph att36
09:59:34  48  ,trend att37
09:59:34  49  FROM svm6142
09:59:34  50  ORDER BY ydate
09:59:34  51  /

Table created.

Elapsed: 00:00:04.76
09:59:38 SQL> 
09:59:38 SQL> -- rpt
09:59:38 SQL> 
09:59:38 SQL> SELECT
09:59:38   2  pair
09:59:38   3  ,trend
09:59:38   4  ,gatt
09:59:38   5  ,COUNT(pair)
09:59:38   6  ,AVG(g6)
09:59:38   7  FROM svm6162
09:59:38   8  GROUP BY pair,trend,gatt
09:59:38   9  ORDER BY pair,trend,gatt
09:59:38  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6059 -.00310329
eur_usd 	-1 up	      3718  .00450781
eur_usd 	 1 nup	      6074 -.00307611
eur_usd 	 1 up	      3916 .005033357
eur_usd 	 1		72

Elapsed: 00:00:00.04
09:59:38 SQL> 
09:59:38 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
09:59:39 SQL> CREATE TABLE modsrc COMPRESS AS
09:59:39   2  SELECT
09:59:39   3  pair
09:59:39   4  ,ydate
09:59:39   5  ,prdate
09:59:39   6  ,trend
09:59:39   7  ,g6
09:59:39   8  ,gatt
09:59:39   9  ,gattn
09:59:39  10  FROM svm6162
09:59:39  11  /

Table created.

Elapsed: 00:00:00.09
09:59:39 SQL> 
09:59:39 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
09:59:39 SQL> 
09:59:39 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
09:59:39 SQL> CREATE TABLE eur_ms610 COMPRESS AS
09:59:39   2  SELECT
09:59:39   3  ydate
09:59:39   4  ,trend eur_trend
09:59:39   5  ,g6    eur_g6
09:59:39   6  ,gatt  eur_gatt
09:59:39   7  ,gattn eur_gattn
09:59:39   8  FROM modsrc
09:59:39   9  /

Table created.

Elapsed: 00:00:00.10
09:59:39 SQL> 
09:59:39 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
09:59:39 SQL> 
09:59:39 SQL> -- I need a copy of the attributes:
09:59:39 SQL> 
09:59:39 SQL> 
09:59:39 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.05
09:59:39 SQL> CREATE TABLE eur_att COMPRESS AS
09:59:39   2  SELECT
09:59:39   3  ydate
09:59:39   4  ,att00 eur_att00
09:59:39   5  ,att01 eur_att01
09:59:39   6  ,att02 eur_att02
09:59:39   7  ,att03 eur_att03
09:59:39   8  ,att04 eur_att04
09:59:39   9  ,att05 eur_att05
09:59:39  10  ,att06 eur_att06
09:59:39  11  ,att07 eur_att07
09:59:39  12  ,att08 eur_att08
09:59:39  13  ,att09 eur_att09
09:59:39  14  ,att10 eur_att10
09:59:39  15  ,att11 eur_att11
09:59:39  16  ,att12 eur_att12
09:59:39  17  ,att13 eur_att13
09:59:39  18  ,att14 eur_att14
09:59:39  19  ,att15 eur_att15
09:59:39  20  ,att16 eur_att16
09:59:39  21  ,att17 eur_att17
09:59:39  22  ,att18 eur_att18
09:59:39  23  ,att19 eur_att19
09:59:39  24  ,att20 eur_att20
09:59:39  25  ,att21 eur_att21
09:59:39  26  ,att22 eur_att22
09:59:39  27  ,att23 eur_att23
09:59:39  28  ,att24 eur_att24
09:59:39  29  ,att25 eur_att25
09:59:39  30  ,att26 eur_att26
09:59:39  31  ,att27 eur_att27
09:59:39  32  ,att28 eur_att28
09:59:39  33  ,att29 eur_att29
09:59:39  34  ,att30 eur_att30
09:59:39  35  ,att31 eur_att31
09:59:39  36  ,att32 eur_att32
09:59:39  37  ,att33 eur_att33
09:59:39  38  ,att34 eur_att34
09:59:39  39  ,att35 eur_att35
09:59:39  40  ,att36 eur_att36
09:59:39  41  ,att37 eur_att37
09:59:39  42  FROM svm6162
09:59:39  43  /

Table created.

Elapsed: 00:00:00.19
09:59:39 SQL> 
09:59:39 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
09:59:40 SQL> 
09:59:40 SQL> -- rpt
09:59:40 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19839

Elapsed: 00:00:00.90
09:59:41 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19839

Elapsed: 00:00:00.00
09:59:41 SQL> 
09:59:41 SQL> --
09:59:41 SQL> -- aud610.sql
09:59:41 SQL> --
09:59:41 SQL> 
09:59:41 SQL> -- Creates views and tables for backtesting a forex SVM strategy
09:59:41 SQL> 
09:59:41 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.54
09:59:41 SQL> 
09:59:41 SQL> -- I created di5min here:
09:59:41 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
09:59:41 SQL> 
09:59:41 SQL> CREATE OR REPLACE VIEW svm6102 AS
09:59:41   2  SELECT
09:59:41   3  pair
09:59:41   4  ,ydate
09:59:41   5  ,prdate
09:59:41   6  ,rownum rnum -- acts as t in my time-series
09:59:41   7  ,clse
09:59:41   8  -- Derive a bunch of attributes from clse, the latest price:
09:59:41   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
09:59:41  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
09:59:41  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
09:59:41  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
09:59:41  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
09:59:41  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
09:59:41  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
09:59:41  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
09:59:41  17  --
09:59:41  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
09:59:41  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
09:59:41  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
09:59:41  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
09:59:41  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
09:59:41  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
09:59:41  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
09:59:41  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
09:59:41  26  --
09:59:41  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
09:59:41  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
09:59:41  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
09:59:41  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
09:59:41  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
09:59:41  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
09:59:41  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
09:59:41  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
09:59:41  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
09:59:41  36  FROM di5min WHERE pair LIKE'%aud%'
09:59:41  37  AND ydate > sysdate - 95
09:59:41  38  ORDER BY ydate
09:59:41  39  /

View created.

Elapsed: 00:00:00.06
09:59:41 SQL> 
09:59:41 SQL> -- rpt
09:59:41 SQL> 
09:59:41 SQL> SELECT
09:59:41   2  pair
09:59:41   3  ,COUNT(pair)
09:59:41   4  ,MIN(clse),MAX(clse)
09:59:41   5  ,MIN(avg6),MAX(avg6)
09:59:41   6  ,MIN(ydate),MAX(ydate)
09:59:41   7  FROM svm6102
09:59:41   8  GROUP BY pair
09:59:41   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19836	.95405	1.0195625 .957141438 1.01819366 2010-09-27 10:00:01 2010-12-31 09:55:00

Elapsed: 00:00:00.87
09:59:42 SQL> 
09:59:42 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
09:59:42 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.23
09:59:42 SQL> CREATE TABLE svm6122 COMPRESS AS
09:59:42   2  SELECT
09:59:42   3  pair
09:59:42   4  ,ydate
09:59:42   5  ,prdate
09:59:42   6  ,clse
09:59:42   7  -- g6 is important. I want to predict g6:
09:59:42   8  ,ld6 - clse g6
09:59:42   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
09:59:42  10  -- I want more attributes from the ones I derived above:
09:59:42  11  -- clse relation to moving-min
09:59:42  12  ,clse-min4  cm4
09:59:42  13  ,clse-min6  cm6
09:59:42  14  ,clse-min8  cm8
09:59:42  15  ,clse-min10 cm10
09:59:42  16  ,clse-min12 cm12
09:59:42  17  ,clse-min14 cm14
09:59:42  18  ,clse-min16 cm16
09:59:42  19  ,clse-min18 cm18
09:59:42  20  -- clse relation to moving-avg
09:59:42  21  ,clse-avg4  ca4
09:59:42  22  ,clse-avg6  ca6
09:59:42  23  ,clse-avg8  ca8
09:59:42  24  ,clse-avg10 ca10
09:59:42  25  ,clse-avg12 ca12
09:59:42  26  ,clse-avg14 ca14
09:59:42  27  ,clse-avg16 ca16
09:59:42  28  ,clse-avg18 ca18
09:59:42  29  -- clse relation to moving-max
09:59:42  30  ,clse-max4  cx4
09:59:42  31  ,clse-max6  cx6
09:59:42  32  ,clse-max8  cx8
09:59:42  33  ,clse-max10 cx10
09:59:42  34  ,clse-max12 cx12
09:59:42  35  ,clse-max14 cx14
09:59:42  36  ,clse-max16 cx16
09:59:42  37  ,clse-max18 cx18
09:59:42  38  -- Derive more attributes.
09:59:42  39  -- I want to use CORR() here to help SVM see the shape of the series.
09:59:42  40  -- But COVAR_POP is more stable:
09:59:42  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
09:59:42  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
09:59:42  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
09:59:42  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
09:59:42  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
09:59:42  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
09:59:42  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
09:59:42  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
09:59:42  49  -- Derive date related attributes:
09:59:42  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
09:59:42  51  ,0+TO_CHAR(ydate,'D')d
09:59:42  52  ,0+TO_CHAR(ydate,'W')w
09:59:42  53  -- mpm stands for minutes-past-midnight:
09:59:42  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
09:59:42  55  -- mph stands for minutes-past-hour:
09:59:42  56  ,0+TO_CHAR(ydate,'MI')mph
09:59:42  57  FROM svm6102
09:59:42  58  ORDER BY ydate
09:59:42  59  /

Table created.

Elapsed: 00:00:02.05
09:59:45 SQL> 
09:59:45 SQL> -- rpt
09:59:45 SQL> 
09:59:45 SQL> SELECT
09:59:45   2  pair
09:59:45   3  ,COUNT(pair)
09:59:45   4  ,MIN(clse),MAX(clse)
09:59:45   5  ,MIN(ydate),MAX(ydate)
09:59:45   6  FROM svm6122
09:59:45   7  GROUP BY pair
09:59:45   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19836	.95405	1.0195625 2010-09-27 10:00:01 2010-12-31 09:55:00

Elapsed: 00:00:00.08
09:59:45 SQL> 
09:59:45 SQL> -- Prepare for derivation of NTILE based params:
09:59:45 SQL> 
09:59:45 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.24
09:59:45 SQL> CREATE TABLE svm6142 COMPRESS AS
09:59:45   2  SELECT
09:59:45   3  pair
09:59:45   4  ,ydate
09:59:45   5  ,prdate
09:59:45   6  ,clse
09:59:45   7  ,g6
09:59:45   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
09:59:45   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
09:59:45  10  ,CASE WHEN trend IS NULL THEN 1
09:59:45  11  	    WHEN trend =0      THEN 1
09:59:45  12  	    ELSE trend END trend
09:59:45  13  ,cm4
09:59:45  14  ,cm6
09:59:45  15  ,cm8
09:59:45  16  ,cm10
09:59:45  17  ,cm12
09:59:45  18  ,cm14
09:59:45  19  ,cm16
09:59:45  20  ,cm18
09:59:45  21  --
09:59:45  22  ,ca4
09:59:45  23  ,ca6
09:59:45  24  ,ca8
09:59:45  25  ,ca10
09:59:45  26  ,ca12
09:59:45  27  ,ca14
09:59:45  28  ,ca16
09:59:45  29  ,ca18
09:59:45  30  --
09:59:45  31  ,cx4
09:59:45  32  ,cx6
09:59:45  33  ,cx8
09:59:45  34  ,cx10
09:59:45  35  ,cx12
09:59:45  36  ,cx14
09:59:45  37  ,cx16
09:59:45  38  ,cx18
09:59:45  39  --
09:59:45  40  ,crr4
09:59:45  41  ,crr6
09:59:45  42  ,crr8
09:59:45  43  ,crr10
09:59:45  44  ,crr12
09:59:45  45  ,crr14
09:59:45  46  ,crr16
09:59:45  47  ,crr18
09:59:45  48  --
09:59:45  49  ,hh
09:59:45  50  ,d
09:59:45  51  ,w
09:59:45  52  ,mpm
09:59:45  53  ,mph
09:59:45  54  FROM svm6122
09:59:45  55  ORDER BY ydate
09:59:45  56  /

Table created.

Elapsed: 00:00:00.38
09:59:45 SQL> 
09:59:45 SQL> -- rpt
09:59:45 SQL> 
09:59:45 SQL> SELECT
09:59:45   2  pair
09:59:45   3  ,trend
09:59:45   4  ,gatt
09:59:45   5  ,COUNT(pair)
09:59:45   6  ,AVG(g6)
09:59:45   7  FROM svm6142
09:59:45   8  GROUP BY pair,trend,gatt
09:59:45   9  ORDER BY pair,trend,gatt
09:59:45  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5253  -.0021268
aud_usd 	-1 up	      3857  .00373003
aud_usd 	-1		17
aud_usd 	 1 nup	      6863 -.00209006
aud_usd 	 1 up	      3791 .004020044
aud_usd 	 1		55

6 rows selected.

Elapsed: 00:00:00.10
09:59:45 SQL> 
09:59:45 SQL> 
09:59:45 SQL> -- Derive NTILE based params:
09:59:45 SQL> 
09:59:45 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.20
09:59:46 SQL> CREATE TABLE svm6162 COMPRESS AS
09:59:46   2  SELECT
09:59:46   3  pair
09:59:46   4  ,ydate
09:59:46   5  ,prdate
09:59:46   6  ,clse
09:59:46   7  ,g6
09:59:46   8  ,gatt
09:59:46   9  ,gattn
09:59:46  10  ,trend
09:59:46  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
09:59:46  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
09:59:46  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
09:59:46  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
09:59:46  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
09:59:46  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
09:59:46  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
09:59:46  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
09:59:46  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
09:59:46  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
09:59:46  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
09:59:46  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
09:59:46  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
09:59:46  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
09:59:46  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
09:59:46  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
09:59:46  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
09:59:46  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
09:59:46  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
09:59:46  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
09:59:46  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
09:59:46  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
09:59:46  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
09:59:46  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
09:59:46  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
09:59:46  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
09:59:46  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
09:59:46  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
09:59:46  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
09:59:46  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
09:59:46  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
09:59:46  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
09:59:46  43  ,hh  att32
09:59:46  44  ,d   att33
09:59:46  45  ,w   att34
09:59:46  46  ,mpm att35
09:59:46  47  ,mph att36
09:59:46  48  ,trend att37
09:59:46  49  FROM svm6142
09:59:46  50  ORDER BY ydate
09:59:46  51  /

Table created.

Elapsed: 00:00:05.29
09:59:51 SQL> 
09:59:51 SQL> -- rpt
09:59:51 SQL> 
09:59:51 SQL> SELECT
09:59:51   2  pair
09:59:51   3  ,trend
09:59:51   4  ,gatt
09:59:51   5  ,COUNT(pair)
09:59:51   6  ,AVG(g6)
09:59:51   7  FROM svm6162
09:59:51   8  GROUP BY pair,trend,gatt
09:59:51   9  ORDER BY pair,trend,gatt
09:59:51  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5253  -.0021268
aud_usd 	-1 up	      3857  .00373003
aud_usd 	-1		17
aud_usd 	 1 nup	      6863 -.00209006
aud_usd 	 1 up	      3791 .004020044
aud_usd 	 1		55

6 rows selected.

Elapsed: 00:00:00.05
09:59:51 SQL> 
09:59:51 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.24
09:59:51 SQL> CREATE TABLE modsrc COMPRESS AS
09:59:51   2  SELECT
09:59:51   3  pair
09:59:51   4  ,ydate
09:59:51   5  ,prdate
09:59:51   6  ,trend
09:59:51   7  ,g6
09:59:51   8  ,gatt
09:59:51   9  ,gattn
09:59:51  10  FROM svm6162
09:59:51  11  /

Table created.

Elapsed: 00:00:00.07
09:59:51 SQL> 
09:59:51 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.32
09:59:52 SQL> 
09:59:52 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
09:59:52 SQL> CREATE TABLE aud_ms610 COMPRESS AS
09:59:52   2  SELECT
09:59:52   3  ydate
09:59:52   4  ,trend aud_trend
09:59:52   5  ,g6    aud_g6
09:59:52   6  ,gatt  aud_gatt
09:59:52   7  ,gattn aud_gattn
09:59:52   8  FROM modsrc
09:59:52   9  /

Table created.

Elapsed: 00:00:00.05
09:59:52 SQL> 
09:59:52 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
09:59:52 SQL> 
09:59:52 SQL> -- I need a copy of the attributes:
09:59:52 SQL> 
09:59:52 SQL> 
09:59:52 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.04
09:59:52 SQL> CREATE TABLE aud_att COMPRESS AS
09:59:52   2  SELECT
09:59:52   3  ydate
09:59:52   4  ,att00 aud_att00
09:59:52   5  ,att01 aud_att01
09:59:52   6  ,att02 aud_att02
09:59:52   7  ,att03 aud_att03
09:59:52   8  ,att04 aud_att04
09:59:52   9  ,att05 aud_att05
09:59:52  10  ,att06 aud_att06
09:59:52  11  ,att07 aud_att07
09:59:52  12  ,att08 aud_att08
09:59:52  13  ,att09 aud_att09
09:59:52  14  ,att10 aud_att10
09:59:52  15  ,att11 aud_att11
09:59:52  16  ,att12 aud_att12
09:59:52  17  ,att13 aud_att13
09:59:52  18  ,att14 aud_att14
09:59:52  19  ,att15 aud_att15
09:59:52  20  ,att16 aud_att16
09:59:52  21  ,att17 aud_att17
09:59:52  22  ,att18 aud_att18
09:59:52  23  ,att19 aud_att19
09:59:52  24  ,att20 aud_att20
09:59:52  25  ,att21 aud_att21
09:59:52  26  ,att22 aud_att22
09:59:52  27  ,att23 aud_att23
09:59:52  28  ,att24 aud_att24
09:59:52  29  ,att25 aud_att25
09:59:52  30  ,att26 aud_att26
09:59:52  31  ,att27 aud_att27
09:59:52  32  ,att28 aud_att28
09:59:52  33  ,att29 aud_att29
09:59:52  34  ,att30 aud_att30
09:59:52  35  ,att31 aud_att31
09:59:52  36  ,att32 aud_att32
09:59:52  37  ,att33 aud_att33
09:59:52  38  ,att34 aud_att34
09:59:52  39  ,att35 aud_att35
09:59:52  40  ,att36 aud_att36
09:59:52  41  ,att37 aud_att37
09:59:52  42  FROM svm6162
09:59:52  43  /

Table created.

Elapsed: 00:00:00.19
09:59:52 SQL> 
09:59:52 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
09:59:52 SQL> 
09:59:52 SQL> -- rpt
09:59:52 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19836

Elapsed: 00:00:00.85
09:59:53 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19836

Elapsed: 00:00:00.01
09:59:53 SQL> 
09:59:53 SQL> --
09:59:53 SQL> -- gbp610.sql
09:59:53 SQL> --
09:59:53 SQL> 
09:59:53 SQL> -- Creates views and tables for backtesting a forex SVM strategy
09:59:53 SQL> 
09:59:53 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
09:59:54 SQL> 
09:59:54 SQL> -- I created di5min here:
09:59:54 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
09:59:54 SQL> 
09:59:54 SQL> CREATE OR REPLACE VIEW svm6102 AS
09:59:54   2  SELECT
09:59:54   3  pair
09:59:54   4  ,ydate
09:59:54   5  ,prdate
09:59:54   6  ,rownum rnum -- acts as t in my time-series
09:59:54   7  ,clse
09:59:54   8  -- Derive a bunch of attributes from clse, the latest price:
09:59:54   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
09:59:54  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
09:59:54  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
09:59:54  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
09:59:54  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
09:59:54  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
09:59:54  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
09:59:54  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
09:59:54  17  --
09:59:54  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
09:59:54  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
09:59:54  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
09:59:54  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
09:59:54  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
09:59:54  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
09:59:54  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
09:59:54  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
09:59:54  26  --
09:59:54  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
09:59:54  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
09:59:54  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
09:59:54  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
09:59:54  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
09:59:54  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
09:59:54  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
09:59:54  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
09:59:54  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
09:59:54  36  FROM di5min WHERE pair LIKE'%gbp%'
09:59:54  37  AND ydate > sysdate - 95
09:59:54  38  ORDER BY ydate
09:59:54  39  /

View created.

Elapsed: 00:00:00.04
09:59:54 SQL> 
09:59:54 SQL> -- rpt
09:59:54 SQL> 
09:59:54 SQL> SELECT
09:59:54   2  pair
09:59:54   3  ,COUNT(pair)
09:59:54   4  ,MIN(clse),MAX(clse)
09:59:54   5  ,MIN(avg6),MAX(avg6)
09:59:54   6  ,MIN(ydate),MAX(ydate)
09:59:54   7  FROM svm6102
09:59:54   8  GROUP BY pair
09:59:54   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19838   1.535325	   1.6295 1.53696747 1.62716986 2010-09-27 10:00:01 2010-12-31 09:55:00

Elapsed: 00:00:00.90
09:59:55 SQL> 
09:59:55 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
09:59:55 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.29
09:59:55 SQL> CREATE TABLE svm6122 COMPRESS AS
09:59:55   2  SELECT
09:59:55   3  pair
09:59:55   4  ,ydate
09:59:55   5  ,prdate
09:59:55   6  ,clse
09:59:55   7  -- g6 is important. I want to predict g6:
09:59:55   8  ,ld6 - clse g6
09:59:55   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
09:59:55  10  -- I want more attributes from the ones I derived above:
09:59:55  11  -- clse relation to moving-min
09:59:55  12  ,clse-min4  cm4
09:59:55  13  ,clse-min6  cm6
09:59:55  14  ,clse-min8  cm8
09:59:55  15  ,clse-min10 cm10
09:59:55  16  ,clse-min12 cm12
09:59:55  17  ,clse-min14 cm14
09:59:55  18  ,clse-min16 cm16
09:59:55  19  ,clse-min18 cm18
09:59:55  20  -- clse relation to moving-avg
09:59:55  21  ,clse-avg4  ca4
09:59:55  22  ,clse-avg6  ca6
09:59:55  23  ,clse-avg8  ca8
09:59:55  24  ,clse-avg10 ca10
09:59:55  25  ,clse-avg12 ca12
09:59:55  26  ,clse-avg14 ca14
09:59:55  27  ,clse-avg16 ca16
09:59:55  28  ,clse-avg18 ca18
09:59:55  29  -- clse relation to moving-max
09:59:55  30  ,clse-max4  cx4
09:59:55  31  ,clse-max6  cx6
09:59:55  32  ,clse-max8  cx8
09:59:55  33  ,clse-max10 cx10
09:59:55  34  ,clse-max12 cx12
09:59:55  35  ,clse-max14 cx14
09:59:55  36  ,clse-max16 cx16
09:59:55  37  ,clse-max18 cx18
09:59:55  38  -- Derive more attributes.
09:59:55  39  -- I want to use CORR() here to help SVM see the shape of the series.
09:59:55  40  -- But COVAR_POP is more stable:
09:59:55  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
09:59:55  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
09:59:55  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
09:59:55  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
09:59:55  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
09:59:55  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
09:59:55  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
09:59:55  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
09:59:55  49  -- Derive date related attributes:
09:59:55  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
09:59:55  51  ,0+TO_CHAR(ydate,'D')d
09:59:55  52  ,0+TO_CHAR(ydate,'W')w
09:59:55  53  -- mpm stands for minutes-past-midnight:
09:59:55  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
09:59:55  55  -- mph stands for minutes-past-hour:
09:59:55  56  ,0+TO_CHAR(ydate,'MI')mph
09:59:55  57  FROM svm6102
09:59:55  58  ORDER BY ydate
09:59:55  59  /

Table created.

Elapsed: 00:00:02.07
09:59:57 SQL> 
09:59:57 SQL> -- rpt
09:59:57 SQL> 
09:59:57 SQL> SELECT
09:59:57   2  pair
09:59:57   3  ,COUNT(pair)
09:59:57   4  ,MIN(clse),MAX(clse)
09:59:57   5  ,MIN(ydate),MAX(ydate)
09:59:57   6  FROM svm6122
09:59:57   7  GROUP BY pair
09:59:57   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19838   1.535325	   1.6295 2010-09-27 10:00:01 2010-12-31 09:55:00

Elapsed: 00:00:00.08
09:59:57 SQL> 
09:59:57 SQL> -- Prepare for derivation of NTILE based params:
09:59:57 SQL> 
09:59:57 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.25
09:59:57 SQL> CREATE TABLE svm6142 COMPRESS AS
09:59:57   2  SELECT
09:59:57   3  pair
09:59:57   4  ,ydate
09:59:57   5  ,prdate
09:59:57   6  ,clse
09:59:57   7  ,g6
09:59:57   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
09:59:57   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
09:59:57  10  ,CASE WHEN trend IS NULL THEN 1
09:59:57  11  	    WHEN trend =0      THEN 1
09:59:57  12  	    ELSE trend END trend
09:59:57  13  ,cm4
09:59:57  14  ,cm6
09:59:57  15  ,cm8
09:59:57  16  ,cm10
09:59:57  17  ,cm12
09:59:57  18  ,cm14
09:59:57  19  ,cm16
09:59:57  20  ,cm18
09:59:57  21  --
09:59:57  22  ,ca4
09:59:57  23  ,ca6
09:59:57  24  ,ca8
09:59:57  25  ,ca10
09:59:57  26  ,ca12
09:59:57  27  ,ca14
09:59:57  28  ,ca16
09:59:57  29  ,ca18
09:59:57  30  --
09:59:57  31  ,cx4
09:59:57  32  ,cx6
09:59:57  33  ,cx8
09:59:57  34  ,cx10
09:59:57  35  ,cx12
09:59:57  36  ,cx14
09:59:57  37  ,cx16
09:59:57  38  ,cx18
09:59:57  39  --
09:59:57  40  ,crr4
09:59:57  41  ,crr6
09:59:57  42  ,crr8
09:59:57  43  ,crr10
09:59:57  44  ,crr12
09:59:57  45  ,crr14
09:59:57  46  ,crr16
09:59:57  47  ,crr18
09:59:57  48  --
09:59:57  49  ,hh
09:59:57  50  ,d
09:59:57  51  ,w
09:59:57  52  ,mpm
09:59:57  53  ,mph
09:59:57  54  FROM svm6122
09:59:57  55  ORDER BY ydate
09:59:57  56  /

Table created.

Elapsed: 00:00:00.36
09:59:58 SQL> 
09:59:58 SQL> -- rpt
09:59:58 SQL> 
09:59:58 SQL> SELECT
09:59:58   2  pair
09:59:58   3  ,trend
09:59:58   4  ,gatt
09:59:58   5  ,COUNT(pair)
09:59:58   6  ,AVG(g6)
09:59:58   7  FROM svm6142
09:59:58   8  GROUP BY pair,trend,gatt
09:59:58   9  ORDER BY pair,trend,gatt
09:59:58  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6350  -.0026233
gbp_usd 	-1 up	      3619 .004281245
gbp_usd 	 1 nup	      6281  -.0026818
gbp_usd 	 1 up	      3516 .004358607
gbp_usd 	 1		72

Elapsed: 00:00:00.11
09:59:58 SQL> 
09:59:58 SQL> 
09:59:58 SQL> -- Derive NTILE based params:
09:59:58 SQL> 
09:59:58 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.18
09:59:58 SQL> CREATE TABLE svm6162 COMPRESS AS
09:59:58   2  SELECT
09:59:58   3  pair
09:59:58   4  ,ydate
09:59:58   5  ,prdate
09:59:58   6  ,clse
09:59:58   7  ,g6
09:59:58   8  ,gatt
09:59:58   9  ,gattn
09:59:58  10  ,trend
09:59:58  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
09:59:58  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
09:59:58  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
09:59:58  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
09:59:58  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
09:59:58  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
09:59:58  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
09:59:58  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
09:59:58  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
09:59:58  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
09:59:58  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
09:59:58  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
09:59:58  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
09:59:58  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
09:59:58  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
09:59:58  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
09:59:58  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
09:59:58  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
09:59:58  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
09:59:58  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
09:59:58  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
09:59:58  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
09:59:58  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
09:59:58  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
09:59:58  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
09:59:58  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
09:59:58  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
09:59:58  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
09:59:58  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
09:59:58  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
09:59:58  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
09:59:58  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
09:59:58  43  ,hh  att32
09:59:58  44  ,d   att33
09:59:58  45  ,w   att34
09:59:58  46  ,mpm att35
09:59:58  47  ,mph att36
09:59:58  48  ,trend att37
09:59:58  49  FROM svm6142
09:59:58  50  ORDER BY ydate
09:59:58  51  /

Table created.

Elapsed: 00:00:04.86
10:00:03 SQL> 
10:00:03 SQL> -- rpt
10:00:03 SQL> 
10:00:03 SQL> SELECT
10:00:03   2  pair
10:00:03   3  ,trend
10:00:03   4  ,gatt
10:00:03   5  ,COUNT(pair)
10:00:03   6  ,AVG(g6)
10:00:03   7  FROM svm6162
10:00:03   8  GROUP BY pair,trend,gatt
10:00:03   9  ORDER BY pair,trend,gatt
10:00:03  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6350  -.0026233
gbp_usd 	-1 up	      3619 .004281245
gbp_usd 	 1 nup	      6281  -.0026818
gbp_usd 	 1 up	      3516 .004358607
gbp_usd 	 1		72

Elapsed: 00:00:00.02
10:00:03 SQL> 
10:00:03 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
10:00:03 SQL> CREATE TABLE modsrc COMPRESS AS
10:00:03   2  SELECT
10:00:03   3  pair
10:00:03   4  ,ydate
10:00:03   5  ,prdate
10:00:03   6  ,trend
10:00:03   7  ,g6
10:00:03   8  ,gatt
10:00:03   9  ,gattn
10:00:03  10  FROM svm6162
10:00:03  11  /

Table created.

Elapsed: 00:00:00.08
10:00:03 SQL> 
10:00:03 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
10:00:03 SQL> 
10:00:03 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
10:00:03 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
10:00:03   2  SELECT
10:00:03   3  ydate
10:00:03   4  ,trend gbp_trend
10:00:03   5  ,g6    gbp_g6
10:00:03   6  ,gatt  gbp_gatt
10:00:03   7  ,gattn gbp_gattn
10:00:03   8  FROM modsrc
10:00:03   9  /

Table created.

Elapsed: 00:00:00.08
10:00:03 SQL> 
10:00:03 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
10:00:04 SQL> 
10:00:04 SQL> -- I need a copy of the attributes:
10:00:04 SQL> 
10:00:04 SQL> 
10:00:04 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.04
10:00:04 SQL> CREATE TABLE gbp_att COMPRESS AS
10:00:04   2  SELECT
10:00:04   3  ydate
10:00:04   4  ,att00 gbp_att00
10:00:04   5  ,att01 gbp_att01
10:00:04   6  ,att02 gbp_att02
10:00:04   7  ,att03 gbp_att03
10:00:04   8  ,att04 gbp_att04
10:00:04   9  ,att05 gbp_att05
10:00:04  10  ,att06 gbp_att06
10:00:04  11  ,att07 gbp_att07
10:00:04  12  ,att08 gbp_att08
10:00:04  13  ,att09 gbp_att09
10:00:04  14  ,att10 gbp_att10
10:00:04  15  ,att11 gbp_att11
10:00:04  16  ,att12 gbp_att12
10:00:04  17  ,att13 gbp_att13
10:00:04  18  ,att14 gbp_att14
10:00:04  19  ,att15 gbp_att15
10:00:04  20  ,att16 gbp_att16
10:00:04  21  ,att17 gbp_att17
10:00:04  22  ,att18 gbp_att18
10:00:04  23  ,att19 gbp_att19
10:00:04  24  ,att20 gbp_att20
10:00:04  25  ,att21 gbp_att21
10:00:04  26  ,att22 gbp_att22
10:00:04  27  ,att23 gbp_att23
10:00:04  28  ,att24 gbp_att24
10:00:04  29  ,att25 gbp_att25
10:00:04  30  ,att26 gbp_att26
10:00:04  31  ,att27 gbp_att27
10:00:04  32  ,att28 gbp_att28
10:00:04  33  ,att29 gbp_att29
10:00:04  34  ,att30 gbp_att30
10:00:04  35  ,att31 gbp_att31
10:00:04  36  ,att32 gbp_att32
10:00:04  37  ,att33 gbp_att33
10:00:04  38  ,att34 gbp_att34
10:00:04  39  ,att35 gbp_att35
10:00:04  40  ,att36 gbp_att36
10:00:04  41  ,att37 gbp_att37
10:00:04  42  FROM svm6162
10:00:04  43  /

Table created.

Elapsed: 00:00:00.26
10:00:04 SQL> 
10:00:04 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
10:00:04 SQL> 
10:00:04 SQL> -- rpt
10:00:04 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19837

Elapsed: 00:00:00.85
10:00:05 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19838

Elapsed: 00:00:00.00
10:00:05 SQL> 
10:00:05 SQL> --
10:00:05 SQL> -- jpy610.sql
10:00:05 SQL> --
10:00:05 SQL> 
10:00:05 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:00:05 SQL> 
10:00:05 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.51
10:00:06 SQL> 
10:00:06 SQL> -- I created di5min here:
10:00:06 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:00:06 SQL> 
10:00:06 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:00:06   2  SELECT
10:00:06   3  pair
10:00:06   4  ,ydate
10:00:06   5  ,prdate
10:00:06   6  ,rownum rnum -- acts as t in my time-series
10:00:06   7  ,clse
10:00:06   8  -- Derive a bunch of attributes from clse, the latest price:
10:00:06   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:00:06  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:00:06  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:00:06  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:00:06  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:00:06  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:00:06  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:00:06  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:00:06  17  --
10:00:06  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:00:06  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:00:06  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:00:06  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:00:06  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:00:06  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:00:06  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:00:06  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:00:06  26  --
10:00:06  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:00:06  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:00:06  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:00:06  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:00:06  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:00:06  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:00:06  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:00:06  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:00:06  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:00:06  36  FROM di5min WHERE pair LIKE'%jpy%'
10:00:06  37  AND ydate > sysdate - 95
10:00:06  38  ORDER BY ydate
10:00:06  39  /

View created.

Elapsed: 00:00:00.05
10:00:06 SQL> 
10:00:06 SQL> -- rpt
10:00:06 SQL> 
10:00:06 SQL> SELECT
10:00:06   2  pair
10:00:06   3  ,COUNT(pair)
10:00:06   4  ,MIN(clse),MAX(clse)
10:00:06   5  ,MIN(avg6),MAX(avg6)
10:00:06   6  ,MIN(ydate),MAX(ydate)
10:00:06   7  FROM svm6102
10:00:06   8  GROUP BY pair
10:00:06   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19835	 80.25	   84.485 80.3595205 84.3105479 2010-09-27 10:05:01 2010-12-31 09:55:00

Elapsed: 00:00:00.90
10:00:07 SQL> 
10:00:07 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:00:07 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.25
10:00:07 SQL> CREATE TABLE svm6122 COMPRESS AS
10:00:07   2  SELECT
10:00:07   3  pair
10:00:07   4  ,ydate
10:00:07   5  ,prdate
10:00:07   6  ,clse
10:00:07   7  -- g6 is important. I want to predict g6:
10:00:07   8  ,ld6 - clse g6
10:00:07   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:00:07  10  -- I want more attributes from the ones I derived above:
10:00:07  11  -- clse relation to moving-min
10:00:07  12  ,clse-min4  cm4
10:00:07  13  ,clse-min6  cm6
10:00:07  14  ,clse-min8  cm8
10:00:07  15  ,clse-min10 cm10
10:00:07  16  ,clse-min12 cm12
10:00:07  17  ,clse-min14 cm14
10:00:07  18  ,clse-min16 cm16
10:00:07  19  ,clse-min18 cm18
10:00:07  20  -- clse relation to moving-avg
10:00:07  21  ,clse-avg4  ca4
10:00:07  22  ,clse-avg6  ca6
10:00:07  23  ,clse-avg8  ca8
10:00:07  24  ,clse-avg10 ca10
10:00:07  25  ,clse-avg12 ca12
10:00:07  26  ,clse-avg14 ca14
10:00:07  27  ,clse-avg16 ca16
10:00:07  28  ,clse-avg18 ca18
10:00:07  29  -- clse relation to moving-max
10:00:07  30  ,clse-max4  cx4
10:00:07  31  ,clse-max6  cx6
10:00:07  32  ,clse-max8  cx8
10:00:07  33  ,clse-max10 cx10
10:00:07  34  ,clse-max12 cx12
10:00:07  35  ,clse-max14 cx14
10:00:07  36  ,clse-max16 cx16
10:00:07  37  ,clse-max18 cx18
10:00:07  38  -- Derive more attributes.
10:00:07  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:00:07  40  -- But COVAR_POP is more stable:
10:00:07  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:00:07  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:00:07  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:00:07  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:00:07  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:00:07  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:00:07  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:00:07  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:00:07  49  -- Derive date related attributes:
10:00:07  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:00:07  51  ,0+TO_CHAR(ydate,'D')d
10:00:07  52  ,0+TO_CHAR(ydate,'W')w
10:00:07  53  -- mpm stands for minutes-past-midnight:
10:00:07  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:00:07  55  -- mph stands for minutes-past-hour:
10:00:07  56  ,0+TO_CHAR(ydate,'MI')mph
10:00:07  57  FROM svm6102
10:00:07  58  ORDER BY ydate
10:00:07  59  /

Table created.

Elapsed: 00:00:02.14
10:00:09 SQL> 
10:00:09 SQL> -- rpt
10:00:09 SQL> 
10:00:09 SQL> SELECT
10:00:09   2  pair
10:00:09   3  ,COUNT(pair)
10:00:09   4  ,MIN(clse),MAX(clse)
10:00:09   5  ,MIN(ydate),MAX(ydate)
10:00:09   6  FROM svm6122
10:00:09   7  GROUP BY pair
10:00:09   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19835	 80.25	   84.485 2010-09-27 10:05:01 2010-12-31 09:55:00

Elapsed: 00:00:00.08
10:00:09 SQL> 
10:00:09 SQL> -- Prepare for derivation of NTILE based params:
10:00:09 SQL> 
10:00:09 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.27
10:00:10 SQL> CREATE TABLE svm6142 COMPRESS AS
10:00:10   2  SELECT
10:00:10   3  pair
10:00:10   4  ,ydate
10:00:10   5  ,prdate
10:00:10   6  ,clse
10:00:10   7  ,g6
10:00:10   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:00:10   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:00:10  10  ,CASE WHEN trend IS NULL THEN 1
10:00:10  11  	    WHEN trend =0      THEN 1
10:00:10  12  	    ELSE trend END trend
10:00:10  13  ,cm4
10:00:10  14  ,cm6
10:00:10  15  ,cm8
10:00:10  16  ,cm10
10:00:10  17  ,cm12
10:00:10  18  ,cm14
10:00:10  19  ,cm16
10:00:10  20  ,cm18
10:00:10  21  --
10:00:10  22  ,ca4
10:00:10  23  ,ca6
10:00:10  24  ,ca8
10:00:10  25  ,ca10
10:00:10  26  ,ca12
10:00:10  27  ,ca14
10:00:10  28  ,ca16
10:00:10  29  ,ca18
10:00:10  30  --
10:00:10  31  ,cx4
10:00:10  32  ,cx6
10:00:10  33  ,cx8
10:00:10  34  ,cx10
10:00:10  35  ,cx12
10:00:10  36  ,cx14
10:00:10  37  ,cx16
10:00:10  38  ,cx18
10:00:10  39  --
10:00:10  40  ,crr4
10:00:10  41  ,crr6
10:00:10  42  ,crr8
10:00:10  43  ,crr10
10:00:10  44  ,crr12
10:00:10  45  ,crr14
10:00:10  46  ,crr16
10:00:10  47  ,crr18
10:00:10  48  --
10:00:10  49  ,hh
10:00:10  50  ,d
10:00:10  51  ,w
10:00:10  52  ,mpm
10:00:10  53  ,mph
10:00:10  54  FROM svm6122
10:00:10  55  ORDER BY ydate
10:00:10  56  /

Table created.

Elapsed: 00:00:00.37
10:00:10 SQL> 
10:00:10 SQL> -- rpt
10:00:10 SQL> 
10:00:10 SQL> SELECT
10:00:10   2  pair
10:00:10   3  ,trend
10:00:10   4  ,gatt
10:00:10   5  ,COUNT(pair)
10:00:10   6  ,AVG(g6)
10:00:10   7  FROM svm6142
10:00:10   8  GROUP BY pair,trend,gatt
10:00:10   9  ORDER BY pair,trend,gatt
10:00:10  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5379 -.16615887
usd_jpy 	-1 up	      5022 .162741985
usd_jpy 	-1		72
usd_jpy 	 1 nup	      5215 -.15550231
usd_jpy 	 1 up	      4147 .165305123

Elapsed: 00:00:00.06
10:00:10 SQL> 
10:00:10 SQL> 
10:00:10 SQL> -- Derive NTILE based params:
10:00:10 SQL> 
10:00:10 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
10:00:10 SQL> CREATE TABLE svm6162 COMPRESS AS
10:00:10   2  SELECT
10:00:10   3  pair
10:00:10   4  ,ydate
10:00:10   5  ,prdate
10:00:10   6  ,clse
10:00:10   7  ,g6
10:00:10   8  ,gatt
10:00:10   9  ,gattn
10:00:10  10  ,trend
10:00:10  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:00:10  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:00:10  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:00:10  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:00:10  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:00:10  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:00:10  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:00:10  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:00:10  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:00:10  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:00:10  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:00:10  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:00:10  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:00:10  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:00:10  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:00:10  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:00:10  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:00:10  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:00:10  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:00:10  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:00:10  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:00:10  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:00:10  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:00:10  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:00:10  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:00:10  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:00:10  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:00:10  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:00:10  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:00:10  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:00:10  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:00:10  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:00:10  43  ,hh  att32
10:00:10  44  ,d   att33
10:00:10  45  ,w   att34
10:00:10  46  ,mpm att35
10:00:10  47  ,mph att36
10:00:10  48  ,trend att37
10:00:10  49  FROM svm6142
10:00:10  50  ORDER BY ydate
10:00:10  51  /

Table created.

Elapsed: 00:00:04.77
10:00:15 SQL> 
10:00:15 SQL> -- rpt
10:00:15 SQL> 
10:00:15 SQL> SELECT
10:00:15   2  pair
10:00:15   3  ,trend
10:00:15   4  ,gatt
10:00:15   5  ,COUNT(pair)
10:00:15   6  ,AVG(g6)
10:00:15   7  FROM svm6162
10:00:15   8  GROUP BY pair,trend,gatt
10:00:15   9  ORDER BY pair,trend,gatt
10:00:15  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5379 -.16615887
usd_jpy 	-1 up	      5022 .162741985
usd_jpy 	-1		72
usd_jpy 	 1 nup	      5215 -.15550231
usd_jpy 	 1 up	      4147 .165305123

Elapsed: 00:00:00.03
10:00:15 SQL> 
10:00:15 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
10:00:15 SQL> CREATE TABLE modsrc COMPRESS AS
10:00:15   2  SELECT
10:00:15   3  pair
10:00:15   4  ,ydate
10:00:15   5  ,prdate
10:00:15   6  ,trend
10:00:15   7  ,g6
10:00:15   8  ,gatt
10:00:15   9  ,gattn
10:00:15  10  FROM svm6162
10:00:15  11  /

Table created.

Elapsed: 00:00:00.09
10:00:15 SQL> 
10:00:15 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
10:00:15 SQL> 
10:00:15 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
10:00:15 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
10:00:15   2  SELECT
10:00:15   3  ydate
10:00:15   4  ,trend jpy_trend
10:00:15   5  ,g6    jpy_g6
10:00:15   6  ,gatt  jpy_gatt
10:00:15   7  ,gattn jpy_gattn
10:00:15   8  FROM modsrc
10:00:15   9  /

Table created.

Elapsed: 00:00:00.07
10:00:16 SQL> 
10:00:16 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
10:00:16 SQL> 
10:00:16 SQL> -- I need a copy of the attributes:
10:00:16 SQL> 
10:00:16 SQL> 
10:00:16 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.20
10:00:16 SQL> CREATE TABLE jpy_att COMPRESS AS
10:00:16   2  SELECT
10:00:16   3  ydate
10:00:16   4  ,att00 jpy_att00
10:00:16   5  ,att01 jpy_att01
10:00:16   6  ,att02 jpy_att02
10:00:16   7  ,att03 jpy_att03
10:00:16   8  ,att04 jpy_att04
10:00:16   9  ,att05 jpy_att05
10:00:16  10  ,att06 jpy_att06
10:00:16  11  ,att07 jpy_att07
10:00:16  12  ,att08 jpy_att08
10:00:16  13  ,att09 jpy_att09
10:00:16  14  ,att10 jpy_att10
10:00:16  15  ,att11 jpy_att11
10:00:16  16  ,att12 jpy_att12
10:00:16  17  ,att13 jpy_att13
10:00:16  18  ,att14 jpy_att14
10:00:16  19  ,att15 jpy_att15
10:00:16  20  ,att16 jpy_att16
10:00:16  21  ,att17 jpy_att17
10:00:16  22  ,att18 jpy_att18
10:00:16  23  ,att19 jpy_att19
10:00:16  24  ,att20 jpy_att20
10:00:16  25  ,att21 jpy_att21
10:00:16  26  ,att22 jpy_att22
10:00:16  27  ,att23 jpy_att23
10:00:16  28  ,att24 jpy_att24
10:00:16  29  ,att25 jpy_att25
10:00:16  30  ,att26 jpy_att26
10:00:16  31  ,att27 jpy_att27
10:00:16  32  ,att28 jpy_att28
10:00:16  33  ,att29 jpy_att29
10:00:16  34  ,att30 jpy_att30
10:00:16  35  ,att31 jpy_att31
10:00:16  36  ,att32 jpy_att32
10:00:16  37  ,att33 jpy_att33
10:00:16  38  ,att34 jpy_att34
10:00:16  39  ,att35 jpy_att35
10:00:16  40  ,att36 jpy_att36
10:00:16  41  ,att37 jpy_att37
10:00:16  42  FROM svm6162
10:00:16  43  /

Table created.

Elapsed: 00:00:00.18
10:00:16 SQL> 
10:00:16 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.53
10:00:17 SQL> 
10:00:17 SQL> -- rpt
10:00:17 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19835

Elapsed: 00:00:00.90
10:00:18 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19835

Elapsed: 00:00:00.00
10:00:18 SQL> 
10:00:18 SQL> --
10:00:18 SQL> -- cad610.sql
10:00:18 SQL> --
10:00:18 SQL> 
10:00:18 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:00:18 SQL> 
10:00:18 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.40
10:00:18 SQL> 
10:00:18 SQL> -- I created di5min here:
10:00:18 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:00:18 SQL> 
10:00:18 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:00:18   2  SELECT
10:00:18   3  pair
10:00:18   4  ,ydate
10:00:18   5  ,prdate
10:00:18   6  ,rownum rnum -- acts as t in my time-series
10:00:18   7  ,clse
10:00:18   8  -- Derive a bunch of attributes from clse, the latest price:
10:00:18   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:00:18  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:00:18  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:00:18  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:00:18  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:00:18  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:00:18  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:00:18  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:00:18  17  --
10:00:18  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:00:18  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:00:18  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:00:18  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:00:18  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:00:18  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:00:18  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:00:18  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:00:18  26  --
10:00:18  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:00:18  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:00:18  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:00:18  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:00:18  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:00:18  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:00:18  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:00:18  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:00:18  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:00:18  36  FROM di5min WHERE pair LIKE'%cad%'
10:00:18  37  AND ydate > sysdate - 95
10:00:18  38  ORDER BY ydate
10:00:18  39  /

View created.

Elapsed: 00:00:00.05
10:00:18 SQL> 
10:00:18 SQL> -- rpt
10:00:18 SQL> 
10:00:18 SQL> SELECT
10:00:18   2  pair
10:00:18   3  ,COUNT(pair)
10:00:18   4  ,MIN(clse),MAX(clse)
10:00:18   5  ,MIN(avg6),MAX(avg6)
10:00:18   6  ,MIN(ydate),MAX(ydate)
10:00:18   7  FROM svm6102
10:00:18   8  GROUP BY pair
10:00:18   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19835	.99755	    1.036 .998845205 1.03336849 2010-09-27 10:05:01 2010-12-31 09:55:00

Elapsed: 00:00:00.85
10:00:19 SQL> 
10:00:19 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:00:19 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
10:00:19 SQL> CREATE TABLE svm6122 COMPRESS AS
10:00:19   2  SELECT
10:00:19   3  pair
10:00:19   4  ,ydate
10:00:19   5  ,prdate
10:00:19   6  ,clse
10:00:19   7  -- g6 is important. I want to predict g6:
10:00:19   8  ,ld6 - clse g6
10:00:19   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:00:19  10  -- I want more attributes from the ones I derived above:
10:00:19  11  -- clse relation to moving-min
10:00:19  12  ,clse-min4  cm4
10:00:19  13  ,clse-min6  cm6
10:00:19  14  ,clse-min8  cm8
10:00:19  15  ,clse-min10 cm10
10:00:19  16  ,clse-min12 cm12
10:00:19  17  ,clse-min14 cm14
10:00:19  18  ,clse-min16 cm16
10:00:19  19  ,clse-min18 cm18
10:00:19  20  -- clse relation to moving-avg
10:00:19  21  ,clse-avg4  ca4
10:00:19  22  ,clse-avg6  ca6
10:00:19  23  ,clse-avg8  ca8
10:00:19  24  ,clse-avg10 ca10
10:00:19  25  ,clse-avg12 ca12
10:00:19  26  ,clse-avg14 ca14
10:00:19  27  ,clse-avg16 ca16
10:00:19  28  ,clse-avg18 ca18
10:00:19  29  -- clse relation to moving-max
10:00:19  30  ,clse-max4  cx4
10:00:19  31  ,clse-max6  cx6
10:00:19  32  ,clse-max8  cx8
10:00:19  33  ,clse-max10 cx10
10:00:19  34  ,clse-max12 cx12
10:00:19  35  ,clse-max14 cx14
10:00:19  36  ,clse-max16 cx16
10:00:19  37  ,clse-max18 cx18
10:00:19  38  -- Derive more attributes.
10:00:19  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:00:19  40  -- But COVAR_POP is more stable:
10:00:19  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:00:19  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:00:19  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:00:19  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:00:19  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:00:19  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:00:19  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:00:19  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:00:19  49  -- Derive date related attributes:
10:00:19  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:00:19  51  ,0+TO_CHAR(ydate,'D')d
10:00:19  52  ,0+TO_CHAR(ydate,'W')w
10:00:19  53  -- mpm stands for minutes-past-midnight:
10:00:19  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:00:19  55  -- mph stands for minutes-past-hour:
10:00:19  56  ,0+TO_CHAR(ydate,'MI')mph
10:00:19  57  FROM svm6102
10:00:19  58  ORDER BY ydate
10:00:19  59  /

Table created.

Elapsed: 00:00:02.14
10:00:21 SQL> 
10:00:21 SQL> -- rpt
10:00:21 SQL> 
10:00:21 SQL> SELECT
10:00:21   2  pair
10:00:21   3  ,COUNT(pair)
10:00:21   4  ,MIN(clse),MAX(clse)
10:00:21   5  ,MIN(ydate),MAX(ydate)
10:00:21   6  FROM svm6122
10:00:21   7  GROUP BY pair
10:00:21   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19835	.99755	    1.036 2010-09-27 10:05:01 2010-12-31 09:55:00

Elapsed: 00:00:00.10
10:00:21 SQL> 
10:00:21 SQL> -- Prepare for derivation of NTILE based params:
10:00:21 SQL> 
10:00:21 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.35
10:00:22 SQL> CREATE TABLE svm6142 COMPRESS AS
10:00:22   2  SELECT
10:00:22   3  pair
10:00:22   4  ,ydate
10:00:22   5  ,prdate
10:00:22   6  ,clse
10:00:22   7  ,g6
10:00:22   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:00:22   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:00:22  10  ,CASE WHEN trend IS NULL THEN 1
10:00:22  11  	    WHEN trend =0      THEN 1
10:00:22  12  	    ELSE trend END trend
10:00:22  13  ,cm4
10:00:22  14  ,cm6
10:00:22  15  ,cm8
10:00:22  16  ,cm10
10:00:22  17  ,cm12
10:00:22  18  ,cm14
10:00:22  19  ,cm16
10:00:22  20  ,cm18
10:00:22  21  --
10:00:22  22  ,ca4
10:00:22  23  ,ca6
10:00:22  24  ,ca8
10:00:22  25  ,ca10
10:00:22  26  ,ca12
10:00:22  27  ,ca14
10:00:22  28  ,ca16
10:00:22  29  ,ca18
10:00:22  30  --
10:00:22  31  ,cx4
10:00:22  32  ,cx6
10:00:22  33  ,cx8
10:00:22  34  ,cx10
10:00:22  35  ,cx12
10:00:22  36  ,cx14
10:00:22  37  ,cx16
10:00:22  38  ,cx18
10:00:22  39  --
10:00:22  40  ,crr4
10:00:22  41  ,crr6
10:00:22  42  ,crr8
10:00:22  43  ,crr10
10:00:22  44  ,crr12
10:00:22  45  ,crr14
10:00:22  46  ,crr16
10:00:22  47  ,crr18
10:00:22  48  --
10:00:22  49  ,hh
10:00:22  50  ,d
10:00:22  51  ,w
10:00:22  52  ,mpm
10:00:22  53  ,mph
10:00:22  54  FROM svm6122
10:00:22  55  ORDER BY ydate
10:00:22  56  /

Table created.

Elapsed: 00:00:00.36
10:00:22 SQL> 
10:00:22 SQL> -- rpt
10:00:22 SQL> 
10:00:22 SQL> SELECT
10:00:22   2  pair
10:00:22   3  ,trend
10:00:22   4  ,gatt
10:00:22   5  ,COUNT(pair)
10:00:22   6  ,AVG(g6)
10:00:22   7  FROM svm6142
10:00:22   8  GROUP BY pair,trend,gatt
10:00:22   9  ORDER BY pair,trend,gatt
10:00:22  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7360 -.00129818
usd_cad 	-1 up	      3126 .003087137
usd_cad 	-1		32
usd_cad 	 1 nup	      6785 -.00160055
usd_cad 	 1 up	      2492 .003595519
usd_cad 	 1		40

6 rows selected.

Elapsed: 00:00:00.06
10:00:22 SQL> 
10:00:22 SQL> 
10:00:22 SQL> -- Derive NTILE based params:
10:00:22 SQL> 
10:00:22 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.19
10:00:22 SQL> CREATE TABLE svm6162 COMPRESS AS
10:00:22   2  SELECT
10:00:22   3  pair
10:00:22   4  ,ydate
10:00:22   5  ,prdate
10:00:22   6  ,clse
10:00:22   7  ,g6
10:00:22   8  ,gatt
10:00:22   9  ,gattn
10:00:22  10  ,trend
10:00:22  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:00:22  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:00:22  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:00:22  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:00:22  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:00:22  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:00:22  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:00:22  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:00:22  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:00:22  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:00:22  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:00:22  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:00:22  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:00:22  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:00:22  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:00:22  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:00:22  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:00:22  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:00:22  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:00:22  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:00:22  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:00:22  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:00:22  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:00:22  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:00:22  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:00:22  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:00:22  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:00:22  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:00:22  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:00:22  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:00:22  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:00:22  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:00:22  43  ,hh  att32
10:00:22  44  ,d   att33
10:00:22  45  ,w   att34
10:00:22  46  ,mpm att35
10:00:22  47  ,mph att36
10:00:22  48  ,trend att37
10:00:22  49  FROM svm6142
10:00:22  50  ORDER BY ydate
10:00:22  51  /

Table created.

Elapsed: 00:00:04.79
10:00:27 SQL> 
10:00:27 SQL> -- rpt
10:00:27 SQL> 
10:00:27 SQL> SELECT
10:00:27   2  pair
10:00:27   3  ,trend
10:00:27   4  ,gatt
10:00:27   5  ,COUNT(pair)
10:00:27   6  ,AVG(g6)
10:00:27   7  FROM svm6162
10:00:27   8  GROUP BY pair,trend,gatt
10:00:27   9  ORDER BY pair,trend,gatt
10:00:27  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7360 -.00129818
usd_cad 	-1 up	      3126 .003087137
usd_cad 	-1		32
usd_cad 	 1 nup	      6785 -.00160055
usd_cad 	 1 up	      2492 .003595519
usd_cad 	 1		40

6 rows selected.

Elapsed: 00:00:00.02
10:00:27 SQL> 
10:00:27 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.11
10:00:27 SQL> CREATE TABLE modsrc COMPRESS AS
10:00:27   2  SELECT
10:00:27   3  pair
10:00:27   4  ,ydate
10:00:27   5  ,prdate
10:00:27   6  ,trend
10:00:27   7  ,g6
10:00:27   8  ,gatt
10:00:27   9  ,gattn
10:00:27  10  FROM svm6162
10:00:27  11  /

Table created.

Elapsed: 00:00:00.09
10:00:27 SQL> 
10:00:27 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.26
10:00:28 SQL> 
10:00:28 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
10:00:28 SQL> CREATE TABLE cad_ms610 COMPRESS AS
10:00:28   2  SELECT
10:00:28   3  ydate
10:00:28   4  ,trend cad_trend
10:00:28   5  ,g6    cad_g6
10:00:28   6  ,gatt  cad_gatt
10:00:28   7  ,gattn cad_gattn
10:00:28   8  FROM modsrc
10:00:28   9  /

Table created.

Elapsed: 00:00:00.08
10:00:28 SQL> 
10:00:28 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
10:00:28 SQL> 
10:00:28 SQL> -- I need a copy of the attributes:
10:00:28 SQL> 
10:00:28 SQL> 
10:00:28 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.10
10:00:28 SQL> CREATE TABLE cad_att COMPRESS AS
10:00:28   2  SELECT
10:00:28   3  ydate
10:00:28   4  ,att00 cad_att00
10:00:28   5  ,att01 cad_att01
10:00:28   6  ,att02 cad_att02
10:00:28   7  ,att03 cad_att03
10:00:28   8  ,att04 cad_att04
10:00:28   9  ,att05 cad_att05
10:00:28  10  ,att06 cad_att06
10:00:28  11  ,att07 cad_att07
10:00:28  12  ,att08 cad_att08
10:00:28  13  ,att09 cad_att09
10:00:28  14  ,att10 cad_att10
10:00:28  15  ,att11 cad_att11
10:00:28  16  ,att12 cad_att12
10:00:28  17  ,att13 cad_att13
10:00:28  18  ,att14 cad_att14
10:00:28  19  ,att15 cad_att15
10:00:28  20  ,att16 cad_att16
10:00:28  21  ,att17 cad_att17
10:00:28  22  ,att18 cad_att18
10:00:28  23  ,att19 cad_att19
10:00:28  24  ,att20 cad_att20
10:00:28  25  ,att21 cad_att21
10:00:28  26  ,att22 cad_att22
10:00:28  27  ,att23 cad_att23
10:00:28  28  ,att24 cad_att24
10:00:28  29  ,att25 cad_att25
10:00:28  30  ,att26 cad_att26
10:00:28  31  ,att27 cad_att27
10:00:28  32  ,att28 cad_att28
10:00:28  33  ,att29 cad_att29
10:00:28  34  ,att30 cad_att30
10:00:28  35  ,att31 cad_att31
10:00:28  36  ,att32 cad_att32
10:00:28  37  ,att33 cad_att33
10:00:28  38  ,att34 cad_att34
10:00:28  39  ,att35 cad_att35
10:00:28  40  ,att36 cad_att36
10:00:28  41  ,att37 cad_att37
10:00:28  42  FROM svm6162
10:00:28  43  /

Table created.

Elapsed: 00:00:00.18
10:00:28 SQL> 
10:00:28 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
10:00:29 SQL> 
10:00:29 SQL> -- rpt
10:00:29 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19835

Elapsed: 00:00:00.84
10:00:29 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19835

Elapsed: 00:00:00.00
10:00:29 SQL> 
10:00:29 SQL> --
10:00:29 SQL> -- chf610.sql
10:00:29 SQL> --
10:00:29 SQL> 
10:00:29 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:00:29 SQL> 
10:00:29 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
10:00:30 SQL> 
10:00:30 SQL> -- I created di5min here:
10:00:30 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:00:30 SQL> 
10:00:30 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:00:30   2  SELECT
10:00:30   3  pair
10:00:30   4  ,ydate
10:00:30   5  ,prdate
10:00:30   6  ,rownum rnum -- acts as t in my time-series
10:00:30   7  ,clse
10:00:30   8  -- Derive a bunch of attributes from clse, the latest price:
10:00:30   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:00:30  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:00:30  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:00:30  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:00:30  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:00:30  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:00:30  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:00:30  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:00:30  17  --
10:00:30  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:00:30  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:00:30  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:00:30  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:00:30  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:00:30  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:00:30  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:00:30  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:00:30  26  --
10:00:30  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:00:30  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:00:30  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:00:30  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:00:30  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:00:30  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:00:30  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:00:30  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:00:30  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:00:30  36  FROM di5min WHERE pair LIKE'%chf%'
10:00:30  37  AND ydate > sysdate - 95
10:00:30  38  ORDER BY ydate
10:00:30  39  /

View created.

Elapsed: 00:00:00.05
10:00:30 SQL> 
10:00:30 SQL> -- rpt
10:00:30 SQL> 
10:00:30 SQL> SELECT
10:00:30   2  pair
10:00:30   3  ,COUNT(pair)
10:00:30   4  ,MIN(clse),MAX(clse)
10:00:30   5  ,MIN(avg6),MAX(avg6)
10:00:30   6  ,MIN(ydate),MAX(ydate)
10:00:30   7  FROM svm6102
10:00:30   8  GROUP BY pair
10:00:30   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19838	 .9343	  1.00635 .935186301 1.00498151 2010-09-27 10:05:01 2010-12-31 09:55:00

Elapsed: 00:00:00.88
10:00:31 SQL> 
10:00:31 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:00:31 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.21
10:00:31 SQL> CREATE TABLE svm6122 COMPRESS AS
10:00:31   2  SELECT
10:00:31   3  pair
10:00:31   4  ,ydate
10:00:31   5  ,prdate
10:00:31   6  ,clse
10:00:31   7  -- g6 is important. I want to predict g6:
10:00:31   8  ,ld6 - clse g6
10:00:31   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:00:31  10  -- I want more attributes from the ones I derived above:
10:00:31  11  -- clse relation to moving-min
10:00:31  12  ,clse-min4  cm4
10:00:31  13  ,clse-min6  cm6
10:00:31  14  ,clse-min8  cm8
10:00:31  15  ,clse-min10 cm10
10:00:31  16  ,clse-min12 cm12
10:00:31  17  ,clse-min14 cm14
10:00:31  18  ,clse-min16 cm16
10:00:31  19  ,clse-min18 cm18
10:00:31  20  -- clse relation to moving-avg
10:00:31  21  ,clse-avg4  ca4
10:00:31  22  ,clse-avg6  ca6
10:00:31  23  ,clse-avg8  ca8
10:00:31  24  ,clse-avg10 ca10
10:00:31  25  ,clse-avg12 ca12
10:00:31  26  ,clse-avg14 ca14
10:00:31  27  ,clse-avg16 ca16
10:00:31  28  ,clse-avg18 ca18
10:00:31  29  -- clse relation to moving-max
10:00:31  30  ,clse-max4  cx4
10:00:31  31  ,clse-max6  cx6
10:00:31  32  ,clse-max8  cx8
10:00:31  33  ,clse-max10 cx10
10:00:31  34  ,clse-max12 cx12
10:00:31  35  ,clse-max14 cx14
10:00:31  36  ,clse-max16 cx16
10:00:31  37  ,clse-max18 cx18
10:00:31  38  -- Derive more attributes.
10:00:31  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:00:31  40  -- But COVAR_POP is more stable:
10:00:31  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:00:31  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:00:31  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:00:31  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:00:31  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:00:31  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:00:31  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:00:31  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:00:31  49  -- Derive date related attributes:
10:00:31  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:00:31  51  ,0+TO_CHAR(ydate,'D')d
10:00:31  52  ,0+TO_CHAR(ydate,'W')w
10:00:31  53  -- mpm stands for minutes-past-midnight:
10:00:31  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:00:31  55  -- mph stands for minutes-past-hour:
10:00:31  56  ,0+TO_CHAR(ydate,'MI')mph
10:00:31  57  FROM svm6102
10:00:31  58  ORDER BY ydate
10:00:31  59  /

Table created.

Elapsed: 00:00:02.06
10:00:33 SQL> 
10:00:33 SQL> -- rpt
10:00:33 SQL> 
10:00:33 SQL> SELECT
10:00:33   2  pair
10:00:33   3  ,COUNT(pair)
10:00:33   4  ,MIN(clse),MAX(clse)
10:00:33   5  ,MIN(ydate),MAX(ydate)
10:00:33   6  FROM svm6122
10:00:33   7  GROUP BY pair
10:00:33   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19838	 .9343	  1.00635 2010-09-27 10:05:01 2010-12-31 09:55:00

Elapsed: 00:00:00.03
10:00:33 SQL> 
10:00:33 SQL> -- Prepare for derivation of NTILE based params:
10:00:33 SQL> 
10:00:33 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.21
10:00:33 SQL> CREATE TABLE svm6142 COMPRESS AS
10:00:33   2  SELECT
10:00:33   3  pair
10:00:33   4  ,ydate
10:00:33   5  ,prdate
10:00:33   6  ,clse
10:00:33   7  ,g6
10:00:33   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:00:33   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:00:33  10  ,CASE WHEN trend IS NULL THEN 1
10:00:33  11  	    WHEN trend =0      THEN 1
10:00:33  12  	    ELSE trend END trend
10:00:33  13  ,cm4
10:00:33  14  ,cm6
10:00:33  15  ,cm8
10:00:33  16  ,cm10
10:00:33  17  ,cm12
10:00:33  18  ,cm14
10:00:33  19  ,cm16
10:00:33  20  ,cm18
10:00:33  21  --
10:00:33  22  ,ca4
10:00:33  23  ,ca6
10:00:33  24  ,ca8
10:00:33  25  ,ca10
10:00:33  26  ,ca12
10:00:33  27  ,ca14
10:00:33  28  ,ca16
10:00:33  29  ,ca18
10:00:33  30  --
10:00:33  31  ,cx4
10:00:33  32  ,cx6
10:00:33  33  ,cx8
10:00:33  34  ,cx10
10:00:33  35  ,cx12
10:00:33  36  ,cx14
10:00:33  37  ,cx16
10:00:33  38  ,cx18
10:00:33  39  --
10:00:33  40  ,crr4
10:00:33  41  ,crr6
10:00:33  42  ,crr8
10:00:33  43  ,crr10
10:00:33  44  ,crr12
10:00:33  45  ,crr14
10:00:33  46  ,crr16
10:00:33  47  ,crr18
10:00:33  48  --
10:00:33  49  ,hh
10:00:33  50  ,d
10:00:33  51  ,w
10:00:33  52  ,mpm
10:00:33  53  ,mph
10:00:33  54  FROM svm6122
10:00:33  55  ORDER BY ydate
10:00:33  56  /

Table created.

Elapsed: 00:00:00.36
10:00:34 SQL> 
10:00:34 SQL> -- rpt
10:00:34 SQL> 
10:00:34 SQL> SELECT
10:00:34   2  pair
10:00:34   3  ,trend
10:00:34   4  ,gatt
10:00:34   5  ,COUNT(pair)
10:00:34   6  ,AVG(g6)
10:00:34   7  FROM svm6142
10:00:34   8  GROUP BY pair,trend,gatt
10:00:34   9  ORDER BY pair,trend,gatt
10:00:34  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7326 -.00197037
usd_chf 	-1 up	      3232 .003873294
usd_chf 	-1		16
usd_chf 	 1 nup	      6650 -.00163375
usd_chf 	 1 up	      2558 .003691854
usd_chf 	 1		56

6 rows selected.

Elapsed: 00:00:00.04
10:00:34 SQL> 
10:00:34 SQL> 
10:00:34 SQL> -- Derive NTILE based params:
10:00:34 SQL> 
10:00:34 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.14
10:00:34 SQL> CREATE TABLE svm6162 COMPRESS AS
10:00:34   2  SELECT
10:00:34   3  pair
10:00:34   4  ,ydate
10:00:34   5  ,prdate
10:00:34   6  ,clse
10:00:34   7  ,g6
10:00:34   8  ,gatt
10:00:34   9  ,gattn
10:00:34  10  ,trend
10:00:34  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:00:34  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:00:34  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:00:34  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:00:34  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:00:34  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:00:34  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:00:34  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:00:34  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:00:34  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:00:34  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:00:34  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:00:34  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:00:34  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:00:34  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:00:34  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:00:34  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:00:34  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:00:34  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:00:34  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:00:34  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:00:34  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:00:34  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:00:34  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:00:34  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:00:34  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:00:34  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:00:34  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:00:34  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:00:34  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:00:34  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:00:34  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:00:34  43  ,hh  att32
10:00:34  44  ,d   att33
10:00:34  45  ,w   att34
10:00:34  46  ,mpm att35
10:00:34  47  ,mph att36
10:00:34  48  ,trend att37
10:00:34  49  FROM svm6142
10:00:34  50  ORDER BY ydate
10:00:34  51  /

Table created.

Elapsed: 00:00:04.81
10:00:39 SQL> 
10:00:39 SQL> -- rpt
10:00:39 SQL> 
10:00:39 SQL> SELECT
10:00:39   2  pair
10:00:39   3  ,trend
10:00:39   4  ,gatt
10:00:39   5  ,COUNT(pair)
10:00:39   6  ,AVG(g6)
10:00:39   7  FROM svm6162
10:00:39   8  GROUP BY pair,trend,gatt
10:00:39   9  ORDER BY pair,trend,gatt
10:00:39  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7326 -.00197037
usd_chf 	-1 up	      3232 .003873294
usd_chf 	-1		16
usd_chf 	 1 nup	      6650 -.00163375
usd_chf 	 1 up	      2558 .003691854
usd_chf 	 1		56

6 rows selected.

Elapsed: 00:00:00.03
10:00:39 SQL> 
10:00:39 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.19
10:00:39 SQL> CREATE TABLE modsrc COMPRESS AS
10:00:39   2  SELECT
10:00:39   3  pair
10:00:39   4  ,ydate
10:00:39   5  ,prdate
10:00:39   6  ,trend
10:00:39   7  ,g6
10:00:39   8  ,gatt
10:00:39   9  ,gattn
10:00:39  10  FROM svm6162
10:00:39  11  /

Table created.

Elapsed: 00:00:00.09
10:00:39 SQL> 
10:00:39 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
10:00:39 SQL> 
10:00:39 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
10:00:39 SQL> CREATE TABLE chf_ms610 COMPRESS AS
10:00:39   2  SELECT
10:00:39   3  ydate
10:00:39   4  ,trend chf_trend
10:00:39   5  ,g6    chf_g6
10:00:39   6  ,gatt  chf_gatt
10:00:39   7  ,gattn chf_gattn
10:00:39   8  FROM modsrc
10:00:39   9  /

Table created.

Elapsed: 00:00:00.07
10:00:39 SQL> 
10:00:39 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.14
10:00:39 SQL> 
10:00:39 SQL> -- I need a copy of the attributes:
10:00:39 SQL> 
10:00:39 SQL> 
10:00:39 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.04
10:00:39 SQL> CREATE TABLE chf_att COMPRESS AS
10:00:39   2  SELECT
10:00:39   3  ydate
10:00:39   4  ,att00 chf_att00
10:00:39   5  ,att01 chf_att01
10:00:39   6  ,att02 chf_att02
10:00:39   7  ,att03 chf_att03
10:00:39   8  ,att04 chf_att04
10:00:39   9  ,att05 chf_att05
10:00:39  10  ,att06 chf_att06
10:00:39  11  ,att07 chf_att07
10:00:39  12  ,att08 chf_att08
10:00:39  13  ,att09 chf_att09
10:00:39  14  ,att10 chf_att10
10:00:39  15  ,att11 chf_att11
10:00:39  16  ,att12 chf_att12
10:00:39  17  ,att13 chf_att13
10:00:39  18  ,att14 chf_att14
10:00:39  19  ,att15 chf_att15
10:00:39  20  ,att16 chf_att16
10:00:39  21  ,att17 chf_att17
10:00:39  22  ,att18 chf_att18
10:00:39  23  ,att19 chf_att19
10:00:39  24  ,att20 chf_att20
10:00:39  25  ,att21 chf_att21
10:00:39  26  ,att22 chf_att22
10:00:39  27  ,att23 chf_att23
10:00:39  28  ,att24 chf_att24
10:00:39  29  ,att25 chf_att25
10:00:39  30  ,att26 chf_att26
10:00:39  31  ,att27 chf_att27
10:00:39  32  ,att28 chf_att28
10:00:39  33  ,att29 chf_att29
10:00:39  34  ,att30 chf_att30
10:00:39  35  ,att31 chf_att31
10:00:39  36  ,att32 chf_att32
10:00:39  37  ,att33 chf_att33
10:00:39  38  ,att34 chf_att34
10:00:39  39  ,att35 chf_att35
10:00:39  40  ,att36 chf_att36
10:00:39  41  ,att37 chf_att37
10:00:39  42  FROM svm6162
10:00:39  43  /

Table created.

Elapsed: 00:00:00.20
10:00:40 SQL> 
10:00:40 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.52
10:00:40 SQL> 
10:00:40 SQL> -- rpt
10:00:40 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19838

Elapsed: 00:00:00.85
10:00:41 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19838

Elapsed: 00:00:00.00
10:00:41 SQL> 
10:00:41 SQL> --
10:00:41 SQL> -- ech610.sql
10:00:41 SQL> --
10:00:41 SQL> 
10:00:41 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:00:41 SQL> 
10:00:41 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.48
10:00:42 SQL> 
10:00:42 SQL> -- I created di5min here:
10:00:42 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:00:42 SQL> 
10:00:42 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:00:42   2  SELECT
10:00:42   3  pair
10:00:42   4  ,ydate
10:00:42   5  ,prdate
10:00:42   6  ,rownum rnum -- acts as t in my time-series
10:00:42   7  ,clse
10:00:42   8  -- Derive a bunch of attributes from clse, the latest price:
10:00:42   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:00:42  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:00:42  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:00:42  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:00:42  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:00:42  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:00:42  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:00:42  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:00:42  17  --
10:00:42  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:00:42  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:00:42  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:00:42  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:00:42  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:00:42  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:00:42  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:00:42  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:00:42  26  --
10:00:42  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:00:42  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:00:42  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:00:42  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:00:42  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:00:42  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:00:42  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:00:42  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:00:42  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:00:42  36  FROM di5min WHERE pair LIKE'%ech%'
10:00:42  37  AND ydate > sysdate - 95
10:00:42  38  ORDER BY ydate
10:00:42  39  /

View created.

Elapsed: 00:00:00.05
10:00:42 SQL> 
10:00:42 SQL> -- rpt
10:00:42 SQL> 
10:00:42 SQL> SELECT
10:00:42   2  pair
10:00:42   3  ,COUNT(pair)
10:00:42   4  ,MIN(clse),MAX(clse)
10:00:42   5  ,MIN(avg6),MAX(avg6)
10:00:42   6  ,MIN(ydate),MAX(ydate)
10:00:42   7  FROM svm6102
10:00:42   8  GROUP BY pair
10:00:42   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19837 1.24213032 1.38284305 1.24319868 1.37986485 2010-09-27 10:05:01 2010-12-31 09:55:00

Elapsed: 00:00:00.81
10:00:42 SQL> 
10:00:42 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:00:42 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.19
10:00:43 SQL> CREATE TABLE svm6122 COMPRESS AS
10:00:43   2  SELECT
10:00:43   3  pair
10:00:43   4  ,ydate
10:00:43   5  ,prdate
10:00:43   6  ,clse
10:00:43   7  -- g6 is important. I want to predict g6:
10:00:43   8  ,ld6 - clse g6
10:00:43   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:00:43  10  -- I want more attributes from the ones I derived above:
10:00:43  11  -- clse relation to moving-min
10:00:43  12  ,clse-min4  cm4
10:00:43  13  ,clse-min6  cm6
10:00:43  14  ,clse-min8  cm8
10:00:43  15  ,clse-min10 cm10
10:00:43  16  ,clse-min12 cm12
10:00:43  17  ,clse-min14 cm14
10:00:43  18  ,clse-min16 cm16
10:00:43  19  ,clse-min18 cm18
10:00:43  20  -- clse relation to moving-avg
10:00:43  21  ,clse-avg4  ca4
10:00:43  22  ,clse-avg6  ca6
10:00:43  23  ,clse-avg8  ca8
10:00:43  24  ,clse-avg10 ca10
10:00:43  25  ,clse-avg12 ca12
10:00:43  26  ,clse-avg14 ca14
10:00:43  27  ,clse-avg16 ca16
10:00:43  28  ,clse-avg18 ca18
10:00:43  29  -- clse relation to moving-max
10:00:43  30  ,clse-max4  cx4
10:00:43  31  ,clse-max6  cx6
10:00:43  32  ,clse-max8  cx8
10:00:43  33  ,clse-max10 cx10
10:00:43  34  ,clse-max12 cx12
10:00:43  35  ,clse-max14 cx14
10:00:43  36  ,clse-max16 cx16
10:00:43  37  ,clse-max18 cx18
10:00:43  38  -- Derive more attributes.
10:00:43  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:00:43  40  -- But COVAR_POP is more stable:
10:00:43  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:00:43  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:00:43  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:00:43  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:00:43  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:00:43  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:00:43  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:00:43  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:00:43  49  -- Derive date related attributes:
10:00:43  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:00:43  51  ,0+TO_CHAR(ydate,'D')d
10:00:43  52  ,0+TO_CHAR(ydate,'W')w
10:00:43  53  -- mpm stands for minutes-past-midnight:
10:00:43  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:00:43  55  -- mph stands for minutes-past-hour:
10:00:43  56  ,0+TO_CHAR(ydate,'MI')mph
10:00:43  57  FROM svm6102
10:00:43  58  ORDER BY ydate
10:00:43  59  /

Table created.

Elapsed: 00:00:02.15
10:00:45 SQL> 
10:00:45 SQL> -- rpt
10:00:45 SQL> 
10:00:45 SQL> SELECT
10:00:45   2  pair
10:00:45   3  ,COUNT(pair)
10:00:45   4  ,MIN(clse),MAX(clse)
10:00:45   5  ,MIN(ydate),MAX(ydate)
10:00:45   6  FROM svm6122
10:00:45   7  GROUP BY pair
10:00:45   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19837 1.24213032 1.38284305 2010-09-27 10:05:01 2010-12-31 09:55:00

Elapsed: 00:00:00.05
10:00:45 SQL> 
10:00:45 SQL> -- Prepare for derivation of NTILE based params:
10:00:45 SQL> 
10:00:45 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.28
10:00:45 SQL> CREATE TABLE svm6142 COMPRESS AS
10:00:45   2  SELECT
10:00:45   3  pair
10:00:45   4  ,ydate
10:00:45   5  ,prdate
10:00:45   6  ,clse
10:00:45   7  ,g6
10:00:45   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:00:45   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:00:45  10  ,CASE WHEN trend IS NULL THEN 1
10:00:45  11  	    WHEN trend =0      THEN 1
10:00:45  12  	    ELSE trend END trend
10:00:45  13  ,cm4
10:00:45  14  ,cm6
10:00:45  15  ,cm8
10:00:45  16  ,cm10
10:00:45  17  ,cm12
10:00:45  18  ,cm14
10:00:45  19  ,cm16
10:00:45  20  ,cm18
10:00:45  21  --
10:00:45  22  ,ca4
10:00:45  23  ,ca6
10:00:45  24  ,ca8
10:00:45  25  ,ca10
10:00:45  26  ,ca12
10:00:45  27  ,ca14
10:00:45  28  ,ca16
10:00:45  29  ,ca18
10:00:45  30  --
10:00:45  31  ,cx4
10:00:45  32  ,cx6
10:00:45  33  ,cx8
10:00:45  34  ,cx10
10:00:45  35  ,cx12
10:00:45  36  ,cx14
10:00:45  37  ,cx16
10:00:45  38  ,cx18
10:00:45  39  --
10:00:45  40  ,crr4
10:00:45  41  ,crr6
10:00:45  42  ,crr8
10:00:45  43  ,crr10
10:00:45  44  ,crr12
10:00:45  45  ,crr14
10:00:45  46  ,crr16
10:00:45  47  ,crr18
10:00:45  48  --
10:00:45  49  ,hh
10:00:45  50  ,d
10:00:45  51  ,w
10:00:45  52  ,mpm
10:00:45  53  ,mph
10:00:45  54  FROM svm6122
10:00:45  55  ORDER BY ydate
10:00:45  56  /

Table created.

Elapsed: 00:00:00.51
10:00:46 SQL> 
10:00:46 SQL> -- rpt
10:00:46 SQL> 
10:00:46 SQL> SELECT
10:00:46   2  pair
10:00:46   3  ,trend
10:00:46   4  ,gatt
10:00:46   5  ,COUNT(pair)
10:00:46   6  ,AVG(g6)
10:00:46   7  FROM svm6142
10:00:46   8  GROUP BY pair,trend,gatt
10:00:46   9  ORDER BY pair,trend,gatt
10:00:46  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6634 -.00220254
ech_usd 	-1 up	      3690 .003556764
ech_usd 	 1 nup	      6531 -.00231411
ech_usd 	 1 up	      2910  .00383179
ech_usd 	 1		72

Elapsed: 00:00:00.04
10:00:46 SQL> 
10:00:46 SQL> 
10:00:46 SQL> -- Derive NTILE based params:
10:00:46 SQL> 
10:00:46 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.17
10:00:46 SQL> CREATE TABLE svm6162 COMPRESS AS
10:00:46   2  SELECT
10:00:46   3  pair
10:00:46   4  ,ydate
10:00:46   5  ,prdate
10:00:46   6  ,clse
10:00:46   7  ,g6
10:00:46   8  ,gatt
10:00:46   9  ,gattn
10:00:46  10  ,trend
10:00:46  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:00:46  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:00:46  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:00:46  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:00:46  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:00:46  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:00:46  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:00:46  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:00:46  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:00:46  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:00:46  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:00:46  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:00:46  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:00:46  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:00:46  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:00:46  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:00:46  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:00:46  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:00:46  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:00:46  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:00:46  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:00:46  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:00:46  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:00:46  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:00:46  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:00:46  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:00:46  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:00:46  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:00:46  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:00:46  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:00:46  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:00:46  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:00:46  43  ,hh  att32
10:00:46  44  ,d   att33
10:00:46  45  ,w   att34
10:00:46  46  ,mpm att35
10:00:46  47  ,mph att36
10:00:46  48  ,trend att37
10:00:46  49  FROM svm6142
10:00:46  50  ORDER BY ydate
10:00:46  51  /

Table created.

Elapsed: 00:00:05.27
10:00:51 SQL> 
10:00:51 SQL> -- rpt
10:00:51 SQL> 
10:00:51 SQL> SELECT
10:00:51   2  pair
10:00:51   3  ,trend
10:00:51   4  ,gatt
10:00:51   5  ,COUNT(pair)
10:00:51   6  ,AVG(g6)
10:00:51   7  FROM svm6162
10:00:51   8  GROUP BY pair,trend,gatt
10:00:51   9  ORDER BY pair,trend,gatt
10:00:51  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6634 -.00220254
ech_usd 	-1 up	      3690 .003556764
ech_usd 	 1 nup	      6531 -.00231411
ech_usd 	 1 up	      2910  .00383179
ech_usd 	 1		72

Elapsed: 00:00:00.03
10:00:51 SQL> 
10:00:51 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
10:00:51 SQL> CREATE TABLE modsrc COMPRESS AS
10:00:51   2  SELECT
10:00:51   3  pair
10:00:51   4  ,ydate
10:00:51   5  ,prdate
10:00:51   6  ,trend
10:00:51   7  ,g6
10:00:51   8  ,gatt
10:00:51   9  ,gattn
10:00:51  10  FROM svm6162
10:00:51  11  /

Table created.

Elapsed: 00:00:00.08
10:00:51 SQL> 
10:00:51 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.24
10:00:52 SQL> 
10:00:52 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.03
10:00:52 SQL> CREATE TABLE ech_ms610 COMPRESS AS
10:00:52   2  SELECT
10:00:52   3  ydate
10:00:52   4  ,trend ech_trend
10:00:52   5  ,g6    ech_g6
10:00:52   6  ,gatt  ech_gatt
10:00:52   7  ,gattn ech_gattn
10:00:52   8  FROM modsrc
10:00:52   9  /

Table created.

Elapsed: 00:00:00.07
10:00:52 SQL> 
10:00:52 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
10:00:52 SQL> 
10:00:52 SQL> -- I need a copy of the attributes:
10:00:52 SQL> 
10:00:52 SQL> 
10:00:52 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.18
10:00:52 SQL> CREATE TABLE ech_att COMPRESS AS
10:00:52   2  SELECT
10:00:52   3  ydate
10:00:52   4  ,att00 ech_att00
10:00:52   5  ,att01 ech_att01
10:00:52   6  ,att02 ech_att02
10:00:52   7  ,att03 ech_att03
10:00:52   8  ,att04 ech_att04
10:00:52   9  ,att05 ech_att05
10:00:52  10  ,att06 ech_att06
10:00:52  11  ,att07 ech_att07
10:00:52  12  ,att08 ech_att08
10:00:52  13  ,att09 ech_att09
10:00:52  14  ,att10 ech_att10
10:00:52  15  ,att11 ech_att11
10:00:52  16  ,att12 ech_att12
10:00:52  17  ,att13 ech_att13
10:00:52  18  ,att14 ech_att14
10:00:52  19  ,att15 ech_att15
10:00:52  20  ,att16 ech_att16
10:00:52  21  ,att17 ech_att17
10:00:52  22  ,att18 ech_att18
10:00:52  23  ,att19 ech_att19
10:00:52  24  ,att20 ech_att20
10:00:52  25  ,att21 ech_att21
10:00:52  26  ,att22 ech_att22
10:00:52  27  ,att23 ech_att23
10:00:52  28  ,att24 ech_att24
10:00:52  29  ,att25 ech_att25
10:00:52  30  ,att26 ech_att26
10:00:52  31  ,att27 ech_att27
10:00:52  32  ,att28 ech_att28
10:00:52  33  ,att29 ech_att29
10:00:52  34  ,att30 ech_att30
10:00:52  35  ,att31 ech_att31
10:00:52  36  ,att32 ech_att32
10:00:52  37  ,att33 ech_att33
10:00:52  38  ,att34 ech_att34
10:00:52  39  ,att35 ech_att35
10:00:52  40  ,att36 ech_att36
10:00:52  41  ,att37 ech_att37
10:00:52  42  FROM svm6162
10:00:52  43  /

Table created.

Elapsed: 00:00:00.19
10:00:52 SQL> 
10:00:52 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.52
10:00:53 SQL> 
10:00:53 SQL> -- rpt
10:00:53 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19837

Elapsed: 00:00:00.78
10:00:53 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19837

Elapsed: 00:00:00.01
10:00:53 SQL> 
10:00:53 SQL> --
10:00:53 SQL> -- egb610.sql
10:00:53 SQL> --
10:00:53 SQL> 
10:00:53 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:00:53 SQL> 
10:00:53 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.36
10:00:54 SQL> 
10:00:54 SQL> -- I created di5min here:
10:00:54 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:00:54 SQL> 
10:00:54 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:00:54   2  SELECT
10:00:54   3  pair
10:00:54   4  ,ydate
10:00:54   5  ,prdate
10:00:54   6  ,rownum rnum -- acts as t in my time-series
10:00:54   7  ,clse
10:00:54   8  -- Derive a bunch of attributes from clse, the latest price:
10:00:54   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:00:54  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:00:54  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:00:54  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:00:54  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:00:54  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:00:54  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:00:54  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:00:54  17  --
10:00:54  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:00:54  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:00:54  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:00:54  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:00:54  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:00:54  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:00:54  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:00:54  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:00:54  26  --
10:00:54  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:00:54  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:00:54  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:00:54  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:00:54  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:00:54  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:00:54  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:00:54  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:00:54  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:00:54  36  FROM di5min WHERE pair LIKE'%egb%'
10:00:54  37  AND ydate > sysdate - 95
10:00:54  38  ORDER BY ydate
10:00:54  39  /

View created.

Elapsed: 00:00:00.05
10:00:54 SQL> 
10:00:54 SQL> -- rpt
10:00:54 SQL> 
10:00:54 SQL> SELECT
10:00:54   2  pair
10:00:54   3  ,COUNT(pair)
10:00:54   4  ,MIN(clse),MAX(clse)
10:00:54   5  ,MIN(avg6),MAX(avg6)
10:00:54   6  ,MIN(ydate),MAX(ydate)
10:00:54   7  FROM svm6102
10:00:54   8  GROUP BY pair
10:00:54   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19836 .833520557 .893920122 .834199029 .892400287 2010-09-27 10:05:01 2010-12-31 09:55:00

Elapsed: 00:00:00.98
10:00:55 SQL> 
10:00:55 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:00:55 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
10:00:55 SQL> CREATE TABLE svm6122 COMPRESS AS
10:00:55   2  SELECT
10:00:55   3  pair
10:00:55   4  ,ydate
10:00:55   5  ,prdate
10:00:55   6  ,clse
10:00:55   7  -- g6 is important. I want to predict g6:
10:00:55   8  ,ld6 - clse g6
10:00:55   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:00:55  10  -- I want more attributes from the ones I derived above:
10:00:55  11  -- clse relation to moving-min
10:00:55  12  ,clse-min4  cm4
10:00:55  13  ,clse-min6  cm6
10:00:55  14  ,clse-min8  cm8
10:00:55  15  ,clse-min10 cm10
10:00:55  16  ,clse-min12 cm12
10:00:55  17  ,clse-min14 cm14
10:00:55  18  ,clse-min16 cm16
10:00:55  19  ,clse-min18 cm18
10:00:55  20  -- clse relation to moving-avg
10:00:55  21  ,clse-avg4  ca4
10:00:55  22  ,clse-avg6  ca6
10:00:55  23  ,clse-avg8  ca8
10:00:55  24  ,clse-avg10 ca10
10:00:55  25  ,clse-avg12 ca12
10:00:55  26  ,clse-avg14 ca14
10:00:55  27  ,clse-avg16 ca16
10:00:55  28  ,clse-avg18 ca18
10:00:55  29  -- clse relation to moving-max
10:00:55  30  ,clse-max4  cx4
10:00:55  31  ,clse-max6  cx6
10:00:55  32  ,clse-max8  cx8
10:00:55  33  ,clse-max10 cx10
10:00:55  34  ,clse-max12 cx12
10:00:55  35  ,clse-max14 cx14
10:00:55  36  ,clse-max16 cx16
10:00:55  37  ,clse-max18 cx18
10:00:55  38  -- Derive more attributes.
10:00:55  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:00:55  40  -- But COVAR_POP is more stable:
10:00:55  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:00:55  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:00:55  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:00:55  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:00:55  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:00:55  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:00:55  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:00:55  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:00:55  49  -- Derive date related attributes:
10:00:55  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:00:55  51  ,0+TO_CHAR(ydate,'D')d
10:00:55  52  ,0+TO_CHAR(ydate,'W')w
10:00:55  53  -- mpm stands for minutes-past-midnight:
10:00:55  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:00:55  55  -- mph stands for minutes-past-hour:
10:00:55  56  ,0+TO_CHAR(ydate,'MI')mph
10:00:55  57  FROM svm6102
10:00:55  58  ORDER BY ydate
10:00:55  59  /

Table created.

Elapsed: 00:00:02.48
10:00:58 SQL> 
10:00:58 SQL> -- rpt
10:00:58 SQL> 
10:00:58 SQL> SELECT
10:00:58   2  pair
10:00:58   3  ,COUNT(pair)
10:00:58   4  ,MIN(clse),MAX(clse)
10:00:58   5  ,MIN(ydate),MAX(ydate)
10:00:58   6  FROM svm6122
10:00:58   7  GROUP BY pair
10:00:58   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19836 .833520557 .893920122 2010-09-27 10:05:01 2010-12-31 09:55:00

Elapsed: 00:00:00.06
10:00:58 SQL> 
10:00:58 SQL> -- Prepare for derivation of NTILE based params:
10:00:58 SQL> 
10:00:58 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.38
10:00:58 SQL> CREATE TABLE svm6142 COMPRESS AS
10:00:58   2  SELECT
10:00:58   3  pair
10:00:58   4  ,ydate
10:00:58   5  ,prdate
10:00:58   6  ,clse
10:00:58   7  ,g6
10:00:58   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:00:58   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:00:58  10  ,CASE WHEN trend IS NULL THEN 1
10:00:58  11  	    WHEN trend =0      THEN 1
10:00:58  12  	    ELSE trend END trend
10:00:58  13  ,cm4
10:00:58  14  ,cm6
10:00:58  15  ,cm8
10:00:58  16  ,cm10
10:00:58  17  ,cm12
10:00:58  18  ,cm14
10:00:58  19  ,cm16
10:00:58  20  ,cm18
10:00:58  21  --
10:00:58  22  ,ca4
10:00:58  23  ,ca6
10:00:58  24  ,ca8
10:00:58  25  ,ca10
10:00:58  26  ,ca12
10:00:58  27  ,ca14
10:00:58  28  ,ca16
10:00:58  29  ,ca18
10:00:58  30  --
10:00:58  31  ,cx4
10:00:58  32  ,cx6
10:00:58  33  ,cx8
10:00:58  34  ,cx10
10:00:58  35  ,cx12
10:00:58  36  ,cx14
10:00:58  37  ,cx16
10:00:58  38  ,cx18
10:00:58  39  --
10:00:58  40  ,crr4
10:00:58  41  ,crr6
10:00:58  42  ,crr8
10:00:58  43  ,crr10
10:00:58  44  ,crr12
10:00:58  45  ,crr14
10:00:58  46  ,crr16
10:00:58  47  ,crr18
10:00:58  48  --
10:00:58  49  ,hh
10:00:58  50  ,d
10:00:58  51  ,w
10:00:58  52  ,mpm
10:00:58  53  ,mph
10:00:58  54  FROM svm6122
10:00:58  55  ORDER BY ydate
10:00:58  56  /

Table created.

Elapsed: 00:00:00.43
10:00:58 SQL> 
10:00:58 SQL> -- rpt
10:00:58 SQL> 
10:00:58 SQL> SELECT
10:00:58   2  pair
10:00:58   3  ,trend
10:00:58   4  ,gatt
10:00:58   5  ,COUNT(pair)
10:00:58   6  ,AVG(g6)
10:00:58   7  FROM svm6142
10:00:58   8  GROUP BY pair,trend,gatt
10:00:58   9  ORDER BY pair,trend,gatt
10:00:58  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7386 -.00098493
egb_usd 	-1 up	      2801 .003078178
egb_usd 	-1		26
egb_usd 	 1 nup	      6809 -.00128142
egb_usd 	 1 up	      2768 .002961387
egb_usd 	 1		46

6 rows selected.

Elapsed: 00:00:00.04
10:00:59 SQL> 
10:00:59 SQL> 
10:00:59 SQL> -- Derive NTILE based params:
10:00:59 SQL> 
10:00:59 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.27
10:00:59 SQL> CREATE TABLE svm6162 COMPRESS AS
10:00:59   2  SELECT
10:00:59   3  pair
10:00:59   4  ,ydate
10:00:59   5  ,prdate
10:00:59   6  ,clse
10:00:59   7  ,g6
10:00:59   8  ,gatt
10:00:59   9  ,gattn
10:00:59  10  ,trend
10:00:59  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:00:59  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:00:59  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:00:59  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:00:59  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:00:59  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:00:59  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:00:59  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:00:59  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:00:59  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:00:59  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:00:59  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:00:59  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:00:59  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:00:59  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:00:59  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:00:59  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:00:59  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:00:59  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:00:59  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:00:59  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:00:59  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:00:59  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:00:59  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:00:59  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:00:59  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:00:59  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:00:59  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:00:59  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:00:59  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:00:59  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:00:59  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:00:59  43  ,hh  att32
10:00:59  44  ,d   att33
10:00:59  45  ,w   att34
10:00:59  46  ,mpm att35
10:00:59  47  ,mph att36
10:00:59  48  ,trend att37
10:00:59  49  FROM svm6142
10:00:59  50  ORDER BY ydate
10:00:59  51  /

Table created.

Elapsed: 00:00:05.69
10:01:04 SQL> 
10:01:04 SQL> -- rpt
10:01:04 SQL> 
10:01:04 SQL> SELECT
10:01:04   2  pair
10:01:04   3  ,trend
10:01:04   4  ,gatt
10:01:04   5  ,COUNT(pair)
10:01:04   6  ,AVG(g6)
10:01:04   7  FROM svm6162
10:01:04   8  GROUP BY pair,trend,gatt
10:01:04   9  ORDER BY pair,trend,gatt
10:01:04  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7386 -.00098493
egb_usd 	-1 up	      2801 .003078178
egb_usd 	-1		26
egb_usd 	 1 nup	      6809 -.00128142
egb_usd 	 1 up	      2768 .002961387
egb_usd 	 1		46

6 rows selected.

Elapsed: 00:00:00.03
10:01:04 SQL> 
10:01:04 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
10:01:05 SQL> CREATE TABLE modsrc COMPRESS AS
10:01:05   2  SELECT
10:01:05   3  pair
10:01:05   4  ,ydate
10:01:05   5  ,prdate
10:01:05   6  ,trend
10:01:05   7  ,g6
10:01:05   8  ,gatt
10:01:05   9  ,gattn
10:01:05  10  FROM svm6162
10:01:05  11  /

Table created.

Elapsed: 00:00:00.09
10:01:05 SQL> 
10:01:05 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
10:01:05 SQL> 
10:01:05 SQL> DROP   TABLE egb_ms610 ;

Table dropped.

Elapsed: 00:00:00.03
10:01:05 SQL> CREATE TABLE egb_ms610 COMPRESS AS
10:01:05   2  SELECT
10:01:05   3  ydate
10:01:05   4  ,trend egb_trend
10:01:05   5  ,g6    egb_g6
10:01:05   6  ,gatt  egb_gatt
10:01:05   7  ,gattn egb_gattn
10:01:05   8  FROM modsrc
10:01:05   9  /

Table created.

Elapsed: 00:00:00.09
10:01:05 SQL> 
10:01:05 SQL> ANALYZE TABLE egb_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.28
10:01:05 SQL> 
10:01:05 SQL> -- I need a copy of the attributes:
10:01:05 SQL> 
10:01:05 SQL> 
10:01:05 SQL> DROP   TABLE egb_att;

Table dropped.

Elapsed: 00:00:00.07
10:01:05 SQL> CREATE TABLE egb_att COMPRESS AS
10:01:05   2  SELECT
10:01:05   3  ydate
10:01:05   4  ,att00 egb_att00
10:01:05   5  ,att01 egb_att01
10:01:05   6  ,att02 egb_att02
10:01:05   7  ,att03 egb_att03
10:01:05   8  ,att04 egb_att04
10:01:05   9  ,att05 egb_att05
10:01:05  10  ,att06 egb_att06
10:01:05  11  ,att07 egb_att07
10:01:05  12  ,att08 egb_att08
10:01:05  13  ,att09 egb_att09
10:01:05  14  ,att10 egb_att10
10:01:05  15  ,att11 egb_att11
10:01:05  16  ,att12 egb_att12
10:01:05  17  ,att13 egb_att13
10:01:05  18  ,att14 egb_att14
10:01:05  19  ,att15 egb_att15
10:01:05  20  ,att16 egb_att16
10:01:05  21  ,att17 egb_att17
10:01:05  22  ,att18 egb_att18
10:01:05  23  ,att19 egb_att19
10:01:05  24  ,att20 egb_att20
10:01:05  25  ,att21 egb_att21
10:01:05  26  ,att22 egb_att22
10:01:05  27  ,att23 egb_att23
10:01:05  28  ,att24 egb_att24
10:01:05  29  ,att25 egb_att25
10:01:05  30  ,att26 egb_att26
10:01:05  31  ,att27 egb_att27
10:01:05  32  ,att28 egb_att28
10:01:05  33  ,att29 egb_att29
10:01:05  34  ,att30 egb_att30
10:01:05  35  ,att31 egb_att31
10:01:05  36  ,att32 egb_att32
10:01:05  37  ,att33 egb_att33
10:01:05  38  ,att34 egb_att34
10:01:05  39  ,att35 egb_att35
10:01:05  40  ,att36 egb_att36
10:01:05  41  ,att37 egb_att37
10:01:05  42  FROM svm6162
10:01:05  43  /

Table created.

Elapsed: 00:00:00.18
10:01:06 SQL> 
10:01:06 SQL> ANALYZE TABLE egb_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
10:01:06 SQL> 
10:01:06 SQL> -- rpt
10:01:06 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19836

Elapsed: 00:00:00.94
10:01:07 SQL> SELECT COUNT(*)FROM egb_att;

  COUNT(*)
----------
     19836

Elapsed: 00:00:00.00
10:01:07 SQL> 
10:01:07 SQL> --
10:01:07 SQL> -- ejp610.sql
10:01:07 SQL> --
10:01:07 SQL> 
10:01:07 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:01:07 SQL> 
10:01:07 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.54
10:01:08 SQL> 
10:01:08 SQL> -- I created di5min here:
10:01:08 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:01:08 SQL> 
10:01:08 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:01:08   2  SELECT
10:01:08   3  pair
10:01:08   4  ,ydate
10:01:08   5  ,prdate
10:01:08   6  ,rownum rnum -- acts as t in my time-series
10:01:08   7  ,clse
10:01:08   8  -- Derive a bunch of attributes from clse, the latest price:
10:01:08   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:01:08  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:01:08  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:01:08  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:01:08  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:01:08  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:01:08  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:01:08  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:01:08  17  --
10:01:08  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:01:08  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:01:08  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:01:08  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:01:08  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:01:08  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:01:08  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:01:08  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:01:08  26  --
10:01:08  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:01:08  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:01:08  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:01:08  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:01:08  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:01:08  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:01:08  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:01:08  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:01:08  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:01:08  36  FROM di5min WHERE pair LIKE'%ejp%'
10:01:08  37  AND ydate > sysdate - 95
10:01:08  38  ORDER BY ydate
10:01:08  39  /

View created.

Elapsed: 00:00:00.04
10:01:08 SQL> 
10:01:08 SQL> -- rpt
10:01:08 SQL> 
10:01:08 SQL> SELECT
10:01:08   2  pair
10:01:08   3  ,COUNT(pair)
10:01:08   4  ,MIN(clse),MAX(clse)
10:01:08   5  ,MIN(avg6),MAX(avg6)
10:01:08   6  ,MIN(ydate),MAX(ydate)
10:01:08   7  FROM svm6102
10:01:08   8  GROUP BY pair
10:01:08   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ejp_usd       19834 107.643765	115.63485 107.776148 115.509678 2010-09-27 10:05:01 2010-12-31 09:55:00

Elapsed: 00:00:00.85
10:01:08 SQL> 
10:01:08 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:01:08 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.33
10:01:09 SQL> CREATE TABLE svm6122 COMPRESS AS
10:01:09   2  SELECT
10:01:09   3  pair
10:01:09   4  ,ydate
10:01:09   5  ,prdate
10:01:09   6  ,clse
10:01:09   7  -- g6 is important. I want to predict g6:
10:01:09   8  ,ld6 - clse g6
10:01:09   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:01:09  10  -- I want more attributes from the ones I derived above:
10:01:09  11  -- clse relation to moving-min
10:01:09  12  ,clse-min4  cm4
10:01:09  13  ,clse-min6  cm6
10:01:09  14  ,clse-min8  cm8
10:01:09  15  ,clse-min10 cm10
10:01:09  16  ,clse-min12 cm12
10:01:09  17  ,clse-min14 cm14
10:01:09  18  ,clse-min16 cm16
10:01:09  19  ,clse-min18 cm18
10:01:09  20  -- clse relation to moving-avg
10:01:09  21  ,clse-avg4  ca4
10:01:09  22  ,clse-avg6  ca6
10:01:09  23  ,clse-avg8  ca8
10:01:09  24  ,clse-avg10 ca10
10:01:09  25  ,clse-avg12 ca12
10:01:09  26  ,clse-avg14 ca14
10:01:09  27  ,clse-avg16 ca16
10:01:09  28  ,clse-avg18 ca18
10:01:09  29  -- clse relation to moving-max
10:01:09  30  ,clse-max4  cx4
10:01:09  31  ,clse-max6  cx6
10:01:09  32  ,clse-max8  cx8
10:01:09  33  ,clse-max10 cx10
10:01:09  34  ,clse-max12 cx12
10:01:09  35  ,clse-max14 cx14
10:01:09  36  ,clse-max16 cx16
10:01:09  37  ,clse-max18 cx18
10:01:09  38  -- Derive more attributes.
10:01:09  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:01:09  40  -- But COVAR_POP is more stable:
10:01:09  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:01:09  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:01:09  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:01:09  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:01:09  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:01:09  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:01:09  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:01:09  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:01:09  49  -- Derive date related attributes:
10:01:09  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:01:09  51  ,0+TO_CHAR(ydate,'D')d
10:01:09  52  ,0+TO_CHAR(ydate,'W')w
10:01:09  53  -- mpm stands for minutes-past-midnight:
10:01:09  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:01:09  55  -- mph stands for minutes-past-hour:
10:01:09  56  ,0+TO_CHAR(ydate,'MI')mph
10:01:09  57  FROM svm6102
10:01:09  58  ORDER BY ydate
10:01:09  59  /

Table created.

Elapsed: 00:00:02.11
10:01:11 SQL> 
10:01:11 SQL> -- rpt
10:01:11 SQL> 
10:01:11 SQL> SELECT
10:01:11   2  pair
10:01:11   3  ,COUNT(pair)
10:01:11   4  ,MIN(clse),MAX(clse)
10:01:11   5  ,MIN(ydate),MAX(ydate)
10:01:11   6  FROM svm6122
10:01:11   7  GROUP BY pair
10:01:11   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ejp_usd       19834 107.643765	115.63485 2010-09-27 10:05:01 2010-12-31 09:55:00

Elapsed: 00:00:00.04
10:01:11 SQL> 
10:01:11 SQL> -- Prepare for derivation of NTILE based params:
10:01:11 SQL> 
10:01:11 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.29
10:01:11 SQL> CREATE TABLE svm6142 COMPRESS AS
10:01:11   2  SELECT
10:01:11   3  pair
10:01:11   4  ,ydate
10:01:11   5  ,prdate
10:01:11   6  ,clse
10:01:11   7  ,g6
10:01:11   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:01:11   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:01:11  10  ,CASE WHEN trend IS NULL THEN 1
10:01:11  11  	    WHEN trend =0      THEN 1
10:01:11  12  	    ELSE trend END trend
10:01:11  13  ,cm4
10:01:11  14  ,cm6
10:01:11  15  ,cm8
10:01:11  16  ,cm10
10:01:11  17  ,cm12
10:01:11  18  ,cm14
10:01:11  19  ,cm16
10:01:11  20  ,cm18
10:01:11  21  --
10:01:11  22  ,ca4
10:01:11  23  ,ca6
10:01:11  24  ,ca8
10:01:11  25  ,ca10
10:01:11  26  ,ca12
10:01:11  27  ,ca14
10:01:11  28  ,ca16
10:01:11  29  ,ca18
10:01:11  30  --
10:01:11  31  ,cx4
10:01:11  32  ,cx6
10:01:11  33  ,cx8
10:01:11  34  ,cx10
10:01:11  35  ,cx12
10:01:11  36  ,cx14
10:01:11  37  ,cx16
10:01:11  38  ,cx18
10:01:11  39  --
10:01:11  40  ,crr4
10:01:11  41  ,crr6
10:01:11  42  ,crr8
10:01:11  43  ,crr10
10:01:11  44  ,crr12
10:01:11  45  ,crr14
10:01:11  46  ,crr16
10:01:11  47  ,crr18
10:01:11  48  --
10:01:11  49  ,hh
10:01:11  50  ,d
10:01:11  51  ,w
10:01:11  52  ,mpm
10:01:11  53  ,mph
10:01:11  54  FROM svm6122
10:01:11  55  ORDER BY ydate
10:01:11  56  /

Table created.

Elapsed: 00:00:00.38
10:01:12 SQL> 
10:01:12 SQL> -- rpt
10:01:12 SQL> 
10:01:12 SQL> SELECT
10:01:12   2  pair
10:01:12   3  ,trend
10:01:12   4  ,gatt
10:01:12   5  ,COUNT(pair)
10:01:12   6  ,AVG(g6)
10:01:12   7  FROM svm6142
10:01:12   8  GROUP BY pair,trend,gatt
10:01:12   9  ORDER BY pair,trend,gatt
10:01:12  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4894 -.32214269
ejp_usd 	-1 up	      5056 .269043092
ejp_usd 	-1		 2
ejp_usd 	 1 nup	      5067 -.28847462
ejp_usd 	 1 up	      4745 .278836164
ejp_usd 	 1		70

6 rows selected.

Elapsed: 00:00:00.03
10:01:12 SQL> 
10:01:12 SQL> 
10:01:12 SQL> -- Derive NTILE based params:
10:01:12 SQL> 
10:01:12 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.19
10:01:12 SQL> CREATE TABLE svm6162 COMPRESS AS
10:01:12   2  SELECT
10:01:12   3  pair
10:01:12   4  ,ydate
10:01:12   5  ,prdate
10:01:12   6  ,clse
10:01:12   7  ,g6
10:01:12   8  ,gatt
10:01:12   9  ,gattn
10:01:12  10  ,trend
10:01:12  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:01:12  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:01:12  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:01:12  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:01:12  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:01:12  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:01:12  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:01:12  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:01:12  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:01:12  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:01:12  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:01:12  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:01:12  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:01:12  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:01:12  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:01:12  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:01:12  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:01:12  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:01:12  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:01:12  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:01:12  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:01:12  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:01:12  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:01:12  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:01:12  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:01:12  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:01:12  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:01:12  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:01:12  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:01:12  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:01:12  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:01:12  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:01:12  43  ,hh  att32
10:01:12  44  ,d   att33
10:01:12  45  ,w   att34
10:01:12  46  ,mpm att35
10:01:12  47  ,mph att36
10:01:12  48  ,trend att37
10:01:12  49  FROM svm6142
10:01:12  50  ORDER BY ydate
10:01:12  51  /

Table created.

Elapsed: 00:00:04.93
10:01:17 SQL> 
10:01:17 SQL> -- rpt
10:01:17 SQL> 
10:01:17 SQL> SELECT
10:01:17   2  pair
10:01:17   3  ,trend
10:01:17   4  ,gatt
10:01:17   5  ,COUNT(pair)
10:01:17   6  ,AVG(g6)
10:01:17   7  FROM svm6162
10:01:17   8  GROUP BY pair,trend,gatt
10:01:17   9  ORDER BY pair,trend,gatt
10:01:17  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4894 -.32214269
ejp_usd 	-1 up	      5056 .269043092
ejp_usd 	-1		 2
ejp_usd 	 1 nup	      5067 -.28847462
ejp_usd 	 1 up	      4745 .278836164
ejp_usd 	 1		70

6 rows selected.

Elapsed: 00:00:00.02
10:01:17 SQL> 
10:01:17 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
10:01:17 SQL> CREATE TABLE modsrc COMPRESS AS
10:01:17   2  SELECT
10:01:17   3  pair
10:01:17   4  ,ydate
10:01:17   5  ,prdate
10:01:17   6  ,trend
10:01:17   7  ,g6
10:01:17   8  ,gatt
10:01:17   9  ,gattn
10:01:17  10  FROM svm6162
10:01:17  11  /

Table created.

Elapsed: 00:00:00.10
10:01:17 SQL> 
10:01:17 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.26
10:01:17 SQL> 
10:01:17 SQL> DROP   TABLE ejp_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
10:01:17 SQL> CREATE TABLE ejp_ms610 COMPRESS AS
10:01:17   2  SELECT
10:01:17   3  ydate
10:01:17   4  ,trend ejp_trend
10:01:17   5  ,g6    ejp_g6
10:01:17   6  ,gatt  ejp_gatt
10:01:17   7  ,gattn ejp_gattn
10:01:17   8  FROM modsrc
10:01:17   9  /

Table created.

Elapsed: 00:00:00.09
10:01:17 SQL> 
10:01:17 SQL> ANALYZE TABLE ejp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
10:01:18 SQL> 
10:01:18 SQL> -- I need a copy of the attributes:
10:01:18 SQL> 
10:01:18 SQL> 
10:01:18 SQL> DROP   TABLE ejp_att;

Table dropped.

Elapsed: 00:00:00.05
10:01:18 SQL> CREATE TABLE ejp_att COMPRESS AS
10:01:18   2  SELECT
10:01:18   3  ydate
10:01:18   4  ,att00 ejp_att00
10:01:18   5  ,att01 ejp_att01
10:01:18   6  ,att02 ejp_att02
10:01:18   7  ,att03 ejp_att03
10:01:18   8  ,att04 ejp_att04
10:01:18   9  ,att05 ejp_att05
10:01:18  10  ,att06 ejp_att06
10:01:18  11  ,att07 ejp_att07
10:01:18  12  ,att08 ejp_att08
10:01:18  13  ,att09 ejp_att09
10:01:18  14  ,att10 ejp_att10
10:01:18  15  ,att11 ejp_att11
10:01:18  16  ,att12 ejp_att12
10:01:18  17  ,att13 ejp_att13
10:01:18  18  ,att14 ejp_att14
10:01:18  19  ,att15 ejp_att15
10:01:18  20  ,att16 ejp_att16
10:01:18  21  ,att17 ejp_att17
10:01:18  22  ,att18 ejp_att18
10:01:18  23  ,att19 ejp_att19
10:01:18  24  ,att20 ejp_att20
10:01:18  25  ,att21 ejp_att21
10:01:18  26  ,att22 ejp_att22
10:01:18  27  ,att23 ejp_att23
10:01:18  28  ,att24 ejp_att24
10:01:18  29  ,att25 ejp_att25
10:01:18  30  ,att26 ejp_att26
10:01:18  31  ,att27 ejp_att27
10:01:18  32  ,att28 ejp_att28
10:01:18  33  ,att29 ejp_att29
10:01:18  34  ,att30 ejp_att30
10:01:18  35  ,att31 ejp_att31
10:01:18  36  ,att32 ejp_att32
10:01:18  37  ,att33 ejp_att33
10:01:18  38  ,att34 ejp_att34
10:01:18  39  ,att35 ejp_att35
10:01:18  40  ,att36 ejp_att36
10:01:18  41  ,att37 ejp_att37
10:01:18  42  FROM svm6162
10:01:18  43  /

Table created.

Elapsed: 00:00:00.16
10:01:18 SQL> 
10:01:18 SQL> ANALYZE TABLE ejp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
10:01:18 SQL> 
10:01:18 SQL> -- rpt
10:01:18 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19834

Elapsed: 00:00:00.88
10:01:19 SQL> SELECT COUNT(*)FROM ejp_att;

  COUNT(*)
----------
     19834

Elapsed: 00:00:00.00
10:01:19 SQL> 
10:01:19 SQL> --
10:01:19 SQL> -- ajp610.sql
10:01:19 SQL> --
10:01:19 SQL> 
10:01:19 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:01:19 SQL> 
10:01:19 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.37
10:01:20 SQL> 
10:01:20 SQL> -- I created di5min here:
10:01:20 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:01:20 SQL> 
10:01:20 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:01:20   2  SELECT
10:01:20   3  pair
10:01:20   4  ,ydate
10:01:20   5  ,prdate
10:01:20   6  ,rownum rnum -- acts as t in my time-series
10:01:20   7  ,clse
10:01:20   8  -- Derive a bunch of attributes from clse, the latest price:
10:01:20   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:01:20  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:01:20  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:01:20  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:01:20  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:01:20  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:01:20  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:01:20  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:01:20  17  --
10:01:20  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:01:20  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:01:20  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:01:20  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:01:20  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:01:20  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:01:20  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:01:20  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:01:20  26  --
10:01:20  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:01:20  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:01:20  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:01:20  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:01:20  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:01:20  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:01:20  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:01:20  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:01:20  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:01:20  36  FROM di5min WHERE pair LIKE'%ajp%'
10:01:20  37  AND ydate > sysdate - 95
10:01:20  38  ORDER BY ydate
10:01:20  39  /

View created.

Elapsed: 00:00:00.07
10:01:20 SQL> 
10:01:20 SQL> -- rpt
10:01:20 SQL> 
10:01:20 SQL> SELECT
10:01:20   2  pair
10:01:20   3  ,COUNT(pair)
10:01:20   4  ,MIN(clse),MAX(clse)
10:01:20   5  ,MIN(avg6),MAX(avg6)
10:01:20   6  ,MIN(ydate),MAX(ydate)
10:01:20   7  FROM svm6102
10:01:20   8  GROUP BY pair
10:01:20   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ajp_usd       19831  78.249976 83.6669853 78.5106193  83.546306 2010-09-27 10:05:01 2010-12-31 09:55:00

Elapsed: 00:00:00.80
10:01:20 SQL> 
10:01:20 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:01:20 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:01.01
10:01:21 SQL> CREATE TABLE svm6122 COMPRESS AS
10:01:21   2  SELECT
10:01:21   3  pair
10:01:21   4  ,ydate
10:01:21   5  ,prdate
10:01:21   6  ,clse
10:01:21   7  -- g6 is important. I want to predict g6:
10:01:21   8  ,ld6 - clse g6
10:01:21   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:01:21  10  -- I want more attributes from the ones I derived above:
10:01:21  11  -- clse relation to moving-min
10:01:21  12  ,clse-min4  cm4
10:01:21  13  ,clse-min6  cm6
10:01:21  14  ,clse-min8  cm8
10:01:21  15  ,clse-min10 cm10
10:01:21  16  ,clse-min12 cm12
10:01:21  17  ,clse-min14 cm14
10:01:21  18  ,clse-min16 cm16
10:01:21  19  ,clse-min18 cm18
10:01:21  20  -- clse relation to moving-avg
10:01:21  21  ,clse-avg4  ca4
10:01:21  22  ,clse-avg6  ca6
10:01:21  23  ,clse-avg8  ca8
10:01:21  24  ,clse-avg10 ca10
10:01:21  25  ,clse-avg12 ca12
10:01:21  26  ,clse-avg14 ca14
10:01:21  27  ,clse-avg16 ca16
10:01:21  28  ,clse-avg18 ca18
10:01:21  29  -- clse relation to moving-max
10:01:21  30  ,clse-max4  cx4
10:01:21  31  ,clse-max6  cx6
10:01:21  32  ,clse-max8  cx8
10:01:21  33  ,clse-max10 cx10
10:01:21  34  ,clse-max12 cx12
10:01:21  35  ,clse-max14 cx14
10:01:21  36  ,clse-max16 cx16
10:01:21  37  ,clse-max18 cx18
10:01:21  38  -- Derive more attributes.
10:01:21  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:01:21  40  -- But COVAR_POP is more stable:
10:01:21  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:01:21  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:01:21  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:01:21  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:01:21  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:01:21  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:01:21  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:01:21  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:01:21  49  -- Derive date related attributes:
10:01:21  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:01:21  51  ,0+TO_CHAR(ydate,'D')d
10:01:21  52  ,0+TO_CHAR(ydate,'W')w
10:01:21  53  -- mpm stands for minutes-past-midnight:
10:01:21  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:01:21  55  -- mph stands for minutes-past-hour:
10:01:21  56  ,0+TO_CHAR(ydate,'MI')mph
10:01:21  57  FROM svm6102
10:01:21  58  ORDER BY ydate
10:01:21  59  /

Table created.

Elapsed: 00:00:02.04
10:01:23 SQL> 
10:01:23 SQL> -- rpt
10:01:23 SQL> 
10:01:23 SQL> SELECT
10:01:23   2  pair
10:01:23   3  ,COUNT(pair)
10:01:23   4  ,MIN(clse),MAX(clse)
10:01:23   5  ,MIN(ydate),MAX(ydate)
10:01:23   6  FROM svm6122
10:01:23   7  GROUP BY pair
10:01:23   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ajp_usd       19831  78.249976 83.6669853 2010-09-27 10:05:01 2010-12-31 09:55:00

Elapsed: 00:00:00.07
10:01:24 SQL> 
10:01:24 SQL> -- Prepare for derivation of NTILE based params:
10:01:24 SQL> 
10:01:24 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.25
10:01:24 SQL> CREATE TABLE svm6142 COMPRESS AS
10:01:24   2  SELECT
10:01:24   3  pair
10:01:24   4  ,ydate
10:01:24   5  ,prdate
10:01:24   6  ,clse
10:01:24   7  ,g6
10:01:24   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:01:24   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:01:24  10  ,CASE WHEN trend IS NULL THEN 1
10:01:24  11  	    WHEN trend =0      THEN 1
10:01:24  12  	    ELSE trend END trend
10:01:24  13  ,cm4
10:01:24  14  ,cm6
10:01:24  15  ,cm8
10:01:24  16  ,cm10
10:01:24  17  ,cm12
10:01:24  18  ,cm14
10:01:24  19  ,cm16
10:01:24  20  ,cm18
10:01:24  21  --
10:01:24  22  ,ca4
10:01:24  23  ,ca6
10:01:24  24  ,ca8
10:01:24  25  ,ca10
10:01:24  26  ,ca12
10:01:24  27  ,ca14
10:01:24  28  ,ca16
10:01:24  29  ,ca18
10:01:24  30  --
10:01:24  31  ,cx4
10:01:24  32  ,cx6
10:01:24  33  ,cx8
10:01:24  34  ,cx10
10:01:24  35  ,cx12
10:01:24  36  ,cx14
10:01:24  37  ,cx16
10:01:24  38  ,cx18
10:01:24  39  --
10:01:24  40  ,crr4
10:01:24  41  ,crr6
10:01:24  42  ,crr8
10:01:24  43  ,crr10
10:01:24  44  ,crr12
10:01:24  45  ,crr14
10:01:24  46  ,crr16
10:01:24  47  ,crr18
10:01:24  48  --
10:01:24  49  ,hh
10:01:24  50  ,d
10:01:24  51  ,w
10:01:24  52  ,mpm
10:01:24  53  ,mph
10:01:24  54  FROM svm6122
10:01:24  55  ORDER BY ydate
10:01:24  56  /

Table created.

Elapsed: 00:00:00.45
10:01:24 SQL> 
10:01:24 SQL> -- rpt
10:01:24 SQL> 
10:01:24 SQL> SELECT
10:01:24   2  pair
10:01:24   3  ,trend
10:01:24   4  ,gatt
10:01:24   5  ,COUNT(pair)
10:01:24   6  ,AVG(g6)
10:01:24   7  FROM svm6142
10:01:24   8  GROUP BY pair,trend,gatt
10:01:24   9  ORDER BY pair,trend,gatt
10:01:24  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4178 -.22712839
ajp_usd 	-1 up	      5268 .218401441
ajp_usd 	-1		45
ajp_usd 	 1 nup	      5358 -.19965621
ajp_usd 	 1 up	      4955 .203565518
ajp_usd 	 1		27

6 rows selected.

Elapsed: 00:00:00.06
10:01:24 SQL> 
10:01:24 SQL> 
10:01:24 SQL> -- Derive NTILE based params:
10:01:24 SQL> 
10:01:24 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.14
10:01:24 SQL> CREATE TABLE svm6162 COMPRESS AS
10:01:24   2  SELECT
10:01:24   3  pair
10:01:24   4  ,ydate
10:01:24   5  ,prdate
10:01:24   6  ,clse
10:01:24   7  ,g6
10:01:24   8  ,gatt
10:01:24   9  ,gattn
10:01:24  10  ,trend
10:01:24  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:01:24  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:01:24  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:01:24  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:01:24  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:01:24  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:01:24  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:01:24  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:01:24  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:01:24  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:01:24  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:01:24  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:01:24  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:01:24  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:01:24  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:01:24  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:01:24  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:01:24  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:01:24  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:01:24  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:01:24  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:01:24  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:01:24  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:01:24  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:01:24  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:01:24  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:01:24  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:01:24  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:01:24  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:01:24  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:01:24  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:01:24  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:01:24  43  ,hh  att32
10:01:24  44  ,d   att33
10:01:24  45  ,w   att34
10:01:24  46  ,mpm att35
10:01:24  47  ,mph att36
10:01:24  48  ,trend att37
10:01:24  49  FROM svm6142
10:01:24  50  ORDER BY ydate
10:01:24  51  /

Table created.

Elapsed: 00:00:04.89
10:01:29 SQL> 
10:01:29 SQL> -- rpt
10:01:29 SQL> 
10:01:29 SQL> SELECT
10:01:29   2  pair
10:01:29   3  ,trend
10:01:29   4  ,gatt
10:01:29   5  ,COUNT(pair)
10:01:29   6  ,AVG(g6)
10:01:29   7  FROM svm6162
10:01:29   8  GROUP BY pair,trend,gatt
10:01:29   9  ORDER BY pair,trend,gatt
10:01:29  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4178 -.22712839
ajp_usd 	-1 up	      5268 .218401441
ajp_usd 	-1		45
ajp_usd 	 1 nup	      5358 -.19965621
ajp_usd 	 1 up	      4955 .203565518
ajp_usd 	 1		27

6 rows selected.

Elapsed: 00:00:00.05
10:01:29 SQL> 
10:01:29 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.21
10:01:30 SQL> CREATE TABLE modsrc COMPRESS AS
10:01:30   2  SELECT
10:01:30   3  pair
10:01:30   4  ,ydate
10:01:30   5  ,prdate
10:01:30   6  ,trend
10:01:30   7  ,g6
10:01:30   8  ,gatt
10:01:30   9  ,gattn
10:01:30  10  FROM svm6162
10:01:30  11  /

Table created.

Elapsed: 00:00:00.08
10:01:30 SQL> 
10:01:30 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
10:01:30 SQL> 
10:01:30 SQL> DROP   TABLE ajp_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
10:01:30 SQL> CREATE TABLE ajp_ms610 COMPRESS AS
10:01:30   2  SELECT
10:01:30   3  ydate
10:01:30   4  ,trend ajp_trend
10:01:30   5  ,g6    ajp_g6
10:01:30   6  ,gatt  ajp_gatt
10:01:30   7  ,gattn ajp_gattn
10:01:30   8  FROM modsrc
10:01:30   9  /

Table created.

Elapsed: 00:00:00.08
10:01:30 SQL> 
10:01:30 SQL> ANALYZE TABLE ajp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
10:01:30 SQL> 
10:01:30 SQL> -- I need a copy of the attributes:
10:01:30 SQL> 
10:01:30 SQL> 
10:01:30 SQL> DROP   TABLE ajp_att;

Table dropped.

Elapsed: 00:00:00.05
10:01:30 SQL> CREATE TABLE ajp_att COMPRESS AS
10:01:30   2  SELECT
10:01:30   3  ydate
10:01:30   4  ,att00 ajp_att00
10:01:30   5  ,att01 ajp_att01
10:01:30   6  ,att02 ajp_att02
10:01:30   7  ,att03 ajp_att03
10:01:30   8  ,att04 ajp_att04
10:01:30   9  ,att05 ajp_att05
10:01:30  10  ,att06 ajp_att06
10:01:30  11  ,att07 ajp_att07
10:01:30  12  ,att08 ajp_att08
10:01:30  13  ,att09 ajp_att09
10:01:30  14  ,att10 ajp_att10
10:01:30  15  ,att11 ajp_att11
10:01:30  16  ,att12 ajp_att12
10:01:30  17  ,att13 ajp_att13
10:01:30  18  ,att14 ajp_att14
10:01:30  19  ,att15 ajp_att15
10:01:30  20  ,att16 ajp_att16
10:01:30  21  ,att17 ajp_att17
10:01:30  22  ,att18 ajp_att18
10:01:30  23  ,att19 ajp_att19
10:01:30  24  ,att20 ajp_att20
10:01:30  25  ,att21 ajp_att21
10:01:30  26  ,att22 ajp_att22
10:01:30  27  ,att23 ajp_att23
10:01:30  28  ,att24 ajp_att24
10:01:30  29  ,att25 ajp_att25
10:01:30  30  ,att26 ajp_att26
10:01:30  31  ,att27 ajp_att27
10:01:30  32  ,att28 ajp_att28
10:01:30  33  ,att29 ajp_att29
10:01:30  34  ,att30 ajp_att30
10:01:30  35  ,att31 ajp_att31
10:01:30  36  ,att32 ajp_att32
10:01:30  37  ,att33 ajp_att33
10:01:30  38  ,att34 ajp_att34
10:01:30  39  ,att35 ajp_att35
10:01:30  40  ,att36 ajp_att36
10:01:30  41  ,att37 ajp_att37
10:01:30  42  FROM svm6162
10:01:30  43  /

Table created.

Elapsed: 00:00:00.17
10:01:30 SQL> 
10:01:30 SQL> ANALYZE TABLE ajp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
10:01:31 SQL> 
10:01:31 SQL> -- rpt
10:01:31 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19831

Elapsed: 00:00:00.78
10:01:32 SQL> SELECT COUNT(*)FROM ajp_att;

  COUNT(*)
----------
     19831

Elapsed: 00:00:00.00
10:01:32 SQL> 
10:01:32 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
