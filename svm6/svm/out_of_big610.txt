
SQL*Plus: Release 11.2.0.1.0 Production on Thu Jan 6 21:29:44 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

21:29:44 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
21:29:44 SQL> 21:29:44 SQL> --
21:29:44 SQL> -- eur610.sql
21:29:44 SQL> --
21:29:44 SQL> 
21:29:44 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:29:44 SQL> 
21:29:44 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.03
21:29:44 SQL> 
21:29:44 SQL> -- I created di5min here:
21:29:44 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:29:44 SQL> 
21:29:44 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:29:44   2  SELECT
21:29:44   3  pair
21:29:44   4  ,ydate
21:29:44   5  ,prdate
21:29:44   6  ,rownum rnum -- acts as t in my time-series
21:29:44   7  ,clse
21:29:44   8  -- Derive a bunch of attributes from clse, the latest price:
21:29:44   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:29:44  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:29:44  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:29:44  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:29:44  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:29:44  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:29:44  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:29:44  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:29:44  17  --
21:29:44  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:29:44  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:29:44  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:29:44  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:29:44  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:29:44  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:29:44  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:29:44  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:29:44  26  --
21:29:44  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:29:44  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:29:44  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:29:44  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:29:44  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:29:44  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:29:44  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:29:44  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:29:44  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:29:44  36  FROM di5min WHERE pair LIKE'%eur%'
21:29:44  37  AND ydate > sysdate - 95
21:29:44  38  ORDER BY ydate
21:29:44  39  /

View created.

Elapsed: 00:00:00.19
21:29:44 SQL> 
21:29:44 SQL> -- rpt
21:29:44 SQL> 
21:29:44 SQL> SELECT
21:29:44   2  pair
21:29:44   3  ,COUNT(pair)
21:29:44   4  ,MIN(clse),MAX(clse)
21:29:44   5  ,MIN(avg6),MAX(avg6)
21:29:44   6  ,MIN(ydate),MAX(ydate)
21:29:44   7  FROM svm6102
21:29:44   8  GROUP BY pair
21:29:44   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19814    1.29735	   1.4273 1.29875103 1.42436233 2010-10-03 21:30:01 2011-01-06 21:25:00

Elapsed: 00:00:00.94
21:29:45 SQL> 
21:29:45 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:29:45 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.35
21:29:45 SQL> CREATE TABLE svm6122 COMPRESS AS
21:29:45   2  SELECT
21:29:45   3  pair
21:29:45   4  ,ydate
21:29:45   5  ,prdate
21:29:45   6  ,clse
21:29:45   7  -- g6 is important. I want to predict g6:
21:29:45   8  ,ld6 - clse g6
21:29:45   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:29:45  10  -- I want more attributes from the ones I derived above:
21:29:45  11  -- clse relation to moving-min
21:29:45  12  ,clse-min4  cm4
21:29:45  13  ,clse-min6  cm6
21:29:45  14  ,clse-min8  cm8
21:29:45  15  ,clse-min10 cm10
21:29:45  16  ,clse-min12 cm12
21:29:45  17  ,clse-min14 cm14
21:29:45  18  ,clse-min16 cm16
21:29:45  19  ,clse-min18 cm18
21:29:45  20  -- clse relation to moving-avg
21:29:45  21  ,clse-avg4  ca4
21:29:45  22  ,clse-avg6  ca6
21:29:45  23  ,clse-avg8  ca8
21:29:45  24  ,clse-avg10 ca10
21:29:45  25  ,clse-avg12 ca12
21:29:45  26  ,clse-avg14 ca14
21:29:45  27  ,clse-avg16 ca16
21:29:45  28  ,clse-avg18 ca18
21:29:45  29  -- clse relation to moving-max
21:29:45  30  ,clse-max4  cx4
21:29:45  31  ,clse-max6  cx6
21:29:45  32  ,clse-max8  cx8
21:29:45  33  ,clse-max10 cx10
21:29:45  34  ,clse-max12 cx12
21:29:45  35  ,clse-max14 cx14
21:29:45  36  ,clse-max16 cx16
21:29:45  37  ,clse-max18 cx18
21:29:45  38  -- Derive more attributes.
21:29:45  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:29:45  40  -- But COVAR_POP is more stable:
21:29:45  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:29:45  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:29:45  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:29:45  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:29:45  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:29:45  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:29:45  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:29:45  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:29:45  49  -- Derive date related attributes:
21:29:45  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:29:45  51  ,0+TO_CHAR(ydate,'D')d
21:29:45  52  ,0+TO_CHAR(ydate,'W')w
21:29:45  53  -- mpm stands for minutes-past-midnight:
21:29:45  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:29:45  55  -- mph stands for minutes-past-hour:
21:29:45  56  ,0+TO_CHAR(ydate,'MI')mph
21:29:45  57  FROM svm6102
21:29:45  58  ORDER BY ydate
21:29:45  59  /

Table created.

Elapsed: 00:00:02.41
21:29:48 SQL> 
21:29:48 SQL> -- rpt
21:29:48 SQL> 
21:29:48 SQL> SELECT
21:29:48   2  pair
21:29:48   3  ,COUNT(pair)
21:29:48   4  ,MIN(clse),MAX(clse)
21:29:48   5  ,MIN(ydate),MAX(ydate)
21:29:48   6  FROM svm6122
21:29:48   7  GROUP BY pair
21:29:48   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19814    1.29735	   1.4273 2010-10-03 21:30:01 2011-01-06 21:25:00

Elapsed: 00:00:00.05
21:29:48 SQL> 
21:29:48 SQL> -- Prepare for derivation of NTILE based params:
21:29:48 SQL> 
21:29:48 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.88
21:29:49 SQL> CREATE TABLE svm6142 COMPRESS AS
21:29:49   2  SELECT
21:29:49   3  pair
21:29:49   4  ,ydate
21:29:49   5  ,prdate
21:29:49   6  ,clse
21:29:49   7  ,g6
21:29:49   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:29:49   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:29:49  10  ,CASE WHEN trend IS NULL THEN 1
21:29:49  11  	    WHEN trend =0      THEN 1
21:29:49  12  	    ELSE trend END trend
21:29:49  13  ,cm4
21:29:49  14  ,cm6
21:29:49  15  ,cm8
21:29:49  16  ,cm10
21:29:49  17  ,cm12
21:29:49  18  ,cm14
21:29:49  19  ,cm16
21:29:49  20  ,cm18
21:29:49  21  --
21:29:49  22  ,ca4
21:29:49  23  ,ca6
21:29:49  24  ,ca8
21:29:49  25  ,ca10
21:29:49  26  ,ca12
21:29:49  27  ,ca14
21:29:49  28  ,ca16
21:29:49  29  ,ca18
21:29:49  30  --
21:29:49  31  ,cx4
21:29:49  32  ,cx6
21:29:49  33  ,cx8
21:29:49  34  ,cx10
21:29:49  35  ,cx12
21:29:49  36  ,cx14
21:29:49  37  ,cx16
21:29:49  38  ,cx18
21:29:49  39  --
21:29:49  40  ,crr4
21:29:49  41  ,crr6
21:29:49  42  ,crr8
21:29:49  43  ,crr10
21:29:49  44  ,crr12
21:29:49  45  ,crr14
21:29:49  46  ,crr16
21:29:49  47  ,crr18
21:29:49  48  --
21:29:49  49  ,hh
21:29:49  50  ,d
21:29:49  51  ,w
21:29:49  52  ,mpm
21:29:49  53  ,mph
21:29:49  54  FROM svm6122
21:29:49  55  ORDER BY ydate
21:29:49  56  /

Table created.

Elapsed: 00:00:00.38
21:29:49 SQL> 
21:29:49 SQL> -- rpt
21:29:49 SQL> 
21:29:49 SQL> SELECT
21:29:49   2  pair
21:29:49   3  ,trend
21:29:49   4  ,gatt
21:29:49   5  ,COUNT(pair)
21:29:49   6  ,AVG(g6)
21:29:49   7  FROM svm6142
21:29:49   8  GROUP BY pair,trend,gatt
21:29:49   9  ORDER BY pair,trend,gatt
21:29:49  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6598 -.00317919
eur_usd 	-1 up	      3570 .004447223
eur_usd 	-1		72
eur_usd 	 1 nup	      5869 -.00325203
eur_usd 	 1 up	      3705 .005071238

Elapsed: 00:00:00.04
21:29:49 SQL> 
21:29:49 SQL> 
21:29:49 SQL> -- Derive NTILE based params:
21:29:49 SQL> 
21:29:49 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.05
21:29:49 SQL> CREATE TABLE svm6162 COMPRESS AS
21:29:49   2  SELECT
21:29:49   3  pair
21:29:49   4  ,ydate
21:29:49   5  ,prdate
21:29:49   6  ,clse
21:29:49   7  ,g6
21:29:49   8  ,gatt
21:29:49   9  ,gattn
21:29:49  10  ,trend
21:29:49  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:29:49  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:29:49  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:29:49  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:29:49  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:29:49  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:29:49  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:29:49  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:29:49  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:29:49  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:29:49  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:29:49  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:29:49  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:29:49  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:29:49  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:29:49  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:29:49  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:29:49  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:29:49  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:29:49  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:29:49  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:29:49  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:29:49  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:29:49  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:29:49  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:29:49  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:29:49  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:29:49  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:29:49  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:29:49  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:29:49  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:29:49  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:29:49  43  ,hh  att32
21:29:49  44  ,d   att33
21:29:49  45  ,w   att34
21:29:49  46  ,mpm att35
21:29:49  47  ,mph att36
21:29:49  48  ,trend att37
21:29:49  49  FROM svm6142
21:29:49  50  ORDER BY ydate
21:29:49  51  /

Table created.

Elapsed: 00:00:04.93
21:29:54 SQL> 
21:29:54 SQL> -- rpt
21:29:54 SQL> 
21:29:54 SQL> SELECT
21:29:54   2  pair
21:29:54   3  ,trend
21:29:54   4  ,gatt
21:29:54   5  ,COUNT(pair)
21:29:54   6  ,AVG(g6)
21:29:54   7  FROM svm6162
21:29:54   8  GROUP BY pair,trend,gatt
21:29:54   9  ORDER BY pair,trend,gatt
21:29:54  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6598 -.00317919
eur_usd 	-1 up	      3570 .004447223
eur_usd 	-1		72
eur_usd 	 1 nup	      5869 -.00325203
eur_usd 	 1 up	      3705 .005071238

Elapsed: 00:00:00.03
21:29:54 SQL> 
21:29:54 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.04
21:29:54 SQL> CREATE TABLE modsrc COMPRESS AS
21:29:54   2  SELECT
21:29:54   3  pair
21:29:54   4  ,ydate
21:29:54   5  ,prdate
21:29:54   6  ,trend
21:29:54   7  ,g6
21:29:54   8  ,gatt
21:29:54   9  ,gattn
21:29:54  10  FROM svm6162
21:29:54  11  /

Table created.

Elapsed: 00:00:00.08
21:29:54 SQL> 
21:29:54 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.25
21:29:54 SQL> 
21:29:54 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.13
21:29:55 SQL> CREATE TABLE eur_ms610 COMPRESS AS
21:29:55   2  SELECT
21:29:55   3  ydate
21:29:55   4  ,trend eur_trend
21:29:55   5  ,g6    eur_g6
21:29:55   6  ,gatt  eur_gatt
21:29:55   7  ,gattn eur_gattn
21:29:55   8  FROM modsrc
21:29:55   9  /

Table created.

Elapsed: 00:00:00.07
21:29:55 SQL> 
21:29:55 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
21:29:55 SQL> 
21:29:55 SQL> -- I need a copy of the attributes:
21:29:55 SQL> 
21:29:55 SQL> 
21:29:55 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.06
21:29:55 SQL> CREATE TABLE eur_att COMPRESS AS
21:29:55   2  SELECT
21:29:55   3  ydate
21:29:55   4  ,att00 eur_att00
21:29:55   5  ,att01 eur_att01
21:29:55   6  ,att02 eur_att02
21:29:55   7  ,att03 eur_att03
21:29:55   8  ,att04 eur_att04
21:29:55   9  ,att05 eur_att05
21:29:55  10  ,att06 eur_att06
21:29:55  11  ,att07 eur_att07
21:29:55  12  ,att08 eur_att08
21:29:55  13  ,att09 eur_att09
21:29:55  14  ,att10 eur_att10
21:29:55  15  ,att11 eur_att11
21:29:55  16  ,att12 eur_att12
21:29:55  17  ,att13 eur_att13
21:29:55  18  ,att14 eur_att14
21:29:55  19  ,att15 eur_att15
21:29:55  20  ,att16 eur_att16
21:29:55  21  ,att17 eur_att17
21:29:55  22  ,att18 eur_att18
21:29:55  23  ,att19 eur_att19
21:29:55  24  ,att20 eur_att20
21:29:55  25  ,att21 eur_att21
21:29:55  26  ,att22 eur_att22
21:29:55  27  ,att23 eur_att23
21:29:55  28  ,att24 eur_att24
21:29:55  29  ,att25 eur_att25
21:29:55  30  ,att26 eur_att26
21:29:55  31  ,att27 eur_att27
21:29:55  32  ,att28 eur_att28
21:29:55  33  ,att29 eur_att29
21:29:55  34  ,att30 eur_att30
21:29:55  35  ,att31 eur_att31
21:29:55  36  ,att32 eur_att32
21:29:55  37  ,att33 eur_att33
21:29:55  38  ,att34 eur_att34
21:29:55  39  ,att35 eur_att35
21:29:55  40  ,att36 eur_att36
21:29:55  41  ,att37 eur_att37
21:29:55  42  FROM svm6162
21:29:55  43  /

Table created.

Elapsed: 00:00:00.18
21:29:55 SQL> 
21:29:55 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
21:29:56 SQL> 
21:29:56 SQL> -- rpt
21:29:56 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19814

Elapsed: 00:00:00.91
21:29:56 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19814

Elapsed: 00:00:00.00
21:29:56 SQL> 
21:29:56 SQL> --
21:29:56 SQL> -- aud610.sql
21:29:56 SQL> --
21:29:56 SQL> 
21:29:56 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:29:56 SQL> 
21:29:56 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.46
21:29:57 SQL> 
21:29:57 SQL> -- I created di5min here:
21:29:57 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:29:57 SQL> 
21:29:57 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:29:57   2  SELECT
21:29:57   3  pair
21:29:57   4  ,ydate
21:29:57   5  ,prdate
21:29:57   6  ,rownum rnum -- acts as t in my time-series
21:29:57   7  ,clse
21:29:57   8  -- Derive a bunch of attributes from clse, the latest price:
21:29:57   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:29:57  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:29:57  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:29:57  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:29:57  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:29:57  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:29:57  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:29:57  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:29:57  17  --
21:29:57  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:29:57  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:29:57  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:29:57  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:29:57  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:29:57  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:29:57  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:29:57  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:29:57  26  --
21:29:57  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:29:57  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:29:57  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:29:57  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:29:57  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:29:57  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:29:57  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:29:57  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:29:57  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:29:57  36  FROM di5min WHERE pair LIKE'%aud%'
21:29:57  37  AND ydate > sysdate - 95
21:29:57  38  ORDER BY ydate
21:29:57  39  /

View created.

Elapsed: 00:00:00.05
21:29:57 SQL> 
21:29:57 SQL> -- rpt
21:29:57 SQL> 
21:29:57 SQL> SELECT
21:29:57   2  pair
21:29:57   3  ,COUNT(pair)
21:29:57   4  ,MIN(clse),MAX(clse)
21:29:57   5  ,MIN(avg6),MAX(avg6)
21:29:57   6  ,MIN(ydate),MAX(ydate)
21:29:57   7  FROM svm6102
21:29:57   8  GROUP BY pair
21:29:57   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19811	.95405	  1.02495 .957141438 1.02284247 2010-10-03 21:30:01 2011-01-06 21:25:00

Elapsed: 00:00:00.90
21:29:58 SQL> 
21:29:58 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:29:58 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.23
21:29:58 SQL> CREATE TABLE svm6122 COMPRESS AS
21:29:58   2  SELECT
21:29:58   3  pair
21:29:58   4  ,ydate
21:29:58   5  ,prdate
21:29:58   6  ,clse
21:29:58   7  -- g6 is important. I want to predict g6:
21:29:58   8  ,ld6 - clse g6
21:29:58   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:29:58  10  -- I want more attributes from the ones I derived above:
21:29:58  11  -- clse relation to moving-min
21:29:58  12  ,clse-min4  cm4
21:29:58  13  ,clse-min6  cm6
21:29:58  14  ,clse-min8  cm8
21:29:58  15  ,clse-min10 cm10
21:29:58  16  ,clse-min12 cm12
21:29:58  17  ,clse-min14 cm14
21:29:58  18  ,clse-min16 cm16
21:29:58  19  ,clse-min18 cm18
21:29:58  20  -- clse relation to moving-avg
21:29:58  21  ,clse-avg4  ca4
21:29:58  22  ,clse-avg6  ca6
21:29:58  23  ,clse-avg8  ca8
21:29:58  24  ,clse-avg10 ca10
21:29:58  25  ,clse-avg12 ca12
21:29:58  26  ,clse-avg14 ca14
21:29:58  27  ,clse-avg16 ca16
21:29:58  28  ,clse-avg18 ca18
21:29:58  29  -- clse relation to moving-max
21:29:58  30  ,clse-max4  cx4
21:29:58  31  ,clse-max6  cx6
21:29:58  32  ,clse-max8  cx8
21:29:58  33  ,clse-max10 cx10
21:29:58  34  ,clse-max12 cx12
21:29:58  35  ,clse-max14 cx14
21:29:58  36  ,clse-max16 cx16
21:29:58  37  ,clse-max18 cx18
21:29:58  38  -- Derive more attributes.
21:29:58  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:29:58  40  -- But COVAR_POP is more stable:
21:29:58  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:29:58  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:29:58  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:29:58  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:29:58  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:29:58  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:29:58  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:29:58  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:29:58  49  -- Derive date related attributes:
21:29:58  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:29:58  51  ,0+TO_CHAR(ydate,'D')d
21:29:58  52  ,0+TO_CHAR(ydate,'W')w
21:29:58  53  -- mpm stands for minutes-past-midnight:
21:29:58  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:29:58  55  -- mph stands for minutes-past-hour:
21:29:58  56  ,0+TO_CHAR(ydate,'MI')mph
21:29:58  57  FROM svm6102
21:29:58  58  ORDER BY ydate
21:29:58  59  /

Table created.

Elapsed: 00:00:02.18
21:30:00 SQL> 
21:30:00 SQL> -- rpt
21:30:00 SQL> 
21:30:00 SQL> SELECT
21:30:00   2  pair
21:30:00   3  ,COUNT(pair)
21:30:00   4  ,MIN(clse),MAX(clse)
21:30:00   5  ,MIN(ydate),MAX(ydate)
21:30:00   6  FROM svm6122
21:30:00   7  GROUP BY pair
21:30:00   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19811	.95405	  1.02495 2010-10-03 21:30:01 2011-01-06 21:25:00

Elapsed: 00:00:00.04
21:30:00 SQL> 
21:30:00 SQL> -- Prepare for derivation of NTILE based params:
21:30:00 SQL> 
21:30:00 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.24
21:30:01 SQL> CREATE TABLE svm6142 COMPRESS AS
21:30:01   2  SELECT
21:30:01   3  pair
21:30:01   4  ,ydate
21:30:01   5  ,prdate
21:30:01   6  ,clse
21:30:01   7  ,g6
21:30:01   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:30:01   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:30:01  10  ,CASE WHEN trend IS NULL THEN 1
21:30:01  11  	    WHEN trend =0      THEN 1
21:30:01  12  	    ELSE trend END trend
21:30:01  13  ,cm4
21:30:01  14  ,cm6
21:30:01  15  ,cm8
21:30:01  16  ,cm10
21:30:01  17  ,cm12
21:30:01  18  ,cm14
21:30:01  19  ,cm16
21:30:01  20  ,cm18
21:30:01  21  --
21:30:01  22  ,ca4
21:30:01  23  ,ca6
21:30:01  24  ,ca8
21:30:01  25  ,ca10
21:30:01  26  ,ca12
21:30:01  27  ,ca14
21:30:01  28  ,ca16
21:30:01  29  ,ca18
21:30:01  30  --
21:30:01  31  ,cx4
21:30:01  32  ,cx6
21:30:01  33  ,cx8
21:30:01  34  ,cx10
21:30:01  35  ,cx12
21:30:01  36  ,cx14
21:30:01  37  ,cx16
21:30:01  38  ,cx18
21:30:01  39  --
21:30:01  40  ,crr4
21:30:01  41  ,crr6
21:30:01  42  ,crr8
21:30:01  43  ,crr10
21:30:01  44  ,crr12
21:30:01  45  ,crr14
21:30:01  46  ,crr16
21:30:01  47  ,crr18
21:30:01  48  --
21:30:01  49  ,hh
21:30:01  50  ,d
21:30:01  51  ,w
21:30:01  52  ,mpm
21:30:01  53  ,mph
21:30:01  54  FROM svm6122
21:30:01  55  ORDER BY ydate
21:30:01  56  /

Table created.

Elapsed: 00:00:00.38
21:30:01 SQL> 
21:30:01 SQL> -- rpt
21:30:01 SQL> 
21:30:01 SQL> SELECT
21:30:01   2  pair
21:30:01   3  ,trend
21:30:01   4  ,gatt
21:30:01   5  ,COUNT(pair)
21:30:01   6  ,AVG(g6)
21:30:01   7  FROM svm6142
21:30:01   8  GROUP BY pair,trend,gatt
21:30:01   9  ORDER BY pair,trend,gatt
21:30:01  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5718  -.0021485
aud_usd 	-1 up	      3701 .003745866
aud_usd 	-1		72
aud_usd 	 1 nup	      6727 -.00213845
aud_usd 	 1 up	      3593 .004054752

Elapsed: 00:00:00.04
21:30:01 SQL> 
21:30:01 SQL> 
21:30:01 SQL> -- Derive NTILE based params:
21:30:01 SQL> 
21:30:01 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.17
21:30:01 SQL> CREATE TABLE svm6162 COMPRESS AS
21:30:01   2  SELECT
21:30:01   3  pair
21:30:01   4  ,ydate
21:30:01   5  ,prdate
21:30:01   6  ,clse
21:30:01   7  ,g6
21:30:01   8  ,gatt
21:30:01   9  ,gattn
21:30:01  10  ,trend
21:30:01  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:30:01  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:30:01  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:30:01  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:30:01  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:30:01  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:30:01  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:30:01  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:30:01  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:30:01  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:30:01  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:30:01  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:30:01  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:30:01  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:30:01  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:30:01  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:30:01  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:30:01  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:30:01  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:30:01  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:30:01  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:30:01  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:30:01  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:30:01  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:30:01  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:30:01  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:30:01  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:30:01  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:30:01  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:30:01  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:30:01  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:30:01  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:30:01  43  ,hh  att32
21:30:01  44  ,d   att33
21:30:01  45  ,w   att34
21:30:01  46  ,mpm att35
21:30:01  47  ,mph att36
21:30:01  48  ,trend att37
21:30:01  49  FROM svm6142
21:30:01  50  ORDER BY ydate
21:30:01  51  /

Table created.

Elapsed: 00:00:04.86
21:30:06 SQL> 
21:30:06 SQL> -- rpt
21:30:06 SQL> 
21:30:06 SQL> SELECT
21:30:06   2  pair
21:30:06   3  ,trend
21:30:06   4  ,gatt
21:30:06   5  ,COUNT(pair)
21:30:06   6  ,AVG(g6)
21:30:06   7  FROM svm6162
21:30:06   8  GROUP BY pair,trend,gatt
21:30:06   9  ORDER BY pair,trend,gatt
21:30:06  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5718  -.0021485
aud_usd 	-1 up	      3701 .003745866
aud_usd 	-1		72
aud_usd 	 1 nup	      6727 -.00213845
aud_usd 	 1 up	      3593 .004054752

Elapsed: 00:00:00.02
21:30:06 SQL> 
21:30:06 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.14
21:30:06 SQL> CREATE TABLE modsrc COMPRESS AS
21:30:06   2  SELECT
21:30:06   3  pair
21:30:06   4  ,ydate
21:30:06   5  ,prdate
21:30:06   6  ,trend
21:30:06   7  ,g6
21:30:06   8  ,gatt
21:30:06   9  ,gattn
21:30:06  10  FROM svm6162
21:30:06  11  /

Table created.

Elapsed: 00:00:00.08
21:30:06 SQL> 
21:30:06 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
21:30:07 SQL> 
21:30:07 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
21:30:07 SQL> CREATE TABLE aud_ms610 COMPRESS AS
21:30:07   2  SELECT
21:30:07   3  ydate
21:30:07   4  ,trend aud_trend
21:30:07   5  ,g6    aud_g6
21:30:07   6  ,gatt  aud_gatt
21:30:07   7  ,gattn aud_gattn
21:30:07   8  FROM modsrc
21:30:07   9  /

Table created.

Elapsed: 00:00:00.06
21:30:07 SQL> 
21:30:07 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
21:30:07 SQL> 
21:30:07 SQL> -- I need a copy of the attributes:
21:30:07 SQL> 
21:30:07 SQL> 
21:30:07 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.04
21:30:07 SQL> CREATE TABLE aud_att COMPRESS AS
21:30:07   2  SELECT
21:30:07   3  ydate
21:30:07   4  ,att00 aud_att00
21:30:07   5  ,att01 aud_att01
21:30:07   6  ,att02 aud_att02
21:30:07   7  ,att03 aud_att03
21:30:07   8  ,att04 aud_att04
21:30:07   9  ,att05 aud_att05
21:30:07  10  ,att06 aud_att06
21:30:07  11  ,att07 aud_att07
21:30:07  12  ,att08 aud_att08
21:30:07  13  ,att09 aud_att09
21:30:07  14  ,att10 aud_att10
21:30:07  15  ,att11 aud_att11
21:30:07  16  ,att12 aud_att12
21:30:07  17  ,att13 aud_att13
21:30:07  18  ,att14 aud_att14
21:30:07  19  ,att15 aud_att15
21:30:07  20  ,att16 aud_att16
21:30:07  21  ,att17 aud_att17
21:30:07  22  ,att18 aud_att18
21:30:07  23  ,att19 aud_att19
21:30:07  24  ,att20 aud_att20
21:30:07  25  ,att21 aud_att21
21:30:07  26  ,att22 aud_att22
21:30:07  27  ,att23 aud_att23
21:30:07  28  ,att24 aud_att24
21:30:07  29  ,att25 aud_att25
21:30:07  30  ,att26 aud_att26
21:30:07  31  ,att27 aud_att27
21:30:07  32  ,att28 aud_att28
21:30:07  33  ,att29 aud_att29
21:30:07  34  ,att30 aud_att30
21:30:07  35  ,att31 aud_att31
21:30:07  36  ,att32 aud_att32
21:30:07  37  ,att33 aud_att33
21:30:07  38  ,att34 aud_att34
21:30:07  39  ,att35 aud_att35
21:30:07  40  ,att36 aud_att36
21:30:07  41  ,att37 aud_att37
21:30:07  42  FROM svm6162
21:30:07  43  /

Table created.

Elapsed: 00:00:00.18
21:30:07 SQL> 
21:30:07 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.49
21:30:08 SQL> 
21:30:08 SQL> -- rpt
21:30:08 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19810

Elapsed: 00:00:00.90
21:30:08 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19811

Elapsed: 00:00:00.00
21:30:08 SQL> 
21:30:08 SQL> --
21:30:08 SQL> -- gbp610.sql
21:30:08 SQL> --
21:30:08 SQL> 
21:30:08 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:30:08 SQL> 
21:30:08 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.41
21:30:09 SQL> 
21:30:09 SQL> -- I created di5min here:
21:30:09 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:30:09 SQL> 
21:30:09 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:30:09   2  SELECT
21:30:09   3  pair
21:30:09   4  ,ydate
21:30:09   5  ,prdate
21:30:09   6  ,rownum rnum -- acts as t in my time-series
21:30:09   7  ,clse
21:30:09   8  -- Derive a bunch of attributes from clse, the latest price:
21:30:09   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:30:09  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:30:09  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:30:09  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:30:09  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:30:09  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:30:09  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:30:09  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:30:09  17  --
21:30:09  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:30:09  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:30:09  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:30:09  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:30:09  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:30:09  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:30:09  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:30:09  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:30:09  26  --
21:30:09  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:30:09  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:30:09  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:30:09  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:30:09  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:30:09  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:30:09  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:30:09  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:30:09  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:30:09  36  FROM di5min WHERE pair LIKE'%gbp%'
21:30:09  37  AND ydate > sysdate - 95
21:30:09  38  ORDER BY ydate
21:30:09  39  /

View created.

Elapsed: 00:00:00.05
21:30:09 SQL> 
21:30:09 SQL> -- rpt
21:30:09 SQL> 
21:30:09 SQL> SELECT
21:30:09   2  pair
21:30:09   3  ,COUNT(pair)
21:30:09   4  ,MIN(clse),MAX(clse)
21:30:09   5  ,MIN(avg6),MAX(avg6)
21:30:09   6  ,MIN(ydate),MAX(ydate)
21:30:09   7  FROM svm6102
21:30:09   8  GROUP BY pair
21:30:09   9  /
