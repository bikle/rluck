
SQL*Plus: Release 11.2.0.1.0 Production on Fri Jan 7 09:12:22 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

09:12:22 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
09:12:22 SQL> 09:12:22 SQL> --
09:12:22 SQL> -- eur610.sql
09:12:22 SQL> --
09:12:22 SQL> 
09:12:22 SQL> -- Creates views and tables for backtesting a forex SVM strategy
09:12:22 SQL> 
09:12:22 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.00
09:12:22 SQL> 
09:12:22 SQL> -- I created di5min here:
09:12:22 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
09:12:22 SQL> 
09:12:22 SQL> CREATE OR REPLACE VIEW svm6102 AS
09:12:22   2  SELECT
09:12:22   3  pair
09:12:22   4  ,ydate
09:12:22   5  ,prdate
09:12:22   6  ,rownum rnum -- acts as t in my time-series
09:12:22   7  ,clse
09:12:22   8  -- Derive a bunch of attributes from clse, the latest price:
09:12:22   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
09:12:22  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
09:12:22  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
09:12:22  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
09:12:22  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
09:12:22  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
09:12:22  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
09:12:22  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
09:12:22  17  --
09:12:22  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
09:12:22  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
09:12:22  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
09:12:22  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
09:12:22  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
09:12:22  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
09:12:22  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
09:12:22  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
09:12:22  26  --
09:12:22  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
09:12:22  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
09:12:22  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
09:12:22  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
09:12:22  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
09:12:22  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
09:12:22  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
09:12:22  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
09:12:22  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
09:12:22  36  FROM di5min WHERE pair LIKE'%eur%'
09:12:22  37  AND ydate > sysdate - 95
09:12:22  38  ORDER BY ydate
09:12:22  39  /

View created.

Elapsed: 00:00:00.05
09:12:22 SQL> 
09:12:22 SQL> -- rpt
09:12:22 SQL> 
09:12:22 SQL> SELECT
09:12:22   2  pair
09:12:22   3  ,COUNT(pair)
09:12:22   4  ,MIN(clse),MAX(clse)
09:12:22   5  ,MIN(avg6),MAX(avg6)
09:12:22   6  ,MIN(ydate),MAX(ydate)
09:12:22   7  FROM svm6102
09:12:22   8  GROUP BY pair
09:12:22   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19810  1.2970625	   1.4273 1.29875103 1.42436233 2010-10-04 09:15:01 2011-01-07 09:05:00

Elapsed: 00:00:00.93
09:12:23 SQL> 
09:12:23 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
09:12:23 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.09
09:12:23 SQL> CREATE TABLE svm6122 COMPRESS AS
09:12:23   2  SELECT
09:12:23   3  pair
09:12:23   4  ,ydate
09:12:23   5  ,prdate
09:12:23   6  ,clse
09:12:23   7  -- g6 is important. I want to predict g6:
09:12:23   8  ,ld6 - clse g6
09:12:23   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
09:12:23  10  -- I want more attributes from the ones I derived above:
09:12:23  11  -- clse relation to moving-min
09:12:23  12  ,clse-min4  cm4
09:12:23  13  ,clse-min6  cm6
09:12:23  14  ,clse-min8  cm8
09:12:23  15  ,clse-min10 cm10
09:12:23  16  ,clse-min12 cm12
09:12:23  17  ,clse-min14 cm14
09:12:23  18  ,clse-min16 cm16
09:12:23  19  ,clse-min18 cm18
09:12:23  20  -- clse relation to moving-avg
09:12:23  21  ,clse-avg4  ca4
09:12:23  22  ,clse-avg6  ca6
09:12:23  23  ,clse-avg8  ca8
09:12:23  24  ,clse-avg10 ca10
09:12:23  25  ,clse-avg12 ca12
09:12:23  26  ,clse-avg14 ca14
09:12:23  27  ,clse-avg16 ca16
09:12:23  28  ,clse-avg18 ca18
09:12:23  29  -- clse relation to moving-max
09:12:23  30  ,clse-max4  cx4
09:12:23  31  ,clse-max6  cx6
09:12:23  32  ,clse-max8  cx8
09:12:23  33  ,clse-max10 cx10
09:12:23  34  ,clse-max12 cx12
09:12:23  35  ,clse-max14 cx14
09:12:23  36  ,clse-max16 cx16
09:12:23  37  ,clse-max18 cx18
09:12:23  38  -- Derive more attributes.
09:12:23  39  -- I want to use CORR() here to help SVM see the shape of the series.
09:12:23  40  -- But COVAR_POP is more stable:
09:12:23  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
09:12:23  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
09:12:23  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
09:12:23  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
09:12:23  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
09:12:23  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
09:12:23  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
09:12:23  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
09:12:23  49  -- Derive date related attributes:
09:12:23  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
09:12:23  51  ,0+TO_CHAR(ydate,'D')d
09:12:23  52  ,0+TO_CHAR(ydate,'W')w
09:12:23  53  -- mpm stands for minutes-past-midnight:
09:12:23  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
09:12:23  55  -- mph stands for minutes-past-hour:
09:12:23  56  ,0+TO_CHAR(ydate,'MI')mph
09:12:23  57  FROM svm6102
09:12:23  58  ORDER BY ydate
09:12:23  59  /

Table created.

Elapsed: 00:00:02.45
09:12:26 SQL> 
09:12:26 SQL> -- rpt
09:12:26 SQL> 
09:12:26 SQL> SELECT
09:12:26   2  pair
09:12:26   3  ,COUNT(pair)
09:12:26   4  ,MIN(clse),MAX(clse)
09:12:26   5  ,MIN(ydate),MAX(ydate)
09:12:26   6  FROM svm6122
09:12:26   7  GROUP BY pair
09:12:26   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19810  1.2970625	   1.4273 2010-10-04 09:15:01 2011-01-07 09:05:00

Elapsed: 00:00:00.06
09:12:26 SQL> 
09:12:26 SQL> -- Prepare for derivation of NTILE based params:
09:12:26 SQL> 
09:12:26 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.85
09:12:27 SQL> CREATE TABLE svm6142 COMPRESS AS
09:12:27   2  SELECT
09:12:27   3  pair
09:12:27   4  ,ydate
09:12:27   5  ,prdate
09:12:27   6  ,clse
09:12:27   7  ,g6
09:12:27   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
09:12:27   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
09:12:27  10  ,CASE WHEN trend IS NULL THEN 1
09:12:27  11  	    WHEN trend =0      THEN 1
09:12:27  12  	    ELSE trend END trend
09:12:27  13  ,cm4
09:12:27  14  ,cm6
09:12:27  15  ,cm8
09:12:27  16  ,cm10
09:12:27  17  ,cm12
09:12:27  18  ,cm14
09:12:27  19  ,cm16
09:12:27  20  ,cm18
09:12:27  21  --
09:12:27  22  ,ca4
09:12:27  23  ,ca6
09:12:27  24  ,ca8
09:12:27  25  ,ca10
09:12:27  26  ,ca12
09:12:27  27  ,ca14
09:12:27  28  ,ca16
09:12:27  29  ,ca18
09:12:27  30  --
09:12:27  31  ,cx4
09:12:27  32  ,cx6
09:12:27  33  ,cx8
09:12:27  34  ,cx10
09:12:27  35  ,cx12
09:12:27  36  ,cx14
09:12:27  37  ,cx16
09:12:27  38  ,cx18
09:12:27  39  --
09:12:27  40  ,crr4
09:12:27  41  ,crr6
09:12:27  42  ,crr8
09:12:27  43  ,crr10
09:12:27  44  ,crr12
09:12:27  45  ,crr14
09:12:27  46  ,crr16
09:12:27  47  ,crr18
09:12:27  48  --
09:12:27  49  ,hh
09:12:27  50  ,d
09:12:27  51  ,w
09:12:27  52  ,mpm
09:12:27  53  ,mph
09:12:27  54  FROM svm6122
09:12:27  55  ORDER BY ydate
09:12:27  56  /

Table created.

Elapsed: 00:00:00.39
09:12:27 SQL> 
09:12:27 SQL> -- rpt
09:12:27 SQL> 
09:12:27 SQL> SELECT
09:12:27   2  pair
09:12:27   3  ,trend
09:12:27   4  ,gatt
09:12:27   5  ,COUNT(pair)
09:12:27   6  ,AVG(g6)
09:12:27   7  FROM svm6142
09:12:27   8  GROUP BY pair,trend,gatt
09:12:27   9  ORDER BY pair,trend,gatt
09:12:27  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6553 -.00314858
eur_usd 	-1 up	      3565 .004450866
eur_usd 	-1		66
eur_usd 	 1 nup	      5915  -.0032318
eur_usd 	 1 up	      3705 .005071238
eur_usd 	 1		 6

6 rows selected.

Elapsed: 00:00:00.04
09:12:27 SQL> 
09:12:27 SQL> 
09:12:27 SQL> -- Derive NTILE based params:
09:12:27 SQL> 
09:12:27 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.54
09:12:28 SQL> CREATE TABLE svm6162 COMPRESS AS
09:12:28   2  SELECT
09:12:28   3  pair
09:12:28   4  ,ydate
09:12:28   5  ,prdate
09:12:28   6  ,clse
09:12:28   7  ,g6
09:12:28   8  ,gatt
09:12:28   9  ,gattn
09:12:28  10  ,trend
09:12:28  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
09:12:28  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
09:12:28  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
09:12:28  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
09:12:28  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
09:12:28  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
09:12:28  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
09:12:28  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
09:12:28  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
09:12:28  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
09:12:28  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
09:12:28  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
09:12:28  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
09:12:28  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
09:12:28  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
09:12:28  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
09:12:28  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
09:12:28  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
09:12:28  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
09:12:28  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
09:12:28  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
09:12:28  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
09:12:28  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
09:12:28  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
09:12:28  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
09:12:28  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
09:12:28  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
09:12:28  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
09:12:28  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
09:12:28  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
09:12:28  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
09:12:28  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
09:12:28  43  ,hh  att32
09:12:28  44  ,d   att33
09:12:28  45  ,w   att34
09:12:28  46  ,mpm att35
09:12:28  47  ,mph att36
09:12:28  48  ,trend att37
09:12:28  49  FROM svm6142
09:12:28  50  ORDER BY ydate
09:12:28  51  /

Table created.

Elapsed: 00:00:04.73
09:12:32 SQL> 
09:12:32 SQL> -- rpt
09:12:32 SQL> 
09:12:32 SQL> SELECT
09:12:32   2  pair
09:12:32   3  ,trend
09:12:32   4  ,gatt
09:12:32   5  ,COUNT(pair)
09:12:32   6  ,AVG(g6)
09:12:32   7  FROM svm6162
09:12:32   8  GROUP BY pair,trend,gatt
09:12:32   9  ORDER BY pair,trend,gatt
09:12:32  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6553 -.00314858
eur_usd 	-1 up	      3565 .004450866
eur_usd 	-1		66
eur_usd 	 1 nup	      5915  -.0032318
eur_usd 	 1 up	      3705 .005071238
eur_usd 	 1		 6

6 rows selected.

Elapsed: 00:00:00.03
09:12:33 SQL> 
09:12:33 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.04
09:12:33 SQL> CREATE TABLE modsrc COMPRESS AS
09:12:33   2  SELECT
09:12:33   3  pair
09:12:33   4  ,ydate
09:12:33   5  ,prdate
09:12:33   6  ,trend
09:12:33   7  ,g6
09:12:33   8  ,gatt
09:12:33   9  ,gattn
09:12:33  10  FROM svm6162
09:12:33  11  /

Table created.

Elapsed: 00:00:00.12
09:12:33 SQL> 
09:12:33 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.28
09:12:33 SQL> 
09:12:33 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.22
09:12:33 SQL> CREATE TABLE eur_ms610 COMPRESS AS
09:12:33   2  SELECT
09:12:33   3  ydate
09:12:33   4  ,trend eur_trend
09:12:33   5  ,g6    eur_g6
09:12:33   6  ,gatt  eur_gatt
09:12:33   7  ,gattn eur_gattn
09:12:33   8  FROM modsrc
09:12:33   9  /

Table created.

Elapsed: 00:00:00.07
09:12:33 SQL> 
09:12:33 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
09:12:33 SQL> 
09:12:33 SQL> -- I need a copy of the attributes:
09:12:33 SQL> 
09:12:33 SQL> 
09:12:33 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.04
09:12:33 SQL> CREATE TABLE eur_att COMPRESS AS
09:12:33   2  SELECT
09:12:33   3  ydate
09:12:33   4  ,att00 eur_att00
09:12:33   5  ,att01 eur_att01
09:12:33   6  ,att02 eur_att02
09:12:33   7  ,att03 eur_att03
09:12:33   8  ,att04 eur_att04
09:12:33   9  ,att05 eur_att05
09:12:33  10  ,att06 eur_att06
09:12:33  11  ,att07 eur_att07
09:12:33  12  ,att08 eur_att08
09:12:33  13  ,att09 eur_att09
09:12:33  14  ,att10 eur_att10
09:12:33  15  ,att11 eur_att11
09:12:33  16  ,att12 eur_att12
09:12:33  17  ,att13 eur_att13
09:12:33  18  ,att14 eur_att14
09:12:33  19  ,att15 eur_att15
09:12:33  20  ,att16 eur_att16
09:12:33  21  ,att17 eur_att17
09:12:33  22  ,att18 eur_att18
09:12:33  23  ,att19 eur_att19
09:12:33  24  ,att20 eur_att20
09:12:33  25  ,att21 eur_att21
09:12:33  26  ,att22 eur_att22
09:12:33  27  ,att23 eur_att23
09:12:33  28  ,att24 eur_att24
09:12:33  29  ,att25 eur_att25
09:12:33  30  ,att26 eur_att26
09:12:33  31  ,att27 eur_att27
09:12:33  32  ,att28 eur_att28
09:12:33  33  ,att29 eur_att29
09:12:33  34  ,att30 eur_att30
09:12:33  35  ,att31 eur_att31
09:12:33  36  ,att32 eur_att32
09:12:33  37  ,att33 eur_att33
09:12:33  38  ,att34 eur_att34
09:12:33  39  ,att35 eur_att35
09:12:33  40  ,att36 eur_att36
09:12:33  41  ,att37 eur_att37
09:12:33  42  FROM svm6162
09:12:33  43  /

Table created.

Elapsed: 00:00:00.18
09:12:34 SQL> 
09:12:34 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
09:12:34 SQL> 
09:12:34 SQL> -- rpt
09:12:34 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19810

Elapsed: 00:00:00.90
09:12:35 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19810

Elapsed: 00:00:00.00
09:12:35 SQL> 
09:12:35 SQL> --
09:12:35 SQL> -- aud610.sql
09:12:35 SQL> --
09:12:35 SQL> 
09:12:35 SQL> -- Creates views and tables for backtesting a forex SVM strategy
09:12:35 SQL> 
09:12:35 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.86
09:12:36 SQL> 
09:12:36 SQL> -- I created di5min here:
09:12:36 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
09:12:36 SQL> 
09:12:36 SQL> CREATE OR REPLACE VIEW svm6102 AS
09:12:36   2  SELECT
09:12:36   3  pair
09:12:36   4  ,ydate
09:12:36   5  ,prdate
09:12:36   6  ,rownum rnum -- acts as t in my time-series
09:12:36   7  ,clse
09:12:36   8  -- Derive a bunch of attributes from clse, the latest price:
09:12:36   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
09:12:36  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
09:12:36  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
09:12:36  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
09:12:36  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
09:12:36  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
09:12:36  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
09:12:36  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
09:12:36  17  --
09:12:36  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
09:12:36  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
09:12:36  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
09:12:36  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
09:12:36  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
09:12:36  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
09:12:36  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
09:12:36  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
09:12:36  26  --
09:12:36  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
09:12:36  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
09:12:36  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
09:12:36  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
09:12:36  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
09:12:36  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
09:12:36  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
09:12:36  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
09:12:36  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
09:12:36  36  FROM di5min WHERE pair LIKE'%aud%'
09:12:36  37  AND ydate > sysdate - 95
09:12:36  38  ORDER BY ydate
09:12:36  39  /

View created.

Elapsed: 00:00:00.04
09:12:36 SQL> 
09:12:36 SQL> -- rpt
09:12:36 SQL> 
09:12:36 SQL> SELECT
09:12:36   2  pair
09:12:36   3  ,COUNT(pair)
09:12:36   4  ,MIN(clse),MAX(clse)
09:12:36   5  ,MIN(avg6),MAX(avg6)
09:12:36   6  ,MIN(ydate),MAX(ydate)
09:12:36   7  FROM svm6102
09:12:36   8  GROUP BY pair
09:12:36   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19807	.95405	  1.02495 .957141438 1.02284247 2010-10-04 09:15:01 2011-01-07 09:05:00

Elapsed: 00:00:00.89
09:12:37 SQL> 
09:12:37 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
09:12:37 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.38
09:12:37 SQL> CREATE TABLE svm6122 COMPRESS AS
09:12:37   2  SELECT
09:12:37   3  pair
09:12:37   4  ,ydate
09:12:37   5  ,prdate
09:12:37   6  ,clse
09:12:37   7  -- g6 is important. I want to predict g6:
09:12:37   8  ,ld6 - clse g6
09:12:37   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
09:12:37  10  -- I want more attributes from the ones I derived above:
09:12:37  11  -- clse relation to moving-min
09:12:37  12  ,clse-min4  cm4
09:12:37  13  ,clse-min6  cm6
09:12:37  14  ,clse-min8  cm8
09:12:37  15  ,clse-min10 cm10
09:12:37  16  ,clse-min12 cm12
09:12:37  17  ,clse-min14 cm14
09:12:37  18  ,clse-min16 cm16
09:12:37  19  ,clse-min18 cm18
09:12:37  20  -- clse relation to moving-avg
09:12:37  21  ,clse-avg4  ca4
09:12:37  22  ,clse-avg6  ca6
09:12:37  23  ,clse-avg8  ca8
09:12:37  24  ,clse-avg10 ca10
09:12:37  25  ,clse-avg12 ca12
09:12:37  26  ,clse-avg14 ca14
09:12:37  27  ,clse-avg16 ca16
09:12:37  28  ,clse-avg18 ca18
09:12:37  29  -- clse relation to moving-max
09:12:37  30  ,clse-max4  cx4
09:12:37  31  ,clse-max6  cx6
09:12:37  32  ,clse-max8  cx8
09:12:37  33  ,clse-max10 cx10
09:12:37  34  ,clse-max12 cx12
09:12:37  35  ,clse-max14 cx14
09:12:37  36  ,clse-max16 cx16
09:12:37  37  ,clse-max18 cx18
09:12:37  38  -- Derive more attributes.
09:12:37  39  -- I want to use CORR() here to help SVM see the shape of the series.
09:12:37  40  -- But COVAR_POP is more stable:
09:12:37  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
09:12:37  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
09:12:37  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
09:12:37  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
09:12:37  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
09:12:37  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
09:12:37  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
09:12:37  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
09:12:37  49  -- Derive date related attributes:
09:12:37  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
09:12:37  51  ,0+TO_CHAR(ydate,'D')d
09:12:37  52  ,0+TO_CHAR(ydate,'W')w
09:12:37  53  -- mpm stands for minutes-past-midnight:
09:12:37  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
09:12:37  55  -- mph stands for minutes-past-hour:
09:12:37  56  ,0+TO_CHAR(ydate,'MI')mph
09:12:37  57  FROM svm6102
09:12:37  58  ORDER BY ydate
09:12:37  59  /

Table created.

Elapsed: 00:00:02.10
09:12:39 SQL> 
09:12:39 SQL> -- rpt
09:12:39 SQL> 
09:12:39 SQL> SELECT
09:12:39   2  pair
09:12:39   3  ,COUNT(pair)
09:12:39   4  ,MIN(clse),MAX(clse)
09:12:39   5  ,MIN(ydate),MAX(ydate)
09:12:39   6  FROM svm6122
09:12:39   7  GROUP BY pair
09:12:39   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19807	.95405	  1.02495 2010-10-04 09:15:01 2011-01-07 09:05:00

Elapsed: 00:00:00.04
09:12:39 SQL> 
09:12:39 SQL> -- Prepare for derivation of NTILE based params:
09:12:39 SQL> 
09:12:39 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.19
09:12:40 SQL> CREATE TABLE svm6142 COMPRESS AS
09:12:40   2  SELECT
09:12:40   3  pair
09:12:40   4  ,ydate
09:12:40   5  ,prdate
09:12:40   6  ,clse
09:12:40   7  ,g6
09:12:40   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
09:12:40   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
09:12:40  10  ,CASE WHEN trend IS NULL THEN 1
09:12:40  11  	    WHEN trend =0      THEN 1
09:12:40  12  	    ELSE trend END trend
09:12:40  13  ,cm4
09:12:40  14  ,cm6
09:12:40  15  ,cm8
09:12:40  16  ,cm10
09:12:40  17  ,cm12
09:12:40  18  ,cm14
09:12:40  19  ,cm16
09:12:40  20  ,cm18
09:12:40  21  --
09:12:40  22  ,ca4
09:12:40  23  ,ca6
09:12:40  24  ,ca8
09:12:40  25  ,ca10
09:12:40  26  ,ca12
09:12:40  27  ,ca14
09:12:40  28  ,ca16
09:12:40  29  ,ca18
09:12:40  30  --
09:12:40  31  ,cx4
09:12:40  32  ,cx6
09:12:40  33  ,cx8
09:12:40  34  ,cx10
09:12:40  35  ,cx12
09:12:40  36  ,cx14
09:12:40  37  ,cx16
09:12:40  38  ,cx18
09:12:40  39  --
09:12:40  40  ,crr4
09:12:40  41  ,crr6
09:12:40  42  ,crr8
09:12:40  43  ,crr10
09:12:40  44  ,crr12
09:12:40  45  ,crr14
09:12:40  46  ,crr16
09:12:40  47  ,crr18
09:12:40  48  --
09:12:40  49  ,hh
09:12:40  50  ,d
09:12:40  51  ,w
09:12:40  52  ,mpm
09:12:40  53  ,mph
09:12:40  54  FROM svm6122
09:12:40  55  ORDER BY ydate
09:12:40  56  /

Table created.

Elapsed: 00:00:00.38
09:12:40 SQL> 
09:12:40 SQL> -- rpt
09:12:40 SQL> 
09:12:40 SQL> SELECT
09:12:40   2  pair
09:12:40   3  ,trend
09:12:40   4  ,gatt
09:12:40   5  ,COUNT(pair)
09:12:40   6  ,AVG(g6)
09:12:40   7  FROM svm6142
09:12:40   8  GROUP BY pair,trend,gatt
09:12:40   9  ORDER BY pair,trend,gatt
09:12:40  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5708  -.0021388
aud_usd 	-1 up	      3685  .00375498
aud_usd 	-1		64
aud_usd 	 1 nup	      6747 -.00213688
aud_usd 	 1 up	      3595 .004053206
aud_usd 	 1		 8

6 rows selected.

Elapsed: 00:00:00.04
09:12:40 SQL> 
09:12:40 SQL> 
09:12:40 SQL> -- Derive NTILE based params:
09:12:40 SQL> 
09:12:40 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.27
09:12:40 SQL> CREATE TABLE svm6162 COMPRESS AS
09:12:40   2  SELECT
09:12:40   3  pair
09:12:40   4  ,ydate
09:12:40   5  ,prdate
09:12:40   6  ,clse
09:12:40   7  ,g6
09:12:40   8  ,gatt
09:12:40   9  ,gattn
09:12:40  10  ,trend
09:12:40  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
09:12:40  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
09:12:40  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
09:12:40  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
09:12:40  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
09:12:40  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
09:12:40  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
09:12:40  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
09:12:40  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
09:12:40  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
09:12:40  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
09:12:40  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
09:12:40  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
09:12:40  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
09:12:40  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
09:12:40  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
09:12:40  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
09:12:40  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
09:12:40  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
09:12:40  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
09:12:40  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
09:12:40  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
09:12:40  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
09:12:40  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
09:12:40  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
09:12:40  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
09:12:40  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
09:12:40  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
09:12:40  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
09:12:40  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
09:12:40  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
09:12:40  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
09:12:40  43  ,hh  att32
09:12:40  44  ,d   att33
09:12:40  45  ,w   att34
09:12:40  46  ,mpm att35
09:12:40  47  ,mph att36
09:12:40  48  ,trend att37
09:12:40  49  FROM svm6142
09:12:40  50  ORDER BY ydate
09:12:40  51  /

Table created.

Elapsed: 00:00:04.85
09:12:45 SQL> 
09:12:45 SQL> -- rpt
09:12:45 SQL> 
09:12:45 SQL> SELECT
09:12:45   2  pair
09:12:45   3  ,trend
09:12:45   4  ,gatt
09:12:45   5  ,COUNT(pair)
09:12:45   6  ,AVG(g6)
09:12:45   7  FROM svm6162
09:12:45   8  GROUP BY pair,trend,gatt
09:12:45   9  ORDER BY pair,trend,gatt
09:12:45  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5708  -.0021388
aud_usd 	-1 up	      3685  .00375498
aud_usd 	-1		64
aud_usd 	 1 nup	      6747 -.00213688
aud_usd 	 1 up	      3595 .004053206
aud_usd 	 1		 8

6 rows selected.

Elapsed: 00:00:00.03
09:12:45 SQL> 
09:12:45 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.14
09:12:45 SQL> CREATE TABLE modsrc COMPRESS AS
09:12:45   2  SELECT
09:12:45   3  pair
09:12:45   4  ,ydate
09:12:45   5  ,prdate
09:12:45   6  ,trend
09:12:45   7  ,g6
09:12:45   8  ,gatt
09:12:45   9  ,gattn
09:12:45  10  FROM svm6162
09:12:45  11  /

Table created.

Elapsed: 00:00:00.09
09:12:45 SQL> 
09:12:45 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
09:12:46 SQL> 
09:12:46 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
09:12:46 SQL> CREATE TABLE aud_ms610 COMPRESS AS
09:12:46   2  SELECT
09:12:46   3  ydate
09:12:46   4  ,trend aud_trend
09:12:46   5  ,g6    aud_g6
09:12:46   6  ,gatt  aud_gatt
09:12:46   7  ,gattn aud_gattn
09:12:46   8  FROM modsrc
09:12:46   9  /

Table created.

Elapsed: 00:00:00.06
09:12:46 SQL> 
09:12:46 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
09:12:46 SQL> 
09:12:46 SQL> -- I need a copy of the attributes:
09:12:46 SQL> 
09:12:46 SQL> 
09:12:46 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.05
09:12:46 SQL> CREATE TABLE aud_att COMPRESS AS
09:12:46   2  SELECT
09:12:46   3  ydate
09:12:46   4  ,att00 aud_att00
09:12:46   5  ,att01 aud_att01
09:12:46   6  ,att02 aud_att02
09:12:46   7  ,att03 aud_att03
09:12:46   8  ,att04 aud_att04
09:12:46   9  ,att05 aud_att05
09:12:46  10  ,att06 aud_att06
09:12:46  11  ,att07 aud_att07
09:12:46  12  ,att08 aud_att08
09:12:46  13  ,att09 aud_att09
09:12:46  14  ,att10 aud_att10
09:12:46  15  ,att11 aud_att11
09:12:46  16  ,att12 aud_att12
09:12:46  17  ,att13 aud_att13
09:12:46  18  ,att14 aud_att14
09:12:46  19  ,att15 aud_att15
09:12:46  20  ,att16 aud_att16
09:12:46  21  ,att17 aud_att17
09:12:46  22  ,att18 aud_att18
09:12:46  23  ,att19 aud_att19
09:12:46  24  ,att20 aud_att20
09:12:46  25  ,att21 aud_att21
09:12:46  26  ,att22 aud_att22
09:12:46  27  ,att23 aud_att23
09:12:46  28  ,att24 aud_att24
09:12:46  29  ,att25 aud_att25
09:12:46  30  ,att26 aud_att26
09:12:46  31  ,att27 aud_att27
09:12:46  32  ,att28 aud_att28
09:12:46  33  ,att29 aud_att29
09:12:46  34  ,att30 aud_att30
09:12:46  35  ,att31 aud_att31
09:12:46  36  ,att32 aud_att32
09:12:46  37  ,att33 aud_att33
09:12:46  38  ,att34 aud_att34
09:12:46  39  ,att35 aud_att35
09:12:46  40  ,att36 aud_att36
09:12:46  41  ,att37 aud_att37
09:12:46  42  FROM svm6162
09:12:46  43  /

Table created.

Elapsed: 00:00:00.18
09:12:46 SQL> 
09:12:46 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
09:12:47 SQL> 
09:12:47 SQL> -- rpt
09:12:47 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19807

Elapsed: 00:00:00.86
09:12:47 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19807

Elapsed: 00:00:00.00
09:12:47 SQL> 
09:12:47 SQL> --
09:12:47 SQL> -- gbp610.sql
09:12:47 SQL> --
09:12:47 SQL> 
09:12:47 SQL> -- Creates views and tables for backtesting a forex SVM strategy
09:12:47 SQL> 
09:12:47 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.42
09:12:48 SQL> 
09:12:48 SQL> -- I created di5min here:
09:12:48 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
09:12:48 SQL> 
09:12:48 SQL> CREATE OR REPLACE VIEW svm6102 AS
09:12:48   2  SELECT
09:12:48   3  pair
09:12:48   4  ,ydate
09:12:48   5  ,prdate
09:12:48   6  ,rownum rnum -- acts as t in my time-series
09:12:48   7  ,clse
09:12:48   8  -- Derive a bunch of attributes from clse, the latest price:
09:12:48   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
09:12:48  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
09:12:48  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
09:12:48  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
09:12:48  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
09:12:48  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
09:12:48  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
09:12:48  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
09:12:48  17  --
09:12:48  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
09:12:48  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
09:12:48  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
09:12:48  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
09:12:48  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
09:12:48  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
09:12:48  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
09:12:48  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
09:12:48  26  --
09:12:48  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
09:12:48  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
09:12:48  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
09:12:48  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
09:12:48  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
09:12:48  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
09:12:48  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
09:12:48  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
09:12:48  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
09:12:48  36  FROM di5min WHERE pair LIKE'%gbp%'
09:12:48  37  AND ydate > sysdate - 95
09:12:48  38  ORDER BY ydate
09:12:48  39  /

View created.

Elapsed: 00:00:00.06
09:12:48 SQL> 
09:12:48 SQL> -- rpt
09:12:48 SQL> 
09:12:48 SQL> SELECT
09:12:48   2  pair
09:12:48   3  ,COUNT(pair)
09:12:48   4  ,MIN(clse),MAX(clse)
09:12:48   5  ,MIN(avg6),MAX(avg6)
09:12:48   6  ,MIN(ydate),MAX(ydate)
09:12:48   7  FROM svm6102
09:12:48   8  GROUP BY pair
09:12:48   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19810   1.535325	   1.6295 1.53696747 1.62716986 2010-10-04 09:15:01 2011-01-07 09:10:00

Elapsed: 00:00:00.86
09:12:49 SQL> 
09:12:49 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
09:12:49 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.28
09:12:49 SQL> CREATE TABLE svm6122 COMPRESS AS
09:12:49   2  SELECT
09:12:49   3  pair
09:12:49   4  ,ydate
09:12:49   5  ,prdate
09:12:49   6  ,clse
09:12:49   7  -- g6 is important. I want to predict g6:
09:12:49   8  ,ld6 - clse g6
09:12:49   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
09:12:49  10  -- I want more attributes from the ones I derived above:
09:12:49  11  -- clse relation to moving-min
09:12:49  12  ,clse-min4  cm4
09:12:49  13  ,clse-min6  cm6
09:12:49  14  ,clse-min8  cm8
09:12:49  15  ,clse-min10 cm10
09:12:49  16  ,clse-min12 cm12
09:12:49  17  ,clse-min14 cm14
09:12:49  18  ,clse-min16 cm16
09:12:49  19  ,clse-min18 cm18
09:12:49  20  -- clse relation to moving-avg
09:12:49  21  ,clse-avg4  ca4
09:12:49  22  ,clse-avg6  ca6
09:12:49  23  ,clse-avg8  ca8
09:12:49  24  ,clse-avg10 ca10
09:12:49  25  ,clse-avg12 ca12
09:12:49  26  ,clse-avg14 ca14
09:12:49  27  ,clse-avg16 ca16
09:12:49  28  ,clse-avg18 ca18
09:12:49  29  -- clse relation to moving-max
09:12:49  30  ,clse-max4  cx4
09:12:49  31  ,clse-max6  cx6
09:12:49  32  ,clse-max8  cx8
09:12:49  33  ,clse-max10 cx10
09:12:49  34  ,clse-max12 cx12
09:12:49  35  ,clse-max14 cx14
09:12:49  36  ,clse-max16 cx16
09:12:49  37  ,clse-max18 cx18
09:12:49  38  -- Derive more attributes.
09:12:49  39  -- I want to use CORR() here to help SVM see the shape of the series.
09:12:49  40  -- But COVAR_POP is more stable:
09:12:49  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
09:12:49  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
09:12:49  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
09:12:49  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
09:12:49  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
09:12:49  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
09:12:49  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
09:12:49  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
09:12:49  49  -- Derive date related attributes:
09:12:49  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
09:12:49  51  ,0+TO_CHAR(ydate,'D')d
09:12:49  52  ,0+TO_CHAR(ydate,'W')w
09:12:49  53  -- mpm stands for minutes-past-midnight:
09:12:49  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
09:12:49  55  -- mph stands for minutes-past-hour:
09:12:49  56  ,0+TO_CHAR(ydate,'MI')mph
09:12:49  57  FROM svm6102
09:12:49  58  ORDER BY ydate
09:12:49  59  /

Table created.

Elapsed: 00:00:02.08
09:12:51 SQL> 
09:12:51 SQL> -- rpt
09:12:51 SQL> 
09:12:51 SQL> SELECT
09:12:51   2  pair
09:12:51   3  ,COUNT(pair)
09:12:51   4  ,MIN(clse),MAX(clse)
09:12:51   5  ,MIN(ydate),MAX(ydate)
09:12:51   6  FROM svm6122
09:12:51   7  GROUP BY pair
09:12:51   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19810   1.535325	   1.6295 2010-10-04 09:15:01 2011-01-07 09:10:00

Elapsed: 00:00:00.04
09:12:51 SQL> 
09:12:51 SQL> -- Prepare for derivation of NTILE based params:
09:12:51 SQL> 
09:12:51 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.21
09:12:51 SQL> CREATE TABLE svm6142 COMPRESS AS
09:12:51   2  SELECT
09:12:51   3  pair
09:12:51   4  ,ydate
09:12:51   5  ,prdate
09:12:51   6  ,clse
09:12:51   7  ,g6
09:12:51   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
09:12:51   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
09:12:51  10  ,CASE WHEN trend IS NULL THEN 1
09:12:51  11  	    WHEN trend =0      THEN 1
09:12:51  12  	    ELSE trend END trend
09:12:51  13  ,cm4
09:12:51  14  ,cm6
09:12:51  15  ,cm8
09:12:51  16  ,cm10
09:12:51  17  ,cm12
09:12:51  18  ,cm14
09:12:51  19  ,cm16
09:12:51  20  ,cm18
09:12:51  21  --
09:12:51  22  ,ca4
09:12:51  23  ,ca6
09:12:51  24  ,ca8
09:12:51  25  ,ca10
09:12:51  26  ,ca12
09:12:51  27  ,ca14
09:12:51  28  ,ca16
09:12:51  29  ,ca18
09:12:51  30  --
09:12:51  31  ,cx4
09:12:51  32  ,cx6
09:12:51  33  ,cx8
09:12:51  34  ,cx10
09:12:51  35  ,cx12
09:12:51  36  ,cx14
09:12:51  37  ,cx16
09:12:51  38  ,cx18
09:12:51  39  --
09:12:51  40  ,crr4
09:12:51  41  ,crr6
09:12:51  42  ,crr8
09:12:51  43  ,crr10
09:12:51  44  ,crr12
09:12:51  45  ,crr14
09:12:51  46  ,crr16
09:12:51  47  ,crr18
09:12:51  48  --
09:12:51  49  ,hh
09:12:51  50  ,d
09:12:51  51  ,w
09:12:51  52  ,mpm
09:12:51  53  ,mph
09:12:51  54  FROM svm6122
09:12:51  55  ORDER BY ydate
09:12:51  56  /

Table created.

Elapsed: 00:00:00.36
09:12:52 SQL> 
09:12:52 SQL> -- rpt
09:12:52 SQL> 
09:12:52 SQL> SELECT
09:12:52   2  pair
09:12:52   3  ,trend
09:12:52   4  ,gatt
09:12:52   5  ,COUNT(pair)
09:12:52   6  ,AVG(g6)
09:12:52   7  FROM svm6142
09:12:52   8  GROUP BY pair,trend,gatt
09:12:52   9  ORDER BY pair,trend,gatt
09:12:52  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6479 -.00262136
gbp_usd 	-1 up	      3511 .004318403
gbp_usd 	-1		72
gbp_usd 	 1 nup	      6279 -.00265679
gbp_usd 	 1 up	      3469 .004529717

Elapsed: 00:00:00.05
09:12:52 SQL> 
09:12:52 SQL> 
09:12:52 SQL> -- Derive NTILE based params:
09:12:52 SQL> 
09:12:52 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
09:12:52 SQL> CREATE TABLE svm6162 COMPRESS AS
09:12:52   2  SELECT
09:12:52   3  pair
09:12:52   4  ,ydate
09:12:52   5  ,prdate
09:12:52   6  ,clse
09:12:52   7  ,g6
09:12:52   8  ,gatt
09:12:52   9  ,gattn
09:12:52  10  ,trend
09:12:52  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
09:12:52  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
09:12:52  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
09:12:52  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
09:12:52  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
09:12:52  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
09:12:52  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
09:12:52  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
09:12:52  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
09:12:52  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
09:12:52  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
09:12:52  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
09:12:52  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
09:12:52  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
09:12:52  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
09:12:52  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
09:12:52  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
09:12:52  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
09:12:52  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
09:12:52  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
09:12:52  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
09:12:52  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
09:12:52  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
09:12:52  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
09:12:52  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
09:12:52  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
09:12:52  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
09:12:52  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
09:12:52  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
09:12:52  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
09:12:52  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
09:12:52  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
09:12:52  43  ,hh  att32
09:12:52  44  ,d   att33
09:12:52  45  ,w   att34
09:12:52  46  ,mpm att35
09:12:52  47  ,mph att36
09:12:52  48  ,trend att37
09:12:52  49  FROM svm6142
09:12:52  50  ORDER BY ydate
09:12:52  51  /

Table created.

Elapsed: 00:00:04.87
09:12:57 SQL> 
09:12:57 SQL> -- rpt
09:12:57 SQL> 
09:12:57 SQL> SELECT
09:12:57   2  pair
09:12:57   3  ,trend
09:12:57   4  ,gatt
09:12:57   5  ,COUNT(pair)
09:12:57   6  ,AVG(g6)
09:12:57   7  FROM svm6162
09:12:57   8  GROUP BY pair,trend,gatt
09:12:57   9  ORDER BY pair,trend,gatt
09:12:57  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6479 -.00262136
gbp_usd 	-1 up	      3511 .004318403
gbp_usd 	-1		72
gbp_usd 	 1 nup	      6279 -.00265679
gbp_usd 	 1 up	      3469 .004529717

Elapsed: 00:00:00.03
09:12:57 SQL> 
09:12:57 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.27
09:12:57 SQL> CREATE TABLE modsrc COMPRESS AS
09:12:57   2  SELECT
09:12:57   3  pair
09:12:57   4  ,ydate
09:12:57   5  ,prdate
09:12:57   6  ,trend
09:12:57   7  ,g6
09:12:57   8  ,gatt
09:12:57   9  ,gattn
09:12:57  10  FROM svm6162
09:12:57  11  /

Table created.

Elapsed: 00:00:00.10
09:12:57 SQL> 
09:12:57 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
09:12:57 SQL> 
09:12:57 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.07
09:12:57 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
09:12:57   2  SELECT
09:12:57   3  ydate
09:12:57   4  ,trend gbp_trend
09:12:57   5  ,g6    gbp_g6
09:12:57   6  ,gatt  gbp_gatt
09:12:57   7  ,gattn gbp_gattn
09:12:57   8  FROM modsrc
09:12:57   9  /

Table created.

Elapsed: 00:00:00.07
09:12:58 SQL> 
09:12:58 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
09:12:58 SQL> 
09:12:58 SQL> -- I need a copy of the attributes:
09:12:58 SQL> 
09:12:58 SQL> 
09:12:58 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.17
09:12:58 SQL> CREATE TABLE gbp_att COMPRESS AS
09:12:58   2  SELECT
09:12:58   3  ydate
09:12:58   4  ,att00 gbp_att00
09:12:58   5  ,att01 gbp_att01
09:12:58   6  ,att02 gbp_att02
09:12:58   7  ,att03 gbp_att03
09:12:58   8  ,att04 gbp_att04
09:12:58   9  ,att05 gbp_att05
09:12:58  10  ,att06 gbp_att06
09:12:58  11  ,att07 gbp_att07
09:12:58  12  ,att08 gbp_att08
09:12:58  13  ,att09 gbp_att09
09:12:58  14  ,att10 gbp_att10
09:12:58  15  ,att11 gbp_att11
09:12:58  16  ,att12 gbp_att12
09:12:58  17  ,att13 gbp_att13
09:12:58  18  ,att14 gbp_att14
09:12:58  19  ,att15 gbp_att15
09:12:58  20  ,att16 gbp_att16
09:12:58  21  ,att17 gbp_att17
09:12:58  22  ,att18 gbp_att18
09:12:58  23  ,att19 gbp_att19
09:12:58  24  ,att20 gbp_att20
09:12:58  25  ,att21 gbp_att21
09:12:58  26  ,att22 gbp_att22
09:12:58  27  ,att23 gbp_att23
09:12:58  28  ,att24 gbp_att24
09:12:58  29  ,att25 gbp_att25
09:12:58  30  ,att26 gbp_att26
09:12:58  31  ,att27 gbp_att27
09:12:58  32  ,att28 gbp_att28
09:12:58  33  ,att29 gbp_att29
09:12:58  34  ,att30 gbp_att30
09:12:58  35  ,att31 gbp_att31
09:12:58  36  ,att32 gbp_att32
09:12:58  37  ,att33 gbp_att33
09:12:58  38  ,att34 gbp_att34
09:12:58  39  ,att35 gbp_att35
09:12:58  40  ,att36 gbp_att36
09:12:58  41  ,att37 gbp_att37
09:12:58  42  FROM svm6162
09:12:58  43  /

Table created.

Elapsed: 00:00:00.18
09:12:58 SQL> 
09:12:58 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
09:12:59 SQL> 
09:12:59 SQL> -- rpt
09:12:59 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19810

Elapsed: 00:00:00.86
09:12:59 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19810

Elapsed: 00:00:00.01
09:12:59 SQL> 
09:12:59 SQL> --
09:12:59 SQL> -- jpy610.sql
09:12:59 SQL> --
09:12:59 SQL> 
09:12:59 SQL> -- Creates views and tables for backtesting a forex SVM strategy
09:12:59 SQL> 
09:12:59 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.42
09:13:00 SQL> 
09:13:00 SQL> -- I created di5min here:
09:13:00 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
09:13:00 SQL> 
09:13:00 SQL> CREATE OR REPLACE VIEW svm6102 AS
09:13:00   2  SELECT
09:13:00   3  pair
09:13:00   4  ,ydate
09:13:00   5  ,prdate
09:13:00   6  ,rownum rnum -- acts as t in my time-series
09:13:00   7  ,clse
09:13:00   8  -- Derive a bunch of attributes from clse, the latest price:
09:13:00   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
09:13:00  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
09:13:00  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
09:13:00  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
09:13:00  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
09:13:00  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
09:13:00  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
09:13:00  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
09:13:00  17  --
09:13:00  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
09:13:00  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
09:13:00  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
09:13:00  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
09:13:00  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
09:13:00  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
09:13:00  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
09:13:00  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
09:13:00  26  --
09:13:00  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
09:13:00  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
09:13:00  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
09:13:00  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
09:13:00  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
09:13:00  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
09:13:00  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
09:13:00  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
09:13:00  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
09:13:00  36  FROM di5min WHERE pair LIKE'%jpy%'
09:13:00  37  AND ydate > sysdate - 95
09:13:00  38  ORDER BY ydate
09:13:00  39  /

View created.

Elapsed: 00:00:00.05
09:13:00 SQL> 
09:13:00 SQL> -- rpt
09:13:00 SQL> 
09:13:00 SQL> SELECT
09:13:00   2  pair
09:13:00   3  ,COUNT(pair)
09:13:00   4  ,MIN(clse),MAX(clse)
09:13:00   5  ,MIN(avg6),MAX(avg6)
09:13:00   6  ,MIN(ydate),MAX(ydate)
09:13:00   7  FROM svm6102
09:13:00   8  GROUP BY pair
09:13:00   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19809	 80.25	   84.485 80.3595205 84.3105479 2010-10-04 09:15:01 2011-01-07 09:10:00

Elapsed: 00:00:00.92
09:13:01 SQL> 
09:13:01 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
09:13:01 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.28
09:13:01 SQL> CREATE TABLE svm6122 COMPRESS AS
09:13:01   2  SELECT
09:13:01   3  pair
09:13:01   4  ,ydate
09:13:01   5  ,prdate
09:13:01   6  ,clse
09:13:01   7  -- g6 is important. I want to predict g6:
09:13:01   8  ,ld6 - clse g6
09:13:01   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
09:13:01  10  -- I want more attributes from the ones I derived above:
09:13:01  11  -- clse relation to moving-min
09:13:01  12  ,clse-min4  cm4
09:13:01  13  ,clse-min6  cm6
09:13:01  14  ,clse-min8  cm8
09:13:01  15  ,clse-min10 cm10
09:13:01  16  ,clse-min12 cm12
09:13:01  17  ,clse-min14 cm14
09:13:01  18  ,clse-min16 cm16
09:13:01  19  ,clse-min18 cm18
09:13:01  20  -- clse relation to moving-avg
09:13:01  21  ,clse-avg4  ca4
09:13:01  22  ,clse-avg6  ca6
09:13:01  23  ,clse-avg8  ca8
09:13:01  24  ,clse-avg10 ca10
09:13:01  25  ,clse-avg12 ca12
09:13:01  26  ,clse-avg14 ca14
09:13:01  27  ,clse-avg16 ca16
09:13:01  28  ,clse-avg18 ca18
09:13:01  29  -- clse relation to moving-max
09:13:01  30  ,clse-max4  cx4
09:13:01  31  ,clse-max6  cx6
09:13:01  32  ,clse-max8  cx8
09:13:01  33  ,clse-max10 cx10
09:13:01  34  ,clse-max12 cx12
09:13:01  35  ,clse-max14 cx14
09:13:01  36  ,clse-max16 cx16
09:13:01  37  ,clse-max18 cx18
09:13:01  38  -- Derive more attributes.
09:13:01  39  -- I want to use CORR() here to help SVM see the shape of the series.
09:13:01  40  -- But COVAR_POP is more stable:
09:13:01  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
09:13:01  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
09:13:01  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
09:13:01  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
09:13:01  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
09:13:01  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
09:13:01  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
09:13:01  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
09:13:01  49  -- Derive date related attributes:
09:13:01  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
09:13:01  51  ,0+TO_CHAR(ydate,'D')d
09:13:01  52  ,0+TO_CHAR(ydate,'W')w
09:13:01  53  -- mpm stands for minutes-past-midnight:
09:13:01  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
09:13:01  55  -- mph stands for minutes-past-hour:
09:13:01  56  ,0+TO_CHAR(ydate,'MI')mph
09:13:01  57  FROM svm6102
09:13:01  58  ORDER BY ydate
09:13:01  59  /

Table created.

Elapsed: 00:00:02.09
09:13:03 SQL> 
09:13:03 SQL> -- rpt
09:13:03 SQL> 
09:13:03 SQL> SELECT
09:13:03   2  pair
09:13:03   3  ,COUNT(pair)
09:13:03   4  ,MIN(clse),MAX(clse)
09:13:03   5  ,MIN(ydate),MAX(ydate)
09:13:03   6  FROM svm6122
09:13:03   7  GROUP BY pair
09:13:03   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19809	 80.25	   84.485 2010-10-04 09:15:01 2011-01-07 09:10:00

Elapsed: 00:00:00.04
09:13:03 SQL> 
09:13:03 SQL> -- Prepare for derivation of NTILE based params:
09:13:03 SQL> 
09:13:03 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.22
09:13:03 SQL> CREATE TABLE svm6142 COMPRESS AS
09:13:03   2  SELECT
09:13:03   3  pair
09:13:03   4  ,ydate
09:13:03   5  ,prdate
09:13:03   6  ,clse
09:13:03   7  ,g6
09:13:03   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
09:13:03   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
09:13:03  10  ,CASE WHEN trend IS NULL THEN 1
09:13:03  11  	    WHEN trend =0      THEN 1
09:13:03  12  	    ELSE trend END trend
09:13:03  13  ,cm4
09:13:03  14  ,cm6
09:13:03  15  ,cm8
09:13:03  16  ,cm10
09:13:03  17  ,cm12
09:13:03  18  ,cm14
09:13:03  19  ,cm16
09:13:03  20  ,cm18
09:13:03  21  --
09:13:03  22  ,ca4
09:13:03  23  ,ca6
09:13:03  24  ,ca8
09:13:03  25  ,ca10
09:13:03  26  ,ca12
09:13:03  27  ,ca14
09:13:03  28  ,ca16
09:13:03  29  ,ca18
09:13:03  30  --
09:13:03  31  ,cx4
09:13:03  32  ,cx6
09:13:03  33  ,cx8
09:13:03  34  ,cx10
09:13:03  35  ,cx12
09:13:03  36  ,cx14
09:13:03  37  ,cx16
09:13:03  38  ,cx18
09:13:03  39  --
09:13:03  40  ,crr4
09:13:03  41  ,crr6
09:13:03  42  ,crr8
09:13:03  43  ,crr10
09:13:03  44  ,crr12
09:13:03  45  ,crr14
09:13:03  46  ,crr16
09:13:03  47  ,crr18
09:13:03  48  --
09:13:03  49  ,hh
09:13:03  50  ,d
09:13:03  51  ,w
09:13:03  52  ,mpm
09:13:03  53  ,mph
09:13:03  54  FROM svm6122
09:13:03  55  ORDER BY ydate
09:13:03  56  /

Table created.

Elapsed: 00:00:00.43
09:13:04 SQL> 
09:13:04 SQL> -- rpt
09:13:04 SQL> 
09:13:04 SQL> SELECT
09:13:04   2  pair
09:13:04   3  ,trend
09:13:04   4  ,gatt
09:13:04   5  ,COUNT(pair)
09:13:04   6  ,AVG(g6)
09:13:04   7  FROM svm6142
09:13:04   8  GROUP BY pair,trend,gatt
09:13:04   9  ORDER BY pair,trend,gatt
09:13:04  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5171 -.16583061
usd_jpy 	-1 up	      4864 .170646621
usd_jpy 	-1		 3
usd_jpy 	 1 nup	      5017 -.15289785
usd_jpy 	 1 up	      4685 .172173091
usd_jpy 	 1		69

6 rows selected.

Elapsed: 00:00:00.04
09:13:04 SQL> 
09:13:04 SQL> 
09:13:04 SQL> -- Derive NTILE based params:
09:13:04 SQL> 
09:13:04 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
09:13:04 SQL> CREATE TABLE svm6162 COMPRESS AS
09:13:04   2  SELECT
09:13:04   3  pair
09:13:04   4  ,ydate
09:13:04   5  ,prdate
09:13:04   6  ,clse
09:13:04   7  ,g6
09:13:04   8  ,gatt
09:13:04   9  ,gattn
09:13:04  10  ,trend
09:13:04  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
09:13:04  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
09:13:04  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
09:13:04  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
09:13:04  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
09:13:04  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
09:13:04  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
09:13:04  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
09:13:04  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
09:13:04  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
09:13:04  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
09:13:04  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
09:13:04  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
09:13:04  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
09:13:04  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
09:13:04  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
09:13:04  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
09:13:04  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
09:13:04  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
09:13:04  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
09:13:04  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
09:13:04  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
09:13:04  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
09:13:04  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
09:13:04  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
09:13:04  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
09:13:04  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
09:13:04  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
09:13:04  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
09:13:04  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
09:13:04  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
09:13:04  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
09:13:04  43  ,hh  att32
09:13:04  44  ,d   att33
09:13:04  45  ,w   att34
09:13:04  46  ,mpm att35
09:13:04  47  ,mph att36
09:13:04  48  ,trend att37
09:13:04  49  FROM svm6142
09:13:04  50  ORDER BY ydate
09:13:04  51  /

Table created.

Elapsed: 00:00:04.83
09:13:09 SQL> 
09:13:09 SQL> -- rpt
09:13:09 SQL> 
09:13:09 SQL> SELECT
09:13:09   2  pair
09:13:09   3  ,trend
09:13:09   4  ,gatt
09:13:09   5  ,COUNT(pair)
09:13:09   6  ,AVG(g6)
09:13:09   7  FROM svm6162
09:13:09   8  GROUP BY pair,trend,gatt
09:13:09   9  ORDER BY pair,trend,gatt
09:13:09  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5171 -.16583061
usd_jpy 	-1 up	      4864 .170646621
usd_jpy 	-1		 3
usd_jpy 	 1 nup	      5017 -.15289785
usd_jpy 	 1 up	      4685 .172173091
usd_jpy 	 1		69

6 rows selected.

Elapsed: 00:00:00.02
09:13:09 SQL> 
09:13:09 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
09:13:09 SQL> CREATE TABLE modsrc COMPRESS AS
09:13:09   2  SELECT
09:13:09   3  pair
09:13:09   4  ,ydate
09:13:09   5  ,prdate
09:13:09   6  ,trend
09:13:09   7  ,g6
09:13:09   8  ,gatt
09:13:09   9  ,gattn
09:13:09  10  FROM svm6162
09:13:09  11  /

Table created.

Elapsed: 00:00:00.09
09:13:09 SQL> 
09:13:09 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.28
09:13:09 SQL> 
09:13:09 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.18
09:13:10 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
09:13:10   2  SELECT
09:13:10   3  ydate
09:13:10   4  ,trend jpy_trend
09:13:10   5  ,g6    jpy_g6
09:13:10   6  ,gatt  jpy_gatt
09:13:10   7  ,gattn jpy_gattn
09:13:10   8  FROM modsrc
09:13:10   9  /

Table created.

Elapsed: 00:00:00.07
09:13:10 SQL> 
09:13:10 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
09:13:10 SQL> 
09:13:10 SQL> -- I need a copy of the attributes:
09:13:10 SQL> 
09:13:10 SQL> 
09:13:10 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.05
09:13:10 SQL> CREATE TABLE jpy_att COMPRESS AS
09:13:10   2  SELECT
09:13:10   3  ydate
09:13:10   4  ,att00 jpy_att00
09:13:10   5  ,att01 jpy_att01
09:13:10   6  ,att02 jpy_att02
09:13:10   7  ,att03 jpy_att03
09:13:10   8  ,att04 jpy_att04
09:13:10   9  ,att05 jpy_att05
09:13:10  10  ,att06 jpy_att06
09:13:10  11  ,att07 jpy_att07
09:13:10  12  ,att08 jpy_att08
09:13:10  13  ,att09 jpy_att09
09:13:10  14  ,att10 jpy_att10
09:13:10  15  ,att11 jpy_att11
09:13:10  16  ,att12 jpy_att12
09:13:10  17  ,att13 jpy_att13
09:13:10  18  ,att14 jpy_att14
09:13:10  19  ,att15 jpy_att15
09:13:10  20  ,att16 jpy_att16
09:13:10  21  ,att17 jpy_att17
09:13:10  22  ,att18 jpy_att18
09:13:10  23  ,att19 jpy_att19
09:13:10  24  ,att20 jpy_att20
09:13:10  25  ,att21 jpy_att21
09:13:10  26  ,att22 jpy_att22
09:13:10  27  ,att23 jpy_att23
09:13:10  28  ,att24 jpy_att24
09:13:10  29  ,att25 jpy_att25
09:13:10  30  ,att26 jpy_att26
09:13:10  31  ,att27 jpy_att27
09:13:10  32  ,att28 jpy_att28
09:13:10  33  ,att29 jpy_att29
09:13:10  34  ,att30 jpy_att30
09:13:10  35  ,att31 jpy_att31
09:13:10  36  ,att32 jpy_att32
09:13:10  37  ,att33 jpy_att33
09:13:10  38  ,att34 jpy_att34
09:13:10  39  ,att35 jpy_att35
09:13:10  40  ,att36 jpy_att36
09:13:10  41  ,att37 jpy_att37
09:13:10  42  FROM svm6162
09:13:10  43  /

Table created.

Elapsed: 00:00:00.17
09:13:10 SQL> 
09:13:10 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
09:13:10 SQL> 
09:13:10 SQL> -- rpt
09:13:10 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.90
09:13:11 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.00
09:13:11 SQL> 
09:13:11 SQL> --
09:13:11 SQL> -- cad610.sql
09:13:11 SQL> --
09:13:11 SQL> 
09:13:11 SQL> -- Creates views and tables for backtesting a forex SVM strategy
09:13:11 SQL> 
09:13:11 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.36
09:13:12 SQL> 
09:13:12 SQL> -- I created di5min here:
09:13:12 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
09:13:12 SQL> 
09:13:12 SQL> CREATE OR REPLACE VIEW svm6102 AS
09:13:12   2  SELECT
09:13:12   3  pair
09:13:12   4  ,ydate
09:13:12   5  ,prdate
09:13:12   6  ,rownum rnum -- acts as t in my time-series
09:13:12   7  ,clse
09:13:12   8  -- Derive a bunch of attributes from clse, the latest price:
09:13:12   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
09:13:12  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
09:13:12  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
09:13:12  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
09:13:12  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
09:13:12  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
09:13:12  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
09:13:12  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
09:13:12  17  --
09:13:12  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
09:13:12  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
09:13:12  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
09:13:12  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
09:13:12  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
09:13:12  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
09:13:12  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
09:13:12  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
09:13:12  26  --
09:13:12  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
09:13:12  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
09:13:12  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
09:13:12  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
09:13:12  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
09:13:12  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
09:13:12  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
09:13:12  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
09:13:12  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
09:13:12  36  FROM di5min WHERE pair LIKE'%cad%'
09:13:12  37  AND ydate > sysdate - 95
09:13:12  38  ORDER BY ydate
09:13:12  39  /

View created.

Elapsed: 00:00:00.04
09:13:12 SQL> 
09:13:12 SQL> -- rpt
09:13:12 SQL> 
09:13:12 SQL> SELECT
09:13:12   2  pair
09:13:12   3  ,COUNT(pair)
09:13:12   4  ,MIN(clse),MAX(clse)
09:13:12   5  ,MIN(avg6),MAX(avg6)
09:13:12   6  ,MIN(ydate),MAX(ydate)
09:13:12   7  FROM svm6102
09:13:12   8  GROUP BY pair
09:13:12   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19809    .988925	   1.0355  .99060274 1.03282877 2010-10-04 09:15:01 2011-01-07 09:10:00

Elapsed: 00:00:00.87
09:13:13 SQL> 
09:13:13 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
09:13:13 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.28
09:13:13 SQL> CREATE TABLE svm6122 COMPRESS AS
09:13:13   2  SELECT
09:13:13   3  pair
09:13:13   4  ,ydate
09:13:13   5  ,prdate
09:13:13   6  ,clse
09:13:13   7  -- g6 is important. I want to predict g6:
09:13:13   8  ,ld6 - clse g6
09:13:13   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
09:13:13  10  -- I want more attributes from the ones I derived above:
09:13:13  11  -- clse relation to moving-min
09:13:13  12  ,clse-min4  cm4
09:13:13  13  ,clse-min6  cm6
09:13:13  14  ,clse-min8  cm8
09:13:13  15  ,clse-min10 cm10
09:13:13  16  ,clse-min12 cm12
09:13:13  17  ,clse-min14 cm14
09:13:13  18  ,clse-min16 cm16
09:13:13  19  ,clse-min18 cm18
09:13:13  20  -- clse relation to moving-avg
09:13:13  21  ,clse-avg4  ca4
09:13:13  22  ,clse-avg6  ca6
09:13:13  23  ,clse-avg8  ca8
09:13:13  24  ,clse-avg10 ca10
09:13:13  25  ,clse-avg12 ca12
09:13:13  26  ,clse-avg14 ca14
09:13:13  27  ,clse-avg16 ca16
09:13:13  28  ,clse-avg18 ca18
09:13:13  29  -- clse relation to moving-max
09:13:13  30  ,clse-max4  cx4
09:13:13  31  ,clse-max6  cx6
09:13:13  32  ,clse-max8  cx8
09:13:13  33  ,clse-max10 cx10
09:13:13  34  ,clse-max12 cx12
09:13:13  35  ,clse-max14 cx14
09:13:13  36  ,clse-max16 cx16
09:13:13  37  ,clse-max18 cx18
09:13:13  38  -- Derive more attributes.
09:13:13  39  -- I want to use CORR() here to help SVM see the shape of the series.
09:13:13  40  -- But COVAR_POP is more stable:
09:13:13  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
09:13:13  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
09:13:13  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
09:13:13  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
09:13:13  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
09:13:13  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
09:13:13  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
09:13:13  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
09:13:13  49  -- Derive date related attributes:
09:13:13  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
09:13:13  51  ,0+TO_CHAR(ydate,'D')d
09:13:13  52  ,0+TO_CHAR(ydate,'W')w
09:13:13  53  -- mpm stands for minutes-past-midnight:
09:13:13  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
09:13:13  55  -- mph stands for minutes-past-hour:
09:13:13  56  ,0+TO_CHAR(ydate,'MI')mph
09:13:13  57  FROM svm6102
09:13:13  58  ORDER BY ydate
09:13:13  59  /

Table created.

Elapsed: 00:00:02.23
09:13:15 SQL> 
09:13:15 SQL> -- rpt
09:13:15 SQL> 
09:13:15 SQL> SELECT
09:13:15   2  pair
09:13:15   3  ,COUNT(pair)
09:13:15   4  ,MIN(clse),MAX(clse)
09:13:15   5  ,MIN(ydate),MAX(ydate)
09:13:15   6  FROM svm6122
09:13:15   7  GROUP BY pair
09:13:15   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19809    .988925	   1.0355 2010-10-04 09:15:01 2011-01-07 09:10:00

Elapsed: 00:00:00.04
09:13:15 SQL> 
09:13:15 SQL> -- Prepare for derivation of NTILE based params:
09:13:15 SQL> 
09:13:15 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.26
09:13:15 SQL> CREATE TABLE svm6142 COMPRESS AS
09:13:15   2  SELECT
09:13:15   3  pair
09:13:15   4  ,ydate
09:13:15   5  ,prdate
09:13:15   6  ,clse
09:13:15   7  ,g6
09:13:15   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
09:13:15   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
09:13:15  10  ,CASE WHEN trend IS NULL THEN 1
09:13:15  11  	    WHEN trend =0      THEN 1
09:13:15  12  	    ELSE trend END trend
09:13:15  13  ,cm4
09:13:15  14  ,cm6
09:13:15  15  ,cm8
09:13:15  16  ,cm10
09:13:15  17  ,cm12
09:13:15  18  ,cm14
09:13:15  19  ,cm16
09:13:15  20  ,cm18
09:13:15  21  --
09:13:15  22  ,ca4
09:13:15  23  ,ca6
09:13:15  24  ,ca8
09:13:15  25  ,ca10
09:13:15  26  ,ca12
09:13:15  27  ,ca14
09:13:15  28  ,ca16
09:13:15  29  ,ca18
09:13:15  30  --
09:13:15  31  ,cx4
09:13:15  32  ,cx6
09:13:15  33  ,cx8
09:13:15  34  ,cx10
09:13:15  35  ,cx12
09:13:15  36  ,cx14
09:13:15  37  ,cx16
09:13:15  38  ,cx18
09:13:15  39  --
09:13:15  40  ,crr4
09:13:15  41  ,crr6
09:13:15  42  ,crr8
09:13:15  43  ,crr10
09:13:15  44  ,crr12
09:13:15  45  ,crr14
09:13:15  46  ,crr16
09:13:15  47  ,crr18
09:13:15  48  --
09:13:15  49  ,hh
09:13:15  50  ,d
09:13:15  51  ,w
09:13:15  52  ,mpm
09:13:15  53  ,mph
09:13:15  54  FROM svm6122
09:13:15  55  ORDER BY ydate
09:13:15  56  /

Table created.

Elapsed: 00:00:00.37
09:13:16 SQL> 
09:13:16 SQL> -- rpt
09:13:16 SQL> 
09:13:16 SQL> SELECT
09:13:16   2  pair
09:13:16   3  ,trend
09:13:16   4  ,gatt
09:13:16   5  ,COUNT(pair)
09:13:16   6  ,AVG(g6)
09:13:16   7  FROM svm6142
09:13:16   8  GROUP BY pair,trend,gatt
09:13:16   9  ORDER BY pair,trend,gatt
09:13:16  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7344 -.00123433
usd_cad 	-1 up	      3154 .003039167
usd_cad 	-1		 7
usd_cad 	 1 nup	      6828 -.00160882
usd_cad 	 1 up	      2411 .003633325
usd_cad 	 1		65

6 rows selected.

Elapsed: 00:00:00.04
09:13:16 SQL> 
09:13:16 SQL> 
09:13:16 SQL> -- Derive NTILE based params:
09:13:16 SQL> 
09:13:16 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.23
09:13:16 SQL> CREATE TABLE svm6162 COMPRESS AS
09:13:16   2  SELECT
09:13:16   3  pair
09:13:16   4  ,ydate
09:13:16   5  ,prdate
09:13:16   6  ,clse
09:13:16   7  ,g6
09:13:16   8  ,gatt
09:13:16   9  ,gattn
09:13:16  10  ,trend
09:13:16  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
09:13:16  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
09:13:16  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
09:13:16  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
09:13:16  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
09:13:16  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
09:13:16  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
09:13:16  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
09:13:16  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
09:13:16  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
09:13:16  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
09:13:16  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
09:13:16  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
09:13:16  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
09:13:16  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
09:13:16  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
09:13:16  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
09:13:16  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
09:13:16  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
09:13:16  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
09:13:16  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
09:13:16  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
09:13:16  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
09:13:16  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
09:13:16  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
09:13:16  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
09:13:16  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
09:13:16  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
09:13:16  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
09:13:16  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
09:13:16  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
09:13:16  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
09:13:16  43  ,hh  att32
09:13:16  44  ,d   att33
09:13:16  45  ,w   att34
09:13:16  46  ,mpm att35
09:13:16  47  ,mph att36
09:13:16  48  ,trend att37
09:13:16  49  FROM svm6142
09:13:16  50  ORDER BY ydate
09:13:16  51  /

Table created.

Elapsed: 00:00:04.90
09:13:21 SQL> 
09:13:21 SQL> -- rpt
09:13:21 SQL> 
09:13:21 SQL> SELECT
09:13:21   2  pair
09:13:21   3  ,trend
09:13:21   4  ,gatt
09:13:21   5  ,COUNT(pair)
09:13:21   6  ,AVG(g6)
09:13:21   7  FROM svm6162
09:13:21   8  GROUP BY pair,trend,gatt
09:13:21   9  ORDER BY pair,trend,gatt
09:13:21  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7344 -.00123433
usd_cad 	-1 up	      3154 .003039167
usd_cad 	-1		 7
usd_cad 	 1 nup	      6828 -.00160882
usd_cad 	 1 up	      2411 .003633325
usd_cad 	 1		65

6 rows selected.

Elapsed: 00:00:00.03
09:13:21 SQL> 
09:13:21 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
09:13:21 SQL> CREATE TABLE modsrc COMPRESS AS
09:13:21   2  SELECT
09:13:21   3  pair
09:13:21   4  ,ydate
09:13:21   5  ,prdate
09:13:21   6  ,trend
09:13:21   7  ,g6
09:13:21   8  ,gatt
09:13:21   9  ,gattn
09:13:21  10  FROM svm6162
09:13:21  11  /

Table created.

Elapsed: 00:00:00.08
09:13:21 SQL> 
09:13:21 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.29
09:13:22 SQL> 
09:13:22 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
09:13:22 SQL> CREATE TABLE cad_ms610 COMPRESS AS
09:13:22   2  SELECT
09:13:22   3  ydate
09:13:22   4  ,trend cad_trend
09:13:22   5  ,g6    cad_g6
09:13:22   6  ,gatt  cad_gatt
09:13:22   7  ,gattn cad_gattn
09:13:22   8  FROM modsrc
09:13:22   9  /

Table created.

Elapsed: 00:00:00.06
09:13:22 SQL> 
09:13:22 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
09:13:22 SQL> 
09:13:22 SQL> -- I need a copy of the attributes:
09:13:22 SQL> 
09:13:22 SQL> 
09:13:22 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.19
09:13:22 SQL> CREATE TABLE cad_att COMPRESS AS
09:13:22   2  SELECT
09:13:22   3  ydate
09:13:22   4  ,att00 cad_att00
09:13:22   5  ,att01 cad_att01
09:13:22   6  ,att02 cad_att02
09:13:22   7  ,att03 cad_att03
09:13:22   8  ,att04 cad_att04
09:13:22   9  ,att05 cad_att05
09:13:22  10  ,att06 cad_att06
09:13:22  11  ,att07 cad_att07
09:13:22  12  ,att08 cad_att08
09:13:22  13  ,att09 cad_att09
09:13:22  14  ,att10 cad_att10
09:13:22  15  ,att11 cad_att11
09:13:22  16  ,att12 cad_att12
09:13:22  17  ,att13 cad_att13
09:13:22  18  ,att14 cad_att14
09:13:22  19  ,att15 cad_att15
09:13:22  20  ,att16 cad_att16
09:13:22  21  ,att17 cad_att17
09:13:22  22  ,att18 cad_att18
09:13:22  23  ,att19 cad_att19
09:13:22  24  ,att20 cad_att20
09:13:22  25  ,att21 cad_att21
09:13:22  26  ,att22 cad_att22
09:13:22  27  ,att23 cad_att23
09:13:22  28  ,att24 cad_att24
09:13:22  29  ,att25 cad_att25
09:13:22  30  ,att26 cad_att26
09:13:22  31  ,att27 cad_att27
09:13:22  32  ,att28 cad_att28
09:13:22  33  ,att29 cad_att29
09:13:22  34  ,att30 cad_att30
09:13:22  35  ,att31 cad_att31
09:13:22  36  ,att32 cad_att32
09:13:22  37  ,att33 cad_att33
09:13:22  38  ,att34 cad_att34
09:13:22  39  ,att35 cad_att35
09:13:22  40  ,att36 cad_att36
09:13:22  41  ,att37 cad_att37
09:13:22  42  FROM svm6162
09:13:22  43  /

Table created.

Elapsed: 00:00:00.18
09:13:22 SQL> 
09:13:22 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
09:13:23 SQL> 
09:13:23 SQL> -- rpt
09:13:23 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.82
09:13:23 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.00
09:13:23 SQL> 
09:13:23 SQL> --
09:13:23 SQL> -- chf610.sql
09:13:23 SQL> --
09:13:23 SQL> 
09:13:23 SQL> -- Creates views and tables for backtesting a forex SVM strategy
09:13:23 SQL> 
09:13:23 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
09:13:24 SQL> 
09:13:24 SQL> -- I created di5min here:
09:13:24 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
09:13:24 SQL> 
09:13:24 SQL> CREATE OR REPLACE VIEW svm6102 AS
09:13:24   2  SELECT
09:13:24   3  pair
09:13:24   4  ,ydate
09:13:24   5  ,prdate
09:13:24   6  ,rownum rnum -- acts as t in my time-series
09:13:24   7  ,clse
09:13:24   8  -- Derive a bunch of attributes from clse, the latest price:
09:13:24   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
09:13:24  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
09:13:24  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
09:13:24  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
09:13:24  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
09:13:24  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
09:13:24  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
09:13:24  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
09:13:24  17  --
09:13:24  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
09:13:24  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
09:13:24  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
09:13:24  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
09:13:24  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
09:13:24  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
09:13:24  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
09:13:24  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
09:13:24  26  --
09:13:24  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
09:13:24  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
09:13:24  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
09:13:24  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
09:13:24  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
09:13:24  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
09:13:24  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
09:13:24  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
09:13:24  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
09:13:24  36  FROM di5min WHERE pair LIKE'%chf%'
09:13:24  37  AND ydate > sysdate - 95
09:13:24  38  ORDER BY ydate
09:13:24  39  /

View created.

Elapsed: 00:00:00.03
09:13:24 SQL> 
09:13:24 SQL> -- rpt
09:13:24 SQL> 
09:13:24 SQL> SELECT
09:13:24   2  pair
09:13:24   3  ,COUNT(pair)
09:13:24   4  ,MIN(clse),MAX(clse)
09:13:24   5  ,MIN(avg6),MAX(avg6)
09:13:24   6  ,MIN(ydate),MAX(ydate)
09:13:24   7  FROM svm6102
09:13:24   8  GROUP BY pair
09:13:24   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19812    .931675	  1.00635 .933257705 1.00498151 2010-10-04 09:15:01 2011-01-07 09:10:00

Elapsed: 00:00:00.86
09:13:25 SQL> 
09:13:25 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
09:13:25 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.29
09:13:25 SQL> CREATE TABLE svm6122 COMPRESS AS
09:13:25   2  SELECT
09:13:25   3  pair
09:13:25   4  ,ydate
09:13:25   5  ,prdate
09:13:25   6  ,clse
09:13:25   7  -- g6 is important. I want to predict g6:
09:13:25   8  ,ld6 - clse g6
09:13:25   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
09:13:25  10  -- I want more attributes from the ones I derived above:
09:13:25  11  -- clse relation to moving-min
09:13:25  12  ,clse-min4  cm4
09:13:25  13  ,clse-min6  cm6
09:13:25  14  ,clse-min8  cm8
09:13:25  15  ,clse-min10 cm10
09:13:25  16  ,clse-min12 cm12
09:13:25  17  ,clse-min14 cm14
09:13:25  18  ,clse-min16 cm16
09:13:25  19  ,clse-min18 cm18
09:13:25  20  -- clse relation to moving-avg
09:13:25  21  ,clse-avg4  ca4
09:13:25  22  ,clse-avg6  ca6
09:13:25  23  ,clse-avg8  ca8
09:13:25  24  ,clse-avg10 ca10
09:13:25  25  ,clse-avg12 ca12
09:13:25  26  ,clse-avg14 ca14
09:13:25  27  ,clse-avg16 ca16
09:13:25  28  ,clse-avg18 ca18
09:13:25  29  -- clse relation to moving-max
09:13:25  30  ,clse-max4  cx4
09:13:25  31  ,clse-max6  cx6
09:13:25  32  ,clse-max8  cx8
09:13:25  33  ,clse-max10 cx10
09:13:25  34  ,clse-max12 cx12
09:13:25  35  ,clse-max14 cx14
09:13:25  36  ,clse-max16 cx16
09:13:25  37  ,clse-max18 cx18
09:13:25  38  -- Derive more attributes.
09:13:25  39  -- I want to use CORR() here to help SVM see the shape of the series.
09:13:25  40  -- But COVAR_POP is more stable:
09:13:25  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
09:13:25  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
09:13:25  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
09:13:25  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
09:13:25  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
09:13:25  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
09:13:25  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
09:13:25  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
09:13:25  49  -- Derive date related attributes:
09:13:25  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
09:13:25  51  ,0+TO_CHAR(ydate,'D')d
09:13:25  52  ,0+TO_CHAR(ydate,'W')w
09:13:25  53  -- mpm stands for minutes-past-midnight:
09:13:25  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
09:13:25  55  -- mph stands for minutes-past-hour:
09:13:25  56  ,0+TO_CHAR(ydate,'MI')mph
09:13:25  57  FROM svm6102
09:13:25  58  ORDER BY ydate
09:13:25  59  /

Table created.

Elapsed: 00:00:02.10
09:13:27 SQL> 
09:13:27 SQL> -- rpt
09:13:27 SQL> 
09:13:27 SQL> SELECT
09:13:27   2  pair
09:13:27   3  ,COUNT(pair)
09:13:27   4  ,MIN(clse),MAX(clse)
09:13:27   5  ,MIN(ydate),MAX(ydate)
09:13:27   6  FROM svm6122
09:13:27   7  GROUP BY pair
09:13:27   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19812    .931675	  1.00635 2010-10-04 09:15:01 2011-01-07 09:10:00

Elapsed: 00:00:00.04
09:13:27 SQL> 
09:13:27 SQL> -- Prepare for derivation of NTILE based params:
09:13:27 SQL> 
09:13:27 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.28
09:13:27 SQL> CREATE TABLE svm6142 COMPRESS AS
09:13:27   2  SELECT
09:13:27   3  pair
09:13:27   4  ,ydate
09:13:27   5  ,prdate
09:13:27   6  ,clse
09:13:27   7  ,g6
09:13:27   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
09:13:27   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
09:13:27  10  ,CASE WHEN trend IS NULL THEN 1
09:13:27  11  	    WHEN trend =0      THEN 1
09:13:27  12  	    ELSE trend END trend
09:13:27  13  ,cm4
09:13:27  14  ,cm6
09:13:27  15  ,cm8
09:13:27  16  ,cm10
09:13:27  17  ,cm12
09:13:27  18  ,cm14
09:13:27  19  ,cm16
09:13:27  20  ,cm18
09:13:27  21  --
09:13:27  22  ,ca4
09:13:27  23  ,ca6
09:13:27  24  ,ca8
09:13:27  25  ,ca10
09:13:27  26  ,ca12
09:13:27  27  ,ca14
09:13:27  28  ,ca16
09:13:27  29  ,ca18
09:13:27  30  --
09:13:27  31  ,cx4
09:13:27  32  ,cx6
09:13:27  33  ,cx8
09:13:27  34  ,cx10
09:13:27  35  ,cx12
09:13:27  36  ,cx14
09:13:27  37  ,cx16
09:13:27  38  ,cx18
09:13:27  39  --
09:13:27  40  ,crr4
09:13:27  41  ,crr6
09:13:27  42  ,crr8
09:13:27  43  ,crr10
09:13:27  44  ,crr12
09:13:27  45  ,crr14
09:13:27  46  ,crr16
09:13:27  47  ,crr18
09:13:27  48  --
09:13:27  49  ,hh
09:13:27  50  ,d
09:13:27  51  ,w
09:13:27  52  ,mpm
09:13:27  53  ,mph
09:13:27  54  FROM svm6122
09:13:27  55  ORDER BY ydate
09:13:27  56  /

Table created.

Elapsed: 00:00:00.37
09:13:28 SQL> 
09:13:28 SQL> -- rpt
09:13:28 SQL> 
09:13:28 SQL> SELECT
09:13:28   2  pair
09:13:28   3  ,trend
09:13:28   4  ,gatt
09:13:28   5  ,COUNT(pair)
09:13:28   6  ,AVG(g6)
09:13:28   7  FROM svm6142
09:13:28   8  GROUP BY pair,trend,gatt
09:13:28   9  ORDER BY pair,trend,gatt
09:13:28  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7119 -.00196849
usd_chf 	-1 up	      3086 .003809605
usd_chf 	-1		30
usd_chf 	 1 nup	      6589 -.00151408
usd_chf 	 1 up	      2946 .003958819
usd_chf 	 1		42

6 rows selected.

Elapsed: 00:00:00.03
09:13:28 SQL> 
09:13:28 SQL> 
09:13:28 SQL> -- Derive NTILE based params:
09:13:28 SQL> 
09:13:28 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.22
09:13:28 SQL> CREATE TABLE svm6162 COMPRESS AS
09:13:28   2  SELECT
09:13:28   3  pair
09:13:28   4  ,ydate
09:13:28   5  ,prdate
09:13:28   6  ,clse
09:13:28   7  ,g6
09:13:28   8  ,gatt
09:13:28   9  ,gattn
09:13:28  10  ,trend
09:13:28  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
09:13:28  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
09:13:28  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
09:13:28  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
09:13:28  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
09:13:28  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
09:13:28  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
09:13:28  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
09:13:28  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
09:13:28  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
09:13:28  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
09:13:28  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
09:13:28  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
09:13:28  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
09:13:28  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
09:13:28  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
09:13:28  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
09:13:28  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
09:13:28  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
09:13:28  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
09:13:28  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
09:13:28  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
09:13:28  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
09:13:28  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
09:13:28  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
09:13:28  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
09:13:28  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
09:13:28  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
09:13:28  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
09:13:28  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
09:13:28  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
09:13:28  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
09:13:28  43  ,hh  att32
09:13:28  44  ,d   att33
09:13:28  45  ,w   att34
09:13:28  46  ,mpm att35
09:13:28  47  ,mph att36
09:13:28  48  ,trend att37
09:13:28  49  FROM svm6142
09:13:28  50  ORDER BY ydate
09:13:28  51  /

Table created.

Elapsed: 00:00:04.83
09:13:33 SQL> 
09:13:33 SQL> -- rpt
09:13:33 SQL> 
09:13:33 SQL> SELECT
09:13:33   2  pair
09:13:33   3  ,trend
09:13:33   4  ,gatt
09:13:33   5  ,COUNT(pair)
09:13:33   6  ,AVG(g6)
09:13:33   7  FROM svm6162
09:13:33   8  GROUP BY pair,trend,gatt
09:13:33   9  ORDER BY pair,trend,gatt
09:13:33  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7119 -.00196849
usd_chf 	-1 up	      3086 .003809605
usd_chf 	-1		30
usd_chf 	 1 nup	      6589 -.00151408
usd_chf 	 1 up	      2946 .003958819
usd_chf 	 1		42

6 rows selected.

Elapsed: 00:00:00.03
09:13:33 SQL> 
09:13:33 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.19
09:13:33 SQL> CREATE TABLE modsrc COMPRESS AS
09:13:33   2  SELECT
09:13:33   3  pair
09:13:33   4  ,ydate
09:13:33   5  ,prdate
09:13:33   6  ,trend
09:13:33   7  ,g6
09:13:33   8  ,gatt
09:13:33   9  ,gattn
09:13:33  10  FROM svm6162
09:13:33  11  /

Table created.

Elapsed: 00:00:00.09
09:13:33 SQL> 
09:13:33 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
09:13:33 SQL> 
09:13:33 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
09:13:33 SQL> CREATE TABLE chf_ms610 COMPRESS AS
09:13:33   2  SELECT
09:13:33   3  ydate
09:13:33   4  ,trend chf_trend
09:13:33   5  ,g6    chf_g6
09:13:33   6  ,gatt  chf_gatt
09:13:33   7  ,gattn chf_gattn
09:13:33   8  FROM modsrc
09:13:33   9  /

Table created.

Elapsed: 00:00:00.07
09:13:34 SQL> 
09:13:34 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
09:13:34 SQL> 
09:13:34 SQL> -- I need a copy of the attributes:
09:13:34 SQL> 
09:13:34 SQL> 
09:13:34 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.04
09:13:34 SQL> CREATE TABLE chf_att COMPRESS AS
09:13:34   2  SELECT
09:13:34   3  ydate
09:13:34   4  ,att00 chf_att00
09:13:34   5  ,att01 chf_att01
09:13:34   6  ,att02 chf_att02
09:13:34   7  ,att03 chf_att03
09:13:34   8  ,att04 chf_att04
09:13:34   9  ,att05 chf_att05
09:13:34  10  ,att06 chf_att06
09:13:34  11  ,att07 chf_att07
09:13:34  12  ,att08 chf_att08
09:13:34  13  ,att09 chf_att09
09:13:34  14  ,att10 chf_att10
09:13:34  15  ,att11 chf_att11
09:13:34  16  ,att12 chf_att12
09:13:34  17  ,att13 chf_att13
09:13:34  18  ,att14 chf_att14
09:13:34  19  ,att15 chf_att15
09:13:34  20  ,att16 chf_att16
09:13:34  21  ,att17 chf_att17
09:13:34  22  ,att18 chf_att18
09:13:34  23  ,att19 chf_att19
09:13:34  24  ,att20 chf_att20
09:13:34  25  ,att21 chf_att21
09:13:34  26  ,att22 chf_att22
09:13:34  27  ,att23 chf_att23
09:13:34  28  ,att24 chf_att24
09:13:34  29  ,att25 chf_att25
09:13:34  30  ,att26 chf_att26
09:13:34  31  ,att27 chf_att27
09:13:34  32  ,att28 chf_att28
09:13:34  33  ,att29 chf_att29
09:13:34  34  ,att30 chf_att30
09:13:34  35  ,att31 chf_att31
09:13:34  36  ,att32 chf_att32
09:13:34  37  ,att33 chf_att33
09:13:34  38  ,att34 chf_att34
09:13:34  39  ,att35 chf_att35
09:13:34  40  ,att36 chf_att36
09:13:34  41  ,att37 chf_att37
09:13:34  42  FROM svm6162
09:13:34  43  /

Table created.

Elapsed: 00:00:00.15
09:13:34 SQL> 
09:13:34 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
09:13:34 SQL> 
09:13:34 SQL> -- rpt
09:13:34 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19812

Elapsed: 00:00:00.84
09:13:35 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19812

Elapsed: 00:00:00.00
09:13:35 SQL> 
09:13:35 SQL> --
09:13:35 SQL> -- ech610.sql
09:13:35 SQL> --
09:13:35 SQL> 
09:13:35 SQL> -- Creates views and tables for backtesting a forex SVM strategy
09:13:35 SQL> 
09:13:35 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:01.26
09:13:36 SQL> 
09:13:36 SQL> -- I created di5min here:
09:13:36 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
09:13:36 SQL> 
09:13:36 SQL> CREATE OR REPLACE VIEW svm6102 AS
09:13:36   2  SELECT
09:13:36   3  pair
09:13:36   4  ,ydate
09:13:36   5  ,prdate
09:13:36   6  ,rownum rnum -- acts as t in my time-series
09:13:36   7  ,clse
09:13:36   8  -- Derive a bunch of attributes from clse, the latest price:
09:13:36   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
09:13:36  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
09:13:36  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
09:13:36  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
09:13:36  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
09:13:36  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
09:13:36  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
09:13:36  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
09:13:36  17  --
09:13:36  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
09:13:36  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
09:13:36  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
09:13:36  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
09:13:36  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
09:13:36  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
09:13:36  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
09:13:36  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
09:13:36  26  --
09:13:36  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
09:13:36  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
09:13:36  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
09:13:36  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
09:13:36  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
09:13:36  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
09:13:36  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
09:13:36  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
09:13:36  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
09:13:36  36  FROM di5min WHERE pair LIKE'%ech%'
09:13:36  37  AND ydate > sysdate - 95
09:13:36  38  ORDER BY ydate
09:13:36  39  /

View created.

Elapsed: 00:00:00.04
09:13:36 SQL> 
09:13:36 SQL> -- rpt
09:13:36 SQL> 
09:13:36 SQL> SELECT
09:13:36   2  pair
09:13:36   3  ,COUNT(pair)
09:13:36   4  ,MIN(clse),MAX(clse)
09:13:36   5  ,MIN(avg6),MAX(avg6)
09:13:36   6  ,MIN(ydate),MAX(ydate)
09:13:36   7  FROM svm6102
09:13:36   8  GROUP BY pair
09:13:36   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19809 1.24182424 1.38284305 1.24320711 1.37986485 2010-10-04 09:15:01 2011-01-07 09:05:00

Elapsed: 00:00:00.83
09:13:37 SQL> 
09:13:37 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
09:13:37 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.27
09:13:38 SQL> CREATE TABLE svm6122 COMPRESS AS
09:13:38   2  SELECT
09:13:38   3  pair
09:13:38   4  ,ydate
09:13:38   5  ,prdate
09:13:38   6  ,clse
09:13:38   7  -- g6 is important. I want to predict g6:
09:13:38   8  ,ld6 - clse g6
09:13:38   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
09:13:38  10  -- I want more attributes from the ones I derived above:
09:13:38  11  -- clse relation to moving-min
09:13:38  12  ,clse-min4  cm4
09:13:38  13  ,clse-min6  cm6
09:13:38  14  ,clse-min8  cm8
09:13:38  15  ,clse-min10 cm10
09:13:38  16  ,clse-min12 cm12
09:13:38  17  ,clse-min14 cm14
09:13:38  18  ,clse-min16 cm16
09:13:38  19  ,clse-min18 cm18
09:13:38  20  -- clse relation to moving-avg
09:13:38  21  ,clse-avg4  ca4
09:13:38  22  ,clse-avg6  ca6
09:13:38  23  ,clse-avg8  ca8
09:13:38  24  ,clse-avg10 ca10
09:13:38  25  ,clse-avg12 ca12
09:13:38  26  ,clse-avg14 ca14
09:13:38  27  ,clse-avg16 ca16
09:13:38  28  ,clse-avg18 ca18
09:13:38  29  -- clse relation to moving-max
09:13:38  30  ,clse-max4  cx4
09:13:38  31  ,clse-max6  cx6
09:13:38  32  ,clse-max8  cx8
09:13:38  33  ,clse-max10 cx10
09:13:38  34  ,clse-max12 cx12
09:13:38  35  ,clse-max14 cx14
09:13:38  36  ,clse-max16 cx16
09:13:38  37  ,clse-max18 cx18
09:13:38  38  -- Derive more attributes.
09:13:38  39  -- I want to use CORR() here to help SVM see the shape of the series.
09:13:38  40  -- But COVAR_POP is more stable:
09:13:38  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
09:13:38  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
09:13:38  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
09:13:38  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
09:13:38  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
09:13:38  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
09:13:38  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
09:13:38  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
09:13:38  49  -- Derive date related attributes:
09:13:38  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
09:13:38  51  ,0+TO_CHAR(ydate,'D')d
09:13:38  52  ,0+TO_CHAR(ydate,'W')w
09:13:38  53  -- mpm stands for minutes-past-midnight:
09:13:38  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
09:13:38  55  -- mph stands for minutes-past-hour:
09:13:38  56  ,0+TO_CHAR(ydate,'MI')mph
09:13:38  57  FROM svm6102
09:13:38  58  ORDER BY ydate
09:13:38  59  /

Table created.

Elapsed: 00:00:02.07
09:13:40 SQL> 
09:13:40 SQL> -- rpt
09:13:40 SQL> 
09:13:40 SQL> SELECT
09:13:40   2  pair
09:13:40   3  ,COUNT(pair)
09:13:40   4  ,MIN(clse),MAX(clse)
09:13:40   5  ,MIN(ydate),MAX(ydate)
09:13:40   6  FROM svm6122
09:13:40   7  GROUP BY pair
09:13:40   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19809 1.24182424 1.38284305 2010-10-04 09:15:01 2011-01-07 09:05:00

Elapsed: 00:00:00.04
09:13:40 SQL> 
09:13:40 SQL> -- Prepare for derivation of NTILE based params:
09:13:40 SQL> 
09:13:40 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.26
09:13:40 SQL> CREATE TABLE svm6142 COMPRESS AS
09:13:40   2  SELECT
09:13:40   3  pair
09:13:40   4  ,ydate
09:13:40   5  ,prdate
09:13:40   6  ,clse
09:13:40   7  ,g6
09:13:40   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
09:13:40   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
09:13:40  10  ,CASE WHEN trend IS NULL THEN 1
09:13:40  11  	    WHEN trend =0      THEN 1
09:13:40  12  	    ELSE trend END trend
09:13:40  13  ,cm4
09:13:40  14  ,cm6
09:13:40  15  ,cm8
09:13:40  16  ,cm10
09:13:40  17  ,cm12
09:13:40  18  ,cm14
09:13:40  19  ,cm16
09:13:40  20  ,cm18
09:13:40  21  --
09:13:40  22  ,ca4
09:13:40  23  ,ca6
09:13:40  24  ,ca8
09:13:40  25  ,ca10
09:13:40  26  ,ca12
09:13:40  27  ,ca14
09:13:40  28  ,ca16
09:13:40  29  ,ca18
09:13:40  30  --
09:13:40  31  ,cx4
09:13:40  32  ,cx6
09:13:40  33  ,cx8
09:13:40  34  ,cx10
09:13:40  35  ,cx12
09:13:40  36  ,cx14
09:13:40  37  ,cx16
09:13:40  38  ,cx18
09:13:40  39  --
09:13:40  40  ,crr4
09:13:40  41  ,crr6
09:13:40  42  ,crr8
09:13:40  43  ,crr10
09:13:40  44  ,crr12
09:13:40  45  ,crr14
09:13:40  46  ,crr16
09:13:40  47  ,crr18
09:13:40  48  --
09:13:40  49  ,hh
09:13:40  50  ,d
09:13:40  51  ,w
09:13:40  52  ,mpm
09:13:40  53  ,mph
09:13:40  54  FROM svm6122
09:13:40  55  ORDER BY ydate
09:13:40  56  /

Table created.

Elapsed: 00:00:00.38
09:13:40 SQL> 
09:13:40 SQL> -- rpt
09:13:40 SQL> 
09:13:40 SQL> SELECT
09:13:40   2  pair
09:13:40   3  ,trend
09:13:40   4  ,gatt
09:13:40   5  ,COUNT(pair)
09:13:40   6  ,AVG(g6)
09:13:40   7  FROM svm6142
09:13:40   8  GROUP BY pair,trend,gatt
09:13:40   9  ORDER BY pair,trend,gatt
09:13:40  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6819 -.00227871
ech_usd 	-1 up	      3567 .003580667
ech_usd 	-1		60
ech_usd 	 1 nup	      6446 -.00231256
ech_usd 	 1 up	      2905 .004122708
ech_usd 	 1		12

6 rows selected.

Elapsed: 00:00:00.03
09:13:40 SQL> 
09:13:40 SQL> 
09:13:40 SQL> -- Derive NTILE based params:
09:13:40 SQL> 
09:13:40 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.24
09:13:41 SQL> CREATE TABLE svm6162 COMPRESS AS
09:13:41   2  SELECT
09:13:41   3  pair
09:13:41   4  ,ydate
09:13:41   5  ,prdate
09:13:41   6  ,clse
09:13:41   7  ,g6
09:13:41   8  ,gatt
09:13:41   9  ,gattn
09:13:41  10  ,trend
09:13:41  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
09:13:41  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
09:13:41  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
09:13:41  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
09:13:41  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
09:13:41  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
09:13:41  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
09:13:41  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
09:13:41  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
09:13:41  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
09:13:41  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
09:13:41  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
09:13:41  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
09:13:41  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
09:13:41  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
09:13:41  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
09:13:41  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
09:13:41  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
09:13:41  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
09:13:41  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
09:13:41  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
09:13:41  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
09:13:41  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
09:13:41  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
09:13:41  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
09:13:41  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
09:13:41  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
09:13:41  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
09:13:41  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
09:13:41  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
09:13:41  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
09:13:41  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
09:13:41  43  ,hh  att32
09:13:41  44  ,d   att33
09:13:41  45  ,w   att34
09:13:41  46  ,mpm att35
09:13:41  47  ,mph att36
09:13:41  48  ,trend att37
09:13:41  49  FROM svm6142
09:13:41  50  ORDER BY ydate
09:13:41  51  /

Table created.

Elapsed: 00:00:04.91
09:13:45 SQL> 
09:13:45 SQL> -- rpt
09:13:45 SQL> 
09:13:45 SQL> SELECT
09:13:45   2  pair
09:13:45   3  ,trend
09:13:45   4  ,gatt
09:13:45   5  ,COUNT(pair)
09:13:45   6  ,AVG(g6)
09:13:45   7  FROM svm6162
09:13:45   8  GROUP BY pair,trend,gatt
09:13:45   9  ORDER BY pair,trend,gatt
09:13:45  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6819 -.00227871
ech_usd 	-1 up	      3567 .003580667
ech_usd 	-1		60
ech_usd 	 1 nup	      6446 -.00231256
ech_usd 	 1 up	      2905 .004122708
ech_usd 	 1		12

6 rows selected.

Elapsed: 00:00:00.03
09:13:46 SQL> 
09:13:46 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.14
09:13:46 SQL> CREATE TABLE modsrc COMPRESS AS
09:13:46   2  SELECT
09:13:46   3  pair
09:13:46   4  ,ydate
09:13:46   5  ,prdate
09:13:46   6  ,trend
09:13:46   7  ,g6
09:13:46   8  ,gatt
09:13:46   9  ,gattn
09:13:46  10  FROM svm6162
09:13:46  11  /

Table created.

Elapsed: 00:00:00.11
09:13:46 SQL> 
09:13:46 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
09:13:46 SQL> 
09:13:46 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.16
09:13:46 SQL> CREATE TABLE ech_ms610 COMPRESS AS
09:13:46   2  SELECT
09:13:46   3  ydate
09:13:46   4  ,trend ech_trend
09:13:46   5  ,g6    ech_g6
09:13:46   6  ,gatt  ech_gatt
09:13:46   7  ,gattn ech_gattn
09:13:46   8  FROM modsrc
09:13:46   9  /

Table created.

Elapsed: 00:00:00.09
09:13:46 SQL> 
09:13:46 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
09:13:46 SQL> 
09:13:46 SQL> -- I need a copy of the attributes:
09:13:46 SQL> 
09:13:46 SQL> 
09:13:46 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.06
09:13:46 SQL> CREATE TABLE ech_att COMPRESS AS
09:13:46   2  SELECT
09:13:46   3  ydate
09:13:46   4  ,att00 ech_att00
09:13:46   5  ,att01 ech_att01
09:13:46   6  ,att02 ech_att02
09:13:46   7  ,att03 ech_att03
09:13:46   8  ,att04 ech_att04
09:13:46   9  ,att05 ech_att05
09:13:46  10  ,att06 ech_att06
09:13:46  11  ,att07 ech_att07
09:13:46  12  ,att08 ech_att08
09:13:46  13  ,att09 ech_att09
09:13:46  14  ,att10 ech_att10
09:13:46  15  ,att11 ech_att11
09:13:46  16  ,att12 ech_att12
09:13:46  17  ,att13 ech_att13
09:13:46  18  ,att14 ech_att14
09:13:46  19  ,att15 ech_att15
09:13:46  20  ,att16 ech_att16
09:13:46  21  ,att17 ech_att17
09:13:46  22  ,att18 ech_att18
09:13:46  23  ,att19 ech_att19
09:13:46  24  ,att20 ech_att20
09:13:46  25  ,att21 ech_att21
09:13:46  26  ,att22 ech_att22
09:13:46  27  ,att23 ech_att23
09:13:46  28  ,att24 ech_att24
09:13:46  29  ,att25 ech_att25
09:13:46  30  ,att26 ech_att26
09:13:46  31  ,att27 ech_att27
09:13:46  32  ,att28 ech_att28
09:13:46  33  ,att29 ech_att29
09:13:46  34  ,att30 ech_att30
09:13:46  35  ,att31 ech_att31
09:13:46  36  ,att32 ech_att32
09:13:46  37  ,att33 ech_att33
09:13:46  38  ,att34 ech_att34
09:13:46  39  ,att35 ech_att35
09:13:46  40  ,att36 ech_att36
09:13:46  41  ,att37 ech_att37
09:13:46  42  FROM svm6162
09:13:46  43  /

Table created.

Elapsed: 00:00:00.17
09:13:47 SQL> 
09:13:47 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
09:13:47 SQL> 
09:13:47 SQL> -- rpt
09:13:47 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.78
09:13:48 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.00
09:13:48 SQL> 
09:13:48 SQL> --
09:13:48 SQL> -- egb610.sql
09:13:48 SQL> --
09:13:48 SQL> 
09:13:48 SQL> -- Creates views and tables for backtesting a forex SVM strategy
09:13:48 SQL> 
09:13:48 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.50
09:13:48 SQL> 
09:13:48 SQL> -- I created di5min here:
09:13:48 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
09:13:48 SQL> 
09:13:48 SQL> CREATE OR REPLACE VIEW svm6102 AS
09:13:48   2  SELECT
09:13:48   3  pair
09:13:48   4  ,ydate
09:13:48   5  ,prdate
09:13:48   6  ,rownum rnum -- acts as t in my time-series
09:13:48   7  ,clse
09:13:48   8  -- Derive a bunch of attributes from clse, the latest price:
09:13:48   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
09:13:48  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
09:13:48  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
09:13:48  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
09:13:48  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
09:13:48  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
09:13:48  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
09:13:48  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
09:13:48  17  --
09:13:48  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
09:13:48  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
09:13:48  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
09:13:48  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
09:13:48  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
09:13:48  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
09:13:48  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
09:13:48  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
09:13:48  26  --
09:13:48  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
09:13:48  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
09:13:48  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
09:13:48  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
09:13:48  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
09:13:48  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
09:13:48  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
09:13:48  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
09:13:48  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
09:13:48  36  FROM di5min WHERE pair LIKE'%egb%'
09:13:48  37  AND ydate > sysdate - 95
09:13:48  38  ORDER BY ydate
09:13:48  39  /

View created.

Elapsed: 00:00:00.05
09:13:48 SQL> 
09:13:48 SQL> -- rpt
09:13:48 SQL> 
09:13:48 SQL> SELECT
09:13:48   2  pair
09:13:48   3  ,COUNT(pair)
09:13:48   4  ,MIN(clse),MAX(clse)
09:13:48   5  ,MIN(avg6),MAX(avg6)
09:13:48   6  ,MIN(ydate),MAX(ydate)
09:13:48   7  FROM svm6102
09:13:48   8  GROUP BY pair
09:13:48   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19808 .833520557 .893920122 .834199029 .892400287 2010-10-04 09:15:01 2011-01-07 09:05:00

Elapsed: 00:00:00.96
09:13:49 SQL> 
09:13:49 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
09:13:49 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.39
09:13:50 SQL> CREATE TABLE svm6122 COMPRESS AS
09:13:50   2  SELECT
09:13:50   3  pair
09:13:50   4  ,ydate
09:13:50   5  ,prdate
09:13:50   6  ,clse
09:13:50   7  -- g6 is important. I want to predict g6:
09:13:50   8  ,ld6 - clse g6
09:13:50   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
09:13:50  10  -- I want more attributes from the ones I derived above:
09:13:50  11  -- clse relation to moving-min
09:13:50  12  ,clse-min4  cm4
09:13:50  13  ,clse-min6  cm6
09:13:50  14  ,clse-min8  cm8
09:13:50  15  ,clse-min10 cm10
09:13:50  16  ,clse-min12 cm12
09:13:50  17  ,clse-min14 cm14
09:13:50  18  ,clse-min16 cm16
09:13:50  19  ,clse-min18 cm18
09:13:50  20  -- clse relation to moving-avg
09:13:50  21  ,clse-avg4  ca4
09:13:50  22  ,clse-avg6  ca6
09:13:50  23  ,clse-avg8  ca8
09:13:50  24  ,clse-avg10 ca10
09:13:50  25  ,clse-avg12 ca12
09:13:50  26  ,clse-avg14 ca14
09:13:50  27  ,clse-avg16 ca16
09:13:50  28  ,clse-avg18 ca18
09:13:50  29  -- clse relation to moving-max
09:13:50  30  ,clse-max4  cx4
09:13:50  31  ,clse-max6  cx6
09:13:50  32  ,clse-max8  cx8
09:13:50  33  ,clse-max10 cx10
09:13:50  34  ,clse-max12 cx12
09:13:50  35  ,clse-max14 cx14
09:13:50  36  ,clse-max16 cx16
09:13:50  37  ,clse-max18 cx18
09:13:50  38  -- Derive more attributes.
09:13:50  39  -- I want to use CORR() here to help SVM see the shape of the series.
09:13:50  40  -- But COVAR_POP is more stable:
09:13:50  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
09:13:50  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
09:13:50  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
09:13:50  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
09:13:50  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
09:13:50  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
09:13:50  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
09:13:50  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
09:13:50  49  -- Derive date related attributes:
09:13:50  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
09:13:50  51  ,0+TO_CHAR(ydate,'D')d
09:13:50  52  ,0+TO_CHAR(ydate,'W')w
09:13:50  53  -- mpm stands for minutes-past-midnight:
09:13:50  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
09:13:50  55  -- mph stands for minutes-past-hour:
09:13:50  56  ,0+TO_CHAR(ydate,'MI')mph
09:13:50  57  FROM svm6102
09:13:50  58  ORDER BY ydate
09:13:50  59  /

Table created.

Elapsed: 00:00:02.54
09:13:52 SQL> 
09:13:52 SQL> -- rpt
09:13:52 SQL> 
09:13:52 SQL> SELECT
09:13:52   2  pair
09:13:52   3  ,COUNT(pair)
09:13:52   4  ,MIN(clse),MAX(clse)
09:13:52   5  ,MIN(ydate),MAX(ydate)
09:13:52   6  FROM svm6122
09:13:52   7  GROUP BY pair
09:13:52   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19808 .833520557 .893920122 2010-10-04 09:15:01 2011-01-07 09:05:00

Elapsed: 00:00:00.04
09:13:52 SQL> 
09:13:52 SQL> -- Prepare for derivation of NTILE based params:
09:13:52 SQL> 
09:13:52 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.40
09:13:53 SQL> CREATE TABLE svm6142 COMPRESS AS
09:13:53   2  SELECT
09:13:53   3  pair
09:13:53   4  ,ydate
09:13:53   5  ,prdate
09:13:53   6  ,clse
09:13:53   7  ,g6
09:13:53   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
09:13:53   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
09:13:53  10  ,CASE WHEN trend IS NULL THEN 1
09:13:53  11  	    WHEN trend =0      THEN 1
09:13:53  12  	    ELSE trend END trend
09:13:53  13  ,cm4
09:13:53  14  ,cm6
09:13:53  15  ,cm8
09:13:53  16  ,cm10
09:13:53  17  ,cm12
09:13:53  18  ,cm14
09:13:53  19  ,cm16
09:13:53  20  ,cm18
09:13:53  21  --
09:13:53  22  ,ca4
09:13:53  23  ,ca6
09:13:53  24  ,ca8
09:13:53  25  ,ca10
09:13:53  26  ,ca12
09:13:53  27  ,ca14
09:13:53  28  ,ca16
09:13:53  29  ,ca18
09:13:53  30  --
09:13:53  31  ,cx4
09:13:53  32  ,cx6
09:13:53  33  ,cx8
09:13:53  34  ,cx10
09:13:53  35  ,cx12
09:13:53  36  ,cx14
09:13:53  37  ,cx16
09:13:53  38  ,cx18
09:13:53  39  --
09:13:53  40  ,crr4
09:13:53  41  ,crr6
09:13:53  42  ,crr8
09:13:53  43  ,crr10
09:13:53  44  ,crr12
09:13:53  45  ,crr14
09:13:53  46  ,crr16
09:13:53  47  ,crr18
09:13:53  48  --
09:13:53  49  ,hh
09:13:53  50  ,d
09:13:53  51  ,w
09:13:53  52  ,mpm
09:13:53  53  ,mph
09:13:53  54  FROM svm6122
09:13:53  55  ORDER BY ydate
09:13:53  56  /

Table created.

Elapsed: 00:00:00.44
09:13:53 SQL> 
09:13:53 SQL> -- rpt
09:13:53 SQL> 
09:13:53 SQL> SELECT
09:13:53   2  pair
09:13:53   3  ,trend
09:13:53   4  ,gatt
09:13:53   5  ,COUNT(pair)
09:13:53   6  ,AVG(g6)
09:13:53   7  FROM svm6142
09:13:53   8  GROUP BY pair,trend,gatt
09:13:53   9  ORDER BY pair,trend,gatt
09:13:53  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7963 -.00103483
egb_usd 	-1 up	      2634 .002928824
egb_usd 	-1		17
egb_usd 	 1 nup	      6520 -.00136122
egb_usd 	 1 up	      2619 .002926948
egb_usd 	 1		55

6 rows selected.

Elapsed: 00:00:00.04
09:13:53 SQL> 
09:13:53 SQL> 
09:13:53 SQL> -- Derive NTILE based params:
09:13:53 SQL> 
09:13:53 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.30
09:13:54 SQL> CREATE TABLE svm6162 COMPRESS AS
09:13:54   2  SELECT
09:13:54   3  pair
09:13:54   4  ,ydate
09:13:54   5  ,prdate
09:13:54   6  ,clse
09:13:54   7  ,g6
09:13:54   8  ,gatt
09:13:54   9  ,gattn
09:13:54  10  ,trend
09:13:54  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
09:13:54  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
09:13:54  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
09:13:54  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
09:13:54  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
09:13:54  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
09:13:54  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
09:13:54  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
09:13:54  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
09:13:54  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
09:13:54  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
09:13:54  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
09:13:54  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
09:13:54  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
09:13:54  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
09:13:54  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
09:13:54  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
09:13:54  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
09:13:54  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
09:13:54  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
09:13:54  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
09:13:54  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
09:13:54  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
09:13:54  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
09:13:54  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
09:13:54  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
09:13:54  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
09:13:54  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
09:13:54  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
09:13:54  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
09:13:54  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
09:13:54  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
09:13:54  43  ,hh  att32
09:13:54  44  ,d   att33
09:13:54  45  ,w   att34
09:13:54  46  ,mpm att35
09:13:54  47  ,mph att36
09:13:54  48  ,trend att37
09:13:54  49  FROM svm6142
09:13:54  50  ORDER BY ydate
09:13:54  51  /

Table created.

Elapsed: 00:00:05.54
09:13:59 SQL> 
09:13:59 SQL> -- rpt
09:13:59 SQL> 
09:13:59 SQL> SELECT
09:13:59   2  pair
09:13:59   3  ,trend
09:13:59   4  ,gatt
09:13:59   5  ,COUNT(pair)
09:13:59   6  ,AVG(g6)
09:13:59   7  FROM svm6162
09:13:59   8  GROUP BY pair,trend,gatt
09:13:59   9  ORDER BY pair,trend,gatt
09:13:59  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7963 -.00103483
egb_usd 	-1 up	      2634 .002928824
egb_usd 	-1		17
egb_usd 	 1 nup	      6520 -.00136122
egb_usd 	 1 up	      2619 .002926948
egb_usd 	 1		55

6 rows selected.

Elapsed: 00:00:00.03
09:13:59 SQL> 
09:13:59 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
09:13:59 SQL> CREATE TABLE modsrc COMPRESS AS
09:13:59   2  SELECT
09:13:59   3  pair
09:13:59   4  ,ydate
09:13:59   5  ,prdate
09:13:59   6  ,trend
09:13:59   7  ,g6
09:13:59   8  ,gatt
09:13:59   9  ,gattn
09:13:59  10  FROM svm6162
09:13:59  11  /

Table created.

Elapsed: 00:00:00.10
09:13:59 SQL> 
09:13:59 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
09:14:00 SQL> 
09:14:00 SQL> DROP   TABLE egb_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
09:14:00 SQL> CREATE TABLE egb_ms610 COMPRESS AS
09:14:00   2  SELECT
09:14:00   3  ydate
09:14:00   4  ,trend egb_trend
09:14:00   5  ,g6    egb_g6
09:14:00   6  ,gatt  egb_gatt
09:14:00   7  ,gattn egb_gattn
09:14:00   8  FROM modsrc
09:14:00   9  /

Table created.

Elapsed: 00:00:00.07
09:14:00 SQL> 
09:14:00 SQL> ANALYZE TABLE egb_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
09:14:00 SQL> 
09:14:00 SQL> -- I need a copy of the attributes:
09:14:00 SQL> 
09:14:00 SQL> 
09:14:00 SQL> DROP   TABLE egb_att;

Table dropped.

Elapsed: 00:00:00.17
09:14:00 SQL> CREATE TABLE egb_att COMPRESS AS
09:14:00   2  SELECT
09:14:00   3  ydate
09:14:00   4  ,att00 egb_att00
09:14:00   5  ,att01 egb_att01
09:14:00   6  ,att02 egb_att02
09:14:00   7  ,att03 egb_att03
09:14:00   8  ,att04 egb_att04
09:14:00   9  ,att05 egb_att05
09:14:00  10  ,att06 egb_att06
09:14:00  11  ,att07 egb_att07
09:14:00  12  ,att08 egb_att08
09:14:00  13  ,att09 egb_att09
09:14:00  14  ,att10 egb_att10
09:14:00  15  ,att11 egb_att11
09:14:00  16  ,att12 egb_att12
09:14:00  17  ,att13 egb_att13
09:14:00  18  ,att14 egb_att14
09:14:00  19  ,att15 egb_att15
09:14:00  20  ,att16 egb_att16
09:14:00  21  ,att17 egb_att17
09:14:00  22  ,att18 egb_att18
09:14:00  23  ,att19 egb_att19
09:14:00  24  ,att20 egb_att20
09:14:00  25  ,att21 egb_att21
09:14:00  26  ,att22 egb_att22
09:14:00  27  ,att23 egb_att23
09:14:00  28  ,att24 egb_att24
09:14:00  29  ,att25 egb_att25
09:14:00  30  ,att26 egb_att26
09:14:00  31  ,att27 egb_att27
09:14:00  32  ,att28 egb_att28
09:14:00  33  ,att29 egb_att29
09:14:00  34  ,att30 egb_att30
09:14:00  35  ,att31 egb_att31
09:14:00  36  ,att32 egb_att32
09:14:00  37  ,att33 egb_att33
09:14:00  38  ,att34 egb_att34
09:14:00  39  ,att35 egb_att35
09:14:00  40  ,att36 egb_att36
09:14:00  41  ,att37 egb_att37
09:14:00  42  FROM svm6162
09:14:00  43  /

Table created.

Elapsed: 00:00:00.19
09:14:00 SQL> 
09:14:00 SQL> ANALYZE TABLE egb_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
09:14:01 SQL> 
09:14:01 SQL> -- rpt
09:14:01 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.95
09:14:02 SQL> SELECT COUNT(*)FROM egb_att;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.00
09:14:02 SQL> 
09:14:02 SQL> --
09:14:02 SQL> -- ejp610.sql
09:14:02 SQL> --
09:14:02 SQL> 
09:14:02 SQL> -- Creates views and tables for backtesting a forex SVM strategy
09:14:02 SQL> 
09:14:02 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.36
09:14:02 SQL> 
09:14:02 SQL> -- I created di5min here:
09:14:02 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
09:14:02 SQL> 
09:14:02 SQL> CREATE OR REPLACE VIEW svm6102 AS
09:14:02   2  SELECT
09:14:02   3  pair
09:14:02   4  ,ydate
09:14:02   5  ,prdate
09:14:02   6  ,rownum rnum -- acts as t in my time-series
09:14:02   7  ,clse
09:14:02   8  -- Derive a bunch of attributes from clse, the latest price:
09:14:02   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
09:14:02  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
09:14:02  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
09:14:02  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
09:14:02  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
09:14:02  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
09:14:02  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
09:14:02  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
09:14:02  17  --
09:14:02  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
09:14:02  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
09:14:02  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
09:14:02  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
09:14:02  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
09:14:02  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
09:14:02  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
09:14:02  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
09:14:02  26  --
09:14:02  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
09:14:02  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
09:14:02  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
09:14:02  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
09:14:02  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
09:14:02  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
09:14:02  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
09:14:02  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
09:14:02  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
09:14:02  36  FROM di5min WHERE pair LIKE'%ejp%'
09:14:02  37  AND ydate > sysdate - 95
09:14:02  38  ORDER BY ydate
09:14:02  39  /

View created.

Elapsed: 00:00:00.05
09:14:02 SQL> 
09:14:02 SQL> -- rpt
09:14:02 SQL> 
09:14:02 SQL> SELECT
09:14:02   2  pair
09:14:02   3  ,COUNT(pair)
09:14:02   4  ,MIN(clse),MAX(clse)
09:14:02   5  ,MIN(avg6),MAX(avg6)
09:14:02   6  ,MIN(ydate),MAX(ydate)
09:14:02   7  FROM svm6102
09:14:02   8  GROUP BY pair
09:14:02   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ejp_usd       19806 107.643765	115.63485 107.776148 115.509678 2010-10-04 09:15:01 2011-01-07 09:05:00

Elapsed: 00:00:00.85
09:14:03 SQL> 
09:14:03 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
09:14:03 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
09:14:03 SQL> CREATE TABLE svm6122 COMPRESS AS
09:14:03   2  SELECT
09:14:03   3  pair
09:14:03   4  ,ydate
09:14:03   5  ,prdate
09:14:03   6  ,clse
09:14:03   7  -- g6 is important. I want to predict g6:
09:14:03   8  ,ld6 - clse g6
09:14:03   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
09:14:03  10  -- I want more attributes from the ones I derived above:
09:14:03  11  -- clse relation to moving-min
09:14:03  12  ,clse-min4  cm4
09:14:03  13  ,clse-min6  cm6
09:14:03  14  ,clse-min8  cm8
09:14:03  15  ,clse-min10 cm10
09:14:03  16  ,clse-min12 cm12
09:14:03  17  ,clse-min14 cm14
09:14:03  18  ,clse-min16 cm16
09:14:03  19  ,clse-min18 cm18
09:14:03  20  -- clse relation to moving-avg
09:14:03  21  ,clse-avg4  ca4
09:14:03  22  ,clse-avg6  ca6
09:14:03  23  ,clse-avg8  ca8
09:14:03  24  ,clse-avg10 ca10
09:14:03  25  ,clse-avg12 ca12
09:14:03  26  ,clse-avg14 ca14
09:14:03  27  ,clse-avg16 ca16
09:14:03  28  ,clse-avg18 ca18
09:14:03  29  -- clse relation to moving-max
09:14:03  30  ,clse-max4  cx4
09:14:03  31  ,clse-max6  cx6
09:14:03  32  ,clse-max8  cx8
09:14:03  33  ,clse-max10 cx10
09:14:03  34  ,clse-max12 cx12
09:14:03  35  ,clse-max14 cx14
09:14:03  36  ,clse-max16 cx16
09:14:03  37  ,clse-max18 cx18
09:14:03  38  -- Derive more attributes.
09:14:03  39  -- I want to use CORR() here to help SVM see the shape of the series.
09:14:03  40  -- But COVAR_POP is more stable:
09:14:03  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
09:14:03  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
09:14:03  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
09:14:03  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
09:14:03  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
09:14:03  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
09:14:03  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
09:14:03  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
09:14:03  49  -- Derive date related attributes:
09:14:03  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
09:14:03  51  ,0+TO_CHAR(ydate,'D')d
09:14:03  52  ,0+TO_CHAR(ydate,'W')w
09:14:03  53  -- mpm stands for minutes-past-midnight:
09:14:03  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
09:14:03  55  -- mph stands for minutes-past-hour:
09:14:03  56  ,0+TO_CHAR(ydate,'MI')mph
09:14:03  57  FROM svm6102
09:14:03  58  ORDER BY ydate
09:14:03  59  /

Table created.

Elapsed: 00:00:02.11
09:14:05 SQL> 
09:14:05 SQL> -- rpt
09:14:05 SQL> 
09:14:05 SQL> SELECT
09:14:05   2  pair
09:14:05   3  ,COUNT(pair)
09:14:05   4  ,MIN(clse),MAX(clse)
09:14:05   5  ,MIN(ydate),MAX(ydate)
09:14:05   6  FROM svm6122
09:14:05   7  GROUP BY pair
09:14:05   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ejp_usd       19806 107.643765	115.63485 2010-10-04 09:15:01 2011-01-07 09:05:00

Elapsed: 00:00:00.03
09:14:05 SQL> 
09:14:05 SQL> -- Prepare for derivation of NTILE based params:
09:14:05 SQL> 
09:14:05 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.89
09:14:06 SQL> CREATE TABLE svm6142 COMPRESS AS
09:14:06   2  SELECT
09:14:06   3  pair
09:14:06   4  ,ydate
09:14:06   5  ,prdate
09:14:06   6  ,clse
09:14:06   7  ,g6
09:14:06   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
09:14:06   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
09:14:06  10  ,CASE WHEN trend IS NULL THEN 1
09:14:06  11  	    WHEN trend =0      THEN 1
09:14:06  12  	    ELSE trend END trend
09:14:06  13  ,cm4
09:14:06  14  ,cm6
09:14:06  15  ,cm8
09:14:06  16  ,cm10
09:14:06  17  ,cm12
09:14:06  18  ,cm14
09:14:06  19  ,cm16
09:14:06  20  ,cm18
09:14:06  21  --
09:14:06  22  ,ca4
09:14:06  23  ,ca6
09:14:06  24  ,ca8
09:14:06  25  ,ca10
09:14:06  26  ,ca12
09:14:06  27  ,ca14
09:14:06  28  ,ca16
09:14:06  29  ,ca18
09:14:06  30  --
09:14:06  31  ,cx4
09:14:06  32  ,cx6
09:14:06  33  ,cx8
09:14:06  34  ,cx10
09:14:06  35  ,cx12
09:14:06  36  ,cx14
09:14:06  37  ,cx16
09:14:06  38  ,cx18
09:14:06  39  --
09:14:06  40  ,crr4
09:14:06  41  ,crr6
09:14:06  42  ,crr8
09:14:06  43  ,crr10
09:14:06  44  ,crr12
09:14:06  45  ,crr14
09:14:06  46  ,crr16
09:14:06  47  ,crr18
09:14:06  48  --
09:14:06  49  ,hh
09:14:06  50  ,d
09:14:06  51  ,w
09:14:06  52  ,mpm
09:14:06  53  ,mph
09:14:06  54  FROM svm6122
09:14:06  55  ORDER BY ydate
09:14:06  56  /

Table created.

Elapsed: 00:00:00.38
09:14:07 SQL> 
09:14:07 SQL> -- rpt
09:14:07 SQL> 
09:14:07 SQL> SELECT
09:14:07   2  pair
09:14:07   3  ,trend
09:14:07   4  ,gatt
09:14:07   5  ,COUNT(pair)
09:14:07   6  ,AVG(g6)
09:14:07   7  FROM svm6142
09:14:07   8  GROUP BY pair,trend,gatt
09:14:07   9  ORDER BY pair,trend,gatt
09:14:07  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      5186 -.32196258
ejp_usd 	-1 up	      4926 .277838259
ejp_usd 	-1		14
ejp_usd 	 1 nup	      4969 -.29072814
ejp_usd 	 1 up	      4653 .287312846
ejp_usd 	 1		58

6 rows selected.

Elapsed: 00:00:00.04
09:14:07 SQL> 
09:14:07 SQL> 
09:14:07 SQL> -- Derive NTILE based params:
09:14:07 SQL> 
09:14:07 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
09:14:07 SQL> CREATE TABLE svm6162 COMPRESS AS
09:14:07   2  SELECT
09:14:07   3  pair
09:14:07   4  ,ydate
09:14:07   5  ,prdate
09:14:07   6  ,clse
09:14:07   7  ,g6
09:14:07   8  ,gatt
09:14:07   9  ,gattn
09:14:07  10  ,trend
09:14:07  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
09:14:07  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
09:14:07  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
09:14:07  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
09:14:07  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
09:14:07  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
09:14:07  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
09:14:07  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
09:14:07  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
09:14:07  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
09:14:07  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
09:14:07  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
09:14:07  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
09:14:07  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
09:14:07  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
09:14:07  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
09:14:07  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
09:14:07  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
09:14:07  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
09:14:07  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
09:14:07  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
09:14:07  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
09:14:07  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
09:14:07  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
09:14:07  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
09:14:07  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
09:14:07  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
09:14:07  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
09:14:07  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
09:14:07  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
09:14:07  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
09:14:07  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
09:14:07  43  ,hh  att32
09:14:07  44  ,d   att33
09:14:07  45  ,w   att34
09:14:07  46  ,mpm att35
09:14:07  47  ,mph att36
09:14:07  48  ,trend att37
09:14:07  49  FROM svm6142
09:14:07  50  ORDER BY ydate
09:14:07  51  /

Table created.

Elapsed: 00:00:04.97
09:14:12 SQL> 
09:14:12 SQL> -- rpt
09:14:12 SQL> 
09:14:12 SQL> SELECT
09:14:12   2  pair
09:14:12   3  ,trend
09:14:12   4  ,gatt
09:14:12   5  ,COUNT(pair)
09:14:12   6  ,AVG(g6)
09:14:12   7  FROM svm6162
09:14:12   8  GROUP BY pair,trend,gatt
09:14:12   9  ORDER BY pair,trend,gatt
09:14:12  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      5186 -.32196258
ejp_usd 	-1 up	      4926 .277838259
ejp_usd 	-1		14
ejp_usd 	 1 nup	      4969 -.29072814
ejp_usd 	 1 up	      4653 .287312846
ejp_usd 	 1		58

6 rows selected.

Elapsed: 00:00:00.03
09:14:12 SQL> 
09:14:12 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
09:14:12 SQL> CREATE TABLE modsrc COMPRESS AS
09:14:12   2  SELECT
09:14:12   3  pair
09:14:12   4  ,ydate
09:14:12   5  ,prdate
09:14:12   6  ,trend
09:14:12   7  ,g6
09:14:12   8  ,gatt
09:14:12   9  ,gattn
09:14:12  10  FROM svm6162
09:14:12  11  /

Table created.

Elapsed: 00:00:00.09
09:14:12 SQL> 
09:14:12 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.30
09:14:12 SQL> 
09:14:12 SQL> DROP   TABLE ejp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
09:14:12 SQL> CREATE TABLE ejp_ms610 COMPRESS AS
09:14:12   2  SELECT
09:14:12   3  ydate
09:14:12   4  ,trend ejp_trend
09:14:12   5  ,g6    ejp_g6
09:14:12   6  ,gatt  ejp_gatt
09:14:12   7  ,gattn ejp_gattn
09:14:12   8  FROM modsrc
09:14:12   9  /

Table created.

Elapsed: 00:00:00.07
09:14:12 SQL> 
09:14:12 SQL> ANALYZE TABLE ejp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
09:14:13 SQL> 
09:14:13 SQL> -- I need a copy of the attributes:
09:14:13 SQL> 
09:14:13 SQL> 
09:14:13 SQL> DROP   TABLE ejp_att;

Table dropped.

Elapsed: 00:00:00.04
09:14:13 SQL> CREATE TABLE ejp_att COMPRESS AS
09:14:13   2  SELECT
09:14:13   3  ydate
09:14:13   4  ,att00 ejp_att00
09:14:13   5  ,att01 ejp_att01
09:14:13   6  ,att02 ejp_att02
09:14:13   7  ,att03 ejp_att03
09:14:13   8  ,att04 ejp_att04
09:14:13   9  ,att05 ejp_att05
09:14:13  10  ,att06 ejp_att06
09:14:13  11  ,att07 ejp_att07
09:14:13  12  ,att08 ejp_att08
09:14:13  13  ,att09 ejp_att09
09:14:13  14  ,att10 ejp_att10
09:14:13  15  ,att11 ejp_att11
09:14:13  16  ,att12 ejp_att12
09:14:13  17  ,att13 ejp_att13
09:14:13  18  ,att14 ejp_att14
09:14:13  19  ,att15 ejp_att15
09:14:13  20  ,att16 ejp_att16
09:14:13  21  ,att17 ejp_att17
09:14:13  22  ,att18 ejp_att18
09:14:13  23  ,att19 ejp_att19
09:14:13  24  ,att20 ejp_att20
09:14:13  25  ,att21 ejp_att21
09:14:13  26  ,att22 ejp_att22
09:14:13  27  ,att23 ejp_att23
09:14:13  28  ,att24 ejp_att24
09:14:13  29  ,att25 ejp_att25
09:14:13  30  ,att26 ejp_att26
09:14:13  31  ,att27 ejp_att27
09:14:13  32  ,att28 ejp_att28
09:14:13  33  ,att29 ejp_att29
09:14:13  34  ,att30 ejp_att30
09:14:13  35  ,att31 ejp_att31
09:14:13  36  ,att32 ejp_att32
09:14:13  37  ,att33 ejp_att33
09:14:13  38  ,att34 ejp_att34
09:14:13  39  ,att35 ejp_att35
09:14:13  40  ,att36 ejp_att36
09:14:13  41  ,att37 ejp_att37
09:14:13  42  FROM svm6162
09:14:13  43  /

Table created.

Elapsed: 00:00:00.20
09:14:13 SQL> 
09:14:13 SQL> ANALYZE TABLE ejp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
09:14:13 SQL> 
09:14:13 SQL> -- rpt
09:14:13 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19806

Elapsed: 00:00:00.87
09:14:14 SQL> SELECT COUNT(*)FROM ejp_att;

  COUNT(*)
----------
     19806

Elapsed: 00:00:00.00
09:14:14 SQL> 
09:14:14 SQL> --
09:14:14 SQL> -- ajp610.sql
09:14:14 SQL> --
09:14:14 SQL> 
09:14:14 SQL> -- Creates views and tables for backtesting a forex SVM strategy
09:14:14 SQL> 
09:14:14 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.37
09:14:15 SQL> 
09:14:15 SQL> -- I created di5min here:
09:14:15 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
09:14:15 SQL> 
09:14:15 SQL> CREATE OR REPLACE VIEW svm6102 AS
09:14:15   2  SELECT
09:14:15   3  pair
09:14:15   4  ,ydate
09:14:15   5  ,prdate
09:14:15   6  ,rownum rnum -- acts as t in my time-series
09:14:15   7  ,clse
09:14:15   8  -- Derive a bunch of attributes from clse, the latest price:
09:14:15   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
09:14:15  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
09:14:15  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
09:14:15  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
09:14:15  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
09:14:15  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
09:14:15  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
09:14:15  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
09:14:15  17  --
09:14:15  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
09:14:15  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
09:14:15  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
09:14:15  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
09:14:15  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
09:14:15  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
09:14:15  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
09:14:15  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
09:14:15  26  --
09:14:15  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
09:14:15  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
09:14:15  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
09:14:15  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
09:14:15  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
09:14:15  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
09:14:15  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
09:14:15  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
09:14:15  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
09:14:15  36  FROM di5min WHERE pair LIKE'%ajp%'
09:14:15  37  AND ydate > sysdate - 95
09:14:15  38  ORDER BY ydate
09:14:15  39  /

View created.

Elapsed: 00:00:00.04
09:14:15 SQL> 
09:14:15 SQL> -- rpt
09:14:15 SQL> 
09:14:15 SQL> SELECT
09:14:15   2  pair
09:14:15   3  ,COUNT(pair)
09:14:15   4  ,MIN(clse),MAX(clse)
09:14:15   5  ,MIN(avg6),MAX(avg6)
09:14:15   6  ,MIN(ydate),MAX(ydate)
09:14:15   7  FROM svm6102
09:14:15   8  GROUP BY pair
09:14:15   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ajp_usd       19803  78.249976 83.6669853 78.5106193  83.546306 2010-10-04 09:15:01 2011-01-07 09:05:00

Elapsed: 00:00:00.78
09:14:15 SQL> 
09:14:15 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
09:14:15 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.30
09:14:16 SQL> CREATE TABLE svm6122 COMPRESS AS
09:14:16   2  SELECT
09:14:16   3  pair
09:14:16   4  ,ydate
09:14:16   5  ,prdate
09:14:16   6  ,clse
09:14:16   7  -- g6 is important. I want to predict g6:
09:14:16   8  ,ld6 - clse g6
09:14:16   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
09:14:16  10  -- I want more attributes from the ones I derived above:
09:14:16  11  -- clse relation to moving-min
09:14:16  12  ,clse-min4  cm4
09:14:16  13  ,clse-min6  cm6
09:14:16  14  ,clse-min8  cm8
09:14:16  15  ,clse-min10 cm10
09:14:16  16  ,clse-min12 cm12
09:14:16  17  ,clse-min14 cm14
09:14:16  18  ,clse-min16 cm16
09:14:16  19  ,clse-min18 cm18
09:14:16  20  -- clse relation to moving-avg
09:14:16  21  ,clse-avg4  ca4
09:14:16  22  ,clse-avg6  ca6
09:14:16  23  ,clse-avg8  ca8
09:14:16  24  ,clse-avg10 ca10
09:14:16  25  ,clse-avg12 ca12
09:14:16  26  ,clse-avg14 ca14
09:14:16  27  ,clse-avg16 ca16
09:14:16  28  ,clse-avg18 ca18
09:14:16  29  -- clse relation to moving-max
09:14:16  30  ,clse-max4  cx4
09:14:16  31  ,clse-max6  cx6
09:14:16  32  ,clse-max8  cx8
09:14:16  33  ,clse-max10 cx10
09:14:16  34  ,clse-max12 cx12
09:14:16  35  ,clse-max14 cx14
09:14:16  36  ,clse-max16 cx16
09:14:16  37  ,clse-max18 cx18
09:14:16  38  -- Derive more attributes.
09:14:16  39  -- I want to use CORR() here to help SVM see the shape of the series.
09:14:16  40  -- But COVAR_POP is more stable:
09:14:16  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
09:14:16  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
09:14:16  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
09:14:16  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
09:14:16  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
09:14:16  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
09:14:16  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
09:14:16  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
09:14:16  49  -- Derive date related attributes:
09:14:16  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
09:14:16  51  ,0+TO_CHAR(ydate,'D')d
09:14:16  52  ,0+TO_CHAR(ydate,'W')w
09:14:16  53  -- mpm stands for minutes-past-midnight:
09:14:16  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
09:14:16  55  -- mph stands for minutes-past-hour:
09:14:16  56  ,0+TO_CHAR(ydate,'MI')mph
09:14:16  57  FROM svm6102
09:14:16  58  ORDER BY ydate
09:14:16  59  /

Table created.

Elapsed: 00:00:02.10
09:14:18 SQL> 
09:14:18 SQL> -- rpt
09:14:18 SQL> 
09:14:18 SQL> SELECT
09:14:18   2  pair
09:14:18   3  ,COUNT(pair)
09:14:18   4  ,MIN(clse),MAX(clse)
09:14:18   5  ,MIN(ydate),MAX(ydate)
09:14:18   6  FROM svm6122
09:14:18   7  GROUP BY pair
09:14:18   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ajp_usd       19803  78.249976 83.6669853 2010-10-04 09:15:01 2011-01-07 09:05:00

Elapsed: 00:00:00.04
09:14:18 SQL> 
09:14:18 SQL> -- Prepare for derivation of NTILE based params:
09:14:18 SQL> 
09:14:18 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.28
09:14:18 SQL> CREATE TABLE svm6142 COMPRESS AS
09:14:18   2  SELECT
09:14:18   3  pair
09:14:18   4  ,ydate
09:14:18   5  ,prdate
09:14:18   6  ,clse
09:14:18   7  ,g6
09:14:18   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
09:14:18   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
09:14:18  10  ,CASE WHEN trend IS NULL THEN 1
09:14:18  11  	    WHEN trend =0      THEN 1
09:14:18  12  	    ELSE trend END trend
09:14:18  13  ,cm4
09:14:18  14  ,cm6
09:14:18  15  ,cm8
09:14:18  16  ,cm10
09:14:18  17  ,cm12
09:14:18  18  ,cm14
09:14:18  19  ,cm16
09:14:18  20  ,cm18
09:14:18  21  --
09:14:18  22  ,ca4
09:14:18  23  ,ca6
09:14:18  24  ,ca8
09:14:18  25  ,ca10
09:14:18  26  ,ca12
09:14:18  27  ,ca14
09:14:18  28  ,ca16
09:14:18  29  ,ca18
09:14:18  30  --
09:14:18  31  ,cx4
09:14:18  32  ,cx6
09:14:18  33  ,cx8
09:14:18  34  ,cx10
09:14:18  35  ,cx12
09:14:18  36  ,cx14
09:14:18  37  ,cx16
09:14:18  38  ,cx18
09:14:18  39  --
09:14:18  40  ,crr4
09:14:18  41  ,crr6
09:14:18  42  ,crr8
09:14:18  43  ,crr10
09:14:18  44  ,crr12
09:14:18  45  ,crr14
09:14:18  46  ,crr16
09:14:18  47  ,crr18
09:14:18  48  --
09:14:18  49  ,hh
09:14:18  50  ,d
09:14:18  51  ,w
09:14:18  52  ,mpm
09:14:18  53  ,mph
09:14:18  54  FROM svm6122
09:14:18  55  ORDER BY ydate
09:14:18  56  /

Table created.

Elapsed: 00:00:00.40
09:14:19 SQL> 
09:14:19 SQL> -- rpt
09:14:19 SQL> 
09:14:19 SQL> SELECT
09:14:19   2  pair
09:14:19   3  ,trend
09:14:19   4  ,gatt
09:14:19   5  ,COUNT(pair)
09:14:19   6  ,AVG(g6)
09:14:19   7  FROM svm6142
09:14:19   8  GROUP BY pair,trend,gatt
09:14:19   9  ORDER BY pair,trend,gatt
09:14:19  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4349 -.22375237
ajp_usd 	-1 up	      5238 .222796055
ajp_usd 	-1		16
ajp_usd 	 1 nup	      5311 -.19943121
ajp_usd 	 1 up	      4833 .212185921
ajp_usd 	 1		56

6 rows selected.

Elapsed: 00:00:00.03
09:14:19 SQL> 
09:14:19 SQL> 
09:14:19 SQL> -- Derive NTILE based params:
09:14:19 SQL> 
09:14:19 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
09:14:19 SQL> CREATE TABLE svm6162 COMPRESS AS
09:14:19   2  SELECT
09:14:19   3  pair
09:14:19   4  ,ydate
09:14:19   5  ,prdate
09:14:19   6  ,clse
09:14:19   7  ,g6
09:14:19   8  ,gatt
09:14:19   9  ,gattn
09:14:19  10  ,trend
09:14:19  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
09:14:19  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
09:14:19  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
09:14:19  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
09:14:19  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
09:14:19  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
09:14:19  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
09:14:19  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
09:14:19  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
09:14:19  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
09:14:19  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
09:14:19  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
09:14:19  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
09:14:19  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
09:14:19  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
09:14:19  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
09:14:19  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
09:14:19  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
09:14:19  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
09:14:19  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
09:14:19  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
09:14:19  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
09:14:19  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
09:14:19  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
09:14:19  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
09:14:19  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
09:14:19  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
09:14:19  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
09:14:19  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
09:14:19  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
09:14:19  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
09:14:19  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
09:14:19  43  ,hh  att32
09:14:19  44  ,d   att33
09:14:19  45  ,w   att34
09:14:19  46  ,mpm att35
09:14:19  47  ,mph att36
09:14:19  48  ,trend att37
09:14:19  49  FROM svm6142
09:14:19  50  ORDER BY ydate
09:14:19  51  /

Table created.

Elapsed: 00:00:05.02
09:14:24 SQL> 
09:14:24 SQL> -- rpt
09:14:24 SQL> 
09:14:24 SQL> SELECT
09:14:24   2  pair
09:14:24   3  ,trend
09:14:24   4  ,gatt
09:14:24   5  ,COUNT(pair)
09:14:24   6  ,AVG(g6)
09:14:24   7  FROM svm6162
09:14:24   8  GROUP BY pair,trend,gatt
09:14:24   9  ORDER BY pair,trend,gatt
09:14:24  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4349 -.22375237
ajp_usd 	-1 up	      5238 .222796055
ajp_usd 	-1		16
ajp_usd 	 1 nup	      5311 -.19943121
ajp_usd 	 1 up	      4833 .212185921
ajp_usd 	 1		56

6 rows selected.

Elapsed: 00:00:00.03
09:14:24 SQL> 
09:14:24 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
09:14:24 SQL> CREATE TABLE modsrc COMPRESS AS
09:14:24   2  SELECT
09:14:24   3  pair
09:14:24   4  ,ydate
09:14:24   5  ,prdate
09:14:24   6  ,trend
09:14:24   7  ,g6
09:14:24   8  ,gatt
09:14:24   9  ,gattn
09:14:24  10  FROM svm6162
09:14:24  11  /

Table created.

Elapsed: 00:00:00.12
09:14:24 SQL> 
09:14:24 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.24
09:14:24 SQL> 
09:14:24 SQL> DROP   TABLE ajp_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
09:14:24 SQL> CREATE TABLE ajp_ms610 COMPRESS AS
09:14:24   2  SELECT
09:14:24   3  ydate
09:14:24   4  ,trend ajp_trend
09:14:24   5  ,g6    ajp_g6
09:14:24   6  ,gatt  ajp_gatt
09:14:24   7  ,gattn ajp_gattn
09:14:24   8  FROM modsrc
09:14:24   9  /

Table created.

Elapsed: 00:00:00.09
09:14:24 SQL> 
09:14:24 SQL> ANALYZE TABLE ajp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
09:14:25 SQL> 
09:14:25 SQL> -- I need a copy of the attributes:
09:14:25 SQL> 
09:14:25 SQL> 
09:14:25 SQL> DROP   TABLE ajp_att;

Table dropped.

Elapsed: 00:00:00.04
09:14:25 SQL> CREATE TABLE ajp_att COMPRESS AS
09:14:25   2  SELECT
09:14:25   3  ydate
09:14:25   4  ,att00 ajp_att00
09:14:25   5  ,att01 ajp_att01
09:14:25   6  ,att02 ajp_att02
09:14:25   7  ,att03 ajp_att03
09:14:25   8  ,att04 ajp_att04
09:14:25   9  ,att05 ajp_att05
09:14:25  10  ,att06 ajp_att06
09:14:25  11  ,att07 ajp_att07
09:14:25  12  ,att08 ajp_att08
09:14:25  13  ,att09 ajp_att09
09:14:25  14  ,att10 ajp_att10
09:14:25  15  ,att11 ajp_att11
09:14:25  16  ,att12 ajp_att12
09:14:25  17  ,att13 ajp_att13
09:14:25  18  ,att14 ajp_att14
09:14:25  19  ,att15 ajp_att15
09:14:25  20  ,att16 ajp_att16
09:14:25  21  ,att17 ajp_att17
09:14:25  22  ,att18 ajp_att18
09:14:25  23  ,att19 ajp_att19
09:14:25  24  ,att20 ajp_att20
09:14:25  25  ,att21 ajp_att21
09:14:25  26  ,att22 ajp_att22
09:14:25  27  ,att23 ajp_att23
09:14:25  28  ,att24 ajp_att24
09:14:25  29  ,att25 ajp_att25
09:14:25  30  ,att26 ajp_att26
09:14:25  31  ,att27 ajp_att27
09:14:25  32  ,att28 ajp_att28
09:14:25  33  ,att29 ajp_att29
09:14:25  34  ,att30 ajp_att30
09:14:25  35  ,att31 ajp_att31
09:14:25  36  ,att32 ajp_att32
09:14:25  37  ,att33 ajp_att33
09:14:25  38  ,att34 ajp_att34
09:14:25  39  ,att35 ajp_att35
09:14:25  40  ,att36 ajp_att36
09:14:25  41  ,att37 ajp_att37
09:14:25  42  FROM svm6162
09:14:25  43  /

Table created.

Elapsed: 00:00:00.23
09:14:25 SQL> 
09:14:25 SQL> ANALYZE TABLE ajp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.60
09:14:25 SQL> 
09:14:25 SQL> -- rpt
09:14:25 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19803

Elapsed: 00:00:00.76
09:14:26 SQL> SELECT COUNT(*)FROM ajp_att;

  COUNT(*)
----------
     19803

Elapsed: 00:00:00.01
09:14:26 SQL> 
09:14:26 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
