
SQL*Plus: Release 11.2.0.1.0 Production on Thu Jan 6 21:17:31 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

21:17:32 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
21:17:32 SQL> 21:17:32 SQL> --
21:17:32 SQL> -- eur610.sql
21:17:32 SQL> --
21:17:32 SQL> 
21:17:32 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:17:32 SQL> 
21:17:32 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.01
21:17:32 SQL> 
21:17:32 SQL> -- I created di5min here:
21:17:32 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:17:32 SQL> 
21:17:32 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:17:32   2  SELECT
21:17:32   3  pair
21:17:32   4  ,ydate
21:17:32   5  ,prdate
21:17:32   6  ,rownum rnum -- acts as t in my time-series
21:17:32   7  ,clse
21:17:32   8  -- Derive a bunch of attributes from clse, the latest price:
21:17:32   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:17:32  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:17:32  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:17:32  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:17:32  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:17:32  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:17:32  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:17:32  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:17:32  17  --
21:17:32  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:17:32  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:17:32  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:17:32  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:17:32  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:17:32  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:17:32  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:17:32  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:17:32  26  --
21:17:32  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:17:32  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:17:32  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:17:32  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:17:32  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:17:32  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:17:32  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:17:32  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:17:32  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:17:32  36  FROM di5min WHERE pair LIKE'%eur%'
21:17:32  37  AND ydate > sysdate - 95
21:17:32  38  ORDER BY ydate
21:17:32  39  /

View created.

Elapsed: 00:00:00.19
21:17:32 SQL> 
21:17:32 SQL> -- rpt
21:17:32 SQL> 
21:17:32 SQL> SELECT
21:17:32   2  pair
21:17:32   3  ,COUNT(pair)
21:17:32   4  ,MIN(clse),MAX(clse)
21:17:32   5  ,MIN(avg6),MAX(avg6)
21:17:32   6  ,MIN(ydate),MAX(ydate)
21:17:32   7  FROM svm6102
21:17:32   8  GROUP BY pair
21:17:32   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19814    1.29735	   1.4273 1.29875103 1.42436233 2010-10-03 21:20:01 2011-01-06 21:15:00

Elapsed: 00:00:00.90
21:17:33 SQL> 
21:17:33 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:17:33 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.07
21:17:33 SQL> CREATE TABLE svm6122 COMPRESS AS
21:17:33   2  SELECT
21:17:33   3  pair
21:17:33   4  ,ydate
21:17:33   5  ,prdate
21:17:33   6  ,clse
21:17:33   7  -- g6 is important. I want to predict g6:
21:17:33   8  ,ld6 - clse g6
21:17:33   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:17:33  10  -- I want more attributes from the ones I derived above:
21:17:33  11  -- clse relation to moving-min
21:17:33  12  ,clse-min4  cm4
21:17:33  13  ,clse-min6  cm6
21:17:33  14  ,clse-min8  cm8
21:17:33  15  ,clse-min10 cm10
21:17:33  16  ,clse-min12 cm12
21:17:33  17  ,clse-min14 cm14
21:17:33  18  ,clse-min16 cm16
21:17:33  19  ,clse-min18 cm18
21:17:33  20  -- clse relation to moving-avg
21:17:33  21  ,clse-avg4  ca4
21:17:33  22  ,clse-avg6  ca6
21:17:33  23  ,clse-avg8  ca8
21:17:33  24  ,clse-avg10 ca10
21:17:33  25  ,clse-avg12 ca12
21:17:33  26  ,clse-avg14 ca14
21:17:33  27  ,clse-avg16 ca16
21:17:33  28  ,clse-avg18 ca18
21:17:33  29  -- clse relation to moving-max
21:17:33  30  ,clse-max4  cx4
21:17:33  31  ,clse-max6  cx6
21:17:33  32  ,clse-max8  cx8
21:17:33  33  ,clse-max10 cx10
21:17:33  34  ,clse-max12 cx12
21:17:33  35  ,clse-max14 cx14
21:17:33  36  ,clse-max16 cx16
21:17:33  37  ,clse-max18 cx18
21:17:33  38  -- Derive more attributes.
21:17:33  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:17:33  40  -- But COVAR_POP is more stable:
21:17:33  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:17:33  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:17:33  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:17:33  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:17:33  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:17:33  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:17:33  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:17:33  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:17:33  49  -- Derive date related attributes:
21:17:33  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:17:33  51  ,0+TO_CHAR(ydate,'D')d
21:17:33  52  ,0+TO_CHAR(ydate,'W')w
21:17:33  53  -- mpm stands for minutes-past-midnight:
21:17:33  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:17:33  55  -- mph stands for minutes-past-hour:
21:17:33  56  ,0+TO_CHAR(ydate,'MI')mph
21:17:33  57  FROM svm6102
21:17:33  58  ORDER BY ydate
21:17:33  59  /

Table created.

Elapsed: 00:00:02.44
21:17:35 SQL> 
21:17:35 SQL> -- rpt
21:17:35 SQL> 
21:17:35 SQL> SELECT
21:17:35   2  pair
21:17:35   3  ,COUNT(pair)
21:17:35   4  ,MIN(clse),MAX(clse)
21:17:35   5  ,MIN(ydate),MAX(ydate)
21:17:35   6  FROM svm6122
21:17:35   7  GROUP BY pair
21:17:35   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19814    1.29735	   1.4273 2010-10-03 21:20:01 2011-01-06 21:15:00

Elapsed: 00:00:00.04
21:17:35 SQL> 
21:17:35 SQL> -- Prepare for derivation of NTILE based params:
21:17:35 SQL> 
21:17:35 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.87
21:17:36 SQL> CREATE TABLE svm6142 COMPRESS AS
21:17:36   2  SELECT
21:17:36   3  pair
21:17:36   4  ,ydate
21:17:36   5  ,prdate
21:17:36   6  ,clse
21:17:36   7  ,g6
21:17:36   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:17:36   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:17:36  10  ,CASE WHEN trend IS NULL THEN 1
21:17:36  11  	    WHEN trend =0      THEN 1
21:17:36  12  	    ELSE trend END trend
21:17:36  13  ,cm4
21:17:36  14  ,cm6
21:17:36  15  ,cm8
21:17:36  16  ,cm10
21:17:36  17  ,cm12
21:17:36  18  ,cm14
21:17:36  19  ,cm16
21:17:36  20  ,cm18
21:17:36  21  --
21:17:36  22  ,ca4
21:17:36  23  ,ca6
21:17:36  24  ,ca8
21:17:36  25  ,ca10
21:17:36  26  ,ca12
21:17:36  27  ,ca14
21:17:36  28  ,ca16
21:17:36  29  ,ca18
21:17:36  30  --
21:17:36  31  ,cx4
21:17:36  32  ,cx6
21:17:36  33  ,cx8
21:17:36  34  ,cx10
21:17:36  35  ,cx12
21:17:36  36  ,cx14
21:17:36  37  ,cx16
21:17:36  38  ,cx18
21:17:36  39  --
21:17:36  40  ,crr4
21:17:36  41  ,crr6
21:17:36  42  ,crr8
21:17:36  43  ,crr10
21:17:36  44  ,crr12
21:17:36  45  ,crr14
21:17:36  46  ,crr16
21:17:36  47  ,crr18
21:17:36  48  --
21:17:36  49  ,hh
21:17:36  50  ,d
21:17:36  51  ,w
21:17:36  52  ,mpm
21:17:36  53  ,mph
21:17:36  54  FROM svm6122
21:17:36  55  ORDER BY ydate
21:17:36  56  /

Table created.

Elapsed: 00:00:00.47
21:17:37 SQL> 
21:17:37 SQL> -- rpt
21:17:37 SQL> 
21:17:37 SQL> SELECT
21:17:37   2  pair
21:17:37   3  ,trend
21:17:37   4  ,gatt
21:17:37   5  ,COUNT(pair)
21:17:37   6  ,AVG(g6)
21:17:37   7  FROM svm6142
21:17:37   8  GROUP BY pair,trend,gatt
21:17:37   9  ORDER BY pair,trend,gatt
21:17:37  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6599 -.00317838
eur_usd 	-1 up	      3570 .004447223
eur_usd 	-1		72
eur_usd 	 1 nup	      5868 -.00325253
eur_usd 	 1 up	      3705 .005071238

Elapsed: 00:00:00.05
21:17:37 SQL> 
21:17:37 SQL> 
21:17:37 SQL> -- Derive NTILE based params:
21:17:37 SQL> 
21:17:37 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.86
21:17:37 SQL> CREATE TABLE svm6162 COMPRESS AS
21:17:37   2  SELECT
21:17:37   3  pair
21:17:37   4  ,ydate
21:17:37   5  ,prdate
21:17:37   6  ,clse
21:17:37   7  ,g6
21:17:37   8  ,gatt
21:17:37   9  ,gattn
21:17:37  10  ,trend
21:17:37  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:17:37  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:17:37  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:17:37  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:17:37  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:17:37  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:17:37  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:17:37  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:17:37  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:17:37  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:17:37  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:17:37  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:17:37  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:17:37  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:17:37  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:17:37  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:17:37  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:17:37  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:17:37  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:17:37  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:17:37  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:17:37  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:17:37  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:17:37  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:17:37  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:17:37  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:17:37  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:17:37  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:17:37  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:17:37  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:17:37  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:17:37  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:17:37  43  ,hh  att32
21:17:37  44  ,d   att33
21:17:37  45  ,w   att34
21:17:37  46  ,mpm att35
21:17:37  47  ,mph att36
21:17:37  48  ,trend att37
21:17:37  49  FROM svm6142
21:17:37  50  ORDER BY ydate
21:17:37  51  /

Table created.

Elapsed: 00:00:04.73
21:17:42 SQL> 
21:17:42 SQL> -- rpt
21:17:42 SQL> 
21:17:42 SQL> SELECT
21:17:42   2  pair
21:17:42   3  ,trend
21:17:42   4  ,gatt
21:17:42   5  ,COUNT(pair)
21:17:42   6  ,AVG(g6)
21:17:42   7  FROM svm6162
21:17:42   8  GROUP BY pair,trend,gatt
21:17:42   9  ORDER BY pair,trend,gatt
21:17:42  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6599 -.00317838
eur_usd 	-1 up	      3570 .004447223
eur_usd 	-1		72
eur_usd 	 1 nup	      5868 -.00325253
eur_usd 	 1 up	      3705 .005071238

Elapsed: 00:00:00.04
21:17:42 SQL> 
21:17:42 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.04
21:17:42 SQL> CREATE TABLE modsrc COMPRESS AS
21:17:42   2  SELECT
21:17:42   3  pair
21:17:42   4  ,ydate
21:17:42   5  ,prdate
21:17:42   6  ,trend
21:17:42   7  ,g6
21:17:42   8  ,gatt
21:17:42   9  ,gattn
21:17:42  10  FROM svm6162
21:17:42  11  /

Table created.

Elapsed: 00:00:00.11
21:17:42 SQL> 
21:17:42 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
21:17:43 SQL> 
21:17:43 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
21:17:43 SQL> CREATE TABLE eur_ms610 COMPRESS AS
21:17:43   2  SELECT
21:17:43   3  ydate
21:17:43   4  ,trend eur_trend
21:17:43   5  ,g6    eur_g6
21:17:43   6  ,gatt  eur_gatt
21:17:43   7  ,gattn eur_gattn
21:17:43   8  FROM modsrc
21:17:43   9  /

Table created.

Elapsed: 00:00:00.08
21:17:43 SQL> 
21:17:43 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
21:17:43 SQL> 
21:17:43 SQL> -- I need a copy of the attributes:
21:17:43 SQL> 
21:17:43 SQL> 
21:17:43 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.15
21:17:43 SQL> CREATE TABLE eur_att COMPRESS AS
21:17:43   2  SELECT
21:17:43   3  ydate
21:17:43   4  ,att00 eur_att00
21:17:43   5  ,att01 eur_att01
21:17:43   6  ,att02 eur_att02
21:17:43   7  ,att03 eur_att03
21:17:43   8  ,att04 eur_att04
21:17:43   9  ,att05 eur_att05
21:17:43  10  ,att06 eur_att06
21:17:43  11  ,att07 eur_att07
21:17:43  12  ,att08 eur_att08
21:17:43  13  ,att09 eur_att09
21:17:43  14  ,att10 eur_att10
21:17:43  15  ,att11 eur_att11
21:17:43  16  ,att12 eur_att12
21:17:43  17  ,att13 eur_att13
21:17:43  18  ,att14 eur_att14
21:17:43  19  ,att15 eur_att15
21:17:43  20  ,att16 eur_att16
21:17:43  21  ,att17 eur_att17
21:17:43  22  ,att18 eur_att18
21:17:43  23  ,att19 eur_att19
21:17:43  24  ,att20 eur_att20
21:17:43  25  ,att21 eur_att21
21:17:43  26  ,att22 eur_att22
21:17:43  27  ,att23 eur_att23
21:17:43  28  ,att24 eur_att24
21:17:43  29  ,att25 eur_att25
21:17:43  30  ,att26 eur_att26
21:17:43  31  ,att27 eur_att27
21:17:43  32  ,att28 eur_att28
21:17:43  33  ,att29 eur_att29
21:17:43  34  ,att30 eur_att30
21:17:43  35  ,att31 eur_att31
21:17:43  36  ,att32 eur_att32
21:17:43  37  ,att33 eur_att33
21:17:43  38  ,att34 eur_att34
21:17:43  39  ,att35 eur_att35
21:17:43  40  ,att36 eur_att36
21:17:43  41  ,att37 eur_att37
21:17:43  42  FROM svm6162
21:17:43  43  /

Table created.

Elapsed: 00:00:00.15
21:17:43 SQL> 
21:17:43 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.56
21:17:44 SQL> 
21:17:44 SQL> -- rpt
21:17:44 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19814

Elapsed: 00:00:00.91
21:17:45 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19814

Elapsed: 00:00:00.00
21:17:45 SQL> 
21:17:45 SQL> --
21:17:45 SQL> -- aud610.sql
21:17:45 SQL> --
21:17:45 SQL> 
21:17:45 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:17:45 SQL> 
21:17:45 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.43
21:17:45 SQL> 
21:17:45 SQL> -- I created di5min here:
21:17:45 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:17:45 SQL> 
21:17:45 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:17:45   2  SELECT
21:17:45   3  pair
21:17:45   4  ,ydate
21:17:45   5  ,prdate
21:17:45   6  ,rownum rnum -- acts as t in my time-series
21:17:45   7  ,clse
21:17:45   8  -- Derive a bunch of attributes from clse, the latest price:
21:17:45   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:17:45  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:17:45  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:17:45  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:17:45  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:17:45  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:17:45  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:17:45  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:17:45  17  --
21:17:45  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:17:45  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:17:45  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:17:45  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:17:45  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:17:45  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:17:45  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:17:45  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:17:45  26  --
21:17:45  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:17:45  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:17:45  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:17:45  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:17:45  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:17:45  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:17:45  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:17:45  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:17:45  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:17:45  36  FROM di5min WHERE pair LIKE'%aud%'
21:17:45  37  AND ydate > sysdate - 95
21:17:45  38  ORDER BY ydate
21:17:45  39  /

View created.

Elapsed: 00:00:00.05
21:17:45 SQL> 
21:17:45 SQL> -- rpt
21:17:45 SQL> 
21:17:45 SQL> SELECT
21:17:45   2  pair
21:17:45   3  ,COUNT(pair)
21:17:45   4  ,MIN(clse),MAX(clse)
21:17:45   5  ,MIN(avg6),MAX(avg6)
21:17:45   6  ,MIN(ydate),MAX(ydate)
21:17:45   7  FROM svm6102
21:17:45   8  GROUP BY pair
21:17:45   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19810	.95405	  1.02495 .957141438 1.02284247 2010-10-03 21:20:01 2011-01-06 21:10:00

Elapsed: 00:00:00.88
21:17:46 SQL> 
21:17:46 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:17:46 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
21:17:46 SQL> CREATE TABLE svm6122 COMPRESS AS
21:17:46   2  SELECT
21:17:46   3  pair
21:17:46   4  ,ydate
21:17:46   5  ,prdate
21:17:46   6  ,clse
21:17:46   7  -- g6 is important. I want to predict g6:
21:17:46   8  ,ld6 - clse g6
21:17:46   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:17:46  10  -- I want more attributes from the ones I derived above:
21:17:46  11  -- clse relation to moving-min
21:17:46  12  ,clse-min4  cm4
21:17:46  13  ,clse-min6  cm6
21:17:46  14  ,clse-min8  cm8
21:17:46  15  ,clse-min10 cm10
21:17:46  16  ,clse-min12 cm12
21:17:46  17  ,clse-min14 cm14
21:17:46  18  ,clse-min16 cm16
21:17:46  19  ,clse-min18 cm18
21:17:46  20  -- clse relation to moving-avg
21:17:46  21  ,clse-avg4  ca4
21:17:46  22  ,clse-avg6  ca6
21:17:46  23  ,clse-avg8  ca8
21:17:46  24  ,clse-avg10 ca10
21:17:46  25  ,clse-avg12 ca12
21:17:46  26  ,clse-avg14 ca14
21:17:46  27  ,clse-avg16 ca16
21:17:46  28  ,clse-avg18 ca18
21:17:46  29  -- clse relation to moving-max
21:17:46  30  ,clse-max4  cx4
21:17:46  31  ,clse-max6  cx6
21:17:46  32  ,clse-max8  cx8
21:17:46  33  ,clse-max10 cx10
21:17:46  34  ,clse-max12 cx12
21:17:46  35  ,clse-max14 cx14
21:17:46  36  ,clse-max16 cx16
21:17:46  37  ,clse-max18 cx18
21:17:46  38  -- Derive more attributes.
21:17:46  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:17:46  40  -- But COVAR_POP is more stable:
21:17:46  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:17:46  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:17:46  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:17:46  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:17:46  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:17:46  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:17:46  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:17:46  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:17:46  49  -- Derive date related attributes:
21:17:46  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:17:46  51  ,0+TO_CHAR(ydate,'D')d
21:17:46  52  ,0+TO_CHAR(ydate,'W')w
21:17:46  53  -- mpm stands for minutes-past-midnight:
21:17:46  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:17:46  55  -- mph stands for minutes-past-hour:
21:17:46  56  ,0+TO_CHAR(ydate,'MI')mph
21:17:46  57  FROM svm6102
21:17:46  58  ORDER BY ydate
21:17:46  59  /

Table created.

Elapsed: 00:00:02.66
21:17:49 SQL> 
21:17:49 SQL> -- rpt
21:17:49 SQL> 
21:17:49 SQL> SELECT
21:17:49   2  pair
21:17:49   3  ,COUNT(pair)
21:17:49   4  ,MIN(clse),MAX(clse)
21:17:49   5  ,MIN(ydate),MAX(ydate)
21:17:49   6  FROM svm6122
21:17:49   7  GROUP BY pair
21:17:49   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19810	.95405	  1.02495 2010-10-03 21:20:01 2011-01-06 21:10:00

Elapsed: 00:00:00.05
21:17:49 SQL> 
21:17:49 SQL> -- Prepare for derivation of NTILE based params:
21:17:49 SQL> 
21:17:49 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.27
21:17:49 SQL> CREATE TABLE svm6142 COMPRESS AS
21:17:49   2  SELECT
21:17:49   3  pair
21:17:49   4  ,ydate
21:17:49   5  ,prdate
21:17:49   6  ,clse
21:17:49   7  ,g6
21:17:49   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:17:49   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:17:49  10  ,CASE WHEN trend IS NULL THEN 1
21:17:49  11  	    WHEN trend =0      THEN 1
21:17:49  12  	    ELSE trend END trend
21:17:49  13  ,cm4
21:17:49  14  ,cm6
21:17:49  15  ,cm8
21:17:49  16  ,cm10
21:17:49  17  ,cm12
21:17:49  18  ,cm14
21:17:49  19  ,cm16
21:17:49  20  ,cm18
21:17:49  21  --
21:17:49  22  ,ca4
21:17:49  23  ,ca6
21:17:49  24  ,ca8
21:17:49  25  ,ca10
21:17:49  26  ,ca12
21:17:49  27  ,ca14
21:17:49  28  ,ca16
21:17:49  29  ,ca18
21:17:49  30  --
21:17:49  31  ,cx4
21:17:49  32  ,cx6
21:17:49  33  ,cx8
21:17:49  34  ,cx10
21:17:49  35  ,cx12
21:17:49  36  ,cx14
21:17:49  37  ,cx16
21:17:49  38  ,cx18
21:17:49  39  --
21:17:49  40  ,crr4
21:17:49  41  ,crr6
21:17:49  42  ,crr8
21:17:49  43  ,crr10
21:17:49  44  ,crr12
21:17:49  45  ,crr14
21:17:49  46  ,crr16
21:17:49  47  ,crr18
21:17:49  48  --
21:17:49  49  ,hh
21:17:49  50  ,d
21:17:49  51  ,w
21:17:49  52  ,mpm
21:17:49  53  ,mph
21:17:49  54  FROM svm6122
21:17:49  55  ORDER BY ydate
21:17:49  56  /

Table created.

Elapsed: 00:00:00.39
21:17:50 SQL> 
21:17:50 SQL> -- rpt
21:17:50 SQL> 
21:17:50 SQL> SELECT
21:17:50   2  pair
21:17:50   3  ,trend
21:17:50   4  ,gatt
21:17:50   5  ,COUNT(pair)
21:17:50   6  ,AVG(g6)
21:17:50   7  FROM svm6142
21:17:50   8  GROUP BY pair,trend,gatt
21:17:50   9  ORDER BY pair,trend,gatt
21:17:50  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5719 -.00214962
aud_usd 	-1 up	      3701 .003745866
aud_usd 	-1		72
aud_usd 	 1 nup	      6725 -.00213813
aud_usd 	 1 up	      3593 .004054752

Elapsed: 00:00:00.04
21:17:50 SQL> 
21:17:50 SQL> 
21:17:50 SQL> -- Derive NTILE based params:
21:17:50 SQL> 
21:17:50 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
21:17:50 SQL> CREATE TABLE svm6162 COMPRESS AS
21:17:50   2  SELECT
21:17:50   3  pair
21:17:50   4  ,ydate
21:17:50   5  ,prdate
21:17:50   6  ,clse
21:17:50   7  ,g6
21:17:50   8  ,gatt
21:17:50   9  ,gattn
21:17:50  10  ,trend
21:17:50  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:17:50  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:17:50  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:17:50  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:17:50  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:17:50  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:17:50  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:17:50  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:17:50  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:17:50  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:17:50  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:17:50  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:17:50  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:17:50  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:17:50  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:17:50  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:17:50  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:17:50  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:17:50  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:17:50  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:17:50  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:17:50  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:17:50  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:17:50  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:17:50  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:17:50  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:17:50  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:17:50  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:17:50  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:17:50  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:17:50  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:17:50  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:17:50  43  ,hh  att32
21:17:50  44  ,d   att33
21:17:50  45  ,w   att34
21:17:50  46  ,mpm att35
21:17:50  47  ,mph att36
21:17:50  48  ,trend att37
21:17:50  49  FROM svm6142
21:17:50  50  ORDER BY ydate
21:17:50  51  /

Table created.

Elapsed: 00:00:04.98
21:17:55 SQL> 
21:17:55 SQL> -- rpt
21:17:55 SQL> 
21:17:55 SQL> SELECT
21:17:55   2  pair
21:17:55   3  ,trend
21:17:55   4  ,gatt
21:17:55   5  ,COUNT(pair)
21:17:55   6  ,AVG(g6)
21:17:55   7  FROM svm6162
21:17:55   8  GROUP BY pair,trend,gatt
21:17:55   9  ORDER BY pair,trend,gatt
21:17:55  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5719 -.00214962
aud_usd 	-1 up	      3701 .003745866
aud_usd 	-1		72
aud_usd 	 1 nup	      6725 -.00213813
aud_usd 	 1 up	      3593 .004054752

Elapsed: 00:00:00.03
21:17:55 SQL> 
21:17:55 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
21:17:55 SQL> CREATE TABLE modsrc COMPRESS AS
21:17:55   2  SELECT
21:17:55   3  pair
21:17:55   4  ,ydate
21:17:55   5  ,prdate
21:17:55   6  ,trend
21:17:55   7  ,g6
21:17:55   8  ,gatt
21:17:55   9  ,gattn
21:17:55  10  FROM svm6162
21:17:55  11  /

Table created.

Elapsed: 00:00:00.09
21:17:55 SQL> 
21:17:55 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
21:17:55 SQL> 
21:17:55 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
21:17:55 SQL> CREATE TABLE aud_ms610 COMPRESS AS
21:17:55   2  SELECT
21:17:55   3  ydate
21:17:55   4  ,trend aud_trend
21:17:55   5  ,g6    aud_g6
21:17:55   6  ,gatt  aud_gatt
21:17:55   7  ,gattn aud_gattn
21:17:55   8  FROM modsrc
21:17:55   9  /

Table created.

Elapsed: 00:00:00.07
21:17:55 SQL> 
21:17:55 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
21:17:56 SQL> 
21:17:56 SQL> -- I need a copy of the attributes:
21:17:56 SQL> 
21:17:56 SQL> 
21:17:56 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.14
21:17:56 SQL> CREATE TABLE aud_att COMPRESS AS
21:17:56   2  SELECT
21:17:56   3  ydate
21:17:56   4  ,att00 aud_att00
21:17:56   5  ,att01 aud_att01
21:17:56   6  ,att02 aud_att02
21:17:56   7  ,att03 aud_att03
21:17:56   8  ,att04 aud_att04
21:17:56   9  ,att05 aud_att05
21:17:56  10  ,att06 aud_att06
21:17:56  11  ,att07 aud_att07
21:17:56  12  ,att08 aud_att08
21:17:56  13  ,att09 aud_att09
21:17:56  14  ,att10 aud_att10
21:17:56  15  ,att11 aud_att11
21:17:56  16  ,att12 aud_att12
21:17:56  17  ,att13 aud_att13
21:17:56  18  ,att14 aud_att14
21:17:56  19  ,att15 aud_att15
21:17:56  20  ,att16 aud_att16
21:17:56  21  ,att17 aud_att17
21:17:56  22  ,att18 aud_att18
21:17:56  23  ,att19 aud_att19
21:17:56  24  ,att20 aud_att20
21:17:56  25  ,att21 aud_att21
21:17:56  26  ,att22 aud_att22
21:17:56  27  ,att23 aud_att23
21:17:56  28  ,att24 aud_att24
21:17:56  29  ,att25 aud_att25
21:17:56  30  ,att26 aud_att26
21:17:56  31  ,att27 aud_att27
21:17:56  32  ,att28 aud_att28
21:17:56  33  ,att29 aud_att29
21:17:56  34  ,att30 aud_att30
21:17:56  35  ,att31 aud_att31
21:17:56  36  ,att32 aud_att32
21:17:56  37  ,att33 aud_att33
21:17:56  38  ,att34 aud_att34
21:17:56  39  ,att35 aud_att35
21:17:56  40  ,att36 aud_att36
21:17:56  41  ,att37 aud_att37
21:17:56  42  FROM svm6162
21:17:56  43  /

Table created.

Elapsed: 00:00:00.17
21:17:56 SQL> 
21:17:56 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.50
21:17:56 SQL> 
21:17:56 SQL> -- rpt
21:17:56 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19810

Elapsed: 00:00:00.89
21:17:57 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19810

Elapsed: 00:00:00.00
21:17:57 SQL> 
21:17:57 SQL> --
21:17:57 SQL> -- gbp610.sql
21:17:57 SQL> --
21:17:57 SQL> 
21:17:57 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:17:57 SQL> 
21:17:57 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.44
21:17:58 SQL> 
21:17:58 SQL> -- I created di5min here:
21:17:58 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:17:58 SQL> 
21:17:58 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:17:58   2  SELECT
21:17:58   3  pair
21:17:58   4  ,ydate
21:17:58   5  ,prdate
21:17:58   6  ,rownum rnum -- acts as t in my time-series
21:17:58   7  ,clse
21:17:58   8  -- Derive a bunch of attributes from clse, the latest price:
21:17:58   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:17:58  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:17:58  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:17:58  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:17:58  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:17:58  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:17:58  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:17:58  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:17:58  17  --
21:17:58  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:17:58  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:17:58  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:17:58  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:17:58  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:17:58  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:17:58  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:17:58  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:17:58  26  --
21:17:58  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:17:58  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:17:58  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:17:58  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:17:58  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:17:58  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:17:58  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:17:58  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:17:58  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:17:58  36  FROM di5min WHERE pair LIKE'%gbp%'
21:17:58  37  AND ydate > sysdate - 95
21:17:58  38  ORDER BY ydate
21:17:58  39  /

View created.

Elapsed: 00:00:00.04
21:17:58 SQL> 
21:17:58 SQL> -- rpt
21:17:58 SQL> 
21:17:58 SQL> SELECT
21:17:58   2  pair
21:17:58   3  ,COUNT(pair)
21:17:58   4  ,MIN(clse),MAX(clse)
21:17:58   5  ,MIN(avg6),MAX(avg6)
21:17:58   6  ,MIN(ydate),MAX(ydate)
21:17:58   7  FROM svm6102
21:17:58   8  GROUP BY pair
21:17:58   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19813   1.535325	   1.6295 1.53696747 1.62716986 2010-10-03 21:20:01 2011-01-06 21:15:00

Elapsed: 00:00:00.88
21:17:59 SQL> 
21:17:59 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:17:59 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.39
21:17:59 SQL> CREATE TABLE svm6122 COMPRESS AS
21:17:59   2  SELECT
21:17:59   3  pair
21:17:59   4  ,ydate
21:17:59   5  ,prdate
21:17:59   6  ,clse
21:17:59   7  -- g6 is important. I want to predict g6:
21:17:59   8  ,ld6 - clse g6
21:17:59   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:17:59  10  -- I want more attributes from the ones I derived above:
21:17:59  11  -- clse relation to moving-min
21:17:59  12  ,clse-min4  cm4
21:17:59  13  ,clse-min6  cm6
21:17:59  14  ,clse-min8  cm8
21:17:59  15  ,clse-min10 cm10
21:17:59  16  ,clse-min12 cm12
21:17:59  17  ,clse-min14 cm14
21:17:59  18  ,clse-min16 cm16
21:17:59  19  ,clse-min18 cm18
21:17:59  20  -- clse relation to moving-avg
21:17:59  21  ,clse-avg4  ca4
21:17:59  22  ,clse-avg6  ca6
21:17:59  23  ,clse-avg8  ca8
21:17:59  24  ,clse-avg10 ca10
21:17:59  25  ,clse-avg12 ca12
21:17:59  26  ,clse-avg14 ca14
21:17:59  27  ,clse-avg16 ca16
21:17:59  28  ,clse-avg18 ca18
21:17:59  29  -- clse relation to moving-max
21:17:59  30  ,clse-max4  cx4
21:17:59  31  ,clse-max6  cx6
21:17:59  32  ,clse-max8  cx8
21:17:59  33  ,clse-max10 cx10
21:17:59  34  ,clse-max12 cx12
21:17:59  35  ,clse-max14 cx14
21:17:59  36  ,clse-max16 cx16
21:17:59  37  ,clse-max18 cx18
21:17:59  38  -- Derive more attributes.
21:17:59  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:17:59  40  -- But COVAR_POP is more stable:
21:17:59  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:17:59  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:17:59  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:17:59  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:17:59  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:17:59  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:17:59  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:17:59  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:17:59  49  -- Derive date related attributes:
21:17:59  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:17:59  51  ,0+TO_CHAR(ydate,'D')d
21:17:59  52  ,0+TO_CHAR(ydate,'W')w
21:17:59  53  -- mpm stands for minutes-past-midnight:
21:17:59  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:17:59  55  -- mph stands for minutes-past-hour:
21:17:59  56  ,0+TO_CHAR(ydate,'MI')mph
21:17:59  57  FROM svm6102
21:17:59  58  ORDER BY ydate
21:17:59  59  /

Table created.

Elapsed: 00:00:02.10
21:18:01 SQL> 
21:18:01 SQL> -- rpt
21:18:01 SQL> 
21:18:01 SQL> SELECT
21:18:01   2  pair
21:18:01   3  ,COUNT(pair)
21:18:01   4  ,MIN(clse),MAX(clse)
21:18:01   5  ,MIN(ydate),MAX(ydate)
21:18:01   6  FROM svm6122
21:18:01   7  GROUP BY pair
21:18:01   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19813   1.535325	   1.6295 2010-10-03 21:20:01 2011-01-06 21:15:00

Elapsed: 00:00:00.04
21:18:01 SQL> 
21:18:01 SQL> -- Prepare for derivation of NTILE based params:
21:18:01 SQL> 
21:18:01 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.43
21:18:02 SQL> CREATE TABLE svm6142 COMPRESS AS
21:18:02   2  SELECT
21:18:02   3  pair
21:18:02   4  ,ydate
21:18:02   5  ,prdate
21:18:02   6  ,clse
21:18:02   7  ,g6
21:18:02   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:18:02   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:18:02  10  ,CASE WHEN trend IS NULL THEN 1
21:18:02  11  	    WHEN trend =0      THEN 1
21:18:02  12  	    ELSE trend END trend
21:18:02  13  ,cm4
21:18:02  14  ,cm6
21:18:02  15  ,cm8
21:18:02  16  ,cm10
21:18:02  17  ,cm12
21:18:02  18  ,cm14
21:18:02  19  ,cm16
21:18:02  20  ,cm18
21:18:02  21  --
21:18:02  22  ,ca4
21:18:02  23  ,ca6
21:18:02  24  ,ca8
21:18:02  25  ,ca10
21:18:02  26  ,ca12
21:18:02  27  ,ca14
21:18:02  28  ,ca16
21:18:02  29  ,ca18
21:18:02  30  --
21:18:02  31  ,cx4
21:18:02  32  ,cx6
21:18:02  33  ,cx8
21:18:02  34  ,cx10
21:18:02  35  ,cx12
21:18:02  36  ,cx14
21:18:02  37  ,cx16
21:18:02  38  ,cx18
21:18:02  39  --
21:18:02  40  ,crr4
21:18:02  41  ,crr6
21:18:02  42  ,crr8
21:18:02  43  ,crr10
21:18:02  44  ,crr12
21:18:02  45  ,crr14
21:18:02  46  ,crr16
21:18:02  47  ,crr18
21:18:02  48  --
21:18:02  49  ,hh
21:18:02  50  ,d
21:18:02  51  ,w
21:18:02  52  ,mpm
21:18:02  53  ,mph
21:18:02  54  FROM svm6122
21:18:02  55  ORDER BY ydate
21:18:02  56  /

Table created.

Elapsed: 00:00:00.38
21:18:02 SQL> 
21:18:02 SQL> -- rpt
21:18:02 SQL> 
21:18:02 SQL> SELECT
21:18:02   2  pair
21:18:02   3  ,trend
21:18:02   4  ,gatt
21:18:02   5  ,COUNT(pair)
21:18:02   6  ,AVG(g6)
21:18:02   7  FROM svm6142
21:18:02   8  GROUP BY pair,trend,gatt
21:18:02   9  ORDER BY pair,trend,gatt
21:18:02  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6421 -.00262762
gbp_usd 	-1 up	      3579 .004338911
gbp_usd 	-1		50
gbp_usd 	 1 nup	      6285    -.00265
gbp_usd 	 1 up	      3456 .004524374
gbp_usd 	 1		22

6 rows selected.

Elapsed: 00:00:00.04
21:18:02 SQL> 
21:18:02 SQL> 
21:18:02 SQL> -- Derive NTILE based params:
21:18:02 SQL> 
21:18:02 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.21
21:18:02 SQL> CREATE TABLE svm6162 COMPRESS AS
21:18:02   2  SELECT
21:18:02   3  pair
21:18:02   4  ,ydate
21:18:02   5  ,prdate
21:18:02   6  ,clse
21:18:02   7  ,g6
21:18:02   8  ,gatt
21:18:02   9  ,gattn
21:18:02  10  ,trend
21:18:02  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:18:02  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:18:02  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:18:02  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:18:02  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:18:02  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:18:02  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:18:02  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:18:02  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:18:02  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:18:02  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:18:02  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:18:02  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:18:02  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:18:02  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:18:02  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:18:02  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:18:02  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:18:02  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:18:02  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:18:02  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:18:02  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:18:02  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:18:02  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:18:02  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:18:02  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:18:02  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:18:02  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:18:02  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:18:02  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:18:02  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:18:02  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:18:02  43  ,hh  att32
21:18:02  44  ,d   att33
21:18:02  45  ,w   att34
21:18:02  46  ,mpm att35
21:18:02  47  ,mph att36
21:18:02  48  ,trend att37
21:18:02  49  FROM svm6142
21:18:02  50  ORDER BY ydate
21:18:02  51  /

Table created.

Elapsed: 00:00:04.82
21:18:07 SQL> 
21:18:07 SQL> -- rpt
21:18:07 SQL> 
21:18:07 SQL> SELECT
21:18:07   2  pair
21:18:07   3  ,trend
21:18:07   4  ,gatt
21:18:07   5  ,COUNT(pair)
21:18:07   6  ,AVG(g6)
21:18:07   7  FROM svm6162
21:18:07   8  GROUP BY pair,trend,gatt
21:18:07   9  ORDER BY pair,trend,gatt
21:18:07  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6421 -.00262762
gbp_usd 	-1 up	      3579 .004338911
gbp_usd 	-1		50
gbp_usd 	 1 nup	      6285    -.00265
gbp_usd 	 1 up	      3456 .004524374
gbp_usd 	 1		22

6 rows selected.

Elapsed: 00:00:00.03
21:18:07 SQL> 
21:18:07 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.23
21:18:07 SQL> CREATE TABLE modsrc COMPRESS AS
21:18:07   2  SELECT
21:18:07   3  pair
21:18:07   4  ,ydate
21:18:07   5  ,prdate
21:18:07   6  ,trend
21:18:07   7  ,g6
21:18:07   8  ,gatt
21:18:07   9  ,gattn
21:18:07  10  FROM svm6162
21:18:07  11  /

Table created.

Elapsed: 00:00:00.18
21:18:08 SQL> 
21:18:08 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
21:18:08 SQL> 
21:18:08 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.11
21:18:08 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
21:18:08   2  SELECT
21:18:08   3  ydate
21:18:08   4  ,trend gbp_trend
21:18:08   5  ,g6    gbp_g6
21:18:08   6  ,gatt  gbp_gatt
21:18:08   7  ,gattn gbp_gattn
21:18:08   8  FROM modsrc
21:18:08   9  /

Table created.

Elapsed: 00:00:00.06
21:18:08 SQL> 
21:18:08 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
21:18:08 SQL> 
21:18:08 SQL> -- I need a copy of the attributes:
21:18:08 SQL> 
21:18:08 SQL> 
21:18:08 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.05
21:18:08 SQL> CREATE TABLE gbp_att COMPRESS AS
21:18:08   2  SELECT
21:18:08   3  ydate
21:18:08   4  ,att00 gbp_att00
21:18:08   5  ,att01 gbp_att01
21:18:08   6  ,att02 gbp_att02
21:18:08   7  ,att03 gbp_att03
21:18:08   8  ,att04 gbp_att04
21:18:08   9  ,att05 gbp_att05
21:18:08  10  ,att06 gbp_att06
21:18:08  11  ,att07 gbp_att07
21:18:08  12  ,att08 gbp_att08
21:18:08  13  ,att09 gbp_att09
21:18:08  14  ,att10 gbp_att10
21:18:08  15  ,att11 gbp_att11
21:18:08  16  ,att12 gbp_att12
21:18:08  17  ,att13 gbp_att13
21:18:08  18  ,att14 gbp_att14
21:18:08  19  ,att15 gbp_att15
21:18:08  20  ,att16 gbp_att16
21:18:08  21  ,att17 gbp_att17
21:18:08  22  ,att18 gbp_att18
21:18:08  23  ,att19 gbp_att19
21:18:08  24  ,att20 gbp_att20
21:18:08  25  ,att21 gbp_att21
21:18:08  26  ,att22 gbp_att22
21:18:08  27  ,att23 gbp_att23
21:18:08  28  ,att24 gbp_att24
21:18:08  29  ,att25 gbp_att25
21:18:08  30  ,att26 gbp_att26
21:18:08  31  ,att27 gbp_att27
21:18:08  32  ,att28 gbp_att28
21:18:08  33  ,att29 gbp_att29
21:18:08  34  ,att30 gbp_att30
21:18:08  35  ,att31 gbp_att31
21:18:08  36  ,att32 gbp_att32
21:18:08  37  ,att33 gbp_att33
21:18:08  38  ,att34 gbp_att34
21:18:08  39  ,att35 gbp_att35
21:18:08  40  ,att36 gbp_att36
21:18:08  41  ,att37 gbp_att37
21:18:08  42  FROM svm6162
21:18:08  43  /

Table created.

Elapsed: 00:00:00.21
21:18:08 SQL> 
21:18:08 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
21:18:09 SQL> 
21:18:09 SQL> -- rpt
21:18:09 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19813

Elapsed: 00:00:00.88
21:18:10 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19813

Elapsed: 00:00:00.00
21:18:10 SQL> 
21:18:10 SQL> --
21:18:10 SQL> -- jpy610.sql
21:18:10 SQL> --
21:18:10 SQL> 
21:18:10 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:18:10 SQL> 
21:18:10 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.59
21:18:10 SQL> 
21:18:10 SQL> -- I created di5min here:
21:18:10 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:18:10 SQL> 
21:18:10 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:18:10   2  SELECT
21:18:10   3  pair
21:18:10   4  ,ydate
21:18:10   5  ,prdate
21:18:10   6  ,rownum rnum -- acts as t in my time-series
21:18:10   7  ,clse
21:18:10   8  -- Derive a bunch of attributes from clse, the latest price:
21:18:10   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:18:10  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:18:10  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:18:10  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:18:10  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:18:10  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:18:10  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:18:10  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:18:10  17  --
21:18:10  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:18:10  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:18:10  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:18:10  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:18:10  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:18:10  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:18:10  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:18:10  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:18:10  26  --
21:18:10  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:18:10  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:18:10  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:18:10  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:18:10  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:18:10  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:18:10  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:18:10  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:18:10  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:18:10  36  FROM di5min WHERE pair LIKE'%jpy%'
21:18:10  37  AND ydate > sysdate - 95
21:18:10  38  ORDER BY ydate
21:18:10  39  /

View created.

Elapsed: 00:00:00.06
21:18:10 SQL> 
21:18:10 SQL> -- rpt
21:18:10 SQL> 
21:18:10 SQL> SELECT
21:18:10   2  pair
21:18:10   3  ,COUNT(pair)
21:18:10   4  ,MIN(clse),MAX(clse)
21:18:10   5  ,MIN(avg6),MAX(avg6)
21:18:10   6  ,MIN(ydate),MAX(ydate)
21:18:10   7  FROM svm6102
21:18:10   8  GROUP BY pair
21:18:10   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19812	 80.25	   84.485 80.3595205 84.3105479 2010-10-03 21:20:01 2011-01-06 21:15:00

Elapsed: 00:00:00.94
21:18:11 SQL> 
21:18:11 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:18:11 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.31
21:18:12 SQL> CREATE TABLE svm6122 COMPRESS AS
21:18:12   2  SELECT
21:18:12   3  pair
21:18:12   4  ,ydate
21:18:12   5  ,prdate
21:18:12   6  ,clse
21:18:12   7  -- g6 is important. I want to predict g6:
21:18:12   8  ,ld6 - clse g6
21:18:12   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:18:12  10  -- I want more attributes from the ones I derived above:
21:18:12  11  -- clse relation to moving-min
21:18:12  12  ,clse-min4  cm4
21:18:12  13  ,clse-min6  cm6
21:18:12  14  ,clse-min8  cm8
21:18:12  15  ,clse-min10 cm10
21:18:12  16  ,clse-min12 cm12
21:18:12  17  ,clse-min14 cm14
21:18:12  18  ,clse-min16 cm16
21:18:12  19  ,clse-min18 cm18
21:18:12  20  -- clse relation to moving-avg
21:18:12  21  ,clse-avg4  ca4
21:18:12  22  ,clse-avg6  ca6
21:18:12  23  ,clse-avg8  ca8
21:18:12  24  ,clse-avg10 ca10
21:18:12  25  ,clse-avg12 ca12
21:18:12  26  ,clse-avg14 ca14
21:18:12  27  ,clse-avg16 ca16
21:18:12  28  ,clse-avg18 ca18
21:18:12  29  -- clse relation to moving-max
21:18:12  30  ,clse-max4  cx4
21:18:12  31  ,clse-max6  cx6
21:18:12  32  ,clse-max8  cx8
21:18:12  33  ,clse-max10 cx10
21:18:12  34  ,clse-max12 cx12
21:18:12  35  ,clse-max14 cx14
21:18:12  36  ,clse-max16 cx16
21:18:12  37  ,clse-max18 cx18
21:18:12  38  -- Derive more attributes.
21:18:12  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:18:12  40  -- But COVAR_POP is more stable:
21:18:12  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:18:12  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:18:12  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:18:12  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:18:12  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:18:12  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:18:12  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:18:12  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:18:12  49  -- Derive date related attributes:
21:18:12  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:18:12  51  ,0+TO_CHAR(ydate,'D')d
21:18:12  52  ,0+TO_CHAR(ydate,'W')w
21:18:12  53  -- mpm stands for minutes-past-midnight:
21:18:12  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:18:12  55  -- mph stands for minutes-past-hour:
21:18:12  56  ,0+TO_CHAR(ydate,'MI')mph
21:18:12  57  FROM svm6102
21:18:12  58  ORDER BY ydate
21:18:12  59  /

Table created.

Elapsed: 00:00:02.23
21:18:14 SQL> 
21:18:14 SQL> -- rpt
21:18:14 SQL> 
21:18:14 SQL> SELECT
21:18:14   2  pair
21:18:14   3  ,COUNT(pair)
21:18:14   4  ,MIN(clse),MAX(clse)
21:18:14   5  ,MIN(ydate),MAX(ydate)
21:18:14   6  FROM svm6122
21:18:14   7  GROUP BY pair
21:18:14   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19812	 80.25	   84.485 2010-10-03 21:20:01 2011-01-06 21:15:00

Elapsed: 00:00:00.04
21:18:14 SQL> 
21:18:14 SQL> -- Prepare for derivation of NTILE based params:
21:18:14 SQL> 
21:18:14 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.30
21:18:14 SQL> CREATE TABLE svm6142 COMPRESS AS
21:18:14   2  SELECT
21:18:14   3  pair
21:18:14   4  ,ydate
21:18:14   5  ,prdate
21:18:14   6  ,clse
21:18:14   7  ,g6
21:18:14   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:18:14   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:18:14  10  ,CASE WHEN trend IS NULL THEN 1
21:18:14  11  	    WHEN trend =0      THEN 1
21:18:14  12  	    ELSE trend END trend
21:18:14  13  ,cm4
21:18:14  14  ,cm6
21:18:14  15  ,cm8
21:18:14  16  ,cm10
21:18:14  17  ,cm12
21:18:14  18  ,cm14
21:18:14  19  ,cm16
21:18:14  20  ,cm18
21:18:14  21  --
21:18:14  22  ,ca4
21:18:14  23  ,ca6
21:18:14  24  ,ca8
21:18:14  25  ,ca10
21:18:14  26  ,ca12
21:18:14  27  ,ca14
21:18:14  28  ,ca16
21:18:14  29  ,ca18
21:18:14  30  --
21:18:14  31  ,cx4
21:18:14  32  ,cx6
21:18:14  33  ,cx8
21:18:14  34  ,cx10
21:18:14  35  ,cx12
21:18:14  36  ,cx14
21:18:14  37  ,cx16
21:18:14  38  ,cx18
21:18:14  39  --
21:18:14  40  ,crr4
21:18:14  41  ,crr6
21:18:14  42  ,crr8
21:18:14  43  ,crr10
21:18:14  44  ,crr12
21:18:14  45  ,crr14
21:18:14  46  ,crr16
21:18:14  47  ,crr18
21:18:14  48  --
21:18:14  49  ,hh
21:18:14  50  ,d
21:18:14  51  ,w
21:18:14  52  ,mpm
21:18:14  53  ,mph
21:18:14  54  FROM svm6122
21:18:14  55  ORDER BY ydate
21:18:14  56  /

Table created.

Elapsed: 00:00:00.45
21:18:15 SQL> 
21:18:15 SQL> -- rpt
21:18:15 SQL> 
21:18:15 SQL> SELECT
21:18:15   2  pair
21:18:15   3  ,trend
21:18:15   4  ,gatt
21:18:15   5  ,COUNT(pair)
21:18:15   6  ,AVG(g6)
21:18:15   7  FROM svm6142
21:18:15   8  GROUP BY pair,trend,gatt
21:18:15   9  ORDER BY pair,trend,gatt
21:18:15  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5184 -.16553339
usd_jpy 	-1 up	      4908 .169498557
usd_jpy 	-1		 5
usd_jpy 	 1 nup	      5077 -.15499158
usd_jpy 	 1 up	      4571 .174256931
usd_jpy 	 1		67

6 rows selected.

Elapsed: 00:00:00.05
21:18:15 SQL> 
21:18:15 SQL> 
21:18:15 SQL> -- Derive NTILE based params:
21:18:15 SQL> 
21:18:15 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
21:18:15 SQL> CREATE TABLE svm6162 COMPRESS AS
21:18:15   2  SELECT
21:18:15   3  pair
21:18:15   4  ,ydate
21:18:15   5  ,prdate
21:18:15   6  ,clse
21:18:15   7  ,g6
21:18:15   8  ,gatt
21:18:15   9  ,gattn
21:18:15  10  ,trend
21:18:15  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:18:15  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:18:15  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:18:15  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:18:15  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:18:15  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:18:15  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:18:15  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:18:15  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:18:15  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:18:15  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:18:15  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:18:15  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:18:15  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:18:15  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:18:15  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:18:15  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:18:15  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:18:15  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:18:15  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:18:15  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:18:15  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:18:15  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:18:15  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:18:15  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:18:15  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:18:15  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:18:15  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:18:15  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:18:15  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:18:15  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:18:15  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:18:15  43  ,hh  att32
21:18:15  44  ,d   att33
21:18:15  45  ,w   att34
21:18:15  46  ,mpm att35
21:18:15  47  ,mph att36
21:18:15  48  ,trend att37
21:18:15  49  FROM svm6142
21:18:15  50  ORDER BY ydate
21:18:15  51  /

Table created.

Elapsed: 00:00:04.88
21:18:20 SQL> 
21:18:20 SQL> -- rpt
21:18:20 SQL> 
21:18:20 SQL> SELECT
21:18:20   2  pair
21:18:20   3  ,trend
21:18:20   4  ,gatt
21:18:20   5  ,COUNT(pair)
21:18:20   6  ,AVG(g6)
21:18:20   7  FROM svm6162
21:18:20   8  GROUP BY pair,trend,gatt
21:18:20   9  ORDER BY pair,trend,gatt
21:18:20  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5184 -.16553339
usd_jpy 	-1 up	      4908 .169498557
usd_jpy 	-1		 5
usd_jpy 	 1 nup	      5077 -.15499158
usd_jpy 	 1 up	      4571 .174256931
usd_jpy 	 1		67

6 rows selected.

Elapsed: 00:00:00.03
21:18:20 SQL> 
21:18:20 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.20
21:18:20 SQL> CREATE TABLE modsrc COMPRESS AS
21:18:20   2  SELECT
21:18:20   3  pair
21:18:20   4  ,ydate
21:18:20   5  ,prdate
21:18:20   6  ,trend
21:18:20   7  ,g6
21:18:20   8  ,gatt
21:18:20   9  ,gattn
21:18:20  10  FROM svm6162
21:18:20  11  /

Table created.

Elapsed: 00:00:00.08
21:18:20 SQL> 
21:18:20 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.24
21:18:20 SQL> 
21:18:20 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
21:18:20 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
21:18:20   2  SELECT
21:18:20   3  ydate
21:18:20   4  ,trend jpy_trend
21:18:20   5  ,g6    jpy_g6
21:18:20   6  ,gatt  jpy_gatt
21:18:20   7  ,gattn jpy_gattn
21:18:20   8  FROM modsrc
21:18:20   9  /

Table created.

Elapsed: 00:00:00.08
21:18:20 SQL> 
21:18:20 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
21:18:21 SQL> 
21:18:21 SQL> -- I need a copy of the attributes:
21:18:21 SQL> 
21:18:21 SQL> 
21:18:21 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.10
21:18:21 SQL> CREATE TABLE jpy_att COMPRESS AS
21:18:21   2  SELECT
21:18:21   3  ydate
21:18:21   4  ,att00 jpy_att00
21:18:21   5  ,att01 jpy_att01
21:18:21   6  ,att02 jpy_att02
21:18:21   7  ,att03 jpy_att03
21:18:21   8  ,att04 jpy_att04
21:18:21   9  ,att05 jpy_att05
21:18:21  10  ,att06 jpy_att06
21:18:21  11  ,att07 jpy_att07
21:18:21  12  ,att08 jpy_att08
21:18:21  13  ,att09 jpy_att09
21:18:21  14  ,att10 jpy_att10
21:18:21  15  ,att11 jpy_att11
21:18:21  16  ,att12 jpy_att12
21:18:21  17  ,att13 jpy_att13
21:18:21  18  ,att14 jpy_att14
21:18:21  19  ,att15 jpy_att15
21:18:21  20  ,att16 jpy_att16
21:18:21  21  ,att17 jpy_att17
21:18:21  22  ,att18 jpy_att18
21:18:21  23  ,att19 jpy_att19
21:18:21  24  ,att20 jpy_att20
21:18:21  25  ,att21 jpy_att21
21:18:21  26  ,att22 jpy_att22
21:18:21  27  ,att23 jpy_att23
21:18:21  28  ,att24 jpy_att24
21:18:21  29  ,att25 jpy_att25
21:18:21  30  ,att26 jpy_att26
21:18:21  31  ,att27 jpy_att27
21:18:21  32  ,att28 jpy_att28
21:18:21  33  ,att29 jpy_att29
21:18:21  34  ,att30 jpy_att30
21:18:21  35  ,att31 jpy_att31
21:18:21  36  ,att32 jpy_att32
21:18:21  37  ,att33 jpy_att33
21:18:21  38  ,att34 jpy_att34
21:18:21  39  ,att35 jpy_att35
21:18:21  40  ,att36 jpy_att36
21:18:21  41  ,att37 jpy_att37
21:18:21  42  FROM svm6162
21:18:21  43  /

Table created.

Elapsed: 00:00:00.21
21:18:21 SQL> 
21:18:21 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
21:18:21 SQL> 
21:18:21 SQL> -- rpt
21:18:21 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19812

Elapsed: 00:00:00.90
21:18:22 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19812

Elapsed: 00:00:00.00
21:18:22 SQL> 
21:18:22 SQL> --
21:18:22 SQL> -- cad610.sql
21:18:22 SQL> --
21:18:22 SQL> 
21:18:22 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:18:22 SQL> 
21:18:22 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.56
21:18:23 SQL> 
21:18:23 SQL> -- I created di5min here:
21:18:23 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:18:23 SQL> 
21:18:23 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:18:23   2  SELECT
21:18:23   3  pair
21:18:23   4  ,ydate
21:18:23   5  ,prdate
21:18:23   6  ,rownum rnum -- acts as t in my time-series
21:18:23   7  ,clse
21:18:23   8  -- Derive a bunch of attributes from clse, the latest price:
21:18:23   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:18:23  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:18:23  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:18:23  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:18:23  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:18:23  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:18:23  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:18:23  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:18:23  17  --
21:18:23  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:18:23  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:18:23  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:18:23  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:18:23  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:18:23  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:18:23  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:18:23  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:18:23  26  --
21:18:23  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:18:23  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:18:23  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:18:23  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:18:23  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:18:23  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:18:23  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:18:23  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:18:23  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:18:23  36  FROM di5min WHERE pair LIKE'%cad%'
21:18:23  37  AND ydate > sysdate - 95
21:18:23  38  ORDER BY ydate
21:18:23  39  /

View created.

Elapsed: 00:00:00.04
21:18:23 SQL> 
21:18:23 SQL> -- rpt
21:18:23 SQL> 
21:18:23 SQL> SELECT
21:18:23   2  pair
21:18:23   3  ,COUNT(pair)
21:18:23   4  ,MIN(clse),MAX(clse)
21:18:23   5  ,MIN(avg6),MAX(avg6)
21:18:23   6  ,MIN(ydate),MAX(ydate)
21:18:23   7  FROM svm6102
21:18:23   8  GROUP BY pair
21:18:23   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19812    .988925	   1.0355 .990602745 1.03282877 2010-10-03 21:20:01 2011-01-06 21:15:00

Elapsed: 00:00:00.87
21:18:24 SQL> 
21:18:24 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:18:24 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.28
21:18:24 SQL> CREATE TABLE svm6122 COMPRESS AS
21:18:24   2  SELECT
21:18:24   3  pair
21:18:24   4  ,ydate
21:18:24   5  ,prdate
21:18:24   6  ,clse
21:18:24   7  -- g6 is important. I want to predict g6:
21:18:24   8  ,ld6 - clse g6
21:18:24   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:18:24  10  -- I want more attributes from the ones I derived above:
21:18:24  11  -- clse relation to moving-min
21:18:24  12  ,clse-min4  cm4
21:18:24  13  ,clse-min6  cm6
21:18:24  14  ,clse-min8  cm8
21:18:24  15  ,clse-min10 cm10
21:18:24  16  ,clse-min12 cm12
21:18:24  17  ,clse-min14 cm14
21:18:24  18  ,clse-min16 cm16
21:18:24  19  ,clse-min18 cm18
21:18:24  20  -- clse relation to moving-avg
21:18:24  21  ,clse-avg4  ca4
21:18:24  22  ,clse-avg6  ca6
21:18:24  23  ,clse-avg8  ca8
21:18:24  24  ,clse-avg10 ca10
21:18:24  25  ,clse-avg12 ca12
21:18:24  26  ,clse-avg14 ca14
21:18:24  27  ,clse-avg16 ca16
21:18:24  28  ,clse-avg18 ca18
21:18:24  29  -- clse relation to moving-max
21:18:24  30  ,clse-max4  cx4
21:18:24  31  ,clse-max6  cx6
21:18:24  32  ,clse-max8  cx8
21:18:24  33  ,clse-max10 cx10
21:18:24  34  ,clse-max12 cx12
21:18:24  35  ,clse-max14 cx14
21:18:24  36  ,clse-max16 cx16
21:18:24  37  ,clse-max18 cx18
21:18:24  38  -- Derive more attributes.
21:18:24  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:18:24  40  -- But COVAR_POP is more stable:
21:18:24  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:18:24  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:18:24  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:18:24  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:18:24  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:18:24  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:18:24  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:18:24  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:18:24  49  -- Derive date related attributes:
21:18:24  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:18:24  51  ,0+TO_CHAR(ydate,'D')d
21:18:24  52  ,0+TO_CHAR(ydate,'W')w
21:18:24  53  -- mpm stands for minutes-past-midnight:
21:18:24  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:18:24  55  -- mph stands for minutes-past-hour:
21:18:24  56  ,0+TO_CHAR(ydate,'MI')mph
21:18:24  57  FROM svm6102
21:18:24  58  ORDER BY ydate
21:18:24  59  /

Table created.

Elapsed: 00:00:02.08
21:18:26 SQL> 
21:18:26 SQL> -- rpt
21:18:26 SQL> 
21:18:26 SQL> SELECT
21:18:26   2  pair
21:18:26   3  ,COUNT(pair)
21:18:26   4  ,MIN(clse),MAX(clse)
21:18:26   5  ,MIN(ydate),MAX(ydate)
21:18:26   6  FROM svm6122
21:18:26   7  GROUP BY pair
21:18:26   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19812    .988925	   1.0355 2010-10-03 21:20:01 2011-01-06 21:15:00

Elapsed: 00:00:00.04
21:18:26 SQL> 
21:18:26 SQL> -- Prepare for derivation of NTILE based params:
21:18:26 SQL> 
21:18:26 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.26
21:18:26 SQL> CREATE TABLE svm6142 COMPRESS AS
21:18:26   2  SELECT
21:18:26   3  pair
21:18:26   4  ,ydate
21:18:26   5  ,prdate
21:18:26   6  ,clse
21:18:26   7  ,g6
21:18:26   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:18:26   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:18:26  10  ,CASE WHEN trend IS NULL THEN 1
21:18:26  11  	    WHEN trend =0      THEN 1
21:18:26  12  	    ELSE trend END trend
21:18:26  13  ,cm4
21:18:26  14  ,cm6
21:18:26  15  ,cm8
21:18:26  16  ,cm10
21:18:26  17  ,cm12
21:18:26  18  ,cm14
21:18:26  19  ,cm16
21:18:26  20  ,cm18
21:18:26  21  --
21:18:26  22  ,ca4
21:18:26  23  ,ca6
21:18:26  24  ,ca8
21:18:26  25  ,ca10
21:18:26  26  ,ca12
21:18:26  27  ,ca14
21:18:26  28  ,ca16
21:18:26  29  ,ca18
21:18:26  30  --
21:18:26  31  ,cx4
21:18:26  32  ,cx6
21:18:26  33  ,cx8
21:18:26  34  ,cx10
21:18:26  35  ,cx12
21:18:26  36  ,cx14
21:18:26  37  ,cx16
21:18:26  38  ,cx18
21:18:26  39  --
21:18:26  40  ,crr4
21:18:26  41  ,crr6
21:18:26  42  ,crr8
21:18:26  43  ,crr10
21:18:26  44  ,crr12
21:18:26  45  ,crr14
21:18:26  46  ,crr16
21:18:26  47  ,crr18
21:18:26  48  --
21:18:26  49  ,hh
21:18:26  50  ,d
21:18:26  51  ,w
21:18:26  52  ,mpm
21:18:26  53  ,mph
21:18:26  54  FROM svm6122
21:18:26  55  ORDER BY ydate
21:18:26  56  /

Table created.

Elapsed: 00:00:00.39
21:18:27 SQL> 
21:18:27 SQL> -- rpt
21:18:27 SQL> 
21:18:27 SQL> SELECT
21:18:27   2  pair
21:18:27   3  ,trend
21:18:27   4  ,gatt
21:18:27   5  ,COUNT(pair)
21:18:27   6  ,AVG(g6)
21:18:27   7  FROM svm6142
21:18:27   8  GROUP BY pair,trend,gatt
21:18:27   9  ORDER BY pair,trend,gatt
21:18:27  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7322 -.00124137
usd_cad 	-1 up	      3183 .003050952
usd_cad 	-1		 3
usd_cad 	 1 nup	      6843 -.00160909
usd_cad 	 1 up	      2392 .003645117
usd_cad 	 1		69

6 rows selected.

Elapsed: 00:00:00.04
21:18:27 SQL> 
21:18:27 SQL> 
21:18:27 SQL> -- Derive NTILE based params:
21:18:27 SQL> 
21:18:27 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.19
21:18:27 SQL> CREATE TABLE svm6162 COMPRESS AS
21:18:27   2  SELECT
21:18:27   3  pair
21:18:27   4  ,ydate
21:18:27   5  ,prdate
21:18:27   6  ,clse
21:18:27   7  ,g6
21:18:27   8  ,gatt
21:18:27   9  ,gattn
21:18:27  10  ,trend
21:18:27  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:18:27  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:18:27  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:18:27  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:18:27  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:18:27  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:18:27  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:18:27  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:18:27  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:18:27  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:18:27  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:18:27  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:18:27  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:18:27  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:18:27  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:18:27  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:18:27  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:18:27  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:18:27  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:18:27  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:18:27  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:18:27  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:18:27  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:18:27  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:18:27  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:18:27  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:18:27  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:18:27  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:18:27  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:18:27  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:18:27  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:18:27  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:18:27  43  ,hh  att32
21:18:27  44  ,d   att33
21:18:27  45  ,w   att34
21:18:27  46  ,mpm att35
21:18:27  47  ,mph att36
21:18:27  48  ,trend att37
21:18:27  49  FROM svm6142
21:18:27  50  ORDER BY ydate
21:18:27  51  /

Table created.

Elapsed: 00:00:04.85
21:18:32 SQL> 
21:18:32 SQL> -- rpt
21:18:32 SQL> 
21:18:32 SQL> SELECT
21:18:32   2  pair
21:18:32   3  ,trend
21:18:32   4  ,gatt
21:18:32   5  ,COUNT(pair)
21:18:32   6  ,AVG(g6)
21:18:32   7  FROM svm6162
21:18:32   8  GROUP BY pair,trend,gatt
21:18:32   9  ORDER BY pair,trend,gatt
21:18:32  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7322 -.00124137
usd_cad 	-1 up	      3183 .003050952
usd_cad 	-1		 3
usd_cad 	 1 nup	      6843 -.00160909
usd_cad 	 1 up	      2392 .003645117
usd_cad 	 1		69

6 rows selected.

Elapsed: 00:00:00.03
21:18:32 SQL> 
21:18:32 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.20
21:18:32 SQL> CREATE TABLE modsrc COMPRESS AS
21:18:32   2  SELECT
21:18:32   3  pair
21:18:32   4  ,ydate
21:18:32   5  ,prdate
21:18:32   6  ,trend
21:18:32   7  ,g6
21:18:32   8  ,gatt
21:18:32   9  ,gattn
21:18:32  10  FROM svm6162
21:18:32  11  /

Table created.

Elapsed: 00:00:00.09
21:18:32 SQL> 
21:18:32 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.24
21:18:32 SQL> 
21:18:32 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.07
21:18:32 SQL> CREATE TABLE cad_ms610 COMPRESS AS
21:18:32   2  SELECT
21:18:32   3  ydate
21:18:32   4  ,trend cad_trend
21:18:32   5  ,g6    cad_g6
21:18:32   6  ,gatt  cad_gatt
21:18:32   7  ,gattn cad_gattn
21:18:32   8  FROM modsrc
21:18:32   9  /

Table created.

Elapsed: 00:00:00.07
21:18:33 SQL> 
21:18:33 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
21:18:33 SQL> 
21:18:33 SQL> -- I need a copy of the attributes:
21:18:33 SQL> 
21:18:33 SQL> 
21:18:33 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.06
21:18:33 SQL> CREATE TABLE cad_att COMPRESS AS
21:18:33   2  SELECT
21:18:33   3  ydate
21:18:33   4  ,att00 cad_att00
21:18:33   5  ,att01 cad_att01
21:18:33   6  ,att02 cad_att02
21:18:33   7  ,att03 cad_att03
21:18:33   8  ,att04 cad_att04
21:18:33   9  ,att05 cad_att05
21:18:33  10  ,att06 cad_att06
21:18:33  11  ,att07 cad_att07
21:18:33  12  ,att08 cad_att08
21:18:33  13  ,att09 cad_att09
21:18:33  14  ,att10 cad_att10
21:18:33  15  ,att11 cad_att11
21:18:33  16  ,att12 cad_att12
21:18:33  17  ,att13 cad_att13
21:18:33  18  ,att14 cad_att14
21:18:33  19  ,att15 cad_att15
21:18:33  20  ,att16 cad_att16
21:18:33  21  ,att17 cad_att17
21:18:33  22  ,att18 cad_att18
21:18:33  23  ,att19 cad_att19
21:18:33  24  ,att20 cad_att20
21:18:33  25  ,att21 cad_att21
21:18:33  26  ,att22 cad_att22
21:18:33  27  ,att23 cad_att23
21:18:33  28  ,att24 cad_att24
21:18:33  29  ,att25 cad_att25
21:18:33  30  ,att26 cad_att26
21:18:33  31  ,att27 cad_att27
21:18:33  32  ,att28 cad_att28
21:18:33  33  ,att29 cad_att29
21:18:33  34  ,att30 cad_att30
21:18:33  35  ,att31 cad_att31
21:18:33  36  ,att32 cad_att32
21:18:33  37  ,att33 cad_att33
21:18:33  38  ,att34 cad_att34
21:18:33  39  ,att35 cad_att35
21:18:33  40  ,att36 cad_att36
21:18:33  41  ,att37 cad_att37
21:18:33  42  FROM svm6162
21:18:33  43  /

Table created.

Elapsed: 00:00:00.19
21:18:33 SQL> 
21:18:33 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
21:18:33 SQL> 
21:18:33 SQL> -- rpt
21:18:33 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19812

Elapsed: 00:00:00.86
21:18:34 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19812

Elapsed: 00:00:00.01
21:18:34 SQL> 
21:18:34 SQL> --
21:18:34 SQL> -- chf610.sql
21:18:34 SQL> --
21:18:34 SQL> 
21:18:34 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:18:34 SQL> 
21:18:34 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.84
21:18:35 SQL> 
21:18:35 SQL> -- I created di5min here:
21:18:35 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:18:35 SQL> 
21:18:35 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:18:35   2  SELECT
21:18:35   3  pair
21:18:35   4  ,ydate
21:18:35   5  ,prdate
21:18:35   6  ,rownum rnum -- acts as t in my time-series
21:18:35   7  ,clse
21:18:35   8  -- Derive a bunch of attributes from clse, the latest price:
21:18:35   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:18:35  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:18:35  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:18:35  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:18:35  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:18:35  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:18:35  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:18:35  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:18:35  17  --
21:18:35  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:18:35  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:18:35  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:18:35  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:18:35  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:18:35  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:18:35  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:18:35  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:18:35  26  --
21:18:35  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:18:35  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:18:35  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:18:35  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:18:35  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:18:35  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:18:35  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:18:35  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:18:35  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:18:35  36  FROM di5min WHERE pair LIKE'%chf%'
21:18:35  37  AND ydate > sysdate - 95
21:18:35  38  ORDER BY ydate
21:18:35  39  /

View created.

Elapsed: 00:00:00.05
21:18:35 SQL> 
21:18:35 SQL> -- rpt
21:18:35 SQL> 
21:18:35 SQL> SELECT
21:18:35   2  pair
21:18:35   3  ,COUNT(pair)
21:18:35   4  ,MIN(clse),MAX(clse)
21:18:35   5  ,MIN(avg6),MAX(avg6)
21:18:35   6  ,MIN(ydate),MAX(ydate)
21:18:35   7  FROM svm6102
21:18:35   8  GROUP BY pair
21:18:35   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19815    .931675	  1.00635  .93325753 1.00498151 2010-10-03 21:20:01 2011-01-06 21:15:00

Elapsed: 00:00:00.92
21:18:36 SQL> 
21:18:36 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:18:36 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.23
21:18:36 SQL> CREATE TABLE svm6122 COMPRESS AS
21:18:36   2  SELECT
21:18:36   3  pair
21:18:36   4  ,ydate
21:18:36   5  ,prdate
21:18:36   6  ,clse
21:18:36   7  -- g6 is important. I want to predict g6:
21:18:36   8  ,ld6 - clse g6
21:18:36   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:18:36  10  -- I want more attributes from the ones I derived above:
21:18:36  11  -- clse relation to moving-min
21:18:36  12  ,clse-min4  cm4
21:18:36  13  ,clse-min6  cm6
21:18:36  14  ,clse-min8  cm8
21:18:36  15  ,clse-min10 cm10
21:18:36  16  ,clse-min12 cm12
21:18:36  17  ,clse-min14 cm14
21:18:36  18  ,clse-min16 cm16
21:18:36  19  ,clse-min18 cm18
21:18:36  20  -- clse relation to moving-avg
21:18:36  21  ,clse-avg4  ca4
21:18:36  22  ,clse-avg6  ca6
21:18:36  23  ,clse-avg8  ca8
21:18:36  24  ,clse-avg10 ca10
21:18:36  25  ,clse-avg12 ca12
21:18:36  26  ,clse-avg14 ca14
21:18:36  27  ,clse-avg16 ca16
21:18:36  28  ,clse-avg18 ca18
21:18:36  29  -- clse relation to moving-max
21:18:36  30  ,clse-max4  cx4
21:18:36  31  ,clse-max6  cx6
21:18:36  32  ,clse-max8  cx8
21:18:36  33  ,clse-max10 cx10
21:18:36  34  ,clse-max12 cx12
21:18:36  35  ,clse-max14 cx14
21:18:36  36  ,clse-max16 cx16
21:18:36  37  ,clse-max18 cx18
21:18:36  38  -- Derive more attributes.
21:18:36  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:18:36  40  -- But COVAR_POP is more stable:
21:18:36  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:18:36  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:18:36  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:18:36  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:18:36  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:18:36  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:18:36  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:18:36  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:18:36  49  -- Derive date related attributes:
21:18:36  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:18:36  51  ,0+TO_CHAR(ydate,'D')d
21:18:36  52  ,0+TO_CHAR(ydate,'W')w
21:18:36  53  -- mpm stands for minutes-past-midnight:
21:18:36  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:18:36  55  -- mph stands for minutes-past-hour:
21:18:36  56  ,0+TO_CHAR(ydate,'MI')mph
21:18:36  57  FROM svm6102
21:18:36  58  ORDER BY ydate
21:18:36  59  /

Table created.

Elapsed: 00:00:02.15
21:18:39 SQL> 
21:18:39 SQL> -- rpt
21:18:39 SQL> 
21:18:39 SQL> SELECT
21:18:39   2  pair
21:18:39   3  ,COUNT(pair)
21:18:39   4  ,MIN(clse),MAX(clse)
21:18:39   5  ,MIN(ydate),MAX(ydate)
21:18:39   6  FROM svm6122
21:18:39   7  GROUP BY pair
21:18:39   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19815    .931675	  1.00635 2010-10-03 21:20:01 2011-01-06 21:15:00

Elapsed: 00:00:00.08
21:18:39 SQL> 
21:18:39 SQL> -- Prepare for derivation of NTILE based params:
21:18:39 SQL> 
21:18:39 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.29
21:18:39 SQL> CREATE TABLE svm6142 COMPRESS AS
21:18:39   2  SELECT
21:18:39   3  pair
21:18:39   4  ,ydate
21:18:39   5  ,prdate
21:18:39   6  ,clse
21:18:39   7  ,g6
21:18:39   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:18:39   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:18:39  10  ,CASE WHEN trend IS NULL THEN 1
21:18:39  11  	    WHEN trend =0      THEN 1
21:18:39  12  	    ELSE trend END trend
21:18:39  13  ,cm4
21:18:39  14  ,cm6
21:18:39  15  ,cm8
21:18:39  16  ,cm10
21:18:39  17  ,cm12
21:18:39  18  ,cm14
21:18:39  19  ,cm16
21:18:39  20  ,cm18
21:18:39  21  --
21:18:39  22  ,ca4
21:18:39  23  ,ca6
21:18:39  24  ,ca8
21:18:39  25  ,ca10
21:18:39  26  ,ca12
21:18:39  27  ,ca14
21:18:39  28  ,ca16
21:18:39  29  ,ca18
21:18:39  30  --
21:18:39  31  ,cx4
21:18:39  32  ,cx6
21:18:39  33  ,cx8
21:18:39  34  ,cx10
21:18:39  35  ,cx12
21:18:39  36  ,cx14
21:18:39  37  ,cx16
21:18:39  38  ,cx18
21:18:39  39  --
21:18:39  40  ,crr4
21:18:39  41  ,crr6
21:18:39  42  ,crr8
21:18:39  43  ,crr10
21:18:39  44  ,crr12
21:18:39  45  ,crr14
21:18:39  46  ,crr16
21:18:39  47  ,crr18
21:18:39  48  --
21:18:39  49  ,hh
21:18:39  50  ,d
21:18:39  51  ,w
21:18:39  52  ,mpm
21:18:39  53  ,mph
21:18:39  54  FROM svm6122
21:18:39  55  ORDER BY ydate
21:18:39  56  /

Table created.

Elapsed: 00:00:00.38
21:18:39 SQL> 
21:18:39 SQL> -- rpt
21:18:39 SQL> 
21:18:39 SQL> SELECT
21:18:39   2  pair
21:18:39   3  ,trend
21:18:39   4  ,gatt
21:18:39   5  ,COUNT(pair)
21:18:39   6  ,AVG(g6)
21:18:39   7  FROM svm6142
21:18:39   8  GROUP BY pair,trend,gatt
21:18:39   9  ORDER BY pair,trend,gatt
21:18:39  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7114 -.00198575
usd_chf 	-1 up	      3072 .003819474
usd_chf 	-1		61
usd_chf 	 1 nup	      6584 -.00154437
usd_chf 	 1 up	      2973 .003941846
usd_chf 	 1		11

6 rows selected.

Elapsed: 00:00:00.03
21:18:39 SQL> 
21:18:39 SQL> 
21:18:39 SQL> -- Derive NTILE based params:
21:18:39 SQL> 
21:18:39 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.28
21:18:40 SQL> CREATE TABLE svm6162 COMPRESS AS
21:18:40   2  SELECT
21:18:40   3  pair
21:18:40   4  ,ydate
21:18:40   5  ,prdate
21:18:40   6  ,clse
21:18:40   7  ,g6
21:18:40   8  ,gatt
21:18:40   9  ,gattn
21:18:40  10  ,trend
21:18:40  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:18:40  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:18:40  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:18:40  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:18:40  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:18:40  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:18:40  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:18:40  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:18:40  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:18:40  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:18:40  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:18:40  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:18:40  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:18:40  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:18:40  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:18:40  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:18:40  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:18:40  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:18:40  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:18:40  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:18:40  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:18:40  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:18:40  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:18:40  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:18:40  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:18:40  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:18:40  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:18:40  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:18:40  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:18:40  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:18:40  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:18:40  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:18:40  43  ,hh  att32
21:18:40  44  ,d   att33
21:18:40  45  ,w   att34
21:18:40  46  ,mpm att35
21:18:40  47  ,mph att36
21:18:40  48  ,trend att37
21:18:40  49  FROM svm6142
21:18:40  50  ORDER BY ydate
21:18:40  51  /

Table created.

Elapsed: 00:00:04.80
21:18:44 SQL> 
21:18:44 SQL> -- rpt
21:18:44 SQL> 
21:18:44 SQL> SELECT
21:18:44   2  pair
21:18:44   3  ,trend
21:18:44   4  ,gatt
21:18:44   5  ,COUNT(pair)
21:18:44   6  ,AVG(g6)
21:18:44   7  FROM svm6162
21:18:44   8  GROUP BY pair,trend,gatt
21:18:44   9  ORDER BY pair,trend,gatt
21:18:44  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7114 -.00198575
usd_chf 	-1 up	      3072 .003819474
usd_chf 	-1		61
usd_chf 	 1 nup	      6584 -.00154437
usd_chf 	 1 up	      2973 .003941846
usd_chf 	 1		11

6 rows selected.

Elapsed: 00:00:00.03
21:18:44 SQL> 
21:18:44 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
21:18:45 SQL> CREATE TABLE modsrc COMPRESS AS
21:18:45   2  SELECT
21:18:45   3  pair
21:18:45   4  ,ydate
21:18:45   5  ,prdate
21:18:45   6  ,trend
21:18:45   7  ,g6
21:18:45   8  ,gatt
21:18:45   9  ,gattn
21:18:45  10  FROM svm6162
21:18:45  11  /

Table created.

Elapsed: 00:00:00.08
21:18:45 SQL> 
21:18:45 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
21:18:45 SQL> 
21:18:45 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.03
21:18:45 SQL> CREATE TABLE chf_ms610 COMPRESS AS
21:18:45   2  SELECT
21:18:45   3  ydate
21:18:45   4  ,trend chf_trend
21:18:45   5  ,g6    chf_g6
21:18:45   6  ,gatt  chf_gatt
21:18:45   7  ,gattn chf_gattn
21:18:45   8  FROM modsrc
21:18:45   9  /

Table created.

Elapsed: 00:00:00.07
21:18:45 SQL> 
21:18:45 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
21:18:45 SQL> 
21:18:45 SQL> -- I need a copy of the attributes:
21:18:45 SQL> 
21:18:45 SQL> 
21:18:45 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.04
21:18:45 SQL> CREATE TABLE chf_att COMPRESS AS
21:18:45   2  SELECT
21:18:45   3  ydate
21:18:45   4  ,att00 chf_att00
21:18:45   5  ,att01 chf_att01
21:18:45   6  ,att02 chf_att02
21:18:45   7  ,att03 chf_att03
21:18:45   8  ,att04 chf_att04
21:18:45   9  ,att05 chf_att05
21:18:45  10  ,att06 chf_att06
21:18:45  11  ,att07 chf_att07
21:18:45  12  ,att08 chf_att08
21:18:45  13  ,att09 chf_att09
21:18:45  14  ,att10 chf_att10
21:18:45  15  ,att11 chf_att11
21:18:45  16  ,att12 chf_att12
21:18:45  17  ,att13 chf_att13
21:18:45  18  ,att14 chf_att14
21:18:45  19  ,att15 chf_att15
21:18:45  20  ,att16 chf_att16
21:18:45  21  ,att17 chf_att17
21:18:45  22  ,att18 chf_att18
21:18:45  23  ,att19 chf_att19
21:18:45  24  ,att20 chf_att20
21:18:45  25  ,att21 chf_att21
21:18:45  26  ,att22 chf_att22
21:18:45  27  ,att23 chf_att23
21:18:45  28  ,att24 chf_att24
21:18:45  29  ,att25 chf_att25
21:18:45  30  ,att26 chf_att26
21:18:45  31  ,att27 chf_att27
21:18:45  32  ,att28 chf_att28
21:18:45  33  ,att29 chf_att29
21:18:45  34  ,att30 chf_att30
21:18:45  35  ,att31 chf_att31
21:18:45  36  ,att32 chf_att32
21:18:45  37  ,att33 chf_att33
21:18:45  38  ,att34 chf_att34
21:18:45  39  ,att35 chf_att35
21:18:45  40  ,att36 chf_att36
21:18:45  41  ,att37 chf_att37
21:18:45  42  FROM svm6162
21:18:45  43  /

Table created.

Elapsed: 00:00:00.17
21:18:45 SQL> 
21:18:45 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
21:18:46 SQL> 
21:18:46 SQL> -- rpt
21:18:46 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19815

Elapsed: 00:00:00.86
21:18:47 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19815

Elapsed: 00:00:00.00
21:18:47 SQL> 
21:18:47 SQL> --
21:18:47 SQL> -- ech610.sql
21:18:47 SQL> --
21:18:47 SQL> 
21:18:47 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:18:47 SQL> 
21:18:47 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.57
21:18:47 SQL> 
21:18:47 SQL> -- I created di5min here:
21:18:47 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:18:47 SQL> 
21:18:47 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:18:47   2  SELECT
21:18:47   3  pair
21:18:47   4  ,ydate
21:18:47   5  ,prdate
21:18:47   6  ,rownum rnum -- acts as t in my time-series
21:18:47   7  ,clse
21:18:47   8  -- Derive a bunch of attributes from clse, the latest price:
21:18:47   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:18:47  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:18:47  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:18:47  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:18:47  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:18:47  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:18:47  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:18:47  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:18:47  17  --
21:18:47  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:18:47  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:18:47  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:18:47  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:18:47  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:18:47  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:18:47  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:18:47  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:18:47  26  --
21:18:47  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:18:47  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:18:47  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:18:47  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:18:47  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:18:47  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:18:47  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:18:47  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:18:47  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:18:47  36  FROM di5min WHERE pair LIKE'%ech%'
21:18:47  37  AND ydate > sysdate - 95
21:18:47  38  ORDER BY ydate
21:18:47  39  /

View created.

Elapsed: 00:00:00.06
21:18:47 SQL> 
21:18:47 SQL> -- rpt
21:18:47 SQL> 
21:18:47 SQL> SELECT
21:18:47   2  pair
21:18:47   3  ,COUNT(pair)
21:18:47   4  ,MIN(clse),MAX(clse)
21:18:47   5  ,MIN(avg6),MAX(avg6)
21:18:47   6  ,MIN(ydate),MAX(ydate)
21:18:47   7  FROM svm6102
21:18:47   8  GROUP BY pair
21:18:47   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19813 1.24182424 1.38284305 1.24320711 1.37986485 2010-10-03 21:20:01 2011-01-06 21:15:00

Elapsed: 00:00:00.79
21:18:48 SQL> 
21:18:48 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:18:48 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.27
21:18:48 SQL> CREATE TABLE svm6122 COMPRESS AS
21:18:48   2  SELECT
21:18:48   3  pair
21:18:48   4  ,ydate
21:18:48   5  ,prdate
21:18:48   6  ,clse
21:18:48   7  -- g6 is important. I want to predict g6:
21:18:48   8  ,ld6 - clse g6
21:18:48   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:18:48  10  -- I want more attributes from the ones I derived above:
21:18:48  11  -- clse relation to moving-min
21:18:48  12  ,clse-min4  cm4
21:18:48  13  ,clse-min6  cm6
21:18:48  14  ,clse-min8  cm8
21:18:48  15  ,clse-min10 cm10
21:18:48  16  ,clse-min12 cm12
21:18:48  17  ,clse-min14 cm14
21:18:48  18  ,clse-min16 cm16
21:18:48  19  ,clse-min18 cm18
21:18:48  20  -- clse relation to moving-avg
21:18:48  21  ,clse-avg4  ca4
21:18:48  22  ,clse-avg6  ca6
21:18:48  23  ,clse-avg8  ca8
21:18:48  24  ,clse-avg10 ca10
21:18:48  25  ,clse-avg12 ca12
21:18:48  26  ,clse-avg14 ca14
21:18:48  27  ,clse-avg16 ca16
21:18:48  28  ,clse-avg18 ca18
21:18:48  29  -- clse relation to moving-max
21:18:48  30  ,clse-max4  cx4
21:18:48  31  ,clse-max6  cx6
21:18:48  32  ,clse-max8  cx8
21:18:48  33  ,clse-max10 cx10
21:18:48  34  ,clse-max12 cx12
21:18:48  35  ,clse-max14 cx14
21:18:48  36  ,clse-max16 cx16
21:18:48  37  ,clse-max18 cx18
21:18:48  38  -- Derive more attributes.
21:18:48  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:18:48  40  -- But COVAR_POP is more stable:
21:18:48  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:18:48  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:18:48  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:18:48  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:18:48  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:18:48  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:18:48  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:18:48  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:18:48  49  -- Derive date related attributes:
21:18:48  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:18:48  51  ,0+TO_CHAR(ydate,'D')d
21:18:48  52  ,0+TO_CHAR(ydate,'W')w
21:18:48  53  -- mpm stands for minutes-past-midnight:
21:18:48  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:18:48  55  -- mph stands for minutes-past-hour:
21:18:48  56  ,0+TO_CHAR(ydate,'MI')mph
21:18:48  57  FROM svm6102
21:18:48  58  ORDER BY ydate
21:18:48  59  /

Table created.

Elapsed: 00:00:02.13
21:18:50 SQL> 
21:18:50 SQL> -- rpt
21:18:50 SQL> 
21:18:50 SQL> SELECT
21:18:50   2  pair
21:18:50   3  ,COUNT(pair)
21:18:50   4  ,MIN(clse),MAX(clse)
21:18:50   5  ,MIN(ydate),MAX(ydate)
21:18:50   6  FROM svm6122
21:18:50   7  GROUP BY pair
21:18:50   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19813 1.24182424 1.38284305 2010-10-03 21:20:01 2011-01-06 21:15:00

Elapsed: 00:00:00.04
21:18:50 SQL> 
21:18:50 SQL> -- Prepare for derivation of NTILE based params:
21:18:50 SQL> 
21:18:50 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.41
21:18:51 SQL> CREATE TABLE svm6142 COMPRESS AS
21:18:51   2  SELECT
21:18:51   3  pair
21:18:51   4  ,ydate
21:18:51   5  ,prdate
21:18:51   6  ,clse
21:18:51   7  ,g6
21:18:51   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:18:51   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:18:51  10  ,CASE WHEN trend IS NULL THEN 1
21:18:51  11  	    WHEN trend =0      THEN 1
21:18:51  12  	    ELSE trend END trend
21:18:51  13  ,cm4
21:18:51  14  ,cm6
21:18:51  15  ,cm8
21:18:51  16  ,cm10
21:18:51  17  ,cm12
21:18:51  18  ,cm14
21:18:51  19  ,cm16
21:18:51  20  ,cm18
21:18:51  21  --
21:18:51  22  ,ca4
21:18:51  23  ,ca6
21:18:51  24  ,ca8
21:18:51  25  ,ca10
21:18:51  26  ,ca12
21:18:51  27  ,ca14
21:18:51  28  ,ca16
21:18:51  29  ,ca18
21:18:51  30  --
21:18:51  31  ,cx4
21:18:51  32  ,cx6
21:18:51  33  ,cx8
21:18:51  34  ,cx10
21:18:51  35  ,cx12
21:18:51  36  ,cx14
21:18:51  37  ,cx16
21:18:51  38  ,cx18
21:18:51  39  --
21:18:51  40  ,crr4
21:18:51  41  ,crr6
21:18:51  42  ,crr8
21:18:51  43  ,crr10
21:18:51  44  ,crr12
21:18:51  45  ,crr14
21:18:51  46  ,crr16
21:18:51  47  ,crr18
21:18:51  48  --
21:18:51  49  ,hh
21:18:51  50  ,d
21:18:51  51  ,w
21:18:51  52  ,mpm
21:18:51  53  ,mph
21:18:51  54  FROM svm6122
21:18:51  55  ORDER BY ydate
21:18:51  56  /

Table created.

Elapsed: 00:00:00.39
21:18:51 SQL> 
21:18:51 SQL> -- rpt
21:18:51 SQL> 
21:18:51 SQL> SELECT
21:18:51   2  pair
21:18:51   3  ,trend
21:18:51   4  ,gatt
21:18:51   5  ,COUNT(pair)
21:18:51   6  ,AVG(g6)
21:18:51   7  FROM svm6142
21:18:51   8  GROUP BY pair,trend,gatt
21:18:51   9  ORDER BY pair,trend,gatt
21:18:51  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6796 -.00231355
ech_usd 	-1 up	      3581 .003574519
ech_usd 	-1		72
ech_usd 	 1 nup	      6459 -.00238697
ech_usd 	 1 up	      2905 .004122748

Elapsed: 00:00:00.03
21:18:51 SQL> 
21:18:51 SQL> 
21:18:51 SQL> -- Derive NTILE based params:
21:18:51 SQL> 
21:18:51 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.19
21:18:52 SQL> CREATE TABLE svm6162 COMPRESS AS
21:18:52   2  SELECT
21:18:52   3  pair
21:18:52   4  ,ydate
21:18:52   5  ,prdate
21:18:52   6  ,clse
21:18:52   7  ,g6
21:18:52   8  ,gatt
21:18:52   9  ,gattn
21:18:52  10  ,trend
21:18:52  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:18:52  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:18:52  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:18:52  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:18:52  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:18:52  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:18:52  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:18:52  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:18:52  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:18:52  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:18:52  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:18:52  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:18:52  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:18:52  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:18:52  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:18:52  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:18:52  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:18:52  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:18:52  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:18:52  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:18:52  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:18:52  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:18:52  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:18:52  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:18:52  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:18:52  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:18:52  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:18:52  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:18:52  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:18:52  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:18:52  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:18:52  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:18:52  43  ,hh  att32
21:18:52  44  ,d   att33
21:18:52  45  ,w   att34
21:18:52  46  ,mpm att35
21:18:52  47  ,mph att36
21:18:52  48  ,trend att37
21:18:52  49  FROM svm6142
21:18:52  50  ORDER BY ydate
21:18:52  51  /

Table created.

Elapsed: 00:00:04.93
21:18:56 SQL> 
21:18:56 SQL> -- rpt
21:18:56 SQL> 
21:18:56 SQL> SELECT
21:18:56   2  pair
21:18:56   3  ,trend
21:18:56   4  ,gatt
21:18:56   5  ,COUNT(pair)
21:18:56   6  ,AVG(g6)
21:18:56   7  FROM svm6162
21:18:56   8  GROUP BY pair,trend,gatt
21:18:56   9  ORDER BY pair,trend,gatt
21:18:56  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6796 -.00231355
ech_usd 	-1 up	      3581 .003574519
ech_usd 	-1		72
ech_usd 	 1 nup	      6459 -.00238697
ech_usd 	 1 up	      2905 .004122748

Elapsed: 00:00:00.03
21:18:56 SQL> 
21:18:56 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
21:18:57 SQL> CREATE TABLE modsrc COMPRESS AS
21:18:57   2  SELECT
21:18:57   3  pair
21:18:57   4  ,ydate
21:18:57   5  ,prdate
21:18:57   6  ,trend
21:18:57   7  ,g6
21:18:57   8  ,gatt
21:18:57   9  ,gattn
21:18:57  10  FROM svm6162
21:18:57  11  /

Table created.

Elapsed: 00:00:00.09
21:18:57 SQL> 
21:18:57 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
21:18:57 SQL> 
21:18:57 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
21:18:57 SQL> CREATE TABLE ech_ms610 COMPRESS AS
21:18:57   2  SELECT
21:18:57   3  ydate
21:18:57   4  ,trend ech_trend
21:18:57   5  ,g6    ech_g6
21:18:57   6  ,gatt  ech_gatt
21:18:57   7  ,gattn ech_gattn
21:18:57   8  FROM modsrc
21:18:57   9  /

Table created.

Elapsed: 00:00:00.07
21:18:57 SQL> 
21:18:57 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
21:18:57 SQL> 
21:18:57 SQL> -- I need a copy of the attributes:
21:18:57 SQL> 
21:18:57 SQL> 
21:18:57 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.06
21:18:57 SQL> CREATE TABLE ech_att COMPRESS AS
21:18:57   2  SELECT
21:18:57   3  ydate
21:18:57   4  ,att00 ech_att00
21:18:57   5  ,att01 ech_att01
21:18:57   6  ,att02 ech_att02
21:18:57   7  ,att03 ech_att03
21:18:57   8  ,att04 ech_att04
21:18:57   9  ,att05 ech_att05
21:18:57  10  ,att06 ech_att06
21:18:57  11  ,att07 ech_att07
21:18:57  12  ,att08 ech_att08
21:18:57  13  ,att09 ech_att09
21:18:57  14  ,att10 ech_att10
21:18:57  15  ,att11 ech_att11
21:18:57  16  ,att12 ech_att12
21:18:57  17  ,att13 ech_att13
21:18:57  18  ,att14 ech_att14
21:18:57  19  ,att15 ech_att15
21:18:57  20  ,att16 ech_att16
21:18:57  21  ,att17 ech_att17
21:18:57  22  ,att18 ech_att18
21:18:57  23  ,att19 ech_att19
21:18:57  24  ,att20 ech_att20
21:18:57  25  ,att21 ech_att21
21:18:57  26  ,att22 ech_att22
21:18:57  27  ,att23 ech_att23
21:18:57  28  ,att24 ech_att24
21:18:57  29  ,att25 ech_att25
21:18:57  30  ,att26 ech_att26
21:18:57  31  ,att27 ech_att27
21:18:57  32  ,att28 ech_att28
21:18:57  33  ,att29 ech_att29
21:18:57  34  ,att30 ech_att30
21:18:57  35  ,att31 ech_att31
21:18:57  36  ,att32 ech_att32
21:18:57  37  ,att33 ech_att33
21:18:57  38  ,att34 ech_att34
21:18:57  39  ,att35 ech_att35
21:18:57  40  ,att36 ech_att36
21:18:57  41  ,att37 ech_att37
21:18:57  42  FROM svm6162
21:18:57  43  /

Table created.

Elapsed: 00:00:00.17
21:18:57 SQL> 
21:18:57 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
21:18:58 SQL> 
21:18:58 SQL> -- rpt
21:18:58 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19813

Elapsed: 00:00:00.82
21:18:59 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19813

Elapsed: 00:00:00.00
21:18:59 SQL> 
21:18:59 SQL> --
21:18:59 SQL> -- egb610.sql
21:18:59 SQL> --
21:18:59 SQL> 
21:18:59 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:18:59 SQL> 
21:18:59 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.45
21:18:59 SQL> 
21:18:59 SQL> -- I created di5min here:
21:18:59 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:18:59 SQL> 
21:18:59 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:18:59   2  SELECT
21:18:59   3  pair
21:18:59   4  ,ydate
21:18:59   5  ,prdate
21:18:59   6  ,rownum rnum -- acts as t in my time-series
21:18:59   7  ,clse
21:18:59   8  -- Derive a bunch of attributes from clse, the latest price:
21:18:59   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:18:59  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:18:59  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:18:59  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:18:59  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:18:59  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:18:59  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:18:59  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:18:59  17  --
21:18:59  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:18:59  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:18:59  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:18:59  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:18:59  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:18:59  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:18:59  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:18:59  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:18:59  26  --
21:18:59  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:18:59  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:18:59  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:18:59  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:18:59  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:18:59  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:18:59  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:18:59  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:18:59  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:18:59  36  FROM di5min WHERE pair LIKE'%egb%'
21:18:59  37  AND ydate > sysdate - 95
21:18:59  38  ORDER BY ydate
21:18:59  39  /

View created.

Elapsed: 00:00:00.05
21:18:59 SQL> 
21:18:59 SQL> -- rpt
21:18:59 SQL> 
21:18:59 SQL> SELECT
21:18:59   2  pair
21:18:59   3  ,COUNT(pair)
21:18:59   4  ,MIN(clse),MAX(clse)
21:18:59   5  ,MIN(avg6),MAX(avg6)
21:18:59   6  ,MIN(ydate),MAX(ydate)
21:18:59   7  FROM svm6102
21:18:59   8  GROUP BY pair
21:18:59   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19812 .833520557 .893920122 .834199029 .892400287 2010-10-03 21:20:01 2011-01-06 21:15:00

Elapsed: 00:00:00.97
21:19:00 SQL> 
21:19:00 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:19:00 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.25
21:19:00 SQL> CREATE TABLE svm6122 COMPRESS AS
21:19:00   2  SELECT
21:19:00   3  pair
21:19:00   4  ,ydate
21:19:00   5  ,prdate
21:19:00   6  ,clse
21:19:00   7  -- g6 is important. I want to predict g6:
21:19:00   8  ,ld6 - clse g6
21:19:00   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:19:00  10  -- I want more attributes from the ones I derived above:
21:19:00  11  -- clse relation to moving-min
21:19:00  12  ,clse-min4  cm4
21:19:00  13  ,clse-min6  cm6
21:19:00  14  ,clse-min8  cm8
21:19:00  15  ,clse-min10 cm10
21:19:00  16  ,clse-min12 cm12
21:19:00  17  ,clse-min14 cm14
21:19:00  18  ,clse-min16 cm16
21:19:00  19  ,clse-min18 cm18
21:19:00  20  -- clse relation to moving-avg
21:19:00  21  ,clse-avg4  ca4
21:19:00  22  ,clse-avg6  ca6
21:19:00  23  ,clse-avg8  ca8
21:19:00  24  ,clse-avg10 ca10
21:19:00  25  ,clse-avg12 ca12
21:19:00  26  ,clse-avg14 ca14
21:19:00  27  ,clse-avg16 ca16
21:19:00  28  ,clse-avg18 ca18
21:19:00  29  -- clse relation to moving-max
21:19:00  30  ,clse-max4  cx4
21:19:00  31  ,clse-max6  cx6
21:19:00  32  ,clse-max8  cx8
21:19:00  33  ,clse-max10 cx10
21:19:00  34  ,clse-max12 cx12
21:19:00  35  ,clse-max14 cx14
21:19:00  36  ,clse-max16 cx16
21:19:00  37  ,clse-max18 cx18
21:19:00  38  -- Derive more attributes.
21:19:00  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:19:00  40  -- But COVAR_POP is more stable:
21:19:00  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:19:00  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:19:00  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:19:00  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:19:00  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:19:00  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:19:00  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:19:00  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:19:00  49  -- Derive date related attributes:
21:19:00  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:19:00  51  ,0+TO_CHAR(ydate,'D')d
21:19:00  52  ,0+TO_CHAR(ydate,'W')w
21:19:00  53  -- mpm stands for minutes-past-midnight:
21:19:00  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:19:00  55  -- mph stands for minutes-past-hour:
21:19:00  56  ,0+TO_CHAR(ydate,'MI')mph
21:19:00  57  FROM svm6102
21:19:00  58  ORDER BY ydate
21:19:00  59  /

Table created.

Elapsed: 00:00:02.55
21:19:03 SQL> 
21:19:03 SQL> -- rpt
21:19:03 SQL> 
21:19:03 SQL> SELECT
21:19:03   2  pair
21:19:03   3  ,COUNT(pair)
21:19:03   4  ,MIN(clse),MAX(clse)
21:19:03   5  ,MIN(ydate),MAX(ydate)
21:19:03   6  FROM svm6122
21:19:03   7  GROUP BY pair
21:19:03   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19812 .833520557 .893920122 2010-10-03 21:20:01 2011-01-06 21:15:00

Elapsed: 00:00:00.04
21:19:03 SQL> 
21:19:03 SQL> -- Prepare for derivation of NTILE based params:
21:19:03 SQL> 
21:19:03 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.39
21:19:03 SQL> CREATE TABLE svm6142 COMPRESS AS
21:19:03   2  SELECT
21:19:03   3  pair
21:19:03   4  ,ydate
21:19:03   5  ,prdate
21:19:03   6  ,clse
21:19:03   7  ,g6
21:19:03   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:19:03   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:19:03  10  ,CASE WHEN trend IS NULL THEN 1
21:19:03  11  	    WHEN trend =0      THEN 1
21:19:03  12  	    ELSE trend END trend
21:19:03  13  ,cm4
21:19:03  14  ,cm6
21:19:03  15  ,cm8
21:19:03  16  ,cm10
21:19:03  17  ,cm12
21:19:03  18  ,cm14
21:19:03  19  ,cm16
21:19:03  20  ,cm18
21:19:03  21  --
21:19:03  22  ,ca4
21:19:03  23  ,ca6
21:19:03  24  ,ca8
21:19:03  25  ,ca10
21:19:03  26  ,ca12
21:19:03  27  ,ca14
21:19:03  28  ,ca16
21:19:03  29  ,ca18
21:19:03  30  --
21:19:03  31  ,cx4
21:19:03  32  ,cx6
21:19:03  33  ,cx8
21:19:03  34  ,cx10
21:19:03  35  ,cx12
21:19:03  36  ,cx14
21:19:03  37  ,cx16
21:19:03  38  ,cx18
21:19:03  39  --
21:19:03  40  ,crr4
21:19:03  41  ,crr6
21:19:03  42  ,crr8
21:19:03  43  ,crr10
21:19:03  44  ,crr12
21:19:03  45  ,crr14
21:19:03  46  ,crr16
21:19:03  47  ,crr18
21:19:03  48  --
21:19:03  49  ,hh
21:19:03  50  ,d
21:19:03  51  ,w
21:19:03  52  ,mpm
21:19:03  53  ,mph
21:19:03  54  FROM svm6122
21:19:03  55  ORDER BY ydate
21:19:03  56  /

Table created.

Elapsed: 00:00:00.44
21:19:04 SQL> 
21:19:04 SQL> -- rpt
21:19:04 SQL> 
21:19:04 SQL> SELECT
21:19:04   2  pair
21:19:04   3  ,trend
21:19:04   4  ,gatt
21:19:04   5  ,COUNT(pair)
21:19:04   6  ,AVG(g6)
21:19:04   7  FROM svm6142
21:19:04   8  GROUP BY pair,trend,gatt
21:19:04   9  ORDER BY pair,trend,gatt
21:19:04  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7972 -.00107003
egb_usd 	-1 up	      2636 .002928295
egb_usd 	-1		72
egb_usd 	 1 nup	      6515 -.00138259
egb_usd 	 1 up	      2617   .0029282

Elapsed: 00:00:00.05
21:19:04 SQL> 
21:19:04 SQL> 
21:19:04 SQL> -- Derive NTILE based params:
21:19:04 SQL> 
21:19:04 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.37
21:19:04 SQL> CREATE TABLE svm6162 COMPRESS AS
21:19:04   2  SELECT
21:19:04   3  pair
21:19:04   4  ,ydate
21:19:04   5  ,prdate
21:19:04   6  ,clse
21:19:04   7  ,g6
21:19:04   8  ,gatt
21:19:04   9  ,gattn
21:19:04  10  ,trend
21:19:04  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:19:04  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:19:04  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:19:04  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:19:04  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:19:04  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:19:04  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:19:04  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:19:04  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:19:04  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:19:04  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:19:04  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:19:04  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:19:04  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:19:04  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:19:04  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:19:04  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:19:04  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:19:04  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:19:04  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:19:04  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:19:04  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:19:04  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:19:04  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:19:04  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:19:04  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:19:04  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:19:04  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:19:04  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:19:04  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:19:04  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:19:04  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:19:04  43  ,hh  att32
21:19:04  44  ,d   att33
21:19:04  45  ,w   att34
21:19:04  46  ,mpm att35
21:19:04  47  ,mph att36
21:19:04  48  ,trend att37
21:19:04  49  FROM svm6142
21:19:04  50  ORDER BY ydate
21:19:04  51  /

Table created.

Elapsed: 00:00:05.74
21:19:10 SQL> 
21:19:10 SQL> -- rpt
21:19:10 SQL> 
21:19:10 SQL> SELECT
21:19:10   2  pair
21:19:10   3  ,trend
21:19:10   4  ,gatt
21:19:10   5  ,COUNT(pair)
21:19:10   6  ,AVG(g6)
21:19:10   7  FROM svm6162
21:19:10   8  GROUP BY pair,trend,gatt
21:19:10   9  ORDER BY pair,trend,gatt
21:19:10  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7972 -.00107003
egb_usd 	-1 up	      2636 .002928295
egb_usd 	-1		72
egb_usd 	 1 nup	      6515 -.00138259
egb_usd 	 1 up	      2617   .0029282

Elapsed: 00:00:00.04
21:19:10 SQL> 
21:19:10 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
21:19:10 SQL> CREATE TABLE modsrc COMPRESS AS
21:19:10   2  SELECT
21:19:10   3  pair
21:19:10   4  ,ydate
21:19:10   5  ,prdate
21:19:10   6  ,trend
21:19:10   7  ,g6
21:19:10   8  ,gatt
21:19:10   9  ,gattn
21:19:10  10  FROM svm6162
21:19:10  11  /

Table created.

Elapsed: 00:00:00.09
21:19:10 SQL> 
21:19:10 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
21:19:11 SQL> 
21:19:11 SQL> DROP   TABLE egb_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
21:19:11 SQL> CREATE TABLE egb_ms610 COMPRESS AS
21:19:11   2  SELECT
21:19:11   3  ydate
21:19:11   4  ,trend egb_trend
21:19:11   5  ,g6    egb_g6
21:19:11   6  ,gatt  egb_gatt
21:19:11   7  ,gattn egb_gattn
21:19:11   8  FROM modsrc
21:19:11   9  /

Table created.

Elapsed: 00:00:00.08
21:19:11 SQL> 
21:19:11 SQL> ANALYZE TABLE egb_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
21:19:11 SQL> 
21:19:11 SQL> -- I need a copy of the attributes:
21:19:11 SQL> 
21:19:11 SQL> 
21:19:11 SQL> DROP   TABLE egb_att;

Table dropped.

Elapsed: 00:00:00.24
21:19:11 SQL> CREATE TABLE egb_att COMPRESS AS
21:19:11   2  SELECT
21:19:11   3  ydate
21:19:11   4  ,att00 egb_att00
21:19:11   5  ,att01 egb_att01
21:19:11   6  ,att02 egb_att02
21:19:11   7  ,att03 egb_att03
21:19:11   8  ,att04 egb_att04
21:19:11   9  ,att05 egb_att05
21:19:11  10  ,att06 egb_att06
21:19:11  11  ,att07 egb_att07
21:19:11  12  ,att08 egb_att08
21:19:11  13  ,att09 egb_att09
21:19:11  14  ,att10 egb_att10
21:19:11  15  ,att11 egb_att11
21:19:11  16  ,att12 egb_att12
21:19:11  17  ,att13 egb_att13
21:19:11  18  ,att14 egb_att14
21:19:11  19  ,att15 egb_att15
21:19:11  20  ,att16 egb_att16
21:19:11  21  ,att17 egb_att17
21:19:11  22  ,att18 egb_att18
21:19:11  23  ,att19 egb_att19
21:19:11  24  ,att20 egb_att20
21:19:11  25  ,att21 egb_att21
21:19:11  26  ,att22 egb_att22
21:19:11  27  ,att23 egb_att23
21:19:11  28  ,att24 egb_att24
21:19:11  29  ,att25 egb_att25
21:19:11  30  ,att26 egb_att26
21:19:11  31  ,att27 egb_att27
21:19:11  32  ,att28 egb_att28
21:19:11  33  ,att29 egb_att29
21:19:11  34  ,att30 egb_att30
21:19:11  35  ,att31 egb_att31
21:19:11  36  ,att32 egb_att32
21:19:11  37  ,att33 egb_att33
21:19:11  38  ,att34 egb_att34
21:19:11  39  ,att35 egb_att35
21:19:11  40  ,att36 egb_att36
21:19:11  41  ,att37 egb_att37
21:19:11  42  FROM svm6162
21:19:11  43  /

Table created.

Elapsed: 00:00:00.18
21:19:11 SQL> 
21:19:11 SQL> ANALYZE TABLE egb_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
21:19:12 SQL> 
21:19:12 SQL> -- rpt
21:19:12 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19812

Elapsed: 00:00:00.96
21:19:13 SQL> SELECT COUNT(*)FROM egb_att;

  COUNT(*)
----------
     19812

Elapsed: 00:00:00.00
21:19:13 SQL> 
21:19:13 SQL> --
21:19:13 SQL> -- ejp610.sql
21:19:13 SQL> --
21:19:13 SQL> 
21:19:13 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:19:13 SQL> 
21:19:13 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.70
21:19:13 SQL> 
21:19:13 SQL> -- I created di5min here:
21:19:13 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:19:13 SQL> 
21:19:13 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:19:13   2  SELECT
21:19:13   3  pair
21:19:13   4  ,ydate
21:19:13   5  ,prdate
21:19:13   6  ,rownum rnum -- acts as t in my time-series
21:19:13   7  ,clse
21:19:13   8  -- Derive a bunch of attributes from clse, the latest price:
21:19:13   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:19:13  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:19:13  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:19:13  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:19:13  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:19:13  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:19:13  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:19:13  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:19:13  17  --
21:19:13  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:19:13  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:19:13  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:19:13  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:19:13  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:19:13  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:19:13  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:19:13  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:19:13  26  --
21:19:13  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:19:13  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:19:13  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:19:13  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:19:13  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:19:13  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:19:13  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:19:13  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:19:13  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:19:13  36  FROM di5min WHERE pair LIKE'%ejp%'
21:19:13  37  AND ydate > sysdate - 95
21:19:13  38  ORDER BY ydate
21:19:13  39  /

View created.

Elapsed: 00:00:00.06
21:19:13 SQL> 
21:19:13 SQL> -- rpt
21:19:13 SQL> 
21:19:13 SQL> SELECT
21:19:13   2  pair
21:19:13   3  ,COUNT(pair)
21:19:13   4  ,MIN(clse),MAX(clse)
21:19:13   5  ,MIN(avg6),MAX(avg6)
21:19:13   6  ,MIN(ydate),MAX(ydate)
21:19:13   7  FROM svm6102
21:19:13   8  GROUP BY pair
21:19:13   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ejp_usd       19810 107.643765	115.63485 107.776148 115.509678 2010-10-03 21:20:01 2011-01-06 21:15:00

Elapsed: 00:00:00.85
21:19:14 SQL> 
21:19:14 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:19:14 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.35
21:19:15 SQL> CREATE TABLE svm6122 COMPRESS AS
21:19:15   2  SELECT
21:19:15   3  pair
21:19:15   4  ,ydate
21:19:15   5  ,prdate
21:19:15   6  ,clse
21:19:15   7  -- g6 is important. I want to predict g6:
21:19:15   8  ,ld6 - clse g6
21:19:15   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:19:15  10  -- I want more attributes from the ones I derived above:
21:19:15  11  -- clse relation to moving-min
21:19:15  12  ,clse-min4  cm4
21:19:15  13  ,clse-min6  cm6
21:19:15  14  ,clse-min8  cm8
21:19:15  15  ,clse-min10 cm10
21:19:15  16  ,clse-min12 cm12
21:19:15  17  ,clse-min14 cm14
21:19:15  18  ,clse-min16 cm16
21:19:15  19  ,clse-min18 cm18
21:19:15  20  -- clse relation to moving-avg
21:19:15  21  ,clse-avg4  ca4
21:19:15  22  ,clse-avg6  ca6
21:19:15  23  ,clse-avg8  ca8
21:19:15  24  ,clse-avg10 ca10
21:19:15  25  ,clse-avg12 ca12
21:19:15  26  ,clse-avg14 ca14
21:19:15  27  ,clse-avg16 ca16
21:19:15  28  ,clse-avg18 ca18
21:19:15  29  -- clse relation to moving-max
21:19:15  30  ,clse-max4  cx4
21:19:15  31  ,clse-max6  cx6
21:19:15  32  ,clse-max8  cx8
21:19:15  33  ,clse-max10 cx10
21:19:15  34  ,clse-max12 cx12
21:19:15  35  ,clse-max14 cx14
21:19:15  36  ,clse-max16 cx16
21:19:15  37  ,clse-max18 cx18
21:19:15  38  -- Derive more attributes.
21:19:15  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:19:15  40  -- But COVAR_POP is more stable:
21:19:15  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:19:15  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:19:15  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:19:15  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:19:15  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:19:15  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:19:15  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:19:15  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:19:15  49  -- Derive date related attributes:
21:19:15  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:19:15  51  ,0+TO_CHAR(ydate,'D')d
21:19:15  52  ,0+TO_CHAR(ydate,'W')w
21:19:15  53  -- mpm stands for minutes-past-midnight:
21:19:15  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:19:15  55  -- mph stands for minutes-past-hour:
21:19:15  56  ,0+TO_CHAR(ydate,'MI')mph
21:19:15  57  FROM svm6102
21:19:15  58  ORDER BY ydate
21:19:15  59  /

Table created.

Elapsed: 00:00:02.21
21:19:17 SQL> 
21:19:17 SQL> -- rpt
21:19:17 SQL> 
21:19:17 SQL> SELECT
21:19:17   2  pair
21:19:17   3  ,COUNT(pair)
21:19:17   4  ,MIN(clse),MAX(clse)
21:19:17   5  ,MIN(ydate),MAX(ydate)
21:19:17   6  FROM svm6122
21:19:17   7  GROUP BY pair
21:19:17   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ejp_usd       19810 107.643765	115.63485 2010-10-03 21:20:01 2011-01-06 21:15:00

Elapsed: 00:00:00.04
21:19:17 SQL> 
21:19:17 SQL> -- Prepare for derivation of NTILE based params:
21:19:17 SQL> 
21:19:17 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.34
21:19:17 SQL> CREATE TABLE svm6142 COMPRESS AS
21:19:17   2  SELECT
21:19:17   3  pair
21:19:17   4  ,ydate
21:19:17   5  ,prdate
21:19:17   6  ,clse
21:19:17   7  ,g6
21:19:17   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:19:17   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:19:17  10  ,CASE WHEN trend IS NULL THEN 1
21:19:17  11  	    WHEN trend =0      THEN 1
21:19:17  12  	    ELSE trend END trend
21:19:17  13  ,cm4
21:19:17  14  ,cm6
21:19:17  15  ,cm8
21:19:17  16  ,cm10
21:19:17  17  ,cm12
21:19:17  18  ,cm14
21:19:17  19  ,cm16
21:19:17  20  ,cm18
21:19:17  21  --
21:19:17  22  ,ca4
21:19:17  23  ,ca6
21:19:17  24  ,ca8
21:19:17  25  ,ca10
21:19:17  26  ,ca12
21:19:17  27  ,ca14
21:19:17  28  ,ca16
21:19:17  29  ,ca18
21:19:17  30  --
21:19:17  31  ,cx4
21:19:17  32  ,cx6
21:19:17  33  ,cx8
21:19:17  34  ,cx10
21:19:17  35  ,cx12
21:19:17  36  ,cx14
21:19:17  37  ,cx16
21:19:17  38  ,cx18
21:19:17  39  --
21:19:17  40  ,crr4
21:19:17  41  ,crr6
21:19:17  42  ,crr8
21:19:17  43  ,crr10
21:19:17  44  ,crr12
21:19:17  45  ,crr14
21:19:17  46  ,crr16
21:19:17  47  ,crr18
21:19:17  48  --
21:19:17  49  ,hh
21:19:17  50  ,d
21:19:17  51  ,w
21:19:17  52  ,mpm
21:19:17  53  ,mph
21:19:17  54  FROM svm6122
21:19:17  55  ORDER BY ydate
21:19:17  56  /

Table created.

Elapsed: 00:00:00.42
21:19:18 SQL> 
21:19:18 SQL> -- rpt
21:19:18 SQL> 
21:19:18 SQL> SELECT
21:19:18   2  pair
21:19:18   3  ,trend
21:19:18   4  ,gatt
21:19:18   5  ,COUNT(pair)
21:19:18   6  ,AVG(g6)
21:19:18   7  FROM svm6142
21:19:18   8  GROUP BY pair,trend,gatt
21:19:18   9  ORDER BY pair,trend,gatt
21:19:18  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      5168 -.32377056
ejp_usd 	-1 up	      4931 .277566728
ejp_usd 	-1		72
ejp_usd 	 1 nup	      5013 -.29960178
ejp_usd 	 1 up	      4626 .288517128

Elapsed: 00:00:00.04
21:19:18 SQL> 
21:19:18 SQL> 
21:19:18 SQL> -- Derive NTILE based params:
21:19:18 SQL> 
21:19:18 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.22
21:19:18 SQL> CREATE TABLE svm6162 COMPRESS AS
21:19:18   2  SELECT
21:19:18   3  pair
21:19:18   4  ,ydate
21:19:18   5  ,prdate
21:19:18   6  ,clse
21:19:18   7  ,g6
21:19:18   8  ,gatt
21:19:18   9  ,gattn
21:19:18  10  ,trend
21:19:18  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:19:18  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:19:18  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:19:18  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:19:18  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:19:18  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:19:18  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:19:18  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:19:18  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:19:18  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:19:18  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:19:18  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:19:18  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:19:18  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:19:18  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:19:18  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:19:18  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:19:18  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:19:18  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:19:18  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:19:18  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:19:18  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:19:18  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:19:18  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:19:18  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:19:18  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:19:18  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:19:18  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:19:18  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:19:18  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:19:18  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:19:18  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:19:18  43  ,hh  att32
21:19:18  44  ,d   att33
21:19:18  45  ,w   att34
21:19:18  46  ,mpm att35
21:19:18  47  ,mph att36
21:19:18  48  ,trend att37
21:19:18  49  FROM svm6142
21:19:18  50  ORDER BY ydate
21:19:18  51  /

Table created.

Elapsed: 00:00:04.92
21:19:23 SQL> 
21:19:23 SQL> -- rpt
21:19:23 SQL> 
21:19:23 SQL> SELECT
21:19:23   2  pair
21:19:23   3  ,trend
21:19:23   4  ,gatt
21:19:23   5  ,COUNT(pair)
21:19:23   6  ,AVG(g6)
21:19:23   7  FROM svm6162
21:19:23   8  GROUP BY pair,trend,gatt
21:19:23   9  ORDER BY pair,trend,gatt
21:19:23  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      5168 -.32377056
ejp_usd 	-1 up	      4931 .277566728
ejp_usd 	-1		72
ejp_usd 	 1 nup	      5013 -.29960178
ejp_usd 	 1 up	      4626 .288517128

Elapsed: 00:00:00.03
21:19:23 SQL> 
21:19:23 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.19
21:19:23 SQL> CREATE TABLE modsrc COMPRESS AS
21:19:23   2  SELECT
21:19:23   3  pair
21:19:23   4  ,ydate
21:19:23   5  ,prdate
21:19:23   6  ,trend
21:19:23   7  ,g6
21:19:23   8  ,gatt
21:19:23   9  ,gattn
21:19:23  10  FROM svm6162
21:19:23  11  /

Table created.

Elapsed: 00:00:00.09
21:19:23 SQL> 
21:19:23 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
21:19:23 SQL> 
21:19:23 SQL> DROP   TABLE ejp_ms610 ;

Table dropped.

Elapsed: 00:00:00.18
21:19:23 SQL> CREATE TABLE ejp_ms610 COMPRESS AS
21:19:23   2  SELECT
21:19:23   3  ydate
21:19:23   4  ,trend ejp_trend
21:19:23   5  ,g6    ejp_g6
21:19:23   6  ,gatt  ejp_gatt
21:19:23   7  ,gattn ejp_gattn
21:19:23   8  FROM modsrc
21:19:23   9  /

Table created.

Elapsed: 00:00:00.06
21:19:24 SQL> 
21:19:24 SQL> ANALYZE TABLE ejp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
21:19:24 SQL> 
21:19:24 SQL> -- I need a copy of the attributes:
21:19:24 SQL> 
21:19:24 SQL> 
21:19:24 SQL> DROP   TABLE ejp_att;

Table dropped.

Elapsed: 00:00:00.08
21:19:24 SQL> CREATE TABLE ejp_att COMPRESS AS
21:19:24   2  SELECT
21:19:24   3  ydate
21:19:24   4  ,att00 ejp_att00
21:19:24   5  ,att01 ejp_att01
21:19:24   6  ,att02 ejp_att02
21:19:24   7  ,att03 ejp_att03
21:19:24   8  ,att04 ejp_att04
21:19:24   9  ,att05 ejp_att05
21:19:24  10  ,att06 ejp_att06
21:19:24  11  ,att07 ejp_att07
21:19:24  12  ,att08 ejp_att08
21:19:24  13  ,att09 ejp_att09
21:19:24  14  ,att10 ejp_att10
21:19:24  15  ,att11 ejp_att11
21:19:24  16  ,att12 ejp_att12
21:19:24  17  ,att13 ejp_att13
21:19:24  18  ,att14 ejp_att14
21:19:24  19  ,att15 ejp_att15
21:19:24  20  ,att16 ejp_att16
21:19:24  21  ,att17 ejp_att17
21:19:24  22  ,att18 ejp_att18
21:19:24  23  ,att19 ejp_att19
21:19:24  24  ,att20 ejp_att20
21:19:24  25  ,att21 ejp_att21
21:19:24  26  ,att22 ejp_att22
21:19:24  27  ,att23 ejp_att23
21:19:24  28  ,att24 ejp_att24
21:19:24  29  ,att25 ejp_att25
21:19:24  30  ,att26 ejp_att26
21:19:24  31  ,att27 ejp_att27
21:19:24  32  ,att28 ejp_att28
21:19:24  33  ,att29 ejp_att29
21:19:24  34  ,att30 ejp_att30
21:19:24  35  ,att31 ejp_att31
21:19:24  36  ,att32 ejp_att32
21:19:24  37  ,att33 ejp_att33
21:19:24  38  ,att34 ejp_att34
21:19:24  39  ,att35 ejp_att35
21:19:24  40  ,att36 ejp_att36
21:19:24  41  ,att37 ejp_att37
21:19:24  42  FROM svm6162
21:19:24  43  /

Table created.

Elapsed: 00:00:00.23
21:19:24 SQL> 
21:19:24 SQL> ANALYZE TABLE ejp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
21:19:25 SQL> 
21:19:25 SQL> -- rpt
21:19:25 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19810

Elapsed: 00:00:00.84
21:19:25 SQL> SELECT COUNT(*)FROM ejp_att;

  COUNT(*)
----------
     19810

Elapsed: 00:00:00.01
21:19:25 SQL> 
21:19:25 SQL> --
21:19:25 SQL> -- ajp610.sql
21:19:25 SQL> --
21:19:25 SQL> 
21:19:25 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:19:25 SQL> 
21:19:25 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.42
21:19:26 SQL> 
21:19:26 SQL> -- I created di5min here:
21:19:26 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:19:26 SQL> 
21:19:26 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:19:26   2  SELECT
21:19:26   3  pair
21:19:26   4  ,ydate
21:19:26   5  ,prdate
21:19:26   6  ,rownum rnum -- acts as t in my time-series
21:19:26   7  ,clse
21:19:26   8  -- Derive a bunch of attributes from clse, the latest price:
21:19:26   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:19:26  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:19:26  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:19:26  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:19:26  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:19:26  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:19:26  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:19:26  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:19:26  17  --
21:19:26  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:19:26  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:19:26  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:19:26  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:19:26  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:19:26  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:19:26  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:19:26  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:19:26  26  --
21:19:26  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:19:26  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:19:26  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:19:26  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:19:26  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:19:26  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:19:26  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:19:26  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:19:26  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:19:26  36  FROM di5min WHERE pair LIKE'%ajp%'
21:19:26  37  AND ydate > sysdate - 95
21:19:26  38  ORDER BY ydate
21:19:26  39  /

View created.

Elapsed: 00:00:00.04
21:19:26 SQL> 
21:19:26 SQL> -- rpt
21:19:26 SQL> 
21:19:26 SQL> SELECT
21:19:26   2  pair
21:19:26   3  ,COUNT(pair)
21:19:26   4  ,MIN(clse),MAX(clse)
21:19:26   5  ,MIN(avg6),MAX(avg6)
21:19:26   6  ,MIN(ydate),MAX(ydate)
21:19:26   7  FROM svm6102
21:19:26   8  GROUP BY pair
21:19:26   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ajp_usd       19806  78.249976 83.6669853 78.5106193  83.546306 2010-10-03 21:20:01 2011-01-06 21:10:00

Elapsed: 00:00:00.82
21:19:27 SQL> 
21:19:27 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:19:27 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.23
21:19:27 SQL> CREATE TABLE svm6122 COMPRESS AS
21:19:27   2  SELECT
21:19:27   3  pair
21:19:27   4  ,ydate
21:19:27   5  ,prdate
21:19:27   6  ,clse
21:19:27   7  -- g6 is important. I want to predict g6:
21:19:27   8  ,ld6 - clse g6
21:19:27   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:19:27  10  -- I want more attributes from the ones I derived above:
21:19:27  11  -- clse relation to moving-min
21:19:27  12  ,clse-min4  cm4
21:19:27  13  ,clse-min6  cm6
21:19:27  14  ,clse-min8  cm8
21:19:27  15  ,clse-min10 cm10
21:19:27  16  ,clse-min12 cm12
21:19:27  17  ,clse-min14 cm14
21:19:27  18  ,clse-min16 cm16
21:19:27  19  ,clse-min18 cm18
21:19:27  20  -- clse relation to moving-avg
21:19:27  21  ,clse-avg4  ca4
21:19:27  22  ,clse-avg6  ca6
21:19:27  23  ,clse-avg8  ca8
21:19:27  24  ,clse-avg10 ca10
21:19:27  25  ,clse-avg12 ca12
21:19:27  26  ,clse-avg14 ca14
21:19:27  27  ,clse-avg16 ca16
21:19:27  28  ,clse-avg18 ca18
21:19:27  29  -- clse relation to moving-max
21:19:27  30  ,clse-max4  cx4
21:19:27  31  ,clse-max6  cx6
21:19:27  32  ,clse-max8  cx8
21:19:27  33  ,clse-max10 cx10
21:19:27  34  ,clse-max12 cx12
21:19:27  35  ,clse-max14 cx14
21:19:27  36  ,clse-max16 cx16
21:19:27  37  ,clse-max18 cx18
21:19:27  38  -- Derive more attributes.
21:19:27  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:19:27  40  -- But COVAR_POP is more stable:
21:19:27  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:19:27  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:19:27  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:19:27  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:19:27  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:19:27  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:19:27  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:19:27  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:19:27  49  -- Derive date related attributes:
21:19:27  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:19:27  51  ,0+TO_CHAR(ydate,'D')d
21:19:27  52  ,0+TO_CHAR(ydate,'W')w
21:19:27  53  -- mpm stands for minutes-past-midnight:
21:19:27  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:19:27  55  -- mph stands for minutes-past-hour:
21:19:27  56  ,0+TO_CHAR(ydate,'MI')mph
21:19:27  57  FROM svm6102
21:19:27  58  ORDER BY ydate
21:19:27  59  /

Table created.

Elapsed: 00:00:02.11
21:19:29 SQL> 
21:19:29 SQL> -- rpt
21:19:29 SQL> 
21:19:29 SQL> SELECT
21:19:29   2  pair
21:19:29   3  ,COUNT(pair)
21:19:29   4  ,MIN(clse),MAX(clse)
21:19:29   5  ,MIN(ydate),MAX(ydate)
21:19:29   6  FROM svm6122
21:19:29   7  GROUP BY pair
21:19:29   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ajp_usd       19806  78.249976 83.6669853 2010-10-03 21:20:01 2011-01-06 21:10:00

Elapsed: 00:00:00.04
21:19:29 SQL> 
21:19:29 SQL> -- Prepare for derivation of NTILE based params:
21:19:29 SQL> 
21:19:29 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.24
21:19:29 SQL> CREATE TABLE svm6142 COMPRESS AS
21:19:29   2  SELECT
21:19:29   3  pair
21:19:29   4  ,ydate
21:19:29   5  ,prdate
21:19:29   6  ,clse
21:19:29   7  ,g6
21:19:29   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:19:29   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:19:29  10  ,CASE WHEN trend IS NULL THEN 1
21:19:29  11  	    WHEN trend =0      THEN 1
21:19:29  12  	    ELSE trend END trend
21:19:29  13  ,cm4
21:19:29  14  ,cm6
21:19:29  15  ,cm8
21:19:29  16  ,cm10
21:19:29  17  ,cm12
21:19:29  18  ,cm14
21:19:29  19  ,cm16
21:19:29  20  ,cm18
21:19:29  21  --
21:19:29  22  ,ca4
21:19:29  23  ,ca6
21:19:29  24  ,ca8
21:19:29  25  ,ca10
21:19:29  26  ,ca12
21:19:29  27  ,ca14
21:19:29  28  ,ca16
21:19:29  29  ,ca18
21:19:29  30  --
21:19:29  31  ,cx4
21:19:29  32  ,cx6
21:19:29  33  ,cx8
21:19:29  34  ,cx10
21:19:29  35  ,cx12
21:19:29  36  ,cx14
21:19:29  37  ,cx16
21:19:29  38  ,cx18
21:19:29  39  --
21:19:29  40  ,crr4
21:19:29  41  ,crr6
21:19:29  42  ,crr8
21:19:29  43  ,crr10
21:19:29  44  ,crr12
21:19:29  45  ,crr14
21:19:29  46  ,crr16
21:19:29  47  ,crr18
21:19:29  48  --
21:19:29  49  ,hh
21:19:29  50  ,d
21:19:29  51  ,w
21:19:29  52  ,mpm
21:19:29  53  ,mph
21:19:29  54  FROM svm6122
21:19:29  55  ORDER BY ydate
21:19:29  56  /

Table created.

Elapsed: 00:00:00.40
21:19:30 SQL> 
21:19:30 SQL> -- rpt
21:19:30 SQL> 
21:19:30 SQL> SELECT
21:19:30   2  pair
21:19:30   3  ,trend
21:19:30   4  ,gatt
21:19:30   5  ,COUNT(pair)
21:19:30   6  ,AVG(g6)
21:19:30   7  FROM svm6142
21:19:30   8  GROUP BY pair,trend,gatt
21:19:30   9  ORDER BY pair,trend,gatt
21:19:30  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4394 -.22297091
ajp_usd 	-1 up	      5218 .223631424
ajp_usd 	-1		59
ajp_usd 	 1 nup	      5309  -.2034998
ajp_usd 	 1 up	      4813 .212620384
ajp_usd 	 1		13

6 rows selected.

Elapsed: 00:00:00.03
21:19:30 SQL> 
21:19:30 SQL> 
21:19:30 SQL> -- Derive NTILE based params:
21:19:30 SQL> 
21:19:30 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
21:19:30 SQL> CREATE TABLE svm6162 COMPRESS AS
21:19:30   2  SELECT
21:19:30   3  pair
21:19:30   4  ,ydate
21:19:30   5  ,prdate
21:19:30   6  ,clse
21:19:30   7  ,g6
21:19:30   8  ,gatt
21:19:30   9  ,gattn
21:19:30  10  ,trend
21:19:30  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:19:30  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:19:30  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:19:30  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:19:30  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:19:30  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:19:30  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:19:30  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:19:30  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:19:30  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:19:30  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:19:30  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:19:30  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:19:30  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:19:30  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:19:30  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:19:30  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:19:30  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:19:30  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:19:30  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:19:30  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:19:30  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:19:30  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:19:30  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:19:30  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:19:30  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:19:30  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:19:30  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:19:30  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:19:30  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:19:30  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:19:30  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:19:30  43  ,hh  att32
21:19:30  44  ,d   att33
21:19:30  45  ,w   att34
21:19:30  46  ,mpm att35
21:19:30  47  ,mph att36
21:19:30  48  ,trend att37
21:19:30  49  FROM svm6142
21:19:30  50  ORDER BY ydate
21:19:30  51  /

Table created.

Elapsed: 00:00:04.89
21:19:35 SQL> 
21:19:35 SQL> -- rpt
21:19:35 SQL> 
21:19:35 SQL> SELECT
21:19:35   2  pair
21:19:35   3  ,trend
21:19:35   4  ,gatt
21:19:35   5  ,COUNT(pair)
21:19:35   6  ,AVG(g6)
21:19:35   7  FROM svm6162
21:19:35   8  GROUP BY pair,trend,gatt
21:19:35   9  ORDER BY pair,trend,gatt
21:19:35  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4394 -.22297091
ajp_usd 	-1 up	      5218 .223631424
ajp_usd 	-1		59
ajp_usd 	 1 nup	      5309  -.2034998
ajp_usd 	 1 up	      4813 .212620384
ajp_usd 	 1		13

6 rows selected.

Elapsed: 00:00:00.03
21:19:35 SQL> 
21:19:35 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
21:19:35 SQL> CREATE TABLE modsrc COMPRESS AS
21:19:35   2  SELECT
21:19:35   3  pair
21:19:35   4  ,ydate
21:19:35   5  ,prdate
21:19:35   6  ,trend
21:19:35   7  ,g6
21:19:35   8  ,gatt
21:19:35   9  ,gattn
21:19:35  10  FROM svm6162
21:19:35  11  /

Table created.

Elapsed: 00:00:00.09
21:19:35 SQL> 
21:19:35 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
21:19:35 SQL> 
21:19:35 SQL> DROP   TABLE ajp_ms610 ;

Table dropped.

Elapsed: 00:00:00.07
21:19:35 SQL> CREATE TABLE ajp_ms610 COMPRESS AS
21:19:35   2  SELECT
21:19:35   3  ydate
21:19:35   4  ,trend ajp_trend
21:19:35   5  ,g6    ajp_g6
21:19:35   6  ,gatt  ajp_gatt
21:19:35   7  ,gattn ajp_gattn
21:19:35   8  FROM modsrc
21:19:35   9  /

Table created.

Elapsed: 00:00:00.08
21:19:35 SQL> 
21:19:35 SQL> ANALYZE TABLE ajp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
21:19:36 SQL> 
21:19:36 SQL> -- I need a copy of the attributes:
21:19:36 SQL> 
21:19:36 SQL> 
21:19:36 SQL> DROP   TABLE ajp_att;

Table dropped.

Elapsed: 00:00:00.06
21:19:36 SQL> CREATE TABLE ajp_att COMPRESS AS
21:19:36   2  SELECT
21:19:36   3  ydate
21:19:36   4  ,att00 ajp_att00
21:19:36   5  ,att01 ajp_att01
21:19:36   6  ,att02 ajp_att02
21:19:36   7  ,att03 ajp_att03
21:19:36   8  ,att04 ajp_att04
21:19:36   9  ,att05 ajp_att05
21:19:36  10  ,att06 ajp_att06
21:19:36  11  ,att07 ajp_att07
21:19:36  12  ,att08 ajp_att08
21:19:36  13  ,att09 ajp_att09
21:19:36  14  ,att10 ajp_att10
21:19:36  15  ,att11 ajp_att11
21:19:36  16  ,att12 ajp_att12
21:19:36  17  ,att13 ajp_att13
21:19:36  18  ,att14 ajp_att14
21:19:36  19  ,att15 ajp_att15
21:19:36  20  ,att16 ajp_att16
21:19:36  21  ,att17 ajp_att17
21:19:36  22  ,att18 ajp_att18
21:19:36  23  ,att19 ajp_att19
21:19:36  24  ,att20 ajp_att20
21:19:36  25  ,att21 ajp_att21
21:19:36  26  ,att22 ajp_att22
21:19:36  27  ,att23 ajp_att23
21:19:36  28  ,att24 ajp_att24
21:19:36  29  ,att25 ajp_att25
21:19:36  30  ,att26 ajp_att26
21:19:36  31  ,att27 ajp_att27
21:19:36  32  ,att28 ajp_att28
21:19:36  33  ,att29 ajp_att29
21:19:36  34  ,att30 ajp_att30
21:19:36  35  ,att31 ajp_att31
21:19:36  36  ,att32 ajp_att32
21:19:36  37  ,att33 ajp_att33
21:19:36  38  ,att34 ajp_att34
21:19:36  39  ,att35 ajp_att35
21:19:36  40  ,att36 ajp_att36
21:19:36  41  ,att37 ajp_att37
21:19:36  42  FROM svm6162
21:19:36  43  /

Table created.

Elapsed: 00:00:00.21
21:19:36 SQL> 
21:19:36 SQL> ANALYZE TABLE ajp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
21:19:36 SQL> 
21:19:36 SQL> -- rpt
21:19:36 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19806

Elapsed: 00:00:00.79
21:19:37 SQL> SELECT COUNT(*)FROM ajp_att;

  COUNT(*)
----------
     19806

Elapsed: 00:00:00.00
21:19:37 SQL> 
21:19:37 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
