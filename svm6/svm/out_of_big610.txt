
SQL*Plus: Release 11.2.0.1.0 Production on Mon Dec 27 05:34:55 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

05:34:55 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
05:34:55 SQL> 05:34:55 SQL> --
05:34:55 SQL> -- eur610.sql
05:34:55 SQL> --
05:34:55 SQL> 
05:34:55 SQL> -- Creates views and tables for backtesting a forex SVM strategy
05:34:55 SQL> 
05:34:55 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.03
05:34:55 SQL> 
05:34:55 SQL> -- I created di5min here:
05:34:55 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
05:34:55 SQL> 
05:34:55 SQL> CREATE OR REPLACE VIEW svm6102 AS
05:34:55   2  SELECT
05:34:55   3  pair
05:34:55   4  ,ydate
05:34:55   5  ,prdate
05:34:55   6  ,rownum rnum -- acts as t in my time-series
05:34:55   7  ,clse
05:34:55   8  -- Derive a bunch of attributes from clse, the latest price:
05:34:55   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
05:34:55  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
05:34:55  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
05:34:55  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
05:34:55  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
05:34:55  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
05:34:55  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
05:34:55  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
05:34:55  17  --
05:34:55  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
05:34:55  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
05:34:55  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
05:34:55  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
05:34:55  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
05:34:55  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
05:34:55  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
05:34:55  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
05:34:55  26  --
05:34:55  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
05:34:55  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
05:34:55  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
05:34:55  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
05:34:55  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
05:34:55  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
05:34:55  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
05:34:55  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
05:34:55  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
05:34:55  36  FROM di5min WHERE pair LIKE'%eur%'
05:34:55  37  AND ydate > sysdate - 95
05:34:55  38  ORDER BY ydate
05:34:55  39  /

View created.

Elapsed: 00:00:00.05
05:34:55 SQL> 
05:34:55 SQL> -- rpt
05:34:55 SQL> 
05:34:55 SQL> SELECT
05:34:55   2  pair
05:34:55   3  ,COUNT(pair)
05:34:55   4  ,MIN(clse),MAX(clse)
05:34:55   5  ,MIN(avg6),MAX(avg6)
05:34:55   6  ,MIN(ydate),MAX(ydate)
05:34:55   7  FROM svm6102
05:34:55   8  GROUP BY pair
05:34:55   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19288    1.29735	   1.4273 1.29875103 1.42436233 2010-09-23 05:35:01 2010-12-27 05:30:00

Elapsed: 00:00:00.88
05:34:56 SQL> 
05:34:56 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
05:34:56 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.04
05:34:56 SQL> CREATE TABLE svm6122 COMPRESS AS
05:34:56   2  SELECT
05:34:56   3  pair
05:34:56   4  ,ydate
05:34:56   5  ,prdate
05:34:56   6  ,clse
05:34:56   7  -- g6 is important. I want to predict g6:
05:34:56   8  ,ld6 - clse g6
05:34:56   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
05:34:56  10  -- I want more attributes from the ones I derived above:
05:34:56  11  -- clse relation to moving-min
05:34:56  12  ,clse-min4  cm4
05:34:56  13  ,clse-min6  cm6
05:34:56  14  ,clse-min8  cm8
05:34:56  15  ,clse-min10 cm10
05:34:56  16  ,clse-min12 cm12
05:34:56  17  ,clse-min14 cm14
05:34:56  18  ,clse-min16 cm16
05:34:56  19  ,clse-min18 cm18
05:34:56  20  -- clse relation to moving-avg
05:34:56  21  ,clse-avg4  ca4
05:34:56  22  ,clse-avg6  ca6
05:34:56  23  ,clse-avg8  ca8
05:34:56  24  ,clse-avg10 ca10
05:34:56  25  ,clse-avg12 ca12
05:34:56  26  ,clse-avg14 ca14
05:34:56  27  ,clse-avg16 ca16
05:34:56  28  ,clse-avg18 ca18
05:34:56  29  -- clse relation to moving-max
05:34:56  30  ,clse-max4  cx4
05:34:56  31  ,clse-max6  cx6
05:34:56  32  ,clse-max8  cx8
05:34:56  33  ,clse-max10 cx10
05:34:56  34  ,clse-max12 cx12
05:34:56  35  ,clse-max14 cx14
05:34:56  36  ,clse-max16 cx16
05:34:56  37  ,clse-max18 cx18
05:34:56  38  -- Derive more attributes.
05:34:56  39  -- I want to use CORR() here to help SVM see the shape of the series.
05:34:56  40  -- But COVAR_POP is more stable:
05:34:56  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
05:34:56  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
05:34:56  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
05:34:56  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
05:34:56  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
05:34:56  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
05:34:56  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
05:34:56  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
05:34:56  49  -- Derive date related attributes:
05:34:56  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
05:34:56  51  ,0+TO_CHAR(ydate,'D')d
05:34:56  52  ,0+TO_CHAR(ydate,'W')w
05:34:56  53  -- mpm stands for minutes-past-midnight:
05:34:56  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
05:34:56  55  -- mph stands for minutes-past-hour:
05:34:56  56  ,0+TO_CHAR(ydate,'MI')mph
05:34:56  57  FROM svm6102
05:34:56  58  ORDER BY ydate
05:34:56  59  /

Table created.

Elapsed: 00:00:02.38
05:34:58 SQL> 
05:34:58 SQL> -- rpt
05:34:58 SQL> 
05:34:58 SQL> SELECT
05:34:58   2  pair
05:34:58   3  ,COUNT(pair)
05:34:58   4  ,MIN(clse),MAX(clse)
05:34:58   5  ,MIN(ydate),MAX(ydate)
05:34:58   6  FROM svm6122
05:34:58   7  GROUP BY pair
05:34:58   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19288    1.29735	   1.4273 2010-09-23 05:35:01 2010-12-27 05:30:00

Elapsed: 00:00:00.04
05:34:58 SQL> 
05:34:58 SQL> -- Prepare for derivation of NTILE based params:
05:34:58 SQL> 
05:34:58 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.03
05:34:58 SQL> CREATE TABLE svm6142 COMPRESS AS
05:34:58   2  SELECT
05:34:58   3  pair
05:34:58   4  ,ydate
05:34:58   5  ,prdate
05:34:58   6  ,clse
05:34:58   7  ,g6
05:34:58   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
05:34:58   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
05:34:58  10  ,CASE WHEN trend IS NULL THEN 1
05:34:58  11  	    WHEN trend =0      THEN 1
05:34:58  12  	    ELSE trend END trend
05:34:58  13  ,cm4
05:34:58  14  ,cm6
05:34:58  15  ,cm8
05:34:58  16  ,cm10
05:34:58  17  ,cm12
05:34:58  18  ,cm14
05:34:58  19  ,cm16
05:34:58  20  ,cm18
05:34:58  21  --
05:34:58  22  ,ca4
05:34:58  23  ,ca6
05:34:58  24  ,ca8
05:34:58  25  ,ca10
05:34:58  26  ,ca12
05:34:58  27  ,ca14
05:34:58  28  ,ca16
05:34:58  29  ,ca18
05:34:58  30  --
05:34:58  31  ,cx4
05:34:58  32  ,cx6
05:34:58  33  ,cx8
05:34:58  34  ,cx10
05:34:58  35  ,cx12
05:34:58  36  ,cx14
05:34:58  37  ,cx16
05:34:58  38  ,cx18
05:34:58  39  --
05:34:58  40  ,crr4
05:34:58  41  ,crr6
05:34:58  42  ,crr8
05:34:58  43  ,crr10
05:34:58  44  ,crr12
05:34:58  45  ,crr14
05:34:58  46  ,crr16
05:34:58  47  ,crr18
05:34:58  48  --
05:34:58  49  ,hh
05:34:58  50  ,d
05:34:58  51  ,w
05:34:58  52  ,mpm
05:34:58  53  ,mph
05:34:58  54  FROM svm6122
05:34:58  55  ORDER BY ydate
05:34:58  56  /

Table created.

Elapsed: 00:00:00.39
05:34:59 SQL> 
05:34:59 SQL> -- rpt
05:34:59 SQL> 
05:34:59 SQL> SELECT
05:34:59   2  pair
05:34:59   3  ,trend
05:34:59   4  ,gatt
05:34:59   5  ,COUNT(pair)
05:34:59   6  ,AVG(g6)
05:34:59   7  FROM svm6142
05:34:59   8  GROUP BY pair,trend,gatt
05:34:59   9  ORDER BY pair,trend,gatt
05:34:59  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6055  -.0030629
eur_usd 	-1 up	      3629 .004462193
eur_usd 	-1		35
eur_usd 	 1 nup	      5846 -.00316473
eur_usd 	 1 up	      3686 .005173901
eur_usd 	 1		37

6 rows selected.

Elapsed: 00:00:00.04
05:34:59 SQL> 
05:34:59 SQL> 
05:34:59 SQL> -- Derive NTILE based params:
05:34:59 SQL> 
05:34:59 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.04
05:34:59 SQL> CREATE TABLE svm6162 COMPRESS AS
05:34:59   2  SELECT
05:34:59   3  pair
05:34:59   4  ,ydate
05:34:59   5  ,prdate
05:34:59   6  ,clse
05:34:59   7  ,g6
05:34:59   8  ,gatt
05:34:59   9  ,gattn
05:34:59  10  ,trend
05:34:59  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
05:34:59  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
05:34:59  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
05:34:59  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
05:34:59  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
05:34:59  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
05:34:59  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
05:34:59  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
05:34:59  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
05:34:59  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
05:34:59  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
05:34:59  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
05:34:59  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
05:34:59  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
05:34:59  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
05:34:59  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
05:34:59  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
05:34:59  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
05:34:59  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
05:34:59  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
05:34:59  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
05:34:59  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
05:34:59  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
05:34:59  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
05:34:59  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
05:34:59  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
05:34:59  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
05:34:59  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
05:34:59  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
05:34:59  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
05:34:59  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
05:34:59  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
05:34:59  43  ,hh  att32
05:34:59  44  ,d   att33
05:34:59  45  ,w   att34
05:34:59  46  ,mpm att35
05:34:59  47  ,mph att36
05:34:59  48  ,trend att37
05:34:59  49  FROM svm6142
05:34:59  50  ORDER BY ydate
05:34:59  51  /

Table created.

Elapsed: 00:00:04.81
05:35:04 SQL> 
05:35:04 SQL> -- rpt
05:35:04 SQL> 
05:35:04 SQL> SELECT
05:35:04   2  pair
05:35:04   3  ,trend
05:35:04   4  ,gatt
05:35:04   5  ,COUNT(pair)
05:35:04   6  ,AVG(g6)
05:35:04   7  FROM svm6162
05:35:04   8  GROUP BY pair,trend,gatt
05:35:04   9  ORDER BY pair,trend,gatt
05:35:04  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6055  -.0030629
eur_usd 	-1 up	      3629 .004462193
eur_usd 	-1		35
eur_usd 	 1 nup	      5846 -.00316473
eur_usd 	 1 up	      3686 .005173901
eur_usd 	 1		37

6 rows selected.

Elapsed: 00:00:00.02
05:35:04 SQL> 
05:35:04 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.05
05:35:04 SQL> CREATE TABLE modsrc COMPRESS AS
05:35:04   2  SELECT
05:35:04   3  pair
05:35:04   4  ,ydate
05:35:04   5  ,prdate
05:35:04   6  ,trend
05:35:04   7  ,g6
05:35:04   8  ,gatt
05:35:04   9  ,gattn
05:35:04  10  FROM svm6162
05:35:04  11  /

Table created.

Elapsed: 00:00:00.08
05:35:04 SQL> 
05:35:04 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.28
05:35:04 SQL> 
05:35:04 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
05:35:04 SQL> CREATE TABLE eur_ms610 COMPRESS AS
05:35:04   2  SELECT
05:35:04   3  ydate
05:35:04   4  ,trend eur_trend
05:35:04   5  ,g6    eur_g6
05:35:04   6  ,gatt  eur_gatt
05:35:04   7  ,gattn eur_gattn
05:35:04   8  FROM modsrc
05:35:04   9  /

Table created.

Elapsed: 00:00:00.05
05:35:04 SQL> 
05:35:04 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
05:35:04 SQL> 
05:35:04 SQL> -- I need a copy of the attributes:
05:35:04 SQL> 
05:35:04 SQL> 
05:35:04 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.04
05:35:04 SQL> CREATE TABLE eur_att COMPRESS AS
05:35:04   2  SELECT
05:35:04   3  ydate
05:35:04   4  ,att00 eur_att00
05:35:04   5  ,att01 eur_att01
05:35:04   6  ,att02 eur_att02
05:35:04   7  ,att03 eur_att03
05:35:04   8  ,att04 eur_att04
05:35:04   9  ,att05 eur_att05
05:35:04  10  ,att06 eur_att06
05:35:04  11  ,att07 eur_att07
05:35:04  12  ,att08 eur_att08
05:35:04  13  ,att09 eur_att09
05:35:04  14  ,att10 eur_att10
05:35:04  15  ,att11 eur_att11
05:35:04  16  ,att12 eur_att12
05:35:04  17  ,att13 eur_att13
05:35:04  18  ,att14 eur_att14
05:35:04  19  ,att15 eur_att15
05:35:04  20  ,att16 eur_att16
05:35:04  21  ,att17 eur_att17
05:35:04  22  ,att18 eur_att18
05:35:04  23  ,att19 eur_att19
05:35:04  24  ,att20 eur_att20
05:35:04  25  ,att21 eur_att21
05:35:04  26  ,att22 eur_att22
05:35:04  27  ,att23 eur_att23
05:35:04  28  ,att24 eur_att24
05:35:04  29  ,att25 eur_att25
05:35:04  30  ,att26 eur_att26
05:35:04  31  ,att27 eur_att27
05:35:04  32  ,att28 eur_att28
05:35:04  33  ,att29 eur_att29
05:35:04  34  ,att30 eur_att30
05:35:04  35  ,att31 eur_att31
05:35:04  36  ,att32 eur_att32
05:35:04  37  ,att33 eur_att33
05:35:04  38  ,att34 eur_att34
05:35:04  39  ,att35 eur_att35
05:35:04  40  ,att36 eur_att36
05:35:04  41  ,att37 eur_att37
05:35:04  42  FROM svm6162
05:35:04  43  /

Table created.

Elapsed: 00:00:00.17
05:35:05 SQL> 
05:35:05 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.52
05:35:05 SQL> 
05:35:05 SQL> -- rpt
05:35:05 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19287

Elapsed: 00:00:00.87
05:35:06 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19288

Elapsed: 00:00:00.00
05:35:06 SQL> 
05:35:06 SQL> --
05:35:06 SQL> -- aud610.sql
05:35:06 SQL> --
05:35:06 SQL> 
05:35:06 SQL> -- Creates views and tables for backtesting a forex SVM strategy
05:35:06 SQL> 
05:35:06 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.41
05:35:06 SQL> 
05:35:06 SQL> -- I created di5min here:
05:35:06 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
05:35:06 SQL> 
05:35:06 SQL> CREATE OR REPLACE VIEW svm6102 AS
05:35:06   2  SELECT
05:35:06   3  pair
05:35:06   4  ,ydate
05:35:06   5  ,prdate
05:35:06   6  ,rownum rnum -- acts as t in my time-series
05:35:06   7  ,clse
05:35:06   8  -- Derive a bunch of attributes from clse, the latest price:
05:35:06   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
05:35:06  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
05:35:06  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
05:35:06  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
05:35:06  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
05:35:06  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
05:35:06  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
05:35:06  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
05:35:06  17  --
05:35:06  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
05:35:06  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
05:35:06  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
05:35:06  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
05:35:06  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
05:35:06  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
05:35:06  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
05:35:06  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
05:35:06  26  --
05:35:06  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
05:35:06  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
05:35:06  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
05:35:06  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
05:35:06  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
05:35:06  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
05:35:06  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
05:35:06  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
05:35:06  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
05:35:06  36  FROM di5min WHERE pair LIKE'%aud%'
05:35:06  37  AND ydate > sysdate - 95
05:35:06  38  ORDER BY ydate
05:35:06  39  /

View created.

Elapsed: 00:00:00.04
05:35:06 SQL> 
05:35:06 SQL> -- rpt
05:35:06 SQL> 
05:35:06 SQL> SELECT
05:35:06   2  pair
05:35:06   3  ,COUNT(pair)
05:35:06   4  ,MIN(clse),MAX(clse)
05:35:06   5  ,MIN(avg6),MAX(avg6)
05:35:06   6  ,MIN(ydate),MAX(ydate)
05:35:06   7  FROM svm6102
05:35:06   8  GROUP BY pair
05:35:06   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19284	 .9465	   1.0181 .948724658 1.01556438 2010-09-23 05:40:01 2010-12-27 05:30:00

Elapsed: 00:00:00.88
05:35:07 SQL> 
05:35:07 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
05:35:07 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.23
05:35:08 SQL> CREATE TABLE svm6122 COMPRESS AS
05:35:08   2  SELECT
05:35:08   3  pair
05:35:08   4  ,ydate
05:35:08   5  ,prdate
05:35:08   6  ,clse
05:35:08   7  -- g6 is important. I want to predict g6:
05:35:08   8  ,ld6 - clse g6
05:35:08   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
05:35:08  10  -- I want more attributes from the ones I derived above:
05:35:08  11  -- clse relation to moving-min
05:35:08  12  ,clse-min4  cm4
05:35:08  13  ,clse-min6  cm6
05:35:08  14  ,clse-min8  cm8
05:35:08  15  ,clse-min10 cm10
05:35:08  16  ,clse-min12 cm12
05:35:08  17  ,clse-min14 cm14
05:35:08  18  ,clse-min16 cm16
05:35:08  19  ,clse-min18 cm18
05:35:08  20  -- clse relation to moving-avg
05:35:08  21  ,clse-avg4  ca4
05:35:08  22  ,clse-avg6  ca6
05:35:08  23  ,clse-avg8  ca8
05:35:08  24  ,clse-avg10 ca10
05:35:08  25  ,clse-avg12 ca12
05:35:08  26  ,clse-avg14 ca14
05:35:08  27  ,clse-avg16 ca16
05:35:08  28  ,clse-avg18 ca18
05:35:08  29  -- clse relation to moving-max
05:35:08  30  ,clse-max4  cx4
05:35:08  31  ,clse-max6  cx6
05:35:08  32  ,clse-max8  cx8
05:35:08  33  ,clse-max10 cx10
05:35:08  34  ,clse-max12 cx12
05:35:08  35  ,clse-max14 cx14
05:35:08  36  ,clse-max16 cx16
05:35:08  37  ,clse-max18 cx18
05:35:08  38  -- Derive more attributes.
05:35:08  39  -- I want to use CORR() here to help SVM see the shape of the series.
05:35:08  40  -- But COVAR_POP is more stable:
05:35:08  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
05:35:08  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
05:35:08  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
05:35:08  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
05:35:08  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
05:35:08  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
05:35:08  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
05:35:08  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
05:35:08  49  -- Derive date related attributes:
05:35:08  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
05:35:08  51  ,0+TO_CHAR(ydate,'D')d
05:35:08  52  ,0+TO_CHAR(ydate,'W')w
05:35:08  53  -- mpm stands for minutes-past-midnight:
05:35:08  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
05:35:08  55  -- mph stands for minutes-past-hour:
05:35:08  56  ,0+TO_CHAR(ydate,'MI')mph
05:35:08  57  FROM svm6102
05:35:08  58  ORDER BY ydate
05:35:08  59  /

Table created.

Elapsed: 00:00:02.00
05:35:10 SQL> 
05:35:10 SQL> -- rpt
05:35:10 SQL> 
05:35:10 SQL> SELECT
05:35:10   2  pair
05:35:10   3  ,COUNT(pair)
05:35:10   4  ,MIN(clse),MAX(clse)
05:35:10   5  ,MIN(ydate),MAX(ydate)
05:35:10   6  FROM svm6122
05:35:10   7  GROUP BY pair
05:35:10   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19284	 .9465	   1.0181 2010-09-23 05:40:01 2010-12-27 05:30:00

Elapsed: 00:00:00.04
05:35:10 SQL> 
05:35:10 SQL> -- Prepare for derivation of NTILE based params:
05:35:10 SQL> 
05:35:10 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
05:35:10 SQL> CREATE TABLE svm6142 COMPRESS AS
05:35:10   2  SELECT
05:35:10   3  pair
05:35:10   4  ,ydate
05:35:10   5  ,prdate
05:35:10   6  ,clse
05:35:10   7  ,g6
05:35:10   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
05:35:10   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
05:35:10  10  ,CASE WHEN trend IS NULL THEN 1
05:35:10  11  	    WHEN trend =0      THEN 1
05:35:10  12  	    ELSE trend END trend
05:35:10  13  ,cm4
05:35:10  14  ,cm6
05:35:10  15  ,cm8
05:35:10  16  ,cm10
05:35:10  17  ,cm12
05:35:10  18  ,cm14
05:35:10  19  ,cm16
05:35:10  20  ,cm18
05:35:10  21  --
05:35:10  22  ,ca4
05:35:10  23  ,ca6
05:35:10  24  ,ca8
05:35:10  25  ,ca10
05:35:10  26  ,ca12
05:35:10  27  ,ca14
05:35:10  28  ,ca16
05:35:10  29  ,ca18
05:35:10  30  --
05:35:10  31  ,cx4
05:35:10  32  ,cx6
05:35:10  33  ,cx8
05:35:10  34  ,cx10
05:35:10  35  ,cx12
05:35:10  36  ,cx14
05:35:10  37  ,cx16
05:35:10  38  ,cx18
05:35:10  39  --
05:35:10  40  ,crr4
05:35:10  41  ,crr6
05:35:10  42  ,crr8
05:35:10  43  ,crr10
05:35:10  44  ,crr12
05:35:10  45  ,crr14
05:35:10  46  ,crr16
05:35:10  47  ,crr18
05:35:10  48  --
05:35:10  49  ,hh
05:35:10  50  ,d
05:35:10  51  ,w
05:35:10  52  ,mpm
05:35:10  53  ,mph
05:35:10  54  FROM svm6122
05:35:10  55  ORDER BY ydate
05:35:10  56  /

Table created.

Elapsed: 00:00:01.01
05:35:11 SQL> 
05:35:11 SQL> -- rpt
05:35:11 SQL> 
05:35:11 SQL> SELECT
05:35:11   2  pair
05:35:11   3  ,trend
05:35:11   4  ,gatt
05:35:11   5  ,COUNT(pair)
05:35:11   6  ,AVG(g6)
05:35:11   7  FROM svm6142
05:35:11   8  GROUP BY pair,trend,gatt
05:35:11   9  ORDER BY pair,trend,gatt
05:35:11  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5124  -.0021721
aud_usd 	-1 up	      3784 .003757244
aud_usd 	-1		58
aud_usd 	 1 nup	      6675 -.00214869
aud_usd 	 1 up	      3629 .004094651
aud_usd 	 1		14

6 rows selected.

Elapsed: 00:00:00.04
05:35:11 SQL> 
05:35:11 SQL> 
05:35:11 SQL> -- Derive NTILE based params:
05:35:11 SQL> 
05:35:11 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.18
05:35:11 SQL> CREATE TABLE svm6162 COMPRESS AS
05:35:11   2  SELECT
05:35:11   3  pair
05:35:11   4  ,ydate
05:35:11   5  ,prdate
05:35:11   6  ,clse
05:35:11   7  ,g6
05:35:11   8  ,gatt
05:35:11   9  ,gattn
05:35:11  10  ,trend
05:35:11  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
05:35:11  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
05:35:11  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
05:35:11  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
05:35:11  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
05:35:11  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
05:35:11  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
05:35:11  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
05:35:11  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
05:35:11  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
05:35:11  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
05:35:11  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
05:35:11  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
05:35:11  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
05:35:11  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
05:35:11  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
05:35:11  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
05:35:11  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
05:35:11  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
05:35:11  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
05:35:11  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
05:35:11  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
05:35:11  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
05:35:11  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
05:35:11  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
05:35:11  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
05:35:11  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
05:35:11  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
05:35:11  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
05:35:11  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
05:35:11  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
05:35:11  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
05:35:11  43  ,hh  att32
05:35:11  44  ,d   att33
05:35:11  45  ,w   att34
05:35:11  46  ,mpm att35
05:35:11  47  ,mph att36
05:35:11  48  ,trend att37
05:35:11  49  FROM svm6142
05:35:11  50  ORDER BY ydate
05:35:11  51  /

Table created.

Elapsed: 00:00:04.83
05:35:16 SQL> 
05:35:16 SQL> -- rpt
05:35:16 SQL> 
05:35:16 SQL> SELECT
05:35:16   2  pair
05:35:16   3  ,trend
05:35:16   4  ,gatt
05:35:16   5  ,COUNT(pair)
05:35:16   6  ,AVG(g6)
05:35:16   7  FROM svm6162
05:35:16   8  GROUP BY pair,trend,gatt
05:35:16   9  ORDER BY pair,trend,gatt
05:35:16  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5124  -.0021721
aud_usd 	-1 up	      3784 .003757244
aud_usd 	-1		58
aud_usd 	 1 nup	      6675 -.00214869
aud_usd 	 1 up	      3629 .004094651
aud_usd 	 1		14

6 rows selected.

Elapsed: 00:00:00.03
05:35:16 SQL> 
05:35:16 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
05:35:16 SQL> CREATE TABLE modsrc COMPRESS AS
05:35:16   2  SELECT
05:35:16   3  pair
05:35:16   4  ,ydate
05:35:16   5  ,prdate
05:35:16   6  ,trend
05:35:16   7  ,g6
05:35:16   8  ,gatt
05:35:16   9  ,gattn
05:35:16  10  FROM svm6162
05:35:16  11  /

Table created.

Elapsed: 00:00:00.08
05:35:16 SQL> 
05:35:16 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
05:35:16 SQL> 
05:35:16 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
05:35:16 SQL> CREATE TABLE aud_ms610 COMPRESS AS
05:35:16   2  SELECT
05:35:16   3  ydate
05:35:16   4  ,trend aud_trend
05:35:16   5  ,g6    aud_g6
05:35:16   6  ,gatt  aud_gatt
05:35:16   7  ,gattn aud_gattn
05:35:16   8  FROM modsrc
05:35:16   9  /

Table created.

Elapsed: 00:00:00.07
05:35:16 SQL> 
05:35:16 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
05:35:17 SQL> 
05:35:17 SQL> -- I need a copy of the attributes:
05:35:17 SQL> 
05:35:17 SQL> 
05:35:17 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.04
05:35:17 SQL> CREATE TABLE aud_att COMPRESS AS
05:35:17   2  SELECT
05:35:17   3  ydate
05:35:17   4  ,att00 aud_att00
05:35:17   5  ,att01 aud_att01
05:35:17   6  ,att02 aud_att02
05:35:17   7  ,att03 aud_att03
05:35:17   8  ,att04 aud_att04
05:35:17   9  ,att05 aud_att05
05:35:17  10  ,att06 aud_att06
05:35:17  11  ,att07 aud_att07
05:35:17  12  ,att08 aud_att08
05:35:17  13  ,att09 aud_att09
05:35:17  14  ,att10 aud_att10
05:35:17  15  ,att11 aud_att11
05:35:17  16  ,att12 aud_att12
05:35:17  17  ,att13 aud_att13
05:35:17  18  ,att14 aud_att14
05:35:17  19  ,att15 aud_att15
05:35:17  20  ,att16 aud_att16
05:35:17  21  ,att17 aud_att17
05:35:17  22  ,att18 aud_att18
05:35:17  23  ,att19 aud_att19
05:35:17  24  ,att20 aud_att20
05:35:17  25  ,att21 aud_att21
05:35:17  26  ,att22 aud_att22
05:35:17  27  ,att23 aud_att23
05:35:17  28  ,att24 aud_att24
05:35:17  29  ,att25 aud_att25
05:35:17  30  ,att26 aud_att26
05:35:17  31  ,att27 aud_att27
05:35:17  32  ,att28 aud_att28
05:35:17  33  ,att29 aud_att29
05:35:17  34  ,att30 aud_att30
05:35:17  35  ,att31 aud_att31
05:35:17  36  ,att32 aud_att32
05:35:17  37  ,att33 aud_att33
05:35:17  38  ,att34 aud_att34
05:35:17  39  ,att35 aud_att35
05:35:17  40  ,att36 aud_att36
05:35:17  41  ,att37 aud_att37
05:35:17  42  FROM svm6162
05:35:17  43  /

Table created.

Elapsed: 00:00:00.19
05:35:17 SQL> 
05:35:17 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
05:35:17 SQL> 
05:35:17 SQL> -- rpt
05:35:17 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19284

Elapsed: 00:00:00.87
05:35:18 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19284

Elapsed: 00:00:00.00
05:35:18 SQL> 
05:35:18 SQL> --
05:35:18 SQL> -- gbp610.sql
05:35:18 SQL> --
05:35:18 SQL> 
05:35:18 SQL> -- Creates views and tables for backtesting a forex SVM strategy
05:35:18 SQL> 
05:35:18 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.51
05:35:19 SQL> 
05:35:19 SQL> -- I created di5min here:
05:35:19 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
05:35:19 SQL> 
05:35:19 SQL> CREATE OR REPLACE VIEW svm6102 AS
05:35:19   2  SELECT
05:35:19   3  pair
05:35:19   4  ,ydate
05:35:19   5  ,prdate
05:35:19   6  ,rownum rnum -- acts as t in my time-series
05:35:19   7  ,clse
05:35:19   8  -- Derive a bunch of attributes from clse, the latest price:
05:35:19   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
05:35:19  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
05:35:19  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
05:35:19  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
05:35:19  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
05:35:19  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
05:35:19  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
05:35:19  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
05:35:19  17  --
05:35:19  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
05:35:19  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
05:35:19  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
05:35:19  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
05:35:19  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
05:35:19  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
05:35:19  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
05:35:19  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
05:35:19  26  --
05:35:19  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
05:35:19  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
05:35:19  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
05:35:19  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
05:35:19  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
05:35:19  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
05:35:19  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
05:35:19  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
05:35:19  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
05:35:19  36  FROM di5min WHERE pair LIKE'%gbp%'
05:35:19  37  AND ydate > sysdate - 95
05:35:19  38  ORDER BY ydate
05:35:19  39  /

View created.

Elapsed: 00:00:00.04
05:35:19 SQL> 
05:35:19 SQL> -- rpt
05:35:19 SQL> 
05:35:19 SQL> SELECT
05:35:19   2  pair
05:35:19   3  ,COUNT(pair)
05:35:19   4  ,MIN(clse),MAX(clse)
05:35:19   5  ,MIN(avg6),MAX(avg6)
05:35:19   6  ,MIN(ydate),MAX(ydate)
05:35:19   7  FROM svm6102
05:35:19   8  GROUP BY pair
05:35:19   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19286   1.535825	   1.6295 1.53821404 1.62716986 2010-09-23 05:40:01 2010-12-27 05:30:00

Elapsed: 00:00:00.84
05:35:20 SQL> 
05:35:20 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
05:35:20 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.26
05:35:20 SQL> CREATE TABLE svm6122 COMPRESS AS
05:35:20   2  SELECT
05:35:20   3  pair
05:35:20   4  ,ydate
05:35:20   5  ,prdate
05:35:20   6  ,clse
05:35:20   7  -- g6 is important. I want to predict g6:
05:35:20   8  ,ld6 - clse g6
05:35:20   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
05:35:20  10  -- I want more attributes from the ones I derived above:
05:35:20  11  -- clse relation to moving-min
05:35:20  12  ,clse-min4  cm4
05:35:20  13  ,clse-min6  cm6
05:35:20  14  ,clse-min8  cm8
05:35:20  15  ,clse-min10 cm10
05:35:20  16  ,clse-min12 cm12
05:35:20  17  ,clse-min14 cm14
05:35:20  18  ,clse-min16 cm16
05:35:20  19  ,clse-min18 cm18
05:35:20  20  -- clse relation to moving-avg
05:35:20  21  ,clse-avg4  ca4
05:35:20  22  ,clse-avg6  ca6
05:35:20  23  ,clse-avg8  ca8
05:35:20  24  ,clse-avg10 ca10
05:35:20  25  ,clse-avg12 ca12
05:35:20  26  ,clse-avg14 ca14
05:35:20  27  ,clse-avg16 ca16
05:35:20  28  ,clse-avg18 ca18
05:35:20  29  -- clse relation to moving-max
05:35:20  30  ,clse-max4  cx4
05:35:20  31  ,clse-max6  cx6
05:35:20  32  ,clse-max8  cx8
05:35:20  33  ,clse-max10 cx10
05:35:20  34  ,clse-max12 cx12
05:35:20  35  ,clse-max14 cx14
05:35:20  36  ,clse-max16 cx16
05:35:20  37  ,clse-max18 cx18
05:35:20  38  -- Derive more attributes.
05:35:20  39  -- I want to use CORR() here to help SVM see the shape of the series.
05:35:20  40  -- But COVAR_POP is more stable:
05:35:20  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
05:35:20  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
05:35:20  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
05:35:20  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
05:35:20  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
05:35:20  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
05:35:20  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
05:35:20  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
05:35:20  49  -- Derive date related attributes:
05:35:20  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
05:35:20  51  ,0+TO_CHAR(ydate,'D')d
05:35:20  52  ,0+TO_CHAR(ydate,'W')w
05:35:20  53  -- mpm stands for minutes-past-midnight:
05:35:20  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
05:35:20  55  -- mph stands for minutes-past-hour:
05:35:20  56  ,0+TO_CHAR(ydate,'MI')mph
05:35:20  57  FROM svm6102
05:35:20  58  ORDER BY ydate
05:35:20  59  /

Table created.

Elapsed: 00:00:01.97
05:35:22 SQL> 
05:35:22 SQL> -- rpt
05:35:22 SQL> 
05:35:22 SQL> SELECT
05:35:22   2  pair
05:35:22   3  ,COUNT(pair)
05:35:22   4  ,MIN(clse),MAX(clse)
05:35:22   5  ,MIN(ydate),MAX(ydate)
05:35:22   6  FROM svm6122
05:35:22   7  GROUP BY pair
05:35:22   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19286   1.535825	   1.6295 2010-09-23 05:40:01 2010-12-27 05:30:00

Elapsed: 00:00:00.04
05:35:22 SQL> 
05:35:22 SQL> -- Prepare for derivation of NTILE based params:
05:35:22 SQL> 
05:35:22 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
05:35:22 SQL> CREATE TABLE svm6142 COMPRESS AS
05:35:22   2  SELECT
05:35:22   3  pair
05:35:22   4  ,ydate
05:35:22   5  ,prdate
05:35:22   6  ,clse
05:35:22   7  ,g6
05:35:22   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
05:35:22   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
05:35:22  10  ,CASE WHEN trend IS NULL THEN 1
05:35:22  11  	    WHEN trend =0      THEN 1
05:35:22  12  	    ELSE trend END trend
05:35:22  13  ,cm4
05:35:22  14  ,cm6
05:35:22  15  ,cm8
05:35:22  16  ,cm10
05:35:22  17  ,cm12
05:35:22  18  ,cm14
05:35:22  19  ,cm16
05:35:22  20  ,cm18
05:35:22  21  --
05:35:22  22  ,ca4
05:35:22  23  ,ca6
05:35:22  24  ,ca8
05:35:22  25  ,ca10
05:35:22  26  ,ca12
05:35:22  27  ,ca14
05:35:22  28  ,ca16
05:35:22  29  ,ca18
05:35:22  30  --
05:35:22  31  ,cx4
05:35:22  32  ,cx6
05:35:22  33  ,cx8
05:35:22  34  ,cx10
05:35:22  35  ,cx12
05:35:22  36  ,cx14
05:35:22  37  ,cx16
05:35:22  38  ,cx18
05:35:22  39  --
05:35:22  40  ,crr4
05:35:22  41  ,crr6
05:35:22  42  ,crr8
05:35:22  43  ,crr10
05:35:22  44  ,crr12
05:35:22  45  ,crr14
05:35:22  46  ,crr16
05:35:22  47  ,crr18
05:35:22  48  --
05:35:22  49  ,hh
05:35:22  50  ,d
05:35:22  51  ,w
05:35:22  52  ,mpm
05:35:22  53  ,mph
05:35:22  54  FROM svm6122
05:35:22  55  ORDER BY ydate
05:35:22  56  /

Table created.

Elapsed: 00:00:00.36
05:35:22 SQL> 
05:35:22 SQL> -- rpt
05:35:22 SQL> 
05:35:22 SQL> SELECT
05:35:22   2  pair
05:35:22   3  ,trend
05:35:22   4  ,gatt
05:35:22   5  ,COUNT(pair)
05:35:22   6  ,AVG(g6)
05:35:22   7  FROM svm6142
05:35:22   8  GROUP BY pair,trend,gatt
05:35:22   9  ORDER BY pair,trend,gatt
05:35:22  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6223 -.00254224
gbp_usd 	-1 up	      3401 .004342958
gbp_usd 	-1		72
gbp_usd 	 1 nup	      6135  -.0026024
gbp_usd 	 1 up	      3455  .00439987

Elapsed: 00:00:00.04
05:35:22 SQL> 
05:35:22 SQL> 
05:35:22 SQL> -- Derive NTILE based params:
05:35:22 SQL> 
05:35:22 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.17
05:35:23 SQL> CREATE TABLE svm6162 COMPRESS AS
05:35:23   2  SELECT
05:35:23   3  pair
05:35:23   4  ,ydate
05:35:23   5  ,prdate
05:35:23   6  ,clse
05:35:23   7  ,g6
05:35:23   8  ,gatt
05:35:23   9  ,gattn
05:35:23  10  ,trend
05:35:23  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
05:35:23  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
05:35:23  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
05:35:23  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
05:35:23  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
05:35:23  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
05:35:23  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
05:35:23  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
05:35:23  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
05:35:23  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
05:35:23  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
05:35:23  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
05:35:23  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
05:35:23  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
05:35:23  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
05:35:23  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
05:35:23  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
05:35:23  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
05:35:23  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
05:35:23  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
05:35:23  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
05:35:23  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
05:35:23  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
05:35:23  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
05:35:23  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
05:35:23  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
05:35:23  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
05:35:23  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
05:35:23  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
05:35:23  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
05:35:23  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
05:35:23  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
05:35:23  43  ,hh  att32
05:35:23  44  ,d   att33
05:35:23  45  ,w   att34
05:35:23  46  ,mpm att35
05:35:23  47  ,mph att36
05:35:23  48  ,trend att37
05:35:23  49  FROM svm6142
05:35:23  50  ORDER BY ydate
05:35:23  51  /

Table created.

Elapsed: 00:00:04.64
05:35:27 SQL> 
05:35:27 SQL> -- rpt
05:35:27 SQL> 
05:35:27 SQL> SELECT
05:35:27   2  pair
05:35:27   3  ,trend
05:35:27   4  ,gatt
05:35:27   5  ,COUNT(pair)
05:35:27   6  ,AVG(g6)
05:35:27   7  FROM svm6162
05:35:27   8  GROUP BY pair,trend,gatt
05:35:27   9  ORDER BY pair,trend,gatt
05:35:27  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6223 -.00254224
gbp_usd 	-1 up	      3401 .004342958
gbp_usd 	-1		72
gbp_usd 	 1 nup	      6135  -.0026024
gbp_usd 	 1 up	      3455  .00439987

Elapsed: 00:00:00.03
05:35:27 SQL> 
05:35:27 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
05:35:27 SQL> CREATE TABLE modsrc COMPRESS AS
05:35:27   2  SELECT
05:35:27   3  pair
05:35:27   4  ,ydate
05:35:27   5  ,prdate
05:35:27   6  ,trend
05:35:27   7  ,g6
05:35:27   8  ,gatt
05:35:27   9  ,gattn
05:35:27  10  FROM svm6162
05:35:27  11  /

Table created.

Elapsed: 00:00:00.09
05:35:28 SQL> 
05:35:28 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
05:35:28 SQL> 
05:35:28 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
05:35:28 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
05:35:28   2  SELECT
05:35:28   3  ydate
05:35:28   4  ,trend gbp_trend
05:35:28   5  ,g6    gbp_g6
05:35:28   6  ,gatt  gbp_gatt
05:35:28   7  ,gattn gbp_gattn
05:35:28   8  FROM modsrc
05:35:28   9  /

Table created.

Elapsed: 00:00:00.07
05:35:28 SQL> 
05:35:28 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
05:35:28 SQL> 
05:35:28 SQL> -- I need a copy of the attributes:
05:35:28 SQL> 
05:35:28 SQL> 
05:35:28 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.04
05:35:28 SQL> CREATE TABLE gbp_att COMPRESS AS
05:35:28   2  SELECT
05:35:28   3  ydate
05:35:28   4  ,att00 gbp_att00
05:35:28   5  ,att01 gbp_att01
05:35:28   6  ,att02 gbp_att02
05:35:28   7  ,att03 gbp_att03
05:35:28   8  ,att04 gbp_att04
05:35:28   9  ,att05 gbp_att05
05:35:28  10  ,att06 gbp_att06
05:35:28  11  ,att07 gbp_att07
05:35:28  12  ,att08 gbp_att08
05:35:28  13  ,att09 gbp_att09
05:35:28  14  ,att10 gbp_att10
05:35:28  15  ,att11 gbp_att11
05:35:28  16  ,att12 gbp_att12
05:35:28  17  ,att13 gbp_att13
05:35:28  18  ,att14 gbp_att14
05:35:28  19  ,att15 gbp_att15
05:35:28  20  ,att16 gbp_att16
05:35:28  21  ,att17 gbp_att17
05:35:28  22  ,att18 gbp_att18
05:35:28  23  ,att19 gbp_att19
05:35:28  24  ,att20 gbp_att20
05:35:28  25  ,att21 gbp_att21
05:35:28  26  ,att22 gbp_att22
05:35:28  27  ,att23 gbp_att23
05:35:28  28  ,att24 gbp_att24
05:35:28  29  ,att25 gbp_att25
05:35:28  30  ,att26 gbp_att26
05:35:28  31  ,att27 gbp_att27
05:35:28  32  ,att28 gbp_att28
05:35:28  33  ,att29 gbp_att29
05:35:28  34  ,att30 gbp_att30
05:35:28  35  ,att31 gbp_att31
05:35:28  36  ,att32 gbp_att32
05:35:28  37  ,att33 gbp_att33
05:35:28  38  ,att34 gbp_att34
05:35:28  39  ,att35 gbp_att35
05:35:28  40  ,att36 gbp_att36
05:35:28  41  ,att37 gbp_att37
05:35:28  42  FROM svm6162
05:35:28  43  /

Table created.

Elapsed: 00:00:00.17
05:35:28 SQL> 
05:35:28 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
05:35:29 SQL> 
05:35:29 SQL> -- rpt
05:35:29 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19286

Elapsed: 00:00:00.82
05:35:29 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19286

Elapsed: 00:00:00.00
05:35:29 SQL> 
05:35:29 SQL> --
05:35:29 SQL> -- jpy610.sql
05:35:29 SQL> --
05:35:29 SQL> 
05:35:29 SQL> -- Creates views and tables for backtesting a forex SVM strategy
05:35:29 SQL> 
05:35:29 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.48
05:35:30 SQL> 
05:35:30 SQL> -- I created di5min here:
05:35:30 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
05:35:30 SQL> 
05:35:30 SQL> CREATE OR REPLACE VIEW svm6102 AS
05:35:30   2  SELECT
05:35:30   3  pair
05:35:30   4  ,ydate
05:35:30   5  ,prdate
05:35:30   6  ,rownum rnum -- acts as t in my time-series
05:35:30   7  ,clse
05:35:30   8  -- Derive a bunch of attributes from clse, the latest price:
05:35:30   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
05:35:30  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
05:35:30  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
05:35:30  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
05:35:30  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
05:35:30  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
05:35:30  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
05:35:30  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
05:35:30  17  --
05:35:30  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
05:35:30  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
05:35:30  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
05:35:30  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
05:35:30  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
05:35:30  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
05:35:30  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
05:35:30  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
05:35:30  26  --
05:35:30  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
05:35:30  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
05:35:30  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
05:35:30  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
05:35:30  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
05:35:30  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
05:35:30  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
05:35:30  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
05:35:30  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
05:35:30  36  FROM di5min WHERE pair LIKE'%jpy%'
05:35:30  37  AND ydate > sysdate - 95
05:35:30  38  ORDER BY ydate
05:35:30  39  /

View created.

Elapsed: 00:00:00.05
05:35:30 SQL> 
05:35:30 SQL> -- rpt
05:35:30 SQL> 
05:35:30 SQL> SELECT
05:35:30   2  pair
05:35:30   3  ,COUNT(pair)
05:35:30   4  ,MIN(clse),MAX(clse)
05:35:30   5  ,MIN(avg6),MAX(avg6)
05:35:30   6  ,MIN(ydate),MAX(ydate)
05:35:30   7  FROM svm6102
05:35:30   8  GROUP BY pair
05:35:30   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19285	 80.25	     85.2 80.3595205 84.7693836 2010-09-23 05:40:01 2010-12-27 05:30:00

Elapsed: 00:00:00.87
05:35:31 SQL> 
05:35:31 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
05:35:31 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.23
05:35:31 SQL> CREATE TABLE svm6122 COMPRESS AS
05:35:31   2  SELECT
05:35:31   3  pair
05:35:31   4  ,ydate
05:35:31   5  ,prdate
05:35:31   6  ,clse
05:35:31   7  -- g6 is important. I want to predict g6:
05:35:31   8  ,ld6 - clse g6
05:35:31   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
05:35:31  10  -- I want more attributes from the ones I derived above:
05:35:31  11  -- clse relation to moving-min
05:35:31  12  ,clse-min4  cm4
05:35:31  13  ,clse-min6  cm6
05:35:31  14  ,clse-min8  cm8
05:35:31  15  ,clse-min10 cm10
05:35:31  16  ,clse-min12 cm12
05:35:31  17  ,clse-min14 cm14
05:35:31  18  ,clse-min16 cm16
05:35:31  19  ,clse-min18 cm18
05:35:31  20  -- clse relation to moving-avg
05:35:31  21  ,clse-avg4  ca4
05:35:31  22  ,clse-avg6  ca6
05:35:31  23  ,clse-avg8  ca8
05:35:31  24  ,clse-avg10 ca10
05:35:31  25  ,clse-avg12 ca12
05:35:31  26  ,clse-avg14 ca14
05:35:31  27  ,clse-avg16 ca16
05:35:31  28  ,clse-avg18 ca18
05:35:31  29  -- clse relation to moving-max
05:35:31  30  ,clse-max4  cx4
05:35:31  31  ,clse-max6  cx6
05:35:31  32  ,clse-max8  cx8
05:35:31  33  ,clse-max10 cx10
05:35:31  34  ,clse-max12 cx12
05:35:31  35  ,clse-max14 cx14
05:35:31  36  ,clse-max16 cx16
05:35:31  37  ,clse-max18 cx18
05:35:31  38  -- Derive more attributes.
05:35:31  39  -- I want to use CORR() here to help SVM see the shape of the series.
05:35:31  40  -- But COVAR_POP is more stable:
05:35:31  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
05:35:31  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
05:35:31  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
05:35:31  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
05:35:31  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
05:35:31  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
05:35:31  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
05:35:31  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
05:35:31  49  -- Derive date related attributes:
05:35:31  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
05:35:31  51  ,0+TO_CHAR(ydate,'D')d
05:35:31  52  ,0+TO_CHAR(ydate,'W')w
05:35:31  53  -- mpm stands for minutes-past-midnight:
05:35:31  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
05:35:31  55  -- mph stands for minutes-past-hour:
05:35:31  56  ,0+TO_CHAR(ydate,'MI')mph
05:35:31  57  FROM svm6102
05:35:31  58  ORDER BY ydate
05:35:31  59  /

Table created.

Elapsed: 00:00:02.02
05:35:33 SQL> 
05:35:33 SQL> -- rpt
05:35:33 SQL> 
05:35:33 SQL> SELECT
05:35:33   2  pair
05:35:33   3  ,COUNT(pair)
05:35:33   4  ,MIN(clse),MAX(clse)
05:35:33   5  ,MIN(ydate),MAX(ydate)
05:35:33   6  FROM svm6122
05:35:33   7  GROUP BY pair
05:35:33   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19285	 80.25	     85.2 2010-09-23 05:40:01 2010-12-27 05:30:00

Elapsed: 00:00:00.04
05:35:33 SQL> 
05:35:33 SQL> -- Prepare for derivation of NTILE based params:
05:35:33 SQL> 
05:35:33 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.18
05:35:33 SQL> CREATE TABLE svm6142 COMPRESS AS
05:35:33   2  SELECT
05:35:33   3  pair
05:35:33   4  ,ydate
05:35:33   5  ,prdate
05:35:33   6  ,clse
05:35:33   7  ,g6
05:35:33   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
05:35:33   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
05:35:33  10  ,CASE WHEN trend IS NULL THEN 1
05:35:33  11  	    WHEN trend =0      THEN 1
05:35:33  12  	    ELSE trend END trend
05:35:33  13  ,cm4
05:35:33  14  ,cm6
05:35:33  15  ,cm8
05:35:33  16  ,cm10
05:35:33  17  ,cm12
05:35:33  18  ,cm14
05:35:33  19  ,cm16
05:35:33  20  ,cm18
05:35:33  21  --
05:35:33  22  ,ca4
05:35:33  23  ,ca6
05:35:33  24  ,ca8
05:35:33  25  ,ca10
05:35:33  26  ,ca12
05:35:33  27  ,ca14
05:35:33  28  ,ca16
05:35:33  29  ,ca18
05:35:33  30  --
05:35:33  31  ,cx4
05:35:33  32  ,cx6
05:35:33  33  ,cx8
05:35:33  34  ,cx10
05:35:33  35  ,cx12
05:35:33  36  ,cx14
05:35:33  37  ,cx16
05:35:33  38  ,cx18
05:35:33  39  --
05:35:33  40  ,crr4
05:35:33  41  ,crr6
05:35:33  42  ,crr8
05:35:33  43  ,crr10
05:35:33  44  ,crr12
05:35:33  45  ,crr14
05:35:33  46  ,crr16
05:35:33  47  ,crr18
05:35:33  48  --
05:35:33  49  ,hh
05:35:33  50  ,d
05:35:33  51  ,w
05:35:33  52  ,mpm
05:35:33  53  ,mph
05:35:33  54  FROM svm6122
05:35:33  55  ORDER BY ydate
05:35:33  56  /

Table created.

Elapsed: 00:00:00.34
05:35:34 SQL> 
05:35:34 SQL> -- rpt
05:35:34 SQL> 
05:35:34 SQL> SELECT
05:35:34   2  pair
05:35:34   3  ,trend
05:35:34   4  ,gatt
05:35:34   5  ,COUNT(pair)
05:35:34   6  ,AVG(g6)
05:35:34   7  FROM svm6142
05:35:34   8  GROUP BY pair,trend,gatt
05:35:34   9  ORDER BY pair,trend,gatt
05:35:34  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5052 -.15627811
usd_jpy 	-1 up	      4931 .160318244
usd_jpy 	-1		15
usd_jpy 	 1 nup	      5072 -.16001727
usd_jpy 	 1 up	      4158 .167327217
usd_jpy 	 1		57

6 rows selected.

Elapsed: 00:00:00.04
05:35:34 SQL> 
05:35:34 SQL> 
05:35:34 SQL> -- Derive NTILE based params:
05:35:34 SQL> 
05:35:34 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
05:35:34 SQL> CREATE TABLE svm6162 COMPRESS AS
05:35:34   2  SELECT
05:35:34   3  pair
05:35:34   4  ,ydate
05:35:34   5  ,prdate
05:35:34   6  ,clse
05:35:34   7  ,g6
05:35:34   8  ,gatt
05:35:34   9  ,gattn
05:35:34  10  ,trend
05:35:34  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
05:35:34  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
05:35:34  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
05:35:34  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
05:35:34  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
05:35:34  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
05:35:34  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
05:35:34  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
05:35:34  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
05:35:34  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
05:35:34  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
05:35:34  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
05:35:34  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
05:35:34  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
05:35:34  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
05:35:34  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
05:35:34  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
05:35:34  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
05:35:34  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
05:35:34  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
05:35:34  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
05:35:34  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
05:35:34  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
05:35:34  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
05:35:34  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
05:35:34  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
05:35:34  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
05:35:34  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
05:35:34  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
05:35:34  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
05:35:34  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
05:35:34  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
05:35:34  43  ,hh  att32
05:35:34  44  ,d   att33
05:35:34  45  ,w   att34
05:35:34  46  ,mpm att35
05:35:34  47  ,mph att36
05:35:34  48  ,trend att37
05:35:34  49  FROM svm6142
05:35:34  50  ORDER BY ydate
05:35:34  51  /

Table created.

Elapsed: 00:00:04.75
05:35:39 SQL> 
05:35:39 SQL> -- rpt
05:35:39 SQL> 
05:35:39 SQL> SELECT
05:35:39   2  pair
05:35:39   3  ,trend
05:35:39   4  ,gatt
05:35:39   5  ,COUNT(pair)
05:35:39   6  ,AVG(g6)
05:35:39   7  FROM svm6162
05:35:39   8  GROUP BY pair,trend,gatt
05:35:39   9  ORDER BY pair,trend,gatt
05:35:39  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5052 -.15627811
usd_jpy 	-1 up	      4931 .160318244
usd_jpy 	-1		15
usd_jpy 	 1 nup	      5072 -.16001727
usd_jpy 	 1 up	      4158 .167327217
usd_jpy 	 1		57

6 rows selected.

Elapsed: 00:00:00.03
05:35:39 SQL> 
05:35:39 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.16
05:35:39 SQL> CREATE TABLE modsrc COMPRESS AS
05:35:39   2  SELECT
05:35:39   3  pair
05:35:39   4  ,ydate
05:35:39   5  ,prdate
05:35:39   6  ,trend
05:35:39   7  ,g6
05:35:39   8  ,gatt
05:35:39   9  ,gattn
05:35:39  10  FROM svm6162
05:35:39  11  /

Table created.

Elapsed: 00:00:00.08
05:35:39 SQL> 
05:35:39 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
05:35:39 SQL> 
05:35:39 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
05:35:39 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
05:35:39   2  SELECT
05:35:39   3  ydate
05:35:39   4  ,trend jpy_trend
05:35:39   5  ,g6    jpy_g6
05:35:39   6  ,gatt  jpy_gatt
05:35:39   7  ,gattn jpy_gattn
05:35:39   8  FROM modsrc
05:35:39   9  /

Table created.

Elapsed: 00:00:00.08
05:35:39 SQL> 
05:35:39 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
05:35:39 SQL> 
05:35:39 SQL> -- I need a copy of the attributes:
05:35:39 SQL> 
05:35:39 SQL> 
05:35:39 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.04
05:35:39 SQL> CREATE TABLE jpy_att COMPRESS AS
05:35:39   2  SELECT
05:35:39   3  ydate
05:35:39   4  ,att00 jpy_att00
05:35:39   5  ,att01 jpy_att01
05:35:39   6  ,att02 jpy_att02
05:35:39   7  ,att03 jpy_att03
05:35:39   8  ,att04 jpy_att04
05:35:39   9  ,att05 jpy_att05
05:35:39  10  ,att06 jpy_att06
05:35:39  11  ,att07 jpy_att07
05:35:39  12  ,att08 jpy_att08
05:35:39  13  ,att09 jpy_att09
05:35:39  14  ,att10 jpy_att10
05:35:39  15  ,att11 jpy_att11
05:35:39  16  ,att12 jpy_att12
05:35:39  17  ,att13 jpy_att13
05:35:39  18  ,att14 jpy_att14
05:35:39  19  ,att15 jpy_att15
05:35:39  20  ,att16 jpy_att16
05:35:39  21  ,att17 jpy_att17
05:35:39  22  ,att18 jpy_att18
05:35:39  23  ,att19 jpy_att19
05:35:39  24  ,att20 jpy_att20
05:35:39  25  ,att21 jpy_att21
05:35:39  26  ,att22 jpy_att22
05:35:39  27  ,att23 jpy_att23
05:35:39  28  ,att24 jpy_att24
05:35:39  29  ,att25 jpy_att25
05:35:39  30  ,att26 jpy_att26
05:35:39  31  ,att27 jpy_att27
05:35:39  32  ,att28 jpy_att28
05:35:39  33  ,att29 jpy_att29
05:35:39  34  ,att30 jpy_att30
05:35:39  35  ,att31 jpy_att31
05:35:39  36  ,att32 jpy_att32
05:35:39  37  ,att33 jpy_att33
05:35:39  38  ,att34 jpy_att34
05:35:39  39  ,att35 jpy_att35
05:35:39  40  ,att36 jpy_att36
05:35:39  41  ,att37 jpy_att37
05:35:39  42  FROM svm6162
05:35:39  43  /

Table created.

Elapsed: 00:00:00.17
05:35:40 SQL> 
05:35:40 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.42
05:35:40 SQL> 
05:35:40 SQL> -- rpt
05:35:40 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19285

Elapsed: 00:00:00.89
05:35:41 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19285

Elapsed: 00:00:00.00
05:35:41 SQL> 
05:35:41 SQL> --
05:35:41 SQL> -- cad610.sql
05:35:41 SQL> --
05:35:41 SQL> 
05:35:41 SQL> -- Creates views and tables for backtesting a forex SVM strategy
05:35:41 SQL> 
05:35:41 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.80
05:35:42 SQL> 
05:35:42 SQL> -- I created di5min here:
05:35:42 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
05:35:42 SQL> 
05:35:42 SQL> CREATE OR REPLACE VIEW svm6102 AS
05:35:42   2  SELECT
05:35:42   3  pair
05:35:42   4  ,ydate
05:35:42   5  ,prdate
05:35:42   6  ,rownum rnum -- acts as t in my time-series
05:35:42   7  ,clse
05:35:42   8  -- Derive a bunch of attributes from clse, the latest price:
05:35:42   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
05:35:42  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
05:35:42  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
05:35:42  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
05:35:42  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
05:35:42  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
05:35:42  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
05:35:42  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
05:35:42  17  --
05:35:42  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
05:35:42  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
05:35:42  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
05:35:42  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
05:35:42  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
05:35:42  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
05:35:42  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
05:35:42  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
05:35:42  26  --
05:35:42  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
05:35:42  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
05:35:42  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
05:35:42  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
05:35:42  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
05:35:42  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
05:35:42  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
05:35:42  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
05:35:42  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
05:35:42  36  FROM di5min WHERE pair LIKE'%cad%'
05:35:42  37  AND ydate > sysdate - 95
05:35:42  38  ORDER BY ydate
05:35:42  39  /

View created.

Elapsed: 00:00:00.05
05:35:42 SQL> 
05:35:42 SQL> -- rpt
05:35:42 SQL> 
05:35:42 SQL> SELECT
05:35:42   2  pair
05:35:42   3  ,COUNT(pair)
05:35:42   4  ,MIN(clse),MAX(clse)
05:35:42   5  ,MIN(avg6),MAX(avg6)
05:35:42   6  ,MIN(ydate),MAX(ydate)
05:35:42   7  FROM svm6102
05:35:42   8  GROUP BY pair
05:35:42   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19283	 .9981	   1.0371 .999404795 1.03438904 2010-09-23 05:40:01 2010-12-27 05:30:00

Elapsed: 00:00:00.81
05:35:43 SQL> 
05:35:43 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
05:35:43 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.26
05:35:43 SQL> CREATE TABLE svm6122 COMPRESS AS
05:35:43   2  SELECT
05:35:43   3  pair
05:35:43   4  ,ydate
05:35:43   5  ,prdate
05:35:43   6  ,clse
05:35:43   7  -- g6 is important. I want to predict g6:
05:35:43   8  ,ld6 - clse g6
05:35:43   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
05:35:43  10  -- I want more attributes from the ones I derived above:
05:35:43  11  -- clse relation to moving-min
05:35:43  12  ,clse-min4  cm4
05:35:43  13  ,clse-min6  cm6
05:35:43  14  ,clse-min8  cm8
05:35:43  15  ,clse-min10 cm10
05:35:43  16  ,clse-min12 cm12
05:35:43  17  ,clse-min14 cm14
05:35:43  18  ,clse-min16 cm16
05:35:43  19  ,clse-min18 cm18
05:35:43  20  -- clse relation to moving-avg
05:35:43  21  ,clse-avg4  ca4
05:35:43  22  ,clse-avg6  ca6
05:35:43  23  ,clse-avg8  ca8
05:35:43  24  ,clse-avg10 ca10
05:35:43  25  ,clse-avg12 ca12
05:35:43  26  ,clse-avg14 ca14
05:35:43  27  ,clse-avg16 ca16
05:35:43  28  ,clse-avg18 ca18
05:35:43  29  -- clse relation to moving-max
05:35:43  30  ,clse-max4  cx4
05:35:43  31  ,clse-max6  cx6
05:35:43  32  ,clse-max8  cx8
05:35:43  33  ,clse-max10 cx10
05:35:43  34  ,clse-max12 cx12
05:35:43  35  ,clse-max14 cx14
05:35:43  36  ,clse-max16 cx16
05:35:43  37  ,clse-max18 cx18
05:35:43  38  -- Derive more attributes.
05:35:43  39  -- I want to use CORR() here to help SVM see the shape of the series.
05:35:43  40  -- But COVAR_POP is more stable:
05:35:43  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
05:35:43  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
05:35:43  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
05:35:43  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
05:35:43  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
05:35:43  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
05:35:43  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
05:35:43  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
05:35:43  49  -- Derive date related attributes:
05:35:43  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
05:35:43  51  ,0+TO_CHAR(ydate,'D')d
05:35:43  52  ,0+TO_CHAR(ydate,'W')w
05:35:43  53  -- mpm stands for minutes-past-midnight:
05:35:43  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
05:35:43  55  -- mph stands for minutes-past-hour:
05:35:43  56  ,0+TO_CHAR(ydate,'MI')mph
05:35:43  57  FROM svm6102
05:35:43  58  ORDER BY ydate
05:35:43  59  /

Table created.

Elapsed: 00:00:02.02
05:35:45 SQL> 
05:35:45 SQL> -- rpt
05:35:45 SQL> 
05:35:45 SQL> SELECT
05:35:45   2  pair
05:35:45   3  ,COUNT(pair)
05:35:45   4  ,MIN(clse),MAX(clse)
05:35:45   5  ,MIN(ydate),MAX(ydate)
05:35:45   6  FROM svm6122
05:35:45   7  GROUP BY pair
05:35:45   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19283	 .9981	   1.0371 2010-09-23 05:40:01 2010-12-27 05:30:00

Elapsed: 00:00:00.03
05:35:45 SQL> 
05:35:45 SQL> -- Prepare for derivation of NTILE based params:
05:35:45 SQL> 
05:35:45 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.34
05:35:45 SQL> CREATE TABLE svm6142 COMPRESS AS
05:35:45   2  SELECT
05:35:45   3  pair
05:35:45   4  ,ydate
05:35:45   5  ,prdate
05:35:45   6  ,clse
05:35:45   7  ,g6
05:35:45   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
05:35:45   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
05:35:45  10  ,CASE WHEN trend IS NULL THEN 1
05:35:45  11  	    WHEN trend =0      THEN 1
05:35:45  12  	    ELSE trend END trend
05:35:45  13  ,cm4
05:35:45  14  ,cm6
05:35:45  15  ,cm8
05:35:45  16  ,cm10
05:35:45  17  ,cm12
05:35:45  18  ,cm14
05:35:45  19  ,cm16
05:35:45  20  ,cm18
05:35:45  21  --
05:35:45  22  ,ca4
05:35:45  23  ,ca6
05:35:45  24  ,ca8
05:35:45  25  ,ca10
05:35:45  26  ,ca12
05:35:45  27  ,ca14
05:35:45  28  ,ca16
05:35:45  29  ,ca18
05:35:45  30  --
05:35:45  31  ,cx4
05:35:45  32  ,cx6
05:35:45  33  ,cx8
05:35:45  34  ,cx10
05:35:45  35  ,cx12
05:35:45  36  ,cx14
05:35:45  37  ,cx16
05:35:45  38  ,cx18
05:35:45  39  --
05:35:45  40  ,crr4
05:35:45  41  ,crr6
05:35:45  42  ,crr8
05:35:45  43  ,crr10
05:35:45  44  ,crr12
05:35:45  45  ,crr14
05:35:45  46  ,crr16
05:35:45  47  ,crr18
05:35:45  48  --
05:35:45  49  ,hh
05:35:45  50  ,d
05:35:45  51  ,w
05:35:45  52  ,mpm
05:35:45  53  ,mph
05:35:45  54  FROM svm6122
05:35:45  55  ORDER BY ydate
05:35:45  56  /

Table created.

Elapsed: 00:00:00.36
05:35:46 SQL> 
05:35:46 SQL> -- rpt
05:35:46 SQL> 
05:35:46 SQL> SELECT
05:35:46   2  pair
05:35:46   3  ,trend
05:35:46   4  ,gatt
05:35:46   5  ,COUNT(pair)
05:35:46   6  ,AVG(g6)
05:35:46   7  FROM svm6142
05:35:46   8  GROUP BY pair,trend,gatt
05:35:46   9  ORDER BY pair,trend,gatt
05:35:46  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7124 -.00136424
usd_cad 	-1 up	      3058 .003145179
usd_cad 	-1		20
usd_cad 	 1 nup	      6516 -.00163501
usd_cad 	 1 up	      2513 .003610941
usd_cad 	 1		52

6 rows selected.

Elapsed: 00:00:00.04
05:35:46 SQL> 
05:35:46 SQL> 
05:35:46 SQL> -- Derive NTILE based params:
05:35:46 SQL> 
05:35:46 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
05:35:46 SQL> CREATE TABLE svm6162 COMPRESS AS
05:35:46   2  SELECT
05:35:46   3  pair
05:35:46   4  ,ydate
05:35:46   5  ,prdate
05:35:46   6  ,clse
05:35:46   7  ,g6
05:35:46   8  ,gatt
05:35:46   9  ,gattn
05:35:46  10  ,trend
05:35:46  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
05:35:46  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
05:35:46  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
05:35:46  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
05:35:46  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
05:35:46  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
05:35:46  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
05:35:46  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
05:35:46  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
05:35:46  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
05:35:46  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
05:35:46  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
05:35:46  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
05:35:46  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
05:35:46  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
05:35:46  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
05:35:46  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
05:35:46  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
05:35:46  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
05:35:46  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
05:35:46  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
05:35:46  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
05:35:46  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
05:35:46  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
05:35:46  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
05:35:46  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
05:35:46  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
05:35:46  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
05:35:46  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
05:35:46  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
05:35:46  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
05:35:46  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
05:35:46  43  ,hh  att32
05:35:46  44  ,d   att33
05:35:46  45  ,w   att34
05:35:46  46  ,mpm att35
05:35:46  47  ,mph att36
05:35:46  48  ,trend att37
05:35:46  49  FROM svm6142
05:35:46  50  ORDER BY ydate
05:35:46  51  /

Table created.

Elapsed: 00:00:04.75
05:35:51 SQL> 
05:35:51 SQL> -- rpt
05:35:51 SQL> 
05:35:51 SQL> SELECT
05:35:51   2  pair
05:35:51   3  ,trend
05:35:51   4  ,gatt
05:35:51   5  ,COUNT(pair)
05:35:51   6  ,AVG(g6)
05:35:51   7  FROM svm6162
05:35:51   8  GROUP BY pair,trend,gatt
05:35:51   9  ORDER BY pair,trend,gatt
05:35:51  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7124 -.00136424
usd_cad 	-1 up	      3058 .003145179
usd_cad 	-1		20
usd_cad 	 1 nup	      6516 -.00163501
usd_cad 	 1 up	      2513 .003610941
usd_cad 	 1		52

6 rows selected.

Elapsed: 00:00:00.03
05:35:51 SQL> 
05:35:51 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
05:35:51 SQL> CREATE TABLE modsrc COMPRESS AS
05:35:51   2  SELECT
05:35:51   3  pair
05:35:51   4  ,ydate
05:35:51   5  ,prdate
05:35:51   6  ,trend
05:35:51   7  ,g6
05:35:51   8  ,gatt
05:35:51   9  ,gattn
05:35:51  10  FROM svm6162
05:35:51  11  /

Table created.

Elapsed: 00:00:00.08
05:35:51 SQL> 
05:35:51 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
05:35:51 SQL> 
05:35:51 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.12
05:35:51 SQL> CREATE TABLE cad_ms610 COMPRESS AS
05:35:51   2  SELECT
05:35:51   3  ydate
05:35:51   4  ,trend cad_trend
05:35:51   5  ,g6    cad_g6
05:35:51   6  ,gatt  cad_gatt
05:35:51   7  ,gattn cad_gattn
05:35:51   8  FROM modsrc
05:35:51   9  /

Table created.

Elapsed: 00:00:00.13
05:35:51 SQL> 
05:35:51 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
05:35:51 SQL> 
05:35:51 SQL> -- I need a copy of the attributes:
05:35:51 SQL> 
05:35:51 SQL> 
05:35:51 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.07
05:35:51 SQL> CREATE TABLE cad_att COMPRESS AS
05:35:51   2  SELECT
05:35:51   3  ydate
05:35:51   4  ,att00 cad_att00
05:35:51   5  ,att01 cad_att01
05:35:51   6  ,att02 cad_att02
05:35:51   7  ,att03 cad_att03
05:35:51   8  ,att04 cad_att04
05:35:51   9  ,att05 cad_att05
05:35:51  10  ,att06 cad_att06
05:35:51  11  ,att07 cad_att07
05:35:51  12  ,att08 cad_att08
05:35:51  13  ,att09 cad_att09
05:35:51  14  ,att10 cad_att10
05:35:51  15  ,att11 cad_att11
05:35:51  16  ,att12 cad_att12
05:35:51  17  ,att13 cad_att13
05:35:51  18  ,att14 cad_att14
05:35:51  19  ,att15 cad_att15
05:35:51  20  ,att16 cad_att16
05:35:51  21  ,att17 cad_att17
05:35:51  22  ,att18 cad_att18
05:35:51  23  ,att19 cad_att19
05:35:51  24  ,att20 cad_att20
05:35:51  25  ,att21 cad_att21
05:35:51  26  ,att22 cad_att22
05:35:51  27  ,att23 cad_att23
05:35:51  28  ,att24 cad_att24
05:35:51  29  ,att25 cad_att25
05:35:51  30  ,att26 cad_att26
05:35:51  31  ,att27 cad_att27
05:35:51  32  ,att28 cad_att28
05:35:51  33  ,att29 cad_att29
05:35:51  34  ,att30 cad_att30
05:35:51  35  ,att31 cad_att31
05:35:51  36  ,att32 cad_att32
05:35:51  37  ,att33 cad_att33
05:35:51  38  ,att34 cad_att34
05:35:51  39  ,att35 cad_att35
05:35:51  40  ,att36 cad_att36
05:35:51  41  ,att37 cad_att37
05:35:51  42  FROM svm6162
05:35:51  43  /

Table created.

Elapsed: 00:00:00.16
05:35:52 SQL> 
05:35:52 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
05:35:52 SQL> 
05:35:52 SQL> -- rpt
05:35:52 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19283

Elapsed: 00:00:00.80
05:35:53 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19283

Elapsed: 00:00:00.00
05:35:53 SQL> 
05:35:53 SQL> --
05:35:53 SQL> -- chf610.sql
05:35:53 SQL> --
05:35:53 SQL> 
05:35:53 SQL> -- Creates views and tables for backtesting a forex SVM strategy
05:35:53 SQL> 
05:35:53 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
05:35:53 SQL> 
05:35:53 SQL> -- I created di5min here:
05:35:53 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
05:35:53 SQL> 
05:35:53 SQL> CREATE OR REPLACE VIEW svm6102 AS
05:35:53   2  SELECT
05:35:53   3  pair
05:35:53   4  ,ydate
05:35:53   5  ,prdate
05:35:53   6  ,rownum rnum -- acts as t in my time-series
05:35:53   7  ,clse
05:35:53   8  -- Derive a bunch of attributes from clse, the latest price:
05:35:53   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
05:35:53  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
05:35:53  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
05:35:53  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
05:35:53  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
05:35:53  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
05:35:53  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
05:35:53  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
05:35:53  17  --
05:35:53  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
05:35:53  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
05:35:53  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
05:35:53  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
05:35:53  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
05:35:53  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
05:35:53  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
05:35:53  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
05:35:53  26  --
05:35:53  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
05:35:53  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
05:35:53  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
05:35:53  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
05:35:53  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
05:35:53  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
05:35:53  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
05:35:53  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
05:35:53  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
05:35:53  36  FROM di5min WHERE pair LIKE'%chf%'
05:35:53  37  AND ydate > sysdate - 95
05:35:53  38  ORDER BY ydate
05:35:53  39  /

View created.

Elapsed: 00:00:00.05
05:35:53 SQL> 
05:35:53 SQL> -- rpt
05:35:53 SQL> 
05:35:53 SQL> SELECT
05:35:53   2  pair
05:35:53   3  ,COUNT(pair)
05:35:53   4  ,MIN(clse),MAX(clse)
05:35:53   5  ,MIN(avg6),MAX(avg6)
05:35:53   6  ,MIN(ydate),MAX(ydate)
05:35:53   7  FROM svm6102
05:35:53   8  GROUP BY pair
05:35:53   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19286	 .9471	  1.00635 .950038356 1.00498151 2010-09-23 05:40:01 2010-12-27 05:30:00

Elapsed: 00:00:00.82
05:35:54 SQL> 
05:35:54 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
05:35:54 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.15
05:35:54 SQL> CREATE TABLE svm6122 COMPRESS AS
05:35:54   2  SELECT
05:35:54   3  pair
05:35:54   4  ,ydate
05:35:54   5  ,prdate
05:35:54   6  ,clse
05:35:54   7  -- g6 is important. I want to predict g6:
05:35:54   8  ,ld6 - clse g6
05:35:54   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
05:35:54  10  -- I want more attributes from the ones I derived above:
05:35:54  11  -- clse relation to moving-min
05:35:54  12  ,clse-min4  cm4
05:35:54  13  ,clse-min6  cm6
05:35:54  14  ,clse-min8  cm8
05:35:54  15  ,clse-min10 cm10
05:35:54  16  ,clse-min12 cm12
05:35:54  17  ,clse-min14 cm14
05:35:54  18  ,clse-min16 cm16
05:35:54  19  ,clse-min18 cm18
05:35:54  20  -- clse relation to moving-avg
05:35:54  21  ,clse-avg4  ca4
05:35:54  22  ,clse-avg6  ca6
05:35:54  23  ,clse-avg8  ca8
05:35:54  24  ,clse-avg10 ca10
05:35:54  25  ,clse-avg12 ca12
05:35:54  26  ,clse-avg14 ca14
05:35:54  27  ,clse-avg16 ca16
05:35:54  28  ,clse-avg18 ca18
05:35:54  29  -- clse relation to moving-max
05:35:54  30  ,clse-max4  cx4
05:35:54  31  ,clse-max6  cx6
05:35:54  32  ,clse-max8  cx8
05:35:54  33  ,clse-max10 cx10
05:35:54  34  ,clse-max12 cx12
05:35:54  35  ,clse-max14 cx14
05:35:54  36  ,clse-max16 cx16
05:35:54  37  ,clse-max18 cx18
05:35:54  38  -- Derive more attributes.
05:35:54  39  -- I want to use CORR() here to help SVM see the shape of the series.
05:35:54  40  -- But COVAR_POP is more stable:
05:35:54  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
05:35:54  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
05:35:54  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
05:35:54  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
05:35:54  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
05:35:54  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
05:35:54  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
05:35:54  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
05:35:54  49  -- Derive date related attributes:
05:35:54  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
05:35:54  51  ,0+TO_CHAR(ydate,'D')d
05:35:54  52  ,0+TO_CHAR(ydate,'W')w
05:35:54  53  -- mpm stands for minutes-past-midnight:
05:35:54  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
05:35:54  55  -- mph stands for minutes-past-hour:
05:35:54  56  ,0+TO_CHAR(ydate,'MI')mph
05:35:54  57  FROM svm6102
05:35:54  58  ORDER BY ydate
05:35:54  59  /

Table created.

Elapsed: 00:00:02.00
05:35:56 SQL> 
05:35:56 SQL> -- rpt
05:35:56 SQL> 
05:35:56 SQL> SELECT
05:35:56   2  pair
05:35:56   3  ,COUNT(pair)
05:35:56   4  ,MIN(clse),MAX(clse)
05:35:56   5  ,MIN(ydate),MAX(ydate)
05:35:56   6  FROM svm6122
05:35:56   7  GROUP BY pair
05:35:56   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19286	 .9471	  1.00635 2010-09-23 05:40:01 2010-12-27 05:30:00

Elapsed: 00:00:00.03
05:35:56 SQL> 
05:35:56 SQL> -- Prepare for derivation of NTILE based params:
05:35:56 SQL> 
05:35:56 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.18
05:35:56 SQL> CREATE TABLE svm6142 COMPRESS AS
05:35:56   2  SELECT
05:35:56   3  pair
05:35:56   4  ,ydate
05:35:56   5  ,prdate
05:35:56   6  ,clse
05:35:56   7  ,g6
05:35:56   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
05:35:56   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
05:35:56  10  ,CASE WHEN trend IS NULL THEN 1
05:35:56  11  	    WHEN trend =0      THEN 1
05:35:56  12  	    ELSE trend END trend
05:35:56  13  ,cm4
05:35:56  14  ,cm6
05:35:56  15  ,cm8
05:35:56  16  ,cm10
05:35:56  17  ,cm12
05:35:56  18  ,cm14
05:35:56  19  ,cm16
05:35:56  20  ,cm18
05:35:56  21  --
05:35:56  22  ,ca4
05:35:56  23  ,ca6
05:35:56  24  ,ca8
05:35:56  25  ,ca10
05:35:56  26  ,ca12
05:35:56  27  ,ca14
05:35:56  28  ,ca16
05:35:56  29  ,ca18
05:35:56  30  --
05:35:56  31  ,cx4
05:35:56  32  ,cx6
05:35:56  33  ,cx8
05:35:56  34  ,cx10
05:35:56  35  ,cx12
05:35:56  36  ,cx14
05:35:56  37  ,cx16
05:35:56  38  ,cx18
05:35:56  39  --
05:35:56  40  ,crr4
05:35:56  41  ,crr6
05:35:56  42  ,crr8
05:35:56  43  ,crr10
05:35:56  44  ,crr12
05:35:56  45  ,crr14
05:35:56  46  ,crr16
05:35:56  47  ,crr18
05:35:56  48  --
05:35:56  49  ,hh
05:35:56  50  ,d
05:35:56  51  ,w
05:35:56  52  ,mpm
05:35:56  53  ,mph
05:35:56  54  FROM svm6122
05:35:56  55  ORDER BY ydate
05:35:56  56  /

Table created.

Elapsed: 00:00:00.35
05:35:57 SQL> 
05:35:57 SQL> -- rpt
05:35:57 SQL> 
05:35:57 SQL> SELECT
05:35:57   2  pair
05:35:57   3  ,trend
05:35:57   4  ,gatt
05:35:57   5  ,COUNT(pair)
05:35:57   6  ,AVG(g6)
05:35:57   7  FROM svm6142
05:35:57   8  GROUP BY pair,trend,gatt
05:35:57   9  ORDER BY pair,trend,gatt
05:35:57  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      6828 -.00185832
usd_chf 	-1 up	      3170 .003904808
usd_chf 	-1		55
usd_chf 	 1 nup	      6655 -.00164768
usd_chf 	 1 up	      2561 .003690868
usd_chf 	 1		17

6 rows selected.

Elapsed: 00:00:00.05
05:35:57 SQL> 
05:35:57 SQL> 
05:35:57 SQL> -- Derive NTILE based params:
05:35:57 SQL> 
05:35:57 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.20
05:35:57 SQL> CREATE TABLE svm6162 COMPRESS AS
05:35:57   2  SELECT
05:35:57   3  pair
05:35:57   4  ,ydate
05:35:57   5  ,prdate
05:35:57   6  ,clse
05:35:57   7  ,g6
05:35:57   8  ,gatt
05:35:57   9  ,gattn
05:35:57  10  ,trend
05:35:57  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
05:35:57  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
05:35:57  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
05:35:57  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
05:35:57  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
05:35:57  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
05:35:57  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
05:35:57  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
05:35:57  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
05:35:57  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
05:35:57  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
05:35:57  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
05:35:57  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
05:35:57  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
05:35:57  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
05:35:57  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
05:35:57  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
05:35:57  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
05:35:57  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
05:35:57  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
05:35:57  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
05:35:57  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
05:35:57  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
05:35:57  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
05:35:57  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
05:35:57  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
05:35:57  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
05:35:57  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
05:35:57  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
05:35:57  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
05:35:57  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
05:35:57  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
05:35:57  43  ,hh  att32
05:35:57  44  ,d   att33
05:35:57  45  ,w   att34
05:35:57  46  ,mpm att35
05:35:57  47  ,mph att36
05:35:57  48  ,trend att37
05:35:57  49  FROM svm6142
05:35:57  50  ORDER BY ydate
05:35:57  51  /

Table created.

Elapsed: 00:00:04.67
05:36:02 SQL> 
05:36:02 SQL> -- rpt
05:36:02 SQL> 
05:36:02 SQL> SELECT
05:36:02   2  pair
05:36:02   3  ,trend
05:36:02   4  ,gatt
05:36:02   5  ,COUNT(pair)
05:36:02   6  ,AVG(g6)
05:36:02   7  FROM svm6162
05:36:02   8  GROUP BY pair,trend,gatt
05:36:02   9  ORDER BY pair,trend,gatt
05:36:02  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      6828 -.00185832
usd_chf 	-1 up	      3170 .003904808
usd_chf 	-1		55
usd_chf 	 1 nup	      6655 -.00164768
usd_chf 	 1 up	      2561 .003690868
usd_chf 	 1		17

6 rows selected.

Elapsed: 00:00:00.02
05:36:02 SQL> 
05:36:02 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
05:36:02 SQL> CREATE TABLE modsrc COMPRESS AS
05:36:02   2  SELECT
05:36:02   3  pair
05:36:02   4  ,ydate
05:36:02   5  ,prdate
05:36:02   6  ,trend
05:36:02   7  ,g6
05:36:02   8  ,gatt
05:36:02   9  ,gattn
05:36:02  10  FROM svm6162
05:36:02  11  /

Table created.

Elapsed: 00:00:00.10
05:36:02 SQL> 
05:36:02 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
05:36:02 SQL> 
05:36:02 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
05:36:02 SQL> CREATE TABLE chf_ms610 COMPRESS AS
05:36:02   2  SELECT
05:36:02   3  ydate
05:36:02   4  ,trend chf_trend
05:36:02   5  ,g6    chf_g6
05:36:02   6  ,gatt  chf_gatt
05:36:02   7  ,gattn chf_gattn
05:36:02   8  FROM modsrc
05:36:02   9  /

Table created.

Elapsed: 00:00:00.06
05:36:02 SQL> 
05:36:02 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.14
05:36:03 SQL> 
05:36:03 SQL> -- I need a copy of the attributes:
05:36:03 SQL> 
05:36:03 SQL> 
05:36:03 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.05
05:36:03 SQL> CREATE TABLE chf_att COMPRESS AS
05:36:03   2  SELECT
05:36:03   3  ydate
05:36:03   4  ,att00 chf_att00
05:36:03   5  ,att01 chf_att01
05:36:03   6  ,att02 chf_att02
05:36:03   7  ,att03 chf_att03
05:36:03   8  ,att04 chf_att04
05:36:03   9  ,att05 chf_att05
05:36:03  10  ,att06 chf_att06
05:36:03  11  ,att07 chf_att07
05:36:03  12  ,att08 chf_att08
05:36:03  13  ,att09 chf_att09
05:36:03  14  ,att10 chf_att10
05:36:03  15  ,att11 chf_att11
05:36:03  16  ,att12 chf_att12
05:36:03  17  ,att13 chf_att13
05:36:03  18  ,att14 chf_att14
05:36:03  19  ,att15 chf_att15
05:36:03  20  ,att16 chf_att16
05:36:03  21  ,att17 chf_att17
05:36:03  22  ,att18 chf_att18
05:36:03  23  ,att19 chf_att19
05:36:03  24  ,att20 chf_att20
05:36:03  25  ,att21 chf_att21
05:36:03  26  ,att22 chf_att22
05:36:03  27  ,att23 chf_att23
05:36:03  28  ,att24 chf_att24
05:36:03  29  ,att25 chf_att25
05:36:03  30  ,att26 chf_att26
05:36:03  31  ,att27 chf_att27
05:36:03  32  ,att28 chf_att28
05:36:03  33  ,att29 chf_att29
05:36:03  34  ,att30 chf_att30
05:36:03  35  ,att31 chf_att31
05:36:03  36  ,att32 chf_att32
05:36:03  37  ,att33 chf_att33
05:36:03  38  ,att34 chf_att34
05:36:03  39  ,att35 chf_att35
05:36:03  40  ,att36 chf_att36
05:36:03  41  ,att37 chf_att37
05:36:03  42  FROM svm6162
05:36:03  43  /

Table created.

Elapsed: 00:00:00.15
05:36:03 SQL> 
05:36:03 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
05:36:03 SQL> 
05:36:03 SQL> -- rpt
05:36:03 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19286

Elapsed: 00:00:00.79
05:36:04 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19286

Elapsed: 00:00:00.01
05:36:04 SQL> 
05:36:04 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
