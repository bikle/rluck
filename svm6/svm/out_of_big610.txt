
SQL*Plus: Release 11.2.0.1.0 Production on Mon Jan 3 21:11:02 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

21:11:02 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
21:11:02 SQL> 21:11:02 SQL> --
21:11:02 SQL> -- eur610.sql
21:11:02 SQL> --
21:11:02 SQL> 
21:11:02 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:11:02 SQL> 
21:11:02 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.03
21:11:02 SQL> 
21:11:02 SQL> -- I created di5min here:
21:11:02 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:11:02 SQL> 
21:11:02 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:11:02   2  SELECT
21:11:02   3  pair
21:11:02   4  ,ydate
21:11:02   5  ,prdate
21:11:02   6  ,rownum rnum -- acts as t in my time-series
21:11:02   7  ,clse
21:11:02   8  -- Derive a bunch of attributes from clse, the latest price:
21:11:02   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:11:02  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:11:02  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:11:02  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:11:02  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:11:02  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:11:02  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:11:02  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:11:02  17  --
21:11:02  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:11:02  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:11:02  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:11:02  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:11:02  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:11:02  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:11:02  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:11:02  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:11:02  26  --
21:11:02  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:11:02  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:11:02  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:11:02  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:11:02  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:11:02  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:11:02  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:11:02  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:11:02  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:11:02  36  FROM di5min WHERE pair LIKE'%eur%'
21:11:02  37  AND ydate > sysdate - 95
21:11:02  38  ORDER BY ydate
21:11:02  39  /

View created.

Elapsed: 00:00:00.18
21:11:03 SQL> 
21:11:03 SQL> -- rpt
21:11:03 SQL> 
21:11:03 SQL> SELECT
21:11:03   2  pair
21:11:03   3  ,COUNT(pair)
21:11:03   4  ,MIN(clse),MAX(clse)
21:11:03   5  ,MIN(avg6),MAX(avg6)
21:11:03   6  ,MIN(ydate),MAX(ydate)
21:11:03   7  FROM svm6102
21:11:03   8  GROUP BY pair
21:11:03   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19259    1.29735	   1.4273 1.29875103 1.42436233 2010-09-30 21:15:01 2011-01-03 21:05:00

Elapsed: 00:00:00.89
21:11:03 SQL> 
21:11:03 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:11:03 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.08
21:11:03 SQL> CREATE TABLE svm6122 COMPRESS AS
21:11:03   2  SELECT
21:11:03   3  pair
21:11:03   4  ,ydate
21:11:03   5  ,prdate
21:11:03   6  ,clse
21:11:03   7  -- g6 is important. I want to predict g6:
21:11:03   8  ,ld6 - clse g6
21:11:03   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:11:03  10  -- I want more attributes from the ones I derived above:
21:11:03  11  -- clse relation to moving-min
21:11:03  12  ,clse-min4  cm4
21:11:03  13  ,clse-min6  cm6
21:11:03  14  ,clse-min8  cm8
21:11:03  15  ,clse-min10 cm10
21:11:03  16  ,clse-min12 cm12
21:11:03  17  ,clse-min14 cm14
21:11:03  18  ,clse-min16 cm16
21:11:03  19  ,clse-min18 cm18
21:11:03  20  -- clse relation to moving-avg
21:11:03  21  ,clse-avg4  ca4
21:11:03  22  ,clse-avg6  ca6
21:11:03  23  ,clse-avg8  ca8
21:11:03  24  ,clse-avg10 ca10
21:11:03  25  ,clse-avg12 ca12
21:11:03  26  ,clse-avg14 ca14
21:11:03  27  ,clse-avg16 ca16
21:11:03  28  ,clse-avg18 ca18
21:11:03  29  -- clse relation to moving-max
21:11:03  30  ,clse-max4  cx4
21:11:03  31  ,clse-max6  cx6
21:11:03  32  ,clse-max8  cx8
21:11:03  33  ,clse-max10 cx10
21:11:03  34  ,clse-max12 cx12
21:11:03  35  ,clse-max14 cx14
21:11:03  36  ,clse-max16 cx16
21:11:03  37  ,clse-max18 cx18
21:11:03  38  -- Derive more attributes.
21:11:03  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:11:03  40  -- But COVAR_POP is more stable:
21:11:03  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:11:03  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:11:03  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:11:03  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:11:03  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:11:04  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:11:04  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:11:04  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:11:04  49  -- Derive date related attributes:
21:11:04  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:11:04  51  ,0+TO_CHAR(ydate,'D')d
21:11:04  52  ,0+TO_CHAR(ydate,'W')w
21:11:04  53  -- mpm stands for minutes-past-midnight:
21:11:04  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:11:04  55  -- mph stands for minutes-past-hour:
21:11:04  56  ,0+TO_CHAR(ydate,'MI')mph
21:11:04  57  FROM svm6102
21:11:04  58  ORDER BY ydate
21:11:04  59  /

Table created.

Elapsed: 00:00:02.36
21:11:06 SQL> 
21:11:06 SQL> -- rpt
21:11:06 SQL> 
21:11:06 SQL> SELECT
21:11:06   2  pair
21:11:06   3  ,COUNT(pair)
21:11:06   4  ,MIN(clse),MAX(clse)
21:11:06   5  ,MIN(ydate),MAX(ydate)
21:11:06   6  FROM svm6122
21:11:06   7  GROUP BY pair
21:11:06   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19259    1.29735	   1.4273 2010-09-30 21:15:01 2011-01-03 21:05:00

Elapsed: 00:00:00.10
21:11:06 SQL> 
21:11:06 SQL> -- Prepare for derivation of NTILE based params:
21:11:06 SQL> 
21:11:06 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.12
21:11:06 SQL> CREATE TABLE svm6142 COMPRESS AS
21:11:06   2  SELECT
21:11:06   3  pair
21:11:06   4  ,ydate
21:11:06   5  ,prdate
21:11:06   6  ,clse
21:11:06   7  ,g6
21:11:06   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:11:06   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:11:06  10  ,CASE WHEN trend IS NULL THEN 1
21:11:06  11  	    WHEN trend =0      THEN 1
21:11:06  12  	    ELSE trend END trend
21:11:06  13  ,cm4
21:11:06  14  ,cm6
21:11:06  15  ,cm8
21:11:06  16  ,cm10
21:11:06  17  ,cm12
21:11:06  18  ,cm14
21:11:06  19  ,cm16
21:11:06  20  ,cm18
21:11:06  21  --
21:11:06  22  ,ca4
21:11:06  23  ,ca6
21:11:06  24  ,ca8
21:11:06  25  ,ca10
21:11:06  26  ,ca12
21:11:06  27  ,ca14
21:11:06  28  ,ca16
21:11:06  29  ,ca18
21:11:06  30  --
21:11:06  31  ,cx4
21:11:06  32  ,cx6
21:11:06  33  ,cx8
21:11:06  34  ,cx10
21:11:06  35  ,cx12
21:11:06  36  ,cx14
21:11:06  37  ,cx16
21:11:06  38  ,cx18
21:11:06  39  --
21:11:06  40  ,crr4
21:11:06  41  ,crr6
21:11:06  42  ,crr8
21:11:06  43  ,crr10
21:11:06  44  ,crr12
21:11:06  45  ,crr14
21:11:06  46  ,crr16
21:11:06  47  ,crr18
21:11:06  48  --
21:11:06  49  ,hh
21:11:06  50  ,d
21:11:06  51  ,w
21:11:06  52  ,mpm
21:11:06  53  ,mph
21:11:06  54  FROM svm6122
21:11:06  55  ORDER BY ydate
21:11:06  56  /

Table created.

Elapsed: 00:00:00.37
21:11:06 SQL> 
21:11:06 SQL> -- rpt
21:11:06 SQL> 
21:11:06 SQL> SELECT
21:11:06   2  pair
21:11:06   3  ,trend
21:11:06   4  ,gatt
21:11:06   5  ,COUNT(pair)
21:11:06   6  ,AVG(g6)
21:11:06   7  FROM svm6142
21:11:06   8  GROUP BY pair,trend,gatt
21:11:06   9  ORDER BY pair,trend,gatt
21:11:06  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6013 -.00315159
eur_usd 	-1 up	      3557 .004466566
eur_usd 	 1 nup	      5781 -.00317289
eur_usd 	 1 up	      3836 .005063689
eur_usd 	 1		72

Elapsed: 00:00:00.05
21:11:07 SQL> 
21:11:07 SQL> 
21:11:07 SQL> -- Derive NTILE based params:
21:11:07 SQL> 
21:11:07 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.64
21:11:07 SQL> CREATE TABLE svm6162 COMPRESS AS
21:11:07   2  SELECT
21:11:07   3  pair
21:11:07   4  ,ydate
21:11:07   5  ,prdate
21:11:07   6  ,clse
21:11:07   7  ,g6
21:11:07   8  ,gatt
21:11:07   9  ,gattn
21:11:07  10  ,trend
21:11:07  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:11:07  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:11:07  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:11:07  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:11:07  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:11:07  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:11:07  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:11:07  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:11:07  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:11:07  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:11:07  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:11:07  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:11:07  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:11:07  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:11:07  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:11:07  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:11:07  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:11:07  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:11:07  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:11:07  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:11:07  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:11:07  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:11:07  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:11:07  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:11:07  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:11:07  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:11:07  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:11:07  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:11:07  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:11:07  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:11:07  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:11:07  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:11:07  43  ,hh  att32
21:11:07  44  ,d   att33
21:11:07  45  ,w   att34
21:11:07  46  ,mpm att35
21:11:07  47  ,mph att36
21:11:07  48  ,trend att37
21:11:07  49  FROM svm6142
21:11:07  50  ORDER BY ydate
21:11:07  51  /

Table created.

Elapsed: 00:00:04.80
21:11:12 SQL> 
21:11:12 SQL> -- rpt
21:11:12 SQL> 
21:11:12 SQL> SELECT
21:11:12   2  pair
21:11:12   3  ,trend
21:11:12   4  ,gatt
21:11:12   5  ,COUNT(pair)
21:11:12   6  ,AVG(g6)
21:11:12   7  FROM svm6162
21:11:12   8  GROUP BY pair,trend,gatt
21:11:12   9  ORDER BY pair,trend,gatt
21:11:12  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6013 -.00315159
eur_usd 	-1 up	      3557 .004466566
eur_usd 	 1 nup	      5781 -.00317289
eur_usd 	 1 up	      3836 .005063689
eur_usd 	 1		72

Elapsed: 00:00:00.02
21:11:12 SQL> 
21:11:12 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.27
21:11:12 SQL> CREATE TABLE modsrc COMPRESS AS
21:11:12   2  SELECT
21:11:12   3  pair
21:11:12   4  ,ydate
21:11:12   5  ,prdate
21:11:12   6  ,trend
21:11:12   7  ,g6
21:11:12   8  ,gatt
21:11:12   9  ,gattn
21:11:12  10  FROM svm6162
21:11:12  11  /

Table created.

Elapsed: 00:00:00.08
21:11:12 SQL> 
21:11:12 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
21:11:13 SQL> 
21:11:13 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
21:11:13 SQL> CREATE TABLE eur_ms610 COMPRESS AS
21:11:13   2  SELECT
21:11:13   3  ydate
21:11:13   4  ,trend eur_trend
21:11:13   5  ,g6    eur_g6
21:11:13   6  ,gatt  eur_gatt
21:11:13   7  ,gattn eur_gattn
21:11:13   8  FROM modsrc
21:11:13   9  /

Table created.

Elapsed: 00:00:00.08
21:11:13 SQL> 
21:11:13 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
21:11:13 SQL> 
21:11:13 SQL> -- I need a copy of the attributes:
21:11:13 SQL> 
21:11:13 SQL> 
21:11:13 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.04
21:11:13 SQL> CREATE TABLE eur_att COMPRESS AS
21:11:13   2  SELECT
21:11:13   3  ydate
21:11:13   4  ,att00 eur_att00
21:11:13   5  ,att01 eur_att01
21:11:13   6  ,att02 eur_att02
21:11:13   7  ,att03 eur_att03
21:11:13   8  ,att04 eur_att04
21:11:13   9  ,att05 eur_att05
21:11:13  10  ,att06 eur_att06
21:11:13  11  ,att07 eur_att07
21:11:13  12  ,att08 eur_att08
21:11:13  13  ,att09 eur_att09
21:11:13  14  ,att10 eur_att10
21:11:13  15  ,att11 eur_att11
21:11:13  16  ,att12 eur_att12
21:11:13  17  ,att13 eur_att13
21:11:13  18  ,att14 eur_att14
21:11:13  19  ,att15 eur_att15
21:11:13  20  ,att16 eur_att16
21:11:13  21  ,att17 eur_att17
21:11:13  22  ,att18 eur_att18
21:11:13  23  ,att19 eur_att19
21:11:13  24  ,att20 eur_att20
21:11:13  25  ,att21 eur_att21
21:11:13  26  ,att22 eur_att22
21:11:13  27  ,att23 eur_att23
21:11:13  28  ,att24 eur_att24
21:11:13  29  ,att25 eur_att25
21:11:13  30  ,att26 eur_att26
21:11:13  31  ,att27 eur_att27
21:11:13  32  ,att28 eur_att28
21:11:13  33  ,att29 eur_att29
21:11:13  34  ,att30 eur_att30
21:11:13  35  ,att31 eur_att31
21:11:13  36  ,att32 eur_att32
21:11:13  37  ,att33 eur_att33
21:11:13  38  ,att34 eur_att34
21:11:13  39  ,att35 eur_att35
21:11:13  40  ,att36 eur_att36
21:11:13  41  ,att37 eur_att37
21:11:13  42  FROM svm6162
21:11:13  43  /

Table created.

Elapsed: 00:00:00.19
21:11:13 SQL> 
21:11:13 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.60
21:11:14 SQL> 
21:11:14 SQL> -- rpt
21:11:14 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.88
21:11:15 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.00
21:11:15 SQL> 
21:11:15 SQL> --
21:11:15 SQL> -- aud610.sql
21:11:15 SQL> --
21:11:15 SQL> 
21:11:15 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:11:15 SQL> 
21:11:15 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.45
21:11:15 SQL> 
21:11:15 SQL> -- I created di5min here:
21:11:15 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:11:15 SQL> 
21:11:15 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:11:15   2  SELECT
21:11:15   3  pair
21:11:15   4  ,ydate
21:11:15   5  ,prdate
21:11:15   6  ,rownum rnum -- acts as t in my time-series
21:11:15   7  ,clse
21:11:15   8  -- Derive a bunch of attributes from clse, the latest price:
21:11:15   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:11:15  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:11:15  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:11:15  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:11:15  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:11:15  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:11:15  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:11:15  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:11:15  17  --
21:11:15  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:11:15  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:11:15  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:11:15  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:11:15  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:11:15  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:11:15  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:11:15  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:11:15  26  --
21:11:15  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:11:15  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:11:15  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:11:15  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:11:15  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:11:15  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:11:15  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:11:15  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:11:15  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:11:15  36  FROM di5min WHERE pair LIKE'%aud%'
21:11:15  37  AND ydate > sysdate - 95
21:11:15  38  ORDER BY ydate
21:11:15  39  /

View created.

Elapsed: 00:00:00.05
21:11:15 SQL> 
21:11:15 SQL> -- rpt
21:11:15 SQL> 
21:11:15 SQL> SELECT
21:11:15   2  pair
21:11:15   3  ,COUNT(pair)
21:11:15   4  ,MIN(clse),MAX(clse)
21:11:15   5  ,MIN(avg6),MAX(avg6)
21:11:15   6  ,MIN(ydate),MAX(ydate)
21:11:15   7  FROM svm6102
21:11:15   8  GROUP BY pair
21:11:15   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19256	.95405	  1.02495 .957141438 1.02284247 2010-09-30 21:15:01 2011-01-03 21:05:00

Elapsed: 00:00:00.85
21:11:16 SQL> 
21:11:16 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:11:16 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
21:11:16 SQL> CREATE TABLE svm6122 COMPRESS AS
21:11:16   2  SELECT
21:11:16   3  pair
21:11:16   4  ,ydate
21:11:16   5  ,prdate
21:11:16   6  ,clse
21:11:16   7  -- g6 is important. I want to predict g6:
21:11:16   8  ,ld6 - clse g6
21:11:16   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:11:16  10  -- I want more attributes from the ones I derived above:
21:11:16  11  -- clse relation to moving-min
21:11:16  12  ,clse-min4  cm4
21:11:16  13  ,clse-min6  cm6
21:11:16  14  ,clse-min8  cm8
21:11:16  15  ,clse-min10 cm10
21:11:16  16  ,clse-min12 cm12
21:11:16  17  ,clse-min14 cm14
21:11:16  18  ,clse-min16 cm16
21:11:16  19  ,clse-min18 cm18
21:11:16  20  -- clse relation to moving-avg
21:11:16  21  ,clse-avg4  ca4
21:11:16  22  ,clse-avg6  ca6
21:11:16  23  ,clse-avg8  ca8
21:11:16  24  ,clse-avg10 ca10
21:11:16  25  ,clse-avg12 ca12
21:11:16  26  ,clse-avg14 ca14
21:11:16  27  ,clse-avg16 ca16
21:11:16  28  ,clse-avg18 ca18
21:11:16  29  -- clse relation to moving-max
21:11:16  30  ,clse-max4  cx4
21:11:16  31  ,clse-max6  cx6
21:11:16  32  ,clse-max8  cx8
21:11:16  33  ,clse-max10 cx10
21:11:16  34  ,clse-max12 cx12
21:11:16  35  ,clse-max14 cx14
21:11:16  36  ,clse-max16 cx16
21:11:16  37  ,clse-max18 cx18
21:11:16  38  -- Derive more attributes.
21:11:16  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:11:16  40  -- But COVAR_POP is more stable:
21:11:16  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:11:16  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:11:16  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:11:16  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:11:16  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:11:16  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:11:16  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:11:16  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:11:16  49  -- Derive date related attributes:
21:11:16  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:11:16  51  ,0+TO_CHAR(ydate,'D')d
21:11:16  52  ,0+TO_CHAR(ydate,'W')w
21:11:16  53  -- mpm stands for minutes-past-midnight:
21:11:16  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:11:16  55  -- mph stands for minutes-past-hour:
21:11:16  56  ,0+TO_CHAR(ydate,'MI')mph
21:11:16  57  FROM svm6102
21:11:16  58  ORDER BY ydate
21:11:16  59  /

Table created.

Elapsed: 00:00:02.05
21:11:18 SQL> 
21:11:18 SQL> -- rpt
21:11:18 SQL> 
21:11:18 SQL> SELECT
21:11:18   2  pair
21:11:18   3  ,COUNT(pair)
21:11:18   4  ,MIN(clse),MAX(clse)
21:11:18   5  ,MIN(ydate),MAX(ydate)
21:11:18   6  FROM svm6122
21:11:18   7  GROUP BY pair
21:11:18   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19256	.95405	  1.02495 2010-09-30 21:15:01 2011-01-03 21:05:00

Elapsed: 00:00:00.10
21:11:18 SQL> 
21:11:18 SQL> -- Prepare for derivation of NTILE based params:
21:11:18 SQL> 
21:11:18 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.16
21:11:18 SQL> CREATE TABLE svm6142 COMPRESS AS
21:11:18   2  SELECT
21:11:18   3  pair
21:11:18   4  ,ydate
21:11:18   5  ,prdate
21:11:18   6  ,clse
21:11:18   7  ,g6
21:11:18   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:11:18   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:11:18  10  ,CASE WHEN trend IS NULL THEN 1
21:11:18  11  	    WHEN trend =0      THEN 1
21:11:18  12  	    ELSE trend END trend
21:11:18  13  ,cm4
21:11:18  14  ,cm6
21:11:18  15  ,cm8
21:11:18  16  ,cm10
21:11:18  17  ,cm12
21:11:18  18  ,cm14
21:11:18  19  ,cm16
21:11:18  20  ,cm18
21:11:18  21  --
21:11:18  22  ,ca4
21:11:18  23  ,ca6
21:11:18  24  ,ca8
21:11:18  25  ,ca10
21:11:18  26  ,ca12
21:11:18  27  ,ca14
21:11:18  28  ,ca16
21:11:18  29  ,ca18
21:11:18  30  --
21:11:18  31  ,cx4
21:11:18  32  ,cx6
21:11:18  33  ,cx8
21:11:18  34  ,cx10
21:11:18  35  ,cx12
21:11:18  36  ,cx14
21:11:18  37  ,cx16
21:11:18  38  ,cx18
21:11:18  39  --
21:11:18  40  ,crr4
21:11:18  41  ,crr6
21:11:18  42  ,crr8
21:11:18  43  ,crr10
21:11:18  44  ,crr12
21:11:18  45  ,crr14
21:11:18  46  ,crr16
21:11:18  47  ,crr18
21:11:18  48  --
21:11:18  49  ,hh
21:11:18  50  ,d
21:11:18  51  ,w
21:11:18  52  ,mpm
21:11:18  53  ,mph
21:11:18  54  FROM svm6122
21:11:18  55  ORDER BY ydate
21:11:18  56  /

Table created.

Elapsed: 00:00:00.36
21:11:19 SQL> 
21:11:19 SQL> -- rpt
21:11:19 SQL> 
21:11:19 SQL> SELECT
21:11:19   2  pair
21:11:19   3  ,trend
21:11:19   4  ,gatt
21:11:19   5  ,COUNT(pair)
21:11:19   6  ,AVG(g6)
21:11:19   7  FROM svm6142
21:11:19   8  GROUP BY pair,trend,gatt
21:11:19   9  ORDER BY pair,trend,gatt
21:11:19  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5126 -.00214196
aud_usd 	-1 up	      3702  .00375759
aud_usd 	-1		45
aud_usd 	 1 nup	      6704 -.00207981
aud_usd 	 1 up	      3652 .004049295
aud_usd 	 1		27

6 rows selected.

Elapsed: 00:00:00.09
21:11:19 SQL> 
21:11:19 SQL> 
21:11:19 SQL> -- Derive NTILE based params:
21:11:19 SQL> 
21:11:19 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.17
21:11:19 SQL> CREATE TABLE svm6162 COMPRESS AS
21:11:19   2  SELECT
21:11:19   3  pair
21:11:19   4  ,ydate
21:11:19   5  ,prdate
21:11:19   6  ,clse
21:11:19   7  ,g6
21:11:19   8  ,gatt
21:11:19   9  ,gattn
21:11:19  10  ,trend
21:11:19  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:11:19  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:11:19  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:11:19  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:11:19  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:11:19  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:11:19  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:11:19  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:11:19  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:11:19  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:11:19  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:11:19  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:11:19  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:11:19  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:11:19  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:11:19  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:11:19  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:11:19  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:11:19  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:11:19  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:11:19  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:11:19  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:11:19  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:11:19  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:11:19  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:11:19  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:11:19  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:11:19  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:11:19  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:11:19  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:11:19  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:11:19  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:11:19  43  ,hh  att32
21:11:19  44  ,d   att33
21:11:19  45  ,w   att34
21:11:19  46  ,mpm att35
21:11:19  47  ,mph att36
21:11:19  48  ,trend att37
21:11:19  49  FROM svm6142
21:11:19  50  ORDER BY ydate
21:11:19  51  /

Table created.

Elapsed: 00:00:04.66
21:11:24 SQL> 
21:11:24 SQL> -- rpt
21:11:24 SQL> 
21:11:24 SQL> SELECT
21:11:24   2  pair
21:11:24   3  ,trend
21:11:24   4  ,gatt
21:11:24   5  ,COUNT(pair)
21:11:24   6  ,AVG(g6)
21:11:24   7  FROM svm6162
21:11:24   8  GROUP BY pair,trend,gatt
21:11:24   9  ORDER BY pair,trend,gatt
21:11:24  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5126 -.00214196
aud_usd 	-1 up	      3702  .00375759
aud_usd 	-1		45
aud_usd 	 1 nup	      6704 -.00207981
aud_usd 	 1 up	      3652 .004049295
aud_usd 	 1		27

6 rows selected.

Elapsed: 00:00:00.07
21:11:24 SQL> 
21:11:24 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.21
21:11:24 SQL> CREATE TABLE modsrc COMPRESS AS
21:11:24   2  SELECT
21:11:24   3  pair
21:11:24   4  ,ydate
21:11:24   5  ,prdate
21:11:24   6  ,trend
21:11:24   7  ,g6
21:11:24   8  ,gatt
21:11:24   9  ,gattn
21:11:24  10  FROM svm6162
21:11:24  11  /

Table created.

Elapsed: 00:00:00.08
21:11:24 SQL> 
21:11:24 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
21:11:24 SQL> 
21:11:24 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
21:11:24 SQL> CREATE TABLE aud_ms610 COMPRESS AS
21:11:24   2  SELECT
21:11:24   3  ydate
21:11:24   4  ,trend aud_trend
21:11:24   5  ,g6    aud_g6
21:11:24   6  ,gatt  aud_gatt
21:11:24   7  ,gattn aud_gattn
21:11:24   8  FROM modsrc
21:11:24   9  /

Table created.

Elapsed: 00:00:00.08
21:11:24 SQL> 
21:11:24 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.14
21:11:25 SQL> 
21:11:25 SQL> -- I need a copy of the attributes:
21:11:25 SQL> 
21:11:25 SQL> 
21:11:25 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.04
21:11:25 SQL> CREATE TABLE aud_att COMPRESS AS
21:11:25   2  SELECT
21:11:25   3  ydate
21:11:25   4  ,att00 aud_att00
21:11:25   5  ,att01 aud_att01
21:11:25   6  ,att02 aud_att02
21:11:25   7  ,att03 aud_att03
21:11:25   8  ,att04 aud_att04
21:11:25   9  ,att05 aud_att05
21:11:25  10  ,att06 aud_att06
21:11:25  11  ,att07 aud_att07
21:11:25  12  ,att08 aud_att08
21:11:25  13  ,att09 aud_att09
21:11:25  14  ,att10 aud_att10
21:11:25  15  ,att11 aud_att11
21:11:25  16  ,att12 aud_att12
21:11:25  17  ,att13 aud_att13
21:11:25  18  ,att14 aud_att14
21:11:25  19  ,att15 aud_att15
21:11:25  20  ,att16 aud_att16
21:11:25  21  ,att17 aud_att17
21:11:25  22  ,att18 aud_att18
21:11:25  23  ,att19 aud_att19
21:11:25  24  ,att20 aud_att20
21:11:25  25  ,att21 aud_att21
21:11:25  26  ,att22 aud_att22
21:11:25  27  ,att23 aud_att23
21:11:25  28  ,att24 aud_att24
21:11:25  29  ,att25 aud_att25
21:11:25  30  ,att26 aud_att26
21:11:25  31  ,att27 aud_att27
21:11:25  32  ,att28 aud_att28
21:11:25  33  ,att29 aud_att29
21:11:25  34  ,att30 aud_att30
21:11:25  35  ,att31 aud_att31
21:11:25  36  ,att32 aud_att32
21:11:25  37  ,att33 aud_att33
21:11:25  38  ,att34 aud_att34
21:11:25  39  ,att35 aud_att35
21:11:25  40  ,att36 aud_att36
21:11:25  41  ,att37 aud_att37
21:11:25  42  FROM svm6162
21:11:25  43  /

Table created.

Elapsed: 00:00:00.16
21:11:25 SQL> 
21:11:25 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
21:11:25 SQL> 
21:11:25 SQL> -- rpt
21:11:25 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.84
21:11:26 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.00
21:11:26 SQL> 
21:11:26 SQL> --
21:11:26 SQL> -- gbp610.sql
21:11:26 SQL> --
21:11:26 SQL> 
21:11:26 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:11:26 SQL> 
21:11:26 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.42
21:11:26 SQL> 
21:11:26 SQL> -- I created di5min here:
21:11:26 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:11:26 SQL> 
21:11:26 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:11:26   2  SELECT
21:11:26   3  pair
21:11:26   4  ,ydate
21:11:26   5  ,prdate
21:11:26   6  ,rownum rnum -- acts as t in my time-series
21:11:26   7  ,clse
21:11:26   8  -- Derive a bunch of attributes from clse, the latest price:
21:11:26   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:11:26  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:11:26  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:11:26  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:11:26  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:11:26  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:11:26  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:11:26  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:11:26  17  --
21:11:26  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:11:26  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:11:26  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:11:26  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:11:26  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:11:26  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:11:26  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:11:26  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:11:26  26  --
21:11:26  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:11:26  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:11:26  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:11:26  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:11:26  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:11:26  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:11:26  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:11:26  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:11:26  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:11:26  36  FROM di5min WHERE pair LIKE'%gbp%'
21:11:26  37  AND ydate > sysdate - 95
21:11:26  38  ORDER BY ydate
21:11:26  39  /

View created.

Elapsed: 00:00:00.05
21:11:27 SQL> 
21:11:27 SQL> -- rpt
21:11:27 SQL> 
21:11:27 SQL> SELECT
21:11:27   2  pair
21:11:27   3  ,COUNT(pair)
21:11:27   4  ,MIN(clse),MAX(clse)
21:11:27   5  ,MIN(avg6),MAX(avg6)
21:11:27   6  ,MIN(ydate),MAX(ydate)
21:11:27   7  FROM svm6102
21:11:27   8  GROUP BY pair
21:11:27   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19258   1.535325	   1.6295 1.53696747 1.62716986 2010-09-30 21:15:01 2011-01-03 21:05:00

Elapsed: 00:00:00.87
21:11:27 SQL> 
21:11:27 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:11:27 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.18
21:11:28 SQL> CREATE TABLE svm6122 COMPRESS AS
21:11:28   2  SELECT
21:11:28   3  pair
21:11:28   4  ,ydate
21:11:28   5  ,prdate
21:11:28   6  ,clse
21:11:28   7  -- g6 is important. I want to predict g6:
21:11:28   8  ,ld6 - clse g6
21:11:28   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:11:28  10  -- I want more attributes from the ones I derived above:
21:11:28  11  -- clse relation to moving-min
21:11:28  12  ,clse-min4  cm4
21:11:28  13  ,clse-min6  cm6
21:11:28  14  ,clse-min8  cm8
21:11:28  15  ,clse-min10 cm10
21:11:28  16  ,clse-min12 cm12
21:11:28  17  ,clse-min14 cm14
21:11:28  18  ,clse-min16 cm16
21:11:28  19  ,clse-min18 cm18
21:11:28  20  -- clse relation to moving-avg
21:11:28  21  ,clse-avg4  ca4
21:11:28  22  ,clse-avg6  ca6
21:11:28  23  ,clse-avg8  ca8
21:11:28  24  ,clse-avg10 ca10
21:11:28  25  ,clse-avg12 ca12
21:11:28  26  ,clse-avg14 ca14
21:11:28  27  ,clse-avg16 ca16
21:11:28  28  ,clse-avg18 ca18
21:11:28  29  -- clse relation to moving-max
21:11:28  30  ,clse-max4  cx4
21:11:28  31  ,clse-max6  cx6
21:11:28  32  ,clse-max8  cx8
21:11:28  33  ,clse-max10 cx10
21:11:28  34  ,clse-max12 cx12
21:11:28  35  ,clse-max14 cx14
21:11:28  36  ,clse-max16 cx16
21:11:28  37  ,clse-max18 cx18
21:11:28  38  -- Derive more attributes.
21:11:28  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:11:28  40  -- But COVAR_POP is more stable:
21:11:28  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:11:28  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:11:28  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:11:28  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:11:28  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:11:28  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:11:28  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:11:28  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:11:28  49  -- Derive date related attributes:
21:11:28  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:11:28  51  ,0+TO_CHAR(ydate,'D')d
21:11:28  52  ,0+TO_CHAR(ydate,'W')w
21:11:28  53  -- mpm stands for minutes-past-midnight:
21:11:28  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:11:28  55  -- mph stands for minutes-past-hour:
21:11:28  56  ,0+TO_CHAR(ydate,'MI')mph
21:11:28  57  FROM svm6102
21:11:28  58  ORDER BY ydate
21:11:28  59  /

Table created.

Elapsed: 00:00:02.03
21:11:30 SQL> 
21:11:30 SQL> -- rpt
21:11:30 SQL> 
21:11:30 SQL> SELECT
21:11:30   2  pair
21:11:30   3  ,COUNT(pair)
21:11:30   4  ,MIN(clse),MAX(clse)
21:11:30   5  ,MIN(ydate),MAX(ydate)
21:11:30   6  FROM svm6122
21:11:30   7  GROUP BY pair
21:11:30   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19258   1.535325	   1.6295 2010-09-30 21:15:01 2011-01-03 21:05:00

Elapsed: 00:00:00.04
21:11:30 SQL> 
21:11:30 SQL> -- Prepare for derivation of NTILE based params:
21:11:30 SQL> 
21:11:30 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.26
21:11:30 SQL> CREATE TABLE svm6142 COMPRESS AS
21:11:30   2  SELECT
21:11:30   3  pair
21:11:30   4  ,ydate
21:11:30   5  ,prdate
21:11:30   6  ,clse
21:11:30   7  ,g6
21:11:30   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:11:30   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:11:30  10  ,CASE WHEN trend IS NULL THEN 1
21:11:30  11  	    WHEN trend =0      THEN 1
21:11:30  12  	    ELSE trend END trend
21:11:30  13  ,cm4
21:11:30  14  ,cm6
21:11:30  15  ,cm8
21:11:30  16  ,cm10
21:11:30  17  ,cm12
21:11:30  18  ,cm14
21:11:30  19  ,cm16
21:11:30  20  ,cm18
21:11:30  21  --
21:11:30  22  ,ca4
21:11:30  23  ,ca6
21:11:30  24  ,ca8
21:11:30  25  ,ca10
21:11:30  26  ,ca12
21:11:30  27  ,ca14
21:11:30  28  ,ca16
21:11:30  29  ,ca18
21:11:30  30  --
21:11:30  31  ,cx4
21:11:30  32  ,cx6
21:11:30  33  ,cx8
21:11:30  34  ,cx10
21:11:30  35  ,cx12
21:11:30  36  ,cx14
21:11:30  37  ,cx16
21:11:30  38  ,cx18
21:11:30  39  --
21:11:30  40  ,crr4
21:11:30  41  ,crr6
21:11:30  42  ,crr8
21:11:30  43  ,crr10
21:11:30  44  ,crr12
21:11:30  45  ,crr14
21:11:30  46  ,crr16
21:11:30  47  ,crr18
21:11:30  48  --
21:11:30  49  ,hh
21:11:30  50  ,d
21:11:30  51  ,w
21:11:30  52  ,mpm
21:11:30  53  ,mph
21:11:30  54  FROM svm6122
21:11:30  55  ORDER BY ydate
21:11:30  56  /

Table created.

Elapsed: 00:00:00.36
21:11:30 SQL> 
21:11:30 SQL> -- rpt
21:11:30 SQL> 
21:11:30 SQL> SELECT
21:11:30   2  pair
21:11:30   3  ,trend
21:11:30   4  ,gatt
21:11:30   5  ,COUNT(pair)
21:11:30   6  ,AVG(g6)
21:11:30   7  FROM svm6142
21:11:30   8  GROUP BY pair,trend,gatt
21:11:30   9  ORDER BY pair,trend,gatt
21:11:30  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6203 -.00268153
gbp_usd 	-1 up	      3443 .004340339
gbp_usd 	-1		39
gbp_usd 	 1 nup	      6054 -.00259384
gbp_usd 	 1 up	      3486 .004498974
gbp_usd 	 1		33

6 rows selected.

Elapsed: 00:00:00.09
21:11:30 SQL> 
21:11:30 SQL> 
21:11:30 SQL> -- Derive NTILE based params:
21:11:30 SQL> 
21:11:30 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.18
21:11:31 SQL> CREATE TABLE svm6162 COMPRESS AS
21:11:31   2  SELECT
21:11:31   3  pair
21:11:31   4  ,ydate
21:11:31   5  ,prdate
21:11:31   6  ,clse
21:11:31   7  ,g6
21:11:31   8  ,gatt
21:11:31   9  ,gattn
21:11:31  10  ,trend
21:11:31  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:11:31  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:11:31  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:11:31  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:11:31  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:11:31  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:11:31  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:11:31  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:11:31  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:11:31  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:11:31  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:11:31  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:11:31  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:11:31  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:11:31  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:11:31  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:11:31  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:11:31  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:11:31  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:11:31  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:11:31  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:11:31  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:11:31  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:11:31  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:11:31  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:11:31  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:11:31  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:11:31  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:11:31  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:11:31  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:11:31  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:11:31  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:11:31  43  ,hh  att32
21:11:31  44  ,d   att33
21:11:31  45  ,w   att34
21:11:31  46  ,mpm att35
21:11:31  47  ,mph att36
21:11:31  48  ,trend att37
21:11:31  49  FROM svm6142
21:11:31  50  ORDER BY ydate
21:11:31  51  /

Table created.

Elapsed: 00:00:04.59
21:11:35 SQL> 
21:11:35 SQL> -- rpt
21:11:35 SQL> 
21:11:35 SQL> SELECT
21:11:35   2  pair
21:11:35   3  ,trend
21:11:35   4  ,gatt
21:11:35   5  ,COUNT(pair)
21:11:35   6  ,AVG(g6)
21:11:35   7  FROM svm6162
21:11:35   8  GROUP BY pair,trend,gatt
21:11:35   9  ORDER BY pair,trend,gatt
21:11:35  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6203 -.00268153
gbp_usd 	-1 up	      3443 .004340339
gbp_usd 	-1		39
gbp_usd 	 1 nup	      6054 -.00259384
gbp_usd 	 1 up	      3486 .004498974
gbp_usd 	 1		33

6 rows selected.

Elapsed: 00:00:00.03
21:11:35 SQL> 
21:11:35 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.09
21:11:35 SQL> CREATE TABLE modsrc COMPRESS AS
21:11:35   2  SELECT
21:11:35   3  pair
21:11:35   4  ,ydate
21:11:35   5  ,prdate
21:11:35   6  ,trend
21:11:35   7  ,g6
21:11:35   8  ,gatt
21:11:35   9  ,gattn
21:11:35  10  FROM svm6162
21:11:35  11  /

Table created.

Elapsed: 00:00:00.09
21:11:35 SQL> 
21:11:35 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
21:11:36 SQL> 
21:11:36 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
21:11:36 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
21:11:36   2  SELECT
21:11:36   3  ydate
21:11:36   4  ,trend gbp_trend
21:11:36   5  ,g6    gbp_g6
21:11:36   6  ,gatt  gbp_gatt
21:11:36   7  ,gattn gbp_gattn
21:11:36   8  FROM modsrc
21:11:36   9  /

Table created.

Elapsed: 00:00:00.08
21:11:36 SQL> 
21:11:36 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
21:11:36 SQL> 
21:11:36 SQL> -- I need a copy of the attributes:
21:11:36 SQL> 
21:11:36 SQL> 
21:11:36 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.07
21:11:36 SQL> CREATE TABLE gbp_att COMPRESS AS
21:11:36   2  SELECT
21:11:36   3  ydate
21:11:36   4  ,att00 gbp_att00
21:11:36   5  ,att01 gbp_att01
21:11:36   6  ,att02 gbp_att02
21:11:36   7  ,att03 gbp_att03
21:11:36   8  ,att04 gbp_att04
21:11:36   9  ,att05 gbp_att05
21:11:36  10  ,att06 gbp_att06
21:11:36  11  ,att07 gbp_att07
21:11:36  12  ,att08 gbp_att08
21:11:36  13  ,att09 gbp_att09
21:11:36  14  ,att10 gbp_att10
21:11:36  15  ,att11 gbp_att11
21:11:36  16  ,att12 gbp_att12
21:11:36  17  ,att13 gbp_att13
21:11:36  18  ,att14 gbp_att14
21:11:36  19  ,att15 gbp_att15
21:11:36  20  ,att16 gbp_att16
21:11:36  21  ,att17 gbp_att17
21:11:36  22  ,att18 gbp_att18
21:11:36  23  ,att19 gbp_att19
21:11:36  24  ,att20 gbp_att20
21:11:36  25  ,att21 gbp_att21
21:11:36  26  ,att22 gbp_att22
21:11:36  27  ,att23 gbp_att23
21:11:36  28  ,att24 gbp_att24
21:11:36  29  ,att25 gbp_att25
21:11:36  30  ,att26 gbp_att26
21:11:36  31  ,att27 gbp_att27
21:11:36  32  ,att28 gbp_att28
21:11:36  33  ,att29 gbp_att29
21:11:36  34  ,att30 gbp_att30
21:11:36  35  ,att31 gbp_att31
21:11:36  36  ,att32 gbp_att32
21:11:36  37  ,att33 gbp_att33
21:11:36  38  ,att34 gbp_att34
21:11:36  39  ,att35 gbp_att35
21:11:36  40  ,att36 gbp_att36
21:11:36  41  ,att37 gbp_att37
21:11:36  42  FROM svm6162
21:11:36  43  /

Table created.

Elapsed: 00:00:00.18
21:11:36 SQL> 
21:11:36 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
21:11:37 SQL> 
21:11:37 SQL> -- rpt
21:11:37 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19258

Elapsed: 00:00:00.83
21:11:37 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19258

Elapsed: 00:00:00.00
21:11:37 SQL> 
21:11:37 SQL> --
21:11:37 SQL> -- jpy610.sql
21:11:37 SQL> --
21:11:37 SQL> 
21:11:37 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:11:37 SQL> 
21:11:37 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:01.25
21:11:39 SQL> 
21:11:39 SQL> -- I created di5min here:
21:11:39 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:11:39 SQL> 
21:11:39 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:11:39   2  SELECT
21:11:39   3  pair
21:11:39   4  ,ydate
21:11:39   5  ,prdate
21:11:39   6  ,rownum rnum -- acts as t in my time-series
21:11:39   7  ,clse
21:11:39   8  -- Derive a bunch of attributes from clse, the latest price:
21:11:39   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:11:39  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:11:39  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:11:39  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:11:39  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:11:39  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:11:39  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:11:39  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:11:39  17  --
21:11:39  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:11:39  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:11:39  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:11:39  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:11:39  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:11:39  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:11:39  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:11:39  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:11:39  26  --
21:11:39  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:11:39  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:11:39  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:11:39  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:11:39  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:11:39  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:11:39  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:11:39  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:11:39  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:11:39  36  FROM di5min WHERE pair LIKE'%jpy%'
21:11:39  37  AND ydate > sysdate - 95
21:11:39  38  ORDER BY ydate
21:11:39  39  /

View created.

Elapsed: 00:00:00.04
21:11:39 SQL> 
21:11:39 SQL> -- rpt
21:11:39 SQL> 
21:11:39 SQL> SELECT
21:11:39   2  pair
21:11:39   3  ,COUNT(pair)
21:11:39   4  ,MIN(clse),MAX(clse)
21:11:39   5  ,MIN(avg6),MAX(avg6)
21:11:39   6  ,MIN(ydate),MAX(ydate)
21:11:39   7  FROM svm6102
21:11:39   8  GROUP BY pair
21:11:39   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19256	 80.25	   84.485 80.3595205 84.3105479 2010-09-30 21:15:01 2011-01-03 21:05:00

Elapsed: 00:00:00.90
21:11:40 SQL> 
21:11:40 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:11:40 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
21:11:40 SQL> CREATE TABLE svm6122 COMPRESS AS
21:11:40   2  SELECT
21:11:40   3  pair
21:11:40   4  ,ydate
21:11:40   5  ,prdate
21:11:40   6  ,clse
21:11:40   7  -- g6 is important. I want to predict g6:
21:11:40   8  ,ld6 - clse g6
21:11:40   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:11:40  10  -- I want more attributes from the ones I derived above:
21:11:40  11  -- clse relation to moving-min
21:11:40  12  ,clse-min4  cm4
21:11:40  13  ,clse-min6  cm6
21:11:40  14  ,clse-min8  cm8
21:11:40  15  ,clse-min10 cm10
21:11:40  16  ,clse-min12 cm12
21:11:40  17  ,clse-min14 cm14
21:11:40  18  ,clse-min16 cm16
21:11:40  19  ,clse-min18 cm18
21:11:40  20  -- clse relation to moving-avg
21:11:40  21  ,clse-avg4  ca4
21:11:40  22  ,clse-avg6  ca6
21:11:40  23  ,clse-avg8  ca8
21:11:40  24  ,clse-avg10 ca10
21:11:40  25  ,clse-avg12 ca12
21:11:40  26  ,clse-avg14 ca14
21:11:40  27  ,clse-avg16 ca16
21:11:40  28  ,clse-avg18 ca18
21:11:40  29  -- clse relation to moving-max
21:11:40  30  ,clse-max4  cx4
21:11:40  31  ,clse-max6  cx6
21:11:40  32  ,clse-max8  cx8
21:11:40  33  ,clse-max10 cx10
21:11:40  34  ,clse-max12 cx12
21:11:40  35  ,clse-max14 cx14
21:11:40  36  ,clse-max16 cx16
21:11:40  37  ,clse-max18 cx18
21:11:40  38  -- Derive more attributes.
21:11:40  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:11:40  40  -- But COVAR_POP is more stable:
21:11:40  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:11:40  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:11:40  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:11:40  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:11:40  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:11:40  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:11:40  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:11:40  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:11:40  49  -- Derive date related attributes:
21:11:40  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:11:40  51  ,0+TO_CHAR(ydate,'D')d
21:11:40  52  ,0+TO_CHAR(ydate,'W')w
21:11:40  53  -- mpm stands for minutes-past-midnight:
21:11:40  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:11:40  55  -- mph stands for minutes-past-hour:
21:11:40  56  ,0+TO_CHAR(ydate,'MI')mph
21:11:40  57  FROM svm6102
21:11:40  58  ORDER BY ydate
21:11:40  59  /

Table created.

Elapsed: 00:00:02.02
21:11:42 SQL> 
21:11:42 SQL> -- rpt
21:11:42 SQL> 
21:11:42 SQL> SELECT
21:11:42   2  pair
21:11:42   3  ,COUNT(pair)
21:11:42   4  ,MIN(clse),MAX(clse)
21:11:42   5  ,MIN(ydate),MAX(ydate)
21:11:42   6  FROM svm6122
21:11:42   7  GROUP BY pair
21:11:42   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19256	 80.25	   84.485 2010-09-30 21:15:01 2011-01-03 21:05:00

Elapsed: 00:00:00.08
21:11:42 SQL> 
21:11:42 SQL> -- Prepare for derivation of NTILE based params:
21:11:42 SQL> 
21:11:42 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.27
21:11:42 SQL> CREATE TABLE svm6142 COMPRESS AS
21:11:42   2  SELECT
21:11:42   3  pair
21:11:42   4  ,ydate
21:11:42   5  ,prdate
21:11:42   6  ,clse
21:11:42   7  ,g6
21:11:42   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:11:42   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:11:42  10  ,CASE WHEN trend IS NULL THEN 1
21:11:42  11  	    WHEN trend =0      THEN 1
21:11:42  12  	    ELSE trend END trend
21:11:42  13  ,cm4
21:11:42  14  ,cm6
21:11:42  15  ,cm8
21:11:42  16  ,cm10
21:11:42  17  ,cm12
21:11:42  18  ,cm14
21:11:42  19  ,cm16
21:11:42  20  ,cm18
21:11:42  21  --
21:11:42  22  ,ca4
21:11:42  23  ,ca6
21:11:42  24  ,ca8
21:11:42  25  ,ca10
21:11:42  26  ,ca12
21:11:42  27  ,ca14
21:11:42  28  ,ca16
21:11:42  29  ,ca18
21:11:42  30  --
21:11:42  31  ,cx4
21:11:42  32  ,cx6
21:11:42  33  ,cx8
21:11:42  34  ,cx10
21:11:42  35  ,cx12
21:11:42  36  ,cx14
21:11:42  37  ,cx16
21:11:42  38  ,cx18
21:11:42  39  --
21:11:42  40  ,crr4
21:11:42  41  ,crr6
21:11:42  42  ,crr8
21:11:42  43  ,crr10
21:11:42  44  ,crr12
21:11:42  45  ,crr14
21:11:42  46  ,crr16
21:11:42  47  ,crr18
21:11:42  48  --
21:11:42  49  ,hh
21:11:42  50  ,d
21:11:42  51  ,w
21:11:42  52  ,mpm
21:11:42  53  ,mph
21:11:42  54  FROM svm6122
21:11:42  55  ORDER BY ydate
21:11:42  56  /

Table created.

Elapsed: 00:00:00.35
21:11:43 SQL> 
21:11:43 SQL> -- rpt
21:11:43 SQL> 
21:11:43 SQL> SELECT
21:11:43   2  pair
21:11:43   3  ,trend
21:11:43   4  ,gatt
21:11:43   5  ,COUNT(pair)
21:11:43   6  ,AVG(g6)
21:11:43   7  FROM svm6142
21:11:43   8  GROUP BY pair,trend,gatt
21:11:43   9  ORDER BY pair,trend,gatt
21:11:43  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5204 -.16586969
usd_jpy 	-1 up	      4812 .164690685
usd_jpy 	 1 nup	      4928 -.15620024
usd_jpy 	 1 up	      4240 .166201721
usd_jpy 	 1		72

Elapsed: 00:00:00.08
21:11:43 SQL> 
21:11:43 SQL> 
21:11:43 SQL> -- Derive NTILE based params:
21:11:43 SQL> 
21:11:43 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.18
21:11:43 SQL> CREATE TABLE svm6162 COMPRESS AS
21:11:43   2  SELECT
21:11:43   3  pair
21:11:43   4  ,ydate
21:11:43   5  ,prdate
21:11:43   6  ,clse
21:11:43   7  ,g6
21:11:43   8  ,gatt
21:11:43   9  ,gattn
21:11:43  10  ,trend
21:11:43  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:11:43  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:11:43  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:11:43  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:11:43  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:11:43  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:11:43  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:11:43  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:11:43  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:11:43  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:11:43  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:11:43  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:11:43  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:11:43  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:11:43  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:11:43  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:11:43  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:11:43  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:11:43  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:11:43  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:11:43  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:11:43  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:11:43  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:11:43  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:11:43  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:11:43  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:11:43  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:11:43  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:11:43  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:11:43  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:11:43  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:11:43  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:11:43  43  ,hh  att32
21:11:43  44  ,d   att33
21:11:43  45  ,w   att34
21:11:43  46  ,mpm att35
21:11:43  47  ,mph att36
21:11:43  48  ,trend att37
21:11:43  49  FROM svm6142
21:11:43  50  ORDER BY ydate
21:11:43  51  /

Table created.

Elapsed: 00:00:04.61
21:11:47 SQL> 
21:11:47 SQL> -- rpt
21:11:47 SQL> 
21:11:47 SQL> SELECT
21:11:47   2  pair
21:11:47   3  ,trend
21:11:47   4  ,gatt
21:11:47   5  ,COUNT(pair)
21:11:47   6  ,AVG(g6)
21:11:47   7  FROM svm6162
21:11:47   8  GROUP BY pair,trend,gatt
21:11:47   9  ORDER BY pair,trend,gatt
21:11:47  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5204 -.16586969
usd_jpy 	-1 up	      4812 .164690685
usd_jpy 	 1 nup	      4928 -.15620024
usd_jpy 	 1 up	      4240 .166201721
usd_jpy 	 1		72

Elapsed: 00:00:00.03
21:11:47 SQL> 
21:11:47 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.19
21:11:48 SQL> CREATE TABLE modsrc COMPRESS AS
21:11:48   2  SELECT
21:11:48   3  pair
21:11:48   4  ,ydate
21:11:48   5  ,prdate
21:11:48   6  ,trend
21:11:48   7  ,g6
21:11:48   8  ,gatt
21:11:48   9  ,gattn
21:11:48  10  FROM svm6162
21:11:48  11  /

Table created.

Elapsed: 00:00:00.11
21:11:48 SQL> 
21:11:48 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
21:11:48 SQL> 
21:11:48 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
21:11:48 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
21:11:48   2  SELECT
21:11:48   3  ydate
21:11:48   4  ,trend jpy_trend
21:11:48   5  ,g6    jpy_g6
21:11:48   6  ,gatt  jpy_gatt
21:11:48   7  ,gattn jpy_gattn
21:11:48   8  FROM modsrc
21:11:48   9  /

Table created.

Elapsed: 00:00:00.08
21:11:48 SQL> 
21:11:48 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
21:11:48 SQL> 
21:11:48 SQL> -- I need a copy of the attributes:
21:11:48 SQL> 
21:11:48 SQL> 
21:11:48 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.07
21:11:48 SQL> CREATE TABLE jpy_att COMPRESS AS
21:11:48   2  SELECT
21:11:48   3  ydate
21:11:48   4  ,att00 jpy_att00
21:11:48   5  ,att01 jpy_att01
21:11:48   6  ,att02 jpy_att02
21:11:48   7  ,att03 jpy_att03
21:11:48   8  ,att04 jpy_att04
21:11:48   9  ,att05 jpy_att05
21:11:48  10  ,att06 jpy_att06
21:11:48  11  ,att07 jpy_att07
21:11:48  12  ,att08 jpy_att08
21:11:48  13  ,att09 jpy_att09
21:11:48  14  ,att10 jpy_att10
21:11:48  15  ,att11 jpy_att11
21:11:48  16  ,att12 jpy_att12
21:11:48  17  ,att13 jpy_att13
21:11:48  18  ,att14 jpy_att14
21:11:48  19  ,att15 jpy_att15
21:11:48  20  ,att16 jpy_att16
21:11:48  21  ,att17 jpy_att17
21:11:48  22  ,att18 jpy_att18
21:11:48  23  ,att19 jpy_att19
21:11:48  24  ,att20 jpy_att20
21:11:48  25  ,att21 jpy_att21
21:11:48  26  ,att22 jpy_att22
21:11:48  27  ,att23 jpy_att23
21:11:48  28  ,att24 jpy_att24
21:11:48  29  ,att25 jpy_att25
21:11:48  30  ,att26 jpy_att26
21:11:48  31  ,att27 jpy_att27
21:11:48  32  ,att28 jpy_att28
21:11:48  33  ,att29 jpy_att29
21:11:48  34  ,att30 jpy_att30
21:11:48  35  ,att31 jpy_att31
21:11:48  36  ,att32 jpy_att32
21:11:48  37  ,att33 jpy_att33
21:11:48  38  ,att34 jpy_att34
21:11:48  39  ,att35 jpy_att35
21:11:48  40  ,att36 jpy_att36
21:11:48  41  ,att37 jpy_att37
21:11:48  42  FROM svm6162
21:11:48  43  /

Table created.

Elapsed: 00:00:00.18
21:11:49 SQL> 
21:11:49 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
21:11:49 SQL> 
21:11:49 SQL> -- rpt
21:11:49 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.88
21:11:50 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.01
21:11:50 SQL> 
21:11:50 SQL> --
21:11:50 SQL> -- cad610.sql
21:11:50 SQL> --
21:11:50 SQL> 
21:11:50 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:11:50 SQL> 
21:11:50 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.37
21:11:50 SQL> 
21:11:50 SQL> -- I created di5min here:
21:11:50 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:11:50 SQL> 
21:11:50 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:11:50   2  SELECT
21:11:50   3  pair
21:11:50   4  ,ydate
21:11:50   5  ,prdate
21:11:50   6  ,rownum rnum -- acts as t in my time-series
21:11:50   7  ,clse
21:11:50   8  -- Derive a bunch of attributes from clse, the latest price:
21:11:50   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:11:50  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:11:50  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:11:50  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:11:50  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:11:50  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:11:50  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:11:50  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:11:50  17  --
21:11:50  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:11:50  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:11:50  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:11:50  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:11:50  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:11:50  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:11:50  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:11:50  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:11:50  26  --
21:11:50  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:11:50  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:11:50  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:11:50  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:11:50  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:11:50  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:11:50  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:11:50  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:11:50  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:11:50  36  FROM di5min WHERE pair LIKE'%cad%'
21:11:50  37  AND ydate > sysdate - 95
21:11:50  38  ORDER BY ydate
21:11:50  39  /

View created.

Elapsed: 00:00:00.05
21:11:50 SQL> 
21:11:50 SQL> -- rpt
21:11:50 SQL> 
21:11:50 SQL> SELECT
21:11:50   2  pair
21:11:50   3  ,COUNT(pair)
21:11:50   4  ,MIN(clse),MAX(clse)
21:11:50   5  ,MIN(avg6),MAX(avg6)
21:11:50   6  ,MIN(ydate),MAX(ydate)
21:11:50   7  FROM svm6102
21:11:50   8  GROUP BY pair
21:11:50   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19256    .988925	   1.0355 .990603938 1.03282877 2010-09-30 21:15:01 2011-01-03 21:05:00

Elapsed: 00:00:00.83
21:11:51 SQL> 
21:11:51 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:11:51 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
21:11:51 SQL> CREATE TABLE svm6122 COMPRESS AS
21:11:51   2  SELECT
21:11:51   3  pair
21:11:51   4  ,ydate
21:11:51   5  ,prdate
21:11:51   6  ,clse
21:11:51   7  -- g6 is important. I want to predict g6:
21:11:51   8  ,ld6 - clse g6
21:11:51   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:11:51  10  -- I want more attributes from the ones I derived above:
21:11:51  11  -- clse relation to moving-min
21:11:51  12  ,clse-min4  cm4
21:11:51  13  ,clse-min6  cm6
21:11:51  14  ,clse-min8  cm8
21:11:51  15  ,clse-min10 cm10
21:11:51  16  ,clse-min12 cm12
21:11:51  17  ,clse-min14 cm14
21:11:51  18  ,clse-min16 cm16
21:11:51  19  ,clse-min18 cm18
21:11:51  20  -- clse relation to moving-avg
21:11:51  21  ,clse-avg4  ca4
21:11:51  22  ,clse-avg6  ca6
21:11:51  23  ,clse-avg8  ca8
21:11:51  24  ,clse-avg10 ca10
21:11:51  25  ,clse-avg12 ca12
21:11:51  26  ,clse-avg14 ca14
21:11:51  27  ,clse-avg16 ca16
21:11:51  28  ,clse-avg18 ca18
21:11:51  29  -- clse relation to moving-max
21:11:51  30  ,clse-max4  cx4
21:11:51  31  ,clse-max6  cx6
21:11:51  32  ,clse-max8  cx8
21:11:51  33  ,clse-max10 cx10
21:11:51  34  ,clse-max12 cx12
21:11:51  35  ,clse-max14 cx14
21:11:51  36  ,clse-max16 cx16
21:11:51  37  ,clse-max18 cx18
21:11:51  38  -- Derive more attributes.
21:11:51  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:11:51  40  -- But COVAR_POP is more stable:
21:11:51  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:11:51  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:11:51  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:11:51  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:11:51  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:11:51  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:11:51  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:11:51  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:11:51  49  -- Derive date related attributes:
21:11:51  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:11:51  51  ,0+TO_CHAR(ydate,'D')d
21:11:51  52  ,0+TO_CHAR(ydate,'W')w
21:11:51  53  -- mpm stands for minutes-past-midnight:
21:11:51  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:11:51  55  -- mph stands for minutes-past-hour:
21:11:51  56  ,0+TO_CHAR(ydate,'MI')mph
21:11:51  57  FROM svm6102
21:11:51  58  ORDER BY ydate
21:11:51  59  /

Table created.

Elapsed: 00:00:02.00
21:11:53 SQL> 
21:11:53 SQL> -- rpt
21:11:53 SQL> 
21:11:53 SQL> SELECT
21:11:53   2  pair
21:11:53   3  ,COUNT(pair)
21:11:53   4  ,MIN(clse),MAX(clse)
21:11:53   5  ,MIN(ydate),MAX(ydate)
21:11:53   6  FROM svm6122
21:11:53   7  GROUP BY pair
21:11:53   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19256    .988925	   1.0355 2010-09-30 21:15:01 2011-01-03 21:05:00

Elapsed: 00:00:00.05
21:11:53 SQL> 
21:11:53 SQL> -- Prepare for derivation of NTILE based params:
21:11:53 SQL> 
21:11:53 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.26
21:11:54 SQL> CREATE TABLE svm6142 COMPRESS AS
21:11:54   2  SELECT
21:11:54   3  pair
21:11:54   4  ,ydate
21:11:54   5  ,prdate
21:11:54   6  ,clse
21:11:54   7  ,g6
21:11:54   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:11:54   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:11:54  10  ,CASE WHEN trend IS NULL THEN 1
21:11:54  11  	    WHEN trend =0      THEN 1
21:11:54  12  	    ELSE trend END trend
21:11:54  13  ,cm4
21:11:54  14  ,cm6
21:11:54  15  ,cm8
21:11:54  16  ,cm10
21:11:54  17  ,cm12
21:11:54  18  ,cm14
21:11:54  19  ,cm16
21:11:54  20  ,cm18
21:11:54  21  --
21:11:54  22  ,ca4
21:11:54  23  ,ca6
21:11:54  24  ,ca8
21:11:54  25  ,ca10
21:11:54  26  ,ca12
21:11:54  27  ,ca14
21:11:54  28  ,ca16
21:11:54  29  ,ca18
21:11:54  30  --
21:11:54  31  ,cx4
21:11:54  32  ,cx6
21:11:54  33  ,cx8
21:11:54  34  ,cx10
21:11:54  35  ,cx12
21:11:54  36  ,cx14
21:11:54  37  ,cx16
21:11:54  38  ,cx18
21:11:54  39  --
21:11:54  40  ,crr4
21:11:54  41  ,crr6
21:11:54  42  ,crr8
21:11:54  43  ,crr10
21:11:54  44  ,crr12
21:11:54  45  ,crr14
21:11:54  46  ,crr16
21:11:54  47  ,crr18
21:11:54  48  --
21:11:54  49  ,hh
21:11:54  50  ,d
21:11:54  51  ,w
21:11:54  52  ,mpm
21:11:54  53  ,mph
21:11:54  54  FROM svm6122
21:11:54  55  ORDER BY ydate
21:11:54  56  /

Table created.

Elapsed: 00:00:00.35
21:11:54 SQL> 
21:11:54 SQL> -- rpt
21:11:54 SQL> 
21:11:54 SQL> SELECT
21:11:54   2  pair
21:11:54   3  ,trend
21:11:54   4  ,gatt
21:11:54   5  ,COUNT(pair)
21:11:54   6  ,AVG(g6)
21:11:54   7  FROM svm6142
21:11:54   8  GROUP BY pair,trend,gatt
21:11:54   9  ORDER BY pair,trend,gatt
21:11:54  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7366 -.00128854
usd_cad 	-1 up	      2980 .003052735
usd_cad 	-1		50
usd_cad 	 1 nup	      6544 -.00164844
usd_cad 	 1 up	      2294 .003663844
usd_cad 	 1		22

6 rows selected.

Elapsed: 00:00:00.03
21:11:54 SQL> 
21:11:54 SQL> 
21:11:54 SQL> -- Derive NTILE based params:
21:11:54 SQL> 
21:11:54 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.19
21:11:54 SQL> CREATE TABLE svm6162 COMPRESS AS
21:11:54   2  SELECT
21:11:54   3  pair
21:11:54   4  ,ydate
21:11:54   5  ,prdate
21:11:54   6  ,clse
21:11:54   7  ,g6
21:11:54   8  ,gatt
21:11:54   9  ,gattn
21:11:54  10  ,trend
21:11:54  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:11:54  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:11:54  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:11:54  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:11:54  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:11:54  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:11:54  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:11:54  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:11:54  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:11:54  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:11:54  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:11:54  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:11:54  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:11:54  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:11:54  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:11:54  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:11:54  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:11:54  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:11:54  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:11:54  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:11:54  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:11:54  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:11:54  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:11:54  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:11:54  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:11:54  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:11:54  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:11:54  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:11:54  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:11:54  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:11:54  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:11:54  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:11:54  43  ,hh  att32
21:11:54  44  ,d   att33
21:11:54  45  ,w   att34
21:11:54  46  ,mpm att35
21:11:54  47  ,mph att36
21:11:54  48  ,trend att37
21:11:54  49  FROM svm6142
21:11:54  50  ORDER BY ydate
21:11:54  51  /

Table created.

Elapsed: 00:00:04.62
21:11:59 SQL> 
21:11:59 SQL> -- rpt
21:11:59 SQL> 
21:11:59 SQL> SELECT
21:11:59   2  pair
21:11:59   3  ,trend
21:11:59   4  ,gatt
21:11:59   5  ,COUNT(pair)
21:11:59   6  ,AVG(g6)
21:11:59   7  FROM svm6162
21:11:59   8  GROUP BY pair,trend,gatt
21:11:59   9  ORDER BY pair,trend,gatt
21:11:59  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7366 -.00128854
usd_cad 	-1 up	      2980 .003052735
usd_cad 	-1		50
usd_cad 	 1 nup	      6544 -.00164844
usd_cad 	 1 up	      2294 .003663844
usd_cad 	 1		22

6 rows selected.

Elapsed: 00:00:00.03
21:11:59 SQL> 
21:11:59 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.10
21:11:59 SQL> CREATE TABLE modsrc COMPRESS AS
21:11:59   2  SELECT
21:11:59   3  pair
21:11:59   4  ,ydate
21:11:59   5  ,prdate
21:11:59   6  ,trend
21:11:59   7  ,g6
21:11:59   8  ,gatt
21:11:59   9  ,gattn
21:11:59  10  FROM svm6162
21:11:59  11  /

Table created.

Elapsed: 00:00:00.13
21:11:59 SQL> 
21:11:59 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
21:11:59 SQL> 
21:11:59 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
21:11:59 SQL> CREATE TABLE cad_ms610 COMPRESS AS
21:11:59   2  SELECT
21:11:59   3  ydate
21:11:59   4  ,trend cad_trend
21:11:59   5  ,g6    cad_g6
21:11:59   6  ,gatt  cad_gatt
21:11:59   7  ,gattn cad_gattn
21:11:59   8  FROM modsrc
21:11:59   9  /

Table created.

Elapsed: 00:00:00.08
21:12:00 SQL> 
21:12:00 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
21:12:00 SQL> 
21:12:00 SQL> -- I need a copy of the attributes:
21:12:00 SQL> 
21:12:00 SQL> 
21:12:00 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.05
21:12:00 SQL> CREATE TABLE cad_att COMPRESS AS
21:12:00   2  SELECT
21:12:00   3  ydate
21:12:00   4  ,att00 cad_att00
21:12:00   5  ,att01 cad_att01
21:12:00   6  ,att02 cad_att02
21:12:00   7  ,att03 cad_att03
21:12:00   8  ,att04 cad_att04
21:12:00   9  ,att05 cad_att05
21:12:00  10  ,att06 cad_att06
21:12:00  11  ,att07 cad_att07
21:12:00  12  ,att08 cad_att08
21:12:00  13  ,att09 cad_att09
21:12:00  14  ,att10 cad_att10
21:12:00  15  ,att11 cad_att11
21:12:00  16  ,att12 cad_att12
21:12:00  17  ,att13 cad_att13
21:12:00  18  ,att14 cad_att14
21:12:00  19  ,att15 cad_att15
21:12:00  20  ,att16 cad_att16
21:12:00  21  ,att17 cad_att17
21:12:00  22  ,att18 cad_att18
21:12:00  23  ,att19 cad_att19
21:12:00  24  ,att20 cad_att20
21:12:00  25  ,att21 cad_att21
21:12:00  26  ,att22 cad_att22
21:12:00  27  ,att23 cad_att23
21:12:00  28  ,att24 cad_att24
21:12:00  29  ,att25 cad_att25
21:12:00  30  ,att26 cad_att26
21:12:00  31  ,att27 cad_att27
21:12:00  32  ,att28 cad_att28
21:12:00  33  ,att29 cad_att29
21:12:00  34  ,att30 cad_att30
21:12:00  35  ,att31 cad_att31
21:12:00  36  ,att32 cad_att32
21:12:00  37  ,att33 cad_att33
21:12:00  38  ,att34 cad_att34
21:12:00  39  ,att35 cad_att35
21:12:00  40  ,att36 cad_att36
21:12:00  41  ,att37 cad_att37
21:12:00  42  FROM svm6162
21:12:00  43  /

Table created.

Elapsed: 00:00:00.16
21:12:00 SQL> 
21:12:00 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
21:12:00 SQL> 
21:12:00 SQL> -- rpt
21:12:00 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.83
21:12:01 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.00
21:12:01 SQL> 
21:12:01 SQL> --
21:12:01 SQL> -- chf610.sql
21:12:01 SQL> --
21:12:01 SQL> 
21:12:01 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:12:01 SQL> 
21:12:01 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.40
21:12:02 SQL> 
21:12:02 SQL> -- I created di5min here:
21:12:02 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:12:02 SQL> 
21:12:02 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:12:02   2  SELECT
21:12:02   3  pair
21:12:02   4  ,ydate
21:12:02   5  ,prdate
21:12:02   6  ,rownum rnum -- acts as t in my time-series
21:12:02   7  ,clse
21:12:02   8  -- Derive a bunch of attributes from clse, the latest price:
21:12:02   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:12:02  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:12:02  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:12:02  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:12:02  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:12:02  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:12:02  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:12:02  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:12:02  17  --
21:12:02  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:12:02  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:12:02  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:12:02  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:12:02  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:12:02  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:12:02  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:12:02  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:12:02  26  --
21:12:02  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:12:02  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:12:02  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:12:02  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:12:02  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:12:02  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:12:02  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:12:02  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:12:02  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:12:02  36  FROM di5min WHERE pair LIKE'%chf%'
21:12:02  37  AND ydate > sysdate - 95
21:12:02  38  ORDER BY ydate
21:12:02  39  /

View created.

Elapsed: 00:00:00.04
21:12:02 SQL> 
21:12:02 SQL> -- rpt
21:12:02 SQL> 
21:12:02 SQL> SELECT
21:12:02   2  pair
21:12:02   3  ,COUNT(pair)
21:12:02   4  ,MIN(clse),MAX(clse)
21:12:02   5  ,MIN(avg6),MAX(avg6)
21:12:02   6  ,MIN(ydate),MAX(ydate)
21:12:02   7  FROM svm6102
21:12:02   8  GROUP BY pair
21:12:02   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19259    .931675	  1.00635 .933522432 1.00498151 2010-09-30 21:15:01 2011-01-03 21:05:00

Elapsed: 00:00:00.86
21:12:03 SQL> 
21:12:03 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:12:03 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.19
21:12:03 SQL> CREATE TABLE svm6122 COMPRESS AS
21:12:03   2  SELECT
21:12:03   3  pair
21:12:03   4  ,ydate
21:12:03   5  ,prdate
21:12:03   6  ,clse
21:12:03   7  -- g6 is important. I want to predict g6:
21:12:03   8  ,ld6 - clse g6
21:12:03   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:12:03  10  -- I want more attributes from the ones I derived above:
21:12:03  11  -- clse relation to moving-min
21:12:03  12  ,clse-min4  cm4
21:12:03  13  ,clse-min6  cm6
21:12:03  14  ,clse-min8  cm8
21:12:03  15  ,clse-min10 cm10
21:12:03  16  ,clse-min12 cm12
21:12:03  17  ,clse-min14 cm14
21:12:03  18  ,clse-min16 cm16
21:12:03  19  ,clse-min18 cm18
21:12:03  20  -- clse relation to moving-avg
21:12:03  21  ,clse-avg4  ca4
21:12:03  22  ,clse-avg6  ca6
21:12:03  23  ,clse-avg8  ca8
21:12:03  24  ,clse-avg10 ca10
21:12:03  25  ,clse-avg12 ca12
21:12:03  26  ,clse-avg14 ca14
21:12:03  27  ,clse-avg16 ca16
21:12:03  28  ,clse-avg18 ca18
21:12:03  29  -- clse relation to moving-max
21:12:03  30  ,clse-max4  cx4
21:12:03  31  ,clse-max6  cx6
21:12:03  32  ,clse-max8  cx8
21:12:03  33  ,clse-max10 cx10
21:12:03  34  ,clse-max12 cx12
21:12:03  35  ,clse-max14 cx14
21:12:03  36  ,clse-max16 cx16
21:12:03  37  ,clse-max18 cx18
21:12:03  38  -- Derive more attributes.
21:12:03  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:12:03  40  -- But COVAR_POP is more stable:
21:12:03  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:12:03  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:12:03  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:12:03  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:12:03  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:12:03  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:12:03  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:12:03  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:12:03  49  -- Derive date related attributes:
21:12:03  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:12:03  51  ,0+TO_CHAR(ydate,'D')d
21:12:03  52  ,0+TO_CHAR(ydate,'W')w
21:12:03  53  -- mpm stands for minutes-past-midnight:
21:12:03  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:12:03  55  -- mph stands for minutes-past-hour:
21:12:03  56  ,0+TO_CHAR(ydate,'MI')mph
21:12:03  57  FROM svm6102
21:12:03  58  ORDER BY ydate
21:12:03  59  /

Table created.

Elapsed: 00:00:02.00
21:12:05 SQL> 
21:12:05 SQL> -- rpt
21:12:05 SQL> 
21:12:05 SQL> SELECT
21:12:05   2  pair
21:12:05   3  ,COUNT(pair)
21:12:05   4  ,MIN(clse),MAX(clse)
21:12:05   5  ,MIN(ydate),MAX(ydate)
21:12:05   6  FROM svm6122
21:12:05   7  GROUP BY pair
21:12:05   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19259    .931675	  1.00635 2010-09-30 21:15:01 2011-01-03 21:05:00

Elapsed: 00:00:00.04
21:12:05 SQL> 
21:12:05 SQL> -- Prepare for derivation of NTILE based params:
21:12:05 SQL> 
21:12:05 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.22
21:12:05 SQL> CREATE TABLE svm6142 COMPRESS AS
21:12:05   2  SELECT
21:12:05   3  pair
21:12:05   4  ,ydate
21:12:05   5  ,prdate
21:12:05   6  ,clse
21:12:05   7  ,g6
21:12:05   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:12:05   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:12:05  10  ,CASE WHEN trend IS NULL THEN 1
21:12:05  11  	    WHEN trend =0      THEN 1
21:12:05  12  	    ELSE trend END trend
21:12:05  13  ,cm4
21:12:05  14  ,cm6
21:12:05  15  ,cm8
21:12:05  16  ,cm10
21:12:05  17  ,cm12
21:12:05  18  ,cm14
21:12:05  19  ,cm16
21:12:05  20  ,cm18
21:12:05  21  --
21:12:05  22  ,ca4
21:12:05  23  ,ca6
21:12:05  24  ,ca8
21:12:05  25  ,ca10
21:12:05  26  ,ca12
21:12:05  27  ,ca14
21:12:05  28  ,ca16
21:12:05  29  ,ca18
21:12:05  30  --
21:12:05  31  ,cx4
21:12:05  32  ,cx6
21:12:05  33  ,cx8
21:12:05  34  ,cx10
21:12:05  35  ,cx12
21:12:05  36  ,cx14
21:12:05  37  ,cx16
21:12:05  38  ,cx18
21:12:05  39  --
21:12:05  40  ,crr4
21:12:05  41  ,crr6
21:12:05  42  ,crr8
21:12:05  43  ,crr10
21:12:05  44  ,crr12
21:12:05  45  ,crr14
21:12:05  46  ,crr16
21:12:05  47  ,crr18
21:12:05  48  --
21:12:05  49  ,hh
21:12:05  50  ,d
21:12:05  51  ,w
21:12:05  52  ,mpm
21:12:05  53  ,mph
21:12:05  54  FROM svm6122
21:12:05  55  ORDER BY ydate
21:12:05  56  /

Table created.

Elapsed: 00:00:00.36
21:12:05 SQL> 
21:12:05 SQL> -- rpt
21:12:05 SQL> 
21:12:05 SQL> SELECT
21:12:05   2  pair
21:12:05   3  ,trend
21:12:05   4  ,gatt
21:12:05   5  ,COUNT(pair)
21:12:05   6  ,AVG(g6)
21:12:05   7  FROM svm6142
21:12:05   8  GROUP BY pair,trend,gatt
21:12:05   9  ORDER BY pair,trend,gatt
21:12:05  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7249 -.00200062
usd_chf 	-1 up	      3037 .003858739
usd_chf 	-1		71
usd_chf 	 1 nup	      6360 -.00158619
usd_chf 	 1 up	      2541 .003693621
usd_chf 	 1		 1

6 rows selected.

Elapsed: 00:00:00.04
21:12:05 SQL> 
21:12:05 SQL> 
21:12:05 SQL> -- Derive NTILE based params:
21:12:05 SQL> 
21:12:05 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
21:12:06 SQL> CREATE TABLE svm6162 COMPRESS AS
21:12:06   2  SELECT
21:12:06   3  pair
21:12:06   4  ,ydate
21:12:06   5  ,prdate
21:12:06   6  ,clse
21:12:06   7  ,g6
21:12:06   8  ,gatt
21:12:06   9  ,gattn
21:12:06  10  ,trend
21:12:06  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:12:06  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:12:06  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:12:06  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:12:06  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:12:06  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:12:06  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:12:06  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:12:06  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:12:06  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:12:06  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:12:06  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:12:06  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:12:06  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:12:06  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:12:06  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:12:06  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:12:06  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:12:06  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:12:06  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:12:06  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:12:06  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:12:06  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:12:06  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:12:06  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:12:06  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:12:06  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:12:06  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:12:06  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:12:06  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:12:06  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:12:06  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:12:06  43  ,hh  att32
21:12:06  44  ,d   att33
21:12:06  45  ,w   att34
21:12:06  46  ,mpm att35
21:12:06  47  ,mph att36
21:12:06  48  ,trend att37
21:12:06  49  FROM svm6142
21:12:06  50  ORDER BY ydate
21:12:06  51  /

Table created.

Elapsed: 00:00:04.67
21:12:10 SQL> 
21:12:10 SQL> -- rpt
21:12:10 SQL> 
21:12:10 SQL> SELECT
21:12:10   2  pair
21:12:10   3  ,trend
21:12:10   4  ,gatt
21:12:10   5  ,COUNT(pair)
21:12:10   6  ,AVG(g6)
21:12:10   7  FROM svm6162
21:12:10   8  GROUP BY pair,trend,gatt
21:12:10   9  ORDER BY pair,trend,gatt
21:12:10  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7249 -.00200062
usd_chf 	-1 up	      3037 .003858739
usd_chf 	-1		71
usd_chf 	 1 nup	      6360 -.00158619
usd_chf 	 1 up	      2541 .003693621
usd_chf 	 1		 1

6 rows selected.

Elapsed: 00:00:00.03
21:12:10 SQL> 
21:12:10 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
21:12:10 SQL> CREATE TABLE modsrc COMPRESS AS
21:12:10   2  SELECT
21:12:10   3  pair
21:12:10   4  ,ydate
21:12:10   5  ,prdate
21:12:10   6  ,trend
21:12:10   7  ,g6
21:12:10   8  ,gatt
21:12:10   9  ,gattn
21:12:10  10  FROM svm6162
21:12:10  11  /

Table created.

Elapsed: 00:00:00.09
21:12:10 SQL> 
21:12:10 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
21:12:11 SQL> 
21:12:11 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
21:12:11 SQL> CREATE TABLE chf_ms610 COMPRESS AS
21:12:11   2  SELECT
21:12:11   3  ydate
21:12:11   4  ,trend chf_trend
21:12:11   5  ,g6    chf_g6
21:12:11   6  ,gatt  chf_gatt
21:12:11   7  ,gattn chf_gattn
21:12:11   8  FROM modsrc
21:12:11   9  /

Table created.

Elapsed: 00:00:00.07
21:12:11 SQL> 
21:12:11 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
21:12:11 SQL> 
21:12:11 SQL> -- I need a copy of the attributes:
21:12:11 SQL> 
21:12:11 SQL> 
21:12:11 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.05
21:12:11 SQL> CREATE TABLE chf_att COMPRESS AS
21:12:11   2  SELECT
21:12:11   3  ydate
21:12:11   4  ,att00 chf_att00
21:12:11   5  ,att01 chf_att01
21:12:11   6  ,att02 chf_att02
21:12:11   7  ,att03 chf_att03
21:12:11   8  ,att04 chf_att04
21:12:11   9  ,att05 chf_att05
21:12:11  10  ,att06 chf_att06
21:12:11  11  ,att07 chf_att07
21:12:11  12  ,att08 chf_att08
21:12:11  13  ,att09 chf_att09
21:12:11  14  ,att10 chf_att10
21:12:11  15  ,att11 chf_att11
21:12:11  16  ,att12 chf_att12
21:12:11  17  ,att13 chf_att13
21:12:11  18  ,att14 chf_att14
21:12:11  19  ,att15 chf_att15
21:12:11  20  ,att16 chf_att16
21:12:11  21  ,att17 chf_att17
21:12:11  22  ,att18 chf_att18
21:12:11  23  ,att19 chf_att19
21:12:11  24  ,att20 chf_att20
21:12:11  25  ,att21 chf_att21
21:12:11  26  ,att22 chf_att22
21:12:11  27  ,att23 chf_att23
21:12:11  28  ,att24 chf_att24
21:12:11  29  ,att25 chf_att25
21:12:11  30  ,att26 chf_att26
21:12:11  31  ,att27 chf_att27
21:12:11  32  ,att28 chf_att28
21:12:11  33  ,att29 chf_att29
21:12:11  34  ,att30 chf_att30
21:12:11  35  ,att31 chf_att31
21:12:11  36  ,att32 chf_att32
21:12:11  37  ,att33 chf_att33
21:12:11  38  ,att34 chf_att34
21:12:11  39  ,att35 chf_att35
21:12:11  40  ,att36 chf_att36
21:12:11  41  ,att37 chf_att37
21:12:11  42  FROM svm6162
21:12:11  43  /

Table created.

Elapsed: 00:00:00.18
21:12:11 SQL> 
21:12:11 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
21:12:12 SQL> 
21:12:12 SQL> -- rpt
21:12:12 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.83
21:12:13 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.00
21:12:13 SQL> 
21:12:13 SQL> --
21:12:13 SQL> -- ech610.sql
21:12:13 SQL> --
21:12:13 SQL> 
21:12:13 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:12:13 SQL> 
21:12:13 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.49
21:12:13 SQL> 
21:12:13 SQL> -- I created di5min here:
21:12:13 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:12:13 SQL> 
21:12:13 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:12:13   2  SELECT
21:12:13   3  pair
21:12:13   4  ,ydate
21:12:13   5  ,prdate
21:12:13   6  ,rownum rnum -- acts as t in my time-series
21:12:13   7  ,clse
21:12:13   8  -- Derive a bunch of attributes from clse, the latest price:
21:12:13   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:12:13  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:12:13  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:12:13  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:12:13  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:12:13  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:12:13  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:12:13  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:12:13  17  --
21:12:13  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:12:13  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:12:13  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:12:13  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:12:13  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:12:13  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:12:13  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:12:13  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:12:13  26  --
21:12:13  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:12:13  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:12:13  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:12:13  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:12:13  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:12:13  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:12:13  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:12:13  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:12:13  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:12:13  36  FROM di5min WHERE pair LIKE'%ech%'
21:12:13  37  AND ydate > sysdate - 95
21:12:13  38  ORDER BY ydate
21:12:13  39  /

View created.

Elapsed: 00:00:00.05
21:12:13 SQL> 
21:12:13 SQL> -- rpt
21:12:13 SQL> 
21:12:13 SQL> SELECT
21:12:13   2  pair
21:12:13   3  ,COUNT(pair)
21:12:13   4  ,MIN(clse),MAX(clse)
21:12:13   5  ,MIN(avg6),MAX(avg6)
21:12:13   6  ,MIN(ydate),MAX(ydate)
21:12:13   7  FROM svm6102
21:12:13   8  GROUP BY pair
21:12:13   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19258 1.24192946 1.38284305 1.24320711 1.37986485 2010-09-30 21:15:01 2011-01-03 21:05:00

Elapsed: 00:00:00.79
21:12:14 SQL> 
21:12:14 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:12:14 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.22
21:12:14 SQL> CREATE TABLE svm6122 COMPRESS AS
21:12:14   2  SELECT
21:12:14   3  pair
21:12:14   4  ,ydate
21:12:14   5  ,prdate
21:12:14   6  ,clse
21:12:14   7  -- g6 is important. I want to predict g6:
21:12:14   8  ,ld6 - clse g6
21:12:14   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:12:14  10  -- I want more attributes from the ones I derived above:
21:12:14  11  -- clse relation to moving-min
21:12:14  12  ,clse-min4  cm4
21:12:14  13  ,clse-min6  cm6
21:12:14  14  ,clse-min8  cm8
21:12:14  15  ,clse-min10 cm10
21:12:14  16  ,clse-min12 cm12
21:12:14  17  ,clse-min14 cm14
21:12:14  18  ,clse-min16 cm16
21:12:14  19  ,clse-min18 cm18
21:12:14  20  -- clse relation to moving-avg
21:12:14  21  ,clse-avg4  ca4
21:12:14  22  ,clse-avg6  ca6
21:12:14  23  ,clse-avg8  ca8
21:12:14  24  ,clse-avg10 ca10
21:12:14  25  ,clse-avg12 ca12
21:12:14  26  ,clse-avg14 ca14
21:12:14  27  ,clse-avg16 ca16
21:12:14  28  ,clse-avg18 ca18
21:12:14  29  -- clse relation to moving-max
21:12:14  30  ,clse-max4  cx4
21:12:14  31  ,clse-max6  cx6
21:12:14  32  ,clse-max8  cx8
21:12:14  33  ,clse-max10 cx10
21:12:14  34  ,clse-max12 cx12
21:12:14  35  ,clse-max14 cx14
21:12:14  36  ,clse-max16 cx16
21:12:14  37  ,clse-max18 cx18
21:12:14  38  -- Derive more attributes.
21:12:14  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:12:14  40  -- But COVAR_POP is more stable:
21:12:14  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:12:14  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:12:14  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:12:14  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:12:14  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:12:14  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:12:14  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:12:14  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:12:14  49  -- Derive date related attributes:
21:12:14  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:12:14  51  ,0+TO_CHAR(ydate,'D')d
21:12:14  52  ,0+TO_CHAR(ydate,'W')w
21:12:14  53  -- mpm stands for minutes-past-midnight:
21:12:14  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:12:14  55  -- mph stands for minutes-past-hour:
21:12:14  56  ,0+TO_CHAR(ydate,'MI')mph
21:12:14  57  FROM svm6102
21:12:14  58  ORDER BY ydate
21:12:14  59  /

Table created.

Elapsed: 00:00:02.04
21:12:16 SQL> 
21:12:16 SQL> -- rpt
21:12:16 SQL> 
21:12:16 SQL> SELECT
21:12:16   2  pair
21:12:16   3  ,COUNT(pair)
21:12:16   4  ,MIN(clse),MAX(clse)
21:12:16   5  ,MIN(ydate),MAX(ydate)
21:12:16   6  FROM svm6122
21:12:16   7  GROUP BY pair
21:12:16   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19258 1.24192946 1.38284305 2010-09-30 21:15:01 2011-01-03 21:05:00

Elapsed: 00:00:00.04
21:12:16 SQL> 
21:12:16 SQL> -- Prepare for derivation of NTILE based params:
21:12:16 SQL> 
21:12:16 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.30
21:12:16 SQL> CREATE TABLE svm6142 COMPRESS AS
21:12:16   2  SELECT
21:12:16   3  pair
21:12:16   4  ,ydate
21:12:16   5  ,prdate
21:12:16   6  ,clse
21:12:16   7  ,g6
21:12:16   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:12:16   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:12:16  10  ,CASE WHEN trend IS NULL THEN 1
21:12:16  11  	    WHEN trend =0      THEN 1
21:12:16  12  	    ELSE trend END trend
21:12:16  13  ,cm4
21:12:16  14  ,cm6
21:12:16  15  ,cm8
21:12:16  16  ,cm10
21:12:16  17  ,cm12
21:12:16  18  ,cm14
21:12:16  19  ,cm16
21:12:16  20  ,cm18
21:12:16  21  --
21:12:16  22  ,ca4
21:12:16  23  ,ca6
21:12:16  24  ,ca8
21:12:16  25  ,ca10
21:12:16  26  ,ca12
21:12:16  27  ,ca14
21:12:16  28  ,ca16
21:12:16  29  ,ca18
21:12:16  30  --
21:12:16  31  ,cx4
21:12:16  32  ,cx6
21:12:16  33  ,cx8
21:12:16  34  ,cx10
21:12:16  35  ,cx12
21:12:16  36  ,cx14
21:12:16  37  ,cx16
21:12:16  38  ,cx18
21:12:16  39  --
21:12:16  40  ,crr4
21:12:16  41  ,crr6
21:12:16  42  ,crr8
21:12:16  43  ,crr10
21:12:16  44  ,crr12
21:12:16  45  ,crr14
21:12:16  46  ,crr16
21:12:16  47  ,crr18
21:12:16  48  --
21:12:16  49  ,hh
21:12:16  50  ,d
21:12:16  51  ,w
21:12:16  52  ,mpm
21:12:16  53  ,mph
21:12:16  54  FROM svm6122
21:12:16  55  ORDER BY ydate
21:12:16  56  /

Table created.

Elapsed: 00:00:00.38
21:12:17 SQL> 
21:12:17 SQL> -- rpt
21:12:17 SQL> 
21:12:17 SQL> SELECT
21:12:17   2  pair
21:12:17   3  ,trend
21:12:17   4  ,gatt
21:12:17   5  ,COUNT(pair)
21:12:17   6  ,AVG(g6)
21:12:17   7  FROM svm6142
21:12:17   8  GROUP BY pair,trend,gatt
21:12:17   9  ORDER BY pair,trend,gatt
21:12:17  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6554    -.00224
ech_usd 	-1 up	      3548 .003525863
ech_usd 	-1		23
ech_usd 	 1 nup	      6287 -.00239471
ech_usd 	 1 up	      2797 .003797678
ech_usd 	 1		49

6 rows selected.

Elapsed: 00:00:00.05
21:12:17 SQL> 
21:12:17 SQL> 
21:12:17 SQL> -- Derive NTILE based params:
21:12:17 SQL> 
21:12:17 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.11
21:12:17 SQL> CREATE TABLE svm6162 COMPRESS AS
21:12:17   2  SELECT
21:12:17   3  pair
21:12:17   4  ,ydate
21:12:17   5  ,prdate
21:12:17   6  ,clse
21:12:17   7  ,g6
21:12:17   8  ,gatt
21:12:17   9  ,gattn
21:12:17  10  ,trend
21:12:17  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:12:17  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:12:17  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:12:17  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:12:17  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:12:17  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:12:17  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:12:17  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:12:17  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:12:17  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:12:17  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:12:17  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:12:17  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:12:17  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:12:17  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:12:17  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:12:17  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:12:17  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:12:17  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:12:17  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:12:17  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:12:17  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:12:17  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:12:17  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:12:17  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:12:17  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:12:17  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:12:17  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:12:17  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:12:17  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:12:17  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:12:17  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:12:17  43  ,hh  att32
21:12:17  44  ,d   att33
21:12:17  45  ,w   att34
21:12:17  46  ,mpm att35
21:12:17  47  ,mph att36
21:12:17  48  ,trend att37
21:12:17  49  FROM svm6142
21:12:17  50  ORDER BY ydate
21:12:17  51  /

Table created.

Elapsed: 00:00:04.88
21:12:22 SQL> 
21:12:22 SQL> -- rpt
21:12:22 SQL> 
21:12:22 SQL> SELECT
21:12:22   2  pair
21:12:22   3  ,trend
21:12:22   4  ,gatt
21:12:22   5  ,COUNT(pair)
21:12:22   6  ,AVG(g6)
21:12:22   7  FROM svm6162
21:12:22   8  GROUP BY pair,trend,gatt
21:12:22   9  ORDER BY pair,trend,gatt
21:12:22  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6554    -.00224
ech_usd 	-1 up	      3548 .003525863
ech_usd 	-1		23
ech_usd 	 1 nup	      6287 -.00239471
ech_usd 	 1 up	      2797 .003797678
ech_usd 	 1		49

6 rows selected.

Elapsed: 00:00:00.03
21:12:22 SQL> 
21:12:22 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
21:12:22 SQL> CREATE TABLE modsrc COMPRESS AS
21:12:22   2  SELECT
21:12:22   3  pair
21:12:22   4  ,ydate
21:12:22   5  ,prdate
21:12:22   6  ,trend
21:12:22   7  ,g6
21:12:22   8  ,gatt
21:12:22   9  ,gattn
21:12:22  10  FROM svm6162
21:12:22  11  /

Table created.

Elapsed: 00:00:00.48
21:12:23 SQL> 
21:12:23 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
21:12:23 SQL> 
21:12:23 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.11
21:12:23 SQL> CREATE TABLE ech_ms610 COMPRESS AS
21:12:23   2  SELECT
21:12:23   3  ydate
21:12:23   4  ,trend ech_trend
21:12:23   5  ,g6    ech_g6
21:12:23   6  ,gatt  ech_gatt
21:12:23   7  ,gattn ech_gattn
21:12:23   8  FROM modsrc
21:12:23   9  /

Table created.

Elapsed: 00:00:00.06
21:12:23 SQL> 
21:12:23 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
21:12:23 SQL> 
21:12:23 SQL> -- I need a copy of the attributes:
21:12:23 SQL> 
21:12:23 SQL> 
21:12:23 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.06
21:12:23 SQL> CREATE TABLE ech_att COMPRESS AS
21:12:23   2  SELECT
21:12:23   3  ydate
21:12:23   4  ,att00 ech_att00
21:12:23   5  ,att01 ech_att01
21:12:23   6  ,att02 ech_att02
21:12:23   7  ,att03 ech_att03
21:12:23   8  ,att04 ech_att04
21:12:23   9  ,att05 ech_att05
21:12:23  10  ,att06 ech_att06
21:12:23  11  ,att07 ech_att07
21:12:23  12  ,att08 ech_att08
21:12:23  13  ,att09 ech_att09
21:12:23  14  ,att10 ech_att10
21:12:23  15  ,att11 ech_att11
21:12:23  16  ,att12 ech_att12
21:12:23  17  ,att13 ech_att13
21:12:23  18  ,att14 ech_att14
21:12:23  19  ,att15 ech_att15
21:12:23  20  ,att16 ech_att16
21:12:23  21  ,att17 ech_att17
21:12:23  22  ,att18 ech_att18
21:12:23  23  ,att19 ech_att19
21:12:23  24  ,att20 ech_att20
21:12:23  25  ,att21 ech_att21
21:12:23  26  ,att22 ech_att22
21:12:23  27  ,att23 ech_att23
21:12:23  28  ,att24 ech_att24
21:12:23  29  ,att25 ech_att25
21:12:23  30  ,att26 ech_att26
21:12:23  31  ,att27 ech_att27
21:12:23  32  ,att28 ech_att28
21:12:23  33  ,att29 ech_att29
21:12:23  34  ,att30 ech_att30
21:12:23  35  ,att31 ech_att31
21:12:23  36  ,att32 ech_att32
21:12:23  37  ,att33 ech_att33
21:12:23  38  ,att34 ech_att34
21:12:23  39  ,att35 ech_att35
21:12:23  40  ,att36 ech_att36
21:12:23  41  ,att37 ech_att37
21:12:23  42  FROM svm6162
21:12:23  43  /

Table created.

Elapsed: 00:00:00.17
21:12:23 SQL> 
21:12:23 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
21:12:24 SQL> 
21:12:24 SQL> -- rpt
21:12:24 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19258

Elapsed: 00:00:00.79
21:12:25 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19258

Elapsed: 00:00:00.00
21:12:25 SQL> 
21:12:25 SQL> --
21:12:25 SQL> -- egb610.sql
21:12:25 SQL> --
21:12:25 SQL> 
21:12:25 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:12:25 SQL> 
21:12:25 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.37
21:12:25 SQL> 
21:12:25 SQL> -- I created di5min here:
21:12:25 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:12:25 SQL> 
21:12:25 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:12:25   2  SELECT
21:12:25   3  pair
21:12:25   4  ,ydate
21:12:25   5  ,prdate
21:12:25   6  ,rownum rnum -- acts as t in my time-series
21:12:25   7  ,clse
21:12:25   8  -- Derive a bunch of attributes from clse, the latest price:
21:12:25   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:12:25  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:12:25  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:12:25  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:12:25  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:12:25  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:12:25  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:12:25  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:12:25  17  --
21:12:25  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:12:25  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:12:25  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:12:25  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:12:25  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:12:25  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:12:25  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:12:25  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:12:25  26  --
21:12:25  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:12:25  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:12:25  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:12:25  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:12:25  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:12:25  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:12:25  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:12:25  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:12:25  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:12:25  36  FROM di5min WHERE pair LIKE'%egb%'
21:12:25  37  AND ydate > sysdate - 95
21:12:25  38  ORDER BY ydate
21:12:25  39  /

View created.

Elapsed: 00:00:00.04
21:12:25 SQL> 
21:12:25 SQL> -- rpt
21:12:25 SQL> 
21:12:25 SQL> SELECT
21:12:25   2  pair
21:12:25   3  ,COUNT(pair)
21:12:25   4  ,MIN(clse),MAX(clse)
21:12:25   5  ,MIN(avg6),MAX(avg6)
21:12:25   6  ,MIN(ydate),MAX(ydate)
21:12:25   7  FROM svm6102
21:12:25   8  GROUP BY pair
21:12:25   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19257 .833520557 .893920122 .834199029 .892400287 2010-09-30 21:15:01 2011-01-03 21:05:00

Elapsed: 00:00:00.91
21:12:26 SQL> 
21:12:26 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:12:26 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.23
21:12:26 SQL> CREATE TABLE svm6122 COMPRESS AS
21:12:26   2  SELECT
21:12:26   3  pair
21:12:26   4  ,ydate
21:12:26   5  ,prdate
21:12:26   6  ,clse
21:12:26   7  -- g6 is important. I want to predict g6:
21:12:26   8  ,ld6 - clse g6
21:12:26   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:12:26  10  -- I want more attributes from the ones I derived above:
21:12:26  11  -- clse relation to moving-min
21:12:26  12  ,clse-min4  cm4
21:12:26  13  ,clse-min6  cm6
21:12:26  14  ,clse-min8  cm8
21:12:26  15  ,clse-min10 cm10
21:12:26  16  ,clse-min12 cm12
21:12:26  17  ,clse-min14 cm14
21:12:26  18  ,clse-min16 cm16
21:12:26  19  ,clse-min18 cm18
21:12:26  20  -- clse relation to moving-avg
21:12:26  21  ,clse-avg4  ca4
21:12:26  22  ,clse-avg6  ca6
21:12:26  23  ,clse-avg8  ca8
21:12:26  24  ,clse-avg10 ca10
21:12:26  25  ,clse-avg12 ca12
21:12:26  26  ,clse-avg14 ca14
21:12:26  27  ,clse-avg16 ca16
21:12:26  28  ,clse-avg18 ca18
21:12:26  29  -- clse relation to moving-max
21:12:26  30  ,clse-max4  cx4
21:12:26  31  ,clse-max6  cx6
21:12:26  32  ,clse-max8  cx8
21:12:26  33  ,clse-max10 cx10
21:12:26  34  ,clse-max12 cx12
21:12:26  35  ,clse-max14 cx14
21:12:26  36  ,clse-max16 cx16
21:12:26  37  ,clse-max18 cx18
21:12:26  38  -- Derive more attributes.
21:12:26  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:12:26  40  -- But COVAR_POP is more stable:
21:12:26  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:12:26  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:12:26  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:12:26  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:12:26  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:12:26  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:12:26  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:12:26  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:12:26  49  -- Derive date related attributes:
21:12:26  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:12:26  51  ,0+TO_CHAR(ydate,'D')d
21:12:26  52  ,0+TO_CHAR(ydate,'W')w
21:12:26  53  -- mpm stands for minutes-past-midnight:
21:12:26  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:12:26  55  -- mph stands for minutes-past-hour:
21:12:26  56  ,0+TO_CHAR(ydate,'MI')mph
21:12:26  57  FROM svm6102
21:12:26  58  ORDER BY ydate
21:12:26  59  /

Table created.

Elapsed: 00:00:02.53
21:12:29 SQL> 
21:12:29 SQL> -- rpt
21:12:29 SQL> 
21:12:29 SQL> SELECT
21:12:29   2  pair
21:12:29   3  ,COUNT(pair)
21:12:29   4  ,MIN(clse),MAX(clse)
21:12:29   5  ,MIN(ydate),MAX(ydate)
21:12:29   6  FROM svm6122
21:12:29   7  GROUP BY pair
21:12:29   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19257 .833520557 .893920122 2010-09-30 21:15:01 2011-01-03 21:05:00

Elapsed: 00:00:00.04
21:12:29 SQL> 
21:12:29 SQL> -- Prepare for derivation of NTILE based params:
21:12:29 SQL> 
21:12:29 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.18
21:12:29 SQL> CREATE TABLE svm6142 COMPRESS AS
21:12:29   2  SELECT
21:12:29   3  pair
21:12:29   4  ,ydate
21:12:29   5  ,prdate
21:12:29   6  ,clse
21:12:29   7  ,g6
21:12:29   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:12:29   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:12:29  10  ,CASE WHEN trend IS NULL THEN 1
21:12:29  11  	    WHEN trend =0      THEN 1
21:12:29  12  	    ELSE trend END trend
21:12:29  13  ,cm4
21:12:29  14  ,cm6
21:12:29  15  ,cm8
21:12:29  16  ,cm10
21:12:29  17  ,cm12
21:12:29  18  ,cm14
21:12:29  19  ,cm16
21:12:29  20  ,cm18
21:12:29  21  --
21:12:29  22  ,ca4
21:12:29  23  ,ca6
21:12:29  24  ,ca8
21:12:29  25  ,ca10
21:12:29  26  ,ca12
21:12:29  27  ,ca14
21:12:29  28  ,ca16
21:12:29  29  ,ca18
21:12:29  30  --
21:12:29  31  ,cx4
21:12:29  32  ,cx6
21:12:29  33  ,cx8
21:12:29  34  ,cx10
21:12:29  35  ,cx12
21:12:29  36  ,cx14
21:12:29  37  ,cx16
21:12:29  38  ,cx18
21:12:29  39  --
21:12:29  40  ,crr4
21:12:29  41  ,crr6
21:12:29  42  ,crr8
21:12:29  43  ,crr10
21:12:29  44  ,crr12
21:12:29  45  ,crr14
21:12:29  46  ,crr16
21:12:29  47  ,crr18
21:12:29  48  --
21:12:29  49  ,hh
21:12:29  50  ,d
21:12:29  51  ,w
21:12:29  52  ,mpm
21:12:29  53  ,mph
21:12:29  54  FROM svm6122
21:12:29  55  ORDER BY ydate
21:12:29  56  /

Table created.

Elapsed: 00:00:00.41
21:12:29 SQL> 
21:12:29 SQL> -- rpt
21:12:29 SQL> 
21:12:29 SQL> SELECT
21:12:29   2  pair
21:12:29   3  ,trend
21:12:29   4  ,gatt
21:12:29   5  ,COUNT(pair)
21:12:29   6  ,AVG(g6)
21:12:29   7  FROM svm6142
21:12:29   8  GROUP BY pair,trend,gatt
21:12:29   9  ORDER BY pair,trend,gatt
21:12:29  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7330 -.00100092
egb_usd 	-1 up	      2683 .002917202
egb_usd 	 1 nup	      6494 -.00132902
egb_usd 	 1 up	      2678 .002919689
egb_usd 	 1		72

Elapsed: 00:00:00.04
21:12:29 SQL> 
21:12:29 SQL> 
21:12:29 SQL> -- Derive NTILE based params:
21:12:29 SQL> 
21:12:29 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.23
21:12:30 SQL> CREATE TABLE svm6162 COMPRESS AS
21:12:30   2  SELECT
21:12:30   3  pair
21:12:30   4  ,ydate
21:12:30   5  ,prdate
21:12:30   6  ,clse
21:12:30   7  ,g6
21:12:30   8  ,gatt
21:12:30   9  ,gattn
21:12:30  10  ,trend
21:12:30  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:12:30  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:12:30  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:12:30  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:12:30  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:12:30  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:12:30  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:12:30  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:12:30  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:12:30  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:12:30  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:12:30  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:12:30  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:12:30  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:12:30  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:12:30  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:12:30  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:12:30  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:12:30  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:12:30  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:12:30  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:12:30  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:12:30  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:12:30  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:12:30  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:12:30  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:12:30  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:12:30  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:12:30  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:12:30  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:12:30  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:12:30  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:12:30  43  ,hh  att32
21:12:30  44  ,d   att33
21:12:30  45  ,w   att34
21:12:30  46  ,mpm att35
21:12:30  47  ,mph att36
21:12:30  48  ,trend att37
21:12:30  49  FROM svm6142
21:12:30  50  ORDER BY ydate
21:12:30  51  /

Table created.

Elapsed: 00:00:05.45
21:12:35 SQL> 
21:12:35 SQL> -- rpt
21:12:35 SQL> 
21:12:35 SQL> SELECT
21:12:35   2  pair
21:12:35   3  ,trend
21:12:35   4  ,gatt
21:12:35   5  ,COUNT(pair)
21:12:35   6  ,AVG(g6)
21:12:35   7  FROM svm6162
21:12:35   8  GROUP BY pair,trend,gatt
21:12:35   9  ORDER BY pair,trend,gatt
21:12:35  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7330 -.00100092
egb_usd 	-1 up	      2683 .002917202
egb_usd 	 1 nup	      6494 -.00132902
egb_usd 	 1 up	      2678 .002919689
egb_usd 	 1		72

Elapsed: 00:00:00.03
21:12:35 SQL> 
21:12:35 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.24
21:12:35 SQL> CREATE TABLE modsrc COMPRESS AS
21:12:35   2  SELECT
21:12:35   3  pair
21:12:35   4  ,ydate
21:12:35   5  ,prdate
21:12:35   6  ,trend
21:12:35   7  ,g6
21:12:35   8  ,gatt
21:12:35   9  ,gattn
21:12:35  10  FROM svm6162
21:12:35  11  /

Table created.

Elapsed: 00:00:00.10
21:12:35 SQL> 
21:12:35 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
21:12:36 SQL> 
21:12:36 SQL> DROP   TABLE egb_ms610 ;

Table dropped.

Elapsed: 00:00:00.40
21:12:36 SQL> CREATE TABLE egb_ms610 COMPRESS AS
21:12:36   2  SELECT
21:12:36   3  ydate
21:12:36   4  ,trend egb_trend
21:12:36   5  ,g6    egb_g6
21:12:36   6  ,gatt  egb_gatt
21:12:36   7  ,gattn egb_gattn
21:12:36   8  FROM modsrc
21:12:36   9  /

Table created.

Elapsed: 00:00:00.27
21:12:36 SQL> 
21:12:36 SQL> ANALYZE TABLE egb_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
21:12:36 SQL> 
21:12:36 SQL> -- I need a copy of the attributes:
21:12:36 SQL> 
21:12:36 SQL> 
21:12:36 SQL> DROP   TABLE egb_att;

Table dropped.

Elapsed: 00:00:00.14
21:12:37 SQL> CREATE TABLE egb_att COMPRESS AS
21:12:37   2  SELECT
21:12:37   3  ydate
21:12:37   4  ,att00 egb_att00
21:12:37   5  ,att01 egb_att01
21:12:37   6  ,att02 egb_att02
21:12:37   7  ,att03 egb_att03
21:12:37   8  ,att04 egb_att04
21:12:37   9  ,att05 egb_att05
21:12:37  10  ,att06 egb_att06
21:12:37  11  ,att07 egb_att07
21:12:37  12  ,att08 egb_att08
21:12:37  13  ,att09 egb_att09
21:12:37  14  ,att10 egb_att10
21:12:37  15  ,att11 egb_att11
21:12:37  16  ,att12 egb_att12
21:12:37  17  ,att13 egb_att13
21:12:37  18  ,att14 egb_att14
21:12:37  19  ,att15 egb_att15
21:12:37  20  ,att16 egb_att16
21:12:37  21  ,att17 egb_att17
21:12:37  22  ,att18 egb_att18
21:12:37  23  ,att19 egb_att19
21:12:37  24  ,att20 egb_att20
21:12:37  25  ,att21 egb_att21
21:12:37  26  ,att22 egb_att22
21:12:37  27  ,att23 egb_att23
21:12:37  28  ,att24 egb_att24
21:12:37  29  ,att25 egb_att25
21:12:37  30  ,att26 egb_att26
21:12:37  31  ,att27 egb_att27
21:12:37  32  ,att28 egb_att28
21:12:37  33  ,att29 egb_att29
21:12:37  34  ,att30 egb_att30
21:12:37  35  ,att31 egb_att31
21:12:37  36  ,att32 egb_att32
21:12:37  37  ,att33 egb_att33
21:12:37  38  ,att34 egb_att34
21:12:37  39  ,att35 egb_att35
21:12:37  40  ,att36 egb_att36
21:12:37  41  ,att37 egb_att37
21:12:37  42  FROM svm6162
21:12:37  43  /

Table created.

Elapsed: 00:00:00.25
21:12:37 SQL> 
21:12:37 SQL> ANALYZE TABLE egb_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.90
21:12:38 SQL> 
21:12:38 SQL> -- rpt
21:12:38 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19257

Elapsed: 00:00:00.93
21:12:39 SQL> SELECT COUNT(*)FROM egb_att;

  COUNT(*)
----------
     19257

Elapsed: 00:00:00.00
21:12:39 SQL> 
21:12:39 SQL> --
21:12:39 SQL> -- ejp610.sql
21:12:39 SQL> --
21:12:39 SQL> 
21:12:39 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:12:39 SQL> 
21:12:39 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.59
21:12:39 SQL> 
21:12:39 SQL> -- I created di5min here:
21:12:39 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:12:39 SQL> 
21:12:39 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:12:39   2  SELECT
21:12:39   3  pair
21:12:39   4  ,ydate
21:12:39   5  ,prdate
21:12:39   6  ,rownum rnum -- acts as t in my time-series
21:12:39   7  ,clse
21:12:39   8  -- Derive a bunch of attributes from clse, the latest price:
21:12:39   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:12:39  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:12:39  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:12:39  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:12:39  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:12:39  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:12:39  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:12:39  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:12:39  17  --
21:12:39  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:12:39  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:12:39  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:12:39  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:12:39  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:12:39  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:12:39  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:12:39  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:12:39  26  --
21:12:39  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:12:39  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:12:39  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:12:39  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:12:39  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:12:39  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:12:39  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:12:39  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:12:39  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:12:39  36  FROM di5min WHERE pair LIKE'%ejp%'
21:12:39  37  AND ydate > sysdate - 95
21:12:39  38  ORDER BY ydate
21:12:39  39  /

View created.

Elapsed: 00:00:00.04
21:12:39 SQL> 
21:12:39 SQL> -- rpt
21:12:39 SQL> 
21:12:39 SQL> SELECT
21:12:39   2  pair
21:12:39   3  ,COUNT(pair)
21:12:39   4  ,MIN(clse),MAX(clse)
21:12:39   5  ,MIN(avg6),MAX(avg6)
21:12:39   6  ,MIN(ydate),MAX(ydate)
21:12:39   7  FROM svm6102
21:12:39   8  GROUP BY pair
21:12:39   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ejp_usd       19255 107.643765	115.63485 107.776148 115.509678 2010-09-30 21:15:01 2011-01-03 21:05:00

Elapsed: 00:00:00.83
21:12:40 SQL> 
21:12:40 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:12:40 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.23
21:12:40 SQL> CREATE TABLE svm6122 COMPRESS AS
21:12:40   2  SELECT
21:12:40   3  pair
21:12:40   4  ,ydate
21:12:40   5  ,prdate
21:12:40   6  ,clse
21:12:40   7  -- g6 is important. I want to predict g6:
21:12:40   8  ,ld6 - clse g6
21:12:40   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:12:40  10  -- I want more attributes from the ones I derived above:
21:12:40  11  -- clse relation to moving-min
21:12:40  12  ,clse-min4  cm4
21:12:40  13  ,clse-min6  cm6
21:12:40  14  ,clse-min8  cm8
21:12:40  15  ,clse-min10 cm10
21:12:40  16  ,clse-min12 cm12
21:12:40  17  ,clse-min14 cm14
21:12:40  18  ,clse-min16 cm16
21:12:40  19  ,clse-min18 cm18
21:12:40  20  -- clse relation to moving-avg
21:12:40  21  ,clse-avg4  ca4
21:12:40  22  ,clse-avg6  ca6
21:12:40  23  ,clse-avg8  ca8
21:12:40  24  ,clse-avg10 ca10
21:12:40  25  ,clse-avg12 ca12
21:12:40  26  ,clse-avg14 ca14
21:12:40  27  ,clse-avg16 ca16
21:12:40  28  ,clse-avg18 ca18
21:12:40  29  -- clse relation to moving-max
21:12:40  30  ,clse-max4  cx4
21:12:40  31  ,clse-max6  cx6
21:12:40  32  ,clse-max8  cx8
21:12:40  33  ,clse-max10 cx10
21:12:40  34  ,clse-max12 cx12
21:12:40  35  ,clse-max14 cx14
21:12:40  36  ,clse-max16 cx16
21:12:40  37  ,clse-max18 cx18
21:12:40  38  -- Derive more attributes.
21:12:40  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:12:40  40  -- But COVAR_POP is more stable:
21:12:40  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:12:40  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:12:40  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:12:40  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:12:40  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:12:40  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:12:40  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:12:40  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:12:40  49  -- Derive date related attributes:
21:12:40  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:12:40  51  ,0+TO_CHAR(ydate,'D')d
21:12:40  52  ,0+TO_CHAR(ydate,'W')w
21:12:40  53  -- mpm stands for minutes-past-midnight:
21:12:40  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:12:40  55  -- mph stands for minutes-past-hour:
21:12:40  56  ,0+TO_CHAR(ydate,'MI')mph
21:12:40  57  FROM svm6102
21:12:40  58  ORDER BY ydate
21:12:40  59  /

Table created.

Elapsed: 00:00:02.06
21:12:42 SQL> 
21:12:42 SQL> -- rpt
21:12:42 SQL> 
21:12:42 SQL> SELECT
21:12:42   2  pair
21:12:42   3  ,COUNT(pair)
21:12:42   4  ,MIN(clse),MAX(clse)
21:12:42   5  ,MIN(ydate),MAX(ydate)
21:12:42   6  FROM svm6122
21:12:42   7  GROUP BY pair
21:12:42   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ejp_usd       19255 107.643765	115.63485 2010-09-30 21:15:01 2011-01-03 21:05:00

Elapsed: 00:00:00.06
21:12:43 SQL> 
21:12:43 SQL> -- Prepare for derivation of NTILE based params:
21:12:43 SQL> 
21:12:43 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.18
21:12:43 SQL> CREATE TABLE svm6142 COMPRESS AS
21:12:43   2  SELECT
21:12:43   3  pair
21:12:43   4  ,ydate
21:12:43   5  ,prdate
21:12:43   6  ,clse
21:12:43   7  ,g6
21:12:43   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:12:43   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:12:43  10  ,CASE WHEN trend IS NULL THEN 1
21:12:43  11  	    WHEN trend =0      THEN 1
21:12:43  12  	    ELSE trend END trend
21:12:43  13  ,cm4
21:12:43  14  ,cm6
21:12:43  15  ,cm8
21:12:43  16  ,cm10
21:12:43  17  ,cm12
21:12:43  18  ,cm14
21:12:43  19  ,cm16
21:12:43  20  ,cm18
21:12:43  21  --
21:12:43  22  ,ca4
21:12:43  23  ,ca6
21:12:43  24  ,ca8
21:12:43  25  ,ca10
21:12:43  26  ,ca12
21:12:43  27  ,ca14
21:12:43  28  ,ca16
21:12:43  29  ,ca18
21:12:43  30  --
21:12:43  31  ,cx4
21:12:43  32  ,cx6
21:12:43  33  ,cx8
21:12:43  34  ,cx10
21:12:43  35  ,cx12
21:12:43  36  ,cx14
21:12:43  37  ,cx16
21:12:43  38  ,cx18
21:12:43  39  --
21:12:43  40  ,crr4
21:12:43  41  ,crr6
21:12:43  42  ,crr8
21:12:43  43  ,crr10
21:12:43  44  ,crr12
21:12:43  45  ,crr14
21:12:43  46  ,crr16
21:12:43  47  ,crr18
21:12:43  48  --
21:12:43  49  ,hh
21:12:43  50  ,d
21:12:43  51  ,w
21:12:43  52  ,mpm
21:12:43  53  ,mph
21:12:43  54  FROM svm6122
21:12:43  55  ORDER BY ydate
21:12:43  56  /

Table created.

Elapsed: 00:00:00.39
21:12:43 SQL> 
21:12:43 SQL> -- rpt
21:12:43 SQL> 
21:12:43 SQL> SELECT
21:12:43   2  pair
21:12:43   3  ,trend
21:12:43   4  ,gatt
21:12:43   5  ,COUNT(pair)
21:12:43   6  ,AVG(g6)
21:12:43   7  FROM svm6142
21:12:43   8  GROUP BY pair,trend,gatt
21:12:43   9  ORDER BY pair,trend,gatt
21:12:43  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4860 -.32447867
ejp_usd 	-1 up	      4818 .271447545
ejp_usd 	 1 nup	      4851 -.29123955
ejp_usd 	 1 up	      4654 .286866179
ejp_usd 	 1		72

Elapsed: 00:00:00.04
21:12:43 SQL> 
21:12:43 SQL> 
21:12:43 SQL> -- Derive NTILE based params:
21:12:43 SQL> 
21:12:43 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.14
21:12:43 SQL> CREATE TABLE svm6162 COMPRESS AS
21:12:43   2  SELECT
21:12:43   3  pair
21:12:43   4  ,ydate
21:12:43   5  ,prdate
21:12:43   6  ,clse
21:12:43   7  ,g6
21:12:43   8  ,gatt
21:12:43   9  ,gattn
21:12:43  10  ,trend
21:12:43  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:12:43  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:12:43  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:12:43  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:12:43  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:12:43  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:12:43  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:12:43  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:12:43  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:12:43  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:12:43  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:12:43  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:12:43  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:12:43  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:12:43  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:12:43  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:12:43  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:12:43  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:12:43  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:12:43  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:12:43  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:12:43  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:12:43  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:12:43  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:12:43  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:12:43  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:12:43  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:12:43  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:12:43  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:12:43  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:12:43  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:12:43  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:12:43  43  ,hh  att32
21:12:43  44  ,d   att33
21:12:43  45  ,w   att34
21:12:43  46  ,mpm att35
21:12:43  47  ,mph att36
21:12:43  48  ,trend att37
21:12:43  49  FROM svm6142
21:12:43  50  ORDER BY ydate
21:12:43  51  /

Table created.

Elapsed: 00:00:04.77
21:12:48 SQL> 
21:12:48 SQL> -- rpt
21:12:48 SQL> 
21:12:48 SQL> SELECT
21:12:48   2  pair
21:12:48   3  ,trend
21:12:48   4  ,gatt
21:12:48   5  ,COUNT(pair)
21:12:48   6  ,AVG(g6)
21:12:48   7  FROM svm6162
21:12:48   8  GROUP BY pair,trend,gatt
21:12:48   9  ORDER BY pair,trend,gatt
21:12:48  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4860 -.32447867
ejp_usd 	-1 up	      4818 .271447545
ejp_usd 	 1 nup	      4851 -.29123955
ejp_usd 	 1 up	      4654 .286866179
ejp_usd 	 1		72

Elapsed: 00:00:00.03
21:12:48 SQL> 
21:12:48 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
21:12:48 SQL> CREATE TABLE modsrc COMPRESS AS
21:12:48   2  SELECT
21:12:48   3  pair
21:12:48   4  ,ydate
21:12:48   5  ,prdate
21:12:48   6  ,trend
21:12:48   7  ,g6
21:12:48   8  ,gatt
21:12:48   9  ,gattn
21:12:48  10  FROM svm6162
21:12:48  11  /

Table created.

Elapsed: 00:00:00.10
21:12:48 SQL> 
21:12:48 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
21:12:48 SQL> 
21:12:48 SQL> DROP   TABLE ejp_ms610 ;

Table dropped.

Elapsed: 00:00:00.07
21:12:49 SQL> CREATE TABLE ejp_ms610 COMPRESS AS
21:12:49   2  SELECT
21:12:49   3  ydate
21:12:49   4  ,trend ejp_trend
21:12:49   5  ,g6    ejp_g6
21:12:49   6  ,gatt  ejp_gatt
21:12:49   7  ,gattn ejp_gattn
21:12:49   8  FROM modsrc
21:12:49   9  /

Table created.

Elapsed: 00:00:00.09
21:12:49 SQL> 
21:12:49 SQL> ANALYZE TABLE ejp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
21:12:49 SQL> 
21:12:49 SQL> -- I need a copy of the attributes:
21:12:49 SQL> 
21:12:49 SQL> 
21:12:49 SQL> DROP   TABLE ejp_att;

Table dropped.

Elapsed: 00:00:00.06
21:12:49 SQL> CREATE TABLE ejp_att COMPRESS AS
21:12:49   2  SELECT
21:12:49   3  ydate
21:12:49   4  ,att00 ejp_att00
21:12:49   5  ,att01 ejp_att01
21:12:49   6  ,att02 ejp_att02
21:12:49   7  ,att03 ejp_att03
21:12:49   8  ,att04 ejp_att04
21:12:49   9  ,att05 ejp_att05
21:12:49  10  ,att06 ejp_att06
21:12:49  11  ,att07 ejp_att07
21:12:49  12  ,att08 ejp_att08
21:12:49  13  ,att09 ejp_att09
21:12:49  14  ,att10 ejp_att10
21:12:49  15  ,att11 ejp_att11
21:12:49  16  ,att12 ejp_att12
21:12:49  17  ,att13 ejp_att13
21:12:49  18  ,att14 ejp_att14
21:12:49  19  ,att15 ejp_att15
21:12:49  20  ,att16 ejp_att16
21:12:49  21  ,att17 ejp_att17
21:12:49  22  ,att18 ejp_att18
21:12:49  23  ,att19 ejp_att19
21:12:49  24  ,att20 ejp_att20
21:12:49  25  ,att21 ejp_att21
21:12:49  26  ,att22 ejp_att22
21:12:49  27  ,att23 ejp_att23
21:12:49  28  ,att24 ejp_att24
21:12:49  29  ,att25 ejp_att25
21:12:49  30  ,att26 ejp_att26
21:12:49  31  ,att27 ejp_att27
21:12:49  32  ,att28 ejp_att28
21:12:49  33  ,att29 ejp_att29
21:12:49  34  ,att30 ejp_att30
21:12:49  35  ,att31 ejp_att31
21:12:49  36  ,att32 ejp_att32
21:12:49  37  ,att33 ejp_att33
21:12:49  38  ,att34 ejp_att34
21:12:49  39  ,att35 ejp_att35
21:12:49  40  ,att36 ejp_att36
21:12:49  41  ,att37 ejp_att37
21:12:49  42  FROM svm6162
21:12:49  43  /

Table created.

Elapsed: 00:00:00.17
21:12:49 SQL> 
21:12:49 SQL> ANALYZE TABLE ejp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.50
21:12:50 SQL> 
21:12:50 SQL> -- rpt
21:12:50 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19255

Elapsed: 00:00:00.83
21:12:50 SQL> SELECT COUNT(*)FROM ejp_att;

  COUNT(*)
----------
     19255

Elapsed: 00:00:00.00
21:12:50 SQL> 
21:12:50 SQL> --
21:12:50 SQL> -- ajp610.sql
21:12:50 SQL> --
21:12:50 SQL> 
21:12:50 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:12:50 SQL> 
21:12:50 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.35
21:12:51 SQL> 
21:12:51 SQL> -- I created di5min here:
21:12:51 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:12:51 SQL> 
21:12:51 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:12:51   2  SELECT
21:12:51   3  pair
21:12:51   4  ,ydate
21:12:51   5  ,prdate
21:12:51   6  ,rownum rnum -- acts as t in my time-series
21:12:51   7  ,clse
21:12:51   8  -- Derive a bunch of attributes from clse, the latest price:
21:12:51   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:12:51  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:12:51  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:12:51  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:12:51  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:12:51  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:12:51  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:12:51  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:12:51  17  --
21:12:51  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:12:51  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:12:51  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:12:51  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:12:51  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:12:51  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:12:51  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:12:51  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:12:51  26  --
21:12:51  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:12:51  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:12:51  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:12:51  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:12:51  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:12:51  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:12:51  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:12:51  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:12:51  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:12:51  36  FROM di5min WHERE pair LIKE'%ajp%'
21:12:51  37  AND ydate > sysdate - 95
21:12:51  38  ORDER BY ydate
21:12:51  39  /

View created.

Elapsed: 00:00:00.05
21:12:51 SQL> 
21:12:51 SQL> -- rpt
21:12:51 SQL> 
21:12:51 SQL> SELECT
21:12:51   2  pair
21:12:51   3  ,COUNT(pair)
21:12:51   4  ,MIN(clse),MAX(clse)
21:12:51   5  ,MIN(avg6),MAX(avg6)
21:12:51   6  ,MIN(ydate),MAX(ydate)
21:12:51   7  FROM svm6102
21:12:51   8  GROUP BY pair
21:12:51   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ajp_usd       19252  78.249976 83.6669853 78.5106193  83.546306 2010-09-30 21:15:01 2011-01-03 21:05:00

Elapsed: 00:00:00.76
21:12:52 SQL> 
21:12:52 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:12:52 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.23
21:12:52 SQL> CREATE TABLE svm6122 COMPRESS AS
21:12:52   2  SELECT
21:12:52   3  pair
21:12:52   4  ,ydate
21:12:52   5  ,prdate
21:12:52   6  ,clse
21:12:52   7  -- g6 is important. I want to predict g6:
21:12:52   8  ,ld6 - clse g6
21:12:52   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:12:52  10  -- I want more attributes from the ones I derived above:
21:12:52  11  -- clse relation to moving-min
21:12:52  12  ,clse-min4  cm4
21:12:52  13  ,clse-min6  cm6
21:12:52  14  ,clse-min8  cm8
21:12:52  15  ,clse-min10 cm10
21:12:52  16  ,clse-min12 cm12
21:12:52  17  ,clse-min14 cm14
21:12:52  18  ,clse-min16 cm16
21:12:52  19  ,clse-min18 cm18
21:12:52  20  -- clse relation to moving-avg
21:12:52  21  ,clse-avg4  ca4
21:12:52  22  ,clse-avg6  ca6
21:12:52  23  ,clse-avg8  ca8
21:12:52  24  ,clse-avg10 ca10
21:12:52  25  ,clse-avg12 ca12
21:12:52  26  ,clse-avg14 ca14
21:12:52  27  ,clse-avg16 ca16
21:12:52  28  ,clse-avg18 ca18
21:12:52  29  -- clse relation to moving-max
21:12:52  30  ,clse-max4  cx4
21:12:52  31  ,clse-max6  cx6
21:12:52  32  ,clse-max8  cx8
21:12:52  33  ,clse-max10 cx10
21:12:52  34  ,clse-max12 cx12
21:12:52  35  ,clse-max14 cx14
21:12:52  36  ,clse-max16 cx16
21:12:52  37  ,clse-max18 cx18
21:12:52  38  -- Derive more attributes.
21:12:52  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:12:52  40  -- But COVAR_POP is more stable:
21:12:52  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:12:52  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:12:52  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:12:52  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:12:52  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:12:52  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:12:52  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:12:52  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:12:52  49  -- Derive date related attributes:
21:12:52  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:12:52  51  ,0+TO_CHAR(ydate,'D')d
21:12:52  52  ,0+TO_CHAR(ydate,'W')w
21:12:52  53  -- mpm stands for minutes-past-midnight:
21:12:52  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:12:52  55  -- mph stands for minutes-past-hour:
21:12:52  56  ,0+TO_CHAR(ydate,'MI')mph
21:12:52  57  FROM svm6102
21:12:52  58  ORDER BY ydate
21:12:52  59  /

Table created.

Elapsed: 00:00:02.00
21:12:54 SQL> 
21:12:54 SQL> -- rpt
21:12:54 SQL> 
21:12:54 SQL> SELECT
21:12:54   2  pair
21:12:54   3  ,COUNT(pair)
21:12:54   4  ,MIN(clse),MAX(clse)
21:12:54   5  ,MIN(ydate),MAX(ydate)
21:12:54   6  FROM svm6122
21:12:54   7  GROUP BY pair
21:12:54   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ajp_usd       19252  78.249976 83.6669853 2010-09-30 21:15:01 2011-01-03 21:05:00

Elapsed: 00:00:00.03
21:12:54 SQL> 
21:12:54 SQL> -- Prepare for derivation of NTILE based params:
21:12:54 SQL> 
21:12:54 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.16
21:12:54 SQL> CREATE TABLE svm6142 COMPRESS AS
21:12:54   2  SELECT
21:12:54   3  pair
21:12:54   4  ,ydate
21:12:54   5  ,prdate
21:12:54   6  ,clse
21:12:54   7  ,g6
21:12:54   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:12:54   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:12:54  10  ,CASE WHEN trend IS NULL THEN 1
21:12:54  11  	    WHEN trend =0      THEN 1
21:12:54  12  	    ELSE trend END trend
21:12:54  13  ,cm4
21:12:54  14  ,cm6
21:12:54  15  ,cm8
21:12:54  16  ,cm10
21:12:54  17  ,cm12
21:12:54  18  ,cm14
21:12:54  19  ,cm16
21:12:54  20  ,cm18
21:12:54  21  --
21:12:54  22  ,ca4
21:12:54  23  ,ca6
21:12:54  24  ,ca8
21:12:54  25  ,ca10
21:12:54  26  ,ca12
21:12:54  27  ,ca14
21:12:54  28  ,ca16
21:12:54  29  ,ca18
21:12:54  30  --
21:12:54  31  ,cx4
21:12:54  32  ,cx6
21:12:54  33  ,cx8
21:12:54  34  ,cx10
21:12:54  35  ,cx12
21:12:54  36  ,cx14
21:12:54  37  ,cx16
21:12:54  38  ,cx18
21:12:54  39  --
21:12:54  40  ,crr4
21:12:54  41  ,crr6
21:12:54  42  ,crr8
21:12:54  43  ,crr10
21:12:54  44  ,crr12
21:12:54  45  ,crr14
21:12:54  46  ,crr16
21:12:54  47  ,crr18
21:12:54  48  --
21:12:54  49  ,hh
21:12:54  50  ,d
21:12:54  51  ,w
21:12:54  52  ,mpm
21:12:54  53  ,mph
21:12:54  54  FROM svm6122
21:12:54  55  ORDER BY ydate
21:12:54  56  /

Table created.

Elapsed: 00:00:00.47
21:12:54 SQL> 
21:12:54 SQL> -- rpt
21:12:54 SQL> 
21:12:54 SQL> SELECT
21:12:54   2  pair
21:12:54   3  ,trend
21:12:54   4  ,gatt
21:12:54   5  ,COUNT(pair)
21:12:54   6  ,AVG(g6)
21:12:54   7  FROM svm6142
21:12:54   8  GROUP BY pair,trend,gatt
21:12:54   9  ORDER BY pair,trend,gatt
21:12:54  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4020 -.22855856
ajp_usd 	-1 up	      5112 .220942298
ajp_usd 	-1		 4
ajp_usd 	 1 nup	      5168 -.19958892
ajp_usd 	 1 up	      4880 .204451748
ajp_usd 	 1		68

6 rows selected.

Elapsed: 00:00:00.04
21:12:54 SQL> 
21:12:54 SQL> 
21:12:54 SQL> -- Derive NTILE based params:
21:12:54 SQL> 
21:12:54 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
21:12:55 SQL> CREATE TABLE svm6162 COMPRESS AS
21:12:55   2  SELECT
21:12:55   3  pair
21:12:55   4  ,ydate
21:12:55   5  ,prdate
21:12:55   6  ,clse
21:12:55   7  ,g6
21:12:55   8  ,gatt
21:12:55   9  ,gattn
21:12:55  10  ,trend
21:12:55  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:12:55  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:12:55  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:12:55  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:12:55  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:12:55  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:12:55  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:12:55  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:12:55  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:12:55  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:12:55  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:12:55  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:12:55  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:12:55  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:12:55  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:12:55  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:12:55  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:12:55  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:12:55  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:12:55  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:12:55  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:12:55  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:12:55  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:12:55  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:12:55  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:12:55  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:12:55  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:12:55  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:12:55  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:12:55  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:12:55  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:12:55  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:12:55  43  ,hh  att32
21:12:55  44  ,d   att33
21:12:55  45  ,w   att34
21:12:55  46  ,mpm att35
21:12:55  47  ,mph att36
21:12:55  48  ,trend att37
21:12:55  49  FROM svm6142
21:12:55  50  ORDER BY ydate
21:12:55  51  /

Table created.

Elapsed: 00:00:04.82
21:12:59 SQL> 
21:12:59 SQL> -- rpt
21:12:59 SQL> 
21:12:59 SQL> SELECT
21:12:59   2  pair
21:12:59   3  ,trend
21:12:59   4  ,gatt
21:12:59   5  ,COUNT(pair)
21:12:59   6  ,AVG(g6)
21:12:59   7  FROM svm6162
21:12:59   8  GROUP BY pair,trend,gatt
21:12:59   9  ORDER BY pair,trend,gatt
21:12:59  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4020 -.22855856
ajp_usd 	-1 up	      5112 .220942298
ajp_usd 	-1		 4
ajp_usd 	 1 nup	      5168 -.19958892
ajp_usd 	 1 up	      4880 .204451748
ajp_usd 	 1		68

6 rows selected.

Elapsed: 00:00:00.04
21:12:59 SQL> 
21:12:59 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.21
21:13:00 SQL> CREATE TABLE modsrc COMPRESS AS
21:13:00   2  SELECT
21:13:00   3  pair
21:13:00   4  ,ydate
21:13:00   5  ,prdate
21:13:00   6  ,trend
21:13:00   7  ,g6
21:13:00   8  ,gatt
21:13:00   9  ,gattn
21:13:00  10  FROM svm6162
21:13:00  11  /

Table created.

Elapsed: 00:00:00.08
21:13:00 SQL> 
21:13:00 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
21:13:00 SQL> 
21:13:00 SQL> DROP   TABLE ajp_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
21:13:00 SQL> CREATE TABLE ajp_ms610 COMPRESS AS
21:13:00   2  SELECT
21:13:00   3  ydate
21:13:00   4  ,trend ajp_trend
21:13:00   5  ,g6    ajp_g6
21:13:00   6  ,gatt  ajp_gatt
21:13:00   7  ,gattn ajp_gattn
21:13:00   8  FROM modsrc
21:13:00   9  /

Table created.

Elapsed: 00:00:00.09
21:13:00 SQL> 
21:13:00 SQL> ANALYZE TABLE ajp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
21:13:00 SQL> 
21:13:00 SQL> -- I need a copy of the attributes:
21:13:00 SQL> 
21:13:00 SQL> 
21:13:00 SQL> DROP   TABLE ajp_att;

Table dropped.

Elapsed: 00:00:00.06
21:13:00 SQL> CREATE TABLE ajp_att COMPRESS AS
21:13:00   2  SELECT
21:13:00   3  ydate
21:13:00   4  ,att00 ajp_att00
21:13:00   5  ,att01 ajp_att01
21:13:00   6  ,att02 ajp_att02
21:13:00   7  ,att03 ajp_att03
21:13:00   8  ,att04 ajp_att04
21:13:00   9  ,att05 ajp_att05
21:13:00  10  ,att06 ajp_att06
21:13:00  11  ,att07 ajp_att07
21:13:00  12  ,att08 ajp_att08
21:13:00  13  ,att09 ajp_att09
21:13:00  14  ,att10 ajp_att10
21:13:00  15  ,att11 ajp_att11
21:13:00  16  ,att12 ajp_att12
21:13:00  17  ,att13 ajp_att13
21:13:00  18  ,att14 ajp_att14
21:13:00  19  ,att15 ajp_att15
21:13:00  20  ,att16 ajp_att16
21:13:00  21  ,att17 ajp_att17
21:13:00  22  ,att18 ajp_att18
21:13:00  23  ,att19 ajp_att19
21:13:00  24  ,att20 ajp_att20
21:13:00  25  ,att21 ajp_att21
21:13:00  26  ,att22 ajp_att22
21:13:00  27  ,att23 ajp_att23
21:13:00  28  ,att24 ajp_att24
21:13:00  29  ,att25 ajp_att25
21:13:00  30  ,att26 ajp_att26
21:13:00  31  ,att27 ajp_att27
21:13:00  32  ,att28 ajp_att28
21:13:00  33  ,att29 ajp_att29
21:13:00  34  ,att30 ajp_att30
21:13:00  35  ,att31 ajp_att31
21:13:00  36  ,att32 ajp_att32
21:13:00  37  ,att33 ajp_att33
21:13:00  38  ,att34 ajp_att34
21:13:00  39  ,att35 ajp_att35
21:13:00  40  ,att36 ajp_att36
21:13:00  41  ,att37 ajp_att37
21:13:00  42  FROM svm6162
21:13:00  43  /

Table created.

Elapsed: 00:00:00.17
21:13:01 SQL> 
21:13:01 SQL> ANALYZE TABLE ajp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
21:13:01 SQL> 
21:13:01 SQL> -- rpt
21:13:01 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19252

Elapsed: 00:00:00.78
21:13:02 SQL> SELECT COUNT(*)FROM ajp_att;

  COUNT(*)
----------
     19252

Elapsed: 00:00:00.00
21:13:02 SQL> 
21:13:02 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
