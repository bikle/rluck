
SQL*Plus: Release 11.2.0.1.0 Production on Mon Jan 3 02:38:38 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

02:38:38 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
02:38:38 SQL> 02:38:38 SQL> --
02:38:38 SQL> -- eur610.sql
02:38:38 SQL> --
02:38:38 SQL> 
02:38:38 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:38:38 SQL> 
02:38:38 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.01
02:38:38 SQL> 
02:38:38 SQL> -- I created di5min here:
02:38:38 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:38:38 SQL> 
02:38:38 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:38:38   2  SELECT
02:38:38   3  pair
02:38:38   4  ,ydate
02:38:38   5  ,prdate
02:38:38   6  ,rownum rnum -- acts as t in my time-series
02:38:38   7  ,clse
02:38:38   8  -- Derive a bunch of attributes from clse, the latest price:
02:38:38   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:38:38  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:38:38  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:38:38  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:38:38  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:38:38  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:38:38  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:38:38  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:38:38  17  --
02:38:38  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:38:38  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:38:38  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:38:38  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:38:38  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:38:38  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:38:38  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:38:38  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:38:38  26  --
02:38:38  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:38:38  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:38:38  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:38:38  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:38:38  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:38:38  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:38:38  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:38:38  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:38:38  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:38:38  36  FROM di5min WHERE pair LIKE'%eur%'
02:38:38  37  AND ydate > sysdate - 95
02:38:38  38  ORDER BY ydate
02:38:38  39  /

View created.

Elapsed: 00:00:00.10
02:38:38 SQL> 
02:38:38 SQL> -- rpt
02:38:38 SQL> 
02:38:38 SQL> SELECT
02:38:38   2  pair
02:38:38   3  ,COUNT(pair)
02:38:38   4  ,MIN(clse),MAX(clse)
02:38:38   5  ,MIN(avg6),MAX(avg6)
02:38:38   6  ,MIN(ydate),MAX(ydate)
02:38:38   7  FROM svm6102
02:38:38   8  GROUP BY pair
02:38:38   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19259    1.29735	   1.4273 1.29875103 1.42436233 2010-09-30 02:40:01 2011-01-03 02:30:00

Elapsed: 00:00:00.89
02:38:39 SQL> 
02:38:39 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:38:39 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.19
02:38:39 SQL> CREATE TABLE svm6122 COMPRESS AS
02:38:39   2  SELECT
02:38:39   3  pair
02:38:39   4  ,ydate
02:38:39   5  ,prdate
02:38:39   6  ,clse
02:38:39   7  -- g6 is important. I want to predict g6:
02:38:39   8  ,ld6 - clse g6
02:38:39   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:38:39  10  -- I want more attributes from the ones I derived above:
02:38:39  11  -- clse relation to moving-min
02:38:39  12  ,clse-min4  cm4
02:38:39  13  ,clse-min6  cm6
02:38:39  14  ,clse-min8  cm8
02:38:39  15  ,clse-min10 cm10
02:38:39  16  ,clse-min12 cm12
02:38:39  17  ,clse-min14 cm14
02:38:39  18  ,clse-min16 cm16
02:38:39  19  ,clse-min18 cm18
02:38:39  20  -- clse relation to moving-avg
02:38:39  21  ,clse-avg4  ca4
02:38:39  22  ,clse-avg6  ca6
02:38:39  23  ,clse-avg8  ca8
02:38:39  24  ,clse-avg10 ca10
02:38:39  25  ,clse-avg12 ca12
02:38:39  26  ,clse-avg14 ca14
02:38:39  27  ,clse-avg16 ca16
02:38:39  28  ,clse-avg18 ca18
02:38:39  29  -- clse relation to moving-max
02:38:39  30  ,clse-max4  cx4
02:38:39  31  ,clse-max6  cx6
02:38:39  32  ,clse-max8  cx8
02:38:39  33  ,clse-max10 cx10
02:38:39  34  ,clse-max12 cx12
02:38:39  35  ,clse-max14 cx14
02:38:39  36  ,clse-max16 cx16
02:38:39  37  ,clse-max18 cx18
02:38:39  38  -- Derive more attributes.
02:38:39  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:38:39  40  -- But COVAR_POP is more stable:
02:38:39  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:38:39  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:38:39  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:38:39  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:38:39  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:38:39  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:38:39  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:38:39  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:38:39  49  -- Derive date related attributes:
02:38:39  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:38:39  51  ,0+TO_CHAR(ydate,'D')d
02:38:39  52  ,0+TO_CHAR(ydate,'W')w
02:38:39  53  -- mpm stands for minutes-past-midnight:
02:38:39  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:38:39  55  -- mph stands for minutes-past-hour:
02:38:39  56  ,0+TO_CHAR(ydate,'MI')mph
02:38:39  57  FROM svm6102
02:38:39  58  ORDER BY ydate
02:38:39  59  /

Table created.

Elapsed: 00:00:02.32
02:38:42 SQL> 
02:38:42 SQL> -- rpt
02:38:42 SQL> 
02:38:42 SQL> SELECT
02:38:42   2  pair
02:38:42   3  ,COUNT(pair)
02:38:42   4  ,MIN(clse),MAX(clse)
02:38:42   5  ,MIN(ydate),MAX(ydate)
02:38:42   6  FROM svm6122
02:38:42   7  GROUP BY pair
02:38:42   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19259    1.29735	   1.4273 2010-09-30 02:40:01 2011-01-03 02:30:00

Elapsed: 00:00:00.06
02:38:42 SQL> 
02:38:42 SQL> -- Prepare for derivation of NTILE based params:
02:38:42 SQL> 
02:38:42 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.61
02:38:42 SQL> CREATE TABLE svm6142 COMPRESS AS
02:38:42   2  SELECT
02:38:42   3  pair
02:38:42   4  ,ydate
02:38:42   5  ,prdate
02:38:42   6  ,clse
02:38:42   7  ,g6
02:38:42   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:38:42   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:38:42  10  ,CASE WHEN trend IS NULL THEN 1
02:38:42  11  	    WHEN trend =0      THEN 1
02:38:42  12  	    ELSE trend END trend
02:38:42  13  ,cm4
02:38:42  14  ,cm6
02:38:42  15  ,cm8
02:38:42  16  ,cm10
02:38:42  17  ,cm12
02:38:42  18  ,cm14
02:38:42  19  ,cm16
02:38:42  20  ,cm18
02:38:42  21  --
02:38:42  22  ,ca4
02:38:42  23  ,ca6
02:38:42  24  ,ca8
02:38:42  25  ,ca10
02:38:42  26  ,ca12
02:38:42  27  ,ca14
02:38:42  28  ,ca16
02:38:42  29  ,ca18
02:38:42  30  --
02:38:42  31  ,cx4
02:38:42  32  ,cx6
02:38:42  33  ,cx8
02:38:42  34  ,cx10
02:38:42  35  ,cx12
02:38:42  36  ,cx14
02:38:42  37  ,cx16
02:38:42  38  ,cx18
02:38:42  39  --
02:38:42  40  ,crr4
02:38:42  41  ,crr6
02:38:42  42  ,crr8
02:38:42  43  ,crr10
02:38:42  44  ,crr12
02:38:42  45  ,crr14
02:38:42  46  ,crr16
02:38:42  47  ,crr18
02:38:42  48  --
02:38:42  49  ,hh
02:38:42  50  ,d
02:38:42  51  ,w
02:38:42  52  ,mpm
02:38:42  53  ,mph
02:38:42  54  FROM svm6122
02:38:42  55  ORDER BY ydate
02:38:42  56  /

Table created.

Elapsed: 00:00:00.39
02:38:43 SQL> 
02:38:43 SQL> -- rpt
02:38:43 SQL> 
02:38:43 SQL> SELECT
02:38:43   2  pair
02:38:43   3  ,trend
02:38:43   4  ,gatt
02:38:43   5  ,COUNT(pair)
02:38:43   6  ,AVG(g6)
02:38:43   7  FROM svm6142
02:38:43   8  GROUP BY pair,trend,gatt
02:38:43   9  ORDER BY pair,trend,gatt
02:38:43  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      5946 -.00313196
eur_usd 	-1 up	      3567 .004487661
eur_usd 	-1		70
eur_usd 	 1 nup	      5851 -.00317049
eur_usd 	 1 up	      3823 .005049261
eur_usd 	 1		 2

6 rows selected.

Elapsed: 00:00:00.08
02:38:43 SQL> 
02:38:43 SQL> 
02:38:43 SQL> -- Derive NTILE based params:
02:38:43 SQL> 
02:38:43 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.94
02:38:44 SQL> CREATE TABLE svm6162 COMPRESS AS
02:38:44   2  SELECT
02:38:44   3  pair
02:38:44   4  ,ydate
02:38:44   5  ,prdate
02:38:44   6  ,clse
02:38:44   7  ,g6
02:38:44   8  ,gatt
02:38:44   9  ,gattn
02:38:44  10  ,trend
02:38:44  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:38:44  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:38:44  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:38:44  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:38:44  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:38:44  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:38:44  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:38:44  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:38:44  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:38:44  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:38:44  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:38:44  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:38:44  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:38:44  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:38:44  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:38:44  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:38:44  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:38:44  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:38:44  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:38:44  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:38:44  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:38:44  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:38:44  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:38:44  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:38:44  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:38:44  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:38:44  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:38:44  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:38:44  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:38:44  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:38:44  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:38:44  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:38:44  43  ,hh  att32
02:38:44  44  ,d   att33
02:38:44  45  ,w   att34
02:38:44  46  ,mpm att35
02:38:44  47  ,mph att36
02:38:44  48  ,trend att37
02:38:44  49  FROM svm6142
02:38:44  50  ORDER BY ydate
02:38:44  51  /

Table created.

Elapsed: 00:00:04.75
02:38:49 SQL> 
02:38:49 SQL> -- rpt
02:38:49 SQL> 
02:38:49 SQL> SELECT
02:38:49   2  pair
02:38:49   3  ,trend
02:38:49   4  ,gatt
02:38:49   5  ,COUNT(pair)
02:38:49   6  ,AVG(g6)
02:38:49   7  FROM svm6162
02:38:49   8  GROUP BY pair,trend,gatt
02:38:49   9  ORDER BY pair,trend,gatt
02:38:49  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      5946 -.00313196
eur_usd 	-1 up	      3567 .004487661
eur_usd 	-1		70
eur_usd 	 1 nup	      5851 -.00317049
eur_usd 	 1 up	      3823 .005049261
eur_usd 	 1		 2

6 rows selected.

Elapsed: 00:00:00.03
02:38:49 SQL> 
02:38:49 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.19
02:38:49 SQL> CREATE TABLE modsrc COMPRESS AS
02:38:49   2  SELECT
02:38:49   3  pair
02:38:49   4  ,ydate
02:38:49   5  ,prdate
02:38:49   6  ,trend
02:38:49   7  ,g6
02:38:49   8  ,gatt
02:38:49   9  ,gattn
02:38:49  10  FROM svm6162
02:38:49  11  /

Table created.

Elapsed: 00:00:00.40
02:38:49 SQL> 
02:38:49 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
02:38:49 SQL> 
02:38:49 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.25
02:38:50 SQL> CREATE TABLE eur_ms610 COMPRESS AS
02:38:50   2  SELECT
02:38:50   3  ydate
02:38:50   4  ,trend eur_trend
02:38:50   5  ,g6    eur_g6
02:38:50   6  ,gatt  eur_gatt
02:38:50   7  ,gattn eur_gattn
02:38:50   8  FROM modsrc
02:38:50   9  /

Table created.

Elapsed: 00:00:00.07
02:38:50 SQL> 
02:38:50 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
02:38:50 SQL> 
02:38:50 SQL> -- I need a copy of the attributes:
02:38:50 SQL> 
02:38:50 SQL> 
02:38:50 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.04
02:38:50 SQL> CREATE TABLE eur_att COMPRESS AS
02:38:50   2  SELECT
02:38:50   3  ydate
02:38:50   4  ,att00 eur_att00
02:38:50   5  ,att01 eur_att01
02:38:50   6  ,att02 eur_att02
02:38:50   7  ,att03 eur_att03
02:38:50   8  ,att04 eur_att04
02:38:50   9  ,att05 eur_att05
02:38:50  10  ,att06 eur_att06
02:38:50  11  ,att07 eur_att07
02:38:50  12  ,att08 eur_att08
02:38:50  13  ,att09 eur_att09
02:38:50  14  ,att10 eur_att10
02:38:50  15  ,att11 eur_att11
02:38:50  16  ,att12 eur_att12
02:38:50  17  ,att13 eur_att13
02:38:50  18  ,att14 eur_att14
02:38:50  19  ,att15 eur_att15
02:38:50  20  ,att16 eur_att16
02:38:50  21  ,att17 eur_att17
02:38:50  22  ,att18 eur_att18
02:38:50  23  ,att19 eur_att19
02:38:50  24  ,att20 eur_att20
02:38:50  25  ,att21 eur_att21
02:38:50  26  ,att22 eur_att22
02:38:50  27  ,att23 eur_att23
02:38:50  28  ,att24 eur_att24
02:38:50  29  ,att25 eur_att25
02:38:50  30  ,att26 eur_att26
02:38:50  31  ,att27 eur_att27
02:38:50  32  ,att28 eur_att28
02:38:50  33  ,att29 eur_att29
02:38:50  34  ,att30 eur_att30
02:38:50  35  ,att31 eur_att31
02:38:50  36  ,att32 eur_att32
02:38:50  37  ,att33 eur_att33
02:38:50  38  ,att34 eur_att34
02:38:50  39  ,att35 eur_att35
02:38:50  40  ,att36 eur_att36
02:38:50  41  ,att37 eur_att37
02:38:50  42  FROM svm6162
02:38:50  43  /

Table created.

Elapsed: 00:00:00.17
02:38:50 SQL> 
02:38:50 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.49
02:38:51 SQL> 
02:38:51 SQL> -- rpt
02:38:51 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.87
02:38:51 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.00
02:38:51 SQL> 
02:38:51 SQL> --
02:38:51 SQL> -- aud610.sql
02:38:51 SQL> --
02:38:51 SQL> 
02:38:51 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:38:51 SQL> 
02:38:51 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.65
02:38:52 SQL> 
02:38:52 SQL> -- I created di5min here:
02:38:52 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:38:52 SQL> 
02:38:52 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:38:52   2  SELECT
02:38:52   3  pair
02:38:52   4  ,ydate
02:38:52   5  ,prdate
02:38:52   6  ,rownum rnum -- acts as t in my time-series
02:38:52   7  ,clse
02:38:52   8  -- Derive a bunch of attributes from clse, the latest price:
02:38:52   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:38:52  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:38:52  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:38:52  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:38:52  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:38:52  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:38:52  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:38:52  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:38:52  17  --
02:38:52  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:38:52  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:38:52  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:38:52  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:38:52  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:38:52  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:38:52  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:38:52  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:38:52  26  --
02:38:52  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:38:52  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:38:52  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:38:52  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:38:52  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:38:52  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:38:52  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:38:52  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:38:52  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:38:52  36  FROM di5min WHERE pair LIKE'%aud%'
02:38:52  37  AND ydate > sysdate - 95
02:38:52  38  ORDER BY ydate
02:38:52  39  /

View created.

Elapsed: 00:00:00.05
02:38:52 SQL> 
02:38:52 SQL> -- rpt
02:38:52 SQL> 
02:38:52 SQL> SELECT
02:38:52   2  pair
02:38:52   3  ,COUNT(pair)
02:38:52   4  ,MIN(clse),MAX(clse)
02:38:52   5  ,MIN(avg6),MAX(avg6)
02:38:52   6  ,MIN(ydate),MAX(ydate)
02:38:52   7  FROM svm6102
02:38:52   8  GROUP BY pair
02:38:52   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19256	.95405	  1.02495 .957141438 1.02284247 2010-09-30 02:40:01 2011-01-03 02:30:00

Elapsed: 00:00:00.89
02:38:53 SQL> 
02:38:53 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:38:53 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.19
02:38:53 SQL> CREATE TABLE svm6122 COMPRESS AS
02:38:53   2  SELECT
02:38:53   3  pair
02:38:53   4  ,ydate
02:38:53   5  ,prdate
02:38:53   6  ,clse
02:38:53   7  -- g6 is important. I want to predict g6:
02:38:53   8  ,ld6 - clse g6
02:38:53   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:38:53  10  -- I want more attributes from the ones I derived above:
02:38:53  11  -- clse relation to moving-min
02:38:53  12  ,clse-min4  cm4
02:38:53  13  ,clse-min6  cm6
02:38:53  14  ,clse-min8  cm8
02:38:53  15  ,clse-min10 cm10
02:38:53  16  ,clse-min12 cm12
02:38:53  17  ,clse-min14 cm14
02:38:53  18  ,clse-min16 cm16
02:38:53  19  ,clse-min18 cm18
02:38:53  20  -- clse relation to moving-avg
02:38:53  21  ,clse-avg4  ca4
02:38:53  22  ,clse-avg6  ca6
02:38:53  23  ,clse-avg8  ca8
02:38:53  24  ,clse-avg10 ca10
02:38:53  25  ,clse-avg12 ca12
02:38:53  26  ,clse-avg14 ca14
02:38:53  27  ,clse-avg16 ca16
02:38:53  28  ,clse-avg18 ca18
02:38:53  29  -- clse relation to moving-max
02:38:53  30  ,clse-max4  cx4
02:38:53  31  ,clse-max6  cx6
02:38:53  32  ,clse-max8  cx8
02:38:53  33  ,clse-max10 cx10
02:38:53  34  ,clse-max12 cx12
02:38:53  35  ,clse-max14 cx14
02:38:53  36  ,clse-max16 cx16
02:38:53  37  ,clse-max18 cx18
02:38:53  38  -- Derive more attributes.
02:38:53  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:38:53  40  -- But COVAR_POP is more stable:
02:38:53  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:38:53  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:38:53  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:38:53  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:38:53  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:38:53  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:38:53  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:38:53  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:38:53  49  -- Derive date related attributes:
02:38:53  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:38:53  51  ,0+TO_CHAR(ydate,'D')d
02:38:53  52  ,0+TO_CHAR(ydate,'W')w
02:38:53  53  -- mpm stands for minutes-past-midnight:
02:38:53  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:38:53  55  -- mph stands for minutes-past-hour:
02:38:53  56  ,0+TO_CHAR(ydate,'MI')mph
02:38:53  57  FROM svm6102
02:38:53  58  ORDER BY ydate
02:38:53  59  /

Table created.

Elapsed: 00:00:02.06
02:38:55 SQL> 
02:38:55 SQL> -- rpt
02:38:55 SQL> 
02:38:55 SQL> SELECT
02:38:55   2  pair
02:38:55   3  ,COUNT(pair)
02:38:55   4  ,MIN(clse),MAX(clse)
02:38:55   5  ,MIN(ydate),MAX(ydate)
02:38:55   6  FROM svm6122
02:38:55   7  GROUP BY pair
02:38:55   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19256	.95405	  1.02495 2010-09-30 02:40:01 2011-01-03 02:30:00

Elapsed: 00:00:00.06
02:38:55 SQL> 
02:38:55 SQL> -- Prepare for derivation of NTILE based params:
02:38:55 SQL> 
02:38:55 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.27
02:38:56 SQL> CREATE TABLE svm6142 COMPRESS AS
02:38:56   2  SELECT
02:38:56   3  pair
02:38:56   4  ,ydate
02:38:56   5  ,prdate
02:38:56   6  ,clse
02:38:56   7  ,g6
02:38:56   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:38:56   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:38:56  10  ,CASE WHEN trend IS NULL THEN 1
02:38:56  11  	    WHEN trend =0      THEN 1
02:38:56  12  	    ELSE trend END trend
02:38:56  13  ,cm4
02:38:56  14  ,cm6
02:38:56  15  ,cm8
02:38:56  16  ,cm10
02:38:56  17  ,cm12
02:38:56  18  ,cm14
02:38:56  19  ,cm16
02:38:56  20  ,cm18
02:38:56  21  --
02:38:56  22  ,ca4
02:38:56  23  ,ca6
02:38:56  24  ,ca8
02:38:56  25  ,ca10
02:38:56  26  ,ca12
02:38:56  27  ,ca14
02:38:56  28  ,ca16
02:38:56  29  ,ca18
02:38:56  30  --
02:38:56  31  ,cx4
02:38:56  32  ,cx6
02:38:56  33  ,cx8
02:38:56  34  ,cx10
02:38:56  35  ,cx12
02:38:56  36  ,cx14
02:38:56  37  ,cx16
02:38:56  38  ,cx18
02:38:56  39  --
02:38:56  40  ,crr4
02:38:56  41  ,crr6
02:38:56  42  ,crr8
02:38:56  43  ,crr10
02:38:56  44  ,crr12
02:38:56  45  ,crr14
02:38:56  46  ,crr16
02:38:56  47  ,crr18
02:38:56  48  --
02:38:56  49  ,hh
02:38:56  50  ,d
02:38:56  51  ,w
02:38:56  52  ,mpm
02:38:56  53  ,mph
02:38:56  54  FROM svm6122
02:38:56  55  ORDER BY ydate
02:38:56  56  /

Table created.

Elapsed: 00:00:00.37
02:38:56 SQL> 
02:38:56 SQL> -- rpt
02:38:56 SQL> 
02:38:56 SQL> SELECT
02:38:56   2  pair
02:38:56   3  ,trend
02:38:56   4  ,gatt
02:38:56   5  ,COUNT(pair)
02:38:56   6  ,AVG(g6)
02:38:56   7  FROM svm6142
02:38:56   8  GROUP BY pair,trend,gatt
02:38:56   9  ORDER BY pair,trend,gatt
02:38:56  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5033 -.00217742
aud_usd 	-1 up	      3750 .003746297
aud_usd 	-1		52
aud_usd 	 1 nup	      6698 -.00211219
aud_usd 	 1 up	      3703 .004029307
aud_usd 	 1		20

6 rows selected.

Elapsed: 00:00:00.08
02:38:56 SQL> 
02:38:56 SQL> 
02:38:56 SQL> -- Derive NTILE based params:
02:38:56 SQL> 
02:38:56 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.19
02:38:56 SQL> CREATE TABLE svm6162 COMPRESS AS
02:38:56   2  SELECT
02:38:56   3  pair
02:38:56   4  ,ydate
02:38:56   5  ,prdate
02:38:56   6  ,clse
02:38:56   7  ,g6
02:38:56   8  ,gatt
02:38:56   9  ,gattn
02:38:56  10  ,trend
02:38:56  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:38:56  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:38:56  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:38:56  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:38:56  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:38:56  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:38:56  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:38:56  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:38:56  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:38:56  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:38:56  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:38:56  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:38:56  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:38:56  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:38:56  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:38:56  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:38:56  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:38:56  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:38:56  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:38:56  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:38:56  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:38:56  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:38:56  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:38:56  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:38:56  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:38:56  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:38:56  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:38:56  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:38:56  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:38:56  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:38:56  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:38:56  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:38:56  43  ,hh  att32
02:38:56  44  ,d   att33
02:38:56  45  ,w   att34
02:38:56  46  ,mpm att35
02:38:56  47  ,mph att36
02:38:56  48  ,trend att37
02:38:56  49  FROM svm6142
02:38:56  50  ORDER BY ydate
02:38:56  51  /

Table created.

Elapsed: 00:00:04.76
02:39:01 SQL> 
02:39:01 SQL> -- rpt
02:39:01 SQL> 
02:39:01 SQL> SELECT
02:39:01   2  pair
02:39:01   3  ,trend
02:39:01   4  ,gatt
02:39:01   5  ,COUNT(pair)
02:39:01   6  ,AVG(g6)
02:39:01   7  FROM svm6162
02:39:01   8  GROUP BY pair,trend,gatt
02:39:01   9  ORDER BY pair,trend,gatt
02:39:01  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5033 -.00217742
aud_usd 	-1 up	      3750 .003746297
aud_usd 	-1		52
aud_usd 	 1 nup	      6698 -.00211219
aud_usd 	 1 up	      3703 .004029307
aud_usd 	 1		20

6 rows selected.

Elapsed: 00:00:00.03
02:39:01 SQL> 
02:39:01 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
02:39:01 SQL> CREATE TABLE modsrc COMPRESS AS
02:39:01   2  SELECT
02:39:01   3  pair
02:39:01   4  ,ydate
02:39:01   5  ,prdate
02:39:01   6  ,trend
02:39:01   7  ,g6
02:39:01   8  ,gatt
02:39:01   9  ,gattn
02:39:01  10  FROM svm6162
02:39:01  11  /

Table created.

Elapsed: 00:00:00.09
02:39:01 SQL> 
02:39:01 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
02:39:02 SQL> 
02:39:02 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.08
02:39:02 SQL> CREATE TABLE aud_ms610 COMPRESS AS
02:39:02   2  SELECT
02:39:02   3  ydate
02:39:02   4  ,trend aud_trend
02:39:02   5  ,g6    aud_g6
02:39:02   6  ,gatt  aud_gatt
02:39:02   7  ,gattn aud_gattn
02:39:02   8  FROM modsrc
02:39:02   9  /

Table created.

Elapsed: 00:00:00.07
02:39:02 SQL> 
02:39:02 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
02:39:02 SQL> 
02:39:02 SQL> -- I need a copy of the attributes:
02:39:02 SQL> 
02:39:02 SQL> 
02:39:02 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.05
02:39:02 SQL> CREATE TABLE aud_att COMPRESS AS
02:39:02   2  SELECT
02:39:02   3  ydate
02:39:02   4  ,att00 aud_att00
02:39:02   5  ,att01 aud_att01
02:39:02   6  ,att02 aud_att02
02:39:02   7  ,att03 aud_att03
02:39:02   8  ,att04 aud_att04
02:39:02   9  ,att05 aud_att05
02:39:02  10  ,att06 aud_att06
02:39:02  11  ,att07 aud_att07
02:39:02  12  ,att08 aud_att08
02:39:02  13  ,att09 aud_att09
02:39:02  14  ,att10 aud_att10
02:39:02  15  ,att11 aud_att11
02:39:02  16  ,att12 aud_att12
02:39:02  17  ,att13 aud_att13
02:39:02  18  ,att14 aud_att14
02:39:02  19  ,att15 aud_att15
02:39:02  20  ,att16 aud_att16
02:39:02  21  ,att17 aud_att17
02:39:02  22  ,att18 aud_att18
02:39:02  23  ,att19 aud_att19
02:39:02  24  ,att20 aud_att20
02:39:02  25  ,att21 aud_att21
02:39:02  26  ,att22 aud_att22
02:39:02  27  ,att23 aud_att23
02:39:02  28  ,att24 aud_att24
02:39:02  29  ,att25 aud_att25
02:39:02  30  ,att26 aud_att26
02:39:02  31  ,att27 aud_att27
02:39:02  32  ,att28 aud_att28
02:39:02  33  ,att29 aud_att29
02:39:02  34  ,att30 aud_att30
02:39:02  35  ,att31 aud_att31
02:39:02  36  ,att32 aud_att32
02:39:02  37  ,att33 aud_att33
02:39:02  38  ,att34 aud_att34
02:39:02  39  ,att35 aud_att35
02:39:02  40  ,att36 aud_att36
02:39:02  41  ,att37 aud_att37
02:39:02  42  FROM svm6162
02:39:02  43  /

Table created.

Elapsed: 00:00:00.17
02:39:02 SQL> 
02:39:02 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
02:39:03 SQL> 
02:39:03 SQL> -- rpt
02:39:03 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.85
02:39:03 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.00
02:39:03 SQL> 
02:39:03 SQL> --
02:39:03 SQL> -- gbp610.sql
02:39:03 SQL> --
02:39:03 SQL> 
02:39:03 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:39:03 SQL> 
02:39:03 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.61
02:39:04 SQL> 
02:39:04 SQL> -- I created di5min here:
02:39:04 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:39:04 SQL> 
02:39:04 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:39:04   2  SELECT
02:39:04   3  pair
02:39:04   4  ,ydate
02:39:04   5  ,prdate
02:39:04   6  ,rownum rnum -- acts as t in my time-series
02:39:04   7  ,clse
02:39:04   8  -- Derive a bunch of attributes from clse, the latest price:
02:39:04   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:39:04  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:39:04  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:39:04  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:39:04  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:39:04  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:39:04  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:39:04  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:39:04  17  --
02:39:04  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:39:04  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:39:04  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:39:04  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:39:04  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:39:04  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:39:04  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:39:04  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:39:04  26  --
02:39:04  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:39:04  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:39:04  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:39:04  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:39:04  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:39:04  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:39:04  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:39:04  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:39:04  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:39:04  36  FROM di5min WHERE pair LIKE'%gbp%'
02:39:04  37  AND ydate > sysdate - 95
02:39:04  38  ORDER BY ydate
02:39:04  39  /

View created.

Elapsed: 00:00:00.46
02:39:04 SQL> 
02:39:04 SQL> -- rpt
02:39:04 SQL> 
02:39:04 SQL> SELECT
02:39:04   2  pair
02:39:04   3  ,COUNT(pair)
02:39:04   4  ,MIN(clse),MAX(clse)
02:39:04   5  ,MIN(avg6),MAX(avg6)
02:39:04   6  ,MIN(ydate),MAX(ydate)
02:39:04   7  FROM svm6102
02:39:04   8  GROUP BY pair
02:39:04   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19258   1.535325	   1.6295 1.53696747 1.62716986 2010-09-30 02:40:01 2011-01-03 02:30:00

Elapsed: 00:00:00.87
02:39:05 SQL> 
02:39:05 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:39:05 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.18
02:39:05 SQL> CREATE TABLE svm6122 COMPRESS AS
02:39:05   2  SELECT
02:39:05   3  pair
02:39:05   4  ,ydate
02:39:05   5  ,prdate
02:39:05   6  ,clse
02:39:05   7  -- g6 is important. I want to predict g6:
02:39:05   8  ,ld6 - clse g6
02:39:05   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:39:05  10  -- I want more attributes from the ones I derived above:
02:39:05  11  -- clse relation to moving-min
02:39:05  12  ,clse-min4  cm4
02:39:05  13  ,clse-min6  cm6
02:39:05  14  ,clse-min8  cm8
02:39:05  15  ,clse-min10 cm10
02:39:05  16  ,clse-min12 cm12
02:39:05  17  ,clse-min14 cm14
02:39:05  18  ,clse-min16 cm16
02:39:05  19  ,clse-min18 cm18
02:39:05  20  -- clse relation to moving-avg
02:39:05  21  ,clse-avg4  ca4
02:39:05  22  ,clse-avg6  ca6
02:39:05  23  ,clse-avg8  ca8
02:39:05  24  ,clse-avg10 ca10
02:39:05  25  ,clse-avg12 ca12
02:39:05  26  ,clse-avg14 ca14
02:39:05  27  ,clse-avg16 ca16
02:39:05  28  ,clse-avg18 ca18
02:39:05  29  -- clse relation to moving-max
02:39:05  30  ,clse-max4  cx4
02:39:05  31  ,clse-max6  cx6
02:39:05  32  ,clse-max8  cx8
02:39:05  33  ,clse-max10 cx10
02:39:05  34  ,clse-max12 cx12
02:39:05  35  ,clse-max14 cx14
02:39:05  36  ,clse-max16 cx16
02:39:05  37  ,clse-max18 cx18
02:39:05  38  -- Derive more attributes.
02:39:05  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:39:05  40  -- But COVAR_POP is more stable:
02:39:05  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:39:05  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:39:05  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:39:05  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:39:05  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:39:05  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:39:05  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:39:05  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:39:05  49  -- Derive date related attributes:
02:39:05  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:39:05  51  ,0+TO_CHAR(ydate,'D')d
02:39:05  52  ,0+TO_CHAR(ydate,'W')w
02:39:05  53  -- mpm stands for minutes-past-midnight:
02:39:05  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:39:05  55  -- mph stands for minutes-past-hour:
02:39:05  56  ,0+TO_CHAR(ydate,'MI')mph
02:39:05  57  FROM svm6102
02:39:05  58  ORDER BY ydate
02:39:05  59  /

Table created.

Elapsed: 00:00:02.05
02:39:08 SQL> 
02:39:08 SQL> -- rpt
02:39:08 SQL> 
02:39:08 SQL> SELECT
02:39:08   2  pair
02:39:08   3  ,COUNT(pair)
02:39:08   4  ,MIN(clse),MAX(clse)
02:39:08   5  ,MIN(ydate),MAX(ydate)
02:39:08   6  FROM svm6122
02:39:08   7  GROUP BY pair
02:39:08   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19258   1.535325	   1.6295 2010-09-30 02:40:01 2011-01-03 02:30:00

Elapsed: 00:00:00.07
02:39:08 SQL> 
02:39:08 SQL> -- Prepare for derivation of NTILE based params:
02:39:08 SQL> 
02:39:08 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.24
02:39:08 SQL> CREATE TABLE svm6142 COMPRESS AS
02:39:08   2  SELECT
02:39:08   3  pair
02:39:08   4  ,ydate
02:39:08   5  ,prdate
02:39:08   6  ,clse
02:39:08   7  ,g6
02:39:08   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:39:08   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:39:08  10  ,CASE WHEN trend IS NULL THEN 1
02:39:08  11  	    WHEN trend =0      THEN 1
02:39:08  12  	    ELSE trend END trend
02:39:08  13  ,cm4
02:39:08  14  ,cm6
02:39:08  15  ,cm8
02:39:08  16  ,cm10
02:39:08  17  ,cm12
02:39:08  18  ,cm14
02:39:08  19  ,cm16
02:39:08  20  ,cm18
02:39:08  21  --
02:39:08  22  ,ca4
02:39:08  23  ,ca6
02:39:08  24  ,ca8
02:39:08  25  ,ca10
02:39:08  26  ,ca12
02:39:08  27  ,ca14
02:39:08  28  ,ca16
02:39:08  29  ,ca18
02:39:08  30  --
02:39:08  31  ,cx4
02:39:08  32  ,cx6
02:39:08  33  ,cx8
02:39:08  34  ,cx10
02:39:08  35  ,cx12
02:39:08  36  ,cx14
02:39:08  37  ,cx16
02:39:08  38  ,cx18
02:39:08  39  --
02:39:08  40  ,crr4
02:39:08  41  ,crr6
02:39:08  42  ,crr8
02:39:08  43  ,crr10
02:39:08  44  ,crr12
02:39:08  45  ,crr14
02:39:08  46  ,crr16
02:39:08  47  ,crr18
02:39:08  48  --
02:39:08  49  ,hh
02:39:08  50  ,d
02:39:08  51  ,w
02:39:08  52  ,mpm
02:39:08  53  ,mph
02:39:08  54  FROM svm6122
02:39:08  55  ORDER BY ydate
02:39:08  56  /

Table created.

Elapsed: 00:00:00.35
02:39:08 SQL> 
02:39:08 SQL> -- rpt
02:39:08 SQL> 
02:39:08 SQL> SELECT
02:39:08   2  pair
02:39:08   3  ,trend
02:39:08   4  ,gatt
02:39:08   5  ,COUNT(pair)
02:39:08   6  ,AVG(g6)
02:39:08   7  FROM svm6142
02:39:08   8  GROUP BY pair,trend,gatt
02:39:08   9  ORDER BY pair,trend,gatt
02:39:08  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6120 -.00268545
gbp_usd 	-1 up	      3472 .004327643
gbp_usd 	-1		57
gbp_usd 	 1 nup	      6081 -.00270088
gbp_usd 	 1 up	      3513 .004515065
gbp_usd 	 1		15

6 rows selected.

Elapsed: 00:00:00.16
02:39:08 SQL> 
02:39:08 SQL> 
02:39:08 SQL> -- Derive NTILE based params:
02:39:08 SQL> 
02:39:08 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.25
02:39:09 SQL> CREATE TABLE svm6162 COMPRESS AS
02:39:09   2  SELECT
02:39:09   3  pair
02:39:09   4  ,ydate
02:39:09   5  ,prdate
02:39:09   6  ,clse
02:39:09   7  ,g6
02:39:09   8  ,gatt
02:39:09   9  ,gattn
02:39:09  10  ,trend
02:39:09  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:39:09  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:39:09  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:39:09  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:39:09  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:39:09  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:39:09  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:39:09  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:39:09  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:39:09  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:39:09  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:39:09  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:39:09  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:39:09  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:39:09  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:39:09  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:39:09  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:39:09  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:39:09  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:39:09  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:39:09  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:39:09  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:39:09  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:39:09  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:39:09  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:39:09  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:39:09  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:39:09  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:39:09  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:39:09  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:39:09  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:39:09  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:39:09  43  ,hh  att32
02:39:09  44  ,d   att33
02:39:09  45  ,w   att34
02:39:09  46  ,mpm att35
02:39:09  47  ,mph att36
02:39:09  48  ,trend att37
02:39:09  49  FROM svm6142
02:39:09  50  ORDER BY ydate
02:39:09  51  /

Table created.

Elapsed: 00:00:04.71
02:39:13 SQL> 
02:39:13 SQL> -- rpt
02:39:13 SQL> 
02:39:13 SQL> SELECT
02:39:13   2  pair
02:39:13   3  ,trend
02:39:13   4  ,gatt
02:39:13   5  ,COUNT(pair)
02:39:13   6  ,AVG(g6)
02:39:13   7  FROM svm6162
02:39:13   8  GROUP BY pair,trend,gatt
02:39:13   9  ORDER BY pair,trend,gatt
02:39:13  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6120 -.00268545
gbp_usd 	-1 up	      3472 .004327643
gbp_usd 	-1		57
gbp_usd 	 1 nup	      6081 -.00270088
gbp_usd 	 1 up	      3513 .004515065
gbp_usd 	 1		15

6 rows selected.

Elapsed: 00:00:00.06
02:39:13 SQL> 
02:39:13 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
02:39:14 SQL> CREATE TABLE modsrc COMPRESS AS
02:39:14   2  SELECT
02:39:14   3  pair
02:39:14   4  ,ydate
02:39:14   5  ,prdate
02:39:14   6  ,trend
02:39:14   7  ,g6
02:39:14   8  ,gatt
02:39:14   9  ,gattn
02:39:14  10  FROM svm6162
02:39:14  11  /

Table created.

Elapsed: 00:00:00.11
02:39:14 SQL> 
02:39:14 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
02:39:14 SQL> 
02:39:14 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
02:39:14 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
02:39:14   2  SELECT
02:39:14   3  ydate
02:39:14   4  ,trend gbp_trend
02:39:14   5  ,g6    gbp_g6
02:39:14   6  ,gatt  gbp_gatt
02:39:14   7  ,gattn gbp_gattn
02:39:14   8  FROM modsrc
02:39:14   9  /

Table created.

Elapsed: 00:00:00.07
02:39:14 SQL> 
02:39:14 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
02:39:14 SQL> 
02:39:14 SQL> -- I need a copy of the attributes:
02:39:14 SQL> 
02:39:14 SQL> 
02:39:14 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.05
02:39:14 SQL> CREATE TABLE gbp_att COMPRESS AS
02:39:14   2  SELECT
02:39:14   3  ydate
02:39:14   4  ,att00 gbp_att00
02:39:14   5  ,att01 gbp_att01
02:39:14   6  ,att02 gbp_att02
02:39:14   7  ,att03 gbp_att03
02:39:14   8  ,att04 gbp_att04
02:39:14   9  ,att05 gbp_att05
02:39:14  10  ,att06 gbp_att06
02:39:14  11  ,att07 gbp_att07
02:39:14  12  ,att08 gbp_att08
02:39:14  13  ,att09 gbp_att09
02:39:14  14  ,att10 gbp_att10
02:39:14  15  ,att11 gbp_att11
02:39:14  16  ,att12 gbp_att12
02:39:14  17  ,att13 gbp_att13
02:39:14  18  ,att14 gbp_att14
02:39:14  19  ,att15 gbp_att15
02:39:14  20  ,att16 gbp_att16
02:39:14  21  ,att17 gbp_att17
02:39:14  22  ,att18 gbp_att18
02:39:14  23  ,att19 gbp_att19
02:39:14  24  ,att20 gbp_att20
02:39:14  25  ,att21 gbp_att21
02:39:14  26  ,att22 gbp_att22
02:39:14  27  ,att23 gbp_att23
02:39:14  28  ,att24 gbp_att24
02:39:14  29  ,att25 gbp_att25
02:39:14  30  ,att26 gbp_att26
02:39:14  31  ,att27 gbp_att27
02:39:14  32  ,att28 gbp_att28
02:39:14  33  ,att29 gbp_att29
02:39:14  34  ,att30 gbp_att30
02:39:14  35  ,att31 gbp_att31
02:39:14  36  ,att32 gbp_att32
02:39:14  37  ,att33 gbp_att33
02:39:14  38  ,att34 gbp_att34
02:39:14  39  ,att35 gbp_att35
02:39:14  40  ,att36 gbp_att36
02:39:14  41  ,att37 gbp_att37
02:39:14  42  FROM svm6162
02:39:14  43  /

Table created.

Elapsed: 00:00:00.20
02:39:15 SQL> 
02:39:15 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
02:39:15 SQL> 
02:39:15 SQL> -- rpt
02:39:15 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19258

Elapsed: 00:00:00.82
02:39:16 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19258

Elapsed: 00:00:00.01
02:39:16 SQL> 
02:39:16 SQL> --
02:39:16 SQL> -- jpy610.sql
02:39:16 SQL> --
02:39:16 SQL> 
02:39:16 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:39:16 SQL> 
02:39:16 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.43
02:39:16 SQL> 
02:39:16 SQL> -- I created di5min here:
02:39:16 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:39:16 SQL> 
02:39:16 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:39:16   2  SELECT
02:39:16   3  pair
02:39:16   4  ,ydate
02:39:16   5  ,prdate
02:39:16   6  ,rownum rnum -- acts as t in my time-series
02:39:16   7  ,clse
02:39:16   8  -- Derive a bunch of attributes from clse, the latest price:
02:39:16   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:39:16  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:39:16  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:39:16  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:39:16  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:39:16  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:39:16  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:39:16  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:39:16  17  --
02:39:16  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:39:16  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:39:16  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:39:16  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:39:16  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:39:16  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:39:16  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:39:16  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:39:16  26  --
02:39:16  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:39:16  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:39:16  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:39:16  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:39:16  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:39:16  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:39:16  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:39:16  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:39:16  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:39:16  36  FROM di5min WHERE pair LIKE'%jpy%'
02:39:16  37  AND ydate > sysdate - 95
02:39:16  38  ORDER BY ydate
02:39:16  39  /

View created.

Elapsed: 00:00:00.06
02:39:16 SQL> 
02:39:16 SQL> -- rpt
02:39:16 SQL> 
02:39:16 SQL> SELECT
02:39:16   2  pair
02:39:16   3  ,COUNT(pair)
02:39:16   4  ,MIN(clse),MAX(clse)
02:39:16   5  ,MIN(avg6),MAX(avg6)
02:39:16   6  ,MIN(ydate),MAX(ydate)
02:39:16   7  FROM svm6102
02:39:16   8  GROUP BY pair
02:39:16   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19257	 80.25	   84.485 80.3595205 84.3105479 2010-09-30 02:40:01 2011-01-03 02:35:00

Elapsed: 00:00:00.91
02:39:17 SQL> 
02:39:17 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:39:17 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
02:39:17 SQL> CREATE TABLE svm6122 COMPRESS AS
02:39:17   2  SELECT
02:39:17   3  pair
02:39:17   4  ,ydate
02:39:17   5  ,prdate
02:39:17   6  ,clse
02:39:17   7  -- g6 is important. I want to predict g6:
02:39:17   8  ,ld6 - clse g6
02:39:17   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:39:17  10  -- I want more attributes from the ones I derived above:
02:39:17  11  -- clse relation to moving-min
02:39:17  12  ,clse-min4  cm4
02:39:17  13  ,clse-min6  cm6
02:39:17  14  ,clse-min8  cm8
02:39:17  15  ,clse-min10 cm10
02:39:17  16  ,clse-min12 cm12
02:39:17  17  ,clse-min14 cm14
02:39:17  18  ,clse-min16 cm16
02:39:17  19  ,clse-min18 cm18
02:39:17  20  -- clse relation to moving-avg
02:39:17  21  ,clse-avg4  ca4
02:39:17  22  ,clse-avg6  ca6
02:39:17  23  ,clse-avg8  ca8
02:39:17  24  ,clse-avg10 ca10
02:39:17  25  ,clse-avg12 ca12
02:39:17  26  ,clse-avg14 ca14
02:39:17  27  ,clse-avg16 ca16
02:39:17  28  ,clse-avg18 ca18
02:39:17  29  -- clse relation to moving-max
02:39:17  30  ,clse-max4  cx4
02:39:17  31  ,clse-max6  cx6
02:39:17  32  ,clse-max8  cx8
02:39:17  33  ,clse-max10 cx10
02:39:17  34  ,clse-max12 cx12
02:39:17  35  ,clse-max14 cx14
02:39:17  36  ,clse-max16 cx16
02:39:17  37  ,clse-max18 cx18
02:39:17  38  -- Derive more attributes.
02:39:17  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:39:17  40  -- But COVAR_POP is more stable:
02:39:17  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:39:17  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:39:17  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:39:17  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:39:17  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:39:17  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:39:17  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:39:17  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:39:17  49  -- Derive date related attributes:
02:39:17  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:39:17  51  ,0+TO_CHAR(ydate,'D')d
02:39:17  52  ,0+TO_CHAR(ydate,'W')w
02:39:17  53  -- mpm stands for minutes-past-midnight:
02:39:17  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:39:17  55  -- mph stands for minutes-past-hour:
02:39:17  56  ,0+TO_CHAR(ydate,'MI')mph
02:39:17  57  FROM svm6102
02:39:17  58  ORDER BY ydate
02:39:17  59  /

Table created.

Elapsed: 00:00:02.49
02:39:20 SQL> 
02:39:20 SQL> -- rpt
02:39:20 SQL> 
02:39:20 SQL> SELECT
02:39:20   2  pair
02:39:20   3  ,COUNT(pair)
02:39:20   4  ,MIN(clse),MAX(clse)
02:39:20   5  ,MIN(ydate),MAX(ydate)
02:39:20   6  FROM svm6122
02:39:20   7  GROUP BY pair
02:39:20   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19257	 80.25	   84.485 2010-09-30 02:40:01 2011-01-03 02:35:00

Elapsed: 00:00:00.05
02:39:20 SQL> 
02:39:20 SQL> -- Prepare for derivation of NTILE based params:
02:39:20 SQL> 
02:39:20 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.40
02:39:20 SQL> CREATE TABLE svm6142 COMPRESS AS
02:39:20   2  SELECT
02:39:20   3  pair
02:39:20   4  ,ydate
02:39:20   5  ,prdate
02:39:20   6  ,clse
02:39:20   7  ,g6
02:39:20   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:39:20   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:39:20  10  ,CASE WHEN trend IS NULL THEN 1
02:39:20  11  	    WHEN trend =0      THEN 1
02:39:20  12  	    ELSE trend END trend
02:39:20  13  ,cm4
02:39:20  14  ,cm6
02:39:20  15  ,cm8
02:39:20  16  ,cm10
02:39:20  17  ,cm12
02:39:20  18  ,cm14
02:39:20  19  ,cm16
02:39:20  20  ,cm18
02:39:20  21  --
02:39:20  22  ,ca4
02:39:20  23  ,ca6
02:39:20  24  ,ca8
02:39:20  25  ,ca10
02:39:20  26  ,ca12
02:39:20  27  ,ca14
02:39:20  28  ,ca16
02:39:20  29  ,ca18
02:39:20  30  --
02:39:20  31  ,cx4
02:39:20  32  ,cx6
02:39:20  33  ,cx8
02:39:20  34  ,cx10
02:39:20  35  ,cx12
02:39:20  36  ,cx14
02:39:20  37  ,cx16
02:39:20  38  ,cx18
02:39:20  39  --
02:39:20  40  ,crr4
02:39:20  41  ,crr6
02:39:20  42  ,crr8
02:39:20  43  ,crr10
02:39:20  44  ,crr12
02:39:20  45  ,crr14
02:39:20  46  ,crr16
02:39:20  47  ,crr18
02:39:20  48  --
02:39:20  49  ,hh
02:39:20  50  ,d
02:39:20  51  ,w
02:39:20  52  ,mpm
02:39:20  53  ,mph
02:39:20  54  FROM svm6122
02:39:20  55  ORDER BY ydate
02:39:20  56  /

Table created.

Elapsed: 00:00:00.42
02:39:21 SQL> 
02:39:21 SQL> -- rpt
02:39:21 SQL> 
02:39:21 SQL> SELECT
02:39:21   2  pair
02:39:21   3  ,trend
02:39:21   4  ,gatt
02:39:21   5  ,COUNT(pair)
02:39:21   6  ,AVG(g6)
02:39:21   7  FROM svm6142
02:39:21   8  GROUP BY pair,trend,gatt
02:39:21   9  ORDER BY pair,trend,gatt
02:39:21  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5234 -.16584746
usd_jpy 	-1 up	      4860 .164906991
usd_jpy 	-1		25
usd_jpy 	 1 nup	      4975  -.1560013
usd_jpy 	 1 up	      4116 .166146221
usd_jpy 	 1		47

6 rows selected.

Elapsed: 00:00:00.04
02:39:21 SQL> 
02:39:21 SQL> 
02:39:21 SQL> -- Derive NTILE based params:
02:39:21 SQL> 
02:39:21 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.14
02:39:21 SQL> CREATE TABLE svm6162 COMPRESS AS
02:39:21   2  SELECT
02:39:21   3  pair
02:39:21   4  ,ydate
02:39:21   5  ,prdate
02:39:21   6  ,clse
02:39:21   7  ,g6
02:39:21   8  ,gatt
02:39:21   9  ,gattn
02:39:21  10  ,trend
02:39:21  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:39:21  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:39:21  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:39:21  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:39:21  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:39:21  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:39:21  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:39:21  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:39:21  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:39:21  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:39:21  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:39:21  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:39:21  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:39:21  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:39:21  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:39:21  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:39:21  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:39:21  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:39:21  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:39:21  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:39:21  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:39:21  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:39:21  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:39:21  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:39:21  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:39:21  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:39:21  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:39:21  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:39:21  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:39:21  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:39:21  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:39:21  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:39:21  43  ,hh  att32
02:39:21  44  ,d   att33
02:39:21  45  ,w   att34
02:39:21  46  ,mpm att35
02:39:21  47  ,mph att36
02:39:21  48  ,trend att37
02:39:21  49  FROM svm6142
02:39:21  50  ORDER BY ydate
02:39:21  51  /

Table created.

Elapsed: 00:00:04.72
02:39:26 SQL> 
02:39:26 SQL> -- rpt
02:39:26 SQL> 
02:39:26 SQL> SELECT
02:39:26   2  pair
02:39:26   3  ,trend
02:39:26   4  ,gatt
02:39:26   5  ,COUNT(pair)
02:39:26   6  ,AVG(g6)
02:39:26   7  FROM svm6162
02:39:26   8  GROUP BY pair,trend,gatt
02:39:26   9  ORDER BY pair,trend,gatt
02:39:26  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5234 -.16584746
usd_jpy 	-1 up	      4860 .164906991
usd_jpy 	-1		25
usd_jpy 	 1 nup	      4975  -.1560013
usd_jpy 	 1 up	      4116 .166146221
usd_jpy 	 1		47

6 rows selected.

Elapsed: 00:00:00.04
02:39:26 SQL> 
02:39:26 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.11
02:39:26 SQL> CREATE TABLE modsrc COMPRESS AS
02:39:26   2  SELECT
02:39:26   3  pair
02:39:26   4  ,ydate
02:39:26   5  ,prdate
02:39:26   6  ,trend
02:39:26   7  ,g6
02:39:26   8  ,gatt
02:39:26   9  ,gattn
02:39:26  10  FROM svm6162
02:39:26  11  /

Table created.

Elapsed: 00:00:00.08
02:39:26 SQL> 
02:39:26 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
02:39:26 SQL> 
02:39:26 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
02:39:26 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
02:39:26   2  SELECT
02:39:26   3  ydate
02:39:26   4  ,trend jpy_trend
02:39:26   5  ,g6    jpy_g6
02:39:26   6  ,gatt  jpy_gatt
02:39:26   7  ,gattn jpy_gattn
02:39:26   8  FROM modsrc
02:39:26   9  /

Table created.

Elapsed: 00:00:00.07
02:39:26 SQL> 
02:39:26 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
02:39:26 SQL> 
02:39:26 SQL> -- I need a copy of the attributes:
02:39:26 SQL> 
02:39:26 SQL> 
02:39:26 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.05
02:39:26 SQL> CREATE TABLE jpy_att COMPRESS AS
02:39:26   2  SELECT
02:39:26   3  ydate
02:39:26   4  ,att00 jpy_att00
02:39:26   5  ,att01 jpy_att01
02:39:26   6  ,att02 jpy_att02
02:39:26   7  ,att03 jpy_att03
02:39:26   8  ,att04 jpy_att04
02:39:26   9  ,att05 jpy_att05
02:39:26  10  ,att06 jpy_att06
02:39:26  11  ,att07 jpy_att07
02:39:26  12  ,att08 jpy_att08
02:39:26  13  ,att09 jpy_att09
02:39:26  14  ,att10 jpy_att10
02:39:26  15  ,att11 jpy_att11
02:39:26  16  ,att12 jpy_att12
02:39:26  17  ,att13 jpy_att13
02:39:26  18  ,att14 jpy_att14
02:39:26  19  ,att15 jpy_att15
02:39:26  20  ,att16 jpy_att16
02:39:26  21  ,att17 jpy_att17
02:39:26  22  ,att18 jpy_att18
02:39:26  23  ,att19 jpy_att19
02:39:26  24  ,att20 jpy_att20
02:39:26  25  ,att21 jpy_att21
02:39:26  26  ,att22 jpy_att22
02:39:26  27  ,att23 jpy_att23
02:39:26  28  ,att24 jpy_att24
02:39:26  29  ,att25 jpy_att25
02:39:26  30  ,att26 jpy_att26
02:39:26  31  ,att27 jpy_att27
02:39:26  32  ,att28 jpy_att28
02:39:26  33  ,att29 jpy_att29
02:39:26  34  ,att30 jpy_att30
02:39:26  35  ,att31 jpy_att31
02:39:26  36  ,att32 jpy_att32
02:39:26  37  ,att33 jpy_att33
02:39:26  38  ,att34 jpy_att34
02:39:26  39  ,att35 jpy_att35
02:39:26  40  ,att36 jpy_att36
02:39:26  41  ,att37 jpy_att37
02:39:26  42  FROM svm6162
02:39:26  43  /

Table created.

Elapsed: 00:00:00.17
02:39:27 SQL> 
02:39:27 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.42
02:39:27 SQL> 
02:39:27 SQL> -- rpt
02:39:27 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19257

Elapsed: 00:00:00.88
02:39:28 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19257

Elapsed: 00:00:00.00
02:39:28 SQL> 
02:39:28 SQL> --
02:39:28 SQL> -- cad610.sql
02:39:28 SQL> --
02:39:28 SQL> 
02:39:28 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:39:28 SQL> 
02:39:28 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.44
02:39:28 SQL> 
02:39:28 SQL> -- I created di5min here:
02:39:28 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:39:28 SQL> 
02:39:28 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:39:28   2  SELECT
02:39:28   3  pair
02:39:28   4  ,ydate
02:39:28   5  ,prdate
02:39:28   6  ,rownum rnum -- acts as t in my time-series
02:39:28   7  ,clse
02:39:28   8  -- Derive a bunch of attributes from clse, the latest price:
02:39:28   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:39:28  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:39:28  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:39:28  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:39:28  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:39:28  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:39:28  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:39:28  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:39:28  17  --
02:39:28  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:39:28  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:39:28  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:39:28  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:39:28  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:39:28  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:39:28  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:39:28  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:39:28  26  --
02:39:28  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:39:28  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:39:28  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:39:28  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:39:28  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:39:28  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:39:28  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:39:28  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:39:28  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:39:28  36  FROM di5min WHERE pair LIKE'%cad%'
02:39:28  37  AND ydate > sysdate - 95
02:39:28  38  ORDER BY ydate
02:39:28  39  /

View created.

Elapsed: 00:00:00.04
02:39:28 SQL> 
02:39:28 SQL> -- rpt
02:39:28 SQL> 
02:39:28 SQL> SELECT
02:39:28   2  pair
02:39:28   3  ,COUNT(pair)
02:39:28   4  ,MIN(clse),MAX(clse)
02:39:28   5  ,MIN(avg6),MAX(avg6)
02:39:28   6  ,MIN(ydate),MAX(ydate)
02:39:28   7  FROM svm6102
02:39:28   8  GROUP BY pair
02:39:28   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19256    .992825	   1.0355 .994704795 1.03362556 2010-09-30 02:40:01 2011-01-03 02:30:00

Elapsed: 00:00:00.84
02:39:29 SQL> 
02:39:29 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:39:29 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.20
02:39:29 SQL> CREATE TABLE svm6122 COMPRESS AS
02:39:29   2  SELECT
02:39:29   3  pair
02:39:29   4  ,ydate
02:39:29   5  ,prdate
02:39:29   6  ,clse
02:39:29   7  -- g6 is important. I want to predict g6:
02:39:29   8  ,ld6 - clse g6
02:39:29   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:39:29  10  -- I want more attributes from the ones I derived above:
02:39:29  11  -- clse relation to moving-min
02:39:29  12  ,clse-min4  cm4
02:39:29  13  ,clse-min6  cm6
02:39:29  14  ,clse-min8  cm8
02:39:29  15  ,clse-min10 cm10
02:39:29  16  ,clse-min12 cm12
02:39:29  17  ,clse-min14 cm14
02:39:29  18  ,clse-min16 cm16
02:39:29  19  ,clse-min18 cm18
02:39:29  20  -- clse relation to moving-avg
02:39:29  21  ,clse-avg4  ca4
02:39:29  22  ,clse-avg6  ca6
02:39:29  23  ,clse-avg8  ca8
02:39:29  24  ,clse-avg10 ca10
02:39:29  25  ,clse-avg12 ca12
02:39:29  26  ,clse-avg14 ca14
02:39:29  27  ,clse-avg16 ca16
02:39:29  28  ,clse-avg18 ca18
02:39:29  29  -- clse relation to moving-max
02:39:29  30  ,clse-max4  cx4
02:39:29  31  ,clse-max6  cx6
02:39:29  32  ,clse-max8  cx8
02:39:29  33  ,clse-max10 cx10
02:39:29  34  ,clse-max12 cx12
02:39:29  35  ,clse-max14 cx14
02:39:29  36  ,clse-max16 cx16
02:39:29  37  ,clse-max18 cx18
02:39:29  38  -- Derive more attributes.
02:39:29  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:39:29  40  -- But COVAR_POP is more stable:
02:39:29  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:39:29  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:39:29  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:39:29  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:39:29  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:39:29  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:39:29  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:39:29  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:39:29  49  -- Derive date related attributes:
02:39:29  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:39:29  51  ,0+TO_CHAR(ydate,'D')d
02:39:29  52  ,0+TO_CHAR(ydate,'W')w
02:39:29  53  -- mpm stands for minutes-past-midnight:
02:39:29  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:39:29  55  -- mph stands for minutes-past-hour:
02:39:29  56  ,0+TO_CHAR(ydate,'MI')mph
02:39:29  57  FROM svm6102
02:39:29  58  ORDER BY ydate
02:39:29  59  /

Table created.

Elapsed: 00:00:01.98
02:39:31 SQL> 
02:39:31 SQL> -- rpt
02:39:31 SQL> 
02:39:31 SQL> SELECT
02:39:31   2  pair
02:39:31   3  ,COUNT(pair)
02:39:31   4  ,MIN(clse),MAX(clse)
02:39:31   5  ,MIN(ydate),MAX(ydate)
02:39:31   6  FROM svm6122
02:39:31   7  GROUP BY pair
02:39:31   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19256    .992825	   1.0355 2010-09-30 02:40:01 2011-01-03 02:30:00

Elapsed: 00:00:00.07
02:39:32 SQL> 
02:39:32 SQL> -- Prepare for derivation of NTILE based params:
02:39:32 SQL> 
02:39:32 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.24
02:39:32 SQL> CREATE TABLE svm6142 COMPRESS AS
02:39:32   2  SELECT
02:39:32   3  pair
02:39:32   4  ,ydate
02:39:32   5  ,prdate
02:39:32   6  ,clse
02:39:32   7  ,g6
02:39:32   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:39:32   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:39:32  10  ,CASE WHEN trend IS NULL THEN 1
02:39:32  11  	    WHEN trend =0      THEN 1
02:39:32  12  	    ELSE trend END trend
02:39:32  13  ,cm4
02:39:32  14  ,cm6
02:39:32  15  ,cm8
02:39:32  16  ,cm10
02:39:32  17  ,cm12
02:39:32  18  ,cm14
02:39:32  19  ,cm16
02:39:32  20  ,cm18
02:39:32  21  --
02:39:32  22  ,ca4
02:39:32  23  ,ca6
02:39:32  24  ,ca8
02:39:32  25  ,ca10
02:39:32  26  ,ca12
02:39:32  27  ,ca14
02:39:32  28  ,ca16
02:39:32  29  ,ca18
02:39:32  30  --
02:39:32  31  ,cx4
02:39:32  32  ,cx6
02:39:32  33  ,cx8
02:39:32  34  ,cx10
02:39:32  35  ,cx12
02:39:32  36  ,cx14
02:39:32  37  ,cx16
02:39:32  38  ,cx18
02:39:32  39  --
02:39:32  40  ,crr4
02:39:32  41  ,crr6
02:39:32  42  ,crr8
02:39:32  43  ,crr10
02:39:32  44  ,crr12
02:39:32  45  ,crr14
02:39:32  46  ,crr16
02:39:32  47  ,crr18
02:39:32  48  --
02:39:32  49  ,hh
02:39:32  50  ,d
02:39:32  51  ,w
02:39:32  52  ,mpm
02:39:32  53  ,mph
02:39:32  54  FROM svm6122
02:39:32  55  ORDER BY ydate
02:39:32  56  /

Table created.

Elapsed: 00:00:00.35
02:39:32 SQL> 
02:39:32 SQL> -- rpt
02:39:32 SQL> 
02:39:32 SQL> SELECT
02:39:32   2  pair
02:39:32   3  ,trend
02:39:32   4  ,gatt
02:39:32   5  ,COUNT(pair)
02:39:32   6  ,AVG(g6)
02:39:32   7  FROM svm6142
02:39:32   8  GROUP BY pair,trend,gatt
02:39:32   9  ORDER BY pair,trend,gatt
02:39:32  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7307 -.00132025
usd_cad 	-1 up	      3000 .003056492
usd_cad 	-1		58
usd_cad 	 1 nup	      6572 -.00163025
usd_cad 	 1 up	      2305 .003653973
usd_cad 	 1		14

6 rows selected.

Elapsed: 00:00:00.04
02:39:32 SQL> 
02:39:32 SQL> 
02:39:32 SQL> -- Derive NTILE based params:
02:39:32 SQL> 
02:39:32 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.22
02:39:32 SQL> CREATE TABLE svm6162 COMPRESS AS
02:39:32   2  SELECT
02:39:32   3  pair
02:39:32   4  ,ydate
02:39:32   5  ,prdate
02:39:32   6  ,clse
02:39:32   7  ,g6
02:39:32   8  ,gatt
02:39:32   9  ,gattn
02:39:32  10  ,trend
02:39:32  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:39:32  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:39:32  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:39:32  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:39:32  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:39:32  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:39:32  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:39:32  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:39:32  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:39:32  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:39:32  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:39:32  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:39:32  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:39:32  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:39:32  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:39:32  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:39:32  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:39:32  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:39:32  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:39:32  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:39:32  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:39:32  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:39:32  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:39:32  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:39:32  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:39:32  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:39:32  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:39:32  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:39:32  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:39:32  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:39:32  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:39:32  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:39:32  43  ,hh  att32
02:39:32  44  ,d   att33
02:39:32  45  ,w   att34
02:39:32  46  ,mpm att35
02:39:32  47  ,mph att36
02:39:32  48  ,trend att37
02:39:32  49  FROM svm6142
02:39:32  50  ORDER BY ydate
02:39:32  51  /

Table created.

Elapsed: 00:00:04.64
02:39:37 SQL> 
02:39:37 SQL> -- rpt
02:39:37 SQL> 
02:39:37 SQL> SELECT
02:39:37   2  pair
02:39:37   3  ,trend
02:39:37   4  ,gatt
02:39:37   5  ,COUNT(pair)
02:39:37   6  ,AVG(g6)
02:39:37   7  FROM svm6162
02:39:37   8  GROUP BY pair,trend,gatt
02:39:37   9  ORDER BY pair,trend,gatt
02:39:37  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7307 -.00132025
usd_cad 	-1 up	      3000 .003056492
usd_cad 	-1		58
usd_cad 	 1 nup	      6572 -.00163025
usd_cad 	 1 up	      2305 .003653973
usd_cad 	 1		14

6 rows selected.

Elapsed: 00:00:00.02
02:39:37 SQL> 
02:39:37 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
02:39:37 SQL> CREATE TABLE modsrc COMPRESS AS
02:39:37   2  SELECT
02:39:37   3  pair
02:39:37   4  ,ydate
02:39:37   5  ,prdate
02:39:37   6  ,trend
02:39:37   7  ,g6
02:39:37   8  ,gatt
02:39:37   9  ,gattn
02:39:37  10  FROM svm6162
02:39:37  11  /

Table created.

Elapsed: 00:00:00.08
02:39:37 SQL> 
02:39:37 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
02:39:37 SQL> 
02:39:37 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
02:39:38 SQL> CREATE TABLE cad_ms610 COMPRESS AS
02:39:38   2  SELECT
02:39:38   3  ydate
02:39:38   4  ,trend cad_trend
02:39:38   5  ,g6    cad_g6
02:39:38   6  ,gatt  cad_gatt
02:39:38   7  ,gattn cad_gattn
02:39:38   8  FROM modsrc
02:39:38   9  /

Table created.

Elapsed: 00:00:00.06
02:39:38 SQL> 
02:39:38 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
02:39:38 SQL> 
02:39:38 SQL> -- I need a copy of the attributes:
02:39:38 SQL> 
02:39:38 SQL> 
02:39:38 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.11
02:39:38 SQL> CREATE TABLE cad_att COMPRESS AS
02:39:38   2  SELECT
02:39:38   3  ydate
02:39:38   4  ,att00 cad_att00
02:39:38   5  ,att01 cad_att01
02:39:38   6  ,att02 cad_att02
02:39:38   7  ,att03 cad_att03
02:39:38   8  ,att04 cad_att04
02:39:38   9  ,att05 cad_att05
02:39:38  10  ,att06 cad_att06
02:39:38  11  ,att07 cad_att07
02:39:38  12  ,att08 cad_att08
02:39:38  13  ,att09 cad_att09
02:39:38  14  ,att10 cad_att10
02:39:38  15  ,att11 cad_att11
02:39:38  16  ,att12 cad_att12
02:39:38  17  ,att13 cad_att13
02:39:38  18  ,att14 cad_att14
02:39:38  19  ,att15 cad_att15
02:39:38  20  ,att16 cad_att16
02:39:38  21  ,att17 cad_att17
02:39:38  22  ,att18 cad_att18
02:39:38  23  ,att19 cad_att19
02:39:38  24  ,att20 cad_att20
02:39:38  25  ,att21 cad_att21
02:39:38  26  ,att22 cad_att22
02:39:38  27  ,att23 cad_att23
02:39:38  28  ,att24 cad_att24
02:39:38  29  ,att25 cad_att25
02:39:38  30  ,att26 cad_att26
02:39:38  31  ,att27 cad_att27
02:39:38  32  ,att28 cad_att28
02:39:38  33  ,att29 cad_att29
02:39:38  34  ,att30 cad_att30
02:39:38  35  ,att31 cad_att31
02:39:38  36  ,att32 cad_att32
02:39:38  37  ,att33 cad_att33
02:39:38  38  ,att34 cad_att34
02:39:38  39  ,att35 cad_att35
02:39:38  40  ,att36 cad_att36
02:39:38  41  ,att37 cad_att37
02:39:38  42  FROM svm6162
02:39:38  43  /

Table created.

Elapsed: 00:00:00.17
02:39:38 SQL> 
02:39:38 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
02:39:38 SQL> 
02:39:38 SQL> -- rpt
02:39:38 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.83
02:39:39 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.00
02:39:39 SQL> 
02:39:39 SQL> --
02:39:39 SQL> -- chf610.sql
02:39:39 SQL> --
02:39:39 SQL> 
02:39:39 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:39:39 SQL> 
02:39:39 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
02:39:40 SQL> 
02:39:40 SQL> -- I created di5min here:
02:39:40 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:39:40 SQL> 
02:39:40 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:39:40   2  SELECT
02:39:40   3  pair
02:39:40   4  ,ydate
02:39:40   5  ,prdate
02:39:40   6  ,rownum rnum -- acts as t in my time-series
02:39:40   7  ,clse
02:39:40   8  -- Derive a bunch of attributes from clse, the latest price:
02:39:40   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:39:40  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:39:40  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:39:40  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:39:40  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:39:40  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:39:40  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:39:40  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:39:40  17  --
02:39:40  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:39:40  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:39:40  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:39:40  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:39:40  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:39:40  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:39:40  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:39:40  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:39:40  26  --
02:39:40  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:39:40  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:39:40  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:39:40  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:39:40  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:39:40  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:39:40  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:39:40  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:39:40  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:39:40  36  FROM di5min WHERE pair LIKE'%chf%'
02:39:40  37  AND ydate > sysdate - 95
02:39:40  38  ORDER BY ydate
02:39:40  39  /

View created.

Elapsed: 00:00:00.05
02:39:40 SQL> 
02:39:40 SQL> -- rpt
02:39:40 SQL> 
02:39:40 SQL> SELECT
02:39:40   2  pair
02:39:40   3  ,COUNT(pair)
02:39:40   4  ,MIN(clse),MAX(clse)
02:39:40   5  ,MIN(avg6),MAX(avg6)
02:39:40   6  ,MIN(ydate),MAX(ydate)
02:39:40   7  FROM svm6102
02:39:40   8  GROUP BY pair
02:39:40   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19259    .931675	  1.00635 .933969692 1.00498151 2010-09-30 02:40:01 2011-01-03 02:30:00

Elapsed: 00:00:00.85
02:39:41 SQL> 
02:39:41 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:39:41 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.19
02:39:41 SQL> CREATE TABLE svm6122 COMPRESS AS
02:39:41   2  SELECT
02:39:41   3  pair
02:39:41   4  ,ydate
02:39:41   5  ,prdate
02:39:41   6  ,clse
02:39:41   7  -- g6 is important. I want to predict g6:
02:39:41   8  ,ld6 - clse g6
02:39:41   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:39:41  10  -- I want more attributes from the ones I derived above:
02:39:41  11  -- clse relation to moving-min
02:39:41  12  ,clse-min4  cm4
02:39:41  13  ,clse-min6  cm6
02:39:41  14  ,clse-min8  cm8
02:39:41  15  ,clse-min10 cm10
02:39:41  16  ,clse-min12 cm12
02:39:41  17  ,clse-min14 cm14
02:39:41  18  ,clse-min16 cm16
02:39:41  19  ,clse-min18 cm18
02:39:41  20  -- clse relation to moving-avg
02:39:41  21  ,clse-avg4  ca4
02:39:41  22  ,clse-avg6  ca6
02:39:41  23  ,clse-avg8  ca8
02:39:41  24  ,clse-avg10 ca10
02:39:41  25  ,clse-avg12 ca12
02:39:41  26  ,clse-avg14 ca14
02:39:41  27  ,clse-avg16 ca16
02:39:41  28  ,clse-avg18 ca18
02:39:41  29  -- clse relation to moving-max
02:39:41  30  ,clse-max4  cx4
02:39:41  31  ,clse-max6  cx6
02:39:41  32  ,clse-max8  cx8
02:39:41  33  ,clse-max10 cx10
02:39:41  34  ,clse-max12 cx12
02:39:41  35  ,clse-max14 cx14
02:39:41  36  ,clse-max16 cx16
02:39:41  37  ,clse-max18 cx18
02:39:41  38  -- Derive more attributes.
02:39:41  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:39:41  40  -- But COVAR_POP is more stable:
02:39:41  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:39:41  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:39:41  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:39:41  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:39:41  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:39:41  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:39:41  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:39:41  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:39:41  49  -- Derive date related attributes:
02:39:41  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:39:41  51  ,0+TO_CHAR(ydate,'D')d
02:39:41  52  ,0+TO_CHAR(ydate,'W')w
02:39:41  53  -- mpm stands for minutes-past-midnight:
02:39:41  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:39:41  55  -- mph stands for minutes-past-hour:
02:39:41  56  ,0+TO_CHAR(ydate,'MI')mph
02:39:41  57  FROM svm6102
02:39:41  58  ORDER BY ydate
02:39:41  59  /

Table created.

Elapsed: 00:00:02.03
02:39:43 SQL> 
02:39:43 SQL> -- rpt
02:39:43 SQL> 
02:39:43 SQL> SELECT
02:39:43   2  pair
02:39:43   3  ,COUNT(pair)
02:39:43   4  ,MIN(clse),MAX(clse)
02:39:43   5  ,MIN(ydate),MAX(ydate)
02:39:43   6  FROM svm6122
02:39:43   7  GROUP BY pair
02:39:43   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19259    .931675	  1.00635 2010-09-30 02:40:01 2011-01-03 02:30:00

Elapsed: 00:00:00.04
02:39:43 SQL> 
02:39:43 SQL> -- Prepare for derivation of NTILE based params:
02:39:43 SQL> 
02:39:43 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
02:39:43 SQL> CREATE TABLE svm6142 COMPRESS AS
02:39:43   2  SELECT
02:39:43   3  pair
02:39:43   4  ,ydate
02:39:43   5  ,prdate
02:39:43   6  ,clse
02:39:43   7  ,g6
02:39:43   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:39:43   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:39:43  10  ,CASE WHEN trend IS NULL THEN 1
02:39:43  11  	    WHEN trend =0      THEN 1
02:39:43  12  	    ELSE trend END trend
02:39:43  13  ,cm4
02:39:43  14  ,cm6
02:39:43  15  ,cm8
02:39:43  16  ,cm10
02:39:43  17  ,cm12
02:39:43  18  ,cm14
02:39:43  19  ,cm16
02:39:43  20  ,cm18
02:39:43  21  --
02:39:43  22  ,ca4
02:39:43  23  ,ca6
02:39:43  24  ,ca8
02:39:43  25  ,ca10
02:39:43  26  ,ca12
02:39:43  27  ,ca14
02:39:43  28  ,ca16
02:39:43  29  ,ca18
02:39:43  30  --
02:39:43  31  ,cx4
02:39:43  32  ,cx6
02:39:43  33  ,cx8
02:39:43  34  ,cx10
02:39:43  35  ,cx12
02:39:43  36  ,cx14
02:39:43  37  ,cx16
02:39:43  38  ,cx18
02:39:43  39  --
02:39:43  40  ,crr4
02:39:43  41  ,crr6
02:39:43  42  ,crr8
02:39:43  43  ,crr10
02:39:43  44  ,crr12
02:39:43  45  ,crr14
02:39:43  46  ,crr16
02:39:43  47  ,crr18
02:39:43  48  --
02:39:43  49  ,hh
02:39:43  50  ,d
02:39:43  51  ,w
02:39:43  52  ,mpm
02:39:43  53  ,mph
02:39:43  54  FROM svm6122
02:39:43  55  ORDER BY ydate
02:39:43  56  /

Table created.

Elapsed: 00:00:00.37
02:39:43 SQL> 
02:39:43 SQL> -- rpt
02:39:43 SQL> 
02:39:43 SQL> SELECT
02:39:43   2  pair
02:39:43   3  ,trend
02:39:43   4  ,gatt
02:39:43   5  ,COUNT(pair)
02:39:43   6  ,AVG(g6)
02:39:43   7  FROM svm6142
02:39:43   8  GROUP BY pair,trend,gatt
02:39:43   9  ORDER BY pair,trend,gatt
02:39:43  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7212 -.00200005
usd_chf 	-1 up	      3084 .003951585
usd_chf 	-1		22
usd_chf 	 1 nup	      6349 -.00161855
usd_chf 	 1 up	      2542 .003705782
usd_chf 	 1		50

6 rows selected.

Elapsed: 00:00:00.03
02:39:43 SQL> 
02:39:43 SQL> 
02:39:43 SQL> -- Derive NTILE based params:
02:39:43 SQL> 
02:39:43 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.14
02:39:44 SQL> CREATE TABLE svm6162 COMPRESS AS
02:39:44   2  SELECT
02:39:44   3  pair
02:39:44   4  ,ydate
02:39:44   5  ,prdate
02:39:44   6  ,clse
02:39:44   7  ,g6
02:39:44   8  ,gatt
02:39:44   9  ,gattn
02:39:44  10  ,trend
02:39:44  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:39:44  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:39:44  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:39:44  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:39:44  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:39:44  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:39:44  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:39:44  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:39:44  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:39:44  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:39:44  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:39:44  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:39:44  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:39:44  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:39:44  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:39:44  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:39:44  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:39:44  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:39:44  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:39:44  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:39:44  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:39:44  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:39:44  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:39:44  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:39:44  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:39:44  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:39:44  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:39:44  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:39:44  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:39:44  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:39:44  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:39:44  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:39:44  43  ,hh  att32
02:39:44  44  ,d   att33
02:39:44  45  ,w   att34
02:39:44  46  ,mpm att35
02:39:44  47  ,mph att36
02:39:44  48  ,trend att37
02:39:44  49  FROM svm6142
02:39:44  50  ORDER BY ydate
02:39:44  51  /

Table created.

Elapsed: 00:00:04.70
02:39:48 SQL> 
02:39:48 SQL> -- rpt
02:39:48 SQL> 
02:39:48 SQL> SELECT
02:39:48   2  pair
02:39:48   3  ,trend
02:39:48   4  ,gatt
02:39:48   5  ,COUNT(pair)
02:39:48   6  ,AVG(g6)
02:39:48   7  FROM svm6162
02:39:48   8  GROUP BY pair,trend,gatt
02:39:48   9  ORDER BY pair,trend,gatt
02:39:48  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7212 -.00200005
usd_chf 	-1 up	      3084 .003951585
usd_chf 	-1		22
usd_chf 	 1 nup	      6349 -.00161855
usd_chf 	 1 up	      2542 .003705782
usd_chf 	 1		50

6 rows selected.

Elapsed: 00:00:00.03
02:39:48 SQL> 
02:39:48 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
02:39:49 SQL> CREATE TABLE modsrc COMPRESS AS
02:39:49   2  SELECT
02:39:49   3  pair
02:39:49   4  ,ydate
02:39:49   5  ,prdate
02:39:49   6  ,trend
02:39:49   7  ,g6
02:39:49   8  ,gatt
02:39:49   9  ,gattn
02:39:49  10  FROM svm6162
02:39:49  11  /

Table created.

Elapsed: 00:00:00.09
02:39:49 SQL> 
02:39:49 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
02:39:49 SQL> 
02:39:49 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
02:39:49 SQL> CREATE TABLE chf_ms610 COMPRESS AS
02:39:49   2  SELECT
02:39:49   3  ydate
02:39:49   4  ,trend chf_trend
02:39:49   5  ,g6    chf_g6
02:39:49   6  ,gatt  chf_gatt
02:39:49   7  ,gattn chf_gattn
02:39:49   8  FROM modsrc
02:39:49   9  /

Table created.

Elapsed: 00:00:00.07
02:39:49 SQL> 
02:39:49 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.71
02:39:50 SQL> 
02:39:50 SQL> -- I need a copy of the attributes:
02:39:50 SQL> 
02:39:50 SQL> 
02:39:50 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.13
02:39:50 SQL> CREATE TABLE chf_att COMPRESS AS
02:39:50   2  SELECT
02:39:50   3  ydate
02:39:50   4  ,att00 chf_att00
02:39:50   5  ,att01 chf_att01
02:39:50   6  ,att02 chf_att02
02:39:50   7  ,att03 chf_att03
02:39:50   8  ,att04 chf_att04
02:39:50   9  ,att05 chf_att05
02:39:50  10  ,att06 chf_att06
02:39:50  11  ,att07 chf_att07
02:39:50  12  ,att08 chf_att08
02:39:50  13  ,att09 chf_att09
02:39:50  14  ,att10 chf_att10
02:39:50  15  ,att11 chf_att11
02:39:50  16  ,att12 chf_att12
02:39:50  17  ,att13 chf_att13
02:39:50  18  ,att14 chf_att14
02:39:50  19  ,att15 chf_att15
02:39:50  20  ,att16 chf_att16
02:39:50  21  ,att17 chf_att17
02:39:50  22  ,att18 chf_att18
02:39:50  23  ,att19 chf_att19
02:39:50  24  ,att20 chf_att20
02:39:50  25  ,att21 chf_att21
02:39:50  26  ,att22 chf_att22
02:39:50  27  ,att23 chf_att23
02:39:50  28  ,att24 chf_att24
02:39:50  29  ,att25 chf_att25
02:39:50  30  ,att26 chf_att26
02:39:50  31  ,att27 chf_att27
02:39:50  32  ,att28 chf_att28
02:39:50  33  ,att29 chf_att29
02:39:50  34  ,att30 chf_att30
02:39:50  35  ,att31 chf_att31
02:39:50  36  ,att32 chf_att32
02:39:50  37  ,att33 chf_att33
02:39:50  38  ,att34 chf_att34
02:39:50  39  ,att35 chf_att35
02:39:50  40  ,att36 chf_att36
02:39:50  41  ,att37 chf_att37
02:39:50  42  FROM svm6162
02:39:50  43  /

Table created.

Elapsed: 00:00:00.19
02:39:50 SQL> 
02:39:50 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.41
02:39:50 SQL> 
02:39:50 SQL> -- rpt
02:39:50 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.85
02:39:51 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.00
02:39:51 SQL> 
02:39:51 SQL> --
02:39:51 SQL> -- ech610.sql
02:39:51 SQL> --
02:39:51 SQL> 
02:39:51 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:39:51 SQL> 
02:39:51 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.36
02:39:52 SQL> 
02:39:52 SQL> -- I created di5min here:
02:39:52 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:39:52 SQL> 
02:39:52 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:39:52   2  SELECT
02:39:52   3  pair
02:39:52   4  ,ydate
02:39:52   5  ,prdate
02:39:52   6  ,rownum rnum -- acts as t in my time-series
02:39:52   7  ,clse
02:39:52   8  -- Derive a bunch of attributes from clse, the latest price:
02:39:52   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:39:52  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:39:52  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:39:52  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:39:52  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:39:52  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:39:52  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:39:52  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:39:52  17  --
02:39:52  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:39:52  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:39:52  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:39:52  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:39:52  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:39:52  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:39:52  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:39:52  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:39:52  26  --
02:39:52  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:39:52  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:39:52  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:39:52  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:39:52  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:39:52  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:39:52  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:39:52  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:39:52  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:39:52  36  FROM di5min WHERE pair LIKE'%ech%'
02:39:52  37  AND ydate > sysdate - 95
02:39:52  38  ORDER BY ydate
02:39:52  39  /

View created.

Elapsed: 00:00:00.06
02:39:52 SQL> 
02:39:52 SQL> -- rpt
02:39:52 SQL> 
02:39:52 SQL> SELECT
02:39:52   2  pair
02:39:52   3  ,COUNT(pair)
02:39:52   4  ,MIN(clse),MAX(clse)
02:39:52   5  ,MIN(avg6),MAX(avg6)
02:39:52   6  ,MIN(ydate),MAX(ydate)
02:39:52   7  FROM svm6102
02:39:52   8  GROUP BY pair
02:39:52   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19258 1.24213032 1.38284305 1.24320709 1.37986485 2010-09-30 02:40:01 2011-01-03 02:30:00

Elapsed: 00:00:00.78
02:39:52 SQL> 
02:39:52 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:39:52 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.26
02:39:53 SQL> CREATE TABLE svm6122 COMPRESS AS
02:39:53   2  SELECT
02:39:53   3  pair
02:39:53   4  ,ydate
02:39:53   5  ,prdate
02:39:53   6  ,clse
02:39:53   7  -- g6 is important. I want to predict g6:
02:39:53   8  ,ld6 - clse g6
02:39:53   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:39:53  10  -- I want more attributes from the ones I derived above:
02:39:53  11  -- clse relation to moving-min
02:39:53  12  ,clse-min4  cm4
02:39:53  13  ,clse-min6  cm6
02:39:53  14  ,clse-min8  cm8
02:39:53  15  ,clse-min10 cm10
02:39:53  16  ,clse-min12 cm12
02:39:53  17  ,clse-min14 cm14
02:39:53  18  ,clse-min16 cm16
02:39:53  19  ,clse-min18 cm18
02:39:53  20  -- clse relation to moving-avg
02:39:53  21  ,clse-avg4  ca4
02:39:53  22  ,clse-avg6  ca6
02:39:53  23  ,clse-avg8  ca8
02:39:53  24  ,clse-avg10 ca10
02:39:53  25  ,clse-avg12 ca12
02:39:53  26  ,clse-avg14 ca14
02:39:53  27  ,clse-avg16 ca16
02:39:53  28  ,clse-avg18 ca18
02:39:53  29  -- clse relation to moving-max
02:39:53  30  ,clse-max4  cx4
02:39:53  31  ,clse-max6  cx6
02:39:53  32  ,clse-max8  cx8
02:39:53  33  ,clse-max10 cx10
02:39:53  34  ,clse-max12 cx12
02:39:53  35  ,clse-max14 cx14
02:39:53  36  ,clse-max16 cx16
02:39:53  37  ,clse-max18 cx18
02:39:53  38  -- Derive more attributes.
02:39:53  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:39:53  40  -- But COVAR_POP is more stable:
02:39:53  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:39:53  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:39:53  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:39:53  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:39:53  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:39:53  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:39:53  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:39:53  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:39:53  49  -- Derive date related attributes:
02:39:53  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:39:53  51  ,0+TO_CHAR(ydate,'D')d
02:39:53  52  ,0+TO_CHAR(ydate,'W')w
02:39:53  53  -- mpm stands for minutes-past-midnight:
02:39:53  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:39:53  55  -- mph stands for minutes-past-hour:
02:39:53  56  ,0+TO_CHAR(ydate,'MI')mph
02:39:53  57  FROM svm6102
02:39:53  58  ORDER BY ydate
02:39:53  59  /

Table created.

Elapsed: 00:00:02.01
02:39:55 SQL> 
02:39:55 SQL> -- rpt
02:39:55 SQL> 
02:39:55 SQL> SELECT
02:39:55   2  pair
02:39:55   3  ,COUNT(pair)
02:39:55   4  ,MIN(clse),MAX(clse)
02:39:55   5  ,MIN(ydate),MAX(ydate)
02:39:55   6  FROM svm6122
02:39:55   7  GROUP BY pair
02:39:55   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19258 1.24213032 1.38284305 2010-09-30 02:40:01 2011-01-03 02:30:00

Elapsed: 00:00:00.03
02:39:55 SQL> 
02:39:55 SQL> -- Prepare for derivation of NTILE based params:
02:39:55 SQL> 
02:39:55 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.19
02:39:55 SQL> CREATE TABLE svm6142 COMPRESS AS
02:39:55   2  SELECT
02:39:55   3  pair
02:39:55   4  ,ydate
02:39:55   5  ,prdate
02:39:55   6  ,clse
02:39:55   7  ,g6
02:39:55   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:39:55   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:39:55  10  ,CASE WHEN trend IS NULL THEN 1
02:39:55  11  	    WHEN trend =0      THEN 1
02:39:55  12  	    ELSE trend END trend
02:39:55  13  ,cm4
02:39:55  14  ,cm6
02:39:55  15  ,cm8
02:39:55  16  ,cm10
02:39:55  17  ,cm12
02:39:55  18  ,cm14
02:39:55  19  ,cm16
02:39:55  20  ,cm18
02:39:55  21  --
02:39:55  22  ,ca4
02:39:55  23  ,ca6
02:39:55  24  ,ca8
02:39:55  25  ,ca10
02:39:55  26  ,ca12
02:39:55  27  ,ca14
02:39:55  28  ,ca16
02:39:55  29  ,ca18
02:39:55  30  --
02:39:55  31  ,cx4
02:39:55  32  ,cx6
02:39:55  33  ,cx8
02:39:55  34  ,cx10
02:39:55  35  ,cx12
02:39:55  36  ,cx14
02:39:55  37  ,cx16
02:39:55  38  ,cx18
02:39:55  39  --
02:39:55  40  ,crr4
02:39:55  41  ,crr6
02:39:55  42  ,crr8
02:39:55  43  ,crr10
02:39:55  44  ,crr12
02:39:55  45  ,crr14
02:39:55  46  ,crr16
02:39:55  47  ,crr18
02:39:55  48  --
02:39:55  49  ,hh
02:39:55  50  ,d
02:39:55  51  ,w
02:39:55  52  ,mpm
02:39:55  53  ,mph
02:39:55  54  FROM svm6122
02:39:55  55  ORDER BY ydate
02:39:55  56  /

Table created.

Elapsed: 00:00:00.42
02:39:55 SQL> 
02:39:55 SQL> -- rpt
02:39:55 SQL> 
02:39:55 SQL> SELECT
02:39:55   2  pair
02:39:55   3  ,trend
02:39:55   4  ,gatt
02:39:55   5  ,COUNT(pair)
02:39:55   6  ,AVG(g6)
02:39:55   7  FROM svm6142
02:39:55   8  GROUP BY pair,trend,gatt
02:39:55   9  ORDER BY pair,trend,gatt
02:39:55  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6482 -.00224565
ech_usd 	-1 up	      3517 .003561127
ech_usd 	-1		57
ech_usd 	 1 nup	      6317 -.00237128
ech_usd 	 1 up	      2870 .003854964
ech_usd 	 1		15

6 rows selected.

Elapsed: 00:00:00.04
02:39:55 SQL> 
02:39:55 SQL> 
02:39:55 SQL> -- Derive NTILE based params:
02:39:55 SQL> 
02:39:55 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.14
02:39:56 SQL> CREATE TABLE svm6162 COMPRESS AS
02:39:56   2  SELECT
02:39:56   3  pair
02:39:56   4  ,ydate
02:39:56   5  ,prdate
02:39:56   6  ,clse
02:39:56   7  ,g6
02:39:56   8  ,gatt
02:39:56   9  ,gattn
02:39:56  10  ,trend
02:39:56  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:39:56  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:39:56  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:39:56  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:39:56  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:39:56  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:39:56  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:39:56  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:39:56  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:39:56  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:39:56  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:39:56  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:39:56  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:39:56  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:39:56  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:39:56  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:39:56  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:39:56  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:39:56  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:39:56  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:39:56  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:39:56  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:39:56  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:39:56  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:39:56  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:39:56  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:39:56  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:39:56  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:39:56  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:39:56  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:39:56  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:39:56  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:39:56  43  ,hh  att32
02:39:56  44  ,d   att33
02:39:56  45  ,w   att34
02:39:56  46  ,mpm att35
02:39:56  47  ,mph att36
02:39:56  48  ,trend att37
02:39:56  49  FROM svm6142
02:39:56  50  ORDER BY ydate
02:39:56  51  /

Table created.

Elapsed: 00:00:04.74
02:40:00 SQL> 
02:40:00 SQL> -- rpt
02:40:00 SQL> 
02:40:00 SQL> SELECT
02:40:00   2  pair
02:40:00   3  ,trend
02:40:00   4  ,gatt
02:40:00   5  ,COUNT(pair)
02:40:00   6  ,AVG(g6)
02:40:00   7  FROM svm6162
02:40:00   8  GROUP BY pair,trend,gatt
02:40:00   9  ORDER BY pair,trend,gatt
02:40:00  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6482 -.00224565
ech_usd 	-1 up	      3517 .003561127
ech_usd 	-1		57
ech_usd 	 1 nup	      6317 -.00237128
ech_usd 	 1 up	      2870 .003854964
ech_usd 	 1		15

6 rows selected.

Elapsed: 00:00:00.04
02:40:00 SQL> 
02:40:00 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.21
02:40:01 SQL> CREATE TABLE modsrc COMPRESS AS
02:40:01   2  SELECT
02:40:01   3  pair
02:40:01   4  ,ydate
02:40:01   5  ,prdate
02:40:01   6  ,trend
02:40:01   7  ,g6
02:40:01   8  ,gatt
02:40:01   9  ,gattn
02:40:01  10  FROM svm6162
02:40:01  11  /

Table created.

Elapsed: 00:00:00.08
02:40:01 SQL> 
02:40:01 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
02:40:01 SQL> 
02:40:01 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
02:40:01 SQL> CREATE TABLE ech_ms610 COMPRESS AS
02:40:01   2  SELECT
02:40:01   3  ydate
02:40:01   4  ,trend ech_trend
02:40:01   5  ,g6    ech_g6
02:40:01   6  ,gatt  ech_gatt
02:40:01   7  ,gattn ech_gattn
02:40:01   8  FROM modsrc
02:40:01   9  /

Table created.

Elapsed: 00:00:00.09
02:40:01 SQL> 
02:40:01 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
02:40:01 SQL> 
02:40:01 SQL> -- I need a copy of the attributes:
02:40:01 SQL> 
02:40:01 SQL> 
02:40:01 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.14
02:40:01 SQL> CREATE TABLE ech_att COMPRESS AS
02:40:01   2  SELECT
02:40:01   3  ydate
02:40:01   4  ,att00 ech_att00
02:40:01   5  ,att01 ech_att01
02:40:01   6  ,att02 ech_att02
02:40:01   7  ,att03 ech_att03
02:40:01   8  ,att04 ech_att04
02:40:01   9  ,att05 ech_att05
02:40:01  10  ,att06 ech_att06
02:40:01  11  ,att07 ech_att07
02:40:01  12  ,att08 ech_att08
02:40:01  13  ,att09 ech_att09
02:40:01  14  ,att10 ech_att10
02:40:01  15  ,att11 ech_att11
02:40:01  16  ,att12 ech_att12
02:40:01  17  ,att13 ech_att13
02:40:01  18  ,att14 ech_att14
02:40:01  19  ,att15 ech_att15
02:40:01  20  ,att16 ech_att16
02:40:01  21  ,att17 ech_att17
02:40:01  22  ,att18 ech_att18
02:40:01  23  ,att19 ech_att19
02:40:01  24  ,att20 ech_att20
02:40:01  25  ,att21 ech_att21
02:40:01  26  ,att22 ech_att22
02:40:01  27  ,att23 ech_att23
02:40:01  28  ,att24 ech_att24
02:40:01  29  ,att25 ech_att25
02:40:01  30  ,att26 ech_att26
02:40:01  31  ,att27 ech_att27
02:40:01  32  ,att28 ech_att28
02:40:01  33  ,att29 ech_att29
02:40:01  34  ,att30 ech_att30
02:40:01  35  ,att31 ech_att31
02:40:01  36  ,att32 ech_att32
02:40:01  37  ,att33 ech_att33
02:40:01  38  ,att34 ech_att34
02:40:01  39  ,att35 ech_att35
02:40:01  40  ,att36 ech_att36
02:40:01  41  ,att37 ech_att37
02:40:01  42  FROM svm6162
02:40:01  43  /

Table created.

Elapsed: 00:00:00.17
02:40:01 SQL> 
02:40:01 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
02:40:02 SQL> 
02:40:02 SQL> -- rpt
02:40:02 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19257

Elapsed: 00:00:00.80
02:40:03 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19258

Elapsed: 00:00:00.00
02:40:03 SQL> 
02:40:03 SQL> --
02:40:03 SQL> -- egb610.sql
02:40:03 SQL> --
02:40:03 SQL> 
02:40:03 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:40:03 SQL> 
02:40:03 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
02:40:03 SQL> 
02:40:03 SQL> -- I created di5min here:
02:40:03 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:40:03 SQL> 
02:40:03 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:40:03   2  SELECT
02:40:03   3  pair
02:40:03   4  ,ydate
02:40:03   5  ,prdate
02:40:03   6  ,rownum rnum -- acts as t in my time-series
02:40:03   7  ,clse
02:40:03   8  -- Derive a bunch of attributes from clse, the latest price:
02:40:03   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:40:03  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:40:03  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:40:03  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:40:03  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:40:03  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:40:03  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:40:03  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:40:03  17  --
02:40:03  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:40:03  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:40:03  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:40:03  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:40:03  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:40:03  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:40:03  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:40:03  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:40:03  26  --
02:40:03  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:40:03  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:40:03  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:40:03  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:40:03  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:40:03  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:40:03  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:40:03  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:40:03  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:40:03  36  FROM di5min WHERE pair LIKE'%egb%'
02:40:03  37  AND ydate > sysdate - 95
02:40:03  38  ORDER BY ydate
02:40:03  39  /

View created.

Elapsed: 00:00:00.05
02:40:03 SQL> 
02:40:03 SQL> -- rpt
02:40:03 SQL> 
02:40:03 SQL> SELECT
02:40:03   2  pair
02:40:03   3  ,COUNT(pair)
02:40:03   4  ,MIN(clse),MAX(clse)
02:40:03   5  ,MIN(avg6),MAX(avg6)
02:40:03   6  ,MIN(ydate),MAX(ydate)
02:40:03   7  FROM svm6102
02:40:03   8  GROUP BY pair
02:40:03   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19256 .833520557 .893920122 .834199029 .892400287 2010-09-30 02:45:01 2011-01-03 02:30:00

Elapsed: 00:00:00.96
02:40:04 SQL> 
02:40:04 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:40:04 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.63
02:40:05 SQL> CREATE TABLE svm6122 COMPRESS AS
02:40:05   2  SELECT
02:40:05   3  pair
02:40:05   4  ,ydate
02:40:05   5  ,prdate
02:40:05   6  ,clse
02:40:05   7  -- g6 is important. I want to predict g6:
02:40:05   8  ,ld6 - clse g6
02:40:05   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:40:05  10  -- I want more attributes from the ones I derived above:
02:40:05  11  -- clse relation to moving-min
02:40:05  12  ,clse-min4  cm4
02:40:05  13  ,clse-min6  cm6
02:40:05  14  ,clse-min8  cm8
02:40:05  15  ,clse-min10 cm10
02:40:05  16  ,clse-min12 cm12
02:40:05  17  ,clse-min14 cm14
02:40:05  18  ,clse-min16 cm16
02:40:05  19  ,clse-min18 cm18
02:40:05  20  -- clse relation to moving-avg
02:40:05  21  ,clse-avg4  ca4
02:40:05  22  ,clse-avg6  ca6
02:40:05  23  ,clse-avg8  ca8
02:40:05  24  ,clse-avg10 ca10
02:40:05  25  ,clse-avg12 ca12
02:40:05  26  ,clse-avg14 ca14
02:40:05  27  ,clse-avg16 ca16
02:40:05  28  ,clse-avg18 ca18
02:40:05  29  -- clse relation to moving-max
02:40:05  30  ,clse-max4  cx4
02:40:05  31  ,clse-max6  cx6
02:40:05  32  ,clse-max8  cx8
02:40:05  33  ,clse-max10 cx10
02:40:05  34  ,clse-max12 cx12
02:40:05  35  ,clse-max14 cx14
02:40:05  36  ,clse-max16 cx16
02:40:05  37  ,clse-max18 cx18
02:40:05  38  -- Derive more attributes.
02:40:05  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:40:05  40  -- But COVAR_POP is more stable:
02:40:05  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:40:05  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:40:05  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:40:05  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:40:05  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:40:05  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:40:05  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:40:05  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:40:05  49  -- Derive date related attributes:
02:40:05  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:40:05  51  ,0+TO_CHAR(ydate,'D')d
02:40:05  52  ,0+TO_CHAR(ydate,'W')w
02:40:05  53  -- mpm stands for minutes-past-midnight:
02:40:05  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:40:05  55  -- mph stands for minutes-past-hour:
02:40:05  56  ,0+TO_CHAR(ydate,'MI')mph
02:40:05  57  FROM svm6102
02:40:05  58  ORDER BY ydate
02:40:05  59  /

Table created.

Elapsed: 00:00:02.49
02:40:07 SQL> 
02:40:07 SQL> -- rpt
02:40:07 SQL> 
02:40:07 SQL> SELECT
02:40:07   2  pair
02:40:07   3  ,COUNT(pair)
02:40:07   4  ,MIN(clse),MAX(clse)
02:40:07   5  ,MIN(ydate),MAX(ydate)
02:40:07   6  FROM svm6122
02:40:07   7  GROUP BY pair
02:40:07   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19256 .833520557 .893920122 2010-09-30 02:45:01 2011-01-03 02:30:00

Elapsed: 00:00:00.04
02:40:07 SQL> 
02:40:07 SQL> -- Prepare for derivation of NTILE based params:
02:40:07 SQL> 
02:40:07 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.31
02:40:08 SQL> CREATE TABLE svm6142 COMPRESS AS
02:40:08   2  SELECT
02:40:08   3  pair
02:40:08   4  ,ydate
02:40:08   5  ,prdate
02:40:08   6  ,clse
02:40:08   7  ,g6
02:40:08   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:40:08   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:40:08  10  ,CASE WHEN trend IS NULL THEN 1
02:40:08  11  	    WHEN trend =0      THEN 1
02:40:08  12  	    ELSE trend END trend
02:40:08  13  ,cm4
02:40:08  14  ,cm6
02:40:08  15  ,cm8
02:40:08  16  ,cm10
02:40:08  17  ,cm12
02:40:08  18  ,cm14
02:40:08  19  ,cm16
02:40:08  20  ,cm18
02:40:08  21  --
02:40:08  22  ,ca4
02:40:08  23  ,ca6
02:40:08  24  ,ca8
02:40:08  25  ,ca10
02:40:08  26  ,ca12
02:40:08  27  ,ca14
02:40:08  28  ,ca16
02:40:08  29  ,ca18
02:40:08  30  --
02:40:08  31  ,cx4
02:40:08  32  ,cx6
02:40:08  33  ,cx8
02:40:08  34  ,cx10
02:40:08  35  ,cx12
02:40:08  36  ,cx14
02:40:08  37  ,cx16
02:40:08  38  ,cx18
02:40:08  39  --
02:40:08  40  ,crr4
02:40:08  41  ,crr6
02:40:08  42  ,crr8
02:40:08  43  ,crr10
02:40:08  44  ,crr12
02:40:08  45  ,crr14
02:40:08  46  ,crr16
02:40:08  47  ,crr18
02:40:08  48  --
02:40:08  49  ,hh
02:40:08  50  ,d
02:40:08  51  ,w
02:40:08  52  ,mpm
02:40:08  53  ,mph
02:40:08  54  FROM svm6122
02:40:08  55  ORDER BY ydate
02:40:08  56  /

Table created.

Elapsed: 00:00:00.43
02:40:08 SQL> 
02:40:08 SQL> -- rpt
02:40:08 SQL> 
02:40:08 SQL> SELECT
02:40:08   2  pair
02:40:08   3  ,trend
02:40:08   4  ,gatt
02:40:08   5  ,COUNT(pair)
02:40:08   6  ,AVG(g6)
02:40:08   7  FROM svm6142
02:40:08   8  GROUP BY pair,trend,gatt
02:40:08   9  ORDER BY pair,trend,gatt
02:40:08  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7298 -.00099436
egb_usd 	-1 up	      2653 .002912126
egb_usd 	-1		60
egb_usd 	 1 nup	      6550 -.00131048
egb_usd 	 1 up	      2683 .002984404
egb_usd 	 1		12

6 rows selected.

Elapsed: 00:00:00.06
02:40:08 SQL> 
02:40:08 SQL> 
02:40:08 SQL> -- Derive NTILE based params:
02:40:08 SQL> 
02:40:08 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.33
02:40:08 SQL> CREATE TABLE svm6162 COMPRESS AS
02:40:08   2  SELECT
02:40:08   3  pair
02:40:08   4  ,ydate
02:40:08   5  ,prdate
02:40:08   6  ,clse
02:40:08   7  ,g6
02:40:08   8  ,gatt
02:40:08   9  ,gattn
02:40:08  10  ,trend
02:40:08  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:40:08  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:40:08  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:40:08  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:40:08  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:40:08  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:40:08  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:40:08  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:40:08  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:40:08  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:40:08  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:40:08  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:40:08  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:40:08  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:40:08  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:40:08  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:40:08  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:40:08  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:40:08  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:40:08  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:40:08  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:40:08  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:40:08  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:40:08  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:40:08  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:40:08  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:40:08  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:40:08  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:40:08  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:40:08  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:40:08  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:40:08  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:40:08  43  ,hh  att32
02:40:08  44  ,d   att33
02:40:08  45  ,w   att34
02:40:08  46  ,mpm att35
02:40:08  47  ,mph att36
02:40:08  48  ,trend att37
02:40:08  49  FROM svm6142
02:40:08  50  ORDER BY ydate
02:40:08  51  /

Table created.

Elapsed: 00:00:05.46
02:40:14 SQL> 
02:40:14 SQL> -- rpt
02:40:14 SQL> 
02:40:14 SQL> SELECT
02:40:14   2  pair
02:40:14   3  ,trend
02:40:14   4  ,gatt
02:40:14   5  ,COUNT(pair)
02:40:14   6  ,AVG(g6)
02:40:14   7  FROM svm6162
02:40:14   8  GROUP BY pair,trend,gatt
02:40:14   9  ORDER BY pair,trend,gatt
02:40:14  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7298 -.00099436
egb_usd 	-1 up	      2653 .002912126
egb_usd 	-1		60
egb_usd 	 1 nup	      6550 -.00131048
egb_usd 	 1 up	      2683 .002984404
egb_usd 	 1		12

6 rows selected.

Elapsed: 00:00:00.04
02:40:14 SQL> 
02:40:14 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.25
02:40:14 SQL> CREATE TABLE modsrc COMPRESS AS
02:40:14   2  SELECT
02:40:14   3  pair
02:40:14   4  ,ydate
02:40:14   5  ,prdate
02:40:14   6  ,trend
02:40:14   7  ,g6
02:40:14   8  ,gatt
02:40:14   9  ,gattn
02:40:14  10  FROM svm6162
02:40:14  11  /

Table created.

Elapsed: 00:00:00.10
02:40:14 SQL> 
02:40:14 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
02:40:15 SQL> 
02:40:15 SQL> DROP   TABLE egb_ms610 ;

Table dropped.

Elapsed: 00:00:00.07
02:40:15 SQL> CREATE TABLE egb_ms610 COMPRESS AS
02:40:15   2  SELECT
02:40:15   3  ydate
02:40:15   4  ,trend egb_trend
02:40:15   5  ,g6    egb_g6
02:40:15   6  ,gatt  egb_gatt
02:40:15   7  ,gattn egb_gattn
02:40:15   8  FROM modsrc
02:40:15   9  /

Table created.

Elapsed: 00:00:00.07
02:40:15 SQL> 
02:40:15 SQL> ANALYZE TABLE egb_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
02:40:15 SQL> 
02:40:15 SQL> -- I need a copy of the attributes:
02:40:15 SQL> 
02:40:15 SQL> 
02:40:15 SQL> DROP   TABLE egb_att;

Table dropped.

Elapsed: 00:00:00.20
02:40:15 SQL> CREATE TABLE egb_att COMPRESS AS
02:40:15   2  SELECT
02:40:15   3  ydate
02:40:15   4  ,att00 egb_att00
02:40:15   5  ,att01 egb_att01
02:40:15   6  ,att02 egb_att02
02:40:15   7  ,att03 egb_att03
02:40:15   8  ,att04 egb_att04
02:40:15   9  ,att05 egb_att05
02:40:15  10  ,att06 egb_att06
02:40:15  11  ,att07 egb_att07
02:40:15  12  ,att08 egb_att08
02:40:15  13  ,att09 egb_att09
02:40:15  14  ,att10 egb_att10
02:40:15  15  ,att11 egb_att11
02:40:15  16  ,att12 egb_att12
02:40:15  17  ,att13 egb_att13
02:40:15  18  ,att14 egb_att14
02:40:15  19  ,att15 egb_att15
02:40:15  20  ,att16 egb_att16
02:40:15  21  ,att17 egb_att17
02:40:15  22  ,att18 egb_att18
02:40:15  23  ,att19 egb_att19
02:40:15  24  ,att20 egb_att20
02:40:15  25  ,att21 egb_att21
02:40:15  26  ,att22 egb_att22
02:40:15  27  ,att23 egb_att23
02:40:15  28  ,att24 egb_att24
02:40:15  29  ,att25 egb_att25
02:40:15  30  ,att26 egb_att26
02:40:15  31  ,att27 egb_att27
02:40:15  32  ,att28 egb_att28
02:40:15  33  ,att29 egb_att29
02:40:15  34  ,att30 egb_att30
02:40:15  35  ,att31 egb_att31
02:40:15  36  ,att32 egb_att32
02:40:15  37  ,att33 egb_att33
02:40:15  38  ,att34 egb_att34
02:40:15  39  ,att35 egb_att35
02:40:15  40  ,att36 egb_att36
02:40:15  41  ,att37 egb_att37
02:40:15  42  FROM svm6162
02:40:15  43  /

Table created.

Elapsed: 00:00:00.22
02:40:15 SQL> 
02:40:15 SQL> ANALYZE TABLE egb_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
02:40:16 SQL> 
02:40:16 SQL> -- rpt
02:40:16 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.93
02:40:17 SQL> SELECT COUNT(*)FROM egb_att;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.00
02:40:17 SQL> 
02:40:17 SQL> --
02:40:17 SQL> -- ejp610.sql
02:40:17 SQL> --
02:40:17 SQL> 
02:40:17 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:40:17 SQL> 
02:40:17 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.51
02:40:17 SQL> 
02:40:17 SQL> -- I created di5min here:
02:40:17 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:40:17 SQL> 
02:40:17 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:40:17   2  SELECT
02:40:17   3  pair
02:40:17   4  ,ydate
02:40:17   5  ,prdate
02:40:17   6  ,rownum rnum -- acts as t in my time-series
02:40:17   7  ,clse
02:40:17   8  -- Derive a bunch of attributes from clse, the latest price:
02:40:17   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:40:17  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:40:17  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:40:17  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:40:17  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:40:17  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:40:17  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:40:17  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:40:17  17  --
02:40:17  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:40:17  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:40:17  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:40:17  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:40:17  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:40:17  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:40:17  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:40:17  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:40:17  26  --
02:40:17  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:40:17  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:40:17  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:40:17  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:40:17  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:40:17  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:40:17  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:40:17  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:40:17  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:40:17  36  FROM di5min WHERE pair LIKE'%ejp%'
02:40:17  37  AND ydate > sysdate - 95
02:40:17  38  ORDER BY ydate
02:40:17  39  /

View created.

Elapsed: 00:00:00.05
02:40:17 SQL> 
02:40:17 SQL> -- rpt
02:40:17 SQL> 
02:40:17 SQL> SELECT
02:40:17   2  pair
02:40:17   3  ,COUNT(pair)
02:40:17   4  ,MIN(clse),MAX(clse)
02:40:17   5  ,MIN(avg6),MAX(avg6)
02:40:17   6  ,MIN(ydate),MAX(ydate)
02:40:17   7  FROM svm6102
02:40:17   8  GROUP BY pair
02:40:17   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ejp_usd       19254 107.643765	115.63485 107.776148 115.509678 2010-09-30 02:45:01 2011-01-03 02:30:00

Elapsed: 00:00:00.81
02:40:18 SQL> 
02:40:18 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:40:18 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.22
02:40:18 SQL> CREATE TABLE svm6122 COMPRESS AS
02:40:18   2  SELECT
02:40:18   3  pair
02:40:18   4  ,ydate
02:40:18   5  ,prdate
02:40:18   6  ,clse
02:40:18   7  -- g6 is important. I want to predict g6:
02:40:18   8  ,ld6 - clse g6
02:40:18   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:40:18  10  -- I want more attributes from the ones I derived above:
02:40:18  11  -- clse relation to moving-min
02:40:18  12  ,clse-min4  cm4
02:40:18  13  ,clse-min6  cm6
02:40:18  14  ,clse-min8  cm8
02:40:18  15  ,clse-min10 cm10
02:40:18  16  ,clse-min12 cm12
02:40:18  17  ,clse-min14 cm14
02:40:18  18  ,clse-min16 cm16
02:40:18  19  ,clse-min18 cm18
02:40:18  20  -- clse relation to moving-avg
02:40:18  21  ,clse-avg4  ca4
02:40:18  22  ,clse-avg6  ca6
02:40:18  23  ,clse-avg8  ca8
02:40:18  24  ,clse-avg10 ca10
02:40:18  25  ,clse-avg12 ca12
02:40:18  26  ,clse-avg14 ca14
02:40:18  27  ,clse-avg16 ca16
02:40:18  28  ,clse-avg18 ca18
02:40:18  29  -- clse relation to moving-max
02:40:18  30  ,clse-max4  cx4
02:40:18  31  ,clse-max6  cx6
02:40:18  32  ,clse-max8  cx8
02:40:18  33  ,clse-max10 cx10
02:40:18  34  ,clse-max12 cx12
02:40:18  35  ,clse-max14 cx14
02:40:18  36  ,clse-max16 cx16
02:40:18  37  ,clse-max18 cx18
02:40:18  38  -- Derive more attributes.
02:40:18  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:40:18  40  -- But COVAR_POP is more stable:
02:40:18  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:40:18  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:40:18  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:40:18  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:40:18  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:40:18  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:40:18  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:40:18  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:40:18  49  -- Derive date related attributes:
02:40:18  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:40:18  51  ,0+TO_CHAR(ydate,'D')d
02:40:18  52  ,0+TO_CHAR(ydate,'W')w
02:40:18  53  -- mpm stands for minutes-past-midnight:
02:40:18  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:40:18  55  -- mph stands for minutes-past-hour:
02:40:18  56  ,0+TO_CHAR(ydate,'MI')mph
02:40:18  57  FROM svm6102
02:40:18  58  ORDER BY ydate
02:40:18  59  /

Table created.

Elapsed: 00:00:02.07
02:40:20 SQL> 
02:40:20 SQL> -- rpt
02:40:20 SQL> 
02:40:20 SQL> SELECT
02:40:20   2  pair
02:40:20   3  ,COUNT(pair)
02:40:20   4  ,MIN(clse),MAX(clse)
02:40:20   5  ,MIN(ydate),MAX(ydate)
02:40:20   6  FROM svm6122
02:40:20   7  GROUP BY pair
02:40:20   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ejp_usd       19254 107.643765	115.63485 2010-09-30 02:45:01 2011-01-03 02:30:00

Elapsed: 00:00:00.03
02:40:20 SQL> 
02:40:20 SQL> -- Prepare for derivation of NTILE based params:
02:40:20 SQL> 
02:40:20 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.19
02:40:21 SQL> CREATE TABLE svm6142 COMPRESS AS
02:40:21   2  SELECT
02:40:21   3  pair
02:40:21   4  ,ydate
02:40:21   5  ,prdate
02:40:21   6  ,clse
02:40:21   7  ,g6
02:40:21   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:40:21   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:40:21  10  ,CASE WHEN trend IS NULL THEN 1
02:40:21  11  	    WHEN trend =0      THEN 1
02:40:21  12  	    ELSE trend END trend
02:40:21  13  ,cm4
02:40:21  14  ,cm6
02:40:21  15  ,cm8
02:40:21  16  ,cm10
02:40:21  17  ,cm12
02:40:21  18  ,cm14
02:40:21  19  ,cm16
02:40:21  20  ,cm18
02:40:21  21  --
02:40:21  22  ,ca4
02:40:21  23  ,ca6
02:40:21  24  ,ca8
02:40:21  25  ,ca10
02:40:21  26  ,ca12
02:40:21  27  ,ca14
02:40:21  28  ,ca16
02:40:21  29  ,ca18
02:40:21  30  --
02:40:21  31  ,cx4
02:40:21  32  ,cx6
02:40:21  33  ,cx8
02:40:21  34  ,cx10
02:40:21  35  ,cx12
02:40:21  36  ,cx14
02:40:21  37  ,cx16
02:40:21  38  ,cx18
02:40:21  39  --
02:40:21  40  ,crr4
02:40:21  41  ,crr6
02:40:21  42  ,crr8
02:40:21  43  ,crr10
02:40:21  44  ,crr12
02:40:21  45  ,crr14
02:40:21  46  ,crr16
02:40:21  47  ,crr18
02:40:21  48  --
02:40:21  49  ,hh
02:40:21  50  ,d
02:40:21  51  ,w
02:40:21  52  ,mpm
02:40:21  53  ,mph
02:40:21  54  FROM svm6122
02:40:21  55  ORDER BY ydate
02:40:21  56  /

Table created.

Elapsed: 00:00:00.38
02:40:21 SQL> 
02:40:21 SQL> -- rpt
02:40:21 SQL> 
02:40:21 SQL> SELECT
02:40:21   2  pair
02:40:21   3  ,trend
02:40:21   4  ,gatt
02:40:21   5  ,COUNT(pair)
02:40:21   6  ,AVG(g6)
02:40:21   7  FROM svm6142
02:40:21   8  GROUP BY pair,trend,gatt
02:40:21   9  ORDER BY pair,trend,gatt
02:40:21  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4795 -.32453321
ejp_usd 	-1 up	      4858 .269627689
ejp_usd 	-1		71
ejp_usd 	 1 nup	      4906 -.28919751
ejp_usd 	 1 up	      4623 .280743724
ejp_usd 	 1		 1

6 rows selected.

Elapsed: 00:00:00.03
02:40:21 SQL> 
02:40:21 SQL> 
02:40:21 SQL> -- Derive NTILE based params:
02:40:21 SQL> 
02:40:21 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.20
02:40:21 SQL> CREATE TABLE svm6162 COMPRESS AS
02:40:21   2  SELECT
02:40:21   3  pair
02:40:21   4  ,ydate
02:40:21   5  ,prdate
02:40:21   6  ,clse
02:40:21   7  ,g6
02:40:21   8  ,gatt
02:40:21   9  ,gattn
02:40:21  10  ,trend
02:40:21  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:40:21  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:40:21  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:40:21  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:40:21  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:40:21  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:40:21  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:40:21  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:40:21  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:40:21  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:40:21  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:40:21  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:40:21  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:40:21  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:40:21  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:40:21  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:40:21  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:40:21  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:40:21  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:40:21  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:40:21  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:40:21  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:40:21  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:40:21  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:40:21  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:40:21  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:40:21  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:40:21  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:40:21  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:40:21  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:40:21  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:40:21  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:40:21  43  ,hh  att32
02:40:21  44  ,d   att33
02:40:21  45  ,w   att34
02:40:21  46  ,mpm att35
02:40:21  47  ,mph att36
02:40:21  48  ,trend att37
02:40:21  49  FROM svm6142
02:40:21  50  ORDER BY ydate
02:40:21  51  /

Table created.

Elapsed: 00:00:04.76
02:40:26 SQL> 
02:40:26 SQL> -- rpt
02:40:26 SQL> 
02:40:26 SQL> SELECT
02:40:26   2  pair
02:40:26   3  ,trend
02:40:26   4  ,gatt
02:40:26   5  ,COUNT(pair)
02:40:26   6  ,AVG(g6)
02:40:26   7  FROM svm6162
02:40:26   8  GROUP BY pair,trend,gatt
02:40:26   9  ORDER BY pair,trend,gatt
02:40:26  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4795 -.32453321
ejp_usd 	-1 up	      4858 .269627689
ejp_usd 	-1		71
ejp_usd 	 1 nup	      4906 -.28919751
ejp_usd 	 1 up	      4623 .280743724
ejp_usd 	 1		 1

6 rows selected.

Elapsed: 00:00:00.03
02:40:26 SQL> 
02:40:26 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
02:40:26 SQL> CREATE TABLE modsrc COMPRESS AS
02:40:26   2  SELECT
02:40:26   3  pair
02:40:26   4  ,ydate
02:40:26   5  ,prdate
02:40:26   6  ,trend
02:40:26   7  ,g6
02:40:26   8  ,gatt
02:40:26   9  ,gattn
02:40:26  10  FROM svm6162
02:40:26  11  /

Table created.

Elapsed: 00:00:00.09
02:40:26 SQL> 
02:40:26 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
02:40:26 SQL> 
02:40:26 SQL> DROP   TABLE ejp_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
02:40:26 SQL> CREATE TABLE ejp_ms610 COMPRESS AS
02:40:26   2  SELECT
02:40:26   3  ydate
02:40:26   4  ,trend ejp_trend
02:40:26   5  ,g6    ejp_g6
02:40:26   6  ,gatt  ejp_gatt
02:40:26   7  ,gattn ejp_gattn
02:40:26   8  FROM modsrc
02:40:26   9  /

Table created.

Elapsed: 00:00:00.07
02:40:26 SQL> 
02:40:26 SQL> ANALYZE TABLE ejp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
02:40:27 SQL> 
02:40:27 SQL> -- I need a copy of the attributes:
02:40:27 SQL> 
02:40:27 SQL> 
02:40:27 SQL> DROP   TABLE ejp_att;

Table dropped.

Elapsed: 00:00:00.05
02:40:27 SQL> CREATE TABLE ejp_att COMPRESS AS
02:40:27   2  SELECT
02:40:27   3  ydate
02:40:27   4  ,att00 ejp_att00
02:40:27   5  ,att01 ejp_att01
02:40:27   6  ,att02 ejp_att02
02:40:27   7  ,att03 ejp_att03
02:40:27   8  ,att04 ejp_att04
02:40:27   9  ,att05 ejp_att05
02:40:27  10  ,att06 ejp_att06
02:40:27  11  ,att07 ejp_att07
02:40:27  12  ,att08 ejp_att08
02:40:27  13  ,att09 ejp_att09
02:40:27  14  ,att10 ejp_att10
02:40:27  15  ,att11 ejp_att11
02:40:27  16  ,att12 ejp_att12
02:40:27  17  ,att13 ejp_att13
02:40:27  18  ,att14 ejp_att14
02:40:27  19  ,att15 ejp_att15
02:40:27  20  ,att16 ejp_att16
02:40:27  21  ,att17 ejp_att17
02:40:27  22  ,att18 ejp_att18
02:40:27  23  ,att19 ejp_att19
02:40:27  24  ,att20 ejp_att20
02:40:27  25  ,att21 ejp_att21
02:40:27  26  ,att22 ejp_att22
02:40:27  27  ,att23 ejp_att23
02:40:27  28  ,att24 ejp_att24
02:40:27  29  ,att25 ejp_att25
02:40:27  30  ,att26 ejp_att26
02:40:27  31  ,att27 ejp_att27
02:40:27  32  ,att28 ejp_att28
02:40:27  33  ,att29 ejp_att29
02:40:27  34  ,att30 ejp_att30
02:40:27  35  ,att31 ejp_att31
02:40:27  36  ,att32 ejp_att32
02:40:27  37  ,att33 ejp_att33
02:40:27  38  ,att34 ejp_att34
02:40:27  39  ,att35 ejp_att35
02:40:27  40  ,att36 ejp_att36
02:40:27  41  ,att37 ejp_att37
02:40:27  42  FROM svm6162
02:40:27  43  /

Table created.

Elapsed: 00:00:00.17
02:40:27 SQL> 
02:40:27 SQL> ANALYZE TABLE ejp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
02:40:27 SQL> 
02:40:27 SQL> -- rpt
02:40:27 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19254

Elapsed: 00:00:00.81
02:40:28 SQL> SELECT COUNT(*)FROM ejp_att;

  COUNT(*)
----------
     19254

Elapsed: 00:00:00.00
02:40:28 SQL> 
02:40:28 SQL> --
02:40:28 SQL> -- ajp610.sql
02:40:28 SQL> --
02:40:28 SQL> 
02:40:28 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:40:28 SQL> 
02:40:28 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.45
02:40:29 SQL> 
02:40:29 SQL> -- I created di5min here:
02:40:29 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:40:29 SQL> 
02:40:29 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:40:29   2  SELECT
02:40:29   3  pair
02:40:29   4  ,ydate
02:40:29   5  ,prdate
02:40:29   6  ,rownum rnum -- acts as t in my time-series
02:40:29   7  ,clse
02:40:29   8  -- Derive a bunch of attributes from clse, the latest price:
02:40:29   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:40:29  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:40:29  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:40:29  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:40:29  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:40:29  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:40:29  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:40:29  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:40:29  17  --
02:40:29  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:40:29  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:40:29  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:40:29  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:40:29  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:40:29  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:40:29  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:40:29  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:40:29  26  --
02:40:29  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:40:29  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:40:29  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:40:29  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:40:29  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:40:29  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:40:29  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:40:29  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:40:29  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:40:29  36  FROM di5min WHERE pair LIKE'%ajp%'
02:40:29  37  AND ydate > sysdate - 95
02:40:29  38  ORDER BY ydate
02:40:29  39  /

View created.

Elapsed: 00:00:00.06
02:40:29 SQL> 
02:40:29 SQL> -- rpt
02:40:29 SQL> 
02:40:29 SQL> SELECT
02:40:29   2  pair
02:40:29   3  ,COUNT(pair)
02:40:29   4  ,MIN(clse),MAX(clse)
02:40:29   5  ,MIN(avg6),MAX(avg6)
02:40:29   6  ,MIN(ydate),MAX(ydate)
02:40:29   7  FROM svm6102
02:40:29   8  GROUP BY pair
02:40:29   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ajp_usd       19251  78.249976 83.6669853 78.5106193  83.546306 2010-09-30 02:45:01 2011-01-03 02:30:00

Elapsed: 00:00:00.75
02:40:29 SQL> 
02:40:29 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:40:29 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.22
02:40:30 SQL> CREATE TABLE svm6122 COMPRESS AS
02:40:30   2  SELECT
02:40:30   3  pair
02:40:30   4  ,ydate
02:40:30   5  ,prdate
02:40:30   6  ,clse
02:40:30   7  -- g6 is important. I want to predict g6:
02:40:30   8  ,ld6 - clse g6
02:40:30   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:40:30  10  -- I want more attributes from the ones I derived above:
02:40:30  11  -- clse relation to moving-min
02:40:30  12  ,clse-min4  cm4
02:40:30  13  ,clse-min6  cm6
02:40:30  14  ,clse-min8  cm8
02:40:30  15  ,clse-min10 cm10
02:40:30  16  ,clse-min12 cm12
02:40:30  17  ,clse-min14 cm14
02:40:30  18  ,clse-min16 cm16
02:40:30  19  ,clse-min18 cm18
02:40:30  20  -- clse relation to moving-avg
02:40:30  21  ,clse-avg4  ca4
02:40:30  22  ,clse-avg6  ca6
02:40:30  23  ,clse-avg8  ca8
02:40:30  24  ,clse-avg10 ca10
02:40:30  25  ,clse-avg12 ca12
02:40:30  26  ,clse-avg14 ca14
02:40:30  27  ,clse-avg16 ca16
02:40:30  28  ,clse-avg18 ca18
02:40:30  29  -- clse relation to moving-max
02:40:30  30  ,clse-max4  cx4
02:40:30  31  ,clse-max6  cx6
02:40:30  32  ,clse-max8  cx8
02:40:30  33  ,clse-max10 cx10
02:40:30  34  ,clse-max12 cx12
02:40:30  35  ,clse-max14 cx14
02:40:30  36  ,clse-max16 cx16
02:40:30  37  ,clse-max18 cx18
02:40:30  38  -- Derive more attributes.
02:40:30  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:40:30  40  -- But COVAR_POP is more stable:
02:40:30  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:40:30  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:40:30  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:40:30  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:40:30  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:40:30  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:40:30  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:40:30  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:40:30  49  -- Derive date related attributes:
02:40:30  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:40:30  51  ,0+TO_CHAR(ydate,'D')d
02:40:30  52  ,0+TO_CHAR(ydate,'W')w
02:40:30  53  -- mpm stands for minutes-past-midnight:
02:40:30  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:40:30  55  -- mph stands for minutes-past-hour:
02:40:30  56  ,0+TO_CHAR(ydate,'MI')mph
02:40:30  57  FROM svm6102
02:40:30  58  ORDER BY ydate
02:40:30  59  /

Table created.

Elapsed: 00:00:01.96
02:40:32 SQL> 
02:40:32 SQL> -- rpt
02:40:32 SQL> 
02:40:32 SQL> SELECT
02:40:32   2  pair
02:40:32   3  ,COUNT(pair)
02:40:32   4  ,MIN(clse),MAX(clse)
02:40:32   5  ,MIN(ydate),MAX(ydate)
02:40:32   6  FROM svm6122
02:40:32   7  GROUP BY pair
02:40:32   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ajp_usd       19251  78.249976 83.6669853 2010-09-30 02:45:01 2011-01-03 02:30:00

Elapsed: 00:00:00.06
02:40:32 SQL> 
02:40:32 SQL> -- Prepare for derivation of NTILE based params:
02:40:32 SQL> 
02:40:32 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
02:40:32 SQL> CREATE TABLE svm6142 COMPRESS AS
02:40:32   2  SELECT
02:40:32   3  pair
02:40:32   4  ,ydate
02:40:32   5  ,prdate
02:40:32   6  ,clse
02:40:32   7  ,g6
02:40:32   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:40:32   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:40:32  10  ,CASE WHEN trend IS NULL THEN 1
02:40:32  11  	    WHEN trend =0      THEN 1
02:40:32  12  	    ELSE trend END trend
02:40:32  13  ,cm4
02:40:32  14  ,cm6
02:40:32  15  ,cm8
02:40:32  16  ,cm10
02:40:32  17  ,cm12
02:40:32  18  ,cm14
02:40:32  19  ,cm16
02:40:32  20  ,cm18
02:40:32  21  --
02:40:32  22  ,ca4
02:40:32  23  ,ca6
02:40:32  24  ,ca8
02:40:32  25  ,ca10
02:40:32  26  ,ca12
02:40:32  27  ,ca14
02:40:32  28  ,ca16
02:40:32  29  ,ca18
02:40:32  30  --
02:40:32  31  ,cx4
02:40:32  32  ,cx6
02:40:32  33  ,cx8
02:40:32  34  ,cx10
02:40:32  35  ,cx12
02:40:32  36  ,cx14
02:40:32  37  ,cx16
02:40:32  38  ,cx18
02:40:32  39  --
02:40:32  40  ,crr4
02:40:32  41  ,crr6
02:40:32  42  ,crr8
02:40:32  43  ,crr10
02:40:32  44  ,crr12
02:40:32  45  ,crr14
02:40:32  46  ,crr16
02:40:32  47  ,crr18
02:40:32  48  --
02:40:32  49  ,hh
02:40:32  50  ,d
02:40:32  51  ,w
02:40:32  52  ,mpm
02:40:32  53  ,mph
02:40:32  54  FROM svm6122
02:40:32  55  ORDER BY ydate
02:40:32  56  /

Table created.

Elapsed: 00:00:00.38
02:40:32 SQL> 
02:40:32 SQL> -- rpt
02:40:32 SQL> 
02:40:32 SQL> SELECT
02:40:32   2  pair
02:40:32   3  ,trend
02:40:32   4  ,gatt
02:40:32   5  ,COUNT(pair)
02:40:32   6  ,AVG(g6)
02:40:32   7  FROM svm6142
02:40:32   8  GROUP BY pair,trend,gatt
02:40:32   9  ORDER BY pair,trend,gatt
02:40:32  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4049 -.22823356
ajp_usd 	-1 up	      5147 .222122742
ajp_usd 	-1		51
ajp_usd 	 1 nup	      5202 -.20027706
ajp_usd 	 1 up	      4781 .205574965
ajp_usd 	 1		21

6 rows selected.

Elapsed: 00:00:00.04
02:40:32 SQL> 
02:40:32 SQL> 
02:40:32 SQL> -- Derive NTILE based params:
02:40:32 SQL> 
02:40:32 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.14
02:40:32 SQL> CREATE TABLE svm6162 COMPRESS AS
02:40:32   2  SELECT
02:40:32   3  pair
02:40:32   4  ,ydate
02:40:32   5  ,prdate
02:40:32   6  ,clse
02:40:32   7  ,g6
02:40:32   8  ,gatt
02:40:32   9  ,gattn
02:40:32  10  ,trend
02:40:32  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:40:32  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:40:32  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:40:32  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:40:32  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:40:32  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:40:32  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:40:32  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:40:32  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:40:32  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:40:32  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:40:32  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:40:32  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:40:32  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:40:32  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:40:32  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:40:32  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:40:32  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:40:32  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:40:32  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:40:32  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:40:32  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:40:32  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:40:32  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:40:32  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:40:32  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:40:32  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:40:32  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:40:32  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:40:32  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:40:32  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:40:32  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:40:32  43  ,hh  att32
02:40:32  44  ,d   att33
02:40:32  45  ,w   att34
02:40:32  46  ,mpm att35
02:40:32  47  ,mph att36
02:40:32  48  ,trend att37
02:40:32  49  FROM svm6142
02:40:32  50  ORDER BY ydate
02:40:32  51  /

Table created.

Elapsed: 00:00:04.82
02:40:37 SQL> 
02:40:37 SQL> -- rpt
02:40:37 SQL> 
02:40:37 SQL> SELECT
02:40:37   2  pair
02:40:37   3  ,trend
02:40:37   4  ,gatt
02:40:37   5  ,COUNT(pair)
02:40:37   6  ,AVG(g6)
02:40:37   7  FROM svm6162
02:40:37   8  GROUP BY pair,trend,gatt
02:40:37   9  ORDER BY pair,trend,gatt
02:40:37  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4049 -.22823356
ajp_usd 	-1 up	      5147 .222122742
ajp_usd 	-1		51
ajp_usd 	 1 nup	      5202 -.20027706
ajp_usd 	 1 up	      4781 .205574965
ajp_usd 	 1		21

6 rows selected.

Elapsed: 00:00:00.04
02:40:37 SQL> 
02:40:37 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.11
02:40:37 SQL> CREATE TABLE modsrc COMPRESS AS
02:40:37   2  SELECT
02:40:37   3  pair
02:40:37   4  ,ydate
02:40:37   5  ,prdate
02:40:37   6  ,trend
02:40:37   7  ,g6
02:40:37   8  ,gatt
02:40:37   9  ,gattn
02:40:37  10  FROM svm6162
02:40:37  11  /

Table created.

Elapsed: 00:00:00.08
02:40:37 SQL> 
02:40:37 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
02:40:38 SQL> 
02:40:38 SQL> DROP   TABLE ajp_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
02:40:38 SQL> CREATE TABLE ajp_ms610 COMPRESS AS
02:40:38   2  SELECT
02:40:38   3  ydate
02:40:38   4  ,trend ajp_trend
02:40:38   5  ,g6    ajp_g6
02:40:38   6  ,gatt  ajp_gatt
02:40:38   7  ,gattn ajp_gattn
02:40:38   8  FROM modsrc
02:40:38   9  /

Table created.

Elapsed: 00:00:00.07
02:40:38 SQL> 
02:40:38 SQL> ANALYZE TABLE ajp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
02:40:38 SQL> 
02:40:38 SQL> -- I need a copy of the attributes:
02:40:38 SQL> 
02:40:38 SQL> 
02:40:38 SQL> DROP   TABLE ajp_att;

Table dropped.

Elapsed: 00:00:00.05
02:40:38 SQL> CREATE TABLE ajp_att COMPRESS AS
02:40:38   2  SELECT
02:40:38   3  ydate
02:40:38   4  ,att00 ajp_att00
02:40:38   5  ,att01 ajp_att01
02:40:38   6  ,att02 ajp_att02
02:40:38   7  ,att03 ajp_att03
02:40:38   8  ,att04 ajp_att04
02:40:38   9  ,att05 ajp_att05
02:40:38  10  ,att06 ajp_att06
02:40:38  11  ,att07 ajp_att07
02:40:38  12  ,att08 ajp_att08
02:40:38  13  ,att09 ajp_att09
02:40:38  14  ,att10 ajp_att10
02:40:38  15  ,att11 ajp_att11
02:40:38  16  ,att12 ajp_att12
02:40:38  17  ,att13 ajp_att13
02:40:38  18  ,att14 ajp_att14
02:40:38  19  ,att15 ajp_att15
02:40:38  20  ,att16 ajp_att16
02:40:38  21  ,att17 ajp_att17
02:40:38  22  ,att18 ajp_att18
02:40:38  23  ,att19 ajp_att19
02:40:38  24  ,att20 ajp_att20
02:40:38  25  ,att21 ajp_att21
02:40:38  26  ,att22 ajp_att22
02:40:38  27  ,att23 ajp_att23
02:40:38  28  ,att24 ajp_att24
02:40:38  29  ,att25 ajp_att25
02:40:38  30  ,att26 ajp_att26
02:40:38  31  ,att27 ajp_att27
02:40:38  32  ,att28 ajp_att28
02:40:38  33  ,att29 ajp_att29
02:40:38  34  ,att30 ajp_att30
02:40:38  35  ,att31 ajp_att31
02:40:38  36  ,att32 ajp_att32
02:40:38  37  ,att33 ajp_att33
02:40:38  38  ,att34 ajp_att34
02:40:38  39  ,att35 ajp_att35
02:40:38  40  ,att36 ajp_att36
02:40:38  41  ,att37 ajp_att37
02:40:38  42  FROM svm6162
02:40:38  43  /

Table created.

Elapsed: 00:00:00.17
02:40:38 SQL> 
02:40:38 SQL> ANALYZE TABLE ajp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
02:40:39 SQL> 
02:40:39 SQL> -- rpt
02:40:39 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19251

Elapsed: 00:00:00.76
02:40:39 SQL> SELECT COUNT(*)FROM ajp_att;

  COUNT(*)
----------
     19251

Elapsed: 00:00:00.01
02:40:39 SQL> 
02:40:39 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
