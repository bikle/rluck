
SQL*Plus: Release 11.2.0.1.0 Production on Mon Jan 3 22:58:13 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

22:58:13 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
22:58:13 SQL> 22:58:13 SQL> --
22:58:13 SQL> -- eur610.sql
22:58:13 SQL> --
22:58:13 SQL> 
22:58:13 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:58:13 SQL> 
22:58:13 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.02
22:58:13 SQL> 
22:58:13 SQL> -- I created di5min here:
22:58:13 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:58:13 SQL> 
22:58:13 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:58:13   2  SELECT
22:58:13   3  pair
22:58:13   4  ,ydate
22:58:13   5  ,prdate
22:58:13   6  ,rownum rnum -- acts as t in my time-series
22:58:13   7  ,clse
22:58:13   8  -- Derive a bunch of attributes from clse, the latest price:
22:58:13   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:58:13  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:58:13  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:58:13  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:58:13  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:58:13  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:58:13  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:58:13  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:58:13  17  --
22:58:13  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:58:13  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:58:13  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:58:13  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:58:13  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:58:13  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:58:13  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:58:13  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:58:13  26  --
22:58:13  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:58:13  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:58:13  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:58:13  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:58:13  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:58:13  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:58:13  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:58:13  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:58:13  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:58:13  36  FROM di5min WHERE pair LIKE'%eur%'
22:58:13  37  AND ydate > sysdate - 95
22:58:13  38  ORDER BY ydate
22:58:13  39  /

View created.

Elapsed: 00:00:00.05
22:58:13 SQL> 
22:58:13 SQL> -- rpt
22:58:13 SQL> 
22:58:13 SQL> SELECT
22:58:13   2  pair
22:58:13   3  ,COUNT(pair)
22:58:13   4  ,MIN(clse),MAX(clse)
22:58:13   5  ,MIN(avg6),MAX(avg6)
22:58:13   6  ,MIN(ydate),MAX(ydate)
22:58:13   7  FROM svm6102
22:58:13   8  GROUP BY pair
22:58:13   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19256    1.29735	   1.4273 1.29875103 1.42436233 2010-09-30 23:00:01 2011-01-03 22:50:00

Elapsed: 00:00:00.91
22:58:14 SQL> 
22:58:14 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:58:14 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.07
22:58:14 SQL> CREATE TABLE svm6122 COMPRESS AS
22:58:14   2  SELECT
22:58:14   3  pair
22:58:14   4  ,ydate
22:58:14   5  ,prdate
22:58:14   6  ,clse
22:58:14   7  -- g6 is important. I want to predict g6:
22:58:14   8  ,ld6 - clse g6
22:58:14   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:58:14  10  -- I want more attributes from the ones I derived above:
22:58:14  11  -- clse relation to moving-min
22:58:14  12  ,clse-min4  cm4
22:58:14  13  ,clse-min6  cm6
22:58:14  14  ,clse-min8  cm8
22:58:14  15  ,clse-min10 cm10
22:58:14  16  ,clse-min12 cm12
22:58:14  17  ,clse-min14 cm14
22:58:14  18  ,clse-min16 cm16
22:58:14  19  ,clse-min18 cm18
22:58:14  20  -- clse relation to moving-avg
22:58:14  21  ,clse-avg4  ca4
22:58:14  22  ,clse-avg6  ca6
22:58:14  23  ,clse-avg8  ca8
22:58:14  24  ,clse-avg10 ca10
22:58:14  25  ,clse-avg12 ca12
22:58:14  26  ,clse-avg14 ca14
22:58:14  27  ,clse-avg16 ca16
22:58:14  28  ,clse-avg18 ca18
22:58:14  29  -- clse relation to moving-max
22:58:14  30  ,clse-max4  cx4
22:58:14  31  ,clse-max6  cx6
22:58:14  32  ,clse-max8  cx8
22:58:14  33  ,clse-max10 cx10
22:58:14  34  ,clse-max12 cx12
22:58:14  35  ,clse-max14 cx14
22:58:14  36  ,clse-max16 cx16
22:58:14  37  ,clse-max18 cx18
22:58:14  38  -- Derive more attributes.
22:58:14  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:58:14  40  -- But COVAR_POP is more stable:
22:58:14  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:58:14  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:58:14  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:58:14  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:58:14  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:58:14  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:58:14  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:58:14  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:58:14  49  -- Derive date related attributes:
22:58:14  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:58:14  51  ,0+TO_CHAR(ydate,'D')d
22:58:14  52  ,0+TO_CHAR(ydate,'W')w
22:58:14  53  -- mpm stands for minutes-past-midnight:
22:58:14  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:58:14  55  -- mph stands for minutes-past-hour:
22:58:14  56  ,0+TO_CHAR(ydate,'MI')mph
22:58:14  57  FROM svm6102
22:58:14  58  ORDER BY ydate
22:58:14  59  /

Table created.

Elapsed: 00:00:02.40
22:58:16 SQL> 
22:58:16 SQL> -- rpt
22:58:16 SQL> 
22:58:16 SQL> SELECT
22:58:16   2  pair
22:58:16   3  ,COUNT(pair)
22:58:16   4  ,MIN(clse),MAX(clse)
22:58:16   5  ,MIN(ydate),MAX(ydate)
22:58:16   6  FROM svm6122
22:58:16   7  GROUP BY pair
22:58:16   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19256    1.29735	   1.4273 2010-09-30 23:00:01 2011-01-03 22:50:00

Elapsed: 00:00:00.05
22:58:16 SQL> 
22:58:16 SQL> -- Prepare for derivation of NTILE based params:
22:58:16 SQL> 
22:58:16 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.54
22:58:17 SQL> CREATE TABLE svm6142 COMPRESS AS
22:58:17   2  SELECT
22:58:17   3  pair
22:58:17   4  ,ydate
22:58:17   5  ,prdate
22:58:17   6  ,clse
22:58:17   7  ,g6
22:58:17   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:58:17   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:58:17  10  ,CASE WHEN trend IS NULL THEN 1
22:58:17  11  	    WHEN trend =0      THEN 1
22:58:17  12  	    ELSE trend END trend
22:58:17  13  ,cm4
22:58:17  14  ,cm6
22:58:17  15  ,cm8
22:58:17  16  ,cm10
22:58:17  17  ,cm12
22:58:17  18  ,cm14
22:58:17  19  ,cm16
22:58:17  20  ,cm18
22:58:17  21  --
22:58:17  22  ,ca4
22:58:17  23  ,ca6
22:58:17  24  ,ca8
22:58:17  25  ,ca10
22:58:17  26  ,ca12
22:58:17  27  ,ca14
22:58:17  28  ,ca16
22:58:17  29  ,ca18
22:58:17  30  --
22:58:17  31  ,cx4
22:58:17  32  ,cx6
22:58:17  33  ,cx8
22:58:17  34  ,cx10
22:58:17  35  ,cx12
22:58:17  36  ,cx14
22:58:17  37  ,cx16
22:58:17  38  ,cx18
22:58:17  39  --
22:58:17  40  ,crr4
22:58:17  41  ,crr6
22:58:17  42  ,crr8
22:58:17  43  ,crr10
22:58:17  44  ,crr12
22:58:17  45  ,crr14
22:58:17  46  ,crr16
22:58:17  47  ,crr18
22:58:17  48  --
22:58:17  49  ,hh
22:58:17  50  ,d
22:58:17  51  ,w
22:58:17  52  ,mpm
22:58:17  53  ,mph
22:58:17  54  FROM svm6122
22:58:17  55  ORDER BY ydate
22:58:17  56  /

Table created.

Elapsed: 00:00:00.37
22:58:17 SQL> 
22:58:17 SQL> -- rpt
22:58:17 SQL> 
22:58:17 SQL> SELECT
22:58:17   2  pair
22:58:17   3  ,trend
22:58:17   4  ,gatt
22:58:17   5  ,COUNT(pair)
22:58:17   6  ,AVG(g6)
22:58:17   7  FROM svm6142
22:58:17   8  GROUP BY pair,trend,gatt
22:58:17   9  ORDER BY pair,trend,gatt
22:58:17  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6013 -.00315159
eur_usd 	-1 up	      3529 .004475128
eur_usd 	-1		 7
eur_usd 	 1 nup	      5790 -.00317114
eur_usd 	 1 up	      3852 .005057308
eur_usd 	 1		65

6 rows selected.

Elapsed: 00:00:00.04
22:58:17 SQL> 
22:58:17 SQL> 
22:58:17 SQL> -- Derive NTILE based params:
22:58:17 SQL> 
22:58:17 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.58
22:58:18 SQL> CREATE TABLE svm6162 COMPRESS AS
22:58:18   2  SELECT
22:58:18   3  pair
22:58:18   4  ,ydate
22:58:18   5  ,prdate
22:58:18   6  ,clse
22:58:18   7  ,g6
22:58:18   8  ,gatt
22:58:18   9  ,gattn
22:58:18  10  ,trend
22:58:18  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:58:18  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:58:18  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:58:18  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:58:18  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:58:18  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:58:18  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:58:18  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:58:18  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:58:18  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:58:18  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:58:18  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:58:18  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:58:18  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:58:18  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:58:18  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:58:18  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:58:18  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:58:18  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:58:18  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:58:18  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:58:18  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:58:18  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:58:18  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:58:18  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:58:18  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:58:18  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:58:18  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:58:18  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:58:18  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:58:18  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:58:18  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:58:18  43  ,hh  att32
22:58:18  44  ,d   att33
22:58:18  45  ,w   att34
22:58:18  46  ,mpm att35
22:58:18  47  ,mph att36
22:58:18  48  ,trend att37
22:58:18  49  FROM svm6142
22:58:18  50  ORDER BY ydate
22:58:18  51  /

Table created.

Elapsed: 00:00:04.64
22:58:23 SQL> 
22:58:23 SQL> -- rpt
22:58:23 SQL> 
22:58:23 SQL> SELECT
22:58:23   2  pair
22:58:23   3  ,trend
22:58:23   4  ,gatt
22:58:23   5  ,COUNT(pair)
22:58:23   6  ,AVG(g6)
22:58:23   7  FROM svm6162
22:58:23   8  GROUP BY pair,trend,gatt
22:58:23   9  ORDER BY pair,trend,gatt
22:58:23  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6013 -.00315159
eur_usd 	-1 up	      3529 .004475128
eur_usd 	-1		 7
eur_usd 	 1 nup	      5790 -.00317114
eur_usd 	 1 up	      3852 .005057308
eur_usd 	 1		65

6 rows selected.

Elapsed: 00:00:00.03
22:58:23 SQL> 
22:58:23 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.08
22:58:23 SQL> CREATE TABLE modsrc COMPRESS AS
22:58:23   2  SELECT
22:58:23   3  pair
22:58:23   4  ,ydate
22:58:23   5  ,prdate
22:58:23   6  ,trend
22:58:23   7  ,g6
22:58:23   8  ,gatt
22:58:23   9  ,gattn
22:58:23  10  FROM svm6162
22:58:23  11  /

Table created.

Elapsed: 00:00:00.11
22:58:23 SQL> 
22:58:23 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
22:58:23 SQL> 
22:58:23 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
22:58:23 SQL> CREATE TABLE eur_ms610 COMPRESS AS
22:58:23   2  SELECT
22:58:23   3  ydate
22:58:23   4  ,trend eur_trend
22:58:23   5  ,g6    eur_g6
22:58:23   6  ,gatt  eur_gatt
22:58:23   7  ,gattn eur_gattn
22:58:23   8  FROM modsrc
22:58:23   9  /

Table created.

Elapsed: 00:00:00.07
22:58:23 SQL> 
22:58:23 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
22:58:23 SQL> 
22:58:23 SQL> -- I need a copy of the attributes:
22:58:23 SQL> 
22:58:23 SQL> 
22:58:23 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.19
22:58:23 SQL> CREATE TABLE eur_att COMPRESS AS
22:58:23   2  SELECT
22:58:23   3  ydate
22:58:23   4  ,att00 eur_att00
22:58:23   5  ,att01 eur_att01
22:58:23   6  ,att02 eur_att02
22:58:23   7  ,att03 eur_att03
22:58:23   8  ,att04 eur_att04
22:58:23   9  ,att05 eur_att05
22:58:23  10  ,att06 eur_att06
22:58:23  11  ,att07 eur_att07
22:58:23  12  ,att08 eur_att08
22:58:23  13  ,att09 eur_att09
22:58:23  14  ,att10 eur_att10
22:58:23  15  ,att11 eur_att11
22:58:23  16  ,att12 eur_att12
22:58:23  17  ,att13 eur_att13
22:58:23  18  ,att14 eur_att14
22:58:23  19  ,att15 eur_att15
22:58:23  20  ,att16 eur_att16
22:58:23  21  ,att17 eur_att17
22:58:23  22  ,att18 eur_att18
22:58:23  23  ,att19 eur_att19
22:58:23  24  ,att20 eur_att20
22:58:23  25  ,att21 eur_att21
22:58:23  26  ,att22 eur_att22
22:58:23  27  ,att23 eur_att23
22:58:23  28  ,att24 eur_att24
22:58:23  29  ,att25 eur_att25
22:58:23  30  ,att26 eur_att26
22:58:23  31  ,att27 eur_att27
22:58:23  32  ,att28 eur_att28
22:58:23  33  ,att29 eur_att29
22:58:23  34  ,att30 eur_att30
22:58:23  35  ,att31 eur_att31
22:58:23  36  ,att32 eur_att32
22:58:23  37  ,att33 eur_att33
22:58:23  38  ,att34 eur_att34
22:58:23  39  ,att35 eur_att35
22:58:23  40  ,att36 eur_att36
22:58:23  41  ,att37 eur_att37
22:58:23  42  FROM svm6162
22:58:23  43  /

Table created.

Elapsed: 00:00:00.17
22:58:24 SQL> 
22:58:24 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.51
22:58:24 SQL> 
22:58:24 SQL> -- rpt
22:58:24 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.88
22:58:25 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.00
22:58:25 SQL> 
22:58:25 SQL> --
22:58:25 SQL> -- aud610.sql
22:58:25 SQL> --
22:58:25 SQL> 
22:58:25 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:58:25 SQL> 
22:58:25 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.72
22:58:26 SQL> 
22:58:26 SQL> -- I created di5min here:
22:58:26 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:58:26 SQL> 
22:58:26 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:58:26   2  SELECT
22:58:26   3  pair
22:58:26   4  ,ydate
22:58:26   5  ,prdate
22:58:26   6  ,rownum rnum -- acts as t in my time-series
22:58:26   7  ,clse
22:58:26   8  -- Derive a bunch of attributes from clse, the latest price:
22:58:26   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:58:26  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:58:26  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:58:26  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:58:26  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:58:26  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:58:26  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:58:26  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:58:26  17  --
22:58:26  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:58:26  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:58:26  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:58:26  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:58:26  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:58:26  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:58:26  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:58:26  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:58:26  26  --
22:58:26  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:58:26  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:58:26  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:58:26  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:58:26  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:58:26  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:58:26  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:58:26  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:58:26  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:58:26  36  FROM di5min WHERE pair LIKE'%aud%'
22:58:26  37  AND ydate > sysdate - 95
22:58:26  38  ORDER BY ydate
22:58:26  39  /

View created.

Elapsed: 00:00:00.12
22:58:26 SQL> 
22:58:26 SQL> -- rpt
22:58:26 SQL> 
22:58:26 SQL> SELECT
22:58:26   2  pair
22:58:26   3  ,COUNT(pair)
22:58:26   4  ,MIN(clse),MAX(clse)
22:58:26   5  ,MIN(avg6),MAX(avg6)
22:58:26   6  ,MIN(ydate),MAX(ydate)
22:58:26   7  FROM svm6102
22:58:26   8  GROUP BY pair
22:58:26   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19253	.95405	  1.02495 .957141438 1.02284247 2010-09-30 23:00:01 2011-01-03 22:50:00

Elapsed: 00:00:00.86
22:58:27 SQL> 
22:58:27 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:58:27 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.18
22:58:27 SQL> CREATE TABLE svm6122 COMPRESS AS
22:58:27   2  SELECT
22:58:27   3  pair
22:58:27   4  ,ydate
22:58:27   5  ,prdate
22:58:27   6  ,clse
22:58:27   7  -- g6 is important. I want to predict g6:
22:58:27   8  ,ld6 - clse g6
22:58:27   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:58:27  10  -- I want more attributes from the ones I derived above:
22:58:27  11  -- clse relation to moving-min
22:58:27  12  ,clse-min4  cm4
22:58:27  13  ,clse-min6  cm6
22:58:27  14  ,clse-min8  cm8
22:58:27  15  ,clse-min10 cm10
22:58:27  16  ,clse-min12 cm12
22:58:27  17  ,clse-min14 cm14
22:58:27  18  ,clse-min16 cm16
22:58:27  19  ,clse-min18 cm18
22:58:27  20  -- clse relation to moving-avg
22:58:27  21  ,clse-avg4  ca4
22:58:27  22  ,clse-avg6  ca6
22:58:27  23  ,clse-avg8  ca8
22:58:27  24  ,clse-avg10 ca10
22:58:27  25  ,clse-avg12 ca12
22:58:27  26  ,clse-avg14 ca14
22:58:27  27  ,clse-avg16 ca16
22:58:27  28  ,clse-avg18 ca18
22:58:27  29  -- clse relation to moving-max
22:58:27  30  ,clse-max4  cx4
22:58:27  31  ,clse-max6  cx6
22:58:27  32  ,clse-max8  cx8
22:58:27  33  ,clse-max10 cx10
22:58:27  34  ,clse-max12 cx12
22:58:27  35  ,clse-max14 cx14
22:58:27  36  ,clse-max16 cx16
22:58:27  37  ,clse-max18 cx18
22:58:27  38  -- Derive more attributes.
22:58:27  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:58:27  40  -- But COVAR_POP is more stable:
22:58:27  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:58:27  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:58:27  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:58:27  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:58:27  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:58:27  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:58:27  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:58:27  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:58:27  49  -- Derive date related attributes:
22:58:27  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:58:27  51  ,0+TO_CHAR(ydate,'D')d
22:58:27  52  ,0+TO_CHAR(ydate,'W')w
22:58:27  53  -- mpm stands for minutes-past-midnight:
22:58:27  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:58:27  55  -- mph stands for minutes-past-hour:
22:58:27  56  ,0+TO_CHAR(ydate,'MI')mph
22:58:27  57  FROM svm6102
22:58:27  58  ORDER BY ydate
22:58:27  59  /

Table created.

Elapsed: 00:00:02.02
22:58:29 SQL> 
22:58:29 SQL> -- rpt
22:58:29 SQL> 
22:58:29 SQL> SELECT
22:58:29   2  pair
22:58:29   3  ,COUNT(pair)
22:58:29   4  ,MIN(clse),MAX(clse)
22:58:29   5  ,MIN(ydate),MAX(ydate)
22:58:29   6  FROM svm6122
22:58:29   7  GROUP BY pair
22:58:29   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19253	.95405	  1.02495 2010-09-30 23:00:01 2011-01-03 22:50:00

Elapsed: 00:00:00.04
22:58:29 SQL> 
22:58:29 SQL> -- Prepare for derivation of NTILE based params:
22:58:29 SQL> 
22:58:29 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.19
22:58:29 SQL> CREATE TABLE svm6142 COMPRESS AS
22:58:29   2  SELECT
22:58:29   3  pair
22:58:29   4  ,ydate
22:58:29   5  ,prdate
22:58:29   6  ,clse
22:58:29   7  ,g6
22:58:29   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:58:29   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:58:29  10  ,CASE WHEN trend IS NULL THEN 1
22:58:29  11  	    WHEN trend =0      THEN 1
22:58:29  12  	    ELSE trend END trend
22:58:29  13  ,cm4
22:58:29  14  ,cm6
22:58:29  15  ,cm8
22:58:29  16  ,cm10
22:58:29  17  ,cm12
22:58:29  18  ,cm14
22:58:29  19  ,cm16
22:58:29  20  ,cm18
22:58:29  21  --
22:58:29  22  ,ca4
22:58:29  23  ,ca6
22:58:29  24  ,ca8
22:58:29  25  ,ca10
22:58:29  26  ,ca12
22:58:29  27  ,ca14
22:58:29  28  ,ca16
22:58:29  29  ,ca18
22:58:29  30  --
22:58:29  31  ,cx4
22:58:29  32  ,cx6
22:58:29  33  ,cx8
22:58:29  34  ,cx10
22:58:29  35  ,cx12
22:58:29  36  ,cx14
22:58:29  37  ,cx16
22:58:29  38  ,cx18
22:58:29  39  --
22:58:29  40  ,crr4
22:58:29  41  ,crr6
22:58:29  42  ,crr8
22:58:29  43  ,crr10
22:58:29  44  ,crr12
22:58:29  45  ,crr14
22:58:29  46  ,crr16
22:58:29  47  ,crr18
22:58:29  48  --
22:58:29  49  ,hh
22:58:29  50  ,d
22:58:29  51  ,w
22:58:29  52  ,mpm
22:58:29  53  ,mph
22:58:29  54  FROM svm6122
22:58:29  55  ORDER BY ydate
22:58:29  56  /

Table created.

Elapsed: 00:00:00.36
22:58:30 SQL> 
22:58:30 SQL> -- rpt
22:58:30 SQL> 
22:58:30 SQL> SELECT
22:58:30   2  pair
22:58:30   3  ,trend
22:58:30   4  ,gatt
22:58:30   5  ,COUNT(pair)
22:58:30   6  ,AVG(g6)
22:58:30   7  FROM svm6142
22:58:30   8  GROUP BY pair,trend,gatt
22:58:30   9  ORDER BY pair,trend,gatt
22:58:30  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5139 -.00214198
aud_usd 	-1 up	      3687 .003768375
aud_usd 	-1		50
aud_usd 	 1 nup	      6709 -.00208131
aud_usd 	 1 up	      3646  .00404603
aud_usd 	 1		22

6 rows selected.

Elapsed: 00:00:00.04
22:58:30 SQL> 
22:58:30 SQL> 
22:58:30 SQL> -- Derive NTILE based params:
22:58:30 SQL> 
22:58:30 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
22:58:30 SQL> CREATE TABLE svm6162 COMPRESS AS
22:58:30   2  SELECT
22:58:30   3  pair
22:58:30   4  ,ydate
22:58:30   5  ,prdate
22:58:30   6  ,clse
22:58:30   7  ,g6
22:58:30   8  ,gatt
22:58:30   9  ,gattn
22:58:30  10  ,trend
22:58:30  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:58:30  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:58:30  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:58:30  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:58:30  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:58:30  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:58:30  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:58:30  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:58:30  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:58:30  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:58:30  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:58:30  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:58:30  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:58:30  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:58:30  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:58:30  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:58:30  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:58:30  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:58:30  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:58:30  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:58:30  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:58:30  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:58:30  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:58:30  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:58:30  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:58:30  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:58:30  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:58:30  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:58:30  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:58:30  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:58:30  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:58:30  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:58:30  43  ,hh  att32
22:58:30  44  ,d   att33
22:58:30  45  ,w   att34
22:58:30  46  ,mpm att35
22:58:30  47  ,mph att36
22:58:30  48  ,trend att37
22:58:30  49  FROM svm6142
22:58:30  50  ORDER BY ydate
22:58:30  51  /

Table created.

Elapsed: 00:00:04.71
22:58:34 SQL> 
22:58:34 SQL> -- rpt
22:58:34 SQL> 
22:58:34 SQL> SELECT
22:58:34   2  pair
22:58:34   3  ,trend
22:58:34   4  ,gatt
22:58:34   5  ,COUNT(pair)
22:58:34   6  ,AVG(g6)
22:58:34   7  FROM svm6162
22:58:34   8  GROUP BY pair,trend,gatt
22:58:34   9  ORDER BY pair,trend,gatt
22:58:34  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5139 -.00214198
aud_usd 	-1 up	      3687 .003768375
aud_usd 	-1		50
aud_usd 	 1 nup	      6709 -.00208131
aud_usd 	 1 up	      3646  .00404603
aud_usd 	 1		22

6 rows selected.

Elapsed: 00:00:00.03
22:58:34 SQL> 
22:58:34 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
22:58:35 SQL> CREATE TABLE modsrc COMPRESS AS
22:58:35   2  SELECT
22:58:35   3  pair
22:58:35   4  ,ydate
22:58:35   5  ,prdate
22:58:35   6  ,trend
22:58:35   7  ,g6
22:58:35   8  ,gatt
22:58:35   9  ,gattn
22:58:35  10  FROM svm6162
22:58:35  11  /

Table created.

Elapsed: 00:00:00.09
22:58:35 SQL> 
22:58:35 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
22:58:35 SQL> 
22:58:35 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
22:58:35 SQL> CREATE TABLE aud_ms610 COMPRESS AS
22:58:35   2  SELECT
22:58:35   3  ydate
22:58:35   4  ,trend aud_trend
22:58:35   5  ,g6    aud_g6
22:58:35   6  ,gatt  aud_gatt
22:58:35   7  ,gattn aud_gattn
22:58:35   8  FROM modsrc
22:58:35   9  /

Table created.

Elapsed: 00:00:00.07
22:58:35 SQL> 
22:58:35 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
22:58:35 SQL> 
22:58:35 SQL> -- I need a copy of the attributes:
22:58:35 SQL> 
22:58:35 SQL> 
22:58:35 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.05
22:58:35 SQL> CREATE TABLE aud_att COMPRESS AS
22:58:35   2  SELECT
22:58:35   3  ydate
22:58:35   4  ,att00 aud_att00
22:58:35   5  ,att01 aud_att01
22:58:35   6  ,att02 aud_att02
22:58:35   7  ,att03 aud_att03
22:58:35   8  ,att04 aud_att04
22:58:35   9  ,att05 aud_att05
22:58:35  10  ,att06 aud_att06
22:58:35  11  ,att07 aud_att07
22:58:35  12  ,att08 aud_att08
22:58:35  13  ,att09 aud_att09
22:58:35  14  ,att10 aud_att10
22:58:35  15  ,att11 aud_att11
22:58:35  16  ,att12 aud_att12
22:58:35  17  ,att13 aud_att13
22:58:35  18  ,att14 aud_att14
22:58:35  19  ,att15 aud_att15
22:58:35  20  ,att16 aud_att16
22:58:35  21  ,att17 aud_att17
22:58:35  22  ,att18 aud_att18
22:58:35  23  ,att19 aud_att19
22:58:35  24  ,att20 aud_att20
22:58:35  25  ,att21 aud_att21
22:58:35  26  ,att22 aud_att22
22:58:35  27  ,att23 aud_att23
22:58:35  28  ,att24 aud_att24
22:58:35  29  ,att25 aud_att25
22:58:35  30  ,att26 aud_att26
22:58:35  31  ,att27 aud_att27
22:58:35  32  ,att28 aud_att28
22:58:35  33  ,att29 aud_att29
22:58:35  34  ,att30 aud_att30
22:58:35  35  ,att31 aud_att31
22:58:35  36  ,att32 aud_att32
22:58:35  37  ,att33 aud_att33
22:58:35  38  ,att34 aud_att34
22:58:35  39  ,att35 aud_att35
22:58:35  40  ,att36 aud_att36
22:58:35  41  ,att37 aud_att37
22:58:35  42  FROM svm6162
22:58:35  43  /

Table created.

Elapsed: 00:00:00.15
22:58:35 SQL> 
22:58:35 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
22:58:36 SQL> 
22:58:36 SQL> -- rpt
22:58:36 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19253

Elapsed: 00:00:00.85
22:58:37 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19253

Elapsed: 00:00:00.01
22:58:37 SQL> 
22:58:37 SQL> --
22:58:37 SQL> -- gbp610.sql
22:58:37 SQL> --
22:58:37 SQL> 
22:58:37 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:58:37 SQL> 
22:58:37 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.42
22:58:37 SQL> 
22:58:37 SQL> -- I created di5min here:
22:58:37 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:58:37 SQL> 
22:58:37 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:58:37   2  SELECT
22:58:37   3  pair
22:58:37   4  ,ydate
22:58:37   5  ,prdate
22:58:37   6  ,rownum rnum -- acts as t in my time-series
22:58:37   7  ,clse
22:58:37   8  -- Derive a bunch of attributes from clse, the latest price:
22:58:37   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:58:37  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:58:37  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:58:37  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:58:37  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:58:37  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:58:37  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:58:37  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:58:37  17  --
22:58:37  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:58:37  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:58:37  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:58:37  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:58:37  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:58:37  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:58:37  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:58:37  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:58:37  26  --
22:58:37  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:58:37  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:58:37  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:58:37  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:58:37  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:58:37  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:58:37  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:58:37  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:58:37  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:58:37  36  FROM di5min WHERE pair LIKE'%gbp%'
22:58:37  37  AND ydate > sysdate - 95
22:58:37  38  ORDER BY ydate
22:58:37  39  /

View created.

Elapsed: 00:00:00.05
22:58:37 SQL> 
22:58:37 SQL> -- rpt
22:58:37 SQL> 
22:58:37 SQL> SELECT
22:58:37   2  pair
22:58:37   3  ,COUNT(pair)
22:58:37   4  ,MIN(clse),MAX(clse)
22:58:37   5  ,MIN(avg6),MAX(avg6)
22:58:37   6  ,MIN(ydate),MAX(ydate)
22:58:37   7  FROM svm6102
22:58:37   8  GROUP BY pair
22:58:37   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19255   1.535325	   1.6295 1.53696747 1.62716986 2010-09-30 23:00:01 2011-01-03 22:50:00

Elapsed: 00:00:00.88
22:58:38 SQL> 
22:58:38 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:58:38 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
22:58:38 SQL> CREATE TABLE svm6122 COMPRESS AS
22:58:38   2  SELECT
22:58:38   3  pair
22:58:38   4  ,ydate
22:58:38   5  ,prdate
22:58:38   6  ,clse
22:58:38   7  -- g6 is important. I want to predict g6:
22:58:38   8  ,ld6 - clse g6
22:58:38   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:58:38  10  -- I want more attributes from the ones I derived above:
22:58:38  11  -- clse relation to moving-min
22:58:38  12  ,clse-min4  cm4
22:58:38  13  ,clse-min6  cm6
22:58:38  14  ,clse-min8  cm8
22:58:38  15  ,clse-min10 cm10
22:58:38  16  ,clse-min12 cm12
22:58:38  17  ,clse-min14 cm14
22:58:38  18  ,clse-min16 cm16
22:58:38  19  ,clse-min18 cm18
22:58:38  20  -- clse relation to moving-avg
22:58:38  21  ,clse-avg4  ca4
22:58:38  22  ,clse-avg6  ca6
22:58:38  23  ,clse-avg8  ca8
22:58:38  24  ,clse-avg10 ca10
22:58:38  25  ,clse-avg12 ca12
22:58:38  26  ,clse-avg14 ca14
22:58:38  27  ,clse-avg16 ca16
22:58:38  28  ,clse-avg18 ca18
22:58:38  29  -- clse relation to moving-max
22:58:38  30  ,clse-max4  cx4
22:58:38  31  ,clse-max6  cx6
22:58:38  32  ,clse-max8  cx8
22:58:38  33  ,clse-max10 cx10
22:58:38  34  ,clse-max12 cx12
22:58:38  35  ,clse-max14 cx14
22:58:38  36  ,clse-max16 cx16
22:58:38  37  ,clse-max18 cx18
22:58:38  38  -- Derive more attributes.
22:58:38  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:58:38  40  -- But COVAR_POP is more stable:
22:58:38  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:58:38  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:58:38  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:58:38  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:58:38  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:58:38  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:58:38  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:58:38  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:58:38  49  -- Derive date related attributes:
22:58:38  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:58:38  51  ,0+TO_CHAR(ydate,'D')d
22:58:38  52  ,0+TO_CHAR(ydate,'W')w
22:58:38  53  -- mpm stands for minutes-past-midnight:
22:58:38  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:58:38  55  -- mph stands for minutes-past-hour:
22:58:38  56  ,0+TO_CHAR(ydate,'MI')mph
22:58:38  57  FROM svm6102
22:58:38  58  ORDER BY ydate
22:58:38  59  /

Table created.

Elapsed: 00:00:02.00
22:58:40 SQL> 
22:58:40 SQL> -- rpt
22:58:40 SQL> 
22:58:40 SQL> SELECT
22:58:40   2  pair
22:58:40   3  ,COUNT(pair)
22:58:40   4  ,MIN(clse),MAX(clse)
22:58:40   5  ,MIN(ydate),MAX(ydate)
22:58:40   6  FROM svm6122
22:58:40   7  GROUP BY pair
22:58:40   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19255   1.535325	   1.6295 2010-09-30 23:00:01 2011-01-03 22:50:00

Elapsed: 00:00:00.04
22:58:40 SQL> 
22:58:40 SQL> -- Prepare for derivation of NTILE based params:
22:58:40 SQL> 
22:58:40 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.53
22:58:41 SQL> CREATE TABLE svm6142 COMPRESS AS
22:58:41   2  SELECT
22:58:41   3  pair
22:58:41   4  ,ydate
22:58:41   5  ,prdate
22:58:41   6  ,clse
22:58:41   7  ,g6
22:58:41   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:58:41   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:58:41  10  ,CASE WHEN trend IS NULL THEN 1
22:58:41  11  	    WHEN trend =0      THEN 1
22:58:41  12  	    ELSE trend END trend
22:58:41  13  ,cm4
22:58:41  14  ,cm6
22:58:41  15  ,cm8
22:58:41  16  ,cm10
22:58:41  17  ,cm12
22:58:41  18  ,cm14
22:58:41  19  ,cm16
22:58:41  20  ,cm18
22:58:41  21  --
22:58:41  22  ,ca4
22:58:41  23  ,ca6
22:58:41  24  ,ca8
22:58:41  25  ,ca10
22:58:41  26  ,ca12
22:58:41  27  ,ca14
22:58:41  28  ,ca16
22:58:41  29  ,ca18
22:58:41  30  --
22:58:41  31  ,cx4
22:58:41  32  ,cx6
22:58:41  33  ,cx8
22:58:41  34  ,cx10
22:58:41  35  ,cx12
22:58:41  36  ,cx14
22:58:41  37  ,cx16
22:58:41  38  ,cx18
22:58:41  39  --
22:58:41  40  ,crr4
22:58:41  41  ,crr6
22:58:41  42  ,crr8
22:58:41  43  ,crr10
22:58:41  44  ,crr12
22:58:41  45  ,crr14
22:58:41  46  ,crr16
22:58:41  47  ,crr18
22:58:41  48  --
22:58:41  49  ,hh
22:58:41  50  ,d
22:58:41  51  ,w
22:58:41  52  ,mpm
22:58:41  53  ,mph
22:58:41  54  FROM svm6122
22:58:41  55  ORDER BY ydate
22:58:41  56  /

Table created.

Elapsed: 00:00:00.35
22:58:41 SQL> 
22:58:41 SQL> -- rpt
22:58:41 SQL> 
22:58:41 SQL> SELECT
22:58:41   2  pair
22:58:41   3  ,trend
22:58:41   4  ,gatt
22:58:41   5  ,COUNT(pair)
22:58:41   6  ,AVG(g6)
22:58:41   7  FROM svm6142
22:58:41   8  GROUP BY pair,trend,gatt
22:58:41   9  ORDER BY pair,trend,gatt
22:58:41  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6205 -.00268044
gbp_usd 	-1 up	      3464 .004357419
gbp_usd 	-1		34
gbp_usd 	 1 nup	      6061 -.00259226
gbp_usd 	 1 up	      3453 .004492268
gbp_usd 	 1		38

6 rows selected.

Elapsed: 00:00:00.03
22:58:41 SQL> 
22:58:41 SQL> 
22:58:41 SQL> -- Derive NTILE based params:
22:58:41 SQL> 
22:58:41 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.11
22:58:41 SQL> CREATE TABLE svm6162 COMPRESS AS
22:58:41   2  SELECT
22:58:41   3  pair
22:58:41   4  ,ydate
22:58:41   5  ,prdate
22:58:41   6  ,clse
22:58:41   7  ,g6
22:58:41   8  ,gatt
22:58:41   9  ,gattn
22:58:41  10  ,trend
22:58:41  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:58:41  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:58:41  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:58:41  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:58:41  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:58:41  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:58:41  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:58:41  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:58:41  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:58:41  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:58:41  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:58:41  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:58:41  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:58:41  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:58:41  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:58:41  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:58:41  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:58:41  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:58:41  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:58:41  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:58:41  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:58:41  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:58:41  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:58:41  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:58:41  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:58:41  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:58:41  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:58:41  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:58:41  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:58:41  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:58:41  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:58:41  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:58:41  43  ,hh  att32
22:58:41  44  ,d   att33
22:58:41  45  ,w   att34
22:58:41  46  ,mpm att35
22:58:41  47  ,mph att36
22:58:41  48  ,trend att37
22:58:41  49  FROM svm6142
22:58:41  50  ORDER BY ydate
22:58:41  51  /

Table created.

Elapsed: 00:00:04.63
22:58:46 SQL> 
22:58:46 SQL> -- rpt
22:58:46 SQL> 
22:58:46 SQL> SELECT
22:58:46   2  pair
22:58:46   3  ,trend
22:58:46   4  ,gatt
22:58:46   5  ,COUNT(pair)
22:58:46   6  ,AVG(g6)
22:58:46   7  FROM svm6162
22:58:46   8  GROUP BY pair,trend,gatt
22:58:46   9  ORDER BY pair,trend,gatt
22:58:46  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6205 -.00268044
gbp_usd 	-1 up	      3464 .004357419
gbp_usd 	-1		34
gbp_usd 	 1 nup	      6061 -.00259226
gbp_usd 	 1 up	      3453 .004492268
gbp_usd 	 1		38

6 rows selected.

Elapsed: 00:00:00.04
22:58:46 SQL> 
22:58:46 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
22:58:46 SQL> CREATE TABLE modsrc COMPRESS AS
22:58:46   2  SELECT
22:58:46   3  pair
22:58:46   4  ,ydate
22:58:46   5  ,prdate
22:58:46   6  ,trend
22:58:46   7  ,g6
22:58:46   8  ,gatt
22:58:46   9  ,gattn
22:58:46  10  FROM svm6162
22:58:46  11  /

Table created.

Elapsed: 00:00:00.08
22:58:46 SQL> 
22:58:46 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
22:58:47 SQL> 
22:58:47 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
22:58:47 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
22:58:47   2  SELECT
22:58:47   3  ydate
22:58:47   4  ,trend gbp_trend
22:58:47   5  ,g6    gbp_g6
22:58:47   6  ,gatt  gbp_gatt
22:58:47   7  ,gattn gbp_gattn
22:58:47   8  FROM modsrc
22:58:47   9  /

Table created.

Elapsed: 00:00:00.08
22:58:47 SQL> 
22:58:47 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
22:58:47 SQL> 
22:58:47 SQL> -- I need a copy of the attributes:
22:58:47 SQL> 
22:58:47 SQL> 
22:58:47 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.04
22:58:47 SQL> CREATE TABLE gbp_att COMPRESS AS
22:58:47   2  SELECT
22:58:47   3  ydate
22:58:47   4  ,att00 gbp_att00
22:58:47   5  ,att01 gbp_att01
22:58:47   6  ,att02 gbp_att02
22:58:47   7  ,att03 gbp_att03
22:58:47   8  ,att04 gbp_att04
22:58:47   9  ,att05 gbp_att05
22:58:47  10  ,att06 gbp_att06
22:58:47  11  ,att07 gbp_att07
22:58:47  12  ,att08 gbp_att08
22:58:47  13  ,att09 gbp_att09
22:58:47  14  ,att10 gbp_att10
22:58:47  15  ,att11 gbp_att11
22:58:47  16  ,att12 gbp_att12
22:58:47  17  ,att13 gbp_att13
22:58:47  18  ,att14 gbp_att14
22:58:47  19  ,att15 gbp_att15
22:58:47  20  ,att16 gbp_att16
22:58:47  21  ,att17 gbp_att17
22:58:47  22  ,att18 gbp_att18
22:58:47  23  ,att19 gbp_att19
22:58:47  24  ,att20 gbp_att20
22:58:47  25  ,att21 gbp_att21
22:58:47  26  ,att22 gbp_att22
22:58:47  27  ,att23 gbp_att23
22:58:47  28  ,att24 gbp_att24
22:58:47  29  ,att25 gbp_att25
22:58:47  30  ,att26 gbp_att26
22:58:47  31  ,att27 gbp_att27
22:58:47  32  ,att28 gbp_att28
22:58:47  33  ,att29 gbp_att29
22:58:47  34  ,att30 gbp_att30
22:58:47  35  ,att31 gbp_att31
22:58:47  36  ,att32 gbp_att32
22:58:47  37  ,att33 gbp_att33
22:58:47  38  ,att34 gbp_att34
22:58:47  39  ,att35 gbp_att35
22:58:47  40  ,att36 gbp_att36
22:58:47  41  ,att37 gbp_att37
22:58:47  42  FROM svm6162
22:58:47  43  /

Table created.

Elapsed: 00:00:00.31
22:58:47 SQL> 
22:58:47 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
22:58:48 SQL> 
22:58:48 SQL> -- rpt
22:58:48 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19255

Elapsed: 00:00:00.82
22:58:48 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19255

Elapsed: 00:00:00.00
22:58:48 SQL> 
22:58:48 SQL> --
22:58:48 SQL> -- jpy610.sql
22:58:48 SQL> --
22:58:48 SQL> 
22:58:48 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:58:48 SQL> 
22:58:48 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.44
22:58:49 SQL> 
22:58:49 SQL> -- I created di5min here:
22:58:49 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:58:49 SQL> 
22:58:49 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:58:49   2  SELECT
22:58:49   3  pair
22:58:49   4  ,ydate
22:58:49   5  ,prdate
22:58:49   6  ,rownum rnum -- acts as t in my time-series
22:58:49   7  ,clse
22:58:49   8  -- Derive a bunch of attributes from clse, the latest price:
22:58:49   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:58:49  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:58:49  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:58:49  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:58:49  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:58:49  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:58:49  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:58:49  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:58:49  17  --
22:58:49  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:58:49  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:58:49  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:58:49  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:58:49  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:58:49  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:58:49  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:58:49  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:58:49  26  --
22:58:49  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:58:49  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:58:49  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:58:49  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:58:49  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:58:49  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:58:49  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:58:49  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:58:49  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:58:49  36  FROM di5min WHERE pair LIKE'%jpy%'
22:58:49  37  AND ydate > sysdate - 95
22:58:49  38  ORDER BY ydate
22:58:49  39  /

View created.

Elapsed: 00:00:00.03
22:58:49 SQL> 
22:58:49 SQL> -- rpt
22:58:49 SQL> 
22:58:49 SQL> SELECT
22:58:49   2  pair
22:58:49   3  ,COUNT(pair)
22:58:49   4  ,MIN(clse),MAX(clse)
22:58:49   5  ,MIN(avg6),MAX(avg6)
22:58:49   6  ,MIN(ydate),MAX(ydate)
22:58:49   7  FROM svm6102
22:58:49   8  GROUP BY pair
22:58:49   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19253	 80.25	   84.485 80.3595205 84.3105479 2010-09-30 23:00:01 2011-01-03 22:50:00

Elapsed: 00:00:00.87
22:58:50 SQL> 
22:58:50 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:58:50 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.31
22:58:50 SQL> CREATE TABLE svm6122 COMPRESS AS
22:58:50   2  SELECT
22:58:50   3  pair
22:58:50   4  ,ydate
22:58:50   5  ,prdate
22:58:50   6  ,clse
22:58:50   7  -- g6 is important. I want to predict g6:
22:58:50   8  ,ld6 - clse g6
22:58:50   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:58:50  10  -- I want more attributes from the ones I derived above:
22:58:50  11  -- clse relation to moving-min
22:58:50  12  ,clse-min4  cm4
22:58:50  13  ,clse-min6  cm6
22:58:50  14  ,clse-min8  cm8
22:58:50  15  ,clse-min10 cm10
22:58:50  16  ,clse-min12 cm12
22:58:50  17  ,clse-min14 cm14
22:58:50  18  ,clse-min16 cm16
22:58:50  19  ,clse-min18 cm18
22:58:50  20  -- clse relation to moving-avg
22:58:50  21  ,clse-avg4  ca4
22:58:50  22  ,clse-avg6  ca6
22:58:50  23  ,clse-avg8  ca8
22:58:50  24  ,clse-avg10 ca10
22:58:50  25  ,clse-avg12 ca12
22:58:50  26  ,clse-avg14 ca14
22:58:50  27  ,clse-avg16 ca16
22:58:50  28  ,clse-avg18 ca18
22:58:50  29  -- clse relation to moving-max
22:58:50  30  ,clse-max4  cx4
22:58:50  31  ,clse-max6  cx6
22:58:50  32  ,clse-max8  cx8
22:58:50  33  ,clse-max10 cx10
22:58:50  34  ,clse-max12 cx12
22:58:50  35  ,clse-max14 cx14
22:58:50  36  ,clse-max16 cx16
22:58:50  37  ,clse-max18 cx18
22:58:50  38  -- Derive more attributes.
22:58:50  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:58:50  40  -- But COVAR_POP is more stable:
22:58:50  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:58:50  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:58:50  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:58:50  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:58:50  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:58:50  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:58:50  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:58:50  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:58:50  49  -- Derive date related attributes:
22:58:50  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:58:50  51  ,0+TO_CHAR(ydate,'D')d
22:58:50  52  ,0+TO_CHAR(ydate,'W')w
22:58:50  53  -- mpm stands for minutes-past-midnight:
22:58:50  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:58:50  55  -- mph stands for minutes-past-hour:
22:58:50  56  ,0+TO_CHAR(ydate,'MI')mph
22:58:50  57  FROM svm6102
22:58:50  58  ORDER BY ydate
22:58:50  59  /

Table created.

Elapsed: 00:00:02.05
22:58:52 SQL> 
22:58:52 SQL> -- rpt
22:58:52 SQL> 
22:58:52 SQL> SELECT
22:58:52   2  pair
22:58:52   3  ,COUNT(pair)
22:58:52   4  ,MIN(clse),MAX(clse)
22:58:52   5  ,MIN(ydate),MAX(ydate)
22:58:52   6  FROM svm6122
22:58:52   7  GROUP BY pair
22:58:52   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19253	 80.25	   84.485 2010-09-30 23:00:01 2011-01-03 22:50:00

Elapsed: 00:00:00.04
22:58:52 SQL> 
22:58:52 SQL> -- Prepare for derivation of NTILE based params:
22:58:52 SQL> 
22:58:52 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.44
22:58:53 SQL> CREATE TABLE svm6142 COMPRESS AS
22:58:53   2  SELECT
22:58:53   3  pair
22:58:53   4  ,ydate
22:58:53   5  ,prdate
22:58:53   6  ,clse
22:58:53   7  ,g6
22:58:53   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:58:53   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:58:53  10  ,CASE WHEN trend IS NULL THEN 1
22:58:53  11  	    WHEN trend =0      THEN 1
22:58:53  12  	    ELSE trend END trend
22:58:53  13  ,cm4
22:58:53  14  ,cm6
22:58:53  15  ,cm8
22:58:53  16  ,cm10
22:58:53  17  ,cm12
22:58:53  18  ,cm14
22:58:53  19  ,cm16
22:58:53  20  ,cm18
22:58:53  21  --
22:58:53  22  ,ca4
22:58:53  23  ,ca6
22:58:53  24  ,ca8
22:58:53  25  ,ca10
22:58:53  26  ,ca12
22:58:53  27  ,ca14
22:58:53  28  ,ca16
22:58:53  29  ,ca18
22:58:53  30  --
22:58:53  31  ,cx4
22:58:53  32  ,cx6
22:58:53  33  ,cx8
22:58:53  34  ,cx10
22:58:53  35  ,cx12
22:58:53  36  ,cx14
22:58:53  37  ,cx16
22:58:53  38  ,cx18
22:58:53  39  --
22:58:53  40  ,crr4
22:58:53  41  ,crr6
22:58:53  42  ,crr8
22:58:53  43  ,crr10
22:58:53  44  ,crr12
22:58:53  45  ,crr14
22:58:53  46  ,crr16
22:58:53  47  ,crr18
22:58:53  48  --
22:58:53  49  ,hh
22:58:53  50  ,d
22:58:53  51  ,w
22:58:53  52  ,mpm
22:58:53  53  ,mph
22:58:53  54  FROM svm6122
22:58:53  55  ORDER BY ydate
22:58:53  56  /

Table created.

Elapsed: 00:00:00.35
22:58:53 SQL> 
22:58:53 SQL> -- rpt
22:58:53 SQL> 
22:58:53 SQL> SELECT
22:58:53   2  pair
22:58:53   3  ,trend
22:58:53   4  ,gatt
22:58:53   5  ,COUNT(pair)
22:58:53   6  ,AVG(g6)
22:58:53   7  FROM svm6142
22:58:53   8  GROUP BY pair,trend,gatt
22:58:53   9  ORDER BY pair,trend,gatt
22:58:53  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5206 -.16580846
usd_jpy 	-1 up	      4812 .164682339
usd_jpy 	 1 nup	      4905 -.15657589
usd_jpy 	 1 up	      4258 .165985129
usd_jpy 	 1		72

Elapsed: 00:00:00.04
22:58:53 SQL> 
22:58:53 SQL> 
22:58:53 SQL> -- Derive NTILE based params:
22:58:53 SQL> 
22:58:53 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.11
22:58:53 SQL> CREATE TABLE svm6162 COMPRESS AS
22:58:53   2  SELECT
22:58:53   3  pair
22:58:53   4  ,ydate
22:58:53   5  ,prdate
22:58:53   6  ,clse
22:58:53   7  ,g6
22:58:53   8  ,gatt
22:58:53   9  ,gattn
22:58:53  10  ,trend
22:58:53  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:58:53  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:58:53  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:58:53  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:58:53  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:58:53  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:58:53  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:58:53  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:58:53  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:58:53  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:58:53  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:58:53  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:58:53  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:58:53  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:58:53  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:58:53  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:58:53  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:58:53  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:58:53  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:58:53  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:58:53  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:58:53  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:58:53  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:58:53  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:58:53  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:58:53  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:58:53  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:58:53  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:58:53  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:58:53  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:58:53  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:58:53  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:58:53  43  ,hh  att32
22:58:53  44  ,d   att33
22:58:53  45  ,w   att34
22:58:53  46  ,mpm att35
22:58:53  47  ,mph att36
22:58:53  48  ,trend att37
22:58:53  49  FROM svm6142
22:58:53  50  ORDER BY ydate
22:58:53  51  /

Table created.

Elapsed: 00:00:04.73
22:58:58 SQL> 
22:58:58 SQL> -- rpt
22:58:58 SQL> 
22:58:58 SQL> SELECT
22:58:58   2  pair
22:58:58   3  ,trend
22:58:58   4  ,gatt
22:58:58   5  ,COUNT(pair)
22:58:58   6  ,AVG(g6)
22:58:58   7  FROM svm6162
22:58:58   8  GROUP BY pair,trend,gatt
22:58:58   9  ORDER BY pair,trend,gatt
22:58:58  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5206 -.16580846
usd_jpy 	-1 up	      4812 .164682339
usd_jpy 	 1 nup	      4905 -.15657589
usd_jpy 	 1 up	      4258 .165985129
usd_jpy 	 1		72

Elapsed: 00:00:00.03
22:58:58 SQL> 
22:58:58 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
22:58:58 SQL> CREATE TABLE modsrc COMPRESS AS
22:58:58   2  SELECT
22:58:58   3  pair
22:58:58   4  ,ydate
22:58:58   5  ,prdate
22:58:58   6  ,trend
22:58:58   7  ,g6
22:58:58   8  ,gatt
22:58:58   9  ,gattn
22:58:58  10  FROM svm6162
22:58:58  11  /

Table created.

Elapsed: 00:00:00.09
22:58:58 SQL> 
22:58:58 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.26
22:58:58 SQL> 
22:58:58 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
22:58:58 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
22:58:58   2  SELECT
22:58:58   3  ydate
22:58:58   4  ,trend jpy_trend
22:58:58   5  ,g6    jpy_g6
22:58:58   6  ,gatt  jpy_gatt
22:58:58   7  ,gattn jpy_gattn
22:58:58   8  FROM modsrc
22:58:58   9  /

Table created.

Elapsed: 00:00:00.06
22:58:58 SQL> 
22:58:58 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
22:58:59 SQL> 
22:58:59 SQL> -- I need a copy of the attributes:
22:58:59 SQL> 
22:58:59 SQL> 
22:58:59 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.04
22:58:59 SQL> CREATE TABLE jpy_att COMPRESS AS
22:58:59   2  SELECT
22:58:59   3  ydate
22:58:59   4  ,att00 jpy_att00
22:58:59   5  ,att01 jpy_att01
22:58:59   6  ,att02 jpy_att02
22:58:59   7  ,att03 jpy_att03
22:58:59   8  ,att04 jpy_att04
22:58:59   9  ,att05 jpy_att05
22:58:59  10  ,att06 jpy_att06
22:58:59  11  ,att07 jpy_att07
22:58:59  12  ,att08 jpy_att08
22:58:59  13  ,att09 jpy_att09
22:58:59  14  ,att10 jpy_att10
22:58:59  15  ,att11 jpy_att11
22:58:59  16  ,att12 jpy_att12
22:58:59  17  ,att13 jpy_att13
22:58:59  18  ,att14 jpy_att14
22:58:59  19  ,att15 jpy_att15
22:58:59  20  ,att16 jpy_att16
22:58:59  21  ,att17 jpy_att17
22:58:59  22  ,att18 jpy_att18
22:58:59  23  ,att19 jpy_att19
22:58:59  24  ,att20 jpy_att20
22:58:59  25  ,att21 jpy_att21
22:58:59  26  ,att22 jpy_att22
22:58:59  27  ,att23 jpy_att23
22:58:59  28  ,att24 jpy_att24
22:58:59  29  ,att25 jpy_att25
22:58:59  30  ,att26 jpy_att26
22:58:59  31  ,att27 jpy_att27
22:58:59  32  ,att28 jpy_att28
22:58:59  33  ,att29 jpy_att29
22:58:59  34  ,att30 jpy_att30
22:58:59  35  ,att31 jpy_att31
22:58:59  36  ,att32 jpy_att32
22:58:59  37  ,att33 jpy_att33
22:58:59  38  ,att34 jpy_att34
22:58:59  39  ,att35 jpy_att35
22:58:59  40  ,att36 jpy_att36
22:58:59  41  ,att37 jpy_att37
22:58:59  42  FROM svm6162
22:58:59  43  /

Table created.

Elapsed: 00:00:00.17
22:58:59 SQL> 
22:58:59 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.57
22:58:59 SQL> 
22:58:59 SQL> -- rpt
22:58:59 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19253

Elapsed: 00:00:00.90
22:59:00 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19253

Elapsed: 00:00:00.00
22:59:00 SQL> 
22:59:00 SQL> --
22:59:00 SQL> -- cad610.sql
22:59:00 SQL> --
22:59:00 SQL> 
22:59:00 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:59:00 SQL> 
22:59:00 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.41
22:59:01 SQL> 
22:59:01 SQL> -- I created di5min here:
22:59:01 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:59:01 SQL> 
22:59:01 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:59:01   2  SELECT
22:59:01   3  pair
22:59:01   4  ,ydate
22:59:01   5  ,prdate
22:59:01   6  ,rownum rnum -- acts as t in my time-series
22:59:01   7  ,clse
22:59:01   8  -- Derive a bunch of attributes from clse, the latest price:
22:59:01   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:59:01  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:59:01  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:59:01  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:59:01  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:59:01  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:59:01  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:59:01  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:59:01  17  --
22:59:01  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:59:01  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:59:01  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:59:01  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:59:01  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:59:01  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:59:01  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:59:01  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:59:01  26  --
22:59:01  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:59:01  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:59:01  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:59:01  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:59:01  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:59:01  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:59:01  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:59:01  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:59:01  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:59:01  36  FROM di5min WHERE pair LIKE'%cad%'
22:59:01  37  AND ydate > sysdate - 95
22:59:01  38  ORDER BY ydate
22:59:01  39  /

View created.

Elapsed: 00:00:00.04
22:59:01 SQL> 
22:59:01 SQL> -- rpt
22:59:01 SQL> 
22:59:01 SQL> SELECT
22:59:01   2  pair
22:59:01   3  ,COUNT(pair)
22:59:01   4  ,MIN(clse),MAX(clse)
22:59:01   5  ,MIN(avg6),MAX(avg6)
22:59:01   6  ,MIN(ydate),MAX(ydate)
22:59:01   7  FROM svm6102
22:59:01   8  GROUP BY pair
22:59:01   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19253    .988925	   1.0355 .990603938 1.03282877 2010-09-30 23:00:01 2011-01-03 22:50:00

Elapsed: 00:00:00.82
22:59:02 SQL> 
22:59:02 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:59:02 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.29
22:59:02 SQL> CREATE TABLE svm6122 COMPRESS AS
22:59:02   2  SELECT
22:59:02   3  pair
22:59:02   4  ,ydate
22:59:02   5  ,prdate
22:59:02   6  ,clse
22:59:02   7  -- g6 is important. I want to predict g6:
22:59:02   8  ,ld6 - clse g6
22:59:02   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:59:02  10  -- I want more attributes from the ones I derived above:
22:59:02  11  -- clse relation to moving-min
22:59:02  12  ,clse-min4  cm4
22:59:02  13  ,clse-min6  cm6
22:59:02  14  ,clse-min8  cm8
22:59:02  15  ,clse-min10 cm10
22:59:02  16  ,clse-min12 cm12
22:59:02  17  ,clse-min14 cm14
22:59:02  18  ,clse-min16 cm16
22:59:02  19  ,clse-min18 cm18
22:59:02  20  -- clse relation to moving-avg
22:59:02  21  ,clse-avg4  ca4
22:59:02  22  ,clse-avg6  ca6
22:59:02  23  ,clse-avg8  ca8
22:59:02  24  ,clse-avg10 ca10
22:59:02  25  ,clse-avg12 ca12
22:59:02  26  ,clse-avg14 ca14
22:59:02  27  ,clse-avg16 ca16
22:59:02  28  ,clse-avg18 ca18
22:59:02  29  -- clse relation to moving-max
22:59:02  30  ,clse-max4  cx4
22:59:02  31  ,clse-max6  cx6
22:59:02  32  ,clse-max8  cx8
22:59:02  33  ,clse-max10 cx10
22:59:02  34  ,clse-max12 cx12
22:59:02  35  ,clse-max14 cx14
22:59:02  36  ,clse-max16 cx16
22:59:02  37  ,clse-max18 cx18
22:59:02  38  -- Derive more attributes.
22:59:02  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:59:02  40  -- But COVAR_POP is more stable:
22:59:02  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:59:02  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:59:02  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:59:02  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:59:02  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:59:02  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:59:02  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:59:02  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:59:02  49  -- Derive date related attributes:
22:59:02  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:59:02  51  ,0+TO_CHAR(ydate,'D')d
22:59:02  52  ,0+TO_CHAR(ydate,'W')w
22:59:02  53  -- mpm stands for minutes-past-midnight:
22:59:02  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:59:02  55  -- mph stands for minutes-past-hour:
22:59:02  56  ,0+TO_CHAR(ydate,'MI')mph
22:59:02  57  FROM svm6102
22:59:02  58  ORDER BY ydate
22:59:02  59  /

Table created.

Elapsed: 00:00:01.98
22:59:04 SQL> 
22:59:04 SQL> -- rpt
22:59:04 SQL> 
22:59:04 SQL> SELECT
22:59:04   2  pair
22:59:04   3  ,COUNT(pair)
22:59:04   4  ,MIN(clse),MAX(clse)
22:59:04   5  ,MIN(ydate),MAX(ydate)
22:59:04   6  FROM svm6122
22:59:04   7  GROUP BY pair
22:59:04   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19253    .988925	   1.0355 2010-09-30 23:00:01 2011-01-03 22:50:00

Elapsed: 00:00:00.04
22:59:04 SQL> 
22:59:04 SQL> -- Prepare for derivation of NTILE based params:
22:59:04 SQL> 
22:59:04 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.20
22:59:04 SQL> CREATE TABLE svm6142 COMPRESS AS
22:59:04   2  SELECT
22:59:04   3  pair
22:59:04   4  ,ydate
22:59:04   5  ,prdate
22:59:04   6  ,clse
22:59:04   7  ,g6
22:59:04   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:59:04   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:59:04  10  ,CASE WHEN trend IS NULL THEN 1
22:59:04  11  	    WHEN trend =0      THEN 1
22:59:04  12  	    ELSE trend END trend
22:59:04  13  ,cm4
22:59:04  14  ,cm6
22:59:04  15  ,cm8
22:59:04  16  ,cm10
22:59:04  17  ,cm12
22:59:04  18  ,cm14
22:59:04  19  ,cm16
22:59:04  20  ,cm18
22:59:04  21  --
22:59:04  22  ,ca4
22:59:04  23  ,ca6
22:59:04  24  ,ca8
22:59:04  25  ,ca10
22:59:04  26  ,ca12
22:59:04  27  ,ca14
22:59:04  28  ,ca16
22:59:04  29  ,ca18
22:59:04  30  --
22:59:04  31  ,cx4
22:59:04  32  ,cx6
22:59:04  33  ,cx8
22:59:04  34  ,cx10
22:59:04  35  ,cx12
22:59:04  36  ,cx14
22:59:04  37  ,cx16
22:59:04  38  ,cx18
22:59:04  39  --
22:59:04  40  ,crr4
22:59:04  41  ,crr6
22:59:04  42  ,crr8
22:59:04  43  ,crr10
22:59:04  44  ,crr12
22:59:04  45  ,crr14
22:59:04  46  ,crr16
22:59:04  47  ,crr18
22:59:04  48  --
22:59:04  49  ,hh
22:59:04  50  ,d
22:59:04  51  ,w
22:59:04  52  ,mpm
22:59:04  53  ,mph
22:59:04  54  FROM svm6122
22:59:04  55  ORDER BY ydate
22:59:04  56  /

Table created.

Elapsed: 00:00:00.36
22:59:04 SQL> 
22:59:04 SQL> -- rpt
22:59:04 SQL> 
22:59:04 SQL> SELECT
22:59:04   2  pair
22:59:04   3  ,trend
22:59:04   4  ,gatt
22:59:04   5  ,COUNT(pair)
22:59:04   6  ,AVG(g6)
22:59:04   7  FROM svm6142
22:59:04   8  GROUP BY pair,trend,gatt
22:59:04   9  ORDER BY pair,trend,gatt
22:59:04  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7368 -.00128491
usd_cad 	-1 up	      2998 .003050255
usd_cad 	-1		32
usd_cad 	 1 nup	      6521 -.00165665
usd_cad 	 1 up	      2294 .003663844
usd_cad 	 1		40

6 rows selected.

Elapsed: 00:00:00.03
22:59:04 SQL> 
22:59:04 SQL> 
22:59:04 SQL> -- Derive NTILE based params:
22:59:04 SQL> 
22:59:04 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
22:59:05 SQL> CREATE TABLE svm6162 COMPRESS AS
22:59:05   2  SELECT
22:59:05   3  pair
22:59:05   4  ,ydate
22:59:05   5  ,prdate
22:59:05   6  ,clse
22:59:05   7  ,g6
22:59:05   8  ,gatt
22:59:05   9  ,gattn
22:59:05  10  ,trend
22:59:05  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:59:05  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:59:05  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:59:05  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:59:05  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:59:05  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:59:05  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:59:05  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:59:05  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:59:05  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:59:05  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:59:05  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:59:05  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:59:05  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:59:05  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:59:05  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:59:05  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:59:05  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:59:05  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:59:05  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:59:05  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:59:05  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:59:05  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:59:05  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:59:05  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:59:05  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:59:05  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:59:05  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:59:05  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:59:05  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:59:05  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:59:05  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:59:05  43  ,hh  att32
22:59:05  44  ,d   att33
22:59:05  45  ,w   att34
22:59:05  46  ,mpm att35
22:59:05  47  ,mph att36
22:59:05  48  ,trend att37
22:59:05  49  FROM svm6142
22:59:05  50  ORDER BY ydate
22:59:05  51  /

Table created.

Elapsed: 00:00:04.73
22:59:09 SQL> 
22:59:09 SQL> -- rpt
22:59:09 SQL> 
22:59:09 SQL> SELECT
22:59:09   2  pair
22:59:09   3  ,trend
22:59:09   4  ,gatt
22:59:09   5  ,COUNT(pair)
22:59:09   6  ,AVG(g6)
22:59:09   7  FROM svm6162
22:59:09   8  GROUP BY pair,trend,gatt
22:59:09   9  ORDER BY pair,trend,gatt
22:59:09  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7368 -.00128491
usd_cad 	-1 up	      2998 .003050255
usd_cad 	-1		32
usd_cad 	 1 nup	      6521 -.00165665
usd_cad 	 1 up	      2294 .003663844
usd_cad 	 1		40

6 rows selected.

Elapsed: 00:00:00.03
22:59:09 SQL> 
22:59:09 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
22:59:10 SQL> CREATE TABLE modsrc COMPRESS AS
22:59:10   2  SELECT
22:59:10   3  pair
22:59:10   4  ,ydate
22:59:10   5  ,prdate
22:59:10   6  ,trend
22:59:10   7  ,g6
22:59:10   8  ,gatt
22:59:10   9  ,gattn
22:59:10  10  FROM svm6162
22:59:10  11  /

Table created.

Elapsed: 00:00:00.08
22:59:10 SQL> 
22:59:10 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
22:59:10 SQL> 
22:59:10 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
22:59:10 SQL> CREATE TABLE cad_ms610 COMPRESS AS
22:59:10   2  SELECT
22:59:10   3  ydate
22:59:10   4  ,trend cad_trend
22:59:10   5  ,g6    cad_g6
22:59:10   6  ,gatt  cad_gatt
22:59:10   7  ,gattn cad_gattn
22:59:10   8  FROM modsrc
22:59:10   9  /

Table created.

Elapsed: 00:00:00.06
22:59:10 SQL> 
22:59:10 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
22:59:10 SQL> 
22:59:10 SQL> -- I need a copy of the attributes:
22:59:10 SQL> 
22:59:10 SQL> 
22:59:10 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.14
22:59:10 SQL> CREATE TABLE cad_att COMPRESS AS
22:59:10   2  SELECT
22:59:10   3  ydate
22:59:10   4  ,att00 cad_att00
22:59:10   5  ,att01 cad_att01
22:59:10   6  ,att02 cad_att02
22:59:10   7  ,att03 cad_att03
22:59:10   8  ,att04 cad_att04
22:59:10   9  ,att05 cad_att05
22:59:10  10  ,att06 cad_att06
22:59:10  11  ,att07 cad_att07
22:59:10  12  ,att08 cad_att08
22:59:10  13  ,att09 cad_att09
22:59:10  14  ,att10 cad_att10
22:59:10  15  ,att11 cad_att11
22:59:10  16  ,att12 cad_att12
22:59:10  17  ,att13 cad_att13
22:59:10  18  ,att14 cad_att14
22:59:10  19  ,att15 cad_att15
22:59:10  20  ,att16 cad_att16
22:59:10  21  ,att17 cad_att17
22:59:10  22  ,att18 cad_att18
22:59:10  23  ,att19 cad_att19
22:59:10  24  ,att20 cad_att20
22:59:10  25  ,att21 cad_att21
22:59:10  26  ,att22 cad_att22
22:59:10  27  ,att23 cad_att23
22:59:10  28  ,att24 cad_att24
22:59:10  29  ,att25 cad_att25
22:59:10  30  ,att26 cad_att26
22:59:10  31  ,att27 cad_att27
22:59:10  32  ,att28 cad_att28
22:59:10  33  ,att29 cad_att29
22:59:10  34  ,att30 cad_att30
22:59:10  35  ,att31 cad_att31
22:59:10  36  ,att32 cad_att32
22:59:10  37  ,att33 cad_att33
22:59:10  38  ,att34 cad_att34
22:59:10  39  ,att35 cad_att35
22:59:10  40  ,att36 cad_att36
22:59:10  41  ,att37 cad_att37
22:59:10  42  FROM svm6162
22:59:10  43  /

Table created.

Elapsed: 00:00:00.17
22:59:10 SQL> 
22:59:10 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
22:59:11 SQL> 
22:59:11 SQL> -- rpt
22:59:11 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19253

Elapsed: 00:00:00.81
22:59:12 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19253

Elapsed: 00:00:00.00
22:59:12 SQL> 
22:59:12 SQL> --
22:59:12 SQL> -- chf610.sql
22:59:12 SQL> --
22:59:12 SQL> 
22:59:12 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:59:12 SQL> 
22:59:12 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.37
22:59:12 SQL> 
22:59:12 SQL> -- I created di5min here:
22:59:12 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:59:12 SQL> 
22:59:12 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:59:12   2  SELECT
22:59:12   3  pair
22:59:12   4  ,ydate
22:59:12   5  ,prdate
22:59:12   6  ,rownum rnum -- acts as t in my time-series
22:59:12   7  ,clse
22:59:12   8  -- Derive a bunch of attributes from clse, the latest price:
22:59:12   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:59:12  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:59:12  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:59:12  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:59:12  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:59:12  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:59:12  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:59:12  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:59:12  17  --
22:59:12  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:59:12  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:59:12  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:59:12  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:59:12  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:59:12  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:59:12  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:59:12  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:59:12  26  --
22:59:12  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:59:12  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:59:12  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:59:12  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:59:12  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:59:12  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:59:12  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:59:12  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:59:12  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:59:12  36  FROM di5min WHERE pair LIKE'%chf%'
22:59:12  37  AND ydate > sysdate - 95
22:59:12  38  ORDER BY ydate
22:59:12  39  /

View created.

Elapsed: 00:00:00.05
22:59:12 SQL> 
22:59:12 SQL> -- rpt
22:59:12 SQL> 
22:59:12 SQL> SELECT
22:59:12   2  pair
22:59:12   3  ,COUNT(pair)
22:59:12   4  ,MIN(clse),MAX(clse)
22:59:12   5  ,MIN(avg6),MAX(avg6)
22:59:12   6  ,MIN(ydate),MAX(ydate)
22:59:12   7  FROM svm6102
22:59:12   8  GROUP BY pair
22:59:12   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19256    .931675	  1.00635  .93325411 1.00498151 2010-09-30 23:00:01 2011-01-03 22:50:00

Elapsed: 00:00:00.82
22:59:13 SQL> 
22:59:13 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:59:13 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
22:59:13 SQL> CREATE TABLE svm6122 COMPRESS AS
22:59:13   2  SELECT
22:59:13   3  pair
22:59:13   4  ,ydate
22:59:13   5  ,prdate
22:59:13   6  ,clse
22:59:13   7  -- g6 is important. I want to predict g6:
22:59:13   8  ,ld6 - clse g6
22:59:13   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:59:13  10  -- I want more attributes from the ones I derived above:
22:59:13  11  -- clse relation to moving-min
22:59:13  12  ,clse-min4  cm4
22:59:13  13  ,clse-min6  cm6
22:59:13  14  ,clse-min8  cm8
22:59:13  15  ,clse-min10 cm10
22:59:13  16  ,clse-min12 cm12
22:59:13  17  ,clse-min14 cm14
22:59:13  18  ,clse-min16 cm16
22:59:13  19  ,clse-min18 cm18
22:59:13  20  -- clse relation to moving-avg
22:59:13  21  ,clse-avg4  ca4
22:59:13  22  ,clse-avg6  ca6
22:59:13  23  ,clse-avg8  ca8
22:59:13  24  ,clse-avg10 ca10
22:59:13  25  ,clse-avg12 ca12
22:59:13  26  ,clse-avg14 ca14
22:59:13  27  ,clse-avg16 ca16
22:59:13  28  ,clse-avg18 ca18
22:59:13  29  -- clse relation to moving-max
22:59:13  30  ,clse-max4  cx4
22:59:13  31  ,clse-max6  cx6
22:59:13  32  ,clse-max8  cx8
22:59:13  33  ,clse-max10 cx10
22:59:13  34  ,clse-max12 cx12
22:59:13  35  ,clse-max14 cx14
22:59:13  36  ,clse-max16 cx16
22:59:13  37  ,clse-max18 cx18
22:59:13  38  -- Derive more attributes.
22:59:13  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:59:13  40  -- But COVAR_POP is more stable:
22:59:13  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:59:13  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:59:13  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:59:13  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:59:13  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:59:13  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:59:13  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:59:13  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:59:13  49  -- Derive date related attributes:
22:59:13  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:59:13  51  ,0+TO_CHAR(ydate,'D')d
22:59:13  52  ,0+TO_CHAR(ydate,'W')w
22:59:13  53  -- mpm stands for minutes-past-midnight:
22:59:13  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:59:13  55  -- mph stands for minutes-past-hour:
22:59:13  56  ,0+TO_CHAR(ydate,'MI')mph
22:59:13  57  FROM svm6102
22:59:13  58  ORDER BY ydate
22:59:13  59  /

Table created.

Elapsed: 00:00:01.99
22:59:15 SQL> 
22:59:15 SQL> -- rpt
22:59:15 SQL> 
22:59:15 SQL> SELECT
22:59:15   2  pair
22:59:15   3  ,COUNT(pair)
22:59:15   4  ,MIN(clse),MAX(clse)
22:59:15   5  ,MIN(ydate),MAX(ydate)
22:59:15   6  FROM svm6122
22:59:15   7  GROUP BY pair
22:59:15   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19256    .931675	  1.00635 2010-09-30 23:00:01 2011-01-03 22:50:00

Elapsed: 00:00:00.04
22:59:15 SQL> 
22:59:15 SQL> -- Prepare for derivation of NTILE based params:
22:59:15 SQL> 
22:59:15 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.18
22:59:15 SQL> CREATE TABLE svm6142 COMPRESS AS
22:59:15   2  SELECT
22:59:15   3  pair
22:59:15   4  ,ydate
22:59:15   5  ,prdate
22:59:15   6  ,clse
22:59:15   7  ,g6
22:59:15   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:59:15   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:59:15  10  ,CASE WHEN trend IS NULL THEN 1
22:59:15  11  	    WHEN trend =0      THEN 1
22:59:15  12  	    ELSE trend END trend
22:59:15  13  ,cm4
22:59:15  14  ,cm6
22:59:15  15  ,cm8
22:59:15  16  ,cm10
22:59:15  17  ,cm12
22:59:15  18  ,cm14
22:59:15  19  ,cm16
22:59:15  20  ,cm18
22:59:15  21  --
22:59:15  22  ,ca4
22:59:15  23  ,ca6
22:59:15  24  ,ca8
22:59:15  25  ,ca10
22:59:15  26  ,ca12
22:59:15  27  ,ca14
22:59:15  28  ,ca16
22:59:15  29  ,ca18
22:59:15  30  --
22:59:15  31  ,cx4
22:59:15  32  ,cx6
22:59:15  33  ,cx8
22:59:15  34  ,cx10
22:59:15  35  ,cx12
22:59:15  36  ,cx14
22:59:15  37  ,cx16
22:59:15  38  ,cx18
22:59:15  39  --
22:59:15  40  ,crr4
22:59:15  41  ,crr6
22:59:15  42  ,crr8
22:59:15  43  ,crr10
22:59:15  44  ,crr12
22:59:15  45  ,crr14
22:59:15  46  ,crr16
22:59:15  47  ,crr18
22:59:15  48  --
22:59:15  49  ,hh
22:59:15  50  ,d
22:59:15  51  ,w
22:59:15  52  ,mpm
22:59:15  53  ,mph
22:59:15  54  FROM svm6122
22:59:15  55  ORDER BY ydate
22:59:15  56  /

Table created.

Elapsed: 00:00:00.38
22:59:16 SQL> 
22:59:16 SQL> -- rpt
22:59:16 SQL> 
22:59:16 SQL> SELECT
22:59:16   2  pair
22:59:16   3  ,trend
22:59:16   4  ,gatt
22:59:16   5  ,COUNT(pair)
22:59:16   6  ,AVG(g6)
22:59:16   7  FROM svm6142
22:59:16   8  GROUP BY pair,trend,gatt
22:59:16   9  ORDER BY pair,trend,gatt
22:59:16  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7263 -.00199759
usd_chf 	-1 up	      3038 .003857836
usd_chf 	-1		66
usd_chf 	 1 nup	      6342 -.00158104
usd_chf 	 1 up	      2541 .003693677
usd_chf 	 1		 6

6 rows selected.

Elapsed: 00:00:00.04
22:59:16 SQL> 
22:59:16 SQL> 
22:59:16 SQL> -- Derive NTILE based params:
22:59:16 SQL> 
22:59:16 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
22:59:16 SQL> CREATE TABLE svm6162 COMPRESS AS
22:59:16   2  SELECT
22:59:16   3  pair
22:59:16   4  ,ydate
22:59:16   5  ,prdate
22:59:16   6  ,clse
22:59:16   7  ,g6
22:59:16   8  ,gatt
22:59:16   9  ,gattn
22:59:16  10  ,trend
22:59:16  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:59:16  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:59:16  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:59:16  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:59:16  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:59:16  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:59:16  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:59:16  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:59:16  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:59:16  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:59:16  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:59:16  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:59:16  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:59:16  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:59:16  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:59:16  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:59:16  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:59:16  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:59:16  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:59:16  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:59:16  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:59:16  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:59:16  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:59:16  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:59:16  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:59:16  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:59:16  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:59:16  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:59:16  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:59:16  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:59:16  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:59:16  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:59:16  43  ,hh  att32
22:59:16  44  ,d   att33
22:59:16  45  ,w   att34
22:59:16  46  ,mpm att35
22:59:16  47  ,mph att36
22:59:16  48  ,trend att37
22:59:16  49  FROM svm6142
22:59:16  50  ORDER BY ydate
22:59:16  51  /

Table created.

Elapsed: 00:00:04.72
22:59:21 SQL> 
22:59:21 SQL> -- rpt
22:59:21 SQL> 
22:59:21 SQL> SELECT
22:59:21   2  pair
22:59:21   3  ,trend
22:59:21   4  ,gatt
22:59:21   5  ,COUNT(pair)
22:59:21   6  ,AVG(g6)
22:59:21   7  FROM svm6162
22:59:21   8  GROUP BY pair,trend,gatt
22:59:21   9  ORDER BY pair,trend,gatt
22:59:21  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7263 -.00199759
usd_chf 	-1 up	      3038 .003857836
usd_chf 	-1		66
usd_chf 	 1 nup	      6342 -.00158104
usd_chf 	 1 up	      2541 .003693677
usd_chf 	 1		 6

6 rows selected.

Elapsed: 00:00:00.03
22:59:21 SQL> 
22:59:21 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.11
22:59:21 SQL> CREATE TABLE modsrc COMPRESS AS
22:59:21   2  SELECT
22:59:21   3  pair
22:59:21   4  ,ydate
22:59:21   5  ,prdate
22:59:21   6  ,trend
22:59:21   7  ,g6
22:59:21   8  ,gatt
22:59:21   9  ,gattn
22:59:21  10  FROM svm6162
22:59:21  11  /

Table created.

Elapsed: 00:00:00.09
22:59:21 SQL> 
22:59:21 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
22:59:21 SQL> 
22:59:21 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
22:59:21 SQL> CREATE TABLE chf_ms610 COMPRESS AS
22:59:21   2  SELECT
22:59:21   3  ydate
22:59:21   4  ,trend chf_trend
22:59:21   5  ,g6    chf_g6
22:59:21   6  ,gatt  chf_gatt
22:59:21   7  ,gattn chf_gattn
22:59:21   8  FROM modsrc
22:59:21   9  /

Table created.

Elapsed: 00:00:00.06
22:59:21 SQL> 
22:59:21 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
22:59:21 SQL> 
22:59:21 SQL> -- I need a copy of the attributes:
22:59:21 SQL> 
22:59:21 SQL> 
22:59:21 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.04
22:59:21 SQL> CREATE TABLE chf_att COMPRESS AS
22:59:21   2  SELECT
22:59:21   3  ydate
22:59:21   4  ,att00 chf_att00
22:59:21   5  ,att01 chf_att01
22:59:21   6  ,att02 chf_att02
22:59:21   7  ,att03 chf_att03
22:59:21   8  ,att04 chf_att04
22:59:21   9  ,att05 chf_att05
22:59:21  10  ,att06 chf_att06
22:59:21  11  ,att07 chf_att07
22:59:21  12  ,att08 chf_att08
22:59:21  13  ,att09 chf_att09
22:59:21  14  ,att10 chf_att10
22:59:21  15  ,att11 chf_att11
22:59:21  16  ,att12 chf_att12
22:59:21  17  ,att13 chf_att13
22:59:21  18  ,att14 chf_att14
22:59:21  19  ,att15 chf_att15
22:59:21  20  ,att16 chf_att16
22:59:21  21  ,att17 chf_att17
22:59:21  22  ,att18 chf_att18
22:59:21  23  ,att19 chf_att19
22:59:21  24  ,att20 chf_att20
22:59:21  25  ,att21 chf_att21
22:59:21  26  ,att22 chf_att22
22:59:21  27  ,att23 chf_att23
22:59:21  28  ,att24 chf_att24
22:59:21  29  ,att25 chf_att25
22:59:21  30  ,att26 chf_att26
22:59:21  31  ,att27 chf_att27
22:59:21  32  ,att28 chf_att28
22:59:21  33  ,att29 chf_att29
22:59:21  34  ,att30 chf_att30
22:59:21  35  ,att31 chf_att31
22:59:21  36  ,att32 chf_att32
22:59:21  37  ,att33 chf_att33
22:59:21  38  ,att34 chf_att34
22:59:21  39  ,att35 chf_att35
22:59:21  40  ,att36 chf_att36
22:59:21  41  ,att37 chf_att37
22:59:21  42  FROM svm6162
22:59:21  43  /

Table created.

Elapsed: 00:00:00.18
22:59:22 SQL> 
22:59:22 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
22:59:22 SQL> 
22:59:22 SQL> -- rpt
22:59:22 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.84
22:59:23 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.00
22:59:23 SQL> 
22:59:23 SQL> --
22:59:23 SQL> -- ech610.sql
22:59:23 SQL> --
22:59:23 SQL> 
22:59:23 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:59:23 SQL> 
22:59:23 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
22:59:23 SQL> 
22:59:23 SQL> -- I created di5min here:
22:59:23 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:59:23 SQL> 
22:59:23 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:59:23   2  SELECT
22:59:23   3  pair
22:59:23   4  ,ydate
22:59:23   5  ,prdate
22:59:23   6  ,rownum rnum -- acts as t in my time-series
22:59:23   7  ,clse
22:59:23   8  -- Derive a bunch of attributes from clse, the latest price:
22:59:23   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:59:23  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:59:23  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:59:23  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:59:23  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:59:23  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:59:23  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:59:23  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:59:23  17  --
22:59:23  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:59:23  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:59:23  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:59:23  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:59:23  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:59:23  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:59:23  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:59:23  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:59:23  26  --
22:59:23  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:59:23  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:59:23  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:59:23  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:59:23  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:59:23  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:59:23  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:59:23  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:59:23  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:59:23  36  FROM di5min WHERE pair LIKE'%ech%'
22:59:23  37  AND ydate > sysdate - 95
22:59:23  38  ORDER BY ydate
22:59:23  39  /

View created.

Elapsed: 00:00:00.04
22:59:23 SQL> 
22:59:23 SQL> -- rpt
22:59:23 SQL> 
22:59:23 SQL> SELECT
22:59:23   2  pair
22:59:23   3  ,COUNT(pair)
22:59:23   4  ,MIN(clse),MAX(clse)
22:59:23   5  ,MIN(avg6),MAX(avg6)
22:59:23   6  ,MIN(ydate),MAX(ydate)
22:59:23   7  FROM svm6102
22:59:23   8  GROUP BY pair
22:59:23   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19255 1.24192946 1.38284305 1.24320711 1.37986485 2010-09-30 23:00:01 2011-01-03 22:50:00

Elapsed: 00:00:00.77
22:59:24 SQL> 
22:59:24 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:59:24 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.29
22:59:24 SQL> CREATE TABLE svm6122 COMPRESS AS
22:59:24   2  SELECT
22:59:24   3  pair
22:59:24   4  ,ydate
22:59:24   5  ,prdate
22:59:24   6  ,clse
22:59:24   7  -- g6 is important. I want to predict g6:
22:59:24   8  ,ld6 - clse g6
22:59:24   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:59:24  10  -- I want more attributes from the ones I derived above:
22:59:24  11  -- clse relation to moving-min
22:59:24  12  ,clse-min4  cm4
22:59:24  13  ,clse-min6  cm6
22:59:24  14  ,clse-min8  cm8
22:59:24  15  ,clse-min10 cm10
22:59:24  16  ,clse-min12 cm12
22:59:24  17  ,clse-min14 cm14
22:59:24  18  ,clse-min16 cm16
22:59:24  19  ,clse-min18 cm18
22:59:24  20  -- clse relation to moving-avg
22:59:24  21  ,clse-avg4  ca4
22:59:24  22  ,clse-avg6  ca6
22:59:24  23  ,clse-avg8  ca8
22:59:24  24  ,clse-avg10 ca10
22:59:24  25  ,clse-avg12 ca12
22:59:24  26  ,clse-avg14 ca14
22:59:24  27  ,clse-avg16 ca16
22:59:24  28  ,clse-avg18 ca18
22:59:24  29  -- clse relation to moving-max
22:59:24  30  ,clse-max4  cx4
22:59:24  31  ,clse-max6  cx6
22:59:24  32  ,clse-max8  cx8
22:59:24  33  ,clse-max10 cx10
22:59:24  34  ,clse-max12 cx12
22:59:24  35  ,clse-max14 cx14
22:59:24  36  ,clse-max16 cx16
22:59:24  37  ,clse-max18 cx18
22:59:24  38  -- Derive more attributes.
22:59:24  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:59:24  40  -- But COVAR_POP is more stable:
22:59:24  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:59:24  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:59:24  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:59:24  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:59:24  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:59:24  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:59:24  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:59:24  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:59:24  49  -- Derive date related attributes:
22:59:24  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:59:24  51  ,0+TO_CHAR(ydate,'D')d
22:59:24  52  ,0+TO_CHAR(ydate,'W')w
22:59:24  53  -- mpm stands for minutes-past-midnight:
22:59:24  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:59:24  55  -- mph stands for minutes-past-hour:
22:59:24  56  ,0+TO_CHAR(ydate,'MI')mph
22:59:24  57  FROM svm6102
22:59:24  58  ORDER BY ydate
22:59:24  59  /

Table created.

Elapsed: 00:00:02.24
22:59:27 SQL> 
22:59:27 SQL> -- rpt
22:59:27 SQL> 
22:59:27 SQL> SELECT
22:59:27   2  pair
22:59:27   3  ,COUNT(pair)
22:59:27   4  ,MIN(clse),MAX(clse)
22:59:27   5  ,MIN(ydate),MAX(ydate)
22:59:27   6  FROM svm6122
22:59:27   7  GROUP BY pair
22:59:27   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19255 1.24192946 1.38284305 2010-09-30 23:00:01 2011-01-03 22:50:00

Elapsed: 00:00:00.04
22:59:27 SQL> 
22:59:27 SQL> -- Prepare for derivation of NTILE based params:
22:59:27 SQL> 
22:59:27 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.24
22:59:27 SQL> CREATE TABLE svm6142 COMPRESS AS
22:59:27   2  SELECT
22:59:27   3  pair
22:59:27   4  ,ydate
22:59:27   5  ,prdate
22:59:27   6  ,clse
22:59:27   7  ,g6
22:59:27   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:59:27   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:59:27  10  ,CASE WHEN trend IS NULL THEN 1
22:59:27  11  	    WHEN trend =0      THEN 1
22:59:27  12  	    ELSE trend END trend
22:59:27  13  ,cm4
22:59:27  14  ,cm6
22:59:27  15  ,cm8
22:59:27  16  ,cm10
22:59:27  17  ,cm12
22:59:27  18  ,cm14
22:59:27  19  ,cm16
22:59:27  20  ,cm18
22:59:27  21  --
22:59:27  22  ,ca4
22:59:27  23  ,ca6
22:59:27  24  ,ca8
22:59:27  25  ,ca10
22:59:27  26  ,ca12
22:59:27  27  ,ca14
22:59:27  28  ,ca16
22:59:27  29  ,ca18
22:59:27  30  --
22:59:27  31  ,cx4
22:59:27  32  ,cx6
22:59:27  33  ,cx8
22:59:27  34  ,cx10
22:59:27  35  ,cx12
22:59:27  36  ,cx14
22:59:27  37  ,cx16
22:59:27  38  ,cx18
22:59:27  39  --
22:59:27  40  ,crr4
22:59:27  41  ,crr6
22:59:27  42  ,crr8
22:59:27  43  ,crr10
22:59:27  44  ,crr12
22:59:27  45  ,crr14
22:59:27  46  ,crr16
22:59:27  47  ,crr18
22:59:27  48  --
22:59:27  49  ,hh
22:59:27  50  ,d
22:59:27  51  ,w
22:59:27  52  ,mpm
22:59:27  53  ,mph
22:59:27  54  FROM svm6122
22:59:27  55  ORDER BY ydate
22:59:27  56  /

Table created.

Elapsed: 00:00:00.38
22:59:27 SQL> 
22:59:27 SQL> -- rpt
22:59:27 SQL> 
22:59:27 SQL> SELECT
22:59:27   2  pair
22:59:27   3  ,trend
22:59:27   4  ,gatt
22:59:27   5  ,COUNT(pair)
22:59:27   6  ,AVG(g6)
22:59:27   7  FROM svm6142
22:59:27   8  GROUP BY pair,trend,gatt
22:59:27   9  ORDER BY pair,trend,gatt
22:59:27  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6550  -.0022404
ech_usd 	-1 up	      3543 .003525706
ech_usd 	-1		29
ech_usd 	 1 nup	      6284 -.00239451
ech_usd 	 1 up	      2806 .003794233
ech_usd 	 1		43

6 rows selected.

Elapsed: 00:00:00.04
22:59:27 SQL> 
22:59:27 SQL> 
22:59:27 SQL> -- Derive NTILE based params:
22:59:27 SQL> 
22:59:27 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
22:59:27 SQL> CREATE TABLE svm6162 COMPRESS AS
22:59:27   2  SELECT
22:59:27   3  pair
22:59:27   4  ,ydate
22:59:27   5  ,prdate
22:59:27   6  ,clse
22:59:27   7  ,g6
22:59:27   8  ,gatt
22:59:27   9  ,gattn
22:59:27  10  ,trend
22:59:27  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:59:27  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:59:27  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:59:27  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:59:27  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:59:27  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:59:27  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:59:27  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:59:27  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:59:27  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:59:27  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:59:27  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:59:27  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:59:27  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:59:27  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:59:27  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:59:27  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:59:27  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:59:27  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:59:27  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:59:27  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:59:27  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:59:27  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:59:27  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:59:27  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:59:27  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:59:27  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:59:27  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:59:27  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:59:27  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:59:27  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:59:27  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:59:27  43  ,hh  att32
22:59:27  44  ,d   att33
22:59:27  45  ,w   att34
22:59:27  46  ,mpm att35
22:59:27  47  ,mph att36
22:59:27  48  ,trend att37
22:59:27  49  FROM svm6142
22:59:27  50  ORDER BY ydate
22:59:27  51  /

Table created.

Elapsed: 00:00:04.91
22:59:32 SQL> 
22:59:32 SQL> -- rpt
22:59:32 SQL> 
22:59:32 SQL> SELECT
22:59:32   2  pair
22:59:32   3  ,trend
22:59:32   4  ,gatt
22:59:32   5  ,COUNT(pair)
22:59:32   6  ,AVG(g6)
22:59:32   7  FROM svm6162
22:59:32   8  GROUP BY pair,trend,gatt
22:59:32   9  ORDER BY pair,trend,gatt
22:59:32  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6550  -.0022404
ech_usd 	-1 up	      3543 .003525706
ech_usd 	-1		29
ech_usd 	 1 nup	      6284 -.00239451
ech_usd 	 1 up	      2806 .003794233
ech_usd 	 1		43

6 rows selected.

Elapsed: 00:00:00.03
22:59:32 SQL> 
22:59:32 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.10
22:59:32 SQL> CREATE TABLE modsrc COMPRESS AS
22:59:32   2  SELECT
22:59:32   3  pair
22:59:32   4  ,ydate
22:59:32   5  ,prdate
22:59:32   6  ,trend
22:59:32   7  ,g6
22:59:32   8  ,gatt
22:59:32   9  ,gattn
22:59:32  10  FROM svm6162
22:59:32  11  /

Table created.

Elapsed: 00:00:00.08
22:59:33 SQL> 
22:59:33 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
22:59:33 SQL> 
22:59:33 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
22:59:33 SQL> CREATE TABLE ech_ms610 COMPRESS AS
22:59:33   2  SELECT
22:59:33   3  ydate
22:59:33   4  ,trend ech_trend
22:59:33   5  ,g6    ech_g6
22:59:33   6  ,gatt  ech_gatt
22:59:33   7  ,gattn ech_gattn
22:59:33   8  FROM modsrc
22:59:33   9  /

Table created.

Elapsed: 00:00:00.07
22:59:33 SQL> 
22:59:33 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
22:59:33 SQL> 
22:59:33 SQL> -- I need a copy of the attributes:
22:59:33 SQL> 
22:59:33 SQL> 
22:59:33 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.13
22:59:33 SQL> CREATE TABLE ech_att COMPRESS AS
22:59:33   2  SELECT
22:59:33   3  ydate
22:59:33   4  ,att00 ech_att00
22:59:33   5  ,att01 ech_att01
22:59:33   6  ,att02 ech_att02
22:59:33   7  ,att03 ech_att03
22:59:33   8  ,att04 ech_att04
22:59:33   9  ,att05 ech_att05
22:59:33  10  ,att06 ech_att06
22:59:33  11  ,att07 ech_att07
22:59:33  12  ,att08 ech_att08
22:59:33  13  ,att09 ech_att09
22:59:33  14  ,att10 ech_att10
22:59:33  15  ,att11 ech_att11
22:59:33  16  ,att12 ech_att12
22:59:33  17  ,att13 ech_att13
22:59:33  18  ,att14 ech_att14
22:59:33  19  ,att15 ech_att15
22:59:33  20  ,att16 ech_att16
22:59:33  21  ,att17 ech_att17
22:59:33  22  ,att18 ech_att18
22:59:33  23  ,att19 ech_att19
22:59:33  24  ,att20 ech_att20
22:59:33  25  ,att21 ech_att21
22:59:33  26  ,att22 ech_att22
22:59:33  27  ,att23 ech_att23
22:59:33  28  ,att24 ech_att24
22:59:33  29  ,att25 ech_att25
22:59:33  30  ,att26 ech_att26
22:59:33  31  ,att27 ech_att27
22:59:33  32  ,att28 ech_att28
22:59:33  33  ,att29 ech_att29
22:59:33  34  ,att30 ech_att30
22:59:33  35  ,att31 ech_att31
22:59:33  36  ,att32 ech_att32
22:59:33  37  ,att33 ech_att33
22:59:33  38  ,att34 ech_att34
22:59:33  39  ,att35 ech_att35
22:59:33  40  ,att36 ech_att36
22:59:33  41  ,att37 ech_att37
22:59:33  42  FROM svm6162
22:59:33  43  /

Table created.

Elapsed: 00:00:00.18
22:59:33 SQL> 
22:59:33 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
22:59:34 SQL> 
22:59:34 SQL> -- rpt
22:59:34 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19255

Elapsed: 00:00:00.76
22:59:35 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19255

Elapsed: 00:00:00.00
22:59:35 SQL> 
22:59:35 SQL> --
22:59:35 SQL> -- egb610.sql
22:59:35 SQL> --
22:59:35 SQL> 
22:59:35 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:59:35 SQL> 
22:59:35 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
22:59:35 SQL> 
22:59:35 SQL> -- I created di5min here:
22:59:35 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:59:35 SQL> 
22:59:35 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:59:35   2  SELECT
22:59:35   3  pair
22:59:35   4  ,ydate
22:59:35   5  ,prdate
22:59:35   6  ,rownum rnum -- acts as t in my time-series
22:59:35   7  ,clse
22:59:35   8  -- Derive a bunch of attributes from clse, the latest price:
22:59:35   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:59:35  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:59:35  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:59:35  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:59:35  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:59:35  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:59:35  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:59:35  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:59:35  17  --
22:59:35  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:59:35  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:59:35  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:59:35  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:59:35  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:59:35  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:59:35  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:59:35  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:59:35  26  --
22:59:35  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:59:35  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:59:35  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:59:35  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:59:35  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:59:35  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:59:35  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:59:35  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:59:35  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:59:35  36  FROM di5min WHERE pair LIKE'%egb%'
22:59:35  37  AND ydate > sysdate - 95
22:59:35  38  ORDER BY ydate
22:59:35  39  /

View created.

Elapsed: 00:00:00.05
22:59:35 SQL> 
22:59:35 SQL> -- rpt
22:59:35 SQL> 
22:59:35 SQL> SELECT
22:59:35   2  pair
22:59:35   3  ,COUNT(pair)
22:59:35   4  ,MIN(clse),MAX(clse)
22:59:35   5  ,MIN(avg6),MAX(avg6)
22:59:35   6  ,MIN(ydate),MAX(ydate)
22:59:35   7  FROM svm6102
22:59:35   8  GROUP BY pair
22:59:35   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19254 .833520557 .893920122 .834199029 .892400287 2010-09-30 23:00:01 2011-01-03 22:50:00

Elapsed: 00:00:00.94
22:59:36 SQL> 
22:59:36 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:59:36 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.33
22:59:36 SQL> CREATE TABLE svm6122 COMPRESS AS
22:59:36   2  SELECT
22:59:36   3  pair
22:59:36   4  ,ydate
22:59:36   5  ,prdate
22:59:36   6  ,clse
22:59:36   7  -- g6 is important. I want to predict g6:
22:59:36   8  ,ld6 - clse g6
22:59:36   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:59:36  10  -- I want more attributes from the ones I derived above:
22:59:36  11  -- clse relation to moving-min
22:59:36  12  ,clse-min4  cm4
22:59:36  13  ,clse-min6  cm6
22:59:36  14  ,clse-min8  cm8
22:59:36  15  ,clse-min10 cm10
22:59:36  16  ,clse-min12 cm12
22:59:36  17  ,clse-min14 cm14
22:59:36  18  ,clse-min16 cm16
22:59:36  19  ,clse-min18 cm18
22:59:36  20  -- clse relation to moving-avg
22:59:36  21  ,clse-avg4  ca4
22:59:36  22  ,clse-avg6  ca6
22:59:36  23  ,clse-avg8  ca8
22:59:36  24  ,clse-avg10 ca10
22:59:36  25  ,clse-avg12 ca12
22:59:36  26  ,clse-avg14 ca14
22:59:36  27  ,clse-avg16 ca16
22:59:36  28  ,clse-avg18 ca18
22:59:36  29  -- clse relation to moving-max
22:59:36  30  ,clse-max4  cx4
22:59:36  31  ,clse-max6  cx6
22:59:36  32  ,clse-max8  cx8
22:59:36  33  ,clse-max10 cx10
22:59:36  34  ,clse-max12 cx12
22:59:36  35  ,clse-max14 cx14
22:59:36  36  ,clse-max16 cx16
22:59:36  37  ,clse-max18 cx18
22:59:36  38  -- Derive more attributes.
22:59:36  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:59:36  40  -- But COVAR_POP is more stable:
22:59:36  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:59:36  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:59:36  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:59:36  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:59:36  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:59:36  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:59:36  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:59:36  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:59:36  49  -- Derive date related attributes:
22:59:36  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:59:36  51  ,0+TO_CHAR(ydate,'D')d
22:59:36  52  ,0+TO_CHAR(ydate,'W')w
22:59:36  53  -- mpm stands for minutes-past-midnight:
22:59:36  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:59:36  55  -- mph stands for minutes-past-hour:
22:59:36  56  ,0+TO_CHAR(ydate,'MI')mph
22:59:36  57  FROM svm6102
22:59:36  58  ORDER BY ydate
22:59:36  59  /

Table created.

Elapsed: 00:00:02.43
22:59:39 SQL> 
22:59:39 SQL> -- rpt
22:59:39 SQL> 
22:59:39 SQL> SELECT
22:59:39   2  pair
22:59:39   3  ,COUNT(pair)
22:59:39   4  ,MIN(clse),MAX(clse)
22:59:39   5  ,MIN(ydate),MAX(ydate)
22:59:39   6  FROM svm6122
22:59:39   7  GROUP BY pair
22:59:39   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19254 .833520557 .893920122 2010-09-30 23:00:01 2011-01-03 22:50:00

Elapsed: 00:00:00.04
22:59:39 SQL> 
22:59:39 SQL> -- Prepare for derivation of NTILE based params:
22:59:39 SQL> 
22:59:39 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.50
22:59:39 SQL> CREATE TABLE svm6142 COMPRESS AS
22:59:39   2  SELECT
22:59:39   3  pair
22:59:39   4  ,ydate
22:59:39   5  ,prdate
22:59:39   6  ,clse
22:59:39   7  ,g6
22:59:39   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:59:39   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:59:39  10  ,CASE WHEN trend IS NULL THEN 1
22:59:39  11  	    WHEN trend =0      THEN 1
22:59:39  12  	    ELSE trend END trend
22:59:39  13  ,cm4
22:59:39  14  ,cm6
22:59:39  15  ,cm8
22:59:39  16  ,cm10
22:59:39  17  ,cm12
22:59:39  18  ,cm14
22:59:39  19  ,cm16
22:59:39  20  ,cm18
22:59:39  21  --
22:59:39  22  ,ca4
22:59:39  23  ,ca6
22:59:39  24  ,ca8
22:59:39  25  ,ca10
22:59:39  26  ,ca12
22:59:39  27  ,ca14
22:59:39  28  ,ca16
22:59:39  29  ,ca18
22:59:39  30  --
22:59:39  31  ,cx4
22:59:39  32  ,cx6
22:59:39  33  ,cx8
22:59:39  34  ,cx10
22:59:39  35  ,cx12
22:59:39  36  ,cx14
22:59:39  37  ,cx16
22:59:39  38  ,cx18
22:59:39  39  --
22:59:39  40  ,crr4
22:59:39  41  ,crr6
22:59:39  42  ,crr8
22:59:39  43  ,crr10
22:59:39  44  ,crr12
22:59:39  45  ,crr14
22:59:39  46  ,crr16
22:59:39  47  ,crr18
22:59:39  48  --
22:59:39  49  ,hh
22:59:39  50  ,d
22:59:39  51  ,w
22:59:39  52  ,mpm
22:59:39  53  ,mph
22:59:39  54  FROM svm6122
22:59:39  55  ORDER BY ydate
22:59:39  56  /

Table created.

Elapsed: 00:00:00.44
22:59:40 SQL> 
22:59:40 SQL> -- rpt
22:59:40 SQL> 
22:59:40 SQL> SELECT
22:59:40   2  pair
22:59:40   3  ,trend
22:59:40   4  ,gatt
22:59:40   5  ,COUNT(pair)
22:59:40   6  ,AVG(g6)
22:59:40   7  FROM svm6142
22:59:40   8  GROUP BY pair,trend,gatt
22:59:40   9  ORDER BY pair,trend,gatt
22:59:40  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7313 -.00100606
egb_usd 	-1 up	      2680 .002918866
egb_usd 	-1		10
egb_usd 	 1 nup	      6505  -.0013275
egb_usd 	 1 up	      2684 .002916598
egb_usd 	 1		62

6 rows selected.

Elapsed: 00:00:00.04
22:59:40 SQL> 
22:59:40 SQL> 
22:59:40 SQL> -- Derive NTILE based params:
22:59:40 SQL> 
22:59:40 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.14
22:59:40 SQL> CREATE TABLE svm6162 COMPRESS AS
22:59:40   2  SELECT
22:59:40   3  pair
22:59:40   4  ,ydate
22:59:40   5  ,prdate
22:59:40   6  ,clse
22:59:40   7  ,g6
22:59:40   8  ,gatt
22:59:40   9  ,gattn
22:59:40  10  ,trend
22:59:40  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:59:40  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:59:40  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:59:40  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:59:40  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:59:40  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:59:40  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:59:40  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:59:40  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:59:40  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:59:40  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:59:40  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:59:40  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:59:40  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:59:40  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:59:40  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:59:40  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:59:40  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:59:40  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:59:40  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:59:40  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:59:40  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:59:40  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:59:40  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:59:40  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:59:40  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:59:40  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:59:40  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:59:40  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:59:40  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:59:40  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:59:40  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:59:40  43  ,hh  att32
22:59:40  44  ,d   att33
22:59:40  45  ,w   att34
22:59:40  46  ,mpm att35
22:59:40  47  ,mph att36
22:59:40  48  ,trend att37
22:59:40  49  FROM svm6142
22:59:40  50  ORDER BY ydate
22:59:40  51  /

Table created.

Elapsed: 00:00:05.56
22:59:45 SQL> 
22:59:45 SQL> -- rpt
22:59:45 SQL> 
22:59:45 SQL> SELECT
22:59:45   2  pair
22:59:45   3  ,trend
22:59:45   4  ,gatt
22:59:45   5  ,COUNT(pair)
22:59:45   6  ,AVG(g6)
22:59:45   7  FROM svm6162
22:59:45   8  GROUP BY pair,trend,gatt
22:59:45   9  ORDER BY pair,trend,gatt
22:59:45  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7313 -.00100606
egb_usd 	-1 up	      2680 .002918866
egb_usd 	-1		10
egb_usd 	 1 nup	      6505  -.0013275
egb_usd 	 1 up	      2684 .002916598
egb_usd 	 1		62

6 rows selected.

Elapsed: 00:00:00.03
22:59:45 SQL> 
22:59:45 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.16
22:59:46 SQL> CREATE TABLE modsrc COMPRESS AS
22:59:46   2  SELECT
22:59:46   3  pair
22:59:46   4  ,ydate
22:59:46   5  ,prdate
22:59:46   6  ,trend
22:59:46   7  ,g6
22:59:46   8  ,gatt
22:59:46   9  ,gattn
22:59:46  10  FROM svm6162
22:59:46  11  /

Table created.

Elapsed: 00:00:00.10
22:59:46 SQL> 
22:59:46 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
22:59:46 SQL> 
22:59:46 SQL> DROP   TABLE egb_ms610 ;

Table dropped.

Elapsed: 00:00:00.03
22:59:46 SQL> CREATE TABLE egb_ms610 COMPRESS AS
22:59:46   2  SELECT
22:59:46   3  ydate
22:59:46   4  ,trend egb_trend
22:59:46   5  ,g6    egb_g6
22:59:46   6  ,gatt  egb_gatt
22:59:46   7  ,gattn egb_gattn
22:59:46   8  FROM modsrc
22:59:46   9  /

Table created.

Elapsed: 00:00:00.06
22:59:46 SQL> 
22:59:46 SQL> ANALYZE TABLE egb_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
22:59:46 SQL> 
22:59:46 SQL> -- I need a copy of the attributes:
22:59:46 SQL> 
22:59:46 SQL> 
22:59:46 SQL> DROP   TABLE egb_att;

Table dropped.

Elapsed: 00:00:00.04
22:59:46 SQL> CREATE TABLE egb_att COMPRESS AS
22:59:46   2  SELECT
22:59:46   3  ydate
22:59:46   4  ,att00 egb_att00
22:59:46   5  ,att01 egb_att01
22:59:46   6  ,att02 egb_att02
22:59:46   7  ,att03 egb_att03
22:59:46   8  ,att04 egb_att04
22:59:46   9  ,att05 egb_att05
22:59:46  10  ,att06 egb_att06
22:59:46  11  ,att07 egb_att07
22:59:46  12  ,att08 egb_att08
22:59:46  13  ,att09 egb_att09
22:59:46  14  ,att10 egb_att10
22:59:46  15  ,att11 egb_att11
22:59:46  16  ,att12 egb_att12
22:59:46  17  ,att13 egb_att13
22:59:46  18  ,att14 egb_att14
22:59:46  19  ,att15 egb_att15
22:59:46  20  ,att16 egb_att16
22:59:46  21  ,att17 egb_att17
22:59:46  22  ,att18 egb_att18
22:59:46  23  ,att19 egb_att19
22:59:46  24  ,att20 egb_att20
22:59:46  25  ,att21 egb_att21
22:59:46  26  ,att22 egb_att22
22:59:46  27  ,att23 egb_att23
22:59:46  28  ,att24 egb_att24
22:59:46  29  ,att25 egb_att25
22:59:46  30  ,att26 egb_att26
22:59:46  31  ,att27 egb_att27
22:59:46  32  ,att28 egb_att28
22:59:46  33  ,att29 egb_att29
22:59:46  34  ,att30 egb_att30
22:59:46  35  ,att31 egb_att31
22:59:46  36  ,att32 egb_att32
22:59:46  37  ,att33 egb_att33
22:59:46  38  ,att34 egb_att34
22:59:46  39  ,att35 egb_att35
22:59:46  40  ,att36 egb_att36
22:59:46  41  ,att37 egb_att37
22:59:46  42  FROM svm6162
22:59:46  43  /

Table created.

Elapsed: 00:00:00.16
22:59:46 SQL> 
22:59:46 SQL> ANALYZE TABLE egb_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.56
22:59:47 SQL> 
22:59:47 SQL> -- rpt
22:59:47 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19254

Elapsed: 00:00:00.91
22:59:48 SQL> SELECT COUNT(*)FROM egb_att;

  COUNT(*)
----------
     19254

Elapsed: 00:00:00.01
22:59:48 SQL> 
22:59:48 SQL> --
22:59:48 SQL> -- ejp610.sql
22:59:48 SQL> --
22:59:48 SQL> 
22:59:48 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:59:48 SQL> 
22:59:48 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.48
22:59:48 SQL> 
22:59:48 SQL> -- I created di5min here:
22:59:48 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:59:48 SQL> 
22:59:48 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:59:48   2  SELECT
22:59:48   3  pair
22:59:48   4  ,ydate
22:59:48   5  ,prdate
22:59:48   6  ,rownum rnum -- acts as t in my time-series
22:59:48   7  ,clse
22:59:48   8  -- Derive a bunch of attributes from clse, the latest price:
22:59:48   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:59:48  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:59:48  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:59:48  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:59:48  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:59:48  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:59:48  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:59:48  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:59:48  17  --
22:59:48  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:59:48  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:59:48  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:59:48  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:59:48  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:59:48  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:59:48  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:59:48  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:59:48  26  --
22:59:48  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:59:48  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:59:48  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:59:48  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:59:48  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:59:48  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:59:48  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:59:48  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:59:48  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:59:48  36  FROM di5min WHERE pair LIKE'%ejp%'
22:59:48  37  AND ydate > sysdate - 95
22:59:48  38  ORDER BY ydate
22:59:48  39  /

View created.

Elapsed: 00:00:00.04
22:59:48 SQL> 
22:59:48 SQL> -- rpt
22:59:48 SQL> 
22:59:48 SQL> SELECT
22:59:48   2  pair
22:59:48   3  ,COUNT(pair)
22:59:48   4  ,MIN(clse),MAX(clse)
22:59:48   5  ,MIN(avg6),MAX(avg6)
22:59:48   6  ,MIN(ydate),MAX(ydate)
22:59:48   7  FROM svm6102
22:59:48   8  GROUP BY pair
22:59:48   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ejp_usd       19252 107.643765	115.63485 107.776148 115.509678 2010-09-30 23:00:01 2011-01-03 22:50:00

Elapsed: 00:00:00.84
22:59:49 SQL> 
22:59:49 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:59:49 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
22:59:49 SQL> CREATE TABLE svm6122 COMPRESS AS
22:59:49   2  SELECT
22:59:49   3  pair
22:59:49   4  ,ydate
22:59:49   5  ,prdate
22:59:49   6  ,clse
22:59:49   7  -- g6 is important. I want to predict g6:
22:59:49   8  ,ld6 - clse g6
22:59:49   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:59:49  10  -- I want more attributes from the ones I derived above:
22:59:49  11  -- clse relation to moving-min
22:59:49  12  ,clse-min4  cm4
22:59:49  13  ,clse-min6  cm6
22:59:49  14  ,clse-min8  cm8
22:59:49  15  ,clse-min10 cm10
22:59:49  16  ,clse-min12 cm12
22:59:49  17  ,clse-min14 cm14
22:59:49  18  ,clse-min16 cm16
22:59:49  19  ,clse-min18 cm18
22:59:49  20  -- clse relation to moving-avg
22:59:49  21  ,clse-avg4  ca4
22:59:49  22  ,clse-avg6  ca6
22:59:49  23  ,clse-avg8  ca8
22:59:49  24  ,clse-avg10 ca10
22:59:49  25  ,clse-avg12 ca12
22:59:49  26  ,clse-avg14 ca14
22:59:49  27  ,clse-avg16 ca16
22:59:49  28  ,clse-avg18 ca18
22:59:49  29  -- clse relation to moving-max
22:59:49  30  ,clse-max4  cx4
22:59:49  31  ,clse-max6  cx6
22:59:49  32  ,clse-max8  cx8
22:59:49  33  ,clse-max10 cx10
22:59:49  34  ,clse-max12 cx12
22:59:49  35  ,clse-max14 cx14
22:59:49  36  ,clse-max16 cx16
22:59:49  37  ,clse-max18 cx18
22:59:49  38  -- Derive more attributes.
22:59:49  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:59:49  40  -- But COVAR_POP is more stable:
22:59:49  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:59:49  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:59:49  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:59:49  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:59:49  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:59:49  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:59:49  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:59:49  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:59:49  49  -- Derive date related attributes:
22:59:49  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:59:49  51  ,0+TO_CHAR(ydate,'D')d
22:59:49  52  ,0+TO_CHAR(ydate,'W')w
22:59:49  53  -- mpm stands for minutes-past-midnight:
22:59:49  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:59:49  55  -- mph stands for minutes-past-hour:
22:59:49  56  ,0+TO_CHAR(ydate,'MI')mph
22:59:49  57  FROM svm6102
22:59:49  58  ORDER BY ydate
22:59:49  59  /

Table created.

Elapsed: 00:00:02.04
22:59:51 SQL> 
22:59:51 SQL> -- rpt
22:59:51 SQL> 
22:59:51 SQL> SELECT
22:59:51   2  pair
22:59:51   3  ,COUNT(pair)
22:59:51   4  ,MIN(clse),MAX(clse)
22:59:51   5  ,MIN(ydate),MAX(ydate)
22:59:51   6  FROM svm6122
22:59:51   7  GROUP BY pair
22:59:51   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ejp_usd       19252 107.643765	115.63485 2010-09-30 23:00:01 2011-01-03 22:50:00

Elapsed: 00:00:00.05
22:59:52 SQL> 
22:59:52 SQL> -- Prepare for derivation of NTILE based params:
22:59:52 SQL> 
22:59:52 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.20
22:59:52 SQL> CREATE TABLE svm6142 COMPRESS AS
22:59:52   2  SELECT
22:59:52   3  pair
22:59:52   4  ,ydate
22:59:52   5  ,prdate
22:59:52   6  ,clse
22:59:52   7  ,g6
22:59:52   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:59:52   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:59:52  10  ,CASE WHEN trend IS NULL THEN 1
22:59:52  11  	    WHEN trend =0      THEN 1
22:59:52  12  	    ELSE trend END trend
22:59:52  13  ,cm4
22:59:52  14  ,cm6
22:59:52  15  ,cm8
22:59:52  16  ,cm10
22:59:52  17  ,cm12
22:59:52  18  ,cm14
22:59:52  19  ,cm16
22:59:52  20  ,cm18
22:59:52  21  --
22:59:52  22  ,ca4
22:59:52  23  ,ca6
22:59:52  24  ,ca8
22:59:52  25  ,ca10
22:59:52  26  ,ca12
22:59:52  27  ,ca14
22:59:52  28  ,ca16
22:59:52  29  ,ca18
22:59:52  30  --
22:59:52  31  ,cx4
22:59:52  32  ,cx6
22:59:52  33  ,cx8
22:59:52  34  ,cx10
22:59:52  35  ,cx12
22:59:52  36  ,cx14
22:59:52  37  ,cx16
22:59:52  38  ,cx18
22:59:52  39  --
22:59:52  40  ,crr4
22:59:52  41  ,crr6
22:59:52  42  ,crr8
22:59:52  43  ,crr10
22:59:52  44  ,crr12
22:59:52  45  ,crr14
22:59:52  46  ,crr16
22:59:52  47  ,crr18
22:59:52  48  --
22:59:52  49  ,hh
22:59:52  50  ,d
22:59:52  51  ,w
22:59:52  52  ,mpm
22:59:52  53  ,mph
22:59:52  54  FROM svm6122
22:59:52  55  ORDER BY ydate
22:59:52  56  /

Table created.

Elapsed: 00:00:00.38
22:59:52 SQL> 
22:59:52 SQL> -- rpt
22:59:52 SQL> 
22:59:52 SQL> SELECT
22:59:52   2  pair
22:59:52   3  ,trend
22:59:52   4  ,gatt
22:59:52   5  ,COUNT(pair)
22:59:52   6  ,AVG(g6)
22:59:52   7  FROM svm6142
22:59:52   8  GROUP BY pair,trend,gatt
22:59:52   9  ORDER BY pair,trend,gatt
22:59:52  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4860 -.32448106
ejp_usd 	-1 up	      4817 .271625084
ejp_usd 	-1		 2
ejp_usd 	 1 nup	      4852 -.29117738
ejp_usd 	 1 up	      4651 .286993471
ejp_usd 	 1		70

6 rows selected.

Elapsed: 00:00:00.04
22:59:52 SQL> 
22:59:52 SQL> 
22:59:52 SQL> -- Derive NTILE based params:
22:59:52 SQL> 
22:59:52 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.17
22:59:52 SQL> CREATE TABLE svm6162 COMPRESS AS
22:59:52   2  SELECT
22:59:52   3  pair
22:59:52   4  ,ydate
22:59:52   5  ,prdate
22:59:52   6  ,clse
22:59:52   7  ,g6
22:59:52   8  ,gatt
22:59:52   9  ,gattn
22:59:52  10  ,trend
22:59:52  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:59:52  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:59:52  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:59:52  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:59:52  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:59:52  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:59:52  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:59:52  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:59:52  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:59:52  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:59:52  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:59:52  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:59:52  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:59:52  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:59:52  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:59:52  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:59:52  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:59:52  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:59:52  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:59:52  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:59:52  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:59:52  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:59:52  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:59:52  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:59:52  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:59:52  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:59:52  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:59:52  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:59:52  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:59:52  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:59:52  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:59:52  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:59:52  43  ,hh  att32
22:59:52  44  ,d   att33
22:59:52  45  ,w   att34
22:59:52  46  ,mpm att35
22:59:52  47  ,mph att36
22:59:52  48  ,trend att37
22:59:52  49  FROM svm6142
22:59:52  50  ORDER BY ydate
22:59:52  51  /

Table created.

Elapsed: 00:00:04.88
22:59:57 SQL> 
22:59:57 SQL> -- rpt
22:59:57 SQL> 
22:59:57 SQL> SELECT
22:59:57   2  pair
22:59:57   3  ,trend
22:59:57   4  ,gatt
22:59:57   5  ,COUNT(pair)
22:59:57   6  ,AVG(g6)
22:59:57   7  FROM svm6162
22:59:57   8  GROUP BY pair,trend,gatt
22:59:57   9  ORDER BY pair,trend,gatt
22:59:57  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4860 -.32448106
ejp_usd 	-1 up	      4817 .271625084
ejp_usd 	-1		 2
ejp_usd 	 1 nup	      4852 -.29117738
ejp_usd 	 1 up	      4651 .286993471
ejp_usd 	 1		70

6 rows selected.

Elapsed: 00:00:00.03
22:59:57 SQL> 
22:59:57 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
22:59:57 SQL> CREATE TABLE modsrc COMPRESS AS
22:59:57   2  SELECT
22:59:57   3  pair
22:59:57   4  ,ydate
22:59:57   5  ,prdate
22:59:57   6  ,trend
22:59:57   7  ,g6
22:59:57   8  ,gatt
22:59:57   9  ,gattn
22:59:57  10  FROM svm6162
22:59:57  11  /

Table created.

Elapsed: 00:00:00.09
22:59:57 SQL> 
22:59:57 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
22:59:58 SQL> 
22:59:58 SQL> DROP   TABLE ejp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
22:59:58 SQL> CREATE TABLE ejp_ms610 COMPRESS AS
22:59:58   2  SELECT
22:59:58   3  ydate
22:59:58   4  ,trend ejp_trend
22:59:58   5  ,g6    ejp_g6
22:59:58   6  ,gatt  ejp_gatt
22:59:58   7  ,gattn ejp_gattn
22:59:58   8  FROM modsrc
22:59:58   9  /

Table created.

Elapsed: 00:00:00.08
22:59:58 SQL> 
22:59:58 SQL> ANALYZE TABLE ejp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
22:59:58 SQL> 
22:59:58 SQL> -- I need a copy of the attributes:
22:59:58 SQL> 
22:59:58 SQL> 
22:59:58 SQL> DROP   TABLE ejp_att;

Table dropped.

Elapsed: 00:00:00.06
22:59:58 SQL> CREATE TABLE ejp_att COMPRESS AS
22:59:58   2  SELECT
22:59:58   3  ydate
22:59:58   4  ,att00 ejp_att00
22:59:58   5  ,att01 ejp_att01
22:59:58   6  ,att02 ejp_att02
22:59:58   7  ,att03 ejp_att03
22:59:58   8  ,att04 ejp_att04
22:59:58   9  ,att05 ejp_att05
22:59:58  10  ,att06 ejp_att06
22:59:58  11  ,att07 ejp_att07
22:59:58  12  ,att08 ejp_att08
22:59:58  13  ,att09 ejp_att09
22:59:58  14  ,att10 ejp_att10
22:59:58  15  ,att11 ejp_att11
22:59:58  16  ,att12 ejp_att12
22:59:58  17  ,att13 ejp_att13
22:59:58  18  ,att14 ejp_att14
22:59:58  19  ,att15 ejp_att15
22:59:58  20  ,att16 ejp_att16
22:59:58  21  ,att17 ejp_att17
22:59:58  22  ,att18 ejp_att18
22:59:58  23  ,att19 ejp_att19
22:59:58  24  ,att20 ejp_att20
22:59:58  25  ,att21 ejp_att21
22:59:58  26  ,att22 ejp_att22
22:59:58  27  ,att23 ejp_att23
22:59:58  28  ,att24 ejp_att24
22:59:58  29  ,att25 ejp_att25
22:59:58  30  ,att26 ejp_att26
22:59:58  31  ,att27 ejp_att27
22:59:58  32  ,att28 ejp_att28
22:59:58  33  ,att29 ejp_att29
22:59:58  34  ,att30 ejp_att30
22:59:58  35  ,att31 ejp_att31
22:59:58  36  ,att32 ejp_att32
22:59:58  37  ,att33 ejp_att33
22:59:58  38  ,att34 ejp_att34
22:59:58  39  ,att35 ejp_att35
22:59:58  40  ,att36 ejp_att36
22:59:58  41  ,att37 ejp_att37
22:59:58  42  FROM svm6162
22:59:58  43  /

Table created.

Elapsed: 00:00:00.17
22:59:58 SQL> 
22:59:58 SQL> ANALYZE TABLE ejp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.50
22:59:59 SQL> 
22:59:59 SQL> -- rpt
22:59:59 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19252

Elapsed: 00:00:00.83
23:00:00 SQL> SELECT COUNT(*)FROM ejp_att;

  COUNT(*)
----------
     19252

Elapsed: 00:00:00.00
23:00:00 SQL> 
23:00:00 SQL> --
23:00:00 SQL> -- ajp610.sql
23:00:00 SQL> --
23:00:00 SQL> 
23:00:00 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:00:00 SQL> 
23:00:00 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.51
23:00:00 SQL> 
23:00:00 SQL> -- I created di5min here:
23:00:00 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:00:00 SQL> 
23:00:00 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:00:00   2  SELECT
23:00:00   3  pair
23:00:00   4  ,ydate
23:00:00   5  ,prdate
23:00:00   6  ,rownum rnum -- acts as t in my time-series
23:00:00   7  ,clse
23:00:00   8  -- Derive a bunch of attributes from clse, the latest price:
23:00:00   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:00:00  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:00:00  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:00:00  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:00:00  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:00:00  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:00:00  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:00:00  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:00:00  17  --
23:00:00  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:00:00  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:00:00  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:00:00  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:00:00  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:00:00  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:00:00  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:00:00  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:00:00  26  --
23:00:00  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:00:00  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:00:00  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:00:00  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:00:00  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:00:00  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:00:00  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:00:00  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:00:00  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:00:00  36  FROM di5min WHERE pair LIKE'%ajp%'
23:00:00  37  AND ydate > sysdate - 95
23:00:00  38  ORDER BY ydate
23:00:00  39  /

View created.

Elapsed: 00:00:00.04
23:00:00 SQL> 
23:00:00 SQL> -- rpt
23:00:00 SQL> 
23:00:00 SQL> SELECT
23:00:00   2  pair
23:00:00   3  ,COUNT(pair)
23:00:00   4  ,MIN(clse),MAX(clse)
23:00:00   5  ,MIN(avg6),MAX(avg6)
23:00:00   6  ,MIN(ydate),MAX(ydate)
23:00:00   7  FROM svm6102
23:00:00   8  GROUP BY pair
23:00:00   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ajp_usd       19249  78.249976 83.6669853 78.5106193  83.546306 2010-09-30 23:00:01 2011-01-03 22:50:00

Elapsed: 00:00:00.78
23:00:01 SQL> 
23:00:01 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:00:01 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.23
23:00:01 SQL> CREATE TABLE svm6122 COMPRESS AS
23:00:01   2  SELECT
23:00:01   3  pair
23:00:01   4  ,ydate
23:00:01   5  ,prdate
23:00:01   6  ,clse
23:00:01   7  -- g6 is important. I want to predict g6:
23:00:01   8  ,ld6 - clse g6
23:00:01   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:00:01  10  -- I want more attributes from the ones I derived above:
23:00:01  11  -- clse relation to moving-min
23:00:01  12  ,clse-min4  cm4
23:00:01  13  ,clse-min6  cm6
23:00:01  14  ,clse-min8  cm8
23:00:01  15  ,clse-min10 cm10
23:00:01  16  ,clse-min12 cm12
23:00:01  17  ,clse-min14 cm14
23:00:01  18  ,clse-min16 cm16
23:00:01  19  ,clse-min18 cm18
23:00:01  20  -- clse relation to moving-avg
23:00:01  21  ,clse-avg4  ca4
23:00:01  22  ,clse-avg6  ca6
23:00:01  23  ,clse-avg8  ca8
23:00:01  24  ,clse-avg10 ca10
23:00:01  25  ,clse-avg12 ca12
23:00:01  26  ,clse-avg14 ca14
23:00:01  27  ,clse-avg16 ca16
23:00:01  28  ,clse-avg18 ca18
23:00:01  29  -- clse relation to moving-max
23:00:01  30  ,clse-max4  cx4
23:00:01  31  ,clse-max6  cx6
23:00:01  32  ,clse-max8  cx8
23:00:01  33  ,clse-max10 cx10
23:00:01  34  ,clse-max12 cx12
23:00:01  35  ,clse-max14 cx14
23:00:01  36  ,clse-max16 cx16
23:00:01  37  ,clse-max18 cx18
23:00:01  38  -- Derive more attributes.
23:00:01  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:00:01  40  -- But COVAR_POP is more stable:
23:00:01  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:00:01  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:00:01  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:00:01  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:00:01  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:00:01  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:00:01  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:00:01  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:00:01  49  -- Derive date related attributes:
23:00:01  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:00:01  51  ,0+TO_CHAR(ydate,'D')d
23:00:01  52  ,0+TO_CHAR(ydate,'W')w
23:00:01  53  -- mpm stands for minutes-past-midnight:
23:00:01  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:00:01  55  -- mph stands for minutes-past-hour:
23:00:01  56  ,0+TO_CHAR(ydate,'MI')mph
23:00:01  57  FROM svm6102
23:00:01  58  ORDER BY ydate
23:00:01  59  /

Table created.

Elapsed: 00:00:01.99
23:00:03 SQL> 
23:00:03 SQL> -- rpt
23:00:03 SQL> 
23:00:03 SQL> SELECT
23:00:03   2  pair
23:00:03   3  ,COUNT(pair)
23:00:03   4  ,MIN(clse),MAX(clse)
23:00:03   5  ,MIN(ydate),MAX(ydate)
23:00:03   6  FROM svm6122
23:00:03   7  GROUP BY pair
23:00:03   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ajp_usd       19248  78.249976 83.6669853 2010-09-30 23:05:01 2011-01-03 22:50:00

Elapsed: 00:00:00.04
23:00:03 SQL> 
23:00:03 SQL> -- Prepare for derivation of NTILE based params:
23:00:03 SQL> 
23:00:03 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.37
23:00:03 SQL> CREATE TABLE svm6142 COMPRESS AS
23:00:03   2  SELECT
23:00:03   3  pair
23:00:03   4  ,ydate
23:00:03   5  ,prdate
23:00:03   6  ,clse
23:00:03   7  ,g6
23:00:03   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:00:03   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:00:03  10  ,CASE WHEN trend IS NULL THEN 1
23:00:03  11  	    WHEN trend =0      THEN 1
23:00:03  12  	    ELSE trend END trend
23:00:03  13  ,cm4
23:00:03  14  ,cm6
23:00:03  15  ,cm8
23:00:03  16  ,cm10
23:00:03  17  ,cm12
23:00:03  18  ,cm14
23:00:03  19  ,cm16
23:00:03  20  ,cm18
23:00:03  21  --
23:00:03  22  ,ca4
23:00:03  23  ,ca6
23:00:03  24  ,ca8
23:00:03  25  ,ca10
23:00:03  26  ,ca12
23:00:03  27  ,ca14
23:00:03  28  ,ca16
23:00:03  29  ,ca18
23:00:03  30  --
23:00:03  31  ,cx4
23:00:03  32  ,cx6
23:00:03  33  ,cx8
23:00:03  34  ,cx10
23:00:03  35  ,cx12
23:00:03  36  ,cx14
23:00:03  37  ,cx16
23:00:03  38  ,cx18
23:00:03  39  --
23:00:03  40  ,crr4
23:00:03  41  ,crr6
23:00:03  42  ,crr8
23:00:03  43  ,crr10
23:00:03  44  ,crr12
23:00:03  45  ,crr14
23:00:03  46  ,crr16
23:00:03  47  ,crr18
23:00:03  48  --
23:00:03  49  ,hh
23:00:03  50  ,d
23:00:03  51  ,w
23:00:03  52  ,mpm
23:00:03  53  ,mph
23:00:03  54  FROM svm6122
23:00:03  55  ORDER BY ydate
23:00:03  56  /

Table created.

Elapsed: 00:00:00.38
23:00:04 SQL> 
23:00:04 SQL> -- rpt
23:00:04 SQL> 
23:00:04 SQL> SELECT
23:00:04   2  pair
23:00:04   3  ,trend
23:00:04   4  ,gatt
23:00:04   5  ,COUNT(pair)
23:00:04   6  ,AVG(g6)
23:00:04   7  FROM svm6142
23:00:04   8  GROUP BY pair,trend,gatt
23:00:04   9  ORDER BY pair,trend,gatt
23:00:04  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4019  -.2286151
ajp_usd 	-1 up	      5108 .220967394
ajp_usd 	-1		21
ajp_usd 	 1 nup	      5187 -.19921831
ajp_usd 	 1 up	      4862 .204759872
ajp_usd 	 1		51

6 rows selected.

Elapsed: 00:00:00.04
23:00:04 SQL> 
23:00:04 SQL> 
23:00:04 SQL> -- Derive NTILE based params:
23:00:04 SQL> 
23:00:04 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.20
23:00:04 SQL> CREATE TABLE svm6162 COMPRESS AS
23:00:04   2  SELECT
23:00:04   3  pair
23:00:04   4  ,ydate
23:00:04   5  ,prdate
23:00:04   6  ,clse
23:00:04   7  ,g6
23:00:04   8  ,gatt
23:00:04   9  ,gattn
23:00:04  10  ,trend
23:00:04  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:00:04  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:00:04  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:00:04  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:00:04  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:00:04  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:00:04  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:00:04  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:00:04  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:00:04  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:00:04  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:00:04  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:00:04  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:00:04  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:00:04  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:00:04  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:00:04  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:00:04  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:00:04  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:00:04  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:00:04  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:00:04  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:00:04  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:00:04  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:00:04  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:00:04  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:00:04  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:00:04  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:00:04  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:00:04  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:00:04  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:00:04  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:00:04  43  ,hh  att32
23:00:04  44  ,d   att33
23:00:04  45  ,w   att34
23:00:04  46  ,mpm att35
23:00:04  47  ,mph att36
23:00:04  48  ,trend att37
23:00:04  49  FROM svm6142
23:00:04  50  ORDER BY ydate
23:00:04  51  /

Table created.

Elapsed: 00:00:04.82
23:00:09 SQL> 
23:00:09 SQL> -- rpt
23:00:09 SQL> 
23:00:09 SQL> SELECT
23:00:09   2  pair
23:00:09   3  ,trend
23:00:09   4  ,gatt
23:00:09   5  ,COUNT(pair)
23:00:09   6  ,AVG(g6)
23:00:09   7  FROM svm6162
23:00:09   8  GROUP BY pair,trend,gatt
23:00:09   9  ORDER BY pair,trend,gatt
23:00:09  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4019  -.2286151
ajp_usd 	-1 up	      5108 .220967394
ajp_usd 	-1		21
ajp_usd 	 1 nup	      5187 -.19921831
ajp_usd 	 1 up	      4862 .204759872
ajp_usd 	 1		51

6 rows selected.

Elapsed: 00:00:00.03
23:00:09 SQL> 
23:00:09 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
23:00:09 SQL> CREATE TABLE modsrc COMPRESS AS
23:00:09   2  SELECT
23:00:09   3  pair
23:00:09   4  ,ydate
23:00:09   5  ,prdate
23:00:09   6  ,trend
23:00:09   7  ,g6
23:00:09   8  ,gatt
23:00:09   9  ,gattn
23:00:09  10  FROM svm6162
23:00:09  11  /

Table created.

Elapsed: 00:00:00.09
23:00:09 SQL> 
23:00:09 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
23:00:09 SQL> 
23:00:09 SQL> DROP   TABLE ajp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
23:00:09 SQL> CREATE TABLE ajp_ms610 COMPRESS AS
23:00:09   2  SELECT
23:00:09   3  ydate
23:00:09   4  ,trend ajp_trend
23:00:09   5  ,g6    ajp_g6
23:00:09   6  ,gatt  ajp_gatt
23:00:09   7  ,gattn ajp_gattn
23:00:09   8  FROM modsrc
23:00:09   9  /

Table created.

Elapsed: 00:00:00.07
23:00:09 SQL> 
23:00:09 SQL> ANALYZE TABLE ajp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
23:00:10 SQL> 
23:00:10 SQL> -- I need a copy of the attributes:
23:00:10 SQL> 
23:00:10 SQL> 
23:00:10 SQL> DROP   TABLE ajp_att;

Table dropped.

Elapsed: 00:00:00.04
23:00:10 SQL> CREATE TABLE ajp_att COMPRESS AS
23:00:10   2  SELECT
23:00:10   3  ydate
23:00:10   4  ,att00 ajp_att00
23:00:10   5  ,att01 ajp_att01
23:00:10   6  ,att02 ajp_att02
23:00:10   7  ,att03 ajp_att03
23:00:10   8  ,att04 ajp_att04
23:00:10   9  ,att05 ajp_att05
23:00:10  10  ,att06 ajp_att06
23:00:10  11  ,att07 ajp_att07
23:00:10  12  ,att08 ajp_att08
23:00:10  13  ,att09 ajp_att09
23:00:10  14  ,att10 ajp_att10
23:00:10  15  ,att11 ajp_att11
23:00:10  16  ,att12 ajp_att12
23:00:10  17  ,att13 ajp_att13
23:00:10  18  ,att14 ajp_att14
23:00:10  19  ,att15 ajp_att15
23:00:10  20  ,att16 ajp_att16
23:00:10  21  ,att17 ajp_att17
23:00:10  22  ,att18 ajp_att18
23:00:10  23  ,att19 ajp_att19
23:00:10  24  ,att20 ajp_att20
23:00:10  25  ,att21 ajp_att21
23:00:10  26  ,att22 ajp_att22
23:00:10  27  ,att23 ajp_att23
23:00:10  28  ,att24 ajp_att24
23:00:10  29  ,att25 ajp_att25
23:00:10  30  ,att26 ajp_att26
23:00:10  31  ,att27 ajp_att27
23:00:10  32  ,att28 ajp_att28
23:00:10  33  ,att29 ajp_att29
23:00:10  34  ,att30 ajp_att30
23:00:10  35  ,att31 ajp_att31
23:00:10  36  ,att32 ajp_att32
23:00:10  37  ,att33 ajp_att33
23:00:10  38  ,att34 ajp_att34
23:00:10  39  ,att35 ajp_att35
23:00:10  40  ,att36 ajp_att36
23:00:10  41  ,att37 ajp_att37
23:00:10  42  FROM svm6162
23:00:10  43  /

Table created.

Elapsed: 00:00:00.16
23:00:10 SQL> 
23:00:10 SQL> ANALYZE TABLE ajp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.42
23:00:10 SQL> 
23:00:10 SQL> -- rpt
23:00:10 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19248

Elapsed: 00:00:00.75
23:00:11 SQL> SELECT COUNT(*)FROM ajp_att;

  COUNT(*)
----------
     19248

Elapsed: 00:00:00.00
23:00:11 SQL> 
23:00:11 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
