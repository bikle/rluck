
SQL*Plus: Release 11.2.0.1.0 Production on Mon Jan 3 02:50:59 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

02:50:59 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.01
02:50:59 SQL> 02:50:59 SQL> --
02:50:59 SQL> -- eur610.sql
02:50:59 SQL> --
02:50:59 SQL> 
02:50:59 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:50:59 SQL> 
02:50:59 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.00
02:50:59 SQL> 
02:50:59 SQL> -- I created di5min here:
02:50:59 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:50:59 SQL> 
02:50:59 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:50:59   2  SELECT
02:50:59   3  pair
02:50:59   4  ,ydate
02:50:59   5  ,prdate
02:50:59   6  ,rownum rnum -- acts as t in my time-series
02:50:59   7  ,clse
02:50:59   8  -- Derive a bunch of attributes from clse, the latest price:
02:50:59   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:50:59  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:50:59  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:50:59  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:50:59  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:50:59  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:50:59  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:50:59  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:50:59  17  --
02:50:59  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:50:59  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:50:59  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:50:59  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:50:59  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:50:59  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:50:59  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:50:59  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:50:59  26  --
02:50:59  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:50:59  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:50:59  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:50:59  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:50:59  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:50:59  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:50:59  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:50:59  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:50:59  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:50:59  36  FROM di5min WHERE pair LIKE'%eur%'
02:50:59  37  AND ydate > sysdate - 95
02:50:59  38  ORDER BY ydate
02:50:59  39  /

View created.

Elapsed: 00:00:00.12
02:50:59 SQL> 
02:50:59 SQL> -- rpt
02:50:59 SQL> 
02:50:59 SQL> SELECT
02:50:59   2  pair
02:50:59   3  ,COUNT(pair)
02:50:59   4  ,MIN(clse),MAX(clse)
02:50:59   5  ,MIN(avg6),MAX(avg6)
02:50:59   6  ,MIN(ydate),MAX(ydate)
02:50:59   7  FROM svm6102
02:50:59   8  GROUP BY pair
02:50:59   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19259    1.29735	   1.4273 1.29875103 1.42436233 2010-09-30 02:55:01 2011-01-03 02:45:00

Elapsed: 00:00:00.92
02:51:00 SQL> 
02:51:00 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:51:00 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.08
02:51:00 SQL> CREATE TABLE svm6122 COMPRESS AS
02:51:00   2  SELECT
02:51:00   3  pair
02:51:00   4  ,ydate
02:51:00   5  ,prdate
02:51:00   6  ,clse
02:51:00   7  -- g6 is important. I want to predict g6:
02:51:00   8  ,ld6 - clse g6
02:51:00   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:51:00  10  -- I want more attributes from the ones I derived above:
02:51:00  11  -- clse relation to moving-min
02:51:00  12  ,clse-min4  cm4
02:51:00  13  ,clse-min6  cm6
02:51:00  14  ,clse-min8  cm8
02:51:00  15  ,clse-min10 cm10
02:51:00  16  ,clse-min12 cm12
02:51:00  17  ,clse-min14 cm14
02:51:00  18  ,clse-min16 cm16
02:51:00  19  ,clse-min18 cm18
02:51:00  20  -- clse relation to moving-avg
02:51:00  21  ,clse-avg4  ca4
02:51:00  22  ,clse-avg6  ca6
02:51:00  23  ,clse-avg8  ca8
02:51:00  24  ,clse-avg10 ca10
02:51:00  25  ,clse-avg12 ca12
02:51:00  26  ,clse-avg14 ca14
02:51:00  27  ,clse-avg16 ca16
02:51:00  28  ,clse-avg18 ca18
02:51:00  29  -- clse relation to moving-max
02:51:00  30  ,clse-max4  cx4
02:51:00  31  ,clse-max6  cx6
02:51:00  32  ,clse-max8  cx8
02:51:00  33  ,clse-max10 cx10
02:51:00  34  ,clse-max12 cx12
02:51:00  35  ,clse-max14 cx14
02:51:00  36  ,clse-max16 cx16
02:51:00  37  ,clse-max18 cx18
02:51:00  38  -- Derive more attributes.
02:51:00  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:51:00  40  -- But COVAR_POP is more stable:
02:51:00  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:51:00  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:51:00  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:51:00  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:51:00  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:51:00  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:51:00  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:51:00  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:51:00  49  -- Derive date related attributes:
02:51:00  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:51:00  51  ,0+TO_CHAR(ydate,'D')d
02:51:00  52  ,0+TO_CHAR(ydate,'W')w
02:51:00  53  -- mpm stands for minutes-past-midnight:
02:51:00  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:51:00  55  -- mph stands for minutes-past-hour:
02:51:00  56  ,0+TO_CHAR(ydate,'MI')mph
02:51:00  57  FROM svm6102
02:51:00  58  ORDER BY ydate
02:51:00  59  /

Table created.

Elapsed: 00:00:02.39
02:51:03 SQL> 
02:51:03 SQL> -- rpt
02:51:03 SQL> 
02:51:03 SQL> SELECT
02:51:03   2  pair
02:51:03   3  ,COUNT(pair)
02:51:03   4  ,MIN(clse),MAX(clse)
02:51:03   5  ,MIN(ydate),MAX(ydate)
02:51:03   6  FROM svm6122
02:51:03   7  GROUP BY pair
02:51:03   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19259    1.29735	   1.4273 2010-09-30 02:55:01 2011-01-03 02:45:00

Elapsed: 00:00:00.04
02:51:03 SQL> 
02:51:03 SQL> -- Prepare for derivation of NTILE based params:
02:51:03 SQL> 
02:51:03 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.80
02:51:04 SQL> CREATE TABLE svm6142 COMPRESS AS
02:51:04   2  SELECT
02:51:04   3  pair
02:51:04   4  ,ydate
02:51:04   5  ,prdate
02:51:04   6  ,clse
02:51:04   7  ,g6
02:51:04   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:51:04   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:51:04  10  ,CASE WHEN trend IS NULL THEN 1
02:51:04  11  	    WHEN trend =0      THEN 1
02:51:04  12  	    ELSE trend END trend
02:51:04  13  ,cm4
02:51:04  14  ,cm6
02:51:04  15  ,cm8
02:51:04  16  ,cm10
02:51:04  17  ,cm12
02:51:04  18  ,cm14
02:51:04  19  ,cm16
02:51:04  20  ,cm18
02:51:04  21  --
02:51:04  22  ,ca4
02:51:04  23  ,ca6
02:51:04  24  ,ca8
02:51:04  25  ,ca10
02:51:04  26  ,ca12
02:51:04  27  ,ca14
02:51:04  28  ,ca16
02:51:04  29  ,ca18
02:51:04  30  --
02:51:04  31  ,cx4
02:51:04  32  ,cx6
02:51:04  33  ,cx8
02:51:04  34  ,cx10
02:51:04  35  ,cx12
02:51:04  36  ,cx14
02:51:04  37  ,cx16
02:51:04  38  ,cx18
02:51:04  39  --
02:51:04  40  ,crr4
02:51:04  41  ,crr6
02:51:04  42  ,crr8
02:51:04  43  ,crr10
02:51:04  44  ,crr12
02:51:04  45  ,crr14
02:51:04  46  ,crr16
02:51:04  47  ,crr18
02:51:04  48  --
02:51:04  49  ,hh
02:51:04  50  ,d
02:51:04  51  ,w
02:51:04  52  ,mpm
02:51:04  53  ,mph
02:51:04  54  FROM svm6122
02:51:04  55  ORDER BY ydate
02:51:04  56  /

Table created.

Elapsed: 00:00:00.44
02:51:04 SQL> 
02:51:04 SQL> -- rpt
02:51:04 SQL> 
02:51:04 SQL> SELECT
02:51:04   2  pair
02:51:04   3  ,trend
02:51:04   4  ,gatt
02:51:04   5  ,COUNT(pair)
02:51:04   6  ,AVG(g6)
02:51:04   7  FROM svm6142
02:51:04   8  GROUP BY pair,trend,gatt
02:51:04   9  ORDER BY pair,trend,gatt
02:51:04  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      5947 -.00313285
eur_usd 	-1 up	      3564 .004488436
eur_usd 	-1		72
eur_usd 	 1 nup	      5853 -.00317247
eur_usd 	 1 up	      3823 .005050216

Elapsed: 00:00:00.04
02:51:04 SQL> 
02:51:04 SQL> 
02:51:04 SQL> -- Derive NTILE based params:
02:51:04 SQL> 
02:51:04 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.91
02:51:05 SQL> CREATE TABLE svm6162 COMPRESS AS
02:51:05   2  SELECT
02:51:05   3  pair
02:51:05   4  ,ydate
02:51:05   5  ,prdate
02:51:05   6  ,clse
02:51:05   7  ,g6
02:51:05   8  ,gatt
02:51:05   9  ,gattn
02:51:05  10  ,trend
02:51:05  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:51:05  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:51:05  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:51:05  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:51:05  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:51:05  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:51:05  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:51:05  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:51:05  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:51:05  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:51:05  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:51:05  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:51:05  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:51:05  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:51:05  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:51:05  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:51:05  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:51:05  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:51:05  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:51:05  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:51:05  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:51:05  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:51:05  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:51:05  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:51:05  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:51:05  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:51:05  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:51:05  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:51:05  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:51:05  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:51:05  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:51:05  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:51:05  43  ,hh  att32
02:51:05  44  ,d   att33
02:51:05  45  ,w   att34
02:51:05  46  ,mpm att35
02:51:05  47  ,mph att36
02:51:05  48  ,trend att37
02:51:05  49  FROM svm6142
02:51:05  50  ORDER BY ydate
02:51:05  51  /

Table created.

Elapsed: 00:00:04.77
02:51:10 SQL> 
02:51:10 SQL> -- rpt
02:51:10 SQL> 
02:51:10 SQL> SELECT
02:51:10   2  pair
02:51:10   3  ,trend
02:51:10   4  ,gatt
02:51:10   5  ,COUNT(pair)
02:51:10   6  ,AVG(g6)
02:51:10   7  FROM svm6162
02:51:10   8  GROUP BY pair,trend,gatt
02:51:10   9  ORDER BY pair,trend,gatt
02:51:10  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      5947 -.00313285
eur_usd 	-1 up	      3564 .004488436
eur_usd 	-1		72
eur_usd 	 1 nup	      5853 -.00317247
eur_usd 	 1 up	      3823 .005050216

Elapsed: 00:00:00.03
02:51:10 SQL> 
02:51:10 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.76
02:51:11 SQL> CREATE TABLE modsrc COMPRESS AS
02:51:11   2  SELECT
02:51:11   3  pair
02:51:11   4  ,ydate
02:51:11   5  ,prdate
02:51:11   6  ,trend
02:51:11   7  ,g6
02:51:11   8  ,gatt
02:51:11   9  ,gattn
02:51:11  10  FROM svm6162
02:51:11  11  /

Table created.

Elapsed: 00:00:00.08
02:51:11 SQL> 
02:51:11 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.28
02:51:11 SQL> 
02:51:11 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.07
02:51:11 SQL> CREATE TABLE eur_ms610 COMPRESS AS
02:51:11   2  SELECT
02:51:11   3  ydate
02:51:11   4  ,trend eur_trend
02:51:11   5  ,g6    eur_g6
02:51:11   6  ,gatt  eur_gatt
02:51:11   7  ,gattn eur_gattn
02:51:11   8  FROM modsrc
02:51:11   9  /

Table created.

Elapsed: 00:00:00.07
02:51:11 SQL> 
02:51:11 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
02:51:11 SQL> 
02:51:11 SQL> -- I need a copy of the attributes:
02:51:11 SQL> 
02:51:11 SQL> 
02:51:11 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.05
02:51:11 SQL> CREATE TABLE eur_att COMPRESS AS
02:51:11   2  SELECT
02:51:11   3  ydate
02:51:11   4  ,att00 eur_att00
02:51:11   5  ,att01 eur_att01
02:51:11   6  ,att02 eur_att02
02:51:11   7  ,att03 eur_att03
02:51:11   8  ,att04 eur_att04
02:51:11   9  ,att05 eur_att05
02:51:11  10  ,att06 eur_att06
02:51:11  11  ,att07 eur_att07
02:51:11  12  ,att08 eur_att08
02:51:11  13  ,att09 eur_att09
02:51:11  14  ,att10 eur_att10
02:51:11  15  ,att11 eur_att11
02:51:11  16  ,att12 eur_att12
02:51:11  17  ,att13 eur_att13
02:51:11  18  ,att14 eur_att14
02:51:11  19  ,att15 eur_att15
02:51:11  20  ,att16 eur_att16
02:51:11  21  ,att17 eur_att17
02:51:11  22  ,att18 eur_att18
02:51:11  23  ,att19 eur_att19
02:51:11  24  ,att20 eur_att20
02:51:11  25  ,att21 eur_att21
02:51:11  26  ,att22 eur_att22
02:51:11  27  ,att23 eur_att23
02:51:11  28  ,att24 eur_att24
02:51:11  29  ,att25 eur_att25
02:51:11  30  ,att26 eur_att26
02:51:11  31  ,att27 eur_att27
02:51:11  32  ,att28 eur_att28
02:51:11  33  ,att29 eur_att29
02:51:11  34  ,att30 eur_att30
02:51:11  35  ,att31 eur_att31
02:51:11  36  ,att32 eur_att32
02:51:11  37  ,att33 eur_att33
02:51:11  38  ,att34 eur_att34
02:51:11  39  ,att35 eur_att35
02:51:11  40  ,att36 eur_att36
02:51:11  41  ,att37 eur_att37
02:51:11  42  FROM svm6162
02:51:11  43  /

Table created.

Elapsed: 00:00:00.18
02:51:11 SQL> 
02:51:11 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
02:51:12 SQL> 
02:51:12 SQL> -- rpt
02:51:12 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.88
02:51:13 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.00
02:51:13 SQL> 
02:51:13 SQL> --
02:51:13 SQL> -- aud610.sql
02:51:13 SQL> --
02:51:13 SQL> 
02:51:13 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:51:13 SQL> 
02:51:13 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.69
02:51:13 SQL> 
02:51:13 SQL> -- I created di5min here:
02:51:13 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:51:13 SQL> 
02:51:13 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:51:13   2  SELECT
02:51:13   3  pair
02:51:13   4  ,ydate
02:51:13   5  ,prdate
02:51:13   6  ,rownum rnum -- acts as t in my time-series
02:51:13   7  ,clse
02:51:13   8  -- Derive a bunch of attributes from clse, the latest price:
02:51:13   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:51:13  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:51:13  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:51:13  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:51:13  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:51:13  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:51:13  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:51:13  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:51:13  17  --
02:51:13  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:51:13  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:51:13  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:51:13  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:51:13  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:51:13  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:51:13  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:51:13  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:51:13  26  --
02:51:13  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:51:13  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:51:13  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:51:13  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:51:13  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:51:13  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:51:13  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:51:13  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:51:13  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:51:13  36  FROM di5min WHERE pair LIKE'%aud%'
02:51:13  37  AND ydate > sysdate - 95
02:51:13  38  ORDER BY ydate
02:51:13  39  /

View created.

Elapsed: 00:00:00.05
02:51:14 SQL> 
02:51:14 SQL> -- rpt
02:51:14 SQL> 
02:51:14 SQL> SELECT
02:51:14   2  pair
02:51:14   3  ,COUNT(pair)
02:51:14   4  ,MIN(clse),MAX(clse)
02:51:14   5  ,MIN(avg6),MAX(avg6)
02:51:14   6  ,MIN(ydate),MAX(ydate)
02:51:14   7  FROM svm6102
02:51:14   8  GROUP BY pair
02:51:14   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19256	.95405	  1.02495 .957141438 1.02284247 2010-09-30 02:55:01 2011-01-03 02:45:00

Elapsed: 00:00:00.86
02:51:14 SQL> 
02:51:14 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:51:14 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.19
02:51:15 SQL> CREATE TABLE svm6122 COMPRESS AS
02:51:15   2  SELECT
02:51:15   3  pair
02:51:15   4  ,ydate
02:51:15   5  ,prdate
02:51:15   6  ,clse
02:51:15   7  -- g6 is important. I want to predict g6:
02:51:15   8  ,ld6 - clse g6
02:51:15   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:51:15  10  -- I want more attributes from the ones I derived above:
02:51:15  11  -- clse relation to moving-min
02:51:15  12  ,clse-min4  cm4
02:51:15  13  ,clse-min6  cm6
02:51:15  14  ,clse-min8  cm8
02:51:15  15  ,clse-min10 cm10
02:51:15  16  ,clse-min12 cm12
02:51:15  17  ,clse-min14 cm14
02:51:15  18  ,clse-min16 cm16
02:51:15  19  ,clse-min18 cm18
02:51:15  20  -- clse relation to moving-avg
02:51:15  21  ,clse-avg4  ca4
02:51:15  22  ,clse-avg6  ca6
02:51:15  23  ,clse-avg8  ca8
02:51:15  24  ,clse-avg10 ca10
02:51:15  25  ,clse-avg12 ca12
02:51:15  26  ,clse-avg14 ca14
02:51:15  27  ,clse-avg16 ca16
02:51:15  28  ,clse-avg18 ca18
02:51:15  29  -- clse relation to moving-max
02:51:15  30  ,clse-max4  cx4
02:51:15  31  ,clse-max6  cx6
02:51:15  32  ,clse-max8  cx8
02:51:15  33  ,clse-max10 cx10
02:51:15  34  ,clse-max12 cx12
02:51:15  35  ,clse-max14 cx14
02:51:15  36  ,clse-max16 cx16
02:51:15  37  ,clse-max18 cx18
02:51:15  38  -- Derive more attributes.
02:51:15  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:51:15  40  -- But COVAR_POP is more stable:
02:51:15  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:51:15  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:51:15  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:51:15  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:51:15  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:51:15  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:51:15  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:51:15  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:51:15  49  -- Derive date related attributes:
02:51:15  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:51:15  51  ,0+TO_CHAR(ydate,'D')d
02:51:15  52  ,0+TO_CHAR(ydate,'W')w
02:51:15  53  -- mpm stands for minutes-past-midnight:
02:51:15  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:51:15  55  -- mph stands for minutes-past-hour:
02:51:15  56  ,0+TO_CHAR(ydate,'MI')mph
02:51:15  57  FROM svm6102
02:51:15  58  ORDER BY ydate
02:51:15  59  /

Table created.

Elapsed: 00:00:02.11
02:51:17 SQL> 
02:51:17 SQL> -- rpt
02:51:17 SQL> 
02:51:17 SQL> SELECT
02:51:17   2  pair
02:51:17   3  ,COUNT(pair)
02:51:17   4  ,MIN(clse),MAX(clse)
02:51:17   5  ,MIN(ydate),MAX(ydate)
02:51:17   6  FROM svm6122
02:51:17   7  GROUP BY pair
02:51:17   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19256	.95405	  1.02495 2010-09-30 02:55:01 2011-01-03 02:45:00

Elapsed: 00:00:00.05
02:51:17 SQL> 
02:51:17 SQL> -- Prepare for derivation of NTILE based params:
02:51:17 SQL> 
02:51:17 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.19
02:51:17 SQL> CREATE TABLE svm6142 COMPRESS AS
02:51:17   2  SELECT
02:51:17   3  pair
02:51:17   4  ,ydate
02:51:17   5  ,prdate
02:51:17   6  ,clse
02:51:17   7  ,g6
02:51:17   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:51:17   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:51:17  10  ,CASE WHEN trend IS NULL THEN 1
02:51:17  11  	    WHEN trend =0      THEN 1
02:51:17  12  	    ELSE trend END trend
02:51:17  13  ,cm4
02:51:17  14  ,cm6
02:51:17  15  ,cm8
02:51:17  16  ,cm10
02:51:17  17  ,cm12
02:51:17  18  ,cm14
02:51:17  19  ,cm16
02:51:17  20  ,cm18
02:51:17  21  --
02:51:17  22  ,ca4
02:51:17  23  ,ca6
02:51:17  24  ,ca8
02:51:17  25  ,ca10
02:51:17  26  ,ca12
02:51:17  27  ,ca14
02:51:17  28  ,ca16
02:51:17  29  ,ca18
02:51:17  30  --
02:51:17  31  ,cx4
02:51:17  32  ,cx6
02:51:17  33  ,cx8
02:51:17  34  ,cx10
02:51:17  35  ,cx12
02:51:17  36  ,cx14
02:51:17  37  ,cx16
02:51:17  38  ,cx18
02:51:17  39  --
02:51:17  40  ,crr4
02:51:17  41  ,crr6
02:51:17  42  ,crr8
02:51:17  43  ,crr10
02:51:17  44  ,crr12
02:51:17  45  ,crr14
02:51:17  46  ,crr16
02:51:17  47  ,crr18
02:51:17  48  --
02:51:17  49  ,hh
02:51:17  50  ,d
02:51:17  51  ,w
02:51:17  52  ,mpm
02:51:17  53  ,mph
02:51:17  54  FROM svm6122
02:51:17  55  ORDER BY ydate
02:51:17  56  /

Table created.

Elapsed: 00:00:00.37
02:51:17 SQL> 
02:51:17 SQL> -- rpt
02:51:17 SQL> 
02:51:17 SQL> SELECT
02:51:17   2  pair
02:51:17   3  ,trend
02:51:17   4  ,gatt
02:51:17   5  ,COUNT(pair)
02:51:17   6  ,AVG(g6)
02:51:17   7  FROM svm6142
02:51:17   8  GROUP BY pair,trend,gatt
02:51:17   9  ORDER BY pair,trend,gatt
02:51:17  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5033 -.00217742
aud_usd 	-1 up	      3748 .003747429
aud_usd 	-1		55
aud_usd 	 1 nup	      6700 -.00211368
aud_usd 	 1 up	      3703 .004029375
aud_usd 	 1		17

6 rows selected.

Elapsed: 00:00:00.06
02:51:17 SQL> 
02:51:17 SQL> 
02:51:17 SQL> -- Derive NTILE based params:
02:51:17 SQL> 
02:51:17 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
02:51:17 SQL> CREATE TABLE svm6162 COMPRESS AS
02:51:17   2  SELECT
02:51:17   3  pair
02:51:17   4  ,ydate
02:51:17   5  ,prdate
02:51:17   6  ,clse
02:51:17   7  ,g6
02:51:17   8  ,gatt
02:51:17   9  ,gattn
02:51:17  10  ,trend
02:51:17  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:51:17  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:51:17  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:51:17  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:51:17  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:51:17  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:51:17  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:51:17  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:51:17  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:51:17  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:51:17  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:51:17  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:51:17  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:51:17  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:51:17  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:51:17  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:51:17  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:51:17  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:51:17  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:51:17  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:51:17  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:51:17  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:51:17  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:51:17  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:51:17  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:51:17  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:51:17  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:51:17  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:51:17  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:51:17  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:51:17  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:51:17  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:51:17  43  ,hh  att32
02:51:17  44  ,d   att33
02:51:17  45  ,w   att34
02:51:17  46  ,mpm att35
02:51:17  47  ,mph att36
02:51:17  48  ,trend att37
02:51:17  49  FROM svm6142
02:51:17  50  ORDER BY ydate
02:51:17  51  /

Table created.

Elapsed: 00:00:04.71
02:51:22 SQL> 
02:51:22 SQL> -- rpt
02:51:22 SQL> 
02:51:22 SQL> SELECT
02:51:22   2  pair
02:51:22   3  ,trend
02:51:22   4  ,gatt
02:51:22   5  ,COUNT(pair)
02:51:22   6  ,AVG(g6)
02:51:22   7  FROM svm6162
02:51:22   8  GROUP BY pair,trend,gatt
02:51:22   9  ORDER BY pair,trend,gatt
02:51:22  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5033 -.00217742
aud_usd 	-1 up	      3748 .003747429
aud_usd 	-1		55
aud_usd 	 1 nup	      6700 -.00211368
aud_usd 	 1 up	      3703 .004029375
aud_usd 	 1		17

6 rows selected.

Elapsed: 00:00:00.03
02:51:22 SQL> 
02:51:22 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.26
02:51:22 SQL> CREATE TABLE modsrc COMPRESS AS
02:51:22   2  SELECT
02:51:22   3  pair
02:51:22   4  ,ydate
02:51:22   5  ,prdate
02:51:22   6  ,trend
02:51:22   7  ,g6
02:51:22   8  ,gatt
02:51:22   9  ,gattn
02:51:22  10  FROM svm6162
02:51:22  11  /

Table created.

Elapsed: 00:00:00.26
02:51:23 SQL> 
02:51:23 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.42
02:51:23 SQL> 
02:51:23 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
02:51:23 SQL> CREATE TABLE aud_ms610 COMPRESS AS
02:51:23   2  SELECT
02:51:23   3  ydate
02:51:23   4  ,trend aud_trend
02:51:23   5  ,g6    aud_g6
02:51:23   6  ,gatt  aud_gatt
02:51:23   7  ,gattn aud_gattn
02:51:23   8  FROM modsrc
02:51:23   9  /

Table created.

Elapsed: 00:00:00.06
02:51:23 SQL> 
02:51:23 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
02:51:23 SQL> 
02:51:23 SQL> -- I need a copy of the attributes:
02:51:23 SQL> 
02:51:23 SQL> 
02:51:23 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.05
02:51:23 SQL> CREATE TABLE aud_att COMPRESS AS
02:51:23   2  SELECT
02:51:23   3  ydate
02:51:23   4  ,att00 aud_att00
02:51:23   5  ,att01 aud_att01
02:51:23   6  ,att02 aud_att02
02:51:23   7  ,att03 aud_att03
02:51:23   8  ,att04 aud_att04
02:51:23   9  ,att05 aud_att05
02:51:23  10  ,att06 aud_att06
02:51:23  11  ,att07 aud_att07
02:51:23  12  ,att08 aud_att08
02:51:23  13  ,att09 aud_att09
02:51:23  14  ,att10 aud_att10
02:51:23  15  ,att11 aud_att11
02:51:23  16  ,att12 aud_att12
02:51:23  17  ,att13 aud_att13
02:51:23  18  ,att14 aud_att14
02:51:23  19  ,att15 aud_att15
02:51:23  20  ,att16 aud_att16
02:51:23  21  ,att17 aud_att17
02:51:23  22  ,att18 aud_att18
02:51:23  23  ,att19 aud_att19
02:51:23  24  ,att20 aud_att20
02:51:23  25  ,att21 aud_att21
02:51:23  26  ,att22 aud_att22
02:51:23  27  ,att23 aud_att23
02:51:23  28  ,att24 aud_att24
02:51:23  29  ,att25 aud_att25
02:51:23  30  ,att26 aud_att26
02:51:23  31  ,att27 aud_att27
02:51:23  32  ,att28 aud_att28
02:51:23  33  ,att29 aud_att29
02:51:23  34  ,att30 aud_att30
02:51:23  35  ,att31 aud_att31
02:51:23  36  ,att32 aud_att32
02:51:23  37  ,att33 aud_att33
02:51:23  38  ,att34 aud_att34
02:51:23  39  ,att35 aud_att35
02:51:23  40  ,att36 aud_att36
02:51:23  41  ,att37 aud_att37
02:51:23  42  FROM svm6162
02:51:23  43  /

Table created.

Elapsed: 00:00:00.18
02:51:24 SQL> 
02:51:24 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
02:51:24 SQL> 
02:51:24 SQL> -- rpt
02:51:24 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.85
02:51:25 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.01
02:51:25 SQL> 
02:51:25 SQL> --
02:51:25 SQL> -- gbp610.sql
02:51:25 SQL> --
02:51:25 SQL> 
02:51:25 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:51:25 SQL> 
02:51:25 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.49
02:51:25 SQL> 
02:51:25 SQL> -- I created di5min here:
02:51:25 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:51:25 SQL> 
02:51:25 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:51:25   2  SELECT
02:51:25   3  pair
02:51:25   4  ,ydate
02:51:25   5  ,prdate
02:51:25   6  ,rownum rnum -- acts as t in my time-series
02:51:25   7  ,clse
02:51:25   8  -- Derive a bunch of attributes from clse, the latest price:
02:51:25   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:51:25  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:51:25  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:51:25  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:51:25  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:51:25  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:51:25  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:51:25  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:51:25  17  --
02:51:25  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:51:25  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:51:25  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:51:25  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:51:25  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:51:25  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:51:25  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:51:25  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:51:25  26  --
02:51:25  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:51:25  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:51:25  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:51:25  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:51:25  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:51:25  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:51:25  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:51:25  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:51:25  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:51:25  36  FROM di5min WHERE pair LIKE'%gbp%'
02:51:25  37  AND ydate > sysdate - 95
02:51:25  38  ORDER BY ydate
02:51:25  39  /

View created.

Elapsed: 00:00:00.04
02:51:26 SQL> 
02:51:26 SQL> -- rpt
02:51:26 SQL> 
02:51:26 SQL> SELECT
02:51:26   2  pair
02:51:26   3  ,COUNT(pair)
02:51:26   4  ,MIN(clse),MAX(clse)
02:51:26   5  ,MIN(avg6),MAX(avg6)
02:51:26   6  ,MIN(ydate),MAX(ydate)
02:51:26   7  FROM svm6102
02:51:26   8  GROUP BY pair
02:51:26   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19258   1.535325	   1.6295 1.53696747 1.62716986 2010-09-30 02:55:01 2011-01-03 02:45:00

Elapsed: 00:00:00.86
02:51:26 SQL> 
02:51:26 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:51:26 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
02:51:27 SQL> CREATE TABLE svm6122 COMPRESS AS
02:51:27   2  SELECT
02:51:27   3  pair
02:51:27   4  ,ydate
02:51:27   5  ,prdate
02:51:27   6  ,clse
02:51:27   7  -- g6 is important. I want to predict g6:
02:51:27   8  ,ld6 - clse g6
02:51:27   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:51:27  10  -- I want more attributes from the ones I derived above:
02:51:27  11  -- clse relation to moving-min
02:51:27  12  ,clse-min4  cm4
02:51:27  13  ,clse-min6  cm6
02:51:27  14  ,clse-min8  cm8
02:51:27  15  ,clse-min10 cm10
02:51:27  16  ,clse-min12 cm12
02:51:27  17  ,clse-min14 cm14
02:51:27  18  ,clse-min16 cm16
02:51:27  19  ,clse-min18 cm18
02:51:27  20  -- clse relation to moving-avg
02:51:27  21  ,clse-avg4  ca4
02:51:27  22  ,clse-avg6  ca6
02:51:27  23  ,clse-avg8  ca8
02:51:27  24  ,clse-avg10 ca10
02:51:27  25  ,clse-avg12 ca12
02:51:27  26  ,clse-avg14 ca14
02:51:27  27  ,clse-avg16 ca16
02:51:27  28  ,clse-avg18 ca18
02:51:27  29  -- clse relation to moving-max
02:51:27  30  ,clse-max4  cx4
02:51:27  31  ,clse-max6  cx6
02:51:27  32  ,clse-max8  cx8
02:51:27  33  ,clse-max10 cx10
02:51:27  34  ,clse-max12 cx12
02:51:27  35  ,clse-max14 cx14
02:51:27  36  ,clse-max16 cx16
02:51:27  37  ,clse-max18 cx18
02:51:27  38  -- Derive more attributes.
02:51:27  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:51:27  40  -- But COVAR_POP is more stable:
02:51:27  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:51:27  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:51:27  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:51:27  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:51:27  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:51:27  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:51:27  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:51:27  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:51:27  49  -- Derive date related attributes:
02:51:27  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:51:27  51  ,0+TO_CHAR(ydate,'D')d
02:51:27  52  ,0+TO_CHAR(ydate,'W')w
02:51:27  53  -- mpm stands for minutes-past-midnight:
02:51:27  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:51:27  55  -- mph stands for minutes-past-hour:
02:51:27  56  ,0+TO_CHAR(ydate,'MI')mph
02:51:27  57  FROM svm6102
02:51:27  58  ORDER BY ydate
02:51:27  59  /

Table created.

Elapsed: 00:00:02.08
02:51:29 SQL> 
02:51:29 SQL> -- rpt
02:51:29 SQL> 
02:51:29 SQL> SELECT
02:51:29   2  pair
02:51:29   3  ,COUNT(pair)
02:51:29   4  ,MIN(clse),MAX(clse)
02:51:29   5  ,MIN(ydate),MAX(ydate)
02:51:29   6  FROM svm6122
02:51:29   7  GROUP BY pair
02:51:29   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19258   1.535325	   1.6295 2010-09-30 02:55:01 2011-01-03 02:45:00

Elapsed: 00:00:00.10
02:51:29 SQL> 
02:51:29 SQL> -- Prepare for derivation of NTILE based params:
02:51:29 SQL> 
02:51:29 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.30
02:51:29 SQL> CREATE TABLE svm6142 COMPRESS AS
02:51:29   2  SELECT
02:51:29   3  pair
02:51:29   4  ,ydate
02:51:29   5  ,prdate
02:51:29   6  ,clse
02:51:29   7  ,g6
02:51:29   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:51:29   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:51:29  10  ,CASE WHEN trend IS NULL THEN 1
02:51:29  11  	    WHEN trend =0      THEN 1
02:51:29  12  	    ELSE trend END trend
02:51:29  13  ,cm4
02:51:29  14  ,cm6
02:51:29  15  ,cm8
02:51:29  16  ,cm10
02:51:29  17  ,cm12
02:51:29  18  ,cm14
02:51:29  19  ,cm16
02:51:29  20  ,cm18
02:51:29  21  --
02:51:29  22  ,ca4
02:51:29  23  ,ca6
02:51:29  24  ,ca8
02:51:29  25  ,ca10
02:51:29  26  ,ca12
02:51:29  27  ,ca14
02:51:29  28  ,ca16
02:51:29  29  ,ca18
02:51:29  30  --
02:51:29  31  ,cx4
02:51:29  32  ,cx6
02:51:29  33  ,cx8
02:51:29  34  ,cx10
02:51:29  35  ,cx12
02:51:29  36  ,cx14
02:51:29  37  ,cx16
02:51:29  38  ,cx18
02:51:29  39  --
02:51:29  40  ,crr4
02:51:29  41  ,crr6
02:51:29  42  ,crr8
02:51:29  43  ,crr10
02:51:29  44  ,crr12
02:51:29  45  ,crr14
02:51:29  46  ,crr16
02:51:29  47  ,crr18
02:51:29  48  --
02:51:29  49  ,hh
02:51:29  50  ,d
02:51:29  51  ,w
02:51:29  52  ,mpm
02:51:29  53  ,mph
02:51:29  54  FROM svm6122
02:51:29  55  ORDER BY ydate
02:51:29  56  /

Table created.

Elapsed: 00:00:00.37
02:51:29 SQL> 
02:51:29 SQL> -- rpt
02:51:29 SQL> 
02:51:29 SQL> SELECT
02:51:29   2  pair
02:51:29   3  ,trend
02:51:29   4  ,gatt
02:51:29   5  ,COUNT(pair)
02:51:29   6  ,AVG(g6)
02:51:29   7  FROM svm6142
02:51:29   8  GROUP BY pair,trend,gatt
02:51:29   9  ORDER BY pair,trend,gatt
02:51:29  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6120 -.00268545
gbp_usd 	-1 up	      3473 .004328282
gbp_usd 	-1		60
gbp_usd 	 1 nup	      6084 -.00270301
gbp_usd 	 1 up	      3509 .004513729
gbp_usd 	 1		12

6 rows selected.

Elapsed: 00:00:00.17
02:51:30 SQL> 
02:51:30 SQL> 
02:51:30 SQL> -- Derive NTILE based params:
02:51:30 SQL> 
02:51:30 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.18
02:51:30 SQL> CREATE TABLE svm6162 COMPRESS AS
02:51:30   2  SELECT
02:51:30   3  pair
02:51:30   4  ,ydate
02:51:30   5  ,prdate
02:51:30   6  ,clse
02:51:30   7  ,g6
02:51:30   8  ,gatt
02:51:30   9  ,gattn
02:51:30  10  ,trend
02:51:30  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:51:30  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:51:30  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:51:30  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:51:30  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:51:30  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:51:30  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:51:30  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:51:30  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:51:30  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:51:30  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:51:30  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:51:30  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:51:30  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:51:30  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:51:30  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:51:30  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:51:30  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:51:30  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:51:30  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:51:30  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:51:30  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:51:30  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:51:30  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:51:30  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:51:30  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:51:30  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:51:30  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:51:30  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:51:30  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:51:30  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:51:30  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:51:30  43  ,hh  att32
02:51:30  44  ,d   att33
02:51:30  45  ,w   att34
02:51:30  46  ,mpm att35
02:51:30  47  ,mph att36
02:51:30  48  ,trend att37
02:51:30  49  FROM svm6142
02:51:30  50  ORDER BY ydate
02:51:30  51  /

Table created.

Elapsed: 00:00:04.80
02:51:35 SQL> 
02:51:35 SQL> -- rpt
02:51:35 SQL> 
02:51:35 SQL> SELECT
02:51:35   2  pair
02:51:35   3  ,trend
02:51:35   4  ,gatt
02:51:35   5  ,COUNT(pair)
02:51:35   6  ,AVG(g6)
02:51:35   7  FROM svm6162
02:51:35   8  GROUP BY pair,trend,gatt
02:51:35   9  ORDER BY pair,trend,gatt
02:51:35  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6120 -.00268545
gbp_usd 	-1 up	      3473 .004328282
gbp_usd 	-1		60
gbp_usd 	 1 nup	      6084 -.00270301
gbp_usd 	 1 up	      3509 .004513729
gbp_usd 	 1		12

6 rows selected.

Elapsed: 00:00:00.08
02:51:35 SQL> 
02:51:35 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
02:51:35 SQL> CREATE TABLE modsrc COMPRESS AS
02:51:35   2  SELECT
02:51:35   3  pair
02:51:35   4  ,ydate
02:51:35   5  ,prdate
02:51:35   6  ,trend
02:51:35   7  ,g6
02:51:35   8  ,gatt
02:51:35   9  ,gattn
02:51:35  10  FROM svm6162
02:51:35  11  /

Table created.

Elapsed: 00:00:00.09
02:51:35 SQL> 
02:51:35 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.26
02:51:35 SQL> 
02:51:35 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
02:51:35 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
02:51:35   2  SELECT
02:51:35   3  ydate
02:51:35   4  ,trend gbp_trend
02:51:35   5  ,g6    gbp_g6
02:51:35   6  ,gatt  gbp_gatt
02:51:35   7  ,gattn gbp_gattn
02:51:35   8  FROM modsrc
02:51:35   9  /

Table created.

Elapsed: 00:00:00.07
02:51:35 SQL> 
02:51:35 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
02:51:35 SQL> 
02:51:35 SQL> -- I need a copy of the attributes:
02:51:35 SQL> 
02:51:35 SQL> 
02:51:35 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.08
02:51:36 SQL> CREATE TABLE gbp_att COMPRESS AS
02:51:36   2  SELECT
02:51:36   3  ydate
02:51:36   4  ,att00 gbp_att00
02:51:36   5  ,att01 gbp_att01
02:51:36   6  ,att02 gbp_att02
02:51:36   7  ,att03 gbp_att03
02:51:36   8  ,att04 gbp_att04
02:51:36   9  ,att05 gbp_att05
02:51:36  10  ,att06 gbp_att06
02:51:36  11  ,att07 gbp_att07
02:51:36  12  ,att08 gbp_att08
02:51:36  13  ,att09 gbp_att09
02:51:36  14  ,att10 gbp_att10
02:51:36  15  ,att11 gbp_att11
02:51:36  16  ,att12 gbp_att12
02:51:36  17  ,att13 gbp_att13
02:51:36  18  ,att14 gbp_att14
02:51:36  19  ,att15 gbp_att15
02:51:36  20  ,att16 gbp_att16
02:51:36  21  ,att17 gbp_att17
02:51:36  22  ,att18 gbp_att18
02:51:36  23  ,att19 gbp_att19
02:51:36  24  ,att20 gbp_att20
02:51:36  25  ,att21 gbp_att21
02:51:36  26  ,att22 gbp_att22
02:51:36  27  ,att23 gbp_att23
02:51:36  28  ,att24 gbp_att24
02:51:36  29  ,att25 gbp_att25
02:51:36  30  ,att26 gbp_att26
02:51:36  31  ,att27 gbp_att27
02:51:36  32  ,att28 gbp_att28
02:51:36  33  ,att29 gbp_att29
02:51:36  34  ,att30 gbp_att30
02:51:36  35  ,att31 gbp_att31
02:51:36  36  ,att32 gbp_att32
02:51:36  37  ,att33 gbp_att33
02:51:36  38  ,att34 gbp_att34
02:51:36  39  ,att35 gbp_att35
02:51:36  40  ,att36 gbp_att36
02:51:36  41  ,att37 gbp_att37
02:51:36  42  FROM svm6162
02:51:36  43  /

Table created.

Elapsed: 00:00:00.18
02:51:36 SQL> 
02:51:36 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
02:51:36 SQL> 
02:51:36 SQL> -- rpt
02:51:36 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19258

Elapsed: 00:00:00.83
02:51:37 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19258

Elapsed: 00:00:00.00
02:51:37 SQL> 
02:51:37 SQL> --
02:51:37 SQL> -- jpy610.sql
02:51:37 SQL> --
02:51:37 SQL> 
02:51:37 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:51:37 SQL> 
02:51:37 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:01.57
02:51:39 SQL> 
02:51:39 SQL> -- I created di5min here:
02:51:39 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:51:39 SQL> 
02:51:39 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:51:39   2  SELECT
02:51:39   3  pair
02:51:39   4  ,ydate
02:51:39   5  ,prdate
02:51:39   6  ,rownum rnum -- acts as t in my time-series
02:51:39   7  ,clse
02:51:39   8  -- Derive a bunch of attributes from clse, the latest price:
02:51:39   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:51:39  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:51:39  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:51:39  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:51:39  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:51:39  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:51:39  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:51:39  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:51:39  17  --
02:51:39  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:51:39  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:51:39  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:51:39  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:51:39  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:51:39  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:51:39  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:51:39  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:51:39  26  --
02:51:39  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:51:39  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:51:39  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:51:39  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:51:39  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:51:39  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:51:39  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:51:39  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:51:39  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:51:39  36  FROM di5min WHERE pair LIKE'%jpy%'
02:51:39  37  AND ydate > sysdate - 95
02:51:39  38  ORDER BY ydate
02:51:39  39  /

View created.

Elapsed: 00:00:00.04
02:51:39 SQL> 
02:51:39 SQL> -- rpt
02:51:39 SQL> 
02:51:39 SQL> SELECT
02:51:39   2  pair
02:51:39   3  ,COUNT(pair)
02:51:39   4  ,MIN(clse),MAX(clse)
02:51:39   5  ,MIN(avg6),MAX(avg6)
02:51:39   6  ,MIN(ydate),MAX(ydate)
02:51:39   7  FROM svm6102
02:51:39   8  GROUP BY pair
02:51:39   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19256	 80.25	   84.485 80.3595205 84.3105479 2010-09-30 02:55:01 2011-01-03 02:45:00

Elapsed: 00:00:00.88
02:51:40 SQL> 
02:51:40 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:51:40 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.14
02:51:40 SQL> CREATE TABLE svm6122 COMPRESS AS
02:51:40   2  SELECT
02:51:40   3  pair
02:51:40   4  ,ydate
02:51:40   5  ,prdate
02:51:40   6  ,clse
02:51:40   7  -- g6 is important. I want to predict g6:
02:51:40   8  ,ld6 - clse g6
02:51:40   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:51:40  10  -- I want more attributes from the ones I derived above:
02:51:40  11  -- clse relation to moving-min
02:51:40  12  ,clse-min4  cm4
02:51:40  13  ,clse-min6  cm6
02:51:40  14  ,clse-min8  cm8
02:51:40  15  ,clse-min10 cm10
02:51:40  16  ,clse-min12 cm12
02:51:40  17  ,clse-min14 cm14
02:51:40  18  ,clse-min16 cm16
02:51:40  19  ,clse-min18 cm18
02:51:40  20  -- clse relation to moving-avg
02:51:40  21  ,clse-avg4  ca4
02:51:40  22  ,clse-avg6  ca6
02:51:40  23  ,clse-avg8  ca8
02:51:40  24  ,clse-avg10 ca10
02:51:40  25  ,clse-avg12 ca12
02:51:40  26  ,clse-avg14 ca14
02:51:40  27  ,clse-avg16 ca16
02:51:40  28  ,clse-avg18 ca18
02:51:40  29  -- clse relation to moving-max
02:51:40  30  ,clse-max4  cx4
02:51:40  31  ,clse-max6  cx6
02:51:40  32  ,clse-max8  cx8
02:51:40  33  ,clse-max10 cx10
02:51:40  34  ,clse-max12 cx12
02:51:40  35  ,clse-max14 cx14
02:51:40  36  ,clse-max16 cx16
02:51:40  37  ,clse-max18 cx18
02:51:40  38  -- Derive more attributes.
02:51:40  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:51:40  40  -- But COVAR_POP is more stable:
02:51:40  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:51:40  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:51:40  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:51:40  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:51:40  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:51:40  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:51:40  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:51:40  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:51:40  49  -- Derive date related attributes:
02:51:40  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:51:40  51  ,0+TO_CHAR(ydate,'D')d
02:51:40  52  ,0+TO_CHAR(ydate,'W')w
02:51:40  53  -- mpm stands for minutes-past-midnight:
02:51:40  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:51:40  55  -- mph stands for minutes-past-hour:
02:51:40  56  ,0+TO_CHAR(ydate,'MI')mph
02:51:40  57  FROM svm6102
02:51:40  58  ORDER BY ydate
02:51:40  59  /

Table created.

Elapsed: 00:00:02.04
02:51:42 SQL> 
02:51:42 SQL> -- rpt
02:51:42 SQL> 
02:51:42 SQL> SELECT
02:51:42   2  pair
02:51:42   3  ,COUNT(pair)
02:51:42   4  ,MIN(clse),MAX(clse)
02:51:42   5  ,MIN(ydate),MAX(ydate)
02:51:42   6  FROM svm6122
02:51:42   7  GROUP BY pair
02:51:42   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19256	 80.25	   84.485 2010-09-30 02:55:01 2011-01-03 02:45:00

Elapsed: 00:00:00.07
02:51:42 SQL> 
02:51:42 SQL> -- Prepare for derivation of NTILE based params:
02:51:42 SQL> 
02:51:42 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.36
02:51:42 SQL> CREATE TABLE svm6142 COMPRESS AS
02:51:42   2  SELECT
02:51:42   3  pair
02:51:42   4  ,ydate
02:51:42   5  ,prdate
02:51:42   6  ,clse
02:51:42   7  ,g6
02:51:42   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:51:42   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:51:42  10  ,CASE WHEN trend IS NULL THEN 1
02:51:42  11  	    WHEN trend =0      THEN 1
02:51:42  12  	    ELSE trend END trend
02:51:42  13  ,cm4
02:51:42  14  ,cm6
02:51:42  15  ,cm8
02:51:42  16  ,cm10
02:51:42  17  ,cm12
02:51:42  18  ,cm14
02:51:42  19  ,cm16
02:51:42  20  ,cm18
02:51:42  21  --
02:51:42  22  ,ca4
02:51:42  23  ,ca6
02:51:42  24  ,ca8
02:51:42  25  ,ca10
02:51:42  26  ,ca12
02:51:42  27  ,ca14
02:51:42  28  ,ca16
02:51:42  29  ,ca18
02:51:42  30  --
02:51:42  31  ,cx4
02:51:42  32  ,cx6
02:51:42  33  ,cx8
02:51:42  34  ,cx10
02:51:42  35  ,cx12
02:51:42  36  ,cx14
02:51:42  37  ,cx16
02:51:42  38  ,cx18
02:51:42  39  --
02:51:42  40  ,crr4
02:51:42  41  ,crr6
02:51:42  42  ,crr8
02:51:42  43  ,crr10
02:51:42  44  ,crr12
02:51:42  45  ,crr14
02:51:42  46  ,crr16
02:51:42  47  ,crr18
02:51:42  48  --
02:51:42  49  ,hh
02:51:42  50  ,d
02:51:42  51  ,w
02:51:42  52  ,mpm
02:51:42  53  ,mph
02:51:42  54  FROM svm6122
02:51:42  55  ORDER BY ydate
02:51:42  56  /

Table created.

Elapsed: 00:00:00.35
02:51:42 SQL> 
02:51:42 SQL> -- rpt
02:51:42 SQL> 
02:51:42 SQL> SELECT
02:51:42   2  pair
02:51:42   3  ,trend
02:51:42   4  ,gatt
02:51:42   5  ,COUNT(pair)
02:51:42   6  ,AVG(g6)
02:51:42   7  FROM svm6142
02:51:42   8  GROUP BY pair,trend,gatt
02:51:42   9  ORDER BY pair,trend,gatt
02:51:42  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5231 -.16575312
usd_jpy 	-1 up	      4862 .164919112
usd_jpy 	-1		23
usd_jpy 	 1 nup	      4975 -.15599849
usd_jpy 	 1 up	      4116 .166146221
usd_jpy 	 1		49

6 rows selected.

Elapsed: 00:00:00.04
02:51:43 SQL> 
02:51:43 SQL> 
02:51:43 SQL> -- Derive NTILE based params:
02:51:43 SQL> 
02:51:43 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
02:51:43 SQL> CREATE TABLE svm6162 COMPRESS AS
02:51:43   2  SELECT
02:51:43   3  pair
02:51:43   4  ,ydate
02:51:43   5  ,prdate
02:51:43   6  ,clse
02:51:43   7  ,g6
02:51:43   8  ,gatt
02:51:43   9  ,gattn
02:51:43  10  ,trend
02:51:43  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:51:43  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:51:43  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:51:43  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:51:43  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:51:43  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:51:43  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:51:43  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:51:43  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:51:43  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:51:43  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:51:43  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:51:43  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:51:43  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:51:43  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:51:43  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:51:43  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:51:43  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:51:43  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:51:43  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:51:43  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:51:43  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:51:43  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:51:43  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:51:43  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:51:43  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:51:43  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:51:43  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:51:43  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:51:43  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:51:43  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:51:43  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:51:43  43  ,hh  att32
02:51:43  44  ,d   att33
02:51:43  45  ,w   att34
02:51:43  46  ,mpm att35
02:51:43  47  ,mph att36
02:51:43  48  ,trend att37
02:51:43  49  FROM svm6142
02:51:43  50  ORDER BY ydate
02:51:43  51  /

Table created.

Elapsed: 00:00:04.63
02:51:47 SQL> 
02:51:47 SQL> -- rpt
02:51:47 SQL> 
02:51:47 SQL> SELECT
02:51:47   2  pair
02:51:47   3  ,trend
02:51:47   4  ,gatt
02:51:47   5  ,COUNT(pair)
02:51:47   6  ,AVG(g6)
02:51:47   7  FROM svm6162
02:51:47   8  GROUP BY pair,trend,gatt
02:51:47   9  ORDER BY pair,trend,gatt
02:51:47  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5231 -.16575312
usd_jpy 	-1 up	      4862 .164919112
usd_jpy 	-1		23
usd_jpy 	 1 nup	      4975 -.15599849
usd_jpy 	 1 up	      4116 .166146221
usd_jpy 	 1		49

6 rows selected.

Elapsed: 00:00:00.03
02:51:47 SQL> 
02:51:47 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.11
02:51:47 SQL> CREATE TABLE modsrc COMPRESS AS
02:51:47   2  SELECT
02:51:47   3  pair
02:51:47   4  ,ydate
02:51:47   5  ,prdate
02:51:47   6  ,trend
02:51:47   7  ,g6
02:51:47   8  ,gatt
02:51:47   9  ,gattn
02:51:47  10  FROM svm6162
02:51:47  11  /

Table created.

Elapsed: 00:00:00.08
02:51:47 SQL> 
02:51:47 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.28
02:51:48 SQL> 
02:51:48 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
02:51:48 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
02:51:48   2  SELECT
02:51:48   3  ydate
02:51:48   4  ,trend jpy_trend
02:51:48   5  ,g6    jpy_g6
02:51:48   6  ,gatt  jpy_gatt
02:51:48   7  ,gattn jpy_gattn
02:51:48   8  FROM modsrc
02:51:48   9  /

Table created.

Elapsed: 00:00:00.08
02:51:48 SQL> 
02:51:48 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
02:51:48 SQL> 
02:51:48 SQL> -- I need a copy of the attributes:
02:51:48 SQL> 
02:51:48 SQL> 
02:51:48 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.10
02:51:48 SQL> CREATE TABLE jpy_att COMPRESS AS
02:51:48   2  SELECT
02:51:48   3  ydate
02:51:48   4  ,att00 jpy_att00
02:51:48   5  ,att01 jpy_att01
02:51:48   6  ,att02 jpy_att02
02:51:48   7  ,att03 jpy_att03
02:51:48   8  ,att04 jpy_att04
02:51:48   9  ,att05 jpy_att05
02:51:48  10  ,att06 jpy_att06
02:51:48  11  ,att07 jpy_att07
02:51:48  12  ,att08 jpy_att08
02:51:48  13  ,att09 jpy_att09
02:51:48  14  ,att10 jpy_att10
02:51:48  15  ,att11 jpy_att11
02:51:48  16  ,att12 jpy_att12
02:51:48  17  ,att13 jpy_att13
02:51:48  18  ,att14 jpy_att14
02:51:48  19  ,att15 jpy_att15
02:51:48  20  ,att16 jpy_att16
02:51:48  21  ,att17 jpy_att17
02:51:48  22  ,att18 jpy_att18
02:51:48  23  ,att19 jpy_att19
02:51:48  24  ,att20 jpy_att20
02:51:48  25  ,att21 jpy_att21
02:51:48  26  ,att22 jpy_att22
02:51:48  27  ,att23 jpy_att23
02:51:48  28  ,att24 jpy_att24
02:51:48  29  ,att25 jpy_att25
02:51:48  30  ,att26 jpy_att26
02:51:48  31  ,att27 jpy_att27
02:51:48  32  ,att28 jpy_att28
02:51:48  33  ,att29 jpy_att29
02:51:48  34  ,att30 jpy_att30
02:51:48  35  ,att31 jpy_att31
02:51:48  36  ,att32 jpy_att32
02:51:48  37  ,att33 jpy_att33
02:51:48  38  ,att34 jpy_att34
02:51:48  39  ,att35 jpy_att35
02:51:48  40  ,att36 jpy_att36
02:51:48  41  ,att37 jpy_att37
02:51:48  42  FROM svm6162
02:51:48  43  /

Table created.

Elapsed: 00:00:00.19
02:51:48 SQL> 
02:51:48 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
02:51:49 SQL> 
02:51:49 SQL> -- rpt
02:51:49 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.87
02:51:50 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.01
02:51:50 SQL> 
02:51:50 SQL> --
02:51:50 SQL> -- cad610.sql
02:51:50 SQL> --
02:51:50 SQL> 
02:51:50 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:51:50 SQL> 
02:51:50 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.52
02:51:50 SQL> 
02:51:50 SQL> -- I created di5min here:
02:51:50 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:51:50 SQL> 
02:51:50 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:51:50   2  SELECT
02:51:50   3  pair
02:51:50   4  ,ydate
02:51:50   5  ,prdate
02:51:50   6  ,rownum rnum -- acts as t in my time-series
02:51:50   7  ,clse
02:51:50   8  -- Derive a bunch of attributes from clse, the latest price:
02:51:50   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:51:50  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:51:50  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:51:50  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:51:50  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:51:50  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:51:50  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:51:50  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:51:50  17  --
02:51:50  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:51:50  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:51:50  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:51:50  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:51:50  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:51:50  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:51:50  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:51:50  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:51:50  26  --
02:51:50  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:51:50  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:51:50  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:51:50  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:51:50  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:51:50  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:51:50  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:51:50  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:51:50  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:51:50  36  FROM di5min WHERE pair LIKE'%cad%'
02:51:50  37  AND ydate > sysdate - 95
02:51:50  38  ORDER BY ydate
02:51:50  39  /

View created.

Elapsed: 00:00:00.04
02:51:50 SQL> 
02:51:50 SQL> -- rpt
02:51:50 SQL> 
02:51:50 SQL> SELECT
02:51:50   2  pair
02:51:50   3  ,COUNT(pair)
02:51:50   4  ,MIN(clse),MAX(clse)
02:51:50   5  ,MIN(avg6),MAX(avg6)
02:51:50   6  ,MIN(ydate),MAX(ydate)
02:51:50   7  FROM svm6102
02:51:50   8  GROUP BY pair
02:51:50   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19256    .992825	   1.0355 .994575342 1.03365952 2010-09-30 02:55:01 2011-01-03 02:45:00

Elapsed: 00:00:00.81
02:51:51 SQL> 
02:51:51 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:51:51 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.19
02:51:51 SQL> CREATE TABLE svm6122 COMPRESS AS
02:51:51   2  SELECT
02:51:51   3  pair
02:51:51   4  ,ydate
02:51:51   5  ,prdate
02:51:51   6  ,clse
02:51:51   7  -- g6 is important. I want to predict g6:
02:51:51   8  ,ld6 - clse g6
02:51:51   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:51:51  10  -- I want more attributes from the ones I derived above:
02:51:51  11  -- clse relation to moving-min
02:51:51  12  ,clse-min4  cm4
02:51:51  13  ,clse-min6  cm6
02:51:51  14  ,clse-min8  cm8
02:51:51  15  ,clse-min10 cm10
02:51:51  16  ,clse-min12 cm12
02:51:51  17  ,clse-min14 cm14
02:51:51  18  ,clse-min16 cm16
02:51:51  19  ,clse-min18 cm18
02:51:51  20  -- clse relation to moving-avg
02:51:51  21  ,clse-avg4  ca4
02:51:51  22  ,clse-avg6  ca6
02:51:51  23  ,clse-avg8  ca8
02:51:51  24  ,clse-avg10 ca10
02:51:51  25  ,clse-avg12 ca12
02:51:51  26  ,clse-avg14 ca14
02:51:51  27  ,clse-avg16 ca16
02:51:51  28  ,clse-avg18 ca18
02:51:51  29  -- clse relation to moving-max
02:51:51  30  ,clse-max4  cx4
02:51:51  31  ,clse-max6  cx6
02:51:51  32  ,clse-max8  cx8
02:51:51  33  ,clse-max10 cx10
02:51:51  34  ,clse-max12 cx12
02:51:51  35  ,clse-max14 cx14
02:51:51  36  ,clse-max16 cx16
02:51:51  37  ,clse-max18 cx18
02:51:51  38  -- Derive more attributes.
02:51:51  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:51:51  40  -- But COVAR_POP is more stable:
02:51:51  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:51:51  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:51:51  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:51:51  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:51:51  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:51:51  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:51:51  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:51:51  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:51:51  49  -- Derive date related attributes:
02:51:51  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:51:51  51  ,0+TO_CHAR(ydate,'D')d
02:51:51  52  ,0+TO_CHAR(ydate,'W')w
02:51:51  53  -- mpm stands for minutes-past-midnight:
02:51:51  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:51:51  55  -- mph stands for minutes-past-hour:
02:51:51  56  ,0+TO_CHAR(ydate,'MI')mph
02:51:51  57  FROM svm6102
02:51:51  58  ORDER BY ydate
02:51:51  59  /

Table created.

Elapsed: 00:00:02.10
02:51:53 SQL> 
02:51:53 SQL> -- rpt
02:51:53 SQL> 
02:51:53 SQL> SELECT
02:51:53   2  pair
02:51:53   3  ,COUNT(pair)
02:51:53   4  ,MIN(clse),MAX(clse)
02:51:53   5  ,MIN(ydate),MAX(ydate)
02:51:53   6  FROM svm6122
02:51:53   7  GROUP BY pair
02:51:53   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19256    .992825	   1.0355 2010-09-30 02:55:01 2011-01-03 02:45:00

Elapsed: 00:00:00.03
02:51:53 SQL> 
02:51:53 SQL> -- Prepare for derivation of NTILE based params:
02:51:53 SQL> 
02:51:53 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
02:51:54 SQL> CREATE TABLE svm6142 COMPRESS AS
02:51:54   2  SELECT
02:51:54   3  pair
02:51:54   4  ,ydate
02:51:54   5  ,prdate
02:51:54   6  ,clse
02:51:54   7  ,g6
02:51:54   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:51:54   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:51:54  10  ,CASE WHEN trend IS NULL THEN 1
02:51:54  11  	    WHEN trend =0      THEN 1
02:51:54  12  	    ELSE trend END trend
02:51:54  13  ,cm4
02:51:54  14  ,cm6
02:51:54  15  ,cm8
02:51:54  16  ,cm10
02:51:54  17  ,cm12
02:51:54  18  ,cm14
02:51:54  19  ,cm16
02:51:54  20  ,cm18
02:51:54  21  --
02:51:54  22  ,ca4
02:51:54  23  ,ca6
02:51:54  24  ,ca8
02:51:54  25  ,ca10
02:51:54  26  ,ca12
02:51:54  27  ,ca14
02:51:54  28  ,ca16
02:51:54  29  ,ca18
02:51:54  30  --
02:51:54  31  ,cx4
02:51:54  32  ,cx6
02:51:54  33  ,cx8
02:51:54  34  ,cx10
02:51:54  35  ,cx12
02:51:54  36  ,cx14
02:51:54  37  ,cx16
02:51:54  38  ,cx18
02:51:54  39  --
02:51:54  40  ,crr4
02:51:54  41  ,crr6
02:51:54  42  ,crr8
02:51:54  43  ,crr10
02:51:54  44  ,crr12
02:51:54  45  ,crr14
02:51:54  46  ,crr16
02:51:54  47  ,crr18
02:51:54  48  --
02:51:54  49  ,hh
02:51:54  50  ,d
02:51:54  51  ,w
02:51:54  52  ,mpm
02:51:54  53  ,mph
02:51:54  54  FROM svm6122
02:51:54  55  ORDER BY ydate
02:51:54  56  /

Table created.

Elapsed: 00:00:00.37
02:51:54 SQL> 
02:51:54 SQL> -- rpt
02:51:54 SQL> 
02:51:54 SQL> SELECT
02:51:54   2  pair
02:51:54   3  ,trend
02:51:54   4  ,gatt
02:51:54   5  ,COUNT(pair)
02:51:54   6  ,AVG(g6)
02:51:54   7  FROM svm6142
02:51:54   8  GROUP BY pair,trend,gatt
02:51:54   9  ORDER BY pair,trend,gatt
02:51:54  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7310 -.00132093
usd_cad 	-1 up	      3000 .003056492
usd_cad 	-1		58
usd_cad 	 1 nup	      6569 -.00163012
usd_cad 	 1 up	      2305 .003653973
usd_cad 	 1		14

6 rows selected.

Elapsed: 00:00:00.04
02:51:54 SQL> 
02:51:54 SQL> 
02:51:54 SQL> -- Derive NTILE based params:
02:51:54 SQL> 
02:51:54 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
02:51:54 SQL> CREATE TABLE svm6162 COMPRESS AS
02:51:54   2  SELECT
02:51:54   3  pair
02:51:54   4  ,ydate
02:51:54   5  ,prdate
02:51:54   6  ,clse
02:51:54   7  ,g6
02:51:54   8  ,gatt
02:51:54   9  ,gattn
02:51:54  10  ,trend
02:51:54  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:51:54  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:51:54  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:51:54  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:51:54  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:51:54  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:51:54  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:51:54  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:51:54  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:51:54  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:51:54  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:51:54  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:51:54  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:51:54  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:51:54  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:51:54  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:51:54  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:51:54  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:51:54  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:51:54  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:51:54  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:51:54  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:51:54  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:51:54  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:51:54  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:51:54  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:51:54  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:51:54  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:51:54  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:51:54  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:51:54  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:51:54  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:51:54  43  ,hh  att32
02:51:54  44  ,d   att33
02:51:54  45  ,w   att34
02:51:54  46  ,mpm att35
02:51:54  47  ,mph att36
02:51:54  48  ,trend att37
02:51:54  49  FROM svm6142
02:51:54  50  ORDER BY ydate
02:51:54  51  /

Table created.

Elapsed: 00:00:04.71
02:51:59 SQL> 
02:51:59 SQL> -- rpt
02:51:59 SQL> 
02:51:59 SQL> SELECT
02:51:59   2  pair
02:51:59   3  ,trend
02:51:59   4  ,gatt
02:51:59   5  ,COUNT(pair)
02:51:59   6  ,AVG(g6)
02:51:59   7  FROM svm6162
02:51:59   8  GROUP BY pair,trend,gatt
02:51:59   9  ORDER BY pair,trend,gatt
02:51:59  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7310 -.00132093
usd_cad 	-1 up	      3000 .003056492
usd_cad 	-1		58
usd_cad 	 1 nup	      6569 -.00163012
usd_cad 	 1 up	      2305 .003653973
usd_cad 	 1		14

6 rows selected.

Elapsed: 00:00:00.03
02:51:59 SQL> 
02:51:59 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
02:51:59 SQL> CREATE TABLE modsrc COMPRESS AS
02:51:59   2  SELECT
02:51:59   3  pair
02:51:59   4  ,ydate
02:51:59   5  ,prdate
02:51:59   6  ,trend
02:51:59   7  ,g6
02:51:59   8  ,gatt
02:51:59   9  ,gattn
02:51:59  10  FROM svm6162
02:51:59  11  /

Table created.

Elapsed: 00:00:00.08
02:51:59 SQL> 
02:51:59 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
02:51:59 SQL> 
02:51:59 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.07
02:51:59 SQL> CREATE TABLE cad_ms610 COMPRESS AS
02:51:59   2  SELECT
02:51:59   3  ydate
02:51:59   4  ,trend cad_trend
02:51:59   5  ,g6    cad_g6
02:51:59   6  ,gatt  cad_gatt
02:51:59   7  ,gattn cad_gattn
02:51:59   8  FROM modsrc
02:51:59   9  /

Table created.

Elapsed: 00:00:00.07
02:51:59 SQL> 
02:51:59 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
02:52:00 SQL> 
02:52:00 SQL> -- I need a copy of the attributes:
02:52:00 SQL> 
02:52:00 SQL> 
02:52:00 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.13
02:52:00 SQL> CREATE TABLE cad_att COMPRESS AS
02:52:00   2  SELECT
02:52:00   3  ydate
02:52:00   4  ,att00 cad_att00
02:52:00   5  ,att01 cad_att01
02:52:00   6  ,att02 cad_att02
02:52:00   7  ,att03 cad_att03
02:52:00   8  ,att04 cad_att04
02:52:00   9  ,att05 cad_att05
02:52:00  10  ,att06 cad_att06
02:52:00  11  ,att07 cad_att07
02:52:00  12  ,att08 cad_att08
02:52:00  13  ,att09 cad_att09
02:52:00  14  ,att10 cad_att10
02:52:00  15  ,att11 cad_att11
02:52:00  16  ,att12 cad_att12
02:52:00  17  ,att13 cad_att13
02:52:00  18  ,att14 cad_att14
02:52:00  19  ,att15 cad_att15
02:52:00  20  ,att16 cad_att16
02:52:00  21  ,att17 cad_att17
02:52:00  22  ,att18 cad_att18
02:52:00  23  ,att19 cad_att19
02:52:00  24  ,att20 cad_att20
02:52:00  25  ,att21 cad_att21
02:52:00  26  ,att22 cad_att22
02:52:00  27  ,att23 cad_att23
02:52:00  28  ,att24 cad_att24
02:52:00  29  ,att25 cad_att25
02:52:00  30  ,att26 cad_att26
02:52:00  31  ,att27 cad_att27
02:52:00  32  ,att28 cad_att28
02:52:00  33  ,att29 cad_att29
02:52:00  34  ,att30 cad_att30
02:52:00  35  ,att31 cad_att31
02:52:00  36  ,att32 cad_att32
02:52:00  37  ,att33 cad_att33
02:52:00  38  ,att34 cad_att34
02:52:00  39  ,att35 cad_att35
02:52:00  40  ,att36 cad_att36
02:52:00  41  ,att37 cad_att37
02:52:00  42  FROM svm6162
02:52:00  43  /

Table created.

Elapsed: 00:00:00.18
02:52:00 SQL> 
02:52:00 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
02:52:00 SQL> 
02:52:00 SQL> -- rpt
02:52:00 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.80
02:52:01 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.00
02:52:01 SQL> 
02:52:01 SQL> --
02:52:01 SQL> -- chf610.sql
02:52:01 SQL> --
02:52:01 SQL> 
02:52:01 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:52:01 SQL> 
02:52:01 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
02:52:02 SQL> 
02:52:02 SQL> -- I created di5min here:
02:52:02 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:52:02 SQL> 
02:52:02 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:52:02   2  SELECT
02:52:02   3  pair
02:52:02   4  ,ydate
02:52:02   5  ,prdate
02:52:02   6  ,rownum rnum -- acts as t in my time-series
02:52:02   7  ,clse
02:52:02   8  -- Derive a bunch of attributes from clse, the latest price:
02:52:02   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:52:02  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:52:02  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:52:02  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:52:02  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:52:02  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:52:02  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:52:02  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:52:02  17  --
02:52:02  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:52:02  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:52:02  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:52:02  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:52:02  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:52:02  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:52:02  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:52:02  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:52:02  26  --
02:52:02  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:52:02  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:52:02  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:52:02  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:52:02  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:52:02  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:52:02  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:52:02  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:52:02  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:52:02  36  FROM di5min WHERE pair LIKE'%chf%'
02:52:02  37  AND ydate > sysdate - 95
02:52:02  38  ORDER BY ydate
02:52:02  39  /

View created.

Elapsed: 00:00:00.06
02:52:02 SQL> 
02:52:02 SQL> -- rpt
02:52:02 SQL> 
02:52:02 SQL> SELECT
02:52:02   2  pair
02:52:02   3  ,COUNT(pair)
02:52:02   4  ,MIN(clse),MAX(clse)
02:52:02   5  ,MIN(avg6),MAX(avg6)
02:52:02   6  ,MIN(ydate),MAX(ydate)
02:52:02   7  FROM svm6102
02:52:02   8  GROUP BY pair
02:52:02   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19259    .931675	  1.00635 .933969692 1.00498151 2010-09-30 02:55:01 2011-01-03 02:45:00

Elapsed: 00:00:00.83
02:52:02 SQL> 
02:52:02 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:52:02 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.15
02:52:03 SQL> CREATE TABLE svm6122 COMPRESS AS
02:52:03   2  SELECT
02:52:03   3  pair
02:52:03   4  ,ydate
02:52:03   5  ,prdate
02:52:03   6  ,clse
02:52:03   7  -- g6 is important. I want to predict g6:
02:52:03   8  ,ld6 - clse g6
02:52:03   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:52:03  10  -- I want more attributes from the ones I derived above:
02:52:03  11  -- clse relation to moving-min
02:52:03  12  ,clse-min4  cm4
02:52:03  13  ,clse-min6  cm6
02:52:03  14  ,clse-min8  cm8
02:52:03  15  ,clse-min10 cm10
02:52:03  16  ,clse-min12 cm12
02:52:03  17  ,clse-min14 cm14
02:52:03  18  ,clse-min16 cm16
02:52:03  19  ,clse-min18 cm18
02:52:03  20  -- clse relation to moving-avg
02:52:03  21  ,clse-avg4  ca4
02:52:03  22  ,clse-avg6  ca6
02:52:03  23  ,clse-avg8  ca8
02:52:03  24  ,clse-avg10 ca10
02:52:03  25  ,clse-avg12 ca12
02:52:03  26  ,clse-avg14 ca14
02:52:03  27  ,clse-avg16 ca16
02:52:03  28  ,clse-avg18 ca18
02:52:03  29  -- clse relation to moving-max
02:52:03  30  ,clse-max4  cx4
02:52:03  31  ,clse-max6  cx6
02:52:03  32  ,clse-max8  cx8
02:52:03  33  ,clse-max10 cx10
02:52:03  34  ,clse-max12 cx12
02:52:03  35  ,clse-max14 cx14
02:52:03  36  ,clse-max16 cx16
02:52:03  37  ,clse-max18 cx18
02:52:03  38  -- Derive more attributes.
02:52:03  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:52:03  40  -- But COVAR_POP is more stable:
02:52:03  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:52:03  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:52:03  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:52:03  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:52:03  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:52:03  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:52:03  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:52:03  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:52:03  49  -- Derive date related attributes:
02:52:03  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:52:03  51  ,0+TO_CHAR(ydate,'D')d
02:52:03  52  ,0+TO_CHAR(ydate,'W')w
02:52:03  53  -- mpm stands for minutes-past-midnight:
02:52:03  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:52:03  55  -- mph stands for minutes-past-hour:
02:52:03  56  ,0+TO_CHAR(ydate,'MI')mph
02:52:03  57  FROM svm6102
02:52:03  58  ORDER BY ydate
02:52:03  59  /

Table created.

Elapsed: 00:00:02.02
02:52:05 SQL> 
02:52:05 SQL> -- rpt
02:52:05 SQL> 
02:52:05 SQL> SELECT
02:52:05   2  pair
02:52:05   3  ,COUNT(pair)
02:52:05   4  ,MIN(clse),MAX(clse)
02:52:05   5  ,MIN(ydate),MAX(ydate)
02:52:05   6  FROM svm6122
02:52:05   7  GROUP BY pair
02:52:05   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19259    .931675	  1.00635 2010-09-30 02:55:01 2011-01-03 02:45:00

Elapsed: 00:00:00.04
02:52:05 SQL> 
02:52:05 SQL> -- Prepare for derivation of NTILE based params:
02:52:05 SQL> 
02:52:05 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.19
02:52:05 SQL> CREATE TABLE svm6142 COMPRESS AS
02:52:05   2  SELECT
02:52:05   3  pair
02:52:05   4  ,ydate
02:52:05   5  ,prdate
02:52:05   6  ,clse
02:52:05   7  ,g6
02:52:05   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:52:05   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:52:05  10  ,CASE WHEN trend IS NULL THEN 1
02:52:05  11  	    WHEN trend =0      THEN 1
02:52:05  12  	    ELSE trend END trend
02:52:05  13  ,cm4
02:52:05  14  ,cm6
02:52:05  15  ,cm8
02:52:05  16  ,cm10
02:52:05  17  ,cm12
02:52:05  18  ,cm14
02:52:05  19  ,cm16
02:52:05  20  ,cm18
02:52:05  21  --
02:52:05  22  ,ca4
02:52:05  23  ,ca6
02:52:05  24  ,ca8
02:52:05  25  ,ca10
02:52:05  26  ,ca12
02:52:05  27  ,ca14
02:52:05  28  ,ca16
02:52:05  29  ,ca18
02:52:05  30  --
02:52:05  31  ,cx4
02:52:05  32  ,cx6
02:52:05  33  ,cx8
02:52:05  34  ,cx10
02:52:05  35  ,cx12
02:52:05  36  ,cx14
02:52:05  37  ,cx16
02:52:05  38  ,cx18
02:52:05  39  --
02:52:05  40  ,crr4
02:52:05  41  ,crr6
02:52:05  42  ,crr8
02:52:05  43  ,crr10
02:52:05  44  ,crr12
02:52:05  45  ,crr14
02:52:05  46  ,crr16
02:52:05  47  ,crr18
02:52:05  48  --
02:52:05  49  ,hh
02:52:05  50  ,d
02:52:05  51  ,w
02:52:05  52  ,mpm
02:52:05  53  ,mph
02:52:05  54  FROM svm6122
02:52:05  55  ORDER BY ydate
02:52:05  56  /

Table created.

Elapsed: 00:00:00.35
02:52:05 SQL> 
02:52:05 SQL> -- rpt
02:52:05 SQL> 
02:52:05 SQL> SELECT
02:52:05   2  pair
02:52:05   3  ,trend
02:52:05   4  ,gatt
02:52:05   5  ,COUNT(pair)
02:52:05   6  ,AVG(g6)
02:52:05   7  FROM svm6142
02:52:05   8  GROUP BY pair,trend,gatt
02:52:05   9  ORDER BY pair,trend,gatt
02:52:05  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7213  -.0020002
usd_chf 	-1 up	      3083  .00395246
usd_chf 	-1		22
usd_chf 	 1 nup	      6346  -.0016185
usd_chf 	 1 up	      2545 .003704633
usd_chf 	 1		50

6 rows selected.

Elapsed: 00:00:00.03
02:52:05 SQL> 
02:52:05 SQL> 
02:52:05 SQL> -- Derive NTILE based params:
02:52:05 SQL> 
02:52:05 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
02:52:05 SQL> CREATE TABLE svm6162 COMPRESS AS
02:52:05   2  SELECT
02:52:05   3  pair
02:52:05   4  ,ydate
02:52:05   5  ,prdate
02:52:05   6  ,clse
02:52:05   7  ,g6
02:52:05   8  ,gatt
02:52:05   9  ,gattn
02:52:05  10  ,trend
02:52:05  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:52:05  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:52:05  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:52:05  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:52:05  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:52:05  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:52:05  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:52:05  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:52:05  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:52:05  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:52:05  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:52:05  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:52:05  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:52:05  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:52:05  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:52:05  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:52:05  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:52:05  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:52:05  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:52:05  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:52:05  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:52:05  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:52:05  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:52:05  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:52:05  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:52:05  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:52:05  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:52:05  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:52:05  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:52:05  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:52:05  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:52:05  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:52:05  43  ,hh  att32
02:52:05  44  ,d   att33
02:52:05  45  ,w   att34
02:52:05  46  ,mpm att35
02:52:05  47  ,mph att36
02:52:05  48  ,trend att37
02:52:05  49  FROM svm6142
02:52:05  50  ORDER BY ydate
02:52:05  51  /

Table created.

Elapsed: 00:00:04.81
02:52:10 SQL> 
02:52:10 SQL> -- rpt
02:52:10 SQL> 
02:52:10 SQL> SELECT
02:52:10   2  pair
02:52:10   3  ,trend
02:52:10   4  ,gatt
02:52:10   5  ,COUNT(pair)
02:52:10   6  ,AVG(g6)
02:52:10   7  FROM svm6162
02:52:10   8  GROUP BY pair,trend,gatt
02:52:10   9  ORDER BY pair,trend,gatt
02:52:10  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7213  -.0020002
usd_chf 	-1 up	      3083  .00395246
usd_chf 	-1		22
usd_chf 	 1 nup	      6346  -.0016185
usd_chf 	 1 up	      2545 .003704633
usd_chf 	 1		50

6 rows selected.

Elapsed: 00:00:00.03
02:52:10 SQL> 
02:52:10 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.10
02:52:10 SQL> CREATE TABLE modsrc COMPRESS AS
02:52:10   2  SELECT
02:52:10   3  pair
02:52:10   4  ,ydate
02:52:10   5  ,prdate
02:52:10   6  ,trend
02:52:10   7  ,g6
02:52:10   8  ,gatt
02:52:10   9  ,gattn
02:52:10  10  FROM svm6162
02:52:10  11  /

Table created.

Elapsed: 00:00:00.08
02:52:10 SQL> 
02:52:10 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
02:52:11 SQL> 
02:52:11 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
02:52:11 SQL> CREATE TABLE chf_ms610 COMPRESS AS
02:52:11   2  SELECT
02:52:11   3  ydate
02:52:11   4  ,trend chf_trend
02:52:11   5  ,g6    chf_g6
02:52:11   6  ,gatt  chf_gatt
02:52:11   7  ,gattn chf_gattn
02:52:11   8  FROM modsrc
02:52:11   9  /

Table created.

Elapsed: 00:00:00.08
02:52:11 SQL> 
02:52:11 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
02:52:11 SQL> 
02:52:11 SQL> -- I need a copy of the attributes:
02:52:11 SQL> 
02:52:11 SQL> 
02:52:11 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.10
02:52:11 SQL> CREATE TABLE chf_att COMPRESS AS
02:52:11   2  SELECT
02:52:11   3  ydate
02:52:11   4  ,att00 chf_att00
02:52:11   5  ,att01 chf_att01
02:52:11   6  ,att02 chf_att02
02:52:11   7  ,att03 chf_att03
02:52:11   8  ,att04 chf_att04
02:52:11   9  ,att05 chf_att05
02:52:11  10  ,att06 chf_att06
02:52:11  11  ,att07 chf_att07
02:52:11  12  ,att08 chf_att08
02:52:11  13  ,att09 chf_att09
02:52:11  14  ,att10 chf_att10
02:52:11  15  ,att11 chf_att11
02:52:11  16  ,att12 chf_att12
02:52:11  17  ,att13 chf_att13
02:52:11  18  ,att14 chf_att14
02:52:11  19  ,att15 chf_att15
02:52:11  20  ,att16 chf_att16
02:52:11  21  ,att17 chf_att17
02:52:11  22  ,att18 chf_att18
02:52:11  23  ,att19 chf_att19
02:52:11  24  ,att20 chf_att20
02:52:11  25  ,att21 chf_att21
02:52:11  26  ,att22 chf_att22
02:52:11  27  ,att23 chf_att23
02:52:11  28  ,att24 chf_att24
02:52:11  29  ,att25 chf_att25
02:52:11  30  ,att26 chf_att26
02:52:11  31  ,att27 chf_att27
02:52:11  32  ,att28 chf_att28
02:52:11  33  ,att29 chf_att29
02:52:11  34  ,att30 chf_att30
02:52:11  35  ,att31 chf_att31
02:52:11  36  ,att32 chf_att32
02:52:11  37  ,att33 chf_att33
02:52:11  38  ,att34 chf_att34
02:52:11  39  ,att35 chf_att35
02:52:11  40  ,att36 chf_att36
02:52:11  41  ,att37 chf_att37
02:52:11  42  FROM svm6162
02:52:11  43  /

Table created.

Elapsed: 00:00:00.21
02:52:11 SQL> 
02:52:11 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
02:52:12 SQL> 
02:52:12 SQL> -- rpt
02:52:12 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.84
02:52:13 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.00
02:52:13 SQL> 
02:52:13 SQL> --
02:52:13 SQL> -- ech610.sql
02:52:13 SQL> --
02:52:13 SQL> 
02:52:13 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:52:13 SQL> 
02:52:13 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.46
02:52:13 SQL> 
02:52:13 SQL> -- I created di5min here:
02:52:13 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:52:13 SQL> 
02:52:13 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:52:13   2  SELECT
02:52:13   3  pair
02:52:13   4  ,ydate
02:52:13   5  ,prdate
02:52:13   6  ,rownum rnum -- acts as t in my time-series
02:52:13   7  ,clse
02:52:13   8  -- Derive a bunch of attributes from clse, the latest price:
02:52:13   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:52:13  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:52:13  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:52:13  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:52:13  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:52:13  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:52:13  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:52:13  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:52:13  17  --
02:52:13  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:52:13  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:52:13  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:52:13  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:52:13  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:52:13  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:52:13  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:52:13  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:52:13  26  --
02:52:13  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:52:13  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:52:13  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:52:13  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:52:13  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:52:13  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:52:13  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:52:13  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:52:13  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:52:13  36  FROM di5min WHERE pair LIKE'%ech%'
02:52:13  37  AND ydate > sysdate - 95
02:52:13  38  ORDER BY ydate
02:52:13  39  /

View created.

Elapsed: 00:00:00.05
02:52:13 SQL> 
02:52:13 SQL> -- rpt
02:52:13 SQL> 
02:52:13 SQL> SELECT
02:52:13   2  pair
02:52:13   3  ,COUNT(pair)
02:52:13   4  ,MIN(clse),MAX(clse)
02:52:13   5  ,MIN(avg6),MAX(avg6)
02:52:13   6  ,MIN(ydate),MAX(ydate)
02:52:13   7  FROM svm6102
02:52:13   8  GROUP BY pair
02:52:13   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19258 1.24213032 1.38284305  1.2432071 1.37986485 2010-09-30 02:55:01 2011-01-03 02:45:00

Elapsed: 00:00:00.77
02:52:14 SQL> 
02:52:14 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:52:14 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.25
02:52:14 SQL> CREATE TABLE svm6122 COMPRESS AS
02:52:14   2  SELECT
02:52:14   3  pair
02:52:14   4  ,ydate
02:52:14   5  ,prdate
02:52:14   6  ,clse
02:52:14   7  -- g6 is important. I want to predict g6:
02:52:14   8  ,ld6 - clse g6
02:52:14   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:52:14  10  -- I want more attributes from the ones I derived above:
02:52:14  11  -- clse relation to moving-min
02:52:14  12  ,clse-min4  cm4
02:52:14  13  ,clse-min6  cm6
02:52:14  14  ,clse-min8  cm8
02:52:14  15  ,clse-min10 cm10
02:52:14  16  ,clse-min12 cm12
02:52:14  17  ,clse-min14 cm14
02:52:14  18  ,clse-min16 cm16
02:52:14  19  ,clse-min18 cm18
02:52:14  20  -- clse relation to moving-avg
02:52:14  21  ,clse-avg4  ca4
02:52:14  22  ,clse-avg6  ca6
02:52:14  23  ,clse-avg8  ca8
02:52:14  24  ,clse-avg10 ca10
02:52:14  25  ,clse-avg12 ca12
02:52:14  26  ,clse-avg14 ca14
02:52:14  27  ,clse-avg16 ca16
02:52:14  28  ,clse-avg18 ca18
02:52:14  29  -- clse relation to moving-max
02:52:14  30  ,clse-max4  cx4
02:52:14  31  ,clse-max6  cx6
02:52:14  32  ,clse-max8  cx8
02:52:14  33  ,clse-max10 cx10
02:52:14  34  ,clse-max12 cx12
02:52:14  35  ,clse-max14 cx14
02:52:14  36  ,clse-max16 cx16
02:52:14  37  ,clse-max18 cx18
02:52:14  38  -- Derive more attributes.
02:52:14  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:52:14  40  -- But COVAR_POP is more stable:
02:52:14  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:52:14  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:52:14  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:52:14  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:52:14  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:52:14  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:52:14  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:52:14  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:52:14  49  -- Derive date related attributes:
02:52:14  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:52:14  51  ,0+TO_CHAR(ydate,'D')d
02:52:14  52  ,0+TO_CHAR(ydate,'W')w
02:52:14  53  -- mpm stands for minutes-past-midnight:
02:52:14  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:52:14  55  -- mph stands for minutes-past-hour:
02:52:14  56  ,0+TO_CHAR(ydate,'MI')mph
02:52:14  57  FROM svm6102
02:52:14  58  ORDER BY ydate
02:52:14  59  /

Table created.

Elapsed: 00:00:02.09
02:52:16 SQL> 
02:52:16 SQL> -- rpt
02:52:16 SQL> 
02:52:16 SQL> SELECT
02:52:16   2  pair
02:52:16   3  ,COUNT(pair)
02:52:16   4  ,MIN(clse),MAX(clse)
02:52:16   5  ,MIN(ydate),MAX(ydate)
02:52:16   6  FROM svm6122
02:52:16   7  GROUP BY pair
02:52:16   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19258 1.24213032 1.38284305 2010-09-30 02:55:01 2011-01-03 02:45:00

Elapsed: 00:00:00.04
02:52:16 SQL> 
02:52:16 SQL> -- Prepare for derivation of NTILE based params:
02:52:16 SQL> 
02:52:16 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.19
02:52:16 SQL> CREATE TABLE svm6142 COMPRESS AS
02:52:16   2  SELECT
02:52:16   3  pair
02:52:16   4  ,ydate
02:52:16   5  ,prdate
02:52:16   6  ,clse
02:52:16   7  ,g6
02:52:16   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:52:16   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:52:16  10  ,CASE WHEN trend IS NULL THEN 1
02:52:16  11  	    WHEN trend =0      THEN 1
02:52:16  12  	    ELSE trend END trend
02:52:16  13  ,cm4
02:52:16  14  ,cm6
02:52:16  15  ,cm8
02:52:16  16  ,cm10
02:52:16  17  ,cm12
02:52:16  18  ,cm14
02:52:16  19  ,cm16
02:52:16  20  ,cm18
02:52:16  21  --
02:52:16  22  ,ca4
02:52:16  23  ,ca6
02:52:16  24  ,ca8
02:52:16  25  ,ca10
02:52:16  26  ,ca12
02:52:16  27  ,ca14
02:52:16  28  ,ca16
02:52:16  29  ,ca18
02:52:16  30  --
02:52:16  31  ,cx4
02:52:16  32  ,cx6
02:52:16  33  ,cx8
02:52:16  34  ,cx10
02:52:16  35  ,cx12
02:52:16  36  ,cx14
02:52:16  37  ,cx16
02:52:16  38  ,cx18
02:52:16  39  --
02:52:16  40  ,crr4
02:52:16  41  ,crr6
02:52:16  42  ,crr8
02:52:16  43  ,crr10
02:52:16  44  ,crr12
02:52:16  45  ,crr14
02:52:16  46  ,crr16
02:52:16  47  ,crr18
02:52:16  48  --
02:52:16  49  ,hh
02:52:16  50  ,d
02:52:16  51  ,w
02:52:16  52  ,mpm
02:52:16  53  ,mph
02:52:16  54  FROM svm6122
02:52:16  55  ORDER BY ydate
02:52:16  56  /

Table created.

Elapsed: 00:00:00.39
02:52:17 SQL> 
02:52:17 SQL> -- rpt
02:52:17 SQL> 
02:52:17 SQL> SELECT
02:52:17   2  pair
02:52:17   3  ,trend
02:52:17   4  ,gatt
02:52:17   5  ,COUNT(pair)
02:52:17   6  ,AVG(g6)
02:52:17   7  FROM svm6142
02:52:17   8  GROUP BY pair,trend,gatt
02:52:17   9  ORDER BY pair,trend,gatt
02:52:17  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6482 -.00224642
ech_usd 	-1 up	      3515 .003560325
ech_usd 	-1		59
ech_usd 	 1 nup	      6320 -.00237155
ech_usd 	 1 up	      2869 .003857801
ech_usd 	 1		13

6 rows selected.

Elapsed: 00:00:00.04
02:52:17 SQL> 
02:52:17 SQL> 
02:52:17 SQL> -- Derive NTILE based params:
02:52:17 SQL> 
02:52:17 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
02:52:17 SQL> CREATE TABLE svm6162 COMPRESS AS
02:52:17   2  SELECT
02:52:17   3  pair
02:52:17   4  ,ydate
02:52:17   5  ,prdate
02:52:17   6  ,clse
02:52:17   7  ,g6
02:52:17   8  ,gatt
02:52:17   9  ,gattn
02:52:17  10  ,trend
02:52:17  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:52:17  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:52:17  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:52:17  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:52:17  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:52:17  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:52:17  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:52:17  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:52:17  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:52:17  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:52:17  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:52:17  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:52:17  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:52:17  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:52:17  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:52:17  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:52:17  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:52:17  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:52:17  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:52:17  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:52:17  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:52:17  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:52:17  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:52:17  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:52:17  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:52:17  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:52:17  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:52:17  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:52:17  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:52:17  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:52:17  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:52:17  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:52:17  43  ,hh  att32
02:52:17  44  ,d   att33
02:52:17  45  ,w   att34
02:52:17  46  ,mpm att35
02:52:17  47  ,mph att36
02:52:17  48  ,trend att37
02:52:17  49  FROM svm6142
02:52:17  50  ORDER BY ydate
02:52:17  51  /

Table created.

Elapsed: 00:00:05.02
02:52:22 SQL> 
02:52:22 SQL> -- rpt
02:52:22 SQL> 
02:52:22 SQL> SELECT
02:52:22   2  pair
02:52:22   3  ,trend
02:52:22   4  ,gatt
02:52:22   5  ,COUNT(pair)
02:52:22   6  ,AVG(g6)
02:52:22   7  FROM svm6162
02:52:22   8  GROUP BY pair,trend,gatt
02:52:22   9  ORDER BY pair,trend,gatt
02:52:22  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6482 -.00224642
ech_usd 	-1 up	      3515 .003560325
ech_usd 	-1		59
ech_usd 	 1 nup	      6320 -.00237155
ech_usd 	 1 up	      2869 .003857801
ech_usd 	 1		13

6 rows selected.

Elapsed: 00:00:00.03
02:52:22 SQL> 
02:52:22 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
02:52:22 SQL> CREATE TABLE modsrc COMPRESS AS
02:52:22   2  SELECT
02:52:22   3  pair
02:52:22   4  ,ydate
02:52:22   5  ,prdate
02:52:22   6  ,trend
02:52:22   7  ,g6
02:52:22   8  ,gatt
02:52:22   9  ,gattn
02:52:22  10  FROM svm6162
02:52:22  11  /

Table created.

Elapsed: 00:00:00.08
02:52:22 SQL> 
02:52:22 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
02:52:22 SQL> 
02:52:22 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.08
02:52:23 SQL> CREATE TABLE ech_ms610 COMPRESS AS
02:52:23   2  SELECT
02:52:23   3  ydate
02:52:23   4  ,trend ech_trend
02:52:23   5  ,g6    ech_g6
02:52:23   6  ,gatt  ech_gatt
02:52:23   7  ,gattn ech_gattn
02:52:23   8  FROM modsrc
02:52:23   9  /

Table created.

Elapsed: 00:00:00.06
02:52:23 SQL> 
02:52:23 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.24
02:52:23 SQL> 
02:52:23 SQL> -- I need a copy of the attributes:
02:52:23 SQL> 
02:52:23 SQL> 
02:52:23 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.48
02:52:23 SQL> CREATE TABLE ech_att COMPRESS AS
02:52:23   2  SELECT
02:52:23   3  ydate
02:52:23   4  ,att00 ech_att00
02:52:23   5  ,att01 ech_att01
02:52:23   6  ,att02 ech_att02
02:52:23   7  ,att03 ech_att03
02:52:23   8  ,att04 ech_att04
02:52:23   9  ,att05 ech_att05
02:52:23  10  ,att06 ech_att06
02:52:23  11  ,att07 ech_att07
02:52:23  12  ,att08 ech_att08
02:52:23  13  ,att09 ech_att09
02:52:23  14  ,att10 ech_att10
02:52:23  15  ,att11 ech_att11
02:52:23  16  ,att12 ech_att12
02:52:23  17  ,att13 ech_att13
02:52:23  18  ,att14 ech_att14
02:52:23  19  ,att15 ech_att15
02:52:23  20  ,att16 ech_att16
02:52:23  21  ,att17 ech_att17
02:52:23  22  ,att18 ech_att18
02:52:23  23  ,att19 ech_att19
02:52:23  24  ,att20 ech_att20
02:52:23  25  ,att21 ech_att21
02:52:23  26  ,att22 ech_att22
02:52:23  27  ,att23 ech_att23
02:52:23  28  ,att24 ech_att24
02:52:23  29  ,att25 ech_att25
02:52:23  30  ,att26 ech_att26
02:52:23  31  ,att27 ech_att27
02:52:23  32  ,att28 ech_att28
02:52:23  33  ,att29 ech_att29
02:52:23  34  ,att30 ech_att30
02:52:23  35  ,att31 ech_att31
02:52:23  36  ,att32 ech_att32
02:52:23  37  ,att33 ech_att33
02:52:23  38  ,att34 ech_att34
02:52:23  39  ,att35 ech_att35
02:52:23  40  ,att36 ech_att36
02:52:23  41  ,att37 ech_att37
02:52:23  42  FROM svm6162
02:52:23  43  /

Table created.

Elapsed: 00:00:00.22
02:52:24 SQL> 
02:52:24 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
02:52:24 SQL> 
02:52:24 SQL> -- rpt
02:52:24 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19258

Elapsed: 00:00:00.78
02:52:25 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19258

Elapsed: 00:00:00.00
02:52:25 SQL> 
02:52:25 SQL> --
02:52:25 SQL> -- egb610.sql
02:52:25 SQL> --
02:52:25 SQL> 
02:52:25 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:52:25 SQL> 
02:52:25 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.50
02:52:25 SQL> 
02:52:25 SQL> -- I created di5min here:
02:52:25 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:52:25 SQL> 
02:52:25 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:52:25   2  SELECT
02:52:25   3  pair
02:52:25   4  ,ydate
02:52:25   5  ,prdate
02:52:25   6  ,rownum rnum -- acts as t in my time-series
02:52:25   7  ,clse
02:52:25   8  -- Derive a bunch of attributes from clse, the latest price:
02:52:25   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:52:25  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:52:25  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:52:25  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:52:25  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:52:25  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:52:25  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:52:25  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:52:25  17  --
02:52:25  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:52:25  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:52:25  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:52:25  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:52:25  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:52:25  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:52:25  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:52:25  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:52:25  26  --
02:52:25  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:52:25  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:52:25  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:52:25  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:52:25  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:52:25  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:52:25  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:52:25  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:52:25  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:52:25  36  FROM di5min WHERE pair LIKE'%egb%'
02:52:25  37  AND ydate > sysdate - 95
02:52:25  38  ORDER BY ydate
02:52:25  39  /

View created.

Elapsed: 00:00:00.05
02:52:25 SQL> 
02:52:25 SQL> -- rpt
02:52:25 SQL> 
02:52:25 SQL> SELECT
02:52:25   2  pair
02:52:25   3  ,COUNT(pair)
02:52:25   4  ,MIN(clse),MAX(clse)
02:52:25   5  ,MIN(avg6),MAX(avg6)
02:52:25   6  ,MIN(ydate),MAX(ydate)
02:52:25   7  FROM svm6102
02:52:25   8  GROUP BY pair
02:52:25   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19257 .833520557 .893920122 .834199029 .892400287 2010-09-30 02:55:01 2011-01-03 02:45:00

Elapsed: 00:00:00.94
02:52:26 SQL> 
02:52:26 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:52:26 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.22
02:52:26 SQL> CREATE TABLE svm6122 COMPRESS AS
02:52:26   2  SELECT
02:52:26   3  pair
02:52:26   4  ,ydate
02:52:26   5  ,prdate
02:52:26   6  ,clse
02:52:26   7  -- g6 is important. I want to predict g6:
02:52:26   8  ,ld6 - clse g6
02:52:26   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:52:26  10  -- I want more attributes from the ones I derived above:
02:52:26  11  -- clse relation to moving-min
02:52:26  12  ,clse-min4  cm4
02:52:26  13  ,clse-min6  cm6
02:52:26  14  ,clse-min8  cm8
02:52:26  15  ,clse-min10 cm10
02:52:26  16  ,clse-min12 cm12
02:52:26  17  ,clse-min14 cm14
02:52:26  18  ,clse-min16 cm16
02:52:26  19  ,clse-min18 cm18
02:52:26  20  -- clse relation to moving-avg
02:52:26  21  ,clse-avg4  ca4
02:52:26  22  ,clse-avg6  ca6
02:52:26  23  ,clse-avg8  ca8
02:52:26  24  ,clse-avg10 ca10
02:52:26  25  ,clse-avg12 ca12
02:52:26  26  ,clse-avg14 ca14
02:52:26  27  ,clse-avg16 ca16
02:52:26  28  ,clse-avg18 ca18
02:52:26  29  -- clse relation to moving-max
02:52:26  30  ,clse-max4  cx4
02:52:26  31  ,clse-max6  cx6
02:52:26  32  ,clse-max8  cx8
02:52:26  33  ,clse-max10 cx10
02:52:26  34  ,clse-max12 cx12
02:52:26  35  ,clse-max14 cx14
02:52:26  36  ,clse-max16 cx16
02:52:26  37  ,clse-max18 cx18
02:52:26  38  -- Derive more attributes.
02:52:26  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:52:26  40  -- But COVAR_POP is more stable:
02:52:26  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:52:26  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:52:26  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:52:26  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:52:26  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:52:26  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:52:26  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:52:26  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:52:26  49  -- Derive date related attributes:
02:52:26  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:52:26  51  ,0+TO_CHAR(ydate,'D')d
02:52:26  52  ,0+TO_CHAR(ydate,'W')w
02:52:26  53  -- mpm stands for minutes-past-midnight:
02:52:26  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:52:26  55  -- mph stands for minutes-past-hour:
02:52:26  56  ,0+TO_CHAR(ydate,'MI')mph
02:52:26  57  FROM svm6102
02:52:26  58  ORDER BY ydate
02:52:26  59  /

Table created.

Elapsed: 00:00:02.43
02:52:29 SQL> 
02:52:29 SQL> -- rpt
02:52:29 SQL> 
02:52:29 SQL> SELECT
02:52:29   2  pair
02:52:29   3  ,COUNT(pair)
02:52:29   4  ,MIN(clse),MAX(clse)
02:52:29   5  ,MIN(ydate),MAX(ydate)
02:52:29   6  FROM svm6122
02:52:29   7  GROUP BY pair
02:52:29   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19257 .833520557 .893920122 2010-09-30 02:55:01 2011-01-03 02:45:00

Elapsed: 00:00:00.04
02:52:29 SQL> 
02:52:29 SQL> -- Prepare for derivation of NTILE based params:
02:52:29 SQL> 
02:52:29 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.36
02:52:29 SQL> CREATE TABLE svm6142 COMPRESS AS
02:52:29   2  SELECT
02:52:29   3  pair
02:52:29   4  ,ydate
02:52:29   5  ,prdate
02:52:29   6  ,clse
02:52:29   7  ,g6
02:52:29   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:52:29   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:52:29  10  ,CASE WHEN trend IS NULL THEN 1
02:52:29  11  	    WHEN trend =0      THEN 1
02:52:29  12  	    ELSE trend END trend
02:52:29  13  ,cm4
02:52:29  14  ,cm6
02:52:29  15  ,cm8
02:52:29  16  ,cm10
02:52:29  17  ,cm12
02:52:29  18  ,cm14
02:52:29  19  ,cm16
02:52:29  20  ,cm18
02:52:29  21  --
02:52:29  22  ,ca4
02:52:29  23  ,ca6
02:52:29  24  ,ca8
02:52:29  25  ,ca10
02:52:29  26  ,ca12
02:52:29  27  ,ca14
02:52:29  28  ,ca16
02:52:29  29  ,ca18
02:52:29  30  --
02:52:29  31  ,cx4
02:52:29  32  ,cx6
02:52:29  33  ,cx8
02:52:29  34  ,cx10
02:52:29  35  ,cx12
02:52:29  36  ,cx14
02:52:29  37  ,cx16
02:52:29  38  ,cx18
02:52:29  39  --
02:52:29  40  ,crr4
02:52:29  41  ,crr6
02:52:29  42  ,crr8
02:52:29  43  ,crr10
02:52:29  44  ,crr12
02:52:29  45  ,crr14
02:52:29  46  ,crr16
02:52:29  47  ,crr18
02:52:29  48  --
02:52:29  49  ,hh
02:52:29  50  ,d
02:52:29  51  ,w
02:52:29  52  ,mpm
02:52:29  53  ,mph
02:52:29  54  FROM svm6122
02:52:29  55  ORDER BY ydate
02:52:29  56  /

Table created.

Elapsed: 00:00:00.44
02:52:30 SQL> 
02:52:30 SQL> -- rpt
02:52:30 SQL> 
02:52:30 SQL> SELECT
02:52:30   2  pair
02:52:30   3  ,trend
02:52:30   4  ,gatt
02:52:30   5  ,COUNT(pair)
02:52:30   6  ,AVG(g6)
02:52:30   7  FROM svm6142
02:52:30   8  GROUP BY pair,trend,gatt
02:52:30   9  ORDER BY pair,trend,gatt
02:52:30  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7299 -.00099478
egb_usd 	-1 up	      2653 .002912126
egb_usd 	-1		60
egb_usd 	 1 nup	      6550 -.00131027
egb_usd 	 1 up	      2683 .002984404
egb_usd 	 1		12

6 rows selected.

Elapsed: 00:00:00.05
02:52:30 SQL> 
02:52:30 SQL> 
02:52:30 SQL> -- Derive NTILE based params:
02:52:30 SQL> 
02:52:30 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.39
02:52:30 SQL> CREATE TABLE svm6162 COMPRESS AS
02:52:30   2  SELECT
02:52:30   3  pair
02:52:30   4  ,ydate
02:52:30   5  ,prdate
02:52:30   6  ,clse
02:52:30   7  ,g6
02:52:30   8  ,gatt
02:52:30   9  ,gattn
02:52:30  10  ,trend
02:52:30  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:52:30  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:52:30  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:52:30  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:52:30  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:52:30  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:52:30  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:52:30  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:52:30  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:52:30  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:52:30  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:52:30  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:52:30  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:52:30  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:52:30  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:52:30  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:52:30  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:52:30  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:52:30  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:52:30  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:52:30  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:52:30  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:52:30  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:52:30  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:52:30  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:52:30  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:52:30  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:52:30  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:52:30  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:52:30  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:52:30  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:52:30  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:52:30  43  ,hh  att32
02:52:30  44  ,d   att33
02:52:30  45  ,w   att34
02:52:30  46  ,mpm att35
02:52:30  47  ,mph att36
02:52:30  48  ,trend att37
02:52:30  49  FROM svm6142
02:52:30  50  ORDER BY ydate
02:52:30  51  /

Table created.

Elapsed: 00:00:05.52
02:52:36 SQL> 
02:52:36 SQL> -- rpt
02:52:36 SQL> 
02:52:36 SQL> SELECT
02:52:36   2  pair
02:52:36   3  ,trend
02:52:36   4  ,gatt
02:52:36   5  ,COUNT(pair)
02:52:36   6  ,AVG(g6)
02:52:36   7  FROM svm6162
02:52:36   8  GROUP BY pair,trend,gatt
02:52:36   9  ORDER BY pair,trend,gatt
02:52:36  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7299 -.00099478
egb_usd 	-1 up	      2653 .002912126
egb_usd 	-1		60
egb_usd 	 1 nup	      6550 -.00131027
egb_usd 	 1 up	      2683 .002984404
egb_usd 	 1		12

6 rows selected.

Elapsed: 00:00:00.03
02:52:36 SQL> 
02:52:36 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.24
02:52:36 SQL> CREATE TABLE modsrc COMPRESS AS
02:52:36   2  SELECT
02:52:36   3  pair
02:52:36   4  ,ydate
02:52:36   5  ,prdate
02:52:36   6  ,trend
02:52:36   7  ,g6
02:52:36   8  ,gatt
02:52:36   9  ,gattn
02:52:36  10  FROM svm6162
02:52:36  11  /

Table created.

Elapsed: 00:00:00.08
02:52:36 SQL> 
02:52:36 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
02:52:36 SQL> 
02:52:36 SQL> DROP   TABLE egb_ms610 ;

Table dropped.

Elapsed: 00:00:00.07
02:52:36 SQL> CREATE TABLE egb_ms610 COMPRESS AS
02:52:36   2  SELECT
02:52:36   3  ydate
02:52:36   4  ,trend egb_trend
02:52:36   5  ,g6    egb_g6
02:52:36   6  ,gatt  egb_gatt
02:52:36   7  ,gattn egb_gattn
02:52:36   8  FROM modsrc
02:52:36   9  /

Table created.

Elapsed: 00:00:00.08
02:52:36 SQL> 
02:52:36 SQL> ANALYZE TABLE egb_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
02:52:37 SQL> 
02:52:37 SQL> -- I need a copy of the attributes:
02:52:37 SQL> 
02:52:37 SQL> 
02:52:37 SQL> DROP   TABLE egb_att;

Table dropped.

Elapsed: 00:00:00.07
02:52:37 SQL> CREATE TABLE egb_att COMPRESS AS
02:52:37   2  SELECT
02:52:37   3  ydate
02:52:37   4  ,att00 egb_att00
02:52:37   5  ,att01 egb_att01
02:52:37   6  ,att02 egb_att02
02:52:37   7  ,att03 egb_att03
02:52:37   8  ,att04 egb_att04
02:52:37   9  ,att05 egb_att05
02:52:37  10  ,att06 egb_att06
02:52:37  11  ,att07 egb_att07
02:52:37  12  ,att08 egb_att08
02:52:37  13  ,att09 egb_att09
02:52:37  14  ,att10 egb_att10
02:52:37  15  ,att11 egb_att11
02:52:37  16  ,att12 egb_att12
02:52:37  17  ,att13 egb_att13
02:52:37  18  ,att14 egb_att14
02:52:37  19  ,att15 egb_att15
02:52:37  20  ,att16 egb_att16
02:52:37  21  ,att17 egb_att17
02:52:37  22  ,att18 egb_att18
02:52:37  23  ,att19 egb_att19
02:52:37  24  ,att20 egb_att20
02:52:37  25  ,att21 egb_att21
02:52:37  26  ,att22 egb_att22
02:52:37  27  ,att23 egb_att23
02:52:37  28  ,att24 egb_att24
02:52:37  29  ,att25 egb_att25
02:52:37  30  ,att26 egb_att26
02:52:37  31  ,att27 egb_att27
02:52:37  32  ,att28 egb_att28
02:52:37  33  ,att29 egb_att29
02:52:37  34  ,att30 egb_att30
02:52:37  35  ,att31 egb_att31
02:52:37  36  ,att32 egb_att32
02:52:37  37  ,att33 egb_att33
02:52:37  38  ,att34 egb_att34
02:52:37  39  ,att35 egb_att35
02:52:37  40  ,att36 egb_att36
02:52:37  41  ,att37 egb_att37
02:52:37  42  FROM svm6162
02:52:37  43  /

Table created.

Elapsed: 00:00:00.17
02:52:37 SQL> 
02:52:37 SQL> ANALYZE TABLE egb_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
02:52:37 SQL> 
02:52:37 SQL> -- rpt
02:52:37 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19257

Elapsed: 00:00:00.92
02:52:38 SQL> SELECT COUNT(*)FROM egb_att;

  COUNT(*)
----------
     19257

Elapsed: 00:00:00.00
02:52:38 SQL> 
02:52:38 SQL> --
02:52:38 SQL> -- ejp610.sql
02:52:38 SQL> --
02:52:38 SQL> 
02:52:38 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:52:38 SQL> 
02:52:38 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.47
02:52:39 SQL> 
02:52:39 SQL> -- I created di5min here:
02:52:39 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:52:39 SQL> 
02:52:39 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:52:39   2  SELECT
02:52:39   3  pair
02:52:39   4  ,ydate
02:52:39   5  ,prdate
02:52:39   6  ,rownum rnum -- acts as t in my time-series
02:52:39   7  ,clse
02:52:39   8  -- Derive a bunch of attributes from clse, the latest price:
02:52:39   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:52:39  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:52:39  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:52:39  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:52:39  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:52:39  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:52:39  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:52:39  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:52:39  17  --
02:52:39  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:52:39  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:52:39  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:52:39  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:52:39  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:52:39  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:52:39  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:52:39  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:52:39  26  --
02:52:39  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:52:39  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:52:39  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:52:39  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:52:39  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:52:39  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:52:39  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:52:39  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:52:39  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:52:39  36  FROM di5min WHERE pair LIKE'%ejp%'
02:52:39  37  AND ydate > sysdate - 95
02:52:39  38  ORDER BY ydate
02:52:39  39  /

View created.

Elapsed: 00:00:00.06
02:52:39 SQL> 
02:52:39 SQL> -- rpt
02:52:39 SQL> 
02:52:39 SQL> SELECT
02:52:39   2  pair
02:52:39   3  ,COUNT(pair)
02:52:39   4  ,MIN(clse),MAX(clse)
02:52:39   5  ,MIN(avg6),MAX(avg6)
02:52:39   6  ,MIN(ydate),MAX(ydate)
02:52:39   7  FROM svm6102
02:52:39   8  GROUP BY pair
02:52:39   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ejp_usd       19255 107.643765	115.63485 107.776148 115.509678 2010-09-30 02:55:01 2011-01-03 02:45:00

Elapsed: 00:00:00.86
02:52:40 SQL> 
02:52:40 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:52:40 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.25
02:52:40 SQL> CREATE TABLE svm6122 COMPRESS AS
02:52:40   2  SELECT
02:52:40   3  pair
02:52:40   4  ,ydate
02:52:40   5  ,prdate
02:52:40   6  ,clse
02:52:40   7  -- g6 is important. I want to predict g6:
02:52:40   8  ,ld6 - clse g6
02:52:40   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:52:40  10  -- I want more attributes from the ones I derived above:
02:52:40  11  -- clse relation to moving-min
02:52:40  12  ,clse-min4  cm4
02:52:40  13  ,clse-min6  cm6
02:52:40  14  ,clse-min8  cm8
02:52:40  15  ,clse-min10 cm10
02:52:40  16  ,clse-min12 cm12
02:52:40  17  ,clse-min14 cm14
02:52:40  18  ,clse-min16 cm16
02:52:40  19  ,clse-min18 cm18
02:52:40  20  -- clse relation to moving-avg
02:52:40  21  ,clse-avg4  ca4
02:52:40  22  ,clse-avg6  ca6
02:52:40  23  ,clse-avg8  ca8
02:52:40  24  ,clse-avg10 ca10
02:52:40  25  ,clse-avg12 ca12
02:52:40  26  ,clse-avg14 ca14
02:52:40  27  ,clse-avg16 ca16
02:52:40  28  ,clse-avg18 ca18
02:52:40  29  -- clse relation to moving-max
02:52:40  30  ,clse-max4  cx4
02:52:40  31  ,clse-max6  cx6
02:52:40  32  ,clse-max8  cx8
02:52:40  33  ,clse-max10 cx10
02:52:40  34  ,clse-max12 cx12
02:52:40  35  ,clse-max14 cx14
02:52:40  36  ,clse-max16 cx16
02:52:40  37  ,clse-max18 cx18
02:52:40  38  -- Derive more attributes.
02:52:40  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:52:40  40  -- But COVAR_POP is more stable:
02:52:40  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:52:40  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:52:40  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:52:40  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:52:40  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:52:40  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:52:40  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:52:40  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:52:40  49  -- Derive date related attributes:
02:52:40  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:52:40  51  ,0+TO_CHAR(ydate,'D')d
02:52:40  52  ,0+TO_CHAR(ydate,'W')w
02:52:40  53  -- mpm stands for minutes-past-midnight:
02:52:40  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:52:40  55  -- mph stands for minutes-past-hour:
02:52:40  56  ,0+TO_CHAR(ydate,'MI')mph
02:52:40  57  FROM svm6102
02:52:40  58  ORDER BY ydate
02:52:40  59  /

Table created.

Elapsed: 00:00:02.07
02:52:42 SQL> 
02:52:42 SQL> -- rpt
02:52:42 SQL> 
02:52:42 SQL> SELECT
02:52:42   2  pair
02:52:42   3  ,COUNT(pair)
02:52:42   4  ,MIN(clse),MAX(clse)
02:52:42   5  ,MIN(ydate),MAX(ydate)
02:52:42   6  FROM svm6122
02:52:42   7  GROUP BY pair
02:52:42   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ejp_usd       19255 107.643765	115.63485 2010-09-30 02:55:01 2011-01-03 02:45:00

Elapsed: 00:00:00.06
02:52:42 SQL> 
02:52:42 SQL> -- Prepare for derivation of NTILE based params:
02:52:42 SQL> 
02:52:42 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
02:52:42 SQL> CREATE TABLE svm6142 COMPRESS AS
02:52:42   2  SELECT
02:52:42   3  pair
02:52:42   4  ,ydate
02:52:42   5  ,prdate
02:52:42   6  ,clse
02:52:42   7  ,g6
02:52:42   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:52:42   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:52:42  10  ,CASE WHEN trend IS NULL THEN 1
02:52:42  11  	    WHEN trend =0      THEN 1
02:52:42  12  	    ELSE trend END trend
02:52:42  13  ,cm4
02:52:42  14  ,cm6
02:52:42  15  ,cm8
02:52:42  16  ,cm10
02:52:42  17  ,cm12
02:52:42  18  ,cm14
02:52:42  19  ,cm16
02:52:42  20  ,cm18
02:52:42  21  --
02:52:42  22  ,ca4
02:52:42  23  ,ca6
02:52:42  24  ,ca8
02:52:42  25  ,ca10
02:52:42  26  ,ca12
02:52:42  27  ,ca14
02:52:42  28  ,ca16
02:52:42  29  ,ca18
02:52:42  30  --
02:52:42  31  ,cx4
02:52:42  32  ,cx6
02:52:42  33  ,cx8
02:52:42  34  ,cx10
02:52:42  35  ,cx12
02:52:42  36  ,cx14
02:52:42  37  ,cx16
02:52:42  38  ,cx18
02:52:42  39  --
02:52:42  40  ,crr4
02:52:42  41  ,crr6
02:52:42  42  ,crr8
02:52:42  43  ,crr10
02:52:42  44  ,crr12
02:52:42  45  ,crr14
02:52:42  46  ,crr16
02:52:42  47  ,crr18
02:52:42  48  --
02:52:42  49  ,hh
02:52:42  50  ,d
02:52:42  51  ,w
02:52:42  52  ,mpm
02:52:42  53  ,mph
02:52:42  54  FROM svm6122
02:52:42  55  ORDER BY ydate
02:52:42  56  /

Table created.

Elapsed: 00:00:00.38
02:52:43 SQL> 
02:52:43 SQL> -- rpt
02:52:43 SQL> 
02:52:43 SQL> SELECT
02:52:43   2  pair
02:52:43   3  ,trend
02:52:43   4  ,gatt
02:52:43   5  ,COUNT(pair)
02:52:43   6  ,AVG(g6)
02:52:43   7  FROM svm6142
02:52:43   8  GROUP BY pair,trend,gatt
02:52:43   9  ORDER BY pair,trend,gatt
02:52:43  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4797 -.32463508
ejp_usd 	-1 up	      4857 .269491187
ejp_usd 	-1		71
ejp_usd 	 1 nup	      4905 -.28920965
ejp_usd 	 1 up	      4624 .280884725
ejp_usd 	 1		 1

6 rows selected.

Elapsed: 00:00:00.03
02:52:43 SQL> 
02:52:43 SQL> 
02:52:43 SQL> -- Derive NTILE based params:
02:52:43 SQL> 
02:52:43 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
02:52:43 SQL> CREATE TABLE svm6162 COMPRESS AS
02:52:43   2  SELECT
02:52:43   3  pair
02:52:43   4  ,ydate
02:52:43   5  ,prdate
02:52:43   6  ,clse
02:52:43   7  ,g6
02:52:43   8  ,gatt
02:52:43   9  ,gattn
02:52:43  10  ,trend
02:52:43  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:52:43  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:52:43  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:52:43  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:52:43  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:52:43  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:52:43  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:52:43  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:52:43  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:52:43  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:52:43  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:52:43  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:52:43  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:52:43  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:52:43  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:52:43  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:52:43  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:52:43  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:52:43  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:52:43  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:52:43  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:52:43  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:52:43  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:52:43  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:52:43  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:52:43  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:52:43  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:52:43  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:52:43  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:52:43  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:52:43  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:52:43  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:52:43  43  ,hh  att32
02:52:43  44  ,d   att33
02:52:43  45  ,w   att34
02:52:43  46  ,mpm att35
02:52:43  47  ,mph att36
02:52:43  48  ,trend att37
02:52:43  49  FROM svm6142
02:52:43  50  ORDER BY ydate
02:52:43  51  /

Table created.

Elapsed: 00:00:04.87
02:52:48 SQL> 
02:52:48 SQL> -- rpt
02:52:48 SQL> 
02:52:48 SQL> SELECT
02:52:48   2  pair
02:52:48   3  ,trend
02:52:48   4  ,gatt
02:52:48   5  ,COUNT(pair)
02:52:48   6  ,AVG(g6)
02:52:48   7  FROM svm6162
02:52:48   8  GROUP BY pair,trend,gatt
02:52:48   9  ORDER BY pair,trend,gatt
02:52:48  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4797 -.32463508
ejp_usd 	-1 up	      4857 .269491187
ejp_usd 	-1		71
ejp_usd 	 1 nup	      4905 -.28920965
ejp_usd 	 1 up	      4624 .280884725
ejp_usd 	 1		 1

6 rows selected.

Elapsed: 00:00:00.03
02:52:48 SQL> 
02:52:48 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.24
02:52:48 SQL> CREATE TABLE modsrc COMPRESS AS
02:52:48   2  SELECT
02:52:48   3  pair
02:52:48   4  ,ydate
02:52:48   5  ,prdate
02:52:48   6  ,trend
02:52:48   7  ,g6
02:52:48   8  ,gatt
02:52:48   9  ,gattn
02:52:48  10  FROM svm6162
02:52:48  11  /

Table created.

Elapsed: 00:00:00.09
02:52:48 SQL> 
02:52:48 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
02:52:48 SQL> 
02:52:48 SQL> DROP   TABLE ejp_ms610 ;

Table dropped.

Elapsed: 00:00:00.08
02:52:48 SQL> CREATE TABLE ejp_ms610 COMPRESS AS
02:52:48   2  SELECT
02:52:48   3  ydate
02:52:48   4  ,trend ejp_trend
02:52:48   5  ,g6    ejp_g6
02:52:48   6  ,gatt  ejp_gatt
02:52:48   7  ,gattn ejp_gattn
02:52:48   8  FROM modsrc
02:52:48   9  /

Table created.

Elapsed: 00:00:00.07
02:52:48 SQL> 
02:52:48 SQL> ANALYZE TABLE ejp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
02:52:49 SQL> 
02:52:49 SQL> -- I need a copy of the attributes:
02:52:49 SQL> 
02:52:49 SQL> 
02:52:49 SQL> DROP   TABLE ejp_att;

Table dropped.

Elapsed: 00:00:00.07
02:52:49 SQL> CREATE TABLE ejp_att COMPRESS AS
02:52:49   2  SELECT
02:52:49   3  ydate
02:52:49   4  ,att00 ejp_att00
02:52:49   5  ,att01 ejp_att01
02:52:49   6  ,att02 ejp_att02
02:52:49   7  ,att03 ejp_att03
02:52:49   8  ,att04 ejp_att04
02:52:49   9  ,att05 ejp_att05
02:52:49  10  ,att06 ejp_att06
02:52:49  11  ,att07 ejp_att07
02:52:49  12  ,att08 ejp_att08
02:52:49  13  ,att09 ejp_att09
02:52:49  14  ,att10 ejp_att10
02:52:49  15  ,att11 ejp_att11
02:52:49  16  ,att12 ejp_att12
02:52:49  17  ,att13 ejp_att13
02:52:49  18  ,att14 ejp_att14
02:52:49  19  ,att15 ejp_att15
02:52:49  20  ,att16 ejp_att16
02:52:49  21  ,att17 ejp_att17
02:52:49  22  ,att18 ejp_att18
02:52:49  23  ,att19 ejp_att19
02:52:49  24  ,att20 ejp_att20
02:52:49  25  ,att21 ejp_att21
02:52:49  26  ,att22 ejp_att22
02:52:49  27  ,att23 ejp_att23
02:52:49  28  ,att24 ejp_att24
02:52:49  29  ,att25 ejp_att25
02:52:49  30  ,att26 ejp_att26
02:52:49  31  ,att27 ejp_att27
02:52:49  32  ,att28 ejp_att28
02:52:49  33  ,att29 ejp_att29
02:52:49  34  ,att30 ejp_att30
02:52:49  35  ,att31 ejp_att31
02:52:49  36  ,att32 ejp_att32
02:52:49  37  ,att33 ejp_att33
02:52:49  38  ,att34 ejp_att34
02:52:49  39  ,att35 ejp_att35
02:52:49  40  ,att36 ejp_att36
02:52:49  41  ,att37 ejp_att37
02:52:49  42  FROM svm6162
02:52:49  43  /

Table created.

Elapsed: 00:00:00.19
02:52:49 SQL> 
02:52:49 SQL> ANALYZE TABLE ejp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
02:52:49 SQL> 
02:52:49 SQL> -- rpt
02:52:49 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19255

Elapsed: 00:00:00.81
02:52:50 SQL> SELECT COUNT(*)FROM ejp_att;

  COUNT(*)
----------
     19255

Elapsed: 00:00:00.01
02:52:50 SQL> 
02:52:50 SQL> --
02:52:50 SQL> -- ajp610.sql
02:52:50 SQL> --
02:52:50 SQL> 
02:52:50 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:52:50 SQL> 
02:52:50 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.40
02:52:50 SQL> 
02:52:50 SQL> -- I created di5min here:
02:52:50 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:52:50 SQL> 
02:52:50 SQL> CREATE OR REPLACE VIEW svm6102 AS
02:52:50   2  SELECT
02:52:50   3  pair
02:52:50   4  ,ydate
02:52:50   5  ,prdate
02:52:50   6  ,rownum rnum -- acts as t in my time-series
02:52:50   7  ,clse
02:52:50   8  -- Derive a bunch of attributes from clse, the latest price:
02:52:50   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
02:52:50  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
02:52:50  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
02:52:50  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
02:52:50  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
02:52:50  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
02:52:50  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
02:52:50  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
02:52:50  17  --
02:52:50  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
02:52:50  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
02:52:50  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
02:52:50  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
02:52:50  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
02:52:50  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
02:52:50  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
02:52:50  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
02:52:50  26  --
02:52:50  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
02:52:50  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
02:52:50  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
02:52:50  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
02:52:50  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
02:52:50  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
02:52:50  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
02:52:50  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
02:52:50  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
02:52:50  36  FROM di5min WHERE pair LIKE'%ajp%'
02:52:50  37  AND ydate > sysdate - 95
02:52:50  38  ORDER BY ydate
02:52:50  39  /

View created.

Elapsed: 00:00:00.03
02:52:50 SQL> 
02:52:50 SQL> -- rpt
02:52:50 SQL> 
02:52:50 SQL> SELECT
02:52:50   2  pair
02:52:50   3  ,COUNT(pair)
02:52:50   4  ,MIN(clse),MAX(clse)
02:52:50   5  ,MIN(avg6),MAX(avg6)
02:52:50   6  ,MIN(ydate),MAX(ydate)
02:52:50   7  FROM svm6102
02:52:50   8  GROUP BY pair
02:52:50   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ajp_usd       19252  78.249976 83.6669853 78.5106193  83.546306 2010-09-30 02:55:01 2011-01-03 02:45:00

Elapsed: 00:00:00.78
02:52:51 SQL> 
02:52:51 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
02:52:51 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.25
02:52:52 SQL> CREATE TABLE svm6122 COMPRESS AS
02:52:52   2  SELECT
02:52:52   3  pair
02:52:52   4  ,ydate
02:52:52   5  ,prdate
02:52:52   6  ,clse
02:52:52   7  -- g6 is important. I want to predict g6:
02:52:52   8  ,ld6 - clse g6
02:52:52   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
02:52:52  10  -- I want more attributes from the ones I derived above:
02:52:52  11  -- clse relation to moving-min
02:52:52  12  ,clse-min4  cm4
02:52:52  13  ,clse-min6  cm6
02:52:52  14  ,clse-min8  cm8
02:52:52  15  ,clse-min10 cm10
02:52:52  16  ,clse-min12 cm12
02:52:52  17  ,clse-min14 cm14
02:52:52  18  ,clse-min16 cm16
02:52:52  19  ,clse-min18 cm18
02:52:52  20  -- clse relation to moving-avg
02:52:52  21  ,clse-avg4  ca4
02:52:52  22  ,clse-avg6  ca6
02:52:52  23  ,clse-avg8  ca8
02:52:52  24  ,clse-avg10 ca10
02:52:52  25  ,clse-avg12 ca12
02:52:52  26  ,clse-avg14 ca14
02:52:52  27  ,clse-avg16 ca16
02:52:52  28  ,clse-avg18 ca18
02:52:52  29  -- clse relation to moving-max
02:52:52  30  ,clse-max4  cx4
02:52:52  31  ,clse-max6  cx6
02:52:52  32  ,clse-max8  cx8
02:52:52  33  ,clse-max10 cx10
02:52:52  34  ,clse-max12 cx12
02:52:52  35  ,clse-max14 cx14
02:52:52  36  ,clse-max16 cx16
02:52:52  37  ,clse-max18 cx18
02:52:52  38  -- Derive more attributes.
02:52:52  39  -- I want to use CORR() here to help SVM see the shape of the series.
02:52:52  40  -- But COVAR_POP is more stable:
02:52:52  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
02:52:52  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:52:52  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:52:52  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:52:52  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:52:52  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:52:52  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:52:52  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:52:52  49  -- Derive date related attributes:
02:52:52  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:52:52  51  ,0+TO_CHAR(ydate,'D')d
02:52:52  52  ,0+TO_CHAR(ydate,'W')w
02:52:52  53  -- mpm stands for minutes-past-midnight:
02:52:52  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:52:52  55  -- mph stands for minutes-past-hour:
02:52:52  56  ,0+TO_CHAR(ydate,'MI')mph
02:52:52  57  FROM svm6102
02:52:52  58  ORDER BY ydate
02:52:52  59  /

Table created.

Elapsed: 00:00:02.20
02:52:54 SQL> 
02:52:54 SQL> -- rpt
02:52:54 SQL> 
02:52:54 SQL> SELECT
02:52:54   2  pair
02:52:54   3  ,COUNT(pair)
02:52:54   4  ,MIN(clse),MAX(clse)
02:52:54   5  ,MIN(ydate),MAX(ydate)
02:52:54   6  FROM svm6122
02:52:54   7  GROUP BY pair
02:52:54   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ajp_usd       19252  78.249976 83.6669853 2010-09-30 02:55:01 2011-01-03 02:45:00

Elapsed: 00:00:00.03
02:52:54 SQL> 
02:52:54 SQL> -- Prepare for derivation of NTILE based params:
02:52:54 SQL> 
02:52:54 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.27
02:52:54 SQL> CREATE TABLE svm6142 COMPRESS AS
02:52:54   2  SELECT
02:52:54   3  pair
02:52:54   4  ,ydate
02:52:54   5  ,prdate
02:52:54   6  ,clse
02:52:54   7  ,g6
02:52:54   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
02:52:54   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
02:52:54  10  ,CASE WHEN trend IS NULL THEN 1
02:52:54  11  	    WHEN trend =0      THEN 1
02:52:54  12  	    ELSE trend END trend
02:52:54  13  ,cm4
02:52:54  14  ,cm6
02:52:54  15  ,cm8
02:52:54  16  ,cm10
02:52:54  17  ,cm12
02:52:54  18  ,cm14
02:52:54  19  ,cm16
02:52:54  20  ,cm18
02:52:54  21  --
02:52:54  22  ,ca4
02:52:54  23  ,ca6
02:52:54  24  ,ca8
02:52:54  25  ,ca10
02:52:54  26  ,ca12
02:52:54  27  ,ca14
02:52:54  28  ,ca16
02:52:54  29  ,ca18
02:52:54  30  --
02:52:54  31  ,cx4
02:52:54  32  ,cx6
02:52:54  33  ,cx8
02:52:54  34  ,cx10
02:52:54  35  ,cx12
02:52:54  36  ,cx14
02:52:54  37  ,cx16
02:52:54  38  ,cx18
02:52:54  39  --
02:52:54  40  ,crr4
02:52:54  41  ,crr6
02:52:54  42  ,crr8
02:52:54  43  ,crr10
02:52:54  44  ,crr12
02:52:54  45  ,crr14
02:52:54  46  ,crr16
02:52:54  47  ,crr18
02:52:54  48  --
02:52:54  49  ,hh
02:52:54  50  ,d
02:52:54  51  ,w
02:52:54  52  ,mpm
02:52:54  53  ,mph
02:52:54  54  FROM svm6122
02:52:54  55  ORDER BY ydate
02:52:54  56  /

Table created.

Elapsed: 00:00:00.38
02:52:54 SQL> 
02:52:54 SQL> -- rpt
02:52:54 SQL> 
02:52:54 SQL> SELECT
02:52:54   2  pair
02:52:54   3  ,trend
02:52:54   4  ,gatt
02:52:54   5  ,COUNT(pair)
02:52:54   6  ,AVG(g6)
02:52:54   7  FROM svm6142
02:52:54   8  GROUP BY pair,trend,gatt
02:52:54   9  ORDER BY pair,trend,gatt
02:52:54  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4049  -.2282137
ajp_usd 	-1 up	      5147  .22212274
ajp_usd 	-1		54
ajp_usd 	 1 nup	      5203  -.2002727
ajp_usd 	 1 up	      4781 .205574845
ajp_usd 	 1		18

6 rows selected.

Elapsed: 00:00:00.04
02:52:54 SQL> 
02:52:54 SQL> 
02:52:54 SQL> -- Derive NTILE based params:
02:52:54 SQL> 
02:52:54 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
02:52:55 SQL> CREATE TABLE svm6162 COMPRESS AS
02:52:55   2  SELECT
02:52:55   3  pair
02:52:55   4  ,ydate
02:52:55   5  ,prdate
02:52:55   6  ,clse
02:52:55   7  ,g6
02:52:55   8  ,gatt
02:52:55   9  ,gattn
02:52:55  10  ,trend
02:52:55  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
02:52:55  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
02:52:55  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
02:52:55  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
02:52:55  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
02:52:55  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
02:52:55  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
02:52:55  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
02:52:55  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
02:52:55  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
02:52:55  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
02:52:55  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
02:52:55  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
02:52:55  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
02:52:55  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
02:52:55  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
02:52:55  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
02:52:55  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
02:52:55  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
02:52:55  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
02:52:55  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
02:52:55  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
02:52:55  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
02:52:55  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
02:52:55  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
02:52:55  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
02:52:55  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
02:52:55  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
02:52:55  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
02:52:55  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
02:52:55  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
02:52:55  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
02:52:55  43  ,hh  att32
02:52:55  44  ,d   att33
02:52:55  45  ,w   att34
02:52:55  46  ,mpm att35
02:52:55  47  ,mph att36
02:52:55  48  ,trend att37
02:52:55  49  FROM svm6142
02:52:55  50  ORDER BY ydate
02:52:55  51  /

Table created.

Elapsed: 00:00:05.00
02:53:00 SQL> 
02:53:00 SQL> -- rpt
02:53:00 SQL> 
02:53:00 SQL> SELECT
02:53:00   2  pair
02:53:00   3  ,trend
02:53:00   4  ,gatt
02:53:00   5  ,COUNT(pair)
02:53:00   6  ,AVG(g6)
02:53:00   7  FROM svm6162
02:53:00   8  GROUP BY pair,trend,gatt
02:53:00   9  ORDER BY pair,trend,gatt
02:53:00  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4049  -.2282137
ajp_usd 	-1 up	      5147  .22212274
ajp_usd 	-1		54
ajp_usd 	 1 nup	      5203  -.2002727
ajp_usd 	 1 up	      4781 .205574845
ajp_usd 	 1		18

6 rows selected.

Elapsed: 00:00:00.03
02:53:00 SQL> 
02:53:00 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.10
02:53:00 SQL> CREATE TABLE modsrc COMPRESS AS
02:53:00   2  SELECT
02:53:00   3  pair
02:53:00   4  ,ydate
02:53:00   5  ,prdate
02:53:00   6  ,trend
02:53:00   7  ,g6
02:53:00   8  ,gatt
02:53:00   9  ,gattn
02:53:00  10  FROM svm6162
02:53:00  11  /

Table created.

Elapsed: 00:00:00.08
02:53:00 SQL> 
02:53:00 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
02:53:00 SQL> 
02:53:00 SQL> DROP   TABLE ajp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
02:53:00 SQL> CREATE TABLE ajp_ms610 COMPRESS AS
02:53:00   2  SELECT
02:53:00   3  ydate
02:53:00   4  ,trend ajp_trend
02:53:00   5  ,g6    ajp_g6
02:53:00   6  ,gatt  ajp_gatt
02:53:00   7  ,gattn ajp_gattn
02:53:00   8  FROM modsrc
02:53:00   9  /

Table created.

Elapsed: 00:00:00.09
02:53:00 SQL> 
02:53:00 SQL> ANALYZE TABLE ajp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
02:53:00 SQL> 
02:53:00 SQL> -- I need a copy of the attributes:
02:53:00 SQL> 
02:53:00 SQL> 
02:53:00 SQL> DROP   TABLE ajp_att;

Table dropped.

Elapsed: 00:00:00.10
02:53:00 SQL> CREATE TABLE ajp_att COMPRESS AS
02:53:00   2  SELECT
02:53:00   3  ydate
02:53:00   4  ,att00 ajp_att00
02:53:00   5  ,att01 ajp_att01
02:53:00   6  ,att02 ajp_att02
02:53:00   7  ,att03 ajp_att03
02:53:00   8  ,att04 ajp_att04
02:53:00   9  ,att05 ajp_att05
02:53:00  10  ,att06 ajp_att06
02:53:00  11  ,att07 ajp_att07
02:53:00  12  ,att08 ajp_att08
02:53:00  13  ,att09 ajp_att09
02:53:00  14  ,att10 ajp_att10
02:53:00  15  ,att11 ajp_att11
02:53:00  16  ,att12 ajp_att12
02:53:00  17  ,att13 ajp_att13
02:53:00  18  ,att14 ajp_att14
02:53:00  19  ,att15 ajp_att15
02:53:00  20  ,att16 ajp_att16
02:53:00  21  ,att17 ajp_att17
02:53:00  22  ,att18 ajp_att18
02:53:00  23  ,att19 ajp_att19
02:53:00  24  ,att20 ajp_att20
02:53:00  25  ,att21 ajp_att21
02:53:00  26  ,att22 ajp_att22
02:53:00  27  ,att23 ajp_att23
02:53:00  28  ,att24 ajp_att24
02:53:00  29  ,att25 ajp_att25
02:53:00  30  ,att26 ajp_att26
02:53:00  31  ,att27 ajp_att27
02:53:00  32  ,att28 ajp_att28
02:53:00  33  ,att29 ajp_att29
02:53:00  34  ,att30 ajp_att30
02:53:00  35  ,att31 ajp_att31
02:53:00  36  ,att32 ajp_att32
02:53:00  37  ,att33 ajp_att33
02:53:00  38  ,att34 ajp_att34
02:53:00  39  ,att35 ajp_att35
02:53:00  40  ,att36 ajp_att36
02:53:00  41  ,att37 ajp_att37
02:53:00  42  FROM svm6162
02:53:00  43  /

Table created.

Elapsed: 00:00:00.16
02:53:01 SQL> 
02:53:01 SQL> ANALYZE TABLE ajp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
02:53:01 SQL> 
02:53:01 SQL> -- rpt
02:53:01 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19252

Elapsed: 00:00:00.76
02:53:02 SQL> SELECT COUNT(*)FROM ajp_att;

  COUNT(*)
----------
     19252

Elapsed: 00:00:00.00
02:53:02 SQL> 
02:53:02 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
