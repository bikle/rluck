
SQL*Plus: Release 11.2.0.1.0 Production on Tue Jan 4 10:36:19 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

10:36:19 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
10:36:19 SQL> 10:36:19 SQL> --
10:36:19 SQL> -- eur610.sql
10:36:19 SQL> --
10:36:19 SQL> 
10:36:19 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:36:19 SQL> 
10:36:19 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.04
10:36:19 SQL> 
10:36:19 SQL> -- I created di5min here:
10:36:19 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:36:19 SQL> 
10:36:19 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:36:19   2  SELECT
10:36:19   3  pair
10:36:19   4  ,ydate
10:36:19   5  ,prdate
10:36:19   6  ,rownum rnum -- acts as t in my time-series
10:36:19   7  ,clse
10:36:19   8  -- Derive a bunch of attributes from clse, the latest price:
10:36:19   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:36:19  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:36:19  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:36:19  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:36:19  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:36:19  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:36:19  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:36:19  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:36:19  17  --
10:36:19  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:36:19  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:36:19  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:36:19  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:36:19  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:36:19  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:36:19  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:36:19  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:36:19  26  --
10:36:19  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:36:19  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:36:19  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:36:19  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:36:19  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:36:19  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:36:19  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:36:19  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:36:19  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:36:19  36  FROM di5min WHERE pair LIKE'%eur%'
10:36:19  37  AND ydate > sysdate - 95
10:36:19  38  ORDER BY ydate
10:36:19  39  /

View created.

Elapsed: 00:00:00.06
10:36:19 SQL> 
10:36:19 SQL> -- rpt
10:36:19 SQL> 
10:36:19 SQL> SELECT
10:36:19   2  pair
10:36:19   3  ,COUNT(pair)
10:36:19   4  ,MIN(clse),MAX(clse)
10:36:19   5  ,MIN(avg6),MAX(avg6)
10:36:19   6  ,MIN(ydate),MAX(ydate)
10:36:19   7  FROM svm6102
10:36:19   8  GROUP BY pair
10:36:19   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19256    1.29735	   1.4273 1.29875103 1.42436233 2010-10-01 10:40:01 2011-01-04 10:30:00

Elapsed: 00:00:00.92
10:36:20 SQL> 
10:36:20 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:36:20 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.04
10:36:20 SQL> CREATE TABLE svm6122 COMPRESS AS
10:36:20   2  SELECT
10:36:20   3  pair
10:36:20   4  ,ydate
10:36:20   5  ,prdate
10:36:20   6  ,clse
10:36:20   7  -- g6 is important. I want to predict g6:
10:36:20   8  ,ld6 - clse g6
10:36:20   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:36:20  10  -- I want more attributes from the ones I derived above:
10:36:20  11  -- clse relation to moving-min
10:36:20  12  ,clse-min4  cm4
10:36:20  13  ,clse-min6  cm6
10:36:20  14  ,clse-min8  cm8
10:36:20  15  ,clse-min10 cm10
10:36:20  16  ,clse-min12 cm12
10:36:20  17  ,clse-min14 cm14
10:36:20  18  ,clse-min16 cm16
10:36:20  19  ,clse-min18 cm18
10:36:20  20  -- clse relation to moving-avg
10:36:20  21  ,clse-avg4  ca4
10:36:20  22  ,clse-avg6  ca6
10:36:20  23  ,clse-avg8  ca8
10:36:20  24  ,clse-avg10 ca10
10:36:20  25  ,clse-avg12 ca12
10:36:20  26  ,clse-avg14 ca14
10:36:20  27  ,clse-avg16 ca16
10:36:20  28  ,clse-avg18 ca18
10:36:20  29  -- clse relation to moving-max
10:36:20  30  ,clse-max4  cx4
10:36:20  31  ,clse-max6  cx6
10:36:20  32  ,clse-max8  cx8
10:36:20  33  ,clse-max10 cx10
10:36:20  34  ,clse-max12 cx12
10:36:20  35  ,clse-max14 cx14
10:36:20  36  ,clse-max16 cx16
10:36:20  37  ,clse-max18 cx18
10:36:20  38  -- Derive more attributes.
10:36:20  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:36:20  40  -- But COVAR_POP is more stable:
10:36:20  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:36:20  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:36:20  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:36:20  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:36:20  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:36:20  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:36:20  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:36:20  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:36:20  49  -- Derive date related attributes:
10:36:20  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:36:20  51  ,0+TO_CHAR(ydate,'D')d
10:36:20  52  ,0+TO_CHAR(ydate,'W')w
10:36:20  53  -- mpm stands for minutes-past-midnight:
10:36:20  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:36:20  55  -- mph stands for minutes-past-hour:
10:36:20  56  ,0+TO_CHAR(ydate,'MI')mph
10:36:20  57  FROM svm6102
10:36:20  58  ORDER BY ydate
10:36:20  59  /

Table created.

Elapsed: 00:00:02.41
10:36:22 SQL> 
10:36:22 SQL> -- rpt
10:36:22 SQL> 
10:36:22 SQL> SELECT
10:36:22   2  pair
10:36:22   3  ,COUNT(pair)
10:36:22   4  ,MIN(clse),MAX(clse)
10:36:22   5  ,MIN(ydate),MAX(ydate)
10:36:22   6  FROM svm6122
10:36:22   7  GROUP BY pair
10:36:22   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19256    1.29735	   1.4273 2010-10-01 10:40:01 2011-01-04 10:30:00

Elapsed: 00:00:00.04
10:36:22 SQL> 
10:36:22 SQL> -- Prepare for derivation of NTILE based params:
10:36:22 SQL> 
10:36:22 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.04
10:36:23 SQL> CREATE TABLE svm6142 COMPRESS AS
10:36:23   2  SELECT
10:36:23   3  pair
10:36:23   4  ,ydate
10:36:23   5  ,prdate
10:36:23   6  ,clse
10:36:23   7  ,g6
10:36:23   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:36:23   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:36:23  10  ,CASE WHEN trend IS NULL THEN 1
10:36:23  11  	    WHEN trend =0      THEN 1
10:36:23  12  	    ELSE trend END trend
10:36:23  13  ,cm4
10:36:23  14  ,cm6
10:36:23  15  ,cm8
10:36:23  16  ,cm10
10:36:23  17  ,cm12
10:36:23  18  ,cm14
10:36:23  19  ,cm16
10:36:23  20  ,cm18
10:36:23  21  --
10:36:23  22  ,ca4
10:36:23  23  ,ca6
10:36:23  24  ,ca8
10:36:23  25  ,ca10
10:36:23  26  ,ca12
10:36:23  27  ,ca14
10:36:23  28  ,ca16
10:36:23  29  ,ca18
10:36:23  30  --
10:36:23  31  ,cx4
10:36:23  32  ,cx6
10:36:23  33  ,cx8
10:36:23  34  ,cx10
10:36:23  35  ,cx12
10:36:23  36  ,cx14
10:36:23  37  ,cx16
10:36:23  38  ,cx18
10:36:23  39  --
10:36:23  40  ,crr4
10:36:23  41  ,crr6
10:36:23  42  ,crr8
10:36:23  43  ,crr10
10:36:23  44  ,crr12
10:36:23  45  ,crr14
10:36:23  46  ,crr16
10:36:23  47  ,crr18
10:36:23  48  --
10:36:23  49  ,hh
10:36:23  50  ,d
10:36:23  51  ,w
10:36:23  52  ,mpm
10:36:23  53  ,mph
10:36:23  54  FROM svm6122
10:36:23  55  ORDER BY ydate
10:36:23  56  /

Table created.

Elapsed: 00:00:00.37
10:36:23 SQL> 
10:36:23 SQL> -- rpt
10:36:23 SQL> 
10:36:23 SQL> SELECT
10:36:23   2  pair
10:36:23   3  ,trend
10:36:23   4  ,gatt
10:36:23   5  ,COUNT(pair)
10:36:23   6  ,AVG(g6)
10:36:23   7  FROM svm6142
10:36:23   8  GROUP BY pair,trend,gatt
10:36:23   9  ORDER BY pair,trend,gatt
10:36:23  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6065 -.00312577
eur_usd 	-1 up	      3547 .004452858
eur_usd 	-1		22
eur_usd 	 1 nup	      5829 -.00317186
eur_usd 	 1 up	      3743 .005048424
eur_usd 	 1		50

6 rows selected.

Elapsed: 00:00:00.04
10:36:23 SQL> 
10:36:23 SQL> 
10:36:23 SQL> -- Derive NTILE based params:
10:36:23 SQL> 
10:36:23 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.04
10:36:23 SQL> CREATE TABLE svm6162 COMPRESS AS
10:36:23   2  SELECT
10:36:23   3  pair
10:36:23   4  ,ydate
10:36:23   5  ,prdate
10:36:23   6  ,clse
10:36:23   7  ,g6
10:36:23   8  ,gatt
10:36:23   9  ,gattn
10:36:23  10  ,trend
10:36:23  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:36:23  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:36:23  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:36:23  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:36:23  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:36:23  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:36:23  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:36:23  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:36:23  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:36:23  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:36:23  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:36:23  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:36:23  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:36:23  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:36:23  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:36:23  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:36:23  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:36:23  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:36:23  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:36:23  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:36:23  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:36:23  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:36:23  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:36:23  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:36:23  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:36:23  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:36:23  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:36:23  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:36:23  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:36:23  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:36:23  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:36:23  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:36:23  43  ,hh  att32
10:36:23  44  ,d   att33
10:36:23  45  ,w   att34
10:36:23  46  ,mpm att35
10:36:23  47  ,mph att36
10:36:23  48  ,trend att37
10:36:23  49  FROM svm6142
10:36:23  50  ORDER BY ydate
10:36:23  51  /

Table created.

Elapsed: 00:00:04.66
10:36:28 SQL> 
10:36:28 SQL> -- rpt
10:36:28 SQL> 
10:36:28 SQL> SELECT
10:36:28   2  pair
10:36:28   3  ,trend
10:36:28   4  ,gatt
10:36:28   5  ,COUNT(pair)
10:36:28   6  ,AVG(g6)
10:36:28   7  FROM svm6162
10:36:28   8  GROUP BY pair,trend,gatt
10:36:28   9  ORDER BY pair,trend,gatt
10:36:28  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6065 -.00312577
eur_usd 	-1 up	      3547 .004452858
eur_usd 	-1		22
eur_usd 	 1 nup	      5829 -.00317186
eur_usd 	 1 up	      3743 .005048424
eur_usd 	 1		50

6 rows selected.

Elapsed: 00:00:00.02
10:36:28 SQL> 
10:36:28 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.03
10:36:28 SQL> CREATE TABLE modsrc COMPRESS AS
10:36:28   2  SELECT
10:36:28   3  pair
10:36:28   4  ,ydate
10:36:28   5  ,prdate
10:36:28   6  ,trend
10:36:28   7  ,g6
10:36:28   8  ,gatt
10:36:28   9  ,gattn
10:36:28  10  FROM svm6162
10:36:28  11  /

Table created.

Elapsed: 00:00:00.08
10:36:28 SQL> 
10:36:28 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
10:36:28 SQL> 
10:36:28 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
10:36:28 SQL> CREATE TABLE eur_ms610 COMPRESS AS
10:36:28   2  SELECT
10:36:28   3  ydate
10:36:28   4  ,trend eur_trend
10:36:28   5  ,g6    eur_g6
10:36:28   6  ,gatt  eur_gatt
10:36:28   7  ,gattn eur_gattn
10:36:28   8  FROM modsrc
10:36:28   9  /

Table created.

Elapsed: 00:00:00.15
10:36:28 SQL> 
10:36:28 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
10:36:28 SQL> 
10:36:28 SQL> -- I need a copy of the attributes:
10:36:28 SQL> 
10:36:28 SQL> 
10:36:28 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.03
10:36:28 SQL> CREATE TABLE eur_att COMPRESS AS
10:36:28   2  SELECT
10:36:28   3  ydate
10:36:28   4  ,att00 eur_att00
10:36:28   5  ,att01 eur_att01
10:36:28   6  ,att02 eur_att02
10:36:28   7  ,att03 eur_att03
10:36:28   8  ,att04 eur_att04
10:36:28   9  ,att05 eur_att05
10:36:28  10  ,att06 eur_att06
10:36:28  11  ,att07 eur_att07
10:36:28  12  ,att08 eur_att08
10:36:28  13  ,att09 eur_att09
10:36:28  14  ,att10 eur_att10
10:36:28  15  ,att11 eur_att11
10:36:28  16  ,att12 eur_att12
10:36:28  17  ,att13 eur_att13
10:36:28  18  ,att14 eur_att14
10:36:28  19  ,att15 eur_att15
10:36:28  20  ,att16 eur_att16
10:36:28  21  ,att17 eur_att17
10:36:28  22  ,att18 eur_att18
10:36:28  23  ,att19 eur_att19
10:36:28  24  ,att20 eur_att20
10:36:28  25  ,att21 eur_att21
10:36:28  26  ,att22 eur_att22
10:36:28  27  ,att23 eur_att23
10:36:28  28  ,att24 eur_att24
10:36:28  29  ,att25 eur_att25
10:36:28  30  ,att26 eur_att26
10:36:28  31  ,att27 eur_att27
10:36:28  32  ,att28 eur_att28
10:36:28  33  ,att29 eur_att29
10:36:28  34  ,att30 eur_att30
10:36:28  35  ,att31 eur_att31
10:36:28  36  ,att32 eur_att32
10:36:28  37  ,att33 eur_att33
10:36:28  38  ,att34 eur_att34
10:36:28  39  ,att35 eur_att35
10:36:28  40  ,att36 eur_att36
10:36:28  41  ,att37 eur_att37
10:36:28  42  FROM svm6162
10:36:28  43  /

Table created.

Elapsed: 00:00:00.18
10:36:28 SQL> 
10:36:28 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.42
10:36:29 SQL> 
10:36:29 SQL> -- rpt
10:36:29 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.90
10:36:30 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.00
10:36:30 SQL> 
10:36:30 SQL> --
10:36:30 SQL> -- aud610.sql
10:36:30 SQL> --
10:36:30 SQL> 
10:36:30 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:36:30 SQL> 
10:36:30 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.37
10:36:30 SQL> 
10:36:30 SQL> -- I created di5min here:
10:36:30 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:36:30 SQL> 
10:36:30 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:36:30   2  SELECT
10:36:30   3  pair
10:36:30   4  ,ydate
10:36:30   5  ,prdate
10:36:30   6  ,rownum rnum -- acts as t in my time-series
10:36:30   7  ,clse
10:36:30   8  -- Derive a bunch of attributes from clse, the latest price:
10:36:30   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:36:30  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:36:30  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:36:30  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:36:30  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:36:30  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:36:30  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:36:30  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:36:30  17  --
10:36:30  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:36:30  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:36:30  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:36:30  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:36:30  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:36:30  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:36:30  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:36:30  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:36:30  26  --
10:36:30  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:36:30  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:36:30  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:36:30  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:36:30  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:36:30  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:36:30  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:36:30  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:36:30  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:36:30  36  FROM di5min WHERE pair LIKE'%aud%'
10:36:30  37  AND ydate > sysdate - 95
10:36:30  38  ORDER BY ydate
10:36:30  39  /

View created.

Elapsed: 00:00:00.04
10:36:30 SQL> 
10:36:30 SQL> -- rpt
10:36:30 SQL> 
10:36:30 SQL> SELECT
10:36:30   2  pair
10:36:30   3  ,COUNT(pair)
10:36:30   4  ,MIN(clse),MAX(clse)
10:36:30   5  ,MIN(avg6),MAX(avg6)
10:36:30   6  ,MIN(ydate),MAX(ydate)
10:36:30   7  FROM svm6102
10:36:30   8  GROUP BY pair
10:36:30   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19253	.95405	  1.02495 .957141438 1.02284247 2010-10-01 10:40:01 2011-01-04 10:30:00

Elapsed: 00:00:00.88
10:36:31 SQL> 
10:36:31 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:36:31 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.20
10:36:31 SQL> CREATE TABLE svm6122 COMPRESS AS
10:36:31   2  SELECT
10:36:31   3  pair
10:36:31   4  ,ydate
10:36:31   5  ,prdate
10:36:31   6  ,clse
10:36:31   7  -- g6 is important. I want to predict g6:
10:36:31   8  ,ld6 - clse g6
10:36:31   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:36:31  10  -- I want more attributes from the ones I derived above:
10:36:31  11  -- clse relation to moving-min
10:36:31  12  ,clse-min4  cm4
10:36:31  13  ,clse-min6  cm6
10:36:31  14  ,clse-min8  cm8
10:36:31  15  ,clse-min10 cm10
10:36:31  16  ,clse-min12 cm12
10:36:31  17  ,clse-min14 cm14
10:36:31  18  ,clse-min16 cm16
10:36:31  19  ,clse-min18 cm18
10:36:31  20  -- clse relation to moving-avg
10:36:31  21  ,clse-avg4  ca4
10:36:31  22  ,clse-avg6  ca6
10:36:31  23  ,clse-avg8  ca8
10:36:31  24  ,clse-avg10 ca10
10:36:31  25  ,clse-avg12 ca12
10:36:31  26  ,clse-avg14 ca14
10:36:31  27  ,clse-avg16 ca16
10:36:31  28  ,clse-avg18 ca18
10:36:31  29  -- clse relation to moving-max
10:36:31  30  ,clse-max4  cx4
10:36:31  31  ,clse-max6  cx6
10:36:31  32  ,clse-max8  cx8
10:36:31  33  ,clse-max10 cx10
10:36:31  34  ,clse-max12 cx12
10:36:31  35  ,clse-max14 cx14
10:36:31  36  ,clse-max16 cx16
10:36:31  37  ,clse-max18 cx18
10:36:31  38  -- Derive more attributes.
10:36:31  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:36:31  40  -- But COVAR_POP is more stable:
10:36:31  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:36:31  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:36:31  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:36:31  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:36:31  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:36:31  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:36:31  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:36:31  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:36:31  49  -- Derive date related attributes:
10:36:31  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:36:31  51  ,0+TO_CHAR(ydate,'D')d
10:36:31  52  ,0+TO_CHAR(ydate,'W')w
10:36:31  53  -- mpm stands for minutes-past-midnight:
10:36:31  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:36:31  55  -- mph stands for minutes-past-hour:
10:36:31  56  ,0+TO_CHAR(ydate,'MI')mph
10:36:31  57  FROM svm6102
10:36:31  58  ORDER BY ydate
10:36:31  59  /

Table created.

Elapsed: 00:00:02.09
10:36:33 SQL> 
10:36:33 SQL> -- rpt
10:36:33 SQL> 
10:36:33 SQL> SELECT
10:36:33   2  pair
10:36:33   3  ,COUNT(pair)
10:36:33   4  ,MIN(clse),MAX(clse)
10:36:33   5  ,MIN(ydate),MAX(ydate)
10:36:33   6  FROM svm6122
10:36:33   7  GROUP BY pair
10:36:33   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19253	.95405	  1.02495 2010-10-01 10:40:01 2011-01-04 10:30:00

Elapsed: 00:00:00.04
10:36:33 SQL> 
10:36:33 SQL> -- Prepare for derivation of NTILE based params:
10:36:33 SQL> 
10:36:33 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.20
10:36:34 SQL> CREATE TABLE svm6142 COMPRESS AS
10:36:34   2  SELECT
10:36:34   3  pair
10:36:34   4  ,ydate
10:36:34   5  ,prdate
10:36:34   6  ,clse
10:36:34   7  ,g6
10:36:34   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:36:34   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:36:34  10  ,CASE WHEN trend IS NULL THEN 1
10:36:34  11  	    WHEN trend =0      THEN 1
10:36:34  12  	    ELSE trend END trend
10:36:34  13  ,cm4
10:36:34  14  ,cm6
10:36:34  15  ,cm8
10:36:34  16  ,cm10
10:36:34  17  ,cm12
10:36:34  18  ,cm14
10:36:34  19  ,cm16
10:36:34  20  ,cm18
10:36:34  21  --
10:36:34  22  ,ca4
10:36:34  23  ,ca6
10:36:34  24  ,ca8
10:36:34  25  ,ca10
10:36:34  26  ,ca12
10:36:34  27  ,ca14
10:36:34  28  ,ca16
10:36:34  29  ,ca18
10:36:34  30  --
10:36:34  31  ,cx4
10:36:34  32  ,cx6
10:36:34  33  ,cx8
10:36:34  34  ,cx10
10:36:34  35  ,cx12
10:36:34  36  ,cx14
10:36:34  37  ,cx16
10:36:34  38  ,cx18
10:36:34  39  --
10:36:34  40  ,crr4
10:36:34  41  ,crr6
10:36:34  42  ,crr8
10:36:34  43  ,crr10
10:36:34  44  ,crr12
10:36:34  45  ,crr14
10:36:34  46  ,crr16
10:36:34  47  ,crr18
10:36:34  48  --
10:36:34  49  ,hh
10:36:34  50  ,d
10:36:34  51  ,w
10:36:34  52  ,mpm
10:36:34  53  ,mph
10:36:34  54  FROM svm6122
10:36:34  55  ORDER BY ydate
10:36:34  56  /

Table created.

Elapsed: 00:00:00.37
10:36:34 SQL> 
10:36:34 SQL> -- rpt
10:36:34 SQL> 
10:36:34 SQL> SELECT
10:36:34   2  pair
10:36:34   3  ,trend
10:36:34   4  ,gatt
10:36:34   5  ,COUNT(pair)
10:36:34   6  ,AVG(g6)
10:36:34   7  FROM svm6142
10:36:34   8  GROUP BY pair,trend,gatt
10:36:34   9  ORDER BY pair,trend,gatt
10:36:34  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5268 -.00220521
aud_usd 	-1 up	      3659 .003763747
aud_usd 	-1		72
aud_usd 	 1 nup	      6660 -.00210486
aud_usd 	 1 up	      3594 .004054014

Elapsed: 00:00:00.03
10:36:34 SQL> 
10:36:34 SQL> 
10:36:34 SQL> -- Derive NTILE based params:
10:36:34 SQL> 
10:36:34 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.26
10:36:34 SQL> CREATE TABLE svm6162 COMPRESS AS
10:36:34   2  SELECT
10:36:34   3  pair
10:36:34   4  ,ydate
10:36:34   5  ,prdate
10:36:34   6  ,clse
10:36:34   7  ,g6
10:36:34   8  ,gatt
10:36:34   9  ,gattn
10:36:34  10  ,trend
10:36:34  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:36:34  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:36:34  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:36:34  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:36:34  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:36:34  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:36:34  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:36:34  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:36:34  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:36:34  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:36:34  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:36:34  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:36:34  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:36:34  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:36:34  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:36:34  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:36:34  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:36:34  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:36:34  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:36:34  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:36:34  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:36:34  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:36:34  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:36:34  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:36:34  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:36:34  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:36:34  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:36:34  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:36:34  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:36:34  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:36:34  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:36:34  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:36:34  43  ,hh  att32
10:36:34  44  ,d   att33
10:36:34  45  ,w   att34
10:36:34  46  ,mpm att35
10:36:34  47  ,mph att36
10:36:34  48  ,trend att37
10:36:34  49  FROM svm6142
10:36:34  50  ORDER BY ydate
10:36:34  51  /

Table created.

Elapsed: 00:00:04.80
10:36:39 SQL> 
10:36:39 SQL> -- rpt
10:36:39 SQL> 
10:36:39 SQL> SELECT
10:36:39   2  pair
10:36:39   3  ,trend
10:36:39   4  ,gatt
10:36:39   5  ,COUNT(pair)
10:36:39   6  ,AVG(g6)
10:36:39   7  FROM svm6162
10:36:39   8  GROUP BY pair,trend,gatt
10:36:39   9  ORDER BY pair,trend,gatt
10:36:39  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5268 -.00220521
aud_usd 	-1 up	      3659 .003763747
aud_usd 	-1		72
aud_usd 	 1 nup	      6660 -.00210486
aud_usd 	 1 up	      3594 .004054014

Elapsed: 00:00:00.03
10:36:39 SQL> 
10:36:39 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.11
10:36:39 SQL> CREATE TABLE modsrc COMPRESS AS
10:36:39   2  SELECT
10:36:39   3  pair
10:36:39   4  ,ydate
10:36:39   5  ,prdate
10:36:39   6  ,trend
10:36:39   7  ,g6
10:36:39   8  ,gatt
10:36:39   9  ,gattn
10:36:39  10  FROM svm6162
10:36:39  11  /

Table created.

Elapsed: 00:00:00.08
10:36:39 SQL> 
10:36:39 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
10:36:39 SQL> 
10:36:39 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
10:36:40 SQL> CREATE TABLE aud_ms610 COMPRESS AS
10:36:40   2  SELECT
10:36:40   3  ydate
10:36:40   4  ,trend aud_trend
10:36:40   5  ,g6    aud_g6
10:36:40   6  ,gatt  aud_gatt
10:36:40   7  ,gattn aud_gattn
10:36:40   8  FROM modsrc
10:36:40   9  /

Table created.

Elapsed: 00:00:00.06
10:36:40 SQL> 
10:36:40 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
10:36:40 SQL> 
10:36:40 SQL> -- I need a copy of the attributes:
10:36:40 SQL> 
10:36:40 SQL> 
10:36:40 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.04
10:36:40 SQL> CREATE TABLE aud_att COMPRESS AS
10:36:40   2  SELECT
10:36:40   3  ydate
10:36:40   4  ,att00 aud_att00
10:36:40   5  ,att01 aud_att01
10:36:40   6  ,att02 aud_att02
10:36:40   7  ,att03 aud_att03
10:36:40   8  ,att04 aud_att04
10:36:40   9  ,att05 aud_att05
10:36:40  10  ,att06 aud_att06
10:36:40  11  ,att07 aud_att07
10:36:40  12  ,att08 aud_att08
10:36:40  13  ,att09 aud_att09
10:36:40  14  ,att10 aud_att10
10:36:40  15  ,att11 aud_att11
10:36:40  16  ,att12 aud_att12
10:36:40  17  ,att13 aud_att13
10:36:40  18  ,att14 aud_att14
10:36:40  19  ,att15 aud_att15
10:36:40  20  ,att16 aud_att16
10:36:40  21  ,att17 aud_att17
10:36:40  22  ,att18 aud_att18
10:36:40  23  ,att19 aud_att19
10:36:40  24  ,att20 aud_att20
10:36:40  25  ,att21 aud_att21
10:36:40  26  ,att22 aud_att22
10:36:40  27  ,att23 aud_att23
10:36:40  28  ,att24 aud_att24
10:36:40  29  ,att25 aud_att25
10:36:40  30  ,att26 aud_att26
10:36:40  31  ,att27 aud_att27
10:36:40  32  ,att28 aud_att28
10:36:40  33  ,att29 aud_att29
10:36:40  34  ,att30 aud_att30
10:36:40  35  ,att31 aud_att31
10:36:40  36  ,att32 aud_att32
10:36:40  37  ,att33 aud_att33
10:36:40  38  ,att34 aud_att34
10:36:40  39  ,att35 aud_att35
10:36:40  40  ,att36 aud_att36
10:36:40  41  ,att37 aud_att37
10:36:40  42  FROM svm6162
10:36:40  43  /

Table created.

Elapsed: 00:00:00.18
10:36:40 SQL> 
10:36:40 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
10:36:40 SQL> 
10:36:40 SQL> -- rpt
10:36:40 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19253

Elapsed: 00:00:00.87
10:36:41 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19253

Elapsed: 00:00:00.00
10:36:41 SQL> 
10:36:41 SQL> --
10:36:41 SQL> -- gbp610.sql
10:36:41 SQL> --
10:36:41 SQL> 
10:36:41 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:36:41 SQL> 
10:36:41 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.41
10:36:42 SQL> 
10:36:42 SQL> -- I created di5min here:
10:36:42 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:36:42 SQL> 
10:36:42 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:36:42   2  SELECT
10:36:42   3  pair
10:36:42   4  ,ydate
10:36:42   5  ,prdate
10:36:42   6  ,rownum rnum -- acts as t in my time-series
10:36:42   7  ,clse
10:36:42   8  -- Derive a bunch of attributes from clse, the latest price:
10:36:42   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:36:42  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:36:42  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:36:42  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:36:42  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:36:42  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:36:42  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:36:42  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:36:42  17  --
10:36:42  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:36:42  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:36:42  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:36:42  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:36:42  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:36:42  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:36:42  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:36:42  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:36:42  26  --
10:36:42  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:36:42  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:36:42  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:36:42  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:36:42  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:36:42  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:36:42  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:36:42  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:36:42  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:36:42  36  FROM di5min WHERE pair LIKE'%gbp%'
10:36:42  37  AND ydate > sysdate - 95
10:36:42  38  ORDER BY ydate
10:36:42  39  /

View created.

Elapsed: 00:00:00.05
10:36:42 SQL> 
10:36:42 SQL> -- rpt
10:36:42 SQL> 
10:36:42 SQL> SELECT
10:36:42   2  pair
10:36:42   3  ,COUNT(pair)
10:36:42   4  ,MIN(clse),MAX(clse)
10:36:42   5  ,MIN(avg6),MAX(avg6)
10:36:42   6  ,MIN(ydate),MAX(ydate)
10:36:42   7  FROM svm6102
10:36:42   8  GROUP BY pair
10:36:42   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19254   1.535325	   1.6295 1.53696747 1.62716986 2010-10-01 10:40:01 2011-01-04 10:25:00

Elapsed: 00:00:00.85
10:36:43 SQL> 
10:36:43 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:36:43 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.18
10:36:43 SQL> CREATE TABLE svm6122 COMPRESS AS
10:36:43   2  SELECT
10:36:43   3  pair
10:36:43   4  ,ydate
10:36:43   5  ,prdate
10:36:43   6  ,clse
10:36:43   7  -- g6 is important. I want to predict g6:
10:36:43   8  ,ld6 - clse g6
10:36:43   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:36:43  10  -- I want more attributes from the ones I derived above:
10:36:43  11  -- clse relation to moving-min
10:36:43  12  ,clse-min4  cm4
10:36:43  13  ,clse-min6  cm6
10:36:43  14  ,clse-min8  cm8
10:36:43  15  ,clse-min10 cm10
10:36:43  16  ,clse-min12 cm12
10:36:43  17  ,clse-min14 cm14
10:36:43  18  ,clse-min16 cm16
10:36:43  19  ,clse-min18 cm18
10:36:43  20  -- clse relation to moving-avg
10:36:43  21  ,clse-avg4  ca4
10:36:43  22  ,clse-avg6  ca6
10:36:43  23  ,clse-avg8  ca8
10:36:43  24  ,clse-avg10 ca10
10:36:43  25  ,clse-avg12 ca12
10:36:43  26  ,clse-avg14 ca14
10:36:43  27  ,clse-avg16 ca16
10:36:43  28  ,clse-avg18 ca18
10:36:43  29  -- clse relation to moving-max
10:36:43  30  ,clse-max4  cx4
10:36:43  31  ,clse-max6  cx6
10:36:43  32  ,clse-max8  cx8
10:36:43  33  ,clse-max10 cx10
10:36:43  34  ,clse-max12 cx12
10:36:43  35  ,clse-max14 cx14
10:36:43  36  ,clse-max16 cx16
10:36:43  37  ,clse-max18 cx18
10:36:43  38  -- Derive more attributes.
10:36:43  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:36:43  40  -- But COVAR_POP is more stable:
10:36:43  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:36:43  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:36:43  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:36:43  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:36:43  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:36:43  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:36:43  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:36:43  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:36:43  49  -- Derive date related attributes:
10:36:43  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:36:43  51  ,0+TO_CHAR(ydate,'D')d
10:36:43  52  ,0+TO_CHAR(ydate,'W')w
10:36:43  53  -- mpm stands for minutes-past-midnight:
10:36:43  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:36:43  55  -- mph stands for minutes-past-hour:
10:36:43  56  ,0+TO_CHAR(ydate,'MI')mph
10:36:43  57  FROM svm6102
10:36:43  58  ORDER BY ydate
10:36:43  59  /

Table created.

Elapsed: 00:00:02.10
10:36:45 SQL> 
10:36:45 SQL> -- rpt
10:36:45 SQL> 
10:36:45 SQL> SELECT
10:36:45   2  pair
10:36:45   3  ,COUNT(pair)
10:36:45   4  ,MIN(clse),MAX(clse)
10:36:45   5  ,MIN(ydate),MAX(ydate)
10:36:45   6  FROM svm6122
10:36:45   7  GROUP BY pair
10:36:45   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19254   1.535325	   1.6295 2010-10-01 10:40:01 2011-01-04 10:25:00

Elapsed: 00:00:00.03
10:36:45 SQL> 
10:36:45 SQL> -- Prepare for derivation of NTILE based params:
10:36:45 SQL> 
10:36:45 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.17
10:36:45 SQL> CREATE TABLE svm6142 COMPRESS AS
10:36:45   2  SELECT
10:36:45   3  pair
10:36:45   4  ,ydate
10:36:45   5  ,prdate
10:36:45   6  ,clse
10:36:45   7  ,g6
10:36:45   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:36:45   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:36:45  10  ,CASE WHEN trend IS NULL THEN 1
10:36:45  11  	    WHEN trend =0      THEN 1
10:36:45  12  	    ELSE trend END trend
10:36:45  13  ,cm4
10:36:45  14  ,cm6
10:36:45  15  ,cm8
10:36:45  16  ,cm10
10:36:45  17  ,cm12
10:36:45  18  ,cm14
10:36:45  19  ,cm16
10:36:45  20  ,cm18
10:36:45  21  --
10:36:45  22  ,ca4
10:36:45  23  ,ca6
10:36:45  24  ,ca8
10:36:45  25  ,ca10
10:36:45  26  ,ca12
10:36:45  27  ,ca14
10:36:45  28  ,ca16
10:36:45  29  ,ca18
10:36:45  30  --
10:36:45  31  ,cx4
10:36:45  32  ,cx6
10:36:45  33  ,cx8
10:36:45  34  ,cx10
10:36:45  35  ,cx12
10:36:45  36  ,cx14
10:36:45  37  ,cx16
10:36:45  38  ,cx18
10:36:45  39  --
10:36:45  40  ,crr4
10:36:45  41  ,crr6
10:36:45  42  ,crr8
10:36:45  43  ,crr10
10:36:45  44  ,crr12
10:36:45  45  ,crr14
10:36:45  46  ,crr16
10:36:45  47  ,crr18
10:36:45  48  --
10:36:45  49  ,hh
10:36:45  50  ,d
10:36:45  51  ,w
10:36:45  52  ,mpm
10:36:45  53  ,mph
10:36:45  54  FROM svm6122
10:36:45  55  ORDER BY ydate
10:36:45  56  /

Table created.

Elapsed: 00:00:00.36
10:36:45 SQL> 
10:36:45 SQL> -- rpt
10:36:45 SQL> 
10:36:45 SQL> SELECT
10:36:45   2  pair
10:36:45   3  ,trend
10:36:45   4  ,gatt
10:36:45   5  ,COUNT(pair)
10:36:45   6  ,AVG(g6)
10:36:45   7  FROM svm6142
10:36:45   8  GROUP BY pair,trend,gatt
10:36:45   9  ORDER BY pair,trend,gatt
10:36:45  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6284  -.0026444
gbp_usd 	-1 up	      3447 .004307082
gbp_usd 	-1		27
gbp_usd 	 1 nup	      6042 -.00259968
gbp_usd 	 1 up	      3409 .004476335
gbp_usd 	 1		45

6 rows selected.

Elapsed: 00:00:00.04
10:36:45 SQL> 
10:36:45 SQL> 
10:36:45 SQL> -- Derive NTILE based params:
10:36:45 SQL> 
10:36:45 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:01.22
10:36:47 SQL> CREATE TABLE svm6162 COMPRESS AS
10:36:47   2  SELECT
10:36:47   3  pair
10:36:47   4  ,ydate
10:36:47   5  ,prdate
10:36:47   6  ,clse
10:36:47   7  ,g6
10:36:47   8  ,gatt
10:36:47   9  ,gattn
10:36:47  10  ,trend
10:36:47  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:36:47  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:36:47  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:36:47  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:36:47  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:36:47  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:36:47  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:36:47  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:36:47  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:36:47  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:36:47  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:36:47  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:36:47  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:36:47  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:36:47  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:36:47  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:36:47  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:36:47  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:36:47  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:36:47  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:36:47  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:36:47  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:36:47  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:36:47  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:36:47  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:36:47  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:36:47  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:36:47  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:36:47  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:36:47  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:36:47  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:36:47  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:36:47  43  ,hh  att32
10:36:47  44  ,d   att33
10:36:47  45  ,w   att34
10:36:47  46  ,mpm att35
10:36:47  47  ,mph att36
10:36:47  48  ,trend att37
10:36:47  49  FROM svm6142
10:36:47  50  ORDER BY ydate
10:36:47  51  /

Table created.

Elapsed: 00:00:04.69
10:36:51 SQL> 
10:36:51 SQL> -- rpt
10:36:51 SQL> 
10:36:51 SQL> SELECT
10:36:51   2  pair
10:36:51   3  ,trend
10:36:51   4  ,gatt
10:36:51   5  ,COUNT(pair)
10:36:51   6  ,AVG(g6)
10:36:51   7  FROM svm6162
10:36:51   8  GROUP BY pair,trend,gatt
10:36:51   9  ORDER BY pair,trend,gatt
10:36:51  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6284  -.0026444
gbp_usd 	-1 up	      3447 .004307082
gbp_usd 	-1		27
gbp_usd 	 1 nup	      6042 -.00259968
gbp_usd 	 1 up	      3409 .004476335
gbp_usd 	 1		45

6 rows selected.

Elapsed: 00:00:00.03
10:36:51 SQL> 
10:36:51 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.10
10:36:52 SQL> CREATE TABLE modsrc COMPRESS AS
10:36:52   2  SELECT
10:36:52   3  pair
10:36:52   4  ,ydate
10:36:52   5  ,prdate
10:36:52   6  ,trend
10:36:52   7  ,g6
10:36:52   8  ,gatt
10:36:52   9  ,gattn
10:36:52  10  FROM svm6162
10:36:52  11  /

Table created.

Elapsed: 00:00:00.07
10:36:52 SQL> 
10:36:52 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
10:36:52 SQL> 
10:36:52 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
10:36:52 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
10:36:52   2  SELECT
10:36:52   3  ydate
10:36:52   4  ,trend gbp_trend
10:36:52   5  ,g6    gbp_g6
10:36:52   6  ,gatt  gbp_gatt
10:36:52   7  ,gattn gbp_gattn
10:36:52   8  FROM modsrc
10:36:52   9  /

Table created.

Elapsed: 00:00:00.06
10:36:52 SQL> 
10:36:52 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
10:36:52 SQL> 
10:36:52 SQL> -- I need a copy of the attributes:
10:36:52 SQL> 
10:36:52 SQL> 
10:36:52 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.05
10:36:52 SQL> CREATE TABLE gbp_att COMPRESS AS
10:36:52   2  SELECT
10:36:52   3  ydate
10:36:52   4  ,att00 gbp_att00
10:36:52   5  ,att01 gbp_att01
10:36:52   6  ,att02 gbp_att02
10:36:52   7  ,att03 gbp_att03
10:36:52   8  ,att04 gbp_att04
10:36:52   9  ,att05 gbp_att05
10:36:52  10  ,att06 gbp_att06
10:36:52  11  ,att07 gbp_att07
10:36:52  12  ,att08 gbp_att08
10:36:52  13  ,att09 gbp_att09
10:36:52  14  ,att10 gbp_att10
10:36:52  15  ,att11 gbp_att11
10:36:52  16  ,att12 gbp_att12
10:36:52  17  ,att13 gbp_att13
10:36:52  18  ,att14 gbp_att14
10:36:52  19  ,att15 gbp_att15
10:36:52  20  ,att16 gbp_att16
10:36:52  21  ,att17 gbp_att17
10:36:52  22  ,att18 gbp_att18
10:36:52  23  ,att19 gbp_att19
10:36:52  24  ,att20 gbp_att20
10:36:52  25  ,att21 gbp_att21
10:36:52  26  ,att22 gbp_att22
10:36:52  27  ,att23 gbp_att23
10:36:52  28  ,att24 gbp_att24
10:36:52  29  ,att25 gbp_att25
10:36:52  30  ,att26 gbp_att26
10:36:52  31  ,att27 gbp_att27
10:36:52  32  ,att28 gbp_att28
10:36:52  33  ,att29 gbp_att29
10:36:52  34  ,att30 gbp_att30
10:36:52  35  ,att31 gbp_att31
10:36:52  36  ,att32 gbp_att32
10:36:52  37  ,att33 gbp_att33
10:36:52  38  ,att34 gbp_att34
10:36:52  39  ,att35 gbp_att35
10:36:52  40  ,att36 gbp_att36
10:36:52  41  ,att37 gbp_att37
10:36:52  42  FROM svm6162
10:36:52  43  /

Table created.

Elapsed: 00:00:00.20
10:36:52 SQL> 
10:36:52 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.55
10:36:53 SQL> 
10:36:53 SQL> -- rpt
10:36:53 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19254

Elapsed: 00:00:00.84
10:36:54 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19254

Elapsed: 00:00:00.01
10:36:54 SQL> 
10:36:54 SQL> --
10:36:54 SQL> -- jpy610.sql
10:36:54 SQL> --
10:36:54 SQL> 
10:36:54 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:36:54 SQL> 
10:36:54 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
10:36:54 SQL> 
10:36:54 SQL> -- I created di5min here:
10:36:54 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:36:54 SQL> 
10:36:54 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:36:54   2  SELECT
10:36:54   3  pair
10:36:54   4  ,ydate
10:36:54   5  ,prdate
10:36:54   6  ,rownum rnum -- acts as t in my time-series
10:36:54   7  ,clse
10:36:54   8  -- Derive a bunch of attributes from clse, the latest price:
10:36:54   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:36:54  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:36:54  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:36:54  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:36:54  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:36:54  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:36:54  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:36:54  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:36:54  17  --
10:36:54  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:36:54  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:36:54  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:36:54  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:36:54  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:36:54  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:36:54  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:36:54  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:36:54  26  --
10:36:54  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:36:54  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:36:54  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:36:54  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:36:54  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:36:54  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:36:54  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:36:54  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:36:54  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:36:54  36  FROM di5min WHERE pair LIKE'%jpy%'
10:36:54  37  AND ydate > sysdate - 95
10:36:54  38  ORDER BY ydate
10:36:54  39  /

View created.

Elapsed: 00:00:00.05
10:36:54 SQL> 
10:36:54 SQL> -- rpt
10:36:54 SQL> 
10:36:54 SQL> SELECT
10:36:54   2  pair
10:36:54   3  ,COUNT(pair)
10:36:54   4  ,MIN(clse),MAX(clse)
10:36:54   5  ,MIN(avg6),MAX(avg6)
10:36:54   6  ,MIN(ydate),MAX(ydate)
10:36:54   7  FROM svm6102
10:36:54   8  GROUP BY pair
10:36:54   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19254	 80.25	   84.485 80.3595205 84.3105479 2010-10-01 10:40:01 2011-01-04 10:35:00

Elapsed: 00:00:00.92
10:36:55 SQL> 
10:36:55 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:36:55 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.22
10:36:55 SQL> CREATE TABLE svm6122 COMPRESS AS
10:36:55   2  SELECT
10:36:55   3  pair
10:36:55   4  ,ydate
10:36:55   5  ,prdate
10:36:55   6  ,clse
10:36:55   7  -- g6 is important. I want to predict g6:
10:36:55   8  ,ld6 - clse g6
10:36:55   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:36:55  10  -- I want more attributes from the ones I derived above:
10:36:55  11  -- clse relation to moving-min
10:36:55  12  ,clse-min4  cm4
10:36:55  13  ,clse-min6  cm6
10:36:55  14  ,clse-min8  cm8
10:36:55  15  ,clse-min10 cm10
10:36:55  16  ,clse-min12 cm12
10:36:55  17  ,clse-min14 cm14
10:36:55  18  ,clse-min16 cm16
10:36:55  19  ,clse-min18 cm18
10:36:55  20  -- clse relation to moving-avg
10:36:55  21  ,clse-avg4  ca4
10:36:55  22  ,clse-avg6  ca6
10:36:55  23  ,clse-avg8  ca8
10:36:55  24  ,clse-avg10 ca10
10:36:55  25  ,clse-avg12 ca12
10:36:55  26  ,clse-avg14 ca14
10:36:55  27  ,clse-avg16 ca16
10:36:55  28  ,clse-avg18 ca18
10:36:55  29  -- clse relation to moving-max
10:36:55  30  ,clse-max4  cx4
10:36:55  31  ,clse-max6  cx6
10:36:55  32  ,clse-max8  cx8
10:36:55  33  ,clse-max10 cx10
10:36:55  34  ,clse-max12 cx12
10:36:55  35  ,clse-max14 cx14
10:36:55  36  ,clse-max16 cx16
10:36:55  37  ,clse-max18 cx18
10:36:55  38  -- Derive more attributes.
10:36:55  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:36:55  40  -- But COVAR_POP is more stable:
10:36:55  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:36:55  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:36:55  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:36:55  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:36:55  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:36:55  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:36:55  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:36:55  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:36:55  49  -- Derive date related attributes:
10:36:55  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:36:55  51  ,0+TO_CHAR(ydate,'D')d
10:36:55  52  ,0+TO_CHAR(ydate,'W')w
10:36:55  53  -- mpm stands for minutes-past-midnight:
10:36:55  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:36:55  55  -- mph stands for minutes-past-hour:
10:36:55  56  ,0+TO_CHAR(ydate,'MI')mph
10:36:55  57  FROM svm6102
10:36:55  58  ORDER BY ydate
10:36:55  59  /

Table created.

Elapsed: 00:00:02.09
10:36:57 SQL> 
10:36:57 SQL> -- rpt
10:36:57 SQL> 
10:36:57 SQL> SELECT
10:36:57   2  pair
10:36:57   3  ,COUNT(pair)
10:36:57   4  ,MIN(clse),MAX(clse)
10:36:57   5  ,MIN(ydate),MAX(ydate)
10:36:57   6  FROM svm6122
10:36:57   7  GROUP BY pair
10:36:57   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19254	 80.25	   84.485 2010-10-01 10:40:01 2011-01-04 10:35:00

Elapsed: 00:00:00.04
10:36:57 SQL> 
10:36:57 SQL> -- Prepare for derivation of NTILE based params:
10:36:57 SQL> 
10:36:57 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.18
10:36:58 SQL> CREATE TABLE svm6142 COMPRESS AS
10:36:58   2  SELECT
10:36:58   3  pair
10:36:58   4  ,ydate
10:36:58   5  ,prdate
10:36:58   6  ,clse
10:36:58   7  ,g6
10:36:58   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:36:58   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:36:58  10  ,CASE WHEN trend IS NULL THEN 1
10:36:58  11  	    WHEN trend =0      THEN 1
10:36:58  12  	    ELSE trend END trend
10:36:58  13  ,cm4
10:36:58  14  ,cm6
10:36:58  15  ,cm8
10:36:58  16  ,cm10
10:36:58  17  ,cm12
10:36:58  18  ,cm14
10:36:58  19  ,cm16
10:36:58  20  ,cm18
10:36:58  21  --
10:36:58  22  ,ca4
10:36:58  23  ,ca6
10:36:58  24  ,ca8
10:36:58  25  ,ca10
10:36:58  26  ,ca12
10:36:58  27  ,ca14
10:36:58  28  ,ca16
10:36:58  29  ,ca18
10:36:58  30  --
10:36:58  31  ,cx4
10:36:58  32  ,cx6
10:36:58  33  ,cx8
10:36:58  34  ,cx10
10:36:58  35  ,cx12
10:36:58  36  ,cx14
10:36:58  37  ,cx16
10:36:58  38  ,cx18
10:36:58  39  --
10:36:58  40  ,crr4
10:36:58  41  ,crr6
10:36:58  42  ,crr8
10:36:58  43  ,crr10
10:36:58  44  ,crr12
10:36:58  45  ,crr14
10:36:58  46  ,crr16
10:36:58  47  ,crr18
10:36:58  48  --
10:36:58  49  ,hh
10:36:58  50  ,d
10:36:58  51  ,w
10:36:58  52  ,mpm
10:36:58  53  ,mph
10:36:58  54  FROM svm6122
10:36:58  55  ORDER BY ydate
10:36:58  56  /

Table created.

Elapsed: 00:00:00.35
10:36:58 SQL> 
10:36:58 SQL> -- rpt
10:36:58 SQL> 
10:36:58 SQL> SELECT
10:36:58   2  pair
10:36:58   3  ,trend
10:36:58   4  ,gatt
10:36:58   5  ,COUNT(pair)
10:36:58   6  ,AVG(g6)
10:36:58   7  FROM svm6142
10:36:58   8  GROUP BY pair,trend,gatt
10:36:58   9  ORDER BY pair,trend,gatt
10:36:58  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5080 -.16663166
usd_jpy 	-1 up	      4765 .165044368
usd_jpy 	 1 nup	      4912  -.1561848
usd_jpy 	 1 up	      4425 .169064617
usd_jpy 	 1		72

Elapsed: 00:00:00.04
10:36:58 SQL> 
10:36:58 SQL> 
10:36:58 SQL> -- Derive NTILE based params:
10:36:58 SQL> 
10:36:58 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
10:36:58 SQL> CREATE TABLE svm6162 COMPRESS AS
10:36:58   2  SELECT
10:36:58   3  pair
10:36:58   4  ,ydate
10:36:58   5  ,prdate
10:36:58   6  ,clse
10:36:58   7  ,g6
10:36:58   8  ,gatt
10:36:58   9  ,gattn
10:36:58  10  ,trend
10:36:58  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:36:58  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:36:58  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:36:58  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:36:58  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:36:58  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:36:58  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:36:58  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:36:58  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:36:58  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:36:58  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:36:58  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:36:58  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:36:58  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:36:58  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:36:58  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:36:58  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:36:58  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:36:58  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:36:58  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:36:58  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:36:58  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:36:58  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:36:58  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:36:58  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:36:58  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:36:58  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:36:58  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:36:58  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:36:58  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:36:58  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:36:58  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:36:58  43  ,hh  att32
10:36:58  44  ,d   att33
10:36:58  45  ,w   att34
10:36:58  46  ,mpm att35
10:36:58  47  ,mph att36
10:36:58  48  ,trend att37
10:36:58  49  FROM svm6142
10:36:58  50  ORDER BY ydate
10:36:58  51  /

Table created.

Elapsed: 00:00:04.65
10:37:03 SQL> 
10:37:03 SQL> -- rpt
10:37:03 SQL> 
10:37:03 SQL> SELECT
10:37:03   2  pair
10:37:03   3  ,trend
10:37:03   4  ,gatt
10:37:03   5  ,COUNT(pair)
10:37:03   6  ,AVG(g6)
10:37:03   7  FROM svm6162
10:37:03   8  GROUP BY pair,trend,gatt
10:37:03   9  ORDER BY pair,trend,gatt
10:37:03  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5080 -.16663166
usd_jpy 	-1 up	      4765 .165044368
usd_jpy 	 1 nup	      4912  -.1561848
usd_jpy 	 1 up	      4425 .169064617
usd_jpy 	 1		72

Elapsed: 00:00:00.03
10:37:03 SQL> 
10:37:03 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
10:37:03 SQL> CREATE TABLE modsrc COMPRESS AS
10:37:03   2  SELECT
10:37:03   3  pair
10:37:03   4  ,ydate
10:37:03   5  ,prdate
10:37:03   6  ,trend
10:37:03   7  ,g6
10:37:03   8  ,gatt
10:37:03   9  ,gattn
10:37:03  10  FROM svm6162
10:37:03  11  /

Table created.

Elapsed: 00:00:00.09
10:37:03 SQL> 
10:37:03 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
10:37:03 SQL> 
10:37:03 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
10:37:03 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
10:37:03   2  SELECT
10:37:03   3  ydate
10:37:03   4  ,trend jpy_trend
10:37:03   5  ,g6    jpy_g6
10:37:03   6  ,gatt  jpy_gatt
10:37:03   7  ,gattn jpy_gattn
10:37:03   8  FROM modsrc
10:37:03   9  /

Table created.

Elapsed: 00:00:00.08
10:37:03 SQL> 
10:37:03 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
10:37:03 SQL> 
10:37:03 SQL> -- I need a copy of the attributes:
10:37:03 SQL> 
10:37:03 SQL> 
10:37:03 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.05
10:37:03 SQL> CREATE TABLE jpy_att COMPRESS AS
10:37:03   2  SELECT
10:37:04   3  ydate
10:37:04   4  ,att00 jpy_att00
10:37:04   5  ,att01 jpy_att01
10:37:04   6  ,att02 jpy_att02
10:37:04   7  ,att03 jpy_att03
10:37:04   8  ,att04 jpy_att04
10:37:04   9  ,att05 jpy_att05
10:37:04  10  ,att06 jpy_att06
10:37:04  11  ,att07 jpy_att07
10:37:04  12  ,att08 jpy_att08
10:37:04  13  ,att09 jpy_att09
10:37:04  14  ,att10 jpy_att10
10:37:04  15  ,att11 jpy_att11
10:37:04  16  ,att12 jpy_att12
10:37:04  17  ,att13 jpy_att13
10:37:04  18  ,att14 jpy_att14
10:37:04  19  ,att15 jpy_att15
10:37:04  20  ,att16 jpy_att16
10:37:04  21  ,att17 jpy_att17
10:37:04  22  ,att18 jpy_att18
10:37:04  23  ,att19 jpy_att19
10:37:04  24  ,att20 jpy_att20
10:37:04  25  ,att21 jpy_att21
10:37:04  26  ,att22 jpy_att22
10:37:04  27  ,att23 jpy_att23
10:37:04  28  ,att24 jpy_att24
10:37:04  29  ,att25 jpy_att25
10:37:04  30  ,att26 jpy_att26
10:37:04  31  ,att27 jpy_att27
10:37:04  32  ,att28 jpy_att28
10:37:04  33  ,att29 jpy_att29
10:37:04  34  ,att30 jpy_att30
10:37:04  35  ,att31 jpy_att31
10:37:04  36  ,att32 jpy_att32
10:37:04  37  ,att33 jpy_att33
10:37:04  38  ,att34 jpy_att34
10:37:04  39  ,att35 jpy_att35
10:37:04  40  ,att36 jpy_att36
10:37:04  41  ,att37 jpy_att37
10:37:04  42  FROM svm6162
10:37:04  43  /

Table created.

Elapsed: 00:00:00.16
10:37:04 SQL> 
10:37:04 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
10:37:04 SQL> 
10:37:04 SQL> -- rpt
10:37:04 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19254

Elapsed: 00:00:00.92
10:37:05 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19254

Elapsed: 00:00:00.00
10:37:05 SQL> 
10:37:05 SQL> --
10:37:05 SQL> -- cad610.sql
10:37:05 SQL> --
10:37:05 SQL> 
10:37:05 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:37:05 SQL> 
10:37:05 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
10:37:05 SQL> 
10:37:05 SQL> -- I created di5min here:
10:37:05 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:37:05 SQL> 
10:37:05 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:37:05   2  SELECT
10:37:05   3  pair
10:37:05   4  ,ydate
10:37:05   5  ,prdate
10:37:05   6  ,rownum rnum -- acts as t in my time-series
10:37:05   7  ,clse
10:37:05   8  -- Derive a bunch of attributes from clse, the latest price:
10:37:05   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:37:05  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:37:05  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:37:05  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:37:05  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:37:05  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:37:05  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:37:05  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:37:05  17  --
10:37:05  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:37:05  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:37:05  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:37:05  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:37:05  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:37:05  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:37:05  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:37:05  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:37:05  26  --
10:37:05  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:37:05  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:37:05  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:37:05  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:37:05  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:37:05  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:37:05  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:37:05  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:37:05  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:37:05  36  FROM di5min WHERE pair LIKE'%cad%'
10:37:05  37  AND ydate > sysdate - 95
10:37:05  38  ORDER BY ydate
10:37:05  39  /

View created.

Elapsed: 00:00:00.05
10:37:05 SQL> 
10:37:05 SQL> -- rpt
10:37:05 SQL> 
10:37:05 SQL> SELECT
10:37:05   2  pair
10:37:05   3  ,COUNT(pair)
10:37:05   4  ,MIN(clse),MAX(clse)
10:37:05   5  ,MIN(avg6),MAX(avg6)
10:37:05   6  ,MIN(ydate),MAX(ydate)
10:37:05   7  FROM svm6102
10:37:05   8  GROUP BY pair
10:37:05   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19254    .988925	   1.0355 .990603938 1.03282877 2010-10-01 10:40:01 2011-01-04 10:35:00

Elapsed: 00:00:00.83
10:37:06 SQL> 
10:37:06 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:37:06 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.22
10:37:07 SQL> CREATE TABLE svm6122 COMPRESS AS
10:37:07   2  SELECT
10:37:07   3  pair
10:37:07   4  ,ydate
10:37:07   5  ,prdate
10:37:07   6  ,clse
10:37:07   7  -- g6 is important. I want to predict g6:
10:37:07   8  ,ld6 - clse g6
10:37:07   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:37:07  10  -- I want more attributes from the ones I derived above:
10:37:07  11  -- clse relation to moving-min
10:37:07  12  ,clse-min4  cm4
10:37:07  13  ,clse-min6  cm6
10:37:07  14  ,clse-min8  cm8
10:37:07  15  ,clse-min10 cm10
10:37:07  16  ,clse-min12 cm12
10:37:07  17  ,clse-min14 cm14
10:37:07  18  ,clse-min16 cm16
10:37:07  19  ,clse-min18 cm18
10:37:07  20  -- clse relation to moving-avg
10:37:07  21  ,clse-avg4  ca4
10:37:07  22  ,clse-avg6  ca6
10:37:07  23  ,clse-avg8  ca8
10:37:07  24  ,clse-avg10 ca10
10:37:07  25  ,clse-avg12 ca12
10:37:07  26  ,clse-avg14 ca14
10:37:07  27  ,clse-avg16 ca16
10:37:07  28  ,clse-avg18 ca18
10:37:07  29  -- clse relation to moving-max
10:37:07  30  ,clse-max4  cx4
10:37:07  31  ,clse-max6  cx6
10:37:07  32  ,clse-max8  cx8
10:37:07  33  ,clse-max10 cx10
10:37:07  34  ,clse-max12 cx12
10:37:07  35  ,clse-max14 cx14
10:37:07  36  ,clse-max16 cx16
10:37:07  37  ,clse-max18 cx18
10:37:07  38  -- Derive more attributes.
10:37:07  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:37:07  40  -- But COVAR_POP is more stable:
10:37:07  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:37:07  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:37:07  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:37:07  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:37:07  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:37:07  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:37:07  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:37:07  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:37:07  49  -- Derive date related attributes:
10:37:07  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:37:07  51  ,0+TO_CHAR(ydate,'D')d
10:37:07  52  ,0+TO_CHAR(ydate,'W')w
10:37:07  53  -- mpm stands for minutes-past-midnight:
10:37:07  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:37:07  55  -- mph stands for minutes-past-hour:
10:37:07  56  ,0+TO_CHAR(ydate,'MI')mph
10:37:07  57  FROM svm6102
10:37:07  58  ORDER BY ydate
10:37:07  59  /

Table created.

Elapsed: 00:00:01.99
10:37:08 SQL> 
10:37:08 SQL> -- rpt
10:37:08 SQL> 
10:37:08 SQL> SELECT
10:37:08   2  pair
10:37:08   3  ,COUNT(pair)
10:37:08   4  ,MIN(clse),MAX(clse)
10:37:08   5  ,MIN(ydate),MAX(ydate)
10:37:08   6  FROM svm6122
10:37:09   7  GROUP BY pair
10:37:09   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19254    .988925	   1.0355 2010-10-01 10:40:01 2011-01-04 10:35:00

Elapsed: 00:00:00.03
10:37:09 SQL> 
10:37:09 SQL> -- Prepare for derivation of NTILE based params:
10:37:09 SQL> 
10:37:09 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.18
10:37:09 SQL> CREATE TABLE svm6142 COMPRESS AS
10:37:09   2  SELECT
10:37:09   3  pair
10:37:09   4  ,ydate
10:37:09   5  ,prdate
10:37:09   6  ,clse
10:37:09   7  ,g6
10:37:09   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:37:09   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:37:09  10  ,CASE WHEN trend IS NULL THEN 1
10:37:09  11  	    WHEN trend =0      THEN 1
10:37:09  12  	    ELSE trend END trend
10:37:09  13  ,cm4
10:37:09  14  ,cm6
10:37:09  15  ,cm8
10:37:09  16  ,cm10
10:37:09  17  ,cm12
10:37:09  18  ,cm14
10:37:09  19  ,cm16
10:37:09  20  ,cm18
10:37:09  21  --
10:37:09  22  ,ca4
10:37:09  23  ,ca6
10:37:09  24  ,ca8
10:37:09  25  ,ca10
10:37:09  26  ,ca12
10:37:09  27  ,ca14
10:37:09  28  ,ca16
10:37:09  29  ,ca18
10:37:09  30  --
10:37:09  31  ,cx4
10:37:09  32  ,cx6
10:37:09  33  ,cx8
10:37:09  34  ,cx10
10:37:09  35  ,cx12
10:37:09  36  ,cx14
10:37:09  37  ,cx16
10:37:09  38  ,cx18
10:37:09  39  --
10:37:09  40  ,crr4
10:37:09  41  ,crr6
10:37:09  42  ,crr8
10:37:09  43  ,crr10
10:37:09  44  ,crr12
10:37:09  45  ,crr14
10:37:09  46  ,crr16
10:37:09  47  ,crr18
10:37:09  48  --
10:37:09  49  ,hh
10:37:09  50  ,d
10:37:09  51  ,w
10:37:09  52  ,mpm
10:37:09  53  ,mph
10:37:09  54  FROM svm6122
10:37:09  55  ORDER BY ydate
10:37:09  56  /

Table created.

Elapsed: 00:00:00.35
10:37:09 SQL> 
10:37:09 SQL> -- rpt
10:37:09 SQL> 
10:37:09 SQL> SELECT
10:37:09   2  pair
10:37:09   3  ,trend
10:37:09   4  ,gatt
10:37:09   5  ,COUNT(pair)
10:37:09   6  ,AVG(g6)
10:37:09   7  FROM svm6142
10:37:09   8  GROUP BY pair,trend,gatt
10:37:09   9  ORDER BY pair,trend,gatt
10:37:09  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7282 -.00126046
usd_cad 	-1 up	      3030 .003047406
usd_cad 	-1		13
usd_cad 	 1 nup	      6559 -.00163905
usd_cad 	 1 up	      2311 .003649906
usd_cad 	 1		59

6 rows selected.

Elapsed: 00:00:00.04
10:37:09 SQL> 
10:37:09 SQL> 
10:37:09 SQL> -- Derive NTILE based params:
10:37:09 SQL> 
10:37:09 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
10:37:09 SQL> CREATE TABLE svm6162 COMPRESS AS
10:37:09   2  SELECT
10:37:09   3  pair
10:37:09   4  ,ydate
10:37:09   5  ,prdate
10:37:09   6  ,clse
10:37:09   7  ,g6
10:37:09   8  ,gatt
10:37:09   9  ,gattn
10:37:09  10  ,trend
10:37:09  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:37:09  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:37:09  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:37:09  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:37:09  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:37:09  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:37:09  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:37:09  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:37:09  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:37:09  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:37:09  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:37:09  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:37:09  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:37:09  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:37:09  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:37:09  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:37:09  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:37:09  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:37:09  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:37:09  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:37:09  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:37:09  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:37:09  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:37:09  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:37:09  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:37:09  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:37:09  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:37:09  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:37:09  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:37:09  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:37:09  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:37:09  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:37:09  43  ,hh  att32
10:37:09  44  ,d   att33
10:37:09  45  ,w   att34
10:37:09  46  ,mpm att35
10:37:09  47  ,mph att36
10:37:09  48  ,trend att37
10:37:09  49  FROM svm6142
10:37:09  50  ORDER BY ydate
10:37:09  51  /

Table created.

Elapsed: 00:00:04.82
10:37:14 SQL> 
10:37:14 SQL> -- rpt
10:37:14 SQL> 
10:37:14 SQL> SELECT
10:37:14   2  pair
10:37:14   3  ,trend
10:37:14   4  ,gatt
10:37:14   5  ,COUNT(pair)
10:37:14   6  ,AVG(g6)
10:37:14   7  FROM svm6162
10:37:14   8  GROUP BY pair,trend,gatt
10:37:14   9  ORDER BY pair,trend,gatt
10:37:14  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7282 -.00126046
usd_cad 	-1 up	      3030 .003047406
usd_cad 	-1		13
usd_cad 	 1 nup	      6559 -.00163905
usd_cad 	 1 up	      2311 .003649906
usd_cad 	 1		59

6 rows selected.

Elapsed: 00:00:00.03
10:37:14 SQL> 
10:37:14 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.11
10:37:14 SQL> CREATE TABLE modsrc COMPRESS AS
10:37:14   2  SELECT
10:37:14   3  pair
10:37:14   4  ,ydate
10:37:14   5  ,prdate
10:37:14   6  ,trend
10:37:14   7  ,g6
10:37:14   8  ,gatt
10:37:14   9  ,gattn
10:37:14  10  FROM svm6162
10:37:14  11  /

Table created.

Elapsed: 00:00:00.08
10:37:14 SQL> 
10:37:14 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
10:37:14 SQL> 
10:37:14 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
10:37:15 SQL> CREATE TABLE cad_ms610 COMPRESS AS
10:37:15   2  SELECT
10:37:15   3  ydate
10:37:15   4  ,trend cad_trend
10:37:15   5  ,g6    cad_g6
10:37:15   6  ,gatt  cad_gatt
10:37:15   7  ,gattn cad_gattn
10:37:15   8  FROM modsrc
10:37:15   9  /

Table created.

Elapsed: 00:00:00.06
10:37:15 SQL> 
10:37:15 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
10:37:15 SQL> 
10:37:15 SQL> -- I need a copy of the attributes:
10:37:15 SQL> 
10:37:15 SQL> 
10:37:15 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.05
10:37:15 SQL> CREATE TABLE cad_att COMPRESS AS
10:37:15   2  SELECT
10:37:15   3  ydate
10:37:15   4  ,att00 cad_att00
10:37:15   5  ,att01 cad_att01
10:37:15   6  ,att02 cad_att02
10:37:15   7  ,att03 cad_att03
10:37:15   8  ,att04 cad_att04
10:37:15   9  ,att05 cad_att05
10:37:15  10  ,att06 cad_att06
10:37:15  11  ,att07 cad_att07
10:37:15  12  ,att08 cad_att08
10:37:15  13  ,att09 cad_att09
10:37:15  14  ,att10 cad_att10
10:37:15  15  ,att11 cad_att11
10:37:15  16  ,att12 cad_att12
10:37:15  17  ,att13 cad_att13
10:37:15  18  ,att14 cad_att14
10:37:15  19  ,att15 cad_att15
10:37:15  20  ,att16 cad_att16
10:37:15  21  ,att17 cad_att17
10:37:15  22  ,att18 cad_att18
10:37:15  23  ,att19 cad_att19
10:37:15  24  ,att20 cad_att20
10:37:15  25  ,att21 cad_att21
10:37:15  26  ,att22 cad_att22
10:37:15  27  ,att23 cad_att23
10:37:15  28  ,att24 cad_att24
10:37:15  29  ,att25 cad_att25
10:37:15  30  ,att26 cad_att26
10:37:15  31  ,att27 cad_att27
10:37:15  32  ,att28 cad_att28
10:37:15  33  ,att29 cad_att29
10:37:15  34  ,att30 cad_att30
10:37:15  35  ,att31 cad_att31
10:37:15  36  ,att32 cad_att32
10:37:15  37  ,att33 cad_att33
10:37:15  38  ,att34 cad_att34
10:37:15  39  ,att35 cad_att35
10:37:15  40  ,att36 cad_att36
10:37:15  41  ,att37 cad_att37
10:37:15  42  FROM svm6162
10:37:15  43  /

Table created.

Elapsed: 00:00:00.17
10:37:15 SQL> 
10:37:15 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
10:37:15 SQL> 
10:37:15 SQL> -- rpt
10:37:15 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19254

Elapsed: 00:00:00.87
10:37:16 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19254

Elapsed: 00:00:00.00
10:37:16 SQL> 
10:37:16 SQL> --
10:37:16 SQL> -- chf610.sql
10:37:16 SQL> --
10:37:16 SQL> 
10:37:16 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:37:16 SQL> 
10:37:16 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.79
10:37:17 SQL> 
10:37:17 SQL> -- I created di5min here:
10:37:17 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:37:17 SQL> 
10:37:17 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:37:17   2  SELECT
10:37:17   3  pair
10:37:17   4  ,ydate
10:37:17   5  ,prdate
10:37:17   6  ,rownum rnum -- acts as t in my time-series
10:37:17   7  ,clse
10:37:17   8  -- Derive a bunch of attributes from clse, the latest price:
10:37:17   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:37:17  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:37:17  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:37:17  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:37:17  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:37:17  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:37:17  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:37:17  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:37:17  17  --
10:37:17  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:37:17  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:37:17  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:37:17  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:37:17  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:37:17  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:37:17  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:37:17  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:37:17  26  --
10:37:17  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:37:17  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:37:17  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:37:17  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:37:17  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:37:17  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:37:17  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:37:17  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:37:17  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:37:17  36  FROM di5min WHERE pair LIKE'%chf%'
10:37:17  37  AND ydate > sysdate - 95
10:37:17  38  ORDER BY ydate
10:37:17  39  /

View created.

Elapsed: 00:00:00.04
10:37:17 SQL> 
10:37:17 SQL> -- rpt
10:37:17 SQL> 
10:37:17 SQL> SELECT
10:37:17   2  pair
10:37:17   3  ,COUNT(pair)
10:37:17   4  ,MIN(clse),MAX(clse)
10:37:17   5  ,MIN(avg6),MAX(avg6)
10:37:17   6  ,MIN(ydate),MAX(ydate)
10:37:17   7  FROM svm6102
10:37:17   8  GROUP BY pair
10:37:17   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19257    .931675	  1.00635  .93325411 1.00498151 2010-10-01 10:40:01 2011-01-04 10:35:00

Elapsed: 00:00:00.82
10:37:18 SQL> 
10:37:18 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:37:18 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.25
10:37:18 SQL> CREATE TABLE svm6122 COMPRESS AS
10:37:18   2  SELECT
10:37:18   3  pair
10:37:18   4  ,ydate
10:37:18   5  ,prdate
10:37:18   6  ,clse
10:37:18   7  -- g6 is important. I want to predict g6:
10:37:18   8  ,ld6 - clse g6
10:37:18   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:37:18  10  -- I want more attributes from the ones I derived above:
10:37:18  11  -- clse relation to moving-min
10:37:18  12  ,clse-min4  cm4
10:37:18  13  ,clse-min6  cm6
10:37:18  14  ,clse-min8  cm8
10:37:18  15  ,clse-min10 cm10
10:37:18  16  ,clse-min12 cm12
10:37:18  17  ,clse-min14 cm14
10:37:18  18  ,clse-min16 cm16
10:37:18  19  ,clse-min18 cm18
10:37:18  20  -- clse relation to moving-avg
10:37:18  21  ,clse-avg4  ca4
10:37:18  22  ,clse-avg6  ca6
10:37:18  23  ,clse-avg8  ca8
10:37:18  24  ,clse-avg10 ca10
10:37:18  25  ,clse-avg12 ca12
10:37:18  26  ,clse-avg14 ca14
10:37:18  27  ,clse-avg16 ca16
10:37:18  28  ,clse-avg18 ca18
10:37:18  29  -- clse relation to moving-max
10:37:18  30  ,clse-max4  cx4
10:37:18  31  ,clse-max6  cx6
10:37:18  32  ,clse-max8  cx8
10:37:18  33  ,clse-max10 cx10
10:37:18  34  ,clse-max12 cx12
10:37:18  35  ,clse-max14 cx14
10:37:18  36  ,clse-max16 cx16
10:37:18  37  ,clse-max18 cx18
10:37:18  38  -- Derive more attributes.
10:37:18  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:37:18  40  -- But COVAR_POP is more stable:
10:37:18  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:37:18  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:37:18  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:37:18  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:37:18  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:37:18  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:37:18  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:37:18  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:37:18  49  -- Derive date related attributes:
10:37:18  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:37:18  51  ,0+TO_CHAR(ydate,'D')d
10:37:18  52  ,0+TO_CHAR(ydate,'W')w
10:37:18  53  -- mpm stands for minutes-past-midnight:
10:37:18  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:37:18  55  -- mph stands for minutes-past-hour:
10:37:18  56  ,0+TO_CHAR(ydate,'MI')mph
10:37:18  57  FROM svm6102
10:37:18  58  ORDER BY ydate
10:37:18  59  /

Table created.

Elapsed: 00:00:01.99
10:37:20 SQL> 
10:37:20 SQL> -- rpt
10:37:20 SQL> 
10:37:20 SQL> SELECT
10:37:20   2  pair
10:37:20   3  ,COUNT(pair)
10:37:20   4  ,MIN(clse),MAX(clse)
10:37:20   5  ,MIN(ydate),MAX(ydate)
10:37:20   6  FROM svm6122
10:37:20   7  GROUP BY pair
10:37:20   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19257    .931675	  1.00635 2010-10-01 10:40:01 2011-01-04 10:35:00

Elapsed: 00:00:00.03
10:37:20 SQL> 
10:37:20 SQL> -- Prepare for derivation of NTILE based params:
10:37:20 SQL> 
10:37:20 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.19
10:37:20 SQL> CREATE TABLE svm6142 COMPRESS AS
10:37:20   2  SELECT
10:37:20   3  pair
10:37:20   4  ,ydate
10:37:20   5  ,prdate
10:37:20   6  ,clse
10:37:20   7  ,g6
10:37:20   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:37:20   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:37:20  10  ,CASE WHEN trend IS NULL THEN 1
10:37:20  11  	    WHEN trend =0      THEN 1
10:37:20  12  	    ELSE trend END trend
10:37:20  13  ,cm4
10:37:20  14  ,cm6
10:37:20  15  ,cm8
10:37:20  16  ,cm10
10:37:20  17  ,cm12
10:37:20  18  ,cm14
10:37:20  19  ,cm16
10:37:20  20  ,cm18
10:37:20  21  --
10:37:20  22  ,ca4
10:37:20  23  ,ca6
10:37:20  24  ,ca8
10:37:20  25  ,ca10
10:37:20  26  ,ca12
10:37:20  27  ,ca14
10:37:20  28  ,ca16
10:37:20  29  ,ca18
10:37:20  30  --
10:37:20  31  ,cx4
10:37:20  32  ,cx6
10:37:20  33  ,cx8
10:37:20  34  ,cx10
10:37:20  35  ,cx12
10:37:20  36  ,cx14
10:37:20  37  ,cx16
10:37:20  38  ,cx18
10:37:20  39  --
10:37:20  40  ,crr4
10:37:20  41  ,crr6
10:37:20  42  ,crr8
10:37:20  43  ,crr10
10:37:20  44  ,crr12
10:37:20  45  ,crr14
10:37:20  46  ,crr16
10:37:20  47  ,crr18
10:37:20  48  --
10:37:20  49  ,hh
10:37:20  50  ,d
10:37:20  51  ,w
10:37:20  52  ,mpm
10:37:20  53  ,mph
10:37:20  54  FROM svm6122
10:37:20  55  ORDER BY ydate
10:37:20  56  /

Table created.

Elapsed: 00:00:00.39
10:37:21 SQL> 
10:37:21 SQL> -- rpt
10:37:21 SQL> 
10:37:21 SQL> SELECT
10:37:21   2  pair
10:37:21   3  ,trend
10:37:21   4  ,gatt
10:37:21   5  ,COUNT(pair)
10:37:21   6  ,AVG(g6)
10:37:21   7  FROM svm6142
10:37:21   8  GROUP BY pair,trend,gatt
10:37:21   9  ORDER BY pair,trend,gatt
10:37:21  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7149  -.0019874
usd_chf 	-1 up	      3080 .003832088
usd_chf 	 1 nup	      6341 -.00157877
usd_chf 	 1 up	      2615 .003719381
usd_chf 	 1		72

Elapsed: 00:00:00.03
10:37:21 SQL> 
10:37:21 SQL> 
10:37:21 SQL> -- Derive NTILE based params:
10:37:21 SQL> 
10:37:21 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
10:37:21 SQL> CREATE TABLE svm6162 COMPRESS AS
10:37:21   2  SELECT
10:37:21   3  pair
10:37:21   4  ,ydate
10:37:21   5  ,prdate
10:37:21   6  ,clse
10:37:21   7  ,g6
10:37:21   8  ,gatt
10:37:21   9  ,gattn
10:37:21  10  ,trend
10:37:21  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:37:21  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:37:21  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:37:21  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:37:21  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:37:21  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:37:21  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:37:21  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:37:21  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:37:21  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:37:21  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:37:21  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:37:21  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:37:21  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:37:21  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:37:21  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:37:21  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:37:21  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:37:21  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:37:21  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:37:21  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:37:21  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:37:21  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:37:21  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:37:21  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:37:21  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:37:21  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:37:21  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:37:21  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:37:21  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:37:21  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:37:21  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:37:21  43  ,hh  att32
10:37:21  44  ,d   att33
10:37:21  45  ,w   att34
10:37:21  46  ,mpm att35
10:37:21  47  ,mph att36
10:37:21  48  ,trend att37
10:37:21  49  FROM svm6142
10:37:21  50  ORDER BY ydate
10:37:21  51  /

Table created.

Elapsed: 00:00:04.72
10:37:26 SQL> 
10:37:26 SQL> -- rpt
10:37:26 SQL> 
10:37:26 SQL> SELECT
10:37:26   2  pair
10:37:26   3  ,trend
10:37:26   4  ,gatt
10:37:26   5  ,COUNT(pair)
10:37:26   6  ,AVG(g6)
10:37:26   7  FROM svm6162
10:37:26   8  GROUP BY pair,trend,gatt
10:37:26   9  ORDER BY pair,trend,gatt
10:37:26  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7149  -.0019874
usd_chf 	-1 up	      3080 .003832088
usd_chf 	 1 nup	      6341 -.00157877
usd_chf 	 1 up	      2615 .003719381
usd_chf 	 1		72

Elapsed: 00:00:00.02
10:37:26 SQL> 
10:37:26 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
10:37:26 SQL> CREATE TABLE modsrc COMPRESS AS
10:37:26   2  SELECT
10:37:26   3  pair
10:37:26   4  ,ydate
10:37:26   5  ,prdate
10:37:26   6  ,trend
10:37:26   7  ,g6
10:37:26   8  ,gatt
10:37:26   9  ,gattn
10:37:26  10  FROM svm6162
10:37:26  11  /

Table created.

Elapsed: 00:00:00.08
10:37:26 SQL> 
10:37:26 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
10:37:26 SQL> 
10:37:26 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
10:37:26 SQL> CREATE TABLE chf_ms610 COMPRESS AS
10:37:26   2  SELECT
10:37:26   3  ydate
10:37:26   4  ,trend chf_trend
10:37:26   5  ,g6    chf_g6
10:37:26   6  ,gatt  chf_gatt
10:37:26   7  ,gattn chf_gattn
10:37:26   8  FROM modsrc
10:37:26   9  /

Table created.

Elapsed: 00:00:00.05
10:37:26 SQL> 
10:37:26 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
10:37:26 SQL> 
10:37:26 SQL> -- I need a copy of the attributes:
10:37:26 SQL> 
10:37:26 SQL> 
10:37:26 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.04
10:37:26 SQL> CREATE TABLE chf_att COMPRESS AS
10:37:26   2  SELECT
10:37:26   3  ydate
10:37:26   4  ,att00 chf_att00
10:37:26   5  ,att01 chf_att01
10:37:26   6  ,att02 chf_att02
10:37:26   7  ,att03 chf_att03
10:37:26   8  ,att04 chf_att04
10:37:26   9  ,att05 chf_att05
10:37:26  10  ,att06 chf_att06
10:37:26  11  ,att07 chf_att07
10:37:26  12  ,att08 chf_att08
10:37:26  13  ,att09 chf_att09
10:37:26  14  ,att10 chf_att10
10:37:26  15  ,att11 chf_att11
10:37:26  16  ,att12 chf_att12
10:37:26  17  ,att13 chf_att13
10:37:26  18  ,att14 chf_att14
10:37:26  19  ,att15 chf_att15
10:37:26  20  ,att16 chf_att16
10:37:26  21  ,att17 chf_att17
10:37:26  22  ,att18 chf_att18
10:37:26  23  ,att19 chf_att19
10:37:26  24  ,att20 chf_att20
10:37:26  25  ,att21 chf_att21
10:37:26  26  ,att22 chf_att22
10:37:26  27  ,att23 chf_att23
10:37:26  28  ,att24 chf_att24
10:37:26  29  ,att25 chf_att25
10:37:26  30  ,att26 chf_att26
10:37:26  31  ,att27 chf_att27
10:37:26  32  ,att28 chf_att28
10:37:26  33  ,att29 chf_att29
10:37:26  34  ,att30 chf_att30
10:37:26  35  ,att31 chf_att31
10:37:26  36  ,att32 chf_att32
10:37:26  37  ,att33 chf_att33
10:37:26  38  ,att34 chf_att34
10:37:26  39  ,att35 chf_att35
10:37:26  40  ,att36 chf_att36
10:37:26  41  ,att37 chf_att37
10:37:26  42  FROM svm6162
10:37:26  43  /

Table created.

Elapsed: 00:00:00.18
10:37:27 SQL> 
10:37:27 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
10:37:27 SQL> 
10:37:27 SQL> -- rpt
10:37:27 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19257

Elapsed: 00:00:00.86
10:37:28 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19257

Elapsed: 00:00:00.01
10:37:28 SQL> 
10:37:28 SQL> --
10:37:28 SQL> -- ech610.sql
10:37:28 SQL> --
10:37:28 SQL> 
10:37:28 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:37:28 SQL> 
10:37:28 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.36
10:37:28 SQL> 
10:37:28 SQL> -- I created di5min here:
10:37:28 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:37:28 SQL> 
10:37:28 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:37:28   2  SELECT
10:37:28   3  pair
10:37:28   4  ,ydate
10:37:28   5  ,prdate
10:37:28   6  ,rownum rnum -- acts as t in my time-series
10:37:28   7  ,clse
10:37:28   8  -- Derive a bunch of attributes from clse, the latest price:
10:37:28   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:37:28  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:37:28  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:37:28  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:37:28  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:37:28  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:37:28  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:37:28  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:37:28  17  --
10:37:28  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:37:28  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:37:28  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:37:28  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:37:28  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:37:28  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:37:28  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:37:28  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:37:28  26  --
10:37:28  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:37:28  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:37:28  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:37:28  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:37:28  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:37:28  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:37:28  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:37:28  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:37:28  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:37:28  36  FROM di5min WHERE pair LIKE'%ech%'
10:37:28  37  AND ydate > sysdate - 95
10:37:28  38  ORDER BY ydate
10:37:28  39  /

View created.

Elapsed: 00:00:00.05
10:37:28 SQL> 
10:37:28 SQL> -- rpt
10:37:28 SQL> 
10:37:28 SQL> SELECT
10:37:28   2  pair
10:37:28   3  ,COUNT(pair)
10:37:28   4  ,MIN(clse),MAX(clse)
10:37:28   5  ,MIN(avg6),MAX(avg6)
10:37:28   6  ,MIN(ydate),MAX(ydate)
10:37:28   7  FROM svm6102
10:37:28   8  GROUP BY pair
10:37:28   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19255 1.24192946 1.38284305 1.24320711 1.37986485 2010-10-01 10:40:01 2011-01-04 10:30:00

Elapsed: 00:00:00.78
10:37:29 SQL> 
10:37:29 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:37:29 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.19
10:37:29 SQL> CREATE TABLE svm6122 COMPRESS AS
10:37:29   2  SELECT
10:37:29   3  pair
10:37:29   4  ,ydate
10:37:29   5  ,prdate
10:37:29   6  ,clse
10:37:29   7  -- g6 is important. I want to predict g6:
10:37:29   8  ,ld6 - clse g6
10:37:29   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:37:29  10  -- I want more attributes from the ones I derived above:
10:37:29  11  -- clse relation to moving-min
10:37:29  12  ,clse-min4  cm4
10:37:29  13  ,clse-min6  cm6
10:37:29  14  ,clse-min8  cm8
10:37:29  15  ,clse-min10 cm10
10:37:29  16  ,clse-min12 cm12
10:37:29  17  ,clse-min14 cm14
10:37:29  18  ,clse-min16 cm16
10:37:29  19  ,clse-min18 cm18
10:37:29  20  -- clse relation to moving-avg
10:37:29  21  ,clse-avg4  ca4
10:37:29  22  ,clse-avg6  ca6
10:37:29  23  ,clse-avg8  ca8
10:37:29  24  ,clse-avg10 ca10
10:37:29  25  ,clse-avg12 ca12
10:37:29  26  ,clse-avg14 ca14
10:37:29  27  ,clse-avg16 ca16
10:37:29  28  ,clse-avg18 ca18
10:37:29  29  -- clse relation to moving-max
10:37:29  30  ,clse-max4  cx4
10:37:29  31  ,clse-max6  cx6
10:37:29  32  ,clse-max8  cx8
10:37:29  33  ,clse-max10 cx10
10:37:29  34  ,clse-max12 cx12
10:37:29  35  ,clse-max14 cx14
10:37:29  36  ,clse-max16 cx16
10:37:29  37  ,clse-max18 cx18
10:37:29  38  -- Derive more attributes.
10:37:29  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:37:29  40  -- But COVAR_POP is more stable:
10:37:29  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:37:29  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:37:29  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:37:29  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:37:29  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:37:29  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:37:29  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:37:29  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:37:29  49  -- Derive date related attributes:
10:37:29  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:37:29  51  ,0+TO_CHAR(ydate,'D')d
10:37:29  52  ,0+TO_CHAR(ydate,'W')w
10:37:29  53  -- mpm stands for minutes-past-midnight:
10:37:29  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:37:29  55  -- mph stands for minutes-past-hour:
10:37:29  56  ,0+TO_CHAR(ydate,'MI')mph
10:37:29  57  FROM svm6102
10:37:29  58  ORDER BY ydate
10:37:29  59  /

Table created.

Elapsed: 00:00:02.10
10:37:31 SQL> 
10:37:31 SQL> -- rpt
10:37:31 SQL> 
10:37:31 SQL> SELECT
10:37:31   2  pair
10:37:31   3  ,COUNT(pair)
10:37:31   4  ,MIN(clse),MAX(clse)
10:37:31   5  ,MIN(ydate),MAX(ydate)
10:37:31   6  FROM svm6122
10:37:31   7  GROUP BY pair
10:37:31   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19255 1.24192946 1.38284305 2010-10-01 10:40:01 2011-01-04 10:30:00

Elapsed: 00:00:00.03
10:37:31 SQL> 
10:37:31 SQL> -- Prepare for derivation of NTILE based params:
10:37:31 SQL> 
10:37:31 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.17
10:37:32 SQL> CREATE TABLE svm6142 COMPRESS AS
10:37:32   2  SELECT
10:37:32   3  pair
10:37:32   4  ,ydate
10:37:32   5  ,prdate
10:37:32   6  ,clse
10:37:32   7  ,g6
10:37:32   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:37:32   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:37:32  10  ,CASE WHEN trend IS NULL THEN 1
10:37:32  11  	    WHEN trend =0      THEN 1
10:37:32  12  	    ELSE trend END trend
10:37:32  13  ,cm4
10:37:32  14  ,cm6
10:37:32  15  ,cm8
10:37:32  16  ,cm10
10:37:32  17  ,cm12
10:37:32  18  ,cm14
10:37:32  19  ,cm16
10:37:32  20  ,cm18
10:37:32  21  --
10:37:32  22  ,ca4
10:37:32  23  ,ca6
10:37:32  24  ,ca8
10:37:32  25  ,ca10
10:37:32  26  ,ca12
10:37:32  27  ,ca14
10:37:32  28  ,ca16
10:37:32  29  ,ca18
10:37:32  30  --
10:37:32  31  ,cx4
10:37:32  32  ,cx6
10:37:32  33  ,cx8
10:37:32  34  ,cx10
10:37:32  35  ,cx12
10:37:32  36  ,cx14
10:37:32  37  ,cx16
10:37:32  38  ,cx18
10:37:32  39  --
10:37:32  40  ,crr4
10:37:32  41  ,crr6
10:37:32  42  ,crr8
10:37:32  43  ,crr10
10:37:32  44  ,crr12
10:37:32  45  ,crr14
10:37:32  46  ,crr16
10:37:32  47  ,crr18
10:37:32  48  --
10:37:32  49  ,hh
10:37:32  50  ,d
10:37:32  51  ,w
10:37:32  52  ,mpm
10:37:32  53  ,mph
10:37:32  54  FROM svm6122
10:37:32  55  ORDER BY ydate
10:37:32  56  /

Table created.

Elapsed: 00:00:00.39
10:37:32 SQL> 
10:37:32 SQL> -- rpt
10:37:32 SQL> 
10:37:32 SQL> SELECT
10:37:32   2  pair
10:37:32   3  ,trend
10:37:32   4  ,gatt
10:37:32   5  ,COUNT(pair)
10:37:32   6  ,AVG(g6)
10:37:32   7  FROM svm6142
10:37:32   8  GROUP BY pair,trend,gatt
10:37:32   9  ORDER BY pair,trend,gatt
10:37:32  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6539 -.00224044
ech_usd 	-1 up	      3564  .00350477
ech_usd 	 1 nup	      6275 -.00239765
ech_usd 	 1 up	      2805  .00388907
ech_usd 	 1		72

Elapsed: 00:00:00.04
10:37:32 SQL> 
10:37:32 SQL> 
10:37:32 SQL> -- Derive NTILE based params:
10:37:32 SQL> 
10:37:32 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.14
10:37:32 SQL> CREATE TABLE svm6162 COMPRESS AS
10:37:32   2  SELECT
10:37:32   3  pair
10:37:32   4  ,ydate
10:37:32   5  ,prdate
10:37:32   6  ,clse
10:37:32   7  ,g6
10:37:32   8  ,gatt
10:37:32   9  ,gattn
10:37:32  10  ,trend
10:37:32  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:37:32  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:37:32  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:37:32  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:37:32  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:37:32  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:37:32  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:37:32  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:37:32  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:37:32  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:37:32  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:37:32  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:37:32  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:37:32  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:37:32  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:37:32  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:37:32  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:37:32  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:37:32  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:37:32  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:37:32  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:37:32  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:37:32  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:37:32  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:37:32  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:37:32  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:37:32  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:37:32  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:37:32  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:37:32  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:37:32  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:37:32  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:37:32  43  ,hh  att32
10:37:32  44  ,d   att33
10:37:32  45  ,w   att34
10:37:32  46  ,mpm att35
10:37:32  47  ,mph att36
10:37:32  48  ,trend att37
10:37:32  49  FROM svm6142
10:37:32  50  ORDER BY ydate
10:37:32  51  /

Table created.

Elapsed: 00:00:04.70
10:37:37 SQL> 
10:37:37 SQL> -- rpt
10:37:37 SQL> 
10:37:37 SQL> SELECT
10:37:37   2  pair
10:37:37   3  ,trend
10:37:37   4  ,gatt
10:37:37   5  ,COUNT(pair)
10:37:37   6  ,AVG(g6)
10:37:37   7  FROM svm6162
10:37:37   8  GROUP BY pair,trend,gatt
10:37:37   9  ORDER BY pair,trend,gatt
10:37:37  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6539 -.00224044
ech_usd 	-1 up	      3564  .00350477
ech_usd 	 1 nup	      6275 -.00239765
ech_usd 	 1 up	      2805  .00388907
ech_usd 	 1		72

Elapsed: 00:00:00.03
10:37:37 SQL> 
10:37:37 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.16
10:37:37 SQL> CREATE TABLE modsrc COMPRESS AS
10:37:37   2  SELECT
10:37:37   3  pair
10:37:37   4  ,ydate
10:37:37   5  ,prdate
10:37:37   6  ,trend
10:37:37   7  ,g6
10:37:37   8  ,gatt
10:37:37   9  ,gattn
10:37:37  10  FROM svm6162
10:37:37  11  /

Table created.

Elapsed: 00:00:00.08
10:37:37 SQL> 
10:37:37 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
10:37:37 SQL> 
10:37:37 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
10:37:37 SQL> CREATE TABLE ech_ms610 COMPRESS AS
10:37:37   2  SELECT
10:37:37   3  ydate
10:37:37   4  ,trend ech_trend
10:37:37   5  ,g6    ech_g6
10:37:37   6  ,gatt  ech_gatt
10:37:37   7  ,gattn ech_gattn
10:37:37   8  FROM modsrc
10:37:37   9  /

Table created.

Elapsed: 00:00:00.07
10:37:37 SQL> 
10:37:37 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
10:37:38 SQL> 
10:37:38 SQL> -- I need a copy of the attributes:
10:37:38 SQL> 
10:37:38 SQL> 
10:37:38 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.05
10:37:38 SQL> CREATE TABLE ech_att COMPRESS AS
10:37:38   2  SELECT
10:37:38   3  ydate
10:37:38   4  ,att00 ech_att00
10:37:38   5  ,att01 ech_att01
10:37:38   6  ,att02 ech_att02
10:37:38   7  ,att03 ech_att03
10:37:38   8  ,att04 ech_att04
10:37:38   9  ,att05 ech_att05
10:37:38  10  ,att06 ech_att06
10:37:38  11  ,att07 ech_att07
10:37:38  12  ,att08 ech_att08
10:37:38  13  ,att09 ech_att09
10:37:38  14  ,att10 ech_att10
10:37:38  15  ,att11 ech_att11
10:37:38  16  ,att12 ech_att12
10:37:38  17  ,att13 ech_att13
10:37:38  18  ,att14 ech_att14
10:37:38  19  ,att15 ech_att15
10:37:38  20  ,att16 ech_att16
10:37:38  21  ,att17 ech_att17
10:37:38  22  ,att18 ech_att18
10:37:38  23  ,att19 ech_att19
10:37:38  24  ,att20 ech_att20
10:37:38  25  ,att21 ech_att21
10:37:38  26  ,att22 ech_att22
10:37:38  27  ,att23 ech_att23
10:37:38  28  ,att24 ech_att24
10:37:38  29  ,att25 ech_att25
10:37:38  30  ,att26 ech_att26
10:37:38  31  ,att27 ech_att27
10:37:38  32  ,att28 ech_att28
10:37:38  33  ,att29 ech_att29
10:37:38  34  ,att30 ech_att30
10:37:38  35  ,att31 ech_att31
10:37:38  36  ,att32 ech_att32
10:37:38  37  ,att33 ech_att33
10:37:38  38  ,att34 ech_att34
10:37:38  39  ,att35 ech_att35
10:37:38  40  ,att36 ech_att36
10:37:38  41  ,att37 ech_att37
10:37:38  42  FROM svm6162
10:37:38  43  /

Table created.

Elapsed: 00:00:00.16
10:37:38 SQL> 
10:37:38 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
10:37:38 SQL> 
10:37:38 SQL> -- rpt
10:37:38 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19255

Elapsed: 00:00:00.78
10:37:39 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19255

Elapsed: 00:00:00.01
10:37:39 SQL> 
10:37:39 SQL> --
10:37:39 SQL> -- egb610.sql
10:37:39 SQL> --
10:37:39 SQL> 
10:37:39 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:37:39 SQL> 
10:37:39 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.37
10:37:39 SQL> 
10:37:39 SQL> -- I created di5min here:
10:37:39 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:37:39 SQL> 
10:37:39 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:37:39   2  SELECT
10:37:39   3  pair
10:37:39   4  ,ydate
10:37:39   5  ,prdate
10:37:39   6  ,rownum rnum -- acts as t in my time-series
10:37:39   7  ,clse
10:37:39   8  -- Derive a bunch of attributes from clse, the latest price:
10:37:39   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:37:39  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:37:39  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:37:39  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:37:39  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:37:39  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:37:39  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:37:39  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:37:39  17  --
10:37:39  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:37:39  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:37:39  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:37:39  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:37:39  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:37:39  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:37:39  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:37:39  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:37:39  26  --
10:37:39  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:37:39  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:37:39  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:37:39  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:37:39  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:37:39  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:37:39  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:37:39  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:37:39  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:37:39  36  FROM di5min WHERE pair LIKE'%egb%'
10:37:39  37  AND ydate > sysdate - 95
10:37:39  38  ORDER BY ydate
10:37:39  39  /

View created.

Elapsed: 00:00:00.05
10:37:39 SQL> 
10:37:39 SQL> -- rpt
10:37:39 SQL> 
10:37:39 SQL> SELECT
10:37:39   2  pair
10:37:39   3  ,COUNT(pair)
10:37:39   4  ,MIN(clse),MAX(clse)
10:37:39   5  ,MIN(avg6),MAX(avg6)
10:37:39   6  ,MIN(ydate),MAX(ydate)
10:37:39   7  FROM svm6102
10:37:39   8  GROUP BY pair
10:37:39   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19253 .833520557 .893920122 .834199029 .892400287 2010-10-01 10:40:01 2011-01-04 10:25:00

Elapsed: 00:00:00.92
10:37:40 SQL> 
10:37:40 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:37:40 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.19
10:37:41 SQL> CREATE TABLE svm6122 COMPRESS AS
10:37:41   2  SELECT
10:37:41   3  pair
10:37:41   4  ,ydate
10:37:41   5  ,prdate
10:37:41   6  ,clse
10:37:41   7  -- g6 is important. I want to predict g6:
10:37:41   8  ,ld6 - clse g6
10:37:41   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:37:41  10  -- I want more attributes from the ones I derived above:
10:37:41  11  -- clse relation to moving-min
10:37:41  12  ,clse-min4  cm4
10:37:41  13  ,clse-min6  cm6
10:37:41  14  ,clse-min8  cm8
10:37:41  15  ,clse-min10 cm10
10:37:41  16  ,clse-min12 cm12
10:37:41  17  ,clse-min14 cm14
10:37:41  18  ,clse-min16 cm16
10:37:41  19  ,clse-min18 cm18
10:37:41  20  -- clse relation to moving-avg
10:37:41  21  ,clse-avg4  ca4
10:37:41  22  ,clse-avg6  ca6
10:37:41  23  ,clse-avg8  ca8
10:37:41  24  ,clse-avg10 ca10
10:37:41  25  ,clse-avg12 ca12
10:37:41  26  ,clse-avg14 ca14
10:37:41  27  ,clse-avg16 ca16
10:37:41  28  ,clse-avg18 ca18
10:37:41  29  -- clse relation to moving-max
10:37:41  30  ,clse-max4  cx4
10:37:41  31  ,clse-max6  cx6
10:37:41  32  ,clse-max8  cx8
10:37:41  33  ,clse-max10 cx10
10:37:41  34  ,clse-max12 cx12
10:37:41  35  ,clse-max14 cx14
10:37:41  36  ,clse-max16 cx16
10:37:41  37  ,clse-max18 cx18
10:37:41  38  -- Derive more attributes.
10:37:41  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:37:41  40  -- But COVAR_POP is more stable:
10:37:41  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:37:41  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:37:41  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:37:41  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:37:41  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:37:41  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:37:41  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:37:41  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:37:41  49  -- Derive date related attributes:
10:37:41  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:37:41  51  ,0+TO_CHAR(ydate,'D')d
10:37:41  52  ,0+TO_CHAR(ydate,'W')w
10:37:41  53  -- mpm stands for minutes-past-midnight:
10:37:41  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:37:41  55  -- mph stands for minutes-past-hour:
10:37:41  56  ,0+TO_CHAR(ydate,'MI')mph
10:37:41  57  FROM svm6102
10:37:41  58  ORDER BY ydate
10:37:41  59  /

Table created.

Elapsed: 00:00:02.42
10:37:43 SQL> 
10:37:43 SQL> -- rpt
10:37:43 SQL> 
10:37:43 SQL> SELECT
10:37:43   2  pair
10:37:43   3  ,COUNT(pair)
10:37:43   4  ,MIN(clse),MAX(clse)
10:37:43   5  ,MIN(ydate),MAX(ydate)
10:37:43   6  FROM svm6122
10:37:43   7  GROUP BY pair
10:37:43   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19253 .833520557 .893920122 2010-10-01 10:40:01 2011-01-04 10:25:00

Elapsed: 00:00:00.04
10:37:43 SQL> 
10:37:43 SQL> -- Prepare for derivation of NTILE based params:
10:37:43 SQL> 
10:37:43 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.19
10:37:43 SQL> CREATE TABLE svm6142 COMPRESS AS
10:37:43   2  SELECT
10:37:43   3  pair
10:37:43   4  ,ydate
10:37:43   5  ,prdate
10:37:43   6  ,clse
10:37:43   7  ,g6
10:37:43   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:37:43   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:37:43  10  ,CASE WHEN trend IS NULL THEN 1
10:37:43  11  	    WHEN trend =0      THEN 1
10:37:43  12  	    ELSE trend END trend
10:37:43  13  ,cm4
10:37:43  14  ,cm6
10:37:43  15  ,cm8
10:37:43  16  ,cm10
10:37:43  17  ,cm12
10:37:43  18  ,cm14
10:37:43  19  ,cm16
10:37:43  20  ,cm18
10:37:43  21  --
10:37:43  22  ,ca4
10:37:43  23  ,ca6
10:37:43  24  ,ca8
10:37:43  25  ,ca10
10:37:43  26  ,ca12
10:37:43  27  ,ca14
10:37:43  28  ,ca16
10:37:43  29  ,ca18
10:37:43  30  --
10:37:43  31  ,cx4
10:37:43  32  ,cx6
10:37:43  33  ,cx8
10:37:43  34  ,cx10
10:37:43  35  ,cx12
10:37:43  36  ,cx14
10:37:43  37  ,cx16
10:37:43  38  ,cx18
10:37:43  39  --
10:37:43  40  ,crr4
10:37:43  41  ,crr6
10:37:43  42  ,crr8
10:37:43  43  ,crr10
10:37:43  44  ,crr12
10:37:43  45  ,crr14
10:37:43  46  ,crr16
10:37:43  47  ,crr18
10:37:43  48  --
10:37:43  49  ,hh
10:37:43  50  ,d
10:37:43  51  ,w
10:37:43  52  ,mpm
10:37:43  53  ,mph
10:37:43  54  FROM svm6122
10:37:43  55  ORDER BY ydate
10:37:43  56  /

Table created.

Elapsed: 00:00:00.40
10:37:44 SQL> 
10:37:44 SQL> -- rpt
10:37:44 SQL> 
10:37:44 SQL> SELECT
10:37:44   2  pair
10:37:44   3  ,trend
10:37:44   4  ,gatt
10:37:44   5  ,COUNT(pair)
10:37:44   6  ,AVG(g6)
10:37:44   7  FROM svm6142
10:37:44   8  GROUP BY pair,trend,gatt
10:37:44   9  ORDER BY pair,trend,gatt
10:37:44  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7365 -.00101221
egb_usd 	-1 up	      2633 .002933154
egb_usd 	-1		39
egb_usd 	 1 nup	      6483 -.00133728
egb_usd 	 1 up	      2700 .002912607
egb_usd 	 1		33

6 rows selected.

Elapsed: 00:00:00.04
10:37:44 SQL> 
10:37:44 SQL> 
10:37:44 SQL> -- Derive NTILE based params:
10:37:44 SQL> 
10:37:44 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
10:37:44 SQL> CREATE TABLE svm6162 COMPRESS AS
10:37:44   2  SELECT
10:37:44   3  pair
10:37:44   4  ,ydate
10:37:44   5  ,prdate
10:37:44   6  ,clse
10:37:44   7  ,g6
10:37:44   8  ,gatt
10:37:44   9  ,gattn
10:37:44  10  ,trend
10:37:44  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:37:44  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:37:44  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:37:44  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:37:44  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:37:44  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:37:44  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:37:44  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:37:44  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:37:44  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:37:44  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:37:44  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:37:44  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:37:44  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:37:44  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:37:44  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:37:44  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:37:44  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:37:44  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:37:44  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:37:44  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:37:44  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:37:44  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:37:44  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:37:44  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:37:44  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:37:44  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:37:44  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:37:44  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:37:44  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:37:44  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:37:44  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:37:44  43  ,hh  att32
10:37:44  44  ,d   att33
10:37:44  45  ,w   att34
10:37:44  46  ,mpm att35
10:37:44  47  ,mph att36
10:37:44  48  ,trend att37
10:37:44  49  FROM svm6142
10:37:44  50  ORDER BY ydate
10:37:44  51  /

Table created.

Elapsed: 00:00:05.44
10:37:49 SQL> 
10:37:49 SQL> -- rpt
10:37:49 SQL> 
10:37:49 SQL> SELECT
10:37:49   2  pair
10:37:49   3  ,trend
10:37:49   4  ,gatt
10:37:49   5  ,COUNT(pair)
10:37:49   6  ,AVG(g6)
10:37:49   7  FROM svm6162
10:37:49   8  GROUP BY pair,trend,gatt
10:37:49   9  ORDER BY pair,trend,gatt
10:37:49  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7365 -.00101221
egb_usd 	-1 up	      2633 .002933154
egb_usd 	-1		39
egb_usd 	 1 nup	      6483 -.00133728
egb_usd 	 1 up	      2700 .002912607
egb_usd 	 1		33

6 rows selected.

Elapsed: 00:00:00.03
10:37:49 SQL> 
10:37:49 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
10:37:49 SQL> CREATE TABLE modsrc COMPRESS AS
10:37:49   2  SELECT
10:37:49   3  pair
10:37:49   4  ,ydate
10:37:49   5  ,prdate
10:37:49   6  ,trend
10:37:49   7  ,g6
10:37:49   8  ,gatt
10:37:49   9  ,gattn
10:37:49  10  FROM svm6162
10:37:49  11  /

Table created.

Elapsed: 00:00:00.08
10:37:50 SQL> 
10:37:50 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
10:37:50 SQL> 
10:37:50 SQL> DROP   TABLE egb_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
10:37:50 SQL> CREATE TABLE egb_ms610 COMPRESS AS
10:37:50   2  SELECT
10:37:50   3  ydate
10:37:50   4  ,trend egb_trend
10:37:50   5  ,g6    egb_g6
10:37:50   6  ,gatt  egb_gatt
10:37:50   7  ,gattn egb_gattn
10:37:50   8  FROM modsrc
10:37:50   9  /

Table created.

Elapsed: 00:00:00.06
10:37:50 SQL> 
10:37:50 SQL> ANALYZE TABLE egb_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
10:37:50 SQL> 
10:37:50 SQL> -- I need a copy of the attributes:
10:37:50 SQL> 
10:37:50 SQL> 
10:37:50 SQL> DROP   TABLE egb_att;

Table dropped.

Elapsed: 00:00:00.05
10:37:50 SQL> CREATE TABLE egb_att COMPRESS AS
10:37:50   2  SELECT
10:37:50   3  ydate
10:37:50   4  ,att00 egb_att00
10:37:50   5  ,att01 egb_att01
10:37:50   6  ,att02 egb_att02
10:37:50   7  ,att03 egb_att03
10:37:50   8  ,att04 egb_att04
10:37:50   9  ,att05 egb_att05
10:37:50  10  ,att06 egb_att06
10:37:50  11  ,att07 egb_att07
10:37:50  12  ,att08 egb_att08
10:37:50  13  ,att09 egb_att09
10:37:50  14  ,att10 egb_att10
10:37:50  15  ,att11 egb_att11
10:37:50  16  ,att12 egb_att12
10:37:50  17  ,att13 egb_att13
10:37:50  18  ,att14 egb_att14
10:37:50  19  ,att15 egb_att15
10:37:50  20  ,att16 egb_att16
10:37:50  21  ,att17 egb_att17
10:37:50  22  ,att18 egb_att18
10:37:50  23  ,att19 egb_att19
10:37:50  24  ,att20 egb_att20
10:37:50  25  ,att21 egb_att21
10:37:50  26  ,att22 egb_att22
10:37:50  27  ,att23 egb_att23
10:37:50  28  ,att24 egb_att24
10:37:50  29  ,att25 egb_att25
10:37:50  30  ,att26 egb_att26
10:37:50  31  ,att27 egb_att27
10:37:50  32  ,att28 egb_att28
10:37:50  33  ,att29 egb_att29
10:37:50  34  ,att30 egb_att30
10:37:50  35  ,att31 egb_att31
10:37:50  36  ,att32 egb_att32
10:37:50  37  ,att33 egb_att33
10:37:50  38  ,att34 egb_att34
10:37:50  39  ,att35 egb_att35
10:37:50  40  ,att36 egb_att36
10:37:50  41  ,att37 egb_att37
10:37:50  42  FROM svm6162
10:37:50  43  /

Table created.

Elapsed: 00:00:00.16
10:37:50 SQL> 
10:37:50 SQL> ANALYZE TABLE egb_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
10:37:51 SQL> 
10:37:51 SQL> -- rpt
10:37:51 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19253

Elapsed: 00:00:00.93
10:37:52 SQL> SELECT COUNT(*)FROM egb_att;

  COUNT(*)
----------
     19253

Elapsed: 00:00:00.00
10:37:52 SQL> 
10:37:52 SQL> --
10:37:52 SQL> -- ejp610.sql
10:37:52 SQL> --
10:37:52 SQL> 
10:37:52 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:37:52 SQL> 
10:37:52 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.56
10:37:52 SQL> 
10:37:52 SQL> -- I created di5min here:
10:37:52 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:37:52 SQL> 
10:37:52 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:37:52   2  SELECT
10:37:52   3  pair
10:37:52   4  ,ydate
10:37:52   5  ,prdate
10:37:52   6  ,rownum rnum -- acts as t in my time-series
10:37:52   7  ,clse
10:37:52   8  -- Derive a bunch of attributes from clse, the latest price:
10:37:52   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:37:52  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:37:52  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:37:52  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:37:52  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:37:52  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:37:52  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:37:52  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:37:52  17  --
10:37:52  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:37:52  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:37:52  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:37:52  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:37:52  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:37:52  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:37:52  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:37:52  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:37:52  26  --
10:37:52  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:37:52  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:37:52  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:37:52  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:37:52  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:37:52  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:37:52  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:37:52  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:37:52  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:37:52  36  FROM di5min WHERE pair LIKE'%ejp%'
10:37:52  37  AND ydate > sysdate - 95
10:37:52  38  ORDER BY ydate
10:37:52  39  /

View created.

Elapsed: 00:00:00.05
10:37:52 SQL> 
10:37:52 SQL> -- rpt
10:37:52 SQL> 
10:37:52 SQL> SELECT
10:37:52   2  pair
10:37:52   3  ,COUNT(pair)
10:37:52   4  ,MIN(clse),MAX(clse)
10:37:52   5  ,MIN(avg6),MAX(avg6)
10:37:52   6  ,MIN(ydate),MAX(ydate)
10:37:52   7  FROM svm6102
10:37:52   8  GROUP BY pair
10:37:52   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ejp_usd       19252 107.643765	115.63485 107.776148 115.509678 2010-10-01 10:40:01 2011-01-04 10:30:00

Elapsed: 00:00:00.85
10:37:53 SQL> 
10:37:53 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:37:53 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.25
10:37:53 SQL> CREATE TABLE svm6122 COMPRESS AS
10:37:53   2  SELECT
10:37:53   3  pair
10:37:53   4  ,ydate
10:37:53   5  ,prdate
10:37:53   6  ,clse
10:37:53   7  -- g6 is important. I want to predict g6:
10:37:53   8  ,ld6 - clse g6
10:37:53   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:37:53  10  -- I want more attributes from the ones I derived above:
10:37:53  11  -- clse relation to moving-min
10:37:53  12  ,clse-min4  cm4
10:37:53  13  ,clse-min6  cm6
10:37:53  14  ,clse-min8  cm8
10:37:53  15  ,clse-min10 cm10
10:37:53  16  ,clse-min12 cm12
10:37:53  17  ,clse-min14 cm14
10:37:53  18  ,clse-min16 cm16
10:37:53  19  ,clse-min18 cm18
10:37:53  20  -- clse relation to moving-avg
10:37:53  21  ,clse-avg4  ca4
10:37:53  22  ,clse-avg6  ca6
10:37:53  23  ,clse-avg8  ca8
10:37:53  24  ,clse-avg10 ca10
10:37:53  25  ,clse-avg12 ca12
10:37:53  26  ,clse-avg14 ca14
10:37:53  27  ,clse-avg16 ca16
10:37:53  28  ,clse-avg18 ca18
10:37:53  29  -- clse relation to moving-max
10:37:53  30  ,clse-max4  cx4
10:37:53  31  ,clse-max6  cx6
10:37:53  32  ,clse-max8  cx8
10:37:53  33  ,clse-max10 cx10
10:37:53  34  ,clse-max12 cx12
10:37:53  35  ,clse-max14 cx14
10:37:53  36  ,clse-max16 cx16
10:37:53  37  ,clse-max18 cx18
10:37:53  38  -- Derive more attributes.
10:37:53  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:37:53  40  -- But COVAR_POP is more stable:
10:37:53  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:37:53  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:37:53  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:37:53  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:37:53  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:37:53  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:37:53  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:37:53  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:37:53  49  -- Derive date related attributes:
10:37:53  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:37:53  51  ,0+TO_CHAR(ydate,'D')d
10:37:53  52  ,0+TO_CHAR(ydate,'W')w
10:37:53  53  -- mpm stands for minutes-past-midnight:
10:37:53  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:37:53  55  -- mph stands for minutes-past-hour:
10:37:53  56  ,0+TO_CHAR(ydate,'MI')mph
10:37:53  57  FROM svm6102
10:37:53  58  ORDER BY ydate
10:37:53  59  /

Table created.

Elapsed: 00:00:02.05
10:37:55 SQL> 
10:37:55 SQL> -- rpt
10:37:55 SQL> 
10:37:55 SQL> SELECT
10:37:55   2  pair
10:37:55   3  ,COUNT(pair)
10:37:55   4  ,MIN(clse),MAX(clse)
10:37:55   5  ,MIN(ydate),MAX(ydate)
10:37:55   6  FROM svm6122
10:37:55   7  GROUP BY pair
10:37:55   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ejp_usd       19252 107.643765	115.63485 2010-10-01 10:40:01 2011-01-04 10:30:00

Elapsed: 00:00:00.03
10:37:55 SQL> 
10:37:55 SQL> -- Prepare for derivation of NTILE based params:
10:37:55 SQL> 
10:37:55 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.19
10:37:56 SQL> CREATE TABLE svm6142 COMPRESS AS
10:37:56   2  SELECT
10:37:56   3  pair
10:37:56   4  ,ydate
10:37:56   5  ,prdate
10:37:56   6  ,clse
10:37:56   7  ,g6
10:37:56   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:37:56   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:37:56  10  ,CASE WHEN trend IS NULL THEN 1
10:37:56  11  	    WHEN trend =0      THEN 1
10:37:56  12  	    ELSE trend END trend
10:37:56  13  ,cm4
10:37:56  14  ,cm6
10:37:56  15  ,cm8
10:37:56  16  ,cm10
10:37:56  17  ,cm12
10:37:56  18  ,cm14
10:37:56  19  ,cm16
10:37:56  20  ,cm18
10:37:56  21  --
10:37:56  22  ,ca4
10:37:56  23  ,ca6
10:37:56  24  ,ca8
10:37:56  25  ,ca10
10:37:56  26  ,ca12
10:37:56  27  ,ca14
10:37:56  28  ,ca16
10:37:56  29  ,ca18
10:37:56  30  --
10:37:56  31  ,cx4
10:37:56  32  ,cx6
10:37:56  33  ,cx8
10:37:56  34  ,cx10
10:37:56  35  ,cx12
10:37:56  36  ,cx14
10:37:56  37  ,cx16
10:37:56  38  ,cx18
10:37:56  39  --
10:37:56  40  ,crr4
10:37:56  41  ,crr6
10:37:56  42  ,crr8
10:37:56  43  ,crr10
10:37:56  44  ,crr12
10:37:56  45  ,crr14
10:37:56  46  ,crr16
10:37:56  47  ,crr18
10:37:56  48  --
10:37:56  49  ,hh
10:37:56  50  ,d
10:37:56  51  ,w
10:37:56  52  ,mpm
10:37:56  53  ,mph
10:37:56  54  FROM svm6122
10:37:56  55  ORDER BY ydate
10:37:56  56  /

Table created.

Elapsed: 00:00:00.36
10:37:56 SQL> 
10:37:56 SQL> -- rpt
10:37:56 SQL> 
10:37:56 SQL> SELECT
10:37:56   2  pair
10:37:56   3  ,trend
10:37:56   4  ,gatt
10:37:56   5  ,COUNT(pair)
10:37:56   6  ,AVG(g6)
10:37:56   7  FROM svm6142
10:37:56   8  GROUP BY pair,trend,gatt
10:37:56   9  ORDER BY pair,trend,gatt
10:37:56  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4860 -.32448106
ejp_usd 	-1 up	      4819 .272357505
ejp_usd 	 1 nup	      4854  -.2911121
ejp_usd 	 1 up	      4647 .288835747
ejp_usd 	 1		72

Elapsed: 00:00:00.04
10:37:56 SQL> 
10:37:56 SQL> 
10:37:56 SQL> -- Derive NTILE based params:
10:37:56 SQL> 
10:37:56 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.14
10:37:56 SQL> CREATE TABLE svm6162 COMPRESS AS
10:37:56   2  SELECT
10:37:56   3  pair
10:37:56   4  ,ydate
10:37:56   5  ,prdate
10:37:56   6  ,clse
10:37:56   7  ,g6
10:37:56   8  ,gatt
10:37:56   9  ,gattn
10:37:56  10  ,trend
10:37:56  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:37:56  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:37:56  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:37:56  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:37:56  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:37:56  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:37:56  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:37:56  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:37:56  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:37:56  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:37:56  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:37:56  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:37:56  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:37:56  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:37:56  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:37:56  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:37:56  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:37:56  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:37:56  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:37:56  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:37:56  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:37:56  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:37:56  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:37:56  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:37:56  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:37:56  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:37:56  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:37:56  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:37:56  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:37:56  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:37:56  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:37:56  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:37:56  43  ,hh  att32
10:37:56  44  ,d   att33
10:37:56  45  ,w   att34
10:37:56  46  ,mpm att35
10:37:56  47  ,mph att36
10:37:56  48  ,trend att37
10:37:56  49  FROM svm6142
10:37:56  50  ORDER BY ydate
10:37:56  51  /

Table created.

Elapsed: 00:00:04.80
10:38:01 SQL> 
10:38:01 SQL> -- rpt
10:38:01 SQL> 
10:38:01 SQL> SELECT
10:38:01   2  pair
10:38:01   3  ,trend
10:38:01   4  ,gatt
10:38:01   5  ,COUNT(pair)
10:38:01   6  ,AVG(g6)
10:38:01   7  FROM svm6162
10:38:01   8  GROUP BY pair,trend,gatt
10:38:01   9  ORDER BY pair,trend,gatt
10:38:01  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4860 -.32448106
ejp_usd 	-1 up	      4819 .272357505
ejp_usd 	 1 nup	      4854  -.2911121
ejp_usd 	 1 up	      4647 .288835747
ejp_usd 	 1		72

Elapsed: 00:00:00.03
10:38:01 SQL> 
10:38:01 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.20
10:38:01 SQL> CREATE TABLE modsrc COMPRESS AS
10:38:01   2  SELECT
10:38:01   3  pair
10:38:01   4  ,ydate
10:38:01   5  ,prdate
10:38:01   6  ,trend
10:38:01   7  ,g6
10:38:01   8  ,gatt
10:38:01   9  ,gattn
10:38:01  10  FROM svm6162
10:38:01  11  /

Table created.

Elapsed: 00:00:00.09
10:38:01 SQL> 
10:38:01 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.30
10:38:02 SQL> 
10:38:02 SQL> DROP   TABLE ejp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
10:38:02 SQL> CREATE TABLE ejp_ms610 COMPRESS AS
10:38:02   2  SELECT
10:38:02   3  ydate
10:38:02   4  ,trend ejp_trend
10:38:02   5  ,g6    ejp_g6
10:38:02   6  ,gatt  ejp_gatt
10:38:02   7  ,gattn ejp_gattn
10:38:02   8  FROM modsrc
10:38:02   9  /

Table created.

Elapsed: 00:00:00.07
10:38:02 SQL> 
10:38:02 SQL> ANALYZE TABLE ejp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
10:38:02 SQL> 
10:38:02 SQL> -- I need a copy of the attributes:
10:38:02 SQL> 
10:38:02 SQL> 
10:38:02 SQL> DROP   TABLE ejp_att;

Table dropped.

Elapsed: 00:00:00.04
10:38:02 SQL> CREATE TABLE ejp_att COMPRESS AS
10:38:02   2  SELECT
10:38:02   3  ydate
10:38:02   4  ,att00 ejp_att00
10:38:02   5  ,att01 ejp_att01
10:38:02   6  ,att02 ejp_att02
10:38:02   7  ,att03 ejp_att03
10:38:02   8  ,att04 ejp_att04
10:38:02   9  ,att05 ejp_att05
10:38:02  10  ,att06 ejp_att06
10:38:02  11  ,att07 ejp_att07
10:38:02  12  ,att08 ejp_att08
10:38:02  13  ,att09 ejp_att09
10:38:02  14  ,att10 ejp_att10
10:38:02  15  ,att11 ejp_att11
10:38:02  16  ,att12 ejp_att12
10:38:02  17  ,att13 ejp_att13
10:38:02  18  ,att14 ejp_att14
10:38:02  19  ,att15 ejp_att15
10:38:02  20  ,att16 ejp_att16
10:38:02  21  ,att17 ejp_att17
10:38:02  22  ,att18 ejp_att18
10:38:02  23  ,att19 ejp_att19
10:38:02  24  ,att20 ejp_att20
10:38:02  25  ,att21 ejp_att21
10:38:02  26  ,att22 ejp_att22
10:38:02  27  ,att23 ejp_att23
10:38:02  28  ,att24 ejp_att24
10:38:02  29  ,att25 ejp_att25
10:38:02  30  ,att26 ejp_att26
10:38:02  31  ,att27 ejp_att27
10:38:02  32  ,att28 ejp_att28
10:38:02  33  ,att29 ejp_att29
10:38:02  34  ,att30 ejp_att30
10:38:02  35  ,att31 ejp_att31
10:38:02  36  ,att32 ejp_att32
10:38:02  37  ,att33 ejp_att33
10:38:02  38  ,att34 ejp_att34
10:38:02  39  ,att35 ejp_att35
10:38:02  40  ,att36 ejp_att36
10:38:02  41  ,att37 ejp_att37
10:38:02  42  FROM svm6162
10:38:02  43  /

Table created.

Elapsed: 00:00:00.22
10:38:02 SQL> 
10:38:02 SQL> ANALYZE TABLE ejp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
10:38:03 SQL> 
10:38:03 SQL> -- rpt
10:38:03 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19252

Elapsed: 00:00:00.84
10:38:03 SQL> SELECT COUNT(*)FROM ejp_att;

  COUNT(*)
----------
     19252

Elapsed: 00:00:00.01
10:38:03 SQL> 
10:38:03 SQL> --
10:38:03 SQL> -- ajp610.sql
10:38:03 SQL> --
10:38:03 SQL> 
10:38:03 SQL> -- Creates views and tables for backtesting a forex SVM strategy
10:38:03 SQL> 
10:38:03 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.95
10:38:04 SQL> 
10:38:04 SQL> -- I created di5min here:
10:38:04 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
10:38:04 SQL> 
10:38:04 SQL> CREATE OR REPLACE VIEW svm6102 AS
10:38:04   2  SELECT
10:38:04   3  pair
10:38:04   4  ,ydate
10:38:04   5  ,prdate
10:38:04   6  ,rownum rnum -- acts as t in my time-series
10:38:04   7  ,clse
10:38:04   8  -- Derive a bunch of attributes from clse, the latest price:
10:38:04   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
10:38:04  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
10:38:04  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
10:38:04  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
10:38:04  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
10:38:04  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
10:38:04  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
10:38:04  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
10:38:04  17  --
10:38:04  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
10:38:04  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
10:38:04  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
10:38:04  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
10:38:04  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
10:38:04  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
10:38:04  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
10:38:04  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
10:38:04  26  --
10:38:04  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
10:38:04  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
10:38:04  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
10:38:04  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
10:38:04  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
10:38:04  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
10:38:04  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
10:38:04  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
10:38:04  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
10:38:04  36  FROM di5min WHERE pair LIKE'%ajp%'
10:38:04  37  AND ydate > sysdate - 95
10:38:04  38  ORDER BY ydate
10:38:04  39  /

View created.

Elapsed: 00:00:00.08
10:38:04 SQL> 
10:38:04 SQL> -- rpt
10:38:04 SQL> 
10:38:04 SQL> SELECT
10:38:04   2  pair
10:38:04   3  ,COUNT(pair)
10:38:04   4  ,MIN(clse),MAX(clse)
10:38:04   5  ,MIN(avg6),MAX(avg6)
10:38:04   6  ,MIN(ydate),MAX(ydate)
10:38:04   7  FROM svm6102
10:38:04   8  GROUP BY pair
10:38:04   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ajp_usd       19249  78.249976 83.6669853 78.5106193  83.546306 2010-10-01 10:40:01 2011-01-04 10:30:00

Elapsed: 00:00:00.77
10:38:05 SQL> 
10:38:05 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
10:38:05 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.31
10:38:06 SQL> CREATE TABLE svm6122 COMPRESS AS
10:38:06   2  SELECT
10:38:06   3  pair
10:38:06   4  ,ydate
10:38:06   5  ,prdate
10:38:06   6  ,clse
10:38:06   7  -- g6 is important. I want to predict g6:
10:38:06   8  ,ld6 - clse g6
10:38:06   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
10:38:06  10  -- I want more attributes from the ones I derived above:
10:38:06  11  -- clse relation to moving-min
10:38:06  12  ,clse-min4  cm4
10:38:06  13  ,clse-min6  cm6
10:38:06  14  ,clse-min8  cm8
10:38:06  15  ,clse-min10 cm10
10:38:06  16  ,clse-min12 cm12
10:38:06  17  ,clse-min14 cm14
10:38:06  18  ,clse-min16 cm16
10:38:06  19  ,clse-min18 cm18
10:38:06  20  -- clse relation to moving-avg
10:38:06  21  ,clse-avg4  ca4
10:38:06  22  ,clse-avg6  ca6
10:38:06  23  ,clse-avg8  ca8
10:38:06  24  ,clse-avg10 ca10
10:38:06  25  ,clse-avg12 ca12
10:38:06  26  ,clse-avg14 ca14
10:38:06  27  ,clse-avg16 ca16
10:38:06  28  ,clse-avg18 ca18
10:38:06  29  -- clse relation to moving-max
10:38:06  30  ,clse-max4  cx4
10:38:06  31  ,clse-max6  cx6
10:38:06  32  ,clse-max8  cx8
10:38:06  33  ,clse-max10 cx10
10:38:06  34  ,clse-max12 cx12
10:38:06  35  ,clse-max14 cx14
10:38:06  36  ,clse-max16 cx16
10:38:06  37  ,clse-max18 cx18
10:38:06  38  -- Derive more attributes.
10:38:06  39  -- I want to use CORR() here to help SVM see the shape of the series.
10:38:06  40  -- But COVAR_POP is more stable:
10:38:06  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
10:38:06  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
10:38:06  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
10:38:06  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
10:38:06  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
10:38:06  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
10:38:06  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
10:38:06  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
10:38:06  49  -- Derive date related attributes:
10:38:06  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
10:38:06  51  ,0+TO_CHAR(ydate,'D')d
10:38:06  52  ,0+TO_CHAR(ydate,'W')w
10:38:06  53  -- mpm stands for minutes-past-midnight:
10:38:06  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
10:38:06  55  -- mph stands for minutes-past-hour:
10:38:06  56  ,0+TO_CHAR(ydate,'MI')mph
10:38:06  57  FROM svm6102
10:38:06  58  ORDER BY ydate
10:38:06  59  /

Table created.

Elapsed: 00:00:02.07
10:38:08 SQL> 
10:38:08 SQL> -- rpt
10:38:08 SQL> 
10:38:08 SQL> SELECT
10:38:08   2  pair
10:38:08   3  ,COUNT(pair)
10:38:08   4  ,MIN(clse),MAX(clse)
10:38:08   5  ,MIN(ydate),MAX(ydate)
10:38:08   6  FROM svm6122
10:38:08   7  GROUP BY pair
10:38:08   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ajp_usd       19249  78.249976 83.6669853 2010-10-01 10:40:01 2011-01-04 10:30:00

Elapsed: 00:00:00.04
10:38:08 SQL> 
10:38:08 SQL> -- Prepare for derivation of NTILE based params:
10:38:08 SQL> 
10:38:08 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.24
10:38:08 SQL> CREATE TABLE svm6142 COMPRESS AS
10:38:08   2  SELECT
10:38:08   3  pair
10:38:08   4  ,ydate
10:38:08   5  ,prdate
10:38:08   6  ,clse
10:38:08   7  ,g6
10:38:08   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
10:38:08   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
10:38:08  10  ,CASE WHEN trend IS NULL THEN 1
10:38:08  11  	    WHEN trend =0      THEN 1
10:38:08  12  	    ELSE trend END trend
10:38:08  13  ,cm4
10:38:08  14  ,cm6
10:38:08  15  ,cm8
10:38:08  16  ,cm10
10:38:08  17  ,cm12
10:38:08  18  ,cm14
10:38:08  19  ,cm16
10:38:08  20  ,cm18
10:38:08  21  --
10:38:08  22  ,ca4
10:38:08  23  ,ca6
10:38:08  24  ,ca8
10:38:08  25  ,ca10
10:38:08  26  ,ca12
10:38:08  27  ,ca14
10:38:08  28  ,ca16
10:38:08  29  ,ca18
10:38:08  30  --
10:38:08  31  ,cx4
10:38:08  32  ,cx6
10:38:08  33  ,cx8
10:38:08  34  ,cx10
10:38:08  35  ,cx12
10:38:08  36  ,cx14
10:38:08  37  ,cx16
10:38:08  38  ,cx18
10:38:08  39  --
10:38:08  40  ,crr4
10:38:08  41  ,crr6
10:38:08  42  ,crr8
10:38:08  43  ,crr10
10:38:08  44  ,crr12
10:38:08  45  ,crr14
10:38:08  46  ,crr16
10:38:08  47  ,crr18
10:38:08  48  --
10:38:08  49  ,hh
10:38:08  50  ,d
10:38:08  51  ,w
10:38:08  52  ,mpm
10:38:08  53  ,mph
10:38:08  54  FROM svm6122
10:38:08  55  ORDER BY ydate
10:38:08  56  /

Table created.

Elapsed: 00:00:00.41
10:38:08 SQL> 
10:38:08 SQL> -- rpt
10:38:08 SQL> 
10:38:08 SQL> SELECT
10:38:08   2  pair
10:38:08   3  ,trend
10:38:08   4  ,gatt
10:38:08   5  ,COUNT(pair)
10:38:08   6  ,AVG(g6)
10:38:08   7  FROM svm6142
10:38:08   8  GROUP BY pair,trend,gatt
10:38:08   9  ORDER BY pair,trend,gatt
10:38:08  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4088 -.22704961
ajp_usd 	-1 up	      5079 .221097374
ajp_usd 	-1		70
ajp_usd 	 1 nup	      5193 -.20021025
ajp_usd 	 1 up	      4817 .205585085
ajp_usd 	 1		 2

6 rows selected.

Elapsed: 00:00:00.04
10:38:08 SQL> 
10:38:08 SQL> 
10:38:08 SQL> -- Derive NTILE based params:
10:38:08 SQL> 
10:38:08 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
10:38:08 SQL> CREATE TABLE svm6162 COMPRESS AS
10:38:08   2  SELECT
10:38:08   3  pair
10:38:08   4  ,ydate
10:38:08   5  ,prdate
10:38:08   6  ,clse
10:38:08   7  ,g6
10:38:08   8  ,gatt
10:38:08   9  ,gattn
10:38:08  10  ,trend
10:38:08  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
10:38:08  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
10:38:08  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
10:38:08  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
10:38:08  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
10:38:08  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
10:38:08  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
10:38:08  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
10:38:08  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
10:38:08  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
10:38:08  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
10:38:08  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
10:38:08  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
10:38:08  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
10:38:08  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
10:38:08  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
10:38:08  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
10:38:08  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
10:38:08  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
10:38:08  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
10:38:08  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
10:38:08  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
10:38:08  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
10:38:08  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
10:38:08  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
10:38:08  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
10:38:08  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
10:38:08  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
10:38:08  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
10:38:08  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
10:38:08  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
10:38:08  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
10:38:08  43  ,hh  att32
10:38:08  44  ,d   att33
10:38:08  45  ,w   att34
10:38:08  46  ,mpm att35
10:38:08  47  ,mph att36
10:38:08  48  ,trend att37
10:38:08  49  FROM svm6142
10:38:08  50  ORDER BY ydate
10:38:08  51  /

Table created.

Elapsed: 00:00:04.87
10:38:13 SQL> 
10:38:13 SQL> -- rpt
10:38:13 SQL> 
10:38:13 SQL> SELECT
10:38:13   2  pair
10:38:13   3  ,trend
10:38:13   4  ,gatt
10:38:13   5  ,COUNT(pair)
10:38:13   6  ,AVG(g6)
10:38:13   7  FROM svm6162
10:38:13   8  GROUP BY pair,trend,gatt
10:38:13   9  ORDER BY pair,trend,gatt
10:38:13  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4088 -.22704961
ajp_usd 	-1 up	      5079 .221097374
ajp_usd 	-1		70
ajp_usd 	 1 nup	      5193 -.20021025
ajp_usd 	 1 up	      4817 .205585085
ajp_usd 	 1		 2

6 rows selected.

Elapsed: 00:00:00.03
10:38:13 SQL> 
10:38:13 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
10:38:14 SQL> CREATE TABLE modsrc COMPRESS AS
10:38:14   2  SELECT
10:38:14   3  pair
10:38:14   4  ,ydate
10:38:14   5  ,prdate
10:38:14   6  ,trend
10:38:14   7  ,g6
10:38:14   8  ,gatt
10:38:14   9  ,gattn
10:38:14  10  FROM svm6162
10:38:14  11  /

Table created.

Elapsed: 00:00:00.09
10:38:14 SQL> 
10:38:14 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
10:38:14 SQL> 
10:38:14 SQL> DROP   TABLE ajp_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
10:38:14 SQL> CREATE TABLE ajp_ms610 COMPRESS AS
10:38:14   2  SELECT
10:38:14   3  ydate
10:38:14   4  ,trend ajp_trend
10:38:14   5  ,g6    ajp_g6
10:38:14   6  ,gatt  ajp_gatt
10:38:14   7  ,gattn ajp_gattn
10:38:14   8  FROM modsrc
10:38:14   9  /

Table created.

Elapsed: 00:00:00.08
10:38:14 SQL> 
10:38:14 SQL> ANALYZE TABLE ajp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
10:38:14 SQL> 
10:38:14 SQL> -- I need a copy of the attributes:
10:38:14 SQL> 
10:38:14 SQL> 
10:38:14 SQL> DROP   TABLE ajp_att;

Table dropped.

Elapsed: 00:00:00.04
10:38:14 SQL> CREATE TABLE ajp_att COMPRESS AS
10:38:14   2  SELECT
10:38:14   3  ydate
10:38:14   4  ,att00 ajp_att00
10:38:14   5  ,att01 ajp_att01
10:38:14   6  ,att02 ajp_att02
10:38:14   7  ,att03 ajp_att03
10:38:14   8  ,att04 ajp_att04
10:38:14   9  ,att05 ajp_att05
10:38:14  10  ,att06 ajp_att06
10:38:14  11  ,att07 ajp_att07
10:38:14  12  ,att08 ajp_att08
10:38:14  13  ,att09 ajp_att09
10:38:14  14  ,att10 ajp_att10
10:38:14  15  ,att11 ajp_att11
10:38:14  16  ,att12 ajp_att12
10:38:14  17  ,att13 ajp_att13
10:38:14  18  ,att14 ajp_att14
10:38:14  19  ,att15 ajp_att15
10:38:14  20  ,att16 ajp_att16
10:38:14  21  ,att17 ajp_att17
10:38:14  22  ,att18 ajp_att18
10:38:14  23  ,att19 ajp_att19
10:38:14  24  ,att20 ajp_att20
10:38:14  25  ,att21 ajp_att21
10:38:14  26  ,att22 ajp_att22
10:38:14  27  ,att23 ajp_att23
10:38:14  28  ,att24 ajp_att24
10:38:14  29  ,att25 ajp_att25
10:38:14  30  ,att26 ajp_att26
10:38:14  31  ,att27 ajp_att27
10:38:14  32  ,att28 ajp_att28
10:38:14  33  ,att29 ajp_att29
10:38:14  34  ,att30 ajp_att30
10:38:14  35  ,att31 ajp_att31
10:38:14  36  ,att32 ajp_att32
10:38:14  37  ,att33 ajp_att33
10:38:14  38  ,att34 ajp_att34
10:38:14  39  ,att35 ajp_att35
10:38:14  40  ,att36 ajp_att36
10:38:14  41  ,att37 ajp_att37
10:38:14  42  FROM svm6162
10:38:14  43  /

Table created.

Elapsed: 00:00:00.17
10:38:14 SQL> 
10:38:14 SQL> ANALYZE TABLE ajp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
10:38:15 SQL> 
10:38:15 SQL> -- rpt
10:38:15 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19249

Elapsed: 00:00:00.75
10:38:16 SQL> SELECT COUNT(*)FROM ajp_att;

  COUNT(*)
----------
     19249

Elapsed: 00:00:00.00
10:38:16 SQL> 
10:38:16 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
