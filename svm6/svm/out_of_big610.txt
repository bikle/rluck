
SQL*Plus: Release 11.2.0.1.0 Production on Mon Jan 3 03:15:27 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

03:15:28 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
03:15:28 SQL> 03:15:28 SQL> --
03:15:28 SQL> -- eur610.sql
03:15:28 SQL> --
03:15:28 SQL> 
03:15:28 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:15:28 SQL> 
03:15:28 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.04
03:15:28 SQL> 
03:15:28 SQL> -- I created di5min here:
03:15:28 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:15:28 SQL> 
03:15:28 SQL> CREATE OR REPLACE VIEW svm6102 AS
03:15:28   2  SELECT
03:15:28   3  pair
03:15:28   4  ,ydate
03:15:28   5  ,prdate
03:15:28   6  ,rownum rnum -- acts as t in my time-series
03:15:28   7  ,clse
03:15:28   8  -- Derive a bunch of attributes from clse, the latest price:
03:15:28   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
03:15:28  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
03:15:28  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
03:15:28  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
03:15:28  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
03:15:28  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
03:15:28  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
03:15:28  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
03:15:28  17  --
03:15:28  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
03:15:28  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
03:15:28  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
03:15:28  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
03:15:28  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
03:15:28  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
03:15:28  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
03:15:28  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
03:15:28  26  --
03:15:28  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
03:15:28  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
03:15:28  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
03:15:28  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
03:15:28  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
03:15:28  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
03:15:28  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
03:15:28  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
03:15:28  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
03:15:28  36  FROM di5min WHERE pair LIKE'%eur%'
03:15:28  37  AND ydate > sysdate - 95
03:15:28  38  ORDER BY ydate
03:15:28  39  /

View created.

Elapsed: 00:00:00.09
03:15:28 SQL> 
03:15:28 SQL> -- rpt
03:15:28 SQL> 
03:15:28 SQL> SELECT
03:15:28   2  pair
03:15:28   3  ,COUNT(pair)
03:15:28   4  ,MIN(clse),MAX(clse)
03:15:28   5  ,MIN(avg6),MAX(avg6)
03:15:28   6  ,MIN(ydate),MAX(ydate)
03:15:28   7  FROM svm6102
03:15:28   8  GROUP BY pair
03:15:28   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19259    1.29735	   1.4273 1.29875103 1.42436233 2010-09-30 03:20:01 2011-01-03 03:10:00

Elapsed: 00:00:00.90
03:15:29 SQL> 
03:15:29 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:15:29 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.05
03:15:29 SQL> CREATE TABLE svm6122 COMPRESS AS
03:15:29   2  SELECT
03:15:29   3  pair
03:15:29   4  ,ydate
03:15:29   5  ,prdate
03:15:29   6  ,clse
03:15:29   7  -- g6 is important. I want to predict g6:
03:15:29   8  ,ld6 - clse g6
03:15:29   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
03:15:29  10  -- I want more attributes from the ones I derived above:
03:15:29  11  -- clse relation to moving-min
03:15:29  12  ,clse-min4  cm4
03:15:29  13  ,clse-min6  cm6
03:15:29  14  ,clse-min8  cm8
03:15:29  15  ,clse-min10 cm10
03:15:29  16  ,clse-min12 cm12
03:15:29  17  ,clse-min14 cm14
03:15:29  18  ,clse-min16 cm16
03:15:29  19  ,clse-min18 cm18
03:15:29  20  -- clse relation to moving-avg
03:15:29  21  ,clse-avg4  ca4
03:15:29  22  ,clse-avg6  ca6
03:15:29  23  ,clse-avg8  ca8
03:15:29  24  ,clse-avg10 ca10
03:15:29  25  ,clse-avg12 ca12
03:15:29  26  ,clse-avg14 ca14
03:15:29  27  ,clse-avg16 ca16
03:15:29  28  ,clse-avg18 ca18
03:15:29  29  -- clse relation to moving-max
03:15:29  30  ,clse-max4  cx4
03:15:29  31  ,clse-max6  cx6
03:15:29  32  ,clse-max8  cx8
03:15:29  33  ,clse-max10 cx10
03:15:29  34  ,clse-max12 cx12
03:15:29  35  ,clse-max14 cx14
03:15:29  36  ,clse-max16 cx16
03:15:29  37  ,clse-max18 cx18
03:15:29  38  -- Derive more attributes.
03:15:29  39  -- I want to use CORR() here to help SVM see the shape of the series.
03:15:29  40  -- But COVAR_POP is more stable:
03:15:29  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
03:15:29  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:15:29  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:15:29  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:15:29  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:15:29  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:15:29  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:15:29  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:15:29  49  -- Derive date related attributes:
03:15:29  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:15:29  51  ,0+TO_CHAR(ydate,'D')d
03:15:29  52  ,0+TO_CHAR(ydate,'W')w
03:15:29  53  -- mpm stands for minutes-past-midnight:
03:15:29  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:15:29  55  -- mph stands for minutes-past-hour:
03:15:29  56  ,0+TO_CHAR(ydate,'MI')mph
03:15:29  57  FROM svm6102
03:15:29  58  ORDER BY ydate
03:15:29  59  /

Table created.

Elapsed: 00:00:02.38
03:15:31 SQL> 
03:15:31 SQL> -- rpt
03:15:31 SQL> 
03:15:31 SQL> SELECT
03:15:31   2  pair
03:15:31   3  ,COUNT(pair)
03:15:31   4  ,MIN(clse),MAX(clse)
03:15:31   5  ,MIN(ydate),MAX(ydate)
03:15:31   6  FROM svm6122
03:15:31   7  GROUP BY pair
03:15:31   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19259    1.29735	   1.4273 2010-09-30 03:20:01 2011-01-03 03:10:00

Elapsed: 00:00:00.04
03:15:31 SQL> 
03:15:31 SQL> -- Prepare for derivation of NTILE based params:
03:15:31 SQL> 
03:15:31 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.36
03:15:31 SQL> CREATE TABLE svm6142 COMPRESS AS
03:15:31   2  SELECT
03:15:31   3  pair
03:15:31   4  ,ydate
03:15:31   5  ,prdate
03:15:31   6  ,clse
03:15:31   7  ,g6
03:15:31   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
03:15:31   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
03:15:31  10  ,CASE WHEN trend IS NULL THEN 1
03:15:31  11  	    WHEN trend =0      THEN 1
03:15:31  12  	    ELSE trend END trend
03:15:31  13  ,cm4
03:15:31  14  ,cm6
03:15:31  15  ,cm8
03:15:31  16  ,cm10
03:15:31  17  ,cm12
03:15:31  18  ,cm14
03:15:31  19  ,cm16
03:15:31  20  ,cm18
03:15:31  21  --
03:15:31  22  ,ca4
03:15:31  23  ,ca6
03:15:31  24  ,ca8
03:15:31  25  ,ca10
03:15:31  26  ,ca12
03:15:31  27  ,ca14
03:15:31  28  ,ca16
03:15:31  29  ,ca18
03:15:31  30  --
03:15:31  31  ,cx4
03:15:31  32  ,cx6
03:15:31  33  ,cx8
03:15:31  34  ,cx10
03:15:31  35  ,cx12
03:15:31  36  ,cx14
03:15:31  37  ,cx16
03:15:31  38  ,cx18
03:15:31  39  --
03:15:31  40  ,crr4
03:15:31  41  ,crr6
03:15:31  42  ,crr8
03:15:31  43  ,crr10
03:15:31  44  ,crr12
03:15:31  45  ,crr14
03:15:31  46  ,crr16
03:15:31  47  ,crr18
03:15:31  48  --
03:15:31  49  ,hh
03:15:31  50  ,d
03:15:31  51  ,w
03:15:31  52  ,mpm
03:15:31  53  ,mph
03:15:31  54  FROM svm6122
03:15:31  55  ORDER BY ydate
03:15:31  56  /

Table created.

Elapsed: 00:00:00.35
03:15:32 SQL> 
03:15:32 SQL> -- rpt
03:15:32 SQL> 
03:15:32 SQL> SELECT
03:15:32   2  pair
03:15:32   3  ,trend
03:15:32   4  ,gatt
03:15:32   5  ,COUNT(pair)
03:15:32   6  ,AVG(g6)
03:15:32   7  FROM svm6142
03:15:32   8  GROUP BY pair,trend,gatt
03:15:32   9  ORDER BY pair,trend,gatt
03:15:32  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      5952 -.00313705
eur_usd 	-1 up	      3557 .004486516
eur_usd 	-1		72
eur_usd 	 1 nup	      5853 -.00317247
eur_usd 	 1 up	      3825 .005053601

Elapsed: 00:00:00.04
03:15:32 SQL> 
03:15:32 SQL> 
03:15:32 SQL> -- Derive NTILE based params:
03:15:32 SQL> 
03:15:32 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.48
03:15:32 SQL> CREATE TABLE svm6162 COMPRESS AS
03:15:32   2  SELECT
03:15:32   3  pair
03:15:32   4  ,ydate
03:15:32   5  ,prdate
03:15:32   6  ,clse
03:15:32   7  ,g6
03:15:32   8  ,gatt
03:15:32   9  ,gattn
03:15:32  10  ,trend
03:15:32  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
03:15:32  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
03:15:32  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
03:15:32  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
03:15:32  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
03:15:32  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
03:15:32  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
03:15:32  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
03:15:32  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
03:15:32  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
03:15:32  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
03:15:32  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
03:15:32  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
03:15:32  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
03:15:32  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
03:15:32  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
03:15:32  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
03:15:32  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
03:15:32  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
03:15:32  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
03:15:32  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
03:15:32  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
03:15:32  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
03:15:32  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
03:15:32  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
03:15:32  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
03:15:32  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
03:15:32  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
03:15:32  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
03:15:32  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
03:15:32  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
03:15:32  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
03:15:32  43  ,hh  att32
03:15:32  44  ,d   att33
03:15:32  45  ,w   att34
03:15:32  46  ,mpm att35
03:15:32  47  ,mph att36
03:15:32  48  ,trend att37
03:15:32  49  FROM svm6142
03:15:32  50  ORDER BY ydate
03:15:32  51  /

Table created.

Elapsed: 00:00:04.73
03:15:37 SQL> 
03:15:37 SQL> -- rpt
03:15:37 SQL> 
03:15:37 SQL> SELECT
03:15:37   2  pair
03:15:37   3  ,trend
03:15:37   4  ,gatt
03:15:37   5  ,COUNT(pair)
03:15:37   6  ,AVG(g6)
03:15:37   7  FROM svm6162
03:15:37   8  GROUP BY pair,trend,gatt
03:15:37   9  ORDER BY pair,trend,gatt
03:15:37  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      5952 -.00313705
eur_usd 	-1 up	      3557 .004486516
eur_usd 	-1		72
eur_usd 	 1 nup	      5853 -.00317247
eur_usd 	 1 up	      3825 .005053601

Elapsed: 00:00:00.03
03:15:37 SQL> 
03:15:37 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.09
03:15:37 SQL> CREATE TABLE modsrc COMPRESS AS
03:15:37   2  SELECT
03:15:37   3  pair
03:15:37   4  ,ydate
03:15:37   5  ,prdate
03:15:37   6  ,trend
03:15:37   7  ,g6
03:15:37   8  ,gatt
03:15:37   9  ,gattn
03:15:37  10  FROM svm6162
03:15:37  11  /

Table created.

Elapsed: 00:00:00.09
03:15:37 SQL> 
03:15:37 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.26
03:15:38 SQL> 
03:15:38 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
03:15:38 SQL> CREATE TABLE eur_ms610 COMPRESS AS
03:15:38   2  SELECT
03:15:38   3  ydate
03:15:38   4  ,trend eur_trend
03:15:38   5  ,g6    eur_g6
03:15:38   6  ,gatt  eur_gatt
03:15:38   7  ,gattn eur_gattn
03:15:38   8  FROM modsrc
03:15:38   9  /

Table created.

Elapsed: 00:00:00.06
03:15:38 SQL> 
03:15:38 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
03:15:38 SQL> 
03:15:38 SQL> -- I need a copy of the attributes:
03:15:38 SQL> 
03:15:38 SQL> 
03:15:38 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.05
03:15:38 SQL> CREATE TABLE eur_att COMPRESS AS
03:15:38   2  SELECT
03:15:38   3  ydate
03:15:38   4  ,att00 eur_att00
03:15:38   5  ,att01 eur_att01
03:15:38   6  ,att02 eur_att02
03:15:38   7  ,att03 eur_att03
03:15:38   8  ,att04 eur_att04
03:15:38   9  ,att05 eur_att05
03:15:38  10  ,att06 eur_att06
03:15:38  11  ,att07 eur_att07
03:15:38  12  ,att08 eur_att08
03:15:38  13  ,att09 eur_att09
03:15:38  14  ,att10 eur_att10
03:15:38  15  ,att11 eur_att11
03:15:38  16  ,att12 eur_att12
03:15:38  17  ,att13 eur_att13
03:15:38  18  ,att14 eur_att14
03:15:38  19  ,att15 eur_att15
03:15:38  20  ,att16 eur_att16
03:15:38  21  ,att17 eur_att17
03:15:38  22  ,att18 eur_att18
03:15:38  23  ,att19 eur_att19
03:15:38  24  ,att20 eur_att20
03:15:38  25  ,att21 eur_att21
03:15:38  26  ,att22 eur_att22
03:15:38  27  ,att23 eur_att23
03:15:38  28  ,att24 eur_att24
03:15:38  29  ,att25 eur_att25
03:15:38  30  ,att26 eur_att26
03:15:38  31  ,att27 eur_att27
03:15:38  32  ,att28 eur_att28
03:15:38  33  ,att29 eur_att29
03:15:38  34  ,att30 eur_att30
03:15:38  35  ,att31 eur_att31
03:15:38  36  ,att32 eur_att32
03:15:38  37  ,att33 eur_att33
03:15:38  38  ,att34 eur_att34
03:15:38  39  ,att35 eur_att35
03:15:38  40  ,att36 eur_att36
03:15:38  41  ,att37 eur_att37
03:15:38  42  FROM svm6162
03:15:38  43  /

Table created.

Elapsed: 00:00:00.17
03:15:38 SQL> 
03:15:38 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
03:15:38 SQL> 
03:15:38 SQL> -- rpt
03:15:38 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.89
03:15:39 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.00
03:15:39 SQL> 
03:15:39 SQL> --
03:15:39 SQL> -- aud610.sql
03:15:39 SQL> --
03:15:39 SQL> 
03:15:39 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:15:39 SQL> 
03:15:39 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.42
03:15:40 SQL> 
03:15:40 SQL> -- I created di5min here:
03:15:40 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:15:40 SQL> 
03:15:40 SQL> CREATE OR REPLACE VIEW svm6102 AS
03:15:40   2  SELECT
03:15:40   3  pair
03:15:40   4  ,ydate
03:15:40   5  ,prdate
03:15:40   6  ,rownum rnum -- acts as t in my time-series
03:15:40   7  ,clse
03:15:40   8  -- Derive a bunch of attributes from clse, the latest price:
03:15:40   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
03:15:40  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
03:15:40  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
03:15:40  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
03:15:40  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
03:15:40  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
03:15:40  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
03:15:40  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
03:15:40  17  --
03:15:40  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
03:15:40  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
03:15:40  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
03:15:40  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
03:15:40  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
03:15:40  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
03:15:40  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
03:15:40  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
03:15:40  26  --
03:15:40  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
03:15:40  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
03:15:40  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
03:15:40  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
03:15:40  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
03:15:40  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
03:15:40  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
03:15:40  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
03:15:40  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
03:15:40  36  FROM di5min WHERE pair LIKE'%aud%'
03:15:40  37  AND ydate > sysdate - 95
03:15:40  38  ORDER BY ydate
03:15:40  39  /

View created.

Elapsed: 00:00:00.04
03:15:40 SQL> 
03:15:40 SQL> -- rpt
03:15:40 SQL> 
03:15:40 SQL> SELECT
03:15:40   2  pair
03:15:40   3  ,COUNT(pair)
03:15:40   4  ,MIN(clse),MAX(clse)
03:15:40   5  ,MIN(avg6),MAX(avg6)
03:15:40   6  ,MIN(ydate),MAX(ydate)
03:15:40   7  FROM svm6102
03:15:40   8  GROUP BY pair
03:15:40   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19256	.95405	  1.02495 .957141438 1.02284247 2010-09-30 03:20:01 2011-01-03 03:10:00

Elapsed: 00:00:00.85
03:15:41 SQL> 
03:15:41 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:15:41 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.22
03:15:41 SQL> CREATE TABLE svm6122 COMPRESS AS
03:15:41   2  SELECT
03:15:41   3  pair
03:15:41   4  ,ydate
03:15:41   5  ,prdate
03:15:41   6  ,clse
03:15:41   7  -- g6 is important. I want to predict g6:
03:15:41   8  ,ld6 - clse g6
03:15:41   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
03:15:41  10  -- I want more attributes from the ones I derived above:
03:15:41  11  -- clse relation to moving-min
03:15:41  12  ,clse-min4  cm4
03:15:41  13  ,clse-min6  cm6
03:15:41  14  ,clse-min8  cm8
03:15:41  15  ,clse-min10 cm10
03:15:41  16  ,clse-min12 cm12
03:15:41  17  ,clse-min14 cm14
03:15:41  18  ,clse-min16 cm16
03:15:41  19  ,clse-min18 cm18
03:15:41  20  -- clse relation to moving-avg
03:15:41  21  ,clse-avg4  ca4
03:15:41  22  ,clse-avg6  ca6
03:15:41  23  ,clse-avg8  ca8
03:15:41  24  ,clse-avg10 ca10
03:15:41  25  ,clse-avg12 ca12
03:15:41  26  ,clse-avg14 ca14
03:15:41  27  ,clse-avg16 ca16
03:15:41  28  ,clse-avg18 ca18
03:15:41  29  -- clse relation to moving-max
03:15:41  30  ,clse-max4  cx4
03:15:41  31  ,clse-max6  cx6
03:15:41  32  ,clse-max8  cx8
03:15:41  33  ,clse-max10 cx10
03:15:41  34  ,clse-max12 cx12
03:15:41  35  ,clse-max14 cx14
03:15:41  36  ,clse-max16 cx16
03:15:41  37  ,clse-max18 cx18
03:15:41  38  -- Derive more attributes.
03:15:41  39  -- I want to use CORR() here to help SVM see the shape of the series.
03:15:41  40  -- But COVAR_POP is more stable:
03:15:41  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
03:15:41  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:15:41  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:15:41  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:15:41  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:15:41  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:15:41  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:15:41  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:15:41  49  -- Derive date related attributes:
03:15:41  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:15:41  51  ,0+TO_CHAR(ydate,'D')d
03:15:41  52  ,0+TO_CHAR(ydate,'W')w
03:15:41  53  -- mpm stands for minutes-past-midnight:
03:15:41  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:15:41  55  -- mph stands for minutes-past-hour:
03:15:41  56  ,0+TO_CHAR(ydate,'MI')mph
03:15:41  57  FROM svm6102
03:15:41  58  ORDER BY ydate
03:15:41  59  /

Table created.

Elapsed: 00:00:02.07
03:15:43 SQL> 
03:15:43 SQL> -- rpt
03:15:43 SQL> 
03:15:43 SQL> SELECT
03:15:43   2  pair
03:15:43   3  ,COUNT(pair)
03:15:43   4  ,MIN(clse),MAX(clse)
03:15:43   5  ,MIN(ydate),MAX(ydate)
03:15:43   6  FROM svm6122
03:15:43   7  GROUP BY pair
03:15:43   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19256	.95405	  1.02495 2010-09-30 03:20:01 2011-01-03 03:10:00

Elapsed: 00:00:00.03
03:15:43 SQL> 
03:15:43 SQL> -- Prepare for derivation of NTILE based params:
03:15:43 SQL> 
03:15:43 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.24
03:15:43 SQL> CREATE TABLE svm6142 COMPRESS AS
03:15:43   2  SELECT
03:15:43   3  pair
03:15:43   4  ,ydate
03:15:43   5  ,prdate
03:15:43   6  ,clse
03:15:43   7  ,g6
03:15:43   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
03:15:43   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
03:15:43  10  ,CASE WHEN trend IS NULL THEN 1
03:15:43  11  	    WHEN trend =0      THEN 1
03:15:43  12  	    ELSE trend END trend
03:15:43  13  ,cm4
03:15:43  14  ,cm6
03:15:43  15  ,cm8
03:15:43  16  ,cm10
03:15:43  17  ,cm12
03:15:43  18  ,cm14
03:15:43  19  ,cm16
03:15:43  20  ,cm18
03:15:43  21  --
03:15:43  22  ,ca4
03:15:43  23  ,ca6
03:15:43  24  ,ca8
03:15:43  25  ,ca10
03:15:43  26  ,ca12
03:15:43  27  ,ca14
03:15:43  28  ,ca16
03:15:43  29  ,ca18
03:15:43  30  --
03:15:43  31  ,cx4
03:15:43  32  ,cx6
03:15:43  33  ,cx8
03:15:43  34  ,cx10
03:15:43  35  ,cx12
03:15:43  36  ,cx14
03:15:43  37  ,cx16
03:15:43  38  ,cx18
03:15:43  39  --
03:15:43  40  ,crr4
03:15:43  41  ,crr6
03:15:43  42  ,crr8
03:15:43  43  ,crr10
03:15:43  44  ,crr12
03:15:43  45  ,crr14
03:15:43  46  ,crr16
03:15:43  47  ,crr18
03:15:43  48  --
03:15:43  49  ,hh
03:15:43  50  ,d
03:15:43  51  ,w
03:15:43  52  ,mpm
03:15:43  53  ,mph
03:15:43  54  FROM svm6122
03:15:43  55  ORDER BY ydate
03:15:43  56  /

Table created.

Elapsed: 00:00:00.37
03:15:44 SQL> 
03:15:44 SQL> -- rpt
03:15:44 SQL> 
03:15:44 SQL> SELECT
03:15:44   2  pair
03:15:44   3  ,trend
03:15:44   4  ,gatt
03:15:44   5  ,COUNT(pair)
03:15:44   6  ,AVG(g6)
03:15:44   7  FROM svm6142
03:15:44   8  GROUP BY pair,trend,gatt
03:15:44   9  ORDER BY pair,trend,gatt
03:15:44  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5033 -.00217742
aud_usd 	-1 up	      3747 .003748028
aud_usd 	-1		60
aud_usd 	 1 nup	      6705 -.00211479
aud_usd 	 1 up	      3699 .004032218
aud_usd 	 1		12

6 rows selected.

Elapsed: 00:00:00.04
03:15:44 SQL> 
03:15:44 SQL> 
03:15:44 SQL> -- Derive NTILE based params:
03:15:44 SQL> 
03:15:44 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.19
03:15:44 SQL> CREATE TABLE svm6162 COMPRESS AS
03:15:44   2  SELECT
03:15:44   3  pair
03:15:44   4  ,ydate
03:15:44   5  ,prdate
03:15:44   6  ,clse
03:15:44   7  ,g6
03:15:44   8  ,gatt
03:15:44   9  ,gattn
03:15:44  10  ,trend
03:15:44  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
03:15:44  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
03:15:44  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
03:15:44  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
03:15:44  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
03:15:44  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
03:15:44  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
03:15:44  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
03:15:44  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
03:15:44  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
03:15:44  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
03:15:44  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
03:15:44  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
03:15:44  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
03:15:44  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
03:15:44  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
03:15:44  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
03:15:44  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
03:15:44  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
03:15:44  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
03:15:44  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
03:15:44  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
03:15:44  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
03:15:44  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
03:15:44  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
03:15:44  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
03:15:44  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
03:15:44  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
03:15:44  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
03:15:44  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
03:15:44  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
03:15:44  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
03:15:44  43  ,hh  att32
03:15:44  44  ,d   att33
03:15:44  45  ,w   att34
03:15:44  46  ,mpm att35
03:15:44  47  ,mph att36
03:15:44  48  ,trend att37
03:15:44  49  FROM svm6142
03:15:44  50  ORDER BY ydate
03:15:44  51  /

Table created.

Elapsed: 00:00:04.64
03:15:49 SQL> 
03:15:49 SQL> -- rpt
03:15:49 SQL> 
03:15:49 SQL> SELECT
03:15:49   2  pair
03:15:49   3  ,trend
03:15:49   4  ,gatt
03:15:49   5  ,COUNT(pair)
03:15:49   6  ,AVG(g6)
03:15:49   7  FROM svm6162
03:15:49   8  GROUP BY pair,trend,gatt
03:15:49   9  ORDER BY pair,trend,gatt
03:15:49  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5033 -.00217742
aud_usd 	-1 up	      3747 .003748028
aud_usd 	-1		60
aud_usd 	 1 nup	      6705 -.00211479
aud_usd 	 1 up	      3699 .004032218
aud_usd 	 1		12

6 rows selected.

Elapsed: 00:00:00.02
03:15:49 SQL> 
03:15:49 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
03:15:49 SQL> CREATE TABLE modsrc COMPRESS AS
03:15:49   2  SELECT
03:15:49   3  pair
03:15:49   4  ,ydate
03:15:49   5  ,prdate
03:15:49   6  ,trend
03:15:49   7  ,g6
03:15:49   8  ,gatt
03:15:49   9  ,gattn
03:15:49  10  FROM svm6162
03:15:49  11  /

Table created.

Elapsed: 00:00:00.08
03:15:49 SQL> 
03:15:49 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
03:15:49 SQL> 
03:15:49 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
03:15:49 SQL> CREATE TABLE aud_ms610 COMPRESS AS
03:15:49   2  SELECT
03:15:49   3  ydate
03:15:49   4  ,trend aud_trend
03:15:49   5  ,g6    aud_g6
03:15:49   6  ,gatt  aud_gatt
03:15:49   7  ,gattn aud_gattn
03:15:49   8  FROM modsrc
03:15:49   9  /

Table created.

Elapsed: 00:00:00.06
03:15:49 SQL> 
03:15:49 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
03:15:49 SQL> 
03:15:49 SQL> -- I need a copy of the attributes:
03:15:49 SQL> 
03:15:49 SQL> 
03:15:49 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.08
03:15:49 SQL> CREATE TABLE aud_att COMPRESS AS
03:15:49   2  SELECT
03:15:49   3  ydate
03:15:49   4  ,att00 aud_att00
03:15:49   5  ,att01 aud_att01
03:15:49   6  ,att02 aud_att02
03:15:49   7  ,att03 aud_att03
03:15:49   8  ,att04 aud_att04
03:15:49   9  ,att05 aud_att05
03:15:49  10  ,att06 aud_att06
03:15:49  11  ,att07 aud_att07
03:15:49  12  ,att08 aud_att08
03:15:49  13  ,att09 aud_att09
03:15:49  14  ,att10 aud_att10
03:15:49  15  ,att11 aud_att11
03:15:49  16  ,att12 aud_att12
03:15:49  17  ,att13 aud_att13
03:15:49  18  ,att14 aud_att14
03:15:49  19  ,att15 aud_att15
03:15:49  20  ,att16 aud_att16
03:15:49  21  ,att17 aud_att17
03:15:49  22  ,att18 aud_att18
03:15:49  23  ,att19 aud_att19
03:15:49  24  ,att20 aud_att20
03:15:49  25  ,att21 aud_att21
03:15:49  26  ,att22 aud_att22
03:15:49  27  ,att23 aud_att23
03:15:49  28  ,att24 aud_att24
03:15:49  29  ,att25 aud_att25
03:15:49  30  ,att26 aud_att26
03:15:49  31  ,att27 aud_att27
03:15:49  32  ,att28 aud_att28
03:15:49  33  ,att29 aud_att29
03:15:49  34  ,att30 aud_att30
03:15:49  35  ,att31 aud_att31
03:15:49  36  ,att32 aud_att32
03:15:49  37  ,att33 aud_att33
03:15:49  38  ,att34 aud_att34
03:15:49  39  ,att35 aud_att35
03:15:49  40  ,att36 aud_att36
03:15:49  41  ,att37 aud_att37
03:15:49  42  FROM svm6162
03:15:49  43  /

Table created.

Elapsed: 00:00:00.16
03:15:49 SQL> 
03:15:49 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
03:15:50 SQL> 
03:15:50 SQL> -- rpt
03:15:50 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.84
03:15:51 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.00
03:15:51 SQL> 
03:15:51 SQL> --
03:15:51 SQL> -- gbp610.sql
03:15:51 SQL> --
03:15:51 SQL> 
03:15:51 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:15:51 SQL> 
03:15:51 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
03:15:51 SQL> 
03:15:51 SQL> -- I created di5min here:
03:15:51 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:15:51 SQL> 
03:15:51 SQL> CREATE OR REPLACE VIEW svm6102 AS
03:15:51   2  SELECT
03:15:51   3  pair
03:15:51   4  ,ydate
03:15:51   5  ,prdate
03:15:51   6  ,rownum rnum -- acts as t in my time-series
03:15:51   7  ,clse
03:15:51   8  -- Derive a bunch of attributes from clse, the latest price:
03:15:51   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
03:15:51  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
03:15:51  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
03:15:51  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
03:15:51  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
03:15:51  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
03:15:51  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
03:15:51  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
03:15:51  17  --
03:15:51  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
03:15:51  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
03:15:51  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
03:15:51  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
03:15:51  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
03:15:51  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
03:15:51  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
03:15:51  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
03:15:51  26  --
03:15:51  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
03:15:51  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
03:15:51  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
03:15:51  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
03:15:51  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
03:15:51  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
03:15:51  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
03:15:51  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
03:15:51  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
03:15:51  36  FROM di5min WHERE pair LIKE'%gbp%'
03:15:51  37  AND ydate > sysdate - 95
03:15:51  38  ORDER BY ydate
03:15:51  39  /

View created.

Elapsed: 00:00:00.04
03:15:51 SQL> 
03:15:51 SQL> -- rpt
03:15:51 SQL> 
03:15:51 SQL> SELECT
03:15:51   2  pair
03:15:51   3  ,COUNT(pair)
03:15:51   4  ,MIN(clse),MAX(clse)
03:15:51   5  ,MIN(avg6),MAX(avg6)
03:15:51   6  ,MIN(ydate),MAX(ydate)
03:15:51   7  FROM svm6102
03:15:51   8  GROUP BY pair
03:15:51   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19258   1.535325	   1.6295 1.53696747 1.62716986 2010-09-30 03:20:01 2011-01-03 03:10:00

Elapsed: 00:00:00.83
03:15:52 SQL> 
03:15:52 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:15:52 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.32
03:15:52 SQL> CREATE TABLE svm6122 COMPRESS AS
03:15:52   2  SELECT
03:15:52   3  pair
03:15:52   4  ,ydate
03:15:52   5  ,prdate
03:15:52   6  ,clse
03:15:52   7  -- g6 is important. I want to predict g6:
03:15:52   8  ,ld6 - clse g6
03:15:52   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
03:15:52  10  -- I want more attributes from the ones I derived above:
03:15:52  11  -- clse relation to moving-min
03:15:52  12  ,clse-min4  cm4
03:15:52  13  ,clse-min6  cm6
03:15:52  14  ,clse-min8  cm8
03:15:52  15  ,clse-min10 cm10
03:15:52  16  ,clse-min12 cm12
03:15:52  17  ,clse-min14 cm14
03:15:52  18  ,clse-min16 cm16
03:15:52  19  ,clse-min18 cm18
03:15:52  20  -- clse relation to moving-avg
03:15:52  21  ,clse-avg4  ca4
03:15:52  22  ,clse-avg6  ca6
03:15:52  23  ,clse-avg8  ca8
03:15:52  24  ,clse-avg10 ca10
03:15:52  25  ,clse-avg12 ca12
03:15:52  26  ,clse-avg14 ca14
03:15:52  27  ,clse-avg16 ca16
03:15:52  28  ,clse-avg18 ca18
03:15:52  29  -- clse relation to moving-max
03:15:52  30  ,clse-max4  cx4
03:15:52  31  ,clse-max6  cx6
03:15:52  32  ,clse-max8  cx8
03:15:52  33  ,clse-max10 cx10
03:15:52  34  ,clse-max12 cx12
03:15:52  35  ,clse-max14 cx14
03:15:52  36  ,clse-max16 cx16
03:15:52  37  ,clse-max18 cx18
03:15:52  38  -- Derive more attributes.
03:15:52  39  -- I want to use CORR() here to help SVM see the shape of the series.
03:15:52  40  -- But COVAR_POP is more stable:
03:15:52  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
03:15:52  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:15:52  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:15:52  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:15:52  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:15:52  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:15:52  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:15:52  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:15:52  49  -- Derive date related attributes:
03:15:52  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:15:52  51  ,0+TO_CHAR(ydate,'D')d
03:15:52  52  ,0+TO_CHAR(ydate,'W')w
03:15:52  53  -- mpm stands for minutes-past-midnight:
03:15:52  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:15:52  55  -- mph stands for minutes-past-hour:
03:15:52  56  ,0+TO_CHAR(ydate,'MI')mph
03:15:52  57  FROM svm6102
03:15:52  58  ORDER BY ydate
03:15:52  59  /

Table created.

Elapsed: 00:00:02.12
03:15:54 SQL> 
03:15:54 SQL> -- rpt
03:15:54 SQL> 
03:15:54 SQL> SELECT
03:15:54   2  pair
03:15:54   3  ,COUNT(pair)
03:15:54   4  ,MIN(clse),MAX(clse)
03:15:54   5  ,MIN(ydate),MAX(ydate)
03:15:54   6  FROM svm6122
03:15:54   7  GROUP BY pair
03:15:54   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19258   1.535325	   1.6295 2010-09-30 03:20:01 2011-01-03 03:10:00

Elapsed: 00:00:00.03
03:15:55 SQL> 
03:15:55 SQL> -- Prepare for derivation of NTILE based params:
03:15:55 SQL> 
03:15:55 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.28
03:15:55 SQL> CREATE TABLE svm6142 COMPRESS AS
03:15:55   2  SELECT
03:15:55   3  pair
03:15:55   4  ,ydate
03:15:55   5  ,prdate
03:15:55   6  ,clse
03:15:55   7  ,g6
03:15:55   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
03:15:55   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
03:15:55  10  ,CASE WHEN trend IS NULL THEN 1
03:15:55  11  	    WHEN trend =0      THEN 1
03:15:55  12  	    ELSE trend END trend
03:15:55  13  ,cm4
03:15:55  14  ,cm6
03:15:55  15  ,cm8
03:15:55  16  ,cm10
03:15:55  17  ,cm12
03:15:55  18  ,cm14
03:15:55  19  ,cm16
03:15:55  20  ,cm18
03:15:55  21  --
03:15:55  22  ,ca4
03:15:55  23  ,ca6
03:15:55  24  ,ca8
03:15:55  25  ,ca10
03:15:55  26  ,ca12
03:15:55  27  ,ca14
03:15:55  28  ,ca16
03:15:55  29  ,ca18
03:15:55  30  --
03:15:55  31  ,cx4
03:15:55  32  ,cx6
03:15:55  33  ,cx8
03:15:55  34  ,cx10
03:15:55  35  ,cx12
03:15:55  36  ,cx14
03:15:55  37  ,cx16
03:15:55  38  ,cx18
03:15:55  39  --
03:15:55  40  ,crr4
03:15:55  41  ,crr6
03:15:55  42  ,crr8
03:15:55  43  ,crr10
03:15:55  44  ,crr12
03:15:55  45  ,crr14
03:15:55  46  ,crr16
03:15:55  47  ,crr18
03:15:55  48  --
03:15:55  49  ,hh
03:15:55  50  ,d
03:15:55  51  ,w
03:15:55  52  ,mpm
03:15:55  53  ,mph
03:15:55  54  FROM svm6122
03:15:55  55  ORDER BY ydate
03:15:55  56  /

Table created.

Elapsed: 00:00:00.37
03:15:55 SQL> 
03:15:55 SQL> -- rpt
03:15:55 SQL> 
03:15:55 SQL> SELECT
03:15:55   2  pair
03:15:55   3  ,trend
03:15:55   4  ,gatt
03:15:55   5  ,COUNT(pair)
03:15:55   6  ,AVG(g6)
03:15:55   7  FROM svm6142
03:15:55   8  GROUP BY pair,trend,gatt
03:15:55   9  ORDER BY pair,trend,gatt
03:15:55  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6121 -.00268543
gbp_usd 	-1 up	      3475 .004329014
gbp_usd 	-1		65
gbp_usd 	 1 nup	      6088 -.00270603
gbp_usd 	 1 up	      3502   .0045118
gbp_usd 	 1		 7

6 rows selected.

Elapsed: 00:00:00.04
03:15:55 SQL> 
03:15:55 SQL> 
03:15:55 SQL> -- Derive NTILE based params:
03:15:55 SQL> 
03:15:55 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
03:15:55 SQL> CREATE TABLE svm6162 COMPRESS AS
03:15:55   2  SELECT
03:15:55   3  pair
03:15:55   4  ,ydate
03:15:55   5  ,prdate
03:15:55   6  ,clse
03:15:55   7  ,g6
03:15:55   8  ,gatt
03:15:55   9  ,gattn
03:15:55  10  ,trend
03:15:55  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
03:15:55  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
03:15:55  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
03:15:55  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
03:15:55  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
03:15:55  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
03:15:55  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
03:15:55  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
03:15:55  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
03:15:55  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
03:15:55  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
03:15:55  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
03:15:55  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
03:15:55  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
03:15:55  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
03:15:55  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
03:15:55  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
03:15:55  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
03:15:55  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
03:15:55  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
03:15:55  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
03:15:55  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
03:15:55  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
03:15:55  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
03:15:55  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
03:15:55  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
03:15:55  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
03:15:55  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
03:15:55  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
03:15:55  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
03:15:55  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
03:15:55  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
03:15:55  43  ,hh  att32
03:15:55  44  ,d   att33
03:15:55  45  ,w   att34
03:15:55  46  ,mpm att35
03:15:55  47  ,mph att36
03:15:55  48  ,trend att37
03:15:55  49  FROM svm6142
03:15:55  50  ORDER BY ydate
03:15:55  51  /

Table created.

Elapsed: 00:00:04.90
03:16:00 SQL> 
03:16:00 SQL> -- rpt
03:16:00 SQL> 
03:16:00 SQL> SELECT
03:16:00   2  pair
03:16:00   3  ,trend
03:16:00   4  ,gatt
03:16:00   5  ,COUNT(pair)
03:16:00   6  ,AVG(g6)
03:16:00   7  FROM svm6162
03:16:00   8  GROUP BY pair,trend,gatt
03:16:00   9  ORDER BY pair,trend,gatt
03:16:00  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6121 -.00268543
gbp_usd 	-1 up	      3475 .004329014
gbp_usd 	-1		65
gbp_usd 	 1 nup	      6088 -.00270603
gbp_usd 	 1 up	      3502   .0045118
gbp_usd 	 1		 7

6 rows selected.

Elapsed: 00:00:00.02
03:16:00 SQL> 
03:16:00 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
03:16:00 SQL> CREATE TABLE modsrc COMPRESS AS
03:16:00   2  SELECT
03:16:00   3  pair
03:16:00   4  ,ydate
03:16:00   5  ,prdate
03:16:00   6  ,trend
03:16:00   7  ,g6
03:16:00   8  ,gatt
03:16:00   9  ,gattn
03:16:00  10  FROM svm6162
03:16:00  11  /

Table created.

Elapsed: 00:00:00.08
03:16:00 SQL> 
03:16:00 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
03:16:01 SQL> 
03:16:01 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
03:16:01 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
03:16:01   2  SELECT
03:16:01   3  ydate
03:16:01   4  ,trend gbp_trend
03:16:01   5  ,g6    gbp_g6
03:16:01   6  ,gatt  gbp_gatt
03:16:01   7  ,gattn gbp_gattn
03:16:01   8  FROM modsrc
03:16:01   9  /

Table created.

Elapsed: 00:00:00.07
03:16:01 SQL> 
03:16:01 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
03:16:01 SQL> 
03:16:01 SQL> -- I need a copy of the attributes:
03:16:01 SQL> 
03:16:01 SQL> 
03:16:01 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.05
03:16:01 SQL> CREATE TABLE gbp_att COMPRESS AS
03:16:01   2  SELECT
03:16:01   3  ydate
03:16:01   4  ,att00 gbp_att00
03:16:01   5  ,att01 gbp_att01
03:16:01   6  ,att02 gbp_att02
03:16:01   7  ,att03 gbp_att03
03:16:01   8  ,att04 gbp_att04
03:16:01   9  ,att05 gbp_att05
03:16:01  10  ,att06 gbp_att06
03:16:01  11  ,att07 gbp_att07
03:16:01  12  ,att08 gbp_att08
03:16:01  13  ,att09 gbp_att09
03:16:01  14  ,att10 gbp_att10
03:16:01  15  ,att11 gbp_att11
03:16:01  16  ,att12 gbp_att12
03:16:01  17  ,att13 gbp_att13
03:16:01  18  ,att14 gbp_att14
03:16:01  19  ,att15 gbp_att15
03:16:01  20  ,att16 gbp_att16
03:16:01  21  ,att17 gbp_att17
03:16:01  22  ,att18 gbp_att18
03:16:01  23  ,att19 gbp_att19
03:16:01  24  ,att20 gbp_att20
03:16:01  25  ,att21 gbp_att21
03:16:01  26  ,att22 gbp_att22
03:16:01  27  ,att23 gbp_att23
03:16:01  28  ,att24 gbp_att24
03:16:01  29  ,att25 gbp_att25
03:16:01  30  ,att26 gbp_att26
03:16:01  31  ,att27 gbp_att27
03:16:01  32  ,att28 gbp_att28
03:16:01  33  ,att29 gbp_att29
03:16:01  34  ,att30 gbp_att30
03:16:01  35  ,att31 gbp_att31
03:16:01  36  ,att32 gbp_att32
03:16:01  37  ,att33 gbp_att33
03:16:01  38  ,att34 gbp_att34
03:16:01  39  ,att35 gbp_att35
03:16:01  40  ,att36 gbp_att36
03:16:01  41  ,att37 gbp_att37
03:16:01  42  FROM svm6162
03:16:01  43  /

Table created.

Elapsed: 00:00:00.20
03:16:01 SQL> 
03:16:01 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
03:16:02 SQL> 
03:16:02 SQL> -- rpt
03:16:02 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19258

Elapsed: 00:00:00.85
03:16:03 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19258

Elapsed: 00:00:00.00
03:16:03 SQL> 
03:16:03 SQL> --
03:16:03 SQL> -- jpy610.sql
03:16:03 SQL> --
03:16:03 SQL> 
03:16:03 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:16:03 SQL> 
03:16:03 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.41
03:16:03 SQL> 
03:16:03 SQL> -- I created di5min here:
03:16:03 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:16:03 SQL> 
03:16:03 SQL> CREATE OR REPLACE VIEW svm6102 AS
03:16:03   2  SELECT
03:16:03   3  pair
03:16:03   4  ,ydate
03:16:03   5  ,prdate
03:16:03   6  ,rownum rnum -- acts as t in my time-series
03:16:03   7  ,clse
03:16:03   8  -- Derive a bunch of attributes from clse, the latest price:
03:16:03   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
03:16:03  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
03:16:03  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
03:16:03  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
03:16:03  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
03:16:03  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
03:16:03  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
03:16:03  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
03:16:03  17  --
03:16:03  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
03:16:03  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
03:16:03  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
03:16:03  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
03:16:03  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
03:16:03  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
03:16:03  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
03:16:03  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
03:16:03  26  --
03:16:03  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
03:16:03  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
03:16:03  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
03:16:03  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
03:16:03  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
03:16:03  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
03:16:03  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
03:16:03  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
03:16:03  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
03:16:03  36  FROM di5min WHERE pair LIKE'%jpy%'
03:16:03  37  AND ydate > sysdate - 95
03:16:03  38  ORDER BY ydate
03:16:03  39  /

View created.

Elapsed: 00:00:00.05
03:16:03 SQL> 
03:16:03 SQL> -- rpt
03:16:03 SQL> 
03:16:03 SQL> SELECT
03:16:03   2  pair
03:16:03   3  ,COUNT(pair)
03:16:03   4  ,MIN(clse),MAX(clse)
03:16:03   5  ,MIN(avg6),MAX(avg6)
03:16:03   6  ,MIN(ydate),MAX(ydate)
03:16:03   7  FROM svm6102
03:16:03   8  GROUP BY pair
03:16:03   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19256	 80.25	   84.485 80.3595205 84.3105479 2010-09-30 03:20:01 2011-01-03 03:10:00

Elapsed: 00:00:00.91
03:16:04 SQL> 
03:16:04 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:16:04 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.20
03:16:04 SQL> CREATE TABLE svm6122 COMPRESS AS
03:16:04   2  SELECT
03:16:04   3  pair
03:16:04   4  ,ydate
03:16:04   5  ,prdate
03:16:04   6  ,clse
03:16:04   7  -- g6 is important. I want to predict g6:
03:16:04   8  ,ld6 - clse g6
03:16:04   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
03:16:04  10  -- I want more attributes from the ones I derived above:
03:16:04  11  -- clse relation to moving-min
03:16:04  12  ,clse-min4  cm4
03:16:04  13  ,clse-min6  cm6
03:16:04  14  ,clse-min8  cm8
03:16:04  15  ,clse-min10 cm10
03:16:04  16  ,clse-min12 cm12
03:16:04  17  ,clse-min14 cm14
03:16:04  18  ,clse-min16 cm16
03:16:04  19  ,clse-min18 cm18
03:16:04  20  -- clse relation to moving-avg
03:16:04  21  ,clse-avg4  ca4
03:16:04  22  ,clse-avg6  ca6
03:16:04  23  ,clse-avg8  ca8
03:16:04  24  ,clse-avg10 ca10
03:16:04  25  ,clse-avg12 ca12
03:16:04  26  ,clse-avg14 ca14
03:16:04  27  ,clse-avg16 ca16
03:16:04  28  ,clse-avg18 ca18
03:16:04  29  -- clse relation to moving-max
03:16:04  30  ,clse-max4  cx4
03:16:04  31  ,clse-max6  cx6
03:16:04  32  ,clse-max8  cx8
03:16:04  33  ,clse-max10 cx10
03:16:04  34  ,clse-max12 cx12
03:16:04  35  ,clse-max14 cx14
03:16:04  36  ,clse-max16 cx16
03:16:04  37  ,clse-max18 cx18
03:16:04  38  -- Derive more attributes.
03:16:04  39  -- I want to use CORR() here to help SVM see the shape of the series.
03:16:04  40  -- But COVAR_POP is more stable:
03:16:04  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
03:16:04  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:16:04  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:16:04  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:16:04  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:16:04  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:16:04  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:16:04  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:16:04  49  -- Derive date related attributes:
03:16:04  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:16:04  51  ,0+TO_CHAR(ydate,'D')d
03:16:04  52  ,0+TO_CHAR(ydate,'W')w
03:16:04  53  -- mpm stands for minutes-past-midnight:
03:16:04  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:16:04  55  -- mph stands for minutes-past-hour:
03:16:04  56  ,0+TO_CHAR(ydate,'MI')mph
03:16:04  57  FROM svm6102
03:16:04  58  ORDER BY ydate
03:16:04  59  /

Table created.

Elapsed: 00:00:02.11
03:16:06 SQL> 
03:16:06 SQL> -- rpt
03:16:06 SQL> 
03:16:06 SQL> SELECT
03:16:06   2  pair
03:16:06   3  ,COUNT(pair)
03:16:06   4  ,MIN(clse),MAX(clse)
03:16:06   5  ,MIN(ydate),MAX(ydate)
03:16:06   6  FROM svm6122
03:16:06   7  GROUP BY pair
03:16:06   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19256	 80.25	   84.485 2010-09-30 03:20:01 2011-01-03 03:10:00

Elapsed: 00:00:00.04
03:16:06 SQL> 
03:16:06 SQL> -- Prepare for derivation of NTILE based params:
03:16:06 SQL> 
03:16:06 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
03:16:06 SQL> CREATE TABLE svm6142 COMPRESS AS
03:16:06   2  SELECT
03:16:06   3  pair
03:16:06   4  ,ydate
03:16:06   5  ,prdate
03:16:06   6  ,clse
03:16:06   7  ,g6
03:16:06   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
03:16:06   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
03:16:06  10  ,CASE WHEN trend IS NULL THEN 1
03:16:06  11  	    WHEN trend =0      THEN 1
03:16:06  12  	    ELSE trend END trend
03:16:06  13  ,cm4
03:16:06  14  ,cm6
03:16:06  15  ,cm8
03:16:06  16  ,cm10
03:16:06  17  ,cm12
03:16:06  18  ,cm14
03:16:06  19  ,cm16
03:16:06  20  ,cm18
03:16:06  21  --
03:16:06  22  ,ca4
03:16:06  23  ,ca6
03:16:06  24  ,ca8
03:16:06  25  ,ca10
03:16:06  26  ,ca12
03:16:06  27  ,ca14
03:16:06  28  ,ca16
03:16:06  29  ,ca18
03:16:06  30  --
03:16:06  31  ,cx4
03:16:06  32  ,cx6
03:16:06  33  ,cx8
03:16:06  34  ,cx10
03:16:06  35  ,cx12
03:16:06  36  ,cx14
03:16:06  37  ,cx16
03:16:06  38  ,cx18
03:16:06  39  --
03:16:06  40  ,crr4
03:16:06  41  ,crr6
03:16:06  42  ,crr8
03:16:06  43  ,crr10
03:16:06  44  ,crr12
03:16:06  45  ,crr14
03:16:06  46  ,crr16
03:16:06  47  ,crr18
03:16:06  48  --
03:16:06  49  ,hh
03:16:06  50  ,d
03:16:06  51  ,w
03:16:06  52  ,mpm
03:16:06  53  ,mph
03:16:06  54  FROM svm6122
03:16:06  55  ORDER BY ydate
03:16:06  56  /

Table created.

Elapsed: 00:00:00.38
03:16:07 SQL> 
03:16:07 SQL> -- rpt
03:16:07 SQL> 
03:16:07 SQL> SELECT
03:16:07   2  pair
03:16:07   3  ,trend
03:16:07   4  ,gatt
03:16:07   5  ,COUNT(pair)
03:16:07   6  ,AVG(g6)
03:16:07   7  FROM svm6142
03:16:07   8  GROUP BY pair,trend,gatt
03:16:07   9  ORDER BY pair,trend,gatt
03:16:07  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5232 -.16577469
usd_jpy 	-1 up	      4867 .164875277
usd_jpy 	-1		18
usd_jpy 	 1 nup	      4969 -.15583093
usd_jpy 	 1 up	      4116 .166146221
usd_jpy 	 1		54

6 rows selected.

Elapsed: 00:00:00.05
03:16:07 SQL> 
03:16:07 SQL> 
03:16:07 SQL> -- Derive NTILE based params:
03:16:07 SQL> 
03:16:07 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.19
03:16:07 SQL> CREATE TABLE svm6162 COMPRESS AS
03:16:07   2  SELECT
03:16:07   3  pair
03:16:07   4  ,ydate
03:16:07   5  ,prdate
03:16:07   6  ,clse
03:16:07   7  ,g6
03:16:07   8  ,gatt
03:16:07   9  ,gattn
03:16:07  10  ,trend
03:16:07  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
03:16:07  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
03:16:07  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
03:16:07  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
03:16:07  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
03:16:07  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
03:16:07  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
03:16:07  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
03:16:07  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
03:16:07  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
03:16:07  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
03:16:07  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
03:16:07  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
03:16:07  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
03:16:07  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
03:16:07  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
03:16:07  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
03:16:07  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
03:16:07  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
03:16:07  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
03:16:07  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
03:16:07  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
03:16:07  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
03:16:07  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
03:16:07  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
03:16:07  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
03:16:07  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
03:16:07  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
03:16:07  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
03:16:07  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
03:16:07  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
03:16:07  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
03:16:07  43  ,hh  att32
03:16:07  44  ,d   att33
03:16:07  45  ,w   att34
03:16:07  46  ,mpm att35
03:16:07  47  ,mph att36
03:16:07  48  ,trend att37
03:16:07  49  FROM svm6142
03:16:07  50  ORDER BY ydate
03:16:07  51  /

Table created.

Elapsed: 00:00:04.71
03:16:12 SQL> 
03:16:12 SQL> -- rpt
03:16:12 SQL> 
03:16:12 SQL> SELECT
03:16:12   2  pair
03:16:12   3  ,trend
03:16:12   4  ,gatt
03:16:12   5  ,COUNT(pair)
03:16:12   6  ,AVG(g6)
03:16:12   7  FROM svm6162
03:16:12   8  GROUP BY pair,trend,gatt
03:16:12   9  ORDER BY pair,trend,gatt
03:16:12  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5232 -.16577469
usd_jpy 	-1 up	      4867 .164875277
usd_jpy 	-1		18
usd_jpy 	 1 nup	      4969 -.15583093
usd_jpy 	 1 up	      4116 .166146221
usd_jpy 	 1		54

6 rows selected.

Elapsed: 00:00:00.02
03:16:12 SQL> 
03:16:12 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.14
03:16:12 SQL> CREATE TABLE modsrc COMPRESS AS
03:16:12   2  SELECT
03:16:12   3  pair
03:16:12   4  ,ydate
03:16:12   5  ,prdate
03:16:12   6  ,trend
03:16:12   7  ,g6
03:16:12   8  ,gatt
03:16:12   9  ,gattn
03:16:12  10  FROM svm6162
03:16:12  11  /

Table created.

Elapsed: 00:00:00.07
03:16:12 SQL> 
03:16:12 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:01.25
03:16:13 SQL> 
03:16:13 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.11
03:16:13 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
03:16:13   2  SELECT
03:16:13   3  ydate
03:16:13   4  ,trend jpy_trend
03:16:13   5  ,g6    jpy_g6
03:16:13   6  ,gatt  jpy_gatt
03:16:13   7  ,gattn jpy_gattn
03:16:13   8  FROM modsrc
03:16:13   9  /

Table created.

Elapsed: 00:00:00.09
03:16:13 SQL> 
03:16:13 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
03:16:14 SQL> 
03:16:14 SQL> -- I need a copy of the attributes:
03:16:14 SQL> 
03:16:14 SQL> 
03:16:14 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.04
03:16:14 SQL> CREATE TABLE jpy_att COMPRESS AS
03:16:14   2  SELECT
03:16:14   3  ydate
03:16:14   4  ,att00 jpy_att00
03:16:14   5  ,att01 jpy_att01
03:16:14   6  ,att02 jpy_att02
03:16:14   7  ,att03 jpy_att03
03:16:14   8  ,att04 jpy_att04
03:16:14   9  ,att05 jpy_att05
03:16:14  10  ,att06 jpy_att06
03:16:14  11  ,att07 jpy_att07
03:16:14  12  ,att08 jpy_att08
03:16:14  13  ,att09 jpy_att09
03:16:14  14  ,att10 jpy_att10
03:16:14  15  ,att11 jpy_att11
03:16:14  16  ,att12 jpy_att12
03:16:14  17  ,att13 jpy_att13
03:16:14  18  ,att14 jpy_att14
03:16:14  19  ,att15 jpy_att15
03:16:14  20  ,att16 jpy_att16
03:16:14  21  ,att17 jpy_att17
03:16:14  22  ,att18 jpy_att18
03:16:14  23  ,att19 jpy_att19
03:16:14  24  ,att20 jpy_att20
03:16:14  25  ,att21 jpy_att21
03:16:14  26  ,att22 jpy_att22
03:16:14  27  ,att23 jpy_att23
03:16:14  28  ,att24 jpy_att24
03:16:14  29  ,att25 jpy_att25
03:16:14  30  ,att26 jpy_att26
03:16:14  31  ,att27 jpy_att27
03:16:14  32  ,att28 jpy_att28
03:16:14  33  ,att29 jpy_att29
03:16:14  34  ,att30 jpy_att30
03:16:14  35  ,att31 jpy_att31
03:16:14  36  ,att32 jpy_att32
03:16:14  37  ,att33 jpy_att33
03:16:14  38  ,att34 jpy_att34
03:16:14  39  ,att35 jpy_att35
03:16:14  40  ,att36 jpy_att36
03:16:14  41  ,att37 jpy_att37
03:16:14  42  FROM svm6162
03:16:14  43  /

Table created.

Elapsed: 00:00:00.15
03:16:14 SQL> 
03:16:14 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
03:16:14 SQL> 
03:16:14 SQL> -- rpt
03:16:14 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.86
03:16:15 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.01
03:16:15 SQL> 
03:16:15 SQL> --
03:16:15 SQL> -- cad610.sql
03:16:15 SQL> --
03:16:15 SQL> 
03:16:15 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:16:15 SQL> 
03:16:15 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.51
03:16:16 SQL> 
03:16:16 SQL> -- I created di5min here:
03:16:16 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:16:16 SQL> 
03:16:16 SQL> CREATE OR REPLACE VIEW svm6102 AS
03:16:16   2  SELECT
03:16:16   3  pair
03:16:16   4  ,ydate
03:16:16   5  ,prdate
03:16:16   6  ,rownum rnum -- acts as t in my time-series
03:16:16   7  ,clse
03:16:16   8  -- Derive a bunch of attributes from clse, the latest price:
03:16:16   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
03:16:16  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
03:16:16  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
03:16:16  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
03:16:16  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
03:16:16  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
03:16:16  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
03:16:16  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
03:16:16  17  --
03:16:16  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
03:16:16  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
03:16:16  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
03:16:16  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
03:16:16  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
03:16:16  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
03:16:16  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
03:16:16  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
03:16:16  26  --
03:16:16  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
03:16:16  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
03:16:16  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
03:16:16  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
03:16:16  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
03:16:16  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
03:16:16  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
03:16:16  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
03:16:16  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
03:16:16  36  FROM di5min WHERE pair LIKE'%cad%'
03:16:16  37  AND ydate > sysdate - 95
03:16:16  38  ORDER BY ydate
03:16:16  39  /

View created.

Elapsed: 00:00:00.04
03:16:16 SQL> 
03:16:16 SQL> -- rpt
03:16:16 SQL> 
03:16:16 SQL> SELECT
03:16:16   2  pair
03:16:16   3  ,COUNT(pair)
03:16:16   4  ,MIN(clse),MAX(clse)
03:16:16   5  ,MIN(avg6),MAX(avg6)
03:16:16   6  ,MIN(ydate),MAX(ydate)
03:16:16   7  FROM svm6102
03:16:16   8  GROUP BY pair
03:16:16   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19256    .992825	   1.0355 .994370719 1.03369054 2010-09-30 03:20:01 2011-01-03 03:10:00

Elapsed: 00:00:00.85
03:16:17 SQL> 
03:16:17 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:16:17 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.25
03:16:17 SQL> CREATE TABLE svm6122 COMPRESS AS
03:16:17   2  SELECT
03:16:17   3  pair
03:16:17   4  ,ydate
03:16:17   5  ,prdate
03:16:17   6  ,clse
03:16:17   7  -- g6 is important. I want to predict g6:
03:16:17   8  ,ld6 - clse g6
03:16:17   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
03:16:17  10  -- I want more attributes from the ones I derived above:
03:16:17  11  -- clse relation to moving-min
03:16:17  12  ,clse-min4  cm4
03:16:17  13  ,clse-min6  cm6
03:16:17  14  ,clse-min8  cm8
03:16:17  15  ,clse-min10 cm10
03:16:17  16  ,clse-min12 cm12
03:16:17  17  ,clse-min14 cm14
03:16:17  18  ,clse-min16 cm16
03:16:17  19  ,clse-min18 cm18
03:16:17  20  -- clse relation to moving-avg
03:16:17  21  ,clse-avg4  ca4
03:16:17  22  ,clse-avg6  ca6
03:16:17  23  ,clse-avg8  ca8
03:16:17  24  ,clse-avg10 ca10
03:16:17  25  ,clse-avg12 ca12
03:16:17  26  ,clse-avg14 ca14
03:16:17  27  ,clse-avg16 ca16
03:16:17  28  ,clse-avg18 ca18
03:16:17  29  -- clse relation to moving-max
03:16:17  30  ,clse-max4  cx4
03:16:17  31  ,clse-max6  cx6
03:16:17  32  ,clse-max8  cx8
03:16:17  33  ,clse-max10 cx10
03:16:17  34  ,clse-max12 cx12
03:16:17  35  ,clse-max14 cx14
03:16:17  36  ,clse-max16 cx16
03:16:17  37  ,clse-max18 cx18
03:16:17  38  -- Derive more attributes.
03:16:17  39  -- I want to use CORR() here to help SVM see the shape of the series.
03:16:17  40  -- But COVAR_POP is more stable:
03:16:17  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
03:16:17  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:16:17  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:16:17  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:16:17  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:16:17  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:16:17  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:16:17  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:16:17  49  -- Derive date related attributes:
03:16:17  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:16:17  51  ,0+TO_CHAR(ydate,'D')d
03:16:17  52  ,0+TO_CHAR(ydate,'W')w
03:16:17  53  -- mpm stands for minutes-past-midnight:
03:16:17  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:16:17  55  -- mph stands for minutes-past-hour:
03:16:17  56  ,0+TO_CHAR(ydate,'MI')mph
03:16:17  57  FROM svm6102
03:16:17  58  ORDER BY ydate
03:16:17  59  /

Table created.

Elapsed: 00:00:02.01
03:16:19 SQL> 
03:16:19 SQL> -- rpt
03:16:19 SQL> 
03:16:19 SQL> SELECT
03:16:19   2  pair
03:16:19   3  ,COUNT(pair)
03:16:19   4  ,MIN(clse),MAX(clse)
03:16:19   5  ,MIN(ydate),MAX(ydate)
03:16:19   6  FROM svm6122
03:16:19   7  GROUP BY pair
03:16:19   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19256    .992825	   1.0355 2010-09-30 03:20:01 2011-01-03 03:10:00

Elapsed: 00:00:00.13
03:16:19 SQL> 
03:16:19 SQL> -- Prepare for derivation of NTILE based params:
03:16:19 SQL> 
03:16:19 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.26
03:16:19 SQL> CREATE TABLE svm6142 COMPRESS AS
03:16:19   2  SELECT
03:16:19   3  pair
03:16:19   4  ,ydate
03:16:19   5  ,prdate
03:16:19   6  ,clse
03:16:19   7  ,g6
03:16:19   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
03:16:19   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
03:16:19  10  ,CASE WHEN trend IS NULL THEN 1
03:16:19  11  	    WHEN trend =0      THEN 1
03:16:19  12  	    ELSE trend END trend
03:16:19  13  ,cm4
03:16:19  14  ,cm6
03:16:19  15  ,cm8
03:16:19  16  ,cm10
03:16:19  17  ,cm12
03:16:19  18  ,cm14
03:16:19  19  ,cm16
03:16:19  20  ,cm18
03:16:19  21  --
03:16:19  22  ,ca4
03:16:19  23  ,ca6
03:16:19  24  ,ca8
03:16:19  25  ,ca10
03:16:19  26  ,ca12
03:16:19  27  ,ca14
03:16:19  28  ,ca16
03:16:19  29  ,ca18
03:16:19  30  --
03:16:19  31  ,cx4
03:16:19  32  ,cx6
03:16:19  33  ,cx8
03:16:19  34  ,cx10
03:16:19  35  ,cx12
03:16:19  36  ,cx14
03:16:19  37  ,cx16
03:16:19  38  ,cx18
03:16:19  39  --
03:16:19  40  ,crr4
03:16:19  41  ,crr6
03:16:19  42  ,crr8
03:16:19  43  ,crr10
03:16:19  44  ,crr12
03:16:19  45  ,crr14
03:16:19  46  ,crr16
03:16:19  47  ,crr18
03:16:19  48  --
03:16:19  49  ,hh
03:16:19  50  ,d
03:16:19  51  ,w
03:16:19  52  ,mpm
03:16:19  53  ,mph
03:16:19  54  FROM svm6122
03:16:19  55  ORDER BY ydate
03:16:19  56  /

Table created.

Elapsed: 00:00:00.37
03:16:20 SQL> 
03:16:20 SQL> -- rpt
03:16:20 SQL> 
03:16:20 SQL> SELECT
03:16:20   2  pair
03:16:20   3  ,trend
03:16:20   4  ,gatt
03:16:20   5  ,COUNT(pair)
03:16:20   6  ,AVG(g6)
03:16:20   7  FROM svm6142
03:16:20   8  GROUP BY pair,trend,gatt
03:16:20   9  ORDER BY pair,trend,gatt
03:16:20  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7318 -.00132275
usd_cad 	-1 up	      3000 .003056492
usd_cad 	-1		58
usd_cad 	 1 nup	      6561 -.00162905
usd_cad 	 1 up	      2305 .003653973
usd_cad 	 1		14

6 rows selected.

Elapsed: 00:00:00.05
03:16:20 SQL> 
03:16:20 SQL> 
03:16:20 SQL> -- Derive NTILE based params:
03:16:20 SQL> 
03:16:20 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.11
03:16:20 SQL> CREATE TABLE svm6162 COMPRESS AS
03:16:20   2  SELECT
03:16:20   3  pair
03:16:20   4  ,ydate
03:16:20   5  ,prdate
03:16:20   6  ,clse
03:16:20   7  ,g6
03:16:20   8  ,gatt
03:16:20   9  ,gattn
03:16:20  10  ,trend
03:16:20  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
03:16:20  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
03:16:20  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
03:16:20  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
03:16:20  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
03:16:20  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
03:16:20  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
03:16:20  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
03:16:20  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
03:16:20  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
03:16:20  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
03:16:20  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
03:16:20  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
03:16:20  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
03:16:20  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
03:16:20  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
03:16:20  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
03:16:20  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
03:16:20  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
03:16:20  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
03:16:20  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
03:16:20  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
03:16:20  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
03:16:20  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
03:16:20  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
03:16:20  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
03:16:20  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
03:16:20  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
03:16:20  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
03:16:20  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
03:16:20  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
03:16:20  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
03:16:20  43  ,hh  att32
03:16:20  44  ,d   att33
03:16:20  45  ,w   att34
03:16:20  46  ,mpm att35
03:16:20  47  ,mph att36
03:16:20  48  ,trend att37
03:16:20  49  FROM svm6142
03:16:20  50  ORDER BY ydate
03:16:20  51  /

Table created.

Elapsed: 00:00:04.68
03:16:24 SQL> 
03:16:24 SQL> -- rpt
03:16:24 SQL> 
03:16:24 SQL> SELECT
03:16:24   2  pair
03:16:24   3  ,trend
03:16:24   4  ,gatt
03:16:24   5  ,COUNT(pair)
03:16:24   6  ,AVG(g6)
03:16:24   7  FROM svm6162
03:16:24   8  GROUP BY pair,trend,gatt
03:16:24   9  ORDER BY pair,trend,gatt
03:16:24  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7318 -.00132275
usd_cad 	-1 up	      3000 .003056492
usd_cad 	-1		58
usd_cad 	 1 nup	      6561 -.00162905
usd_cad 	 1 up	      2305 .003653973
usd_cad 	 1		14

6 rows selected.

Elapsed: 00:00:00.02
03:16:24 SQL> 
03:16:24 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.11
03:16:25 SQL> CREATE TABLE modsrc COMPRESS AS
03:16:25   2  SELECT
03:16:25   3  pair
03:16:25   4  ,ydate
03:16:25   5  ,prdate
03:16:25   6  ,trend
03:16:25   7  ,g6
03:16:25   8  ,gatt
03:16:25   9  ,gattn
03:16:25  10  FROM svm6162
03:16:25  11  /

Table created.

Elapsed: 00:00:00.10
03:16:25 SQL> 
03:16:25 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
03:16:25 SQL> 
03:16:25 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
03:16:25 SQL> CREATE TABLE cad_ms610 COMPRESS AS
03:16:25   2  SELECT
03:16:25   3  ydate
03:16:25   4  ,trend cad_trend
03:16:25   5  ,g6    cad_g6
03:16:25   6  ,gatt  cad_gatt
03:16:25   7  ,gattn cad_gattn
03:16:25   8  FROM modsrc
03:16:25   9  /

Table created.

Elapsed: 00:00:00.06
03:16:25 SQL> 
03:16:25 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
03:16:25 SQL> 
03:16:25 SQL> -- I need a copy of the attributes:
03:16:25 SQL> 
03:16:25 SQL> 
03:16:25 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.05
03:16:25 SQL> CREATE TABLE cad_att COMPRESS AS
03:16:25   2  SELECT
03:16:25   3  ydate
03:16:25   4  ,att00 cad_att00
03:16:25   5  ,att01 cad_att01
03:16:25   6  ,att02 cad_att02
03:16:25   7  ,att03 cad_att03
03:16:25   8  ,att04 cad_att04
03:16:25   9  ,att05 cad_att05
03:16:25  10  ,att06 cad_att06
03:16:25  11  ,att07 cad_att07
03:16:25  12  ,att08 cad_att08
03:16:25  13  ,att09 cad_att09
03:16:25  14  ,att10 cad_att10
03:16:25  15  ,att11 cad_att11
03:16:25  16  ,att12 cad_att12
03:16:25  17  ,att13 cad_att13
03:16:25  18  ,att14 cad_att14
03:16:25  19  ,att15 cad_att15
03:16:25  20  ,att16 cad_att16
03:16:25  21  ,att17 cad_att17
03:16:25  22  ,att18 cad_att18
03:16:25  23  ,att19 cad_att19
03:16:25  24  ,att20 cad_att20
03:16:25  25  ,att21 cad_att21
03:16:25  26  ,att22 cad_att22
03:16:25  27  ,att23 cad_att23
03:16:25  28  ,att24 cad_att24
03:16:25  29  ,att25 cad_att25
03:16:25  30  ,att26 cad_att26
03:16:25  31  ,att27 cad_att27
03:16:25  32  ,att28 cad_att28
03:16:25  33  ,att29 cad_att29
03:16:25  34  ,att30 cad_att30
03:16:25  35  ,att31 cad_att31
03:16:25  36  ,att32 cad_att32
03:16:25  37  ,att33 cad_att33
03:16:25  38  ,att34 cad_att34
03:16:25  39  ,att35 cad_att35
03:16:25  40  ,att36 cad_att36
03:16:25  41  ,att37 cad_att37
03:16:25  42  FROM svm6162
03:16:25  43  /

Table created.

Elapsed: 00:00:00.17
03:16:25 SQL> 
03:16:25 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.42
03:16:26 SQL> 
03:16:26 SQL> -- rpt
03:16:26 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.81
03:16:27 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.00
03:16:27 SQL> 
03:16:27 SQL> --
03:16:27 SQL> -- chf610.sql
03:16:27 SQL> --
03:16:27 SQL> 
03:16:27 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:16:27 SQL> 
03:16:27 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.35
03:16:27 SQL> 
03:16:27 SQL> -- I created di5min here:
03:16:27 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:16:27 SQL> 
03:16:27 SQL> CREATE OR REPLACE VIEW svm6102 AS
03:16:27   2  SELECT
03:16:27   3  pair
03:16:27   4  ,ydate
03:16:27   5  ,prdate
03:16:27   6  ,rownum rnum -- acts as t in my time-series
03:16:27   7  ,clse
03:16:27   8  -- Derive a bunch of attributes from clse, the latest price:
03:16:27   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
03:16:27  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
03:16:27  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
03:16:27  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
03:16:27  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
03:16:27  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
03:16:27  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
03:16:27  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
03:16:27  17  --
03:16:27  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
03:16:27  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
03:16:27  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
03:16:27  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
03:16:27  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
03:16:27  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
03:16:27  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
03:16:27  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
03:16:27  26  --
03:16:27  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
03:16:27  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
03:16:27  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
03:16:27  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
03:16:27  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
03:16:27  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
03:16:27  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
03:16:27  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
03:16:27  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
03:16:27  36  FROM di5min WHERE pair LIKE'%chf%'
03:16:27  37  AND ydate > sysdate - 95
03:16:27  38  ORDER BY ydate
03:16:27  39  /

View created.

Elapsed: 00:00:00.05
03:16:27 SQL> 
03:16:27 SQL> -- rpt
03:16:27 SQL> 
03:16:27 SQL> SELECT
03:16:27   2  pair
03:16:27   3  ,COUNT(pair)
03:16:27   4  ,MIN(clse),MAX(clse)
03:16:27   5  ,MIN(avg6),MAX(avg6)
03:16:27   6  ,MIN(ydate),MAX(ydate)
03:16:27   7  FROM svm6102
03:16:27   8  GROUP BY pair
03:16:27   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19259    .931675	  1.00635 .933969692 1.00498151 2010-09-30 03:20:01 2011-01-03 03:10:00

Elapsed: 00:00:00.88
03:16:28 SQL> 
03:16:28 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:16:28 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.16
03:16:28 SQL> CREATE TABLE svm6122 COMPRESS AS
03:16:28   2  SELECT
03:16:28   3  pair
03:16:28   4  ,ydate
03:16:28   5  ,prdate
03:16:28   6  ,clse
03:16:28   7  -- g6 is important. I want to predict g6:
03:16:28   8  ,ld6 - clse g6
03:16:28   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
03:16:28  10  -- I want more attributes from the ones I derived above:
03:16:28  11  -- clse relation to moving-min
03:16:28  12  ,clse-min4  cm4
03:16:28  13  ,clse-min6  cm6
03:16:28  14  ,clse-min8  cm8
03:16:28  15  ,clse-min10 cm10
03:16:28  16  ,clse-min12 cm12
03:16:28  17  ,clse-min14 cm14
03:16:28  18  ,clse-min16 cm16
03:16:28  19  ,clse-min18 cm18
03:16:28  20  -- clse relation to moving-avg
03:16:28  21  ,clse-avg4  ca4
03:16:28  22  ,clse-avg6  ca6
03:16:28  23  ,clse-avg8  ca8
03:16:28  24  ,clse-avg10 ca10
03:16:28  25  ,clse-avg12 ca12
03:16:28  26  ,clse-avg14 ca14
03:16:28  27  ,clse-avg16 ca16
03:16:28  28  ,clse-avg18 ca18
03:16:28  29  -- clse relation to moving-max
03:16:28  30  ,clse-max4  cx4
03:16:28  31  ,clse-max6  cx6
03:16:28  32  ,clse-max8  cx8
03:16:28  33  ,clse-max10 cx10
03:16:28  34  ,clse-max12 cx12
03:16:28  35  ,clse-max14 cx14
03:16:28  36  ,clse-max16 cx16
03:16:28  37  ,clse-max18 cx18
03:16:28  38  -- Derive more attributes.
03:16:28  39  -- I want to use CORR() here to help SVM see the shape of the series.
03:16:28  40  -- But COVAR_POP is more stable:
03:16:28  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
03:16:28  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:16:28  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:16:28  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:16:28  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:16:28  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:16:28  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:16:28  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:16:28  49  -- Derive date related attributes:
03:16:28  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:16:28  51  ,0+TO_CHAR(ydate,'D')d
03:16:28  52  ,0+TO_CHAR(ydate,'W')w
03:16:28  53  -- mpm stands for minutes-past-midnight:
03:16:28  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:16:28  55  -- mph stands for minutes-past-hour:
03:16:28  56  ,0+TO_CHAR(ydate,'MI')mph
03:16:28  57  FROM svm6102
03:16:28  58  ORDER BY ydate
03:16:28  59  /

Table created.

Elapsed: 00:00:02.01
03:16:30 SQL> 
03:16:30 SQL> -- rpt
03:16:30 SQL> 
03:16:30 SQL> SELECT
03:16:30   2  pair
03:16:30   3  ,COUNT(pair)
03:16:30   4  ,MIN(clse),MAX(clse)
03:16:30   5  ,MIN(ydate),MAX(ydate)
03:16:30   6  FROM svm6122
03:16:30   7  GROUP BY pair
03:16:30   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19259    .931675	  1.00635 2010-09-30 03:20:01 2011-01-03 03:10:00

Elapsed: 00:00:00.04
03:16:30 SQL> 
03:16:30 SQL> -- Prepare for derivation of NTILE based params:
03:16:30 SQL> 
03:16:30 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.18
03:16:30 SQL> CREATE TABLE svm6142 COMPRESS AS
03:16:30   2  SELECT
03:16:30   3  pair
03:16:30   4  ,ydate
03:16:30   5  ,prdate
03:16:30   6  ,clse
03:16:30   7  ,g6
03:16:30   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
03:16:30   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
03:16:30  10  ,CASE WHEN trend IS NULL THEN 1
03:16:30  11  	    WHEN trend =0      THEN 1
03:16:30  12  	    ELSE trend END trend
03:16:30  13  ,cm4
03:16:30  14  ,cm6
03:16:30  15  ,cm8
03:16:30  16  ,cm10
03:16:30  17  ,cm12
03:16:30  18  ,cm14
03:16:30  19  ,cm16
03:16:30  20  ,cm18
03:16:30  21  --
03:16:30  22  ,ca4
03:16:30  23  ,ca6
03:16:30  24  ,ca8
03:16:30  25  ,ca10
03:16:30  26  ,ca12
03:16:30  27  ,ca14
03:16:30  28  ,ca16
03:16:30  29  ,ca18
03:16:30  30  --
03:16:30  31  ,cx4
03:16:30  32  ,cx6
03:16:30  33  ,cx8
03:16:30  34  ,cx10
03:16:30  35  ,cx12
03:16:30  36  ,cx14
03:16:30  37  ,cx16
03:16:30  38  ,cx18
03:16:30  39  --
03:16:30  40  ,crr4
03:16:30  41  ,crr6
03:16:30  42  ,crr8
03:16:30  43  ,crr10
03:16:30  44  ,crr12
03:16:30  45  ,crr14
03:16:30  46  ,crr16
03:16:30  47  ,crr18
03:16:30  48  --
03:16:30  49  ,hh
03:16:30  50  ,d
03:16:30  51  ,w
03:16:30  52  ,mpm
03:16:30  53  ,mph
03:16:30  54  FROM svm6122
03:16:30  55  ORDER BY ydate
03:16:30  56  /

Table created.

Elapsed: 00:00:00.37
03:16:31 SQL> 
03:16:31 SQL> -- rpt
03:16:31 SQL> 
03:16:31 SQL> SELECT
03:16:31   2  pair
03:16:31   3  ,trend
03:16:31   4  ,gatt
03:16:31   5  ,COUNT(pair)
03:16:31   6  ,AVG(g6)
03:16:31   7  FROM svm6142
03:16:31   8  GROUP BY pair,trend,gatt
03:16:31   9  ORDER BY pair,trend,gatt
03:16:31  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7216 -.00200044
usd_chf 	-1 up	      3083 .003952444
usd_chf 	-1		22
usd_chf 	 1 nup	      6338 -.00161787
usd_chf 	 1 up	      2550 .003701194
usd_chf 	 1		50

6 rows selected.

Elapsed: 00:00:00.04
03:16:31 SQL> 
03:16:31 SQL> 
03:16:31 SQL> -- Derive NTILE based params:
03:16:31 SQL> 
03:16:31 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
03:16:31 SQL> CREATE TABLE svm6162 COMPRESS AS
03:16:31   2  SELECT
03:16:31   3  pair
03:16:31   4  ,ydate
03:16:31   5  ,prdate
03:16:31   6  ,clse
03:16:31   7  ,g6
03:16:31   8  ,gatt
03:16:31   9  ,gattn
03:16:31  10  ,trend
03:16:31  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
03:16:31  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
03:16:31  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
03:16:31  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
03:16:31  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
03:16:31  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
03:16:31  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
03:16:31  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
03:16:31  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
03:16:31  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
03:16:31  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
03:16:31  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
03:16:31  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
03:16:31  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
03:16:31  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
03:16:31  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
03:16:31  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
03:16:31  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
03:16:31  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
03:16:31  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
03:16:31  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
03:16:31  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
03:16:31  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
03:16:31  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
03:16:31  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
03:16:31  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
03:16:31  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
03:16:31  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
03:16:31  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
03:16:31  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
03:16:31  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
03:16:31  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
03:16:31  43  ,hh  att32
03:16:31  44  ,d   att33
03:16:31  45  ,w   att34
03:16:31  46  ,mpm att35
03:16:31  47  ,mph att36
03:16:31  48  ,trend att37
03:16:31  49  FROM svm6142
03:16:31  50  ORDER BY ydate
03:16:31  51  /

Table created.

Elapsed: 00:00:04.71
03:16:36 SQL> 
03:16:36 SQL> -- rpt
03:16:36 SQL> 
03:16:36 SQL> SELECT
03:16:36   2  pair
03:16:36   3  ,trend
03:16:36   4  ,gatt
03:16:36   5  ,COUNT(pair)
03:16:36   6  ,AVG(g6)
03:16:36   7  FROM svm6162
03:16:36   8  GROUP BY pair,trend,gatt
03:16:36   9  ORDER BY pair,trend,gatt
03:16:36  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7216 -.00200044
usd_chf 	-1 up	      3083 .003952444
usd_chf 	-1		22
usd_chf 	 1 nup	      6338 -.00161787
usd_chf 	 1 up	      2550 .003701194
usd_chf 	 1		50

6 rows selected.

Elapsed: 00:00:00.03
03:16:36 SQL> 
03:16:36 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.16
03:16:36 SQL> CREATE TABLE modsrc COMPRESS AS
03:16:36   2  SELECT
03:16:36   3  pair
03:16:36   4  ,ydate
03:16:36   5  ,prdate
03:16:36   6  ,trend
03:16:36   7  ,g6
03:16:36   8  ,gatt
03:16:36   9  ,gattn
03:16:36  10  FROM svm6162
03:16:36  11  /

Table created.

Elapsed: 00:00:00.08
03:16:36 SQL> 
03:16:36 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
03:16:36 SQL> 
03:16:36 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
03:16:36 SQL> CREATE TABLE chf_ms610 COMPRESS AS
03:16:36   2  SELECT
03:16:36   3  ydate
03:16:36   4  ,trend chf_trend
03:16:36   5  ,g6    chf_g6
03:16:36   6  ,gatt  chf_gatt
03:16:36   7  ,gattn chf_gattn
03:16:36   8  FROM modsrc
03:16:36   9  /

Table created.

Elapsed: 00:00:00.08
03:16:36 SQL> 
03:16:36 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
03:16:36 SQL> 
03:16:36 SQL> -- I need a copy of the attributes:
03:16:36 SQL> 
03:16:36 SQL> 
03:16:36 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.10
03:16:36 SQL> CREATE TABLE chf_att COMPRESS AS
03:16:36   2  SELECT
03:16:36   3  ydate
03:16:36   4  ,att00 chf_att00
03:16:36   5  ,att01 chf_att01
03:16:36   6  ,att02 chf_att02
03:16:36   7  ,att03 chf_att03
03:16:36   8  ,att04 chf_att04
03:16:36   9  ,att05 chf_att05
03:16:36  10  ,att06 chf_att06
03:16:36  11  ,att07 chf_att07
03:16:36  12  ,att08 chf_att08
03:16:36  13  ,att09 chf_att09
03:16:36  14  ,att10 chf_att10
03:16:36  15  ,att11 chf_att11
03:16:36  16  ,att12 chf_att12
03:16:36  17  ,att13 chf_att13
03:16:36  18  ,att14 chf_att14
03:16:36  19  ,att15 chf_att15
03:16:36  20  ,att16 chf_att16
03:16:36  21  ,att17 chf_att17
03:16:36  22  ,att18 chf_att18
03:16:36  23  ,att19 chf_att19
03:16:36  24  ,att20 chf_att20
03:16:36  25  ,att21 chf_att21
03:16:36  26  ,att22 chf_att22
03:16:36  27  ,att23 chf_att23
03:16:36  28  ,att24 chf_att24
03:16:36  29  ,att25 chf_att25
03:16:36  30  ,att26 chf_att26
03:16:36  31  ,att27 chf_att27
03:16:36  32  ,att28 chf_att28
03:16:36  33  ,att29 chf_att29
03:16:36  34  ,att30 chf_att30
03:16:36  35  ,att31 chf_att31
03:16:36  36  ,att32 chf_att32
03:16:36  37  ,att33 chf_att33
03:16:36  38  ,att34 chf_att34
03:16:36  39  ,att35 chf_att35
03:16:36  40  ,att36 chf_att36
03:16:36  41  ,att37 chf_att37
03:16:36  42  FROM svm6162
03:16:36  43  /

Table created.

Elapsed: 00:00:00.16
03:16:37 SQL> 
03:16:37 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.51
03:16:37 SQL> 
03:16:37 SQL> -- rpt
03:16:37 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.82
03:16:38 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.00
03:16:38 SQL> 
03:16:38 SQL> --
03:16:38 SQL> -- ech610.sql
03:16:38 SQL> --
03:16:38 SQL> 
03:16:38 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:16:38 SQL> 
03:16:38 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
03:16:38 SQL> 
03:16:38 SQL> -- I created di5min here:
03:16:38 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:16:38 SQL> 
03:16:38 SQL> CREATE OR REPLACE VIEW svm6102 AS
03:16:38   2  SELECT
03:16:38   3  pair
03:16:38   4  ,ydate
03:16:38   5  ,prdate
03:16:38   6  ,rownum rnum -- acts as t in my time-series
03:16:38   7  ,clse
03:16:38   8  -- Derive a bunch of attributes from clse, the latest price:
03:16:38   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
03:16:38  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
03:16:38  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
03:16:38  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
03:16:38  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
03:16:38  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
03:16:38  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
03:16:38  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
03:16:38  17  --
03:16:38  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
03:16:38  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
03:16:38  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
03:16:38  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
03:16:38  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
03:16:38  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
03:16:38  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
03:16:38  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
03:16:38  26  --
03:16:38  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
03:16:38  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
03:16:38  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
03:16:38  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
03:16:38  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
03:16:38  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
03:16:38  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
03:16:38  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
03:16:38  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
03:16:38  36  FROM di5min WHERE pair LIKE'%ech%'
03:16:38  37  AND ydate > sysdate - 95
03:16:38  38  ORDER BY ydate
03:16:38  39  /

View created.

Elapsed: 00:00:00.04
03:16:38 SQL> 
03:16:38 SQL> -- rpt
03:16:38 SQL> 
03:16:38 SQL> SELECT
03:16:38   2  pair
03:16:38   3  ,COUNT(pair)
03:16:38   4  ,MIN(clse),MAX(clse)
03:16:38   5  ,MIN(avg6),MAX(avg6)
03:16:38   6  ,MIN(ydate),MAX(ydate)
03:16:38   7  FROM svm6102
03:16:38   8  GROUP BY pair
03:16:38   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19258 1.24213032 1.38284305  1.2432071 1.37986485 2010-09-30 03:20:01 2011-01-03 03:10:00

Elapsed: 00:00:00.77
03:16:39 SQL> 
03:16:39 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:16:39 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.30
03:16:39 SQL> CREATE TABLE svm6122 COMPRESS AS
03:16:39   2  SELECT
03:16:39   3  pair
03:16:39   4  ,ydate
03:16:39   5  ,prdate
03:16:39   6  ,clse
03:16:39   7  -- g6 is important. I want to predict g6:
03:16:39   8  ,ld6 - clse g6
03:16:39   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
03:16:39  10  -- I want more attributes from the ones I derived above:
03:16:39  11  -- clse relation to moving-min
03:16:39  12  ,clse-min4  cm4
03:16:39  13  ,clse-min6  cm6
03:16:39  14  ,clse-min8  cm8
03:16:39  15  ,clse-min10 cm10
03:16:39  16  ,clse-min12 cm12
03:16:39  17  ,clse-min14 cm14
03:16:39  18  ,clse-min16 cm16
03:16:39  19  ,clse-min18 cm18
03:16:39  20  -- clse relation to moving-avg
03:16:39  21  ,clse-avg4  ca4
03:16:39  22  ,clse-avg6  ca6
03:16:39  23  ,clse-avg8  ca8
03:16:39  24  ,clse-avg10 ca10
03:16:39  25  ,clse-avg12 ca12
03:16:39  26  ,clse-avg14 ca14
03:16:39  27  ,clse-avg16 ca16
03:16:39  28  ,clse-avg18 ca18
03:16:39  29  -- clse relation to moving-max
03:16:39  30  ,clse-max4  cx4
03:16:39  31  ,clse-max6  cx6
03:16:39  32  ,clse-max8  cx8
03:16:39  33  ,clse-max10 cx10
03:16:39  34  ,clse-max12 cx12
03:16:39  35  ,clse-max14 cx14
03:16:39  36  ,clse-max16 cx16
03:16:39  37  ,clse-max18 cx18
03:16:39  38  -- Derive more attributes.
03:16:39  39  -- I want to use CORR() here to help SVM see the shape of the series.
03:16:39  40  -- But COVAR_POP is more stable:
03:16:39  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
03:16:39  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:16:39  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:16:39  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:16:39  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:16:39  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:16:39  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:16:39  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:16:39  49  -- Derive date related attributes:
03:16:39  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:16:39  51  ,0+TO_CHAR(ydate,'D')d
03:16:39  52  ,0+TO_CHAR(ydate,'W')w
03:16:39  53  -- mpm stands for minutes-past-midnight:
03:16:39  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:16:39  55  -- mph stands for minutes-past-hour:
03:16:39  56  ,0+TO_CHAR(ydate,'MI')mph
03:16:39  57  FROM svm6102
03:16:39  58  ORDER BY ydate
03:16:39  59  /

Table created.

Elapsed: 00:00:02.02
03:16:41 SQL> 
03:16:41 SQL> -- rpt
03:16:41 SQL> 
03:16:41 SQL> SELECT
03:16:41   2  pair
03:16:41   3  ,COUNT(pair)
03:16:41   4  ,MIN(clse),MAX(clse)
03:16:41   5  ,MIN(ydate),MAX(ydate)
03:16:41   6  FROM svm6122
03:16:41   7  GROUP BY pair
03:16:41   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19258 1.24213032 1.38284305 2010-09-30 03:20:01 2011-01-03 03:10:00

Elapsed: 00:00:00.04
03:16:42 SQL> 
03:16:42 SQL> -- Prepare for derivation of NTILE based params:
03:16:42 SQL> 
03:16:42 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
03:16:42 SQL> CREATE TABLE svm6142 COMPRESS AS
03:16:42   2  SELECT
03:16:42   3  pair
03:16:42   4  ,ydate
03:16:42   5  ,prdate
03:16:42   6  ,clse
03:16:42   7  ,g6
03:16:42   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
03:16:42   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
03:16:42  10  ,CASE WHEN trend IS NULL THEN 1
03:16:42  11  	    WHEN trend =0      THEN 1
03:16:42  12  	    ELSE trend END trend
03:16:42  13  ,cm4
03:16:42  14  ,cm6
03:16:42  15  ,cm8
03:16:42  16  ,cm10
03:16:42  17  ,cm12
03:16:42  18  ,cm14
03:16:42  19  ,cm16
03:16:42  20  ,cm18
03:16:42  21  --
03:16:42  22  ,ca4
03:16:42  23  ,ca6
03:16:42  24  ,ca8
03:16:42  25  ,ca10
03:16:42  26  ,ca12
03:16:42  27  ,ca14
03:16:42  28  ,ca16
03:16:42  29  ,ca18
03:16:42  30  --
03:16:42  31  ,cx4
03:16:42  32  ,cx6
03:16:42  33  ,cx8
03:16:42  34  ,cx10
03:16:42  35  ,cx12
03:16:42  36  ,cx14
03:16:42  37  ,cx16
03:16:42  38  ,cx18
03:16:42  39  --
03:16:42  40  ,crr4
03:16:42  41  ,crr6
03:16:42  42  ,crr8
03:16:42  43  ,crr10
03:16:42  44  ,crr12
03:16:42  45  ,crr14
03:16:42  46  ,crr16
03:16:42  47  ,crr18
03:16:42  48  --
03:16:42  49  ,hh
03:16:42  50  ,d
03:16:42  51  ,w
03:16:42  52  ,mpm
03:16:42  53  ,mph
03:16:42  54  FROM svm6122
03:16:42  55  ORDER BY ydate
03:16:42  56  /

Table created.

Elapsed: 00:00:00.37
03:16:42 SQL> 
03:16:42 SQL> -- rpt
03:16:42 SQL> 
03:16:42 SQL> SELECT
03:16:42   2  pair
03:16:42   3  ,trend
03:16:42   4  ,gatt
03:16:42   5  ,COUNT(pair)
03:16:42   6  ,AVG(g6)
03:16:42   7  FROM svm6142
03:16:42   8  GROUP BY pair,trend,gatt
03:16:42   9  ORDER BY pair,trend,gatt
03:16:42  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6484 -.00224781
ech_usd 	-1 up	      3516 .003560297
ech_usd 	-1		61
ech_usd 	 1 nup	      6319 -.00237389
ech_usd 	 1 up	      2867 .003858751
ech_usd 	 1		11

6 rows selected.

Elapsed: 00:00:00.04
03:16:42 SQL> 
03:16:42 SQL> 
03:16:42 SQL> -- Derive NTILE based params:
03:16:42 SQL> 
03:16:42 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:01.38
03:16:44 SQL> CREATE TABLE svm6162 COMPRESS AS
03:16:44   2  SELECT
03:16:44   3  pair
03:16:44   4  ,ydate
03:16:44   5  ,prdate
03:16:44   6  ,clse
03:16:44   7  ,g6
03:16:44   8  ,gatt
03:16:44   9  ,gattn
03:16:44  10  ,trend
03:16:44  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
03:16:44  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
03:16:44  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
03:16:44  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
03:16:44  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
03:16:44  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
03:16:44  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
03:16:44  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
03:16:44  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
03:16:44  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
03:16:44  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
03:16:44  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
03:16:44  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
03:16:44  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
03:16:44  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
03:16:44  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
03:16:44  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
03:16:44  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
03:16:44  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
03:16:44  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
03:16:44  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
03:16:44  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
03:16:44  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
03:16:44  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
03:16:44  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
03:16:44  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
03:16:44  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
03:16:44  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
03:16:44  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
03:16:44  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
03:16:44  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
03:16:44  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
03:16:44  43  ,hh  att32
03:16:44  44  ,d   att33
03:16:44  45  ,w   att34
03:16:44  46  ,mpm att35
03:16:44  47  ,mph att36
03:16:44  48  ,trend att37
03:16:44  49  FROM svm6142
03:16:44  50  ORDER BY ydate
03:16:44  51  /

Table created.

Elapsed: 00:00:04.84
03:16:48 SQL> 
03:16:48 SQL> -- rpt
03:16:48 SQL> 
03:16:48 SQL> SELECT
03:16:48   2  pair
03:16:48   3  ,trend
03:16:48   4  ,gatt
03:16:48   5  ,COUNT(pair)
03:16:48   6  ,AVG(g6)
03:16:48   7  FROM svm6162
03:16:48   8  GROUP BY pair,trend,gatt
03:16:48   9  ORDER BY pair,trend,gatt
03:16:48  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6484 -.00224781
ech_usd 	-1 up	      3516 .003560297
ech_usd 	-1		61
ech_usd 	 1 nup	      6319 -.00237389
ech_usd 	 1 up	      2867 .003858751
ech_usd 	 1		11

6 rows selected.

Elapsed: 00:00:00.02
03:16:48 SQL> 
03:16:48 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.16
03:16:49 SQL> CREATE TABLE modsrc COMPRESS AS
03:16:49   2  SELECT
03:16:49   3  pair
03:16:49   4  ,ydate
03:16:49   5  ,prdate
03:16:49   6  ,trend
03:16:49   7  ,g6
03:16:49   8  ,gatt
03:16:49   9  ,gattn
03:16:49  10  FROM svm6162
03:16:49  11  /

Table created.

Elapsed: 00:00:00.09
03:16:49 SQL> 
03:16:49 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
03:16:49 SQL> 
03:16:49 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
03:16:49 SQL> CREATE TABLE ech_ms610 COMPRESS AS
03:16:49   2  SELECT
03:16:49   3  ydate
03:16:49   4  ,trend ech_trend
03:16:49   5  ,g6    ech_g6
03:16:49   6  ,gatt  ech_gatt
03:16:49   7  ,gattn ech_gattn
03:16:49   8  FROM modsrc
03:16:49   9  /

Table created.

Elapsed: 00:00:00.07
03:16:49 SQL> 
03:16:49 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
03:16:49 SQL> 
03:16:49 SQL> -- I need a copy of the attributes:
03:16:49 SQL> 
03:16:49 SQL> 
03:16:49 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.11
03:16:49 SQL> CREATE TABLE ech_att COMPRESS AS
03:16:49   2  SELECT
03:16:49   3  ydate
03:16:49   4  ,att00 ech_att00
03:16:49   5  ,att01 ech_att01
03:16:49   6  ,att02 ech_att02
03:16:49   7  ,att03 ech_att03
03:16:49   8  ,att04 ech_att04
03:16:49   9  ,att05 ech_att05
03:16:49  10  ,att06 ech_att06
03:16:49  11  ,att07 ech_att07
03:16:49  12  ,att08 ech_att08
03:16:49  13  ,att09 ech_att09
03:16:49  14  ,att10 ech_att10
03:16:49  15  ,att11 ech_att11
03:16:49  16  ,att12 ech_att12
03:16:49  17  ,att13 ech_att13
03:16:49  18  ,att14 ech_att14
03:16:49  19  ,att15 ech_att15
03:16:49  20  ,att16 ech_att16
03:16:49  21  ,att17 ech_att17
03:16:49  22  ,att18 ech_att18
03:16:49  23  ,att19 ech_att19
03:16:49  24  ,att20 ech_att20
03:16:49  25  ,att21 ech_att21
03:16:49  26  ,att22 ech_att22
03:16:49  27  ,att23 ech_att23
03:16:49  28  ,att24 ech_att24
03:16:49  29  ,att25 ech_att25
03:16:49  30  ,att26 ech_att26
03:16:49  31  ,att27 ech_att27
03:16:49  32  ,att28 ech_att28
03:16:49  33  ,att29 ech_att29
03:16:49  34  ,att30 ech_att30
03:16:49  35  ,att31 ech_att31
03:16:49  36  ,att32 ech_att32
03:16:49  37  ,att33 ech_att33
03:16:49  38  ,att34 ech_att34
03:16:49  39  ,att35 ech_att35
03:16:49  40  ,att36 ech_att36
03:16:49  41  ,att37 ech_att37
03:16:49  42  FROM svm6162
03:16:49  43  /

Table created.

Elapsed: 00:00:00.19
03:16:49 SQL> 
03:16:49 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
03:16:50 SQL> 
03:16:50 SQL> -- rpt
03:16:50 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19258

Elapsed: 00:00:00.76
03:16:51 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19258

Elapsed: 00:00:00.00
03:16:51 SQL> 
03:16:51 SQL> --
03:16:51 SQL> -- egb610.sql
03:16:51 SQL> --
03:16:51 SQL> 
03:16:51 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:16:51 SQL> 
03:16:51 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
03:16:51 SQL> 
03:16:51 SQL> -- I created di5min here:
03:16:51 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:16:51 SQL> 
03:16:51 SQL> CREATE OR REPLACE VIEW svm6102 AS
03:16:51   2  SELECT
03:16:51   3  pair
03:16:51   4  ,ydate
03:16:51   5  ,prdate
03:16:51   6  ,rownum rnum -- acts as t in my time-series
03:16:51   7  ,clse
03:16:51   8  -- Derive a bunch of attributes from clse, the latest price:
03:16:51   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
03:16:51  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
03:16:51  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
03:16:51  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
03:16:51  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
03:16:51  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
03:16:51  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
03:16:51  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
03:16:51  17  --
03:16:51  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
03:16:51  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
03:16:51  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
03:16:51  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
03:16:51  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
03:16:51  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
03:16:51  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
03:16:51  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
03:16:51  26  --
03:16:51  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
03:16:51  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
03:16:51  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
03:16:51  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
03:16:51  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
03:16:51  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
03:16:51  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
03:16:51  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
03:16:51  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
03:16:51  36  FROM di5min WHERE pair LIKE'%egb%'
03:16:51  37  AND ydate > sysdate - 95
03:16:51  38  ORDER BY ydate
03:16:51  39  /

View created.

Elapsed: 00:00:00.04
03:16:51 SQL> 
03:16:51 SQL> -- rpt
03:16:51 SQL> 
03:16:51 SQL> SELECT
03:16:51   2  pair
03:16:51   3  ,COUNT(pair)
03:16:51   4  ,MIN(clse),MAX(clse)
03:16:51   5  ,MIN(avg6),MAX(avg6)
03:16:51   6  ,MIN(ydate),MAX(ydate)
03:16:51   7  FROM svm6102
03:16:51   8  GROUP BY pair
03:16:51   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19257 .833520557 .893920122 .834199029 .892400287 2010-09-30 03:20:01 2011-01-03 03:10:00

Elapsed: 00:00:00.92
03:16:52 SQL> 
03:16:52 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:16:52 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.25
03:16:52 SQL> CREATE TABLE svm6122 COMPRESS AS
03:16:52   2  SELECT
03:16:52   3  pair
03:16:52   4  ,ydate
03:16:52   5  ,prdate
03:16:52   6  ,clse
03:16:52   7  -- g6 is important. I want to predict g6:
03:16:52   8  ,ld6 - clse g6
03:16:52   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
03:16:52  10  -- I want more attributes from the ones I derived above:
03:16:52  11  -- clse relation to moving-min
03:16:52  12  ,clse-min4  cm4
03:16:52  13  ,clse-min6  cm6
03:16:52  14  ,clse-min8  cm8
03:16:52  15  ,clse-min10 cm10
03:16:52  16  ,clse-min12 cm12
03:16:52  17  ,clse-min14 cm14
03:16:52  18  ,clse-min16 cm16
03:16:52  19  ,clse-min18 cm18
03:16:52  20  -- clse relation to moving-avg
03:16:52  21  ,clse-avg4  ca4
03:16:52  22  ,clse-avg6  ca6
03:16:52  23  ,clse-avg8  ca8
03:16:52  24  ,clse-avg10 ca10
03:16:52  25  ,clse-avg12 ca12
03:16:52  26  ,clse-avg14 ca14
03:16:52  27  ,clse-avg16 ca16
03:16:52  28  ,clse-avg18 ca18
03:16:52  29  -- clse relation to moving-max
03:16:52  30  ,clse-max4  cx4
03:16:52  31  ,clse-max6  cx6
03:16:52  32  ,clse-max8  cx8
03:16:52  33  ,clse-max10 cx10
03:16:52  34  ,clse-max12 cx12
03:16:52  35  ,clse-max14 cx14
03:16:52  36  ,clse-max16 cx16
03:16:52  37  ,clse-max18 cx18
03:16:52  38  -- Derive more attributes.
03:16:52  39  -- I want to use CORR() here to help SVM see the shape of the series.
03:16:52  40  -- But COVAR_POP is more stable:
03:16:52  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
03:16:52  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:16:52  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:16:52  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:16:52  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:16:52  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:16:52  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:16:52  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:16:52  49  -- Derive date related attributes:
03:16:52  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:16:52  51  ,0+TO_CHAR(ydate,'D')d
03:16:52  52  ,0+TO_CHAR(ydate,'W')w
03:16:52  53  -- mpm stands for minutes-past-midnight:
03:16:52  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:16:52  55  -- mph stands for minutes-past-hour:
03:16:52  56  ,0+TO_CHAR(ydate,'MI')mph
03:16:52  57  FROM svm6102
03:16:52  58  ORDER BY ydate
03:16:52  59  /

Table created.

Elapsed: 00:00:02.41
03:16:55 SQL> 
03:16:55 SQL> -- rpt
03:16:55 SQL> 
03:16:55 SQL> SELECT
03:16:55   2  pair
03:16:55   3  ,COUNT(pair)
03:16:55   4  ,MIN(clse),MAX(clse)
03:16:55   5  ,MIN(ydate),MAX(ydate)
03:16:55   6  FROM svm6122
03:16:55   7  GROUP BY pair
03:16:55   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19257 .833520557 .893920122 2010-09-30 03:20:01 2011-01-03 03:10:00

Elapsed: 00:00:00.04
03:16:55 SQL> 
03:16:55 SQL> -- Prepare for derivation of NTILE based params:
03:16:55 SQL> 
03:16:55 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.28
03:16:55 SQL> CREATE TABLE svm6142 COMPRESS AS
03:16:55   2  SELECT
03:16:55   3  pair
03:16:55   4  ,ydate
03:16:55   5  ,prdate
03:16:55   6  ,clse
03:16:55   7  ,g6
03:16:55   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
03:16:55   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
03:16:55  10  ,CASE WHEN trend IS NULL THEN 1
03:16:55  11  	    WHEN trend =0      THEN 1
03:16:55  12  	    ELSE trend END trend
03:16:55  13  ,cm4
03:16:55  14  ,cm6
03:16:55  15  ,cm8
03:16:55  16  ,cm10
03:16:55  17  ,cm12
03:16:55  18  ,cm14
03:16:55  19  ,cm16
03:16:55  20  ,cm18
03:16:55  21  --
03:16:55  22  ,ca4
03:16:55  23  ,ca6
03:16:55  24  ,ca8
03:16:55  25  ,ca10
03:16:55  26  ,ca12
03:16:55  27  ,ca14
03:16:55  28  ,ca16
03:16:55  29  ,ca18
03:16:55  30  --
03:16:55  31  ,cx4
03:16:55  32  ,cx6
03:16:55  33  ,cx8
03:16:55  34  ,cx10
03:16:55  35  ,cx12
03:16:55  36  ,cx14
03:16:55  37  ,cx16
03:16:55  38  ,cx18
03:16:55  39  --
03:16:55  40  ,crr4
03:16:55  41  ,crr6
03:16:55  42  ,crr8
03:16:55  43  ,crr10
03:16:55  44  ,crr12
03:16:55  45  ,crr14
03:16:55  46  ,crr16
03:16:55  47  ,crr18
03:16:55  48  --
03:16:55  49  ,hh
03:16:55  50  ,d
03:16:55  51  ,w
03:16:55  52  ,mpm
03:16:55  53  ,mph
03:16:55  54  FROM svm6122
03:16:55  55  ORDER BY ydate
03:16:55  56  /

Table created.

Elapsed: 00:00:00.42
03:16:55 SQL> 
03:16:55 SQL> -- rpt
03:16:55 SQL> 
03:16:55 SQL> SELECT
03:16:55   2  pair
03:16:55   3  ,trend
03:16:55   4  ,gatt
03:16:55   5  ,COUNT(pair)
03:16:55   6  ,AVG(g6)
03:16:55   7  FROM svm6142
03:16:55   8  GROUP BY pair,trend,gatt
03:16:55   9  ORDER BY pair,trend,gatt
03:16:55  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7296 -.00099642
egb_usd 	-1 up	      2646 .002901237
egb_usd 	-1		60
egb_usd 	 1 nup	      6553 -.00130885
egb_usd 	 1 up	      2690 .002994927
egb_usd 	 1		12

6 rows selected.

Elapsed: 00:00:00.06
03:16:56 SQL> 
03:16:56 SQL> 
03:16:56 SQL> -- Derive NTILE based params:
03:16:56 SQL> 
03:16:56 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.33
03:16:56 SQL> CREATE TABLE svm6162 COMPRESS AS
03:16:56   2  SELECT
03:16:56   3  pair
03:16:56   4  ,ydate
03:16:56   5  ,prdate
03:16:56   6  ,clse
03:16:56   7  ,g6
03:16:56   8  ,gatt
03:16:56   9  ,gattn
03:16:56  10  ,trend
03:16:56  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
03:16:56  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
03:16:56  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
03:16:56  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
03:16:56  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
03:16:56  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
03:16:56  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
03:16:56  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
03:16:56  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
03:16:56  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
03:16:56  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
03:16:56  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
03:16:56  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
03:16:56  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
03:16:56  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
03:16:56  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
03:16:56  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
03:16:56  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
03:16:56  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
03:16:56  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
03:16:56  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
03:16:56  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
03:16:56  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
03:16:56  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
03:16:56  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
03:16:56  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
03:16:56  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
03:16:56  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
03:16:56  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
03:16:56  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
03:16:56  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
03:16:56  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
03:16:56  43  ,hh  att32
03:16:56  44  ,d   att33
03:16:56  45  ,w   att34
03:16:56  46  ,mpm att35
03:16:56  47  ,mph att36
03:16:56  48  ,trend att37
03:16:56  49  FROM svm6142
03:16:56  50  ORDER BY ydate
03:16:56  51  /

Table created.

Elapsed: 00:00:05.57
03:17:01 SQL> 
03:17:01 SQL> -- rpt
03:17:01 SQL> 
03:17:01 SQL> SELECT
03:17:01   2  pair
03:17:01   3  ,trend
03:17:01   4  ,gatt
03:17:01   5  ,COUNT(pair)
03:17:01   6  ,AVG(g6)
03:17:01   7  FROM svm6162
03:17:01   8  GROUP BY pair,trend,gatt
03:17:01   9  ORDER BY pair,trend,gatt
03:17:01  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7296 -.00099642
egb_usd 	-1 up	      2646 .002901237
egb_usd 	-1		60
egb_usd 	 1 nup	      6553 -.00130885
egb_usd 	 1 up	      2690 .002994927
egb_usd 	 1		12

6 rows selected.

Elapsed: 00:00:00.03
03:17:01 SQL> 
03:17:01 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.59
03:17:02 SQL> CREATE TABLE modsrc COMPRESS AS
03:17:02   2  SELECT
03:17:02   3  pair
03:17:02   4  ,ydate
03:17:02   5  ,prdate
03:17:02   6  ,trend
03:17:02   7  ,g6
03:17:02   8  ,gatt
03:17:02   9  ,gattn
03:17:02  10  FROM svm6162
03:17:02  11  /

Table created.

Elapsed: 00:00:00.09
03:17:02 SQL> 
03:17:02 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
03:17:02 SQL> 
03:17:02 SQL> DROP   TABLE egb_ms610 ;

Table dropped.

Elapsed: 00:00:00.12
03:17:02 SQL> CREATE TABLE egb_ms610 COMPRESS AS
03:17:02   2  SELECT
03:17:02   3  ydate
03:17:02   4  ,trend egb_trend
03:17:02   5  ,g6    egb_g6
03:17:02   6  ,gatt  egb_gatt
03:17:02   7  ,gattn egb_gattn
03:17:02   8  FROM modsrc
03:17:02   9  /

Table created.

Elapsed: 00:00:00.06
03:17:03 SQL> 
03:17:03 SQL> ANALYZE TABLE egb_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
03:17:03 SQL> 
03:17:03 SQL> -- I need a copy of the attributes:
03:17:03 SQL> 
03:17:03 SQL> 
03:17:03 SQL> DROP   TABLE egb_att;

Table dropped.

Elapsed: 00:00:00.06
03:17:03 SQL> CREATE TABLE egb_att COMPRESS AS
03:17:03   2  SELECT
03:17:03   3  ydate
03:17:03   4  ,att00 egb_att00
03:17:03   5  ,att01 egb_att01
03:17:03   6  ,att02 egb_att02
03:17:03   7  ,att03 egb_att03
03:17:03   8  ,att04 egb_att04
03:17:03   9  ,att05 egb_att05
03:17:03  10  ,att06 egb_att06
03:17:03  11  ,att07 egb_att07
03:17:03  12  ,att08 egb_att08
03:17:03  13  ,att09 egb_att09
03:17:03  14  ,att10 egb_att10
03:17:03  15  ,att11 egb_att11
03:17:03  16  ,att12 egb_att12
03:17:03  17  ,att13 egb_att13
03:17:03  18  ,att14 egb_att14
03:17:03  19  ,att15 egb_att15
03:17:03  20  ,att16 egb_att16
03:17:03  21  ,att17 egb_att17
03:17:03  22  ,att18 egb_att18
03:17:03  23  ,att19 egb_att19
03:17:03  24  ,att20 egb_att20
03:17:03  25  ,att21 egb_att21
03:17:03  26  ,att22 egb_att22
03:17:03  27  ,att23 egb_att23
03:17:03  28  ,att24 egb_att24
03:17:03  29  ,att25 egb_att25
03:17:03  30  ,att26 egb_att26
03:17:03  31  ,att27 egb_att27
03:17:03  32  ,att28 egb_att28
03:17:03  33  ,att29 egb_att29
03:17:03  34  ,att30 egb_att30
03:17:03  35  ,att31 egb_att31
03:17:03  36  ,att32 egb_att32
03:17:03  37  ,att33 egb_att33
03:17:03  38  ,att34 egb_att34
03:17:03  39  ,att35 egb_att35
03:17:03  40  ,att36 egb_att36
03:17:03  41  ,att37 egb_att37
03:17:03  42  FROM svm6162
03:17:03  43  /

Table created.

Elapsed: 00:00:00.17
03:17:03 SQL> 
03:17:03 SQL> ANALYZE TABLE egb_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
03:17:03 SQL> 
03:17:03 SQL> -- rpt
03:17:03 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19257

Elapsed: 00:00:00.94
03:17:04 SQL> SELECT COUNT(*)FROM egb_att;

  COUNT(*)
----------
     19257

Elapsed: 00:00:00.00
03:17:04 SQL> 
03:17:04 SQL> --
03:17:04 SQL> -- ejp610.sql
03:17:04 SQL> --
03:17:04 SQL> 
03:17:04 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:17:04 SQL> 
03:17:04 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.49
03:17:05 SQL> 
03:17:05 SQL> -- I created di5min here:
03:17:05 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:17:05 SQL> 
03:17:05 SQL> CREATE OR REPLACE VIEW svm6102 AS
03:17:05   2  SELECT
03:17:05   3  pair
03:17:05   4  ,ydate
03:17:05   5  ,prdate
03:17:05   6  ,rownum rnum -- acts as t in my time-series
03:17:05   7  ,clse
03:17:05   8  -- Derive a bunch of attributes from clse, the latest price:
03:17:05   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
03:17:05  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
03:17:05  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
03:17:05  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
03:17:05  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
03:17:05  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
03:17:05  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
03:17:05  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
03:17:05  17  --
03:17:05  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
03:17:05  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
03:17:05  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
03:17:05  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
03:17:05  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
03:17:05  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
03:17:05  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
03:17:05  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
03:17:05  26  --
03:17:05  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
03:17:05  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
03:17:05  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
03:17:05  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
03:17:05  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
03:17:05  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
03:17:05  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
03:17:05  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
03:17:05  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
03:17:05  36  FROM di5min WHERE pair LIKE'%ejp%'
03:17:05  37  AND ydate > sysdate - 95
03:17:05  38  ORDER BY ydate
03:17:05  39  /

View created.

Elapsed: 00:00:00.08
03:17:05 SQL> 
03:17:05 SQL> -- rpt
03:17:05 SQL> 
03:17:05 SQL> SELECT
03:17:05   2  pair
03:17:05   3  ,COUNT(pair)
03:17:05   4  ,MIN(clse),MAX(clse)
03:17:05   5  ,MIN(avg6),MAX(avg6)
03:17:05   6  ,MIN(ydate),MAX(ydate)
03:17:05   7  FROM svm6102
03:17:05   8  GROUP BY pair
03:17:05   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ejp_usd       19255 107.643765	115.63485 107.776148 115.509678 2010-09-30 03:20:01 2011-01-03 03:10:00

Elapsed: 00:00:00.84
03:17:06 SQL> 
03:17:06 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:17:06 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.22
03:17:06 SQL> CREATE TABLE svm6122 COMPRESS AS
03:17:06   2  SELECT
03:17:06   3  pair
03:17:06   4  ,ydate
03:17:06   5  ,prdate
03:17:06   6  ,clse
03:17:06   7  -- g6 is important. I want to predict g6:
03:17:06   8  ,ld6 - clse g6
03:17:06   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
03:17:06  10  -- I want more attributes from the ones I derived above:
03:17:06  11  -- clse relation to moving-min
03:17:06  12  ,clse-min4  cm4
03:17:06  13  ,clse-min6  cm6
03:17:06  14  ,clse-min8  cm8
03:17:06  15  ,clse-min10 cm10
03:17:06  16  ,clse-min12 cm12
03:17:06  17  ,clse-min14 cm14
03:17:06  18  ,clse-min16 cm16
03:17:06  19  ,clse-min18 cm18
03:17:06  20  -- clse relation to moving-avg
03:17:06  21  ,clse-avg4  ca4
03:17:06  22  ,clse-avg6  ca6
03:17:06  23  ,clse-avg8  ca8
03:17:06  24  ,clse-avg10 ca10
03:17:06  25  ,clse-avg12 ca12
03:17:06  26  ,clse-avg14 ca14
03:17:06  27  ,clse-avg16 ca16
03:17:06  28  ,clse-avg18 ca18
03:17:06  29  -- clse relation to moving-max
03:17:06  30  ,clse-max4  cx4
03:17:06  31  ,clse-max6  cx6
03:17:06  32  ,clse-max8  cx8
03:17:06  33  ,clse-max10 cx10
03:17:06  34  ,clse-max12 cx12
03:17:06  35  ,clse-max14 cx14
03:17:06  36  ,clse-max16 cx16
03:17:06  37  ,clse-max18 cx18
03:17:06  38  -- Derive more attributes.
03:17:06  39  -- I want to use CORR() here to help SVM see the shape of the series.
03:17:06  40  -- But COVAR_POP is more stable:
03:17:06  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
03:17:06  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:17:06  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:17:06  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:17:06  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:17:06  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:17:06  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:17:06  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:17:06  49  -- Derive date related attributes:
03:17:06  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:17:06  51  ,0+TO_CHAR(ydate,'D')d
03:17:06  52  ,0+TO_CHAR(ydate,'W')w
03:17:06  53  -- mpm stands for minutes-past-midnight:
03:17:06  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:17:06  55  -- mph stands for minutes-past-hour:
03:17:06  56  ,0+TO_CHAR(ydate,'MI')mph
03:17:06  57  FROM svm6102
03:17:06  58  ORDER BY ydate
03:17:06  59  /

Table created.

Elapsed: 00:00:02.04
03:17:08 SQL> 
03:17:08 SQL> -- rpt
03:17:08 SQL> 
03:17:08 SQL> SELECT
03:17:08   2  pair
03:17:08   3  ,COUNT(pair)
03:17:08   4  ,MIN(clse),MAX(clse)
03:17:08   5  ,MIN(ydate),MAX(ydate)
03:17:08   6  FROM svm6122
03:17:08   7  GROUP BY pair
03:17:08   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ejp_usd       19255 107.643765	115.63485 2010-09-30 03:20:01 2011-01-03 03:10:00

Elapsed: 00:00:00.06
03:17:08 SQL> 
03:17:08 SQL> -- Prepare for derivation of NTILE based params:
03:17:08 SQL> 
03:17:08 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.25
03:17:08 SQL> CREATE TABLE svm6142 COMPRESS AS
03:17:08   2  SELECT
03:17:08   3  pair
03:17:08   4  ,ydate
03:17:08   5  ,prdate
03:17:08   6  ,clse
03:17:08   7  ,g6
03:17:08   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
03:17:08   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
03:17:08  10  ,CASE WHEN trend IS NULL THEN 1
03:17:08  11  	    WHEN trend =0      THEN 1
03:17:08  12  	    ELSE trend END trend
03:17:08  13  ,cm4
03:17:08  14  ,cm6
03:17:08  15  ,cm8
03:17:08  16  ,cm10
03:17:08  17  ,cm12
03:17:08  18  ,cm14
03:17:08  19  ,cm16
03:17:08  20  ,cm18
03:17:08  21  --
03:17:08  22  ,ca4
03:17:08  23  ,ca6
03:17:08  24  ,ca8
03:17:08  25  ,ca10
03:17:08  26  ,ca12
03:17:08  27  ,ca14
03:17:08  28  ,ca16
03:17:08  29  ,ca18
03:17:08  30  --
03:17:08  31  ,cx4
03:17:08  32  ,cx6
03:17:08  33  ,cx8
03:17:08  34  ,cx10
03:17:08  35  ,cx12
03:17:08  36  ,cx14
03:17:08  37  ,cx16
03:17:08  38  ,cx18
03:17:08  39  --
03:17:08  40  ,crr4
03:17:08  41  ,crr6
03:17:08  42  ,crr8
03:17:08  43  ,crr10
03:17:08  44  ,crr12
03:17:08  45  ,crr14
03:17:08  46  ,crr16
03:17:08  47  ,crr18
03:17:08  48  --
03:17:08  49  ,hh
03:17:08  50  ,d
03:17:08  51  ,w
03:17:08  52  ,mpm
03:17:08  53  ,mph
03:17:08  54  FROM svm6122
03:17:08  55  ORDER BY ydate
03:17:08  56  /

Table created.

Elapsed: 00:00:00.36
03:17:09 SQL> 
03:17:09 SQL> -- rpt
03:17:09 SQL> 
03:17:09 SQL> SELECT
03:17:09   2  pair
03:17:09   3  ,trend
03:17:09   4  ,gatt
03:17:09   5  ,COUNT(pair)
03:17:09   6  ,AVG(g6)
03:17:09   7  FROM svm6142
03:17:09   8  GROUP BY pair,trend,gatt
03:17:09   9  ORDER BY pair,trend,gatt
03:17:09  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4799 -.32492847
ejp_usd 	-1 up	      4853 .269532306
ejp_usd 	-1		71
ejp_usd 	 1 nup	      4903 -.28926054
ejp_usd 	 1 up	      4628 .280831778
ejp_usd 	 1		 1

6 rows selected.

Elapsed: 00:00:00.04
03:17:09 SQL> 
03:17:09 SQL> 
03:17:09 SQL> -- Derive NTILE based params:
03:17:09 SQL> 
03:17:09 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
03:17:09 SQL> CREATE TABLE svm6162 COMPRESS AS
03:17:09   2  SELECT
03:17:09   3  pair
03:17:09   4  ,ydate
03:17:09   5  ,prdate
03:17:09   6  ,clse
03:17:09   7  ,g6
03:17:09   8  ,gatt
03:17:09   9  ,gattn
03:17:09  10  ,trend
03:17:09  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
03:17:09  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
03:17:09  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
03:17:09  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
03:17:09  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
03:17:09  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
03:17:09  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
03:17:09  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
03:17:09  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
03:17:09  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
03:17:09  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
03:17:09  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
03:17:09  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
03:17:09  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
03:17:09  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
03:17:09  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
03:17:09  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
03:17:09  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
03:17:09  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
03:17:09  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
03:17:09  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
03:17:09  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
03:17:09  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
03:17:09  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
03:17:09  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
03:17:09  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
03:17:09  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
03:17:09  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
03:17:09  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
03:17:09  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
03:17:09  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
03:17:09  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
03:17:09  43  ,hh  att32
03:17:09  44  ,d   att33
03:17:09  45  ,w   att34
03:17:09  46  ,mpm att35
03:17:09  47  ,mph att36
03:17:09  48  ,trend att37
03:17:09  49  FROM svm6142
03:17:09  50  ORDER BY ydate
03:17:09  51  /

Table created.

Elapsed: 00:00:04.88
03:17:14 SQL> 
03:17:14 SQL> -- rpt
03:17:14 SQL> 
03:17:14 SQL> SELECT
03:17:14   2  pair
03:17:14   3  ,trend
03:17:14   4  ,gatt
03:17:14   5  ,COUNT(pair)
03:17:14   6  ,AVG(g6)
03:17:14   7  FROM svm6162
03:17:14   8  GROUP BY pair,trend,gatt
03:17:14   9  ORDER BY pair,trend,gatt
03:17:14  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4799 -.32492847
ejp_usd 	-1 up	      4853 .269532306
ejp_usd 	-1		71
ejp_usd 	 1 nup	      4903 -.28926054
ejp_usd 	 1 up	      4628 .280831778
ejp_usd 	 1		 1

6 rows selected.

Elapsed: 00:00:00.03
03:17:14 SQL> 
03:17:14 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
03:17:14 SQL> CREATE TABLE modsrc COMPRESS AS
03:17:14   2  SELECT
03:17:14   3  pair
03:17:14   4  ,ydate
03:17:14   5  ,prdate
03:17:14   6  ,trend
03:17:14   7  ,g6
03:17:14   8  ,gatt
03:17:14   9  ,gattn
03:17:14  10  FROM svm6162
03:17:14  11  /

Table created.

Elapsed: 00:00:00.08
03:17:14 SQL> 
03:17:14 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.24
03:17:14 SQL> 
03:17:14 SQL> DROP   TABLE ejp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
03:17:14 SQL> CREATE TABLE ejp_ms610 COMPRESS AS
03:17:14   2  SELECT
03:17:14   3  ydate
03:17:14   4  ,trend ejp_trend
03:17:14   5  ,g6    ejp_g6
03:17:14   6  ,gatt  ejp_gatt
03:17:14   7  ,gattn ejp_gattn
03:17:14   8  FROM modsrc
03:17:14   9  /

Table created.

Elapsed: 00:00:00.06
03:17:14 SQL> 
03:17:14 SQL> ANALYZE TABLE ejp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
03:17:14 SQL> 
03:17:14 SQL> -- I need a copy of the attributes:
03:17:14 SQL> 
03:17:14 SQL> 
03:17:14 SQL> DROP   TABLE ejp_att;

Table dropped.

Elapsed: 00:00:00.04
03:17:15 SQL> CREATE TABLE ejp_att COMPRESS AS
03:17:15   2  SELECT
03:17:15   3  ydate
03:17:15   4  ,att00 ejp_att00
03:17:15   5  ,att01 ejp_att01
03:17:15   6  ,att02 ejp_att02
03:17:15   7  ,att03 ejp_att03
03:17:15   8  ,att04 ejp_att04
03:17:15   9  ,att05 ejp_att05
03:17:15  10  ,att06 ejp_att06
03:17:15  11  ,att07 ejp_att07
03:17:15  12  ,att08 ejp_att08
03:17:15  13  ,att09 ejp_att09
03:17:15  14  ,att10 ejp_att10
03:17:15  15  ,att11 ejp_att11
03:17:15  16  ,att12 ejp_att12
03:17:15  17  ,att13 ejp_att13
03:17:15  18  ,att14 ejp_att14
03:17:15  19  ,att15 ejp_att15
03:17:15  20  ,att16 ejp_att16
03:17:15  21  ,att17 ejp_att17
03:17:15  22  ,att18 ejp_att18
03:17:15  23  ,att19 ejp_att19
03:17:15  24  ,att20 ejp_att20
03:17:15  25  ,att21 ejp_att21
03:17:15  26  ,att22 ejp_att22
03:17:15  27  ,att23 ejp_att23
03:17:15  28  ,att24 ejp_att24
03:17:15  29  ,att25 ejp_att25
03:17:15  30  ,att26 ejp_att26
03:17:15  31  ,att27 ejp_att27
03:17:15  32  ,att28 ejp_att28
03:17:15  33  ,att29 ejp_att29
03:17:15  34  ,att30 ejp_att30
03:17:15  35  ,att31 ejp_att31
03:17:15  36  ,att32 ejp_att32
03:17:15  37  ,att33 ejp_att33
03:17:15  38  ,att34 ejp_att34
03:17:15  39  ,att35 ejp_att35
03:17:15  40  ,att36 ejp_att36
03:17:15  41  ,att37 ejp_att37
03:17:15  42  FROM svm6162
03:17:15  43  /

Table created.

Elapsed: 00:00:00.17
03:17:15 SQL> 
03:17:15 SQL> ANALYZE TABLE ejp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.42
03:17:15 SQL> 
03:17:15 SQL> -- rpt
03:17:15 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19255

Elapsed: 00:00:00.82
03:17:16 SQL> SELECT COUNT(*)FROM ejp_att;

  COUNT(*)
----------
     19255

Elapsed: 00:00:00.00
03:17:16 SQL> 
03:17:16 SQL> --
03:17:16 SQL> -- ajp610.sql
03:17:16 SQL> --
03:17:16 SQL> 
03:17:16 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:17:16 SQL> 
03:17:16 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
03:17:16 SQL> 
03:17:16 SQL> -- I created di5min here:
03:17:16 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:17:16 SQL> 
03:17:16 SQL> CREATE OR REPLACE VIEW svm6102 AS
03:17:16   2  SELECT
03:17:16   3  pair
03:17:16   4  ,ydate
03:17:16   5  ,prdate
03:17:16   6  ,rownum rnum -- acts as t in my time-series
03:17:16   7  ,clse
03:17:16   8  -- Derive a bunch of attributes from clse, the latest price:
03:17:16   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
03:17:16  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
03:17:16  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
03:17:16  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
03:17:16  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
03:17:16  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
03:17:16  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
03:17:16  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
03:17:16  17  --
03:17:16  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
03:17:16  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
03:17:16  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
03:17:16  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
03:17:16  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
03:17:16  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
03:17:16  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
03:17:16  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
03:17:16  26  --
03:17:16  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
03:17:16  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
03:17:16  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
03:17:16  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
03:17:16  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
03:17:16  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
03:17:16  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
03:17:16  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
03:17:16  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
03:17:16  36  FROM di5min WHERE pair LIKE'%ajp%'
03:17:16  37  AND ydate > sysdate - 95
03:17:16  38  ORDER BY ydate
03:17:16  39  /

View created.

Elapsed: 00:00:00.06
03:17:16 SQL> 
03:17:16 SQL> -- rpt
03:17:16 SQL> 
03:17:16 SQL> SELECT
03:17:16   2  pair
03:17:16   3  ,COUNT(pair)
03:17:16   4  ,MIN(clse),MAX(clse)
03:17:16   5  ,MIN(avg6),MAX(avg6)
03:17:16   6  ,MIN(ydate),MAX(ydate)
03:17:16   7  FROM svm6102
03:17:16   8  GROUP BY pair
03:17:16   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ajp_usd       19252  78.249976 83.6669853 78.5106193  83.546306 2010-09-30 03:20:01 2011-01-03 03:10:00

Elapsed: 00:00:00.76
03:17:17 SQL> 
03:17:17 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:17:17 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.22
03:17:17 SQL> CREATE TABLE svm6122 COMPRESS AS
03:17:17   2  SELECT
03:17:17   3  pair
03:17:17   4  ,ydate
03:17:17   5  ,prdate
03:17:17   6  ,clse
03:17:17   7  -- g6 is important. I want to predict g6:
03:17:17   8  ,ld6 - clse g6
03:17:17   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
03:17:17  10  -- I want more attributes from the ones I derived above:
03:17:17  11  -- clse relation to moving-min
03:17:17  12  ,clse-min4  cm4
03:17:17  13  ,clse-min6  cm6
03:17:17  14  ,clse-min8  cm8
03:17:17  15  ,clse-min10 cm10
03:17:17  16  ,clse-min12 cm12
03:17:17  17  ,clse-min14 cm14
03:17:17  18  ,clse-min16 cm16
03:17:17  19  ,clse-min18 cm18
03:17:17  20  -- clse relation to moving-avg
03:17:17  21  ,clse-avg4  ca4
03:17:17  22  ,clse-avg6  ca6
03:17:17  23  ,clse-avg8  ca8
03:17:17  24  ,clse-avg10 ca10
03:17:17  25  ,clse-avg12 ca12
03:17:17  26  ,clse-avg14 ca14
03:17:17  27  ,clse-avg16 ca16
03:17:17  28  ,clse-avg18 ca18
03:17:17  29  -- clse relation to moving-max
03:17:17  30  ,clse-max4  cx4
03:17:17  31  ,clse-max6  cx6
03:17:17  32  ,clse-max8  cx8
03:17:17  33  ,clse-max10 cx10
03:17:17  34  ,clse-max12 cx12
03:17:17  35  ,clse-max14 cx14
03:17:17  36  ,clse-max16 cx16
03:17:17  37  ,clse-max18 cx18
03:17:17  38  -- Derive more attributes.
03:17:17  39  -- I want to use CORR() here to help SVM see the shape of the series.
03:17:17  40  -- But COVAR_POP is more stable:
03:17:17  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
03:17:17  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:17:17  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:17:17  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:17:17  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:17:17  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:17:17  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:17:17  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:17:17  49  -- Derive date related attributes:
03:17:17  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:17:17  51  ,0+TO_CHAR(ydate,'D')d
03:17:17  52  ,0+TO_CHAR(ydate,'W')w
03:17:17  53  -- mpm stands for minutes-past-midnight:
03:17:17  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:17:17  55  -- mph stands for minutes-past-hour:
03:17:17  56  ,0+TO_CHAR(ydate,'MI')mph
03:17:17  57  FROM svm6102
03:17:17  58  ORDER BY ydate
03:17:17  59  /

Table created.

Elapsed: 00:00:01.98
03:17:19 SQL> 
03:17:19 SQL> -- rpt
03:17:19 SQL> 
03:17:19 SQL> SELECT
03:17:19   2  pair
03:17:19   3  ,COUNT(pair)
03:17:19   4  ,MIN(clse),MAX(clse)
03:17:19   5  ,MIN(ydate),MAX(ydate)
03:17:19   6  FROM svm6122
03:17:19   7  GROUP BY pair
03:17:19   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ajp_usd       19252  78.249976 83.6669853 2010-09-30 03:20:01 2011-01-03 03:10:00

Elapsed: 00:00:00.04
03:17:19 SQL> 
03:17:19 SQL> -- Prepare for derivation of NTILE based params:
03:17:19 SQL> 
03:17:19 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.16
03:17:20 SQL> CREATE TABLE svm6142 COMPRESS AS
03:17:20   2  SELECT
03:17:20   3  pair
03:17:20   4  ,ydate
03:17:20   5  ,prdate
03:17:20   6  ,clse
03:17:20   7  ,g6
03:17:20   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
03:17:20   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
03:17:20  10  ,CASE WHEN trend IS NULL THEN 1
03:17:20  11  	    WHEN trend =0      THEN 1
03:17:20  12  	    ELSE trend END trend
03:17:20  13  ,cm4
03:17:20  14  ,cm6
03:17:20  15  ,cm8
03:17:20  16  ,cm10
03:17:20  17  ,cm12
03:17:20  18  ,cm14
03:17:20  19  ,cm16
03:17:20  20  ,cm18
03:17:20  21  --
03:17:20  22  ,ca4
03:17:20  23  ,ca6
03:17:20  24  ,ca8
03:17:20  25  ,ca10
03:17:20  26  ,ca12
03:17:20  27  ,ca14
03:17:20  28  ,ca16
03:17:20  29  ,ca18
03:17:20  30  --
03:17:20  31  ,cx4
03:17:20  32  ,cx6
03:17:20  33  ,cx8
03:17:20  34  ,cx10
03:17:20  35  ,cx12
03:17:20  36  ,cx14
03:17:20  37  ,cx16
03:17:20  38  ,cx18
03:17:20  39  --
03:17:20  40  ,crr4
03:17:20  41  ,crr6
03:17:20  42  ,crr8
03:17:20  43  ,crr10
03:17:20  44  ,crr12
03:17:20  45  ,crr14
03:17:20  46  ,crr16
03:17:20  47  ,crr18
03:17:20  48  --
03:17:20  49  ,hh
03:17:20  50  ,d
03:17:20  51  ,w
03:17:20  52  ,mpm
03:17:20  53  ,mph
03:17:20  54  FROM svm6122
03:17:20  55  ORDER BY ydate
03:17:20  56  /

Table created.

Elapsed: 00:00:00.38
03:17:20 SQL> 
03:17:20 SQL> -- rpt
03:17:20 SQL> 
03:17:20 SQL> SELECT
03:17:20   2  pair
03:17:20   3  ,trend
03:17:20   4  ,gatt
03:17:20   5  ,COUNT(pair)
03:17:20   6  ,AVG(g6)
03:17:20   7  FROM svm6142
03:17:20   8  GROUP BY pair,trend,gatt
03:17:20   9  ORDER BY pair,trend,gatt
03:17:20  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4047 -.22822398
ajp_usd 	-1 up	      5147 .222122738
ajp_usd 	-1		59
ajp_usd 	 1 nup	      5205 -.20027189
ajp_usd 	 1 up	      4781 .205573559
ajp_usd 	 1		13

6 rows selected.

Elapsed: 00:00:00.05
03:17:20 SQL> 
03:17:20 SQL> 
03:17:20 SQL> -- Derive NTILE based params:
03:17:20 SQL> 
03:17:20 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.20
03:17:20 SQL> CREATE TABLE svm6162 COMPRESS AS
03:17:20   2  SELECT
03:17:20   3  pair
03:17:20   4  ,ydate
03:17:20   5  ,prdate
03:17:20   6  ,clse
03:17:20   7  ,g6
03:17:20   8  ,gatt
03:17:20   9  ,gattn
03:17:20  10  ,trend
03:17:20  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
03:17:20  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
03:17:20  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
03:17:20  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
03:17:20  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
03:17:20  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
03:17:20  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
03:17:20  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
03:17:20  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
03:17:20  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
03:17:20  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
03:17:20  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
03:17:20  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
03:17:20  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
03:17:20  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
03:17:20  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
03:17:20  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
03:17:20  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
03:17:20  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
03:17:20  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
03:17:20  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
03:17:20  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
03:17:20  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
03:17:20  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
03:17:20  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
03:17:20  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
03:17:20  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
03:17:20  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
03:17:20  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
03:17:20  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
03:17:20  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
03:17:20  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
03:17:20  43  ,hh  att32
03:17:20  44  ,d   att33
03:17:20  45  ,w   att34
03:17:20  46  ,mpm att35
03:17:20  47  ,mph att36
03:17:20  48  ,trend att37
03:17:20  49  FROM svm6142
03:17:20  50  ORDER BY ydate
03:17:20  51  /

Table created.

Elapsed: 00:00:05.06
03:17:25 SQL> 
03:17:25 SQL> -- rpt
03:17:25 SQL> 
03:17:25 SQL> SELECT
03:17:25   2  pair
03:17:25   3  ,trend
03:17:25   4  ,gatt
03:17:25   5  ,COUNT(pair)
03:17:25   6  ,AVG(g6)
03:17:25   7  FROM svm6162
03:17:25   8  GROUP BY pair,trend,gatt
03:17:25   9  ORDER BY pair,trend,gatt
03:17:25  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4047 -.22822398
ajp_usd 	-1 up	      5147 .222122738
ajp_usd 	-1		59
ajp_usd 	 1 nup	      5205 -.20027189
ajp_usd 	 1 up	      4781 .205573559
ajp_usd 	 1		13

6 rows selected.

Elapsed: 00:00:00.02
03:17:25 SQL> 
03:17:25 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.48
03:17:26 SQL> CREATE TABLE modsrc COMPRESS AS
03:17:26   2  SELECT
03:17:26   3  pair
03:17:26   4  ,ydate
03:17:26   5  ,prdate
03:17:26   6  ,trend
03:17:26   7  ,g6
03:17:26   8  ,gatt
03:17:26   9  ,gattn
03:17:26  10  FROM svm6162
03:17:26  11  /

Table created.

Elapsed: 00:00:00.07
03:17:26 SQL> 
03:17:26 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
03:17:26 SQL> 
03:17:26 SQL> DROP   TABLE ajp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
03:17:26 SQL> CREATE TABLE ajp_ms610 COMPRESS AS
03:17:26   2  SELECT
03:17:26   3  ydate
03:17:26   4  ,trend ajp_trend
03:17:26   5  ,g6    ajp_g6
03:17:26   6  ,gatt  ajp_gatt
03:17:26   7  ,gattn ajp_gattn
03:17:26   8  FROM modsrc
03:17:26   9  /

Table created.

Elapsed: 00:00:00.07
03:17:26 SQL> 
03:17:26 SQL> ANALYZE TABLE ajp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
03:17:26 SQL> 
03:17:26 SQL> -- I need a copy of the attributes:
03:17:26 SQL> 
03:17:26 SQL> 
03:17:26 SQL> DROP   TABLE ajp_att;

Table dropped.

Elapsed: 00:00:00.05
03:17:26 SQL> CREATE TABLE ajp_att COMPRESS AS
03:17:26   2  SELECT
03:17:26   3  ydate
03:17:26   4  ,att00 ajp_att00
03:17:26   5  ,att01 ajp_att01
03:17:26   6  ,att02 ajp_att02
03:17:26   7  ,att03 ajp_att03
03:17:26   8  ,att04 ajp_att04
03:17:26   9  ,att05 ajp_att05
03:17:26  10  ,att06 ajp_att06
03:17:26  11  ,att07 ajp_att07
03:17:26  12  ,att08 ajp_att08
03:17:26  13  ,att09 ajp_att09
03:17:26  14  ,att10 ajp_att10
03:17:26  15  ,att11 ajp_att11
03:17:26  16  ,att12 ajp_att12
03:17:26  17  ,att13 ajp_att13
03:17:26  18  ,att14 ajp_att14
03:17:26  19  ,att15 ajp_att15
03:17:26  20  ,att16 ajp_att16
03:17:26  21  ,att17 ajp_att17
03:17:26  22  ,att18 ajp_att18
03:17:26  23  ,att19 ajp_att19
03:17:26  24  ,att20 ajp_att20
03:17:26  25  ,att21 ajp_att21
03:17:26  26  ,att22 ajp_att22
03:17:26  27  ,att23 ajp_att23
03:17:26  28  ,att24 ajp_att24
03:17:26  29  ,att25 ajp_att25
03:17:26  30  ,att26 ajp_att26
03:17:26  31  ,att27 ajp_att27
03:17:26  32  ,att28 ajp_att28
03:17:26  33  ,att29 ajp_att29
03:17:26  34  ,att30 ajp_att30
03:17:26  35  ,att31 ajp_att31
03:17:26  36  ,att32 ajp_att32
03:17:26  37  ,att33 ajp_att33
03:17:26  38  ,att34 ajp_att34
03:17:26  39  ,att35 ajp_att35
03:17:26  40  ,att36 ajp_att36
03:17:26  41  ,att37 ajp_att37
03:17:26  42  FROM svm6162
03:17:26  43  /

Table created.

Elapsed: 00:00:00.18
03:17:27 SQL> 
03:17:27 SQL> ANALYZE TABLE ajp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
03:17:27 SQL> 
03:17:27 SQL> -- rpt
03:17:27 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19252

Elapsed: 00:00:00.77
03:17:28 SQL> SELECT COUNT(*)FROM ajp_att;

  COUNT(*)
----------
     19252

Elapsed: 00:00:00.00
03:17:28 SQL> 
03:17:28 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
