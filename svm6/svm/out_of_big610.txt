
SQL*Plus: Release 11.2.0.1.0 Production on Fri Jan 7 00:23:28 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

00:23:29 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
00:23:29 SQL> 00:23:29 SQL> --
00:23:29 SQL> -- eur610.sql
00:23:29 SQL> --
00:23:29 SQL> 
00:23:29 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:23:29 SQL> 
00:23:29 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.02
00:23:29 SQL> 
00:23:29 SQL> -- I created di5min here:
00:23:29 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
00:23:29 SQL> 
00:23:29 SQL> CREATE OR REPLACE VIEW svm6102 AS
00:23:29   2  SELECT
00:23:29   3  pair
00:23:29   4  ,ydate
00:23:29   5  ,prdate
00:23:29   6  ,rownum rnum -- acts as t in my time-series
00:23:29   7  ,clse
00:23:29   8  -- Derive a bunch of attributes from clse, the latest price:
00:23:29   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
00:23:29  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
00:23:29  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
00:23:29  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
00:23:29  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
00:23:29  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
00:23:29  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
00:23:29  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
00:23:29  17  --
00:23:29  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
00:23:29  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
00:23:29  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
00:23:29  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
00:23:29  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
00:23:29  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
00:23:29  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
00:23:29  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
00:23:29  26  --
00:23:29  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
00:23:29  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
00:23:29  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
00:23:29  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
00:23:29  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
00:23:29  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
00:23:29  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
00:23:29  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
00:23:29  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
00:23:29  36  FROM di5min WHERE pair LIKE'%eur%'
00:23:29  37  AND ydate > sysdate - 95
00:23:29  38  ORDER BY ydate
00:23:29  39  /

View created.

Elapsed: 00:00:00.07
00:23:29 SQL> 
00:23:29 SQL> -- rpt
00:23:29 SQL> 
00:23:29 SQL> SELECT
00:23:29   2  pair
00:23:29   3  ,COUNT(pair)
00:23:29   4  ,MIN(clse),MAX(clse)
00:23:29   5  ,MIN(avg6),MAX(avg6)
00:23:29   6  ,MIN(ydate),MAX(ydate)
00:23:29   7  FROM svm6102
00:23:29   8  GROUP BY pair
00:23:29   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19811    1.29735	   1.4273 1.29875103 1.42436233 2010-10-04 00:25:01 2011-01-07 00:20:00

Elapsed: 00:00:00.95
00:23:30 SQL> 
00:23:30 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
00:23:30 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.06
00:23:30 SQL> CREATE TABLE svm6122 COMPRESS AS
00:23:30   2  SELECT
00:23:30   3  pair
00:23:30   4  ,ydate
00:23:30   5  ,prdate
00:23:30   6  ,clse
00:23:30   7  -- g6 is important. I want to predict g6:
00:23:30   8  ,ld6 - clse g6
00:23:30   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
00:23:30  10  -- I want more attributes from the ones I derived above:
00:23:30  11  -- clse relation to moving-min
00:23:30  12  ,clse-min4  cm4
00:23:30  13  ,clse-min6  cm6
00:23:30  14  ,clse-min8  cm8
00:23:30  15  ,clse-min10 cm10
00:23:30  16  ,clse-min12 cm12
00:23:30  17  ,clse-min14 cm14
00:23:30  18  ,clse-min16 cm16
00:23:30  19  ,clse-min18 cm18
00:23:30  20  -- clse relation to moving-avg
00:23:30  21  ,clse-avg4  ca4
00:23:30  22  ,clse-avg6  ca6
00:23:30  23  ,clse-avg8  ca8
00:23:30  24  ,clse-avg10 ca10
00:23:30  25  ,clse-avg12 ca12
00:23:30  26  ,clse-avg14 ca14
00:23:30  27  ,clse-avg16 ca16
00:23:30  28  ,clse-avg18 ca18
00:23:30  29  -- clse relation to moving-max
00:23:30  30  ,clse-max4  cx4
00:23:30  31  ,clse-max6  cx6
00:23:30  32  ,clse-max8  cx8
00:23:30  33  ,clse-max10 cx10
00:23:30  34  ,clse-max12 cx12
00:23:30  35  ,clse-max14 cx14
00:23:30  36  ,clse-max16 cx16
00:23:30  37  ,clse-max18 cx18
00:23:30  38  -- Derive more attributes.
00:23:30  39  -- I want to use CORR() here to help SVM see the shape of the series.
00:23:30  40  -- But COVAR_POP is more stable:
00:23:30  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
00:23:30  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
00:23:30  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
00:23:30  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
00:23:30  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
00:23:30  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
00:23:30  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
00:23:30  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
00:23:30  49  -- Derive date related attributes:
00:23:30  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:23:30  51  ,0+TO_CHAR(ydate,'D')d
00:23:30  52  ,0+TO_CHAR(ydate,'W')w
00:23:30  53  -- mpm stands for minutes-past-midnight:
00:23:30  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:23:30  55  -- mph stands for minutes-past-hour:
00:23:30  56  ,0+TO_CHAR(ydate,'MI')mph
00:23:30  57  FROM svm6102
00:23:30  58  ORDER BY ydate
00:23:30  59  /

Table created.

Elapsed: 00:00:02.51
00:23:32 SQL> 
00:23:32 SQL> -- rpt
00:23:32 SQL> 
00:23:32 SQL> SELECT
00:23:32   2  pair
00:23:32   3  ,COUNT(pair)
00:23:32   4  ,MIN(clse),MAX(clse)
00:23:32   5  ,MIN(ydate),MAX(ydate)
00:23:32   6  FROM svm6122
00:23:32   7  GROUP BY pair
00:23:32   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19811    1.29735	   1.4273 2010-10-04 00:25:01 2011-01-07 00:20:00

Elapsed: 00:00:00.06
00:23:32 SQL> 
00:23:32 SQL> -- Prepare for derivation of NTILE based params:
00:23:32 SQL> 
00:23:32 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.75
00:23:33 SQL> CREATE TABLE svm6142 COMPRESS AS
00:23:33   2  SELECT
00:23:33   3  pair
00:23:33   4  ,ydate
00:23:33   5  ,prdate
00:23:33   6  ,clse
00:23:33   7  ,g6
00:23:33   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
00:23:33   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
00:23:33  10  ,CASE WHEN trend IS NULL THEN 1
00:23:33  11  	    WHEN trend =0      THEN 1
00:23:33  12  	    ELSE trend END trend
00:23:33  13  ,cm4
00:23:33  14  ,cm6
00:23:33  15  ,cm8
00:23:33  16  ,cm10
00:23:33  17  ,cm12
00:23:33  18  ,cm14
00:23:33  19  ,cm16
00:23:33  20  ,cm18
00:23:33  21  --
00:23:33  22  ,ca4
00:23:33  23  ,ca6
00:23:33  24  ,ca8
00:23:33  25  ,ca10
00:23:33  26  ,ca12
00:23:33  27  ,ca14
00:23:33  28  ,ca16
00:23:33  29  ,ca18
00:23:33  30  --
00:23:33  31  ,cx4
00:23:33  32  ,cx6
00:23:33  33  ,cx8
00:23:33  34  ,cx10
00:23:33  35  ,cx12
00:23:33  36  ,cx14
00:23:33  37  ,cx16
00:23:33  38  ,cx18
00:23:33  39  --
00:23:33  40  ,crr4
00:23:33  41  ,crr6
00:23:33  42  ,crr8
00:23:33  43  ,crr10
00:23:33  44  ,crr12
00:23:33  45  ,crr14
00:23:33  46  ,crr16
00:23:33  47  ,crr18
00:23:33  48  --
00:23:33  49  ,hh
00:23:33  50  ,d
00:23:33  51  ,w
00:23:33  52  ,mpm
00:23:33  53  ,mph
00:23:33  54  FROM svm6122
00:23:33  55  ORDER BY ydate
00:23:33  56  /

Table created.

Elapsed: 00:00:00.45
00:23:33 SQL> 
00:23:33 SQL> -- rpt
00:23:33 SQL> 
00:23:33 SQL> SELECT
00:23:33   2  pair
00:23:33   3  ,trend
00:23:33   4  ,gatt
00:23:33   5  ,COUNT(pair)
00:23:33   6  ,AVG(g6)
00:23:33   7  FROM svm6142
00:23:33   8  GROUP BY pair,trend,gatt
00:23:33   9  ORDER BY pair,trend,gatt
00:23:33  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6560  -.0031676
eur_usd 	-1 up	      3566 .004450025
eur_usd 	-1		72
eur_usd 	 1 nup	      5906 -.00326995
eur_usd 	 1 up	      3707 .005069581

Elapsed: 00:00:00.03
00:23:33 SQL> 
00:23:33 SQL> 
00:23:33 SQL> -- Derive NTILE based params:
00:23:33 SQL> 
00:23:33 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.78
00:23:34 SQL> CREATE TABLE svm6162 COMPRESS AS
00:23:34   2  SELECT
00:23:34   3  pair
00:23:34   4  ,ydate
00:23:34   5  ,prdate
00:23:34   6  ,clse
00:23:34   7  ,g6
00:23:34   8  ,gatt
00:23:34   9  ,gattn
00:23:34  10  ,trend
00:23:34  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
00:23:34  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
00:23:34  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
00:23:34  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
00:23:34  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
00:23:34  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
00:23:34  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
00:23:34  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
00:23:34  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
00:23:34  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
00:23:34  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
00:23:34  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
00:23:34  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
00:23:34  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
00:23:34  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
00:23:34  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
00:23:34  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
00:23:34  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
00:23:34  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
00:23:34  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
00:23:34  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
00:23:34  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
00:23:34  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
00:23:34  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
00:23:34  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
00:23:34  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
00:23:34  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
00:23:34  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
00:23:34  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
00:23:34  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
00:23:34  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
00:23:34  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
00:23:34  43  ,hh  att32
00:23:34  44  ,d   att33
00:23:34  45  ,w   att34
00:23:34  46  ,mpm att35
00:23:34  47  ,mph att36
00:23:34  48  ,trend att37
00:23:34  49  FROM svm6142
00:23:34  50  ORDER BY ydate
00:23:34  51  /

Table created.

Elapsed: 00:00:04.83
00:23:39 SQL> 
00:23:39 SQL> -- rpt
00:23:39 SQL> 
00:23:39 SQL> SELECT
00:23:39   2  pair
00:23:39   3  ,trend
00:23:39   4  ,gatt
00:23:39   5  ,COUNT(pair)
00:23:39   6  ,AVG(g6)
00:23:39   7  FROM svm6162
00:23:39   8  GROUP BY pair,trend,gatt
00:23:39   9  ORDER BY pair,trend,gatt
00:23:39  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6560  -.0031676
eur_usd 	-1 up	      3566 .004450025
eur_usd 	-1		72
eur_usd 	 1 nup	      5906 -.00326995
eur_usd 	 1 up	      3707 .005069581

Elapsed: 00:00:00.03
00:23:39 SQL> 
00:23:39 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.21
00:23:39 SQL> CREATE TABLE modsrc COMPRESS AS
00:23:39   2  SELECT
00:23:39   3  pair
00:23:39   4  ,ydate
00:23:39   5  ,prdate
00:23:39   6  ,trend
00:23:39   7  ,g6
00:23:39   8  ,gatt
00:23:39   9  ,gattn
00:23:39  10  FROM svm6162
00:23:39  11  /

Table created.

Elapsed: 00:00:00.09
00:23:39 SQL> 
00:23:39 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
00:23:40 SQL> 
00:23:40 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
00:23:40 SQL> CREATE TABLE eur_ms610 COMPRESS AS
00:23:40   2  SELECT
00:23:40   3  ydate
00:23:40   4  ,trend eur_trend
00:23:40   5  ,g6    eur_g6
00:23:40   6  ,gatt  eur_gatt
00:23:40   7  ,gattn eur_gattn
00:23:40   8  FROM modsrc
00:23:40   9  /

Table created.

Elapsed: 00:00:00.07
00:23:40 SQL> 
00:23:40 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.14
00:23:40 SQL> 
00:23:40 SQL> -- I need a copy of the attributes:
00:23:40 SQL> 
00:23:40 SQL> 
00:23:40 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.18
00:23:40 SQL> CREATE TABLE eur_att COMPRESS AS
00:23:40   2  SELECT
00:23:40   3  ydate
00:23:40   4  ,att00 eur_att00
00:23:40   5  ,att01 eur_att01
00:23:40   6  ,att02 eur_att02
00:23:40   7  ,att03 eur_att03
00:23:40   8  ,att04 eur_att04
00:23:40   9  ,att05 eur_att05
00:23:40  10  ,att06 eur_att06
00:23:40  11  ,att07 eur_att07
00:23:40  12  ,att08 eur_att08
00:23:40  13  ,att09 eur_att09
00:23:40  14  ,att10 eur_att10
00:23:40  15  ,att11 eur_att11
00:23:40  16  ,att12 eur_att12
00:23:40  17  ,att13 eur_att13
00:23:40  18  ,att14 eur_att14
00:23:40  19  ,att15 eur_att15
00:23:40  20  ,att16 eur_att16
00:23:40  21  ,att17 eur_att17
00:23:40  22  ,att18 eur_att18
00:23:40  23  ,att19 eur_att19
00:23:40  24  ,att20 eur_att20
00:23:40  25  ,att21 eur_att21
00:23:40  26  ,att22 eur_att22
00:23:40  27  ,att23 eur_att23
00:23:40  28  ,att24 eur_att24
00:23:40  29  ,att25 eur_att25
00:23:40  30  ,att26 eur_att26
00:23:40  31  ,att27 eur_att27
00:23:40  32  ,att28 eur_att28
00:23:40  33  ,att29 eur_att29
00:23:40  34  ,att30 eur_att30
00:23:40  35  ,att31 eur_att31
00:23:40  36  ,att32 eur_att32
00:23:40  37  ,att33 eur_att33
00:23:40  38  ,att34 eur_att34
00:23:40  39  ,att35 eur_att35
00:23:40  40  ,att36 eur_att36
00:23:40  41  ,att37 eur_att37
00:23:40  42  FROM svm6162
00:23:40  43  /

Table created.

Elapsed: 00:00:00.19
00:23:40 SQL> 
00:23:40 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
00:23:41 SQL> 
00:23:41 SQL> -- rpt
00:23:41 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19811

Elapsed: 00:00:00.92
00:23:42 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19811

Elapsed: 00:00:00.00
00:23:42 SQL> 
00:23:42 SQL> --
00:23:42 SQL> -- aud610.sql
00:23:42 SQL> --
00:23:42 SQL> 
00:23:42 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:23:42 SQL> 
00:23:42 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.40
00:23:42 SQL> 
00:23:42 SQL> -- I created di5min here:
00:23:42 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
00:23:42 SQL> 
00:23:42 SQL> CREATE OR REPLACE VIEW svm6102 AS
00:23:42   2  SELECT
00:23:42   3  pair
00:23:42   4  ,ydate
00:23:42   5  ,prdate
00:23:42   6  ,rownum rnum -- acts as t in my time-series
00:23:42   7  ,clse
00:23:42   8  -- Derive a bunch of attributes from clse, the latest price:
00:23:42   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
00:23:42  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
00:23:42  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
00:23:42  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
00:23:42  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
00:23:42  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
00:23:42  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
00:23:42  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
00:23:42  17  --
00:23:42  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
00:23:42  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
00:23:42  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
00:23:42  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
00:23:42  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
00:23:42  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
00:23:42  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
00:23:42  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
00:23:42  26  --
00:23:42  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
00:23:42  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
00:23:42  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
00:23:42  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
00:23:42  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
00:23:42  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
00:23:42  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
00:23:42  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
00:23:42  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
00:23:42  36  FROM di5min WHERE pair LIKE'%aud%'
00:23:42  37  AND ydate > sysdate - 95
00:23:42  38  ORDER BY ydate
00:23:42  39  /

View created.

Elapsed: 00:00:00.04
00:23:42 SQL> 
00:23:42 SQL> -- rpt
00:23:42 SQL> 
00:23:42 SQL> SELECT
00:23:42   2  pair
00:23:42   3  ,COUNT(pair)
00:23:42   4  ,MIN(clse),MAX(clse)
00:23:42   5  ,MIN(avg6),MAX(avg6)
00:23:42   6  ,MIN(ydate),MAX(ydate)
00:23:42   7  FROM svm6102
00:23:42   8  GROUP BY pair
00:23:42   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19808	.95405	  1.02495 .957141438 1.02284247 2010-10-04 00:25:01 2011-01-07 00:20:00

Elapsed: 00:00:00.88
00:23:43 SQL> 
00:23:43 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
00:23:43 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.30
00:23:43 SQL> CREATE TABLE svm6122 COMPRESS AS
00:23:43   2  SELECT
00:23:43   3  pair
00:23:43   4  ,ydate
00:23:43   5  ,prdate
00:23:43   6  ,clse
00:23:43   7  -- g6 is important. I want to predict g6:
00:23:43   8  ,ld6 - clse g6
00:23:43   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
00:23:43  10  -- I want more attributes from the ones I derived above:
00:23:43  11  -- clse relation to moving-min
00:23:43  12  ,clse-min4  cm4
00:23:43  13  ,clse-min6  cm6
00:23:43  14  ,clse-min8  cm8
00:23:43  15  ,clse-min10 cm10
00:23:43  16  ,clse-min12 cm12
00:23:43  17  ,clse-min14 cm14
00:23:43  18  ,clse-min16 cm16
00:23:43  19  ,clse-min18 cm18
00:23:43  20  -- clse relation to moving-avg
00:23:43  21  ,clse-avg4  ca4
00:23:43  22  ,clse-avg6  ca6
00:23:43  23  ,clse-avg8  ca8
00:23:43  24  ,clse-avg10 ca10
00:23:43  25  ,clse-avg12 ca12
00:23:43  26  ,clse-avg14 ca14
00:23:43  27  ,clse-avg16 ca16
00:23:43  28  ,clse-avg18 ca18
00:23:43  29  -- clse relation to moving-max
00:23:43  30  ,clse-max4  cx4
00:23:43  31  ,clse-max6  cx6
00:23:43  32  ,clse-max8  cx8
00:23:43  33  ,clse-max10 cx10
00:23:43  34  ,clse-max12 cx12
00:23:43  35  ,clse-max14 cx14
00:23:43  36  ,clse-max16 cx16
00:23:43  37  ,clse-max18 cx18
00:23:43  38  -- Derive more attributes.
00:23:43  39  -- I want to use CORR() here to help SVM see the shape of the series.
00:23:43  40  -- But COVAR_POP is more stable:
00:23:43  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
00:23:43  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
00:23:43  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
00:23:43  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
00:23:43  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
00:23:43  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
00:23:43  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
00:23:43  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
00:23:43  49  -- Derive date related attributes:
00:23:43  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:23:43  51  ,0+TO_CHAR(ydate,'D')d
00:23:43  52  ,0+TO_CHAR(ydate,'W')w
00:23:43  53  -- mpm stands for minutes-past-midnight:
00:23:43  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:23:43  55  -- mph stands for minutes-past-hour:
00:23:43  56  ,0+TO_CHAR(ydate,'MI')mph
00:23:43  57  FROM svm6102
00:23:43  58  ORDER BY ydate
00:23:43  59  /

Table created.

Elapsed: 00:00:02.39
00:23:46 SQL> 
00:23:46 SQL> -- rpt
00:23:46 SQL> 
00:23:46 SQL> SELECT
00:23:46   2  pair
00:23:46   3  ,COUNT(pair)
00:23:46   4  ,MIN(clse),MAX(clse)
00:23:46   5  ,MIN(ydate),MAX(ydate)
00:23:46   6  FROM svm6122
00:23:46   7  GROUP BY pair
00:23:46   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19808	.95405	  1.02495 2010-10-04 00:25:01 2011-01-07 00:20:00

Elapsed: 00:00:00.04
00:23:46 SQL> 
00:23:46 SQL> -- Prepare for derivation of NTILE based params:
00:23:46 SQL> 
00:23:46 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.28
00:23:46 SQL> CREATE TABLE svm6142 COMPRESS AS
00:23:46   2  SELECT
00:23:46   3  pair
00:23:46   4  ,ydate
00:23:46   5  ,prdate
00:23:46   6  ,clse
00:23:46   7  ,g6
00:23:46   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
00:23:46   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
00:23:46  10  ,CASE WHEN trend IS NULL THEN 1
00:23:46  11  	    WHEN trend =0      THEN 1
00:23:46  12  	    ELSE trend END trend
00:23:46  13  ,cm4
00:23:46  14  ,cm6
00:23:46  15  ,cm8
00:23:46  16  ,cm10
00:23:46  17  ,cm12
00:23:46  18  ,cm14
00:23:46  19  ,cm16
00:23:46  20  ,cm18
00:23:46  21  --
00:23:46  22  ,ca4
00:23:46  23  ,ca6
00:23:46  24  ,ca8
00:23:46  25  ,ca10
00:23:46  26  ,ca12
00:23:46  27  ,ca14
00:23:46  28  ,ca16
00:23:46  29  ,ca18
00:23:46  30  --
00:23:46  31  ,cx4
00:23:46  32  ,cx6
00:23:46  33  ,cx8
00:23:46  34  ,cx10
00:23:46  35  ,cx12
00:23:46  36  ,cx14
00:23:46  37  ,cx16
00:23:46  38  ,cx18
00:23:46  39  --
00:23:46  40  ,crr4
00:23:46  41  ,crr6
00:23:46  42  ,crr8
00:23:46  43  ,crr10
00:23:46  44  ,crr12
00:23:46  45  ,crr14
00:23:46  46  ,crr16
00:23:46  47  ,crr18
00:23:46  48  --
00:23:46  49  ,hh
00:23:46  50  ,d
00:23:46  51  ,w
00:23:46  52  ,mpm
00:23:46  53  ,mph
00:23:46  54  FROM svm6122
00:23:46  55  ORDER BY ydate
00:23:46  56  /

Table created.

Elapsed: 00:00:00.45
00:23:46 SQL> 
00:23:46 SQL> -- rpt
00:23:46 SQL> 
00:23:46 SQL> SELECT
00:23:46   2  pair
00:23:46   3  ,trend
00:23:46   4  ,gatt
00:23:46   5  ,COUNT(pair)
00:23:46   6  ,AVG(g6)
00:23:46   7  FROM svm6142
00:23:46   8  GROUP BY pair,trend,gatt
00:23:46   9  ORDER BY pair,trend,gatt
00:23:46  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5696 -.00214426
aud_usd 	-1 up	      3701 .003745866
aud_usd 	-1		71
aud_usd 	 1 nup	      6746 -.00213756
aud_usd 	 1 up	      3593 .004054752
aud_usd 	 1		 1

6 rows selected.

Elapsed: 00:00:00.04
00:23:46 SQL> 
00:23:46 SQL> 
00:23:46 SQL> -- Derive NTILE based params:
00:23:46 SQL> 
00:23:46 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.27
00:23:47 SQL> CREATE TABLE svm6162 COMPRESS AS
00:23:47   2  SELECT
00:23:47   3  pair
00:23:47   4  ,ydate
00:23:47   5  ,prdate
00:23:47   6  ,clse
00:23:47   7  ,g6
00:23:47   8  ,gatt
00:23:47   9  ,gattn
00:23:47  10  ,trend
00:23:47  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
00:23:47  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
00:23:47  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
00:23:47  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
00:23:47  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
00:23:47  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
00:23:47  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
00:23:47  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
00:23:47  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
00:23:47  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
00:23:47  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
00:23:47  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
00:23:47  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
00:23:47  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
00:23:47  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
00:23:47  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
00:23:47  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
00:23:47  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
00:23:47  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
00:23:47  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
00:23:47  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
00:23:47  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
00:23:47  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
00:23:47  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
00:23:47  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
00:23:47  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
00:23:47  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
00:23:47  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
00:23:47  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
00:23:47  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
00:23:47  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
00:23:47  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
00:23:47  43  ,hh  att32
00:23:47  44  ,d   att33
00:23:47  45  ,w   att34
00:23:47  46  ,mpm att35
00:23:47  47  ,mph att36
00:23:47  48  ,trend att37
00:23:47  49  FROM svm6142
00:23:47  50  ORDER BY ydate
00:23:47  51  /

Table created.

Elapsed: 00:00:05.00
00:23:52 SQL> 
00:23:52 SQL> -- rpt
00:23:52 SQL> 
00:23:52 SQL> SELECT
00:23:52   2  pair
00:23:52   3  ,trend
00:23:52   4  ,gatt
00:23:52   5  ,COUNT(pair)
00:23:52   6  ,AVG(g6)
00:23:52   7  FROM svm6162
00:23:52   8  GROUP BY pair,trend,gatt
00:23:52   9  ORDER BY pair,trend,gatt
00:23:52  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5696 -.00214426
aud_usd 	-1 up	      3701 .003745866
aud_usd 	-1		71
aud_usd 	 1 nup	      6746 -.00213756
aud_usd 	 1 up	      3593 .004054752
aud_usd 	 1		 1

6 rows selected.

Elapsed: 00:00:00.03
00:23:52 SQL> 
00:23:52 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.37
00:23:52 SQL> CREATE TABLE modsrc COMPRESS AS
00:23:52   2  SELECT
00:23:52   3  pair
00:23:52   4  ,ydate
00:23:52   5  ,prdate
00:23:52   6  ,trend
00:23:52   7  ,g6
00:23:52   8  ,gatt
00:23:52   9  ,gattn
00:23:52  10  FROM svm6162
00:23:52  11  /

Table created.

Elapsed: 00:00:00.09
00:23:52 SQL> 
00:23:52 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:01.01
00:23:53 SQL> 
00:23:53 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.40
00:23:54 SQL> CREATE TABLE aud_ms610 COMPRESS AS
00:23:54   2  SELECT
00:23:54   3  ydate
00:23:54   4  ,trend aud_trend
00:23:54   5  ,g6    aud_g6
00:23:54   6  ,gatt  aud_gatt
00:23:54   7  ,gattn aud_gattn
00:23:54   8  FROM modsrc
00:23:54   9  /

Table created.

Elapsed: 00:00:00.11
00:23:54 SQL> 
00:23:54 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
00:23:54 SQL> 
00:23:54 SQL> -- I need a copy of the attributes:
00:23:54 SQL> 
00:23:54 SQL> 
00:23:54 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:01.34
00:23:56 SQL> CREATE TABLE aud_att COMPRESS AS
00:23:56   2  SELECT
00:23:56   3  ydate
00:23:56   4  ,att00 aud_att00
00:23:56   5  ,att01 aud_att01
00:23:56   6  ,att02 aud_att02
00:23:56   7  ,att03 aud_att03
00:23:56   8  ,att04 aud_att04
00:23:56   9  ,att05 aud_att05
00:23:56  10  ,att06 aud_att06
00:23:56  11  ,att07 aud_att07
00:23:56  12  ,att08 aud_att08
00:23:56  13  ,att09 aud_att09
00:23:56  14  ,att10 aud_att10
00:23:56  15  ,att11 aud_att11
00:23:56  16  ,att12 aud_att12
00:23:56  17  ,att13 aud_att13
00:23:56  18  ,att14 aud_att14
00:23:56  19  ,att15 aud_att15
00:23:56  20  ,att16 aud_att16
00:23:56  21  ,att17 aud_att17
00:23:56  22  ,att18 aud_att18
00:23:56  23  ,att19 aud_att19
00:23:56  24  ,att20 aud_att20
00:23:56  25  ,att21 aud_att21
00:23:56  26  ,att22 aud_att22
00:23:56  27  ,att23 aud_att23
00:23:56  28  ,att24 aud_att24
00:23:56  29  ,att25 aud_att25
00:23:56  30  ,att26 aud_att26
00:23:56  31  ,att27 aud_att27
00:23:56  32  ,att28 aud_att28
00:23:56  33  ,att29 aud_att29
00:23:56  34  ,att30 aud_att30
00:23:56  35  ,att31 aud_att31
00:23:56  36  ,att32 aud_att32
00:23:56  37  ,att33 aud_att33
00:23:56  38  ,att34 aud_att34
00:23:56  39  ,att35 aud_att35
00:23:56  40  ,att36 aud_att36
00:23:56  41  ,att37 aud_att37
00:23:56  42  FROM svm6162
00:23:56  43  /

Table created.

Elapsed: 00:00:00.25
00:23:56 SQL> 
00:23:56 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.62
00:23:56 SQL> 
00:23:56 SQL> -- rpt
00:23:56 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.92
00:23:57 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.00
00:23:57 SQL> 
00:23:57 SQL> --
00:23:57 SQL> -- gbp610.sql
00:23:57 SQL> --
00:23:57 SQL> 
00:23:57 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:23:57 SQL> 
00:23:57 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.64
00:23:58 SQL> 
00:23:58 SQL> -- I created di5min here:
00:23:58 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
00:23:58 SQL> 
00:23:58 SQL> CREATE OR REPLACE VIEW svm6102 AS
00:23:58   2  SELECT
00:23:58   3  pair
00:23:58   4  ,ydate
00:23:58   5  ,prdate
00:23:58   6  ,rownum rnum -- acts as t in my time-series
00:23:58   7  ,clse
00:23:58   8  -- Derive a bunch of attributes from clse, the latest price:
00:23:58   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
00:23:58  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
00:23:58  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
00:23:58  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
00:23:58  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
00:23:58  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
00:23:58  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
00:23:58  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
00:23:58  17  --
00:23:58  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
00:23:58  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
00:23:58  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
00:23:58  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
00:23:58  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
00:23:58  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
00:23:58  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
00:23:58  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
00:23:58  26  --
00:23:58  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
00:23:58  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
00:23:58  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
00:23:58  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
00:23:58  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
00:23:58  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
00:23:58  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
00:23:58  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
00:23:58  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
00:23:58  36  FROM di5min WHERE pair LIKE'%gbp%'
00:23:58  37  AND ydate > sysdate - 95
00:23:58  38  ORDER BY ydate
00:23:58  39  /

View created.

Elapsed: 00:00:00.06
00:23:58 SQL> 
00:23:58 SQL> -- rpt
00:23:58 SQL> 
00:23:58 SQL> SELECT
00:23:58   2  pair
00:23:58   3  ,COUNT(pair)
00:23:58   4  ,MIN(clse),MAX(clse)
00:23:58   5  ,MIN(avg6),MAX(avg6)
00:23:58   6  ,MIN(ydate),MAX(ydate)
00:23:58   7  FROM svm6102
00:23:58   8  GROUP BY pair
00:23:58   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19810   1.535325	   1.6295 1.53696747 1.62716986 2010-10-04 00:25:01 2011-01-07 00:20:00

Elapsed: 00:00:00.93
00:23:59 SQL> 
00:23:59 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
00:23:59 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:02.07
00:24:01 SQL> CREATE TABLE svm6122 COMPRESS AS
00:24:01   2  SELECT
00:24:01   3  pair
00:24:01   4  ,ydate
00:24:01   5  ,prdate
00:24:01   6  ,clse
00:24:01   7  -- g6 is important. I want to predict g6:
00:24:01   8  ,ld6 - clse g6
00:24:01   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
00:24:01  10  -- I want more attributes from the ones I derived above:
00:24:01  11  -- clse relation to moving-min
00:24:01  12  ,clse-min4  cm4
00:24:01  13  ,clse-min6  cm6
00:24:01  14  ,clse-min8  cm8
00:24:01  15  ,clse-min10 cm10
00:24:01  16  ,clse-min12 cm12
00:24:01  17  ,clse-min14 cm14
00:24:01  18  ,clse-min16 cm16
00:24:01  19  ,clse-min18 cm18
00:24:01  20  -- clse relation to moving-avg
00:24:01  21  ,clse-avg4  ca4
00:24:01  22  ,clse-avg6  ca6
00:24:01  23  ,clse-avg8  ca8
00:24:01  24  ,clse-avg10 ca10
00:24:01  25  ,clse-avg12 ca12
00:24:01  26  ,clse-avg14 ca14
00:24:01  27  ,clse-avg16 ca16
00:24:01  28  ,clse-avg18 ca18
00:24:01  29  -- clse relation to moving-max
00:24:01  30  ,clse-max4  cx4
00:24:01  31  ,clse-max6  cx6
00:24:01  32  ,clse-max8  cx8
00:24:01  33  ,clse-max10 cx10
00:24:01  34  ,clse-max12 cx12
00:24:01  35  ,clse-max14 cx14
00:24:01  36  ,clse-max16 cx16
00:24:01  37  ,clse-max18 cx18
00:24:01  38  -- Derive more attributes.
00:24:01  39  -- I want to use CORR() here to help SVM see the shape of the series.
00:24:01  40  -- But COVAR_POP is more stable:
00:24:01  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
00:24:01  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
00:24:01  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
00:24:01  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
00:24:01  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
00:24:01  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
00:24:01  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
00:24:01  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
00:24:01  49  -- Derive date related attributes:
00:24:01  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:24:01  51  ,0+TO_CHAR(ydate,'D')d
00:24:01  52  ,0+TO_CHAR(ydate,'W')w
00:24:01  53  -- mpm stands for minutes-past-midnight:
00:24:01  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:24:01  55  -- mph stands for minutes-past-hour:
00:24:01  56  ,0+TO_CHAR(ydate,'MI')mph
00:24:01  57  FROM svm6102
00:24:01  58  ORDER BY ydate
00:24:01  59  /

Table created.

Elapsed: 00:00:02.35
00:24:03 SQL> 
00:24:03 SQL> -- rpt
00:24:03 SQL> 
00:24:03 SQL> SELECT
00:24:03   2  pair
00:24:03   3  ,COUNT(pair)
00:24:03   4  ,MIN(clse),MAX(clse)
00:24:03   5  ,MIN(ydate),MAX(ydate)
00:24:03   6  FROM svm6122
00:24:03   7  GROUP BY pair
00:24:03   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19810   1.535325	   1.6295 2010-10-04 00:25:01 2011-01-07 00:20:00

Elapsed: 00:00:00.31
00:24:04 SQL> 
00:24:04 SQL> -- Prepare for derivation of NTILE based params:
00:24:04 SQL> 
00:24:04 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:01.58
00:24:05 SQL> CREATE TABLE svm6142 COMPRESS AS
00:24:05   2  SELECT
00:24:05   3  pair
00:24:05   4  ,ydate
00:24:05   5  ,prdate
00:24:05   6  ,clse
00:24:05   7  ,g6
00:24:05   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
00:24:05   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
00:24:05  10  ,CASE WHEN trend IS NULL THEN 1
00:24:05  11  	    WHEN trend =0      THEN 1
00:24:05  12  	    ELSE trend END trend
00:24:05  13  ,cm4
00:24:05  14  ,cm6
00:24:05  15  ,cm8
00:24:05  16  ,cm10
00:24:05  17  ,cm12
00:24:05  18  ,cm14
00:24:05  19  ,cm16
00:24:05  20  ,cm18
00:24:05  21  --
00:24:05  22  ,ca4
00:24:05  23  ,ca6
00:24:05  24  ,ca8
00:24:05  25  ,ca10
00:24:05  26  ,ca12
00:24:05  27  ,ca14
00:24:05  28  ,ca16
00:24:05  29  ,ca18
00:24:05  30  --
00:24:05  31  ,cx4
00:24:05  32  ,cx6
00:24:05  33  ,cx8
00:24:05  34  ,cx10
00:24:05  35  ,cx12
00:24:05  36  ,cx14
00:24:05  37  ,cx16
00:24:05  38  ,cx18
00:24:05  39  --
00:24:05  40  ,crr4
00:24:05  41  ,crr6
00:24:05  42  ,crr8
00:24:05  43  ,crr10
00:24:05  44  ,crr12
00:24:05  45  ,crr14
00:24:05  46  ,crr16
00:24:05  47  ,crr18
00:24:05  48  --
00:24:05  49  ,hh
00:24:05  50  ,d
00:24:05  51  ,w
00:24:05  52  ,mpm
00:24:05  53  ,mph
00:24:05  54  FROM svm6122
00:24:05  55  ORDER BY ydate
00:24:05  56  /

Table created.

Elapsed: 00:00:00.45
00:24:06 SQL> 
00:24:06 SQL> -- rpt
00:24:06 SQL> 
00:24:06 SQL> SELECT
00:24:06   2  pair
00:24:06   3  ,trend
00:24:06   4  ,gatt
00:24:06   5  ,COUNT(pair)
00:24:06   6  ,AVG(g6)
00:24:06   7  FROM svm6142
00:24:06   8  GROUP BY pair,trend,gatt
00:24:06   9  ORDER BY pair,trend,gatt
00:24:06  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6394  -.0026328
gbp_usd 	-1 up	      3572 .004342711
gbp_usd 	-1		72
gbp_usd 	 1 nup	      6309 -.00265313
gbp_usd 	 1 up	      3463  .00452008

Elapsed: 00:00:00.05
00:24:06 SQL> 
00:24:06 SQL> 
00:24:06 SQL> -- Derive NTILE based params:
00:24:06 SQL> 
00:24:06 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.64
00:24:06 SQL> CREATE TABLE svm6162 COMPRESS AS
00:24:06   2  SELECT
00:24:06   3  pair
00:24:06   4  ,ydate
00:24:06   5  ,prdate
00:24:06   6  ,clse
00:24:06   7  ,g6
00:24:06   8  ,gatt
00:24:06   9  ,gattn
00:24:06  10  ,trend
00:24:06  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
00:24:06  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
00:24:06  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
00:24:06  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
00:24:06  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
00:24:06  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
00:24:06  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
00:24:06  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
00:24:06  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
00:24:06  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
00:24:06  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
00:24:06  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
00:24:06  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
00:24:06  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
00:24:06  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
00:24:06  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
00:24:06  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
00:24:06  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
00:24:06  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
00:24:06  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
00:24:06  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
00:24:06  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
00:24:06  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
00:24:06  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
00:24:06  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
00:24:06  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
00:24:06  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
00:24:06  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
00:24:06  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
00:24:06  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
00:24:06  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
00:24:06  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
00:24:06  43  ,hh  att32
00:24:06  44  ,d   att33
00:24:06  45  ,w   att34
00:24:06  46  ,mpm att35
00:24:06  47  ,mph att36
00:24:06  48  ,trend att37
00:24:06  49  FROM svm6142
00:24:06  50  ORDER BY ydate
00:24:06  51  /

Table created.

Elapsed: 00:00:05.03
00:24:11 SQL> 
00:24:11 SQL> -- rpt
00:24:11 SQL> 
00:24:11 SQL> SELECT
00:24:11   2  pair
00:24:11   3  ,trend
00:24:11   4  ,gatt
00:24:11   5  ,COUNT(pair)
00:24:11   6  ,AVG(g6)
00:24:11   7  FROM svm6162
00:24:11   8  GROUP BY pair,trend,gatt
00:24:11   9  ORDER BY pair,trend,gatt
00:24:11  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6394  -.0026328
gbp_usd 	-1 up	      3572 .004342711
gbp_usd 	-1		72
gbp_usd 	 1 nup	      6309 -.00265313
gbp_usd 	 1 up	      3463  .00452008

Elapsed: 00:00:00.03
00:24:12 SQL> 
00:24:12 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.09
00:24:12 SQL> CREATE TABLE modsrc COMPRESS AS
00:24:12   2  SELECT
00:24:12   3  pair
00:24:12   4  ,ydate
00:24:12   5  ,prdate
00:24:12   6  ,trend
00:24:12   7  ,g6
00:24:12   8  ,gatt
00:24:12   9  ,gattn
00:24:12  10  FROM svm6162
00:24:12  11  /

Table created.

Elapsed: 00:00:00.08
00:24:12 SQL> 
00:24:12 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
00:24:12 SQL> 
00:24:12 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.07
00:24:12 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
00:24:12   2  SELECT
00:24:12   3  ydate
00:24:12   4  ,trend gbp_trend
00:24:12   5  ,g6    gbp_g6
00:24:12   6  ,gatt  gbp_gatt
00:24:12   7  ,gattn gbp_gattn
00:24:12   8  FROM modsrc
00:24:12   9  /

Table created.

Elapsed: 00:00:00.07
00:24:12 SQL> 
00:24:12 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
00:24:12 SQL> 
00:24:12 SQL> -- I need a copy of the attributes:
00:24:12 SQL> 
00:24:12 SQL> 
00:24:12 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.07
00:24:12 SQL> CREATE TABLE gbp_att COMPRESS AS
00:24:12   2  SELECT
00:24:12   3  ydate
00:24:12   4  ,att00 gbp_att00
00:24:12   5  ,att01 gbp_att01
00:24:12   6  ,att02 gbp_att02
00:24:12   7  ,att03 gbp_att03
00:24:12   8  ,att04 gbp_att04
00:24:12   9  ,att05 gbp_att05
00:24:12  10  ,att06 gbp_att06
00:24:12  11  ,att07 gbp_att07
00:24:12  12  ,att08 gbp_att08
00:24:12  13  ,att09 gbp_att09
00:24:12  14  ,att10 gbp_att10
00:24:12  15  ,att11 gbp_att11
00:24:12  16  ,att12 gbp_att12
00:24:12  17  ,att13 gbp_att13
00:24:12  18  ,att14 gbp_att14
00:24:12  19  ,att15 gbp_att15
00:24:12  20  ,att16 gbp_att16
00:24:12  21  ,att17 gbp_att17
00:24:12  22  ,att18 gbp_att18
00:24:12  23  ,att19 gbp_att19
00:24:12  24  ,att20 gbp_att20
00:24:12  25  ,att21 gbp_att21
00:24:12  26  ,att22 gbp_att22
00:24:12  27  ,att23 gbp_att23
00:24:12  28  ,att24 gbp_att24
00:24:12  29  ,att25 gbp_att25
00:24:12  30  ,att26 gbp_att26
00:24:12  31  ,att27 gbp_att27
00:24:12  32  ,att28 gbp_att28
00:24:12  33  ,att29 gbp_att29
00:24:12  34  ,att30 gbp_att30
00:24:12  35  ,att31 gbp_att31
00:24:12  36  ,att32 gbp_att32
00:24:12  37  ,att33 gbp_att33
00:24:12  38  ,att34 gbp_att34
00:24:12  39  ,att35 gbp_att35
00:24:12  40  ,att36 gbp_att36
00:24:12  41  ,att37 gbp_att37
00:24:12  42  FROM svm6162
00:24:12  43  /

Table created.

Elapsed: 00:00:00.21
00:24:13 SQL> 
00:24:13 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
00:24:13 SQL> 
00:24:13 SQL> -- rpt
00:24:13 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19810

Elapsed: 00:00:00.87
00:24:14 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19810

Elapsed: 00:00:00.00
00:24:14 SQL> 
00:24:14 SQL> --
00:24:14 SQL> -- jpy610.sql
00:24:14 SQL> --
00:24:14 SQL> 
00:24:14 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:24:14 SQL> 
00:24:14 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.44
00:24:14 SQL> 
00:24:14 SQL> -- I created di5min here:
00:24:14 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
00:24:14 SQL> 
00:24:14 SQL> CREATE OR REPLACE VIEW svm6102 AS
00:24:14   2  SELECT
00:24:14   3  pair
00:24:14   4  ,ydate
00:24:14   5  ,prdate
00:24:14   6  ,rownum rnum -- acts as t in my time-series
00:24:14   7  ,clse
00:24:14   8  -- Derive a bunch of attributes from clse, the latest price:
00:24:14   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
00:24:14  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
00:24:14  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
00:24:14  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
00:24:14  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
00:24:14  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
00:24:14  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
00:24:14  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
00:24:14  17  --
00:24:14  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
00:24:14  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
00:24:14  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
00:24:14  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
00:24:14  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
00:24:14  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
00:24:14  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
00:24:14  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
00:24:14  26  --
00:24:14  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
00:24:14  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
00:24:14  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
00:24:14  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
00:24:14  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
00:24:14  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
00:24:14  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
00:24:14  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
00:24:14  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
00:24:14  36  FROM di5min WHERE pair LIKE'%jpy%'
00:24:14  37  AND ydate > sysdate - 95
00:24:14  38  ORDER BY ydate
00:24:14  39  /

View created.

Elapsed: 00:00:00.05
00:24:14 SQL> 
00:24:14 SQL> -- rpt
00:24:14 SQL> 
00:24:14 SQL> SELECT
00:24:14   2  pair
00:24:14   3  ,COUNT(pair)
00:24:14   4  ,MIN(clse),MAX(clse)
00:24:14   5  ,MIN(avg6),MAX(avg6)
00:24:14   6  ,MIN(ydate),MAX(ydate)
00:24:14   7  FROM svm6102
00:24:14   8  GROUP BY pair
00:24:14   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19809	 80.25	   84.485 80.3595205 84.3105479 2010-10-04 00:25:01 2011-01-07 00:20:00

Elapsed: 00:00:00.93
00:24:15 SQL> 
00:24:15 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
00:24:15 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:01.19
00:24:16 SQL> CREATE TABLE svm6122 COMPRESS AS
00:24:16   2  SELECT
00:24:16   3  pair
00:24:16   4  ,ydate
00:24:16   5  ,prdate
00:24:16   6  ,clse
00:24:16   7  -- g6 is important. I want to predict g6:
00:24:16   8  ,ld6 - clse g6
00:24:16   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
00:24:16  10  -- I want more attributes from the ones I derived above:
00:24:16  11  -- clse relation to moving-min
00:24:16  12  ,clse-min4  cm4
00:24:16  13  ,clse-min6  cm6
00:24:16  14  ,clse-min8  cm8
00:24:16  15  ,clse-min10 cm10
00:24:16  16  ,clse-min12 cm12
00:24:16  17  ,clse-min14 cm14
00:24:16  18  ,clse-min16 cm16
00:24:16  19  ,clse-min18 cm18
00:24:16  20  -- clse relation to moving-avg
00:24:16  21  ,clse-avg4  ca4
00:24:16  22  ,clse-avg6  ca6
00:24:16  23  ,clse-avg8  ca8
00:24:16  24  ,clse-avg10 ca10
00:24:16  25  ,clse-avg12 ca12
00:24:16  26  ,clse-avg14 ca14
00:24:16  27  ,clse-avg16 ca16
00:24:16  28  ,clse-avg18 ca18
00:24:16  29  -- clse relation to moving-max
00:24:16  30  ,clse-max4  cx4
00:24:16  31  ,clse-max6  cx6
00:24:16  32  ,clse-max8  cx8
00:24:16  33  ,clse-max10 cx10
00:24:16  34  ,clse-max12 cx12
00:24:16  35  ,clse-max14 cx14
00:24:16  36  ,clse-max16 cx16
00:24:16  37  ,clse-max18 cx18
00:24:16  38  -- Derive more attributes.
00:24:16  39  -- I want to use CORR() here to help SVM see the shape of the series.
00:24:16  40  -- But COVAR_POP is more stable:
00:24:16  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
00:24:16  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
00:24:16  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
00:24:16  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
00:24:16  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
00:24:16  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
00:24:16  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
00:24:16  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
00:24:16  49  -- Derive date related attributes:
00:24:16  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:24:16  51  ,0+TO_CHAR(ydate,'D')d
00:24:16  52  ,0+TO_CHAR(ydate,'W')w
00:24:16  53  -- mpm stands for minutes-past-midnight:
00:24:16  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:24:16  55  -- mph stands for minutes-past-hour:
00:24:16  56  ,0+TO_CHAR(ydate,'MI')mph
00:24:16  57  FROM svm6102
00:24:16  58  ORDER BY ydate
00:24:16  59  /

Table created.

Elapsed: 00:00:02.19
00:24:19 SQL> 
00:24:19 SQL> -- rpt
00:24:19 SQL> 
00:24:19 SQL> SELECT
00:24:19   2  pair
00:24:19   3  ,COUNT(pair)
00:24:19   4  ,MIN(clse),MAX(clse)
00:24:19   5  ,MIN(ydate),MAX(ydate)
00:24:19   6  FROM svm6122
00:24:19   7  GROUP BY pair
00:24:19   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19809	 80.25	   84.485 2010-10-04 00:25:01 2011-01-07 00:20:00

Elapsed: 00:00:00.04
00:24:19 SQL> 
00:24:19 SQL> -- Prepare for derivation of NTILE based params:
00:24:19 SQL> 
00:24:19 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.24
00:24:19 SQL> CREATE TABLE svm6142 COMPRESS AS
00:24:19   2  SELECT
00:24:19   3  pair
00:24:19   4  ,ydate
00:24:19   5  ,prdate
00:24:19   6  ,clse
00:24:19   7  ,g6
00:24:19   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
00:24:19   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
00:24:19  10  ,CASE WHEN trend IS NULL THEN 1
00:24:19  11  	    WHEN trend =0      THEN 1
00:24:19  12  	    ELSE trend END trend
00:24:19  13  ,cm4
00:24:19  14  ,cm6
00:24:19  15  ,cm8
00:24:19  16  ,cm10
00:24:19  17  ,cm12
00:24:19  18  ,cm14
00:24:19  19  ,cm16
00:24:19  20  ,cm18
00:24:19  21  --
00:24:19  22  ,ca4
00:24:19  23  ,ca6
00:24:19  24  ,ca8
00:24:19  25  ,ca10
00:24:19  26  ,ca12
00:24:19  27  ,ca14
00:24:19  28  ,ca16
00:24:19  29  ,ca18
00:24:19  30  --
00:24:19  31  ,cx4
00:24:19  32  ,cx6
00:24:19  33  ,cx8
00:24:19  34  ,cx10
00:24:19  35  ,cx12
00:24:19  36  ,cx14
00:24:19  37  ,cx16
00:24:19  38  ,cx18
00:24:19  39  --
00:24:19  40  ,crr4
00:24:19  41  ,crr6
00:24:19  42  ,crr8
00:24:19  43  ,crr10
00:24:19  44  ,crr12
00:24:19  45  ,crr14
00:24:19  46  ,crr16
00:24:19  47  ,crr18
00:24:19  48  --
00:24:19  49  ,hh
00:24:19  50  ,d
00:24:19  51  ,w
00:24:19  52  ,mpm
00:24:19  53  ,mph
00:24:19  54  FROM svm6122
00:24:19  55  ORDER BY ydate
00:24:19  56  /

Table created.

Elapsed: 00:00:00.39
00:24:19 SQL> 
00:24:19 SQL> -- rpt
00:24:19 SQL> 
00:24:19 SQL> SELECT
00:24:19   2  pair
00:24:19   3  ,trend
00:24:19   4  ,gatt
00:24:19   5  ,COUNT(pair)
00:24:19   6  ,AVG(g6)
00:24:19   7  FROM svm6142
00:24:19   8  GROUP BY pair,trend,gatt
00:24:19   9  ORDER BY pair,trend,gatt
00:24:19  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5209 -.16597909
usd_jpy 	-1 up	      4910 .169384962
usd_jpy 	 1 nup	      5046 -.15464175
usd_jpy 	 1 up	      4572 .173672557
usd_jpy 	 1		72

Elapsed: 00:00:00.04
00:24:19 SQL> 
00:24:19 SQL> 
00:24:19 SQL> -- Derive NTILE based params:
00:24:19 SQL> 
00:24:19 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.23
00:24:20 SQL> CREATE TABLE svm6162 COMPRESS AS
00:24:20   2  SELECT
00:24:20   3  pair
00:24:20   4  ,ydate
00:24:20   5  ,prdate
00:24:20   6  ,clse
00:24:20   7  ,g6
00:24:20   8  ,gatt
00:24:20   9  ,gattn
00:24:20  10  ,trend
00:24:20  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
00:24:20  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
00:24:20  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
00:24:20  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
00:24:20  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
00:24:20  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
00:24:20  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
00:24:20  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
00:24:20  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
00:24:20  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
00:24:20  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
00:24:20  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
00:24:20  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
00:24:20  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
00:24:20  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
00:24:20  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
00:24:20  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
00:24:20  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
00:24:20  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
00:24:20  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
00:24:20  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
00:24:20  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
00:24:20  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
00:24:20  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
00:24:20  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
00:24:20  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
00:24:20  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
00:24:20  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
00:24:20  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
00:24:20  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
00:24:20  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
00:24:20  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
00:24:20  43  ,hh  att32
00:24:20  44  ,d   att33
00:24:20  45  ,w   att34
00:24:20  46  ,mpm att35
00:24:20  47  ,mph att36
00:24:20  48  ,trend att37
00:24:20  49  FROM svm6142
00:24:20  50  ORDER BY ydate
00:24:20  51  /

Table created.

Elapsed: 00:00:04.78
00:24:24 SQL> 
00:24:24 SQL> -- rpt
00:24:24 SQL> 
00:24:24 SQL> SELECT
00:24:24   2  pair
00:24:24   3  ,trend
00:24:24   4  ,gatt
00:24:24   5  ,COUNT(pair)
00:24:24   6  ,AVG(g6)
00:24:24   7  FROM svm6162
00:24:24   8  GROUP BY pair,trend,gatt
00:24:24   9  ORDER BY pair,trend,gatt
00:24:24  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5209 -.16597909
usd_jpy 	-1 up	      4910 .169384962
usd_jpy 	 1 nup	      5046 -.15464175
usd_jpy 	 1 up	      4572 .173672557
usd_jpy 	 1		72

Elapsed: 00:00:00.03
00:24:24 SQL> 
00:24:24 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
00:24:25 SQL> CREATE TABLE modsrc COMPRESS AS
00:24:25   2  SELECT
00:24:25   3  pair
00:24:25   4  ,ydate
00:24:25   5  ,prdate
00:24:25   6  ,trend
00:24:25   7  ,g6
00:24:25   8  ,gatt
00:24:25   9  ,gattn
00:24:25  10  FROM svm6162
00:24:25  11  /

Table created.

Elapsed: 00:00:00.08
00:24:25 SQL> 
00:24:25 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
00:24:25 SQL> 
00:24:25 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
00:24:25 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
00:24:25   2  SELECT
00:24:25   3  ydate
00:24:25   4  ,trend jpy_trend
00:24:25   5  ,g6    jpy_g6
00:24:25   6  ,gatt  jpy_gatt
00:24:25   7  ,gattn jpy_gattn
00:24:25   8  FROM modsrc
00:24:25   9  /

Table created.

Elapsed: 00:00:00.08
00:24:25 SQL> 
00:24:25 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
00:24:25 SQL> 
00:24:25 SQL> -- I need a copy of the attributes:
00:24:25 SQL> 
00:24:25 SQL> 
00:24:25 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.04
00:24:25 SQL> CREATE TABLE jpy_att COMPRESS AS
00:24:25   2  SELECT
00:24:25   3  ydate
00:24:25   4  ,att00 jpy_att00
00:24:25   5  ,att01 jpy_att01
00:24:25   6  ,att02 jpy_att02
00:24:25   7  ,att03 jpy_att03
00:24:25   8  ,att04 jpy_att04
00:24:25   9  ,att05 jpy_att05
00:24:25  10  ,att06 jpy_att06
00:24:25  11  ,att07 jpy_att07
00:24:25  12  ,att08 jpy_att08
00:24:25  13  ,att09 jpy_att09
00:24:25  14  ,att10 jpy_att10
00:24:25  15  ,att11 jpy_att11
00:24:25  16  ,att12 jpy_att12
00:24:25  17  ,att13 jpy_att13
00:24:25  18  ,att14 jpy_att14
00:24:25  19  ,att15 jpy_att15
00:24:25  20  ,att16 jpy_att16
00:24:25  21  ,att17 jpy_att17
00:24:25  22  ,att18 jpy_att18
00:24:25  23  ,att19 jpy_att19
00:24:25  24  ,att20 jpy_att20
00:24:25  25  ,att21 jpy_att21
00:24:25  26  ,att22 jpy_att22
00:24:25  27  ,att23 jpy_att23
00:24:25  28  ,att24 jpy_att24
00:24:25  29  ,att25 jpy_att25
00:24:25  30  ,att26 jpy_att26
00:24:25  31  ,att27 jpy_att27
00:24:25  32  ,att28 jpy_att28
00:24:25  33  ,att29 jpy_att29
00:24:25  34  ,att30 jpy_att30
00:24:25  35  ,att31 jpy_att31
00:24:25  36  ,att32 jpy_att32
00:24:25  37  ,att33 jpy_att33
00:24:25  38  ,att34 jpy_att34
00:24:25  39  ,att35 jpy_att35
00:24:25  40  ,att36 jpy_att36
00:24:25  41  ,att37 jpy_att37
00:24:25  42  FROM svm6162
00:24:25  43  /

Table created.

Elapsed: 00:00:00.20
00:24:25 SQL> 
00:24:25 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
00:24:26 SQL> 
00:24:26 SQL> -- rpt
00:24:26 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.92
00:24:27 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.00
00:24:27 SQL> 
00:24:27 SQL> --
00:24:27 SQL> -- cad610.sql
00:24:27 SQL> --
00:24:27 SQL> 
00:24:27 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:24:27 SQL> 
00:24:27 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.37
00:24:27 SQL> 
00:24:27 SQL> -- I created di5min here:
00:24:27 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
00:24:27 SQL> 
00:24:27 SQL> CREATE OR REPLACE VIEW svm6102 AS
00:24:27   2  SELECT
00:24:27   3  pair
00:24:27   4  ,ydate
00:24:27   5  ,prdate
00:24:27   6  ,rownum rnum -- acts as t in my time-series
00:24:27   7  ,clse
00:24:27   8  -- Derive a bunch of attributes from clse, the latest price:
00:24:27   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
00:24:27  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
00:24:27  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
00:24:27  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
00:24:27  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
00:24:27  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
00:24:27  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
00:24:27  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
00:24:27  17  --
00:24:27  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
00:24:27  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
00:24:27  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
00:24:27  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
00:24:27  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
00:24:27  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
00:24:27  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
00:24:27  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
00:24:27  26  --
00:24:27  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
00:24:27  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
00:24:27  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
00:24:27  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
00:24:27  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
00:24:27  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
00:24:27  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
00:24:27  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
00:24:27  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
00:24:27  36  FROM di5min WHERE pair LIKE'%cad%'
00:24:27  37  AND ydate > sysdate - 95
00:24:27  38  ORDER BY ydate
00:24:27  39  /

View created.

Elapsed: 00:00:00.05
00:24:27 SQL> 
00:24:27 SQL> -- rpt
00:24:27 SQL> 
00:24:27 SQL> SELECT
00:24:27   2  pair
00:24:27   3  ,COUNT(pair)
00:24:27   4  ,MIN(clse),MAX(clse)
00:24:27   5  ,MIN(avg6),MAX(avg6)
00:24:27   6  ,MIN(ydate),MAX(ydate)
00:24:27   7  FROM svm6102
00:24:27   8  GROUP BY pair
00:24:27   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19809    .988925	   1.0355  .99060274 1.03282877 2010-10-04 00:25:01 2011-01-07 00:20:00

Elapsed: 00:00:00.83
00:24:28 SQL> 
00:24:28 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
00:24:28 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.29
00:24:28 SQL> CREATE TABLE svm6122 COMPRESS AS
00:24:28   2  SELECT
00:24:28   3  pair
00:24:28   4  ,ydate
00:24:28   5  ,prdate
00:24:28   6  ,clse
00:24:28   7  -- g6 is important. I want to predict g6:
00:24:28   8  ,ld6 - clse g6
00:24:28   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
00:24:28  10  -- I want more attributes from the ones I derived above:
00:24:28  11  -- clse relation to moving-min
00:24:28  12  ,clse-min4  cm4
00:24:28  13  ,clse-min6  cm6
00:24:28  14  ,clse-min8  cm8
00:24:28  15  ,clse-min10 cm10
00:24:28  16  ,clse-min12 cm12
00:24:28  17  ,clse-min14 cm14
00:24:28  18  ,clse-min16 cm16
00:24:28  19  ,clse-min18 cm18
00:24:28  20  -- clse relation to moving-avg
00:24:28  21  ,clse-avg4  ca4
00:24:28  22  ,clse-avg6  ca6
00:24:28  23  ,clse-avg8  ca8
00:24:28  24  ,clse-avg10 ca10
00:24:28  25  ,clse-avg12 ca12
00:24:28  26  ,clse-avg14 ca14
00:24:28  27  ,clse-avg16 ca16
00:24:28  28  ,clse-avg18 ca18
00:24:28  29  -- clse relation to moving-max
00:24:28  30  ,clse-max4  cx4
00:24:28  31  ,clse-max6  cx6
00:24:28  32  ,clse-max8  cx8
00:24:28  33  ,clse-max10 cx10
00:24:28  34  ,clse-max12 cx12
00:24:28  35  ,clse-max14 cx14
00:24:28  36  ,clse-max16 cx16
00:24:28  37  ,clse-max18 cx18
00:24:28  38  -- Derive more attributes.
00:24:28  39  -- I want to use CORR() here to help SVM see the shape of the series.
00:24:28  40  -- But COVAR_POP is more stable:
00:24:28  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
00:24:28  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
00:24:28  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
00:24:28  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
00:24:28  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
00:24:28  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
00:24:28  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
00:24:28  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
00:24:28  49  -- Derive date related attributes:
00:24:28  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:24:28  51  ,0+TO_CHAR(ydate,'D')d
00:24:28  52  ,0+TO_CHAR(ydate,'W')w
00:24:28  53  -- mpm stands for minutes-past-midnight:
00:24:28  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:24:28  55  -- mph stands for minutes-past-hour:
00:24:28  56  ,0+TO_CHAR(ydate,'MI')mph
00:24:28  57  FROM svm6102
00:24:28  58  ORDER BY ydate
00:24:28  59  /

Table created.

Elapsed: 00:00:02.08
00:24:30 SQL> 
00:24:30 SQL> -- rpt
00:24:30 SQL> 
00:24:30 SQL> SELECT
00:24:30   2  pair
00:24:30   3  ,COUNT(pair)
00:24:30   4  ,MIN(clse),MAX(clse)
00:24:30   5  ,MIN(ydate),MAX(ydate)
00:24:30   6  FROM svm6122
00:24:30   7  GROUP BY pair
00:24:30   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19809    .988925	   1.0355 2010-10-04 00:25:01 2011-01-07 00:20:00

Elapsed: 00:00:00.04
00:24:30 SQL> 
00:24:30 SQL> -- Prepare for derivation of NTILE based params:
00:24:30 SQL> 
00:24:30 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.31
00:24:31 SQL> CREATE TABLE svm6142 COMPRESS AS
00:24:31   2  SELECT
00:24:31   3  pair
00:24:31   4  ,ydate
00:24:31   5  ,prdate
00:24:31   6  ,clse
00:24:31   7  ,g6
00:24:31   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
00:24:31   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
00:24:31  10  ,CASE WHEN trend IS NULL THEN 1
00:24:31  11  	    WHEN trend =0      THEN 1
00:24:31  12  	    ELSE trend END trend
00:24:31  13  ,cm4
00:24:31  14  ,cm6
00:24:31  15  ,cm8
00:24:31  16  ,cm10
00:24:31  17  ,cm12
00:24:31  18  ,cm14
00:24:31  19  ,cm16
00:24:31  20  ,cm18
00:24:31  21  --
00:24:31  22  ,ca4
00:24:31  23  ,ca6
00:24:31  24  ,ca8
00:24:31  25  ,ca10
00:24:31  26  ,ca12
00:24:31  27  ,ca14
00:24:31  28  ,ca16
00:24:31  29  ,ca18
00:24:31  30  --
00:24:31  31  ,cx4
00:24:31  32  ,cx6
00:24:31  33  ,cx8
00:24:31  34  ,cx10
00:24:31  35  ,cx12
00:24:31  36  ,cx14
00:24:31  37  ,cx16
00:24:31  38  ,cx18
00:24:31  39  --
00:24:31  40  ,crr4
00:24:31  41  ,crr6
00:24:31  42  ,crr8
00:24:31  43  ,crr10
00:24:31  44  ,crr12
00:24:31  45  ,crr14
00:24:31  46  ,crr16
00:24:31  47  ,crr18
00:24:31  48  --
00:24:31  49  ,hh
00:24:31  50  ,d
00:24:31  51  ,w
00:24:31  52  ,mpm
00:24:31  53  ,mph
00:24:31  54  FROM svm6122
00:24:31  55  ORDER BY ydate
00:24:31  56  /

Table created.

Elapsed: 00:00:00.38
00:24:31 SQL> 
00:24:31 SQL> -- rpt
00:24:31 SQL> 
00:24:31 SQL> SELECT
00:24:31   2  pair
00:24:31   3  ,trend
00:24:31   4  ,gatt
00:24:31   5  ,COUNT(pair)
00:24:31   6  ,AVG(g6)
00:24:31   7  FROM svm6142
00:24:31   8  GROUP BY pair,trend,gatt
00:24:31   9  ORDER BY pair,trend,gatt
00:24:31  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7317 -.00124234
usd_cad 	-1 up	      3187 .003050543
usd_cad 	-1		20
usd_cad 	 1 nup	      6830 -.00160966
usd_cad 	 1 up	      2403 .003634164
usd_cad 	 1		52

6 rows selected.

Elapsed: 00:00:00.04
00:24:31 SQL> 
00:24:31 SQL> 
00:24:31 SQL> -- Derive NTILE based params:
00:24:31 SQL> 
00:24:31 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
00:24:31 SQL> CREATE TABLE svm6162 COMPRESS AS
00:24:31   2  SELECT
00:24:31   3  pair
00:24:31   4  ,ydate
00:24:31   5  ,prdate
00:24:31   6  ,clse
00:24:31   7  ,g6
00:24:31   8  ,gatt
00:24:31   9  ,gattn
00:24:31  10  ,trend
00:24:31  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
00:24:31  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
00:24:31  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
00:24:31  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
00:24:31  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
00:24:31  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
00:24:31  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
00:24:31  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
00:24:31  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
00:24:31  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
00:24:31  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
00:24:31  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
00:24:31  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
00:24:31  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
00:24:31  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
00:24:31  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
00:24:31  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
00:24:31  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
00:24:31  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
00:24:31  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
00:24:31  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
00:24:31  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
00:24:31  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
00:24:31  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
00:24:31  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
00:24:31  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
00:24:31  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
00:24:31  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
00:24:31  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
00:24:31  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
00:24:31  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
00:24:31  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
00:24:31  43  ,hh  att32
00:24:31  44  ,d   att33
00:24:31  45  ,w   att34
00:24:31  46  ,mpm att35
00:24:31  47  ,mph att36
00:24:31  48  ,trend att37
00:24:31  49  FROM svm6142
00:24:31  50  ORDER BY ydate
00:24:31  51  /

Table created.

Elapsed: 00:00:04.77
00:24:36 SQL> 
00:24:36 SQL> -- rpt
00:24:36 SQL> 
00:24:36 SQL> SELECT
00:24:36   2  pair
00:24:36   3  ,trend
00:24:36   4  ,gatt
00:24:36   5  ,COUNT(pair)
00:24:36   6  ,AVG(g6)
00:24:36   7  FROM svm6162
00:24:36   8  GROUP BY pair,trend,gatt
00:24:36   9  ORDER BY pair,trend,gatt
00:24:36  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7317 -.00124234
usd_cad 	-1 up	      3187 .003050543
usd_cad 	-1		20
usd_cad 	 1 nup	      6830 -.00160966
usd_cad 	 1 up	      2403 .003634164
usd_cad 	 1		52

6 rows selected.

Elapsed: 00:00:00.03
00:24:36 SQL> 
00:24:36 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.10
00:24:36 SQL> CREATE TABLE modsrc COMPRESS AS
00:24:36   2  SELECT
00:24:36   3  pair
00:24:36   4  ,ydate
00:24:36   5  ,prdate
00:24:36   6  ,trend
00:24:36   7  ,g6
00:24:36   8  ,gatt
00:24:36   9  ,gattn
00:24:36  10  FROM svm6162
00:24:36  11  /

Table created.

Elapsed: 00:00:00.10
00:24:36 SQL> 
00:24:36 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.29
00:24:37 SQL> 
00:24:37 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
00:24:37 SQL> CREATE TABLE cad_ms610 COMPRESS AS
00:24:37   2  SELECT
00:24:37   3  ydate
00:24:37   4  ,trend cad_trend
00:24:37   5  ,g6    cad_g6
00:24:37   6  ,gatt  cad_gatt
00:24:37   7  ,gattn cad_gattn
00:24:37   8  FROM modsrc
00:24:37   9  /

Table created.

Elapsed: 00:00:00.06
00:24:37 SQL> 
00:24:37 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
00:24:37 SQL> 
00:24:37 SQL> -- I need a copy of the attributes:
00:24:37 SQL> 
00:24:37 SQL> 
00:24:37 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.04
00:24:37 SQL> CREATE TABLE cad_att COMPRESS AS
00:24:37   2  SELECT
00:24:37   3  ydate
00:24:37   4  ,att00 cad_att00
00:24:37   5  ,att01 cad_att01
00:24:37   6  ,att02 cad_att02
00:24:37   7  ,att03 cad_att03
00:24:37   8  ,att04 cad_att04
00:24:37   9  ,att05 cad_att05
00:24:37  10  ,att06 cad_att06
00:24:37  11  ,att07 cad_att07
00:24:37  12  ,att08 cad_att08
00:24:37  13  ,att09 cad_att09
00:24:37  14  ,att10 cad_att10
00:24:37  15  ,att11 cad_att11
00:24:37  16  ,att12 cad_att12
00:24:37  17  ,att13 cad_att13
00:24:37  18  ,att14 cad_att14
00:24:37  19  ,att15 cad_att15
00:24:37  20  ,att16 cad_att16
00:24:37  21  ,att17 cad_att17
00:24:37  22  ,att18 cad_att18
00:24:37  23  ,att19 cad_att19
00:24:37  24  ,att20 cad_att20
00:24:37  25  ,att21 cad_att21
00:24:37  26  ,att22 cad_att22
00:24:37  27  ,att23 cad_att23
00:24:37  28  ,att24 cad_att24
00:24:37  29  ,att25 cad_att25
00:24:37  30  ,att26 cad_att26
00:24:37  31  ,att27 cad_att27
00:24:37  32  ,att28 cad_att28
00:24:37  33  ,att29 cad_att29
00:24:37  34  ,att30 cad_att30
00:24:37  35  ,att31 cad_att31
00:24:37  36  ,att32 cad_att32
00:24:37  37  ,att33 cad_att33
00:24:37  38  ,att34 cad_att34
00:24:37  39  ,att35 cad_att35
00:24:37  40  ,att36 cad_att36
00:24:37  41  ,att37 cad_att37
00:24:37  42  FROM svm6162
00:24:37  43  /

Table created.

Elapsed: 00:00:00.18
00:24:37 SQL> 
00:24:37 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
00:24:38 SQL> 
00:24:38 SQL> -- rpt
00:24:38 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.84
00:24:38 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.00
00:24:38 SQL> 
00:24:38 SQL> --
00:24:38 SQL> -- chf610.sql
00:24:38 SQL> --
00:24:38 SQL> 
00:24:38 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:24:38 SQL> 
00:24:38 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.40
00:24:39 SQL> 
00:24:39 SQL> -- I created di5min here:
00:24:39 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
00:24:39 SQL> 
00:24:39 SQL> CREATE OR REPLACE VIEW svm6102 AS
00:24:39   2  SELECT
00:24:39   3  pair
00:24:39   4  ,ydate
00:24:39   5  ,prdate
00:24:39   6  ,rownum rnum -- acts as t in my time-series
00:24:39   7  ,clse
00:24:39   8  -- Derive a bunch of attributes from clse, the latest price:
00:24:39   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
00:24:39  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
00:24:39  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
00:24:39  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
00:24:39  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
00:24:39  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
00:24:39  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
00:24:39  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
00:24:39  17  --
00:24:39  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
00:24:39  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
00:24:39  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
00:24:39  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
00:24:39  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
00:24:39  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
00:24:39  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
00:24:39  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
00:24:39  26  --
00:24:39  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
00:24:39  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
00:24:39  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
00:24:39  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
00:24:39  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
00:24:39  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
00:24:39  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
00:24:39  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
00:24:39  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
00:24:39  36  FROM di5min WHERE pair LIKE'%chf%'
00:24:39  37  AND ydate > sysdate - 95
00:24:39  38  ORDER BY ydate
00:24:39  39  /

View created.

Elapsed: 00:00:00.05
00:24:39 SQL> 
00:24:39 SQL> -- rpt
00:24:39 SQL> 
00:24:39 SQL> SELECT
00:24:39   2  pair
00:24:39   3  ,COUNT(pair)
00:24:39   4  ,MIN(clse),MAX(clse)
00:24:39   5  ,MIN(avg6),MAX(avg6)
00:24:39   6  ,MIN(ydate),MAX(ydate)
00:24:39   7  FROM svm6102
00:24:39   8  GROUP BY pair
00:24:39   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19812    .931675	  1.00635 .933257706 1.00498151 2010-10-04 00:25:01 2011-01-07 00:20:00

Elapsed: 00:00:00.86
00:24:40 SQL> 
00:24:40 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
00:24:40 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.27
00:24:40 SQL> CREATE TABLE svm6122 COMPRESS AS
00:24:40   2  SELECT
00:24:40   3  pair
00:24:40   4  ,ydate
00:24:40   5  ,prdate
00:24:40   6  ,clse
00:24:40   7  -- g6 is important. I want to predict g6:
00:24:40   8  ,ld6 - clse g6
00:24:40   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
00:24:40  10  -- I want more attributes from the ones I derived above:
00:24:40  11  -- clse relation to moving-min
00:24:40  12  ,clse-min4  cm4
00:24:40  13  ,clse-min6  cm6
00:24:40  14  ,clse-min8  cm8
00:24:40  15  ,clse-min10 cm10
00:24:40  16  ,clse-min12 cm12
00:24:40  17  ,clse-min14 cm14
00:24:40  18  ,clse-min16 cm16
00:24:40  19  ,clse-min18 cm18
00:24:40  20  -- clse relation to moving-avg
00:24:40  21  ,clse-avg4  ca4
00:24:40  22  ,clse-avg6  ca6
00:24:40  23  ,clse-avg8  ca8
00:24:40  24  ,clse-avg10 ca10
00:24:40  25  ,clse-avg12 ca12
00:24:40  26  ,clse-avg14 ca14
00:24:40  27  ,clse-avg16 ca16
00:24:40  28  ,clse-avg18 ca18
00:24:40  29  -- clse relation to moving-max
00:24:40  30  ,clse-max4  cx4
00:24:40  31  ,clse-max6  cx6
00:24:40  32  ,clse-max8  cx8
00:24:40  33  ,clse-max10 cx10
00:24:40  34  ,clse-max12 cx12
00:24:40  35  ,clse-max14 cx14
00:24:40  36  ,clse-max16 cx16
00:24:40  37  ,clse-max18 cx18
00:24:40  38  -- Derive more attributes.
00:24:40  39  -- I want to use CORR() here to help SVM see the shape of the series.
00:24:40  40  -- But COVAR_POP is more stable:
00:24:40  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
00:24:40  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
00:24:40  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
00:24:40  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
00:24:40  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
00:24:40  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
00:24:40  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
00:24:40  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
00:24:40  49  -- Derive date related attributes:
00:24:40  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:24:40  51  ,0+TO_CHAR(ydate,'D')d
00:24:40  52  ,0+TO_CHAR(ydate,'W')w
00:24:40  53  -- mpm stands for minutes-past-midnight:
00:24:40  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:24:40  55  -- mph stands for minutes-past-hour:
00:24:40  56  ,0+TO_CHAR(ydate,'MI')mph
00:24:40  57  FROM svm6102
00:24:40  58  ORDER BY ydate
00:24:40  59  /

Table created.

Elapsed: 00:00:02.15
00:24:42 SQL> 
00:24:42 SQL> -- rpt
00:24:42 SQL> 
00:24:42 SQL> SELECT
00:24:42   2  pair
00:24:42   3  ,COUNT(pair)
00:24:42   4  ,MIN(clse),MAX(clse)
00:24:42   5  ,MIN(ydate),MAX(ydate)
00:24:42   6  FROM svm6122
00:24:42   7  GROUP BY pair
00:24:42   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19812    .931675	  1.00635 2010-10-04 00:25:01 2011-01-07 00:20:00

Elapsed: 00:00:00.05
00:24:42 SQL> 
00:24:42 SQL> -- Prepare for derivation of NTILE based params:
00:24:42 SQL> 
00:24:42 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.22
00:24:42 SQL> CREATE TABLE svm6142 COMPRESS AS
00:24:42   2  SELECT
00:24:42   3  pair
00:24:42   4  ,ydate
00:24:42   5  ,prdate
00:24:42   6  ,clse
00:24:42   7  ,g6
00:24:42   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
00:24:42   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
00:24:42  10  ,CASE WHEN trend IS NULL THEN 1
00:24:42  11  	    WHEN trend =0      THEN 1
00:24:42  12  	    ELSE trend END trend
00:24:42  13  ,cm4
00:24:42  14  ,cm6
00:24:42  15  ,cm8
00:24:42  16  ,cm10
00:24:42  17  ,cm12
00:24:42  18  ,cm14
00:24:42  19  ,cm16
00:24:42  20  ,cm18
00:24:42  21  --
00:24:42  22  ,ca4
00:24:42  23  ,ca6
00:24:42  24  ,ca8
00:24:42  25  ,ca10
00:24:42  26  ,ca12
00:24:42  27  ,ca14
00:24:42  28  ,ca16
00:24:42  29  ,ca18
00:24:42  30  --
00:24:42  31  ,cx4
00:24:42  32  ,cx6
00:24:42  33  ,cx8
00:24:42  34  ,cx10
00:24:42  35  ,cx12
00:24:42  36  ,cx14
00:24:42  37  ,cx16
00:24:42  38  ,cx18
00:24:42  39  --
00:24:42  40  ,crr4
00:24:42  41  ,crr6
00:24:42  42  ,crr8
00:24:42  43  ,crr10
00:24:42  44  ,crr12
00:24:42  45  ,crr14
00:24:42  46  ,crr16
00:24:42  47  ,crr18
00:24:42  48  --
00:24:42  49  ,hh
00:24:42  50  ,d
00:24:42  51  ,w
00:24:42  52  ,mpm
00:24:42  53  ,mph
00:24:42  54  FROM svm6122
00:24:42  55  ORDER BY ydate
00:24:42  56  /

Table created.

Elapsed: 00:00:00.42
00:24:43 SQL> 
00:24:43 SQL> -- rpt
00:24:43 SQL> 
00:24:43 SQL> SELECT
00:24:43   2  pair
00:24:43   3  ,trend
00:24:43   4  ,gatt
00:24:43   5  ,COUNT(pair)
00:24:43   6  ,AVG(g6)
00:24:43   7  FROM svm6142
00:24:43   8  GROUP BY pair,trend,gatt
00:24:43   9  ORDER BY pair,trend,gatt
00:24:43  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7148 -.00198304
usd_chf 	-1 up	      3084 .003811053
usd_chf 	-1		29
usd_chf 	 1 nup	      6561 -.00154124
usd_chf 	 1 up	      2947 .003958126
usd_chf 	 1		43

6 rows selected.

Elapsed: 00:00:00.05
00:24:43 SQL> 
00:24:43 SQL> 
00:24:43 SQL> -- Derive NTILE based params:
00:24:43 SQL> 
00:24:43 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.17
00:24:43 SQL> CREATE TABLE svm6162 COMPRESS AS
00:24:43   2  SELECT
00:24:43   3  pair
00:24:43   4  ,ydate
00:24:43   5  ,prdate
00:24:43   6  ,clse
00:24:43   7  ,g6
00:24:43   8  ,gatt
00:24:43   9  ,gattn
00:24:43  10  ,trend
00:24:43  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
00:24:43  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
00:24:43  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
00:24:43  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
00:24:43  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
00:24:43  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
00:24:43  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
00:24:43  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
00:24:43  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
00:24:43  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
00:24:43  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
00:24:43  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
00:24:43  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
00:24:43  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
00:24:43  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
00:24:43  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
00:24:43  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
00:24:43  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
00:24:43  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
00:24:43  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
00:24:43  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
00:24:43  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
00:24:43  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
00:24:43  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
00:24:43  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
00:24:43  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
00:24:43  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
00:24:43  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
00:24:43  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
00:24:43  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
00:24:43  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
00:24:43  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
00:24:43  43  ,hh  att32
00:24:43  44  ,d   att33
00:24:43  45  ,w   att34
00:24:43  46  ,mpm att35
00:24:43  47  ,mph att36
00:24:43  48  ,trend att37
00:24:43  49  FROM svm6142
00:24:43  50  ORDER BY ydate
00:24:43  51  /

Table created.

Elapsed: 00:00:04.96
00:24:48 SQL> 
00:24:48 SQL> -- rpt
00:24:48 SQL> 
00:24:48 SQL> SELECT
00:24:48   2  pair
00:24:48   3  ,trend
00:24:48   4  ,gatt
00:24:48   5  ,COUNT(pair)
00:24:48   6  ,AVG(g6)
00:24:48   7  FROM svm6162
00:24:48   8  GROUP BY pair,trend,gatt
00:24:48   9  ORDER BY pair,trend,gatt
00:24:48  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7148 -.00198304
usd_chf 	-1 up	      3084 .003811053
usd_chf 	-1		29
usd_chf 	 1 nup	      6561 -.00154124
usd_chf 	 1 up	      2947 .003958126
usd_chf 	 1		43

6 rows selected.

Elapsed: 00:00:00.03
00:24:48 SQL> 
00:24:48 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.20
00:24:48 SQL> CREATE TABLE modsrc COMPRESS AS
00:24:48   2  SELECT
00:24:48   3  pair
00:24:48   4  ,ydate
00:24:48   5  ,prdate
00:24:48   6  ,trend
00:24:48   7  ,g6
00:24:48   8  ,gatt
00:24:48   9  ,gattn
00:24:48  10  FROM svm6162
00:24:48  11  /

Table created.

Elapsed: 00:00:00.09
00:24:48 SQL> 
00:24:48 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
00:24:49 SQL> 
00:24:49 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
00:24:49 SQL> CREATE TABLE chf_ms610 COMPRESS AS
00:24:49   2  SELECT
00:24:49   3  ydate
00:24:49   4  ,trend chf_trend
00:24:49   5  ,g6    chf_g6
00:24:49   6  ,gatt  chf_gatt
00:24:49   7  ,gattn chf_gattn
00:24:49   8  FROM modsrc
00:24:49   9  /

Table created.

Elapsed: 00:00:00.07
00:24:49 SQL> 
00:24:49 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
00:24:49 SQL> 
00:24:49 SQL> -- I need a copy of the attributes:
00:24:49 SQL> 
00:24:49 SQL> 
00:24:49 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.04
00:24:49 SQL> CREATE TABLE chf_att COMPRESS AS
00:24:49   2  SELECT
00:24:49   3  ydate
00:24:49   4  ,att00 chf_att00
00:24:49   5  ,att01 chf_att01
00:24:49   6  ,att02 chf_att02
00:24:49   7  ,att03 chf_att03
00:24:49   8  ,att04 chf_att04
00:24:49   9  ,att05 chf_att05
00:24:49  10  ,att06 chf_att06
00:24:49  11  ,att07 chf_att07
00:24:49  12  ,att08 chf_att08
00:24:49  13  ,att09 chf_att09
00:24:49  14  ,att10 chf_att10
00:24:49  15  ,att11 chf_att11
00:24:49  16  ,att12 chf_att12
00:24:49  17  ,att13 chf_att13
00:24:49  18  ,att14 chf_att14
00:24:49  19  ,att15 chf_att15
00:24:49  20  ,att16 chf_att16
00:24:49  21  ,att17 chf_att17
00:24:49  22  ,att18 chf_att18
00:24:49  23  ,att19 chf_att19
00:24:49  24  ,att20 chf_att20
00:24:49  25  ,att21 chf_att21
00:24:49  26  ,att22 chf_att22
00:24:49  27  ,att23 chf_att23
00:24:49  28  ,att24 chf_att24
00:24:49  29  ,att25 chf_att25
00:24:49  30  ,att26 chf_att26
00:24:49  31  ,att27 chf_att27
00:24:49  32  ,att28 chf_att28
00:24:49  33  ,att29 chf_att29
00:24:49  34  ,att30 chf_att30
00:24:49  35  ,att31 chf_att31
00:24:49  36  ,att32 chf_att32
00:24:49  37  ,att33 chf_att33
00:24:49  38  ,att34 chf_att34
00:24:49  39  ,att35 chf_att35
00:24:49  40  ,att36 chf_att36
00:24:49  41  ,att37 chf_att37
00:24:49  42  FROM svm6162
00:24:49  43  /

Table created.

Elapsed: 00:00:00.18
00:24:49 SQL> 
00:24:49 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.50
00:24:50 SQL> 
00:24:50 SQL> -- rpt
00:24:50 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19812

Elapsed: 00:00:00.89
00:24:51 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19812

Elapsed: 00:00:00.00
00:24:51 SQL> 
00:24:51 SQL> --
00:24:51 SQL> -- ech610.sql
00:24:51 SQL> --
00:24:51 SQL> 
00:24:51 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:24:51 SQL> 
00:24:51 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.58
00:24:51 SQL> 
00:24:51 SQL> -- I created di5min here:
00:24:51 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
00:24:51 SQL> 
00:24:51 SQL> CREATE OR REPLACE VIEW svm6102 AS
00:24:51   2  SELECT
00:24:51   3  pair
00:24:51   4  ,ydate
00:24:51   5  ,prdate
00:24:51   6  ,rownum rnum -- acts as t in my time-series
00:24:51   7  ,clse
00:24:51   8  -- Derive a bunch of attributes from clse, the latest price:
00:24:51   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
00:24:51  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
00:24:51  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
00:24:51  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
00:24:51  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
00:24:51  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
00:24:51  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
00:24:51  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
00:24:51  17  --
00:24:51  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
00:24:51  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
00:24:51  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
00:24:51  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
00:24:51  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
00:24:51  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
00:24:51  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
00:24:51  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
00:24:51  26  --
00:24:51  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
00:24:51  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
00:24:51  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
00:24:51  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
00:24:51  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
00:24:51  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
00:24:51  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
00:24:51  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
00:24:51  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
00:24:51  36  FROM di5min WHERE pair LIKE'%ech%'
00:24:51  37  AND ydate > sysdate - 95
00:24:51  38  ORDER BY ydate
00:24:51  39  /

View created.

Elapsed: 00:00:00.05
00:24:51 SQL> 
00:24:51 SQL> -- rpt
00:24:51 SQL> 
00:24:51 SQL> SELECT
00:24:51   2  pair
00:24:51   3  ,COUNT(pair)
00:24:51   4  ,MIN(clse),MAX(clse)
00:24:51   5  ,MIN(avg6),MAX(avg6)
00:24:51   6  ,MIN(ydate),MAX(ydate)
00:24:51   7  FROM svm6102
00:24:51   8  GROUP BY pair
00:24:51   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19810 1.24182424 1.38284305 1.24320711 1.37986485 2010-10-04 00:25:01 2011-01-07 00:20:00

Elapsed: 00:00:00.82
00:24:52 SQL> 
00:24:52 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
00:24:52 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.25
00:24:52 SQL> CREATE TABLE svm6122 COMPRESS AS
00:24:52   2  SELECT
00:24:52   3  pair
00:24:52   4  ,ydate
00:24:52   5  ,prdate
00:24:52   6  ,clse
00:24:52   7  -- g6 is important. I want to predict g6:
00:24:52   8  ,ld6 - clse g6
00:24:52   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
00:24:52  10  -- I want more attributes from the ones I derived above:
00:24:52  11  -- clse relation to moving-min
00:24:52  12  ,clse-min4  cm4
00:24:52  13  ,clse-min6  cm6
00:24:52  14  ,clse-min8  cm8
00:24:52  15  ,clse-min10 cm10
00:24:52  16  ,clse-min12 cm12
00:24:52  17  ,clse-min14 cm14
00:24:52  18  ,clse-min16 cm16
00:24:52  19  ,clse-min18 cm18
00:24:52  20  -- clse relation to moving-avg
00:24:52  21  ,clse-avg4  ca4
00:24:52  22  ,clse-avg6  ca6
00:24:52  23  ,clse-avg8  ca8
00:24:52  24  ,clse-avg10 ca10
00:24:52  25  ,clse-avg12 ca12
00:24:52  26  ,clse-avg14 ca14
00:24:52  27  ,clse-avg16 ca16
00:24:52  28  ,clse-avg18 ca18
00:24:52  29  -- clse relation to moving-max
00:24:52  30  ,clse-max4  cx4
00:24:52  31  ,clse-max6  cx6
00:24:52  32  ,clse-max8  cx8
00:24:52  33  ,clse-max10 cx10
00:24:52  34  ,clse-max12 cx12
00:24:52  35  ,clse-max14 cx14
00:24:52  36  ,clse-max16 cx16
00:24:52  37  ,clse-max18 cx18
00:24:52  38  -- Derive more attributes.
00:24:52  39  -- I want to use CORR() here to help SVM see the shape of the series.
00:24:52  40  -- But COVAR_POP is more stable:
00:24:52  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
00:24:52  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
00:24:52  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
00:24:52  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
00:24:52  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
00:24:52  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
00:24:52  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
00:24:52  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
00:24:52  49  -- Derive date related attributes:
00:24:52  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:24:52  51  ,0+TO_CHAR(ydate,'D')d
00:24:52  52  ,0+TO_CHAR(ydate,'W')w
00:24:52  53  -- mpm stands for minutes-past-midnight:
00:24:52  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:24:52  55  -- mph stands for minutes-past-hour:
00:24:52  56  ,0+TO_CHAR(ydate,'MI')mph
00:24:52  57  FROM svm6102
00:24:52  58  ORDER BY ydate
00:24:52  59  /

Table created.

Elapsed: 00:00:02.10
00:24:54 SQL> 
00:24:54 SQL> -- rpt
00:24:54 SQL> 
00:24:54 SQL> SELECT
00:24:54   2  pair
00:24:54   3  ,COUNT(pair)
00:24:54   4  ,MIN(clse),MAX(clse)
00:24:54   5  ,MIN(ydate),MAX(ydate)
00:24:54   6  FROM svm6122
00:24:54   7  GROUP BY pair
00:24:54   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19810 1.24182424 1.38284305 2010-10-04 00:25:01 2011-01-07 00:20:00

Elapsed: 00:00:00.04
00:24:54 SQL> 
00:24:54 SQL> -- Prepare for derivation of NTILE based params:
00:24:54 SQL> 
00:24:54 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.33
00:24:55 SQL> CREATE TABLE svm6142 COMPRESS AS
00:24:55   2  SELECT
00:24:55   3  pair
00:24:55   4  ,ydate
00:24:55   5  ,prdate
00:24:55   6  ,clse
00:24:55   7  ,g6
00:24:55   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
00:24:55   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
00:24:55  10  ,CASE WHEN trend IS NULL THEN 1
00:24:55  11  	    WHEN trend =0      THEN 1
00:24:55  12  	    ELSE trend END trend
00:24:55  13  ,cm4
00:24:55  14  ,cm6
00:24:55  15  ,cm8
00:24:55  16  ,cm10
00:24:55  17  ,cm12
00:24:55  18  ,cm14
00:24:55  19  ,cm16
00:24:55  20  ,cm18
00:24:55  21  --
00:24:55  22  ,ca4
00:24:55  23  ,ca6
00:24:55  24  ,ca8
00:24:55  25  ,ca10
00:24:55  26  ,ca12
00:24:55  27  ,ca14
00:24:55  28  ,ca16
00:24:55  29  ,ca18
00:24:55  30  --
00:24:55  31  ,cx4
00:24:55  32  ,cx6
00:24:55  33  ,cx8
00:24:55  34  ,cx10
00:24:55  35  ,cx12
00:24:55  36  ,cx14
00:24:55  37  ,cx16
00:24:55  38  ,cx18
00:24:55  39  --
00:24:55  40  ,crr4
00:24:55  41  ,crr6
00:24:55  42  ,crr8
00:24:55  43  ,crr10
00:24:55  44  ,crr12
00:24:55  45  ,crr14
00:24:55  46  ,crr16
00:24:55  47  ,crr18
00:24:55  48  --
00:24:55  49  ,hh
00:24:55  50  ,d
00:24:55  51  ,w
00:24:55  52  ,mpm
00:24:55  53  ,mph
00:24:55  54  FROM svm6122
00:24:55  55  ORDER BY ydate
00:24:55  56  /

Table created.

Elapsed: 00:00:00.40
00:24:55 SQL> 
00:24:55 SQL> -- rpt
00:24:55 SQL> 
00:24:55 SQL> SELECT
00:24:55   2  pair
00:24:55   3  ,trend
00:24:55   4  ,gatt
00:24:55   5  ,COUNT(pair)
00:24:55   6  ,AVG(g6)
00:24:55   7  FROM svm6142
00:24:55   8  GROUP BY pair,trend,gatt
00:24:55   9  ORDER BY pair,trend,gatt
00:24:55  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6808  -.0023171
ech_usd 	-1 up	      3567 .003581079
ech_usd 	-1		63
ech_usd 	 1 nup	      6452 -.00239046
ech_usd 	 1 up	      2911 .004117896
ech_usd 	 1		 9

6 rows selected.

Elapsed: 00:00:00.03
00:24:55 SQL> 
00:24:55 SQL> 
00:24:55 SQL> -- Derive NTILE based params:
00:24:55 SQL> 
00:24:55 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
00:24:55 SQL> CREATE TABLE svm6162 COMPRESS AS
00:24:55   2  SELECT
00:24:55   3  pair
00:24:55   4  ,ydate
00:24:55   5  ,prdate
00:24:55   6  ,clse
00:24:55   7  ,g6
00:24:55   8  ,gatt
00:24:55   9  ,gattn
00:24:55  10  ,trend
00:24:55  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
00:24:55  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
00:24:55  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
00:24:55  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
00:24:55  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
00:24:55  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
00:24:55  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
00:24:55  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
00:24:55  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
00:24:55  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
00:24:55  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
00:24:55  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
00:24:55  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
00:24:55  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
00:24:55  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
00:24:55  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
00:24:55  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
00:24:55  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
00:24:55  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
00:24:55  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
00:24:55  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
00:24:55  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
00:24:55  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
00:24:55  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
00:24:55  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
00:24:55  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
00:24:55  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
00:24:55  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
00:24:55  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
00:24:55  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
00:24:55  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
00:24:55  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
00:24:55  43  ,hh  att32
00:24:55  44  ,d   att33
00:24:55  45  ,w   att34
00:24:55  46  ,mpm att35
00:24:55  47  ,mph att36
00:24:55  48  ,trend att37
00:24:55  49  FROM svm6142
00:24:55  50  ORDER BY ydate
00:24:55  51  /

Table created.

Elapsed: 00:00:04.98
00:25:00 SQL> 
00:25:00 SQL> -- rpt
00:25:00 SQL> 
00:25:00 SQL> SELECT
00:25:00   2  pair
00:25:00   3  ,trend
00:25:00   4  ,gatt
00:25:00   5  ,COUNT(pair)
00:25:00   6  ,AVG(g6)
00:25:00   7  FROM svm6162
00:25:00   8  GROUP BY pair,trend,gatt
00:25:00   9  ORDER BY pair,trend,gatt
00:25:00  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6808  -.0023171
ech_usd 	-1 up	      3567 .003581079
ech_usd 	-1		63
ech_usd 	 1 nup	      6452 -.00239046
ech_usd 	 1 up	      2911 .004117896
ech_usd 	 1		 9

6 rows selected.

Elapsed: 00:00:00.03
00:25:00 SQL> 
00:25:00 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.16
00:25:00 SQL> CREATE TABLE modsrc COMPRESS AS
00:25:00   2  SELECT
00:25:00   3  pair
00:25:00   4  ,ydate
00:25:00   5  ,prdate
00:25:00   6  ,trend
00:25:00   7  ,g6
00:25:00   8  ,gatt
00:25:00   9  ,gattn
00:25:00  10  FROM svm6162
00:25:00  11  /

Table created.

Elapsed: 00:00:00.13
00:25:01 SQL> 
00:25:01 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
00:25:01 SQL> 
00:25:01 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
00:25:01 SQL> CREATE TABLE ech_ms610 COMPRESS AS
00:25:01   2  SELECT
00:25:01   3  ydate
00:25:01   4  ,trend ech_trend
00:25:01   5  ,g6    ech_g6
00:25:01   6  ,gatt  ech_gatt
00:25:01   7  ,gattn ech_gattn
00:25:01   8  FROM modsrc
00:25:01   9  /

Table created.

Elapsed: 00:00:00.07
00:25:01 SQL> 
00:25:01 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
00:25:01 SQL> 
00:25:01 SQL> -- I need a copy of the attributes:
00:25:01 SQL> 
00:25:01 SQL> 
00:25:01 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.06
00:25:01 SQL> CREATE TABLE ech_att COMPRESS AS
00:25:01   2  SELECT
00:25:01   3  ydate
00:25:01   4  ,att00 ech_att00
00:25:01   5  ,att01 ech_att01
00:25:01   6  ,att02 ech_att02
00:25:01   7  ,att03 ech_att03
00:25:01   8  ,att04 ech_att04
00:25:01   9  ,att05 ech_att05
00:25:01  10  ,att06 ech_att06
00:25:01  11  ,att07 ech_att07
00:25:01  12  ,att08 ech_att08
00:25:01  13  ,att09 ech_att09
00:25:01  14  ,att10 ech_att10
00:25:01  15  ,att11 ech_att11
00:25:01  16  ,att12 ech_att12
00:25:01  17  ,att13 ech_att13
00:25:01  18  ,att14 ech_att14
00:25:01  19  ,att15 ech_att15
00:25:01  20  ,att16 ech_att16
00:25:01  21  ,att17 ech_att17
00:25:01  22  ,att18 ech_att18
00:25:01  23  ,att19 ech_att19
00:25:01  24  ,att20 ech_att20
00:25:01  25  ,att21 ech_att21
00:25:01  26  ,att22 ech_att22
00:25:01  27  ,att23 ech_att23
00:25:01  28  ,att24 ech_att24
00:25:01  29  ,att25 ech_att25
00:25:01  30  ,att26 ech_att26
00:25:01  31  ,att27 ech_att27
00:25:01  32  ,att28 ech_att28
00:25:01  33  ,att29 ech_att29
00:25:01  34  ,att30 ech_att30
00:25:01  35  ,att31 ech_att31
00:25:01  36  ,att32 ech_att32
00:25:01  37  ,att33 ech_att33
00:25:01  38  ,att34 ech_att34
00:25:01  39  ,att35 ech_att35
00:25:01  40  ,att36 ech_att36
00:25:01  41  ,att37 ech_att37
00:25:01  42  FROM svm6162
00:25:01  43  /

Table created.

Elapsed: 00:00:00.19
00:25:01 SQL> 
00:25:01 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.52
00:25:02 SQL> 
00:25:02 SQL> -- rpt
00:25:02 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.82
00:25:03 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19810

Elapsed: 00:00:00.00
00:25:03 SQL> 
00:25:03 SQL> --
00:25:03 SQL> -- egb610.sql
00:25:03 SQL> --
00:25:03 SQL> 
00:25:03 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:25:03 SQL> 
00:25:03 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
00:25:03 SQL> 
00:25:03 SQL> -- I created di5min here:
00:25:03 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
00:25:03 SQL> 
00:25:03 SQL> CREATE OR REPLACE VIEW svm6102 AS
00:25:03   2  SELECT
00:25:03   3  pair
00:25:03   4  ,ydate
00:25:03   5  ,prdate
00:25:03   6  ,rownum rnum -- acts as t in my time-series
00:25:03   7  ,clse
00:25:03   8  -- Derive a bunch of attributes from clse, the latest price:
00:25:03   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
00:25:03  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
00:25:03  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
00:25:03  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
00:25:03  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
00:25:03  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
00:25:03  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
00:25:03  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
00:25:03  17  --
00:25:03  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
00:25:03  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
00:25:03  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
00:25:03  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
00:25:03  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
00:25:03  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
00:25:03  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
00:25:03  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
00:25:03  26  --
00:25:03  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
00:25:03  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
00:25:03  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
00:25:03  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
00:25:03  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
00:25:03  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
00:25:03  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
00:25:03  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
00:25:03  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
00:25:03  36  FROM di5min WHERE pair LIKE'%egb%'
00:25:03  37  AND ydate > sysdate - 95
00:25:03  38  ORDER BY ydate
00:25:03  39  /

View created.

Elapsed: 00:00:00.06
00:25:03 SQL> 
00:25:03 SQL> -- rpt
00:25:03 SQL> 
00:25:03 SQL> SELECT
00:25:03   2  pair
00:25:03   3  ,COUNT(pair)
00:25:03   4  ,MIN(clse),MAX(clse)
00:25:03   5  ,MIN(avg6),MAX(avg6)
00:25:03   6  ,MIN(ydate),MAX(ydate)
00:25:03   7  FROM svm6102
00:25:03   8  GROUP BY pair
00:25:03   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19808 .833520557 .893920122 .834199029 .892400287 2010-10-04 00:30:01 2011-01-07 00:20:00

Elapsed: 00:00:00.98
00:25:04 SQL> 
00:25:04 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
00:25:04 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.22
00:25:04 SQL> CREATE TABLE svm6122 COMPRESS AS
00:25:04   2  SELECT
00:25:04   3  pair
00:25:04   4  ,ydate
00:25:04   5  ,prdate
00:25:04   6  ,clse
00:25:04   7  -- g6 is important. I want to predict g6:
00:25:04   8  ,ld6 - clse g6
00:25:04   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
00:25:04  10  -- I want more attributes from the ones I derived above:
00:25:04  11  -- clse relation to moving-min
00:25:04  12  ,clse-min4  cm4
00:25:04  13  ,clse-min6  cm6
00:25:04  14  ,clse-min8  cm8
00:25:04  15  ,clse-min10 cm10
00:25:04  16  ,clse-min12 cm12
00:25:04  17  ,clse-min14 cm14
00:25:04  18  ,clse-min16 cm16
00:25:04  19  ,clse-min18 cm18
00:25:04  20  -- clse relation to moving-avg
00:25:04  21  ,clse-avg4  ca4
00:25:04  22  ,clse-avg6  ca6
00:25:04  23  ,clse-avg8  ca8
00:25:04  24  ,clse-avg10 ca10
00:25:04  25  ,clse-avg12 ca12
00:25:04  26  ,clse-avg14 ca14
00:25:04  27  ,clse-avg16 ca16
00:25:04  28  ,clse-avg18 ca18
00:25:04  29  -- clse relation to moving-max
00:25:04  30  ,clse-max4  cx4
00:25:04  31  ,clse-max6  cx6
00:25:04  32  ,clse-max8  cx8
00:25:04  33  ,clse-max10 cx10
00:25:04  34  ,clse-max12 cx12
00:25:04  35  ,clse-max14 cx14
00:25:04  36  ,clse-max16 cx16
00:25:04  37  ,clse-max18 cx18
00:25:04  38  -- Derive more attributes.
00:25:04  39  -- I want to use CORR() here to help SVM see the shape of the series.
00:25:04  40  -- But COVAR_POP is more stable:
00:25:04  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
00:25:04  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
00:25:04  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
00:25:04  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
00:25:04  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
00:25:04  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
00:25:04  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
00:25:04  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
00:25:04  49  -- Derive date related attributes:
00:25:04  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:25:04  51  ,0+TO_CHAR(ydate,'D')d
00:25:04  52  ,0+TO_CHAR(ydate,'W')w
00:25:04  53  -- mpm stands for minutes-past-midnight:
00:25:04  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:25:04  55  -- mph stands for minutes-past-hour:
00:25:04  56  ,0+TO_CHAR(ydate,'MI')mph
00:25:04  57  FROM svm6102
00:25:04  58  ORDER BY ydate
00:25:04  59  /

Table created.

Elapsed: 00:00:02.62
00:25:07 SQL> 
00:25:07 SQL> -- rpt
00:25:07 SQL> 
00:25:07 SQL> SELECT
00:25:07   2  pair
00:25:07   3  ,COUNT(pair)
00:25:07   4  ,MIN(clse),MAX(clse)
00:25:07   5  ,MIN(ydate),MAX(ydate)
00:25:07   6  FROM svm6122
00:25:07   7  GROUP BY pair
00:25:07   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19808 .833520557 .893920122 2010-10-04 00:30:01 2011-01-07 00:20:00

Elapsed: 00:00:00.04
00:25:07 SQL> 
00:25:07 SQL> -- Prepare for derivation of NTILE based params:
00:25:07 SQL> 
00:25:07 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.31
00:25:07 SQL> CREATE TABLE svm6142 COMPRESS AS
00:25:07   2  SELECT
00:25:07   3  pair
00:25:07   4  ,ydate
00:25:07   5  ,prdate
00:25:07   6  ,clse
00:25:07   7  ,g6
00:25:07   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
00:25:07   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
00:25:07  10  ,CASE WHEN trend IS NULL THEN 1
00:25:07  11  	    WHEN trend =0      THEN 1
00:25:07  12  	    ELSE trend END trend
00:25:07  13  ,cm4
00:25:07  14  ,cm6
00:25:07  15  ,cm8
00:25:07  16  ,cm10
00:25:07  17  ,cm12
00:25:07  18  ,cm14
00:25:07  19  ,cm16
00:25:07  20  ,cm18
00:25:07  21  --
00:25:07  22  ,ca4
00:25:07  23  ,ca6
00:25:07  24  ,ca8
00:25:07  25  ,ca10
00:25:07  26  ,ca12
00:25:07  27  ,ca14
00:25:07  28  ,ca16
00:25:07  29  ,ca18
00:25:07  30  --
00:25:07  31  ,cx4
00:25:07  32  ,cx6
00:25:07  33  ,cx8
00:25:07  34  ,cx10
00:25:07  35  ,cx12
00:25:07  36  ,cx14
00:25:07  37  ,cx16
00:25:07  38  ,cx18
00:25:07  39  --
00:25:07  40  ,crr4
00:25:07  41  ,crr6
00:25:07  42  ,crr8
00:25:07  43  ,crr10
00:25:07  44  ,crr12
00:25:07  45  ,crr14
00:25:07  46  ,crr16
00:25:07  47  ,crr18
00:25:07  48  --
00:25:07  49  ,hh
00:25:07  50  ,d
00:25:07  51  ,w
00:25:07  52  ,mpm
00:25:07  53  ,mph
00:25:07  54  FROM svm6122
00:25:07  55  ORDER BY ydate
00:25:07  56  /

Table created.

Elapsed: 00:00:00.42
00:25:08 SQL> 
00:25:08 SQL> -- rpt
00:25:08 SQL> 
00:25:08 SQL> SELECT
00:25:08   2  pair
00:25:08   3  ,trend
00:25:08   4  ,gatt
00:25:08   5  ,COUNT(pair)
00:25:08   6  ,AVG(g6)
00:25:08   7  FROM svm6142
00:25:08   8  GROUP BY pair,trend,gatt
00:25:08   9  ORDER BY pair,trend,gatt
00:25:08  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7944 -.00106343
egb_usd 	-1 up	      2629  .00293193
egb_usd 	-1		65
egb_usd 	 1 nup	      6545 -.00138762
egb_usd 	 1 up	      2618 .002927667
egb_usd 	 1		 7

6 rows selected.

Elapsed: 00:00:00.04
00:25:08 SQL> 
00:25:08 SQL> 
00:25:08 SQL> -- Derive NTILE based params:
00:25:08 SQL> 
00:25:08 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.23
00:25:08 SQL> CREATE TABLE svm6162 COMPRESS AS
00:25:08   2  SELECT
00:25:08   3  pair
00:25:08   4  ,ydate
00:25:08   5  ,prdate
00:25:08   6  ,clse
00:25:08   7  ,g6
00:25:08   8  ,gatt
00:25:08   9  ,gattn
00:25:08  10  ,trend
00:25:08  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
00:25:08  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
00:25:08  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
00:25:08  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
00:25:08  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
00:25:08  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
00:25:08  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
00:25:08  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
00:25:08  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
00:25:08  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
00:25:08  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
00:25:08  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
00:25:08  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
00:25:08  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
00:25:08  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
00:25:08  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
00:25:08  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
00:25:08  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
00:25:08  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
00:25:08  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
00:25:08  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
00:25:08  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
00:25:08  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
00:25:08  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
00:25:08  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
00:25:08  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
00:25:08  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
00:25:08  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
00:25:08  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
00:25:08  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
00:25:08  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
00:25:08  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
00:25:08  43  ,hh  att32
00:25:08  44  ,d   att33
00:25:08  45  ,w   att34
00:25:08  46  ,mpm att35
00:25:08  47  ,mph att36
00:25:08  48  ,trend att37
00:25:08  49  FROM svm6142
00:25:08  50  ORDER BY ydate
00:25:08  51  /

Table created.

Elapsed: 00:00:05.60
00:25:14 SQL> 
00:25:14 SQL> -- rpt
00:25:14 SQL> 
00:25:14 SQL> SELECT
00:25:14   2  pair
00:25:14   3  ,trend
00:25:14   4  ,gatt
00:25:14   5  ,COUNT(pair)
00:25:14   6  ,AVG(g6)
00:25:14   7  FROM svm6162
00:25:14   8  GROUP BY pair,trend,gatt
00:25:14   9  ORDER BY pair,trend,gatt
00:25:14  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7944 -.00106343
egb_usd 	-1 up	      2629  .00293193
egb_usd 	-1		65
egb_usd 	 1 nup	      6545 -.00138762
egb_usd 	 1 up	      2618 .002927667
egb_usd 	 1		 7

6 rows selected.

Elapsed: 00:00:00.03
00:25:14 SQL> 
00:25:14 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.27
00:25:14 SQL> CREATE TABLE modsrc COMPRESS AS
00:25:14   2  SELECT
00:25:14   3  pair
00:25:14   4  ,ydate
00:25:14   5  ,prdate
00:25:14   6  ,trend
00:25:14   7  ,g6
00:25:14   8  ,gatt
00:25:14   9  ,gattn
00:25:14  10  FROM svm6162
00:25:14  11  /

Table created.

Elapsed: 00:00:00.10
00:25:14 SQL> 
00:25:14 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.24
00:25:14 SQL> 
00:25:14 SQL> DROP   TABLE egb_ms610 ;

Table dropped.

Elapsed: 00:00:00.18
00:25:14 SQL> CREATE TABLE egb_ms610 COMPRESS AS
00:25:14   2  SELECT
00:25:14   3  ydate
00:25:14   4  ,trend egb_trend
00:25:14   5  ,g6    egb_g6
00:25:14   6  ,gatt  egb_gatt
00:25:14   7  ,gattn egb_gattn
00:25:14   8  FROM modsrc
00:25:14   9  /

Table created.

Elapsed: 00:00:00.05
00:25:14 SQL> 
00:25:14 SQL> ANALYZE TABLE egb_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
00:25:15 SQL> 
00:25:15 SQL> -- I need a copy of the attributes:
00:25:15 SQL> 
00:25:15 SQL> 
00:25:15 SQL> DROP   TABLE egb_att;

Table dropped.

Elapsed: 00:00:00.07
00:25:15 SQL> CREATE TABLE egb_att COMPRESS AS
00:25:15   2  SELECT
00:25:15   3  ydate
00:25:15   4  ,att00 egb_att00
00:25:15   5  ,att01 egb_att01
00:25:15   6  ,att02 egb_att02
00:25:15   7  ,att03 egb_att03
00:25:15   8  ,att04 egb_att04
00:25:15   9  ,att05 egb_att05
00:25:15  10  ,att06 egb_att06
00:25:15  11  ,att07 egb_att07
00:25:15  12  ,att08 egb_att08
00:25:15  13  ,att09 egb_att09
00:25:15  14  ,att10 egb_att10
00:25:15  15  ,att11 egb_att11
00:25:15  16  ,att12 egb_att12
00:25:15  17  ,att13 egb_att13
00:25:15  18  ,att14 egb_att14
00:25:15  19  ,att15 egb_att15
00:25:15  20  ,att16 egb_att16
00:25:15  21  ,att17 egb_att17
00:25:15  22  ,att18 egb_att18
00:25:15  23  ,att19 egb_att19
00:25:15  24  ,att20 egb_att20
00:25:15  25  ,att21 egb_att21
00:25:15  26  ,att22 egb_att22
00:25:15  27  ,att23 egb_att23
00:25:15  28  ,att24 egb_att24
00:25:15  29  ,att25 egb_att25
00:25:15  30  ,att26 egb_att26
00:25:15  31  ,att27 egb_att27
00:25:15  32  ,att28 egb_att28
00:25:15  33  ,att29 egb_att29
00:25:15  34  ,att30 egb_att30
00:25:15  35  ,att31 egb_att31
00:25:15  36  ,att32 egb_att32
00:25:15  37  ,att33 egb_att33
00:25:15  38  ,att34 egb_att34
00:25:15  39  ,att35 egb_att35
00:25:15  40  ,att36 egb_att36
00:25:15  41  ,att37 egb_att37
00:25:15  42  FROM svm6162
00:25:15  43  /

Table created.

Elapsed: 00:00:00.16
00:25:15 SQL> 
00:25:15 SQL> ANALYZE TABLE egb_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
00:25:15 SQL> 
00:25:15 SQL> -- rpt
00:25:15 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.96
00:25:16 SQL> SELECT COUNT(*)FROM egb_att;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.00
00:25:16 SQL> 
00:25:16 SQL> --
00:25:16 SQL> -- ejp610.sql
00:25:16 SQL> --
00:25:16 SQL> 
00:25:16 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:25:16 SQL> 
00:25:16 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.72
00:25:17 SQL> 
00:25:17 SQL> -- I created di5min here:
00:25:17 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
00:25:17 SQL> 
00:25:17 SQL> CREATE OR REPLACE VIEW svm6102 AS
00:25:17   2  SELECT
00:25:17   3  pair
00:25:17   4  ,ydate
00:25:17   5  ,prdate
00:25:17   6  ,rownum rnum -- acts as t in my time-series
00:25:17   7  ,clse
00:25:17   8  -- Derive a bunch of attributes from clse, the latest price:
00:25:17   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
00:25:17  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
00:25:17  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
00:25:17  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
00:25:17  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
00:25:17  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
00:25:17  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
00:25:17  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
00:25:17  17  --
00:25:17  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
00:25:17  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
00:25:17  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
00:25:17  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
00:25:17  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
00:25:17  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
00:25:17  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
00:25:17  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
00:25:17  26  --
00:25:17  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
00:25:17  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
00:25:17  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
00:25:17  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
00:25:17  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
00:25:17  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
00:25:17  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
00:25:17  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
00:25:17  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
00:25:17  36  FROM di5min WHERE pair LIKE'%ejp%'
00:25:17  37  AND ydate > sysdate - 95
00:25:17  38  ORDER BY ydate
00:25:17  39  /

View created.

Elapsed: 00:00:00.04
00:25:17 SQL> 
00:25:17 SQL> -- rpt
00:25:17 SQL> 
00:25:17 SQL> SELECT
00:25:17   2  pair
00:25:17   3  ,COUNT(pair)
00:25:17   4  ,MIN(clse),MAX(clse)
00:25:17   5  ,MIN(avg6),MAX(avg6)
00:25:17   6  ,MIN(ydate),MAX(ydate)
00:25:17   7  FROM svm6102
00:25:17   8  GROUP BY pair
00:25:17   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ejp_usd       19806 107.643765	115.63485 107.776148 115.509678 2010-10-04 00:30:01 2011-01-07 00:20:00

Elapsed: 00:00:00.85
00:25:18 SQL> 
00:25:18 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
00:25:18 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.34
00:25:18 SQL> CREATE TABLE svm6122 COMPRESS AS
00:25:18   2  SELECT
00:25:18   3  pair
00:25:18   4  ,ydate
00:25:18   5  ,prdate
00:25:18   6  ,clse
00:25:18   7  -- g6 is important. I want to predict g6:
00:25:18   8  ,ld6 - clse g6
00:25:18   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
00:25:18  10  -- I want more attributes from the ones I derived above:
00:25:18  11  -- clse relation to moving-min
00:25:18  12  ,clse-min4  cm4
00:25:18  13  ,clse-min6  cm6
00:25:18  14  ,clse-min8  cm8
00:25:18  15  ,clse-min10 cm10
00:25:18  16  ,clse-min12 cm12
00:25:18  17  ,clse-min14 cm14
00:25:18  18  ,clse-min16 cm16
00:25:18  19  ,clse-min18 cm18
00:25:18  20  -- clse relation to moving-avg
00:25:18  21  ,clse-avg4  ca4
00:25:18  22  ,clse-avg6  ca6
00:25:18  23  ,clse-avg8  ca8
00:25:18  24  ,clse-avg10 ca10
00:25:18  25  ,clse-avg12 ca12
00:25:18  26  ,clse-avg14 ca14
00:25:18  27  ,clse-avg16 ca16
00:25:18  28  ,clse-avg18 ca18
00:25:18  29  -- clse relation to moving-max
00:25:18  30  ,clse-max4  cx4
00:25:18  31  ,clse-max6  cx6
00:25:18  32  ,clse-max8  cx8
00:25:18  33  ,clse-max10 cx10
00:25:18  34  ,clse-max12 cx12
00:25:18  35  ,clse-max14 cx14
00:25:18  36  ,clse-max16 cx16
00:25:18  37  ,clse-max18 cx18
00:25:18  38  -- Derive more attributes.
00:25:18  39  -- I want to use CORR() here to help SVM see the shape of the series.
00:25:18  40  -- But COVAR_POP is more stable:
00:25:18  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
00:25:18  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
00:25:18  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
00:25:18  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
00:25:18  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
00:25:18  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
00:25:18  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
00:25:18  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
00:25:18  49  -- Derive date related attributes:
00:25:18  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:25:18  51  ,0+TO_CHAR(ydate,'D')d
00:25:18  52  ,0+TO_CHAR(ydate,'W')w
00:25:18  53  -- mpm stands for minutes-past-midnight:
00:25:18  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:25:18  55  -- mph stands for minutes-past-hour:
00:25:18  56  ,0+TO_CHAR(ydate,'MI')mph
00:25:18  57  FROM svm6102
00:25:18  58  ORDER BY ydate
00:25:18  59  /

Table created.

Elapsed: 00:00:02.29
00:25:21 SQL> 
00:25:21 SQL> -- rpt
00:25:21 SQL> 
00:25:21 SQL> SELECT
00:25:21   2  pair
00:25:21   3  ,COUNT(pair)
00:25:21   4  ,MIN(clse),MAX(clse)
00:25:21   5  ,MIN(ydate),MAX(ydate)
00:25:21   6  FROM svm6122
00:25:21   7  GROUP BY pair
00:25:21   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ejp_usd       19806 107.643765	115.63485 2010-10-04 00:30:01 2011-01-07 00:20:00

Elapsed: 00:00:00.04
00:25:21 SQL> 
00:25:21 SQL> -- Prepare for derivation of NTILE based params:
00:25:21 SQL> 
00:25:21 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.33
00:25:21 SQL> CREATE TABLE svm6142 COMPRESS AS
00:25:21   2  SELECT
00:25:21   3  pair
00:25:21   4  ,ydate
00:25:21   5  ,prdate
00:25:21   6  ,clse
00:25:21   7  ,g6
00:25:21   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
00:25:21   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
00:25:21  10  ,CASE WHEN trend IS NULL THEN 1
00:25:21  11  	    WHEN trend =0      THEN 1
00:25:21  12  	    ELSE trend END trend
00:25:21  13  ,cm4
00:25:21  14  ,cm6
00:25:21  15  ,cm8
00:25:21  16  ,cm10
00:25:21  17  ,cm12
00:25:21  18  ,cm14
00:25:21  19  ,cm16
00:25:21  20  ,cm18
00:25:21  21  --
00:25:21  22  ,ca4
00:25:21  23  ,ca6
00:25:21  24  ,ca8
00:25:21  25  ,ca10
00:25:21  26  ,ca12
00:25:21  27  ,ca14
00:25:21  28  ,ca16
00:25:21  29  ,ca18
00:25:21  30  --
00:25:21  31  ,cx4
00:25:21  32  ,cx6
00:25:21  33  ,cx8
00:25:21  34  ,cx10
00:25:21  35  ,cx12
00:25:21  36  ,cx14
00:25:21  37  ,cx16
00:25:21  38  ,cx18
00:25:21  39  --
00:25:21  40  ,crr4
00:25:21  41  ,crr6
00:25:21  42  ,crr8
00:25:21  43  ,crr10
00:25:21  44  ,crr12
00:25:21  45  ,crr14
00:25:21  46  ,crr16
00:25:21  47  ,crr18
00:25:21  48  --
00:25:21  49  ,hh
00:25:21  50  ,d
00:25:21  51  ,w
00:25:21  52  ,mpm
00:25:21  53  ,mph
00:25:21  54  FROM svm6122
00:25:21  55  ORDER BY ydate
00:25:21  56  /

Table created.

Elapsed: 00:00:00.41
00:25:21 SQL> 
00:25:21 SQL> -- rpt
00:25:21 SQL> 
00:25:21 SQL> SELECT
00:25:21   2  pair
00:25:21   3  ,trend
00:25:21   4  ,gatt
00:25:21   5  ,COUNT(pair)
00:25:21   6  ,AVG(g6)
00:25:21   7  FROM svm6142
00:25:21   8  GROUP BY pair,trend,gatt
00:25:21   9  ORDER BY pair,trend,gatt
00:25:21  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      5220 -.32575153
ejp_usd 	-1 up	      4912 .277982335
ejp_usd 	-1		66
ejp_usd 	 1 nup	      4984 -.29643141
ejp_usd 	 1 up	      4618 .288776858
ejp_usd 	 1		 6

6 rows selected.

Elapsed: 00:00:00.03
00:25:21 SQL> 
00:25:21 SQL> 
00:25:21 SQL> -- Derive NTILE based params:
00:25:21 SQL> 
00:25:21 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.17
00:25:22 SQL> CREATE TABLE svm6162 COMPRESS AS
00:25:22   2  SELECT
00:25:22   3  pair
00:25:22   4  ,ydate
00:25:22   5  ,prdate
00:25:22   6  ,clse
00:25:22   7  ,g6
00:25:22   8  ,gatt
00:25:22   9  ,gattn
00:25:22  10  ,trend
00:25:22  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
00:25:22  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
00:25:22  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
00:25:22  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
00:25:22  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
00:25:22  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
00:25:22  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
00:25:22  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
00:25:22  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
00:25:22  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
00:25:22  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
00:25:22  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
00:25:22  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
00:25:22  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
00:25:22  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
00:25:22  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
00:25:22  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
00:25:22  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
00:25:22  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
00:25:22  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
00:25:22  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
00:25:22  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
00:25:22  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
00:25:22  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
00:25:22  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
00:25:22  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
00:25:22  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
00:25:22  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
00:25:22  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
00:25:22  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
00:25:22  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
00:25:22  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
00:25:22  43  ,hh  att32
00:25:22  44  ,d   att33
00:25:22  45  ,w   att34
00:25:22  46  ,mpm att35
00:25:22  47  ,mph att36
00:25:22  48  ,trend att37
00:25:22  49  FROM svm6142
00:25:22  50  ORDER BY ydate
00:25:22  51  /

Table created.

Elapsed: 00:00:04.97
00:25:26 SQL> 
00:25:26 SQL> -- rpt
00:25:26 SQL> 
00:25:26 SQL> SELECT
00:25:26   2  pair
00:25:26   3  ,trend
00:25:26   4  ,gatt
00:25:26   5  ,COUNT(pair)
00:25:26   6  ,AVG(g6)
00:25:26   7  FROM svm6162
00:25:26   8  GROUP BY pair,trend,gatt
00:25:26   9  ORDER BY pair,trend,gatt
00:25:26  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      5220 -.32575153
ejp_usd 	-1 up	      4912 .277982335
ejp_usd 	-1		66
ejp_usd 	 1 nup	      4984 -.29643141
ejp_usd 	 1 up	      4618 .288776858
ejp_usd 	 1		 6

6 rows selected.

Elapsed: 00:00:00.03
00:25:27 SQL> 
00:25:27 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.20
00:25:27 SQL> CREATE TABLE modsrc COMPRESS AS
00:25:27   2  SELECT
00:25:27   3  pair
00:25:27   4  ,ydate
00:25:27   5  ,prdate
00:25:27   6  ,trend
00:25:27   7  ,g6
00:25:27   8  ,gatt
00:25:27   9  ,gattn
00:25:27  10  FROM svm6162
00:25:27  11  /

Table created.

Elapsed: 00:00:00.08
00:25:27 SQL> 
00:25:27 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
00:25:27 SQL> 
00:25:27 SQL> DROP   TABLE ejp_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
00:25:27 SQL> CREATE TABLE ejp_ms610 COMPRESS AS
00:25:27   2  SELECT
00:25:27   3  ydate
00:25:27   4  ,trend ejp_trend
00:25:27   5  ,g6    ejp_g6
00:25:27   6  ,gatt  ejp_gatt
00:25:27   7  ,gattn ejp_gattn
00:25:27   8  FROM modsrc
00:25:27   9  /

Table created.

Elapsed: 00:00:00.08
00:25:27 SQL> 
00:25:27 SQL> ANALYZE TABLE ejp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
00:25:27 SQL> 
00:25:27 SQL> -- I need a copy of the attributes:
00:25:27 SQL> 
00:25:27 SQL> 
00:25:27 SQL> DROP   TABLE ejp_att;

Table dropped.

Elapsed: 00:00:00.05
00:25:27 SQL> CREATE TABLE ejp_att COMPRESS AS
00:25:27   2  SELECT
00:25:27   3  ydate
00:25:27   4  ,att00 ejp_att00
00:25:27   5  ,att01 ejp_att01
00:25:27   6  ,att02 ejp_att02
00:25:27   7  ,att03 ejp_att03
00:25:27   8  ,att04 ejp_att04
00:25:27   9  ,att05 ejp_att05
00:25:27  10  ,att06 ejp_att06
00:25:27  11  ,att07 ejp_att07
00:25:27  12  ,att08 ejp_att08
00:25:27  13  ,att09 ejp_att09
00:25:27  14  ,att10 ejp_att10
00:25:27  15  ,att11 ejp_att11
00:25:27  16  ,att12 ejp_att12
00:25:27  17  ,att13 ejp_att13
00:25:27  18  ,att14 ejp_att14
00:25:27  19  ,att15 ejp_att15
00:25:27  20  ,att16 ejp_att16
00:25:27  21  ,att17 ejp_att17
00:25:27  22  ,att18 ejp_att18
00:25:27  23  ,att19 ejp_att19
00:25:27  24  ,att20 ejp_att20
00:25:27  25  ,att21 ejp_att21
00:25:27  26  ,att22 ejp_att22
00:25:27  27  ,att23 ejp_att23
00:25:27  28  ,att24 ejp_att24
00:25:27  29  ,att25 ejp_att25
00:25:27  30  ,att26 ejp_att26
00:25:27  31  ,att27 ejp_att27
00:25:27  32  ,att28 ejp_att28
00:25:27  33  ,att29 ejp_att29
00:25:27  34  ,att30 ejp_att30
00:25:27  35  ,att31 ejp_att31
00:25:27  36  ,att32 ejp_att32
00:25:27  37  ,att33 ejp_att33
00:25:27  38  ,att34 ejp_att34
00:25:27  39  ,att35 ejp_att35
00:25:27  40  ,att36 ejp_att36
00:25:27  41  ,att37 ejp_att37
00:25:27  42  FROM svm6162
00:25:27  43  /

Table created.

Elapsed: 00:00:00.20
00:25:28 SQL> 
00:25:28 SQL> ANALYZE TABLE ejp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
00:25:28 SQL> 
00:25:28 SQL> -- rpt
00:25:28 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19806

Elapsed: 00:00:00.88
00:25:29 SQL> SELECT COUNT(*)FROM ejp_att;

  COUNT(*)
----------
     19806

Elapsed: 00:00:00.00
00:25:29 SQL> 
00:25:29 SQL> --
00:25:29 SQL> -- ajp610.sql
00:25:29 SQL> --
00:25:29 SQL> 
00:25:29 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:25:29 SQL> 
00:25:29 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
00:25:29 SQL> 
00:25:29 SQL> -- I created di5min here:
00:25:29 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
00:25:29 SQL> 
00:25:29 SQL> CREATE OR REPLACE VIEW svm6102 AS
00:25:29   2  SELECT
00:25:29   3  pair
00:25:29   4  ,ydate
00:25:29   5  ,prdate
00:25:29   6  ,rownum rnum -- acts as t in my time-series
00:25:29   7  ,clse
00:25:29   8  -- Derive a bunch of attributes from clse, the latest price:
00:25:29   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
00:25:29  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
00:25:29  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
00:25:29  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
00:25:29  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
00:25:29  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
00:25:29  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
00:25:29  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
00:25:29  17  --
00:25:29  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
00:25:29  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
00:25:29  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
00:25:29  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
00:25:29  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
00:25:29  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
00:25:29  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
00:25:29  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
00:25:29  26  --
00:25:29  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
00:25:29  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
00:25:29  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
00:25:29  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
00:25:29  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
00:25:29  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
00:25:29  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
00:25:29  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
00:25:29  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
00:25:29  36  FROM di5min WHERE pair LIKE'%ajp%'
00:25:29  37  AND ydate > sysdate - 95
00:25:29  38  ORDER BY ydate
00:25:29  39  /

View created.

Elapsed: 00:00:00.06
00:25:29 SQL> 
00:25:29 SQL> -- rpt
00:25:29 SQL> 
00:25:29 SQL> SELECT
00:25:29   2  pair
00:25:29   3  ,COUNT(pair)
00:25:29   4  ,MIN(clse),MAX(clse)
00:25:29   5  ,MIN(avg6),MAX(avg6)
00:25:29   6  ,MIN(ydate),MAX(ydate)
00:25:29   7  FROM svm6102
00:25:29   8  GROUP BY pair
00:25:29   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ajp_usd       19803  78.249976 83.6669853 78.5106193  83.546306 2010-10-04 00:30:01 2011-01-07 00:20:00

Elapsed: 00:00:00.79
00:25:30 SQL> 
00:25:30 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
00:25:30 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
00:25:30 SQL> CREATE TABLE svm6122 COMPRESS AS
00:25:30   2  SELECT
00:25:30   3  pair
00:25:30   4  ,ydate
00:25:30   5  ,prdate
00:25:30   6  ,clse
00:25:30   7  -- g6 is important. I want to predict g6:
00:25:30   8  ,ld6 - clse g6
00:25:30   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
00:25:30  10  -- I want more attributes from the ones I derived above:
00:25:30  11  -- clse relation to moving-min
00:25:30  12  ,clse-min4  cm4
00:25:30  13  ,clse-min6  cm6
00:25:30  14  ,clse-min8  cm8
00:25:30  15  ,clse-min10 cm10
00:25:30  16  ,clse-min12 cm12
00:25:30  17  ,clse-min14 cm14
00:25:30  18  ,clse-min16 cm16
00:25:30  19  ,clse-min18 cm18
00:25:30  20  -- clse relation to moving-avg
00:25:30  21  ,clse-avg4  ca4
00:25:30  22  ,clse-avg6  ca6
00:25:30  23  ,clse-avg8  ca8
00:25:30  24  ,clse-avg10 ca10
00:25:30  25  ,clse-avg12 ca12
00:25:30  26  ,clse-avg14 ca14
00:25:30  27  ,clse-avg16 ca16
00:25:30  28  ,clse-avg18 ca18
00:25:30  29  -- clse relation to moving-max
00:25:30  30  ,clse-max4  cx4
00:25:30  31  ,clse-max6  cx6
00:25:30  32  ,clse-max8  cx8
00:25:30  33  ,clse-max10 cx10
00:25:30  34  ,clse-max12 cx12
00:25:30  35  ,clse-max14 cx14
00:25:30  36  ,clse-max16 cx16
00:25:30  37  ,clse-max18 cx18
00:25:30  38  -- Derive more attributes.
00:25:30  39  -- I want to use CORR() here to help SVM see the shape of the series.
00:25:30  40  -- But COVAR_POP is more stable:
00:25:30  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
00:25:30  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
00:25:30  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
00:25:30  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
00:25:30  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
00:25:30  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
00:25:30  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
00:25:30  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
00:25:30  49  -- Derive date related attributes:
00:25:30  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:25:30  51  ,0+TO_CHAR(ydate,'D')d
00:25:30  52  ,0+TO_CHAR(ydate,'W')w
00:25:30  53  -- mpm stands for minutes-past-midnight:
00:25:30  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:25:30  55  -- mph stands for minutes-past-hour:
00:25:30  56  ,0+TO_CHAR(ydate,'MI')mph
00:25:30  57  FROM svm6102
00:25:30  58  ORDER BY ydate
00:25:30  59  /

Table created.

Elapsed: 00:00:02.07
00:25:33 SQL> 
00:25:33 SQL> -- rpt
00:25:33 SQL> 
00:25:33 SQL> SELECT
00:25:33   2  pair
00:25:33   3  ,COUNT(pair)
00:25:33   4  ,MIN(clse),MAX(clse)
00:25:33   5  ,MIN(ydate),MAX(ydate)
00:25:33   6  FROM svm6122
00:25:33   7  GROUP BY pair
00:25:33   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ajp_usd       19803  78.249976 83.6669853 2010-10-04 00:30:01 2011-01-07 00:20:00

Elapsed: 00:00:00.04
00:25:33 SQL> 
00:25:33 SQL> -- Prepare for derivation of NTILE based params:
00:25:33 SQL> 
00:25:33 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.27
00:25:33 SQL> CREATE TABLE svm6142 COMPRESS AS
00:25:33   2  SELECT
00:25:33   3  pair
00:25:33   4  ,ydate
00:25:33   5  ,prdate
00:25:33   6  ,clse
00:25:33   7  ,g6
00:25:33   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
00:25:33   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
00:25:33  10  ,CASE WHEN trend IS NULL THEN 1
00:25:33  11  	    WHEN trend =0      THEN 1
00:25:33  12  	    ELSE trend END trend
00:25:33  13  ,cm4
00:25:33  14  ,cm6
00:25:33  15  ,cm8
00:25:33  16  ,cm10
00:25:33  17  ,cm12
00:25:33  18  ,cm14
00:25:33  19  ,cm16
00:25:33  20  ,cm18
00:25:33  21  --
00:25:33  22  ,ca4
00:25:33  23  ,ca6
00:25:33  24  ,ca8
00:25:33  25  ,ca10
00:25:33  26  ,ca12
00:25:33  27  ,ca14
00:25:33  28  ,ca16
00:25:33  29  ,ca18
00:25:33  30  --
00:25:33  31  ,cx4
00:25:33  32  ,cx6
00:25:33  33  ,cx8
00:25:33  34  ,cx10
00:25:33  35  ,cx12
00:25:33  36  ,cx14
00:25:33  37  ,cx16
00:25:33  38  ,cx18
00:25:33  39  --
00:25:33  40  ,crr4
00:25:33  41  ,crr6
00:25:33  42  ,crr8
00:25:33  43  ,crr10
00:25:33  44  ,crr12
00:25:33  45  ,crr14
00:25:33  46  ,crr16
00:25:33  47  ,crr18
00:25:33  48  --
00:25:33  49  ,hh
00:25:33  50  ,d
00:25:33  51  ,w
00:25:33  52  ,mpm
00:25:33  53  ,mph
00:25:33  54  FROM svm6122
00:25:33  55  ORDER BY ydate
00:25:33  56  /

Table created.

Elapsed: 00:00:00.39
00:25:33 SQL> 
00:25:33 SQL> -- rpt
00:25:33 SQL> 
00:25:33 SQL> SELECT
00:25:33   2  pair
00:25:33   3  ,trend
00:25:33   4  ,gatt
00:25:33   5  ,COUNT(pair)
00:25:33   6  ,AVG(g6)
00:25:33   7  FROM svm6142
00:25:33   8  GROUP BY pair,trend,gatt
00:25:33   9  ORDER BY pair,trend,gatt
00:25:33  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4402 -.22434466
ajp_usd 	-1 up	      5231 .223264776
ajp_usd 	-1		32
ajp_usd 	 1 nup	      5292 -.20260553
ajp_usd 	 1 up	      4806 .212866042
ajp_usd 	 1		40

6 rows selected.

Elapsed: 00:00:00.04
00:25:33 SQL> 
00:25:33 SQL> 
00:25:33 SQL> -- Derive NTILE based params:
00:25:33 SQL> 
00:25:33 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.19
00:25:33 SQL> CREATE TABLE svm6162 COMPRESS AS
00:25:33   2  SELECT
00:25:33   3  pair
00:25:33   4  ,ydate
00:25:33   5  ,prdate
00:25:33   6  ,clse
00:25:33   7  ,g6
00:25:33   8  ,gatt
00:25:33   9  ,gattn
00:25:33  10  ,trend
00:25:33  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
00:25:33  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
00:25:33  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
00:25:33  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
00:25:33  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
00:25:33  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
00:25:33  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
00:25:33  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
00:25:33  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
00:25:33  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
00:25:33  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
00:25:33  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
00:25:33  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
00:25:33  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
00:25:33  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
00:25:33  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
00:25:33  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
00:25:33  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
00:25:33  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
00:25:33  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
00:25:33  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
00:25:33  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
00:25:33  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
00:25:33  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
00:25:33  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
00:25:33  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
00:25:33  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
00:25:33  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
00:25:33  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
00:25:33  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
00:25:33  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
00:25:33  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
00:25:33  43  ,hh  att32
00:25:33  44  ,d   att33
00:25:33  45  ,w   att34
00:25:33  46  ,mpm att35
00:25:33  47  ,mph att36
00:25:33  48  ,trend att37
00:25:33  49  FROM svm6142
00:25:33  50  ORDER BY ydate
00:25:33  51  /

Table created.

Elapsed: 00:00:05.07
00:25:39 SQL> 
00:25:39 SQL> -- rpt
00:25:39 SQL> 
00:25:39 SQL> SELECT
00:25:39   2  pair
00:25:39   3  ,trend
00:25:39   4  ,gatt
00:25:39   5  ,COUNT(pair)
00:25:39   6  ,AVG(g6)
00:25:39   7  FROM svm6162
00:25:39   8  GROUP BY pair,trend,gatt
00:25:39   9  ORDER BY pair,trend,gatt
00:25:39  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4402 -.22434466
ajp_usd 	-1 up	      5231 .223264776
ajp_usd 	-1		32
ajp_usd 	 1 nup	      5292 -.20260553
ajp_usd 	 1 up	      4806 .212866042
ajp_usd 	 1		40

6 rows selected.

Elapsed: 00:00:00.03
00:25:39 SQL> 
00:25:39 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
00:25:39 SQL> CREATE TABLE modsrc COMPRESS AS
00:25:39   2  SELECT
00:25:39   3  pair
00:25:39   4  ,ydate
00:25:39   5  ,prdate
00:25:39   6  ,trend
00:25:39   7  ,g6
00:25:39   8  ,gatt
00:25:39   9  ,gattn
00:25:39  10  FROM svm6162
00:25:39  11  /

Table created.

Elapsed: 00:00:00.10
00:25:39 SQL> 
00:25:39 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
00:25:39 SQL> 
00:25:39 SQL> DROP   TABLE ajp_ms610 ;

Table dropped.

Elapsed: 00:00:00.09
00:25:39 SQL> CREATE TABLE ajp_ms610 COMPRESS AS
00:25:39   2  SELECT
00:25:39   3  ydate
00:25:39   4  ,trend ajp_trend
00:25:39   5  ,g6    ajp_g6
00:25:39   6  ,gatt  ajp_gatt
00:25:39   7  ,gattn ajp_gattn
00:25:39   8  FROM modsrc
00:25:39   9  /

Table created.

Elapsed: 00:00:00.11
00:25:39 SQL> 
00:25:39 SQL> ANALYZE TABLE ajp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
00:25:39 SQL> 
00:25:39 SQL> -- I need a copy of the attributes:
00:25:39 SQL> 
00:25:39 SQL> 
00:25:39 SQL> DROP   TABLE ajp_att;

Table dropped.

Elapsed: 00:00:00.13
00:25:40 SQL> CREATE TABLE ajp_att COMPRESS AS
00:25:40   2  SELECT
00:25:40   3  ydate
00:25:40   4  ,att00 ajp_att00
00:25:40   5  ,att01 ajp_att01
00:25:40   6  ,att02 ajp_att02
00:25:40   7  ,att03 ajp_att03
00:25:40   8  ,att04 ajp_att04
00:25:40   9  ,att05 ajp_att05
00:25:40  10  ,att06 ajp_att06
00:25:40  11  ,att07 ajp_att07
00:25:40  12  ,att08 ajp_att08
00:25:40  13  ,att09 ajp_att09
00:25:40  14  ,att10 ajp_att10
00:25:40  15  ,att11 ajp_att11
00:25:40  16  ,att12 ajp_att12
00:25:40  17  ,att13 ajp_att13
00:25:40  18  ,att14 ajp_att14
00:25:40  19  ,att15 ajp_att15
00:25:40  20  ,att16 ajp_att16
00:25:40  21  ,att17 ajp_att17
00:25:40  22  ,att18 ajp_att18
00:25:40  23  ,att19 ajp_att19
00:25:40  24  ,att20 ajp_att20
00:25:40  25  ,att21 ajp_att21
00:25:40  26  ,att22 ajp_att22
00:25:40  27  ,att23 ajp_att23
00:25:40  28  ,att24 ajp_att24
00:25:40  29  ,att25 ajp_att25
00:25:40  30  ,att26 ajp_att26
00:25:40  31  ,att27 ajp_att27
00:25:40  32  ,att28 ajp_att28
00:25:40  33  ,att29 ajp_att29
00:25:40  34  ,att30 ajp_att30
00:25:40  35  ,att31 ajp_att31
00:25:40  36  ,att32 ajp_att32
00:25:40  37  ,att33 ajp_att33
00:25:40  38  ,att34 ajp_att34
00:25:40  39  ,att35 ajp_att35
00:25:40  40  ,att36 ajp_att36
00:25:40  41  ,att37 ajp_att37
00:25:40  42  FROM svm6162
00:25:40  43  /

Table created.

Elapsed: 00:00:00.21
00:25:40 SQL> 
00:25:40 SQL> ANALYZE TABLE ajp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.54
00:25:40 SQL> 
00:25:40 SQL> -- rpt
00:25:40 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19803

Elapsed: 00:00:00.78
00:25:41 SQL> SELECT COUNT(*)FROM ajp_att;

  COUNT(*)
----------
     19803

Elapsed: 00:00:00.00
00:25:41 SQL> 
00:25:41 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
