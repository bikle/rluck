
SQL*Plus: Release 11.2.0.1.0 Production on Thu Dec 30 11:16:30 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

11:16:30 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.01
11:16:30 SQL> 11:16:30 SQL> --
11:16:30 SQL> -- eur610.sql
11:16:30 SQL> --
11:16:30 SQL> 
11:16:30 SQL> -- Creates views and tables for backtesting a forex SVM strategy
11:16:30 SQL> 
11:16:30 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.00
11:16:30 SQL> 
11:16:30 SQL> -- I created di5min here:
11:16:30 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
11:16:30 SQL> 
11:16:30 SQL> CREATE OR REPLACE VIEW svm6102 AS
11:16:30   2  SELECT
11:16:30   3  pair
11:16:30   4  ,ydate
11:16:30   5  ,prdate
11:16:30   6  ,rownum rnum -- acts as t in my time-series
11:16:30   7  ,clse
11:16:30   8  -- Derive a bunch of attributes from clse, the latest price:
11:16:30   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
11:16:30  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
11:16:30  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
11:16:30  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
11:16:30  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
11:16:30  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
11:16:30  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
11:16:30  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
11:16:30  17  --
11:16:30  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
11:16:30  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
11:16:30  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
11:16:30  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
11:16:30  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
11:16:30  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
11:16:30  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
11:16:30  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
11:16:30  26  --
11:16:30  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
11:16:30  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
11:16:30  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
11:16:30  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
11:16:30  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
11:16:30  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
11:16:30  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
11:16:30  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
11:16:30  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
11:16:30  36  FROM di5min WHERE pair LIKE'%eur%'
11:16:30  37  AND ydate > sysdate - 95
11:16:30  38  ORDER BY ydate
11:16:30  39  /

View created.

Elapsed: 00:00:00.04
11:16:30 SQL> 
11:16:30 SQL> -- rpt
11:16:30 SQL> 
11:16:30 SQL> SELECT
11:16:30   2  pair
11:16:30   3  ,COUNT(pair)
11:16:30   4  ,MIN(clse),MAX(clse)
11:16:30   5  ,MIN(avg6),MAX(avg6)
11:16:30   6  ,MIN(ydate),MAX(ydate)
11:16:30   7  FROM svm6102
11:16:30   8  GROUP BY pair
11:16:30   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19726    1.29735	   1.4273 1.29875103 1.42436233 2010-09-26 20:55:01 2010-12-30 11:10:00

Elapsed: 00:00:00.91
11:16:31 SQL> 
11:16:31 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
11:16:31 SQL> DROP TABLE svm6122;
DROP TABLE svm6122
           *
ERROR at line 1:
ORA-00942: table or view does not exist


Elapsed: 00:00:00.04
11:16:31 SQL> CREATE TABLE svm6122 COMPRESS AS
11:16:31   2  SELECT
11:16:31   3  pair
11:16:31   4  ,ydate
11:16:31   5  ,prdate
11:16:31   6  ,clse
11:16:31   7  -- g6 is important. I want to predict g6:
11:16:31   8  ,ld6 - clse g6
11:16:31   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
11:16:31  10  -- I want more attributes from the ones I derived above:
11:16:31  11  -- clse relation to moving-min
11:16:31  12  ,clse-min4  cm4
11:16:31  13  ,clse-min6  cm6
11:16:31  14  ,clse-min8  cm8
11:16:31  15  ,clse-min10 cm10
11:16:31  16  ,clse-min12 cm12
11:16:31  17  ,clse-min14 cm14
11:16:31  18  ,clse-min16 cm16
11:16:31  19  ,clse-min18 cm18
11:16:31  20  -- clse relation to moving-avg
11:16:31  21  ,clse-avg4  ca4
11:16:31  22  ,clse-avg6  ca6
11:16:31  23  ,clse-avg8  ca8
11:16:31  24  ,clse-avg10 ca10
11:16:31  25  ,clse-avg12 ca12
11:16:31  26  ,clse-avg14 ca14
11:16:31  27  ,clse-avg16 ca16
11:16:31  28  ,clse-avg18 ca18
11:16:31  29  -- clse relation to moving-max
11:16:31  30  ,clse-max4  cx4
11:16:31  31  ,clse-max6  cx6
11:16:31  32  ,clse-max8  cx8
11:16:31  33  ,clse-max10 cx10
11:16:31  34  ,clse-max12 cx12
11:16:31  35  ,clse-max14 cx14
11:16:31  36  ,clse-max16 cx16
11:16:31  37  ,clse-max18 cx18
11:16:31  38  -- Derive more attributes.
11:16:31  39  -- I want to use CORR() here to help SVM see the shape of the series.
11:16:31  40  -- But COVAR_POP is more stable:
11:16:31  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
11:16:31  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
11:16:31  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
11:16:31  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
11:16:31  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
11:16:31  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
11:16:31  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
11:16:31  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
11:16:31  49  -- Derive date related attributes:
11:16:31  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
11:16:31  51  ,0+TO_CHAR(ydate,'D')d
11:16:31  52  ,0+TO_CHAR(ydate,'W')w
11:16:31  53  -- mpm stands for minutes-past-midnight:
11:16:31  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
11:16:31  55  -- mph stands for minutes-past-hour:
11:16:31  56  ,0+TO_CHAR(ydate,'MI')mph
11:16:31  57  FROM svm6102
11:16:31  58  ORDER BY ydate
11:16:31  59  /

Table created.

Elapsed: 00:00:02.34
11:16:34 SQL> 
11:16:34 SQL> -- rpt
11:16:34 SQL> 
11:16:34 SQL> SELECT
11:16:34   2  pair
11:16:34   3  ,COUNT(pair)
11:16:34   4  ,MIN(clse),MAX(clse)
11:16:34   5  ,MIN(ydate),MAX(ydate)
11:16:34   6  FROM svm6122
11:16:34   7  GROUP BY pair
11:16:34   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19726    1.29735	   1.4273 2010-09-26 20:55:01 2010-12-30 11:10:00

Elapsed: 00:00:00.04
11:16:34 SQL> 
11:16:34 SQL> -- Prepare for derivation of NTILE based params:
11:16:34 SQL> 
11:16:34 SQL> DROP TABLE svm6142;
DROP TABLE svm6142
           *
ERROR at line 1:
ORA-00942: table or view does not exist


Elapsed: 00:00:00.02
11:16:34 SQL> CREATE TABLE svm6142 COMPRESS AS
11:16:34   2  SELECT
11:16:34   3  pair
11:16:34   4  ,ydate
11:16:34   5  ,prdate
11:16:34   6  ,clse
11:16:34   7  ,g6
11:16:34   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
11:16:34   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
11:16:34  10  ,CASE WHEN trend IS NULL THEN 1
11:16:34  11  	    WHEN trend =0      THEN 1
11:16:34  12  	    ELSE trend END trend
11:16:34  13  ,cm4
11:16:34  14  ,cm6
11:16:34  15  ,cm8
11:16:34  16  ,cm10
11:16:34  17  ,cm12
11:16:34  18  ,cm14
11:16:34  19  ,cm16
11:16:34  20  ,cm18
11:16:34  21  --
11:16:34  22  ,ca4
11:16:34  23  ,ca6
11:16:34  24  ,ca8
11:16:34  25  ,ca10
11:16:34  26  ,ca12
11:16:34  27  ,ca14
11:16:34  28  ,ca16
11:16:34  29  ,ca18
11:16:34  30  --
11:16:34  31  ,cx4
11:16:34  32  ,cx6
11:16:34  33  ,cx8
11:16:34  34  ,cx10
11:16:34  35  ,cx12
11:16:34  36  ,cx14
11:16:34  37  ,cx16
11:16:34  38  ,cx18
11:16:34  39  --
11:16:34  40  ,crr4
11:16:34  41  ,crr6
11:16:34  42  ,crr8
11:16:34  43  ,crr10
11:16:34  44  ,crr12
11:16:34  45  ,crr14
11:16:34  46  ,crr16
11:16:34  47  ,crr18
11:16:34  48  --
11:16:34  49  ,hh
11:16:34  50  ,d
11:16:34  51  ,w
11:16:34  52  ,mpm
11:16:34  53  ,mph
11:16:34  54  FROM svm6122
11:16:34  55  ORDER BY ydate
11:16:34  56  /

Table created.

Elapsed: 00:00:00.36
11:16:34 SQL> 
11:16:34 SQL> -- rpt
11:16:34 SQL> 
11:16:34 SQL> SELECT
11:16:34   2  pair
11:16:34   3  ,trend
11:16:34   4  ,gatt
11:16:34   5  ,COUNT(pair)
11:16:34   6  ,AVG(g6)
11:16:34   7  FROM svm6142
11:16:34   8  GROUP BY pair,trend,gatt
11:16:34   9  ORDER BY pair,trend,gatt
11:16:34  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6137 -.00307718
eur_usd 	-1 up	      3733 .004489134
eur_usd 	-1		20
eur_usd 	 1 nup	      6025   -.003111
eur_usd 	 1 up	      3759 .005106536
eur_usd 	 1		52

6 rows selected.

Elapsed: 00:00:00.03
11:16:34 SQL> 
11:16:34 SQL> 
11:16:34 SQL> -- Derive NTILE based params:
11:16:34 SQL> 
11:16:34 SQL> DROP TABLE svm6162;
DROP TABLE svm6162
           *
ERROR at line 1:
ORA-00942: table or view does not exist


Elapsed: 00:00:00.02
11:16:34 SQL> CREATE TABLE svm6162 COMPRESS AS
11:16:34   2  SELECT
11:16:34   3  pair
11:16:34   4  ,ydate
11:16:34   5  ,prdate
11:16:34   6  ,clse
11:16:34   7  ,g6
11:16:34   8  ,gatt
11:16:34   9  ,gattn
11:16:34  10  ,trend
11:16:34  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
11:16:34  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
11:16:34  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
11:16:34  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
11:16:34  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
11:16:34  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
11:16:34  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
11:16:34  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
11:16:34  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
11:16:34  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
11:16:34  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
11:16:34  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
11:16:34  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
11:16:34  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
11:16:34  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
11:16:34  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
11:16:34  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
11:16:34  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
11:16:34  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
11:16:34  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
11:16:34  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
11:16:34  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
11:16:34  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
11:16:34  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
11:16:34  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
11:16:34  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
11:16:34  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
11:16:34  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
11:16:34  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
11:16:34  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
11:16:34  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
11:16:34  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
11:16:34  43  ,hh  att32
11:16:34  44  ,d   att33
11:16:34  45  ,w   att34
11:16:34  46  ,mpm att35
11:16:34  47  ,mph att36
11:16:34  48  ,trend att37
11:16:34  49  FROM svm6142
11:16:34  50  ORDER BY ydate
11:16:34  51  /

Table created.

Elapsed: 00:00:04.76
11:16:39 SQL> 
11:16:39 SQL> -- rpt
11:16:39 SQL> 
11:16:39 SQL> SELECT
11:16:39   2  pair
11:16:39   3  ,trend
11:16:39   4  ,gatt
11:16:39   5  ,COUNT(pair)
11:16:39   6  ,AVG(g6)
11:16:39   7  FROM svm6162
11:16:39   8  GROUP BY pair,trend,gatt
11:16:39   9  ORDER BY pair,trend,gatt
11:16:39  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6137 -.00307718
eur_usd 	-1 up	      3733 .004489134
eur_usd 	-1		20
eur_usd 	 1 nup	      6025   -.003111
eur_usd 	 1 up	      3759 .005106536
eur_usd 	 1		52

6 rows selected.

Elapsed: 00:00:00.03
11:16:39 SQL> 
11:16:39 SQL> DROP TABLE modsrc;
DROP TABLE modsrc
           *
ERROR at line 1:
ORA-00942: table or view does not exist


Elapsed: 00:00:00.01
11:16:39 SQL> CREATE TABLE modsrc COMPRESS AS
11:16:39   2  SELECT
11:16:39   3  pair
11:16:39   4  ,ydate
11:16:39   5  ,prdate
11:16:39   6  ,trend
11:16:39   7  ,g6
11:16:39   8  ,gatt
11:16:39   9  ,gattn
11:16:39  10  FROM svm6162
11:16:39  11  /

Table created.

Elapsed: 00:00:00.08
11:16:39 SQL> 
11:16:39 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
11:16:39 SQL> 
11:16:39 SQL> DROP   TABLE eur_ms610 ;
DROP   TABLE eur_ms610
             *
ERROR at line 1:
ORA-00942: table or view does not exist


Elapsed: 00:00:00.01
11:16:39 SQL> CREATE TABLE eur_ms610 COMPRESS AS
11:16:39   2  SELECT
11:16:39   3  ydate
11:16:39   4  ,trend eur_trend
11:16:39   5  ,g6    eur_g6
11:16:39   6  ,gatt  eur_gatt
11:16:39   7  ,gattn eur_gattn
11:16:39   8  FROM modsrc
11:16:39   9  /

Table created.

Elapsed: 00:00:00.07
11:16:39 SQL> 
11:16:39 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
11:16:39 SQL> 
11:16:39 SQL> -- I need a copy of the attributes:
11:16:39 SQL> 
11:16:39 SQL> 
11:16:39 SQL> DROP   TABLE eur_att;
DROP   TABLE eur_att
             *
ERROR at line 1:
ORA-00942: table or view does not exist


Elapsed: 00:00:00.01
11:16:39 SQL> CREATE TABLE eur_att COMPRESS AS
11:16:39   2  SELECT
11:16:39   3  ydate
11:16:39   4  ,att00 eur_att00
11:16:39   5  ,att01 eur_att01
11:16:39   6  ,att02 eur_att02
11:16:39   7  ,att03 eur_att03
11:16:39   8  ,att04 eur_att04
11:16:39   9  ,att05 eur_att05
11:16:39  10  ,att06 eur_att06
11:16:39  11  ,att07 eur_att07
11:16:39  12  ,att08 eur_att08
11:16:39  13  ,att09 eur_att09
11:16:39  14  ,att10 eur_att10
11:16:39  15  ,att11 eur_att11
11:16:39  16  ,att12 eur_att12
11:16:39  17  ,att13 eur_att13
11:16:39  18  ,att14 eur_att14
11:16:39  19  ,att15 eur_att15
11:16:39  20  ,att16 eur_att16
11:16:39  21  ,att17 eur_att17
11:16:39  22  ,att18 eur_att18
11:16:39  23  ,att19 eur_att19
11:16:39  24  ,att20 eur_att20
11:16:39  25  ,att21 eur_att21
11:16:39  26  ,att22 eur_att22
11:16:39  27  ,att23 eur_att23
11:16:39  28  ,att24 eur_att24
11:16:39  29  ,att25 eur_att25
11:16:39  30  ,att26 eur_att26
11:16:39  31  ,att27 eur_att27
11:16:39  32  ,att28 eur_att28
11:16:39  33  ,att29 eur_att29
11:16:39  34  ,att30 eur_att30
11:16:39  35  ,att31 eur_att31
11:16:39  36  ,att32 eur_att32
11:16:39  37  ,att33 eur_att33
11:16:39  38  ,att34 eur_att34
11:16:39  39  ,att35 eur_att35
11:16:39  40  ,att36 eur_att36
11:16:39  41  ,att37 eur_att37
11:16:39  42  FROM svm6162
11:16:39  43  /

Table created.

Elapsed: 00:00:00.17
11:16:40 SQL> 
11:16:40 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
11:16:40 SQL> 
11:16:40 SQL> -- rpt
11:16:40 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19726

Elapsed: 00:00:00.86
11:16:41 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19726

Elapsed: 00:00:00.00
11:16:41 SQL> 
11:16:41 SQL> --
11:16:41 SQL> -- aud610.sql
11:16:41 SQL> --
11:16:41 SQL> 
11:16:41 SQL> -- Creates views and tables for backtesting a forex SVM strategy
11:16:41 SQL> 
11:16:41 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.02
11:16:41 SQL> 
11:16:41 SQL> -- I created di5min here:
11:16:41 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
11:16:41 SQL> 
11:16:41 SQL> CREATE OR REPLACE VIEW svm6102 AS
11:16:41   2  SELECT
11:16:41   3  pair
11:16:41   4  ,ydate
11:16:41   5  ,prdate
11:16:41   6  ,rownum rnum -- acts as t in my time-series
11:16:41   7  ,clse
11:16:41   8  -- Derive a bunch of attributes from clse, the latest price:
11:16:41   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
11:16:41  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
11:16:41  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
11:16:41  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
11:16:41  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
11:16:41  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
11:16:41  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
11:16:41  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
11:16:41  17  --
11:16:41  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
11:16:41  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
11:16:41  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
11:16:41  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
11:16:41  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
11:16:41  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
11:16:41  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
11:16:41  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
11:16:41  26  --
11:16:41  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
11:16:41  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
11:16:41  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
11:16:41  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
11:16:41  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
11:16:41  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
11:16:41  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
11:16:41  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
11:16:41  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
11:16:41  36  FROM di5min WHERE pair LIKE'%aud%'
11:16:41  37  AND ydate > sysdate - 95
11:16:41  38  ORDER BY ydate
11:16:41  39  /

View created.

Elapsed: 00:00:00.05
11:16:41 SQL> 
11:16:41 SQL> -- rpt
11:16:41 SQL> 
11:16:41 SQL> SELECT
11:16:41   2  pair
11:16:41   3  ,COUNT(pair)
11:16:41   4  ,MIN(clse),MAX(clse)
11:16:41   5  ,MIN(avg6),MAX(avg6)
11:16:41   6  ,MIN(ydate),MAX(ydate)
11:16:41   7  FROM svm6102
11:16:41   8  GROUP BY pair
11:16:41   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19723	.95405	1.0195625 .957141438 1.01819366 2010-09-26 20:55:01 2010-12-30 11:10:00

Elapsed: 00:00:00.91
11:16:42 SQL> 
11:16:42 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
11:16:42 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.19
11:16:42 SQL> CREATE TABLE svm6122 COMPRESS AS
11:16:42   2  SELECT
11:16:42   3  pair
11:16:42   4  ,ydate
11:16:42   5  ,prdate
11:16:42   6  ,clse
11:16:42   7  -- g6 is important. I want to predict g6:
11:16:42   8  ,ld6 - clse g6
11:16:42   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
11:16:42  10  -- I want more attributes from the ones I derived above:
11:16:42  11  -- clse relation to moving-min
11:16:42  12  ,clse-min4  cm4
11:16:42  13  ,clse-min6  cm6
11:16:42  14  ,clse-min8  cm8
11:16:42  15  ,clse-min10 cm10
11:16:42  16  ,clse-min12 cm12
11:16:42  17  ,clse-min14 cm14
11:16:42  18  ,clse-min16 cm16
11:16:42  19  ,clse-min18 cm18
11:16:42  20  -- clse relation to moving-avg
11:16:42  21  ,clse-avg4  ca4
11:16:42  22  ,clse-avg6  ca6
11:16:42  23  ,clse-avg8  ca8
11:16:42  24  ,clse-avg10 ca10
11:16:42  25  ,clse-avg12 ca12
11:16:42  26  ,clse-avg14 ca14
11:16:42  27  ,clse-avg16 ca16
11:16:42  28  ,clse-avg18 ca18
11:16:42  29  -- clse relation to moving-max
11:16:42  30  ,clse-max4  cx4
11:16:42  31  ,clse-max6  cx6
11:16:42  32  ,clse-max8  cx8
11:16:42  33  ,clse-max10 cx10
11:16:42  34  ,clse-max12 cx12
11:16:42  35  ,clse-max14 cx14
11:16:42  36  ,clse-max16 cx16
11:16:42  37  ,clse-max18 cx18
11:16:42  38  -- Derive more attributes.
11:16:42  39  -- I want to use CORR() here to help SVM see the shape of the series.
11:16:42  40  -- But COVAR_POP is more stable:
11:16:42  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
11:16:42  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
11:16:42  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
11:16:42  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
11:16:42  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
11:16:42  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
11:16:42  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
11:16:42  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
11:16:42  49  -- Derive date related attributes:
11:16:42  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
11:16:42  51  ,0+TO_CHAR(ydate,'D')d
11:16:42  52  ,0+TO_CHAR(ydate,'W')w
11:16:42  53  -- mpm stands for minutes-past-midnight:
11:16:42  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
11:16:42  55  -- mph stands for minutes-past-hour:
11:16:42  56  ,0+TO_CHAR(ydate,'MI')mph
11:16:42  57  FROM svm6102
11:16:42  58  ORDER BY ydate
11:16:42  59  /

Table created.

Elapsed: 00:00:02.12
11:16:44 SQL> 
11:16:44 SQL> -- rpt
11:16:44 SQL> 
11:16:44 SQL> SELECT
11:16:44   2  pair
11:16:44   3  ,COUNT(pair)
11:16:44   4  ,MIN(clse),MAX(clse)
11:16:44   5  ,MIN(ydate),MAX(ydate)
11:16:44   6  FROM svm6122
11:16:44   7  GROUP BY pair
11:16:44   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19723	.95405	1.0195625 2010-09-26 20:55:01 2010-12-30 11:10:00

Elapsed: 00:00:00.04
11:16:44 SQL> 
11:16:44 SQL> -- Prepare for derivation of NTILE based params:
11:16:44 SQL> 
11:16:44 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.18
11:16:44 SQL> CREATE TABLE svm6142 COMPRESS AS
11:16:44   2  SELECT
11:16:44   3  pair
11:16:44   4  ,ydate
11:16:44   5  ,prdate
11:16:44   6  ,clse
11:16:44   7  ,g6
11:16:44   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
11:16:44   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
11:16:44  10  ,CASE WHEN trend IS NULL THEN 1
11:16:44  11  	    WHEN trend =0      THEN 1
11:16:44  12  	    ELSE trend END trend
11:16:44  13  ,cm4
11:16:44  14  ,cm6
11:16:44  15  ,cm8
11:16:44  16  ,cm10
11:16:44  17  ,cm12
11:16:44  18  ,cm14
11:16:44  19  ,cm16
11:16:44  20  ,cm18
11:16:44  21  --
11:16:44  22  ,ca4
11:16:44  23  ,ca6
11:16:44  24  ,ca8
11:16:44  25  ,ca10
11:16:44  26  ,ca12
11:16:44  27  ,ca14
11:16:44  28  ,ca16
11:16:44  29  ,ca18
11:16:44  30  --
11:16:44  31  ,cx4
11:16:44  32  ,cx6
11:16:44  33  ,cx8
11:16:44  34  ,cx10
11:16:44  35  ,cx12
11:16:44  36  ,cx14
11:16:44  37  ,cx16
11:16:44  38  ,cx18
11:16:44  39  --
11:16:44  40  ,crr4
11:16:44  41  ,crr6
11:16:44  42  ,crr8
11:16:44  43  ,crr10
11:16:44  44  ,crr12
11:16:44  45  ,crr14
11:16:44  46  ,crr16
11:16:44  47  ,crr18
11:16:44  48  --
11:16:44  49  ,hh
11:16:44  50  ,d
11:16:44  51  ,w
11:16:44  52  ,mpm
11:16:44  53  ,mph
11:16:44  54  FROM svm6122
11:16:44  55  ORDER BY ydate
11:16:44  56  /

Table created.

Elapsed: 00:00:00.37
11:16:45 SQL> 
11:16:45 SQL> -- rpt
11:16:45 SQL> 
11:16:45 SQL> SELECT
11:16:45   2  pair
11:16:45   3  ,trend
11:16:45   4  ,gatt
11:16:45   5  ,COUNT(pair)
11:16:45   6  ,AVG(g6)
11:16:45   7  FROM svm6142
11:16:45   8  GROUP BY pair,trend,gatt
11:16:45   9  ORDER BY pair,trend,gatt
11:16:45  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5230 -.00210869
aud_usd 	-1 up	      3818 .003727577
aud_usd 	-1		54
aud_usd 	 1 nup	      6812 -.00210327
aud_usd 	 1 up	      3791 .004024199
aud_usd 	 1		18

6 rows selected.

Elapsed: 00:00:00.07
11:16:45 SQL> 
11:16:45 SQL> 
11:16:45 SQL> -- Derive NTILE based params:
11:16:45 SQL> 
11:16:45 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.14
11:16:45 SQL> CREATE TABLE svm6162 COMPRESS AS
11:16:45   2  SELECT
11:16:45   3  pair
11:16:45   4  ,ydate
11:16:45   5  ,prdate
11:16:45   6  ,clse
11:16:45   7  ,g6
11:16:45   8  ,gatt
11:16:45   9  ,gattn
11:16:45  10  ,trend
11:16:45  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
11:16:45  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
11:16:45  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
11:16:45  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
11:16:45  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
11:16:45  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
11:16:45  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
11:16:45  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
11:16:45  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
11:16:45  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
11:16:45  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
11:16:45  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
11:16:45  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
11:16:45  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
11:16:45  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
11:16:45  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
11:16:45  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
11:16:45  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
11:16:45  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
11:16:45  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
11:16:45  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
11:16:45  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
11:16:45  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
11:16:45  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
11:16:45  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
11:16:45  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
11:16:45  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
11:16:45  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
11:16:45  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
11:16:45  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
11:16:45  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
11:16:45  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
11:16:45  43  ,hh  att32
11:16:45  44  ,d   att33
11:16:45  45  ,w   att34
11:16:45  46  ,mpm att35
11:16:45  47  ,mph att36
11:16:45  48  ,trend att37
11:16:45  49  FROM svm6142
11:16:45  50  ORDER BY ydate
11:16:45  51  /

Table created.

Elapsed: 00:00:04.89
11:16:50 SQL> 
11:16:50 SQL> -- rpt
11:16:50 SQL> 
11:16:50 SQL> SELECT
11:16:50   2  pair
11:16:50   3  ,trend
11:16:50   4  ,gatt
11:16:50   5  ,COUNT(pair)
11:16:50   6  ,AVG(g6)
11:16:50   7  FROM svm6162
11:16:50   8  GROUP BY pair,trend,gatt
11:16:50   9  ORDER BY pair,trend,gatt
11:16:50  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5230 -.00210869
aud_usd 	-1 up	      3818 .003727577
aud_usd 	-1		54
aud_usd 	 1 nup	      6812 -.00210327
aud_usd 	 1 up	      3791 .004024199
aud_usd 	 1		18

6 rows selected.

Elapsed: 00:00:00.03
11:16:50 SQL> 
11:16:50 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
11:16:50 SQL> CREATE TABLE modsrc COMPRESS AS
11:16:50   2  SELECT
11:16:50   3  pair
11:16:50   4  ,ydate
11:16:50   5  ,prdate
11:16:50   6  ,trend
11:16:50   7  ,g6
11:16:50   8  ,gatt
11:16:50   9  ,gattn
11:16:50  10  FROM svm6162
11:16:50  11  /

Table created.

Elapsed: 00:00:00.08
11:16:50 SQL> 
11:16:50 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
11:16:50 SQL> 
11:16:50 SQL> DROP   TABLE aud_ms610 ;
DROP   TABLE aud_ms610
             *
ERROR at line 1:
ORA-00942: table or view does not exist


Elapsed: 00:00:00.01
11:16:50 SQL> CREATE TABLE aud_ms610 COMPRESS AS
11:16:50   2  SELECT
11:16:50   3  ydate
11:16:50   4  ,trend aud_trend
11:16:50   5  ,g6    aud_g6
11:16:50   6  ,gatt  aud_gatt
11:16:50   7  ,gattn aud_gattn
11:16:50   8  FROM modsrc
11:16:50   9  /

Table created.

Elapsed: 00:00:00.06
11:16:50 SQL> 
11:16:50 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
11:16:51 SQL> 
11:16:51 SQL> -- I need a copy of the attributes:
11:16:51 SQL> 
11:16:51 SQL> 
11:16:51 SQL> DROP   TABLE aud_att;
DROP   TABLE aud_att
             *
ERROR at line 1:
ORA-00942: table or view does not exist


Elapsed: 00:00:00.02
11:16:51 SQL> CREATE TABLE aud_att COMPRESS AS
11:16:51   2  SELECT
11:16:51   3  ydate
11:16:51   4  ,att00 aud_att00
11:16:51   5  ,att01 aud_att01
11:16:51   6  ,att02 aud_att02
11:16:51   7  ,att03 aud_att03
11:16:51   8  ,att04 aud_att04
11:16:51   9  ,att05 aud_att05
11:16:51  10  ,att06 aud_att06
11:16:51  11  ,att07 aud_att07
11:16:51  12  ,att08 aud_att08
11:16:51  13  ,att09 aud_att09
11:16:51  14  ,att10 aud_att10
11:16:51  15  ,att11 aud_att11
11:16:51  16  ,att12 aud_att12
11:16:51  17  ,att13 aud_att13
11:16:51  18  ,att14 aud_att14
11:16:51  19  ,att15 aud_att15
11:16:51  20  ,att16 aud_att16
11:16:51  21  ,att17 aud_att17
11:16:51  22  ,att18 aud_att18
11:16:51  23  ,att19 aud_att19
11:16:51  24  ,att20 aud_att20
11:16:51  25  ,att21 aud_att21
11:16:51  26  ,att22 aud_att22
11:16:51  27  ,att23 aud_att23
11:16:51  28  ,att24 aud_att24
11:16:51  29  ,att25 aud_att25
11:16:51  30  ,att26 aud_att26
11:16:51  31  ,att27 aud_att27
11:16:51  32  ,att28 aud_att28
11:16:51  33  ,att29 aud_att29
11:16:51  34  ,att30 aud_att30
11:16:51  35  ,att31 aud_att31
11:16:51  36  ,att32 aud_att32
11:16:51  37  ,att33 aud_att33
11:16:51  38  ,att34 aud_att34
11:16:51  39  ,att35 aud_att35
11:16:51  40  ,att36 aud_att36
11:16:51  41  ,att37 aud_att37
11:16:51  42  FROM svm6162
11:16:51  43  /

Table created.

Elapsed: 00:00:00.17
11:16:51 SQL> 
11:16:51 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
11:16:51 SQL> 
11:16:51 SQL> -- rpt
11:16:51 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19723

Elapsed: 00:00:00.84
11:16:52 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19723

Elapsed: 00:00:00.00
11:16:52 SQL> 
11:16:52 SQL> --
11:16:52 SQL> -- gbp610.sql
11:16:52 SQL> --
11:16:52 SQL> 
11:16:52 SQL> -- Creates views and tables for backtesting a forex SVM strategy
11:16:52 SQL> 
11:16:52 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.28
11:16:52 SQL> 
11:16:52 SQL> -- I created di5min here:
11:16:52 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
11:16:52 SQL> 
11:16:52 SQL> CREATE OR REPLACE VIEW svm6102 AS
11:16:52   2  SELECT
11:16:52   3  pair
11:16:52   4  ,ydate
11:16:52   5  ,prdate
11:16:52   6  ,rownum rnum -- acts as t in my time-series
11:16:52   7  ,clse
11:16:52   8  -- Derive a bunch of attributes from clse, the latest price:
11:16:52   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
11:16:52  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
11:16:52  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
11:16:52  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
11:16:52  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
11:16:52  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
11:16:52  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
11:16:52  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
11:16:52  17  --
11:16:52  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
11:16:52  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
11:16:52  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
11:16:52  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
11:16:52  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
11:16:52  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
11:16:52  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
11:16:52  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
11:16:52  26  --
11:16:52  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
11:16:52  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
11:16:52  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
11:16:52  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
11:16:52  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
11:16:52  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
11:16:52  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
11:16:52  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
11:16:52  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
11:16:52  36  FROM di5min WHERE pair LIKE'%gbp%'
11:16:52  37  AND ydate > sysdate - 95
11:16:52  38  ORDER BY ydate
11:16:52  39  /

View created.

Elapsed: 00:00:00.05
11:16:52 SQL> 
11:16:52 SQL> -- rpt
11:16:52 SQL> 
11:16:52 SQL> SELECT
11:16:52   2  pair
11:16:52   3  ,COUNT(pair)
11:16:52   4  ,MIN(clse),MAX(clse)
11:16:52   5  ,MIN(avg6),MAX(avg6)
11:16:52   6  ,MIN(ydate),MAX(ydate)
11:16:52   7  FROM svm6102
11:16:52   8  GROUP BY pair
11:16:52   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19726   1.535325	   1.6295 1.53696747 1.62716986 2010-09-26 20:55:01 2010-12-30 11:10:00

Elapsed: 00:00:00.89
11:16:53 SQL> 
11:16:53 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
11:16:53 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.27
11:16:54 SQL> CREATE TABLE svm6122 COMPRESS AS
11:16:54   2  SELECT
11:16:54   3  pair
11:16:54   4  ,ydate
11:16:54   5  ,prdate
11:16:54   6  ,clse
11:16:54   7  -- g6 is important. I want to predict g6:
11:16:54   8  ,ld6 - clse g6
11:16:54   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
11:16:54  10  -- I want more attributes from the ones I derived above:
11:16:54  11  -- clse relation to moving-min
11:16:54  12  ,clse-min4  cm4
11:16:54  13  ,clse-min6  cm6
11:16:54  14  ,clse-min8  cm8
11:16:54  15  ,clse-min10 cm10
11:16:54  16  ,clse-min12 cm12
11:16:54  17  ,clse-min14 cm14
11:16:54  18  ,clse-min16 cm16
11:16:54  19  ,clse-min18 cm18
11:16:54  20  -- clse relation to moving-avg
11:16:54  21  ,clse-avg4  ca4
11:16:54  22  ,clse-avg6  ca6
11:16:54  23  ,clse-avg8  ca8
11:16:54  24  ,clse-avg10 ca10
11:16:54  25  ,clse-avg12 ca12
11:16:54  26  ,clse-avg14 ca14
11:16:54  27  ,clse-avg16 ca16
11:16:54  28  ,clse-avg18 ca18
11:16:54  29  -- clse relation to moving-max
11:16:54  30  ,clse-max4  cx4
11:16:54  31  ,clse-max6  cx6
11:16:54  32  ,clse-max8  cx8
11:16:54  33  ,clse-max10 cx10
11:16:54  34  ,clse-max12 cx12
11:16:54  35  ,clse-max14 cx14
11:16:54  36  ,clse-max16 cx16
11:16:54  37  ,clse-max18 cx18
11:16:54  38  -- Derive more attributes.
11:16:54  39  -- I want to use CORR() here to help SVM see the shape of the series.
11:16:54  40  -- But COVAR_POP is more stable:
11:16:54  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
11:16:54  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
11:16:54  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
11:16:54  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
11:16:54  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
11:16:54  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
11:16:54  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
11:16:54  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
11:16:54  49  -- Derive date related attributes:
11:16:54  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
11:16:54  51  ,0+TO_CHAR(ydate,'D')d
11:16:54  52  ,0+TO_CHAR(ydate,'W')w
11:16:54  53  -- mpm stands for minutes-past-midnight:
11:16:54  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
11:16:54  55  -- mph stands for minutes-past-hour:
11:16:54  56  ,0+TO_CHAR(ydate,'MI')mph
11:16:54  57  FROM svm6102
11:16:54  58  ORDER BY ydate
11:16:54  59  /

Table created.

Elapsed: 00:00:02.03
11:16:56 SQL> 
11:16:56 SQL> -- rpt
11:16:56 SQL> 
11:16:56 SQL> SELECT
11:16:56   2  pair
11:16:56   3  ,COUNT(pair)
11:16:56   4  ,MIN(clse),MAX(clse)
11:16:56   5  ,MIN(ydate),MAX(ydate)
11:16:56   6  FROM svm6122
11:16:56   7  GROUP BY pair
11:16:56   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19726   1.535325	   1.6295 2010-09-26 20:55:01 2010-12-30 11:10:00

Elapsed: 00:00:00.04
11:16:56 SQL> 
11:16:56 SQL> -- Prepare for derivation of NTILE based params:
11:16:56 SQL> 
11:16:56 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.21
11:16:56 SQL> CREATE TABLE svm6142 COMPRESS AS
11:16:56   2  SELECT
11:16:56   3  pair
11:16:56   4  ,ydate
11:16:56   5  ,prdate
11:16:56   6  ,clse
11:16:56   7  ,g6
11:16:56   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
11:16:56   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
11:16:56  10  ,CASE WHEN trend IS NULL THEN 1
11:16:56  11  	    WHEN trend =0      THEN 1
11:16:56  12  	    ELSE trend END trend
11:16:56  13  ,cm4
11:16:56  14  ,cm6
11:16:56  15  ,cm8
11:16:56  16  ,cm10
11:16:56  17  ,cm12
11:16:56  18  ,cm14
11:16:56  19  ,cm16
11:16:56  20  ,cm18
11:16:56  21  --
11:16:56  22  ,ca4
11:16:56  23  ,ca6
11:16:56  24  ,ca8
11:16:56  25  ,ca10
11:16:56  26  ,ca12
11:16:56  27  ,ca14
11:16:56  28  ,ca16
11:16:56  29  ,ca18
11:16:56  30  --
11:16:56  31  ,cx4
11:16:56  32  ,cx6
11:16:56  33  ,cx8
11:16:56  34  ,cx10
11:16:56  35  ,cx12
11:16:56  36  ,cx14
11:16:56  37  ,cx16
11:16:56  38  ,cx18
11:16:56  39  --
11:16:56  40  ,crr4
11:16:56  41  ,crr6
11:16:56  42  ,crr8
11:16:56  43  ,crr10
11:16:56  44  ,crr12
11:16:56  45  ,crr14
11:16:56  46  ,crr16
11:16:56  47  ,crr18
11:16:56  48  --
11:16:56  49  ,hh
11:16:56  50  ,d
11:16:56  51  ,w
11:16:56  52  ,mpm
11:16:56  53  ,mph
11:16:56  54  FROM svm6122
11:16:56  55  ORDER BY ydate
11:16:56  56  /

Table created.

Elapsed: 00:00:00.37
11:16:56 SQL> 
11:16:56 SQL> -- rpt
11:16:56 SQL> 
11:16:56 SQL> SELECT
11:16:56   2  pair
11:16:56   3  ,trend
11:16:56   4  ,gatt
11:16:56   5  ,COUNT(pair)
11:16:56   6  ,AVG(g6)
11:16:56   7  FROM svm6142
11:16:56   8  GROUP BY pair,trend,gatt
11:16:56   9  ORDER BY pair,trend,gatt
11:16:56  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6298 -.00255939
gbp_usd 	-1 up	      3579 .004286117
gbp_usd 	-1		53
gbp_usd 	 1 nup	      6293 -.00265559
gbp_usd 	 1 up	      3484 .004360516
gbp_usd 	 1		19

6 rows selected.

Elapsed: 00:00:00.04
11:16:56 SQL> 
11:16:56 SQL> 
11:16:56 SQL> -- Derive NTILE based params:
11:16:56 SQL> 
11:16:56 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.19
11:16:56 SQL> CREATE TABLE svm6162 COMPRESS AS
11:16:56   2  SELECT
11:16:56   3  pair
11:16:56   4  ,ydate
11:16:56   5  ,prdate
11:16:56   6  ,clse
11:16:56   7  ,g6
11:16:56   8  ,gatt
11:16:56   9  ,gattn
11:16:56  10  ,trend
11:16:56  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
11:16:56  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
11:16:56  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
11:16:56  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
11:16:56  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
11:16:56  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
11:16:56  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
11:16:56  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
11:16:56  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
11:16:56  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
11:16:56  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
11:16:56  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
11:16:56  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
11:16:56  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
11:16:56  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
11:16:56  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
11:16:56  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
11:16:56  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
11:16:56  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
11:16:56  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
11:16:56  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
11:16:56  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
11:16:56  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
11:16:56  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
11:16:56  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
11:16:56  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
11:16:56  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
11:16:56  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
11:16:56  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
11:16:56  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
11:16:56  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
11:16:56  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
11:16:56  43  ,hh  att32
11:16:56  44  ,d   att33
11:16:56  45  ,w   att34
11:16:56  46  ,mpm att35
11:16:56  47  ,mph att36
11:16:56  48  ,trend att37
11:16:56  49  FROM svm6142
11:16:56  50  ORDER BY ydate
11:16:56  51  /

Table created.

Elapsed: 00:00:04.77
11:17:01 SQL> 
11:17:01 SQL> -- rpt
11:17:01 SQL> 
11:17:01 SQL> SELECT
11:17:01   2  pair
11:17:01   3  ,trend
11:17:01   4  ,gatt
11:17:01   5  ,COUNT(pair)
11:17:01   6  ,AVG(g6)
11:17:01   7  FROM svm6162
11:17:01   8  GROUP BY pair,trend,gatt
11:17:01   9  ORDER BY pair,trend,gatt
11:17:01  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6298 -.00255939
gbp_usd 	-1 up	      3579 .004286117
gbp_usd 	-1		53
gbp_usd 	 1 nup	      6293 -.00265559
gbp_usd 	 1 up	      3484 .004360516
gbp_usd 	 1		19

6 rows selected.

Elapsed: 00:00:00.03
11:17:01 SQL> 
11:17:01 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.50
11:17:02 SQL> CREATE TABLE modsrc COMPRESS AS
11:17:02   2  SELECT
11:17:02   3  pair
11:17:02   4  ,ydate
11:17:02   5  ,prdate
11:17:02   6  ,trend
11:17:02   7  ,g6
11:17:02   8  ,gatt
11:17:02   9  ,gattn
11:17:02  10  FROM svm6162
11:17:02  11  /

Table created.

Elapsed: 00:00:00.09
11:17:02 SQL> 
11:17:02 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
11:17:02 SQL> 
11:17:02 SQL> DROP   TABLE gbp_ms610 ;
DROP   TABLE gbp_ms610
             *
ERROR at line 1:
ORA-00942: table or view does not exist


Elapsed: 00:00:00.01
11:17:02 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
11:17:02   2  SELECT
11:17:02   3  ydate
11:17:02   4  ,trend gbp_trend
11:17:02   5  ,g6    gbp_g6
11:17:02   6  ,gatt  gbp_gatt
11:17:02   7  ,gattn gbp_gattn
11:17:02   8  FROM modsrc
11:17:02   9  /

Table created.

Elapsed: 00:00:00.06
11:17:02 SQL> 
11:17:02 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.13
11:17:02 SQL> 
11:17:02 SQL> -- I need a copy of the attributes:
11:17:02 SQL> 
11:17:02 SQL> 
11:17:02 SQL> DROP   TABLE gbp_att;
DROP   TABLE gbp_att
             *
ERROR at line 1:
ORA-00942: table or view does not exist


Elapsed: 00:00:00.03
11:17:02 SQL> CREATE TABLE gbp_att COMPRESS AS
11:17:02   2  SELECT
11:17:02   3  ydate
11:17:02   4  ,att00 gbp_att00
11:17:02   5  ,att01 gbp_att01
11:17:02   6  ,att02 gbp_att02
11:17:02   7  ,att03 gbp_att03
11:17:02   8  ,att04 gbp_att04
11:17:02   9  ,att05 gbp_att05
11:17:02  10  ,att06 gbp_att06
11:17:02  11  ,att07 gbp_att07
11:17:02  12  ,att08 gbp_att08
11:17:02  13  ,att09 gbp_att09
11:17:02  14  ,att10 gbp_att10
11:17:02  15  ,att11 gbp_att11
11:17:02  16  ,att12 gbp_att12
11:17:02  17  ,att13 gbp_att13
11:17:02  18  ,att14 gbp_att14
11:17:02  19  ,att15 gbp_att15
11:17:02  20  ,att16 gbp_att16
11:17:02  21  ,att17 gbp_att17
11:17:02  22  ,att18 gbp_att18
11:17:02  23  ,att19 gbp_att19
11:17:02  24  ,att20 gbp_att20
11:17:02  25  ,att21 gbp_att21
11:17:02  26  ,att22 gbp_att22
11:17:02  27  ,att23 gbp_att23
11:17:02  28  ,att24 gbp_att24
11:17:02  29  ,att25 gbp_att25
11:17:02  30  ,att26 gbp_att26
11:17:02  31  ,att27 gbp_att27
11:17:02  32  ,att28 gbp_att28
11:17:02  33  ,att29 gbp_att29
11:17:02  34  ,att30 gbp_att30
11:17:02  35  ,att31 gbp_att31
11:17:02  36  ,att32 gbp_att32
11:17:02  37  ,att33 gbp_att33
11:17:02  38  ,att34 gbp_att34
11:17:02  39  ,att35 gbp_att35
11:17:02  40  ,att36 gbp_att36
11:17:02  41  ,att37 gbp_att37
11:17:02  42  FROM svm6162
11:17:02  43  /

Table created.

Elapsed: 00:00:00.17
11:17:02 SQL> 
11:17:02 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:01.16
11:17:04 SQL> 
11:17:04 SQL> -- rpt
11:17:04 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19726

Elapsed: 00:00:00.85
11:17:04 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19726

Elapsed: 00:00:00.01
11:17:04 SQL> 
11:17:04 SQL> --
11:17:04 SQL> -- jpy610.sql
11:17:04 SQL> --
11:17:04 SQL> 
11:17:04 SQL> -- Creates views and tables for backtesting a forex SVM strategy
11:17:04 SQL> 
11:17:04 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.28
11:17:05 SQL> 
11:17:05 SQL> -- I created di5min here:
11:17:05 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
11:17:05 SQL> 
11:17:05 SQL> CREATE OR REPLACE VIEW svm6102 AS
11:17:05   2  SELECT
11:17:05   3  pair
11:17:05   4  ,ydate
11:17:05   5  ,prdate
11:17:05   6  ,rownum rnum -- acts as t in my time-series
11:17:05   7  ,clse
11:17:05   8  -- Derive a bunch of attributes from clse, the latest price:
11:17:05   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
11:17:05  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
11:17:05  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
11:17:05  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
11:17:05  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
11:17:05  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
11:17:05  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
11:17:05  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
11:17:05  17  --
11:17:05  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
11:17:05  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
11:17:05  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
11:17:05  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
11:17:05  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
11:17:05  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
11:17:05  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
11:17:05  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
11:17:05  26  --
11:17:05  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
11:17:05  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
11:17:05  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
11:17:05  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
11:17:05  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
11:17:05  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
11:17:05  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
11:17:05  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
11:17:05  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
11:17:05  36  FROM di5min WHERE pair LIKE'%jpy%'
11:17:05  37  AND ydate > sysdate - 95
11:17:05  38  ORDER BY ydate
11:17:05  39  /

View created.

Elapsed: 00:00:00.04
11:17:05 SQL> 
11:17:05 SQL> -- rpt
11:17:05 SQL> 
11:17:05 SQL> SELECT
11:17:05   2  pair
11:17:05   3  ,COUNT(pair)
11:17:05   4  ,MIN(clse),MAX(clse)
11:17:05   5  ,MIN(avg6),MAX(avg6)
11:17:05   6  ,MIN(ydate),MAX(ydate)
11:17:05   7  FROM svm6102
11:17:05   8  GROUP BY pair
11:17:05   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19723	 80.25	   84.485 80.3595205 84.3105479 2010-09-26 20:55:01 2010-12-30 11:10:00

Elapsed: 00:00:00.89
11:17:06 SQL> 
11:17:06 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
11:17:06 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
11:17:06 SQL> CREATE TABLE svm6122 COMPRESS AS
11:17:06   2  SELECT
11:17:06   3  pair
11:17:06   4  ,ydate
11:17:06   5  ,prdate
11:17:06   6  ,clse
11:17:06   7  -- g6 is important. I want to predict g6:
11:17:06   8  ,ld6 - clse g6
11:17:06   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
11:17:06  10  -- I want more attributes from the ones I derived above:
11:17:06  11  -- clse relation to moving-min
11:17:06  12  ,clse-min4  cm4
11:17:06  13  ,clse-min6  cm6
11:17:06  14  ,clse-min8  cm8
11:17:06  15  ,clse-min10 cm10
11:17:06  16  ,clse-min12 cm12
11:17:06  17  ,clse-min14 cm14
11:17:06  18  ,clse-min16 cm16
11:17:06  19  ,clse-min18 cm18
11:17:06  20  -- clse relation to moving-avg
11:17:06  21  ,clse-avg4  ca4
11:17:06  22  ,clse-avg6  ca6
11:17:06  23  ,clse-avg8  ca8
11:17:06  24  ,clse-avg10 ca10
11:17:06  25  ,clse-avg12 ca12
11:17:06  26  ,clse-avg14 ca14
11:17:06  27  ,clse-avg16 ca16
11:17:06  28  ,clse-avg18 ca18
11:17:06  29  -- clse relation to moving-max
11:17:06  30  ,clse-max4  cx4
11:17:06  31  ,clse-max6  cx6
11:17:06  32  ,clse-max8  cx8
11:17:06  33  ,clse-max10 cx10
11:17:06  34  ,clse-max12 cx12
11:17:06  35  ,clse-max14 cx14
11:17:06  36  ,clse-max16 cx16
11:17:06  37  ,clse-max18 cx18
11:17:06  38  -- Derive more attributes.
11:17:06  39  -- I want to use CORR() here to help SVM see the shape of the series.
11:17:06  40  -- But COVAR_POP is more stable:
11:17:06  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
11:17:06  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
11:17:06  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
11:17:06  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
11:17:06  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
11:17:06  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
11:17:06  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
11:17:06  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
11:17:06  49  -- Derive date related attributes:
11:17:06  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
11:17:06  51  ,0+TO_CHAR(ydate,'D')d
11:17:06  52  ,0+TO_CHAR(ydate,'W')w
11:17:06  53  -- mpm stands for minutes-past-midnight:
11:17:06  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
11:17:06  55  -- mph stands for minutes-past-hour:
11:17:06  56  ,0+TO_CHAR(ydate,'MI')mph
11:17:06  57  FROM svm6102
11:17:06  58  ORDER BY ydate
11:17:06  59  /

Table created.

Elapsed: 00:00:02.11
11:17:08 SQL> 
11:17:08 SQL> -- rpt
11:17:08 SQL> 
11:17:08 SQL> SELECT
11:17:08   2  pair
11:17:08   3  ,COUNT(pair)
11:17:08   4  ,MIN(clse),MAX(clse)
11:17:08   5  ,MIN(ydate),MAX(ydate)
11:17:08   6  FROM svm6122
11:17:08   7  GROUP BY pair
11:17:08   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19723	 80.25	   84.485 2010-09-26 20:55:01 2010-12-30 11:10:00

Elapsed: 00:00:00.04
11:17:08 SQL> 
11:17:08 SQL> -- Prepare for derivation of NTILE based params:
11:17:08 SQL> 
11:17:08 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.20
11:17:08 SQL> CREATE TABLE svm6142 COMPRESS AS
11:17:08   2  SELECT
11:17:08   3  pair
11:17:08   4  ,ydate
11:17:08   5  ,prdate
11:17:08   6  ,clse
11:17:08   7  ,g6
11:17:08   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
11:17:08   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
11:17:08  10  ,CASE WHEN trend IS NULL THEN 1
11:17:08  11  	    WHEN trend =0      THEN 1
11:17:08  12  	    ELSE trend END trend
11:17:08  13  ,cm4
11:17:08  14  ,cm6
11:17:08  15  ,cm8
11:17:08  16  ,cm10
11:17:08  17  ,cm12
11:17:08  18  ,cm14
11:17:08  19  ,cm16
11:17:08  20  ,cm18
11:17:08  21  --
11:17:08  22  ,ca4
11:17:08  23  ,ca6
11:17:08  24  ,ca8
11:17:08  25  ,ca10
11:17:08  26  ,ca12
11:17:08  27  ,ca14
11:17:08  28  ,ca16
11:17:08  29  ,ca18
11:17:08  30  --
11:17:08  31  ,cx4
11:17:08  32  ,cx6
11:17:08  33  ,cx8
11:17:08  34  ,cx10
11:17:08  35  ,cx12
11:17:08  36  ,cx14
11:17:08  37  ,cx16
11:17:08  38  ,cx18
11:17:08  39  --
11:17:08  40  ,crr4
11:17:08  41  ,crr6
11:17:08  42  ,crr8
11:17:08  43  ,crr10
11:17:08  44  ,crr12
11:17:08  45  ,crr14
11:17:08  46  ,crr16
11:17:08  47  ,crr18
11:17:08  48  --
11:17:08  49  ,hh
11:17:08  50  ,d
11:17:08  51  ,w
11:17:08  52  ,mpm
11:17:08  53  ,mph
11:17:08  54  FROM svm6122
11:17:08  55  ORDER BY ydate
11:17:08  56  /

Table created.

Elapsed: 00:00:00.38
11:17:09 SQL> 
11:17:09 SQL> -- rpt
11:17:09 SQL> 
11:17:09 SQL> SELECT
11:17:09   2  pair
11:17:09   3  ,trend
11:17:09   4  ,gatt
11:17:09   5  ,COUNT(pair)
11:17:09   6  ,AVG(g6)
11:17:09   7  FROM svm6142
11:17:09   8  GROUP BY pair,trend,gatt
11:17:09   9  ORDER BY pair,trend,gatt
11:17:09  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5375 -.16553621
usd_jpy 	-1 up	      5008 .162406155
usd_jpy 	-1		26
usd_jpy 	 1 nup	      5175 -.15491938
usd_jpy 	 1 up	      4093 .165084061
usd_jpy 	 1		46

6 rows selected.

Elapsed: 00:00:00.04
11:17:09 SQL> 
11:17:09 SQL> 
11:17:09 SQL> -- Derive NTILE based params:
11:17:09 SQL> 
11:17:09 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.19
11:17:09 SQL> CREATE TABLE svm6162 COMPRESS AS
11:17:09   2  SELECT
11:17:09   3  pair
11:17:09   4  ,ydate
11:17:09   5  ,prdate
11:17:09   6  ,clse
11:17:09   7  ,g6
11:17:09   8  ,gatt
11:17:09   9  ,gattn
11:17:09  10  ,trend
11:17:09  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
11:17:09  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
11:17:09  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
11:17:09  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
11:17:09  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
11:17:09  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
11:17:09  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
11:17:09  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
11:17:09  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
11:17:09  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
11:17:09  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
11:17:09  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
11:17:09  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
11:17:09  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
11:17:09  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
11:17:09  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
11:17:09  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
11:17:09  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
11:17:09  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
11:17:09  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
11:17:09  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
11:17:09  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
11:17:09  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
11:17:09  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
11:17:09  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
11:17:09  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
11:17:09  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
11:17:09  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
11:17:09  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
11:17:09  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
11:17:09  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
11:17:09  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
11:17:09  43  ,hh  att32
11:17:09  44  ,d   att33
11:17:09  45  ,w   att34
11:17:09  46  ,mpm att35
11:17:09  47  ,mph att36
11:17:09  48  ,trend att37
11:17:09  49  FROM svm6142
11:17:09  50  ORDER BY ydate
11:17:09  51  /

Table created.

Elapsed: 00:00:05.17
11:17:14 SQL> 
11:17:14 SQL> -- rpt
11:17:14 SQL> 
11:17:14 SQL> SELECT
11:17:14   2  pair
11:17:14   3  ,trend
11:17:14   4  ,gatt
11:17:14   5  ,COUNT(pair)
11:17:14   6  ,AVG(g6)
11:17:14   7  FROM svm6162
11:17:14   8  GROUP BY pair,trend,gatt
11:17:14   9  ORDER BY pair,trend,gatt
11:17:14  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5375 -.16553621
usd_jpy 	-1 up	      5008 .162406155
usd_jpy 	-1		26
usd_jpy 	 1 nup	      5175 -.15491938
usd_jpy 	 1 up	      4093 .165084061
usd_jpy 	 1		46

6 rows selected.

Elapsed: 00:00:00.06
11:17:14 SQL> 
11:17:14 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
11:17:14 SQL> CREATE TABLE modsrc COMPRESS AS
11:17:14   2  SELECT
11:17:14   3  pair
11:17:14   4  ,ydate
11:17:14   5  ,prdate
11:17:14   6  ,trend
11:17:14   7  ,g6
11:17:14   8  ,gatt
11:17:14   9  ,gattn
11:17:14  10  FROM svm6162
11:17:14  11  /

Table created.

Elapsed: 00:00:00.08
11:17:14 SQL> 
11:17:14 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
11:17:14 SQL> 
11:17:14 SQL> DROP   TABLE jpy_ms610 ;
DROP   TABLE jpy_ms610
             *
ERROR at line 1:
ORA-00942: table or view does not exist


Elapsed: 00:00:00.03
11:17:14 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
11:17:14   2  SELECT
11:17:14   3  ydate
11:17:14   4  ,trend jpy_trend
11:17:14   5  ,g6    jpy_g6
11:17:14   6  ,gatt  jpy_gatt
11:17:14   7  ,gattn jpy_gattn
11:17:14   8  FROM modsrc
11:17:14   9  /

Table created.

Elapsed: 00:00:00.07
11:17:15 SQL> 
11:17:15 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
11:17:15 SQL> 
11:17:15 SQL> -- I need a copy of the attributes:
11:17:15 SQL> 
11:17:15 SQL> 
11:17:15 SQL> DROP   TABLE jpy_att;
DROP   TABLE jpy_att
             *
ERROR at line 1:
ORA-00942: table or view does not exist


Elapsed: 00:00:00.03
11:17:15 SQL> CREATE TABLE jpy_att COMPRESS AS
11:17:15   2  SELECT
11:17:15   3  ydate
11:17:15   4  ,att00 jpy_att00
11:17:15   5  ,att01 jpy_att01
11:17:15   6  ,att02 jpy_att02
11:17:15   7  ,att03 jpy_att03
11:17:15   8  ,att04 jpy_att04
11:17:15   9  ,att05 jpy_att05
11:17:15  10  ,att06 jpy_att06
11:17:15  11  ,att07 jpy_att07
11:17:15  12  ,att08 jpy_att08
11:17:15  13  ,att09 jpy_att09
11:17:15  14  ,att10 jpy_att10
11:17:15  15  ,att11 jpy_att11
11:17:15  16  ,att12 jpy_att12
11:17:15  17  ,att13 jpy_att13
11:17:15  18  ,att14 jpy_att14
11:17:15  19  ,att15 jpy_att15
11:17:15  20  ,att16 jpy_att16
11:17:15  21  ,att17 jpy_att17
11:17:15  22  ,att18 jpy_att18
11:17:15  23  ,att19 jpy_att19
11:17:15  24  ,att20 jpy_att20
11:17:15  25  ,att21 jpy_att21
11:17:15  26  ,att22 jpy_att22
11:17:15  27  ,att23 jpy_att23
11:17:15  28  ,att24 jpy_att24
11:17:15  29  ,att25 jpy_att25
11:17:15  30  ,att26 jpy_att26
11:17:15  31  ,att27 jpy_att27
11:17:15  32  ,att28 jpy_att28
11:17:15  33  ,att29 jpy_att29
11:17:15  34  ,att30 jpy_att30
11:17:15  35  ,att31 jpy_att31
11:17:15  36  ,att32 jpy_att32
11:17:15  37  ,att33 jpy_att33
11:17:15  38  ,att34 jpy_att34
11:17:15  39  ,att35 jpy_att35
11:17:15  40  ,att36 jpy_att36
11:17:15  41  ,att37 jpy_att37
11:17:15  42  FROM svm6162
11:17:15  43  /

Table created.

Elapsed: 00:00:00.16
11:17:15 SQL> 
11:17:15 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
11:17:15 SQL> 
11:17:15 SQL> -- rpt
11:17:15 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19723

Elapsed: 00:00:00.92
11:17:16 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19723

Elapsed: 00:00:00.00
11:17:16 SQL> 
11:17:16 SQL> --
11:17:16 SQL> -- cad610.sql
11:17:16 SQL> --
11:17:16 SQL> 
11:17:16 SQL> -- Creates views and tables for backtesting a forex SVM strategy
11:17:16 SQL> 
11:17:16 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.07
11:17:16 SQL> 
11:17:16 SQL> -- I created di5min here:
11:17:16 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
11:17:16 SQL> 
11:17:16 SQL> CREATE OR REPLACE VIEW svm6102 AS
11:17:16   2  SELECT
11:17:16   3  pair
11:17:16   4  ,ydate
11:17:16   5  ,prdate
11:17:16   6  ,rownum rnum -- acts as t in my time-series
11:17:16   7  ,clse
11:17:16   8  -- Derive a bunch of attributes from clse, the latest price:
11:17:16   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
11:17:16  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
11:17:16  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
11:17:16  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
11:17:16  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
11:17:16  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
11:17:16  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
11:17:16  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
11:17:16  17  --
11:17:16  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
11:17:16  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
11:17:16  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
11:17:16  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
11:17:16  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
11:17:16  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
11:17:16  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
11:17:16  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
11:17:16  26  --
11:17:16  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
11:17:16  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
11:17:16  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
11:17:16  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
11:17:16  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
11:17:16  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
11:17:16  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
11:17:16  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
11:17:16  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
11:17:16  36  FROM di5min WHERE pair LIKE'%cad%'
11:17:16  37  AND ydate > sysdate - 95
11:17:16  38  ORDER BY ydate
11:17:16  39  /

View created.

Elapsed: 00:00:00.04
11:17:16 SQL> 
11:17:16 SQL> -- rpt
11:17:16 SQL> 
11:17:16 SQL> SELECT
11:17:16   2  pair
11:17:16   3  ,COUNT(pair)
11:17:16   4  ,MIN(clse),MAX(clse)
11:17:16   5  ,MIN(avg6),MAX(avg6)
11:17:16   6  ,MIN(ydate),MAX(ydate)
11:17:16   7  FROM svm6102
11:17:16   8  GROUP BY pair
11:17:16   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19723	.99755	    1.036 .998845205 1.03336849 2010-09-26 20:55:01 2010-12-30 11:10:00

Elapsed: 00:00:00.87
11:17:17 SQL> 
11:17:17 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
11:17:17 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.25
11:17:17 SQL> CREATE TABLE svm6122 COMPRESS AS
11:17:17   2  SELECT
11:17:17   3  pair
11:17:17   4  ,ydate
11:17:17   5  ,prdate
11:17:17   6  ,clse
11:17:17   7  -- g6 is important. I want to predict g6:
11:17:17   8  ,ld6 - clse g6
11:17:17   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
11:17:17  10  -- I want more attributes from the ones I derived above:
11:17:17  11  -- clse relation to moving-min
11:17:17  12  ,clse-min4  cm4
11:17:17  13  ,clse-min6  cm6
11:17:17  14  ,clse-min8  cm8
11:17:17  15  ,clse-min10 cm10
11:17:17  16  ,clse-min12 cm12
11:17:17  17  ,clse-min14 cm14
11:17:17  18  ,clse-min16 cm16
11:17:17  19  ,clse-min18 cm18
11:17:17  20  -- clse relation to moving-avg
11:17:17  21  ,clse-avg4  ca4
11:17:17  22  ,clse-avg6  ca6
11:17:17  23  ,clse-avg8  ca8
11:17:17  24  ,clse-avg10 ca10
11:17:17  25  ,clse-avg12 ca12
11:17:17  26  ,clse-avg14 ca14
11:17:17  27  ,clse-avg16 ca16
11:17:17  28  ,clse-avg18 ca18
11:17:17  29  -- clse relation to moving-max
11:17:17  30  ,clse-max4  cx4
11:17:17  31  ,clse-max6  cx6
11:17:17  32  ,clse-max8  cx8
11:17:17  33  ,clse-max10 cx10
11:17:17  34  ,clse-max12 cx12
11:17:17  35  ,clse-max14 cx14
11:17:17  36  ,clse-max16 cx16
11:17:17  37  ,clse-max18 cx18
11:17:17  38  -- Derive more attributes.
11:17:17  39  -- I want to use CORR() here to help SVM see the shape of the series.
11:17:17  40  -- But COVAR_POP is more stable:
11:17:17  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
11:17:17  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
11:17:17  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
11:17:17  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
11:17:17  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
11:17:17  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
11:17:17  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
11:17:17  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
11:17:17  49  -- Derive date related attributes:
11:17:17  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
11:17:17  51  ,0+TO_CHAR(ydate,'D')d
11:17:17  52  ,0+TO_CHAR(ydate,'W')w
11:17:17  53  -- mpm stands for minutes-past-midnight:
11:17:17  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
11:17:17  55  -- mph stands for minutes-past-hour:
11:17:17  56  ,0+TO_CHAR(ydate,'MI')mph
11:17:17  57  FROM svm6102
11:17:17  58  ORDER BY ydate
11:17:17  59  /

Table created.

Elapsed: 00:00:02.20
11:17:20 SQL> 
11:17:20 SQL> -- rpt
11:17:20 SQL> 
11:17:20 SQL> SELECT
11:17:20   2  pair
11:17:20   3  ,COUNT(pair)
11:17:20   4  ,MIN(clse),MAX(clse)
11:17:20   5  ,MIN(ydate),MAX(ydate)
11:17:20   6  FROM svm6122
11:17:20   7  GROUP BY pair
11:17:20   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19723	.99755	    1.036 2010-09-26 20:55:01 2010-12-30 11:10:00

Elapsed: 00:00:00.06
11:17:20 SQL> 
11:17:20 SQL> -- Prepare for derivation of NTILE based params:
11:17:20 SQL> 
11:17:20 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.30
11:17:20 SQL> CREATE TABLE svm6142 COMPRESS AS
11:17:20   2  SELECT
11:17:20   3  pair
11:17:20   4  ,ydate
11:17:20   5  ,prdate
11:17:20   6  ,clse
11:17:20   7  ,g6
11:17:20   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
11:17:20   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
11:17:20  10  ,CASE WHEN trend IS NULL THEN 1
11:17:20  11  	    WHEN trend =0      THEN 1
11:17:20  12  	    ELSE trend END trend
11:17:20  13  ,cm4
11:17:20  14  ,cm6
11:17:20  15  ,cm8
11:17:20  16  ,cm10
11:17:20  17  ,cm12
11:17:20  18  ,cm14
11:17:20  19  ,cm16
11:17:20  20  ,cm18
11:17:20  21  --
11:17:20  22  ,ca4
11:17:20  23  ,ca6
11:17:20  24  ,ca8
11:17:20  25  ,ca10
11:17:20  26  ,ca12
11:17:20  27  ,ca14
11:17:20  28  ,ca16
11:17:20  29  ,ca18
11:17:20  30  --
11:17:20  31  ,cx4
11:17:20  32  ,cx6
11:17:20  33  ,cx8
11:17:20  34  ,cx10
11:17:20  35  ,cx12
11:17:20  36  ,cx14
11:17:20  37  ,cx16
11:17:20  38  ,cx18
11:17:20  39  --
11:17:20  40  ,crr4
11:17:20  41  ,crr6
11:17:20  42  ,crr8
11:17:20  43  ,crr10
11:17:20  44  ,crr12
11:17:20  45  ,crr14
11:17:20  46  ,crr16
11:17:20  47  ,crr18
11:17:20  48  --
11:17:20  49  ,hh
11:17:20  50  ,d
11:17:20  51  ,w
11:17:20  52  ,mpm
11:17:20  53  ,mph
11:17:20  54  FROM svm6122
11:17:20  55  ORDER BY ydate
11:17:20  56  /

Table created.

Elapsed: 00:00:00.41
11:17:20 SQL> 
11:17:20 SQL> -- rpt
11:17:20 SQL> 
11:17:20 SQL> SELECT
11:17:20   2  pair
11:17:20   3  ,trend
11:17:20   4  ,gatt
11:17:20   5  ,COUNT(pair)
11:17:20   6  ,AVG(g6)
11:17:20   7  FROM svm6142
11:17:20   8  GROUP BY pair,trend,gatt
11:17:20   9  ORDER BY pair,trend,gatt
11:17:20  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7274 -.00131601
usd_cad 	-1 up	      3146 .003083303
usd_cad 	-1		27
usd_cad 	 1 nup	      6742 -.00160927
usd_cad 	 1 up	      2489 .003597467
usd_cad 	 1		45

6 rows selected.

Elapsed: 00:00:00.04
11:17:20 SQL> 
11:17:20 SQL> 
11:17:20 SQL> -- Derive NTILE based params:
11:17:20 SQL> 
11:17:20 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.19
11:17:21 SQL> CREATE TABLE svm6162 COMPRESS AS
11:17:21   2  SELECT
11:17:21   3  pair
11:17:21   4  ,ydate
11:17:21   5  ,prdate
11:17:21   6  ,clse
11:17:21   7  ,g6
11:17:21   8  ,gatt
11:17:21   9  ,gattn
11:17:21  10  ,trend
11:17:21  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
11:17:21  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
11:17:21  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
11:17:21  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
11:17:21  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
11:17:21  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
11:17:21  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
11:17:21  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
11:17:21  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
11:17:21  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
11:17:21  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
11:17:21  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
11:17:21  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
11:17:21  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
11:17:21  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
11:17:21  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
11:17:21  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
11:17:21  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
11:17:21  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
11:17:21  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
11:17:21  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
11:17:21  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
11:17:21  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
11:17:21  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
11:17:21  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
11:17:21  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
11:17:21  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
11:17:21  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
11:17:21  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
11:17:21  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
11:17:21  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
11:17:21  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
11:17:21  43  ,hh  att32
11:17:21  44  ,d   att33
11:17:21  45  ,w   att34
11:17:21  46  ,mpm att35
11:17:21  47  ,mph att36
11:17:21  48  ,trend att37
11:17:21  49  FROM svm6142
11:17:21  50  ORDER BY ydate
11:17:21  51  /

Table created.

Elapsed: 00:00:04.83
11:17:26 SQL> 
11:17:26 SQL> -- rpt
11:17:26 SQL> 
11:17:26 SQL> SELECT
11:17:26   2  pair
11:17:26   3  ,trend
11:17:26   4  ,gatt
11:17:26   5  ,COUNT(pair)
11:17:26   6  ,AVG(g6)
11:17:26   7  FROM svm6162
11:17:26   8  GROUP BY pair,trend,gatt
11:17:26   9  ORDER BY pair,trend,gatt
11:17:26  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7274 -.00131601
usd_cad 	-1 up	      3146 .003083303
usd_cad 	-1		27
usd_cad 	 1 nup	      6742 -.00160927
usd_cad 	 1 up	      2489 .003597467
usd_cad 	 1		45

6 rows selected.

Elapsed: 00:00:00.02
11:17:26 SQL> 
11:17:26 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.19
11:17:26 SQL> CREATE TABLE modsrc COMPRESS AS
11:17:26   2  SELECT
11:17:26   3  pair
11:17:26   4  ,ydate
11:17:26   5  ,prdate
11:17:26   6  ,trend
11:17:26   7  ,g6
11:17:26   8  ,gatt
11:17:26   9  ,gattn
11:17:26  10  FROM svm6162
11:17:26  11  /

Table created.

Elapsed: 00:00:00.08
11:17:26 SQL> 
11:17:26 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
11:17:26 SQL> 
11:17:26 SQL> DROP   TABLE cad_ms610 ;
DROP   TABLE cad_ms610
             *
ERROR at line 1:
ORA-00942: table or view does not exist


Elapsed: 00:00:00.02
11:17:26 SQL> CREATE TABLE cad_ms610 COMPRESS AS
11:17:26   2  SELECT
11:17:26   3  ydate
11:17:26   4  ,trend cad_trend
11:17:26   5  ,g6    cad_g6
11:17:26   6  ,gatt  cad_gatt
11:17:26   7  ,gattn cad_gattn
11:17:26   8  FROM modsrc
11:17:26   9  /

Table created.

Elapsed: 00:00:00.07
11:17:26 SQL> 
11:17:26 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.14
11:17:26 SQL> 
11:17:26 SQL> -- I need a copy of the attributes:
11:17:26 SQL> 
11:17:26 SQL> 
11:17:26 SQL> DROP   TABLE cad_att;
DROP   TABLE cad_att
             *
ERROR at line 1:
ORA-00942: table or view does not exist


Elapsed: 00:00:00.01
11:17:26 SQL> CREATE TABLE cad_att COMPRESS AS
11:17:26   2  SELECT
11:17:26   3  ydate
11:17:26   4  ,att00 cad_att00
11:17:26   5  ,att01 cad_att01
11:17:26   6  ,att02 cad_att02
11:17:26   7  ,att03 cad_att03
11:17:26   8  ,att04 cad_att04
11:17:26   9  ,att05 cad_att05
11:17:26  10  ,att06 cad_att06
11:17:26  11  ,att07 cad_att07
11:17:26  12  ,att08 cad_att08
11:17:26  13  ,att09 cad_att09
11:17:26  14  ,att10 cad_att10
11:17:26  15  ,att11 cad_att11
11:17:26  16  ,att12 cad_att12
11:17:26  17  ,att13 cad_att13
11:17:26  18  ,att14 cad_att14
11:17:26  19  ,att15 cad_att15
11:17:26  20  ,att16 cad_att16
11:17:26  21  ,att17 cad_att17
11:17:26  22  ,att18 cad_att18
11:17:26  23  ,att19 cad_att19
11:17:26  24  ,att20 cad_att20
11:17:26  25  ,att21 cad_att21
11:17:26  26  ,att22 cad_att22
11:17:26  27  ,att23 cad_att23
11:17:26  28  ,att24 cad_att24
11:17:26  29  ,att25 cad_att25
11:17:26  30  ,att26 cad_att26
11:17:26  31  ,att27 cad_att27
11:17:26  32  ,att28 cad_att28
11:17:26  33  ,att29 cad_att29
11:17:26  34  ,att30 cad_att30
11:17:26  35  ,att31 cad_att31
11:17:26  36  ,att32 cad_att32
11:17:26  37  ,att33 cad_att33
11:17:26  38  ,att34 cad_att34
11:17:26  39  ,att35 cad_att35
11:17:26  40  ,att36 cad_att36
11:17:26  41  ,att37 cad_att37
11:17:26  42  FROM svm6162
11:17:26  43  /

Table created.

Elapsed: 00:00:00.17
11:17:26 SQL> 
11:17:26 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
11:17:27 SQL> 
11:17:27 SQL> -- rpt
11:17:27 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19723

Elapsed: 00:00:00.84
11:17:28 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19723

Elapsed: 00:00:00.00
11:17:28 SQL> 
11:17:28 SQL> --
11:17:28 SQL> -- chf610.sql
11:17:28 SQL> --
11:17:28 SQL> 
11:17:28 SQL> -- Creates views and tables for backtesting a forex SVM strategy
11:17:28 SQL> 
11:17:28 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.25
11:17:28 SQL> 
11:17:28 SQL> -- I created di5min here:
11:17:28 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
11:17:28 SQL> 
11:17:28 SQL> CREATE OR REPLACE VIEW svm6102 AS
11:17:28   2  SELECT
11:17:28   3  pair
11:17:28   4  ,ydate
11:17:28   5  ,prdate
11:17:28   6  ,rownum rnum -- acts as t in my time-series
11:17:28   7  ,clse
11:17:28   8  -- Derive a bunch of attributes from clse, the latest price:
11:17:28   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
11:17:28  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
11:17:28  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
11:17:28  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
11:17:28  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
11:17:28  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
11:17:28  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
11:17:28  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
11:17:28  17  --
11:17:28  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
11:17:28  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
11:17:28  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
11:17:28  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
11:17:28  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
11:17:28  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
11:17:28  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
11:17:28  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
11:17:28  26  --
11:17:28  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
11:17:28  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
11:17:28  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
11:17:28  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
11:17:28  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
11:17:28  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
11:17:28  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
11:17:28  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
11:17:28  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
11:17:28  36  FROM di5min WHERE pair LIKE'%chf%'
11:17:28  37  AND ydate > sysdate - 95
11:17:28  38  ORDER BY ydate
11:17:28  39  /

View created.

Elapsed: 00:00:00.05
11:17:28 SQL> 
11:17:28 SQL> -- rpt
11:17:28 SQL> 
11:17:28 SQL> SELECT
11:17:28   2  pair
11:17:28   3  ,COUNT(pair)
11:17:28   4  ,MIN(clse),MAX(clse)
11:17:28   5  ,MIN(avg6),MAX(avg6)
11:17:28   6  ,MIN(ydate),MAX(ydate)
11:17:28   7  FROM svm6102
11:17:28   8  GROUP BY pair
11:17:28   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19726	 .9379	  1.00635 .940899561 1.00498151 2010-09-26 20:55:01 2010-12-30 11:10:00

Elapsed: 00:00:00.85
11:17:29 SQL> 
11:17:29 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
11:17:29 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.25
11:17:29 SQL> CREATE TABLE svm6122 COMPRESS AS
11:17:29   2  SELECT
11:17:29   3  pair
11:17:29   4  ,ydate
11:17:29   5  ,prdate
11:17:29   6  ,clse
11:17:29   7  -- g6 is important. I want to predict g6:
11:17:29   8  ,ld6 - clse g6
11:17:29   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
11:17:29  10  -- I want more attributes from the ones I derived above:
11:17:29  11  -- clse relation to moving-min
11:17:29  12  ,clse-min4  cm4
11:17:29  13  ,clse-min6  cm6
11:17:29  14  ,clse-min8  cm8
11:17:29  15  ,clse-min10 cm10
11:17:29  16  ,clse-min12 cm12
11:17:29  17  ,clse-min14 cm14
11:17:29  18  ,clse-min16 cm16
11:17:29  19  ,clse-min18 cm18
11:17:29  20  -- clse relation to moving-avg
11:17:29  21  ,clse-avg4  ca4
11:17:29  22  ,clse-avg6  ca6
11:17:29  23  ,clse-avg8  ca8
11:17:29  24  ,clse-avg10 ca10
11:17:29  25  ,clse-avg12 ca12
11:17:29  26  ,clse-avg14 ca14
11:17:29  27  ,clse-avg16 ca16
11:17:29  28  ,clse-avg18 ca18
11:17:29  29  -- clse relation to moving-max
11:17:29  30  ,clse-max4  cx4
11:17:29  31  ,clse-max6  cx6
11:17:29  32  ,clse-max8  cx8
11:17:29  33  ,clse-max10 cx10
11:17:29  34  ,clse-max12 cx12
11:17:29  35  ,clse-max14 cx14
11:17:29  36  ,clse-max16 cx16
11:17:29  37  ,clse-max18 cx18
11:17:29  38  -- Derive more attributes.
11:17:29  39  -- I want to use CORR() here to help SVM see the shape of the series.
11:17:29  40  -- But COVAR_POP is more stable:
11:17:29  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
11:17:29  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
11:17:29  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
11:17:29  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
11:17:29  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
11:17:29  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
11:17:29  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
11:17:29  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
11:17:29  49  -- Derive date related attributes:
11:17:29  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
11:17:29  51  ,0+TO_CHAR(ydate,'D')d
11:17:29  52  ,0+TO_CHAR(ydate,'W')w
11:17:29  53  -- mpm stands for minutes-past-midnight:
11:17:29  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
11:17:29  55  -- mph stands for minutes-past-hour:
11:17:29  56  ,0+TO_CHAR(ydate,'MI')mph
11:17:29  57  FROM svm6102
11:17:29  58  ORDER BY ydate
11:17:29  59  /

Table created.

Elapsed: 00:00:02.03
11:17:31 SQL> 
11:17:31 SQL> -- rpt
11:17:31 SQL> 
11:17:31 SQL> SELECT
11:17:31   2  pair
11:17:31   3  ,COUNT(pair)
11:17:31   4  ,MIN(clse),MAX(clse)
11:17:31   5  ,MIN(ydate),MAX(ydate)
11:17:31   6  FROM svm6122
11:17:31   7  GROUP BY pair
11:17:31   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19726	 .9379	  1.00635 2010-09-26 20:55:01 2010-12-30 11:10:00

Elapsed: 00:00:00.04
11:17:31 SQL> 
11:17:31 SQL> -- Prepare for derivation of NTILE based params:
11:17:31 SQL> 
11:17:31 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.18
11:17:31 SQL> CREATE TABLE svm6142 COMPRESS AS
11:17:31   2  SELECT
11:17:31   3  pair
11:17:31   4  ,ydate
11:17:31   5  ,prdate
11:17:31   6  ,clse
11:17:31   7  ,g6
11:17:31   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
11:17:31   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
11:17:31  10  ,CASE WHEN trend IS NULL THEN 1
11:17:31  11  	    WHEN trend =0      THEN 1
11:17:31  12  	    ELSE trend END trend
11:17:31  13  ,cm4
11:17:31  14  ,cm6
11:17:31  15  ,cm8
11:17:31  16  ,cm10
11:17:31  17  ,cm12
11:17:31  18  ,cm14
11:17:31  19  ,cm16
11:17:31  20  ,cm18
11:17:31  21  --
11:17:31  22  ,ca4
11:17:31  23  ,ca6
11:17:31  24  ,ca8
11:17:31  25  ,ca10
11:17:31  26  ,ca12
11:17:31  27  ,ca14
11:17:31  28  ,ca16
11:17:31  29  ,ca18
11:17:31  30  --
11:17:31  31  ,cx4
11:17:31  32  ,cx6
11:17:31  33  ,cx8
11:17:31  34  ,cx10
11:17:31  35  ,cx12
11:17:31  36  ,cx14
11:17:31  37  ,cx16
11:17:31  38  ,cx18
11:17:31  39  --
11:17:31  40  ,crr4
11:17:31  41  ,crr6
11:17:31  42  ,crr8
11:17:31  43  ,crr10
11:17:31  44  ,crr12
11:17:31  45  ,crr14
11:17:31  46  ,crr16
11:17:31  47  ,crr18
11:17:31  48  --
11:17:31  49  ,hh
11:17:31  50  ,d
11:17:31  51  ,w
11:17:31  52  ,mpm
11:17:31  53  ,mph
11:17:31  54  FROM svm6122
11:17:31  55  ORDER BY ydate
11:17:31  56  /

Table created.

Elapsed: 00:00:00.35
11:17:32 SQL> 
11:17:32 SQL> -- rpt
11:17:32 SQL> 
11:17:32 SQL> SELECT
11:17:32   2  pair
11:17:32   3  ,trend
11:17:32   4  ,gatt
11:17:32   5  ,COUNT(pair)
11:17:32   6  ,AVG(g6)
11:17:32   7  FROM svm6142
11:17:32   8  GROUP BY pair,trend,gatt
11:17:32   9  ORDER BY pair,trend,gatt
11:17:32  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7164 -.00196445
usd_chf 	-1 up	      3178 .003894076
usd_chf 	-1		68
usd_chf 	 1 nup	      6746 -.00161781
usd_chf 	 1 up	      2566 .003688786
usd_chf 	 1		 4

6 rows selected.

Elapsed: 00:00:00.03
11:17:32 SQL> 
11:17:32 SQL> 
11:17:32 SQL> -- Derive NTILE based params:
11:17:32 SQL> 
11:17:32 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.18
11:17:32 SQL> CREATE TABLE svm6162 COMPRESS AS
11:17:32   2  SELECT
11:17:32   3  pair
11:17:32   4  ,ydate
11:17:32   5  ,prdate
11:17:32   6  ,clse
11:17:32   7  ,g6
11:17:32   8  ,gatt
11:17:32   9  ,gattn
11:17:32  10  ,trend
11:17:32  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
11:17:32  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
11:17:32  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
11:17:32  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
11:17:32  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
11:17:32  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
11:17:32  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
11:17:32  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
11:17:32  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
11:17:32  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
11:17:32  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
11:17:32  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
11:17:32  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
11:17:32  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
11:17:32  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
11:17:32  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
11:17:32  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
11:17:32  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
11:17:32  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
11:17:32  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
11:17:32  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
11:17:32  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
11:17:32  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
11:17:32  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
11:17:32  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
11:17:32  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
11:17:32  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
11:17:32  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
11:17:32  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
11:17:32  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
11:17:32  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
11:17:32  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
11:17:32  43  ,hh  att32
11:17:32  44  ,d   att33
11:17:32  45  ,w   att34
11:17:32  46  ,mpm att35
11:17:32  47  ,mph att36
11:17:32  48  ,trend att37
11:17:32  49  FROM svm6142
11:17:32  50  ORDER BY ydate
11:17:32  51  /

Table created.

Elapsed: 00:00:04.78
11:17:37 SQL> 
11:17:37 SQL> -- rpt
11:17:37 SQL> 
11:17:37 SQL> SELECT
11:17:37   2  pair
11:17:37   3  ,trend
11:17:37   4  ,gatt
11:17:37   5  ,COUNT(pair)
11:17:37   6  ,AVG(g6)
11:17:37   7  FROM svm6162
11:17:37   8  GROUP BY pair,trend,gatt
11:17:37   9  ORDER BY pair,trend,gatt
11:17:37  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7164 -.00196445
usd_chf 	-1 up	      3178 .003894076
usd_chf 	-1		68
usd_chf 	 1 nup	      6746 -.00161781
usd_chf 	 1 up	      2566 .003688786
usd_chf 	 1		 4

6 rows selected.

Elapsed: 00:00:00.03
11:17:37 SQL> 
11:17:37 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
11:17:37 SQL> CREATE TABLE modsrc COMPRESS AS
11:17:37   2  SELECT
11:17:37   3  pair
11:17:37   4  ,ydate
11:17:37   5  ,prdate
11:17:37   6  ,trend
11:17:37   7  ,g6
11:17:37   8  ,gatt
11:17:37   9  ,gattn
11:17:37  10  FROM svm6162
11:17:37  11  /

Table created.

Elapsed: 00:00:00.08
11:17:37 SQL> 
11:17:37 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
11:17:37 SQL> 
11:17:37 SQL> DROP   TABLE chf_ms610 ;
DROP   TABLE chf_ms610
             *
ERROR at line 1:
ORA-00942: table or view does not exist


Elapsed: 00:00:00.02
11:17:37 SQL> CREATE TABLE chf_ms610 COMPRESS AS
11:17:37   2  SELECT
11:17:37   3  ydate
11:17:37   4  ,trend chf_trend
11:17:37   5  ,g6    chf_g6
11:17:37   6  ,gatt  chf_gatt
11:17:37   7  ,gattn chf_gattn
11:17:37   8  FROM modsrc
11:17:37   9  /

Table created.

Elapsed: 00:00:00.07
11:17:37 SQL> 
11:17:37 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.13
11:17:37 SQL> 
11:17:37 SQL> -- I need a copy of the attributes:
11:17:37 SQL> 
11:17:37 SQL> 
11:17:37 SQL> DROP   TABLE chf_att;
DROP   TABLE chf_att
             *
ERROR at line 1:
ORA-00942: table or view does not exist


Elapsed: 00:00:00.03
11:17:37 SQL> CREATE TABLE chf_att COMPRESS AS
11:17:37   2  SELECT
11:17:37   3  ydate
11:17:37   4  ,att00 chf_att00
11:17:37   5  ,att01 chf_att01
11:17:37   6  ,att02 chf_att02
11:17:37   7  ,att03 chf_att03
11:17:37   8  ,att04 chf_att04
11:17:37   9  ,att05 chf_att05
11:17:37  10  ,att06 chf_att06
11:17:37  11  ,att07 chf_att07
11:17:37  12  ,att08 chf_att08
11:17:37  13  ,att09 chf_att09
11:17:37  14  ,att10 chf_att10
11:17:37  15  ,att11 chf_att11
11:17:37  16  ,att12 chf_att12
11:17:37  17  ,att13 chf_att13
11:17:37  18  ,att14 chf_att14
11:17:37  19  ,att15 chf_att15
11:17:37  20  ,att16 chf_att16
11:17:37  21  ,att17 chf_att17
11:17:37  22  ,att18 chf_att18
11:17:37  23  ,att19 chf_att19
11:17:37  24  ,att20 chf_att20
11:17:37  25  ,att21 chf_att21
11:17:37  26  ,att22 chf_att22
11:17:37  27  ,att23 chf_att23
11:17:37  28  ,att24 chf_att24
11:17:37  29  ,att25 chf_att25
11:17:37  30  ,att26 chf_att26
11:17:37  31  ,att27 chf_att27
11:17:37  32  ,att28 chf_att28
11:17:37  33  ,att29 chf_att29
11:17:37  34  ,att30 chf_att30
11:17:37  35  ,att31 chf_att31
11:17:37  36  ,att32 chf_att32
11:17:37  37  ,att33 chf_att33
11:17:37  38  ,att34 chf_att34
11:17:37  39  ,att35 chf_att35
11:17:37  40  ,att36 chf_att36
11:17:37  41  ,att37 chf_att37
11:17:37  42  FROM svm6162
11:17:37  43  /

Table created.

Elapsed: 00:00:00.16
11:17:38 SQL> 
11:17:38 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
11:17:38 SQL> 
11:17:38 SQL> -- rpt
11:17:38 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19726

Elapsed: 00:00:00.83
11:17:39 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19726

Elapsed: 00:00:00.00
11:17:39 SQL> 
11:17:39 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
