
SQL*Plus: Release 11.2.0.1.0 Production on Fri Jan 7 18:00:01 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

18:00:01 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
18:00:01 SQL> 18:00:01 SQL> --
18:00:01 SQL> -- eur610.sql
18:00:01 SQL> --
18:00:01 SQL> 
18:00:01 SQL> -- Creates views and tables for backtesting a forex SVM strategy
18:00:01 SQL> 
18:00:01 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.02
18:00:01 SQL> 
18:00:01 SQL> -- I created di5min here:
18:00:01 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
18:00:01 SQL> 
18:00:01 SQL> CREATE OR REPLACE VIEW svm6102 AS
18:00:01   2  SELECT
18:00:01   3  pair
18:00:01   4  ,ydate
18:00:01   5  ,prdate
18:00:01   6  ,rownum rnum -- acts as t in my time-series
18:00:01   7  ,clse
18:00:01   8  -- Derive a bunch of attributes from clse, the latest price:
18:00:01   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
18:00:01  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
18:00:01  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
18:00:01  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
18:00:01  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
18:00:01  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
18:00:01  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
18:00:01  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
18:00:01  17  --
18:00:01  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
18:00:01  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
18:00:01  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
18:00:01  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
18:00:01  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
18:00:01  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
18:00:01  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
18:00:01  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
18:00:01  26  --
18:00:01  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
18:00:01  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
18:00:01  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
18:00:01  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
18:00:01  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
18:00:01  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
18:00:01  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
18:00:01  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
18:00:01  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
18:00:01  36  FROM di5min WHERE pair LIKE'%eur%'
18:00:01  37  AND ydate > sysdate - 95
18:00:01  38  ORDER BY ydate
18:00:01  39  /

View created.

Elapsed: 00:00:00.09
18:00:02 SQL> 
18:00:02 SQL> -- rpt
18:00:02 SQL> 
18:00:02 SQL> SELECT
18:00:02   2  pair
18:00:02   3  ,COUNT(pair)
18:00:02   4  ,MIN(clse),MAX(clse)
18:00:02   5  ,MIN(avg6),MAX(avg6)
18:00:02   6  ,MIN(ydate),MAX(ydate)
18:00:02   7  FROM svm6102
18:00:02   8  GROUP BY pair
18:00:02   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19810    1.29125	   1.4273 1.29633099 1.42436233 2010-10-04 18:05:01 2011-01-07 17:55:00

Elapsed: 00:00:00.94
18:00:03 SQL> 
18:00:03 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
18:00:03 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.14
18:00:03 SQL> CREATE TABLE svm6122 COMPRESS AS
18:00:03   2  SELECT
18:00:03   3  pair
18:00:03   4  ,ydate
18:00:03   5  ,prdate
18:00:03   6  ,clse
18:00:03   7  -- g6 is important. I want to predict g6:
18:00:03   8  ,ld6 - clse g6
18:00:03   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
18:00:03  10  -- I want more attributes from the ones I derived above:
18:00:03  11  -- clse relation to moving-min
18:00:03  12  ,clse-min4  cm4
18:00:03  13  ,clse-min6  cm6
18:00:03  14  ,clse-min8  cm8
18:00:03  15  ,clse-min10 cm10
18:00:03  16  ,clse-min12 cm12
18:00:03  17  ,clse-min14 cm14
18:00:03  18  ,clse-min16 cm16
18:00:03  19  ,clse-min18 cm18
18:00:03  20  -- clse relation to moving-avg
18:00:03  21  ,clse-avg4  ca4
18:00:03  22  ,clse-avg6  ca6
18:00:03  23  ,clse-avg8  ca8
18:00:03  24  ,clse-avg10 ca10
18:00:03  25  ,clse-avg12 ca12
18:00:03  26  ,clse-avg14 ca14
18:00:03  27  ,clse-avg16 ca16
18:00:03  28  ,clse-avg18 ca18
18:00:03  29  -- clse relation to moving-max
18:00:03  30  ,clse-max4  cx4
18:00:03  31  ,clse-max6  cx6
18:00:03  32  ,clse-max8  cx8
18:00:03  33  ,clse-max10 cx10
18:00:03  34  ,clse-max12 cx12
18:00:03  35  ,clse-max14 cx14
18:00:03  36  ,clse-max16 cx16
18:00:03  37  ,clse-max18 cx18
18:00:03  38  -- Derive more attributes.
18:00:03  39  -- I want to use CORR() here to help SVM see the shape of the series.
18:00:03  40  -- But COVAR_POP is more stable:
18:00:03  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
18:00:03  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
18:00:03  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
18:00:03  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
18:00:03  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
18:00:03  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
18:00:03  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
18:00:03  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
18:00:03  49  -- Derive date related attributes:
18:00:03  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
18:00:03  51  ,0+TO_CHAR(ydate,'D')d
18:00:03  52  ,0+TO_CHAR(ydate,'W')w
18:00:03  53  -- mpm stands for minutes-past-midnight:
18:00:03  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
18:00:03  55  -- mph stands for minutes-past-hour:
18:00:03  56  ,0+TO_CHAR(ydate,'MI')mph
18:00:03  57  FROM svm6102
18:00:03  58  ORDER BY ydate
18:00:03  59  /

Table created.

Elapsed: 00:00:02.49
18:00:05 SQL> 
18:00:05 SQL> -- rpt
18:00:05 SQL> 
18:00:05 SQL> SELECT
18:00:05   2  pair
18:00:05   3  ,COUNT(pair)
18:00:05   4  ,MIN(clse),MAX(clse)
18:00:05   5  ,MIN(ydate),MAX(ydate)
18:00:05   6  FROM svm6122
18:00:05   7  GROUP BY pair
18:00:05   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19810    1.29125	   1.4273 2010-10-04 18:05:01 2011-01-07 17:55:00

Elapsed: 00:00:00.08
18:00:05 SQL> 
18:00:05 SQL> -- Prepare for derivation of NTILE based params:
18:00:05 SQL> 
18:00:05 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.16
18:00:05 SQL> CREATE TABLE svm6142 COMPRESS AS
18:00:05   2  SELECT
18:00:05   3  pair
18:00:05   4  ,ydate
18:00:05   5  ,prdate
18:00:05   6  ,clse
18:00:05   7  ,g6
18:00:05   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
18:00:05   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
18:00:05  10  ,CASE WHEN trend IS NULL THEN 1
18:00:05  11  	    WHEN trend =0      THEN 1
18:00:05  12  	    ELSE trend END trend
18:00:05  13  ,cm4
18:00:05  14  ,cm6
18:00:05  15  ,cm8
18:00:05  16  ,cm10
18:00:05  17  ,cm12
18:00:05  18  ,cm14
18:00:05  19  ,cm16
18:00:05  20  ,cm18
18:00:05  21  --
18:00:05  22  ,ca4
18:00:05  23  ,ca6
18:00:05  24  ,ca8
18:00:05  25  ,ca10
18:00:05  26  ,ca12
18:00:05  27  ,ca14
18:00:05  28  ,ca16
18:00:05  29  ,ca18
18:00:05  30  --
18:00:05  31  ,cx4
18:00:05  32  ,cx6
18:00:05  33  ,cx8
18:00:05  34  ,cx10
18:00:05  35  ,cx12
18:00:05  36  ,cx14
18:00:05  37  ,cx16
18:00:05  38  ,cx18
18:00:05  39  --
18:00:05  40  ,crr4
18:00:05  41  ,crr6
18:00:05  42  ,crr8
18:00:05  43  ,crr10
18:00:05  44  ,crr12
18:00:05  45  ,crr14
18:00:05  46  ,crr16
18:00:05  47  ,crr18
18:00:05  48  --
18:00:05  49  ,hh
18:00:05  50  ,d
18:00:05  51  ,w
18:00:05  52  ,mpm
18:00:05  53  ,mph
18:00:05  54  FROM svm6122
18:00:05  55  ORDER BY ydate
18:00:05  56  /

Table created.

Elapsed: 00:00:00.39
18:00:06 SQL> 
18:00:06 SQL> -- rpt
18:00:06 SQL> 
18:00:06 SQL> SELECT
18:00:06   2  pair
18:00:06   3  ,trend
18:00:06   4  ,gatt
18:00:06   5  ,COUNT(pair)
18:00:06   6  ,AVG(g6)
18:00:06   7  FROM svm6142
18:00:06   8  GROUP BY pair,trend,gatt
18:00:06   9  ORDER BY pair,trend,gatt
18:00:06  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6590 -.00314651
eur_usd 	-1 up	      3568 .004448735
eur_usd 	-1		60
eur_usd 	 1 nup	      5875 -.00324688
eur_usd 	 1 up	      3705 .005071238
eur_usd 	 1		12

6 rows selected.

Elapsed: 00:00:00.04
18:00:06 SQL> 
18:00:06 SQL> 
18:00:06 SQL> -- Derive NTILE based params:
18:00:06 SQL> 
18:00:06 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.04
18:00:06 SQL> CREATE TABLE svm6162 COMPRESS AS
18:00:06   2  SELECT
18:00:06   3  pair
18:00:06   4  ,ydate
18:00:06   5  ,prdate
18:00:06   6  ,clse
18:00:06   7  ,g6
18:00:06   8  ,gatt
18:00:06   9  ,gattn
18:00:06  10  ,trend
18:00:06  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
18:00:06  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
18:00:06  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
18:00:06  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
18:00:06  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
18:00:06  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
18:00:06  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
18:00:06  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
18:00:06  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
18:00:06  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
18:00:06  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
18:00:06  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
18:00:06  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
18:00:06  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
18:00:06  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
18:00:06  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
18:00:06  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
18:00:06  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
18:00:06  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
18:00:06  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
18:00:06  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
18:00:06  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
18:00:06  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
18:00:06  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
18:00:06  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
18:00:06  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
18:00:06  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
18:00:06  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
18:00:06  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
18:00:06  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
18:00:06  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
18:00:06  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
18:00:06  43  ,hh  att32
18:00:06  44  ,d   att33
18:00:06  45  ,w   att34
18:00:06  46  ,mpm att35
18:00:06  47  ,mph att36
18:00:06  48  ,trend att37
18:00:06  49  FROM svm6142
18:00:06  50  ORDER BY ydate
18:00:06  51  /

Table created.

Elapsed: 00:00:04.80
18:00:11 SQL> 
18:00:11 SQL> -- rpt
18:00:11 SQL> 
18:00:11 SQL> SELECT
18:00:11   2  pair
18:00:11   3  ,trend
18:00:11   4  ,gatt
18:00:11   5  ,COUNT(pair)
18:00:11   6  ,AVG(g6)
18:00:11   7  FROM svm6162
18:00:11   8  GROUP BY pair,trend,gatt
18:00:11   9  ORDER BY pair,trend,gatt
18:00:11  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6590 -.00314651
eur_usd 	-1 up	      3568 .004448735
eur_usd 	-1		60
eur_usd 	 1 nup	      5875 -.00324688
eur_usd 	 1 up	      3705 .005071238
eur_usd 	 1		12

6 rows selected.

Elapsed: 00:00:00.03
18:00:11 SQL> 
18:00:11 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.32
18:00:11 SQL> CREATE TABLE modsrc COMPRESS AS
18:00:11   2  SELECT
18:00:11   3  pair
18:00:11   4  ,ydate
18:00:11   5  ,prdate
18:00:11   6  ,trend
18:00:11   7  ,g6
18:00:11   8  ,gatt
18:00:11   9  ,gattn
18:00:11  10  FROM svm6162
18:00:11  11  /

Table created.

Elapsed: 00:00:00.08
18:00:11 SQL> 
18:00:11 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
18:00:11 SQL> 
18:00:11 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.13
18:00:11 SQL> CREATE TABLE eur_ms610 COMPRESS AS
18:00:11   2  SELECT
18:00:11   3  ydate
18:00:11   4  ,trend eur_trend
18:00:11   5  ,g6    eur_g6
18:00:11   6  ,gatt  eur_gatt
18:00:11   7  ,gattn eur_gattn
18:00:11   8  FROM modsrc
18:00:11   9  /

Table created.

Elapsed: 00:00:00.07
18:00:12 SQL> 
18:00:12 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
18:00:12 SQL> 
18:00:12 SQL> -- I need a copy of the attributes:
18:00:12 SQL> 
18:00:12 SQL> 
18:00:12 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.05
18:00:12 SQL> CREATE TABLE eur_att COMPRESS AS
18:00:12   2  SELECT
18:00:12   3  ydate
18:00:12   4  ,att00 eur_att00
18:00:12   5  ,att01 eur_att01
18:00:12   6  ,att02 eur_att02
18:00:12   7  ,att03 eur_att03
18:00:12   8  ,att04 eur_att04
18:00:12   9  ,att05 eur_att05
18:00:12  10  ,att06 eur_att06
18:00:12  11  ,att07 eur_att07
18:00:12  12  ,att08 eur_att08
18:00:12  13  ,att09 eur_att09
18:00:12  14  ,att10 eur_att10
18:00:12  15  ,att11 eur_att11
18:00:12  16  ,att12 eur_att12
18:00:12  17  ,att13 eur_att13
18:00:12  18  ,att14 eur_att14
18:00:12  19  ,att15 eur_att15
18:00:12  20  ,att16 eur_att16
18:00:12  21  ,att17 eur_att17
18:00:12  22  ,att18 eur_att18
18:00:12  23  ,att19 eur_att19
18:00:12  24  ,att20 eur_att20
18:00:12  25  ,att21 eur_att21
18:00:12  26  ,att22 eur_att22
18:00:12  27  ,att23 eur_att23
18:00:12  28  ,att24 eur_att24
18:00:12  29  ,att25 eur_att25
18:00:12  30  ,att26 eur_att26
18:00:12  31  ,att27 eur_att27
18:00:12  32  ,att28 eur_att28
18:00:12  33  ,att29 eur_att29
18:00:12  34  ,att30 eur_att30
18:00:12  35  ,att31 eur_att31
18:00:12  36  ,att32 eur_att32
18:00:12  37  ,att33 eur_att33
18:00:12  38  ,att34 eur_att34
18:00:12  39  ,att35 eur_att35
18:00:12  40  ,att36 eur_att36
18:00:12  41  ,att37 eur_att37
18:00:12  42  FROM svm6162
18:00:12  43  /

Table created.

Elapsed: 00:00:00.18
18:00:12 SQL> 
18:00:12 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
18:00:12 SQL> 
18:00:12 SQL> -- rpt
18:00:12 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19810

Elapsed: 00:00:00.93
18:00:13 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19810

Elapsed: 00:00:00.01
18:00:13 SQL> 
18:00:13 SQL> --
18:00:13 SQL> -- aud610.sql
18:00:13 SQL> --
18:00:13 SQL> 
18:00:13 SQL> -- Creates views and tables for backtesting a forex SVM strategy
18:00:13 SQL> 
18:00:13 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.62
18:00:14 SQL> 
18:00:14 SQL> -- I created di5min here:
18:00:14 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
18:00:14 SQL> 
18:00:14 SQL> CREATE OR REPLACE VIEW svm6102 AS
18:00:14   2  SELECT
18:00:14   3  pair
18:00:14   4  ,ydate
18:00:14   5  ,prdate
18:00:14   6  ,rownum rnum -- acts as t in my time-series
18:00:14   7  ,clse
18:00:14   8  -- Derive a bunch of attributes from clse, the latest price:
18:00:14   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
18:00:14  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
18:00:14  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
18:00:14  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
18:00:14  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
18:00:14  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
18:00:14  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
18:00:14  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
18:00:14  17  --
18:00:14  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
18:00:14  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
18:00:14  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
18:00:14  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
18:00:14  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
18:00:14  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
18:00:14  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
18:00:14  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
18:00:14  26  --
18:00:14  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
18:00:14  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
18:00:14  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
18:00:14  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
18:00:14  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
18:00:14  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
18:00:14  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
18:00:14  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
18:00:14  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
18:00:14  36  FROM di5min WHERE pair LIKE'%aud%'
18:00:14  37  AND ydate > sysdate - 95
18:00:14  38  ORDER BY ydate
18:00:14  39  /

View created.

Elapsed: 00:00:00.05
18:00:14 SQL> 
18:00:14 SQL> -- rpt
18:00:14 SQL> 
18:00:14 SQL> SELECT
18:00:14   2  pair
18:00:14   3  ,COUNT(pair)
18:00:14   4  ,MIN(clse),MAX(clse)
18:00:14   5  ,MIN(avg6),MAX(avg6)
18:00:14   6  ,MIN(ydate),MAX(ydate)
18:00:14   7  FROM svm6102
18:00:14   8  GROUP BY pair
18:00:14   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19807	.95405	  1.02495 .957141438 1.02284247 2010-10-04 18:05:01 2011-01-07 17:55:00

Elapsed: 00:00:00.88
18:00:15 SQL> 
18:00:15 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
18:00:15 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.21
18:00:15 SQL> CREATE TABLE svm6122 COMPRESS AS
18:00:15   2  SELECT
18:00:15   3  pair
18:00:15   4  ,ydate
18:00:15   5  ,prdate
18:00:15   6  ,clse
18:00:15   7  -- g6 is important. I want to predict g6:
18:00:15   8  ,ld6 - clse g6
18:00:15   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
18:00:15  10  -- I want more attributes from the ones I derived above:
18:00:15  11  -- clse relation to moving-min
18:00:15  12  ,clse-min4  cm4
18:00:15  13  ,clse-min6  cm6
18:00:15  14  ,clse-min8  cm8
18:00:15  15  ,clse-min10 cm10
18:00:15  16  ,clse-min12 cm12
18:00:15  17  ,clse-min14 cm14
18:00:15  18  ,clse-min16 cm16
18:00:15  19  ,clse-min18 cm18
18:00:15  20  -- clse relation to moving-avg
18:00:15  21  ,clse-avg4  ca4
18:00:15  22  ,clse-avg6  ca6
18:00:15  23  ,clse-avg8  ca8
18:00:15  24  ,clse-avg10 ca10
18:00:15  25  ,clse-avg12 ca12
18:00:15  26  ,clse-avg14 ca14
18:00:15  27  ,clse-avg16 ca16
18:00:15  28  ,clse-avg18 ca18
18:00:15  29  -- clse relation to moving-max
18:00:15  30  ,clse-max4  cx4
18:00:15  31  ,clse-max6  cx6
18:00:15  32  ,clse-max8  cx8
18:00:15  33  ,clse-max10 cx10
18:00:15  34  ,clse-max12 cx12
18:00:15  35  ,clse-max14 cx14
18:00:15  36  ,clse-max16 cx16
18:00:15  37  ,clse-max18 cx18
18:00:15  38  -- Derive more attributes.
18:00:15  39  -- I want to use CORR() here to help SVM see the shape of the series.
18:00:15  40  -- But COVAR_POP is more stable:
18:00:15  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
18:00:15  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
18:00:15  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
18:00:15  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
18:00:15  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
18:00:15  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
18:00:15  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
18:00:15  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
18:00:15  49  -- Derive date related attributes:
18:00:15  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
18:00:15  51  ,0+TO_CHAR(ydate,'D')d
18:00:15  52  ,0+TO_CHAR(ydate,'W')w
18:00:15  53  -- mpm stands for minutes-past-midnight:
18:00:15  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
18:00:15  55  -- mph stands for minutes-past-hour:
18:00:15  56  ,0+TO_CHAR(ydate,'MI')mph
18:00:15  57  FROM svm6102
18:00:15  58  ORDER BY ydate
18:00:15  59  /

Table created.

Elapsed: 00:00:02.13
18:00:17 SQL> 
18:00:17 SQL> -- rpt
18:00:17 SQL> 
18:00:17 SQL> SELECT
18:00:17   2  pair
18:00:17   3  ,COUNT(pair)
18:00:17   4  ,MIN(clse),MAX(clse)
18:00:17   5  ,MIN(ydate),MAX(ydate)
18:00:17   6  FROM svm6122
18:00:17   7  GROUP BY pair
18:00:17   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19807	.95405	  1.02495 2010-10-04 18:05:01 2011-01-07 17:55:00

Elapsed: 00:00:00.07
18:00:17 SQL> 
18:00:17 SQL> -- Prepare for derivation of NTILE based params:
18:00:17 SQL> 
18:00:17 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.22
18:00:18 SQL> CREATE TABLE svm6142 COMPRESS AS
18:00:18   2  SELECT
18:00:18   3  pair
18:00:18   4  ,ydate
18:00:18   5  ,prdate
18:00:18   6  ,clse
18:00:18   7  ,g6
18:00:18   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
18:00:18   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
18:00:18  10  ,CASE WHEN trend IS NULL THEN 1
18:00:18  11  	    WHEN trend =0      THEN 1
18:00:18  12  	    ELSE trend END trend
18:00:18  13  ,cm4
18:00:18  14  ,cm6
18:00:18  15  ,cm8
18:00:18  16  ,cm10
18:00:18  17  ,cm12
18:00:18  18  ,cm14
18:00:18  19  ,cm16
18:00:18  20  ,cm18
18:00:18  21  --
18:00:18  22  ,ca4
18:00:18  23  ,ca6
18:00:18  24  ,ca8
18:00:18  25  ,ca10
18:00:18  26  ,ca12
18:00:18  27  ,ca14
18:00:18  28  ,ca16
18:00:18  29  ,ca18
18:00:18  30  --
18:00:18  31  ,cx4
18:00:18  32  ,cx6
18:00:18  33  ,cx8
18:00:18  34  ,cx10
18:00:18  35  ,cx12
18:00:18  36  ,cx14
18:00:18  37  ,cx16
18:00:18  38  ,cx18
18:00:18  39  --
18:00:18  40  ,crr4
18:00:18  41  ,crr6
18:00:18  42  ,crr8
18:00:18  43  ,crr10
18:00:18  44  ,crr12
18:00:18  45  ,crr14
18:00:18  46  ,crr16
18:00:18  47  ,crr18
18:00:18  48  --
18:00:18  49  ,hh
18:00:18  50  ,d
18:00:18  51  ,w
18:00:18  52  ,mpm
18:00:18  53  ,mph
18:00:18  54  FROM svm6122
18:00:18  55  ORDER BY ydate
18:00:18  56  /

Table created.

Elapsed: 00:00:00.37
18:00:18 SQL> 
18:00:18 SQL> -- rpt
18:00:18 SQL> 
18:00:18 SQL> SELECT
18:00:18   2  pair
18:00:18   3  ,trend
18:00:18   4  ,gatt
18:00:18   5  ,COUNT(pair)
18:00:18   6  ,AVG(g6)
18:00:18   7  FROM svm6142
18:00:18   8  GROUP BY pair,trend,gatt
18:00:18   9  ORDER BY pair,trend,gatt
18:00:18  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5707 -.00216625
aud_usd 	-1 up	      3725 .003773641
aud_usd 	-1		19
aud_usd 	 1 nup	      6707 -.00212174
aud_usd 	 1 up	      3596 .004052687
aud_usd 	 1		53

6 rows selected.

Elapsed: 00:00:00.07
18:00:18 SQL> 
18:00:18 SQL> 
18:00:18 SQL> -- Derive NTILE based params:
18:00:18 SQL> 
18:00:18 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.23
18:00:18 SQL> CREATE TABLE svm6162 COMPRESS AS
18:00:18   2  SELECT
18:00:18   3  pair
18:00:18   4  ,ydate
18:00:18   5  ,prdate
18:00:18   6  ,clse
18:00:18   7  ,g6
18:00:18   8  ,gatt
18:00:18   9  ,gattn
18:00:18  10  ,trend
18:00:18  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
18:00:18  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
18:00:18  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
18:00:18  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
18:00:18  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
18:00:18  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
18:00:18  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
18:00:18  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
18:00:18  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
18:00:18  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
18:00:18  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
18:00:18  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
18:00:18  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
18:00:18  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
18:00:18  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
18:00:18  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
18:00:18  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
18:00:18  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
18:00:18  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
18:00:18  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
18:00:18  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
18:00:18  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
18:00:18  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
18:00:18  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
18:00:18  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
18:00:18  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
18:00:18  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
18:00:18  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
18:00:18  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
18:00:18  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
18:00:18  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
18:00:18  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
18:00:18  43  ,hh  att32
18:00:18  44  ,d   att33
18:00:18  45  ,w   att34
18:00:18  46  ,mpm att35
18:00:18  47  ,mph att36
18:00:18  48  ,trend att37
18:00:18  49  FROM svm6142
18:00:18  50  ORDER BY ydate
18:00:18  51  /

Table created.

Elapsed: 00:00:04.83
18:00:23 SQL> 
18:00:23 SQL> -- rpt
18:00:23 SQL> 
18:00:23 SQL> SELECT
18:00:23   2  pair
18:00:23   3  ,trend
18:00:23   4  ,gatt
18:00:23   5  ,COUNT(pair)
18:00:23   6  ,AVG(g6)
18:00:23   7  FROM svm6162
18:00:23   8  GROUP BY pair,trend,gatt
18:00:23   9  ORDER BY pair,trend,gatt
18:00:23  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5707 -.00216625
aud_usd 	-1 up	      3725 .003773641
aud_usd 	-1		19
aud_usd 	 1 nup	      6707 -.00212174
aud_usd 	 1 up	      3596 .004052687
aud_usd 	 1		53

6 rows selected.

Elapsed: 00:00:00.03
18:00:23 SQL> 
18:00:23 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
18:00:23 SQL> CREATE TABLE modsrc COMPRESS AS
18:00:23   2  SELECT
18:00:23   3  pair
18:00:23   4  ,ydate
18:00:23   5  ,prdate
18:00:23   6  ,trend
18:00:23   7  ,g6
18:00:23   8  ,gatt
18:00:23   9  ,gattn
18:00:23  10  FROM svm6162
18:00:23  11  /

Table created.

Elapsed: 00:00:00.08
18:00:23 SQL> 
18:00:23 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
18:00:23 SQL> 
18:00:23 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.14
18:00:24 SQL> CREATE TABLE aud_ms610 COMPRESS AS
18:00:24   2  SELECT
18:00:24   3  ydate
18:00:24   4  ,trend aud_trend
18:00:24   5  ,g6    aud_g6
18:00:24   6  ,gatt  aud_gatt
18:00:24   7  ,gattn aud_gattn
18:00:24   8  FROM modsrc
18:00:24   9  /

Table created.

Elapsed: 00:00:00.06
18:00:24 SQL> 
18:00:24 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
18:00:24 SQL> 
18:00:24 SQL> -- I need a copy of the attributes:
18:00:24 SQL> 
18:00:24 SQL> 
18:00:24 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.05
18:00:24 SQL> CREATE TABLE aud_att COMPRESS AS
18:00:24   2  SELECT
18:00:24   3  ydate
18:00:24   4  ,att00 aud_att00
18:00:24   5  ,att01 aud_att01
18:00:24   6  ,att02 aud_att02
18:00:24   7  ,att03 aud_att03
18:00:24   8  ,att04 aud_att04
18:00:24   9  ,att05 aud_att05
18:00:24  10  ,att06 aud_att06
18:00:24  11  ,att07 aud_att07
18:00:24  12  ,att08 aud_att08
18:00:24  13  ,att09 aud_att09
18:00:24  14  ,att10 aud_att10
18:00:24  15  ,att11 aud_att11
18:00:24  16  ,att12 aud_att12
18:00:24  17  ,att13 aud_att13
18:00:24  18  ,att14 aud_att14
18:00:24  19  ,att15 aud_att15
18:00:24  20  ,att16 aud_att16
18:00:24  21  ,att17 aud_att17
18:00:24  22  ,att18 aud_att18
18:00:24  23  ,att19 aud_att19
18:00:24  24  ,att20 aud_att20
18:00:24  25  ,att21 aud_att21
18:00:24  26  ,att22 aud_att22
18:00:24  27  ,att23 aud_att23
18:00:24  28  ,att24 aud_att24
18:00:24  29  ,att25 aud_att25
18:00:24  30  ,att26 aud_att26
18:00:24  31  ,att27 aud_att27
18:00:24  32  ,att28 aud_att28
18:00:24  33  ,att29 aud_att29
18:00:24  34  ,att30 aud_att30
18:00:24  35  ,att31 aud_att31
18:00:24  36  ,att32 aud_att32
18:00:24  37  ,att33 aud_att33
18:00:24  38  ,att34 aud_att34
18:00:24  39  ,att35 aud_att35
18:00:24  40  ,att36 aud_att36
18:00:24  41  ,att37 aud_att37
18:00:24  42  FROM svm6162
18:00:24  43  /

Table created.

Elapsed: 00:00:00.17
18:00:24 SQL> 
18:00:24 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
18:00:25 SQL> 
18:00:25 SQL> -- rpt
18:00:25 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19807

Elapsed: 00:00:00.90
18:00:25 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19807

Elapsed: 00:00:00.00
18:00:25 SQL> 
18:00:25 SQL> --
18:00:25 SQL> -- gbp610.sql
18:00:25 SQL> --
18:00:25 SQL> 
18:00:25 SQL> -- Creates views and tables for backtesting a forex SVM strategy
18:00:25 SQL> 
18:00:25 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.75
18:00:26 SQL> 
18:00:26 SQL> -- I created di5min here:
18:00:26 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
18:00:26 SQL> 
18:00:26 SQL> CREATE OR REPLACE VIEW svm6102 AS
18:00:26   2  SELECT
18:00:26   3  pair
18:00:26   4  ,ydate
18:00:26   5  ,prdate
18:00:26   6  ,rownum rnum -- acts as t in my time-series
18:00:26   7  ,clse
18:00:26   8  -- Derive a bunch of attributes from clse, the latest price:
18:00:26   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
18:00:26  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
18:00:26  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
18:00:26  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
18:00:26  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
18:00:26  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
18:00:26  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
18:00:26  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
18:00:26  17  --
18:00:26  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
18:00:26  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
18:00:26  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
18:00:26  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
18:00:26  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
18:00:26  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
18:00:26  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
18:00:26  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
18:00:26  26  --
18:00:26  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
18:00:26  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
18:00:26  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
18:00:26  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
18:00:26  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
18:00:26  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
18:00:26  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
18:00:26  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
18:00:26  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
18:00:26  36  FROM di5min WHERE pair LIKE'%gbp%'
18:00:26  37  AND ydate > sysdate - 95
18:00:26  38  ORDER BY ydate
18:00:26  39  /

View created.

Elapsed: 00:00:00.04
18:00:26 SQL> 
18:00:26 SQL> -- rpt
18:00:26 SQL> 
18:00:26 SQL> SELECT
18:00:26   2  pair
18:00:26   3  ,COUNT(pair)
18:00:26   4  ,MIN(clse),MAX(clse)
18:00:26   5  ,MIN(avg6),MAX(avg6)
18:00:26   6  ,MIN(ydate),MAX(ydate)
18:00:26   7  FROM svm6102
18:00:26   8  GROUP BY pair
18:00:26   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19809   1.535325	   1.6295 1.53696747 1.62716986 2010-10-04 18:05:01 2011-01-07 17:55:00

Elapsed: 00:00:00.87
18:00:27 SQL> 
18:00:27 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
18:00:27 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.20
18:00:27 SQL> CREATE TABLE svm6122 COMPRESS AS
18:00:27   2  SELECT
18:00:27   3  pair
18:00:27   4  ,ydate
18:00:27   5  ,prdate
18:00:27   6  ,clse
18:00:27   7  -- g6 is important. I want to predict g6:
18:00:27   8  ,ld6 - clse g6
18:00:27   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
18:00:27  10  -- I want more attributes from the ones I derived above:
18:00:27  11  -- clse relation to moving-min
18:00:27  12  ,clse-min4  cm4
18:00:27  13  ,clse-min6  cm6
18:00:27  14  ,clse-min8  cm8
18:00:27  15  ,clse-min10 cm10
18:00:27  16  ,clse-min12 cm12
18:00:27  17  ,clse-min14 cm14
18:00:27  18  ,clse-min16 cm16
18:00:27  19  ,clse-min18 cm18
18:00:27  20  -- clse relation to moving-avg
18:00:27  21  ,clse-avg4  ca4
18:00:27  22  ,clse-avg6  ca6
18:00:27  23  ,clse-avg8  ca8
18:00:27  24  ,clse-avg10 ca10
18:00:27  25  ,clse-avg12 ca12
18:00:27  26  ,clse-avg14 ca14
18:00:27  27  ,clse-avg16 ca16
18:00:27  28  ,clse-avg18 ca18
18:00:27  29  -- clse relation to moving-max
18:00:27  30  ,clse-max4  cx4
18:00:27  31  ,clse-max6  cx6
18:00:27  32  ,clse-max8  cx8
18:00:27  33  ,clse-max10 cx10
18:00:27  34  ,clse-max12 cx12
18:00:27  35  ,clse-max14 cx14
18:00:27  36  ,clse-max16 cx16
18:00:27  37  ,clse-max18 cx18
18:00:27  38  -- Derive more attributes.
18:00:27  39  -- I want to use CORR() here to help SVM see the shape of the series.
18:00:27  40  -- But COVAR_POP is more stable:
18:00:27  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
18:00:27  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
18:00:27  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
18:00:27  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
18:00:27  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
18:00:27  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
18:00:27  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
18:00:27  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
18:00:27  49  -- Derive date related attributes:
18:00:27  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
18:00:27  51  ,0+TO_CHAR(ydate,'D')d
18:00:27  52  ,0+TO_CHAR(ydate,'W')w
18:00:27  53  -- mpm stands for minutes-past-midnight:
18:00:27  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
18:00:27  55  -- mph stands for minutes-past-hour:
18:00:27  56  ,0+TO_CHAR(ydate,'MI')mph
18:00:27  57  FROM svm6102
18:00:27  58  ORDER BY ydate
18:00:27  59  /

Table created.

Elapsed: 00:00:02.13
18:00:29 SQL> 
18:00:29 SQL> -- rpt
18:00:29 SQL> 
18:00:29 SQL> SELECT
18:00:29   2  pair
18:00:29   3  ,COUNT(pair)
18:00:29   4  ,MIN(clse),MAX(clse)
18:00:29   5  ,MIN(ydate),MAX(ydate)
18:00:29   6  FROM svm6122
18:00:29   7  GROUP BY pair
18:00:29   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19809   1.535325	   1.6295 2010-10-04 18:05:01 2011-01-07 17:55:00

Elapsed: 00:00:00.04
18:00:30 SQL> 
18:00:30 SQL> -- Prepare for derivation of NTILE based params:
18:00:30 SQL> 
18:00:30 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.26
18:00:30 SQL> CREATE TABLE svm6142 COMPRESS AS
18:00:30   2  SELECT
18:00:30   3  pair
18:00:30   4  ,ydate
18:00:30   5  ,prdate
18:00:30   6  ,clse
18:00:30   7  ,g6
18:00:30   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
18:00:30   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
18:00:30  10  ,CASE WHEN trend IS NULL THEN 1
18:00:30  11  	    WHEN trend =0      THEN 1
18:00:30  12  	    ELSE trend END trend
18:00:30  13  ,cm4
18:00:30  14  ,cm6
18:00:30  15  ,cm8
18:00:30  16  ,cm10
18:00:30  17  ,cm12
18:00:30  18  ,cm14
18:00:30  19  ,cm16
18:00:30  20  ,cm18
18:00:30  21  --
18:00:30  22  ,ca4
18:00:30  23  ,ca6
18:00:30  24  ,ca8
18:00:30  25  ,ca10
18:00:30  26  ,ca12
18:00:30  27  ,ca14
18:00:30  28  ,ca16
18:00:30  29  ,ca18
18:00:30  30  --
18:00:30  31  ,cx4
18:00:30  32  ,cx6
18:00:30  33  ,cx8
18:00:30  34  ,cx10
18:00:30  35  ,cx12
18:00:30  36  ,cx14
18:00:30  37  ,cx16
18:00:30  38  ,cx18
18:00:30  39  --
18:00:30  40  ,crr4
18:00:30  41  ,crr6
18:00:30  42  ,crr8
18:00:30  43  ,crr10
18:00:30  44  ,crr12
18:00:30  45  ,crr14
18:00:30  46  ,crr16
18:00:30  47  ,crr18
18:00:30  48  --
18:00:30  49  ,hh
18:00:30  50  ,d
18:00:30  51  ,w
18:00:30  52  ,mpm
18:00:30  53  ,mph
18:00:30  54  FROM svm6122
18:00:30  55  ORDER BY ydate
18:00:30  56  /

Table created.

Elapsed: 00:00:00.37
18:00:30 SQL> 
18:00:30 SQL> -- rpt
18:00:30 SQL> 
18:00:30 SQL> SELECT
18:00:30   2  pair
18:00:30   3  ,trend
18:00:30   4  ,gatt
18:00:30   5  ,COUNT(pair)
18:00:30   6  ,AVG(g6)
18:00:30   7  FROM svm6142
18:00:30   8  GROUP BY pair,trend,gatt
18:00:30   9  ORDER BY pair,trend,gatt
18:00:30  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6503  -.0026057
gbp_usd 	-1 up	      3557  .00434541
gbp_usd 	 1 nup	      6204 -.00267151
gbp_usd 	 1 up	      3473 .004568122
gbp_usd 	 1		72

Elapsed: 00:00:00.04
18:00:30 SQL> 
18:00:30 SQL> 
18:00:30 SQL> -- Derive NTILE based params:
18:00:30 SQL> 
18:00:30 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
18:00:30 SQL> CREATE TABLE svm6162 COMPRESS AS
18:00:30   2  SELECT
18:00:30   3  pair
18:00:30   4  ,ydate
18:00:30   5  ,prdate
18:00:30   6  ,clse
18:00:30   7  ,g6
18:00:30   8  ,gatt
18:00:30   9  ,gattn
18:00:30  10  ,trend
18:00:30  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
18:00:30  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
18:00:30  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
18:00:30  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
18:00:30  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
18:00:30  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
18:00:30  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
18:00:30  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
18:00:30  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
18:00:30  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
18:00:30  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
18:00:30  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
18:00:30  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
18:00:30  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
18:00:30  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
18:00:30  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
18:00:30  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
18:00:30  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
18:00:30  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
18:00:30  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
18:00:30  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
18:00:30  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
18:00:30  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
18:00:30  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
18:00:30  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
18:00:30  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
18:00:30  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
18:00:30  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
18:00:30  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
18:00:30  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
18:00:30  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
18:00:30  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
18:00:30  43  ,hh  att32
18:00:30  44  ,d   att33
18:00:30  45  ,w   att34
18:00:30  46  ,mpm att35
18:00:30  47  ,mph att36
18:00:30  48  ,trend att37
18:00:30  49  FROM svm6142
18:00:30  50  ORDER BY ydate
18:00:30  51  /

Table created.

Elapsed: 00:00:04.76
18:00:35 SQL> 
18:00:35 SQL> -- rpt
18:00:35 SQL> 
18:00:35 SQL> SELECT
18:00:35   2  pair
18:00:35   3  ,trend
18:00:35   4  ,gatt
18:00:35   5  ,COUNT(pair)
18:00:35   6  ,AVG(g6)
18:00:35   7  FROM svm6162
18:00:35   8  GROUP BY pair,trend,gatt
18:00:35   9  ORDER BY pair,trend,gatt
18:00:35  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6503  -.0026057
gbp_usd 	-1 up	      3557  .00434541
gbp_usd 	 1 nup	      6204 -.00267151
gbp_usd 	 1 up	      3473 .004568122
gbp_usd 	 1		72

Elapsed: 00:00:00.03
18:00:35 SQL> 
18:00:35 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
18:00:35 SQL> CREATE TABLE modsrc COMPRESS AS
18:00:35   2  SELECT
18:00:35   3  pair
18:00:35   4  ,ydate
18:00:35   5  ,prdate
18:00:35   6  ,trend
18:00:35   7  ,g6
18:00:35   8  ,gatt
18:00:35   9  ,gattn
18:00:35  10  FROM svm6162
18:00:35  11  /

Table created.

Elapsed: 00:00:00.08
18:00:35 SQL> 
18:00:35 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
18:00:36 SQL> 
18:00:36 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
18:00:36 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
18:00:36   2  SELECT
18:00:36   3  ydate
18:00:36   4  ,trend gbp_trend
18:00:36   5  ,g6    gbp_g6
18:00:36   6  ,gatt  gbp_gatt
18:00:36   7  ,gattn gbp_gattn
18:00:36   8  FROM modsrc
18:00:36   9  /

Table created.

Elapsed: 00:00:00.07
18:00:36 SQL> 
18:00:36 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
18:00:36 SQL> 
18:00:36 SQL> -- I need a copy of the attributes:
18:00:36 SQL> 
18:00:36 SQL> 
18:00:36 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.05
18:00:36 SQL> CREATE TABLE gbp_att COMPRESS AS
18:00:36   2  SELECT
18:00:36   3  ydate
18:00:36   4  ,att00 gbp_att00
18:00:36   5  ,att01 gbp_att01
18:00:36   6  ,att02 gbp_att02
18:00:36   7  ,att03 gbp_att03
18:00:36   8  ,att04 gbp_att04
18:00:36   9  ,att05 gbp_att05
18:00:36  10  ,att06 gbp_att06
18:00:36  11  ,att07 gbp_att07
18:00:36  12  ,att08 gbp_att08
18:00:36  13  ,att09 gbp_att09
18:00:36  14  ,att10 gbp_att10
18:00:36  15  ,att11 gbp_att11
18:00:36  16  ,att12 gbp_att12
18:00:36  17  ,att13 gbp_att13
18:00:36  18  ,att14 gbp_att14
18:00:36  19  ,att15 gbp_att15
18:00:36  20  ,att16 gbp_att16
18:00:36  21  ,att17 gbp_att17
18:00:36  22  ,att18 gbp_att18
18:00:36  23  ,att19 gbp_att19
18:00:36  24  ,att20 gbp_att20
18:00:36  25  ,att21 gbp_att21
18:00:36  26  ,att22 gbp_att22
18:00:36  27  ,att23 gbp_att23
18:00:36  28  ,att24 gbp_att24
18:00:36  29  ,att25 gbp_att25
18:00:36  30  ,att26 gbp_att26
18:00:36  31  ,att27 gbp_att27
18:00:36  32  ,att28 gbp_att28
18:00:36  33  ,att29 gbp_att29
18:00:36  34  ,att30 gbp_att30
18:00:36  35  ,att31 gbp_att31
18:00:36  36  ,att32 gbp_att32
18:00:36  37  ,att33 gbp_att33
18:00:36  38  ,att34 gbp_att34
18:00:36  39  ,att35 gbp_att35
18:00:36  40  ,att36 gbp_att36
18:00:36  41  ,att37 gbp_att37
18:00:36  42  FROM svm6162
18:00:36  43  /

Table created.

Elapsed: 00:00:00.17
18:00:36 SQL> 
18:00:36 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
18:00:37 SQL> 
18:00:37 SQL> -- rpt
18:00:37 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.89
18:00:37 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.00
18:00:37 SQL> 
18:00:37 SQL> --
18:00:37 SQL> -- jpy610.sql
18:00:37 SQL> --
18:00:37 SQL> 
18:00:37 SQL> -- Creates views and tables for backtesting a forex SVM strategy
18:00:37 SQL> 
18:00:37 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.47
18:00:38 SQL> 
18:00:38 SQL> -- I created di5min here:
18:00:38 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
18:00:38 SQL> 
18:00:38 SQL> CREATE OR REPLACE VIEW svm6102 AS
18:00:38   2  SELECT
18:00:38   3  pair
18:00:38   4  ,ydate
18:00:38   5  ,prdate
18:00:38   6  ,rownum rnum -- acts as t in my time-series
18:00:38   7  ,clse
18:00:38   8  -- Derive a bunch of attributes from clse, the latest price:
18:00:38   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
18:00:38  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
18:00:38  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
18:00:38  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
18:00:38  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
18:00:38  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
18:00:38  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
18:00:38  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
18:00:38  17  --
18:00:38  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
18:00:38  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
18:00:38  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
18:00:38  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
18:00:38  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
18:00:38  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
18:00:38  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
18:00:38  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
18:00:38  26  --
18:00:38  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
18:00:38  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
18:00:38  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
18:00:38  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
18:00:38  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
18:00:38  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
18:00:38  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
18:00:38  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
18:00:38  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
18:00:38  36  FROM di5min WHERE pair LIKE'%jpy%'
18:00:38  37  AND ydate > sysdate - 95
18:00:38  38  ORDER BY ydate
18:00:38  39  /

View created.

Elapsed: 00:00:00.07
18:00:38 SQL> 
18:00:38 SQL> -- rpt
18:00:38 SQL> 
18:00:38 SQL> SELECT
18:00:38   2  pair
18:00:38   3  ,COUNT(pair)
18:00:38   4  ,MIN(clse),MAX(clse)
18:00:38   5  ,MIN(avg6),MAX(avg6)
18:00:38   6  ,MIN(ydate),MAX(ydate)
18:00:38   7  FROM svm6102
18:00:38   8  GROUP BY pair
18:00:38   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19808	 80.25	   84.485 80.3595205 84.3105479 2010-10-04 18:05:01 2011-01-07 17:55:00

Elapsed: 00:00:00.93
18:00:39 SQL> 
18:00:39 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
18:00:39 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.20
18:00:39 SQL> CREATE TABLE svm6122 COMPRESS AS
18:00:39   2  SELECT
18:00:39   3  pair
18:00:39   4  ,ydate
18:00:39   5  ,prdate
18:00:39   6  ,clse
18:00:39   7  -- g6 is important. I want to predict g6:
18:00:39   8  ,ld6 - clse g6
18:00:39   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
18:00:39  10  -- I want more attributes from the ones I derived above:
18:00:39  11  -- clse relation to moving-min
18:00:39  12  ,clse-min4  cm4
18:00:39  13  ,clse-min6  cm6
18:00:39  14  ,clse-min8  cm8
18:00:39  15  ,clse-min10 cm10
18:00:39  16  ,clse-min12 cm12
18:00:39  17  ,clse-min14 cm14
18:00:39  18  ,clse-min16 cm16
18:00:39  19  ,clse-min18 cm18
18:00:39  20  -- clse relation to moving-avg
18:00:39  21  ,clse-avg4  ca4
18:00:39  22  ,clse-avg6  ca6
18:00:39  23  ,clse-avg8  ca8
18:00:39  24  ,clse-avg10 ca10
18:00:39  25  ,clse-avg12 ca12
18:00:39  26  ,clse-avg14 ca14
18:00:39  27  ,clse-avg16 ca16
18:00:39  28  ,clse-avg18 ca18
18:00:39  29  -- clse relation to moving-max
18:00:39  30  ,clse-max4  cx4
18:00:39  31  ,clse-max6  cx6
18:00:39  32  ,clse-max8  cx8
18:00:39  33  ,clse-max10 cx10
18:00:39  34  ,clse-max12 cx12
18:00:39  35  ,clse-max14 cx14
18:00:39  36  ,clse-max16 cx16
18:00:39  37  ,clse-max18 cx18
18:00:39  38  -- Derive more attributes.
18:00:39  39  -- I want to use CORR() here to help SVM see the shape of the series.
18:00:39  40  -- But COVAR_POP is more stable:
18:00:39  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
18:00:39  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
18:00:39  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
18:00:39  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
18:00:39  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
18:00:39  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
18:00:39  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
18:00:39  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
18:00:39  49  -- Derive date related attributes:
18:00:39  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
18:00:39  51  ,0+TO_CHAR(ydate,'D')d
18:00:39  52  ,0+TO_CHAR(ydate,'W')w
18:00:39  53  -- mpm stands for minutes-past-midnight:
18:00:39  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
18:00:39  55  -- mph stands for minutes-past-hour:
18:00:39  56  ,0+TO_CHAR(ydate,'MI')mph
18:00:39  57  FROM svm6102
18:00:39  58  ORDER BY ydate
18:00:39  59  /

Table created.

Elapsed: 00:00:02.17
18:00:41 SQL> 
18:00:41 SQL> -- rpt
18:00:41 SQL> 
18:00:41 SQL> SELECT
18:00:41   2  pair
18:00:41   3  ,COUNT(pair)
18:00:41   4  ,MIN(clse),MAX(clse)
18:00:41   5  ,MIN(ydate),MAX(ydate)
18:00:41   6  FROM svm6122
18:00:41   7  GROUP BY pair
18:00:41   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19808	 80.25	   84.485 2010-10-04 18:05:01 2011-01-07 17:55:00

Elapsed: 00:00:00.08
18:00:41 SQL> 
18:00:41 SQL> -- Prepare for derivation of NTILE based params:
18:00:41 SQL> 
18:00:41 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.37
18:00:42 SQL> CREATE TABLE svm6142 COMPRESS AS
18:00:42   2  SELECT
18:00:42   3  pair
18:00:42   4  ,ydate
18:00:42   5  ,prdate
18:00:42   6  ,clse
18:00:42   7  ,g6
18:00:42   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
18:00:42   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
18:00:42  10  ,CASE WHEN trend IS NULL THEN 1
18:00:42  11  	    WHEN trend =0      THEN 1
18:00:42  12  	    ELSE trend END trend
18:00:42  13  ,cm4
18:00:42  14  ,cm6
18:00:42  15  ,cm8
18:00:42  16  ,cm10
18:00:42  17  ,cm12
18:00:42  18  ,cm14
18:00:42  19  ,cm16
18:00:42  20  ,cm18
18:00:42  21  --
18:00:42  22  ,ca4
18:00:42  23  ,ca6
18:00:42  24  ,ca8
18:00:42  25  ,ca10
18:00:42  26  ,ca12
18:00:42  27  ,ca14
18:00:42  28  ,ca16
18:00:42  29  ,ca18
18:00:42  30  --
18:00:42  31  ,cx4
18:00:42  32  ,cx6
18:00:42  33  ,cx8
18:00:42  34  ,cx10
18:00:42  35  ,cx12
18:00:42  36  ,cx14
18:00:42  37  ,cx16
18:00:42  38  ,cx18
18:00:42  39  --
18:00:42  40  ,crr4
18:00:42  41  ,crr6
18:00:42  42  ,crr8
18:00:42  43  ,crr10
18:00:42  44  ,crr12
18:00:42  45  ,crr14
18:00:42  46  ,crr16
18:00:42  47  ,crr18
18:00:42  48  --
18:00:42  49  ,hh
18:00:42  50  ,d
18:00:42  51  ,w
18:00:42  52  ,mpm
18:00:42  53  ,mph
18:00:42  54  FROM svm6122
18:00:42  55  ORDER BY ydate
18:00:42  56  /

Table created.

Elapsed: 00:00:00.39
18:00:42 SQL> 
18:00:42 SQL> -- rpt
18:00:42 SQL> 
18:00:42 SQL> SELECT
18:00:42   2  pair
18:00:42   3  ,trend
18:00:42   4  ,gatt
18:00:42   5  ,COUNT(pair)
18:00:42   6  ,AVG(g6)
18:00:42   7  FROM svm6142
18:00:42   8  GROUP BY pair,trend,gatt
18:00:42   9  ORDER BY pair,trend,gatt
18:00:42  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5173 -.16580273
usd_jpy 	-1 up	      4865 .170776605
usd_jpy 	-1		55
usd_jpy 	 1 nup	      5065 -.15595491
usd_jpy 	 1 up	      4633 .172976674
usd_jpy 	 1		17

6 rows selected.

Elapsed: 00:00:00.07
18:00:42 SQL> 
18:00:42 SQL> 
18:00:42 SQL> -- Derive NTILE based params:
18:00:42 SQL> 
18:00:42 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.17
18:00:42 SQL> CREATE TABLE svm6162 COMPRESS AS
18:00:42   2  SELECT
18:00:42   3  pair
18:00:42   4  ,ydate
18:00:42   5  ,prdate
18:00:42   6  ,clse
18:00:42   7  ,g6
18:00:42   8  ,gatt
18:00:42   9  ,gattn
18:00:42  10  ,trend
18:00:42  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
18:00:42  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
18:00:42  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
18:00:42  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
18:00:42  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
18:00:42  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
18:00:42  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
18:00:42  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
18:00:42  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
18:00:42  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
18:00:42  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
18:00:42  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
18:00:42  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
18:00:42  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
18:00:42  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
18:00:42  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
18:00:42  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
18:00:42  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
18:00:42  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
18:00:42  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
18:00:42  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
18:00:42  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
18:00:42  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
18:00:42  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
18:00:42  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
18:00:42  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
18:00:42  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
18:00:42  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
18:00:42  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
18:00:42  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
18:00:42  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
18:00:42  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
18:00:42  43  ,hh  att32
18:00:42  44  ,d   att33
18:00:42  45  ,w   att34
18:00:42  46  ,mpm att35
18:00:42  47  ,mph att36
18:00:42  48  ,trend att37
18:00:42  49  FROM svm6142
18:00:42  50  ORDER BY ydate
18:00:42  51  /

Table created.

Elapsed: 00:00:04.82
18:00:47 SQL> 
18:00:47 SQL> -- rpt
18:00:47 SQL> 
18:00:47 SQL> SELECT
18:00:47   2  pair
18:00:47   3  ,trend
18:00:47   4  ,gatt
18:00:47   5  ,COUNT(pair)
18:00:47   6  ,AVG(g6)
18:00:47   7  FROM svm6162
18:00:47   8  GROUP BY pair,trend,gatt
18:00:47   9  ORDER BY pair,trend,gatt
18:00:47  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5173 -.16580273
usd_jpy 	-1 up	      4865 .170776605
usd_jpy 	-1		55
usd_jpy 	 1 nup	      5065 -.15595491
usd_jpy 	 1 up	      4633 .172976674
usd_jpy 	 1		17

6 rows selected.

Elapsed: 00:00:00.03
18:00:47 SQL> 
18:00:47 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.23
18:00:47 SQL> CREATE TABLE modsrc COMPRESS AS
18:00:47   2  SELECT
18:00:47   3  pair
18:00:47   4  ,ydate
18:00:47   5  ,prdate
18:00:47   6  ,trend
18:00:47   7  ,g6
18:00:47   8  ,gatt
18:00:47   9  ,gattn
18:00:47  10  FROM svm6162
18:00:47  11  /

Table created.

Elapsed: 00:00:00.07
18:00:48 SQL> 
18:00:48 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
18:00:48 SQL> 
18:00:48 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
18:00:48 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
18:00:48   2  SELECT
18:00:48   3  ydate
18:00:48   4  ,trend jpy_trend
18:00:48   5  ,g6    jpy_g6
18:00:48   6  ,gatt  jpy_gatt
18:00:48   7  ,gattn jpy_gattn
18:00:48   8  FROM modsrc
18:00:48   9  /

Table created.

Elapsed: 00:00:00.10
18:00:48 SQL> 
18:00:48 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
18:00:48 SQL> 
18:00:48 SQL> -- I need a copy of the attributes:
18:00:48 SQL> 
18:00:48 SQL> 
18:00:48 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.05
18:00:48 SQL> CREATE TABLE jpy_att COMPRESS AS
18:00:48   2  SELECT
18:00:48   3  ydate
18:00:48   4  ,att00 jpy_att00
18:00:48   5  ,att01 jpy_att01
18:00:48   6  ,att02 jpy_att02
18:00:48   7  ,att03 jpy_att03
18:00:48   8  ,att04 jpy_att04
18:00:48   9  ,att05 jpy_att05
18:00:48  10  ,att06 jpy_att06
18:00:48  11  ,att07 jpy_att07
18:00:48  12  ,att08 jpy_att08
18:00:48  13  ,att09 jpy_att09
18:00:48  14  ,att10 jpy_att10
18:00:48  15  ,att11 jpy_att11
18:00:48  16  ,att12 jpy_att12
18:00:48  17  ,att13 jpy_att13
18:00:48  18  ,att14 jpy_att14
18:00:48  19  ,att15 jpy_att15
18:00:48  20  ,att16 jpy_att16
18:00:48  21  ,att17 jpy_att17
18:00:48  22  ,att18 jpy_att18
18:00:48  23  ,att19 jpy_att19
18:00:48  24  ,att20 jpy_att20
18:00:48  25  ,att21 jpy_att21
18:00:48  26  ,att22 jpy_att22
18:00:48  27  ,att23 jpy_att23
18:00:48  28  ,att24 jpy_att24
18:00:48  29  ,att25 jpy_att25
18:00:48  30  ,att26 jpy_att26
18:00:48  31  ,att27 jpy_att27
18:00:48  32  ,att28 jpy_att28
18:00:48  33  ,att29 jpy_att29
18:00:48  34  ,att30 jpy_att30
18:00:48  35  ,att31 jpy_att31
18:00:48  36  ,att32 jpy_att32
18:00:48  37  ,att33 jpy_att33
18:00:48  38  ,att34 jpy_att34
18:00:48  39  ,att35 jpy_att35
18:00:48  40  ,att36 jpy_att36
18:00:48  41  ,att37 jpy_att37
18:00:48  42  FROM svm6162
18:00:48  43  /

Table created.

Elapsed: 00:00:00.17
18:00:48 SQL> 
18:00:48 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.61
18:00:49 SQL> 
18:00:49 SQL> -- rpt
18:00:49 SQL> SELECT COUNT(*)FROM svm6102;
