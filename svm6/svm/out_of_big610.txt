
SQL*Plus: Release 11.2.0.1.0 Production on Thu Dec 30 00:22:06 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

00:22:06 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
00:22:06 SQL> 00:22:06 SQL> --
00:22:06 SQL> -- eur610.sql
00:22:06 SQL> --
00:22:06 SQL> 
00:22:06 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:22:06 SQL> 
00:22:06 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.02
00:22:06 SQL> 
00:22:06 SQL> -- I created di5min here:
00:22:06 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
00:22:06 SQL> 
00:22:06 SQL> CREATE OR REPLACE VIEW svm6102 AS
00:22:06   2  SELECT
00:22:06   3  pair
00:22:06   4  ,ydate
00:22:06   5  ,prdate
00:22:06   6  ,rownum rnum -- acts as t in my time-series
00:22:06   7  ,clse
00:22:06   8  -- Derive a bunch of attributes from clse, the latest price:
00:22:06   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
00:22:06  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
00:22:06  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
00:22:06  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
00:22:06  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
00:22:06  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
00:22:06  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
00:22:06  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
00:22:06  17  --
00:22:06  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
00:22:06  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
00:22:06  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
00:22:06  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
00:22:06  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
00:22:06  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
00:22:06  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
00:22:06  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
00:22:06  26  --
00:22:06  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
00:22:06  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
00:22:06  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
00:22:06  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
00:22:06  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
00:22:06  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
00:22:06  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
00:22:06  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
00:22:06  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
00:22:06  36  FROM di5min WHERE pair LIKE'%eur%'
00:22:06  37  AND ydate > sysdate - 95
00:22:06  38  ORDER BY ydate
00:22:06  39  /

View created.

Elapsed: 00:00:00.06
00:22:06 SQL> 
00:22:06 SQL> -- rpt
00:22:06 SQL> 
00:22:06 SQL> SELECT
00:22:06   2  pair
00:22:06   3  ,COUNT(pair)
00:22:06   4  ,MIN(clse),MAX(clse)
00:22:06   5  ,MIN(avg6),MAX(avg6)
00:22:06   6  ,MIN(ydate),MAX(ydate)
00:22:06   7  FROM svm6102
00:22:06   8  GROUP BY pair
00:22:06   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19595    1.29735	   1.4273 1.29875103 1.42436233 2010-09-26 20:55:01 2010-12-30 00:15:00

Elapsed: 00:00:00.88
00:22:07 SQL> 
00:22:07 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
00:22:07 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.05
00:22:07 SQL> CREATE TABLE svm6122 COMPRESS AS
00:22:07   2  SELECT
00:22:07   3  pair
00:22:07   4  ,ydate
00:22:07   5  ,prdate
00:22:07   6  ,clse
00:22:07   7  -- g6 is important. I want to predict g6:
00:22:07   8  ,ld6 - clse g6
00:22:07   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
00:22:07  10  -- I want more attributes from the ones I derived above:
00:22:07  11  -- clse relation to moving-min
00:22:07  12  ,clse-min4  cm4
00:22:07  13  ,clse-min6  cm6
00:22:07  14  ,clse-min8  cm8
00:22:07  15  ,clse-min10 cm10
00:22:07  16  ,clse-min12 cm12
00:22:07  17  ,clse-min14 cm14
00:22:07  18  ,clse-min16 cm16
00:22:07  19  ,clse-min18 cm18
00:22:07  20  -- clse relation to moving-avg
00:22:07  21  ,clse-avg4  ca4
00:22:07  22  ,clse-avg6  ca6
00:22:07  23  ,clse-avg8  ca8
00:22:07  24  ,clse-avg10 ca10
00:22:07  25  ,clse-avg12 ca12
00:22:07  26  ,clse-avg14 ca14
00:22:07  27  ,clse-avg16 ca16
00:22:07  28  ,clse-avg18 ca18
00:22:07  29  -- clse relation to moving-max
00:22:07  30  ,clse-max4  cx4
00:22:07  31  ,clse-max6  cx6
00:22:07  32  ,clse-max8  cx8
00:22:07  33  ,clse-max10 cx10
00:22:07  34  ,clse-max12 cx12
00:22:07  35  ,clse-max14 cx14
00:22:07  36  ,clse-max16 cx16
00:22:07  37  ,clse-max18 cx18
00:22:07  38  -- Derive more attributes.
00:22:07  39  -- I want to use CORR() here to help SVM see the shape of the series.
00:22:07  40  -- But COVAR_POP is more stable:
00:22:07  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
00:22:07  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
00:22:07  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
00:22:07  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
00:22:07  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
00:22:07  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
00:22:07  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
00:22:07  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
00:22:07  49  -- Derive date related attributes:
00:22:07  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:22:07  51  ,0+TO_CHAR(ydate,'D')d
00:22:07  52  ,0+TO_CHAR(ydate,'W')w
00:22:07  53  -- mpm stands for minutes-past-midnight:
00:22:07  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:22:07  55  -- mph stands for minutes-past-hour:
00:22:07  56  ,0+TO_CHAR(ydate,'MI')mph
00:22:07  57  FROM svm6102
00:22:07  58  ORDER BY ydate
00:22:07  59  /

Table created.

Elapsed: 00:00:02.37
00:22:10 SQL> 
00:22:10 SQL> -- rpt
00:22:10 SQL> 
00:22:10 SQL> SELECT
00:22:10   2  pair
00:22:10   3  ,COUNT(pair)
00:22:10   4  ,MIN(clse),MAX(clse)
00:22:10   5  ,MIN(ydate),MAX(ydate)
00:22:10   6  FROM svm6122
00:22:10   7  GROUP BY pair
00:22:10   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19595    1.29735	   1.4273 2010-09-26 20:55:01 2010-12-30 00:15:00

Elapsed: 00:00:00.04
00:22:10 SQL> 
00:22:10 SQL> -- Prepare for derivation of NTILE based params:
00:22:10 SQL> 
00:22:10 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.47
00:22:10 SQL> CREATE TABLE svm6142 COMPRESS AS
00:22:10   2  SELECT
00:22:10   3  pair
00:22:10   4  ,ydate
00:22:10   5  ,prdate
00:22:10   6  ,clse
00:22:10   7  ,g6
00:22:10   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
00:22:10   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
00:22:10  10  ,CASE WHEN trend IS NULL THEN 1
00:22:10  11  	    WHEN trend =0      THEN 1
00:22:10  12  	    ELSE trend END trend
00:22:10  13  ,cm4
00:22:10  14  ,cm6
00:22:10  15  ,cm8
00:22:10  16  ,cm10
00:22:10  17  ,cm12
00:22:10  18  ,cm14
00:22:10  19  ,cm16
00:22:10  20  ,cm18
00:22:10  21  --
00:22:10  22  ,ca4
00:22:10  23  ,ca6
00:22:10  24  ,ca8
00:22:10  25  ,ca10
00:22:10  26  ,ca12
00:22:10  27  ,ca14
00:22:10  28  ,ca16
00:22:10  29  ,ca18
00:22:10  30  --
00:22:10  31  ,cx4
00:22:10  32  ,cx6
00:22:10  33  ,cx8
00:22:10  34  ,cx10
00:22:10  35  ,cx12
00:22:10  36  ,cx14
00:22:10  37  ,cx16
00:22:10  38  ,cx18
00:22:10  39  --
00:22:10  40  ,crr4
00:22:10  41  ,crr6
00:22:10  42  ,crr8
00:22:10  43  ,crr10
00:22:10  44  ,crr12
00:22:10  45  ,crr14
00:22:10  46  ,crr16
00:22:10  47  ,crr18
00:22:10  48  --
00:22:10  49  ,hh
00:22:10  50  ,d
00:22:10  51  ,w
00:22:10  52  ,mpm
00:22:10  53  ,mph
00:22:10  54  FROM svm6122
00:22:10  55  ORDER BY ydate
00:22:10  56  /

Table created.

Elapsed: 00:00:00.36
00:22:11 SQL> 
00:22:11 SQL> -- rpt
00:22:11 SQL> 
00:22:11 SQL> SELECT
00:22:11   2  pair
00:22:11   3  ,trend
00:22:11   4  ,gatt
00:22:11   5  ,COUNT(pair)
00:22:11   6  ,AVG(g6)
00:22:11   7  FROM svm6142
00:22:11   8  GROUP BY pair,trend,gatt
00:22:11   9  ORDER BY pair,trend,gatt
00:22:11  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6136  -.0030778
eur_usd 	-1 up	      3726 .004494689
eur_usd 	 1 nup	      5958 -.00314638
eur_usd 	 1 up	      3703 .005152569
eur_usd 	 1		72

Elapsed: 00:00:00.06
00:22:11 SQL> 
00:22:11 SQL> 
00:22:11 SQL> -- Derive NTILE based params:
00:22:11 SQL> 
00:22:11 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.84
00:22:12 SQL> CREATE TABLE svm6162 COMPRESS AS
00:22:12   2  SELECT
00:22:12   3  pair
00:22:12   4  ,ydate
00:22:12   5  ,prdate
00:22:12   6  ,clse
00:22:12   7  ,g6
00:22:12   8  ,gatt
00:22:12   9  ,gattn
00:22:12  10  ,trend
00:22:12  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
00:22:12  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
00:22:12  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
00:22:12  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
00:22:12  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
00:22:12  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
00:22:12  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
00:22:12  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
00:22:12  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
00:22:12  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
00:22:12  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
00:22:12  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
00:22:12  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
00:22:12  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
00:22:12  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
00:22:12  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
00:22:12  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
00:22:12  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
00:22:12  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
00:22:12  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
00:22:12  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
00:22:12  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
00:22:12  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
00:22:12  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
00:22:12  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
00:22:12  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
00:22:12  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
00:22:12  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
00:22:12  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
00:22:12  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
00:22:12  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
00:22:12  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
00:22:12  43  ,hh  att32
00:22:12  44  ,d   att33
00:22:12  45  ,w   att34
00:22:12  46  ,mpm att35
00:22:12  47  ,mph att36
00:22:12  48  ,trend att37
00:22:12  49  FROM svm6142
00:22:12  50  ORDER BY ydate
00:22:12  51  /

Table created.

Elapsed: 00:00:04.73
00:22:16 SQL> 
00:22:16 SQL> -- rpt
00:22:16 SQL> 
00:22:16 SQL> SELECT
00:22:16   2  pair
00:22:16   3  ,trend
00:22:16   4  ,gatt
00:22:16   5  ,COUNT(pair)
00:22:16   6  ,AVG(g6)
00:22:16   7  FROM svm6162
00:22:16   8  GROUP BY pair,trend,gatt
00:22:16   9  ORDER BY pair,trend,gatt
00:22:16  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6136  -.0030778
eur_usd 	-1 up	      3726 .004494689
eur_usd 	 1 nup	      5958 -.00314638
eur_usd 	 1 up	      3703 .005152569
eur_usd 	 1		72

Elapsed: 00:00:00.03
00:22:16 SQL> 
00:22:16 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.23
00:22:17 SQL> CREATE TABLE modsrc COMPRESS AS
00:22:17   2  SELECT
00:22:17   3  pair
00:22:17   4  ,ydate
00:22:17   5  ,prdate
00:22:17   6  ,trend
00:22:17   7  ,g6
00:22:17   8  ,gatt
00:22:17   9  ,gattn
00:22:17  10  FROM svm6162
00:22:17  11  /

Table created.

Elapsed: 00:00:00.11
00:22:17 SQL> 
00:22:17 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
00:22:17 SQL> 
00:22:17 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.07
00:22:17 SQL> CREATE TABLE eur_ms610 COMPRESS AS
00:22:17   2  SELECT
00:22:17   3  ydate
00:22:17   4  ,trend eur_trend
00:22:17   5  ,g6    eur_g6
00:22:17   6  ,gatt  eur_gatt
00:22:17   7  ,gattn eur_gattn
00:22:17   8  FROM modsrc
00:22:17   9  /

Table created.

Elapsed: 00:00:00.06
00:22:17 SQL> 
00:22:17 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
00:22:17 SQL> 
00:22:17 SQL> -- I need a copy of the attributes:
00:22:17 SQL> 
00:22:17 SQL> 
00:22:17 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.21
00:22:17 SQL> CREATE TABLE eur_att COMPRESS AS
00:22:17   2  SELECT
00:22:17   3  ydate
00:22:17   4  ,att00 eur_att00
00:22:17   5  ,att01 eur_att01
00:22:17   6  ,att02 eur_att02
00:22:17   7  ,att03 eur_att03
00:22:17   8  ,att04 eur_att04
00:22:17   9  ,att05 eur_att05
00:22:17  10  ,att06 eur_att06
00:22:17  11  ,att07 eur_att07
00:22:17  12  ,att08 eur_att08
00:22:17  13  ,att09 eur_att09
00:22:17  14  ,att10 eur_att10
00:22:17  15  ,att11 eur_att11
00:22:17  16  ,att12 eur_att12
00:22:17  17  ,att13 eur_att13
00:22:17  18  ,att14 eur_att14
00:22:17  19  ,att15 eur_att15
00:22:17  20  ,att16 eur_att16
00:22:17  21  ,att17 eur_att17
00:22:17  22  ,att18 eur_att18
00:22:17  23  ,att19 eur_att19
00:22:17  24  ,att20 eur_att20
00:22:17  25  ,att21 eur_att21
00:22:17  26  ,att22 eur_att22
00:22:17  27  ,att23 eur_att23
00:22:17  28  ,att24 eur_att24
00:22:17  29  ,att25 eur_att25
00:22:17  30  ,att26 eur_att26
00:22:17  31  ,att27 eur_att27
00:22:17  32  ,att28 eur_att28
00:22:17  33  ,att29 eur_att29
00:22:17  34  ,att30 eur_att30
00:22:17  35  ,att31 eur_att31
00:22:17  36  ,att32 eur_att32
00:22:17  37  ,att33 eur_att33
00:22:17  38  ,att34 eur_att34
00:22:17  39  ,att35 eur_att35
00:22:17  40  ,att36 eur_att36
00:22:17  41  ,att37 eur_att37
00:22:17  42  FROM svm6162
00:22:17  43  /

Table created.

Elapsed: 00:00:00.18
00:22:18 SQL> 
00:22:18 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
00:22:18 SQL> 
00:22:18 SQL> -- rpt
00:22:18 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19595

Elapsed: 00:00:00.88
00:22:19 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19595

Elapsed: 00:00:00.00
00:22:19 SQL> 
00:22:19 SQL> --
00:22:19 SQL> -- aud610.sql
00:22:19 SQL> --
00:22:19 SQL> 
00:22:19 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:22:19 SQL> 
00:22:19 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
00:22:19 SQL> 
00:22:19 SQL> -- I created di5min here:
00:22:19 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
00:22:19 SQL> 
00:22:19 SQL> CREATE OR REPLACE VIEW svm6102 AS
00:22:19   2  SELECT
00:22:19   3  pair
00:22:19   4  ,ydate
00:22:19   5  ,prdate
00:22:19   6  ,rownum rnum -- acts as t in my time-series
00:22:19   7  ,clse
00:22:19   8  -- Derive a bunch of attributes from clse, the latest price:
00:22:19   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
00:22:19  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
00:22:19  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
00:22:19  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
00:22:19  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
00:22:19  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
00:22:19  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
00:22:19  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
00:22:19  17  --
00:22:19  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
00:22:19  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
00:22:19  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
00:22:19  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
00:22:19  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
00:22:19  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
00:22:19  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
00:22:19  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
00:22:19  26  --
00:22:19  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
00:22:19  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
00:22:19  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
00:22:19  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
00:22:19  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
00:22:19  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
00:22:19  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
00:22:19  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
00:22:19  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
00:22:19  36  FROM di5min WHERE pair LIKE'%aud%'
00:22:19  37  AND ydate > sysdate - 95
00:22:19  38  ORDER BY ydate
00:22:19  39  /

View created.

Elapsed: 00:00:00.04
00:22:19 SQL> 
00:22:19 SQL> -- rpt
00:22:19 SQL> 
00:22:19 SQL> SELECT
00:22:19   2  pair
00:22:19   3  ,COUNT(pair)
00:22:19   4  ,MIN(clse),MAX(clse)
00:22:19   5  ,MIN(avg6),MAX(avg6)
00:22:19   6  ,MIN(ydate),MAX(ydate)
00:22:19   7  FROM svm6102
00:22:19   8  GROUP BY pair
00:22:19   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19592	.95405	   1.0183 .957141438 1.01750942 2010-09-26 20:55:01 2010-12-30 00:15:00

Elapsed: 00:00:00.85
00:22:20 SQL> 
00:22:20 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
00:22:20 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.28
00:22:20 SQL> CREATE TABLE svm6122 COMPRESS AS
00:22:20   2  SELECT
00:22:20   3  pair
00:22:20   4  ,ydate
00:22:20   5  ,prdate
00:22:20   6  ,clse
00:22:20   7  -- g6 is important. I want to predict g6:
00:22:20   8  ,ld6 - clse g6
00:22:20   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
00:22:20  10  -- I want more attributes from the ones I derived above:
00:22:20  11  -- clse relation to moving-min
00:22:20  12  ,clse-min4  cm4
00:22:20  13  ,clse-min6  cm6
00:22:20  14  ,clse-min8  cm8
00:22:20  15  ,clse-min10 cm10
00:22:20  16  ,clse-min12 cm12
00:22:20  17  ,clse-min14 cm14
00:22:20  18  ,clse-min16 cm16
00:22:20  19  ,clse-min18 cm18
00:22:20  20  -- clse relation to moving-avg
00:22:20  21  ,clse-avg4  ca4
00:22:20  22  ,clse-avg6  ca6
00:22:20  23  ,clse-avg8  ca8
00:22:20  24  ,clse-avg10 ca10
00:22:20  25  ,clse-avg12 ca12
00:22:20  26  ,clse-avg14 ca14
00:22:20  27  ,clse-avg16 ca16
00:22:20  28  ,clse-avg18 ca18
00:22:20  29  -- clse relation to moving-max
00:22:20  30  ,clse-max4  cx4
00:22:20  31  ,clse-max6  cx6
00:22:20  32  ,clse-max8  cx8
00:22:20  33  ,clse-max10 cx10
00:22:20  34  ,clse-max12 cx12
00:22:20  35  ,clse-max14 cx14
00:22:20  36  ,clse-max16 cx16
00:22:20  37  ,clse-max18 cx18
00:22:20  38  -- Derive more attributes.
00:22:20  39  -- I want to use CORR() here to help SVM see the shape of the series.
00:22:20  40  -- But COVAR_POP is more stable:
00:22:20  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
00:22:20  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
00:22:20  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
00:22:20  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
00:22:20  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
00:22:20  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
00:22:20  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
00:22:20  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
00:22:20  49  -- Derive date related attributes:
00:22:20  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:22:20  51  ,0+TO_CHAR(ydate,'D')d
00:22:20  52  ,0+TO_CHAR(ydate,'W')w
00:22:20  53  -- mpm stands for minutes-past-midnight:
00:22:20  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:22:20  55  -- mph stands for minutes-past-hour:
00:22:20  56  ,0+TO_CHAR(ydate,'MI')mph
00:22:20  57  FROM svm6102
00:22:20  58  ORDER BY ydate
00:22:20  59  /

Table created.

Elapsed: 00:00:02.07
00:22:23 SQL> 
00:22:23 SQL> -- rpt
00:22:23 SQL> 
00:22:23 SQL> SELECT
00:22:23   2  pair
00:22:23   3  ,COUNT(pair)
00:22:23   4  ,MIN(clse),MAX(clse)
00:22:23   5  ,MIN(ydate),MAX(ydate)
00:22:23   6  FROM svm6122
00:22:23   7  GROUP BY pair
00:22:23   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19592	.95405	   1.0183 2010-09-26 20:55:01 2010-12-30 00:15:00

Elapsed: 00:00:00.03
00:22:23 SQL> 
00:22:23 SQL> -- Prepare for derivation of NTILE based params:
00:22:23 SQL> 
00:22:23 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
00:22:23 SQL> CREATE TABLE svm6142 COMPRESS AS
00:22:23   2  SELECT
00:22:23   3  pair
00:22:23   4  ,ydate
00:22:23   5  ,prdate
00:22:23   6  ,clse
00:22:23   7  ,g6
00:22:23   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
00:22:23   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
00:22:23  10  ,CASE WHEN trend IS NULL THEN 1
00:22:23  11  	    WHEN trend =0      THEN 1
00:22:23  12  	    ELSE trend END trend
00:22:23  13  ,cm4
00:22:23  14  ,cm6
00:22:23  15  ,cm8
00:22:23  16  ,cm10
00:22:23  17  ,cm12
00:22:23  18  ,cm14
00:22:23  19  ,cm16
00:22:23  20  ,cm18
00:22:23  21  --
00:22:23  22  ,ca4
00:22:23  23  ,ca6
00:22:23  24  ,ca8
00:22:23  25  ,ca10
00:22:23  26  ,ca12
00:22:23  27  ,ca14
00:22:23  28  ,ca16
00:22:23  29  ,ca18
00:22:23  30  --
00:22:23  31  ,cx4
00:22:23  32  ,cx6
00:22:23  33  ,cx8
00:22:23  34  ,cx10
00:22:23  35  ,cx12
00:22:23  36  ,cx14
00:22:23  37  ,cx16
00:22:23  38  ,cx18
00:22:23  39  --
00:22:23  40  ,crr4
00:22:23  41  ,crr6
00:22:23  42  ,crr8
00:22:23  43  ,crr10
00:22:23  44  ,crr12
00:22:23  45  ,crr14
00:22:23  46  ,crr16
00:22:23  47  ,crr18
00:22:23  48  --
00:22:23  49  ,hh
00:22:23  50  ,d
00:22:23  51  ,w
00:22:23  52  ,mpm
00:22:23  53  ,mph
00:22:23  54  FROM svm6122
00:22:23  55  ORDER BY ydate
00:22:23  56  /

Table created.

Elapsed: 00:00:00.36
00:22:23 SQL> 
00:22:23 SQL> -- rpt
00:22:23 SQL> 
00:22:23 SQL> SELECT
00:22:23   2  pair
00:22:23   3  ,trend
00:22:23   4  ,gatt
00:22:23   5  ,COUNT(pair)
00:22:23   6  ,AVG(g6)
00:22:23   7  FROM svm6142
00:22:23   8  GROUP BY pair,trend,gatt
00:22:23   9  ORDER BY pair,trend,gatt
00:22:23  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5198 -.00212209
aud_usd 	-1 up	      3818 .003727577
aud_usd 	 1 nup	      6736 -.00211534
aud_usd 	 1 up	      3768 .004036936
aud_usd 	 1		72

Elapsed: 00:00:00.04
00:22:23 SQL> 
00:22:23 SQL> 
00:22:23 SQL> -- Derive NTILE based params:
00:22:23 SQL> 
00:22:23 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
00:22:23 SQL> CREATE TABLE svm6162 COMPRESS AS
00:22:23   2  SELECT
00:22:23   3  pair
00:22:23   4  ,ydate
00:22:23   5  ,prdate
00:22:23   6  ,clse
00:22:23   7  ,g6
00:22:23   8  ,gatt
00:22:23   9  ,gattn
00:22:23  10  ,trend
00:22:23  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
00:22:23  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
00:22:23  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
00:22:23  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
00:22:23  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
00:22:23  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
00:22:23  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
00:22:23  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
00:22:23  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
00:22:23  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
00:22:23  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
00:22:23  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
00:22:23  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
00:22:23  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
00:22:23  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
00:22:23  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
00:22:23  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
00:22:23  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
00:22:23  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
00:22:23  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
00:22:23  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
00:22:23  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
00:22:23  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
00:22:23  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
00:22:23  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
00:22:23  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
00:22:23  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
00:22:23  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
00:22:23  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
00:22:23  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
00:22:23  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
00:22:23  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
00:22:23  43  ,hh  att32
00:22:23  44  ,d   att33
00:22:23  45  ,w   att34
00:22:23  46  ,mpm att35
00:22:23  47  ,mph att36
00:22:23  48  ,trend att37
00:22:23  49  FROM svm6142
00:22:23  50  ORDER BY ydate
00:22:23  51  /

Table created.

Elapsed: 00:00:04.65
00:22:28 SQL> 
00:22:28 SQL> -- rpt
00:22:28 SQL> 
00:22:28 SQL> SELECT
00:22:28   2  pair
00:22:28   3  ,trend
00:22:28   4  ,gatt
00:22:28   5  ,COUNT(pair)
00:22:28   6  ,AVG(g6)
00:22:28   7  FROM svm6162
00:22:28   8  GROUP BY pair,trend,gatt
00:22:28   9  ORDER BY pair,trend,gatt
00:22:28  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5198 -.00212209
aud_usd 	-1 up	      3818 .003727577
aud_usd 	 1 nup	      6736 -.00211534
aud_usd 	 1 up	      3768 .004036936
aud_usd 	 1		72

Elapsed: 00:00:00.04
00:22:28 SQL> 
00:22:28 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
00:22:28 SQL> CREATE TABLE modsrc COMPRESS AS
00:22:28   2  SELECT
00:22:28   3  pair
00:22:28   4  ,ydate
00:22:28   5  ,prdate
00:22:28   6  ,trend
00:22:28   7  ,g6
00:22:28   8  ,gatt
00:22:28   9  ,gattn
00:22:28  10  FROM svm6162
00:22:28  11  /

Table created.

Elapsed: 00:00:00.09
00:22:28 SQL> 
00:22:28 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
00:22:28 SQL> 
00:22:28 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.03
00:22:28 SQL> CREATE TABLE aud_ms610 COMPRESS AS
00:22:28   2  SELECT
00:22:28   3  ydate
00:22:28   4  ,trend aud_trend
00:22:28   5  ,g6    aud_g6
00:22:28   6  ,gatt  aud_gatt
00:22:28   7  ,gattn aud_gattn
00:22:28   8  FROM modsrc
00:22:28   9  /

Table created.

Elapsed: 00:00:00.07
00:22:29 SQL> 
00:22:29 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
00:22:29 SQL> 
00:22:29 SQL> -- I need a copy of the attributes:
00:22:29 SQL> 
00:22:29 SQL> 
00:22:29 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.09
00:22:29 SQL> CREATE TABLE aud_att COMPRESS AS
00:22:29   2  SELECT
00:22:29   3  ydate
00:22:29   4  ,att00 aud_att00
00:22:29   5  ,att01 aud_att01
00:22:29   6  ,att02 aud_att02
00:22:29   7  ,att03 aud_att03
00:22:29   8  ,att04 aud_att04
00:22:29   9  ,att05 aud_att05
00:22:29  10  ,att06 aud_att06
00:22:29  11  ,att07 aud_att07
00:22:29  12  ,att08 aud_att08
00:22:29  13  ,att09 aud_att09
00:22:29  14  ,att10 aud_att10
00:22:29  15  ,att11 aud_att11
00:22:29  16  ,att12 aud_att12
00:22:29  17  ,att13 aud_att13
00:22:29  18  ,att14 aud_att14
00:22:29  19  ,att15 aud_att15
00:22:29  20  ,att16 aud_att16
00:22:29  21  ,att17 aud_att17
00:22:29  22  ,att18 aud_att18
00:22:29  23  ,att19 aud_att19
00:22:29  24  ,att20 aud_att20
00:22:29  25  ,att21 aud_att21
00:22:29  26  ,att22 aud_att22
00:22:29  27  ,att23 aud_att23
00:22:29  28  ,att24 aud_att24
00:22:29  29  ,att25 aud_att25
00:22:29  30  ,att26 aud_att26
00:22:29  31  ,att27 aud_att27
00:22:29  32  ,att28 aud_att28
00:22:29  33  ,att29 aud_att29
00:22:29  34  ,att30 aud_att30
00:22:29  35  ,att31 aud_att31
00:22:29  36  ,att32 aud_att32
00:22:29  37  ,att33 aud_att33
00:22:29  38  ,att34 aud_att34
00:22:29  39  ,att35 aud_att35
00:22:29  40  ,att36 aud_att36
00:22:29  41  ,att37 aud_att37
00:22:29  42  FROM svm6162
00:22:29  43  /

Table created.

Elapsed: 00:00:00.17
00:22:29 SQL> 
00:22:29 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.42
00:22:29 SQL> 
00:22:29 SQL> -- rpt
00:22:29 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19592

Elapsed: 00:00:00.82
00:22:30 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19592

Elapsed: 00:00:00.00
00:22:30 SQL> 
00:22:30 SQL> --
00:22:30 SQL> -- gbp610.sql
00:22:30 SQL> --
00:22:30 SQL> 
00:22:30 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:22:30 SQL> 
00:22:30 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
00:22:31 SQL> 
00:22:31 SQL> -- I created di5min here:
00:22:31 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
00:22:31 SQL> 
00:22:31 SQL> CREATE OR REPLACE VIEW svm6102 AS
00:22:31   2  SELECT
00:22:31   3  pair
00:22:31   4  ,ydate
00:22:31   5  ,prdate
00:22:31   6  ,rownum rnum -- acts as t in my time-series
00:22:31   7  ,clse
00:22:31   8  -- Derive a bunch of attributes from clse, the latest price:
00:22:31   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
00:22:31  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
00:22:31  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
00:22:31  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
00:22:31  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
00:22:31  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
00:22:31  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
00:22:31  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
00:22:31  17  --
00:22:31  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
00:22:31  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
00:22:31  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
00:22:31  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
00:22:31  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
00:22:31  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
00:22:31  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
00:22:31  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
00:22:31  26  --
00:22:31  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
00:22:31  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
00:22:31  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
00:22:31  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
00:22:31  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
00:22:31  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
00:22:31  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
00:22:31  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
00:22:31  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
00:22:31  36  FROM di5min WHERE pair LIKE'%gbp%'
00:22:31  37  AND ydate > sysdate - 95
00:22:31  38  ORDER BY ydate
00:22:31  39  /

View created.

Elapsed: 00:00:00.04
00:22:31 SQL> 
00:22:31 SQL> -- rpt
00:22:31 SQL> 
00:22:31 SQL> SELECT
00:22:31   2  pair
00:22:31   3  ,COUNT(pair)
00:22:31   4  ,MIN(clse),MAX(clse)
00:22:31   5  ,MIN(avg6),MAX(avg6)
00:22:31   6  ,MIN(ydate),MAX(ydate)
00:22:31   7  FROM svm6102
00:22:31   8  GROUP BY pair
00:22:31   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19595   1.535325	   1.6295 1.53696747 1.62716986 2010-09-26 20:55:01 2010-12-30 00:15:00

Elapsed: 00:00:00.83
00:22:31 SQL> 
00:22:31 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
00:22:31 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.22
00:22:32 SQL> CREATE TABLE svm6122 COMPRESS AS
00:22:32   2  SELECT
00:22:32   3  pair
00:22:32   4  ,ydate
00:22:32   5  ,prdate
00:22:32   6  ,clse
00:22:32   7  -- g6 is important. I want to predict g6:
00:22:32   8  ,ld6 - clse g6
00:22:32   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
00:22:32  10  -- I want more attributes from the ones I derived above:
00:22:32  11  -- clse relation to moving-min
00:22:32  12  ,clse-min4  cm4
00:22:32  13  ,clse-min6  cm6
00:22:32  14  ,clse-min8  cm8
00:22:32  15  ,clse-min10 cm10
00:22:32  16  ,clse-min12 cm12
00:22:32  17  ,clse-min14 cm14
00:22:32  18  ,clse-min16 cm16
00:22:32  19  ,clse-min18 cm18
00:22:32  20  -- clse relation to moving-avg
00:22:32  21  ,clse-avg4  ca4
00:22:32  22  ,clse-avg6  ca6
00:22:32  23  ,clse-avg8  ca8
00:22:32  24  ,clse-avg10 ca10
00:22:32  25  ,clse-avg12 ca12
00:22:32  26  ,clse-avg14 ca14
00:22:32  27  ,clse-avg16 ca16
00:22:32  28  ,clse-avg18 ca18
00:22:32  29  -- clse relation to moving-max
00:22:32  30  ,clse-max4  cx4
00:22:32  31  ,clse-max6  cx6
00:22:32  32  ,clse-max8  cx8
00:22:32  33  ,clse-max10 cx10
00:22:32  34  ,clse-max12 cx12
00:22:32  35  ,clse-max14 cx14
00:22:32  36  ,clse-max16 cx16
00:22:32  37  ,clse-max18 cx18
00:22:32  38  -- Derive more attributes.
00:22:32  39  -- I want to use CORR() here to help SVM see the shape of the series.
00:22:32  40  -- But COVAR_POP is more stable:
00:22:32  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
00:22:32  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
00:22:32  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
00:22:32  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
00:22:32  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
00:22:32  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
00:22:32  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
00:22:32  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
00:22:32  49  -- Derive date related attributes:
00:22:32  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:22:32  51  ,0+TO_CHAR(ydate,'D')d
00:22:32  52  ,0+TO_CHAR(ydate,'W')w
00:22:32  53  -- mpm stands for minutes-past-midnight:
00:22:32  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:22:32  55  -- mph stands for minutes-past-hour:
00:22:32  56  ,0+TO_CHAR(ydate,'MI')mph
00:22:32  57  FROM svm6102
00:22:32  58  ORDER BY ydate
00:22:32  59  /

Table created.

Elapsed: 00:00:02.02
00:22:34 SQL> 
00:22:34 SQL> -- rpt
00:22:34 SQL> 
00:22:34 SQL> SELECT
00:22:34   2  pair
00:22:34   3  ,COUNT(pair)
00:22:34   4  ,MIN(clse),MAX(clse)
00:22:34   5  ,MIN(ydate),MAX(ydate)
00:22:34   6  FROM svm6122
00:22:34   7  GROUP BY pair
00:22:34   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19595   1.535325	   1.6295 2010-09-26 20:55:01 2010-12-30 00:15:00

Elapsed: 00:00:00.04
00:22:34 SQL> 
00:22:34 SQL> -- Prepare for derivation of NTILE based params:
00:22:34 SQL> 
00:22:34 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.20
00:22:34 SQL> CREATE TABLE svm6142 COMPRESS AS
00:22:34   2  SELECT
00:22:34   3  pair
00:22:34   4  ,ydate
00:22:34   5  ,prdate
00:22:34   6  ,clse
00:22:34   7  ,g6
00:22:34   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
00:22:34   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
00:22:34  10  ,CASE WHEN trend IS NULL THEN 1
00:22:34  11  	    WHEN trend =0      THEN 1
00:22:34  12  	    ELSE trend END trend
00:22:34  13  ,cm4
00:22:34  14  ,cm6
00:22:34  15  ,cm8
00:22:34  16  ,cm10
00:22:34  17  ,cm12
00:22:34  18  ,cm14
00:22:34  19  ,cm16
00:22:34  20  ,cm18
00:22:34  21  --
00:22:34  22  ,ca4
00:22:34  23  ,ca6
00:22:34  24  ,ca8
00:22:34  25  ,ca10
00:22:34  26  ,ca12
00:22:34  27  ,ca14
00:22:34  28  ,ca16
00:22:34  29  ,ca18
00:22:34  30  --
00:22:34  31  ,cx4
00:22:34  32  ,cx6
00:22:34  33  ,cx8
00:22:34  34  ,cx10
00:22:34  35  ,cx12
00:22:34  36  ,cx14
00:22:34  37  ,cx16
00:22:34  38  ,cx18
00:22:34  39  --
00:22:34  40  ,crr4
00:22:34  41  ,crr6
00:22:34  42  ,crr8
00:22:34  43  ,crr10
00:22:34  44  ,crr12
00:22:34  45  ,crr14
00:22:34  46  ,crr16
00:22:34  47  ,crr18
00:22:34  48  --
00:22:34  49  ,hh
00:22:34  50  ,d
00:22:34  51  ,w
00:22:34  52  ,mpm
00:22:34  53  ,mph
00:22:34  54  FROM svm6122
00:22:34  55  ORDER BY ydate
00:22:34  56  /

Table created.

Elapsed: 00:00:00.39
00:22:34 SQL> 
00:22:34 SQL> -- rpt
00:22:34 SQL> 
00:22:34 SQL> SELECT
00:22:34   2  pair
00:22:34   3  ,trend
00:22:34   4  ,gatt
00:22:34   5  ,COUNT(pair)
00:22:34   6  ,AVG(g6)
00:22:34   7  FROM svm6142
00:22:34   8  GROUP BY pair,trend,gatt
00:22:34   9  ORDER BY pair,trend,gatt
00:22:34  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6295 -.00256031
gbp_usd 	-1 up	      3579 .004286117
gbp_usd 	 1 nup	      6206 -.00268133
gbp_usd 	 1 up	      3443 .004387936
gbp_usd 	 1		72

Elapsed: 00:00:00.04
00:22:34 SQL> 
00:22:34 SQL> 
00:22:34 SQL> -- Derive NTILE based params:
00:22:34 SQL> 
00:22:34 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
00:22:34 SQL> CREATE TABLE svm6162 COMPRESS AS
00:22:34   2  SELECT
00:22:34   3  pair
00:22:34   4  ,ydate
00:22:34   5  ,prdate
00:22:34   6  ,clse
00:22:34   7  ,g6
00:22:34   8  ,gatt
00:22:34   9  ,gattn
00:22:34  10  ,trend
00:22:34  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
00:22:34  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
00:22:34  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
00:22:34  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
00:22:34  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
00:22:34  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
00:22:34  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
00:22:34  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
00:22:34  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
00:22:34  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
00:22:34  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
00:22:34  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
00:22:34  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
00:22:34  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
00:22:34  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
00:22:34  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
00:22:34  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
00:22:34  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
00:22:34  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
00:22:34  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
00:22:34  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
00:22:34  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
00:22:35  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
00:22:35  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
00:22:35  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
00:22:35  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
00:22:35  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
00:22:35  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
00:22:35  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
00:22:35  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
00:22:35  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
00:22:35  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
00:22:35  43  ,hh  att32
00:22:35  44  ,d   att33
00:22:35  45  ,w   att34
00:22:35  46  ,mpm att35
00:22:35  47  ,mph att36
00:22:35  48  ,trend att37
00:22:35  49  FROM svm6142
00:22:35  50  ORDER BY ydate
00:22:35  51  /

Table created.

Elapsed: 00:00:04.71
00:22:39 SQL> 
00:22:39 SQL> -- rpt
00:22:39 SQL> 
00:22:39 SQL> SELECT
00:22:39   2  pair
00:22:39   3  ,trend
00:22:39   4  ,gatt
00:22:39   5  ,COUNT(pair)
00:22:39   6  ,AVG(g6)
00:22:39   7  FROM svm6162
00:22:39   8  GROUP BY pair,trend,gatt
00:22:39   9  ORDER BY pair,trend,gatt
00:22:39  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6295 -.00256031
gbp_usd 	-1 up	      3579 .004286117
gbp_usd 	 1 nup	      6206 -.00268133
gbp_usd 	 1 up	      3443 .004387936
gbp_usd 	 1		72

Elapsed: 00:00:00.02
00:22:39 SQL> 
00:22:39 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
00:22:39 SQL> CREATE TABLE modsrc COMPRESS AS
00:22:39   2  SELECT
00:22:39   3  pair
00:22:39   4  ,ydate
00:22:39   5  ,prdate
00:22:39   6  ,trend
00:22:39   7  ,g6
00:22:39   8  ,gatt
00:22:39   9  ,gattn
00:22:39  10  FROM svm6162
00:22:39  11  /

Table created.

Elapsed: 00:00:00.09
00:22:39 SQL> 
00:22:39 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
00:22:40 SQL> 
00:22:40 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
00:22:40 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
00:22:40   2  SELECT
00:22:40   3  ydate
00:22:40   4  ,trend gbp_trend
00:22:40   5  ,g6    gbp_g6
00:22:40   6  ,gatt  gbp_gatt
00:22:40   7  ,gattn gbp_gattn
00:22:40   8  FROM modsrc
00:22:40   9  /

Table created.

Elapsed: 00:00:00.07
00:22:40 SQL> 
00:22:40 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
00:22:40 SQL> 
00:22:40 SQL> -- I need a copy of the attributes:
00:22:40 SQL> 
00:22:40 SQL> 
00:22:40 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.04
00:22:40 SQL> CREATE TABLE gbp_att COMPRESS AS
00:22:40   2  SELECT
00:22:40   3  ydate
00:22:40   4  ,att00 gbp_att00
00:22:40   5  ,att01 gbp_att01
00:22:40   6  ,att02 gbp_att02
00:22:40   7  ,att03 gbp_att03
00:22:40   8  ,att04 gbp_att04
00:22:40   9  ,att05 gbp_att05
00:22:40  10  ,att06 gbp_att06
00:22:40  11  ,att07 gbp_att07
00:22:40  12  ,att08 gbp_att08
00:22:40  13  ,att09 gbp_att09
00:22:40  14  ,att10 gbp_att10
00:22:40  15  ,att11 gbp_att11
00:22:40  16  ,att12 gbp_att12
00:22:40  17  ,att13 gbp_att13
00:22:40  18  ,att14 gbp_att14
00:22:40  19  ,att15 gbp_att15
00:22:40  20  ,att16 gbp_att16
00:22:40  21  ,att17 gbp_att17
00:22:40  22  ,att18 gbp_att18
00:22:40  23  ,att19 gbp_att19
00:22:40  24  ,att20 gbp_att20
00:22:40  25  ,att21 gbp_att21
00:22:40  26  ,att22 gbp_att22
00:22:40  27  ,att23 gbp_att23
00:22:40  28  ,att24 gbp_att24
00:22:40  29  ,att25 gbp_att25
00:22:40  30  ,att26 gbp_att26
00:22:40  31  ,att27 gbp_att27
00:22:40  32  ,att28 gbp_att28
00:22:40  33  ,att29 gbp_att29
00:22:40  34  ,att30 gbp_att30
00:22:40  35  ,att31 gbp_att31
00:22:40  36  ,att32 gbp_att32
00:22:40  37  ,att33 gbp_att33
00:22:40  38  ,att34 gbp_att34
00:22:40  39  ,att35 gbp_att35
00:22:40  40  ,att36 gbp_att36
00:22:40  41  ,att37 gbp_att37
00:22:40  42  FROM svm6162
00:22:40  43  /

Table created.

Elapsed: 00:00:00.18
00:22:40 SQL> 
00:22:40 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
00:22:41 SQL> 
00:22:41 SQL> -- rpt
00:22:41 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19595

Elapsed: 00:00:00.85
00:22:41 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19595

Elapsed: 00:00:00.01
00:22:41 SQL> 
00:22:41 SQL> --
00:22:41 SQL> -- jpy610.sql
00:22:41 SQL> --
00:22:41 SQL> 
00:22:41 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:22:41 SQL> 
00:22:41 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.37
00:22:42 SQL> 
00:22:42 SQL> -- I created di5min here:
00:22:42 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
00:22:42 SQL> 
00:22:42 SQL> CREATE OR REPLACE VIEW svm6102 AS
00:22:42   2  SELECT
00:22:42   3  pair
00:22:42   4  ,ydate
00:22:42   5  ,prdate
00:22:42   6  ,rownum rnum -- acts as t in my time-series
00:22:42   7  ,clse
00:22:42   8  -- Derive a bunch of attributes from clse, the latest price:
00:22:42   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
00:22:42  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
00:22:42  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
00:22:42  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
00:22:42  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
00:22:42  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
00:22:42  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
00:22:42  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
00:22:42  17  --
00:22:42  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
00:22:42  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
00:22:42  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
00:22:42  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
00:22:42  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
00:22:42  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
00:22:42  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
00:22:42  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
00:22:42  26  --
00:22:42  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
00:22:42  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
00:22:42  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
00:22:42  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
00:22:42  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
00:22:42  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
00:22:42  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
00:22:42  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
00:22:42  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
00:22:42  36  FROM di5min WHERE pair LIKE'%jpy%'
00:22:42  37  AND ydate > sysdate - 95
00:22:42  38  ORDER BY ydate
00:22:42  39  /

View created.

Elapsed: 00:00:00.04
00:22:42 SQL> 
00:22:42 SQL> -- rpt
00:22:42 SQL> 
00:22:42 SQL> SELECT
00:22:42   2  pair
00:22:42   3  ,COUNT(pair)
00:22:42   4  ,MIN(clse),MAX(clse)
00:22:42   5  ,MIN(avg6),MAX(avg6)
00:22:42   6  ,MIN(ydate),MAX(ydate)
00:22:42   7  FROM svm6102
00:22:42   8  GROUP BY pair
00:22:42   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19592	 80.25	   84.485 80.3595205 84.3105479 2010-09-26 20:55:01 2010-12-30 00:15:00

Elapsed: 00:00:00.88
00:22:43 SQL> 
00:22:43 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
00:22:43 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.19
00:22:43 SQL> CREATE TABLE svm6122 COMPRESS AS
00:22:43   2  SELECT
00:22:43   3  pair
00:22:43   4  ,ydate
00:22:43   5  ,prdate
00:22:43   6  ,clse
00:22:43   7  -- g6 is important. I want to predict g6:
00:22:43   8  ,ld6 - clse g6
00:22:43   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
00:22:43  10  -- I want more attributes from the ones I derived above:
00:22:43  11  -- clse relation to moving-min
00:22:43  12  ,clse-min4  cm4
00:22:43  13  ,clse-min6  cm6
00:22:43  14  ,clse-min8  cm8
00:22:43  15  ,clse-min10 cm10
00:22:43  16  ,clse-min12 cm12
00:22:43  17  ,clse-min14 cm14
00:22:43  18  ,clse-min16 cm16
00:22:43  19  ,clse-min18 cm18
00:22:43  20  -- clse relation to moving-avg
00:22:43  21  ,clse-avg4  ca4
00:22:43  22  ,clse-avg6  ca6
00:22:43  23  ,clse-avg8  ca8
00:22:43  24  ,clse-avg10 ca10
00:22:43  25  ,clse-avg12 ca12
00:22:43  26  ,clse-avg14 ca14
00:22:43  27  ,clse-avg16 ca16
00:22:43  28  ,clse-avg18 ca18
00:22:43  29  -- clse relation to moving-max
00:22:43  30  ,clse-max4  cx4
00:22:43  31  ,clse-max6  cx6
00:22:43  32  ,clse-max8  cx8
00:22:43  33  ,clse-max10 cx10
00:22:43  34  ,clse-max12 cx12
00:22:43  35  ,clse-max14 cx14
00:22:43  36  ,clse-max16 cx16
00:22:43  37  ,clse-max18 cx18
00:22:43  38  -- Derive more attributes.
00:22:43  39  -- I want to use CORR() here to help SVM see the shape of the series.
00:22:43  40  -- But COVAR_POP is more stable:
00:22:43  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
00:22:43  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
00:22:43  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
00:22:43  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
00:22:43  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
00:22:43  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
00:22:43  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
00:22:43  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
00:22:43  49  -- Derive date related attributes:
00:22:43  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:22:43  51  ,0+TO_CHAR(ydate,'D')d
00:22:43  52  ,0+TO_CHAR(ydate,'W')w
00:22:43  53  -- mpm stands for minutes-past-midnight:
00:22:43  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:22:43  55  -- mph stands for minutes-past-hour:
00:22:43  56  ,0+TO_CHAR(ydate,'MI')mph
00:22:43  57  FROM svm6102
00:22:43  58  ORDER BY ydate
00:22:43  59  /

Table created.

Elapsed: 00:00:02.10
00:22:45 SQL> 
00:22:45 SQL> -- rpt
00:22:45 SQL> 
00:22:45 SQL> SELECT
00:22:45   2  pair
00:22:45   3  ,COUNT(pair)
00:22:45   4  ,MIN(clse),MAX(clse)
00:22:45   5  ,MIN(ydate),MAX(ydate)
00:22:45   6  FROM svm6122
00:22:45   7  GROUP BY pair
00:22:45   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19592	 80.25	   84.485 2010-09-26 20:55:01 2010-12-30 00:15:00

Elapsed: 00:00:00.05
00:22:45 SQL> 
00:22:45 SQL> -- Prepare for derivation of NTILE based params:
00:22:45 SQL> 
00:22:45 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.21
00:22:45 SQL> CREATE TABLE svm6142 COMPRESS AS
00:22:45   2  SELECT
00:22:45   3  pair
00:22:45   4  ,ydate
00:22:45   5  ,prdate
00:22:45   6  ,clse
00:22:45   7  ,g6
00:22:45   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
00:22:45   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
00:22:45  10  ,CASE WHEN trend IS NULL THEN 1
00:22:45  11  	    WHEN trend =0      THEN 1
00:22:45  12  	    ELSE trend END trend
00:22:45  13  ,cm4
00:22:45  14  ,cm6
00:22:45  15  ,cm8
00:22:45  16  ,cm10
00:22:45  17  ,cm12
00:22:45  18  ,cm14
00:22:45  19  ,cm16
00:22:45  20  ,cm18
00:22:45  21  --
00:22:45  22  ,ca4
00:22:45  23  ,ca6
00:22:45  24  ,ca8
00:22:45  25  ,ca10
00:22:45  26  ,ca12
00:22:45  27  ,ca14
00:22:45  28  ,ca16
00:22:45  29  ,ca18
00:22:45  30  --
00:22:45  31  ,cx4
00:22:45  32  ,cx6
00:22:45  33  ,cx8
00:22:45  34  ,cx10
00:22:45  35  ,cx12
00:22:45  36  ,cx14
00:22:45  37  ,cx16
00:22:45  38  ,cx18
00:22:45  39  --
00:22:45  40  ,crr4
00:22:45  41  ,crr6
00:22:45  42  ,crr8
00:22:45  43  ,crr10
00:22:45  44  ,crr12
00:22:45  45  ,crr14
00:22:45  46  ,crr16
00:22:45  47  ,crr18
00:22:45  48  --
00:22:45  49  ,hh
00:22:45  50  ,d
00:22:45  51  ,w
00:22:45  52  ,mpm
00:22:45  53  ,mph
00:22:45  54  FROM svm6122
00:22:45  55  ORDER BY ydate
00:22:45  56  /

Table created.

Elapsed: 00:00:00.34
00:22:46 SQL> 
00:22:46 SQL> -- rpt
00:22:46 SQL> 
00:22:46 SQL> SELECT
00:22:46   2  pair
00:22:46   3  ,trend
00:22:46   4  ,gatt
00:22:46   5  ,COUNT(pair)
00:22:46   6  ,AVG(g6)
00:22:46   7  FROM svm6142
00:22:46   8  GROUP BY pair,trend,gatt
00:22:46   9  ORDER BY pair,trend,gatt
00:22:46  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5292 -.16498426
usd_jpy 	-1 up	      4960 .163122068
usd_jpy 	-1		72
usd_jpy 	 1 nup	      5175 -.15491648
usd_jpy 	 1 up	      4093 .165084061

Elapsed: 00:00:00.04
00:22:46 SQL> 
00:22:46 SQL> 
00:22:46 SQL> -- Derive NTILE based params:
00:22:46 SQL> 
00:22:46 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.20
00:22:46 SQL> CREATE TABLE svm6162 COMPRESS AS
00:22:46   2  SELECT
00:22:46   3  pair
00:22:46   4  ,ydate
00:22:46   5  ,prdate
00:22:46   6  ,clse
00:22:46   7  ,g6
00:22:46   8  ,gatt
00:22:46   9  ,gattn
00:22:46  10  ,trend
00:22:46  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
00:22:46  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
00:22:46  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
00:22:46  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
00:22:46  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
00:22:46  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
00:22:46  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
00:22:46  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
00:22:46  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
00:22:46  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
00:22:46  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
00:22:46  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
00:22:46  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
00:22:46  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
00:22:46  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
00:22:46  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
00:22:46  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
00:22:46  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
00:22:46  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
00:22:46  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
00:22:46  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
00:22:46  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
00:22:46  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
00:22:46  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
00:22:46  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
00:22:46  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
00:22:46  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
00:22:46  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
00:22:46  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
00:22:46  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
00:22:46  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
00:22:46  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
00:22:46  43  ,hh  att32
00:22:46  44  ,d   att33
00:22:46  45  ,w   att34
00:22:46  46  ,mpm att35
00:22:46  47  ,mph att36
00:22:46  48  ,trend att37
00:22:46  49  FROM svm6142
00:22:46  50  ORDER BY ydate
00:22:46  51  /

Table created.

Elapsed: 00:00:04.86
00:22:51 SQL> 
00:22:51 SQL> -- rpt
00:22:51 SQL> 
00:22:51 SQL> SELECT
00:22:51   2  pair
00:22:51   3  ,trend
00:22:51   4  ,gatt
00:22:51   5  ,COUNT(pair)
00:22:51   6  ,AVG(g6)
00:22:51   7  FROM svm6162
00:22:51   8  GROUP BY pair,trend,gatt
00:22:51   9  ORDER BY pair,trend,gatt
00:22:51  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5292 -.16498426
usd_jpy 	-1 up	      4960 .163122068
usd_jpy 	-1		72
usd_jpy 	 1 nup	      5175 -.15491648
usd_jpy 	 1 up	      4093 .165084061

Elapsed: 00:00:00.03
00:22:51 SQL> 
00:22:51 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
00:22:51 SQL> CREATE TABLE modsrc COMPRESS AS
00:22:51   2  SELECT
00:22:51   3  pair
00:22:51   4  ,ydate
00:22:51   5  ,prdate
00:22:51   6  ,trend
00:22:51   7  ,g6
00:22:51   8  ,gatt
00:22:51   9  ,gattn
00:22:51  10  FROM svm6162
00:22:51  11  /

Table created.

Elapsed: 00:00:00.08
00:22:51 SQL> 
00:22:51 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.28
00:22:51 SQL> 
00:22:51 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
00:22:51 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
00:22:51   2  SELECT
00:22:51   3  ydate
00:22:51   4  ,trend jpy_trend
00:22:51   5  ,g6    jpy_g6
00:22:51   6  ,gatt  jpy_gatt
00:22:51   7  ,gattn jpy_gattn
00:22:51   8  FROM modsrc
00:22:51   9  /

Table created.

Elapsed: 00:00:00.06
00:22:51 SQL> 
00:22:51 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.97
00:22:52 SQL> 
00:22:52 SQL> -- I need a copy of the attributes:
00:22:52 SQL> 
00:22:52 SQL> 
00:22:52 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.05
00:22:52 SQL> CREATE TABLE jpy_att COMPRESS AS
00:22:52   2  SELECT
00:22:52   3  ydate
00:22:52   4  ,att00 jpy_att00
00:22:52   5  ,att01 jpy_att01
00:22:52   6  ,att02 jpy_att02
00:22:52   7  ,att03 jpy_att03
00:22:52   8  ,att04 jpy_att04
00:22:52   9  ,att05 jpy_att05
00:22:52  10  ,att06 jpy_att06
00:22:52  11  ,att07 jpy_att07
00:22:52  12  ,att08 jpy_att08
00:22:52  13  ,att09 jpy_att09
00:22:52  14  ,att10 jpy_att10
00:22:52  15  ,att11 jpy_att11
00:22:52  16  ,att12 jpy_att12
00:22:52  17  ,att13 jpy_att13
00:22:52  18  ,att14 jpy_att14
00:22:52  19  ,att15 jpy_att15
00:22:52  20  ,att16 jpy_att16
00:22:52  21  ,att17 jpy_att17
00:22:52  22  ,att18 jpy_att18
00:22:52  23  ,att19 jpy_att19
00:22:52  24  ,att20 jpy_att20
00:22:52  25  ,att21 jpy_att21
00:22:52  26  ,att22 jpy_att22
00:22:52  27  ,att23 jpy_att23
00:22:52  28  ,att24 jpy_att24
00:22:52  29  ,att25 jpy_att25
00:22:52  30  ,att26 jpy_att26
00:22:52  31  ,att27 jpy_att27
00:22:52  32  ,att28 jpy_att28
00:22:52  33  ,att29 jpy_att29
00:22:52  34  ,att30 jpy_att30
00:22:52  35  ,att31 jpy_att31
00:22:52  36  ,att32 jpy_att32
00:22:52  37  ,att33 jpy_att33
00:22:52  38  ,att34 jpy_att34
00:22:52  39  ,att35 jpy_att35
00:22:52  40  ,att36 jpy_att36
00:22:52  41  ,att37 jpy_att37
00:22:52  42  FROM svm6162
00:22:52  43  /

Table created.

Elapsed: 00:00:00.19
00:22:53 SQL> 
00:22:53 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
00:22:53 SQL> 
00:22:53 SQL> -- rpt
00:22:53 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19592

Elapsed: 00:00:00.90
00:22:54 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19592

Elapsed: 00:00:00.00
00:22:54 SQL> 
00:22:54 SQL> --
00:22:54 SQL> -- cad610.sql
00:22:54 SQL> --
00:22:54 SQL> 
00:22:54 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:22:54 SQL> 
00:22:54 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
00:22:54 SQL> 
00:22:54 SQL> -- I created di5min here:
00:22:54 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
00:22:54 SQL> 
00:22:54 SQL> CREATE OR REPLACE VIEW svm6102 AS
00:22:54   2  SELECT
00:22:54   3  pair
00:22:54   4  ,ydate
00:22:54   5  ,prdate
00:22:54   6  ,rownum rnum -- acts as t in my time-series
00:22:54   7  ,clse
00:22:54   8  -- Derive a bunch of attributes from clse, the latest price:
00:22:54   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
00:22:54  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
00:22:54  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
00:22:54  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
00:22:54  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
00:22:54  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
00:22:54  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
00:22:54  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
00:22:54  17  --
00:22:54  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
00:22:54  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
00:22:54  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
00:22:54  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
00:22:54  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
00:22:54  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
00:22:54  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
00:22:54  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
00:22:54  26  --
00:22:54  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
00:22:54  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
00:22:54  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
00:22:54  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
00:22:54  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
00:22:54  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
00:22:54  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
00:22:54  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
00:22:54  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
00:22:54  36  FROM di5min WHERE pair LIKE'%cad%'
00:22:54  37  AND ydate > sysdate - 95
00:22:54  38  ORDER BY ydate
00:22:54  39  /

View created.

Elapsed: 00:00:00.04
00:22:54 SQL> 
00:22:54 SQL> -- rpt
00:22:54 SQL> 
00:22:54 SQL> SELECT
00:22:54   2  pair
00:22:54   3  ,COUNT(pair)
00:22:54   4  ,MIN(clse),MAX(clse)
00:22:54   5  ,MIN(avg6),MAX(avg6)
00:22:54   6  ,MIN(ydate),MAX(ydate)
00:22:54   7  FROM svm6102
00:22:54   8  GROUP BY pair
00:22:54   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19592	.99755	    1.036 .998845205 1.03336849 2010-09-26 20:55:01 2010-12-30 00:15:00

Elapsed: 00:00:00.84
00:22:55 SQL> 
00:22:55 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
00:22:55 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.23
00:22:55 SQL> CREATE TABLE svm6122 COMPRESS AS
00:22:55   2  SELECT
00:22:55   3  pair
00:22:55   4  ,ydate
00:22:55   5  ,prdate
00:22:55   6  ,clse
00:22:55   7  -- g6 is important. I want to predict g6:
00:22:55   8  ,ld6 - clse g6
00:22:55   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
00:22:55  10  -- I want more attributes from the ones I derived above:
00:22:55  11  -- clse relation to moving-min
00:22:55  12  ,clse-min4  cm4
00:22:55  13  ,clse-min6  cm6
00:22:55  14  ,clse-min8  cm8
00:22:55  15  ,clse-min10 cm10
00:22:55  16  ,clse-min12 cm12
00:22:55  17  ,clse-min14 cm14
00:22:55  18  ,clse-min16 cm16
00:22:55  19  ,clse-min18 cm18
00:22:55  20  -- clse relation to moving-avg
00:22:55  21  ,clse-avg4  ca4
00:22:55  22  ,clse-avg6  ca6
00:22:55  23  ,clse-avg8  ca8
00:22:55  24  ,clse-avg10 ca10
00:22:55  25  ,clse-avg12 ca12
00:22:55  26  ,clse-avg14 ca14
00:22:55  27  ,clse-avg16 ca16
00:22:55  28  ,clse-avg18 ca18
00:22:55  29  -- clse relation to moving-max
00:22:55  30  ,clse-max4  cx4
00:22:55  31  ,clse-max6  cx6
00:22:55  32  ,clse-max8  cx8
00:22:55  33  ,clse-max10 cx10
00:22:55  34  ,clse-max12 cx12
00:22:55  35  ,clse-max14 cx14
00:22:55  36  ,clse-max16 cx16
00:22:55  37  ,clse-max18 cx18
00:22:55  38  -- Derive more attributes.
00:22:55  39  -- I want to use CORR() here to help SVM see the shape of the series.
00:22:55  40  -- But COVAR_POP is more stable:
00:22:55  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
00:22:55  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
00:22:55  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
00:22:55  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
00:22:55  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
00:22:55  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
00:22:55  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
00:22:55  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
00:22:55  49  -- Derive date related attributes:
00:22:55  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:22:55  51  ,0+TO_CHAR(ydate,'D')d
00:22:55  52  ,0+TO_CHAR(ydate,'W')w
00:22:55  53  -- mpm stands for minutes-past-midnight:
00:22:55  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:22:55  55  -- mph stands for minutes-past-hour:
00:22:55  56  ,0+TO_CHAR(ydate,'MI')mph
00:22:55  57  FROM svm6102
00:22:55  58  ORDER BY ydate
00:22:55  59  /

Table created.

Elapsed: 00:00:02.04
00:22:58 SQL> 
00:22:58 SQL> -- rpt
00:22:58 SQL> 
00:22:58 SQL> SELECT
00:22:58   2  pair
00:22:58   3  ,COUNT(pair)
00:22:58   4  ,MIN(clse),MAX(clse)
00:22:58   5  ,MIN(ydate),MAX(ydate)
00:22:58   6  FROM svm6122
00:22:58   7  GROUP BY pair
00:22:58   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19592	.99755	    1.036 2010-09-26 20:55:01 2010-12-30 00:15:00

Elapsed: 00:00:00.04
00:22:58 SQL> 
00:22:58 SQL> -- Prepare for derivation of NTILE based params:
00:22:58 SQL> 
00:22:58 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.17
00:22:58 SQL> CREATE TABLE svm6142 COMPRESS AS
00:22:58   2  SELECT
00:22:58   3  pair
00:22:58   4  ,ydate
00:22:58   5  ,prdate
00:22:58   6  ,clse
00:22:58   7  ,g6
00:22:58   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
00:22:58   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
00:22:58  10  ,CASE WHEN trend IS NULL THEN 1
00:22:58  11  	    WHEN trend =0      THEN 1
00:22:58  12  	    ELSE trend END trend
00:22:58  13  ,cm4
00:22:58  14  ,cm6
00:22:58  15  ,cm8
00:22:58  16  ,cm10
00:22:58  17  ,cm12
00:22:58  18  ,cm14
00:22:58  19  ,cm16
00:22:58  20  ,cm18
00:22:58  21  --
00:22:58  22  ,ca4
00:22:58  23  ,ca6
00:22:58  24  ,ca8
00:22:58  25  ,ca10
00:22:58  26  ,ca12
00:22:58  27  ,ca14
00:22:58  28  ,ca16
00:22:58  29  ,ca18
00:22:58  30  --
00:22:58  31  ,cx4
00:22:58  32  ,cx6
00:22:58  33  ,cx8
00:22:58  34  ,cx10
00:22:58  35  ,cx12
00:22:58  36  ,cx14
00:22:58  37  ,cx16
00:22:58  38  ,cx18
00:22:58  39  --
00:22:58  40  ,crr4
00:22:58  41  ,crr6
00:22:58  42  ,crr8
00:22:58  43  ,crr10
00:22:58  44  ,crr12
00:22:58  45  ,crr14
00:22:58  46  ,crr16
00:22:58  47  ,crr18
00:22:58  48  --
00:22:58  49  ,hh
00:22:58  50  ,d
00:22:58  51  ,w
00:22:58  52  ,mpm
00:22:58  53  ,mph
00:22:58  54  FROM svm6122
00:22:58  55  ORDER BY ydate
00:22:58  56  /

Table created.

Elapsed: 00:00:00.35
00:22:58 SQL> 
00:22:58 SQL> -- rpt
00:22:58 SQL> 
00:22:58 SQL> SELECT
00:22:58   2  pair
00:22:58   3  ,trend
00:22:58   4  ,gatt
00:22:58   5  ,COUNT(pair)
00:22:58   6  ,AVG(g6)
00:22:58   7  FROM svm6142
00:22:58   8  GROUP BY pair,trend,gatt
00:22:58   9  ORDER BY pair,trend,gatt
00:22:58  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7183 -.00133291
usd_cad 	-1 up	      3143 .003084935
usd_cad 	-1		41
usd_cad 	 1 nup	      6705 -.00161451
usd_cad 	 1 up	      2489 .003597467
usd_cad 	 1		31

6 rows selected.

Elapsed: 00:00:00.03
00:22:58 SQL> 
00:22:58 SQL> 
00:22:58 SQL> -- Derive NTILE based params:
00:22:58 SQL> 
00:22:58 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.19
00:22:58 SQL> CREATE TABLE svm6162 COMPRESS AS
00:22:58   2  SELECT
00:22:58   3  pair
00:22:58   4  ,ydate
00:22:58   5  ,prdate
00:22:58   6  ,clse
00:22:58   7  ,g6
00:22:58   8  ,gatt
00:22:58   9  ,gattn
00:22:58  10  ,trend
00:22:58  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
00:22:58  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
00:22:58  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
00:22:58  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
00:22:58  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
00:22:58  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
00:22:58  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
00:22:58  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
00:22:58  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
00:22:58  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
00:22:58  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
00:22:58  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
00:22:58  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
00:22:58  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
00:22:58  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
00:22:58  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
00:22:58  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
00:22:58  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
00:22:58  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
00:22:58  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
00:22:58  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
00:22:58  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
00:22:58  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
00:22:58  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
00:22:58  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
00:22:58  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
00:22:58  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
00:22:58  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
00:22:58  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
00:22:58  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
00:22:58  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
00:22:58  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
00:22:58  43  ,hh  att32
00:22:58  44  ,d   att33
00:22:58  45  ,w   att34
00:22:58  46  ,mpm att35
00:22:58  47  ,mph att36
00:22:58  48  ,trend att37
00:22:58  49  FROM svm6142
00:22:58  50  ORDER BY ydate
00:22:58  51  /

Table created.

Elapsed: 00:00:04.75
00:23:03 SQL> 
00:23:03 SQL> -- rpt
00:23:03 SQL> 
00:23:03 SQL> SELECT
00:23:03   2  pair
00:23:03   3  ,trend
00:23:03   4  ,gatt
00:23:03   5  ,COUNT(pair)
00:23:03   6  ,AVG(g6)
00:23:03   7  FROM svm6162
00:23:03   8  GROUP BY pair,trend,gatt
00:23:03   9  ORDER BY pair,trend,gatt
00:23:03  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7183 -.00133291
usd_cad 	-1 up	      3143 .003084935
usd_cad 	-1		41
usd_cad 	 1 nup	      6705 -.00161451
usd_cad 	 1 up	      2489 .003597467
usd_cad 	 1		31

6 rows selected.

Elapsed: 00:00:00.03
00:23:03 SQL> 
00:23:03 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
00:23:03 SQL> CREATE TABLE modsrc COMPRESS AS
00:23:03   2  SELECT
00:23:03   3  pair
00:23:03   4  ,ydate
00:23:03   5  ,prdate
00:23:03   6  ,trend
00:23:03   7  ,g6
00:23:03   8  ,gatt
00:23:03   9  ,gattn
00:23:03  10  FROM svm6162
00:23:03  11  /

Table created.

Elapsed: 00:00:00.08
00:23:03 SQL> 
00:23:03 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
00:23:04 SQL> 
00:23:04 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.03
00:23:04 SQL> CREATE TABLE cad_ms610 COMPRESS AS
00:23:04   2  SELECT
00:23:04   3  ydate
00:23:04   4  ,trend cad_trend
00:23:04   5  ,g6    cad_g6
00:23:04   6  ,gatt  cad_gatt
00:23:04   7  ,gattn cad_gattn
00:23:04   8  FROM modsrc
00:23:04   9  /

Table created.

Elapsed: 00:00:00.07
00:23:04 SQL> 
00:23:04 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
00:23:04 SQL> 
00:23:04 SQL> -- I need a copy of the attributes:
00:23:04 SQL> 
00:23:04 SQL> 
00:23:04 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.05
00:23:04 SQL> CREATE TABLE cad_att COMPRESS AS
00:23:04   2  SELECT
00:23:04   3  ydate
00:23:04   4  ,att00 cad_att00
00:23:04   5  ,att01 cad_att01
00:23:04   6  ,att02 cad_att02
00:23:04   7  ,att03 cad_att03
00:23:04   8  ,att04 cad_att04
00:23:04   9  ,att05 cad_att05
00:23:04  10  ,att06 cad_att06
00:23:04  11  ,att07 cad_att07
00:23:04  12  ,att08 cad_att08
00:23:04  13  ,att09 cad_att09
00:23:04  14  ,att10 cad_att10
00:23:04  15  ,att11 cad_att11
00:23:04  16  ,att12 cad_att12
00:23:04  17  ,att13 cad_att13
00:23:04  18  ,att14 cad_att14
00:23:04  19  ,att15 cad_att15
00:23:04  20  ,att16 cad_att16
00:23:04  21  ,att17 cad_att17
00:23:04  22  ,att18 cad_att18
00:23:04  23  ,att19 cad_att19
00:23:04  24  ,att20 cad_att20
00:23:04  25  ,att21 cad_att21
00:23:04  26  ,att22 cad_att22
00:23:04  27  ,att23 cad_att23
00:23:04  28  ,att24 cad_att24
00:23:04  29  ,att25 cad_att25
00:23:04  30  ,att26 cad_att26
00:23:04  31  ,att27 cad_att27
00:23:04  32  ,att28 cad_att28
00:23:04  33  ,att29 cad_att29
00:23:04  34  ,att30 cad_att30
00:23:04  35  ,att31 cad_att31
00:23:04  36  ,att32 cad_att32
00:23:04  37  ,att33 cad_att33
00:23:04  38  ,att34 cad_att34
00:23:04  39  ,att35 cad_att35
00:23:04  40  ,att36 cad_att36
00:23:04  41  ,att37 cad_att37
00:23:04  42  FROM svm6162
00:23:04  43  /

Table created.

Elapsed: 00:00:00.17
00:23:04 SQL> 
00:23:04 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
00:23:04 SQL> 
00:23:04 SQL> -- rpt
00:23:04 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19592

Elapsed: 00:00:00.82
00:23:05 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19592

Elapsed: 00:00:00.00
00:23:05 SQL> 
00:23:05 SQL> --
00:23:05 SQL> -- chf610.sql
00:23:05 SQL> --
00:23:05 SQL> 
00:23:05 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:23:05 SQL> 
00:23:05 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
00:23:06 SQL> 
00:23:06 SQL> -- I created di5min here:
00:23:06 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
00:23:06 SQL> 
00:23:06 SQL> CREATE OR REPLACE VIEW svm6102 AS
00:23:06   2  SELECT
00:23:06   3  pair
00:23:06   4  ,ydate
00:23:06   5  ,prdate
00:23:06   6  ,rownum rnum -- acts as t in my time-series
00:23:06   7  ,clse
00:23:06   8  -- Derive a bunch of attributes from clse, the latest price:
00:23:06   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
00:23:06  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
00:23:06  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
00:23:06  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
00:23:06  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
00:23:06  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
00:23:06  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
00:23:06  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
00:23:06  17  --
00:23:06  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
00:23:06  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
00:23:06  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
00:23:06  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
00:23:06  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
00:23:06  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
00:23:06  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
00:23:06  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
00:23:06  26  --
00:23:06  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
00:23:06  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
00:23:06  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
00:23:06  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
00:23:06  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
00:23:06  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
00:23:06  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
00:23:06  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
00:23:06  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
00:23:06  36  FROM di5min WHERE pair LIKE'%chf%'
00:23:06  37  AND ydate > sysdate - 95
00:23:06  38  ORDER BY ydate
00:23:06  39  /

View created.

Elapsed: 00:00:00.05
00:23:06 SQL> 
00:23:06 SQL> -- rpt
00:23:06 SQL> 
00:23:06 SQL> SELECT
00:23:06   2  pair
00:23:06   3  ,COUNT(pair)
00:23:06   4  ,MIN(clse),MAX(clse)
00:23:06   5  ,MIN(avg6),MAX(avg6)
00:23:06   6  ,MIN(ydate),MAX(ydate)
00:23:06   7  FROM svm6102
00:23:06   8  GROUP BY pair
00:23:06   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19595	 .9441	  1.00635 .945819007 1.00498151 2010-09-26 20:55:01 2010-12-30 00:15:00

Elapsed: 00:00:00.84
00:23:07 SQL> 
00:23:07 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
00:23:07 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.66
00:23:07 SQL> CREATE TABLE svm6122 COMPRESS AS
00:23:07   2  SELECT
00:23:07   3  pair
00:23:07   4  ,ydate
00:23:07   5  ,prdate
00:23:07   6  ,clse
00:23:07   7  -- g6 is important. I want to predict g6:
00:23:07   8  ,ld6 - clse g6
00:23:07   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
00:23:07  10  -- I want more attributes from the ones I derived above:
00:23:07  11  -- clse relation to moving-min
00:23:07  12  ,clse-min4  cm4
00:23:07  13  ,clse-min6  cm6
00:23:07  14  ,clse-min8  cm8
00:23:07  15  ,clse-min10 cm10
00:23:07  16  ,clse-min12 cm12
00:23:07  17  ,clse-min14 cm14
00:23:07  18  ,clse-min16 cm16
00:23:07  19  ,clse-min18 cm18
00:23:07  20  -- clse relation to moving-avg
00:23:07  21  ,clse-avg4  ca4
00:23:07  22  ,clse-avg6  ca6
00:23:07  23  ,clse-avg8  ca8
00:23:07  24  ,clse-avg10 ca10
00:23:07  25  ,clse-avg12 ca12
00:23:07  26  ,clse-avg14 ca14
00:23:07  27  ,clse-avg16 ca16
00:23:07  28  ,clse-avg18 ca18
00:23:07  29  -- clse relation to moving-max
00:23:07  30  ,clse-max4  cx4
00:23:07  31  ,clse-max6  cx6
00:23:07  32  ,clse-max8  cx8
00:23:07  33  ,clse-max10 cx10
00:23:07  34  ,clse-max12 cx12
00:23:07  35  ,clse-max14 cx14
00:23:07  36  ,clse-max16 cx16
00:23:07  37  ,clse-max18 cx18
00:23:07  38  -- Derive more attributes.
00:23:07  39  -- I want to use CORR() here to help SVM see the shape of the series.
00:23:07  40  -- But COVAR_POP is more stable:
00:23:07  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
00:23:07  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
00:23:07  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
00:23:07  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
00:23:07  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
00:23:07  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
00:23:07  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
00:23:07  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
00:23:07  49  -- Derive date related attributes:
00:23:07  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:23:07  51  ,0+TO_CHAR(ydate,'D')d
00:23:07  52  ,0+TO_CHAR(ydate,'W')w
00:23:07  53  -- mpm stands for minutes-past-midnight:
00:23:07  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:23:07  55  -- mph stands for minutes-past-hour:
00:23:07  56  ,0+TO_CHAR(ydate,'MI')mph
00:23:07  57  FROM svm6102
00:23:07  58  ORDER BY ydate
00:23:07  59  /

Table created.

Elapsed: 00:00:02.06
00:23:09 SQL> 
00:23:09 SQL> -- rpt
00:23:09 SQL> 
00:23:09 SQL> SELECT
00:23:09   2  pair
00:23:09   3  ,COUNT(pair)
00:23:09   4  ,MIN(clse),MAX(clse)
00:23:09   5  ,MIN(ydate),MAX(ydate)
00:23:09   6  FROM svm6122
00:23:09   7  GROUP BY pair
00:23:09   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19595	 .9441	  1.00635 2010-09-26 20:55:01 2010-12-30 00:15:00

Elapsed: 00:00:00.04
00:23:09 SQL> 
00:23:09 SQL> -- Prepare for derivation of NTILE based params:
00:23:09 SQL> 
00:23:09 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.18
00:23:09 SQL> CREATE TABLE svm6142 COMPRESS AS
00:23:09   2  SELECT
00:23:09   3  pair
00:23:09   4  ,ydate
00:23:09   5  ,prdate
00:23:09   6  ,clse
00:23:09   7  ,g6
00:23:09   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
00:23:09   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
00:23:09  10  ,CASE WHEN trend IS NULL THEN 1
00:23:09  11  	    WHEN trend =0      THEN 1
00:23:09  12  	    ELSE trend END trend
00:23:09  13  ,cm4
00:23:09  14  ,cm6
00:23:09  15  ,cm8
00:23:09  16  ,cm10
00:23:09  17  ,cm12
00:23:09  18  ,cm14
00:23:09  19  ,cm16
00:23:09  20  ,cm18
00:23:09  21  --
00:23:09  22  ,ca4
00:23:09  23  ,ca6
00:23:09  24  ,ca8
00:23:09  25  ,ca10
00:23:09  26  ,ca12
00:23:09  27  ,ca14
00:23:09  28  ,ca16
00:23:09  29  ,ca18
00:23:09  30  --
00:23:09  31  ,cx4
00:23:09  32  ,cx6
00:23:09  33  ,cx8
00:23:09  34  ,cx10
00:23:09  35  ,cx12
00:23:09  36  ,cx14
00:23:09  37  ,cx16
00:23:09  38  ,cx18
00:23:09  39  --
00:23:09  40  ,crr4
00:23:09  41  ,crr6
00:23:09  42  ,crr8
00:23:09  43  ,crr10
00:23:09  44  ,crr12
00:23:09  45  ,crr14
00:23:09  46  ,crr16
00:23:09  47  ,crr18
00:23:09  48  --
00:23:09  49  ,hh
00:23:09  50  ,d
00:23:09  51  ,w
00:23:09  52  ,mpm
00:23:09  53  ,mph
00:23:09  54  FROM svm6122
00:23:09  55  ORDER BY ydate
00:23:09  56  /

Table created.

Elapsed: 00:00:00.36
00:23:10 SQL> 
00:23:10 SQL> -- rpt
00:23:10 SQL> 
00:23:10 SQL> SELECT
00:23:10   2  pair
00:23:10   3  ,trend
00:23:10   4  ,gatt
00:23:10   5  ,COUNT(pair)
00:23:10   6  ,AVG(g6)
00:23:10   7  FROM svm6142
00:23:10   8  GROUP BY pair,trend,gatt
00:23:10   9  ORDER BY pair,trend,gatt
00:23:10  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7033 -.00195034
usd_chf 	-1 up	      3177 .003894688
usd_chf 	-1		72
usd_chf 	 1 nup	      6747 -.00161787
usd_chf 	 1 up	      2566 .003688786

Elapsed: 00:00:00.04
00:23:10 SQL> 
00:23:10 SQL> 
00:23:10 SQL> -- Derive NTILE based params:
00:23:10 SQL> 
00:23:10 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
00:23:10 SQL> CREATE TABLE svm6162 COMPRESS AS
00:23:10   2  SELECT
00:23:10   3  pair
00:23:10   4  ,ydate
00:23:10   5  ,prdate
00:23:10   6  ,clse
00:23:10   7  ,g6
00:23:10   8  ,gatt
00:23:10   9  ,gattn
00:23:10  10  ,trend
00:23:10  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
00:23:10  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
00:23:10  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
00:23:10  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
00:23:10  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
00:23:10  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
00:23:10  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
00:23:10  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
00:23:10  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
00:23:10  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
00:23:10  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
00:23:10  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
00:23:10  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
00:23:10  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
00:23:10  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
00:23:10  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
00:23:10  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
00:23:10  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
00:23:10  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
00:23:10  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
00:23:10  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
00:23:10  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
00:23:10  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
00:23:10  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
00:23:10  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
00:23:10  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
00:23:10  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
00:23:10  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
00:23:10  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
00:23:10  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
00:23:10  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
00:23:10  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
00:23:10  43  ,hh  att32
00:23:10  44  ,d   att33
00:23:10  45  ,w   att34
00:23:10  46  ,mpm att35
00:23:10  47  ,mph att36
00:23:10  48  ,trend att37
00:23:10  49  FROM svm6142
00:23:10  50  ORDER BY ydate
00:23:10  51  /

Table created.

Elapsed: 00:00:04.71
00:23:15 SQL> 
00:23:15 SQL> -- rpt
00:23:15 SQL> 
00:23:15 SQL> SELECT
00:23:15   2  pair
00:23:15   3  ,trend
00:23:15   4  ,gatt
00:23:15   5  ,COUNT(pair)
00:23:15   6  ,AVG(g6)
00:23:15   7  FROM svm6162
00:23:15   8  GROUP BY pair,trend,gatt
00:23:15   9  ORDER BY pair,trend,gatt
00:23:15  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7033 -.00195034
usd_chf 	-1 up	      3177 .003894688
usd_chf 	-1		72
usd_chf 	 1 nup	      6747 -.00161787
usd_chf 	 1 up	      2566 .003688786

Elapsed: 00:00:00.03
00:23:15 SQL> 
00:23:15 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.21
00:23:15 SQL> CREATE TABLE modsrc COMPRESS AS
00:23:15   2  SELECT
00:23:15   3  pair
00:23:15   4  ,ydate
00:23:15   5  ,prdate
00:23:15   6  ,trend
00:23:15   7  ,g6
00:23:15   8  ,gatt
00:23:15   9  ,gattn
00:23:15  10  FROM svm6162
00:23:15  11  /

Table created.

Elapsed: 00:00:00.08
00:23:15 SQL> 
00:23:15 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
00:23:15 SQL> 
00:23:15 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
00:23:15 SQL> CREATE TABLE chf_ms610 COMPRESS AS
00:23:15   2  SELECT
00:23:15   3  ydate
00:23:15   4  ,trend chf_trend
00:23:15   5  ,g6    chf_g6
00:23:15   6  ,gatt  chf_gatt
00:23:15   7  ,gattn chf_gattn
00:23:15   8  FROM modsrc
00:23:15   9  /

Table created.

Elapsed: 00:00:00.07
00:23:15 SQL> 
00:23:15 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.14
00:23:15 SQL> 
00:23:15 SQL> -- I need a copy of the attributes:
00:23:15 SQL> 
00:23:15 SQL> 
00:23:15 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.04
00:23:15 SQL> CREATE TABLE chf_att COMPRESS AS
00:23:15   2  SELECT
00:23:15   3  ydate
00:23:15   4  ,att00 chf_att00
00:23:15   5  ,att01 chf_att01
00:23:15   6  ,att02 chf_att02
00:23:15   7  ,att03 chf_att03
00:23:15   8  ,att04 chf_att04
00:23:15   9  ,att05 chf_att05
00:23:15  10  ,att06 chf_att06
00:23:15  11  ,att07 chf_att07
00:23:15  12  ,att08 chf_att08
00:23:15  13  ,att09 chf_att09
00:23:15  14  ,att10 chf_att10
00:23:15  15  ,att11 chf_att11
00:23:15  16  ,att12 chf_att12
00:23:15  17  ,att13 chf_att13
00:23:15  18  ,att14 chf_att14
00:23:15  19  ,att15 chf_att15
00:23:15  20  ,att16 chf_att16
00:23:15  21  ,att17 chf_att17
00:23:15  22  ,att18 chf_att18
00:23:15  23  ,att19 chf_att19
00:23:15  24  ,att20 chf_att20
00:23:15  25  ,att21 chf_att21
00:23:15  26  ,att22 chf_att22
00:23:15  27  ,att23 chf_att23
00:23:15  28  ,att24 chf_att24
00:23:15  29  ,att25 chf_att25
00:23:15  30  ,att26 chf_att26
00:23:15  31  ,att27 chf_att27
00:23:15  32  ,att28 chf_att28
00:23:15  33  ,att29 chf_att29
00:23:15  34  ,att30 chf_att30
00:23:15  35  ,att31 chf_att31
00:23:15  36  ,att32 chf_att32
00:23:15  37  ,att33 chf_att33
00:23:15  38  ,att34 chf_att34
00:23:15  39  ,att35 chf_att35
00:23:15  40  ,att36 chf_att36
00:23:15  41  ,att37 chf_att37
00:23:15  42  FROM svm6162
00:23:15  43  /

Table created.

Elapsed: 00:00:00.17
00:23:16 SQL> 
00:23:16 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
00:23:16 SQL> 
00:23:16 SQL> -- rpt
00:23:16 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19595

Elapsed: 00:00:00.82
00:23:17 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19595

Elapsed: 00:00:00.01
00:23:17 SQL> 
00:23:17 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
