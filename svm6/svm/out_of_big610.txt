
SQL*Plus: Release 11.2.0.1.0 Production on Thu Dec 30 12:38:11 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

12:38:11 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
12:38:11 SQL> 12:38:11 SQL> --
12:38:11 SQL> -- eur610.sql
12:38:11 SQL> --
12:38:11 SQL> 
12:38:11 SQL> -- Creates views and tables for backtesting a forex SVM strategy
12:38:11 SQL> 
12:38:11 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.03
12:38:11 SQL> 
12:38:11 SQL> -- I created di5min here:
12:38:11 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
12:38:11 SQL> 
12:38:11 SQL> CREATE OR REPLACE VIEW svm6102 AS
12:38:11   2  SELECT
12:38:11   3  pair
12:38:11   4  ,ydate
12:38:11   5  ,prdate
12:38:11   6  ,rownum rnum -- acts as t in my time-series
12:38:11   7  ,clse
12:38:11   8  -- Derive a bunch of attributes from clse, the latest price:
12:38:11   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
12:38:11  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
12:38:11  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
12:38:11  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
12:38:11  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
12:38:11  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
12:38:11  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
12:38:11  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
12:38:11  17  --
12:38:11  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
12:38:11  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
12:38:11  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
12:38:11  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
12:38:11  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
12:38:11  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
12:38:11  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
12:38:11  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
12:38:11  26  --
12:38:11  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
12:38:11  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
12:38:11  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
12:38:11  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
12:38:11  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
12:38:11  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
12:38:11  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
12:38:11  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
12:38:11  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
12:38:11  36  FROM di5min WHERE pair LIKE'%eur%'
12:38:11  37  AND ydate > sysdate - 95
12:38:11  38  ORDER BY ydate
12:38:11  39  /

View created.

Elapsed: 00:00:00.05
12:38:11 SQL> 
12:38:11 SQL> -- rpt
12:38:11 SQL> 
12:38:11 SQL> SELECT
12:38:11   2  pair
12:38:11   3  ,COUNT(pair)
12:38:11   4  ,MIN(clse),MAX(clse)
12:38:11   5  ,MIN(avg6),MAX(avg6)
12:38:11   6  ,MIN(ydate),MAX(ydate)
12:38:11   7  FROM svm6102
12:38:11   8  GROUP BY pair
12:38:11   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19742    1.29735	   1.4273 1.29875103 1.42436233 2010-09-26 20:55:01 2010-12-30 12:30:00

Elapsed: 00:00:00.92
12:38:12 SQL> 
12:38:12 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
12:38:12 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.40
12:38:13 SQL> CREATE TABLE svm6122 COMPRESS AS
12:38:13   2  SELECT
12:38:13   3  pair
12:38:13   4  ,ydate
12:38:13   5  ,prdate
12:38:13   6  ,clse
12:38:13   7  -- g6 is important. I want to predict g6:
12:38:13   8  ,ld6 - clse g6
12:38:13   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
12:38:13  10  -- I want more attributes from the ones I derived above:
12:38:13  11  -- clse relation to moving-min
12:38:13  12  ,clse-min4  cm4
12:38:13  13  ,clse-min6  cm6
12:38:13  14  ,clse-min8  cm8
12:38:13  15  ,clse-min10 cm10
12:38:13  16  ,clse-min12 cm12
12:38:13  17  ,clse-min14 cm14
12:38:13  18  ,clse-min16 cm16
12:38:13  19  ,clse-min18 cm18
12:38:13  20  -- clse relation to moving-avg
12:38:13  21  ,clse-avg4  ca4
12:38:13  22  ,clse-avg6  ca6
12:38:13  23  ,clse-avg8  ca8
12:38:13  24  ,clse-avg10 ca10
12:38:13  25  ,clse-avg12 ca12
12:38:13  26  ,clse-avg14 ca14
12:38:13  27  ,clse-avg16 ca16
12:38:13  28  ,clse-avg18 ca18
12:38:13  29  -- clse relation to moving-max
12:38:13  30  ,clse-max4  cx4
12:38:13  31  ,clse-max6  cx6
12:38:13  32  ,clse-max8  cx8
12:38:13  33  ,clse-max10 cx10
12:38:13  34  ,clse-max12 cx12
12:38:13  35  ,clse-max14 cx14
12:38:13  36  ,clse-max16 cx16
12:38:13  37  ,clse-max18 cx18
12:38:13  38  -- Derive more attributes.
12:38:13  39  -- I want to use CORR() here to help SVM see the shape of the series.
12:38:13  40  -- But COVAR_POP is more stable:
12:38:13  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
12:38:13  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
12:38:13  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
12:38:13  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
12:38:13  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
12:38:13  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
12:38:13  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
12:38:13  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
12:38:13  49  -- Derive date related attributes:
12:38:13  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
12:38:13  51  ,0+TO_CHAR(ydate,'D')d
12:38:13  52  ,0+TO_CHAR(ydate,'W')w
12:38:13  53  -- mpm stands for minutes-past-midnight:
12:38:13  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
12:38:13  55  -- mph stands for minutes-past-hour:
12:38:13  56  ,0+TO_CHAR(ydate,'MI')mph
12:38:13  57  FROM svm6102
12:38:13  58  ORDER BY ydate
12:38:13  59  /

Table created.

Elapsed: 00:00:02.34
12:38:15 SQL> 
12:38:15 SQL> -- rpt
12:38:15 SQL> 
12:38:15 SQL> SELECT
12:38:15   2  pair
12:38:15   3  ,COUNT(pair)
12:38:15   4  ,MIN(clse),MAX(clse)
12:38:15   5  ,MIN(ydate),MAX(ydate)
12:38:15   6  FROM svm6122
12:38:15   7  GROUP BY pair
12:38:15   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19742    1.29735	   1.4273 2010-09-26 20:55:01 2010-12-30 12:30:00

Elapsed: 00:00:00.05
12:38:15 SQL> 
12:38:15 SQL> -- Prepare for derivation of NTILE based params:
12:38:15 SQL> 
12:38:15 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.96
12:38:16 SQL> CREATE TABLE svm6142 COMPRESS AS
12:38:16   2  SELECT
12:38:16   3  pair
12:38:16   4  ,ydate
12:38:16   5  ,prdate
12:38:16   6  ,clse
12:38:16   7  ,g6
12:38:16   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
12:38:16   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
12:38:16  10  ,CASE WHEN trend IS NULL THEN 1
12:38:16  11  	    WHEN trend =0      THEN 1
12:38:16  12  	    ELSE trend END trend
12:38:16  13  ,cm4
12:38:16  14  ,cm6
12:38:16  15  ,cm8
12:38:16  16  ,cm10
12:38:16  17  ,cm12
12:38:16  18  ,cm14
12:38:16  19  ,cm16
12:38:16  20  ,cm18
12:38:16  21  --
12:38:16  22  ,ca4
12:38:16  23  ,ca6
12:38:16  24  ,ca8
12:38:16  25  ,ca10
12:38:16  26  ,ca12
12:38:16  27  ,ca14
12:38:16  28  ,ca16
12:38:16  29  ,ca18
12:38:16  30  --
12:38:16  31  ,cx4
12:38:16  32  ,cx6
12:38:16  33  ,cx8
12:38:16  34  ,cx10
12:38:16  35  ,cx12
12:38:16  36  ,cx14
12:38:16  37  ,cx16
12:38:16  38  ,cx18
12:38:16  39  --
12:38:16  40  ,crr4
12:38:16  41  ,crr6
12:38:16  42  ,crr8
12:38:16  43  ,crr10
12:38:16  44  ,crr12
12:38:16  45  ,crr14
12:38:16  46  ,crr16
12:38:16  47  ,crr18
12:38:16  48  --
12:38:16  49  ,hh
12:38:16  50  ,d
12:38:16  51  ,w
12:38:16  52  ,mpm
12:38:16  53  ,mph
12:38:16  54  FROM svm6122
12:38:16  55  ORDER BY ydate
12:38:16  56  /

Table created.

Elapsed: 00:00:00.37
12:38:16 SQL> 
12:38:16 SQL> -- rpt
12:38:16 SQL> 
12:38:16 SQL> SELECT
12:38:16   2  pair
12:38:16   3  ,trend
12:38:16   4  ,gatt
12:38:16   5  ,COUNT(pair)
12:38:16   6  ,AVG(g6)
12:38:16   7  FROM svm6142
12:38:16   8  GROUP BY pair,trend,gatt
12:38:16   9  ORDER BY pair,trend,gatt
12:38:16  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6137 -.00307718
eur_usd 	-1 up	      3733 .004489134
eur_usd 	-1		20
eur_usd 	 1 nup	      6028 -.00310899
eur_usd 	 1 up	      3772  .00509464
eur_usd 	 1		52

6 rows selected.

Elapsed: 00:00:00.05
12:38:16 SQL> 
12:38:16 SQL> 
12:38:16 SQL> -- Derive NTILE based params:
12:38:16 SQL> 
12:38:16 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.89
12:38:17 SQL> CREATE TABLE svm6162 COMPRESS AS
12:38:17   2  SELECT
12:38:17   3  pair
12:38:17   4  ,ydate
12:38:17   5  ,prdate
12:38:17   6  ,clse
12:38:17   7  ,g6
12:38:17   8  ,gatt
12:38:17   9  ,gattn
12:38:17  10  ,trend
12:38:17  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
12:38:17  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
12:38:17  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
12:38:17  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
12:38:17  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
12:38:17  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
12:38:17  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
12:38:17  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
12:38:17  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
12:38:17  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
12:38:17  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
12:38:17  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
12:38:17  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
12:38:17  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
12:38:17  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
12:38:17  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
12:38:17  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
12:38:17  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
12:38:17  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
12:38:17  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
12:38:17  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
12:38:17  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
12:38:17  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
12:38:17  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
12:38:17  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
12:38:17  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
12:38:17  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
12:38:17  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
12:38:17  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
12:38:17  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
12:38:17  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
12:38:17  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
12:38:17  43  ,hh  att32
12:38:17  44  ,d   att33
12:38:17  45  ,w   att34
12:38:17  46  ,mpm att35
12:38:17  47  ,mph att36
12:38:17  48  ,trend att37
12:38:17  49  FROM svm6142
12:38:17  50  ORDER BY ydate
12:38:17  51  /

Table created.

Elapsed: 00:00:04.82
12:38:22 SQL> 
12:38:22 SQL> -- rpt
12:38:22 SQL> 
12:38:22 SQL> SELECT
12:38:22   2  pair
12:38:22   3  ,trend
12:38:22   4  ,gatt
12:38:22   5  ,COUNT(pair)
12:38:22   6  ,AVG(g6)
12:38:22   7  FROM svm6162
12:38:22   8  GROUP BY pair,trend,gatt
12:38:22   9  ORDER BY pair,trend,gatt
12:38:22  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6137 -.00307718
eur_usd 	-1 up	      3733 .004489134
eur_usd 	-1		20
eur_usd 	 1 nup	      6028 -.00310899
eur_usd 	 1 up	      3772  .00509464
eur_usd 	 1		52

6 rows selected.

Elapsed: 00:00:00.03
12:38:22 SQL> 
12:38:22 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.22
12:38:22 SQL> CREATE TABLE modsrc COMPRESS AS
12:38:22   2  SELECT
12:38:22   3  pair
12:38:22   4  ,ydate
12:38:22   5  ,prdate
12:38:22   6  ,trend
12:38:22   7  ,g6
12:38:22   8  ,gatt
12:38:22   9  ,gattn
12:38:22  10  FROM svm6162
12:38:22  11  /

Table created.

Elapsed: 00:00:00.08
12:38:22 SQL> 
12:38:22 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
12:38:23 SQL> 
12:38:23 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.15
12:38:23 SQL> CREATE TABLE eur_ms610 COMPRESS AS
12:38:23   2  SELECT
12:38:23   3  ydate
12:38:23   4  ,trend eur_trend
12:38:23   5  ,g6    eur_g6
12:38:23   6  ,gatt  eur_gatt
12:38:23   7  ,gattn eur_gattn
12:38:23   8  FROM modsrc
12:38:23   9  /

Table created.

Elapsed: 00:00:00.07
12:38:23 SQL> 
12:38:23 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
12:38:23 SQL> 
12:38:23 SQL> -- I need a copy of the attributes:
12:38:23 SQL> 
12:38:23 SQL> 
12:38:23 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.04
12:38:23 SQL> CREATE TABLE eur_att COMPRESS AS
12:38:23   2  SELECT
12:38:23   3  ydate
12:38:23   4  ,att00 eur_att00
12:38:23   5  ,att01 eur_att01
12:38:23   6  ,att02 eur_att02
12:38:23   7  ,att03 eur_att03
12:38:23   8  ,att04 eur_att04
12:38:23   9  ,att05 eur_att05
12:38:23  10  ,att06 eur_att06
12:38:23  11  ,att07 eur_att07
12:38:23  12  ,att08 eur_att08
12:38:23  13  ,att09 eur_att09
12:38:23  14  ,att10 eur_att10
12:38:23  15  ,att11 eur_att11
12:38:23  16  ,att12 eur_att12
12:38:23  17  ,att13 eur_att13
12:38:23  18  ,att14 eur_att14
12:38:23  19  ,att15 eur_att15
12:38:23  20  ,att16 eur_att16
12:38:23  21  ,att17 eur_att17
12:38:23  22  ,att18 eur_att18
12:38:23  23  ,att19 eur_att19
12:38:23  24  ,att20 eur_att20
12:38:23  25  ,att21 eur_att21
12:38:23  26  ,att22 eur_att22
12:38:23  27  ,att23 eur_att23
12:38:23  28  ,att24 eur_att24
12:38:23  29  ,att25 eur_att25
12:38:23  30  ,att26 eur_att26
12:38:23  31  ,att27 eur_att27
12:38:23  32  ,att28 eur_att28
12:38:23  33  ,att29 eur_att29
12:38:23  34  ,att30 eur_att30
12:38:23  35  ,att31 eur_att31
12:38:23  36  ,att32 eur_att32
12:38:23  37  ,att33 eur_att33
12:38:23  38  ,att34 eur_att34
12:38:23  39  ,att35 eur_att35
12:38:23  40  ,att36 eur_att36
12:38:23  41  ,att37 eur_att37
12:38:23  42  FROM svm6162
12:38:23  43  /

Table created.

Elapsed: 00:00:00.18
12:38:23 SQL> 
12:38:23 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
12:38:24 SQL> 
12:38:24 SQL> -- rpt
12:38:24 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19742

Elapsed: 00:00:00.90
12:38:25 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19742

Elapsed: 00:00:00.01
12:38:25 SQL> 
12:38:25 SQL> --
12:38:25 SQL> -- aud610.sql
12:38:25 SQL> --
12:38:25 SQL> 
12:38:25 SQL> -- Creates views and tables for backtesting a forex SVM strategy
12:38:25 SQL> 
12:38:25 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.50
12:38:25 SQL> 
12:38:25 SQL> -- I created di5min here:
12:38:25 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
12:38:25 SQL> 
12:38:25 SQL> CREATE OR REPLACE VIEW svm6102 AS
12:38:25   2  SELECT
12:38:25   3  pair
12:38:25   4  ,ydate
12:38:25   5  ,prdate
12:38:25   6  ,rownum rnum -- acts as t in my time-series
12:38:25   7  ,clse
12:38:25   8  -- Derive a bunch of attributes from clse, the latest price:
12:38:25   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
12:38:25  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
12:38:25  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
12:38:25  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
12:38:25  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
12:38:25  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
12:38:25  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
12:38:25  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
12:38:25  17  --
12:38:25  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
12:38:25  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
12:38:25  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
12:38:25  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
12:38:25  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
12:38:25  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
12:38:25  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
12:38:25  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
12:38:25  26  --
12:38:25  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
12:38:25  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
12:38:25  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
12:38:25  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
12:38:25  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
12:38:25  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
12:38:25  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
12:38:25  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
12:38:25  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
12:38:25  36  FROM di5min WHERE pair LIKE'%aud%'
12:38:25  37  AND ydate > sysdate - 95
12:38:25  38  ORDER BY ydate
12:38:25  39  /

View created.

Elapsed: 00:00:00.05
12:38:25 SQL> 
12:38:25 SQL> -- rpt
12:38:25 SQL> 
12:38:25 SQL> SELECT
12:38:25   2  pair
12:38:25   3  ,COUNT(pair)
12:38:25   4  ,MIN(clse),MAX(clse)
12:38:25   5  ,MIN(avg6),MAX(avg6)
12:38:25   6  ,MIN(ydate),MAX(ydate)
12:38:25   7  FROM svm6102
12:38:25   8  GROUP BY pair
12:38:25   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19739	.95405	1.0195625 .957141438 1.01819366 2010-09-26 20:55:01 2010-12-30 12:30:00

Elapsed: 00:00:00.89
12:38:26 SQL> 
12:38:26 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
12:38:26 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.21
12:38:26 SQL> CREATE TABLE svm6122 COMPRESS AS
12:38:26   2  SELECT
12:38:26   3  pair
12:38:26   4  ,ydate
12:38:26   5  ,prdate
12:38:26   6  ,clse
12:38:26   7  -- g6 is important. I want to predict g6:
12:38:26   8  ,ld6 - clse g6
12:38:26   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
12:38:26  10  -- I want more attributes from the ones I derived above:
12:38:26  11  -- clse relation to moving-min
12:38:26  12  ,clse-min4  cm4
12:38:26  13  ,clse-min6  cm6
12:38:26  14  ,clse-min8  cm8
12:38:26  15  ,clse-min10 cm10
12:38:26  16  ,clse-min12 cm12
12:38:26  17  ,clse-min14 cm14
12:38:26  18  ,clse-min16 cm16
12:38:26  19  ,clse-min18 cm18
12:38:26  20  -- clse relation to moving-avg
12:38:26  21  ,clse-avg4  ca4
12:38:26  22  ,clse-avg6  ca6
12:38:26  23  ,clse-avg8  ca8
12:38:26  24  ,clse-avg10 ca10
12:38:26  25  ,clse-avg12 ca12
12:38:26  26  ,clse-avg14 ca14
12:38:26  27  ,clse-avg16 ca16
12:38:26  28  ,clse-avg18 ca18
12:38:26  29  -- clse relation to moving-max
12:38:26  30  ,clse-max4  cx4
12:38:26  31  ,clse-max6  cx6
12:38:26  32  ,clse-max8  cx8
12:38:26  33  ,clse-max10 cx10
12:38:26  34  ,clse-max12 cx12
12:38:26  35  ,clse-max14 cx14
12:38:26  36  ,clse-max16 cx16
12:38:26  37  ,clse-max18 cx18
12:38:26  38  -- Derive more attributes.
12:38:26  39  -- I want to use CORR() here to help SVM see the shape of the series.
12:38:26  40  -- But COVAR_POP is more stable:
12:38:26  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
12:38:26  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
12:38:26  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
12:38:26  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
12:38:26  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
12:38:26  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
12:38:26  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
12:38:26  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
12:38:26  49  -- Derive date related attributes:
12:38:26  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
12:38:26  51  ,0+TO_CHAR(ydate,'D')d
12:38:26  52  ,0+TO_CHAR(ydate,'W')w
12:38:26  53  -- mpm stands for minutes-past-midnight:
12:38:26  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
12:38:26  55  -- mph stands for minutes-past-hour:
12:38:26  56  ,0+TO_CHAR(ydate,'MI')mph
12:38:26  57  FROM svm6102
12:38:26  58  ORDER BY ydate
12:38:26  59  /

Table created.

Elapsed: 00:00:02.12
12:38:28 SQL> 
12:38:28 SQL> -- rpt
12:38:28 SQL> 
12:38:28 SQL> SELECT
12:38:28   2  pair
12:38:28   3  ,COUNT(pair)
12:38:28   4  ,MIN(clse),MAX(clse)
12:38:28   5  ,MIN(ydate),MAX(ydate)
12:38:28   6  FROM svm6122
12:38:28   7  GROUP BY pair
12:38:28   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19739	.95405	1.0195625 2010-09-26 20:55:01 2010-12-30 12:30:00

Elapsed: 00:00:00.04
12:38:29 SQL> 
12:38:29 SQL> -- Prepare for derivation of NTILE based params:
12:38:29 SQL> 
12:38:29 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.20
12:38:29 SQL> CREATE TABLE svm6142 COMPRESS AS
12:38:29   2  SELECT
12:38:29   3  pair
12:38:29   4  ,ydate
12:38:29   5  ,prdate
12:38:29   6  ,clse
12:38:29   7  ,g6
12:38:29   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
12:38:29   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
12:38:29  10  ,CASE WHEN trend IS NULL THEN 1
12:38:29  11  	    WHEN trend =0      THEN 1
12:38:29  12  	    ELSE trend END trend
12:38:29  13  ,cm4
12:38:29  14  ,cm6
12:38:29  15  ,cm8
12:38:29  16  ,cm10
12:38:29  17  ,cm12
12:38:29  18  ,cm14
12:38:29  19  ,cm16
12:38:29  20  ,cm18
12:38:29  21  --
12:38:29  22  ,ca4
12:38:29  23  ,ca6
12:38:29  24  ,ca8
12:38:29  25  ,ca10
12:38:29  26  ,ca12
12:38:29  27  ,ca14
12:38:29  28  ,ca16
12:38:29  29  ,ca18
12:38:29  30  --
12:38:29  31  ,cx4
12:38:29  32  ,cx6
12:38:29  33  ,cx8
12:38:29  34  ,cx10
12:38:29  35  ,cx12
12:38:29  36  ,cx14
12:38:29  37  ,cx16
12:38:29  38  ,cx18
12:38:29  39  --
12:38:29  40  ,crr4
12:38:29  41  ,crr6
12:38:29  42  ,crr8
12:38:29  43  ,crr10
12:38:29  44  ,crr12
12:38:29  45  ,crr14
12:38:29  46  ,crr16
12:38:29  47  ,crr18
12:38:29  48  --
12:38:29  49  ,hh
12:38:29  50  ,d
12:38:29  51  ,w
12:38:29  52  ,mpm
12:38:29  53  ,mph
12:38:29  54  FROM svm6122
12:38:29  55  ORDER BY ydate
12:38:29  56  /

Table created.

Elapsed: 00:00:00.37
12:38:29 SQL> 
12:38:29 SQL> -- rpt
12:38:29 SQL> 
12:38:29 SQL> SELECT
12:38:29   2  pair
12:38:29   3  ,trend
12:38:29   4  ,gatt
12:38:29   5  ,COUNT(pair)
12:38:29   6  ,AVG(g6)
12:38:29   7  FROM svm6142
12:38:29   8  GROUP BY pair,trend,gatt
12:38:29   9  ORDER BY pair,trend,gatt
12:38:29  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5246 -.00210886
aud_usd 	-1 up	      3818 .003727577
aud_usd 	-1		54
aud_usd 	 1 nup	      6812 -.00210327
aud_usd 	 1 up	      3791 .004024199
aud_usd 	 1		18

6 rows selected.

Elapsed: 00:00:00.03
12:38:29 SQL> 
12:38:29 SQL> 
12:38:29 SQL> -- Derive NTILE based params:
12:38:29 SQL> 
12:38:29 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.14
12:38:29 SQL> CREATE TABLE svm6162 COMPRESS AS
12:38:29   2  SELECT
12:38:29   3  pair
12:38:29   4  ,ydate
12:38:29   5  ,prdate
12:38:29   6  ,clse
12:38:29   7  ,g6
12:38:29   8  ,gatt
12:38:29   9  ,gattn
12:38:29  10  ,trend
12:38:29  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
12:38:29  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
12:38:29  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
12:38:29  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
12:38:29  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
12:38:29  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
12:38:29  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
12:38:29  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
12:38:29  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
12:38:29  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
12:38:29  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
12:38:29  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
12:38:29  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
12:38:29  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
12:38:29  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
12:38:29  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
12:38:29  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
12:38:29  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
12:38:29  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
12:38:29  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
12:38:29  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
12:38:29  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
12:38:29  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
12:38:29  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
12:38:29  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
12:38:29  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
12:38:29  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
12:38:29  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
12:38:29  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
12:38:29  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
12:38:29  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
12:38:29  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
12:38:29  43  ,hh  att32
12:38:29  44  ,d   att33
12:38:29  45  ,w   att34
12:38:29  46  ,mpm att35
12:38:29  47  ,mph att36
12:38:29  48  ,trend att37
12:38:29  49  FROM svm6142
12:38:29  50  ORDER BY ydate
12:38:29  51  /

Table created.

Elapsed: 00:00:04.82
12:38:34 SQL> 
12:38:34 SQL> -- rpt
12:38:34 SQL> 
12:38:34 SQL> SELECT
12:38:34   2  pair
12:38:34   3  ,trend
12:38:34   4  ,gatt
12:38:34   5  ,COUNT(pair)
12:38:34   6  ,AVG(g6)
12:38:34   7  FROM svm6162
12:38:34   8  GROUP BY pair,trend,gatt
12:38:34   9  ORDER BY pair,trend,gatt
12:38:34  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5246 -.00210886
aud_usd 	-1 up	      3818 .003727577
aud_usd 	-1		54
aud_usd 	 1 nup	      6812 -.00210327
aud_usd 	 1 up	      3791 .004024199
aud_usd 	 1		18

6 rows selected.

Elapsed: 00:00:00.03
12:38:34 SQL> 
12:38:34 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.20
12:38:34 SQL> CREATE TABLE modsrc COMPRESS AS
12:38:34   2  SELECT
12:38:34   3  pair
12:38:34   4  ,ydate
12:38:34   5  ,prdate
12:38:34   6  ,trend
12:38:34   7  ,g6
12:38:34   8  ,gatt
12:38:34   9  ,gattn
12:38:34  10  FROM svm6162
12:38:34  11  /

Table created.

Elapsed: 00:00:00.09
12:38:34 SQL> 
12:38:34 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
12:38:35 SQL> 
12:38:35 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
12:38:35 SQL> CREATE TABLE aud_ms610 COMPRESS AS
12:38:35   2  SELECT
12:38:35   3  ydate
12:38:35   4  ,trend aud_trend
12:38:35   5  ,g6    aud_g6
12:38:35   6  ,gatt  aud_gatt
12:38:35   7  ,gattn aud_gattn
12:38:35   8  FROM modsrc
12:38:35   9  /

Table created.

Elapsed: 00:00:00.09
12:38:35 SQL> 
12:38:35 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
12:38:35 SQL> 
12:38:35 SQL> -- I need a copy of the attributes:
12:38:35 SQL> 
12:38:35 SQL> 
12:38:35 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.09
12:38:35 SQL> CREATE TABLE aud_att COMPRESS AS
12:38:35   2  SELECT
12:38:35   3  ydate
12:38:35   4  ,att00 aud_att00
12:38:35   5  ,att01 aud_att01
12:38:35   6  ,att02 aud_att02
12:38:35   7  ,att03 aud_att03
12:38:35   8  ,att04 aud_att04
12:38:35   9  ,att05 aud_att05
12:38:35  10  ,att06 aud_att06
12:38:35  11  ,att07 aud_att07
12:38:35  12  ,att08 aud_att08
12:38:35  13  ,att09 aud_att09
12:38:35  14  ,att10 aud_att10
12:38:35  15  ,att11 aud_att11
12:38:35  16  ,att12 aud_att12
12:38:35  17  ,att13 aud_att13
12:38:35  18  ,att14 aud_att14
12:38:35  19  ,att15 aud_att15
12:38:35  20  ,att16 aud_att16
12:38:35  21  ,att17 aud_att17
12:38:35  22  ,att18 aud_att18
12:38:35  23  ,att19 aud_att19
12:38:35  24  ,att20 aud_att20
12:38:35  25  ,att21 aud_att21
12:38:35  26  ,att22 aud_att22
12:38:35  27  ,att23 aud_att23
12:38:35  28  ,att24 aud_att24
12:38:35  29  ,att25 aud_att25
12:38:35  30  ,att26 aud_att26
12:38:35  31  ,att27 aud_att27
12:38:35  32  ,att28 aud_att28
12:38:35  33  ,att29 aud_att29
12:38:35  34  ,att30 aud_att30
12:38:35  35  ,att31 aud_att31
12:38:35  36  ,att32 aud_att32
12:38:35  37  ,att33 aud_att33
12:38:35  38  ,att34 aud_att34
12:38:35  39  ,att35 aud_att35
12:38:35  40  ,att36 aud_att36
12:38:35  41  ,att37 aud_att37
12:38:35  42  FROM svm6162
12:38:35  43  /

Table created.

Elapsed: 00:00:00.18
12:38:35 SQL> 
12:38:35 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
12:38:36 SQL> 
12:38:36 SQL> -- rpt
12:38:36 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19739

Elapsed: 00:00:00.87
12:38:36 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19739

Elapsed: 00:00:00.00
12:38:36 SQL> 
12:38:36 SQL> --
12:38:36 SQL> -- gbp610.sql
12:38:36 SQL> --
12:38:36 SQL> 
12:38:36 SQL> -- Creates views and tables for backtesting a forex SVM strategy
12:38:36 SQL> 
12:38:36 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.46
12:38:37 SQL> 
12:38:37 SQL> -- I created di5min here:
12:38:37 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
12:38:37 SQL> 
12:38:37 SQL> CREATE OR REPLACE VIEW svm6102 AS
12:38:37   2  SELECT
12:38:37   3  pair
12:38:37   4  ,ydate
12:38:37   5  ,prdate
12:38:37   6  ,rownum rnum -- acts as t in my time-series
12:38:37   7  ,clse
12:38:37   8  -- Derive a bunch of attributes from clse, the latest price:
12:38:37   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
12:38:37  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
12:38:37  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
12:38:37  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
12:38:37  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
12:38:37  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
12:38:37  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
12:38:37  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
12:38:37  17  --
12:38:37  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
12:38:37  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
12:38:37  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
12:38:37  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
12:38:37  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
12:38:37  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
12:38:37  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
12:38:37  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
12:38:37  26  --
12:38:37  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
12:38:37  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
12:38:37  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
12:38:37  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
12:38:37  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
12:38:37  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
12:38:37  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
12:38:37  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
12:38:37  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
12:38:37  36  FROM di5min WHERE pair LIKE'%gbp%'
12:38:37  37  AND ydate > sysdate - 95
12:38:37  38  ORDER BY ydate
12:38:37  39  /

View created.

Elapsed: 00:00:00.05
12:38:37 SQL> 
12:38:37 SQL> -- rpt
12:38:37 SQL> 
12:38:37 SQL> SELECT
12:38:37   2  pair
12:38:37   3  ,COUNT(pair)
12:38:37   4  ,MIN(clse),MAX(clse)
12:38:37   5  ,MIN(avg6),MAX(avg6)
12:38:37   6  ,MIN(ydate),MAX(ydate)
12:38:37   7  FROM svm6102
12:38:37   8  GROUP BY pair
12:38:37   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19743   1.535325	   1.6295 1.53696747 1.62716986 2010-09-26 20:55:01 2010-12-30 12:35:00

Elapsed: 00:00:00.85
12:38:38 SQL> 
12:38:38 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
12:38:38 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.26
12:38:38 SQL> CREATE TABLE svm6122 COMPRESS AS
12:38:38   2  SELECT
12:38:38   3  pair
12:38:38   4  ,ydate
12:38:38   5  ,prdate
12:38:38   6  ,clse
12:38:38   7  -- g6 is important. I want to predict g6:
12:38:38   8  ,ld6 - clse g6
12:38:38   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
12:38:38  10  -- I want more attributes from the ones I derived above:
12:38:38  11  -- clse relation to moving-min
12:38:38  12  ,clse-min4  cm4
12:38:38  13  ,clse-min6  cm6
12:38:38  14  ,clse-min8  cm8
12:38:38  15  ,clse-min10 cm10
12:38:38  16  ,clse-min12 cm12
12:38:38  17  ,clse-min14 cm14
12:38:38  18  ,clse-min16 cm16
12:38:38  19  ,clse-min18 cm18
12:38:38  20  -- clse relation to moving-avg
12:38:38  21  ,clse-avg4  ca4
12:38:38  22  ,clse-avg6  ca6
12:38:38  23  ,clse-avg8  ca8
12:38:38  24  ,clse-avg10 ca10
12:38:38  25  ,clse-avg12 ca12
12:38:38  26  ,clse-avg14 ca14
12:38:38  27  ,clse-avg16 ca16
12:38:38  28  ,clse-avg18 ca18
12:38:38  29  -- clse relation to moving-max
12:38:38  30  ,clse-max4  cx4
12:38:38  31  ,clse-max6  cx6
12:38:38  32  ,clse-max8  cx8
12:38:38  33  ,clse-max10 cx10
12:38:38  34  ,clse-max12 cx12
12:38:38  35  ,clse-max14 cx14
12:38:38  36  ,clse-max16 cx16
12:38:38  37  ,clse-max18 cx18
12:38:38  38  -- Derive more attributes.
12:38:38  39  -- I want to use CORR() here to help SVM see the shape of the series.
12:38:38  40  -- But COVAR_POP is more stable:
12:38:38  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
12:38:38  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
12:38:38  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
12:38:38  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
12:38:38  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
12:38:38  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
12:38:38  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
12:38:38  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
12:38:38  49  -- Derive date related attributes:
12:38:38  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
12:38:38  51  ,0+TO_CHAR(ydate,'D')d
12:38:38  52  ,0+TO_CHAR(ydate,'W')w
12:38:38  53  -- mpm stands for minutes-past-midnight:
12:38:38  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
12:38:38  55  -- mph stands for minutes-past-hour:
12:38:38  56  ,0+TO_CHAR(ydate,'MI')mph
12:38:38  57  FROM svm6102
12:38:38  58  ORDER BY ydate
12:38:38  59  /

Table created.

Elapsed: 00:00:02.06
12:38:40 SQL> 
12:38:40 SQL> -- rpt
12:38:40 SQL> 
12:38:40 SQL> SELECT
12:38:40   2  pair
12:38:40   3  ,COUNT(pair)
12:38:40   4  ,MIN(clse),MAX(clse)
12:38:40   5  ,MIN(ydate),MAX(ydate)
12:38:40   6  FROM svm6122
12:38:40   7  GROUP BY pair
12:38:40   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19743   1.535325	   1.6295 2010-09-26 20:55:01 2010-12-30 12:35:00

Elapsed: 00:00:00.06
12:38:40 SQL> 
12:38:40 SQL> -- Prepare for derivation of NTILE based params:
12:38:40 SQL> 
12:38:40 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.22
12:38:40 SQL> CREATE TABLE svm6142 COMPRESS AS
12:38:40   2  SELECT
12:38:40   3  pair
12:38:40   4  ,ydate
12:38:40   5  ,prdate
12:38:40   6  ,clse
12:38:40   7  ,g6
12:38:40   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
12:38:40   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
12:38:40  10  ,CASE WHEN trend IS NULL THEN 1
12:38:40  11  	    WHEN trend =0      THEN 1
12:38:40  12  	    ELSE trend END trend
12:38:40  13  ,cm4
12:38:40  14  ,cm6
12:38:40  15  ,cm8
12:38:40  16  ,cm10
12:38:40  17  ,cm12
12:38:40  18  ,cm14
12:38:40  19  ,cm16
12:38:40  20  ,cm18
12:38:40  21  --
12:38:40  22  ,ca4
12:38:40  23  ,ca6
12:38:40  24  ,ca8
12:38:40  25  ,ca10
12:38:40  26  ,ca12
12:38:40  27  ,ca14
12:38:40  28  ,ca16
12:38:40  29  ,ca18
12:38:40  30  --
12:38:40  31  ,cx4
12:38:40  32  ,cx6
12:38:40  33  ,cx8
12:38:40  34  ,cx10
12:38:40  35  ,cx12
12:38:40  36  ,cx14
12:38:40  37  ,cx16
12:38:40  38  ,cx18
12:38:40  39  --
12:38:40  40  ,crr4
12:38:40  41  ,crr6
12:38:40  42  ,crr8
12:38:40  43  ,crr10
12:38:40  44  ,crr12
12:38:40  45  ,crr14
12:38:40  46  ,crr16
12:38:40  47  ,crr18
12:38:40  48  --
12:38:40  49  ,hh
12:38:40  50  ,d
12:38:40  51  ,w
12:38:40  52  ,mpm
12:38:40  53  ,mph
12:38:40  54  FROM svm6122
12:38:40  55  ORDER BY ydate
12:38:40  56  /

Table created.

Elapsed: 00:00:00.38
12:38:41 SQL> 
12:38:41 SQL> -- rpt
12:38:41 SQL> 
12:38:41 SQL> SELECT
12:38:41   2  pair
12:38:41   3  ,trend
12:38:41   4  ,gatt
12:38:41   5  ,COUNT(pair)
12:38:41   6  ,AVG(g6)
12:38:41   7  FROM svm6142
12:38:41   8  GROUP BY pair,trend,gatt
12:38:41   9  ORDER BY pair,trend,gatt
12:38:41  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6300 -.00256089
gbp_usd 	-1 up	      3579 .004286117
gbp_usd 	-1		68
gbp_usd 	 1 nup	      6308 -.00266936
gbp_usd 	 1 up	      3484 .004360516
gbp_usd 	 1		 4

6 rows selected.

Elapsed: 00:00:00.03
12:38:41 SQL> 
12:38:41 SQL> 
12:38:41 SQL> -- Derive NTILE based params:
12:38:41 SQL> 
12:38:41 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
12:38:41 SQL> CREATE TABLE svm6162 COMPRESS AS
12:38:41   2  SELECT
12:38:41   3  pair
12:38:41   4  ,ydate
12:38:41   5  ,prdate
12:38:41   6  ,clse
12:38:41   7  ,g6
12:38:41   8  ,gatt
12:38:41   9  ,gattn
12:38:41  10  ,trend
12:38:41  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
12:38:41  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
12:38:41  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
12:38:41  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
12:38:41  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
12:38:41  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
12:38:41  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
12:38:41  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
12:38:41  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
12:38:41  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
12:38:41  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
12:38:41  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
12:38:41  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
12:38:41  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
12:38:41  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
12:38:41  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
12:38:41  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
12:38:41  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
12:38:41  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
12:38:41  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
12:38:41  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
12:38:41  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
12:38:41  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
12:38:41  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
12:38:41  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
12:38:41  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
12:38:41  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
12:38:41  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
12:38:41  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
12:38:41  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
12:38:41  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
12:38:41  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
12:38:41  43  ,hh  att32
12:38:41  44  ,d   att33
12:38:41  45  ,w   att34
12:38:41  46  ,mpm att35
12:38:41  47  ,mph att36
12:38:41  48  ,trend att37
12:38:41  49  FROM svm6142
12:38:41  50  ORDER BY ydate
12:38:41  51  /

Table created.

Elapsed: 00:00:04.75
12:38:46 SQL> 
12:38:46 SQL> -- rpt
12:38:46 SQL> 
12:38:46 SQL> SELECT
12:38:46   2  pair
12:38:46   3  ,trend
12:38:46   4  ,gatt
12:38:46   5  ,COUNT(pair)
12:38:46   6  ,AVG(g6)
12:38:46   7  FROM svm6162
12:38:46   8  GROUP BY pair,trend,gatt
12:38:46   9  ORDER BY pair,trend,gatt
12:38:46  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6300 -.00256089
gbp_usd 	-1 up	      3579 .004286117
gbp_usd 	-1		68
gbp_usd 	 1 nup	      6308 -.00266936
gbp_usd 	 1 up	      3484 .004360516
gbp_usd 	 1		 4

6 rows selected.

Elapsed: 00:00:00.02
12:38:46 SQL> 
12:38:46 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
12:38:46 SQL> CREATE TABLE modsrc COMPRESS AS
12:38:46   2  SELECT
12:38:46   3  pair
12:38:46   4  ,ydate
12:38:46   5  ,prdate
12:38:46   6  ,trend
12:38:46   7  ,g6
12:38:46   8  ,gatt
12:38:46   9  ,gattn
12:38:46  10  FROM svm6162
12:38:46  11  /

Table created.

Elapsed: 00:00:00.09
12:38:46 SQL> 
12:38:46 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
12:38:46 SQL> 
12:38:46 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.03
12:38:46 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
12:38:46   2  SELECT
12:38:46   3  ydate
12:38:46   4  ,trend gbp_trend
12:38:46   5  ,g6    gbp_g6
12:38:46   6  ,gatt  gbp_gatt
12:38:46   7  ,gattn gbp_gattn
12:38:46   8  FROM modsrc
12:38:46   9  /

Table created.

Elapsed: 00:00:00.09
12:38:46 SQL> 
12:38:46 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
12:38:46 SQL> 
12:38:46 SQL> -- I need a copy of the attributes:
12:38:46 SQL> 
12:38:46 SQL> 
12:38:46 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.07
12:38:47 SQL> CREATE TABLE gbp_att COMPRESS AS
12:38:47   2  SELECT
12:38:47   3  ydate
12:38:47   4  ,att00 gbp_att00
12:38:47   5  ,att01 gbp_att01
12:38:47   6  ,att02 gbp_att02
12:38:47   7  ,att03 gbp_att03
12:38:47   8  ,att04 gbp_att04
12:38:47   9  ,att05 gbp_att05
12:38:47  10  ,att06 gbp_att06
12:38:47  11  ,att07 gbp_att07
12:38:47  12  ,att08 gbp_att08
12:38:47  13  ,att09 gbp_att09
12:38:47  14  ,att10 gbp_att10
12:38:47  15  ,att11 gbp_att11
12:38:47  16  ,att12 gbp_att12
12:38:47  17  ,att13 gbp_att13
12:38:47  18  ,att14 gbp_att14
12:38:47  19  ,att15 gbp_att15
12:38:47  20  ,att16 gbp_att16
12:38:47  21  ,att17 gbp_att17
12:38:47  22  ,att18 gbp_att18
12:38:47  23  ,att19 gbp_att19
12:38:47  24  ,att20 gbp_att20
12:38:47  25  ,att21 gbp_att21
12:38:47  26  ,att22 gbp_att22
12:38:47  27  ,att23 gbp_att23
12:38:47  28  ,att24 gbp_att24
12:38:47  29  ,att25 gbp_att25
12:38:47  30  ,att26 gbp_att26
12:38:47  31  ,att27 gbp_att27
12:38:47  32  ,att28 gbp_att28
12:38:47  33  ,att29 gbp_att29
12:38:47  34  ,att30 gbp_att30
12:38:47  35  ,att31 gbp_att31
12:38:47  36  ,att32 gbp_att32
12:38:47  37  ,att33 gbp_att33
12:38:47  38  ,att34 gbp_att34
12:38:47  39  ,att35 gbp_att35
12:38:47  40  ,att36 gbp_att36
12:38:47  41  ,att37 gbp_att37
12:38:47  42  FROM svm6162
12:38:47  43  /

Table created.

Elapsed: 00:00:00.20
12:38:47 SQL> 
12:38:47 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.69
12:38:47 SQL> 
12:38:47 SQL> -- rpt
12:38:47 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19743

Elapsed: 00:00:00.85
12:38:48 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19743

Elapsed: 00:00:00.00
12:38:48 SQL> 
12:38:48 SQL> --
12:38:48 SQL> -- jpy610.sql
12:38:48 SQL> --
12:38:48 SQL> 
12:38:48 SQL> -- Creates views and tables for backtesting a forex SVM strategy
12:38:48 SQL> 
12:38:48 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
12:38:49 SQL> 
12:38:49 SQL> -- I created di5min here:
12:38:49 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
12:38:49 SQL> 
12:38:49 SQL> CREATE OR REPLACE VIEW svm6102 AS
12:38:49   2  SELECT
12:38:49   3  pair
12:38:49   4  ,ydate
12:38:49   5  ,prdate
12:38:49   6  ,rownum rnum -- acts as t in my time-series
12:38:49   7  ,clse
12:38:49   8  -- Derive a bunch of attributes from clse, the latest price:
12:38:49   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
12:38:49  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
12:38:49  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
12:38:49  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
12:38:49  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
12:38:49  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
12:38:49  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
12:38:49  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
12:38:49  17  --
12:38:49  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
12:38:49  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
12:38:49  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
12:38:49  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
12:38:49  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
12:38:49  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
12:38:49  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
12:38:49  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
12:38:49  26  --
12:38:49  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
12:38:49  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
12:38:49  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
12:38:49  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
12:38:49  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
12:38:49  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
12:38:49  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
12:38:49  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
12:38:49  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
12:38:49  36  FROM di5min WHERE pair LIKE'%jpy%'
12:38:49  37  AND ydate > sysdate - 95
12:38:49  38  ORDER BY ydate
12:38:49  39  /

View created.

Elapsed: 00:00:00.06
12:38:49 SQL> 
12:38:49 SQL> -- rpt
12:38:49 SQL> 
12:38:49 SQL> SELECT
12:38:49   2  pair
12:38:49   3  ,COUNT(pair)
12:38:49   4  ,MIN(clse),MAX(clse)
12:38:49   5  ,MIN(avg6),MAX(avg6)
12:38:49   6  ,MIN(ydate),MAX(ydate)
12:38:49   7  FROM svm6102
12:38:49   8  GROUP BY pair
12:38:49   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19740	 80.25	   84.485 80.3595205 84.3105479 2010-09-26 20:55:01 2010-12-30 12:35:00

Elapsed: 00:00:00.94
12:38:50 SQL> 
12:38:50 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
12:38:50 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.17
12:38:50 SQL> CREATE TABLE svm6122 COMPRESS AS
12:38:50   2  SELECT
12:38:50   3  pair
12:38:50   4  ,ydate
12:38:50   5  ,prdate
12:38:50   6  ,clse
12:38:50   7  -- g6 is important. I want to predict g6:
12:38:50   8  ,ld6 - clse g6
12:38:50   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
12:38:50  10  -- I want more attributes from the ones I derived above:
12:38:50  11  -- clse relation to moving-min
12:38:50  12  ,clse-min4  cm4
12:38:50  13  ,clse-min6  cm6
12:38:50  14  ,clse-min8  cm8
12:38:50  15  ,clse-min10 cm10
12:38:50  16  ,clse-min12 cm12
12:38:50  17  ,clse-min14 cm14
12:38:50  18  ,clse-min16 cm16
12:38:50  19  ,clse-min18 cm18
12:38:50  20  -- clse relation to moving-avg
12:38:50  21  ,clse-avg4  ca4
12:38:50  22  ,clse-avg6  ca6
12:38:50  23  ,clse-avg8  ca8
12:38:50  24  ,clse-avg10 ca10
12:38:50  25  ,clse-avg12 ca12
12:38:50  26  ,clse-avg14 ca14
12:38:50  27  ,clse-avg16 ca16
12:38:50  28  ,clse-avg18 ca18
12:38:50  29  -- clse relation to moving-max
12:38:50  30  ,clse-max4  cx4
12:38:50  31  ,clse-max6  cx6
12:38:50  32  ,clse-max8  cx8
12:38:50  33  ,clse-max10 cx10
12:38:50  34  ,clse-max12 cx12
12:38:50  35  ,clse-max14 cx14
12:38:50  36  ,clse-max16 cx16
12:38:50  37  ,clse-max18 cx18
12:38:50  38  -- Derive more attributes.
12:38:50  39  -- I want to use CORR() here to help SVM see the shape of the series.
12:38:50  40  -- But COVAR_POP is more stable:
12:38:50  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
12:38:50  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
12:38:50  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
12:38:50  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
12:38:50  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
12:38:50  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
12:38:50  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
12:38:50  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
12:38:50  49  -- Derive date related attributes:
12:38:50  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
12:38:50  51  ,0+TO_CHAR(ydate,'D')d
12:38:50  52  ,0+TO_CHAR(ydate,'W')w
12:38:50  53  -- mpm stands for minutes-past-midnight:
12:38:50  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
12:38:50  55  -- mph stands for minutes-past-hour:
12:38:50  56  ,0+TO_CHAR(ydate,'MI')mph
12:38:50  57  FROM svm6102
12:38:50  58  ORDER BY ydate
12:38:50  59  /

Table created.

Elapsed: 00:00:02.21
12:38:52 SQL> 
12:38:52 SQL> -- rpt
12:38:52 SQL> 
12:38:52 SQL> SELECT
12:38:52   2  pair
12:38:52   3  ,COUNT(pair)
12:38:52   4  ,MIN(clse),MAX(clse)
12:38:52   5  ,MIN(ydate),MAX(ydate)
12:38:52   6  FROM svm6122
12:38:52   7  GROUP BY pair
12:38:52   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19740	 80.25	   84.485 2010-09-26 20:55:01 2010-12-30 12:35:00

Elapsed: 00:00:00.05
12:38:52 SQL> 
12:38:52 SQL> -- Prepare for derivation of NTILE based params:
12:38:52 SQL> 
12:38:52 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.22
12:38:52 SQL> CREATE TABLE svm6142 COMPRESS AS
12:38:52   2  SELECT
12:38:52   3  pair
12:38:52   4  ,ydate
12:38:52   5  ,prdate
12:38:52   6  ,clse
12:38:52   7  ,g6
12:38:52   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
12:38:52   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
12:38:52  10  ,CASE WHEN trend IS NULL THEN 1
12:38:52  11  	    WHEN trend =0      THEN 1
12:38:52  12  	    ELSE trend END trend
12:38:52  13  ,cm4
12:38:52  14  ,cm6
12:38:52  15  ,cm8
12:38:52  16  ,cm10
12:38:52  17  ,cm12
12:38:52  18  ,cm14
12:38:52  19  ,cm16
12:38:52  20  ,cm18
12:38:52  21  --
12:38:52  22  ,ca4
12:38:52  23  ,ca6
12:38:52  24  ,ca8
12:38:52  25  ,ca10
12:38:52  26  ,ca12
12:38:52  27  ,ca14
12:38:52  28  ,ca16
12:38:52  29  ,ca18
12:38:52  30  --
12:38:52  31  ,cx4
12:38:52  32  ,cx6
12:38:52  33  ,cx8
12:38:52  34  ,cx10
12:38:52  35  ,cx12
12:38:52  36  ,cx14
12:38:52  37  ,cx16
12:38:52  38  ,cx18
12:38:52  39  --
12:38:52  40  ,crr4
12:38:52  41  ,crr6
12:38:52  42  ,crr8
12:38:52  43  ,crr10
12:38:52  44  ,crr12
12:38:52  45  ,crr14
12:38:52  46  ,crr16
12:38:52  47  ,crr18
12:38:52  48  --
12:38:52  49  ,hh
12:38:52  50  ,d
12:38:52  51  ,w
12:38:52  52  ,mpm
12:38:52  53  ,mph
12:38:52  54  FROM svm6122
12:38:52  55  ORDER BY ydate
12:38:52  56  /

Table created.

Elapsed: 00:00:00.35
12:38:53 SQL> 
12:38:53 SQL> -- rpt
12:38:53 SQL> 
12:38:53 SQL> SELECT
12:38:53   2  pair
12:38:53   3  ,trend
12:38:53   4  ,gatt
12:38:53   5  ,COUNT(pair)
12:38:53   6  ,AVG(g6)
12:38:53   7  FROM svm6142
12:38:53   8  GROUP BY pair,trend,gatt
12:38:53   9  ORDER BY pair,trend,gatt
12:38:53  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5375 -.16553659
usd_jpy 	-1 up	      5025 .162197454
usd_jpy 	-1		 9
usd_jpy 	 1 nup	      5175 -.15491938
usd_jpy 	 1 up	      4093 .165084491
usd_jpy 	 1		63

6 rows selected.

Elapsed: 00:00:00.05
12:38:53 SQL> 
12:38:53 SQL> 
12:38:53 SQL> -- Derive NTILE based params:
12:38:53 SQL> 
12:38:53 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.14
12:38:53 SQL> CREATE TABLE svm6162 COMPRESS AS
12:38:53   2  SELECT
12:38:53   3  pair
12:38:53   4  ,ydate
12:38:53   5  ,prdate
12:38:53   6  ,clse
12:38:53   7  ,g6
12:38:53   8  ,gatt
12:38:53   9  ,gattn
12:38:53  10  ,trend
12:38:53  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
12:38:53  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
12:38:53  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
12:38:53  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
12:38:53  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
12:38:53  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
12:38:53  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
12:38:53  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
12:38:53  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
12:38:53  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
12:38:53  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
12:38:53  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
12:38:53  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
12:38:53  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
12:38:53  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
12:38:53  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
12:38:53  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
12:38:53  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
12:38:53  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
12:38:53  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
12:38:53  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
12:38:53  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
12:38:53  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
12:38:53  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
12:38:53  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
12:38:53  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
12:38:53  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
12:38:53  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
12:38:53  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
12:38:53  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
12:38:53  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
12:38:53  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
12:38:53  43  ,hh  att32
12:38:53  44  ,d   att33
12:38:53  45  ,w   att34
12:38:53  46  ,mpm att35
12:38:53  47  ,mph att36
12:38:53  48  ,trend att37
12:38:53  49  FROM svm6142
12:38:53  50  ORDER BY ydate
12:38:53  51  /

Table created.

Elapsed: 00:00:04.72
12:38:58 SQL> 
12:38:58 SQL> -- rpt
12:38:58 SQL> 
12:38:58 SQL> SELECT
12:38:58   2  pair
12:38:58   3  ,trend
12:38:58   4  ,gatt
12:38:58   5  ,COUNT(pair)
12:38:58   6  ,AVG(g6)
12:38:58   7  FROM svm6162
12:38:58   8  GROUP BY pair,trend,gatt
12:38:58   9  ORDER BY pair,trend,gatt
12:38:58  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5375 -.16553659
usd_jpy 	-1 up	      5025 .162197454
usd_jpy 	-1		 9
usd_jpy 	 1 nup	      5175 -.15491938
usd_jpy 	 1 up	      4093 .165084491
usd_jpy 	 1		63

6 rows selected.

Elapsed: 00:00:00.02
12:38:58 SQL> 
12:38:58 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.22
12:38:58 SQL> CREATE TABLE modsrc COMPRESS AS
12:38:58   2  SELECT
12:38:58   3  pair
12:38:58   4  ,ydate
12:38:58   5  ,prdate
12:38:58   6  ,trend
12:38:58   7  ,g6
12:38:58   8  ,gatt
12:38:58   9  ,gattn
12:38:58  10  FROM svm6162
12:38:58  11  /

Table created.

Elapsed: 00:00:00.09
12:38:58 SQL> 
12:38:58 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.26
12:38:58 SQL> 
12:38:58 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
12:38:58 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
12:38:58   2  SELECT
12:38:58   3  ydate
12:38:58   4  ,trend jpy_trend
12:38:58   5  ,g6    jpy_g6
12:38:58   6  ,gatt  jpy_gatt
12:38:58   7  ,gattn jpy_gattn
12:38:58   8  FROM modsrc
12:38:58   9  /

Table created.

Elapsed: 00:00:00.07
12:38:58 SQL> 
12:38:58 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.14
12:38:58 SQL> 
12:38:58 SQL> -- I need a copy of the attributes:
12:38:58 SQL> 
12:38:58 SQL> 
12:38:58 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.05
12:38:58 SQL> CREATE TABLE jpy_att COMPRESS AS
12:38:58   2  SELECT
12:38:58   3  ydate
12:38:58   4  ,att00 jpy_att00
12:38:58   5  ,att01 jpy_att01
12:38:58   6  ,att02 jpy_att02
12:38:58   7  ,att03 jpy_att03
12:38:58   8  ,att04 jpy_att04
12:38:58   9  ,att05 jpy_att05
12:38:58  10  ,att06 jpy_att06
12:38:58  11  ,att07 jpy_att07
12:38:58  12  ,att08 jpy_att08
12:38:58  13  ,att09 jpy_att09
12:38:58  14  ,att10 jpy_att10
12:38:58  15  ,att11 jpy_att11
12:38:58  16  ,att12 jpy_att12
12:38:58  17  ,att13 jpy_att13
12:38:58  18  ,att14 jpy_att14
12:38:58  19  ,att15 jpy_att15
12:38:58  20  ,att16 jpy_att16
12:38:58  21  ,att17 jpy_att17
12:38:58  22  ,att18 jpy_att18
12:38:58  23  ,att19 jpy_att19
12:38:58  24  ,att20 jpy_att20
12:38:58  25  ,att21 jpy_att21
12:38:58  26  ,att22 jpy_att22
12:38:58  27  ,att23 jpy_att23
12:38:58  28  ,att24 jpy_att24
12:38:58  29  ,att25 jpy_att25
12:38:58  30  ,att26 jpy_att26
12:38:58  31  ,att27 jpy_att27
12:38:58  32  ,att28 jpy_att28
12:38:58  33  ,att29 jpy_att29
12:38:58  34  ,att30 jpy_att30
12:38:58  35  ,att31 jpy_att31
12:38:58  36  ,att32 jpy_att32
12:38:58  37  ,att33 jpy_att33
12:38:58  38  ,att34 jpy_att34
12:38:58  39  ,att35 jpy_att35
12:38:58  40  ,att36 jpy_att36
12:38:58  41  ,att37 jpy_att37
12:38:58  42  FROM svm6162
12:38:58  43  /

Table created.

Elapsed: 00:00:00.16
12:38:59 SQL> 
12:38:59 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.42
12:38:59 SQL> 
12:38:59 SQL> -- rpt
12:38:59 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19740

Elapsed: 00:00:00.91
12:39:00 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19740

Elapsed: 00:00:00.00
12:39:00 SQL> 
12:39:00 SQL> --
12:39:00 SQL> -- cad610.sql
12:39:00 SQL> --
12:39:00 SQL> 
12:39:00 SQL> -- Creates views and tables for backtesting a forex SVM strategy
12:39:00 SQL> 
12:39:00 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
12:39:00 SQL> 
12:39:00 SQL> -- I created di5min here:
12:39:00 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
12:39:00 SQL> 
12:39:00 SQL> CREATE OR REPLACE VIEW svm6102 AS
12:39:00   2  SELECT
12:39:00   3  pair
12:39:00   4  ,ydate
12:39:00   5  ,prdate
12:39:00   6  ,rownum rnum -- acts as t in my time-series
12:39:00   7  ,clse
12:39:00   8  -- Derive a bunch of attributes from clse, the latest price:
12:39:00   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
12:39:00  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
12:39:00  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
12:39:00  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
12:39:00  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
12:39:00  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
12:39:00  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
12:39:00  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
12:39:00  17  --
12:39:00  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
12:39:00  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
12:39:00  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
12:39:00  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
12:39:00  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
12:39:00  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
12:39:00  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
12:39:00  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
12:39:00  26  --
12:39:00  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
12:39:00  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
12:39:00  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
12:39:00  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
12:39:00  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
12:39:00  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
12:39:00  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
12:39:00  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
12:39:00  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
12:39:00  36  FROM di5min WHERE pair LIKE'%cad%'
12:39:00  37  AND ydate > sysdate - 95
12:39:00  38  ORDER BY ydate
12:39:00  39  /

View created.

Elapsed: 00:00:00.04
12:39:00 SQL> 
12:39:00 SQL> -- rpt
12:39:00 SQL> 
12:39:00 SQL> SELECT
12:39:00   2  pair
12:39:00   3  ,COUNT(pair)
12:39:00   4  ,MIN(clse),MAX(clse)
12:39:00   5  ,MIN(avg6),MAX(avg6)
12:39:00   6  ,MIN(ydate),MAX(ydate)
12:39:00   7  FROM svm6102
12:39:00   8  GROUP BY pair
12:39:00   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19740	.99755	    1.036 .998845205 1.03336849 2010-09-26 20:55:01 2010-12-30 12:35:00

Elapsed: 00:00:00.86
12:39:01 SQL> 
12:39:01 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
12:39:01 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.19
12:39:01 SQL> CREATE TABLE svm6122 COMPRESS AS
12:39:01   2  SELECT
12:39:01   3  pair
12:39:01   4  ,ydate
12:39:01   5  ,prdate
12:39:01   6  ,clse
12:39:01   7  -- g6 is important. I want to predict g6:
12:39:01   8  ,ld6 - clse g6
12:39:01   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
12:39:01  10  -- I want more attributes from the ones I derived above:
12:39:01  11  -- clse relation to moving-min
12:39:01  12  ,clse-min4  cm4
12:39:01  13  ,clse-min6  cm6
12:39:01  14  ,clse-min8  cm8
12:39:01  15  ,clse-min10 cm10
12:39:01  16  ,clse-min12 cm12
12:39:01  17  ,clse-min14 cm14
12:39:01  18  ,clse-min16 cm16
12:39:01  19  ,clse-min18 cm18
12:39:01  20  -- clse relation to moving-avg
12:39:01  21  ,clse-avg4  ca4
12:39:01  22  ,clse-avg6  ca6
12:39:01  23  ,clse-avg8  ca8
12:39:01  24  ,clse-avg10 ca10
12:39:01  25  ,clse-avg12 ca12
12:39:01  26  ,clse-avg14 ca14
12:39:01  27  ,clse-avg16 ca16
12:39:01  28  ,clse-avg18 ca18
12:39:01  29  -- clse relation to moving-max
12:39:01  30  ,clse-max4  cx4
12:39:01  31  ,clse-max6  cx6
12:39:01  32  ,clse-max8  cx8
12:39:01  33  ,clse-max10 cx10
12:39:01  34  ,clse-max12 cx12
12:39:01  35  ,clse-max14 cx14
12:39:01  36  ,clse-max16 cx16
12:39:01  37  ,clse-max18 cx18
12:39:01  38  -- Derive more attributes.
12:39:01  39  -- I want to use CORR() here to help SVM see the shape of the series.
12:39:01  40  -- But COVAR_POP is more stable:
12:39:01  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
12:39:01  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
12:39:01  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
12:39:01  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
12:39:01  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
12:39:01  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
12:39:01  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
12:39:01  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
12:39:01  49  -- Derive date related attributes:
12:39:01  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
12:39:01  51  ,0+TO_CHAR(ydate,'D')d
12:39:01  52  ,0+TO_CHAR(ydate,'W')w
12:39:01  53  -- mpm stands for minutes-past-midnight:
12:39:01  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
12:39:01  55  -- mph stands for minutes-past-hour:
12:39:01  56  ,0+TO_CHAR(ydate,'MI')mph
12:39:01  57  FROM svm6102
12:39:01  58  ORDER BY ydate
12:39:01  59  /

Table created.

Elapsed: 00:00:02.10
12:39:04 SQL> 
12:39:04 SQL> -- rpt
12:39:04 SQL> 
12:39:04 SQL> SELECT
12:39:04   2  pair
12:39:04   3  ,COUNT(pair)
12:39:04   4  ,MIN(clse),MAX(clse)
12:39:04   5  ,MIN(ydate),MAX(ydate)
12:39:04   6  FROM svm6122
12:39:04   7  GROUP BY pair
12:39:04   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19740	.99755	    1.036 2010-09-26 20:55:01 2010-12-30 12:35:00

Elapsed: 00:00:00.04
12:39:04 SQL> 
12:39:04 SQL> -- Prepare for derivation of NTILE based params:
12:39:04 SQL> 
12:39:04 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.21
12:39:04 SQL> CREATE TABLE svm6142 COMPRESS AS
12:39:04   2  SELECT
12:39:04   3  pair
12:39:04   4  ,ydate
12:39:04   5  ,prdate
12:39:04   6  ,clse
12:39:04   7  ,g6
12:39:04   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
12:39:04   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
12:39:04  10  ,CASE WHEN trend IS NULL THEN 1
12:39:04  11  	    WHEN trend =0      THEN 1
12:39:04  12  	    ELSE trend END trend
12:39:04  13  ,cm4
12:39:04  14  ,cm6
12:39:04  15  ,cm8
12:39:04  16  ,cm10
12:39:04  17  ,cm12
12:39:04  18  ,cm14
12:39:04  19  ,cm16
12:39:04  20  ,cm18
12:39:04  21  --
12:39:04  22  ,ca4
12:39:04  23  ,ca6
12:39:04  24  ,ca8
12:39:04  25  ,ca10
12:39:04  26  ,ca12
12:39:04  27  ,ca14
12:39:04  28  ,ca16
12:39:04  29  ,ca18
12:39:04  30  --
12:39:04  31  ,cx4
12:39:04  32  ,cx6
12:39:04  33  ,cx8
12:39:04  34  ,cx10
12:39:04  35  ,cx12
12:39:04  36  ,cx14
12:39:04  37  ,cx16
12:39:04  38  ,cx18
12:39:04  39  --
12:39:04  40  ,crr4
12:39:04  41  ,crr6
12:39:04  42  ,crr8
12:39:04  43  ,crr10
12:39:04  44  ,crr12
12:39:04  45  ,crr14
12:39:04  46  ,crr16
12:39:04  47  ,crr18
12:39:04  48  --
12:39:04  49  ,hh
12:39:04  50  ,d
12:39:04  51  ,w
12:39:04  52  ,mpm
12:39:04  53  ,mph
12:39:04  54  FROM svm6122
12:39:04  55  ORDER BY ydate
12:39:04  56  /

Table created.

Elapsed: 00:00:00.38
12:39:04 SQL> 
12:39:04 SQL> -- rpt
12:39:04 SQL> 
12:39:04 SQL> SELECT
12:39:04   2  pair
12:39:04   3  ,trend
12:39:04   4  ,gatt
12:39:04   5  ,COUNT(pair)
12:39:04   6  ,AVG(g6)
12:39:04   7  FROM svm6142
12:39:04   8  GROUP BY pair,trend,gatt
12:39:04   9  ORDER BY pair,trend,gatt
12:39:04  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7278  -.0013147
usd_cad 	-1 up	      3152 .003080692
usd_cad 	-1		18
usd_cad 	 1 nup	      6746 -.00160825
usd_cad 	 1 up	      2492 .003595464
usd_cad 	 1		54

6 rows selected.

Elapsed: 00:00:00.04
12:39:04 SQL> 
12:39:04 SQL> 
12:39:04 SQL> -- Derive NTILE based params:
12:39:04 SQL> 
12:39:04 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
12:39:04 SQL> CREATE TABLE svm6162 COMPRESS AS
12:39:04   2  SELECT
12:39:04   3  pair
12:39:04   4  ,ydate
12:39:04   5  ,prdate
12:39:04   6  ,clse
12:39:04   7  ,g6
12:39:04   8  ,gatt
12:39:04   9  ,gattn
12:39:04  10  ,trend
12:39:04  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
12:39:04  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
12:39:04  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
12:39:04  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
12:39:04  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
12:39:04  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
12:39:04  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
12:39:04  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
12:39:04  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
12:39:04  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
12:39:04  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
12:39:04  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
12:39:04  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
12:39:04  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
12:39:04  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
12:39:04  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
12:39:04  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
12:39:04  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
12:39:04  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
12:39:04  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
12:39:04  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
12:39:04  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
12:39:04  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
12:39:04  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
12:39:04  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
12:39:04  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
12:39:04  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
12:39:04  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
12:39:04  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
12:39:04  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
12:39:04  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
12:39:04  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
12:39:04  43  ,hh  att32
12:39:04  44  ,d   att33
12:39:04  45  ,w   att34
12:39:04  46  ,mpm att35
12:39:04  47  ,mph att36
12:39:04  48  ,trend att37
12:39:04  49  FROM svm6142
12:39:04  50  ORDER BY ydate
12:39:04  51  /

Table created.

Elapsed: 00:00:04.82
12:39:09 SQL> 
12:39:09 SQL> -- rpt
12:39:09 SQL> 
12:39:09 SQL> SELECT
12:39:09   2  pair
12:39:09   3  ,trend
12:39:09   4  ,gatt
12:39:09   5  ,COUNT(pair)
12:39:09   6  ,AVG(g6)
12:39:09   7  FROM svm6162
12:39:09   8  GROUP BY pair,trend,gatt
12:39:09   9  ORDER BY pair,trend,gatt
12:39:09  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7278  -.0013147
usd_cad 	-1 up	      3152 .003080692
usd_cad 	-1		18
usd_cad 	 1 nup	      6746 -.00160825
usd_cad 	 1 up	      2492 .003595464
usd_cad 	 1		54

6 rows selected.

Elapsed: 00:00:00.03
12:39:09 SQL> 
12:39:09 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
12:39:09 SQL> CREATE TABLE modsrc COMPRESS AS
12:39:09   2  SELECT
12:39:09   3  pair
12:39:09   4  ,ydate
12:39:09   5  ,prdate
12:39:09   6  ,trend
12:39:09   7  ,g6
12:39:09   8  ,gatt
12:39:09   9  ,gattn
12:39:09  10  FROM svm6162
12:39:09  11  /

Table created.

Elapsed: 00:00:00.08
12:39:09 SQL> 
12:39:09 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
12:39:10 SQL> 
12:39:10 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.15
12:39:10 SQL> CREATE TABLE cad_ms610 COMPRESS AS
12:39:10   2  SELECT
12:39:10   3  ydate
12:39:10   4  ,trend cad_trend
12:39:10   5  ,g6    cad_g6
12:39:10   6  ,gatt  cad_gatt
12:39:10   7  ,gattn cad_gattn
12:39:10   8  FROM modsrc
12:39:10   9  /

Table created.

Elapsed: 00:00:00.06
12:39:10 SQL> 
12:39:10 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.14
12:39:10 SQL> 
12:39:10 SQL> -- I need a copy of the attributes:
12:39:10 SQL> 
12:39:10 SQL> 
12:39:10 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.05
12:39:10 SQL> CREATE TABLE cad_att COMPRESS AS
12:39:10   2  SELECT
12:39:10   3  ydate
12:39:10   4  ,att00 cad_att00
12:39:10   5  ,att01 cad_att01
12:39:10   6  ,att02 cad_att02
12:39:10   7  ,att03 cad_att03
12:39:10   8  ,att04 cad_att04
12:39:10   9  ,att05 cad_att05
12:39:10  10  ,att06 cad_att06
12:39:10  11  ,att07 cad_att07
12:39:10  12  ,att08 cad_att08
12:39:10  13  ,att09 cad_att09
12:39:10  14  ,att10 cad_att10
12:39:10  15  ,att11 cad_att11
12:39:10  16  ,att12 cad_att12
12:39:10  17  ,att13 cad_att13
12:39:10  18  ,att14 cad_att14
12:39:10  19  ,att15 cad_att15
12:39:10  20  ,att16 cad_att16
12:39:10  21  ,att17 cad_att17
12:39:10  22  ,att18 cad_att18
12:39:10  23  ,att19 cad_att19
12:39:10  24  ,att20 cad_att20
12:39:10  25  ,att21 cad_att21
12:39:10  26  ,att22 cad_att22
12:39:10  27  ,att23 cad_att23
12:39:10  28  ,att24 cad_att24
12:39:10  29  ,att25 cad_att25
12:39:10  30  ,att26 cad_att26
12:39:10  31  ,att27 cad_att27
12:39:10  32  ,att28 cad_att28
12:39:10  33  ,att29 cad_att29
12:39:10  34  ,att30 cad_att30
12:39:10  35  ,att31 cad_att31
12:39:10  36  ,att32 cad_att32
12:39:10  37  ,att33 cad_att33
12:39:10  38  ,att34 cad_att34
12:39:10  39  ,att35 cad_att35
12:39:10  40  ,att36 cad_att36
12:39:10  41  ,att37 cad_att37
12:39:10  42  FROM svm6162
12:39:10  43  /

Table created.

Elapsed: 00:00:00.17
12:39:10 SQL> 
12:39:10 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.42
12:39:11 SQL> 
12:39:11 SQL> -- rpt
12:39:11 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19740

Elapsed: 00:00:00.83
12:39:11 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19740

Elapsed: 00:00:00.00
12:39:11 SQL> 
12:39:11 SQL> --
12:39:11 SQL> -- chf610.sql
12:39:11 SQL> --
12:39:11 SQL> 
12:39:11 SQL> -- Creates views and tables for backtesting a forex SVM strategy
12:39:11 SQL> 
12:39:11 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.45
12:39:12 SQL> 
12:39:12 SQL> -- I created di5min here:
12:39:12 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
12:39:12 SQL> 
12:39:12 SQL> CREATE OR REPLACE VIEW svm6102 AS
12:39:12   2  SELECT
12:39:12   3  pair
12:39:12   4  ,ydate
12:39:12   5  ,prdate
12:39:12   6  ,rownum rnum -- acts as t in my time-series
12:39:12   7  ,clse
12:39:12   8  -- Derive a bunch of attributes from clse, the latest price:
12:39:12   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
12:39:12  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
12:39:12  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
12:39:12  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
12:39:12  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
12:39:12  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
12:39:12  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
12:39:12  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
12:39:12  17  --
12:39:12  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
12:39:12  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
12:39:12  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
12:39:12  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
12:39:12  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
12:39:12  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
12:39:12  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
12:39:12  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
12:39:12  26  --
12:39:12  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
12:39:12  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
12:39:12  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
12:39:12  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
12:39:12  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
12:39:12  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
12:39:12  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
12:39:12  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
12:39:12  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
12:39:12  36  FROM di5min WHERE pair LIKE'%chf%'
12:39:12  37  AND ydate > sysdate - 95
12:39:12  38  ORDER BY ydate
12:39:12  39  /

View created.

Elapsed: 00:00:00.04
12:39:12 SQL> 
12:39:12 SQL> -- rpt
12:39:12 SQL> 
12:39:12 SQL> SELECT
12:39:12   2  pair
12:39:12   3  ,COUNT(pair)
12:39:12   4  ,MIN(clse),MAX(clse)
12:39:12   5  ,MIN(avg6),MAX(avg6)
12:39:12   6  ,MIN(ydate),MAX(ydate)
12:39:12   7  FROM svm6102
12:39:12   8  GROUP BY pair
12:39:12   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19743    .937875	  1.00635 .939984104 1.00498151 2010-09-26 20:55:01 2010-12-30 12:35:00

Elapsed: 00:00:00.86
12:39:13 SQL> 
12:39:13 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
12:39:13 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.23
12:39:13 SQL> CREATE TABLE svm6122 COMPRESS AS
12:39:13   2  SELECT
12:39:13   3  pair
12:39:13   4  ,ydate
12:39:13   5  ,prdate
12:39:13   6  ,clse
12:39:13   7  -- g6 is important. I want to predict g6:
12:39:13   8  ,ld6 - clse g6
12:39:13   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
12:39:13  10  -- I want more attributes from the ones I derived above:
12:39:13  11  -- clse relation to moving-min
12:39:13  12  ,clse-min4  cm4
12:39:13  13  ,clse-min6  cm6
12:39:13  14  ,clse-min8  cm8
12:39:13  15  ,clse-min10 cm10
12:39:13  16  ,clse-min12 cm12
12:39:13  17  ,clse-min14 cm14
12:39:13  18  ,clse-min16 cm16
12:39:13  19  ,clse-min18 cm18
12:39:13  20  -- clse relation to moving-avg
12:39:13  21  ,clse-avg4  ca4
12:39:13  22  ,clse-avg6  ca6
12:39:13  23  ,clse-avg8  ca8
12:39:13  24  ,clse-avg10 ca10
12:39:13  25  ,clse-avg12 ca12
12:39:13  26  ,clse-avg14 ca14
12:39:13  27  ,clse-avg16 ca16
12:39:13  28  ,clse-avg18 ca18
12:39:13  29  -- clse relation to moving-max
12:39:13  30  ,clse-max4  cx4
12:39:13  31  ,clse-max6  cx6
12:39:13  32  ,clse-max8  cx8
12:39:13  33  ,clse-max10 cx10
12:39:13  34  ,clse-max12 cx12
12:39:13  35  ,clse-max14 cx14
12:39:13  36  ,clse-max16 cx16
12:39:13  37  ,clse-max18 cx18
12:39:13  38  -- Derive more attributes.
12:39:13  39  -- I want to use CORR() here to help SVM see the shape of the series.
12:39:13  40  -- But COVAR_POP is more stable:
12:39:13  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
12:39:13  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
12:39:13  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
12:39:13  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
12:39:13  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
12:39:13  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
12:39:13  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
12:39:13  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
12:39:13  49  -- Derive date related attributes:
12:39:13  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
12:39:13  51  ,0+TO_CHAR(ydate,'D')d
12:39:13  52  ,0+TO_CHAR(ydate,'W')w
12:39:13  53  -- mpm stands for minutes-past-midnight:
12:39:13  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
12:39:13  55  -- mph stands for minutes-past-hour:
12:39:13  56  ,0+TO_CHAR(ydate,'MI')mph
12:39:13  57  FROM svm6102
12:39:13  58  ORDER BY ydate
12:39:13  59  /

Table created.

Elapsed: 00:00:02.05
12:39:15 SQL> 
12:39:15 SQL> -- rpt
12:39:15 SQL> 
12:39:15 SQL> SELECT
12:39:15   2  pair
12:39:15   3  ,COUNT(pair)
12:39:15   4  ,MIN(clse),MAX(clse)
12:39:15   5  ,MIN(ydate),MAX(ydate)
12:39:15   6  FROM svm6122
12:39:15   7  GROUP BY pair
12:39:15   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19743    .937875	  1.00635 2010-09-26 20:55:01 2010-12-30 12:35:00

Elapsed: 00:00:00.04
12:39:15 SQL> 
12:39:15 SQL> -- Prepare for derivation of NTILE based params:
12:39:15 SQL> 
12:39:15 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.29
12:39:15 SQL> CREATE TABLE svm6142 COMPRESS AS
12:39:15   2  SELECT
12:39:15   3  pair
12:39:15   4  ,ydate
12:39:15   5  ,prdate
12:39:15   6  ,clse
12:39:15   7  ,g6
12:39:15   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
12:39:15   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
12:39:15  10  ,CASE WHEN trend IS NULL THEN 1
12:39:15  11  	    WHEN trend =0      THEN 1
12:39:15  12  	    ELSE trend END trend
12:39:15  13  ,cm4
12:39:15  14  ,cm6
12:39:15  15  ,cm8
12:39:15  16  ,cm10
12:39:15  17  ,cm12
12:39:15  18  ,cm14
12:39:15  19  ,cm16
12:39:15  20  ,cm18
12:39:15  21  --
12:39:15  22  ,ca4
12:39:15  23  ,ca6
12:39:15  24  ,ca8
12:39:15  25  ,ca10
12:39:15  26  ,ca12
12:39:15  27  ,ca14
12:39:15  28  ,ca16
12:39:15  29  ,ca18
12:39:15  30  --
12:39:15  31  ,cx4
12:39:15  32  ,cx6
12:39:15  33  ,cx8
12:39:15  34  ,cx10
12:39:15  35  ,cx12
12:39:15  36  ,cx14
12:39:15  37  ,cx16
12:39:15  38  ,cx18
12:39:15  39  --
12:39:15  40  ,crr4
12:39:15  41  ,crr6
12:39:15  42  ,crr8
12:39:15  43  ,crr10
12:39:15  44  ,crr12
12:39:15  45  ,crr14
12:39:15  46  ,crr16
12:39:15  47  ,crr18
12:39:15  48  --
12:39:15  49  ,hh
12:39:15  50  ,d
12:39:15  51  ,w
12:39:15  52  ,mpm
12:39:15  53  ,mph
12:39:15  54  FROM svm6122
12:39:15  55  ORDER BY ydate
12:39:15  56  /

Table created.

Elapsed: 00:00:00.36
12:39:16 SQL> 
12:39:16 SQL> -- rpt
12:39:16 SQL> 
12:39:16 SQL> SELECT
12:39:16   2  pair
12:39:16   3  ,trend
12:39:16   4  ,gatt
12:39:16   5  ,COUNT(pair)
12:39:16   6  ,AVG(g6)
12:39:16   7  FROM svm6142
12:39:16   8  GROUP BY pair,trend,gatt
12:39:16   9  ORDER BY pair,trend,gatt
12:39:16  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7182 -.00196983
usd_chf 	-1 up	      3178 .003894097
usd_chf 	-1		68
usd_chf 	 1 nup	      6745 -.00161715
usd_chf 	 1 up	      2566 .003688799
usd_chf 	 1		 4

6 rows selected.

Elapsed: 00:00:00.04
12:39:16 SQL> 
12:39:16 SQL> 
12:39:16 SQL> -- Derive NTILE based params:
12:39:16 SQL> 
12:39:16 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.19
12:39:16 SQL> CREATE TABLE svm6162 COMPRESS AS
12:39:16   2  SELECT
12:39:16   3  pair
12:39:16   4  ,ydate
12:39:16   5  ,prdate
12:39:16   6  ,clse
12:39:16   7  ,g6
12:39:16   8  ,gatt
12:39:16   9  ,gattn
12:39:16  10  ,trend
12:39:16  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
12:39:16  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
12:39:16  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
12:39:16  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
12:39:16  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
12:39:16  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
12:39:16  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
12:39:16  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
12:39:16  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
12:39:16  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
12:39:16  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
12:39:16  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
12:39:16  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
12:39:16  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
12:39:16  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
12:39:16  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
12:39:16  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
12:39:16  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
12:39:16  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
12:39:16  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
12:39:16  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
12:39:16  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
12:39:16  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
12:39:16  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
12:39:16  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
12:39:16  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
12:39:16  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
12:39:16  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
12:39:16  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
12:39:16  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
12:39:16  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
12:39:16  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
12:39:16  43  ,hh  att32
12:39:16  44  ,d   att33
12:39:16  45  ,w   att34
12:39:16  46  ,mpm att35
12:39:16  47  ,mph att36
12:39:16  48  ,trend att37
12:39:16  49  FROM svm6142
12:39:16  50  ORDER BY ydate
12:39:16  51  /

Table created.

Elapsed: 00:00:04.86
12:39:21 SQL> 
12:39:21 SQL> -- rpt
12:39:21 SQL> 
12:39:21 SQL> SELECT
12:39:21   2  pair
12:39:21   3  ,trend
12:39:21   4  ,gatt
12:39:21   5  ,COUNT(pair)
12:39:21   6  ,AVG(g6)
12:39:21   7  FROM svm6162
12:39:21   8  GROUP BY pair,trend,gatt
12:39:21   9  ORDER BY pair,trend,gatt
12:39:21  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7182 -.00196983
usd_chf 	-1 up	      3178 .003894097
usd_chf 	-1		68
usd_chf 	 1 nup	      6745 -.00161715
usd_chf 	 1 up	      2566 .003688799
usd_chf 	 1		 4

6 rows selected.

Elapsed: 00:00:00.03
12:39:21 SQL> 
12:39:21 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
12:39:21 SQL> CREATE TABLE modsrc COMPRESS AS
12:39:21   2  SELECT
12:39:21   3  pair
12:39:21   4  ,ydate
12:39:21   5  ,prdate
12:39:21   6  ,trend
12:39:21   7  ,g6
12:39:21   8  ,gatt
12:39:21   9  ,gattn
12:39:21  10  FROM svm6162
12:39:21  11  /

Table created.

Elapsed: 00:00:00.08
12:39:21 SQL> 
12:39:21 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
12:39:21 SQL> 
12:39:21 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
12:39:21 SQL> CREATE TABLE chf_ms610 COMPRESS AS
12:39:21   2  SELECT
12:39:21   3  ydate
12:39:21   4  ,trend chf_trend
12:39:21   5  ,g6    chf_g6
12:39:21   6  ,gatt  chf_gatt
12:39:21   7  ,gattn chf_gattn
12:39:21   8  FROM modsrc
12:39:21   9  /

Table created.

Elapsed: 00:00:00.07
12:39:21 SQL> 
12:39:21 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
12:39:22 SQL> 
12:39:22 SQL> -- I need a copy of the attributes:
12:39:22 SQL> 
12:39:22 SQL> 
12:39:22 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.08
12:39:22 SQL> CREATE TABLE chf_att COMPRESS AS
12:39:22   2  SELECT
12:39:22   3  ydate
12:39:22   4  ,att00 chf_att00
12:39:22   5  ,att01 chf_att01
12:39:22   6  ,att02 chf_att02
12:39:22   7  ,att03 chf_att03
12:39:22   8  ,att04 chf_att04
12:39:22   9  ,att05 chf_att05
12:39:22  10  ,att06 chf_att06
12:39:22  11  ,att07 chf_att07
12:39:22  12  ,att08 chf_att08
12:39:22  13  ,att09 chf_att09
12:39:22  14  ,att10 chf_att10
12:39:22  15  ,att11 chf_att11
12:39:22  16  ,att12 chf_att12
12:39:22  17  ,att13 chf_att13
12:39:22  18  ,att14 chf_att14
12:39:22  19  ,att15 chf_att15
12:39:22  20  ,att16 chf_att16
12:39:22  21  ,att17 chf_att17
12:39:22  22  ,att18 chf_att18
12:39:22  23  ,att19 chf_att19
12:39:22  24  ,att20 chf_att20
12:39:22  25  ,att21 chf_att21
12:39:22  26  ,att22 chf_att22
12:39:22  27  ,att23 chf_att23
12:39:22  28  ,att24 chf_att24
12:39:22  29  ,att25 chf_att25
12:39:22  30  ,att26 chf_att26
12:39:22  31  ,att27 chf_att27
12:39:22  32  ,att28 chf_att28
12:39:22  33  ,att29 chf_att29
12:39:22  34  ,att30 chf_att30
12:39:22  35  ,att31 chf_att31
12:39:22  36  ,att32 chf_att32
12:39:22  37  ,att33 chf_att33
12:39:22  38  ,att34 chf_att34
12:39:22  39  ,att35 chf_att35
12:39:22  40  ,att36 chf_att36
12:39:22  41  ,att37 chf_att37
12:39:22  42  FROM svm6162
12:39:22  43  /

Table created.

Elapsed: 00:00:00.17
12:39:22 SQL> 
12:39:22 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
12:39:22 SQL> 
12:39:22 SQL> -- rpt
12:39:22 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19743

Elapsed: 00:00:00.83
12:39:23 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19743

Elapsed: 00:00:00.00
12:39:23 SQL> 
12:39:23 SQL> --
12:39:23 SQL> -- ech610.sql
12:39:23 SQL> --
12:39:23 SQL> 
12:39:23 SQL> -- Creates views and tables for backtesting a forex SVM strategy
12:39:23 SQL> 
12:39:23 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.41
12:39:23 SQL> 
12:39:23 SQL> -- I created di5min here:
12:39:23 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
12:39:23 SQL> 
12:39:23 SQL> CREATE OR REPLACE VIEW svm6102 AS
12:39:23   2  SELECT
12:39:23   3  pair
12:39:23   4  ,ydate
12:39:23   5  ,prdate
12:39:23   6  ,rownum rnum -- acts as t in my time-series
12:39:23   7  ,clse
12:39:23   8  -- Derive a bunch of attributes from clse, the latest price:
12:39:23   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
12:39:23  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
12:39:23  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
12:39:23  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
12:39:23  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
12:39:23  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
12:39:23  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
12:39:23  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
12:39:23  17  --
12:39:23  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
12:39:23  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
12:39:23  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
12:39:23  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
12:39:23  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
12:39:23  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
12:39:23  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
12:39:23  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
12:39:23  26  --
12:39:23  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
12:39:23  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
12:39:23  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
12:39:23  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
12:39:23  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
12:39:23  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
12:39:23  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
12:39:23  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
12:39:23  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
12:39:23  36  FROM di5min WHERE pair LIKE'%ech%'
12:39:23  37  AND ydate > sysdate - 95
12:39:23  38  ORDER BY ydate
12:39:23  39  /

View created.

Elapsed: 00:00:00.05
12:39:24 SQL> 
12:39:24 SQL> -- rpt
12:39:24 SQL> 
12:39:24 SQL> SELECT
12:39:24   2  pair
12:39:24   3  ,COUNT(pair)
12:39:24   4  ,MIN(clse),MAX(clse)
12:39:24   5  ,MIN(avg6),MAX(avg6)
12:39:24   6  ,MIN(ydate),MAX(ydate)
12:39:24   7  FROM svm6102
12:39:24   8  GROUP BY pair
12:39:24   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19741 1.24213032 1.38284305 1.24505545 1.37986485 2010-09-26 20:55:01 2010-12-30 12:30:00

Elapsed: 00:00:00.80
12:39:24 SQL> 
12:39:24 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
12:39:24 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.18
12:39:25 SQL> CREATE TABLE svm6122 COMPRESS AS
12:39:25   2  SELECT
12:39:25   3  pair
12:39:25   4  ,ydate
12:39:25   5  ,prdate
12:39:25   6  ,clse
12:39:25   7  -- g6 is important. I want to predict g6:
12:39:25   8  ,ld6 - clse g6
12:39:25   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
12:39:25  10  -- I want more attributes from the ones I derived above:
12:39:25  11  -- clse relation to moving-min
12:39:25  12  ,clse-min4  cm4
12:39:25  13  ,clse-min6  cm6
12:39:25  14  ,clse-min8  cm8
12:39:25  15  ,clse-min10 cm10
12:39:25  16  ,clse-min12 cm12
12:39:25  17  ,clse-min14 cm14
12:39:25  18  ,clse-min16 cm16
12:39:25  19  ,clse-min18 cm18
12:39:25  20  -- clse relation to moving-avg
12:39:25  21  ,clse-avg4  ca4
12:39:25  22  ,clse-avg6  ca6
12:39:25  23  ,clse-avg8  ca8
12:39:25  24  ,clse-avg10 ca10
12:39:25  25  ,clse-avg12 ca12
12:39:25  26  ,clse-avg14 ca14
12:39:25  27  ,clse-avg16 ca16
12:39:25  28  ,clse-avg18 ca18
12:39:25  29  -- clse relation to moving-max
12:39:25  30  ,clse-max4  cx4
12:39:25  31  ,clse-max6  cx6
12:39:25  32  ,clse-max8  cx8
12:39:25  33  ,clse-max10 cx10
12:39:25  34  ,clse-max12 cx12
12:39:25  35  ,clse-max14 cx14
12:39:25  36  ,clse-max16 cx16
12:39:25  37  ,clse-max18 cx18
12:39:25  38  -- Derive more attributes.
12:39:25  39  -- I want to use CORR() here to help SVM see the shape of the series.
12:39:25  40  -- But COVAR_POP is more stable:
12:39:25  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
12:39:25  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
12:39:25  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
12:39:25  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
12:39:25  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
12:39:25  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
12:39:25  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
12:39:25  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
12:39:25  49  -- Derive date related attributes:
12:39:25  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
12:39:25  51  ,0+TO_CHAR(ydate,'D')d
12:39:25  52  ,0+TO_CHAR(ydate,'W')w
12:39:25  53  -- mpm stands for minutes-past-midnight:
12:39:25  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
12:39:25  55  -- mph stands for minutes-past-hour:
12:39:25  56  ,0+TO_CHAR(ydate,'MI')mph
12:39:25  57  FROM svm6102
12:39:25  58  ORDER BY ydate
12:39:25  59  /

Table created.

Elapsed: 00:00:02.10
12:39:27 SQL> 
12:39:27 SQL> -- rpt
12:39:27 SQL> 
12:39:27 SQL> SELECT
12:39:27   2  pair
12:39:27   3  ,COUNT(pair)
12:39:27   4  ,MIN(clse),MAX(clse)
12:39:27   5  ,MIN(ydate),MAX(ydate)
12:39:27   6  FROM svm6122
12:39:27   7  GROUP BY pair
12:39:27   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19741 1.24213032 1.38284305 2010-09-26 20:55:01 2010-12-30 12:30:00

Elapsed: 00:00:00.03
12:39:27 SQL> 
12:39:27 SQL> -- Prepare for derivation of NTILE based params:
12:39:27 SQL> 
12:39:27 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.24
12:39:27 SQL> CREATE TABLE svm6142 COMPRESS AS
12:39:27   2  SELECT
12:39:27   3  pair
12:39:27   4  ,ydate
12:39:27   5  ,prdate
12:39:27   6  ,clse
12:39:27   7  ,g6
12:39:27   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
12:39:27   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
12:39:27  10  ,CASE WHEN trend IS NULL THEN 1
12:39:27  11  	    WHEN trend =0      THEN 1
12:39:27  12  	    ELSE trend END trend
12:39:27  13  ,cm4
12:39:27  14  ,cm6
12:39:27  15  ,cm8
12:39:27  16  ,cm10
12:39:27  17  ,cm12
12:39:27  18  ,cm14
12:39:27  19  ,cm16
12:39:27  20  ,cm18
12:39:27  21  --
12:39:27  22  ,ca4
12:39:27  23  ,ca6
12:39:27  24  ,ca8
12:39:27  25  ,ca10
12:39:27  26  ,ca12
12:39:27  27  ,ca14
12:39:27  28  ,ca16
12:39:27  29  ,ca18
12:39:27  30  --
12:39:27  31  ,cx4
12:39:27  32  ,cx6
12:39:27  33  ,cx8
12:39:27  34  ,cx10
12:39:27  35  ,cx12
12:39:27  36  ,cx14
12:39:27  37  ,cx16
12:39:27  38  ,cx18
12:39:27  39  --
12:39:27  40  ,crr4
12:39:27  41  ,crr6
12:39:27  42  ,crr8
12:39:27  43  ,crr10
12:39:27  44  ,crr12
12:39:27  45  ,crr14
12:39:27  46  ,crr16
12:39:27  47  ,crr18
12:39:27  48  --
12:39:27  49  ,hh
12:39:27  50  ,d
12:39:27  51  ,w
12:39:27  52  ,mpm
12:39:27  53  ,mph
12:39:27  54  FROM svm6122
12:39:27  55  ORDER BY ydate
12:39:27  56  /

Table created.

Elapsed: 00:00:00.39
12:39:27 SQL> 
12:39:27 SQL> -- rpt
12:39:27 SQL> 
12:39:27 SQL> SELECT
12:39:27   2  pair
12:39:27   3  ,trend
12:39:27   4  ,gatt
12:39:27   5  ,COUNT(pair)
12:39:27   6  ,AVG(g6)
12:39:27   7  FROM svm6142
12:39:27   8  GROUP BY pair,trend,gatt
12:39:27   9  ORDER BY pair,trend,gatt
12:39:27  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6608 -.00220733
ech_usd 	-1 up	      3603 .003537722
ech_usd 	-1		69
ech_usd 	 1 nup	      6573 -.00228976
ech_usd 	 1 up	      2885 .003818029
ech_usd 	 1		 3

6 rows selected.

Elapsed: 00:00:00.04
12:39:27 SQL> 
12:39:27 SQL> 
12:39:27 SQL> -- Derive NTILE based params:
12:39:27 SQL> 
12:39:27 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.19
12:39:28 SQL> CREATE TABLE svm6162 COMPRESS AS
12:39:28   2  SELECT
12:39:28   3  pair
12:39:28   4  ,ydate
12:39:28   5  ,prdate
12:39:28   6  ,clse
12:39:28   7  ,g6
12:39:28   8  ,gatt
12:39:28   9  ,gattn
12:39:28  10  ,trend
12:39:28  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
12:39:28  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
12:39:28  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
12:39:28  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
12:39:28  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
12:39:28  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
12:39:28  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
12:39:28  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
12:39:28  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
12:39:28  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
12:39:28  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
12:39:28  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
12:39:28  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
12:39:28  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
12:39:28  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
12:39:28  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
12:39:28  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
12:39:28  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
12:39:28  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
12:39:28  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
12:39:28  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
12:39:28  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
12:39:28  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
12:39:28  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
12:39:28  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
12:39:28  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
12:39:28  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
12:39:28  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
12:39:28  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
12:39:28  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
12:39:28  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
12:39:28  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
12:39:28  43  ,hh  att32
12:39:28  44  ,d   att33
12:39:28  45  ,w   att34
12:39:28  46  ,mpm att35
12:39:28  47  ,mph att36
12:39:28  48  ,trend att37
12:39:28  49  FROM svm6142
12:39:28  50  ORDER BY ydate
12:39:28  51  /

Table created.

Elapsed: 00:00:04.86
12:39:32 SQL> 
12:39:32 SQL> -- rpt
12:39:32 SQL> 
12:39:32 SQL> SELECT
12:39:32   2  pair
12:39:32   3  ,trend
12:39:32   4  ,gatt
12:39:32   5  ,COUNT(pair)
12:39:32   6  ,AVG(g6)
12:39:32   7  FROM svm6162
12:39:32   8  GROUP BY pair,trend,gatt
12:39:32   9  ORDER BY pair,trend,gatt
12:39:32  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6608 -.00220733
ech_usd 	-1 up	      3603 .003537722
ech_usd 	-1		69
ech_usd 	 1 nup	      6573 -.00228976
ech_usd 	 1 up	      2885 .003818029
ech_usd 	 1		 3

6 rows selected.

Elapsed: 00:00:00.04
12:39:32 SQL> 
12:39:32 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
12:39:33 SQL> CREATE TABLE modsrc COMPRESS AS
12:39:33   2  SELECT
12:39:33   3  pair
12:39:33   4  ,ydate
12:39:33   5  ,prdate
12:39:33   6  ,trend
12:39:33   7  ,g6
12:39:33   8  ,gatt
12:39:33   9  ,gattn
12:39:33  10  FROM svm6162
12:39:33  11  /

Table created.

Elapsed: 00:00:00.09
12:39:33 SQL> 
12:39:33 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
12:39:33 SQL> 
12:39:33 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
12:39:33 SQL> CREATE TABLE ech_ms610 COMPRESS AS
12:39:33   2  SELECT
12:39:33   3  ydate
12:39:33   4  ,trend ech_trend
12:39:33   5  ,g6    ech_g6
12:39:33   6  ,gatt  ech_gatt
12:39:33   7  ,gattn ech_gattn
12:39:33   8  FROM modsrc
12:39:33   9  /

Table created.

Elapsed: 00:00:00.06
12:39:33 SQL> 
12:39:33 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
12:39:33 SQL> 
12:39:33 SQL> -- I need a copy of the attributes:
12:39:33 SQL> 
12:39:33 SQL> 
12:39:33 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.04
12:39:33 SQL> CREATE TABLE ech_att COMPRESS AS
12:39:33   2  SELECT
12:39:33   3  ydate
12:39:33   4  ,att00 ech_att00
12:39:33   5  ,att01 ech_att01
12:39:33   6  ,att02 ech_att02
12:39:33   7  ,att03 ech_att03
12:39:33   8  ,att04 ech_att04
12:39:33   9  ,att05 ech_att05
12:39:33  10  ,att06 ech_att06
12:39:33  11  ,att07 ech_att07
12:39:33  12  ,att08 ech_att08
12:39:33  13  ,att09 ech_att09
12:39:33  14  ,att10 ech_att10
12:39:33  15  ,att11 ech_att11
12:39:33  16  ,att12 ech_att12
12:39:33  17  ,att13 ech_att13
12:39:33  18  ,att14 ech_att14
12:39:33  19  ,att15 ech_att15
12:39:33  20  ,att16 ech_att16
12:39:33  21  ,att17 ech_att17
12:39:33  22  ,att18 ech_att18
12:39:33  23  ,att19 ech_att19
12:39:33  24  ,att20 ech_att20
12:39:33  25  ,att21 ech_att21
12:39:33  26  ,att22 ech_att22
12:39:33  27  ,att23 ech_att23
12:39:33  28  ,att24 ech_att24
12:39:33  29  ,att25 ech_att25
12:39:33  30  ,att26 ech_att26
12:39:33  31  ,att27 ech_att27
12:39:33  32  ,att28 ech_att28
12:39:33  33  ,att29 ech_att29
12:39:33  34  ,att30 ech_att30
12:39:33  35  ,att31 ech_att31
12:39:33  36  ,att32 ech_att32
12:39:33  37  ,att33 ech_att33
12:39:33  38  ,att34 ech_att34
12:39:33  39  ,att35 ech_att35
12:39:33  40  ,att36 ech_att36
12:39:33  41  ,att37 ech_att37
12:39:33  42  FROM svm6162
12:39:33  43  /

Table created.

Elapsed: 00:00:00.17
12:39:33 SQL> 
12:39:33 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
12:39:34 SQL> 
12:39:34 SQL> -- rpt
12:39:34 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19741

Elapsed: 00:00:00.79
12:39:35 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19741

Elapsed: 00:00:00.00
12:39:35 SQL> 
12:39:35 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
