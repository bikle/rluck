
SQL*Plus: Release 11.2.0.1.0 Production on Thu Jan 6 20:48:26 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

20:48:26 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
20:48:26 SQL> 20:48:26 SQL> --
20:48:26 SQL> -- eur610.sql
20:48:26 SQL> --
20:48:26 SQL> 
20:48:26 SQL> -- Creates views and tables for backtesting a forex SVM strategy
20:48:26 SQL> 
20:48:26 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.03
20:48:26 SQL> 
20:48:26 SQL> -- I created di5min here:
20:48:26 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
20:48:26 SQL> 
20:48:26 SQL> CREATE OR REPLACE VIEW svm6102 AS
20:48:26   2  SELECT
20:48:26   3  pair
20:48:26   4  ,ydate
20:48:26   5  ,prdate
20:48:26   6  ,rownum rnum -- acts as t in my time-series
20:48:26   7  ,clse
20:48:26   8  -- Derive a bunch of attributes from clse, the latest price:
20:48:26   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
20:48:26  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
20:48:26  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
20:48:26  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
20:48:26  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
20:48:26  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
20:48:26  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
20:48:26  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
20:48:26  17  --
20:48:26  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
20:48:26  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
20:48:26  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
20:48:26  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
20:48:26  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
20:48:26  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
20:48:26  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
20:48:26  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
20:48:26  26  --
20:48:26  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
20:48:26  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
20:48:26  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
20:48:26  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
20:48:26  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
20:48:26  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
20:48:26  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
20:48:26  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
20:48:26  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
20:48:26  36  FROM di5min WHERE pair LIKE'%eur%'
20:48:26  37  AND ydate > sysdate - 95
20:48:26  38  ORDER BY ydate
20:48:26  39  /

View created.

Elapsed: 00:00:00.17
20:48:26 SQL> 
20:48:26 SQL> -- rpt
20:48:26 SQL> 
20:48:26 SQL> SELECT
20:48:26   2  pair
20:48:26   3  ,COUNT(pair)
20:48:26   4  ,MIN(clse),MAX(clse)
20:48:26   5  ,MIN(avg6),MAX(avg6)
20:48:26   6  ,MIN(ydate),MAX(ydate)
20:48:26   7  FROM svm6102
20:48:26   8  GROUP BY pair
20:48:26   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19813    1.29735	   1.4273 1.29875103 1.42436233 2010-10-03 20:55:01 2011-01-06 20:45:00

Elapsed: 00:00:00.94
20:48:27 SQL> 
20:48:27 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
20:48:27 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.07
20:48:27 SQL> CREATE TABLE svm6122 COMPRESS AS
20:48:27   2  SELECT
20:48:27   3  pair
20:48:27   4  ,ydate
20:48:27   5  ,prdate
20:48:27   6  ,clse
20:48:27   7  -- g6 is important. I want to predict g6:
20:48:27   8  ,ld6 - clse g6
20:48:27   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
20:48:27  10  -- I want more attributes from the ones I derived above:
20:48:27  11  -- clse relation to moving-min
20:48:27  12  ,clse-min4  cm4
20:48:27  13  ,clse-min6  cm6
20:48:27  14  ,clse-min8  cm8
20:48:27  15  ,clse-min10 cm10
20:48:27  16  ,clse-min12 cm12
20:48:27  17  ,clse-min14 cm14
20:48:27  18  ,clse-min16 cm16
20:48:27  19  ,clse-min18 cm18
20:48:27  20  -- clse relation to moving-avg
20:48:27  21  ,clse-avg4  ca4
20:48:27  22  ,clse-avg6  ca6
20:48:27  23  ,clse-avg8  ca8
20:48:27  24  ,clse-avg10 ca10
20:48:27  25  ,clse-avg12 ca12
20:48:27  26  ,clse-avg14 ca14
20:48:27  27  ,clse-avg16 ca16
20:48:27  28  ,clse-avg18 ca18
20:48:27  29  -- clse relation to moving-max
20:48:27  30  ,clse-max4  cx4
20:48:27  31  ,clse-max6  cx6
20:48:27  32  ,clse-max8  cx8
20:48:27  33  ,clse-max10 cx10
20:48:27  34  ,clse-max12 cx12
20:48:27  35  ,clse-max14 cx14
20:48:27  36  ,clse-max16 cx16
20:48:27  37  ,clse-max18 cx18
20:48:27  38  -- Derive more attributes.
20:48:27  39  -- I want to use CORR() here to help SVM see the shape of the series.
20:48:27  40  -- But COVAR_POP is more stable:
20:48:27  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
20:48:27  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
20:48:27  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
20:48:27  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
20:48:27  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
20:48:27  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
20:48:27  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
20:48:27  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
20:48:27  49  -- Derive date related attributes:
20:48:27  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
20:48:27  51  ,0+TO_CHAR(ydate,'D')d
20:48:27  52  ,0+TO_CHAR(ydate,'W')w
20:48:27  53  -- mpm stands for minutes-past-midnight:
20:48:27  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
20:48:27  55  -- mph stands for minutes-past-hour:
20:48:27  56  ,0+TO_CHAR(ydate,'MI')mph
20:48:27  57  FROM svm6102
20:48:27  58  ORDER BY ydate
20:48:27  59  /

Table created.

Elapsed: 00:00:02.51
20:48:30 SQL> 
20:48:30 SQL> -- rpt
20:48:30 SQL> 
20:48:30 SQL> SELECT
20:48:30   2  pair
20:48:30   3  ,COUNT(pair)
20:48:30   4  ,MIN(clse),MAX(clse)
20:48:30   5  ,MIN(ydate),MAX(ydate)
20:48:30   6  FROM svm6122
20:48:30   7  GROUP BY pair
20:48:30   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19813    1.29735	   1.4273 2010-10-03 20:55:01 2011-01-06 20:45:00

Elapsed: 00:00:00.05
20:48:30 SQL> 
20:48:30 SQL> -- Prepare for derivation of NTILE based params:
20:48:30 SQL> 
20:48:30 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.44
20:48:30 SQL> CREATE TABLE svm6142 COMPRESS AS
20:48:30   2  SELECT
20:48:30   3  pair
20:48:30   4  ,ydate
20:48:30   5  ,prdate
20:48:30   6  ,clse
20:48:30   7  ,g6
20:48:30   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
20:48:30   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
20:48:30  10  ,CASE WHEN trend IS NULL THEN 1
20:48:30  11  	    WHEN trend =0      THEN 1
20:48:30  12  	    ELSE trend END trend
20:48:30  13  ,cm4
20:48:30  14  ,cm6
20:48:30  15  ,cm8
20:48:30  16  ,cm10
20:48:30  17  ,cm12
20:48:30  18  ,cm14
20:48:30  19  ,cm16
20:48:30  20  ,cm18
20:48:30  21  --
20:48:30  22  ,ca4
20:48:30  23  ,ca6
20:48:30  24  ,ca8
20:48:30  25  ,ca10
20:48:30  26  ,ca12
20:48:30  27  ,ca14
20:48:30  28  ,ca16
20:48:30  29  ,ca18
20:48:30  30  --
20:48:30  31  ,cx4
20:48:30  32  ,cx6
20:48:30  33  ,cx8
20:48:30  34  ,cx10
20:48:30  35  ,cx12
20:48:30  36  ,cx14
20:48:30  37  ,cx16
20:48:30  38  ,cx18
20:48:30  39  --
20:48:30  40  ,crr4
20:48:30  41  ,crr6
20:48:30  42  ,crr8
20:48:30  43  ,crr10
20:48:30  44  ,crr12
20:48:30  45  ,crr14
20:48:30  46  ,crr16
20:48:30  47  ,crr18
20:48:30  48  --
20:48:30  49  ,hh
20:48:30  50  ,d
20:48:30  51  ,w
20:48:30  52  ,mpm
20:48:30  53  ,mph
20:48:30  54  FROM svm6122
20:48:30  55  ORDER BY ydate
20:48:30  56  /

Table created.

Elapsed: 00:00:00.39
20:48:31 SQL> 
20:48:31 SQL> -- rpt
20:48:31 SQL> 
20:48:31 SQL> SELECT
20:48:31   2  pair
20:48:31   3  ,trend
20:48:31   4  ,gatt
20:48:31   5  ,COUNT(pair)
20:48:31   6  ,AVG(g6)
20:48:31   7  FROM svm6142
20:48:31   8  GROUP BY pair,trend,gatt
20:48:31   9  ORDER BY pair,trend,gatt
20:48:31  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6593 -.00317461
eur_usd 	-1 up	      3570 .004447223
eur_usd 	-1		72
eur_usd 	 1 nup	      5873 -.00325288
eur_usd 	 1 up	      3705 .005071238

Elapsed: 00:00:00.03
20:48:31 SQL> 
20:48:31 SQL> 
20:48:31 SQL> -- Derive NTILE based params:
20:48:31 SQL> 
20:48:31 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.07
20:48:31 SQL> CREATE TABLE svm6162 COMPRESS AS
20:48:31   2  SELECT
20:48:31   3  pair
20:48:31   4  ,ydate
20:48:31   5  ,prdate
20:48:31   6  ,clse
20:48:31   7  ,g6
20:48:31   8  ,gatt
20:48:31   9  ,gattn
20:48:31  10  ,trend
20:48:31  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
20:48:31  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
20:48:31  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
20:48:31  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
20:48:31  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
20:48:31  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
20:48:31  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
20:48:31  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
20:48:31  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
20:48:31  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
20:48:31  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
20:48:31  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
20:48:31  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
20:48:31  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
20:48:31  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
20:48:31  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
20:48:31  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
20:48:31  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
20:48:31  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
20:48:31  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
20:48:31  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
20:48:31  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
20:48:31  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
20:48:31  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
20:48:31  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
20:48:31  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
20:48:31  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
20:48:31  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
20:48:31  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
20:48:31  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
20:48:31  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
20:48:31  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
20:48:31  43  ,hh  att32
20:48:31  44  ,d   att33
20:48:31  45  ,w   att34
20:48:31  46  ,mpm att35
20:48:31  47  ,mph att36
20:48:31  48  ,trend att37
20:48:31  49  FROM svm6142
20:48:31  50  ORDER BY ydate
20:48:31  51  /

Table created.

Elapsed: 00:00:04.85
20:48:36 SQL> 
20:48:36 SQL> -- rpt
20:48:36 SQL> 
20:48:36 SQL> SELECT
20:48:36   2  pair
20:48:36   3  ,trend
20:48:36   4  ,gatt
20:48:36   5  ,COUNT(pair)
20:48:36   6  ,AVG(g6)
20:48:36   7  FROM svm6162
20:48:36   8  GROUP BY pair,trend,gatt
20:48:36   9  ORDER BY pair,trend,gatt
20:48:36  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6593 -.00317461
eur_usd 	-1 up	      3570 .004447223
eur_usd 	-1		72
eur_usd 	 1 nup	      5873 -.00325288
eur_usd 	 1 up	      3705 .005071238

Elapsed: 00:00:00.03
20:48:36 SQL> 
20:48:36 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.09
20:48:36 SQL> CREATE TABLE modsrc COMPRESS AS
20:48:36   2  SELECT
20:48:36   3  pair
20:48:36   4  ,ydate
20:48:36   5  ,prdate
20:48:36   6  ,trend
20:48:36   7  ,g6
20:48:36   8  ,gatt
20:48:36   9  ,gattn
20:48:36  10  FROM svm6162
20:48:36  11  /

Table created.

Elapsed: 00:00:00.09
20:48:36 SQL> 
20:48:36 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
20:48:36 SQL> 
20:48:36 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
20:48:36 SQL> CREATE TABLE eur_ms610 COMPRESS AS
20:48:36   2  SELECT
20:48:36   3  ydate
20:48:36   4  ,trend eur_trend
20:48:36   5  ,g6    eur_g6
20:48:36   6  ,gatt  eur_gatt
20:48:36   7  ,gattn eur_gattn
20:48:36   8  FROM modsrc
20:48:36   9  /

Table created.

Elapsed: 00:00:00.07
20:48:36 SQL> 
20:48:36 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.14
20:48:36 SQL> 
20:48:36 SQL> -- I need a copy of the attributes:
20:48:36 SQL> 
20:48:36 SQL> 
20:48:36 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.04
20:48:36 SQL> CREATE TABLE eur_att COMPRESS AS
20:48:36   2  SELECT
20:48:36   3  ydate
20:48:36   4  ,att00 eur_att00
20:48:36   5  ,att01 eur_att01
20:48:36   6  ,att02 eur_att02
20:48:36   7  ,att03 eur_att03
20:48:36   8  ,att04 eur_att04
20:48:36   9  ,att05 eur_att05
20:48:36  10  ,att06 eur_att06
20:48:36  11  ,att07 eur_att07
20:48:36  12  ,att08 eur_att08
20:48:36  13  ,att09 eur_att09
20:48:36  14  ,att10 eur_att10
20:48:36  15  ,att11 eur_att11
20:48:36  16  ,att12 eur_att12
20:48:36  17  ,att13 eur_att13
20:48:36  18  ,att14 eur_att14
20:48:36  19  ,att15 eur_att15
20:48:36  20  ,att16 eur_att16
20:48:36  21  ,att17 eur_att17
20:48:36  22  ,att18 eur_att18
20:48:36  23  ,att19 eur_att19
20:48:36  24  ,att20 eur_att20
20:48:36  25  ,att21 eur_att21
20:48:36  26  ,att22 eur_att22
20:48:36  27  ,att23 eur_att23
20:48:36  28  ,att24 eur_att24
20:48:36  29  ,att25 eur_att25
20:48:36  30  ,att26 eur_att26
20:48:36  31  ,att27 eur_att27
20:48:36  32  ,att28 eur_att28
20:48:36  33  ,att29 eur_att29
20:48:36  34  ,att30 eur_att30
20:48:36  35  ,att31 eur_att31
20:48:36  36  ,att32 eur_att32
20:48:36  37  ,att33 eur_att33
20:48:36  38  ,att34 eur_att34
20:48:36  39  ,att35 eur_att35
20:48:36  40  ,att36 eur_att36
20:48:36  41  ,att37 eur_att37
20:48:36  42  FROM svm6162
20:48:36  43  /

Table created.

Elapsed: 00:00:00.18
20:48:37 SQL> 
20:48:37 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
20:48:37 SQL> 
20:48:37 SQL> -- rpt
20:48:37 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19813

Elapsed: 00:00:00.92
20:48:38 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19813

Elapsed: 00:00:00.01
20:48:38 SQL> 
20:48:38 SQL> --
20:48:38 SQL> -- aud610.sql
20:48:38 SQL> --
20:48:38 SQL> 
20:48:38 SQL> -- Creates views and tables for backtesting a forex SVM strategy
20:48:38 SQL> 
20:48:38 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.50
20:48:38 SQL> 
20:48:38 SQL> -- I created di5min here:
20:48:38 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
20:48:38 SQL> 
20:48:38 SQL> CREATE OR REPLACE VIEW svm6102 AS
20:48:38   2  SELECT
20:48:38   3  pair
20:48:38   4  ,ydate
20:48:38   5  ,prdate
20:48:38   6  ,rownum rnum -- acts as t in my time-series
20:48:38   7  ,clse
20:48:38   8  -- Derive a bunch of attributes from clse, the latest price:
20:48:38   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
20:48:38  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
20:48:38  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
20:48:38  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
20:48:38  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
20:48:38  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
20:48:38  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
20:48:38  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
20:48:38  17  --
20:48:38  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
20:48:38  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
20:48:38  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
20:48:38  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
20:48:38  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
20:48:38  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
20:48:38  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
20:48:38  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
20:48:38  26  --
20:48:38  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
20:48:38  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
20:48:38  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
20:48:38  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
20:48:38  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
20:48:38  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
20:48:38  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
20:48:38  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
20:48:38  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
20:48:38  36  FROM di5min WHERE pair LIKE'%aud%'
20:48:38  37  AND ydate > sysdate - 95
20:48:38  38  ORDER BY ydate
20:48:38  39  /

View created.

Elapsed: 00:00:00.04
20:48:38 SQL> 
20:48:38 SQL> -- rpt
20:48:38 SQL> 
20:48:38 SQL> SELECT
20:48:38   2  pair
20:48:38   3  ,COUNT(pair)
20:48:38   4  ,MIN(clse),MAX(clse)
20:48:38   5  ,MIN(avg6),MAX(avg6)
20:48:38   6  ,MIN(ydate),MAX(ydate)
20:48:38   7  FROM svm6102
20:48:38   8  GROUP BY pair
20:48:38   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19810	.95405	  1.02495 .957141438 1.02284247 2010-10-03 20:55:01 2011-01-06 20:45:00

Elapsed: 00:00:00.89
20:48:39 SQL> 
20:48:39 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
20:48:39 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.33
20:48:40 SQL> CREATE TABLE svm6122 COMPRESS AS
20:48:40   2  SELECT
20:48:40   3  pair
20:48:40   4  ,ydate
20:48:40   5  ,prdate
20:48:40   6  ,clse
20:48:40   7  -- g6 is important. I want to predict g6:
20:48:40   8  ,ld6 - clse g6
20:48:40   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
20:48:40  10  -- I want more attributes from the ones I derived above:
20:48:40  11  -- clse relation to moving-min
20:48:40  12  ,clse-min4  cm4
20:48:40  13  ,clse-min6  cm6
20:48:40  14  ,clse-min8  cm8
20:48:40  15  ,clse-min10 cm10
20:48:40  16  ,clse-min12 cm12
20:48:40  17  ,clse-min14 cm14
20:48:40  18  ,clse-min16 cm16
20:48:40  19  ,clse-min18 cm18
20:48:40  20  -- clse relation to moving-avg
20:48:40  21  ,clse-avg4  ca4
20:48:40  22  ,clse-avg6  ca6
20:48:40  23  ,clse-avg8  ca8
20:48:40  24  ,clse-avg10 ca10
20:48:40  25  ,clse-avg12 ca12
20:48:40  26  ,clse-avg14 ca14
20:48:40  27  ,clse-avg16 ca16
20:48:40  28  ,clse-avg18 ca18
20:48:40  29  -- clse relation to moving-max
20:48:40  30  ,clse-max4  cx4
20:48:40  31  ,clse-max6  cx6
20:48:40  32  ,clse-max8  cx8
20:48:40  33  ,clse-max10 cx10
20:48:40  34  ,clse-max12 cx12
20:48:40  35  ,clse-max14 cx14
20:48:40  36  ,clse-max16 cx16
20:48:40  37  ,clse-max18 cx18
20:48:40  38  -- Derive more attributes.
20:48:40  39  -- I want to use CORR() here to help SVM see the shape of the series.
20:48:40  40  -- But COVAR_POP is more stable:
20:48:40  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
20:48:40  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
20:48:40  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
20:48:40  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
20:48:40  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
20:48:40  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
20:48:40  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
20:48:40  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
20:48:40  49  -- Derive date related attributes:
20:48:40  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
20:48:40  51  ,0+TO_CHAR(ydate,'D')d
20:48:40  52  ,0+TO_CHAR(ydate,'W')w
20:48:40  53  -- mpm stands for minutes-past-midnight:
20:48:40  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
20:48:40  55  -- mph stands for minutes-past-hour:
20:48:40  56  ,0+TO_CHAR(ydate,'MI')mph
20:48:40  57  FROM svm6102
20:48:40  58  ORDER BY ydate
20:48:40  59  /

Table created.

Elapsed: 00:00:02.10
20:48:42 SQL> 
20:48:42 SQL> -- rpt
20:48:42 SQL> 
20:48:42 SQL> SELECT
20:48:42   2  pair
20:48:42   3  ,COUNT(pair)
20:48:42   4  ,MIN(clse),MAX(clse)
20:48:42   5  ,MIN(ydate),MAX(ydate)
20:48:42   6  FROM svm6122
20:48:42   7  GROUP BY pair
20:48:42   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19810	.95405	  1.02495 2010-10-03 20:55:01 2011-01-06 20:45:00

Elapsed: 00:00:00.03
20:48:42 SQL> 
20:48:42 SQL> -- Prepare for derivation of NTILE based params:
20:48:42 SQL> 
20:48:42 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.28
20:48:42 SQL> CREATE TABLE svm6142 COMPRESS AS
20:48:42   2  SELECT
20:48:42   3  pair
20:48:42   4  ,ydate
20:48:42   5  ,prdate
20:48:42   6  ,clse
20:48:42   7  ,g6
20:48:42   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
20:48:42   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
20:48:42  10  ,CASE WHEN trend IS NULL THEN 1
20:48:42  11  	    WHEN trend =0      THEN 1
20:48:42  12  	    ELSE trend END trend
20:48:42  13  ,cm4
20:48:42  14  ,cm6
20:48:42  15  ,cm8
20:48:42  16  ,cm10
20:48:42  17  ,cm12
20:48:42  18  ,cm14
20:48:42  19  ,cm16
20:48:42  20  ,cm18
20:48:42  21  --
20:48:42  22  ,ca4
20:48:42  23  ,ca6
20:48:42  24  ,ca8
20:48:42  25  ,ca10
20:48:42  26  ,ca12
20:48:42  27  ,ca14
20:48:42  28  ,ca16
20:48:42  29  ,ca18
20:48:42  30  --
20:48:42  31  ,cx4
20:48:42  32  ,cx6
20:48:42  33  ,cx8
20:48:42  34  ,cx10
20:48:42  35  ,cx12
20:48:42  36  ,cx14
20:48:42  37  ,cx16
20:48:42  38  ,cx18
20:48:42  39  --
20:48:42  40  ,crr4
20:48:42  41  ,crr6
20:48:42  42  ,crr8
20:48:42  43  ,crr10
20:48:42  44  ,crr12
20:48:42  45  ,crr14
20:48:42  46  ,crr16
20:48:42  47  ,crr18
20:48:42  48  --
20:48:42  49  ,hh
20:48:42  50  ,d
20:48:42  51  ,w
20:48:42  52  ,mpm
20:48:42  53  ,mph
20:48:42  54  FROM svm6122
20:48:42  55  ORDER BY ydate
20:48:42  56  /

Table created.

Elapsed: 00:00:00.43
20:48:42 SQL> 
20:48:42 SQL> -- rpt
20:48:42 SQL> 
20:48:42 SQL> SELECT
20:48:42   2  pair
20:48:42   3  ,trend
20:48:42   4  ,gatt
20:48:42   5  ,COUNT(pair)
20:48:42   6  ,AVG(g6)
20:48:42   7  FROM svm6142
20:48:42   8  GROUP BY pair,trend,gatt
20:48:42   9  ORDER BY pair,trend,gatt
20:48:42  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5715 -.00214975
aud_usd 	-1 up	      3701 .003745866
aud_usd 	-1		72
aud_usd 	 1 nup	      6729 -.00213846
aud_usd 	 1 up	      3593 .004054752

Elapsed: 00:00:00.04
20:48:43 SQL> 
20:48:43 SQL> 
20:48:43 SQL> -- Derive NTILE based params:
20:48:43 SQL> 
20:48:43 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.21
20:48:43 SQL> CREATE TABLE svm6162 COMPRESS AS
20:48:43   2  SELECT
20:48:43   3  pair
20:48:43   4  ,ydate
20:48:43   5  ,prdate
20:48:43   6  ,clse
20:48:43   7  ,g6
20:48:43   8  ,gatt
20:48:43   9  ,gattn
20:48:43  10  ,trend
20:48:43  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
20:48:43  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
20:48:43  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
20:48:43  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
20:48:43  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
20:48:43  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
20:48:43  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
20:48:43  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
20:48:43  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
20:48:43  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
20:48:43  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
20:48:43  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
20:48:43  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
20:48:43  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
20:48:43  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
20:48:43  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
20:48:43  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
20:48:43  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
20:48:43  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
20:48:43  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
20:48:43  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
20:48:43  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
20:48:43  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
20:48:43  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
20:48:43  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
20:48:43  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
20:48:43  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
20:48:43  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
20:48:43  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
20:48:43  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
20:48:43  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
20:48:43  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
20:48:43  43  ,hh  att32
20:48:43  44  ,d   att33
20:48:43  45  ,w   att34
20:48:43  46  ,mpm att35
20:48:43  47  ,mph att36
20:48:43  48  ,trend att37
20:48:43  49  FROM svm6142
20:48:43  50  ORDER BY ydate
20:48:43  51  /

Table created.

Elapsed: 00:00:04.92
20:48:48 SQL> 
20:48:48 SQL> -- rpt
20:48:48 SQL> 
20:48:48 SQL> SELECT
20:48:48   2  pair
20:48:48   3  ,trend
20:48:48   4  ,gatt
20:48:48   5  ,COUNT(pair)
20:48:48   6  ,AVG(g6)
20:48:48   7  FROM svm6162
20:48:48   8  GROUP BY pair,trend,gatt
20:48:48   9  ORDER BY pair,trend,gatt
20:48:48  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5715 -.00214975
aud_usd 	-1 up	      3701 .003745866
aud_usd 	-1		72
aud_usd 	 1 nup	      6729 -.00213846
aud_usd 	 1 up	      3593 .004054752

Elapsed: 00:00:00.03
20:48:48 SQL> 
20:48:48 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
20:48:48 SQL> CREATE TABLE modsrc COMPRESS AS
20:48:48   2  SELECT
20:48:48   3  pair
20:48:48   4  ,ydate
20:48:48   5  ,prdate
20:48:48   6  ,trend
20:48:48   7  ,g6
20:48:48   8  ,gatt
20:48:48   9  ,gattn
20:48:48  10  FROM svm6162
20:48:48  11  /

Table created.

Elapsed: 00:00:00.09
20:48:48 SQL> 
20:48:48 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:01.23
20:48:49 SQL> 
20:48:49 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
20:48:49 SQL> CREATE TABLE aud_ms610 COMPRESS AS
20:48:49   2  SELECT
20:48:49   3  ydate
20:48:49   4  ,trend aud_trend
20:48:49   5  ,g6    aud_g6
20:48:49   6  ,gatt  aud_gatt
20:48:49   7  ,gattn aud_gattn
20:48:49   8  FROM modsrc
20:48:49   9  /

Table created.

Elapsed: 00:00:00.07
20:48:49 SQL> 
20:48:49 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
20:48:49 SQL> 
20:48:49 SQL> -- I need a copy of the attributes:
20:48:49 SQL> 
20:48:49 SQL> 
20:48:49 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.17
20:48:50 SQL> CREATE TABLE aud_att COMPRESS AS
20:48:50   2  SELECT
20:48:50   3  ydate
20:48:50   4  ,att00 aud_att00
20:48:50   5  ,att01 aud_att01
20:48:50   6  ,att02 aud_att02
20:48:50   7  ,att03 aud_att03
20:48:50   8  ,att04 aud_att04
20:48:50   9  ,att05 aud_att05
20:48:50  10  ,att06 aud_att06
20:48:50  11  ,att07 aud_att07
20:48:50  12  ,att08 aud_att08
20:48:50  13  ,att09 aud_att09
20:48:50  14  ,att10 aud_att10
20:48:50  15  ,att11 aud_att11
20:48:50  16  ,att12 aud_att12
20:48:50  17  ,att13 aud_att13
20:48:50  18  ,att14 aud_att14
20:48:50  19  ,att15 aud_att15
20:48:50  20  ,att16 aud_att16
20:48:50  21  ,att17 aud_att17
20:48:50  22  ,att18 aud_att18
20:48:50  23  ,att19 aud_att19
20:48:50  24  ,att20 aud_att20
20:48:50  25  ,att21 aud_att21
20:48:50  26  ,att22 aud_att22
20:48:50  27  ,att23 aud_att23
20:48:50  28  ,att24 aud_att24
20:48:50  29  ,att25 aud_att25
20:48:50  30  ,att26 aud_att26
20:48:50  31  ,att27 aud_att27
20:48:50  32  ,att28 aud_att28
20:48:50  33  ,att29 aud_att29
20:48:50  34  ,att30 aud_att30
20:48:50  35  ,att31 aud_att31
20:48:50  36  ,att32 aud_att32
20:48:50  37  ,att33 aud_att33
20:48:50  38  ,att34 aud_att34
20:48:50  39  ,att35 aud_att35
20:48:50  40  ,att36 aud_att36
20:48:50  41  ,att37 aud_att37
20:48:50  42  FROM svm6162
20:48:50  43  /

Table created.

Elapsed: 00:00:00.18
20:48:50 SQL> 
20:48:50 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
20:48:50 SQL> 
20:48:50 SQL> -- rpt
20:48:50 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19810

Elapsed: 00:00:00.88
20:48:51 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19810

Elapsed: 00:00:00.00
20:48:51 SQL> 
20:48:51 SQL> --
20:48:51 SQL> -- gbp610.sql
20:48:51 SQL> --
20:48:51 SQL> 
20:48:51 SQL> -- Creates views and tables for backtesting a forex SVM strategy
20:48:51 SQL> 
20:48:51 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
20:48:51 SQL> 
20:48:51 SQL> -- I created di5min here:
20:48:51 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
20:48:51 SQL> 
20:48:51 SQL> CREATE OR REPLACE VIEW svm6102 AS
20:48:51   2  SELECT
20:48:51   3  pair
20:48:51   4  ,ydate
20:48:51   5  ,prdate
20:48:51   6  ,rownum rnum -- acts as t in my time-series
20:48:51   7  ,clse
20:48:51   8  -- Derive a bunch of attributes from clse, the latest price:
20:48:51   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
20:48:51  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
20:48:51  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
20:48:51  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
20:48:51  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
20:48:51  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
20:48:51  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
20:48:51  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
20:48:51  17  --
20:48:51  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
20:48:51  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
20:48:51  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
20:48:51  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
20:48:51  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
20:48:51  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
20:48:51  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
20:48:51  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
20:48:51  26  --
20:48:52  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
20:48:52  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
20:48:52  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
20:48:52  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
20:48:52  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
20:48:52  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
20:48:52  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
20:48:52  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
20:48:52  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
20:48:52  36  FROM di5min WHERE pair LIKE'%gbp%'
20:48:52  37  AND ydate > sysdate - 95
20:48:52  38  ORDER BY ydate
20:48:52  39  /

View created.

Elapsed: 00:00:00.04
20:48:52 SQL> 
20:48:52 SQL> -- rpt
20:48:52 SQL> 
20:48:52 SQL> SELECT
20:48:52   2  pair
20:48:52   3  ,COUNT(pair)
20:48:52   4  ,MIN(clse),MAX(clse)
20:48:52   5  ,MIN(avg6),MAX(avg6)
20:48:52   6  ,MIN(ydate),MAX(ydate)
20:48:52   7  FROM svm6102
20:48:52   8  GROUP BY pair
20:48:52   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19812   1.535325	   1.6295 1.53696747 1.62716986 2010-10-03 20:55:01 2011-01-06 20:45:00

Elapsed: 00:00:00.90
20:48:52 SQL> 
20:48:52 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
20:48:52 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.29
20:48:53 SQL> CREATE TABLE svm6122 COMPRESS AS
20:48:53   2  SELECT
20:48:53   3  pair
20:48:53   4  ,ydate
20:48:53   5  ,prdate
20:48:53   6  ,clse
20:48:53   7  -- g6 is important. I want to predict g6:
20:48:53   8  ,ld6 - clse g6
20:48:53   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
20:48:53  10  -- I want more attributes from the ones I derived above:
20:48:53  11  -- clse relation to moving-min
20:48:53  12  ,clse-min4  cm4
20:48:53  13  ,clse-min6  cm6
20:48:53  14  ,clse-min8  cm8
20:48:53  15  ,clse-min10 cm10
20:48:53  16  ,clse-min12 cm12
20:48:53  17  ,clse-min14 cm14
20:48:53  18  ,clse-min16 cm16
20:48:53  19  ,clse-min18 cm18
20:48:53  20  -- clse relation to moving-avg
20:48:53  21  ,clse-avg4  ca4
20:48:53  22  ,clse-avg6  ca6
20:48:53  23  ,clse-avg8  ca8
20:48:53  24  ,clse-avg10 ca10
20:48:53  25  ,clse-avg12 ca12
20:48:53  26  ,clse-avg14 ca14
20:48:53  27  ,clse-avg16 ca16
20:48:53  28  ,clse-avg18 ca18
20:48:53  29  -- clse relation to moving-max
20:48:53  30  ,clse-max4  cx4
20:48:53  31  ,clse-max6  cx6
20:48:53  32  ,clse-max8  cx8
20:48:53  33  ,clse-max10 cx10
20:48:53  34  ,clse-max12 cx12
20:48:53  35  ,clse-max14 cx14
20:48:53  36  ,clse-max16 cx16
20:48:53  37  ,clse-max18 cx18
20:48:53  38  -- Derive more attributes.
20:48:53  39  -- I want to use CORR() here to help SVM see the shape of the series.
20:48:53  40  -- But COVAR_POP is more stable:
20:48:53  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
20:48:53  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
20:48:53  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
20:48:53  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
20:48:53  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
20:48:53  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
20:48:53  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
20:48:53  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
20:48:53  49  -- Derive date related attributes:
20:48:53  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
20:48:53  51  ,0+TO_CHAR(ydate,'D')d
20:48:53  52  ,0+TO_CHAR(ydate,'W')w
20:48:53  53  -- mpm stands for minutes-past-midnight:
20:48:53  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
20:48:53  55  -- mph stands for minutes-past-hour:
20:48:53  56  ,0+TO_CHAR(ydate,'MI')mph
20:48:53  57  FROM svm6102
20:48:53  58  ORDER BY ydate
20:48:53  59  /

Table created.

Elapsed: 00:00:02.15
20:48:55 SQL> 
20:48:55 SQL> -- rpt
20:48:55 SQL> 
20:48:55 SQL> SELECT
20:48:55   2  pair
20:48:55   3  ,COUNT(pair)
20:48:55   4  ,MIN(clse),MAX(clse)
20:48:55   5  ,MIN(ydate),MAX(ydate)
20:48:55   6  FROM svm6122
20:48:55   7  GROUP BY pair
20:48:55   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19812   1.535325	   1.6295 2010-10-03 20:55:01 2011-01-06 20:45:00

Elapsed: 00:00:00.05
20:48:55 SQL> 
20:48:55 SQL> -- Prepare for derivation of NTILE based params:
20:48:55 SQL> 
20:48:55 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.28
20:48:55 SQL> CREATE TABLE svm6142 COMPRESS AS
20:48:55   2  SELECT
20:48:55   3  pair
20:48:55   4  ,ydate
20:48:55   5  ,prdate
20:48:55   6  ,clse
20:48:55   7  ,g6
20:48:55   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
20:48:55   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
20:48:55  10  ,CASE WHEN trend IS NULL THEN 1
20:48:55  11  	    WHEN trend =0      THEN 1
20:48:55  12  	    ELSE trend END trend
20:48:55  13  ,cm4
20:48:55  14  ,cm6
20:48:55  15  ,cm8
20:48:55  16  ,cm10
20:48:55  17  ,cm12
20:48:55  18  ,cm14
20:48:55  19  ,cm16
20:48:55  20  ,cm18
20:48:55  21  --
20:48:55  22  ,ca4
20:48:55  23  ,ca6
20:48:55  24  ,ca8
20:48:55  25  ,ca10
20:48:55  26  ,ca12
20:48:55  27  ,ca14
20:48:55  28  ,ca16
20:48:55  29  ,ca18
20:48:55  30  --
20:48:55  31  ,cx4
20:48:55  32  ,cx6
20:48:55  33  ,cx8
20:48:55  34  ,cx10
20:48:55  35  ,cx12
20:48:55  36  ,cx14
20:48:55  37  ,cx16
20:48:55  38  ,cx18
20:48:55  39  --
20:48:55  40  ,crr4
20:48:55  41  ,crr6
20:48:55  42  ,crr8
20:48:55  43  ,crr10
20:48:55  44  ,crr12
20:48:55  45  ,crr14
20:48:55  46  ,crr16
20:48:55  47  ,crr18
20:48:55  48  --
20:48:55  49  ,hh
20:48:55  50  ,d
20:48:55  51  ,w
20:48:55  52  ,mpm
20:48:55  53  ,mph
20:48:55  54  FROM svm6122
20:48:55  55  ORDER BY ydate
20:48:55  56  /

Table created.

Elapsed: 00:00:00.38
20:48:56 SQL> 
20:48:56 SQL> -- rpt
20:48:56 SQL> 
20:48:56 SQL> SELECT
20:48:56   2  pair
20:48:56   3  ,trend
20:48:56   4  ,gatt
20:48:56   5  ,COUNT(pair)
20:48:56   6  ,AVG(g6)
20:48:56   7  FROM svm6142
20:48:56   8  GROUP BY pair,trend,gatt
20:48:56   9  ORDER BY pair,trend,gatt
20:48:56  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6420 -.00262479
gbp_usd 	-1 up	      3579 .004338911
gbp_usd 	-1		50
gbp_usd 	 1 nup	      6285 -.00265035
gbp_usd 	 1 up	      3456 .004524374
gbp_usd 	 1		22

6 rows selected.

Elapsed: 00:00:00.04
20:48:56 SQL> 
20:48:56 SQL> 
20:48:56 SQL> -- Derive NTILE based params:
20:48:56 SQL> 
20:48:56 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
20:48:56 SQL> CREATE TABLE svm6162 COMPRESS AS
20:48:56   2  SELECT
20:48:56   3  pair
20:48:56   4  ,ydate
20:48:56   5  ,prdate
20:48:56   6  ,clse
20:48:56   7  ,g6
20:48:56   8  ,gatt
20:48:56   9  ,gattn
20:48:56  10  ,trend
20:48:56  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
20:48:56  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
20:48:56  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
20:48:56  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
20:48:56  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
20:48:56  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
20:48:56  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
20:48:56  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
20:48:56  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
20:48:56  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
20:48:56  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
20:48:56  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
20:48:56  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
20:48:56  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
20:48:56  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
20:48:56  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
20:48:56  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
20:48:56  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
20:48:56  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
20:48:56  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
20:48:56  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
20:48:56  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
20:48:56  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
20:48:56  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
20:48:56  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
20:48:56  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
20:48:56  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
20:48:56  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
20:48:56  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
20:48:56  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
20:48:56  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
20:48:56  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
20:48:56  43  ,hh  att32
20:48:56  44  ,d   att33
20:48:56  45  ,w   att34
20:48:56  46  ,mpm att35
20:48:56  47  ,mph att36
20:48:56  48  ,trend att37
20:48:56  49  FROM svm6142
20:48:56  50  ORDER BY ydate
20:48:56  51  /

Table created.

Elapsed: 00:00:04.79
20:49:01 SQL> 
20:49:01 SQL> -- rpt
20:49:01 SQL> 
20:49:01 SQL> SELECT
20:49:01   2  pair
20:49:01   3  ,trend
20:49:01   4  ,gatt
20:49:01   5  ,COUNT(pair)
20:49:01   6  ,AVG(g6)
20:49:01   7  FROM svm6162
20:49:01   8  GROUP BY pair,trend,gatt
20:49:01   9  ORDER BY pair,trend,gatt
20:49:01  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6420 -.00262479
gbp_usd 	-1 up	      3579 .004338911
gbp_usd 	-1		50
gbp_usd 	 1 nup	      6285 -.00265035
gbp_usd 	 1 up	      3456 .004524374
gbp_usd 	 1		22

6 rows selected.

Elapsed: 00:00:00.03
20:49:01 SQL> 
20:49:01 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
20:49:01 SQL> CREATE TABLE modsrc COMPRESS AS
20:49:01   2  SELECT
20:49:01   3  pair
20:49:01   4  ,ydate
20:49:01   5  ,prdate
20:49:01   6  ,trend
20:49:01   7  ,g6
20:49:01   8  ,gatt
20:49:01   9  ,gattn
20:49:01  10  FROM svm6162
20:49:01  11  /

Table created.

Elapsed: 00:00:00.08
20:49:01 SQL> 
20:49:01 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
20:49:01 SQL> 
20:49:01 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.08
20:49:01 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
20:49:01   2  SELECT
20:49:01   3  ydate
20:49:01   4  ,trend gbp_trend
20:49:01   5  ,g6    gbp_g6
20:49:01   6  ,gatt  gbp_gatt
20:49:01   7  ,gattn gbp_gattn
20:49:01   8  FROM modsrc
20:49:01   9  /

Table created.

Elapsed: 00:00:00.07
20:49:01 SQL> 
20:49:01 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
20:49:01 SQL> 
20:49:01 SQL> -- I need a copy of the attributes:
20:49:01 SQL> 
20:49:01 SQL> 
20:49:01 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.04
20:49:01 SQL> CREATE TABLE gbp_att COMPRESS AS
20:49:01   2  SELECT
20:49:01   3  ydate
20:49:01   4  ,att00 gbp_att00
20:49:01   5  ,att01 gbp_att01
20:49:01   6  ,att02 gbp_att02
20:49:01   7  ,att03 gbp_att03
20:49:01   8  ,att04 gbp_att04
20:49:01   9  ,att05 gbp_att05
20:49:01  10  ,att06 gbp_att06
20:49:01  11  ,att07 gbp_att07
20:49:01  12  ,att08 gbp_att08
20:49:01  13  ,att09 gbp_att09
20:49:01  14  ,att10 gbp_att10
20:49:01  15  ,att11 gbp_att11
20:49:01  16  ,att12 gbp_att12
20:49:01  17  ,att13 gbp_att13
20:49:01  18  ,att14 gbp_att14
20:49:01  19  ,att15 gbp_att15
20:49:01  20  ,att16 gbp_att16
20:49:01  21  ,att17 gbp_att17
20:49:01  22  ,att18 gbp_att18
20:49:01  23  ,att19 gbp_att19
20:49:01  24  ,att20 gbp_att20
20:49:01  25  ,att21 gbp_att21
20:49:01  26  ,att22 gbp_att22
20:49:01  27  ,att23 gbp_att23
20:49:01  28  ,att24 gbp_att24
20:49:01  29  ,att25 gbp_att25
20:49:01  30  ,att26 gbp_att26
20:49:01  31  ,att27 gbp_att27
20:49:01  32  ,att28 gbp_att28
20:49:01  33  ,att29 gbp_att29
20:49:01  34  ,att30 gbp_att30
20:49:01  35  ,att31 gbp_att31
20:49:01  36  ,att32 gbp_att32
20:49:01  37  ,att33 gbp_att33
20:49:01  38  ,att34 gbp_att34
20:49:01  39  ,att35 gbp_att35
20:49:01  40  ,att36 gbp_att36
20:49:01  41  ,att37 gbp_att37
20:49:01  42  FROM svm6162
20:49:01  43  /

Table created.

Elapsed: 00:00:00.18
20:49:02 SQL> 
20:49:02 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
20:49:02 SQL> 
20:49:02 SQL> -- rpt
20:49:02 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19812

Elapsed: 00:00:00.89
20:49:03 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19812

Elapsed: 00:00:00.01
20:49:03 SQL> 
20:49:03 SQL> --
20:49:03 SQL> -- jpy610.sql
20:49:03 SQL> --
20:49:03 SQL> 
20:49:03 SQL> -- Creates views and tables for backtesting a forex SVM strategy
20:49:03 SQL> 
20:49:03 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.80
20:49:04 SQL> 
20:49:04 SQL> -- I created di5min here:
20:49:04 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
20:49:04 SQL> 
20:49:04 SQL> CREATE OR REPLACE VIEW svm6102 AS
20:49:04   2  SELECT
20:49:04   3  pair
20:49:04   4  ,ydate
20:49:04   5  ,prdate
20:49:04   6  ,rownum rnum -- acts as t in my time-series
20:49:04   7  ,clse
20:49:04   8  -- Derive a bunch of attributes from clse, the latest price:
20:49:04   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
20:49:04  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
20:49:04  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
20:49:04  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
20:49:04  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
20:49:04  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
20:49:04  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
20:49:04  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
20:49:04  17  --
20:49:04  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
20:49:04  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
20:49:04  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
20:49:04  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
20:49:04  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
20:49:04  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
20:49:04  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
20:49:04  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
20:49:04  26  --
20:49:04  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
20:49:04  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
20:49:04  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
20:49:04  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
20:49:04  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
20:49:04  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
20:49:04  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
20:49:04  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
20:49:04  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
20:49:04  36  FROM di5min WHERE pair LIKE'%jpy%'
20:49:04  37  AND ydate > sysdate - 95
20:49:04  38  ORDER BY ydate
20:49:04  39  /

View created.

Elapsed: 00:00:00.04
20:49:04 SQL> 
20:49:04 SQL> -- rpt
20:49:04 SQL> 
20:49:04 SQL> SELECT
20:49:04   2  pair
20:49:04   3  ,COUNT(pair)
20:49:04   4  ,MIN(clse),MAX(clse)
20:49:04   5  ,MIN(avg6),MAX(avg6)
20:49:04   6  ,MIN(ydate),MAX(ydate)
20:49:04   7  FROM svm6102
20:49:04   8  GROUP BY pair
20:49:04   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19811	 80.25	   84.485 80.3595205 84.3105479 2010-10-03 20:55:01 2011-01-06 20:45:00

Elapsed: 00:00:00.92
20:49:05 SQL> 
20:49:05 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
20:49:05 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.28
20:49:05 SQL> CREATE TABLE svm6122 COMPRESS AS
20:49:05   2  SELECT
20:49:05   3  pair
20:49:05   4  ,ydate
20:49:05   5  ,prdate
20:49:05   6  ,clse
20:49:05   7  -- g6 is important. I want to predict g6:
20:49:05   8  ,ld6 - clse g6
20:49:05   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
20:49:05  10  -- I want more attributes from the ones I derived above:
20:49:05  11  -- clse relation to moving-min
20:49:05  12  ,clse-min4  cm4
20:49:05  13  ,clse-min6  cm6
20:49:05  14  ,clse-min8  cm8
20:49:05  15  ,clse-min10 cm10
20:49:05  16  ,clse-min12 cm12
20:49:05  17  ,clse-min14 cm14
20:49:05  18  ,clse-min16 cm16
20:49:05  19  ,clse-min18 cm18
20:49:05  20  -- clse relation to moving-avg
20:49:05  21  ,clse-avg4  ca4
20:49:05  22  ,clse-avg6  ca6
20:49:05  23  ,clse-avg8  ca8
20:49:05  24  ,clse-avg10 ca10
20:49:05  25  ,clse-avg12 ca12
20:49:05  26  ,clse-avg14 ca14
20:49:05  27  ,clse-avg16 ca16
20:49:05  28  ,clse-avg18 ca18
20:49:05  29  -- clse relation to moving-max
20:49:05  30  ,clse-max4  cx4
20:49:05  31  ,clse-max6  cx6
20:49:05  32  ,clse-max8  cx8
20:49:05  33  ,clse-max10 cx10
20:49:05  34  ,clse-max12 cx12
20:49:05  35  ,clse-max14 cx14
20:49:05  36  ,clse-max16 cx16
20:49:05  37  ,clse-max18 cx18
20:49:05  38  -- Derive more attributes.
20:49:05  39  -- I want to use CORR() here to help SVM see the shape of the series.
20:49:05  40  -- But COVAR_POP is more stable:
20:49:05  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
20:49:05  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
20:49:05  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
20:49:05  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
20:49:05  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
20:49:05  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
20:49:05  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
20:49:05  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
20:49:05  49  -- Derive date related attributes:
20:49:05  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
20:49:05  51  ,0+TO_CHAR(ydate,'D')d
20:49:05  52  ,0+TO_CHAR(ydate,'W')w
20:49:05  53  -- mpm stands for minutes-past-midnight:
20:49:05  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
20:49:05  55  -- mph stands for minutes-past-hour:
20:49:05  56  ,0+TO_CHAR(ydate,'MI')mph
20:49:05  57  FROM svm6102
20:49:05  58  ORDER BY ydate
20:49:05  59  /

Table created.

Elapsed: 00:00:02.19
20:49:07 SQL> 
20:49:07 SQL> -- rpt
20:49:07 SQL> 
20:49:07 SQL> SELECT
20:49:07   2  pair
20:49:07   3  ,COUNT(pair)
20:49:07   4  ,MIN(clse),MAX(clse)
20:49:07   5  ,MIN(ydate),MAX(ydate)
20:49:07   6  FROM svm6122
20:49:07   7  GROUP BY pair
20:49:07   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19811	 80.25	   84.485 2010-10-03 20:55:01 2011-01-06 20:45:00

Elapsed: 00:00:00.04
20:49:07 SQL> 
20:49:07 SQL> -- Prepare for derivation of NTILE based params:
20:49:07 SQL> 
20:49:07 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.26
20:49:08 SQL> CREATE TABLE svm6142 COMPRESS AS
20:49:08   2  SELECT
20:49:08   3  pair
20:49:08   4  ,ydate
20:49:08   5  ,prdate
20:49:08   6  ,clse
20:49:08   7  ,g6
20:49:08   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
20:49:08   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
20:49:08  10  ,CASE WHEN trend IS NULL THEN 1
20:49:08  11  	    WHEN trend =0      THEN 1
20:49:08  12  	    ELSE trend END trend
20:49:08  13  ,cm4
20:49:08  14  ,cm6
20:49:08  15  ,cm8
20:49:08  16  ,cm10
20:49:08  17  ,cm12
20:49:08  18  ,cm14
20:49:08  19  ,cm16
20:49:08  20  ,cm18
20:49:08  21  --
20:49:08  22  ,ca4
20:49:08  23  ,ca6
20:49:08  24  ,ca8
20:49:08  25  ,ca10
20:49:08  26  ,ca12
20:49:08  27  ,ca14
20:49:08  28  ,ca16
20:49:08  29  ,ca18
20:49:08  30  --
20:49:08  31  ,cx4
20:49:08  32  ,cx6
20:49:08  33  ,cx8
20:49:08  34  ,cx10
20:49:08  35  ,cx12
20:49:08  36  ,cx14
20:49:08  37  ,cx16
20:49:08  38  ,cx18
20:49:08  39  --
20:49:08  40  ,crr4
20:49:08  41  ,crr6
20:49:08  42  ,crr8
20:49:08  43  ,crr10
20:49:08  44  ,crr12
20:49:08  45  ,crr14
20:49:08  46  ,crr16
20:49:08  47  ,crr18
20:49:08  48  --
20:49:08  49  ,hh
20:49:08  50  ,d
20:49:08  51  ,w
20:49:08  52  ,mpm
20:49:08  53  ,mph
20:49:08  54  FROM svm6122
20:49:08  55  ORDER BY ydate
20:49:08  56  /

Table created.

Elapsed: 00:00:00.37
20:49:08 SQL> 
20:49:08 SQL> -- rpt
20:49:08 SQL> 
20:49:08 SQL> SELECT
20:49:08   2  pair
20:49:08   3  ,trend
20:49:08   4  ,gatt
20:49:08   5  ,COUNT(pair)
20:49:08   6  ,AVG(g6)
20:49:08   7  FROM svm6142
20:49:08   8  GROUP BY pair,trend,gatt
20:49:08   9  ORDER BY pair,trend,gatt
20:49:08  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5184 -.16553339
usd_jpy 	-1 up	      4909 .169584216
usd_jpy 	-1		 5
usd_jpy 	 1 nup	      5077 -.15499158
usd_jpy 	 1 up	      4569 .174433614
usd_jpy 	 1		67

6 rows selected.

Elapsed: 00:00:00.08
20:49:08 SQL> 
20:49:08 SQL> 
20:49:08 SQL> -- Derive NTILE based params:
20:49:08 SQL> 
20:49:08 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.21
20:49:08 SQL> CREATE TABLE svm6162 COMPRESS AS
20:49:08   2  SELECT
20:49:08   3  pair
20:49:08   4  ,ydate
20:49:08   5  ,prdate
20:49:08   6  ,clse
20:49:08   7  ,g6
20:49:08   8  ,gatt
20:49:08   9  ,gattn
20:49:08  10  ,trend
20:49:08  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
20:49:08  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
20:49:08  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
20:49:08  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
20:49:08  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
20:49:08  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
20:49:08  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
20:49:08  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
20:49:08  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
20:49:08  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
20:49:08  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
20:49:08  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
20:49:08  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
20:49:08  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
20:49:08  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
20:49:08  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
20:49:08  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
20:49:08  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
20:49:08  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
20:49:08  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
20:49:08  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
20:49:08  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
20:49:08  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
20:49:08  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
20:49:08  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
20:49:08  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
20:49:08  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
20:49:08  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
20:49:08  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
20:49:08  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
20:49:08  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
20:49:08  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
20:49:08  43  ,hh  att32
20:49:08  44  ,d   att33
20:49:08  45  ,w   att34
20:49:08  46  ,mpm att35
20:49:08  47  ,mph att36
20:49:08  48  ,trend att37
20:49:08  49  FROM svm6142
20:49:08  50  ORDER BY ydate
20:49:08  51  /

Table created.

Elapsed: 00:00:04.89
20:49:13 SQL> 
20:49:13 SQL> -- rpt
20:49:13 SQL> 
20:49:13 SQL> SELECT
20:49:13   2  pair
20:49:13   3  ,trend
20:49:13   4  ,gatt
20:49:13   5  ,COUNT(pair)
20:49:13   6  ,AVG(g6)
20:49:13   7  FROM svm6162
20:49:13   8  GROUP BY pair,trend,gatt
20:49:13   9  ORDER BY pair,trend,gatt
20:49:13  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5184 -.16553339
usd_jpy 	-1 up	      4909 .169584216
usd_jpy 	-1		 5
usd_jpy 	 1 nup	      5077 -.15499158
usd_jpy 	 1 up	      4569 .174433614
usd_jpy 	 1		67

6 rows selected.

Elapsed: 00:00:00.03
20:49:13 SQL> 
20:49:13 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
20:49:13 SQL> CREATE TABLE modsrc COMPRESS AS
20:49:13   2  SELECT
20:49:13   3  pair
20:49:13   4  ,ydate
20:49:13   5  ,prdate
20:49:13   6  ,trend
20:49:13   7  ,g6
20:49:13   8  ,gatt
20:49:13   9  ,gattn
20:49:13  10  FROM svm6162
20:49:13  11  /

Table created.

Elapsed: 00:00:00.09
20:49:13 SQL> 
20:49:13 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
20:49:13 SQL> 
20:49:13 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
20:49:14 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
20:49:14   2  SELECT
20:49:14   3  ydate
20:49:14   4  ,trend jpy_trend
20:49:14   5  ,g6    jpy_g6
20:49:14   6  ,gatt  jpy_gatt
20:49:14   7  ,gattn jpy_gattn
20:49:14   8  FROM modsrc
20:49:14   9  /

Table created.

Elapsed: 00:00:00.07
20:49:14 SQL> 
20:49:14 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
20:49:14 SQL> 
20:49:14 SQL> -- I need a copy of the attributes:
20:49:14 SQL> 
20:49:14 SQL> 
20:49:14 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.13
20:49:14 SQL> CREATE TABLE jpy_att COMPRESS AS
20:49:14   2  SELECT
20:49:14   3  ydate
20:49:14   4  ,att00 jpy_att00
20:49:14   5  ,att01 jpy_att01
20:49:14   6  ,att02 jpy_att02
20:49:14   7  ,att03 jpy_att03
20:49:14   8  ,att04 jpy_att04
20:49:14   9  ,att05 jpy_att05
20:49:14  10  ,att06 jpy_att06
20:49:14  11  ,att07 jpy_att07
20:49:14  12  ,att08 jpy_att08
20:49:14  13  ,att09 jpy_att09
20:49:14  14  ,att10 jpy_att10
20:49:14  15  ,att11 jpy_att11
20:49:14  16  ,att12 jpy_att12
20:49:14  17  ,att13 jpy_att13
20:49:14  18  ,att14 jpy_att14
20:49:14  19  ,att15 jpy_att15
20:49:14  20  ,att16 jpy_att16
20:49:14  21  ,att17 jpy_att17
20:49:14  22  ,att18 jpy_att18
20:49:14  23  ,att19 jpy_att19
20:49:14  24  ,att20 jpy_att20
20:49:14  25  ,att21 jpy_att21
20:49:14  26  ,att22 jpy_att22
20:49:14  27  ,att23 jpy_att23
20:49:14  28  ,att24 jpy_att24
20:49:14  29  ,att25 jpy_att25
20:49:14  30  ,att26 jpy_att26
20:49:14  31  ,att27 jpy_att27
20:49:14  32  ,att28 jpy_att28
20:49:14  33  ,att29 jpy_att29
20:49:14  34  ,att30 jpy_att30
20:49:14  35  ,att31 jpy_att31
20:49:14  36  ,att32 jpy_att32
20:49:14  37  ,att33 jpy_att33
20:49:14  38  ,att34 jpy_att34
20:49:14  39  ,att35 jpy_att35
20:49:14  40  ,att36 jpy_att36
20:49:14  41  ,att37 jpy_att37
20:49:14  42  FROM svm6162
20:49:14  43  /

Table created.

Elapsed: 00:00:00.24
20:49:14 SQL> 
20:49:14 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
20:49:15 SQL> 
20:49:15 SQL> -- rpt
20:49:15 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19811

Elapsed: 00:00:00.95
20:49:16 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19811

Elapsed: 00:00:00.01
20:49:16 SQL> 
20:49:16 SQL> --
20:49:16 SQL> -- cad610.sql
20:49:16 SQL> --
20:49:16 SQL> 
20:49:16 SQL> -- Creates views and tables for backtesting a forex SVM strategy
20:49:16 SQL> 
20:49:16 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.44
20:49:16 SQL> 
20:49:16 SQL> -- I created di5min here:
20:49:16 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
20:49:16 SQL> 
20:49:16 SQL> CREATE OR REPLACE VIEW svm6102 AS
20:49:16   2  SELECT
20:49:16   3  pair
20:49:16   4  ,ydate
20:49:16   5  ,prdate
20:49:16   6  ,rownum rnum -- acts as t in my time-series
20:49:16   7  ,clse
20:49:16   8  -- Derive a bunch of attributes from clse, the latest price:
20:49:16   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
20:49:16  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
20:49:16  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
20:49:16  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
20:49:16  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
20:49:16  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
20:49:16  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
20:49:16  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
20:49:16  17  --
20:49:16  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
20:49:16  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
20:49:16  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
20:49:16  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
20:49:16  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
20:49:16  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
20:49:16  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
20:49:16  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
20:49:16  26  --
20:49:16  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
20:49:16  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
20:49:16  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
20:49:16  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
20:49:16  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
20:49:16  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
20:49:16  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
20:49:16  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
20:49:16  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
20:49:16  36  FROM di5min WHERE pair LIKE'%cad%'
20:49:16  37  AND ydate > sysdate - 95
20:49:16  38  ORDER BY ydate
20:49:16  39  /

View created.

Elapsed: 00:00:00.04
20:49:16 SQL> 
20:49:16 SQL> -- rpt
20:49:16 SQL> 
20:49:16 SQL> SELECT
20:49:16   2  pair
20:49:16   3  ,COUNT(pair)
20:49:16   4  ,MIN(clse),MAX(clse)
20:49:16   5  ,MIN(avg6),MAX(avg6)
20:49:16   6  ,MIN(ydate),MAX(ydate)
20:49:16   7  FROM svm6102
20:49:16   8  GROUP BY pair
20:49:16   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19811    .988925	   1.0355  .99060276 1.03282877 2010-10-03 20:55:01 2011-01-06 20:45:00

Elapsed: 00:00:00.85
20:49:17 SQL> 
20:49:17 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
20:49:17 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.29
20:49:17 SQL> CREATE TABLE svm6122 COMPRESS AS
20:49:17   2  SELECT
20:49:17   3  pair
20:49:17   4  ,ydate
20:49:17   5  ,prdate
20:49:17   6  ,clse
20:49:17   7  -- g6 is important. I want to predict g6:
20:49:17   8  ,ld6 - clse g6
20:49:17   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
20:49:17  10  -- I want more attributes from the ones I derived above:
20:49:17  11  -- clse relation to moving-min
20:49:17  12  ,clse-min4  cm4
20:49:17  13  ,clse-min6  cm6
20:49:17  14  ,clse-min8  cm8
20:49:17  15  ,clse-min10 cm10
20:49:17  16  ,clse-min12 cm12
20:49:17  17  ,clse-min14 cm14
20:49:17  18  ,clse-min16 cm16
20:49:17  19  ,clse-min18 cm18
20:49:17  20  -- clse relation to moving-avg
20:49:17  21  ,clse-avg4  ca4
20:49:17  22  ,clse-avg6  ca6
20:49:17  23  ,clse-avg8  ca8
20:49:17  24  ,clse-avg10 ca10
20:49:17  25  ,clse-avg12 ca12
20:49:17  26  ,clse-avg14 ca14
20:49:17  27  ,clse-avg16 ca16
20:49:17  28  ,clse-avg18 ca18
20:49:17  29  -- clse relation to moving-max
20:49:17  30  ,clse-max4  cx4
20:49:17  31  ,clse-max6  cx6
20:49:17  32  ,clse-max8  cx8
20:49:17  33  ,clse-max10 cx10
20:49:17  34  ,clse-max12 cx12
20:49:17  35  ,clse-max14 cx14
20:49:17  36  ,clse-max16 cx16
20:49:17  37  ,clse-max18 cx18
20:49:17  38  -- Derive more attributes.
20:49:17  39  -- I want to use CORR() here to help SVM see the shape of the series.
20:49:17  40  -- But COVAR_POP is more stable:
20:49:17  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
20:49:17  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
20:49:17  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
20:49:17  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
20:49:17  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
20:49:17  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
20:49:17  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
20:49:17  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
20:49:17  49  -- Derive date related attributes:
20:49:17  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
20:49:17  51  ,0+TO_CHAR(ydate,'D')d
20:49:17  52  ,0+TO_CHAR(ydate,'W')w
20:49:17  53  -- mpm stands for minutes-past-midnight:
20:49:17  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
20:49:17  55  -- mph stands for minutes-past-hour:
20:49:17  56  ,0+TO_CHAR(ydate,'MI')mph
20:49:17  57  FROM svm6102
20:49:17  58  ORDER BY ydate
20:49:17  59  /

Table created.

Elapsed: 00:00:02.19
20:49:19 SQL> 
20:49:19 SQL> -- rpt
20:49:19 SQL> 
20:49:19 SQL> SELECT
20:49:19   2  pair
20:49:19   3  ,COUNT(pair)
20:49:19   4  ,MIN(clse),MAX(clse)
20:49:19   5  ,MIN(ydate),MAX(ydate)
20:49:19   6  FROM svm6122
20:49:19   7  GROUP BY pair
20:49:19   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19811    .988925	   1.0355 2010-10-03 20:55:01 2011-01-06 20:45:00

Elapsed: 00:00:00.04
20:49:19 SQL> 
20:49:19 SQL> -- Prepare for derivation of NTILE based params:
20:49:19 SQL> 
20:49:19 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.26
20:49:20 SQL> CREATE TABLE svm6142 COMPRESS AS
20:49:20   2  SELECT
20:49:20   3  pair
20:49:20   4  ,ydate
20:49:20   5  ,prdate
20:49:20   6  ,clse
20:49:20   7  ,g6
20:49:20   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
20:49:20   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
20:49:20  10  ,CASE WHEN trend IS NULL THEN 1
20:49:20  11  	    WHEN trend =0      THEN 1
20:49:20  12  	    ELSE trend END trend
20:49:20  13  ,cm4
20:49:20  14  ,cm6
20:49:20  15  ,cm8
20:49:20  16  ,cm10
20:49:20  17  ,cm12
20:49:20  18  ,cm14
20:49:20  19  ,cm16
20:49:20  20  ,cm18
20:49:20  21  --
20:49:20  22  ,ca4
20:49:20  23  ,ca6
20:49:20  24  ,ca8
20:49:20  25  ,ca10
20:49:20  26  ,ca12
20:49:20  27  ,ca14
20:49:20  28  ,ca16
20:49:20  29  ,ca18
20:49:20  30  --
20:49:20  31  ,cx4
20:49:20  32  ,cx6
20:49:20  33  ,cx8
20:49:20  34  ,cx10
20:49:20  35  ,cx12
20:49:20  36  ,cx14
20:49:20  37  ,cx16
20:49:20  38  ,cx18
20:49:20  39  --
20:49:20  40  ,crr4
20:49:20  41  ,crr6
20:49:20  42  ,crr8
20:49:20  43  ,crr10
20:49:20  44  ,crr12
20:49:20  45  ,crr14
20:49:20  46  ,crr16
20:49:20  47  ,crr18
20:49:20  48  --
20:49:20  49  ,hh
20:49:20  50  ,d
20:49:20  51  ,w
20:49:20  52  ,mpm
20:49:20  53  ,mph
20:49:20  54  FROM svm6122
20:49:20  55  ORDER BY ydate
20:49:20  56  /

Table created.

Elapsed: 00:00:00.38
20:49:20 SQL> 
20:49:20 SQL> -- rpt
20:49:20 SQL> 
20:49:20 SQL> SELECT
20:49:20   2  pair
20:49:20   3  ,trend
20:49:20   4  ,gatt
20:49:20   5  ,COUNT(pair)
20:49:20   6  ,AVG(g6)
20:49:20   7  FROM svm6142
20:49:20   8  GROUP BY pair,trend,gatt
20:49:20   9  ORDER BY pair,trend,gatt
20:49:20  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7320 -.00124132
usd_cad 	-1 up	      3181 .003050322
usd_cad 	 1 nup	      6844 -.00160905
usd_cad 	 1 up	      2394 .003645413
usd_cad 	 1		72

Elapsed: 00:00:00.04
20:49:20 SQL> 
20:49:20 SQL> 
20:49:20 SQL> -- Derive NTILE based params:
20:49:20 SQL> 
20:49:20 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
20:49:20 SQL> CREATE TABLE svm6162 COMPRESS AS
20:49:20   2  SELECT
20:49:20   3  pair
20:49:20   4  ,ydate
20:49:20   5  ,prdate
20:49:20   6  ,clse
20:49:20   7  ,g6
20:49:20   8  ,gatt
20:49:20   9  ,gattn
20:49:20  10  ,trend
20:49:20  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
20:49:20  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
20:49:20  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
20:49:20  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
20:49:20  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
20:49:20  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
20:49:20  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
20:49:20  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
20:49:20  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
20:49:20  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
20:49:20  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
20:49:20  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
20:49:20  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
20:49:20  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
20:49:20  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
20:49:20  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
20:49:20  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
20:49:20  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
20:49:20  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
20:49:20  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
20:49:20  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
20:49:20  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
20:49:20  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
20:49:20  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
20:49:20  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
20:49:20  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
20:49:20  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
20:49:20  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
20:49:20  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
20:49:20  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
20:49:20  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
20:49:20  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
20:49:20  43  ,hh  att32
20:49:20  44  ,d   att33
20:49:20  45  ,w   att34
20:49:20  46  ,mpm att35
20:49:20  47  ,mph att36
20:49:20  48  ,trend att37
20:49:20  49  FROM svm6142
20:49:20  50  ORDER BY ydate
20:49:20  51  /

Table created.

Elapsed: 00:00:04.78
20:49:25 SQL> 
20:49:25 SQL> -- rpt
20:49:25 SQL> 
20:49:25 SQL> SELECT
20:49:25   2  pair
20:49:25   3  ,trend
20:49:25   4  ,gatt
20:49:25   5  ,COUNT(pair)
20:49:25   6  ,AVG(g6)
20:49:25   7  FROM svm6162
20:49:25   8  GROUP BY pair,trend,gatt
20:49:25   9  ORDER BY pair,trend,gatt
20:49:25  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7320 -.00124132
usd_cad 	-1 up	      3181 .003050322
usd_cad 	 1 nup	      6844 -.00160905
usd_cad 	 1 up	      2394 .003645413
usd_cad 	 1		72

Elapsed: 00:00:00.03
20:49:25 SQL> 
20:49:25 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
20:49:25 SQL> CREATE TABLE modsrc COMPRESS AS
20:49:25   2  SELECT
20:49:25   3  pair
20:49:25   4  ,ydate
20:49:25   5  ,prdate
20:49:25   6  ,trend
20:49:25   7  ,g6
20:49:25   8  ,gatt
20:49:25   9  ,gattn
20:49:25  10  FROM svm6162
20:49:25  11  /

Table created.

Elapsed: 00:00:00.09
20:49:25 SQL> 
20:49:25 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
20:49:26 SQL> 
20:49:26 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.07
20:49:26 SQL> CREATE TABLE cad_ms610 COMPRESS AS
20:49:26   2  SELECT
20:49:26   3  ydate
20:49:26   4  ,trend cad_trend
20:49:26   5  ,g6    cad_g6
20:49:26   6  ,gatt  cad_gatt
20:49:26   7  ,gattn cad_gattn
20:49:26   8  FROM modsrc
20:49:26   9  /

Table created.

Elapsed: 00:00:00.08
20:49:26 SQL> 
20:49:26 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
20:49:26 SQL> 
20:49:26 SQL> -- I need a copy of the attributes:
20:49:26 SQL> 
20:49:26 SQL> 
20:49:26 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.09
20:49:26 SQL> CREATE TABLE cad_att COMPRESS AS
20:49:26   2  SELECT
20:49:26   3  ydate
20:49:26   4  ,att00 cad_att00
20:49:26   5  ,att01 cad_att01
20:49:26   6  ,att02 cad_att02
20:49:26   7  ,att03 cad_att03
20:49:26   8  ,att04 cad_att04
20:49:26   9  ,att05 cad_att05
20:49:26  10  ,att06 cad_att06
20:49:26  11  ,att07 cad_att07
20:49:26  12  ,att08 cad_att08
20:49:26  13  ,att09 cad_att09
20:49:26  14  ,att10 cad_att10
20:49:26  15  ,att11 cad_att11
20:49:26  16  ,att12 cad_att12
20:49:26  17  ,att13 cad_att13
20:49:26  18  ,att14 cad_att14
20:49:26  19  ,att15 cad_att15
20:49:26  20  ,att16 cad_att16
20:49:26  21  ,att17 cad_att17
20:49:26  22  ,att18 cad_att18
20:49:26  23  ,att19 cad_att19
20:49:26  24  ,att20 cad_att20
20:49:26  25  ,att21 cad_att21
20:49:26  26  ,att22 cad_att22
20:49:26  27  ,att23 cad_att23
20:49:26  28  ,att24 cad_att24
20:49:26  29  ,att25 cad_att25
20:49:26  30  ,att26 cad_att26
20:49:26  31  ,att27 cad_att27
20:49:26  32  ,att28 cad_att28
20:49:26  33  ,att29 cad_att29
20:49:26  34  ,att30 cad_att30
20:49:26  35  ,att31 cad_att31
20:49:26  36  ,att32 cad_att32
20:49:26  37  ,att33 cad_att33
20:49:26  38  ,att34 cad_att34
20:49:26  39  ,att35 cad_att35
20:49:26  40  ,att36 cad_att36
20:49:26  41  ,att37 cad_att37
20:49:26  42  FROM svm6162
20:49:26  43  /

Table created.

Elapsed: 00:00:00.17
20:49:26 SQL> 
20:49:26 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
20:49:27 SQL> 
20:49:27 SQL> -- rpt
20:49:27 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19811

Elapsed: 00:00:00.86
20:49:27 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19811

Elapsed: 00:00:00.00
20:49:27 SQL> 
20:49:27 SQL> --
20:49:27 SQL> -- chf610.sql
20:49:27 SQL> --
20:49:27 SQL> 
20:49:27 SQL> -- Creates views and tables for backtesting a forex SVM strategy
20:49:27 SQL> 
20:49:27 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.36
20:49:28 SQL> 
20:49:28 SQL> -- I created di5min here:
20:49:28 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
20:49:28 SQL> 
20:49:28 SQL> CREATE OR REPLACE VIEW svm6102 AS
20:49:28   2  SELECT
20:49:28   3  pair
20:49:28   4  ,ydate
20:49:28   5  ,prdate
20:49:28   6  ,rownum rnum -- acts as t in my time-series
20:49:28   7  ,clse
20:49:28   8  -- Derive a bunch of attributes from clse, the latest price:
20:49:28   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
20:49:28  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
20:49:28  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
20:49:28  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
20:49:28  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
20:49:28  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
20:49:28  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
20:49:28  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
20:49:28  17  --
20:49:28  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
20:49:28  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
20:49:28  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
20:49:28  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
20:49:28  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
20:49:28  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
20:49:28  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
20:49:28  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
20:49:28  26  --
20:49:28  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
20:49:28  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
20:49:28  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
20:49:28  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
20:49:28  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
20:49:28  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
20:49:28  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
20:49:28  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
20:49:28  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
20:49:28  36  FROM di5min WHERE pair LIKE'%chf%'
20:49:28  37  AND ydate > sysdate - 95
20:49:28  38  ORDER BY ydate
20:49:28  39  /

View created.

Elapsed: 00:00:00.05
20:49:28 SQL> 
20:49:28 SQL> -- rpt
20:49:28 SQL> 
20:49:28 SQL> SELECT
20:49:28   2  pair
20:49:28   3  ,COUNT(pair)
20:49:28   4  ,MIN(clse),MAX(clse)
20:49:28   5  ,MIN(avg6),MAX(avg6)
20:49:28   6  ,MIN(ydate),MAX(ydate)
20:49:28   7  FROM svm6102
20:49:28   8  GROUP BY pair
20:49:28   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19814    .931675	  1.00635 .933255632 1.00498151 2010-10-03 20:55:01 2011-01-06 20:45:00

Elapsed: 00:00:00.88
20:49:29 SQL> 
20:49:29 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
20:49:29 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.31
20:49:29 SQL> CREATE TABLE svm6122 COMPRESS AS
20:49:29   2  SELECT
20:49:29   3  pair
20:49:29   4  ,ydate
20:49:29   5  ,prdate
20:49:29   6  ,clse
20:49:29   7  -- g6 is important. I want to predict g6:
20:49:29   8  ,ld6 - clse g6
20:49:29   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
20:49:29  10  -- I want more attributes from the ones I derived above:
20:49:29  11  -- clse relation to moving-min
20:49:29  12  ,clse-min4  cm4
20:49:29  13  ,clse-min6  cm6
20:49:29  14  ,clse-min8  cm8
20:49:29  15  ,clse-min10 cm10
20:49:29  16  ,clse-min12 cm12
20:49:29  17  ,clse-min14 cm14
20:49:29  18  ,clse-min16 cm16
20:49:29  19  ,clse-min18 cm18
20:49:29  20  -- clse relation to moving-avg
20:49:29  21  ,clse-avg4  ca4
20:49:29  22  ,clse-avg6  ca6
20:49:29  23  ,clse-avg8  ca8
20:49:29  24  ,clse-avg10 ca10
20:49:29  25  ,clse-avg12 ca12
20:49:29  26  ,clse-avg14 ca14
20:49:29  27  ,clse-avg16 ca16
20:49:29  28  ,clse-avg18 ca18
20:49:29  29  -- clse relation to moving-max
20:49:29  30  ,clse-max4  cx4
20:49:29  31  ,clse-max6  cx6
20:49:29  32  ,clse-max8  cx8
20:49:29  33  ,clse-max10 cx10
20:49:29  34  ,clse-max12 cx12
20:49:29  35  ,clse-max14 cx14
20:49:29  36  ,clse-max16 cx16
20:49:29  37  ,clse-max18 cx18
20:49:29  38  -- Derive more attributes.
20:49:29  39  -- I want to use CORR() here to help SVM see the shape of the series.
20:49:29  40  -- But COVAR_POP is more stable:
20:49:29  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
20:49:29  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
20:49:29  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
20:49:29  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
20:49:29  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
20:49:29  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
20:49:29  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
20:49:29  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
20:49:29  49  -- Derive date related attributes:
20:49:29  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
20:49:29  51  ,0+TO_CHAR(ydate,'D')d
20:49:29  52  ,0+TO_CHAR(ydate,'W')w
20:49:29  53  -- mpm stands for minutes-past-midnight:
20:49:29  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
20:49:29  55  -- mph stands for minutes-past-hour:
20:49:29  56  ,0+TO_CHAR(ydate,'MI')mph
20:49:29  57  FROM svm6102
20:49:29  58  ORDER BY ydate
20:49:29  59  /

Table created.

Elapsed: 00:00:02.07
20:49:31 SQL> 
20:49:31 SQL> -- rpt
20:49:31 SQL> 
20:49:31 SQL> SELECT
20:49:31   2  pair
20:49:31   3  ,COUNT(pair)
20:49:31   4  ,MIN(clse),MAX(clse)
20:49:31   5  ,MIN(ydate),MAX(ydate)
20:49:31   6  FROM svm6122
20:49:31   7  GROUP BY pair
20:49:31   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19814    .931675	  1.00635 2010-10-03 20:55:01 2011-01-06 20:45:00

Elapsed: 00:00:00.04
20:49:31 SQL> 
20:49:31 SQL> -- Prepare for derivation of NTILE based params:
20:49:31 SQL> 
20:49:31 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.26
20:49:31 SQL> CREATE TABLE svm6142 COMPRESS AS
20:49:31   2  SELECT
20:49:31   3  pair
20:49:31   4  ,ydate
20:49:31   5  ,prdate
20:49:31   6  ,clse
20:49:31   7  ,g6
20:49:31   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
20:49:31   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
20:49:31  10  ,CASE WHEN trend IS NULL THEN 1
20:49:31  11  	    WHEN trend =0      THEN 1
20:49:31  12  	    ELSE trend END trend
20:49:31  13  ,cm4
20:49:31  14  ,cm6
20:49:31  15  ,cm8
20:49:31  16  ,cm10
20:49:31  17  ,cm12
20:49:31  18  ,cm14
20:49:31  19  ,cm16
20:49:31  20  ,cm18
20:49:31  21  --
20:49:31  22  ,ca4
20:49:31  23  ,ca6
20:49:31  24  ,ca8
20:49:31  25  ,ca10
20:49:31  26  ,ca12
20:49:31  27  ,ca14
20:49:31  28  ,ca16
20:49:31  29  ,ca18
20:49:31  30  --
20:49:31  31  ,cx4
20:49:31  32  ,cx6
20:49:31  33  ,cx8
20:49:31  34  ,cx10
20:49:31  35  ,cx12
20:49:31  36  ,cx14
20:49:31  37  ,cx16
20:49:31  38  ,cx18
20:49:31  39  --
20:49:31  40  ,crr4
20:49:31  41  ,crr6
20:49:31  42  ,crr8
20:49:31  43  ,crr10
20:49:31  44  ,crr12
20:49:31  45  ,crr14
20:49:31  46  ,crr16
20:49:31  47  ,crr18
20:49:31  48  --
20:49:31  49  ,hh
20:49:31  50  ,d
20:49:31  51  ,w
20:49:31  52  ,mpm
20:49:31  53  ,mph
20:49:31  54  FROM svm6122
20:49:31  55  ORDER BY ydate
20:49:31  56  /

Table created.

Elapsed: 00:00:00.37
20:49:32 SQL> 
20:49:32 SQL> -- rpt
20:49:32 SQL> 
20:49:32 SQL> SELECT
20:49:32   2  pair
20:49:32   3  ,trend
20:49:32   4  ,gatt
20:49:32   5  ,COUNT(pair)
20:49:32   6  ,AVG(g6)
20:49:32   7  FROM svm6142
20:49:32   8  GROUP BY pair,trend,gatt
20:49:32   9  ORDER BY pair,trend,gatt
20:49:32  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7108 -.00198724
usd_chf 	-1 up	      3069 .003820978
usd_chf 	-1		64
usd_chf 	 1 nup	      6584 -.00154438
usd_chf 	 1 up	      2981 .003939435
usd_chf 	 1		 8

6 rows selected.

Elapsed: 00:00:00.04
20:49:32 SQL> 
20:49:32 SQL> 
20:49:32 SQL> -- Derive NTILE based params:
20:49:32 SQL> 
20:49:32 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.17
20:49:32 SQL> CREATE TABLE svm6162 COMPRESS AS
20:49:32   2  SELECT
20:49:32   3  pair
20:49:32   4  ,ydate
20:49:32   5  ,prdate
20:49:32   6  ,clse
20:49:32   7  ,g6
20:49:32   8  ,gatt
20:49:32   9  ,gattn
20:49:32  10  ,trend
20:49:32  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
20:49:32  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
20:49:32  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
20:49:32  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
20:49:32  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
20:49:32  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
20:49:32  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
20:49:32  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
20:49:32  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
20:49:32  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
20:49:32  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
20:49:32  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
20:49:32  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
20:49:32  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
20:49:32  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
20:49:32  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
20:49:32  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
20:49:32  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
20:49:32  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
20:49:32  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
20:49:32  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
20:49:32  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
20:49:32  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
20:49:32  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
20:49:32  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
20:49:32  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
20:49:32  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
20:49:32  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
20:49:32  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
20:49:32  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
20:49:32  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
20:49:32  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
20:49:32  43  ,hh  att32
20:49:32  44  ,d   att33
20:49:32  45  ,w   att34
20:49:32  46  ,mpm att35
20:49:32  47  ,mph att36
20:49:32  48  ,trend att37
20:49:32  49  FROM svm6142
20:49:32  50  ORDER BY ydate
20:49:32  51  /

Table created.

Elapsed: 00:00:04.84
20:49:37 SQL> 
20:49:37 SQL> -- rpt
20:49:37 SQL> 
20:49:37 SQL> SELECT
20:49:37   2  pair
20:49:37   3  ,trend
20:49:37   4  ,gatt
20:49:37   5  ,COUNT(pair)
20:49:37   6  ,AVG(g6)
20:49:37   7  FROM svm6162
20:49:37   8  GROUP BY pair,trend,gatt
20:49:37   9  ORDER BY pair,trend,gatt
20:49:37  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7108 -.00198724
usd_chf 	-1 up	      3069 .003820978
usd_chf 	-1		64
usd_chf 	 1 nup	      6584 -.00154438
usd_chf 	 1 up	      2981 .003939435
usd_chf 	 1		 8

6 rows selected.

Elapsed: 00:00:00.04
20:49:37 SQL> 
20:49:37 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.26
20:49:37 SQL> CREATE TABLE modsrc COMPRESS AS
20:49:37   2  SELECT
20:49:37   3  pair
20:49:37   4  ,ydate
20:49:37   5  ,prdate
20:49:37   6  ,trend
20:49:37   7  ,g6
20:49:37   8  ,gatt
20:49:37   9  ,gattn
20:49:37  10  FROM svm6162
20:49:37  11  /

Table created.

Elapsed: 00:00:00.16
20:49:37 SQL> 
20:49:37 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
20:49:37 SQL> 
20:49:37 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.08
20:49:38 SQL> CREATE TABLE chf_ms610 COMPRESS AS
20:49:38   2  SELECT
20:49:38   3  ydate
20:49:38   4  ,trend chf_trend
20:49:38   5  ,g6    chf_g6
20:49:38   6  ,gatt  chf_gatt
20:49:38   7  ,gattn chf_gattn
20:49:38   8  FROM modsrc
20:49:38   9  /

Table created.

Elapsed: 00:00:00.07
20:49:38 SQL> 
20:49:38 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
20:49:38 SQL> 
20:49:38 SQL> -- I need a copy of the attributes:
20:49:38 SQL> 
20:49:38 SQL> 
20:49:38 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.21
20:49:38 SQL> CREATE TABLE chf_att COMPRESS AS
20:49:38   2  SELECT
20:49:38   3  ydate
20:49:38   4  ,att00 chf_att00
20:49:38   5  ,att01 chf_att01
20:49:38   6  ,att02 chf_att02
20:49:38   7  ,att03 chf_att03
20:49:38   8  ,att04 chf_att04
20:49:38   9  ,att05 chf_att05
20:49:38  10  ,att06 chf_att06
20:49:38  11  ,att07 chf_att07
20:49:38  12  ,att08 chf_att08
20:49:38  13  ,att09 chf_att09
20:49:38  14  ,att10 chf_att10
20:49:38  15  ,att11 chf_att11
20:49:38  16  ,att12 chf_att12
20:49:38  17  ,att13 chf_att13
20:49:38  18  ,att14 chf_att14
20:49:38  19  ,att15 chf_att15
20:49:38  20  ,att16 chf_att16
20:49:38  21  ,att17 chf_att17
20:49:38  22  ,att18 chf_att18
20:49:38  23  ,att19 chf_att19
20:49:38  24  ,att20 chf_att20
20:49:38  25  ,att21 chf_att21
20:49:38  26  ,att22 chf_att22
20:49:38  27  ,att23 chf_att23
20:49:38  28  ,att24 chf_att24
20:49:38  29  ,att25 chf_att25
20:49:38  30  ,att26 chf_att26
20:49:38  31  ,att27 chf_att27
20:49:38  32  ,att28 chf_att28
20:49:38  33  ,att29 chf_att29
20:49:38  34  ,att30 chf_att30
20:49:38  35  ,att31 chf_att31
20:49:38  36  ,att32 chf_att32
20:49:38  37  ,att33 chf_att33
20:49:38  38  ,att34 chf_att34
20:49:38  39  ,att35 chf_att35
20:49:38  40  ,att36 chf_att36
20:49:38  41  ,att37 chf_att37
20:49:38  42  FROM svm6162
20:49:38  43  /

Table created.

Elapsed: 00:00:00.18
20:49:38 SQL> 
20:49:38 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
20:49:39 SQL> 
20:49:39 SQL> -- rpt
20:49:39 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19814

Elapsed: 00:00:00.85
20:49:40 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19814

Elapsed: 00:00:00.00
20:49:40 SQL> 
20:49:40 SQL> --
20:49:40 SQL> -- ech610.sql
20:49:40 SQL> --
20:49:40 SQL> 
20:49:40 SQL> -- Creates views and tables for backtesting a forex SVM strategy
20:49:40 SQL> 
20:49:40 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
20:49:40 SQL> 
20:49:40 SQL> -- I created di5min here:
20:49:40 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
20:49:40 SQL> 
20:49:40 SQL> CREATE OR REPLACE VIEW svm6102 AS
20:49:40   2  SELECT
20:49:40   3  pair
20:49:40   4  ,ydate
20:49:40   5  ,prdate
20:49:40   6  ,rownum rnum -- acts as t in my time-series
20:49:40   7  ,clse
20:49:40   8  -- Derive a bunch of attributes from clse, the latest price:
20:49:40   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
20:49:40  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
20:49:40  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
20:49:40  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
20:49:40  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
20:49:40  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
20:49:40  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
20:49:40  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
20:49:40  17  --
20:49:40  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
20:49:40  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
20:49:40  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
20:49:40  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
20:49:40  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
20:49:40  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
20:49:40  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
20:49:40  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
20:49:40  26  --
20:49:40  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
20:49:40  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
20:49:40  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
20:49:40  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
20:49:40  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
20:49:40  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
20:49:40  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
20:49:40  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
20:49:40  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
20:49:40  36  FROM di5min WHERE pair LIKE'%ech%'
20:49:40  37  AND ydate > sysdate - 95
20:49:40  38  ORDER BY ydate
20:49:40  39  /

View created.

Elapsed: 00:00:00.12
20:49:40 SQL> 
20:49:40 SQL> -- rpt
20:49:40 SQL> 
20:49:40 SQL> SELECT
20:49:40   2  pair
20:49:40   3  ,COUNT(pair)
20:49:40   4  ,MIN(clse),MAX(clse)
20:49:40   5  ,MIN(avg6),MAX(avg6)
20:49:40   6  ,MIN(ydate),MAX(ydate)
20:49:40   7  FROM svm6102
20:49:40   8  GROUP BY pair
20:49:40   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19812 1.24182424 1.38284305 1.24320711 1.37986485 2010-10-03 20:55:01 2011-01-06 20:45:00

Elapsed: 00:00:00.84
20:49:41 SQL> 
20:49:41 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
20:49:41 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.29
20:49:41 SQL> CREATE TABLE svm6122 COMPRESS AS
20:49:41   2  SELECT
20:49:41   3  pair
20:49:41   4  ,ydate
20:49:41   5  ,prdate
20:49:41   6  ,clse
20:49:41   7  -- g6 is important. I want to predict g6:
20:49:41   8  ,ld6 - clse g6
20:49:41   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
20:49:41  10  -- I want more attributes from the ones I derived above:
20:49:41  11  -- clse relation to moving-min
20:49:41  12  ,clse-min4  cm4
20:49:41  13  ,clse-min6  cm6
20:49:41  14  ,clse-min8  cm8
20:49:41  15  ,clse-min10 cm10
20:49:41  16  ,clse-min12 cm12
20:49:41  17  ,clse-min14 cm14
20:49:41  18  ,clse-min16 cm16
20:49:41  19  ,clse-min18 cm18
20:49:41  20  -- clse relation to moving-avg
20:49:41  21  ,clse-avg4  ca4
20:49:41  22  ,clse-avg6  ca6
20:49:41  23  ,clse-avg8  ca8
20:49:41  24  ,clse-avg10 ca10
20:49:41  25  ,clse-avg12 ca12
20:49:41  26  ,clse-avg14 ca14
20:49:41  27  ,clse-avg16 ca16
20:49:41  28  ,clse-avg18 ca18
20:49:41  29  -- clse relation to moving-max
20:49:41  30  ,clse-max4  cx4
20:49:41  31  ,clse-max6  cx6
20:49:41  32  ,clse-max8  cx8
20:49:41  33  ,clse-max10 cx10
20:49:41  34  ,clse-max12 cx12
20:49:41  35  ,clse-max14 cx14
20:49:41  36  ,clse-max16 cx16
20:49:41  37  ,clse-max18 cx18
20:49:41  38  -- Derive more attributes.
20:49:41  39  -- I want to use CORR() here to help SVM see the shape of the series.
20:49:41  40  -- But COVAR_POP is more stable:
20:49:41  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
20:49:41  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
20:49:41  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
20:49:41  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
20:49:41  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
20:49:41  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
20:49:41  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
20:49:41  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
20:49:41  49  -- Derive date related attributes:
20:49:41  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
20:49:41  51  ,0+TO_CHAR(ydate,'D')d
20:49:41  52  ,0+TO_CHAR(ydate,'W')w
20:49:41  53  -- mpm stands for minutes-past-midnight:
20:49:41  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
20:49:41  55  -- mph stands for minutes-past-hour:
20:49:41  56  ,0+TO_CHAR(ydate,'MI')mph
20:49:41  57  FROM svm6102
20:49:41  58  ORDER BY ydate
20:49:41  59  /

Table created.

Elapsed: 00:00:02.09
20:49:43 SQL> 
20:49:43 SQL> -- rpt
20:49:43 SQL> 
20:49:43 SQL> SELECT
20:49:43   2  pair
20:49:43   3  ,COUNT(pair)
20:49:43   4  ,MIN(clse),MAX(clse)
20:49:43   5  ,MIN(ydate),MAX(ydate)
20:49:43   6  FROM svm6122
20:49:43   7  GROUP BY pair
20:49:43   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19812 1.24182424 1.38284305 2010-10-03 20:55:01 2011-01-06 20:45:00

Elapsed: 00:00:00.04
20:49:43 SQL> 
20:49:43 SQL> -- Prepare for derivation of NTILE based params:
20:49:43 SQL> 
20:49:43 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.31
20:49:44 SQL> CREATE TABLE svm6142 COMPRESS AS
20:49:44   2  SELECT
20:49:44   3  pair
20:49:44   4  ,ydate
20:49:44   5  ,prdate
20:49:44   6  ,clse
20:49:44   7  ,g6
20:49:44   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
20:49:44   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
20:49:44  10  ,CASE WHEN trend IS NULL THEN 1
20:49:44  11  	    WHEN trend =0      THEN 1
20:49:44  12  	    ELSE trend END trend
20:49:44  13  ,cm4
20:49:44  14  ,cm6
20:49:44  15  ,cm8
20:49:44  16  ,cm10
20:49:44  17  ,cm12
20:49:44  18  ,cm14
20:49:44  19  ,cm16
20:49:44  20  ,cm18
20:49:44  21  --
20:49:44  22  ,ca4
20:49:44  23  ,ca6
20:49:44  24  ,ca8
20:49:44  25  ,ca10
20:49:44  26  ,ca12
20:49:44  27  ,ca14
20:49:44  28  ,ca16
20:49:44  29  ,ca18
20:49:44  30  --
20:49:44  31  ,cx4
20:49:44  32  ,cx6
20:49:44  33  ,cx8
20:49:44  34  ,cx10
20:49:44  35  ,cx12
20:49:44  36  ,cx14
20:49:44  37  ,cx16
20:49:44  38  ,cx18
20:49:44  39  --
20:49:44  40  ,crr4
20:49:44  41  ,crr6
20:49:44  42  ,crr8
20:49:44  43  ,crr10
20:49:44  44  ,crr12
20:49:44  45  ,crr14
20:49:44  46  ,crr16
20:49:44  47  ,crr18
20:49:44  48  --
20:49:44  49  ,hh
20:49:44  50  ,d
20:49:44  51  ,w
20:49:44  52  ,mpm
20:49:44  53  ,mph
20:49:44  54  FROM svm6122
20:49:44  55  ORDER BY ydate
20:49:44  56  /

Table created.

Elapsed: 00:00:00.41
20:49:44 SQL> 
20:49:44 SQL> -- rpt
20:49:44 SQL> 
20:49:44 SQL> SELECT
20:49:44   2  pair
20:49:44   3  ,trend
20:49:44   4  ,gatt
20:49:44   5  ,COUNT(pair)
20:49:44   6  ,AVG(g6)
20:49:44   7  FROM svm6142
20:49:44   8  GROUP BY pair,trend,gatt
20:49:44   9  ORDER BY pair,trend,gatt
20:49:44  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6785 -.00231246
ech_usd 	-1 up	      3581 .003574568
ech_usd 	-1		72
ech_usd 	 1 nup	      6466  -.0023826
ech_usd 	 1 up	      2908 .004120462

Elapsed: 00:00:00.03
20:49:44 SQL> 
20:49:44 SQL> 
20:49:44 SQL> -- Derive NTILE based params:
20:49:44 SQL> 
20:49:44 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.20
20:49:44 SQL> CREATE TABLE svm6162 COMPRESS AS
20:49:44   2  SELECT
20:49:44   3  pair
20:49:44   4  ,ydate
20:49:44   5  ,prdate
20:49:44   6  ,clse
20:49:44   7  ,g6
20:49:44   8  ,gatt
20:49:44   9  ,gattn
20:49:44  10  ,trend
20:49:44  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
20:49:44  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
20:49:44  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
20:49:44  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
20:49:44  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
20:49:44  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
20:49:44  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
20:49:44  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
20:49:44  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
20:49:44  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
20:49:44  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
20:49:44  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
20:49:44  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
20:49:44  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
20:49:44  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
20:49:44  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
20:49:44  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
20:49:44  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
20:49:44  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
20:49:44  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
20:49:44  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
20:49:44  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
20:49:44  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
20:49:44  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
20:49:44  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
20:49:44  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
20:49:44  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
20:49:44  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
20:49:44  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
20:49:44  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
20:49:44  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
20:49:44  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
20:49:44  43  ,hh  att32
20:49:44  44  ,d   att33
20:49:44  45  ,w   att34
20:49:44  46  ,mpm att35
20:49:44  47  ,mph att36
20:49:44  48  ,trend att37
20:49:44  49  FROM svm6142
20:49:44  50  ORDER BY ydate
20:49:44  51  /

Table created.

Elapsed: 00:00:05.43
20:49:50 SQL> 
20:49:50 SQL> -- rpt
20:49:50 SQL> 
20:49:50 SQL> SELECT
20:49:50   2  pair
20:49:50   3  ,trend
20:49:50   4  ,gatt
20:49:50   5  ,COUNT(pair)
20:49:50   6  ,AVG(g6)
20:49:50   7  FROM svm6162
20:49:50   8  GROUP BY pair,trend,gatt
20:49:50   9  ORDER BY pair,trend,gatt
20:49:50  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6785 -.00231246
ech_usd 	-1 up	      3581 .003574568
ech_usd 	-1		72
ech_usd 	 1 nup	      6466  -.0023826
ech_usd 	 1 up	      2908 .004120462

Elapsed: 00:00:00.03
20:49:50 SQL> 
20:49:50 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
20:49:50 SQL> CREATE TABLE modsrc COMPRESS AS
20:49:50   2  SELECT
20:49:50   3  pair
20:49:50   4  ,ydate
20:49:50   5  ,prdate
20:49:50   6  ,trend
20:49:50   7  ,g6
20:49:50   8  ,gatt
20:49:50   9  ,gattn
20:49:50  10  FROM svm6162
20:49:50  11  /

Table created.

Elapsed: 00:00:00.16
20:49:50 SQL> 
20:49:50 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.24
20:49:50 SQL> 
20:49:50 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
20:49:50 SQL> CREATE TABLE ech_ms610 COMPRESS AS
20:49:50   2  SELECT
20:49:50   3  ydate
20:49:50   4  ,trend ech_trend
20:49:50   5  ,g6    ech_g6
20:49:50   6  ,gatt  ech_gatt
20:49:50   7  ,gattn ech_gattn
20:49:50   8  FROM modsrc
20:49:50   9  /

Table created.

Elapsed: 00:00:00.06
20:49:50 SQL> 
20:49:50 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
20:49:51 SQL> 
20:49:51 SQL> -- I need a copy of the attributes:
20:49:51 SQL> 
20:49:51 SQL> 
20:49:51 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.06
20:49:51 SQL> CREATE TABLE ech_att COMPRESS AS
20:49:51   2  SELECT
20:49:51   3  ydate
20:49:51   4  ,att00 ech_att00
20:49:51   5  ,att01 ech_att01
20:49:51   6  ,att02 ech_att02
20:49:51   7  ,att03 ech_att03
20:49:51   8  ,att04 ech_att04
20:49:51   9  ,att05 ech_att05
20:49:51  10  ,att06 ech_att06
20:49:51  11  ,att07 ech_att07
20:49:51  12  ,att08 ech_att08
20:49:51  13  ,att09 ech_att09
20:49:51  14  ,att10 ech_att10
20:49:51  15  ,att11 ech_att11
20:49:51  16  ,att12 ech_att12
20:49:51  17  ,att13 ech_att13
20:49:51  18  ,att14 ech_att14
20:49:51  19  ,att15 ech_att15
20:49:51  20  ,att16 ech_att16
20:49:51  21  ,att17 ech_att17
20:49:51  22  ,att18 ech_att18
20:49:51  23  ,att19 ech_att19
20:49:51  24  ,att20 ech_att20
20:49:51  25  ,att21 ech_att21
20:49:51  26  ,att22 ech_att22
20:49:51  27  ,att23 ech_att23
20:49:51  28  ,att24 ech_att24
20:49:51  29  ,att25 ech_att25
20:49:51  30  ,att26 ech_att26
20:49:51  31  ,att27 ech_att27
20:49:51  32  ,att28 ech_att28
20:49:51  33  ,att29 ech_att29
20:49:51  34  ,att30 ech_att30
20:49:51  35  ,att31 ech_att31
20:49:51  36  ,att32 ech_att32
20:49:51  37  ,att33 ech_att33
20:49:51  38  ,att34 ech_att34
20:49:51  39  ,att35 ech_att35
20:49:51  40  ,att36 ech_att36
20:49:51  41  ,att37 ech_att37
20:49:51  42  FROM svm6162
20:49:51  43  /

Table created.

Elapsed: 00:00:00.18
20:49:51 SQL> 
20:49:51 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
20:49:51 SQL> 
20:49:51 SQL> -- rpt
20:49:51 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19812

Elapsed: 00:00:00.81
20:49:52 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19812

Elapsed: 00:00:00.00
20:49:52 SQL> 
20:49:52 SQL> --
20:49:52 SQL> -- egb610.sql
20:49:52 SQL> --
20:49:52 SQL> 
20:49:52 SQL> -- Creates views and tables for backtesting a forex SVM strategy
20:49:52 SQL> 
20:49:52 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.43
20:49:53 SQL> 
20:49:53 SQL> -- I created di5min here:
20:49:53 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
20:49:53 SQL> 
20:49:53 SQL> CREATE OR REPLACE VIEW svm6102 AS
20:49:53   2  SELECT
20:49:53   3  pair
20:49:53   4  ,ydate
20:49:53   5  ,prdate
20:49:53   6  ,rownum rnum -- acts as t in my time-series
20:49:53   7  ,clse
20:49:53   8  -- Derive a bunch of attributes from clse, the latest price:
20:49:53   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
20:49:53  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
20:49:53  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
20:49:53  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
20:49:53  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
20:49:53  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
20:49:53  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
20:49:53  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
20:49:53  17  --
20:49:53  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
20:49:53  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
20:49:53  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
20:49:53  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
20:49:53  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
20:49:53  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
20:49:53  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
20:49:53  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
20:49:53  26  --
20:49:53  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
20:49:53  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
20:49:53  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
20:49:53  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
20:49:53  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
20:49:53  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
20:49:53  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
20:49:53  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
20:49:53  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
20:49:53  36  FROM di5min WHERE pair LIKE'%egb%'
20:49:53  37  AND ydate > sysdate - 95
20:49:53  38  ORDER BY ydate
20:49:53  39  /

View created.

Elapsed: 00:00:00.05
20:49:53 SQL> 
20:49:53 SQL> -- rpt
20:49:53 SQL> 
20:49:53 SQL> SELECT
20:49:53   2  pair
20:49:53   3  ,COUNT(pair)
20:49:53   4  ,MIN(clse),MAX(clse)
20:49:53   5  ,MIN(avg6),MAX(avg6)
20:49:53   6  ,MIN(ydate),MAX(ydate)
20:49:53   7  FROM svm6102
20:49:53   8  GROUP BY pair
20:49:53   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19811 .833520557 .893920122 .834199029 .892400287 2010-10-03 20:55:01 2011-01-06 20:45:00

Elapsed: 00:00:00.98
20:49:54 SQL> 
20:49:54 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
20:49:54 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.28
20:49:54 SQL> CREATE TABLE svm6122 COMPRESS AS
20:49:54   2  SELECT
20:49:54   3  pair
20:49:54   4  ,ydate
20:49:54   5  ,prdate
20:49:54   6  ,clse
20:49:54   7  -- g6 is important. I want to predict g6:
20:49:54   8  ,ld6 - clse g6
20:49:54   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
20:49:54  10  -- I want more attributes from the ones I derived above:
20:49:54  11  -- clse relation to moving-min
20:49:54  12  ,clse-min4  cm4
20:49:54  13  ,clse-min6  cm6
20:49:54  14  ,clse-min8  cm8
20:49:54  15  ,clse-min10 cm10
20:49:54  16  ,clse-min12 cm12
20:49:54  17  ,clse-min14 cm14
20:49:54  18  ,clse-min16 cm16
20:49:54  19  ,clse-min18 cm18
20:49:54  20  -- clse relation to moving-avg
20:49:54  21  ,clse-avg4  ca4
20:49:54  22  ,clse-avg6  ca6
20:49:54  23  ,clse-avg8  ca8
20:49:54  24  ,clse-avg10 ca10
20:49:54  25  ,clse-avg12 ca12
20:49:54  26  ,clse-avg14 ca14
20:49:54  27  ,clse-avg16 ca16
20:49:54  28  ,clse-avg18 ca18
20:49:54  29  -- clse relation to moving-max
20:49:54  30  ,clse-max4  cx4
20:49:54  31  ,clse-max6  cx6
20:49:54  32  ,clse-max8  cx8
20:49:54  33  ,clse-max10 cx10
20:49:54  34  ,clse-max12 cx12
20:49:54  35  ,clse-max14 cx14
20:49:54  36  ,clse-max16 cx16
20:49:54  37  ,clse-max18 cx18
20:49:54  38  -- Derive more attributes.
20:49:54  39  -- I want to use CORR() here to help SVM see the shape of the series.
20:49:54  40  -- But COVAR_POP is more stable:
20:49:54  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
20:49:54  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
20:49:54  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
20:49:54  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
20:49:54  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
20:49:54  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
20:49:54  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
20:49:54  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
20:49:54  49  -- Derive date related attributes:
20:49:54  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
20:49:54  51  ,0+TO_CHAR(ydate,'D')d
20:49:54  52  ,0+TO_CHAR(ydate,'W')w
20:49:54  53  -- mpm stands for minutes-past-midnight:
20:49:54  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
20:49:54  55  -- mph stands for minutes-past-hour:
20:49:54  56  ,0+TO_CHAR(ydate,'MI')mph
20:49:54  57  FROM svm6102
20:49:54  58  ORDER BY ydate
20:49:54  59  /

Table created.

Elapsed: 00:00:02.51
20:49:56 SQL> 
20:49:56 SQL> -- rpt
20:49:56 SQL> 
20:49:56 SQL> SELECT
20:49:56   2  pair
20:49:56   3  ,COUNT(pair)
20:49:56   4  ,MIN(clse),MAX(clse)
20:49:56   5  ,MIN(ydate),MAX(ydate)
20:49:56   6  FROM svm6122
20:49:56   7  GROUP BY pair
20:49:56   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19811 .833520557 .893920122 2010-10-03 20:55:01 2011-01-06 20:45:00

Elapsed: 00:00:00.06
20:49:56 SQL> 
20:49:56 SQL> -- Prepare for derivation of NTILE based params:
20:49:56 SQL> 
20:49:56 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.36
20:49:57 SQL> CREATE TABLE svm6142 COMPRESS AS
20:49:57   2  SELECT
20:49:57   3  pair
20:49:57   4  ,ydate
20:49:57   5  ,prdate
20:49:57   6  ,clse
20:49:57   7  ,g6
20:49:57   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
20:49:57   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
20:49:57  10  ,CASE WHEN trend IS NULL THEN 1
20:49:57  11  	    WHEN trend =0      THEN 1
20:49:57  12  	    ELSE trend END trend
20:49:57  13  ,cm4
20:49:57  14  ,cm6
20:49:57  15  ,cm8
20:49:57  16  ,cm10
20:49:57  17  ,cm12
20:49:57  18  ,cm14
20:49:57  19  ,cm16
20:49:57  20  ,cm18
20:49:57  21  --
20:49:57  22  ,ca4
20:49:57  23  ,ca6
20:49:57  24  ,ca8
20:49:57  25  ,ca10
20:49:57  26  ,ca12
20:49:57  27  ,ca14
20:49:57  28  ,ca16
20:49:57  29  ,ca18
20:49:57  30  --
20:49:57  31  ,cx4
20:49:57  32  ,cx6
20:49:57  33  ,cx8
20:49:57  34  ,cx10
20:49:57  35  ,cx12
20:49:57  36  ,cx14
20:49:57  37  ,cx16
20:49:57  38  ,cx18
20:49:57  39  --
20:49:57  40  ,crr4
20:49:57  41  ,crr6
20:49:57  42  ,crr8
20:49:57  43  ,crr10
20:49:57  44  ,crr12
20:49:57  45  ,crr14
20:49:57  46  ,crr16
20:49:57  47  ,crr18
20:49:57  48  --
20:49:57  49  ,hh
20:49:57  50  ,d
20:49:57  51  ,w
20:49:57  52  ,mpm
20:49:57  53  ,mph
20:49:57  54  FROM svm6122
20:49:57  55  ORDER BY ydate
20:49:57  56  /

Table created.

Elapsed: 00:00:00.44
20:49:57 SQL> 
20:49:57 SQL> -- rpt
20:49:57 SQL> 
20:49:57 SQL> SELECT
20:49:57   2  pair
20:49:57   3  ,trend
20:49:57   4  ,gatt
20:49:57   5  ,COUNT(pair)
20:49:57   6  ,AVG(g6)
20:49:57   7  FROM svm6142
20:49:57   8  GROUP BY pair,trend,gatt
20:49:57   9  ORDER BY pair,trend,gatt
20:49:57  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7969 -.00106946
egb_usd 	-1 up	      2636 .002928295
egb_usd 	-1		69
egb_usd 	 1 nup	      6517 -.00138235
egb_usd 	 1 up	      2617   .0029282
egb_usd 	 1		 3

6 rows selected.

Elapsed: 00:00:00.05
20:49:57 SQL> 
20:49:57 SQL> 
20:49:57 SQL> -- Derive NTILE based params:
20:49:57 SQL> 
20:49:57 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.35
20:49:58 SQL> CREATE TABLE svm6162 COMPRESS AS
20:49:58   2  SELECT
20:49:58   3  pair
20:49:58   4  ,ydate
20:49:58   5  ,prdate
20:49:58   6  ,clse
20:49:58   7  ,g6
20:49:58   8  ,gatt
20:49:58   9  ,gattn
20:49:58  10  ,trend
20:49:58  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
20:49:58  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
20:49:58  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
20:49:58  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
20:49:58  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
20:49:58  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
20:49:58  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
20:49:58  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
20:49:58  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
20:49:58  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
20:49:58  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
20:49:58  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
20:49:58  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
20:49:58  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
20:49:58  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
20:49:58  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
20:49:58  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
20:49:58  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
20:49:58  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
20:49:58  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
20:49:58  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
20:49:58  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
20:49:58  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
20:49:58  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
20:49:58  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
20:49:58  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
20:49:58  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
20:49:58  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
20:49:58  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
20:49:58  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
20:49:58  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
20:49:58  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
20:49:58  43  ,hh  att32
20:49:58  44  ,d   att33
20:49:58  45  ,w   att34
20:49:58  46  ,mpm att35
20:49:58  47  ,mph att36
20:49:58  48  ,trend att37
20:49:58  49  FROM svm6142
20:49:58  50  ORDER BY ydate
20:49:58  51  /

Table created.

Elapsed: 00:00:05.71
20:50:03 SQL> 
20:50:03 SQL> -- rpt
20:50:03 SQL> 
20:50:03 SQL> SELECT
20:50:03   2  pair
20:50:03   3  ,trend
20:50:03   4  ,gatt
20:50:03   5  ,COUNT(pair)
20:50:03   6  ,AVG(g6)
20:50:03   7  FROM svm6162
20:50:03   8  GROUP BY pair,trend,gatt
20:50:03   9  ORDER BY pair,trend,gatt
20:50:03  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7969 -.00106946
egb_usd 	-1 up	      2636 .002928295
egb_usd 	-1		69
egb_usd 	 1 nup	      6517 -.00138235
egb_usd 	 1 up	      2617   .0029282
egb_usd 	 1		 3

6 rows selected.

Elapsed: 00:00:00.04
20:50:03 SQL> 
20:50:03 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.24
20:50:04 SQL> CREATE TABLE modsrc COMPRESS AS
20:50:04   2  SELECT
20:50:04   3  pair
20:50:04   4  ,ydate
20:50:04   5  ,prdate
20:50:04   6  ,trend
20:50:04   7  ,g6
20:50:04   8  ,gatt
20:50:04   9  ,gattn
20:50:04  10  FROM svm6162
20:50:04  11  /

Table created.

Elapsed: 00:00:00.08
20:50:04 SQL> 
20:50:04 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
20:50:04 SQL> 
20:50:04 SQL> DROP   TABLE egb_ms610 ;

Table dropped.

Elapsed: 00:00:00.19
20:50:04 SQL> CREATE TABLE egb_ms610 COMPRESS AS
20:50:04   2  SELECT
20:50:04   3  ydate
20:50:04   4  ,trend egb_trend
20:50:04   5  ,g6    egb_g6
20:50:04   6  ,gatt  egb_gatt
20:50:04   7  ,gattn egb_gattn
20:50:04   8  FROM modsrc
20:50:04   9  /

Table created.

Elapsed: 00:00:00.06
20:50:04 SQL> 
20:50:04 SQL> ANALYZE TABLE egb_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
20:50:04 SQL> 
20:50:04 SQL> -- I need a copy of the attributes:
20:50:04 SQL> 
20:50:04 SQL> 
20:50:04 SQL> DROP   TABLE egb_att;

Table dropped.

Elapsed: 00:00:00.06
20:50:04 SQL> CREATE TABLE egb_att COMPRESS AS
20:50:04   2  SELECT
20:50:04   3  ydate
20:50:04   4  ,att00 egb_att00
20:50:04   5  ,att01 egb_att01
20:50:04   6  ,att02 egb_att02
20:50:04   7  ,att03 egb_att03
20:50:04   8  ,att04 egb_att04
20:50:04   9  ,att05 egb_att05
20:50:04  10  ,att06 egb_att06
20:50:04  11  ,att07 egb_att07
20:50:04  12  ,att08 egb_att08
20:50:04  13  ,att09 egb_att09
20:50:04  14  ,att10 egb_att10
20:50:04  15  ,att11 egb_att11
20:50:04  16  ,att12 egb_att12
20:50:04  17  ,att13 egb_att13
20:50:04  18  ,att14 egb_att14
20:50:04  19  ,att15 egb_att15
20:50:04  20  ,att16 egb_att16
20:50:04  21  ,att17 egb_att17
20:50:04  22  ,att18 egb_att18
20:50:04  23  ,att19 egb_att19
20:50:04  24  ,att20 egb_att20
20:50:04  25  ,att21 egb_att21
20:50:04  26  ,att22 egb_att22
20:50:04  27  ,att23 egb_att23
20:50:04  28  ,att24 egb_att24
20:50:04  29  ,att25 egb_att25
20:50:04  30  ,att26 egb_att26
20:50:04  31  ,att27 egb_att27
20:50:04  32  ,att28 egb_att28
20:50:04  33  ,att29 egb_att29
20:50:04  34  ,att30 egb_att30
20:50:04  35  ,att31 egb_att31
20:50:04  36  ,att32 egb_att32
20:50:04  37  ,att33 egb_att33
20:50:04  38  ,att34 egb_att34
20:50:04  39  ,att35 egb_att35
20:50:04  40  ,att36 egb_att36
20:50:04  41  ,att37 egb_att37
20:50:04  42  FROM svm6162
20:50:04  43  /

Table created.

Elapsed: 00:00:00.18
20:50:05 SQL> 
20:50:05 SQL> ANALYZE TABLE egb_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
20:50:05 SQL> 
20:50:05 SQL> -- rpt
20:50:05 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19811

Elapsed: 00:00:00.95
20:50:06 SQL> SELECT COUNT(*)FROM egb_att;

  COUNT(*)
----------
     19811

Elapsed: 00:00:00.00
20:50:06 SQL> 
20:50:06 SQL> --
20:50:06 SQL> -- ejp610.sql
20:50:06 SQL> --
20:50:06 SQL> 
20:50:06 SQL> -- Creates views and tables for backtesting a forex SVM strategy
20:50:06 SQL> 
20:50:06 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.87
20:50:07 SQL> 
20:50:07 SQL> -- I created di5min here:
20:50:07 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
20:50:07 SQL> 
20:50:07 SQL> CREATE OR REPLACE VIEW svm6102 AS
20:50:07   2  SELECT
20:50:07   3  pair
20:50:07   4  ,ydate
20:50:07   5  ,prdate
20:50:07   6  ,rownum rnum -- acts as t in my time-series
20:50:07   7  ,clse
20:50:07   8  -- Derive a bunch of attributes from clse, the latest price:
20:50:07   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
20:50:07  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
20:50:07  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
20:50:07  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
20:50:07  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
20:50:07  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
20:50:07  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
20:50:07  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
20:50:07  17  --
20:50:07  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
20:50:07  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
20:50:07  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
20:50:07  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
20:50:07  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
20:50:07  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
20:50:07  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
20:50:07  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
20:50:07  26  --
20:50:07  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
20:50:07  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
20:50:07  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
20:50:07  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
20:50:07  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
20:50:07  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
20:50:07  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
20:50:07  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
20:50:07  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
20:50:07  36  FROM di5min WHERE pair LIKE'%ejp%'
20:50:07  37  AND ydate > sysdate - 95
20:50:07  38  ORDER BY ydate
20:50:07  39  /

View created.

Elapsed: 00:00:00.05
20:50:07 SQL> 
20:50:07 SQL> -- rpt
20:50:07 SQL> 
20:50:07 SQL> SELECT
20:50:07   2  pair
20:50:07   3  ,COUNT(pair)
20:50:07   4  ,MIN(clse),MAX(clse)
20:50:07   5  ,MIN(avg6),MAX(avg6)
20:50:07   6  ,MIN(ydate),MAX(ydate)
20:50:07   7  FROM svm6102
20:50:07   8  GROUP BY pair
20:50:07   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ejp_usd       19809 107.643765	115.63485 107.776148 115.509678 2010-10-03 20:55:01 2011-01-06 20:45:00

Elapsed: 00:00:00.87
20:50:08 SQL> 
20:50:08 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
20:50:08 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.31
20:50:08 SQL> CREATE TABLE svm6122 COMPRESS AS
20:50:08   2  SELECT
20:50:08   3  pair
20:50:08   4  ,ydate
20:50:08   5  ,prdate
20:50:08   6  ,clse
20:50:08   7  -- g6 is important. I want to predict g6:
20:50:08   8  ,ld6 - clse g6
20:50:08   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
20:50:08  10  -- I want more attributes from the ones I derived above:
20:50:08  11  -- clse relation to moving-min
20:50:08  12  ,clse-min4  cm4
20:50:08  13  ,clse-min6  cm6
20:50:08  14  ,clse-min8  cm8
20:50:08  15  ,clse-min10 cm10
20:50:08  16  ,clse-min12 cm12
20:50:08  17  ,clse-min14 cm14
20:50:08  18  ,clse-min16 cm16
20:50:08  19  ,clse-min18 cm18
20:50:08  20  -- clse relation to moving-avg
20:50:08  21  ,clse-avg4  ca4
20:50:08  22  ,clse-avg6  ca6
20:50:08  23  ,clse-avg8  ca8
20:50:08  24  ,clse-avg10 ca10
20:50:08  25  ,clse-avg12 ca12
20:50:08  26  ,clse-avg14 ca14
20:50:08  27  ,clse-avg16 ca16
20:50:08  28  ,clse-avg18 ca18
20:50:08  29  -- clse relation to moving-max
20:50:08  30  ,clse-max4  cx4
20:50:08  31  ,clse-max6  cx6
20:50:08  32  ,clse-max8  cx8
20:50:08  33  ,clse-max10 cx10
20:50:08  34  ,clse-max12 cx12
20:50:08  35  ,clse-max14 cx14
20:50:08  36  ,clse-max16 cx16
20:50:08  37  ,clse-max18 cx18
20:50:08  38  -- Derive more attributes.
20:50:08  39  -- I want to use CORR() here to help SVM see the shape of the series.
20:50:08  40  -- But COVAR_POP is more stable:
20:50:08  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
20:50:08  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
20:50:08  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
20:50:08  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
20:50:08  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
20:50:08  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
20:50:08  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
20:50:08  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
20:50:08  49  -- Derive date related attributes:
20:50:08  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
20:50:08  51  ,0+TO_CHAR(ydate,'D')d
20:50:08  52  ,0+TO_CHAR(ydate,'W')w
20:50:08  53  -- mpm stands for minutes-past-midnight:
20:50:08  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
20:50:08  55  -- mph stands for minutes-past-hour:
20:50:08  56  ,0+TO_CHAR(ydate,'MI')mph
20:50:08  57  FROM svm6102
20:50:08  58  ORDER BY ydate
20:50:08  59  /

Table created.

Elapsed: 00:00:02.13
20:50:10 SQL> 
20:50:10 SQL> -- rpt
20:50:10 SQL> 
20:50:10 SQL> SELECT
20:50:10   2  pair
20:50:10   3  ,COUNT(pair)
20:50:10   4  ,MIN(clse),MAX(clse)
20:50:10   5  ,MIN(ydate),MAX(ydate)
20:50:10   6  FROM svm6122
20:50:10   7  GROUP BY pair
20:50:10   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ejp_usd       19809 107.643765	115.63485 2010-10-03 20:55:01 2011-01-06 20:45:00

Elapsed: 00:00:00.04
20:50:10 SQL> 
20:50:10 SQL> -- Prepare for derivation of NTILE based params:
20:50:10 SQL> 
20:50:10 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.22
20:50:10 SQL> CREATE TABLE svm6142 COMPRESS AS
20:50:10   2  SELECT
20:50:10   3  pair
20:50:10   4  ,ydate
20:50:10   5  ,prdate
20:50:10   6  ,clse
20:50:10   7  ,g6
20:50:10   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
20:50:10   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
20:50:10  10  ,CASE WHEN trend IS NULL THEN 1
20:50:10  11  	    WHEN trend =0      THEN 1
20:50:10  12  	    ELSE trend END trend
20:50:10  13  ,cm4
20:50:10  14  ,cm6
20:50:10  15  ,cm8
20:50:10  16  ,cm10
20:50:10  17  ,cm12
20:50:10  18  ,cm14
20:50:10  19  ,cm16
20:50:10  20  ,cm18
20:50:10  21  --
20:50:10  22  ,ca4
20:50:10  23  ,ca6
20:50:10  24  ,ca8
20:50:10  25  ,ca10
20:50:10  26  ,ca12
20:50:10  27  ,ca14
20:50:10  28  ,ca16
20:50:10  29  ,ca18
20:50:10  30  --
20:50:10  31  ,cx4
20:50:10  32  ,cx6
20:50:10  33  ,cx8
20:50:10  34  ,cx10
20:50:10  35  ,cx12
20:50:10  36  ,cx14
20:50:10  37  ,cx16
20:50:10  38  ,cx18
20:50:10  39  --
20:50:10  40  ,crr4
20:50:10  41  ,crr6
20:50:10  42  ,crr8
20:50:10  43  ,crr10
20:50:10  44  ,crr12
20:50:10  45  ,crr14
20:50:10  46  ,crr16
20:50:10  47  ,crr18
20:50:10  48  --
20:50:10  49  ,hh
20:50:10  50  ,d
20:50:10  51  ,w
20:50:10  52  ,mpm
20:50:10  53  ,mph
20:50:10  54  FROM svm6122
20:50:10  55  ORDER BY ydate
20:50:10  56  /

Table created.

Elapsed: 00:00:00.39
20:50:11 SQL> 
20:50:11 SQL> -- rpt
20:50:11 SQL> 
20:50:11 SQL> SELECT
20:50:11   2  pair
20:50:11   3  ,trend
20:50:11   4  ,gatt
20:50:11   5  ,COUNT(pair)
20:50:11   6  ,AVG(g6)
20:50:11   7  FROM svm6142
20:50:11   8  GROUP BY pair,trend,gatt
20:50:11   9  ORDER BY pair,trend,gatt
20:50:11  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      5162 -.32371512
ejp_usd 	-1 up	      4933 .277546049
ejp_usd 	-1		72
ejp_usd 	 1 nup	      5013 -.29960177
ejp_usd 	 1 up	      4629 .288539579

Elapsed: 00:00:00.04
20:50:11 SQL> 
20:50:11 SQL> 
20:50:11 SQL> -- Derive NTILE based params:
20:50:11 SQL> 
20:50:11 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.17
20:50:11 SQL> CREATE TABLE svm6162 COMPRESS AS
20:50:11   2  SELECT
20:50:11   3  pair
20:50:11   4  ,ydate
20:50:11   5  ,prdate
20:50:11   6  ,clse
20:50:11   7  ,g6
20:50:11   8  ,gatt
20:50:11   9  ,gattn
20:50:11  10  ,trend
20:50:11  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
20:50:11  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
20:50:11  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
20:50:11  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
20:50:11  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
20:50:11  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
20:50:11  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
20:50:11  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
20:50:11  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
20:50:11  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
20:50:11  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
20:50:11  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
20:50:11  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
20:50:11  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
20:50:11  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
20:50:11  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
20:50:11  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
20:50:11  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
20:50:11  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
20:50:11  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
20:50:11  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
20:50:11  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
20:50:11  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
20:50:11  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
20:50:11  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
20:50:11  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
20:50:11  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
20:50:11  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
20:50:11  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
20:50:11  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
20:50:11  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
20:50:11  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
20:50:11  43  ,hh  att32
20:50:11  44  ,d   att33
20:50:11  45  ,w   att34
20:50:11  46  ,mpm att35
20:50:11  47  ,mph att36
20:50:11  48  ,trend att37
20:50:11  49  FROM svm6142
20:50:11  50  ORDER BY ydate
20:50:11  51  /

Table created.

Elapsed: 00:00:04.94
20:50:16 SQL> 
20:50:16 SQL> -- rpt
20:50:16 SQL> 
20:50:16 SQL> SELECT
20:50:16   2  pair
20:50:16   3  ,trend
20:50:16   4  ,gatt
20:50:16   5  ,COUNT(pair)
20:50:16   6  ,AVG(g6)
20:50:16   7  FROM svm6162
20:50:16   8  GROUP BY pair,trend,gatt
20:50:16   9  ORDER BY pair,trend,gatt
20:50:16  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      5162 -.32371512
ejp_usd 	-1 up	      4933 .277546049
ejp_usd 	-1		72
ejp_usd 	 1 nup	      5013 -.29960177
ejp_usd 	 1 up	      4629 .288539579

Elapsed: 00:00:00.03
20:50:16 SQL> 
20:50:16 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
20:50:16 SQL> CREATE TABLE modsrc COMPRESS AS
20:50:16   2  SELECT
20:50:16   3  pair
20:50:16   4  ,ydate
20:50:16   5  ,prdate
20:50:16   6  ,trend
20:50:16   7  ,g6
20:50:16   8  ,gatt
20:50:16   9  ,gattn
20:50:16  10  FROM svm6162
20:50:16  11  /

Table created.

Elapsed: 00:00:00.09
20:50:16 SQL> 
20:50:16 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
20:50:16 SQL> 
20:50:16 SQL> DROP   TABLE ejp_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
20:50:16 SQL> CREATE TABLE ejp_ms610 COMPRESS AS
20:50:16   2  SELECT
20:50:16   3  ydate
20:50:16   4  ,trend ejp_trend
20:50:16   5  ,g6    ejp_g6
20:50:16   6  ,gatt  ejp_gatt
20:50:16   7  ,gattn ejp_gattn
20:50:16   8  FROM modsrc
20:50:16   9  /

Table created.

Elapsed: 00:00:00.08
20:50:17 SQL> 
20:50:17 SQL> ANALYZE TABLE ejp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
20:50:17 SQL> 
20:50:17 SQL> -- I need a copy of the attributes:
20:50:17 SQL> 
20:50:17 SQL> 
20:50:17 SQL> DROP   TABLE ejp_att;

Table dropped.

Elapsed: 00:00:00.06
20:50:17 SQL> CREATE TABLE ejp_att COMPRESS AS
20:50:17   2  SELECT
20:50:17   3  ydate
20:50:17   4  ,att00 ejp_att00
20:50:17   5  ,att01 ejp_att01
20:50:17   6  ,att02 ejp_att02
20:50:17   7  ,att03 ejp_att03
20:50:17   8  ,att04 ejp_att04
20:50:17   9  ,att05 ejp_att05
20:50:17  10  ,att06 ejp_att06
20:50:17  11  ,att07 ejp_att07
20:50:17  12  ,att08 ejp_att08
20:50:17  13  ,att09 ejp_att09
20:50:17  14  ,att10 ejp_att10
20:50:17  15  ,att11 ejp_att11
20:50:17  16  ,att12 ejp_att12
20:50:17  17  ,att13 ejp_att13
20:50:17  18  ,att14 ejp_att14
20:50:17  19  ,att15 ejp_att15
20:50:17  20  ,att16 ejp_att16
20:50:17  21  ,att17 ejp_att17
20:50:17  22  ,att18 ejp_att18
20:50:17  23  ,att19 ejp_att19
20:50:17  24  ,att20 ejp_att20
20:50:17  25  ,att21 ejp_att21
20:50:17  26  ,att22 ejp_att22
20:50:17  27  ,att23 ejp_att23
20:50:17  28  ,att24 ejp_att24
20:50:17  29  ,att25 ejp_att25
20:50:17  30  ,att26 ejp_att26
20:50:17  31  ,att27 ejp_att27
20:50:17  32  ,att28 ejp_att28
20:50:17  33  ,att29 ejp_att29
20:50:17  34  ,att30 ejp_att30
20:50:17  35  ,att31 ejp_att31
20:50:17  36  ,att32 ejp_att32
20:50:17  37  ,att33 ejp_att33
20:50:17  38  ,att34 ejp_att34
20:50:17  39  ,att35 ejp_att35
20:50:17  40  ,att36 ejp_att36
20:50:17  41  ,att37 ejp_att37
20:50:17  42  FROM svm6162
20:50:17  43  /

Table created.

Elapsed: 00:00:00.23
20:50:17 SQL> 
20:50:17 SQL> ANALYZE TABLE ejp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
20:50:17 SQL> 
20:50:17 SQL> -- rpt
20:50:17 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.83
20:50:18 SQL> SELECT COUNT(*)FROM ejp_att;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.00
20:50:18 SQL> 
20:50:18 SQL> --
20:50:18 SQL> -- ajp610.sql
20:50:18 SQL> --
20:50:18 SQL> 
20:50:18 SQL> -- Creates views and tables for backtesting a forex SVM strategy
20:50:18 SQL> 
20:50:18 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:01.34
20:50:20 SQL> 
20:50:20 SQL> -- I created di5min here:
20:50:20 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
20:50:20 SQL> 
20:50:20 SQL> CREATE OR REPLACE VIEW svm6102 AS
20:50:20   2  SELECT
20:50:20   3  pair
20:50:20   4  ,ydate
20:50:20   5  ,prdate
20:50:20   6  ,rownum rnum -- acts as t in my time-series
20:50:20   7  ,clse
20:50:20   8  -- Derive a bunch of attributes from clse, the latest price:
20:50:20   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
20:50:20  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
20:50:20  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
20:50:20  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
20:50:20  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
20:50:20  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
20:50:20  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
20:50:20  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
20:50:20  17  --
20:50:20  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
20:50:20  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
20:50:20  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
20:50:20  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
20:50:20  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
20:50:20  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
20:50:20  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
20:50:20  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
20:50:20  26  --
20:50:20  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
20:50:20  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
20:50:20  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
20:50:20  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
20:50:20  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
20:50:20  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
20:50:20  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
20:50:20  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
20:50:20  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
20:50:20  36  FROM di5min WHERE pair LIKE'%ajp%'
20:50:20  37  AND ydate > sysdate - 95
20:50:20  38  ORDER BY ydate
20:50:20  39  /

View created.

Elapsed: 00:00:00.05
20:50:20 SQL> 
20:50:20 SQL> -- rpt
20:50:20 SQL> 
20:50:20 SQL> SELECT
20:50:20   2  pair
20:50:20   3  ,COUNT(pair)
20:50:20   4  ,MIN(clse),MAX(clse)
20:50:20   5  ,MIN(avg6),MAX(avg6)
20:50:20   6  ,MIN(ydate),MAX(ydate)
20:50:20   7  FROM svm6102
20:50:20   8  GROUP BY pair
20:50:20   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ajp_usd       19806  78.249976 83.6669853 78.5106193  83.546306 2010-10-03 20:55:01 2011-01-06 20:45:00

Elapsed: 00:00:00.80
20:50:20 SQL> 
20:50:20 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
20:50:20 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.22
20:50:21 SQL> CREATE TABLE svm6122 COMPRESS AS
20:50:21   2  SELECT
20:50:21   3  pair
20:50:21   4  ,ydate
20:50:21   5  ,prdate
20:50:21   6  ,clse
20:50:21   7  -- g6 is important. I want to predict g6:
20:50:21   8  ,ld6 - clse g6
20:50:21   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
20:50:21  10  -- I want more attributes from the ones I derived above:
20:50:21  11  -- clse relation to moving-min
20:50:21  12  ,clse-min4  cm4
20:50:21  13  ,clse-min6  cm6
20:50:21  14  ,clse-min8  cm8
20:50:21  15  ,clse-min10 cm10
20:50:21  16  ,clse-min12 cm12
20:50:21  17  ,clse-min14 cm14
20:50:21  18  ,clse-min16 cm16
20:50:21  19  ,clse-min18 cm18
20:50:21  20  -- clse relation to moving-avg
20:50:21  21  ,clse-avg4  ca4
20:50:21  22  ,clse-avg6  ca6
20:50:21  23  ,clse-avg8  ca8
20:50:21  24  ,clse-avg10 ca10
20:50:21  25  ,clse-avg12 ca12
20:50:21  26  ,clse-avg14 ca14
20:50:21  27  ,clse-avg16 ca16
20:50:21  28  ,clse-avg18 ca18
20:50:21  29  -- clse relation to moving-max
20:50:21  30  ,clse-max4  cx4
20:50:21  31  ,clse-max6  cx6
20:50:21  32  ,clse-max8  cx8
20:50:21  33  ,clse-max10 cx10
20:50:21  34  ,clse-max12 cx12
20:50:21  35  ,clse-max14 cx14
20:50:21  36  ,clse-max16 cx16
20:50:21  37  ,clse-max18 cx18
20:50:21  38  -- Derive more attributes.
20:50:21  39  -- I want to use CORR() here to help SVM see the shape of the series.
20:50:21  40  -- But COVAR_POP is more stable:
20:50:21  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
20:50:21  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
20:50:21  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
20:50:21  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
20:50:21  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
20:50:21  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
20:50:21  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
20:50:21  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
20:50:21  49  -- Derive date related attributes:
20:50:21  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
20:50:21  51  ,0+TO_CHAR(ydate,'D')d
20:50:21  52  ,0+TO_CHAR(ydate,'W')w
20:50:21  53  -- mpm stands for minutes-past-midnight:
20:50:21  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
20:50:21  55  -- mph stands for minutes-past-hour:
20:50:21  56  ,0+TO_CHAR(ydate,'MI')mph
20:50:21  57  FROM svm6102
20:50:21  58  ORDER BY ydate
20:50:21  59  /

Table created.

Elapsed: 00:00:02.10
20:50:23 SQL> 
20:50:23 SQL> -- rpt
20:50:23 SQL> 
20:50:23 SQL> SELECT
20:50:23   2  pair
20:50:23   3  ,COUNT(pair)
20:50:23   4  ,MIN(clse),MAX(clse)
20:50:23   5  ,MIN(ydate),MAX(ydate)
20:50:23   6  FROM svm6122
20:50:23   7  GROUP BY pair
20:50:23   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ajp_usd       19806  78.249976 83.6669853 2010-10-03 20:55:01 2011-01-06 20:45:00

Elapsed: 00:00:00.04
20:50:23 SQL> 
20:50:23 SQL> -- Prepare for derivation of NTILE based params:
20:50:23 SQL> 
20:50:23 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.27
20:50:23 SQL> CREATE TABLE svm6142 COMPRESS AS
20:50:23   2  SELECT
20:50:23   3  pair
20:50:23   4  ,ydate
20:50:23   5  ,prdate
20:50:23   6  ,clse
20:50:23   7  ,g6
20:50:23   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
20:50:23   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
20:50:23  10  ,CASE WHEN trend IS NULL THEN 1
20:50:23  11  	    WHEN trend =0      THEN 1
20:50:23  12  	    ELSE trend END trend
20:50:23  13  ,cm4
20:50:23  14  ,cm6
20:50:23  15  ,cm8
20:50:23  16  ,cm10
20:50:23  17  ,cm12
20:50:23  18  ,cm14
20:50:23  19  ,cm16
20:50:23  20  ,cm18
20:50:23  21  --
20:50:23  22  ,ca4
20:50:23  23  ,ca6
20:50:23  24  ,ca8
20:50:23  25  ,ca10
20:50:23  26  ,ca12
20:50:23  27  ,ca14
20:50:23  28  ,ca16
20:50:23  29  ,ca18
20:50:23  30  --
20:50:23  31  ,cx4
20:50:23  32  ,cx6
20:50:23  33  ,cx8
20:50:23  34  ,cx10
20:50:23  35  ,cx12
20:50:23  36  ,cx14
20:50:23  37  ,cx16
20:50:23  38  ,cx18
20:50:23  39  --
20:50:23  40  ,crr4
20:50:23  41  ,crr6
20:50:23  42  ,crr8
20:50:23  43  ,crr10
20:50:23  44  ,crr12
20:50:23  45  ,crr14
20:50:23  46  ,crr16
20:50:23  47  ,crr18
20:50:23  48  --
20:50:23  49  ,hh
20:50:23  50  ,d
20:50:23  51  ,w
20:50:23  52  ,mpm
20:50:23  53  ,mph
20:50:23  54  FROM svm6122
20:50:23  55  ORDER BY ydate
20:50:23  56  /

Table created.

Elapsed: 00:00:00.40
20:50:24 SQL> 
20:50:24 SQL> -- rpt
20:50:24 SQL> 
20:50:24 SQL> SELECT
20:50:24   2  pair
20:50:24   3  ,trend
20:50:24   4  ,gatt
20:50:24   5  ,COUNT(pair)
20:50:24   6  ,AVG(g6)
20:50:24   7  FROM svm6142
20:50:24   8  GROUP BY pair,trend,gatt
20:50:24   9  ORDER BY pair,trend,gatt
20:50:24  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4393 -.22302204
ajp_usd 	-1 up	      5214 .223855212
ajp_usd 	-1		62
ajp_usd 	 1 nup	      5308 -.20353162
ajp_usd 	 1 up	      4819 .212491008
ajp_usd 	 1		10

6 rows selected.

Elapsed: 00:00:00.04
20:50:24 SQL> 
20:50:24 SQL> 
20:50:24 SQL> -- Derive NTILE based params:
20:50:24 SQL> 
20:50:24 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
20:50:24 SQL> CREATE TABLE svm6162 COMPRESS AS
20:50:24   2  SELECT
20:50:24   3  pair
20:50:24   4  ,ydate
20:50:24   5  ,prdate
20:50:24   6  ,clse
20:50:24   7  ,g6
20:50:24   8  ,gatt
20:50:24   9  ,gattn
20:50:24  10  ,trend
20:50:24  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
20:50:24  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
20:50:24  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
20:50:24  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
20:50:24  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
20:50:24  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
20:50:24  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
20:50:24  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
20:50:24  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
20:50:24  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
20:50:24  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
20:50:24  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
20:50:24  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
20:50:24  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
20:50:24  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
20:50:24  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
20:50:24  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
20:50:24  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
20:50:24  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
20:50:24  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
20:50:24  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
20:50:24  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
20:50:24  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
20:50:24  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
20:50:24  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
20:50:24  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
20:50:24  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
20:50:24  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
20:50:24  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
20:50:24  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
20:50:24  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
20:50:24  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
20:50:24  43  ,hh  att32
20:50:24  44  ,d   att33
20:50:24  45  ,w   att34
20:50:24  46  ,mpm att35
20:50:24  47  ,mph att36
20:50:24  48  ,trend att37
20:50:24  49  FROM svm6142
20:50:24  50  ORDER BY ydate
20:50:24  51  /

Table created.

Elapsed: 00:00:04.99
20:50:29 SQL> 
20:50:29 SQL> -- rpt
20:50:29 SQL> 
20:50:29 SQL> SELECT
20:50:29   2  pair
20:50:29   3  ,trend
20:50:29   4  ,gatt
20:50:29   5  ,COUNT(pair)
20:50:29   6  ,AVG(g6)
20:50:29   7  FROM svm6162
20:50:29   8  GROUP BY pair,trend,gatt
20:50:29   9  ORDER BY pair,trend,gatt
20:50:29  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4393 -.22302204
ajp_usd 	-1 up	      5214 .223855212
ajp_usd 	-1		62
ajp_usd 	 1 nup	      5308 -.20353162
ajp_usd 	 1 up	      4819 .212491008
ajp_usd 	 1		10

6 rows selected.

Elapsed: 00:00:00.03
20:50:29 SQL> 
20:50:29 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
20:50:29 SQL> CREATE TABLE modsrc COMPRESS AS
20:50:29   2  SELECT
20:50:29   3  pair
20:50:29   4  ,ydate
20:50:29   5  ,prdate
20:50:29   6  ,trend
20:50:29   7  ,g6
20:50:29   8  ,gatt
20:50:29   9  ,gattn
20:50:29  10  FROM svm6162
20:50:29  11  /

Table created.

Elapsed: 00:00:00.09
20:50:29 SQL> 
20:50:29 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
20:50:29 SQL> 
20:50:29 SQL> DROP   TABLE ajp_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
20:50:29 SQL> CREATE TABLE ajp_ms610 COMPRESS AS
20:50:29   2  SELECT
20:50:29   3  ydate
20:50:29   4  ,trend ajp_trend
20:50:29   5  ,g6    ajp_g6
20:50:29   6  ,gatt  ajp_gatt
20:50:29   7  ,gattn ajp_gattn
20:50:29   8  FROM modsrc
20:50:29   9  /

Table created.

Elapsed: 00:00:00.12
20:50:29 SQL> 
20:50:29 SQL> ANALYZE TABLE ajp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
20:50:30 SQL> 
20:50:30 SQL> -- I need a copy of the attributes:
20:50:30 SQL> 
20:50:30 SQL> 
20:50:30 SQL> DROP   TABLE ajp_att;

Table dropped.

Elapsed: 00:00:00.05
20:50:30 SQL> CREATE TABLE ajp_att COMPRESS AS
20:50:30   2  SELECT
20:50:30   3  ydate
20:50:30   4  ,att00 ajp_att00
20:50:30   5  ,att01 ajp_att01
20:50:30   6  ,att02 ajp_att02
20:50:30   7  ,att03 ajp_att03
20:50:30   8  ,att04 ajp_att04
20:50:30   9  ,att05 ajp_att05
20:50:30  10  ,att06 ajp_att06
20:50:30  11  ,att07 ajp_att07
20:50:30  12  ,att08 ajp_att08
20:50:30  13  ,att09 ajp_att09
20:50:30  14  ,att10 ajp_att10
20:50:30  15  ,att11 ajp_att11
20:50:30  16  ,att12 ajp_att12
20:50:30  17  ,att13 ajp_att13
20:50:30  18  ,att14 ajp_att14
20:50:30  19  ,att15 ajp_att15
20:50:30  20  ,att16 ajp_att16
20:50:30  21  ,att17 ajp_att17
20:50:30  22  ,att18 ajp_att18
20:50:30  23  ,att19 ajp_att19
20:50:30  24  ,att20 ajp_att20
20:50:30  25  ,att21 ajp_att21
20:50:30  26  ,att22 ajp_att22
20:50:30  27  ,att23 ajp_att23
20:50:30  28  ,att24 ajp_att24
20:50:30  29  ,att25 ajp_att25
20:50:30  30  ,att26 ajp_att26
20:50:30  31  ,att27 ajp_att27
20:50:30  32  ,att28 ajp_att28
20:50:30  33  ,att29 ajp_att29
20:50:30  34  ,att30 ajp_att30
20:50:30  35  ,att31 ajp_att31
20:50:30  36  ,att32 ajp_att32
20:50:30  37  ,att33 ajp_att33
20:50:30  38  ,att34 ajp_att34
20:50:30  39  ,att35 ajp_att35
20:50:30  40  ,att36 ajp_att36
20:50:30  41  ,att37 ajp_att37
20:50:30  42  FROM svm6162
20:50:30  43  /

Table created.

Elapsed: 00:00:00.18
20:50:30 SQL> 
20:50:30 SQL> ANALYZE TABLE ajp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.49
20:50:30 SQL> 
20:50:30 SQL> -- rpt
20:50:30 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19806

Elapsed: 00:00:00.79
20:50:31 SQL> SELECT COUNT(*)FROM ajp_att;

  COUNT(*)
----------
     19806

Elapsed: 00:00:00.00
20:50:31 SQL> 
20:50:31 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
