
SQL*Plus: Release 11.2.0.1.0 Production on Wed Dec 29 20:59:06 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

20:59:06 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.01
20:59:06 SQL> 20:59:06 SQL> --
20:59:06 SQL> -- eur610.sql
20:59:06 SQL> --
20:59:06 SQL> 
20:59:06 SQL> -- Creates views and tables for backtesting a forex SVM strategy
20:59:06 SQL> 
20:59:06 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.04
20:59:06 SQL> 
20:59:06 SQL> -- I created di5min here:
20:59:06 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
20:59:06 SQL> 
20:59:06 SQL> CREATE OR REPLACE VIEW svm6102 AS
20:59:06   2  SELECT
20:59:06   3  pair
20:59:06   4  ,ydate
20:59:06   5  ,prdate
20:59:06   6  ,rownum rnum -- acts as t in my time-series
20:59:06   7  ,clse
20:59:06   8  -- Derive a bunch of attributes from clse, the latest price:
20:59:06   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
20:59:06  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
20:59:06  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
20:59:06  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
20:59:06  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
20:59:06  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
20:59:06  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
20:59:06  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
20:59:06  17  --
20:59:06  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
20:59:06  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
20:59:06  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
20:59:06  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
20:59:06  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
20:59:06  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
20:59:06  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
20:59:06  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
20:59:06  26  --
20:59:06  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
20:59:06  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
20:59:06  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
20:59:06  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
20:59:06  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
20:59:06  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
20:59:06  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
20:59:06  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
20:59:06  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
20:59:06  36  FROM di5min WHERE pair LIKE'%eur%'
20:59:06  37  AND ydate > sysdate - 95
20:59:06  38  ORDER BY ydate
20:59:06  39  /

View created.

Elapsed: 00:00:00.16
20:59:06 SQL> 
20:59:06 SQL> -- rpt
20:59:06 SQL> 
20:59:06 SQL> SELECT
20:59:06   2  pair
20:59:06   3  ,COUNT(pair)
20:59:06   4  ,MIN(clse),MAX(clse)
20:59:06   5  ,MIN(avg6),MAX(avg6)
20:59:06   6  ,MIN(ydate),MAX(ydate)
20:59:06   7  FROM svm6102
20:59:06   8  GROUP BY pair
20:59:06   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19559    1.29735	   1.4273 1.29875103 1.42436233 2010-09-26 20:55:01 2010-12-29 20:55:00

Elapsed: 00:00:00.94
20:59:07 SQL> 
20:59:07 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
20:59:07 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.05
20:59:07 SQL> CREATE TABLE svm6122 COMPRESS AS
20:59:07   2  SELECT
20:59:07   3  pair
20:59:07   4  ,ydate
20:59:07   5  ,prdate
20:59:07   6  ,clse
20:59:07   7  -- g6 is important. I want to predict g6:
20:59:07   8  ,ld6 - clse g6
20:59:07   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
20:59:07  10  -- I want more attributes from the ones I derived above:
20:59:07  11  -- clse relation to moving-min
20:59:07  12  ,clse-min4  cm4
20:59:07  13  ,clse-min6  cm6
20:59:07  14  ,clse-min8  cm8
20:59:07  15  ,clse-min10 cm10
20:59:07  16  ,clse-min12 cm12
20:59:07  17  ,clse-min14 cm14
20:59:07  18  ,clse-min16 cm16
20:59:07  19  ,clse-min18 cm18
20:59:07  20  -- clse relation to moving-avg
20:59:07  21  ,clse-avg4  ca4
20:59:07  22  ,clse-avg6  ca6
20:59:07  23  ,clse-avg8  ca8
20:59:07  24  ,clse-avg10 ca10
20:59:07  25  ,clse-avg12 ca12
20:59:07  26  ,clse-avg14 ca14
20:59:07  27  ,clse-avg16 ca16
20:59:07  28  ,clse-avg18 ca18
20:59:07  29  -- clse relation to moving-max
20:59:07  30  ,clse-max4  cx4
20:59:07  31  ,clse-max6  cx6
20:59:07  32  ,clse-max8  cx8
20:59:07  33  ,clse-max10 cx10
20:59:07  34  ,clse-max12 cx12
20:59:07  35  ,clse-max14 cx14
20:59:07  36  ,clse-max16 cx16
20:59:07  37  ,clse-max18 cx18
20:59:07  38  -- Derive more attributes.
20:59:07  39  -- I want to use CORR() here to help SVM see the shape of the series.
20:59:07  40  -- But COVAR_POP is more stable:
20:59:07  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
20:59:07  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
20:59:07  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
20:59:07  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
20:59:07  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
20:59:07  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
20:59:07  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
20:59:07  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
20:59:07  49  -- Derive date related attributes:
20:59:07  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
20:59:07  51  ,0+TO_CHAR(ydate,'D')d
20:59:07  52  ,0+TO_CHAR(ydate,'W')w
20:59:07  53  -- mpm stands for minutes-past-midnight:
20:59:07  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
20:59:07  55  -- mph stands for minutes-past-hour:
20:59:07  56  ,0+TO_CHAR(ydate,'MI')mph
20:59:07  57  FROM svm6102
20:59:07  58  ORDER BY ydate
20:59:07  59  /

Table created.

Elapsed: 00:00:02.54
20:59:10 SQL> 
20:59:10 SQL> -- rpt
20:59:10 SQL> 
20:59:10 SQL> SELECT
20:59:10   2  pair
20:59:10   3  ,COUNT(pair)
20:59:10   4  ,MIN(clse),MAX(clse)
20:59:10   5  ,MIN(ydate),MAX(ydate)
20:59:10   6  FROM svm6122
20:59:10   7  GROUP BY pair
20:59:10   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19559    1.29735	   1.4273 2010-09-26 20:55:01 2010-12-29 20:55:00

Elapsed: 00:00:00.08
20:59:10 SQL> 
20:59:10 SQL> -- Prepare for derivation of NTILE based params:
20:59:10 SQL> 
20:59:10 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:01.04
20:59:11 SQL> CREATE TABLE svm6142 COMPRESS AS
20:59:11   2  SELECT
20:59:11   3  pair
20:59:11   4  ,ydate
20:59:11   5  ,prdate
20:59:11   6  ,clse
20:59:11   7  ,g6
20:59:11   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
20:59:11   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
20:59:11  10  ,CASE WHEN trend IS NULL THEN 1
20:59:11  11  	    WHEN trend =0      THEN 1
20:59:11  12  	    ELSE trend END trend
20:59:11  13  ,cm4
20:59:11  14  ,cm6
20:59:11  15  ,cm8
20:59:11  16  ,cm10
20:59:11  17  ,cm12
20:59:11  18  ,cm14
20:59:11  19  ,cm16
20:59:11  20  ,cm18
20:59:11  21  --
20:59:11  22  ,ca4
20:59:11  23  ,ca6
20:59:11  24  ,ca8
20:59:11  25  ,ca10
20:59:11  26  ,ca12
20:59:11  27  ,ca14
20:59:11  28  ,ca16
20:59:11  29  ,ca18
20:59:11  30  --
20:59:11  31  ,cx4
20:59:11  32  ,cx6
20:59:11  33  ,cx8
20:59:11  34  ,cx10
20:59:11  35  ,cx12
20:59:11  36  ,cx14
20:59:11  37  ,cx16
20:59:11  38  ,cx18
20:59:11  39  --
20:59:11  40  ,crr4
20:59:11  41  ,crr6
20:59:11  42  ,crr8
20:59:11  43  ,crr10
20:59:11  44  ,crr12
20:59:11  45  ,crr14
20:59:11  46  ,crr16
20:59:11  47  ,crr18
20:59:11  48  --
20:59:11  49  ,hh
20:59:11  50  ,d
20:59:11  51  ,w
20:59:11  52  ,mpm
20:59:11  53  ,mph
20:59:11  54  FROM svm6122
20:59:11  55  ORDER BY ydate
20:59:11  56  /

Table created.

Elapsed: 00:00:00.44
20:59:12 SQL> 
20:59:12 SQL> -- rpt
20:59:12 SQL> 
20:59:12 SQL> SELECT
20:59:12   2  pair
20:59:12   3  ,trend
20:59:12   4  ,gatt
20:59:12   5  ,COUNT(pair)
20:59:12   6  ,AVG(g6)
20:59:12   7  FROM svm6142
20:59:12   8  GROUP BY pair,trend,gatt
20:59:12   9  ORDER BY pair,trend,gatt
20:59:12  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6136  -.0030778
eur_usd 	-1 up	      3720 .004487591
eur_usd 	-1		 6
eur_usd 	 1 nup	      5958 -.00314638
eur_usd 	 1 up	      3673 .005147836
eur_usd 	 1		66

6 rows selected.

Elapsed: 00:00:00.06
20:59:12 SQL> 
20:59:12 SQL> 
20:59:12 SQL> -- Derive NTILE based params:
20:59:12 SQL> 
20:59:12 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.77
20:59:12 SQL> CREATE TABLE svm6162 COMPRESS AS
20:59:12   2  SELECT
20:59:12   3  pair
20:59:12   4  ,ydate
20:59:12   5  ,prdate
20:59:12   6  ,clse
20:59:12   7  ,g6
20:59:12   8  ,gatt
20:59:12   9  ,gattn
20:59:12  10  ,trend
20:59:12  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
20:59:12  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
20:59:12  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
20:59:12  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
20:59:12  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
20:59:12  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
20:59:12  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
20:59:12  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
20:59:12  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
20:59:12  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
20:59:12  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
20:59:12  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
20:59:12  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
20:59:12  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
20:59:12  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
20:59:12  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
20:59:12  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
20:59:12  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
20:59:12  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
20:59:12  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
20:59:12  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
20:59:12  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
20:59:12  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
20:59:12  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
20:59:12  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
20:59:12  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
20:59:12  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
20:59:12  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
20:59:12  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
20:59:12  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
20:59:12  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
20:59:12  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
20:59:12  43  ,hh  att32
20:59:12  44  ,d   att33
20:59:12  45  ,w   att34
20:59:12  46  ,mpm att35
20:59:12  47  ,mph att36
20:59:12  48  ,trend att37
20:59:12  49  FROM svm6142
20:59:12  50  ORDER BY ydate
20:59:12  51  /

Table created.

Elapsed: 00:00:06.77
20:59:19 SQL> 
20:59:19 SQL> -- rpt
20:59:19 SQL> 
20:59:19 SQL> SELECT
20:59:19   2  pair
20:59:19   3  ,trend
20:59:19   4  ,gatt
20:59:19   5  ,COUNT(pair)
20:59:19   6  ,AVG(g6)
20:59:19   7  FROM svm6162
20:59:19   8  GROUP BY pair,trend,gatt
20:59:19   9  ORDER BY pair,trend,gatt
20:59:19  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6136  -.0030778
eur_usd 	-1 up	      3720 .004487591
eur_usd 	-1		 6
eur_usd 	 1 nup	      5958 -.00314638
eur_usd 	 1 up	      3673 .005147836
eur_usd 	 1		66

6 rows selected.

Elapsed: 00:00:00.05
20:59:19 SQL> 
20:59:19 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.16
20:59:19 SQL> CREATE TABLE modsrc COMPRESS AS
20:59:19   2  SELECT
20:59:19   3  pair
20:59:19   4  ,ydate
20:59:19   5  ,prdate
20:59:19   6  ,trend
20:59:19   7  ,g6
20:59:19   8  ,gatt
20:59:19   9  ,gattn
20:59:19  10  FROM svm6162
20:59:19  11  /

Table created.

Elapsed: 00:00:00.09
20:59:19 SQL> 
20:59:19 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
20:59:20 SQL> 
20:59:20 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
20:59:20 SQL> CREATE TABLE eur_ms610 COMPRESS AS
20:59:20   2  SELECT
20:59:20   3  ydate
20:59:20   4  ,trend eur_trend
20:59:20   5  ,g6    eur_g6
20:59:20   6  ,gatt  eur_gatt
20:59:20   7  ,gattn eur_gattn
20:59:20   8  FROM modsrc
20:59:20   9  /

Table created.

Elapsed: 00:00:00.11
20:59:20 SQL> 
20:59:20 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
20:59:20 SQL> 
20:59:20 SQL> -- I need a copy of the attributes:
20:59:20 SQL> 
20:59:20 SQL> 
20:59:20 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.05
20:59:20 SQL> CREATE TABLE eur_att COMPRESS AS
20:59:20   2  SELECT
20:59:20   3  ydate
20:59:20   4  ,att00 eur_att00
20:59:20   5  ,att01 eur_att01
20:59:20   6  ,att02 eur_att02
20:59:20   7  ,att03 eur_att03
20:59:20   8  ,att04 eur_att04
20:59:20   9  ,att05 eur_att05
20:59:20  10  ,att06 eur_att06
20:59:20  11  ,att07 eur_att07
20:59:20  12  ,att08 eur_att08
20:59:20  13  ,att09 eur_att09
20:59:20  14  ,att10 eur_att10
20:59:20  15  ,att11 eur_att11
20:59:20  16  ,att12 eur_att12
20:59:20  17  ,att13 eur_att13
20:59:20  18  ,att14 eur_att14
20:59:20  19  ,att15 eur_att15
20:59:20  20  ,att16 eur_att16
20:59:20  21  ,att17 eur_att17
20:59:20  22  ,att18 eur_att18
20:59:20  23  ,att19 eur_att19
20:59:20  24  ,att20 eur_att20
20:59:20  25  ,att21 eur_att21
20:59:20  26  ,att22 eur_att22
20:59:20  27  ,att23 eur_att23
20:59:20  28  ,att24 eur_att24
20:59:20  29  ,att25 eur_att25
20:59:20  30  ,att26 eur_att26
20:59:20  31  ,att27 eur_att27
20:59:20  32  ,att28 eur_att28
20:59:20  33  ,att29 eur_att29
20:59:20  34  ,att30 eur_att30
20:59:20  35  ,att31 eur_att31
20:59:20  36  ,att32 eur_att32
20:59:20  37  ,att33 eur_att33
20:59:20  38  ,att34 eur_att34
20:59:20  39  ,att35 eur_att35
20:59:20  40  ,att36 eur_att36
20:59:20  41  ,att37 eur_att37
20:59:20  42  FROM svm6162
20:59:20  43  /

Table created.

Elapsed: 00:00:00.18
20:59:20 SQL> 
20:59:20 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
20:59:21 SQL> 
20:59:21 SQL> -- rpt
20:59:21 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19559

Elapsed: 00:00:00.92
20:59:22 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19559

Elapsed: 00:00:00.00
20:59:22 SQL> 
20:59:22 SQL> --
20:59:22 SQL> -- aud610.sql
20:59:22 SQL> --
20:59:22 SQL> 
20:59:22 SQL> -- Creates views and tables for backtesting a forex SVM strategy
20:59:22 SQL> 
20:59:22 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.48
20:59:22 SQL> 
20:59:22 SQL> -- I created di5min here:
20:59:22 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
20:59:22 SQL> 
20:59:22 SQL> CREATE OR REPLACE VIEW svm6102 AS
20:59:22   2  SELECT
20:59:22   3  pair
20:59:22   4  ,ydate
20:59:22   5  ,prdate
20:59:22   6  ,rownum rnum -- acts as t in my time-series
20:59:22   7  ,clse
20:59:22   8  -- Derive a bunch of attributes from clse, the latest price:
20:59:22   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
20:59:22  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
20:59:22  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
20:59:22  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
20:59:22  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
20:59:22  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
20:59:22  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
20:59:22  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
20:59:22  17  --
20:59:22  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
20:59:22  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
20:59:22  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
20:59:22  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
20:59:22  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
20:59:22  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
20:59:22  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
20:59:22  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
20:59:22  26  --
20:59:22  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
20:59:22  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
20:59:22  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
20:59:22  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
20:59:22  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
20:59:22  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
20:59:22  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
20:59:22  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
20:59:22  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
20:59:22  36  FROM di5min WHERE pair LIKE'%aud%'
20:59:22  37  AND ydate > sysdate - 95
20:59:22  38  ORDER BY ydate
20:59:22  39  /

View created.

Elapsed: 00:00:00.06
20:59:22 SQL> 
20:59:22 SQL> -- rpt
20:59:22 SQL> 
20:59:22 SQL> SELECT
20:59:22   2  pair
20:59:22   3  ,COUNT(pair)
20:59:22   4  ,MIN(clse),MAX(clse)
20:59:22   5  ,MIN(avg6),MAX(avg6)
20:59:22   6  ,MIN(ydate),MAX(ydate)
20:59:22   7  FROM svm6102
20:59:22   8  GROUP BY pair
20:59:22   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19556	.95405	   1.0183 .957141438 1.01597877 2010-09-26 20:55:01 2010-12-29 20:55:00

Elapsed: 00:00:00.91
20:59:23 SQL> 
20:59:23 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
20:59:23 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.25
20:59:23 SQL> CREATE TABLE svm6122 COMPRESS AS
20:59:23   2  SELECT
20:59:23   3  pair
20:59:23   4  ,ydate
20:59:23   5  ,prdate
20:59:23   6  ,clse
20:59:23   7  -- g6 is important. I want to predict g6:
20:59:23   8  ,ld6 - clse g6
20:59:23   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
20:59:23  10  -- I want more attributes from the ones I derived above:
20:59:23  11  -- clse relation to moving-min
20:59:23  12  ,clse-min4  cm4
20:59:23  13  ,clse-min6  cm6
20:59:23  14  ,clse-min8  cm8
20:59:23  15  ,clse-min10 cm10
20:59:23  16  ,clse-min12 cm12
20:59:23  17  ,clse-min14 cm14
20:59:23  18  ,clse-min16 cm16
20:59:23  19  ,clse-min18 cm18
20:59:23  20  -- clse relation to moving-avg
20:59:23  21  ,clse-avg4  ca4
20:59:23  22  ,clse-avg6  ca6
20:59:23  23  ,clse-avg8  ca8
20:59:23  24  ,clse-avg10 ca10
20:59:23  25  ,clse-avg12 ca12
20:59:23  26  ,clse-avg14 ca14
20:59:23  27  ,clse-avg16 ca16
20:59:23  28  ,clse-avg18 ca18
20:59:23  29  -- clse relation to moving-max
20:59:23  30  ,clse-max4  cx4
20:59:23  31  ,clse-max6  cx6
20:59:23  32  ,clse-max8  cx8
20:59:23  33  ,clse-max10 cx10
20:59:23  34  ,clse-max12 cx12
20:59:23  35  ,clse-max14 cx14
20:59:23  36  ,clse-max16 cx16
20:59:23  37  ,clse-max18 cx18
20:59:23  38  -- Derive more attributes.
20:59:23  39  -- I want to use CORR() here to help SVM see the shape of the series.
20:59:23  40  -- But COVAR_POP is more stable:
20:59:23  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
20:59:23  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
20:59:23  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
20:59:23  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
20:59:23  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
20:59:23  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
20:59:23  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
20:59:23  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
20:59:23  49  -- Derive date related attributes:
20:59:23  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
20:59:23  51  ,0+TO_CHAR(ydate,'D')d
20:59:23  52  ,0+TO_CHAR(ydate,'W')w
20:59:23  53  -- mpm stands for minutes-past-midnight:
20:59:23  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
20:59:23  55  -- mph stands for minutes-past-hour:
20:59:23  56  ,0+TO_CHAR(ydate,'MI')mph
20:59:23  57  FROM svm6102
20:59:23  58  ORDER BY ydate
20:59:23  59  /

Table created.

Elapsed: 00:00:02.16
20:59:25 SQL> 
20:59:25 SQL> -- rpt
20:59:25 SQL> 
20:59:25 SQL> SELECT
20:59:25   2  pair
20:59:25   3  ,COUNT(pair)
20:59:25   4  ,MIN(clse),MAX(clse)
20:59:25   5  ,MIN(ydate),MAX(ydate)
20:59:25   6  FROM svm6122
20:59:25   7  GROUP BY pair
20:59:25   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19556	.95405	   1.0183 2010-09-26 20:55:01 2010-12-29 20:55:00

Elapsed: 00:00:00.05
20:59:25 SQL> 
20:59:25 SQL> -- Prepare for derivation of NTILE based params:
20:59:25 SQL> 
20:59:25 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.18
20:59:26 SQL> CREATE TABLE svm6142 COMPRESS AS
20:59:26   2  SELECT
20:59:26   3  pair
20:59:26   4  ,ydate
20:59:26   5  ,prdate
20:59:26   6  ,clse
20:59:26   7  ,g6
20:59:26   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
20:59:26   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
20:59:26  10  ,CASE WHEN trend IS NULL THEN 1
20:59:26  11  	    WHEN trend =0      THEN 1
20:59:26  12  	    ELSE trend END trend
20:59:26  13  ,cm4
20:59:26  14  ,cm6
20:59:26  15  ,cm8
20:59:26  16  ,cm10
20:59:26  17  ,cm12
20:59:26  18  ,cm14
20:59:26  19  ,cm16
20:59:26  20  ,cm18
20:59:26  21  --
20:59:26  22  ,ca4
20:59:26  23  ,ca6
20:59:26  24  ,ca8
20:59:26  25  ,ca10
20:59:26  26  ,ca12
20:59:26  27  ,ca14
20:59:26  28  ,ca16
20:59:26  29  ,ca18
20:59:26  30  --
20:59:26  31  ,cx4
20:59:26  32  ,cx6
20:59:26  33  ,cx8
20:59:26  34  ,cx10
20:59:26  35  ,cx12
20:59:26  36  ,cx14
20:59:26  37  ,cx16
20:59:26  38  ,cx18
20:59:26  39  --
20:59:26  40  ,crr4
20:59:26  41  ,crr6
20:59:26  42  ,crr8
20:59:26  43  ,crr10
20:59:26  44  ,crr12
20:59:26  45  ,crr14
20:59:26  46  ,crr16
20:59:26  47  ,crr18
20:59:26  48  --
20:59:26  49  ,hh
20:59:26  50  ,d
20:59:26  51  ,w
20:59:26  52  ,mpm
20:59:26  53  ,mph
20:59:26  54  FROM svm6122
20:59:26  55  ORDER BY ydate
20:59:26  56  /

Table created.

Elapsed: 00:00:00.41
20:59:26 SQL> 
20:59:26 SQL> -- rpt
20:59:26 SQL> 
20:59:26 SQL> SELECT
20:59:26   2  pair
20:59:26   3  ,trend
20:59:26   4  ,gatt
20:59:26   5  ,COUNT(pair)
20:59:26   6  ,AVG(g6)
20:59:26   7  FROM svm6142
20:59:26   8  GROUP BY pair,trend,gatt
20:59:26   9  ORDER BY pair,trend,gatt
20:59:26  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5198 -.00212209
aud_usd 	-1 up	      3809 .003727245
aud_usd 	-1		 9
aud_usd 	 1 nup	      6736 -.00211534
aud_usd 	 1 up	      3741 .004046004
aud_usd 	 1		63

6 rows selected.

Elapsed: 00:00:00.05
20:59:26 SQL> 
20:59:26 SQL> 
20:59:26 SQL> -- Derive NTILE based params:
20:59:26 SQL> 
20:59:26 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.14
20:59:26 SQL> CREATE TABLE svm6162 COMPRESS AS
20:59:26   2  SELECT
20:59:26   3  pair
20:59:26   4  ,ydate
20:59:26   5  ,prdate
20:59:26   6  ,clse
20:59:26   7  ,g6
20:59:26   8  ,gatt
20:59:26   9  ,gattn
20:59:26  10  ,trend
20:59:26  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
20:59:26  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
20:59:26  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
20:59:26  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
20:59:26  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
20:59:26  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
20:59:26  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
20:59:26  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
20:59:26  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
20:59:26  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
20:59:26  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
20:59:26  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
20:59:26  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
20:59:26  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
20:59:26  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
20:59:26  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
20:59:26  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
20:59:26  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
20:59:26  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
20:59:26  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
20:59:26  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
20:59:26  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
20:59:26  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
20:59:26  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
20:59:26  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
20:59:26  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
20:59:26  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
20:59:26  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
20:59:26  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
20:59:26  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
20:59:26  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
20:59:26  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
20:59:26  43  ,hh  att32
20:59:26  44  ,d   att33
20:59:26  45  ,w   att34
20:59:26  46  ,mpm att35
20:59:26  47  ,mph att36
20:59:26  48  ,trend att37
20:59:26  49  FROM svm6142
20:59:26  50  ORDER BY ydate
20:59:26  51  /

Table created.

Elapsed: 00:00:05.31
20:59:32 SQL> 
20:59:32 SQL> -- rpt
20:59:32 SQL> 
20:59:32 SQL> SELECT
20:59:32   2  pair
20:59:32   3  ,trend
20:59:32   4  ,gatt
20:59:32   5  ,COUNT(pair)
20:59:32   6  ,AVG(g6)
20:59:32   7  FROM svm6162
20:59:32   8  GROUP BY pair,trend,gatt
20:59:32   9  ORDER BY pair,trend,gatt
20:59:32  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5198 -.00212209
aud_usd 	-1 up	      3809 .003727245
aud_usd 	-1		 9
aud_usd 	 1 nup	      6736 -.00211534
aud_usd 	 1 up	      3741 .004046004
aud_usd 	 1		63

6 rows selected.

Elapsed: 00:00:00.03
20:59:32 SQL> 
20:59:32 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.16
20:59:32 SQL> CREATE TABLE modsrc COMPRESS AS
20:59:32   2  SELECT
20:59:32   3  pair
20:59:32   4  ,ydate
20:59:32   5  ,prdate
20:59:32   6  ,trend
20:59:32   7  ,g6
20:59:32   8  ,gatt
20:59:32   9  ,gattn
20:59:32  10  FROM svm6162
20:59:32  11  /

Table created.

Elapsed: 00:00:00.09
20:59:32 SQL> 
20:59:32 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
20:59:32 SQL> 
20:59:32 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.08
20:59:32 SQL> CREATE TABLE aud_ms610 COMPRESS AS
20:59:32   2  SELECT
20:59:32   3  ydate
20:59:32   4  ,trend aud_trend
20:59:32   5  ,g6    aud_g6
20:59:32   6  ,gatt  aud_gatt
20:59:32   7  ,gattn aud_gattn
20:59:32   8  FROM modsrc
20:59:32   9  /

Table created.

Elapsed: 00:00:00.08
20:59:32 SQL> 
20:59:32 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
20:59:32 SQL> 
20:59:32 SQL> -- I need a copy of the attributes:
20:59:32 SQL> 
20:59:32 SQL> 
20:59:32 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.05
20:59:32 SQL> CREATE TABLE aud_att COMPRESS AS
20:59:32   2  SELECT
20:59:32   3  ydate
20:59:32   4  ,att00 aud_att00
20:59:32   5  ,att01 aud_att01
20:59:32   6  ,att02 aud_att02
20:59:32   7  ,att03 aud_att03
20:59:32   8  ,att04 aud_att04
20:59:32   9  ,att05 aud_att05
20:59:32  10  ,att06 aud_att06
20:59:32  11  ,att07 aud_att07
20:59:32  12  ,att08 aud_att08
20:59:32  13  ,att09 aud_att09
20:59:32  14  ,att10 aud_att10
20:59:32  15  ,att11 aud_att11
20:59:32  16  ,att12 aud_att12
20:59:32  17  ,att13 aud_att13
20:59:32  18  ,att14 aud_att14
20:59:32  19  ,att15 aud_att15
20:59:32  20  ,att16 aud_att16
20:59:32  21  ,att17 aud_att17
20:59:32  22  ,att18 aud_att18
20:59:32  23  ,att19 aud_att19
20:59:32  24  ,att20 aud_att20
20:59:32  25  ,att21 aud_att21
20:59:32  26  ,att22 aud_att22
20:59:32  27  ,att23 aud_att23
20:59:32  28  ,att24 aud_att24
20:59:32  29  ,att25 aud_att25
20:59:32  30  ,att26 aud_att26
20:59:32  31  ,att27 aud_att27
20:59:32  32  ,att28 aud_att28
20:59:32  33  ,att29 aud_att29
20:59:32  34  ,att30 aud_att30
20:59:32  35  ,att31 aud_att31
20:59:32  36  ,att32 aud_att32
20:59:32  37  ,att33 aud_att33
20:59:32  38  ,att34 aud_att34
20:59:32  39  ,att35 aud_att35
20:59:32  40  ,att36 aud_att36
20:59:32  41  ,att37 aud_att37
20:59:32  42  FROM svm6162
20:59:32  43  /

Table created.

Elapsed: 00:00:00.18
20:59:33 SQL> 
20:59:33 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
20:59:33 SQL> 
20:59:33 SQL> -- rpt
20:59:33 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19556

Elapsed: 00:00:00.90
20:59:34 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19556

Elapsed: 00:00:00.00
20:59:34 SQL> 
20:59:34 SQL> --
20:59:34 SQL> -- gbp610.sql
20:59:34 SQL> --
20:59:34 SQL> 
20:59:34 SQL> -- Creates views and tables for backtesting a forex SVM strategy
20:59:34 SQL> 
20:59:34 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.54
20:59:35 SQL> 
20:59:35 SQL> -- I created di5min here:
20:59:35 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
20:59:35 SQL> 
20:59:35 SQL> CREATE OR REPLACE VIEW svm6102 AS
20:59:35   2  SELECT
20:59:35   3  pair
20:59:35   4  ,ydate
20:59:35   5  ,prdate
20:59:35   6  ,rownum rnum -- acts as t in my time-series
20:59:35   7  ,clse
20:59:35   8  -- Derive a bunch of attributes from clse, the latest price:
20:59:35   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
20:59:35  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
20:59:35  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
20:59:35  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
20:59:35  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
20:59:35  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
20:59:35  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
20:59:35  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
20:59:35  17  --
20:59:35  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
20:59:35  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
20:59:35  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
20:59:35  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
20:59:35  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
20:59:35  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
20:59:35  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
20:59:35  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
20:59:35  26  --
20:59:35  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
20:59:35  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
20:59:35  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
20:59:35  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
20:59:35  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
20:59:35  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
20:59:35  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
20:59:35  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
20:59:35  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
20:59:35  36  FROM di5min WHERE pair LIKE'%gbp%'
20:59:35  37  AND ydate > sysdate - 95
20:59:35  38  ORDER BY ydate
20:59:35  39  /

View created.

Elapsed: 00:00:00.04
20:59:35 SQL> 
20:59:35 SQL> -- rpt
20:59:35 SQL> 
20:59:35 SQL> SELECT
20:59:35   2  pair
20:59:35   3  ,COUNT(pair)
20:59:35   4  ,MIN(clse),MAX(clse)
20:59:35   5  ,MIN(avg6),MAX(avg6)
20:59:35   6  ,MIN(ydate),MAX(ydate)
20:59:35   7  FROM svm6102
20:59:35   8  GROUP BY pair
20:59:35   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19558   1.535325	   1.6295 1.53696747 1.62716986 2010-09-26 20:55:01 2010-12-29 20:55:00

Elapsed: 00:00:00.92
20:59:36 SQL> 
20:59:36 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
20:59:36 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.17
20:59:36 SQL> CREATE TABLE svm6122 COMPRESS AS
20:59:36   2  SELECT
20:59:36   3  pair
20:59:36   4  ,ydate
20:59:36   5  ,prdate
20:59:36   6  ,clse
20:59:36   7  -- g6 is important. I want to predict g6:
20:59:36   8  ,ld6 - clse g6
20:59:36   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
20:59:36  10  -- I want more attributes from the ones I derived above:
20:59:36  11  -- clse relation to moving-min
20:59:36  12  ,clse-min4  cm4
20:59:36  13  ,clse-min6  cm6
20:59:36  14  ,clse-min8  cm8
20:59:36  15  ,clse-min10 cm10
20:59:36  16  ,clse-min12 cm12
20:59:36  17  ,clse-min14 cm14
20:59:36  18  ,clse-min16 cm16
20:59:36  19  ,clse-min18 cm18
20:59:36  20  -- clse relation to moving-avg
20:59:36  21  ,clse-avg4  ca4
20:59:36  22  ,clse-avg6  ca6
20:59:36  23  ,clse-avg8  ca8
20:59:36  24  ,clse-avg10 ca10
20:59:36  25  ,clse-avg12 ca12
20:59:36  26  ,clse-avg14 ca14
20:59:36  27  ,clse-avg16 ca16
20:59:36  28  ,clse-avg18 ca18
20:59:36  29  -- clse relation to moving-max
20:59:36  30  ,clse-max4  cx4
20:59:36  31  ,clse-max6  cx6
20:59:36  32  ,clse-max8  cx8
20:59:36  33  ,clse-max10 cx10
20:59:36  34  ,clse-max12 cx12
20:59:36  35  ,clse-max14 cx14
20:59:36  36  ,clse-max16 cx16
20:59:36  37  ,clse-max18 cx18
20:59:36  38  -- Derive more attributes.
20:59:36  39  -- I want to use CORR() here to help SVM see the shape of the series.
20:59:36  40  -- But COVAR_POP is more stable:
20:59:36  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
20:59:36  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
20:59:36  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
20:59:36  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
20:59:36  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
20:59:36  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
20:59:36  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
20:59:36  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
20:59:36  49  -- Derive date related attributes:
20:59:36  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
20:59:36  51  ,0+TO_CHAR(ydate,'D')d
20:59:36  52  ,0+TO_CHAR(ydate,'W')w
20:59:36  53  -- mpm stands for minutes-past-midnight:
20:59:36  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
20:59:36  55  -- mph stands for minutes-past-hour:
20:59:36  56  ,0+TO_CHAR(ydate,'MI')mph
20:59:36  57  FROM svm6102
20:59:36  58  ORDER BY ydate
20:59:36  59  /

Table created.

Elapsed: 00:00:02.15
20:59:38 SQL> 
20:59:38 SQL> -- rpt
20:59:38 SQL> 
20:59:38 SQL> SELECT
20:59:38   2  pair
20:59:38   3  ,COUNT(pair)
20:59:38   4  ,MIN(clse),MAX(clse)
20:59:38   5  ,MIN(ydate),MAX(ydate)
20:59:38   6  FROM svm6122
20:59:38   7  GROUP BY pair
20:59:38   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19558   1.535325	   1.6295 2010-09-26 20:55:01 2010-12-29 20:55:00

Elapsed: 00:00:00.05
20:59:38 SQL> 
20:59:38 SQL> -- Prepare for derivation of NTILE based params:
20:59:38 SQL> 
20:59:38 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.18
20:59:38 SQL> CREATE TABLE svm6142 COMPRESS AS
20:59:38   2  SELECT
20:59:38   3  pair
20:59:38   4  ,ydate
20:59:38   5  ,prdate
20:59:38   6  ,clse
20:59:38   7  ,g6
20:59:38   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
20:59:38   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
20:59:38  10  ,CASE WHEN trend IS NULL THEN 1
20:59:38  11  	    WHEN trend =0      THEN 1
20:59:38  12  	    ELSE trend END trend
20:59:38  13  ,cm4
20:59:38  14  ,cm6
20:59:38  15  ,cm8
20:59:38  16  ,cm10
20:59:38  17  ,cm12
20:59:38  18  ,cm14
20:59:38  19  ,cm16
20:59:38  20  ,cm18
20:59:38  21  --
20:59:38  22  ,ca4
20:59:38  23  ,ca6
20:59:38  24  ,ca8
20:59:38  25  ,ca10
20:59:38  26  ,ca12
20:59:38  27  ,ca14
20:59:38  28  ,ca16
20:59:38  29  ,ca18
20:59:38  30  --
20:59:38  31  ,cx4
20:59:38  32  ,cx6
20:59:38  33  ,cx8
20:59:38  34  ,cx10
20:59:38  35  ,cx12
20:59:38  36  ,cx14
20:59:38  37  ,cx16
20:59:38  38  ,cx18
20:59:38  39  --
20:59:38  40  ,crr4
20:59:38  41  ,crr6
20:59:38  42  ,crr8
20:59:38  43  ,crr10
20:59:38  44  ,crr12
20:59:38  45  ,crr14
20:59:38  46  ,crr16
20:59:38  47  ,crr18
20:59:38  48  --
20:59:38  49  ,hh
20:59:38  50  ,d
20:59:38  51  ,w
20:59:38  52  ,mpm
20:59:38  53  ,mph
20:59:38  54  FROM svm6122
20:59:38  55  ORDER BY ydate
20:59:38  56  /

Table created.

Elapsed: 00:00:00.40
20:59:38 SQL> 
20:59:38 SQL> -- rpt
20:59:38 SQL> 
20:59:38 SQL> SELECT
20:59:38   2  pair
20:59:38   3  ,trend
20:59:38   4  ,gatt
20:59:38   5  ,COUNT(pair)
20:59:38   6  ,AVG(g6)
20:59:38   7  FROM svm6142
20:59:38   8  GROUP BY pair,trend,gatt
20:59:38   9  ORDER BY pair,trend,gatt
20:59:38  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6295 -.00256031
gbp_usd 	-1 up	      3579 .004286117
gbp_usd 	 1 nup	      6206 -.00268133
gbp_usd 	 1 up	      3406 .004381639
gbp_usd 	 1		72

Elapsed: 00:00:00.09
20:59:39 SQL> 
20:59:39 SQL> 
20:59:39 SQL> -- Derive NTILE based params:
20:59:39 SQL> 
20:59:39 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.26
20:59:39 SQL> CREATE TABLE svm6162 COMPRESS AS
20:59:39   2  SELECT
20:59:39   3  pair
20:59:39   4  ,ydate
20:59:39   5  ,prdate
20:59:39   6  ,clse
20:59:39   7  ,g6
20:59:39   8  ,gatt
20:59:39   9  ,gattn
20:59:39  10  ,trend
20:59:39  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
20:59:39  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
20:59:39  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
20:59:39  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
20:59:39  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
20:59:39  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
20:59:39  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
20:59:39  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
20:59:39  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
20:59:39  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
20:59:39  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
20:59:39  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
20:59:39  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
20:59:39  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
20:59:39  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
20:59:39  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
20:59:39  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
20:59:39  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
20:59:39  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
20:59:39  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
20:59:39  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
20:59:39  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
20:59:39  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
20:59:39  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
20:59:39  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
20:59:39  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
20:59:39  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
20:59:39  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
20:59:39  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
20:59:39  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
20:59:39  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
20:59:39  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
20:59:39  43  ,hh  att32
20:59:39  44  ,d   att33
20:59:39  45  ,w   att34
20:59:39  46  ,mpm att35
20:59:39  47  ,mph att36
20:59:39  48  ,trend att37
20:59:39  49  FROM svm6142
20:59:39  50  ORDER BY ydate
20:59:39  51  /

Table created.

Elapsed: 00:00:05.85
20:59:45 SQL> 
20:59:45 SQL> -- rpt
20:59:45 SQL> 
20:59:45 SQL> SELECT
20:59:45   2  pair
20:59:45   3  ,trend
20:59:45   4  ,gatt
20:59:45   5  ,COUNT(pair)
20:59:45   6  ,AVG(g6)
20:59:45   7  FROM svm6162
20:59:45   8  GROUP BY pair,trend,gatt
20:59:45   9  ORDER BY pair,trend,gatt
20:59:45  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6295 -.00256031
gbp_usd 	-1 up	      3579 .004286117
gbp_usd 	 1 nup	      6206 -.00268133
gbp_usd 	 1 up	      3406 .004381639
gbp_usd 	 1		72

Elapsed: 00:00:00.03
20:59:45 SQL> 
20:59:45 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
20:59:45 SQL> CREATE TABLE modsrc COMPRESS AS
20:59:45   2  SELECT
20:59:45   3  pair
20:59:45   4  ,ydate
20:59:45   5  ,prdate
20:59:45   6  ,trend
20:59:45   7  ,g6
20:59:45   8  ,gatt
20:59:45   9  ,gattn
20:59:45  10  FROM svm6162
20:59:45  11  /

Table created.

Elapsed: 00:00:00.08
20:59:45 SQL> 
20:59:45 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
20:59:45 SQL> 
20:59:45 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
20:59:45 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
20:59:45   2  SELECT
20:59:45   3  ydate
20:59:45   4  ,trend gbp_trend
20:59:45   5  ,g6    gbp_g6
20:59:45   6  ,gatt  gbp_gatt
20:59:45   7  ,gattn gbp_gattn
20:59:45   8  FROM modsrc
20:59:45   9  /

Table created.

Elapsed: 00:00:00.08
20:59:45 SQL> 
20:59:45 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
20:59:45 SQL> 
20:59:45 SQL> -- I need a copy of the attributes:
20:59:45 SQL> 
20:59:45 SQL> 
20:59:45 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.05
20:59:45 SQL> CREATE TABLE gbp_att COMPRESS AS
20:59:45   2  SELECT
20:59:45   3  ydate
20:59:45   4  ,att00 gbp_att00
20:59:45   5  ,att01 gbp_att01
20:59:45   6  ,att02 gbp_att02
20:59:45   7  ,att03 gbp_att03
20:59:45   8  ,att04 gbp_att04
20:59:45   9  ,att05 gbp_att05
20:59:45  10  ,att06 gbp_att06
20:59:45  11  ,att07 gbp_att07
20:59:45  12  ,att08 gbp_att08
20:59:45  13  ,att09 gbp_att09
20:59:45  14  ,att10 gbp_att10
20:59:45  15  ,att11 gbp_att11
20:59:45  16  ,att12 gbp_att12
20:59:45  17  ,att13 gbp_att13
20:59:45  18  ,att14 gbp_att14
20:59:45  19  ,att15 gbp_att15
20:59:45  20  ,att16 gbp_att16
20:59:45  21  ,att17 gbp_att17
20:59:45  22  ,att18 gbp_att18
20:59:45  23  ,att19 gbp_att19
20:59:45  24  ,att20 gbp_att20
20:59:45  25  ,att21 gbp_att21
20:59:45  26  ,att22 gbp_att22
20:59:45  27  ,att23 gbp_att23
20:59:45  28  ,att24 gbp_att24
20:59:45  29  ,att25 gbp_att25
20:59:45  30  ,att26 gbp_att26
20:59:45  31  ,att27 gbp_att27
20:59:45  32  ,att28 gbp_att28
20:59:45  33  ,att29 gbp_att29
20:59:45  34  ,att30 gbp_att30
20:59:45  35  ,att31 gbp_att31
20:59:45  36  ,att32 gbp_att32
20:59:45  37  ,att33 gbp_att33
20:59:45  38  ,att34 gbp_att34
20:59:45  39  ,att35 gbp_att35
20:59:45  40  ,att36 gbp_att36
20:59:45  41  ,att37 gbp_att37
20:59:45  42  FROM svm6162
20:59:45  43  /

Table created.

Elapsed: 00:00:00.18
20:59:46 SQL> 
20:59:46 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
20:59:46 SQL> 
20:59:46 SQL> -- rpt
20:59:46 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19558

Elapsed: 00:00:00.89
20:59:47 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19558

Elapsed: 00:00:00.00
20:59:47 SQL> 
20:59:47 SQL> --
20:59:47 SQL> -- jpy610.sql
20:59:47 SQL> --
20:59:47 SQL> 
20:59:47 SQL> -- Creates views and tables for backtesting a forex SVM strategy
20:59:47 SQL> 
20:59:47 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
20:59:47 SQL> 
20:59:47 SQL> -- I created di5min here:
20:59:47 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
20:59:47 SQL> 
20:59:47 SQL> CREATE OR REPLACE VIEW svm6102 AS
20:59:47   2  SELECT
20:59:47   3  pair
20:59:47   4  ,ydate
20:59:47   5  ,prdate
20:59:47   6  ,rownum rnum -- acts as t in my time-series
20:59:47   7  ,clse
20:59:47   8  -- Derive a bunch of attributes from clse, the latest price:
20:59:47   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
20:59:47  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
20:59:47  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
20:59:47  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
20:59:47  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
20:59:47  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
20:59:47  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
20:59:47  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
20:59:47  17  --
20:59:47  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
20:59:47  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
20:59:47  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
20:59:47  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
20:59:47  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
20:59:47  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
20:59:47  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
20:59:47  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
20:59:47  26  --
20:59:47  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
20:59:47  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
20:59:47  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
20:59:47  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
20:59:47  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
20:59:47  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
20:59:47  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
20:59:47  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
20:59:47  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
20:59:47  36  FROM di5min WHERE pair LIKE'%jpy%'
20:59:47  37  AND ydate > sysdate - 95
20:59:47  38  ORDER BY ydate
20:59:47  39  /

View created.

Elapsed: 00:00:00.05
20:59:47 SQL> 
20:59:47 SQL> -- rpt
20:59:47 SQL> 
20:59:47 SQL> SELECT
20:59:47   2  pair
20:59:47   3  ,COUNT(pair)
20:59:47   4  ,MIN(clse),MAX(clse)
20:59:47   5  ,MIN(avg6),MAX(avg6)
20:59:47   6  ,MIN(ydate),MAX(ydate)
20:59:47   7  FROM svm6102
20:59:47   8  GROUP BY pair
20:59:47   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19555	 80.25	   84.485 80.3595205 84.3105479 2010-09-26 20:55:01 2010-12-29 20:55:00

Elapsed: 00:00:00.90
20:59:48 SQL> 
20:59:48 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
20:59:48 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.21
20:59:49 SQL> CREATE TABLE svm6122 COMPRESS AS
20:59:49   2  SELECT
20:59:49   3  pair
20:59:49   4  ,ydate
20:59:49   5  ,prdate
20:59:49   6  ,clse
20:59:49   7  -- g6 is important. I want to predict g6:
20:59:49   8  ,ld6 - clse g6
20:59:49   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
20:59:49  10  -- I want more attributes from the ones I derived above:
20:59:49  11  -- clse relation to moving-min
20:59:49  12  ,clse-min4  cm4
20:59:49  13  ,clse-min6  cm6
20:59:49  14  ,clse-min8  cm8
20:59:49  15  ,clse-min10 cm10
20:59:49  16  ,clse-min12 cm12
20:59:49  17  ,clse-min14 cm14
20:59:49  18  ,clse-min16 cm16
20:59:49  19  ,clse-min18 cm18
20:59:49  20  -- clse relation to moving-avg
20:59:49  21  ,clse-avg4  ca4
20:59:49  22  ,clse-avg6  ca6
20:59:49  23  ,clse-avg8  ca8
20:59:49  24  ,clse-avg10 ca10
20:59:49  25  ,clse-avg12 ca12
20:59:49  26  ,clse-avg14 ca14
20:59:49  27  ,clse-avg16 ca16
20:59:49  28  ,clse-avg18 ca18
20:59:49  29  -- clse relation to moving-max
20:59:49  30  ,clse-max4  cx4
20:59:49  31  ,clse-max6  cx6
20:59:49  32  ,clse-max8  cx8
20:59:49  33  ,clse-max10 cx10
20:59:49  34  ,clse-max12 cx12
20:59:49  35  ,clse-max14 cx14
20:59:49  36  ,clse-max16 cx16
20:59:49  37  ,clse-max18 cx18
20:59:49  38  -- Derive more attributes.
20:59:49  39  -- I want to use CORR() here to help SVM see the shape of the series.
20:59:49  40  -- But COVAR_POP is more stable:
20:59:49  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
20:59:49  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
20:59:49  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
20:59:49  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
20:59:49  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
20:59:49  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
20:59:49  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
20:59:49  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
20:59:49  49  -- Derive date related attributes:
20:59:49  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
20:59:49  51  ,0+TO_CHAR(ydate,'D')d
20:59:49  52  ,0+TO_CHAR(ydate,'W')w
20:59:49  53  -- mpm stands for minutes-past-midnight:
20:59:49  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
20:59:49  55  -- mph stands for minutes-past-hour:
20:59:49  56  ,0+TO_CHAR(ydate,'MI')mph
20:59:49  57  FROM svm6102
20:59:49  58  ORDER BY ydate
20:59:49  59  /

Table created.

Elapsed: 00:00:02.17
20:59:51 SQL> 
20:59:51 SQL> -- rpt
20:59:51 SQL> 
20:59:51 SQL> SELECT
20:59:51   2  pair
20:59:51   3  ,COUNT(pair)
20:59:51   4  ,MIN(clse),MAX(clse)
20:59:51   5  ,MIN(ydate),MAX(ydate)
20:59:51   6  FROM svm6122
20:59:51   7  GROUP BY pair
20:59:51   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19555	 80.25	   84.485 2010-09-26 20:55:01 2010-12-29 20:55:00

Elapsed: 00:00:00.07
20:59:51 SQL> 
20:59:51 SQL> -- Prepare for derivation of NTILE based params:
20:59:51 SQL> 
20:59:51 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.74
20:59:52 SQL> CREATE TABLE svm6142 COMPRESS AS
20:59:52   2  SELECT
20:59:52   3  pair
20:59:52   4  ,ydate
20:59:52   5  ,prdate
20:59:52   6  ,clse
20:59:52   7  ,g6
20:59:52   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
20:59:52   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
20:59:52  10  ,CASE WHEN trend IS NULL THEN 1
20:59:52  11  	    WHEN trend =0      THEN 1
20:59:52  12  	    ELSE trend END trend
20:59:52  13  ,cm4
20:59:52  14  ,cm6
20:59:52  15  ,cm8
20:59:52  16  ,cm10
20:59:52  17  ,cm12
20:59:52  18  ,cm14
20:59:52  19  ,cm16
20:59:52  20  ,cm18
20:59:52  21  --
20:59:52  22  ,ca4
20:59:52  23  ,ca6
20:59:52  24  ,ca8
20:59:52  25  ,ca10
20:59:52  26  ,ca12
20:59:52  27  ,ca14
20:59:52  28  ,ca16
20:59:52  29  ,ca18
20:59:52  30  --
20:59:52  31  ,cx4
20:59:52  32  ,cx6
20:59:52  33  ,cx8
20:59:52  34  ,cx10
20:59:52  35  ,cx12
20:59:52  36  ,cx14
20:59:52  37  ,cx16
20:59:52  38  ,cx18
20:59:52  39  --
20:59:52  40  ,crr4
20:59:52  41  ,crr6
20:59:52  42  ,crr8
20:59:52  43  ,crr10
20:59:52  44  ,crr12
20:59:52  45  ,crr14
20:59:52  46  ,crr16
20:59:52  47  ,crr18
20:59:52  48  --
20:59:52  49  ,hh
20:59:52  50  ,d
20:59:52  51  ,w
20:59:52  52  ,mpm
20:59:52  53  ,mph
20:59:52  54  FROM svm6122
20:59:52  55  ORDER BY ydate
20:59:52  56  /

Table created.

Elapsed: 00:00:00.48
20:59:52 SQL> 
20:59:52 SQL> -- rpt
20:59:52 SQL> 
20:59:52 SQL> SELECT
20:59:52   2  pair
20:59:52   3  ,trend
20:59:52   4  ,gatt
20:59:52   5  ,COUNT(pair)
20:59:52   6  ,AVG(g6)
20:59:52   7  FROM svm6142
20:59:52   8  GROUP BY pair,trend,gatt
20:59:52   9  ORDER BY pair,trend,gatt
20:59:52  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5255 -.16397107
usd_jpy 	-1 up	      4960 .163122068
usd_jpy 	-1		72
usd_jpy 	 1 nup	      5175 -.15491648
usd_jpy 	 1 up	      4093 .165084061

Elapsed: 00:00:00.05
20:59:52 SQL> 
20:59:52 SQL> 
20:59:52 SQL> -- Derive NTILE based params:
20:59:52 SQL> 
20:59:52 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.14
20:59:52 SQL> CREATE TABLE svm6162 COMPRESS AS
20:59:52   2  SELECT
20:59:52   3  pair
20:59:52   4  ,ydate
20:59:52   5  ,prdate
20:59:52   6  ,clse
20:59:52   7  ,g6
20:59:52   8  ,gatt
20:59:52   9  ,gattn
20:59:52  10  ,trend
20:59:52  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
20:59:52  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
20:59:52  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
20:59:52  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
20:59:52  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
20:59:52  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
20:59:52  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
20:59:52  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
20:59:52  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
20:59:52  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
20:59:52  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
20:59:52  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
20:59:52  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
20:59:52  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
20:59:52  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
20:59:52  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
20:59:52  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
20:59:52  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
20:59:52  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
20:59:52  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
20:59:52  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
20:59:52  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
20:59:52  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
20:59:52  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
20:59:52  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
20:59:52  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
20:59:52  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
20:59:52  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
20:59:52  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
20:59:52  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
20:59:52  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
20:59:52  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
20:59:52  43  ,hh  att32
20:59:52  44  ,d   att33
20:59:52  45  ,w   att34
20:59:52  46  ,mpm att35
20:59:52  47  ,mph att36
20:59:52  48  ,trend att37
20:59:52  49  FROM svm6142
20:59:52  50  ORDER BY ydate
20:59:52  51  /

Table created.

Elapsed: 00:00:05.34
20:59:58 SQL> 
20:59:58 SQL> -- rpt
20:59:58 SQL> 
20:59:58 SQL> SELECT
20:59:58   2  pair
20:59:58   3  ,trend
20:59:58   4  ,gatt
20:59:58   5  ,COUNT(pair)
20:59:58   6  ,AVG(g6)
20:59:58   7  FROM svm6162
20:59:58   8  GROUP BY pair,trend,gatt
20:59:58   9  ORDER BY pair,trend,gatt
20:59:58  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5255 -.16397107
usd_jpy 	-1 up	      4960 .163122068
usd_jpy 	-1		72
usd_jpy 	 1 nup	      5175 -.15491648
usd_jpy 	 1 up	      4093 .165084061

Elapsed: 00:00:00.02
20:59:58 SQL> 
20:59:58 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
20:59:58 SQL> CREATE TABLE modsrc COMPRESS AS
20:59:58   2  SELECT
20:59:58   3  pair
20:59:58   4  ,ydate
20:59:58   5  ,prdate
20:59:58   6  ,trend
20:59:58   7  ,g6
20:59:58   8  ,gatt
20:59:58   9  ,gattn
20:59:58  10  FROM svm6162
20:59:58  11  /

Table created.

Elapsed: 00:00:00.09
20:59:58 SQL> 
20:59:58 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
20:59:58 SQL> 
20:59:58 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.03
20:59:58 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
20:59:58   2  SELECT
20:59:58   3  ydate
20:59:58   4  ,trend jpy_trend
20:59:58   5  ,g6    jpy_g6
20:59:58   6  ,gatt  jpy_gatt
20:59:58   7  ,gattn jpy_gattn
20:59:58   8  FROM modsrc
20:59:58   9  /

Table created.

Elapsed: 00:00:00.08
20:59:58 SQL> 
20:59:58 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
20:59:58 SQL> 
20:59:58 SQL> -- I need a copy of the attributes:
20:59:58 SQL> 
20:59:58 SQL> 
20:59:58 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.07
20:59:58 SQL> CREATE TABLE jpy_att COMPRESS AS
20:59:58   2  SELECT
20:59:58   3  ydate
20:59:58   4  ,att00 jpy_att00
20:59:58   5  ,att01 jpy_att01
20:59:58   6  ,att02 jpy_att02
20:59:58   7  ,att03 jpy_att03
20:59:58   8  ,att04 jpy_att04
20:59:58   9  ,att05 jpy_att05
20:59:58  10  ,att06 jpy_att06
20:59:58  11  ,att07 jpy_att07
20:59:58  12  ,att08 jpy_att08
20:59:58  13  ,att09 jpy_att09
20:59:58  14  ,att10 jpy_att10
20:59:58  15  ,att11 jpy_att11
20:59:58  16  ,att12 jpy_att12
20:59:58  17  ,att13 jpy_att13
20:59:58  18  ,att14 jpy_att14
20:59:58  19  ,att15 jpy_att15
20:59:58  20  ,att16 jpy_att16
20:59:58  21  ,att17 jpy_att17
20:59:58  22  ,att18 jpy_att18
20:59:58  23  ,att19 jpy_att19
20:59:58  24  ,att20 jpy_att20
20:59:58  25  ,att21 jpy_att21
20:59:58  26  ,att22 jpy_att22
20:59:58  27  ,att23 jpy_att23
20:59:58  28  ,att24 jpy_att24
20:59:58  29  ,att25 jpy_att25
20:59:58  30  ,att26 jpy_att26
20:59:58  31  ,att27 jpy_att27
20:59:58  32  ,att28 jpy_att28
20:59:58  33  ,att29 jpy_att29
20:59:58  34  ,att30 jpy_att30
20:59:58  35  ,att31 jpy_att31
20:59:58  36  ,att32 jpy_att32
20:59:58  37  ,att33 jpy_att33
20:59:58  38  ,att34 jpy_att34
20:59:58  39  ,att35 jpy_att35
20:59:58  40  ,att36 jpy_att36
20:59:58  41  ,att37 jpy_att37
20:59:58  42  FROM svm6162
20:59:58  43  /

Table created.

Elapsed: 00:00:00.19
20:59:59 SQL> 
20:59:59 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
20:59:59 SQL> 
20:59:59 SQL> -- rpt
20:59:59 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19555

Elapsed: 00:00:00.92
21:00:00 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19555

Elapsed: 00:00:00.00
21:00:00 SQL> 
21:00:00 SQL> --
21:00:00 SQL> -- cad610.sql
21:00:00 SQL> --
21:00:00 SQL> 
21:00:00 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:00:00 SQL> 
21:00:00 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.46
21:00:00 SQL> 
21:00:00 SQL> -- I created di5min here:
21:00:00 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:00:00 SQL> 
21:00:00 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:00:00   2  SELECT
21:00:00   3  pair
21:00:00   4  ,ydate
21:00:00   5  ,prdate
21:00:00   6  ,rownum rnum -- acts as t in my time-series
21:00:00   7  ,clse
21:00:00   8  -- Derive a bunch of attributes from clse, the latest price:
21:00:00   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:00:00  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:00:00  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:00:00  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:00:00  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:00:00  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:00:00  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:00:00  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:00:00  17  --
21:00:00  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:00:00  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:00:00  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:00:00  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:00:00  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:00:00  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:00:00  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:00:00  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:00:00  26  --
21:00:00  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:00:00  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:00:00  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:00:00  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:00:00  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:00:00  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:00:00  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:00:00  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:00:00  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:00:00  36  FROM di5min WHERE pair LIKE'%cad%'
21:00:00  37  AND ydate > sysdate - 95
21:00:00  38  ORDER BY ydate
21:00:00  39  /

View created.

Elapsed: 00:00:00.05
21:00:00 SQL> 
21:00:00 SQL> -- rpt
21:00:00 SQL> 
21:00:00 SQL> SELECT
21:00:00   2  pair
21:00:00   3  ,COUNT(pair)
21:00:00   4  ,MIN(clse),MAX(clse)
21:00:00   5  ,MIN(avg6),MAX(avg6)
21:00:00   6  ,MIN(ydate),MAX(ydate)
21:00:00   7  FROM svm6102
21:00:00   8  GROUP BY pair
21:00:00   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19555	.99755	    1.036 .998845205 1.03336849 2010-09-26 20:55:01 2010-12-29 20:55:00

Elapsed: 00:00:00.88
21:00:01 SQL> 
21:00:01 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:00:01 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.34
21:00:02 SQL> CREATE TABLE svm6122 COMPRESS AS
21:00:02   2  SELECT
21:00:02   3  pair
21:00:02   4  ,ydate
21:00:02   5  ,prdate
21:00:02   6  ,clse
21:00:02   7  -- g6 is important. I want to predict g6:
21:00:02   8  ,ld6 - clse g6
21:00:02   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:00:02  10  -- I want more attributes from the ones I derived above:
21:00:02  11  -- clse relation to moving-min
21:00:02  12  ,clse-min4  cm4
21:00:02  13  ,clse-min6  cm6
21:00:02  14  ,clse-min8  cm8
21:00:02  15  ,clse-min10 cm10
21:00:02  16  ,clse-min12 cm12
21:00:02  17  ,clse-min14 cm14
21:00:02  18  ,clse-min16 cm16
21:00:02  19  ,clse-min18 cm18
21:00:02  20  -- clse relation to moving-avg
21:00:02  21  ,clse-avg4  ca4
21:00:02  22  ,clse-avg6  ca6
21:00:02  23  ,clse-avg8  ca8
21:00:02  24  ,clse-avg10 ca10
21:00:02  25  ,clse-avg12 ca12
21:00:02  26  ,clse-avg14 ca14
21:00:02  27  ,clse-avg16 ca16
21:00:02  28  ,clse-avg18 ca18
21:00:02  29  -- clse relation to moving-max
21:00:02  30  ,clse-max4  cx4
21:00:02  31  ,clse-max6  cx6
21:00:02  32  ,clse-max8  cx8
21:00:02  33  ,clse-max10 cx10
21:00:02  34  ,clse-max12 cx12
21:00:02  35  ,clse-max14 cx14
21:00:02  36  ,clse-max16 cx16
21:00:02  37  ,clse-max18 cx18
21:00:02  38  -- Derive more attributes.
21:00:02  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:00:02  40  -- But COVAR_POP is more stable:
21:00:02  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:00:02  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:00:02  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:00:02  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:00:02  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:00:02  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:00:02  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:00:02  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:00:02  49  -- Derive date related attributes:
21:00:02  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:00:02  51  ,0+TO_CHAR(ydate,'D')d
21:00:02  52  ,0+TO_CHAR(ydate,'W')w
21:00:02  53  -- mpm stands for minutes-past-midnight:
21:00:02  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:00:02  55  -- mph stands for minutes-past-hour:
21:00:02  56  ,0+TO_CHAR(ydate,'MI')mph
21:00:02  57  FROM svm6102
21:00:02  58  ORDER BY ydate
21:00:02  59  /

Table created.

Elapsed: 00:00:02.10
21:00:04 SQL> 
21:00:04 SQL> -- rpt
21:00:04 SQL> 
21:00:04 SQL> SELECT
21:00:04   2  pair
21:00:04   3  ,COUNT(pair)
21:00:04   4  ,MIN(clse),MAX(clse)
21:00:04   5  ,MIN(ydate),MAX(ydate)
21:00:04   6  FROM svm6122
21:00:04   7  GROUP BY pair
21:00:04   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19555	.99755	    1.036 2010-09-26 20:55:01 2010-12-29 20:55:00

Elapsed: 00:00:00.07
21:00:04 SQL> 
21:00:04 SQL> -- Prepare for derivation of NTILE based params:
21:00:04 SQL> 
21:00:04 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.25
21:00:04 SQL> CREATE TABLE svm6142 COMPRESS AS
21:00:04   2  SELECT
21:00:04   3  pair
21:00:04   4  ,ydate
21:00:04   5  ,prdate
21:00:04   6  ,clse
21:00:04   7  ,g6
21:00:04   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:00:04   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:00:04  10  ,CASE WHEN trend IS NULL THEN 1
21:00:04  11  	    WHEN trend =0      THEN 1
21:00:04  12  	    ELSE trend END trend
21:00:04  13  ,cm4
21:00:04  14  ,cm6
21:00:04  15  ,cm8
21:00:04  16  ,cm10
21:00:04  17  ,cm12
21:00:04  18  ,cm14
21:00:04  19  ,cm16
21:00:04  20  ,cm18
21:00:04  21  --
21:00:04  22  ,ca4
21:00:04  23  ,ca6
21:00:04  24  ,ca8
21:00:04  25  ,ca10
21:00:04  26  ,ca12
21:00:04  27  ,ca14
21:00:04  28  ,ca16
21:00:04  29  ,ca18
21:00:04  30  --
21:00:04  31  ,cx4
21:00:04  32  ,cx6
21:00:04  33  ,cx8
21:00:04  34  ,cx10
21:00:04  35  ,cx12
21:00:04  36  ,cx14
21:00:04  37  ,cx16
21:00:04  38  ,cx18
21:00:04  39  --
21:00:04  40  ,crr4
21:00:04  41  ,crr6
21:00:04  42  ,crr8
21:00:04  43  ,crr10
21:00:04  44  ,crr12
21:00:04  45  ,crr14
21:00:04  46  ,crr16
21:00:04  47  ,crr18
21:00:04  48  --
21:00:04  49  ,hh
21:00:04  50  ,d
21:00:04  51  ,w
21:00:04  52  ,mpm
21:00:04  53  ,mph
21:00:04  54  FROM svm6122
21:00:04  55  ORDER BY ydate
21:00:04  56  /

Table created.

Elapsed: 00:00:00.40
21:00:05 SQL> 
21:00:05 SQL> -- rpt
21:00:05 SQL> 
21:00:05 SQL> SELECT
21:00:05   2  pair
21:00:05   3  ,trend
21:00:05   4  ,gatt
21:00:05   5  ,COUNT(pair)
21:00:05   6  ,AVG(g6)
21:00:05   7  FROM svm6142
21:00:05   8  GROUP BY pair,trend,gatt
21:00:05   9  ORDER BY pair,trend,gatt
21:00:05  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7183 -.00133291
usd_cad 	-1 up	      3143 .003084935
usd_cad 	-1		25
usd_cad 	 1 nup	      6668 -.00162401
usd_cad 	 1 up	      2489 .003597467
usd_cad 	 1		47

6 rows selected.

Elapsed: 00:00:00.04
21:00:05 SQL> 
21:00:05 SQL> 
21:00:05 SQL> -- Derive NTILE based params:
21:00:05 SQL> 
21:00:05 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.19
21:00:05 SQL> CREATE TABLE svm6162 COMPRESS AS
21:00:05   2  SELECT
21:00:05   3  pair
21:00:05   4  ,ydate
21:00:05   5  ,prdate
21:00:05   6  ,clse
21:00:05   7  ,g6
21:00:05   8  ,gatt
21:00:05   9  ,gattn
21:00:05  10  ,trend
21:00:05  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:00:05  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:00:05  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:00:05  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:00:05  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:00:05  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:00:05  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:00:05  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:00:05  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:00:05  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:00:05  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:00:05  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:00:05  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:00:05  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:00:05  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:00:05  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:00:05  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:00:05  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:00:05  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:00:05  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:00:05  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:00:05  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:00:05  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:00:05  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:00:05  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:00:05  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:00:05  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:00:05  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:00:05  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:00:05  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:00:05  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:00:05  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:00:05  43  ,hh  att32
21:00:05  44  ,d   att33
21:00:05  45  ,w   att34
21:00:05  46  ,mpm att35
21:00:05  47  ,mph att36
21:00:05  48  ,trend att37
21:00:05  49  FROM svm6142
21:00:05  50  ORDER BY ydate
21:00:05  51  /

Table created.

Elapsed: 00:00:05.33
21:00:10 SQL> 
21:00:10 SQL> -- rpt
21:00:10 SQL> 
21:00:10 SQL> SELECT
21:00:10   2  pair
21:00:10   3  ,trend
21:00:10   4  ,gatt
21:00:10   5  ,COUNT(pair)
21:00:10   6  ,AVG(g6)
21:00:10   7  FROM svm6162
21:00:10   8  GROUP BY pair,trend,gatt
21:00:10   9  ORDER BY pair,trend,gatt
21:00:10  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7183 -.00133291
usd_cad 	-1 up	      3143 .003084935
usd_cad 	-1		25
usd_cad 	 1 nup	      6668 -.00162401
usd_cad 	 1 up	      2489 .003597467
usd_cad 	 1		47

6 rows selected.

Elapsed: 00:00:00.03
21:00:10 SQL> 
21:00:10 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
21:00:10 SQL> CREATE TABLE modsrc COMPRESS AS
21:00:10   2  SELECT
21:00:10   3  pair
21:00:10   4  ,ydate
21:00:10   5  ,prdate
21:00:10   6  ,trend
21:00:10   7  ,g6
21:00:10   8  ,gatt
21:00:10   9  ,gattn
21:00:10  10  FROM svm6162
21:00:10  11  /

Table created.

Elapsed: 00:00:00.10
21:00:10 SQL> 
21:00:10 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.36
21:00:11 SQL> 
21:00:11 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
21:00:11 SQL> CREATE TABLE cad_ms610 COMPRESS AS
21:00:11   2  SELECT
21:00:11   3  ydate
21:00:11   4  ,trend cad_trend
21:00:11   5  ,g6    cad_g6
21:00:11   6  ,gatt  cad_gatt
21:00:11   7  ,gattn cad_gattn
21:00:11   8  FROM modsrc
21:00:11   9  /

Table created.

Elapsed: 00:00:00.08
21:00:11 SQL> 
21:00:11 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
21:00:11 SQL> 
21:00:11 SQL> -- I need a copy of the attributes:
21:00:11 SQL> 
21:00:11 SQL> 
21:00:11 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.05
21:00:11 SQL> CREATE TABLE cad_att COMPRESS AS
21:00:11   2  SELECT
21:00:11   3  ydate
21:00:11   4  ,att00 cad_att00
21:00:11   5  ,att01 cad_att01
21:00:11   6  ,att02 cad_att02
21:00:11   7  ,att03 cad_att03
21:00:11   8  ,att04 cad_att04
21:00:11   9  ,att05 cad_att05
21:00:11  10  ,att06 cad_att06
21:00:11  11  ,att07 cad_att07
21:00:11  12  ,att08 cad_att08
21:00:11  13  ,att09 cad_att09
21:00:11  14  ,att10 cad_att10
21:00:11  15  ,att11 cad_att11
21:00:11  16  ,att12 cad_att12
21:00:11  17  ,att13 cad_att13
21:00:11  18  ,att14 cad_att14
21:00:11  19  ,att15 cad_att15
21:00:11  20  ,att16 cad_att16
21:00:11  21  ,att17 cad_att17
21:00:11  22  ,att18 cad_att18
21:00:11  23  ,att19 cad_att19
21:00:11  24  ,att20 cad_att20
21:00:11  25  ,att21 cad_att21
21:00:11  26  ,att22 cad_att22
21:00:11  27  ,att23 cad_att23
21:00:11  28  ,att24 cad_att24
21:00:11  29  ,att25 cad_att25
21:00:11  30  ,att26 cad_att26
21:00:11  31  ,att27 cad_att27
21:00:11  32  ,att28 cad_att28
21:00:11  33  ,att29 cad_att29
21:00:11  34  ,att30 cad_att30
21:00:11  35  ,att31 cad_att31
21:00:11  36  ,att32 cad_att32
21:00:11  37  ,att33 cad_att33
21:00:11  38  ,att34 cad_att34
21:00:11  39  ,att35 cad_att35
21:00:11  40  ,att36 cad_att36
21:00:11  41  ,att37 cad_att37
21:00:11  42  FROM svm6162
21:00:11  43  /

Table created.

Elapsed: 00:00:00.19
21:00:11 SQL> 
21:00:11 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
21:00:12 SQL> 
21:00:12 SQL> -- rpt
21:00:12 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19555

Elapsed: 00:00:00.84
21:00:13 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19555

Elapsed: 00:00:00.00
21:00:13 SQL> 
21:00:13 SQL> --
21:00:13 SQL> -- chf610.sql
21:00:13 SQL> --
21:00:13 SQL> 
21:00:13 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:00:13 SQL> 
21:00:13 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:01.07
21:00:14 SQL> 
21:00:14 SQL> -- I created di5min here:
21:00:14 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:00:14 SQL> 
21:00:14 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:00:14   2  SELECT
21:00:14   3  pair
21:00:14   4  ,ydate
21:00:14   5  ,prdate
21:00:14   6  ,rownum rnum -- acts as t in my time-series
21:00:14   7  ,clse
21:00:14   8  -- Derive a bunch of attributes from clse, the latest price:
21:00:14   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:00:14  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:00:14  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:00:14  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:00:14  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:00:14  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:00:14  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:00:14  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:00:14  17  --
21:00:14  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:00:14  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:00:14  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:00:14  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:00:14  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:00:14  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:00:14  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:00:14  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:00:14  26  --
21:00:14  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:00:14  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:00:14  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:00:14  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:00:14  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:00:14  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:00:14  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:00:14  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:00:14  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:00:14  36  FROM di5min WHERE pair LIKE'%chf%'
21:00:14  37  AND ydate > sysdate - 95
21:00:14  38  ORDER BY ydate
21:00:14  39  /

View created.

Elapsed: 00:00:00.04
21:00:14 SQL> 
21:00:14 SQL> -- rpt
21:00:14 SQL> 
21:00:14 SQL> SELECT
21:00:14   2  pair
21:00:14   3  ,COUNT(pair)
21:00:14   4  ,MIN(clse),MAX(clse)
21:00:14   5  ,MIN(avg6),MAX(avg6)
21:00:14   6  ,MIN(ydate),MAX(ydate)
21:00:14   7  FROM svm6102
21:00:14   8  GROUP BY pair
21:00:14   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19558	.94525	  1.00635 .947785616 1.00498151 2010-09-26 20:55:01 2010-12-29 20:55:00

Elapsed: 00:00:00.85
21:00:15 SQL> 
21:00:15 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:00:15 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.19
21:00:15 SQL> CREATE TABLE svm6122 COMPRESS AS
21:00:15   2  SELECT
21:00:15   3  pair
21:00:15   4  ,ydate
21:00:15   5  ,prdate
21:00:15   6  ,clse
21:00:15   7  -- g6 is important. I want to predict g6:
21:00:15   8  ,ld6 - clse g6
21:00:15   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:00:15  10  -- I want more attributes from the ones I derived above:
21:00:15  11  -- clse relation to moving-min
21:00:15  12  ,clse-min4  cm4
21:00:15  13  ,clse-min6  cm6
21:00:15  14  ,clse-min8  cm8
21:00:15  15  ,clse-min10 cm10
21:00:15  16  ,clse-min12 cm12
21:00:15  17  ,clse-min14 cm14
21:00:15  18  ,clse-min16 cm16
21:00:15  19  ,clse-min18 cm18
21:00:15  20  -- clse relation to moving-avg
21:00:15  21  ,clse-avg4  ca4
21:00:15  22  ,clse-avg6  ca6
21:00:15  23  ,clse-avg8  ca8
21:00:15  24  ,clse-avg10 ca10
21:00:15  25  ,clse-avg12 ca12
21:00:15  26  ,clse-avg14 ca14
21:00:15  27  ,clse-avg16 ca16
21:00:15  28  ,clse-avg18 ca18
21:00:15  29  -- clse relation to moving-max
21:00:15  30  ,clse-max4  cx4
21:00:15  31  ,clse-max6  cx6
21:00:15  32  ,clse-max8  cx8
21:00:15  33  ,clse-max10 cx10
21:00:15  34  ,clse-max12 cx12
21:00:15  35  ,clse-max14 cx14
21:00:15  36  ,clse-max16 cx16
21:00:15  37  ,clse-max18 cx18
21:00:15  38  -- Derive more attributes.
21:00:15  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:00:15  40  -- But COVAR_POP is more stable:
21:00:15  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:00:15  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:00:15  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:00:15  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:00:15  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:00:15  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:00:15  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:00:15  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:00:15  49  -- Derive date related attributes:
21:00:15  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:00:15  51  ,0+TO_CHAR(ydate,'D')d
21:00:15  52  ,0+TO_CHAR(ydate,'W')w
21:00:15  53  -- mpm stands for minutes-past-midnight:
21:00:15  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:00:15  55  -- mph stands for minutes-past-hour:
21:00:15  56  ,0+TO_CHAR(ydate,'MI')mph
21:00:15  57  FROM svm6102
21:00:15  58  ORDER BY ydate
21:00:15  59  /

Table created.

Elapsed: 00:00:02.13
21:00:17 SQL> 
21:00:17 SQL> -- rpt
21:00:17 SQL> 
21:00:17 SQL> SELECT
21:00:17   2  pair
21:00:17   3  ,COUNT(pair)
21:00:17   4  ,MIN(clse),MAX(clse)
21:00:17   5  ,MIN(ydate),MAX(ydate)
21:00:17   6  FROM svm6122
21:00:17   7  GROUP BY pair
21:00:17   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19558	.94525	  1.00635 2010-09-26 20:55:01 2010-12-29 20:55:00

Elapsed: 00:00:00.04
21:00:17 SQL> 
21:00:17 SQL> -- Prepare for derivation of NTILE based params:
21:00:17 SQL> 
21:00:17 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.18
21:00:17 SQL> CREATE TABLE svm6142 COMPRESS AS
21:00:17   2  SELECT
21:00:17   3  pair
21:00:17   4  ,ydate
21:00:17   5  ,prdate
21:00:17   6  ,clse
21:00:17   7  ,g6
21:00:17   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:00:17   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:00:17  10  ,CASE WHEN trend IS NULL THEN 1
21:00:17  11  	    WHEN trend =0      THEN 1
21:00:17  12  	    ELSE trend END trend
21:00:17  13  ,cm4
21:00:17  14  ,cm6
21:00:17  15  ,cm8
21:00:17  16  ,cm10
21:00:17  17  ,cm12
21:00:17  18  ,cm14
21:00:17  19  ,cm16
21:00:17  20  ,cm18
21:00:17  21  --
21:00:17  22  ,ca4
21:00:17  23  ,ca6
21:00:17  24  ,ca8
21:00:17  25  ,ca10
21:00:17  26  ,ca12
21:00:17  27  ,ca14
21:00:17  28  ,ca16
21:00:17  29  ,ca18
21:00:17  30  --
21:00:17  31  ,cx4
21:00:17  32  ,cx6
21:00:17  33  ,cx8
21:00:17  34  ,cx10
21:00:17  35  ,cx12
21:00:17  36  ,cx14
21:00:17  37  ,cx16
21:00:17  38  ,cx18
21:00:17  39  --
21:00:17  40  ,crr4
21:00:17  41  ,crr6
21:00:17  42  ,crr8
21:00:17  43  ,crr10
21:00:17  44  ,crr12
21:00:17  45  ,crr14
21:00:17  46  ,crr16
21:00:17  47  ,crr18
21:00:17  48  --
21:00:17  49  ,hh
21:00:17  50  ,d
21:00:17  51  ,w
21:00:17  52  ,mpm
21:00:17  53  ,mph
21:00:17  54  FROM svm6122
21:00:17  55  ORDER BY ydate
21:00:17  56  /

Table created.

Elapsed: 00:00:00.41
21:00:17 SQL> 
21:00:17 SQL> -- rpt
21:00:17 SQL> 
21:00:17 SQL> SELECT
21:00:17   2  pair
21:00:17   3  ,trend
21:00:17   4  ,gatt
21:00:17   5  ,COUNT(pair)
21:00:17   6  ,AVG(g6)
21:00:17   7  FROM svm6142
21:00:17   8  GROUP BY pair,trend,gatt
21:00:17   9  ORDER BY pair,trend,gatt
21:00:17  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      6996 -.00193283
usd_chf 	-1 up	      3177 .003894688
usd_chf 	-1		72
usd_chf 	 1 nup	      6747 -.00161786
usd_chf 	 1 up	      2566 .003688786

Elapsed: 00:00:00.07
21:00:18 SQL> 
21:00:18 SQL> 
21:00:18 SQL> -- Derive NTILE based params:
21:00:18 SQL> 
21:00:18 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
21:00:18 SQL> CREATE TABLE svm6162 COMPRESS AS
21:00:18   2  SELECT
21:00:18   3  pair
21:00:18   4  ,ydate
21:00:18   5  ,prdate
21:00:18   6  ,clse
21:00:18   7  ,g6
21:00:18   8  ,gatt
21:00:18   9  ,gattn
21:00:18  10  ,trend
21:00:18  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:00:18  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:00:18  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:00:18  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:00:18  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:00:18  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:00:18  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:00:18  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:00:18  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:00:18  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:00:18  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:00:18  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:00:18  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:00:18  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:00:18  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:00:18  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:00:18  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:00:18  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:00:18  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:00:18  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:00:18  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:00:18  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:00:18  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:00:18  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:00:18  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:00:18  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:00:18  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:00:18  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:00:18  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:00:18  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:00:18  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:00:18  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:00:18  43  ,hh  att32
21:00:18  44  ,d   att33
21:00:18  45  ,w   att34
21:00:18  46  ,mpm att35
21:00:18  47  ,mph att36
21:00:18  48  ,trend att37
21:00:18  49  FROM svm6142
21:00:18  50  ORDER BY ydate
21:00:18  51  /

Table created.

Elapsed: 00:00:05.41
21:00:23 SQL> 
21:00:23 SQL> -- rpt
21:00:23 SQL> 
21:00:23 SQL> SELECT
21:00:23   2  pair
21:00:23   3  ,trend
21:00:23   4  ,gatt
21:00:23   5  ,COUNT(pair)
21:00:23   6  ,AVG(g6)
21:00:23   7  FROM svm6162
21:00:23   8  GROUP BY pair,trend,gatt
21:00:23   9  ORDER BY pair,trend,gatt
21:00:23  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      6996 -.00193283
usd_chf 	-1 up	      3177 .003894688
usd_chf 	-1		72
usd_chf 	 1 nup	      6747 -.00161786
usd_chf 	 1 up	      2566 .003688786

Elapsed: 00:00:00.03
21:00:23 SQL> 
21:00:23 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
21:00:23 SQL> CREATE TABLE modsrc COMPRESS AS
21:00:23   2  SELECT
21:00:23   3  pair
21:00:23   4  ,ydate
21:00:23   5  ,prdate
21:00:23   6  ,trend
21:00:23   7  ,g6
21:00:23   8  ,gatt
21:00:23   9  ,gattn
21:00:23  10  FROM svm6162
21:00:23  11  /

Table created.

Elapsed: 00:00:00.10
21:00:23 SQL> 
21:00:23 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
21:00:24 SQL> 
21:00:24 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
21:00:24 SQL> CREATE TABLE chf_ms610 COMPRESS AS
21:00:24   2  SELECT
21:00:24   3  ydate
21:00:24   4  ,trend chf_trend
21:00:24   5  ,g6    chf_g6
21:00:24   6  ,gatt  chf_gatt
21:00:24   7  ,gattn chf_gattn
21:00:24   8  FROM modsrc
21:00:24   9  /

Table created.

Elapsed: 00:00:00.07
21:00:24 SQL> 
21:00:24 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
21:00:24 SQL> 
21:00:24 SQL> -- I need a copy of the attributes:
21:00:24 SQL> 
21:00:24 SQL> 
21:00:24 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.04
21:00:24 SQL> CREATE TABLE chf_att COMPRESS AS
21:00:24   2  SELECT
21:00:24   3  ydate
21:00:24   4  ,att00 chf_att00
21:00:24   5  ,att01 chf_att01
21:00:24   6  ,att02 chf_att02
21:00:24   7  ,att03 chf_att03
21:00:24   8  ,att04 chf_att04
21:00:24   9  ,att05 chf_att05
21:00:24  10  ,att06 chf_att06
21:00:24  11  ,att07 chf_att07
21:00:24  12  ,att08 chf_att08
21:00:24  13  ,att09 chf_att09
21:00:24  14  ,att10 chf_att10
21:00:24  15  ,att11 chf_att11
21:00:24  16  ,att12 chf_att12
21:00:24  17  ,att13 chf_att13
21:00:24  18  ,att14 chf_att14
21:00:24  19  ,att15 chf_att15
21:00:24  20  ,att16 chf_att16
21:00:24  21  ,att17 chf_att17
21:00:24  22  ,att18 chf_att18
21:00:24  23  ,att19 chf_att19
21:00:24  24  ,att20 chf_att20
21:00:24  25  ,att21 chf_att21
21:00:24  26  ,att22 chf_att22
21:00:24  27  ,att23 chf_att23
21:00:24  28  ,att24 chf_att24
21:00:24  29  ,att25 chf_att25
21:00:24  30  ,att26 chf_att26
21:00:24  31  ,att27 chf_att27
21:00:24  32  ,att28 chf_att28
21:00:24  33  ,att29 chf_att29
21:00:24  34  ,att30 chf_att30
21:00:24  35  ,att31 chf_att31
21:00:24  36  ,att32 chf_att32
21:00:24  37  ,att33 chf_att33
21:00:24  38  ,att34 chf_att34
21:00:24  39  ,att35 chf_att35
21:00:24  40  ,att36 chf_att36
21:00:24  41  ,att37 chf_att37
21:00:24  42  FROM svm6162
21:00:24  43  /

Table created.

Elapsed: 00:00:00.19
21:00:24 SQL> 
21:00:24 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.53
21:00:25 SQL> 
21:00:25 SQL> -- rpt
21:00:25 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19558

Elapsed: 00:00:00.83
21:00:25 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19558

Elapsed: 00:00:00.00
21:00:25 SQL> 
21:00:25 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
