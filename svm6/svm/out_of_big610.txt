
SQL*Plus: Release 11.2.0.1.0 Production on Thu Jan 6 20:32:46 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

20:32:46 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
20:32:46 SQL> 20:32:46 SQL> --
20:32:46 SQL> -- eur610.sql
20:32:46 SQL> --
20:32:46 SQL> 
20:32:46 SQL> -- Creates views and tables for backtesting a forex SVM strategy
20:32:46 SQL> 
20:32:46 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.03
20:32:46 SQL> 
20:32:46 SQL> -- I created di5min here:
20:32:46 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
20:32:46 SQL> 
20:32:46 SQL> CREATE OR REPLACE VIEW svm6102 AS
20:32:46   2  SELECT
20:32:46   3  pair
20:32:46   4  ,ydate
20:32:46   5  ,prdate
20:32:46   6  ,rownum rnum -- acts as t in my time-series
20:32:46   7  ,clse
20:32:46   8  -- Derive a bunch of attributes from clse, the latest price:
20:32:46   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
20:32:46  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
20:32:46  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
20:32:46  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
20:32:46  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
20:32:46  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
20:32:46  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
20:32:46  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
20:32:46  17  --
20:32:46  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
20:32:46  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
20:32:46  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
20:32:46  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
20:32:46  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
20:32:46  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
20:32:46  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
20:32:46  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
20:32:46  26  --
20:32:46  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
20:32:46  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
20:32:46  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
20:32:46  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
20:32:46  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
20:32:46  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
20:32:46  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
20:32:46  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
20:32:46  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
20:32:46  36  FROM di5min WHERE pair LIKE'%eur%'
20:32:46  37  AND ydate > sysdate - 95
20:32:46  38  ORDER BY ydate
20:32:46  39  /

View created.

Elapsed: 00:00:00.06
20:32:46 SQL> 
20:32:46 SQL> -- rpt
20:32:46 SQL> 
20:32:46 SQL> SELECT
20:32:46   2  pair
20:32:46   3  ,COUNT(pair)
20:32:46   4  ,MIN(clse),MAX(clse)
20:32:46   5  ,MIN(avg6),MAX(avg6)
20:32:46   6  ,MIN(ydate),MAX(ydate)
20:32:46   7  FROM svm6102
20:32:46   8  GROUP BY pair
20:32:46   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19810    1.29735	   1.4273 1.29875103 1.42436233 2010-10-03 20:55:01 2011-01-06 20:30:00

Elapsed: 00:00:00.94
20:32:47 SQL> 
20:32:47 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
20:32:47 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.05
20:32:47 SQL> CREATE TABLE svm6122 COMPRESS AS
20:32:47   2  SELECT
20:32:47   3  pair
20:32:47   4  ,ydate
20:32:47   5  ,prdate
20:32:47   6  ,clse
20:32:47   7  -- g6 is important. I want to predict g6:
20:32:47   8  ,ld6 - clse g6
20:32:47   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
20:32:47  10  -- I want more attributes from the ones I derived above:
20:32:47  11  -- clse relation to moving-min
20:32:47  12  ,clse-min4  cm4
20:32:47  13  ,clse-min6  cm6
20:32:47  14  ,clse-min8  cm8
20:32:47  15  ,clse-min10 cm10
20:32:47  16  ,clse-min12 cm12
20:32:47  17  ,clse-min14 cm14
20:32:47  18  ,clse-min16 cm16
20:32:47  19  ,clse-min18 cm18
20:32:47  20  -- clse relation to moving-avg
20:32:47  21  ,clse-avg4  ca4
20:32:47  22  ,clse-avg6  ca6
20:32:47  23  ,clse-avg8  ca8
20:32:47  24  ,clse-avg10 ca10
20:32:47  25  ,clse-avg12 ca12
20:32:47  26  ,clse-avg14 ca14
20:32:47  27  ,clse-avg16 ca16
20:32:47  28  ,clse-avg18 ca18
20:32:47  29  -- clse relation to moving-max
20:32:47  30  ,clse-max4  cx4
20:32:47  31  ,clse-max6  cx6
20:32:47  32  ,clse-max8  cx8
20:32:47  33  ,clse-max10 cx10
20:32:47  34  ,clse-max12 cx12
20:32:47  35  ,clse-max14 cx14
20:32:47  36  ,clse-max16 cx16
20:32:47  37  ,clse-max18 cx18
20:32:47  38  -- Derive more attributes.
20:32:47  39  -- I want to use CORR() here to help SVM see the shape of the series.
20:32:47  40  -- But COVAR_POP is more stable:
20:32:47  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
20:32:47  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
20:32:47  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
20:32:47  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
20:32:47  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
20:32:47  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
20:32:47  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
20:32:47  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
20:32:47  49  -- Derive date related attributes:
20:32:47  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
20:32:47  51  ,0+TO_CHAR(ydate,'D')d
20:32:47  52  ,0+TO_CHAR(ydate,'W')w
20:32:47  53  -- mpm stands for minutes-past-midnight:
20:32:47  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
20:32:47  55  -- mph stands for minutes-past-hour:
20:32:47  56  ,0+TO_CHAR(ydate,'MI')mph
20:32:47  57  FROM svm6102
20:32:47  58  ORDER BY ydate
20:32:47  59  /

Table created.

Elapsed: 00:00:02.44
20:32:49 SQL> 
20:32:49 SQL> -- rpt
20:32:49 SQL> 
20:32:49 SQL> SELECT
20:32:49   2  pair
20:32:49   3  ,COUNT(pair)
20:32:49   4  ,MIN(clse),MAX(clse)
20:32:49   5  ,MIN(ydate),MAX(ydate)
20:32:49   6  FROM svm6122
20:32:49   7  GROUP BY pair
20:32:49   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19810    1.29735	   1.4273 2010-10-03 20:55:01 2011-01-06 20:30:00

Elapsed: 00:00:00.04
20:32:49 SQL> 
20:32:49 SQL> -- Prepare for derivation of NTILE based params:
20:32:49 SQL> 
20:32:49 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.29
20:32:50 SQL> CREATE TABLE svm6142 COMPRESS AS
20:32:50   2  SELECT
20:32:50   3  pair
20:32:50   4  ,ydate
20:32:50   5  ,prdate
20:32:50   6  ,clse
20:32:50   7  ,g6
20:32:50   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
20:32:50   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
20:32:50  10  ,CASE WHEN trend IS NULL THEN 1
20:32:50  11  	    WHEN trend =0      THEN 1
20:32:50  12  	    ELSE trend END trend
20:32:50  13  ,cm4
20:32:50  14  ,cm6
20:32:50  15  ,cm8
20:32:50  16  ,cm10
20:32:50  17  ,cm12
20:32:50  18  ,cm14
20:32:50  19  ,cm16
20:32:50  20  ,cm18
20:32:50  21  --
20:32:50  22  ,ca4
20:32:50  23  ,ca6
20:32:50  24  ,ca8
20:32:50  25  ,ca10
20:32:50  26  ,ca12
20:32:50  27  ,ca14
20:32:50  28  ,ca16
20:32:50  29  ,ca18
20:32:50  30  --
20:32:50  31  ,cx4
20:32:50  32  ,cx6
20:32:50  33  ,cx8
20:32:50  34  ,cx10
20:32:50  35  ,cx12
20:32:50  36  ,cx14
20:32:50  37  ,cx16
20:32:50  38  ,cx18
20:32:50  39  --
20:32:50  40  ,crr4
20:32:50  41  ,crr6
20:32:50  42  ,crr8
20:32:50  43  ,crr10
20:32:50  44  ,crr12
20:32:50  45  ,crr14
20:32:50  46  ,crr16
20:32:50  47  ,crr18
20:32:50  48  --
20:32:50  49  ,hh
20:32:50  50  ,d
20:32:50  51  ,w
20:32:50  52  ,mpm
20:32:50  53  ,mph
20:32:50  54  FROM svm6122
20:32:50  55  ORDER BY ydate
20:32:50  56  /

Table created.

Elapsed: 00:00:00.37
20:32:50 SQL> 
20:32:50 SQL> -- rpt
20:32:50 SQL> 
20:32:50 SQL> SELECT
20:32:50   2  pair
20:32:50   3  ,trend
20:32:50   4  ,gatt
20:32:50   5  ,COUNT(pair)
20:32:50   6  ,AVG(g6)
20:32:50   7  FROM svm6142
20:32:50   8  GROUP BY pair,trend,gatt
20:32:50   9  ORDER BY pair,trend,gatt
20:32:50  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6590 -.00317155
eur_usd 	-1 up	      3570 .004447223
eur_usd 	-1		72
eur_usd 	 1 nup	      5873 -.00325288
eur_usd 	 1 up	      3705 .005071238

Elapsed: 00:00:00.04
20:32:50 SQL> 
20:32:50 SQL> 
20:32:50 SQL> -- Derive NTILE based params:
20:32:50 SQL> 
20:32:50 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.60
20:32:51 SQL> CREATE TABLE svm6162 COMPRESS AS
20:32:51   2  SELECT
20:32:51   3  pair
20:32:51   4  ,ydate
20:32:51   5  ,prdate
20:32:51   6  ,clse
20:32:51   7  ,g6
20:32:51   8  ,gatt
20:32:51   9  ,gattn
20:32:51  10  ,trend
20:32:51  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
20:32:51  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
20:32:51  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
20:32:51  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
20:32:51  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
20:32:51  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
20:32:51  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
20:32:51  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
20:32:51  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
20:32:51  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
20:32:51  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
20:32:51  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
20:32:51  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
20:32:51  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
20:32:51  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
20:32:51  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
20:32:51  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
20:32:51  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
20:32:51  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
20:32:51  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
20:32:51  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
20:32:51  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
20:32:51  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
20:32:51  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
20:32:51  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
20:32:51  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
20:32:51  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
20:32:51  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
20:32:51  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
20:32:51  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
20:32:51  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
20:32:51  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
20:32:51  43  ,hh  att32
20:32:51  44  ,d   att33
20:32:51  45  ,w   att34
20:32:51  46  ,mpm att35
20:32:51  47  ,mph att36
20:32:51  48  ,trend att37
20:32:51  49  FROM svm6142
20:32:51  50  ORDER BY ydate
20:32:51  51  /

Table created.

Elapsed: 00:00:04.87
20:32:56 SQL> 
20:32:56 SQL> -- rpt
20:32:56 SQL> 
20:32:56 SQL> SELECT
20:32:56   2  pair
20:32:56   3  ,trend
20:32:56   4  ,gatt
20:32:56   5  ,COUNT(pair)
20:32:56   6  ,AVG(g6)
20:32:56   7  FROM svm6162
20:32:56   8  GROUP BY pair,trend,gatt
20:32:56   9  ORDER BY pair,trend,gatt
20:32:56  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6590 -.00317155
eur_usd 	-1 up	      3570 .004447223
eur_usd 	-1		72
eur_usd 	 1 nup	      5873 -.00325288
eur_usd 	 1 up	      3705 .005071238

Elapsed: 00:00:00.02
20:32:56 SQL> 
20:32:56 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.04
20:32:56 SQL> CREATE TABLE modsrc COMPRESS AS
20:32:56   2  SELECT
20:32:56   3  pair
20:32:56   4  ,ydate
20:32:56   5  ,prdate
20:32:56   6  ,trend
20:32:56   7  ,g6
20:32:56   8  ,gatt
20:32:56   9  ,gattn
20:32:56  10  FROM svm6162
20:32:56  11  /

Table created.

Elapsed: 00:00:00.09
20:32:56 SQL> 
20:32:56 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
20:32:56 SQL> 
20:32:56 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.08
20:32:56 SQL> CREATE TABLE eur_ms610 COMPRESS AS
20:32:56   2  SELECT
20:32:56   3  ydate
20:32:56   4  ,trend eur_trend
20:32:56   5  ,g6    eur_g6
20:32:56   6  ,gatt  eur_gatt
20:32:56   7  ,gattn eur_gattn
20:32:56   8  FROM modsrc
20:32:56   9  /

Table created.

Elapsed: 00:00:00.06
20:32:56 SQL> 
20:32:56 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
20:32:56 SQL> 
20:32:56 SQL> -- I need a copy of the attributes:
20:32:56 SQL> 
20:32:56 SQL> 
20:32:56 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.06
20:32:56 SQL> CREATE TABLE eur_att COMPRESS AS
20:32:56   2  SELECT
20:32:56   3  ydate
20:32:56   4  ,att00 eur_att00
20:32:56   5  ,att01 eur_att01
20:32:56   6  ,att02 eur_att02
20:32:56   7  ,att03 eur_att03
20:32:56   8  ,att04 eur_att04
20:32:56   9  ,att05 eur_att05
20:32:56  10  ,att06 eur_att06
20:32:56  11  ,att07 eur_att07
20:32:56  12  ,att08 eur_att08
20:32:56  13  ,att09 eur_att09
20:32:56  14  ,att10 eur_att10
20:32:56  15  ,att11 eur_att11
20:32:56  16  ,att12 eur_att12
20:32:56  17  ,att13 eur_att13
20:32:56  18  ,att14 eur_att14
20:32:56  19  ,att15 eur_att15
20:32:56  20  ,att16 eur_att16
20:32:56  21  ,att17 eur_att17
20:32:56  22  ,att18 eur_att18
20:32:56  23  ,att19 eur_att19
20:32:56  24  ,att20 eur_att20
20:32:56  25  ,att21 eur_att21
20:32:56  26  ,att22 eur_att22
20:32:56  27  ,att23 eur_att23
20:32:56  28  ,att24 eur_att24
20:32:56  29  ,att25 eur_att25
20:32:56  30  ,att26 eur_att26
20:32:56  31  ,att27 eur_att27
20:32:56  32  ,att28 eur_att28
20:32:56  33  ,att29 eur_att29
20:32:56  34  ,att30 eur_att30
20:32:56  35  ,att31 eur_att31
20:32:56  36  ,att32 eur_att32
20:32:56  37  ,att33 eur_att33
20:32:56  38  ,att34 eur_att34
20:32:56  39  ,att35 eur_att35
20:32:56  40  ,att36 eur_att36
20:32:56  41  ,att37 eur_att37
20:32:56  42  FROM svm6162
20:32:56  43  /

Table created.

Elapsed: 00:00:00.16
20:32:56 SQL> 
20:32:56 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.49
20:32:57 SQL> 
20:32:57 SQL> -- rpt
20:32:57 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19810

Elapsed: 00:00:00.90
20:32:58 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19810

Elapsed: 00:00:00.00
20:32:58 SQL> 
20:32:58 SQL> --
20:32:58 SQL> -- aud610.sql
20:32:58 SQL> --
20:32:58 SQL> 
20:32:58 SQL> -- Creates views and tables for backtesting a forex SVM strategy
20:32:58 SQL> 
20:32:58 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
20:32:58 SQL> 
20:32:58 SQL> -- I created di5min here:
20:32:58 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
20:32:58 SQL> 
20:32:58 SQL> CREATE OR REPLACE VIEW svm6102 AS
20:32:58   2  SELECT
20:32:58   3  pair
20:32:58   4  ,ydate
20:32:58   5  ,prdate
20:32:58   6  ,rownum rnum -- acts as t in my time-series
20:32:58   7  ,clse
20:32:58   8  -- Derive a bunch of attributes from clse, the latest price:
20:32:58   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
20:32:58  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
20:32:58  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
20:32:58  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
20:32:58  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
20:32:58  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
20:32:58  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
20:32:58  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
20:32:58  17  --
20:32:58  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
20:32:58  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
20:32:58  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
20:32:58  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
20:32:58  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
20:32:58  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
20:32:58  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
20:32:58  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
20:32:58  26  --
20:32:58  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
20:32:58  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
20:32:58  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
20:32:58  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
20:32:58  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
20:32:58  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
20:32:58  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
20:32:58  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
20:32:58  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
20:32:58  36  FROM di5min WHERE pair LIKE'%aud%'
20:32:58  37  AND ydate > sysdate - 95
20:32:58  38  ORDER BY ydate
20:32:58  39  /

View created.

Elapsed: 00:00:00.04
20:32:58 SQL> 
20:32:58 SQL> -- rpt
20:32:58 SQL> 
20:32:58 SQL> SELECT
20:32:58   2  pair
20:32:58   3  ,COUNT(pair)
20:32:58   4  ,MIN(clse),MAX(clse)
20:32:58   5  ,MIN(avg6),MAX(avg6)
20:32:58   6  ,MIN(ydate),MAX(ydate)
20:32:58   7  FROM svm6102
20:32:58   8  GROUP BY pair
20:32:58   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19807	.95405	  1.02495 .957141438 1.02284247 2010-10-03 20:55:01 2011-01-06 20:30:00

Elapsed: 00:00:00.88
20:32:59 SQL> 
20:32:59 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
20:32:59 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.28
20:32:59 SQL> CREATE TABLE svm6122 COMPRESS AS
20:32:59   2  SELECT
20:32:59   3  pair
20:32:59   4  ,ydate
20:32:59   5  ,prdate
20:32:59   6  ,clse
20:32:59   7  -- g6 is important. I want to predict g6:
20:32:59   8  ,ld6 - clse g6
20:32:59   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
20:32:59  10  -- I want more attributes from the ones I derived above:
20:32:59  11  -- clse relation to moving-min
20:32:59  12  ,clse-min4  cm4
20:32:59  13  ,clse-min6  cm6
20:32:59  14  ,clse-min8  cm8
20:32:59  15  ,clse-min10 cm10
20:32:59  16  ,clse-min12 cm12
20:32:59  17  ,clse-min14 cm14
20:32:59  18  ,clse-min16 cm16
20:32:59  19  ,clse-min18 cm18
20:32:59  20  -- clse relation to moving-avg
20:32:59  21  ,clse-avg4  ca4
20:32:59  22  ,clse-avg6  ca6
20:32:59  23  ,clse-avg8  ca8
20:32:59  24  ,clse-avg10 ca10
20:32:59  25  ,clse-avg12 ca12
20:32:59  26  ,clse-avg14 ca14
20:32:59  27  ,clse-avg16 ca16
20:32:59  28  ,clse-avg18 ca18
20:32:59  29  -- clse relation to moving-max
20:32:59  30  ,clse-max4  cx4
20:32:59  31  ,clse-max6  cx6
20:32:59  32  ,clse-max8  cx8
20:32:59  33  ,clse-max10 cx10
20:32:59  34  ,clse-max12 cx12
20:32:59  35  ,clse-max14 cx14
20:32:59  36  ,clse-max16 cx16
20:32:59  37  ,clse-max18 cx18
20:32:59  38  -- Derive more attributes.
20:32:59  39  -- I want to use CORR() here to help SVM see the shape of the series.
20:32:59  40  -- But COVAR_POP is more stable:
20:32:59  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
20:32:59  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
20:32:59  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
20:32:59  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
20:32:59  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
20:32:59  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
20:32:59  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
20:32:59  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
20:32:59  49  -- Derive date related attributes:
20:32:59  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
20:32:59  51  ,0+TO_CHAR(ydate,'D')d
20:32:59  52  ,0+TO_CHAR(ydate,'W')w
20:32:59  53  -- mpm stands for minutes-past-midnight:
20:32:59  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
20:32:59  55  -- mph stands for minutes-past-hour:
20:32:59  56  ,0+TO_CHAR(ydate,'MI')mph
20:32:59  57  FROM svm6102
20:32:59  58  ORDER BY ydate
20:32:59  59  /

Table created.

Elapsed: 00:00:02.13
20:33:02 SQL> 
20:33:02 SQL> -- rpt
20:33:02 SQL> 
20:33:02 SQL> SELECT
20:33:02   2  pair
20:33:02   3  ,COUNT(pair)
20:33:02   4  ,MIN(clse),MAX(clse)
20:33:02   5  ,MIN(ydate),MAX(ydate)
20:33:02   6  FROM svm6122
20:33:02   7  GROUP BY pair
20:33:02   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19807	.95405	  1.02495 2010-10-03 20:55:01 2011-01-06 20:30:00

Elapsed: 00:00:00.04
20:33:02 SQL> 
20:33:02 SQL> -- Prepare for derivation of NTILE based params:
20:33:02 SQL> 
20:33:02 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.33
20:33:02 SQL> CREATE TABLE svm6142 COMPRESS AS
20:33:02   2  SELECT
20:33:02   3  pair
20:33:02   4  ,ydate
20:33:02   5  ,prdate
20:33:02   6  ,clse
20:33:02   7  ,g6
20:33:02   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
20:33:02   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
20:33:02  10  ,CASE WHEN trend IS NULL THEN 1
20:33:02  11  	    WHEN trend =0      THEN 1
20:33:02  12  	    ELSE trend END trend
20:33:02  13  ,cm4
20:33:02  14  ,cm6
20:33:02  15  ,cm8
20:33:02  16  ,cm10
20:33:02  17  ,cm12
20:33:02  18  ,cm14
20:33:02  19  ,cm16
20:33:02  20  ,cm18
20:33:02  21  --
20:33:02  22  ,ca4
20:33:02  23  ,ca6
20:33:02  24  ,ca8
20:33:02  25  ,ca10
20:33:02  26  ,ca12
20:33:02  27  ,ca14
20:33:02  28  ,ca16
20:33:02  29  ,ca18
20:33:02  30  --
20:33:02  31  ,cx4
20:33:02  32  ,cx6
20:33:02  33  ,cx8
20:33:02  34  ,cx10
20:33:02  35  ,cx12
20:33:02  36  ,cx14
20:33:02  37  ,cx16
20:33:02  38  ,cx18
20:33:02  39  --
20:33:02  40  ,crr4
20:33:02  41  ,crr6
20:33:02  42  ,crr8
20:33:02  43  ,crr10
20:33:02  44  ,crr12
20:33:02  45  ,crr14
20:33:02  46  ,crr16
20:33:02  47  ,crr18
20:33:02  48  --
20:33:02  49  ,hh
20:33:02  50  ,d
20:33:02  51  ,w
20:33:02  52  ,mpm
20:33:02  53  ,mph
20:33:02  54  FROM svm6122
20:33:02  55  ORDER BY ydate
20:33:02  56  /

Table created.

Elapsed: 00:00:01.12
20:33:03 SQL> 
20:33:03 SQL> -- rpt
20:33:03 SQL> 
20:33:03 SQL> SELECT
20:33:03   2  pair
20:33:03   3  ,trend
20:33:03   4  ,gatt
20:33:03   5  ,COUNT(pair)
20:33:03   6  ,AVG(g6)
20:33:03   7  FROM svm6142
20:33:03   8  GROUP BY pair,trend,gatt
20:33:03   9  ORDER BY pair,trend,gatt
20:33:03  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5712 -.00214937
aud_usd 	-1 up	      3701 .003745866
aud_usd 	-1		72
aud_usd 	 1 nup	      6729 -.00213846
aud_usd 	 1 up	      3593 .004054752

Elapsed: 00:00:00.03
20:33:03 SQL> 
20:33:03 SQL> 
20:33:03 SQL> -- Derive NTILE based params:
20:33:03 SQL> 
20:33:03 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.23
20:33:03 SQL> CREATE TABLE svm6162 COMPRESS AS
20:33:03   2  SELECT
20:33:03   3  pair
20:33:03   4  ,ydate
20:33:03   5  ,prdate
20:33:03   6  ,clse
20:33:03   7  ,g6
20:33:03   8  ,gatt
20:33:03   9  ,gattn
20:33:03  10  ,trend
20:33:03  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
20:33:03  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
20:33:03  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
20:33:03  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
20:33:03  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
20:33:03  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
20:33:03  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
20:33:03  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
20:33:03  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
20:33:03  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
20:33:03  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
20:33:03  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
20:33:03  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
20:33:03  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
20:33:03  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
20:33:03  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
20:33:03  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
20:33:03  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
20:33:03  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
20:33:03  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
20:33:03  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
20:33:03  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
20:33:03  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
20:33:03  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
20:33:03  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
20:33:03  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
20:33:03  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
20:33:03  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
20:33:03  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
20:33:03  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
20:33:03  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
20:33:03  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
20:33:03  43  ,hh  att32
20:33:03  44  ,d   att33
20:33:03  45  ,w   att34
20:33:03  46  ,mpm att35
20:33:03  47  ,mph att36
20:33:03  48  ,trend att37
20:33:03  49  FROM svm6142
20:33:03  50  ORDER BY ydate
20:33:03  51  /

Table created.

Elapsed: 00:00:05.04
20:33:08 SQL> 
20:33:08 SQL> -- rpt
20:33:08 SQL> 
20:33:08 SQL> SELECT
20:33:08   2  pair
20:33:08   3  ,trend
20:33:08   4  ,gatt
20:33:08   5  ,COUNT(pair)
20:33:08   6  ,AVG(g6)
20:33:08   7  FROM svm6162
20:33:08   8  GROUP BY pair,trend,gatt
20:33:08   9  ORDER BY pair,trend,gatt
20:33:08  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5712 -.00214937
aud_usd 	-1 up	      3701 .003745866
aud_usd 	-1		72
aud_usd 	 1 nup	      6729 -.00213846
aud_usd 	 1 up	      3593 .004054752

Elapsed: 00:00:00.03
20:33:08 SQL> 
20:33:08 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.29
20:33:09 SQL> CREATE TABLE modsrc COMPRESS AS
20:33:09   2  SELECT
20:33:09   3  pair
20:33:09   4  ,ydate
20:33:09   5  ,prdate
20:33:09   6  ,trend
20:33:09   7  ,g6
20:33:09   8  ,gatt
20:33:09   9  ,gattn
20:33:09  10  FROM svm6162
20:33:09  11  /

Table created.

Elapsed: 00:00:00.09
20:33:09 SQL> 
20:33:09 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.28
20:33:09 SQL> 
20:33:09 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
20:33:09 SQL> CREATE TABLE aud_ms610 COMPRESS AS
20:33:09   2  SELECT
20:33:09   3  ydate
20:33:09   4  ,trend aud_trend
20:33:09   5  ,g6    aud_g6
20:33:09   6  ,gatt  aud_gatt
20:33:09   7  ,gattn aud_gattn
20:33:09   8  FROM modsrc
20:33:09   9  /

Table created.

Elapsed: 00:00:00.07
20:33:09 SQL> 
20:33:09 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
20:33:09 SQL> 
20:33:09 SQL> -- I need a copy of the attributes:
20:33:09 SQL> 
20:33:09 SQL> 
20:33:09 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.25
20:33:10 SQL> CREATE TABLE aud_att COMPRESS AS
20:33:10   2  SELECT
20:33:10   3  ydate
20:33:10   4  ,att00 aud_att00
20:33:10   5  ,att01 aud_att01
20:33:10   6  ,att02 aud_att02
20:33:10   7  ,att03 aud_att03
20:33:10   8  ,att04 aud_att04
20:33:10   9  ,att05 aud_att05
20:33:10  10  ,att06 aud_att06
20:33:10  11  ,att07 aud_att07
20:33:10  12  ,att08 aud_att08
20:33:10  13  ,att09 aud_att09
20:33:10  14  ,att10 aud_att10
20:33:10  15  ,att11 aud_att11
20:33:10  16  ,att12 aud_att12
20:33:10  17  ,att13 aud_att13
20:33:10  18  ,att14 aud_att14
20:33:10  19  ,att15 aud_att15
20:33:10  20  ,att16 aud_att16
20:33:10  21  ,att17 aud_att17
20:33:10  22  ,att18 aud_att18
20:33:10  23  ,att19 aud_att19
20:33:10  24  ,att20 aud_att20
20:33:10  25  ,att21 aud_att21
20:33:10  26  ,att22 aud_att22
20:33:10  27  ,att23 aud_att23
20:33:10  28  ,att24 aud_att24
20:33:10  29  ,att25 aud_att25
20:33:10  30  ,att26 aud_att26
20:33:10  31  ,att27 aud_att27
20:33:10  32  ,att28 aud_att28
20:33:10  33  ,att29 aud_att29
20:33:10  34  ,att30 aud_att30
20:33:10  35  ,att31 aud_att31
20:33:10  36  ,att32 aud_att32
20:33:10  37  ,att33 aud_att33
20:33:10  38  ,att34 aud_att34
20:33:10  39  ,att35 aud_att35
20:33:10  40  ,att36 aud_att36
20:33:10  41  ,att37 aud_att37
20:33:10  42  FROM svm6162
20:33:10  43  /

Table created.

Elapsed: 00:00:00.19
20:33:10 SQL> 
20:33:10 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.51
20:33:10 SQL> 
20:33:10 SQL> -- rpt
20:33:10 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19807

Elapsed: 00:00:00.88
20:33:11 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19807

Elapsed: 00:00:00.00
20:33:11 SQL> 
20:33:11 SQL> --
20:33:11 SQL> -- gbp610.sql
20:33:11 SQL> --
20:33:11 SQL> 
20:33:11 SQL> -- Creates views and tables for backtesting a forex SVM strategy
20:33:11 SQL> 
20:33:11 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.46
20:33:12 SQL> 
20:33:12 SQL> -- I created di5min here:
20:33:12 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
20:33:12 SQL> 
20:33:12 SQL> CREATE OR REPLACE VIEW svm6102 AS
20:33:12   2  SELECT
20:33:12   3  pair
20:33:12   4  ,ydate
20:33:12   5  ,prdate
20:33:12   6  ,rownum rnum -- acts as t in my time-series
20:33:12   7  ,clse
20:33:12   8  -- Derive a bunch of attributes from clse, the latest price:
20:33:12   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
20:33:12  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
20:33:12  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
20:33:12  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
20:33:12  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
20:33:12  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
20:33:12  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
20:33:12  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
20:33:12  17  --
20:33:12  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
20:33:12  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
20:33:12  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
20:33:12  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
20:33:12  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
20:33:12  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
20:33:12  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
20:33:12  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
20:33:12  26  --
20:33:12  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
20:33:12  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
20:33:12  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
20:33:12  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
20:33:12  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
20:33:12  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
20:33:12  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
20:33:12  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
20:33:12  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
20:33:12  36  FROM di5min WHERE pair LIKE'%gbp%'
20:33:12  37  AND ydate > sysdate - 95
20:33:12  38  ORDER BY ydate
20:33:12  39  /

View created.

Elapsed: 00:00:00.05
20:33:12 SQL> 
20:33:12 SQL> -- rpt
20:33:12 SQL> 
20:33:12 SQL> SELECT
20:33:12   2  pair
20:33:12   3  ,COUNT(pair)
20:33:12   4  ,MIN(clse),MAX(clse)
20:33:12   5  ,MIN(avg6),MAX(avg6)
20:33:12   6  ,MIN(ydate),MAX(ydate)
20:33:12   7  FROM svm6102
20:33:12   8  GROUP BY pair
20:33:12   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19809   1.535325	   1.6295 1.53696747 1.62716986 2010-10-03 20:55:01 2011-01-06 20:30:00

Elapsed: 00:00:00.88
20:33:13 SQL> 
20:33:13 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
20:33:13 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.30
20:33:13 SQL> CREATE TABLE svm6122 COMPRESS AS
20:33:13   2  SELECT
20:33:13   3  pair
20:33:13   4  ,ydate
20:33:13   5  ,prdate
20:33:13   6  ,clse
20:33:13   7  -- g6 is important. I want to predict g6:
20:33:13   8  ,ld6 - clse g6
20:33:13   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
20:33:13  10  -- I want more attributes from the ones I derived above:
20:33:13  11  -- clse relation to moving-min
20:33:13  12  ,clse-min4  cm4
20:33:13  13  ,clse-min6  cm6
20:33:13  14  ,clse-min8  cm8
20:33:13  15  ,clse-min10 cm10
20:33:13  16  ,clse-min12 cm12
20:33:13  17  ,clse-min14 cm14
20:33:13  18  ,clse-min16 cm16
20:33:13  19  ,clse-min18 cm18
20:33:13  20  -- clse relation to moving-avg
20:33:13  21  ,clse-avg4  ca4
20:33:13  22  ,clse-avg6  ca6
20:33:13  23  ,clse-avg8  ca8
20:33:13  24  ,clse-avg10 ca10
20:33:13  25  ,clse-avg12 ca12
20:33:13  26  ,clse-avg14 ca14
20:33:13  27  ,clse-avg16 ca16
20:33:13  28  ,clse-avg18 ca18
20:33:13  29  -- clse relation to moving-max
20:33:13  30  ,clse-max4  cx4
20:33:13  31  ,clse-max6  cx6
20:33:13  32  ,clse-max8  cx8
20:33:13  33  ,clse-max10 cx10
20:33:13  34  ,clse-max12 cx12
20:33:13  35  ,clse-max14 cx14
20:33:13  36  ,clse-max16 cx16
20:33:13  37  ,clse-max18 cx18
20:33:13  38  -- Derive more attributes.
20:33:13  39  -- I want to use CORR() here to help SVM see the shape of the series.
20:33:13  40  -- But COVAR_POP is more stable:
20:33:13  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
20:33:13  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
20:33:13  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
20:33:13  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
20:33:13  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
20:33:13  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
20:33:13  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
20:33:13  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
20:33:13  49  -- Derive date related attributes:
20:33:13  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
20:33:13  51  ,0+TO_CHAR(ydate,'D')d
20:33:13  52  ,0+TO_CHAR(ydate,'W')w
20:33:13  53  -- mpm stands for minutes-past-midnight:
20:33:13  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
20:33:13  55  -- mph stands for minutes-past-hour:
20:33:13  56  ,0+TO_CHAR(ydate,'MI')mph
20:33:13  57  FROM svm6102
20:33:13  58  ORDER BY ydate
20:33:13  59  /

Table created.

Elapsed: 00:00:02.11
20:33:15 SQL> 
20:33:15 SQL> -- rpt
20:33:15 SQL> 
20:33:15 SQL> SELECT
20:33:15   2  pair
20:33:15   3  ,COUNT(pair)
20:33:15   4  ,MIN(clse),MAX(clse)
20:33:15   5  ,MIN(ydate),MAX(ydate)
20:33:15   6  FROM svm6122
20:33:15   7  GROUP BY pair
20:33:15   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19809   1.535325	   1.6295 2010-10-03 20:55:01 2011-01-06 20:30:00

Elapsed: 00:00:00.05
20:33:15 SQL> 
20:33:15 SQL> -- Prepare for derivation of NTILE based params:
20:33:15 SQL> 
20:33:15 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.26
20:33:15 SQL> CREATE TABLE svm6142 COMPRESS AS
20:33:15   2  SELECT
20:33:15   3  pair
20:33:15   4  ,ydate
20:33:15   5  ,prdate
20:33:15   6  ,clse
20:33:15   7  ,g6
20:33:15   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
20:33:15   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
20:33:15  10  ,CASE WHEN trend IS NULL THEN 1
20:33:15  11  	    WHEN trend =0      THEN 1
20:33:15  12  	    ELSE trend END trend
20:33:15  13  ,cm4
20:33:15  14  ,cm6
20:33:15  15  ,cm8
20:33:15  16  ,cm10
20:33:15  17  ,cm12
20:33:15  18  ,cm14
20:33:15  19  ,cm16
20:33:15  20  ,cm18
20:33:15  21  --
20:33:15  22  ,ca4
20:33:15  23  ,ca6
20:33:15  24  ,ca8
20:33:15  25  ,ca10
20:33:15  26  ,ca12
20:33:15  27  ,ca14
20:33:15  28  ,ca16
20:33:15  29  ,ca18
20:33:15  30  --
20:33:15  31  ,cx4
20:33:15  32  ,cx6
20:33:15  33  ,cx8
20:33:15  34  ,cx10
20:33:15  35  ,cx12
20:33:15  36  ,cx14
20:33:15  37  ,cx16
20:33:15  38  ,cx18
20:33:15  39  --
20:33:15  40  ,crr4
20:33:15  41  ,crr6
20:33:15  42  ,crr8
20:33:15  43  ,crr10
20:33:15  44  ,crr12
20:33:15  45  ,crr14
20:33:15  46  ,crr16
20:33:15  47  ,crr18
20:33:15  48  --
20:33:15  49  ,hh
20:33:15  50  ,d
20:33:15  51  ,w
20:33:15  52  ,mpm
20:33:15  53  ,mph
20:33:15  54  FROM svm6122
20:33:15  55  ORDER BY ydate
20:33:15  56  /

Table created.

Elapsed: 00:00:00.37
20:33:16 SQL> 
20:33:16 SQL> -- rpt
20:33:16 SQL> 
20:33:16 SQL> SELECT
20:33:16   2  pair
20:33:16   3  ,trend
20:33:16   4  ,gatt
20:33:16   5  ,COUNT(pair)
20:33:16   6  ,AVG(g6)
20:33:16   7  FROM svm6142
20:33:16   8  GROUP BY pair,trend,gatt
20:33:16   9  ORDER BY pair,trend,gatt
20:33:16  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6418 -.00262336
gbp_usd 	-1 up	      3579 .004338911
gbp_usd 	-1		49
gbp_usd 	 1 nup	      6284 -.00264956
gbp_usd 	 1 up	      3456 .004524374
gbp_usd 	 1		23

6 rows selected.

Elapsed: 00:00:00.04
20:33:16 SQL> 
20:33:16 SQL> 
20:33:16 SQL> -- Derive NTILE based params:
20:33:16 SQL> 
20:33:16 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.21
20:33:16 SQL> CREATE TABLE svm6162 COMPRESS AS
20:33:16   2  SELECT
20:33:16   3  pair
20:33:16   4  ,ydate
20:33:16   5  ,prdate
20:33:16   6  ,clse
20:33:16   7  ,g6
20:33:16   8  ,gatt
20:33:16   9  ,gattn
20:33:16  10  ,trend
20:33:16  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
20:33:16  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
20:33:16  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
20:33:16  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
20:33:16  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
20:33:16  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
20:33:16  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
20:33:16  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
20:33:16  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
20:33:16  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
20:33:16  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
20:33:16  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
20:33:16  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
20:33:16  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
20:33:16  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
20:33:16  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
20:33:16  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
20:33:16  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
20:33:16  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
20:33:16  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
20:33:16  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
20:33:16  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
20:33:16  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
20:33:16  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
20:33:16  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
20:33:16  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
20:33:16  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
20:33:16  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
20:33:16  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
20:33:16  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
20:33:16  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
20:33:16  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
20:33:16  43  ,hh  att32
20:33:16  44  ,d   att33
20:33:16  45  ,w   att34
20:33:16  46  ,mpm att35
20:33:16  47  ,mph att36
20:33:16  48  ,trend att37
20:33:16  49  FROM svm6142
20:33:16  50  ORDER BY ydate
20:33:16  51  /

Table created.

Elapsed: 00:00:04.90
20:33:21 SQL> 
20:33:21 SQL> -- rpt
20:33:21 SQL> 
20:33:21 SQL> SELECT
20:33:21   2  pair
20:33:21   3  ,trend
20:33:21   4  ,gatt
20:33:21   5  ,COUNT(pair)
20:33:21   6  ,AVG(g6)
20:33:21   7  FROM svm6162
20:33:21   8  GROUP BY pair,trend,gatt
20:33:21   9  ORDER BY pair,trend,gatt
20:33:21  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6418 -.00262336
gbp_usd 	-1 up	      3579 .004338911
gbp_usd 	-1		49
gbp_usd 	 1 nup	      6284 -.00264956
gbp_usd 	 1 up	      3456 .004524374
gbp_usd 	 1		23

6 rows selected.

Elapsed: 00:00:00.02
20:33:21 SQL> 
20:33:21 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.16
20:33:21 SQL> CREATE TABLE modsrc COMPRESS AS
20:33:21   2  SELECT
20:33:21   3  pair
20:33:21   4  ,ydate
20:33:21   5  ,prdate
20:33:21   6  ,trend
20:33:21   7  ,g6
20:33:21   8  ,gatt
20:33:21   9  ,gattn
20:33:21  10  FROM svm6162
20:33:21  11  /

Table created.

Elapsed: 00:00:00.10
20:33:21 SQL> 
20:33:21 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.29
20:33:21 SQL> 
20:33:21 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
20:33:21 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
20:33:21   2  SELECT
20:33:21   3  ydate
20:33:21   4  ,trend gbp_trend
20:33:21   5  ,g6    gbp_g6
20:33:21   6  ,gatt  gbp_gatt
20:33:21   7  ,gattn gbp_gattn
20:33:21   8  FROM modsrc
20:33:21   9  /

Table created.

Elapsed: 00:00:00.06
20:33:22 SQL> 
20:33:22 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
20:33:22 SQL> 
20:33:22 SQL> -- I need a copy of the attributes:
20:33:22 SQL> 
20:33:22 SQL> 
20:33:22 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.14
20:33:22 SQL> CREATE TABLE gbp_att COMPRESS AS
20:33:22   2  SELECT
20:33:22   3  ydate
20:33:22   4  ,att00 gbp_att00
20:33:22   5  ,att01 gbp_att01
20:33:22   6  ,att02 gbp_att02
20:33:22   7  ,att03 gbp_att03
20:33:22   8  ,att04 gbp_att04
20:33:22   9  ,att05 gbp_att05
20:33:22  10  ,att06 gbp_att06
20:33:22  11  ,att07 gbp_att07
20:33:22  12  ,att08 gbp_att08
20:33:22  13  ,att09 gbp_att09
20:33:22  14  ,att10 gbp_att10
20:33:22  15  ,att11 gbp_att11
20:33:22  16  ,att12 gbp_att12
20:33:22  17  ,att13 gbp_att13
20:33:22  18  ,att14 gbp_att14
20:33:22  19  ,att15 gbp_att15
20:33:22  20  ,att16 gbp_att16
20:33:22  21  ,att17 gbp_att17
20:33:22  22  ,att18 gbp_att18
20:33:22  23  ,att19 gbp_att19
20:33:22  24  ,att20 gbp_att20
20:33:22  25  ,att21 gbp_att21
20:33:22  26  ,att22 gbp_att22
20:33:22  27  ,att23 gbp_att23
20:33:22  28  ,att24 gbp_att24
20:33:22  29  ,att25 gbp_att25
20:33:22  30  ,att26 gbp_att26
20:33:22  31  ,att27 gbp_att27
20:33:22  32  ,att28 gbp_att28
20:33:22  33  ,att29 gbp_att29
20:33:22  34  ,att30 gbp_att30
20:33:22  35  ,att31 gbp_att31
20:33:22  36  ,att32 gbp_att32
20:33:22  37  ,att33 gbp_att33
20:33:22  38  ,att34 gbp_att34
20:33:22  39  ,att35 gbp_att35
20:33:22  40  ,att36 gbp_att36
20:33:22  41  ,att37 gbp_att37
20:33:22  42  FROM svm6162
20:33:22  43  /

Table created.

Elapsed: 00:00:00.21
20:33:22 SQL> 
20:33:22 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
20:33:23 SQL> 
20:33:23 SQL> -- rpt
20:33:23 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.86
20:33:23 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.00
20:33:23 SQL> 
20:33:23 SQL> --
20:33:23 SQL> -- jpy610.sql
20:33:23 SQL> --
20:33:23 SQL> 
20:33:23 SQL> -- Creates views and tables for backtesting a forex SVM strategy
20:33:23 SQL> 
20:33:23 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.43
20:33:24 SQL> 
20:33:24 SQL> -- I created di5min here:
20:33:24 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
20:33:24 SQL> 
20:33:24 SQL> CREATE OR REPLACE VIEW svm6102 AS
20:33:24   2  SELECT
20:33:24   3  pair
20:33:24   4  ,ydate
20:33:24   5  ,prdate
20:33:24   6  ,rownum rnum -- acts as t in my time-series
20:33:24   7  ,clse
20:33:24   8  -- Derive a bunch of attributes from clse, the latest price:
20:33:24   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
20:33:24  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
20:33:24  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
20:33:24  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
20:33:24  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
20:33:24  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
20:33:24  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
20:33:24  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
20:33:24  17  --
20:33:24  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
20:33:24  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
20:33:24  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
20:33:24  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
20:33:24  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
20:33:24  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
20:33:24  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
20:33:24  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
20:33:24  26  --
20:33:24  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
20:33:24  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
20:33:24  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
20:33:24  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
20:33:24  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
20:33:24  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
20:33:24  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
20:33:24  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
20:33:24  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
20:33:24  36  FROM di5min WHERE pair LIKE'%jpy%'
20:33:24  37  AND ydate > sysdate - 95
20:33:24  38  ORDER BY ydate
20:33:24  39  /

View created.

Elapsed: 00:00:00.05
20:33:24 SQL> 
20:33:24 SQL> -- rpt
20:33:24 SQL> 
20:33:24 SQL> SELECT
20:33:24   2  pair
20:33:24   3  ,COUNT(pair)
20:33:24   4  ,MIN(clse),MAX(clse)
20:33:24   5  ,MIN(avg6),MAX(avg6)
20:33:24   6  ,MIN(ydate),MAX(ydate)
20:33:24   7  FROM svm6102
20:33:24   8  GROUP BY pair
20:33:24   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19808	 80.25	   84.485 80.3595205 84.3105479 2010-10-03 20:55:01 2011-01-06 20:30:00

Elapsed: 00:00:00.97
20:33:25 SQL> 
20:33:25 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
20:33:25 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.29
20:33:25 SQL> CREATE TABLE svm6122 COMPRESS AS
20:33:25   2  SELECT
20:33:25   3  pair
20:33:25   4  ,ydate
20:33:25   5  ,prdate
20:33:25   6  ,clse
20:33:25   7  -- g6 is important. I want to predict g6:
20:33:25   8  ,ld6 - clse g6
20:33:25   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
20:33:25  10  -- I want more attributes from the ones I derived above:
20:33:25  11  -- clse relation to moving-min
20:33:25  12  ,clse-min4  cm4
20:33:25  13  ,clse-min6  cm6
20:33:25  14  ,clse-min8  cm8
20:33:25  15  ,clse-min10 cm10
20:33:25  16  ,clse-min12 cm12
20:33:25  17  ,clse-min14 cm14
20:33:25  18  ,clse-min16 cm16
20:33:25  19  ,clse-min18 cm18
20:33:25  20  -- clse relation to moving-avg
20:33:25  21  ,clse-avg4  ca4
20:33:25  22  ,clse-avg6  ca6
20:33:25  23  ,clse-avg8  ca8
20:33:25  24  ,clse-avg10 ca10
20:33:25  25  ,clse-avg12 ca12
20:33:25  26  ,clse-avg14 ca14
20:33:25  27  ,clse-avg16 ca16
20:33:25  28  ,clse-avg18 ca18
20:33:25  29  -- clse relation to moving-max
20:33:25  30  ,clse-max4  cx4
20:33:25  31  ,clse-max6  cx6
20:33:25  32  ,clse-max8  cx8
20:33:25  33  ,clse-max10 cx10
20:33:25  34  ,clse-max12 cx12
20:33:25  35  ,clse-max14 cx14
20:33:25  36  ,clse-max16 cx16
20:33:25  37  ,clse-max18 cx18
20:33:25  38  -- Derive more attributes.
20:33:25  39  -- I want to use CORR() here to help SVM see the shape of the series.
20:33:25  40  -- But COVAR_POP is more stable:
20:33:25  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
20:33:25  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
20:33:25  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
20:33:25  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
20:33:25  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
20:33:25  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
20:33:25  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
20:33:25  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
20:33:25  49  -- Derive date related attributes:
20:33:25  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
20:33:25  51  ,0+TO_CHAR(ydate,'D')d
20:33:25  52  ,0+TO_CHAR(ydate,'W')w
20:33:25  53  -- mpm stands for minutes-past-midnight:
20:33:25  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
20:33:25  55  -- mph stands for minutes-past-hour:
20:33:25  56  ,0+TO_CHAR(ydate,'MI')mph
20:33:25  57  FROM svm6102
20:33:25  58  ORDER BY ydate
20:33:25  59  /

Table created.

Elapsed: 00:00:02.16
20:33:27 SQL> 
20:33:27 SQL> -- rpt
20:33:27 SQL> 
20:33:27 SQL> SELECT
20:33:27   2  pair
20:33:27   3  ,COUNT(pair)
20:33:27   4  ,MIN(clse),MAX(clse)
20:33:27   5  ,MIN(ydate),MAX(ydate)
20:33:27   6  FROM svm6122
20:33:27   7  GROUP BY pair
20:33:27   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19808	 80.25	   84.485 2010-10-03 20:55:01 2011-01-06 20:30:00

Elapsed: 00:00:00.06
20:33:27 SQL> 
20:33:27 SQL> -- Prepare for derivation of NTILE based params:
20:33:27 SQL> 
20:33:27 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.36
20:33:28 SQL> CREATE TABLE svm6142 COMPRESS AS
20:33:28   2  SELECT
20:33:28   3  pair
20:33:28   4  ,ydate
20:33:28   5  ,prdate
20:33:28   6  ,clse
20:33:28   7  ,g6
20:33:28   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
20:33:28   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
20:33:28  10  ,CASE WHEN trend IS NULL THEN 1
20:33:28  11  	    WHEN trend =0      THEN 1
20:33:28  12  	    ELSE trend END trend
20:33:28  13  ,cm4
20:33:28  14  ,cm6
20:33:28  15  ,cm8
20:33:28  16  ,cm10
20:33:28  17  ,cm12
20:33:28  18  ,cm14
20:33:28  19  ,cm16
20:33:28  20  ,cm18
20:33:28  21  --
20:33:28  22  ,ca4
20:33:28  23  ,ca6
20:33:28  24  ,ca8
20:33:28  25  ,ca10
20:33:28  26  ,ca12
20:33:28  27  ,ca14
20:33:28  28  ,ca16
20:33:28  29  ,ca18
20:33:28  30  --
20:33:28  31  ,cx4
20:33:28  32  ,cx6
20:33:28  33  ,cx8
20:33:28  34  ,cx10
20:33:28  35  ,cx12
20:33:28  36  ,cx14
20:33:28  37  ,cx16
20:33:28  38  ,cx18
20:33:28  39  --
20:33:28  40  ,crr4
20:33:28  41  ,crr6
20:33:28  42  ,crr8
20:33:28  43  ,crr10
20:33:28  44  ,crr12
20:33:28  45  ,crr14
20:33:28  46  ,crr16
20:33:28  47  ,crr18
20:33:28  48  --
20:33:28  49  ,hh
20:33:28  50  ,d
20:33:28  51  ,w
20:33:28  52  ,mpm
20:33:28  53  ,mph
20:33:28  54  FROM svm6122
20:33:28  55  ORDER BY ydate
20:33:28  56  /

Table created.

Elapsed: 00:00:00.42
20:33:28 SQL> 
20:33:28 SQL> -- rpt
20:33:28 SQL> 
20:33:28 SQL> SELECT
20:33:28   2  pair
20:33:28   3  ,trend
20:33:28   4  ,gatt
20:33:28   5  ,COUNT(pair)
20:33:28   6  ,AVG(g6)
20:33:28   7  FROM svm6142
20:33:28   8  GROUP BY pair,trend,gatt
20:33:28   9  ORDER BY pair,trend,gatt
20:33:28  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5184 -.16553339
usd_jpy 	-1 up	      4909 .169583197
usd_jpy 	-1		 5
usd_jpy 	 1 nup	      5077 -.15499158
usd_jpy 	 1 up	      4566 .174386702
usd_jpy 	 1		67

6 rows selected.

Elapsed: 00:00:00.06
20:33:28 SQL> 
20:33:28 SQL> 
20:33:28 SQL> -- Derive NTILE based params:
20:33:28 SQL> 
20:33:28 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.22
20:33:28 SQL> CREATE TABLE svm6162 COMPRESS AS
20:33:28   2  SELECT
20:33:28   3  pair
20:33:28   4  ,ydate
20:33:28   5  ,prdate
20:33:28   6  ,clse
20:33:28   7  ,g6
20:33:28   8  ,gatt
20:33:28   9  ,gattn
20:33:28  10  ,trend
20:33:28  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
20:33:28  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
20:33:28  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
20:33:28  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
20:33:28  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
20:33:28  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
20:33:28  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
20:33:28  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
20:33:28  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
20:33:28  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
20:33:28  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
20:33:28  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
20:33:28  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
20:33:28  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
20:33:28  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
20:33:28  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
20:33:28  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
20:33:28  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
20:33:28  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
20:33:28  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
20:33:28  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
20:33:28  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
20:33:28  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
20:33:28  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
20:33:28  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
20:33:28  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
20:33:28  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
20:33:28  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
20:33:28  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
20:33:28  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
20:33:28  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
20:33:28  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
20:33:28  43  ,hh  att32
20:33:28  44  ,d   att33
20:33:28  45  ,w   att34
20:33:28  46  ,mpm att35
20:33:28  47  ,mph att36
20:33:28  48  ,trend att37
20:33:28  49  FROM svm6142
20:33:28  50  ORDER BY ydate
20:33:28  51  /

Table created.

Elapsed: 00:00:05.29
20:33:34 SQL> 
20:33:34 SQL> -- rpt
20:33:34 SQL> 
20:33:34 SQL> SELECT
20:33:34   2  pair
20:33:34   3  ,trend
20:33:34   4  ,gatt
20:33:34   5  ,COUNT(pair)
20:33:34   6  ,AVG(g6)
20:33:34   7  FROM svm6162
20:33:34   8  GROUP BY pair,trend,gatt
20:33:34   9  ORDER BY pair,trend,gatt
20:33:34  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5184 -.16553339
usd_jpy 	-1 up	      4909 .169583197
usd_jpy 	-1		 5
usd_jpy 	 1 nup	      5077 -.15499158
usd_jpy 	 1 up	      4566 .174386702
usd_jpy 	 1		67

6 rows selected.

Elapsed: 00:00:00.03
20:33:34 SQL> 
20:33:34 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
20:33:34 SQL> CREATE TABLE modsrc COMPRESS AS
20:33:34   2  SELECT
20:33:34   3  pair
20:33:34   4  ,ydate
20:33:34   5  ,prdate
20:33:34   6  ,trend
20:33:34   7  ,g6
20:33:34   8  ,gatt
20:33:34   9  ,gattn
20:33:34  10  FROM svm6162
20:33:34  11  /

Table created.

Elapsed: 00:00:00.09
20:33:34 SQL> 
20:33:34 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
20:33:34 SQL> 
20:33:34 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.09
20:33:34 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
20:33:34   2  SELECT
20:33:34   3  ydate
20:33:34   4  ,trend jpy_trend
20:33:34   5  ,g6    jpy_g6
20:33:34   6  ,gatt  jpy_gatt
20:33:34   7  ,gattn jpy_gattn
20:33:34   8  FROM modsrc
20:33:34   9  /

Table created.

Elapsed: 00:00:00.07
20:33:34 SQL> 
20:33:34 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
20:33:35 SQL> 
20:33:35 SQL> -- I need a copy of the attributes:
20:33:35 SQL> 
20:33:35 SQL> 
20:33:35 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.04
20:33:35 SQL> CREATE TABLE jpy_att COMPRESS AS
20:33:35   2  SELECT
20:33:35   3  ydate
20:33:35   4  ,att00 jpy_att00
20:33:35   5  ,att01 jpy_att01
20:33:35   6  ,att02 jpy_att02
20:33:35   7  ,att03 jpy_att03
20:33:35   8  ,att04 jpy_att04
20:33:35   9  ,att05 jpy_att05
20:33:35  10  ,att06 jpy_att06
20:33:35  11  ,att07 jpy_att07
20:33:35  12  ,att08 jpy_att08
20:33:35  13  ,att09 jpy_att09
20:33:35  14  ,att10 jpy_att10
20:33:35  15  ,att11 jpy_att11
20:33:35  16  ,att12 jpy_att12
20:33:35  17  ,att13 jpy_att13
20:33:35  18  ,att14 jpy_att14
20:33:35  19  ,att15 jpy_att15
20:33:35  20  ,att16 jpy_att16
20:33:35  21  ,att17 jpy_att17
20:33:35  22  ,att18 jpy_att18
20:33:35  23  ,att19 jpy_att19
20:33:35  24  ,att20 jpy_att20
20:33:35  25  ,att21 jpy_att21
20:33:35  26  ,att22 jpy_att22
20:33:35  27  ,att23 jpy_att23
20:33:35  28  ,att24 jpy_att24
20:33:35  29  ,att25 jpy_att25
20:33:35  30  ,att26 jpy_att26
20:33:35  31  ,att27 jpy_att27
20:33:35  32  ,att28 jpy_att28
20:33:35  33  ,att29 jpy_att29
20:33:35  34  ,att30 jpy_att30
20:33:35  35  ,att31 jpy_att31
20:33:35  36  ,att32 jpy_att32
20:33:35  37  ,att33 jpy_att33
20:33:35  38  ,att34 jpy_att34
20:33:35  39  ,att35 jpy_att35
20:33:35  40  ,att36 jpy_att36
20:33:35  41  ,att37 jpy_att37
20:33:35  42  FROM svm6162
20:33:35  43  /

Table created.

Elapsed: 00:00:00.21
20:33:35 SQL> 
20:33:35 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
20:33:35 SQL> 
20:33:35 SQL> -- rpt
20:33:35 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.91
20:33:36 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.01
20:33:36 SQL> 
20:33:36 SQL> --
20:33:36 SQL> -- cad610.sql
20:33:36 SQL> --
20:33:36 SQL> 
20:33:36 SQL> -- Creates views and tables for backtesting a forex SVM strategy
20:33:36 SQL> 
20:33:36 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.59
20:33:37 SQL> 
20:33:37 SQL> -- I created di5min here:
20:33:37 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
20:33:37 SQL> 
20:33:37 SQL> CREATE OR REPLACE VIEW svm6102 AS
20:33:37   2  SELECT
20:33:37   3  pair
20:33:37   4  ,ydate
20:33:37   5  ,prdate
20:33:37   6  ,rownum rnum -- acts as t in my time-series
20:33:37   7  ,clse
20:33:37   8  -- Derive a bunch of attributes from clse, the latest price:
20:33:37   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
20:33:37  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
20:33:37  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
20:33:37  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
20:33:37  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
20:33:37  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
20:33:37  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
20:33:37  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
20:33:37  17  --
20:33:37  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
20:33:37  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
20:33:37  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
20:33:37  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
20:33:37  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
20:33:37  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
20:33:37  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
20:33:37  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
20:33:37  26  --
20:33:37  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
20:33:37  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
20:33:37  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
20:33:37  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
20:33:37  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
20:33:37  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
20:33:37  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
20:33:37  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
20:33:37  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
20:33:37  36  FROM di5min WHERE pair LIKE'%cad%'
20:33:37  37  AND ydate > sysdate - 95
20:33:37  38  ORDER BY ydate
20:33:37  39  /

View created.

Elapsed: 00:00:00.04
20:33:37 SQL> 
20:33:37 SQL> -- rpt
20:33:37 SQL> 
20:33:37 SQL> SELECT
20:33:37   2  pair
20:33:37   3  ,COUNT(pair)
20:33:37   4  ,MIN(clse),MAX(clse)
20:33:37   5  ,MIN(avg6),MAX(avg6)
20:33:37   6  ,MIN(ydate),MAX(ydate)
20:33:37   7  FROM svm6102
20:33:37   8  GROUP BY pair
20:33:37   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19808    .988925	   1.0355  .99060278 1.03282877 2010-10-03 20:55:01 2011-01-06 20:30:00

Elapsed: 00:00:00.85
20:33:38 SQL> 
20:33:38 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
20:33:38 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.27
20:33:38 SQL> CREATE TABLE svm6122 COMPRESS AS
20:33:38   2  SELECT
20:33:38   3  pair
20:33:38   4  ,ydate
20:33:38   5  ,prdate
20:33:38   6  ,clse
20:33:38   7  -- g6 is important. I want to predict g6:
20:33:38   8  ,ld6 - clse g6
20:33:38   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
20:33:38  10  -- I want more attributes from the ones I derived above:
20:33:38  11  -- clse relation to moving-min
20:33:38  12  ,clse-min4  cm4
20:33:38  13  ,clse-min6  cm6
20:33:38  14  ,clse-min8  cm8
20:33:38  15  ,clse-min10 cm10
20:33:38  16  ,clse-min12 cm12
20:33:38  17  ,clse-min14 cm14
20:33:38  18  ,clse-min16 cm16
20:33:38  19  ,clse-min18 cm18
20:33:38  20  -- clse relation to moving-avg
20:33:38  21  ,clse-avg4  ca4
20:33:38  22  ,clse-avg6  ca6
20:33:38  23  ,clse-avg8  ca8
20:33:38  24  ,clse-avg10 ca10
20:33:38  25  ,clse-avg12 ca12
20:33:38  26  ,clse-avg14 ca14
20:33:38  27  ,clse-avg16 ca16
20:33:38  28  ,clse-avg18 ca18
20:33:38  29  -- clse relation to moving-max
20:33:38  30  ,clse-max4  cx4
20:33:38  31  ,clse-max6  cx6
20:33:38  32  ,clse-max8  cx8
20:33:38  33  ,clse-max10 cx10
20:33:38  34  ,clse-max12 cx12
20:33:38  35  ,clse-max14 cx14
20:33:38  36  ,clse-max16 cx16
20:33:38  37  ,clse-max18 cx18
20:33:38  38  -- Derive more attributes.
20:33:38  39  -- I want to use CORR() here to help SVM see the shape of the series.
20:33:38  40  -- But COVAR_POP is more stable:
20:33:38  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
20:33:38  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
20:33:38  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
20:33:38  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
20:33:38  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
20:33:38  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
20:33:38  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
20:33:38  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
20:33:38  49  -- Derive date related attributes:
20:33:38  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
20:33:38  51  ,0+TO_CHAR(ydate,'D')d
20:33:38  52  ,0+TO_CHAR(ydate,'W')w
20:33:38  53  -- mpm stands for minutes-past-midnight:
20:33:38  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
20:33:38  55  -- mph stands for minutes-past-hour:
20:33:38  56  ,0+TO_CHAR(ydate,'MI')mph
20:33:38  57  FROM svm6102
20:33:38  58  ORDER BY ydate
20:33:38  59  /

Table created.

Elapsed: 00:00:02.11
20:33:40 SQL> 
20:33:40 SQL> -- rpt
20:33:40 SQL> 
20:33:40 SQL> SELECT
20:33:40   2  pair
20:33:40   3  ,COUNT(pair)
20:33:40   4  ,MIN(clse),MAX(clse)
20:33:40   5  ,MIN(ydate),MAX(ydate)
20:33:40   6  FROM svm6122
20:33:40   7  GROUP BY pair
20:33:40   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19808    .988925	   1.0355 2010-10-03 20:55:01 2011-01-06 20:30:00

Elapsed: 00:00:00.06
20:33:40 SQL> 
20:33:40 SQL> -- Prepare for derivation of NTILE based params:
20:33:40 SQL> 
20:33:40 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.30
20:33:40 SQL> CREATE TABLE svm6142 COMPRESS AS
20:33:40   2  SELECT
20:33:40   3  pair
20:33:40   4  ,ydate
20:33:40   5  ,prdate
20:33:40   6  ,clse
20:33:40   7  ,g6
20:33:40   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
20:33:40   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
20:33:40  10  ,CASE WHEN trend IS NULL THEN 1
20:33:40  11  	    WHEN trend =0      THEN 1
20:33:40  12  	    ELSE trend END trend
20:33:40  13  ,cm4
20:33:40  14  ,cm6
20:33:40  15  ,cm8
20:33:40  16  ,cm10
20:33:40  17  ,cm12
20:33:40  18  ,cm14
20:33:40  19  ,cm16
20:33:40  20  ,cm18
20:33:40  21  --
20:33:40  22  ,ca4
20:33:40  23  ,ca6
20:33:40  24  ,ca8
20:33:40  25  ,ca10
20:33:40  26  ,ca12
20:33:40  27  ,ca14
20:33:40  28  ,ca16
20:33:40  29  ,ca18
20:33:40  30  --
20:33:40  31  ,cx4
20:33:40  32  ,cx6
20:33:40  33  ,cx8
20:33:40  34  ,cx10
20:33:40  35  ,cx12
20:33:40  36  ,cx14
20:33:40  37  ,cx16
20:33:40  38  ,cx18
20:33:40  39  --
20:33:40  40  ,crr4
20:33:40  41  ,crr6
20:33:40  42  ,crr8
20:33:40  43  ,crr10
20:33:40  44  ,crr12
20:33:40  45  ,crr14
20:33:40  46  ,crr16
20:33:40  47  ,crr18
20:33:40  48  --
20:33:40  49  ,hh
20:33:40  50  ,d
20:33:40  51  ,w
20:33:40  52  ,mpm
20:33:40  53  ,mph
20:33:40  54  FROM svm6122
20:33:40  55  ORDER BY ydate
20:33:40  56  /

Table created.

Elapsed: 00:00:00.37
20:33:41 SQL> 
20:33:41 SQL> -- rpt
20:33:41 SQL> 
20:33:41 SQL> SELECT
20:33:41   2  pair
20:33:41   3  ,trend
20:33:41   4  ,gatt
20:33:41   5  ,COUNT(pair)
20:33:41   6  ,AVG(g6)
20:33:41   7  FROM svm6142
20:33:41   8  GROUP BY pair,trend,gatt
20:33:41   9  ORDER BY pair,trend,gatt
20:33:41  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7320 -.00124132
usd_cad 	-1 up	      3181 .003050314
usd_cad 	 1 nup	      6841 -.00161007
usd_cad 	 1 up	      2394 .003645424
usd_cad 	 1		72

Elapsed: 00:00:00.03
20:33:41 SQL> 
20:33:41 SQL> 
20:33:41 SQL> -- Derive NTILE based params:
20:33:41 SQL> 
20:33:41 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
20:33:41 SQL> CREATE TABLE svm6162 COMPRESS AS
20:33:41   2  SELECT
20:33:41   3  pair
20:33:41   4  ,ydate
20:33:41   5  ,prdate
20:33:41   6  ,clse
20:33:41   7  ,g6
20:33:41   8  ,gatt
20:33:41   9  ,gattn
20:33:41  10  ,trend
20:33:41  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
20:33:41  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
20:33:41  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
20:33:41  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
20:33:41  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
20:33:41  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
20:33:41  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
20:33:41  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
20:33:41  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
20:33:41  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
20:33:41  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
20:33:41  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
20:33:41  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
20:33:41  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
20:33:41  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
20:33:41  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
20:33:41  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
20:33:41  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
20:33:41  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
20:33:41  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
20:33:41  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
20:33:41  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
20:33:41  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
20:33:41  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
20:33:41  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
20:33:41  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
20:33:41  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
20:33:41  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
20:33:41  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
20:33:41  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
20:33:41  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
20:33:41  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
20:33:41  43  ,hh  att32
20:33:41  44  ,d   att33
20:33:41  45  ,w   att34
20:33:41  46  ,mpm att35
20:33:41  47  ,mph att36
20:33:41  48  ,trend att37
20:33:41  49  FROM svm6142
20:33:41  50  ORDER BY ydate
20:33:41  51  /

Table created.

Elapsed: 00:00:04.85
20:33:46 SQL> 
20:33:46 SQL> -- rpt
20:33:46 SQL> 
20:33:46 SQL> SELECT
20:33:46   2  pair
20:33:46   3  ,trend
20:33:46   4  ,gatt
20:33:46   5  ,COUNT(pair)
20:33:46   6  ,AVG(g6)
20:33:46   7  FROM svm6162
20:33:46   8  GROUP BY pair,trend,gatt
20:33:46   9  ORDER BY pair,trend,gatt
20:33:46  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7320 -.00124132
usd_cad 	-1 up	      3181 .003050314
usd_cad 	 1 nup	      6841 -.00161007
usd_cad 	 1 up	      2394 .003645424
usd_cad 	 1		72

Elapsed: 00:00:00.03
20:33:46 SQL> 
20:33:46 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.10
20:33:46 SQL> CREATE TABLE modsrc COMPRESS AS
20:33:46   2  SELECT
20:33:46   3  pair
20:33:46   4  ,ydate
20:33:46   5  ,prdate
20:33:46   6  ,trend
20:33:46   7  ,g6
20:33:46   8  ,gatt
20:33:46   9  ,gattn
20:33:46  10  FROM svm6162
20:33:46  11  /

Table created.

Elapsed: 00:00:00.10
20:33:46 SQL> 
20:33:46 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
20:33:46 SQL> 
20:33:46 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
20:33:46 SQL> CREATE TABLE cad_ms610 COMPRESS AS
20:33:46   2  SELECT
20:33:46   3  ydate
20:33:46   4  ,trend cad_trend
20:33:46   5  ,g6    cad_g6
20:33:46   6  ,gatt  cad_gatt
20:33:46   7  ,gattn cad_gattn
20:33:46   8  FROM modsrc
20:33:46   9  /

Table created.

Elapsed: 00:00:00.06
20:33:46 SQL> 
20:33:46 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
20:33:47 SQL> 
20:33:47 SQL> -- I need a copy of the attributes:
20:33:47 SQL> 
20:33:47 SQL> 
20:33:47 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.20
20:33:47 SQL> CREATE TABLE cad_att COMPRESS AS
20:33:47   2  SELECT
20:33:47   3  ydate
20:33:47   4  ,att00 cad_att00
20:33:47   5  ,att01 cad_att01
20:33:47   6  ,att02 cad_att02
20:33:47   7  ,att03 cad_att03
20:33:47   8  ,att04 cad_att04
20:33:47   9  ,att05 cad_att05
20:33:47  10  ,att06 cad_att06
20:33:47  11  ,att07 cad_att07
20:33:47  12  ,att08 cad_att08
20:33:47  13  ,att09 cad_att09
20:33:47  14  ,att10 cad_att10
20:33:47  15  ,att11 cad_att11
20:33:47  16  ,att12 cad_att12
20:33:47  17  ,att13 cad_att13
20:33:47  18  ,att14 cad_att14
20:33:47  19  ,att15 cad_att15
20:33:47  20  ,att16 cad_att16
20:33:47  21  ,att17 cad_att17
20:33:47  22  ,att18 cad_att18
20:33:47  23  ,att19 cad_att19
20:33:47  24  ,att20 cad_att20
20:33:47  25  ,att21 cad_att21
20:33:47  26  ,att22 cad_att22
20:33:47  27  ,att23 cad_att23
20:33:47  28  ,att24 cad_att24
20:33:47  29  ,att25 cad_att25
20:33:47  30  ,att26 cad_att26
20:33:47  31  ,att27 cad_att27
20:33:47  32  ,att28 cad_att28
20:33:47  33  ,att29 cad_att29
20:33:47  34  ,att30 cad_att30
20:33:47  35  ,att31 cad_att31
20:33:47  36  ,att32 cad_att32
20:33:47  37  ,att33 cad_att33
20:33:47  38  ,att34 cad_att34
20:33:47  39  ,att35 cad_att35
20:33:47  40  ,att36 cad_att36
20:33:47  41  ,att37 cad_att37
20:33:47  42  FROM svm6162
20:33:47  43  /

Table created.

Elapsed: 00:00:00.16
20:33:47 SQL> 
20:33:47 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
20:33:47 SQL> 
20:33:47 SQL> -- rpt
20:33:47 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.85
20:33:48 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.00
20:33:48 SQL> 
20:33:48 SQL> --
20:33:48 SQL> -- chf610.sql
20:33:48 SQL> --
20:33:48 SQL> 
20:33:48 SQL> -- Creates views and tables for backtesting a forex SVM strategy
20:33:48 SQL> 
20:33:48 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.36
20:33:49 SQL> 
20:33:49 SQL> -- I created di5min here:
20:33:49 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
20:33:49 SQL> 
20:33:49 SQL> CREATE OR REPLACE VIEW svm6102 AS
20:33:49   2  SELECT
20:33:49   3  pair
20:33:49   4  ,ydate
20:33:49   5  ,prdate
20:33:49   6  ,rownum rnum -- acts as t in my time-series
20:33:49   7  ,clse
20:33:49   8  -- Derive a bunch of attributes from clse, the latest price:
20:33:49   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
20:33:49  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
20:33:49  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
20:33:49  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
20:33:49  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
20:33:49  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
20:33:49  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
20:33:49  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
20:33:49  17  --
20:33:49  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
20:33:49  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
20:33:49  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
20:33:49  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
20:33:49  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
20:33:49  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
20:33:49  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
20:33:49  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
20:33:49  26  --
20:33:49  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
20:33:49  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
20:33:49  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
20:33:49  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
20:33:49  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
20:33:49  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
20:33:49  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
20:33:49  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
20:33:49  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
20:33:49  36  FROM di5min WHERE pair LIKE'%chf%'
20:33:49  37  AND ydate > sysdate - 95
20:33:49  38  ORDER BY ydate
20:33:49  39  /

View created.

Elapsed: 00:00:00.05
20:33:49 SQL> 
20:33:49 SQL> -- rpt
20:33:49 SQL> 
20:33:49 SQL> SELECT
20:33:49   2  pair
20:33:49   3  ,COUNT(pair)
20:33:49   4  ,MIN(clse),MAX(clse)
20:33:49   5  ,MIN(avg6),MAX(avg6)
20:33:49   6  ,MIN(ydate),MAX(ydate)
20:33:49   7  FROM svm6102
20:33:49   8  GROUP BY pair
20:33:49   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19811    .931675	  1.00635 .933255442 1.00498151 2010-10-03 20:55:01 2011-01-06 20:30:00

Elapsed: 00:00:00.86
20:33:49 SQL> 
20:33:49 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
20:33:49 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
20:33:50 SQL> CREATE TABLE svm6122 COMPRESS AS
20:33:50   2  SELECT
20:33:50   3  pair
20:33:50   4  ,ydate
20:33:50   5  ,prdate
20:33:50   6  ,clse
20:33:50   7  -- g6 is important. I want to predict g6:
20:33:50   8  ,ld6 - clse g6
20:33:50   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
20:33:50  10  -- I want more attributes from the ones I derived above:
20:33:50  11  -- clse relation to moving-min
20:33:50  12  ,clse-min4  cm4
20:33:50  13  ,clse-min6  cm6
20:33:50  14  ,clse-min8  cm8
20:33:50  15  ,clse-min10 cm10
20:33:50  16  ,clse-min12 cm12
20:33:50  17  ,clse-min14 cm14
20:33:50  18  ,clse-min16 cm16
20:33:50  19  ,clse-min18 cm18
20:33:50  20  -- clse relation to moving-avg
20:33:50  21  ,clse-avg4  ca4
20:33:50  22  ,clse-avg6  ca6
20:33:50  23  ,clse-avg8  ca8
20:33:50  24  ,clse-avg10 ca10
20:33:50  25  ,clse-avg12 ca12
20:33:50  26  ,clse-avg14 ca14
20:33:50  27  ,clse-avg16 ca16
20:33:50  28  ,clse-avg18 ca18
20:33:50  29  -- clse relation to moving-max
20:33:50  30  ,clse-max4  cx4
20:33:50  31  ,clse-max6  cx6
20:33:50  32  ,clse-max8  cx8
20:33:50  33  ,clse-max10 cx10
20:33:50  34  ,clse-max12 cx12
20:33:50  35  ,clse-max14 cx14
20:33:50  36  ,clse-max16 cx16
20:33:50  37  ,clse-max18 cx18
20:33:50  38  -- Derive more attributes.
20:33:50  39  -- I want to use CORR() here to help SVM see the shape of the series.
20:33:50  40  -- But COVAR_POP is more stable:
20:33:50  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
20:33:50  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
20:33:50  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
20:33:50  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
20:33:50  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
20:33:50  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
20:33:50  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
20:33:50  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
20:33:50  49  -- Derive date related attributes:
20:33:50  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
20:33:50  51  ,0+TO_CHAR(ydate,'D')d
20:33:50  52  ,0+TO_CHAR(ydate,'W')w
20:33:50  53  -- mpm stands for minutes-past-midnight:
20:33:50  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
20:33:50  55  -- mph stands for minutes-past-hour:
20:33:50  56  ,0+TO_CHAR(ydate,'MI')mph
20:33:50  57  FROM svm6102
20:33:50  58  ORDER BY ydate
20:33:50  59  /

Table created.

Elapsed: 00:00:02.09
20:33:52 SQL> 
20:33:52 SQL> -- rpt
20:33:52 SQL> 
20:33:52 SQL> SELECT
20:33:52   2  pair
20:33:52   3  ,COUNT(pair)
20:33:52   4  ,MIN(clse),MAX(clse)
20:33:52   5  ,MIN(ydate),MAX(ydate)
20:33:52   6  FROM svm6122
20:33:52   7  GROUP BY pair
20:33:52   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19811    .931675	  1.00635 2010-10-03 20:55:01 2011-01-06 20:30:00

Elapsed: 00:00:00.04
20:33:52 SQL> 
20:33:52 SQL> -- Prepare for derivation of NTILE based params:
20:33:52 SQL> 
20:33:52 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.24
20:33:52 SQL> CREATE TABLE svm6142 COMPRESS AS
20:33:52   2  SELECT
20:33:52   3  pair
20:33:52   4  ,ydate
20:33:52   5  ,prdate
20:33:52   6  ,clse
20:33:52   7  ,g6
20:33:52   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
20:33:52   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
20:33:52  10  ,CASE WHEN trend IS NULL THEN 1
20:33:52  11  	    WHEN trend =0      THEN 1
20:33:52  12  	    ELSE trend END trend
20:33:52  13  ,cm4
20:33:52  14  ,cm6
20:33:52  15  ,cm8
20:33:52  16  ,cm10
20:33:52  17  ,cm12
20:33:52  18  ,cm14
20:33:52  19  ,cm16
20:33:52  20  ,cm18
20:33:52  21  --
20:33:52  22  ,ca4
20:33:52  23  ,ca6
20:33:52  24  ,ca8
20:33:52  25  ,ca10
20:33:52  26  ,ca12
20:33:52  27  ,ca14
20:33:52  28  ,ca16
20:33:52  29  ,ca18
20:33:52  30  --
20:33:52  31  ,cx4
20:33:52  32  ,cx6
20:33:52  33  ,cx8
20:33:52  34  ,cx10
20:33:52  35  ,cx12
20:33:52  36  ,cx14
20:33:52  37  ,cx16
20:33:52  38  ,cx18
20:33:52  39  --
20:33:52  40  ,crr4
20:33:52  41  ,crr6
20:33:52  42  ,crr8
20:33:52  43  ,crr10
20:33:52  44  ,crr12
20:33:52  45  ,crr14
20:33:52  46  ,crr16
20:33:52  47  ,crr18
20:33:52  48  --
20:33:52  49  ,hh
20:33:52  50  ,d
20:33:52  51  ,w
20:33:52  52  ,mpm
20:33:52  53  ,mph
20:33:52  54  FROM svm6122
20:33:52  55  ORDER BY ydate
20:33:52  56  /

Table created.

Elapsed: 00:00:00.38
20:33:52 SQL> 
20:33:52 SQL> -- rpt
20:33:52 SQL> 
20:33:52 SQL> SELECT
20:33:52   2  pair
20:33:52   3  ,trend
20:33:52   4  ,gatt
20:33:52   5  ,COUNT(pair)
20:33:52   6  ,AVG(g6)
20:33:52   7  FROM svm6142
20:33:52   8  GROUP BY pair,trend,gatt
20:33:52   9  ORDER BY pair,trend,gatt
20:33:52  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7106 -.00198809
usd_chf 	-1 up	      3068  .00382165
usd_chf 	-1		67
usd_chf 	 1 nup	      6584 -.00154438
usd_chf 	 1 up	      2981 .003939435
usd_chf 	 1		 5

6 rows selected.

Elapsed: 00:00:00.04
20:33:53 SQL> 
20:33:53 SQL> 
20:33:53 SQL> -- Derive NTILE based params:
20:33:53 SQL> 
20:33:53 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
20:33:53 SQL> CREATE TABLE svm6162 COMPRESS AS
20:33:53   2  SELECT
20:33:53   3  pair
20:33:53   4  ,ydate
20:33:53   5  ,prdate
20:33:53   6  ,clse
20:33:53   7  ,g6
20:33:53   8  ,gatt
20:33:53   9  ,gattn
20:33:53  10  ,trend
20:33:53  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
20:33:53  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
20:33:53  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
20:33:53  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
20:33:53  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
20:33:53  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
20:33:53  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
20:33:53  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
20:33:53  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
20:33:53  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
20:33:53  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
20:33:53  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
20:33:53  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
20:33:53  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
20:33:53  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
20:33:53  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
20:33:53  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
20:33:53  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
20:33:53  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
20:33:53  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
20:33:53  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
20:33:53  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
20:33:53  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
20:33:53  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
20:33:53  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
20:33:53  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
20:33:53  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
20:33:53  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
20:33:53  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
20:33:53  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
20:33:53  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
20:33:53  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
20:33:53  43  ,hh  att32
20:33:53  44  ,d   att33
20:33:53  45  ,w   att34
20:33:53  46  ,mpm att35
20:33:53  47  ,mph att36
20:33:53  48  ,trend att37
20:33:53  49  FROM svm6142
20:33:53  50  ORDER BY ydate
20:33:53  51  /

Table created.

Elapsed: 00:00:05.26
20:33:58 SQL> 
20:33:58 SQL> -- rpt
20:33:58 SQL> 
20:33:58 SQL> SELECT
20:33:58   2  pair
20:33:58   3  ,trend
20:33:58   4  ,gatt
20:33:58   5  ,COUNT(pair)
20:33:58   6  ,AVG(g6)
20:33:58   7  FROM svm6162
20:33:58   8  GROUP BY pair,trend,gatt
20:33:58   9  ORDER BY pair,trend,gatt
20:33:58  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7106 -.00198809
usd_chf 	-1 up	      3068  .00382165
usd_chf 	-1		67
usd_chf 	 1 nup	      6584 -.00154438
usd_chf 	 1 up	      2981 .003939435
usd_chf 	 1		 5

6 rows selected.

Elapsed: 00:00:00.02
20:33:58 SQL> 
20:33:58 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.87
20:33:59 SQL> CREATE TABLE modsrc COMPRESS AS
20:33:59   2  SELECT
20:33:59   3  pair
20:33:59   4  ,ydate
20:33:59   5  ,prdate
20:33:59   6  ,trend
20:33:59   7  ,g6
20:33:59   8  ,gatt
20:33:59   9  ,gattn
20:33:59  10  FROM svm6162
20:33:59  11  /

Table created.

Elapsed: 00:00:00.09
20:33:59 SQL> 
20:33:59 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
20:33:59 SQL> 
20:33:59 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
20:33:59 SQL> CREATE TABLE chf_ms610 COMPRESS AS
20:33:59   2  SELECT
20:33:59   3  ydate
20:33:59   4  ,trend chf_trend
20:33:59   5  ,g6    chf_g6
20:33:59   6  ,gatt  chf_gatt
20:33:59   7  ,gattn chf_gattn
20:33:59   8  FROM modsrc
20:33:59   9  /

Table created.

Elapsed: 00:00:00.06
20:33:59 SQL> 
20:33:59 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.14
20:33:59 SQL> 
20:33:59 SQL> -- I need a copy of the attributes:
20:33:59 SQL> 
20:33:59 SQL> 
20:33:59 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.05
20:33:59 SQL> CREATE TABLE chf_att COMPRESS AS
20:33:59   2  SELECT
20:33:59   3  ydate
20:33:59   4  ,att00 chf_att00
20:33:59   5  ,att01 chf_att01
20:33:59   6  ,att02 chf_att02
20:33:59   7  ,att03 chf_att03
20:33:59   8  ,att04 chf_att04
20:33:59   9  ,att05 chf_att05
20:33:59  10  ,att06 chf_att06
20:33:59  11  ,att07 chf_att07
20:33:59  12  ,att08 chf_att08
20:33:59  13  ,att09 chf_att09
20:33:59  14  ,att10 chf_att10
20:33:59  15  ,att11 chf_att11
20:33:59  16  ,att12 chf_att12
20:33:59  17  ,att13 chf_att13
20:33:59  18  ,att14 chf_att14
20:33:59  19  ,att15 chf_att15
20:33:59  20  ,att16 chf_att16
20:33:59  21  ,att17 chf_att17
20:33:59  22  ,att18 chf_att18
20:33:59  23  ,att19 chf_att19
20:33:59  24  ,att20 chf_att20
20:33:59  25  ,att21 chf_att21
20:33:59  26  ,att22 chf_att22
20:33:59  27  ,att23 chf_att23
20:33:59  28  ,att24 chf_att24
20:33:59  29  ,att25 chf_att25
20:33:59  30  ,att26 chf_att26
20:33:59  31  ,att27 chf_att27
20:33:59  32  ,att28 chf_att28
20:33:59  33  ,att29 chf_att29
20:33:59  34  ,att30 chf_att30
20:33:59  35  ,att31 chf_att31
20:33:59  36  ,att32 chf_att32
20:33:59  37  ,att33 chf_att33
20:33:59  38  ,att34 chf_att34
20:33:59  39  ,att35 chf_att35
20:33:59  40  ,att36 chf_att36
20:33:59  41  ,att37 chf_att37
20:33:59  42  FROM svm6162
20:33:59  43  /

Table created.

Elapsed: 00:00:00.16
20:34:00 SQL> 
20:34:00 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.51
20:34:00 SQL> 
20:34:00 SQL> -- rpt
20:34:00 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19811

Elapsed: 00:00:00.85
20:34:01 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19811

Elapsed: 00:00:00.01
20:34:01 SQL> 
20:34:01 SQL> --
20:34:01 SQL> -- ech610.sql
20:34:01 SQL> --
20:34:01 SQL> 
20:34:01 SQL> -- Creates views and tables for backtesting a forex SVM strategy
20:34:01 SQL> 
20:34:01 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.52
20:34:01 SQL> 
20:34:01 SQL> -- I created di5min here:
20:34:01 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
20:34:01 SQL> 
20:34:01 SQL> CREATE OR REPLACE VIEW svm6102 AS
20:34:01   2  SELECT
20:34:01   3  pair
20:34:01   4  ,ydate
20:34:01   5  ,prdate
20:34:01   6  ,rownum rnum -- acts as t in my time-series
20:34:01   7  ,clse
20:34:01   8  -- Derive a bunch of attributes from clse, the latest price:
20:34:01   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
20:34:01  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
20:34:01  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
20:34:01  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
20:34:01  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
20:34:01  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
20:34:01  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
20:34:01  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
20:34:01  17  --
20:34:01  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
20:34:01  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
20:34:01  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
20:34:01  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
20:34:01  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
20:34:01  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
20:34:01  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
20:34:01  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
20:34:01  26  --
20:34:01  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
20:34:01  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
20:34:01  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
20:34:01  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
20:34:01  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
20:34:01  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
20:34:01  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
20:34:01  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
20:34:01  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
20:34:01  36  FROM di5min WHERE pair LIKE'%ech%'
20:34:01  37  AND ydate > sysdate - 95
20:34:01  38  ORDER BY ydate
20:34:01  39  /

View created.

Elapsed: 00:00:00.05
20:34:02 SQL> 
20:34:02 SQL> -- rpt
20:34:02 SQL> 
20:34:02 SQL> SELECT
20:34:02   2  pair
20:34:02   3  ,COUNT(pair)
20:34:02   4  ,MIN(clse),MAX(clse)
20:34:02   5  ,MIN(avg6),MAX(avg6)
20:34:02   6  ,MIN(ydate),MAX(ydate)
20:34:02   7  FROM svm6102
20:34:02   8  GROUP BY pair
20:34:02   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19809 1.24182424 1.38284305 1.24320711 1.37986485 2010-10-03 20:55:01 2011-01-06 20:30:00

Elapsed: 00:00:00.84
20:34:02 SQL> 
20:34:02 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
20:34:02 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:01.38
20:34:04 SQL> CREATE TABLE svm6122 COMPRESS AS
20:34:04   2  SELECT
20:34:04   3  pair
20:34:04   4  ,ydate
20:34:04   5  ,prdate
20:34:04   6  ,clse
20:34:04   7  -- g6 is important. I want to predict g6:
20:34:04   8  ,ld6 - clse g6
20:34:04   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
20:34:04  10  -- I want more attributes from the ones I derived above:
20:34:04  11  -- clse relation to moving-min
20:34:04  12  ,clse-min4  cm4
20:34:04  13  ,clse-min6  cm6
20:34:04  14  ,clse-min8  cm8
20:34:04  15  ,clse-min10 cm10
20:34:04  16  ,clse-min12 cm12
20:34:04  17  ,clse-min14 cm14
20:34:04  18  ,clse-min16 cm16
20:34:04  19  ,clse-min18 cm18
20:34:04  20  -- clse relation to moving-avg
20:34:04  21  ,clse-avg4  ca4
20:34:04  22  ,clse-avg6  ca6
20:34:04  23  ,clse-avg8  ca8
20:34:04  24  ,clse-avg10 ca10
20:34:04  25  ,clse-avg12 ca12
20:34:04  26  ,clse-avg14 ca14
20:34:04  27  ,clse-avg16 ca16
20:34:04  28  ,clse-avg18 ca18
20:34:04  29  -- clse relation to moving-max
20:34:04  30  ,clse-max4  cx4
20:34:04  31  ,clse-max6  cx6
20:34:04  32  ,clse-max8  cx8
20:34:04  33  ,clse-max10 cx10
20:34:04  34  ,clse-max12 cx12
20:34:04  35  ,clse-max14 cx14
20:34:04  36  ,clse-max16 cx16
20:34:04  37  ,clse-max18 cx18
20:34:04  38  -- Derive more attributes.
20:34:04  39  -- I want to use CORR() here to help SVM see the shape of the series.
20:34:04  40  -- But COVAR_POP is more stable:
20:34:04  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
20:34:04  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
20:34:04  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
20:34:04  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
20:34:04  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
20:34:04  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
20:34:04  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
20:34:04  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
20:34:04  49  -- Derive date related attributes:
20:34:04  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
20:34:04  51  ,0+TO_CHAR(ydate,'D')d
20:34:04  52  ,0+TO_CHAR(ydate,'W')w
20:34:04  53  -- mpm stands for minutes-past-midnight:
20:34:04  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
20:34:04  55  -- mph stands for minutes-past-hour:
20:34:04  56  ,0+TO_CHAR(ydate,'MI')mph
20:34:04  57  FROM svm6102
20:34:04  58  ORDER BY ydate
20:34:04  59  /

Table created.

Elapsed: 00:00:02.11
20:34:06 SQL> 
20:34:06 SQL> -- rpt
20:34:06 SQL> 
20:34:06 SQL> SELECT
20:34:06   2  pair
20:34:06   3  ,COUNT(pair)
20:34:06   4  ,MIN(clse),MAX(clse)
20:34:06   5  ,MIN(ydate),MAX(ydate)
20:34:06   6  FROM svm6122
20:34:06   7  GROUP BY pair
20:34:06   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19809 1.24182424 1.38284305 2010-10-03 20:55:01 2011-01-06 20:30:00

Elapsed: 00:00:00.04
20:34:06 SQL> 
20:34:06 SQL> -- Prepare for derivation of NTILE based params:
20:34:06 SQL> 
20:34:06 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.30
20:34:06 SQL> CREATE TABLE svm6142 COMPRESS AS
20:34:06   2  SELECT
20:34:06   3  pair
20:34:06   4  ,ydate
20:34:06   5  ,prdate
20:34:06   6  ,clse
20:34:06   7  ,g6
20:34:06   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
20:34:06   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
20:34:06  10  ,CASE WHEN trend IS NULL THEN 1
20:34:06  11  	    WHEN trend =0      THEN 1
20:34:06  12  	    ELSE trend END trend
20:34:06  13  ,cm4
20:34:06  14  ,cm6
20:34:06  15  ,cm8
20:34:06  16  ,cm10
20:34:06  17  ,cm12
20:34:06  18  ,cm14
20:34:06  19  ,cm16
20:34:06  20  ,cm18
20:34:06  21  --
20:34:06  22  ,ca4
20:34:06  23  ,ca6
20:34:06  24  ,ca8
20:34:06  25  ,ca10
20:34:06  26  ,ca12
20:34:06  27  ,ca14
20:34:06  28  ,ca16
20:34:06  29  ,ca18
20:34:06  30  --
20:34:06  31  ,cx4
20:34:06  32  ,cx6
20:34:06  33  ,cx8
20:34:06  34  ,cx10
20:34:06  35  ,cx12
20:34:06  36  ,cx14
20:34:06  37  ,cx16
20:34:06  38  ,cx18
20:34:06  39  --
20:34:06  40  ,crr4
20:34:06  41  ,crr6
20:34:06  42  ,crr8
20:34:06  43  ,crr10
20:34:06  44  ,crr12
20:34:06  45  ,crr14
20:34:06  46  ,crr16
20:34:06  47  ,crr18
20:34:06  48  --
20:34:06  49  ,hh
20:34:06  50  ,d
20:34:06  51  ,w
20:34:06  52  ,mpm
20:34:06  53  ,mph
20:34:06  54  FROM svm6122
20:34:06  55  ORDER BY ydate
20:34:06  56  /

Table created.

Elapsed: 00:00:00.40
20:34:07 SQL> 
20:34:07 SQL> -- rpt
20:34:07 SQL> 
20:34:07 SQL> SELECT
20:34:07   2  pair
20:34:07   3  ,trend
20:34:07   4  ,gatt
20:34:07   5  ,COUNT(pair)
20:34:07   6  ,AVG(g6)
20:34:07   7  FROM svm6142
20:34:07   8  GROUP BY pair,trend,gatt
20:34:07   9  ORDER BY pair,trend,gatt
20:34:07  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6782 -.00231001
ech_usd 	-1 up	      3581 .003574571
ech_usd 	-1		72
ech_usd 	 1 nup	      6466  -.0023826
ech_usd 	 1 up	      2908 .004120462

Elapsed: 00:00:00.05
20:34:07 SQL> 
20:34:07 SQL> 
20:34:07 SQL> -- Derive NTILE based params:
20:34:07 SQL> 
20:34:07 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.28
20:34:07 SQL> CREATE TABLE svm6162 COMPRESS AS
20:34:07   2  SELECT
20:34:07   3  pair
20:34:07   4  ,ydate
20:34:07   5  ,prdate
20:34:07   6  ,clse
20:34:07   7  ,g6
20:34:07   8  ,gatt
20:34:07   9  ,gattn
20:34:07  10  ,trend
20:34:07  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
20:34:07  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
20:34:07  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
20:34:07  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
20:34:07  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
20:34:07  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
20:34:07  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
20:34:07  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
20:34:07  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
20:34:07  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
20:34:07  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
20:34:07  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
20:34:07  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
20:34:07  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
20:34:07  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
20:34:07  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
20:34:07  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
20:34:07  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
20:34:07  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
20:34:07  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
20:34:07  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
20:34:07  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
20:34:07  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
20:34:07  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
20:34:07  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
20:34:07  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
20:34:07  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
20:34:07  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
20:34:07  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
20:34:07  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
20:34:07  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
20:34:07  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
20:34:07  43  ,hh  att32
20:34:07  44  ,d   att33
20:34:07  45  ,w   att34
20:34:07  46  ,mpm att35
20:34:07  47  ,mph att36
20:34:07  48  ,trend att37
20:34:07  49  FROM svm6142
20:34:07  50  ORDER BY ydate
20:34:07  51  /

Table created.

Elapsed: 00:00:05.00
20:34:12 SQL> 
20:34:12 SQL> -- rpt
20:34:12 SQL> 
20:34:12 SQL> SELECT
20:34:12   2  pair
20:34:12   3  ,trend
20:34:12   4  ,gatt
20:34:12   5  ,COUNT(pair)
20:34:12   6  ,AVG(g6)
20:34:12   7  FROM svm6162
20:34:12   8  GROUP BY pair,trend,gatt
20:34:12   9  ORDER BY pair,trend,gatt
20:34:12  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6782 -.00231001
ech_usd 	-1 up	      3581 .003574571
ech_usd 	-1		72
ech_usd 	 1 nup	      6466  -.0023826
ech_usd 	 1 up	      2908 .004120462

Elapsed: 00:00:00.02
20:34:12 SQL> 
20:34:12 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.14
20:34:12 SQL> CREATE TABLE modsrc COMPRESS AS
20:34:12   2  SELECT
20:34:12   3  pair
20:34:12   4  ,ydate
20:34:12   5  ,prdate
20:34:12   6  ,trend
20:34:12   7  ,g6
20:34:12   8  ,gatt
20:34:12   9  ,gattn
20:34:12  10  FROM svm6162
20:34:12  11  /

Table created.

Elapsed: 00:00:00.10
20:34:12 SQL> 
20:34:12 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
20:34:12 SQL> 
20:34:12 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
20:34:12 SQL> CREATE TABLE ech_ms610 COMPRESS AS
20:34:12   2  SELECT
20:34:12   3  ydate
20:34:12   4  ,trend ech_trend
20:34:12   5  ,g6    ech_g6
20:34:12   6  ,gatt  ech_gatt
20:34:12   7  ,gattn ech_gattn
20:34:12   8  FROM modsrc
20:34:12   9  /

Table created.

Elapsed: 00:00:00.07
20:34:13 SQL> 
20:34:13 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
20:34:13 SQL> 
20:34:13 SQL> -- I need a copy of the attributes:
20:34:13 SQL> 
20:34:13 SQL> 
20:34:13 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.19
20:34:13 SQL> CREATE TABLE ech_att COMPRESS AS
20:34:13   2  SELECT
20:34:13   3  ydate
20:34:13   4  ,att00 ech_att00
20:34:13   5  ,att01 ech_att01
20:34:13   6  ,att02 ech_att02
20:34:13   7  ,att03 ech_att03
20:34:13   8  ,att04 ech_att04
20:34:13   9  ,att05 ech_att05
20:34:13  10  ,att06 ech_att06
20:34:13  11  ,att07 ech_att07
20:34:13  12  ,att08 ech_att08
20:34:13  13  ,att09 ech_att09
20:34:13  14  ,att10 ech_att10
20:34:13  15  ,att11 ech_att11
20:34:13  16  ,att12 ech_att12
20:34:13  17  ,att13 ech_att13
20:34:13  18  ,att14 ech_att14
20:34:13  19  ,att15 ech_att15
20:34:13  20  ,att16 ech_att16
20:34:13  21  ,att17 ech_att17
20:34:13  22  ,att18 ech_att18
20:34:13  23  ,att19 ech_att19
20:34:13  24  ,att20 ech_att20
20:34:13  25  ,att21 ech_att21
20:34:13  26  ,att22 ech_att22
20:34:13  27  ,att23 ech_att23
20:34:13  28  ,att24 ech_att24
20:34:13  29  ,att25 ech_att25
20:34:13  30  ,att26 ech_att26
20:34:13  31  ,att27 ech_att27
20:34:13  32  ,att28 ech_att28
20:34:13  33  ,att29 ech_att29
20:34:13  34  ,att30 ech_att30
20:34:13  35  ,att31 ech_att31
20:34:13  36  ,att32 ech_att32
20:34:13  37  ,att33 ech_att33
20:34:13  38  ,att34 ech_att34
20:34:13  39  ,att35 ech_att35
20:34:13  40  ,att36 ech_att36
20:34:13  41  ,att37 ech_att37
20:34:13  42  FROM svm6162
20:34:13  43  /

Table created.

Elapsed: 00:00:00.18
20:34:13 SQL> 
20:34:13 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
20:34:13 SQL> 
20:34:13 SQL> -- rpt
20:34:13 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.81
20:34:14 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.01
20:34:14 SQL> 
20:34:14 SQL> --
20:34:14 SQL> -- egb610.sql
20:34:14 SQL> --
20:34:14 SQL> 
20:34:14 SQL> -- Creates views and tables for backtesting a forex SVM strategy
20:34:14 SQL> 
20:34:14 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:02.93
20:34:17 SQL> 
20:34:17 SQL> -- I created di5min here:
20:34:17 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
20:34:17 SQL> 
20:34:17 SQL> CREATE OR REPLACE VIEW svm6102 AS
20:34:17   2  SELECT
20:34:17   3  pair
20:34:17   4  ,ydate
20:34:17   5  ,prdate
20:34:17   6  ,rownum rnum -- acts as t in my time-series
20:34:17   7  ,clse
20:34:17   8  -- Derive a bunch of attributes from clse, the latest price:
20:34:17   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
20:34:17  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
20:34:17  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
20:34:17  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
20:34:17  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
20:34:17  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
20:34:17  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
20:34:17  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
20:34:17  17  --
20:34:17  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
20:34:17  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
20:34:17  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
20:34:17  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
20:34:17  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
20:34:17  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
20:34:17  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
20:34:17  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
20:34:17  26  --
20:34:17  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
20:34:17  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
20:34:17  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
20:34:17  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
20:34:17  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
20:34:17  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
20:34:17  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
20:34:17  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
20:34:17  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
20:34:17  36  FROM di5min WHERE pair LIKE'%egb%'
20:34:17  37  AND ydate > sysdate - 95
20:34:17  38  ORDER BY ydate
20:34:17  39  /

View created.

Elapsed: 00:00:00.06
20:34:17 SQL> 
20:34:17 SQL> -- rpt
20:34:17 SQL> 
20:34:17 SQL> SELECT
20:34:17   2  pair
20:34:17   3  ,COUNT(pair)
20:34:17   4  ,MIN(clse),MAX(clse)
20:34:17   5  ,MIN(avg6),MAX(avg6)
20:34:17   6  ,MIN(ydate),MAX(ydate)
20:34:17   7  FROM svm6102
20:34:17   8  GROUP BY pair
20:34:17   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19808 .833520557 .893920122 .834199029 .892400287 2010-10-03 20:55:01 2011-01-06 20:30:00

Elapsed: 00:00:00.97
20:34:18 SQL> 
20:34:18 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
20:34:18 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.20
20:34:18 SQL> CREATE TABLE svm6122 COMPRESS AS
20:34:18   2  SELECT
20:34:18   3  pair
20:34:18   4  ,ydate
20:34:18   5  ,prdate
20:34:18   6  ,clse
20:34:18   7  -- g6 is important. I want to predict g6:
20:34:18   8  ,ld6 - clse g6
20:34:18   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
20:34:18  10  -- I want more attributes from the ones I derived above:
20:34:18  11  -- clse relation to moving-min
20:34:18  12  ,clse-min4  cm4
20:34:18  13  ,clse-min6  cm6
20:34:18  14  ,clse-min8  cm8
20:34:18  15  ,clse-min10 cm10
20:34:18  16  ,clse-min12 cm12
20:34:18  17  ,clse-min14 cm14
20:34:18  18  ,clse-min16 cm16
20:34:18  19  ,clse-min18 cm18
20:34:18  20  -- clse relation to moving-avg
20:34:18  21  ,clse-avg4  ca4
20:34:18  22  ,clse-avg6  ca6
20:34:18  23  ,clse-avg8  ca8
20:34:18  24  ,clse-avg10 ca10
20:34:18  25  ,clse-avg12 ca12
20:34:18  26  ,clse-avg14 ca14
20:34:18  27  ,clse-avg16 ca16
20:34:18  28  ,clse-avg18 ca18
20:34:18  29  -- clse relation to moving-max
20:34:18  30  ,clse-max4  cx4
20:34:18  31  ,clse-max6  cx6
20:34:18  32  ,clse-max8  cx8
20:34:18  33  ,clse-max10 cx10
20:34:18  34  ,clse-max12 cx12
20:34:18  35  ,clse-max14 cx14
20:34:18  36  ,clse-max16 cx16
20:34:18  37  ,clse-max18 cx18
20:34:18  38  -- Derive more attributes.
20:34:18  39  -- I want to use CORR() here to help SVM see the shape of the series.
20:34:18  40  -- But COVAR_POP is more stable:
20:34:18  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
20:34:18  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
20:34:18  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
20:34:18  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
20:34:18  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
20:34:18  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
20:34:18  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
20:34:18  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
20:34:18  49  -- Derive date related attributes:
20:34:18  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
20:34:18  51  ,0+TO_CHAR(ydate,'D')d
20:34:18  52  ,0+TO_CHAR(ydate,'W')w
20:34:18  53  -- mpm stands for minutes-past-midnight:
20:34:18  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
20:34:18  55  -- mph stands for minutes-past-hour:
20:34:18  56  ,0+TO_CHAR(ydate,'MI')mph
20:34:18  57  FROM svm6102
20:34:18  58  ORDER BY ydate
20:34:18  59  /

Table created.

Elapsed: 00:00:02.69
20:34:21 SQL> 
20:34:21 SQL> -- rpt
20:34:21 SQL> 
20:34:21 SQL> SELECT
20:34:21   2  pair
20:34:21   3  ,COUNT(pair)
20:34:21   4  ,MIN(clse),MAX(clse)
20:34:21   5  ,MIN(ydate),MAX(ydate)
20:34:21   6  FROM svm6122
20:34:21   7  GROUP BY pair
20:34:21   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19808 .833520557 .893920122 2010-10-03 20:55:01 2011-01-06 20:30:00

Elapsed: 00:00:00.04
20:34:21 SQL> 
20:34:21 SQL> -- Prepare for derivation of NTILE based params:
20:34:21 SQL> 
20:34:21 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.34
20:34:22 SQL> CREATE TABLE svm6142 COMPRESS AS
20:34:22   2  SELECT
20:34:22   3  pair
20:34:22   4  ,ydate
20:34:22   5  ,prdate
20:34:22   6  ,clse
20:34:22   7  ,g6
20:34:22   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
20:34:22   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
20:34:22  10  ,CASE WHEN trend IS NULL THEN 1
20:34:22  11  	    WHEN trend =0      THEN 1
20:34:22  12  	    ELSE trend END trend
20:34:22  13  ,cm4
20:34:22  14  ,cm6
20:34:22  15  ,cm8
20:34:22  16  ,cm10
20:34:22  17  ,cm12
20:34:22  18  ,cm14
20:34:22  19  ,cm16
20:34:22  20  ,cm18
20:34:22  21  --
20:34:22  22  ,ca4
20:34:22  23  ,ca6
20:34:22  24  ,ca8
20:34:22  25  ,ca10
20:34:22  26  ,ca12
20:34:22  27  ,ca14
20:34:22  28  ,ca16
20:34:22  29  ,ca18
20:34:22  30  --
20:34:22  31  ,cx4
20:34:22  32  ,cx6
20:34:22  33  ,cx8
20:34:22  34  ,cx10
20:34:22  35  ,cx12
20:34:22  36  ,cx14
20:34:22  37  ,cx16
20:34:22  38  ,cx18
20:34:22  39  --
20:34:22  40  ,crr4
20:34:22  41  ,crr6
20:34:22  42  ,crr8
20:34:22  43  ,crr10
20:34:22  44  ,crr12
20:34:22  45  ,crr14
20:34:22  46  ,crr16
20:34:22  47  ,crr18
20:34:22  48  --
20:34:22  49  ,hh
20:34:22  50  ,d
20:34:22  51  ,w
20:34:22  52  ,mpm
20:34:22  53  ,mph
20:34:22  54  FROM svm6122
20:34:22  55  ORDER BY ydate
20:34:22  56  /

Table created.

Elapsed: 00:00:00.43
20:34:22 SQL> 
20:34:22 SQL> -- rpt
20:34:22 SQL> 
20:34:22 SQL> SELECT
20:34:22   2  pair
20:34:22   3  ,trend
20:34:22   4  ,gatt
20:34:22   5  ,COUNT(pair)
20:34:22   6  ,AVG(g6)
20:34:22   7  FROM svm6142
20:34:22   8  GROUP BY pair,trend,gatt
20:34:22   9  ORDER BY pair,trend,gatt
20:34:22  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7966 -.00106896
egb_usd 	-1 up	      2636 .002928295
egb_usd 	-1		69
egb_usd 	 1 nup	      6517 -.00138235
egb_usd 	 1 up	      2617   .0029282
egb_usd 	 1		 3

6 rows selected.

Elapsed: 00:00:00.21
20:34:22 SQL> 
20:34:22 SQL> 
20:34:22 SQL> -- Derive NTILE based params:
20:34:22 SQL> 
20:34:22 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
20:34:22 SQL> CREATE TABLE svm6162 COMPRESS AS
20:34:22   2  SELECT
20:34:22   3  pair
20:34:22   4  ,ydate
20:34:22   5  ,prdate
20:34:22   6  ,clse
20:34:22   7  ,g6
20:34:22   8  ,gatt
20:34:22   9  ,gattn
20:34:22  10  ,trend
20:34:22  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
20:34:22  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
20:34:22  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
20:34:22  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
20:34:22  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
20:34:22  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
20:34:22  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
20:34:22  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
20:34:22  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
20:34:22  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
20:34:22  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
20:34:22  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
20:34:22  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
20:34:22  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
20:34:22  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
20:34:22  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
20:34:22  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
20:34:22  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
20:34:22  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
20:34:22  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
20:34:22  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
20:34:22  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
20:34:22  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
20:34:22  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
20:34:22  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
20:34:22  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
20:34:22  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
20:34:22  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
20:34:22  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
20:34:22  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
20:34:22  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
20:34:22  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
20:34:22  43  ,hh  att32
20:34:22  44  ,d   att33
20:34:22  45  ,w   att34
20:34:22  46  ,mpm att35
20:34:22  47  ,mph att36
20:34:22  48  ,trend att37
20:34:22  49  FROM svm6142
20:34:22  50  ORDER BY ydate
20:34:22  51  /

Table created.

Elapsed: 00:00:05.82
20:34:28 SQL> 
20:34:28 SQL> -- rpt
20:34:28 SQL> 
20:34:28 SQL> SELECT
20:34:28   2  pair
20:34:28   3  ,trend
20:34:28   4  ,gatt
20:34:28   5  ,COUNT(pair)
20:34:28   6  ,AVG(g6)
20:34:28   7  FROM svm6162
20:34:28   8  GROUP BY pair,trend,gatt
20:34:28   9  ORDER BY pair,trend,gatt
20:34:28  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7966 -.00106896
egb_usd 	-1 up	      2636 .002928295
egb_usd 	-1		69
egb_usd 	 1 nup	      6517 -.00138235
egb_usd 	 1 up	      2617   .0029282
egb_usd 	 1		 3

6 rows selected.

Elapsed: 00:00:00.02
20:34:28 SQL> 
20:34:28 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.29
20:34:29 SQL> CREATE TABLE modsrc COMPRESS AS
20:34:29   2  SELECT
20:34:29   3  pair
20:34:29   4  ,ydate
20:34:29   5  ,prdate
20:34:29   6  ,trend
20:34:29   7  ,g6
20:34:29   8  ,gatt
20:34:29   9  ,gattn
20:34:29  10  FROM svm6162
20:34:29  11  /

Table created.

Elapsed: 00:00:00.09
20:34:29 SQL> 
20:34:29 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.30
20:34:29 SQL> 
20:34:29 SQL> DROP   TABLE egb_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
20:34:29 SQL> CREATE TABLE egb_ms610 COMPRESS AS
20:34:29   2  SELECT
20:34:29   3  ydate
20:34:29   4  ,trend egb_trend
20:34:29   5  ,g6    egb_g6
20:34:29   6  ,gatt  egb_gatt
20:34:29   7  ,gattn egb_gattn
20:34:29   8  FROM modsrc
20:34:29   9  /

Table created.

Elapsed: 00:00:00.06
20:34:29 SQL> 
20:34:29 SQL> ANALYZE TABLE egb_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
20:34:29 SQL> 
20:34:29 SQL> -- I need a copy of the attributes:
20:34:29 SQL> 
20:34:29 SQL> 
20:34:29 SQL> DROP   TABLE egb_att;

Table dropped.

Elapsed: 00:00:00.05
20:34:29 SQL> CREATE TABLE egb_att COMPRESS AS
20:34:29   2  SELECT
20:34:29   3  ydate
20:34:29   4  ,att00 egb_att00
20:34:29   5  ,att01 egb_att01
20:34:29   6  ,att02 egb_att02
20:34:29   7  ,att03 egb_att03
20:34:29   8  ,att04 egb_att04
20:34:29   9  ,att05 egb_att05
20:34:29  10  ,att06 egb_att06
20:34:29  11  ,att07 egb_att07
20:34:29  12  ,att08 egb_att08
20:34:29  13  ,att09 egb_att09
20:34:29  14  ,att10 egb_att10
20:34:29  15  ,att11 egb_att11
20:34:29  16  ,att12 egb_att12
20:34:29  17  ,att13 egb_att13
20:34:29  18  ,att14 egb_att14
20:34:29  19  ,att15 egb_att15
20:34:29  20  ,att16 egb_att16
20:34:29  21  ,att17 egb_att17
20:34:29  22  ,att18 egb_att18
20:34:29  23  ,att19 egb_att19
20:34:29  24  ,att20 egb_att20
20:34:29  25  ,att21 egb_att21
20:34:29  26  ,att22 egb_att22
20:34:29  27  ,att23 egb_att23
20:34:29  28  ,att24 egb_att24
20:34:29  29  ,att25 egb_att25
20:34:29  30  ,att26 egb_att26
20:34:29  31  ,att27 egb_att27
20:34:29  32  ,att28 egb_att28
20:34:29  33  ,att29 egb_att29
20:34:29  34  ,att30 egb_att30
20:34:29  35  ,att31 egb_att31
20:34:29  36  ,att32 egb_att32
20:34:29  37  ,att33 egb_att33
20:34:29  38  ,att34 egb_att34
20:34:29  39  ,att35 egb_att35
20:34:29  40  ,att36 egb_att36
20:34:29  41  ,att37 egb_att37
20:34:29  42  FROM svm6162
20:34:29  43  /

Table created.

Elapsed: 00:00:00.16
20:34:29 SQL> 
20:34:29 SQL> ANALYZE TABLE egb_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.49
20:34:30 SQL> 
20:34:30 SQL> -- rpt
20:34:30 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.94
20:34:31 SQL> SELECT COUNT(*)FROM egb_att;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.00
20:34:31 SQL> 
20:34:31 SQL> --
20:34:31 SQL> -- ejp610.sql
20:34:31 SQL> --
20:34:31 SQL> 
20:34:31 SQL> -- Creates views and tables for backtesting a forex SVM strategy
20:34:31 SQL> 
20:34:31 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.35
20:34:31 SQL> 
20:34:31 SQL> -- I created di5min here:
20:34:31 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
20:34:31 SQL> 
20:34:31 SQL> CREATE OR REPLACE VIEW svm6102 AS
20:34:31   2  SELECT
20:34:31   3  pair
20:34:31   4  ,ydate
20:34:31   5  ,prdate
20:34:31   6  ,rownum rnum -- acts as t in my time-series
20:34:31   7  ,clse
20:34:31   8  -- Derive a bunch of attributes from clse, the latest price:
20:34:31   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
20:34:31  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
20:34:31  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
20:34:31  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
20:34:31  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
20:34:31  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
20:34:31  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
20:34:31  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
20:34:31  17  --
20:34:31  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
20:34:31  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
20:34:31  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
20:34:31  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
20:34:31  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
20:34:31  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
20:34:31  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
20:34:31  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
20:34:31  26  --
20:34:31  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
20:34:31  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
20:34:31  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
20:34:31  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
20:34:31  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
20:34:31  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
20:34:31  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
20:34:31  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
20:34:31  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
20:34:31  36  FROM di5min WHERE pair LIKE'%ejp%'
20:34:31  37  AND ydate > sysdate - 95
20:34:31  38  ORDER BY ydate
20:34:31  39  /

View created.

Elapsed: 00:00:00.05
20:34:31 SQL> 
20:34:31 SQL> -- rpt
20:34:31 SQL> 
20:34:31 SQL> SELECT
20:34:31   2  pair
20:34:31   3  ,COUNT(pair)
20:34:31   4  ,MIN(clse),MAX(clse)
20:34:31   5  ,MIN(avg6),MAX(avg6)
20:34:31   6  ,MIN(ydate),MAX(ydate)
20:34:31   7  FROM svm6102
20:34:31   8  GROUP BY pair
20:34:31   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ejp_usd       19806 107.643765	115.63485 107.776148 115.509678 2010-10-03 20:55:01 2011-01-06 20:30:00

Elapsed: 00:00:00.86
20:34:32 SQL> 
20:34:32 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
20:34:32 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.27
20:34:32 SQL> CREATE TABLE svm6122 COMPRESS AS
20:34:32   2  SELECT
20:34:32   3  pair
20:34:32   4  ,ydate
20:34:32   5  ,prdate
20:34:32   6  ,clse
20:34:32   7  -- g6 is important. I want to predict g6:
20:34:32   8  ,ld6 - clse g6
20:34:32   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
20:34:32  10  -- I want more attributes from the ones I derived above:
20:34:32  11  -- clse relation to moving-min
20:34:32  12  ,clse-min4  cm4
20:34:32  13  ,clse-min6  cm6
20:34:32  14  ,clse-min8  cm8
20:34:32  15  ,clse-min10 cm10
20:34:32  16  ,clse-min12 cm12
20:34:32  17  ,clse-min14 cm14
20:34:32  18  ,clse-min16 cm16
20:34:32  19  ,clse-min18 cm18
20:34:32  20  -- clse relation to moving-avg
20:34:32  21  ,clse-avg4  ca4
20:34:32  22  ,clse-avg6  ca6
20:34:32  23  ,clse-avg8  ca8
20:34:32  24  ,clse-avg10 ca10
20:34:32  25  ,clse-avg12 ca12
20:34:32  26  ,clse-avg14 ca14
20:34:32  27  ,clse-avg16 ca16
20:34:32  28  ,clse-avg18 ca18
20:34:32  29  -- clse relation to moving-max
20:34:32  30  ,clse-max4  cx4
20:34:32  31  ,clse-max6  cx6
20:34:32  32  ,clse-max8  cx8
20:34:32  33  ,clse-max10 cx10
20:34:32  34  ,clse-max12 cx12
20:34:32  35  ,clse-max14 cx14
20:34:32  36  ,clse-max16 cx16
20:34:32  37  ,clse-max18 cx18
20:34:32  38  -- Derive more attributes.
20:34:32  39  -- I want to use CORR() here to help SVM see the shape of the series.
20:34:32  40  -- But COVAR_POP is more stable:
20:34:32  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
20:34:32  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
20:34:32  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
20:34:32  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
20:34:32  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
20:34:32  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
20:34:32  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
20:34:32  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
20:34:32  49  -- Derive date related attributes:
20:34:32  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
20:34:32  51  ,0+TO_CHAR(ydate,'D')d
20:34:32  52  ,0+TO_CHAR(ydate,'W')w
20:34:32  53  -- mpm stands for minutes-past-midnight:
20:34:32  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
20:34:32  55  -- mph stands for minutes-past-hour:
20:34:32  56  ,0+TO_CHAR(ydate,'MI')mph
20:34:32  57  FROM svm6102
20:34:32  58  ORDER BY ydate
20:34:32  59  /

Table created.

Elapsed: 00:00:02.17
20:34:35 SQL> 
20:34:35 SQL> -- rpt
20:34:35 SQL> 
20:34:35 SQL> SELECT
20:34:35   2  pair
20:34:35   3  ,COUNT(pair)
20:34:35   4  ,MIN(clse),MAX(clse)
20:34:35   5  ,MIN(ydate),MAX(ydate)
20:34:35   6  FROM svm6122
20:34:35   7  GROUP BY pair
20:34:35   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ejp_usd       19806 107.643765	115.63485 2010-10-03 20:55:01 2011-01-06 20:30:00

Elapsed: 00:00:00.04
20:34:35 SQL> 
20:34:35 SQL> -- Prepare for derivation of NTILE based params:
20:34:35 SQL> 
20:34:35 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.16
20:34:35 SQL> CREATE TABLE svm6142 COMPRESS AS
20:34:35   2  SELECT
20:34:35   3  pair
20:34:35   4  ,ydate
20:34:35   5  ,prdate
20:34:35   6  ,clse
20:34:35   7  ,g6
20:34:35   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
20:34:35   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
20:34:35  10  ,CASE WHEN trend IS NULL THEN 1
20:34:35  11  	    WHEN trend =0      THEN 1
20:34:35  12  	    ELSE trend END trend
20:34:35  13  ,cm4
20:34:35  14  ,cm6
20:34:35  15  ,cm8
20:34:35  16  ,cm10
20:34:35  17  ,cm12
20:34:35  18  ,cm14
20:34:35  19  ,cm16
20:34:35  20  ,cm18
20:34:35  21  --
20:34:35  22  ,ca4
20:34:35  23  ,ca6
20:34:35  24  ,ca8
20:34:35  25  ,ca10
20:34:35  26  ,ca12
20:34:35  27  ,ca14
20:34:35  28  ,ca16
20:34:35  29  ,ca18
20:34:35  30  --
20:34:35  31  ,cx4
20:34:35  32  ,cx6
20:34:35  33  ,cx8
20:34:35  34  ,cx10
20:34:35  35  ,cx12
20:34:35  36  ,cx14
20:34:35  37  ,cx16
20:34:35  38  ,cx18
20:34:35  39  --
20:34:35  40  ,crr4
20:34:35  41  ,crr6
20:34:35  42  ,crr8
20:34:35  43  ,crr10
20:34:35  44  ,crr12
20:34:35  45  ,crr14
20:34:35  46  ,crr16
20:34:35  47  ,crr18
20:34:35  48  --
20:34:35  49  ,hh
20:34:35  50  ,d
20:34:35  51  ,w
20:34:35  52  ,mpm
20:34:35  53  ,mph
20:34:35  54  FROM svm6122
20:34:35  55  ORDER BY ydate
20:34:35  56  /

Table created.

Elapsed: 00:00:00.39
20:34:35 SQL> 
20:34:35 SQL> -- rpt
20:34:35 SQL> 
20:34:35 SQL> SELECT
20:34:35   2  pair
20:34:35   3  ,trend
20:34:35   4  ,gatt
20:34:35   5  ,COUNT(pair)
20:34:35   6  ,AVG(g6)
20:34:35   7  FROM svm6142
20:34:35   8  GROUP BY pair,trend,gatt
20:34:35   9  ORDER BY pair,trend,gatt
20:34:35  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      5159 -.32361257
ejp_usd 	-1 up	      4933 .277546049
ejp_usd 	-1		72
ejp_usd 	 1 nup	      5013 -.29960176
ejp_usd 	 1 up	      4629 .288539567

Elapsed: 00:00:00.04
20:34:35 SQL> 
20:34:35 SQL> 
20:34:35 SQL> -- Derive NTILE based params:
20:34:35 SQL> 
20:34:35 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
20:34:35 SQL> CREATE TABLE svm6162 COMPRESS AS
20:34:35   2  SELECT
20:34:35   3  pair
20:34:35   4  ,ydate
20:34:35   5  ,prdate
20:34:35   6  ,clse
20:34:35   7  ,g6
20:34:35   8  ,gatt
20:34:35   9  ,gattn
20:34:35  10  ,trend
20:34:35  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
20:34:35  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
20:34:35  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
20:34:35  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
20:34:35  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
20:34:35  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
20:34:35  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
20:34:35  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
20:34:35  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
20:34:35  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
20:34:35  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
20:34:35  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
20:34:35  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
20:34:35  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
20:34:35  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
20:34:35  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
20:34:35  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
20:34:35  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
20:34:35  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
20:34:35  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
20:34:35  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
20:34:35  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
20:34:35  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
20:34:35  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
20:34:35  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
20:34:35  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
20:34:35  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
20:34:35  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
20:34:35  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
20:34:35  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
20:34:35  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
20:34:35  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
20:34:35  43  ,hh  att32
20:34:35  44  ,d   att33
20:34:35  45  ,w   att34
20:34:35  46  ,mpm att35
20:34:35  47  ,mph att36
20:34:35  48  ,trend att37
20:34:35  49  FROM svm6142
20:34:35  50  ORDER BY ydate
20:34:35  51  /

Table created.

Elapsed: 00:00:04.92
20:34:40 SQL> 
20:34:40 SQL> -- rpt
20:34:40 SQL> 
20:34:40 SQL> SELECT
20:34:40   2  pair
20:34:40   3  ,trend
20:34:40   4  ,gatt
20:34:40   5  ,COUNT(pair)
20:34:40   6  ,AVG(g6)
20:34:40   7  FROM svm6162
20:34:40   8  GROUP BY pair,trend,gatt
20:34:40   9  ORDER BY pair,trend,gatt
20:34:40  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      5159 -.32361257
ejp_usd 	-1 up	      4933 .277546049
ejp_usd 	-1		72
ejp_usd 	 1 nup	      5013 -.29960176
ejp_usd 	 1 up	      4629 .288539567

Elapsed: 00:00:00.03
20:34:40 SQL> 
20:34:40 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
20:34:40 SQL> CREATE TABLE modsrc COMPRESS AS
20:34:40   2  SELECT
20:34:40   3  pair
20:34:40   4  ,ydate
20:34:40   5  ,prdate
20:34:40   6  ,trend
20:34:40   7  ,g6
20:34:40   8  ,gatt
20:34:40   9  ,gattn
20:34:40  10  FROM svm6162
20:34:40  11  /

Table created.

Elapsed: 00:00:00.09
20:34:40 SQL> 
20:34:40 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
20:34:41 SQL> 
20:34:41 SQL> DROP   TABLE ejp_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
20:34:41 SQL> CREATE TABLE ejp_ms610 COMPRESS AS
20:34:41   2  SELECT
20:34:41   3  ydate
20:34:41   4  ,trend ejp_trend
20:34:41   5  ,g6    ejp_g6
20:34:41   6  ,gatt  ejp_gatt
20:34:41   7  ,gattn ejp_gattn
20:34:41   8  FROM modsrc
20:34:41   9  /

Table created.

Elapsed: 00:00:00.06
20:34:41 SQL> 
20:34:41 SQL> ANALYZE TABLE ejp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
20:34:41 SQL> 
20:34:41 SQL> -- I need a copy of the attributes:
20:34:41 SQL> 
20:34:41 SQL> 
20:34:41 SQL> DROP   TABLE ejp_att;

Table dropped.

Elapsed: 00:00:00.07
20:34:41 SQL> CREATE TABLE ejp_att COMPRESS AS
20:34:41   2  SELECT
20:34:41   3  ydate
20:34:41   4  ,att00 ejp_att00
20:34:41   5  ,att01 ejp_att01
20:34:41   6  ,att02 ejp_att02
20:34:41   7  ,att03 ejp_att03
20:34:41   8  ,att04 ejp_att04
20:34:41   9  ,att05 ejp_att05
20:34:41  10  ,att06 ejp_att06
20:34:41  11  ,att07 ejp_att07
20:34:41  12  ,att08 ejp_att08
20:34:41  13  ,att09 ejp_att09
20:34:41  14  ,att10 ejp_att10
20:34:41  15  ,att11 ejp_att11
20:34:41  16  ,att12 ejp_att12
20:34:41  17  ,att13 ejp_att13
20:34:41  18  ,att14 ejp_att14
20:34:41  19  ,att15 ejp_att15
20:34:41  20  ,att16 ejp_att16
20:34:41  21  ,att17 ejp_att17
20:34:41  22  ,att18 ejp_att18
20:34:41  23  ,att19 ejp_att19
20:34:41  24  ,att20 ejp_att20
20:34:41  25  ,att21 ejp_att21
20:34:41  26  ,att22 ejp_att22
20:34:41  27  ,att23 ejp_att23
20:34:41  28  ,att24 ejp_att24
20:34:41  29  ,att25 ejp_att25
20:34:41  30  ,att26 ejp_att26
20:34:41  31  ,att27 ejp_att27
20:34:41  32  ,att28 ejp_att28
20:34:41  33  ,att29 ejp_att29
20:34:41  34  ,att30 ejp_att30
20:34:41  35  ,att31 ejp_att31
20:34:41  36  ,att32 ejp_att32
20:34:41  37  ,att33 ejp_att33
20:34:41  38  ,att34 ejp_att34
20:34:41  39  ,att35 ejp_att35
20:34:41  40  ,att36 ejp_att36
20:34:41  41  ,att37 ejp_att37
20:34:41  42  FROM svm6162
20:34:41  43  /

Table created.

Elapsed: 00:00:00.17
20:34:41 SQL> 
20:34:41 SQL> ANALYZE TABLE ejp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
20:34:42 SQL> 
20:34:42 SQL> -- rpt
20:34:42 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19806

Elapsed: 00:00:00.82
20:34:42 SQL> SELECT COUNT(*)FROM ejp_att;

  COUNT(*)
----------
     19806

Elapsed: 00:00:00.00
20:34:42 SQL> 
20:34:42 SQL> --
20:34:42 SQL> -- ajp610.sql
20:34:42 SQL> --
20:34:42 SQL> 
20:34:42 SQL> -- Creates views and tables for backtesting a forex SVM strategy
20:34:42 SQL> 
20:34:42 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
20:34:43 SQL> 
20:34:43 SQL> -- I created di5min here:
20:34:43 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
20:34:43 SQL> 
20:34:43 SQL> CREATE OR REPLACE VIEW svm6102 AS
20:34:43   2  SELECT
20:34:43   3  pair
20:34:43   4  ,ydate
20:34:43   5  ,prdate
20:34:43   6  ,rownum rnum -- acts as t in my time-series
20:34:43   7  ,clse
20:34:43   8  -- Derive a bunch of attributes from clse, the latest price:
20:34:43   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
20:34:43  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
20:34:43  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
20:34:43  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
20:34:43  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
20:34:43  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
20:34:43  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
20:34:43  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
20:34:43  17  --
20:34:43  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
20:34:43  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
20:34:43  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
20:34:43  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
20:34:43  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
20:34:43  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
20:34:43  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
20:34:43  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
20:34:43  26  --
20:34:43  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
20:34:43  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
20:34:43  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
20:34:43  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
20:34:43  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
20:34:43  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
20:34:43  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
20:34:43  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
20:34:43  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
20:34:43  36  FROM di5min WHERE pair LIKE'%ajp%'
20:34:43  37  AND ydate > sysdate - 95
20:34:43  38  ORDER BY ydate
20:34:43  39  /

View created.

Elapsed: 00:00:00.05
20:34:43 SQL> 
20:34:43 SQL> -- rpt
20:34:43 SQL> 
20:34:43 SQL> SELECT
20:34:43   2  pair
20:34:43   3  ,COUNT(pair)
20:34:43   4  ,MIN(clse),MAX(clse)
20:34:43   5  ,MIN(avg6),MAX(avg6)
20:34:43   6  ,MIN(ydate),MAX(ydate)
20:34:43   7  FROM svm6102
20:34:43   8  GROUP BY pair
20:34:43   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ajp_usd       19803  78.249976 83.6669853 78.5106193  83.546306 2010-10-03 20:55:01 2011-01-06 20:30:00

Elapsed: 00:00:00.79
20:34:44 SQL> 
20:34:44 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
20:34:44 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
20:34:44 SQL> CREATE TABLE svm6122 COMPRESS AS
20:34:44   2  SELECT
20:34:44   3  pair
20:34:44   4  ,ydate
20:34:44   5  ,prdate
20:34:44   6  ,clse
20:34:44   7  -- g6 is important. I want to predict g6:
20:34:44   8  ,ld6 - clse g6
20:34:44   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
20:34:44  10  -- I want more attributes from the ones I derived above:
20:34:44  11  -- clse relation to moving-min
20:34:44  12  ,clse-min4  cm4
20:34:44  13  ,clse-min6  cm6
20:34:44  14  ,clse-min8  cm8
20:34:44  15  ,clse-min10 cm10
20:34:44  16  ,clse-min12 cm12
20:34:44  17  ,clse-min14 cm14
20:34:44  18  ,clse-min16 cm16
20:34:44  19  ,clse-min18 cm18
20:34:44  20  -- clse relation to moving-avg
20:34:44  21  ,clse-avg4  ca4
20:34:44  22  ,clse-avg6  ca6
20:34:44  23  ,clse-avg8  ca8
20:34:44  24  ,clse-avg10 ca10
20:34:44  25  ,clse-avg12 ca12
20:34:44  26  ,clse-avg14 ca14
20:34:44  27  ,clse-avg16 ca16
20:34:44  28  ,clse-avg18 ca18
20:34:44  29  -- clse relation to moving-max
20:34:44  30  ,clse-max4  cx4
20:34:44  31  ,clse-max6  cx6
20:34:44  32  ,clse-max8  cx8
20:34:44  33  ,clse-max10 cx10
20:34:44  34  ,clse-max12 cx12
20:34:44  35  ,clse-max14 cx14
20:34:44  36  ,clse-max16 cx16
20:34:44  37  ,clse-max18 cx18
20:34:44  38  -- Derive more attributes.
20:34:44  39  -- I want to use CORR() here to help SVM see the shape of the series.
20:34:44  40  -- But COVAR_POP is more stable:
20:34:44  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
20:34:44  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
20:34:44  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
20:34:44  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
20:34:44  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
20:34:44  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
20:34:44  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
20:34:44  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
20:34:44  49  -- Derive date related attributes:
20:34:44  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
20:34:44  51  ,0+TO_CHAR(ydate,'D')d
20:34:44  52  ,0+TO_CHAR(ydate,'W')w
20:34:44  53  -- mpm stands for minutes-past-midnight:
20:34:44  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
20:34:44  55  -- mph stands for minutes-past-hour:
20:34:44  56  ,0+TO_CHAR(ydate,'MI')mph
20:34:44  57  FROM svm6102
20:34:44  58  ORDER BY ydate
20:34:44  59  /

Table created.

Elapsed: 00:00:02.13
20:34:46 SQL> 
20:34:46 SQL> -- rpt
20:34:46 SQL> 
20:34:46 SQL> SELECT
20:34:46   2  pair
20:34:46   3  ,COUNT(pair)
20:34:46   4  ,MIN(clse),MAX(clse)
20:34:46   5  ,MIN(ydate),MAX(ydate)
20:34:46   6  FROM svm6122
20:34:46   7  GROUP BY pair
20:34:46   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ajp_usd       19803  78.249976 83.6669853 2010-10-03 20:55:01 2011-01-06 20:30:00

Elapsed: 00:00:00.04
20:34:46 SQL> 
20:34:46 SQL> -- Prepare for derivation of NTILE based params:
20:34:46 SQL> 
20:34:46 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.28
20:34:46 SQL> CREATE TABLE svm6142 COMPRESS AS
20:34:46   2  SELECT
20:34:46   3  pair
20:34:46   4  ,ydate
20:34:46   5  ,prdate
20:34:46   6  ,clse
20:34:46   7  ,g6
20:34:46   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
20:34:46   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
20:34:46  10  ,CASE WHEN trend IS NULL THEN 1
20:34:46  11  	    WHEN trend =0      THEN 1
20:34:46  12  	    ELSE trend END trend
20:34:46  13  ,cm4
20:34:46  14  ,cm6
20:34:46  15  ,cm8
20:34:46  16  ,cm10
20:34:46  17  ,cm12
20:34:46  18  ,cm14
20:34:46  19  ,cm16
20:34:46  20  ,cm18
20:34:46  21  --
20:34:46  22  ,ca4
20:34:46  23  ,ca6
20:34:46  24  ,ca8
20:34:46  25  ,ca10
20:34:46  26  ,ca12
20:34:46  27  ,ca14
20:34:46  28  ,ca16
20:34:46  29  ,ca18
20:34:46  30  --
20:34:46  31  ,cx4
20:34:46  32  ,cx6
20:34:46  33  ,cx8
20:34:46  34  ,cx10
20:34:46  35  ,cx12
20:34:46  36  ,cx14
20:34:46  37  ,cx16
20:34:46  38  ,cx18
20:34:46  39  --
20:34:46  40  ,crr4
20:34:46  41  ,crr6
20:34:46  42  ,crr8
20:34:46  43  ,crr10
20:34:46  44  ,crr12
20:34:46  45  ,crr14
20:34:46  46  ,crr16
20:34:46  47  ,crr18
20:34:46  48  --
20:34:46  49  ,hh
20:34:46  50  ,d
20:34:46  51  ,w
20:34:46  52  ,mpm
20:34:46  53  ,mph
20:34:46  54  FROM svm6122
20:34:46  55  ORDER BY ydate
20:34:46  56  /

Table created.

Elapsed: 00:00:00.46
20:34:47 SQL> 
20:34:47 SQL> -- rpt
20:34:47 SQL> 
20:34:47 SQL> SELECT
20:34:47   2  pair
20:34:47   3  ,trend
20:34:47   4  ,gatt
20:34:47   5  ,COUNT(pair)
20:34:47   6  ,AVG(g6)
20:34:47   7  FROM svm6142
20:34:47   8  GROUP BY pair,trend,gatt
20:34:47   9  ORDER BY pair,trend,gatt
20:34:47  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4392 -.22307213
ajp_usd 	-1 up	      5212 .223935804
ajp_usd 	-1		64
ajp_usd 	 1 nup	      5308 -.20353074
ajp_usd 	 1 up	      4819 .212490042
ajp_usd 	 1		 8

6 rows selected.

Elapsed: 00:00:00.03
20:34:47 SQL> 
20:34:47 SQL> 
20:34:47 SQL> -- Derive NTILE based params:
20:34:47 SQL> 
20:34:47 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
20:34:47 SQL> CREATE TABLE svm6162 COMPRESS AS
20:34:47   2  SELECT
20:34:47   3  pair
20:34:47   4  ,ydate
20:34:47   5  ,prdate
20:34:47   6  ,clse
20:34:47   7  ,g6
20:34:47   8  ,gatt
20:34:47   9  ,gattn
20:34:47  10  ,trend
20:34:47  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
20:34:47  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
20:34:47  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
20:34:47  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
20:34:47  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
20:34:47  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
20:34:47  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
20:34:47  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
20:34:47  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
20:34:47  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
20:34:47  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
20:34:47  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
20:34:47  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
20:34:47  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
20:34:47  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
20:34:47  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
20:34:47  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
20:34:47  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
20:34:47  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
20:34:47  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
20:34:47  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
20:34:47  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
20:34:47  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
20:34:47  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
20:34:47  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
20:34:47  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
20:34:47  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
20:34:47  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
20:34:47  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
20:34:47  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
20:34:47  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
20:34:47  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
20:34:47  43  ,hh  att32
20:34:47  44  ,d   att33
20:34:47  45  ,w   att34
20:34:47  46  ,mpm att35
20:34:47  47  ,mph att36
20:34:47  48  ,trend att37
20:34:47  49  FROM svm6142
20:34:47  50  ORDER BY ydate
20:34:47  51  /

Table created.

Elapsed: 00:00:04.99
20:34:52 SQL> 
20:34:52 SQL> -- rpt
20:34:52 SQL> 
20:34:52 SQL> SELECT
20:34:52   2  pair
20:34:52   3  ,trend
20:34:52   4  ,gatt
20:34:52   5  ,COUNT(pair)
20:34:52   6  ,AVG(g6)
20:34:52   7  FROM svm6162
20:34:52   8  GROUP BY pair,trend,gatt
20:34:52   9  ORDER BY pair,trend,gatt
20:34:52  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4392 -.22307213
ajp_usd 	-1 up	      5212 .223935804
ajp_usd 	-1		64
ajp_usd 	 1 nup	      5308 -.20353074
ajp_usd 	 1 up	      4819 .212490042
ajp_usd 	 1		 8

6 rows selected.

Elapsed: 00:00:00.03
20:34:52 SQL> 
20:34:52 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
20:34:52 SQL> CREATE TABLE modsrc COMPRESS AS
20:34:52   2  SELECT
20:34:52   3  pair
20:34:52   4  ,ydate
20:34:52   5  ,prdate
20:34:52   6  ,trend
20:34:52   7  ,g6
20:34:52   8  ,gatt
20:34:52   9  ,gattn
20:34:52  10  FROM svm6162
20:34:52  11  /

Table created.

Elapsed: 00:00:00.12
20:34:52 SQL> 
20:34:52 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
20:34:53 SQL> 
20:34:53 SQL> DROP   TABLE ajp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
20:34:53 SQL> CREATE TABLE ajp_ms610 COMPRESS AS
20:34:53   2  SELECT
20:34:53   3  ydate
20:34:53   4  ,trend ajp_trend
20:34:53   5  ,g6    ajp_g6
20:34:53   6  ,gatt  ajp_gatt
20:34:53   7  ,gattn ajp_gattn
20:34:53   8  FROM modsrc
20:34:53   9  /

Table created.

Elapsed: 00:00:00.09
20:34:53 SQL> 
20:34:53 SQL> ANALYZE TABLE ajp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
20:34:53 SQL> 
20:34:53 SQL> -- I need a copy of the attributes:
20:34:53 SQL> 
20:34:53 SQL> 
20:34:53 SQL> DROP   TABLE ajp_att;

Table dropped.

Elapsed: 00:00:00.05
20:34:53 SQL> CREATE TABLE ajp_att COMPRESS AS
20:34:53   2  SELECT
20:34:53   3  ydate
20:34:53   4  ,att00 ajp_att00
20:34:53   5  ,att01 ajp_att01
20:34:53   6  ,att02 ajp_att02
20:34:53   7  ,att03 ajp_att03
20:34:53   8  ,att04 ajp_att04
20:34:53   9  ,att05 ajp_att05
20:34:53  10  ,att06 ajp_att06
20:34:53  11  ,att07 ajp_att07
20:34:53  12  ,att08 ajp_att08
20:34:53  13  ,att09 ajp_att09
20:34:53  14  ,att10 ajp_att10
20:34:53  15  ,att11 ajp_att11
20:34:53  16  ,att12 ajp_att12
20:34:53  17  ,att13 ajp_att13
20:34:53  18  ,att14 ajp_att14
20:34:53  19  ,att15 ajp_att15
20:34:53  20  ,att16 ajp_att16
20:34:53  21  ,att17 ajp_att17
20:34:53  22  ,att18 ajp_att18
20:34:53  23  ,att19 ajp_att19
20:34:53  24  ,att20 ajp_att20
20:34:53  25  ,att21 ajp_att21
20:34:53  26  ,att22 ajp_att22
20:34:53  27  ,att23 ajp_att23
20:34:53  28  ,att24 ajp_att24
20:34:53  29  ,att25 ajp_att25
20:34:53  30  ,att26 ajp_att26
20:34:53  31  ,att27 ajp_att27
20:34:53  32  ,att28 ajp_att28
20:34:53  33  ,att29 ajp_att29
20:34:53  34  ,att30 ajp_att30
20:34:53  35  ,att31 ajp_att31
20:34:53  36  ,att32 ajp_att32
20:34:53  37  ,att33 ajp_att33
20:34:53  38  ,att34 ajp_att34
20:34:53  39  ,att35 ajp_att35
20:34:53  40  ,att36 ajp_att36
20:34:53  41  ,att37 ajp_att37
20:34:53  42  FROM svm6162
20:34:53  43  /

Table created.

Elapsed: 00:00:00.30
20:34:53 SQL> 
20:34:53 SQL> ANALYZE TABLE ajp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
20:34:54 SQL> 
20:34:54 SQL> -- rpt
20:34:54 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19803

Elapsed: 00:00:00.79
20:34:54 SQL> SELECT COUNT(*)FROM ajp_att;

  COUNT(*)
----------
     19803

Elapsed: 00:00:00.00
20:34:54 SQL> 
20:34:54 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
