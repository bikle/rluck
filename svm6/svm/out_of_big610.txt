
SQL*Plus: Release 11.2.0.1.0 Production on Thu Dec 30 22:47:21 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

22:47:21 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
22:47:21 SQL> 22:47:21 SQL> --
22:47:21 SQL> -- eur610.sql
22:47:21 SQL> --
22:47:21 SQL> 
22:47:21 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:47:21 SQL> 
22:47:21 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.08
22:47:21 SQL> 
22:47:21 SQL> -- I created di5min here:
22:47:21 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:47:21 SQL> 
22:47:21 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:47:21   2  SELECT
22:47:21   3  pair
22:47:21   4  ,ydate
22:47:21   5  ,prdate
22:47:21   6  ,rownum rnum -- acts as t in my time-series
22:47:21   7  ,clse
22:47:21   8  -- Derive a bunch of attributes from clse, the latest price:
22:47:21   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:47:21  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:47:21  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:47:21  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:47:21  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:47:21  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:47:21  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:47:21  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:47:21  17  --
22:47:21  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:47:21  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:47:21  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:47:21  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:47:21  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:47:21  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:47:21  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:47:21  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:47:21  26  --
22:47:21  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:47:21  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:47:21  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:47:21  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:47:21  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:47:21  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:47:21  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:47:21  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:47:21  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:47:21  36  FROM di5min WHERE pair LIKE'%eur%'
22:47:21  37  AND ydate > sysdate - 95
22:47:21  38  ORDER BY ydate
22:47:21  39  /

View created.

Elapsed: 00:00:00.06
22:47:21 SQL> 
22:47:21 SQL> -- rpt
22:47:21 SQL> 
22:47:21 SQL> SELECT
22:47:21   2  pair
22:47:21   3  ,COUNT(pair)
22:47:21   4  ,MIN(clse),MAX(clse)
22:47:21   5  ,MIN(avg6),MAX(avg6)
22:47:21   6  ,MIN(ydate),MAX(ydate)
22:47:21   7  FROM svm6102
22:47:21   8  GROUP BY pair
22:47:21   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19838    1.29735	   1.4273 1.29875103 1.42436233 2010-09-26 22:50:01 2010-12-30 22:40:00

Elapsed: 00:00:00.93
22:47:22 SQL> 
22:47:22 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:47:22 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.05
22:47:22 SQL> CREATE TABLE svm6122 COMPRESS AS
22:47:22   2  SELECT
22:47:22   3  pair
22:47:22   4  ,ydate
22:47:22   5  ,prdate
22:47:22   6  ,clse
22:47:22   7  -- g6 is important. I want to predict g6:
22:47:22   8  ,ld6 - clse g6
22:47:22   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:47:22  10  -- I want more attributes from the ones I derived above:
22:47:22  11  -- clse relation to moving-min
22:47:22  12  ,clse-min4  cm4
22:47:22  13  ,clse-min6  cm6
22:47:22  14  ,clse-min8  cm8
22:47:22  15  ,clse-min10 cm10
22:47:22  16  ,clse-min12 cm12
22:47:22  17  ,clse-min14 cm14
22:47:22  18  ,clse-min16 cm16
22:47:22  19  ,clse-min18 cm18
22:47:22  20  -- clse relation to moving-avg
22:47:22  21  ,clse-avg4  ca4
22:47:22  22  ,clse-avg6  ca6
22:47:22  23  ,clse-avg8  ca8
22:47:22  24  ,clse-avg10 ca10
22:47:22  25  ,clse-avg12 ca12
22:47:22  26  ,clse-avg14 ca14
22:47:22  27  ,clse-avg16 ca16
22:47:22  28  ,clse-avg18 ca18
22:47:22  29  -- clse relation to moving-max
22:47:22  30  ,clse-max4  cx4
22:47:22  31  ,clse-max6  cx6
22:47:22  32  ,clse-max8  cx8
22:47:22  33  ,clse-max10 cx10
22:47:22  34  ,clse-max12 cx12
22:47:22  35  ,clse-max14 cx14
22:47:22  36  ,clse-max16 cx16
22:47:22  37  ,clse-max18 cx18
22:47:22  38  -- Derive more attributes.
22:47:22  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:47:22  40  -- But COVAR_POP is more stable:
22:47:22  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:47:22  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:47:22  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:47:22  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:47:22  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:47:22  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:47:22  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:47:22  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:47:22  49  -- Derive date related attributes:
22:47:22  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:47:22  51  ,0+TO_CHAR(ydate,'D')d
22:47:22  52  ,0+TO_CHAR(ydate,'W')w
22:47:22  53  -- mpm stands for minutes-past-midnight:
22:47:22  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:47:22  55  -- mph stands for minutes-past-hour:
22:47:22  56  ,0+TO_CHAR(ydate,'MI')mph
22:47:22  57  FROM svm6102
22:47:22  58  ORDER BY ydate
22:47:22  59  /

Table created.

Elapsed: 00:00:02.36
22:47:25 SQL> 
22:47:25 SQL> -- rpt
22:47:25 SQL> 
22:47:25 SQL> SELECT
22:47:25   2  pair
22:47:25   3  ,COUNT(pair)
22:47:25   4  ,MIN(clse),MAX(clse)
22:47:25   5  ,MIN(ydate),MAX(ydate)
22:47:25   6  FROM svm6122
22:47:25   7  GROUP BY pair
22:47:25   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19838    1.29735	   1.4273 2010-09-26 22:50:01 2010-12-30 22:40:00

Elapsed: 00:00:00.05
22:47:25 SQL> 
22:47:25 SQL> -- Prepare for derivation of NTILE based params:
22:47:25 SQL> 
22:47:25 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.74
22:47:25 SQL> CREATE TABLE svm6142 COMPRESS AS
22:47:25   2  SELECT
22:47:25   3  pair
22:47:25   4  ,ydate
22:47:25   5  ,prdate
22:47:25   6  ,clse
22:47:25   7  ,g6
22:47:25   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:47:25   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:47:25  10  ,CASE WHEN trend IS NULL THEN 1
22:47:25  11  	    WHEN trend =0      THEN 1
22:47:25  12  	    ELSE trend END trend
22:47:25  13  ,cm4
22:47:25  14  ,cm6
22:47:25  15  ,cm8
22:47:25  16  ,cm10
22:47:25  17  ,cm12
22:47:25  18  ,cm14
22:47:25  19  ,cm16
22:47:25  20  ,cm18
22:47:25  21  --
22:47:25  22  ,ca4
22:47:25  23  ,ca6
22:47:25  24  ,ca8
22:47:25  25  ,ca10
22:47:25  26  ,ca12
22:47:25  27  ,ca14
22:47:25  28  ,ca16
22:47:25  29  ,ca18
22:47:25  30  --
22:47:25  31  ,cx4
22:47:25  32  ,cx6
22:47:25  33  ,cx8
22:47:25  34  ,cx10
22:47:25  35  ,cx12
22:47:25  36  ,cx14
22:47:25  37  ,cx16
22:47:25  38  ,cx18
22:47:25  39  --
22:47:25  40  ,crr4
22:47:25  41  ,crr6
22:47:25  42  ,crr8
22:47:25  43  ,crr10
22:47:25  44  ,crr12
22:47:25  45  ,crr14
22:47:25  46  ,crr16
22:47:25  47  ,crr18
22:47:25  48  --
22:47:25  49  ,hh
22:47:25  50  ,d
22:47:25  51  ,w
22:47:25  52  ,mpm
22:47:25  53  ,mph
22:47:25  54  FROM svm6122
22:47:25  55  ORDER BY ydate
22:47:25  56  /

Table created.

Elapsed: 00:00:00.37
22:47:26 SQL> 
22:47:26 SQL> -- rpt
22:47:26 SQL> 
22:47:26 SQL> SELECT
22:47:26   2  pair
22:47:26   3  ,trend
22:47:26   4  ,gatt
22:47:26   5  ,COUNT(pair)
22:47:26   6  ,AVG(g6)
22:47:26   7  FROM svm6142
22:47:26   8  GROUP BY pair,trend,gatt
22:47:26   9  ORDER BY pair,trend,gatt
22:47:26  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6107 -.00308462
eur_usd 	-1 up	      3753 .004490504
eur_usd 	-1		16
eur_usd 	 1 nup	      6066 -.00309001
eur_usd 	 1 up	      3840 .005051344
eur_usd 	 1		56

6 rows selected.

Elapsed: 00:00:00.04
22:47:26 SQL> 
22:47:26 SQL> 
22:47:26 SQL> -- Derive NTILE based params:
22:47:26 SQL> 
22:47:26 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.31
22:47:26 SQL> CREATE TABLE svm6162 COMPRESS AS
22:47:26   2  SELECT
22:47:26   3  pair
22:47:26   4  ,ydate
22:47:26   5  ,prdate
22:47:26   6  ,clse
22:47:26   7  ,g6
22:47:26   8  ,gatt
22:47:26   9  ,gattn
22:47:26  10  ,trend
22:47:26  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:47:26  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:47:26  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:47:26  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:47:26  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:47:26  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:47:26  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:47:26  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:47:26  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:47:26  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:47:26  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:47:26  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:47:26  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:47:26  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:47:26  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:47:26  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:47:26  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:47:26  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:47:26  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:47:26  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:47:26  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:47:26  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:47:26  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:47:26  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:47:26  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:47:26  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:47:26  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:47:26  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:47:26  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:47:26  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:47:26  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:47:26  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:47:26  43  ,hh  att32
22:47:26  44  ,d   att33
22:47:26  45  ,w   att34
22:47:26  46  ,mpm att35
22:47:26  47  ,mph att36
22:47:26  48  ,trend att37
22:47:26  49  FROM svm6142
22:47:26  50  ORDER BY ydate
22:47:26  51  /

Table created.

Elapsed: 00:00:04.81
22:47:31 SQL> 
22:47:31 SQL> -- rpt
22:47:31 SQL> 
22:47:31 SQL> SELECT
22:47:31   2  pair
22:47:31   3  ,trend
22:47:31   4  ,gatt
22:47:31   5  ,COUNT(pair)
22:47:31   6  ,AVG(g6)
22:47:31   7  FROM svm6162
22:47:31   8  GROUP BY pair,trend,gatt
22:47:31   9  ORDER BY pair,trend,gatt
22:47:31  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6107 -.00308462
eur_usd 	-1 up	      3753 .004490504
eur_usd 	-1		16
eur_usd 	 1 nup	      6066 -.00309001
eur_usd 	 1 up	      3840 .005051344
eur_usd 	 1		56

6 rows selected.

Elapsed: 00:00:00.04
22:47:31 SQL> 
22:47:31 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
22:47:31 SQL> CREATE TABLE modsrc COMPRESS AS
22:47:31   2  SELECT
22:47:31   3  pair
22:47:31   4  ,ydate
22:47:31   5  ,prdate
22:47:31   6  ,trend
22:47:31   7  ,g6
22:47:31   8  ,gatt
22:47:31   9  ,gattn
22:47:31  10  FROM svm6162
22:47:31  11  /

Table created.

Elapsed: 00:00:00.09
22:47:31 SQL> 
22:47:31 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
22:47:31 SQL> 
22:47:31 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
22:47:31 SQL> CREATE TABLE eur_ms610 COMPRESS AS
22:47:31   2  SELECT
22:47:31   3  ydate
22:47:31   4  ,trend eur_trend
22:47:31   5  ,g6    eur_g6
22:47:31   6  ,gatt  eur_gatt
22:47:31   7  ,gattn eur_gattn
22:47:31   8  FROM modsrc
22:47:31   9  /

Table created.

Elapsed: 00:00:00.06
22:47:32 SQL> 
22:47:32 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
22:47:32 SQL> 
22:47:32 SQL> -- I need a copy of the attributes:
22:47:32 SQL> 
22:47:32 SQL> 
22:47:32 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.04
22:47:32 SQL> CREATE TABLE eur_att COMPRESS AS
22:47:32   2  SELECT
22:47:32   3  ydate
22:47:32   4  ,att00 eur_att00
22:47:32   5  ,att01 eur_att01
22:47:32   6  ,att02 eur_att02
22:47:32   7  ,att03 eur_att03
22:47:32   8  ,att04 eur_att04
22:47:32   9  ,att05 eur_att05
22:47:32  10  ,att06 eur_att06
22:47:32  11  ,att07 eur_att07
22:47:32  12  ,att08 eur_att08
22:47:32  13  ,att09 eur_att09
22:47:32  14  ,att10 eur_att10
22:47:32  15  ,att11 eur_att11
22:47:32  16  ,att12 eur_att12
22:47:32  17  ,att13 eur_att13
22:47:32  18  ,att14 eur_att14
22:47:32  19  ,att15 eur_att15
22:47:32  20  ,att16 eur_att16
22:47:32  21  ,att17 eur_att17
22:47:32  22  ,att18 eur_att18
22:47:32  23  ,att19 eur_att19
22:47:32  24  ,att20 eur_att20
22:47:32  25  ,att21 eur_att21
22:47:32  26  ,att22 eur_att22
22:47:32  27  ,att23 eur_att23
22:47:32  28  ,att24 eur_att24
22:47:32  29  ,att25 eur_att25
22:47:32  30  ,att26 eur_att26
22:47:32  31  ,att27 eur_att27
22:47:32  32  ,att28 eur_att28
22:47:32  33  ,att29 eur_att29
22:47:32  34  ,att30 eur_att30
22:47:32  35  ,att31 eur_att31
22:47:32  36  ,att32 eur_att32
22:47:32  37  ,att33 eur_att33
22:47:32  38  ,att34 eur_att34
22:47:32  39  ,att35 eur_att35
22:47:32  40  ,att36 eur_att36
22:47:32  41  ,att37 eur_att37
22:47:32  42  FROM svm6162
22:47:32  43  /

Table created.

Elapsed: 00:00:00.18
22:47:32 SQL> 
22:47:32 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
22:47:32 SQL> 
22:47:32 SQL> -- rpt
22:47:32 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19838

Elapsed: 00:00:00.89
22:47:33 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19838

Elapsed: 00:00:00.00
22:47:33 SQL> 
22:47:33 SQL> --
22:47:33 SQL> -- aud610.sql
22:47:33 SQL> --
22:47:33 SQL> 
22:47:33 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:47:33 SQL> 
22:47:33 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.40
22:47:34 SQL> 
22:47:34 SQL> -- I created di5min here:
22:47:34 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:47:34 SQL> 
22:47:34 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:47:34   2  SELECT
22:47:34   3  pair
22:47:34   4  ,ydate
22:47:34   5  ,prdate
22:47:34   6  ,rownum rnum -- acts as t in my time-series
22:47:34   7  ,clse
22:47:34   8  -- Derive a bunch of attributes from clse, the latest price:
22:47:34   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:47:34  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:47:34  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:47:34  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:47:34  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:47:34  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:47:34  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:47:34  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:47:34  17  --
22:47:34  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:47:34  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:47:34  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:47:34  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:47:34  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:47:34  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:47:34  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:47:34  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:47:34  26  --
22:47:34  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:47:34  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:47:34  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:47:34  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:47:34  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:47:34  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:47:34  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:47:34  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:47:34  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:47:34  36  FROM di5min WHERE pair LIKE'%aud%'
22:47:34  37  AND ydate > sysdate - 95
22:47:34  38  ORDER BY ydate
22:47:34  39  /

View created.

Elapsed: 00:00:00.05
22:47:34 SQL> 
22:47:34 SQL> -- rpt
22:47:34 SQL> 
22:47:34 SQL> SELECT
22:47:34   2  pair
22:47:34   3  ,COUNT(pair)
22:47:34   4  ,MIN(clse),MAX(clse)
22:47:34   5  ,MIN(avg6),MAX(avg6)
22:47:34   6  ,MIN(ydate),MAX(ydate)
22:47:34   7  FROM svm6102
22:47:34   8  GROUP BY pair
22:47:34   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19835	.95405	1.0195625 .957141438 1.01819366 2010-09-26 22:50:01 2010-12-30 22:40:00

Elapsed: 00:00:00.88
22:47:35 SQL> 
22:47:35 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:47:35 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.32
22:47:35 SQL> CREATE TABLE svm6122 COMPRESS AS
22:47:35   2  SELECT
22:47:35   3  pair
22:47:35   4  ,ydate
22:47:35   5  ,prdate
22:47:35   6  ,clse
22:47:35   7  -- g6 is important. I want to predict g6:
22:47:35   8  ,ld6 - clse g6
22:47:35   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:47:35  10  -- I want more attributes from the ones I derived above:
22:47:35  11  -- clse relation to moving-min
22:47:35  12  ,clse-min4  cm4
22:47:35  13  ,clse-min6  cm6
22:47:35  14  ,clse-min8  cm8
22:47:35  15  ,clse-min10 cm10
22:47:35  16  ,clse-min12 cm12
22:47:35  17  ,clse-min14 cm14
22:47:35  18  ,clse-min16 cm16
22:47:35  19  ,clse-min18 cm18
22:47:35  20  -- clse relation to moving-avg
22:47:35  21  ,clse-avg4  ca4
22:47:35  22  ,clse-avg6  ca6
22:47:35  23  ,clse-avg8  ca8
22:47:35  24  ,clse-avg10 ca10
22:47:35  25  ,clse-avg12 ca12
22:47:35  26  ,clse-avg14 ca14
22:47:35  27  ,clse-avg16 ca16
22:47:35  28  ,clse-avg18 ca18
22:47:35  29  -- clse relation to moving-max
22:47:35  30  ,clse-max4  cx4
22:47:35  31  ,clse-max6  cx6
22:47:35  32  ,clse-max8  cx8
22:47:35  33  ,clse-max10 cx10
22:47:35  34  ,clse-max12 cx12
22:47:35  35  ,clse-max14 cx14
22:47:35  36  ,clse-max16 cx16
22:47:35  37  ,clse-max18 cx18
22:47:35  38  -- Derive more attributes.
22:47:35  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:47:35  40  -- But COVAR_POP is more stable:
22:47:35  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:47:35  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:47:35  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:47:35  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:47:35  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:47:35  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:47:35  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:47:35  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:47:35  49  -- Derive date related attributes:
22:47:35  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:47:35  51  ,0+TO_CHAR(ydate,'D')d
22:47:35  52  ,0+TO_CHAR(ydate,'W')w
22:47:35  53  -- mpm stands for minutes-past-midnight:
22:47:35  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:47:35  55  -- mph stands for minutes-past-hour:
22:47:35  56  ,0+TO_CHAR(ydate,'MI')mph
22:47:35  57  FROM svm6102
22:47:35  58  ORDER BY ydate
22:47:35  59  /

Table created.

Elapsed: 00:00:02.05
22:47:37 SQL> 
22:47:37 SQL> -- rpt
22:47:37 SQL> 
22:47:37 SQL> SELECT
22:47:37   2  pair
22:47:37   3  ,COUNT(pair)
22:47:37   4  ,MIN(clse),MAX(clse)
22:47:37   5  ,MIN(ydate),MAX(ydate)
22:47:37   6  FROM svm6122
22:47:37   7  GROUP BY pair
22:47:37   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19835	.95405	1.0195625 2010-09-26 22:50:01 2010-12-30 22:40:00

Elapsed: 00:00:00.04
22:47:37 SQL> 
22:47:37 SQL> -- Prepare for derivation of NTILE based params:
22:47:37 SQL> 
22:47:37 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.18
22:47:37 SQL> CREATE TABLE svm6142 COMPRESS AS
22:47:37   2  SELECT
22:47:37   3  pair
22:47:37   4  ,ydate
22:47:37   5  ,prdate
22:47:37   6  ,clse
22:47:37   7  ,g6
22:47:37   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:47:37   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:47:37  10  ,CASE WHEN trend IS NULL THEN 1
22:47:37  11  	    WHEN trend =0      THEN 1
22:47:37  12  	    ELSE trend END trend
22:47:37  13  ,cm4
22:47:37  14  ,cm6
22:47:37  15  ,cm8
22:47:37  16  ,cm10
22:47:37  17  ,cm12
22:47:37  18  ,cm14
22:47:37  19  ,cm16
22:47:37  20  ,cm18
22:47:37  21  --
22:47:37  22  ,ca4
22:47:37  23  ,ca6
22:47:37  24  ,ca8
22:47:37  25  ,ca10
22:47:37  26  ,ca12
22:47:37  27  ,ca14
22:47:37  28  ,ca16
22:47:37  29  ,ca18
22:47:37  30  --
22:47:37  31  ,cx4
22:47:37  32  ,cx6
22:47:37  33  ,cx8
22:47:37  34  ,cx10
22:47:37  35  ,cx12
22:47:37  36  ,cx14
22:47:37  37  ,cx16
22:47:37  38  ,cx18
22:47:37  39  --
22:47:37  40  ,crr4
22:47:37  41  ,crr6
22:47:37  42  ,crr8
22:47:37  43  ,crr10
22:47:37  44  ,crr12
22:47:37  45  ,crr14
22:47:37  46  ,crr16
22:47:37  47  ,crr18
22:47:37  48  --
22:47:37  49  ,hh
22:47:37  50  ,d
22:47:37  51  ,w
22:47:37  52  ,mpm
22:47:37  53  ,mph
22:47:37  54  FROM svm6122
22:47:37  55  ORDER BY ydate
22:47:37  56  /

Table created.

Elapsed: 00:00:00.37
22:47:38 SQL> 
22:47:38 SQL> -- rpt
22:47:38 SQL> 
22:47:38 SQL> SELECT
22:47:38   2  pair
22:47:38   3  ,trend
22:47:38   4  ,gatt
22:47:38   5  ,COUNT(pair)
22:47:38   6  ,AVG(g6)
22:47:38   7  FROM svm6142
22:47:38   8  GROUP BY pair,trend,gatt
22:47:38   9  ORDER BY pair,trend,gatt
22:47:38  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5300 -.00210672
aud_usd 	-1 up	      3845  .00372513
aud_usd 	-1		36
aud_usd 	 1 nup	      6827 -.00210624
aud_usd 	 1 up	      3791 .004024199
aud_usd 	 1		36

6 rows selected.

Elapsed: 00:00:00.04
22:47:38 SQL> 
22:47:38 SQL> 
22:47:38 SQL> -- Derive NTILE based params:
22:47:38 SQL> 
22:47:38 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
22:47:38 SQL> CREATE TABLE svm6162 COMPRESS AS
22:47:38   2  SELECT
22:47:38   3  pair
22:47:38   4  ,ydate
22:47:38   5  ,prdate
22:47:38   6  ,clse
22:47:38   7  ,g6
22:47:38   8  ,gatt
22:47:38   9  ,gattn
22:47:38  10  ,trend
22:47:38  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:47:38  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:47:38  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:47:38  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:47:38  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:47:38  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:47:38  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:47:38  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:47:38  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:47:38  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:47:38  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:47:38  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:47:38  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:47:38  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:47:38  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:47:38  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:47:38  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:47:38  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:47:38  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:47:38  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:47:38  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:47:38  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:47:38  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:47:38  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:47:38  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:47:38  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:47:38  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:47:38  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:47:38  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:47:38  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:47:38  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:47:38  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:47:38  43  ,hh  att32
22:47:38  44  ,d   att33
22:47:38  45  ,w   att34
22:47:38  46  ,mpm att35
22:47:38  47  ,mph att36
22:47:38  48  ,trend att37
22:47:38  49  FROM svm6142
22:47:38  50  ORDER BY ydate
22:47:38  51  /

Table created.

Elapsed: 00:00:04.77
22:47:42 SQL> 
22:47:42 SQL> -- rpt
22:47:42 SQL> 
22:47:42 SQL> SELECT
22:47:42   2  pair
22:47:42   3  ,trend
22:47:42   4  ,gatt
22:47:42   5  ,COUNT(pair)
22:47:42   6  ,AVG(g6)
22:47:42   7  FROM svm6162
22:47:42   8  GROUP BY pair,trend,gatt
22:47:42   9  ORDER BY pair,trend,gatt
22:47:42  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5300 -.00210672
aud_usd 	-1 up	      3845  .00372513
aud_usd 	-1		36
aud_usd 	 1 nup	      6827 -.00210624
aud_usd 	 1 up	      3791 .004024199
aud_usd 	 1		36

6 rows selected.

Elapsed: 00:00:00.03
22:47:43 SQL> 
22:47:43 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
22:47:43 SQL> CREATE TABLE modsrc COMPRESS AS
22:47:43   2  SELECT
22:47:43   3  pair
22:47:43   4  ,ydate
22:47:43   5  ,prdate
22:47:43   6  ,trend
22:47:43   7  ,g6
22:47:43   8  ,gatt
22:47:43   9  ,gattn
22:47:43  10  FROM svm6162
22:47:43  11  /

Table created.

Elapsed: 00:00:00.08
22:47:43 SQL> 
22:47:43 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.97
22:47:44 SQL> 
22:47:44 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
22:47:44 SQL> CREATE TABLE aud_ms610 COMPRESS AS
22:47:44   2  SELECT
22:47:44   3  ydate
22:47:44   4  ,trend aud_trend
22:47:44   5  ,g6    aud_g6
22:47:44   6  ,gatt  aud_gatt
22:47:44   7  ,gattn aud_gattn
22:47:44   8  FROM modsrc
22:47:44   9  /

Table created.

Elapsed: 00:00:00.06
22:47:44 SQL> 
22:47:44 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
22:47:44 SQL> 
22:47:44 SQL> -- I need a copy of the attributes:
22:47:44 SQL> 
22:47:44 SQL> 
22:47:44 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.05
22:47:44 SQL> CREATE TABLE aud_att COMPRESS AS
22:47:44   2  SELECT
22:47:44   3  ydate
22:47:44   4  ,att00 aud_att00
22:47:44   5  ,att01 aud_att01
22:47:44   6  ,att02 aud_att02
22:47:44   7  ,att03 aud_att03
22:47:44   8  ,att04 aud_att04
22:47:44   9  ,att05 aud_att05
22:47:44  10  ,att06 aud_att06
22:47:44  11  ,att07 aud_att07
22:47:44  12  ,att08 aud_att08
22:47:44  13  ,att09 aud_att09
22:47:44  14  ,att10 aud_att10
22:47:44  15  ,att11 aud_att11
22:47:44  16  ,att12 aud_att12
22:47:44  17  ,att13 aud_att13
22:47:44  18  ,att14 aud_att14
22:47:44  19  ,att15 aud_att15
22:47:44  20  ,att16 aud_att16
22:47:44  21  ,att17 aud_att17
22:47:44  22  ,att18 aud_att18
22:47:44  23  ,att19 aud_att19
22:47:44  24  ,att20 aud_att20
22:47:44  25  ,att21 aud_att21
22:47:44  26  ,att22 aud_att22
22:47:44  27  ,att23 aud_att23
22:47:44  28  ,att24 aud_att24
22:47:44  29  ,att25 aud_att25
22:47:44  30  ,att26 aud_att26
22:47:44  31  ,att27 aud_att27
22:47:44  32  ,att28 aud_att28
22:47:44  33  ,att29 aud_att29
22:47:44  34  ,att30 aud_att30
22:47:44  35  ,att31 aud_att31
22:47:44  36  ,att32 aud_att32
22:47:44  37  ,att33 aud_att33
22:47:44  38  ,att34 aud_att34
22:47:44  39  ,att35 aud_att35
22:47:44  40  ,att36 aud_att36
22:47:44  41  ,att37 aud_att37
22:47:44  42  FROM svm6162
22:47:44  43  /

Table created.

Elapsed: 00:00:00.18
22:47:44 SQL> 
22:47:44 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
22:47:45 SQL> 
22:47:45 SQL> -- rpt
22:47:45 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19835

Elapsed: 00:00:00.86
22:47:46 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19835

Elapsed: 00:00:00.01
22:47:46 SQL> 
22:47:46 SQL> --
22:47:46 SQL> -- gbp610.sql
22:47:46 SQL> --
22:47:46 SQL> 
22:47:46 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:47:46 SQL> 
22:47:46 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.40
22:47:46 SQL> 
22:47:46 SQL> -- I created di5min here:
22:47:46 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:47:46 SQL> 
22:47:46 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:47:46   2  SELECT
22:47:46   3  pair
22:47:46   4  ,ydate
22:47:46   5  ,prdate
22:47:46   6  ,rownum rnum -- acts as t in my time-series
22:47:46   7  ,clse
22:47:46   8  -- Derive a bunch of attributes from clse, the latest price:
22:47:46   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:47:46  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:47:46  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:47:46  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:47:46  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:47:46  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:47:46  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:47:46  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:47:46  17  --
22:47:46  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:47:46  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:47:46  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:47:46  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:47:46  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:47:46  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:47:46  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:47:46  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:47:46  26  --
22:47:46  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:47:46  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:47:46  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:47:46  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:47:46  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:47:46  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:47:46  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:47:46  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:47:46  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:47:46  36  FROM di5min WHERE pair LIKE'%gbp%'
22:47:46  37  AND ydate > sysdate - 95
22:47:46  38  ORDER BY ydate
22:47:46  39  /

View created.

Elapsed: 00:00:00.05
22:47:46 SQL> 
22:47:46 SQL> -- rpt
22:47:46 SQL> 
22:47:46 SQL> SELECT
22:47:46   2  pair
22:47:46   3  ,COUNT(pair)
22:47:46   4  ,MIN(clse),MAX(clse)
22:47:46   5  ,MIN(avg6),MAX(avg6)
22:47:46   6  ,MIN(ydate),MAX(ydate)
22:47:46   7  FROM svm6102
22:47:46   8  GROUP BY pair
22:47:46   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19837   1.535325	   1.6295 1.53696747 1.62716986 2010-09-26 22:50:01 2010-12-30 22:40:00

Elapsed: 00:00:00.86
22:47:47 SQL> 
22:47:47 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:47:47 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
22:47:47 SQL> CREATE TABLE svm6122 COMPRESS AS
22:47:47   2  SELECT
22:47:47   3  pair
22:47:47   4  ,ydate
22:47:47   5  ,prdate
22:47:47   6  ,clse
22:47:47   7  -- g6 is important. I want to predict g6:
22:47:47   8  ,ld6 - clse g6
22:47:47   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:47:47  10  -- I want more attributes from the ones I derived above:
22:47:47  11  -- clse relation to moving-min
22:47:47  12  ,clse-min4  cm4
22:47:47  13  ,clse-min6  cm6
22:47:47  14  ,clse-min8  cm8
22:47:47  15  ,clse-min10 cm10
22:47:47  16  ,clse-min12 cm12
22:47:47  17  ,clse-min14 cm14
22:47:47  18  ,clse-min16 cm16
22:47:47  19  ,clse-min18 cm18
22:47:47  20  -- clse relation to moving-avg
22:47:47  21  ,clse-avg4  ca4
22:47:47  22  ,clse-avg6  ca6
22:47:47  23  ,clse-avg8  ca8
22:47:47  24  ,clse-avg10 ca10
22:47:47  25  ,clse-avg12 ca12
22:47:47  26  ,clse-avg14 ca14
22:47:47  27  ,clse-avg16 ca16
22:47:47  28  ,clse-avg18 ca18
22:47:47  29  -- clse relation to moving-max
22:47:47  30  ,clse-max4  cx4
22:47:47  31  ,clse-max6  cx6
22:47:47  32  ,clse-max8  cx8
22:47:47  33  ,clse-max10 cx10
22:47:47  34  ,clse-max12 cx12
22:47:47  35  ,clse-max14 cx14
22:47:47  36  ,clse-max16 cx16
22:47:47  37  ,clse-max18 cx18
22:47:47  38  -- Derive more attributes.
22:47:47  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:47:47  40  -- But COVAR_POP is more stable:
22:47:47  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:47:47  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:47:47  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:47:47  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:47:47  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:47:47  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:47:47  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:47:47  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:47:47  49  -- Derive date related attributes:
22:47:47  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:47:47  51  ,0+TO_CHAR(ydate,'D')d
22:47:47  52  ,0+TO_CHAR(ydate,'W')w
22:47:47  53  -- mpm stands for minutes-past-midnight:
22:47:47  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:47:47  55  -- mph stands for minutes-past-hour:
22:47:47  56  ,0+TO_CHAR(ydate,'MI')mph
22:47:47  57  FROM svm6102
22:47:47  58  ORDER BY ydate
22:47:47  59  /

Table created.

Elapsed: 00:00:02.07
22:47:49 SQL> 
22:47:49 SQL> -- rpt
22:47:49 SQL> 
22:47:49 SQL> SELECT
22:47:49   2  pair
22:47:49   3  ,COUNT(pair)
22:47:49   4  ,MIN(clse),MAX(clse)
22:47:49   5  ,MIN(ydate),MAX(ydate)
22:47:49   6  FROM svm6122
22:47:49   7  GROUP BY pair
22:47:49   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19837   1.535325	   1.6295 2010-09-26 22:50:01 2010-12-30 22:40:00

Elapsed: 00:00:00.05
22:47:49 SQL> 
22:47:49 SQL> -- Prepare for derivation of NTILE based params:
22:47:49 SQL> 
22:47:49 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.21
22:47:49 SQL> CREATE TABLE svm6142 COMPRESS AS
22:47:49   2  SELECT
22:47:49   3  pair
22:47:49   4  ,ydate
22:47:49   5  ,prdate
22:47:49   6  ,clse
22:47:49   7  ,g6
22:47:49   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:47:49   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:47:49  10  ,CASE WHEN trend IS NULL THEN 1
22:47:49  11  	    WHEN trend =0      THEN 1
22:47:49  12  	    ELSE trend END trend
22:47:49  13  ,cm4
22:47:49  14  ,cm6
22:47:49  15  ,cm8
22:47:49  16  ,cm10
22:47:49  17  ,cm12
22:47:49  18  ,cm14
22:47:49  19  ,cm16
22:47:49  20  ,cm18
22:47:49  21  --
22:47:49  22  ,ca4
22:47:49  23  ,ca6
22:47:49  24  ,ca8
22:47:49  25  ,ca10
22:47:49  26  ,ca12
22:47:49  27  ,ca14
22:47:49  28  ,ca16
22:47:49  29  ,ca18
22:47:49  30  --
22:47:49  31  ,cx4
22:47:49  32  ,cx6
22:47:49  33  ,cx8
22:47:49  34  ,cx10
22:47:49  35  ,cx12
22:47:49  36  ,cx14
22:47:49  37  ,cx16
22:47:49  38  ,cx18
22:47:49  39  --
22:47:49  40  ,crr4
22:47:49  41  ,crr6
22:47:49  42  ,crr8
22:47:49  43  ,crr10
22:47:49  44  ,crr12
22:47:49  45  ,crr14
22:47:49  46  ,crr16
22:47:49  47  ,crr18
22:47:49  48  --
22:47:49  49  ,hh
22:47:49  50  ,d
22:47:49  51  ,w
22:47:49  52  ,mpm
22:47:49  53  ,mph
22:47:49  54  FROM svm6122
22:47:49  55  ORDER BY ydate
22:47:49  56  /

Table created.

Elapsed: 00:00:00.36
22:47:50 SQL> 
22:47:50 SQL> -- rpt
22:47:50 SQL> 
22:47:50 SQL> SELECT
22:47:50   2  pair
22:47:50   3  ,trend
22:47:50   4  ,gatt
22:47:50   5  ,COUNT(pair)
22:47:50   6  ,AVG(g6)
22:47:50   7  FROM svm6142
22:47:50   8  GROUP BY pair,trend,gatt
22:47:50   9  ORDER BY pair,trend,gatt
22:47:50  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6380 -.00261105
gbp_usd 	-1 up	      3590 .004282385
gbp_usd 	-1		56
gbp_usd 	 1 nup	      6309 -.00267348
gbp_usd 	 1 up	      3486 .004359162
gbp_usd 	 1		16

6 rows selected.

Elapsed: 00:00:00.03
22:47:50 SQL> 
22:47:50 SQL> 
22:47:50 SQL> -- Derive NTILE based params:
22:47:50 SQL> 
22:47:50 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
22:47:50 SQL> CREATE TABLE svm6162 COMPRESS AS
22:47:50   2  SELECT
22:47:50   3  pair
22:47:50   4  ,ydate
22:47:50   5  ,prdate
22:47:50   6  ,clse
22:47:50   7  ,g6
22:47:50   8  ,gatt
22:47:50   9  ,gattn
22:47:50  10  ,trend
22:47:50  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:47:50  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:47:50  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:47:50  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:47:50  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:47:50  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:47:50  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:47:50  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:47:50  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:47:50  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:47:50  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:47:50  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:47:50  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:47:50  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:47:50  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:47:50  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:47:50  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:47:50  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:47:50  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:47:50  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:47:50  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:47:50  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:47:50  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:47:50  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:47:50  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:47:50  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:47:50  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:47:50  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:47:50  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:47:50  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:47:50  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:47:50  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:47:50  43  ,hh  att32
22:47:50  44  ,d   att33
22:47:50  45  ,w   att34
22:47:50  46  ,mpm att35
22:47:50  47  ,mph att36
22:47:50  48  ,trend att37
22:47:50  49  FROM svm6142
22:47:50  50  ORDER BY ydate
22:47:50  51  /

Table created.

Elapsed: 00:00:04.84
22:47:55 SQL> 
22:47:55 SQL> -- rpt
22:47:55 SQL> 
22:47:55 SQL> SELECT
22:47:55   2  pair
22:47:55   3  ,trend
22:47:55   4  ,gatt
22:47:55   5  ,COUNT(pair)
22:47:55   6  ,AVG(g6)
22:47:55   7  FROM svm6162
22:47:55   8  GROUP BY pair,trend,gatt
22:47:55   9  ORDER BY pair,trend,gatt
22:47:55  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6380 -.00261105
gbp_usd 	-1 up	      3590 .004282385
gbp_usd 	-1		56
gbp_usd 	 1 nup	      6309 -.00267348
gbp_usd 	 1 up	      3486 .004359162
gbp_usd 	 1		16

6 rows selected.

Elapsed: 00:00:00.03
22:47:55 SQL> 
22:47:55 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
22:47:55 SQL> CREATE TABLE modsrc COMPRESS AS
22:47:55   2  SELECT
22:47:55   3  pair
22:47:55   4  ,ydate
22:47:55   5  ,prdate
22:47:55   6  ,trend
22:47:55   7  ,g6
22:47:55   8  ,gatt
22:47:55   9  ,gattn
22:47:55  10  FROM svm6162
22:47:55  11  /

Table created.

Elapsed: 00:00:00.08
22:47:55 SQL> 
22:47:55 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
22:47:55 SQL> 
22:47:55 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
22:47:55 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
22:47:55   2  SELECT
22:47:55   3  ydate
22:47:55   4  ,trend gbp_trend
22:47:55   5  ,g6    gbp_g6
22:47:55   6  ,gatt  gbp_gatt
22:47:55   7  ,gattn gbp_gattn
22:47:55   8  FROM modsrc
22:47:55   9  /

Table created.

Elapsed: 00:00:00.05
22:47:55 SQL> 
22:47:55 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
22:47:56 SQL> 
22:47:56 SQL> -- I need a copy of the attributes:
22:47:56 SQL> 
22:47:56 SQL> 
22:47:56 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.18
22:47:56 SQL> CREATE TABLE gbp_att COMPRESS AS
22:47:56   2  SELECT
22:47:56   3  ydate
22:47:56   4  ,att00 gbp_att00
22:47:56   5  ,att01 gbp_att01
22:47:56   6  ,att02 gbp_att02
22:47:56   7  ,att03 gbp_att03
22:47:56   8  ,att04 gbp_att04
22:47:56   9  ,att05 gbp_att05
22:47:56  10  ,att06 gbp_att06
22:47:56  11  ,att07 gbp_att07
22:47:56  12  ,att08 gbp_att08
22:47:56  13  ,att09 gbp_att09
22:47:56  14  ,att10 gbp_att10
22:47:56  15  ,att11 gbp_att11
22:47:56  16  ,att12 gbp_att12
22:47:56  17  ,att13 gbp_att13
22:47:56  18  ,att14 gbp_att14
22:47:56  19  ,att15 gbp_att15
22:47:56  20  ,att16 gbp_att16
22:47:56  21  ,att17 gbp_att17
22:47:56  22  ,att18 gbp_att18
22:47:56  23  ,att19 gbp_att19
22:47:56  24  ,att20 gbp_att20
22:47:56  25  ,att21 gbp_att21
22:47:56  26  ,att22 gbp_att22
22:47:56  27  ,att23 gbp_att23
22:47:56  28  ,att24 gbp_att24
22:47:56  29  ,att25 gbp_att25
22:47:56  30  ,att26 gbp_att26
22:47:56  31  ,att27 gbp_att27
22:47:56  32  ,att28 gbp_att28
22:47:56  33  ,att29 gbp_att29
22:47:56  34  ,att30 gbp_att30
22:47:56  35  ,att31 gbp_att31
22:47:56  36  ,att32 gbp_att32
22:47:56  37  ,att33 gbp_att33
22:47:56  38  ,att34 gbp_att34
22:47:56  39  ,att35 gbp_att35
22:47:56  40  ,att36 gbp_att36
22:47:56  41  ,att37 gbp_att37
22:47:56  42  FROM svm6162
22:47:56  43  /

Table created.

Elapsed: 00:00:00.17
22:47:56 SQL> 
22:47:56 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
22:47:56 SQL> 
22:47:56 SQL> -- rpt
22:47:56 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19837

Elapsed: 00:00:00.86
22:47:57 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19837

Elapsed: 00:00:00.00
22:47:57 SQL> 
22:47:57 SQL> --
22:47:57 SQL> -- jpy610.sql
22:47:57 SQL> --
22:47:57 SQL> 
22:47:57 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:47:57 SQL> 
22:47:57 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:02.13
22:47:59 SQL> 
22:47:59 SQL> -- I created di5min here:
22:47:59 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:47:59 SQL> 
22:47:59 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:47:59   2  SELECT
22:47:59   3  pair
22:47:59   4  ,ydate
22:47:59   5  ,prdate
22:47:59   6  ,rownum rnum -- acts as t in my time-series
22:47:59   7  ,clse
22:47:59   8  -- Derive a bunch of attributes from clse, the latest price:
22:47:59   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:47:59  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:47:59  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:47:59  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:47:59  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:47:59  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:47:59  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:47:59  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:47:59  17  --
22:47:59  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:47:59  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:47:59  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:47:59  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:47:59  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:47:59  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:47:59  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:47:59  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:47:59  26  --
22:47:59  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:47:59  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:47:59  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:47:59  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:47:59  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:47:59  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:47:59  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:47:59  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:47:59  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:47:59  36  FROM di5min WHERE pair LIKE'%jpy%'
22:47:59  37  AND ydate > sysdate - 95
22:47:59  38  ORDER BY ydate
22:47:59  39  /

View created.

Elapsed: 00:00:00.10
22:47:59 SQL> 
22:47:59 SQL> -- rpt
22:47:59 SQL> 
22:47:59 SQL> SELECT
22:47:59   2  pair
22:47:59   3  ,COUNT(pair)
22:47:59   4  ,MIN(clse),MAX(clse)
22:47:59   5  ,MIN(avg6),MAX(avg6)
22:47:59   6  ,MIN(ydate),MAX(ydate)
22:47:59   7  FROM svm6102
22:47:59   8  GROUP BY pair
22:47:59   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19835	 80.25	   84.485 80.3595205	84.3425 2010-09-26 22:50:01 2010-12-30 22:40:00

Elapsed: 00:00:00.97
22:48:00 SQL> 
22:48:00 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:48:00 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.17
22:48:01 SQL> CREATE TABLE svm6122 COMPRESS AS
22:48:01   2  SELECT
22:48:01   3  pair
22:48:01   4  ,ydate
22:48:01   5  ,prdate
22:48:01   6  ,clse
22:48:01   7  -- g6 is important. I want to predict g6:
22:48:01   8  ,ld6 - clse g6
22:48:01   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:48:01  10  -- I want more attributes from the ones I derived above:
22:48:01  11  -- clse relation to moving-min
22:48:01  12  ,clse-min4  cm4
22:48:01  13  ,clse-min6  cm6
22:48:01  14  ,clse-min8  cm8
22:48:01  15  ,clse-min10 cm10
22:48:01  16  ,clse-min12 cm12
22:48:01  17  ,clse-min14 cm14
22:48:01  18  ,clse-min16 cm16
22:48:01  19  ,clse-min18 cm18
22:48:01  20  -- clse relation to moving-avg
22:48:01  21  ,clse-avg4  ca4
22:48:01  22  ,clse-avg6  ca6
22:48:01  23  ,clse-avg8  ca8
22:48:01  24  ,clse-avg10 ca10
22:48:01  25  ,clse-avg12 ca12
22:48:01  26  ,clse-avg14 ca14
22:48:01  27  ,clse-avg16 ca16
22:48:01  28  ,clse-avg18 ca18
22:48:01  29  -- clse relation to moving-max
22:48:01  30  ,clse-max4  cx4
22:48:01  31  ,clse-max6  cx6
22:48:01  32  ,clse-max8  cx8
22:48:01  33  ,clse-max10 cx10
22:48:01  34  ,clse-max12 cx12
22:48:01  35  ,clse-max14 cx14
22:48:01  36  ,clse-max16 cx16
22:48:01  37  ,clse-max18 cx18
22:48:01  38  -- Derive more attributes.
22:48:01  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:48:01  40  -- But COVAR_POP is more stable:
22:48:01  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:48:01  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:48:01  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:48:01  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:48:01  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:48:01  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:48:01  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:48:01  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:48:01  49  -- Derive date related attributes:
22:48:01  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:48:01  51  ,0+TO_CHAR(ydate,'D')d
22:48:01  52  ,0+TO_CHAR(ydate,'W')w
22:48:01  53  -- mpm stands for minutes-past-midnight:
22:48:01  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:48:01  55  -- mph stands for minutes-past-hour:
22:48:01  56  ,0+TO_CHAR(ydate,'MI')mph
22:48:01  57  FROM svm6102
22:48:01  58  ORDER BY ydate
22:48:01  59  /

Table created.

Elapsed: 00:00:02.08
22:48:03 SQL> 
22:48:03 SQL> -- rpt
22:48:03 SQL> 
22:48:03 SQL> SELECT
22:48:03   2  pair
22:48:03   3  ,COUNT(pair)
22:48:03   4  ,MIN(clse),MAX(clse)
22:48:03   5  ,MIN(ydate),MAX(ydate)
22:48:03   6  FROM svm6122
22:48:03   7  GROUP BY pair
22:48:03   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19835	 80.25	   84.485 2010-09-26 22:50:01 2010-12-30 22:40:00

Elapsed: 00:00:00.07
22:48:03 SQL> 
22:48:03 SQL> -- Prepare for derivation of NTILE based params:
22:48:03 SQL> 
22:48:03 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.19
22:48:03 SQL> CREATE TABLE svm6142 COMPRESS AS
22:48:03   2  SELECT
22:48:03   3  pair
22:48:03   4  ,ydate
22:48:03   5  ,prdate
22:48:03   6  ,clse
22:48:03   7  ,g6
22:48:03   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:48:03   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:48:03  10  ,CASE WHEN trend IS NULL THEN 1
22:48:03  11  	    WHEN trend =0      THEN 1
22:48:03  12  	    ELSE trend END trend
22:48:03  13  ,cm4
22:48:03  14  ,cm6
22:48:03  15  ,cm8
22:48:03  16  ,cm10
22:48:03  17  ,cm12
22:48:03  18  ,cm14
22:48:03  19  ,cm16
22:48:03  20  ,cm18
22:48:03  21  --
22:48:03  22  ,ca4
22:48:03  23  ,ca6
22:48:03  24  ,ca8
22:48:03  25  ,ca10
22:48:03  26  ,ca12
22:48:03  27  ,ca14
22:48:03  28  ,ca16
22:48:03  29  ,ca18
22:48:03  30  --
22:48:03  31  ,cx4
22:48:03  32  ,cx6
22:48:03  33  ,cx8
22:48:03  34  ,cx10
22:48:03  35  ,cx12
22:48:03  36  ,cx14
22:48:03  37  ,cx16
22:48:03  38  ,cx18
22:48:03  39  --
22:48:03  40  ,crr4
22:48:03  41  ,crr6
22:48:03  42  ,crr8
22:48:03  43  ,crr10
22:48:03  44  ,crr12
22:48:03  45  ,crr14
22:48:03  46  ,crr16
22:48:03  47  ,crr18
22:48:03  48  --
22:48:03  49  ,hh
22:48:03  50  ,d
22:48:03  51  ,w
22:48:03  52  ,mpm
22:48:03  53  ,mph
22:48:03  54  FROM svm6122
22:48:03  55  ORDER BY ydate
22:48:03  56  /

Table created.

Elapsed: 00:00:00.45
22:48:03 SQL> 
22:48:03 SQL> -- rpt
22:48:03 SQL> 
22:48:03 SQL> SELECT
22:48:03   2  pair
22:48:03   3  ,trend
22:48:03   4  ,gatt
22:48:03   5  ,COUNT(pair)
22:48:03   6  ,AVG(g6)
22:48:03   7  FROM svm6142
22:48:03   8  GROUP BY pair,trend,gatt
22:48:03   9  ORDER BY pair,trend,gatt
22:48:03  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5398 -.16521029
usd_jpy 	-1 up	      5046 .162199069
usd_jpy 	-1		21
usd_jpy 	 1 nup	      5168 -.15538128
usd_jpy 	 1 up	      4151  .16523858
usd_jpy 	 1		51

6 rows selected.

Elapsed: 00:00:00.07
22:48:03 SQL> 
22:48:03 SQL> 
22:48:03 SQL> -- Derive NTILE based params:
22:48:03 SQL> 
22:48:03 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
22:48:04 SQL> CREATE TABLE svm6162 COMPRESS AS
22:48:04   2  SELECT
22:48:04   3  pair
22:48:04   4  ,ydate
22:48:04   5  ,prdate
22:48:04   6  ,clse
22:48:04   7  ,g6
22:48:04   8  ,gatt
22:48:04   9  ,gattn
22:48:04  10  ,trend
22:48:04  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:48:04  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:48:04  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:48:04  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:48:04  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:48:04  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:48:04  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:48:04  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:48:04  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:48:04  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:48:04  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:48:04  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:48:04  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:48:04  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:48:04  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:48:04  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:48:04  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:48:04  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:48:04  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:48:04  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:48:04  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:48:04  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:48:04  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:48:04  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:48:04  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:48:04  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:48:04  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:48:04  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:48:04  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:48:04  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:48:04  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:48:04  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:48:04  43  ,hh  att32
22:48:04  44  ,d   att33
22:48:04  45  ,w   att34
22:48:04  46  ,mpm att35
22:48:04  47  ,mph att36
22:48:04  48  ,trend att37
22:48:04  49  FROM svm6142
22:48:04  50  ORDER BY ydate
22:48:04  51  /

Table created.

Elapsed: 00:00:04.84
22:48:08 SQL> 
22:48:08 SQL> -- rpt
22:48:08 SQL> 
22:48:08 SQL> SELECT
22:48:08   2  pair
22:48:08   3  ,trend
22:48:08   4  ,gatt
22:48:08   5  ,COUNT(pair)
22:48:08   6  ,AVG(g6)
22:48:08   7  FROM svm6162
22:48:08   8  GROUP BY pair,trend,gatt
22:48:08   9  ORDER BY pair,trend,gatt
22:48:08  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5398 -.16521029
usd_jpy 	-1 up	      5046 .162199069
usd_jpy 	-1		21
usd_jpy 	 1 nup	      5168 -.15538128
usd_jpy 	 1 up	      4151  .16523858
usd_jpy 	 1		51

6 rows selected.

Elapsed: 00:00:00.03
22:48:08 SQL> 
22:48:08 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.10
22:48:08 SQL> CREATE TABLE modsrc COMPRESS AS
22:48:08   2  SELECT
22:48:08   3  pair
22:48:08   4  ,ydate
22:48:08   5  ,prdate
22:48:08   6  ,trend
22:48:08   7  ,g6
22:48:08   8  ,gatt
22:48:08   9  ,gattn
22:48:08  10  FROM svm6162
22:48:08  11  /

Table created.

Elapsed: 00:00:00.10
22:48:09 SQL> 
22:48:09 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
22:48:09 SQL> 
22:48:09 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
22:48:09 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
22:48:09   2  SELECT
22:48:09   3  ydate
22:48:09   4  ,trend jpy_trend
22:48:09   5  ,g6    jpy_g6
22:48:09   6  ,gatt  jpy_gatt
22:48:09   7  ,gattn jpy_gattn
22:48:09   8  FROM modsrc
22:48:09   9  /

Table created.

Elapsed: 00:00:00.07
22:48:09 SQL> 
22:48:09 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
22:48:09 SQL> 
22:48:09 SQL> -- I need a copy of the attributes:
22:48:09 SQL> 
22:48:09 SQL> 
22:48:09 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.05
22:48:09 SQL> CREATE TABLE jpy_att COMPRESS AS
22:48:09   2  SELECT
22:48:09   3  ydate
22:48:09   4  ,att00 jpy_att00
22:48:09   5  ,att01 jpy_att01
22:48:09   6  ,att02 jpy_att02
22:48:09   7  ,att03 jpy_att03
22:48:09   8  ,att04 jpy_att04
22:48:09   9  ,att05 jpy_att05
22:48:09  10  ,att06 jpy_att06
22:48:09  11  ,att07 jpy_att07
22:48:09  12  ,att08 jpy_att08
22:48:09  13  ,att09 jpy_att09
22:48:09  14  ,att10 jpy_att10
22:48:09  15  ,att11 jpy_att11
22:48:09  16  ,att12 jpy_att12
22:48:09  17  ,att13 jpy_att13
22:48:09  18  ,att14 jpy_att14
22:48:09  19  ,att15 jpy_att15
22:48:09  20  ,att16 jpy_att16
22:48:09  21  ,att17 jpy_att17
22:48:09  22  ,att18 jpy_att18
22:48:09  23  ,att19 jpy_att19
22:48:09  24  ,att20 jpy_att20
22:48:09  25  ,att21 jpy_att21
22:48:09  26  ,att22 jpy_att22
22:48:09  27  ,att23 jpy_att23
22:48:09  28  ,att24 jpy_att24
22:48:09  29  ,att25 jpy_att25
22:48:09  30  ,att26 jpy_att26
22:48:09  31  ,att27 jpy_att27
22:48:09  32  ,att28 jpy_att28
22:48:09  33  ,att29 jpy_att29
22:48:09  34  ,att30 jpy_att30
22:48:09  35  ,att31 jpy_att31
22:48:09  36  ,att32 jpy_att32
22:48:09  37  ,att33 jpy_att33
22:48:09  38  ,att34 jpy_att34
22:48:09  39  ,att35 jpy_att35
22:48:09  40  ,att36 jpy_att36
22:48:09  41  ,att37 jpy_att37
22:48:09  42  FROM svm6162
22:48:09  43  /

Table created.

Elapsed: 00:00:00.17
22:48:09 SQL> 
22:48:09 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
22:48:10 SQL> 
22:48:10 SQL> -- rpt
22:48:10 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19835

Elapsed: 00:00:00.89
22:48:11 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19835

Elapsed: 00:00:00.00
22:48:11 SQL> 
22:48:11 SQL> --
22:48:11 SQL> -- cad610.sql
22:48:11 SQL> --
22:48:11 SQL> 
22:48:11 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:48:11 SQL> 
22:48:11 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.36
22:48:11 SQL> 
22:48:11 SQL> -- I created di5min here:
22:48:11 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:48:11 SQL> 
22:48:11 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:48:11   2  SELECT
22:48:11   3  pair
22:48:11   4  ,ydate
22:48:11   5  ,prdate
22:48:11   6  ,rownum rnum -- acts as t in my time-series
22:48:11   7  ,clse
22:48:11   8  -- Derive a bunch of attributes from clse, the latest price:
22:48:11   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:48:11  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:48:11  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:48:11  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:48:11  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:48:11  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:48:11  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:48:11  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:48:11  17  --
22:48:11  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:48:11  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:48:11  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:48:11  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:48:11  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:48:11  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:48:11  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:48:11  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:48:11  26  --
22:48:11  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:48:11  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:48:11  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:48:11  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:48:11  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:48:11  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:48:11  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:48:11  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:48:11  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:48:11  36  FROM di5min WHERE pair LIKE'%cad%'
22:48:11  37  AND ydate > sysdate - 95
22:48:11  38  ORDER BY ydate
22:48:11  39  /

View created.

Elapsed: 00:00:00.04
22:48:11 SQL> 
22:48:11 SQL> -- rpt
22:48:11 SQL> 
22:48:11 SQL> SELECT
22:48:11   2  pair
22:48:11   3  ,COUNT(pair)
22:48:11   4  ,MIN(clse),MAX(clse)
22:48:11   5  ,MIN(avg6),MAX(avg6)
22:48:11   6  ,MIN(ydate),MAX(ydate)
22:48:11   7  FROM svm6102
22:48:11   8  GROUP BY pair
22:48:11   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19835	.99755	    1.036 .998845205 1.03336849 2010-09-26 22:50:01 2010-12-30 22:40:00

Elapsed: 00:00:00.85
22:48:12 SQL> 
22:48:12 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:48:12 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.29
22:48:12 SQL> CREATE TABLE svm6122 COMPRESS AS
22:48:12   2  SELECT
22:48:12   3  pair
22:48:12   4  ,ydate
22:48:12   5  ,prdate
22:48:12   6  ,clse
22:48:12   7  -- g6 is important. I want to predict g6:
22:48:12   8  ,ld6 - clse g6
22:48:12   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:48:12  10  -- I want more attributes from the ones I derived above:
22:48:12  11  -- clse relation to moving-min
22:48:12  12  ,clse-min4  cm4
22:48:12  13  ,clse-min6  cm6
22:48:12  14  ,clse-min8  cm8
22:48:12  15  ,clse-min10 cm10
22:48:12  16  ,clse-min12 cm12
22:48:12  17  ,clse-min14 cm14
22:48:12  18  ,clse-min16 cm16
22:48:12  19  ,clse-min18 cm18
22:48:12  20  -- clse relation to moving-avg
22:48:12  21  ,clse-avg4  ca4
22:48:12  22  ,clse-avg6  ca6
22:48:12  23  ,clse-avg8  ca8
22:48:12  24  ,clse-avg10 ca10
22:48:12  25  ,clse-avg12 ca12
22:48:12  26  ,clse-avg14 ca14
22:48:12  27  ,clse-avg16 ca16
22:48:12  28  ,clse-avg18 ca18
22:48:12  29  -- clse relation to moving-max
22:48:12  30  ,clse-max4  cx4
22:48:12  31  ,clse-max6  cx6
22:48:12  32  ,clse-max8  cx8
22:48:12  33  ,clse-max10 cx10
22:48:12  34  ,clse-max12 cx12
22:48:12  35  ,clse-max14 cx14
22:48:12  36  ,clse-max16 cx16
22:48:12  37  ,clse-max18 cx18
22:48:12  38  -- Derive more attributes.
22:48:12  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:48:12  40  -- But COVAR_POP is more stable:
22:48:12  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:48:12  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:48:12  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:48:12  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:48:12  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:48:12  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:48:12  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:48:12  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:48:12  49  -- Derive date related attributes:
22:48:12  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:48:12  51  ,0+TO_CHAR(ydate,'D')d
22:48:12  52  ,0+TO_CHAR(ydate,'W')w
22:48:12  53  -- mpm stands for minutes-past-midnight:
22:48:12  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:48:12  55  -- mph stands for minutes-past-hour:
22:48:12  56  ,0+TO_CHAR(ydate,'MI')mph
22:48:12  57  FROM svm6102
22:48:12  58  ORDER BY ydate
22:48:12  59  /

Table created.

Elapsed: 00:00:02.04
22:48:14 SQL> 
22:48:14 SQL> -- rpt
22:48:14 SQL> 
22:48:14 SQL> SELECT
22:48:14   2  pair
22:48:14   3  ,COUNT(pair)
22:48:14   4  ,MIN(clse),MAX(clse)
22:48:14   5  ,MIN(ydate),MAX(ydate)
22:48:14   6  FROM svm6122
22:48:14   7  GROUP BY pair
22:48:14   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19835	.99755	    1.036 2010-09-26 22:50:01 2010-12-30 22:40:00

Elapsed: 00:00:00.05
22:48:14 SQL> 
22:48:14 SQL> -- Prepare for derivation of NTILE based params:
22:48:14 SQL> 
22:48:14 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.17
22:48:14 SQL> CREATE TABLE svm6142 COMPRESS AS
22:48:14   2  SELECT
22:48:14   3  pair
22:48:14   4  ,ydate
22:48:14   5  ,prdate
22:48:14   6  ,clse
22:48:14   7  ,g6
22:48:14   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:48:14   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:48:14  10  ,CASE WHEN trend IS NULL THEN 1
22:48:14  11  	    WHEN trend =0      THEN 1
22:48:14  12  	    ELSE trend END trend
22:48:14  13  ,cm4
22:48:14  14  ,cm6
22:48:14  15  ,cm8
22:48:14  16  ,cm10
22:48:14  17  ,cm12
22:48:14  18  ,cm14
22:48:14  19  ,cm16
22:48:14  20  ,cm18
22:48:14  21  --
22:48:14  22  ,ca4
22:48:14  23  ,ca6
22:48:14  24  ,ca8
22:48:14  25  ,ca10
22:48:14  26  ,ca12
22:48:14  27  ,ca14
22:48:14  28  ,ca16
22:48:14  29  ,ca18
22:48:14  30  --
22:48:14  31  ,cx4
22:48:14  32  ,cx6
22:48:14  33  ,cx8
22:48:14  34  ,cx10
22:48:14  35  ,cx12
22:48:14  36  ,cx14
22:48:14  37  ,cx16
22:48:14  38  ,cx18
22:48:14  39  --
22:48:14  40  ,crr4
22:48:14  41  ,crr6
22:48:14  42  ,crr8
22:48:14  43  ,crr10
22:48:14  44  ,crr12
22:48:14  45  ,crr14
22:48:14  46  ,crr16
22:48:14  47  ,crr18
22:48:14  48  --
22:48:14  49  ,hh
22:48:14  50  ,d
22:48:14  51  ,w
22:48:14  52  ,mpm
22:48:14  53  ,mph
22:48:14  54  FROM svm6122
22:48:14  55  ORDER BY ydate
22:48:14  56  /

Table created.

Elapsed: 00:00:00.36
22:48:15 SQL> 
22:48:15 SQL> -- rpt
22:48:15 SQL> 
22:48:15 SQL> SELECT
22:48:15   2  pair
22:48:15   3  ,trend
22:48:15   4  ,gatt
22:48:15   5  ,COUNT(pair)
22:48:15   6  ,AVG(g6)
22:48:15   7  FROM svm6142
22:48:15   8  GROUP BY pair,trend,gatt
22:48:15   9  ORDER BY pair,trend,gatt
22:48:15  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7333 -.00130467
usd_cad 	-1 up	      3152 .003080755
usd_cad 	-1		37
usd_cad 	 1 nup	      6786 -.00160158
usd_cad 	 1 up	      2492 .003595539
usd_cad 	 1		35

6 rows selected.

Elapsed: 00:00:00.04
22:48:15 SQL> 
22:48:15 SQL> 
22:48:15 SQL> -- Derive NTILE based params:
22:48:15 SQL> 
22:48:15 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
22:48:15 SQL> CREATE TABLE svm6162 COMPRESS AS
22:48:15   2  SELECT
22:48:15   3  pair
22:48:15   4  ,ydate
22:48:15   5  ,prdate
22:48:15   6  ,clse
22:48:15   7  ,g6
22:48:15   8  ,gatt
22:48:15   9  ,gattn
22:48:15  10  ,trend
22:48:15  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:48:15  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:48:15  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:48:15  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:48:15  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:48:15  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:48:15  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:48:15  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:48:15  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:48:15  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:48:15  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:48:15  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:48:15  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:48:15  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:48:15  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:48:15  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:48:15  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:48:15  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:48:15  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:48:15  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:48:15  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:48:15  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:48:15  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:48:15  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:48:15  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:48:15  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:48:15  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:48:15  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:48:15  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:48:15  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:48:15  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:48:15  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:48:15  43  ,hh  att32
22:48:15  44  ,d   att33
22:48:15  45  ,w   att34
22:48:15  46  ,mpm att35
22:48:15  47  ,mph att36
22:48:15  48  ,trend att37
22:48:15  49  FROM svm6142
22:48:15  50  ORDER BY ydate
22:48:15  51  /

Table created.

Elapsed: 00:00:04.76
22:48:20 SQL> 
22:48:20 SQL> -- rpt
22:48:20 SQL> 
22:48:20 SQL> SELECT
22:48:20   2  pair
22:48:20   3  ,trend
22:48:20   4  ,gatt
22:48:20   5  ,COUNT(pair)
22:48:20   6  ,AVG(g6)
22:48:20   7  FROM svm6162
22:48:20   8  GROUP BY pair,trend,gatt
22:48:20   9  ORDER BY pair,trend,gatt
22:48:20  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7333 -.00130467
usd_cad 	-1 up	      3152 .003080755
usd_cad 	-1		37
usd_cad 	 1 nup	      6786 -.00160158
usd_cad 	 1 up	      2492 .003595539
usd_cad 	 1		35

6 rows selected.

Elapsed: 00:00:00.03
22:48:20 SQL> 
22:48:20 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.11
22:48:20 SQL> CREATE TABLE modsrc COMPRESS AS
22:48:20   2  SELECT
22:48:20   3  pair
22:48:20   4  ,ydate
22:48:20   5  ,prdate
22:48:20   6  ,trend
22:48:20   7  ,g6
22:48:20   8  ,gatt
22:48:20   9  ,gattn
22:48:20  10  FROM svm6162
22:48:20  11  /

Table created.

Elapsed: 00:00:00.09
22:48:20 SQL> 
22:48:20 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.26
22:48:20 SQL> 
22:48:20 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
22:48:20 SQL> CREATE TABLE cad_ms610 COMPRESS AS
22:48:20   2  SELECT
22:48:20   3  ydate
22:48:20   4  ,trend cad_trend
22:48:20   5  ,g6    cad_g6
22:48:20   6  ,gatt  cad_gatt
22:48:20   7  ,gattn cad_gattn
22:48:20   8  FROM modsrc
22:48:20   9  /

Table created.

Elapsed: 00:00:00.07
22:48:20 SQL> 
22:48:20 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
22:48:20 SQL> 
22:48:20 SQL> -- I need a copy of the attributes:
22:48:20 SQL> 
22:48:20 SQL> 
22:48:20 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.04
22:48:21 SQL> CREATE TABLE cad_att COMPRESS AS
22:48:21   2  SELECT
22:48:21   3  ydate
22:48:21   4  ,att00 cad_att00
22:48:21   5  ,att01 cad_att01
22:48:21   6  ,att02 cad_att02
22:48:21   7  ,att03 cad_att03
22:48:21   8  ,att04 cad_att04
22:48:21   9  ,att05 cad_att05
22:48:21  10  ,att06 cad_att06
22:48:21  11  ,att07 cad_att07
22:48:21  12  ,att08 cad_att08
22:48:21  13  ,att09 cad_att09
22:48:21  14  ,att10 cad_att10
22:48:21  15  ,att11 cad_att11
22:48:21  16  ,att12 cad_att12
22:48:21  17  ,att13 cad_att13
22:48:21  18  ,att14 cad_att14
22:48:21  19  ,att15 cad_att15
22:48:21  20  ,att16 cad_att16
22:48:21  21  ,att17 cad_att17
22:48:21  22  ,att18 cad_att18
22:48:21  23  ,att19 cad_att19
22:48:21  24  ,att20 cad_att20
22:48:21  25  ,att21 cad_att21
22:48:21  26  ,att22 cad_att22
22:48:21  27  ,att23 cad_att23
22:48:21  28  ,att24 cad_att24
22:48:21  29  ,att25 cad_att25
22:48:21  30  ,att26 cad_att26
22:48:21  31  ,att27 cad_att27
22:48:21  32  ,att28 cad_att28
22:48:21  33  ,att29 cad_att29
22:48:21  34  ,att30 cad_att30
22:48:21  35  ,att31 cad_att31
22:48:21  36  ,att32 cad_att32
22:48:21  37  ,att33 cad_att33
22:48:21  38  ,att34 cad_att34
22:48:21  39  ,att35 cad_att35
22:48:21  40  ,att36 cad_att36
22:48:21  41  ,att37 cad_att37
22:48:21  42  FROM svm6162
22:48:21  43  /

Table created.

Elapsed: 00:00:00.17
22:48:21 SQL> 
22:48:21 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.49
22:48:21 SQL> 
22:48:21 SQL> -- rpt
22:48:21 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19835

Elapsed: 00:00:00.85
22:48:22 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19835

Elapsed: 00:00:00.00
22:48:22 SQL> 
22:48:22 SQL> --
22:48:22 SQL> -- chf610.sql
22:48:22 SQL> --
22:48:22 SQL> 
22:48:22 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:48:22 SQL> 
22:48:22 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.42
22:48:22 SQL> 
22:48:22 SQL> -- I created di5min here:
22:48:22 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:48:22 SQL> 
22:48:22 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:48:22   2  SELECT
22:48:22   3  pair
22:48:22   4  ,ydate
22:48:22   5  ,prdate
22:48:22   6  ,rownum rnum -- acts as t in my time-series
22:48:22   7  ,clse
22:48:22   8  -- Derive a bunch of attributes from clse, the latest price:
22:48:22   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:48:22  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:48:22  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:48:22  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:48:22  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:48:22  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:48:22  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:48:22  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:48:22  17  --
22:48:22  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:48:22  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:48:22  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:48:22  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:48:22  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:48:22  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:48:22  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:48:22  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:48:22  26  --
22:48:22  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:48:22  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:48:22  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:48:22  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:48:22  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:48:22  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:48:22  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:48:22  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:48:22  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:48:22  36  FROM di5min WHERE pair LIKE'%chf%'
22:48:22  37  AND ydate > sysdate - 95
22:48:22  38  ORDER BY ydate
22:48:22  39  /

View created.

Elapsed: 00:00:00.04
22:48:23 SQL> 
22:48:23 SQL> -- rpt
22:48:23 SQL> 
22:48:23 SQL> SELECT
22:48:23   2  pair
22:48:23   3  ,COUNT(pair)
22:48:23   4  ,MIN(clse),MAX(clse)
22:48:23   5  ,MIN(avg6),MAX(avg6)
22:48:23   6  ,MIN(ydate),MAX(ydate)
22:48:23   7  FROM svm6102
22:48:23   8  GROUP BY pair
22:48:23   9  /
