
SQL*Plus: Release 11.2.0.1.0 Production on Fri Jan 7 18:13:30 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

18:13:30 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
18:13:30 SQL> 18:13:30 SQL> --
18:13:30 SQL> -- eur610.sql
18:13:30 SQL> --
18:13:30 SQL> 
18:13:30 SQL> -- Creates views and tables for backtesting a forex SVM strategy
18:13:30 SQL> 
18:13:30 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.02
18:13:30 SQL> 
18:13:30 SQL> -- I created di5min here:
18:13:30 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
18:13:30 SQL> 
18:13:30 SQL> CREATE OR REPLACE VIEW svm6102 AS
18:13:30   2  SELECT
18:13:30   3  pair
18:13:30   4  ,ydate
18:13:30   5  ,prdate
18:13:30   6  ,rownum rnum -- acts as t in my time-series
18:13:30   7  ,clse
18:13:30   8  -- Derive a bunch of attributes from clse, the latest price:
18:13:30   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
18:13:30  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
18:13:30  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
18:13:30  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
18:13:30  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
18:13:30  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
18:13:30  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
18:13:30  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
18:13:30  17  --
18:13:30  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
18:13:30  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
18:13:30  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
18:13:30  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
18:13:30  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
18:13:30  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
18:13:30  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
18:13:30  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
18:13:30  26  --
18:13:30  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
18:13:30  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
18:13:30  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
18:13:30  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
18:13:30  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
18:13:30  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
18:13:30  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
18:13:30  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
18:13:30  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
18:13:30  36  FROM di5min WHERE pair LIKE'%eur%'
18:13:30  37  AND ydate > sysdate - 95
18:13:30  38  ORDER BY ydate
18:13:30  39  /

View created.

Elapsed: 00:00:00.09
18:13:30 SQL> 
18:13:30 SQL> -- rpt
18:13:30 SQL> 
18:13:30 SQL> SELECT
18:13:30   2  pair
18:13:30   3  ,COUNT(pair)
18:13:30   4  ,MIN(clse),MAX(clse)
18:13:30   5  ,MIN(avg6),MAX(avg6)
18:13:30   6  ,MIN(ydate),MAX(ydate)
18:13:30   7  FROM svm6102
18:13:30   8  GROUP BY pair
18:13:30   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19811    1.29125	   1.4273 1.29613733 1.42436233 2010-10-04 18:15:01 2011-01-07 18:10:00

Elapsed: 00:00:00.93
18:13:31 SQL> 
18:13:31 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
18:13:31 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.04
18:13:31 SQL> CREATE TABLE svm6122 COMPRESS AS
18:13:31   2  SELECT
18:13:31   3  pair
18:13:31   4  ,ydate
18:13:31   5  ,prdate
18:13:31   6  ,clse
18:13:31   7  -- g6 is important. I want to predict g6:
18:13:31   8  ,ld6 - clse g6
18:13:31   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
18:13:31  10  -- I want more attributes from the ones I derived above:
18:13:31  11  -- clse relation to moving-min
18:13:31  12  ,clse-min4  cm4
18:13:31  13  ,clse-min6  cm6
18:13:31  14  ,clse-min8  cm8
18:13:31  15  ,clse-min10 cm10
18:13:31  16  ,clse-min12 cm12
18:13:31  17  ,clse-min14 cm14
18:13:31  18  ,clse-min16 cm16
18:13:31  19  ,clse-min18 cm18
18:13:31  20  -- clse relation to moving-avg
18:13:31  21  ,clse-avg4  ca4
18:13:31  22  ,clse-avg6  ca6
18:13:31  23  ,clse-avg8  ca8
18:13:31  24  ,clse-avg10 ca10
18:13:31  25  ,clse-avg12 ca12
18:13:31  26  ,clse-avg14 ca14
18:13:31  27  ,clse-avg16 ca16
18:13:31  28  ,clse-avg18 ca18
18:13:31  29  -- clse relation to moving-max
18:13:31  30  ,clse-max4  cx4
18:13:31  31  ,clse-max6  cx6
18:13:31  32  ,clse-max8  cx8
18:13:31  33  ,clse-max10 cx10
18:13:31  34  ,clse-max12 cx12
18:13:31  35  ,clse-max14 cx14
18:13:31  36  ,clse-max16 cx16
18:13:31  37  ,clse-max18 cx18
18:13:31  38  -- Derive more attributes.
18:13:31  39  -- I want to use CORR() here to help SVM see the shape of the series.
18:13:31  40  -- But COVAR_POP is more stable:
18:13:31  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
18:13:31  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
18:13:31  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
18:13:31  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
18:13:31  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
18:13:31  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
18:13:31  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
18:13:31  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
18:13:31  49  -- Derive date related attributes:
18:13:31  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
18:13:31  51  ,0+TO_CHAR(ydate,'D')d
18:13:31  52  ,0+TO_CHAR(ydate,'W')w
18:13:31  53  -- mpm stands for minutes-past-midnight:
18:13:31  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
18:13:31  55  -- mph stands for minutes-past-hour:
18:13:31  56  ,0+TO_CHAR(ydate,'MI')mph
18:13:31  57  FROM svm6102
18:13:31  58  ORDER BY ydate
18:13:31  59  /

Table created.

Elapsed: 00:00:02.42
18:13:34 SQL> 
18:13:34 SQL> -- rpt
18:13:34 SQL> 
18:13:34 SQL> SELECT
18:13:34   2  pair
18:13:34   3  ,COUNT(pair)
18:13:34   4  ,MIN(clse),MAX(clse)
18:13:34   5  ,MIN(ydate),MAX(ydate)
18:13:34   6  FROM svm6122
18:13:34   7  GROUP BY pair
18:13:34   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19811    1.29125	   1.4273 2010-10-04 18:15:01 2011-01-07 18:10:00

Elapsed: 00:00:00.10
18:13:34 SQL> 
18:13:34 SQL> -- Prepare for derivation of NTILE based params:
18:13:34 SQL> 
18:13:34 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.47
18:13:34 SQL> CREATE TABLE svm6142 COMPRESS AS
18:13:34   2  SELECT
18:13:34   3  pair
18:13:34   4  ,ydate
18:13:34   5  ,prdate
18:13:34   6  ,clse
18:13:34   7  ,g6
18:13:34   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
18:13:34   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
18:13:34  10  ,CASE WHEN trend IS NULL THEN 1
18:13:34  11  	    WHEN trend =0      THEN 1
18:13:34  12  	    ELSE trend END trend
18:13:34  13  ,cm4
18:13:34  14  ,cm6
18:13:34  15  ,cm8
18:13:34  16  ,cm10
18:13:34  17  ,cm12
18:13:34  18  ,cm14
18:13:34  19  ,cm16
18:13:34  20  ,cm18
18:13:34  21  --
18:13:34  22  ,ca4
18:13:34  23  ,ca6
18:13:34  24  ,ca8
18:13:34  25  ,ca10
18:13:34  26  ,ca12
18:13:34  27  ,ca14
18:13:34  28  ,ca16
18:13:34  29  ,ca18
18:13:34  30  --
18:13:34  31  ,cx4
18:13:34  32  ,cx6
18:13:34  33  ,cx8
18:13:34  34  ,cx10
18:13:34  35  ,cx12
18:13:34  36  ,cx14
18:13:34  37  ,cx16
18:13:34  38  ,cx18
18:13:34  39  --
18:13:34  40  ,crr4
18:13:34  41  ,crr6
18:13:34  42  ,crr8
18:13:34  43  ,crr10
18:13:34  44  ,crr12
18:13:34  45  ,crr14
18:13:34  46  ,crr16
18:13:34  47  ,crr18
18:13:34  48  --
18:13:34  49  ,hh
18:13:34  50  ,d
18:13:34  51  ,w
18:13:34  52  ,mpm
18:13:34  53  ,mph
18:13:34  54  FROM svm6122
18:13:34  55  ORDER BY ydate
18:13:34  56  /

Table created.

Elapsed: 00:00:00.38
18:13:35 SQL> 
18:13:35 SQL> -- rpt
18:13:35 SQL> 
18:13:35 SQL> SELECT
18:13:35   2  pair
18:13:35   3  ,trend
18:13:35   4  ,gatt
18:13:35   5  ,COUNT(pair)
18:13:35   6  ,AVG(g6)
18:13:35   7  FROM svm6142
18:13:35   8  GROUP BY pair,trend,gatt
18:13:35   9  ORDER BY pair,trend,gatt
18:13:35  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6593 -.00314727
eur_usd 	-1 up	      3568 .004448735
eur_usd 	-1		60
eur_usd 	 1 nup	      5873 -.00324723
eur_usd 	 1 up	      3705 .005071238
eur_usd 	 1		12

6 rows selected.

Elapsed: 00:00:00.08
18:13:35 SQL> 
18:13:35 SQL> 
18:13:35 SQL> -- Derive NTILE based params:
18:13:35 SQL> 
18:13:35 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.47
18:13:35 SQL> CREATE TABLE svm6162 COMPRESS AS
18:13:35   2  SELECT
18:13:35   3  pair
18:13:35   4  ,ydate
18:13:35   5  ,prdate
18:13:35   6  ,clse
18:13:35   7  ,g6
18:13:35   8  ,gatt
18:13:35   9  ,gattn
18:13:35  10  ,trend
18:13:35  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
18:13:35  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
18:13:35  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
18:13:35  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
18:13:35  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
18:13:35  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
18:13:35  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
18:13:35  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
18:13:35  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
18:13:35  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
18:13:35  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
18:13:35  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
18:13:35  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
18:13:35  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
18:13:35  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
18:13:35  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
18:13:35  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
18:13:35  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
18:13:35  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
18:13:35  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
18:13:35  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
18:13:35  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
18:13:35  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
18:13:35  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
18:13:35  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
18:13:35  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
18:13:35  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
18:13:35  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
18:13:35  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
18:13:35  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
18:13:35  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
18:13:35  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
18:13:35  43  ,hh  att32
18:13:35  44  ,d   att33
18:13:35  45  ,w   att34
18:13:35  46  ,mpm att35
18:13:35  47  ,mph att36
18:13:35  48  ,trend att37
18:13:35  49  FROM svm6142
18:13:35  50  ORDER BY ydate
18:13:35  51  /

Table created.

Elapsed: 00:00:04.82
18:13:40 SQL> 
18:13:40 SQL> -- rpt
18:13:40 SQL> 
18:13:40 SQL> SELECT
18:13:40   2  pair
18:13:40   3  ,trend
18:13:40   4  ,gatt
18:13:40   5  ,COUNT(pair)
18:13:40   6  ,AVG(g6)
18:13:40   7  FROM svm6162
18:13:40   8  GROUP BY pair,trend,gatt
18:13:40   9  ORDER BY pair,trend,gatt
18:13:40  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6593 -.00314727
eur_usd 	-1 up	      3568 .004448735
eur_usd 	-1		60
eur_usd 	 1 nup	      5873 -.00324723
eur_usd 	 1 up	      3705 .005071238
eur_usd 	 1		12

6 rows selected.

Elapsed: 00:00:00.03
18:13:40 SQL> 
18:13:40 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
18:13:40 SQL> CREATE TABLE modsrc COMPRESS AS
18:13:40   2  SELECT
18:13:40   3  pair
18:13:40   4  ,ydate
18:13:40   5  ,prdate
18:13:40   6  ,trend
18:13:40   7  ,g6
18:13:40   8  ,gatt
18:13:40   9  ,gattn
18:13:40  10  FROM svm6162
18:13:40  11  /

Table created.

Elapsed: 00:00:00.07
18:13:40 SQL> 
18:13:40 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.24
18:13:41 SQL> 
18:13:41 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
18:13:41 SQL> CREATE TABLE eur_ms610 COMPRESS AS
18:13:41   2  SELECT
18:13:41   3  ydate
18:13:41   4  ,trend eur_trend
18:13:41   5  ,g6    eur_g6
18:13:41   6  ,gatt  eur_gatt
18:13:41   7  ,gattn eur_gattn
18:13:41   8  FROM modsrc
18:13:41   9  /

Table created.

Elapsed: 00:00:00.07
18:13:41 SQL> 
18:13:41 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
18:13:41 SQL> 
18:13:41 SQL> -- I need a copy of the attributes:
18:13:41 SQL> 
18:13:41 SQL> 
18:13:41 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.25
18:13:41 SQL> CREATE TABLE eur_att COMPRESS AS
18:13:41   2  SELECT
18:13:41   3  ydate
18:13:41   4  ,att00 eur_att00
18:13:41   5  ,att01 eur_att01
18:13:41   6  ,att02 eur_att02
18:13:41   7  ,att03 eur_att03
18:13:41   8  ,att04 eur_att04
18:13:41   9  ,att05 eur_att05
18:13:41  10  ,att06 eur_att06
18:13:41  11  ,att07 eur_att07
18:13:41  12  ,att08 eur_att08
18:13:41  13  ,att09 eur_att09
18:13:41  14  ,att10 eur_att10
18:13:41  15  ,att11 eur_att11
18:13:41  16  ,att12 eur_att12
18:13:41  17  ,att13 eur_att13
18:13:41  18  ,att14 eur_att14
18:13:41  19  ,att15 eur_att15
18:13:41  20  ,att16 eur_att16
18:13:41  21  ,att17 eur_att17
18:13:41  22  ,att18 eur_att18
18:13:41  23  ,att19 eur_att19
18:13:41  24  ,att20 eur_att20
18:13:41  25  ,att21 eur_att21
18:13:41  26  ,att22 eur_att22
18:13:41  27  ,att23 eur_att23
18:13:41  28  ,att24 eur_att24
18:13:41  29  ,att25 eur_att25
18:13:41  30  ,att26 eur_att26
18:13:41  31  ,att27 eur_att27
18:13:41  32  ,att28 eur_att28
18:13:41  33  ,att29 eur_att29
18:13:41  34  ,att30 eur_att30
18:13:41  35  ,att31 eur_att31
18:13:41  36  ,att32 eur_att32
18:13:41  37  ,att33 eur_att33
18:13:41  38  ,att34 eur_att34
18:13:41  39  ,att35 eur_att35
18:13:41  40  ,att36 eur_att36
18:13:41  41  ,att37 eur_att37
18:13:41  42  FROM svm6162
18:13:41  43  /

Table created.

Elapsed: 00:00:00.18
18:13:41 SQL> 
18:13:41 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.61
18:13:42 SQL> 
18:13:42 SQL> -- rpt
18:13:42 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19811

Elapsed: 00:00:00.93
18:13:43 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19811

Elapsed: 00:00:00.01
18:13:43 SQL> 
18:13:43 SQL> --
18:13:43 SQL> -- aud610.sql
18:13:43 SQL> --
18:13:43 SQL> 
18:13:43 SQL> -- Creates views and tables for backtesting a forex SVM strategy
18:13:43 SQL> 
18:13:43 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
18:13:43 SQL> 
18:13:43 SQL> -- I created di5min here:
18:13:43 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
18:13:43 SQL> 
18:13:43 SQL> CREATE OR REPLACE VIEW svm6102 AS
18:13:43   2  SELECT
18:13:43   3  pair
18:13:43   4  ,ydate
18:13:43   5  ,prdate
18:13:43   6  ,rownum rnum -- acts as t in my time-series
18:13:43   7  ,clse
18:13:43   8  -- Derive a bunch of attributes from clse, the latest price:
18:13:43   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
18:13:43  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
18:13:43  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
18:13:43  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
18:13:43  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
18:13:43  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
18:13:43  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
18:13:43  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
18:13:43  17  --
18:13:43  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
18:13:43  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
18:13:43  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
18:13:43  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
18:13:43  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
18:13:43  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
18:13:43  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
18:13:43  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
18:13:43  26  --
18:13:43  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
18:13:43  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
18:13:43  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
18:13:43  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
18:13:43  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
18:13:43  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
18:13:43  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
18:13:43  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
18:13:43  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
18:13:43  36  FROM di5min WHERE pair LIKE'%aud%'
18:13:43  37  AND ydate > sysdate - 95
18:13:43  38  ORDER BY ydate
18:13:43  39  /

View created.

Elapsed: 00:00:00.04
18:13:43 SQL> 
18:13:43 SQL> -- rpt
18:13:43 SQL> 
18:13:43 SQL> SELECT
18:13:43   2  pair
18:13:43   3  ,COUNT(pair)
18:13:43   4  ,MIN(clse),MAX(clse)
18:13:43   5  ,MIN(avg6),MAX(avg6)
18:13:43   6  ,MIN(ydate),MAX(ydate)
18:13:43   7  FROM svm6102
18:13:43   8  GROUP BY pair
18:13:43   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19808	.95405	  1.02495 .957141438 1.02284247 2010-10-04 18:15:01 2011-01-07 18:10:00

Elapsed: 00:00:00.90
18:13:44 SQL> 
18:13:44 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
18:13:44 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.22
18:13:44 SQL> CREATE TABLE svm6122 COMPRESS AS
18:13:44   2  SELECT
18:13:44   3  pair
18:13:44   4  ,ydate
18:13:44   5  ,prdate
18:13:44   6  ,clse
18:13:44   7  -- g6 is important. I want to predict g6:
18:13:44   8  ,ld6 - clse g6
18:13:44   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
18:13:44  10  -- I want more attributes from the ones I derived above:
18:13:44  11  -- clse relation to moving-min
18:13:44  12  ,clse-min4  cm4
18:13:44  13  ,clse-min6  cm6
18:13:44  14  ,clse-min8  cm8
18:13:44  15  ,clse-min10 cm10
18:13:44  16  ,clse-min12 cm12
18:13:44  17  ,clse-min14 cm14
18:13:44  18  ,clse-min16 cm16
18:13:44  19  ,clse-min18 cm18
18:13:44  20  -- clse relation to moving-avg
18:13:44  21  ,clse-avg4  ca4
18:13:44  22  ,clse-avg6  ca6
18:13:44  23  ,clse-avg8  ca8
18:13:44  24  ,clse-avg10 ca10
18:13:44  25  ,clse-avg12 ca12
18:13:44  26  ,clse-avg14 ca14
18:13:44  27  ,clse-avg16 ca16
18:13:44  28  ,clse-avg18 ca18
18:13:44  29  -- clse relation to moving-max
18:13:44  30  ,clse-max4  cx4
18:13:44  31  ,clse-max6  cx6
18:13:44  32  ,clse-max8  cx8
18:13:44  33  ,clse-max10 cx10
18:13:44  34  ,clse-max12 cx12
18:13:44  35  ,clse-max14 cx14
18:13:44  36  ,clse-max16 cx16
18:13:44  37  ,clse-max18 cx18
18:13:44  38  -- Derive more attributes.
18:13:44  39  -- I want to use CORR() here to help SVM see the shape of the series.
18:13:44  40  -- But COVAR_POP is more stable:
18:13:44  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
18:13:44  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
18:13:44  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
18:13:44  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
18:13:44  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
18:13:44  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
18:13:44  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
18:13:44  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
18:13:44  49  -- Derive date related attributes:
18:13:44  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
18:13:44  51  ,0+TO_CHAR(ydate,'D')d
18:13:44  52  ,0+TO_CHAR(ydate,'W')w
18:13:44  53  -- mpm stands for minutes-past-midnight:
18:13:44  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
18:13:44  55  -- mph stands for minutes-past-hour:
18:13:44  56  ,0+TO_CHAR(ydate,'MI')mph
18:13:44  57  FROM svm6102
18:13:44  58  ORDER BY ydate
18:13:44  59  /

Table created.

Elapsed: 00:00:02.18
18:13:47 SQL> 
18:13:47 SQL> -- rpt
18:13:47 SQL> 
18:13:47 SQL> SELECT
18:13:47   2  pair
18:13:47   3  ,COUNT(pair)
18:13:47   4  ,MIN(clse),MAX(clse)
18:13:47   5  ,MIN(ydate),MAX(ydate)
18:13:47   6  FROM svm6122
18:13:47   7  GROUP BY pair
18:13:47   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19808	.95405	  1.02495 2010-10-04 18:15:01 2011-01-07 18:10:00

Elapsed: 00:00:00.09
18:13:47 SQL> 
18:13:47 SQL> -- Prepare for derivation of NTILE based params:
18:13:47 SQL> 
18:13:47 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.31
18:13:47 SQL> CREATE TABLE svm6142 COMPRESS AS
18:13:47   2  SELECT
18:13:47   3  pair
18:13:47   4  ,ydate
18:13:47   5  ,prdate
18:13:47   6  ,clse
18:13:47   7  ,g6
18:13:47   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
18:13:47   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
18:13:47  10  ,CASE WHEN trend IS NULL THEN 1
18:13:47  11  	    WHEN trend =0      THEN 1
18:13:47  12  	    ELSE trend END trend
18:13:47  13  ,cm4
18:13:47  14  ,cm6
18:13:47  15  ,cm8
18:13:47  16  ,cm10
18:13:47  17  ,cm12
18:13:47  18  ,cm14
18:13:47  19  ,cm16
18:13:47  20  ,cm18
18:13:47  21  --
18:13:47  22  ,ca4
18:13:47  23  ,ca6
18:13:47  24  ,ca8
18:13:47  25  ,ca10
18:13:47  26  ,ca12
18:13:47  27  ,ca14
18:13:47  28  ,ca16
18:13:47  29  ,ca18
18:13:47  30  --
18:13:47  31  ,cx4
18:13:47  32  ,cx6
18:13:47  33  ,cx8
18:13:47  34  ,cx10
18:13:47  35  ,cx12
18:13:47  36  ,cx14
18:13:47  37  ,cx16
18:13:47  38  ,cx18
18:13:47  39  --
18:13:47  40  ,crr4
18:13:47  41  ,crr6
18:13:47  42  ,crr8
18:13:47  43  ,crr10
18:13:47  44  ,crr12
18:13:47  45  ,crr14
18:13:47  46  ,crr16
18:13:47  47  ,crr18
18:13:47  48  --
18:13:47  49  ,hh
18:13:47  50  ,d
18:13:47  51  ,w
18:13:47  52  ,mpm
18:13:47  53  ,mph
18:13:47  54  FROM svm6122
18:13:47  55  ORDER BY ydate
18:13:47  56  /

Table created.

Elapsed: 00:00:00.40
18:13:47 SQL> 
18:13:47 SQL> -- rpt
18:13:47 SQL> 
18:13:47 SQL> SELECT
18:13:47   2  pair
18:13:47   3  ,trend
18:13:47   4  ,gatt
18:13:47   5  ,COUNT(pair)
18:13:47   6  ,AVG(g6)
18:13:47   7  FROM svm6142
18:13:47   8  GROUP BY pair,trend,gatt
18:13:47   9  ORDER BY pair,trend,gatt
18:13:47  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5714 -.00217002
aud_usd 	-1 up	      3725 .003773641
aud_usd 	-1		18
aud_usd 	 1 nup	      6703  -.0021173
aud_usd 	 1 up	      3594 .004054149
aud_usd 	 1		54

6 rows selected.

Elapsed: 00:00:00.06
18:13:47 SQL> 
18:13:47 SQL> 
18:13:47 SQL> -- Derive NTILE based params:
18:13:47 SQL> 
18:13:47 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.22
18:13:48 SQL> CREATE TABLE svm6162 COMPRESS AS
18:13:48   2  SELECT
18:13:48   3  pair
18:13:48   4  ,ydate
18:13:48   5  ,prdate
18:13:48   6  ,clse
18:13:48   7  ,g6
18:13:48   8  ,gatt
18:13:48   9  ,gattn
18:13:48  10  ,trend
18:13:48  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
18:13:48  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
18:13:48  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
18:13:48  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
18:13:48  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
18:13:48  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
18:13:48  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
18:13:48  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
18:13:48  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
18:13:48  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
18:13:48  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
18:13:48  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
18:13:48  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
18:13:48  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
18:13:48  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
18:13:48  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
18:13:48  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
18:13:48  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
18:13:48  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
18:13:48  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
18:13:48  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
18:13:48  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
18:13:48  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
18:13:48  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
18:13:48  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
18:13:48  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
18:13:48  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
18:13:48  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
18:13:48  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
18:13:48  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
18:13:48  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
18:13:48  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
18:13:48  43  ,hh  att32
18:13:48  44  ,d   att33
18:13:48  45  ,w   att34
18:13:48  46  ,mpm att35
18:13:48  47  ,mph att36
18:13:48  48  ,trend att37
18:13:48  49  FROM svm6142
18:13:48  50  ORDER BY ydate
18:13:48  51  /

Table created.

Elapsed: 00:00:04.84
18:13:53 SQL> 
18:13:53 SQL> -- rpt
18:13:53 SQL> 
18:13:53 SQL> SELECT
18:13:53   2  pair
18:13:53   3  ,trend
18:13:53   4  ,gatt
18:13:53   5  ,COUNT(pair)
18:13:53   6  ,AVG(g6)
18:13:53   7  FROM svm6162
18:13:53   8  GROUP BY pair,trend,gatt
18:13:53   9  ORDER BY pair,trend,gatt
18:13:53  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5714 -.00217002
aud_usd 	-1 up	      3725 .003773641
aud_usd 	-1		18
aud_usd 	 1 nup	      6703  -.0021173
aud_usd 	 1 up	      3594 .004054149
aud_usd 	 1		54

6 rows selected.

Elapsed: 00:00:00.03
18:13:53 SQL> 
18:13:53 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.14
18:13:53 SQL> CREATE TABLE modsrc COMPRESS AS
18:13:53   2  SELECT
18:13:53   3  pair
18:13:53   4  ,ydate
18:13:53   5  ,prdate
18:13:53   6  ,trend
18:13:53   7  ,g6
18:13:53   8  ,gatt
18:13:53   9  ,gattn
18:13:53  10  FROM svm6162
18:13:53  11  /

Table created.

Elapsed: 00:00:00.09
18:13:53 SQL> 
18:13:53 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
18:13:53 SQL> 
18:13:53 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.14
18:13:53 SQL> CREATE TABLE aud_ms610 COMPRESS AS
18:13:53   2  SELECT
18:13:53   3  ydate
18:13:53   4  ,trend aud_trend
18:13:53   5  ,g6    aud_g6
18:13:53   6  ,gatt  aud_gatt
18:13:53   7  ,gattn aud_gattn
18:13:53   8  FROM modsrc
18:13:53   9  /

Table created.

Elapsed: 00:00:00.07
18:13:53 SQL> 
18:13:53 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
18:13:53 SQL> 
18:13:53 SQL> -- I need a copy of the attributes:
18:13:53 SQL> 
18:13:53 SQL> 
18:13:53 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.04
18:13:53 SQL> CREATE TABLE aud_att COMPRESS AS
18:13:53   2  SELECT
18:13:53   3  ydate
18:13:53   4  ,att00 aud_att00
18:13:53   5  ,att01 aud_att01
18:13:53   6  ,att02 aud_att02
18:13:53   7  ,att03 aud_att03
18:13:53   8  ,att04 aud_att04
18:13:53   9  ,att05 aud_att05
18:13:53  10  ,att06 aud_att06
18:13:53  11  ,att07 aud_att07
18:13:53  12  ,att08 aud_att08
18:13:53  13  ,att09 aud_att09
18:13:53  14  ,att10 aud_att10
18:13:53  15  ,att11 aud_att11
18:13:53  16  ,att12 aud_att12
18:13:53  17  ,att13 aud_att13
18:13:53  18  ,att14 aud_att14
18:13:53  19  ,att15 aud_att15
18:13:53  20  ,att16 aud_att16
18:13:53  21  ,att17 aud_att17
18:13:53  22  ,att18 aud_att18
18:13:53  23  ,att19 aud_att19
18:13:53  24  ,att20 aud_att20
18:13:53  25  ,att21 aud_att21
18:13:53  26  ,att22 aud_att22
18:13:53  27  ,att23 aud_att23
18:13:53  28  ,att24 aud_att24
18:13:53  29  ,att25 aud_att25
18:13:53  30  ,att26 aud_att26
18:13:53  31  ,att27 aud_att27
18:13:53  32  ,att28 aud_att28
18:13:53  33  ,att29 aud_att29
18:13:53  34  ,att30 aud_att30
18:13:53  35  ,att31 aud_att31
18:13:53  36  ,att32 aud_att32
18:13:53  37  ,att33 aud_att33
18:13:53  38  ,att34 aud_att34
18:13:53  39  ,att35 aud_att35
18:13:53  40  ,att36 aud_att36
18:13:53  41  ,att37 aud_att37
18:13:53  42  FROM svm6162
18:13:53  43  /

Table created.

Elapsed: 00:00:00.18
18:13:54 SQL> 
18:13:54 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.54
18:13:54 SQL> 
18:13:54 SQL> -- rpt
18:13:54 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.89
18:13:55 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.00
18:13:55 SQL> 
18:13:55 SQL> --
18:13:55 SQL> -- gbp610.sql
18:13:55 SQL> --
18:13:55 SQL> 
18:13:55 SQL> -- Creates views and tables for backtesting a forex SVM strategy
18:13:55 SQL> 
18:13:55 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.43
18:13:55 SQL> 
18:13:55 SQL> -- I created di5min here:
18:13:55 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
18:13:55 SQL> 
18:13:55 SQL> CREATE OR REPLACE VIEW svm6102 AS
18:13:55   2  SELECT
18:13:55   3  pair
18:13:55   4  ,ydate
18:13:55   5  ,prdate
18:13:55   6  ,rownum rnum -- acts as t in my time-series
18:13:55   7  ,clse
18:13:55   8  -- Derive a bunch of attributes from clse, the latest price:
18:13:55   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
18:13:55  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
18:13:55  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
18:13:55  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
18:13:55  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
18:13:55  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
18:13:55  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
18:13:55  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
18:13:55  17  --
18:13:55  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
18:13:55  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
18:13:55  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
18:13:55  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
18:13:55  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
18:13:55  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
18:13:55  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
18:13:55  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
18:13:55  26  --
18:13:55  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
18:13:55  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
18:13:55  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
18:13:55  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
18:13:55  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
18:13:55  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
18:13:55  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
18:13:55  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
18:13:55  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
18:13:55  36  FROM di5min WHERE pair LIKE'%gbp%'
18:13:55  37  AND ydate > sysdate - 95
18:13:55  38  ORDER BY ydate
18:13:55  39  /

View created.

Elapsed: 00:00:00.04
18:13:55 SQL> 
18:13:55 SQL> -- rpt
18:13:55 SQL> 
18:13:55 SQL> SELECT
18:13:55   2  pair
18:13:55   3  ,COUNT(pair)
18:13:55   4  ,MIN(clse),MAX(clse)
18:13:55   5  ,MIN(avg6),MAX(avg6)
18:13:55   6  ,MIN(ydate),MAX(ydate)
18:13:55   7  FROM svm6102
18:13:55   8  GROUP BY pair
18:13:55   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19810   1.535325	   1.6295 1.53696747 1.62716986 2010-10-04 18:15:01 2011-01-07 18:10:00

Elapsed: 00:00:00.86
18:13:56 SQL> 
18:13:56 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
18:13:56 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.28
18:13:57 SQL> CREATE TABLE svm6122 COMPRESS AS
18:13:57   2  SELECT
18:13:57   3  pair
18:13:57   4  ,ydate
18:13:57   5  ,prdate
18:13:57   6  ,clse
18:13:57   7  -- g6 is important. I want to predict g6:
18:13:57   8  ,ld6 - clse g6
18:13:57   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
18:13:57  10  -- I want more attributes from the ones I derived above:
18:13:57  11  -- clse relation to moving-min
18:13:57  12  ,clse-min4  cm4
18:13:57  13  ,clse-min6  cm6
18:13:57  14  ,clse-min8  cm8
18:13:57  15  ,clse-min10 cm10
18:13:57  16  ,clse-min12 cm12
18:13:57  17  ,clse-min14 cm14
18:13:57  18  ,clse-min16 cm16
18:13:57  19  ,clse-min18 cm18
18:13:57  20  -- clse relation to moving-avg
18:13:57  21  ,clse-avg4  ca4
18:13:57  22  ,clse-avg6  ca6
18:13:57  23  ,clse-avg8  ca8
18:13:57  24  ,clse-avg10 ca10
18:13:57  25  ,clse-avg12 ca12
18:13:57  26  ,clse-avg14 ca14
18:13:57  27  ,clse-avg16 ca16
18:13:57  28  ,clse-avg18 ca18
18:13:57  29  -- clse relation to moving-max
18:13:57  30  ,clse-max4  cx4
18:13:57  31  ,clse-max6  cx6
18:13:57  32  ,clse-max8  cx8
18:13:57  33  ,clse-max10 cx10
18:13:57  34  ,clse-max12 cx12
18:13:57  35  ,clse-max14 cx14
18:13:57  36  ,clse-max16 cx16
18:13:57  37  ,clse-max18 cx18
18:13:57  38  -- Derive more attributes.
18:13:57  39  -- I want to use CORR() here to help SVM see the shape of the series.
18:13:57  40  -- But COVAR_POP is more stable:
18:13:57  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
18:13:57  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
18:13:57  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
18:13:57  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
18:13:57  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
18:13:57  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
18:13:57  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
18:13:57  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
18:13:57  49  -- Derive date related attributes:
18:13:57  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
18:13:57  51  ,0+TO_CHAR(ydate,'D')d
18:13:57  52  ,0+TO_CHAR(ydate,'W')w
18:13:57  53  -- mpm stands for minutes-past-midnight:
18:13:57  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
18:13:57  55  -- mph stands for minutes-past-hour:
18:13:57  56  ,0+TO_CHAR(ydate,'MI')mph
18:13:57  57  FROM svm6102
18:13:57  58  ORDER BY ydate
18:13:57  59  /

Table created.

Elapsed: 00:00:02.11
18:13:59 SQL> 
18:13:59 SQL> -- rpt
18:13:59 SQL> 
18:13:59 SQL> SELECT
18:13:59   2  pair
18:13:59   3  ,COUNT(pair)
18:13:59   4  ,MIN(clse),MAX(clse)
18:13:59   5  ,MIN(ydate),MAX(ydate)
18:13:59   6  FROM svm6122
18:13:59   7  GROUP BY pair
18:13:59   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19810   1.535325	   1.6295 2010-10-04 18:15:01 2011-01-07 18:10:00

Elapsed: 00:00:00.04
18:13:59 SQL> 
18:13:59 SQL> -- Prepare for derivation of NTILE based params:
18:13:59 SQL> 
18:13:59 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.21
18:13:59 SQL> CREATE TABLE svm6142 COMPRESS AS
18:13:59   2  SELECT
18:13:59   3  pair
18:13:59   4  ,ydate
18:13:59   5  ,prdate
18:13:59   6  ,clse
18:13:59   7  ,g6
18:13:59   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
18:13:59   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
18:13:59  10  ,CASE WHEN trend IS NULL THEN 1
18:13:59  11  	    WHEN trend =0      THEN 1
18:13:59  12  	    ELSE trend END trend
18:13:59  13  ,cm4
18:13:59  14  ,cm6
18:13:59  15  ,cm8
18:13:59  16  ,cm10
18:13:59  17  ,cm12
18:13:59  18  ,cm14
18:13:59  19  ,cm16
18:13:59  20  ,cm18
18:13:59  21  --
18:13:59  22  ,ca4
18:13:59  23  ,ca6
18:13:59  24  ,ca8
18:13:59  25  ,ca10
18:13:59  26  ,ca12
18:13:59  27  ,ca14
18:13:59  28  ,ca16
18:13:59  29  ,ca18
18:13:59  30  --
18:13:59  31  ,cx4
18:13:59  32  ,cx6
18:13:59  33  ,cx8
18:13:59  34  ,cx10
18:13:59  35  ,cx12
18:13:59  36  ,cx14
18:13:59  37  ,cx16
18:13:59  38  ,cx18
18:13:59  39  --
18:13:59  40  ,crr4
18:13:59  41  ,crr6
18:13:59  42  ,crr8
18:13:59  43  ,crr10
18:13:59  44  ,crr12
18:13:59  45  ,crr14
18:13:59  46  ,crr16
18:13:59  47  ,crr18
18:13:59  48  --
18:13:59  49  ,hh
18:13:59  50  ,d
18:13:59  51  ,w
18:13:59  52  ,mpm
18:13:59  53  ,mph
18:13:59  54  FROM svm6122
18:13:59  55  ORDER BY ydate
18:13:59  56  /

Table created.

Elapsed: 00:00:00.36
18:13:59 SQL> 
18:13:59 SQL> -- rpt
18:13:59 SQL> 
18:13:59 SQL> SELECT
18:13:59   2  pair
18:13:59   3  ,trend
18:13:59   4  ,gatt
18:13:59   5  ,COUNT(pair)
18:13:59   6  ,AVG(g6)
18:13:59   7  FROM svm6142
18:13:59   8  GROUP BY pair,trend,gatt
18:13:59   9  ORDER BY pair,trend,gatt
18:13:59  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6500 -.00260586
gbp_usd 	-1 up	      3557  .00434541
gbp_usd 	 1 nup	      6205 -.00267133
gbp_usd 	 1 up	      3476 .004571674
gbp_usd 	 1		72

Elapsed: 00:00:00.07
18:13:59 SQL> 
18:13:59 SQL> 
18:13:59 SQL> -- Derive NTILE based params:
18:13:59 SQL> 
18:13:59 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.23
18:14:00 SQL> CREATE TABLE svm6162 COMPRESS AS
18:14:00   2  SELECT
18:14:00   3  pair
18:14:00   4  ,ydate
18:14:00   5  ,prdate
18:14:00   6  ,clse
18:14:00   7  ,g6
18:14:00   8  ,gatt
18:14:00   9  ,gattn
18:14:00  10  ,trend
18:14:00  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
18:14:00  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
18:14:00  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
18:14:00  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
18:14:00  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
18:14:00  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
18:14:00  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
18:14:00  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
18:14:00  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
18:14:00  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
18:14:00  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
18:14:00  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
18:14:00  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
18:14:00  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
18:14:00  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
18:14:00  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
18:14:00  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
18:14:00  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
18:14:00  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
18:14:00  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
18:14:00  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
18:14:00  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
18:14:00  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
18:14:00  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
18:14:00  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
18:14:00  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
18:14:00  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
18:14:00  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
18:14:00  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
18:14:00  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
18:14:00  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
18:14:00  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
18:14:00  43  ,hh  att32
18:14:00  44  ,d   att33
18:14:00  45  ,w   att34
18:14:00  46  ,mpm att35
18:14:00  47  ,mph att36
18:14:00  48  ,trend att37
18:14:00  49  FROM svm6142
18:14:00  50  ORDER BY ydate
18:14:00  51  /
