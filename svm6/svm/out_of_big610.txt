
SQL*Plus: Release 11.2.0.1.0 Production on Mon Jan 3 23:43:06 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

23:43:06 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
23:43:06 SQL> 23:43:06 SQL> --
23:43:06 SQL> -- eur610.sql
23:43:06 SQL> --
23:43:06 SQL> 
23:43:06 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:43:06 SQL> 
23:43:06 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.02
23:43:06 SQL> 
23:43:06 SQL> -- I created di5min here:
23:43:06 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:43:06 SQL> 
23:43:06 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:43:06   2  SELECT
23:43:06   3  pair
23:43:06   4  ,ydate
23:43:06   5  ,prdate
23:43:06   6  ,rownum rnum -- acts as t in my time-series
23:43:06   7  ,clse
23:43:06   8  -- Derive a bunch of attributes from clse, the latest price:
23:43:06   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:43:06  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:43:06  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:43:06  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:43:06  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:43:06  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:43:06  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:43:06  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:43:06  17  --
23:43:06  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:43:06  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:43:06  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:43:06  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:43:06  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:43:06  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:43:06  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:43:06  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:43:06  26  --
23:43:06  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:43:06  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:43:06  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:43:06  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:43:06  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:43:06  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:43:06  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:43:06  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:43:06  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:43:06  36  FROM di5min WHERE pair LIKE'%eur%'
23:43:06  37  AND ydate > sysdate - 95
23:43:06  38  ORDER BY ydate
23:43:06  39  /

View created.

Elapsed: 00:00:00.09
23:43:06 SQL> 
23:43:06 SQL> -- rpt
23:43:06 SQL> 
23:43:06 SQL> SELECT
23:43:06   2  pair
23:43:06   3  ,COUNT(pair)
23:43:06   4  ,MIN(clse),MAX(clse)
23:43:06   5  ,MIN(avg6),MAX(avg6)
23:43:06   6  ,MIN(ydate),MAX(ydate)
23:43:06   7  FROM svm6102
23:43:06   8  GROUP BY pair
23:43:06   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19256    1.29735	   1.4273 1.29875103 1.42436233 2010-09-30 23:45:01 2011-01-03 23:35:00

Elapsed: 00:00:00.92
23:43:07 SQL> 
23:43:07 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:43:07 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.09
23:43:07 SQL> CREATE TABLE svm6122 COMPRESS AS
23:43:07   2  SELECT
23:43:07   3  pair
23:43:07   4  ,ydate
23:43:07   5  ,prdate
23:43:07   6  ,clse
23:43:07   7  -- g6 is important. I want to predict g6:
23:43:07   8  ,ld6 - clse g6
23:43:07   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:43:07  10  -- I want more attributes from the ones I derived above:
23:43:07  11  -- clse relation to moving-min
23:43:07  12  ,clse-min4  cm4
23:43:07  13  ,clse-min6  cm6
23:43:07  14  ,clse-min8  cm8
23:43:07  15  ,clse-min10 cm10
23:43:07  16  ,clse-min12 cm12
23:43:07  17  ,clse-min14 cm14
23:43:07  18  ,clse-min16 cm16
23:43:07  19  ,clse-min18 cm18
23:43:07  20  -- clse relation to moving-avg
23:43:07  21  ,clse-avg4  ca4
23:43:07  22  ,clse-avg6  ca6
23:43:07  23  ,clse-avg8  ca8
23:43:07  24  ,clse-avg10 ca10
23:43:07  25  ,clse-avg12 ca12
23:43:07  26  ,clse-avg14 ca14
23:43:07  27  ,clse-avg16 ca16
23:43:07  28  ,clse-avg18 ca18
23:43:07  29  -- clse relation to moving-max
23:43:07  30  ,clse-max4  cx4
23:43:07  31  ,clse-max6  cx6
23:43:07  32  ,clse-max8  cx8
23:43:07  33  ,clse-max10 cx10
23:43:07  34  ,clse-max12 cx12
23:43:07  35  ,clse-max14 cx14
23:43:07  36  ,clse-max16 cx16
23:43:07  37  ,clse-max18 cx18
23:43:07  38  -- Derive more attributes.
23:43:07  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:43:07  40  -- But COVAR_POP is more stable:
23:43:07  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:43:07  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:43:07  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:43:07  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:43:07  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:43:07  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:43:07  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:43:07  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:43:07  49  -- Derive date related attributes:
23:43:07  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:43:07  51  ,0+TO_CHAR(ydate,'D')d
23:43:07  52  ,0+TO_CHAR(ydate,'W')w
23:43:07  53  -- mpm stands for minutes-past-midnight:
23:43:07  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:43:07  55  -- mph stands for minutes-past-hour:
23:43:07  56  ,0+TO_CHAR(ydate,'MI')mph
23:43:07  57  FROM svm6102
23:43:07  58  ORDER BY ydate
23:43:07  59  /

Table created.

Elapsed: 00:00:02.47
23:43:10 SQL> 
23:43:10 SQL> -- rpt
23:43:10 SQL> 
23:43:10 SQL> SELECT
23:43:10   2  pair
23:43:10   3  ,COUNT(pair)
23:43:10   4  ,MIN(clse),MAX(clse)
23:43:10   5  ,MIN(ydate),MAX(ydate)
23:43:10   6  FROM svm6122
23:43:10   7  GROUP BY pair
23:43:10   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19256    1.29735	   1.4273 2010-09-30 23:45:01 2011-01-03 23:35:00

Elapsed: 00:00:00.08
23:43:10 SQL> 
23:43:10 SQL> -- Prepare for derivation of NTILE based params:
23:43:10 SQL> 
23:43:10 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.21
23:43:10 SQL> CREATE TABLE svm6142 COMPRESS AS
23:43:10   2  SELECT
23:43:10   3  pair
23:43:10   4  ,ydate
23:43:10   5  ,prdate
23:43:10   6  ,clse
23:43:10   7  ,g6
23:43:10   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:43:10   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:43:10  10  ,CASE WHEN trend IS NULL THEN 1
23:43:10  11  	    WHEN trend =0      THEN 1
23:43:10  12  	    ELSE trend END trend
23:43:10  13  ,cm4
23:43:10  14  ,cm6
23:43:10  15  ,cm8
23:43:10  16  ,cm10
23:43:10  17  ,cm12
23:43:10  18  ,cm14
23:43:10  19  ,cm16
23:43:10  20  ,cm18
23:43:10  21  --
23:43:10  22  ,ca4
23:43:10  23  ,ca6
23:43:10  24  ,ca8
23:43:10  25  ,ca10
23:43:10  26  ,ca12
23:43:10  27  ,ca14
23:43:10  28  ,ca16
23:43:10  29  ,ca18
23:43:10  30  --
23:43:10  31  ,cx4
23:43:10  32  ,cx6
23:43:10  33  ,cx8
23:43:10  34  ,cx10
23:43:10  35  ,cx12
23:43:10  36  ,cx14
23:43:10  37  ,cx16
23:43:10  38  ,cx18
23:43:10  39  --
23:43:10  40  ,crr4
23:43:10  41  ,crr6
23:43:10  42  ,crr8
23:43:10  43  ,crr10
23:43:10  44  ,crr12
23:43:10  45  ,crr14
23:43:10  46  ,crr16
23:43:10  47  ,crr18
23:43:10  48  --
23:43:10  49  ,hh
23:43:10  50  ,d
23:43:10  51  ,w
23:43:10  52  ,mpm
23:43:10  53  ,mph
23:43:10  54  FROM svm6122
23:43:10  55  ORDER BY ydate
23:43:10  56  /

Table created.

Elapsed: 00:00:00.38
23:43:10 SQL> 
23:43:10 SQL> -- rpt
23:43:10 SQL> 
23:43:10 SQL> SELECT
23:43:10   2  pair
23:43:10   3  ,trend
23:43:10   4  ,gatt
23:43:10   5  ,COUNT(pair)
23:43:10   6  ,AVG(g6)
23:43:10   7  FROM svm6142
23:43:10   8  GROUP BY pair,trend,gatt
23:43:10   9  ORDER BY pair,trend,gatt
23:43:10  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6013 -.00315159
eur_usd 	-1 up	      3530 .004476225
eur_usd 	-1		16
eur_usd 	 1 nup	      5799 -.00316998
eur_usd 	 1 up	      3842 .005059917
eur_usd 	 1		56

6 rows selected.

Elapsed: 00:00:00.08
23:43:10 SQL> 
23:43:10 SQL> 
23:43:10 SQL> -- Derive NTILE based params:
23:43:10 SQL> 
23:43:10 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.07
23:43:10 SQL> CREATE TABLE svm6162 COMPRESS AS
23:43:10   2  SELECT
23:43:10   3  pair
23:43:10   4  ,ydate
23:43:10   5  ,prdate
23:43:10   6  ,clse
23:43:10   7  ,g6
23:43:10   8  ,gatt
23:43:10   9  ,gattn
23:43:10  10  ,trend
23:43:10  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:43:10  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:43:10  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:43:10  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:43:10  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:43:10  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:43:10  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:43:10  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:43:10  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:43:10  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:43:10  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:43:10  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:43:10  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:43:10  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:43:10  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:43:10  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:43:10  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:43:10  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:43:10  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:43:10  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:43:10  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:43:10  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:43:10  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:43:10  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:43:10  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:43:10  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:43:10  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:43:10  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:43:10  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:43:10  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:43:10  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:43:10  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:43:10  43  ,hh  att32
23:43:10  44  ,d   att33
23:43:10  45  ,w   att34
23:43:10  46  ,mpm att35
23:43:10  47  ,mph att36
23:43:10  48  ,trend att37
23:43:10  49  FROM svm6142
23:43:10  50  ORDER BY ydate
23:43:10  51  /

Table created.

Elapsed: 00:00:04.77
23:43:15 SQL> 
23:43:15 SQL> -- rpt
23:43:15 SQL> 
23:43:15 SQL> SELECT
23:43:15   2  pair
23:43:15   3  ,trend
23:43:15   4  ,gatt
23:43:15   5  ,COUNT(pair)
23:43:15   6  ,AVG(g6)
23:43:15   7  FROM svm6162
23:43:15   8  GROUP BY pair,trend,gatt
23:43:15   9  ORDER BY pair,trend,gatt
23:43:15  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6013 -.00315159
eur_usd 	-1 up	      3530 .004476225
eur_usd 	-1		16
eur_usd 	 1 nup	      5799 -.00316998
eur_usd 	 1 up	      3842 .005059917
eur_usd 	 1		56

6 rows selected.

Elapsed: 00:00:00.03
23:43:15 SQL> 
23:43:15 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.09
23:43:15 SQL> CREATE TABLE modsrc COMPRESS AS
23:43:15   2  SELECT
23:43:15   3  pair
23:43:15   4  ,ydate
23:43:15   5  ,prdate
23:43:15   6  ,trend
23:43:15   7  ,g6
23:43:15   8  ,gatt
23:43:15   9  ,gattn
23:43:15  10  FROM svm6162
23:43:15  11  /

Table created.

Elapsed: 00:00:00.13
23:43:15 SQL> 
23:43:15 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
23:43:16 SQL> 
23:43:16 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
23:43:16 SQL> CREATE TABLE eur_ms610 COMPRESS AS
23:43:16   2  SELECT
23:43:16   3  ydate
23:43:16   4  ,trend eur_trend
23:43:16   5  ,g6    eur_g6
23:43:16   6  ,gatt  eur_gatt
23:43:16   7  ,gattn eur_gattn
23:43:16   8  FROM modsrc
23:43:16   9  /

Table created.

Elapsed: 00:00:00.08
23:43:16 SQL> 
23:43:16 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
23:43:16 SQL> 
23:43:16 SQL> -- I need a copy of the attributes:
23:43:16 SQL> 
23:43:16 SQL> 
23:43:16 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.04
23:43:16 SQL> CREATE TABLE eur_att COMPRESS AS
23:43:16   2  SELECT
23:43:16   3  ydate
23:43:16   4  ,att00 eur_att00
23:43:16   5  ,att01 eur_att01
23:43:16   6  ,att02 eur_att02
23:43:16   7  ,att03 eur_att03
23:43:16   8  ,att04 eur_att04
23:43:16   9  ,att05 eur_att05
23:43:16  10  ,att06 eur_att06
23:43:16  11  ,att07 eur_att07
23:43:16  12  ,att08 eur_att08
23:43:16  13  ,att09 eur_att09
23:43:16  14  ,att10 eur_att10
23:43:16  15  ,att11 eur_att11
23:43:16  16  ,att12 eur_att12
23:43:16  17  ,att13 eur_att13
23:43:16  18  ,att14 eur_att14
23:43:16  19  ,att15 eur_att15
23:43:16  20  ,att16 eur_att16
23:43:16  21  ,att17 eur_att17
23:43:16  22  ,att18 eur_att18
23:43:16  23  ,att19 eur_att19
23:43:16  24  ,att20 eur_att20
23:43:16  25  ,att21 eur_att21
23:43:16  26  ,att22 eur_att22
23:43:16  27  ,att23 eur_att23
23:43:16  28  ,att24 eur_att24
23:43:16  29  ,att25 eur_att25
23:43:16  30  ,att26 eur_att26
23:43:16  31  ,att27 eur_att27
23:43:16  32  ,att28 eur_att28
23:43:16  33  ,att29 eur_att29
23:43:16  34  ,att30 eur_att30
23:43:16  35  ,att31 eur_att31
23:43:16  36  ,att32 eur_att32
23:43:16  37  ,att33 eur_att33
23:43:16  38  ,att34 eur_att34
23:43:16  39  ,att35 eur_att35
23:43:16  40  ,att36 eur_att36
23:43:16  41  ,att37 eur_att37
23:43:16  42  FROM svm6162
23:43:16  43  /

Table created.

Elapsed: 00:00:00.20
23:43:16 SQL> 
23:43:16 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
23:43:17 SQL> 
23:43:17 SQL> -- rpt
23:43:17 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.90
23:43:18 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.00
23:43:18 SQL> 
23:43:18 SQL> --
23:43:18 SQL> -- aud610.sql
23:43:18 SQL> --
23:43:18 SQL> 
23:43:18 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:43:18 SQL> 
23:43:18 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.44
23:43:18 SQL> 
23:43:18 SQL> -- I created di5min here:
23:43:18 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:43:18 SQL> 
23:43:18 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:43:18   2  SELECT
23:43:18   3  pair
23:43:18   4  ,ydate
23:43:18   5  ,prdate
23:43:18   6  ,rownum rnum -- acts as t in my time-series
23:43:18   7  ,clse
23:43:18   8  -- Derive a bunch of attributes from clse, the latest price:
23:43:18   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:43:18  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:43:18  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:43:18  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:43:18  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:43:18  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:43:18  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:43:18  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:43:18  17  --
23:43:18  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:43:18  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:43:18  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:43:18  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:43:18  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:43:18  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:43:18  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:43:18  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:43:18  26  --
23:43:18  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:43:18  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:43:18  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:43:18  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:43:18  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:43:18  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:43:18  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:43:18  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:43:18  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:43:18  36  FROM di5min WHERE pair LIKE'%aud%'
23:43:18  37  AND ydate > sysdate - 95
23:43:18  38  ORDER BY ydate
23:43:18  39  /

View created.

Elapsed: 00:00:00.06
23:43:18 SQL> 
23:43:18 SQL> -- rpt
23:43:18 SQL> 
23:43:18 SQL> SELECT
23:43:18   2  pair
23:43:18   3  ,COUNT(pair)
23:43:18   4  ,MIN(clse),MAX(clse)
23:43:18   5  ,MIN(avg6),MAX(avg6)
23:43:18   6  ,MIN(ydate),MAX(ydate)
23:43:18   7  FROM svm6102
23:43:18   8  GROUP BY pair
23:43:18   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19253	.95405	  1.02495 .957141438 1.02284247 2010-09-30 23:45:01 2011-01-03 23:35:00

Elapsed: 00:00:00.85
23:43:19 SQL> 
23:43:19 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:43:19 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.25
23:43:19 SQL> CREATE TABLE svm6122 COMPRESS AS
23:43:19   2  SELECT
23:43:19   3  pair
23:43:19   4  ,ydate
23:43:19   5  ,prdate
23:43:19   6  ,clse
23:43:19   7  -- g6 is important. I want to predict g6:
23:43:19   8  ,ld6 - clse g6
23:43:19   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:43:19  10  -- I want more attributes from the ones I derived above:
23:43:19  11  -- clse relation to moving-min
23:43:19  12  ,clse-min4  cm4
23:43:19  13  ,clse-min6  cm6
23:43:19  14  ,clse-min8  cm8
23:43:19  15  ,clse-min10 cm10
23:43:19  16  ,clse-min12 cm12
23:43:19  17  ,clse-min14 cm14
23:43:19  18  ,clse-min16 cm16
23:43:19  19  ,clse-min18 cm18
23:43:19  20  -- clse relation to moving-avg
23:43:19  21  ,clse-avg4  ca4
23:43:19  22  ,clse-avg6  ca6
23:43:19  23  ,clse-avg8  ca8
23:43:19  24  ,clse-avg10 ca10
23:43:19  25  ,clse-avg12 ca12
23:43:19  26  ,clse-avg14 ca14
23:43:19  27  ,clse-avg16 ca16
23:43:19  28  ,clse-avg18 ca18
23:43:19  29  -- clse relation to moving-max
23:43:19  30  ,clse-max4  cx4
23:43:19  31  ,clse-max6  cx6
23:43:19  32  ,clse-max8  cx8
23:43:19  33  ,clse-max10 cx10
23:43:19  34  ,clse-max12 cx12
23:43:19  35  ,clse-max14 cx14
23:43:19  36  ,clse-max16 cx16
23:43:19  37  ,clse-max18 cx18
23:43:19  38  -- Derive more attributes.
23:43:19  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:43:19  40  -- But COVAR_POP is more stable:
23:43:19  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:43:19  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:43:19  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:43:19  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:43:19  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:43:19  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:43:19  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:43:19  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:43:19  49  -- Derive date related attributes:
23:43:19  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:43:19  51  ,0+TO_CHAR(ydate,'D')d
23:43:19  52  ,0+TO_CHAR(ydate,'W')w
23:43:19  53  -- mpm stands for minutes-past-midnight:
23:43:19  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:43:19  55  -- mph stands for minutes-past-hour:
23:43:19  56  ,0+TO_CHAR(ydate,'MI')mph
23:43:19  57  FROM svm6102
23:43:19  58  ORDER BY ydate
23:43:19  59  /

Table created.

Elapsed: 00:00:02.08
23:43:21 SQL> 
23:43:21 SQL> -- rpt
23:43:21 SQL> 
23:43:21 SQL> SELECT
23:43:21   2  pair
23:43:21   3  ,COUNT(pair)
23:43:21   4  ,MIN(clse),MAX(clse)
23:43:21   5  ,MIN(ydate),MAX(ydate)
23:43:21   6  FROM svm6122
23:43:21   7  GROUP BY pair
23:43:21   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19253	.95405	  1.02495 2010-09-30 23:45:01 2011-01-03 23:35:00

Elapsed: 00:00:00.04
23:43:21 SQL> 
23:43:21 SQL> -- Prepare for derivation of NTILE based params:
23:43:21 SQL> 
23:43:21 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.16
23:43:21 SQL> CREATE TABLE svm6142 COMPRESS AS
23:43:21   2  SELECT
23:43:21   3  pair
23:43:21   4  ,ydate
23:43:21   5  ,prdate
23:43:21   6  ,clse
23:43:21   7  ,g6
23:43:21   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:43:21   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:43:21  10  ,CASE WHEN trend IS NULL THEN 1
23:43:21  11  	    WHEN trend =0      THEN 1
23:43:21  12  	    ELSE trend END trend
23:43:21  13  ,cm4
23:43:21  14  ,cm6
23:43:21  15  ,cm8
23:43:21  16  ,cm10
23:43:21  17  ,cm12
23:43:21  18  ,cm14
23:43:21  19  ,cm16
23:43:21  20  ,cm18
23:43:21  21  --
23:43:21  22  ,ca4
23:43:21  23  ,ca6
23:43:21  24  ,ca8
23:43:21  25  ,ca10
23:43:21  26  ,ca12
23:43:21  27  ,ca14
23:43:21  28  ,ca16
23:43:21  29  ,ca18
23:43:21  30  --
23:43:21  31  ,cx4
23:43:21  32  ,cx6
23:43:21  33  ,cx8
23:43:21  34  ,cx10
23:43:21  35  ,cx12
23:43:21  36  ,cx14
23:43:21  37  ,cx16
23:43:21  38  ,cx18
23:43:21  39  --
23:43:21  40  ,crr4
23:43:21  41  ,crr6
23:43:21  42  ,crr8
23:43:21  43  ,crr10
23:43:21  44  ,crr12
23:43:21  45  ,crr14
23:43:21  46  ,crr16
23:43:21  47  ,crr18
23:43:21  48  --
23:43:21  49  ,hh
23:43:21  50  ,d
23:43:21  51  ,w
23:43:21  52  ,mpm
23:43:21  53  ,mph
23:43:21  54  FROM svm6122
23:43:21  55  ORDER BY ydate
23:43:21  56  /

Table created.

Elapsed: 00:00:00.37
23:43:22 SQL> 
23:43:22 SQL> -- rpt
23:43:22 SQL> 
23:43:22 SQL> SELECT
23:43:22   2  pair
23:43:22   3  ,trend
23:43:22   4  ,gatt
23:43:22   5  ,COUNT(pair)
23:43:22   6  ,AVG(g6)
23:43:22   7  FROM svm6142
23:43:22   8  GROUP BY pair,trend,gatt
23:43:22   9  ORDER BY pair,trend,gatt
23:43:22  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5145 -.00214456
aud_usd 	-1 up	      3700 .003770716
aud_usd 	-1		53
aud_usd 	 1 nup	      6712 -.00208237
aud_usd 	 1 up	      3624 .004048337
aud_usd 	 1		19

6 rows selected.

Elapsed: 00:00:00.06
23:43:22 SQL> 
23:43:22 SQL> 
23:43:22 SQL> -- Derive NTILE based params:
23:43:22 SQL> 
23:43:22 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.19
23:43:22 SQL> CREATE TABLE svm6162 COMPRESS AS
23:43:22   2  SELECT
23:43:22   3  pair
23:43:22   4  ,ydate
23:43:22   5  ,prdate
23:43:22   6  ,clse
23:43:22   7  ,g6
23:43:22   8  ,gatt
23:43:22   9  ,gattn
23:43:22  10  ,trend
23:43:22  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:43:22  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:43:22  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:43:22  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:43:22  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:43:22  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:43:22  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:43:22  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:43:22  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:43:22  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:43:22  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:43:22  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:43:22  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:43:22  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:43:22  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:43:22  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:43:22  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:43:22  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:43:22  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:43:22  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:43:22  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:43:22  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:43:22  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:43:22  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:43:22  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:43:22  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:43:22  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:43:22  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:43:22  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:43:22  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:43:22  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:43:22  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:43:22  43  ,hh  att32
23:43:22  44  ,d   att33
23:43:22  45  ,w   att34
23:43:22  46  ,mpm att35
23:43:22  47  ,mph att36
23:43:22  48  ,trend att37
23:43:22  49  FROM svm6142
23:43:22  50  ORDER BY ydate
23:43:22  51  /

Table created.

Elapsed: 00:00:05.19
23:43:27 SQL> 
23:43:27 SQL> -- rpt
23:43:27 SQL> 
23:43:27 SQL> SELECT
23:43:27   2  pair
23:43:27   3  ,trend
23:43:27   4  ,gatt
23:43:27   5  ,COUNT(pair)
23:43:27   6  ,AVG(g6)
23:43:27   7  FROM svm6162
23:43:27   8  GROUP BY pair,trend,gatt
23:43:27   9  ORDER BY pair,trend,gatt
23:43:27  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5145 -.00214456
aud_usd 	-1 up	      3700 .003770716
aud_usd 	-1		53
aud_usd 	 1 nup	      6712 -.00208237
aud_usd 	 1 up	      3624 .004048337
aud_usd 	 1		19

6 rows selected.

Elapsed: 00:00:00.02
23:43:27 SQL> 
23:43:27 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
23:43:27 SQL> CREATE TABLE modsrc COMPRESS AS
23:43:27   2  SELECT
23:43:27   3  pair
23:43:27   4  ,ydate
23:43:27   5  ,prdate
23:43:27   6  ,trend
23:43:27   7  ,g6
23:43:27   8  ,gatt
23:43:27   9  ,gattn
23:43:27  10  FROM svm6162
23:43:27  11  /

Table created.

Elapsed: 00:00:00.08
23:43:28 SQL> 
23:43:28 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.28
23:43:28 SQL> 
23:43:28 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
23:43:28 SQL> CREATE TABLE aud_ms610 COMPRESS AS
23:43:28   2  SELECT
23:43:28   3  ydate
23:43:28   4  ,trend aud_trend
23:43:28   5  ,g6    aud_g6
23:43:28   6  ,gatt  aud_gatt
23:43:28   7  ,gattn aud_gattn
23:43:28   8  FROM modsrc
23:43:28   9  /

Table created.

Elapsed: 00:00:00.08
23:43:28 SQL> 
23:43:28 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
23:43:28 SQL> 
23:43:28 SQL> -- I need a copy of the attributes:
23:43:28 SQL> 
23:43:28 SQL> 
23:43:28 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.06
23:43:28 SQL> CREATE TABLE aud_att COMPRESS AS
23:43:28   2  SELECT
23:43:28   3  ydate
23:43:28   4  ,att00 aud_att00
23:43:28   5  ,att01 aud_att01
23:43:28   6  ,att02 aud_att02
23:43:28   7  ,att03 aud_att03
23:43:28   8  ,att04 aud_att04
23:43:28   9  ,att05 aud_att05
23:43:28  10  ,att06 aud_att06
23:43:28  11  ,att07 aud_att07
23:43:28  12  ,att08 aud_att08
23:43:28  13  ,att09 aud_att09
23:43:28  14  ,att10 aud_att10
23:43:28  15  ,att11 aud_att11
23:43:28  16  ,att12 aud_att12
23:43:28  17  ,att13 aud_att13
23:43:28  18  ,att14 aud_att14
23:43:28  19  ,att15 aud_att15
23:43:28  20  ,att16 aud_att16
23:43:28  21  ,att17 aud_att17
23:43:28  22  ,att18 aud_att18
23:43:28  23  ,att19 aud_att19
23:43:28  24  ,att20 aud_att20
23:43:28  25  ,att21 aud_att21
23:43:28  26  ,att22 aud_att22
23:43:28  27  ,att23 aud_att23
23:43:28  28  ,att24 aud_att24
23:43:28  29  ,att25 aud_att25
23:43:28  30  ,att26 aud_att26
23:43:28  31  ,att27 aud_att27
23:43:28  32  ,att28 aud_att28
23:43:28  33  ,att29 aud_att29
23:43:28  34  ,att30 aud_att30
23:43:28  35  ,att31 aud_att31
23:43:28  36  ,att32 aud_att32
23:43:28  37  ,att33 aud_att33
23:43:28  38  ,att34 aud_att34
23:43:28  39  ,att35 aud_att35
23:43:28  40  ,att36 aud_att36
23:43:28  41  ,att37 aud_att37
23:43:28  42  FROM svm6162
23:43:28  43  /

Table created.

Elapsed: 00:00:00.27
23:43:28 SQL> 
23:43:28 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.42
23:43:29 SQL> 
23:43:29 SQL> -- rpt
23:43:29 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19253

Elapsed: 00:00:00.86
23:43:30 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19253

Elapsed: 00:00:00.00
23:43:30 SQL> 
23:43:30 SQL> --
23:43:30 SQL> -- gbp610.sql
23:43:30 SQL> --
23:43:30 SQL> 
23:43:30 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:43:30 SQL> 
23:43:30 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.40
23:43:30 SQL> 
23:43:30 SQL> -- I created di5min here:
23:43:30 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:43:30 SQL> 
23:43:30 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:43:30   2  SELECT
23:43:30   3  pair
23:43:30   4  ,ydate
23:43:30   5  ,prdate
23:43:30   6  ,rownum rnum -- acts as t in my time-series
23:43:30   7  ,clse
23:43:30   8  -- Derive a bunch of attributes from clse, the latest price:
23:43:30   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:43:30  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:43:30  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:43:30  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:43:30  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:43:30  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:43:30  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:43:30  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:43:30  17  --
23:43:30  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:43:30  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:43:30  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:43:30  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:43:30  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:43:30  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:43:30  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:43:30  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:43:30  26  --
23:43:30  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:43:30  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:43:30  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:43:30  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:43:30  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:43:30  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:43:30  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:43:30  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:43:30  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:43:30  36  FROM di5min WHERE pair LIKE'%gbp%'
23:43:30  37  AND ydate > sysdate - 95
23:43:30  38  ORDER BY ydate
23:43:30  39  /

View created.

Elapsed: 00:00:00.04
23:43:30 SQL> 
23:43:30 SQL> -- rpt
23:43:30 SQL> 
23:43:30 SQL> SELECT
23:43:30   2  pair
23:43:30   3  ,COUNT(pair)
23:43:30   4  ,MIN(clse),MAX(clse)
23:43:30   5  ,MIN(avg6),MAX(avg6)
23:43:30   6  ,MIN(ydate),MAX(ydate)
23:43:30   7  FROM svm6102
23:43:30   8  GROUP BY pair
23:43:30   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19255   1.535325	   1.6295 1.53696747 1.62716986 2010-09-30 23:45:01 2011-01-03 23:35:00

Elapsed: 00:00:00.87
23:43:31 SQL> 
23:43:31 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:43:31 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.25
23:43:31 SQL> CREATE TABLE svm6122 COMPRESS AS
23:43:31   2  SELECT
23:43:31   3  pair
23:43:31   4  ,ydate
23:43:31   5  ,prdate
23:43:31   6  ,clse
23:43:31   7  -- g6 is important. I want to predict g6:
23:43:31   8  ,ld6 - clse g6
23:43:31   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:43:31  10  -- I want more attributes from the ones I derived above:
23:43:31  11  -- clse relation to moving-min
23:43:31  12  ,clse-min4  cm4
23:43:31  13  ,clse-min6  cm6
23:43:31  14  ,clse-min8  cm8
23:43:31  15  ,clse-min10 cm10
23:43:31  16  ,clse-min12 cm12
23:43:31  17  ,clse-min14 cm14
23:43:31  18  ,clse-min16 cm16
23:43:31  19  ,clse-min18 cm18
23:43:31  20  -- clse relation to moving-avg
23:43:31  21  ,clse-avg4  ca4
23:43:31  22  ,clse-avg6  ca6
23:43:31  23  ,clse-avg8  ca8
23:43:31  24  ,clse-avg10 ca10
23:43:31  25  ,clse-avg12 ca12
23:43:31  26  ,clse-avg14 ca14
23:43:31  27  ,clse-avg16 ca16
23:43:31  28  ,clse-avg18 ca18
23:43:31  29  -- clse relation to moving-max
23:43:31  30  ,clse-max4  cx4
23:43:31  31  ,clse-max6  cx6
23:43:31  32  ,clse-max8  cx8
23:43:31  33  ,clse-max10 cx10
23:43:31  34  ,clse-max12 cx12
23:43:31  35  ,clse-max14 cx14
23:43:31  36  ,clse-max16 cx16
23:43:31  37  ,clse-max18 cx18
23:43:31  38  -- Derive more attributes.
23:43:31  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:43:31  40  -- But COVAR_POP is more stable:
23:43:31  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:43:31  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:43:31  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:43:31  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:43:31  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:43:31  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:43:31  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:43:31  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:43:31  49  -- Derive date related attributes:
23:43:31  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:43:31  51  ,0+TO_CHAR(ydate,'D')d
23:43:31  52  ,0+TO_CHAR(ydate,'W')w
23:43:31  53  -- mpm stands for minutes-past-midnight:
23:43:31  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:43:31  55  -- mph stands for minutes-past-hour:
23:43:31  56  ,0+TO_CHAR(ydate,'MI')mph
23:43:31  57  FROM svm6102
23:43:31  58  ORDER BY ydate
23:43:31  59  /

Table created.

Elapsed: 00:00:02.06
23:43:33 SQL> 
23:43:33 SQL> -- rpt
23:43:33 SQL> 
23:43:33 SQL> SELECT
23:43:33   2  pair
23:43:33   3  ,COUNT(pair)
23:43:33   4  ,MIN(clse),MAX(clse)
23:43:33   5  ,MIN(ydate),MAX(ydate)
23:43:33   6  FROM svm6122
23:43:33   7  GROUP BY pair
23:43:33   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19255   1.535325	   1.6295 2010-09-30 23:45:01 2011-01-03 23:35:00

Elapsed: 00:00:00.04
23:43:33 SQL> 
23:43:33 SQL> -- Prepare for derivation of NTILE based params:
23:43:33 SQL> 
23:43:33 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.19
23:43:34 SQL> CREATE TABLE svm6142 COMPRESS AS
23:43:34   2  SELECT
23:43:34   3  pair
23:43:34   4  ,ydate
23:43:34   5  ,prdate
23:43:34   6  ,clse
23:43:34   7  ,g6
23:43:34   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:43:34   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:43:34  10  ,CASE WHEN trend IS NULL THEN 1
23:43:34  11  	    WHEN trend =0      THEN 1
23:43:34  12  	    ELSE trend END trend
23:43:34  13  ,cm4
23:43:34  14  ,cm6
23:43:34  15  ,cm8
23:43:34  16  ,cm10
23:43:34  17  ,cm12
23:43:34  18  ,cm14
23:43:34  19  ,cm16
23:43:34  20  ,cm18
23:43:34  21  --
23:43:34  22  ,ca4
23:43:34  23  ,ca6
23:43:34  24  ,ca8
23:43:34  25  ,ca10
23:43:34  26  ,ca12
23:43:34  27  ,ca14
23:43:34  28  ,ca16
23:43:34  29  ,ca18
23:43:34  30  --
23:43:34  31  ,cx4
23:43:34  32  ,cx6
23:43:34  33  ,cx8
23:43:34  34  ,cx10
23:43:34  35  ,cx12
23:43:34  36  ,cx14
23:43:34  37  ,cx16
23:43:34  38  ,cx18
23:43:34  39  --
23:43:34  40  ,crr4
23:43:34  41  ,crr6
23:43:34  42  ,crr8
23:43:34  43  ,crr10
23:43:34  44  ,crr12
23:43:34  45  ,crr14
23:43:34  46  ,crr16
23:43:34  47  ,crr18
23:43:34  48  --
23:43:34  49  ,hh
23:43:34  50  ,d
23:43:34  51  ,w
23:43:34  52  ,mpm
23:43:34  53  ,mph
23:43:34  54  FROM svm6122
23:43:34  55  ORDER BY ydate
23:43:34  56  /

Table created.

Elapsed: 00:00:00.43
23:43:34 SQL> 
23:43:34 SQL> -- rpt
23:43:34 SQL> 
23:43:34 SQL> SELECT
23:43:34   2  pair
23:43:34   3  ,trend
23:43:34   4  ,gatt
23:43:34   5  ,COUNT(pair)
23:43:34   6  ,AVG(g6)
23:43:34   7  FROM svm6142
23:43:34   8  GROUP BY pair,trend,gatt
23:43:34   9  ORDER BY pair,trend,gatt
23:43:34  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6208 -.00267927
gbp_usd 	-1 up	      3473 .004379614
gbp_usd 	-1		43
gbp_usd 	 1 nup	      6066 -.00259208
gbp_usd 	 1 up	      3436 .004476441
gbp_usd 	 1		29

6 rows selected.

Elapsed: 00:00:00.05
23:43:34 SQL> 
23:43:34 SQL> 
23:43:34 SQL> -- Derive NTILE based params:
23:43:34 SQL> 
23:43:34 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
23:43:34 SQL> CREATE TABLE svm6162 COMPRESS AS
23:43:34   2  SELECT
23:43:34   3  pair
23:43:34   4  ,ydate
23:43:34   5  ,prdate
23:43:34   6  ,clse
23:43:34   7  ,g6
23:43:34   8  ,gatt
23:43:34   9  ,gattn
23:43:34  10  ,trend
23:43:34  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:43:34  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:43:34  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:43:34  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:43:34  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:43:34  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:43:34  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:43:34  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:43:34  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:43:34  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:43:34  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:43:34  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:43:34  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:43:34  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:43:34  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:43:34  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:43:34  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:43:34  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:43:34  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:43:34  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:43:34  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:43:34  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:43:34  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:43:34  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:43:34  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:43:34  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:43:34  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:43:34  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:43:34  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:43:34  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:43:34  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:43:34  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:43:34  43  ,hh  att32
23:43:34  44  ,d   att33
23:43:34  45  ,w   att34
23:43:34  46  ,mpm att35
23:43:34  47  ,mph att36
23:43:34  48  ,trend att37
23:43:34  49  FROM svm6142
23:43:34  50  ORDER BY ydate
23:43:34  51  /

Table created.

Elapsed: 00:00:04.71
23:43:39 SQL> 
23:43:39 SQL> -- rpt
23:43:39 SQL> 
23:43:39 SQL> SELECT
23:43:39   2  pair
23:43:39   3  ,trend
23:43:39   4  ,gatt
23:43:39   5  ,COUNT(pair)
23:43:39   6  ,AVG(g6)
23:43:39   7  FROM svm6162
23:43:39   8  GROUP BY pair,trend,gatt
23:43:39   9  ORDER BY pair,trend,gatt
23:43:39  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6208 -.00267927
gbp_usd 	-1 up	      3473 .004379614
gbp_usd 	-1		43
gbp_usd 	 1 nup	      6066 -.00259208
gbp_usd 	 1 up	      3436 .004476441
gbp_usd 	 1		29

6 rows selected.

Elapsed: 00:00:00.03
23:43:39 SQL> 
23:43:39 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
23:43:39 SQL> CREATE TABLE modsrc COMPRESS AS
23:43:39   2  SELECT
23:43:39   3  pair
23:43:39   4  ,ydate
23:43:39   5  ,prdate
23:43:39   6  ,trend
23:43:39   7  ,g6
23:43:39   8  ,gatt
23:43:39   9  ,gattn
23:43:39  10  FROM svm6162
23:43:39  11  /

Table created.

Elapsed: 00:00:00.08
23:43:39 SQL> 
23:43:39 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.26
23:43:39 SQL> 
23:43:39 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
23:43:39 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
23:43:40   2  SELECT
23:43:40   3  ydate
23:43:40   4  ,trend gbp_trend
23:43:40   5  ,g6    gbp_g6
23:43:40   6  ,gatt  gbp_gatt
23:43:40   7  ,gattn gbp_gattn
23:43:40   8  FROM modsrc
23:43:40   9  /

Table created.

Elapsed: 00:00:00.06
23:43:40 SQL> 
23:43:40 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
23:43:40 SQL> 
23:43:40 SQL> -- I need a copy of the attributes:
23:43:40 SQL> 
23:43:40 SQL> 
23:43:40 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.05
23:43:40 SQL> CREATE TABLE gbp_att COMPRESS AS
23:43:40   2  SELECT
23:43:40   3  ydate
23:43:40   4  ,att00 gbp_att00
23:43:40   5  ,att01 gbp_att01
23:43:40   6  ,att02 gbp_att02
23:43:40   7  ,att03 gbp_att03
23:43:40   8  ,att04 gbp_att04
23:43:40   9  ,att05 gbp_att05
23:43:40  10  ,att06 gbp_att06
23:43:40  11  ,att07 gbp_att07
23:43:40  12  ,att08 gbp_att08
23:43:40  13  ,att09 gbp_att09
23:43:40  14  ,att10 gbp_att10
23:43:40  15  ,att11 gbp_att11
23:43:40  16  ,att12 gbp_att12
23:43:40  17  ,att13 gbp_att13
23:43:40  18  ,att14 gbp_att14
23:43:40  19  ,att15 gbp_att15
23:43:40  20  ,att16 gbp_att16
23:43:40  21  ,att17 gbp_att17
23:43:40  22  ,att18 gbp_att18
23:43:40  23  ,att19 gbp_att19
23:43:40  24  ,att20 gbp_att20
23:43:40  25  ,att21 gbp_att21
23:43:40  26  ,att22 gbp_att22
23:43:40  27  ,att23 gbp_att23
23:43:40  28  ,att24 gbp_att24
23:43:40  29  ,att25 gbp_att25
23:43:40  30  ,att26 gbp_att26
23:43:40  31  ,att27 gbp_att27
23:43:40  32  ,att28 gbp_att28
23:43:40  33  ,att29 gbp_att29
23:43:40  34  ,att30 gbp_att30
23:43:40  35  ,att31 gbp_att31
23:43:40  36  ,att32 gbp_att32
23:43:40  37  ,att33 gbp_att33
23:43:40  38  ,att34 gbp_att34
23:43:40  39  ,att35 gbp_att35
23:43:40  40  ,att36 gbp_att36
23:43:40  41  ,att37 gbp_att37
23:43:40  42  FROM svm6162
23:43:40  43  /

Table created.

Elapsed: 00:00:00.21
23:43:40 SQL> 
23:43:40 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
23:43:40 SQL> 
23:43:40 SQL> -- rpt
23:43:40 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19255

Elapsed: 00:00:00.86
23:43:41 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19255

Elapsed: 00:00:00.00
23:43:41 SQL> 
23:43:41 SQL> --
23:43:41 SQL> -- jpy610.sql
23:43:41 SQL> --
23:43:41 SQL> 
23:43:41 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:43:41 SQL> 
23:43:41 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:01.17
23:43:42 SQL> 
23:43:42 SQL> -- I created di5min here:
23:43:42 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:43:42 SQL> 
23:43:42 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:43:42   2  SELECT
23:43:42   3  pair
23:43:42   4  ,ydate
23:43:42   5  ,prdate
23:43:42   6  ,rownum rnum -- acts as t in my time-series
23:43:42   7  ,clse
23:43:42   8  -- Derive a bunch of attributes from clse, the latest price:
23:43:42   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:43:42  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:43:42  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:43:42  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:43:42  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:43:42  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:43:42  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:43:42  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:43:42  17  --
23:43:42  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:43:42  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:43:42  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:43:42  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:43:42  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:43:42  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:43:42  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:43:42  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:43:42  26  --
23:43:42  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:43:42  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:43:42  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:43:42  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:43:42  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:43:42  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:43:42  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:43:42  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:43:42  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:43:42  36  FROM di5min WHERE pair LIKE'%jpy%'
23:43:42  37  AND ydate > sysdate - 95
23:43:42  38  ORDER BY ydate
23:43:42  39  /

View created.

Elapsed: 00:00:00.07
23:43:43 SQL> 
23:43:43 SQL> -- rpt
23:43:43 SQL> 
23:43:43 SQL> SELECT
23:43:43   2  pair
23:43:43   3  ,COUNT(pair)
23:43:43   4  ,MIN(clse),MAX(clse)
23:43:43   5  ,MIN(avg6),MAX(avg6)
23:43:43   6  ,MIN(ydate),MAX(ydate)
23:43:43   7  FROM svm6102
23:43:43   8  GROUP BY pair
23:43:43   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19253	 80.25	   84.485 80.3595205 84.3105479 2010-09-30 23:45:01 2011-01-03 23:35:00

Elapsed: 00:00:00.91
23:43:43 SQL> 
23:43:43 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:43:43 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.25
23:43:44 SQL> CREATE TABLE svm6122 COMPRESS AS
23:43:44   2  SELECT
23:43:44   3  pair
23:43:44   4  ,ydate
23:43:44   5  ,prdate
23:43:44   6  ,clse
23:43:44   7  -- g6 is important. I want to predict g6:
23:43:44   8  ,ld6 - clse g6
23:43:44   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:43:44  10  -- I want more attributes from the ones I derived above:
23:43:44  11  -- clse relation to moving-min
23:43:44  12  ,clse-min4  cm4
23:43:44  13  ,clse-min6  cm6
23:43:44  14  ,clse-min8  cm8
23:43:44  15  ,clse-min10 cm10
23:43:44  16  ,clse-min12 cm12
23:43:44  17  ,clse-min14 cm14
23:43:44  18  ,clse-min16 cm16
23:43:44  19  ,clse-min18 cm18
23:43:44  20  -- clse relation to moving-avg
23:43:44  21  ,clse-avg4  ca4
23:43:44  22  ,clse-avg6  ca6
23:43:44  23  ,clse-avg8  ca8
23:43:44  24  ,clse-avg10 ca10
23:43:44  25  ,clse-avg12 ca12
23:43:44  26  ,clse-avg14 ca14
23:43:44  27  ,clse-avg16 ca16
23:43:44  28  ,clse-avg18 ca18
23:43:44  29  -- clse relation to moving-max
23:43:44  30  ,clse-max4  cx4
23:43:44  31  ,clse-max6  cx6
23:43:44  32  ,clse-max8  cx8
23:43:44  33  ,clse-max10 cx10
23:43:44  34  ,clse-max12 cx12
23:43:44  35  ,clse-max14 cx14
23:43:44  36  ,clse-max16 cx16
23:43:44  37  ,clse-max18 cx18
23:43:44  38  -- Derive more attributes.
23:43:44  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:43:44  40  -- But COVAR_POP is more stable:
23:43:44  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:43:44  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:43:44  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:43:44  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:43:44  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:43:44  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:43:44  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:43:44  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:43:44  49  -- Derive date related attributes:
23:43:44  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:43:44  51  ,0+TO_CHAR(ydate,'D')d
23:43:44  52  ,0+TO_CHAR(ydate,'W')w
23:43:44  53  -- mpm stands for minutes-past-midnight:
23:43:44  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:43:44  55  -- mph stands for minutes-past-hour:
23:43:44  56  ,0+TO_CHAR(ydate,'MI')mph
23:43:44  57  FROM svm6102
23:43:44  58  ORDER BY ydate
23:43:44  59  /

Table created.

Elapsed: 00:00:02.09
23:43:46 SQL> 
23:43:46 SQL> -- rpt
23:43:46 SQL> 
23:43:46 SQL> SELECT
23:43:46   2  pair
23:43:46   3  ,COUNT(pair)
23:43:46   4  ,MIN(clse),MAX(clse)
23:43:46   5  ,MIN(ydate),MAX(ydate)
23:43:46   6  FROM svm6122
23:43:46   7  GROUP BY pair
23:43:46   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19253	 80.25	   84.485 2010-09-30 23:45:01 2011-01-03 23:35:00

Elapsed: 00:00:00.07
23:43:46 SQL> 
23:43:46 SQL> -- Prepare for derivation of NTILE based params:
23:43:46 SQL> 
23:43:46 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
23:43:46 SQL> CREATE TABLE svm6142 COMPRESS AS
23:43:46   2  SELECT
23:43:46   3  pair
23:43:46   4  ,ydate
23:43:46   5  ,prdate
23:43:46   6  ,clse
23:43:46   7  ,g6
23:43:46   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:43:46   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:43:46  10  ,CASE WHEN trend IS NULL THEN 1
23:43:46  11  	    WHEN trend =0      THEN 1
23:43:46  12  	    ELSE trend END trend
23:43:46  13  ,cm4
23:43:46  14  ,cm6
23:43:46  15  ,cm8
23:43:46  16  ,cm10
23:43:46  17  ,cm12
23:43:46  18  ,cm14
23:43:46  19  ,cm16
23:43:46  20  ,cm18
23:43:46  21  --
23:43:46  22  ,ca4
23:43:46  23  ,ca6
23:43:46  24  ,ca8
23:43:46  25  ,ca10
23:43:46  26  ,ca12
23:43:46  27  ,ca14
23:43:46  28  ,ca16
23:43:46  29  ,ca18
23:43:46  30  --
23:43:46  31  ,cx4
23:43:46  32  ,cx6
23:43:46  33  ,cx8
23:43:46  34  ,cx10
23:43:46  35  ,cx12
23:43:46  36  ,cx14
23:43:46  37  ,cx16
23:43:46  38  ,cx18
23:43:46  39  --
23:43:46  40  ,crr4
23:43:46  41  ,crr6
23:43:46  42  ,crr8
23:43:46  43  ,crr10
23:43:46  44  ,crr12
23:43:46  45  ,crr14
23:43:46  46  ,crr16
23:43:46  47  ,crr18
23:43:46  48  --
23:43:46  49  ,hh
23:43:46  50  ,d
23:43:46  51  ,w
23:43:46  52  ,mpm
23:43:46  53  ,mph
23:43:46  54  FROM svm6122
23:43:46  55  ORDER BY ydate
23:43:46  56  /

Table created.

Elapsed: 00:00:00.36
23:43:46 SQL> 
23:43:46 SQL> -- rpt
23:43:46 SQL> 
23:43:46 SQL> SELECT
23:43:46   2  pair
23:43:46   3  ,trend
23:43:46   4  ,gatt
23:43:46   5  ,COUNT(pair)
23:43:46   6  ,AVG(g6)
23:43:46   7  FROM svm6142
23:43:46   8  GROUP BY pair,trend,gatt
23:43:46   9  ORDER BY pair,trend,gatt
23:43:46  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5189 -.16596721
usd_jpy 	-1 up	      4812 .164682339
usd_jpy 	 1 nup	      4913 -.15657842
usd_jpy 	 1 up	      4267 .165977193
usd_jpy 	 1		72

Elapsed: 00:00:00.05
23:43:47 SQL> 
23:43:47 SQL> 
23:43:47 SQL> -- Derive NTILE based params:
23:43:47 SQL> 
23:43:47 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
23:43:47 SQL> CREATE TABLE svm6162 COMPRESS AS
23:43:47   2  SELECT
23:43:47   3  pair
23:43:47   4  ,ydate
23:43:47   5  ,prdate
23:43:47   6  ,clse
23:43:47   7  ,g6
23:43:47   8  ,gatt
23:43:47   9  ,gattn
23:43:47  10  ,trend
23:43:47  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:43:47  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:43:47  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:43:47  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:43:47  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:43:47  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:43:47  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:43:47  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:43:47  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:43:47  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:43:47  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:43:47  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:43:47  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:43:47  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:43:47  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:43:47  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:43:47  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:43:47  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:43:47  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:43:47  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:43:47  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:43:47  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:43:47  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:43:47  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:43:47  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:43:47  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:43:47  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:43:47  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:43:47  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:43:47  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:43:47  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:43:47  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:43:47  43  ,hh  att32
23:43:47  44  ,d   att33
23:43:47  45  ,w   att34
23:43:47  46  ,mpm att35
23:43:47  47  ,mph att36
23:43:47  48  ,trend att37
23:43:47  49  FROM svm6142
23:43:47  50  ORDER BY ydate
23:43:47  51  /

Table created.

Elapsed: 00:00:04.71
23:43:51 SQL> 
23:43:51 SQL> -- rpt
23:43:51 SQL> 
23:43:51 SQL> SELECT
23:43:51   2  pair
23:43:51   3  ,trend
23:43:51   4  ,gatt
23:43:51   5  ,COUNT(pair)
23:43:51   6  ,AVG(g6)
23:43:51   7  FROM svm6162
23:43:51   8  GROUP BY pair,trend,gatt
23:43:51   9  ORDER BY pair,trend,gatt
23:43:51  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5189 -.16596721
usd_jpy 	-1 up	      4812 .164682339
usd_jpy 	 1 nup	      4913 -.15657842
usd_jpy 	 1 up	      4267 .165977193
usd_jpy 	 1		72

Elapsed: 00:00:00.03
23:43:51 SQL> 
23:43:51 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.16
23:43:52 SQL> CREATE TABLE modsrc COMPRESS AS
23:43:52   2  SELECT
23:43:52   3  pair
23:43:52   4  ,ydate
23:43:52   5  ,prdate
23:43:52   6  ,trend
23:43:52   7  ,g6
23:43:52   8  ,gatt
23:43:52   9  ,gattn
23:43:52  10  FROM svm6162
23:43:52  11  /

Table created.

Elapsed: 00:00:00.08
23:43:52 SQL> 
23:43:52 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
23:43:52 SQL> 
23:43:52 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
23:43:52 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
23:43:52   2  SELECT
23:43:52   3  ydate
23:43:52   4  ,trend jpy_trend
23:43:52   5  ,g6    jpy_g6
23:43:52   6  ,gatt  jpy_gatt
23:43:52   7  ,gattn jpy_gattn
23:43:52   8  FROM modsrc
23:43:52   9  /

Table created.

Elapsed: 00:00:00.07
23:43:52 SQL> 
23:43:52 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.13
23:43:52 SQL> 
23:43:52 SQL> -- I need a copy of the attributes:
23:43:52 SQL> 
23:43:52 SQL> 
23:43:52 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.15
23:43:52 SQL> CREATE TABLE jpy_att COMPRESS AS
23:43:52   2  SELECT
23:43:52   3  ydate
23:43:52   4  ,att00 jpy_att00
23:43:52   5  ,att01 jpy_att01
23:43:52   6  ,att02 jpy_att02
23:43:52   7  ,att03 jpy_att03
23:43:52   8  ,att04 jpy_att04
23:43:52   9  ,att05 jpy_att05
23:43:52  10  ,att06 jpy_att06
23:43:52  11  ,att07 jpy_att07
23:43:52  12  ,att08 jpy_att08
23:43:52  13  ,att09 jpy_att09
23:43:52  14  ,att10 jpy_att10
23:43:52  15  ,att11 jpy_att11
23:43:52  16  ,att12 jpy_att12
23:43:52  17  ,att13 jpy_att13
23:43:52  18  ,att14 jpy_att14
23:43:52  19  ,att15 jpy_att15
23:43:52  20  ,att16 jpy_att16
23:43:52  21  ,att17 jpy_att17
23:43:52  22  ,att18 jpy_att18
23:43:52  23  ,att19 jpy_att19
23:43:52  24  ,att20 jpy_att20
23:43:52  25  ,att21 jpy_att21
23:43:52  26  ,att22 jpy_att22
23:43:52  27  ,att23 jpy_att23
23:43:52  28  ,att24 jpy_att24
23:43:52  29  ,att25 jpy_att25
23:43:52  30  ,att26 jpy_att26
23:43:52  31  ,att27 jpy_att27
23:43:52  32  ,att28 jpy_att28
23:43:52  33  ,att29 jpy_att29
23:43:52  34  ,att30 jpy_att30
23:43:52  35  ,att31 jpy_att31
23:43:52  36  ,att32 jpy_att32
23:43:52  37  ,att33 jpy_att33
23:43:52  38  ,att34 jpy_att34
23:43:52  39  ,att35 jpy_att35
23:43:52  40  ,att36 jpy_att36
23:43:52  41  ,att37 jpy_att37
23:43:52  42  FROM svm6162
23:43:52  43  /

Table created.

Elapsed: 00:00:00.17
23:43:52 SQL> 
23:43:52 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
23:43:53 SQL> 
23:43:53 SQL> -- rpt
23:43:53 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19253

Elapsed: 00:00:00.88
23:43:54 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19253

Elapsed: 00:00:00.01
23:43:54 SQL> 
23:43:54 SQL> --
23:43:54 SQL> -- cad610.sql
23:43:54 SQL> --
23:43:54 SQL> 
23:43:54 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:43:54 SQL> 
23:43:54 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.40
23:43:54 SQL> 
23:43:54 SQL> -- I created di5min here:
23:43:54 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:43:54 SQL> 
23:43:54 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:43:54   2  SELECT
23:43:54   3  pair
23:43:54   4  ,ydate
23:43:54   5  ,prdate
23:43:54   6  ,rownum rnum -- acts as t in my time-series
23:43:54   7  ,clse
23:43:54   8  -- Derive a bunch of attributes from clse, the latest price:
23:43:54   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:43:54  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:43:54  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:43:54  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:43:54  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:43:54  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:43:54  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:43:54  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:43:54  17  --
23:43:54  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:43:54  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:43:54  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:43:54  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:43:54  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:43:54  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:43:54  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:43:54  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:43:54  26  --
23:43:54  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:43:54  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:43:54  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:43:54  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:43:54  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:43:54  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:43:54  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:43:54  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:43:54  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:43:54  36  FROM di5min WHERE pair LIKE'%cad%'
23:43:54  37  AND ydate > sysdate - 95
23:43:54  38  ORDER BY ydate
23:43:54  39  /

View created.

Elapsed: 00:00:00.05
23:43:54 SQL> 
23:43:54 SQL> -- rpt
23:43:54 SQL> 
23:43:54 SQL> SELECT
23:43:54   2  pair
23:43:54   3  ,COUNT(pair)
23:43:54   4  ,MIN(clse),MAX(clse)
23:43:54   5  ,MIN(avg6),MAX(avg6)
23:43:54   6  ,MIN(ydate),MAX(ydate)
23:43:54   7  FROM svm6102
23:43:54   8  GROUP BY pair
23:43:54   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19253    .988925	   1.0355 .990603938 1.03282877 2010-09-30 23:45:01 2011-01-03 23:35:00

Elapsed: 00:00:00.82
23:43:55 SQL> 
23:43:55 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:43:55 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
23:43:55 SQL> CREATE TABLE svm6122 COMPRESS AS
23:43:55   2  SELECT
23:43:55   3  pair
23:43:55   4  ,ydate
23:43:55   5  ,prdate
23:43:55   6  ,clse
23:43:55   7  -- g6 is important. I want to predict g6:
23:43:55   8  ,ld6 - clse g6
23:43:55   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:43:55  10  -- I want more attributes from the ones I derived above:
23:43:55  11  -- clse relation to moving-min
23:43:55  12  ,clse-min4  cm4
23:43:55  13  ,clse-min6  cm6
23:43:55  14  ,clse-min8  cm8
23:43:55  15  ,clse-min10 cm10
23:43:55  16  ,clse-min12 cm12
23:43:55  17  ,clse-min14 cm14
23:43:55  18  ,clse-min16 cm16
23:43:55  19  ,clse-min18 cm18
23:43:55  20  -- clse relation to moving-avg
23:43:55  21  ,clse-avg4  ca4
23:43:55  22  ,clse-avg6  ca6
23:43:55  23  ,clse-avg8  ca8
23:43:55  24  ,clse-avg10 ca10
23:43:55  25  ,clse-avg12 ca12
23:43:55  26  ,clse-avg14 ca14
23:43:55  27  ,clse-avg16 ca16
23:43:55  28  ,clse-avg18 ca18
23:43:55  29  -- clse relation to moving-max
23:43:55  30  ,clse-max4  cx4
23:43:55  31  ,clse-max6  cx6
23:43:55  32  ,clse-max8  cx8
23:43:55  33  ,clse-max10 cx10
23:43:55  34  ,clse-max12 cx12
23:43:55  35  ,clse-max14 cx14
23:43:55  36  ,clse-max16 cx16
23:43:55  37  ,clse-max18 cx18
23:43:55  38  -- Derive more attributes.
23:43:55  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:43:55  40  -- But COVAR_POP is more stable:
23:43:55  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:43:55  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:43:55  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:43:55  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:43:55  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:43:55  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:43:55  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:43:55  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:43:55  49  -- Derive date related attributes:
23:43:55  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:43:55  51  ,0+TO_CHAR(ydate,'D')d
23:43:55  52  ,0+TO_CHAR(ydate,'W')w
23:43:55  53  -- mpm stands for minutes-past-midnight:
23:43:55  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:43:55  55  -- mph stands for minutes-past-hour:
23:43:55  56  ,0+TO_CHAR(ydate,'MI')mph
23:43:55  57  FROM svm6102
23:43:55  58  ORDER BY ydate
23:43:55  59  /

Table created.

Elapsed: 00:00:02.28
23:43:58 SQL> 
23:43:58 SQL> -- rpt
23:43:58 SQL> 
23:43:58 SQL> SELECT
23:43:58   2  pair
23:43:58   3  ,COUNT(pair)
23:43:58   4  ,MIN(clse),MAX(clse)
23:43:58   5  ,MIN(ydate),MAX(ydate)
23:43:58   6  FROM svm6122
23:43:58   7  GROUP BY pair
23:43:58   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19253    .988925	   1.0355 2010-09-30 23:45:01 2011-01-03 23:35:00

Elapsed: 00:00:00.08
23:43:58 SQL> 
23:43:58 SQL> -- Prepare for derivation of NTILE based params:
23:43:58 SQL> 
23:43:58 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.27
23:43:58 SQL> CREATE TABLE svm6142 COMPRESS AS
23:43:58   2  SELECT
23:43:58   3  pair
23:43:58   4  ,ydate
23:43:58   5  ,prdate
23:43:58   6  ,clse
23:43:58   7  ,g6
23:43:58   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:43:58   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:43:58  10  ,CASE WHEN trend IS NULL THEN 1
23:43:58  11  	    WHEN trend =0      THEN 1
23:43:58  12  	    ELSE trend END trend
23:43:58  13  ,cm4
23:43:58  14  ,cm6
23:43:58  15  ,cm8
23:43:58  16  ,cm10
23:43:58  17  ,cm12
23:43:58  18  ,cm14
23:43:58  19  ,cm16
23:43:58  20  ,cm18
23:43:58  21  --
23:43:58  22  ,ca4
23:43:58  23  ,ca6
23:43:58  24  ,ca8
23:43:58  25  ,ca10
23:43:58  26  ,ca12
23:43:58  27  ,ca14
23:43:58  28  ,ca16
23:43:58  29  ,ca18
23:43:58  30  --
23:43:58  31  ,cx4
23:43:58  32  ,cx6
23:43:58  33  ,cx8
23:43:58  34  ,cx10
23:43:58  35  ,cx12
23:43:58  36  ,cx14
23:43:58  37  ,cx16
23:43:58  38  ,cx18
23:43:58  39  --
23:43:58  40  ,crr4
23:43:58  41  ,crr6
23:43:58  42  ,crr8
23:43:58  43  ,crr10
23:43:58  44  ,crr12
23:43:58  45  ,crr14
23:43:58  46  ,crr16
23:43:58  47  ,crr18
23:43:58  48  --
23:43:58  49  ,hh
23:43:58  50  ,d
23:43:58  51  ,w
23:43:58  52  ,mpm
23:43:58  53  ,mph
23:43:58  54  FROM svm6122
23:43:58  55  ORDER BY ydate
23:43:58  56  /

Table created.

Elapsed: 00:00:00.36
23:43:58 SQL> 
23:43:58 SQL> -- rpt
23:43:58 SQL> 
23:43:58 SQL> SELECT
23:43:58   2  pair
23:43:58   3  ,trend
23:43:58   4  ,gatt
23:43:58   5  ,COUNT(pair)
23:43:58   6  ,AVG(g6)
23:43:58   7  FROM svm6142
23:43:58   8  GROUP BY pair,trend,gatt
23:43:58   9  ORDER BY pair,trend,gatt
23:43:58  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7343 -.00128352
usd_cad 	-1 up	      3007  .00304973
usd_cad 	-1		23
usd_cad 	 1 nup	      6537 -.00165776
usd_cad 	 1 up	      2294 .003663844
usd_cad 	 1		49

6 rows selected.

Elapsed: 00:00:00.03
23:43:58 SQL> 
23:43:58 SQL> 
23:43:58 SQL> -- Derive NTILE based params:
23:43:58 SQL> 
23:43:58 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
23:43:58 SQL> CREATE TABLE svm6162 COMPRESS AS
23:43:58   2  SELECT
23:43:58   3  pair
23:43:58   4  ,ydate
23:43:58   5  ,prdate
23:43:58   6  ,clse
23:43:58   7  ,g6
23:43:58   8  ,gatt
23:43:58   9  ,gattn
23:43:58  10  ,trend
23:43:58  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:43:58  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:43:58  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:43:58  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:43:58  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:43:58  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:43:58  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:43:58  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:43:58  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:43:58  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:43:58  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:43:58  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:43:58  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:43:58  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:43:58  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:43:58  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:43:58  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:43:58  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:43:58  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:43:58  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:43:58  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:43:58  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:43:58  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:43:58  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:43:58  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:43:58  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:43:58  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:43:58  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:43:58  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:43:58  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:43:58  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:43:58  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:43:58  43  ,hh  att32
23:43:58  44  ,d   att33
23:43:58  45  ,w   att34
23:43:58  46  ,mpm att35
23:43:58  47  ,mph att36
23:43:58  48  ,trend att37
23:43:58  49  FROM svm6142
23:43:58  50  ORDER BY ydate
23:43:58  51  /

Table created.

Elapsed: 00:00:04.66
23:44:03 SQL> 
23:44:03 SQL> -- rpt
23:44:03 SQL> 
23:44:03 SQL> SELECT
23:44:03   2  pair
23:44:03   3  ,trend
23:44:03   4  ,gatt
23:44:03   5  ,COUNT(pair)
23:44:03   6  ,AVG(g6)
23:44:03   7  FROM svm6162
23:44:03   8  GROUP BY pair,trend,gatt
23:44:03   9  ORDER BY pair,trend,gatt
23:44:03  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7343 -.00128352
usd_cad 	-1 up	      3007  .00304973
usd_cad 	-1		23
usd_cad 	 1 nup	      6537 -.00165776
usd_cad 	 1 up	      2294 .003663844
usd_cad 	 1		49

6 rows selected.

Elapsed: 00:00:00.03
23:44:03 SQL> 
23:44:03 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
23:44:03 SQL> CREATE TABLE modsrc COMPRESS AS
23:44:03   2  SELECT
23:44:03   3  pair
23:44:03   4  ,ydate
23:44:03   5  ,prdate
23:44:03   6  ,trend
23:44:03   7  ,g6
23:44:03   8  ,gatt
23:44:03   9  ,gattn
23:44:03  10  FROM svm6162
23:44:03  11  /

Table created.

Elapsed: 00:00:00.09
23:44:03 SQL> 
23:44:03 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
23:44:04 SQL> 
23:44:04 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
23:44:04 SQL> CREATE TABLE cad_ms610 COMPRESS AS
23:44:04   2  SELECT
23:44:04   3  ydate
23:44:04   4  ,trend cad_trend
23:44:04   5  ,g6    cad_g6
23:44:04   6  ,gatt  cad_gatt
23:44:04   7  ,gattn cad_gattn
23:44:04   8  FROM modsrc
23:44:04   9  /

Table created.

Elapsed: 00:00:00.07
23:44:04 SQL> 
23:44:04 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.24
23:44:04 SQL> 
23:44:04 SQL> -- I need a copy of the attributes:
23:44:04 SQL> 
23:44:04 SQL> 
23:44:04 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.05
23:44:04 SQL> CREATE TABLE cad_att COMPRESS AS
23:44:04   2  SELECT
23:44:04   3  ydate
23:44:04   4  ,att00 cad_att00
23:44:04   5  ,att01 cad_att01
23:44:04   6  ,att02 cad_att02
23:44:04   7  ,att03 cad_att03
23:44:04   8  ,att04 cad_att04
23:44:04   9  ,att05 cad_att05
23:44:04  10  ,att06 cad_att06
23:44:04  11  ,att07 cad_att07
23:44:04  12  ,att08 cad_att08
23:44:04  13  ,att09 cad_att09
23:44:04  14  ,att10 cad_att10
23:44:04  15  ,att11 cad_att11
23:44:04  16  ,att12 cad_att12
23:44:04  17  ,att13 cad_att13
23:44:04  18  ,att14 cad_att14
23:44:04  19  ,att15 cad_att15
23:44:04  20  ,att16 cad_att16
23:44:04  21  ,att17 cad_att17
23:44:04  22  ,att18 cad_att18
23:44:04  23  ,att19 cad_att19
23:44:04  24  ,att20 cad_att20
23:44:04  25  ,att21 cad_att21
23:44:04  26  ,att22 cad_att22
23:44:04  27  ,att23 cad_att23
23:44:04  28  ,att24 cad_att24
23:44:04  29  ,att25 cad_att25
23:44:04  30  ,att26 cad_att26
23:44:04  31  ,att27 cad_att27
23:44:04  32  ,att28 cad_att28
23:44:04  33  ,att29 cad_att29
23:44:04  34  ,att30 cad_att30
23:44:04  35  ,att31 cad_att31
23:44:04  36  ,att32 cad_att32
23:44:04  37  ,att33 cad_att33
23:44:04  38  ,att34 cad_att34
23:44:04  39  ,att35 cad_att35
23:44:04  40  ,att36 cad_att36
23:44:04  41  ,att37 cad_att37
23:44:04  42  FROM svm6162
23:44:04  43  /

Table created.

Elapsed: 00:00:00.19
23:44:04 SQL> 
23:44:04 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
23:44:05 SQL> 
23:44:05 SQL> -- rpt
23:44:05 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19253

Elapsed: 00:00:00.81
23:44:05 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19253

Elapsed: 00:00:00.00
23:44:05 SQL> 
23:44:05 SQL> --
23:44:05 SQL> -- chf610.sql
23:44:05 SQL> --
23:44:05 SQL> 
23:44:05 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:44:05 SQL> 
23:44:05 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.49
23:44:06 SQL> 
23:44:06 SQL> -- I created di5min here:
23:44:06 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:44:06 SQL> 
23:44:06 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:44:06   2  SELECT
23:44:06   3  pair
23:44:06   4  ,ydate
23:44:06   5  ,prdate
23:44:06   6  ,rownum rnum -- acts as t in my time-series
23:44:06   7  ,clse
23:44:06   8  -- Derive a bunch of attributes from clse, the latest price:
23:44:06   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:44:06  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:44:06  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:44:06  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:44:06  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:44:06  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:44:06  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:44:06  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:44:06  17  --
23:44:06  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:44:06  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:44:06  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:44:06  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:44:06  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:44:06  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:44:06  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:44:06  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:44:06  26  --
23:44:06  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:44:06  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:44:06  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:44:06  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:44:06  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:44:06  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:44:06  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:44:06  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:44:06  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:44:06  36  FROM di5min WHERE pair LIKE'%chf%'
23:44:06  37  AND ydate > sysdate - 95
23:44:06  38  ORDER BY ydate
23:44:06  39  /

View created.

Elapsed: 00:00:00.06
23:44:06 SQL> 
23:44:06 SQL> -- rpt
23:44:06 SQL> 
23:44:06 SQL> SELECT
23:44:06   2  pair
23:44:06   3  ,COUNT(pair)
23:44:06   4  ,MIN(clse),MAX(clse)
23:44:06   5  ,MIN(avg6),MAX(avg6)
23:44:06   6  ,MIN(ydate),MAX(ydate)
23:44:06   7  FROM svm6102
23:44:06   8  GROUP BY pair
23:44:06   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19256    .931675	  1.00635  .93325411 1.00498151 2010-09-30 23:45:01 2011-01-03 23:35:00

Elapsed: 00:00:00.84
23:44:07 SQL> 
23:44:07 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:44:07 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.30
23:44:07 SQL> CREATE TABLE svm6122 COMPRESS AS
23:44:07   2  SELECT
23:44:07   3  pair
23:44:07   4  ,ydate
23:44:07   5  ,prdate
23:44:07   6  ,clse
23:44:07   7  -- g6 is important. I want to predict g6:
23:44:07   8  ,ld6 - clse g6
23:44:07   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:44:07  10  -- I want more attributes from the ones I derived above:
23:44:07  11  -- clse relation to moving-min
23:44:07  12  ,clse-min4  cm4
23:44:07  13  ,clse-min6  cm6
23:44:07  14  ,clse-min8  cm8
23:44:07  15  ,clse-min10 cm10
23:44:07  16  ,clse-min12 cm12
23:44:07  17  ,clse-min14 cm14
23:44:07  18  ,clse-min16 cm16
23:44:07  19  ,clse-min18 cm18
23:44:07  20  -- clse relation to moving-avg
23:44:07  21  ,clse-avg4  ca4
23:44:07  22  ,clse-avg6  ca6
23:44:07  23  ,clse-avg8  ca8
23:44:07  24  ,clse-avg10 ca10
23:44:07  25  ,clse-avg12 ca12
23:44:07  26  ,clse-avg14 ca14
23:44:07  27  ,clse-avg16 ca16
23:44:07  28  ,clse-avg18 ca18
23:44:07  29  -- clse relation to moving-max
23:44:07  30  ,clse-max4  cx4
23:44:07  31  ,clse-max6  cx6
23:44:07  32  ,clse-max8  cx8
23:44:07  33  ,clse-max10 cx10
23:44:07  34  ,clse-max12 cx12
23:44:07  35  ,clse-max14 cx14
23:44:07  36  ,clse-max16 cx16
23:44:07  37  ,clse-max18 cx18
23:44:07  38  -- Derive more attributes.
23:44:07  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:44:07  40  -- But COVAR_POP is more stable:
23:44:07  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:44:07  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:44:07  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:44:07  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:44:07  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:44:07  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:44:07  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:44:07  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:44:07  49  -- Derive date related attributes:
23:44:07  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:44:07  51  ,0+TO_CHAR(ydate,'D')d
23:44:07  52  ,0+TO_CHAR(ydate,'W')w
23:44:07  53  -- mpm stands for minutes-past-midnight:
23:44:07  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:44:07  55  -- mph stands for minutes-past-hour:
23:44:07  56  ,0+TO_CHAR(ydate,'MI')mph
23:44:07  57  FROM svm6102
23:44:07  58  ORDER BY ydate
23:44:07  59  /

Table created.

Elapsed: 00:00:01.99
23:44:09 SQL> 
23:44:09 SQL> -- rpt
23:44:09 SQL> 
23:44:09 SQL> SELECT
23:44:09   2  pair
23:44:09   3  ,COUNT(pair)
23:44:09   4  ,MIN(clse),MAX(clse)
23:44:09   5  ,MIN(ydate),MAX(ydate)
23:44:09   6  FROM svm6122
23:44:09   7  GROUP BY pair
23:44:09   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19256    .931675	  1.00635 2010-09-30 23:45:01 2011-01-03 23:35:00

Elapsed: 00:00:00.04
23:44:09 SQL> 
23:44:09 SQL> -- Prepare for derivation of NTILE based params:
23:44:09 SQL> 
23:44:09 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.17
23:44:09 SQL> CREATE TABLE svm6142 COMPRESS AS
23:44:09   2  SELECT
23:44:09   3  pair
23:44:09   4  ,ydate
23:44:09   5  ,prdate
23:44:09   6  ,clse
23:44:09   7  ,g6
23:44:09   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:44:09   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:44:09  10  ,CASE WHEN trend IS NULL THEN 1
23:44:09  11  	    WHEN trend =0      THEN 1
23:44:09  12  	    ELSE trend END trend
23:44:09  13  ,cm4
23:44:09  14  ,cm6
23:44:09  15  ,cm8
23:44:09  16  ,cm10
23:44:09  17  ,cm12
23:44:09  18  ,cm14
23:44:09  19  ,cm16
23:44:09  20  ,cm18
23:44:09  21  --
23:44:09  22  ,ca4
23:44:09  23  ,ca6
23:44:09  24  ,ca8
23:44:09  25  ,ca10
23:44:09  26  ,ca12
23:44:09  27  ,ca14
23:44:09  28  ,ca16
23:44:09  29  ,ca18
23:44:09  30  --
23:44:09  31  ,cx4
23:44:09  32  ,cx6
23:44:09  33  ,cx8
23:44:09  34  ,cx10
23:44:09  35  ,cx12
23:44:09  36  ,cx14
23:44:09  37  ,cx16
23:44:09  38  ,cx18
23:44:09  39  --
23:44:09  40  ,crr4
23:44:09  41  ,crr6
23:44:09  42  ,crr8
23:44:09  43  ,crr10
23:44:09  44  ,crr12
23:44:09  45  ,crr14
23:44:09  46  ,crr16
23:44:09  47  ,crr18
23:44:09  48  --
23:44:09  49  ,hh
23:44:09  50  ,d
23:44:09  51  ,w
23:44:09  52  ,mpm
23:44:09  53  ,mph
23:44:09  54  FROM svm6122
23:44:09  55  ORDER BY ydate
23:44:09  56  /

Table created.

Elapsed: 00:00:00.36
23:44:10 SQL> 
23:44:10 SQL> -- rpt
23:44:10 SQL> 
23:44:10 SQL> SELECT
23:44:10   2  pair
23:44:10   3  ,trend
23:44:10   4  ,gatt
23:44:10   5  ,COUNT(pair)
23:44:10   6  ,AVG(g6)
23:44:10   7  FROM svm6142
23:44:10   8  GROUP BY pair,trend,gatt
23:44:10   9  ORDER BY pair,trend,gatt
23:44:10  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7255 -.00199515
usd_chf 	-1 up	      3041 .003855572
usd_chf 	-1		57
usd_chf 	 1 nup	      6347 -.00158058
usd_chf 	 1 up	      2541 .003693677
usd_chf 	 1		15

6 rows selected.

Elapsed: 00:00:00.04
23:44:10 SQL> 
23:44:10 SQL> 
23:44:10 SQL> -- Derive NTILE based params:
23:44:10 SQL> 
23:44:10 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
23:44:10 SQL> CREATE TABLE svm6162 COMPRESS AS
23:44:10   2  SELECT
23:44:10   3  pair
23:44:10   4  ,ydate
23:44:10   5  ,prdate
23:44:10   6  ,clse
23:44:10   7  ,g6
23:44:10   8  ,gatt
23:44:10   9  ,gattn
23:44:10  10  ,trend
23:44:10  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:44:10  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:44:10  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:44:10  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:44:10  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:44:10  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:44:10  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:44:10  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:44:10  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:44:10  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:44:10  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:44:10  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:44:10  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:44:10  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:44:10  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:44:10  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:44:10  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:44:10  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:44:10  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:44:10  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:44:10  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:44:10  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:44:10  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:44:10  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:44:10  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:44:10  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:44:10  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:44:10  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:44:10  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:44:10  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:44:10  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:44:10  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:44:10  43  ,hh  att32
23:44:10  44  ,d   att33
23:44:10  45  ,w   att34
23:44:10  46  ,mpm att35
23:44:10  47  ,mph att36
23:44:10  48  ,trend att37
23:44:10  49  FROM svm6142
23:44:10  50  ORDER BY ydate
23:44:10  51  /

Table created.

Elapsed: 00:00:04.84
23:44:15 SQL> 
23:44:15 SQL> -- rpt
23:44:15 SQL> 
23:44:15 SQL> SELECT
23:44:15   2  pair
23:44:15   3  ,trend
23:44:15   4  ,gatt
23:44:15   5  ,COUNT(pair)
23:44:15   6  ,AVG(g6)
23:44:15   7  FROM svm6162
23:44:15   8  GROUP BY pair,trend,gatt
23:44:15   9  ORDER BY pair,trend,gatt
23:44:15  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7255 -.00199515
usd_chf 	-1 up	      3041 .003855572
usd_chf 	-1		57
usd_chf 	 1 nup	      6347 -.00158058
usd_chf 	 1 up	      2541 .003693677
usd_chf 	 1		15

6 rows selected.

Elapsed: 00:00:00.03
23:44:15 SQL> 
23:44:15 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.10
23:44:15 SQL> CREATE TABLE modsrc COMPRESS AS
23:44:15   2  SELECT
23:44:15   3  pair
23:44:15   4  ,ydate
23:44:15   5  ,prdate
23:44:15   6  ,trend
23:44:15   7  ,g6
23:44:15   8  ,gatt
23:44:15   9  ,gattn
23:44:15  10  FROM svm6162
23:44:15  11  /

Table created.

Elapsed: 00:00:00.09
23:44:15 SQL> 
23:44:15 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
23:44:15 SQL> 
23:44:15 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.19
23:44:15 SQL> CREATE TABLE chf_ms610 COMPRESS AS
23:44:15   2  SELECT
23:44:15   3  ydate
23:44:15   4  ,trend chf_trend
23:44:15   5  ,g6    chf_g6
23:44:15   6  ,gatt  chf_gatt
23:44:15   7  ,gattn chf_gattn
23:44:15   8  FROM modsrc
23:44:15   9  /

Table created.

Elapsed: 00:00:00.14
23:44:15 SQL> 
23:44:15 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.14
23:44:16 SQL> 
23:44:16 SQL> -- I need a copy of the attributes:
23:44:16 SQL> 
23:44:16 SQL> 
23:44:16 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.03
23:44:16 SQL> CREATE TABLE chf_att COMPRESS AS
23:44:16   2  SELECT
23:44:16   3  ydate
23:44:16   4  ,att00 chf_att00
23:44:16   5  ,att01 chf_att01
23:44:16   6  ,att02 chf_att02
23:44:16   7  ,att03 chf_att03
23:44:16   8  ,att04 chf_att04
23:44:16   9  ,att05 chf_att05
23:44:16  10  ,att06 chf_att06
23:44:16  11  ,att07 chf_att07
23:44:16  12  ,att08 chf_att08
23:44:16  13  ,att09 chf_att09
23:44:16  14  ,att10 chf_att10
23:44:16  15  ,att11 chf_att11
23:44:16  16  ,att12 chf_att12
23:44:16  17  ,att13 chf_att13
23:44:16  18  ,att14 chf_att14
23:44:16  19  ,att15 chf_att15
23:44:16  20  ,att16 chf_att16
23:44:16  21  ,att17 chf_att17
23:44:16  22  ,att18 chf_att18
23:44:16  23  ,att19 chf_att19
23:44:16  24  ,att20 chf_att20
23:44:16  25  ,att21 chf_att21
23:44:16  26  ,att22 chf_att22
23:44:16  27  ,att23 chf_att23
23:44:16  28  ,att24 chf_att24
23:44:16  29  ,att25 chf_att25
23:44:16  30  ,att26 chf_att26
23:44:16  31  ,att27 chf_att27
23:44:16  32  ,att28 chf_att28
23:44:16  33  ,att29 chf_att29
23:44:16  34  ,att30 chf_att30
23:44:16  35  ,att31 chf_att31
23:44:16  36  ,att32 chf_att32
23:44:16  37  ,att33 chf_att33
23:44:16  38  ,att34 chf_att34
23:44:16  39  ,att35 chf_att35
23:44:16  40  ,att36 chf_att36
23:44:16  41  ,att37 chf_att37
23:44:16  42  FROM svm6162
23:44:16  43  /

Table created.

Elapsed: 00:00:00.15
23:44:16 SQL> 
23:44:16 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
23:44:16 SQL> 
23:44:16 SQL> -- rpt
23:44:16 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.83
23:44:17 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.01
23:44:17 SQL> 
23:44:17 SQL> --
23:44:17 SQL> -- ech610.sql
23:44:17 SQL> --
23:44:17 SQL> 
23:44:17 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:44:17 SQL> 
23:44:17 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.43
23:44:18 SQL> 
23:44:18 SQL> -- I created di5min here:
23:44:18 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:44:18 SQL> 
23:44:18 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:44:18   2  SELECT
23:44:18   3  pair
23:44:18   4  ,ydate
23:44:18   5  ,prdate
23:44:18   6  ,rownum rnum -- acts as t in my time-series
23:44:18   7  ,clse
23:44:18   8  -- Derive a bunch of attributes from clse, the latest price:
23:44:18   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:44:18  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:44:18  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:44:18  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:44:18  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:44:18  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:44:18  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:44:18  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:44:18  17  --
23:44:18  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:44:18  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:44:18  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:44:18  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:44:18  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:44:18  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:44:18  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:44:18  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:44:18  26  --
23:44:18  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:44:18  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:44:18  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:44:18  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:44:18  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:44:18  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:44:18  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:44:18  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:44:18  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:44:18  36  FROM di5min WHERE pair LIKE'%ech%'
23:44:18  37  AND ydate > sysdate - 95
23:44:18  38  ORDER BY ydate
23:44:18  39  /

View created.

Elapsed: 00:00:00.05
23:44:18 SQL> 
23:44:18 SQL> -- rpt
23:44:18 SQL> 
23:44:18 SQL> SELECT
23:44:18   2  pair
23:44:18   3  ,COUNT(pair)
23:44:18   4  ,MIN(clse),MAX(clse)
23:44:18   5  ,MIN(avg6),MAX(avg6)
23:44:18   6  ,MIN(ydate),MAX(ydate)
23:44:18   7  FROM svm6102
23:44:18   8  GROUP BY pair
23:44:18   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19255 1.24192946 1.38284305 1.24320711 1.37986485 2010-09-30 23:45:01 2011-01-03 23:35:00

Elapsed: 00:00:00.77
23:44:18 SQL> 
23:44:18 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:44:18 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.18
23:44:19 SQL> CREATE TABLE svm6122 COMPRESS AS
23:44:19   2  SELECT
23:44:19   3  pair
23:44:19   4  ,ydate
23:44:19   5  ,prdate
23:44:19   6  ,clse
23:44:19   7  -- g6 is important. I want to predict g6:
23:44:19   8  ,ld6 - clse g6
23:44:19   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:44:19  10  -- I want more attributes from the ones I derived above:
23:44:19  11  -- clse relation to moving-min
23:44:19  12  ,clse-min4  cm4
23:44:19  13  ,clse-min6  cm6
23:44:19  14  ,clse-min8  cm8
23:44:19  15  ,clse-min10 cm10
23:44:19  16  ,clse-min12 cm12
23:44:19  17  ,clse-min14 cm14
23:44:19  18  ,clse-min16 cm16
23:44:19  19  ,clse-min18 cm18
23:44:19  20  -- clse relation to moving-avg
23:44:19  21  ,clse-avg4  ca4
23:44:19  22  ,clse-avg6  ca6
23:44:19  23  ,clse-avg8  ca8
23:44:19  24  ,clse-avg10 ca10
23:44:19  25  ,clse-avg12 ca12
23:44:19  26  ,clse-avg14 ca14
23:44:19  27  ,clse-avg16 ca16
23:44:19  28  ,clse-avg18 ca18
23:44:19  29  -- clse relation to moving-max
23:44:19  30  ,clse-max4  cx4
23:44:19  31  ,clse-max6  cx6
23:44:19  32  ,clse-max8  cx8
23:44:19  33  ,clse-max10 cx10
23:44:19  34  ,clse-max12 cx12
23:44:19  35  ,clse-max14 cx14
23:44:19  36  ,clse-max16 cx16
23:44:19  37  ,clse-max18 cx18
23:44:19  38  -- Derive more attributes.
23:44:19  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:44:19  40  -- But COVAR_POP is more stable:
23:44:19  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:44:19  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:44:19  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:44:19  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:44:19  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:44:19  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:44:19  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:44:19  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:44:19  49  -- Derive date related attributes:
23:44:19  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:44:19  51  ,0+TO_CHAR(ydate,'D')d
23:44:19  52  ,0+TO_CHAR(ydate,'W')w
23:44:19  53  -- mpm stands for minutes-past-midnight:
23:44:19  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:44:19  55  -- mph stands for minutes-past-hour:
23:44:19  56  ,0+TO_CHAR(ydate,'MI')mph
23:44:19  57  FROM svm6102
23:44:19  58  ORDER BY ydate
23:44:19  59  /

Table created.

Elapsed: 00:00:02.02
23:44:21 SQL> 
23:44:21 SQL> -- rpt
23:44:21 SQL> 
23:44:21 SQL> SELECT
23:44:21   2  pair
23:44:21   3  ,COUNT(pair)
23:44:21   4  ,MIN(clse),MAX(clse)
23:44:21   5  ,MIN(ydate),MAX(ydate)
23:44:21   6  FROM svm6122
23:44:21   7  GROUP BY pair
23:44:21   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19255 1.24192946 1.38284305 2010-09-30 23:45:01 2011-01-03 23:35:00

Elapsed: 00:00:00.03
23:44:21 SQL> 
23:44:21 SQL> -- Prepare for derivation of NTILE based params:
23:44:21 SQL> 
23:44:21 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.20
23:44:21 SQL> CREATE TABLE svm6142 COMPRESS AS
23:44:21   2  SELECT
23:44:21   3  pair
23:44:21   4  ,ydate
23:44:21   5  ,prdate
23:44:21   6  ,clse
23:44:21   7  ,g6
23:44:21   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:44:21   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:44:21  10  ,CASE WHEN trend IS NULL THEN 1
23:44:21  11  	    WHEN trend =0      THEN 1
23:44:21  12  	    ELSE trend END trend
23:44:21  13  ,cm4
23:44:21  14  ,cm6
23:44:21  15  ,cm8
23:44:21  16  ,cm10
23:44:21  17  ,cm12
23:44:21  18  ,cm14
23:44:21  19  ,cm16
23:44:21  20  ,cm18
23:44:21  21  --
23:44:21  22  ,ca4
23:44:21  23  ,ca6
23:44:21  24  ,ca8
23:44:21  25  ,ca10
23:44:21  26  ,ca12
23:44:21  27  ,ca14
23:44:21  28  ,ca16
23:44:21  29  ,ca18
23:44:21  30  --
23:44:21  31  ,cx4
23:44:21  32  ,cx6
23:44:21  33  ,cx8
23:44:21  34  ,cx10
23:44:21  35  ,cx12
23:44:21  36  ,cx14
23:44:21  37  ,cx16
23:44:21  38  ,cx18
23:44:21  39  --
23:44:21  40  ,crr4
23:44:21  41  ,crr6
23:44:21  42  ,crr8
23:44:21  43  ,crr10
23:44:21  44  ,crr12
23:44:21  45  ,crr14
23:44:21  46  ,crr16
23:44:21  47  ,crr18
23:44:21  48  --
23:44:21  49  ,hh
23:44:21  50  ,d
23:44:21  51  ,w
23:44:21  52  ,mpm
23:44:21  53  ,mph
23:44:21  54  FROM svm6122
23:44:21  55  ORDER BY ydate
23:44:21  56  /

Table created.

Elapsed: 00:00:00.41
23:44:21 SQL> 
23:44:21 SQL> -- rpt
23:44:21 SQL> 
23:44:21 SQL> SELECT
23:44:21   2  pair
23:44:21   3  ,trend
23:44:21   4  ,gatt
23:44:21   5  ,COUNT(pair)
23:44:21   6  ,AVG(g6)
23:44:21   7  FROM svm6142
23:44:21   8  GROUP BY pair,trend,gatt
23:44:21   9  ORDER BY pair,trend,gatt
23:44:21  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6534 -.00224446
ech_usd 	-1 up	      3543 .003527968
ech_usd 	-1		37
ech_usd 	 1 nup	      6300 -.00239098
ech_usd 	 1 up	      2806 .003791376
ech_usd 	 1		35

6 rows selected.

Elapsed: 00:00:00.04
23:44:21 SQL> 
23:44:21 SQL> 
23:44:21 SQL> -- Derive NTILE based params:
23:44:21 SQL> 
23:44:21 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
23:44:21 SQL> CREATE TABLE svm6162 COMPRESS AS
23:44:21   2  SELECT
23:44:21   3  pair
23:44:21   4  ,ydate
23:44:21   5  ,prdate
23:44:21   6  ,clse
23:44:21   7  ,g6
23:44:21   8  ,gatt
23:44:21   9  ,gattn
23:44:21  10  ,trend
23:44:21  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:44:21  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:44:21  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:44:21  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:44:21  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:44:21  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:44:21  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:44:21  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:44:21  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:44:21  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:44:21  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:44:21  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:44:21  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:44:21  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:44:21  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:44:21  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:44:21  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:44:21  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:44:21  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:44:21  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:44:21  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:44:21  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:44:21  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:44:21  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:44:21  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:44:21  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:44:21  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:44:21  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:44:21  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:44:21  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:44:21  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:44:21  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:44:21  43  ,hh  att32
23:44:21  44  ,d   att33
23:44:21  45  ,w   att34
23:44:21  46  ,mpm att35
23:44:21  47  ,mph att36
23:44:21  48  ,trend att37
23:44:21  49  FROM svm6142
23:44:21  50  ORDER BY ydate
23:44:21  51  /

Table created.

Elapsed: 00:00:04.95
23:44:26 SQL> 
23:44:26 SQL> -- rpt
23:44:26 SQL> 
23:44:26 SQL> SELECT
23:44:26   2  pair
23:44:26   3  ,trend
23:44:26   4  ,gatt
23:44:26   5  ,COUNT(pair)
23:44:26   6  ,AVG(g6)
23:44:26   7  FROM svm6162
23:44:26   8  GROUP BY pair,trend,gatt
23:44:26   9  ORDER BY pair,trend,gatt
23:44:26  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6534 -.00224446
ech_usd 	-1 up	      3543 .003527968
ech_usd 	-1		37
ech_usd 	 1 nup	      6300 -.00239098
ech_usd 	 1 up	      2806 .003791376
ech_usd 	 1		35

6 rows selected.

Elapsed: 00:00:00.03
23:44:26 SQL> 
23:44:26 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
23:44:27 SQL> CREATE TABLE modsrc COMPRESS AS
23:44:27   2  SELECT
23:44:27   3  pair
23:44:27   4  ,ydate
23:44:27   5  ,prdate
23:44:27   6  ,trend
23:44:27   7  ,g6
23:44:27   8  ,gatt
23:44:27   9  ,gattn
23:44:27  10  FROM svm6162
23:44:27  11  /

Table created.

Elapsed: 00:00:00.70
23:44:27 SQL> 
23:44:27 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
23:44:27 SQL> 
23:44:27 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
23:44:27 SQL> CREATE TABLE ech_ms610 COMPRESS AS
23:44:27   2  SELECT
23:44:27   3  ydate
23:44:27   4  ,trend ech_trend
23:44:27   5  ,g6    ech_g6
23:44:27   6  ,gatt  ech_gatt
23:44:27   7  ,gattn ech_gattn
23:44:27   8  FROM modsrc
23:44:27   9  /

Table created.

Elapsed: 00:00:00.08
23:44:28 SQL> 
23:44:28 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
23:44:28 SQL> 
23:44:28 SQL> -- I need a copy of the attributes:
23:44:28 SQL> 
23:44:28 SQL> 
23:44:28 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.06
23:44:28 SQL> CREATE TABLE ech_att COMPRESS AS
23:44:28   2  SELECT
23:44:28   3  ydate
23:44:28   4  ,att00 ech_att00
23:44:28   5  ,att01 ech_att01
23:44:28   6  ,att02 ech_att02
23:44:28   7  ,att03 ech_att03
23:44:28   8  ,att04 ech_att04
23:44:28   9  ,att05 ech_att05
23:44:28  10  ,att06 ech_att06
23:44:28  11  ,att07 ech_att07
23:44:28  12  ,att08 ech_att08
23:44:28  13  ,att09 ech_att09
23:44:28  14  ,att10 ech_att10
23:44:28  15  ,att11 ech_att11
23:44:28  16  ,att12 ech_att12
23:44:28  17  ,att13 ech_att13
23:44:28  18  ,att14 ech_att14
23:44:28  19  ,att15 ech_att15
23:44:28  20  ,att16 ech_att16
23:44:28  21  ,att17 ech_att17
23:44:28  22  ,att18 ech_att18
23:44:28  23  ,att19 ech_att19
23:44:28  24  ,att20 ech_att20
23:44:28  25  ,att21 ech_att21
23:44:28  26  ,att22 ech_att22
23:44:28  27  ,att23 ech_att23
23:44:28  28  ,att24 ech_att24
23:44:28  29  ,att25 ech_att25
23:44:28  30  ,att26 ech_att26
23:44:28  31  ,att27 ech_att27
23:44:28  32  ,att28 ech_att28
23:44:28  33  ,att29 ech_att29
23:44:28  34  ,att30 ech_att30
23:44:28  35  ,att31 ech_att31
23:44:28  36  ,att32 ech_att32
23:44:28  37  ,att33 ech_att33
23:44:28  38  ,att34 ech_att34
23:44:28  39  ,att35 ech_att35
23:44:28  40  ,att36 ech_att36
23:44:28  41  ,att37 ech_att37
23:44:28  42  FROM svm6162
23:44:28  43  /

Table created.

Elapsed: 00:00:00.23
23:44:28 SQL> 
23:44:28 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
23:44:28 SQL> 
23:44:28 SQL> -- rpt
23:44:28 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19255

Elapsed: 00:00:00.78
23:44:29 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19255

Elapsed: 00:00:00.00
23:44:29 SQL> 
23:44:29 SQL> --
23:44:29 SQL> -- egb610.sql
23:44:29 SQL> --
23:44:29 SQL> 
23:44:29 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:44:29 SQL> 
23:44:29 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.54
23:44:30 SQL> 
23:44:30 SQL> -- I created di5min here:
23:44:30 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:44:30 SQL> 
23:44:30 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:44:30   2  SELECT
23:44:30   3  pair
23:44:30   4  ,ydate
23:44:30   5  ,prdate
23:44:30   6  ,rownum rnum -- acts as t in my time-series
23:44:30   7  ,clse
23:44:30   8  -- Derive a bunch of attributes from clse, the latest price:
23:44:30   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:44:30  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:44:30  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:44:30  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:44:30  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:44:30  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:44:30  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:44:30  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:44:30  17  --
23:44:30  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:44:30  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:44:30  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:44:30  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:44:30  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:44:30  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:44:30  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:44:30  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:44:30  26  --
23:44:30  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:44:30  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:44:30  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:44:30  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:44:30  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:44:30  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:44:30  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:44:30  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:44:30  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:44:30  36  FROM di5min WHERE pair LIKE'%egb%'
23:44:30  37  AND ydate > sysdate - 95
23:44:30  38  ORDER BY ydate
23:44:30  39  /

View created.

Elapsed: 00:00:00.04
23:44:30 SQL> 
23:44:30 SQL> -- rpt
23:44:30 SQL> 
23:44:30 SQL> SELECT
23:44:30   2  pair
23:44:30   3  ,COUNT(pair)
23:44:30   4  ,MIN(clse),MAX(clse)
23:44:30   5  ,MIN(avg6),MAX(avg6)
23:44:30   6  ,MIN(ydate),MAX(ydate)
23:44:30   7  FROM svm6102
23:44:30   8  GROUP BY pair
23:44:30   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19254 .833520557 .893920122 .834199029 .892400287 2010-09-30 23:45:01 2011-01-03 23:35:00

Elapsed: 00:00:00.95
23:44:31 SQL> 
23:44:31 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:44:31 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.25
23:44:31 SQL> CREATE TABLE svm6122 COMPRESS AS
23:44:31   2  SELECT
23:44:31   3  pair
23:44:31   4  ,ydate
23:44:31   5  ,prdate
23:44:31   6  ,clse
23:44:31   7  -- g6 is important. I want to predict g6:
23:44:31   8  ,ld6 - clse g6
23:44:31   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:44:31  10  -- I want more attributes from the ones I derived above:
23:44:31  11  -- clse relation to moving-min
23:44:31  12  ,clse-min4  cm4
23:44:31  13  ,clse-min6  cm6
23:44:31  14  ,clse-min8  cm8
23:44:31  15  ,clse-min10 cm10
23:44:31  16  ,clse-min12 cm12
23:44:31  17  ,clse-min14 cm14
23:44:31  18  ,clse-min16 cm16
23:44:31  19  ,clse-min18 cm18
23:44:31  20  -- clse relation to moving-avg
23:44:31  21  ,clse-avg4  ca4
23:44:31  22  ,clse-avg6  ca6
23:44:31  23  ,clse-avg8  ca8
23:44:31  24  ,clse-avg10 ca10
23:44:31  25  ,clse-avg12 ca12
23:44:31  26  ,clse-avg14 ca14
23:44:31  27  ,clse-avg16 ca16
23:44:31  28  ,clse-avg18 ca18
23:44:31  29  -- clse relation to moving-max
23:44:31  30  ,clse-max4  cx4
23:44:31  31  ,clse-max6  cx6
23:44:31  32  ,clse-max8  cx8
23:44:31  33  ,clse-max10 cx10
23:44:31  34  ,clse-max12 cx12
23:44:31  35  ,clse-max14 cx14
23:44:31  36  ,clse-max16 cx16
23:44:31  37  ,clse-max18 cx18
23:44:31  38  -- Derive more attributes.
23:44:31  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:44:31  40  -- But COVAR_POP is more stable:
23:44:31  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:44:31  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:44:31  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:44:31  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:44:31  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:44:31  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:44:31  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:44:31  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:44:31  49  -- Derive date related attributes:
23:44:31  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:44:31  51  ,0+TO_CHAR(ydate,'D')d
23:44:31  52  ,0+TO_CHAR(ydate,'W')w
23:44:31  53  -- mpm stands for minutes-past-midnight:
23:44:31  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:44:31  55  -- mph stands for minutes-past-hour:
23:44:31  56  ,0+TO_CHAR(ydate,'MI')mph
23:44:31  57  FROM svm6102
23:44:31  58  ORDER BY ydate
23:44:31  59  /

Table created.

Elapsed: 00:00:02.49
23:44:34 SQL> 
23:44:34 SQL> -- rpt
23:44:34 SQL> 
23:44:34 SQL> SELECT
23:44:34   2  pair
23:44:34   3  ,COUNT(pair)
23:44:34   4  ,MIN(clse),MAX(clse)
23:44:34   5  ,MIN(ydate),MAX(ydate)
23:44:34   6  FROM svm6122
23:44:34   7  GROUP BY pair
23:44:34   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19254 .833520557 .893920122 2010-09-30 23:45:01 2011-01-03 23:35:00

Elapsed: 00:00:00.04
23:44:34 SQL> 
23:44:34 SQL> -- Prepare for derivation of NTILE based params:
23:44:34 SQL> 
23:44:34 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.41
23:44:34 SQL> CREATE TABLE svm6142 COMPRESS AS
23:44:34   2  SELECT
23:44:34   3  pair
23:44:34   4  ,ydate
23:44:34   5  ,prdate
23:44:34   6  ,clse
23:44:34   7  ,g6
23:44:34   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:44:34   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:44:34  10  ,CASE WHEN trend IS NULL THEN 1
23:44:34  11  	    WHEN trend =0      THEN 1
23:44:34  12  	    ELSE trend END trend
23:44:34  13  ,cm4
23:44:34  14  ,cm6
23:44:34  15  ,cm8
23:44:34  16  ,cm10
23:44:34  17  ,cm12
23:44:34  18  ,cm14
23:44:34  19  ,cm16
23:44:34  20  ,cm18
23:44:34  21  --
23:44:34  22  ,ca4
23:44:34  23  ,ca6
23:44:34  24  ,ca8
23:44:34  25  ,ca10
23:44:34  26  ,ca12
23:44:34  27  ,ca14
23:44:34  28  ,ca16
23:44:34  29  ,ca18
23:44:34  30  --
23:44:34  31  ,cx4
23:44:34  32  ,cx6
23:44:34  33  ,cx8
23:44:34  34  ,cx10
23:44:34  35  ,cx12
23:44:34  36  ,cx14
23:44:34  37  ,cx16
23:44:34  38  ,cx18
23:44:34  39  --
23:44:34  40  ,crr4
23:44:34  41  ,crr6
23:44:34  42  ,crr8
23:44:34  43  ,crr10
23:44:34  44  ,crr12
23:44:34  45  ,crr14
23:44:34  46  ,crr16
23:44:34  47  ,crr18
23:44:34  48  --
23:44:34  49  ,hh
23:44:34  50  ,d
23:44:34  51  ,w
23:44:34  52  ,mpm
23:44:34  53  ,mph
23:44:34  54  FROM svm6122
23:44:34  55  ORDER BY ydate
23:44:34  56  /

Table created.

Elapsed: 00:00:00.45
23:44:34 SQL> 
23:44:34 SQL> -- rpt
23:44:34 SQL> 
23:44:34 SQL> SELECT
23:44:34   2  pair
23:44:34   3  ,trend
23:44:34   4  ,gatt
23:44:34   5  ,COUNT(pair)
23:44:34   6  ,AVG(g6)
23:44:34   7  FROM svm6142
23:44:34   8  GROUP BY pair,trend,gatt
23:44:34   9  ORDER BY pair,trend,gatt
23:44:34  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7321 -.00100642
egb_usd 	-1 up	      2676 .002921213
egb_usd 	-1		19
egb_usd 	 1 nup	      6504 -.00132759
egb_usd 	 1 up	      2681 .002918262
egb_usd 	 1		53

6 rows selected.

Elapsed: 00:00:00.04
23:44:35 SQL> 
23:44:35 SQL> 
23:44:35 SQL> -- Derive NTILE based params:
23:44:35 SQL> 
23:44:35 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.17
23:44:35 SQL> CREATE TABLE svm6162 COMPRESS AS
23:44:35   2  SELECT
23:44:35   3  pair
23:44:35   4  ,ydate
23:44:35   5  ,prdate
23:44:35   6  ,clse
23:44:35   7  ,g6
23:44:35   8  ,gatt
23:44:35   9  ,gattn
23:44:35  10  ,trend
23:44:35  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:44:35  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:44:35  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:44:35  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:44:35  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:44:35  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:44:35  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:44:35  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:44:35  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:44:35  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:44:35  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:44:35  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:44:35  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:44:35  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:44:35  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:44:35  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:44:35  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:44:35  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:44:35  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:44:35  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:44:35  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:44:35  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:44:35  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:44:35  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:44:35  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:44:35  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:44:35  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:44:35  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:44:35  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:44:35  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:44:35  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:44:35  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:44:35  43  ,hh  att32
23:44:35  44  ,d   att33
23:44:35  45  ,w   att34
23:44:35  46  ,mpm att35
23:44:35  47  ,mph att36
23:44:35  48  ,trend att37
23:44:35  49  FROM svm6142
23:44:35  50  ORDER BY ydate
23:44:35  51  /

Table created.

Elapsed: 00:00:05.42
23:44:40 SQL> 
23:44:40 SQL> -- rpt
23:44:40 SQL> 
23:44:40 SQL> SELECT
23:44:40   2  pair
23:44:40   3  ,trend
23:44:40   4  ,gatt
23:44:40   5  ,COUNT(pair)
23:44:40   6  ,AVG(g6)
23:44:40   7  FROM svm6162
23:44:40   8  GROUP BY pair,trend,gatt
23:44:40   9  ORDER BY pair,trend,gatt
23:44:40  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7321 -.00100642
egb_usd 	-1 up	      2676 .002921213
egb_usd 	-1		19
egb_usd 	 1 nup	      6504 -.00132759
egb_usd 	 1 up	      2681 .002918262
egb_usd 	 1		53

6 rows selected.

Elapsed: 00:00:00.03
23:44:40 SQL> 
23:44:40 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
23:44:40 SQL> CREATE TABLE modsrc COMPRESS AS
23:44:40   2  SELECT
23:44:40   3  pair
23:44:40   4  ,ydate
23:44:40   5  ,prdate
23:44:40   6  ,trend
23:44:40   7  ,g6
23:44:40   8  ,gatt
23:44:40   9  ,gattn
23:44:40  10  FROM svm6162
23:44:40  11  /

Table created.

Elapsed: 00:00:00.08
23:44:40 SQL> 
23:44:40 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
23:44:41 SQL> 
23:44:41 SQL> DROP   TABLE egb_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
23:44:41 SQL> CREATE TABLE egb_ms610 COMPRESS AS
23:44:41   2  SELECT
23:44:41   3  ydate
23:44:41   4  ,trend egb_trend
23:44:41   5  ,g6    egb_g6
23:44:41   6  ,gatt  egb_gatt
23:44:41   7  ,gattn egb_gattn
23:44:41   8  FROM modsrc
23:44:41   9  /

Table created.

Elapsed: 00:00:00.07
23:44:41 SQL> 
23:44:41 SQL> ANALYZE TABLE egb_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.25
23:44:41 SQL> 
23:44:41 SQL> -- I need a copy of the attributes:
23:44:41 SQL> 
23:44:41 SQL> 
23:44:41 SQL> DROP   TABLE egb_att;

Table dropped.

Elapsed: 00:00:00.17
23:44:41 SQL> CREATE TABLE egb_att COMPRESS AS
23:44:41   2  SELECT
23:44:41   3  ydate
23:44:41   4  ,att00 egb_att00
23:44:41   5  ,att01 egb_att01
23:44:41   6  ,att02 egb_att02
23:44:41   7  ,att03 egb_att03
23:44:41   8  ,att04 egb_att04
23:44:41   9  ,att05 egb_att05
23:44:41  10  ,att06 egb_att06
23:44:41  11  ,att07 egb_att07
23:44:41  12  ,att08 egb_att08
23:44:41  13  ,att09 egb_att09
23:44:41  14  ,att10 egb_att10
23:44:41  15  ,att11 egb_att11
23:44:41  16  ,att12 egb_att12
23:44:41  17  ,att13 egb_att13
23:44:41  18  ,att14 egb_att14
23:44:41  19  ,att15 egb_att15
23:44:41  20  ,att16 egb_att16
23:44:41  21  ,att17 egb_att17
23:44:41  22  ,att18 egb_att18
23:44:41  23  ,att19 egb_att19
23:44:41  24  ,att20 egb_att20
23:44:41  25  ,att21 egb_att21
23:44:41  26  ,att22 egb_att22
23:44:41  27  ,att23 egb_att23
23:44:41  28  ,att24 egb_att24
23:44:41  29  ,att25 egb_att25
23:44:41  30  ,att26 egb_att26
23:44:41  31  ,att27 egb_att27
23:44:41  32  ,att28 egb_att28
23:44:41  33  ,att29 egb_att29
23:44:41  34  ,att30 egb_att30
23:44:41  35  ,att31 egb_att31
23:44:41  36  ,att32 egb_att32
23:44:41  37  ,att33 egb_att33
23:44:41  38  ,att34 egb_att34
23:44:41  39  ,att35 egb_att35
23:44:41  40  ,att36 egb_att36
23:44:41  41  ,att37 egb_att37
23:44:41  42  FROM svm6162
23:44:41  43  /

Table created.

Elapsed: 00:00:00.18
23:44:41 SQL> 
23:44:41 SQL> ANALYZE TABLE egb_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.90
23:44:42 SQL> 
23:44:42 SQL> -- rpt
23:44:42 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19254

Elapsed: 00:00:00.92
23:44:43 SQL> SELECT COUNT(*)FROM egb_att;

  COUNT(*)
----------
     19254

Elapsed: 00:00:00.00
23:44:43 SQL> 
23:44:43 SQL> --
23:44:43 SQL> -- ejp610.sql
23:44:43 SQL> --
23:44:43 SQL> 
23:44:43 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:44:43 SQL> 
23:44:43 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.41
23:44:44 SQL> 
23:44:44 SQL> -- I created di5min here:
23:44:44 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:44:44 SQL> 
23:44:44 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:44:44   2  SELECT
23:44:44   3  pair
23:44:44   4  ,ydate
23:44:44   5  ,prdate
23:44:44   6  ,rownum rnum -- acts as t in my time-series
23:44:44   7  ,clse
23:44:44   8  -- Derive a bunch of attributes from clse, the latest price:
23:44:44   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:44:44  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:44:44  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:44:44  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:44:44  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:44:44  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:44:44  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:44:44  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:44:44  17  --
23:44:44  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:44:44  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:44:44  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:44:44  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:44:44  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:44:44  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:44:44  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:44:44  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:44:44  26  --
23:44:44  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:44:44  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:44:44  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:44:44  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:44:44  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:44:44  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:44:44  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:44:44  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:44:44  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:44:44  36  FROM di5min WHERE pair LIKE'%ejp%'
23:44:44  37  AND ydate > sysdate - 95
23:44:44  38  ORDER BY ydate
23:44:44  39  /

View created.

Elapsed: 00:00:00.04
23:44:44 SQL> 
23:44:44 SQL> -- rpt
23:44:44 SQL> 
23:44:44 SQL> SELECT
23:44:44   2  pair
23:44:44   3  ,COUNT(pair)
23:44:44   4  ,MIN(clse),MAX(clse)
23:44:44   5  ,MIN(avg6),MAX(avg6)
23:44:44   6  ,MIN(ydate),MAX(ydate)
23:44:44   7  FROM svm6102
23:44:44   8  GROUP BY pair
23:44:44   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ejp_usd       19252 107.643765	115.63485 107.776148 115.509678 2010-09-30 23:45:01 2011-01-03 23:35:00

Elapsed: 00:00:00.82
23:44:44 SQL> 
23:44:44 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:44:44 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.21
23:44:45 SQL> CREATE TABLE svm6122 COMPRESS AS
23:44:45   2  SELECT
23:44:45   3  pair
23:44:45   4  ,ydate
23:44:45   5  ,prdate
23:44:45   6  ,clse
23:44:45   7  -- g6 is important. I want to predict g6:
23:44:45   8  ,ld6 - clse g6
23:44:45   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:44:45  10  -- I want more attributes from the ones I derived above:
23:44:45  11  -- clse relation to moving-min
23:44:45  12  ,clse-min4  cm4
23:44:45  13  ,clse-min6  cm6
23:44:45  14  ,clse-min8  cm8
23:44:45  15  ,clse-min10 cm10
23:44:45  16  ,clse-min12 cm12
23:44:45  17  ,clse-min14 cm14
23:44:45  18  ,clse-min16 cm16
23:44:45  19  ,clse-min18 cm18
23:44:45  20  -- clse relation to moving-avg
23:44:45  21  ,clse-avg4  ca4
23:44:45  22  ,clse-avg6  ca6
23:44:45  23  ,clse-avg8  ca8
23:44:45  24  ,clse-avg10 ca10
23:44:45  25  ,clse-avg12 ca12
23:44:45  26  ,clse-avg14 ca14
23:44:45  27  ,clse-avg16 ca16
23:44:45  28  ,clse-avg18 ca18
23:44:45  29  -- clse relation to moving-max
23:44:45  30  ,clse-max4  cx4
23:44:45  31  ,clse-max6  cx6
23:44:45  32  ,clse-max8  cx8
23:44:45  33  ,clse-max10 cx10
23:44:45  34  ,clse-max12 cx12
23:44:45  35  ,clse-max14 cx14
23:44:45  36  ,clse-max16 cx16
23:44:45  37  ,clse-max18 cx18
23:44:45  38  -- Derive more attributes.
23:44:45  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:44:45  40  -- But COVAR_POP is more stable:
23:44:45  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:44:45  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:44:45  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:44:45  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:44:45  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:44:45  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:44:45  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:44:45  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:44:45  49  -- Derive date related attributes:
23:44:45  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:44:45  51  ,0+TO_CHAR(ydate,'D')d
23:44:45  52  ,0+TO_CHAR(ydate,'W')w
23:44:45  53  -- mpm stands for minutes-past-midnight:
23:44:45  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:44:45  55  -- mph stands for minutes-past-hour:
23:44:45  56  ,0+TO_CHAR(ydate,'MI')mph
23:44:45  57  FROM svm6102
23:44:45  58  ORDER BY ydate
23:44:45  59  /

Table created.

Elapsed: 00:00:02.10
23:44:47 SQL> 
23:44:47 SQL> -- rpt
23:44:47 SQL> 
23:44:47 SQL> SELECT
23:44:47   2  pair
23:44:47   3  ,COUNT(pair)
23:44:47   4  ,MIN(clse),MAX(clse)
23:44:47   5  ,MIN(ydate),MAX(ydate)
23:44:47   6  FROM svm6122
23:44:47   7  GROUP BY pair
23:44:47   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ejp_usd       19252 107.643765	115.63485 2010-09-30 23:45:01 2011-01-03 23:35:00

Elapsed: 00:00:00.03
23:44:47 SQL> 
23:44:47 SQL> -- Prepare for derivation of NTILE based params:
23:44:47 SQL> 
23:44:47 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.21
23:44:47 SQL> CREATE TABLE svm6142 COMPRESS AS
23:44:47   2  SELECT
23:44:47   3  pair
23:44:47   4  ,ydate
23:44:47   5  ,prdate
23:44:47   6  ,clse
23:44:47   7  ,g6
23:44:47   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:44:47   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:44:47  10  ,CASE WHEN trend IS NULL THEN 1
23:44:47  11  	    WHEN trend =0      THEN 1
23:44:47  12  	    ELSE trend END trend
23:44:47  13  ,cm4
23:44:47  14  ,cm6
23:44:47  15  ,cm8
23:44:47  16  ,cm10
23:44:47  17  ,cm12
23:44:47  18  ,cm14
23:44:47  19  ,cm16
23:44:47  20  ,cm18
23:44:47  21  --
23:44:47  22  ,ca4
23:44:47  23  ,ca6
23:44:47  24  ,ca8
23:44:47  25  ,ca10
23:44:47  26  ,ca12
23:44:47  27  ,ca14
23:44:47  28  ,ca16
23:44:47  29  ,ca18
23:44:47  30  --
23:44:47  31  ,cx4
23:44:47  32  ,cx6
23:44:47  33  ,cx8
23:44:47  34  ,cx10
23:44:47  35  ,cx12
23:44:47  36  ,cx14
23:44:47  37  ,cx16
23:44:47  38  ,cx18
23:44:47  39  --
23:44:47  40  ,crr4
23:44:47  41  ,crr6
23:44:47  42  ,crr8
23:44:47  43  ,crr10
23:44:47  44  ,crr12
23:44:47  45  ,crr14
23:44:47  46  ,crr16
23:44:47  47  ,crr18
23:44:47  48  --
23:44:47  49  ,hh
23:44:47  50  ,d
23:44:47  51  ,w
23:44:47  52  ,mpm
23:44:47  53  ,mph
23:44:47  54  FROM svm6122
23:44:47  55  ORDER BY ydate
23:44:47  56  /

Table created.

Elapsed: 00:00:00.53
23:44:47 SQL> 
23:44:47 SQL> -- rpt
23:44:47 SQL> 
23:44:47 SQL> SELECT
23:44:47   2  pair
23:44:47   3  ,trend
23:44:47   4  ,gatt
23:44:47   5  ,COUNT(pair)
23:44:47   6  ,AVG(g6)
23:44:47   7  FROM svm6142
23:44:47   8  GROUP BY pair,trend,gatt
23:44:47   9  ORDER BY pair,trend,gatt
23:44:47  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4860 -.32448106
ejp_usd 	-1 up	      4820 .271763961
ejp_usd 	-1		 3
ejp_usd 	 1 nup	      4854 -.29108765
ejp_usd 	 1 up	      4646 .286686359
ejp_usd 	 1		69

6 rows selected.

Elapsed: 00:00:00.04
23:44:48 SQL> 
23:44:48 SQL> 
23:44:48 SQL> -- Derive NTILE based params:
23:44:48 SQL> 
23:44:48 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
23:44:48 SQL> CREATE TABLE svm6162 COMPRESS AS
23:44:48   2  SELECT
23:44:48   3  pair
23:44:48   4  ,ydate
23:44:48   5  ,prdate
23:44:48   6  ,clse
23:44:48   7  ,g6
23:44:48   8  ,gatt
23:44:48   9  ,gattn
23:44:48  10  ,trend
23:44:48  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:44:48  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:44:48  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:44:48  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:44:48  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:44:48  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:44:48  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:44:48  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:44:48  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:44:48  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:44:48  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:44:48  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:44:48  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:44:48  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:44:48  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:44:48  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:44:48  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:44:48  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:44:48  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:44:48  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:44:48  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:44:48  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:44:48  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:44:48  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:44:48  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:44:48  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:44:48  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:44:48  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:44:48  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:44:48  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:44:48  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:44:48  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:44:48  43  ,hh  att32
23:44:48  44  ,d   att33
23:44:48  45  ,w   att34
23:44:48  46  ,mpm att35
23:44:48  47  ,mph att36
23:44:48  48  ,trend att37
23:44:48  49  FROM svm6142
23:44:48  50  ORDER BY ydate
23:44:48  51  /

Table created.

Elapsed: 00:00:04.80
23:44:52 SQL> 
23:44:52 SQL> -- rpt
23:44:52 SQL> 
23:44:52 SQL> SELECT
23:44:52   2  pair
23:44:52   3  ,trend
23:44:52   4  ,gatt
23:44:52   5  ,COUNT(pair)
23:44:52   6  ,AVG(g6)
23:44:52   7  FROM svm6162
23:44:52   8  GROUP BY pair,trend,gatt
23:44:52   9  ORDER BY pair,trend,gatt
23:44:52  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4860 -.32448106
ejp_usd 	-1 up	      4820 .271763961
ejp_usd 	-1		 3
ejp_usd 	 1 nup	      4854 -.29108765
ejp_usd 	 1 up	      4646 .286686359
ejp_usd 	 1		69

6 rows selected.

Elapsed: 00:00:00.03
23:44:52 SQL> 
23:44:52 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.11
23:44:53 SQL> CREATE TABLE modsrc COMPRESS AS
23:44:53   2  SELECT
23:44:53   3  pair
23:44:53   4  ,ydate
23:44:53   5  ,prdate
23:44:53   6  ,trend
23:44:53   7  ,g6
23:44:53   8  ,gatt
23:44:53   9  ,gattn
23:44:53  10  FROM svm6162
23:44:53  11  /

Table created.

Elapsed: 00:00:00.11
23:44:53 SQL> 
23:44:53 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
23:44:53 SQL> 
23:44:53 SQL> DROP   TABLE ejp_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
23:44:53 SQL> CREATE TABLE ejp_ms610 COMPRESS AS
23:44:53   2  SELECT
23:44:53   3  ydate
23:44:53   4  ,trend ejp_trend
23:44:53   5  ,g6    ejp_g6
23:44:53   6  ,gatt  ejp_gatt
23:44:53   7  ,gattn ejp_gattn
23:44:53   8  FROM modsrc
23:44:53   9  /

Table created.

Elapsed: 00:00:00.07
23:44:53 SQL> 
23:44:53 SQL> ANALYZE TABLE ejp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
23:44:53 SQL> 
23:44:53 SQL> -- I need a copy of the attributes:
23:44:53 SQL> 
23:44:53 SQL> 
23:44:53 SQL> DROP   TABLE ejp_att;

Table dropped.

Elapsed: 00:00:00.06
23:44:53 SQL> CREATE TABLE ejp_att COMPRESS AS
23:44:53   2  SELECT
23:44:53   3  ydate
23:44:53   4  ,att00 ejp_att00
23:44:53   5  ,att01 ejp_att01
23:44:53   6  ,att02 ejp_att02
23:44:53   7  ,att03 ejp_att03
23:44:53   8  ,att04 ejp_att04
23:44:53   9  ,att05 ejp_att05
23:44:53  10  ,att06 ejp_att06
23:44:53  11  ,att07 ejp_att07
23:44:53  12  ,att08 ejp_att08
23:44:53  13  ,att09 ejp_att09
23:44:53  14  ,att10 ejp_att10
23:44:53  15  ,att11 ejp_att11
23:44:53  16  ,att12 ejp_att12
23:44:53  17  ,att13 ejp_att13
23:44:53  18  ,att14 ejp_att14
23:44:53  19  ,att15 ejp_att15
23:44:53  20  ,att16 ejp_att16
23:44:53  21  ,att17 ejp_att17
23:44:53  22  ,att18 ejp_att18
23:44:53  23  ,att19 ejp_att19
23:44:53  24  ,att20 ejp_att20
23:44:53  25  ,att21 ejp_att21
23:44:53  26  ,att22 ejp_att22
23:44:53  27  ,att23 ejp_att23
23:44:53  28  ,att24 ejp_att24
23:44:53  29  ,att25 ejp_att25
23:44:53  30  ,att26 ejp_att26
23:44:53  31  ,att27 ejp_att27
23:44:53  32  ,att28 ejp_att28
23:44:53  33  ,att29 ejp_att29
23:44:53  34  ,att30 ejp_att30
23:44:53  35  ,att31 ejp_att31
23:44:53  36  ,att32 ejp_att32
23:44:53  37  ,att33 ejp_att33
23:44:53  38  ,att34 ejp_att34
23:44:53  39  ,att35 ejp_att35
23:44:53  40  ,att36 ejp_att36
23:44:53  41  ,att37 ejp_att37
23:44:53  42  FROM svm6162
23:44:53  43  /

Table created.

Elapsed: 00:00:00.18
23:44:53 SQL> 
23:44:53 SQL> ANALYZE TABLE ejp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.42
23:44:54 SQL> 
23:44:54 SQL> -- rpt
23:44:54 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19252

Elapsed: 00:00:00.84
23:44:55 SQL> SELECT COUNT(*)FROM ejp_att;

  COUNT(*)
----------
     19252

Elapsed: 00:00:00.00
23:44:55 SQL> 
23:44:55 SQL> --
23:44:55 SQL> -- ajp610.sql
23:44:55 SQL> --
23:44:55 SQL> 
23:44:55 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:44:55 SQL> 
23:44:55 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.37
23:44:55 SQL> 
23:44:55 SQL> -- I created di5min here:
23:44:55 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:44:55 SQL> 
23:44:55 SQL> CREATE OR REPLACE VIEW svm6102 AS
23:44:55   2  SELECT
23:44:55   3  pair
23:44:55   4  ,ydate
23:44:55   5  ,prdate
23:44:55   6  ,rownum rnum -- acts as t in my time-series
23:44:55   7  ,clse
23:44:55   8  -- Derive a bunch of attributes from clse, the latest price:
23:44:55   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
23:44:55  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
23:44:55  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
23:44:55  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
23:44:55  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
23:44:55  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
23:44:55  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
23:44:55  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
23:44:55  17  --
23:44:55  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
23:44:55  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
23:44:55  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
23:44:55  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
23:44:55  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
23:44:55  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
23:44:55  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
23:44:55  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
23:44:55  26  --
23:44:55  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
23:44:55  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
23:44:55  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
23:44:55  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
23:44:55  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
23:44:55  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
23:44:55  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
23:44:55  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
23:44:55  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
23:44:55  36  FROM di5min WHERE pair LIKE'%ajp%'
23:44:55  37  AND ydate > sysdate - 95
23:44:55  38  ORDER BY ydate
23:44:55  39  /

View created.

Elapsed: 00:00:00.04
23:44:55 SQL> 
23:44:55 SQL> -- rpt
23:44:55 SQL> 
23:44:55 SQL> SELECT
23:44:55   2  pair
23:44:55   3  ,COUNT(pair)
23:44:55   4  ,MIN(clse),MAX(clse)
23:44:55   5  ,MIN(avg6),MAX(avg6)
23:44:55   6  ,MIN(ydate),MAX(ydate)
23:44:55   7  FROM svm6102
23:44:55   8  GROUP BY pair
23:44:55   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ajp_usd       19249  78.249976 83.6669853 78.5106193  83.546306 2010-09-30 23:45:01 2011-01-03 23:35:00

Elapsed: 00:00:00.76
23:44:56 SQL> 
23:44:56 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
23:44:56 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.18
23:44:56 SQL> CREATE TABLE svm6122 COMPRESS AS
23:44:56   2  SELECT
23:44:56   3  pair
23:44:56   4  ,ydate
23:44:56   5  ,prdate
23:44:56   6  ,clse
23:44:56   7  -- g6 is important. I want to predict g6:
23:44:56   8  ,ld6 - clse g6
23:44:56   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
23:44:56  10  -- I want more attributes from the ones I derived above:
23:44:56  11  -- clse relation to moving-min
23:44:56  12  ,clse-min4  cm4
23:44:56  13  ,clse-min6  cm6
23:44:56  14  ,clse-min8  cm8
23:44:56  15  ,clse-min10 cm10
23:44:56  16  ,clse-min12 cm12
23:44:56  17  ,clse-min14 cm14
23:44:56  18  ,clse-min16 cm16
23:44:56  19  ,clse-min18 cm18
23:44:56  20  -- clse relation to moving-avg
23:44:56  21  ,clse-avg4  ca4
23:44:56  22  ,clse-avg6  ca6
23:44:56  23  ,clse-avg8  ca8
23:44:56  24  ,clse-avg10 ca10
23:44:56  25  ,clse-avg12 ca12
23:44:56  26  ,clse-avg14 ca14
23:44:56  27  ,clse-avg16 ca16
23:44:56  28  ,clse-avg18 ca18
23:44:56  29  -- clse relation to moving-max
23:44:56  30  ,clse-max4  cx4
23:44:56  31  ,clse-max6  cx6
23:44:56  32  ,clse-max8  cx8
23:44:56  33  ,clse-max10 cx10
23:44:56  34  ,clse-max12 cx12
23:44:56  35  ,clse-max14 cx14
23:44:56  36  ,clse-max16 cx16
23:44:56  37  ,clse-max18 cx18
23:44:56  38  -- Derive more attributes.
23:44:56  39  -- I want to use CORR() here to help SVM see the shape of the series.
23:44:56  40  -- But COVAR_POP is more stable:
23:44:56  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
23:44:56  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:44:56  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:44:56  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:44:56  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:44:56  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:44:56  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:44:56  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:44:56  49  -- Derive date related attributes:
23:44:56  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:44:56  51  ,0+TO_CHAR(ydate,'D')d
23:44:56  52  ,0+TO_CHAR(ydate,'W')w
23:44:56  53  -- mpm stands for minutes-past-midnight:
23:44:56  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:44:56  55  -- mph stands for minutes-past-hour:
23:44:56  56  ,0+TO_CHAR(ydate,'MI')mph
23:44:56  57  FROM svm6102
23:44:56  58  ORDER BY ydate
23:44:56  59  /

Table created.

Elapsed: 00:00:02.03
23:44:58 SQL> 
23:44:58 SQL> -- rpt
23:44:58 SQL> 
23:44:58 SQL> SELECT
23:44:58   2  pair
23:44:58   3  ,COUNT(pair)
23:44:58   4  ,MIN(clse),MAX(clse)
23:44:58   5  ,MIN(ydate),MAX(ydate)
23:44:58   6  FROM svm6122
23:44:58   7  GROUP BY pair
23:44:58   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ajp_usd       19249  78.249976 83.6669853 2010-09-30 23:45:01 2011-01-03 23:35:00

Elapsed: 00:00:00.04
23:44:58 SQL> 
23:44:58 SQL> -- Prepare for derivation of NTILE based params:
23:44:58 SQL> 
23:44:58 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
23:44:58 SQL> CREATE TABLE svm6142 COMPRESS AS
23:44:58   2  SELECT
23:44:58   3  pair
23:44:58   4  ,ydate
23:44:58   5  ,prdate
23:44:58   6  ,clse
23:44:58   7  ,g6
23:44:58   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
23:44:58   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
23:44:58  10  ,CASE WHEN trend IS NULL THEN 1
23:44:58  11  	    WHEN trend =0      THEN 1
23:44:58  12  	    ELSE trend END trend
23:44:58  13  ,cm4
23:44:58  14  ,cm6
23:44:58  15  ,cm8
23:44:58  16  ,cm10
23:44:58  17  ,cm12
23:44:58  18  ,cm14
23:44:58  19  ,cm16
23:44:58  20  ,cm18
23:44:58  21  --
23:44:58  22  ,ca4
23:44:58  23  ,ca6
23:44:58  24  ,ca8
23:44:58  25  ,ca10
23:44:58  26  ,ca12
23:44:58  27  ,ca14
23:44:58  28  ,ca16
23:44:58  29  ,ca18
23:44:58  30  --
23:44:58  31  ,cx4
23:44:58  32  ,cx6
23:44:58  33  ,cx8
23:44:58  34  ,cx10
23:44:58  35  ,cx12
23:44:58  36  ,cx14
23:44:58  37  ,cx16
23:44:58  38  ,cx18
23:44:58  39  --
23:44:58  40  ,crr4
23:44:58  41  ,crr6
23:44:58  42  ,crr8
23:44:58  43  ,crr10
23:44:58  44  ,crr12
23:44:58  45  ,crr14
23:44:58  46  ,crr16
23:44:58  47  ,crr18
23:44:58  48  --
23:44:58  49  ,hh
23:44:58  50  ,d
23:44:58  51  ,w
23:44:58  52  ,mpm
23:44:58  53  ,mph
23:44:58  54  FROM svm6122
23:44:58  55  ORDER BY ydate
23:44:58  56  /

Table created.

Elapsed: 00:00:00.37
23:44:59 SQL> 
23:44:59 SQL> -- rpt
23:44:59 SQL> 
23:44:59 SQL> SELECT
23:44:59   2  pair
23:44:59   3  ,trend
23:44:59   4  ,gatt
23:44:59   5  ,COUNT(pair)
23:44:59   6  ,AVG(g6)
23:44:59   7  FROM svm6142
23:44:59   8  GROUP BY pair,trend,gatt
23:44:59   9  ORDER BY pair,trend,gatt
23:44:59  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4020 -.22856216
ajp_usd 	-1 up	      5117 .220792393
ajp_usd 	-1		30
ajp_usd 	 1 nup	      5195 -.19924146
ajp_usd 	 1 up	      4845 .205041275
ajp_usd 	 1		42

6 rows selected.

Elapsed: 00:00:00.04
23:44:59 SQL> 
23:44:59 SQL> 
23:44:59 SQL> -- Derive NTILE based params:
23:44:59 SQL> 
23:44:59 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
23:44:59 SQL> CREATE TABLE svm6162 COMPRESS AS
23:44:59   2  SELECT
23:44:59   3  pair
23:44:59   4  ,ydate
23:44:59   5  ,prdate
23:44:59   6  ,clse
23:44:59   7  ,g6
23:44:59   8  ,gatt
23:44:59   9  ,gattn
23:44:59  10  ,trend
23:44:59  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
23:44:59  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
23:44:59  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
23:44:59  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
23:44:59  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
23:44:59  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
23:44:59  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
23:44:59  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
23:44:59  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
23:44:59  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
23:44:59  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
23:44:59  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
23:44:59  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
23:44:59  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
23:44:59  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
23:44:59  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
23:44:59  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
23:44:59  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
23:44:59  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
23:44:59  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
23:44:59  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
23:44:59  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
23:44:59  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
23:44:59  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
23:44:59  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
23:44:59  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
23:44:59  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
23:44:59  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
23:44:59  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
23:44:59  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
23:44:59  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
23:44:59  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
23:44:59  43  ,hh  att32
23:44:59  44  ,d   att33
23:44:59  45  ,w   att34
23:44:59  46  ,mpm att35
23:44:59  47  ,mph att36
23:44:59  48  ,trend att37
23:44:59  49  FROM svm6142
23:44:59  50  ORDER BY ydate
23:44:59  51  /

Table created.

Elapsed: 00:00:04.76
23:45:04 SQL> 
23:45:04 SQL> -- rpt
23:45:04 SQL> 
23:45:04 SQL> SELECT
23:45:04   2  pair
23:45:04   3  ,trend
23:45:04   4  ,gatt
23:45:04   5  ,COUNT(pair)
23:45:04   6  ,AVG(g6)
23:45:04   7  FROM svm6162
23:45:04   8  GROUP BY pair,trend,gatt
23:45:04   9  ORDER BY pair,trend,gatt
23:45:04  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4020 -.22856216
ajp_usd 	-1 up	      5117 .220792393
ajp_usd 	-1		30
ajp_usd 	 1 nup	      5195 -.19924146
ajp_usd 	 1 up	      4845 .205041275
ajp_usd 	 1		42

6 rows selected.

Elapsed: 00:00:00.03
23:45:04 SQL> 
23:45:04 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
23:45:04 SQL> CREATE TABLE modsrc COMPRESS AS
23:45:04   2  SELECT
23:45:04   3  pair
23:45:04   4  ,ydate
23:45:04   5  ,prdate
23:45:04   6  ,trend
23:45:04   7  ,g6
23:45:04   8  ,gatt
23:45:04   9  ,gattn
23:45:04  10  FROM svm6162
23:45:04  11  /

Table created.

Elapsed: 00:00:00.08
23:45:04 SQL> 
23:45:04 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
23:45:04 SQL> 
23:45:04 SQL> DROP   TABLE ajp_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
23:45:04 SQL> CREATE TABLE ajp_ms610 COMPRESS AS
23:45:04   2  SELECT
23:45:04   3  ydate
23:45:04   4  ,trend ajp_trend
23:45:04   5  ,g6    ajp_g6
23:45:04   6  ,gatt  ajp_gatt
23:45:04   7  ,gattn ajp_gattn
23:45:04   8  FROM modsrc
23:45:04   9  /

Table created.

Elapsed: 00:00:00.10
23:45:04 SQL> 
23:45:04 SQL> ANALYZE TABLE ajp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
23:45:05 SQL> 
23:45:05 SQL> -- I need a copy of the attributes:
23:45:05 SQL> 
23:45:05 SQL> 
23:45:05 SQL> DROP   TABLE ajp_att;

Table dropped.

Elapsed: 00:00:00.07
23:45:05 SQL> CREATE TABLE ajp_att COMPRESS AS
23:45:05   2  SELECT
23:45:05   3  ydate
23:45:05   4  ,att00 ajp_att00
23:45:05   5  ,att01 ajp_att01
23:45:05   6  ,att02 ajp_att02
23:45:05   7  ,att03 ajp_att03
23:45:05   8  ,att04 ajp_att04
23:45:05   9  ,att05 ajp_att05
23:45:05  10  ,att06 ajp_att06
23:45:05  11  ,att07 ajp_att07
23:45:05  12  ,att08 ajp_att08
23:45:05  13  ,att09 ajp_att09
23:45:05  14  ,att10 ajp_att10
23:45:05  15  ,att11 ajp_att11
23:45:05  16  ,att12 ajp_att12
23:45:05  17  ,att13 ajp_att13
23:45:05  18  ,att14 ajp_att14
23:45:05  19  ,att15 ajp_att15
23:45:05  20  ,att16 ajp_att16
23:45:05  21  ,att17 ajp_att17
23:45:05  22  ,att18 ajp_att18
23:45:05  23  ,att19 ajp_att19
23:45:05  24  ,att20 ajp_att20
23:45:05  25  ,att21 ajp_att21
23:45:05  26  ,att22 ajp_att22
23:45:05  27  ,att23 ajp_att23
23:45:05  28  ,att24 ajp_att24
23:45:05  29  ,att25 ajp_att25
23:45:05  30  ,att26 ajp_att26
23:45:05  31  ,att27 ajp_att27
23:45:05  32  ,att28 ajp_att28
23:45:05  33  ,att29 ajp_att29
23:45:05  34  ,att30 ajp_att30
23:45:05  35  ,att31 ajp_att31
23:45:05  36  ,att32 ajp_att32
23:45:05  37  ,att33 ajp_att33
23:45:05  38  ,att34 ajp_att34
23:45:05  39  ,att35 ajp_att35
23:45:05  40  ,att36 ajp_att36
23:45:05  41  ,att37 ajp_att37
23:45:05  42  FROM svm6162
23:45:05  43  /

Table created.

Elapsed: 00:00:00.17
23:45:05 SQL> 
23:45:05 SQL> ANALYZE TABLE ajp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
23:45:05 SQL> 
23:45:05 SQL> -- rpt
23:45:05 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19248

Elapsed: 00:00:00.75
23:45:06 SQL> SELECT COUNT(*)FROM ajp_att;

  COUNT(*)
----------
     19249

Elapsed: 00:00:00.01
23:45:06 SQL> 
23:45:06 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
