
SQL*Plus: Release 11.2.0.1.0 Production on Thu Jan 6 22:33:41 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

22:33:41 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
22:33:41 SQL> 22:33:41 SQL> --
22:33:41 SQL> -- eur610.sql
22:33:41 SQL> --
22:33:41 SQL> 
22:33:41 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:33:41 SQL> 
22:33:41 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.02
22:33:41 SQL> 
22:33:41 SQL> -- I created di5min here:
22:33:41 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:33:41 SQL> 
22:33:41 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:33:41   2  SELECT
22:33:41   3  pair
22:33:41   4  ,ydate
22:33:41   5  ,prdate
22:33:41   6  ,rownum rnum -- acts as t in my time-series
22:33:41   7  ,clse
22:33:41   8  -- Derive a bunch of attributes from clse, the latest price:
22:33:41   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:33:41  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:33:41  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:33:41  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:33:41  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:33:41  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:33:41  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:33:41  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:33:41  17  --
22:33:41  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:33:41  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:33:41  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:33:41  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:33:41  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:33:41  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:33:41  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:33:41  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:33:41  26  --
22:33:41  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:33:41  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:33:41  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:33:41  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:33:41  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:33:41  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:33:41  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:33:41  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:33:41  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:33:41  36  FROM di5min WHERE pair LIKE'%eur%'
22:33:41  37  AND ydate > sysdate - 95
22:33:41  38  ORDER BY ydate
22:33:41  39  /

View created.

Elapsed: 00:00:00.14
22:33:41 SQL> 
22:33:41 SQL> -- rpt
22:33:41 SQL> 
22:33:41 SQL> SELECT
22:33:41   2  pair
22:33:41   3  ,COUNT(pair)
22:33:41   4  ,MIN(clse),MAX(clse)
22:33:41   5  ,MIN(avg6),MAX(avg6)
22:33:41   6  ,MIN(ydate),MAX(ydate)
22:33:41   7  FROM svm6102
22:33:41   8  GROUP BY pair
22:33:41   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19811    1.29735	   1.4273 1.29875103 1.42436233 2010-10-03 22:35:01 2011-01-06 22:30:00

Elapsed: 00:00:00.94
22:33:42 SQL> 
22:33:42 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:33:42 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.03
22:33:42 SQL> CREATE TABLE svm6122 COMPRESS AS
22:33:42   2  SELECT
22:33:42   3  pair
22:33:42   4  ,ydate
22:33:42   5  ,prdate
22:33:42   6  ,clse
22:33:42   7  -- g6 is important. I want to predict g6:
22:33:42   8  ,ld6 - clse g6
22:33:42   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:33:42  10  -- I want more attributes from the ones I derived above:
22:33:42  11  -- clse relation to moving-min
22:33:42  12  ,clse-min4  cm4
22:33:42  13  ,clse-min6  cm6
22:33:42  14  ,clse-min8  cm8
22:33:42  15  ,clse-min10 cm10
22:33:42  16  ,clse-min12 cm12
22:33:42  17  ,clse-min14 cm14
22:33:42  18  ,clse-min16 cm16
22:33:42  19  ,clse-min18 cm18
22:33:42  20  -- clse relation to moving-avg
22:33:42  21  ,clse-avg4  ca4
22:33:42  22  ,clse-avg6  ca6
22:33:42  23  ,clse-avg8  ca8
22:33:42  24  ,clse-avg10 ca10
22:33:42  25  ,clse-avg12 ca12
22:33:42  26  ,clse-avg14 ca14
22:33:42  27  ,clse-avg16 ca16
22:33:42  28  ,clse-avg18 ca18
22:33:42  29  -- clse relation to moving-max
22:33:42  30  ,clse-max4  cx4
22:33:42  31  ,clse-max6  cx6
22:33:42  32  ,clse-max8  cx8
22:33:42  33  ,clse-max10 cx10
22:33:42  34  ,clse-max12 cx12
22:33:42  35  ,clse-max14 cx14
22:33:42  36  ,clse-max16 cx16
22:33:42  37  ,clse-max18 cx18
22:33:42  38  -- Derive more attributes.
22:33:42  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:33:42  40  -- But COVAR_POP is more stable:
22:33:42  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:33:42  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:33:42  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:33:42  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:33:42  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:33:42  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:33:42  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:33:42  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:33:42  49  -- Derive date related attributes:
22:33:42  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:33:42  51  ,0+TO_CHAR(ydate,'D')d
22:33:42  52  ,0+TO_CHAR(ydate,'W')w
22:33:42  53  -- mpm stands for minutes-past-midnight:
22:33:42  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:33:42  55  -- mph stands for minutes-past-hour:
22:33:42  56  ,0+TO_CHAR(ydate,'MI')mph
22:33:42  57  FROM svm6102
22:33:42  58  ORDER BY ydate
22:33:42  59  /

Table created.

Elapsed: 00:00:02.49
22:33:44 SQL> 
22:33:44 SQL> -- rpt
22:33:44 SQL> 
22:33:44 SQL> SELECT
22:33:44   2  pair
22:33:44   3  ,COUNT(pair)
22:33:44   4  ,MIN(clse),MAX(clse)
22:33:44   5  ,MIN(ydate),MAX(ydate)
22:33:44   6  FROM svm6122
22:33:44   7  GROUP BY pair
22:33:44   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19811    1.29735	   1.4273 2010-10-03 22:35:01 2011-01-06 22:30:00

Elapsed: 00:00:00.07
22:33:45 SQL> 
22:33:45 SQL> -- Prepare for derivation of NTILE based params:
22:33:45 SQL> 
22:33:45 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:01.53
22:33:46 SQL> CREATE TABLE svm6142 COMPRESS AS
22:33:46   2  SELECT
22:33:46   3  pair
22:33:46   4  ,ydate
22:33:46   5  ,prdate
22:33:46   6  ,clse
22:33:46   7  ,g6
22:33:46   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:33:46   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:33:46  10  ,CASE WHEN trend IS NULL THEN 1
22:33:46  11  	    WHEN trend =0      THEN 1
22:33:46  12  	    ELSE trend END trend
22:33:46  13  ,cm4
22:33:46  14  ,cm6
22:33:46  15  ,cm8
22:33:46  16  ,cm10
22:33:46  17  ,cm12
22:33:46  18  ,cm14
22:33:46  19  ,cm16
22:33:46  20  ,cm18
22:33:46  21  --
22:33:46  22  ,ca4
22:33:46  23  ,ca6
22:33:46  24  ,ca8
22:33:46  25  ,ca10
22:33:46  26  ,ca12
22:33:46  27  ,ca14
22:33:46  28  ,ca16
22:33:46  29  ,ca18
22:33:46  30  --
22:33:46  31  ,cx4
22:33:46  32  ,cx6
22:33:46  33  ,cx8
22:33:46  34  ,cx10
22:33:46  35  ,cx12
22:33:46  36  ,cx14
22:33:46  37  ,cx16
22:33:46  38  ,cx18
22:33:46  39  --
22:33:46  40  ,crr4
22:33:46  41  ,crr6
22:33:46  42  ,crr8
22:33:46  43  ,crr10
22:33:46  44  ,crr12
22:33:46  45  ,crr14
22:33:46  46  ,crr16
22:33:46  47  ,crr18
22:33:46  48  --
22:33:46  49  ,hh
22:33:46  50  ,d
22:33:46  51  ,w
22:33:46  52  ,mpm
22:33:46  53  ,mph
22:33:46  54  FROM svm6122
22:33:46  55  ORDER BY ydate
22:33:46  56  /

Table created.

Elapsed: 00:00:00.38
22:33:46 SQL> 
22:33:46 SQL> -- rpt
22:33:46 SQL> 
22:33:46 SQL> SELECT
22:33:46   2  pair
22:33:46   3  ,trend
22:33:46   4  ,gatt
22:33:46   5  ,COUNT(pair)
22:33:46   6  ,AVG(g6)
22:33:46   7  FROM svm6142
22:33:46   8  GROUP BY pair,trend,gatt
22:33:46   9  ORDER BY pair,trend,gatt
22:33:46  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6581 -.00317522
eur_usd 	-1 up	      3570 .004447223
eur_usd 	-1		72
eur_usd 	 1 nup	      5883 -.00325873
eur_usd 	 1 up	      3705 .005071238

Elapsed: 00:00:00.05
22:33:47 SQL> 
22:33:47 SQL> 
22:33:47 SQL> -- Derive NTILE based params:
22:33:47 SQL> 
22:33:47 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:01.78
22:33:48 SQL> CREATE TABLE svm6162 COMPRESS AS
22:33:48   2  SELECT
22:33:48   3  pair
22:33:48   4  ,ydate
22:33:48   5  ,prdate
22:33:48   6  ,clse
22:33:48   7  ,g6
22:33:48   8  ,gatt
22:33:48   9  ,gattn
22:33:48  10  ,trend
22:33:48  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:33:48  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:33:48  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:33:48  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:33:48  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:33:48  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:33:48  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:33:48  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:33:48  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:33:48  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:33:48  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:33:48  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:33:48  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:33:48  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:33:48  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:33:48  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:33:48  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:33:48  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:33:48  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:33:48  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:33:48  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:33:48  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:33:48  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:33:48  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:33:48  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:33:48  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:33:48  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:33:48  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:33:48  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:33:48  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:33:48  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:33:48  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:33:48  43  ,hh  att32
22:33:48  44  ,d   att33
22:33:48  45  ,w   att34
22:33:48  46  ,mpm att35
22:33:48  47  ,mph att36
22:33:48  48  ,trend att37
22:33:48  49  FROM svm6142
22:33:48  50  ORDER BY ydate
22:33:48  51  /

Table created.

Elapsed: 00:00:04.78
22:33:53 SQL> 
22:33:53 SQL> -- rpt
22:33:53 SQL> 
22:33:53 SQL> SELECT
22:33:53   2  pair
22:33:53   3  ,trend
22:33:53   4  ,gatt
22:33:53   5  ,COUNT(pair)
22:33:53   6  ,AVG(g6)
22:33:53   7  FROM svm6162
22:33:53   8  GROUP BY pair,trend,gatt
22:33:53   9  ORDER BY pair,trend,gatt
22:33:53  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6581 -.00317522
eur_usd 	-1 up	      3570 .004447223
eur_usd 	-1		72
eur_usd 	 1 nup	      5883 -.00325873
eur_usd 	 1 up	      3705 .005071238

Elapsed: 00:00:00.04
22:33:53 SQL> 
22:33:53 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
22:33:53 SQL> CREATE TABLE modsrc COMPRESS AS
22:33:53   2  SELECT
22:33:53   3  pair
22:33:53   4  ,ydate
22:33:53   5  ,prdate
22:33:53   6  ,trend
22:33:53   7  ,g6
22:33:53   8  ,gatt
22:33:53   9  ,gattn
22:33:53  10  FROM svm6162
22:33:53  11  /

Table created.

Elapsed: 00:00:00.10
22:33:53 SQL> 
22:33:53 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.25
22:33:54 SQL> 
22:33:54 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.12
22:33:54 SQL> CREATE TABLE eur_ms610 COMPRESS AS
22:33:54   2  SELECT
22:33:54   3  ydate
22:33:54   4  ,trend eur_trend
22:33:54   5  ,g6    eur_g6
22:33:54   6  ,gatt  eur_gatt
22:33:54   7  ,gattn eur_gattn
22:33:54   8  FROM modsrc
22:33:54   9  /

Table created.

Elapsed: 00:00:00.07
22:33:54 SQL> 
22:33:54 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
22:33:54 SQL> 
22:33:54 SQL> -- I need a copy of the attributes:
22:33:54 SQL> 
22:33:54 SQL> 
22:33:54 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.11
22:33:54 SQL> CREATE TABLE eur_att COMPRESS AS
22:33:54   2  SELECT
22:33:54   3  ydate
22:33:54   4  ,att00 eur_att00
22:33:54   5  ,att01 eur_att01
22:33:54   6  ,att02 eur_att02
22:33:54   7  ,att03 eur_att03
22:33:54   8  ,att04 eur_att04
22:33:54   9  ,att05 eur_att05
22:33:54  10  ,att06 eur_att06
22:33:54  11  ,att07 eur_att07
22:33:54  12  ,att08 eur_att08
22:33:54  13  ,att09 eur_att09
22:33:54  14  ,att10 eur_att10
22:33:54  15  ,att11 eur_att11
22:33:54  16  ,att12 eur_att12
22:33:54  17  ,att13 eur_att13
22:33:54  18  ,att14 eur_att14
22:33:54  19  ,att15 eur_att15
22:33:54  20  ,att16 eur_att16
22:33:54  21  ,att17 eur_att17
22:33:54  22  ,att18 eur_att18
22:33:54  23  ,att19 eur_att19
22:33:54  24  ,att20 eur_att20
22:33:54  25  ,att21 eur_att21
22:33:54  26  ,att22 eur_att22
22:33:54  27  ,att23 eur_att23
22:33:54  28  ,att24 eur_att24
22:33:54  29  ,att25 eur_att25
22:33:54  30  ,att26 eur_att26
22:33:54  31  ,att27 eur_att27
22:33:54  32  ,att28 eur_att28
22:33:54  33  ,att29 eur_att29
22:33:54  34  ,att30 eur_att30
22:33:54  35  ,att31 eur_att31
22:33:54  36  ,att32 eur_att32
22:33:54  37  ,att33 eur_att33
22:33:54  38  ,att34 eur_att34
22:33:54  39  ,att35 eur_att35
22:33:54  40  ,att36 eur_att36
22:33:54  41  ,att37 eur_att37
22:33:54  42  FROM svm6162
22:33:54  43  /

Table created.

Elapsed: 00:00:00.17
22:33:54 SQL> 
22:33:54 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.49
22:33:55 SQL> 
22:33:55 SQL> -- rpt
22:33:55 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19811

Elapsed: 00:00:00.92
22:33:56 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19811

Elapsed: 00:00:00.00
22:33:56 SQL> 
22:33:56 SQL> --
22:33:56 SQL> -- aud610.sql
22:33:56 SQL> --
22:33:56 SQL> 
22:33:56 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:33:56 SQL> 
22:33:56 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.52
22:33:56 SQL> 
22:33:56 SQL> -- I created di5min here:
22:33:56 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:33:56 SQL> 
22:33:56 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:33:56   2  SELECT
22:33:56   3  pair
22:33:56   4  ,ydate
22:33:56   5  ,prdate
22:33:56   6  ,rownum rnum -- acts as t in my time-series
22:33:56   7  ,clse
22:33:56   8  -- Derive a bunch of attributes from clse, the latest price:
22:33:56   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:33:56  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:33:56  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:33:56  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:33:56  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:33:56  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:33:56  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:33:56  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:33:56  17  --
22:33:56  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:33:56  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:33:56  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:33:56  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:33:56  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:33:56  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:33:56  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:33:56  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:33:56  26  --
22:33:56  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:33:56  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:33:56  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:33:56  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:33:56  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:33:56  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:33:56  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:33:56  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:33:56  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:33:56  36  FROM di5min WHERE pair LIKE'%aud%'
22:33:56  37  AND ydate > sysdate - 95
22:33:56  38  ORDER BY ydate
22:33:56  39  /

View created.

Elapsed: 00:00:00.05
22:33:56 SQL> 
22:33:56 SQL> -- rpt
22:33:56 SQL> 
22:33:56 SQL> SELECT
22:33:56   2  pair
22:33:56   3  ,COUNT(pair)
22:33:56   4  ,MIN(clse),MAX(clse)
22:33:56   5  ,MIN(avg6),MAX(avg6)
22:33:56   6  ,MIN(ydate),MAX(ydate)
22:33:56   7  FROM svm6102
22:33:56   8  GROUP BY pair
22:33:56   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19808	.95405	  1.02495 .957141438 1.02284247 2010-10-03 22:35:01 2011-01-06 22:30:00

Elapsed: 00:00:00.91
22:33:57 SQL> 
22:33:57 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:33:57 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.25
22:33:57 SQL> CREATE TABLE svm6122 COMPRESS AS
22:33:57   2  SELECT
22:33:57   3  pair
22:33:57   4  ,ydate
22:33:57   5  ,prdate
22:33:57   6  ,clse
22:33:57   7  -- g6 is important. I want to predict g6:
22:33:57   8  ,ld6 - clse g6
22:33:57   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:33:57  10  -- I want more attributes from the ones I derived above:
22:33:57  11  -- clse relation to moving-min
22:33:57  12  ,clse-min4  cm4
22:33:57  13  ,clse-min6  cm6
22:33:57  14  ,clse-min8  cm8
22:33:57  15  ,clse-min10 cm10
22:33:57  16  ,clse-min12 cm12
22:33:57  17  ,clse-min14 cm14
22:33:57  18  ,clse-min16 cm16
22:33:57  19  ,clse-min18 cm18
22:33:57  20  -- clse relation to moving-avg
22:33:57  21  ,clse-avg4  ca4
22:33:57  22  ,clse-avg6  ca6
22:33:57  23  ,clse-avg8  ca8
22:33:57  24  ,clse-avg10 ca10
22:33:57  25  ,clse-avg12 ca12
22:33:57  26  ,clse-avg14 ca14
22:33:57  27  ,clse-avg16 ca16
22:33:57  28  ,clse-avg18 ca18
22:33:57  29  -- clse relation to moving-max
22:33:57  30  ,clse-max4  cx4
22:33:57  31  ,clse-max6  cx6
22:33:57  32  ,clse-max8  cx8
22:33:57  33  ,clse-max10 cx10
22:33:57  34  ,clse-max12 cx12
22:33:57  35  ,clse-max14 cx14
22:33:57  36  ,clse-max16 cx16
22:33:57  37  ,clse-max18 cx18
22:33:57  38  -- Derive more attributes.
22:33:57  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:33:57  40  -- But COVAR_POP is more stable:
22:33:57  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:33:57  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:33:57  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:33:57  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:33:57  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:33:57  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:33:57  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:33:57  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:33:57  49  -- Derive date related attributes:
22:33:57  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:33:57  51  ,0+TO_CHAR(ydate,'D')d
22:33:57  52  ,0+TO_CHAR(ydate,'W')w
22:33:57  53  -- mpm stands for minutes-past-midnight:
22:33:57  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:33:57  55  -- mph stands for minutes-past-hour:
22:33:57  56  ,0+TO_CHAR(ydate,'MI')mph
22:33:57  57  FROM svm6102
22:33:57  58  ORDER BY ydate
22:33:57  59  /

Table created.

Elapsed: 00:00:02.10
22:34:00 SQL> 
22:34:00 SQL> -- rpt
22:34:00 SQL> 
22:34:00 SQL> SELECT
22:34:00   2  pair
22:34:00   3  ,COUNT(pair)
22:34:00   4  ,MIN(clse),MAX(clse)
22:34:00   5  ,MIN(ydate),MAX(ydate)
22:34:00   6  FROM svm6122
22:34:00   7  GROUP BY pair
22:34:00   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19808	.95405	  1.02495 2010-10-03 22:35:01 2011-01-06 22:30:00

Elapsed: 00:00:00.05
22:34:00 SQL> 
22:34:00 SQL> -- Prepare for derivation of NTILE based params:
22:34:00 SQL> 
22:34:00 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.22
22:34:00 SQL> CREATE TABLE svm6142 COMPRESS AS
22:34:00   2  SELECT
22:34:00   3  pair
22:34:00   4  ,ydate
22:34:00   5  ,prdate
22:34:00   6  ,clse
22:34:00   7  ,g6
22:34:00   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:34:00   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:34:00  10  ,CASE WHEN trend IS NULL THEN 1
22:34:00  11  	    WHEN trend =0      THEN 1
22:34:00  12  	    ELSE trend END trend
22:34:00  13  ,cm4
22:34:00  14  ,cm6
22:34:00  15  ,cm8
22:34:00  16  ,cm10
22:34:00  17  ,cm12
22:34:00  18  ,cm14
22:34:00  19  ,cm16
22:34:00  20  ,cm18
22:34:00  21  --
22:34:00  22  ,ca4
22:34:00  23  ,ca6
22:34:00  24  ,ca8
22:34:00  25  ,ca10
22:34:00  26  ,ca12
22:34:00  27  ,ca14
22:34:00  28  ,ca16
22:34:00  29  ,ca18
22:34:00  30  --
22:34:00  31  ,cx4
22:34:00  32  ,cx6
22:34:00  33  ,cx8
22:34:00  34  ,cx10
22:34:00  35  ,cx12
22:34:00  36  ,cx14
22:34:00  37  ,cx16
22:34:00  38  ,cx18
22:34:00  39  --
22:34:00  40  ,crr4
22:34:00  41  ,crr6
22:34:00  42  ,crr8
22:34:00  43  ,crr10
22:34:00  44  ,crr12
22:34:00  45  ,crr14
22:34:00  46  ,crr16
22:34:00  47  ,crr18
22:34:00  48  --
22:34:00  49  ,hh
22:34:00  50  ,d
22:34:00  51  ,w
22:34:00  52  ,mpm
22:34:00  53  ,mph
22:34:00  54  FROM svm6122
22:34:00  55  ORDER BY ydate
22:34:00  56  /

Table created.

Elapsed: 00:00:00.39
22:34:00 SQL> 
22:34:00 SQL> -- rpt
22:34:00 SQL> 
22:34:00 SQL> SELECT
22:34:00   2  pair
22:34:00   3  ,trend
22:34:00   4  ,gatt
22:34:00   5  ,COUNT(pair)
22:34:00   6  ,AVG(g6)
22:34:00   7  FROM svm6142
22:34:00   8  GROUP BY pair,trend,gatt
22:34:00   9  ORDER BY pair,trend,gatt
22:34:00  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5715 -.00214451
aud_usd 	-1 up	      3701 .003745866
aud_usd 	-1		72
aud_usd 	 1 nup	      6727 -.00213818
aud_usd 	 1 up	      3593 .004054752

Elapsed: 00:00:00.03
22:34:00 SQL> 
22:34:00 SQL> 
22:34:00 SQL> -- Derive NTILE based params:
22:34:00 SQL> 
22:34:00 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
22:34:00 SQL> CREATE TABLE svm6162 COMPRESS AS
22:34:00   2  SELECT
22:34:00   3  pair
22:34:00   4  ,ydate
22:34:00   5  ,prdate
22:34:00   6  ,clse
22:34:00   7  ,g6
22:34:00   8  ,gatt
22:34:00   9  ,gattn
22:34:00  10  ,trend
22:34:00  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:34:00  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:34:00  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:34:00  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:34:00  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:34:00  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:34:00  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:34:00  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:34:00  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:34:00  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:34:00  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:34:00  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:34:00  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:34:00  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:34:00  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:34:00  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:34:00  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:34:00  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:34:00  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:34:00  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:34:00  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:34:00  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:34:00  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:34:00  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:34:00  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:34:00  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:34:00  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:34:00  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:34:00  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:34:00  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:34:00  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:34:00  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:34:00  43  ,hh  att32
22:34:00  44  ,d   att33
22:34:00  45  ,w   att34
22:34:00  46  ,mpm att35
22:34:00  47  ,mph att36
22:34:00  48  ,trend att37
22:34:00  49  FROM svm6142
22:34:00  50  ORDER BY ydate
22:34:00  51  /

Table created.

Elapsed: 00:00:04.94
22:34:05 SQL> 
22:34:05 SQL> -- rpt
22:34:05 SQL> 
22:34:05 SQL> SELECT
22:34:05   2  pair
22:34:05   3  ,trend
22:34:05   4  ,gatt
22:34:05   5  ,COUNT(pair)
22:34:05   6  ,AVG(g6)
22:34:05   7  FROM svm6162
22:34:05   8  GROUP BY pair,trend,gatt
22:34:05   9  ORDER BY pair,trend,gatt
22:34:05  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5715 -.00214451
aud_usd 	-1 up	      3701 .003745866
aud_usd 	-1		72
aud_usd 	 1 nup	      6727 -.00213818
aud_usd 	 1 up	      3593 .004054752

Elapsed: 00:00:00.03
22:34:05 SQL> 
22:34:05 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
22:34:05 SQL> CREATE TABLE modsrc COMPRESS AS
22:34:05   2  SELECT
22:34:05   3  pair
22:34:05   4  ,ydate
22:34:05   5  ,prdate
22:34:05   6  ,trend
22:34:05   7  ,g6
22:34:05   8  ,gatt
22:34:05   9  ,gattn
22:34:05  10  FROM svm6162
22:34:05  11  /

Table created.

Elapsed: 00:00:00.08
22:34:06 SQL> 
22:34:06 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
22:34:06 SQL> 
22:34:06 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
22:34:06 SQL> CREATE TABLE aud_ms610 COMPRESS AS
22:34:06   2  SELECT
22:34:06   3  ydate
22:34:06   4  ,trend aud_trend
22:34:06   5  ,g6    aud_g6
22:34:06   6  ,gatt  aud_gatt
22:34:06   7  ,gattn aud_gattn
22:34:06   8  FROM modsrc
22:34:06   9  /

Table created.

Elapsed: 00:00:00.07
22:34:06 SQL> 
22:34:06 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
22:34:06 SQL> 
22:34:06 SQL> -- I need a copy of the attributes:
22:34:06 SQL> 
22:34:06 SQL> 
22:34:06 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.05
22:34:06 SQL> CREATE TABLE aud_att COMPRESS AS
22:34:06   2  SELECT
22:34:06   3  ydate
22:34:06   4  ,att00 aud_att00
22:34:06   5  ,att01 aud_att01
22:34:06   6  ,att02 aud_att02
22:34:06   7  ,att03 aud_att03
22:34:06   8  ,att04 aud_att04
22:34:06   9  ,att05 aud_att05
22:34:06  10  ,att06 aud_att06
22:34:06  11  ,att07 aud_att07
22:34:06  12  ,att08 aud_att08
22:34:06  13  ,att09 aud_att09
22:34:06  14  ,att10 aud_att10
22:34:06  15  ,att11 aud_att11
22:34:06  16  ,att12 aud_att12
22:34:06  17  ,att13 aud_att13
22:34:06  18  ,att14 aud_att14
22:34:06  19  ,att15 aud_att15
22:34:06  20  ,att16 aud_att16
22:34:06  21  ,att17 aud_att17
22:34:06  22  ,att18 aud_att18
22:34:06  23  ,att19 aud_att19
22:34:06  24  ,att20 aud_att20
22:34:06  25  ,att21 aud_att21
22:34:06  26  ,att22 aud_att22
22:34:06  27  ,att23 aud_att23
22:34:06  28  ,att24 aud_att24
22:34:06  29  ,att25 aud_att25
22:34:06  30  ,att26 aud_att26
22:34:06  31  ,att27 aud_att27
22:34:06  32  ,att28 aud_att28
22:34:06  33  ,att29 aud_att29
22:34:06  34  ,att30 aud_att30
22:34:06  35  ,att31 aud_att31
22:34:06  36  ,att32 aud_att32
22:34:06  37  ,att33 aud_att33
22:34:06  38  ,att34 aud_att34
22:34:06  39  ,att35 aud_att35
22:34:06  40  ,att36 aud_att36
22:34:06  41  ,att37 aud_att37
22:34:06  42  FROM svm6162
22:34:06  43  /

Table created.

Elapsed: 00:00:00.18
22:34:06 SQL> 
22:34:06 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
22:34:07 SQL> 
22:34:07 SQL> -- rpt
22:34:07 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.88
22:34:08 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.01
22:34:08 SQL> 
22:34:08 SQL> --
22:34:08 SQL> -- gbp610.sql
22:34:08 SQL> --
22:34:08 SQL> 
22:34:08 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:34:08 SQL> 
22:34:08 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.44
22:34:08 SQL> 
22:34:08 SQL> -- I created di5min here:
22:34:08 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:34:08 SQL> 
22:34:08 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:34:08   2  SELECT
22:34:08   3  pair
22:34:08   4  ,ydate
22:34:08   5  ,prdate
22:34:08   6  ,rownum rnum -- acts as t in my time-series
22:34:08   7  ,clse
22:34:08   8  -- Derive a bunch of attributes from clse, the latest price:
22:34:08   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:34:08  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:34:08  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:34:08  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:34:08  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:34:08  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:34:08  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:34:08  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:34:08  17  --
22:34:08  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:34:08  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:34:08  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:34:08  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:34:08  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:34:08  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:34:08  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:34:08  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:34:08  26  --
22:34:08  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:34:08  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:34:08  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:34:08  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:34:08  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:34:08  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:34:08  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:34:08  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:34:08  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:34:08  36  FROM di5min WHERE pair LIKE'%gbp%'
22:34:08  37  AND ydate > sysdate - 95
22:34:08  38  ORDER BY ydate
22:34:08  39  /

View created.

Elapsed: 00:00:00.04
22:34:08 SQL> 
22:34:08 SQL> -- rpt
22:34:08 SQL> 
22:34:08 SQL> SELECT
22:34:08   2  pair
22:34:08   3  ,COUNT(pair)
22:34:08   4  ,MIN(clse),MAX(clse)
22:34:08   5  ,MIN(avg6),MAX(avg6)
22:34:08   6  ,MIN(ydate),MAX(ydate)
22:34:08   7  FROM svm6102
22:34:08   8  GROUP BY pair
22:34:08   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19810   1.535325	   1.6295 1.53696747 1.62716986 2010-10-03 22:35:01 2011-01-06 22:30:00

Elapsed: 00:00:00.90
22:34:09 SQL> 
22:34:09 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:34:09 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.38
22:34:09 SQL> CREATE TABLE svm6122 COMPRESS AS
22:34:09   2  SELECT
22:34:09   3  pair
22:34:09   4  ,ydate
22:34:09   5  ,prdate
22:34:09   6  ,clse
22:34:09   7  -- g6 is important. I want to predict g6:
22:34:09   8  ,ld6 - clse g6
22:34:09   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:34:09  10  -- I want more attributes from the ones I derived above:
22:34:09  11  -- clse relation to moving-min
22:34:09  12  ,clse-min4  cm4
22:34:09  13  ,clse-min6  cm6
22:34:09  14  ,clse-min8  cm8
22:34:09  15  ,clse-min10 cm10
22:34:09  16  ,clse-min12 cm12
22:34:09  17  ,clse-min14 cm14
22:34:09  18  ,clse-min16 cm16
22:34:09  19  ,clse-min18 cm18
22:34:09  20  -- clse relation to moving-avg
22:34:09  21  ,clse-avg4  ca4
22:34:09  22  ,clse-avg6  ca6
22:34:09  23  ,clse-avg8  ca8
22:34:09  24  ,clse-avg10 ca10
22:34:09  25  ,clse-avg12 ca12
22:34:09  26  ,clse-avg14 ca14
22:34:09  27  ,clse-avg16 ca16
22:34:09  28  ,clse-avg18 ca18
22:34:09  29  -- clse relation to moving-max
22:34:09  30  ,clse-max4  cx4
22:34:09  31  ,clse-max6  cx6
22:34:09  32  ,clse-max8  cx8
22:34:09  33  ,clse-max10 cx10
22:34:09  34  ,clse-max12 cx12
22:34:09  35  ,clse-max14 cx14
22:34:09  36  ,clse-max16 cx16
22:34:09  37  ,clse-max18 cx18
22:34:09  38  -- Derive more attributes.
22:34:09  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:34:09  40  -- But COVAR_POP is more stable:
22:34:09  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:34:09  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:34:09  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:34:09  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:34:09  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:34:09  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:34:09  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:34:09  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:34:09  49  -- Derive date related attributes:
22:34:09  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:34:09  51  ,0+TO_CHAR(ydate,'D')d
22:34:09  52  ,0+TO_CHAR(ydate,'W')w
22:34:09  53  -- mpm stands for minutes-past-midnight:
22:34:09  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:34:09  55  -- mph stands for minutes-past-hour:
22:34:09  56  ,0+TO_CHAR(ydate,'MI')mph
22:34:09  57  FROM svm6102
22:34:09  58  ORDER BY ydate
22:34:09  59  /

Table created.

Elapsed: 00:00:02.05
22:34:11 SQL> 
22:34:11 SQL> -- rpt
22:34:11 SQL> 
22:34:11 SQL> SELECT
22:34:11   2  pair
22:34:11   3  ,COUNT(pair)
22:34:11   4  ,MIN(clse),MAX(clse)
22:34:11   5  ,MIN(ydate),MAX(ydate)
22:34:11   6  FROM svm6122
22:34:11   7  GROUP BY pair
22:34:11   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19810   1.535325	   1.6295 2010-10-03 22:35:01 2011-01-06 22:30:00

Elapsed: 00:00:00.04
22:34:11 SQL> 
22:34:11 SQL> -- Prepare for derivation of NTILE based params:
22:34:11 SQL> 
22:34:11 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.24
22:34:12 SQL> CREATE TABLE svm6142 COMPRESS AS
22:34:12   2  SELECT
22:34:12   3  pair
22:34:12   4  ,ydate
22:34:12   5  ,prdate
22:34:12   6  ,clse
22:34:12   7  ,g6
22:34:12   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:34:12   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:34:12  10  ,CASE WHEN trend IS NULL THEN 1
22:34:12  11  	    WHEN trend =0      THEN 1
22:34:12  12  	    ELSE trend END trend
22:34:12  13  ,cm4
22:34:12  14  ,cm6
22:34:12  15  ,cm8
22:34:12  16  ,cm10
22:34:12  17  ,cm12
22:34:12  18  ,cm14
22:34:12  19  ,cm16
22:34:12  20  ,cm18
22:34:12  21  --
22:34:12  22  ,ca4
22:34:12  23  ,ca6
22:34:12  24  ,ca8
22:34:12  25  ,ca10
22:34:12  26  ,ca12
22:34:12  27  ,ca14
22:34:12  28  ,ca16
22:34:12  29  ,ca18
22:34:12  30  --
22:34:12  31  ,cx4
22:34:12  32  ,cx6
22:34:12  33  ,cx8
22:34:12  34  ,cx10
22:34:12  35  ,cx12
22:34:12  36  ,cx14
22:34:12  37  ,cx16
22:34:12  38  ,cx18
22:34:12  39  --
22:34:12  40  ,crr4
22:34:12  41  ,crr6
22:34:12  42  ,crr8
22:34:12  43  ,crr10
22:34:12  44  ,crr12
22:34:12  45  ,crr14
22:34:12  46  ,crr16
22:34:12  47  ,crr18
22:34:12  48  --
22:34:12  49  ,hh
22:34:12  50  ,d
22:34:12  51  ,w
22:34:12  52  ,mpm
22:34:12  53  ,mph
22:34:12  54  FROM svm6122
22:34:12  55  ORDER BY ydate
22:34:12  56  /

Table created.

Elapsed: 00:00:00.36
22:34:12 SQL> 
22:34:12 SQL> -- rpt
22:34:12 SQL> 
22:34:12 SQL> SELECT
22:34:12   2  pair
22:34:12   3  ,trend
22:34:12   4  ,gatt
22:34:12   5  ,COUNT(pair)
22:34:12   6  ,AVG(g6)
22:34:12   7  FROM svm6142
22:34:12   8  GROUP BY pair,trend,gatt
22:34:12   9  ORDER BY pair,trend,gatt
22:34:12  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6424 -.00263029
gbp_usd 	-1 up	      3579 .004338911
gbp_usd 	-1		51
gbp_usd 	 1 nup	      6279 -.00265217
gbp_usd 	 1 up	      3456 .004524374
gbp_usd 	 1		21

6 rows selected.

Elapsed: 00:00:00.04
22:34:12 SQL> 
22:34:12 SQL> 
22:34:12 SQL> -- Derive NTILE based params:
22:34:12 SQL> 
22:34:12 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
22:34:12 SQL> CREATE TABLE svm6162 COMPRESS AS
22:34:12   2  SELECT
22:34:12   3  pair
22:34:12   4  ,ydate
22:34:12   5  ,prdate
22:34:12   6  ,clse
22:34:12   7  ,g6
22:34:12   8  ,gatt
22:34:12   9  ,gattn
22:34:12  10  ,trend
22:34:12  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:34:12  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:34:12  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:34:12  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:34:12  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:34:12  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:34:12  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:34:12  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:34:12  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:34:12  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:34:12  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:34:12  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:34:12  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:34:12  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:34:12  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:34:12  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:34:12  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:34:12  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:34:12  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:34:12  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:34:12  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:34:12  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:34:12  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:34:12  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:34:12  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:34:12  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:34:12  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:34:12  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:34:12  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:34:12  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:34:12  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:34:12  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:34:12  43  ,hh  att32
22:34:12  44  ,d   att33
22:34:12  45  ,w   att34
22:34:12  46  ,mpm att35
22:34:12  47  ,mph att36
22:34:12  48  ,trend att37
22:34:12  49  FROM svm6142
22:34:12  50  ORDER BY ydate
22:34:12  51  /

Table created.

Elapsed: 00:00:04.78
22:34:17 SQL> 
22:34:17 SQL> -- rpt
22:34:17 SQL> 
22:34:17 SQL> SELECT
22:34:17   2  pair
22:34:17   3  ,trend
22:34:17   4  ,gatt
22:34:17   5  ,COUNT(pair)
22:34:17   6  ,AVG(g6)
22:34:17   7  FROM svm6162
22:34:17   8  GROUP BY pair,trend,gatt
22:34:17   9  ORDER BY pair,trend,gatt
22:34:17  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6424 -.00263029
gbp_usd 	-1 up	      3579 .004338911
gbp_usd 	-1		51
gbp_usd 	 1 nup	      6279 -.00265217
gbp_usd 	 1 up	      3456 .004524374
gbp_usd 	 1		21

6 rows selected.

Elapsed: 00:00:00.04
22:34:17 SQL> 
22:34:17 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.32
22:34:17 SQL> CREATE TABLE modsrc COMPRESS AS
22:34:17   2  SELECT
22:34:17   3  pair
22:34:17   4  ,ydate
22:34:17   5  ,prdate
22:34:17   6  ,trend
22:34:17   7  ,g6
22:34:17   8  ,gatt
22:34:17   9  ,gattn
22:34:17  10  FROM svm6162
22:34:17  11  /

Table created.

Elapsed: 00:00:00.08
22:34:18 SQL> 
22:34:18 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
22:34:18 SQL> 
22:34:18 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
22:34:18 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
22:34:18   2  SELECT
22:34:18   3  ydate
22:34:18   4  ,trend gbp_trend
22:34:18   5  ,g6    gbp_g6
22:34:18   6  ,gatt  gbp_gatt
22:34:18   7  ,gattn gbp_gattn
22:34:18   8  FROM modsrc
22:34:18   9  /

Table created.

Elapsed: 00:00:00.06
22:34:18 SQL> 
22:34:18 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
22:34:18 SQL> 
22:34:18 SQL> -- I need a copy of the attributes:
22:34:18 SQL> 
22:34:18 SQL> 
22:34:18 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.06
22:34:18 SQL> CREATE TABLE gbp_att COMPRESS AS
22:34:18   2  SELECT
22:34:18   3  ydate
22:34:18   4  ,att00 gbp_att00
22:34:18   5  ,att01 gbp_att01
22:34:18   6  ,att02 gbp_att02
22:34:18   7  ,att03 gbp_att03
22:34:18   8  ,att04 gbp_att04
22:34:18   9  ,att05 gbp_att05
22:34:18  10  ,att06 gbp_att06
22:34:18  11  ,att07 gbp_att07
22:34:18  12  ,att08 gbp_att08
22:34:18  13  ,att09 gbp_att09
22:34:18  14  ,att10 gbp_att10
22:34:18  15  ,att11 gbp_att11
22:34:18  16  ,att12 gbp_att12
22:34:18  17  ,att13 gbp_att13
22:34:18  18  ,att14 gbp_att14
22:34:18  19  ,att15 gbp_att15
22:34:18  20  ,att16 gbp_att16
22:34:18  21  ,att17 gbp_att17
22:34:18  22  ,att18 gbp_att18
22:34:18  23  ,att19 gbp_att19
22:34:18  24  ,att20 gbp_att20
22:34:18  25  ,att21 gbp_att21
22:34:18  26  ,att22 gbp_att22
22:34:18  27  ,att23 gbp_att23
22:34:18  28  ,att24 gbp_att24
22:34:18  29  ,att25 gbp_att25
22:34:18  30  ,att26 gbp_att26
22:34:18  31  ,att27 gbp_att27
22:34:18  32  ,att28 gbp_att28
22:34:18  33  ,att29 gbp_att29
22:34:18  34  ,att30 gbp_att30
22:34:18  35  ,att31 gbp_att31
22:34:18  36  ,att32 gbp_att32
22:34:18  37  ,att33 gbp_att33
22:34:18  38  ,att34 gbp_att34
22:34:18  39  ,att35 gbp_att35
22:34:18  40  ,att36 gbp_att36
22:34:18  41  ,att37 gbp_att37
22:34:18  42  FROM svm6162
22:34:18  43  /

Table created.

Elapsed: 00:00:00.20
22:34:18 SQL> 
22:34:18 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
22:34:19 SQL> 
22:34:19 SQL> -- rpt
22:34:19 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19810

Elapsed: 00:00:00.87
22:34:20 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19810

Elapsed: 00:00:00.00
22:34:20 SQL> 
22:34:20 SQL> --
22:34:20 SQL> -- jpy610.sql
22:34:20 SQL> --
22:34:20 SQL> 
22:34:20 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:34:20 SQL> 
22:34:20 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.53
22:34:20 SQL> 
22:34:20 SQL> -- I created di5min here:
22:34:20 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:34:20 SQL> 
22:34:20 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:34:20   2  SELECT
22:34:20   3  pair
22:34:20   4  ,ydate
22:34:20   5  ,prdate
22:34:20   6  ,rownum rnum -- acts as t in my time-series
22:34:20   7  ,clse
22:34:20   8  -- Derive a bunch of attributes from clse, the latest price:
22:34:20   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:34:20  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:34:20  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:34:20  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:34:20  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:34:20  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:34:20  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:34:20  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:34:20  17  --
22:34:20  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:34:20  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:34:20  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:34:20  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:34:20  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:34:20  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:34:20  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:34:20  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:34:20  26  --
22:34:20  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:34:20  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:34:20  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:34:20  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:34:20  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:34:20  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:34:20  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:34:20  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:34:20  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:34:20  36  FROM di5min WHERE pair LIKE'%jpy%'
22:34:20  37  AND ydate > sysdate - 95
22:34:20  38  ORDER BY ydate
22:34:20  39  /

View created.

Elapsed: 00:00:00.04
22:34:20 SQL> 
22:34:20 SQL> -- rpt
22:34:20 SQL> 
22:34:20 SQL> SELECT
22:34:20   2  pair
22:34:20   3  ,COUNT(pair)
22:34:20   4  ,MIN(clse),MAX(clse)
22:34:20   5  ,MIN(avg6),MAX(avg6)
22:34:20   6  ,MIN(ydate),MAX(ydate)
22:34:20   7  FROM svm6102
22:34:20   8  GROUP BY pair
22:34:20   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19809	 80.25	   84.485 80.3595205 84.3105479 2010-10-03 22:35:01 2011-01-06 22:30:00

Elapsed: 00:00:00.91
22:34:21 SQL> 
22:34:21 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:34:21 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.23
22:34:21 SQL> CREATE TABLE svm6122 COMPRESS AS
22:34:21   2  SELECT
22:34:21   3  pair
22:34:21   4  ,ydate
22:34:21   5  ,prdate
22:34:21   6  ,clse
22:34:21   7  -- g6 is important. I want to predict g6:
22:34:21   8  ,ld6 - clse g6
22:34:21   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:34:21  10  -- I want more attributes from the ones I derived above:
22:34:21  11  -- clse relation to moving-min
22:34:21  12  ,clse-min4  cm4
22:34:21  13  ,clse-min6  cm6
22:34:21  14  ,clse-min8  cm8
22:34:21  15  ,clse-min10 cm10
22:34:21  16  ,clse-min12 cm12
22:34:21  17  ,clse-min14 cm14
22:34:21  18  ,clse-min16 cm16
22:34:21  19  ,clse-min18 cm18
22:34:21  20  -- clse relation to moving-avg
22:34:21  21  ,clse-avg4  ca4
22:34:21  22  ,clse-avg6  ca6
22:34:21  23  ,clse-avg8  ca8
22:34:21  24  ,clse-avg10 ca10
22:34:21  25  ,clse-avg12 ca12
22:34:21  26  ,clse-avg14 ca14
22:34:21  27  ,clse-avg16 ca16
22:34:21  28  ,clse-avg18 ca18
22:34:21  29  -- clse relation to moving-max
22:34:21  30  ,clse-max4  cx4
22:34:21  31  ,clse-max6  cx6
22:34:21  32  ,clse-max8  cx8
22:34:21  33  ,clse-max10 cx10
22:34:21  34  ,clse-max12 cx12
22:34:21  35  ,clse-max14 cx14
22:34:21  36  ,clse-max16 cx16
22:34:21  37  ,clse-max18 cx18
22:34:21  38  -- Derive more attributes.
22:34:21  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:34:21  40  -- But COVAR_POP is more stable:
22:34:21  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:34:21  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:34:21  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:34:21  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:34:21  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:34:21  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:34:21  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:34:21  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:34:21  49  -- Derive date related attributes:
22:34:21  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:34:21  51  ,0+TO_CHAR(ydate,'D')d
22:34:21  52  ,0+TO_CHAR(ydate,'W')w
22:34:21  53  -- mpm stands for minutes-past-midnight:
22:34:21  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:34:21  55  -- mph stands for minutes-past-hour:
22:34:21  56  ,0+TO_CHAR(ydate,'MI')mph
22:34:21  57  FROM svm6102
22:34:21  58  ORDER BY ydate
22:34:21  59  /

Table created.

Elapsed: 00:00:02.19
22:34:24 SQL> 
22:34:24 SQL> -- rpt
22:34:24 SQL> 
22:34:24 SQL> SELECT
22:34:24   2  pair
22:34:24   3  ,COUNT(pair)
22:34:24   4  ,MIN(clse),MAX(clse)
22:34:24   5  ,MIN(ydate),MAX(ydate)
22:34:24   6  FROM svm6122
22:34:24   7  GROUP BY pair
22:34:24   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19809	 80.25	   84.485 2010-10-03 22:35:01 2011-01-06 22:30:00

Elapsed: 00:00:00.04
22:34:24 SQL> 
22:34:24 SQL> -- Prepare for derivation of NTILE based params:
22:34:24 SQL> 
22:34:24 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.29
22:34:24 SQL> CREATE TABLE svm6142 COMPRESS AS
22:34:24   2  SELECT
22:34:24   3  pair
22:34:24   4  ,ydate
22:34:24   5  ,prdate
22:34:24   6  ,clse
22:34:24   7  ,g6
22:34:24   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:34:24   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:34:24  10  ,CASE WHEN trend IS NULL THEN 1
22:34:24  11  	    WHEN trend =0      THEN 1
22:34:24  12  	    ELSE trend END trend
22:34:24  13  ,cm4
22:34:24  14  ,cm6
22:34:24  15  ,cm8
22:34:24  16  ,cm10
22:34:24  17  ,cm12
22:34:24  18  ,cm14
22:34:24  19  ,cm16
22:34:24  20  ,cm18
22:34:24  21  --
22:34:24  22  ,ca4
22:34:24  23  ,ca6
22:34:24  24  ,ca8
22:34:24  25  ,ca10
22:34:24  26  ,ca12
22:34:24  27  ,ca14
22:34:24  28  ,ca16
22:34:24  29  ,ca18
22:34:24  30  --
22:34:24  31  ,cx4
22:34:24  32  ,cx6
22:34:24  33  ,cx8
22:34:24  34  ,cx10
22:34:24  35  ,cx12
22:34:24  36  ,cx14
22:34:24  37  ,cx16
22:34:24  38  ,cx18
22:34:24  39  --
22:34:24  40  ,crr4
22:34:24  41  ,crr6
22:34:24  42  ,crr8
22:34:24  43  ,crr10
22:34:24  44  ,crr12
22:34:24  45  ,crr14
22:34:24  46  ,crr16
22:34:24  47  ,crr18
22:34:24  48  --
22:34:24  49  ,hh
22:34:24  50  ,d
22:34:24  51  ,w
22:34:24  52  ,mpm
22:34:24  53  ,mph
22:34:24  54  FROM svm6122
22:34:24  55  ORDER BY ydate
22:34:24  56  /

Table created.

Elapsed: 00:00:00.37
22:34:24 SQL> 
22:34:24 SQL> -- rpt
22:34:24 SQL> 
22:34:24 SQL> SELECT
22:34:24   2  pair
22:34:24   3  ,trend
22:34:24   4  ,gatt
22:34:24   5  ,COUNT(pair)
22:34:24   6  ,AVG(g6)
22:34:24   7  FROM svm6142
22:34:24   8  GROUP BY pair,trend,gatt
22:34:24   9  ORDER BY pair,trend,gatt
22:34:24  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5187 -.16544922
usd_jpy 	-1 up	      4909 .169479307
usd_jpy 	-1		 5
usd_jpy 	 1 nup	      5074  -.1550714
usd_jpy 	 1 up	      4567 .173890887
usd_jpy 	 1		67

6 rows selected.

Elapsed: 00:00:00.04
22:34:24 SQL> 
22:34:24 SQL> 
22:34:24 SQL> -- Derive NTILE based params:
22:34:24 SQL> 
22:34:24 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.21
22:34:24 SQL> CREATE TABLE svm6162 COMPRESS AS
22:34:24   2  SELECT
22:34:24   3  pair
22:34:24   4  ,ydate
22:34:24   5  ,prdate
22:34:24   6  ,clse
22:34:24   7  ,g6
22:34:24   8  ,gatt
22:34:24   9  ,gattn
22:34:24  10  ,trend
22:34:24  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:34:24  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:34:24  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:34:24  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:34:24  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:34:24  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:34:24  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:34:24  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:34:24  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:34:24  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:34:24  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:34:24  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:34:24  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:34:24  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:34:24  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:34:24  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:34:24  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:34:24  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:34:24  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:34:24  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:34:24  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:34:24  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:34:24  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:34:24  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:34:24  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:34:24  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:34:24  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:34:24  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:34:24  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:34:24  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:34:24  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:34:24  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:34:24  43  ,hh  att32
22:34:24  44  ,d   att33
22:34:24  45  ,w   att34
22:34:24  46  ,mpm att35
22:34:24  47  ,mph att36
22:34:24  48  ,trend att37
22:34:24  49  FROM svm6142
22:34:24  50  ORDER BY ydate
22:34:24  51  /

Table created.

Elapsed: 00:00:04.81
22:34:29 SQL> 
22:34:29 SQL> -- rpt
22:34:29 SQL> 
22:34:29 SQL> SELECT
22:34:29   2  pair
22:34:29   3  ,trend
22:34:29   4  ,gatt
22:34:29   5  ,COUNT(pair)
22:34:29   6  ,AVG(g6)
22:34:29   7  FROM svm6162
22:34:29   8  GROUP BY pair,trend,gatt
22:34:29   9  ORDER BY pair,trend,gatt
22:34:29  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5187 -.16544922
usd_jpy 	-1 up	      4909 .169479307
usd_jpy 	-1		 5
usd_jpy 	 1 nup	      5074  -.1550714
usd_jpy 	 1 up	      4567 .173890887
usd_jpy 	 1		67

6 rows selected.

Elapsed: 00:00:00.03
22:34:29 SQL> 
22:34:29 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.16
22:34:29 SQL> CREATE TABLE modsrc COMPRESS AS
22:34:29   2  SELECT
22:34:29   3  pair
22:34:29   4  ,ydate
22:34:29   5  ,prdate
22:34:29   6  ,trend
22:34:29   7  ,g6
22:34:29   8  ,gatt
22:34:29   9  ,gattn
22:34:29  10  FROM svm6162
22:34:29  11  /

Table created.

Elapsed: 00:00:00.10
22:34:30 SQL> 
22:34:30 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
22:34:30 SQL> 
22:34:30 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
22:34:30 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
22:34:30   2  SELECT
22:34:30   3  ydate
22:34:30   4  ,trend jpy_trend
22:34:30   5  ,g6    jpy_g6
22:34:30   6  ,gatt  jpy_gatt
22:34:30   7  ,gattn jpy_gattn
22:34:30   8  FROM modsrc
22:34:30   9  /

Table created.

Elapsed: 00:00:00.08
22:34:30 SQL> 
22:34:30 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
22:34:30 SQL> 
22:34:30 SQL> -- I need a copy of the attributes:
22:34:30 SQL> 
22:34:30 SQL> 
22:34:30 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.04
22:34:30 SQL> CREATE TABLE jpy_att COMPRESS AS
22:34:30   2  SELECT
22:34:30   3  ydate
22:34:30   4  ,att00 jpy_att00
22:34:30   5  ,att01 jpy_att01
22:34:30   6  ,att02 jpy_att02
22:34:30   7  ,att03 jpy_att03
22:34:30   8  ,att04 jpy_att04
22:34:30   9  ,att05 jpy_att05
22:34:30  10  ,att06 jpy_att06
22:34:30  11  ,att07 jpy_att07
22:34:30  12  ,att08 jpy_att08
22:34:30  13  ,att09 jpy_att09
22:34:30  14  ,att10 jpy_att10
22:34:30  15  ,att11 jpy_att11
22:34:30  16  ,att12 jpy_att12
22:34:30  17  ,att13 jpy_att13
22:34:30  18  ,att14 jpy_att14
22:34:30  19  ,att15 jpy_att15
22:34:30  20  ,att16 jpy_att16
22:34:30  21  ,att17 jpy_att17
22:34:30  22  ,att18 jpy_att18
22:34:30  23  ,att19 jpy_att19
22:34:30  24  ,att20 jpy_att20
22:34:30  25  ,att21 jpy_att21
22:34:30  26  ,att22 jpy_att22
22:34:30  27  ,att23 jpy_att23
22:34:30  28  ,att24 jpy_att24
22:34:30  29  ,att25 jpy_att25
22:34:30  30  ,att26 jpy_att26
22:34:30  31  ,att27 jpy_att27
22:34:30  32  ,att28 jpy_att28
22:34:30  33  ,att29 jpy_att29
22:34:30  34  ,att30 jpy_att30
22:34:30  35  ,att31 jpy_att31
22:34:30  36  ,att32 jpy_att32
22:34:30  37  ,att33 jpy_att33
22:34:30  38  ,att34 jpy_att34
22:34:30  39  ,att35 jpy_att35
22:34:30  40  ,att36 jpy_att36
22:34:30  41  ,att37 jpy_att37
22:34:30  42  FROM svm6162
22:34:30  43  /

Table created.

Elapsed: 00:00:00.19
22:34:30 SQL> 
22:34:30 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
22:34:31 SQL> 
22:34:31 SQL> -- rpt
22:34:31 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.91
22:34:32 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.00
22:34:32 SQL> 
22:34:32 SQL> --
22:34:32 SQL> -- cad610.sql
22:34:32 SQL> --
22:34:32 SQL> 
22:34:32 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:34:32 SQL> 
22:34:32 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
22:34:32 SQL> 
22:34:32 SQL> -- I created di5min here:
22:34:32 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:34:32 SQL> 
22:34:32 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:34:32   2  SELECT
22:34:32   3  pair
22:34:32   4  ,ydate
22:34:32   5  ,prdate
22:34:32   6  ,rownum rnum -- acts as t in my time-series
22:34:32   7  ,clse
22:34:32   8  -- Derive a bunch of attributes from clse, the latest price:
22:34:32   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:34:32  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:34:32  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:34:32  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:34:32  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:34:32  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:34:32  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:34:32  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:34:32  17  --
22:34:32  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:34:32  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:34:32  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:34:32  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:34:32  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:34:32  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:34:32  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:34:32  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:34:32  26  --
22:34:32  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:34:32  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:34:32  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:34:32  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:34:32  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:34:32  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:34:32  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:34:32  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:34:32  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:34:32  36  FROM di5min WHERE pair LIKE'%cad%'
22:34:32  37  AND ydate > sysdate - 95
22:34:32  38  ORDER BY ydate
22:34:32  39  /

View created.

Elapsed: 00:00:00.69
22:34:33 SQL> 
22:34:33 SQL> -- rpt
22:34:33 SQL> 
22:34:33 SQL> SELECT
22:34:33   2  pair
22:34:33   3  ,COUNT(pair)
22:34:33   4  ,MIN(clse),MAX(clse)
22:34:33   5  ,MIN(avg6),MAX(avg6)
22:34:33   6  ,MIN(ydate),MAX(ydate)
22:34:33   7  FROM svm6102
22:34:33   8  GROUP BY pair
22:34:33   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19809    .988925	   1.0355  .99060274 1.03282877 2010-10-03 22:35:01 2011-01-06 22:30:00

Elapsed: 00:00:00.86
22:34:34 SQL> 
22:34:34 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:34:34 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.29
22:34:34 SQL> CREATE TABLE svm6122 COMPRESS AS
22:34:34   2  SELECT
22:34:34   3  pair
22:34:34   4  ,ydate
22:34:34   5  ,prdate
22:34:34   6  ,clse
22:34:34   7  -- g6 is important. I want to predict g6:
22:34:34   8  ,ld6 - clse g6
22:34:34   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:34:34  10  -- I want more attributes from the ones I derived above:
22:34:34  11  -- clse relation to moving-min
22:34:34  12  ,clse-min4  cm4
22:34:34  13  ,clse-min6  cm6
22:34:34  14  ,clse-min8  cm8
22:34:34  15  ,clse-min10 cm10
22:34:34  16  ,clse-min12 cm12
22:34:34  17  ,clse-min14 cm14
22:34:34  18  ,clse-min16 cm16
22:34:34  19  ,clse-min18 cm18
22:34:34  20  -- clse relation to moving-avg
22:34:34  21  ,clse-avg4  ca4
22:34:34  22  ,clse-avg6  ca6
22:34:34  23  ,clse-avg8  ca8
22:34:34  24  ,clse-avg10 ca10
22:34:34  25  ,clse-avg12 ca12
22:34:34  26  ,clse-avg14 ca14
22:34:34  27  ,clse-avg16 ca16
22:34:34  28  ,clse-avg18 ca18
22:34:34  29  -- clse relation to moving-max
22:34:34  30  ,clse-max4  cx4
22:34:34  31  ,clse-max6  cx6
22:34:34  32  ,clse-max8  cx8
22:34:34  33  ,clse-max10 cx10
22:34:34  34  ,clse-max12 cx12
22:34:34  35  ,clse-max14 cx14
22:34:34  36  ,clse-max16 cx16
22:34:34  37  ,clse-max18 cx18
22:34:34  38  -- Derive more attributes.
22:34:34  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:34:34  40  -- But COVAR_POP is more stable:
22:34:34  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:34:34  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:34:34  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:34:34  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:34:34  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:34:34  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:34:34  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:34:34  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:34:34  49  -- Derive date related attributes:
22:34:34  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:34:34  51  ,0+TO_CHAR(ydate,'D')d
22:34:34  52  ,0+TO_CHAR(ydate,'W')w
22:34:34  53  -- mpm stands for minutes-past-midnight:
22:34:34  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:34:34  55  -- mph stands for minutes-past-hour:
22:34:34  56  ,0+TO_CHAR(ydate,'MI')mph
22:34:34  57  FROM svm6102
22:34:34  58  ORDER BY ydate
22:34:34  59  /

Table created.

Elapsed: 00:00:02.10
22:34:36 SQL> 
22:34:36 SQL> -- rpt
22:34:36 SQL> 
22:34:36 SQL> SELECT
22:34:36   2  pair
22:34:36   3  ,COUNT(pair)
22:34:36   4  ,MIN(clse),MAX(clse)
22:34:36   5  ,MIN(ydate),MAX(ydate)
22:34:36   6  FROM svm6122
22:34:36   7  GROUP BY pair
22:34:36   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19809    .988925	   1.0355 2010-10-03 22:35:01 2011-01-06 22:30:00

Elapsed: 00:00:00.05
22:34:36 SQL> 
22:34:36 SQL> -- Prepare for derivation of NTILE based params:
22:34:36 SQL> 
22:34:36 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.22
22:34:36 SQL> CREATE TABLE svm6142 COMPRESS AS
22:34:36   2  SELECT
22:34:36   3  pair
22:34:36   4  ,ydate
22:34:36   5  ,prdate
22:34:36   6  ,clse
22:34:36   7  ,g6
22:34:36   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:34:36   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:34:36  10  ,CASE WHEN trend IS NULL THEN 1
22:34:36  11  	    WHEN trend =0      THEN 1
22:34:36  12  	    ELSE trend END trend
22:34:36  13  ,cm4
22:34:36  14  ,cm6
22:34:36  15  ,cm8
22:34:36  16  ,cm10
22:34:36  17  ,cm12
22:34:36  18  ,cm14
22:34:36  19  ,cm16
22:34:36  20  ,cm18
22:34:36  21  --
22:34:36  22  ,ca4
22:34:36  23  ,ca6
22:34:36  24  ,ca8
22:34:36  25  ,ca10
22:34:36  26  ,ca12
22:34:36  27  ,ca14
22:34:36  28  ,ca16
22:34:36  29  ,ca18
22:34:36  30  --
22:34:36  31  ,cx4
22:34:36  32  ,cx6
22:34:36  33  ,cx8
22:34:36  34  ,cx10
22:34:36  35  ,cx12
22:34:36  36  ,cx14
22:34:36  37  ,cx16
22:34:36  38  ,cx18
22:34:36  39  --
22:34:36  40  ,crr4
22:34:36  41  ,crr6
22:34:36  42  ,crr8
22:34:36  43  ,crr10
22:34:36  44  ,crr12
22:34:36  45  ,crr14
22:34:36  46  ,crr16
22:34:36  47  ,crr18
22:34:36  48  --
22:34:36  49  ,hh
22:34:36  50  ,d
22:34:36  51  ,w
22:34:36  52  ,mpm
22:34:36  53  ,mph
22:34:36  54  FROM svm6122
22:34:36  55  ORDER BY ydate
22:34:36  56  /

Table created.

Elapsed: 00:00:00.38
22:34:37 SQL> 
22:34:37 SQL> -- rpt
22:34:37 SQL> 
22:34:37 SQL> SELECT
22:34:37   2  pair
22:34:37   3  ,trend
22:34:37   4  ,gatt
22:34:37   5  ,COUNT(pair)
22:34:37   6  ,AVG(g6)
22:34:37   7  FROM svm6142
22:34:37   8  GROUP BY pair,trend,gatt
22:34:37   9  ORDER BY pair,trend,gatt
22:34:37  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7319 -.00124159
usd_cad 	-1 up	      3186 .003051117
usd_cad 	-1		13
usd_cad 	 1 nup	      6843 -.00160925
usd_cad 	 1 up	      2389 .003645697
usd_cad 	 1		59

6 rows selected.

Elapsed: 00:00:00.04
22:34:37 SQL> 
22:34:37 SQL> 
22:34:37 SQL> -- Derive NTILE based params:
22:34:37 SQL> 
22:34:37 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
22:34:37 SQL> CREATE TABLE svm6162 COMPRESS AS
22:34:37   2  SELECT
22:34:37   3  pair
22:34:37   4  ,ydate
22:34:37   5  ,prdate
22:34:37   6  ,clse
22:34:37   7  ,g6
22:34:37   8  ,gatt
22:34:37   9  ,gattn
22:34:37  10  ,trend
22:34:37  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:34:37  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:34:37  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:34:37  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:34:37  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:34:37  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:34:37  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:34:37  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:34:37  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:34:37  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:34:37  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:34:37  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:34:37  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:34:37  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:34:37  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:34:37  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:34:37  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:34:37  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:34:37  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:34:37  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:34:37  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:34:37  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:34:37  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:34:37  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:34:37  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:34:37  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:34:37  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:34:37  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:34:37  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:34:37  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:34:37  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:34:37  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:34:37  43  ,hh  att32
22:34:37  44  ,d   att33
22:34:37  45  ,w   att34
22:34:37  46  ,mpm att35
22:34:37  47  ,mph att36
22:34:37  48  ,trend att37
22:34:37  49  FROM svm6142
22:34:37  50  ORDER BY ydate
22:34:37  51  /

Table created.

Elapsed: 00:00:04.91
22:34:42 SQL> 
22:34:42 SQL> -- rpt
22:34:42 SQL> 
22:34:42 SQL> SELECT
22:34:42   2  pair
22:34:42   3  ,trend
22:34:42   4  ,gatt
22:34:42   5  ,COUNT(pair)
22:34:42   6  ,AVG(g6)
22:34:42   7  FROM svm6162
22:34:42   8  GROUP BY pair,trend,gatt
22:34:42   9  ORDER BY pair,trend,gatt
22:34:42  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7319 -.00124159
usd_cad 	-1 up	      3186 .003051117
usd_cad 	-1		13
usd_cad 	 1 nup	      6843 -.00160925
usd_cad 	 1 up	      2389 .003645697
usd_cad 	 1		59

6 rows selected.

Elapsed: 00:00:00.03
22:34:42 SQL> 
22:34:42 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
22:34:42 SQL> CREATE TABLE modsrc COMPRESS AS
22:34:42   2  SELECT
22:34:42   3  pair
22:34:42   4  ,ydate
22:34:42   5  ,prdate
22:34:42   6  ,trend
22:34:42   7  ,g6
22:34:42   8  ,gatt
22:34:42   9  ,gattn
22:34:42  10  FROM svm6162
22:34:42  11  /

Table created.

Elapsed: 00:00:00.11
22:34:42 SQL> 
22:34:42 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.26
22:34:42 SQL> 
22:34:42 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
22:34:42 SQL> CREATE TABLE cad_ms610 COMPRESS AS
22:34:42   2  SELECT
22:34:42   3  ydate
22:34:42   4  ,trend cad_trend
22:34:42   5  ,g6    cad_g6
22:34:42   6  ,gatt  cad_gatt
22:34:42   7  ,gattn cad_gattn
22:34:42   8  FROM modsrc
22:34:42   9  /

Table created.

Elapsed: 00:00:00.07
22:34:42 SQL> 
22:34:42 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
22:34:43 SQL> 
22:34:43 SQL> -- I need a copy of the attributes:
22:34:43 SQL> 
22:34:43 SQL> 
22:34:43 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.04
22:34:43 SQL> CREATE TABLE cad_att COMPRESS AS
22:34:43   2  SELECT
22:34:43   3  ydate
22:34:43   4  ,att00 cad_att00
22:34:43   5  ,att01 cad_att01
22:34:43   6  ,att02 cad_att02
22:34:43   7  ,att03 cad_att03
22:34:43   8  ,att04 cad_att04
22:34:43   9  ,att05 cad_att05
22:34:43  10  ,att06 cad_att06
22:34:43  11  ,att07 cad_att07
22:34:43  12  ,att08 cad_att08
22:34:43  13  ,att09 cad_att09
22:34:43  14  ,att10 cad_att10
22:34:43  15  ,att11 cad_att11
22:34:43  16  ,att12 cad_att12
22:34:43  17  ,att13 cad_att13
22:34:43  18  ,att14 cad_att14
22:34:43  19  ,att15 cad_att15
22:34:43  20  ,att16 cad_att16
22:34:43  21  ,att17 cad_att17
22:34:43  22  ,att18 cad_att18
22:34:43  23  ,att19 cad_att19
22:34:43  24  ,att20 cad_att20
22:34:43  25  ,att21 cad_att21
22:34:43  26  ,att22 cad_att22
22:34:43  27  ,att23 cad_att23
22:34:43  28  ,att24 cad_att24
22:34:43  29  ,att25 cad_att25
22:34:43  30  ,att26 cad_att26
22:34:43  31  ,att27 cad_att27
22:34:43  32  ,att28 cad_att28
22:34:43  33  ,att29 cad_att29
22:34:43  34  ,att30 cad_att30
22:34:43  35  ,att31 cad_att31
22:34:43  36  ,att32 cad_att32
22:34:43  37  ,att33 cad_att33
22:34:43  38  ,att34 cad_att34
22:34:43  39  ,att35 cad_att35
22:34:43  40  ,att36 cad_att36
22:34:43  41  ,att37 cad_att37
22:34:43  42  FROM svm6162
22:34:43  43  /

Table created.

Elapsed: 00:00:00.18
22:34:43 SQL> 
22:34:43 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.42
22:34:43 SQL> 
22:34:43 SQL> -- rpt
22:34:43 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.85
22:34:44 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.00
22:34:44 SQL> 
22:34:44 SQL> --
22:34:44 SQL> -- chf610.sql
22:34:44 SQL> --
22:34:44 SQL> 
22:34:44 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:34:44 SQL> 
22:34:44 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.44
22:34:45 SQL> 
22:34:45 SQL> -- I created di5min here:
22:34:45 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:34:45 SQL> 
22:34:45 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:34:45   2  SELECT
22:34:45   3  pair
22:34:45   4  ,ydate
22:34:45   5  ,prdate
22:34:45   6  ,rownum rnum -- acts as t in my time-series
22:34:45   7  ,clse
22:34:45   8  -- Derive a bunch of attributes from clse, the latest price:
22:34:45   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:34:45  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:34:45  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:34:45  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:34:45  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:34:45  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:34:45  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:34:45  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:34:45  17  --
22:34:45  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:34:45  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:34:45  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:34:45  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:34:45  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:34:45  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:34:45  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:34:45  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:34:45  26  --
22:34:45  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:34:45  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:34:45  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:34:45  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:34:45  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:34:45  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:34:45  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:34:45  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:34:45  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:34:45  36  FROM di5min WHERE pair LIKE'%chf%'
22:34:45  37  AND ydate > sysdate - 95
22:34:45  38  ORDER BY ydate
22:34:45  39  /

View created.

Elapsed: 00:00:00.04
22:34:45 SQL> 
22:34:45 SQL> -- rpt
22:34:45 SQL> 
22:34:45 SQL> SELECT
22:34:45   2  pair
22:34:45   3  ,COUNT(pair)
22:34:45   4  ,MIN(clse),MAX(clse)
22:34:45   5  ,MIN(avg6),MAX(avg6)
22:34:45   6  ,MIN(ydate),MAX(ydate)
22:34:45   7  FROM svm6102
22:34:45   8  GROUP BY pair
22:34:45   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19812    .931675	  1.00635 .933257791 1.00498151 2010-10-03 22:35:01 2011-01-06 22:30:00

Elapsed: 00:00:00.87
22:34:45 SQL> 
22:34:45 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:34:45 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.28
22:34:46 SQL> CREATE TABLE svm6122 COMPRESS AS
22:34:46   2  SELECT
22:34:46   3  pair
22:34:46   4  ,ydate
22:34:46   5  ,prdate
22:34:46   6  ,clse
22:34:46   7  -- g6 is important. I want to predict g6:
22:34:46   8  ,ld6 - clse g6
22:34:46   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:34:46  10  -- I want more attributes from the ones I derived above:
22:34:46  11  -- clse relation to moving-min
22:34:46  12  ,clse-min4  cm4
22:34:46  13  ,clse-min6  cm6
22:34:46  14  ,clse-min8  cm8
22:34:46  15  ,clse-min10 cm10
22:34:46  16  ,clse-min12 cm12
22:34:46  17  ,clse-min14 cm14
22:34:46  18  ,clse-min16 cm16
22:34:46  19  ,clse-min18 cm18
22:34:46  20  -- clse relation to moving-avg
22:34:46  21  ,clse-avg4  ca4
22:34:46  22  ,clse-avg6  ca6
22:34:46  23  ,clse-avg8  ca8
22:34:46  24  ,clse-avg10 ca10
22:34:46  25  ,clse-avg12 ca12
22:34:46  26  ,clse-avg14 ca14
22:34:46  27  ,clse-avg16 ca16
22:34:46  28  ,clse-avg18 ca18
22:34:46  29  -- clse relation to moving-max
22:34:46  30  ,clse-max4  cx4
22:34:46  31  ,clse-max6  cx6
22:34:46  32  ,clse-max8  cx8
22:34:46  33  ,clse-max10 cx10
22:34:46  34  ,clse-max12 cx12
22:34:46  35  ,clse-max14 cx14
22:34:46  36  ,clse-max16 cx16
22:34:46  37  ,clse-max18 cx18
22:34:46  38  -- Derive more attributes.
22:34:46  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:34:46  40  -- But COVAR_POP is more stable:
22:34:46  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:34:46  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:34:46  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:34:46  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:34:46  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:34:46  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:34:46  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:34:46  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:34:46  49  -- Derive date related attributes:
22:34:46  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:34:46  51  ,0+TO_CHAR(ydate,'D')d
22:34:46  52  ,0+TO_CHAR(ydate,'W')w
22:34:46  53  -- mpm stands for minutes-past-midnight:
22:34:46  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:34:46  55  -- mph stands for minutes-past-hour:
22:34:46  56  ,0+TO_CHAR(ydate,'MI')mph
22:34:46  57  FROM svm6102
22:34:46  58  ORDER BY ydate
22:34:46  59  /

Table created.

Elapsed: 00:00:02.12
22:34:48 SQL> 
22:34:48 SQL> -- rpt
22:34:48 SQL> 
22:34:48 SQL> SELECT
22:34:48   2  pair
22:34:48   3  ,COUNT(pair)
22:34:48   4  ,MIN(clse),MAX(clse)
22:34:48   5  ,MIN(ydate),MAX(ydate)
22:34:48   6  FROM svm6122
22:34:48   7  GROUP BY pair
22:34:48   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19812    .931675	  1.00635 2010-10-03 22:35:01 2011-01-06 22:30:00

Elapsed: 00:00:00.04
22:34:48 SQL> 
22:34:48 SQL> -- Prepare for derivation of NTILE based params:
22:34:48 SQL> 
22:34:48 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.22
22:34:48 SQL> CREATE TABLE svm6142 COMPRESS AS
22:34:48   2  SELECT
22:34:48   3  pair
22:34:48   4  ,ydate
22:34:48   5  ,prdate
22:34:48   6  ,clse
22:34:48   7  ,g6
22:34:48   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:34:48   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:34:48  10  ,CASE WHEN trend IS NULL THEN 1
22:34:48  11  	    WHEN trend =0      THEN 1
22:34:48  12  	    ELSE trend END trend
22:34:48  13  ,cm4
22:34:48  14  ,cm6
22:34:48  15  ,cm8
22:34:48  16  ,cm10
22:34:48  17  ,cm12
22:34:48  18  ,cm14
22:34:48  19  ,cm16
22:34:48  20  ,cm18
22:34:48  21  --
22:34:48  22  ,ca4
22:34:48  23  ,ca6
22:34:48  24  ,ca8
22:34:48  25  ,ca10
22:34:48  26  ,ca12
22:34:48  27  ,ca14
22:34:48  28  ,ca16
22:34:48  29  ,ca18
22:34:48  30  --
22:34:48  31  ,cx4
22:34:48  32  ,cx6
22:34:48  33  ,cx8
22:34:48  34  ,cx10
22:34:48  35  ,cx12
22:34:48  36  ,cx14
22:34:48  37  ,cx16
22:34:48  38  ,cx18
22:34:48  39  --
22:34:48  40  ,crr4
22:34:48  41  ,crr6
22:34:48  42  ,crr8
22:34:48  43  ,crr10
22:34:48  44  ,crr12
22:34:48  45  ,crr14
22:34:48  46  ,crr16
22:34:48  47  ,crr18
22:34:48  48  --
22:34:48  49  ,hh
22:34:48  50  ,d
22:34:48  51  ,w
22:34:48  52  ,mpm
22:34:48  53  ,mph
22:34:48  54  FROM svm6122
22:34:48  55  ORDER BY ydate
22:34:48  56  /

Table created.

Elapsed: 00:00:00.37
22:34:48 SQL> 
22:34:48 SQL> -- rpt
22:34:48 SQL> 
22:34:48 SQL> SELECT
22:34:48   2  pair
22:34:48   3  ,trend
22:34:48   4  ,gatt
22:34:48   5  ,COUNT(pair)
22:34:48   6  ,AVG(g6)
22:34:48   7  FROM svm6142
22:34:48   8  GROUP BY pair,trend,gatt
22:34:48   9  ORDER BY pair,trend,gatt
22:34:48  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7124 -.00198195
usd_chf 	-1 up	      3078 .003816567
usd_chf 	-1		51
usd_chf 	 1 nup	      6582 -.00154514
usd_chf 	 1 up	      2956 .003951575
usd_chf 	 1		21

6 rows selected.

Elapsed: 00:00:00.04
22:34:49 SQL> 
22:34:49 SQL> 
22:34:49 SQL> -- Derive NTILE based params:
22:34:49 SQL> 
22:34:49 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.17
22:34:49 SQL> CREATE TABLE svm6162 COMPRESS AS
22:34:49   2  SELECT
22:34:49   3  pair
22:34:49   4  ,ydate
22:34:49   5  ,prdate
22:34:49   6  ,clse
22:34:49   7  ,g6
22:34:49   8  ,gatt
22:34:49   9  ,gattn
22:34:49  10  ,trend
22:34:49  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:34:49  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:34:49  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:34:49  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:34:49  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:34:49  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:34:49  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:34:49  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:34:49  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:34:49  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:34:49  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:34:49  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:34:49  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:34:49  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:34:49  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:34:49  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:34:49  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:34:49  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:34:49  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:34:49  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:34:49  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:34:49  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:34:49  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:34:49  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:34:49  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:34:49  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:34:49  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:34:49  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:34:49  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:34:49  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:34:49  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:34:49  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:34:49  43  ,hh  att32
22:34:49  44  ,d   att33
22:34:49  45  ,w   att34
22:34:49  46  ,mpm att35
22:34:49  47  ,mph att36
22:34:49  48  ,trend att37
22:34:49  49  FROM svm6142
22:34:49  50  ORDER BY ydate
22:34:49  51  /

Table created.

Elapsed: 00:00:04.85
22:34:54 SQL> 
22:34:54 SQL> -- rpt
22:34:54 SQL> 
22:34:54 SQL> SELECT
22:34:54   2  pair
22:34:54   3  ,trend
22:34:54   4  ,gatt
22:34:54   5  ,COUNT(pair)
22:34:54   6  ,AVG(g6)
22:34:54   7  FROM svm6162
22:34:54   8  GROUP BY pair,trend,gatt
22:34:54   9  ORDER BY pair,trend,gatt
22:34:54  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7124 -.00198195
usd_chf 	-1 up	      3078 .003816567
usd_chf 	-1		51
usd_chf 	 1 nup	      6582 -.00154514
usd_chf 	 1 up	      2956 .003951575
usd_chf 	 1		21

6 rows selected.

Elapsed: 00:00:00.03
22:34:54 SQL> 
22:34:54 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
22:34:54 SQL> CREATE TABLE modsrc COMPRESS AS
22:34:54   2  SELECT
22:34:54   3  pair
22:34:54   4  ,ydate
22:34:54   5  ,prdate
22:34:54   6  ,trend
22:34:54   7  ,g6
22:34:54   8  ,gatt
22:34:54   9  ,gattn
22:34:54  10  FROM svm6162
22:34:54  11  /

Table created.

Elapsed: 00:00:00.10
22:34:54 SQL> 
22:34:54 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
22:34:54 SQL> 
22:34:54 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
22:34:54 SQL> CREATE TABLE chf_ms610 COMPRESS AS
22:34:54   2  SELECT
22:34:54   3  ydate
22:34:54   4  ,trend chf_trend
22:34:54   5  ,g6    chf_g6
22:34:54   6  ,gatt  chf_gatt
22:34:54   7  ,gattn chf_gattn
22:34:54   8  FROM modsrc
22:34:54   9  /

Table created.

Elapsed: 00:00:00.06
22:34:54 SQL> 
22:34:54 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
22:34:54 SQL> 
22:34:54 SQL> -- I need a copy of the attributes:
22:34:54 SQL> 
22:34:54 SQL> 
22:34:54 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.04
22:34:54 SQL> CREATE TABLE chf_att COMPRESS AS
22:34:54   2  SELECT
22:34:54   3  ydate
22:34:54   4  ,att00 chf_att00
22:34:54   5  ,att01 chf_att01
22:34:54   6  ,att02 chf_att02
22:34:54   7  ,att03 chf_att03
22:34:54   8  ,att04 chf_att04
22:34:54   9  ,att05 chf_att05
22:34:54  10  ,att06 chf_att06
22:34:54  11  ,att07 chf_att07
22:34:54  12  ,att08 chf_att08
22:34:54  13  ,att09 chf_att09
22:34:54  14  ,att10 chf_att10
22:34:54  15  ,att11 chf_att11
22:34:54  16  ,att12 chf_att12
22:34:54  17  ,att13 chf_att13
22:34:54  18  ,att14 chf_att14
22:34:54  19  ,att15 chf_att15
22:34:54  20  ,att16 chf_att16
22:34:54  21  ,att17 chf_att17
22:34:54  22  ,att18 chf_att18
22:34:54  23  ,att19 chf_att19
22:34:54  24  ,att20 chf_att20
22:34:54  25  ,att21 chf_att21
22:34:54  26  ,att22 chf_att22
22:34:54  27  ,att23 chf_att23
22:34:54  28  ,att24 chf_att24
22:34:54  29  ,att25 chf_att25
22:34:54  30  ,att26 chf_att26
22:34:54  31  ,att27 chf_att27
22:34:54  32  ,att28 chf_att28
22:34:54  33  ,att29 chf_att29
22:34:54  34  ,att30 chf_att30
22:34:54  35  ,att31 chf_att31
22:34:54  36  ,att32 chf_att32
22:34:54  37  ,att33 chf_att33
22:34:54  38  ,att34 chf_att34
22:34:54  39  ,att35 chf_att35
22:34:54  40  ,att36 chf_att36
22:34:54  41  ,att37 chf_att37
22:34:54  42  FROM svm6162
22:34:54  43  /

Table created.

Elapsed: 00:00:00.17
22:34:54 SQL> 
22:34:54 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
22:34:55 SQL> 
22:34:55 SQL> -- rpt
22:34:55 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19812

Elapsed: 00:00:00.84
22:34:56 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19812

Elapsed: 00:00:00.01
22:34:56 SQL> 
22:34:56 SQL> --
22:34:56 SQL> -- ech610.sql
22:34:56 SQL> --
22:34:56 SQL> 
22:34:56 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:34:56 SQL> 
22:34:56 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.49
22:34:56 SQL> 
22:34:56 SQL> -- I created di5min here:
22:34:56 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:34:56 SQL> 
22:34:56 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:34:56   2  SELECT
22:34:56   3  pair
22:34:56   4  ,ydate
22:34:56   5  ,prdate
22:34:56   6  ,rownum rnum -- acts as t in my time-series
22:34:56   7  ,clse
22:34:56   8  -- Derive a bunch of attributes from clse, the latest price:
22:34:56   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:34:56  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:34:56  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:34:56  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:34:56  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:34:56  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:34:56  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:34:56  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:34:56  17  --
22:34:56  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:34:56  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:34:56  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:34:56  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:34:56  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:34:56  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:34:56  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:34:56  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:34:56  26  --
22:34:56  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:34:56  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:34:56  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:34:56  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:34:56  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:34:56  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:34:56  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:34:56  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:34:56  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:34:56  36  FROM di5min WHERE pair LIKE'%ech%'
22:34:56  37  AND ydate > sysdate - 95
22:34:56  38  ORDER BY ydate
22:34:56  39  /

View created.

Elapsed: 00:00:00.05
22:34:56 SQL> 
22:34:56 SQL> -- rpt
22:34:56 SQL> 
22:34:56 SQL> SELECT
22:34:56   2  pair
22:34:56   3  ,COUNT(pair)
22:34:56   4  ,MIN(clse),MAX(clse)
22:34:56   5  ,MIN(avg6),MAX(avg6)
22:34:56   6  ,MIN(ydate),MAX(ydate)
22:34:56   7  FROM svm6102
22:34:56   8  GROUP BY pair
22:34:56   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19810 1.24182424 1.38284305 1.24320711 1.37986485 2010-10-03 22:35:01 2011-01-06 22:30:00

Elapsed: 00:00:00.82
22:34:57 SQL> 
22:34:57 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:34:57 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
22:34:57 SQL> CREATE TABLE svm6122 COMPRESS AS
22:34:57   2  SELECT
22:34:57   3  pair
22:34:57   4  ,ydate
22:34:57   5  ,prdate
22:34:57   6  ,clse
22:34:57   7  -- g6 is important. I want to predict g6:
22:34:57   8  ,ld6 - clse g6
22:34:57   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:34:57  10  -- I want more attributes from the ones I derived above:
22:34:57  11  -- clse relation to moving-min
22:34:57  12  ,clse-min4  cm4
22:34:57  13  ,clse-min6  cm6
22:34:57  14  ,clse-min8  cm8
22:34:57  15  ,clse-min10 cm10
22:34:57  16  ,clse-min12 cm12
22:34:57  17  ,clse-min14 cm14
22:34:57  18  ,clse-min16 cm16
22:34:57  19  ,clse-min18 cm18
22:34:57  20  -- clse relation to moving-avg
22:34:57  21  ,clse-avg4  ca4
22:34:57  22  ,clse-avg6  ca6
22:34:57  23  ,clse-avg8  ca8
22:34:57  24  ,clse-avg10 ca10
22:34:57  25  ,clse-avg12 ca12
22:34:57  26  ,clse-avg14 ca14
22:34:57  27  ,clse-avg16 ca16
22:34:57  28  ,clse-avg18 ca18
22:34:57  29  -- clse relation to moving-max
22:34:57  30  ,clse-max4  cx4
22:34:57  31  ,clse-max6  cx6
22:34:57  32  ,clse-max8  cx8
22:34:57  33  ,clse-max10 cx10
22:34:57  34  ,clse-max12 cx12
22:34:57  35  ,clse-max14 cx14
22:34:57  36  ,clse-max16 cx16
22:34:57  37  ,clse-max18 cx18
22:34:57  38  -- Derive more attributes.
22:34:57  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:34:57  40  -- But COVAR_POP is more stable:
22:34:57  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:34:57  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:34:57  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:34:57  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:34:57  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:34:57  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:34:57  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:34:57  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:34:57  49  -- Derive date related attributes:
22:34:57  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:34:57  51  ,0+TO_CHAR(ydate,'D')d
22:34:57  52  ,0+TO_CHAR(ydate,'W')w
22:34:57  53  -- mpm stands for minutes-past-midnight:
22:34:57  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:34:57  55  -- mph stands for minutes-past-hour:
22:34:57  56  ,0+TO_CHAR(ydate,'MI')mph
22:34:57  57  FROM svm6102
22:34:57  58  ORDER BY ydate
22:34:57  59  /

Table created.

Elapsed: 00:00:02.10
22:34:59 SQL> 
22:34:59 SQL> -- rpt
22:34:59 SQL> 
22:34:59 SQL> SELECT
22:34:59   2  pair
22:34:59   3  ,COUNT(pair)
22:34:59   4  ,MIN(clse),MAX(clse)
22:34:59   5  ,MIN(ydate),MAX(ydate)
22:34:59   6  FROM svm6122
22:34:59   7  GROUP BY pair
22:34:59   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19810 1.24182424 1.38284305 2010-10-03 22:35:01 2011-01-06 22:30:00

Elapsed: 00:00:00.04
22:35:00 SQL> 
22:35:00 SQL> -- Prepare for derivation of NTILE based params:
22:35:00 SQL> 
22:35:00 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.33
22:35:00 SQL> CREATE TABLE svm6142 COMPRESS AS
22:35:00   2  SELECT
22:35:00   3  pair
22:35:00   4  ,ydate
22:35:00   5  ,prdate
22:35:00   6  ,clse
22:35:00   7  ,g6
22:35:00   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:35:00   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:35:00  10  ,CASE WHEN trend IS NULL THEN 1
22:35:00  11  	    WHEN trend =0      THEN 1
22:35:00  12  	    ELSE trend END trend
22:35:00  13  ,cm4
22:35:00  14  ,cm6
22:35:00  15  ,cm8
22:35:00  16  ,cm10
22:35:00  17  ,cm12
22:35:00  18  ,cm14
22:35:00  19  ,cm16
22:35:00  20  ,cm18
22:35:00  21  --
22:35:00  22  ,ca4
22:35:00  23  ,ca6
22:35:00  24  ,ca8
22:35:00  25  ,ca10
22:35:00  26  ,ca12
22:35:00  27  ,ca14
22:35:00  28  ,ca16
22:35:00  29  ,ca18
22:35:00  30  --
22:35:00  31  ,cx4
22:35:00  32  ,cx6
22:35:00  33  ,cx8
22:35:00  34  ,cx10
22:35:00  35  ,cx12
22:35:00  36  ,cx14
22:35:00  37  ,cx16
22:35:00  38  ,cx18
22:35:00  39  --
22:35:00  40  ,crr4
22:35:00  41  ,crr6
22:35:00  42  ,crr8
22:35:00  43  ,crr10
22:35:00  44  ,crr12
22:35:00  45  ,crr14
22:35:00  46  ,crr16
22:35:00  47  ,crr18
22:35:00  48  --
22:35:00  49  ,hh
22:35:00  50  ,d
22:35:00  51  ,w
22:35:00  52  ,mpm
22:35:00  53  ,mph
22:35:00  54  FROM svm6122
22:35:00  55  ORDER BY ydate
22:35:00  56  /

Table created.

Elapsed: 00:00:00.40
22:35:00 SQL> 
22:35:00 SQL> -- rpt
22:35:00 SQL> 
22:35:00 SQL> SELECT
22:35:00   2  pair
22:35:00   3  ,trend
22:35:00   4  ,gatt
22:35:00   5  ,COUNT(pair)
22:35:00   6  ,AVG(g6)
22:35:00   7  FROM svm6142
22:35:00   8  GROUP BY pair,trend,gatt
22:35:00   9  ORDER BY pair,trend,gatt
22:35:00  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6790 -.00231177
ech_usd 	-1 up	      3581 .003574487
ech_usd 	-1		72
ech_usd 	 1 nup	      6462 -.00239508
ech_usd 	 1 up	      2905 .004122754

Elapsed: 00:00:00.04
22:35:00 SQL> 
22:35:00 SQL> 
22:35:00 SQL> -- Derive NTILE based params:
22:35:00 SQL> 
22:35:00 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
22:35:00 SQL> CREATE TABLE svm6162 COMPRESS AS
22:35:00   2  SELECT
22:35:00   3  pair
22:35:00   4  ,ydate
22:35:00   5  ,prdate
22:35:00   6  ,clse
22:35:00   7  ,g6
22:35:00   8  ,gatt
22:35:00   9  ,gattn
22:35:00  10  ,trend
22:35:00  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:35:00  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:35:00  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:35:00  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:35:00  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:35:00  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:35:00  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:35:00  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:35:00  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:35:00  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:35:00  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:35:00  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:35:00  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:35:00  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:35:00  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:35:00  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:35:00  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:35:00  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:35:00  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:35:00  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:35:00  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:35:00  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:35:00  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:35:00  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:35:00  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:35:00  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:35:00  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:35:00  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:35:00  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:35:00  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:35:00  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:35:00  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:35:00  43  ,hh  att32
22:35:00  44  ,d   att33
22:35:00  45  ,w   att34
22:35:00  46  ,mpm att35
22:35:00  47  ,mph att36
22:35:00  48  ,trend att37
22:35:00  49  FROM svm6142
22:35:00  50  ORDER BY ydate
22:35:00  51  /

Table created.

Elapsed: 00:00:05.09
22:35:06 SQL> 
22:35:06 SQL> -- rpt
22:35:06 SQL> 
22:35:06 SQL> SELECT
22:35:06   2  pair
22:35:06   3  ,trend
22:35:06   4  ,gatt
22:35:06   5  ,COUNT(pair)
22:35:06   6  ,AVG(g6)
22:35:06   7  FROM svm6162
22:35:06   8  GROUP BY pair,trend,gatt
22:35:06   9  ORDER BY pair,trend,gatt
22:35:06  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6790 -.00231177
ech_usd 	-1 up	      3581 .003574487
ech_usd 	-1		72
ech_usd 	 1 nup	      6462 -.00239508
ech_usd 	 1 up	      2905 .004122754

Elapsed: 00:00:00.02
22:35:06 SQL> 
22:35:06 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.22
22:35:06 SQL> CREATE TABLE modsrc COMPRESS AS
22:35:06   2  SELECT
22:35:06   3  pair
22:35:06   4  ,ydate
22:35:06   5  ,prdate
22:35:06   6  ,trend
22:35:06   7  ,g6
22:35:06   8  ,gatt
22:35:06   9  ,gattn
22:35:06  10  FROM svm6162
22:35:06  11  /

Table created.

Elapsed: 00:00:00.07
22:35:06 SQL> 
22:35:06 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.28
22:35:06 SQL> 
22:35:06 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
22:35:06 SQL> CREATE TABLE ech_ms610 COMPRESS AS
22:35:06   2  SELECT
22:35:06   3  ydate
22:35:06   4  ,trend ech_trend
22:35:06   5  ,g6    ech_g6
22:35:06   6  ,gatt  ech_gatt
22:35:06   7  ,gattn ech_gattn
22:35:06   8  FROM modsrc
22:35:06   9  /

Table created.

Elapsed: 00:00:00.06
22:35:06 SQL> 
22:35:06 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
22:35:06 SQL> 
22:35:06 SQL> -- I need a copy of the attributes:
22:35:06 SQL> 
22:35:06 SQL> 
22:35:06 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.05
22:35:06 SQL> CREATE TABLE ech_att COMPRESS AS
22:35:06   2  SELECT
22:35:06   3  ydate
22:35:06   4  ,att00 ech_att00
22:35:06   5  ,att01 ech_att01
22:35:06   6  ,att02 ech_att02
22:35:06   7  ,att03 ech_att03
22:35:06   8  ,att04 ech_att04
22:35:06   9  ,att05 ech_att05
22:35:06  10  ,att06 ech_att06
22:35:06  11  ,att07 ech_att07
22:35:06  12  ,att08 ech_att08
22:35:06  13  ,att09 ech_att09
22:35:06  14  ,att10 ech_att10
22:35:06  15  ,att11 ech_att11
22:35:06  16  ,att12 ech_att12
22:35:06  17  ,att13 ech_att13
22:35:06  18  ,att14 ech_att14
22:35:06  19  ,att15 ech_att15
22:35:06  20  ,att16 ech_att16
22:35:06  21  ,att17 ech_att17
22:35:06  22  ,att18 ech_att18
22:35:06  23  ,att19 ech_att19
22:35:06  24  ,att20 ech_att20
22:35:06  25  ,att21 ech_att21
22:35:06  26  ,att22 ech_att22
22:35:06  27  ,att23 ech_att23
22:35:06  28  ,att24 ech_att24
22:35:06  29  ,att25 ech_att25
22:35:06  30  ,att26 ech_att26
22:35:06  31  ,att27 ech_att27
22:35:06  32  ,att28 ech_att28
22:35:06  33  ,att29 ech_att29
22:35:06  34  ,att30 ech_att30
22:35:06  35  ,att31 ech_att31
22:35:06  36  ,att32 ech_att32
22:35:06  37  ,att33 ech_att33
22:35:06  38  ,att34 ech_att34
22:35:06  39  ,att35 ech_att35
22:35:06  40  ,att36 ech_att36
22:35:06  41  ,att37 ech_att37
22:35:06  42  FROM svm6162
22:35:06  43  /

Table created.

Elapsed: 00:00:00.23
22:35:07 SQL> 
22:35:07 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
22:35:07 SQL> 
22:35:07 SQL> -- rpt
22:35:07 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.79
22:35:08 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19810

Elapsed: 00:00:00.00
22:35:08 SQL> 
22:35:08 SQL> --
22:35:08 SQL> -- egb610.sql
22:35:08 SQL> --
22:35:08 SQL> 
22:35:08 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:35:08 SQL> 
22:35:08 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.71
22:35:09 SQL> 
22:35:09 SQL> -- I created di5min here:
22:35:09 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:35:09 SQL> 
22:35:09 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:35:09   2  SELECT
22:35:09   3  pair
22:35:09   4  ,ydate
22:35:09   5  ,prdate
22:35:09   6  ,rownum rnum -- acts as t in my time-series
22:35:09   7  ,clse
22:35:09   8  -- Derive a bunch of attributes from clse, the latest price:
22:35:09   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:35:09  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:35:09  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:35:09  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:35:09  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:35:09  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:35:09  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:35:09  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:35:09  17  --
22:35:09  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:35:09  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:35:09  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:35:09  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:35:09  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:35:09  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:35:09  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:35:09  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:35:09  26  --
22:35:09  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:35:09  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:35:09  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:35:09  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:35:09  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:35:09  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:35:09  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:35:09  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:35:09  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:35:09  36  FROM di5min WHERE pair LIKE'%egb%'
22:35:09  37  AND ydate > sysdate - 95
22:35:09  38  ORDER BY ydate
22:35:09  39  /

View created.

Elapsed: 00:00:00.04
22:35:09 SQL> 
22:35:09 SQL> -- rpt
22:35:09 SQL> 
22:35:09 SQL> SELECT
22:35:09   2  pair
22:35:09   3  ,COUNT(pair)
22:35:09   4  ,MIN(clse),MAX(clse)
22:35:09   5  ,MIN(avg6),MAX(avg6)
22:35:09   6  ,MIN(ydate),MAX(ydate)
22:35:09   7  FROM svm6102
22:35:09   8  GROUP BY pair
22:35:09   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19808 .833520557 .893920122 .834199029 .892400287 2010-10-03 22:40:01 2011-01-06 22:30:00

Elapsed: 00:00:00.99
22:35:10 SQL> 
22:35:10 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:35:10 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.29
22:35:10 SQL> CREATE TABLE svm6122 COMPRESS AS
22:35:10   2  SELECT
22:35:10   3  pair
22:35:10   4  ,ydate
22:35:10   5  ,prdate
22:35:10   6  ,clse
22:35:10   7  -- g6 is important. I want to predict g6:
22:35:10   8  ,ld6 - clse g6
22:35:10   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:35:10  10  -- I want more attributes from the ones I derived above:
22:35:10  11  -- clse relation to moving-min
22:35:10  12  ,clse-min4  cm4
22:35:10  13  ,clse-min6  cm6
22:35:10  14  ,clse-min8  cm8
22:35:10  15  ,clse-min10 cm10
22:35:10  16  ,clse-min12 cm12
22:35:10  17  ,clse-min14 cm14
22:35:10  18  ,clse-min16 cm16
22:35:10  19  ,clse-min18 cm18
22:35:10  20  -- clse relation to moving-avg
22:35:10  21  ,clse-avg4  ca4
22:35:10  22  ,clse-avg6  ca6
22:35:10  23  ,clse-avg8  ca8
22:35:10  24  ,clse-avg10 ca10
22:35:10  25  ,clse-avg12 ca12
22:35:10  26  ,clse-avg14 ca14
22:35:10  27  ,clse-avg16 ca16
22:35:10  28  ,clse-avg18 ca18
22:35:10  29  -- clse relation to moving-max
22:35:10  30  ,clse-max4  cx4
22:35:10  31  ,clse-max6  cx6
22:35:10  32  ,clse-max8  cx8
22:35:10  33  ,clse-max10 cx10
22:35:10  34  ,clse-max12 cx12
22:35:10  35  ,clse-max14 cx14
22:35:10  36  ,clse-max16 cx16
22:35:10  37  ,clse-max18 cx18
22:35:10  38  -- Derive more attributes.
22:35:10  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:35:10  40  -- But COVAR_POP is more stable:
22:35:10  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:35:10  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:35:10  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:35:10  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:35:10  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:35:10  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:35:10  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:35:10  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:35:10  49  -- Derive date related attributes:
22:35:10  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:35:10  51  ,0+TO_CHAR(ydate,'D')d
22:35:10  52  ,0+TO_CHAR(ydate,'W')w
22:35:10  53  -- mpm stands for minutes-past-midnight:
22:35:10  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:35:10  55  -- mph stands for minutes-past-hour:
22:35:10  56  ,0+TO_CHAR(ydate,'MI')mph
22:35:10  57  FROM svm6102
22:35:10  58  ORDER BY ydate
22:35:10  59  /

Table created.

Elapsed: 00:00:02.53
22:35:13 SQL> 
22:35:13 SQL> -- rpt
22:35:13 SQL> 
22:35:13 SQL> SELECT
22:35:13   2  pair
22:35:13   3  ,COUNT(pair)
22:35:13   4  ,MIN(clse),MAX(clse)
22:35:13   5  ,MIN(ydate),MAX(ydate)
22:35:13   6  FROM svm6122
22:35:13   7  GROUP BY pair
22:35:13   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19808 .833520557 .893920122 2010-10-03 22:40:01 2011-01-06 22:30:00

Elapsed: 00:00:00.05
22:35:13 SQL> 
22:35:13 SQL> -- Prepare for derivation of NTILE based params:
22:35:13 SQL> 
22:35:13 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.25
22:35:13 SQL> CREATE TABLE svm6142 COMPRESS AS
22:35:13   2  SELECT
22:35:13   3  pair
22:35:13   4  ,ydate
22:35:13   5  ,prdate
22:35:13   6  ,clse
22:35:13   7  ,g6
22:35:13   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:35:13   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:35:13  10  ,CASE WHEN trend IS NULL THEN 1
22:35:13  11  	    WHEN trend =0      THEN 1
22:35:13  12  	    ELSE trend END trend
22:35:13  13  ,cm4
22:35:13  14  ,cm6
22:35:13  15  ,cm8
22:35:13  16  ,cm10
22:35:13  17  ,cm12
22:35:13  18  ,cm14
22:35:13  19  ,cm16
22:35:13  20  ,cm18
22:35:13  21  --
22:35:13  22  ,ca4
22:35:13  23  ,ca6
22:35:13  24  ,ca8
22:35:13  25  ,ca10
22:35:13  26  ,ca12
22:35:13  27  ,ca14
22:35:13  28  ,ca16
22:35:13  29  ,ca18
22:35:13  30  --
22:35:13  31  ,cx4
22:35:13  32  ,cx6
22:35:13  33  ,cx8
22:35:13  34  ,cx10
22:35:13  35  ,cx12
22:35:13  36  ,cx14
22:35:13  37  ,cx16
22:35:13  38  ,cx18
22:35:13  39  --
22:35:13  40  ,crr4
22:35:13  41  ,crr6
22:35:13  42  ,crr8
22:35:13  43  ,crr10
22:35:13  44  ,crr12
22:35:13  45  ,crr14
22:35:13  46  ,crr16
22:35:13  47  ,crr18
22:35:13  48  --
22:35:13  49  ,hh
22:35:13  50  ,d
22:35:13  51  ,w
22:35:13  52  ,mpm
22:35:13  53  ,mph
22:35:13  54  FROM svm6122
22:35:13  55  ORDER BY ydate
22:35:13  56  /

Table created.

Elapsed: 00:00:00.45
22:35:13 SQL> 
22:35:13 SQL> -- rpt
22:35:13 SQL> 
22:35:13 SQL> SELECT
22:35:13   2  pair
22:35:13   3  ,trend
22:35:13   4  ,gatt
22:35:13   5  ,COUNT(pair)
22:35:13   6  ,AVG(g6)
22:35:13   7  FROM svm6142
22:35:13   8  GROUP BY pair,trend,gatt
22:35:13   9  ORDER BY pair,trend,gatt
22:35:13  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7947 -.00106427
egb_usd 	-1 up	      2636 .002928295
egb_usd 	-1		72
egb_usd 	 1 nup	      6536   -.001388
egb_usd 	 1 up	      2617   .0029282

Elapsed: 00:00:00.04
22:35:13 SQL> 
22:35:13 SQL> 
22:35:13 SQL> -- Derive NTILE based params:
22:35:13 SQL> 
22:35:13 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.21
22:35:14 SQL> CREATE TABLE svm6162 COMPRESS AS
22:35:14   2  SELECT
22:35:14   3  pair
22:35:14   4  ,ydate
22:35:14   5  ,prdate
22:35:14   6  ,clse
22:35:14   7  ,g6
22:35:14   8  ,gatt
22:35:14   9  ,gattn
22:35:14  10  ,trend
22:35:14  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:35:14  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:35:14  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:35:14  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:35:14  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:35:14  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:35:14  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:35:14  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:35:14  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:35:14  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:35:14  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:35:14  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:35:14  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:35:14  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:35:14  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:35:14  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:35:14  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:35:14  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:35:14  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:35:14  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:35:14  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:35:14  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:35:14  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:35:14  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:35:14  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:35:14  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:35:14  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:35:14  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:35:14  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:35:14  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:35:14  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:35:14  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:35:14  43  ,hh  att32
22:35:14  44  ,d   att33
22:35:14  45  ,w   att34
22:35:14  46  ,mpm att35
22:35:14  47  ,mph att36
22:35:14  48  ,trend att37
22:35:14  49  FROM svm6142
22:35:14  50  ORDER BY ydate
22:35:14  51  /

Table created.

Elapsed: 00:00:05.68
22:35:19 SQL> 
22:35:19 SQL> -- rpt
22:35:19 SQL> 
22:35:19 SQL> SELECT
22:35:19   2  pair
22:35:19   3  ,trend
22:35:19   4  ,gatt
22:35:19   5  ,COUNT(pair)
22:35:19   6  ,AVG(g6)
22:35:19   7  FROM svm6162
22:35:19   8  GROUP BY pair,trend,gatt
22:35:19   9  ORDER BY pair,trend,gatt
22:35:19  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7947 -.00106427
egb_usd 	-1 up	      2636 .002928295
egb_usd 	-1		72
egb_usd 	 1 nup	      6536   -.001388
egb_usd 	 1 up	      2617   .0029282

Elapsed: 00:00:00.02
22:35:19 SQL> 
22:35:19 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
22:35:19 SQL> CREATE TABLE modsrc COMPRESS AS
22:35:19   2  SELECT
22:35:19   3  pair
22:35:19   4  ,ydate
22:35:19   5  ,prdate
22:35:19   6  ,trend
22:35:19   7  ,g6
22:35:19   8  ,gatt
22:35:19   9  ,gattn
22:35:19  10  FROM svm6162
22:35:19  11  /

Table created.

Elapsed: 00:00:00.09
22:35:19 SQL> 
22:35:19 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
22:35:20 SQL> 
22:35:20 SQL> DROP   TABLE egb_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
22:35:20 SQL> CREATE TABLE egb_ms610 COMPRESS AS
22:35:20   2  SELECT
22:35:20   3  ydate
22:35:20   4  ,trend egb_trend
22:35:20   5  ,g6    egb_g6
22:35:20   6  ,gatt  egb_gatt
22:35:20   7  ,gattn egb_gattn
22:35:20   8  FROM modsrc
22:35:20   9  /

Table created.

Elapsed: 00:00:00.07
22:35:20 SQL> 
22:35:20 SQL> ANALYZE TABLE egb_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
22:35:20 SQL> 
22:35:20 SQL> -- I need a copy of the attributes:
22:35:20 SQL> 
22:35:20 SQL> 
22:35:20 SQL> DROP   TABLE egb_att;

Table dropped.

Elapsed: 00:00:00.05
22:35:20 SQL> CREATE TABLE egb_att COMPRESS AS
22:35:20   2  SELECT
22:35:20   3  ydate
22:35:20   4  ,att00 egb_att00
22:35:20   5  ,att01 egb_att01
22:35:20   6  ,att02 egb_att02
22:35:20   7  ,att03 egb_att03
22:35:20   8  ,att04 egb_att04
22:35:20   9  ,att05 egb_att05
22:35:20  10  ,att06 egb_att06
22:35:20  11  ,att07 egb_att07
22:35:20  12  ,att08 egb_att08
22:35:20  13  ,att09 egb_att09
22:35:20  14  ,att10 egb_att10
22:35:20  15  ,att11 egb_att11
22:35:20  16  ,att12 egb_att12
22:35:20  17  ,att13 egb_att13
22:35:20  18  ,att14 egb_att14
22:35:20  19  ,att15 egb_att15
22:35:20  20  ,att16 egb_att16
22:35:20  21  ,att17 egb_att17
22:35:20  22  ,att18 egb_att18
22:35:20  23  ,att19 egb_att19
22:35:20  24  ,att20 egb_att20
22:35:20  25  ,att21 egb_att21
22:35:20  26  ,att22 egb_att22
22:35:20  27  ,att23 egb_att23
22:35:20  28  ,att24 egb_att24
22:35:20  29  ,att25 egb_att25
22:35:20  30  ,att26 egb_att26
22:35:20  31  ,att27 egb_att27
22:35:20  32  ,att28 egb_att28
22:35:20  33  ,att29 egb_att29
22:35:20  34  ,att30 egb_att30
22:35:20  35  ,att31 egb_att31
22:35:20  36  ,att32 egb_att32
22:35:20  37  ,att33 egb_att33
22:35:20  38  ,att34 egb_att34
22:35:20  39  ,att35 egb_att35
22:35:20  40  ,att36 egb_att36
22:35:20  41  ,att37 egb_att37
22:35:20  42  FROM svm6162
22:35:20  43  /

Table created.

Elapsed: 00:00:00.16
22:35:20 SQL> 
22:35:20 SQL> ANALYZE TABLE egb_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
22:35:21 SQL> 
22:35:21 SQL> -- rpt
22:35:21 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.92
22:35:22 SQL> SELECT COUNT(*)FROM egb_att;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.00
22:35:22 SQL> 
22:35:22 SQL> --
22:35:22 SQL> -- ejp610.sql
22:35:22 SQL> --
22:35:22 SQL> 
22:35:22 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:35:22 SQL> 
22:35:22 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
22:35:22 SQL> 
22:35:22 SQL> -- I created di5min here:
22:35:22 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:35:22 SQL> 
22:35:22 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:35:22   2  SELECT
22:35:22   3  pair
22:35:22   4  ,ydate
22:35:22   5  ,prdate
22:35:22   6  ,rownum rnum -- acts as t in my time-series
22:35:22   7  ,clse
22:35:22   8  -- Derive a bunch of attributes from clse, the latest price:
22:35:22   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:35:22  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:35:22  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:35:22  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:35:22  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:35:22  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:35:22  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:35:22  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:35:22  17  --
22:35:22  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:35:22  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:35:22  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:35:22  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:35:22  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:35:22  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:35:22  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:35:22  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:35:22  26  --
22:35:22  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:35:22  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:35:22  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:35:22  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:35:22  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:35:22  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:35:22  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:35:22  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:35:22  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:35:22  36  FROM di5min WHERE pair LIKE'%ejp%'
22:35:22  37  AND ydate > sysdate - 95
22:35:22  38  ORDER BY ydate
22:35:22  39  /

View created.

Elapsed: 00:00:00.04
22:35:22 SQL> 
22:35:22 SQL> -- rpt
22:35:22 SQL> 
22:35:22 SQL> SELECT
22:35:22   2  pair
22:35:22   3  ,COUNT(pair)
22:35:22   4  ,MIN(clse),MAX(clse)
22:35:22   5  ,MIN(avg6),MAX(avg6)
22:35:22   6  ,MIN(ydate),MAX(ydate)
22:35:22   7  FROM svm6102
22:35:22   8  GROUP BY pair
22:35:22   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ejp_usd       19806 107.643765	115.63485 107.776148 115.509678 2010-10-03 22:40:01 2011-01-06 22:30:00

Elapsed: 00:00:00.88
22:35:23 SQL> 
22:35:23 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:35:23 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.30
22:35:23 SQL> CREATE TABLE svm6122 COMPRESS AS
22:35:23   2  SELECT
22:35:23   3  pair
22:35:23   4  ,ydate
22:35:23   5  ,prdate
22:35:23   6  ,clse
22:35:23   7  -- g6 is important. I want to predict g6:
22:35:23   8  ,ld6 - clse g6
22:35:23   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:35:23  10  -- I want more attributes from the ones I derived above:
22:35:23  11  -- clse relation to moving-min
22:35:23  12  ,clse-min4  cm4
22:35:23  13  ,clse-min6  cm6
22:35:23  14  ,clse-min8  cm8
22:35:23  15  ,clse-min10 cm10
22:35:23  16  ,clse-min12 cm12
22:35:23  17  ,clse-min14 cm14
22:35:23  18  ,clse-min16 cm16
22:35:23  19  ,clse-min18 cm18
22:35:23  20  -- clse relation to moving-avg
22:35:23  21  ,clse-avg4  ca4
22:35:23  22  ,clse-avg6  ca6
22:35:23  23  ,clse-avg8  ca8
22:35:23  24  ,clse-avg10 ca10
22:35:23  25  ,clse-avg12 ca12
22:35:23  26  ,clse-avg14 ca14
22:35:23  27  ,clse-avg16 ca16
22:35:23  28  ,clse-avg18 ca18
22:35:23  29  -- clse relation to moving-max
22:35:23  30  ,clse-max4  cx4
22:35:23  31  ,clse-max6  cx6
22:35:23  32  ,clse-max8  cx8
22:35:23  33  ,clse-max10 cx10
22:35:23  34  ,clse-max12 cx12
22:35:23  35  ,clse-max14 cx14
22:35:23  36  ,clse-max16 cx16
22:35:23  37  ,clse-max18 cx18
22:35:23  38  -- Derive more attributes.
22:35:23  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:35:23  40  -- But COVAR_POP is more stable:
22:35:23  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:35:23  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:35:23  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:35:23  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:35:23  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:35:23  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:35:23  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:35:23  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:35:23  49  -- Derive date related attributes:
22:35:23  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:35:23  51  ,0+TO_CHAR(ydate,'D')d
22:35:23  52  ,0+TO_CHAR(ydate,'W')w
22:35:23  53  -- mpm stands for minutes-past-midnight:
22:35:23  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:35:23  55  -- mph stands for minutes-past-hour:
22:35:23  56  ,0+TO_CHAR(ydate,'MI')mph
22:35:23  57  FROM svm6102
22:35:23  58  ORDER BY ydate
22:35:23  59  /

Table created.

Elapsed: 00:00:02.14
22:35:25 SQL> 
22:35:25 SQL> -- rpt
22:35:25 SQL> 
22:35:25 SQL> SELECT
22:35:25   2  pair
22:35:25   3  ,COUNT(pair)
22:35:25   4  ,MIN(clse),MAX(clse)
22:35:25   5  ,MIN(ydate),MAX(ydate)
22:35:25   6  FROM svm6122
22:35:25   7  GROUP BY pair
22:35:25   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ejp_usd       19806 107.643765	115.63485 2010-10-03 22:40:01 2011-01-06 22:30:00

Elapsed: 00:00:00.04
22:35:25 SQL> 
22:35:25 SQL> -- Prepare for derivation of NTILE based params:
22:35:25 SQL> 
22:35:25 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.32
22:35:26 SQL> CREATE TABLE svm6142 COMPRESS AS
22:35:26   2  SELECT
22:35:26   3  pair
22:35:26   4  ,ydate
22:35:26   5  ,prdate
22:35:26   6  ,clse
22:35:26   7  ,g6
22:35:26   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:35:26   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:35:26  10  ,CASE WHEN trend IS NULL THEN 1
22:35:26  11  	    WHEN trend =0      THEN 1
22:35:26  12  	    ELSE trend END trend
22:35:26  13  ,cm4
22:35:26  14  ,cm6
22:35:26  15  ,cm8
22:35:26  16  ,cm10
22:35:26  17  ,cm12
22:35:26  18  ,cm14
22:35:26  19  ,cm16
22:35:26  20  ,cm18
22:35:26  21  --
22:35:26  22  ,ca4
22:35:26  23  ,ca6
22:35:26  24  ,ca8
22:35:26  25  ,ca10
22:35:26  26  ,ca12
22:35:26  27  ,ca14
22:35:26  28  ,ca16
22:35:26  29  ,ca18
22:35:26  30  --
22:35:26  31  ,cx4
22:35:26  32  ,cx6
22:35:26  33  ,cx8
22:35:26  34  ,cx10
22:35:26  35  ,cx12
22:35:26  36  ,cx14
22:35:26  37  ,cx16
22:35:26  38  ,cx18
22:35:26  39  --
22:35:26  40  ,crr4
22:35:26  41  ,crr6
22:35:26  42  ,crr8
22:35:26  43  ,crr10
22:35:26  44  ,crr12
22:35:26  45  ,crr14
22:35:26  46  ,crr16
22:35:26  47  ,crr18
22:35:26  48  --
22:35:26  49  ,hh
22:35:26  50  ,d
22:35:26  51  ,w
22:35:26  52  ,mpm
22:35:26  53  ,mph
22:35:26  54  FROM svm6122
22:35:26  55  ORDER BY ydate
22:35:26  56  /

Table created.

Elapsed: 00:00:00.39
22:35:26 SQL> 
22:35:26 SQL> -- rpt
22:35:26 SQL> 
22:35:26 SQL> SELECT
22:35:26   2  pair
22:35:26   3  ,trend
22:35:26   4  ,gatt
22:35:26   5  ,COUNT(pair)
22:35:26   6  ,AVG(g6)
22:35:26   7  FROM svm6142
22:35:26   8  GROUP BY pair,trend,gatt
22:35:26   9  ORDER BY pair,trend,gatt
22:35:26  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      5180 -.32356774
ejp_usd 	-1 up	      4923 .277724754
ejp_usd 	-1		72
ejp_usd 	 1 nup	      5012 -.29946902
ejp_usd 	 1 up	      4619  .28878723

Elapsed: 00:00:00.03
22:35:26 SQL> 
22:35:26 SQL> 
22:35:26 SQL> -- Derive NTILE based params:
22:35:26 SQL> 
22:35:26 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.37
22:35:26 SQL> CREATE TABLE svm6162 COMPRESS AS
22:35:26   2  SELECT
22:35:26   3  pair
22:35:26   4  ,ydate
22:35:26   5  ,prdate
22:35:26   6  ,clse
22:35:26   7  ,g6
22:35:26   8  ,gatt
22:35:26   9  ,gattn
22:35:26  10  ,trend
22:35:26  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:35:26  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:35:26  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:35:26  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:35:26  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:35:26  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:35:26  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:35:26  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:35:26  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:35:26  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:35:26  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:35:26  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:35:26  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:35:26  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:35:26  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:35:26  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:35:26  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:35:26  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:35:26  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:35:26  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:35:26  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:35:26  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:35:26  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:35:26  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:35:26  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:35:26  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:35:26  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:35:26  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:35:26  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:35:26  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:35:26  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:35:26  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:35:26  43  ,hh  att32
22:35:26  44  ,d   att33
22:35:26  45  ,w   att34
22:35:26  46  ,mpm att35
22:35:26  47  ,mph att36
22:35:26  48  ,trend att37
22:35:26  49  FROM svm6142
22:35:26  50  ORDER BY ydate
22:35:26  51  /

Table created.

Elapsed: 00:00:04.96
22:35:31 SQL> 
22:35:31 SQL> -- rpt
22:35:31 SQL> 
22:35:31 SQL> SELECT
22:35:31   2  pair
22:35:31   3  ,trend
22:35:31   4  ,gatt
22:35:31   5  ,COUNT(pair)
22:35:31   6  ,AVG(g6)
22:35:31   7  FROM svm6162
22:35:31   8  GROUP BY pair,trend,gatt
22:35:31   9  ORDER BY pair,trend,gatt
22:35:31  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      5180 -.32356774
ejp_usd 	-1 up	      4923 .277724754
ejp_usd 	-1		72
ejp_usd 	 1 nup	      5012 -.29946902
ejp_usd 	 1 up	      4619  .28878723

Elapsed: 00:00:00.03
22:35:31 SQL> 
22:35:31 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.19
22:35:32 SQL> CREATE TABLE modsrc COMPRESS AS
22:35:32   2  SELECT
22:35:32   3  pair
22:35:32   4  ,ydate
22:35:32   5  ,prdate
22:35:32   6  ,trend
22:35:32   7  ,g6
22:35:32   8  ,gatt
22:35:32   9  ,gattn
22:35:32  10  FROM svm6162
22:35:32  11  /

Table created.

Elapsed: 00:00:00.09
22:35:32 SQL> 
22:35:32 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
22:35:32 SQL> 
22:35:32 SQL> DROP   TABLE ejp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
22:35:32 SQL> CREATE TABLE ejp_ms610 COMPRESS AS
22:35:32   2  SELECT
22:35:32   3  ydate
22:35:32   4  ,trend ejp_trend
22:35:32   5  ,g6    ejp_g6
22:35:32   6  ,gatt  ejp_gatt
22:35:32   7  ,gattn ejp_gattn
22:35:32   8  FROM modsrc
22:35:32   9  /

Table created.

Elapsed: 00:00:00.08
22:35:32 SQL> 
22:35:32 SQL> ANALYZE TABLE ejp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
22:35:32 SQL> 
22:35:32 SQL> -- I need a copy of the attributes:
22:35:32 SQL> 
22:35:32 SQL> 
22:35:32 SQL> DROP   TABLE ejp_att;

Table dropped.

Elapsed: 00:00:00.04
22:35:32 SQL> CREATE TABLE ejp_att COMPRESS AS
22:35:32   2  SELECT
22:35:32   3  ydate
22:35:32   4  ,att00 ejp_att00
22:35:32   5  ,att01 ejp_att01
22:35:32   6  ,att02 ejp_att02
22:35:32   7  ,att03 ejp_att03
22:35:32   8  ,att04 ejp_att04
22:35:32   9  ,att05 ejp_att05
22:35:32  10  ,att06 ejp_att06
22:35:32  11  ,att07 ejp_att07
22:35:32  12  ,att08 ejp_att08
22:35:32  13  ,att09 ejp_att09
22:35:32  14  ,att10 ejp_att10
22:35:32  15  ,att11 ejp_att11
22:35:32  16  ,att12 ejp_att12
22:35:32  17  ,att13 ejp_att13
22:35:32  18  ,att14 ejp_att14
22:35:32  19  ,att15 ejp_att15
22:35:32  20  ,att16 ejp_att16
22:35:32  21  ,att17 ejp_att17
22:35:32  22  ,att18 ejp_att18
22:35:32  23  ,att19 ejp_att19
22:35:32  24  ,att20 ejp_att20
22:35:32  25  ,att21 ejp_att21
22:35:32  26  ,att22 ejp_att22
22:35:32  27  ,att23 ejp_att23
22:35:32  28  ,att24 ejp_att24
22:35:32  29  ,att25 ejp_att25
22:35:32  30  ,att26 ejp_att26
22:35:32  31  ,att27 ejp_att27
22:35:32  32  ,att28 ejp_att28
22:35:32  33  ,att29 ejp_att29
22:35:32  34  ,att30 ejp_att30
22:35:32  35  ,att31 ejp_att31
22:35:32  36  ,att32 ejp_att32
22:35:32  37  ,att33 ejp_att33
22:35:32  38  ,att34 ejp_att34
22:35:32  39  ,att35 ejp_att35
22:35:32  40  ,att36 ejp_att36
22:35:32  41  ,att37 ejp_att37
22:35:32  42  FROM svm6162
22:35:32  43  /

Table created.

Elapsed: 00:00:00.23
22:35:33 SQL> 
22:35:33 SQL> ANALYZE TABLE ejp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:01.41
22:35:34 SQL> 
22:35:34 SQL> -- rpt
22:35:34 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19806

Elapsed: 00:00:00.87
22:35:35 SQL> SELECT COUNT(*)FROM ejp_att;

  COUNT(*)
----------
     19806

Elapsed: 00:00:00.01
22:35:35 SQL> 
22:35:35 SQL> --
22:35:35 SQL> -- ajp610.sql
22:35:35 SQL> --
22:35:35 SQL> 
22:35:35 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:35:35 SQL> 
22:35:35 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.41
22:35:35 SQL> 
22:35:35 SQL> -- I created di5min here:
22:35:35 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:35:35 SQL> 
22:35:35 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:35:35   2  SELECT
22:35:35   3  pair
22:35:35   4  ,ydate
22:35:35   5  ,prdate
22:35:35   6  ,rownum rnum -- acts as t in my time-series
22:35:35   7  ,clse
22:35:35   8  -- Derive a bunch of attributes from clse, the latest price:
22:35:35   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:35:35  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:35:35  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:35:35  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:35:35  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:35:35  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:35:35  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:35:35  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:35:35  17  --
22:35:35  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:35:35  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:35:35  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:35:35  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:35:35  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:35:35  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:35:35  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:35:35  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:35:35  26  --
22:35:35  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:35:35  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:35:35  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:35:35  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:35:35  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:35:35  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:35:35  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:35:35  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:35:35  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:35:35  36  FROM di5min WHERE pair LIKE'%ajp%'
22:35:35  37  AND ydate > sysdate - 95
22:35:35  38  ORDER BY ydate
22:35:35  39  /

View created.

Elapsed: 00:00:00.05
22:35:35 SQL> 
22:35:35 SQL> -- rpt
22:35:35 SQL> 
22:35:35 SQL> SELECT
22:35:35   2  pair
22:35:35   3  ,COUNT(pair)
22:35:35   4  ,MIN(clse),MAX(clse)
22:35:35   5  ,MIN(avg6),MAX(avg6)
22:35:35   6  ,MIN(ydate),MAX(ydate)
22:35:35   7  FROM svm6102
22:35:35   8  GROUP BY pair
22:35:35   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ajp_usd       19803  78.249976 83.6669853 78.5106193  83.546306 2010-10-03 22:40:01 2011-01-06 22:30:00

Elapsed: 00:00:00.80
22:35:36 SQL> 
22:35:36 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:35:36 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.28
22:35:36 SQL> CREATE TABLE svm6122 COMPRESS AS
22:35:36   2  SELECT
22:35:36   3  pair
22:35:36   4  ,ydate
22:35:36   5  ,prdate
22:35:36   6  ,clse
22:35:36   7  -- g6 is important. I want to predict g6:
22:35:36   8  ,ld6 - clse g6
22:35:36   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:35:36  10  -- I want more attributes from the ones I derived above:
22:35:36  11  -- clse relation to moving-min
22:35:36  12  ,clse-min4  cm4
22:35:36  13  ,clse-min6  cm6
22:35:36  14  ,clse-min8  cm8
22:35:36  15  ,clse-min10 cm10
22:35:36  16  ,clse-min12 cm12
22:35:36  17  ,clse-min14 cm14
22:35:36  18  ,clse-min16 cm16
22:35:36  19  ,clse-min18 cm18
22:35:36  20  -- clse relation to moving-avg
22:35:36  21  ,clse-avg4  ca4
22:35:36  22  ,clse-avg6  ca6
22:35:36  23  ,clse-avg8  ca8
22:35:36  24  ,clse-avg10 ca10
22:35:36  25  ,clse-avg12 ca12
22:35:36  26  ,clse-avg14 ca14
22:35:36  27  ,clse-avg16 ca16
22:35:36  28  ,clse-avg18 ca18
22:35:36  29  -- clse relation to moving-max
22:35:36  30  ,clse-max4  cx4
22:35:36  31  ,clse-max6  cx6
22:35:36  32  ,clse-max8  cx8
22:35:36  33  ,clse-max10 cx10
22:35:36  34  ,clse-max12 cx12
22:35:36  35  ,clse-max14 cx14
22:35:36  36  ,clse-max16 cx16
22:35:36  37  ,clse-max18 cx18
22:35:36  38  -- Derive more attributes.
22:35:36  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:35:36  40  -- But COVAR_POP is more stable:
22:35:36  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:35:36  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:35:36  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:35:36  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:35:36  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:35:36  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:35:36  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:35:36  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:35:36  49  -- Derive date related attributes:
22:35:36  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:35:36  51  ,0+TO_CHAR(ydate,'D')d
22:35:36  52  ,0+TO_CHAR(ydate,'W')w
22:35:36  53  -- mpm stands for minutes-past-midnight:
22:35:36  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:35:36  55  -- mph stands for minutes-past-hour:
22:35:36  56  ,0+TO_CHAR(ydate,'MI')mph
22:35:36  57  FROM svm6102
22:35:36  58  ORDER BY ydate
22:35:36  59  /

Table created.

Elapsed: 00:00:02.10
22:35:38 SQL> 
22:35:38 SQL> -- rpt
22:35:38 SQL> 
22:35:38 SQL> SELECT
22:35:38   2  pair
22:35:38   3  ,COUNT(pair)
22:35:38   4  ,MIN(clse),MAX(clse)
22:35:38   5  ,MIN(ydate),MAX(ydate)
22:35:38   6  FROM svm6122
22:35:38   7  GROUP BY pair
22:35:38   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ajp_usd       19803  78.249976 83.6669853 2010-10-03 22:40:01 2011-01-06 22:30:00

Elapsed: 00:00:00.03
22:35:39 SQL> 
22:35:39 SQL> -- Prepare for derivation of NTILE based params:
22:35:39 SQL> 
22:35:39 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.24
22:35:39 SQL> CREATE TABLE svm6142 COMPRESS AS
22:35:39   2  SELECT
22:35:39   3  pair
22:35:39   4  ,ydate
22:35:39   5  ,prdate
22:35:39   6  ,clse
22:35:39   7  ,g6
22:35:39   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:35:39   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:35:39  10  ,CASE WHEN trend IS NULL THEN 1
22:35:39  11  	    WHEN trend =0      THEN 1
22:35:39  12  	    ELSE trend END trend
22:35:39  13  ,cm4
22:35:39  14  ,cm6
22:35:39  15  ,cm8
22:35:39  16  ,cm10
22:35:39  17  ,cm12
22:35:39  18  ,cm14
22:35:39  19  ,cm16
22:35:39  20  ,cm18
22:35:39  21  --
22:35:39  22  ,ca4
22:35:39  23  ,ca6
22:35:39  24  ,ca8
22:35:39  25  ,ca10
22:35:39  26  ,ca12
22:35:39  27  ,ca14
22:35:39  28  ,ca16
22:35:39  29  ,ca18
22:35:39  30  --
22:35:39  31  ,cx4
22:35:39  32  ,cx6
22:35:39  33  ,cx8
22:35:39  34  ,cx10
22:35:39  35  ,cx12
22:35:39  36  ,cx14
22:35:39  37  ,cx16
22:35:39  38  ,cx18
22:35:39  39  --
22:35:39  40  ,crr4
22:35:39  41  ,crr6
22:35:39  42  ,crr8
22:35:39  43  ,crr10
22:35:39  44  ,crr12
22:35:39  45  ,crr14
22:35:39  46  ,crr16
22:35:39  47  ,crr18
22:35:39  48  --
22:35:39  49  ,hh
22:35:39  50  ,d
22:35:39  51  ,w
22:35:39  52  ,mpm
22:35:39  53  ,mph
22:35:39  54  FROM svm6122
22:35:39  55  ORDER BY ydate
22:35:39  56  /

Table created.

Elapsed: 00:00:00.39
22:35:39 SQL> 
22:35:39 SQL> -- rpt
22:35:39 SQL> 
22:35:39 SQL> SELECT
22:35:39   2  pair
22:35:39   3  ,trend
22:35:39   4  ,gatt
22:35:39   5  ,COUNT(pair)
22:35:39   6  ,AVG(g6)
22:35:39   7  FROM svm6142
22:35:39   8  GROUP BY pair,trend,gatt
22:35:39   9  ORDER BY pair,trend,gatt
22:35:39  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4399 -.22361521
ajp_usd 	-1 up	      5224 .223515198
ajp_usd 	-1		46
ajp_usd 	 1 nup	      5299 -.20310158
ajp_usd 	 1 up	      4809 .212756466
ajp_usd 	 1		26

6 rows selected.

Elapsed: 00:00:00.04
22:35:39 SQL> 
22:35:39 SQL> 
22:35:39 SQL> -- Derive NTILE based params:
22:35:39 SQL> 
22:35:39 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
22:35:39 SQL> CREATE TABLE svm6162 COMPRESS AS
22:35:39   2  SELECT
22:35:39   3  pair
22:35:39   4  ,ydate
22:35:39   5  ,prdate
22:35:39   6  ,clse
22:35:39   7  ,g6
22:35:39   8  ,gatt
22:35:39   9  ,gattn
22:35:39  10  ,trend
22:35:39  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:35:39  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:35:39  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:35:39  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:35:39  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:35:39  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:35:39  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:35:39  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:35:39  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:35:39  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:35:39  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:35:39  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:35:39  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:35:39  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:35:39  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:35:39  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:35:39  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:35:39  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:35:39  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:35:39  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:35:39  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:35:39  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:35:39  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:35:39  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:35:39  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:35:39  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:35:39  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:35:39  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:35:39  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:35:39  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:35:39  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:35:39  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:35:39  43  ,hh  att32
22:35:39  44  ,d   att33
22:35:39  45  ,w   att34
22:35:39  46  ,mpm att35
22:35:39  47  ,mph att36
22:35:39  48  ,trend att37
22:35:39  49  FROM svm6142
22:35:39  50  ORDER BY ydate
22:35:39  51  /

Table created.

Elapsed: 00:00:05.03
22:35:44 SQL> 
22:35:44 SQL> -- rpt
22:35:44 SQL> 
22:35:44 SQL> SELECT
22:35:44   2  pair
22:35:44   3  ,trend
22:35:44   4  ,gatt
22:35:44   5  ,COUNT(pair)
22:35:44   6  ,AVG(g6)
22:35:44   7  FROM svm6162
22:35:44   8  GROUP BY pair,trend,gatt
22:35:44   9  ORDER BY pair,trend,gatt
22:35:44  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4399 -.22361521
ajp_usd 	-1 up	      5224 .223515198
ajp_usd 	-1		46
ajp_usd 	 1 nup	      5299 -.20310158
ajp_usd 	 1 up	      4809 .212756466
ajp_usd 	 1		26

6 rows selected.

Elapsed: 00:00:00.03
22:35:44 SQL> 
22:35:44 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.14
22:35:45 SQL> CREATE TABLE modsrc COMPRESS AS
22:35:45   2  SELECT
22:35:45   3  pair
22:35:45   4  ,ydate
22:35:45   5  ,prdate
22:35:45   6  ,trend
22:35:45   7  ,g6
22:35:45   8  ,gatt
22:35:45   9  ,gattn
22:35:45  10  FROM svm6162
22:35:45  11  /

Table created.

Elapsed: 00:00:00.09
22:35:45 SQL> 
22:35:45 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
22:35:45 SQL> 
22:35:45 SQL> DROP   TABLE ajp_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
22:35:45 SQL> CREATE TABLE ajp_ms610 COMPRESS AS
22:35:45   2  SELECT
22:35:45   3  ydate
22:35:45   4  ,trend ajp_trend
22:35:45   5  ,g6    ajp_g6
22:35:45   6  ,gatt  ajp_gatt
22:35:45   7  ,gattn ajp_gattn
22:35:45   8  FROM modsrc
22:35:45   9  /

Table created.

Elapsed: 00:00:00.09
22:35:45 SQL> 
22:35:45 SQL> ANALYZE TABLE ajp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
22:35:45 SQL> 
22:35:45 SQL> -- I need a copy of the attributes:
22:35:45 SQL> 
22:35:45 SQL> 
22:35:45 SQL> DROP   TABLE ajp_att;

Table dropped.

Elapsed: 00:00:00.04
22:35:45 SQL> CREATE TABLE ajp_att COMPRESS AS
22:35:45   2  SELECT
22:35:45   3  ydate
22:35:45   4  ,att00 ajp_att00
22:35:45   5  ,att01 ajp_att01
22:35:45   6  ,att02 ajp_att02
22:35:45   7  ,att03 ajp_att03
22:35:45   8  ,att04 ajp_att04
22:35:45   9  ,att05 ajp_att05
22:35:45  10  ,att06 ajp_att06
22:35:45  11  ,att07 ajp_att07
22:35:45  12  ,att08 ajp_att08
22:35:45  13  ,att09 ajp_att09
22:35:45  14  ,att10 ajp_att10
22:35:45  15  ,att11 ajp_att11
22:35:45  16  ,att12 ajp_att12
22:35:45  17  ,att13 ajp_att13
22:35:45  18  ,att14 ajp_att14
22:35:45  19  ,att15 ajp_att15
22:35:45  20  ,att16 ajp_att16
22:35:45  21  ,att17 ajp_att17
22:35:45  22  ,att18 ajp_att18
22:35:45  23  ,att19 ajp_att19
22:35:45  24  ,att20 ajp_att20
22:35:45  25  ,att21 ajp_att21
22:35:45  26  ,att22 ajp_att22
22:35:45  27  ,att23 ajp_att23
22:35:45  28  ,att24 ajp_att24
22:35:45  29  ,att25 ajp_att25
22:35:45  30  ,att26 ajp_att26
22:35:45  31  ,att27 ajp_att27
22:35:45  32  ,att28 ajp_att28
22:35:45  33  ,att29 ajp_att29
22:35:45  34  ,att30 ajp_att30
22:35:45  35  ,att31 ajp_att31
22:35:45  36  ,att32 ajp_att32
22:35:45  37  ,att33 ajp_att33
22:35:45  38  ,att34 ajp_att34
22:35:45  39  ,att35 ajp_att35
22:35:45  40  ,att36 ajp_att36
22:35:45  41  ,att37 ajp_att37
22:35:45  42  FROM svm6162
22:35:45  43  /

Table created.

Elapsed: 00:00:00.16
22:35:45 SQL> 
22:35:45 SQL> ANALYZE TABLE ajp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
22:35:46 SQL> 
22:35:46 SQL> -- rpt
22:35:46 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19803

Elapsed: 00:00:00.76
22:35:47 SQL> SELECT COUNT(*)FROM ajp_att;

  COUNT(*)
----------
     19803

Elapsed: 00:00:00.00
22:35:47 SQL> 
22:35:47 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
