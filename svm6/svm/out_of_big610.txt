
SQL*Plus: Release 11.2.0.1.0 Production on Wed Jan 5 15:25:03 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

15:25:03 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
15:25:03 SQL> 15:25:03 SQL> --
15:25:03 SQL> -- eur610.sql
15:25:03 SQL> --
15:25:03 SQL> 
15:25:03 SQL> -- Creates views and tables for backtesting a forex SVM strategy
15:25:03 SQL> 
15:25:03 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.05
15:25:04 SQL> 
15:25:04 SQL> -- I created di5min here:
15:25:04 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
15:25:04 SQL> 
15:25:04 SQL> CREATE OR REPLACE VIEW svm6102 AS
15:25:04   2  SELECT
15:25:04   3  pair
15:25:04   4  ,ydate
15:25:04   5  ,prdate
15:25:04   6  ,rownum rnum -- acts as t in my time-series
15:25:04   7  ,clse
15:25:04   8  -- Derive a bunch of attributes from clse, the latest price:
15:25:04   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
15:25:04  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
15:25:04  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
15:25:04  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
15:25:04  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
15:25:04  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
15:25:04  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
15:25:04  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
15:25:04  17  --
15:25:04  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
15:25:04  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
15:25:04  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
15:25:04  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
15:25:04  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
15:25:04  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
15:25:04  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
15:25:04  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
15:25:04  26  --
15:25:04  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
15:25:04  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
15:25:04  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
15:25:04  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
15:25:04  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
15:25:04  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
15:25:04  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
15:25:04  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
15:25:04  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
15:25:04  36  FROM di5min WHERE pair LIKE'%eur%'
15:25:04  37  AND ydate > sysdate - 95
15:25:04  38  ORDER BY ydate
15:25:04  39  /

View created.

Elapsed: 00:00:00.12
15:25:04 SQL> 
15:25:04 SQL> -- rpt
15:25:04 SQL> 
15:25:04 SQL> SELECT
15:25:04   2  pair
15:25:04   3  ,COUNT(pair)
15:25:04   4  ,MIN(clse),MAX(clse)
15:25:04   5  ,MIN(avg6),MAX(avg6)
15:25:04   6  ,MIN(ydate),MAX(ydate)
15:25:04   7  FROM svm6102
15:25:04   8  GROUP BY pair
15:25:04   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19464    1.29735	   1.4273 1.29875103 1.42436233 2010-10-03 20:55:01 2011-01-05 15:20:00

Elapsed: 00:00:00.94
15:25:05 SQL> 
15:25:05 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
15:25:05 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.04
15:25:05 SQL> CREATE TABLE svm6122 COMPRESS AS
15:25:05   2  SELECT
15:25:05   3  pair
15:25:05   4  ,ydate
15:25:05   5  ,prdate
15:25:05   6  ,clse
15:25:05   7  -- g6 is important. I want to predict g6:
15:25:05   8  ,ld6 - clse g6
15:25:05   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
15:25:05  10  -- I want more attributes from the ones I derived above:
15:25:05  11  -- clse relation to moving-min
15:25:05  12  ,clse-min4  cm4
15:25:05  13  ,clse-min6  cm6
15:25:05  14  ,clse-min8  cm8
15:25:05  15  ,clse-min10 cm10
15:25:05  16  ,clse-min12 cm12
15:25:05  17  ,clse-min14 cm14
15:25:05  18  ,clse-min16 cm16
15:25:05  19  ,clse-min18 cm18
15:25:05  20  -- clse relation to moving-avg
15:25:05  21  ,clse-avg4  ca4
15:25:05  22  ,clse-avg6  ca6
15:25:05  23  ,clse-avg8  ca8
15:25:05  24  ,clse-avg10 ca10
15:25:05  25  ,clse-avg12 ca12
15:25:05  26  ,clse-avg14 ca14
15:25:05  27  ,clse-avg16 ca16
15:25:05  28  ,clse-avg18 ca18
15:25:05  29  -- clse relation to moving-max
15:25:05  30  ,clse-max4  cx4
15:25:05  31  ,clse-max6  cx6
15:25:05  32  ,clse-max8  cx8
15:25:05  33  ,clse-max10 cx10
15:25:05  34  ,clse-max12 cx12
15:25:05  35  ,clse-max14 cx14
15:25:05  36  ,clse-max16 cx16
15:25:05  37  ,clse-max18 cx18
15:25:05  38  -- Derive more attributes.
15:25:05  39  -- I want to use CORR() here to help SVM see the shape of the series.
15:25:05  40  -- But COVAR_POP is more stable:
15:25:05  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
15:25:05  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
15:25:05  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
15:25:05  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
15:25:05  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
15:25:05  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
15:25:05  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
15:25:05  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
15:25:05  49  -- Derive date related attributes:
15:25:05  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
15:25:05  51  ,0+TO_CHAR(ydate,'D')d
15:25:05  52  ,0+TO_CHAR(ydate,'W')w
15:25:05  53  -- mpm stands for minutes-past-midnight:
15:25:05  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
15:25:05  55  -- mph stands for minutes-past-hour:
15:25:05  56  ,0+TO_CHAR(ydate,'MI')mph
15:25:05  57  FROM svm6102
15:25:05  58  ORDER BY ydate
15:25:05  59  /

Table created.

Elapsed: 00:00:02.36
15:25:07 SQL> 
15:25:07 SQL> -- rpt
15:25:07 SQL> 
15:25:07 SQL> SELECT
15:25:07   2  pair
15:25:07   3  ,COUNT(pair)
15:25:07   4  ,MIN(clse),MAX(clse)
15:25:07   5  ,MIN(ydate),MAX(ydate)
15:25:07   6  FROM svm6122
15:25:07   7  GROUP BY pair
15:25:07   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19464    1.29735	   1.4273 2010-10-03 20:55:01 2011-01-05 15:20:00

Elapsed: 00:00:00.05
15:25:07 SQL> 
15:25:07 SQL> -- Prepare for derivation of NTILE based params:
15:25:07 SQL> 
15:25:07 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.69
15:25:08 SQL> CREATE TABLE svm6142 COMPRESS AS
15:25:08   2  SELECT
15:25:08   3  pair
15:25:08   4  ,ydate
15:25:08   5  ,prdate
15:25:08   6  ,clse
15:25:08   7  ,g6
15:25:08   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
15:25:08   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
15:25:08  10  ,CASE WHEN trend IS NULL THEN 1
15:25:08  11  	    WHEN trend =0      THEN 1
15:25:08  12  	    ELSE trend END trend
15:25:08  13  ,cm4
15:25:08  14  ,cm6
15:25:08  15  ,cm8
15:25:08  16  ,cm10
15:25:08  17  ,cm12
15:25:08  18  ,cm14
15:25:08  19  ,cm16
15:25:08  20  ,cm18
15:25:08  21  --
15:25:08  22  ,ca4
15:25:08  23  ,ca6
15:25:08  24  ,ca8
15:25:08  25  ,ca10
15:25:08  26  ,ca12
15:25:08  27  ,ca14
15:25:08  28  ,ca16
15:25:08  29  ,ca18
15:25:08  30  --
15:25:08  31  ,cx4
15:25:08  32  ,cx6
15:25:08  33  ,cx8
15:25:08  34  ,cx10
15:25:08  35  ,cx12
15:25:08  36  ,cx14
15:25:08  37  ,cx16
15:25:08  38  ,cx18
15:25:08  39  --
15:25:08  40  ,crr4
15:25:08  41  ,crr6
15:25:08  42  ,crr8
15:25:08  43  ,crr10
15:25:08  44  ,crr12
15:25:08  45  ,crr14
15:25:08  46  ,crr16
15:25:08  47  ,crr18
15:25:08  48  --
15:25:08  49  ,hh
15:25:08  50  ,d
15:25:08  51  ,w
15:25:08  52  ,mpm
15:25:08  53  ,mph
15:25:08  54  FROM svm6122
15:25:08  55  ORDER BY ydate
15:25:08  56  /

Table created.

Elapsed: 00:00:00.37
15:25:08 SQL> 
15:25:08 SQL> -- rpt
15:25:08 SQL> 
15:25:08 SQL> SELECT
15:25:08   2  pair
15:25:08   3  ,trend
15:25:08   4  ,gatt
15:25:08   5  ,COUNT(pair)
15:25:08   6  ,AVG(g6)
15:25:08   7  FROM svm6142
15:25:08   8  GROUP BY pair,trend,gatt
15:25:08   9  ORDER BY pair,trend,gatt
15:25:08  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6285 -.00313239
eur_usd 	-1 up	      3562 .004453576
eur_usd 	-1		72
eur_usd 	 1 nup	      5840 -.00325501
eur_usd 	 1 up	      3705 .005071238

Elapsed: 00:00:00.04
15:25:08 SQL> 
15:25:08 SQL> 
15:25:08 SQL> -- Derive NTILE based params:
15:25:08 SQL> 
15:25:08 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.54
15:25:09 SQL> CREATE TABLE svm6162 COMPRESS AS
15:25:09   2  SELECT
15:25:09   3  pair
15:25:09   4  ,ydate
15:25:09   5  ,prdate
15:25:09   6  ,clse
15:25:09   7  ,g6
15:25:09   8  ,gatt
15:25:09   9  ,gattn
15:25:09  10  ,trend
15:25:09  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
15:25:09  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
15:25:09  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
15:25:09  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
15:25:09  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
15:25:09  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
15:25:09  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
15:25:09  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
15:25:09  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
15:25:09  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
15:25:09  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
15:25:09  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
15:25:09  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
15:25:09  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
15:25:09  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
15:25:09  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
15:25:09  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
15:25:09  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
15:25:09  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
15:25:09  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
15:25:09  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
15:25:09  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
15:25:09  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
15:25:09  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
15:25:09  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
15:25:09  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
15:25:09  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
15:25:09  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
15:25:09  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
15:25:09  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
15:25:09  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
15:25:09  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
15:25:09  43  ,hh  att32
15:25:09  44  ,d   att33
15:25:09  45  ,w   att34
15:25:09  46  ,mpm att35
15:25:09  47  ,mph att36
15:25:09  48  ,trend att37
15:25:09  49  FROM svm6142
15:25:09  50  ORDER BY ydate
15:25:09  51  /

Table created.

Elapsed: 00:00:04.88
15:25:14 SQL> 
15:25:14 SQL> -- rpt
15:25:14 SQL> 
15:25:14 SQL> SELECT
15:25:14   2  pair
15:25:14   3  ,trend
15:25:14   4  ,gatt
15:25:14   5  ,COUNT(pair)
15:25:14   6  ,AVG(g6)
15:25:14   7  FROM svm6162
15:25:14   8  GROUP BY pair,trend,gatt
15:25:14   9  ORDER BY pair,trend,gatt
15:25:14  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6285 -.00313239
eur_usd 	-1 up	      3562 .004453576
eur_usd 	-1		72
eur_usd 	 1 nup	      5840 -.00325501
eur_usd 	 1 up	      3705 .005071238

Elapsed: 00:00:00.03
15:25:14 SQL> 
15:25:14 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.26
15:25:14 SQL> CREATE TABLE modsrc COMPRESS AS
15:25:14   2  SELECT
15:25:14   3  pair
15:25:14   4  ,ydate
15:25:14   5  ,prdate
15:25:14   6  ,trend
15:25:14   7  ,g6
15:25:14   8  ,gatt
15:25:14   9  ,gattn
15:25:14  10  FROM svm6162
15:25:14  11  /

Table created.

Elapsed: 00:00:00.08
15:25:14 SQL> 
15:25:14 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
15:25:14 SQL> 
15:25:14 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
15:25:14 SQL> CREATE TABLE eur_ms610 COMPRESS AS
15:25:14   2  SELECT
15:25:14   3  ydate
15:25:14   4  ,trend eur_trend
15:25:14   5  ,g6    eur_g6
15:25:14   6  ,gatt  eur_gatt
15:25:14   7  ,gattn eur_gattn
15:25:14   8  FROM modsrc
15:25:14   9  /

Table created.

Elapsed: 00:00:00.07
15:25:14 SQL> 
15:25:14 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
15:25:14 SQL> 
15:25:14 SQL> -- I need a copy of the attributes:
15:25:14 SQL> 
15:25:14 SQL> 
15:25:14 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.05
15:25:14 SQL> CREATE TABLE eur_att COMPRESS AS
15:25:14   2  SELECT
15:25:14   3  ydate
15:25:14   4  ,att00 eur_att00
15:25:14   5  ,att01 eur_att01
15:25:14   6  ,att02 eur_att02
15:25:14   7  ,att03 eur_att03
15:25:14   8  ,att04 eur_att04
15:25:14   9  ,att05 eur_att05
15:25:14  10  ,att06 eur_att06
15:25:14  11  ,att07 eur_att07
15:25:14  12  ,att08 eur_att08
15:25:14  13  ,att09 eur_att09
15:25:14  14  ,att10 eur_att10
15:25:14  15  ,att11 eur_att11
15:25:14  16  ,att12 eur_att12
15:25:14  17  ,att13 eur_att13
15:25:14  18  ,att14 eur_att14
15:25:14  19  ,att15 eur_att15
15:25:14  20  ,att16 eur_att16
15:25:14  21  ,att17 eur_att17
15:25:14  22  ,att18 eur_att18
15:25:14  23  ,att19 eur_att19
15:25:14  24  ,att20 eur_att20
15:25:14  25  ,att21 eur_att21
15:25:14  26  ,att22 eur_att22
15:25:14  27  ,att23 eur_att23
15:25:14  28  ,att24 eur_att24
15:25:14  29  ,att25 eur_att25
15:25:14  30  ,att26 eur_att26
15:25:14  31  ,att27 eur_att27
15:25:14  32  ,att28 eur_att28
15:25:14  33  ,att29 eur_att29
15:25:14  34  ,att30 eur_att30
15:25:14  35  ,att31 eur_att31
15:25:14  36  ,att32 eur_att32
15:25:14  37  ,att33 eur_att33
15:25:14  38  ,att34 eur_att34
15:25:14  39  ,att35 eur_att35
15:25:14  40  ,att36 eur_att36
15:25:14  41  ,att37 eur_att37
15:25:14  42  FROM svm6162
15:25:14  43  /

Table created.

Elapsed: 00:00:00.21
15:25:15 SQL> 
15:25:15 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.42
15:25:15 SQL> 
15:25:15 SQL> -- rpt
15:25:15 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19464

Elapsed: 00:00:00.87
15:25:16 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19464

Elapsed: 00:00:00.00
15:25:16 SQL> 
15:25:16 SQL> --
15:25:16 SQL> -- aud610.sql
15:25:16 SQL> --
15:25:16 SQL> 
15:25:16 SQL> -- Creates views and tables for backtesting a forex SVM strategy
15:25:16 SQL> 
15:25:16 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.43
15:25:16 SQL> 
15:25:16 SQL> -- I created di5min here:
15:25:16 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
15:25:16 SQL> 
15:25:16 SQL> CREATE OR REPLACE VIEW svm6102 AS
15:25:16   2  SELECT
15:25:16   3  pair
15:25:16   4  ,ydate
15:25:16   5  ,prdate
15:25:16   6  ,rownum rnum -- acts as t in my time-series
15:25:16   7  ,clse
15:25:16   8  -- Derive a bunch of attributes from clse, the latest price:
15:25:16   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
15:25:16  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
15:25:16  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
15:25:16  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
15:25:16  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
15:25:16  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
15:25:16  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
15:25:16  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
15:25:16  17  --
15:25:16  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
15:25:16  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
15:25:16  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
15:25:16  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
15:25:16  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
15:25:16  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
15:25:16  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
15:25:16  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
15:25:16  26  --
15:25:16  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
15:25:16  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
15:25:16  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
15:25:16  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
15:25:16  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
15:25:16  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
15:25:16  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
15:25:16  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
15:25:16  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
15:25:16  36  FROM di5min WHERE pair LIKE'%aud%'
15:25:16  37  AND ydate > sysdate - 95
15:25:16  38  ORDER BY ydate
15:25:16  39  /

View created.

Elapsed: 00:00:00.03
15:25:16 SQL> 
15:25:16 SQL> -- rpt
15:25:16 SQL> 
15:25:16 SQL> SELECT
15:25:16   2  pair
15:25:16   3  ,COUNT(pair)
15:25:16   4  ,MIN(clse),MAX(clse)
15:25:16   5  ,MIN(avg6),MAX(avg6)
15:25:16   6  ,MIN(ydate),MAX(ydate)
15:25:16   7  FROM svm6102
15:25:16   8  GROUP BY pair
15:25:16   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19461	.95405	  1.02495 .957141438 1.02284247 2010-10-03 20:55:01 2011-01-05 15:20:00

Elapsed: 00:00:00.87
15:25:17 SQL> 
15:25:17 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
15:25:17 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.29
15:25:18 SQL> CREATE TABLE svm6122 COMPRESS AS
15:25:18   2  SELECT
15:25:18   3  pair
15:25:18   4  ,ydate
15:25:18   5  ,prdate
15:25:18   6  ,clse
15:25:18   7  -- g6 is important. I want to predict g6:
15:25:18   8  ,ld6 - clse g6
15:25:18   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
15:25:18  10  -- I want more attributes from the ones I derived above:
15:25:18  11  -- clse relation to moving-min
15:25:18  12  ,clse-min4  cm4
15:25:18  13  ,clse-min6  cm6
15:25:18  14  ,clse-min8  cm8
15:25:18  15  ,clse-min10 cm10
15:25:18  16  ,clse-min12 cm12
15:25:18  17  ,clse-min14 cm14
15:25:18  18  ,clse-min16 cm16
15:25:18  19  ,clse-min18 cm18
15:25:18  20  -- clse relation to moving-avg
15:25:18  21  ,clse-avg4  ca4
15:25:18  22  ,clse-avg6  ca6
15:25:18  23  ,clse-avg8  ca8
15:25:18  24  ,clse-avg10 ca10
15:25:18  25  ,clse-avg12 ca12
15:25:18  26  ,clse-avg14 ca14
15:25:18  27  ,clse-avg16 ca16
15:25:18  28  ,clse-avg18 ca18
15:25:18  29  -- clse relation to moving-max
15:25:18  30  ,clse-max4  cx4
15:25:18  31  ,clse-max6  cx6
15:25:18  32  ,clse-max8  cx8
15:25:18  33  ,clse-max10 cx10
15:25:18  34  ,clse-max12 cx12
15:25:18  35  ,clse-max14 cx14
15:25:18  36  ,clse-max16 cx16
15:25:18  37  ,clse-max18 cx18
15:25:18  38  -- Derive more attributes.
15:25:18  39  -- I want to use CORR() here to help SVM see the shape of the series.
15:25:18  40  -- But COVAR_POP is more stable:
15:25:18  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
15:25:18  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
15:25:18  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
15:25:18  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
15:25:18  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
15:25:18  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
15:25:18  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
15:25:18  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
15:25:18  49  -- Derive date related attributes:
15:25:18  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
15:25:18  51  ,0+TO_CHAR(ydate,'D')d
15:25:18  52  ,0+TO_CHAR(ydate,'W')w
15:25:18  53  -- mpm stands for minutes-past-midnight:
15:25:18  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
15:25:18  55  -- mph stands for minutes-past-hour:
15:25:18  56  ,0+TO_CHAR(ydate,'MI')mph
15:25:18  57  FROM svm6102
15:25:18  58  ORDER BY ydate
15:25:18  59  /

Table created.

Elapsed: 00:00:02.07
15:25:20 SQL> 
15:25:20 SQL> -- rpt
15:25:20 SQL> 
15:25:20 SQL> SELECT
15:25:20   2  pair
15:25:20   3  ,COUNT(pair)
15:25:20   4  ,MIN(clse),MAX(clse)
15:25:20   5  ,MIN(ydate),MAX(ydate)
15:25:20   6  FROM svm6122
15:25:20   7  GROUP BY pair
15:25:20   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19461	.95405	  1.02495 2010-10-03 20:55:01 2011-01-05 15:20:00

Elapsed: 00:00:00.04
15:25:20 SQL> 
15:25:20 SQL> -- Prepare for derivation of NTILE based params:
15:25:20 SQL> 
15:25:20 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.17
15:25:20 SQL> CREATE TABLE svm6142 COMPRESS AS
15:25:20   2  SELECT
15:25:20   3  pair
15:25:20   4  ,ydate
15:25:20   5  ,prdate
15:25:20   6  ,clse
15:25:20   7  ,g6
15:25:20   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
15:25:20   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
15:25:20  10  ,CASE WHEN trend IS NULL THEN 1
15:25:20  11  	    WHEN trend =0      THEN 1
15:25:20  12  	    ELSE trend END trend
15:25:20  13  ,cm4
15:25:20  14  ,cm6
15:25:20  15  ,cm8
15:25:20  16  ,cm10
15:25:20  17  ,cm12
15:25:20  18  ,cm14
15:25:20  19  ,cm16
15:25:20  20  ,cm18
15:25:20  21  --
15:25:20  22  ,ca4
15:25:20  23  ,ca6
15:25:20  24  ,ca8
15:25:20  25  ,ca10
15:25:20  26  ,ca12
15:25:20  27  ,ca14
15:25:20  28  ,ca16
15:25:20  29  ,ca18
15:25:20  30  --
15:25:20  31  ,cx4
15:25:20  32  ,cx6
15:25:20  33  ,cx8
15:25:20  34  ,cx10
15:25:20  35  ,cx12
15:25:20  36  ,cx14
15:25:20  37  ,cx16
15:25:20  38  ,cx18
15:25:20  39  --
15:25:20  40  ,crr4
15:25:20  41  ,crr6
15:25:20  42  ,crr8
15:25:20  43  ,crr10
15:25:20  44  ,crr12
15:25:20  45  ,crr14
15:25:20  46  ,crr16
15:25:20  47  ,crr18
15:25:20  48  --
15:25:20  49  ,hh
15:25:20  50  ,d
15:25:20  51  ,w
15:25:20  52  ,mpm
15:25:20  53  ,mph
15:25:20  54  FROM svm6122
15:25:20  55  ORDER BY ydate
15:25:20  56  /

Table created.

Elapsed: 00:00:00.37
15:25:20 SQL> 
15:25:20 SQL> -- rpt
15:25:20 SQL> 
15:25:20 SQL> SELECT
15:25:20   2  pair
15:25:20   3  ,trend
15:25:20   4  ,gatt
15:25:20   5  ,COUNT(pair)
15:25:20   6  ,AVG(g6)
15:25:20   7  FROM svm6142
15:25:20   8  GROUP BY pair,trend,gatt
15:25:20   9  ORDER BY pair,trend,gatt
15:25:20  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5529 -.00219117
aud_usd 	-1 up	      3646 .003769261
aud_usd 	-1		71
aud_usd 	 1 nup	      6621 -.00213267
aud_usd 	 1 up	      3593 .004054752
aud_usd 	 1		 1

6 rows selected.

Elapsed: 00:00:00.04
15:25:20 SQL> 
15:25:20 SQL> 
15:25:20 SQL> -- Derive NTILE based params:
15:25:20 SQL> 
15:25:20 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
15:25:20 SQL> CREATE TABLE svm6162 COMPRESS AS
15:25:20   2  SELECT
15:25:20   3  pair
15:25:20   4  ,ydate
15:25:20   5  ,prdate
15:25:20   6  ,clse
15:25:20   7  ,g6
15:25:20   8  ,gatt
15:25:20   9  ,gattn
15:25:20  10  ,trend
15:25:20  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
15:25:20  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
15:25:20  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
15:25:20  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
15:25:20  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
15:25:20  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
15:25:20  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
15:25:20  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
15:25:20  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
15:25:20  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
15:25:20  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
15:25:20  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
15:25:20  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
15:25:20  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
15:25:20  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
15:25:20  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
15:25:20  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
15:25:20  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
15:25:20  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
15:25:20  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
15:25:20  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
15:25:20  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
15:25:20  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
15:25:20  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
15:25:20  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
15:25:20  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
15:25:20  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
15:25:20  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
15:25:20  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
15:25:20  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
15:25:20  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
15:25:20  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
15:25:20  43  ,hh  att32
15:25:20  44  ,d   att33
15:25:20  45  ,w   att34
15:25:20  46  ,mpm att35
15:25:20  47  ,mph att36
15:25:20  48  ,trend att37
15:25:20  49  FROM svm6142
15:25:20  50  ORDER BY ydate
15:25:20  51  /

Table created.

Elapsed: 00:00:04.71
15:25:25 SQL> 
15:25:25 SQL> -- rpt
15:25:25 SQL> 
15:25:25 SQL> SELECT
15:25:25   2  pair
15:25:25   3  ,trend
15:25:25   4  ,gatt
15:25:25   5  ,COUNT(pair)
15:25:25   6  ,AVG(g6)
15:25:25   7  FROM svm6162
15:25:25   8  GROUP BY pair,trend,gatt
15:25:25   9  ORDER BY pair,trend,gatt
15:25:25  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5529 -.00219117
aud_usd 	-1 up	      3646 .003769261
aud_usd 	-1		71
aud_usd 	 1 nup	      6621 -.00213267
aud_usd 	 1 up	      3593 .004054752
aud_usd 	 1		 1

6 rows selected.

Elapsed: 00:00:00.03
15:25:25 SQL> 
15:25:25 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.14
15:25:25 SQL> CREATE TABLE modsrc COMPRESS AS
15:25:25   2  SELECT
15:25:25   3  pair
15:25:25   4  ,ydate
15:25:25   5  ,prdate
15:25:25   6  ,trend
15:25:25   7  ,g6
15:25:25   8  ,gatt
15:25:25   9  ,gattn
15:25:25  10  FROM svm6162
15:25:25  11  /

Table created.

Elapsed: 00:00:00.09
15:25:25 SQL> 
15:25:25 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
15:25:26 SQL> 
15:25:26 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
15:25:26 SQL> CREATE TABLE aud_ms610 COMPRESS AS
15:25:26   2  SELECT
15:25:26   3  ydate
15:25:26   4  ,trend aud_trend
15:25:26   5  ,g6    aud_g6
15:25:26   6  ,gatt  aud_gatt
15:25:26   7  ,gattn aud_gattn
15:25:26   8  FROM modsrc
15:25:26   9  /

Table created.

Elapsed: 00:00:00.07
15:25:26 SQL> 
15:25:26 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
15:25:26 SQL> 
15:25:26 SQL> -- I need a copy of the attributes:
15:25:26 SQL> 
15:25:26 SQL> 
15:25:26 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.06
15:25:26 SQL> CREATE TABLE aud_att COMPRESS AS
15:25:26   2  SELECT
15:25:26   3  ydate
15:25:26   4  ,att00 aud_att00
15:25:26   5  ,att01 aud_att01
15:25:26   6  ,att02 aud_att02
15:25:26   7  ,att03 aud_att03
15:25:26   8  ,att04 aud_att04
15:25:26   9  ,att05 aud_att05
15:25:26  10  ,att06 aud_att06
15:25:26  11  ,att07 aud_att07
15:25:26  12  ,att08 aud_att08
15:25:26  13  ,att09 aud_att09
15:25:26  14  ,att10 aud_att10
15:25:26  15  ,att11 aud_att11
15:25:26  16  ,att12 aud_att12
15:25:26  17  ,att13 aud_att13
15:25:26  18  ,att14 aud_att14
15:25:26  19  ,att15 aud_att15
15:25:26  20  ,att16 aud_att16
15:25:26  21  ,att17 aud_att17
15:25:26  22  ,att18 aud_att18
15:25:26  23  ,att19 aud_att19
15:25:26  24  ,att20 aud_att20
15:25:26  25  ,att21 aud_att21
15:25:26  26  ,att22 aud_att22
15:25:26  27  ,att23 aud_att23
15:25:26  28  ,att24 aud_att24
15:25:26  29  ,att25 aud_att25
15:25:26  30  ,att26 aud_att26
15:25:26  31  ,att27 aud_att27
15:25:26  32  ,att28 aud_att28
15:25:26  33  ,att29 aud_att29
15:25:26  34  ,att30 aud_att30
15:25:26  35  ,att31 aud_att31
15:25:26  36  ,att32 aud_att32
15:25:26  37  ,att33 aud_att33
15:25:26  38  ,att34 aud_att34
15:25:26  39  ,att35 aud_att35
15:25:26  40  ,att36 aud_att36
15:25:26  41  ,att37 aud_att37
15:25:26  42  FROM svm6162
15:25:26  43  /

Table created.

Elapsed: 00:00:00.16
15:25:26 SQL> 
15:25:26 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.53
15:25:27 SQL> 
15:25:27 SQL> -- rpt
15:25:27 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19461

Elapsed: 00:00:00.87
15:25:28 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19461

Elapsed: 00:00:00.01
15:25:28 SQL> 
15:25:28 SQL> --
15:25:28 SQL> -- gbp610.sql
15:25:28 SQL> --
15:25:28 SQL> 
15:25:28 SQL> -- Creates views and tables for backtesting a forex SVM strategy
15:25:28 SQL> 
15:25:28 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:01.00
15:25:29 SQL> 
15:25:29 SQL> -- I created di5min here:
15:25:29 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
15:25:29 SQL> 
15:25:29 SQL> CREATE OR REPLACE VIEW svm6102 AS
15:25:29   2  SELECT
15:25:29   3  pair
15:25:29   4  ,ydate
15:25:29   5  ,prdate
15:25:29   6  ,rownum rnum -- acts as t in my time-series
15:25:29   7  ,clse
15:25:29   8  -- Derive a bunch of attributes from clse, the latest price:
15:25:29   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
15:25:29  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
15:25:29  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
15:25:29  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
15:25:29  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
15:25:29  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
15:25:29  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
15:25:29  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
15:25:29  17  --
15:25:29  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
15:25:29  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
15:25:29  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
15:25:29  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
15:25:29  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
15:25:29  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
15:25:29  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
15:25:29  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
15:25:29  26  --
15:25:29  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
15:25:29  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
15:25:29  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
15:25:29  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
15:25:29  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
15:25:29  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
15:25:29  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
15:25:29  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
15:25:29  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
15:25:29  36  FROM di5min WHERE pair LIKE'%gbp%'
15:25:29  37  AND ydate > sysdate - 95
15:25:29  38  ORDER BY ydate
15:25:29  39  /

View created.

Elapsed: 00:00:00.05
15:25:29 SQL> 
15:25:29 SQL> -- rpt
15:25:29 SQL> 
15:25:29 SQL> SELECT
15:25:29   2  pair
15:25:29   3  ,COUNT(pair)
15:25:29   4  ,MIN(clse),MAX(clse)
15:25:29   5  ,MIN(avg6),MAX(avg6)
15:25:29   6  ,MIN(ydate),MAX(ydate)
15:25:29   7  FROM svm6102
15:25:29   8  GROUP BY pair
15:25:29   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19463   1.535325	   1.6295 1.53696747 1.62716986 2010-10-03 20:55:01 2011-01-05 15:20:00

Elapsed: 00:00:00.91
15:25:29 SQL> 
15:25:29 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
15:25:29 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.26
15:25:30 SQL> CREATE TABLE svm6122 COMPRESS AS
15:25:30   2  SELECT
15:25:30   3  pair
15:25:30   4  ,ydate
15:25:30   5  ,prdate
15:25:30   6  ,clse
15:25:30   7  -- g6 is important. I want to predict g6:
15:25:30   8  ,ld6 - clse g6
15:25:30   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
15:25:30  10  -- I want more attributes from the ones I derived above:
15:25:30  11  -- clse relation to moving-min
15:25:30  12  ,clse-min4  cm4
15:25:30  13  ,clse-min6  cm6
15:25:30  14  ,clse-min8  cm8
15:25:30  15  ,clse-min10 cm10
15:25:30  16  ,clse-min12 cm12
15:25:30  17  ,clse-min14 cm14
15:25:30  18  ,clse-min16 cm16
15:25:30  19  ,clse-min18 cm18
15:25:30  20  -- clse relation to moving-avg
15:25:30  21  ,clse-avg4  ca4
15:25:30  22  ,clse-avg6  ca6
15:25:30  23  ,clse-avg8  ca8
15:25:30  24  ,clse-avg10 ca10
15:25:30  25  ,clse-avg12 ca12
15:25:30  26  ,clse-avg14 ca14
15:25:30  27  ,clse-avg16 ca16
15:25:30  28  ,clse-avg18 ca18
15:25:30  29  -- clse relation to moving-max
15:25:30  30  ,clse-max4  cx4
15:25:30  31  ,clse-max6  cx6
15:25:30  32  ,clse-max8  cx8
15:25:30  33  ,clse-max10 cx10
15:25:30  34  ,clse-max12 cx12
15:25:30  35  ,clse-max14 cx14
15:25:30  36  ,clse-max16 cx16
15:25:30  37  ,clse-max18 cx18
15:25:30  38  -- Derive more attributes.
15:25:30  39  -- I want to use CORR() here to help SVM see the shape of the series.
15:25:30  40  -- But COVAR_POP is more stable:
15:25:30  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
15:25:30  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
15:25:30  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
15:25:30  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
15:25:30  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
15:25:30  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
15:25:30  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
15:25:30  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
15:25:30  49  -- Derive date related attributes:
15:25:30  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
15:25:30  51  ,0+TO_CHAR(ydate,'D')d
15:25:30  52  ,0+TO_CHAR(ydate,'W')w
15:25:30  53  -- mpm stands for minutes-past-midnight:
15:25:30  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
15:25:30  55  -- mph stands for minutes-past-hour:
15:25:30  56  ,0+TO_CHAR(ydate,'MI')mph
15:25:30  57  FROM svm6102
15:25:30  58  ORDER BY ydate
15:25:30  59  /

Table created.

Elapsed: 00:00:02.11
15:25:32 SQL> 
15:25:32 SQL> -- rpt
15:25:32 SQL> 
15:25:32 SQL> SELECT
15:25:32   2  pair
15:25:32   3  ,COUNT(pair)
15:25:32   4  ,MIN(clse),MAX(clse)
15:25:32   5  ,MIN(ydate),MAX(ydate)
15:25:32   6  FROM svm6122
15:25:32   7  GROUP BY pair
15:25:32   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19463   1.535325	   1.6295 2010-10-03 20:55:01 2011-01-05 15:20:00

Elapsed: 00:00:00.04
15:25:32 SQL> 
15:25:32 SQL> -- Prepare for derivation of NTILE based params:
15:25:32 SQL> 
15:25:32 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
15:25:32 SQL> CREATE TABLE svm6142 COMPRESS AS
15:25:32   2  SELECT
15:25:32   3  pair
15:25:32   4  ,ydate
15:25:32   5  ,prdate
15:25:32   6  ,clse
15:25:32   7  ,g6
15:25:32   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
15:25:32   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
15:25:32  10  ,CASE WHEN trend IS NULL THEN 1
15:25:32  11  	    WHEN trend =0      THEN 1
15:25:32  12  	    ELSE trend END trend
15:25:32  13  ,cm4
15:25:32  14  ,cm6
15:25:32  15  ,cm8
15:25:32  16  ,cm10
15:25:32  17  ,cm12
15:25:32  18  ,cm14
15:25:32  19  ,cm16
15:25:32  20  ,cm18
15:25:32  21  --
15:25:32  22  ,ca4
15:25:32  23  ,ca6
15:25:32  24  ,ca8
15:25:32  25  ,ca10
15:25:32  26  ,ca12
15:25:32  27  ,ca14
15:25:32  28  ,ca16
15:25:32  29  ,ca18
15:25:32  30  --
15:25:32  31  ,cx4
15:25:32  32  ,cx6
15:25:32  33  ,cx8
15:25:32  34  ,cx10
15:25:32  35  ,cx12
15:25:32  36  ,cx14
15:25:32  37  ,cx16
15:25:32  38  ,cx18
15:25:32  39  --
15:25:32  40  ,crr4
15:25:32  41  ,crr6
15:25:32  42  ,crr8
15:25:32  43  ,crr10
15:25:32  44  ,crr12
15:25:32  45  ,crr14
15:25:32  46  ,crr16
15:25:32  47  ,crr18
15:25:32  48  --
15:25:32  49  ,hh
15:25:32  50  ,d
15:25:32  51  ,w
15:25:32  52  ,mpm
15:25:32  53  ,mph
15:25:32  54  FROM svm6122
15:25:32  55  ORDER BY ydate
15:25:32  56  /

Table created.

Elapsed: 00:00:00.37
15:25:33 SQL> 
15:25:33 SQL> -- rpt
15:25:33 SQL> 
15:25:33 SQL> SELECT
15:25:33   2  pair
15:25:33   3  ,trend
15:25:33   4  ,gatt
15:25:33   5  ,COUNT(pair)
15:25:33   6  ,AVG(g6)
15:25:33   7  FROM svm6142
15:25:33   8  GROUP BY pair,trend,gatt
15:25:33   9  ORDER BY pair,trend,gatt
15:25:33  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6315 -.00264115
gbp_usd 	-1 up	      3510 .004373914
gbp_usd 	-1		27
gbp_usd 	 1 nup	      6126 -.00262532
gbp_usd 	 1 up	      3440 .004531722
gbp_usd 	 1		45

6 rows selected.

Elapsed: 00:00:00.04
15:25:33 SQL> 
15:25:33 SQL> 
15:25:33 SQL> -- Derive NTILE based params:
15:25:33 SQL> 
15:25:33 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.17
15:25:33 SQL> CREATE TABLE svm6162 COMPRESS AS
15:25:33   2  SELECT
15:25:33   3  pair
15:25:33   4  ,ydate
15:25:33   5  ,prdate
15:25:33   6  ,clse
15:25:33   7  ,g6
15:25:33   8  ,gatt
15:25:33   9  ,gattn
15:25:33  10  ,trend
15:25:33  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
15:25:33  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
15:25:33  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
15:25:33  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
15:25:33  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
15:25:33  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
15:25:33  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
15:25:33  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
15:25:33  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
15:25:33  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
15:25:33  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
15:25:33  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
15:25:33  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
15:25:33  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
15:25:33  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
15:25:33  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
15:25:33  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
15:25:33  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
15:25:33  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
15:25:33  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
15:25:33  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
15:25:33  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
15:25:33  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
15:25:33  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
15:25:33  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
15:25:33  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
15:25:33  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
15:25:33  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
15:25:33  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
15:25:33  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
15:25:33  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
15:25:33  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
15:25:33  43  ,hh  att32
15:25:33  44  ,d   att33
15:25:33  45  ,w   att34
15:25:33  46  ,mpm att35
15:25:33  47  ,mph att36
15:25:33  48  ,trend att37
15:25:33  49  FROM svm6142
15:25:33  50  ORDER BY ydate
15:25:33  51  /

Table created.

Elapsed: 00:00:04.65
15:25:37 SQL> 
15:25:37 SQL> -- rpt
15:25:37 SQL> 
15:25:37 SQL> SELECT
15:25:37   2  pair
15:25:37   3  ,trend
15:25:37   4  ,gatt
15:25:37   5  ,COUNT(pair)
15:25:37   6  ,AVG(g6)
15:25:37   7  FROM svm6162
15:25:37   8  GROUP BY pair,trend,gatt
15:25:37   9  ORDER BY pair,trend,gatt
15:25:37  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6315 -.00264115
gbp_usd 	-1 up	      3510 .004373914
gbp_usd 	-1		27
gbp_usd 	 1 nup	      6126 -.00262532
gbp_usd 	 1 up	      3440 .004531722
gbp_usd 	 1		45

6 rows selected.

Elapsed: 00:00:00.03
15:25:37 SQL> 
15:25:37 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.11
15:25:38 SQL> CREATE TABLE modsrc COMPRESS AS
15:25:38   2  SELECT
15:25:38   3  pair
15:25:38   4  ,ydate
15:25:38   5  ,prdate
15:25:38   6  ,trend
15:25:38   7  ,g6
15:25:38   8  ,gatt
15:25:38   9  ,gattn
15:25:38  10  FROM svm6162
15:25:38  11  /

Table created.

Elapsed: 00:00:00.09
15:25:38 SQL> 
15:25:38 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
15:25:38 SQL> 
15:25:38 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
15:25:38 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
15:25:38   2  SELECT
15:25:38   3  ydate
15:25:38   4  ,trend gbp_trend
15:25:38   5  ,g6    gbp_g6
15:25:38   6  ,gatt  gbp_gatt
15:25:38   7  ,gattn gbp_gattn
15:25:38   8  FROM modsrc
15:25:38   9  /

Table created.

Elapsed: 00:00:00.07
15:25:38 SQL> 
15:25:38 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
15:25:38 SQL> 
15:25:38 SQL> -- I need a copy of the attributes:
15:25:38 SQL> 
15:25:38 SQL> 
15:25:38 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.05
15:25:38 SQL> CREATE TABLE gbp_att COMPRESS AS
15:25:38   2  SELECT
15:25:38   3  ydate
15:25:38   4  ,att00 gbp_att00
15:25:38   5  ,att01 gbp_att01
15:25:38   6  ,att02 gbp_att02
15:25:38   7  ,att03 gbp_att03
15:25:38   8  ,att04 gbp_att04
15:25:38   9  ,att05 gbp_att05
15:25:38  10  ,att06 gbp_att06
15:25:38  11  ,att07 gbp_att07
15:25:38  12  ,att08 gbp_att08
15:25:38  13  ,att09 gbp_att09
15:25:38  14  ,att10 gbp_att10
15:25:38  15  ,att11 gbp_att11
15:25:38  16  ,att12 gbp_att12
15:25:38  17  ,att13 gbp_att13
15:25:38  18  ,att14 gbp_att14
15:25:38  19  ,att15 gbp_att15
15:25:38  20  ,att16 gbp_att16
15:25:38  21  ,att17 gbp_att17
15:25:38  22  ,att18 gbp_att18
15:25:38  23  ,att19 gbp_att19
15:25:38  24  ,att20 gbp_att20
15:25:38  25  ,att21 gbp_att21
15:25:38  26  ,att22 gbp_att22
15:25:38  27  ,att23 gbp_att23
15:25:38  28  ,att24 gbp_att24
15:25:38  29  ,att25 gbp_att25
15:25:38  30  ,att26 gbp_att26
15:25:38  31  ,att27 gbp_att27
15:25:38  32  ,att28 gbp_att28
15:25:38  33  ,att29 gbp_att29
15:25:38  34  ,att30 gbp_att30
15:25:38  35  ,att31 gbp_att31
15:25:38  36  ,att32 gbp_att32
15:25:38  37  ,att33 gbp_att33
15:25:38  38  ,att34 gbp_att34
15:25:38  39  ,att35 gbp_att35
15:25:38  40  ,att36 gbp_att36
15:25:38  41  ,att37 gbp_att37
15:25:38  42  FROM svm6162
15:25:38  43  /

Table created.

Elapsed: 00:00:00.16
15:25:38 SQL> 
15:25:38 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
15:25:39 SQL> 
15:25:39 SQL> -- rpt
15:25:39 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19463

Elapsed: 00:00:00.84
15:25:40 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19463

Elapsed: 00:00:00.01
15:25:40 SQL> 
15:25:40 SQL> --
15:25:40 SQL> -- jpy610.sql
15:25:40 SQL> --
15:25:40 SQL> 
15:25:40 SQL> -- Creates views and tables for backtesting a forex SVM strategy
15:25:40 SQL> 
15:25:40 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.44
15:25:40 SQL> 
15:25:40 SQL> -- I created di5min here:
15:25:40 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
15:25:40 SQL> 
15:25:40 SQL> CREATE OR REPLACE VIEW svm6102 AS
15:25:40   2  SELECT
15:25:40   3  pair
15:25:40   4  ,ydate
15:25:40   5  ,prdate
15:25:40   6  ,rownum rnum -- acts as t in my time-series
15:25:40   7  ,clse
15:25:40   8  -- Derive a bunch of attributes from clse, the latest price:
15:25:40   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
15:25:40  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
15:25:40  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
15:25:40  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
15:25:40  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
15:25:40  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
15:25:40  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
15:25:40  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
15:25:40  17  --
15:25:40  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
15:25:40  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
15:25:40  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
15:25:40  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
15:25:40  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
15:25:40  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
15:25:40  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
15:25:40  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
15:25:40  26  --
15:25:40  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
15:25:40  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
15:25:40  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
15:25:40  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
15:25:40  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
15:25:40  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
15:25:40  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
15:25:40  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
15:25:40  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
15:25:40  36  FROM di5min WHERE pair LIKE'%jpy%'
15:25:40  37  AND ydate > sysdate - 95
15:25:40  38  ORDER BY ydate
15:25:40  39  /

View created.

Elapsed: 00:00:00.04
15:25:40 SQL> 
15:25:40 SQL> -- rpt
15:25:40 SQL> 
15:25:40 SQL> SELECT
15:25:40   2  pair
15:25:40   3  ,COUNT(pair)
15:25:40   4  ,MIN(clse),MAX(clse)
15:25:40   5  ,MIN(avg6),MAX(avg6)
15:25:40   6  ,MIN(ydate),MAX(ydate)
15:25:40   7  FROM svm6102
15:25:40   8  GROUP BY pair
15:25:40   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19461	 80.25	   84.485 80.3595205 84.3105479 2010-10-03 20:55:01 2011-01-05 15:20:00

Elapsed: 00:00:00.90
15:25:41 SQL> 
15:25:41 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
15:25:41 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.28
15:25:41 SQL> CREATE TABLE svm6122 COMPRESS AS
15:25:41   2  SELECT
15:25:41   3  pair
15:25:41   4  ,ydate
15:25:41   5  ,prdate
15:25:41   6  ,clse
15:25:41   7  -- g6 is important. I want to predict g6:
15:25:41   8  ,ld6 - clse g6
15:25:41   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
15:25:41  10  -- I want more attributes from the ones I derived above:
15:25:41  11  -- clse relation to moving-min
15:25:41  12  ,clse-min4  cm4
15:25:41  13  ,clse-min6  cm6
15:25:41  14  ,clse-min8  cm8
15:25:41  15  ,clse-min10 cm10
15:25:41  16  ,clse-min12 cm12
15:25:41  17  ,clse-min14 cm14
15:25:41  18  ,clse-min16 cm16
15:25:41  19  ,clse-min18 cm18
15:25:41  20  -- clse relation to moving-avg
15:25:41  21  ,clse-avg4  ca4
15:25:41  22  ,clse-avg6  ca6
15:25:41  23  ,clse-avg8  ca8
15:25:41  24  ,clse-avg10 ca10
15:25:41  25  ,clse-avg12 ca12
15:25:41  26  ,clse-avg14 ca14
15:25:41  27  ,clse-avg16 ca16
15:25:41  28  ,clse-avg18 ca18
15:25:41  29  -- clse relation to moving-max
15:25:41  30  ,clse-max4  cx4
15:25:41  31  ,clse-max6  cx6
15:25:41  32  ,clse-max8  cx8
15:25:41  33  ,clse-max10 cx10
15:25:41  34  ,clse-max12 cx12
15:25:41  35  ,clse-max14 cx14
15:25:41  36  ,clse-max16 cx16
15:25:41  37  ,clse-max18 cx18
15:25:41  38  -- Derive more attributes.
15:25:41  39  -- I want to use CORR() here to help SVM see the shape of the series.
15:25:41  40  -- But COVAR_POP is more stable:
15:25:41  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
15:25:41  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
15:25:41  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
15:25:41  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
15:25:41  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
15:25:41  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
15:25:41  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
15:25:41  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
15:25:41  49  -- Derive date related attributes:
15:25:41  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
15:25:41  51  ,0+TO_CHAR(ydate,'D')d
15:25:41  52  ,0+TO_CHAR(ydate,'W')w
15:25:41  53  -- mpm stands for minutes-past-midnight:
15:25:41  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
15:25:41  55  -- mph stands for minutes-past-hour:
15:25:41  56  ,0+TO_CHAR(ydate,'MI')mph
15:25:41  57  FROM svm6102
15:25:41  58  ORDER BY ydate
15:25:41  59  /

Table created.

Elapsed: 00:00:02.29
15:25:44 SQL> 
15:25:44 SQL> -- rpt
15:25:44 SQL> 
15:25:44 SQL> SELECT
15:25:44   2  pair
15:25:44   3  ,COUNT(pair)
15:25:44   4  ,MIN(clse),MAX(clse)
15:25:44   5  ,MIN(ydate),MAX(ydate)
15:25:44   6  FROM svm6122
15:25:44   7  GROUP BY pair
15:25:44   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19461	 80.25	   84.485 2010-10-03 20:55:01 2011-01-05 15:20:00

Elapsed: 00:00:00.04
15:25:44 SQL> 
15:25:44 SQL> -- Prepare for derivation of NTILE based params:
15:25:44 SQL> 
15:25:44 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.21
15:25:44 SQL> CREATE TABLE svm6142 COMPRESS AS
15:25:44   2  SELECT
15:25:44   3  pair
15:25:44   4  ,ydate
15:25:44   5  ,prdate
15:25:44   6  ,clse
15:25:44   7  ,g6
15:25:44   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
15:25:44   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
15:25:44  10  ,CASE WHEN trend IS NULL THEN 1
15:25:44  11  	    WHEN trend =0      THEN 1
15:25:44  12  	    ELSE trend END trend
15:25:44  13  ,cm4
15:25:44  14  ,cm6
15:25:44  15  ,cm8
15:25:44  16  ,cm10
15:25:44  17  ,cm12
15:25:44  18  ,cm14
15:25:44  19  ,cm16
15:25:44  20  ,cm18
15:25:44  21  --
15:25:44  22  ,ca4
15:25:44  23  ,ca6
15:25:44  24  ,ca8
15:25:44  25  ,ca10
15:25:44  26  ,ca12
15:25:44  27  ,ca14
15:25:44  28  ,ca16
15:25:44  29  ,ca18
15:25:44  30  --
15:25:44  31  ,cx4
15:25:44  32  ,cx6
15:25:44  33  ,cx8
15:25:44  34  ,cx10
15:25:44  35  ,cx12
15:25:44  36  ,cx14
15:25:44  37  ,cx16
15:25:44  38  ,cx18
15:25:44  39  --
15:25:44  40  ,crr4
15:25:44  41  ,crr6
15:25:44  42  ,crr8
15:25:44  43  ,crr10
15:25:44  44  ,crr12
15:25:44  45  ,crr14
15:25:44  46  ,crr16
15:25:44  47  ,crr18
15:25:44  48  --
15:25:44  49  ,hh
15:25:44  50  ,d
15:25:44  51  ,w
15:25:44  52  ,mpm
15:25:44  53  ,mph
15:25:44  54  FROM svm6122
15:25:44  55  ORDER BY ydate
15:25:44  56  /

Table created.

Elapsed: 00:00:00.37
15:25:44 SQL> 
15:25:44 SQL> -- rpt
15:25:44 SQL> 
15:25:44 SQL> SELECT
15:25:44   2  pair
15:25:44   3  ,trend
15:25:44   4  ,gatt
15:25:44   5  ,COUNT(pair)
15:25:44   6  ,AVG(g6)
15:25:44   7  FROM svm6142
15:25:44   8  GROUP BY pair,trend,gatt
15:25:44   9  ORDER BY pair,trend,gatt
15:25:44  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5111 -.16664378
usd_jpy 	-1 up	      4827 .168312651
usd_jpy 	-1		11
usd_jpy 	 1 nup	      4993  -.1561771
usd_jpy 	 1 up	      4458 .168145678
usd_jpy 	 1		61

6 rows selected.

Elapsed: 00:00:00.04
15:25:44 SQL> 
15:25:44 SQL> 
15:25:44 SQL> -- Derive NTILE based params:
15:25:44 SQL> 
15:25:44 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.19
15:25:44 SQL> CREATE TABLE svm6162 COMPRESS AS
15:25:44   2  SELECT
15:25:44   3  pair
15:25:44   4  ,ydate
15:25:44   5  ,prdate
15:25:44   6  ,clse
15:25:44   7  ,g6
15:25:44   8  ,gatt
15:25:44   9  ,gattn
15:25:44  10  ,trend
15:25:44  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
15:25:44  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
15:25:44  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
15:25:44  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
15:25:44  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
15:25:44  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
15:25:44  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
15:25:44  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
15:25:44  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
15:25:44  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
15:25:44  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
15:25:44  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
15:25:44  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
15:25:44  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
15:25:44  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
15:25:44  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
15:25:44  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
15:25:44  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
15:25:44  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
15:25:44  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
15:25:44  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
15:25:44  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
15:25:44  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
15:25:44  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
15:25:44  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
15:25:44  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
15:25:44  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
15:25:44  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
15:25:44  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
15:25:44  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
15:25:44  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
15:25:44  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
15:25:44  43  ,hh  att32
15:25:44  44  ,d   att33
15:25:44  45  ,w   att34
15:25:44  46  ,mpm att35
15:25:44  47  ,mph att36
15:25:44  48  ,trend att37
15:25:44  49  FROM svm6142
15:25:44  50  ORDER BY ydate
15:25:44  51  /

Table created.

Elapsed: 00:00:04.80
15:25:49 SQL> 
15:25:49 SQL> -- rpt
15:25:49 SQL> 
15:25:49 SQL> SELECT
15:25:49   2  pair
15:25:49   3  ,trend
15:25:49   4  ,gatt
15:25:49   5  ,COUNT(pair)
15:25:49   6  ,AVG(g6)
15:25:49   7  FROM svm6162
15:25:49   8  GROUP BY pair,trend,gatt
15:25:49   9  ORDER BY pair,trend,gatt
15:25:49  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5111 -.16664378
usd_jpy 	-1 up	      4827 .168312651
usd_jpy 	-1		11
usd_jpy 	 1 nup	      4993  -.1561771
usd_jpy 	 1 up	      4458 .168145678
usd_jpy 	 1		61

6 rows selected.

Elapsed: 00:00:00.03
15:25:49 SQL> 
15:25:49 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
15:25:49 SQL> CREATE TABLE modsrc COMPRESS AS
15:25:49   2  SELECT
15:25:49   3  pair
15:25:49   4  ,ydate
15:25:49   5  ,prdate
15:25:49   6  ,trend
15:25:49   7  ,g6
15:25:49   8  ,gatt
15:25:49   9  ,gattn
15:25:49  10  FROM svm6162
15:25:49  11  /

Table created.

Elapsed: 00:00:00.08
15:25:49 SQL> 
15:25:49 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
15:25:50 SQL> 
15:25:50 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
15:25:50 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
15:25:50   2  SELECT
15:25:50   3  ydate
15:25:50   4  ,trend jpy_trend
15:25:50   5  ,g6    jpy_g6
15:25:50   6  ,gatt  jpy_gatt
15:25:50   7  ,gattn jpy_gattn
15:25:50   8  FROM modsrc
15:25:50   9  /

Table created.

Elapsed: 00:00:00.10
15:25:50 SQL> 
15:25:50 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
15:25:50 SQL> 
15:25:50 SQL> -- I need a copy of the attributes:
15:25:50 SQL> 
15:25:50 SQL> 
15:25:50 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.04
15:25:50 SQL> CREATE TABLE jpy_att COMPRESS AS
15:25:50   2  SELECT
15:25:50   3  ydate
15:25:50   4  ,att00 jpy_att00
15:25:50   5  ,att01 jpy_att01
15:25:50   6  ,att02 jpy_att02
15:25:50   7  ,att03 jpy_att03
15:25:50   8  ,att04 jpy_att04
15:25:50   9  ,att05 jpy_att05
15:25:50  10  ,att06 jpy_att06
15:25:50  11  ,att07 jpy_att07
15:25:50  12  ,att08 jpy_att08
15:25:50  13  ,att09 jpy_att09
15:25:50  14  ,att10 jpy_att10
15:25:50  15  ,att11 jpy_att11
15:25:50  16  ,att12 jpy_att12
15:25:50  17  ,att13 jpy_att13
15:25:50  18  ,att14 jpy_att14
15:25:50  19  ,att15 jpy_att15
15:25:50  20  ,att16 jpy_att16
15:25:50  21  ,att17 jpy_att17
15:25:50  22  ,att18 jpy_att18
15:25:50  23  ,att19 jpy_att19
15:25:50  24  ,att20 jpy_att20
15:25:50  25  ,att21 jpy_att21
15:25:50  26  ,att22 jpy_att22
15:25:50  27  ,att23 jpy_att23
15:25:50  28  ,att24 jpy_att24
15:25:50  29  ,att25 jpy_att25
15:25:50  30  ,att26 jpy_att26
15:25:50  31  ,att27 jpy_att27
15:25:50  32  ,att28 jpy_att28
15:25:50  33  ,att29 jpy_att29
15:25:50  34  ,att30 jpy_att30
15:25:50  35  ,att31 jpy_att31
15:25:50  36  ,att32 jpy_att32
15:25:50  37  ,att33 jpy_att33
15:25:50  38  ,att34 jpy_att34
15:25:50  39  ,att35 jpy_att35
15:25:50  40  ,att36 jpy_att36
15:25:50  41  ,att37 jpy_att37
15:25:50  42  FROM svm6162
15:25:50  43  /

Table created.

Elapsed: 00:00:00.20
15:25:50 SQL> 
15:25:50 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
15:25:51 SQL> 
15:25:51 SQL> -- rpt
15:25:51 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19461

Elapsed: 00:00:00.94
15:25:52 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19461

Elapsed: 00:00:00.00
15:25:52 SQL> 
15:25:52 SQL> --
15:25:52 SQL> -- cad610.sql
15:25:52 SQL> --
15:25:52 SQL> 
15:25:52 SQL> -- Creates views and tables for backtesting a forex SVM strategy
15:25:52 SQL> 
15:25:52 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.41
15:25:52 SQL> 
15:25:52 SQL> -- I created di5min here:
15:25:52 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
15:25:52 SQL> 
15:25:52 SQL> CREATE OR REPLACE VIEW svm6102 AS
15:25:52   2  SELECT
15:25:52   3  pair
15:25:52   4  ,ydate
15:25:52   5  ,prdate
15:25:52   6  ,rownum rnum -- acts as t in my time-series
15:25:52   7  ,clse
15:25:52   8  -- Derive a bunch of attributes from clse, the latest price:
15:25:52   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
15:25:52  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
15:25:52  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
15:25:52  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
15:25:52  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
15:25:52  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
15:25:52  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
15:25:52  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
15:25:52  17  --
15:25:52  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
15:25:52  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
15:25:52  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
15:25:52  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
15:25:52  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
15:25:52  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
15:25:52  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
15:25:52  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
15:25:52  26  --
15:25:52  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
15:25:52  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
15:25:52  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
15:25:52  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
15:25:52  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
15:25:52  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
15:25:52  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
15:25:52  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
15:25:52  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
15:25:52  36  FROM di5min WHERE pair LIKE'%cad%'
15:25:52  37  AND ydate > sysdate - 95
15:25:52  38  ORDER BY ydate
15:25:52  39  /

View created.

Elapsed: 00:00:00.05
15:25:52 SQL> 
15:25:52 SQL> -- rpt
15:25:52 SQL> 
15:25:52 SQL> SELECT
15:25:52   2  pair
15:25:52   3  ,COUNT(pair)
15:25:52   4  ,MIN(clse),MAX(clse)
15:25:52   5  ,MIN(avg6),MAX(avg6)
15:25:52   6  ,MIN(ydate),MAX(ydate)
15:25:52   7  FROM svm6102
15:25:52   8  GROUP BY pair
15:25:52   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19461    .988925	   1.0355 .990603938 1.03282877 2010-10-03 20:55:01 2011-01-05 15:20:00

Elapsed: 00:00:00.85
15:25:53 SQL> 
15:25:53 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
15:25:53 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.30
15:25:53 SQL> CREATE TABLE svm6122 COMPRESS AS
15:25:53   2  SELECT
15:25:53   3  pair
15:25:53   4  ,ydate
15:25:53   5  ,prdate
15:25:53   6  ,clse
15:25:53   7  -- g6 is important. I want to predict g6:
15:25:53   8  ,ld6 - clse g6
15:25:53   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
15:25:53  10  -- I want more attributes from the ones I derived above:
15:25:53  11  -- clse relation to moving-min
15:25:53  12  ,clse-min4  cm4
15:25:53  13  ,clse-min6  cm6
15:25:53  14  ,clse-min8  cm8
15:25:53  15  ,clse-min10 cm10
15:25:53  16  ,clse-min12 cm12
15:25:53  17  ,clse-min14 cm14
15:25:53  18  ,clse-min16 cm16
15:25:53  19  ,clse-min18 cm18
15:25:53  20  -- clse relation to moving-avg
15:25:53  21  ,clse-avg4  ca4
15:25:53  22  ,clse-avg6  ca6
15:25:53  23  ,clse-avg8  ca8
15:25:53  24  ,clse-avg10 ca10
15:25:53  25  ,clse-avg12 ca12
15:25:53  26  ,clse-avg14 ca14
15:25:53  27  ,clse-avg16 ca16
15:25:53  28  ,clse-avg18 ca18
15:25:53  29  -- clse relation to moving-max
15:25:53  30  ,clse-max4  cx4
15:25:53  31  ,clse-max6  cx6
15:25:53  32  ,clse-max8  cx8
15:25:53  33  ,clse-max10 cx10
15:25:53  34  ,clse-max12 cx12
15:25:53  35  ,clse-max14 cx14
15:25:53  36  ,clse-max16 cx16
15:25:53  37  ,clse-max18 cx18
15:25:53  38  -- Derive more attributes.
15:25:53  39  -- I want to use CORR() here to help SVM see the shape of the series.
15:25:53  40  -- But COVAR_POP is more stable:
15:25:53  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
15:25:53  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
15:25:53  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
15:25:53  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
15:25:53  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
15:25:53  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
15:25:53  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
15:25:53  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
15:25:53  49  -- Derive date related attributes:
15:25:53  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
15:25:53  51  ,0+TO_CHAR(ydate,'D')d
15:25:53  52  ,0+TO_CHAR(ydate,'W')w
15:25:53  53  -- mpm stands for minutes-past-midnight:
15:25:53  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
15:25:53  55  -- mph stands for minutes-past-hour:
15:25:53  56  ,0+TO_CHAR(ydate,'MI')mph
15:25:53  57  FROM svm6102
15:25:53  58  ORDER BY ydate
15:25:53  59  /

Table created.

Elapsed: 00:00:02.05
15:25:55 SQL> 
15:25:55 SQL> -- rpt
15:25:55 SQL> 
15:25:55 SQL> SELECT
15:25:55   2  pair
15:25:55   3  ,COUNT(pair)
15:25:55   4  ,MIN(clse),MAX(clse)
15:25:55   5  ,MIN(ydate),MAX(ydate)
15:25:55   6  FROM svm6122
15:25:55   7  GROUP BY pair
15:25:55   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19461    .988925	   1.0355 2010-10-03 20:55:01 2011-01-05 15:20:00

Elapsed: 00:00:00.04
15:25:55 SQL> 
15:25:55 SQL> -- Prepare for derivation of NTILE based params:
15:25:55 SQL> 
15:25:55 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.24
15:25:56 SQL> CREATE TABLE svm6142 COMPRESS AS
15:25:56   2  SELECT
15:25:56   3  pair
15:25:56   4  ,ydate
15:25:56   5  ,prdate
15:25:56   6  ,clse
15:25:56   7  ,g6
15:25:56   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
15:25:56   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
15:25:56  10  ,CASE WHEN trend IS NULL THEN 1
15:25:56  11  	    WHEN trend =0      THEN 1
15:25:56  12  	    ELSE trend END trend
15:25:56  13  ,cm4
15:25:56  14  ,cm6
15:25:56  15  ,cm8
15:25:56  16  ,cm10
15:25:56  17  ,cm12
15:25:56  18  ,cm14
15:25:56  19  ,cm16
15:25:56  20  ,cm18
15:25:56  21  --
15:25:56  22  ,ca4
15:25:56  23  ,ca6
15:25:56  24  ,ca8
15:25:56  25  ,ca10
15:25:56  26  ,ca12
15:25:56  27  ,ca14
15:25:56  28  ,ca16
15:25:56  29  ,ca18
15:25:56  30  --
15:25:56  31  ,cx4
15:25:56  32  ,cx6
15:25:56  33  ,cx8
15:25:56  34  ,cx10
15:25:56  35  ,cx12
15:25:56  36  ,cx14
15:25:56  37  ,cx16
15:25:56  38  ,cx18
15:25:56  39  --
15:25:56  40  ,crr4
15:25:56  41  ,crr6
15:25:56  42  ,crr8
15:25:56  43  ,crr10
15:25:56  44  ,crr12
15:25:56  45  ,crr14
15:25:56  46  ,crr16
15:25:56  47  ,crr18
15:25:56  48  --
15:25:56  49  ,hh
15:25:56  50  ,d
15:25:56  51  ,w
15:25:56  52  ,mpm
15:25:56  53  ,mph
15:25:56  54  FROM svm6122
15:25:56  55  ORDER BY ydate
15:25:56  56  /

Table created.

Elapsed: 00:00:00.37
15:25:56 SQL> 
15:25:56 SQL> -- rpt
15:25:56 SQL> 
15:25:56 SQL> SELECT
15:25:56   2  pair
15:25:56   3  ,trend
15:25:56   4  ,gatt
15:25:56   5  ,COUNT(pair)
15:25:56   6  ,AVG(g6)
15:25:56   7  FROM svm6142
15:25:56   8  GROUP BY pair,trend,gatt
15:25:56   9  ORDER BY pair,trend,gatt
15:25:56  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7167 -.00124507
usd_cad 	-1 up	      3092 .003065739
usd_cad 	-1		32
usd_cad 	 1 nup	      6741 -.00159229
usd_cad 	 1 up	      2389 .003648486
usd_cad 	 1		40

6 rows selected.

Elapsed: 00:00:00.05
15:25:56 SQL> 
15:25:56 SQL> 
15:25:56 SQL> -- Derive NTILE based params:
15:25:56 SQL> 
15:25:56 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
15:25:56 SQL> CREATE TABLE svm6162 COMPRESS AS
15:25:56   2  SELECT
15:25:56   3  pair
15:25:56   4  ,ydate
15:25:56   5  ,prdate
15:25:56   6  ,clse
15:25:56   7  ,g6
15:25:56   8  ,gatt
15:25:56   9  ,gattn
15:25:56  10  ,trend
15:25:56  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
15:25:56  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
15:25:56  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
15:25:56  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
15:25:56  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
15:25:56  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
15:25:56  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
15:25:56  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
15:25:56  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
15:25:56  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
15:25:56  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
15:25:56  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
15:25:56  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
15:25:56  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
15:25:56  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
15:25:56  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
15:25:56  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
15:25:56  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
15:25:56  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
15:25:56  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
15:25:56  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
15:25:56  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
15:25:56  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
15:25:56  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
15:25:56  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
15:25:56  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
15:25:56  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
15:25:56  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
15:25:56  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
15:25:56  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
15:25:56  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
15:25:56  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
15:25:56  43  ,hh  att32
15:25:56  44  ,d   att33
15:25:56  45  ,w   att34
15:25:56  46  ,mpm att35
15:25:56  47  ,mph att36
15:25:56  48  ,trend att37
15:25:56  49  FROM svm6142
15:25:56  50  ORDER BY ydate
15:25:56  51  /

Table created.

Elapsed: 00:00:04.74
15:26:01 SQL> 
15:26:01 SQL> -- rpt
15:26:01 SQL> 
15:26:01 SQL> SELECT
15:26:01   2  pair
15:26:01   3  ,trend
15:26:01   4  ,gatt
15:26:01   5  ,COUNT(pair)
15:26:01   6  ,AVG(g6)
15:26:01   7  FROM svm6162
15:26:01   8  GROUP BY pair,trend,gatt
15:26:01   9  ORDER BY pair,trend,gatt
15:26:01  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7167 -.00124507
usd_cad 	-1 up	      3092 .003065739
usd_cad 	-1		32
usd_cad 	 1 nup	      6741 -.00159229
usd_cad 	 1 up	      2389 .003648486
usd_cad 	 1		40

6 rows selected.

Elapsed: 00:00:00.03
15:26:01 SQL> 
15:26:01 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.10
15:26:01 SQL> CREATE TABLE modsrc COMPRESS AS
15:26:01   2  SELECT
15:26:01   3  pair
15:26:01   4  ,ydate
15:26:01   5  ,prdate
15:26:01   6  ,trend
15:26:01   7  ,g6
15:26:01   8  ,gatt
15:26:01   9  ,gattn
15:26:01  10  FROM svm6162
15:26:01  11  /

Table created.

Elapsed: 00:00:00.08
15:26:01 SQL> 
15:26:01 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
15:26:01 SQL> 
15:26:01 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
15:26:01 SQL> CREATE TABLE cad_ms610 COMPRESS AS
15:26:01   2  SELECT
15:26:01   3  ydate
15:26:01   4  ,trend cad_trend
15:26:01   5  ,g6    cad_g6
15:26:01   6  ,gatt  cad_gatt
15:26:01   7  ,gattn cad_gattn
15:26:01   8  FROM modsrc
15:26:01   9  /

Table created.

Elapsed: 00:00:00.06
15:26:01 SQL> 
15:26:01 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
15:26:02 SQL> 
15:26:02 SQL> -- I need a copy of the attributes:
15:26:02 SQL> 
15:26:02 SQL> 
15:26:02 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.04
15:26:02 SQL> CREATE TABLE cad_att COMPRESS AS
15:26:02   2  SELECT
15:26:02   3  ydate
15:26:02   4  ,att00 cad_att00
15:26:02   5  ,att01 cad_att01
15:26:02   6  ,att02 cad_att02
15:26:02   7  ,att03 cad_att03
15:26:02   8  ,att04 cad_att04
15:26:02   9  ,att05 cad_att05
15:26:02  10  ,att06 cad_att06
15:26:02  11  ,att07 cad_att07
15:26:02  12  ,att08 cad_att08
15:26:02  13  ,att09 cad_att09
15:26:02  14  ,att10 cad_att10
15:26:02  15  ,att11 cad_att11
15:26:02  16  ,att12 cad_att12
15:26:02  17  ,att13 cad_att13
15:26:02  18  ,att14 cad_att14
15:26:02  19  ,att15 cad_att15
15:26:02  20  ,att16 cad_att16
15:26:02  21  ,att17 cad_att17
15:26:02  22  ,att18 cad_att18
15:26:02  23  ,att19 cad_att19
15:26:02  24  ,att20 cad_att20
15:26:02  25  ,att21 cad_att21
15:26:02  26  ,att22 cad_att22
15:26:02  27  ,att23 cad_att23
15:26:02  28  ,att24 cad_att24
15:26:02  29  ,att25 cad_att25
15:26:02  30  ,att26 cad_att26
15:26:02  31  ,att27 cad_att27
15:26:02  32  ,att28 cad_att28
15:26:02  33  ,att29 cad_att29
15:26:02  34  ,att30 cad_att30
15:26:02  35  ,att31 cad_att31
15:26:02  36  ,att32 cad_att32
15:26:02  37  ,att33 cad_att33
15:26:02  38  ,att34 cad_att34
15:26:02  39  ,att35 cad_att35
15:26:02  40  ,att36 cad_att36
15:26:02  41  ,att37 cad_att37
15:26:02  42  FROM svm6162
15:26:02  43  /

Table created.

Elapsed: 00:00:00.16
15:26:02 SQL> 
15:26:02 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
15:26:02 SQL> 
15:26:02 SQL> -- rpt
15:26:02 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19461

Elapsed: 00:00:00.82
15:26:03 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19461

Elapsed: 00:00:00.00
15:26:03 SQL> 
15:26:03 SQL> --
15:26:03 SQL> -- chf610.sql
15:26:03 SQL> --
15:26:03 SQL> 
15:26:03 SQL> -- Creates views and tables for backtesting a forex SVM strategy
15:26:03 SQL> 
15:26:03 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.48
15:26:03 SQL> 
15:26:03 SQL> -- I created di5min here:
15:26:03 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
15:26:03 SQL> 
15:26:03 SQL> CREATE OR REPLACE VIEW svm6102 AS
15:26:03   2  SELECT
15:26:03   3  pair
15:26:03   4  ,ydate
15:26:03   5  ,prdate
15:26:03   6  ,rownum rnum -- acts as t in my time-series
15:26:03   7  ,clse
15:26:03   8  -- Derive a bunch of attributes from clse, the latest price:
15:26:03   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
15:26:03  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
15:26:03  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
15:26:03  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
15:26:03  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
15:26:03  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
15:26:03  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
15:26:03  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
15:26:03  17  --
15:26:03  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
15:26:03  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
15:26:03  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
15:26:03  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
15:26:03  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
15:26:03  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
15:26:03  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
15:26:03  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
15:26:03  26  --
15:26:03  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
15:26:03  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
15:26:03  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
15:26:03  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
15:26:03  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
15:26:03  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
15:26:03  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
15:26:03  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
15:26:03  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
15:26:03  36  FROM di5min WHERE pair LIKE'%chf%'
15:26:03  37  AND ydate > sysdate - 95
15:26:03  38  ORDER BY ydate
15:26:03  39  /

View created.

Elapsed: 00:00:00.04
15:26:04 SQL> 
15:26:04 SQL> -- rpt
15:26:04 SQL> 
15:26:04 SQL> SELECT
15:26:04   2  pair
15:26:04   3  ,COUNT(pair)
15:26:04   4  ,MIN(clse),MAX(clse)
15:26:04   5  ,MIN(avg6),MAX(avg6)
15:26:04   6  ,MIN(ydate),MAX(ydate)
15:26:04   7  FROM svm6102
15:26:04   8  GROUP BY pair
15:26:04   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19464    .931675	  1.00635  .93325411 1.00498151 2010-10-03 20:55:01 2011-01-05 15:20:00

Elapsed: 00:00:00.85
15:26:04 SQL> 
15:26:04 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
15:26:04 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.22
15:26:05 SQL> CREATE TABLE svm6122 COMPRESS AS
15:26:05   2  SELECT
15:26:05   3  pair
15:26:05   4  ,ydate
15:26:05   5  ,prdate
15:26:05   6  ,clse
15:26:05   7  -- g6 is important. I want to predict g6:
15:26:05   8  ,ld6 - clse g6
15:26:05   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
15:26:05  10  -- I want more attributes from the ones I derived above:
15:26:05  11  -- clse relation to moving-min
15:26:05  12  ,clse-min4  cm4
15:26:05  13  ,clse-min6  cm6
15:26:05  14  ,clse-min8  cm8
15:26:05  15  ,clse-min10 cm10
15:26:05  16  ,clse-min12 cm12
15:26:05  17  ,clse-min14 cm14
15:26:05  18  ,clse-min16 cm16
15:26:05  19  ,clse-min18 cm18
15:26:05  20  -- clse relation to moving-avg
15:26:05  21  ,clse-avg4  ca4
15:26:05  22  ,clse-avg6  ca6
15:26:05  23  ,clse-avg8  ca8
15:26:05  24  ,clse-avg10 ca10
15:26:05  25  ,clse-avg12 ca12
15:26:05  26  ,clse-avg14 ca14
15:26:05  27  ,clse-avg16 ca16
15:26:05  28  ,clse-avg18 ca18
15:26:05  29  -- clse relation to moving-max
15:26:05  30  ,clse-max4  cx4
15:26:05  31  ,clse-max6  cx6
15:26:05  32  ,clse-max8  cx8
15:26:05  33  ,clse-max10 cx10
15:26:05  34  ,clse-max12 cx12
15:26:05  35  ,clse-max14 cx14
15:26:05  36  ,clse-max16 cx16
15:26:05  37  ,clse-max18 cx18
15:26:05  38  -- Derive more attributes.
15:26:05  39  -- I want to use CORR() here to help SVM see the shape of the series.
15:26:05  40  -- But COVAR_POP is more stable:
15:26:05  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
15:26:05  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
15:26:05  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
15:26:05  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
15:26:05  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
15:26:05  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
15:26:05  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
15:26:05  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
15:26:05  49  -- Derive date related attributes:
15:26:05  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
15:26:05  51  ,0+TO_CHAR(ydate,'D')d
15:26:05  52  ,0+TO_CHAR(ydate,'W')w
15:26:05  53  -- mpm stands for minutes-past-midnight:
15:26:05  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
15:26:05  55  -- mph stands for minutes-past-hour:
15:26:05  56  ,0+TO_CHAR(ydate,'MI')mph
15:26:05  57  FROM svm6102
15:26:05  58  ORDER BY ydate
15:26:05  59  /

Table created.

Elapsed: 00:00:02.05
15:26:07 SQL> 
15:26:07 SQL> -- rpt
15:26:07 SQL> 
15:26:07 SQL> SELECT
15:26:07   2  pair
15:26:07   3  ,COUNT(pair)
15:26:07   4  ,MIN(clse),MAX(clse)
15:26:07   5  ,MIN(ydate),MAX(ydate)
15:26:07   6  FROM svm6122
15:26:07   7  GROUP BY pair
15:26:07   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19464    .931675	  1.00635 2010-10-03 20:55:01 2011-01-05 15:20:00

Elapsed: 00:00:00.03
15:26:07 SQL> 
15:26:07 SQL> -- Prepare for derivation of NTILE based params:
15:26:07 SQL> 
15:26:07 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.25
15:26:07 SQL> CREATE TABLE svm6142 COMPRESS AS
15:26:07   2  SELECT
15:26:07   3  pair
15:26:07   4  ,ydate
15:26:07   5  ,prdate
15:26:07   6  ,clse
15:26:07   7  ,g6
15:26:07   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
15:26:07   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
15:26:07  10  ,CASE WHEN trend IS NULL THEN 1
15:26:07  11  	    WHEN trend =0      THEN 1
15:26:07  12  	    ELSE trend END trend
15:26:07  13  ,cm4
15:26:07  14  ,cm6
15:26:07  15  ,cm8
15:26:07  16  ,cm10
15:26:07  17  ,cm12
15:26:07  18  ,cm14
15:26:07  19  ,cm16
15:26:07  20  ,cm18
15:26:07  21  --
15:26:07  22  ,ca4
15:26:07  23  ,ca6
15:26:07  24  ,ca8
15:26:07  25  ,ca10
15:26:07  26  ,ca12
15:26:07  27  ,ca14
15:26:07  28  ,ca16
15:26:07  29  ,ca18
15:26:07  30  --
15:26:07  31  ,cx4
15:26:07  32  ,cx6
15:26:07  33  ,cx8
15:26:07  34  ,cx10
15:26:07  35  ,cx12
15:26:07  36  ,cx14
15:26:07  37  ,cx16
15:26:07  38  ,cx18
15:26:07  39  --
15:26:07  40  ,crr4
15:26:07  41  ,crr6
15:26:07  42  ,crr8
15:26:07  43  ,crr10
15:26:07  44  ,crr12
15:26:07  45  ,crr14
15:26:07  46  ,crr16
15:26:07  47  ,crr18
15:26:07  48  --
15:26:07  49  ,hh
15:26:07  50  ,d
15:26:07  51  ,w
15:26:07  52  ,mpm
15:26:07  53  ,mph
15:26:07  54  FROM svm6122
15:26:07  55  ORDER BY ydate
15:26:07  56  /

Table created.

Elapsed: 00:00:00.36
15:26:07 SQL> 
15:26:07 SQL> -- rpt
15:26:07 SQL> 
15:26:07 SQL> SELECT
15:26:07   2  pair
15:26:07   3  ,trend
15:26:07   4  ,gatt
15:26:07   5  ,COUNT(pair)
15:26:07   6  ,AVG(g6)
15:26:07   7  FROM svm6142
15:26:07   8  GROUP BY pair,trend,gatt
15:26:07   9  ORDER BY pair,trend,gatt
15:26:07  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7072  -.0019936
usd_chf 	-1 up	      3045 .003835688
usd_chf 	 1 nup	      6414  -.0015513
usd_chf 	 1 up	      2861 .003806526
usd_chf 	 1		72

Elapsed: 00:00:00.03
15:26:07 SQL> 
15:26:07 SQL> 
15:26:07 SQL> -- Derive NTILE based params:
15:26:07 SQL> 
15:26:07 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
15:26:07 SQL> CREATE TABLE svm6162 COMPRESS AS
15:26:07   2  SELECT
15:26:07   3  pair
15:26:07   4  ,ydate
15:26:07   5  ,prdate
15:26:07   6  ,clse
15:26:07   7  ,g6
15:26:07   8  ,gatt
15:26:07   9  ,gattn
15:26:07  10  ,trend
15:26:07  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
15:26:07  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
15:26:07  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
15:26:07  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
15:26:07  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
15:26:07  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
15:26:07  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
15:26:07  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
15:26:07  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
15:26:07  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
15:26:07  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
15:26:07  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
15:26:07  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
15:26:07  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
15:26:07  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
15:26:07  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
15:26:07  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
15:26:07  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
15:26:07  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
15:26:07  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
15:26:07  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
15:26:07  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
15:26:07  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
15:26:07  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
15:26:07  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
15:26:07  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
15:26:07  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
15:26:07  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
15:26:07  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
15:26:07  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
15:26:07  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
15:26:07  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
15:26:07  43  ,hh  att32
15:26:07  44  ,d   att33
15:26:07  45  ,w   att34
15:26:07  46  ,mpm att35
15:26:07  47  ,mph att36
15:26:07  48  ,trend att37
15:26:07  49  FROM svm6142
15:26:07  50  ORDER BY ydate
15:26:07  51  /

Table created.

Elapsed: 00:00:04.72
15:26:12 SQL> 
15:26:12 SQL> -- rpt
15:26:12 SQL> 
15:26:12 SQL> SELECT
15:26:12   2  pair
15:26:12   3  ,trend
15:26:12   4  ,gatt
15:26:12   5  ,COUNT(pair)
15:26:12   6  ,AVG(g6)
15:26:12   7  FROM svm6162
15:26:12   8  GROUP BY pair,trend,gatt
15:26:12   9  ORDER BY pair,trend,gatt
15:26:12  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7072  -.0019936
usd_chf 	-1 up	      3045 .003835688
usd_chf 	 1 nup	      6414  -.0015513
usd_chf 	 1 up	      2861 .003806526
usd_chf 	 1		72

Elapsed: 00:00:00.03
15:26:12 SQL> 
15:26:12 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.14
15:26:12 SQL> CREATE TABLE modsrc COMPRESS AS
15:26:12   2  SELECT
15:26:12   3  pair
15:26:12   4  ,ydate
15:26:12   5  ,prdate
15:26:12   6  ,trend
15:26:12   7  ,g6
15:26:12   8  ,gatt
15:26:12   9  ,gattn
15:26:12  10  FROM svm6162
15:26:12  11  /

Table created.

Elapsed: 00:00:00.07
15:26:12 SQL> 
15:26:12 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
15:26:13 SQL> 
15:26:13 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
15:26:13 SQL> CREATE TABLE chf_ms610 COMPRESS AS
15:26:13   2  SELECT
15:26:13   3  ydate
15:26:13   4  ,trend chf_trend
15:26:13   5  ,g6    chf_g6
15:26:13   6  ,gatt  chf_gatt
15:26:13   7  ,gattn chf_gattn
15:26:13   8  FROM modsrc
15:26:13   9  /

Table created.

Elapsed: 00:00:00.06
15:26:13 SQL> 
15:26:13 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
15:26:13 SQL> 
15:26:13 SQL> -- I need a copy of the attributes:
15:26:13 SQL> 
15:26:13 SQL> 
15:26:13 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.50
15:26:13 SQL> CREATE TABLE chf_att COMPRESS AS
15:26:13   2  SELECT
15:26:13   3  ydate
15:26:13   4  ,att00 chf_att00
15:26:13   5  ,att01 chf_att01
15:26:13   6  ,att02 chf_att02
15:26:13   7  ,att03 chf_att03
15:26:13   8  ,att04 chf_att04
15:26:13   9  ,att05 chf_att05
15:26:13  10  ,att06 chf_att06
15:26:13  11  ,att07 chf_att07
15:26:13  12  ,att08 chf_att08
15:26:13  13  ,att09 chf_att09
15:26:13  14  ,att10 chf_att10
15:26:13  15  ,att11 chf_att11
15:26:13  16  ,att12 chf_att12
15:26:13  17  ,att13 chf_att13
15:26:13  18  ,att14 chf_att14
15:26:13  19  ,att15 chf_att15
15:26:13  20  ,att16 chf_att16
15:26:13  21  ,att17 chf_att17
15:26:13  22  ,att18 chf_att18
15:26:13  23  ,att19 chf_att19
15:26:13  24  ,att20 chf_att20
15:26:13  25  ,att21 chf_att21
15:26:13  26  ,att22 chf_att22
15:26:13  27  ,att23 chf_att23
15:26:13  28  ,att24 chf_att24
15:26:13  29  ,att25 chf_att25
15:26:13  30  ,att26 chf_att26
15:26:13  31  ,att27 chf_att27
15:26:13  32  ,att28 chf_att28
15:26:13  33  ,att29 chf_att29
15:26:13  34  ,att30 chf_att30
15:26:13  35  ,att31 chf_att31
15:26:13  36  ,att32 chf_att32
15:26:13  37  ,att33 chf_att33
15:26:13  38  ,att34 chf_att34
15:26:13  39  ,att35 chf_att35
15:26:13  40  ,att36 chf_att36
15:26:13  41  ,att37 chf_att37
15:26:13  42  FROM svm6162
15:26:13  43  /

Table created.

Elapsed: 00:00:00.18
15:26:14 SQL> 
15:26:14 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
15:26:14 SQL> 
15:26:14 SQL> -- rpt
15:26:14 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19464

Elapsed: 00:00:00.87
15:26:15 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19464

Elapsed: 00:00:00.00
15:26:15 SQL> 
15:26:15 SQL> --
15:26:15 SQL> -- ech610.sql
15:26:15 SQL> --
15:26:15 SQL> 
15:26:15 SQL> -- Creates views and tables for backtesting a forex SVM strategy
15:26:15 SQL> 
15:26:15 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.43
15:26:15 SQL> 
15:26:15 SQL> -- I created di5min here:
15:26:15 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
15:26:15 SQL> 
15:26:15 SQL> CREATE OR REPLACE VIEW svm6102 AS
15:26:15   2  SELECT
15:26:15   3  pair
15:26:15   4  ,ydate
15:26:15   5  ,prdate
15:26:15   6  ,rownum rnum -- acts as t in my time-series
15:26:15   7  ,clse
15:26:15   8  -- Derive a bunch of attributes from clse, the latest price:
15:26:15   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
15:26:15  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
15:26:15  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
15:26:15  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
15:26:15  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
15:26:15  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
15:26:15  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
15:26:15  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
15:26:15  17  --
15:26:15  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
15:26:15  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
15:26:15  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
15:26:15  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
15:26:15  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
15:26:15  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
15:26:15  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
15:26:15  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
15:26:15  26  --
15:26:15  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
15:26:15  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
15:26:15  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
15:26:15  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
15:26:15  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
15:26:15  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
15:26:15  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
15:26:15  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
15:26:15  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
15:26:15  36  FROM di5min WHERE pair LIKE'%ech%'
15:26:15  37  AND ydate > sysdate - 95
15:26:15  38  ORDER BY ydate
15:26:15  39  /

View created.

Elapsed: 00:00:00.04
15:26:15 SQL> 
15:26:15 SQL> -- rpt
15:26:15 SQL> 
15:26:15 SQL> SELECT
15:26:15   2  pair
15:26:15   3  ,COUNT(pair)
15:26:15   4  ,MIN(clse),MAX(clse)
15:26:15   5  ,MIN(avg6),MAX(avg6)
15:26:15   6  ,MIN(ydate),MAX(ydate)
15:26:15   7  FROM svm6102
15:26:15   8  GROUP BY pair
15:26:15   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19463 1.24192946 1.38284305 1.24320711 1.37986485 2010-10-03 20:55:01 2011-01-05 15:20:00

Elapsed: 00:00:00.79
15:26:16 SQL> 
15:26:16 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
15:26:16 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.21
15:26:16 SQL> CREATE TABLE svm6122 COMPRESS AS
15:26:16   2  SELECT
15:26:16   3  pair
15:26:16   4  ,ydate
15:26:16   5  ,prdate
15:26:16   6  ,clse
15:26:16   7  -- g6 is important. I want to predict g6:
15:26:16   8  ,ld6 - clse g6
15:26:16   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
15:26:16  10  -- I want more attributes from the ones I derived above:
15:26:16  11  -- clse relation to moving-min
15:26:16  12  ,clse-min4  cm4
15:26:16  13  ,clse-min6  cm6
15:26:16  14  ,clse-min8  cm8
15:26:16  15  ,clse-min10 cm10
15:26:16  16  ,clse-min12 cm12
15:26:16  17  ,clse-min14 cm14
15:26:16  18  ,clse-min16 cm16
15:26:16  19  ,clse-min18 cm18
15:26:16  20  -- clse relation to moving-avg
15:26:16  21  ,clse-avg4  ca4
15:26:16  22  ,clse-avg6  ca6
15:26:16  23  ,clse-avg8  ca8
15:26:16  24  ,clse-avg10 ca10
15:26:16  25  ,clse-avg12 ca12
15:26:16  26  ,clse-avg14 ca14
15:26:16  27  ,clse-avg16 ca16
15:26:16  28  ,clse-avg18 ca18
15:26:16  29  -- clse relation to moving-max
15:26:16  30  ,clse-max4  cx4
15:26:16  31  ,clse-max6  cx6
15:26:16  32  ,clse-max8  cx8
15:26:16  33  ,clse-max10 cx10
15:26:16  34  ,clse-max12 cx12
15:26:16  35  ,clse-max14 cx14
15:26:16  36  ,clse-max16 cx16
15:26:16  37  ,clse-max18 cx18
15:26:16  38  -- Derive more attributes.
15:26:16  39  -- I want to use CORR() here to help SVM see the shape of the series.
15:26:16  40  -- But COVAR_POP is more stable:
15:26:16  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
15:26:16  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
15:26:16  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
15:26:16  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
15:26:16  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
15:26:16  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
15:26:16  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
15:26:16  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
15:26:16  49  -- Derive date related attributes:
15:26:16  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
15:26:16  51  ,0+TO_CHAR(ydate,'D')d
15:26:16  52  ,0+TO_CHAR(ydate,'W')w
15:26:16  53  -- mpm stands for minutes-past-midnight:
15:26:16  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
15:26:16  55  -- mph stands for minutes-past-hour:
15:26:16  56  ,0+TO_CHAR(ydate,'MI')mph
15:26:16  57  FROM svm6102
15:26:16  58  ORDER BY ydate
15:26:16  59  /

Table created.

Elapsed: 00:00:02.04
15:26:18 SQL> 
15:26:18 SQL> -- rpt
15:26:18 SQL> 
15:26:18 SQL> SELECT
15:26:18   2  pair
15:26:18   3  ,COUNT(pair)
15:26:18   4  ,MIN(clse),MAX(clse)
15:26:18   5  ,MIN(ydate),MAX(ydate)
15:26:18   6  FROM svm6122
15:26:18   7  GROUP BY pair
15:26:18   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19463 1.24192946 1.38284305 2010-10-03 20:55:01 2011-01-05 15:20:00

Elapsed: 00:00:00.04
15:26:18 SQL> 
15:26:18 SQL> -- Prepare for derivation of NTILE based params:
15:26:18 SQL> 
15:26:18 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.25
15:26:19 SQL> CREATE TABLE svm6142 COMPRESS AS
15:26:19   2  SELECT
15:26:19   3  pair
15:26:19   4  ,ydate
15:26:19   5  ,prdate
15:26:19   6  ,clse
15:26:19   7  ,g6
15:26:19   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
15:26:19   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
15:26:19  10  ,CASE WHEN trend IS NULL THEN 1
15:26:19  11  	    WHEN trend =0      THEN 1
15:26:19  12  	    ELSE trend END trend
15:26:19  13  ,cm4
15:26:19  14  ,cm6
15:26:19  15  ,cm8
15:26:19  16  ,cm10
15:26:19  17  ,cm12
15:26:19  18  ,cm14
15:26:19  19  ,cm16
15:26:19  20  ,cm18
15:26:19  21  --
15:26:19  22  ,ca4
15:26:19  23  ,ca6
15:26:19  24  ,ca8
15:26:19  25  ,ca10
15:26:19  26  ,ca12
15:26:19  27  ,ca14
15:26:19  28  ,ca16
15:26:19  29  ,ca18
15:26:19  30  --
15:26:19  31  ,cx4
15:26:19  32  ,cx6
15:26:19  33  ,cx8
15:26:19  34  ,cx10
15:26:19  35  ,cx12
15:26:19  36  ,cx14
15:26:19  37  ,cx16
15:26:19  38  ,cx18
15:26:19  39  --
15:26:19  40  ,crr4
15:26:19  41  ,crr6
15:26:19  42  ,crr8
15:26:19  43  ,crr10
15:26:19  44  ,crr12
15:26:19  45  ,crr14
15:26:19  46  ,crr16
15:26:19  47  ,crr18
15:26:19  48  --
15:26:19  49  ,hh
15:26:19  50  ,d
15:26:19  51  ,w
15:26:19  52  ,mpm
15:26:19  53  ,mph
15:26:19  54  FROM svm6122
15:26:19  55  ORDER BY ydate
15:26:19  56  /

Table created.

Elapsed: 00:00:00.39
15:26:19 SQL> 
15:26:19 SQL> -- rpt
15:26:19 SQL> 
15:26:19 SQL> SELECT
15:26:19   2  pair
15:26:19   3  ,trend
15:26:19   4  ,gatt
15:26:19   5  ,COUNT(pair)
15:26:19   6  ,AVG(g6)
15:26:19   7  FROM svm6142
15:26:19   8  GROUP BY pair,trend,gatt
15:26:19   9  ORDER BY pair,trend,gatt
15:26:19  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6658 -.00222518
ech_usd 	-1 up	      3552 .003511144
ech_usd 	-1		30
ech_usd 	 1 nup	      6320 -.00241051
ech_usd 	 1 up	      2861 .004081138
ech_usd 	 1		42

6 rows selected.

Elapsed: 00:00:00.04
15:26:19 SQL> 
15:26:19 SQL> 
15:26:19 SQL> -- Derive NTILE based params:
15:26:19 SQL> 
15:26:19 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
15:26:19 SQL> CREATE TABLE svm6162 COMPRESS AS
15:26:19   2  SELECT
15:26:19   3  pair
15:26:19   4  ,ydate
15:26:19   5  ,prdate
15:26:19   6  ,clse
15:26:19   7  ,g6
15:26:19   8  ,gatt
15:26:19   9  ,gattn
15:26:19  10  ,trend
15:26:19  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
15:26:19  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
15:26:19  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
15:26:19  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
15:26:19  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
15:26:19  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
15:26:19  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
15:26:19  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
15:26:19  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
15:26:19  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
15:26:19  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
15:26:19  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
15:26:19  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
15:26:19  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
15:26:19  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
15:26:19  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
15:26:19  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
15:26:19  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
15:26:19  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
15:26:19  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
15:26:19  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
15:26:19  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
15:26:19  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
15:26:19  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
15:26:19  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
15:26:19  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
15:26:19  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
15:26:19  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
15:26:19  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
15:26:19  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
15:26:19  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
15:26:19  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
15:26:19  43  ,hh  att32
15:26:19  44  ,d   att33
15:26:19  45  ,w   att34
15:26:19  46  ,mpm att35
15:26:19  47  ,mph att36
15:26:19  48  ,trend att37
15:26:19  49  FROM svm6142
15:26:19  50  ORDER BY ydate
15:26:19  51  /

Table created.

Elapsed: 00:00:05.02
15:26:24 SQL> 
15:26:24 SQL> -- rpt
15:26:24 SQL> 
15:26:24 SQL> SELECT
15:26:24   2  pair
15:26:24   3  ,trend
15:26:24   4  ,gatt
15:26:24   5  ,COUNT(pair)
15:26:24   6  ,AVG(g6)
15:26:24   7  FROM svm6162
15:26:24   8  GROUP BY pair,trend,gatt
15:26:24   9  ORDER BY pair,trend,gatt
15:26:24  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6658 -.00222518
ech_usd 	-1 up	      3552 .003511144
ech_usd 	-1		30
ech_usd 	 1 nup	      6320 -.00241051
ech_usd 	 1 up	      2861 .004081138
ech_usd 	 1		42

6 rows selected.

Elapsed: 00:00:00.03
15:26:24 SQL> 
15:26:24 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.16
15:26:25 SQL> CREATE TABLE modsrc COMPRESS AS
15:26:25   2  SELECT
15:26:25   3  pair
15:26:25   4  ,ydate
15:26:25   5  ,prdate
15:26:25   6  ,trend
15:26:25   7  ,g6
15:26:25   8  ,gatt
15:26:25   9  ,gattn
15:26:25  10  FROM svm6162
15:26:25  11  /

Table created.

Elapsed: 00:00:00.09
15:26:25 SQL> 
15:26:25 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
15:26:25 SQL> 
15:26:25 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
15:26:25 SQL> CREATE TABLE ech_ms610 COMPRESS AS
15:26:25   2  SELECT
15:26:25   3  ydate
15:26:25   4  ,trend ech_trend
15:26:25   5  ,g6    ech_g6
15:26:25   6  ,gatt  ech_gatt
15:26:25   7  ,gattn ech_gattn
15:26:25   8  FROM modsrc
15:26:25   9  /

Table created.

Elapsed: 00:00:00.07
15:26:25 SQL> 
15:26:25 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
15:26:25 SQL> 
15:26:25 SQL> -- I need a copy of the attributes:
15:26:25 SQL> 
15:26:25 SQL> 
15:26:25 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.05
15:26:25 SQL> CREATE TABLE ech_att COMPRESS AS
15:26:25   2  SELECT
15:26:25   3  ydate
15:26:25   4  ,att00 ech_att00
15:26:25   5  ,att01 ech_att01
15:26:25   6  ,att02 ech_att02
15:26:25   7  ,att03 ech_att03
15:26:25   8  ,att04 ech_att04
15:26:25   9  ,att05 ech_att05
15:26:25  10  ,att06 ech_att06
15:26:25  11  ,att07 ech_att07
15:26:25  12  ,att08 ech_att08
15:26:25  13  ,att09 ech_att09
15:26:25  14  ,att10 ech_att10
15:26:25  15  ,att11 ech_att11
15:26:25  16  ,att12 ech_att12
15:26:25  17  ,att13 ech_att13
15:26:25  18  ,att14 ech_att14
15:26:25  19  ,att15 ech_att15
15:26:25  20  ,att16 ech_att16
15:26:25  21  ,att17 ech_att17
15:26:25  22  ,att18 ech_att18
15:26:25  23  ,att19 ech_att19
15:26:25  24  ,att20 ech_att20
15:26:25  25  ,att21 ech_att21
15:26:25  26  ,att22 ech_att22
15:26:25  27  ,att23 ech_att23
15:26:25  28  ,att24 ech_att24
15:26:25  29  ,att25 ech_att25
15:26:25  30  ,att26 ech_att26
15:26:25  31  ,att27 ech_att27
15:26:25  32  ,att28 ech_att28
15:26:25  33  ,att29 ech_att29
15:26:25  34  ,att30 ech_att30
15:26:25  35  ,att31 ech_att31
15:26:25  36  ,att32 ech_att32
15:26:25  37  ,att33 ech_att33
15:26:25  38  ,att34 ech_att34
15:26:25  39  ,att35 ech_att35
15:26:25  40  ,att36 ech_att36
15:26:25  41  ,att37 ech_att37
15:26:25  42  FROM svm6162
15:26:25  43  /

Table created.

Elapsed: 00:00:00.19
15:26:25 SQL> 
15:26:25 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
15:26:26 SQL> 
15:26:26 SQL> -- rpt
15:26:26 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19463

Elapsed: 00:00:00.78
15:26:27 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19463

Elapsed: 00:00:00.01
15:26:27 SQL> 
15:26:27 SQL> --
15:26:27 SQL> -- egb610.sql
15:26:27 SQL> --
15:26:27 SQL> 
15:26:27 SQL> -- Creates views and tables for backtesting a forex SVM strategy
15:26:27 SQL> 
15:26:27 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.59
15:26:27 SQL> 
15:26:27 SQL> -- I created di5min here:
15:26:27 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
15:26:27 SQL> 
15:26:27 SQL> CREATE OR REPLACE VIEW svm6102 AS
15:26:27   2  SELECT
15:26:27   3  pair
15:26:27   4  ,ydate
15:26:27   5  ,prdate
15:26:27   6  ,rownum rnum -- acts as t in my time-series
15:26:27   7  ,clse
15:26:27   8  -- Derive a bunch of attributes from clse, the latest price:
15:26:27   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
15:26:27  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
15:26:27  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
15:26:27  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
15:26:27  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
15:26:27  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
15:26:27  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
15:26:27  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
15:26:27  17  --
15:26:27  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
15:26:27  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
15:26:27  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
15:26:27  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
15:26:27  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
15:26:27  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
15:26:27  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
15:26:27  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
15:26:27  26  --
15:26:27  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
15:26:27  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
15:26:27  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
15:26:27  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
15:26:27  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
15:26:27  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
15:26:27  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
15:26:27  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
15:26:27  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
15:26:27  36  FROM di5min WHERE pair LIKE'%egb%'
15:26:27  37  AND ydate > sysdate - 95
15:26:27  38  ORDER BY ydate
15:26:27  39  /

View created.

Elapsed: 00:00:00.08
15:26:27 SQL> 
15:26:27 SQL> -- rpt
15:26:27 SQL> 
15:26:27 SQL> SELECT
15:26:27   2  pair
15:26:27   3  ,COUNT(pair)
15:26:27   4  ,MIN(clse),MAX(clse)
15:26:27   5  ,MIN(avg6),MAX(avg6)
15:26:27   6  ,MIN(ydate),MAX(ydate)
15:26:27   7  FROM svm6102
15:26:27   8  GROUP BY pair
15:26:27   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19462 .833520557 .893920122 .834199029 .892400287 2010-10-03 20:55:01 2011-01-05 15:20:00

Elapsed: 00:00:00.95
15:26:28 SQL> 
15:26:28 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
15:26:28 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.58
15:26:29 SQL> CREATE TABLE svm6122 COMPRESS AS
15:26:29   2  SELECT
15:26:29   3  pair
15:26:29   4  ,ydate
15:26:29   5  ,prdate
15:26:29   6  ,clse
15:26:29   7  -- g6 is important. I want to predict g6:
15:26:29   8  ,ld6 - clse g6
15:26:29   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
15:26:29  10  -- I want more attributes from the ones I derived above:
15:26:29  11  -- clse relation to moving-min
15:26:29  12  ,clse-min4  cm4
15:26:29  13  ,clse-min6  cm6
15:26:29  14  ,clse-min8  cm8
15:26:29  15  ,clse-min10 cm10
15:26:29  16  ,clse-min12 cm12
15:26:29  17  ,clse-min14 cm14
15:26:29  18  ,clse-min16 cm16
15:26:29  19  ,clse-min18 cm18
15:26:29  20  -- clse relation to moving-avg
15:26:29  21  ,clse-avg4  ca4
15:26:29  22  ,clse-avg6  ca6
15:26:29  23  ,clse-avg8  ca8
15:26:29  24  ,clse-avg10 ca10
15:26:29  25  ,clse-avg12 ca12
15:26:29  26  ,clse-avg14 ca14
15:26:29  27  ,clse-avg16 ca16
15:26:29  28  ,clse-avg18 ca18
15:26:29  29  -- clse relation to moving-max
15:26:29  30  ,clse-max4  cx4
15:26:29  31  ,clse-max6  cx6
15:26:29  32  ,clse-max8  cx8
15:26:29  33  ,clse-max10 cx10
15:26:29  34  ,clse-max12 cx12
15:26:29  35  ,clse-max14 cx14
15:26:29  36  ,clse-max16 cx16
15:26:29  37  ,clse-max18 cx18
15:26:29  38  -- Derive more attributes.
15:26:29  39  -- I want to use CORR() here to help SVM see the shape of the series.
15:26:29  40  -- But COVAR_POP is more stable:
15:26:29  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
15:26:29  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
15:26:29  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
15:26:29  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
15:26:29  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
15:26:29  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
15:26:29  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
15:26:29  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
15:26:29  49  -- Derive date related attributes:
15:26:29  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
15:26:29  51  ,0+TO_CHAR(ydate,'D')d
15:26:29  52  ,0+TO_CHAR(ydate,'W')w
15:26:29  53  -- mpm stands for minutes-past-midnight:
15:26:29  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
15:26:29  55  -- mph stands for minutes-past-hour:
15:26:29  56  ,0+TO_CHAR(ydate,'MI')mph
15:26:29  57  FROM svm6102
15:26:29  58  ORDER BY ydate
15:26:29  59  /

Table created.

Elapsed: 00:00:02.46
15:26:31 SQL> 
15:26:31 SQL> -- rpt
15:26:31 SQL> 
15:26:31 SQL> SELECT
15:26:31   2  pair
15:26:31   3  ,COUNT(pair)
15:26:31   4  ,MIN(clse),MAX(clse)
15:26:31   5  ,MIN(ydate),MAX(ydate)
15:26:31   6  FROM svm6122
15:26:31   7  GROUP BY pair
15:26:31   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19462 .833520557 .893920122 2010-10-03 20:55:01 2011-01-05 15:20:00

Elapsed: 00:00:00.04
15:26:31 SQL> 
15:26:31 SQL> -- Prepare for derivation of NTILE based params:
15:26:31 SQL> 
15:26:31 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.31
15:26:32 SQL> CREATE TABLE svm6142 COMPRESS AS
15:26:32   2  SELECT
15:26:32   3  pair
15:26:32   4  ,ydate
15:26:32   5  ,prdate
15:26:32   6  ,clse
15:26:32   7  ,g6
15:26:32   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
15:26:32   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
15:26:32  10  ,CASE WHEN trend IS NULL THEN 1
15:26:32  11  	    WHEN trend =0      THEN 1
15:26:32  12  	    ELSE trend END trend
15:26:32  13  ,cm4
15:26:32  14  ,cm6
15:26:32  15  ,cm8
15:26:32  16  ,cm10
15:26:32  17  ,cm12
15:26:32  18  ,cm14
15:26:32  19  ,cm16
15:26:32  20  ,cm18
15:26:32  21  --
15:26:32  22  ,ca4
15:26:32  23  ,ca6
15:26:32  24  ,ca8
15:26:32  25  ,ca10
15:26:32  26  ,ca12
15:26:32  27  ,ca14
15:26:32  28  ,ca16
15:26:32  29  ,ca18
15:26:32  30  --
15:26:32  31  ,cx4
15:26:32  32  ,cx6
15:26:32  33  ,cx8
15:26:32  34  ,cx10
15:26:32  35  ,cx12
15:26:32  36  ,cx14
15:26:32  37  ,cx16
15:26:32  38  ,cx18
15:26:32  39  --
15:26:32  40  ,crr4
15:26:32  41  ,crr6
15:26:32  42  ,crr8
15:26:32  43  ,crr10
15:26:32  44  ,crr12
15:26:32  45  ,crr14
15:26:32  46  ,crr16
15:26:32  47  ,crr18
15:26:32  48  --
15:26:32  49  ,hh
15:26:32  50  ,d
15:26:32  51  ,w
15:26:32  52  ,mpm
15:26:32  53  ,mph
15:26:32  54  FROM svm6122
15:26:32  55  ORDER BY ydate
15:26:32  56  /

Table created.

Elapsed: 00:00:00.42
15:26:32 SQL> 
15:26:32 SQL> -- rpt
15:26:32 SQL> 
15:26:32 SQL> SELECT
15:26:32   2  pair
15:26:32   3  ,trend
15:26:32   4  ,gatt
15:26:32   5  ,COUNT(pair)
15:26:32   6  ,AVG(g6)
15:26:32   7  FROM svm6142
15:26:32   8  GROUP BY pair,trend,gatt
15:26:32   9  ORDER BY pair,trend,gatt
15:26:32  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7684 -.00104826
egb_usd 	-1 up	      2626 .002933187
egb_usd 	-1		69
egb_usd 	 1 nup	      6463 -.00137572
egb_usd 	 1 up	      2617   .0029282
egb_usd 	 1		 3

6 rows selected.

Elapsed: 00:00:00.04
15:26:32 SQL> 
15:26:32 SQL> 
15:26:32 SQL> -- Derive NTILE based params:
15:26:32 SQL> 
15:26:32 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.44
15:26:33 SQL> CREATE TABLE svm6162 COMPRESS AS
15:26:33   2  SELECT
15:26:33   3  pair
15:26:33   4  ,ydate
15:26:33   5  ,prdate
15:26:33   6  ,clse
15:26:33   7  ,g6
15:26:33   8  ,gatt
15:26:33   9  ,gattn
15:26:33  10  ,trend
15:26:33  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
15:26:33  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
15:26:33  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
15:26:33  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
15:26:33  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
15:26:33  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
15:26:33  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
15:26:33  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
15:26:33  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
15:26:33  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
15:26:33  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
15:26:33  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
15:26:33  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
15:26:33  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
15:26:33  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
15:26:33  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
15:26:33  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
15:26:33  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
15:26:33  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
15:26:33  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
15:26:33  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
15:26:33  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
15:26:33  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
15:26:33  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
15:26:33  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
15:26:33  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
15:26:33  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
15:26:33  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
15:26:33  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
15:26:33  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
15:26:33  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
15:26:33  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
15:26:33  43  ,hh  att32
15:26:33  44  ,d   att33
15:26:33  45  ,w   att34
15:26:33  46  ,mpm att35
15:26:33  47  ,mph att36
15:26:33  48  ,trend att37
15:26:33  49  FROM svm6142
15:26:33  50  ORDER BY ydate
15:26:33  51  /

Table created.

Elapsed: 00:00:05.59
15:26:38 SQL> 
15:26:38 SQL> -- rpt
15:26:38 SQL> 
15:26:38 SQL> SELECT
15:26:38   2  pair
15:26:38   3  ,trend
15:26:38   4  ,gatt
15:26:38   5  ,COUNT(pair)
15:26:38   6  ,AVG(g6)
15:26:38   7  FROM svm6162
15:26:38   8  GROUP BY pair,trend,gatt
15:26:38   9  ORDER BY pair,trend,gatt
15:26:38  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7684 -.00104826
egb_usd 	-1 up	      2626 .002933187
egb_usd 	-1		69
egb_usd 	 1 nup	      6463 -.00137572
egb_usd 	 1 up	      2617   .0029282
egb_usd 	 1		 3

6 rows selected.

Elapsed: 00:00:00.03
15:26:38 SQL> 
15:26:38 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.24
15:26:38 SQL> CREATE TABLE modsrc COMPRESS AS
15:26:38   2  SELECT
15:26:38   3  pair
15:26:38   4  ,ydate
15:26:38   5  ,prdate
15:26:38   6  ,trend
15:26:38   7  ,g6
15:26:38   8  ,gatt
15:26:38   9  ,gattn
15:26:38  10  FROM svm6162
15:26:38  11  /

Table created.

Elapsed: 00:00:00.09
15:26:38 SQL> 
15:26:38 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
15:26:39 SQL> 
15:26:39 SQL> DROP   TABLE egb_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
15:26:39 SQL> CREATE TABLE egb_ms610 COMPRESS AS
15:26:39   2  SELECT
15:26:39   3  ydate
15:26:39   4  ,trend egb_trend
15:26:39   5  ,g6    egb_g6
15:26:39   6  ,gatt  egb_gatt
15:26:39   7  ,gattn egb_gattn
15:26:39   8  FROM modsrc
15:26:39   9  /

Table created.

Elapsed: 00:00:00.07
15:26:39 SQL> 
15:26:39 SQL> ANALYZE TABLE egb_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
15:26:39 SQL> 
15:26:39 SQL> -- I need a copy of the attributes:
15:26:39 SQL> 
15:26:39 SQL> 
15:26:39 SQL> DROP   TABLE egb_att;

Table dropped.

Elapsed: 00:00:00.04
15:26:39 SQL> CREATE TABLE egb_att COMPRESS AS
15:26:39   2  SELECT
15:26:39   3  ydate
15:26:39   4  ,att00 egb_att00
15:26:39   5  ,att01 egb_att01
15:26:39   6  ,att02 egb_att02
15:26:39   7  ,att03 egb_att03
15:26:39   8  ,att04 egb_att04
15:26:39   9  ,att05 egb_att05
15:26:39  10  ,att06 egb_att06
15:26:39  11  ,att07 egb_att07
15:26:39  12  ,att08 egb_att08
15:26:39  13  ,att09 egb_att09
15:26:39  14  ,att10 egb_att10
15:26:39  15  ,att11 egb_att11
15:26:39  16  ,att12 egb_att12
15:26:39  17  ,att13 egb_att13
15:26:39  18  ,att14 egb_att14
15:26:39  19  ,att15 egb_att15
15:26:39  20  ,att16 egb_att16
15:26:39  21  ,att17 egb_att17
15:26:39  22  ,att18 egb_att18
15:26:39  23  ,att19 egb_att19
15:26:39  24  ,att20 egb_att20
15:26:39  25  ,att21 egb_att21
15:26:39  26  ,att22 egb_att22
15:26:39  27  ,att23 egb_att23
15:26:39  28  ,att24 egb_att24
15:26:39  29  ,att25 egb_att25
15:26:39  30  ,att26 egb_att26
15:26:39  31  ,att27 egb_att27
15:26:39  32  ,att28 egb_att28
15:26:39  33  ,att29 egb_att29
15:26:39  34  ,att30 egb_att30
15:26:39  35  ,att31 egb_att31
15:26:39  36  ,att32 egb_att32
15:26:39  37  ,att33 egb_att33
15:26:39  38  ,att34 egb_att34
15:26:39  39  ,att35 egb_att35
15:26:39  40  ,att36 egb_att36
15:26:39  41  ,att37 egb_att37
15:26:39  42  FROM svm6162
15:26:39  43  /

Table created.

Elapsed: 00:00:00.17
15:26:39 SQL> 
15:26:39 SQL> ANALYZE TABLE egb_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
15:26:40 SQL> 
15:26:40 SQL> -- rpt
15:26:40 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19462

Elapsed: 00:00:00.91
15:26:40 SQL> SELECT COUNT(*)FROM egb_att;

  COUNT(*)
----------
     19462

Elapsed: 00:00:00.00
15:26:40 SQL> 
15:26:40 SQL> --
15:26:40 SQL> -- ejp610.sql
15:26:40 SQL> --
15:26:40 SQL> 
15:26:40 SQL> -- Creates views and tables for backtesting a forex SVM strategy
15:26:40 SQL> 
15:26:40 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.48
15:26:41 SQL> 
15:26:41 SQL> -- I created di5min here:
15:26:41 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
15:26:41 SQL> 
15:26:41 SQL> CREATE OR REPLACE VIEW svm6102 AS
15:26:41   2  SELECT
15:26:41   3  pair
15:26:41   4  ,ydate
15:26:41   5  ,prdate
15:26:41   6  ,rownum rnum -- acts as t in my time-series
15:26:41   7  ,clse
15:26:41   8  -- Derive a bunch of attributes from clse, the latest price:
15:26:41   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
15:26:41  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
15:26:41  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
15:26:41  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
15:26:41  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
15:26:41  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
15:26:41  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
15:26:41  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
15:26:41  17  --
15:26:41  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
15:26:41  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
15:26:41  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
15:26:41  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
15:26:41  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
15:26:41  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
15:26:41  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
15:26:41  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
15:26:41  26  --
15:26:41  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
15:26:41  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
15:26:41  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
15:26:41  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
15:26:41  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
15:26:41  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
15:26:41  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
15:26:41  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
15:26:41  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
15:26:41  36  FROM di5min WHERE pair LIKE'%ejp%'
15:26:41  37  AND ydate > sysdate - 95
15:26:41  38  ORDER BY ydate
15:26:41  39  /

View created.

Elapsed: 00:00:00.04
15:26:41 SQL> 
15:26:41 SQL> -- rpt
15:26:41 SQL> 
15:26:41 SQL> SELECT
15:26:41   2  pair
15:26:41   3  ,COUNT(pair)
15:26:41   4  ,MIN(clse),MAX(clse)
15:26:41   5  ,MIN(avg6),MAX(avg6)
15:26:41   6  ,MIN(ydate),MAX(ydate)
15:26:41   7  FROM svm6102
15:26:41   8  GROUP BY pair
15:26:41   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ejp_usd       19460 107.643765	115.63485 107.776148 115.509678 2010-10-03 20:55:01 2011-01-05 15:20:00

Elapsed: 00:00:00.87
15:26:42 SQL> 
15:26:42 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
15:26:42 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.21
15:26:42 SQL> CREATE TABLE svm6122 COMPRESS AS
15:26:42   2  SELECT
15:26:42   3  pair
15:26:42   4  ,ydate
15:26:42   5  ,prdate
15:26:42   6  ,clse
15:26:42   7  -- g6 is important. I want to predict g6:
15:26:42   8  ,ld6 - clse g6
15:26:42   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
15:26:42  10  -- I want more attributes from the ones I derived above:
15:26:42  11  -- clse relation to moving-min
15:26:42  12  ,clse-min4  cm4
15:26:42  13  ,clse-min6  cm6
15:26:42  14  ,clse-min8  cm8
15:26:42  15  ,clse-min10 cm10
15:26:42  16  ,clse-min12 cm12
15:26:42  17  ,clse-min14 cm14
15:26:42  18  ,clse-min16 cm16
15:26:42  19  ,clse-min18 cm18
15:26:42  20  -- clse relation to moving-avg
15:26:42  21  ,clse-avg4  ca4
15:26:42  22  ,clse-avg6  ca6
15:26:42  23  ,clse-avg8  ca8
15:26:42  24  ,clse-avg10 ca10
15:26:42  25  ,clse-avg12 ca12
15:26:42  26  ,clse-avg14 ca14
15:26:42  27  ,clse-avg16 ca16
15:26:42  28  ,clse-avg18 ca18
15:26:42  29  -- clse relation to moving-max
15:26:42  30  ,clse-max4  cx4
15:26:42  31  ,clse-max6  cx6
15:26:42  32  ,clse-max8  cx8
15:26:42  33  ,clse-max10 cx10
15:26:42  34  ,clse-max12 cx12
15:26:42  35  ,clse-max14 cx14
15:26:42  36  ,clse-max16 cx16
15:26:42  37  ,clse-max18 cx18
15:26:42  38  -- Derive more attributes.
15:26:42  39  -- I want to use CORR() here to help SVM see the shape of the series.
15:26:42  40  -- But COVAR_POP is more stable:
15:26:42  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
15:26:42  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
15:26:42  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
15:26:42  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
15:26:42  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
15:26:42  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
15:26:42  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
15:26:42  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
15:26:42  49  -- Derive date related attributes:
15:26:42  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
15:26:42  51  ,0+TO_CHAR(ydate,'D')d
15:26:42  52  ,0+TO_CHAR(ydate,'W')w
15:26:42  53  -- mpm stands for minutes-past-midnight:
15:26:42  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
15:26:42  55  -- mph stands for minutes-past-hour:
15:26:42  56  ,0+TO_CHAR(ydate,'MI')mph
15:26:42  57  FROM svm6102
15:26:42  58  ORDER BY ydate
15:26:42  59  /

Table created.

Elapsed: 00:00:02.13
15:26:44 SQL> 
15:26:44 SQL> -- rpt
15:26:44 SQL> 
15:26:44 SQL> SELECT
15:26:44   2  pair
15:26:44   3  ,COUNT(pair)
15:26:44   4  ,MIN(clse),MAX(clse)
15:26:44   5  ,MIN(ydate),MAX(ydate)
15:26:44   6  FROM svm6122
15:26:44   7  GROUP BY pair
15:26:44   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ejp_usd       19460 107.643765	115.63485 2010-10-03 20:55:01 2011-01-05 15:20:00

Elapsed: 00:00:00.03
15:26:44 SQL> 
15:26:44 SQL> -- Prepare for derivation of NTILE based params:
15:26:44 SQL> 
15:26:44 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.22
15:26:44 SQL> CREATE TABLE svm6142 COMPRESS AS
15:26:44   2  SELECT
15:26:44   3  pair
15:26:44   4  ,ydate
15:26:44   5  ,prdate
15:26:44   6  ,clse
15:26:44   7  ,g6
15:26:44   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
15:26:44   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
15:26:44  10  ,CASE WHEN trend IS NULL THEN 1
15:26:44  11  	    WHEN trend =0      THEN 1
15:26:44  12  	    ELSE trend END trend
15:26:44  13  ,cm4
15:26:44  14  ,cm6
15:26:44  15  ,cm8
15:26:44  16  ,cm10
15:26:44  17  ,cm12
15:26:44  18  ,cm14
15:26:44  19  ,cm16
15:26:44  20  ,cm18
15:26:44  21  --
15:26:44  22  ,ca4
15:26:44  23  ,ca6
15:26:44  24  ,ca8
15:26:44  25  ,ca10
15:26:44  26  ,ca12
15:26:44  27  ,ca14
15:26:44  28  ,ca16
15:26:44  29  ,ca18
15:26:44  30  --
15:26:44  31  ,cx4
15:26:44  32  ,cx6
15:26:44  33  ,cx8
15:26:44  34  ,cx10
15:26:44  35  ,cx12
15:26:44  36  ,cx14
15:26:44  37  ,cx16
15:26:44  38  ,cx18
15:26:44  39  --
15:26:44  40  ,crr4
15:26:44  41  ,crr6
15:26:44  42  ,crr8
15:26:44  43  ,crr10
15:26:44  44  ,crr12
15:26:44  45  ,crr14
15:26:44  46  ,crr16
15:26:44  47  ,crr18
15:26:44  48  --
15:26:44  49  ,hh
15:26:44  50  ,d
15:26:44  51  ,w
15:26:44  52  ,mpm
15:26:44  53  ,mph
15:26:44  54  FROM svm6122
15:26:44  55  ORDER BY ydate
15:26:44  56  /

Table created.

Elapsed: 00:00:00.39
15:26:45 SQL> 
15:26:45 SQL> -- rpt
15:26:45 SQL> 
15:26:45 SQL> SELECT
15:26:45   2  pair
15:26:45   3  ,trend
15:26:45   4  ,gatt
15:26:45   5  ,COUNT(pair)
15:26:45   6  ,AVG(g6)
15:26:45   7  FROM svm6142
15:26:45   8  GROUP BY pair,trend,gatt
15:26:45   9  ORDER BY pair,trend,gatt
15:26:45  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4986 -.32090265
ejp_usd 	-1 up	      4887 .272547708
ejp_usd 	-1		46
ejp_usd 	 1 nup	      4940 -.30127115
ejp_usd 	 1 up	      4575 .290080166
ejp_usd 	 1		26

6 rows selected.

Elapsed: 00:00:00.04
15:26:45 SQL> 
15:26:45 SQL> 
15:26:45 SQL> -- Derive NTILE based params:
15:26:45 SQL> 
15:26:45 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.22
15:26:45 SQL> CREATE TABLE svm6162 COMPRESS AS
15:26:45   2  SELECT
15:26:45   3  pair
15:26:45   4  ,ydate
15:26:45   5  ,prdate
15:26:45   6  ,clse
15:26:45   7  ,g6
15:26:45   8  ,gatt
15:26:45   9  ,gattn
15:26:45  10  ,trend
15:26:45  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
15:26:45  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
15:26:45  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
15:26:45  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
15:26:45  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
15:26:45  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
15:26:45  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
15:26:45  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
15:26:45  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
15:26:45  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
15:26:45  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
15:26:45  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
15:26:45  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
15:26:45  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
15:26:45  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
15:26:45  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
15:26:45  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
15:26:45  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
15:26:45  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
15:26:45  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
15:26:45  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
15:26:45  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
15:26:45  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
15:26:45  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
15:26:45  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
15:26:45  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
15:26:45  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
15:26:45  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
15:26:45  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
15:26:45  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
15:26:45  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
15:26:45  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
15:26:45  43  ,hh  att32
15:26:45  44  ,d   att33
15:26:45  45  ,w   att34
15:26:45  46  ,mpm att35
15:26:45  47  ,mph att36
15:26:45  48  ,trend att37
15:26:45  49  FROM svm6142
15:26:45  50  ORDER BY ydate
15:26:45  51  /

Table created.

Elapsed: 00:00:05.02
15:26:50 SQL> 
15:26:50 SQL> -- rpt
15:26:50 SQL> 
15:26:50 SQL> SELECT
15:26:50   2  pair
15:26:50   3  ,trend
15:26:50   4  ,gatt
15:26:50   5  ,COUNT(pair)
15:26:50   6  ,AVG(g6)
15:26:50   7  FROM svm6162
15:26:50   8  GROUP BY pair,trend,gatt
15:26:50   9  ORDER BY pair,trend,gatt
15:26:50  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4986 -.32090265
ejp_usd 	-1 up	      4887 .272547708
ejp_usd 	-1		46
ejp_usd 	 1 nup	      4940 -.30127115
ejp_usd 	 1 up	      4575 .290080166
ejp_usd 	 1		26

6 rows selected.

Elapsed: 00:00:00.03
15:26:50 SQL> 
15:26:50 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
15:26:50 SQL> CREATE TABLE modsrc COMPRESS AS
15:26:50   2  SELECT
15:26:50   3  pair
15:26:50   4  ,ydate
15:26:50   5  ,prdate
15:26:50   6  ,trend
15:26:50   7  ,g6
15:26:50   8  ,gatt
15:26:50   9  ,gattn
15:26:50  10  FROM svm6162
15:26:50  11  /

Table created.

Elapsed: 00:00:00.08
15:26:50 SQL> 
15:26:50 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
15:26:51 SQL> 
15:26:51 SQL> DROP   TABLE ejp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
15:26:51 SQL> CREATE TABLE ejp_ms610 COMPRESS AS
15:26:51   2  SELECT
15:26:51   3  ydate
15:26:51   4  ,trend ejp_trend
15:26:51   5  ,g6    ejp_g6
15:26:51   6  ,gatt  ejp_gatt
15:26:51   7  ,gattn ejp_gattn
15:26:51   8  FROM modsrc
15:26:51   9  /

Table created.

Elapsed: 00:00:00.06
15:26:51 SQL> 
15:26:51 SQL> ANALYZE TABLE ejp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
15:26:51 SQL> 
15:26:51 SQL> -- I need a copy of the attributes:
15:26:51 SQL> 
15:26:51 SQL> 
15:26:51 SQL> DROP   TABLE ejp_att;

Table dropped.

Elapsed: 00:00:00.05
15:26:51 SQL> CREATE TABLE ejp_att COMPRESS AS
15:26:51   2  SELECT
15:26:51   3  ydate
15:26:51   4  ,att00 ejp_att00
15:26:51   5  ,att01 ejp_att01
15:26:51   6  ,att02 ejp_att02
15:26:51   7  ,att03 ejp_att03
15:26:51   8  ,att04 ejp_att04
15:26:51   9  ,att05 ejp_att05
15:26:51  10  ,att06 ejp_att06
15:26:51  11  ,att07 ejp_att07
15:26:51  12  ,att08 ejp_att08
15:26:51  13  ,att09 ejp_att09
15:26:51  14  ,att10 ejp_att10
15:26:51  15  ,att11 ejp_att11
15:26:51  16  ,att12 ejp_att12
15:26:51  17  ,att13 ejp_att13
15:26:51  18  ,att14 ejp_att14
15:26:51  19  ,att15 ejp_att15
15:26:51  20  ,att16 ejp_att16
15:26:51  21  ,att17 ejp_att17
15:26:51  22  ,att18 ejp_att18
15:26:51  23  ,att19 ejp_att19
15:26:51  24  ,att20 ejp_att20
15:26:51  25  ,att21 ejp_att21
15:26:51  26  ,att22 ejp_att22
15:26:51  27  ,att23 ejp_att23
15:26:51  28  ,att24 ejp_att24
15:26:51  29  ,att25 ejp_att25
15:26:51  30  ,att26 ejp_att26
15:26:51  31  ,att27 ejp_att27
15:26:51  32  ,att28 ejp_att28
15:26:51  33  ,att29 ejp_att29
15:26:51  34  ,att30 ejp_att30
15:26:51  35  ,att31 ejp_att31
15:26:51  36  ,att32 ejp_att32
15:26:51  37  ,att33 ejp_att33
15:26:51  38  ,att34 ejp_att34
15:26:51  39  ,att35 ejp_att35
15:26:51  40  ,att36 ejp_att36
15:26:51  41  ,att37 ejp_att37
15:26:51  42  FROM svm6162
15:26:51  43  /

Table created.

Elapsed: 00:00:00.21
15:26:51 SQL> 
15:26:51 SQL> ANALYZE TABLE ejp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
15:26:52 SQL> 
15:26:52 SQL> -- rpt
15:26:52 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19460

Elapsed: 00:00:00.85
15:26:52 SQL> SELECT COUNT(*)FROM ejp_att;

  COUNT(*)
----------
     19460

Elapsed: 00:00:00.01
15:26:53 SQL> 
15:26:53 SQL> --
15:26:53 SQL> -- ajp610.sql
15:26:53 SQL> --
15:26:53 SQL> 
15:26:53 SQL> -- Creates views and tables for backtesting a forex SVM strategy
15:26:53 SQL> 
15:26:53 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.41
15:26:53 SQL> 
15:26:53 SQL> -- I created di5min here:
15:26:53 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
15:26:53 SQL> 
15:26:53 SQL> CREATE OR REPLACE VIEW svm6102 AS
15:26:53   2  SELECT
15:26:53   3  pair
15:26:53   4  ,ydate
15:26:53   5  ,prdate
15:26:53   6  ,rownum rnum -- acts as t in my time-series
15:26:53   7  ,clse
15:26:53   8  -- Derive a bunch of attributes from clse, the latest price:
15:26:53   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
15:26:53  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
15:26:53  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
15:26:53  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
15:26:53  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
15:26:53  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
15:26:53  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
15:26:53  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
15:26:53  17  --
15:26:53  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
15:26:53  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
15:26:53  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
15:26:53  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
15:26:53  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
15:26:53  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
15:26:53  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
15:26:53  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
15:26:53  26  --
15:26:53  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
15:26:53  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
15:26:53  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
15:26:53  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
15:26:53  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
15:26:53  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
15:26:53  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
15:26:53  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
15:26:53  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
15:26:53  36  FROM di5min WHERE pair LIKE'%ajp%'
15:26:53  37  AND ydate > sysdate - 95
15:26:53  38  ORDER BY ydate
15:26:53  39  /

View created.

Elapsed: 00:00:00.04
15:26:53 SQL> 
15:26:53 SQL> -- rpt
15:26:53 SQL> 
15:26:53 SQL> SELECT
15:26:53   2  pair
15:26:53   3  ,COUNT(pair)
15:26:53   4  ,MIN(clse),MAX(clse)
15:26:53   5  ,MIN(avg6),MAX(avg6)
15:26:53   6  ,MIN(ydate),MAX(ydate)
15:26:53   7  FROM svm6102
15:26:53   8  GROUP BY pair
15:26:53   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ajp_usd       19457  78.249976 83.6669853 78.5106193  83.546306 2010-10-03 20:55:01 2011-01-05 15:20:00

Elapsed: 00:00:00.77
15:26:54 SQL> 
15:26:54 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
15:26:54 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.25
15:26:54 SQL> CREATE TABLE svm6122 COMPRESS AS
15:26:54   2  SELECT
15:26:54   3  pair
15:26:54   4  ,ydate
15:26:54   5  ,prdate
15:26:54   6  ,clse
15:26:54   7  -- g6 is important. I want to predict g6:
15:26:54   8  ,ld6 - clse g6
15:26:54   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
15:26:54  10  -- I want more attributes from the ones I derived above:
15:26:54  11  -- clse relation to moving-min
15:26:54  12  ,clse-min4  cm4
15:26:54  13  ,clse-min6  cm6
15:26:54  14  ,clse-min8  cm8
15:26:54  15  ,clse-min10 cm10
15:26:54  16  ,clse-min12 cm12
15:26:54  17  ,clse-min14 cm14
15:26:54  18  ,clse-min16 cm16
15:26:54  19  ,clse-min18 cm18
15:26:54  20  -- clse relation to moving-avg
15:26:54  21  ,clse-avg4  ca4
15:26:54  22  ,clse-avg6  ca6
15:26:54  23  ,clse-avg8  ca8
15:26:54  24  ,clse-avg10 ca10
15:26:54  25  ,clse-avg12 ca12
15:26:54  26  ,clse-avg14 ca14
15:26:54  27  ,clse-avg16 ca16
15:26:54  28  ,clse-avg18 ca18
15:26:54  29  -- clse relation to moving-max
15:26:54  30  ,clse-max4  cx4
15:26:54  31  ,clse-max6  cx6
15:26:54  32  ,clse-max8  cx8
15:26:54  33  ,clse-max10 cx10
15:26:54  34  ,clse-max12 cx12
15:26:54  35  ,clse-max14 cx14
15:26:54  36  ,clse-max16 cx16
15:26:54  37  ,clse-max18 cx18
15:26:54  38  -- Derive more attributes.
15:26:54  39  -- I want to use CORR() here to help SVM see the shape of the series.
15:26:54  40  -- But COVAR_POP is more stable:
15:26:54  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
15:26:54  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
15:26:54  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
15:26:54  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
15:26:54  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
15:26:54  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
15:26:54  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
15:26:54  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
15:26:54  49  -- Derive date related attributes:
15:26:54  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
15:26:54  51  ,0+TO_CHAR(ydate,'D')d
15:26:54  52  ,0+TO_CHAR(ydate,'W')w
15:26:54  53  -- mpm stands for minutes-past-midnight:
15:26:54  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
15:26:54  55  -- mph stands for minutes-past-hour:
15:26:54  56  ,0+TO_CHAR(ydate,'MI')mph
15:26:54  57  FROM svm6102
15:26:54  58  ORDER BY ydate
15:26:54  59  /

Table created.

Elapsed: 00:00:02.00
15:26:56 SQL> 
15:26:56 SQL> -- rpt
15:26:56 SQL> 
15:26:56 SQL> SELECT
15:26:56   2  pair
15:26:56   3  ,COUNT(pair)
15:26:56   4  ,MIN(clse),MAX(clse)
15:26:56   5  ,MIN(ydate),MAX(ydate)
15:26:56   6  FROM svm6122
15:26:56   7  GROUP BY pair
15:26:56   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ajp_usd       19457  78.249976 83.6669853 2010-10-03 20:55:01 2011-01-05 15:20:00

Elapsed: 00:00:00.04
15:26:56 SQL> 
15:26:56 SQL> -- Prepare for derivation of NTILE based params:
15:26:56 SQL> 
15:26:56 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.28
15:26:56 SQL> CREATE TABLE svm6142 COMPRESS AS
15:26:56   2  SELECT
15:26:56   3  pair
15:26:56   4  ,ydate
15:26:56   5  ,prdate
15:26:56   6  ,clse
15:26:56   7  ,g6
15:26:56   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
15:26:56   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
15:26:56  10  ,CASE WHEN trend IS NULL THEN 1
15:26:56  11  	    WHEN trend =0      THEN 1
15:26:56  12  	    ELSE trend END trend
15:26:56  13  ,cm4
15:26:56  14  ,cm6
15:26:56  15  ,cm8
15:26:56  16  ,cm10
15:26:56  17  ,cm12
15:26:56  18  ,cm14
15:26:56  19  ,cm16
15:26:56  20  ,cm18
15:26:56  21  --
15:26:56  22  ,ca4
15:26:56  23  ,ca6
15:26:56  24  ,ca8
15:26:56  25  ,ca10
15:26:56  26  ,ca12
15:26:56  27  ,ca14
15:26:56  28  ,ca16
15:26:56  29  ,ca18
15:26:56  30  --
15:26:56  31  ,cx4
15:26:56  32  ,cx6
15:26:56  33  ,cx8
15:26:56  34  ,cx10
15:26:56  35  ,cx12
15:26:56  36  ,cx14
15:26:56  37  ,cx16
15:26:56  38  ,cx18
15:26:56  39  --
15:26:56  40  ,crr4
15:26:56  41  ,crr6
15:26:56  42  ,crr8
15:26:56  43  ,crr10
15:26:56  44  ,crr12
15:26:56  45  ,crr14
15:26:56  46  ,crr16
15:26:56  47  ,crr18
15:26:56  48  --
15:26:56  49  ,hh
15:26:56  50  ,d
15:26:56  51  ,w
15:26:56  52  ,mpm
15:26:56  53  ,mph
15:26:56  54  FROM svm6122
15:26:56  55  ORDER BY ydate
15:26:56  56  /

Table created.

Elapsed: 00:00:00.38
15:26:57 SQL> 
15:26:57 SQL> -- rpt
15:26:57 SQL> 
15:26:57 SQL> SELECT
15:26:57   2  pair
15:26:57   3  ,trend
15:26:57   4  ,gatt
15:26:57   5  ,COUNT(pair)
15:26:57   6  ,AVG(g6)
15:26:57   7  FROM svm6142
15:26:57   8  GROUP BY pair,trend,gatt
15:26:57   9  ORDER BY pair,trend,gatt
15:26:57  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4244 -.22701426
ajp_usd 	-1 up	      5169 .222425648
ajp_usd 	-1		18
ajp_usd 	 1 nup	      5227 -.20362774
ajp_usd 	 1 up	      4745 .206911097
ajp_usd 	 1		54

6 rows selected.

Elapsed: 00:00:00.03
15:26:57 SQL> 
15:26:57 SQL> 
15:26:57 SQL> -- Derive NTILE based params:
15:26:57 SQL> 
15:26:57 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.17
15:26:57 SQL> CREATE TABLE svm6162 COMPRESS AS
15:26:57   2  SELECT
15:26:57   3  pair
15:26:57   4  ,ydate
15:26:57   5  ,prdate
15:26:57   6  ,clse
15:26:57   7  ,g6
15:26:57   8  ,gatt
15:26:57   9  ,gattn
15:26:57  10  ,trend
15:26:57  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
15:26:57  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
15:26:57  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
15:26:57  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
15:26:57  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
15:26:57  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
15:26:57  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
15:26:57  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
15:26:57  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
15:26:57  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
15:26:57  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
15:26:57  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
15:26:57  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
15:26:57  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
15:26:57  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
15:26:57  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
15:26:57  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
15:26:57  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
15:26:57  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
15:26:57  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
15:26:57  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
15:26:57  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
15:26:57  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
15:26:57  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
15:26:57  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
15:26:57  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
15:26:57  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
15:26:57  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
15:26:57  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
15:26:57  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
15:26:57  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
15:26:57  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
15:26:57  43  ,hh  att32
15:26:57  44  ,d   att33
15:26:57  45  ,w   att34
15:26:57  46  ,mpm att35
15:26:57  47  ,mph att36
15:26:57  48  ,trend att37
15:26:57  49  FROM svm6142
15:26:57  50  ORDER BY ydate
15:26:57  51  /

Table created.

Elapsed: 00:00:05.03
15:27:02 SQL> 
15:27:02 SQL> -- rpt
15:27:02 SQL> 
15:27:02 SQL> SELECT
15:27:02   2  pair
15:27:02   3  ,trend
15:27:02   4  ,gatt
15:27:02   5  ,COUNT(pair)
15:27:02   6  ,AVG(g6)
15:27:02   7  FROM svm6162
15:27:02   8  GROUP BY pair,trend,gatt
15:27:02   9  ORDER BY pair,trend,gatt
15:27:02  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4244 -.22701426
ajp_usd 	-1 up	      5169 .222425648
ajp_usd 	-1		18
ajp_usd 	 1 nup	      5227 -.20362774
ajp_usd 	 1 up	      4745 .206911097
ajp_usd 	 1		54

6 rows selected.

Elapsed: 00:00:00.02
15:27:02 SQL> 
15:27:02 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
15:27:02 SQL> CREATE TABLE modsrc COMPRESS AS
15:27:02   2  SELECT
15:27:02   3  pair
15:27:02   4  ,ydate
15:27:02   5  ,prdate
15:27:02   6  ,trend
15:27:02   7  ,g6
15:27:02   8  ,gatt
15:27:02   9  ,gattn
15:27:02  10  FROM svm6162
15:27:02  11  /

Table created.

Elapsed: 00:00:00.08
15:27:02 SQL> 
15:27:02 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
15:27:02 SQL> 
15:27:02 SQL> DROP   TABLE ajp_ms610 ;

Table dropped.

Elapsed: 00:00:00.03
15:27:02 SQL> CREATE TABLE ajp_ms610 COMPRESS AS
15:27:02   2  SELECT
15:27:02   3  ydate
15:27:02   4  ,trend ajp_trend
15:27:02   5  ,g6    ajp_g6
15:27:02   6  ,gatt  ajp_gatt
15:27:02   7  ,gattn ajp_gattn
15:27:02   8  FROM modsrc
15:27:02   9  /

Table created.

Elapsed: 00:00:00.08
15:27:03 SQL> 
15:27:03 SQL> ANALYZE TABLE ajp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
15:27:03 SQL> 
15:27:03 SQL> -- I need a copy of the attributes:
15:27:03 SQL> 
15:27:03 SQL> 
15:27:03 SQL> DROP   TABLE ajp_att;

Table dropped.

Elapsed: 00:00:00.05
15:27:03 SQL> CREATE TABLE ajp_att COMPRESS AS
15:27:03   2  SELECT
15:27:03   3  ydate
15:27:03   4  ,att00 ajp_att00
15:27:03   5  ,att01 ajp_att01
15:27:03   6  ,att02 ajp_att02
15:27:03   7  ,att03 ajp_att03
15:27:03   8  ,att04 ajp_att04
15:27:03   9  ,att05 ajp_att05
15:27:03  10  ,att06 ajp_att06
15:27:03  11  ,att07 ajp_att07
15:27:03  12  ,att08 ajp_att08
15:27:03  13  ,att09 ajp_att09
15:27:03  14  ,att10 ajp_att10
15:27:03  15  ,att11 ajp_att11
15:27:03  16  ,att12 ajp_att12
15:27:03  17  ,att13 ajp_att13
15:27:03  18  ,att14 ajp_att14
15:27:03  19  ,att15 ajp_att15
15:27:03  20  ,att16 ajp_att16
15:27:03  21  ,att17 ajp_att17
15:27:03  22  ,att18 ajp_att18
15:27:03  23  ,att19 ajp_att19
15:27:03  24  ,att20 ajp_att20
15:27:03  25  ,att21 ajp_att21
15:27:03  26  ,att22 ajp_att22
15:27:03  27  ,att23 ajp_att23
15:27:03  28  ,att24 ajp_att24
15:27:03  29  ,att25 ajp_att25
15:27:03  30  ,att26 ajp_att26
15:27:03  31  ,att27 ajp_att27
15:27:03  32  ,att28 ajp_att28
15:27:03  33  ,att29 ajp_att29
15:27:03  34  ,att30 ajp_att30
15:27:03  35  ,att31 ajp_att31
15:27:03  36  ,att32 ajp_att32
15:27:03  37  ,att33 ajp_att33
15:27:03  38  ,att34 ajp_att34
15:27:03  39  ,att35 ajp_att35
15:27:03  40  ,att36 ajp_att36
15:27:03  41  ,att37 ajp_att37
15:27:03  42  FROM svm6162
15:27:03  43  /

Table created.

Elapsed: 00:00:00.17
15:27:03 SQL> 
15:27:03 SQL> ANALYZE TABLE ajp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
15:27:03 SQL> 
15:27:03 SQL> -- rpt
15:27:03 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19457

Elapsed: 00:00:00.74
15:27:04 SQL> SELECT COUNT(*)FROM ajp_att;

  COUNT(*)
----------
     19457

Elapsed: 00:00:00.00
15:27:04 SQL> 
15:27:04 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
