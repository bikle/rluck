
SQL*Plus: Release 11.2.0.1.0 Production on Fri Dec 24 21:23:01 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

21:23:01 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
21:23:01 SQL> 21:23:01 SQL> --
21:23:01 SQL> -- eur10.sql
21:23:01 SQL> --
21:23:01 SQL> 
21:23:01 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:23:01 SQL> 
21:23:01 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.45
21:23:01 SQL> 
21:23:01 SQL> -- I created di5min here:
21:23:01 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:23:01 SQL> 
21:23:01 SQL> CREATE OR REPLACE VIEW v10 AS
21:23:01   2  SELECT
21:23:01   3  pair
21:23:01   4  ,ydate
21:23:01   5  ,prdate
21:23:01   6  ,rownum rnum -- acts as t in my time-series
21:23:01   7  ,clse
21:23:01   8  -- Derive a bunch of attributes from clse, the latest price:
21:23:01   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:23:01  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:23:01  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:23:01  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:23:01  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:23:01  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:23:01  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:23:01  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:23:01  17  --
21:23:01  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:23:01  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:23:01  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:23:01  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:23:01  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:23:01  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:23:01  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:23:01  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:23:01  26  --
21:23:01  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:23:01  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:23:01  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:23:01  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:23:01  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:23:01  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:23:01  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:23:01  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:23:01  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:23:01  36  FROM di5min WHERE pair LIKE'%eur%'
21:23:01  37  ORDER BY ydate
21:23:01  38  /

View created.

Elapsed: 00:00:00.05
21:23:01 SQL> 
21:23:01 SQL> -- rpt
21:23:01 SQL> 
21:23:01 SQL> SELECT
21:23:01   2  pair
21:23:01   3  ,COUNT(pair)
21:23:01   4  ,MIN(clse),MAX(clse)
21:23:01   5  ,MIN(avg6),MAX(avg6)
21:23:01   6  ,MIN(ydate),MAX(ydate)
21:23:01   7  FROM v10
21:23:01   8  GROUP BY pair
21:23:01   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       20742    1.29735	   1.4273 1.29875103 1.42436233 2010-09-15 21:25:01 2010-12-24 21:15:00

Elapsed: 00:00:00.95
21:23:02 SQL> 
21:23:02 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:23:02 SQL> 
21:23:02 SQL> CREATE OR REPLACE VIEW v12 AS
21:23:02   2  SELECT
21:23:02   3  pair
21:23:02   4  ,ydate
21:23:02   5  ,prdate
21:23:02   6  ,clse
21:23:02   7  -- g6 is important. I want to predict g6:
21:23:02   8  ,ld6 - clse g6
21:23:02   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:23:02  10  -- I want more attributes from the ones I derived above:
21:23:02  11  -- clse relation to moving-min
21:23:02  12  ,clse-min4  cm4
21:23:02  13  ,clse-min6  cm6
21:23:02  14  ,clse-min8  cm8
21:23:02  15  ,clse-min10 cm10
21:23:02  16  ,clse-min12 cm12
21:23:02  17  ,clse-min14 cm14
21:23:02  18  ,clse-min16 cm16
21:23:02  19  ,clse-min18 cm18
21:23:02  20  -- clse relation to moving-avg
21:23:02  21  ,clse-avg4  ca4
21:23:02  22  ,clse-avg6  ca6
21:23:02  23  ,clse-avg8  ca8
21:23:02  24  ,clse-avg10 ca10
21:23:02  25  ,clse-avg12 ca12
21:23:02  26  ,clse-avg14 ca14
21:23:02  27  ,clse-avg16 ca16
21:23:02  28  ,clse-avg18 ca18
21:23:02  29  -- clse relation to moving-max
21:23:02  30  ,clse-max4  cx4
21:23:02  31  ,clse-max6  cx6
21:23:02  32  ,clse-max8  cx8
21:23:02  33  ,clse-max10 cx10
21:23:02  34  ,clse-max12 cx12
21:23:02  35  ,clse-max14 cx14
21:23:02  36  ,clse-max16 cx16
21:23:02  37  ,clse-max18 cx18
21:23:02  38  -- Derive more attributes.
21:23:02  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:23:02  40  -- But COVAR_POP is more stable:
21:23:02  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:23:02  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:23:02  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:23:02  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:23:02  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:23:02  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:23:02  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:23:02  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:23:02  49  -- Derive date related attributes:
21:23:02  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:23:02  51  ,0+TO_CHAR(ydate,'D')d
21:23:02  52  ,0+TO_CHAR(ydate,'W')w
21:23:02  53  -- mpm stands for minutes-past-midnight:
21:23:02  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:23:02  55  -- mph stands for minutes-past-hour:
21:23:02  56  ,0+TO_CHAR(ydate,'MI')mph
21:23:02  57  FROM v10
21:23:02  58  ORDER BY ydate
21:23:02  59  /

View created.

Elapsed: 00:00:00.04
21:23:02 SQL> 
21:23:02 SQL> -- rpt
21:23:02 SQL> 
21:23:02 SQL> SELECT
21:23:02   2  pair
21:23:02   3  ,COUNT(pair)
21:23:02   4  ,MIN(clse),MAX(clse)
21:23:02   5  ,MIN(ydate),MAX(ydate)
21:23:02   6  FROM v12
21:23:02   7  GROUP BY pair
21:23:02   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       20742    1.29735	   1.4273 2010-09-15 21:25:01 2010-12-24 21:15:00

Elapsed: 00:00:01.60
21:23:04 SQL> 
21:23:04 SQL> -- Prepare for derivation of NTILE based params:
21:23:04 SQL> 
21:23:04 SQL> CREATE OR REPLACE VIEW v14 AS
21:23:04   2  SELECT
21:23:04   3  pair
21:23:04   4  ,ydate
21:23:04   5  ,prdate
21:23:04   6  ,clse
21:23:04   7  ,g6
21:23:04   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:23:04   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:23:04  10  ,CASE WHEN trend IS NULL THEN 1
21:23:04  11  	    WHEN trend =0      THEN 1
21:23:04  12  	    ELSE trend END trend
21:23:04  13  ,cm4
21:23:04  14  ,cm6
21:23:04  15  ,cm8
21:23:04  16  ,cm10
21:23:04  17  ,cm12
21:23:04  18  ,cm14
21:23:04  19  ,cm16
21:23:04  20  ,cm18
21:23:04  21  --
21:23:04  22  ,ca4
21:23:04  23  ,ca6
21:23:04  24  ,ca8
21:23:04  25  ,ca10
21:23:04  26  ,ca12
21:23:04  27  ,ca14
21:23:04  28  ,ca16
21:23:04  29  ,ca18
21:23:04  30  --
21:23:04  31  ,cx4
21:23:04  32  ,cx6
21:23:04  33  ,cx8
21:23:04  34  ,cx10
21:23:04  35  ,cx12
21:23:04  36  ,cx14
21:23:04  37  ,cx16
21:23:04  38  ,cx18
21:23:04  39  --
21:23:04  40  ,crr4
21:23:04  41  ,crr6
21:23:04  42  ,crr8
21:23:04  43  ,crr10
21:23:04  44  ,crr12
21:23:04  45  ,crr14
21:23:04  46  ,crr16
21:23:04  47  ,crr18
21:23:04  48  --
21:23:04  49  ,hh
21:23:04  50  ,d
21:23:04  51  ,w
21:23:04  52  ,mpm
21:23:04  53  ,mph
21:23:04  54  FROM v12
21:23:04  55  ORDER BY ydate
21:23:04  56  /

View created.

Elapsed: 00:00:00.04
21:23:04 SQL> 
21:23:04 SQL> -- rpt
21:23:04 SQL> 
21:23:04 SQL> SELECT
21:23:04   2  pair
21:23:04   3  ,trend
21:23:04   4  ,gatt
21:23:04   5  ,COUNT(pair)
21:23:04   6  ,AVG(g6)
21:23:04   7  FROM v14
21:23:04   8  GROUP BY pair,trend,gatt
21:23:04   9  ORDER BY pair,trend,gatt
21:23:04  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6295 -.00299196
eur_usd 	-1 up	      3905 .004550823
eur_usd 	-1		50
eur_usd 	 1 nup	      6309 -.00309855
eur_usd 	 1 up	      4161 .005150264
eur_usd 	 1		22

6 rows selected.

Elapsed: 00:00:01.66
21:23:05 SQL> 
21:23:05 SQL> 
21:23:05 SQL> -- Prepare for derivation of NTILE based params:
21:23:05 SQL> 
21:23:05 SQL> CREATE OR REPLACE VIEW v16 AS
21:23:05   2  SELECT
21:23:05   3  pair
21:23:05   4  ,ydate
21:23:05   5  ,prdate
21:23:05   6  ,clse
21:23:05   7  ,g6
21:23:05   8  ,gatt
21:23:05   9  ,gattn
21:23:05  10  ,trend
21:23:05  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:23:05  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:23:05  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:23:05  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:23:05  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:23:05  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:23:05  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:23:05  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:23:05  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:23:05  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:23:05  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:23:05  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:23:05  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:23:05  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:23:05  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:23:05  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:23:05  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:23:05  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:23:05  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:23:05  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:23:05  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:23:05  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:23:05  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:23:05  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:23:05  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:23:05  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:23:05  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:23:05  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:23:05  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:23:05  40  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:23:05  41  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:23:05  42  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:23:05  43  ,hh  att32
21:23:05  44  ,d   att33
21:23:05  45  ,w   att34
21:23:05  46  ,mpm att35
21:23:05  47  ,mph att36
21:23:05  48  ,trend att37
21:23:05  49  FROM v14
21:23:05  50  ORDER BY ydate
21:23:05  51  /

View created.

Elapsed: 00:00:00.10
21:23:05 SQL> 
21:23:05 SQL> -- rpt
21:23:05 SQL> 
21:23:05 SQL> SELECT
21:23:05   2  pair
21:23:05   3  ,trend
21:23:05   4  ,gatt
21:23:05   5  ,COUNT(pair)
21:23:05   6  ,AVG(g6)
21:23:05   7  FROM v16
21:23:05   8  GROUP BY pair,trend,gatt
21:23:05   9  ORDER BY pair,trend,gatt
21:23:05  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6295 -.00299196
eur_usd 	-1 up	      3905 .004550823
eur_usd 	-1		50
eur_usd 	 1 nup	      6309 -.00309855
eur_usd 	 1 up	      4161 .005150264
eur_usd 	 1		22

6 rows selected.

Elapsed: 00:00:06.73
21:23:12 SQL> 
21:23:12 SQL> --
21:23:12 SQL> -- aud10.sql
21:23:12 SQL> --
21:23:12 SQL> 
21:23:12 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:23:12 SQL> 
21:23:12 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.03
21:23:12 SQL> 
21:23:12 SQL> -- I created di5min here:
21:23:12 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:23:12 SQL> 
21:23:12 SQL> CREATE OR REPLACE VIEW v10 AS
21:23:12   2  SELECT
21:23:12   3  pair
21:23:12   4  ,ydate
21:23:12   5  ,prdate
21:23:12   6  ,rownum rnum -- acts as t in my time-series
21:23:12   7  ,clse
21:23:12   8  -- Derive a bunch of attributes from clse, the latest price:
21:23:12   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:23:12  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:23:12  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:23:12  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:23:12  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:23:12  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:23:12  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:23:12  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:23:12  17  --
21:23:12  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:23:12  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:23:12  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:23:12  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:23:12  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:23:12  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:23:12  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:23:12  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:23:12  26  --
21:23:12  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:23:12  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:23:12  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:23:12  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:23:12  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:23:12  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:23:12  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:23:12  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:23:12  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:23:12  36  FROM di5min WHERE pair LIKE'%aud%'
21:23:12  37  ORDER BY ydate
21:23:12  38  /

View created.

Elapsed: 00:00:00.05
21:23:12 SQL> 
21:23:12 SQL> -- rpt
21:23:12 SQL> 
21:23:12 SQL> SELECT
21:23:12   2  pair
21:23:12   3  ,COUNT(pair)
21:23:12   4  ,MIN(clse),MAX(clse)
21:23:12   5  ,MIN(avg6),MAX(avg6)
21:23:12   6  ,MIN(ydate),MAX(ydate)
21:23:12   7  FROM v10
21:23:12   8  GROUP BY pair
21:23:12   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       20739	 .9332	   1.0181 .935386301 1.01556438 2010-09-15 21:25:01 2010-12-24 21:15:00

Elapsed: 00:00:00.90
21:23:13 SQL> 
21:23:13 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:23:13 SQL> 
21:23:13 SQL> CREATE OR REPLACE VIEW v12 AS
21:23:13   2  SELECT
21:23:13   3  pair
21:23:13   4  ,ydate
21:23:13   5  ,prdate
21:23:13   6  ,clse
21:23:13   7  -- g6 is important. I want to predict g6:
21:23:13   8  ,ld6 - clse g6
21:23:13   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:23:13  10  -- I want more attributes from the ones I derived above:
21:23:13  11  -- clse relation to moving-min
21:23:13  12  ,clse-min4  cm4
21:23:13  13  ,clse-min6  cm6
21:23:13  14  ,clse-min8  cm8
21:23:13  15  ,clse-min10 cm10
21:23:13  16  ,clse-min12 cm12
21:23:13  17  ,clse-min14 cm14
21:23:13  18  ,clse-min16 cm16
21:23:13  19  ,clse-min18 cm18
21:23:13  20  -- clse relation to moving-avg
21:23:13  21  ,clse-avg4  ca4
21:23:13  22  ,clse-avg6  ca6
21:23:13  23  ,clse-avg8  ca8
21:23:13  24  ,clse-avg10 ca10
21:23:13  25  ,clse-avg12 ca12
21:23:13  26  ,clse-avg14 ca14
21:23:13  27  ,clse-avg16 ca16
21:23:13  28  ,clse-avg18 ca18
21:23:13  29  -- clse relation to moving-max
21:23:13  30  ,clse-max4  cx4
21:23:13  31  ,clse-max6  cx6
21:23:13  32  ,clse-max8  cx8
21:23:13  33  ,clse-max10 cx10
21:23:13  34  ,clse-max12 cx12
21:23:13  35  ,clse-max14 cx14
21:23:13  36  ,clse-max16 cx16
21:23:13  37  ,clse-max18 cx18
21:23:13  38  -- Derive more attributes.
21:23:13  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:23:13  40  -- But COVAR_POP is more stable:
21:23:13  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:23:13  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:23:13  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:23:13  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:23:13  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:23:13  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:23:13  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:23:13  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:23:13  49  -- Derive date related attributes:
21:23:13  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:23:13  51  ,0+TO_CHAR(ydate,'D')d
21:23:13  52  ,0+TO_CHAR(ydate,'W')w
21:23:13  53  -- mpm stands for minutes-past-midnight:
21:23:13  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:23:13  55  -- mph stands for minutes-past-hour:
21:23:13  56  ,0+TO_CHAR(ydate,'MI')mph
21:23:13  57  FROM v10
21:23:13  58  ORDER BY ydate
21:23:13  59  /

View created.

Elapsed: 00:00:00.06
21:23:13 SQL> 
21:23:13 SQL> -- rpt
21:23:13 SQL> 
21:23:13 SQL> SELECT
21:23:13   2  pair
21:23:13   3  ,COUNT(pair)
21:23:13   4  ,MIN(clse),MAX(clse)
21:23:13   5  ,MIN(ydate),MAX(ydate)
21:23:13   6  FROM v12
21:23:13   7  GROUP BY pair
21:23:13   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       20739	 .9332	   1.0181 2010-09-15 21:25:01 2010-12-24 21:15:00

Elapsed: 00:00:01.57
21:23:15 SQL> 
21:23:15 SQL> -- Prepare for derivation of NTILE based params:
21:23:15 SQL> 
21:23:15 SQL> CREATE OR REPLACE VIEW v14 AS
21:23:15   2  SELECT
21:23:15   3  pair
21:23:15   4  ,ydate
21:23:15   5  ,prdate
21:23:15   6  ,clse
21:23:15   7  ,g6
21:23:15   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:23:15   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:23:15  10  ,CASE WHEN trend IS NULL THEN 1
21:23:15  11  	    WHEN trend =0      THEN 1
21:23:15  12  	    ELSE trend END trend
21:23:15  13  ,cm4
21:23:15  14  ,cm6
21:23:15  15  ,cm8
21:23:15  16  ,cm10
21:23:15  17  ,cm12
21:23:15  18  ,cm14
21:23:15  19  ,cm16
21:23:15  20  ,cm18
21:23:15  21  --
21:23:15  22  ,ca4
21:23:15  23  ,ca6
21:23:15  24  ,ca8
21:23:15  25  ,ca10
21:23:15  26  ,ca12
21:23:15  27  ,ca14
21:23:15  28  ,ca16
21:23:15  29  ,ca18
21:23:15  30  --
21:23:15  31  ,cx4
21:23:15  32  ,cx6
21:23:15  33  ,cx8
21:23:15  34  ,cx10
21:23:15  35  ,cx12
21:23:15  36  ,cx14
21:23:15  37  ,cx16
21:23:15  38  ,cx18
21:23:15  39  --
21:23:15  40  ,crr4
21:23:15  41  ,crr6
21:23:15  42  ,crr8
21:23:15  43  ,crr10
21:23:15  44  ,crr12
21:23:15  45  ,crr14
21:23:15  46  ,crr16
21:23:15  47  ,crr18
21:23:15  48  --
21:23:15  49  ,hh
21:23:15  50  ,d
21:23:15  51  ,w
21:23:15  52  ,mpm
21:23:15  53  ,mph
21:23:15  54  FROM v12
21:23:15  55  ORDER BY ydate
21:23:15  56  /

View created.

Elapsed: 00:00:00.04
21:23:15 SQL> 
21:23:15 SQL> -- rpt
21:23:15 SQL> 
21:23:15 SQL> SELECT
21:23:15   2  pair
21:23:15   3  ,trend
21:23:15   4  ,gatt
21:23:15   5  ,COUNT(pair)
21:23:15   6  ,AVG(g6)
21:23:15   7  FROM v14
21:23:15   8  GROUP BY pair,trend,gatt
21:23:15   9  ORDER BY pair,trend,gatt
21:23:15  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5458 -.00207968
aud_usd 	-1 up	      4030 .003724423
aud_usd 	-1		18
aud_usd 	 1 nup	      7182 -.00213378
aud_usd 	 1 up	      3997 .004125554
aud_usd 	 1		54

6 rows selected.

Elapsed: 00:00:01.60
21:23:16 SQL> 
21:23:16 SQL> 
21:23:16 SQL> -- Prepare for derivation of NTILE based params:
21:23:16 SQL> 
21:23:16 SQL> CREATE OR REPLACE VIEW v16 AS
21:23:16   2  SELECT
21:23:16   3  pair
21:23:16   4  ,ydate
21:23:16   5  ,prdate
21:23:16   6  ,clse
21:23:16   7  ,g6
21:23:16   8  ,gatt
21:23:16   9  ,gattn
21:23:16  10  ,trend
21:23:16  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:23:16  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:23:16  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:23:16  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:23:16  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:23:16  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:23:16  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:23:16  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:23:16  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:23:16  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:23:16  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:23:16  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:23:16  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:23:16  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:23:16  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:23:16  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:23:16  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:23:16  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:23:16  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:23:16  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:23:16  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:23:16  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:23:16  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:23:16  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:23:16  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:23:16  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:23:16  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:23:16  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:23:16  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:23:16  40  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:23:16  41  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:23:16  42  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:23:16  43  ,hh  att32
21:23:16  44  ,d   att33
21:23:16  45  ,w   att34
21:23:16  46  ,mpm att35
21:23:16  47  ,mph att36
21:23:16  48  ,trend att37
21:23:16  49  FROM v14
21:23:16  50  ORDER BY ydate
21:23:16  51  /

View created.

Elapsed: 00:00:00.05
21:23:17 SQL> 
21:23:17 SQL> -- rpt
21:23:17 SQL> 
21:23:17 SQL> SELECT
21:23:17   2  pair
21:23:17   3  ,trend
21:23:17   4  ,gatt
21:23:17   5  ,COUNT(pair)
21:23:17   6  ,AVG(g6)
21:23:17   7  FROM v16
21:23:17   8  GROUP BY pair,trend,gatt
21:23:17   9  ORDER BY pair,trend,gatt
21:23:17  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5458 -.00207968
aud_usd 	-1 up	      4030 .003724423
aud_usd 	-1		18
aud_usd 	 1 nup	      7182 -.00213378
aud_usd 	 1 up	      3997 .004125554
aud_usd 	 1		54

6 rows selected.

Elapsed: 00:00:06.60
21:23:23 SQL> 
21:23:23 SQL> --
21:23:23 SQL> -- gbp10.sql
21:23:23 SQL> --
21:23:23 SQL> 
21:23:23 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:23:23 SQL> 
21:23:23 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.01
21:23:23 SQL> 
21:23:23 SQL> -- I created di5min here:
21:23:23 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:23:23 SQL> 
21:23:23 SQL> CREATE OR REPLACE VIEW v10 AS
21:23:23   2  SELECT
21:23:23   3  pair
21:23:23   4  ,ydate
21:23:23   5  ,prdate
21:23:23   6  ,rownum rnum -- acts as t in my time-series
21:23:23   7  ,clse
21:23:23   8  -- Derive a bunch of attributes from clse, the latest price:
21:23:23   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:23:23  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:23:23  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:23:23  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:23:23  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:23:23  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:23:23  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:23:23  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:23:23  17  --
21:23:23  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:23:23  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:23:23  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:23:23  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:23:23  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:23:23  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:23:23  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:23:23  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:23:23  26  --
21:23:23  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:23:23  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:23:23  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:23:23  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:23:23  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:23:23  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:23:23  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:23:23  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:23:23  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:23:23  36  FROM di5min WHERE pair LIKE'%gbp%'
21:23:23  37  ORDER BY ydate
21:23:23  38  /

View created.

Elapsed: 00:00:00.04
21:23:23 SQL> 
21:23:23 SQL> -- rpt
21:23:23 SQL> 
21:23:23 SQL> SELECT
21:23:23   2  pair
21:23:23   3  ,COUNT(pair)
21:23:23   4  ,MIN(clse),MAX(clse)
21:23:23   5  ,MIN(avg6),MAX(avg6)
21:23:23   6  ,MIN(ydate),MAX(ydate)
21:23:23   7  FROM v10
21:23:23   8  GROUP BY pair
21:23:23   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       20741   1.535825	   1.6295 1.53821404 1.62716986 2010-09-15 21:25:01 2010-12-24 21:15:00

Elapsed: 00:00:00.93
21:23:24 SQL> 
21:23:24 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:23:24 SQL> 
21:23:24 SQL> CREATE OR REPLACE VIEW v12 AS
21:23:24   2  SELECT
21:23:24   3  pair
21:23:24   4  ,ydate
21:23:24   5  ,prdate
21:23:24   6  ,clse
21:23:24   7  -- g6 is important. I want to predict g6:
21:23:24   8  ,ld6 - clse g6
21:23:24   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:23:24  10  -- I want more attributes from the ones I derived above:
21:23:24  11  -- clse relation to moving-min
21:23:24  12  ,clse-min4  cm4
21:23:24  13  ,clse-min6  cm6
21:23:24  14  ,clse-min8  cm8
21:23:24  15  ,clse-min10 cm10
21:23:24  16  ,clse-min12 cm12
21:23:24  17  ,clse-min14 cm14
21:23:24  18  ,clse-min16 cm16
21:23:24  19  ,clse-min18 cm18
21:23:24  20  -- clse relation to moving-avg
21:23:24  21  ,clse-avg4  ca4
21:23:24  22  ,clse-avg6  ca6
21:23:24  23  ,clse-avg8  ca8
21:23:24  24  ,clse-avg10 ca10
21:23:24  25  ,clse-avg12 ca12
21:23:24  26  ,clse-avg14 ca14
21:23:24  27  ,clse-avg16 ca16
21:23:24  28  ,clse-avg18 ca18
21:23:24  29  -- clse relation to moving-max
21:23:24  30  ,clse-max4  cx4
21:23:24  31  ,clse-max6  cx6
21:23:24  32  ,clse-max8  cx8
21:23:24  33  ,clse-max10 cx10
21:23:24  34  ,clse-max12 cx12
21:23:24  35  ,clse-max14 cx14
21:23:24  36  ,clse-max16 cx16
21:23:24  37  ,clse-max18 cx18
21:23:24  38  -- Derive more attributes.
21:23:24  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:23:24  40  -- But COVAR_POP is more stable:
21:23:24  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:23:24  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:23:24  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:23:24  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:23:24  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:23:24  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:23:24  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:23:24  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:23:24  49  -- Derive date related attributes:
21:23:24  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:23:24  51  ,0+TO_CHAR(ydate,'D')d
21:23:24  52  ,0+TO_CHAR(ydate,'W')w
21:23:24  53  -- mpm stands for minutes-past-midnight:
21:23:24  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:23:24  55  -- mph stands for minutes-past-hour:
21:23:24  56  ,0+TO_CHAR(ydate,'MI')mph
21:23:24  57  FROM v10
21:23:24  58  ORDER BY ydate
21:23:24  59  /

View created.

Elapsed: 00:00:00.06
21:23:24 SQL> 
21:23:24 SQL> -- rpt
21:23:24 SQL> 
21:23:24 SQL> SELECT
21:23:24   2  pair
21:23:24   3  ,COUNT(pair)
21:23:24   4  ,MIN(clse),MAX(clse)
21:23:24   5  ,MIN(ydate),MAX(ydate)
21:23:24   6  FROM v12
21:23:24   7  GROUP BY pair
21:23:24   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       20741   1.535825	   1.6295 2010-09-15 21:25:01 2010-12-24 21:15:00

Elapsed: 00:00:01.61
21:23:26 SQL> 
21:23:26 SQL> -- Prepare for derivation of NTILE based params:
21:23:26 SQL> 
21:23:26 SQL> CREATE OR REPLACE VIEW v14 AS
21:23:26   2  SELECT
21:23:26   3  pair
21:23:26   4  ,ydate
21:23:26   5  ,prdate
21:23:26   6  ,clse
21:23:26   7  ,g6
21:23:26   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:23:26   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:23:26  10  ,CASE WHEN trend IS NULL THEN 1
21:23:26  11  	    WHEN trend =0      THEN 1
21:23:26  12  	    ELSE trend END trend
21:23:26  13  ,cm4
21:23:26  14  ,cm6
21:23:26  15  ,cm8
21:23:26  16  ,cm10
21:23:26  17  ,cm12
21:23:26  18  ,cm14
21:23:26  19  ,cm16
21:23:26  20  ,cm18
21:23:26  21  --
21:23:26  22  ,ca4
21:23:26  23  ,ca6
21:23:26  24  ,ca8
21:23:26  25  ,ca10
21:23:26  26  ,ca12
21:23:26  27  ,ca14
21:23:26  28  ,ca16
21:23:26  29  ,ca18
21:23:26  30  --
21:23:26  31  ,cx4
21:23:26  32  ,cx6
21:23:26  33  ,cx8
21:23:26  34  ,cx10
21:23:26  35  ,cx12
21:23:26  36  ,cx14
21:23:26  37  ,cx16
21:23:26  38  ,cx18
21:23:26  39  --
21:23:26  40  ,crr4
21:23:26  41  ,crr6
21:23:26  42  ,crr8
21:23:26  43  ,crr10
21:23:26  44  ,crr12
21:23:26  45  ,crr14
21:23:26  46  ,crr16
21:23:26  47  ,crr18
21:23:26  48  --
21:23:26  49  ,hh
21:23:26  50  ,d
21:23:26  51  ,w
21:23:26  52  ,mpm
21:23:26  53  ,mph
21:23:26  54  FROM v12
21:23:26  55  ORDER BY ydate
21:23:26  56  /

View created.

Elapsed: 00:00:00.05
21:23:26 SQL> 
21:23:26 SQL> -- rpt
21:23:26 SQL> 
21:23:26 SQL> SELECT
21:23:26   2  pair
21:23:26   3  ,trend
21:23:26   4  ,gatt
21:23:26   5  ,COUNT(pair)
21:23:26   6  ,AVG(g6)
21:23:26   7  FROM v14
21:23:26   8  GROUP BY pair,trend,gatt
21:23:26   9  ORDER BY pair,trend,gatt
21:23:26  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6597 -.00249704
gbp_usd 	-1 up	      3731 .004304556
gbp_usd 	-1		30
gbp_usd 	 1 nup	      6599 -.00262112
gbp_usd 	 1 up	      3742 .004375975
gbp_usd 	 1		42

6 rows selected.

Elapsed: 00:00:01.57
21:23:27 SQL> 
21:23:27 SQL> 
21:23:27 SQL> -- Prepare for derivation of NTILE based params:
21:23:27 SQL> 
21:23:27 SQL> CREATE OR REPLACE VIEW v16 AS
21:23:27   2  SELECT
21:23:27   3  pair
21:23:27   4  ,ydate
21:23:27   5  ,prdate
21:23:27   6  ,clse
21:23:27   7  ,g6
21:23:27   8  ,gatt
21:23:27   9  ,gattn
21:23:27  10  ,trend
21:23:27  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:23:27  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:23:27  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:23:27  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:23:27  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:23:27  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:23:27  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:23:27  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:23:27  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:23:27  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:23:27  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:23:27  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:23:27  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:23:27  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:23:27  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:23:27  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:23:27  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:23:27  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:23:27  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:23:27  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:23:27  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:23:27  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:23:27  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:23:27  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:23:27  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:23:27  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:23:27  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:23:27  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:23:27  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:23:27  40  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:23:27  41  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:23:27  42  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:23:27  43  ,hh  att32
21:23:27  44  ,d   att33
21:23:27  45  ,w   att34
21:23:27  46  ,mpm att35
21:23:27  47  ,mph att36
21:23:27  48  ,trend att37
21:23:27  49  FROM v14
21:23:27  50  ORDER BY ydate
21:23:27  51  /

View created.

Elapsed: 00:00:00.04
21:23:27 SQL> 
21:23:27 SQL> -- rpt
21:23:27 SQL> 
21:23:27 SQL> SELECT
21:23:27   2  pair
21:23:27   3  ,trend
21:23:27   4  ,gatt
21:23:27   5  ,COUNT(pair)
21:23:27   6  ,AVG(g6)
21:23:27   7  FROM v16
21:23:27   8  GROUP BY pair,trend,gatt
21:23:27   9  ORDER BY pair,trend,gatt
21:23:27  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6597 -.00249704
gbp_usd 	-1 up	      3731 .004304556
gbp_usd 	-1		30
gbp_usd 	 1 nup	      6599 -.00262112
gbp_usd 	 1 up	      3742 .004375975
gbp_usd 	 1		42

6 rows selected.

Elapsed: 00:00:06.59
21:23:34 SQL> 
21:23:34 SQL> --
21:23:34 SQL> -- jpy10.sql
21:23:34 SQL> --
21:23:34 SQL> 
21:23:34 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:23:34 SQL> 
21:23:34 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.04
21:23:34 SQL> 
21:23:34 SQL> -- I created di5min here:
21:23:34 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:23:34 SQL> 
21:23:34 SQL> CREATE OR REPLACE VIEW v10 AS
21:23:34   2  SELECT
21:23:34   3  pair
21:23:34   4  ,ydate
21:23:34   5  ,prdate
21:23:34   6  ,rownum rnum -- acts as t in my time-series
21:23:34   7  ,clse
21:23:34   8  -- Derive a bunch of attributes from clse, the latest price:
21:23:34   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:23:34  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:23:34  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:23:34  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:23:34  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:23:34  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:23:34  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:23:34  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:23:34  17  --
21:23:34  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:23:34  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:23:34  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:23:34  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:23:34  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:23:34  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:23:34  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:23:34  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:23:34  26  --
21:23:34  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:23:34  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:23:34  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:23:34  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:23:34  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:23:34  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:23:34  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:23:34  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:23:34  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:23:34  36  FROM di5min WHERE pair LIKE'%jpy%'
21:23:34  37  ORDER BY ydate
21:23:34  38  /

View created.

Elapsed: 00:00:00.05
21:23:34 SQL> 
21:23:34 SQL> -- rpt
21:23:34 SQL> 
21:23:34 SQL> SELECT
21:23:34   2  pair
21:23:34   3  ,COUNT(pair)
21:23:34   4  ,MIN(clse),MAX(clse)
21:23:34   5  ,MIN(avg6),MAX(avg6)
21:23:34   6  ,MIN(ydate),MAX(ydate)
21:23:34   7  FROM v10
21:23:34   8  GROUP BY pair
21:23:34   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       20740	 80.25	    85.89 80.3595205 85.8020548 2010-09-15 21:25:01 2010-12-24 21:15:00

Elapsed: 00:00:00.92
21:23:35 SQL> 
21:23:35 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:23:35 SQL> 
21:23:35 SQL> CREATE OR REPLACE VIEW v12 AS
21:23:35   2  SELECT
21:23:35   3  pair
21:23:35   4  ,ydate
21:23:35   5  ,prdate
21:23:35   6  ,clse
21:23:35   7  -- g6 is important. I want to predict g6:
21:23:35   8  ,ld6 - clse g6
21:23:35   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:23:35  10  -- I want more attributes from the ones I derived above:
21:23:35  11  -- clse relation to moving-min
21:23:35  12  ,clse-min4  cm4
21:23:35  13  ,clse-min6  cm6
21:23:35  14  ,clse-min8  cm8
21:23:35  15  ,clse-min10 cm10
21:23:35  16  ,clse-min12 cm12
21:23:35  17  ,clse-min14 cm14
21:23:35  18  ,clse-min16 cm16
21:23:35  19  ,clse-min18 cm18
21:23:35  20  -- clse relation to moving-avg
21:23:35  21  ,clse-avg4  ca4
21:23:35  22  ,clse-avg6  ca6
21:23:35  23  ,clse-avg8  ca8
21:23:35  24  ,clse-avg10 ca10
21:23:35  25  ,clse-avg12 ca12
21:23:35  26  ,clse-avg14 ca14
21:23:35  27  ,clse-avg16 ca16
21:23:35  28  ,clse-avg18 ca18
21:23:35  29  -- clse relation to moving-max
21:23:35  30  ,clse-max4  cx4
21:23:35  31  ,clse-max6  cx6
21:23:35  32  ,clse-max8  cx8
21:23:35  33  ,clse-max10 cx10
21:23:35  34  ,clse-max12 cx12
21:23:35  35  ,clse-max14 cx14
21:23:35  36  ,clse-max16 cx16
21:23:35  37  ,clse-max18 cx18
21:23:35  38  -- Derive more attributes.
21:23:35  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:23:35  40  -- But COVAR_POP is more stable:
21:23:35  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:23:35  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:23:35  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:23:35  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:23:35  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:23:35  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:23:35  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:23:35  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:23:35  49  -- Derive date related attributes:
21:23:35  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:23:35  51  ,0+TO_CHAR(ydate,'D')d
21:23:35  52  ,0+TO_CHAR(ydate,'W')w
21:23:35  53  -- mpm stands for minutes-past-midnight:
21:23:35  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:23:35  55  -- mph stands for minutes-past-hour:
21:23:35  56  ,0+TO_CHAR(ydate,'MI')mph
21:23:35  57  FROM v10
21:23:35  58  ORDER BY ydate
21:23:35  59  /

View created.

Elapsed: 00:00:00.04
21:23:35 SQL> 
21:23:35 SQL> -- rpt
21:23:35 SQL> 
21:23:35 SQL> SELECT
21:23:35   2  pair
21:23:35   3  ,COUNT(pair)
21:23:35   4  ,MIN(clse),MAX(clse)
21:23:35   5  ,MIN(ydate),MAX(ydate)
21:23:35   6  FROM v12
21:23:35   7  GROUP BY pair
21:23:35   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       20740	 80.25	    85.89 2010-09-15 21:25:01 2010-12-24 21:15:00

Elapsed: 00:00:01.65
21:23:37 SQL> 
21:23:37 SQL> -- Prepare for derivation of NTILE based params:
21:23:37 SQL> 
21:23:37 SQL> CREATE OR REPLACE VIEW v14 AS
21:23:37   2  SELECT
21:23:37   3  pair
21:23:37   4  ,ydate
21:23:37   5  ,prdate
21:23:37   6  ,clse
21:23:37   7  ,g6
21:23:37   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:23:37   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:23:37  10  ,CASE WHEN trend IS NULL THEN 1
21:23:37  11  	    WHEN trend =0      THEN 1
21:23:37  12  	    ELSE trend END trend
21:23:37  13  ,cm4
21:23:37  14  ,cm6
21:23:37  15  ,cm8
21:23:37  16  ,cm10
21:23:37  17  ,cm12
21:23:37  18  ,cm14
21:23:37  19  ,cm16
21:23:37  20  ,cm18
21:23:37  21  --
21:23:37  22  ,ca4
21:23:37  23  ,ca6
21:23:37  24  ,ca8
21:23:37  25  ,ca10
21:23:37  26  ,ca12
21:23:37  27  ,ca14
21:23:37  28  ,ca16
21:23:37  29  ,ca18
21:23:37  30  --
21:23:37  31  ,cx4
21:23:37  32  ,cx6
21:23:37  33  ,cx8
21:23:37  34  ,cx10
21:23:37  35  ,cx12
21:23:37  36  ,cx14
21:23:37  37  ,cx16
21:23:37  38  ,cx18
21:23:37  39  --
21:23:37  40  ,crr4
21:23:37  41  ,crr6
21:23:37  42  ,crr8
21:23:37  43  ,crr10
21:23:37  44  ,crr12
21:23:37  45  ,crr14
21:23:37  46  ,crr16
21:23:37  47  ,crr18
21:23:37  48  --
21:23:37  49  ,hh
21:23:37  50  ,d
21:23:37  51  ,w
21:23:37  52  ,mpm
21:23:37  53  ,mph
21:23:37  54  FROM v12
21:23:37  55  ORDER BY ydate
21:23:37  56  /

View created.

Elapsed: 00:00:00.04
21:23:37 SQL> 
21:23:37 SQL> -- rpt
21:23:37 SQL> 
21:23:37 SQL> SELECT
21:23:37   2  pair
21:23:37   3  ,trend
21:23:37   4  ,gatt
21:23:37   5  ,COUNT(pair)
21:23:37   6  ,AVG(g6)
21:23:37   7  FROM v14
21:23:37   8  GROUP BY pair,trend,gatt
21:23:37   9  ORDER BY pair,trend,gatt
21:23:37  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5661 -.15683304
usd_jpy 	-1 up	      5199 .158911925
usd_jpy 	-1		65
usd_jpy 	 1 nup	      5400 -.15630191
usd_jpy 	 1 up	      4408 .162386074
usd_jpy 	 1		 7

6 rows selected.

Elapsed: 00:00:01.61
21:23:38 SQL> 
21:23:38 SQL> 
21:23:38 SQL> -- Prepare for derivation of NTILE based params:
21:23:38 SQL> 
21:23:38 SQL> CREATE OR REPLACE VIEW v16 AS
21:23:38   2  SELECT
21:23:38   3  pair
21:23:38   4  ,ydate
21:23:38   5  ,prdate
21:23:38   6  ,clse
21:23:38   7  ,g6
21:23:38   8  ,gatt
21:23:38   9  ,gattn
21:23:38  10  ,trend
21:23:38  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:23:38  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:23:38  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:23:38  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:23:38  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:23:38  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:23:38  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:23:38  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:23:38  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:23:38  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:23:38  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:23:38  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:23:38  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:23:38  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:23:38  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:23:38  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:23:38  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:23:38  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:23:38  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:23:38  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:23:38  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:23:38  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:23:38  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:23:38  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:23:38  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:23:38  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:23:38  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:23:38  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:23:38  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:23:38  40  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:23:38  41  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:23:38  42  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:23:38  43  ,hh  att32
21:23:38  44  ,d   att33
21:23:38  45  ,w   att34
21:23:38  46  ,mpm att35
21:23:38  47  ,mph att36
21:23:38  48  ,trend att37
21:23:38  49  FROM v14
21:23:38  50  ORDER BY ydate
21:23:38  51  /

View created.

Elapsed: 00:00:00.04
21:23:38 SQL> 
21:23:38 SQL> -- rpt
21:23:38 SQL> 
21:23:38 SQL> SELECT
21:23:38   2  pair
21:23:38   3  ,trend
21:23:38   4  ,gatt
21:23:38   5  ,COUNT(pair)
21:23:38   6  ,AVG(g6)
21:23:38   7  FROM v16
21:23:38   8  GROUP BY pair,trend,gatt
21:23:38   9  ORDER BY pair,trend,gatt
21:23:38  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5661 -.15683304
usd_jpy 	-1 up	      5199 .158911925
usd_jpy 	-1		65
usd_jpy 	 1 nup	      5400 -.15630191
usd_jpy 	 1 up	      4408 .162386074
usd_jpy 	 1		 7

6 rows selected.

Elapsed: 00:00:06.76
21:23:45 SQL> 
21:23:45 SQL> --
21:23:45 SQL> -- cad10.sql
21:23:45 SQL> --
21:23:45 SQL> 
21:23:45 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:23:45 SQL> 
21:23:45 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.02
21:23:45 SQL> 
21:23:45 SQL> -- I created di5min here:
21:23:45 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:23:45 SQL> 
21:23:45 SQL> CREATE OR REPLACE VIEW v10 AS
21:23:45   2  SELECT
21:23:45   3  pair
21:23:45   4  ,ydate
21:23:45   5  ,prdate
21:23:45   6  ,rownum rnum -- acts as t in my time-series
21:23:45   7  ,clse
21:23:45   8  -- Derive a bunch of attributes from clse, the latest price:
21:23:45   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:23:45  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:23:45  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:23:45  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:23:45  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:23:45  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:23:45  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:23:45  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:23:45  17  --
21:23:45  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:23:45  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:23:45  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:23:45  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:23:45  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:23:45  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:23:45  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:23:45  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:23:45  26  --
21:23:45  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:23:45  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:23:45  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:23:45  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:23:45  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:23:45  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:23:45  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:23:45  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:23:45  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:23:45  36  FROM di5min WHERE pair LIKE'%cad%'
21:23:45  37  ORDER BY ydate
21:23:45  38  /

View created.

Elapsed: 00:00:00.05
21:23:45 SQL> 
21:23:45 SQL> -- rpt
21:23:45 SQL> 
21:23:45 SQL> SELECT
21:23:45   2  pair
21:23:45   3  ,COUNT(pair)
21:23:45   4  ,MIN(clse),MAX(clse)
21:23:45   5  ,MIN(avg6),MAX(avg6)
21:23:45   6  ,MIN(ydate),MAX(ydate)
21:23:45   7  FROM v10
21:23:45   8  GROUP BY pair
21:23:45   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       20738	 .9981	   1.0371 .999404795 1.03438904 2010-09-15 21:25:01 2010-12-24 21:15:00

Elapsed: 00:00:00.90
21:23:46 SQL> 
21:23:46 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:23:46 SQL> 
21:23:46 SQL> CREATE OR REPLACE VIEW v12 AS
21:23:46   2  SELECT
21:23:46   3  pair
21:23:46   4  ,ydate
21:23:46   5  ,prdate
21:23:46   6  ,clse
21:23:46   7  -- g6 is important. I want to predict g6:
21:23:46   8  ,ld6 - clse g6
21:23:46   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:23:46  10  -- I want more attributes from the ones I derived above:
21:23:46  11  -- clse relation to moving-min
21:23:46  12  ,clse-min4  cm4
21:23:46  13  ,clse-min6  cm6
21:23:46  14  ,clse-min8  cm8
21:23:46  15  ,clse-min10 cm10
21:23:46  16  ,clse-min12 cm12
21:23:46  17  ,clse-min14 cm14
21:23:46  18  ,clse-min16 cm16
21:23:46  19  ,clse-min18 cm18
21:23:46  20  -- clse relation to moving-avg
21:23:46  21  ,clse-avg4  ca4
21:23:46  22  ,clse-avg6  ca6
21:23:46  23  ,clse-avg8  ca8
21:23:46  24  ,clse-avg10 ca10
21:23:46  25  ,clse-avg12 ca12
21:23:46  26  ,clse-avg14 ca14
21:23:46  27  ,clse-avg16 ca16
21:23:46  28  ,clse-avg18 ca18
21:23:46  29  -- clse relation to moving-max
21:23:46  30  ,clse-max4  cx4
21:23:46  31  ,clse-max6  cx6
21:23:46  32  ,clse-max8  cx8
21:23:46  33  ,clse-max10 cx10
21:23:46  34  ,clse-max12 cx12
21:23:46  35  ,clse-max14 cx14
21:23:46  36  ,clse-max16 cx16
21:23:46  37  ,clse-max18 cx18
21:23:46  38  -- Derive more attributes.
21:23:46  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:23:46  40  -- But COVAR_POP is more stable:
21:23:46  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:23:46  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:23:46  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:23:46  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:23:46  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:23:46  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:23:46  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:23:46  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:23:46  49  -- Derive date related attributes:
21:23:46  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:23:46  51  ,0+TO_CHAR(ydate,'D')d
21:23:46  52  ,0+TO_CHAR(ydate,'W')w
21:23:46  53  -- mpm stands for minutes-past-midnight:
21:23:46  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:23:46  55  -- mph stands for minutes-past-hour:
21:23:46  56  ,0+TO_CHAR(ydate,'MI')mph
21:23:46  57  FROM v10
21:23:46  58  ORDER BY ydate
21:23:46  59  /

View created.

Elapsed: 00:00:00.06
21:23:46 SQL> 
21:23:46 SQL> -- rpt
21:23:46 SQL> 
21:23:46 SQL> SELECT
21:23:46   2  pair
21:23:46   3  ,COUNT(pair)
21:23:46   4  ,MIN(clse),MAX(clse)
21:23:46   5  ,MIN(ydate),MAX(ydate)
21:23:46   6  FROM v12
21:23:46   7  GROUP BY pair
21:23:46   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       20738	 .9981	   1.0371 2010-09-15 21:25:01 2010-12-24 21:15:00

Elapsed: 00:00:01.56
21:23:48 SQL> 
21:23:48 SQL> -- Prepare for derivation of NTILE based params:
21:23:48 SQL> 
21:23:48 SQL> CREATE OR REPLACE VIEW v14 AS
21:23:48   2  SELECT
21:23:48   3  pair
21:23:48   4  ,ydate
21:23:48   5  ,prdate
21:23:48   6  ,clse
21:23:48   7  ,g6
21:23:48   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:23:48   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:23:48  10  ,CASE WHEN trend IS NULL THEN 1
21:23:48  11  	    WHEN trend =0      THEN 1
21:23:48  12  	    ELSE trend END trend
21:23:48  13  ,cm4
21:23:48  14  ,cm6
21:23:48  15  ,cm8
21:23:48  16  ,cm10
21:23:48  17  ,cm12
21:23:48  18  ,cm14
21:23:48  19  ,cm16
21:23:48  20  ,cm18
21:23:48  21  --
21:23:48  22  ,ca4
21:23:48  23  ,ca6
21:23:48  24  ,ca8
21:23:48  25  ,ca10
21:23:48  26  ,ca12
21:23:48  27  ,ca14
21:23:48  28  ,ca16
21:23:48  29  ,ca18
21:23:48  30  --
21:23:48  31  ,cx4
21:23:48  32  ,cx6
21:23:48  33  ,cx8
21:23:48  34  ,cx10
21:23:48  35  ,cx12
21:23:48  36  ,cx14
21:23:48  37  ,cx16
21:23:48  38  ,cx18
21:23:48  39  --
21:23:48  40  ,crr4
21:23:48  41  ,crr6
21:23:48  42  ,crr8
21:23:48  43  ,crr10
21:23:48  44  ,crr12
21:23:48  45  ,crr14
21:23:48  46  ,crr16
21:23:48  47  ,crr18
21:23:48  48  --
21:23:48  49  ,hh
21:23:48  50  ,d
21:23:48  51  ,w
21:23:48  52  ,mpm
21:23:48  53  ,mph
21:23:48  54  FROM v12
21:23:48  55  ORDER BY ydate
21:23:48  56  /

View created.

Elapsed: 00:00:00.05
21:23:48 SQL> 
21:23:48 SQL> -- rpt
21:23:48 SQL> 
21:23:48 SQL> SELECT
21:23:48   2  pair
21:23:48   3  ,trend
21:23:48   4  ,gatt
21:23:48   5  ,COUNT(pair)
21:23:48   6  ,AVG(g6)
21:23:48   7  FROM v14
21:23:48   8  GROUP BY pair,trend,gatt
21:23:48   9  ORDER BY pair,trend,gatt
21:23:48  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7676 -.00136165
usd_cad 	-1 up	      3367   .0033307
usd_cad 	-1		34
usd_cad 	 1 nup	      7023  -.0016327
usd_cad 	 1 up	      2600 .003583152
usd_cad 	 1		38

6 rows selected.

Elapsed: 00:00:01.57
21:23:49 SQL> 
21:23:49 SQL> 
21:23:49 SQL> -- Prepare for derivation of NTILE based params:
21:23:49 SQL> 
21:23:49 SQL> CREATE OR REPLACE VIEW v16 AS
21:23:49   2  SELECT
21:23:49   3  pair
21:23:49   4  ,ydate
21:23:49   5  ,prdate
21:23:49   6  ,clse
21:23:49   7  ,g6
21:23:49   8  ,gatt
21:23:49   9  ,gattn
21:23:49  10  ,trend
21:23:49  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:23:49  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:23:49  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:23:49  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:23:49  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:23:49  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:23:49  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:23:49  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:23:49  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:23:49  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:23:49  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:23:49  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:23:49  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:23:49  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:23:49  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:23:49  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:23:49  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:23:49  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:23:49  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:23:49  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:23:49  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:23:49  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:23:49  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:23:49  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:23:49  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:23:49  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:23:49  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:23:49  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:23:49  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:23:49  40  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:23:49  41  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:23:49  42  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:23:49  43  ,hh  att32
21:23:49  44  ,d   att33
21:23:49  45  ,w   att34
21:23:49  46  ,mpm att35
21:23:49  47  ,mph att36
21:23:49  48  ,trend att37
21:23:49  49  FROM v14
21:23:49  50  ORDER BY ydate
21:23:49  51  /

View created.

Elapsed: 00:00:00.06
21:23:49 SQL> 
21:23:49 SQL> -- rpt
21:23:49 SQL> 
21:23:49 SQL> SELECT
21:23:49   2  pair
21:23:49   3  ,trend
21:23:49   4  ,gatt
21:23:49   5  ,COUNT(pair)
21:23:49   6  ,AVG(g6)
21:23:49   7  FROM v16
21:23:49   8  GROUP BY pair,trend,gatt
21:23:49   9  ORDER BY pair,trend,gatt
21:23:49  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7676 -.00136165
usd_cad 	-1 up	      3367   .0033307
usd_cad 	-1		34
usd_cad 	 1 nup	      7023  -.0016327
usd_cad 	 1 up	      2600 .003583152
usd_cad 	 1		38

6 rows selected.

Elapsed: 00:00:06.63
21:23:56 SQL> 
21:23:56 SQL> --
21:23:56 SQL> -- chf10.sql
21:23:56 SQL> --
21:23:56 SQL> 
21:23:56 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:23:56 SQL> 
21:23:56 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.01
21:23:56 SQL> 
21:23:56 SQL> -- I created di5min here:
21:23:56 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:23:56 SQL> 
21:23:56 SQL> CREATE OR REPLACE VIEW v10 AS
21:23:56   2  SELECT
21:23:56   3  pair
21:23:56   4  ,ydate
21:23:56   5  ,prdate
21:23:56   6  ,rownum rnum -- acts as t in my time-series
21:23:56   7  ,clse
21:23:56   8  -- Derive a bunch of attributes from clse, the latest price:
21:23:56   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:23:56  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:23:56  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:23:56  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:23:56  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:23:56  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:23:56  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:23:56  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:23:56  17  --
21:23:56  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:23:56  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:23:56  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:23:56  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:23:56  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:23:56  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:23:56  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:23:56  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:23:56  26  --
21:23:56  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:23:56  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:23:56  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:23:56  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:23:56  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:23:56  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:23:56  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:23:56  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:23:56  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:23:56  36  FROM di5min WHERE pair LIKE'%chf%'
21:23:56  37  ORDER BY ydate
21:23:56  38  /

View created.

Elapsed: 00:00:00.06
21:23:56 SQL> 
21:23:56 SQL> -- rpt
21:23:56 SQL> 
21:23:56 SQL> SELECT
21:23:56   2  pair
21:23:56   3  ,COUNT(pair)
21:23:56   4  ,MIN(clse),MAX(clse)
21:23:56   5  ,MIN(avg6),MAX(avg6)
21:23:56   6  ,MIN(ydate),MAX(ydate)
21:23:56   7  FROM v10
21:23:56   8  GROUP BY pair
21:23:56   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       20741	 .9471	   1.0177 .950038356 1.01613699 2010-09-15 21:25:01 2010-12-24 21:15:00

Elapsed: 00:00:00.89
21:23:57 SQL> 
21:23:57 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:23:57 SQL> 
21:23:57 SQL> CREATE OR REPLACE VIEW v12 AS
21:23:57   2  SELECT
21:23:57   3  pair
21:23:57   4  ,ydate
21:23:57   5  ,prdate
21:23:57   6  ,clse
21:23:57   7  -- g6 is important. I want to predict g6:
21:23:57   8  ,ld6 - clse g6
21:23:57   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:23:57  10  -- I want more attributes from the ones I derived above:
21:23:57  11  -- clse relation to moving-min
21:23:57  12  ,clse-min4  cm4
21:23:57  13  ,clse-min6  cm6
21:23:57  14  ,clse-min8  cm8
21:23:57  15  ,clse-min10 cm10
21:23:57  16  ,clse-min12 cm12
21:23:57  17  ,clse-min14 cm14
21:23:57  18  ,clse-min16 cm16
21:23:57  19  ,clse-min18 cm18
21:23:57  20  -- clse relation to moving-avg
21:23:57  21  ,clse-avg4  ca4
21:23:57  22  ,clse-avg6  ca6
21:23:57  23  ,clse-avg8  ca8
21:23:57  24  ,clse-avg10 ca10
21:23:57  25  ,clse-avg12 ca12
21:23:57  26  ,clse-avg14 ca14
21:23:57  27  ,clse-avg16 ca16
21:23:57  28  ,clse-avg18 ca18
21:23:57  29  -- clse relation to moving-max
21:23:57  30  ,clse-max4  cx4
21:23:57  31  ,clse-max6  cx6
21:23:57  32  ,clse-max8  cx8
21:23:57  33  ,clse-max10 cx10
21:23:57  34  ,clse-max12 cx12
21:23:57  35  ,clse-max14 cx14
21:23:57  36  ,clse-max16 cx16
21:23:57  37  ,clse-max18 cx18
21:23:57  38  -- Derive more attributes.
21:23:57  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:23:57  40  -- But COVAR_POP is more stable:
21:23:57  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:23:57  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:23:57  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:23:57  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:23:57  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:23:57  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:23:57  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:23:57  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:23:57  49  -- Derive date related attributes:
21:23:57  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:23:57  51  ,0+TO_CHAR(ydate,'D')d
21:23:57  52  ,0+TO_CHAR(ydate,'W')w
21:23:57  53  -- mpm stands for minutes-past-midnight:
21:23:57  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:23:57  55  -- mph stands for minutes-past-hour:
21:23:57  56  ,0+TO_CHAR(ydate,'MI')mph
21:23:57  57  FROM v10
21:23:57  58  ORDER BY ydate
21:23:57  59  /

View created.

Elapsed: 00:00:00.04
21:23:57 SQL> 
21:23:57 SQL> -- rpt
21:23:57 SQL> 
21:23:57 SQL> SELECT
21:23:57   2  pair
21:23:57   3  ,COUNT(pair)
21:23:57   4  ,MIN(clse),MAX(clse)
21:23:57   5  ,MIN(ydate),MAX(ydate)
21:23:57   6  FROM v12
21:23:57   7  GROUP BY pair
21:23:57   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       20741	 .9471	   1.0177 2010-09-15 21:25:01 2010-12-24 21:15:00

Elapsed: 00:00:01.60
21:23:59 SQL> 
21:23:59 SQL> -- Prepare for derivation of NTILE based params:
21:23:59 SQL> 
21:23:59 SQL> CREATE OR REPLACE VIEW v14 AS
21:23:59   2  SELECT
21:23:59   3  pair
21:23:59   4  ,ydate
21:23:59   5  ,prdate
21:23:59   6  ,clse
21:23:59   7  ,g6
21:23:59   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:23:59   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:23:59  10  ,CASE WHEN trend IS NULL THEN 1
21:23:59  11  	    WHEN trend =0      THEN 1
21:23:59  12  	    ELSE trend END trend
21:23:59  13  ,cm4
21:23:59  14  ,cm6
21:23:59  15  ,cm8
21:23:59  16  ,cm10
21:23:59  17  ,cm12
21:23:59  18  ,cm14
21:23:59  19  ,cm16
21:23:59  20  ,cm18
21:23:59  21  --
21:23:59  22  ,ca4
21:23:59  23  ,ca6
21:23:59  24  ,ca8
21:23:59  25  ,ca10
21:23:59  26  ,ca12
21:23:59  27  ,ca14
21:23:59  28  ,ca16
21:23:59  29  ,ca18
21:23:59  30  --
21:23:59  31  ,cx4
21:23:59  32  ,cx6
21:23:59  33  ,cx8
21:23:59  34  ,cx10
21:23:59  35  ,cx12
21:23:59  36  ,cx14
21:23:59  37  ,cx16
21:23:59  38  ,cx18
21:23:59  39  --
21:23:59  40  ,crr4
21:23:59  41  ,crr6
21:23:59  42  ,crr8
21:23:59  43  ,crr10
21:23:59  44  ,crr12
21:23:59  45  ,crr14
21:23:59  46  ,crr16
21:23:59  47  ,crr18
21:23:59  48  --
21:23:59  49  ,hh
21:23:59  50  ,d
21:23:59  51  ,w
21:23:59  52  ,mpm
21:23:59  53  ,mph
21:23:59  54  FROM v12
21:23:59  55  ORDER BY ydate
21:23:59  56  /

View created.

Elapsed: 00:00:00.04
21:23:59 SQL> 
21:23:59 SQL> -- rpt
21:23:59 SQL> 
21:23:59 SQL> SELECT
21:23:59   2  pair
21:23:59   3  ,trend
21:23:59   4  ,gatt
21:23:59   5  ,COUNT(pair)
21:23:59   6  ,AVG(g6)
21:23:59   7  FROM v14
21:23:59   8  GROUP BY pair,trend,gatt
21:23:59   9  ORDER BY pair,trend,gatt
21:23:59  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7538 -.00182252
usd_chf 	-1 up	      3335 .003944738
usd_chf 	-1		20
usd_chf 	 1 nup	      7114 -.00171809
usd_chf 	 1 up	      2682 .003710062
usd_chf 	 1		52

6 rows selected.

Elapsed: 00:00:01.57
21:24:00 SQL> 
21:24:00 SQL> 
21:24:00 SQL> -- Prepare for derivation of NTILE based params:
21:24:00 SQL> 
21:24:00 SQL> CREATE OR REPLACE VIEW v16 AS
21:24:00   2  SELECT
21:24:00   3  pair
21:24:00   4  ,ydate
21:24:00   5  ,prdate
21:24:00   6  ,clse
21:24:00   7  ,g6
21:24:00   8  ,gatt
21:24:00   9  ,gattn
21:24:00  10  ,trend
21:24:00  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:24:00  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:24:00  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:24:00  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:24:00  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:24:00  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:24:00  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:24:00  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:24:00  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:24:00  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:24:00  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:24:00  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:24:00  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:24:00  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:24:00  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:24:00  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:24:00  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:24:00  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:24:00  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:24:00  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:24:00  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:24:00  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:24:00  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:24:00  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:24:00  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:24:00  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:24:00  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:24:00  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:24:00  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:24:00  40  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:24:00  41  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:24:00  42  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:24:00  43  ,hh  att32
21:24:00  44  ,d   att33
21:24:00  45  ,w   att34
21:24:00  46  ,mpm att35
21:24:00  47  ,mph att36
21:24:00  48  ,trend att37
21:24:00  49  FROM v14
21:24:00  50  ORDER BY ydate
21:24:00  51  /

View created.

Elapsed: 00:00:00.05
21:24:00 SQL> 
21:24:00 SQL> -- rpt
21:24:00 SQL> 
21:24:00 SQL> SELECT
21:24:00   2  pair
21:24:00   3  ,trend
21:24:00   4  ,gatt
21:24:00   5  ,COUNT(pair)
21:24:00   6  ,AVG(g6)
21:24:00   7  FROM v16
21:24:00   8  GROUP BY pair,trend,gatt
21:24:00   9  ORDER BY pair,trend,gatt
21:24:00  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7538 -.00182252
usd_chf 	-1 up	      3335 .003944738
usd_chf 	-1		20
usd_chf 	 1 nup	      7114 -.00171809
usd_chf 	 1 up	      2682 .003710062
usd_chf 	 1		52

6 rows selected.

Elapsed: 00:00:06.63
21:24:07 SQL> 
21:24:07 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
