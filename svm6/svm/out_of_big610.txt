
SQL*Plus: Release 11.2.0.1.0 Production on Sun Dec 26 09:09:53 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

09:09:54 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
09:09:54 SQL> 09:09:54 SQL> --
09:09:54 SQL> -- eur610.sql
09:09:54 SQL> --
09:09:54 SQL> 
09:09:54 SQL> -- Creates views and tables for backtesting a forex SVM strategy
09:09:54 SQL> 
09:09:54 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.12
09:09:54 SQL> 
09:09:54 SQL> -- I created di5min here:
09:09:54 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
09:09:54 SQL> 
09:09:54 SQL> CREATE OR REPLACE VIEW svm6102 AS
09:09:54   2  SELECT
09:09:54   3  pair
09:09:54   4  ,ydate
09:09:54   5  ,prdate
09:09:54   6  ,rownum rnum -- acts as t in my time-series
09:09:54   7  ,clse
09:09:54   8  -- Derive a bunch of attributes from clse, the latest price:
09:09:54   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
09:09:54  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
09:09:54  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
09:09:54  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
09:09:54  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
09:09:54  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
09:09:54  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
09:09:54  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
09:09:54  17  --
09:09:54  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
09:09:54  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
09:09:54  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
09:09:54  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
09:09:54  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
09:09:54  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
09:09:54  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
09:09:54  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
09:09:54  26  --
09:09:54  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
09:09:54  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
09:09:54  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
09:09:54  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
09:09:54  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
09:09:54  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
09:09:54  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
09:09:54  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
09:09:54  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
09:09:54  36  FROM di5min WHERE pair LIKE'%eur%'
09:09:54  37  ORDER BY ydate
09:09:54  38  /

View created.

Elapsed: 00:00:00.05
09:09:54 SQL> 
09:09:54 SQL> -- rpt
09:09:54 SQL> 
09:09:54 SQL> SELECT
09:09:54   2  pair
09:09:54   3  ,COUNT(pair)
09:09:54   4  ,MIN(clse),MAX(clse)
09:09:54   5  ,MIN(avg6),MAX(avg6)
09:09:54   6  ,MIN(ydate),MAX(ydate)
09:09:54   7  FROM svm6102
09:09:54   8  GROUP BY pair
09:09:54   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       20738    1.29735	   1.4273 1.29875103 1.42436233 2010-09-15 22:25:01 2010-12-24 21:55:00

Elapsed: 00:00:00.92
09:09:55 SQL> 
09:09:55 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
09:09:55 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.14
09:09:55 SQL> CREATE TABLE svm6122 COMPRESS AS
09:09:55   2  SELECT
09:09:55   3  pair
09:09:55   4  ,ydate
09:09:55   5  ,prdate
09:09:55   6  ,clse
09:09:55   7  -- g6 is important. I want to predict g6:
09:09:55   8  ,ld6 - clse g6
09:09:55   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
09:09:55  10  -- I want more attributes from the ones I derived above:
09:09:55  11  -- clse relation to moving-min
09:09:55  12  ,clse-min4  cm4
09:09:55  13  ,clse-min6  cm6
09:09:55  14  ,clse-min8  cm8
09:09:55  15  ,clse-min10 cm10
09:09:55  16  ,clse-min12 cm12
09:09:55  17  ,clse-min14 cm14
09:09:55  18  ,clse-min16 cm16
09:09:55  19  ,clse-min18 cm18
09:09:55  20  -- clse relation to moving-avg
09:09:55  21  ,clse-avg4  ca4
09:09:55  22  ,clse-avg6  ca6
09:09:55  23  ,clse-avg8  ca8
09:09:55  24  ,clse-avg10 ca10
09:09:55  25  ,clse-avg12 ca12
09:09:55  26  ,clse-avg14 ca14
09:09:55  27  ,clse-avg16 ca16
09:09:55  28  ,clse-avg18 ca18
09:09:55  29  -- clse relation to moving-max
09:09:55  30  ,clse-max4  cx4
09:09:55  31  ,clse-max6  cx6
09:09:55  32  ,clse-max8  cx8
09:09:55  33  ,clse-max10 cx10
09:09:55  34  ,clse-max12 cx12
09:09:55  35  ,clse-max14 cx14
09:09:55  36  ,clse-max16 cx16
09:09:55  37  ,clse-max18 cx18
09:09:55  38  -- Derive more attributes.
09:09:55  39  -- I want to use CORR() here to help SVM see the shape of the series.
09:09:55  40  -- But COVAR_POP is more stable:
09:09:55  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
09:09:55  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
09:09:55  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
09:09:55  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
09:09:55  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
09:09:55  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
09:09:55  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
09:09:55  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
09:09:55  49  -- Derive date related attributes:
09:09:55  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
09:09:55  51  ,0+TO_CHAR(ydate,'D')d
09:09:55  52  ,0+TO_CHAR(ydate,'W')w
09:09:55  53  -- mpm stands for minutes-past-midnight:
09:09:55  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
09:09:55  55  -- mph stands for minutes-past-hour:
09:09:55  56  ,0+TO_CHAR(ydate,'MI')mph
09:09:55  57  FROM svm6102
09:09:55  58  ORDER BY ydate
09:09:55  59  /

Table created.

Elapsed: 00:00:02.51
09:09:57 SQL> 
09:09:57 SQL> -- rpt
09:09:57 SQL> 
09:09:57 SQL> SELECT
09:09:57   2  pair
09:09:57   3  ,COUNT(pair)
09:09:57   4  ,MIN(clse),MAX(clse)
09:09:57   5  ,MIN(ydate),MAX(ydate)
09:09:57   6  FROM svm6122
09:09:57   7  GROUP BY pair
09:09:57   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       20738    1.29735	   1.4273 2010-09-15 22:25:01 2010-12-24 21:55:00

Elapsed: 00:00:00.03
09:09:57 SQL> 
09:09:57 SQL> -- Prepare for derivation of NTILE based params:
09:09:57 SQL> 
09:09:57 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.04
09:09:57 SQL> CREATE TABLE svm6142 COMPRESS AS
09:09:57   2  SELECT
09:09:57   3  pair
09:09:57   4  ,ydate
09:09:57   5  ,prdate
09:09:57   6  ,clse
09:09:57   7  ,g6
09:09:57   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
09:09:57   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
09:09:57  10  ,CASE WHEN trend IS NULL THEN 1
09:09:57  11  	    WHEN trend =0      THEN 1
09:09:57  12  	    ELSE trend END trend
09:09:57  13  ,cm4
09:09:57  14  ,cm6
09:09:57  15  ,cm8
09:09:57  16  ,cm10
09:09:57  17  ,cm12
09:09:57  18  ,cm14
09:09:57  19  ,cm16
09:09:57  20  ,cm18
09:09:57  21  --
09:09:57  22  ,ca4
09:09:57  23  ,ca6
09:09:57  24  ,ca8
09:09:57  25  ,ca10
09:09:57  26  ,ca12
09:09:57  27  ,ca14
09:09:57  28  ,ca16
09:09:57  29  ,ca18
09:09:57  30  --
09:09:57  31  ,cx4
09:09:57  32  ,cx6
09:09:57  33  ,cx8
09:09:57  34  ,cx10
09:09:57  35  ,cx12
09:09:57  36  ,cx14
09:09:57  37  ,cx16
09:09:57  38  ,cx18
09:09:57  39  --
09:09:57  40  ,crr4
09:09:57  41  ,crr6
09:09:57  42  ,crr8
09:09:57  43  ,crr10
09:09:57  44  ,crr12
09:09:57  45  ,crr14
09:09:57  46  ,crr16
09:09:57  47  ,crr18
09:09:57  48  --
09:09:57  49  ,hh
09:09:57  50  ,d
09:09:57  51  ,w
09:09:57  52  ,mpm
09:09:57  53  ,mph
09:09:57  54  FROM svm6122
09:09:57  55  ORDER BY ydate
09:09:57  56  /

Table created.

Elapsed: 00:00:00.38
09:09:58 SQL> 
09:09:58 SQL> -- rpt
09:09:58 SQL> 
09:09:58 SQL> SELECT
09:09:58   2  pair
09:09:58   3  ,trend
09:09:58   4  ,gatt
09:09:58   5  ,COUNT(pair)
09:09:58   6  ,AVG(g6)
09:09:58   7  FROM svm6142
09:09:58   8  GROUP BY pair,trend,gatt
09:09:58   9  ORDER BY pair,trend,gatt
09:09:58  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6297  -.0029884
eur_usd 	-1 up	      3903 .004552181
eur_usd 	-1		44
eur_usd 	 1 nup	      6303  -.0030992
eur_usd 	 1 up	      4163 .005148703
eur_usd 	 1		28

6 rows selected.

Elapsed: 00:00:00.04
09:09:58 SQL> 
09:09:58 SQL> 
09:09:58 SQL> -- Derive NTILE based params:
09:09:58 SQL> 
09:09:58 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.04
09:09:58 SQL> CREATE TABLE svm6162 COMPRESS AS
09:09:58   2  SELECT
09:09:58   3  pair
09:09:58   4  ,ydate
09:09:58   5  ,prdate
09:09:58   6  ,clse
09:09:58   7  ,g6
09:09:58   8  ,gatt
09:09:58   9  ,gattn
09:09:58  10  ,trend
09:09:58  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
09:09:58  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
09:09:58  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
09:09:58  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
09:09:58  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
09:09:58  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
09:09:58  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
09:09:58  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
09:09:58  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
09:09:58  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
09:09:58  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
09:09:58  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
09:09:58  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
09:09:58  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
09:09:58  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
09:09:58  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
09:09:58  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
09:09:58  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
09:09:58  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
09:09:58  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
09:09:58  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
09:09:58  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
09:09:58  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
09:09:58  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
09:09:58  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
09:09:58  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
09:09:58  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
09:09:58  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
09:09:58  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
09:09:58  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
09:09:58  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
09:09:58  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
09:09:58  43  ,hh  att32
09:09:58  44  ,d   att33
09:09:58  45  ,w   att34
09:09:58  46  ,mpm att35
09:09:58  47  ,mph att36
09:09:58  48  ,trend att37
09:09:58  49  FROM svm6142
09:09:58  50  ORDER BY ydate
09:09:58  51  /

Table created.

Elapsed: 00:00:04.95
09:10:03 SQL> 
09:10:03 SQL> -- rpt
09:10:03 SQL> 
09:10:03 SQL> SELECT
09:10:03   2  pair
09:10:03   3  ,trend
09:10:03   4  ,gatt
09:10:03   5  ,COUNT(pair)
09:10:03   6  ,AVG(g6)
09:10:03   7  FROM svm6162
09:10:03   8  GROUP BY pair,trend,gatt
09:10:03   9  ORDER BY pair,trend,gatt
09:10:03  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6297  -.0029884
eur_usd 	-1 up	      3903 .004552181
eur_usd 	-1		44
eur_usd 	 1 nup	      6303  -.0030992
eur_usd 	 1 up	      4163 .005148703
eur_usd 	 1		28

6 rows selected.

Elapsed: 00:00:00.03
09:10:03 SQL> 
09:10:03 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.04
09:10:03 SQL> CREATE TABLE modsrc COMPRESS AS
09:10:03   2  SELECT
09:10:03   3  pair
09:10:03   4  ,ydate
09:10:03   5  ,prdate
09:10:03   6  ,trend
09:10:03   7  ,g6
09:10:03   8  ,gatt
09:10:03   9  ,gattn
09:10:03  10  FROM svm6162
09:10:03  11  /

Table created.

Elapsed: 00:00:00.08
09:10:03 SQL> 
09:10:03 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.25
09:10:03 SQL> 
09:10:03 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
09:10:03 SQL> CREATE TABLE eur_ms610 COMPRESS AS
09:10:03   2  SELECT
09:10:03   3  ydate
09:10:03   4  ,trend eur_trend
09:10:03   5  ,g6    eur_g6
09:10:03   6  ,gatt  eur_gatt
09:10:03   7  ,gattn eur_gattn
09:10:03   8  FROM modsrc
09:10:03   9  /

Table created.

Elapsed: 00:00:00.07
09:10:03 SQL> 
09:10:03 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
09:10:03 SQL> 
09:10:03 SQL> -- I need a copy of the attributes:
09:10:03 SQL> 
09:10:03 SQL> 
09:10:03 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.04
09:10:03 SQL> CREATE TABLE eur_att COMPRESS AS
09:10:03   2  SELECT
09:10:03   3  ydate
09:10:03   4  ,att00 eur_att00
09:10:03   5  ,att01 eur_att01
09:10:03   6  ,att02 eur_att02
09:10:03   7  ,att03 eur_att03
09:10:03   8  ,att04 eur_att04
09:10:03   9  ,att05 eur_att05
09:10:03  10  ,att06 eur_att06
09:10:03  11  ,att07 eur_att07
09:10:03  12  ,att08 eur_att08
09:10:03  13  ,att09 eur_att09
09:10:03  14  ,att10 eur_att10
09:10:03  15  ,att11 eur_att11
09:10:03  16  ,att12 eur_att12
09:10:03  17  ,att13 eur_att13
09:10:03  18  ,att14 eur_att14
09:10:03  19  ,att15 eur_att15
09:10:03  20  ,att16 eur_att16
09:10:03  21  ,att17 eur_att17
09:10:03  22  ,att18 eur_att18
09:10:03  23  ,att19 eur_att19
09:10:03  24  ,att20 eur_att20
09:10:03  25  ,att21 eur_att21
09:10:03  26  ,att22 eur_att22
09:10:03  27  ,att23 eur_att23
09:10:03  28  ,att24 eur_att24
09:10:03  29  ,att25 eur_att25
09:10:03  30  ,att26 eur_att26
09:10:03  31  ,att27 eur_att27
09:10:03  32  ,att28 eur_att28
09:10:03  33  ,att29 eur_att29
09:10:03  34  ,att30 eur_att30
09:10:03  35  ,att31 eur_att31
09:10:03  36  ,att32 eur_att32
09:10:03  37  ,att33 eur_att33
09:10:03  38  ,att34 eur_att34
09:10:03  39  ,att35 eur_att35
09:10:03  40  ,att36 eur_att36
09:10:03  41  ,att37 eur_att37
09:10:03  42  FROM svm6162
09:10:03  43  /

Table created.

Elapsed: 00:00:00.19
09:10:04 SQL> 
09:10:04 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.49
09:10:04 SQL> 
09:10:04 SQL> -- rpt
09:10:04 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     20738

Elapsed: 00:00:00.90
09:10:05 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     20738

Elapsed: 00:00:00.00
09:10:05 SQL> 
09:10:05 SQL> --
09:10:05 SQL> -- aud610.sql
09:10:05 SQL> --
09:10:05 SQL> 
09:10:05 SQL> -- Creates views and tables for backtesting a forex SVM strategy
09:10:05 SQL> 
09:10:05 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
09:10:05 SQL> 
09:10:05 SQL> -- I created di5min here:
09:10:05 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
09:10:05 SQL> 
09:10:05 SQL> CREATE OR REPLACE VIEW svm6102 AS
09:10:05   2  SELECT
09:10:05   3  pair
09:10:05   4  ,ydate
09:10:05   5  ,prdate
09:10:05   6  ,rownum rnum -- acts as t in my time-series
09:10:05   7  ,clse
09:10:05   8  -- Derive a bunch of attributes from clse, the latest price:
09:10:05   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
09:10:05  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
09:10:05  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
09:10:05  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
09:10:05  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
09:10:05  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
09:10:05  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
09:10:05  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
09:10:05  17  --
09:10:05  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
09:10:05  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
09:10:05  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
09:10:05  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
09:10:05  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
09:10:05  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
09:10:05  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
09:10:05  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
09:10:05  26  --
09:10:05  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
09:10:05  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
09:10:05  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
09:10:05  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
09:10:05  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
09:10:05  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
09:10:05  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
09:10:05  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
09:10:05  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
09:10:05  36  FROM di5min WHERE pair LIKE'%aud%'
09:10:05  37  ORDER BY ydate
09:10:05  38  /

View created.

Elapsed: 00:00:00.04
09:10:05 SQL> 
09:10:05 SQL> -- rpt
09:10:05 SQL> 
09:10:05 SQL> SELECT
09:10:05   2  pair
09:10:05   3  ,COUNT(pair)
09:10:05   4  ,MIN(clse),MAX(clse)
09:10:05   5  ,MIN(avg6),MAX(avg6)
09:10:05   6  ,MIN(ydate),MAX(ydate)
09:10:05   7  FROM svm6102
09:10:05   8  GROUP BY pair
09:10:05   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       20735	 .9332	   1.0181 .935386301 1.01556438 2010-09-15 22:25:01 2010-12-24 21:55:00

Elapsed: 00:00:00.90
09:10:06 SQL> 
09:10:06 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
09:10:06 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.19
09:10:07 SQL> CREATE TABLE svm6122 COMPRESS AS
09:10:07   2  SELECT
09:10:07   3  pair
09:10:07   4  ,ydate
09:10:07   5  ,prdate
09:10:07   6  ,clse
09:10:07   7  -- g6 is important. I want to predict g6:
09:10:07   8  ,ld6 - clse g6
09:10:07   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
09:10:07  10  -- I want more attributes from the ones I derived above:
09:10:07  11  -- clse relation to moving-min
09:10:07  12  ,clse-min4  cm4
09:10:07  13  ,clse-min6  cm6
09:10:07  14  ,clse-min8  cm8
09:10:07  15  ,clse-min10 cm10
09:10:07  16  ,clse-min12 cm12
09:10:07  17  ,clse-min14 cm14
09:10:07  18  ,clse-min16 cm16
09:10:07  19  ,clse-min18 cm18
09:10:07  20  -- clse relation to moving-avg
09:10:07  21  ,clse-avg4  ca4
09:10:07  22  ,clse-avg6  ca6
09:10:07  23  ,clse-avg8  ca8
09:10:07  24  ,clse-avg10 ca10
09:10:07  25  ,clse-avg12 ca12
09:10:07  26  ,clse-avg14 ca14
09:10:07  27  ,clse-avg16 ca16
09:10:07  28  ,clse-avg18 ca18
09:10:07  29  -- clse relation to moving-max
09:10:07  30  ,clse-max4  cx4
09:10:07  31  ,clse-max6  cx6
09:10:07  32  ,clse-max8  cx8
09:10:07  33  ,clse-max10 cx10
09:10:07  34  ,clse-max12 cx12
09:10:07  35  ,clse-max14 cx14
09:10:07  36  ,clse-max16 cx16
09:10:07  37  ,clse-max18 cx18
09:10:07  38  -- Derive more attributes.
09:10:07  39  -- I want to use CORR() here to help SVM see the shape of the series.
09:10:07  40  -- But COVAR_POP is more stable:
09:10:07  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
09:10:07  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
09:10:07  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
09:10:07  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
09:10:07  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
09:10:07  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
09:10:07  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
09:10:07  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
09:10:07  49  -- Derive date related attributes:
09:10:07  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
09:10:07  51  ,0+TO_CHAR(ydate,'D')d
09:10:07  52  ,0+TO_CHAR(ydate,'W')w
09:10:07  53  -- mpm stands for minutes-past-midnight:
09:10:07  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
09:10:07  55  -- mph stands for minutes-past-hour:
09:10:07  56  ,0+TO_CHAR(ydate,'MI')mph
09:10:07  57  FROM svm6102
09:10:07  58  ORDER BY ydate
09:10:07  59  /

Table created.

Elapsed: 00:00:02.15
09:10:09 SQL> 
09:10:09 SQL> -- rpt
09:10:09 SQL> 
09:10:09 SQL> SELECT
09:10:09   2  pair
09:10:09   3  ,COUNT(pair)
09:10:09   4  ,MIN(clse),MAX(clse)
09:10:09   5  ,MIN(ydate),MAX(ydate)
09:10:09   6  FROM svm6122
09:10:09   7  GROUP BY pair
09:10:09   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       20735	 .9332	   1.0181 2010-09-15 22:25:01 2010-12-24 21:55:00

Elapsed: 00:00:00.05
09:10:09 SQL> 
09:10:09 SQL> -- Prepare for derivation of NTILE based params:
09:10:09 SQL> 
09:10:09 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.21
09:10:09 SQL> CREATE TABLE svm6142 COMPRESS AS
09:10:09   2  SELECT
09:10:09   3  pair
09:10:09   4  ,ydate
09:10:09   5  ,prdate
09:10:09   6  ,clse
09:10:09   7  ,g6
09:10:09   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
09:10:09   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
09:10:09  10  ,CASE WHEN trend IS NULL THEN 1
09:10:09  11  	    WHEN trend =0      THEN 1
09:10:09  12  	    ELSE trend END trend
09:10:09  13  ,cm4
09:10:09  14  ,cm6
09:10:09  15  ,cm8
09:10:09  16  ,cm10
09:10:09  17  ,cm12
09:10:09  18  ,cm14
09:10:09  19  ,cm16
09:10:09  20  ,cm18
09:10:09  21  --
09:10:09  22  ,ca4
09:10:09  23  ,ca6
09:10:09  24  ,ca8
09:10:09  25  ,ca10
09:10:09  26  ,ca12
09:10:09  27  ,ca14
09:10:09  28  ,ca16
09:10:09  29  ,ca18
09:10:09  30  --
09:10:09  31  ,cx4
09:10:09  32  ,cx6
09:10:09  33  ,cx8
09:10:09  34  ,cx10
09:10:09  35  ,cx12
09:10:09  36  ,cx14
09:10:09  37  ,cx16
09:10:09  38  ,cx18
09:10:09  39  --
09:10:09  40  ,crr4
09:10:09  41  ,crr6
09:10:09  42  ,crr8
09:10:09  43  ,crr10
09:10:09  44  ,crr12
09:10:09  45  ,crr14
09:10:09  46  ,crr16
09:10:09  47  ,crr18
09:10:09  48  --
09:10:09  49  ,hh
09:10:09  50  ,d
09:10:09  51  ,w
09:10:09  52  ,mpm
09:10:09  53  ,mph
09:10:09  54  FROM svm6122
09:10:09  55  ORDER BY ydate
09:10:09  56  /

Table created.

Elapsed: 00:00:00.38
09:10:09 SQL> 
09:10:09 SQL> -- rpt
09:10:09 SQL> 
09:10:09 SQL> SELECT
09:10:09   2  pair
09:10:09   3  ,trend
09:10:09   4  ,gatt
09:10:09   5  ,COUNT(pair)
09:10:09   6  ,AVG(g6)
09:10:09   7  FROM svm6142
09:10:09   8  GROUP BY pair,trend,gatt
09:10:09   9  ORDER BY pair,trend,gatt
09:10:09  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5458 -.00207705
aud_usd 	-1 up	      4030 .003724423
aud_usd 	-1		12
aud_usd 	 1 nup	      7178 -.00213233
aud_usd 	 1 up	      3997 .004125554
aud_usd 	 1		60

6 rows selected.

Elapsed: 00:00:00.04
09:10:09 SQL> 
09:10:09 SQL> 
09:10:09 SQL> -- Derive NTILE based params:
09:10:09 SQL> 
09:10:09 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.11
09:10:10 SQL> CREATE TABLE svm6162 COMPRESS AS
09:10:10   2  SELECT
09:10:10   3  pair
09:10:10   4  ,ydate
09:10:10   5  ,prdate
09:10:10   6  ,clse
09:10:10   7  ,g6
09:10:10   8  ,gatt
09:10:10   9  ,gattn
09:10:10  10  ,trend
09:10:10  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
09:10:10  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
09:10:10  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
09:10:10  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
09:10:10  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
09:10:10  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
09:10:10  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
09:10:10  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
09:10:10  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
09:10:10  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
09:10:10  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
09:10:10  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
09:10:10  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
09:10:10  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
09:10:10  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
09:10:10  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
09:10:10  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
09:10:10  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
09:10:10  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
09:10:10  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
09:10:10  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
09:10:10  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
09:10:10  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
09:10:10  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
09:10:10  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
09:10:10  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
09:10:10  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
09:10:10  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
09:10:10  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
09:10:10  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
09:10:10  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
09:10:10  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
09:10:10  43  ,hh  att32
09:10:10  44  ,d   att33
09:10:10  45  ,w   att34
09:10:10  46  ,mpm att35
09:10:10  47  ,mph att36
09:10:10  48  ,trend att37
09:10:10  49  FROM svm6142
09:10:10  50  ORDER BY ydate
09:10:10  51  /

Table created.

Elapsed: 00:00:04.96
09:10:14 SQL> 
09:10:14 SQL> -- rpt
09:10:14 SQL> 
09:10:14 SQL> SELECT
09:10:14   2  pair
09:10:14   3  ,trend
09:10:14   4  ,gatt
09:10:14   5  ,COUNT(pair)
09:10:14   6  ,AVG(g6)
09:10:14   7  FROM svm6162
09:10:14   8  GROUP BY pair,trend,gatt
09:10:14   9  ORDER BY pair,trend,gatt
09:10:14  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5458 -.00207705
aud_usd 	-1 up	      4030 .003724423
aud_usd 	-1		12
aud_usd 	 1 nup	      7178 -.00213233
aud_usd 	 1 up	      3997 .004125554
aud_usd 	 1		60

6 rows selected.

Elapsed: 00:00:00.03
09:10:15 SQL> 
09:10:15 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.23
09:10:15 SQL> CREATE TABLE modsrc COMPRESS AS
09:10:15   2  SELECT
09:10:15   3  pair
09:10:15   4  ,ydate
09:10:15   5  ,prdate
09:10:15   6  ,trend
09:10:15   7  ,g6
09:10:15   8  ,gatt
09:10:15   9  ,gattn
09:10:15  10  FROM svm6162
09:10:15  11  /

Table created.

Elapsed: 00:00:00.19
09:10:15 SQL> 
09:10:15 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
09:10:15 SQL> 
09:10:15 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
09:10:15 SQL> CREATE TABLE aud_ms610 COMPRESS AS
09:10:15   2  SELECT
09:10:15   3  ydate
09:10:15   4  ,trend aud_trend
09:10:15   5  ,g6    aud_g6
09:10:15   6  ,gatt  aud_gatt
09:10:15   7  ,gattn aud_gattn
09:10:15   8  FROM modsrc
09:10:15   9  /

Table created.

Elapsed: 00:00:00.09
09:10:15 SQL> 
09:10:15 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
09:10:15 SQL> 
09:10:15 SQL> -- I need a copy of the attributes:
09:10:15 SQL> 
09:10:15 SQL> 
09:10:15 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.05
09:10:16 SQL> CREATE TABLE aud_att COMPRESS AS
09:10:16   2  SELECT
09:10:16   3  ydate
09:10:16   4  ,att00 aud_att00
09:10:16   5  ,att01 aud_att01
09:10:16   6  ,att02 aud_att02
09:10:16   7  ,att03 aud_att03
09:10:16   8  ,att04 aud_att04
09:10:16   9  ,att05 aud_att05
09:10:16  10  ,att06 aud_att06
09:10:16  11  ,att07 aud_att07
09:10:16  12  ,att08 aud_att08
09:10:16  13  ,att09 aud_att09
09:10:16  14  ,att10 aud_att10
09:10:16  15  ,att11 aud_att11
09:10:16  16  ,att12 aud_att12
09:10:16  17  ,att13 aud_att13
09:10:16  18  ,att14 aud_att14
09:10:16  19  ,att15 aud_att15
09:10:16  20  ,att16 aud_att16
09:10:16  21  ,att17 aud_att17
09:10:16  22  ,att18 aud_att18
09:10:16  23  ,att19 aud_att19
09:10:16  24  ,att20 aud_att20
09:10:16  25  ,att21 aud_att21
09:10:16  26  ,att22 aud_att22
09:10:16  27  ,att23 aud_att23
09:10:16  28  ,att24 aud_att24
09:10:16  29  ,att25 aud_att25
09:10:16  30  ,att26 aud_att26
09:10:16  31  ,att27 aud_att27
09:10:16  32  ,att28 aud_att28
09:10:16  33  ,att29 aud_att29
09:10:16  34  ,att30 aud_att30
09:10:16  35  ,att31 aud_att31
09:10:16  36  ,att32 aud_att32
09:10:16  37  ,att33 aud_att33
09:10:16  38  ,att34 aud_att34
09:10:16  39  ,att35 aud_att35
09:10:16  40  ,att36 aud_att36
09:10:16  41  ,att37 aud_att37
09:10:16  42  FROM svm6162
09:10:16  43  /

Table created.

Elapsed: 00:00:00.18
09:10:16 SQL> 
09:10:16 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.57
09:10:16 SQL> 
09:10:16 SQL> -- rpt
09:10:16 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     20735

Elapsed: 00:00:00.88
09:10:17 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     20735

Elapsed: 00:00:00.00
09:10:17 SQL> 
09:10:17 SQL> --
09:10:17 SQL> -- gbp610.sql
09:10:17 SQL> --
09:10:17 SQL> 
09:10:17 SQL> -- Creates views and tables for backtesting a forex SVM strategy
09:10:17 SQL> 
09:10:17 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.61
09:10:18 SQL> 
09:10:18 SQL> -- I created di5min here:
09:10:18 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
09:10:18 SQL> 
09:10:18 SQL> CREATE OR REPLACE VIEW svm6102 AS
09:10:18   2  SELECT
09:10:18   3  pair
09:10:18   4  ,ydate
09:10:18   5  ,prdate
09:10:18   6  ,rownum rnum -- acts as t in my time-series
09:10:18   7  ,clse
09:10:18   8  -- Derive a bunch of attributes from clse, the latest price:
09:10:18   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
09:10:18  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
09:10:18  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
09:10:18  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
09:10:18  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
09:10:18  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
09:10:18  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
09:10:18  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
09:10:18  17  --
09:10:18  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
09:10:18  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
09:10:18  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
09:10:18  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
09:10:18  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
09:10:18  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
09:10:18  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
09:10:18  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
09:10:18  26  --
09:10:18  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
09:10:18  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
09:10:18  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
09:10:18  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
09:10:18  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
09:10:18  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
09:10:18  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
09:10:18  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
09:10:18  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
09:10:18  36  FROM di5min WHERE pair LIKE'%gbp%'
09:10:18  37  ORDER BY ydate
09:10:18  38  /

View created.

Elapsed: 00:00:00.05
09:10:18 SQL> 
09:10:18 SQL> -- rpt
09:10:18 SQL> 
09:10:18 SQL> SELECT
09:10:18   2  pair
09:10:18   3  ,COUNT(pair)
09:10:18   4  ,MIN(clse),MAX(clse)
09:10:18   5  ,MIN(avg6),MAX(avg6)
09:10:18   6  ,MIN(ydate),MAX(ydate)
09:10:18   7  FROM svm6102
09:10:18   8  GROUP BY pair
09:10:18   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       20737   1.535825	   1.6295 1.53821404 1.62716986 2010-09-15 22:25:01 2010-12-24 21:55:00

Elapsed: 00:00:00.89
09:10:19 SQL> 
09:10:19 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
09:10:19 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.23
09:10:19 SQL> CREATE TABLE svm6122 COMPRESS AS
09:10:19   2  SELECT
09:10:19   3  pair
09:10:19   4  ,ydate
09:10:19   5  ,prdate
09:10:19   6  ,clse
09:10:19   7  -- g6 is important. I want to predict g6:
09:10:19   8  ,ld6 - clse g6
09:10:19   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
09:10:19  10  -- I want more attributes from the ones I derived above:
09:10:19  11  -- clse relation to moving-min
09:10:19  12  ,clse-min4  cm4
09:10:19  13  ,clse-min6  cm6
09:10:19  14  ,clse-min8  cm8
09:10:19  15  ,clse-min10 cm10
09:10:19  16  ,clse-min12 cm12
09:10:19  17  ,clse-min14 cm14
09:10:19  18  ,clse-min16 cm16
09:10:19  19  ,clse-min18 cm18
09:10:19  20  -- clse relation to moving-avg
09:10:19  21  ,clse-avg4  ca4
09:10:19  22  ,clse-avg6  ca6
09:10:19  23  ,clse-avg8  ca8
09:10:19  24  ,clse-avg10 ca10
09:10:19  25  ,clse-avg12 ca12
09:10:19  26  ,clse-avg14 ca14
09:10:19  27  ,clse-avg16 ca16
09:10:19  28  ,clse-avg18 ca18
09:10:19  29  -- clse relation to moving-max
09:10:19  30  ,clse-max4  cx4
09:10:19  31  ,clse-max6  cx6
09:10:19  32  ,clse-max8  cx8
09:10:19  33  ,clse-max10 cx10
09:10:19  34  ,clse-max12 cx12
09:10:19  35  ,clse-max14 cx14
09:10:19  36  ,clse-max16 cx16
09:10:19  37  ,clse-max18 cx18
09:10:19  38  -- Derive more attributes.
09:10:19  39  -- I want to use CORR() here to help SVM see the shape of the series.
09:10:19  40  -- But COVAR_POP is more stable:
09:10:19  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
09:10:19  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
09:10:19  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
09:10:19  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
09:10:19  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
09:10:19  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
09:10:19  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
09:10:19  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
09:10:19  49  -- Derive date related attributes:
09:10:19  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
09:10:19  51  ,0+TO_CHAR(ydate,'D')d
09:10:19  52  ,0+TO_CHAR(ydate,'W')w
09:10:19  53  -- mpm stands for minutes-past-midnight:
09:10:19  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
09:10:19  55  -- mph stands for minutes-past-hour:
09:10:19  56  ,0+TO_CHAR(ydate,'MI')mph
09:10:19  57  FROM svm6102
09:10:19  58  ORDER BY ydate
09:10:19  59  /

Table created.

Elapsed: 00:00:02.16
09:10:21 SQL> 
09:10:21 SQL> -- rpt
09:10:21 SQL> 
09:10:21 SQL> SELECT
09:10:21   2  pair
09:10:21   3  ,COUNT(pair)
09:10:21   4  ,MIN(clse),MAX(clse)
09:10:21   5  ,MIN(ydate),MAX(ydate)
09:10:21   6  FROM svm6122
09:10:21   7  GROUP BY pair
09:10:21   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       20737   1.535825	   1.6295 2010-09-15 22:25:01 2010-12-24 21:55:00

Elapsed: 00:00:00.04
09:10:21 SQL> 
09:10:21 SQL> -- Prepare for derivation of NTILE based params:
09:10:21 SQL> 
09:10:21 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.20
09:10:21 SQL> CREATE TABLE svm6142 COMPRESS AS
09:10:21   2  SELECT
09:10:21   3  pair
09:10:21   4  ,ydate
09:10:21   5  ,prdate
09:10:21   6  ,clse
09:10:21   7  ,g6
09:10:21   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
09:10:21   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
09:10:21  10  ,CASE WHEN trend IS NULL THEN 1
09:10:21  11  	    WHEN trend =0      THEN 1
09:10:21  12  	    ELSE trend END trend
09:10:21  13  ,cm4
09:10:21  14  ,cm6
09:10:21  15  ,cm8
09:10:21  16  ,cm10
09:10:21  17  ,cm12
09:10:21  18  ,cm14
09:10:21  19  ,cm16
09:10:21  20  ,cm18
09:10:21  21  --
09:10:21  22  ,ca4
09:10:21  23  ,ca6
09:10:21  24  ,ca8
09:10:21  25  ,ca10
09:10:21  26  ,ca12
09:10:21  27  ,ca14
09:10:21  28  ,ca16
09:10:21  29  ,ca18
09:10:21  30  --
09:10:21  31  ,cx4
09:10:21  32  ,cx6
09:10:21  33  ,cx8
09:10:21  34  ,cx10
09:10:21  35  ,cx12
09:10:21  36  ,cx14
09:10:21  37  ,cx16
09:10:21  38  ,cx18
09:10:21  39  --
09:10:21  40  ,crr4
09:10:21  41  ,crr6
09:10:21  42  ,crr8
09:10:21  43  ,crr10
09:10:21  44  ,crr12
09:10:21  45  ,crr14
09:10:21  46  ,crr16
09:10:21  47  ,crr18
09:10:21  48  --
09:10:21  49  ,hh
09:10:21  50  ,d
09:10:21  51  ,w
09:10:21  52  ,mpm
09:10:21  53  ,mph
09:10:21  54  FROM svm6122
09:10:21  55  ORDER BY ydate
09:10:21  56  /

Table created.

Elapsed: 00:00:00.46
09:10:22 SQL> 
09:10:22 SQL> -- rpt
09:10:22 SQL> 
09:10:22 SQL> SELECT
09:10:22   2  pair
09:10:22   3  ,trend
09:10:22   4  ,gatt
09:10:22   5  ,COUNT(pair)
09:10:22   6  ,AVG(g6)
09:10:22   7  FROM svm6142
09:10:22   8  GROUP BY pair,trend,gatt
09:10:22   9  ORDER BY pair,trend,gatt
09:10:22  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6598 -.00249501
gbp_usd 	-1 up	      3731 .004304556
gbp_usd 	-1		23
gbp_usd 	 1 nup	      6594 -.00262086
gbp_usd 	 1 up	      3742 .004375975
gbp_usd 	 1		49

6 rows selected.

Elapsed: 00:00:00.04
09:10:22 SQL> 
09:10:22 SQL> 
09:10:22 SQL> -- Derive NTILE based params:
09:10:22 SQL> 
09:10:22 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
09:10:22 SQL> CREATE TABLE svm6162 COMPRESS AS
09:10:22   2  SELECT
09:10:22   3  pair
09:10:22   4  ,ydate
09:10:22   5  ,prdate
09:10:22   6  ,clse
09:10:22   7  ,g6
09:10:22   8  ,gatt
09:10:22   9  ,gattn
09:10:22  10  ,trend
09:10:22  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
09:10:22  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
09:10:22  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
09:10:22  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
09:10:22  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
09:10:22  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
09:10:22  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
09:10:22  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
09:10:22  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
09:10:22  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
09:10:22  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
09:10:22  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
09:10:22  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
09:10:22  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
09:10:22  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
09:10:22  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
09:10:22  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
09:10:22  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
09:10:22  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
09:10:22  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
09:10:22  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
09:10:22  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
09:10:22  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
09:10:22  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
09:10:22  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
09:10:22  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
09:10:22  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
09:10:22  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
09:10:22  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
09:10:22  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
09:10:22  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
09:10:22  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
09:10:22  43  ,hh  att32
09:10:22  44  ,d   att33
09:10:22  45  ,w   att34
09:10:22  46  ,mpm att35
09:10:22  47  ,mph att36
09:10:22  48  ,trend att37
09:10:22  49  FROM svm6142
09:10:22  50  ORDER BY ydate
09:10:22  51  /

Table created.

Elapsed: 00:00:04.97
09:10:27 SQL> 
09:10:27 SQL> -- rpt
09:10:27 SQL> 
09:10:27 SQL> SELECT
09:10:27   2  pair
09:10:27   3  ,trend
09:10:27   4  ,gatt
09:10:27   5  ,COUNT(pair)
09:10:27   6  ,AVG(g6)
09:10:27   7  FROM svm6162
09:10:27   8  GROUP BY pair,trend,gatt
09:10:27   9  ORDER BY pair,trend,gatt
09:10:27  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6598 -.00249501
gbp_usd 	-1 up	      3731 .004304556
gbp_usd 	-1		23
gbp_usd 	 1 nup	      6594 -.00262086
gbp_usd 	 1 up	      3742 .004375975
gbp_usd 	 1		49

6 rows selected.

Elapsed: 00:00:00.03
09:10:27 SQL> 
09:10:27 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
09:10:27 SQL> CREATE TABLE modsrc COMPRESS AS
09:10:27   2  SELECT
09:10:27   3  pair
09:10:27   4  ,ydate
09:10:27   5  ,prdate
09:10:27   6  ,trend
09:10:27   7  ,g6
09:10:27   8  ,gatt
09:10:27   9  ,gattn
09:10:27  10  FROM svm6162
09:10:27  11  /

Table created.

Elapsed: 00:00:00.10
09:10:27 SQL> 
09:10:27 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.28
09:10:28 SQL> 
09:10:28 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
09:10:28 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
09:10:28   2  SELECT
09:10:28   3  ydate
09:10:28   4  ,trend gbp_trend
09:10:28   5  ,g6    gbp_g6
09:10:28   6  ,gatt  gbp_gatt
09:10:28   7  ,gattn gbp_gattn
09:10:28   8  FROM modsrc
09:10:28   9  /

Table created.

Elapsed: 00:00:00.08
09:10:28 SQL> 
09:10:28 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
09:10:28 SQL> 
09:10:28 SQL> -- I need a copy of the attributes:
09:10:28 SQL> 
09:10:28 SQL> 
09:10:28 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.04
09:10:28 SQL> CREATE TABLE gbp_att COMPRESS AS
09:10:28   2  SELECT
09:10:28   3  ydate
09:10:28   4  ,att00 gbp_att00
09:10:28   5  ,att01 gbp_att01
09:10:28   6  ,att02 gbp_att02
09:10:28   7  ,att03 gbp_att03
09:10:28   8  ,att04 gbp_att04
09:10:28   9  ,att05 gbp_att05
09:10:28  10  ,att06 gbp_att06
09:10:28  11  ,att07 gbp_att07
09:10:28  12  ,att08 gbp_att08
09:10:28  13  ,att09 gbp_att09
09:10:28  14  ,att10 gbp_att10
09:10:28  15  ,att11 gbp_att11
09:10:28  16  ,att12 gbp_att12
09:10:28  17  ,att13 gbp_att13
09:10:28  18  ,att14 gbp_att14
09:10:28  19  ,att15 gbp_att15
09:10:28  20  ,att16 gbp_att16
09:10:28  21  ,att17 gbp_att17
09:10:28  22  ,att18 gbp_att18
09:10:28  23  ,att19 gbp_att19
09:10:28  24  ,att20 gbp_att20
09:10:28  25  ,att21 gbp_att21
09:10:28  26  ,att22 gbp_att22
09:10:28  27  ,att23 gbp_att23
09:10:28  28  ,att24 gbp_att24
09:10:28  29  ,att25 gbp_att25
09:10:28  30  ,att26 gbp_att26
09:10:28  31  ,att27 gbp_att27
09:10:28  32  ,att28 gbp_att28
09:10:28  33  ,att29 gbp_att29
09:10:28  34  ,att30 gbp_att30
09:10:28  35  ,att31 gbp_att31
09:10:28  36  ,att32 gbp_att32
09:10:28  37  ,att33 gbp_att33
09:10:28  38  ,att34 gbp_att34
09:10:28  39  ,att35 gbp_att35
09:10:28  40  ,att36 gbp_att36
09:10:28  41  ,att37 gbp_att37
09:10:28  42  FROM svm6162
09:10:28  43  /

Table created.

Elapsed: 00:00:00.19
09:10:28 SQL> 
09:10:28 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.49
09:10:29 SQL> 
09:10:29 SQL> -- rpt
09:10:29 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     20737

Elapsed: 00:00:00.85
09:10:29 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     20737

Elapsed: 00:00:00.01
09:10:29 SQL> 
09:10:29 SQL> --
09:10:29 SQL> -- jpy610.sql
09:10:29 SQL> --
09:10:29 SQL> 
09:10:29 SQL> -- Creates views and tables for backtesting a forex SVM strategy
09:10:29 SQL> 
09:10:29 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.35
09:10:30 SQL> 
09:10:30 SQL> -- I created di5min here:
09:10:30 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
09:10:30 SQL> 
09:10:30 SQL> CREATE OR REPLACE VIEW svm6102 AS
09:10:30   2  SELECT
09:10:30   3  pair
09:10:30   4  ,ydate
09:10:30   5  ,prdate
09:10:30   6  ,rownum rnum -- acts as t in my time-series
09:10:30   7  ,clse
09:10:30   8  -- Derive a bunch of attributes from clse, the latest price:
09:10:30   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
09:10:30  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
09:10:30  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
09:10:30  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
09:10:30  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
09:10:30  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
09:10:30  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
09:10:30  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
09:10:30  17  --
09:10:30  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
09:10:30  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
09:10:30  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
09:10:30  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
09:10:30  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
09:10:30  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
09:10:30  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
09:10:30  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
09:10:30  26  --
09:10:30  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
09:10:30  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
09:10:30  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
09:10:30  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
09:10:30  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
09:10:30  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
09:10:30  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
09:10:30  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
09:10:30  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
09:10:30  36  FROM di5min WHERE pair LIKE'%jpy%'
09:10:30  37  ORDER BY ydate
09:10:30  38  /

View created.

Elapsed: 00:00:00.05
09:10:30 SQL> 
09:10:30 SQL> -- rpt
09:10:30 SQL> 
09:10:30 SQL> SELECT
09:10:30   2  pair
09:10:30   3  ,COUNT(pair)
09:10:30   4  ,MIN(clse),MAX(clse)
09:10:30   5  ,MIN(avg6),MAX(avg6)
09:10:30   6  ,MIN(ydate),MAX(ydate)
09:10:30   7  FROM svm6102
09:10:30   8  GROUP BY pair
09:10:30   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       20736	 80.25	    85.89 80.3595205 85.8020548 2010-09-15 22:25:01 2010-12-24 21:55:00

Elapsed: 00:00:00.92
09:10:31 SQL> 
09:10:31 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
09:10:31 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:01.57
09:10:32 SQL> CREATE TABLE svm6122 COMPRESS AS
09:10:32   2  SELECT
09:10:32   3  pair
09:10:32   4  ,ydate
09:10:32   5  ,prdate
09:10:32   6  ,clse
09:10:32   7  -- g6 is important. I want to predict g6:
09:10:32   8  ,ld6 - clse g6
09:10:32   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
09:10:32  10  -- I want more attributes from the ones I derived above:
09:10:32  11  -- clse relation to moving-min
09:10:32  12  ,clse-min4  cm4
09:10:32  13  ,clse-min6  cm6
09:10:32  14  ,clse-min8  cm8
09:10:32  15  ,clse-min10 cm10
09:10:32  16  ,clse-min12 cm12
09:10:32  17  ,clse-min14 cm14
09:10:32  18  ,clse-min16 cm16
09:10:32  19  ,clse-min18 cm18
09:10:32  20  -- clse relation to moving-avg
09:10:32  21  ,clse-avg4  ca4
09:10:32  22  ,clse-avg6  ca6
09:10:32  23  ,clse-avg8  ca8
09:10:32  24  ,clse-avg10 ca10
09:10:32  25  ,clse-avg12 ca12
09:10:32  26  ,clse-avg14 ca14
09:10:32  27  ,clse-avg16 ca16
09:10:32  28  ,clse-avg18 ca18
09:10:32  29  -- clse relation to moving-max
09:10:32  30  ,clse-max4  cx4
09:10:32  31  ,clse-max6  cx6
09:10:32  32  ,clse-max8  cx8
09:10:32  33  ,clse-max10 cx10
09:10:32  34  ,clse-max12 cx12
09:10:32  35  ,clse-max14 cx14
09:10:32  36  ,clse-max16 cx16
09:10:32  37  ,clse-max18 cx18
09:10:32  38  -- Derive more attributes.
09:10:32  39  -- I want to use CORR() here to help SVM see the shape of the series.
09:10:32  40  -- But COVAR_POP is more stable:
09:10:32  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
09:10:32  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
09:10:32  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
09:10:32  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
09:10:32  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
09:10:32  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
09:10:32  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
09:10:32  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
09:10:32  49  -- Derive date related attributes:
09:10:32  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
09:10:32  51  ,0+TO_CHAR(ydate,'D')d
09:10:32  52  ,0+TO_CHAR(ydate,'W')w
09:10:32  53  -- mpm stands for minutes-past-midnight:
09:10:32  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
09:10:32  55  -- mph stands for minutes-past-hour:
09:10:32  56  ,0+TO_CHAR(ydate,'MI')mph
09:10:32  57  FROM svm6102
09:10:32  58  ORDER BY ydate
09:10:32  59  /

Table created.

Elapsed: 00:00:02.27
09:10:35 SQL> 
09:10:35 SQL> -- rpt
09:10:35 SQL> 
09:10:35 SQL> SELECT
09:10:35   2  pair
09:10:35   3  ,COUNT(pair)
09:10:35   4  ,MIN(clse),MAX(clse)
09:10:35   5  ,MIN(ydate),MAX(ydate)
09:10:35   6  FROM svm6122
09:10:35   7  GROUP BY pair
09:10:35   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       20736	 80.25	    85.89 2010-09-15 22:25:01 2010-12-24 21:55:00

Elapsed: 00:00:00.06
09:10:35 SQL> 
09:10:35 SQL> -- Prepare for derivation of NTILE based params:
09:10:35 SQL> 
09:10:35 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.18
09:10:35 SQL> CREATE TABLE svm6142 COMPRESS AS
09:10:35   2  SELECT
09:10:35   3  pair
09:10:35   4  ,ydate
09:10:35   5  ,prdate
09:10:35   6  ,clse
09:10:35   7  ,g6
09:10:35   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
09:10:35   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
09:10:35  10  ,CASE WHEN trend IS NULL THEN 1
09:10:35  11  	    WHEN trend =0      THEN 1
09:10:35  12  	    ELSE trend END trend
09:10:35  13  ,cm4
09:10:35  14  ,cm6
09:10:35  15  ,cm8
09:10:35  16  ,cm10
09:10:35  17  ,cm12
09:10:35  18  ,cm14
09:10:35  19  ,cm16
09:10:35  20  ,cm18
09:10:35  21  --
09:10:35  22  ,ca4
09:10:35  23  ,ca6
09:10:35  24  ,ca8
09:10:35  25  ,ca10
09:10:35  26  ,ca12
09:10:35  27  ,ca14
09:10:35  28  ,ca16
09:10:35  29  ,ca18
09:10:35  30  --
09:10:35  31  ,cx4
09:10:35  32  ,cx6
09:10:35  33  ,cx8
09:10:35  34  ,cx10
09:10:35  35  ,cx12
09:10:35  36  ,cx14
09:10:35  37  ,cx16
09:10:35  38  ,cx18
09:10:35  39  --
09:10:35  40  ,crr4
09:10:35  41  ,crr6
09:10:35  42  ,crr8
09:10:35  43  ,crr10
09:10:35  44  ,crr12
09:10:35  45  ,crr14
09:10:35  46  ,crr16
09:10:35  47  ,crr18
09:10:35  48  --
09:10:35  49  ,hh
09:10:35  50  ,d
09:10:35  51  ,w
09:10:35  52  ,mpm
09:10:35  53  ,mph
09:10:35  54  FROM svm6122
09:10:35  55  ORDER BY ydate
09:10:35  56  /

Table created.

Elapsed: 00:00:00.39
09:10:35 SQL> 
09:10:35 SQL> -- rpt
09:10:35 SQL> 
09:10:35 SQL> SELECT
09:10:35   2  pair
09:10:35   3  ,trend
09:10:35   4  ,gatt
09:10:35   5  ,COUNT(pair)
09:10:35   6  ,AVG(g6)
09:10:35   7  FROM svm6142
09:10:35   8  GROUP BY pair,trend,gatt
09:10:35   9  ORDER BY pair,trend,gatt
09:10:35  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5654 -.15617184
usd_jpy 	-1 up	      5199 .158911925
usd_jpy 	-1		66
usd_jpy 	 1 nup	      5403 -.15620008
usd_jpy 	 1 up	      4408 .162386074
usd_jpy 	 1		 6

6 rows selected.

Elapsed: 00:00:00.04
09:10:35 SQL> 
09:10:35 SQL> 
09:10:35 SQL> -- Derive NTILE based params:
09:10:35 SQL> 
09:10:35 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.23
09:10:35 SQL> CREATE TABLE svm6162 COMPRESS AS
09:10:35   2  SELECT
09:10:35   3  pair
09:10:35   4  ,ydate
09:10:35   5  ,prdate
09:10:35   6  ,clse
09:10:35   7  ,g6
09:10:35   8  ,gatt
09:10:35   9  ,gattn
09:10:35  10  ,trend
09:10:35  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
09:10:35  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
09:10:35  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
09:10:35  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
09:10:35  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
09:10:35  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
09:10:35  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
09:10:35  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
09:10:35  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
09:10:35  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
09:10:35  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
09:10:35  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
09:10:35  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
09:10:35  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
09:10:35  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
09:10:35  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
09:10:35  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
09:10:35  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
09:10:35  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
09:10:35  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
09:10:35  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
09:10:35  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
09:10:35  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
09:10:35  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
09:10:35  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
09:10:35  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
09:10:35  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
09:10:35  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
09:10:35  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
09:10:35  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
09:10:35  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
09:10:35  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
09:10:35  43  ,hh  att32
09:10:35  44  ,d   att33
09:10:35  45  ,w   att34
09:10:35  46  ,mpm att35
09:10:35  47  ,mph att36
09:10:35  48  ,trend att37
09:10:35  49  FROM svm6142
09:10:35  50  ORDER BY ydate
09:10:35  51  /

Table created.

Elapsed: 00:00:05.02
09:10:41 SQL> 
09:10:41 SQL> -- rpt
09:10:41 SQL> 
09:10:41 SQL> SELECT
09:10:41   2  pair
09:10:41   3  ,trend
09:10:41   4  ,gatt
09:10:41   5  ,COUNT(pair)
09:10:41   6  ,AVG(g6)
09:10:41   7  FROM svm6162
09:10:41   8  GROUP BY pair,trend,gatt
09:10:41   9  ORDER BY pair,trend,gatt
09:10:41  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5654 -.15617184
usd_jpy 	-1 up	      5199 .158911925
usd_jpy 	-1		66
usd_jpy 	 1 nup	      5403 -.15620008
usd_jpy 	 1 up	      4408 .162386074
usd_jpy 	 1		 6

6 rows selected.

Elapsed: 00:00:00.03
09:10:41 SQL> 
09:10:41 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
09:10:41 SQL> CREATE TABLE modsrc COMPRESS AS
09:10:41   2  SELECT
09:10:41   3  pair
09:10:41   4  ,ydate
09:10:41   5  ,prdate
09:10:41   6  ,trend
09:10:41   7  ,g6
09:10:41   8  ,gatt
09:10:41   9  ,gattn
09:10:41  10  FROM svm6162
09:10:41  11  /

Table created.

Elapsed: 00:00:00.08
09:10:41 SQL> 
09:10:41 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.29
09:10:41 SQL> 
09:10:41 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
09:10:41 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
09:10:41   2  SELECT
09:10:41   3  ydate
09:10:41   4  ,trend jpy_trend
09:10:41   5  ,g6    jpy_g6
09:10:41   6  ,gatt  jpy_gatt
09:10:41   7  ,gattn jpy_gattn
09:10:41   8  FROM modsrc
09:10:41   9  /

Table created.

Elapsed: 00:00:00.07
09:10:41 SQL> 
09:10:41 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
09:10:41 SQL> 
09:10:41 SQL> -- I need a copy of the attributes:
09:10:41 SQL> 
09:10:41 SQL> 
09:10:41 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.04
09:10:41 SQL> CREATE TABLE jpy_att COMPRESS AS
09:10:41   2  SELECT
09:10:41   3  ydate
09:10:41   4  ,att00 jpy_att00
09:10:41   5  ,att01 jpy_att01
09:10:41   6  ,att02 jpy_att02
09:10:41   7  ,att03 jpy_att03
09:10:41   8  ,att04 jpy_att04
09:10:41   9  ,att05 jpy_att05
09:10:41  10  ,att06 jpy_att06
09:10:41  11  ,att07 jpy_att07
09:10:41  12  ,att08 jpy_att08
09:10:41  13  ,att09 jpy_att09
09:10:41  14  ,att10 jpy_att10
09:10:41  15  ,att11 jpy_att11
09:10:41  16  ,att12 jpy_att12
09:10:41  17  ,att13 jpy_att13
09:10:41  18  ,att14 jpy_att14
09:10:41  19  ,att15 jpy_att15
09:10:41  20  ,att16 jpy_att16
09:10:41  21  ,att17 jpy_att17
09:10:41  22  ,att18 jpy_att18
09:10:41  23  ,att19 jpy_att19
09:10:41  24  ,att20 jpy_att20
09:10:41  25  ,att21 jpy_att21
09:10:41  26  ,att22 jpy_att22
09:10:41  27  ,att23 jpy_att23
09:10:41  28  ,att24 jpy_att24
09:10:41  29  ,att25 jpy_att25
09:10:41  30  ,att26 jpy_att26
09:10:41  31  ,att27 jpy_att27
09:10:41  32  ,att28 jpy_att28
09:10:41  33  ,att29 jpy_att29
09:10:41  34  ,att30 jpy_att30
09:10:41  35  ,att31 jpy_att31
09:10:41  36  ,att32 jpy_att32
09:10:41  37  ,att33 jpy_att33
09:10:41  38  ,att34 jpy_att34
09:10:41  39  ,att35 jpy_att35
09:10:41  40  ,att36 jpy_att36
09:10:41  41  ,att37 jpy_att37
09:10:41  42  FROM svm6162
09:10:41  43  /

Table created.

Elapsed: 00:00:00.18
09:10:42 SQL> 
09:10:42 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
09:10:42 SQL> 
09:10:42 SQL> -- rpt
09:10:42 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     20736

Elapsed: 00:00:00.89
09:10:43 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     20736

Elapsed: 00:00:00.01
09:10:43 SQL> 
09:10:43 SQL> --
09:10:43 SQL> -- cad610.sql
09:10:43 SQL> --
09:10:43 SQL> 
09:10:43 SQL> -- Creates views and tables for backtesting a forex SVM strategy
09:10:43 SQL> 
09:10:43 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
09:10:43 SQL> 
09:10:43 SQL> -- I created di5min here:
09:10:43 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
09:10:43 SQL> 
09:10:43 SQL> CREATE OR REPLACE VIEW svm6102 AS
09:10:43   2  SELECT
09:10:43   3  pair
09:10:43   4  ,ydate
09:10:43   5  ,prdate
09:10:43   6  ,rownum rnum -- acts as t in my time-series
09:10:43   7  ,clse
09:10:43   8  -- Derive a bunch of attributes from clse, the latest price:
09:10:43   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
09:10:43  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
09:10:43  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
09:10:43  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
09:10:43  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
09:10:43  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
09:10:43  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
09:10:43  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
09:10:43  17  --
09:10:43  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
09:10:43  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
09:10:43  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
09:10:43  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
09:10:43  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
09:10:43  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
09:10:43  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
09:10:43  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
09:10:43  26  --
09:10:43  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
09:10:43  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
09:10:43  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
09:10:43  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
09:10:43  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
09:10:43  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
09:10:43  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
09:10:43  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
09:10:43  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
09:10:43  36  FROM di5min WHERE pair LIKE'%cad%'
09:10:43  37  ORDER BY ydate
09:10:43  38  /

View created.

Elapsed: 00:00:00.05
09:10:43 SQL> 
09:10:43 SQL> -- rpt
09:10:43 SQL> 
09:10:43 SQL> SELECT
09:10:43   2  pair
09:10:43   3  ,COUNT(pair)
09:10:43   4  ,MIN(clse),MAX(clse)
09:10:43   5  ,MIN(avg6),MAX(avg6)
09:10:43   6  ,MIN(ydate),MAX(ydate)
09:10:43   7  FROM svm6102
09:10:43   8  GROUP BY pair
09:10:43   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       20734	 .9981	   1.0371 .999404795 1.03438904 2010-09-15 22:25:01 2010-12-24 21:55:00

Elapsed: 00:00:00.86
09:10:44 SQL> 
09:10:44 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
09:10:44 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.20
09:10:44 SQL> CREATE TABLE svm6122 COMPRESS AS
09:10:44   2  SELECT
09:10:44   3  pair
09:10:44   4  ,ydate
09:10:44   5  ,prdate
09:10:44   6  ,clse
09:10:44   7  -- g6 is important. I want to predict g6:
09:10:44   8  ,ld6 - clse g6
09:10:44   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
09:10:44  10  -- I want more attributes from the ones I derived above:
09:10:44  11  -- clse relation to moving-min
09:10:44  12  ,clse-min4  cm4
09:10:44  13  ,clse-min6  cm6
09:10:44  14  ,clse-min8  cm8
09:10:44  15  ,clse-min10 cm10
09:10:44  16  ,clse-min12 cm12
09:10:44  17  ,clse-min14 cm14
09:10:44  18  ,clse-min16 cm16
09:10:44  19  ,clse-min18 cm18
09:10:44  20  -- clse relation to moving-avg
09:10:44  21  ,clse-avg4  ca4
09:10:44  22  ,clse-avg6  ca6
09:10:44  23  ,clse-avg8  ca8
09:10:44  24  ,clse-avg10 ca10
09:10:44  25  ,clse-avg12 ca12
09:10:44  26  ,clse-avg14 ca14
09:10:44  27  ,clse-avg16 ca16
09:10:44  28  ,clse-avg18 ca18
09:10:44  29  -- clse relation to moving-max
09:10:44  30  ,clse-max4  cx4
09:10:44  31  ,clse-max6  cx6
09:10:44  32  ,clse-max8  cx8
09:10:44  33  ,clse-max10 cx10
09:10:44  34  ,clse-max12 cx12
09:10:44  35  ,clse-max14 cx14
09:10:44  36  ,clse-max16 cx16
09:10:44  37  ,clse-max18 cx18
09:10:44  38  -- Derive more attributes.
09:10:44  39  -- I want to use CORR() here to help SVM see the shape of the series.
09:10:44  40  -- But COVAR_POP is more stable:
09:10:44  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
09:10:44  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
09:10:44  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
09:10:44  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
09:10:44  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
09:10:44  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
09:10:44  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
09:10:44  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
09:10:44  49  -- Derive date related attributes:
09:10:44  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
09:10:44  51  ,0+TO_CHAR(ydate,'D')d
09:10:44  52  ,0+TO_CHAR(ydate,'W')w
09:10:44  53  -- mpm stands for minutes-past-midnight:
09:10:44  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
09:10:44  55  -- mph stands for minutes-past-hour:
09:10:44  56  ,0+TO_CHAR(ydate,'MI')mph
09:10:44  57  FROM svm6102
09:10:44  58  ORDER BY ydate
09:10:44  59  /

Table created.

Elapsed: 00:00:02.13
09:10:47 SQL> 
09:10:47 SQL> -- rpt
09:10:47 SQL> 
09:10:47 SQL> SELECT
09:10:47   2  pair
09:10:47   3  ,COUNT(pair)
09:10:47   4  ,MIN(clse),MAX(clse)
09:10:47   5  ,MIN(ydate),MAX(ydate)
09:10:47   6  FROM svm6122
09:10:47   7  GROUP BY pair
09:10:47   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       20734	 .9981	   1.0371 2010-09-15 22:25:01 2010-12-24 21:55:00

Elapsed: 00:00:00.04
09:10:47 SQL> 
09:10:47 SQL> -- Prepare for derivation of NTILE based params:
09:10:47 SQL> 
09:10:47 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.19
09:10:47 SQL> CREATE TABLE svm6142 COMPRESS AS
09:10:47   2  SELECT
09:10:47   3  pair
09:10:47   4  ,ydate
09:10:47   5  ,prdate
09:10:47   6  ,clse
09:10:47   7  ,g6
09:10:47   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
09:10:47   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
09:10:47  10  ,CASE WHEN trend IS NULL THEN 1
09:10:47  11  	    WHEN trend =0      THEN 1
09:10:47  12  	    ELSE trend END trend
09:10:47  13  ,cm4
09:10:47  14  ,cm6
09:10:47  15  ,cm8
09:10:47  16  ,cm10
09:10:47  17  ,cm12
09:10:47  18  ,cm14
09:10:47  19  ,cm16
09:10:47  20  ,cm18
09:10:47  21  --
09:10:47  22  ,ca4
09:10:47  23  ,ca6
09:10:47  24  ,ca8
09:10:47  25  ,ca10
09:10:47  26  ,ca12
09:10:47  27  ,ca14
09:10:47  28  ,ca16
09:10:47  29  ,ca18
09:10:47  30  --
09:10:47  31  ,cx4
09:10:47  32  ,cx6
09:10:47  33  ,cx8
09:10:47  34  ,cx10
09:10:47  35  ,cx12
09:10:47  36  ,cx14
09:10:47  37  ,cx16
09:10:47  38  ,cx18
09:10:47  39  --
09:10:47  40  ,crr4
09:10:47  41  ,crr6
09:10:47  42  ,crr8
09:10:47  43  ,crr10
09:10:47  44  ,crr12
09:10:47  45  ,crr14
09:10:47  46  ,crr16
09:10:47  47  ,crr18
09:10:47  48  --
09:10:47  49  ,hh
09:10:47  50  ,d
09:10:47  51  ,w
09:10:47  52  ,mpm
09:10:47  53  ,mph
09:10:47  54  FROM svm6122
09:10:47  55  ORDER BY ydate
09:10:47  56  /

Table created.

Elapsed: 00:00:00.38
09:10:47 SQL> 
09:10:47 SQL> -- rpt
09:10:47 SQL> 
09:10:47 SQL> SELECT
09:10:47   2  pair
09:10:47   3  ,trend
09:10:47   4  ,gatt
09:10:47   5  ,COUNT(pair)
09:10:47   6  ,AVG(g6)
09:10:47   7  FROM svm6142
09:10:47   8  GROUP BY pair,trend,gatt
09:10:47   9  ORDER BY pair,trend,gatt
09:10:47  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7678 -.00136161
usd_cad 	-1 up	      3375 .003327746
usd_cad 	-1		26
usd_cad 	 1 nup	      7021 -.00163282
usd_cad 	 1 up	      2588 .003590763
usd_cad 	 1		46

6 rows selected.

Elapsed: 00:00:00.04
09:10:47 SQL> 
09:10:47 SQL> 
09:10:47 SQL> -- Derive NTILE based params:
09:10:47 SQL> 
09:10:47 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.14
09:10:47 SQL> CREATE TABLE svm6162 COMPRESS AS
09:10:47   2  SELECT
09:10:47   3  pair
09:10:47   4  ,ydate
09:10:47   5  ,prdate
09:10:47   6  ,clse
09:10:47   7  ,g6
09:10:47   8  ,gatt
09:10:47   9  ,gattn
09:10:47  10  ,trend
09:10:47  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
09:10:47  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
09:10:47  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
09:10:47  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
09:10:47  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
09:10:47  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
09:10:47  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
09:10:47  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
09:10:47  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
09:10:47  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
09:10:47  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
09:10:47  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
09:10:47  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
09:10:47  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
09:10:47  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
09:10:47  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
09:10:47  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
09:10:47  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
09:10:47  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
09:10:47  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
09:10:47  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
09:10:47  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
09:10:47  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
09:10:47  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
09:10:47  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
09:10:47  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
09:10:47  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
09:10:47  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
09:10:47  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
09:10:47  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
09:10:47  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
09:10:47  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
09:10:47  43  ,hh  att32
09:10:47  44  ,d   att33
09:10:47  45  ,w   att34
09:10:47  46  ,mpm att35
09:10:47  47  ,mph att36
09:10:47  48  ,trend att37
09:10:47  49  FROM svm6142
09:10:47  50  ORDER BY ydate
09:10:47  51  /

Table created.

Elapsed: 00:00:05.01
09:10:52 SQL> 
09:10:52 SQL> -- rpt
09:10:52 SQL> 
09:10:52 SQL> SELECT
09:10:52   2  pair
09:10:52   3  ,trend
09:10:52   4  ,gatt
09:10:52   5  ,COUNT(pair)
09:10:52   6  ,AVG(g6)
09:10:52   7  FROM svm6162
09:10:52   8  GROUP BY pair,trend,gatt
09:10:52   9  ORDER BY pair,trend,gatt
09:10:52  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7678 -.00136161
usd_cad 	-1 up	      3375 .003327746
usd_cad 	-1		26
usd_cad 	 1 nup	      7021 -.00163282
usd_cad 	 1 up	      2588 .003590763
usd_cad 	 1		46

6 rows selected.

Elapsed: 00:00:00.02
09:10:52 SQL> 
09:10:52 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.20
09:10:53 SQL> CREATE TABLE modsrc COMPRESS AS
09:10:53   2  SELECT
09:10:53   3  pair
09:10:53   4  ,ydate
09:10:53   5  ,prdate
09:10:53   6  ,trend
09:10:53   7  ,g6
09:10:53   8  ,gatt
09:10:53   9  ,gattn
09:10:53  10  FROM svm6162
09:10:53  11  /

Table created.

Elapsed: 00:00:00.09
09:10:53 SQL> 
09:10:53 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
09:10:53 SQL> 
09:10:53 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
09:10:53 SQL> CREATE TABLE cad_ms610 COMPRESS AS
09:10:53   2  SELECT
09:10:53   3  ydate
09:10:53   4  ,trend cad_trend
09:10:53   5  ,g6    cad_g6
09:10:53   6  ,gatt  cad_gatt
09:10:53   7  ,gattn cad_gattn
09:10:53   8  FROM modsrc
09:10:53   9  /

Table created.

Elapsed: 00:00:00.06
09:10:53 SQL> 
09:10:53 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
09:10:53 SQL> 
09:10:53 SQL> -- I need a copy of the attributes:
09:10:53 SQL> 
09:10:53 SQL> 
09:10:53 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.04
09:10:53 SQL> CREATE TABLE cad_att COMPRESS AS
09:10:53   2  SELECT
09:10:53   3  ydate
09:10:53   4  ,att00 cad_att00
09:10:53   5  ,att01 cad_att01
09:10:53   6  ,att02 cad_att02
09:10:53   7  ,att03 cad_att03
09:10:53   8  ,att04 cad_att04
09:10:53   9  ,att05 cad_att05
09:10:53  10  ,att06 cad_att06
09:10:53  11  ,att07 cad_att07
09:10:53  12  ,att08 cad_att08
09:10:53  13  ,att09 cad_att09
09:10:53  14  ,att10 cad_att10
09:10:53  15  ,att11 cad_att11
09:10:53  16  ,att12 cad_att12
09:10:53  17  ,att13 cad_att13
09:10:53  18  ,att14 cad_att14
09:10:53  19  ,att15 cad_att15
09:10:53  20  ,att16 cad_att16
09:10:53  21  ,att17 cad_att17
09:10:53  22  ,att18 cad_att18
09:10:53  23  ,att19 cad_att19
09:10:53  24  ,att20 cad_att20
09:10:53  25  ,att21 cad_att21
09:10:53  26  ,att22 cad_att22
09:10:53  27  ,att23 cad_att23
09:10:53  28  ,att24 cad_att24
09:10:53  29  ,att25 cad_att25
09:10:53  30  ,att26 cad_att26
09:10:53  31  ,att27 cad_att27
09:10:53  32  ,att28 cad_att28
09:10:53  33  ,att29 cad_att29
09:10:53  34  ,att30 cad_att30
09:10:53  35  ,att31 cad_att31
09:10:53  36  ,att32 cad_att32
09:10:53  37  ,att33 cad_att33
09:10:53  38  ,att34 cad_att34
09:10:53  39  ,att35 cad_att35
09:10:53  40  ,att36 cad_att36
09:10:53  41  ,att37 cad_att37
09:10:53  42  FROM svm6162
09:10:53  43  /

Table created.

Elapsed: 00:00:00.19
09:10:53 SQL> 
09:10:53 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
09:10:54 SQL> 
09:10:54 SQL> -- rpt
09:10:54 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     20734

Elapsed: 00:00:00.85
09:10:55 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     20734

Elapsed: 00:00:00.00
09:10:55 SQL> 
09:10:55 SQL> --
09:10:55 SQL> -- chf610.sql
09:10:55 SQL> --
09:10:55 SQL> 
09:10:55 SQL> -- Creates views and tables for backtesting a forex SVM strategy
09:10:55 SQL> 
09:10:55 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
09:10:55 SQL> 
09:10:55 SQL> -- I created di5min here:
09:10:55 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
09:10:55 SQL> 
09:10:55 SQL> CREATE OR REPLACE VIEW svm6102 AS
09:10:55   2  SELECT
09:10:55   3  pair
09:10:55   4  ,ydate
09:10:55   5  ,prdate
09:10:55   6  ,rownum rnum -- acts as t in my time-series
09:10:55   7  ,clse
09:10:55   8  -- Derive a bunch of attributes from clse, the latest price:
09:10:55   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
09:10:55  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
09:10:55  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
09:10:55  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
09:10:55  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
09:10:55  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
09:10:55  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
09:10:55  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
09:10:55  17  --
09:10:55  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
09:10:55  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
09:10:55  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
09:10:55  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
09:10:55  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
09:10:55  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
09:10:55  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
09:10:55  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
09:10:55  26  --
09:10:55  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
09:10:55  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
09:10:55  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
09:10:55  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
09:10:55  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
09:10:55  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
09:10:55  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
09:10:55  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
09:10:55  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
09:10:55  36  FROM di5min WHERE pair LIKE'%chf%'
09:10:55  37  ORDER BY ydate
09:10:55  38  /

View created.

Elapsed: 00:00:00.08
09:10:55 SQL> 
09:10:55 SQL> -- rpt
09:10:55 SQL> 
09:10:55 SQL> SELECT
09:10:55   2  pair
09:10:55   3  ,COUNT(pair)
09:10:55   4  ,MIN(clse),MAX(clse)
09:10:55   5  ,MIN(avg6),MAX(avg6)
09:10:55   6  ,MIN(ydate),MAX(ydate)
09:10:55   7  FROM svm6102
09:10:55   8  GROUP BY pair
09:10:55   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       20737	 .9471	   1.0177 .950038356 1.01613699 2010-09-15 22:25:01 2010-12-24 21:55:00

Elapsed: 00:00:00.86
09:10:56 SQL> 
09:10:56 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
09:10:56 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.25
09:10:56 SQL> CREATE TABLE svm6122 COMPRESS AS
09:10:56   2  SELECT
09:10:56   3  pair
09:10:56   4  ,ydate
09:10:56   5  ,prdate
09:10:56   6  ,clse
09:10:56   7  -- g6 is important. I want to predict g6:
09:10:56   8  ,ld6 - clse g6
09:10:56   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
09:10:56  10  -- I want more attributes from the ones I derived above:
09:10:56  11  -- clse relation to moving-min
09:10:56  12  ,clse-min4  cm4
09:10:56  13  ,clse-min6  cm6
09:10:56  14  ,clse-min8  cm8
09:10:56  15  ,clse-min10 cm10
09:10:56  16  ,clse-min12 cm12
09:10:56  17  ,clse-min14 cm14
09:10:56  18  ,clse-min16 cm16
09:10:56  19  ,clse-min18 cm18
09:10:56  20  -- clse relation to moving-avg
09:10:56  21  ,clse-avg4  ca4
09:10:56  22  ,clse-avg6  ca6
09:10:56  23  ,clse-avg8  ca8
09:10:56  24  ,clse-avg10 ca10
09:10:56  25  ,clse-avg12 ca12
09:10:56  26  ,clse-avg14 ca14
09:10:56  27  ,clse-avg16 ca16
09:10:56  28  ,clse-avg18 ca18
09:10:56  29  -- clse relation to moving-max
09:10:56  30  ,clse-max4  cx4
09:10:56  31  ,clse-max6  cx6
09:10:56  32  ,clse-max8  cx8
09:10:56  33  ,clse-max10 cx10
09:10:56  34  ,clse-max12 cx12
09:10:56  35  ,clse-max14 cx14
09:10:56  36  ,clse-max16 cx16
09:10:56  37  ,clse-max18 cx18
09:10:56  38  -- Derive more attributes.
09:10:56  39  -- I want to use CORR() here to help SVM see the shape of the series.
09:10:56  40  -- But COVAR_POP is more stable:
09:10:56  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
09:10:56  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
09:10:56  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
09:10:56  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
09:10:56  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
09:10:56  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
09:10:56  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
09:10:56  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
09:10:56  49  -- Derive date related attributes:
09:10:56  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
09:10:56  51  ,0+TO_CHAR(ydate,'D')d
09:10:56  52  ,0+TO_CHAR(ydate,'W')w
09:10:56  53  -- mpm stands for minutes-past-midnight:
09:10:56  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
09:10:56  55  -- mph stands for minutes-past-hour:
09:10:56  56  ,0+TO_CHAR(ydate,'MI')mph
09:10:56  57  FROM svm6102
09:10:56  58  ORDER BY ydate
09:10:56  59  /

Table created.

Elapsed: 00:00:02.13
09:10:58 SQL> 
09:10:58 SQL> -- rpt
09:10:58 SQL> 
09:10:58 SQL> SELECT
09:10:58   2  pair
09:10:58   3  ,COUNT(pair)
09:10:58   4  ,MIN(clse),MAX(clse)
09:10:58   5  ,MIN(ydate),MAX(ydate)
09:10:58   6  FROM svm6122
09:10:58   7  GROUP BY pair
09:10:58   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       20737	 .9471	   1.0177 2010-09-15 22:25:01 2010-12-24 21:55:00

Elapsed: 00:00:00.04
09:10:58 SQL> 
09:10:58 SQL> -- Prepare for derivation of NTILE based params:
09:10:58 SQL> 
09:10:58 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.24
09:10:59 SQL> CREATE TABLE svm6142 COMPRESS AS
09:10:59   2  SELECT
09:10:59   3  pair
09:10:59   4  ,ydate
09:10:59   5  ,prdate
09:10:59   6  ,clse
09:10:59   7  ,g6
09:10:59   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
09:10:59   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
09:10:59  10  ,CASE WHEN trend IS NULL THEN 1
09:10:59  11  	    WHEN trend =0      THEN 1
09:10:59  12  	    ELSE trend END trend
09:10:59  13  ,cm4
09:10:59  14  ,cm6
09:10:59  15  ,cm8
09:10:59  16  ,cm10
09:10:59  17  ,cm12
09:10:59  18  ,cm14
09:10:59  19  ,cm16
09:10:59  20  ,cm18
09:10:59  21  --
09:10:59  22  ,ca4
09:10:59  23  ,ca6
09:10:59  24  ,ca8
09:10:59  25  ,ca10
09:10:59  26  ,ca12
09:10:59  27  ,ca14
09:10:59  28  ,ca16
09:10:59  29  ,ca18
09:10:59  30  --
09:10:59  31  ,cx4
09:10:59  32  ,cx6
09:10:59  33  ,cx8
09:10:59  34  ,cx10
09:10:59  35  ,cx12
09:10:59  36  ,cx14
09:10:59  37  ,cx16
09:10:59  38  ,cx18
09:10:59  39  --
09:10:59  40  ,crr4
09:10:59  41  ,crr6
09:10:59  42  ,crr8
09:10:59  43  ,crr10
09:10:59  44  ,crr12
09:10:59  45  ,crr14
09:10:59  46  ,crr16
09:10:59  47  ,crr18
09:10:59  48  --
09:10:59  49  ,hh
09:10:59  50  ,d
09:10:59  51  ,w
09:10:59  52  ,mpm
09:10:59  53  ,mph
09:10:59  54  FROM svm6122
09:10:59  55  ORDER BY ydate
09:10:59  56  /

Table created.

Elapsed: 00:00:00.38
09:10:59 SQL> 
09:10:59 SQL> -- rpt
09:10:59 SQL> 
09:10:59 SQL> SELECT
09:10:59   2  pair
09:10:59   3  ,trend
09:10:59   4  ,gatt
09:10:59   5  ,COUNT(pair)
09:10:59   6  ,AVG(g6)
09:10:59   7  FROM svm6142
09:10:59   8  GROUP BY pair,trend,gatt
09:10:59   9  ORDER BY pair,trend,gatt
09:10:59  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7524 -.00182455
usd_chf 	-1 up	      3335 .003944738
usd_chf 	-1		20
usd_chf 	 1 nup	      7122 -.00171477
usd_chf 	 1 up	      2684 .003708453
usd_chf 	 1		52

6 rows selected.

Elapsed: 00:00:00.04
09:10:59 SQL> 
09:10:59 SQL> 
09:10:59 SQL> -- Derive NTILE based params:
09:10:59 SQL> 
09:10:59 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
09:10:59 SQL> CREATE TABLE svm6162 COMPRESS AS
09:10:59   2  SELECT
09:10:59   3  pair
09:10:59   4  ,ydate
09:10:59   5  ,prdate
09:10:59   6  ,clse
09:10:59   7  ,g6
09:10:59   8  ,gatt
09:10:59   9  ,gattn
09:10:59  10  ,trend
09:10:59  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
09:10:59  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
09:10:59  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
09:10:59  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
09:10:59  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
09:10:59  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
09:10:59  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
09:10:59  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
09:10:59  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
09:10:59  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
09:10:59  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
09:10:59  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
09:10:59  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
09:10:59  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
09:10:59  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
09:10:59  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
09:10:59  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
09:10:59  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
09:10:59  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
09:10:59  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
09:10:59  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
09:10:59  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
09:10:59  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
09:10:59  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
09:10:59  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
09:10:59  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
09:10:59  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
09:10:59  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
09:10:59  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
09:10:59  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
09:10:59  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
09:10:59  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
09:10:59  43  ,hh  att32
09:10:59  44  ,d   att33
09:10:59  45  ,w   att34
09:10:59  46  ,mpm att35
09:10:59  47  ,mph att36
09:10:59  48  ,trend att37
09:10:59  49  FROM svm6142
09:10:59  50  ORDER BY ydate
09:10:59  51  /

Table created.

Elapsed: 00:00:05.01
09:11:04 SQL> 
09:11:04 SQL> -- rpt
09:11:04 SQL> 
09:11:04 SQL> SELECT
09:11:04   2  pair
09:11:04   3  ,trend
09:11:04   4  ,gatt
09:11:04   5  ,COUNT(pair)
09:11:04   6  ,AVG(g6)
09:11:04   7  FROM svm6162
09:11:04   8  GROUP BY pair,trend,gatt
09:11:04   9  ORDER BY pair,trend,gatt
09:11:04  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7524 -.00182455
usd_chf 	-1 up	      3335 .003944738
usd_chf 	-1		20
usd_chf 	 1 nup	      7122 -.00171477
usd_chf 	 1 up	      2684 .003708453
usd_chf 	 1		52

6 rows selected.

Elapsed: 00:00:00.02
09:11:04 SQL> 
09:11:04 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
09:11:04 SQL> CREATE TABLE modsrc COMPRESS AS
09:11:04   2  SELECT
09:11:04   3  pair
09:11:04   4  ,ydate
09:11:04   5  ,prdate
09:11:04   6  ,trend
09:11:04   7  ,g6
09:11:04   8  ,gatt
09:11:04   9  ,gattn
09:11:04  10  FROM svm6162
09:11:04  11  /

Table created.

Elapsed: 00:00:00.10
09:11:05 SQL> 
09:11:05 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.28
09:11:05 SQL> 
09:11:05 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
09:11:05 SQL> CREATE TABLE chf_ms610 COMPRESS AS
09:11:05   2  SELECT
09:11:05   3  ydate
09:11:05   4  ,trend chf_trend
09:11:05   5  ,g6    chf_g6
09:11:05   6  ,gatt  chf_gatt
09:11:05   7  ,gattn chf_gattn
09:11:05   8  FROM modsrc
09:11:05   9  /

Table created.

Elapsed: 00:00:00.07
09:11:05 SQL> 
09:11:05 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
09:11:05 SQL> 
09:11:05 SQL> -- I need a copy of the attributes:
09:11:05 SQL> 
09:11:05 SQL> 
09:11:05 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.05
09:11:05 SQL> CREATE TABLE chf_att COMPRESS AS
09:11:05   2  SELECT
09:11:05   3  ydate
09:11:05   4  ,att00 chf_att00
09:11:05   5  ,att01 chf_att01
09:11:05   6  ,att02 chf_att02
09:11:05   7  ,att03 chf_att03
09:11:05   8  ,att04 chf_att04
09:11:05   9  ,att05 chf_att05
09:11:05  10  ,att06 chf_att06
09:11:05  11  ,att07 chf_att07
09:11:05  12  ,att08 chf_att08
09:11:05  13  ,att09 chf_att09
09:11:05  14  ,att10 chf_att10
09:11:05  15  ,att11 chf_att11
09:11:05  16  ,att12 chf_att12
09:11:05  17  ,att13 chf_att13
09:11:05  18  ,att14 chf_att14
09:11:05  19  ,att15 chf_att15
09:11:05  20  ,att16 chf_att16
09:11:05  21  ,att17 chf_att17
09:11:05  22  ,att18 chf_att18
09:11:05  23  ,att19 chf_att19
09:11:05  24  ,att20 chf_att20
09:11:05  25  ,att21 chf_att21
09:11:05  26  ,att22 chf_att22
09:11:05  27  ,att23 chf_att23
09:11:05  28  ,att24 chf_att24
09:11:05  29  ,att25 chf_att25
09:11:05  30  ,att26 chf_att26
09:11:05  31  ,att27 chf_att27
09:11:05  32  ,att28 chf_att28
09:11:05  33  ,att29 chf_att29
09:11:05  34  ,att30 chf_att30
09:11:05  35  ,att31 chf_att31
09:11:05  36  ,att32 chf_att32
09:11:05  37  ,att33 chf_att33
09:11:05  38  ,att34 chf_att34
09:11:05  39  ,att35 chf_att35
09:11:05  40  ,att36 chf_att36
09:11:05  41  ,att37 chf_att37
09:11:05  42  FROM svm6162
09:11:05  43  /

Table created.

Elapsed: 00:00:00.16
09:11:05 SQL> 
09:11:05 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
09:11:06 SQL> 
09:11:06 SQL> -- rpt
09:11:06 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     20737

Elapsed: 00:00:00.85
09:11:07 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     20737

Elapsed: 00:00:00.00
09:11:07 SQL> 
09:11:07 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
