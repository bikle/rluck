
SQL*Plus: Release 11.2.0.1.0 Production on Fri Dec 31 07:15:21 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

07:15:21 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.01
07:15:21 SQL> 07:15:21 SQL> --
07:15:21 SQL> -- eur610.sql
07:15:21 SQL> --
07:15:21 SQL> 
07:15:21 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:15:21 SQL> 
07:15:21 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.00
07:15:21 SQL> 
07:15:21 SQL> -- I created di5min here:
07:15:21 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:15:21 SQL> 
07:15:21 SQL> CREATE OR REPLACE VIEW svm6102 AS
07:15:21   2  SELECT
07:15:21   3  pair
07:15:21   4  ,ydate
07:15:21   5  ,prdate
07:15:21   6  ,rownum rnum -- acts as t in my time-series
07:15:21   7  ,clse
07:15:21   8  -- Derive a bunch of attributes from clse, the latest price:
07:15:21   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
07:15:21  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
07:15:21  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
07:15:21  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
07:15:21  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
07:15:21  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
07:15:21  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
07:15:21  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
07:15:21  17  --
07:15:21  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
07:15:21  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
07:15:21  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
07:15:21  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
07:15:21  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
07:15:21  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
07:15:21  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
07:15:21  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
07:15:21  26  --
07:15:21  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
07:15:21  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
07:15:21  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
07:15:21  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
07:15:21  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
07:15:21  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
07:15:21  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
07:15:21  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
07:15:21  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
07:15:21  36  FROM di5min WHERE pair LIKE'%eur%'
07:15:21  37  AND ydate > sysdate - 95
07:15:21  38  ORDER BY ydate
07:15:21  39  /

View created.

Elapsed: 00:00:00.05
07:15:21 SQL> 
07:15:21 SQL> -- rpt
07:15:21 SQL> 
07:15:21 SQL> SELECT
07:15:21   2  pair
07:15:21   3  ,COUNT(pair)
07:15:21   4  ,MIN(clse),MAX(clse)
07:15:21   5  ,MIN(avg6),MAX(avg6)
07:15:21   6  ,MIN(ydate),MAX(ydate)
07:15:21   7  FROM svm6102
07:15:21   8  GROUP BY pair
07:15:21   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19838    1.29735	   1.4273 1.29875103 1.42436233 2010-09-27 07:20:01 2010-12-31 07:10:00

Elapsed: 00:00:00.96
07:15:22 SQL> 
07:15:22 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
07:15:22 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.04
07:15:22 SQL> CREATE TABLE svm6122 COMPRESS AS
07:15:22   2  SELECT
07:15:22   3  pair
07:15:22   4  ,ydate
07:15:22   5  ,prdate
07:15:22   6  ,clse
07:15:22   7  -- g6 is important. I want to predict g6:
07:15:22   8  ,ld6 - clse g6
07:15:22   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
07:15:22  10  -- I want more attributes from the ones I derived above:
07:15:22  11  -- clse relation to moving-min
07:15:22  12  ,clse-min4  cm4
07:15:22  13  ,clse-min6  cm6
07:15:22  14  ,clse-min8  cm8
07:15:22  15  ,clse-min10 cm10
07:15:22  16  ,clse-min12 cm12
07:15:22  17  ,clse-min14 cm14
07:15:22  18  ,clse-min16 cm16
07:15:22  19  ,clse-min18 cm18
07:15:22  20  -- clse relation to moving-avg
07:15:22  21  ,clse-avg4  ca4
07:15:22  22  ,clse-avg6  ca6
07:15:22  23  ,clse-avg8  ca8
07:15:22  24  ,clse-avg10 ca10
07:15:22  25  ,clse-avg12 ca12
07:15:22  26  ,clse-avg14 ca14
07:15:22  27  ,clse-avg16 ca16
07:15:22  28  ,clse-avg18 ca18
07:15:22  29  -- clse relation to moving-max
07:15:22  30  ,clse-max4  cx4
07:15:22  31  ,clse-max6  cx6
07:15:22  32  ,clse-max8  cx8
07:15:22  33  ,clse-max10 cx10
07:15:22  34  ,clse-max12 cx12
07:15:22  35  ,clse-max14 cx14
07:15:22  36  ,clse-max16 cx16
07:15:22  37  ,clse-max18 cx18
07:15:22  38  -- Derive more attributes.
07:15:22  39  -- I want to use CORR() here to help SVM see the shape of the series.
07:15:22  40  -- But COVAR_POP is more stable:
07:15:22  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
07:15:22  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:15:22  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:15:22  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:15:22  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:15:22  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:15:22  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:15:22  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:15:22  49  -- Derive date related attributes:
07:15:22  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:15:22  51  ,0+TO_CHAR(ydate,'D')d
07:15:22  52  ,0+TO_CHAR(ydate,'W')w
07:15:22  53  -- mpm stands for minutes-past-midnight:
07:15:22  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:15:22  55  -- mph stands for minutes-past-hour:
07:15:22  56  ,0+TO_CHAR(ydate,'MI')mph
07:15:22  57  FROM svm6102
07:15:22  58  ORDER BY ydate
07:15:22  59  /

Table created.

Elapsed: 00:00:02.37
07:15:24 SQL> 
07:15:24 SQL> -- rpt
07:15:24 SQL> 
07:15:24 SQL> SELECT
07:15:24   2  pair
07:15:24   3  ,COUNT(pair)
07:15:24   4  ,MIN(clse),MAX(clse)
07:15:24   5  ,MIN(ydate),MAX(ydate)
07:15:24   6  FROM svm6122
07:15:24   7  GROUP BY pair
07:15:24   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19838    1.29735	   1.4273 2010-09-27 07:20:01 2010-12-31 07:10:00

Elapsed: 00:00:00.06
07:15:24 SQL> 
07:15:24 SQL> -- Prepare for derivation of NTILE based params:
07:15:24 SQL> 
07:15:24 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.76
07:15:25 SQL> CREATE TABLE svm6142 COMPRESS AS
07:15:25   2  SELECT
07:15:25   3  pair
07:15:25   4  ,ydate
07:15:25   5  ,prdate
07:15:25   6  ,clse
07:15:25   7  ,g6
07:15:25   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
07:15:25   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
07:15:25  10  ,CASE WHEN trend IS NULL THEN 1
07:15:25  11  	    WHEN trend =0      THEN 1
07:15:25  12  	    ELSE trend END trend
07:15:25  13  ,cm4
07:15:25  14  ,cm6
07:15:25  15  ,cm8
07:15:25  16  ,cm10
07:15:25  17  ,cm12
07:15:25  18  ,cm14
07:15:25  19  ,cm16
07:15:25  20  ,cm18
07:15:25  21  --
07:15:25  22  ,ca4
07:15:25  23  ,ca6
07:15:25  24  ,ca8
07:15:25  25  ,ca10
07:15:25  26  ,ca12
07:15:25  27  ,ca14
07:15:25  28  ,ca16
07:15:25  29  ,ca18
07:15:25  30  --
07:15:25  31  ,cx4
07:15:25  32  ,cx6
07:15:25  33  ,cx8
07:15:25  34  ,cx10
07:15:25  35  ,cx12
07:15:25  36  ,cx14
07:15:25  37  ,cx16
07:15:25  38  ,cx18
07:15:25  39  --
07:15:25  40  ,crr4
07:15:25  41  ,crr6
07:15:25  42  ,crr8
07:15:25  43  ,crr10
07:15:25  44  ,crr12
07:15:25  45  ,crr14
07:15:25  46  ,crr16
07:15:25  47  ,crr18
07:15:25  48  --
07:15:25  49  ,hh
07:15:25  50  ,d
07:15:25  51  ,w
07:15:25  52  ,mpm
07:15:25  53  ,mph
07:15:25  54  FROM svm6122
07:15:25  55  ORDER BY ydate
07:15:25  56  /

Table created.

Elapsed: 00:00:00.37
07:15:25 SQL> 
07:15:25 SQL> -- rpt
07:15:25 SQL> 
07:15:25 SQL> SELECT
07:15:25   2  pair
07:15:25   3  ,trend
07:15:25   4  ,gatt
07:15:25   5  ,COUNT(pair)
07:15:25   6  ,AVG(g6)
07:15:25   7  FROM svm6142
07:15:25   8  GROUP BY pair,trend,gatt
07:15:25   9  ORDER BY pair,trend,gatt
07:15:25  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6052 -.00310454
eur_usd 	-1 up	      3729 .004503604
eur_usd 	 1 nup	      6092 -.00306882
eur_usd 	 1 up	      3893 .005025411
eur_usd 	 1		72

Elapsed: 00:00:00.05
07:15:25 SQL> 
07:15:25 SQL> 
07:15:25 SQL> -- Derive NTILE based params:
07:15:25 SQL> 
07:15:25 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.68
07:15:26 SQL> CREATE TABLE svm6162 COMPRESS AS
07:15:26   2  SELECT
07:15:26   3  pair
07:15:26   4  ,ydate
07:15:26   5  ,prdate
07:15:26   6  ,clse
07:15:26   7  ,g6
07:15:26   8  ,gatt
07:15:26   9  ,gattn
07:15:26  10  ,trend
07:15:26  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
07:15:26  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
07:15:26  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
07:15:26  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
07:15:26  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
07:15:26  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
07:15:26  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
07:15:26  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
07:15:26  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
07:15:26  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
07:15:26  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
07:15:26  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
07:15:26  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
07:15:26  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
07:15:26  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
07:15:26  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
07:15:26  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
07:15:26  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
07:15:26  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
07:15:26  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
07:15:26  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
07:15:26  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
07:15:26  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
07:15:26  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
07:15:26  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
07:15:26  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
07:15:26  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
07:15:26  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
07:15:26  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
07:15:26  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
07:15:26  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
07:15:26  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
07:15:26  43  ,hh  att32
07:15:26  44  ,d   att33
07:15:26  45  ,w   att34
07:15:26  46  ,mpm att35
07:15:26  47  ,mph att36
07:15:26  48  ,trend att37
07:15:26  49  FROM svm6142
07:15:26  50  ORDER BY ydate
07:15:26  51  /

Table created.

Elapsed: 00:00:04.80
07:15:31 SQL> 
07:15:31 SQL> -- rpt
07:15:31 SQL> 
07:15:31 SQL> SELECT
07:15:31   2  pair
07:15:31   3  ,trend
07:15:31   4  ,gatt
07:15:31   5  ,COUNT(pair)
07:15:31   6  ,AVG(g6)
07:15:31   7  FROM svm6162
07:15:31   8  GROUP BY pair,trend,gatt
07:15:31   9  ORDER BY pair,trend,gatt
07:15:31  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6052 -.00310454
eur_usd 	-1 up	      3729 .004503604
eur_usd 	 1 nup	      6092 -.00306882
eur_usd 	 1 up	      3893 .005025411
eur_usd 	 1		72

Elapsed: 00:00:00.02
07:15:31 SQL> 
07:15:31 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.20
07:15:31 SQL> CREATE TABLE modsrc COMPRESS AS
07:15:31   2  SELECT
07:15:31   3  pair
07:15:31   4  ,ydate
07:15:31   5  ,prdate
07:15:31   6  ,trend
07:15:31   7  ,g6
07:15:31   8  ,gatt
07:15:31   9  ,gattn
07:15:31  10  FROM svm6162
07:15:31  11  /

Table created.

Elapsed: 00:00:00.10
07:15:31 SQL> 
07:15:31 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.25
07:15:31 SQL> 
07:15:31 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
07:15:31 SQL> CREATE TABLE eur_ms610 COMPRESS AS
07:15:31   2  SELECT
07:15:31   3  ydate
07:15:31   4  ,trend eur_trend
07:15:31   5  ,g6    eur_g6
07:15:31   6  ,gatt  eur_gatt
07:15:31   7  ,gattn eur_gattn
07:15:31   8  FROM modsrc
07:15:31   9  /

Table created.

Elapsed: 00:00:00.06
07:15:32 SQL> 
07:15:32 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
07:15:32 SQL> 
07:15:32 SQL> -- I need a copy of the attributes:
07:15:32 SQL> 
07:15:32 SQL> 
07:15:32 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.05
07:15:32 SQL> CREATE TABLE eur_att COMPRESS AS
07:15:32   2  SELECT
07:15:32   3  ydate
07:15:32   4  ,att00 eur_att00
07:15:32   5  ,att01 eur_att01
07:15:32   6  ,att02 eur_att02
07:15:32   7  ,att03 eur_att03
07:15:32   8  ,att04 eur_att04
07:15:32   9  ,att05 eur_att05
07:15:32  10  ,att06 eur_att06
07:15:32  11  ,att07 eur_att07
07:15:32  12  ,att08 eur_att08
07:15:32  13  ,att09 eur_att09
07:15:32  14  ,att10 eur_att10
07:15:32  15  ,att11 eur_att11
07:15:32  16  ,att12 eur_att12
07:15:32  17  ,att13 eur_att13
07:15:32  18  ,att14 eur_att14
07:15:32  19  ,att15 eur_att15
07:15:32  20  ,att16 eur_att16
07:15:32  21  ,att17 eur_att17
07:15:32  22  ,att18 eur_att18
07:15:32  23  ,att19 eur_att19
07:15:32  24  ,att20 eur_att20
07:15:32  25  ,att21 eur_att21
07:15:32  26  ,att22 eur_att22
07:15:32  27  ,att23 eur_att23
07:15:32  28  ,att24 eur_att24
07:15:32  29  ,att25 eur_att25
07:15:32  30  ,att26 eur_att26
07:15:32  31  ,att27 eur_att27
07:15:32  32  ,att28 eur_att28
07:15:32  33  ,att29 eur_att29
07:15:32  34  ,att30 eur_att30
07:15:32  35  ,att31 eur_att31
07:15:32  36  ,att32 eur_att32
07:15:32  37  ,att33 eur_att33
07:15:32  38  ,att34 eur_att34
07:15:32  39  ,att35 eur_att35
07:15:32  40  ,att36 eur_att36
07:15:32  41  ,att37 eur_att37
07:15:32  42  FROM svm6162
07:15:32  43  /

Table created.

Elapsed: 00:00:00.17
07:15:32 SQL> 
07:15:32 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
07:15:32 SQL> 
07:15:32 SQL> -- rpt
07:15:32 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19838

Elapsed: 00:00:00.92
07:15:33 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19838

Elapsed: 00:00:00.00
07:15:33 SQL> 
07:15:33 SQL> --
07:15:33 SQL> -- aud610.sql
07:15:33 SQL> --
07:15:33 SQL> 
07:15:33 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:15:33 SQL> 
07:15:33 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.42
07:15:34 SQL> 
07:15:34 SQL> -- I created di5min here:
07:15:34 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:15:34 SQL> 
07:15:34 SQL> CREATE OR REPLACE VIEW svm6102 AS
07:15:34   2  SELECT
07:15:34   3  pair
07:15:34   4  ,ydate
07:15:34   5  ,prdate
07:15:34   6  ,rownum rnum -- acts as t in my time-series
07:15:34   7  ,clse
07:15:34   8  -- Derive a bunch of attributes from clse, the latest price:
07:15:34   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
07:15:34  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
07:15:34  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
07:15:34  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
07:15:34  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
07:15:34  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
07:15:34  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
07:15:34  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
07:15:34  17  --
07:15:34  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
07:15:34  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
07:15:34  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
07:15:34  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
07:15:34  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
07:15:34  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
07:15:34  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
07:15:34  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
07:15:34  26  --
07:15:34  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
07:15:34  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
07:15:34  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
07:15:34  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
07:15:34  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
07:15:34  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
07:15:34  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
07:15:34  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
07:15:34  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
07:15:34  36  FROM di5min WHERE pair LIKE'%aud%'
07:15:34  37  AND ydate > sysdate - 95
07:15:34  38  ORDER BY ydate
07:15:34  39  /

View created.

Elapsed: 00:00:00.07
07:15:34 SQL> 
07:15:34 SQL> -- rpt
07:15:34 SQL> 
07:15:34 SQL> SELECT
07:15:34   2  pair
07:15:34   3  ,COUNT(pair)
07:15:34   4  ,MIN(clse),MAX(clse)
07:15:34   5  ,MIN(avg6),MAX(avg6)
07:15:34   6  ,MIN(ydate),MAX(ydate)
07:15:34   7  FROM svm6102
07:15:34   8  GROUP BY pair
07:15:34   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19835	.95405	1.0195625 .957141438 1.01819366 2010-09-27 07:20:01 2010-12-31 07:10:00

Elapsed: 00:00:00.89
07:15:35 SQL> 
07:15:35 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
07:15:35 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.18
07:15:35 SQL> CREATE TABLE svm6122 COMPRESS AS
07:15:35   2  SELECT
07:15:35   3  pair
07:15:35   4  ,ydate
07:15:35   5  ,prdate
07:15:35   6  ,clse
07:15:35   7  -- g6 is important. I want to predict g6:
07:15:35   8  ,ld6 - clse g6
07:15:35   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
07:15:35  10  -- I want more attributes from the ones I derived above:
07:15:35  11  -- clse relation to moving-min
07:15:35  12  ,clse-min4  cm4
07:15:35  13  ,clse-min6  cm6
07:15:35  14  ,clse-min8  cm8
07:15:35  15  ,clse-min10 cm10
07:15:35  16  ,clse-min12 cm12
07:15:35  17  ,clse-min14 cm14
07:15:35  18  ,clse-min16 cm16
07:15:35  19  ,clse-min18 cm18
07:15:35  20  -- clse relation to moving-avg
07:15:35  21  ,clse-avg4  ca4
07:15:35  22  ,clse-avg6  ca6
07:15:35  23  ,clse-avg8  ca8
07:15:35  24  ,clse-avg10 ca10
07:15:35  25  ,clse-avg12 ca12
07:15:35  26  ,clse-avg14 ca14
07:15:35  27  ,clse-avg16 ca16
07:15:35  28  ,clse-avg18 ca18
07:15:35  29  -- clse relation to moving-max
07:15:35  30  ,clse-max4  cx4
07:15:35  31  ,clse-max6  cx6
07:15:35  32  ,clse-max8  cx8
07:15:35  33  ,clse-max10 cx10
07:15:35  34  ,clse-max12 cx12
07:15:35  35  ,clse-max14 cx14
07:15:35  36  ,clse-max16 cx16
07:15:35  37  ,clse-max18 cx18
07:15:35  38  -- Derive more attributes.
07:15:35  39  -- I want to use CORR() here to help SVM see the shape of the series.
07:15:35  40  -- But COVAR_POP is more stable:
07:15:35  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
07:15:35  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:15:35  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:15:35  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:15:35  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:15:35  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:15:35  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:15:35  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:15:35  49  -- Derive date related attributes:
07:15:35  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:15:35  51  ,0+TO_CHAR(ydate,'D')d
07:15:35  52  ,0+TO_CHAR(ydate,'W')w
07:15:35  53  -- mpm stands for minutes-past-midnight:
07:15:35  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:15:35  55  -- mph stands for minutes-past-hour:
07:15:35  56  ,0+TO_CHAR(ydate,'MI')mph
07:15:35  57  FROM svm6102
07:15:35  58  ORDER BY ydate
07:15:35  59  /

Table created.

Elapsed: 00:00:02.09
07:15:37 SQL> 
07:15:37 SQL> -- rpt
07:15:37 SQL> 
07:15:37 SQL> SELECT
07:15:37   2  pair
07:15:37   3  ,COUNT(pair)
07:15:37   4  ,MIN(clse),MAX(clse)
07:15:37   5  ,MIN(ydate),MAX(ydate)
07:15:37   6  FROM svm6122
07:15:37   7  GROUP BY pair
07:15:37   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19835	.95405	1.0195625 2010-09-27 07:20:01 2010-12-31 07:10:00

Elapsed: 00:00:00.07
07:15:37 SQL> 
07:15:37 SQL> -- Prepare for derivation of NTILE based params:
07:15:37 SQL> 
07:15:37 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.26
07:15:37 SQL> CREATE TABLE svm6142 COMPRESS AS
07:15:37   2  SELECT
07:15:37   3  pair
07:15:37   4  ,ydate
07:15:37   5  ,prdate
07:15:37   6  ,clse
07:15:37   7  ,g6
07:15:37   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
07:15:37   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
07:15:37  10  ,CASE WHEN trend IS NULL THEN 1
07:15:37  11  	    WHEN trend =0      THEN 1
07:15:37  12  	    ELSE trend END trend
07:15:37  13  ,cm4
07:15:37  14  ,cm6
07:15:37  15  ,cm8
07:15:37  16  ,cm10
07:15:37  17  ,cm12
07:15:37  18  ,cm14
07:15:37  19  ,cm16
07:15:37  20  ,cm18
07:15:37  21  --
07:15:37  22  ,ca4
07:15:37  23  ,ca6
07:15:37  24  ,ca8
07:15:37  25  ,ca10
07:15:37  26  ,ca12
07:15:37  27  ,ca14
07:15:37  28  ,ca16
07:15:37  29  ,ca18
07:15:37  30  --
07:15:37  31  ,cx4
07:15:37  32  ,cx6
07:15:37  33  ,cx8
07:15:37  34  ,cx10
07:15:37  35  ,cx12
07:15:37  36  ,cx14
07:15:37  37  ,cx16
07:15:37  38  ,cx18
07:15:37  39  --
07:15:37  40  ,crr4
07:15:37  41  ,crr6
07:15:37  42  ,crr8
07:15:37  43  ,crr10
07:15:37  44  ,crr12
07:15:37  45  ,crr14
07:15:37  46  ,crr16
07:15:37  47  ,crr18
07:15:37  48  --
07:15:37  49  ,hh
07:15:37  50  ,d
07:15:37  51  ,w
07:15:37  52  ,mpm
07:15:37  53  ,mph
07:15:37  54  FROM svm6122
07:15:37  55  ORDER BY ydate
07:15:37  56  /

Table created.

Elapsed: 00:00:00.39
07:15:38 SQL> 
07:15:38 SQL> -- rpt
07:15:38 SQL> 
07:15:38 SQL> SELECT
07:15:38   2  pair
07:15:38   3  ,trend
07:15:38   4  ,gatt
07:15:38   5  ,COUNT(pair)
07:15:38   6  ,AVG(g6)
07:15:38   7  FROM svm6142
07:15:38   8  GROUP BY pair,trend,gatt
07:15:38   9  ORDER BY pair,trend,gatt
07:15:38  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5264 -.00212169
aud_usd 	-1 up	      3853 .003733795
aud_usd 	-1		26
aud_usd 	 1 nup	      6849 -.00209624
aud_usd 	 1 up	      3797 .004018896
aud_usd 	 1		46

6 rows selected.

Elapsed: 00:00:00.06
07:15:38 SQL> 
07:15:38 SQL> 
07:15:38 SQL> -- Derive NTILE based params:
07:15:38 SQL> 
07:15:38 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.20
07:15:38 SQL> CREATE TABLE svm6162 COMPRESS AS
07:15:38   2  SELECT
07:15:38   3  pair
07:15:38   4  ,ydate
07:15:38   5  ,prdate
07:15:38   6  ,clse
07:15:38   7  ,g6
07:15:38   8  ,gatt
07:15:38   9  ,gattn
07:15:38  10  ,trend
07:15:38  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
07:15:38  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
07:15:38  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
07:15:38  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
07:15:38  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
07:15:38  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
07:15:38  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
07:15:38  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
07:15:38  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
07:15:38  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
07:15:38  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
07:15:38  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
07:15:38  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
07:15:38  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
07:15:38  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
07:15:38  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
07:15:38  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
07:15:38  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
07:15:38  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
07:15:38  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
07:15:38  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
07:15:38  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
07:15:38  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
07:15:38  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
07:15:38  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
07:15:38  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
07:15:38  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
07:15:38  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
07:15:38  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
07:15:38  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
07:15:38  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
07:15:38  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
07:15:38  43  ,hh  att32
07:15:38  44  ,d   att33
07:15:38  45  ,w   att34
07:15:38  46  ,mpm att35
07:15:38  47  ,mph att36
07:15:38  48  ,trend att37
07:15:38  49  FROM svm6142
07:15:38  50  ORDER BY ydate
07:15:38  51  /

Table created.

Elapsed: 00:00:04.80
07:15:43 SQL> 
07:15:43 SQL> -- rpt
07:15:43 SQL> 
07:15:43 SQL> SELECT
07:15:43   2  pair
07:15:43   3  ,trend
07:15:43   4  ,gatt
07:15:43   5  ,COUNT(pair)
07:15:43   6  ,AVG(g6)
07:15:43   7  FROM svm6162
07:15:43   8  GROUP BY pair,trend,gatt
07:15:43   9  ORDER BY pair,trend,gatt
07:15:43  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5264 -.00212169
aud_usd 	-1 up	      3853 .003733795
aud_usd 	-1		26
aud_usd 	 1 nup	      6849 -.00209624
aud_usd 	 1 up	      3797 .004018896
aud_usd 	 1		46

6 rows selected.

Elapsed: 00:00:00.03
07:15:43 SQL> 
07:15:43 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.59
07:15:43 SQL> CREATE TABLE modsrc COMPRESS AS
07:15:43   2  SELECT
07:15:43   3  pair
07:15:43   4  ,ydate
07:15:43   5  ,prdate
07:15:43   6  ,trend
07:15:43   7  ,g6
07:15:43   8  ,gatt
07:15:43   9  ,gattn
07:15:43  10  FROM svm6162
07:15:43  11  /

Table created.

Elapsed: 00:00:00.08
07:15:43 SQL> 
07:15:43 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
07:15:44 SQL> 
07:15:44 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.08
07:15:44 SQL> CREATE TABLE aud_ms610 COMPRESS AS
07:15:44   2  SELECT
07:15:44   3  ydate
07:15:44   4  ,trend aud_trend
07:15:44   5  ,g6    aud_g6
07:15:44   6  ,gatt  aud_gatt
07:15:44   7  ,gattn aud_gattn
07:15:44   8  FROM modsrc
07:15:44   9  /

Table created.

Elapsed: 00:00:00.07
07:15:44 SQL> 
07:15:44 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
07:15:44 SQL> 
07:15:44 SQL> -- I need a copy of the attributes:
07:15:44 SQL> 
07:15:44 SQL> 
07:15:44 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.05
07:15:44 SQL> CREATE TABLE aud_att COMPRESS AS
07:15:44   2  SELECT
07:15:44   3  ydate
07:15:44   4  ,att00 aud_att00
07:15:44   5  ,att01 aud_att01
07:15:44   6  ,att02 aud_att02
07:15:44   7  ,att03 aud_att03
07:15:44   8  ,att04 aud_att04
07:15:44   9  ,att05 aud_att05
07:15:44  10  ,att06 aud_att06
07:15:44  11  ,att07 aud_att07
07:15:44  12  ,att08 aud_att08
07:15:44  13  ,att09 aud_att09
07:15:44  14  ,att10 aud_att10
07:15:44  15  ,att11 aud_att11
07:15:44  16  ,att12 aud_att12
07:15:44  17  ,att13 aud_att13
07:15:44  18  ,att14 aud_att14
07:15:44  19  ,att15 aud_att15
07:15:44  20  ,att16 aud_att16
07:15:44  21  ,att17 aud_att17
07:15:44  22  ,att18 aud_att18
07:15:44  23  ,att19 aud_att19
07:15:44  24  ,att20 aud_att20
07:15:44  25  ,att21 aud_att21
07:15:44  26  ,att22 aud_att22
07:15:44  27  ,att23 aud_att23
07:15:44  28  ,att24 aud_att24
07:15:44  29  ,att25 aud_att25
07:15:44  30  ,att26 aud_att26
07:15:44  31  ,att27 aud_att27
07:15:44  32  ,att28 aud_att28
07:15:44  33  ,att29 aud_att29
07:15:44  34  ,att30 aud_att30
07:15:44  35  ,att31 aud_att31
07:15:44  36  ,att32 aud_att32
07:15:44  37  ,att33 aud_att33
07:15:44  38  ,att34 aud_att34
07:15:44  39  ,att35 aud_att35
07:15:44  40  ,att36 aud_att36
07:15:44  41  ,att37 aud_att37
07:15:44  42  FROM svm6162
07:15:44  43  /

Table created.

Elapsed: 00:00:00.17
07:15:44 SQL> 
07:15:44 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
07:15:45 SQL> 
07:15:45 SQL> -- rpt
07:15:45 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19835

Elapsed: 00:00:00.87
07:15:46 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19835

Elapsed: 00:00:00.00
07:15:46 SQL> 
07:15:46 SQL> --
07:15:46 SQL> -- gbp610.sql
07:15:46 SQL> --
07:15:46 SQL> 
07:15:46 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:15:46 SQL> 
07:15:46 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.46
07:15:46 SQL> 
07:15:46 SQL> -- I created di5min here:
07:15:46 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:15:46 SQL> 
07:15:46 SQL> CREATE OR REPLACE VIEW svm6102 AS
07:15:46   2  SELECT
07:15:46   3  pair
07:15:46   4  ,ydate
07:15:46   5  ,prdate
07:15:46   6  ,rownum rnum -- acts as t in my time-series
07:15:46   7  ,clse
07:15:46   8  -- Derive a bunch of attributes from clse, the latest price:
07:15:46   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
07:15:46  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
07:15:46  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
07:15:46  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
07:15:46  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
07:15:46  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
07:15:46  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
07:15:46  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
07:15:46  17  --
07:15:46  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
07:15:46  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
07:15:46  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
07:15:46  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
07:15:46  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
07:15:46  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
07:15:46  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
07:15:46  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
07:15:46  26  --
07:15:46  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
07:15:46  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
07:15:46  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
07:15:46  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
07:15:46  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
07:15:46  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
07:15:46  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
07:15:46  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
07:15:46  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
07:15:46  36  FROM di5min WHERE pair LIKE'%gbp%'
07:15:46  37  AND ydate > sysdate - 95
07:15:46  38  ORDER BY ydate
07:15:46  39  /

View created.

Elapsed: 00:00:00.04
07:15:46 SQL> 
07:15:46 SQL> -- rpt
07:15:46 SQL> 
07:15:46 SQL> SELECT
07:15:46   2  pair
07:15:46   3  ,COUNT(pair)
07:15:46   4  ,MIN(clse),MAX(clse)
07:15:46   5  ,MIN(avg6),MAX(avg6)
07:15:46   6  ,MIN(ydate),MAX(ydate)
07:15:46   7  FROM svm6102
07:15:46   8  GROUP BY pair
07:15:46   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19837   1.535325	   1.6295 1.53696747 1.62716986 2010-09-27 07:20:01 2010-12-31 07:10:00

Elapsed: 00:00:00.88
07:15:47 SQL> 
07:15:47 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
07:15:47 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.19
07:15:47 SQL> CREATE TABLE svm6122 COMPRESS AS
07:15:47   2  SELECT
07:15:47   3  pair
07:15:47   4  ,ydate
07:15:47   5  ,prdate
07:15:47   6  ,clse
07:15:47   7  -- g6 is important. I want to predict g6:
07:15:47   8  ,ld6 - clse g6
07:15:47   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
07:15:47  10  -- I want more attributes from the ones I derived above:
07:15:47  11  -- clse relation to moving-min
07:15:47  12  ,clse-min4  cm4
07:15:47  13  ,clse-min6  cm6
07:15:47  14  ,clse-min8  cm8
07:15:47  15  ,clse-min10 cm10
07:15:47  16  ,clse-min12 cm12
07:15:47  17  ,clse-min14 cm14
07:15:47  18  ,clse-min16 cm16
07:15:47  19  ,clse-min18 cm18
07:15:47  20  -- clse relation to moving-avg
07:15:47  21  ,clse-avg4  ca4
07:15:47  22  ,clse-avg6  ca6
07:15:47  23  ,clse-avg8  ca8
07:15:47  24  ,clse-avg10 ca10
07:15:47  25  ,clse-avg12 ca12
07:15:47  26  ,clse-avg14 ca14
07:15:47  27  ,clse-avg16 ca16
07:15:47  28  ,clse-avg18 ca18
07:15:47  29  -- clse relation to moving-max
07:15:47  30  ,clse-max4  cx4
07:15:47  31  ,clse-max6  cx6
07:15:47  32  ,clse-max8  cx8
07:15:47  33  ,clse-max10 cx10
07:15:47  34  ,clse-max12 cx12
07:15:47  35  ,clse-max14 cx14
07:15:47  36  ,clse-max16 cx16
07:15:47  37  ,clse-max18 cx18
07:15:47  38  -- Derive more attributes.
07:15:47  39  -- I want to use CORR() here to help SVM see the shape of the series.
07:15:47  40  -- But COVAR_POP is more stable:
07:15:47  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
07:15:47  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:15:47  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:15:47  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:15:47  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:15:47  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:15:47  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:15:47  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:15:47  49  -- Derive date related attributes:
07:15:47  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:15:47  51  ,0+TO_CHAR(ydate,'D')d
07:15:47  52  ,0+TO_CHAR(ydate,'W')w
07:15:47  53  -- mpm stands for minutes-past-midnight:
07:15:47  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:15:47  55  -- mph stands for minutes-past-hour:
07:15:47  56  ,0+TO_CHAR(ydate,'MI')mph
07:15:47  57  FROM svm6102
07:15:47  58  ORDER BY ydate
07:15:47  59  /

Table created.

Elapsed: 00:00:02.13
07:15:49 SQL> 
07:15:49 SQL> -- rpt
07:15:49 SQL> 
07:15:49 SQL> SELECT
07:15:49   2  pair
07:15:49   3  ,COUNT(pair)
07:15:49   4  ,MIN(clse),MAX(clse)
07:15:49   5  ,MIN(ydate),MAX(ydate)
07:15:49   6  FROM svm6122
07:15:49   7  GROUP BY pair
07:15:49   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19837   1.535325	   1.6295 2010-09-27 07:20:01 2010-12-31 07:10:00

Elapsed: 00:00:00.04
07:15:49 SQL> 
07:15:49 SQL> -- Prepare for derivation of NTILE based params:
07:15:49 SQL> 
07:15:49 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
07:15:49 SQL> CREATE TABLE svm6142 COMPRESS AS
07:15:49   2  SELECT
07:15:49   3  pair
07:15:49   4  ,ydate
07:15:49   5  ,prdate
07:15:49   6  ,clse
07:15:49   7  ,g6
07:15:49   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
07:15:49   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
07:15:49  10  ,CASE WHEN trend IS NULL THEN 1
07:15:49  11  	    WHEN trend =0      THEN 1
07:15:49  12  	    ELSE trend END trend
07:15:49  13  ,cm4
07:15:49  14  ,cm6
07:15:49  15  ,cm8
07:15:49  16  ,cm10
07:15:49  17  ,cm12
07:15:49  18  ,cm14
07:15:49  19  ,cm16
07:15:49  20  ,cm18
07:15:49  21  --
07:15:49  22  ,ca4
07:15:49  23  ,ca6
07:15:49  24  ,ca8
07:15:49  25  ,ca10
07:15:49  26  ,ca12
07:15:49  27  ,ca14
07:15:49  28  ,ca16
07:15:49  29  ,ca18
07:15:49  30  --
07:15:49  31  ,cx4
07:15:49  32  ,cx6
07:15:49  33  ,cx8
07:15:49  34  ,cx10
07:15:49  35  ,cx12
07:15:49  36  ,cx14
07:15:49  37  ,cx16
07:15:49  38  ,cx18
07:15:49  39  --
07:15:49  40  ,crr4
07:15:49  41  ,crr6
07:15:49  42  ,crr8
07:15:49  43  ,crr10
07:15:49  44  ,crr12
07:15:49  45  ,crr14
07:15:49  46  ,crr16
07:15:49  47  ,crr18
07:15:49  48  --
07:15:49  49  ,hh
07:15:49  50  ,d
07:15:49  51  ,w
07:15:49  52  ,mpm
07:15:49  53  ,mph
07:15:49  54  FROM svm6122
07:15:49  55  ORDER BY ydate
07:15:49  56  /

Table created.

Elapsed: 00:00:00.37
07:15:50 SQL> 
07:15:50 SQL> -- rpt
07:15:50 SQL> 
07:15:50 SQL> SELECT
07:15:50   2  pair
07:15:50   3  ,trend
07:15:50   4  ,gatt
07:15:50   5  ,COUNT(pair)
07:15:50   6  ,AVG(g6)
07:15:50   7  FROM svm6142
07:15:50   8  GROUP BY pair,trend,gatt
07:15:50   9  ORDER BY pair,trend,gatt
07:15:50  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6345 -.00262385
gbp_usd 	-1 up	      3622 .004282793
gbp_usd 	 1 nup	      6296 -.00267613
gbp_usd 	 1 up	      3502  .00435297
gbp_usd 	 1		72

Elapsed: 00:00:00.04
07:15:50 SQL> 
07:15:50 SQL> 
07:15:50 SQL> -- Derive NTILE based params:
07:15:50 SQL> 
07:15:50 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
07:15:50 SQL> CREATE TABLE svm6162 COMPRESS AS
07:15:50   2  SELECT
07:15:50   3  pair
07:15:50   4  ,ydate
07:15:50   5  ,prdate
07:15:50   6  ,clse
07:15:50   7  ,g6
07:15:50   8  ,gatt
07:15:50   9  ,gattn
07:15:50  10  ,trend
07:15:50  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
07:15:50  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
07:15:50  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
07:15:50  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
07:15:50  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
07:15:50  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
07:15:50  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
07:15:50  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
07:15:50  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
07:15:50  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
07:15:50  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
07:15:50  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
07:15:50  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
07:15:50  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
07:15:50  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
07:15:50  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
07:15:50  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
07:15:50  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
07:15:50  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
07:15:50  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
07:15:50  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
07:15:50  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
07:15:50  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
07:15:50  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
07:15:50  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
07:15:50  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
07:15:50  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
07:15:50  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
07:15:50  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
07:15:50  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
07:15:50  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
07:15:50  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
07:15:50  43  ,hh  att32
07:15:50  44  ,d   att33
07:15:50  45  ,w   att34
07:15:50  46  ,mpm att35
07:15:50  47  ,mph att36
07:15:50  48  ,trend att37
07:15:50  49  FROM svm6142
07:15:50  50  ORDER BY ydate
07:15:50  51  /

Table created.

Elapsed: 00:00:04.81
07:15:55 SQL> 
07:15:55 SQL> -- rpt
07:15:55 SQL> 
07:15:55 SQL> SELECT
07:15:55   2  pair
07:15:55   3  ,trend
07:15:55   4  ,gatt
07:15:55   5  ,COUNT(pair)
07:15:55   6  ,AVG(g6)
07:15:55   7  FROM svm6162
07:15:55   8  GROUP BY pair,trend,gatt
07:15:55   9  ORDER BY pair,trend,gatt
07:15:55  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6345 -.00262385
gbp_usd 	-1 up	      3622 .004282793
gbp_usd 	 1 nup	      6296 -.00267613
gbp_usd 	 1 up	      3502  .00435297
gbp_usd 	 1		72

Elapsed: 00:00:00.03
07:15:55 SQL> 
07:15:55 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.19
07:15:55 SQL> CREATE TABLE modsrc COMPRESS AS
07:15:55   2  SELECT
07:15:55   3  pair
07:15:55   4  ,ydate
07:15:55   5  ,prdate
07:15:55   6  ,trend
07:15:55   7  ,g6
07:15:55   8  ,gatt
07:15:55   9  ,gattn
07:15:55  10  FROM svm6162
07:15:55  11  /

Table created.

Elapsed: 00:00:00.10
07:15:55 SQL> 
07:15:55 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
07:15:55 SQL> 
07:15:55 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
07:15:55 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
07:15:55   2  SELECT
07:15:55   3  ydate
07:15:55   4  ,trend gbp_trend
07:15:55   5  ,g6    gbp_g6
07:15:55   6  ,gatt  gbp_gatt
07:15:55   7  ,gattn gbp_gattn
07:15:55   8  FROM modsrc
07:15:55   9  /

Table created.

Elapsed: 00:00:00.07
07:15:55 SQL> 
07:15:55 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
07:15:56 SQL> 
07:15:56 SQL> -- I need a copy of the attributes:
07:15:56 SQL> 
07:15:56 SQL> 
07:15:56 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.05
07:15:56 SQL> CREATE TABLE gbp_att COMPRESS AS
07:15:56   2  SELECT
07:15:56   3  ydate
07:15:56   4  ,att00 gbp_att00
07:15:56   5  ,att01 gbp_att01
07:15:56   6  ,att02 gbp_att02
07:15:56   7  ,att03 gbp_att03
07:15:56   8  ,att04 gbp_att04
07:15:56   9  ,att05 gbp_att05
07:15:56  10  ,att06 gbp_att06
07:15:56  11  ,att07 gbp_att07
07:15:56  12  ,att08 gbp_att08
07:15:56  13  ,att09 gbp_att09
07:15:56  14  ,att10 gbp_att10
07:15:56  15  ,att11 gbp_att11
07:15:56  16  ,att12 gbp_att12
07:15:56  17  ,att13 gbp_att13
07:15:56  18  ,att14 gbp_att14
07:15:56  19  ,att15 gbp_att15
07:15:56  20  ,att16 gbp_att16
07:15:56  21  ,att17 gbp_att17
07:15:56  22  ,att18 gbp_att18
07:15:56  23  ,att19 gbp_att19
07:15:56  24  ,att20 gbp_att20
07:15:56  25  ,att21 gbp_att21
07:15:56  26  ,att22 gbp_att22
07:15:56  27  ,att23 gbp_att23
07:15:56  28  ,att24 gbp_att24
07:15:56  29  ,att25 gbp_att25
07:15:56  30  ,att26 gbp_att26
07:15:56  31  ,att27 gbp_att27
07:15:56  32  ,att28 gbp_att28
07:15:56  33  ,att29 gbp_att29
07:15:56  34  ,att30 gbp_att30
07:15:56  35  ,att31 gbp_att31
07:15:56  36  ,att32 gbp_att32
07:15:56  37  ,att33 gbp_att33
07:15:56  38  ,att34 gbp_att34
07:15:56  39  ,att35 gbp_att35
07:15:56  40  ,att36 gbp_att36
07:15:56  41  ,att37 gbp_att37
07:15:56  42  FROM svm6162
07:15:56  43  /

Table created.

Elapsed: 00:00:00.19
07:15:56 SQL> 
07:15:56 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.42
07:15:56 SQL> 
07:15:56 SQL> -- rpt
07:15:56 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19837

Elapsed: 00:00:00.88
07:15:57 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19837

Elapsed: 00:00:00.00
07:15:57 SQL> 
07:15:57 SQL> --
07:15:57 SQL> -- jpy610.sql
07:15:57 SQL> --
07:15:57 SQL> 
07:15:57 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:15:57 SQL> 
07:15:57 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.44
07:15:58 SQL> 
07:15:58 SQL> -- I created di5min here:
07:15:58 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:15:58 SQL> 
07:15:58 SQL> CREATE OR REPLACE VIEW svm6102 AS
07:15:58   2  SELECT
07:15:58   3  pair
07:15:58   4  ,ydate
07:15:58   5  ,prdate
07:15:58   6  ,rownum rnum -- acts as t in my time-series
07:15:58   7  ,clse
07:15:58   8  -- Derive a bunch of attributes from clse, the latest price:
07:15:58   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
07:15:58  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
07:15:58  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
07:15:58  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
07:15:58  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
07:15:58  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
07:15:58  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
07:15:58  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
07:15:58  17  --
07:15:58  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
07:15:58  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
07:15:58  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
07:15:58  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
07:15:58  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
07:15:58  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
07:15:58  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
07:15:58  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
07:15:58  26  --
07:15:58  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
07:15:58  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
07:15:58  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
07:15:58  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
07:15:58  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
07:15:58  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
07:15:58  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
07:15:58  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
07:15:58  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
07:15:58  36  FROM di5min WHERE pair LIKE'%jpy%'
07:15:58  37  AND ydate > sysdate - 95
07:15:58  38  ORDER BY ydate
07:15:58  39  /

View created.

Elapsed: 00:00:00.04
07:15:58 SQL> 
07:15:58 SQL> -- rpt
07:15:58 SQL> 
07:15:58 SQL> SELECT
07:15:58   2  pair
07:15:58   3  ,COUNT(pair)
07:15:58   4  ,MIN(clse),MAX(clse)
07:15:58   5  ,MIN(avg6),MAX(avg6)
07:15:58   6  ,MIN(ydate),MAX(ydate)
07:15:58   7  FROM svm6102
07:15:58   8  GROUP BY pair
07:15:58   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19835	 80.25	   84.485 80.3595205 84.3105479 2010-09-27 07:20:01 2010-12-31 07:10:00

Elapsed: 00:00:00.97
07:15:59 SQL> 
07:15:59 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
07:15:59 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.25
07:15:59 SQL> CREATE TABLE svm6122 COMPRESS AS
07:15:59   2  SELECT
07:15:59   3  pair
07:15:59   4  ,ydate
07:15:59   5  ,prdate
07:15:59   6  ,clse
07:15:59   7  -- g6 is important. I want to predict g6:
07:15:59   8  ,ld6 - clse g6
07:15:59   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
07:15:59  10  -- I want more attributes from the ones I derived above:
07:15:59  11  -- clse relation to moving-min
07:15:59  12  ,clse-min4  cm4
07:15:59  13  ,clse-min6  cm6
07:15:59  14  ,clse-min8  cm8
07:15:59  15  ,clse-min10 cm10
07:15:59  16  ,clse-min12 cm12
07:15:59  17  ,clse-min14 cm14
07:15:59  18  ,clse-min16 cm16
07:15:59  19  ,clse-min18 cm18
07:15:59  20  -- clse relation to moving-avg
07:15:59  21  ,clse-avg4  ca4
07:15:59  22  ,clse-avg6  ca6
07:15:59  23  ,clse-avg8  ca8
07:15:59  24  ,clse-avg10 ca10
07:15:59  25  ,clse-avg12 ca12
07:15:59  26  ,clse-avg14 ca14
07:15:59  27  ,clse-avg16 ca16
07:15:59  28  ,clse-avg18 ca18
07:15:59  29  -- clse relation to moving-max
07:15:59  30  ,clse-max4  cx4
07:15:59  31  ,clse-max6  cx6
07:15:59  32  ,clse-max8  cx8
07:15:59  33  ,clse-max10 cx10
07:15:59  34  ,clse-max12 cx12
07:15:59  35  ,clse-max14 cx14
07:15:59  36  ,clse-max16 cx16
07:15:59  37  ,clse-max18 cx18
07:15:59  38  -- Derive more attributes.
07:15:59  39  -- I want to use CORR() here to help SVM see the shape of the series.
07:15:59  40  -- But COVAR_POP is more stable:
07:15:59  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
07:15:59  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:15:59  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:15:59  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:15:59  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:15:59  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:15:59  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:15:59  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:15:59  49  -- Derive date related attributes:
07:15:59  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:15:59  51  ,0+TO_CHAR(ydate,'D')d
07:15:59  52  ,0+TO_CHAR(ydate,'W')w
07:15:59  53  -- mpm stands for minutes-past-midnight:
07:15:59  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:15:59  55  -- mph stands for minutes-past-hour:
07:15:59  56  ,0+TO_CHAR(ydate,'MI')mph
07:15:59  57  FROM svm6102
07:15:59  58  ORDER BY ydate
07:15:59  59  /

Table created.

Elapsed: 00:00:02.10
07:16:01 SQL> 
07:16:01 SQL> -- rpt
07:16:01 SQL> 
07:16:01 SQL> SELECT
07:16:01   2  pair
07:16:01   3  ,COUNT(pair)
07:16:01   4  ,MIN(clse),MAX(clse)
07:16:01   5  ,MIN(ydate),MAX(ydate)
07:16:01   6  FROM svm6122
07:16:01   7  GROUP BY pair
07:16:01   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19835	 80.25	   84.485 2010-09-27 07:20:01 2010-12-31 07:10:00

Elapsed: 00:00:00.10
07:16:01 SQL> 
07:16:01 SQL> -- Prepare for derivation of NTILE based params:
07:16:01 SQL> 
07:16:01 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.37
07:16:01 SQL> CREATE TABLE svm6142 COMPRESS AS
07:16:01   2  SELECT
07:16:01   3  pair
07:16:01   4  ,ydate
07:16:01   5  ,prdate
07:16:01   6  ,clse
07:16:01   7  ,g6
07:16:01   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
07:16:01   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
07:16:01  10  ,CASE WHEN trend IS NULL THEN 1
07:16:01  11  	    WHEN trend =0      THEN 1
07:16:01  12  	    ELSE trend END trend
07:16:01  13  ,cm4
07:16:01  14  ,cm6
07:16:01  15  ,cm8
07:16:01  16  ,cm10
07:16:01  17  ,cm12
07:16:01  18  ,cm14
07:16:01  19  ,cm16
07:16:01  20  ,cm18
07:16:01  21  --
07:16:01  22  ,ca4
07:16:01  23  ,ca6
07:16:01  24  ,ca8
07:16:01  25  ,ca10
07:16:01  26  ,ca12
07:16:01  27  ,ca14
07:16:01  28  ,ca16
07:16:01  29  ,ca18
07:16:01  30  --
07:16:01  31  ,cx4
07:16:01  32  ,cx6
07:16:01  33  ,cx8
07:16:01  34  ,cx10
07:16:01  35  ,cx12
07:16:01  36  ,cx14
07:16:01  37  ,cx16
07:16:01  38  ,cx18
07:16:01  39  --
07:16:01  40  ,crr4
07:16:01  41  ,crr6
07:16:01  42  ,crr8
07:16:01  43  ,crr10
07:16:01  44  ,crr12
07:16:01  45  ,crr14
07:16:01  46  ,crr16
07:16:01  47  ,crr18
07:16:01  48  --
07:16:01  49  ,hh
07:16:01  50  ,d
07:16:01  51  ,w
07:16:01  52  ,mpm
07:16:01  53  ,mph
07:16:01  54  FROM svm6122
07:16:01  55  ORDER BY ydate
07:16:01  56  /

Table created.

Elapsed: 00:00:00.35
07:16:02 SQL> 
07:16:02 SQL> -- rpt
07:16:02 SQL> 
07:16:02 SQL> SELECT
07:16:02   2  pair
07:16:02   3  ,trend
07:16:02   4  ,gatt
07:16:02   5  ,COUNT(pair)
07:16:02   6  ,AVG(g6)
07:16:02   7  FROM svm6142
07:16:02   8  GROUP BY pair,trend,gatt
07:16:02   9  ORDER BY pair,trend,gatt
07:16:02  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5339 -.16649767
usd_jpy 	-1 up	      5022 .162742981
usd_jpy 	-1		72
usd_jpy 	 1 nup	      5240 -.15492739
usd_jpy 	 1 up	      4162 .164970049

Elapsed: 00:00:00.04
07:16:02 SQL> 
07:16:02 SQL> 
07:16:02 SQL> -- Derive NTILE based params:
07:16:02 SQL> 
07:16:02 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.14
07:16:02 SQL> CREATE TABLE svm6162 COMPRESS AS
07:16:02   2  SELECT
07:16:02   3  pair
07:16:02   4  ,ydate
07:16:02   5  ,prdate
07:16:02   6  ,clse
07:16:02   7  ,g6
07:16:02   8  ,gatt
07:16:02   9  ,gattn
07:16:02  10  ,trend
07:16:02  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
07:16:02  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
07:16:02  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
07:16:02  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
07:16:02  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
07:16:02  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
07:16:02  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
07:16:02  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
07:16:02  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
07:16:02  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
07:16:02  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
07:16:02  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
07:16:02  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
07:16:02  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
07:16:02  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
07:16:02  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
07:16:02  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
07:16:02  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
07:16:02  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
07:16:02  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
07:16:02  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
07:16:02  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
07:16:02  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
07:16:02  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
07:16:02  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
07:16:02  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
07:16:02  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
07:16:02  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
07:16:02  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
07:16:02  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
07:16:02  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
07:16:02  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
07:16:02  43  ,hh  att32
07:16:02  44  ,d   att33
07:16:02  45  ,w   att34
07:16:02  46  ,mpm att35
07:16:02  47  ,mph att36
07:16:02  48  ,trend att37
07:16:02  49  FROM svm6142
07:16:02  50  ORDER BY ydate
07:16:02  51  /

Table created.

Elapsed: 00:00:04.75
07:16:07 SQL> 
07:16:07 SQL> -- rpt
07:16:07 SQL> 
07:16:07 SQL> SELECT
07:16:07   2  pair
07:16:07   3  ,trend
07:16:07   4  ,gatt
07:16:07   5  ,COUNT(pair)
07:16:07   6  ,AVG(g6)
07:16:07   7  FROM svm6162
07:16:07   8  GROUP BY pair,trend,gatt
07:16:07   9  ORDER BY pair,trend,gatt
07:16:07  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5339 -.16649767
usd_jpy 	-1 up	      5022 .162742981
usd_jpy 	-1		72
usd_jpy 	 1 nup	      5240 -.15492739
usd_jpy 	 1 up	      4162 .164970049

Elapsed: 00:00:00.02
07:16:07 SQL> 
07:16:07 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
07:16:07 SQL> CREATE TABLE modsrc COMPRESS AS
07:16:07   2  SELECT
07:16:07   3  pair
07:16:07   4  ,ydate
07:16:07   5  ,prdate
07:16:07   6  ,trend
07:16:07   7  ,g6
07:16:07   8  ,gatt
07:16:07   9  ,gattn
07:16:07  10  FROM svm6162
07:16:07  11  /

Table created.

Elapsed: 00:00:00.11
07:16:07 SQL> 
07:16:07 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
07:16:07 SQL> 
07:16:07 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.19
07:16:07 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
07:16:07   2  SELECT
07:16:07   3  ydate
07:16:07   4  ,trend jpy_trend
07:16:07   5  ,g6    jpy_g6
07:16:07   6  ,gatt  jpy_gatt
07:16:07   7  ,gattn jpy_gattn
07:16:07   8  FROM modsrc
07:16:07   9  /

Table created.

Elapsed: 00:00:00.08
07:16:08 SQL> 
07:16:08 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
07:16:08 SQL> 
07:16:08 SQL> -- I need a copy of the attributes:
07:16:08 SQL> 
07:16:08 SQL> 
07:16:08 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.08
07:16:08 SQL> CREATE TABLE jpy_att COMPRESS AS
07:16:08   2  SELECT
07:16:08   3  ydate
07:16:08   4  ,att00 jpy_att00
07:16:08   5  ,att01 jpy_att01
07:16:08   6  ,att02 jpy_att02
07:16:08   7  ,att03 jpy_att03
07:16:08   8  ,att04 jpy_att04
07:16:08   9  ,att05 jpy_att05
07:16:08  10  ,att06 jpy_att06
07:16:08  11  ,att07 jpy_att07
07:16:08  12  ,att08 jpy_att08
07:16:08  13  ,att09 jpy_att09
07:16:08  14  ,att10 jpy_att10
07:16:08  15  ,att11 jpy_att11
07:16:08  16  ,att12 jpy_att12
07:16:08  17  ,att13 jpy_att13
07:16:08  18  ,att14 jpy_att14
07:16:08  19  ,att15 jpy_att15
07:16:08  20  ,att16 jpy_att16
07:16:08  21  ,att17 jpy_att17
07:16:08  22  ,att18 jpy_att18
07:16:08  23  ,att19 jpy_att19
07:16:08  24  ,att20 jpy_att20
07:16:08  25  ,att21 jpy_att21
07:16:08  26  ,att22 jpy_att22
07:16:08  27  ,att23 jpy_att23
07:16:08  28  ,att24 jpy_att24
07:16:08  29  ,att25 jpy_att25
07:16:08  30  ,att26 jpy_att26
07:16:08  31  ,att27 jpy_att27
07:16:08  32  ,att28 jpy_att28
07:16:08  33  ,att29 jpy_att29
07:16:08  34  ,att30 jpy_att30
07:16:08  35  ,att31 jpy_att31
07:16:08  36  ,att32 jpy_att32
07:16:08  37  ,att33 jpy_att33
07:16:08  38  ,att34 jpy_att34
07:16:08  39  ,att35 jpy_att35
07:16:08  40  ,att36 jpy_att36
07:16:08  41  ,att37 jpy_att37
07:16:08  42  FROM svm6162
07:16:08  43  /

Table created.

Elapsed: 00:00:00.17
07:16:08 SQL> 
07:16:08 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
07:16:08 SQL> 
07:16:08 SQL> -- rpt
07:16:08 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19835

Elapsed: 00:00:00.90
07:16:09 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19835

Elapsed: 00:00:00.00
07:16:09 SQL> 
07:16:09 SQL> --
07:16:09 SQL> -- cad610.sql
07:16:09 SQL> --
07:16:09 SQL> 
07:16:09 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:16:09 SQL> 
07:16:09 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.37
07:16:10 SQL> 
07:16:10 SQL> -- I created di5min here:
07:16:10 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:16:10 SQL> 
07:16:10 SQL> CREATE OR REPLACE VIEW svm6102 AS
07:16:10   2  SELECT
07:16:10   3  pair
07:16:10   4  ,ydate
07:16:10   5  ,prdate
07:16:10   6  ,rownum rnum -- acts as t in my time-series
07:16:10   7  ,clse
07:16:10   8  -- Derive a bunch of attributes from clse, the latest price:
07:16:10   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
07:16:10  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
07:16:10  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
07:16:10  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
07:16:10  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
07:16:10  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
07:16:10  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
07:16:10  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
07:16:10  17  --
07:16:10  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
07:16:10  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
07:16:10  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
07:16:10  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
07:16:10  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
07:16:10  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
07:16:10  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
07:16:10  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
07:16:10  26  --
07:16:10  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
07:16:10  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
07:16:10  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
07:16:10  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
07:16:10  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
07:16:10  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
07:16:10  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
07:16:10  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
07:16:10  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
07:16:10  36  FROM di5min WHERE pair LIKE'%cad%'
07:16:10  37  AND ydate > sysdate - 95
07:16:10  38  ORDER BY ydate
07:16:10  39  /

View created.

Elapsed: 00:00:00.04
07:16:10 SQL> 
07:16:10 SQL> -- rpt
07:16:10 SQL> 
07:16:10 SQL> SELECT
07:16:10   2  pair
07:16:10   3  ,COUNT(pair)
07:16:10   4  ,MIN(clse),MAX(clse)
07:16:10   5  ,MIN(avg6),MAX(avg6)
07:16:10   6  ,MIN(ydate),MAX(ydate)
07:16:10   7  FROM svm6102
07:16:10   8  GROUP BY pair
07:16:10   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19835	.99755	    1.036 .998845205 1.03336849 2010-09-27 07:20:01 2010-12-31 07:10:00

Elapsed: 00:00:00.86
07:16:11 SQL> 
07:16:11 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
07:16:11 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.19
07:16:11 SQL> CREATE TABLE svm6122 COMPRESS AS
07:16:11   2  SELECT
07:16:11   3  pair
07:16:11   4  ,ydate
07:16:11   5  ,prdate
07:16:11   6  ,clse
07:16:11   7  -- g6 is important. I want to predict g6:
07:16:11   8  ,ld6 - clse g6
07:16:11   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
07:16:11  10  -- I want more attributes from the ones I derived above:
07:16:11  11  -- clse relation to moving-min
07:16:11  12  ,clse-min4  cm4
07:16:11  13  ,clse-min6  cm6
07:16:11  14  ,clse-min8  cm8
07:16:11  15  ,clse-min10 cm10
07:16:11  16  ,clse-min12 cm12
07:16:11  17  ,clse-min14 cm14
07:16:11  18  ,clse-min16 cm16
07:16:11  19  ,clse-min18 cm18
07:16:11  20  -- clse relation to moving-avg
07:16:11  21  ,clse-avg4  ca4
07:16:11  22  ,clse-avg6  ca6
07:16:11  23  ,clse-avg8  ca8
07:16:11  24  ,clse-avg10 ca10
07:16:11  25  ,clse-avg12 ca12
07:16:11  26  ,clse-avg14 ca14
07:16:11  27  ,clse-avg16 ca16
07:16:11  28  ,clse-avg18 ca18
07:16:11  29  -- clse relation to moving-max
07:16:11  30  ,clse-max4  cx4
07:16:11  31  ,clse-max6  cx6
07:16:11  32  ,clse-max8  cx8
07:16:11  33  ,clse-max10 cx10
07:16:11  34  ,clse-max12 cx12
07:16:11  35  ,clse-max14 cx14
07:16:11  36  ,clse-max16 cx16
07:16:11  37  ,clse-max18 cx18
07:16:11  38  -- Derive more attributes.
07:16:11  39  -- I want to use CORR() here to help SVM see the shape of the series.
07:16:11  40  -- But COVAR_POP is more stable:
07:16:11  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
07:16:11  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:16:11  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:16:11  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:16:11  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:16:11  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:16:11  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:16:11  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:16:11  49  -- Derive date related attributes:
07:16:11  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:16:11  51  ,0+TO_CHAR(ydate,'D')d
07:16:11  52  ,0+TO_CHAR(ydate,'W')w
07:16:11  53  -- mpm stands for minutes-past-midnight:
07:16:11  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:16:11  55  -- mph stands for minutes-past-hour:
07:16:11  56  ,0+TO_CHAR(ydate,'MI')mph
07:16:11  57  FROM svm6102
07:16:11  58  ORDER BY ydate
07:16:11  59  /

Table created.

Elapsed: 00:00:02.28
07:16:13 SQL> 
07:16:13 SQL> -- rpt
07:16:13 SQL> 
07:16:13 SQL> SELECT
07:16:13   2  pair
07:16:13   3  ,COUNT(pair)
07:16:13   4  ,MIN(clse),MAX(clse)
07:16:13   5  ,MIN(ydate),MAX(ydate)
07:16:13   6  FROM svm6122
07:16:13   7  GROUP BY pair
07:16:13   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19835	.99755	    1.036 2010-09-27 07:20:01 2010-12-31 07:10:00

Elapsed: 00:00:00.04
07:16:13 SQL> 
07:16:13 SQL> -- Prepare for derivation of NTILE based params:
07:16:13 SQL> 
07:16:13 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.72
07:16:14 SQL> CREATE TABLE svm6142 COMPRESS AS
07:16:14   2  SELECT
07:16:14   3  pair
07:16:14   4  ,ydate
07:16:14   5  ,prdate
07:16:14   6  ,clse
07:16:14   7  ,g6
07:16:14   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
07:16:14   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
07:16:14  10  ,CASE WHEN trend IS NULL THEN 1
07:16:14  11  	    WHEN trend =0      THEN 1
07:16:14  12  	    ELSE trend END trend
07:16:14  13  ,cm4
07:16:14  14  ,cm6
07:16:14  15  ,cm8
07:16:14  16  ,cm10
07:16:14  17  ,cm12
07:16:14  18  ,cm14
07:16:14  19  ,cm16
07:16:14  20  ,cm18
07:16:14  21  --
07:16:14  22  ,ca4
07:16:14  23  ,ca6
07:16:14  24  ,ca8
07:16:14  25  ,ca10
07:16:14  26  ,ca12
07:16:14  27  ,ca14
07:16:14  28  ,ca16
07:16:14  29  ,ca18
07:16:14  30  --
07:16:14  31  ,cx4
07:16:14  32  ,cx6
07:16:14  33  ,cx8
07:16:14  34  ,cx10
07:16:14  35  ,cx12
07:16:14  36  ,cx14
07:16:14  37  ,cx16
07:16:14  38  ,cx18
07:16:14  39  --
07:16:14  40  ,crr4
07:16:14  41  ,crr6
07:16:14  42  ,crr8
07:16:14  43  ,crr10
07:16:14  44  ,crr12
07:16:14  45  ,crr14
07:16:14  46  ,crr16
07:16:14  47  ,crr18
07:16:14  48  --
07:16:14  49  ,hh
07:16:14  50  ,d
07:16:14  51  ,w
07:16:14  52  ,mpm
07:16:14  53  ,mph
07:16:14  54  FROM svm6122
07:16:14  55  ORDER BY ydate
07:16:14  56  /

Table created.

Elapsed: 00:00:00.36
07:16:14 SQL> 
07:16:14 SQL> -- rpt
07:16:14 SQL> 
07:16:14 SQL> SELECT
07:16:14   2  pair
07:16:14   3  ,trend
07:16:14   4  ,gatt
07:16:14   5  ,COUNT(pair)
07:16:14   6  ,AVG(g6)
07:16:14   7  FROM svm6142
07:16:14   8  GROUP BY pair,trend,gatt
07:16:14   9  ORDER BY pair,trend,gatt
07:16:14  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7348 -.00130061
usd_cad 	-1 up	      3145 .003082699
usd_cad 	-1		21
usd_cad 	 1 nup	      6771 -.00159902
usd_cad 	 1 up	      2499  .00359165
usd_cad 	 1		51

6 rows selected.

Elapsed: 00:00:00.04
07:16:14 SQL> 
07:16:14 SQL> 
07:16:14 SQL> -- Derive NTILE based params:
07:16:14 SQL> 
07:16:14 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
07:16:14 SQL> CREATE TABLE svm6162 COMPRESS AS
07:16:14   2  SELECT
07:16:14   3  pair
07:16:14   4  ,ydate
07:16:14   5  ,prdate
07:16:14   6  ,clse
07:16:14   7  ,g6
07:16:14   8  ,gatt
07:16:14   9  ,gattn
07:16:14  10  ,trend
07:16:14  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
07:16:14  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
07:16:14  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
07:16:14  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
07:16:14  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
07:16:14  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
07:16:14  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
07:16:14  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
07:16:14  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
07:16:14  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
07:16:14  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
07:16:14  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
07:16:14  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
07:16:14  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
07:16:14  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
07:16:14  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
07:16:14  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
07:16:14  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
07:16:14  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
07:16:14  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
07:16:14  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
07:16:14  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
07:16:14  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
07:16:14  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
07:16:14  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
07:16:14  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
07:16:14  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
07:16:14  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
07:16:14  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
07:16:14  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
07:16:14  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
07:16:14  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
07:16:14  43  ,hh  att32
07:16:14  44  ,d   att33
07:16:14  45  ,w   att34
07:16:14  46  ,mpm att35
07:16:14  47  ,mph att36
07:16:14  48  ,trend att37
07:16:14  49  FROM svm6142
07:16:14  50  ORDER BY ydate
07:16:14  51  /

Table created.

Elapsed: 00:00:04.79
07:16:19 SQL> 
07:16:19 SQL> -- rpt
07:16:19 SQL> 
07:16:19 SQL> SELECT
07:16:19   2  pair
07:16:19   3  ,trend
07:16:19   4  ,gatt
07:16:19   5  ,COUNT(pair)
07:16:19   6  ,AVG(g6)
07:16:19   7  FROM svm6162
07:16:19   8  GROUP BY pair,trend,gatt
07:16:19   9  ORDER BY pair,trend,gatt
07:16:19  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7348 -.00130061
usd_cad 	-1 up	      3145 .003082699
usd_cad 	-1		21
usd_cad 	 1 nup	      6771 -.00159902
usd_cad 	 1 up	      2499  .00359165
usd_cad 	 1		51

6 rows selected.

Elapsed: 00:00:00.03
07:16:19 SQL> 
07:16:19 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
07:16:19 SQL> CREATE TABLE modsrc COMPRESS AS
07:16:19   2  SELECT
07:16:19   3  pair
07:16:19   4  ,ydate
07:16:19   5  ,prdate
07:16:19   6  ,trend
07:16:19   7  ,g6
07:16:19   8  ,gatt
07:16:19   9  ,gattn
07:16:19  10  FROM svm6162
07:16:19  11  /

Table created.

Elapsed: 00:00:00.08
07:16:19 SQL> 
07:16:19 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
07:16:20 SQL> 
07:16:20 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
07:16:20 SQL> CREATE TABLE cad_ms610 COMPRESS AS
07:16:20   2  SELECT
07:16:20   3  ydate
07:16:20   4  ,trend cad_trend
07:16:20   5  ,g6    cad_g6
07:16:20   6  ,gatt  cad_gatt
07:16:20   7  ,gattn cad_gattn
07:16:20   8  FROM modsrc
07:16:20   9  /

Table created.

Elapsed: 00:00:00.08
07:16:20 SQL> 
07:16:20 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
07:16:20 SQL> 
07:16:20 SQL> -- I need a copy of the attributes:
07:16:20 SQL> 
07:16:20 SQL> 
07:16:20 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.04
07:16:20 SQL> CREATE TABLE cad_att COMPRESS AS
07:16:20   2  SELECT
07:16:20   3  ydate
07:16:20   4  ,att00 cad_att00
07:16:20   5  ,att01 cad_att01
07:16:20   6  ,att02 cad_att02
07:16:20   7  ,att03 cad_att03
07:16:20   8  ,att04 cad_att04
07:16:20   9  ,att05 cad_att05
07:16:20  10  ,att06 cad_att06
07:16:20  11  ,att07 cad_att07
07:16:20  12  ,att08 cad_att08
07:16:20  13  ,att09 cad_att09
07:16:20  14  ,att10 cad_att10
07:16:20  15  ,att11 cad_att11
07:16:20  16  ,att12 cad_att12
07:16:20  17  ,att13 cad_att13
07:16:20  18  ,att14 cad_att14
07:16:20  19  ,att15 cad_att15
07:16:20  20  ,att16 cad_att16
07:16:20  21  ,att17 cad_att17
07:16:20  22  ,att18 cad_att18
07:16:20  23  ,att19 cad_att19
07:16:20  24  ,att20 cad_att20
07:16:20  25  ,att21 cad_att21
07:16:20  26  ,att22 cad_att22
07:16:20  27  ,att23 cad_att23
07:16:20  28  ,att24 cad_att24
07:16:20  29  ,att25 cad_att25
07:16:20  30  ,att26 cad_att26
07:16:20  31  ,att27 cad_att27
07:16:20  32  ,att28 cad_att28
07:16:20  33  ,att29 cad_att29
07:16:20  34  ,att30 cad_att30
07:16:20  35  ,att31 cad_att31
07:16:20  36  ,att32 cad_att32
07:16:20  37  ,att33 cad_att33
07:16:20  38  ,att34 cad_att34
07:16:20  39  ,att35 cad_att35
07:16:20  40  ,att36 cad_att36
07:16:20  41  ,att37 cad_att37
07:16:20  42  FROM svm6162
07:16:20  43  /

Table created.

Elapsed: 00:00:00.17
07:16:20 SQL> 
07:16:20 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
07:16:20 SQL> 
07:16:20 SQL> -- rpt
07:16:20 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19835

Elapsed: 00:00:00.83
07:16:21 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19835

Elapsed: 00:00:00.01
07:16:21 SQL> 
07:16:21 SQL> --
07:16:21 SQL> -- chf610.sql
07:16:21 SQL> --
07:16:21 SQL> 
07:16:21 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:16:21 SQL> 
07:16:21 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.36
07:16:22 SQL> 
07:16:22 SQL> -- I created di5min here:
07:16:22 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:16:22 SQL> 
07:16:22 SQL> CREATE OR REPLACE VIEW svm6102 AS
07:16:22   2  SELECT
07:16:22   3  pair
07:16:22   4  ,ydate
07:16:22   5  ,prdate
07:16:22   6  ,rownum rnum -- acts as t in my time-series
07:16:22   7  ,clse
07:16:22   8  -- Derive a bunch of attributes from clse, the latest price:
07:16:22   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
07:16:22  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
07:16:22  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
07:16:22  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
07:16:22  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
07:16:22  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
07:16:22  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
07:16:22  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
07:16:22  17  --
07:16:22  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
07:16:22  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
07:16:22  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
07:16:22  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
07:16:22  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
07:16:22  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
07:16:22  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
07:16:22  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
07:16:22  26  --
07:16:22  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
07:16:22  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
07:16:22  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
07:16:22  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
07:16:22  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
07:16:22  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
07:16:22  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
07:16:22  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
07:16:22  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
07:16:22  36  FROM di5min WHERE pair LIKE'%chf%'
07:16:22  37  AND ydate > sysdate - 95
07:16:22  38  ORDER BY ydate
07:16:22  39  /

View created.

Elapsed: 00:00:00.04
07:16:22 SQL> 
07:16:22 SQL> -- rpt
07:16:22 SQL> 
07:16:22 SQL> SELECT
07:16:22   2  pair
07:16:22   3  ,COUNT(pair)
07:16:22   4  ,MIN(clse),MAX(clse)
07:16:22   5  ,MIN(avg6),MAX(avg6)
07:16:22   6  ,MIN(ydate),MAX(ydate)
07:16:22   7  FROM svm6102
07:16:22   8  GROUP BY pair
07:16:22   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19838	 .9343	  1.00635 .935186301 1.00498151 2010-09-27 07:20:01 2010-12-31 07:10:00

Elapsed: 00:00:00.88
07:16:23 SQL> 
07:16:23 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
07:16:23 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.19
07:16:23 SQL> CREATE TABLE svm6122 COMPRESS AS
07:16:23   2  SELECT
07:16:23   3  pair
07:16:23   4  ,ydate
07:16:23   5  ,prdate
07:16:23   6  ,clse
07:16:23   7  -- g6 is important. I want to predict g6:
07:16:23   8  ,ld6 - clse g6
07:16:23   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
07:16:23  10  -- I want more attributes from the ones I derived above:
07:16:23  11  -- clse relation to moving-min
07:16:23  12  ,clse-min4  cm4
07:16:23  13  ,clse-min6  cm6
07:16:23  14  ,clse-min8  cm8
07:16:23  15  ,clse-min10 cm10
07:16:23  16  ,clse-min12 cm12
07:16:23  17  ,clse-min14 cm14
07:16:23  18  ,clse-min16 cm16
07:16:23  19  ,clse-min18 cm18
07:16:23  20  -- clse relation to moving-avg
07:16:23  21  ,clse-avg4  ca4
07:16:23  22  ,clse-avg6  ca6
07:16:23  23  ,clse-avg8  ca8
07:16:23  24  ,clse-avg10 ca10
07:16:23  25  ,clse-avg12 ca12
07:16:23  26  ,clse-avg14 ca14
07:16:23  27  ,clse-avg16 ca16
07:16:23  28  ,clse-avg18 ca18
07:16:23  29  -- clse relation to moving-max
07:16:23  30  ,clse-max4  cx4
07:16:23  31  ,clse-max6  cx6
07:16:23  32  ,clse-max8  cx8
07:16:23  33  ,clse-max10 cx10
07:16:23  34  ,clse-max12 cx12
07:16:23  35  ,clse-max14 cx14
07:16:23  36  ,clse-max16 cx16
07:16:23  37  ,clse-max18 cx18
07:16:23  38  -- Derive more attributes.
07:16:23  39  -- I want to use CORR() here to help SVM see the shape of the series.
07:16:23  40  -- But COVAR_POP is more stable:
07:16:23  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
07:16:23  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:16:23  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:16:23  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:16:23  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:16:23  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:16:23  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:16:23  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:16:23  49  -- Derive date related attributes:
07:16:23  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:16:23  51  ,0+TO_CHAR(ydate,'D')d
07:16:23  52  ,0+TO_CHAR(ydate,'W')w
07:16:23  53  -- mpm stands for minutes-past-midnight:
07:16:23  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:16:23  55  -- mph stands for minutes-past-hour:
07:16:23  56  ,0+TO_CHAR(ydate,'MI')mph
07:16:23  57  FROM svm6102
07:16:23  58  ORDER BY ydate
07:16:23  59  /

Table created.

Elapsed: 00:00:02.06
07:16:25 SQL> 
07:16:25 SQL> -- rpt
07:16:25 SQL> 
07:16:25 SQL> SELECT
07:16:25   2  pair
07:16:25   3  ,COUNT(pair)
07:16:25   4  ,MIN(clse),MAX(clse)
07:16:25   5  ,MIN(ydate),MAX(ydate)
07:16:25   6  FROM svm6122
07:16:25   7  GROUP BY pair
07:16:25   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19838	 .9343	  1.00635 2010-09-27 07:20:01 2010-12-31 07:10:00

Elapsed: 00:00:00.04
07:16:25 SQL> 
07:16:25 SQL> -- Prepare for derivation of NTILE based params:
07:16:25 SQL> 
07:16:25 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.19
07:16:25 SQL> CREATE TABLE svm6142 COMPRESS AS
07:16:25   2  SELECT
07:16:25   3  pair
07:16:25   4  ,ydate
07:16:25   5  ,prdate
07:16:25   6  ,clse
07:16:25   7  ,g6
07:16:25   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
07:16:25   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
07:16:25  10  ,CASE WHEN trend IS NULL THEN 1
07:16:25  11  	    WHEN trend =0      THEN 1
07:16:25  12  	    ELSE trend END trend
07:16:25  13  ,cm4
07:16:25  14  ,cm6
07:16:25  15  ,cm8
07:16:25  16  ,cm10
07:16:25  17  ,cm12
07:16:25  18  ,cm14
07:16:25  19  ,cm16
07:16:25  20  ,cm18
07:16:25  21  --
07:16:25  22  ,ca4
07:16:25  23  ,ca6
07:16:25  24  ,ca8
07:16:25  25  ,ca10
07:16:25  26  ,ca12
07:16:25  27  ,ca14
07:16:25  28  ,ca16
07:16:25  29  ,ca18
07:16:25  30  --
07:16:25  31  ,cx4
07:16:25  32  ,cx6
07:16:25  33  ,cx8
07:16:25  34  ,cx10
07:16:25  35  ,cx12
07:16:25  36  ,cx14
07:16:25  37  ,cx16
07:16:25  38  ,cx18
07:16:25  39  --
07:16:25  40  ,crr4
07:16:25  41  ,crr6
07:16:25  42  ,crr8
07:16:25  43  ,crr10
07:16:25  44  ,crr12
07:16:25  45  ,crr14
07:16:25  46  ,crr16
07:16:25  47  ,crr18
07:16:25  48  --
07:16:25  49  ,hh
07:16:25  50  ,d
07:16:25  51  ,w
07:16:25  52  ,mpm
07:16:25  53  ,mph
07:16:25  54  FROM svm6122
07:16:25  55  ORDER BY ydate
07:16:25  56  /

Table created.

Elapsed: 00:00:00.37
07:16:25 SQL> 
07:16:25 SQL> -- rpt
07:16:25 SQL> 
07:16:25 SQL> SELECT
07:16:25   2  pair
07:16:25   3  ,trend
07:16:25   4  ,gatt
07:16:25   5  ,COUNT(pair)
07:16:25   6  ,AVG(g6)
07:16:25   7  FROM svm6142
07:16:25   8  GROUP BY pair,trend,gatt
07:16:25   9  ORDER BY pair,trend,gatt
07:16:25  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7360 -.00197093
usd_chf 	-1 up	      3223 .003878809
usd_chf 	-1		15
usd_chf 	 1 nup	      6628 -.00163865
usd_chf 	 1 up	      2555 .003693704
usd_chf 	 1		57

6 rows selected.

Elapsed: 00:00:00.04
07:16:25 SQL> 
07:16:25 SQL> 
07:16:25 SQL> -- Derive NTILE based params:
07:16:25 SQL> 
07:16:25 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
07:16:26 SQL> CREATE TABLE svm6162 COMPRESS AS
07:16:26   2  SELECT
07:16:26   3  pair
07:16:26   4  ,ydate
07:16:26   5  ,prdate
07:16:26   6  ,clse
07:16:26   7  ,g6
07:16:26   8  ,gatt
07:16:26   9  ,gattn
07:16:26  10  ,trend
07:16:26  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
07:16:26  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
07:16:26  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
07:16:26  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
07:16:26  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
07:16:26  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
07:16:26  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
07:16:26  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
07:16:26  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
07:16:26  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
07:16:26  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
07:16:26  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
07:16:26  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
07:16:26  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
07:16:26  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
07:16:26  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
07:16:26  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
07:16:26  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
07:16:26  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
07:16:26  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
07:16:26  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
07:16:26  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
07:16:26  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
07:16:26  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
07:16:26  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
07:16:26  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
07:16:26  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
07:16:26  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
07:16:26  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
07:16:26  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
07:16:26  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
07:16:26  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
07:16:26  43  ,hh  att32
07:16:26  44  ,d   att33
07:16:26  45  ,w   att34
07:16:26  46  ,mpm att35
07:16:26  47  ,mph att36
07:16:26  48  ,trend att37
07:16:26  49  FROM svm6142
07:16:26  50  ORDER BY ydate
07:16:26  51  /

Table created.

Elapsed: 00:00:04.90
07:16:31 SQL> 
07:16:31 SQL> -- rpt
07:16:31 SQL> 
07:16:31 SQL> SELECT
07:16:31   2  pair
07:16:31   3  ,trend
07:16:31   4  ,gatt
07:16:31   5  ,COUNT(pair)
07:16:31   6  ,AVG(g6)
07:16:31   7  FROM svm6162
07:16:31   8  GROUP BY pair,trend,gatt
07:16:31   9  ORDER BY pair,trend,gatt
07:16:31  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7360 -.00197093
usd_chf 	-1 up	      3223 .003878809
usd_chf 	-1		15
usd_chf 	 1 nup	      6628 -.00163865
usd_chf 	 1 up	      2555 .003693704
usd_chf 	 1		57

6 rows selected.

Elapsed: 00:00:00.04
07:16:31 SQL> 
07:16:31 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.21
07:16:31 SQL> CREATE TABLE modsrc COMPRESS AS
07:16:31   2  SELECT
07:16:31   3  pair
07:16:31   4  ,ydate
07:16:31   5  ,prdate
07:16:31   6  ,trend
07:16:31   7  ,g6
07:16:31   8  ,gatt
07:16:31   9  ,gattn
07:16:31  10  FROM svm6162
07:16:31  11  /

Table created.

Elapsed: 00:00:00.09
07:16:31 SQL> 
07:16:31 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
07:16:31 SQL> 
07:16:31 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
07:16:31 SQL> CREATE TABLE chf_ms610 COMPRESS AS
07:16:31   2  SELECT
07:16:31   3  ydate
07:16:31   4  ,trend chf_trend
07:16:31   5  ,g6    chf_g6
07:16:31   6  ,gatt  chf_gatt
07:16:31   7  ,gattn chf_gattn
07:16:31   8  FROM modsrc
07:16:31   9  /

Table created.

Elapsed: 00:00:00.06
07:16:31 SQL> 
07:16:31 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
07:16:31 SQL> 
07:16:31 SQL> -- I need a copy of the attributes:
07:16:31 SQL> 
07:16:31 SQL> 
07:16:31 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.04
07:16:31 SQL> CREATE TABLE chf_att COMPRESS AS
07:16:31   2  SELECT
07:16:31   3  ydate
07:16:31   4  ,att00 chf_att00
07:16:31   5  ,att01 chf_att01
07:16:31   6  ,att02 chf_att02
07:16:31   7  ,att03 chf_att03
07:16:31   8  ,att04 chf_att04
07:16:31   9  ,att05 chf_att05
07:16:31  10  ,att06 chf_att06
07:16:31  11  ,att07 chf_att07
07:16:31  12  ,att08 chf_att08
07:16:31  13  ,att09 chf_att09
07:16:31  14  ,att10 chf_att10
07:16:31  15  ,att11 chf_att11
07:16:31  16  ,att12 chf_att12
07:16:31  17  ,att13 chf_att13
07:16:31  18  ,att14 chf_att14
07:16:31  19  ,att15 chf_att15
07:16:31  20  ,att16 chf_att16
07:16:31  21  ,att17 chf_att17
07:16:31  22  ,att18 chf_att18
07:16:31  23  ,att19 chf_att19
07:16:31  24  ,att20 chf_att20
07:16:31  25  ,att21 chf_att21
07:16:31  26  ,att22 chf_att22
07:16:31  27  ,att23 chf_att23
07:16:31  28  ,att24 chf_att24
07:16:31  29  ,att25 chf_att25
07:16:31  30  ,att26 chf_att26
07:16:31  31  ,att27 chf_att27
07:16:31  32  ,att28 chf_att28
07:16:31  33  ,att29 chf_att29
07:16:31  34  ,att30 chf_att30
07:16:31  35  ,att31 chf_att31
07:16:31  36  ,att32 chf_att32
07:16:31  37  ,att33 chf_att33
07:16:31  38  ,att34 chf_att34
07:16:31  39  ,att35 chf_att35
07:16:31  40  ,att36 chf_att36
07:16:31  41  ,att37 chf_att37
07:16:31  42  FROM svm6162
07:16:31  43  /

Table created.

Elapsed: 00:00:00.23
07:16:32 SQL> 
07:16:32 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
07:16:32 SQL> 
07:16:32 SQL> -- rpt
07:16:32 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19838

Elapsed: 00:00:00.85
07:16:33 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19838

Elapsed: 00:00:00.00
07:16:33 SQL> 
07:16:33 SQL> --
07:16:33 SQL> -- ech610.sql
07:16:33 SQL> --
07:16:33 SQL> 
07:16:33 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:16:33 SQL> 
07:16:33 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.33
07:16:33 SQL> 
07:16:33 SQL> -- I created di5min here:
07:16:33 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:16:33 SQL> 
07:16:33 SQL> CREATE OR REPLACE VIEW svm6102 AS
07:16:33   2  SELECT
07:16:33   3  pair
07:16:33   4  ,ydate
07:16:33   5  ,prdate
07:16:33   6  ,rownum rnum -- acts as t in my time-series
07:16:33   7  ,clse
07:16:33   8  -- Derive a bunch of attributes from clse, the latest price:
07:16:33   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
07:16:33  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
07:16:33  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
07:16:33  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
07:16:33  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
07:16:33  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
07:16:33  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
07:16:33  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
07:16:33  17  --
07:16:33  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
07:16:33  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
07:16:33  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
07:16:33  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
07:16:33  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
07:16:33  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
07:16:33  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
07:16:33  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
07:16:33  26  --
07:16:33  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
07:16:33  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
07:16:33  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
07:16:33  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
07:16:33  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
07:16:33  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
07:16:33  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
07:16:33  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
07:16:33  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
07:16:33  36  FROM di5min WHERE pair LIKE'%ech%'
07:16:33  37  AND ydate > sysdate - 95
07:16:33  38  ORDER BY ydate
07:16:33  39  /

View created.

Elapsed: 00:00:00.05
07:16:33 SQL> 
07:16:33 SQL> -- rpt
07:16:33 SQL> 
07:16:33 SQL> SELECT
07:16:33   2  pair
07:16:33   3  ,COUNT(pair)
07:16:33   4  ,MIN(clse),MAX(clse)
07:16:33   5  ,MIN(avg6),MAX(avg6)
07:16:33   6  ,MIN(ydate),MAX(ydate)
07:16:33   7  FROM svm6102
07:16:33   8  GROUP BY pair
07:16:33   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19837 1.24213032 1.38284305 1.24319868 1.37986485 2010-09-27 07:20:01 2010-12-31 07:10:00

Elapsed: 00:00:00.81
07:16:34 SQL> 
07:16:34 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
07:16:34 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.20
07:16:34 SQL> CREATE TABLE svm6122 COMPRESS AS
07:16:34   2  SELECT
07:16:34   3  pair
07:16:34   4  ,ydate
07:16:34   5  ,prdate
07:16:34   6  ,clse
07:16:34   7  -- g6 is important. I want to predict g6:
07:16:34   8  ,ld6 - clse g6
07:16:34   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
07:16:34  10  -- I want more attributes from the ones I derived above:
07:16:34  11  -- clse relation to moving-min
07:16:34  12  ,clse-min4  cm4
07:16:34  13  ,clse-min6  cm6
07:16:34  14  ,clse-min8  cm8
07:16:34  15  ,clse-min10 cm10
07:16:34  16  ,clse-min12 cm12
07:16:34  17  ,clse-min14 cm14
07:16:34  18  ,clse-min16 cm16
07:16:34  19  ,clse-min18 cm18
07:16:34  20  -- clse relation to moving-avg
07:16:34  21  ,clse-avg4  ca4
07:16:34  22  ,clse-avg6  ca6
07:16:34  23  ,clse-avg8  ca8
07:16:34  24  ,clse-avg10 ca10
07:16:34  25  ,clse-avg12 ca12
07:16:34  26  ,clse-avg14 ca14
07:16:34  27  ,clse-avg16 ca16
07:16:34  28  ,clse-avg18 ca18
07:16:34  29  -- clse relation to moving-max
07:16:34  30  ,clse-max4  cx4
07:16:34  31  ,clse-max6  cx6
07:16:34  32  ,clse-max8  cx8
07:16:34  33  ,clse-max10 cx10
07:16:34  34  ,clse-max12 cx12
07:16:34  35  ,clse-max14 cx14
07:16:34  36  ,clse-max16 cx16
07:16:34  37  ,clse-max18 cx18
07:16:34  38  -- Derive more attributes.
07:16:34  39  -- I want to use CORR() here to help SVM see the shape of the series.
07:16:34  40  -- But COVAR_POP is more stable:
07:16:34  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
07:16:34  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:16:34  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:16:34  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:16:34  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:16:34  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:16:34  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:16:34  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:16:34  49  -- Derive date related attributes:
07:16:34  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:16:34  51  ,0+TO_CHAR(ydate,'D')d
07:16:34  52  ,0+TO_CHAR(ydate,'W')w
07:16:34  53  -- mpm stands for minutes-past-midnight:
07:16:34  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:16:34  55  -- mph stands for minutes-past-hour:
07:16:34  56  ,0+TO_CHAR(ydate,'MI')mph
07:16:34  57  FROM svm6102
07:16:34  58  ORDER BY ydate
07:16:34  59  /

Table created.

Elapsed: 00:00:02.05
07:16:36 SQL> 
07:16:36 SQL> -- rpt
07:16:36 SQL> 
07:16:36 SQL> SELECT
07:16:36   2  pair
07:16:36   3  ,COUNT(pair)
07:16:36   4  ,MIN(clse),MAX(clse)
07:16:36   5  ,MIN(ydate),MAX(ydate)
07:16:36   6  FROM svm6122
07:16:36   7  GROUP BY pair
07:16:36   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19837 1.24213032 1.38284305 2010-09-27 07:20:01 2010-12-31 07:10:00

Elapsed: 00:00:00.04
07:16:36 SQL> 
07:16:36 SQL> -- Prepare for derivation of NTILE based params:
07:16:36 SQL> 
07:16:36 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.17
07:16:37 SQL> CREATE TABLE svm6142 COMPRESS AS
07:16:37   2  SELECT
07:16:37   3  pair
07:16:37   4  ,ydate
07:16:37   5  ,prdate
07:16:37   6  ,clse
07:16:37   7  ,g6
07:16:37   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
07:16:37   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
07:16:37  10  ,CASE WHEN trend IS NULL THEN 1
07:16:37  11  	    WHEN trend =0      THEN 1
07:16:37  12  	    ELSE trend END trend
07:16:37  13  ,cm4
07:16:37  14  ,cm6
07:16:37  15  ,cm8
07:16:37  16  ,cm10
07:16:37  17  ,cm12
07:16:37  18  ,cm14
07:16:37  19  ,cm16
07:16:37  20  ,cm18
07:16:37  21  --
07:16:37  22  ,ca4
07:16:37  23  ,ca6
07:16:37  24  ,ca8
07:16:37  25  ,ca10
07:16:37  26  ,ca12
07:16:37  27  ,ca14
07:16:37  28  ,ca16
07:16:37  29  ,ca18
07:16:37  30  --
07:16:37  31  ,cx4
07:16:37  32  ,cx6
07:16:37  33  ,cx8
07:16:37  34  ,cx10
07:16:37  35  ,cx12
07:16:37  36  ,cx14
07:16:37  37  ,cx16
07:16:37  38  ,cx18
07:16:37  39  --
07:16:37  40  ,crr4
07:16:37  41  ,crr6
07:16:37  42  ,crr8
07:16:37  43  ,crr10
07:16:37  44  ,crr12
07:16:37  45  ,crr14
07:16:37  46  ,crr16
07:16:37  47  ,crr18
07:16:37  48  --
07:16:37  49  ,hh
07:16:37  50  ,d
07:16:37  51  ,w
07:16:37  52  ,mpm
07:16:37  53  ,mph
07:16:37  54  FROM svm6122
07:16:37  55  ORDER BY ydate
07:16:37  56  /

Table created.

Elapsed: 00:00:00.38
07:16:37 SQL> 
07:16:37 SQL> -- rpt
07:16:37 SQL> 
07:16:37 SQL> SELECT
07:16:37   2  pair
07:16:37   3  ,trend
07:16:37   4  ,gatt
07:16:37   5  ,COUNT(pair)
07:16:37   6  ,AVG(g6)
07:16:37   7  FROM svm6142
07:16:37   8  GROUP BY pair,trend,gatt
07:16:37   9  ORDER BY pair,trend,gatt
07:16:37  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6674 -.00219737
ech_usd 	-1 up	      3691 .003551677
ech_usd 	-1		 3
ech_usd 	 1 nup	      6524 -.00231665
ech_usd 	 1 up	      2876 .003824409
ech_usd 	 1		69

6 rows selected.

Elapsed: 00:00:00.05
07:16:37 SQL> 
07:16:37 SQL> 
07:16:37 SQL> -- Derive NTILE based params:
07:16:37 SQL> 
07:16:37 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
07:16:37 SQL> CREATE TABLE svm6162 COMPRESS AS
07:16:37   2  SELECT
07:16:37   3  pair
07:16:37   4  ,ydate
07:16:37   5  ,prdate
07:16:37   6  ,clse
07:16:37   7  ,g6
07:16:37   8  ,gatt
07:16:37   9  ,gattn
07:16:37  10  ,trend
07:16:37  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
07:16:37  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
07:16:37  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
07:16:37  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
07:16:37  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
07:16:37  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
07:16:37  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
07:16:37  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
07:16:37  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
07:16:37  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
07:16:37  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
07:16:37  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
07:16:37  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
07:16:37  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
07:16:37  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
07:16:37  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
07:16:37  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
07:16:37  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
07:16:37  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
07:16:37  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
07:16:37  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
07:16:37  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
07:16:37  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
07:16:37  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
07:16:37  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
07:16:37  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
07:16:37  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
07:16:37  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
07:16:37  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
07:16:37  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
07:16:37  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
07:16:37  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
07:16:37  43  ,hh  att32
07:16:37  44  ,d   att33
07:16:37  45  ,w   att34
07:16:37  46  ,mpm att35
07:16:37  47  ,mph att36
07:16:37  48  ,trend att37
07:16:37  49  FROM svm6142
07:16:37  50  ORDER BY ydate
07:16:37  51  /

Table created.

Elapsed: 00:00:04.96
07:16:42 SQL> 
07:16:42 SQL> -- rpt
07:16:42 SQL> 
07:16:42 SQL> SELECT
07:16:42   2  pair
07:16:42   3  ,trend
07:16:42   4  ,gatt
07:16:42   5  ,COUNT(pair)
07:16:42   6  ,AVG(g6)
07:16:42   7  FROM svm6162
07:16:42   8  GROUP BY pair,trend,gatt
07:16:42   9  ORDER BY pair,trend,gatt
07:16:42  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6674 -.00219737
ech_usd 	-1 up	      3691 .003551677
ech_usd 	-1		 3
ech_usd 	 1 nup	      6524 -.00231665
ech_usd 	 1 up	      2876 .003824409
ech_usd 	 1		69

6 rows selected.

Elapsed: 00:00:00.03
07:16:42 SQL> 
07:16:42 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.11
07:16:42 SQL> CREATE TABLE modsrc COMPRESS AS
07:16:42   2  SELECT
07:16:42   3  pair
07:16:42   4  ,ydate
07:16:42   5  ,prdate
07:16:42   6  ,trend
07:16:42   7  ,g6
07:16:42   8  ,gatt
07:16:42   9  ,gattn
07:16:42  10  FROM svm6162
07:16:42  11  /

Table created.

Elapsed: 00:00:00.09
07:16:42 SQL> 
07:16:42 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
07:16:43 SQL> 
07:16:43 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
07:16:43 SQL> CREATE TABLE ech_ms610 COMPRESS AS
07:16:43   2  SELECT
07:16:43   3  ydate
07:16:43   4  ,trend ech_trend
07:16:43   5  ,g6    ech_g6
07:16:43   6  ,gatt  ech_gatt
07:16:43   7  ,gattn ech_gattn
07:16:43   8  FROM modsrc
07:16:43   9  /

Table created.

Elapsed: 00:00:00.06
07:16:43 SQL> 
07:16:43 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
07:16:43 SQL> 
07:16:43 SQL> -- I need a copy of the attributes:
07:16:43 SQL> 
07:16:43 SQL> 
07:16:43 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.05
07:16:43 SQL> CREATE TABLE ech_att COMPRESS AS
07:16:43   2  SELECT
07:16:43   3  ydate
07:16:43   4  ,att00 ech_att00
07:16:43   5  ,att01 ech_att01
07:16:43   6  ,att02 ech_att02
07:16:43   7  ,att03 ech_att03
07:16:43   8  ,att04 ech_att04
07:16:43   9  ,att05 ech_att05
07:16:43  10  ,att06 ech_att06
07:16:43  11  ,att07 ech_att07
07:16:43  12  ,att08 ech_att08
07:16:43  13  ,att09 ech_att09
07:16:43  14  ,att10 ech_att10
07:16:43  15  ,att11 ech_att11
07:16:43  16  ,att12 ech_att12
07:16:43  17  ,att13 ech_att13
07:16:43  18  ,att14 ech_att14
07:16:43  19  ,att15 ech_att15
07:16:43  20  ,att16 ech_att16
07:16:43  21  ,att17 ech_att17
07:16:43  22  ,att18 ech_att18
07:16:43  23  ,att19 ech_att19
07:16:43  24  ,att20 ech_att20
07:16:43  25  ,att21 ech_att21
07:16:43  26  ,att22 ech_att22
07:16:43  27  ,att23 ech_att23
07:16:43  28  ,att24 ech_att24
07:16:43  29  ,att25 ech_att25
07:16:43  30  ,att26 ech_att26
07:16:43  31  ,att27 ech_att27
07:16:43  32  ,att28 ech_att28
07:16:43  33  ,att29 ech_att29
07:16:43  34  ,att30 ech_att30
07:16:43  35  ,att31 ech_att31
07:16:43  36  ,att32 ech_att32
07:16:43  37  ,att33 ech_att33
07:16:43  38  ,att34 ech_att34
07:16:43  39  ,att35 ech_att35
07:16:43  40  ,att36 ech_att36
07:16:43  41  ,att37 ech_att37
07:16:43  42  FROM svm6162
07:16:43  43  /

Table created.

Elapsed: 00:00:00.63
07:16:43 SQL> 
07:16:43 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
07:16:44 SQL> 
07:16:44 SQL> -- rpt
07:16:44 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19837

Elapsed: 00:00:00.77
07:16:45 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19837

Elapsed: 00:00:00.01
07:16:45 SQL> 
07:16:45 SQL> --
07:16:45 SQL> -- egb610.sql
07:16:45 SQL> --
07:16:45 SQL> 
07:16:45 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:16:45 SQL> 
07:16:45 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.34
07:16:45 SQL> 
07:16:45 SQL> -- I created di5min here:
07:16:45 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:16:45 SQL> 
07:16:45 SQL> CREATE OR REPLACE VIEW svm6102 AS
07:16:45   2  SELECT
07:16:45   3  pair
07:16:45   4  ,ydate
07:16:45   5  ,prdate
07:16:45   6  ,rownum rnum -- acts as t in my time-series
07:16:45   7  ,clse
07:16:45   8  -- Derive a bunch of attributes from clse, the latest price:
07:16:45   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
07:16:45  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
07:16:45  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
07:16:45  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
07:16:45  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
07:16:45  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
07:16:45  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
07:16:45  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
07:16:45  17  --
07:16:45  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
07:16:45  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
07:16:45  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
07:16:45  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
07:16:45  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
07:16:45  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
07:16:45  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
07:16:45  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
07:16:45  26  --
07:16:45  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
07:16:45  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
07:16:45  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
07:16:45  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
07:16:45  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
07:16:45  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
07:16:45  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
07:16:45  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
07:16:45  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
07:16:45  36  FROM di5min WHERE pair LIKE'%egb%'
07:16:45  37  AND ydate > sysdate - 95
07:16:45  38  ORDER BY ydate
07:16:45  39  /

View created.

Elapsed: 00:00:00.05
07:16:45 SQL> 
07:16:45 SQL> -- rpt
07:16:45 SQL> 
07:16:45 SQL> SELECT
07:16:45   2  pair
07:16:45   3  ,COUNT(pair)
07:16:45   4  ,MIN(clse),MAX(clse)
07:16:45   5  ,MIN(avg6),MAX(avg6)
07:16:45   6  ,MIN(ydate),MAX(ydate)
07:16:45   7  FROM svm6102
07:16:45   8  GROUP BY pair
07:16:45   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19836 .833520557 .893920122 .834199029 .892400287 2010-09-27 07:20:01 2010-12-31 07:10:00

Elapsed: 00:00:00.96
07:16:46 SQL> 
07:16:46 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
07:16:46 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.19
07:16:46 SQL> CREATE TABLE svm6122 COMPRESS AS
07:16:46   2  SELECT
07:16:46   3  pair
07:16:46   4  ,ydate
07:16:46   5  ,prdate
07:16:46   6  ,clse
07:16:46   7  -- g6 is important. I want to predict g6:
07:16:46   8  ,ld6 - clse g6
07:16:46   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
07:16:46  10  -- I want more attributes from the ones I derived above:
07:16:46  11  -- clse relation to moving-min
07:16:46  12  ,clse-min4  cm4
07:16:46  13  ,clse-min6  cm6
07:16:46  14  ,clse-min8  cm8
07:16:46  15  ,clse-min10 cm10
07:16:46  16  ,clse-min12 cm12
07:16:46  17  ,clse-min14 cm14
07:16:46  18  ,clse-min16 cm16
07:16:46  19  ,clse-min18 cm18
07:16:46  20  -- clse relation to moving-avg
07:16:46  21  ,clse-avg4  ca4
07:16:46  22  ,clse-avg6  ca6
07:16:46  23  ,clse-avg8  ca8
07:16:46  24  ,clse-avg10 ca10
07:16:46  25  ,clse-avg12 ca12
07:16:46  26  ,clse-avg14 ca14
07:16:46  27  ,clse-avg16 ca16
07:16:46  28  ,clse-avg18 ca18
07:16:46  29  -- clse relation to moving-max
07:16:46  30  ,clse-max4  cx4
07:16:46  31  ,clse-max6  cx6
07:16:46  32  ,clse-max8  cx8
07:16:46  33  ,clse-max10 cx10
07:16:46  34  ,clse-max12 cx12
07:16:46  35  ,clse-max14 cx14
07:16:46  36  ,clse-max16 cx16
07:16:46  37  ,clse-max18 cx18
07:16:46  38  -- Derive more attributes.
07:16:46  39  -- I want to use CORR() here to help SVM see the shape of the series.
07:16:46  40  -- But COVAR_POP is more stable:
07:16:46  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
07:16:46  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:16:46  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:16:46  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:16:46  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:16:46  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:16:46  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:16:46  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:16:46  49  -- Derive date related attributes:
07:16:46  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:16:46  51  ,0+TO_CHAR(ydate,'D')d
07:16:46  52  ,0+TO_CHAR(ydate,'W')w
07:16:46  53  -- mpm stands for minutes-past-midnight:
07:16:46  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:16:46  55  -- mph stands for minutes-past-hour:
07:16:46  56  ,0+TO_CHAR(ydate,'MI')mph
07:16:46  57  FROM svm6102
07:16:46  58  ORDER BY ydate
07:16:46  59  /

Table created.

Elapsed: 00:00:02.51
07:16:49 SQL> 
07:16:49 SQL> -- rpt
07:16:49 SQL> 
07:16:49 SQL> SELECT
07:16:49   2  pair
07:16:49   3  ,COUNT(pair)
07:16:49   4  ,MIN(clse),MAX(clse)
07:16:49   5  ,MIN(ydate),MAX(ydate)
07:16:49   6  FROM svm6122
07:16:49   7  GROUP BY pair
07:16:49   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19836 .833520557 .893920122 2010-09-27 07:20:01 2010-12-31 07:10:00

Elapsed: 00:00:00.04
07:16:49 SQL> 
07:16:49 SQL> -- Prepare for derivation of NTILE based params:
07:16:49 SQL> 
07:16:49 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.30
07:16:49 SQL> CREATE TABLE svm6142 COMPRESS AS
07:16:49   2  SELECT
07:16:49   3  pair
07:16:49   4  ,ydate
07:16:49   5  ,prdate
07:16:49   6  ,clse
07:16:49   7  ,g6
07:16:49   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
07:16:49   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
07:16:49  10  ,CASE WHEN trend IS NULL THEN 1
07:16:49  11  	    WHEN trend =0      THEN 1
07:16:49  12  	    ELSE trend END trend
07:16:49  13  ,cm4
07:16:49  14  ,cm6
07:16:49  15  ,cm8
07:16:49  16  ,cm10
07:16:49  17  ,cm12
07:16:49  18  ,cm14
07:16:49  19  ,cm16
07:16:49  20  ,cm18
07:16:49  21  --
07:16:49  22  ,ca4
07:16:49  23  ,ca6
07:16:49  24  ,ca8
07:16:49  25  ,ca10
07:16:49  26  ,ca12
07:16:49  27  ,ca14
07:16:49  28  ,ca16
07:16:49  29  ,ca18
07:16:49  30  --
07:16:49  31  ,cx4
07:16:49  32  ,cx6
07:16:49  33  ,cx8
07:16:49  34  ,cx10
07:16:49  35  ,cx12
07:16:49  36  ,cx14
07:16:49  37  ,cx16
07:16:49  38  ,cx18
07:16:49  39  --
07:16:49  40  ,crr4
07:16:49  41  ,crr6
07:16:49  42  ,crr8
07:16:49  43  ,crr10
07:16:49  44  ,crr12
07:16:49  45  ,crr14
07:16:49  46  ,crr16
07:16:49  47  ,crr18
07:16:49  48  --
07:16:49  49  ,hh
07:16:49  50  ,d
07:16:49  51  ,w
07:16:49  52  ,mpm
07:16:49  53  ,mph
07:16:49  54  FROM svm6122
07:16:49  55  ORDER BY ydate
07:16:49  56  /

Table created.

Elapsed: 00:00:00.44
07:16:50 SQL> 
07:16:50 SQL> -- rpt
07:16:50 SQL> 
07:16:50 SQL> SELECT
07:16:50   2  pair
07:16:50   3  ,trend
07:16:50   4  ,gatt
07:16:50   5  ,COUNT(pair)
07:16:50   6  ,AVG(g6)
07:16:50   7  FROM svm6142
07:16:50   8  GROUP BY pair,trend,gatt
07:16:50   9  ORDER BY pair,trend,gatt
07:16:50  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7402 -.00098547
egb_usd 	-1 up	      2785 .003086092
egb_usd 	-1		59
egb_usd 	 1 nup	      6809 -.00128024
egb_usd 	 1 up	      2768 .002961387
egb_usd 	 1		13

6 rows selected.

Elapsed: 00:00:00.04
07:16:50 SQL> 
07:16:50 SQL> 
07:16:50 SQL> -- Derive NTILE based params:
07:16:50 SQL> 
07:16:50 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.28
07:16:50 SQL> CREATE TABLE svm6162 COMPRESS AS
07:16:50   2  SELECT
07:16:50   3  pair
07:16:50   4  ,ydate
07:16:50   5  ,prdate
07:16:50   6  ,clse
07:16:50   7  ,g6
07:16:50   8  ,gatt
07:16:50   9  ,gattn
07:16:50  10  ,trend
07:16:50  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
07:16:50  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
07:16:50  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
07:16:50  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
07:16:50  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
07:16:50  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
07:16:50  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
07:16:50  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
07:16:50  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
07:16:50  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
07:16:50  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
07:16:50  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
07:16:50  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
07:16:50  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
07:16:50  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
07:16:50  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
07:16:50  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
07:16:50  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
07:16:50  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
07:16:50  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
07:16:50  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
07:16:50  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
07:16:50  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
07:16:50  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
07:16:50  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
07:16:50  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
07:16:50  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
07:16:50  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
07:16:50  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
07:16:50  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
07:16:50  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
07:16:50  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
07:16:50  43  ,hh  att32
07:16:50  44  ,d   att33
07:16:50  45  ,w   att34
07:16:50  46  ,mpm att35
07:16:50  47  ,mph att36
07:16:50  48  ,trend att37
07:16:50  49  FROM svm6142
07:16:50  50  ORDER BY ydate
07:16:50  51  /

Table created.

Elapsed: 00:00:05.75
07:16:56 SQL> 
07:16:56 SQL> -- rpt
07:16:56 SQL> 
07:16:56 SQL> SELECT
07:16:56   2  pair
07:16:56   3  ,trend
07:16:56   4  ,gatt
07:16:56   5  ,COUNT(pair)
07:16:56   6  ,AVG(g6)
07:16:56   7  FROM svm6162
07:16:56   8  GROUP BY pair,trend,gatt
07:16:56   9  ORDER BY pair,trend,gatt
07:16:56  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7402 -.00098547
egb_usd 	-1 up	      2785 .003086092
egb_usd 	-1		59
egb_usd 	 1 nup	      6809 -.00128024
egb_usd 	 1 up	      2768 .002961387
egb_usd 	 1		13

6 rows selected.

Elapsed: 00:00:00.03
07:16:56 SQL> 
07:16:56 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.22
07:16:56 SQL> CREATE TABLE modsrc COMPRESS AS
07:16:56   2  SELECT
07:16:56   3  pair
07:16:56   4  ,ydate
07:16:56   5  ,prdate
07:16:56   6  ,trend
07:16:56   7  ,g6
07:16:56   8  ,gatt
07:16:56   9  ,gattn
07:16:56  10  FROM svm6162
07:16:56  11  /

Table created.

Elapsed: 00:00:00.08
07:16:56 SQL> 
07:16:56 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
07:16:56 SQL> 
07:16:56 SQL> DROP   TABLE egb_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
07:16:56 SQL> CREATE TABLE egb_ms610 COMPRESS AS
07:16:56   2  SELECT
07:16:56   3  ydate
07:16:56   4  ,trend egb_trend
07:16:56   5  ,g6    egb_g6
07:16:56   6  ,gatt  egb_gatt
07:16:56   7  ,gattn egb_gattn
07:16:56   8  FROM modsrc
07:16:56   9  /

Table created.

Elapsed: 00:00:00.06
07:16:56 SQL> 
07:16:56 SQL> ANALYZE TABLE egb_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
07:16:56 SQL> 
07:16:56 SQL> -- I need a copy of the attributes:
07:16:56 SQL> 
07:16:56 SQL> 
07:16:56 SQL> DROP   TABLE egb_att;

Table dropped.

Elapsed: 00:00:00.05
07:16:57 SQL> CREATE TABLE egb_att COMPRESS AS
07:16:57   2  SELECT
07:16:57   3  ydate
07:16:57   4  ,att00 egb_att00
07:16:57   5  ,att01 egb_att01
07:16:57   6  ,att02 egb_att02
07:16:57   7  ,att03 egb_att03
07:16:57   8  ,att04 egb_att04
07:16:57   9  ,att05 egb_att05
07:16:57  10  ,att06 egb_att06
07:16:57  11  ,att07 egb_att07
07:16:57  12  ,att08 egb_att08
07:16:57  13  ,att09 egb_att09
07:16:57  14  ,att10 egb_att10
07:16:57  15  ,att11 egb_att11
07:16:57  16  ,att12 egb_att12
07:16:57  17  ,att13 egb_att13
07:16:57  18  ,att14 egb_att14
07:16:57  19  ,att15 egb_att15
07:16:57  20  ,att16 egb_att16
07:16:57  21  ,att17 egb_att17
07:16:57  22  ,att18 egb_att18
07:16:57  23  ,att19 egb_att19
07:16:57  24  ,att20 egb_att20
07:16:57  25  ,att21 egb_att21
07:16:57  26  ,att22 egb_att22
07:16:57  27  ,att23 egb_att23
07:16:57  28  ,att24 egb_att24
07:16:57  29  ,att25 egb_att25
07:16:57  30  ,att26 egb_att26
07:16:57  31  ,att27 egb_att27
07:16:57  32  ,att28 egb_att28
07:16:57  33  ,att29 egb_att29
07:16:57  34  ,att30 egb_att30
07:16:57  35  ,att31 egb_att31
07:16:57  36  ,att32 egb_att32
07:16:57  37  ,att33 egb_att33
07:16:57  38  ,att34 egb_att34
07:16:57  39  ,att35 egb_att35
07:16:57  40  ,att36 egb_att36
07:16:57  41  ,att37 egb_att37
07:16:57  42  FROM svm6162
07:16:57  43  /

Table created.

Elapsed: 00:00:00.16
07:16:57 SQL> 
07:16:57 SQL> ANALYZE TABLE egb_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
07:16:57 SQL> 
07:16:57 SQL> -- rpt
07:16:57 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19836

Elapsed: 00:00:00.94
07:16:58 SQL> SELECT COUNT(*)FROM egb_att;

  COUNT(*)
----------
     19836

Elapsed: 00:00:00.00
07:16:58 SQL> 
07:16:58 SQL> --
07:16:58 SQL> -- ejp610.sql
07:16:58 SQL> --
07:16:58 SQL> 
07:16:58 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:16:58 SQL> 
07:16:58 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.98
07:16:59 SQL> 
07:16:59 SQL> -- I created di5min here:
07:16:59 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:16:59 SQL> 
07:16:59 SQL> CREATE OR REPLACE VIEW svm6102 AS
07:16:59   2  SELECT
07:16:59   3  pair
07:16:59   4  ,ydate
07:16:59   5  ,prdate
07:16:59   6  ,rownum rnum -- acts as t in my time-series
07:16:59   7  ,clse
07:16:59   8  -- Derive a bunch of attributes from clse, the latest price:
07:16:59   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
07:16:59  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
07:16:59  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
07:16:59  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
07:16:59  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
07:16:59  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
07:16:59  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
07:16:59  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
07:16:59  17  --
07:16:59  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
07:16:59  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
07:16:59  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
07:16:59  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
07:16:59  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
07:16:59  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
07:16:59  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
07:16:59  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
07:16:59  26  --
07:16:59  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
07:16:59  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
07:16:59  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
07:16:59  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
07:16:59  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
07:16:59  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
07:16:59  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
07:16:59  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
07:16:59  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
07:16:59  36  FROM di5min WHERE pair LIKE'%ejp%'
07:16:59  37  AND ydate > sysdate - 95
07:16:59  38  ORDER BY ydate
07:16:59  39  /

View created.

Elapsed: 00:00:00.05
07:16:59 SQL> 
07:16:59 SQL> -- rpt
07:16:59 SQL> 
07:16:59 SQL> SELECT
07:16:59   2  pair
07:16:59   3  ,COUNT(pair)
07:16:59   4  ,MIN(clse),MAX(clse)
07:16:59   5  ,MIN(avg6),MAX(avg6)
07:16:59   6  ,MIN(ydate),MAX(ydate)
07:16:59   7  FROM svm6102
07:16:59   8  GROUP BY pair
07:16:59   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ejp_usd       19834 107.643765	115.63485 107.776148 115.509678 2010-09-27 07:20:01 2010-12-31 07:10:00

Elapsed: 00:00:00.87
07:17:00 SQL> 
07:17:00 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
07:17:00 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.21
07:17:00 SQL> CREATE TABLE svm6122 COMPRESS AS
07:17:00   2  SELECT
07:17:00   3  pair
07:17:00   4  ,ydate
07:17:00   5  ,prdate
07:17:00   6  ,clse
07:17:00   7  -- g6 is important. I want to predict g6:
07:17:00   8  ,ld6 - clse g6
07:17:00   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
07:17:00  10  -- I want more attributes from the ones I derived above:
07:17:00  11  -- clse relation to moving-min
07:17:00  12  ,clse-min4  cm4
07:17:00  13  ,clse-min6  cm6
07:17:00  14  ,clse-min8  cm8
07:17:00  15  ,clse-min10 cm10
07:17:00  16  ,clse-min12 cm12
07:17:00  17  ,clse-min14 cm14
07:17:00  18  ,clse-min16 cm16
07:17:00  19  ,clse-min18 cm18
07:17:00  20  -- clse relation to moving-avg
07:17:00  21  ,clse-avg4  ca4
07:17:00  22  ,clse-avg6  ca6
07:17:00  23  ,clse-avg8  ca8
07:17:00  24  ,clse-avg10 ca10
07:17:00  25  ,clse-avg12 ca12
07:17:00  26  ,clse-avg14 ca14
07:17:00  27  ,clse-avg16 ca16
07:17:00  28  ,clse-avg18 ca18
07:17:00  29  -- clse relation to moving-max
07:17:00  30  ,clse-max4  cx4
07:17:00  31  ,clse-max6  cx6
07:17:00  32  ,clse-max8  cx8
07:17:00  33  ,clse-max10 cx10
07:17:00  34  ,clse-max12 cx12
07:17:00  35  ,clse-max14 cx14
07:17:00  36  ,clse-max16 cx16
07:17:00  37  ,clse-max18 cx18
07:17:00  38  -- Derive more attributes.
07:17:00  39  -- I want to use CORR() here to help SVM see the shape of the series.
07:17:00  40  -- But COVAR_POP is more stable:
07:17:00  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
07:17:00  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:17:00  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:17:00  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:17:00  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:17:00  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:17:00  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:17:00  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:17:00  49  -- Derive date related attributes:
07:17:00  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:17:00  51  ,0+TO_CHAR(ydate,'D')d
07:17:00  52  ,0+TO_CHAR(ydate,'W')w
07:17:00  53  -- mpm stands for minutes-past-midnight:
07:17:00  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:17:00  55  -- mph stands for minutes-past-hour:
07:17:00  56  ,0+TO_CHAR(ydate,'MI')mph
07:17:00  57  FROM svm6102
07:17:00  58  ORDER BY ydate
07:17:00  59  /

Table created.

Elapsed: 00:00:02.15
07:17:02 SQL> 
07:17:02 SQL> -- rpt
07:17:02 SQL> 
07:17:02 SQL> SELECT
07:17:02   2  pair
07:17:02   3  ,COUNT(pair)
07:17:02   4  ,MIN(clse),MAX(clse)
07:17:02   5  ,MIN(ydate),MAX(ydate)
07:17:02   6  FROM svm6122
07:17:02   7  GROUP BY pair
07:17:02   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ejp_usd       19834 107.643765	115.63485 2010-09-27 07:20:01 2010-12-31 07:10:00

Elapsed: 00:00:00.05
07:17:02 SQL> 
07:17:02 SQL> -- Prepare for derivation of NTILE based params:
07:17:02 SQL> 
07:17:02 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.21
07:17:03 SQL> CREATE TABLE svm6142 COMPRESS AS
07:17:03   2  SELECT
07:17:03   3  pair
07:17:03   4  ,ydate
07:17:03   5  ,prdate
07:17:03   6  ,clse
07:17:03   7  ,g6
07:17:03   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
07:17:03   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
07:17:03  10  ,CASE WHEN trend IS NULL THEN 1
07:17:03  11  	    WHEN trend =0      THEN 1
07:17:03  12  	    ELSE trend END trend
07:17:03  13  ,cm4
07:17:03  14  ,cm6
07:17:03  15  ,cm8
07:17:03  16  ,cm10
07:17:03  17  ,cm12
07:17:03  18  ,cm14
07:17:03  19  ,cm16
07:17:03  20  ,cm18
07:17:03  21  --
07:17:03  22  ,ca4
07:17:03  23  ,ca6
07:17:03  24  ,ca8
07:17:03  25  ,ca10
07:17:03  26  ,ca12
07:17:03  27  ,ca14
07:17:03  28  ,ca16
07:17:03  29  ,ca18
07:17:03  30  --
07:17:03  31  ,cx4
07:17:03  32  ,cx6
07:17:03  33  ,cx8
07:17:03  34  ,cx10
07:17:03  35  ,cx12
07:17:03  36  ,cx14
07:17:03  37  ,cx16
07:17:03  38  ,cx18
07:17:03  39  --
07:17:03  40  ,crr4
07:17:03  41  ,crr6
07:17:03  42  ,crr8
07:17:03  43  ,crr10
07:17:03  44  ,crr12
07:17:03  45  ,crr14
07:17:03  46  ,crr16
07:17:03  47  ,crr18
07:17:03  48  --
07:17:03  49  ,hh
07:17:03  50  ,d
07:17:03  51  ,w
07:17:03  52  ,mpm
07:17:03  53  ,mph
07:17:03  54  FROM svm6122
07:17:03  55  ORDER BY ydate
07:17:03  56  /

Table created.

Elapsed: 00:00:00.46
07:17:03 SQL> 
07:17:03 SQL> -- rpt
07:17:03 SQL> 
07:17:03 SQL> SELECT
07:17:03   2  pair
07:17:03   3  ,trend
07:17:03   4  ,gatt
07:17:03   5  ,COUNT(pair)
07:17:03   6  ,AVG(g6)
07:17:03   7  FROM svm6142
07:17:03   8  GROUP BY pair,trend,gatt
07:17:03   9  ORDER BY pair,trend,gatt
07:17:03  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4868 -.32336356
ejp_usd 	-1 up	      5057 .268925282
ejp_usd 	-1		18
ejp_usd 	 1 nup	      5094 -.28742319
ejp_usd 	 1 up	      4743 .278625999
ejp_usd 	 1		54

6 rows selected.

Elapsed: 00:00:00.04
07:17:03 SQL> 
07:17:03 SQL> 
07:17:03 SQL> -- Derive NTILE based params:
07:17:03 SQL> 
07:17:03 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.14
07:17:03 SQL> CREATE TABLE svm6162 COMPRESS AS
07:17:03   2  SELECT
07:17:03   3  pair
07:17:03   4  ,ydate
07:17:03   5  ,prdate
07:17:03   6  ,clse
07:17:03   7  ,g6
07:17:03   8  ,gatt
07:17:03   9  ,gattn
07:17:03  10  ,trend
07:17:03  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
07:17:03  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
07:17:03  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
07:17:03  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
07:17:03  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
07:17:03  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
07:17:03  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
07:17:03  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
07:17:03  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
07:17:03  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
07:17:03  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
07:17:03  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
07:17:03  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
07:17:03  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
07:17:03  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
07:17:03  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
07:17:03  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
07:17:03  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
07:17:03  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
07:17:03  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
07:17:03  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
07:17:03  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
07:17:03  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
07:17:03  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
07:17:03  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
07:17:03  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
07:17:03  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
07:17:03  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
07:17:03  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
07:17:03  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
07:17:03  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
07:17:03  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
07:17:03  43  ,hh  att32
07:17:03  44  ,d   att33
07:17:03  45  ,w   att34
07:17:03  46  ,mpm att35
07:17:03  47  ,mph att36
07:17:03  48  ,trend att37
07:17:03  49  FROM svm6142
07:17:03  50  ORDER BY ydate
07:17:03  51  /

Table created.

Elapsed: 00:00:04.98
07:17:08 SQL> 
07:17:08 SQL> -- rpt
07:17:08 SQL> 
07:17:08 SQL> SELECT
07:17:08   2  pair
07:17:08   3  ,trend
07:17:08   4  ,gatt
07:17:08   5  ,COUNT(pair)
07:17:08   6  ,AVG(g6)
07:17:08   7  FROM svm6162
07:17:08   8  GROUP BY pair,trend,gatt
07:17:08   9  ORDER BY pair,trend,gatt
07:17:08  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4868 -.32336356
ejp_usd 	-1 up	      5057 .268925282
ejp_usd 	-1		18
ejp_usd 	 1 nup	      5094 -.28742319
ejp_usd 	 1 up	      4743 .278625999
ejp_usd 	 1		54

6 rows selected.

Elapsed: 00:00:00.03
07:17:08 SQL> 
07:17:08 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
07:17:08 SQL> CREATE TABLE modsrc COMPRESS AS
07:17:08   2  SELECT
07:17:08   3  pair
07:17:08   4  ,ydate
07:17:08   5  ,prdate
07:17:08   6  ,trend
07:17:08   7  ,g6
07:17:08   8  ,gatt
07:17:08   9  ,gattn
07:17:08  10  FROM svm6162
07:17:08  11  /

Table created.

Elapsed: 00:00:00.10
07:17:08 SQL> 
07:17:08 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.24
07:17:09 SQL> 
07:17:09 SQL> DROP   TABLE ejp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
07:17:09 SQL> CREATE TABLE ejp_ms610 COMPRESS AS
07:17:09   2  SELECT
07:17:09   3  ydate
07:17:09   4  ,trend ejp_trend
07:17:09   5  ,g6    ejp_g6
07:17:09   6  ,gatt  ejp_gatt
07:17:09   7  ,gattn ejp_gattn
07:17:09   8  FROM modsrc
07:17:09   9  /

Table created.

Elapsed: 00:00:00.07
07:17:09 SQL> 
07:17:09 SQL> ANALYZE TABLE ejp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
07:17:09 SQL> 
07:17:09 SQL> -- I need a copy of the attributes:
07:17:09 SQL> 
07:17:09 SQL> 
07:17:09 SQL> DROP   TABLE ejp_att;

Table dropped.

Elapsed: 00:00:00.04
07:17:09 SQL> CREATE TABLE ejp_att COMPRESS AS
07:17:09   2  SELECT
07:17:09   3  ydate
07:17:09   4  ,att00 ejp_att00
07:17:09   5  ,att01 ejp_att01
07:17:09   6  ,att02 ejp_att02
07:17:09   7  ,att03 ejp_att03
07:17:09   8  ,att04 ejp_att04
07:17:09   9  ,att05 ejp_att05
07:17:09  10  ,att06 ejp_att06
07:17:09  11  ,att07 ejp_att07
07:17:09  12  ,att08 ejp_att08
07:17:09  13  ,att09 ejp_att09
07:17:09  14  ,att10 ejp_att10
07:17:09  15  ,att11 ejp_att11
07:17:09  16  ,att12 ejp_att12
07:17:09  17  ,att13 ejp_att13
07:17:09  18  ,att14 ejp_att14
07:17:09  19  ,att15 ejp_att15
07:17:09  20  ,att16 ejp_att16
07:17:09  21  ,att17 ejp_att17
07:17:09  22  ,att18 ejp_att18
07:17:09  23  ,att19 ejp_att19
07:17:09  24  ,att20 ejp_att20
07:17:09  25  ,att21 ejp_att21
07:17:09  26  ,att22 ejp_att22
07:17:09  27  ,att23 ejp_att23
07:17:09  28  ,att24 ejp_att24
07:17:09  29  ,att25 ejp_att25
07:17:09  30  ,att26 ejp_att26
07:17:09  31  ,att27 ejp_att27
07:17:09  32  ,att28 ejp_att28
07:17:09  33  ,att29 ejp_att29
07:17:09  34  ,att30 ejp_att30
07:17:09  35  ,att31 ejp_att31
07:17:09  36  ,att32 ejp_att32
07:17:09  37  ,att33 ejp_att33
07:17:09  38  ,att34 ejp_att34
07:17:09  39  ,att35 ejp_att35
07:17:09  40  ,att36 ejp_att36
07:17:09  41  ,att37 ejp_att37
07:17:09  42  FROM svm6162
07:17:09  43  /

Table created.

Elapsed: 00:00:00.16
07:17:09 SQL> 
07:17:09 SQL> ANALYZE TABLE ejp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
07:17:10 SQL> 
07:17:10 SQL> -- rpt
07:17:10 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19834

Elapsed: 00:00:00.85
07:17:10 SQL> SELECT COUNT(*)FROM ejp_att;

  COUNT(*)
----------
     19834

Elapsed: 00:00:00.00
07:17:10 SQL> 
07:17:10 SQL> --
07:17:10 SQL> -- ajp610.sql
07:17:10 SQL> --
07:17:10 SQL> 
07:17:10 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:17:10 SQL> 
07:17:10 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.46
07:17:11 SQL> 
07:17:11 SQL> -- I created di5min here:
07:17:11 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:17:11 SQL> 
07:17:11 SQL> CREATE OR REPLACE VIEW svm6102 AS
07:17:11   2  SELECT
07:17:11   3  pair
07:17:11   4  ,ydate
07:17:11   5  ,prdate
07:17:11   6  ,rownum rnum -- acts as t in my time-series
07:17:11   7  ,clse
07:17:11   8  -- Derive a bunch of attributes from clse, the latest price:
07:17:11   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
07:17:11  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
07:17:11  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
07:17:11  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
07:17:11  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
07:17:11  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
07:17:11  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
07:17:11  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
07:17:11  17  --
07:17:11  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
07:17:11  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
07:17:11  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
07:17:11  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
07:17:11  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
07:17:11  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
07:17:11  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
07:17:11  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
07:17:11  26  --
07:17:11  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
07:17:11  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
07:17:11  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
07:17:11  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
07:17:11  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
07:17:11  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
07:17:11  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
07:17:11  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
07:17:11  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
07:17:11  36  FROM di5min WHERE pair LIKE'%ajp%'
07:17:11  37  AND ydate > sysdate - 95
07:17:11  38  ORDER BY ydate
07:17:11  39  /

View created.

Elapsed: 00:00:00.05
07:17:11 SQL> 
07:17:11 SQL> -- rpt
07:17:11 SQL> 
07:17:11 SQL> SELECT
07:17:11   2  pair
07:17:11   3  ,COUNT(pair)
07:17:11   4  ,MIN(clse),MAX(clse)
07:17:11   5  ,MIN(avg6),MAX(avg6)
07:17:11   6  ,MIN(ydate),MAX(ydate)
07:17:11   7  FROM svm6102
07:17:11   8  GROUP BY pair
07:17:11   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ajp_usd       19831  78.249976 83.6669853 78.5106193  83.546306 2010-09-27 07:20:01 2010-12-31 07:10:00

Elapsed: 00:00:00.80
07:17:12 SQL> 
07:17:12 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
07:17:12 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.20
07:17:12 SQL> CREATE TABLE svm6122 COMPRESS AS
07:17:12   2  SELECT
07:17:12   3  pair
07:17:12   4  ,ydate
07:17:12   5  ,prdate
07:17:12   6  ,clse
07:17:12   7  -- g6 is important. I want to predict g6:
07:17:12   8  ,ld6 - clse g6
07:17:12   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
07:17:12  10  -- I want more attributes from the ones I derived above:
07:17:12  11  -- clse relation to moving-min
07:17:12  12  ,clse-min4  cm4
07:17:12  13  ,clse-min6  cm6
07:17:12  14  ,clse-min8  cm8
07:17:12  15  ,clse-min10 cm10
07:17:12  16  ,clse-min12 cm12
07:17:12  17  ,clse-min14 cm14
07:17:12  18  ,clse-min16 cm16
07:17:12  19  ,clse-min18 cm18
07:17:12  20  -- clse relation to moving-avg
07:17:12  21  ,clse-avg4  ca4
07:17:12  22  ,clse-avg6  ca6
07:17:12  23  ,clse-avg8  ca8
07:17:12  24  ,clse-avg10 ca10
07:17:12  25  ,clse-avg12 ca12
07:17:12  26  ,clse-avg14 ca14
07:17:12  27  ,clse-avg16 ca16
07:17:12  28  ,clse-avg18 ca18
07:17:12  29  -- clse relation to moving-max
07:17:12  30  ,clse-max4  cx4
07:17:12  31  ,clse-max6  cx6
07:17:12  32  ,clse-max8  cx8
07:17:12  33  ,clse-max10 cx10
07:17:12  34  ,clse-max12 cx12
07:17:12  35  ,clse-max14 cx14
07:17:12  36  ,clse-max16 cx16
07:17:12  37  ,clse-max18 cx18
07:17:12  38  -- Derive more attributes.
07:17:12  39  -- I want to use CORR() here to help SVM see the shape of the series.
07:17:12  40  -- But COVAR_POP is more stable:
07:17:12  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
07:17:12  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:17:12  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:17:12  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:17:12  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:17:12  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:17:12  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:17:12  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:17:12  49  -- Derive date related attributes:
07:17:12  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:17:12  51  ,0+TO_CHAR(ydate,'D')d
07:17:12  52  ,0+TO_CHAR(ydate,'W')w
07:17:12  53  -- mpm stands for minutes-past-midnight:
07:17:12  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:17:12  55  -- mph stands for minutes-past-hour:
07:17:12  56  ,0+TO_CHAR(ydate,'MI')mph
07:17:12  57  FROM svm6102
07:17:12  58  ORDER BY ydate
07:17:12  59  /

Table created.

Elapsed: 00:00:02.14
07:17:14 SQL> 
07:17:14 SQL> -- rpt
07:17:14 SQL> 
07:17:14 SQL> SELECT
07:17:14   2  pair
07:17:14   3  ,COUNT(pair)
07:17:14   4  ,MIN(clse),MAX(clse)
07:17:14   5  ,MIN(ydate),MAX(ydate)
07:17:14   6  FROM svm6122
07:17:14   7  GROUP BY pair
07:17:14   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ajp_usd       19831  78.249976 83.6669853 2010-09-27 07:20:01 2010-12-31 07:10:00

Elapsed: 00:00:00.05
07:17:14 SQL> 
07:17:14 SQL> -- Prepare for derivation of NTILE based params:
07:17:14 SQL> 
07:17:14 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.18
07:17:14 SQL> CREATE TABLE svm6142 COMPRESS AS
07:17:14   2  SELECT
07:17:14   3  pair
07:17:14   4  ,ydate
07:17:14   5  ,prdate
07:17:14   6  ,clse
07:17:14   7  ,g6
07:17:14   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
07:17:14   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
07:17:14  10  ,CASE WHEN trend IS NULL THEN 1
07:17:14  11  	    WHEN trend =0      THEN 1
07:17:14  12  	    ELSE trend END trend
07:17:14  13  ,cm4
07:17:14  14  ,cm6
07:17:14  15  ,cm8
07:17:14  16  ,cm10
07:17:14  17  ,cm12
07:17:14  18  ,cm14
07:17:14  19  ,cm16
07:17:14  20  ,cm18
07:17:14  21  --
07:17:14  22  ,ca4
07:17:14  23  ,ca6
07:17:14  24  ,ca8
07:17:14  25  ,ca10
07:17:14  26  ,ca12
07:17:14  27  ,ca14
07:17:14  28  ,ca16
07:17:14  29  ,ca18
07:17:14  30  --
07:17:14  31  ,cx4
07:17:14  32  ,cx6
07:17:14  33  ,cx8
07:17:14  34  ,cx10
07:17:14  35  ,cx12
07:17:14  36  ,cx14
07:17:14  37  ,cx16
07:17:14  38  ,cx18
07:17:14  39  --
07:17:14  40  ,crr4
07:17:14  41  ,crr6
07:17:14  42  ,crr8
07:17:14  43  ,crr10
07:17:14  44  ,crr12
07:17:14  45  ,crr14
07:17:14  46  ,crr16
07:17:14  47  ,crr18
07:17:14  48  --
07:17:14  49  ,hh
07:17:14  50  ,d
07:17:14  51  ,w
07:17:14  52  ,mpm
07:17:14  53  ,mph
07:17:14  54  FROM svm6122
07:17:14  55  ORDER BY ydate
07:17:14  56  /

Table created.

Elapsed: 00:00:00.39
07:17:15 SQL> 
07:17:15 SQL> -- rpt
07:17:15 SQL> 
07:17:15 SQL> SELECT
07:17:15   2  pair
07:17:15   3  ,trend
07:17:15   4  ,gatt
07:17:15   5  ,COUNT(pair)
07:17:15   6  ,AVG(g6)
07:17:15   7  FROM svm6142
07:17:15   8  GROUP BY pair,trend,gatt
07:17:15   9  ORDER BY pair,trend,gatt
07:17:15  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4172 -.22741158
ajp_usd 	-1 up	      5265 .218445716
ajp_usd 	-1		31
ajp_usd 	 1 nup	      5335 -.20030439
ajp_usd 	 1 up	      4987 .203339364
ajp_usd 	 1		41

6 rows selected.

Elapsed: 00:00:00.03
07:17:15 SQL> 
07:17:15 SQL> 
07:17:15 SQL> -- Derive NTILE based params:
07:17:15 SQL> 
07:17:15 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.18
07:17:15 SQL> CREATE TABLE svm6162 COMPRESS AS
07:17:15   2  SELECT
07:17:15   3  pair
07:17:15   4  ,ydate
07:17:15   5  ,prdate
07:17:15   6  ,clse
07:17:15   7  ,g6
07:17:15   8  ,gatt
07:17:15   9  ,gattn
07:17:15  10  ,trend
07:17:15  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
07:17:15  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
07:17:15  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
07:17:15  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
07:17:15  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
07:17:15  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
07:17:15  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
07:17:15  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
07:17:15  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
07:17:15  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
07:17:15  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
07:17:15  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
07:17:15  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
07:17:15  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
07:17:15  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
07:17:15  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
07:17:15  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
07:17:15  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
07:17:15  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
07:17:15  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
07:17:15  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
07:17:15  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
07:17:15  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
07:17:15  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
07:17:15  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
07:17:15  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
07:17:15  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
07:17:15  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
07:17:15  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
07:17:15  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
07:17:15  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
07:17:15  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
07:17:15  43  ,hh  att32
07:17:15  44  ,d   att33
07:17:15  45  ,w   att34
07:17:15  46  ,mpm att35
07:17:15  47  ,mph att36
07:17:15  48  ,trend att37
07:17:15  49  FROM svm6142
07:17:15  50  ORDER BY ydate
07:17:15  51  /

Table created.

Elapsed: 00:00:04.90
07:17:20 SQL> 
07:17:20 SQL> -- rpt
07:17:20 SQL> 
07:17:20 SQL> SELECT
07:17:20   2  pair
07:17:20   3  ,trend
07:17:20   4  ,gatt
07:17:20   5  ,COUNT(pair)
07:17:20   6  ,AVG(g6)
07:17:20   7  FROM svm6162
07:17:20   8  GROUP BY pair,trend,gatt
07:17:20   9  ORDER BY pair,trend,gatt
07:17:20  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4172 -.22741158
ajp_usd 	-1 up	      5265 .218445716
ajp_usd 	-1		31
ajp_usd 	 1 nup	      5335 -.20030439
ajp_usd 	 1 up	      4987 .203339364
ajp_usd 	 1		41

6 rows selected.

Elapsed: 00:00:00.03
07:17:20 SQL> 
07:17:20 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.20
07:17:20 SQL> CREATE TABLE modsrc COMPRESS AS
07:17:20   2  SELECT
07:17:20   3  pair
07:17:20   4  ,ydate
07:17:20   5  ,prdate
07:17:20   6  ,trend
07:17:20   7  ,g6
07:17:20   8  ,gatt
07:17:20   9  ,gattn
07:17:20  10  FROM svm6162
07:17:20  11  /

Table created.

Elapsed: 00:00:00.09
07:17:20 SQL> 
07:17:20 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
07:17:20 SQL> 
07:17:20 SQL> DROP   TABLE ajp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
07:17:20 SQL> CREATE TABLE ajp_ms610 COMPRESS AS
07:17:20   2  SELECT
07:17:20   3  ydate
07:17:20   4  ,trend ajp_trend
07:17:20   5  ,g6    ajp_g6
07:17:20   6  ,gatt  ajp_gatt
07:17:20   7  ,gattn ajp_gattn
07:17:20   8  FROM modsrc
07:17:20   9  /

Table created.

Elapsed: 00:00:00.09
07:17:21 SQL> 
07:17:21 SQL> ANALYZE TABLE ajp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
07:17:21 SQL> 
07:17:21 SQL> -- I need a copy of the attributes:
07:17:21 SQL> 
07:17:21 SQL> 
07:17:21 SQL> DROP   TABLE ajp_att;

Table dropped.

Elapsed: 00:00:00.05
07:17:21 SQL> CREATE TABLE ajp_att COMPRESS AS
07:17:21   2  SELECT
07:17:21   3  ydate
07:17:21   4  ,att00 ajp_att00
07:17:21   5  ,att01 ajp_att01
07:17:21   6  ,att02 ajp_att02
07:17:21   7  ,att03 ajp_att03
07:17:21   8  ,att04 ajp_att04
07:17:21   9  ,att05 ajp_att05
07:17:21  10  ,att06 ajp_att06
07:17:21  11  ,att07 ajp_att07
07:17:21  12  ,att08 ajp_att08
07:17:21  13  ,att09 ajp_att09
07:17:21  14  ,att10 ajp_att10
07:17:21  15  ,att11 ajp_att11
07:17:21  16  ,att12 ajp_att12
07:17:21  17  ,att13 ajp_att13
07:17:21  18  ,att14 ajp_att14
07:17:21  19  ,att15 ajp_att15
07:17:21  20  ,att16 ajp_att16
07:17:21  21  ,att17 ajp_att17
07:17:21  22  ,att18 ajp_att18
07:17:21  23  ,att19 ajp_att19
07:17:21  24  ,att20 ajp_att20
07:17:21  25  ,att21 ajp_att21
07:17:21  26  ,att22 ajp_att22
07:17:21  27  ,att23 ajp_att23
07:17:21  28  ,att24 ajp_att24
07:17:21  29  ,att25 ajp_att25
07:17:21  30  ,att26 ajp_att26
07:17:21  31  ,att27 ajp_att27
07:17:21  32  ,att28 ajp_att28
07:17:21  33  ,att29 ajp_att29
07:17:21  34  ,att30 ajp_att30
07:17:21  35  ,att31 ajp_att31
07:17:21  36  ,att32 ajp_att32
07:17:21  37  ,att33 ajp_att33
07:17:21  38  ,att34 ajp_att34
07:17:21  39  ,att35 ajp_att35
07:17:21  40  ,att36 ajp_att36
07:17:21  41  ,att37 ajp_att37
07:17:21  42  FROM svm6162
07:17:21  43  /

Table created.

Elapsed: 00:00:00.16
07:17:21 SQL> 
07:17:21 SQL> ANALYZE TABLE ajp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
07:17:21 SQL> 
07:17:21 SQL> -- rpt
07:17:21 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19831

Elapsed: 00:00:00.78
07:17:22 SQL> SELECT COUNT(*)FROM ajp_att;

  COUNT(*)
----------
     19831

Elapsed: 00:00:00.00
07:17:22 SQL> 
07:17:22 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
