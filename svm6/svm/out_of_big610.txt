
SQL*Plus: Release 11.2.0.1.0 Production on Mon Jan 3 20:59:47 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

20:59:47 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
20:59:47 SQL> 20:59:47 SQL> --
20:59:47 SQL> -- eur610.sql
20:59:47 SQL> --
20:59:47 SQL> 
20:59:47 SQL> -- Creates views and tables for backtesting a forex SVM strategy
20:59:47 SQL> 
20:59:47 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.03
20:59:47 SQL> 
20:59:47 SQL> -- I created di5min here:
20:59:47 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
20:59:47 SQL> 
20:59:47 SQL> CREATE OR REPLACE VIEW svm6102 AS
20:59:47   2  SELECT
20:59:47   3  pair
20:59:47   4  ,ydate
20:59:47   5  ,prdate
20:59:47   6  ,rownum rnum -- acts as t in my time-series
20:59:47   7  ,clse
20:59:47   8  -- Derive a bunch of attributes from clse, the latest price:
20:59:47   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
20:59:47  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
20:59:47  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
20:59:47  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
20:59:47  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
20:59:47  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
20:59:47  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
20:59:47  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
20:59:47  17  --
20:59:47  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
20:59:47  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
20:59:47  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
20:59:47  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
20:59:47  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
20:59:47  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
20:59:47  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
20:59:47  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
20:59:47  26  --
20:59:47  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
20:59:47  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
20:59:47  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
20:59:47  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
20:59:47  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
20:59:47  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
20:59:47  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
20:59:47  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
20:59:47  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
20:59:47  36  FROM di5min WHERE pair LIKE'%eur%'
20:59:47  37  AND ydate > sysdate - 95
20:59:47  38  ORDER BY ydate
20:59:47  39  /

View created.

Elapsed: 00:00:00.11
20:59:47 SQL> 
20:59:47 SQL> -- rpt
20:59:47 SQL> 
20:59:47 SQL> SELECT
20:59:47   2  pair
20:59:47   3  ,COUNT(pair)
20:59:47   4  ,MIN(clse),MAX(clse)
20:59:47   5  ,MIN(avg6),MAX(avg6)
20:59:47   6  ,MIN(ydate),MAX(ydate)
20:59:47   7  FROM svm6102
20:59:47   8  GROUP BY pair
20:59:47   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19259    1.29735	   1.4273 1.29875103 1.42436233 2010-09-30 21:00:01 2011-01-03 20:50:00

Elapsed: 00:00:00.96
20:59:48 SQL> 
20:59:48 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
20:59:48 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.17
20:59:48 SQL> CREATE TABLE svm6122 COMPRESS AS
20:59:48   2  SELECT
20:59:48   3  pair
20:59:48   4  ,ydate
20:59:48   5  ,prdate
20:59:48   6  ,clse
20:59:48   7  -- g6 is important. I want to predict g6:
20:59:48   8  ,ld6 - clse g6
20:59:48   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
20:59:48  10  -- I want more attributes from the ones I derived above:
20:59:48  11  -- clse relation to moving-min
20:59:48  12  ,clse-min4  cm4
20:59:48  13  ,clse-min6  cm6
20:59:48  14  ,clse-min8  cm8
20:59:48  15  ,clse-min10 cm10
20:59:48  16  ,clse-min12 cm12
20:59:48  17  ,clse-min14 cm14
20:59:48  18  ,clse-min16 cm16
20:59:48  19  ,clse-min18 cm18
20:59:48  20  -- clse relation to moving-avg
20:59:48  21  ,clse-avg4  ca4
20:59:48  22  ,clse-avg6  ca6
20:59:48  23  ,clse-avg8  ca8
20:59:48  24  ,clse-avg10 ca10
20:59:48  25  ,clse-avg12 ca12
20:59:48  26  ,clse-avg14 ca14
20:59:48  27  ,clse-avg16 ca16
20:59:48  28  ,clse-avg18 ca18
20:59:48  29  -- clse relation to moving-max
20:59:48  30  ,clse-max4  cx4
20:59:48  31  ,clse-max6  cx6
20:59:48  32  ,clse-max8  cx8
20:59:48  33  ,clse-max10 cx10
20:59:48  34  ,clse-max12 cx12
20:59:48  35  ,clse-max14 cx14
20:59:48  36  ,clse-max16 cx16
20:59:48  37  ,clse-max18 cx18
20:59:48  38  -- Derive more attributes.
20:59:48  39  -- I want to use CORR() here to help SVM see the shape of the series.
20:59:48  40  -- But COVAR_POP is more stable:
20:59:48  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
20:59:48  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
20:59:48  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
20:59:48  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
20:59:48  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
20:59:48  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
20:59:48  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
20:59:48  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
20:59:48  49  -- Derive date related attributes:
20:59:48  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
20:59:48  51  ,0+TO_CHAR(ydate,'D')d
20:59:48  52  ,0+TO_CHAR(ydate,'W')w
20:59:48  53  -- mpm stands for minutes-past-midnight:
20:59:48  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
20:59:48  55  -- mph stands for minutes-past-hour:
20:59:48  56  ,0+TO_CHAR(ydate,'MI')mph
20:59:48  57  FROM svm6102
20:59:48  58  ORDER BY ydate
20:59:48  59  /

Table created.

Elapsed: 00:00:02.45
20:59:51 SQL> 
20:59:51 SQL> -- rpt
20:59:51 SQL> 
20:59:51 SQL> SELECT
20:59:51   2  pair
20:59:51   3  ,COUNT(pair)
20:59:51   4  ,MIN(clse),MAX(clse)
20:59:51   5  ,MIN(ydate),MAX(ydate)
20:59:51   6  FROM svm6122
20:59:51   7  GROUP BY pair
20:59:51   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19259    1.29735	   1.4273 2010-09-30 21:00:01 2011-01-03 20:50:00

Elapsed: 00:00:00.19
20:59:51 SQL> 
20:59:51 SQL> -- Prepare for derivation of NTILE based params:
20:59:51 SQL> 
20:59:51 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.50
20:59:51 SQL> CREATE TABLE svm6142 COMPRESS AS
20:59:51   2  SELECT
20:59:51   3  pair
20:59:51   4  ,ydate
20:59:51   5  ,prdate
20:59:51   6  ,clse
20:59:51   7  ,g6
20:59:51   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
20:59:51   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
20:59:51  10  ,CASE WHEN trend IS NULL THEN 1
20:59:51  11  	    WHEN trend =0      THEN 1
20:59:51  12  	    ELSE trend END trend
20:59:51  13  ,cm4
20:59:51  14  ,cm6
20:59:51  15  ,cm8
20:59:51  16  ,cm10
20:59:51  17  ,cm12
20:59:51  18  ,cm14
20:59:51  19  ,cm16
20:59:51  20  ,cm18
20:59:51  21  --
20:59:51  22  ,ca4
20:59:51  23  ,ca6
20:59:51  24  ,ca8
20:59:51  25  ,ca10
20:59:51  26  ,ca12
20:59:51  27  ,ca14
20:59:51  28  ,ca16
20:59:51  29  ,ca18
20:59:51  30  --
20:59:51  31  ,cx4
20:59:51  32  ,cx6
20:59:51  33  ,cx8
20:59:51  34  ,cx10
20:59:51  35  ,cx12
20:59:51  36  ,cx14
20:59:51  37  ,cx16
20:59:51  38  ,cx18
20:59:51  39  --
20:59:51  40  ,crr4
20:59:51  41  ,crr6
20:59:51  42  ,crr8
20:59:51  43  ,crr10
20:59:51  44  ,crr12
20:59:51  45  ,crr14
20:59:51  46  ,crr16
20:59:51  47  ,crr18
20:59:51  48  --
20:59:51  49  ,hh
20:59:51  50  ,d
20:59:51  51  ,w
20:59:51  52  ,mpm
20:59:51  53  ,mph
20:59:51  54  FROM svm6122
20:59:51  55  ORDER BY ydate
20:59:51  56  /

Table created.

Elapsed: 00:00:00.38
20:59:52 SQL> 
20:59:52 SQL> -- rpt
20:59:52 SQL> 
20:59:52 SQL> SELECT
20:59:52   2  pair
20:59:52   3  ,trend
20:59:52   4  ,gatt
20:59:52   5  ,COUNT(pair)
20:59:52   6  ,AVG(g6)
20:59:52   7  FROM svm6142
20:59:52   8  GROUP BY pair,trend,gatt
20:59:52   9  ORDER BY pair,trend,gatt
20:59:52  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6013 -.00315159
eur_usd 	-1 up	      3560 .004465119
eur_usd 	 1 nup	      5781 -.00317289
eur_usd 	 1 up	      3833 .005064091
eur_usd 	 1		72

Elapsed: 00:00:00.26
20:59:52 SQL> 
20:59:52 SQL> 
20:59:52 SQL> -- Derive NTILE based params:
20:59:52 SQL> 
20:59:52 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.57
20:59:53 SQL> CREATE TABLE svm6162 COMPRESS AS
20:59:53   2  SELECT
20:59:53   3  pair
20:59:53   4  ,ydate
20:59:53   5  ,prdate
20:59:53   6  ,clse
20:59:53   7  ,g6
20:59:53   8  ,gatt
20:59:53   9  ,gattn
20:59:53  10  ,trend
20:59:53  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
20:59:53  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
20:59:53  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
20:59:53  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
20:59:53  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
20:59:53  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
20:59:53  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
20:59:53  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
20:59:53  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
20:59:53  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
20:59:53  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
20:59:53  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
20:59:53  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
20:59:53  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
20:59:53  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
20:59:53  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
20:59:53  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
20:59:53  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
20:59:53  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
20:59:53  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
20:59:53  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
20:59:53  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
20:59:53  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
20:59:53  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
20:59:53  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
20:59:53  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
20:59:53  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
20:59:53  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
20:59:53  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
20:59:53  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
20:59:53  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
20:59:53  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
20:59:53  43  ,hh  att32
20:59:53  44  ,d   att33
20:59:53  45  ,w   att34
20:59:53  46  ,mpm att35
20:59:53  47  ,mph att36
20:59:53  48  ,trend att37
20:59:53  49  FROM svm6142
20:59:53  50  ORDER BY ydate
20:59:53  51  /

Table created.

Elapsed: 00:00:04.68
20:59:57 SQL> 
20:59:57 SQL> -- rpt
20:59:57 SQL> 
20:59:57 SQL> SELECT
20:59:57   2  pair
20:59:57   3  ,trend
20:59:57   4  ,gatt
20:59:57   5  ,COUNT(pair)
20:59:57   6  ,AVG(g6)
20:59:57   7  FROM svm6162
20:59:57   8  GROUP BY pair,trend,gatt
20:59:57   9  ORDER BY pair,trend,gatt
20:59:57  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6013 -.00315159
eur_usd 	-1 up	      3560 .004465119
eur_usd 	 1 nup	      5781 -.00317289
eur_usd 	 1 up	      3833 .005064091
eur_usd 	 1		72

Elapsed: 00:00:00.04
20:59:57 SQL> 
20:59:57 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
20:59:57 SQL> CREATE TABLE modsrc COMPRESS AS
20:59:57   2  SELECT
20:59:57   3  pair
20:59:57   4  ,ydate
20:59:57   5  ,prdate
20:59:57   6  ,trend
20:59:57   7  ,g6
20:59:57   8  ,gatt
20:59:57   9  ,gattn
20:59:57  10  FROM svm6162
20:59:57  11  /

Table created.

Elapsed: 00:00:00.10
20:59:58 SQL> 
20:59:58 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
20:59:58 SQL> 
20:59:58 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
20:59:58 SQL> CREATE TABLE eur_ms610 COMPRESS AS
20:59:58   2  SELECT
20:59:58   3  ydate
20:59:58   4  ,trend eur_trend
20:59:58   5  ,g6    eur_g6
20:59:58   6  ,gatt  eur_gatt
20:59:58   7  ,gattn eur_gattn
20:59:58   8  FROM modsrc
20:59:58   9  /

Table created.

Elapsed: 00:00:00.08
20:59:58 SQL> 
20:59:58 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
20:59:58 SQL> 
20:59:58 SQL> -- I need a copy of the attributes:
20:59:58 SQL> 
20:59:58 SQL> 
20:59:58 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.06
20:59:58 SQL> CREATE TABLE eur_att COMPRESS AS
20:59:58   2  SELECT
20:59:58   3  ydate
20:59:58   4  ,att00 eur_att00
20:59:58   5  ,att01 eur_att01
20:59:58   6  ,att02 eur_att02
20:59:58   7  ,att03 eur_att03
20:59:58   8  ,att04 eur_att04
20:59:58   9  ,att05 eur_att05
20:59:58  10  ,att06 eur_att06
20:59:58  11  ,att07 eur_att07
20:59:58  12  ,att08 eur_att08
20:59:58  13  ,att09 eur_att09
20:59:58  14  ,att10 eur_att10
20:59:58  15  ,att11 eur_att11
20:59:58  16  ,att12 eur_att12
20:59:58  17  ,att13 eur_att13
20:59:58  18  ,att14 eur_att14
20:59:58  19  ,att15 eur_att15
20:59:58  20  ,att16 eur_att16
20:59:58  21  ,att17 eur_att17
20:59:58  22  ,att18 eur_att18
20:59:58  23  ,att19 eur_att19
20:59:58  24  ,att20 eur_att20
20:59:58  25  ,att21 eur_att21
20:59:58  26  ,att22 eur_att22
20:59:58  27  ,att23 eur_att23
20:59:58  28  ,att24 eur_att24
20:59:58  29  ,att25 eur_att25
20:59:58  30  ,att26 eur_att26
20:59:58  31  ,att27 eur_att27
20:59:58  32  ,att28 eur_att28
20:59:58  33  ,att29 eur_att29
20:59:58  34  ,att30 eur_att30
20:59:58  35  ,att31 eur_att31
20:59:58  36  ,att32 eur_att32
20:59:58  37  ,att33 eur_att33
20:59:58  38  ,att34 eur_att34
20:59:58  39  ,att35 eur_att35
20:59:58  40  ,att36 eur_att36
20:59:58  41  ,att37 eur_att37
20:59:58  42  FROM svm6162
20:59:58  43  /

Table created.

Elapsed: 00:00:00.19
20:59:58 SQL> 
20:59:58 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.51
20:59:59 SQL> 
20:59:59 SQL> -- rpt
20:59:59 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.90
21:00:00 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.00
21:00:00 SQL> 
21:00:00 SQL> --
21:00:00 SQL> -- aud610.sql
21:00:00 SQL> --
21:00:00 SQL> 
21:00:00 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:00:00 SQL> 
21:00:00 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.50
21:00:00 SQL> 
21:00:00 SQL> -- I created di5min here:
21:00:00 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:00:00 SQL> 
21:00:00 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:00:00   2  SELECT
21:00:00   3  pair
21:00:00   4  ,ydate
21:00:00   5  ,prdate
21:00:00   6  ,rownum rnum -- acts as t in my time-series
21:00:00   7  ,clse
21:00:00   8  -- Derive a bunch of attributes from clse, the latest price:
21:00:00   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:00:00  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:00:00  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:00:00  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:00:00  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:00:00  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:00:00  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:00:00  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:00:00  17  --
21:00:00  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:00:00  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:00:00  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:00:00  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:00:00  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:00:00  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:00:00  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:00:00  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:00:00  26  --
21:00:00  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:00:00  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:00:00  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:00:00  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:00:00  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:00:00  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:00:00  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:00:00  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:00:00  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:00:00  36  FROM di5min WHERE pair LIKE'%aud%'
21:00:00  37  AND ydate > sysdate - 95
21:00:00  38  ORDER BY ydate
21:00:00  39  /

View created.

Elapsed: 00:00:00.03
21:00:00 SQL> 
21:00:00 SQL> -- rpt
21:00:00 SQL> 
21:00:00 SQL> SELECT
21:00:00   2  pair
21:00:00   3  ,COUNT(pair)
21:00:00   4  ,MIN(clse),MAX(clse)
21:00:00   5  ,MIN(avg6),MAX(avg6)
21:00:00   6  ,MIN(ydate),MAX(ydate)
21:00:00   7  FROM svm6102
21:00:00   8  GROUP BY pair
21:00:00   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19256	.95405	  1.02495 .957141438 1.02284247 2010-09-30 21:00:01 2011-01-03 20:50:00

Elapsed: 00:00:00.89
21:00:01 SQL> 
21:00:01 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:00:01 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.37
21:00:02 SQL> CREATE TABLE svm6122 COMPRESS AS
21:00:02   2  SELECT
21:00:02   3  pair
21:00:02   4  ,ydate
21:00:02   5  ,prdate
21:00:02   6  ,clse
21:00:02   7  -- g6 is important. I want to predict g6:
21:00:02   8  ,ld6 - clse g6
21:00:02   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:00:02  10  -- I want more attributes from the ones I derived above:
21:00:02  11  -- clse relation to moving-min
21:00:02  12  ,clse-min4  cm4
21:00:02  13  ,clse-min6  cm6
21:00:02  14  ,clse-min8  cm8
21:00:02  15  ,clse-min10 cm10
21:00:02  16  ,clse-min12 cm12
21:00:02  17  ,clse-min14 cm14
21:00:02  18  ,clse-min16 cm16
21:00:02  19  ,clse-min18 cm18
21:00:02  20  -- clse relation to moving-avg
21:00:02  21  ,clse-avg4  ca4
21:00:02  22  ,clse-avg6  ca6
21:00:02  23  ,clse-avg8  ca8
21:00:02  24  ,clse-avg10 ca10
21:00:02  25  ,clse-avg12 ca12
21:00:02  26  ,clse-avg14 ca14
21:00:02  27  ,clse-avg16 ca16
21:00:02  28  ,clse-avg18 ca18
21:00:02  29  -- clse relation to moving-max
21:00:02  30  ,clse-max4  cx4
21:00:02  31  ,clse-max6  cx6
21:00:02  32  ,clse-max8  cx8
21:00:02  33  ,clse-max10 cx10
21:00:02  34  ,clse-max12 cx12
21:00:02  35  ,clse-max14 cx14
21:00:02  36  ,clse-max16 cx16
21:00:02  37  ,clse-max18 cx18
21:00:02  38  -- Derive more attributes.
21:00:02  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:00:02  40  -- But COVAR_POP is more stable:
21:00:02  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:00:02  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:00:02  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:00:02  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:00:02  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:00:02  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:00:02  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:00:02  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:00:02  49  -- Derive date related attributes:
21:00:02  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:00:02  51  ,0+TO_CHAR(ydate,'D')d
21:00:02  52  ,0+TO_CHAR(ydate,'W')w
21:00:02  53  -- mpm stands for minutes-past-midnight:
21:00:02  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:00:02  55  -- mph stands for minutes-past-hour:
21:00:02  56  ,0+TO_CHAR(ydate,'MI')mph
21:00:02  57  FROM svm6102
21:00:02  58  ORDER BY ydate
21:00:02  59  /

Table created.

Elapsed: 00:00:02.18
21:00:04 SQL> 
21:00:04 SQL> -- rpt
21:00:04 SQL> 
21:00:04 SQL> SELECT
21:00:04   2  pair
21:00:04   3  ,COUNT(pair)
21:00:04   4  ,MIN(clse),MAX(clse)
21:00:04   5  ,MIN(ydate),MAX(ydate)
21:00:04   6  FROM svm6122
21:00:04   7  GROUP BY pair
21:00:04   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19255	.95405	  1.02495 2010-09-30 21:05:01 2011-01-03 20:50:00

Elapsed: 00:00:00.38
21:00:04 SQL> 
21:00:04 SQL> -- Prepare for derivation of NTILE based params:
21:00:04 SQL> 
21:00:04 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.19
21:00:04 SQL> CREATE TABLE svm6142 COMPRESS AS
21:00:04   2  SELECT
21:00:04   3  pair
21:00:04   4  ,ydate
21:00:04   5  ,prdate
21:00:04   6  ,clse
21:00:04   7  ,g6
21:00:04   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:00:04   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:00:04  10  ,CASE WHEN trend IS NULL THEN 1
21:00:04  11  	    WHEN trend =0      THEN 1
21:00:04  12  	    ELSE trend END trend
21:00:04  13  ,cm4
21:00:04  14  ,cm6
21:00:04  15  ,cm8
21:00:04  16  ,cm10
21:00:04  17  ,cm12
21:00:04  18  ,cm14
21:00:04  19  ,cm16
21:00:04  20  ,cm18
21:00:04  21  --
21:00:04  22  ,ca4
21:00:04  23  ,ca6
21:00:04  24  ,ca8
21:00:04  25  ,ca10
21:00:04  26  ,ca12
21:00:04  27  ,ca14
21:00:04  28  ,ca16
21:00:04  29  ,ca18
21:00:04  30  --
21:00:04  31  ,cx4
21:00:04  32  ,cx6
21:00:04  33  ,cx8
21:00:04  34  ,cx10
21:00:04  35  ,cx12
21:00:04  36  ,cx14
21:00:04  37  ,cx16
21:00:04  38  ,cx18
21:00:04  39  --
21:00:04  40  ,crr4
21:00:04  41  ,crr6
21:00:04  42  ,crr8
21:00:04  43  ,crr10
21:00:04  44  ,crr12
21:00:04  45  ,crr14
21:00:04  46  ,crr16
21:00:04  47  ,crr18
21:00:04  48  --
21:00:04  49  ,hh
21:00:04  50  ,d
21:00:04  51  ,w
21:00:04  52  ,mpm
21:00:04  53  ,mph
21:00:04  54  FROM svm6122
21:00:04  55  ORDER BY ydate
21:00:04  56  /

Table created.

Elapsed: 00:00:00.43
21:00:05 SQL> 
21:00:05 SQL> -- rpt
21:00:05 SQL> 
21:00:05 SQL> SELECT
21:00:05   2  pair
21:00:05   3  ,trend
21:00:05   4  ,gatt
21:00:05   5  ,COUNT(pair)
21:00:05   6  ,AVG(g6)
21:00:05   7  FROM svm6142
21:00:05   8  GROUP BY pair,trend,gatt
21:00:05   9  ORDER BY pair,trend,gatt
21:00:05  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5124 -.00214142
aud_usd 	-1 up	      3706 .003756719
aud_usd 	-1		45
aud_usd 	 1 nup	      6703 -.00208023
aud_usd 	 1 up	      3650 .004049733
aud_usd 	 1		27

6 rows selected.

Elapsed: 00:00:00.33
21:00:05 SQL> 
21:00:05 SQL> 
21:00:05 SQL> -- Derive NTILE based params:
21:00:05 SQL> 
21:00:05 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
21:00:05 SQL> CREATE TABLE svm6162 COMPRESS AS
21:00:05   2  SELECT
21:00:05   3  pair
21:00:05   4  ,ydate
21:00:05   5  ,prdate
21:00:05   6  ,clse
21:00:05   7  ,g6
21:00:05   8  ,gatt
21:00:05   9  ,gattn
21:00:05  10  ,trend
21:00:05  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:00:05  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:00:05  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:00:05  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:00:05  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:00:05  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:00:05  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:00:05  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:00:05  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:00:05  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:00:05  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:00:05  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:00:05  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:00:05  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:00:05  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:00:05  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:00:05  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:00:05  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:00:05  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:00:05  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:00:05  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:00:05  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:00:05  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:00:05  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:00:05  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:00:05  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:00:05  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:00:05  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:00:05  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:00:05  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:00:05  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:00:05  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:00:05  43  ,hh  att32
21:00:05  44  ,d   att33
21:00:05  45  ,w   att34
21:00:05  46  ,mpm att35
21:00:05  47  ,mph att36
21:00:05  48  ,trend att37
21:00:05  49  FROM svm6142
21:00:05  50  ORDER BY ydate
21:00:05  51  /

Table created.

Elapsed: 00:00:04.83
21:00:10 SQL> 
21:00:10 SQL> -- rpt
21:00:10 SQL> 
21:00:10 SQL> SELECT
21:00:10   2  pair
21:00:10   3  ,trend
21:00:10   4  ,gatt
21:00:10   5  ,COUNT(pair)
21:00:10   6  ,AVG(g6)
21:00:10   7  FROM svm6162
21:00:10   8  GROUP BY pair,trend,gatt
21:00:10   9  ORDER BY pair,trend,gatt
21:00:10  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5124 -.00214142
aud_usd 	-1 up	      3706 .003756719
aud_usd 	-1		45
aud_usd 	 1 nup	      6703 -.00208023
aud_usd 	 1 up	      3650 .004049733
aud_usd 	 1		27

6 rows selected.

Elapsed: 00:00:00.17
21:00:10 SQL> 
21:00:10 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.19
21:00:10 SQL> CREATE TABLE modsrc COMPRESS AS
21:00:10   2  SELECT
21:00:10   3  pair
21:00:10   4  ,ydate
21:00:10   5  ,prdate
21:00:10   6  ,trend
21:00:10   7  ,g6
21:00:10   8  ,gatt
21:00:10   9  ,gattn
21:00:10  10  FROM svm6162
21:00:10  11  /

Table created.

Elapsed: 00:00:00.09
21:00:11 SQL> 
21:00:11 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.33
21:00:11 SQL> 
21:00:11 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.12
21:00:11 SQL> CREATE TABLE aud_ms610 COMPRESS AS
21:00:11   2  SELECT
21:00:11   3  ydate
21:00:11   4  ,trend aud_trend
21:00:11   5  ,g6    aud_g6
21:00:11   6  ,gatt  aud_gatt
21:00:11   7  ,gattn aud_gattn
21:00:11   8  FROM modsrc
21:00:11   9  /

Table created.

Elapsed: 00:00:00.12
21:00:11 SQL> 
21:00:11 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
21:00:11 SQL> 
21:00:11 SQL> -- I need a copy of the attributes:
21:00:11 SQL> 
21:00:11 SQL> 
21:00:11 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.10
21:00:11 SQL> CREATE TABLE aud_att COMPRESS AS
21:00:11   2  SELECT
21:00:11   3  ydate
21:00:11   4  ,att00 aud_att00
21:00:11   5  ,att01 aud_att01
21:00:11   6  ,att02 aud_att02
21:00:11   7  ,att03 aud_att03
21:00:11   8  ,att04 aud_att04
21:00:11   9  ,att05 aud_att05
21:00:11  10  ,att06 aud_att06
21:00:11  11  ,att07 aud_att07
21:00:11  12  ,att08 aud_att08
21:00:11  13  ,att09 aud_att09
21:00:11  14  ,att10 aud_att10
21:00:11  15  ,att11 aud_att11
21:00:11  16  ,att12 aud_att12
21:00:11  17  ,att13 aud_att13
21:00:11  18  ,att14 aud_att14
21:00:11  19  ,att15 aud_att15
21:00:11  20  ,att16 aud_att16
21:00:11  21  ,att17 aud_att17
21:00:11  22  ,att18 aud_att18
21:00:11  23  ,att19 aud_att19
21:00:11  24  ,att20 aud_att20
21:00:11  25  ,att21 aud_att21
21:00:11  26  ,att22 aud_att22
21:00:11  27  ,att23 aud_att23
21:00:11  28  ,att24 aud_att24
21:00:11  29  ,att25 aud_att25
21:00:11  30  ,att26 aud_att26
21:00:11  31  ,att27 aud_att27
21:00:11  32  ,att28 aud_att28
21:00:11  33  ,att29 aud_att29
21:00:11  34  ,att30 aud_att30
21:00:11  35  ,att31 aud_att31
21:00:11  36  ,att32 aud_att32
21:00:11  37  ,att33 aud_att33
21:00:11  38  ,att34 aud_att34
21:00:11  39  ,att35 aud_att35
21:00:11  40  ,att36 aud_att36
21:00:11  41  ,att37 aud_att37
21:00:11  42  FROM svm6162
21:00:11  43  /

Table created.

Elapsed: 00:00:00.16
21:00:12 SQL> 
21:00:12 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.57
21:00:12 SQL> 
21:00:12 SQL> -- rpt
21:00:12 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19255

Elapsed: 00:00:00.90
21:00:13 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19255

Elapsed: 00:00:00.01
21:00:13 SQL> 
21:00:13 SQL> --
21:00:13 SQL> -- gbp610.sql
21:00:13 SQL> --
21:00:13 SQL> 
21:00:13 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:00:13 SQL> 
21:00:13 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.52
21:00:14 SQL> 
21:00:14 SQL> -- I created di5min here:
21:00:14 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:00:14 SQL> 
21:00:14 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:00:14   2  SELECT
21:00:14   3  pair
21:00:14   4  ,ydate
21:00:14   5  ,prdate
21:00:14   6  ,rownum rnum -- acts as t in my time-series
21:00:14   7  ,clse
21:00:14   8  -- Derive a bunch of attributes from clse, the latest price:
21:00:14   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:00:14  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:00:14  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:00:14  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:00:14  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:00:14  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:00:14  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:00:14  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:00:14  17  --
21:00:14  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:00:14  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:00:14  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:00:14  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:00:14  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:00:14  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:00:14  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:00:14  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:00:14  26  --
21:00:14  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:00:14  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:00:14  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:00:14  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:00:14  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:00:14  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:00:14  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:00:14  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:00:14  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:00:14  36  FROM di5min WHERE pair LIKE'%gbp%'
21:00:14  37  AND ydate > sysdate - 95
21:00:14  38  ORDER BY ydate
21:00:14  39  /

View created.

Elapsed: 00:00:00.08
21:00:14 SQL> 
21:00:14 SQL> -- rpt
21:00:14 SQL> 
21:00:14 SQL> SELECT
21:00:14   2  pair
21:00:14   3  ,COUNT(pair)
21:00:14   4  ,MIN(clse),MAX(clse)
21:00:14   5  ,MIN(avg6),MAX(avg6)
21:00:14   6  ,MIN(ydate),MAX(ydate)
21:00:14   7  FROM svm6102
21:00:14   8  GROUP BY pair
21:00:14   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19258   1.535325	   1.6295 1.53696747 1.62716986 2010-09-30 21:05:01 2011-01-03 20:55:00

Elapsed: 00:00:00.91
21:00:14 SQL> 
21:00:14 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:00:14 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
21:00:15 SQL> CREATE TABLE svm6122 COMPRESS AS
21:00:15   2  SELECT
21:00:15   3  pair
21:00:15   4  ,ydate
21:00:15   5  ,prdate
21:00:15   6  ,clse
21:00:15   7  -- g6 is important. I want to predict g6:
21:00:15   8  ,ld6 - clse g6
21:00:15   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:00:15  10  -- I want more attributes from the ones I derived above:
21:00:15  11  -- clse relation to moving-min
21:00:15  12  ,clse-min4  cm4
21:00:15  13  ,clse-min6  cm6
21:00:15  14  ,clse-min8  cm8
21:00:15  15  ,clse-min10 cm10
21:00:15  16  ,clse-min12 cm12
21:00:15  17  ,clse-min14 cm14
21:00:15  18  ,clse-min16 cm16
21:00:15  19  ,clse-min18 cm18
21:00:15  20  -- clse relation to moving-avg
21:00:15  21  ,clse-avg4  ca4
21:00:15  22  ,clse-avg6  ca6
21:00:15  23  ,clse-avg8  ca8
21:00:15  24  ,clse-avg10 ca10
21:00:15  25  ,clse-avg12 ca12
21:00:15  26  ,clse-avg14 ca14
21:00:15  27  ,clse-avg16 ca16
21:00:15  28  ,clse-avg18 ca18
21:00:15  29  -- clse relation to moving-max
21:00:15  30  ,clse-max4  cx4
21:00:15  31  ,clse-max6  cx6
21:00:15  32  ,clse-max8  cx8
21:00:15  33  ,clse-max10 cx10
21:00:15  34  ,clse-max12 cx12
21:00:15  35  ,clse-max14 cx14
21:00:15  36  ,clse-max16 cx16
21:00:15  37  ,clse-max18 cx18
21:00:15  38  -- Derive more attributes.
21:00:15  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:00:15  40  -- But COVAR_POP is more stable:
21:00:15  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:00:15  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:00:15  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:00:15  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:00:15  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:00:15  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:00:15  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:00:15  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:00:15  49  -- Derive date related attributes:
21:00:15  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:00:15  51  ,0+TO_CHAR(ydate,'D')d
21:00:15  52  ,0+TO_CHAR(ydate,'W')w
21:00:15  53  -- mpm stands for minutes-past-midnight:
21:00:15  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:00:15  55  -- mph stands for minutes-past-hour:
21:00:15  56  ,0+TO_CHAR(ydate,'MI')mph
21:00:15  57  FROM svm6102
21:00:15  58  ORDER BY ydate
21:00:15  59  /

Table created.

Elapsed: 00:00:02.11
21:00:17 SQL> 
21:00:17 SQL> -- rpt
21:00:17 SQL> 
21:00:17 SQL> SELECT
21:00:17   2  pair
21:00:17   3  ,COUNT(pair)
21:00:17   4  ,MIN(clse),MAX(clse)
21:00:17   5  ,MIN(ydate),MAX(ydate)
21:00:17   6  FROM svm6122
21:00:17   7  GROUP BY pair
21:00:17   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19258   1.535325	   1.6295 2010-09-30 21:05:01 2011-01-03 20:55:00

Elapsed: 00:00:00.43
21:00:17 SQL> 
21:00:17 SQL> -- Prepare for derivation of NTILE based params:
21:00:17 SQL> 
21:00:17 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.22
21:00:17 SQL> CREATE TABLE svm6142 COMPRESS AS
21:00:17   2  SELECT
21:00:17   3  pair
21:00:17   4  ,ydate
21:00:17   5  ,prdate
21:00:17   6  ,clse
21:00:17   7  ,g6
21:00:17   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:00:17   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:00:17  10  ,CASE WHEN trend IS NULL THEN 1
21:00:17  11  	    WHEN trend =0      THEN 1
21:00:17  12  	    ELSE trend END trend
21:00:17  13  ,cm4
21:00:17  14  ,cm6
21:00:17  15  ,cm8
21:00:17  16  ,cm10
21:00:17  17  ,cm12
21:00:17  18  ,cm14
21:00:17  19  ,cm16
21:00:17  20  ,cm18
21:00:17  21  --
21:00:17  22  ,ca4
21:00:17  23  ,ca6
21:00:17  24  ,ca8
21:00:17  25  ,ca10
21:00:17  26  ,ca12
21:00:17  27  ,ca14
21:00:17  28  ,ca16
21:00:17  29  ,ca18
21:00:17  30  --
21:00:17  31  ,cx4
21:00:17  32  ,cx6
21:00:17  33  ,cx8
21:00:17  34  ,cx10
21:00:17  35  ,cx12
21:00:17  36  ,cx14
21:00:17  37  ,cx16
21:00:17  38  ,cx18
21:00:17  39  --
21:00:17  40  ,crr4
21:00:17  41  ,crr6
21:00:17  42  ,crr8
21:00:17  43  ,crr10
21:00:17  44  ,crr12
21:00:17  45  ,crr14
21:00:17  46  ,crr16
21:00:17  47  ,crr18
21:00:17  48  --
21:00:17  49  ,hh
21:00:17  50  ,d
21:00:17  51  ,w
21:00:17  52  ,mpm
21:00:17  53  ,mph
21:00:17  54  FROM svm6122
21:00:17  55  ORDER BY ydate
21:00:17  56  /

Table created.

Elapsed: 00:00:00.41
21:00:18 SQL> 
21:00:18 SQL> -- rpt
21:00:18 SQL> 
21:00:18 SQL> SELECT
21:00:18   2  pair
21:00:18   3  ,trend
21:00:18   4  ,gatt
21:00:18   5  ,COUNT(pair)
21:00:18   6  ,AVG(g6)
21:00:18   7  FROM svm6142
21:00:18   8  GROUP BY pair,trend,gatt
21:00:18   9  ORDER BY pair,trend,gatt
21:00:18  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6201 -.00268241
gbp_usd 	-1 up	      3446 .004338128
gbp_usd 	-1		40
gbp_usd 	 1 nup	      6054 -.00259384
gbp_usd 	 1 up	      3485 .004499591
gbp_usd 	 1		32

6 rows selected.

Elapsed: 00:00:00.04
21:00:18 SQL> 
21:00:18 SQL> 
21:00:18 SQL> -- Derive NTILE based params:
21:00:18 SQL> 
21:00:18 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.17
21:00:18 SQL> CREATE TABLE svm6162 COMPRESS AS
21:00:18   2  SELECT
21:00:18   3  pair
21:00:18   4  ,ydate
21:00:18   5  ,prdate
21:00:18   6  ,clse
21:00:18   7  ,g6
21:00:18   8  ,gatt
21:00:18   9  ,gattn
21:00:18  10  ,trend
21:00:18  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:00:18  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:00:18  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:00:18  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:00:18  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:00:18  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:00:18  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:00:18  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:00:18  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:00:18  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:00:18  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:00:18  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:00:18  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:00:18  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:00:18  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:00:18  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:00:18  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:00:18  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:00:18  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:00:18  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:00:18  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:00:18  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:00:18  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:00:18  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:00:18  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:00:18  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:00:18  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:00:18  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:00:18  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:00:18  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:00:18  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:00:18  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:00:18  43  ,hh  att32
21:00:18  44  ,d   att33
21:00:18  45  ,w   att34
21:00:18  46  ,mpm att35
21:00:18  47  ,mph att36
21:00:18  48  ,trend att37
21:00:18  49  FROM svm6142
21:00:18  50  ORDER BY ydate
21:00:18  51  /

Table created.

Elapsed: 00:00:04.74
21:00:23 SQL> 
21:00:23 SQL> -- rpt
21:00:23 SQL> 
21:00:23 SQL> SELECT
21:00:23   2  pair
21:00:23   3  ,trend
21:00:23   4  ,gatt
21:00:23   5  ,COUNT(pair)
21:00:23   6  ,AVG(g6)
21:00:23   7  FROM svm6162
21:00:23   8  GROUP BY pair,trend,gatt
21:00:23   9  ORDER BY pair,trend,gatt
21:00:23  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6201 -.00268241
gbp_usd 	-1 up	      3446 .004338128
gbp_usd 	-1		40
gbp_usd 	 1 nup	      6054 -.00259384
gbp_usd 	 1 up	      3485 .004499591
gbp_usd 	 1		32

6 rows selected.

Elapsed: 00:00:00.02
21:00:23 SQL> 
21:00:23 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.11
21:00:23 SQL> CREATE TABLE modsrc COMPRESS AS
21:00:23   2  SELECT
21:00:23   3  pair
21:00:23   4  ,ydate
21:00:23   5  ,prdate
21:00:23   6  ,trend
21:00:23   7  ,g6
21:00:23   8  ,gatt
21:00:23   9  ,gattn
21:00:23  10  FROM svm6162
21:00:23  11  /

Table created.

Elapsed: 00:00:00.09
21:00:23 SQL> 
21:00:23 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
21:00:23 SQL> 
21:00:23 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
21:00:23 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
21:00:23   2  SELECT
21:00:23   3  ydate
21:00:23   4  ,trend gbp_trend
21:00:23   5  ,g6    gbp_g6
21:00:23   6  ,gatt  gbp_gatt
21:00:23   7  ,gattn gbp_gattn
21:00:23   8  FROM modsrc
21:00:23   9  /

Table created.

Elapsed: 00:00:00.07
21:00:23 SQL> 
21:00:23 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
21:00:24 SQL> 
21:00:24 SQL> -- I need a copy of the attributes:
21:00:24 SQL> 
21:00:24 SQL> 
21:00:24 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.05
21:00:24 SQL> CREATE TABLE gbp_att COMPRESS AS
21:00:24   2  SELECT
21:00:24   3  ydate
21:00:24   4  ,att00 gbp_att00
21:00:24   5  ,att01 gbp_att01
21:00:24   6  ,att02 gbp_att02
21:00:24   7  ,att03 gbp_att03
21:00:24   8  ,att04 gbp_att04
21:00:24   9  ,att05 gbp_att05
21:00:24  10  ,att06 gbp_att06
21:00:24  11  ,att07 gbp_att07
21:00:24  12  ,att08 gbp_att08
21:00:24  13  ,att09 gbp_att09
21:00:24  14  ,att10 gbp_att10
21:00:24  15  ,att11 gbp_att11
21:00:24  16  ,att12 gbp_att12
21:00:24  17  ,att13 gbp_att13
21:00:24  18  ,att14 gbp_att14
21:00:24  19  ,att15 gbp_att15
21:00:24  20  ,att16 gbp_att16
21:00:24  21  ,att17 gbp_att17
21:00:24  22  ,att18 gbp_att18
21:00:24  23  ,att19 gbp_att19
21:00:24  24  ,att20 gbp_att20
21:00:24  25  ,att21 gbp_att21
21:00:24  26  ,att22 gbp_att22
21:00:24  27  ,att23 gbp_att23
21:00:24  28  ,att24 gbp_att24
21:00:24  29  ,att25 gbp_att25
21:00:24  30  ,att26 gbp_att26
21:00:24  31  ,att27 gbp_att27
21:00:24  32  ,att28 gbp_att28
21:00:24  33  ,att29 gbp_att29
21:00:24  34  ,att30 gbp_att30
21:00:24  35  ,att31 gbp_att31
21:00:24  36  ,att32 gbp_att32
21:00:24  37  ,att33 gbp_att33
21:00:24  38  ,att34 gbp_att34
21:00:24  39  ,att35 gbp_att35
21:00:24  40  ,att36 gbp_att36
21:00:24  41  ,att37 gbp_att37
21:00:24  42  FROM svm6162
21:00:24  43  /

Table created.

Elapsed: 00:00:00.22
21:00:24 SQL> 
21:00:24 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
21:00:24 SQL> 
21:00:24 SQL> -- rpt
21:00:24 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19258

Elapsed: 00:00:00.87
21:00:25 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19258

Elapsed: 00:00:00.00
21:00:25 SQL> 
21:00:25 SQL> --
21:00:25 SQL> -- jpy610.sql
21:00:25 SQL> --
21:00:25 SQL> 
21:00:25 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:00:25 SQL> 
21:00:25 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:01.72
21:00:27 SQL> 
21:00:27 SQL> -- I created di5min here:
21:00:27 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:00:27 SQL> 
21:00:27 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:00:27   2  SELECT
21:00:27   3  pair
21:00:27   4  ,ydate
21:00:27   5  ,prdate
21:00:27   6  ,rownum rnum -- acts as t in my time-series
21:00:27   7  ,clse
21:00:27   8  -- Derive a bunch of attributes from clse, the latest price:
21:00:27   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:00:27  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:00:27  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:00:27  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:00:27  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:00:27  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:00:27  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:00:27  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:00:27  17  --
21:00:27  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:00:27  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:00:27  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:00:27  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:00:27  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:00:27  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:00:27  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:00:27  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:00:27  26  --
21:00:27  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:00:27  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:00:27  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:00:27  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:00:27  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:00:27  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:00:27  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:00:27  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:00:27  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:00:27  36  FROM di5min WHERE pair LIKE'%jpy%'
21:00:27  37  AND ydate > sysdate - 95
21:00:27  38  ORDER BY ydate
21:00:27  39  /

View created.

Elapsed: 00:00:00.05
21:00:27 SQL> 
21:00:27 SQL> -- rpt
21:00:27 SQL> 
21:00:27 SQL> SELECT
21:00:27   2  pair
21:00:27   3  ,COUNT(pair)
21:00:27   4  ,MIN(clse),MAX(clse)
21:00:27   5  ,MIN(avg6),MAX(avg6)
21:00:27   6  ,MIN(ydate),MAX(ydate)
21:00:27   7  FROM svm6102
21:00:27   8  GROUP BY pair
21:00:27   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19256	 80.25	   84.485 80.3595205 84.3105479 2010-09-30 21:05:01 2011-01-03 20:55:00

Elapsed: 00:00:00.91
21:00:28 SQL> 
21:00:28 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:00:28 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.21
21:00:28 SQL> CREATE TABLE svm6122 COMPRESS AS
21:00:28   2  SELECT
21:00:28   3  pair
21:00:28   4  ,ydate
21:00:28   5  ,prdate
21:00:28   6  ,clse
21:00:28   7  -- g6 is important. I want to predict g6:
21:00:28   8  ,ld6 - clse g6
21:00:28   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:00:28  10  -- I want more attributes from the ones I derived above:
21:00:28  11  -- clse relation to moving-min
21:00:28  12  ,clse-min4  cm4
21:00:28  13  ,clse-min6  cm6
21:00:28  14  ,clse-min8  cm8
21:00:28  15  ,clse-min10 cm10
21:00:28  16  ,clse-min12 cm12
21:00:28  17  ,clse-min14 cm14
21:00:28  18  ,clse-min16 cm16
21:00:28  19  ,clse-min18 cm18
21:00:28  20  -- clse relation to moving-avg
21:00:28  21  ,clse-avg4  ca4
21:00:28  22  ,clse-avg6  ca6
21:00:28  23  ,clse-avg8  ca8
21:00:28  24  ,clse-avg10 ca10
21:00:28  25  ,clse-avg12 ca12
21:00:28  26  ,clse-avg14 ca14
21:00:28  27  ,clse-avg16 ca16
21:00:28  28  ,clse-avg18 ca18
21:00:28  29  -- clse relation to moving-max
21:00:28  30  ,clse-max4  cx4
21:00:28  31  ,clse-max6  cx6
21:00:28  32  ,clse-max8  cx8
21:00:28  33  ,clse-max10 cx10
21:00:28  34  ,clse-max12 cx12
21:00:28  35  ,clse-max14 cx14
21:00:28  36  ,clse-max16 cx16
21:00:28  37  ,clse-max18 cx18
21:00:28  38  -- Derive more attributes.
21:00:28  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:00:28  40  -- But COVAR_POP is more stable:
21:00:28  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:00:28  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:00:28  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:00:28  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:00:28  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:00:28  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:00:28  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:00:28  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:00:28  49  -- Derive date related attributes:
21:00:28  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:00:28  51  ,0+TO_CHAR(ydate,'D')d
21:00:28  52  ,0+TO_CHAR(ydate,'W')w
21:00:28  53  -- mpm stands for minutes-past-midnight:
21:00:28  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:00:28  55  -- mph stands for minutes-past-hour:
21:00:28  56  ,0+TO_CHAR(ydate,'MI')mph
21:00:28  57  FROM svm6102
21:00:28  58  ORDER BY ydate
21:00:28  59  /

Table created.

Elapsed: 00:00:02.13
21:00:30 SQL> 
21:00:30 SQL> -- rpt
21:00:30 SQL> 
21:00:30 SQL> SELECT
21:00:30   2  pair
21:00:30   3  ,COUNT(pair)
21:00:30   4  ,MIN(clse),MAX(clse)
21:00:30   5  ,MIN(ydate),MAX(ydate)
21:00:30   6  FROM svm6122
21:00:30   7  GROUP BY pair
21:00:30   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19256	 80.25	   84.485 2010-09-30 21:05:01 2011-01-03 20:55:00

Elapsed: 00:00:00.67
21:00:31 SQL> 
21:00:31 SQL> -- Prepare for derivation of NTILE based params:
21:00:31 SQL> 
21:00:31 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.27
21:00:31 SQL> CREATE TABLE svm6142 COMPRESS AS
21:00:31   2  SELECT
21:00:31   3  pair
21:00:31   4  ,ydate
21:00:31   5  ,prdate
21:00:31   6  ,clse
21:00:31   7  ,g6
21:00:31   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:00:31   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:00:31  10  ,CASE WHEN trend IS NULL THEN 1
21:00:31  11  	    WHEN trend =0      THEN 1
21:00:31  12  	    ELSE trend END trend
21:00:31  13  ,cm4
21:00:31  14  ,cm6
21:00:31  15  ,cm8
21:00:31  16  ,cm10
21:00:31  17  ,cm12
21:00:31  18  ,cm14
21:00:31  19  ,cm16
21:00:31  20  ,cm18
21:00:31  21  --
21:00:31  22  ,ca4
21:00:31  23  ,ca6
21:00:31  24  ,ca8
21:00:31  25  ,ca10
21:00:31  26  ,ca12
21:00:31  27  ,ca14
21:00:31  28  ,ca16
21:00:31  29  ,ca18
21:00:31  30  --
21:00:31  31  ,cx4
21:00:31  32  ,cx6
21:00:31  33  ,cx8
21:00:31  34  ,cx10
21:00:31  35  ,cx12
21:00:31  36  ,cx14
21:00:31  37  ,cx16
21:00:31  38  ,cx18
21:00:31  39  --
21:00:31  40  ,crr4
21:00:31  41  ,crr6
21:00:31  42  ,crr8
21:00:31  43  ,crr10
21:00:31  44  ,crr12
21:00:31  45  ,crr14
21:00:31  46  ,crr16
21:00:31  47  ,crr18
21:00:31  48  --
21:00:31  49  ,hh
21:00:31  50  ,d
21:00:31  51  ,w
21:00:31  52  ,mpm
21:00:31  53  ,mph
21:00:31  54  FROM svm6122
21:00:31  55  ORDER BY ydate
21:00:31  56  /

Table created.

Elapsed: 00:00:00.34
21:00:32 SQL> 
21:00:32 SQL> -- rpt
21:00:32 SQL> 
21:00:32 SQL> SELECT
21:00:32   2  pair
21:00:32   3  ,trend
21:00:32   4  ,gatt
21:00:32   5  ,COUNT(pair)
21:00:32   6  ,AVG(g6)
21:00:32   7  FROM svm6142
21:00:32   8  GROUP BY pair,trend,gatt
21:00:32   9  ORDER BY pair,trend,gatt
21:00:32  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5200 -.16591816
usd_jpy 	-1 up	      4812 .164695589
usd_jpy 	 1 nup	      4933  -.1561301
usd_jpy 	 1 up	      4239 .166198454
usd_jpy 	 1		72

Elapsed: 00:00:00.15
21:00:32 SQL> 
21:00:32 SQL> 
21:00:32 SQL> -- Derive NTILE based params:
21:00:32 SQL> 
21:00:32 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
21:00:32 SQL> CREATE TABLE svm6162 COMPRESS AS
21:00:32   2  SELECT
21:00:32   3  pair
21:00:32   4  ,ydate
21:00:32   5  ,prdate
21:00:32   6  ,clse
21:00:32   7  ,g6
21:00:32   8  ,gatt
21:00:32   9  ,gattn
21:00:32  10  ,trend
21:00:32  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:00:32  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:00:32  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:00:32  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:00:32  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:00:32  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:00:32  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:00:32  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:00:32  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:00:32  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:00:32  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:00:32  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:00:32  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:00:32  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:00:32  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:00:32  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:00:32  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:00:32  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:00:32  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:00:32  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:00:32  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:00:32  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:00:32  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:00:32  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:00:32  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:00:32  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:00:32  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:00:32  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:00:32  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:00:32  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:00:32  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:00:32  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:00:32  43  ,hh  att32
21:00:32  44  ,d   att33
21:00:32  45  ,w   att34
21:00:32  46  ,mpm att35
21:00:32  47  ,mph att36
21:00:32  48  ,trend att37
21:00:32  49  FROM svm6142
21:00:32  50  ORDER BY ydate
21:00:32  51  /

Table created.

Elapsed: 00:00:04.87
21:00:37 SQL> 
21:00:37 SQL> -- rpt
21:00:37 SQL> 
21:00:37 SQL> SELECT
21:00:37   2  pair
21:00:37   3  ,trend
21:00:37   4  ,gatt
21:00:37   5  ,COUNT(pair)
21:00:37   6  ,AVG(g6)
21:00:37   7  FROM svm6162
21:00:37   8  GROUP BY pair,trend,gatt
21:00:37   9  ORDER BY pair,trend,gatt
21:00:37  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5200 -.16591816
usd_jpy 	-1 up	      4812 .164695589
usd_jpy 	 1 nup	      4933  -.1561301
usd_jpy 	 1 up	      4239 .166198454
usd_jpy 	 1		72

Elapsed: 00:00:00.08
21:00:37 SQL> 
21:00:37 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.16
21:00:37 SQL> CREATE TABLE modsrc COMPRESS AS
21:00:37   2  SELECT
21:00:37   3  pair
21:00:37   4  ,ydate
21:00:37   5  ,prdate
21:00:37   6  ,trend
21:00:37   7  ,g6
21:00:37   8  ,gatt
21:00:37   9  ,gattn
21:00:37  10  FROM svm6162
21:00:37  11  /

Table created.

Elapsed: 00:00:00.10
21:00:37 SQL> 
21:00:37 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
21:00:37 SQL> 
21:00:37 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.08
21:00:37 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
21:00:37   2  SELECT
21:00:37   3  ydate
21:00:37   4  ,trend jpy_trend
21:00:37   5  ,g6    jpy_g6
21:00:37   6  ,gatt  jpy_gatt
21:00:37   7  ,gattn jpy_gattn
21:00:37   8  FROM modsrc
21:00:37   9  /

Table created.

Elapsed: 00:00:00.08
21:00:37 SQL> 
21:00:37 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
21:00:38 SQL> 
21:00:38 SQL> -- I need a copy of the attributes:
21:00:38 SQL> 
21:00:38 SQL> 
21:00:38 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.04
21:00:38 SQL> CREATE TABLE jpy_att COMPRESS AS
21:00:38   2  SELECT
21:00:38   3  ydate
21:00:38   4  ,att00 jpy_att00
21:00:38   5  ,att01 jpy_att01
21:00:38   6  ,att02 jpy_att02
21:00:38   7  ,att03 jpy_att03
21:00:38   8  ,att04 jpy_att04
21:00:38   9  ,att05 jpy_att05
21:00:38  10  ,att06 jpy_att06
21:00:38  11  ,att07 jpy_att07
21:00:38  12  ,att08 jpy_att08
21:00:38  13  ,att09 jpy_att09
21:00:38  14  ,att10 jpy_att10
21:00:38  15  ,att11 jpy_att11
21:00:38  16  ,att12 jpy_att12
21:00:38  17  ,att13 jpy_att13
21:00:38  18  ,att14 jpy_att14
21:00:38  19  ,att15 jpy_att15
21:00:38  20  ,att16 jpy_att16
21:00:38  21  ,att17 jpy_att17
21:00:38  22  ,att18 jpy_att18
21:00:38  23  ,att19 jpy_att19
21:00:38  24  ,att20 jpy_att20
21:00:38  25  ,att21 jpy_att21
21:00:38  26  ,att22 jpy_att22
21:00:38  27  ,att23 jpy_att23
21:00:38  28  ,att24 jpy_att24
21:00:38  29  ,att25 jpy_att25
21:00:38  30  ,att26 jpy_att26
21:00:38  31  ,att27 jpy_att27
21:00:38  32  ,att28 jpy_att28
21:00:38  33  ,att29 jpy_att29
21:00:38  34  ,att30 jpy_att30
21:00:38  35  ,att31 jpy_att31
21:00:38  36  ,att32 jpy_att32
21:00:38  37  ,att33 jpy_att33
21:00:38  38  ,att34 jpy_att34
21:00:38  39  ,att35 jpy_att35
21:00:38  40  ,att36 jpy_att36
21:00:38  41  ,att37 jpy_att37
21:00:38  42  FROM svm6162
21:00:38  43  /

Table created.

Elapsed: 00:00:00.17
21:00:38 SQL> 
21:00:38 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:01.69
21:00:39 SQL> 
21:00:39 SQL> -- rpt
21:00:39 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.92
21:00:40 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.01
21:00:40 SQL> 
21:00:40 SQL> --
21:00:40 SQL> -- cad610.sql
21:00:40 SQL> --
21:00:40 SQL> 
21:00:40 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:00:40 SQL> 
21:00:40 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.64
21:00:41 SQL> 
21:00:41 SQL> -- I created di5min here:
21:00:41 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:00:41 SQL> 
21:00:41 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:00:41   2  SELECT
21:00:41   3  pair
21:00:41   4  ,ydate
21:00:41   5  ,prdate
21:00:41   6  ,rownum rnum -- acts as t in my time-series
21:00:41   7  ,clse
21:00:41   8  -- Derive a bunch of attributes from clse, the latest price:
21:00:41   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:00:41  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:00:41  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:00:41  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:00:41  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:00:41  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:00:41  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:00:41  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:00:41  17  --
21:00:41  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:00:41  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:00:41  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:00:41  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:00:41  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:00:41  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:00:41  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:00:41  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:00:41  26  --
21:00:41  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:00:41  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:00:41  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:00:41  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:00:41  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:00:41  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:00:41  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:00:41  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:00:41  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:00:41  36  FROM di5min WHERE pair LIKE'%cad%'
21:00:41  37  AND ydate > sysdate - 95
21:00:41  38  ORDER BY ydate
21:00:41  39  /

View created.

Elapsed: 00:00:00.10
21:00:41 SQL> 
21:00:41 SQL> -- rpt
21:00:41 SQL> 
21:00:41 SQL> SELECT
21:00:41   2  pair
21:00:41   3  ,COUNT(pair)
21:00:41   4  ,MIN(clse),MAX(clse)
21:00:41   5  ,MIN(avg6),MAX(avg6)
21:00:41   6  ,MIN(ydate),MAX(ydate)
21:00:41   7  FROM svm6102
21:00:41   8  GROUP BY pair
21:00:41   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19256    .988925	   1.0355 .990603938 1.03282877 2010-09-30 21:05:01 2011-01-03 20:55:00

Elapsed: 00:00:00.83
21:00:42 SQL> 
21:00:42 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:00:42 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.28
21:00:42 SQL> CREATE TABLE svm6122 COMPRESS AS
21:00:42   2  SELECT
21:00:42   3  pair
21:00:42   4  ,ydate
21:00:42   5  ,prdate
21:00:42   6  ,clse
21:00:42   7  -- g6 is important. I want to predict g6:
21:00:42   8  ,ld6 - clse g6
21:00:42   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:00:42  10  -- I want more attributes from the ones I derived above:
21:00:42  11  -- clse relation to moving-min
21:00:42  12  ,clse-min4  cm4
21:00:42  13  ,clse-min6  cm6
21:00:42  14  ,clse-min8  cm8
21:00:42  15  ,clse-min10 cm10
21:00:42  16  ,clse-min12 cm12
21:00:42  17  ,clse-min14 cm14
21:00:42  18  ,clse-min16 cm16
21:00:42  19  ,clse-min18 cm18
21:00:42  20  -- clse relation to moving-avg
21:00:42  21  ,clse-avg4  ca4
21:00:42  22  ,clse-avg6  ca6
21:00:42  23  ,clse-avg8  ca8
21:00:42  24  ,clse-avg10 ca10
21:00:42  25  ,clse-avg12 ca12
21:00:42  26  ,clse-avg14 ca14
21:00:42  27  ,clse-avg16 ca16
21:00:42  28  ,clse-avg18 ca18
21:00:42  29  -- clse relation to moving-max
21:00:42  30  ,clse-max4  cx4
21:00:42  31  ,clse-max6  cx6
21:00:42  32  ,clse-max8  cx8
21:00:42  33  ,clse-max10 cx10
21:00:42  34  ,clse-max12 cx12
21:00:42  35  ,clse-max14 cx14
21:00:42  36  ,clse-max16 cx16
21:00:42  37  ,clse-max18 cx18
21:00:42  38  -- Derive more attributes.
21:00:42  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:00:42  40  -- But COVAR_POP is more stable:
21:00:42  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:00:42  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:00:42  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:00:42  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:00:42  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:00:42  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:00:42  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:00:42  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:00:42  49  -- Derive date related attributes:
21:00:42  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:00:42  51  ,0+TO_CHAR(ydate,'D')d
21:00:42  52  ,0+TO_CHAR(ydate,'W')w
21:00:42  53  -- mpm stands for minutes-past-midnight:
21:00:42  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:00:42  55  -- mph stands for minutes-past-hour:
21:00:42  56  ,0+TO_CHAR(ydate,'MI')mph
21:00:42  57  FROM svm6102
21:00:42  58  ORDER BY ydate
21:00:42  59  /

Table created.

Elapsed: 00:00:02.20
21:00:44 SQL> 
21:00:44 SQL> -- rpt
21:00:44 SQL> 
21:00:44 SQL> SELECT
21:00:44   2  pair
21:00:44   3  ,COUNT(pair)
21:00:44   4  ,MIN(clse),MAX(clse)
21:00:44   5  ,MIN(ydate),MAX(ydate)
21:00:44   6  FROM svm6122
21:00:44   7  GROUP BY pair
21:00:44   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19256    .988925	   1.0355 2010-09-30 21:05:01 2011-01-03 20:55:00

Elapsed: 00:00:00.14
21:00:45 SQL> 
21:00:45 SQL> -- Prepare for derivation of NTILE based params:
21:00:45 SQL> 
21:00:45 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.24
21:00:45 SQL> CREATE TABLE svm6142 COMPRESS AS
21:00:45   2  SELECT
21:00:45   3  pair
21:00:45   4  ,ydate
21:00:45   5  ,prdate
21:00:45   6  ,clse
21:00:45   7  ,g6
21:00:45   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:00:45   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:00:45  10  ,CASE WHEN trend IS NULL THEN 1
21:00:45  11  	    WHEN trend =0      THEN 1
21:00:45  12  	    ELSE trend END trend
21:00:45  13  ,cm4
21:00:45  14  ,cm6
21:00:45  15  ,cm8
21:00:45  16  ,cm10
21:00:45  17  ,cm12
21:00:45  18  ,cm14
21:00:45  19  ,cm16
21:00:45  20  ,cm18
21:00:45  21  --
21:00:45  22  ,ca4
21:00:45  23  ,ca6
21:00:45  24  ,ca8
21:00:45  25  ,ca10
21:00:45  26  ,ca12
21:00:45  27  ,ca14
21:00:45  28  ,ca16
21:00:45  29  ,ca18
21:00:45  30  --
21:00:45  31  ,cx4
21:00:45  32  ,cx6
21:00:45  33  ,cx8
21:00:45  34  ,cx10
21:00:45  35  ,cx12
21:00:45  36  ,cx14
21:00:45  37  ,cx16
21:00:45  38  ,cx18
21:00:45  39  --
21:00:45  40  ,crr4
21:00:45  41  ,crr6
21:00:45  42  ,crr8
21:00:45  43  ,crr10
21:00:45  44  ,crr12
21:00:45  45  ,crr14
21:00:45  46  ,crr16
21:00:45  47  ,crr18
21:00:45  48  --
21:00:45  49  ,hh
21:00:45  50  ,d
21:00:45  51  ,w
21:00:45  52  ,mpm
21:00:45  53  ,mph
21:00:45  54  FROM svm6122
21:00:45  55  ORDER BY ydate
21:00:45  56  /

Table created.

Elapsed: 00:00:00.43
21:00:45 SQL> 
21:00:45 SQL> -- rpt
21:00:45 SQL> 
21:00:45 SQL> SELECT
21:00:45   2  pair
21:00:45   3  ,trend
21:00:45   4  ,gatt
21:00:45   5  ,COUNT(pair)
21:00:45   6  ,AVG(g6)
21:00:45   7  FROM svm6142
21:00:45   8  GROUP BY pair,trend,gatt
21:00:45   9  ORDER BY pair,trend,gatt
21:00:45  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7367  -.0012884
usd_cad 	-1 up	      2978 .003052943
usd_cad 	-1		52
usd_cad 	 1 nup	      6545 -.00164818
usd_cad 	 1 up	      2294 .003663844
usd_cad 	 1		20

6 rows selected.

Elapsed: 00:00:00.07
21:00:45 SQL> 
21:00:45 SQL> 
21:00:45 SQL> -- Derive NTILE based params:
21:00:45 SQL> 
21:00:45 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.22
21:00:46 SQL> CREATE TABLE svm6162 COMPRESS AS
21:00:46   2  SELECT
21:00:46   3  pair
21:00:46   4  ,ydate
21:00:46   5  ,prdate
21:00:46   6  ,clse
21:00:46   7  ,g6
21:00:46   8  ,gatt
21:00:46   9  ,gattn
21:00:46  10  ,trend
21:00:46  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:00:46  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:00:46  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:00:46  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:00:46  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:00:46  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:00:46  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:00:46  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:00:46  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:00:46  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:00:46  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:00:46  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:00:46  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:00:46  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:00:46  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:00:46  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:00:46  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:00:46  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:00:46  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:00:46  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:00:46  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:00:46  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:00:46  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:00:46  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:00:46  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:00:46  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:00:46  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:00:46  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:00:46  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:00:46  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:00:46  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:00:46  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:00:46  43  ,hh  att32
21:00:46  44  ,d   att33
21:00:46  45  ,w   att34
21:00:46  46  ,mpm att35
21:00:46  47  ,mph att36
21:00:46  48  ,trend att37
21:00:46  49  FROM svm6142
21:00:46  50  ORDER BY ydate
21:00:46  51  /

Table created.

Elapsed: 00:00:04.72
21:00:50 SQL> 
21:00:50 SQL> -- rpt
21:00:50 SQL> 
21:00:50 SQL> SELECT
21:00:50   2  pair
21:00:50   3  ,trend
21:00:50   4  ,gatt
21:00:50   5  ,COUNT(pair)
21:00:50   6  ,AVG(g6)
21:00:50   7  FROM svm6162
21:00:50   8  GROUP BY pair,trend,gatt
21:00:50   9  ORDER BY pair,trend,gatt
21:00:50  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7367  -.0012884
usd_cad 	-1 up	      2978 .003052943
usd_cad 	-1		52
usd_cad 	 1 nup	      6545 -.00164818
usd_cad 	 1 up	      2294 .003663844
usd_cad 	 1		20

6 rows selected.

Elapsed: 00:00:00.03
21:00:50 SQL> 
21:00:50 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
21:00:50 SQL> CREATE TABLE modsrc COMPRESS AS
21:00:50   2  SELECT
21:00:50   3  pair
21:00:50   4  ,ydate
21:00:50   5  ,prdate
21:00:50   6  ,trend
21:00:50   7  ,g6
21:00:50   8  ,gatt
21:00:50   9  ,gattn
21:00:50  10  FROM svm6162
21:00:50  11  /

Table created.

Elapsed: 00:00:00.10
21:00:50 SQL> 
21:00:50 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
21:00:51 SQL> 
21:00:51 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.03
21:00:51 SQL> CREATE TABLE cad_ms610 COMPRESS AS
21:00:51   2  SELECT
21:00:51   3  ydate
21:00:51   4  ,trend cad_trend
21:00:51   5  ,g6    cad_g6
21:00:51   6  ,gatt  cad_gatt
21:00:51   7  ,gattn cad_gattn
21:00:51   8  FROM modsrc
21:00:51   9  /

Table created.

Elapsed: 00:00:00.07
21:00:51 SQL> 
21:00:51 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
21:00:51 SQL> 
21:00:51 SQL> -- I need a copy of the attributes:
21:00:51 SQL> 
21:00:51 SQL> 
21:00:51 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.05
21:00:51 SQL> CREATE TABLE cad_att COMPRESS AS
21:00:51   2  SELECT
21:00:51   3  ydate
21:00:51   4  ,att00 cad_att00
21:00:51   5  ,att01 cad_att01
21:00:51   6  ,att02 cad_att02
21:00:51   7  ,att03 cad_att03
21:00:51   8  ,att04 cad_att04
21:00:51   9  ,att05 cad_att05
21:00:51  10  ,att06 cad_att06
21:00:51  11  ,att07 cad_att07
21:00:51  12  ,att08 cad_att08
21:00:51  13  ,att09 cad_att09
21:00:51  14  ,att10 cad_att10
21:00:51  15  ,att11 cad_att11
21:00:51  16  ,att12 cad_att12
21:00:51  17  ,att13 cad_att13
21:00:51  18  ,att14 cad_att14
21:00:51  19  ,att15 cad_att15
21:00:51  20  ,att16 cad_att16
21:00:51  21  ,att17 cad_att17
21:00:51  22  ,att18 cad_att18
21:00:51  23  ,att19 cad_att19
21:00:51  24  ,att20 cad_att20
21:00:51  25  ,att21 cad_att21
21:00:51  26  ,att22 cad_att22
21:00:51  27  ,att23 cad_att23
21:00:51  28  ,att24 cad_att24
21:00:51  29  ,att25 cad_att25
21:00:51  30  ,att26 cad_att26
21:00:51  31  ,att27 cad_att27
21:00:51  32  ,att28 cad_att28
21:00:51  33  ,att29 cad_att29
21:00:51  34  ,att30 cad_att30
21:00:51  35  ,att31 cad_att31
21:00:51  36  ,att32 cad_att32
21:00:51  37  ,att33 cad_att33
21:00:51  38  ,att34 cad_att34
21:00:51  39  ,att35 cad_att35
21:00:51  40  ,att36 cad_att36
21:00:51  41  ,att37 cad_att37
21:00:51  42  FROM svm6162
21:00:51  43  /

Table created.

Elapsed: 00:00:00.16
21:00:51 SQL> 
21:00:51 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
21:00:52 SQL> 
21:00:52 SQL> -- rpt
21:00:52 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.81
21:00:52 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.00
21:00:52 SQL> 
21:00:52 SQL> --
21:00:52 SQL> -- chf610.sql
21:00:52 SQL> --
21:00:52 SQL> 
21:00:52 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:00:52 SQL> 
21:00:52 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.36
21:00:53 SQL> 
21:00:53 SQL> -- I created di5min here:
21:00:53 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:00:53 SQL> 
21:00:53 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:00:53   2  SELECT
21:00:53   3  pair
21:00:53   4  ,ydate
21:00:53   5  ,prdate
21:00:53   6  ,rownum rnum -- acts as t in my time-series
21:00:53   7  ,clse
21:00:53   8  -- Derive a bunch of attributes from clse, the latest price:
21:00:53   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:00:53  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:00:53  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:00:53  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:00:53  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:00:53  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:00:53  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:00:53  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:00:53  17  --
21:00:53  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:00:53  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:00:53  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:00:53  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:00:53  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:00:53  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:00:53  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:00:53  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:00:53  26  --
21:00:53  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:00:53  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:00:53  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:00:53  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:00:53  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:00:53  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:00:53  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:00:53  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:00:53  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:00:53  36  FROM di5min WHERE pair LIKE'%chf%'
21:00:53  37  AND ydate > sysdate - 95
21:00:53  38  ORDER BY ydate
21:00:53  39  /

View created.

Elapsed: 00:00:00.04
21:00:53 SQL> 
21:00:53 SQL> -- rpt
21:00:53 SQL> 
21:00:53 SQL> SELECT
21:00:53   2  pair
21:00:53   3  ,COUNT(pair)
21:00:53   4  ,MIN(clse),MAX(clse)
21:00:53   5  ,MIN(avg6),MAX(avg6)
21:00:53   6  ,MIN(ydate),MAX(ydate)
21:00:53   7  FROM svm6102
21:00:53   8  GROUP BY pair
21:00:53   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19259    .931675	  1.00635 .933596233 1.00498151 2010-09-30 21:05:01 2011-01-03 20:55:00

Elapsed: 00:00:00.87
21:00:54 SQL> 
21:00:54 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:00:54 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.18
21:00:54 SQL> CREATE TABLE svm6122 COMPRESS AS
21:00:54   2  SELECT
21:00:54   3  pair
21:00:54   4  ,ydate
21:00:54   5  ,prdate
21:00:54   6  ,clse
21:00:54   7  -- g6 is important. I want to predict g6:
21:00:54   8  ,ld6 - clse g6
21:00:54   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:00:54  10  -- I want more attributes from the ones I derived above:
21:00:54  11  -- clse relation to moving-min
21:00:54  12  ,clse-min4  cm4
21:00:54  13  ,clse-min6  cm6
21:00:54  14  ,clse-min8  cm8
21:00:54  15  ,clse-min10 cm10
21:00:54  16  ,clse-min12 cm12
21:00:54  17  ,clse-min14 cm14
21:00:54  18  ,clse-min16 cm16
21:00:54  19  ,clse-min18 cm18
21:00:54  20  -- clse relation to moving-avg
21:00:54  21  ,clse-avg4  ca4
21:00:54  22  ,clse-avg6  ca6
21:00:54  23  ,clse-avg8  ca8
21:00:54  24  ,clse-avg10 ca10
21:00:54  25  ,clse-avg12 ca12
21:00:54  26  ,clse-avg14 ca14
21:00:54  27  ,clse-avg16 ca16
21:00:54  28  ,clse-avg18 ca18
21:00:54  29  -- clse relation to moving-max
21:00:54  30  ,clse-max4  cx4
21:00:54  31  ,clse-max6  cx6
21:00:54  32  ,clse-max8  cx8
21:00:54  33  ,clse-max10 cx10
21:00:54  34  ,clse-max12 cx12
21:00:54  35  ,clse-max14 cx14
21:00:54  36  ,clse-max16 cx16
21:00:54  37  ,clse-max18 cx18
21:00:54  38  -- Derive more attributes.
21:00:54  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:00:54  40  -- But COVAR_POP is more stable:
21:00:54  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:00:54  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:00:54  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:00:54  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:00:54  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:00:54  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:00:54  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:00:54  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:00:54  49  -- Derive date related attributes:
21:00:54  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:00:54  51  ,0+TO_CHAR(ydate,'D')d
21:00:54  52  ,0+TO_CHAR(ydate,'W')w
21:00:54  53  -- mpm stands for minutes-past-midnight:
21:00:54  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:00:54  55  -- mph stands for minutes-past-hour:
21:00:54  56  ,0+TO_CHAR(ydate,'MI')mph
21:00:54  57  FROM svm6102
21:00:54  58  ORDER BY ydate
21:00:54  59  /

Table created.

Elapsed: 00:00:02.07
21:00:56 SQL> 
21:00:56 SQL> -- rpt
21:00:56 SQL> 
21:00:56 SQL> SELECT
21:00:56   2  pair
21:00:56   3  ,COUNT(pair)
21:00:56   4  ,MIN(clse),MAX(clse)
21:00:56   5  ,MIN(ydate),MAX(ydate)
21:00:56   6  FROM svm6122
21:00:56   7  GROUP BY pair
21:00:56   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19259    .931675	  1.00635 2010-09-30 21:05:01 2011-01-03 20:55:00

Elapsed: 00:00:00.08
21:00:56 SQL> 
21:00:56 SQL> -- Prepare for derivation of NTILE based params:
21:00:56 SQL> 
21:00:56 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.24
21:00:56 SQL> CREATE TABLE svm6142 COMPRESS AS
21:00:56   2  SELECT
21:00:56   3  pair
21:00:56   4  ,ydate
21:00:56   5  ,prdate
21:00:56   6  ,clse
21:00:56   7  ,g6
21:00:56   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:00:56   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:00:56  10  ,CASE WHEN trend IS NULL THEN 1
21:00:56  11  	    WHEN trend =0      THEN 1
21:00:56  12  	    ELSE trend END trend
21:00:56  13  ,cm4
21:00:56  14  ,cm6
21:00:56  15  ,cm8
21:00:56  16  ,cm10
21:00:56  17  ,cm12
21:00:56  18  ,cm14
21:00:56  19  ,cm16
21:00:56  20  ,cm18
21:00:56  21  --
21:00:56  22  ,ca4
21:00:56  23  ,ca6
21:00:56  24  ,ca8
21:00:56  25  ,ca10
21:00:56  26  ,ca12
21:00:56  27  ,ca14
21:00:56  28  ,ca16
21:00:56  29  ,ca18
21:00:56  30  --
21:00:56  31  ,cx4
21:00:56  32  ,cx6
21:00:56  33  ,cx8
21:00:56  34  ,cx10
21:00:56  35  ,cx12
21:00:56  36  ,cx14
21:00:56  37  ,cx16
21:00:56  38  ,cx18
21:00:56  39  --
21:00:56  40  ,crr4
21:00:56  41  ,crr6
21:00:56  42  ,crr8
21:00:56  43  ,crr10
21:00:56  44  ,crr12
21:00:56  45  ,crr14
21:00:56  46  ,crr16
21:00:56  47  ,crr18
21:00:56  48  --
21:00:56  49  ,hh
21:00:56  50  ,d
21:00:56  51  ,w
21:00:56  52  ,mpm
21:00:56  53  ,mph
21:00:56  54  FROM svm6122
21:00:56  55  ORDER BY ydate
21:00:56  56  /

Table created.

Elapsed: 00:00:00.37
21:00:57 SQL> 
21:00:57 SQL> -- rpt
21:00:57 SQL> 
21:00:57 SQL> SELECT
21:00:57   2  pair
21:00:57   3  ,trend
21:00:57   4  ,gatt
21:00:57   5  ,COUNT(pair)
21:00:57   6  ,AVG(g6)
21:00:57   7  FROM svm6142
21:00:57   8  GROUP BY pair,trend,gatt
21:00:57   9  ORDER BY pair,trend,gatt
21:00:57  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7247  -.0020005
usd_chf 	-1 up	      3037 .003858747
usd_chf 	-1		71
usd_chf 	 1 nup	      6362 -.00158619
usd_chf 	 1 up	      2541 .003693599
usd_chf 	 1		 1

6 rows selected.

Elapsed: 00:00:00.04
21:00:57 SQL> 
21:00:57 SQL> 
21:00:57 SQL> -- Derive NTILE based params:
21:00:57 SQL> 
21:00:57 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.18
21:00:57 SQL> CREATE TABLE svm6162 COMPRESS AS
21:00:57   2  SELECT
21:00:57   3  pair
21:00:57   4  ,ydate
21:00:57   5  ,prdate
21:00:57   6  ,clse
21:00:57   7  ,g6
21:00:57   8  ,gatt
21:00:57   9  ,gattn
21:00:57  10  ,trend
21:00:57  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:00:57  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:00:57  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:00:57  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:00:57  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:00:57  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:00:57  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:00:57  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:00:57  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:00:57  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:00:57  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:00:57  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:00:57  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:00:57  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:00:57  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:00:57  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:00:57  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:00:57  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:00:57  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:00:57  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:00:57  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:00:57  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:00:57  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:00:57  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:00:57  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:00:57  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:00:57  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:00:57  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:00:57  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:00:57  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:00:57  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:00:57  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:00:57  43  ,hh  att32
21:00:57  44  ,d   att33
21:00:57  45  ,w   att34
21:00:57  46  ,mpm att35
21:00:57  47  ,mph att36
21:00:57  48  ,trend att37
21:00:57  49  FROM svm6142
21:00:57  50  ORDER BY ydate
21:00:57  51  /

Table created.

Elapsed: 00:00:04.83
21:01:02 SQL> 
21:01:02 SQL> -- rpt
21:01:02 SQL> 
21:01:02 SQL> SELECT
21:01:02   2  pair
21:01:02   3  ,trend
21:01:02   4  ,gatt
21:01:02   5  ,COUNT(pair)
21:01:02   6  ,AVG(g6)
21:01:02   7  FROM svm6162
21:01:02   8  GROUP BY pair,trend,gatt
21:01:02   9  ORDER BY pair,trend,gatt
21:01:02  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7247  -.0020005
usd_chf 	-1 up	      3037 .003858747
usd_chf 	-1		71
usd_chf 	 1 nup	      6362 -.00158619
usd_chf 	 1 up	      2541 .003693599
usd_chf 	 1		 1

6 rows selected.

Elapsed: 00:00:00.02
21:01:02 SQL> 
21:01:02 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
21:01:02 SQL> CREATE TABLE modsrc COMPRESS AS
21:01:02   2  SELECT
21:01:02   3  pair
21:01:02   4  ,ydate
21:01:02   5  ,prdate
21:01:02   6  ,trend
21:01:02   7  ,g6
21:01:02   8  ,gatt
21:01:02   9  ,gattn
21:01:02  10  FROM svm6162
21:01:02  11  /

Table created.

Elapsed: 00:00:00.08
21:01:02 SQL> 
21:01:02 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
21:01:02 SQL> 
21:01:02 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
21:01:02 SQL> CREATE TABLE chf_ms610 COMPRESS AS
21:01:02   2  SELECT
21:01:02   3  ydate
21:01:02   4  ,trend chf_trend
21:01:02   5  ,g6    chf_g6
21:01:02   6  ,gatt  chf_gatt
21:01:02   7  ,gattn chf_gattn
21:01:02   8  FROM modsrc
21:01:02   9  /

Table created.

Elapsed: 00:00:00.07
21:01:02 SQL> 
21:01:02 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
21:01:02 SQL> 
21:01:02 SQL> -- I need a copy of the attributes:
21:01:02 SQL> 
21:01:02 SQL> 
21:01:02 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.05
21:01:02 SQL> CREATE TABLE chf_att COMPRESS AS
21:01:02   2  SELECT
21:01:02   3  ydate
21:01:02   4  ,att00 chf_att00
21:01:02   5  ,att01 chf_att01
21:01:02   6  ,att02 chf_att02
21:01:02   7  ,att03 chf_att03
21:01:02   8  ,att04 chf_att04
21:01:02   9  ,att05 chf_att05
21:01:02  10  ,att06 chf_att06
21:01:02  11  ,att07 chf_att07
21:01:02  12  ,att08 chf_att08
21:01:02  13  ,att09 chf_att09
21:01:02  14  ,att10 chf_att10
21:01:02  15  ,att11 chf_att11
21:01:02  16  ,att12 chf_att12
21:01:02  17  ,att13 chf_att13
21:01:02  18  ,att14 chf_att14
21:01:02  19  ,att15 chf_att15
21:01:02  20  ,att16 chf_att16
21:01:02  21  ,att17 chf_att17
21:01:02  22  ,att18 chf_att18
21:01:02  23  ,att19 chf_att19
21:01:02  24  ,att20 chf_att20
21:01:02  25  ,att21 chf_att21
21:01:02  26  ,att22 chf_att22
21:01:02  27  ,att23 chf_att23
21:01:02  28  ,att24 chf_att24
21:01:02  29  ,att25 chf_att25
21:01:02  30  ,att26 chf_att26
21:01:02  31  ,att27 chf_att27
21:01:02  32  ,att28 chf_att28
21:01:02  33  ,att29 chf_att29
21:01:02  34  ,att30 chf_att30
21:01:02  35  ,att31 chf_att31
21:01:02  36  ,att32 chf_att32
21:01:02  37  ,att33 chf_att33
21:01:02  38  ,att34 chf_att34
21:01:02  39  ,att35 chf_att35
21:01:02  40  ,att36 chf_att36
21:01:02  41  ,att37 chf_att37
21:01:02  42  FROM svm6162
21:01:02  43  /

Table created.

Elapsed: 00:00:00.22
21:01:03 SQL> 
21:01:03 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.53
21:01:03 SQL> 
21:01:03 SQL> -- rpt
21:01:03 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.84
21:01:04 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.00
21:01:04 SQL> 
21:01:04 SQL> --
21:01:04 SQL> -- ech610.sql
21:01:04 SQL> --
21:01:04 SQL> 
21:01:04 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:01:04 SQL> 
21:01:04 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
21:01:04 SQL> 
21:01:04 SQL> -- I created di5min here:
21:01:04 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:01:04 SQL> 
21:01:04 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:01:04   2  SELECT
21:01:04   3  pair
21:01:04   4  ,ydate
21:01:04   5  ,prdate
21:01:04   6  ,rownum rnum -- acts as t in my time-series
21:01:04   7  ,clse
21:01:04   8  -- Derive a bunch of attributes from clse, the latest price:
21:01:04   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:01:04  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:01:04  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:01:04  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:01:04  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:01:04  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:01:04  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:01:04  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:01:04  17  --
21:01:04  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:01:04  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:01:04  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:01:04  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:01:04  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:01:04  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:01:04  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:01:04  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:01:04  26  --
21:01:04  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:01:04  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:01:04  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:01:04  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:01:04  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:01:04  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:01:04  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:01:04  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:01:04  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:01:04  36  FROM di5min WHERE pair LIKE'%ech%'
21:01:04  37  AND ydate > sysdate - 95
21:01:04  38  ORDER BY ydate
21:01:04  39  /

View created.

Elapsed: 00:00:00.03
21:01:04 SQL> 
21:01:04 SQL> -- rpt
21:01:04 SQL> 
21:01:04 SQL> SELECT
21:01:04   2  pair
21:01:04   3  ,COUNT(pair)
21:01:04   4  ,MIN(clse),MAX(clse)
21:01:04   5  ,MIN(avg6),MAX(avg6)
21:01:04   6  ,MIN(ydate),MAX(ydate)
21:01:04   7  FROM svm6102
21:01:04   8  GROUP BY pair
21:01:04   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19257 1.24192946 1.38284305 1.24320711 1.37986485 2010-09-30 21:05:01 2011-01-03 20:50:00

Elapsed: 00:00:00.80
21:01:05 SQL> 
21:01:05 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:01:05 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.18
21:01:05 SQL> CREATE TABLE svm6122 COMPRESS AS
21:01:05   2  SELECT
21:01:05   3  pair
21:01:05   4  ,ydate
21:01:05   5  ,prdate
21:01:05   6  ,clse
21:01:05   7  -- g6 is important. I want to predict g6:
21:01:05   8  ,ld6 - clse g6
21:01:05   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:01:05  10  -- I want more attributes from the ones I derived above:
21:01:05  11  -- clse relation to moving-min
21:01:05  12  ,clse-min4  cm4
21:01:05  13  ,clse-min6  cm6
21:01:05  14  ,clse-min8  cm8
21:01:05  15  ,clse-min10 cm10
21:01:05  16  ,clse-min12 cm12
21:01:05  17  ,clse-min14 cm14
21:01:05  18  ,clse-min16 cm16
21:01:05  19  ,clse-min18 cm18
21:01:05  20  -- clse relation to moving-avg
21:01:05  21  ,clse-avg4  ca4
21:01:05  22  ,clse-avg6  ca6
21:01:05  23  ,clse-avg8  ca8
21:01:05  24  ,clse-avg10 ca10
21:01:05  25  ,clse-avg12 ca12
21:01:05  26  ,clse-avg14 ca14
21:01:05  27  ,clse-avg16 ca16
21:01:05  28  ,clse-avg18 ca18
21:01:05  29  -- clse relation to moving-max
21:01:05  30  ,clse-max4  cx4
21:01:05  31  ,clse-max6  cx6
21:01:05  32  ,clse-max8  cx8
21:01:05  33  ,clse-max10 cx10
21:01:05  34  ,clse-max12 cx12
21:01:05  35  ,clse-max14 cx14
21:01:05  36  ,clse-max16 cx16
21:01:05  37  ,clse-max18 cx18
21:01:05  38  -- Derive more attributes.
21:01:05  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:01:05  40  -- But COVAR_POP is more stable:
21:01:05  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:01:05  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:01:05  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:01:05  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:01:05  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:01:05  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:01:05  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:01:05  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:01:05  49  -- Derive date related attributes:
21:01:05  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:01:05  51  ,0+TO_CHAR(ydate,'D')d
21:01:05  52  ,0+TO_CHAR(ydate,'W')w
21:01:05  53  -- mpm stands for minutes-past-midnight:
21:01:05  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:01:05  55  -- mph stands for minutes-past-hour:
21:01:05  56  ,0+TO_CHAR(ydate,'MI')mph
21:01:05  57  FROM svm6102
21:01:05  58  ORDER BY ydate
21:01:05  59  /

Table created.

Elapsed: 00:00:02.10
21:01:08 SQL> 
21:01:08 SQL> -- rpt
21:01:08 SQL> 
21:01:08 SQL> SELECT
21:01:08   2  pair
21:01:08   3  ,COUNT(pair)
21:01:08   4  ,MIN(clse),MAX(clse)
21:01:08   5  ,MIN(ydate),MAX(ydate)
21:01:08   6  FROM svm6122
21:01:08   7  GROUP BY pair
21:01:08   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19257 1.24192946 1.38284305 2010-09-30 21:05:01 2011-01-03 20:50:00

Elapsed: 00:00:00.12
21:01:08 SQL> 
21:01:08 SQL> -- Prepare for derivation of NTILE based params:
21:01:08 SQL> 
21:01:08 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
21:01:08 SQL> CREATE TABLE svm6142 COMPRESS AS
21:01:08   2  SELECT
21:01:08   3  pair
21:01:08   4  ,ydate
21:01:08   5  ,prdate
21:01:08   6  ,clse
21:01:08   7  ,g6
21:01:08   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:01:08   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:01:08  10  ,CASE WHEN trend IS NULL THEN 1
21:01:08  11  	    WHEN trend =0      THEN 1
21:01:08  12  	    ELSE trend END trend
21:01:08  13  ,cm4
21:01:08  14  ,cm6
21:01:08  15  ,cm8
21:01:08  16  ,cm10
21:01:08  17  ,cm12
21:01:08  18  ,cm14
21:01:08  19  ,cm16
21:01:08  20  ,cm18
21:01:08  21  --
21:01:08  22  ,ca4
21:01:08  23  ,ca6
21:01:08  24  ,ca8
21:01:08  25  ,ca10
21:01:08  26  ,ca12
21:01:08  27  ,ca14
21:01:08  28  ,ca16
21:01:08  29  ,ca18
21:01:08  30  --
21:01:08  31  ,cx4
21:01:08  32  ,cx6
21:01:08  33  ,cx8
21:01:08  34  ,cx10
21:01:08  35  ,cx12
21:01:08  36  ,cx14
21:01:08  37  ,cx16
21:01:08  38  ,cx18
21:01:08  39  --
21:01:08  40  ,crr4
21:01:08  41  ,crr6
21:01:08  42  ,crr8
21:01:08  43  ,crr10
21:01:08  44  ,crr12
21:01:08  45  ,crr14
21:01:08  46  ,crr16
21:01:08  47  ,crr18
21:01:08  48  --
21:01:08  49  ,hh
21:01:08  50  ,d
21:01:08  51  ,w
21:01:08  52  ,mpm
21:01:08  53  ,mph
21:01:08  54  FROM svm6122
21:01:08  55  ORDER BY ydate
21:01:08  56  /

Table created.

Elapsed: 00:00:00.40
21:01:08 SQL> 
21:01:08 SQL> -- rpt
21:01:08 SQL> 
21:01:08 SQL> SELECT
21:01:08   2  pair
21:01:08   3  ,trend
21:01:08   4  ,gatt
21:01:08   5  ,COUNT(pair)
21:01:08   6  ,AVG(g6)
21:01:08   7  FROM svm6142
21:01:08   8  GROUP BY pair,trend,gatt
21:01:08   9  ORDER BY pair,trend,gatt
21:01:08  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6553 -.00224036
ech_usd 	-1 up	      3547 .003525626
ech_usd 	-1		21
ech_usd 	 1 nup	      6287  -.0023948
ech_usd 	 1 up	      2798 .003797882
ech_usd 	 1		51

6 rows selected.

Elapsed: 00:00:00.05
21:01:08 SQL> 
21:01:08 SQL> 
21:01:08 SQL> -- Derive NTILE based params:
21:01:08 SQL> 
21:01:08 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:01.12
21:01:09 SQL> CREATE TABLE svm6162 COMPRESS AS
21:01:09   2  SELECT
21:01:09   3  pair
21:01:09   4  ,ydate
21:01:09   5  ,prdate
21:01:09   6  ,clse
21:01:09   7  ,g6
21:01:09   8  ,gatt
21:01:09   9  ,gattn
21:01:09  10  ,trend
21:01:09  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:01:09  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:01:09  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:01:09  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:01:09  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:01:09  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:01:09  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:01:09  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:01:09  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:01:09  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:01:09  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:01:09  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:01:09  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:01:09  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:01:09  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:01:09  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:01:09  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:01:09  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:01:09  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:01:09  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:01:09  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:01:09  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:01:09  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:01:09  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:01:09  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:01:09  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:01:09  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:01:09  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:01:09  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:01:09  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:01:09  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:01:09  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:01:09  43  ,hh  att32
21:01:09  44  ,d   att33
21:01:09  45  ,w   att34
21:01:09  46  ,mpm att35
21:01:09  47  ,mph att36
21:01:09  48  ,trend att37
21:01:09  49  FROM svm6142
21:01:09  50  ORDER BY ydate
21:01:09  51  /

Table created.

Elapsed: 00:00:04.98
21:01:14 SQL> 
21:01:14 SQL> -- rpt
21:01:14 SQL> 
21:01:14 SQL> SELECT
21:01:14   2  pair
21:01:14   3  ,trend
21:01:14   4  ,gatt
21:01:14   5  ,COUNT(pair)
21:01:14   6  ,AVG(g6)
21:01:14   7  FROM svm6162
21:01:14   8  GROUP BY pair,trend,gatt
21:01:14   9  ORDER BY pair,trend,gatt
21:01:14  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6553 -.00224036
ech_usd 	-1 up	      3547 .003525626
ech_usd 	-1		21
ech_usd 	 1 nup	      6287  -.0023948
ech_usd 	 1 up	      2798 .003797882
ech_usd 	 1		51

6 rows selected.

Elapsed: 00:00:00.04
21:01:15 SQL> 
21:01:15 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.10
21:01:15 SQL> CREATE TABLE modsrc COMPRESS AS
21:01:15   2  SELECT
21:01:15   3  pair
21:01:15   4  ,ydate
21:01:15   5  ,prdate
21:01:15   6  ,trend
21:01:15   7  ,g6
21:01:15   8  ,gatt
21:01:15   9  ,gattn
21:01:15  10  FROM svm6162
21:01:15  11  /

Table created.

Elapsed: 00:00:00.09
21:01:15 SQL> 
21:01:15 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.24
21:01:15 SQL> 
21:01:15 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.08
21:01:15 SQL> CREATE TABLE ech_ms610 COMPRESS AS
21:01:15   2  SELECT
21:01:15   3  ydate
21:01:15   4  ,trend ech_trend
21:01:15   5  ,g6    ech_g6
21:01:15   6  ,gatt  ech_gatt
21:01:15   7  ,gattn ech_gattn
21:01:15   8  FROM modsrc
21:01:15   9  /

Table created.

Elapsed: 00:00:00.08
21:01:15 SQL> 
21:01:15 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
21:01:15 SQL> 
21:01:15 SQL> -- I need a copy of the attributes:
21:01:15 SQL> 
21:01:15 SQL> 
21:01:15 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.06
21:01:15 SQL> CREATE TABLE ech_att COMPRESS AS
21:01:15   2  SELECT
21:01:15   3  ydate
21:01:15   4  ,att00 ech_att00
21:01:15   5  ,att01 ech_att01
21:01:15   6  ,att02 ech_att02
21:01:15   7  ,att03 ech_att03
21:01:15   8  ,att04 ech_att04
21:01:15   9  ,att05 ech_att05
21:01:15  10  ,att06 ech_att06
21:01:15  11  ,att07 ech_att07
21:01:15  12  ,att08 ech_att08
21:01:15  13  ,att09 ech_att09
21:01:15  14  ,att10 ech_att10
21:01:15  15  ,att11 ech_att11
21:01:15  16  ,att12 ech_att12
21:01:15  17  ,att13 ech_att13
21:01:15  18  ,att14 ech_att14
21:01:15  19  ,att15 ech_att15
21:01:15  20  ,att16 ech_att16
21:01:15  21  ,att17 ech_att17
21:01:15  22  ,att18 ech_att18
21:01:15  23  ,att19 ech_att19
21:01:15  24  ,att20 ech_att20
21:01:15  25  ,att21 ech_att21
21:01:15  26  ,att22 ech_att22
21:01:15  27  ,att23 ech_att23
21:01:15  28  ,att24 ech_att24
21:01:15  29  ,att25 ech_att25
21:01:15  30  ,att26 ech_att26
21:01:15  31  ,att27 ech_att27
21:01:15  32  ,att28 ech_att28
21:01:15  33  ,att29 ech_att29
21:01:15  34  ,att30 ech_att30
21:01:15  35  ,att31 ech_att31
21:01:15  36  ,att32 ech_att32
21:01:15  37  ,att33 ech_att33
21:01:15  38  ,att34 ech_att34
21:01:15  39  ,att35 ech_att35
21:01:15  40  ,att36 ech_att36
21:01:15  41  ,att37 ech_att37
21:01:15  42  FROM svm6162
21:01:15  43  /

Table created.

Elapsed: 00:00:00.18
21:01:16 SQL> 
21:01:16 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
21:01:16 SQL> 
21:01:16 SQL> -- rpt
21:01:16 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19257

Elapsed: 00:00:00.78
21:01:17 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19257

Elapsed: 00:00:00.01
21:01:17 SQL> 
21:01:17 SQL> --
21:01:17 SQL> -- egb610.sql
21:01:17 SQL> --
21:01:17 SQL> 
21:01:17 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:01:17 SQL> 
21:01:17 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
21:01:17 SQL> 
21:01:17 SQL> -- I created di5min here:
21:01:17 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:01:17 SQL> 
21:01:17 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:01:17   2  SELECT
21:01:17   3  pair
21:01:17   4  ,ydate
21:01:17   5  ,prdate
21:01:17   6  ,rownum rnum -- acts as t in my time-series
21:01:17   7  ,clse
21:01:17   8  -- Derive a bunch of attributes from clse, the latest price:
21:01:17   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:01:17  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:01:17  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:01:17  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:01:17  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:01:17  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:01:17  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:01:17  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:01:17  17  --
21:01:17  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:01:17  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:01:17  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:01:17  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:01:17  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:01:17  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:01:17  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:01:17  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:01:17  26  --
21:01:17  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:01:17  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:01:17  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:01:17  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:01:17  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:01:17  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:01:17  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:01:17  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:01:17  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:01:17  36  FROM di5min WHERE pair LIKE'%egb%'
21:01:17  37  AND ydate > sysdate - 95
21:01:17  38  ORDER BY ydate
21:01:17  39  /

View created.

Elapsed: 00:00:00.05
21:01:17 SQL> 
21:01:17 SQL> -- rpt
21:01:17 SQL> 
21:01:17 SQL> SELECT
21:01:17   2  pair
21:01:17   3  ,COUNT(pair)
21:01:17   4  ,MIN(clse),MAX(clse)
21:01:17   5  ,MIN(avg6),MAX(avg6)
21:01:17   6  ,MIN(ydate),MAX(ydate)
21:01:17   7  FROM svm6102
21:01:17   8  GROUP BY pair
21:01:17   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19256 .833520557 .893920122 .834199029 .892400287 2010-09-30 21:05:01 2011-01-03 20:50:00

Elapsed: 00:00:00.93
21:01:18 SQL> 
21:01:18 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:01:18 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.19
21:01:18 SQL> CREATE TABLE svm6122 COMPRESS AS
21:01:18   2  SELECT
21:01:18   3  pair
21:01:18   4  ,ydate
21:01:18   5  ,prdate
21:01:18   6  ,clse
21:01:18   7  -- g6 is important. I want to predict g6:
21:01:18   8  ,ld6 - clse g6
21:01:18   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:01:18  10  -- I want more attributes from the ones I derived above:
21:01:18  11  -- clse relation to moving-min
21:01:18  12  ,clse-min4  cm4
21:01:18  13  ,clse-min6  cm6
21:01:18  14  ,clse-min8  cm8
21:01:18  15  ,clse-min10 cm10
21:01:18  16  ,clse-min12 cm12
21:01:18  17  ,clse-min14 cm14
21:01:18  18  ,clse-min16 cm16
21:01:18  19  ,clse-min18 cm18
21:01:18  20  -- clse relation to moving-avg
21:01:18  21  ,clse-avg4  ca4
21:01:18  22  ,clse-avg6  ca6
21:01:18  23  ,clse-avg8  ca8
21:01:18  24  ,clse-avg10 ca10
21:01:18  25  ,clse-avg12 ca12
21:01:18  26  ,clse-avg14 ca14
21:01:18  27  ,clse-avg16 ca16
21:01:18  28  ,clse-avg18 ca18
21:01:18  29  -- clse relation to moving-max
21:01:18  30  ,clse-max4  cx4
21:01:18  31  ,clse-max6  cx6
21:01:18  32  ,clse-max8  cx8
21:01:18  33  ,clse-max10 cx10
21:01:18  34  ,clse-max12 cx12
21:01:18  35  ,clse-max14 cx14
21:01:18  36  ,clse-max16 cx16
21:01:18  37  ,clse-max18 cx18
21:01:18  38  -- Derive more attributes.
21:01:18  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:01:18  40  -- But COVAR_POP is more stable:
21:01:18  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:01:18  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:01:18  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:01:18  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:01:18  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:01:18  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:01:18  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:01:18  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:01:18  49  -- Derive date related attributes:
21:01:18  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:01:18  51  ,0+TO_CHAR(ydate,'D')d
21:01:18  52  ,0+TO_CHAR(ydate,'W')w
21:01:18  53  -- mpm stands for minutes-past-midnight:
21:01:18  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:01:18  55  -- mph stands for minutes-past-hour:
21:01:18  56  ,0+TO_CHAR(ydate,'MI')mph
21:01:18  57  FROM svm6102
21:01:18  58  ORDER BY ydate
21:01:18  59  /

Table created.

Elapsed: 00:00:02.59
21:01:21 SQL> 
21:01:21 SQL> -- rpt
21:01:21 SQL> 
21:01:21 SQL> SELECT
21:01:21   2  pair
21:01:21   3  ,COUNT(pair)
21:01:21   4  ,MIN(clse),MAX(clse)
21:01:21   5  ,MIN(ydate),MAX(ydate)
21:01:21   6  FROM svm6122
21:01:21   7  GROUP BY pair
21:01:21   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19256 .833520557 .893920122 2010-09-30 21:05:01 2011-01-03 20:50:00

Elapsed: 00:00:00.15
21:01:21 SQL> 
21:01:21 SQL> -- Prepare for derivation of NTILE based params:
21:01:21 SQL> 
21:01:21 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.27
21:01:21 SQL> CREATE TABLE svm6142 COMPRESS AS
21:01:21   2  SELECT
21:01:21   3  pair
21:01:21   4  ,ydate
21:01:21   5  ,prdate
21:01:21   6  ,clse
21:01:21   7  ,g6
21:01:21   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:01:21   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:01:21  10  ,CASE WHEN trend IS NULL THEN 1
21:01:21  11  	    WHEN trend =0      THEN 1
21:01:21  12  	    ELSE trend END trend
21:01:21  13  ,cm4
21:01:21  14  ,cm6
21:01:21  15  ,cm8
21:01:21  16  ,cm10
21:01:21  17  ,cm12
21:01:21  18  ,cm14
21:01:21  19  ,cm16
21:01:21  20  ,cm18
21:01:21  21  --
21:01:21  22  ,ca4
21:01:21  23  ,ca6
21:01:21  24  ,ca8
21:01:21  25  ,ca10
21:01:21  26  ,ca12
21:01:21  27  ,ca14
21:01:21  28  ,ca16
21:01:21  29  ,ca18
21:01:21  30  --
21:01:21  31  ,cx4
21:01:21  32  ,cx6
21:01:21  33  ,cx8
21:01:21  34  ,cx10
21:01:21  35  ,cx12
21:01:21  36  ,cx14
21:01:21  37  ,cx16
21:01:21  38  ,cx18
21:01:21  39  --
21:01:21  40  ,crr4
21:01:21  41  ,crr6
21:01:21  42  ,crr8
21:01:21  43  ,crr10
21:01:21  44  ,crr12
21:01:21  45  ,crr14
21:01:21  46  ,crr16
21:01:21  47  ,crr18
21:01:21  48  --
21:01:21  49  ,hh
21:01:21  50  ,d
21:01:21  51  ,w
21:01:21  52  ,mpm
21:01:21  53  ,mph
21:01:21  54  FROM svm6122
21:01:21  55  ORDER BY ydate
21:01:21  56  /

Table created.

Elapsed: 00:00:00.47
21:01:22 SQL> 
21:01:22 SQL> -- rpt
21:01:22 SQL> 
21:01:22 SQL> SELECT
21:01:22   2  pair
21:01:22   3  ,trend
21:01:22   4  ,gatt
21:01:22   5  ,COUNT(pair)
21:01:22   6  ,AVG(g6)
21:01:22   7  FROM svm6142
21:01:22   8  GROUP BY pair,trend,gatt
21:01:22   9  ORDER BY pair,trend,gatt
21:01:22  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7334 -.00100001
egb_usd 	-1 up	      2683 .002917202
egb_usd 	 1 nup	      6492 -.00132964
egb_usd 	 1 up	      2675 .002920167
egb_usd 	 1		72

Elapsed: 00:00:00.17
21:01:22 SQL> 
21:01:22 SQL> 
21:01:22 SQL> -- Derive NTILE based params:
21:01:22 SQL> 
21:01:22 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.19
21:01:22 SQL> CREATE TABLE svm6162 COMPRESS AS
21:01:22   2  SELECT
21:01:22   3  pair
21:01:22   4  ,ydate
21:01:22   5  ,prdate
21:01:22   6  ,clse
21:01:22   7  ,g6
21:01:22   8  ,gatt
21:01:22   9  ,gattn
21:01:22  10  ,trend
21:01:22  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:01:22  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:01:22  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:01:22  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:01:22  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:01:22  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:01:22  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:01:22  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:01:22  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:01:22  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:01:22  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:01:22  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:01:22  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:01:22  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:01:22  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:01:22  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:01:22  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:01:22  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:01:22  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:01:22  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:01:22  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:01:22  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:01:22  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:01:22  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:01:22  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:01:22  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:01:22  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:01:22  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:01:22  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:01:22  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:01:22  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:01:22  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:01:22  43  ,hh  att32
21:01:22  44  ,d   att33
21:01:22  45  ,w   att34
21:01:22  46  ,mpm att35
21:01:22  47  ,mph att36
21:01:22  48  ,trend att37
21:01:22  49  FROM svm6142
21:01:22  50  ORDER BY ydate
21:01:22  51  /

Table created.

Elapsed: 00:00:05.46
21:01:28 SQL> 
21:01:28 SQL> -- rpt
21:01:28 SQL> 
21:01:28 SQL> SELECT
21:01:28   2  pair
21:01:28   3  ,trend
21:01:28   4  ,gatt
21:01:28   5  ,COUNT(pair)
21:01:28   6  ,AVG(g6)
21:01:28   7  FROM svm6162
21:01:28   8  GROUP BY pair,trend,gatt
21:01:28   9  ORDER BY pair,trend,gatt
21:01:28  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7334 -.00100001
egb_usd 	-1 up	      2683 .002917202
egb_usd 	 1 nup	      6492 -.00132964
egb_usd 	 1 up	      2675 .002920167
egb_usd 	 1		72

Elapsed: 00:00:00.03
21:01:28 SQL> 
21:01:28 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
21:01:28 SQL> CREATE TABLE modsrc COMPRESS AS
21:01:28   2  SELECT
21:01:28   3  pair
21:01:28   4  ,ydate
21:01:28   5  ,prdate
21:01:28   6  ,trend
21:01:28   7  ,g6
21:01:28   8  ,gatt
21:01:28   9  ,gattn
21:01:28  10  FROM svm6162
21:01:28  11  /

Table created.

Elapsed: 00:00:00.09
21:01:28 SQL> 
21:01:28 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.26
21:01:28 SQL> 
21:01:28 SQL> DROP   TABLE egb_ms610 ;

Table dropped.

Elapsed: 00:00:00.21
21:01:28 SQL> CREATE TABLE egb_ms610 COMPRESS AS
21:01:28   2  SELECT
21:01:28   3  ydate
21:01:28   4  ,trend egb_trend
21:01:28   5  ,g6    egb_g6
21:01:28   6  ,gatt  egb_gatt
21:01:28   7  ,gattn egb_gattn
21:01:28   8  FROM modsrc
21:01:28   9  /

Table created.

Elapsed: 00:00:00.07
21:01:29 SQL> 
21:01:29 SQL> ANALYZE TABLE egb_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
21:01:29 SQL> 
21:01:29 SQL> -- I need a copy of the attributes:
21:01:29 SQL> 
21:01:29 SQL> 
21:01:29 SQL> DROP   TABLE egb_att;

Table dropped.

Elapsed: 00:00:00.05
21:01:29 SQL> CREATE TABLE egb_att COMPRESS AS
21:01:29   2  SELECT
21:01:29   3  ydate
21:01:29   4  ,att00 egb_att00
21:01:29   5  ,att01 egb_att01
21:01:29   6  ,att02 egb_att02
21:01:29   7  ,att03 egb_att03
21:01:29   8  ,att04 egb_att04
21:01:29   9  ,att05 egb_att05
21:01:29  10  ,att06 egb_att06
21:01:29  11  ,att07 egb_att07
21:01:29  12  ,att08 egb_att08
21:01:29  13  ,att09 egb_att09
21:01:29  14  ,att10 egb_att10
21:01:29  15  ,att11 egb_att11
21:01:29  16  ,att12 egb_att12
21:01:29  17  ,att13 egb_att13
21:01:29  18  ,att14 egb_att14
21:01:29  19  ,att15 egb_att15
21:01:29  20  ,att16 egb_att16
21:01:29  21  ,att17 egb_att17
21:01:29  22  ,att18 egb_att18
21:01:29  23  ,att19 egb_att19
21:01:29  24  ,att20 egb_att20
21:01:29  25  ,att21 egb_att21
21:01:29  26  ,att22 egb_att22
21:01:29  27  ,att23 egb_att23
21:01:29  28  ,att24 egb_att24
21:01:29  29  ,att25 egb_att25
21:01:29  30  ,att26 egb_att26
21:01:29  31  ,att27 egb_att27
21:01:29  32  ,att28 egb_att28
21:01:29  33  ,att29 egb_att29
21:01:29  34  ,att30 egb_att30
21:01:29  35  ,att31 egb_att31
21:01:29  36  ,att32 egb_att32
21:01:29  37  ,att33 egb_att33
21:01:29  38  ,att34 egb_att34
21:01:29  39  ,att35 egb_att35
21:01:29  40  ,att36 egb_att36
21:01:29  41  ,att37 egb_att37
21:01:29  42  FROM svm6162
21:01:29  43  /

Table created.

Elapsed: 00:00:00.18
21:01:29 SQL> 
21:01:29 SQL> ANALYZE TABLE egb_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
21:01:29 SQL> 
21:01:29 SQL> -- rpt
21:01:29 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.94
21:01:30 SQL> SELECT COUNT(*)FROM egb_att;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.00
21:01:30 SQL> 
21:01:30 SQL> --
21:01:30 SQL> -- ejp610.sql
21:01:30 SQL> --
21:01:30 SQL> 
21:01:30 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:01:30 SQL> 
21:01:30 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.47
21:01:31 SQL> 
21:01:31 SQL> -- I created di5min here:
21:01:31 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:01:31 SQL> 
21:01:31 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:01:31   2  SELECT
21:01:31   3  pair
21:01:31   4  ,ydate
21:01:31   5  ,prdate
21:01:31   6  ,rownum rnum -- acts as t in my time-series
21:01:31   7  ,clse
21:01:31   8  -- Derive a bunch of attributes from clse, the latest price:
21:01:31   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:01:31  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:01:31  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:01:31  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:01:31  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:01:31  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:01:31  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:01:31  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:01:31  17  --
21:01:31  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:01:31  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:01:31  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:01:31  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:01:31  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:01:31  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:01:31  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:01:31  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:01:31  26  --
21:01:31  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:01:31  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:01:31  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:01:31  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:01:31  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:01:31  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:01:31  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:01:31  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:01:31  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:01:31  36  FROM di5min WHERE pair LIKE'%ejp%'
21:01:31  37  AND ydate > sysdate - 95
21:01:31  38  ORDER BY ydate
21:01:31  39  /

View created.

Elapsed: 00:00:00.05
21:01:31 SQL> 
21:01:31 SQL> -- rpt
21:01:31 SQL> 
21:01:31 SQL> SELECT
21:01:31   2  pair
21:01:31   3  ,COUNT(pair)
21:01:31   4  ,MIN(clse),MAX(clse)
21:01:31   5  ,MIN(avg6),MAX(avg6)
21:01:31   6  ,MIN(ydate),MAX(ydate)
21:01:31   7  FROM svm6102
21:01:31   8  GROUP BY pair
21:01:31   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ejp_usd       19254 107.643765	115.63485 107.776148 115.509678 2010-09-30 21:05:01 2011-01-03 20:50:00

Elapsed: 00:00:00.83
21:01:32 SQL> 
21:01:32 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:01:32 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.23
21:01:32 SQL> CREATE TABLE svm6122 COMPRESS AS
21:01:32   2  SELECT
21:01:32   3  pair
21:01:32   4  ,ydate
21:01:32   5  ,prdate
21:01:32   6  ,clse
21:01:32   7  -- g6 is important. I want to predict g6:
21:01:32   8  ,ld6 - clse g6
21:01:32   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:01:32  10  -- I want more attributes from the ones I derived above:
21:01:32  11  -- clse relation to moving-min
21:01:32  12  ,clse-min4  cm4
21:01:32  13  ,clse-min6  cm6
21:01:32  14  ,clse-min8  cm8
21:01:32  15  ,clse-min10 cm10
21:01:32  16  ,clse-min12 cm12
21:01:32  17  ,clse-min14 cm14
21:01:32  18  ,clse-min16 cm16
21:01:32  19  ,clse-min18 cm18
21:01:32  20  -- clse relation to moving-avg
21:01:32  21  ,clse-avg4  ca4
21:01:32  22  ,clse-avg6  ca6
21:01:32  23  ,clse-avg8  ca8
21:01:32  24  ,clse-avg10 ca10
21:01:32  25  ,clse-avg12 ca12
21:01:32  26  ,clse-avg14 ca14
21:01:32  27  ,clse-avg16 ca16
21:01:32  28  ,clse-avg18 ca18
21:01:32  29  -- clse relation to moving-max
21:01:32  30  ,clse-max4  cx4
21:01:32  31  ,clse-max6  cx6
21:01:32  32  ,clse-max8  cx8
21:01:32  33  ,clse-max10 cx10
21:01:32  34  ,clse-max12 cx12
21:01:32  35  ,clse-max14 cx14
21:01:32  36  ,clse-max16 cx16
21:01:32  37  ,clse-max18 cx18
21:01:32  38  -- Derive more attributes.
21:01:32  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:01:32  40  -- But COVAR_POP is more stable:
21:01:32  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:01:32  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:01:32  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:01:32  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:01:32  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:01:32  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:01:32  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:01:32  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:01:32  49  -- Derive date related attributes:
21:01:32  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:01:32  51  ,0+TO_CHAR(ydate,'D')d
21:01:32  52  ,0+TO_CHAR(ydate,'W')w
21:01:32  53  -- mpm stands for minutes-past-midnight:
21:01:32  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:01:32  55  -- mph stands for minutes-past-hour:
21:01:32  56  ,0+TO_CHAR(ydate,'MI')mph
21:01:32  57  FROM svm6102
21:01:32  58  ORDER BY ydate
21:01:32  59  /

Table created.

Elapsed: 00:00:02.15
21:01:34 SQL> 
21:01:34 SQL> -- rpt
21:01:34 SQL> 
21:01:34 SQL> SELECT
21:01:34   2  pair
21:01:34   3  ,COUNT(pair)
21:01:34   4  ,MIN(clse),MAX(clse)
21:01:34   5  ,MIN(ydate),MAX(ydate)
21:01:34   6  FROM svm6122
21:01:34   7  GROUP BY pair
21:01:34   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ejp_usd       19254 107.643765	115.63485 2010-09-30 21:05:01 2011-01-03 20:50:00

Elapsed: 00:00:00.08
21:01:34 SQL> 
21:01:34 SQL> -- Prepare for derivation of NTILE based params:
21:01:34 SQL> 
21:01:34 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.41
21:01:35 SQL> CREATE TABLE svm6142 COMPRESS AS
21:01:35   2  SELECT
21:01:35   3  pair
21:01:35   4  ,ydate
21:01:35   5  ,prdate
21:01:35   6  ,clse
21:01:35   7  ,g6
21:01:35   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:01:35   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:01:35  10  ,CASE WHEN trend IS NULL THEN 1
21:01:35  11  	    WHEN trend =0      THEN 1
21:01:35  12  	    ELSE trend END trend
21:01:35  13  ,cm4
21:01:35  14  ,cm6
21:01:35  15  ,cm8
21:01:35  16  ,cm10
21:01:35  17  ,cm12
21:01:35  18  ,cm14
21:01:35  19  ,cm16
21:01:35  20  ,cm18
21:01:35  21  --
21:01:35  22  ,ca4
21:01:35  23  ,ca6
21:01:35  24  ,ca8
21:01:35  25  ,ca10
21:01:35  26  ,ca12
21:01:35  27  ,ca14
21:01:35  28  ,ca16
21:01:35  29  ,ca18
21:01:35  30  --
21:01:35  31  ,cx4
21:01:35  32  ,cx6
21:01:35  33  ,cx8
21:01:35  34  ,cx10
21:01:35  35  ,cx12
21:01:35  36  ,cx14
21:01:35  37  ,cx16
21:01:35  38  ,cx18
21:01:35  39  --
21:01:35  40  ,crr4
21:01:35  41  ,crr6
21:01:35  42  ,crr8
21:01:35  43  ,crr10
21:01:35  44  ,crr12
21:01:35  45  ,crr14
21:01:35  46  ,crr16
21:01:35  47  ,crr18
21:01:35  48  --
21:01:35  49  ,hh
21:01:35  50  ,d
21:01:35  51  ,w
21:01:35  52  ,mpm
21:01:35  53  ,mph
21:01:35  54  FROM svm6122
21:01:35  55  ORDER BY ydate
21:01:35  56  /

Table created.

Elapsed: 00:00:00.38
21:01:35 SQL> 
21:01:35 SQL> -- rpt
21:01:35 SQL> 
21:01:35 SQL> SELECT
21:01:35   2  pair
21:01:35   3  ,trend
21:01:35   4  ,gatt
21:01:35   5  ,COUNT(pair)
21:01:35   6  ,AVG(g6)
21:01:35   7  FROM svm6142
21:01:35   8  GROUP BY pair,trend,gatt
21:01:35   9  ORDER BY pair,trend,gatt
21:01:35  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4860 -.32447218
ejp_usd 	-1 up	      4821 .271412826
ejp_usd 	 1 nup	      4851 -.29124606
ejp_usd 	 1 up	      4650 .286789441
ejp_usd 	 1		72

Elapsed: 00:00:00.07
21:01:35 SQL> 
21:01:35 SQL> 
21:01:35 SQL> -- Derive NTILE based params:
21:01:35 SQL> 
21:01:35 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.19
21:01:35 SQL> CREATE TABLE svm6162 COMPRESS AS
21:01:35   2  SELECT
21:01:35   3  pair
21:01:35   4  ,ydate
21:01:35   5  ,prdate
21:01:35   6  ,clse
21:01:35   7  ,g6
21:01:35   8  ,gatt
21:01:35   9  ,gattn
21:01:35  10  ,trend
21:01:35  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:01:35  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:01:35  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:01:35  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:01:35  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:01:35  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:01:35  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:01:35  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:01:35  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:01:35  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:01:35  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:01:35  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:01:35  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:01:35  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:01:35  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:01:35  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:01:35  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:01:35  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:01:35  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:01:35  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:01:35  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:01:35  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:01:35  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:01:35  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:01:35  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:01:35  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:01:35  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:01:35  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:01:35  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:01:35  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:01:35  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:01:35  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:01:35  43  ,hh  att32
21:01:35  44  ,d   att33
21:01:35  45  ,w   att34
21:01:35  46  ,mpm att35
21:01:35  47  ,mph att36
21:01:35  48  ,trend att37
21:01:35  49  FROM svm6142
21:01:35  50  ORDER BY ydate
21:01:35  51  /

Table created.

Elapsed: 00:00:04.83
21:01:40 SQL> 
21:01:40 SQL> -- rpt
21:01:40 SQL> 
21:01:40 SQL> SELECT
21:01:40   2  pair
21:01:40   3  ,trend
21:01:40   4  ,gatt
21:01:40   5  ,COUNT(pair)
21:01:40   6  ,AVG(g6)
21:01:40   7  FROM svm6162
21:01:40   8  GROUP BY pair,trend,gatt
21:01:40   9  ORDER BY pair,trend,gatt
21:01:40  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4860 -.32447218
ejp_usd 	-1 up	      4821 .271412826
ejp_usd 	 1 nup	      4851 -.29124606
ejp_usd 	 1 up	      4650 .286789441
ejp_usd 	 1		72

Elapsed: 00:00:00.07
21:01:40 SQL> 
21:01:40 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
21:01:40 SQL> CREATE TABLE modsrc COMPRESS AS
21:01:40   2  SELECT
21:01:40   3  pair
21:01:40   4  ,ydate
21:01:40   5  ,prdate
21:01:40   6  ,trend
21:01:40   7  ,g6
21:01:40   8  ,gatt
21:01:40   9  ,gattn
21:01:40  10  FROM svm6162
21:01:40  11  /

Table created.

Elapsed: 00:00:00.08
21:01:40 SQL> 
21:01:40 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
21:01:41 SQL> 
21:01:41 SQL> DROP   TABLE ejp_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
21:01:41 SQL> CREATE TABLE ejp_ms610 COMPRESS AS
21:01:41   2  SELECT
21:01:41   3  ydate
21:01:41   4  ,trend ejp_trend
21:01:41   5  ,g6    ejp_g6
21:01:41   6  ,gatt  ejp_gatt
21:01:41   7  ,gattn ejp_gattn
21:01:41   8  FROM modsrc
21:01:41   9  /

Table created.

Elapsed: 00:00:00.07
21:01:41 SQL> 
21:01:41 SQL> ANALYZE TABLE ejp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
21:01:41 SQL> 
21:01:41 SQL> -- I need a copy of the attributes:
21:01:41 SQL> 
21:01:41 SQL> 
21:01:41 SQL> DROP   TABLE ejp_att;

Table dropped.

Elapsed: 00:00:00.09
21:01:41 SQL> CREATE TABLE ejp_att COMPRESS AS
21:01:41   2  SELECT
21:01:41   3  ydate
21:01:41   4  ,att00 ejp_att00
21:01:41   5  ,att01 ejp_att01
21:01:41   6  ,att02 ejp_att02
21:01:41   7  ,att03 ejp_att03
21:01:41   8  ,att04 ejp_att04
21:01:41   9  ,att05 ejp_att05
21:01:41  10  ,att06 ejp_att06
21:01:41  11  ,att07 ejp_att07
21:01:41  12  ,att08 ejp_att08
21:01:41  13  ,att09 ejp_att09
21:01:41  14  ,att10 ejp_att10
21:01:41  15  ,att11 ejp_att11
21:01:41  16  ,att12 ejp_att12
21:01:41  17  ,att13 ejp_att13
21:01:41  18  ,att14 ejp_att14
21:01:41  19  ,att15 ejp_att15
21:01:41  20  ,att16 ejp_att16
21:01:41  21  ,att17 ejp_att17
21:01:41  22  ,att18 ejp_att18
21:01:41  23  ,att19 ejp_att19
21:01:41  24  ,att20 ejp_att20
21:01:41  25  ,att21 ejp_att21
21:01:41  26  ,att22 ejp_att22
21:01:41  27  ,att23 ejp_att23
21:01:41  28  ,att24 ejp_att24
21:01:41  29  ,att25 ejp_att25
21:01:41  30  ,att26 ejp_att26
21:01:41  31  ,att27 ejp_att27
21:01:41  32  ,att28 ejp_att28
21:01:41  33  ,att29 ejp_att29
21:01:41  34  ,att30 ejp_att30
21:01:41  35  ,att31 ejp_att31
21:01:41  36  ,att32 ejp_att32
21:01:41  37  ,att33 ejp_att33
21:01:41  38  ,att34 ejp_att34
21:01:41  39  ,att35 ejp_att35
21:01:41  40  ,att36 ejp_att36
21:01:41  41  ,att37 ejp_att37
21:01:41  42  FROM svm6162
21:01:41  43  /

Table created.

Elapsed: 00:00:00.22
21:01:41 SQL> 
21:01:41 SQL> ANALYZE TABLE ejp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
21:01:42 SQL> 
21:01:42 SQL> -- rpt
21:01:42 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19254

Elapsed: 00:00:00.82
21:01:42 SQL> SELECT COUNT(*)FROM ejp_att;

  COUNT(*)
----------
     19254

Elapsed: 00:00:00.00
21:01:42 SQL> 
21:01:42 SQL> --
21:01:42 SQL> -- ajp610.sql
21:01:42 SQL> --
21:01:42 SQL> 
21:01:42 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:01:42 SQL> 
21:01:42 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.35
21:01:43 SQL> 
21:01:43 SQL> -- I created di5min here:
21:01:43 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:01:43 SQL> 
21:01:43 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:01:43   2  SELECT
21:01:43   3  pair
21:01:43   4  ,ydate
21:01:43   5  ,prdate
21:01:43   6  ,rownum rnum -- acts as t in my time-series
21:01:43   7  ,clse
21:01:43   8  -- Derive a bunch of attributes from clse, the latest price:
21:01:43   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:01:43  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:01:43  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:01:43  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:01:43  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:01:43  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:01:43  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:01:43  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:01:43  17  --
21:01:43  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:01:43  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:01:43  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:01:43  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:01:43  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:01:43  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:01:43  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:01:43  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:01:43  26  --
21:01:43  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:01:43  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:01:43  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:01:43  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:01:43  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:01:43  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:01:43  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:01:43  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:01:43  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:01:43  36  FROM di5min WHERE pair LIKE'%ajp%'
21:01:43  37  AND ydate > sysdate - 95
21:01:43  38  ORDER BY ydate
21:01:43  39  /

View created.

Elapsed: 00:00:00.05
21:01:43 SQL> 
21:01:43 SQL> -- rpt
21:01:43 SQL> 
21:01:43 SQL> SELECT
21:01:43   2  pair
21:01:43   3  ,COUNT(pair)
21:01:43   4  ,MIN(clse),MAX(clse)
21:01:43   5  ,MIN(avg6),MAX(avg6)
21:01:43   6  ,MIN(ydate),MAX(ydate)
21:01:43   7  FROM svm6102
21:01:43   8  GROUP BY pair
21:01:43   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ajp_usd       19251  78.249976 83.6669853 78.5106193  83.546306 2010-09-30 21:05:01 2011-01-03 20:50:00

Elapsed: 00:00:00.77
21:01:44 SQL> 
21:01:44 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:01:44 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.20
21:01:44 SQL> CREATE TABLE svm6122 COMPRESS AS
21:01:44   2  SELECT
21:01:44   3  pair
21:01:44   4  ,ydate
21:01:44   5  ,prdate
21:01:44   6  ,clse
21:01:44   7  -- g6 is important. I want to predict g6:
21:01:44   8  ,ld6 - clse g6
21:01:44   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:01:44  10  -- I want more attributes from the ones I derived above:
21:01:44  11  -- clse relation to moving-min
21:01:44  12  ,clse-min4  cm4
21:01:44  13  ,clse-min6  cm6
21:01:44  14  ,clse-min8  cm8
21:01:44  15  ,clse-min10 cm10
21:01:44  16  ,clse-min12 cm12
21:01:44  17  ,clse-min14 cm14
21:01:44  18  ,clse-min16 cm16
21:01:44  19  ,clse-min18 cm18
21:01:44  20  -- clse relation to moving-avg
21:01:44  21  ,clse-avg4  ca4
21:01:44  22  ,clse-avg6  ca6
21:01:44  23  ,clse-avg8  ca8
21:01:44  24  ,clse-avg10 ca10
21:01:44  25  ,clse-avg12 ca12
21:01:44  26  ,clse-avg14 ca14
21:01:44  27  ,clse-avg16 ca16
21:01:44  28  ,clse-avg18 ca18
21:01:44  29  -- clse relation to moving-max
21:01:44  30  ,clse-max4  cx4
21:01:44  31  ,clse-max6  cx6
21:01:44  32  ,clse-max8  cx8
21:01:44  33  ,clse-max10 cx10
21:01:44  34  ,clse-max12 cx12
21:01:44  35  ,clse-max14 cx14
21:01:44  36  ,clse-max16 cx16
21:01:44  37  ,clse-max18 cx18
21:01:44  38  -- Derive more attributes.
21:01:44  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:01:44  40  -- But COVAR_POP is more stable:
21:01:44  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:01:44  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:01:44  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:01:44  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:01:44  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:01:44  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:01:44  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:01:44  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:01:44  49  -- Derive date related attributes:
21:01:44  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:01:44  51  ,0+TO_CHAR(ydate,'D')d
21:01:44  52  ,0+TO_CHAR(ydate,'W')w
21:01:44  53  -- mpm stands for minutes-past-midnight:
21:01:44  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:01:44  55  -- mph stands for minutes-past-hour:
21:01:44  56  ,0+TO_CHAR(ydate,'MI')mph
21:01:44  57  FROM svm6102
21:01:44  58  ORDER BY ydate
21:01:44  59  /

Table created.

Elapsed: 00:00:02.12
21:01:46 SQL> 
21:01:46 SQL> -- rpt
21:01:46 SQL> 
21:01:46 SQL> SELECT
21:01:46   2  pair
21:01:46   3  ,COUNT(pair)
21:01:46   4  ,MIN(clse),MAX(clse)
21:01:46   5  ,MIN(ydate),MAX(ydate)
21:01:46   6  FROM svm6122
21:01:46   7  GROUP BY pair
21:01:46   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ajp_usd       19251  78.249976 83.6669853 2010-09-30 21:05:01 2011-01-03 20:50:00

Elapsed: 00:00:00.14
21:01:46 SQL> 
21:01:46 SQL> -- Prepare for derivation of NTILE based params:
21:01:46 SQL> 
21:01:46 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.38
21:01:47 SQL> CREATE TABLE svm6142 COMPRESS AS
21:01:47   2  SELECT
21:01:47   3  pair
21:01:47   4  ,ydate
21:01:47   5  ,prdate
21:01:47   6  ,clse
21:01:47   7  ,g6
21:01:47   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:01:47   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:01:47  10  ,CASE WHEN trend IS NULL THEN 1
21:01:47  11  	    WHEN trend =0      THEN 1
21:01:47  12  	    ELSE trend END trend
21:01:47  13  ,cm4
21:01:47  14  ,cm6
21:01:47  15  ,cm8
21:01:47  16  ,cm10
21:01:47  17  ,cm12
21:01:47  18  ,cm14
21:01:47  19  ,cm16
21:01:47  20  ,cm18
21:01:47  21  --
21:01:47  22  ,ca4
21:01:47  23  ,ca6
21:01:47  24  ,ca8
21:01:47  25  ,ca10
21:01:47  26  ,ca12
21:01:47  27  ,ca14
21:01:47  28  ,ca16
21:01:47  29  ,ca18
21:01:47  30  --
21:01:47  31  ,cx4
21:01:47  32  ,cx6
21:01:47  33  ,cx8
21:01:47  34  ,cx10
21:01:47  35  ,cx12
21:01:47  36  ,cx14
21:01:47  37  ,cx16
21:01:47  38  ,cx18
21:01:47  39  --
21:01:47  40  ,crr4
21:01:47  41  ,crr6
21:01:47  42  ,crr8
21:01:47  43  ,crr10
21:01:47  44  ,crr12
21:01:47  45  ,crr14
21:01:47  46  ,crr16
21:01:47  47  ,crr18
21:01:47  48  --
21:01:47  49  ,hh
21:01:47  50  ,d
21:01:47  51  ,w
21:01:47  52  ,mpm
21:01:47  53  ,mph
21:01:47  54  FROM svm6122
21:01:47  55  ORDER BY ydate
21:01:47  56  /

Table created.

Elapsed: 00:00:00.38
21:01:47 SQL> 
21:01:47 SQL> -- rpt
21:01:47 SQL> 
21:01:47 SQL> SELECT
21:01:47   2  pair
21:01:47   3  ,trend
21:01:47   4  ,gatt
21:01:47   5  ,COUNT(pair)
21:01:47   6  ,AVG(g6)
21:01:47   7  FROM svm6142
21:01:47   8  GROUP BY pair,trend,gatt
21:01:47   9  ORDER BY pair,trend,gatt
21:01:47  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4020 -.22855856
ajp_usd 	-1 up	      5116 .220910826
ajp_usd 	-1		 1
ajp_usd 	 1 nup	      5165 -.19963933
ajp_usd 	 1 up	      4878 .204476141
ajp_usd 	 1		71

6 rows selected.

Elapsed: 00:00:00.09
21:01:47 SQL> 
21:01:47 SQL> 
21:01:47 SQL> -- Derive NTILE based params:
21:01:47 SQL> 
21:01:47 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.20
21:01:47 SQL> CREATE TABLE svm6162 COMPRESS AS
21:01:47   2  SELECT
21:01:47   3  pair
21:01:47   4  ,ydate
21:01:47   5  ,prdate
21:01:47   6  ,clse
21:01:47   7  ,g6
21:01:47   8  ,gatt
21:01:47   9  ,gattn
21:01:47  10  ,trend
21:01:47  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:01:47  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:01:47  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:01:47  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:01:47  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:01:47  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:01:47  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:01:47  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:01:47  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:01:47  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:01:47  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:01:47  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:01:47  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:01:47  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:01:47  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:01:47  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:01:47  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:01:47  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:01:47  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:01:47  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:01:47  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:01:47  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:01:47  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:01:47  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:01:47  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:01:47  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:01:47  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:01:47  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:01:47  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:01:47  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:01:47  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:01:47  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:01:47  43  ,hh  att32
21:01:47  44  ,d   att33
21:01:47  45  ,w   att34
21:01:47  46  ,mpm att35
21:01:47  47  ,mph att36
21:01:47  48  ,trend att37
21:01:47  49  FROM svm6142
21:01:47  50  ORDER BY ydate
21:01:47  51  /

Table created.

Elapsed: 00:00:04.92
21:01:52 SQL> 
21:01:52 SQL> -- rpt
21:01:52 SQL> 
21:01:52 SQL> SELECT
21:01:52   2  pair
21:01:52   3  ,trend
21:01:52   4  ,gatt
21:01:52   5  ,COUNT(pair)
21:01:52   6  ,AVG(g6)
21:01:52   7  FROM svm6162
21:01:52   8  GROUP BY pair,trend,gatt
21:01:52   9  ORDER BY pair,trend,gatt
21:01:52  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4020 -.22855856
ajp_usd 	-1 up	      5116 .220910826
ajp_usd 	-1		 1
ajp_usd 	 1 nup	      5165 -.19963933
ajp_usd 	 1 up	      4878 .204476141
ajp_usd 	 1		71

6 rows selected.

Elapsed: 00:00:00.07
21:01:52 SQL> 
21:01:52 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.31
21:01:52 SQL> CREATE TABLE modsrc COMPRESS AS
21:01:52   2  SELECT
21:01:52   3  pair
21:01:52   4  ,ydate
21:01:52   5  ,prdate
21:01:52   6  ,trend
21:01:52   7  ,g6
21:01:52   8  ,gatt
21:01:52   9  ,gattn
21:01:52  10  FROM svm6162
21:01:52  11  /

Table created.

Elapsed: 00:00:00.10
21:01:53 SQL> 
21:01:53 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.26
21:01:53 SQL> 
21:01:53 SQL> DROP   TABLE ajp_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
21:01:53 SQL> CREATE TABLE ajp_ms610 COMPRESS AS
21:01:53   2  SELECT
21:01:53   3  ydate
21:01:53   4  ,trend ajp_trend
21:01:53   5  ,g6    ajp_g6
21:01:53   6  ,gatt  ajp_gatt
21:01:53   7  ,gattn ajp_gattn
21:01:53   8  FROM modsrc
21:01:53   9  /

Table created.

Elapsed: 00:00:00.10
21:01:53 SQL> 
21:01:53 SQL> ANALYZE TABLE ajp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
21:01:53 SQL> 
21:01:53 SQL> -- I need a copy of the attributes:
21:01:53 SQL> 
21:01:53 SQL> 
21:01:53 SQL> DROP   TABLE ajp_att;

Table dropped.

Elapsed: 00:00:00.06
21:01:53 SQL> CREATE TABLE ajp_att COMPRESS AS
21:01:53   2  SELECT
21:01:53   3  ydate
21:01:53   4  ,att00 ajp_att00
21:01:53   5  ,att01 ajp_att01
21:01:53   6  ,att02 ajp_att02
21:01:53   7  ,att03 ajp_att03
21:01:53   8  ,att04 ajp_att04
21:01:53   9  ,att05 ajp_att05
21:01:53  10  ,att06 ajp_att06
21:01:53  11  ,att07 ajp_att07
21:01:53  12  ,att08 ajp_att08
21:01:53  13  ,att09 ajp_att09
21:01:53  14  ,att10 ajp_att10
21:01:53  15  ,att11 ajp_att11
21:01:53  16  ,att12 ajp_att12
21:01:53  17  ,att13 ajp_att13
21:01:53  18  ,att14 ajp_att14
21:01:53  19  ,att15 ajp_att15
21:01:53  20  ,att16 ajp_att16
21:01:53  21  ,att17 ajp_att17
21:01:53  22  ,att18 ajp_att18
21:01:53  23  ,att19 ajp_att19
21:01:53  24  ,att20 ajp_att20
21:01:53  25  ,att21 ajp_att21
21:01:53  26  ,att22 ajp_att22
21:01:53  27  ,att23 ajp_att23
21:01:53  28  ,att24 ajp_att24
21:01:53  29  ,att25 ajp_att25
21:01:53  30  ,att26 ajp_att26
21:01:53  31  ,att27 ajp_att27
21:01:53  32  ,att28 ajp_att28
21:01:53  33  ,att29 ajp_att29
21:01:53  34  ,att30 ajp_att30
21:01:53  35  ,att31 ajp_att31
21:01:53  36  ,att32 ajp_att32
21:01:53  37  ,att33 ajp_att33
21:01:53  38  ,att34 ajp_att34
21:01:53  39  ,att35 ajp_att35
21:01:53  40  ,att36 ajp_att36
21:01:53  41  ,att37 ajp_att37
21:01:53  42  FROM svm6162
21:01:53  43  /

Table created.

Elapsed: 00:00:00.19
21:01:53 SQL> 
21:01:53 SQL> ANALYZE TABLE ajp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.49
21:01:54 SQL> 
21:01:54 SQL> -- rpt
21:01:54 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19251

Elapsed: 00:00:00.79
21:01:55 SQL> SELECT COUNT(*)FROM ajp_att;

  COUNT(*)
----------
     19251

Elapsed: 00:00:00.01
21:01:55 SQL> 
21:01:55 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
