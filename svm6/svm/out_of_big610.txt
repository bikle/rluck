
SQL*Plus: Release 11.2.0.1.0 Production on Fri Dec 31 00:51:13 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

00:51:13 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
00:51:13 SQL> 00:51:13 SQL> --
00:51:13 SQL> -- eur610.sql
00:51:13 SQL> --
00:51:13 SQL> 
00:51:13 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:51:13 SQL> 
00:51:13 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.07
00:51:13 SQL> 
00:51:13 SQL> -- I created di5min here:
00:51:13 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
00:51:13 SQL> 
00:51:13 SQL> CREATE OR REPLACE VIEW svm6102 AS
00:51:13   2  SELECT
00:51:13   3  pair
00:51:13   4  ,ydate
00:51:13   5  ,prdate
00:51:13   6  ,rownum rnum -- acts as t in my time-series
00:51:13   7  ,clse
00:51:13   8  -- Derive a bunch of attributes from clse, the latest price:
00:51:13   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
00:51:13  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
00:51:13  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
00:51:13  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
00:51:13  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
00:51:13  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
00:51:13  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
00:51:13  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
00:51:13  17  --
00:51:13  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
00:51:13  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
00:51:13  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
00:51:13  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
00:51:13  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
00:51:13  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
00:51:13  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
00:51:13  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
00:51:13  26  --
00:51:13  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
00:51:13  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
00:51:13  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
00:51:13  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
00:51:13  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
00:51:13  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
00:51:13  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
00:51:13  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
00:51:13  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
00:51:13  36  FROM di5min WHERE pair LIKE'%eur%'
00:51:13  37  AND ydate > sysdate - 95
00:51:13  38  ORDER BY ydate
00:51:13  39  /

View created.

Elapsed: 00:00:00.10
00:51:13 SQL> 
00:51:13 SQL> -- rpt
00:51:13 SQL> 
00:51:13 SQL> SELECT
00:51:13   2  pair
00:51:13   3  ,COUNT(pair)
00:51:13   4  ,MIN(clse),MAX(clse)
00:51:13   5  ,MIN(avg6),MAX(avg6)
00:51:13   6  ,MIN(ydate),MAX(ydate)
00:51:13   7  FROM svm6102
00:51:13   8  GROUP BY pair
00:51:13   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19838    1.29735	   1.4273 1.29875103 1.42436233 2010-09-27 00:55:01 2010-12-31 00:45:00

Elapsed: 00:00:00.92
00:51:14 SQL> 
00:51:14 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
00:51:14 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.11
00:51:14 SQL> CREATE TABLE svm6122 COMPRESS AS
00:51:14   2  SELECT
00:51:14   3  pair
00:51:14   4  ,ydate
00:51:14   5  ,prdate
00:51:14   6  ,clse
00:51:14   7  -- g6 is important. I want to predict g6:
00:51:14   8  ,ld6 - clse g6
00:51:14   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
00:51:14  10  -- I want more attributes from the ones I derived above:
00:51:14  11  -- clse relation to moving-min
00:51:14  12  ,clse-min4  cm4
00:51:14  13  ,clse-min6  cm6
00:51:14  14  ,clse-min8  cm8
00:51:14  15  ,clse-min10 cm10
00:51:14  16  ,clse-min12 cm12
00:51:14  17  ,clse-min14 cm14
00:51:14  18  ,clse-min16 cm16
00:51:14  19  ,clse-min18 cm18
00:51:14  20  -- clse relation to moving-avg
00:51:14  21  ,clse-avg4  ca4
00:51:14  22  ,clse-avg6  ca6
00:51:14  23  ,clse-avg8  ca8
00:51:14  24  ,clse-avg10 ca10
00:51:14  25  ,clse-avg12 ca12
00:51:14  26  ,clse-avg14 ca14
00:51:14  27  ,clse-avg16 ca16
00:51:14  28  ,clse-avg18 ca18
00:51:14  29  -- clse relation to moving-max
00:51:14  30  ,clse-max4  cx4
00:51:14  31  ,clse-max6  cx6
00:51:14  32  ,clse-max8  cx8
00:51:14  33  ,clse-max10 cx10
00:51:14  34  ,clse-max12 cx12
00:51:14  35  ,clse-max14 cx14
00:51:14  36  ,clse-max16 cx16
00:51:14  37  ,clse-max18 cx18
00:51:14  38  -- Derive more attributes.
00:51:14  39  -- I want to use CORR() here to help SVM see the shape of the series.
00:51:14  40  -- But COVAR_POP is more stable:
00:51:14  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
00:51:14  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
00:51:14  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
00:51:14  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
00:51:14  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
00:51:14  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
00:51:14  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
00:51:14  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
00:51:14  49  -- Derive date related attributes:
00:51:14  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:51:14  51  ,0+TO_CHAR(ydate,'D')d
00:51:14  52  ,0+TO_CHAR(ydate,'W')w
00:51:14  53  -- mpm stands for minutes-past-midnight:
00:51:14  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:51:14  55  -- mph stands for minutes-past-hour:
00:51:14  56  ,0+TO_CHAR(ydate,'MI')mph
00:51:14  57  FROM svm6102
00:51:14  58  ORDER BY ydate
00:51:14  59  /

Table created.

Elapsed: 00:00:02.37
00:51:17 SQL> 
00:51:17 SQL> -- rpt
00:51:17 SQL> 
00:51:17 SQL> SELECT
00:51:17   2  pair
00:51:17   3  ,COUNT(pair)
00:51:17   4  ,MIN(clse),MAX(clse)
00:51:17   5  ,MIN(ydate),MAX(ydate)
00:51:17   6  FROM svm6122
00:51:17   7  GROUP BY pair
00:51:17   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19838    1.29735	   1.4273 2010-09-27 00:55:01 2010-12-31 00:45:00

Elapsed: 00:00:00.04
00:51:17 SQL> 
00:51:17 SQL> -- Prepare for derivation of NTILE based params:
00:51:17 SQL> 
00:51:17 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:01.19
00:51:18 SQL> CREATE TABLE svm6142 COMPRESS AS
00:51:18   2  SELECT
00:51:18   3  pair
00:51:18   4  ,ydate
00:51:18   5  ,prdate
00:51:18   6  ,clse
00:51:18   7  ,g6
00:51:18   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
00:51:18   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
00:51:18  10  ,CASE WHEN trend IS NULL THEN 1
00:51:18  11  	    WHEN trend =0      THEN 1
00:51:18  12  	    ELSE trend END trend
00:51:18  13  ,cm4
00:51:18  14  ,cm6
00:51:18  15  ,cm8
00:51:18  16  ,cm10
00:51:18  17  ,cm12
00:51:18  18  ,cm14
00:51:18  19  ,cm16
00:51:18  20  ,cm18
00:51:18  21  --
00:51:18  22  ,ca4
00:51:18  23  ,ca6
00:51:18  24  ,ca8
00:51:18  25  ,ca10
00:51:18  26  ,ca12
00:51:18  27  ,ca14
00:51:18  28  ,ca16
00:51:18  29  ,ca18
00:51:18  30  --
00:51:18  31  ,cx4
00:51:18  32  ,cx6
00:51:18  33  ,cx8
00:51:18  34  ,cx10
00:51:18  35  ,cx12
00:51:18  36  ,cx14
00:51:18  37  ,cx16
00:51:18  38  ,cx18
00:51:18  39  --
00:51:18  40  ,crr4
00:51:18  41  ,crr6
00:51:18  42  ,crr8
00:51:18  43  ,crr10
00:51:18  44  ,crr12
00:51:18  45  ,crr14
00:51:18  46  ,crr16
00:51:18  47  ,crr18
00:51:18  48  --
00:51:18  49  ,hh
00:51:18  50  ,d
00:51:18  51  ,w
00:51:18  52  ,mpm
00:51:18  53  ,mph
00:51:18  54  FROM svm6122
00:51:18  55  ORDER BY ydate
00:51:18  56  /

Table created.

Elapsed: 00:00:00.39
00:51:18 SQL> 
00:51:18 SQL> -- rpt
00:51:18 SQL> 
00:51:18 SQL> SELECT
00:51:18   2  pair
00:51:18   3  ,trend
00:51:18   4  ,gatt
00:51:18   5  ,COUNT(pair)
00:51:18   6  ,AVG(g6)
00:51:18   7  FROM svm6142
00:51:18   8  GROUP BY pair,trend,gatt
00:51:18   9  ORDER BY pair,trend,gatt
00:51:18  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6055 -.00310533
eur_usd 	-1 up	      3748 .004494147
eur_usd 	-1		16
eur_usd 	 1 nup	      6095 -.00307677
eur_usd 	 1 up	      3868 .005033296
eur_usd 	 1		56

6 rows selected.

Elapsed: 00:00:00.04
00:51:19 SQL> 
00:51:19 SQL> 
00:51:19 SQL> -- Derive NTILE based params:
00:51:19 SQL> 
00:51:19 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.24
00:51:19 SQL> CREATE TABLE svm6162 COMPRESS AS
00:51:19   2  SELECT
00:51:19   3  pair
00:51:19   4  ,ydate
00:51:19   5  ,prdate
00:51:19   6  ,clse
00:51:19   7  ,g6
00:51:19   8  ,gatt
00:51:19   9  ,gattn
00:51:19  10  ,trend
00:51:19  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
00:51:19  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
00:51:19  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
00:51:19  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
00:51:19  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
00:51:19  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
00:51:19  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
00:51:19  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
00:51:19  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
00:51:19  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
00:51:19  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
00:51:19  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
00:51:19  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
00:51:19  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
00:51:19  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
00:51:19  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
00:51:19  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
00:51:19  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
00:51:19  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
00:51:19  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
00:51:19  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
00:51:19  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
00:51:19  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
00:51:19  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
00:51:19  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
00:51:19  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
00:51:19  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
00:51:19  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
00:51:19  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
00:51:19  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
00:51:19  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
00:51:19  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
00:51:19  43  ,hh  att32
00:51:19  44  ,d   att33
00:51:19  45  ,w   att34
00:51:19  46  ,mpm att35
00:51:19  47  ,mph att36
00:51:19  48  ,trend att37
00:51:19  49  FROM svm6142
00:51:19  50  ORDER BY ydate
00:51:19  51  /

Table created.

Elapsed: 00:00:04.77
00:51:24 SQL> 
00:51:24 SQL> -- rpt
00:51:24 SQL> 
00:51:24 SQL> SELECT
00:51:24   2  pair
00:51:24   3  ,trend
00:51:24   4  ,gatt
00:51:24   5  ,COUNT(pair)
00:51:24   6  ,AVG(g6)
00:51:24   7  FROM svm6162
00:51:24   8  GROUP BY pair,trend,gatt
00:51:24   9  ORDER BY pair,trend,gatt
00:51:24  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6055 -.00310533
eur_usd 	-1 up	      3748 .004494147
eur_usd 	-1		16
eur_usd 	 1 nup	      6095 -.00307677
eur_usd 	 1 up	      3868 .005033296
eur_usd 	 1		56

6 rows selected.

Elapsed: 00:00:00.03
00:51:24 SQL> 
00:51:24 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.23
00:51:24 SQL> CREATE TABLE modsrc COMPRESS AS
00:51:24   2  SELECT
00:51:24   3  pair
00:51:24   4  ,ydate
00:51:24   5  ,prdate
00:51:24   6  ,trend
00:51:24   7  ,g6
00:51:24   8  ,gatt
00:51:24   9  ,gattn
00:51:24  10  FROM svm6162
00:51:24  11  /

Table created.

Elapsed: 00:00:00.08
00:51:24 SQL> 
00:51:24 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.28
00:51:24 SQL> 
00:51:24 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
00:51:24 SQL> CREATE TABLE eur_ms610 COMPRESS AS
00:51:24   2  SELECT
00:51:24   3  ydate
00:51:24   4  ,trend eur_trend
00:51:24   5  ,g6    eur_g6
00:51:24   6  ,gatt  eur_gatt
00:51:24   7  ,gattn eur_gattn
00:51:24   8  FROM modsrc
00:51:24   9  /

Table created.

Elapsed: 00:00:00.06
00:51:24 SQL> 
00:51:24 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
00:51:24 SQL> 
00:51:24 SQL> -- I need a copy of the attributes:
00:51:24 SQL> 
00:51:24 SQL> 
00:51:24 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.04
00:51:24 SQL> CREATE TABLE eur_att COMPRESS AS
00:51:24   2  SELECT
00:51:24   3  ydate
00:51:24   4  ,att00 eur_att00
00:51:24   5  ,att01 eur_att01
00:51:24   6  ,att02 eur_att02
00:51:24   7  ,att03 eur_att03
00:51:24   8  ,att04 eur_att04
00:51:24   9  ,att05 eur_att05
00:51:24  10  ,att06 eur_att06
00:51:24  11  ,att07 eur_att07
00:51:24  12  ,att08 eur_att08
00:51:24  13  ,att09 eur_att09
00:51:24  14  ,att10 eur_att10
00:51:24  15  ,att11 eur_att11
00:51:24  16  ,att12 eur_att12
00:51:24  17  ,att13 eur_att13
00:51:24  18  ,att14 eur_att14
00:51:24  19  ,att15 eur_att15
00:51:24  20  ,att16 eur_att16
00:51:24  21  ,att17 eur_att17
00:51:24  22  ,att18 eur_att18
00:51:24  23  ,att19 eur_att19
00:51:24  24  ,att20 eur_att20
00:51:24  25  ,att21 eur_att21
00:51:24  26  ,att22 eur_att22
00:51:24  27  ,att23 eur_att23
00:51:24  28  ,att24 eur_att24
00:51:24  29  ,att25 eur_att25
00:51:24  30  ,att26 eur_att26
00:51:24  31  ,att27 eur_att27
00:51:24  32  ,att28 eur_att28
00:51:24  33  ,att29 eur_att29
00:51:24  34  ,att30 eur_att30
00:51:24  35  ,att31 eur_att31
00:51:24  36  ,att32 eur_att32
00:51:24  37  ,att33 eur_att33
00:51:24  38  ,att34 eur_att34
00:51:24  39  ,att35 eur_att35
00:51:24  40  ,att36 eur_att36
00:51:24  41  ,att37 eur_att37
00:51:24  42  FROM svm6162
00:51:24  43  /

Table created.

Elapsed: 00:00:00.16
00:51:25 SQL> 
00:51:25 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
00:51:25 SQL> 
00:51:25 SQL> -- rpt
00:51:25 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19838

Elapsed: 00:00:00.88
00:51:26 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19838

Elapsed: 00:00:00.00
00:51:26 SQL> 
00:51:26 SQL> --
00:51:26 SQL> -- aud610.sql
00:51:26 SQL> --
00:51:26 SQL> 
00:51:26 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:51:26 SQL> 
00:51:26 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.51
00:51:26 SQL> 
00:51:26 SQL> -- I created di5min here:
00:51:26 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
00:51:26 SQL> 
00:51:26 SQL> CREATE OR REPLACE VIEW svm6102 AS
00:51:26   2  SELECT
00:51:26   3  pair
00:51:26   4  ,ydate
00:51:26   5  ,prdate
00:51:26   6  ,rownum rnum -- acts as t in my time-series
00:51:26   7  ,clse
00:51:26   8  -- Derive a bunch of attributes from clse, the latest price:
00:51:26   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
00:51:26  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
00:51:26  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
00:51:26  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
00:51:26  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
00:51:26  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
00:51:26  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
00:51:26  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
00:51:26  17  --
00:51:26  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
00:51:26  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
00:51:26  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
00:51:26  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
00:51:26  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
00:51:26  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
00:51:26  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
00:51:26  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
00:51:26  26  --
00:51:26  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
00:51:26  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
00:51:26  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
00:51:26  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
00:51:26  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
00:51:26  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
00:51:26  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
00:51:26  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
00:51:26  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
00:51:26  36  FROM di5min WHERE pair LIKE'%aud%'
00:51:26  37  AND ydate > sysdate - 95
00:51:26  38  ORDER BY ydate
00:51:26  39  /

View created.

Elapsed: 00:00:00.05
00:51:27 SQL> 
00:51:27 SQL> -- rpt
00:51:27 SQL> 
00:51:27 SQL> SELECT
00:51:27   2  pair
00:51:27   3  ,COUNT(pair)
00:51:27   4  ,MIN(clse),MAX(clse)
00:51:27   5  ,MIN(avg6),MAX(avg6)
00:51:27   6  ,MIN(ydate),MAX(ydate)
00:51:27   7  FROM svm6102
00:51:27   8  GROUP BY pair
00:51:27   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19835	.95405	1.0195625 .957141438 1.01819366 2010-09-27 00:55:01 2010-12-31 00:45:00

Elapsed: 00:00:00.88
00:51:27 SQL> 
00:51:27 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
00:51:27 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.17
00:51:28 SQL> CREATE TABLE svm6122 COMPRESS AS
00:51:28   2  SELECT
00:51:28   3  pair
00:51:28   4  ,ydate
00:51:28   5  ,prdate
00:51:28   6  ,clse
00:51:28   7  -- g6 is important. I want to predict g6:
00:51:28   8  ,ld6 - clse g6
00:51:28   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
00:51:28  10  -- I want more attributes from the ones I derived above:
00:51:28  11  -- clse relation to moving-min
00:51:28  12  ,clse-min4  cm4
00:51:28  13  ,clse-min6  cm6
00:51:28  14  ,clse-min8  cm8
00:51:28  15  ,clse-min10 cm10
00:51:28  16  ,clse-min12 cm12
00:51:28  17  ,clse-min14 cm14
00:51:28  18  ,clse-min16 cm16
00:51:28  19  ,clse-min18 cm18
00:51:28  20  -- clse relation to moving-avg
00:51:28  21  ,clse-avg4  ca4
00:51:28  22  ,clse-avg6  ca6
00:51:28  23  ,clse-avg8  ca8
00:51:28  24  ,clse-avg10 ca10
00:51:28  25  ,clse-avg12 ca12
00:51:28  26  ,clse-avg14 ca14
00:51:28  27  ,clse-avg16 ca16
00:51:28  28  ,clse-avg18 ca18
00:51:28  29  -- clse relation to moving-max
00:51:28  30  ,clse-max4  cx4
00:51:28  31  ,clse-max6  cx6
00:51:28  32  ,clse-max8  cx8
00:51:28  33  ,clse-max10 cx10
00:51:28  34  ,clse-max12 cx12
00:51:28  35  ,clse-max14 cx14
00:51:28  36  ,clse-max16 cx16
00:51:28  37  ,clse-max18 cx18
00:51:28  38  -- Derive more attributes.
00:51:28  39  -- I want to use CORR() here to help SVM see the shape of the series.
00:51:28  40  -- But COVAR_POP is more stable:
00:51:28  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
00:51:28  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
00:51:28  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
00:51:28  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
00:51:28  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
00:51:28  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
00:51:28  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
00:51:28  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
00:51:28  49  -- Derive date related attributes:
00:51:28  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:51:28  51  ,0+TO_CHAR(ydate,'D')d
00:51:28  52  ,0+TO_CHAR(ydate,'W')w
00:51:28  53  -- mpm stands for minutes-past-midnight:
00:51:28  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:51:28  55  -- mph stands for minutes-past-hour:
00:51:28  56  ,0+TO_CHAR(ydate,'MI')mph
00:51:28  57  FROM svm6102
00:51:28  58  ORDER BY ydate
00:51:28  59  /

Table created.

Elapsed: 00:00:02.12
00:51:30 SQL> 
00:51:30 SQL> -- rpt
00:51:30 SQL> 
00:51:30 SQL> SELECT
00:51:30   2  pair
00:51:30   3  ,COUNT(pair)
00:51:30   4  ,MIN(clse),MAX(clse)
00:51:30   5  ,MIN(ydate),MAX(ydate)
00:51:30   6  FROM svm6122
00:51:30   7  GROUP BY pair
00:51:30   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19835	.95405	1.0195625 2010-09-27 00:55:01 2010-12-31 00:45:00

Elapsed: 00:00:00.04
00:51:30 SQL> 
00:51:30 SQL> -- Prepare for derivation of NTILE based params:
00:51:30 SQL> 
00:51:30 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.18
00:51:30 SQL> CREATE TABLE svm6142 COMPRESS AS
00:51:30   2  SELECT
00:51:30   3  pair
00:51:30   4  ,ydate
00:51:30   5  ,prdate
00:51:30   6  ,clse
00:51:30   7  ,g6
00:51:30   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
00:51:30   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
00:51:30  10  ,CASE WHEN trend IS NULL THEN 1
00:51:30  11  	    WHEN trend =0      THEN 1
00:51:30  12  	    ELSE trend END trend
00:51:30  13  ,cm4
00:51:30  14  ,cm6
00:51:30  15  ,cm8
00:51:30  16  ,cm10
00:51:30  17  ,cm12
00:51:30  18  ,cm14
00:51:30  19  ,cm16
00:51:30  20  ,cm18
00:51:30  21  --
00:51:30  22  ,ca4
00:51:30  23  ,ca6
00:51:30  24  ,ca8
00:51:30  25  ,ca10
00:51:30  26  ,ca12
00:51:30  27  ,ca14
00:51:30  28  ,ca16
00:51:30  29  ,ca18
00:51:30  30  --
00:51:30  31  ,cx4
00:51:30  32  ,cx6
00:51:30  33  ,cx8
00:51:30  34  ,cx10
00:51:30  35  ,cx12
00:51:30  36  ,cx14
00:51:30  37  ,cx16
00:51:30  38  ,cx18
00:51:30  39  --
00:51:30  40  ,crr4
00:51:30  41  ,crr6
00:51:30  42  ,crr8
00:51:30  43  ,crr10
00:51:30  44  ,crr12
00:51:30  45  ,crr14
00:51:30  46  ,crr16
00:51:30  47  ,crr18
00:51:30  48  --
00:51:30  49  ,hh
00:51:30  50  ,d
00:51:30  51  ,w
00:51:30  52  ,mpm
00:51:30  53  ,mph
00:51:30  54  FROM svm6122
00:51:30  55  ORDER BY ydate
00:51:30  56  /

Table created.

Elapsed: 00:00:00.36
00:51:30 SQL> 
00:51:30 SQL> -- rpt
00:51:30 SQL> 
00:51:30 SQL> SELECT
00:51:30   2  pair
00:51:30   3  ,trend
00:51:30   4  ,gatt
00:51:30   5  ,COUNT(pair)
00:51:30   6  ,AVG(g6)
00:51:30   7  FROM svm6142
00:51:30   8  GROUP BY pair,trend,gatt
00:51:30   9  ORDER BY pair,trend,gatt
00:51:30  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5268 -.00211852
aud_usd 	-1 up	      3861 .003727707
aud_usd 	-1		11
aud_usd 	 1 nup	      6834 -.00209885
aud_usd 	 1 up	      3800 .004019602
aud_usd 	 1		61

6 rows selected.

Elapsed: 00:00:00.05
00:51:30 SQL> 
00:51:30 SQL> 
00:51:30 SQL> -- Derive NTILE based params:
00:51:30 SQL> 
00:51:30 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
00:51:30 SQL> CREATE TABLE svm6162 COMPRESS AS
00:51:30   2  SELECT
00:51:30   3  pair
00:51:30   4  ,ydate
00:51:30   5  ,prdate
00:51:30   6  ,clse
00:51:30   7  ,g6
00:51:30   8  ,gatt
00:51:30   9  ,gattn
00:51:30  10  ,trend
00:51:30  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
00:51:30  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
00:51:30  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
00:51:30  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
00:51:30  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
00:51:30  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
00:51:30  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
00:51:30  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
00:51:30  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
00:51:30  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
00:51:30  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
00:51:30  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
00:51:30  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
00:51:30  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
00:51:30  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
00:51:30  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
00:51:30  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
00:51:30  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
00:51:30  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
00:51:30  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
00:51:30  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
00:51:30  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
00:51:30  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
00:51:30  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
00:51:30  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
00:51:30  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
00:51:30  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
00:51:30  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
00:51:30  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
00:51:30  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
00:51:30  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
00:51:30  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
00:51:30  43  ,hh  att32
00:51:30  44  ,d   att33
00:51:30  45  ,w   att34
00:51:30  46  ,mpm att35
00:51:30  47  ,mph att36
00:51:30  48  ,trend att37
00:51:30  49  FROM svm6142
00:51:30  50  ORDER BY ydate
00:51:30  51  /

Table created.

Elapsed: 00:00:04.86
00:51:35 SQL> 
00:51:35 SQL> -- rpt
00:51:35 SQL> 
00:51:35 SQL> SELECT
00:51:35   2  pair
00:51:35   3  ,trend
00:51:35   4  ,gatt
00:51:35   5  ,COUNT(pair)
00:51:35   6  ,AVG(g6)
00:51:35   7  FROM svm6162
00:51:35   8  GROUP BY pair,trend,gatt
00:51:35   9  ORDER BY pair,trend,gatt
00:51:35  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5268 -.00211852
aud_usd 	-1 up	      3861 .003727707
aud_usd 	-1		11
aud_usd 	 1 nup	      6834 -.00209885
aud_usd 	 1 up	      3800 .004019602
aud_usd 	 1		61

6 rows selected.

Elapsed: 00:00:00.03
00:51:35 SQL> 
00:51:35 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.10
00:51:35 SQL> CREATE TABLE modsrc COMPRESS AS
00:51:35   2  SELECT
00:51:35   3  pair
00:51:35   4  ,ydate
00:51:35   5  ,prdate
00:51:35   6  ,trend
00:51:35   7  ,g6
00:51:35   8  ,gatt
00:51:35   9  ,gattn
00:51:35  10  FROM svm6162
00:51:35  11  /

Table created.

Elapsed: 00:00:00.08
00:51:36 SQL> 
00:51:36 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.24
00:51:36 SQL> 
00:51:36 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
00:51:36 SQL> CREATE TABLE aud_ms610 COMPRESS AS
00:51:36   2  SELECT
00:51:36   3  ydate
00:51:36   4  ,trend aud_trend
00:51:36   5  ,g6    aud_g6
00:51:36   6  ,gatt  aud_gatt
00:51:36   7  ,gattn aud_gattn
00:51:36   8  FROM modsrc
00:51:36   9  /

Table created.

Elapsed: 00:00:00.10
00:51:36 SQL> 
00:51:36 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
00:51:36 SQL> 
00:51:36 SQL> -- I need a copy of the attributes:
00:51:36 SQL> 
00:51:36 SQL> 
00:51:36 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.06
00:51:36 SQL> CREATE TABLE aud_att COMPRESS AS
00:51:36   2  SELECT
00:51:36   3  ydate
00:51:36   4  ,att00 aud_att00
00:51:36   5  ,att01 aud_att01
00:51:36   6  ,att02 aud_att02
00:51:36   7  ,att03 aud_att03
00:51:36   8  ,att04 aud_att04
00:51:36   9  ,att05 aud_att05
00:51:36  10  ,att06 aud_att06
00:51:36  11  ,att07 aud_att07
00:51:36  12  ,att08 aud_att08
00:51:36  13  ,att09 aud_att09
00:51:36  14  ,att10 aud_att10
00:51:36  15  ,att11 aud_att11
00:51:36  16  ,att12 aud_att12
00:51:36  17  ,att13 aud_att13
00:51:36  18  ,att14 aud_att14
00:51:36  19  ,att15 aud_att15
00:51:36  20  ,att16 aud_att16
00:51:36  21  ,att17 aud_att17
00:51:36  22  ,att18 aud_att18
00:51:36  23  ,att19 aud_att19
00:51:36  24  ,att20 aud_att20
00:51:36  25  ,att21 aud_att21
00:51:36  26  ,att22 aud_att22
00:51:36  27  ,att23 aud_att23
00:51:36  28  ,att24 aud_att24
00:51:36  29  ,att25 aud_att25
00:51:36  30  ,att26 aud_att26
00:51:36  31  ,att27 aud_att27
00:51:36  32  ,att28 aud_att28
00:51:36  33  ,att29 aud_att29
00:51:36  34  ,att30 aud_att30
00:51:36  35  ,att31 aud_att31
00:51:36  36  ,att32 aud_att32
00:51:36  37  ,att33 aud_att33
00:51:36  38  ,att34 aud_att34
00:51:36  39  ,att35 aud_att35
00:51:36  40  ,att36 aud_att36
00:51:36  41  ,att37 aud_att37
00:51:36  42  FROM svm6162
00:51:36  43  /

Table created.

Elapsed: 00:00:00.20
00:51:36 SQL> 
00:51:36 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
00:51:37 SQL> 
00:51:37 SQL> -- rpt
00:51:37 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19835

Elapsed: 00:00:00.85
00:51:38 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19835

Elapsed: 00:00:00.01
00:51:38 SQL> 
00:51:38 SQL> --
00:51:38 SQL> -- gbp610.sql
00:51:38 SQL> --
00:51:38 SQL> 
00:51:38 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:51:38 SQL> 
00:51:38 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
00:51:38 SQL> 
00:51:38 SQL> -- I created di5min here:
00:51:38 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
00:51:38 SQL> 
00:51:38 SQL> CREATE OR REPLACE VIEW svm6102 AS
00:51:38   2  SELECT
00:51:38   3  pair
00:51:38   4  ,ydate
00:51:38   5  ,prdate
00:51:38   6  ,rownum rnum -- acts as t in my time-series
00:51:38   7  ,clse
00:51:38   8  -- Derive a bunch of attributes from clse, the latest price:
00:51:38   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
00:51:38  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
00:51:38  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
00:51:38  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
00:51:38  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
00:51:38  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
00:51:38  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
00:51:38  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
00:51:38  17  --
00:51:38  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
00:51:38  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
00:51:38  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
00:51:38  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
00:51:38  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
00:51:38  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
00:51:38  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
00:51:38  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
00:51:38  26  --
00:51:38  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
00:51:38  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
00:51:38  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
00:51:38  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
00:51:38  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
00:51:38  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
00:51:38  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
00:51:38  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
00:51:38  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
00:51:38  36  FROM di5min WHERE pair LIKE'%gbp%'
00:51:38  37  AND ydate > sysdate - 95
00:51:38  38  ORDER BY ydate
00:51:38  39  /

View created.

Elapsed: 00:00:00.05
00:51:38 SQL> 
00:51:38 SQL> -- rpt
00:51:38 SQL> 
00:51:38 SQL> SELECT
00:51:38   2  pair
00:51:38   3  ,COUNT(pair)
00:51:38   4  ,MIN(clse),MAX(clse)
00:51:38   5  ,MIN(avg6),MAX(avg6)
00:51:38   6  ,MIN(ydate),MAX(ydate)
00:51:38   7  FROM svm6102
00:51:38   8  GROUP BY pair
00:51:38   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19837   1.535325	   1.6295 1.53696747 1.62716986 2010-09-27 00:55:01 2010-12-31 00:45:00

Elapsed: 00:00:00.87
00:51:39 SQL> 
00:51:39 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
00:51:39 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.19
00:51:39 SQL> CREATE TABLE svm6122 COMPRESS AS
00:51:39   2  SELECT
00:51:39   3  pair
00:51:39   4  ,ydate
00:51:39   5  ,prdate
00:51:39   6  ,clse
00:51:39   7  -- g6 is important. I want to predict g6:
00:51:39   8  ,ld6 - clse g6
00:51:39   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
00:51:39  10  -- I want more attributes from the ones I derived above:
00:51:39  11  -- clse relation to moving-min
00:51:39  12  ,clse-min4  cm4
00:51:39  13  ,clse-min6  cm6
00:51:39  14  ,clse-min8  cm8
00:51:39  15  ,clse-min10 cm10
00:51:39  16  ,clse-min12 cm12
00:51:39  17  ,clse-min14 cm14
00:51:39  18  ,clse-min16 cm16
00:51:39  19  ,clse-min18 cm18
00:51:39  20  -- clse relation to moving-avg
00:51:39  21  ,clse-avg4  ca4
00:51:39  22  ,clse-avg6  ca6
00:51:39  23  ,clse-avg8  ca8
00:51:39  24  ,clse-avg10 ca10
00:51:39  25  ,clse-avg12 ca12
00:51:39  26  ,clse-avg14 ca14
00:51:39  27  ,clse-avg16 ca16
00:51:39  28  ,clse-avg18 ca18
00:51:39  29  -- clse relation to moving-max
00:51:39  30  ,clse-max4  cx4
00:51:39  31  ,clse-max6  cx6
00:51:39  32  ,clse-max8  cx8
00:51:39  33  ,clse-max10 cx10
00:51:39  34  ,clse-max12 cx12
00:51:39  35  ,clse-max14 cx14
00:51:39  36  ,clse-max16 cx16
00:51:39  37  ,clse-max18 cx18
00:51:39  38  -- Derive more attributes.
00:51:39  39  -- I want to use CORR() here to help SVM see the shape of the series.
00:51:39  40  -- But COVAR_POP is more stable:
00:51:39  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
00:51:39  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
00:51:39  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
00:51:39  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
00:51:39  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
00:51:39  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
00:51:39  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
00:51:39  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
00:51:39  49  -- Derive date related attributes:
00:51:39  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:51:39  51  ,0+TO_CHAR(ydate,'D')d
00:51:39  52  ,0+TO_CHAR(ydate,'W')w
00:51:39  53  -- mpm stands for minutes-past-midnight:
00:51:39  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:51:39  55  -- mph stands for minutes-past-hour:
00:51:39  56  ,0+TO_CHAR(ydate,'MI')mph
00:51:39  57  FROM svm6102
00:51:39  58  ORDER BY ydate
00:51:39  59  /

Table created.

Elapsed: 00:00:02.08
00:51:41 SQL> 
00:51:41 SQL> -- rpt
00:51:41 SQL> 
00:51:41 SQL> SELECT
00:51:41   2  pair
00:51:41   3  ,COUNT(pair)
00:51:41   4  ,MIN(clse),MAX(clse)
00:51:41   5  ,MIN(ydate),MAX(ydate)
00:51:41   6  FROM svm6122
00:51:41   7  GROUP BY pair
00:51:41   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19837   1.535325	   1.6295 2010-09-27 00:55:01 2010-12-31 00:45:00

Elapsed: 00:00:00.04
00:51:41 SQL> 
00:51:41 SQL> -- Prepare for derivation of NTILE based params:
00:51:41 SQL> 
00:51:41 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.31
00:51:42 SQL> CREATE TABLE svm6142 COMPRESS AS
00:51:42   2  SELECT
00:51:42   3  pair
00:51:42   4  ,ydate
00:51:42   5  ,prdate
00:51:42   6  ,clse
00:51:42   7  ,g6
00:51:42   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
00:51:42   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
00:51:42  10  ,CASE WHEN trend IS NULL THEN 1
00:51:42  11  	    WHEN trend =0      THEN 1
00:51:42  12  	    ELSE trend END trend
00:51:42  13  ,cm4
00:51:42  14  ,cm6
00:51:42  15  ,cm8
00:51:42  16  ,cm10
00:51:42  17  ,cm12
00:51:42  18  ,cm14
00:51:42  19  ,cm16
00:51:42  20  ,cm18
00:51:42  21  --
00:51:42  22  ,ca4
00:51:42  23  ,ca6
00:51:42  24  ,ca8
00:51:42  25  ,ca10
00:51:42  26  ,ca12
00:51:42  27  ,ca14
00:51:42  28  ,ca16
00:51:42  29  ,ca18
00:51:42  30  --
00:51:42  31  ,cx4
00:51:42  32  ,cx6
00:51:42  33  ,cx8
00:51:42  34  ,cx10
00:51:42  35  ,cx12
00:51:42  36  ,cx14
00:51:42  37  ,cx16
00:51:42  38  ,cx18
00:51:42  39  --
00:51:42  40  ,crr4
00:51:42  41  ,crr6
00:51:42  42  ,crr8
00:51:42  43  ,crr10
00:51:42  44  ,crr12
00:51:42  45  ,crr14
00:51:42  46  ,crr16
00:51:42  47  ,crr18
00:51:42  48  --
00:51:42  49  ,hh
00:51:42  50  ,d
00:51:42  51  ,w
00:51:42  52  ,mpm
00:51:42  53  ,mph
00:51:42  54  FROM svm6122
00:51:42  55  ORDER BY ydate
00:51:42  56  /

Table created.

Elapsed: 00:00:00.35
00:51:42 SQL> 
00:51:42 SQL> -- rpt
00:51:42 SQL> 
00:51:42 SQL> SELECT
00:51:42   2  pair
00:51:42   3  ,trend
00:51:42   4  ,gatt
00:51:42   5  ,COUNT(pair)
00:51:42   6  ,AVG(g6)
00:51:42   7  FROM svm6142
00:51:42   8  GROUP BY pair,trend,gatt
00:51:42   9  ORDER BY pair,trend,gatt
00:51:42  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6349 -.00262177
gbp_usd 	-1 up	      3600 .004293608
gbp_usd 	-1		31
gbp_usd 	 1 nup	      6315  -.0026725
gbp_usd 	 1 up	      3501 .004350054
gbp_usd 	 1		41

6 rows selected.

Elapsed: 00:00:00.04
00:51:42 SQL> 
00:51:42 SQL> 
00:51:42 SQL> -- Derive NTILE based params:
00:51:42 SQL> 
00:51:42 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
00:51:42 SQL> CREATE TABLE svm6162 COMPRESS AS
00:51:42   2  SELECT
00:51:42   3  pair
00:51:42   4  ,ydate
00:51:42   5  ,prdate
00:51:42   6  ,clse
00:51:42   7  ,g6
00:51:42   8  ,gatt
00:51:42   9  ,gattn
00:51:42  10  ,trend
00:51:42  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
00:51:42  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
00:51:42  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
00:51:42  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
00:51:42  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
00:51:42  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
00:51:42  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
00:51:42  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
00:51:42  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
00:51:42  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
00:51:42  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
00:51:42  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
00:51:42  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
00:51:42  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
00:51:42  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
00:51:42  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
00:51:42  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
00:51:42  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
00:51:42  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
00:51:42  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
00:51:42  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
00:51:42  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
00:51:42  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
00:51:42  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
00:51:42  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
00:51:42  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
00:51:42  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
00:51:42  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
00:51:42  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
00:51:42  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
00:51:42  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
00:51:42  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
00:51:42  43  ,hh  att32
00:51:42  44  ,d   att33
00:51:42  45  ,w   att34
00:51:42  46  ,mpm att35
00:51:42  47  ,mph att36
00:51:42  48  ,trend att37
00:51:42  49  FROM svm6142
00:51:42  50  ORDER BY ydate
00:51:42  51  /

Table created.

Elapsed: 00:00:04.78
00:51:47 SQL> 
00:51:47 SQL> -- rpt
00:51:47 SQL> 
00:51:47 SQL> SELECT
00:51:47   2  pair
00:51:47   3  ,trend
00:51:47   4  ,gatt
00:51:47   5  ,COUNT(pair)
00:51:47   6  ,AVG(g6)
00:51:47   7  FROM svm6162
00:51:47   8  GROUP BY pair,trend,gatt
00:51:47   9  ORDER BY pair,trend,gatt
00:51:47  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6349 -.00262177
gbp_usd 	-1 up	      3600 .004293608
gbp_usd 	-1		31
gbp_usd 	 1 nup	      6315  -.0026725
gbp_usd 	 1 up	      3501 .004350054
gbp_usd 	 1		41

6 rows selected.

Elapsed: 00:00:00.03
00:51:47 SQL> 
00:51:47 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.20
00:51:47 SQL> CREATE TABLE modsrc COMPRESS AS
00:51:47   2  SELECT
00:51:47   3  pair
00:51:47   4  ,ydate
00:51:47   5  ,prdate
00:51:47   6  ,trend
00:51:47   7  ,g6
00:51:47   8  ,gatt
00:51:47   9  ,gattn
00:51:47  10  FROM svm6162
00:51:47  11  /

Table created.

Elapsed: 00:00:00.07
00:51:47 SQL> 
00:51:47 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
00:51:47 SQL> 
00:51:47 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
00:51:48 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
00:51:48   2  SELECT
00:51:48   3  ydate
00:51:48   4  ,trend gbp_trend
00:51:48   5  ,g6    gbp_g6
00:51:48   6  ,gatt  gbp_gatt
00:51:48   7  ,gattn gbp_gattn
00:51:48   8  FROM modsrc
00:51:48   9  /

Table created.

Elapsed: 00:00:00.06
00:51:48 SQL> 
00:51:48 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.14
00:51:48 SQL> 
00:51:48 SQL> -- I need a copy of the attributes:
00:51:48 SQL> 
00:51:48 SQL> 
00:51:48 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.04
00:51:48 SQL> CREATE TABLE gbp_att COMPRESS AS
00:51:48   2  SELECT
00:51:48   3  ydate
00:51:48   4  ,att00 gbp_att00
00:51:48   5  ,att01 gbp_att01
00:51:48   6  ,att02 gbp_att02
00:51:48   7  ,att03 gbp_att03
00:51:48   8  ,att04 gbp_att04
00:51:48   9  ,att05 gbp_att05
00:51:48  10  ,att06 gbp_att06
00:51:48  11  ,att07 gbp_att07
00:51:48  12  ,att08 gbp_att08
00:51:48  13  ,att09 gbp_att09
00:51:48  14  ,att10 gbp_att10
00:51:48  15  ,att11 gbp_att11
00:51:48  16  ,att12 gbp_att12
00:51:48  17  ,att13 gbp_att13
00:51:48  18  ,att14 gbp_att14
00:51:48  19  ,att15 gbp_att15
00:51:48  20  ,att16 gbp_att16
00:51:48  21  ,att17 gbp_att17
00:51:48  22  ,att18 gbp_att18
00:51:48  23  ,att19 gbp_att19
00:51:48  24  ,att20 gbp_att20
00:51:48  25  ,att21 gbp_att21
00:51:48  26  ,att22 gbp_att22
00:51:48  27  ,att23 gbp_att23
00:51:48  28  ,att24 gbp_att24
00:51:48  29  ,att25 gbp_att25
00:51:48  30  ,att26 gbp_att26
00:51:48  31  ,att27 gbp_att27
00:51:48  32  ,att28 gbp_att28
00:51:48  33  ,att29 gbp_att29
00:51:48  34  ,att30 gbp_att30
00:51:48  35  ,att31 gbp_att31
00:51:48  36  ,att32 gbp_att32
00:51:48  37  ,att33 gbp_att33
00:51:48  38  ,att34 gbp_att34
00:51:48  39  ,att35 gbp_att35
00:51:48  40  ,att36 gbp_att36
00:51:48  41  ,att37 gbp_att37
00:51:48  42  FROM svm6162
00:51:48  43  /

Table created.

Elapsed: 00:00:00.69
00:51:48 SQL> 
00:51:48 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
00:51:49 SQL> 
00:51:49 SQL> -- rpt
00:51:49 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19837

Elapsed: 00:00:00.97
00:51:50 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19837

Elapsed: 00:00:00.00
00:51:50 SQL> 
00:51:50 SQL> --
00:51:50 SQL> -- jpy610.sql
00:51:50 SQL> --
00:51:50 SQL> 
00:51:50 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:51:50 SQL> 
00:51:50 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.41
00:51:50 SQL> 
00:51:50 SQL> -- I created di5min here:
00:51:50 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
00:51:50 SQL> 
00:51:50 SQL> CREATE OR REPLACE VIEW svm6102 AS
00:51:50   2  SELECT
00:51:50   3  pair
00:51:50   4  ,ydate
00:51:50   5  ,prdate
00:51:50   6  ,rownum rnum -- acts as t in my time-series
00:51:50   7  ,clse
00:51:50   8  -- Derive a bunch of attributes from clse, the latest price:
00:51:50   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
00:51:50  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
00:51:50  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
00:51:50  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
00:51:50  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
00:51:50  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
00:51:50  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
00:51:50  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
00:51:50  17  --
00:51:50  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
00:51:50  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
00:51:50  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
00:51:50  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
00:51:50  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
00:51:50  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
00:51:50  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
00:51:50  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
00:51:50  26  --
00:51:50  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
00:51:50  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
00:51:50  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
00:51:50  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
00:51:50  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
00:51:50  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
00:51:50  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
00:51:50  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
00:51:50  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
00:51:50  36  FROM di5min WHERE pair LIKE'%jpy%'
00:51:50  37  AND ydate > sysdate - 95
00:51:50  38  ORDER BY ydate
00:51:50  39  /

View created.

Elapsed: 00:00:00.04
00:51:50 SQL> 
00:51:50 SQL> -- rpt
00:51:50 SQL> 
00:51:50 SQL> SELECT
00:51:50   2  pair
00:51:50   3  ,COUNT(pair)
00:51:50   4  ,MIN(clse),MAX(clse)
00:51:50   5  ,MIN(avg6),MAX(avg6)
00:51:50   6  ,MIN(ydate),MAX(ydate)
00:51:50   7  FROM svm6102
00:51:50   8  GROUP BY pair
00:51:50   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19835	 80.25	   84.485 80.3595205 84.3105479 2010-09-27 00:55:01 2010-12-31 00:45:00

Elapsed: 00:00:00.92
00:51:51 SQL> 
00:51:51 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
00:51:51 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
00:51:52 SQL> CREATE TABLE svm6122 COMPRESS AS
00:51:52   2  SELECT
00:51:52   3  pair
00:51:52   4  ,ydate
00:51:52   5  ,prdate
00:51:52   6  ,clse
00:51:52   7  -- g6 is important. I want to predict g6:
00:51:52   8  ,ld6 - clse g6
00:51:52   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
00:51:52  10  -- I want more attributes from the ones I derived above:
00:51:52  11  -- clse relation to moving-min
00:51:52  12  ,clse-min4  cm4
00:51:52  13  ,clse-min6  cm6
00:51:52  14  ,clse-min8  cm8
00:51:52  15  ,clse-min10 cm10
00:51:52  16  ,clse-min12 cm12
00:51:52  17  ,clse-min14 cm14
00:51:52  18  ,clse-min16 cm16
00:51:52  19  ,clse-min18 cm18
00:51:52  20  -- clse relation to moving-avg
00:51:52  21  ,clse-avg4  ca4
00:51:52  22  ,clse-avg6  ca6
00:51:52  23  ,clse-avg8  ca8
00:51:52  24  ,clse-avg10 ca10
00:51:52  25  ,clse-avg12 ca12
00:51:52  26  ,clse-avg14 ca14
00:51:52  27  ,clse-avg16 ca16
00:51:52  28  ,clse-avg18 ca18
00:51:52  29  -- clse relation to moving-max
00:51:52  30  ,clse-max4  cx4
00:51:52  31  ,clse-max6  cx6
00:51:52  32  ,clse-max8  cx8
00:51:52  33  ,clse-max10 cx10
00:51:52  34  ,clse-max12 cx12
00:51:52  35  ,clse-max14 cx14
00:51:52  36  ,clse-max16 cx16
00:51:52  37  ,clse-max18 cx18
00:51:52  38  -- Derive more attributes.
00:51:52  39  -- I want to use CORR() here to help SVM see the shape of the series.
00:51:52  40  -- But COVAR_POP is more stable:
00:51:52  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
00:51:52  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
00:51:52  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
00:51:52  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
00:51:52  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
00:51:52  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
00:51:52  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
00:51:52  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
00:51:52  49  -- Derive date related attributes:
00:51:52  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:51:52  51  ,0+TO_CHAR(ydate,'D')d
00:51:52  52  ,0+TO_CHAR(ydate,'W')w
00:51:52  53  -- mpm stands for minutes-past-midnight:
00:51:52  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:51:52  55  -- mph stands for minutes-past-hour:
00:51:52  56  ,0+TO_CHAR(ydate,'MI')mph
00:51:52  57  FROM svm6102
00:51:52  58  ORDER BY ydate
00:51:52  59  /

Table created.

Elapsed: 00:00:02.08
00:51:54 SQL> 
00:51:54 SQL> -- rpt
00:51:54 SQL> 
00:51:54 SQL> SELECT
00:51:54   2  pair
00:51:54   3  ,COUNT(pair)
00:51:54   4  ,MIN(clse),MAX(clse)
00:51:54   5  ,MIN(ydate),MAX(ydate)
00:51:54   6  FROM svm6122
00:51:54   7  GROUP BY pair
00:51:54   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19835	 80.25	   84.485 2010-09-27 00:55:01 2010-12-31 00:45:00

Elapsed: 00:00:00.04
00:51:54 SQL> 
00:51:54 SQL> -- Prepare for derivation of NTILE based params:
00:51:54 SQL> 
00:51:54 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.22
00:51:54 SQL> CREATE TABLE svm6142 COMPRESS AS
00:51:54   2  SELECT
00:51:54   3  pair
00:51:54   4  ,ydate
00:51:54   5  ,prdate
00:51:54   6  ,clse
00:51:54   7  ,g6
00:51:54   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
00:51:54   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
00:51:54  10  ,CASE WHEN trend IS NULL THEN 1
00:51:54  11  	    WHEN trend =0      THEN 1
00:51:54  12  	    ELSE trend END trend
00:51:54  13  ,cm4
00:51:54  14  ,cm6
00:51:54  15  ,cm8
00:51:54  16  ,cm10
00:51:54  17  ,cm12
00:51:54  18  ,cm14
00:51:54  19  ,cm16
00:51:54  20  ,cm18
00:51:54  21  --
00:51:54  22  ,ca4
00:51:54  23  ,ca6
00:51:54  24  ,ca8
00:51:54  25  ,ca10
00:51:54  26  ,ca12
00:51:54  27  ,ca14
00:51:54  28  ,ca16
00:51:54  29  ,ca18
00:51:54  30  --
00:51:54  31  ,cx4
00:51:54  32  ,cx6
00:51:54  33  ,cx8
00:51:54  34  ,cx10
00:51:54  35  ,cx12
00:51:54  36  ,cx14
00:51:54  37  ,cx16
00:51:54  38  ,cx18
00:51:54  39  --
00:51:54  40  ,crr4
00:51:54  41  ,crr6
00:51:54  42  ,crr8
00:51:54  43  ,crr10
00:51:54  44  ,crr12
00:51:54  45  ,crr14
00:51:54  46  ,crr16
00:51:54  47  ,crr18
00:51:54  48  --
00:51:54  49  ,hh
00:51:54  50  ,d
00:51:54  51  ,w
00:51:54  52  ,mpm
00:51:54  53  ,mph
00:51:54  54  FROM svm6122
00:51:54  55  ORDER BY ydate
00:51:54  56  /

Table created.

Elapsed: 00:00:00.37
00:51:54 SQL> 
00:51:54 SQL> -- rpt
00:51:54 SQL> 
00:51:54 SQL> SELECT
00:51:54   2  pair
00:51:54   3  ,trend
00:51:54   4  ,gatt
00:51:54   5  ,COUNT(pair)
00:51:54   6  ,AVG(g6)
00:51:54   7  FROM svm6142
00:51:54   8  GROUP BY pair,trend,gatt
00:51:54   9  ORDER BY pair,trend,gatt
00:51:54  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5360 -.16579783
usd_jpy 	-1 up	      5046 .162199069
usd_jpy 	-1		46
usd_jpy 	 1 nup	      5206 -.15560804
usd_jpy 	 1 up	      4151  .16523858
usd_jpy 	 1		26

6 rows selected.

Elapsed: 00:00:00.04
00:51:54 SQL> 
00:51:54 SQL> 
00:51:54 SQL> -- Derive NTILE based params:
00:51:54 SQL> 
00:51:54 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.19
00:51:54 SQL> CREATE TABLE svm6162 COMPRESS AS
00:51:54   2  SELECT
00:51:54   3  pair
00:51:54   4  ,ydate
00:51:54   5  ,prdate
00:51:54   6  ,clse
00:51:54   7  ,g6
00:51:54   8  ,gatt
00:51:54   9  ,gattn
00:51:54  10  ,trend
00:51:54  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
00:51:54  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
00:51:54  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
00:51:54  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
00:51:54  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
00:51:54  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
00:51:54  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
00:51:54  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
00:51:54  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
00:51:54  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
00:51:54  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
00:51:54  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
00:51:54  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
00:51:54  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
00:51:54  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
00:51:54  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
00:51:54  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
00:51:54  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
00:51:54  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
00:51:54  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
00:51:54  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
00:51:54  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
00:51:54  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
00:51:54  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
00:51:54  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
00:51:54  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
00:51:54  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
00:51:54  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
00:51:54  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
00:51:54  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
00:51:54  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
00:51:54  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
00:51:54  43  ,hh  att32
00:51:54  44  ,d   att33
00:51:54  45  ,w   att34
00:51:54  46  ,mpm att35
00:51:54  47  ,mph att36
00:51:54  48  ,trend att37
00:51:54  49  FROM svm6142
00:51:54  50  ORDER BY ydate
00:51:54  51  /

Table created.

Elapsed: 00:00:04.84
00:51:59 SQL> 
00:51:59 SQL> -- rpt
00:51:59 SQL> 
00:51:59 SQL> SELECT
00:51:59   2  pair
00:51:59   3  ,trend
00:51:59   4  ,gatt
00:51:59   5  ,COUNT(pair)
00:51:59   6  ,AVG(g6)
00:51:59   7  FROM svm6162
00:51:59   8  GROUP BY pair,trend,gatt
00:51:59   9  ORDER BY pair,trend,gatt
00:51:59  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5360 -.16579783
usd_jpy 	-1 up	      5046 .162199069
usd_jpy 	-1		46
usd_jpy 	 1 nup	      5206 -.15560804
usd_jpy 	 1 up	      4151  .16523858
usd_jpy 	 1		26

6 rows selected.

Elapsed: 00:00:00.05
00:51:59 SQL> 
00:51:59 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
00:52:00 SQL> CREATE TABLE modsrc COMPRESS AS
00:52:00   2  SELECT
00:52:00   3  pair
00:52:00   4  ,ydate
00:52:00   5  ,prdate
00:52:00   6  ,trend
00:52:00   7  ,g6
00:52:00   8  ,gatt
00:52:00   9  ,gattn
00:52:00  10  FROM svm6162
00:52:00  11  /

Table created.

Elapsed: 00:00:00.09
00:52:00 SQL> 
00:52:00 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
00:52:00 SQL> 
00:52:00 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
00:52:00 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
00:52:00   2  SELECT
00:52:00   3  ydate
00:52:00   4  ,trend jpy_trend
00:52:00   5  ,g6    jpy_g6
00:52:00   6  ,gatt  jpy_gatt
00:52:00   7  ,gattn jpy_gattn
00:52:00   8  FROM modsrc
00:52:00   9  /

Table created.

Elapsed: 00:00:00.07
00:52:00 SQL> 
00:52:00 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
00:52:00 SQL> 
00:52:00 SQL> -- I need a copy of the attributes:
00:52:00 SQL> 
00:52:00 SQL> 
00:52:00 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.04
00:52:00 SQL> CREATE TABLE jpy_att COMPRESS AS
00:52:00   2  SELECT
00:52:00   3  ydate
00:52:00   4  ,att00 jpy_att00
00:52:00   5  ,att01 jpy_att01
00:52:00   6  ,att02 jpy_att02
00:52:00   7  ,att03 jpy_att03
00:52:00   8  ,att04 jpy_att04
00:52:00   9  ,att05 jpy_att05
00:52:00  10  ,att06 jpy_att06
00:52:00  11  ,att07 jpy_att07
00:52:00  12  ,att08 jpy_att08
00:52:00  13  ,att09 jpy_att09
00:52:00  14  ,att10 jpy_att10
00:52:00  15  ,att11 jpy_att11
00:52:00  16  ,att12 jpy_att12
00:52:00  17  ,att13 jpy_att13
00:52:00  18  ,att14 jpy_att14
00:52:00  19  ,att15 jpy_att15
00:52:00  20  ,att16 jpy_att16
00:52:00  21  ,att17 jpy_att17
00:52:00  22  ,att18 jpy_att18
00:52:00  23  ,att19 jpy_att19
00:52:00  24  ,att20 jpy_att20
00:52:00  25  ,att21 jpy_att21
00:52:00  26  ,att22 jpy_att22
00:52:00  27  ,att23 jpy_att23
00:52:00  28  ,att24 jpy_att24
00:52:00  29  ,att25 jpy_att25
00:52:00  30  ,att26 jpy_att26
00:52:00  31  ,att27 jpy_att27
00:52:00  32  ,att28 jpy_att28
00:52:00  33  ,att29 jpy_att29
00:52:00  34  ,att30 jpy_att30
00:52:00  35  ,att31 jpy_att31
00:52:00  36  ,att32 jpy_att32
00:52:00  37  ,att33 jpy_att33
00:52:00  38  ,att34 jpy_att34
00:52:00  39  ,att35 jpy_att35
00:52:00  40  ,att36 jpy_att36
00:52:00  41  ,att37 jpy_att37
00:52:00  42  FROM svm6162
00:52:00  43  /

Table created.

Elapsed: 00:00:00.19
00:52:00 SQL> 
00:52:00 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
00:52:01 SQL> 
00:52:01 SQL> -- rpt
00:52:01 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19835

Elapsed: 00:00:00.91
00:52:02 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19835

Elapsed: 00:00:00.00
00:52:02 SQL> 
00:52:02 SQL> --
00:52:02 SQL> -- cad610.sql
00:52:02 SQL> --
00:52:02 SQL> 
00:52:02 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:52:02 SQL> 
00:52:02 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.72
00:52:02 SQL> 
00:52:02 SQL> -- I created di5min here:
00:52:02 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
00:52:02 SQL> 
00:52:02 SQL> CREATE OR REPLACE VIEW svm6102 AS
00:52:02   2  SELECT
00:52:02   3  pair
00:52:02   4  ,ydate
00:52:02   5  ,prdate
00:52:02   6  ,rownum rnum -- acts as t in my time-series
00:52:02   7  ,clse
00:52:02   8  -- Derive a bunch of attributes from clse, the latest price:
00:52:02   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
00:52:02  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
00:52:02  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
00:52:02  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
00:52:02  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
00:52:02  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
00:52:02  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
00:52:02  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
00:52:02  17  --
00:52:02  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
00:52:02  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
00:52:02  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
00:52:02  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
00:52:02  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
00:52:02  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
00:52:02  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
00:52:02  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
00:52:02  26  --
00:52:02  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
00:52:02  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
00:52:02  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
00:52:02  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
00:52:02  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
00:52:02  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
00:52:02  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
00:52:02  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
00:52:02  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
00:52:02  36  FROM di5min WHERE pair LIKE'%cad%'
00:52:02  37  AND ydate > sysdate - 95
00:52:02  38  ORDER BY ydate
00:52:02  39  /

View created.

Elapsed: 00:00:00.04
00:52:02 SQL> 
00:52:02 SQL> -- rpt
00:52:02 SQL> 
00:52:02 SQL> SELECT
00:52:02   2  pair
00:52:02   3  ,COUNT(pair)
00:52:02   4  ,MIN(clse),MAX(clse)
00:52:02   5  ,MIN(avg6),MAX(avg6)
00:52:02   6  ,MIN(ydate),MAX(ydate)
00:52:02   7  FROM svm6102
00:52:02   8  GROUP BY pair
00:52:02   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19835	.99755	    1.036 .998845205 1.03336849 2010-09-27 00:55:01 2010-12-31 00:45:00

Elapsed: 00:00:00.87
00:52:03 SQL> 
00:52:03 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
00:52:03 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.61
00:52:04 SQL> CREATE TABLE svm6122 COMPRESS AS
00:52:04   2  SELECT
00:52:04   3  pair
00:52:04   4  ,ydate
00:52:04   5  ,prdate
00:52:04   6  ,clse
00:52:04   7  -- g6 is important. I want to predict g6:
00:52:04   8  ,ld6 - clse g6
00:52:04   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
00:52:04  10  -- I want more attributes from the ones I derived above:
00:52:04  11  -- clse relation to moving-min
00:52:04  12  ,clse-min4  cm4
00:52:04  13  ,clse-min6  cm6
00:52:04  14  ,clse-min8  cm8
00:52:04  15  ,clse-min10 cm10
00:52:04  16  ,clse-min12 cm12
00:52:04  17  ,clse-min14 cm14
00:52:04  18  ,clse-min16 cm16
00:52:04  19  ,clse-min18 cm18
00:52:04  20  -- clse relation to moving-avg
00:52:04  21  ,clse-avg4  ca4
00:52:04  22  ,clse-avg6  ca6
00:52:04  23  ,clse-avg8  ca8
00:52:04  24  ,clse-avg10 ca10
00:52:04  25  ,clse-avg12 ca12
00:52:04  26  ,clse-avg14 ca14
00:52:04  27  ,clse-avg16 ca16
00:52:04  28  ,clse-avg18 ca18
00:52:04  29  -- clse relation to moving-max
00:52:04  30  ,clse-max4  cx4
00:52:04  31  ,clse-max6  cx6
00:52:04  32  ,clse-max8  cx8
00:52:04  33  ,clse-max10 cx10
00:52:04  34  ,clse-max12 cx12
00:52:04  35  ,clse-max14 cx14
00:52:04  36  ,clse-max16 cx16
00:52:04  37  ,clse-max18 cx18
00:52:04  38  -- Derive more attributes.
00:52:04  39  -- I want to use CORR() here to help SVM see the shape of the series.
00:52:04  40  -- But COVAR_POP is more stable:
00:52:04  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
00:52:04  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
00:52:04  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
00:52:04  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
00:52:04  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
00:52:04  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
00:52:04  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
00:52:04  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
00:52:04  49  -- Derive date related attributes:
00:52:04  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:52:04  51  ,0+TO_CHAR(ydate,'D')d
00:52:04  52  ,0+TO_CHAR(ydate,'W')w
00:52:04  53  -- mpm stands for minutes-past-midnight:
00:52:04  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:52:04  55  -- mph stands for minutes-past-hour:
00:52:04  56  ,0+TO_CHAR(ydate,'MI')mph
00:52:04  57  FROM svm6102
00:52:04  58  ORDER BY ydate
00:52:04  59  /

Table created.

Elapsed: 00:00:02.08
00:52:06 SQL> 
00:52:06 SQL> -- rpt
00:52:06 SQL> 
00:52:06 SQL> SELECT
00:52:06   2  pair
00:52:06   3  ,COUNT(pair)
00:52:06   4  ,MIN(clse),MAX(clse)
00:52:06   5  ,MIN(ydate),MAX(ydate)
00:52:06   6  FROM svm6122
00:52:06   7  GROUP BY pair
00:52:06   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19835	.99755	    1.036 2010-09-27 00:55:01 2010-12-31 00:45:00

Elapsed: 00:00:00.07
00:52:06 SQL> 
00:52:06 SQL> -- Prepare for derivation of NTILE based params:
00:52:06 SQL> 
00:52:06 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.17
00:52:06 SQL> CREATE TABLE svm6142 COMPRESS AS
00:52:06   2  SELECT
00:52:06   3  pair
00:52:06   4  ,ydate
00:52:06   5  ,prdate
00:52:06   6  ,clse
00:52:06   7  ,g6
00:52:06   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
00:52:06   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
00:52:06  10  ,CASE WHEN trend IS NULL THEN 1
00:52:06  11  	    WHEN trend =0      THEN 1
00:52:06  12  	    ELSE trend END trend
00:52:06  13  ,cm4
00:52:06  14  ,cm6
00:52:06  15  ,cm8
00:52:06  16  ,cm10
00:52:06  17  ,cm12
00:52:06  18  ,cm14
00:52:06  19  ,cm16
00:52:06  20  ,cm18
00:52:06  21  --
00:52:06  22  ,ca4
00:52:06  23  ,ca6
00:52:06  24  ,ca8
00:52:06  25  ,ca10
00:52:06  26  ,ca12
00:52:06  27  ,ca14
00:52:06  28  ,ca16
00:52:06  29  ,ca18
00:52:06  30  --
00:52:06  31  ,cx4
00:52:06  32  ,cx6
00:52:06  33  ,cx8
00:52:06  34  ,cx10
00:52:06  35  ,cx12
00:52:06  36  ,cx14
00:52:06  37  ,cx16
00:52:06  38  ,cx18
00:52:06  39  --
00:52:06  40  ,crr4
00:52:06  41  ,crr6
00:52:06  42  ,crr8
00:52:06  43  ,crr10
00:52:06  44  ,crr12
00:52:06  45  ,crr14
00:52:06  46  ,crr16
00:52:06  47  ,crr18
00:52:06  48  --
00:52:06  49  ,hh
00:52:06  50  ,d
00:52:06  51  ,w
00:52:06  52  ,mpm
00:52:06  53  ,mph
00:52:06  54  FROM svm6122
00:52:06  55  ORDER BY ydate
00:52:06  56  /

Table created.

Elapsed: 00:00:00.37
00:52:07 SQL> 
00:52:07 SQL> -- rpt
00:52:07 SQL> 
00:52:07 SQL> SELECT
00:52:07   2  pair
00:52:07   3  ,trend
00:52:07   4  ,gatt
00:52:07   5  ,COUNT(pair)
00:52:07   6  ,AVG(g6)
00:52:07   7  FROM svm6142
00:52:07   8  GROUP BY pair,trend,gatt
00:52:07   9  ORDER BY pair,trend,gatt
00:52:07  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7353 -.00130564
usd_cad 	-1 up	      3152 .003080755
usd_cad 	-1		48
usd_cad 	 1 nup	      6766 -.00160448
usd_cad 	 1 up	      2492 .003595539
usd_cad 	 1		24

6 rows selected.

Elapsed: 00:00:00.04
00:52:07 SQL> 
00:52:07 SQL> 
00:52:07 SQL> -- Derive NTILE based params:
00:52:07 SQL> 
00:52:07 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
00:52:07 SQL> CREATE TABLE svm6162 COMPRESS AS
00:52:07   2  SELECT
00:52:07   3  pair
00:52:07   4  ,ydate
00:52:07   5  ,prdate
00:52:07   6  ,clse
00:52:07   7  ,g6
00:52:07   8  ,gatt
00:52:07   9  ,gattn
00:52:07  10  ,trend
00:52:07  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
00:52:07  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
00:52:07  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
00:52:07  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
00:52:07  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
00:52:07  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
00:52:07  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
00:52:07  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
00:52:07  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
00:52:07  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
00:52:07  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
00:52:07  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
00:52:07  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
00:52:07  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
00:52:07  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
00:52:07  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
00:52:07  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
00:52:07  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
00:52:07  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
00:52:07  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
00:52:07  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
00:52:07  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
00:52:07  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
00:52:07  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
00:52:07  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
00:52:07  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
00:52:07  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
00:52:07  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
00:52:07  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
00:52:07  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
00:52:07  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
00:52:07  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
00:52:07  43  ,hh  att32
00:52:07  44  ,d   att33
00:52:07  45  ,w   att34
00:52:07  46  ,mpm att35
00:52:07  47  ,mph att36
00:52:07  48  ,trend att37
00:52:07  49  FROM svm6142
00:52:07  50  ORDER BY ydate
00:52:07  51  /

Table created.

Elapsed: 00:00:04.79
00:52:12 SQL> 
00:52:12 SQL> -- rpt
00:52:12 SQL> 
00:52:12 SQL> SELECT
00:52:12   2  pair
00:52:12   3  ,trend
00:52:12   4  ,gatt
00:52:12   5  ,COUNT(pair)
00:52:12   6  ,AVG(g6)
00:52:12   7  FROM svm6162
00:52:12   8  GROUP BY pair,trend,gatt
00:52:12   9  ORDER BY pair,trend,gatt
00:52:12  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7353 -.00130564
usd_cad 	-1 up	      3152 .003080755
usd_cad 	-1		48
usd_cad 	 1 nup	      6766 -.00160448
usd_cad 	 1 up	      2492 .003595539
usd_cad 	 1		24

6 rows selected.

Elapsed: 00:00:00.03
00:52:12 SQL> 
00:52:12 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
00:52:12 SQL> CREATE TABLE modsrc COMPRESS AS
00:52:12   2  SELECT
00:52:12   3  pair
00:52:12   4  ,ydate
00:52:12   5  ,prdate
00:52:12   6  ,trend
00:52:12   7  ,g6
00:52:12   8  ,gatt
00:52:12   9  ,gattn
00:52:12  10  FROM svm6162
00:52:12  11  /

Table created.

Elapsed: 00:00:00.10
00:52:12 SQL> 
00:52:12 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
00:52:12 SQL> 
00:52:12 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
00:52:12 SQL> CREATE TABLE cad_ms610 COMPRESS AS
00:52:12   2  SELECT
00:52:12   3  ydate
00:52:12   4  ,trend cad_trend
00:52:12   5  ,g6    cad_g6
00:52:12   6  ,gatt  cad_gatt
00:52:12   7  ,gattn cad_gattn
00:52:12   8  FROM modsrc
00:52:12   9  /

Table created.

Elapsed: 00:00:00.07
00:52:12 SQL> 
00:52:12 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
00:52:12 SQL> 
00:52:12 SQL> -- I need a copy of the attributes:
00:52:12 SQL> 
00:52:12 SQL> 
00:52:12 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.04
00:52:12 SQL> CREATE TABLE cad_att COMPRESS AS
00:52:12   2  SELECT
00:52:12   3  ydate
00:52:12   4  ,att00 cad_att00
00:52:12   5  ,att01 cad_att01
00:52:12   6  ,att02 cad_att02
00:52:12   7  ,att03 cad_att03
00:52:12   8  ,att04 cad_att04
00:52:12   9  ,att05 cad_att05
00:52:12  10  ,att06 cad_att06
00:52:12  11  ,att07 cad_att07
00:52:12  12  ,att08 cad_att08
00:52:12  13  ,att09 cad_att09
00:52:12  14  ,att10 cad_att10
00:52:12  15  ,att11 cad_att11
00:52:12  16  ,att12 cad_att12
00:52:12  17  ,att13 cad_att13
00:52:12  18  ,att14 cad_att14
00:52:12  19  ,att15 cad_att15
00:52:12  20  ,att16 cad_att16
00:52:12  21  ,att17 cad_att17
00:52:12  22  ,att18 cad_att18
00:52:12  23  ,att19 cad_att19
00:52:12  24  ,att20 cad_att20
00:52:12  25  ,att21 cad_att21
00:52:12  26  ,att22 cad_att22
00:52:12  27  ,att23 cad_att23
00:52:12  28  ,att24 cad_att24
00:52:12  29  ,att25 cad_att25
00:52:12  30  ,att26 cad_att26
00:52:12  31  ,att27 cad_att27
00:52:12  32  ,att28 cad_att28
00:52:12  33  ,att29 cad_att29
00:52:12  34  ,att30 cad_att30
00:52:12  35  ,att31 cad_att31
00:52:12  36  ,att32 cad_att32
00:52:12  37  ,att33 cad_att33
00:52:12  38  ,att34 cad_att34
00:52:12  39  ,att35 cad_att35
00:52:12  40  ,att36 cad_att36
00:52:12  41  ,att37 cad_att37
00:52:12  42  FROM svm6162
00:52:12  43  /

Table created.

Elapsed: 00:00:00.17
00:52:12 SQL> 
00:52:12 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
00:52:13 SQL> 
00:52:13 SQL> -- rpt
00:52:13 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19835

Elapsed: 00:00:00.84
00:52:14 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19835

Elapsed: 00:00:00.00
00:52:14 SQL> 
00:52:14 SQL> --
00:52:14 SQL> -- chf610.sql
00:52:14 SQL> --
00:52:14 SQL> 
00:52:14 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:52:14 SQL> 
00:52:14 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.52
00:52:14 SQL> 
00:52:14 SQL> -- I created di5min here:
00:52:14 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
00:52:14 SQL> 
00:52:14 SQL> CREATE OR REPLACE VIEW svm6102 AS
00:52:14   2  SELECT
00:52:14   3  pair
00:52:14   4  ,ydate
00:52:14   5  ,prdate
00:52:14   6  ,rownum rnum -- acts as t in my time-series
00:52:14   7  ,clse
00:52:14   8  -- Derive a bunch of attributes from clse, the latest price:
00:52:14   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
00:52:14  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
00:52:14  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
00:52:14  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
00:52:14  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
00:52:14  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
00:52:14  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
00:52:14  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
00:52:14  17  --
00:52:14  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
00:52:14  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
00:52:14  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
00:52:14  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
00:52:14  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
00:52:14  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
00:52:14  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
00:52:14  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
00:52:14  26  --
00:52:14  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
00:52:14  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
00:52:14  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
00:52:14  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
00:52:14  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
00:52:14  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
00:52:14  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
00:52:14  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
00:52:14  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
00:52:14  36  FROM di5min WHERE pair LIKE'%chf%'
00:52:14  37  AND ydate > sysdate - 95
00:52:14  38  ORDER BY ydate
00:52:14  39  /

View created.

Elapsed: 00:00:00.04
00:52:14 SQL> 
00:52:14 SQL> -- rpt
00:52:14 SQL> 
00:52:14 SQL> SELECT
00:52:14   2  pair
00:52:14   3  ,COUNT(pair)
00:52:14   4  ,MIN(clse),MAX(clse)
00:52:14   5  ,MIN(avg6),MAX(avg6)
00:52:14   6  ,MIN(ydate),MAX(ydate)
00:52:14   7  FROM svm6102
00:52:14   8  GROUP BY pair
00:52:14   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19838    .934325	  1.00635 .935410788 1.00498151 2010-09-27 00:55:01 2010-12-31 00:45:00

Elapsed: 00:00:00.88
00:52:15 SQL> 
00:52:15 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
00:52:15 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.18
00:52:15 SQL> CREATE TABLE svm6122 COMPRESS AS
00:52:15   2  SELECT
00:52:15   3  pair
00:52:15   4  ,ydate
00:52:15   5  ,prdate
00:52:15   6  ,clse
00:52:15   7  -- g6 is important. I want to predict g6:
00:52:15   8  ,ld6 - clse g6
00:52:15   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
00:52:15  10  -- I want more attributes from the ones I derived above:
00:52:15  11  -- clse relation to moving-min
00:52:15  12  ,clse-min4  cm4
00:52:15  13  ,clse-min6  cm6
00:52:15  14  ,clse-min8  cm8
00:52:15  15  ,clse-min10 cm10
00:52:15  16  ,clse-min12 cm12
00:52:15  17  ,clse-min14 cm14
00:52:15  18  ,clse-min16 cm16
00:52:15  19  ,clse-min18 cm18
00:52:15  20  -- clse relation to moving-avg
00:52:15  21  ,clse-avg4  ca4
00:52:15  22  ,clse-avg6  ca6
00:52:15  23  ,clse-avg8  ca8
00:52:15  24  ,clse-avg10 ca10
00:52:15  25  ,clse-avg12 ca12
00:52:15  26  ,clse-avg14 ca14
00:52:15  27  ,clse-avg16 ca16
00:52:15  28  ,clse-avg18 ca18
00:52:15  29  -- clse relation to moving-max
00:52:15  30  ,clse-max4  cx4
00:52:15  31  ,clse-max6  cx6
00:52:15  32  ,clse-max8  cx8
00:52:15  33  ,clse-max10 cx10
00:52:15  34  ,clse-max12 cx12
00:52:15  35  ,clse-max14 cx14
00:52:15  36  ,clse-max16 cx16
00:52:15  37  ,clse-max18 cx18
00:52:15  38  -- Derive more attributes.
00:52:15  39  -- I want to use CORR() here to help SVM see the shape of the series.
00:52:15  40  -- But COVAR_POP is more stable:
00:52:15  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
00:52:15  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
00:52:15  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
00:52:15  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
00:52:15  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
00:52:15  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
00:52:15  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
00:52:15  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
00:52:15  49  -- Derive date related attributes:
00:52:15  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:52:15  51  ,0+TO_CHAR(ydate,'D')d
00:52:15  52  ,0+TO_CHAR(ydate,'W')w
00:52:15  53  -- mpm stands for minutes-past-midnight:
00:52:15  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:52:15  55  -- mph stands for minutes-past-hour:
00:52:15  56  ,0+TO_CHAR(ydate,'MI')mph
00:52:15  57  FROM svm6102
00:52:15  58  ORDER BY ydate
00:52:15  59  /

Table created.

Elapsed: 00:00:02.06
00:52:18 SQL> 
00:52:18 SQL> -- rpt
00:52:18 SQL> 
00:52:18 SQL> SELECT
00:52:18   2  pair
00:52:18   3  ,COUNT(pair)
00:52:18   4  ,MIN(clse),MAX(clse)
00:52:18   5  ,MIN(ydate),MAX(ydate)
00:52:18   6  FROM svm6122
00:52:18   7  GROUP BY pair
00:52:18   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19838    .934325	  1.00635 2010-09-27 00:55:01 2010-12-31 00:45:00

Elapsed: 00:00:00.04
00:52:18 SQL> 
00:52:18 SQL> -- Prepare for derivation of NTILE based params:
00:52:18 SQL> 
00:52:18 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.25
00:52:18 SQL> CREATE TABLE svm6142 COMPRESS AS
00:52:18   2  SELECT
00:52:18   3  pair
00:52:18   4  ,ydate
00:52:18   5  ,prdate
00:52:18   6  ,clse
00:52:18   7  ,g6
00:52:18   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
00:52:18   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
00:52:18  10  ,CASE WHEN trend IS NULL THEN 1
00:52:18  11  	    WHEN trend =0      THEN 1
00:52:18  12  	    ELSE trend END trend
00:52:18  13  ,cm4
00:52:18  14  ,cm6
00:52:18  15  ,cm8
00:52:18  16  ,cm10
00:52:18  17  ,cm12
00:52:18  18  ,cm14
00:52:18  19  ,cm16
00:52:18  20  ,cm18
00:52:18  21  --
00:52:18  22  ,ca4
00:52:18  23  ,ca6
00:52:18  24  ,ca8
00:52:18  25  ,ca10
00:52:18  26  ,ca12
00:52:18  27  ,ca14
00:52:18  28  ,ca16
00:52:18  29  ,ca18
00:52:18  30  --
00:52:18  31  ,cx4
00:52:18  32  ,cx6
00:52:18  33  ,cx8
00:52:18  34  ,cx10
00:52:18  35  ,cx12
00:52:18  36  ,cx14
00:52:18  37  ,cx16
00:52:18  38  ,cx18
00:52:18  39  --
00:52:18  40  ,crr4
00:52:18  41  ,crr6
00:52:18  42  ,crr8
00:52:18  43  ,crr10
00:52:18  44  ,crr12
00:52:18  45  ,crr14
00:52:18  46  ,crr16
00:52:18  47  ,crr18
00:52:18  48  --
00:52:18  49  ,hh
00:52:18  50  ,d
00:52:18  51  ,w
00:52:18  52  ,mpm
00:52:18  53  ,mph
00:52:18  54  FROM svm6122
00:52:18  55  ORDER BY ydate
00:52:18  56  /

Table created.

Elapsed: 00:00:00.57
00:52:18 SQL> 
00:52:18 SQL> -- rpt
00:52:18 SQL> 
00:52:18 SQL> SELECT
00:52:18   2  pair
00:52:18   3  ,trend
00:52:18   4  ,gatt
00:52:18   5  ,COUNT(pair)
00:52:18   6  ,AVG(g6)
00:52:18   7  FROM svm6142
00:52:18   8  GROUP BY pair,trend,gatt
00:52:18   9  ORDER BY pair,trend,gatt
00:52:18  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7359 -.00196358
usd_chf 	-1 up	      3177 .003893858
usd_chf 	-1		72
usd_chf 	 1 nup	      6675 -.00163783
usd_chf 	 1 up	      2555 .003693704

Elapsed: 00:00:00.04
00:52:18 SQL> 
00:52:18 SQL> 
00:52:18 SQL> -- Derive NTILE based params:
00:52:18 SQL> 
00:52:18 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
00:52:19 SQL> CREATE TABLE svm6162 COMPRESS AS
00:52:19   2  SELECT
00:52:19   3  pair
00:52:19   4  ,ydate
00:52:19   5  ,prdate
00:52:19   6  ,clse
00:52:19   7  ,g6
00:52:19   8  ,gatt
00:52:19   9  ,gattn
00:52:19  10  ,trend
00:52:19  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
00:52:19  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
00:52:19  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
00:52:19  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
00:52:19  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
00:52:19  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
00:52:19  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
00:52:19  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
00:52:19  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
00:52:19  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
00:52:19  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
00:52:19  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
00:52:19  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
00:52:19  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
00:52:19  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
00:52:19  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
00:52:19  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
00:52:19  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
00:52:19  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
00:52:19  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
00:52:19  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
00:52:19  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
00:52:19  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
00:52:19  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
00:52:19  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
00:52:19  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
00:52:19  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
00:52:19  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
00:52:19  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
00:52:19  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
00:52:19  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
00:52:19  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
00:52:19  43  ,hh  att32
00:52:19  44  ,d   att33
00:52:19  45  ,w   att34
00:52:19  46  ,mpm att35
00:52:19  47  ,mph att36
00:52:19  48  ,trend att37
00:52:19  49  FROM svm6142
00:52:19  50  ORDER BY ydate
00:52:19  51  /

Table created.

Elapsed: 00:00:04.87
00:52:23 SQL> 
00:52:23 SQL> -- rpt
00:52:23 SQL> 
00:52:23 SQL> SELECT
00:52:23   2  pair
00:52:23   3  ,trend
00:52:23   4  ,gatt
00:52:23   5  ,COUNT(pair)
00:52:23   6  ,AVG(g6)
00:52:23   7  FROM svm6162
00:52:23   8  GROUP BY pair,trend,gatt
00:52:23   9  ORDER BY pair,trend,gatt
00:52:23  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7359 -.00196358
usd_chf 	-1 up	      3177 .003893858
usd_chf 	-1		72
usd_chf 	 1 nup	      6675 -.00163783
usd_chf 	 1 up	      2555 .003693704

Elapsed: 00:00:00.03
00:52:23 SQL> 
00:52:23 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
00:52:24 SQL> CREATE TABLE modsrc COMPRESS AS
00:52:24   2  SELECT
00:52:24   3  pair
00:52:24   4  ,ydate
00:52:24   5  ,prdate
00:52:24   6  ,trend
00:52:24   7  ,g6
00:52:24   8  ,gatt
00:52:24   9  ,gattn
00:52:24  10  FROM svm6162
00:52:24  11  /

Table created.

Elapsed: 00:00:00.08
00:52:24 SQL> 
00:52:24 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
00:52:24 SQL> 
00:52:24 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.03
00:52:24 SQL> CREATE TABLE chf_ms610 COMPRESS AS
00:52:24   2  SELECT
00:52:24   3  ydate
00:52:24   4  ,trend chf_trend
00:52:24   5  ,g6    chf_g6
00:52:24   6  ,gatt  chf_gatt
00:52:24   7  ,gattn chf_gattn
00:52:24   8  FROM modsrc
00:52:24   9  /

Table created.

Elapsed: 00:00:00.07
00:52:24 SQL> 
00:52:24 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
00:52:24 SQL> 
00:52:24 SQL> -- I need a copy of the attributes:
00:52:24 SQL> 
00:52:24 SQL> 
00:52:24 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.04
00:52:24 SQL> CREATE TABLE chf_att COMPRESS AS
00:52:24   2  SELECT
00:52:24   3  ydate
00:52:24   4  ,att00 chf_att00
00:52:24   5  ,att01 chf_att01
00:52:24   6  ,att02 chf_att02
00:52:24   7  ,att03 chf_att03
00:52:24   8  ,att04 chf_att04
00:52:24   9  ,att05 chf_att05
00:52:24  10  ,att06 chf_att06
00:52:24  11  ,att07 chf_att07
00:52:24  12  ,att08 chf_att08
00:52:24  13  ,att09 chf_att09
00:52:24  14  ,att10 chf_att10
00:52:24  15  ,att11 chf_att11
00:52:24  16  ,att12 chf_att12
00:52:24  17  ,att13 chf_att13
00:52:24  18  ,att14 chf_att14
00:52:24  19  ,att15 chf_att15
00:52:24  20  ,att16 chf_att16
00:52:24  21  ,att17 chf_att17
00:52:24  22  ,att18 chf_att18
00:52:24  23  ,att19 chf_att19
00:52:24  24  ,att20 chf_att20
00:52:24  25  ,att21 chf_att21
00:52:24  26  ,att22 chf_att22
00:52:24  27  ,att23 chf_att23
00:52:24  28  ,att24 chf_att24
00:52:24  29  ,att25 chf_att25
00:52:24  30  ,att26 chf_att26
00:52:24  31  ,att27 chf_att27
00:52:24  32  ,att28 chf_att28
00:52:24  33  ,att29 chf_att29
00:52:24  34  ,att30 chf_att30
00:52:24  35  ,att31 chf_att31
00:52:24  36  ,att32 chf_att32
00:52:24  37  ,att33 chf_att33
00:52:24  38  ,att34 chf_att34
00:52:24  39  ,att35 chf_att35
00:52:24  40  ,att36 chf_att36
00:52:24  41  ,att37 chf_att37
00:52:24  42  FROM svm6162
00:52:24  43  /

Table created.

Elapsed: 00:00:00.17
00:52:24 SQL> 
00:52:24 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.50
00:52:25 SQL> 
00:52:25 SQL> -- rpt
00:52:25 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19838

Elapsed: 00:00:00.83
00:52:26 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19838

Elapsed: 00:00:00.01
00:52:26 SQL> 
00:52:26 SQL> --
00:52:26 SQL> -- ech610.sql
00:52:26 SQL> --
00:52:26 SQL> 
00:52:26 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:52:26 SQL> 
00:52:26 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.47
00:52:26 SQL> 
00:52:26 SQL> -- I created di5min here:
00:52:26 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
00:52:26 SQL> 
00:52:26 SQL> CREATE OR REPLACE VIEW svm6102 AS
00:52:26   2  SELECT
00:52:26   3  pair
00:52:26   4  ,ydate
00:52:26   5  ,prdate
00:52:26   6  ,rownum rnum -- acts as t in my time-series
00:52:26   7  ,clse
00:52:26   8  -- Derive a bunch of attributes from clse, the latest price:
00:52:26   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
00:52:26  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
00:52:26  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
00:52:26  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
00:52:26  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
00:52:26  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
00:52:26  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
00:52:26  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
00:52:26  17  --
00:52:26  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
00:52:26  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
00:52:26  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
00:52:26  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
00:52:26  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
00:52:26  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
00:52:26  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
00:52:26  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
00:52:26  26  --
00:52:26  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
00:52:26  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
00:52:26  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
00:52:26  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
00:52:26  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
00:52:26  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
00:52:26  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
00:52:26  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
00:52:26  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
00:52:26  36  FROM di5min WHERE pair LIKE'%ech%'
00:52:26  37  AND ydate > sysdate - 95
00:52:26  38  ORDER BY ydate
00:52:26  39  /

View created.

Elapsed: 00:00:00.04
00:52:26 SQL> 
00:52:26 SQL> -- rpt
00:52:26 SQL> 
00:52:26 SQL> SELECT
00:52:26   2  pair
00:52:26   3  ,COUNT(pair)
00:52:26   4  ,MIN(clse),MAX(clse)
00:52:26   5  ,MIN(avg6),MAX(avg6)
00:52:26   6  ,MIN(ydate),MAX(ydate)
00:52:26   7  FROM svm6102
00:52:26   8  GROUP BY pair
00:52:26   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19837 1.24213032 1.38284305 1.24326962 1.37986485 2010-09-27 00:55:01 2010-12-31 00:45:00

Elapsed: 00:00:00.79
00:52:27 SQL> 
00:52:27 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
00:52:27 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
00:52:27 SQL> CREATE TABLE svm6122 COMPRESS AS
00:52:27   2  SELECT
00:52:27   3  pair
00:52:27   4  ,ydate
00:52:27   5  ,prdate
00:52:27   6  ,clse
00:52:27   7  -- g6 is important. I want to predict g6:
00:52:27   8  ,ld6 - clse g6
00:52:27   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
00:52:27  10  -- I want more attributes from the ones I derived above:
00:52:27  11  -- clse relation to moving-min
00:52:27  12  ,clse-min4  cm4
00:52:27  13  ,clse-min6  cm6
00:52:27  14  ,clse-min8  cm8
00:52:27  15  ,clse-min10 cm10
00:52:27  16  ,clse-min12 cm12
00:52:27  17  ,clse-min14 cm14
00:52:27  18  ,clse-min16 cm16
00:52:27  19  ,clse-min18 cm18
00:52:27  20  -- clse relation to moving-avg
00:52:27  21  ,clse-avg4  ca4
00:52:27  22  ,clse-avg6  ca6
00:52:27  23  ,clse-avg8  ca8
00:52:27  24  ,clse-avg10 ca10
00:52:27  25  ,clse-avg12 ca12
00:52:27  26  ,clse-avg14 ca14
00:52:27  27  ,clse-avg16 ca16
00:52:27  28  ,clse-avg18 ca18
00:52:27  29  -- clse relation to moving-max
00:52:27  30  ,clse-max4  cx4
00:52:27  31  ,clse-max6  cx6
00:52:27  32  ,clse-max8  cx8
00:52:27  33  ,clse-max10 cx10
00:52:27  34  ,clse-max12 cx12
00:52:27  35  ,clse-max14 cx14
00:52:27  36  ,clse-max16 cx16
00:52:27  37  ,clse-max18 cx18
00:52:27  38  -- Derive more attributes.
00:52:27  39  -- I want to use CORR() here to help SVM see the shape of the series.
00:52:27  40  -- But COVAR_POP is more stable:
00:52:27  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
00:52:27  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
00:52:27  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
00:52:27  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
00:52:27  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
00:52:27  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
00:52:27  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
00:52:27  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
00:52:27  49  -- Derive date related attributes:
00:52:27  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:52:27  51  ,0+TO_CHAR(ydate,'D')d
00:52:27  52  ,0+TO_CHAR(ydate,'W')w
00:52:27  53  -- mpm stands for minutes-past-midnight:
00:52:27  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:52:27  55  -- mph stands for minutes-past-hour:
00:52:27  56  ,0+TO_CHAR(ydate,'MI')mph
00:52:27  57  FROM svm6102
00:52:27  58  ORDER BY ydate
00:52:27  59  /

Table created.

Elapsed: 00:00:02.09
00:52:29 SQL> 
00:52:29 SQL> -- rpt
00:52:29 SQL> 
00:52:29 SQL> SELECT
00:52:29   2  pair
00:52:29   3  ,COUNT(pair)
00:52:29   4  ,MIN(clse),MAX(clse)
00:52:29   5  ,MIN(ydate),MAX(ydate)
00:52:29   6  FROM svm6122
00:52:29   7  GROUP BY pair
00:52:29   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19837 1.24213032 1.38284305 2010-09-27 00:55:01 2010-12-31 00:45:00

Elapsed: 00:00:00.05
00:52:29 SQL> 
00:52:29 SQL> -- Prepare for derivation of NTILE based params:
00:52:29 SQL> 
00:52:29 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.19
00:52:30 SQL> CREATE TABLE svm6142 COMPRESS AS
00:52:30   2  SELECT
00:52:30   3  pair
00:52:30   4  ,ydate
00:52:30   5  ,prdate
00:52:30   6  ,clse
00:52:30   7  ,g6
00:52:30   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
00:52:30   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
00:52:30  10  ,CASE WHEN trend IS NULL THEN 1
00:52:30  11  	    WHEN trend =0      THEN 1
00:52:30  12  	    ELSE trend END trend
00:52:30  13  ,cm4
00:52:30  14  ,cm6
00:52:30  15  ,cm8
00:52:30  16  ,cm10
00:52:30  17  ,cm12
00:52:30  18  ,cm14
00:52:30  19  ,cm16
00:52:30  20  ,cm18
00:52:30  21  --
00:52:30  22  ,ca4
00:52:30  23  ,ca6
00:52:30  24  ,ca8
00:52:30  25  ,ca10
00:52:30  26  ,ca12
00:52:30  27  ,ca14
00:52:30  28  ,ca16
00:52:30  29  ,ca18
00:52:30  30  --
00:52:30  31  ,cx4
00:52:30  32  ,cx6
00:52:30  33  ,cx8
00:52:30  34  ,cx10
00:52:30  35  ,cx12
00:52:30  36  ,cx14
00:52:30  37  ,cx16
00:52:30  38  ,cx18
00:52:30  39  --
00:52:30  40  ,crr4
00:52:30  41  ,crr6
00:52:30  42  ,crr8
00:52:30  43  ,crr10
00:52:30  44  ,crr12
00:52:30  45  ,crr14
00:52:30  46  ,crr16
00:52:30  47  ,crr18
00:52:30  48  --
00:52:30  49  ,hh
00:52:30  50  ,d
00:52:30  51  ,w
00:52:30  52  ,mpm
00:52:30  53  ,mph
00:52:30  54  FROM svm6122
00:52:30  55  ORDER BY ydate
00:52:30  56  /

Table created.

Elapsed: 00:00:00.38
00:52:30 SQL> 
00:52:30 SQL> -- rpt
00:52:30 SQL> 
00:52:30 SQL> SELECT
00:52:30   2  pair
00:52:30   3  ,trend
00:52:30   4  ,gatt
00:52:30   5  ,COUNT(pair)
00:52:30   6  ,AVG(g6)
00:52:30   7  FROM svm6142
00:52:30   8  GROUP BY pair,trend,gatt
00:52:30   9  ORDER BY pair,trend,gatt
00:52:30  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6697 -.00218845
ech_usd 	-1 up	      3632 .003536613
ech_usd 	-1		69
ech_usd 	 1 nup	      6558 -.00231218
ech_usd 	 1 up	      2878 .003821887
ech_usd 	 1		 3

6 rows selected.

Elapsed: 00:00:00.04
00:52:30 SQL> 
00:52:30 SQL> 
00:52:30 SQL> -- Derive NTILE based params:
00:52:30 SQL> 
00:52:30 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.17
00:52:30 SQL> CREATE TABLE svm6162 COMPRESS AS
00:52:30   2  SELECT
00:52:30   3  pair
00:52:30   4  ,ydate
00:52:30   5  ,prdate
00:52:30   6  ,clse
00:52:30   7  ,g6
00:52:30   8  ,gatt
00:52:30   9  ,gattn
00:52:30  10  ,trend
00:52:30  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
00:52:30  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
00:52:30  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
00:52:30  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
00:52:30  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
00:52:30  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
00:52:30  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
00:52:30  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
00:52:30  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
00:52:30  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
00:52:30  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
00:52:30  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
00:52:30  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
00:52:30  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
00:52:30  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
00:52:30  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
00:52:30  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
00:52:30  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
00:52:30  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
00:52:30  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
00:52:30  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
00:52:30  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
00:52:30  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
00:52:30  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
00:52:30  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
00:52:30  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
00:52:30  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
00:52:30  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
00:52:30  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
00:52:30  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
00:52:30  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
00:52:30  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
00:52:30  43  ,hh  att32
00:52:30  44  ,d   att33
00:52:30  45  ,w   att34
00:52:30  46  ,mpm att35
00:52:30  47  ,mph att36
00:52:30  48  ,trend att37
00:52:30  49  FROM svm6142
00:52:30  50  ORDER BY ydate
00:52:30  51  /

Table created.

Elapsed: 00:00:04.88
00:52:35 SQL> 
00:52:35 SQL> -- rpt
00:52:35 SQL> 
00:52:35 SQL> SELECT
00:52:35   2  pair
00:52:35   3  ,trend
00:52:35   4  ,gatt
00:52:35   5  ,COUNT(pair)
00:52:35   6  ,AVG(g6)
00:52:35   7  FROM svm6162
00:52:35   8  GROUP BY pair,trend,gatt
00:52:35   9  ORDER BY pair,trend,gatt
00:52:35  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6697 -.00218845
ech_usd 	-1 up	      3632 .003536613
ech_usd 	-1		69
ech_usd 	 1 nup	      6558 -.00231218
ech_usd 	 1 up	      2878 .003821887
ech_usd 	 1		 3

6 rows selected.

Elapsed: 00:00:00.04
00:52:35 SQL> 
00:52:35 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
00:52:35 SQL> CREATE TABLE modsrc COMPRESS AS
00:52:35   2  SELECT
00:52:35   3  pair
00:52:35   4  ,ydate
00:52:35   5  ,prdate
00:52:35   6  ,trend
00:52:35   7  ,g6
00:52:35   8  ,gatt
00:52:35   9  ,gattn
00:52:35  10  FROM svm6162
00:52:35  11  /

Table created.

Elapsed: 00:00:00.09
00:52:35 SQL> 
00:52:35 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
00:52:36 SQL> 
00:52:36 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.11
00:52:36 SQL> CREATE TABLE ech_ms610 COMPRESS AS
00:52:36   2  SELECT
00:52:36   3  ydate
00:52:36   4  ,trend ech_trend
00:52:36   5  ,g6    ech_g6
00:52:36   6  ,gatt  ech_gatt
00:52:36   7  ,gattn ech_gattn
00:52:36   8  FROM modsrc
00:52:36   9  /

Table created.

Elapsed: 00:00:00.07
00:52:36 SQL> 
00:52:36 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
00:52:36 SQL> 
00:52:36 SQL> -- I need a copy of the attributes:
00:52:36 SQL> 
00:52:36 SQL> 
00:52:36 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.05
00:52:36 SQL> CREATE TABLE ech_att COMPRESS AS
00:52:36   2  SELECT
00:52:36   3  ydate
00:52:36   4  ,att00 ech_att00
00:52:36   5  ,att01 ech_att01
00:52:36   6  ,att02 ech_att02
00:52:36   7  ,att03 ech_att03
00:52:36   8  ,att04 ech_att04
00:52:36   9  ,att05 ech_att05
00:52:36  10  ,att06 ech_att06
00:52:36  11  ,att07 ech_att07
00:52:36  12  ,att08 ech_att08
00:52:36  13  ,att09 ech_att09
00:52:36  14  ,att10 ech_att10
00:52:36  15  ,att11 ech_att11
00:52:36  16  ,att12 ech_att12
00:52:36  17  ,att13 ech_att13
00:52:36  18  ,att14 ech_att14
00:52:36  19  ,att15 ech_att15
00:52:36  20  ,att16 ech_att16
00:52:36  21  ,att17 ech_att17
00:52:36  22  ,att18 ech_att18
00:52:36  23  ,att19 ech_att19
00:52:36  24  ,att20 ech_att20
00:52:36  25  ,att21 ech_att21
00:52:36  26  ,att22 ech_att22
00:52:36  27  ,att23 ech_att23
00:52:36  28  ,att24 ech_att24
00:52:36  29  ,att25 ech_att25
00:52:36  30  ,att26 ech_att26
00:52:36  31  ,att27 ech_att27
00:52:36  32  ,att28 ech_att28
00:52:36  33  ,att29 ech_att29
00:52:36  34  ,att30 ech_att30
00:52:36  35  ,att31 ech_att31
00:52:36  36  ,att32 ech_att32
00:52:36  37  ,att33 ech_att33
00:52:36  38  ,att34 ech_att34
00:52:36  39  ,att35 ech_att35
00:52:36  40  ,att36 ech_att36
00:52:36  41  ,att37 ech_att37
00:52:36  42  FROM svm6162
00:52:36  43  /

Table created.

Elapsed: 00:00:00.20
00:52:36 SQL> 
00:52:36 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
00:52:37 SQL> 
00:52:37 SQL> -- rpt
00:52:37 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19837

Elapsed: 00:00:00.79
00:52:37 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19837

Elapsed: 00:00:00.00
00:52:37 SQL> 
00:52:37 SQL> --
00:52:37 SQL> -- egb610.sql
00:52:37 SQL> --
00:52:37 SQL> 
00:52:37 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:52:37 SQL> 
00:52:37 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.35
00:52:38 SQL> 
00:52:38 SQL> -- I created di5min here:
00:52:38 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
00:52:38 SQL> 
00:52:38 SQL> CREATE OR REPLACE VIEW svm6102 AS
00:52:38   2  SELECT
00:52:38   3  pair
00:52:38   4  ,ydate
00:52:38   5  ,prdate
00:52:38   6  ,rownum rnum -- acts as t in my time-series
00:52:38   7  ,clse
00:52:38   8  -- Derive a bunch of attributes from clse, the latest price:
00:52:38   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
00:52:38  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
00:52:38  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
00:52:38  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
00:52:38  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
00:52:38  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
00:52:38  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
00:52:38  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
00:52:38  17  --
00:52:38  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
00:52:38  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
00:52:38  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
00:52:38  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
00:52:38  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
00:52:38  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
00:52:38  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
00:52:38  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
00:52:38  26  --
00:52:38  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
00:52:38  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
00:52:38  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
00:52:38  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
00:52:38  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
00:52:38  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
00:52:38  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
00:52:38  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
00:52:38  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
00:52:38  36  FROM di5min WHERE pair LIKE'%egb%'
00:52:38  37  AND ydate > sysdate - 95
00:52:38  38  ORDER BY ydate
00:52:38  39  /

View created.

Elapsed: 00:00:00.05
00:52:38 SQL> 
00:52:38 SQL> -- rpt
00:52:38 SQL> 
00:52:38 SQL> SELECT
00:52:38   2  pair
00:52:38   3  ,COUNT(pair)
00:52:38   4  ,MIN(clse),MAX(clse)
00:52:38   5  ,MIN(avg6),MAX(avg6)
00:52:38   6  ,MIN(ydate),MAX(ydate)
00:52:38   7  FROM svm6102
00:52:38   8  GROUP BY pair
00:52:38   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19836 .833520557 .893920122 .834199029 .892400287 2010-09-27 00:55:01 2010-12-31 00:45:00

Elapsed: 00:00:00.94
00:52:39 SQL> 
00:52:39 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
00:52:39 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.25
00:52:39 SQL> CREATE TABLE svm6122 COMPRESS AS
00:52:39   2  SELECT
00:52:39   3  pair
00:52:39   4  ,ydate
00:52:39   5  ,prdate
00:52:39   6  ,clse
00:52:39   7  -- g6 is important. I want to predict g6:
00:52:39   8  ,ld6 - clse g6
00:52:39   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
00:52:39  10  -- I want more attributes from the ones I derived above:
00:52:39  11  -- clse relation to moving-min
00:52:39  12  ,clse-min4  cm4
00:52:39  13  ,clse-min6  cm6
00:52:39  14  ,clse-min8  cm8
00:52:39  15  ,clse-min10 cm10
00:52:39  16  ,clse-min12 cm12
00:52:39  17  ,clse-min14 cm14
00:52:39  18  ,clse-min16 cm16
00:52:39  19  ,clse-min18 cm18
00:52:39  20  -- clse relation to moving-avg
00:52:39  21  ,clse-avg4  ca4
00:52:39  22  ,clse-avg6  ca6
00:52:39  23  ,clse-avg8  ca8
00:52:39  24  ,clse-avg10 ca10
00:52:39  25  ,clse-avg12 ca12
00:52:39  26  ,clse-avg14 ca14
00:52:39  27  ,clse-avg16 ca16
00:52:39  28  ,clse-avg18 ca18
00:52:39  29  -- clse relation to moving-max
00:52:39  30  ,clse-max4  cx4
00:52:39  31  ,clse-max6  cx6
00:52:39  32  ,clse-max8  cx8
00:52:39  33  ,clse-max10 cx10
00:52:39  34  ,clse-max12 cx12
00:52:39  35  ,clse-max14 cx14
00:52:39  36  ,clse-max16 cx16
00:52:39  37  ,clse-max18 cx18
00:52:39  38  -- Derive more attributes.
00:52:39  39  -- I want to use CORR() here to help SVM see the shape of the series.
00:52:39  40  -- But COVAR_POP is more stable:
00:52:39  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
00:52:39  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
00:52:39  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
00:52:39  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
00:52:39  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
00:52:39  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
00:52:39  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
00:52:39  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
00:52:39  49  -- Derive date related attributes:
00:52:39  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:52:39  51  ,0+TO_CHAR(ydate,'D')d
00:52:39  52  ,0+TO_CHAR(ydate,'W')w
00:52:39  53  -- mpm stands for minutes-past-midnight:
00:52:39  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:52:39  55  -- mph stands for minutes-past-hour:
00:52:39  56  ,0+TO_CHAR(ydate,'MI')mph
00:52:39  57  FROM svm6102
00:52:39  58  ORDER BY ydate
00:52:39  59  /

Table created.

Elapsed: 00:00:02.47
00:52:41 SQL> 
00:52:41 SQL> -- rpt
00:52:41 SQL> 
00:52:41 SQL> SELECT
00:52:41   2  pair
00:52:41   3  ,COUNT(pair)
00:52:41   4  ,MIN(clse),MAX(clse)
00:52:41   5  ,MIN(ydate),MAX(ydate)
00:52:41   6  FROM svm6122
00:52:41   7  GROUP BY pair
00:52:41   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19836 .833520557 .893920122 2010-09-27 00:55:01 2010-12-31 00:45:00

Elapsed: 00:00:00.07
00:52:42 SQL> 
00:52:42 SQL> -- Prepare for derivation of NTILE based params:
00:52:42 SQL> 
00:52:42 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.43
00:52:42 SQL> CREATE TABLE svm6142 COMPRESS AS
00:52:42   2  SELECT
00:52:42   3  pair
00:52:42   4  ,ydate
00:52:42   5  ,prdate
00:52:42   6  ,clse
00:52:42   7  ,g6
00:52:42   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
00:52:42   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
00:52:42  10  ,CASE WHEN trend IS NULL THEN 1
00:52:42  11  	    WHEN trend =0      THEN 1
00:52:42  12  	    ELSE trend END trend
00:52:42  13  ,cm4
00:52:42  14  ,cm6
00:52:42  15  ,cm8
00:52:42  16  ,cm10
00:52:42  17  ,cm12
00:52:42  18  ,cm14
00:52:42  19  ,cm16
00:52:42  20  ,cm18
00:52:42  21  --
00:52:42  22  ,ca4
00:52:42  23  ,ca6
00:52:42  24  ,ca8
00:52:42  25  ,ca10
00:52:42  26  ,ca12
00:52:42  27  ,ca14
00:52:42  28  ,ca16
00:52:42  29  ,ca18
00:52:42  30  --
00:52:42  31  ,cx4
00:52:42  32  ,cx6
00:52:42  33  ,cx8
00:52:42  34  ,cx10
00:52:42  35  ,cx12
00:52:42  36  ,cx14
00:52:42  37  ,cx16
00:52:42  38  ,cx18
00:52:42  39  --
00:52:42  40  ,crr4
00:52:42  41  ,crr6
00:52:42  42  ,crr8
00:52:42  43  ,crr10
00:52:42  44  ,crr12
00:52:42  45  ,crr14
00:52:42  46  ,crr16
00:52:42  47  ,crr18
00:52:42  48  --
00:52:42  49  ,hh
00:52:42  50  ,d
00:52:42  51  ,w
00:52:42  52  ,mpm
00:52:42  53  ,mph
00:52:42  54  FROM svm6122
00:52:42  55  ORDER BY ydate
00:52:42  56  /

Table created.

Elapsed: 00:00:00.43
00:52:42 SQL> 
00:52:42 SQL> -- rpt
00:52:42 SQL> 
00:52:42 SQL> SELECT
00:52:42   2  pair
00:52:42   3  ,trend
00:52:42   4  ,gatt
00:52:42   5  ,COUNT(pair)
00:52:42   6  ,AVG(g6)
00:52:42   7  FROM svm6142
00:52:42   8  GROUP BY pair,trend,gatt
00:52:42   9  ORDER BY pair,trend,gatt
00:52:42  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7428 -.00098218
egb_usd 	-1 up	      2777 .003089568
egb_usd 	-1		43
egb_usd 	 1 nup	      6791 -.00128441
egb_usd 	 1 up	      2768 .002961387
egb_usd 	 1		29

6 rows selected.

Elapsed: 00:00:00.04
00:52:42 SQL> 
00:52:42 SQL> 
00:52:42 SQL> -- Derive NTILE based params:
00:52:42 SQL> 
00:52:42 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.29
00:52:43 SQL> CREATE TABLE svm6162 COMPRESS AS
00:52:43   2  SELECT
00:52:43   3  pair
00:52:43   4  ,ydate
00:52:43   5  ,prdate
00:52:43   6  ,clse
00:52:43   7  ,g6
00:52:43   8  ,gatt
00:52:43   9  ,gattn
00:52:43  10  ,trend
00:52:43  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
00:52:43  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
00:52:43  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
00:52:43  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
00:52:43  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
00:52:43  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
00:52:43  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
00:52:43  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
00:52:43  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
00:52:43  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
00:52:43  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
00:52:43  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
00:52:43  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
00:52:43  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
00:52:43  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
00:52:43  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
00:52:43  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
00:52:43  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
00:52:43  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
00:52:43  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
00:52:43  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
00:52:43  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
00:52:43  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
00:52:43  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
00:52:43  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
00:52:43  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
00:52:43  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
00:52:43  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
00:52:43  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
00:52:43  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
00:52:43  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
00:52:43  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
00:52:43  43  ,hh  att32
00:52:43  44  ,d   att33
00:52:43  45  ,w   att34
00:52:43  46  ,mpm att35
00:52:43  47  ,mph att36
00:52:43  48  ,trend att37
00:52:43  49  FROM svm6142
00:52:43  50  ORDER BY ydate
00:52:43  51  /

Table created.

Elapsed: 00:00:05.89
00:52:49 SQL> 
00:52:49 SQL> -- rpt
00:52:49 SQL> 
00:52:49 SQL> SELECT
00:52:49   2  pair
00:52:49   3  ,trend
00:52:49   4  ,gatt
00:52:49   5  ,COUNT(pair)
00:52:49   6  ,AVG(g6)
00:52:49   7  FROM svm6162
00:52:49   8  GROUP BY pair,trend,gatt
00:52:49   9  ORDER BY pair,trend,gatt
00:52:49  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7428 -.00098218
egb_usd 	-1 up	      2777 .003089568
egb_usd 	-1		43
egb_usd 	 1 nup	      6791 -.00128441
egb_usd 	 1 up	      2768 .002961387
egb_usd 	 1		29

6 rows selected.

Elapsed: 00:00:00.04
00:52:49 SQL> 
00:52:49 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.24
00:52:49 SQL> CREATE TABLE modsrc COMPRESS AS
00:52:49   2  SELECT
00:52:49   3  pair
00:52:49   4  ,ydate
00:52:49   5  ,prdate
00:52:49   6  ,trend
00:52:49   7  ,g6
00:52:49   8  ,gatt
00:52:49   9  ,gattn
00:52:49  10  FROM svm6162
00:52:49  11  /

Table created.

Elapsed: 00:00:00.08
00:52:49 SQL> 
00:52:49 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
00:52:49 SQL> 
00:52:49 SQL> DROP   TABLE egb_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
00:52:49 SQL> CREATE TABLE egb_ms610 COMPRESS AS
00:52:49   2  SELECT
00:52:49   3  ydate
00:52:49   4  ,trend egb_trend
00:52:49   5  ,g6    egb_g6
00:52:49   6  ,gatt  egb_gatt
00:52:49   7  ,gattn egb_gattn
00:52:49   8  FROM modsrc
00:52:49   9  /

Table created.

Elapsed: 00:00:00.07
00:52:49 SQL> 
00:52:49 SQL> ANALYZE TABLE egb_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
00:52:49 SQL> 
00:52:49 SQL> -- I need a copy of the attributes:
00:52:49 SQL> 
00:52:49 SQL> 
00:52:49 SQL> DROP   TABLE egb_att;

Table dropped.

Elapsed: 00:00:00.08
00:52:50 SQL> CREATE TABLE egb_att COMPRESS AS
00:52:50   2  SELECT
00:52:50   3  ydate
00:52:50   4  ,att00 egb_att00
00:52:50   5  ,att01 egb_att01
00:52:50   6  ,att02 egb_att02
00:52:50   7  ,att03 egb_att03
00:52:50   8  ,att04 egb_att04
00:52:50   9  ,att05 egb_att05
00:52:50  10  ,att06 egb_att06
00:52:50  11  ,att07 egb_att07
00:52:50  12  ,att08 egb_att08
00:52:50  13  ,att09 egb_att09
00:52:50  14  ,att10 egb_att10
00:52:50  15  ,att11 egb_att11
00:52:50  16  ,att12 egb_att12
00:52:50  17  ,att13 egb_att13
00:52:50  18  ,att14 egb_att14
00:52:50  19  ,att15 egb_att15
00:52:50  20  ,att16 egb_att16
00:52:50  21  ,att17 egb_att17
00:52:50  22  ,att18 egb_att18
00:52:50  23  ,att19 egb_att19
00:52:50  24  ,att20 egb_att20
00:52:50  25  ,att21 egb_att21
00:52:50  26  ,att22 egb_att22
00:52:50  27  ,att23 egb_att23
00:52:50  28  ,att24 egb_att24
00:52:50  29  ,att25 egb_att25
00:52:50  30  ,att26 egb_att26
00:52:50  31  ,att27 egb_att27
00:52:50  32  ,att28 egb_att28
00:52:50  33  ,att29 egb_att29
00:52:50  34  ,att30 egb_att30
00:52:50  35  ,att31 egb_att31
00:52:50  36  ,att32 egb_att32
00:52:50  37  ,att33 egb_att33
00:52:50  38  ,att34 egb_att34
00:52:50  39  ,att35 egb_att35
00:52:50  40  ,att36 egb_att36
00:52:50  41  ,att37 egb_att37
00:52:50  42  FROM svm6162
00:52:50  43  /

Table created.

Elapsed: 00:00:00.20
00:52:50 SQL> 
00:52:50 SQL> ANALYZE TABLE egb_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
00:52:50 SQL> 
00:52:50 SQL> -- rpt
00:52:50 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19836

Elapsed: 00:00:00.94
00:52:51 SQL> SELECT COUNT(*)FROM egb_att;

  COUNT(*)
----------
     19836

Elapsed: 00:00:00.01
00:52:51 SQL> 
00:52:51 SQL> --
00:52:51 SQL> -- ejp610.sql
00:52:51 SQL> --
00:52:51 SQL> 
00:52:51 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:52:51 SQL> 
00:52:51 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.37
00:52:52 SQL> 
00:52:52 SQL> -- I created di5min here:
00:52:52 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
00:52:52 SQL> 
00:52:52 SQL> CREATE OR REPLACE VIEW svm6102 AS
00:52:52   2  SELECT
00:52:52   3  pair
00:52:52   4  ,ydate
00:52:52   5  ,prdate
00:52:52   6  ,rownum rnum -- acts as t in my time-series
00:52:52   7  ,clse
00:52:52   8  -- Derive a bunch of attributes from clse, the latest price:
00:52:52   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
00:52:52  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
00:52:52  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
00:52:52  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
00:52:52  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
00:52:52  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
00:52:52  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
00:52:52  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
00:52:52  17  --
00:52:52  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
00:52:52  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
00:52:52  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
00:52:52  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
00:52:52  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
00:52:52  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
00:52:52  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
00:52:52  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
00:52:52  26  --
00:52:52  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
00:52:52  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
00:52:52  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
00:52:52  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
00:52:52  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
00:52:52  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
00:52:52  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
00:52:52  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
00:52:52  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
00:52:52  36  FROM di5min WHERE pair LIKE'%ejp%'
00:52:52  37  AND ydate > sysdate - 95
00:52:52  38  ORDER BY ydate
00:52:52  39  /

View created.

Elapsed: 00:00:00.16
00:52:52 SQL> 
00:52:52 SQL> -- rpt
00:52:52 SQL> 
00:52:52 SQL> SELECT
00:52:52   2  pair
00:52:52   3  ,COUNT(pair)
00:52:52   4  ,MIN(clse),MAX(clse)
00:52:52   5  ,MIN(avg6),MAX(avg6)
00:52:52   6  ,MIN(ydate),MAX(ydate)
00:52:52   7  FROM svm6102
00:52:52   8  GROUP BY pair
00:52:52   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ejp_usd       19834 107.643765	115.63485 107.776148 115.509678 2010-09-27 00:55:01 2010-12-31 00:45:00

Elapsed: 00:00:00.89
00:52:53 SQL> 
00:52:53 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
00:52:53 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.21
00:52:53 SQL> CREATE TABLE svm6122 COMPRESS AS
00:52:53   2  SELECT
00:52:53   3  pair
00:52:53   4  ,ydate
00:52:53   5  ,prdate
00:52:53   6  ,clse
00:52:53   7  -- g6 is important. I want to predict g6:
00:52:53   8  ,ld6 - clse g6
00:52:53   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
00:52:53  10  -- I want more attributes from the ones I derived above:
00:52:53  11  -- clse relation to moving-min
00:52:53  12  ,clse-min4  cm4
00:52:53  13  ,clse-min6  cm6
00:52:53  14  ,clse-min8  cm8
00:52:53  15  ,clse-min10 cm10
00:52:53  16  ,clse-min12 cm12
00:52:53  17  ,clse-min14 cm14
00:52:53  18  ,clse-min16 cm16
00:52:53  19  ,clse-min18 cm18
00:52:53  20  -- clse relation to moving-avg
00:52:53  21  ,clse-avg4  ca4
00:52:53  22  ,clse-avg6  ca6
00:52:53  23  ,clse-avg8  ca8
00:52:53  24  ,clse-avg10 ca10
00:52:53  25  ,clse-avg12 ca12
00:52:53  26  ,clse-avg14 ca14
00:52:53  27  ,clse-avg16 ca16
00:52:53  28  ,clse-avg18 ca18
00:52:53  29  -- clse relation to moving-max
00:52:53  30  ,clse-max4  cx4
00:52:53  31  ,clse-max6  cx6
00:52:53  32  ,clse-max8  cx8
00:52:53  33  ,clse-max10 cx10
00:52:53  34  ,clse-max12 cx12
00:52:53  35  ,clse-max14 cx14
00:52:53  36  ,clse-max16 cx16
00:52:53  37  ,clse-max18 cx18
00:52:53  38  -- Derive more attributes.
00:52:53  39  -- I want to use CORR() here to help SVM see the shape of the series.
00:52:53  40  -- But COVAR_POP is more stable:
00:52:53  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
00:52:53  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
00:52:53  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
00:52:53  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
00:52:53  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
00:52:53  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
00:52:53  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
00:52:53  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
00:52:53  49  -- Derive date related attributes:
00:52:53  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:52:53  51  ,0+TO_CHAR(ydate,'D')d
00:52:53  52  ,0+TO_CHAR(ydate,'W')w
00:52:53  53  -- mpm stands for minutes-past-midnight:
00:52:53  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:52:53  55  -- mph stands for minutes-past-hour:
00:52:53  56  ,0+TO_CHAR(ydate,'MI')mph
00:52:53  57  FROM svm6102
00:52:53  58  ORDER BY ydate
00:52:53  59  /

Table created.

Elapsed: 00:00:02.13
00:52:55 SQL> 
00:52:55 SQL> -- rpt
00:52:55 SQL> 
00:52:55 SQL> SELECT
00:52:55   2  pair
00:52:55   3  ,COUNT(pair)
00:52:55   4  ,MIN(clse),MAX(clse)
00:52:55   5  ,MIN(ydate),MAX(ydate)
00:52:55   6  FROM svm6122
00:52:55   7  GROUP BY pair
00:52:55   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ejp_usd       19834 107.643765	115.63485 2010-09-27 00:55:01 2010-12-31 00:45:00

Elapsed: 00:00:00.04
00:52:55 SQL> 
00:52:55 SQL> -- Prepare for derivation of NTILE based params:
00:52:55 SQL> 
00:52:55 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.19
00:52:55 SQL> CREATE TABLE svm6142 COMPRESS AS
00:52:55   2  SELECT
00:52:55   3  pair
00:52:55   4  ,ydate
00:52:55   5  ,prdate
00:52:55   6  ,clse
00:52:55   7  ,g6
00:52:55   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
00:52:55   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
00:52:55  10  ,CASE WHEN trend IS NULL THEN 1
00:52:55  11  	    WHEN trend =0      THEN 1
00:52:55  12  	    ELSE trend END trend
00:52:55  13  ,cm4
00:52:55  14  ,cm6
00:52:55  15  ,cm8
00:52:55  16  ,cm10
00:52:55  17  ,cm12
00:52:55  18  ,cm14
00:52:55  19  ,cm16
00:52:55  20  ,cm18
00:52:55  21  --
00:52:55  22  ,ca4
00:52:55  23  ,ca6
00:52:55  24  ,ca8
00:52:55  25  ,ca10
00:52:55  26  ,ca12
00:52:55  27  ,ca14
00:52:55  28  ,ca16
00:52:55  29  ,ca18
00:52:55  30  --
00:52:55  31  ,cx4
00:52:55  32  ,cx6
00:52:55  33  ,cx8
00:52:55  34  ,cx10
00:52:55  35  ,cx12
00:52:55  36  ,cx14
00:52:55  37  ,cx16
00:52:55  38  ,cx18
00:52:55  39  --
00:52:55  40  ,crr4
00:52:55  41  ,crr6
00:52:55  42  ,crr8
00:52:55  43  ,crr10
00:52:55  44  ,crr12
00:52:55  45  ,crr14
00:52:55  46  ,crr16
00:52:55  47  ,crr18
00:52:55  48  --
00:52:55  49  ,hh
00:52:55  50  ,d
00:52:55  51  ,w
00:52:55  52  ,mpm
00:52:55  53  ,mph
00:52:55  54  FROM svm6122
00:52:55  55  ORDER BY ydate
00:52:55  56  /

Table created.

Elapsed: 00:00:00.37
00:52:56 SQL> 
00:52:56 SQL> -- rpt
00:52:56 SQL> 
00:52:56 SQL> SELECT
00:52:56   2  pair
00:52:56   3  ,trend
00:52:56   4  ,gatt
00:52:56   5  ,COUNT(pair)
00:52:56   6  ,AVG(g6)
00:52:56   7  FROM svm6142
00:52:56   8  GROUP BY pair,trend,gatt
00:52:56   9  ORDER BY pair,trend,gatt
00:52:56  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4892 -.32278299
ejp_usd 	-1 up	      5058 .269200578
ejp_usd 	-1		48
ejp_usd 	 1 nup	      5096 -.28745806
ejp_usd 	 1 up	      4716 .279732761
ejp_usd 	 1		24

6 rows selected.

Elapsed: 00:00:00.04
00:52:56 SQL> 
00:52:56 SQL> 
00:52:56 SQL> -- Derive NTILE based params:
00:52:56 SQL> 
00:52:56 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
00:52:56 SQL> CREATE TABLE svm6162 COMPRESS AS
00:52:56   2  SELECT
00:52:56   3  pair
00:52:56   4  ,ydate
00:52:56   5  ,prdate
00:52:56   6  ,clse
00:52:56   7  ,g6
00:52:56   8  ,gatt
00:52:56   9  ,gattn
00:52:56  10  ,trend
00:52:56  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
00:52:56  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
00:52:56  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
00:52:56  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
00:52:56  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
00:52:56  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
00:52:56  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
00:52:56  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
00:52:56  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
00:52:56  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
00:52:56  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
00:52:56  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
00:52:56  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
00:52:56  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
00:52:56  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
00:52:56  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
00:52:56  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
00:52:56  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
00:52:56  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
00:52:56  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
00:52:56  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
00:52:56  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
00:52:56  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
00:52:56  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
00:52:56  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
00:52:56  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
00:52:56  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
00:52:56  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
00:52:56  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
00:52:56  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
00:52:56  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
00:52:56  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
00:52:56  43  ,hh  att32
00:52:56  44  ,d   att33
00:52:56  45  ,w   att34
00:52:56  46  ,mpm att35
00:52:56  47  ,mph att36
00:52:56  48  ,trend att37
00:52:56  49  FROM svm6142
00:52:56  50  ORDER BY ydate
00:52:56  51  /

Table created.

Elapsed: 00:00:04.97
00:53:01 SQL> 
00:53:01 SQL> -- rpt
00:53:01 SQL> 
00:53:01 SQL> SELECT
00:53:01   2  pair
00:53:01   3  ,trend
00:53:01   4  ,gatt
00:53:01   5  ,COUNT(pair)
00:53:01   6  ,AVG(g6)
00:53:01   7  FROM svm6162
00:53:01   8  GROUP BY pair,trend,gatt
00:53:01   9  ORDER BY pair,trend,gatt
00:53:01  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4892 -.32278299
ejp_usd 	-1 up	      5058 .269200578
ejp_usd 	-1		48
ejp_usd 	 1 nup	      5096 -.28745806
ejp_usd 	 1 up	      4716 .279732761
ejp_usd 	 1		24

6 rows selected.

Elapsed: 00:00:00.03
00:53:01 SQL> 
00:53:01 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.16
00:53:01 SQL> CREATE TABLE modsrc COMPRESS AS
00:53:01   2  SELECT
00:53:01   3  pair
00:53:01   4  ,ydate
00:53:01   5  ,prdate
00:53:01   6  ,trend
00:53:01   7  ,g6
00:53:01   8  ,gatt
00:53:01   9  ,gattn
00:53:01  10  FROM svm6162
00:53:01  11  /

Table created.

Elapsed: 00:00:00.10
00:53:01 SQL> 
00:53:01 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
00:53:01 SQL> 
00:53:01 SQL> DROP   TABLE ejp_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
00:53:01 SQL> CREATE TABLE ejp_ms610 COMPRESS AS
00:53:01   2  SELECT
00:53:01   3  ydate
00:53:01   4  ,trend ejp_trend
00:53:01   5  ,g6    ejp_g6
00:53:01   6  ,gatt  ejp_gatt
00:53:01   7  ,gattn ejp_gattn
00:53:01   8  FROM modsrc
00:53:01   9  /

Table created.

Elapsed: 00:00:00.07
00:53:01 SQL> 
00:53:01 SQL> ANALYZE TABLE ejp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
00:53:01 SQL> 
00:53:01 SQL> -- I need a copy of the attributes:
00:53:01 SQL> 
00:53:01 SQL> 
00:53:01 SQL> DROP   TABLE ejp_att;

Table dropped.

Elapsed: 00:00:00.07
00:53:02 SQL> CREATE TABLE ejp_att COMPRESS AS
00:53:02   2  SELECT
00:53:02   3  ydate
00:53:02   4  ,att00 ejp_att00
00:53:02   5  ,att01 ejp_att01
00:53:02   6  ,att02 ejp_att02
00:53:02   7  ,att03 ejp_att03
00:53:02   8  ,att04 ejp_att04
00:53:02   9  ,att05 ejp_att05
00:53:02  10  ,att06 ejp_att06
00:53:02  11  ,att07 ejp_att07
00:53:02  12  ,att08 ejp_att08
00:53:02  13  ,att09 ejp_att09
00:53:02  14  ,att10 ejp_att10
00:53:02  15  ,att11 ejp_att11
00:53:02  16  ,att12 ejp_att12
00:53:02  17  ,att13 ejp_att13
00:53:02  18  ,att14 ejp_att14
00:53:02  19  ,att15 ejp_att15
00:53:02  20  ,att16 ejp_att16
00:53:02  21  ,att17 ejp_att17
00:53:02  22  ,att18 ejp_att18
00:53:02  23  ,att19 ejp_att19
00:53:02  24  ,att20 ejp_att20
00:53:02  25  ,att21 ejp_att21
00:53:02  26  ,att22 ejp_att22
00:53:02  27  ,att23 ejp_att23
00:53:02  28  ,att24 ejp_att24
00:53:02  29  ,att25 ejp_att25
00:53:02  30  ,att26 ejp_att26
00:53:02  31  ,att27 ejp_att27
00:53:02  32  ,att28 ejp_att28
00:53:02  33  ,att29 ejp_att29
00:53:02  34  ,att30 ejp_att30
00:53:02  35  ,att31 ejp_att31
00:53:02  36  ,att32 ejp_att32
00:53:02  37  ,att33 ejp_att33
00:53:02  38  ,att34 ejp_att34
00:53:02  39  ,att35 ejp_att35
00:53:02  40  ,att36 ejp_att36
00:53:02  41  ,att37 ejp_att37
00:53:02  42  FROM svm6162
00:53:02  43  /

Table created.

Elapsed: 00:00:00.17
00:53:02 SQL> 
00:53:02 SQL> ANALYZE TABLE ejp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.50
00:53:02 SQL> 
00:53:02 SQL> -- rpt
00:53:02 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19834

Elapsed: 00:00:00.84
00:53:03 SQL> SELECT COUNT(*)FROM ejp_att;

  COUNT(*)
----------
     19834

Elapsed: 00:00:00.00
00:53:03 SQL> 
00:53:03 SQL> --
00:53:03 SQL> -- ajp610.sql
00:53:03 SQL> --
00:53:03 SQL> 
00:53:03 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:53:03 SQL> 
00:53:03 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.74
00:53:04 SQL> 
00:53:04 SQL> -- I created di5min here:
00:53:04 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
00:53:04 SQL> 
00:53:04 SQL> CREATE OR REPLACE VIEW svm6102 AS
00:53:04   2  SELECT
00:53:04   3  pair
00:53:04   4  ,ydate
00:53:04   5  ,prdate
00:53:04   6  ,rownum rnum -- acts as t in my time-series
00:53:04   7  ,clse
00:53:04   8  -- Derive a bunch of attributes from clse, the latest price:
00:53:04   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
00:53:04  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
00:53:04  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
00:53:04  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
00:53:04  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
00:53:04  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
00:53:04  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
00:53:04  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
00:53:04  17  --
00:53:04  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
00:53:04  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
00:53:04  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
00:53:04  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
00:53:04  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
00:53:04  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
00:53:04  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
00:53:04  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
00:53:04  26  --
00:53:04  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
00:53:04  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
00:53:04  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
00:53:04  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
00:53:04  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
00:53:04  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
00:53:04  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
00:53:04  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
00:53:04  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
00:53:04  36  FROM di5min WHERE pair LIKE'%ajp%'
00:53:04  37  AND ydate > sysdate - 95
00:53:04  38  ORDER BY ydate
00:53:04  39  /

View created.

Elapsed: 00:00:00.05
00:53:04 SQL> 
00:53:04 SQL> -- rpt
00:53:04 SQL> 
00:53:04 SQL> SELECT
00:53:04   2  pair
00:53:04   3  ,COUNT(pair)
00:53:04   4  ,MIN(clse),MAX(clse)
00:53:04   5  ,MIN(avg6),MAX(avg6)
00:53:04   6  ,MIN(ydate),MAX(ydate)
00:53:04   7  FROM svm6102
00:53:04   8  GROUP BY pair
00:53:04   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ajp_usd       19831  78.249976 83.6669853 78.5106193  83.546306 2010-09-27 00:55:01 2010-12-31 00:45:00

Elapsed: 00:00:00.79
00:53:05 SQL> 
00:53:05 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
00:53:05 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.17
00:53:05 SQL> CREATE TABLE svm6122 COMPRESS AS
00:53:05   2  SELECT
00:53:05   3  pair
00:53:05   4  ,ydate
00:53:05   5  ,prdate
00:53:05   6  ,clse
00:53:05   7  -- g6 is important. I want to predict g6:
00:53:05   8  ,ld6 - clse g6
00:53:05   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
00:53:05  10  -- I want more attributes from the ones I derived above:
00:53:05  11  -- clse relation to moving-min
00:53:05  12  ,clse-min4  cm4
00:53:05  13  ,clse-min6  cm6
00:53:05  14  ,clse-min8  cm8
00:53:05  15  ,clse-min10 cm10
00:53:05  16  ,clse-min12 cm12
00:53:05  17  ,clse-min14 cm14
00:53:05  18  ,clse-min16 cm16
00:53:05  19  ,clse-min18 cm18
00:53:05  20  -- clse relation to moving-avg
00:53:05  21  ,clse-avg4  ca4
00:53:05  22  ,clse-avg6  ca6
00:53:05  23  ,clse-avg8  ca8
00:53:05  24  ,clse-avg10 ca10
00:53:05  25  ,clse-avg12 ca12
00:53:05  26  ,clse-avg14 ca14
00:53:05  27  ,clse-avg16 ca16
00:53:05  28  ,clse-avg18 ca18
00:53:05  29  -- clse relation to moving-max
00:53:05  30  ,clse-max4  cx4
00:53:05  31  ,clse-max6  cx6
00:53:05  32  ,clse-max8  cx8
00:53:05  33  ,clse-max10 cx10
00:53:05  34  ,clse-max12 cx12
00:53:05  35  ,clse-max14 cx14
00:53:05  36  ,clse-max16 cx16
00:53:05  37  ,clse-max18 cx18
00:53:05  38  -- Derive more attributes.
00:53:05  39  -- I want to use CORR() here to help SVM see the shape of the series.
00:53:05  40  -- But COVAR_POP is more stable:
00:53:05  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
00:53:05  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
00:53:05  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
00:53:05  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
00:53:05  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
00:53:05  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
00:53:05  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
00:53:05  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
00:53:05  49  -- Derive date related attributes:
00:53:05  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:53:05  51  ,0+TO_CHAR(ydate,'D')d
00:53:05  52  ,0+TO_CHAR(ydate,'W')w
00:53:05  53  -- mpm stands for minutes-past-midnight:
00:53:05  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:53:05  55  -- mph stands for minutes-past-hour:
00:53:05  56  ,0+TO_CHAR(ydate,'MI')mph
00:53:05  57  FROM svm6102
00:53:05  58  ORDER BY ydate
00:53:05  59  /

Table created.

Elapsed: 00:00:02.10
00:53:07 SQL> 
00:53:07 SQL> -- rpt
00:53:07 SQL> 
00:53:07 SQL> SELECT
00:53:07   2  pair
00:53:07   3  ,COUNT(pair)
00:53:07   4  ,MIN(clse),MAX(clse)
00:53:07   5  ,MIN(ydate),MAX(ydate)
00:53:07   6  FROM svm6122
00:53:07   7  GROUP BY pair
00:53:07   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ajp_usd       19831  78.249976 83.6669853 2010-09-27 00:55:01 2010-12-31 00:45:00

Elapsed: 00:00:00.04
00:53:07 SQL> 
00:53:07 SQL> -- Prepare for derivation of NTILE based params:
00:53:07 SQL> 
00:53:07 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.18
00:53:07 SQL> CREATE TABLE svm6142 COMPRESS AS
00:53:07   2  SELECT
00:53:07   3  pair
00:53:07   4  ,ydate
00:53:07   5  ,prdate
00:53:07   6  ,clse
00:53:07   7  ,g6
00:53:07   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
00:53:07   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
00:53:07  10  ,CASE WHEN trend IS NULL THEN 1
00:53:07  11  	    WHEN trend =0      THEN 1
00:53:07  12  	    ELSE trend END trend
00:53:07  13  ,cm4
00:53:07  14  ,cm6
00:53:07  15  ,cm8
00:53:07  16  ,cm10
00:53:07  17  ,cm12
00:53:07  18  ,cm14
00:53:07  19  ,cm16
00:53:07  20  ,cm18
00:53:07  21  --
00:53:07  22  ,ca4
00:53:07  23  ,ca6
00:53:07  24  ,ca8
00:53:07  25  ,ca10
00:53:07  26  ,ca12
00:53:07  27  ,ca14
00:53:07  28  ,ca16
00:53:07  29  ,ca18
00:53:07  30  --
00:53:07  31  ,cx4
00:53:07  32  ,cx6
00:53:07  33  ,cx8
00:53:07  34  ,cx10
00:53:07  35  ,cx12
00:53:07  36  ,cx14
00:53:07  37  ,cx16
00:53:07  38  ,cx18
00:53:07  39  --
00:53:07  40  ,crr4
00:53:07  41  ,crr6
00:53:07  42  ,crr8
00:53:07  43  ,crr10
00:53:07  44  ,crr12
00:53:07  45  ,crr14
00:53:07  46  ,crr16
00:53:07  47  ,crr18
00:53:07  48  --
00:53:07  49  ,hh
00:53:07  50  ,d
00:53:07  51  ,w
00:53:07  52  ,mpm
00:53:07  53  ,mph
00:53:07  54  FROM svm6122
00:53:07  55  ORDER BY ydate
00:53:07  56  /

Table created.

Elapsed: 00:00:00.41
00:53:08 SQL> 
00:53:08 SQL> -- rpt
00:53:08 SQL> 
00:53:08 SQL> SELECT
00:53:08   2  pair
00:53:08   3  ,trend
00:53:08   4  ,gatt
00:53:08   5  ,COUNT(pair)
00:53:08   6  ,AVG(g6)
00:53:08   7  FROM svm6142
00:53:08   8  GROUP BY pair,trend,gatt
00:53:08   9  ORDER BY pair,trend,gatt
00:53:08  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4184 -.22687112
ajp_usd 	-1 up	      5288 .218183104
ajp_usd 	-1		 9
ajp_usd 	 1 nup	      5307 -.20104862
ajp_usd 	 1 up	      4980 .203944188
ajp_usd 	 1		63

6 rows selected.

Elapsed: 00:00:00.04
00:53:08 SQL> 
00:53:08 SQL> 
00:53:08 SQL> -- Derive NTILE based params:
00:53:08 SQL> 
00:53:08 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
00:53:08 SQL> CREATE TABLE svm6162 COMPRESS AS
00:53:08   2  SELECT
00:53:08   3  pair
00:53:08   4  ,ydate
00:53:08   5  ,prdate
00:53:08   6  ,clse
00:53:08   7  ,g6
00:53:08   8  ,gatt
00:53:08   9  ,gattn
00:53:08  10  ,trend
00:53:08  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
00:53:08  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
00:53:08  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
00:53:08  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
00:53:08  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
00:53:08  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
00:53:08  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
00:53:08  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
00:53:08  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
00:53:08  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
00:53:08  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
00:53:08  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
00:53:08  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
00:53:08  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
00:53:08  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
00:53:08  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
00:53:08  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
00:53:08  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
00:53:08  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
00:53:08  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
00:53:08  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
00:53:08  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
00:53:08  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
00:53:08  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
00:53:08  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
00:53:08  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
00:53:08  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
00:53:08  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
00:53:08  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
00:53:08  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
00:53:08  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
00:53:08  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
00:53:08  43  ,hh  att32
00:53:08  44  ,d   att33
00:53:08  45  ,w   att34
00:53:08  46  ,mpm att35
00:53:08  47  ,mph att36
00:53:08  48  ,trend att37
00:53:08  49  FROM svm6142
00:53:08  50  ORDER BY ydate
00:53:08  51  /

Table created.

Elapsed: 00:00:04.91
00:53:13 SQL> 
00:53:13 SQL> -- rpt
00:53:13 SQL> 
00:53:13 SQL> SELECT
00:53:13   2  pair
00:53:13   3  ,trend
00:53:13   4  ,gatt
00:53:13   5  ,COUNT(pair)
00:53:13   6  ,AVG(g6)
00:53:13   7  FROM svm6162
00:53:13   8  GROUP BY pair,trend,gatt
00:53:13   9  ORDER BY pair,trend,gatt
00:53:13  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4184 -.22687112
ajp_usd 	-1 up	      5288 .218183104
ajp_usd 	-1		 9
ajp_usd 	 1 nup	      5307 -.20104862
ajp_usd 	 1 up	      4980 .203944188
ajp_usd 	 1		63

6 rows selected.

Elapsed: 00:00:00.02
00:53:13 SQL> 
00:53:13 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
00:53:13 SQL> CREATE TABLE modsrc COMPRESS AS
00:53:13   2  SELECT
00:53:13   3  pair
00:53:13   4  ,ydate
00:53:13   5  ,prdate
00:53:13   6  ,trend
00:53:13   7  ,g6
00:53:13   8  ,gatt
00:53:13   9  ,gattn
00:53:13  10  FROM svm6162
00:53:13  11  /

Table created.

Elapsed: 00:00:00.09
00:53:13 SQL> 
00:53:13 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
00:53:13 SQL> 
00:53:13 SQL> DROP   TABLE ajp_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
00:53:13 SQL> CREATE TABLE ajp_ms610 COMPRESS AS
00:53:13   2  SELECT
00:53:13   3  ydate
00:53:13   4  ,trend ajp_trend
00:53:13   5  ,g6    ajp_g6
00:53:13   6  ,gatt  ajp_gatt
00:53:13   7  ,gattn ajp_gattn
00:53:13   8  FROM modsrc
00:53:13   9  /

Table created.

Elapsed: 00:00:00.09
00:53:13 SQL> 
00:53:13 SQL> ANALYZE TABLE ajp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.25
00:53:13 SQL> 
00:53:13 SQL> -- I need a copy of the attributes:
00:53:13 SQL> 
00:53:13 SQL> 
00:53:13 SQL> DROP   TABLE ajp_att;

Table dropped.

Elapsed: 00:00:00.04
00:53:13 SQL> CREATE TABLE ajp_att COMPRESS AS
00:53:13   2  SELECT
00:53:13   3  ydate
00:53:13   4  ,att00 ajp_att00
00:53:13   5  ,att01 ajp_att01
00:53:13   6  ,att02 ajp_att02
00:53:13   7  ,att03 ajp_att03
00:53:13   8  ,att04 ajp_att04
00:53:13   9  ,att05 ajp_att05
00:53:13  10  ,att06 ajp_att06
00:53:13  11  ,att07 ajp_att07
00:53:13  12  ,att08 ajp_att08
00:53:13  13  ,att09 ajp_att09
00:53:13  14  ,att10 ajp_att10
00:53:13  15  ,att11 ajp_att11
00:53:13  16  ,att12 ajp_att12
00:53:13  17  ,att13 ajp_att13
00:53:13  18  ,att14 ajp_att14
00:53:13  19  ,att15 ajp_att15
00:53:13  20  ,att16 ajp_att16
00:53:13  21  ,att17 ajp_att17
00:53:13  22  ,att18 ajp_att18
00:53:13  23  ,att19 ajp_att19
00:53:13  24  ,att20 ajp_att20
00:53:13  25  ,att21 ajp_att21
00:53:13  26  ,att22 ajp_att22
00:53:13  27  ,att23 ajp_att23
00:53:13  28  ,att24 ajp_att24
00:53:13  29  ,att25 ajp_att25
00:53:13  30  ,att26 ajp_att26
00:53:13  31  ,att27 ajp_att27
00:53:13  32  ,att28 ajp_att28
00:53:13  33  ,att29 ajp_att29
00:53:13  34  ,att30 ajp_att30
00:53:13  35  ,att31 ajp_att31
00:53:13  36  ,att32 ajp_att32
00:53:13  37  ,att33 ajp_att33
00:53:13  38  ,att34 ajp_att34
00:53:13  39  ,att35 ajp_att35
00:53:13  40  ,att36 ajp_att36
00:53:13  41  ,att37 ajp_att37
00:53:13  42  FROM svm6162
00:53:13  43  /

Table created.

Elapsed: 00:00:00.18
00:53:14 SQL> 
00:53:14 SQL> ANALYZE TABLE ajp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
00:53:14 SQL> 
00:53:14 SQL> -- rpt
00:53:14 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19831

Elapsed: 00:00:00.78
00:53:15 SQL> SELECT COUNT(*)FROM ajp_att;

  COUNT(*)
----------
     19831

Elapsed: 00:00:00.00
00:53:15 SQL> 
00:53:15 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
