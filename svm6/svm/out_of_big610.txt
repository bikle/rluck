
SQL*Plus: Release 11.2.0.1.0 Production on Mon Jan 3 06:53:44 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

06:53:44 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
06:53:44 SQL> 06:53:44 SQL> --
06:53:44 SQL> -- eur610.sql
06:53:44 SQL> --
06:53:44 SQL> 
06:53:44 SQL> -- Creates views and tables for backtesting a forex SVM strategy
06:53:44 SQL> 
06:53:44 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.01
06:53:44 SQL> 
06:53:44 SQL> -- I created di5min here:
06:53:44 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
06:53:44 SQL> 
06:53:44 SQL> CREATE OR REPLACE VIEW svm6102 AS
06:53:44   2  SELECT
06:53:44   3  pair
06:53:44   4  ,ydate
06:53:44   5  ,prdate
06:53:44   6  ,rownum rnum -- acts as t in my time-series
06:53:44   7  ,clse
06:53:44   8  -- Derive a bunch of attributes from clse, the latest price:
06:53:44   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
06:53:44  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
06:53:44  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
06:53:44  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
06:53:44  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
06:53:44  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
06:53:44  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
06:53:44  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
06:53:44  17  --
06:53:44  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
06:53:44  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
06:53:44  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
06:53:44  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
06:53:44  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
06:53:44  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
06:53:44  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
06:53:44  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
06:53:44  26  --
06:53:44  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
06:53:44  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
06:53:44  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
06:53:44  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
06:53:44  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
06:53:44  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
06:53:44  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
06:53:44  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
06:53:44  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
06:53:44  36  FROM di5min WHERE pair LIKE'%eur%'
06:53:44  37  AND ydate > sysdate - 95
06:53:44  38  ORDER BY ydate
06:53:44  39  /

View created.

Elapsed: 00:00:00.10
06:53:44 SQL> 
06:53:44 SQL> -- rpt
06:53:44 SQL> 
06:53:44 SQL> SELECT
06:53:44   2  pair
06:53:44   3  ,COUNT(pair)
06:53:44   4  ,MIN(clse),MAX(clse)
06:53:44   5  ,MIN(avg6),MAX(avg6)
06:53:44   6  ,MIN(ydate),MAX(ydate)
06:53:44   7  FROM svm6102
06:53:44   8  GROUP BY pair
06:53:44   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19259    1.29735	   1.4273 1.29875103 1.42436233 2010-09-30 06:55:01 2011-01-03 06:45:00

Elapsed: 00:00:00.93
06:53:45 SQL> 
06:53:45 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
06:53:45 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.06
06:53:45 SQL> CREATE TABLE svm6122 COMPRESS AS
06:53:45   2  SELECT
06:53:45   3  pair
06:53:45   4  ,ydate
06:53:45   5  ,prdate
06:53:45   6  ,clse
06:53:45   7  -- g6 is important. I want to predict g6:
06:53:45   8  ,ld6 - clse g6
06:53:45   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
06:53:45  10  -- I want more attributes from the ones I derived above:
06:53:45  11  -- clse relation to moving-min
06:53:45  12  ,clse-min4  cm4
06:53:45  13  ,clse-min6  cm6
06:53:45  14  ,clse-min8  cm8
06:53:45  15  ,clse-min10 cm10
06:53:45  16  ,clse-min12 cm12
06:53:45  17  ,clse-min14 cm14
06:53:45  18  ,clse-min16 cm16
06:53:45  19  ,clse-min18 cm18
06:53:45  20  -- clse relation to moving-avg
06:53:45  21  ,clse-avg4  ca4
06:53:45  22  ,clse-avg6  ca6
06:53:45  23  ,clse-avg8  ca8
06:53:45  24  ,clse-avg10 ca10
06:53:45  25  ,clse-avg12 ca12
06:53:45  26  ,clse-avg14 ca14
06:53:45  27  ,clse-avg16 ca16
06:53:45  28  ,clse-avg18 ca18
06:53:45  29  -- clse relation to moving-max
06:53:45  30  ,clse-max4  cx4
06:53:45  31  ,clse-max6  cx6
06:53:45  32  ,clse-max8  cx8
06:53:45  33  ,clse-max10 cx10
06:53:45  34  ,clse-max12 cx12
06:53:45  35  ,clse-max14 cx14
06:53:45  36  ,clse-max16 cx16
06:53:45  37  ,clse-max18 cx18
06:53:45  38  -- Derive more attributes.
06:53:45  39  -- I want to use CORR() here to help SVM see the shape of the series.
06:53:45  40  -- But COVAR_POP is more stable:
06:53:45  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
06:53:45  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
06:53:45  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
06:53:45  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
06:53:45  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
06:53:45  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
06:53:45  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
06:53:45  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
06:53:45  49  -- Derive date related attributes:
06:53:45  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
06:53:45  51  ,0+TO_CHAR(ydate,'D')d
06:53:45  52  ,0+TO_CHAR(ydate,'W')w
06:53:45  53  -- mpm stands for minutes-past-midnight:
06:53:45  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
06:53:45  55  -- mph stands for minutes-past-hour:
06:53:45  56  ,0+TO_CHAR(ydate,'MI')mph
06:53:45  57  FROM svm6102
06:53:45  58  ORDER BY ydate
06:53:45  59  /

Table created.

Elapsed: 00:00:02.38
06:53:47 SQL> 
06:53:47 SQL> -- rpt
06:53:47 SQL> 
06:53:47 SQL> SELECT
06:53:47   2  pair
06:53:47   3  ,COUNT(pair)
06:53:47   4  ,MIN(clse),MAX(clse)
06:53:47   5  ,MIN(ydate),MAX(ydate)
06:53:47   6  FROM svm6122
06:53:47   7  GROUP BY pair
06:53:47   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19259    1.29735	   1.4273 2010-09-30 06:55:01 2011-01-03 06:45:00

Elapsed: 00:00:00.04
06:53:48 SQL> 
06:53:48 SQL> -- Prepare for derivation of NTILE based params:
06:53:48 SQL> 
06:53:48 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.04
06:53:48 SQL> CREATE TABLE svm6142 COMPRESS AS
06:53:48   2  SELECT
06:53:48   3  pair
06:53:48   4  ,ydate
06:53:48   5  ,prdate
06:53:48   6  ,clse
06:53:48   7  ,g6
06:53:48   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
06:53:48   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
06:53:48  10  ,CASE WHEN trend IS NULL THEN 1
06:53:48  11  	    WHEN trend =0      THEN 1
06:53:48  12  	    ELSE trend END trend
06:53:48  13  ,cm4
06:53:48  14  ,cm6
06:53:48  15  ,cm8
06:53:48  16  ,cm10
06:53:48  17  ,cm12
06:53:48  18  ,cm14
06:53:48  19  ,cm16
06:53:48  20  ,cm18
06:53:48  21  --
06:53:48  22  ,ca4
06:53:48  23  ,ca6
06:53:48  24  ,ca8
06:53:48  25  ,ca10
06:53:48  26  ,ca12
06:53:48  27  ,ca14
06:53:48  28  ,ca16
06:53:48  29  ,ca18
06:53:48  30  --
06:53:48  31  ,cx4
06:53:48  32  ,cx6
06:53:48  33  ,cx8
06:53:48  34  ,cx10
06:53:48  35  ,cx12
06:53:48  36  ,cx14
06:53:48  37  ,cx16
06:53:48  38  ,cx18
06:53:48  39  --
06:53:48  40  ,crr4
06:53:48  41  ,crr6
06:53:48  42  ,crr8
06:53:48  43  ,crr10
06:53:48  44  ,crr12
06:53:48  45  ,crr14
06:53:48  46  ,crr16
06:53:48  47  ,crr18
06:53:48  48  --
06:53:48  49  ,hh
06:53:48  50  ,d
06:53:48  51  ,w
06:53:48  52  ,mpm
06:53:48  53  ,mph
06:53:48  54  FROM svm6122
06:53:48  55  ORDER BY ydate
06:53:48  56  /

Table created.

Elapsed: 00:00:00.42
06:53:48 SQL> 
06:53:48 SQL> -- rpt
06:53:48 SQL> 
06:53:48 SQL> SELECT
06:53:48   2  pair
06:53:48   3  ,trend
06:53:48   4  ,gatt
06:53:48   5  ,COUNT(pair)
06:53:48   6  ,AVG(g6)
06:53:48   7  FROM svm6142
06:53:48   8  GROUP BY pair,trend,gatt
06:53:48   9  ORDER BY pair,trend,gatt
06:53:48  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      5999 -.00315571
eur_usd 	-1 up	      3521 .004465773
eur_usd 	-1		72
eur_usd 	 1 nup	      5849 -.00317382
eur_usd 	 1 up	      3818  .00505387

Elapsed: 00:00:00.04
06:53:48 SQL> 
06:53:48 SQL> 
06:53:48 SQL> -- Derive NTILE based params:
06:53:48 SQL> 
06:53:48 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.24
06:53:48 SQL> CREATE TABLE svm6162 COMPRESS AS
06:53:48   2  SELECT
06:53:48   3  pair
06:53:48   4  ,ydate
06:53:48   5  ,prdate
06:53:48   6  ,clse
06:53:48   7  ,g6
06:53:48   8  ,gatt
06:53:48   9  ,gattn
06:53:48  10  ,trend
06:53:48  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
06:53:48  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
06:53:48  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
06:53:48  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
06:53:48  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
06:53:48  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
06:53:48  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
06:53:48  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
06:53:48  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
06:53:48  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
06:53:48  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
06:53:48  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
06:53:48  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
06:53:48  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
06:53:48  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
06:53:48  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
06:53:48  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
06:53:48  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
06:53:48  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
06:53:48  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
06:53:48  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
06:53:48  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
06:53:48  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
06:53:48  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
06:53:48  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
06:53:48  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
06:53:48  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
06:53:48  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
06:53:48  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
06:53:48  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
06:53:48  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
06:53:48  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
06:53:48  43  ,hh  att32
06:53:48  44  ,d   att33
06:53:48  45  ,w   att34
06:53:48  46  ,mpm att35
06:53:48  47  ,mph att36
06:53:48  48  ,trend att37
06:53:48  49  FROM svm6142
06:53:48  50  ORDER BY ydate
06:53:48  51  /

Table created.

Elapsed: 00:00:04.72
06:53:53 SQL> 
06:53:53 SQL> -- rpt
06:53:53 SQL> 
06:53:53 SQL> SELECT
06:53:53   2  pair
06:53:53   3  ,trend
06:53:53   4  ,gatt
06:53:53   5  ,COUNT(pair)
06:53:53   6  ,AVG(g6)
06:53:53   7  FROM svm6162
06:53:53   8  GROUP BY pair,trend,gatt
06:53:53   9  ORDER BY pair,trend,gatt
06:53:53  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      5999 -.00315571
eur_usd 	-1 up	      3521 .004465773
eur_usd 	-1		72
eur_usd 	 1 nup	      5849 -.00317382
eur_usd 	 1 up	      3818  .00505387

Elapsed: 00:00:00.03
06:53:53 SQL> 
06:53:53 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.21
06:53:53 SQL> CREATE TABLE modsrc COMPRESS AS
06:53:53   2  SELECT
06:53:53   3  pair
06:53:53   4  ,ydate
06:53:53   5  ,prdate
06:53:53   6  ,trend
06:53:53   7  ,g6
06:53:53   8  ,gatt
06:53:53   9  ,gattn
06:53:53  10  FROM svm6162
06:53:53  11  /

Table created.

Elapsed: 00:00:00.08
06:53:53 SQL> 
06:53:53 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
06:53:54 SQL> 
06:53:54 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
06:53:54 SQL> CREATE TABLE eur_ms610 COMPRESS AS
06:53:54   2  SELECT
06:53:54   3  ydate
06:53:54   4  ,trend eur_trend
06:53:54   5  ,g6    eur_g6
06:53:54   6  ,gatt  eur_gatt
06:53:54   7  ,gattn eur_gattn
06:53:54   8  FROM modsrc
06:53:54   9  /

Table created.

Elapsed: 00:00:00.09
06:53:54 SQL> 
06:53:54 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
06:53:54 SQL> 
06:53:54 SQL> -- I need a copy of the attributes:
06:53:54 SQL> 
06:53:54 SQL> 
06:53:54 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.04
06:53:54 SQL> CREATE TABLE eur_att COMPRESS AS
06:53:54   2  SELECT
06:53:54   3  ydate
06:53:54   4  ,att00 eur_att00
06:53:54   5  ,att01 eur_att01
06:53:54   6  ,att02 eur_att02
06:53:54   7  ,att03 eur_att03
06:53:54   8  ,att04 eur_att04
06:53:54   9  ,att05 eur_att05
06:53:54  10  ,att06 eur_att06
06:53:54  11  ,att07 eur_att07
06:53:54  12  ,att08 eur_att08
06:53:54  13  ,att09 eur_att09
06:53:54  14  ,att10 eur_att10
06:53:54  15  ,att11 eur_att11
06:53:54  16  ,att12 eur_att12
06:53:54  17  ,att13 eur_att13
06:53:54  18  ,att14 eur_att14
06:53:54  19  ,att15 eur_att15
06:53:54  20  ,att16 eur_att16
06:53:54  21  ,att17 eur_att17
06:53:54  22  ,att18 eur_att18
06:53:54  23  ,att19 eur_att19
06:53:54  24  ,att20 eur_att20
06:53:54  25  ,att21 eur_att21
06:53:54  26  ,att22 eur_att22
06:53:54  27  ,att23 eur_att23
06:53:54  28  ,att24 eur_att24
06:53:54  29  ,att25 eur_att25
06:53:54  30  ,att26 eur_att26
06:53:54  31  ,att27 eur_att27
06:53:54  32  ,att28 eur_att28
06:53:54  33  ,att29 eur_att29
06:53:54  34  ,att30 eur_att30
06:53:54  35  ,att31 eur_att31
06:53:54  36  ,att32 eur_att32
06:53:54  37  ,att33 eur_att33
06:53:54  38  ,att34 eur_att34
06:53:54  39  ,att35 eur_att35
06:53:54  40  ,att36 eur_att36
06:53:54  41  ,att37 eur_att37
06:53:54  42  FROM svm6162
06:53:54  43  /

Table created.

Elapsed: 00:00:00.16
06:53:54 SQL> 
06:53:54 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
06:53:55 SQL> 
06:53:55 SQL> -- rpt
06:53:55 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.88
06:53:55 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.00
06:53:55 SQL> 
06:53:55 SQL> --
06:53:55 SQL> -- aud610.sql
06:53:55 SQL> --
06:53:55 SQL> 
06:53:55 SQL> -- Creates views and tables for backtesting a forex SVM strategy
06:53:55 SQL> 
06:53:55 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.59
06:53:56 SQL> 
06:53:56 SQL> -- I created di5min here:
06:53:56 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
06:53:56 SQL> 
06:53:56 SQL> CREATE OR REPLACE VIEW svm6102 AS
06:53:56   2  SELECT
06:53:56   3  pair
06:53:56   4  ,ydate
06:53:56   5  ,prdate
06:53:56   6  ,rownum rnum -- acts as t in my time-series
06:53:56   7  ,clse
06:53:56   8  -- Derive a bunch of attributes from clse, the latest price:
06:53:56   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
06:53:56  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
06:53:56  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
06:53:56  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
06:53:56  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
06:53:56  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
06:53:56  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
06:53:56  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
06:53:56  17  --
06:53:56  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
06:53:56  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
06:53:56  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
06:53:56  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
06:53:56  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
06:53:56  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
06:53:56  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
06:53:56  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
06:53:56  26  --
06:53:56  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
06:53:56  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
06:53:56  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
06:53:56  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
06:53:56  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
06:53:56  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
06:53:56  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
06:53:56  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
06:53:56  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
06:53:56  36  FROM di5min WHERE pair LIKE'%aud%'
06:53:56  37  AND ydate > sysdate - 95
06:53:56  38  ORDER BY ydate
06:53:56  39  /

View created.

Elapsed: 00:00:00.03
06:53:56 SQL> 
06:53:56 SQL> -- rpt
06:53:56 SQL> 
06:53:56 SQL> SELECT
06:53:56   2  pair
06:53:56   3  ,COUNT(pair)
06:53:56   4  ,MIN(clse),MAX(clse)
06:53:56   5  ,MIN(avg6),MAX(avg6)
06:53:56   6  ,MIN(ydate),MAX(ydate)
06:53:56   7  FROM svm6102
06:53:56   8  GROUP BY pair
06:53:56   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19256	.95405	  1.02495 .957141438 1.02284247 2010-09-30 06:55:01 2011-01-03 06:45:00

Elapsed: 00:00:00.89
06:53:57 SQL> 
06:53:57 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
06:53:57 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.18
06:53:57 SQL> CREATE TABLE svm6122 COMPRESS AS
06:53:57   2  SELECT
06:53:57   3  pair
06:53:57   4  ,ydate
06:53:57   5  ,prdate
06:53:57   6  ,clse
06:53:57   7  -- g6 is important. I want to predict g6:
06:53:57   8  ,ld6 - clse g6
06:53:57   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
06:53:57  10  -- I want more attributes from the ones I derived above:
06:53:57  11  -- clse relation to moving-min
06:53:57  12  ,clse-min4  cm4
06:53:57  13  ,clse-min6  cm6
06:53:57  14  ,clse-min8  cm8
06:53:57  15  ,clse-min10 cm10
06:53:57  16  ,clse-min12 cm12
06:53:57  17  ,clse-min14 cm14
06:53:57  18  ,clse-min16 cm16
06:53:57  19  ,clse-min18 cm18
06:53:57  20  -- clse relation to moving-avg
06:53:57  21  ,clse-avg4  ca4
06:53:57  22  ,clse-avg6  ca6
06:53:57  23  ,clse-avg8  ca8
06:53:57  24  ,clse-avg10 ca10
06:53:57  25  ,clse-avg12 ca12
06:53:57  26  ,clse-avg14 ca14
06:53:57  27  ,clse-avg16 ca16
06:53:57  28  ,clse-avg18 ca18
06:53:57  29  -- clse relation to moving-max
06:53:57  30  ,clse-max4  cx4
06:53:57  31  ,clse-max6  cx6
06:53:57  32  ,clse-max8  cx8
06:53:57  33  ,clse-max10 cx10
06:53:57  34  ,clse-max12 cx12
06:53:57  35  ,clse-max14 cx14
06:53:57  36  ,clse-max16 cx16
06:53:57  37  ,clse-max18 cx18
06:53:57  38  -- Derive more attributes.
06:53:57  39  -- I want to use CORR() here to help SVM see the shape of the series.
06:53:57  40  -- But COVAR_POP is more stable:
06:53:57  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
06:53:57  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
06:53:57  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
06:53:57  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
06:53:57  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
06:53:57  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
06:53:57  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
06:53:57  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
06:53:57  49  -- Derive date related attributes:
06:53:57  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
06:53:57  51  ,0+TO_CHAR(ydate,'D')d
06:53:57  52  ,0+TO_CHAR(ydate,'W')w
06:53:57  53  -- mpm stands for minutes-past-midnight:
06:53:57  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
06:53:57  55  -- mph stands for minutes-past-hour:
06:53:57  56  ,0+TO_CHAR(ydate,'MI')mph
06:53:57  57  FROM svm6102
06:53:57  58  ORDER BY ydate
06:53:57  59  /

Table created.

Elapsed: 00:00:02.08
06:53:59 SQL> 
06:53:59 SQL> -- rpt
06:53:59 SQL> 
06:53:59 SQL> SELECT
06:53:59   2  pair
06:53:59   3  ,COUNT(pair)
06:53:59   4  ,MIN(clse),MAX(clse)
06:53:59   5  ,MIN(ydate),MAX(ydate)
06:53:59   6  FROM svm6122
06:53:59   7  GROUP BY pair
06:53:59   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19256	.95405	  1.02495 2010-09-30 06:55:01 2011-01-03 06:45:00

Elapsed: 00:00:00.09
06:53:59 SQL> 
06:53:59 SQL> -- Prepare for derivation of NTILE based params:
06:53:59 SQL> 
06:53:59 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.31
06:54:00 SQL> CREATE TABLE svm6142 COMPRESS AS
06:54:00   2  SELECT
06:54:00   3  pair
06:54:00   4  ,ydate
06:54:00   5  ,prdate
06:54:00   6  ,clse
06:54:00   7  ,g6
06:54:00   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
06:54:00   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
06:54:00  10  ,CASE WHEN trend IS NULL THEN 1
06:54:00  11  	    WHEN trend =0      THEN 1
06:54:00  12  	    ELSE trend END trend
06:54:00  13  ,cm4
06:54:00  14  ,cm6
06:54:00  15  ,cm8
06:54:00  16  ,cm10
06:54:00  17  ,cm12
06:54:00  18  ,cm14
06:54:00  19  ,cm16
06:54:00  20  ,cm18
06:54:00  21  --
06:54:00  22  ,ca4
06:54:00  23  ,ca6
06:54:00  24  ,ca8
06:54:00  25  ,ca10
06:54:00  26  ,ca12
06:54:00  27  ,ca14
06:54:00  28  ,ca16
06:54:00  29  ,ca18
06:54:00  30  --
06:54:00  31  ,cx4
06:54:00  32  ,cx6
06:54:00  33  ,cx8
06:54:00  34  ,cx10
06:54:00  35  ,cx12
06:54:00  36  ,cx14
06:54:00  37  ,cx16
06:54:00  38  ,cx18
06:54:00  39  --
06:54:00  40  ,crr4
06:54:00  41  ,crr6
06:54:00  42  ,crr8
06:54:00  43  ,crr10
06:54:00  44  ,crr12
06:54:00  45  ,crr14
06:54:00  46  ,crr16
06:54:00  47  ,crr18
06:54:00  48  --
06:54:00  49  ,hh
06:54:00  50  ,d
06:54:00  51  ,w
06:54:00  52  ,mpm
06:54:00  53  ,mph
06:54:00  54  FROM svm6122
06:54:00  55  ORDER BY ydate
06:54:00  56  /

Table created.

Elapsed: 00:00:00.37
06:54:00 SQL> 
06:54:00 SQL> -- rpt
06:54:00 SQL> 
06:54:00 SQL> SELECT
06:54:00   2  pair
06:54:00   3  ,trend
06:54:00   4  ,gatt
06:54:00   5  ,COUNT(pair)
06:54:00   6  ,AVG(g6)
06:54:00   7  FROM svm6142
06:54:00   8  GROUP BY pair,trend,gatt
06:54:00   9  ORDER BY pair,trend,gatt
06:54:00  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5069 -.00217028
aud_usd 	-1 up	      3724 .003756878
aud_usd 	-1		72
aud_usd 	 1 nup	      6712 -.00211603
aud_usd 	 1 up	      3679 .004037979

Elapsed: 00:00:00.09
06:54:00 SQL> 
06:54:00 SQL> 
06:54:00 SQL> -- Derive NTILE based params:
06:54:00 SQL> 
06:54:00 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.18
06:54:00 SQL> CREATE TABLE svm6162 COMPRESS AS
06:54:00   2  SELECT
06:54:00   3  pair
06:54:00   4  ,ydate
06:54:00   5  ,prdate
06:54:00   6  ,clse
06:54:00   7  ,g6
06:54:00   8  ,gatt
06:54:00   9  ,gattn
06:54:00  10  ,trend
06:54:00  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
06:54:00  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
06:54:00  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
06:54:00  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
06:54:00  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
06:54:00  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
06:54:00  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
06:54:00  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
06:54:00  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
06:54:00  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
06:54:00  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
06:54:00  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
06:54:00  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
06:54:00  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
06:54:00  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
06:54:00  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
06:54:00  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
06:54:00  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
06:54:00  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
06:54:00  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
06:54:00  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
06:54:00  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
06:54:00  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
06:54:00  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
06:54:00  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
06:54:00  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
06:54:00  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
06:54:00  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
06:54:00  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
06:54:00  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
06:54:00  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
06:54:00  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
06:54:00  43  ,hh  att32
06:54:00  44  ,d   att33
06:54:00  45  ,w   att34
06:54:00  46  ,mpm att35
06:54:00  47  ,mph att36
06:54:00  48  ,trend att37
06:54:00  49  FROM svm6142
06:54:00  50  ORDER BY ydate
06:54:00  51  /

Table created.

Elapsed: 00:00:04.83
06:54:05 SQL> 
06:54:05 SQL> -- rpt
06:54:05 SQL> 
06:54:05 SQL> SELECT
06:54:05   2  pair
06:54:05   3  ,trend
06:54:05   4  ,gatt
06:54:05   5  ,COUNT(pair)
06:54:05   6  ,AVG(g6)
06:54:05   7  FROM svm6162
06:54:05   8  GROUP BY pair,trend,gatt
06:54:05   9  ORDER BY pair,trend,gatt
06:54:05  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5069 -.00217028
aud_usd 	-1 up	      3724 .003756878
aud_usd 	-1		72
aud_usd 	 1 nup	      6712 -.00211603
aud_usd 	 1 up	      3679 .004037979

Elapsed: 00:00:00.04
06:54:05 SQL> 
06:54:05 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
06:54:05 SQL> CREATE TABLE modsrc COMPRESS AS
06:54:05   2  SELECT
06:54:05   3  pair
06:54:05   4  ,ydate
06:54:05   5  ,prdate
06:54:05   6  ,trend
06:54:05   7  ,g6
06:54:05   8  ,gatt
06:54:05   9  ,gattn
06:54:05  10  FROM svm6162
06:54:05  11  /

Table created.

Elapsed: 00:00:00.08
06:54:05 SQL> 
06:54:05 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
06:54:06 SQL> 
06:54:06 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
06:54:06 SQL> CREATE TABLE aud_ms610 COMPRESS AS
06:54:06   2  SELECT
06:54:06   3  ydate
06:54:06   4  ,trend aud_trend
06:54:06   5  ,g6    aud_g6
06:54:06   6  ,gatt  aud_gatt
06:54:06   7  ,gattn aud_gattn
06:54:06   8  FROM modsrc
06:54:06   9  /

Table created.

Elapsed: 00:00:00.05
06:54:06 SQL> 
06:54:06 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
06:54:06 SQL> 
06:54:06 SQL> -- I need a copy of the attributes:
06:54:06 SQL> 
06:54:06 SQL> 
06:54:06 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.14
06:54:06 SQL> CREATE TABLE aud_att COMPRESS AS
06:54:06   2  SELECT
06:54:06   3  ydate
06:54:06   4  ,att00 aud_att00
06:54:06   5  ,att01 aud_att01
06:54:06   6  ,att02 aud_att02
06:54:06   7  ,att03 aud_att03
06:54:06   8  ,att04 aud_att04
06:54:06   9  ,att05 aud_att05
06:54:06  10  ,att06 aud_att06
06:54:06  11  ,att07 aud_att07
06:54:06  12  ,att08 aud_att08
06:54:06  13  ,att09 aud_att09
06:54:06  14  ,att10 aud_att10
06:54:06  15  ,att11 aud_att11
06:54:06  16  ,att12 aud_att12
06:54:06  17  ,att13 aud_att13
06:54:06  18  ,att14 aud_att14
06:54:06  19  ,att15 aud_att15
06:54:06  20  ,att16 aud_att16
06:54:06  21  ,att17 aud_att17
06:54:06  22  ,att18 aud_att18
06:54:06  23  ,att19 aud_att19
06:54:06  24  ,att20 aud_att20
06:54:06  25  ,att21 aud_att21
06:54:06  26  ,att22 aud_att22
06:54:06  27  ,att23 aud_att23
06:54:06  28  ,att24 aud_att24
06:54:06  29  ,att25 aud_att25
06:54:06  30  ,att26 aud_att26
06:54:06  31  ,att27 aud_att27
06:54:06  32  ,att28 aud_att28
06:54:06  33  ,att29 aud_att29
06:54:06  34  ,att30 aud_att30
06:54:06  35  ,att31 aud_att31
06:54:06  36  ,att32 aud_att32
06:54:06  37  ,att33 aud_att33
06:54:06  38  ,att34 aud_att34
06:54:06  39  ,att35 aud_att35
06:54:06  40  ,att36 aud_att36
06:54:06  41  ,att37 aud_att37
06:54:06  42  FROM svm6162
06:54:06  43  /

Table created.

Elapsed: 00:00:00.17
06:54:06 SQL> 
06:54:06 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
06:54:07 SQL> 
06:54:07 SQL> -- rpt
06:54:07 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.84
06:54:07 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.00
06:54:07 SQL> 
06:54:07 SQL> --
06:54:07 SQL> -- gbp610.sql
06:54:07 SQL> --
06:54:07 SQL> 
06:54:07 SQL> -- Creates views and tables for backtesting a forex SVM strategy
06:54:07 SQL> 
06:54:07 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.42
06:54:08 SQL> 
06:54:08 SQL> -- I created di5min here:
06:54:08 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
06:54:08 SQL> 
06:54:08 SQL> CREATE OR REPLACE VIEW svm6102 AS
06:54:08   2  SELECT
06:54:08   3  pair
06:54:08   4  ,ydate
06:54:08   5  ,prdate
06:54:08   6  ,rownum rnum -- acts as t in my time-series
06:54:08   7  ,clse
06:54:08   8  -- Derive a bunch of attributes from clse, the latest price:
06:54:08   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
06:54:08  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
06:54:08  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
06:54:08  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
06:54:08  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
06:54:08  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
06:54:08  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
06:54:08  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
06:54:08  17  --
06:54:08  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
06:54:08  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
06:54:08  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
06:54:08  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
06:54:08  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
06:54:08  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
06:54:08  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
06:54:08  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
06:54:08  26  --
06:54:08  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
06:54:08  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
06:54:08  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
06:54:08  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
06:54:08  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
06:54:08  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
06:54:08  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
06:54:08  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
06:54:08  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
06:54:08  36  FROM di5min WHERE pair LIKE'%gbp%'
06:54:08  37  AND ydate > sysdate - 95
06:54:08  38  ORDER BY ydate
06:54:08  39  /

View created.

Elapsed: 00:00:00.05
06:54:08 SQL> 
06:54:08 SQL> -- rpt
06:54:08 SQL> 
06:54:08 SQL> SELECT
06:54:08   2  pair
06:54:08   3  ,COUNT(pair)
06:54:08   4  ,MIN(clse),MAX(clse)
06:54:08   5  ,MIN(avg6),MAX(avg6)
06:54:08   6  ,MIN(ydate),MAX(ydate)
06:54:08   7  FROM svm6102
06:54:08   8  GROUP BY pair
06:54:08   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19258   1.535325	   1.6295 1.53696747 1.62716986 2010-09-30 06:55:01 2011-01-03 06:45:00

Elapsed: 00:00:00.91
06:54:09 SQL> 
06:54:09 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
06:54:09 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
06:54:09 SQL> CREATE TABLE svm6122 COMPRESS AS
06:54:09   2  SELECT
06:54:09   3  pair
06:54:09   4  ,ydate
06:54:09   5  ,prdate
06:54:09   6  ,clse
06:54:09   7  -- g6 is important. I want to predict g6:
06:54:09   8  ,ld6 - clse g6
06:54:09   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
06:54:09  10  -- I want more attributes from the ones I derived above:
06:54:09  11  -- clse relation to moving-min
06:54:09  12  ,clse-min4  cm4
06:54:09  13  ,clse-min6  cm6
06:54:09  14  ,clse-min8  cm8
06:54:09  15  ,clse-min10 cm10
06:54:09  16  ,clse-min12 cm12
06:54:09  17  ,clse-min14 cm14
06:54:09  18  ,clse-min16 cm16
06:54:09  19  ,clse-min18 cm18
06:54:09  20  -- clse relation to moving-avg
06:54:09  21  ,clse-avg4  ca4
06:54:09  22  ,clse-avg6  ca6
06:54:09  23  ,clse-avg8  ca8
06:54:09  24  ,clse-avg10 ca10
06:54:09  25  ,clse-avg12 ca12
06:54:09  26  ,clse-avg14 ca14
06:54:09  27  ,clse-avg16 ca16
06:54:09  28  ,clse-avg18 ca18
06:54:09  29  -- clse relation to moving-max
06:54:09  30  ,clse-max4  cx4
06:54:09  31  ,clse-max6  cx6
06:54:09  32  ,clse-max8  cx8
06:54:09  33  ,clse-max10 cx10
06:54:09  34  ,clse-max12 cx12
06:54:09  35  ,clse-max14 cx14
06:54:09  36  ,clse-max16 cx16
06:54:09  37  ,clse-max18 cx18
06:54:09  38  -- Derive more attributes.
06:54:09  39  -- I want to use CORR() here to help SVM see the shape of the series.
06:54:09  40  -- But COVAR_POP is more stable:
06:54:09  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
06:54:09  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
06:54:09  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
06:54:09  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
06:54:09  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
06:54:09  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
06:54:09  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
06:54:09  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
06:54:09  49  -- Derive date related attributes:
06:54:09  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
06:54:09  51  ,0+TO_CHAR(ydate,'D')d
06:54:09  52  ,0+TO_CHAR(ydate,'W')w
06:54:09  53  -- mpm stands for minutes-past-midnight:
06:54:09  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
06:54:09  55  -- mph stands for minutes-past-hour:
06:54:09  56  ,0+TO_CHAR(ydate,'MI')mph
06:54:09  57  FROM svm6102
06:54:09  58  ORDER BY ydate
06:54:09  59  /

Table created.

Elapsed: 00:00:02.12
06:54:11 SQL> 
06:54:11 SQL> -- rpt
06:54:11 SQL> 
06:54:11 SQL> SELECT
06:54:11   2  pair
06:54:11   3  ,COUNT(pair)
06:54:11   4  ,MIN(clse),MAX(clse)
06:54:11   5  ,MIN(ydate),MAX(ydate)
06:54:11   6  FROM svm6122
06:54:11   7  GROUP BY pair
06:54:11   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19258   1.535325	   1.6295 2010-09-30 06:55:01 2011-01-03 06:45:00

Elapsed: 00:00:00.07
06:54:11 SQL> 
06:54:11 SQL> -- Prepare for derivation of NTILE based params:
06:54:11 SQL> 
06:54:11 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.31
06:54:12 SQL> CREATE TABLE svm6142 COMPRESS AS
06:54:12   2  SELECT
06:54:12   3  pair
06:54:12   4  ,ydate
06:54:12   5  ,prdate
06:54:12   6  ,clse
06:54:12   7  ,g6
06:54:12   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
06:54:12   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
06:54:12  10  ,CASE WHEN trend IS NULL THEN 1
06:54:12  11  	    WHEN trend =0      THEN 1
06:54:12  12  	    ELSE trend END trend
06:54:12  13  ,cm4
06:54:12  14  ,cm6
06:54:12  15  ,cm8
06:54:12  16  ,cm10
06:54:12  17  ,cm12
06:54:12  18  ,cm14
06:54:12  19  ,cm16
06:54:12  20  ,cm18
06:54:12  21  --
06:54:12  22  ,ca4
06:54:12  23  ,ca6
06:54:12  24  ,ca8
06:54:12  25  ,ca10
06:54:12  26  ,ca12
06:54:12  27  ,ca14
06:54:12  28  ,ca16
06:54:12  29  ,ca18
06:54:12  30  --
06:54:12  31  ,cx4
06:54:12  32  ,cx6
06:54:12  33  ,cx8
06:54:12  34  ,cx10
06:54:12  35  ,cx12
06:54:12  36  ,cx14
06:54:12  37  ,cx16
06:54:12  38  ,cx18
06:54:12  39  --
06:54:12  40  ,crr4
06:54:12  41  ,crr6
06:54:12  42  ,crr8
06:54:12  43  ,crr10
06:54:12  44  ,crr12
06:54:12  45  ,crr14
06:54:12  46  ,crr16
06:54:12  47  ,crr18
06:54:12  48  --
06:54:12  49  ,hh
06:54:12  50  ,d
06:54:12  51  ,w
06:54:12  52  ,mpm
06:54:12  53  ,mph
06:54:12  54  FROM svm6122
06:54:12  55  ORDER BY ydate
06:54:12  56  /

Table created.

Elapsed: 00:00:00.36
06:54:12 SQL> 
06:54:12 SQL> -- rpt
06:54:12 SQL> 
06:54:12 SQL> SELECT
06:54:12   2  pair
06:54:12   3  ,trend
06:54:12   4  ,gatt
06:54:12   5  ,COUNT(pair)
06:54:12   6  ,AVG(g6)
06:54:12   7  FROM svm6142
06:54:12   8  GROUP BY pair,trend,gatt
06:54:12   9  ORDER BY pair,trend,gatt
06:54:12  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6150 -.00268915
gbp_usd 	-1 up	      3467 .004326269
gbp_usd 	-1		67
gbp_usd 	 1 nup	      6093 -.00270517
gbp_usd 	 1 up	      3476 .004505243
gbp_usd 	 1		 5

6 rows selected.

Elapsed: 00:00:00.05
06:54:12 SQL> 
06:54:12 SQL> 
06:54:12 SQL> -- Derive NTILE based params:
06:54:12 SQL> 
06:54:12 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
06:54:12 SQL> CREATE TABLE svm6162 COMPRESS AS
06:54:12   2  SELECT
06:54:12   3  pair
06:54:12   4  ,ydate
06:54:12   5  ,prdate
06:54:12   6  ,clse
06:54:12   7  ,g6
06:54:12   8  ,gatt
06:54:12   9  ,gattn
06:54:12  10  ,trend
06:54:12  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
06:54:12  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
06:54:12  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
06:54:12  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
06:54:12  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
06:54:12  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
06:54:12  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
06:54:12  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
06:54:12  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
06:54:12  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
06:54:12  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
06:54:12  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
06:54:12  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
06:54:12  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
06:54:12  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
06:54:12  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
06:54:12  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
06:54:12  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
06:54:12  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
06:54:12  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
06:54:12  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
06:54:12  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
06:54:12  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
06:54:12  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
06:54:12  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
06:54:12  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
06:54:12  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
06:54:12  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
06:54:12  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
06:54:12  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
06:54:12  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
06:54:12  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
06:54:12  43  ,hh  att32
06:54:12  44  ,d   att33
06:54:12  45  ,w   att34
06:54:12  46  ,mpm att35
06:54:12  47  ,mph att36
06:54:12  48  ,trend att37
06:54:12  49  FROM svm6142
06:54:12  50  ORDER BY ydate
06:54:12  51  /

Table created.

Elapsed: 00:00:04.61
06:54:17 SQL> 
06:54:17 SQL> -- rpt
06:54:17 SQL> 
06:54:17 SQL> SELECT
06:54:17   2  pair
06:54:17   3  ,trend
06:54:17   4  ,gatt
06:54:17   5  ,COUNT(pair)
06:54:17   6  ,AVG(g6)
06:54:17   7  FROM svm6162
06:54:17   8  GROUP BY pair,trend,gatt
06:54:17   9  ORDER BY pair,trend,gatt
06:54:17  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6150 -.00268915
gbp_usd 	-1 up	      3467 .004326269
gbp_usd 	-1		67
gbp_usd 	 1 nup	      6093 -.00270517
gbp_usd 	 1 up	      3476 .004505243
gbp_usd 	 1		 5

6 rows selected.

Elapsed: 00:00:00.02
06:54:17 SQL> 
06:54:17 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
06:54:17 SQL> CREATE TABLE modsrc COMPRESS AS
06:54:17   2  SELECT
06:54:17   3  pair
06:54:17   4  ,ydate
06:54:17   5  ,prdate
06:54:17   6  ,trend
06:54:17   7  ,g6
06:54:17   8  ,gatt
06:54:17   9  ,gattn
06:54:17  10  FROM svm6162
06:54:17  11  /

Table created.

Elapsed: 00:00:00.08
06:54:17 SQL> 
06:54:17 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
06:54:17 SQL> 
06:54:17 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
06:54:17 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
06:54:17   2  SELECT
06:54:17   3  ydate
06:54:17   4  ,trend gbp_trend
06:54:17   5  ,g6    gbp_g6
06:54:17   6  ,gatt  gbp_gatt
06:54:17   7  ,gattn gbp_gattn
06:54:17   8  FROM modsrc
06:54:17   9  /

Table created.

Elapsed: 00:00:00.07
06:54:17 SQL> 
06:54:17 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
06:54:17 SQL> 
06:54:17 SQL> -- I need a copy of the attributes:
06:54:17 SQL> 
06:54:17 SQL> 
06:54:17 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.12
06:54:17 SQL> CREATE TABLE gbp_att COMPRESS AS
06:54:17   2  SELECT
06:54:17   3  ydate
06:54:17   4  ,att00 gbp_att00
06:54:17   5  ,att01 gbp_att01
06:54:17   6  ,att02 gbp_att02
06:54:17   7  ,att03 gbp_att03
06:54:17   8  ,att04 gbp_att04
06:54:17   9  ,att05 gbp_att05
06:54:17  10  ,att06 gbp_att06
06:54:17  11  ,att07 gbp_att07
06:54:17  12  ,att08 gbp_att08
06:54:17  13  ,att09 gbp_att09
06:54:17  14  ,att10 gbp_att10
06:54:17  15  ,att11 gbp_att11
06:54:17  16  ,att12 gbp_att12
06:54:17  17  ,att13 gbp_att13
06:54:17  18  ,att14 gbp_att14
06:54:17  19  ,att15 gbp_att15
06:54:17  20  ,att16 gbp_att16
06:54:17  21  ,att17 gbp_att17
06:54:17  22  ,att18 gbp_att18
06:54:17  23  ,att19 gbp_att19
06:54:17  24  ,att20 gbp_att20
06:54:17  25  ,att21 gbp_att21
06:54:17  26  ,att22 gbp_att22
06:54:17  27  ,att23 gbp_att23
06:54:17  28  ,att24 gbp_att24
06:54:17  29  ,att25 gbp_att25
06:54:17  30  ,att26 gbp_att26
06:54:17  31  ,att27 gbp_att27
06:54:17  32  ,att28 gbp_att28
06:54:17  33  ,att29 gbp_att29
06:54:17  34  ,att30 gbp_att30
06:54:17  35  ,att31 gbp_att31
06:54:17  36  ,att32 gbp_att32
06:54:17  37  ,att33 gbp_att33
06:54:17  38  ,att34 gbp_att34
06:54:17  39  ,att35 gbp_att35
06:54:17  40  ,att36 gbp_att36
06:54:17  41  ,att37 gbp_att37
06:54:17  42  FROM svm6162
06:54:17  43  /

Table created.

Elapsed: 00:00:00.17
06:54:18 SQL> 
06:54:18 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
06:54:18 SQL> 
06:54:18 SQL> -- rpt
06:54:18 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19258

Elapsed: 00:00:00.84
06:54:19 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19258

Elapsed: 00:00:00.01
06:54:19 SQL> 
06:54:19 SQL> --
06:54:19 SQL> -- jpy610.sql
06:54:19 SQL> --
06:54:19 SQL> 
06:54:19 SQL> -- Creates views and tables for backtesting a forex SVM strategy
06:54:19 SQL> 
06:54:19 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.52
06:54:19 SQL> 
06:54:19 SQL> -- I created di5min here:
06:54:19 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
06:54:19 SQL> 
06:54:19 SQL> CREATE OR REPLACE VIEW svm6102 AS
06:54:19   2  SELECT
06:54:19   3  pair
06:54:19   4  ,ydate
06:54:19   5  ,prdate
06:54:19   6  ,rownum rnum -- acts as t in my time-series
06:54:19   7  ,clse
06:54:19   8  -- Derive a bunch of attributes from clse, the latest price:
06:54:19   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
06:54:19  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
06:54:19  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
06:54:19  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
06:54:19  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
06:54:19  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
06:54:19  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
06:54:19  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
06:54:19  17  --
06:54:19  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
06:54:19  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
06:54:19  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
06:54:19  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
06:54:19  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
06:54:19  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
06:54:19  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
06:54:19  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
06:54:19  26  --
06:54:19  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
06:54:19  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
06:54:19  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
06:54:19  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
06:54:19  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
06:54:19  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
06:54:19  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
06:54:19  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
06:54:19  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
06:54:19  36  FROM di5min WHERE pair LIKE'%jpy%'
06:54:19  37  AND ydate > sysdate - 95
06:54:19  38  ORDER BY ydate
06:54:19  39  /

View created.

Elapsed: 00:00:00.11
06:54:20 SQL> 
06:54:20 SQL> -- rpt
06:54:20 SQL> 
06:54:20 SQL> SELECT
06:54:20   2  pair
06:54:20   3  ,COUNT(pair)
06:54:20   4  ,MIN(clse),MAX(clse)
06:54:20   5  ,MIN(avg6),MAX(avg6)
06:54:20   6  ,MIN(ydate),MAX(ydate)
06:54:20   7  FROM svm6102
06:54:20   8  GROUP BY pair
06:54:20   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19257	 80.25	   84.485 80.3595205 84.3105479 2010-09-30 06:55:01 2011-01-03 06:50:00

Elapsed: 00:00:00.92
06:54:20 SQL> 
06:54:20 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
06:54:20 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.23
06:54:21 SQL> CREATE TABLE svm6122 COMPRESS AS
06:54:21   2  SELECT
06:54:21   3  pair
06:54:21   4  ,ydate
06:54:21   5  ,prdate
06:54:21   6  ,clse
06:54:21   7  -- g6 is important. I want to predict g6:
06:54:21   8  ,ld6 - clse g6
06:54:21   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
06:54:21  10  -- I want more attributes from the ones I derived above:
06:54:21  11  -- clse relation to moving-min
06:54:21  12  ,clse-min4  cm4
06:54:21  13  ,clse-min6  cm6
06:54:21  14  ,clse-min8  cm8
06:54:21  15  ,clse-min10 cm10
06:54:21  16  ,clse-min12 cm12
06:54:21  17  ,clse-min14 cm14
06:54:21  18  ,clse-min16 cm16
06:54:21  19  ,clse-min18 cm18
06:54:21  20  -- clse relation to moving-avg
06:54:21  21  ,clse-avg4  ca4
06:54:21  22  ,clse-avg6  ca6
06:54:21  23  ,clse-avg8  ca8
06:54:21  24  ,clse-avg10 ca10
06:54:21  25  ,clse-avg12 ca12
06:54:21  26  ,clse-avg14 ca14
06:54:21  27  ,clse-avg16 ca16
06:54:21  28  ,clse-avg18 ca18
06:54:21  29  -- clse relation to moving-max
06:54:21  30  ,clse-max4  cx4
06:54:21  31  ,clse-max6  cx6
06:54:21  32  ,clse-max8  cx8
06:54:21  33  ,clse-max10 cx10
06:54:21  34  ,clse-max12 cx12
06:54:21  35  ,clse-max14 cx14
06:54:21  36  ,clse-max16 cx16
06:54:21  37  ,clse-max18 cx18
06:54:21  38  -- Derive more attributes.
06:54:21  39  -- I want to use CORR() here to help SVM see the shape of the series.
06:54:21  40  -- But COVAR_POP is more stable:
06:54:21  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
06:54:21  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
06:54:21  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
06:54:21  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
06:54:21  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
06:54:21  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
06:54:21  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
06:54:21  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
06:54:21  49  -- Derive date related attributes:
06:54:21  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
06:54:21  51  ,0+TO_CHAR(ydate,'D')d
06:54:21  52  ,0+TO_CHAR(ydate,'W')w
06:54:21  53  -- mpm stands for minutes-past-midnight:
06:54:21  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
06:54:21  55  -- mph stands for minutes-past-hour:
06:54:21  56  ,0+TO_CHAR(ydate,'MI')mph
06:54:21  57  FROM svm6102
06:54:21  58  ORDER BY ydate
06:54:21  59  /

Table created.

Elapsed: 00:00:02.16
06:54:23 SQL> 
06:54:23 SQL> -- rpt
06:54:23 SQL> 
06:54:23 SQL> SELECT
06:54:23   2  pair
06:54:23   3  ,COUNT(pair)
06:54:23   4  ,MIN(clse),MAX(clse)
06:54:23   5  ,MIN(ydate),MAX(ydate)
06:54:23   6  FROM svm6122
06:54:23   7  GROUP BY pair
06:54:23   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19257	 80.25	   84.485 2010-09-30 06:55:01 2011-01-03 06:50:00

Elapsed: 00:00:00.07
06:54:23 SQL> 
06:54:23 SQL> -- Prepare for derivation of NTILE based params:
06:54:23 SQL> 
06:54:23 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.19
06:54:23 SQL> CREATE TABLE svm6142 COMPRESS AS
06:54:23   2  SELECT
06:54:23   3  pair
06:54:23   4  ,ydate
06:54:23   5  ,prdate
06:54:23   6  ,clse
06:54:23   7  ,g6
06:54:23   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
06:54:23   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
06:54:23  10  ,CASE WHEN trend IS NULL THEN 1
06:54:23  11  	    WHEN trend =0      THEN 1
06:54:23  12  	    ELSE trend END trend
06:54:23  13  ,cm4
06:54:23  14  ,cm6
06:54:23  15  ,cm8
06:54:23  16  ,cm10
06:54:23  17  ,cm12
06:54:23  18  ,cm14
06:54:23  19  ,cm16
06:54:23  20  ,cm18
06:54:23  21  --
06:54:23  22  ,ca4
06:54:23  23  ,ca6
06:54:23  24  ,ca8
06:54:23  25  ,ca10
06:54:23  26  ,ca12
06:54:23  27  ,ca14
06:54:23  28  ,ca16
06:54:23  29  ,ca18
06:54:23  30  --
06:54:23  31  ,cx4
06:54:23  32  ,cx6
06:54:23  33  ,cx8
06:54:23  34  ,cx10
06:54:23  35  ,cx12
06:54:23  36  ,cx14
06:54:23  37  ,cx16
06:54:23  38  ,cx18
06:54:23  39  --
06:54:23  40  ,crr4
06:54:23  41  ,crr6
06:54:23  42  ,crr8
06:54:23  43  ,crr10
06:54:23  44  ,crr12
06:54:23  45  ,crr14
06:54:23  46  ,crr16
06:54:23  47  ,crr18
06:54:23  48  --
06:54:23  49  ,hh
06:54:23  50  ,d
06:54:23  51  ,w
06:54:23  52  ,mpm
06:54:23  53  ,mph
06:54:23  54  FROM svm6122
06:54:23  55  ORDER BY ydate
06:54:23  56  /

Table created.

Elapsed: 00:00:00.36
06:54:23 SQL> 
06:54:23 SQL> -- rpt
06:54:23 SQL> 
06:54:23 SQL> SELECT
06:54:23   2  pair
06:54:23   3  ,trend
06:54:23   4  ,gatt
06:54:23   5  ,COUNT(pair)
06:54:23   6  ,AVG(g6)
06:54:23   7  FROM svm6142
06:54:23   8  GROUP BY pair,trend,gatt
06:54:23   9  ORDER BY pair,trend,gatt
06:54:23  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5190 -.16589977
usd_jpy 	-1 up	      4851 .164774629
usd_jpy 	-1		 3
usd_jpy 	 1 nup	      4976 -.15539309
usd_jpy 	 1 up	      4168 .165738147
usd_jpy 	 1		69

6 rows selected.

Elapsed: 00:00:00.05
06:54:24 SQL> 
06:54:24 SQL> 
06:54:24 SQL> -- Derive NTILE based params:
06:54:24 SQL> 
06:54:24 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
06:54:24 SQL> CREATE TABLE svm6162 COMPRESS AS
06:54:24   2  SELECT
06:54:24   3  pair
06:54:24   4  ,ydate
06:54:24   5  ,prdate
06:54:24   6  ,clse
06:54:24   7  ,g6
06:54:24   8  ,gatt
06:54:24   9  ,gattn
06:54:24  10  ,trend
06:54:24  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
06:54:24  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
06:54:24  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
06:54:24  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
06:54:24  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
06:54:24  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
06:54:24  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
06:54:24  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
06:54:24  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
06:54:24  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
06:54:24  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
06:54:24  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
06:54:24  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
06:54:24  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
06:54:24  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
06:54:24  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
06:54:24  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
06:54:24  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
06:54:24  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
06:54:24  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
06:54:24  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
06:54:24  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
06:54:24  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
06:54:24  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
06:54:24  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
06:54:24  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
06:54:24  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
06:54:24  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
06:54:24  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
06:54:24  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
06:54:24  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
06:54:24  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
06:54:24  43  ,hh  att32
06:54:24  44  ,d   att33
06:54:24  45  ,w   att34
06:54:24  46  ,mpm att35
06:54:24  47  ,mph att36
06:54:24  48  ,trend att37
06:54:24  49  FROM svm6142
06:54:24  50  ORDER BY ydate
06:54:24  51  /

Table created.

Elapsed: 00:00:04.75
06:54:28 SQL> 
06:54:28 SQL> -- rpt
06:54:28 SQL> 
06:54:28 SQL> SELECT
06:54:28   2  pair
06:54:28   3  ,trend
06:54:28   4  ,gatt
06:54:28   5  ,COUNT(pair)
06:54:28   6  ,AVG(g6)
06:54:28   7  FROM svm6162
06:54:28   8  GROUP BY pair,trend,gatt
06:54:28   9  ORDER BY pair,trend,gatt
06:54:28  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5190 -.16589977
usd_jpy 	-1 up	      4851 .164774629
usd_jpy 	-1		 3
usd_jpy 	 1 nup	      4976 -.15539309
usd_jpy 	 1 up	      4168 .165738147
usd_jpy 	 1		69

6 rows selected.

Elapsed: 00:00:00.02
06:54:28 SQL> 
06:54:28 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.21
06:54:29 SQL> CREATE TABLE modsrc COMPRESS AS
06:54:29   2  SELECT
06:54:29   3  pair
06:54:29   4  ,ydate
06:54:29   5  ,prdate
06:54:29   6  ,trend
06:54:29   7  ,g6
06:54:29   8  ,gatt
06:54:29   9  ,gattn
06:54:29  10  FROM svm6162
06:54:29  11  /

Table created.

Elapsed: 00:00:00.09
06:54:29 SQL> 
06:54:29 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
06:54:29 SQL> 
06:54:29 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
06:54:29 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
06:54:29   2  SELECT
06:54:29   3  ydate
06:54:29   4  ,trend jpy_trend
06:54:29   5  ,g6    jpy_g6
06:54:29   6  ,gatt  jpy_gatt
06:54:29   7  ,gattn jpy_gattn
06:54:29   8  FROM modsrc
06:54:29   9  /

Table created.

Elapsed: 00:00:00.08
06:54:29 SQL> 
06:54:29 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
06:54:29 SQL> 
06:54:29 SQL> -- I need a copy of the attributes:
06:54:29 SQL> 
06:54:29 SQL> 
06:54:29 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.05
06:54:29 SQL> CREATE TABLE jpy_att COMPRESS AS
06:54:29   2  SELECT
06:54:29   3  ydate
06:54:29   4  ,att00 jpy_att00
06:54:29   5  ,att01 jpy_att01
06:54:29   6  ,att02 jpy_att02
06:54:29   7  ,att03 jpy_att03
06:54:29   8  ,att04 jpy_att04
06:54:29   9  ,att05 jpy_att05
06:54:29  10  ,att06 jpy_att06
06:54:29  11  ,att07 jpy_att07
06:54:29  12  ,att08 jpy_att08
06:54:29  13  ,att09 jpy_att09
06:54:29  14  ,att10 jpy_att10
06:54:29  15  ,att11 jpy_att11
06:54:29  16  ,att12 jpy_att12
06:54:29  17  ,att13 jpy_att13
06:54:29  18  ,att14 jpy_att14
06:54:29  19  ,att15 jpy_att15
06:54:29  20  ,att16 jpy_att16
06:54:29  21  ,att17 jpy_att17
06:54:29  22  ,att18 jpy_att18
06:54:29  23  ,att19 jpy_att19
06:54:29  24  ,att20 jpy_att20
06:54:29  25  ,att21 jpy_att21
06:54:29  26  ,att22 jpy_att22
06:54:29  27  ,att23 jpy_att23
06:54:29  28  ,att24 jpy_att24
06:54:29  29  ,att25 jpy_att25
06:54:29  30  ,att26 jpy_att26
06:54:29  31  ,att27 jpy_att27
06:54:29  32  ,att28 jpy_att28
06:54:29  33  ,att29 jpy_att29
06:54:29  34  ,att30 jpy_att30
06:54:29  35  ,att31 jpy_att31
06:54:29  36  ,att32 jpy_att32
06:54:29  37  ,att33 jpy_att33
06:54:29  38  ,att34 jpy_att34
06:54:29  39  ,att35 jpy_att35
06:54:29  40  ,att36 jpy_att36
06:54:29  41  ,att37 jpy_att37
06:54:29  42  FROM svm6162
06:54:29  43  /

Table created.

Elapsed: 00:00:00.18
06:54:29 SQL> 
06:54:29 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.60
06:54:30 SQL> 
06:54:30 SQL> -- rpt
06:54:30 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19257

Elapsed: 00:00:00.90
06:54:31 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19257

Elapsed: 00:00:00.00
06:54:31 SQL> 
06:54:31 SQL> --
06:54:31 SQL> -- cad610.sql
06:54:31 SQL> --
06:54:31 SQL> 
06:54:31 SQL> -- Creates views and tables for backtesting a forex SVM strategy
06:54:31 SQL> 
06:54:31 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.42
06:54:31 SQL> 
06:54:31 SQL> -- I created di5min here:
06:54:31 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
06:54:31 SQL> 
06:54:31 SQL> CREATE OR REPLACE VIEW svm6102 AS
06:54:31   2  SELECT
06:54:31   3  pair
06:54:31   4  ,ydate
06:54:31   5  ,prdate
06:54:31   6  ,rownum rnum -- acts as t in my time-series
06:54:31   7  ,clse
06:54:31   8  -- Derive a bunch of attributes from clse, the latest price:
06:54:31   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
06:54:31  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
06:54:31  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
06:54:31  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
06:54:31  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
06:54:31  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
06:54:31  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
06:54:31  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
06:54:31  17  --
06:54:31  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
06:54:31  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
06:54:31  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
06:54:31  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
06:54:31  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
06:54:31  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
06:54:31  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
06:54:31  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
06:54:31  26  --
06:54:31  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
06:54:31  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
06:54:31  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
06:54:31  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
06:54:31  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
06:54:31  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
06:54:31  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
06:54:31  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
06:54:31  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
06:54:31  36  FROM di5min WHERE pair LIKE'%cad%'
06:54:31  37  AND ydate > sysdate - 95
06:54:31  38  ORDER BY ydate
06:54:31  39  /

View created.

Elapsed: 00:00:00.05
06:54:31 SQL> 
06:54:31 SQL> -- rpt
06:54:31 SQL> 
06:54:31 SQL> SELECT
06:54:31   2  pair
06:54:31   3  ,COUNT(pair)
06:54:31   4  ,MIN(clse),MAX(clse)
06:54:31   5  ,MIN(avg6),MAX(avg6)
06:54:31   6  ,MIN(ydate),MAX(ydate)
06:54:31   7  FROM svm6102
06:54:31   8  GROUP BY pair
06:54:31   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19256	.99165	   1.0355 .992934075   1.032875 2010-09-30 06:55:01 2011-01-03 06:45:00

Elapsed: 00:00:00.88
06:54:32 SQL> 
06:54:32 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
06:54:32 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.28
06:54:33 SQL> CREATE TABLE svm6122 COMPRESS AS
06:54:33   2  SELECT
06:54:33   3  pair
06:54:33   4  ,ydate
06:54:33   5  ,prdate
06:54:33   6  ,clse
06:54:33   7  -- g6 is important. I want to predict g6:
06:54:33   8  ,ld6 - clse g6
06:54:33   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
06:54:33  10  -- I want more attributes from the ones I derived above:
06:54:33  11  -- clse relation to moving-min
06:54:33  12  ,clse-min4  cm4
06:54:33  13  ,clse-min6  cm6
06:54:33  14  ,clse-min8  cm8
06:54:33  15  ,clse-min10 cm10
06:54:33  16  ,clse-min12 cm12
06:54:33  17  ,clse-min14 cm14
06:54:33  18  ,clse-min16 cm16
06:54:33  19  ,clse-min18 cm18
06:54:33  20  -- clse relation to moving-avg
06:54:33  21  ,clse-avg4  ca4
06:54:33  22  ,clse-avg6  ca6
06:54:33  23  ,clse-avg8  ca8
06:54:33  24  ,clse-avg10 ca10
06:54:33  25  ,clse-avg12 ca12
06:54:33  26  ,clse-avg14 ca14
06:54:33  27  ,clse-avg16 ca16
06:54:33  28  ,clse-avg18 ca18
06:54:33  29  -- clse relation to moving-max
06:54:33  30  ,clse-max4  cx4
06:54:33  31  ,clse-max6  cx6
06:54:33  32  ,clse-max8  cx8
06:54:33  33  ,clse-max10 cx10
06:54:33  34  ,clse-max12 cx12
06:54:33  35  ,clse-max14 cx14
06:54:33  36  ,clse-max16 cx16
06:54:33  37  ,clse-max18 cx18
06:54:33  38  -- Derive more attributes.
06:54:33  39  -- I want to use CORR() here to help SVM see the shape of the series.
06:54:33  40  -- But COVAR_POP is more stable:
06:54:33  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
06:54:33  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
06:54:33  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
06:54:33  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
06:54:33  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
06:54:33  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
06:54:33  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
06:54:33  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
06:54:33  49  -- Derive date related attributes:
06:54:33  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
06:54:33  51  ,0+TO_CHAR(ydate,'D')d
06:54:33  52  ,0+TO_CHAR(ydate,'W')w
06:54:33  53  -- mpm stands for minutes-past-midnight:
06:54:33  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
06:54:33  55  -- mph stands for minutes-past-hour:
06:54:33  56  ,0+TO_CHAR(ydate,'MI')mph
06:54:33  57  FROM svm6102
06:54:33  58  ORDER BY ydate
06:54:33  59  /

Table created.

Elapsed: 00:00:02.07
06:54:35 SQL> 
06:54:35 SQL> -- rpt
06:54:35 SQL> 
06:54:35 SQL> SELECT
06:54:35   2  pair
06:54:35   3  ,COUNT(pair)
06:54:35   4  ,MIN(clse),MAX(clse)
06:54:35   5  ,MIN(ydate),MAX(ydate)
06:54:35   6  FROM svm6122
06:54:35   7  GROUP BY pair
06:54:35   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19256	.99165	   1.0355 2010-09-30 06:55:01 2011-01-03 06:45:00

Elapsed: 00:00:00.04
06:54:35 SQL> 
06:54:35 SQL> -- Prepare for derivation of NTILE based params:
06:54:35 SQL> 
06:54:35 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.32
06:54:35 SQL> CREATE TABLE svm6142 COMPRESS AS
06:54:35   2  SELECT
06:54:35   3  pair
06:54:35   4  ,ydate
06:54:35   5  ,prdate
06:54:35   6  ,clse
06:54:35   7  ,g6
06:54:35   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
06:54:35   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
06:54:35  10  ,CASE WHEN trend IS NULL THEN 1
06:54:35  11  	    WHEN trend =0      THEN 1
06:54:35  12  	    ELSE trend END trend
06:54:35  13  ,cm4
06:54:35  14  ,cm6
06:54:35  15  ,cm8
06:54:35  16  ,cm10
06:54:35  17  ,cm12
06:54:35  18  ,cm14
06:54:35  19  ,cm16
06:54:35  20  ,cm18
06:54:35  21  --
06:54:35  22  ,ca4
06:54:35  23  ,ca6
06:54:35  24  ,ca8
06:54:35  25  ,ca10
06:54:35  26  ,ca12
06:54:35  27  ,ca14
06:54:35  28  ,ca16
06:54:35  29  ,ca18
06:54:35  30  --
06:54:35  31  ,cx4
06:54:35  32  ,cx6
06:54:35  33  ,cx8
06:54:35  34  ,cx10
06:54:35  35  ,cx12
06:54:35  36  ,cx14
06:54:35  37  ,cx16
06:54:35  38  ,cx18
06:54:35  39  --
06:54:35  40  ,crr4
06:54:35  41  ,crr6
06:54:35  42  ,crr8
06:54:35  43  ,crr10
06:54:35  44  ,crr12
06:54:35  45  ,crr14
06:54:35  46  ,crr16
06:54:35  47  ,crr18
06:54:35  48  --
06:54:35  49  ,hh
06:54:35  50  ,d
06:54:35  51  ,w
06:54:35  52  ,mpm
06:54:35  53  ,mph
06:54:35  54  FROM svm6122
06:54:35  55  ORDER BY ydate
06:54:35  56  /

Table created.

Elapsed: 00:00:00.36
06:54:35 SQL> 
06:54:35 SQL> -- rpt
06:54:35 SQL> 
06:54:35 SQL> SELECT
06:54:35   2  pair
06:54:35   3  ,trend
06:54:35   4  ,gatt
06:54:35   5  ,COUNT(pair)
06:54:35   6  ,AVG(g6)
06:54:35   7  FROM svm6142
06:54:35   8  GROUP BY pair,trend,gatt
06:54:35   9  ORDER BY pair,trend,gatt
06:54:35  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7324  -.0013171
usd_cad 	-1 up	      3000 .003056492
usd_cad 	-1		72
usd_cad 	 1 nup	      6555 -.00163017
usd_cad 	 1 up	      2305 .003653973

Elapsed: 00:00:00.04
06:54:35 SQL> 
06:54:35 SQL> 
06:54:35 SQL> -- Derive NTILE based params:
06:54:35 SQL> 
06:54:35 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.17
06:54:36 SQL> CREATE TABLE svm6162 COMPRESS AS
06:54:36   2  SELECT
06:54:36   3  pair
06:54:36   4  ,ydate
06:54:36   5  ,prdate
06:54:36   6  ,clse
06:54:36   7  ,g6
06:54:36   8  ,gatt
06:54:36   9  ,gattn
06:54:36  10  ,trend
06:54:36  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
06:54:36  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
06:54:36  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
06:54:36  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
06:54:36  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
06:54:36  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
06:54:36  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
06:54:36  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
06:54:36  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
06:54:36  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
06:54:36  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
06:54:36  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
06:54:36  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
06:54:36  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
06:54:36  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
06:54:36  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
06:54:36  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
06:54:36  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
06:54:36  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
06:54:36  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
06:54:36  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
06:54:36  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
06:54:36  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
06:54:36  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
06:54:36  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
06:54:36  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
06:54:36  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
06:54:36  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
06:54:36  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
06:54:36  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
06:54:36  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
06:54:36  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
06:54:36  43  ,hh  att32
06:54:36  44  ,d   att33
06:54:36  45  ,w   att34
06:54:36  46  ,mpm att35
06:54:36  47  ,mph att36
06:54:36  48  ,trend att37
06:54:36  49  FROM svm6142
06:54:36  50  ORDER BY ydate
06:54:36  51  /

Table created.

Elapsed: 00:00:04.65
06:54:40 SQL> 
06:54:40 SQL> -- rpt
06:54:40 SQL> 
06:54:40 SQL> SELECT
06:54:40   2  pair
06:54:40   3  ,trend
06:54:40   4  ,gatt
06:54:40   5  ,COUNT(pair)
06:54:40   6  ,AVG(g6)
06:54:40   7  FROM svm6162
06:54:40   8  GROUP BY pair,trend,gatt
06:54:40   9  ORDER BY pair,trend,gatt
06:54:40  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7324  -.0013171
usd_cad 	-1 up	      3000 .003056492
usd_cad 	-1		72
usd_cad 	 1 nup	      6555 -.00163017
usd_cad 	 1 up	      2305 .003653973

Elapsed: 00:00:00.06
06:54:40 SQL> 
06:54:40 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
06:54:40 SQL> CREATE TABLE modsrc COMPRESS AS
06:54:40   2  SELECT
06:54:40   3  pair
06:54:40   4  ,ydate
06:54:40   5  ,prdate
06:54:40   6  ,trend
06:54:40   7  ,g6
06:54:40   8  ,gatt
06:54:40   9  ,gattn
06:54:40  10  FROM svm6162
06:54:40  11  /

Table created.

Elapsed: 00:00:00.08
06:54:41 SQL> 
06:54:41 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
06:54:41 SQL> 
06:54:41 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.14
06:54:41 SQL> CREATE TABLE cad_ms610 COMPRESS AS
06:54:41   2  SELECT
06:54:41   3  ydate
06:54:41   4  ,trend cad_trend
06:54:41   5  ,g6    cad_g6
06:54:41   6  ,gatt  cad_gatt
06:54:41   7  ,gattn cad_gattn
06:54:41   8  FROM modsrc
06:54:41   9  /

Table created.

Elapsed: 00:00:00.07
06:54:41 SQL> 
06:54:41 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.14
06:54:41 SQL> 
06:54:41 SQL> -- I need a copy of the attributes:
06:54:41 SQL> 
06:54:41 SQL> 
06:54:41 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.05
06:54:41 SQL> CREATE TABLE cad_att COMPRESS AS
06:54:41   2  SELECT
06:54:41   3  ydate
06:54:41   4  ,att00 cad_att00
06:54:41   5  ,att01 cad_att01
06:54:41   6  ,att02 cad_att02
06:54:41   7  ,att03 cad_att03
06:54:41   8  ,att04 cad_att04
06:54:41   9  ,att05 cad_att05
06:54:41  10  ,att06 cad_att06
06:54:41  11  ,att07 cad_att07
06:54:41  12  ,att08 cad_att08
06:54:41  13  ,att09 cad_att09
06:54:41  14  ,att10 cad_att10
06:54:41  15  ,att11 cad_att11
06:54:41  16  ,att12 cad_att12
06:54:41  17  ,att13 cad_att13
06:54:41  18  ,att14 cad_att14
06:54:41  19  ,att15 cad_att15
06:54:41  20  ,att16 cad_att16
06:54:41  21  ,att17 cad_att17
06:54:41  22  ,att18 cad_att18
06:54:41  23  ,att19 cad_att19
06:54:41  24  ,att20 cad_att20
06:54:41  25  ,att21 cad_att21
06:54:41  26  ,att22 cad_att22
06:54:41  27  ,att23 cad_att23
06:54:41  28  ,att24 cad_att24
06:54:41  29  ,att25 cad_att25
06:54:41  30  ,att26 cad_att26
06:54:41  31  ,att27 cad_att27
06:54:41  32  ,att28 cad_att28
06:54:41  33  ,att29 cad_att29
06:54:41  34  ,att30 cad_att30
06:54:41  35  ,att31 cad_att31
06:54:41  36  ,att32 cad_att32
06:54:41  37  ,att33 cad_att33
06:54:41  38  ,att34 cad_att34
06:54:41  39  ,att35 cad_att35
06:54:41  40  ,att36 cad_att36
06:54:41  41  ,att37 cad_att37
06:54:41  42  FROM svm6162
06:54:41  43  /

Table created.

Elapsed: 00:00:00.18
06:54:41 SQL> 
06:54:41 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
06:54:42 SQL> 
06:54:42 SQL> -- rpt
06:54:42 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.85
06:54:43 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.00
06:54:43 SQL> 
06:54:43 SQL> --
06:54:43 SQL> -- chf610.sql
06:54:43 SQL> --
06:54:43 SQL> 
06:54:43 SQL> -- Creates views and tables for backtesting a forex SVM strategy
06:54:43 SQL> 
06:54:43 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.55
06:54:43 SQL> 
06:54:43 SQL> -- I created di5min here:
06:54:43 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
06:54:43 SQL> 
06:54:43 SQL> CREATE OR REPLACE VIEW svm6102 AS
06:54:43   2  SELECT
06:54:43   3  pair
06:54:43   4  ,ydate
06:54:43   5  ,prdate
06:54:43   6  ,rownum rnum -- acts as t in my time-series
06:54:43   7  ,clse
06:54:43   8  -- Derive a bunch of attributes from clse, the latest price:
06:54:43   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
06:54:43  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
06:54:43  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
06:54:43  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
06:54:43  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
06:54:43  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
06:54:43  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
06:54:43  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
06:54:43  17  --
06:54:43  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
06:54:43  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
06:54:43  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
06:54:43  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
06:54:43  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
06:54:43  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
06:54:43  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
06:54:43  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
06:54:43  26  --
06:54:43  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
06:54:43  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
06:54:43  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
06:54:43  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
06:54:43  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
06:54:43  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
06:54:43  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
06:54:43  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
06:54:43  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
06:54:43  36  FROM di5min WHERE pair LIKE'%chf%'
06:54:43  37  AND ydate > sysdate - 95
06:54:43  38  ORDER BY ydate
06:54:43  39  /

View created.

Elapsed: 00:00:00.05
06:54:43 SQL> 
06:54:43 SQL> -- rpt
06:54:43 SQL> 
06:54:43 SQL> SELECT
06:54:43   2  pair
06:54:43   3  ,COUNT(pair)
06:54:43   4  ,MIN(clse),MAX(clse)
06:54:43   5  ,MIN(avg6),MAX(avg6)
06:54:43   6  ,MIN(ydate),MAX(ydate)
06:54:43   7  FROM svm6102
06:54:43   8  GROUP BY pair
06:54:43   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19259    .931675	  1.00635 .933969692 1.00498151 2010-09-30 06:55:01 2011-01-03 06:45:00

Elapsed: 00:00:00.88
06:54:44 SQL> 
06:54:44 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
06:54:44 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
06:54:44 SQL> CREATE TABLE svm6122 COMPRESS AS
06:54:44   2  SELECT
06:54:44   3  pair
06:54:44   4  ,ydate
06:54:44   5  ,prdate
06:54:44   6  ,clse
06:54:44   7  -- g6 is important. I want to predict g6:
06:54:44   8  ,ld6 - clse g6
06:54:44   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
06:54:44  10  -- I want more attributes from the ones I derived above:
06:54:44  11  -- clse relation to moving-min
06:54:44  12  ,clse-min4  cm4
06:54:44  13  ,clse-min6  cm6
06:54:44  14  ,clse-min8  cm8
06:54:44  15  ,clse-min10 cm10
06:54:44  16  ,clse-min12 cm12
06:54:44  17  ,clse-min14 cm14
06:54:44  18  ,clse-min16 cm16
06:54:44  19  ,clse-min18 cm18
06:54:44  20  -- clse relation to moving-avg
06:54:44  21  ,clse-avg4  ca4
06:54:44  22  ,clse-avg6  ca6
06:54:44  23  ,clse-avg8  ca8
06:54:44  24  ,clse-avg10 ca10
06:54:44  25  ,clse-avg12 ca12
06:54:44  26  ,clse-avg14 ca14
06:54:44  27  ,clse-avg16 ca16
06:54:44  28  ,clse-avg18 ca18
06:54:44  29  -- clse relation to moving-max
06:54:44  30  ,clse-max4  cx4
06:54:44  31  ,clse-max6  cx6
06:54:44  32  ,clse-max8  cx8
06:54:44  33  ,clse-max10 cx10
06:54:44  34  ,clse-max12 cx12
06:54:44  35  ,clse-max14 cx14
06:54:44  36  ,clse-max16 cx16
06:54:44  37  ,clse-max18 cx18
06:54:44  38  -- Derive more attributes.
06:54:44  39  -- I want to use CORR() here to help SVM see the shape of the series.
06:54:44  40  -- But COVAR_POP is more stable:
06:54:44  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
06:54:44  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
06:54:44  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
06:54:44  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
06:54:44  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
06:54:44  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
06:54:44  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
06:54:44  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
06:54:44  49  -- Derive date related attributes:
06:54:44  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
06:54:44  51  ,0+TO_CHAR(ydate,'D')d
06:54:44  52  ,0+TO_CHAR(ydate,'W')w
06:54:44  53  -- mpm stands for minutes-past-midnight:
06:54:44  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
06:54:44  55  -- mph stands for minutes-past-hour:
06:54:44  56  ,0+TO_CHAR(ydate,'MI')mph
06:54:44  57  FROM svm6102
06:54:44  58  ORDER BY ydate
06:54:44  59  /

Table created.

Elapsed: 00:00:02.03
06:54:46 SQL> 
06:54:46 SQL> -- rpt
06:54:46 SQL> 
06:54:46 SQL> SELECT
06:54:46   2  pair
06:54:46   3  ,COUNT(pair)
06:54:46   4  ,MIN(clse),MAX(clse)
06:54:46   5  ,MIN(ydate),MAX(ydate)
06:54:46   6  FROM svm6122
06:54:46   7  GROUP BY pair
06:54:46   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19259    .931675	  1.00635 2010-09-30 06:55:01 2011-01-03 06:45:00

Elapsed: 00:00:00.05
06:54:46 SQL> 
06:54:46 SQL> -- Prepare for derivation of NTILE based params:
06:54:46 SQL> 
06:54:46 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.32
06:54:47 SQL> CREATE TABLE svm6142 COMPRESS AS
06:54:47   2  SELECT
06:54:47   3  pair
06:54:47   4  ,ydate
06:54:47   5  ,prdate
06:54:47   6  ,clse
06:54:47   7  ,g6
06:54:47   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
06:54:47   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
06:54:47  10  ,CASE WHEN trend IS NULL THEN 1
06:54:47  11  	    WHEN trend =0      THEN 1
06:54:47  12  	    ELSE trend END trend
06:54:47  13  ,cm4
06:54:47  14  ,cm6
06:54:47  15  ,cm8
06:54:47  16  ,cm10
06:54:47  17  ,cm12
06:54:47  18  ,cm14
06:54:47  19  ,cm16
06:54:47  20  ,cm18
06:54:47  21  --
06:54:47  22  ,ca4
06:54:47  23  ,ca6
06:54:47  24  ,ca8
06:54:47  25  ,ca10
06:54:47  26  ,ca12
06:54:47  27  ,ca14
06:54:47  28  ,ca16
06:54:47  29  ,ca18
06:54:47  30  --
06:54:47  31  ,cx4
06:54:47  32  ,cx6
06:54:47  33  ,cx8
06:54:47  34  ,cx10
06:54:47  35  ,cx12
06:54:47  36  ,cx14
06:54:47  37  ,cx16
06:54:47  38  ,cx18
06:54:47  39  --
06:54:47  40  ,crr4
06:54:47  41  ,crr6
06:54:47  42  ,crr8
06:54:47  43  ,crr10
06:54:47  44  ,crr12
06:54:47  45  ,crr14
06:54:47  46  ,crr16
06:54:47  47  ,crr18
06:54:47  48  --
06:54:47  49  ,hh
06:54:47  50  ,d
06:54:47  51  ,w
06:54:47  52  ,mpm
06:54:47  53  ,mph
06:54:47  54  FROM svm6122
06:54:47  55  ORDER BY ydate
06:54:47  56  /

Table created.

Elapsed: 00:00:00.37
06:54:47 SQL> 
06:54:47 SQL> -- rpt
06:54:47 SQL> 
06:54:47 SQL> SELECT
06:54:47   2  pair
06:54:47   3  ,trend
06:54:47   4  ,gatt
06:54:47   5  ,COUNT(pair)
06:54:47   6  ,AVG(g6)
06:54:47   7  FROM svm6142
06:54:47   8  GROUP BY pair,trend,gatt
06:54:47   9  ORDER BY pair,trend,gatt
06:54:47  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7213 -.00199921
usd_chf 	-1 up	      3104 .003938503
usd_chf 	-1		 3
usd_chf 	 1 nup	      6307 -.00159728
usd_chf 	 1 up	      2563 .003691147
usd_chf 	 1		69

6 rows selected.

Elapsed: 00:00:00.04
06:54:47 SQL> 
06:54:47 SQL> 
06:54:47 SQL> -- Derive NTILE based params:
06:54:47 SQL> 
06:54:47 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
06:54:47 SQL> CREATE TABLE svm6162 COMPRESS AS
06:54:47   2  SELECT
06:54:47   3  pair
06:54:47   4  ,ydate
06:54:47   5  ,prdate
06:54:47   6  ,clse
06:54:47   7  ,g6
06:54:47   8  ,gatt
06:54:47   9  ,gattn
06:54:47  10  ,trend
06:54:47  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
06:54:47  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
06:54:47  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
06:54:47  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
06:54:47  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
06:54:47  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
06:54:47  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
06:54:47  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
06:54:47  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
06:54:47  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
06:54:47  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
06:54:47  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
06:54:47  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
06:54:47  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
06:54:47  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
06:54:47  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
06:54:47  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
06:54:47  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
06:54:47  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
06:54:47  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
06:54:47  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
06:54:47  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
06:54:47  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
06:54:47  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
06:54:47  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
06:54:47  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
06:54:47  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
06:54:47  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
06:54:47  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
06:54:47  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
06:54:47  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
06:54:47  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
06:54:47  43  ,hh  att32
06:54:47  44  ,d   att33
06:54:47  45  ,w   att34
06:54:47  46  ,mpm att35
06:54:47  47  ,mph att36
06:54:47  48  ,trend att37
06:54:47  49  FROM svm6142
06:54:47  50  ORDER BY ydate
06:54:47  51  /

Table created.

Elapsed: 00:00:04.71
06:54:52 SQL> 
06:54:52 SQL> -- rpt
06:54:52 SQL> 
06:54:52 SQL> SELECT
06:54:52   2  pair
06:54:52   3  ,trend
06:54:52   4  ,gatt
06:54:52   5  ,COUNT(pair)
06:54:52   6  ,AVG(g6)
06:54:52   7  FROM svm6162
06:54:52   8  GROUP BY pair,trend,gatt
06:54:52   9  ORDER BY pair,trend,gatt
06:54:52  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7213 -.00199921
usd_chf 	-1 up	      3104 .003938503
usd_chf 	-1		 3
usd_chf 	 1 nup	      6307 -.00159728
usd_chf 	 1 up	      2563 .003691147
usd_chf 	 1		69

6 rows selected.

Elapsed: 00:00:00.03
06:54:52 SQL> 
06:54:52 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.20
06:54:52 SQL> CREATE TABLE modsrc COMPRESS AS
06:54:52   2  SELECT
06:54:52   3  pair
06:54:52   4  ,ydate
06:54:52   5  ,prdate
06:54:52   6  ,trend
06:54:52   7  ,g6
06:54:52   8  ,gatt
06:54:52   9  ,gattn
06:54:52  10  FROM svm6162
06:54:52  11  /

Table created.

Elapsed: 00:00:00.10
06:54:52 SQL> 
06:54:52 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
06:54:53 SQL> 
06:54:53 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
06:54:53 SQL> CREATE TABLE chf_ms610 COMPRESS AS
06:54:53   2  SELECT
06:54:53   3  ydate
06:54:53   4  ,trend chf_trend
06:54:53   5  ,g6    chf_g6
06:54:53   6  ,gatt  chf_gatt
06:54:53   7  ,gattn chf_gattn
06:54:53   8  FROM modsrc
06:54:53   9  /

Table created.

Elapsed: 00:00:00.06
06:54:53 SQL> 
06:54:53 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
06:54:53 SQL> 
06:54:53 SQL> -- I need a copy of the attributes:
06:54:53 SQL> 
06:54:53 SQL> 
06:54:53 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.04
06:54:53 SQL> CREATE TABLE chf_att COMPRESS AS
06:54:53   2  SELECT
06:54:53   3  ydate
06:54:53   4  ,att00 chf_att00
06:54:53   5  ,att01 chf_att01
06:54:53   6  ,att02 chf_att02
06:54:53   7  ,att03 chf_att03
06:54:53   8  ,att04 chf_att04
06:54:53   9  ,att05 chf_att05
06:54:53  10  ,att06 chf_att06
06:54:53  11  ,att07 chf_att07
06:54:53  12  ,att08 chf_att08
06:54:53  13  ,att09 chf_att09
06:54:53  14  ,att10 chf_att10
06:54:53  15  ,att11 chf_att11
06:54:53  16  ,att12 chf_att12
06:54:53  17  ,att13 chf_att13
06:54:53  18  ,att14 chf_att14
06:54:53  19  ,att15 chf_att15
06:54:53  20  ,att16 chf_att16
06:54:53  21  ,att17 chf_att17
06:54:53  22  ,att18 chf_att18
06:54:53  23  ,att19 chf_att19
06:54:53  24  ,att20 chf_att20
06:54:53  25  ,att21 chf_att21
06:54:53  26  ,att22 chf_att22
06:54:53  27  ,att23 chf_att23
06:54:53  28  ,att24 chf_att24
06:54:53  29  ,att25 chf_att25
06:54:53  30  ,att26 chf_att26
06:54:53  31  ,att27 chf_att27
06:54:53  32  ,att28 chf_att28
06:54:53  33  ,att29 chf_att29
06:54:53  34  ,att30 chf_att30
06:54:53  35  ,att31 chf_att31
06:54:53  36  ,att32 chf_att32
06:54:53  37  ,att33 chf_att33
06:54:53  38  ,att34 chf_att34
06:54:53  39  ,att35 chf_att35
06:54:53  40  ,att36 chf_att36
06:54:53  41  ,att37 chf_att37
06:54:53  42  FROM svm6162
06:54:53  43  /

Table created.

Elapsed: 00:00:00.19
06:54:53 SQL> 
06:54:53 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.50
06:54:54 SQL> 
06:54:54 SQL> -- rpt
06:54:54 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.84
06:54:54 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.00
06:54:54 SQL> 
06:54:54 SQL> --
06:54:54 SQL> -- ech610.sql
06:54:54 SQL> --
06:54:54 SQL> 
06:54:54 SQL> -- Creates views and tables for backtesting a forex SVM strategy
06:54:54 SQL> 
06:54:54 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.42
06:54:55 SQL> 
06:54:55 SQL> -- I created di5min here:
06:54:55 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
06:54:55 SQL> 
06:54:55 SQL> CREATE OR REPLACE VIEW svm6102 AS
06:54:55   2  SELECT
06:54:55   3  pair
06:54:55   4  ,ydate
06:54:55   5  ,prdate
06:54:55   6  ,rownum rnum -- acts as t in my time-series
06:54:55   7  ,clse
06:54:55   8  -- Derive a bunch of attributes from clse, the latest price:
06:54:55   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
06:54:55  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
06:54:55  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
06:54:55  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
06:54:55  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
06:54:55  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
06:54:55  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
06:54:55  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
06:54:55  17  --
06:54:55  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
06:54:55  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
06:54:55  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
06:54:55  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
06:54:55  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
06:54:55  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
06:54:55  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
06:54:55  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
06:54:55  26  --
06:54:55  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
06:54:55  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
06:54:55  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
06:54:55  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
06:54:55  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
06:54:55  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
06:54:55  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
06:54:55  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
06:54:55  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
06:54:55  36  FROM di5min WHERE pair LIKE'%ech%'
06:54:55  37  AND ydate > sysdate - 95
06:54:55  38  ORDER BY ydate
06:54:55  39  /

View created.

Elapsed: 00:00:00.05
06:54:55 SQL> 
06:54:55 SQL> -- rpt
06:54:55 SQL> 
06:54:55 SQL> SELECT
06:54:55   2  pair
06:54:55   3  ,COUNT(pair)
06:54:55   4  ,MIN(clse),MAX(clse)
06:54:55   5  ,MIN(avg6),MAX(avg6)
06:54:55   6  ,MIN(ydate),MAX(ydate)
06:54:55   7  FROM svm6102
06:54:55   8  GROUP BY pair
06:54:55   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19258 1.24213032 1.38284305 1.24320711 1.37986485 2010-09-30 06:55:01 2011-01-03 06:45:00

Elapsed: 00:00:00.79
06:54:56 SQL> 
06:54:56 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
06:54:56 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.20
06:54:56 SQL> CREATE TABLE svm6122 COMPRESS AS
06:54:56   2  SELECT
06:54:56   3  pair
06:54:56   4  ,ydate
06:54:56   5  ,prdate
06:54:56   6  ,clse
06:54:56   7  -- g6 is important. I want to predict g6:
06:54:56   8  ,ld6 - clse g6
06:54:56   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
06:54:56  10  -- I want more attributes from the ones I derived above:
06:54:56  11  -- clse relation to moving-min
06:54:56  12  ,clse-min4  cm4
06:54:56  13  ,clse-min6  cm6
06:54:56  14  ,clse-min8  cm8
06:54:56  15  ,clse-min10 cm10
06:54:56  16  ,clse-min12 cm12
06:54:56  17  ,clse-min14 cm14
06:54:56  18  ,clse-min16 cm16
06:54:56  19  ,clse-min18 cm18
06:54:56  20  -- clse relation to moving-avg
06:54:56  21  ,clse-avg4  ca4
06:54:56  22  ,clse-avg6  ca6
06:54:56  23  ,clse-avg8  ca8
06:54:56  24  ,clse-avg10 ca10
06:54:56  25  ,clse-avg12 ca12
06:54:56  26  ,clse-avg14 ca14
06:54:56  27  ,clse-avg16 ca16
06:54:56  28  ,clse-avg18 ca18
06:54:56  29  -- clse relation to moving-max
06:54:56  30  ,clse-max4  cx4
06:54:56  31  ,clse-max6  cx6
06:54:56  32  ,clse-max8  cx8
06:54:56  33  ,clse-max10 cx10
06:54:56  34  ,clse-max12 cx12
06:54:56  35  ,clse-max14 cx14
06:54:56  36  ,clse-max16 cx16
06:54:56  37  ,clse-max18 cx18
06:54:56  38  -- Derive more attributes.
06:54:56  39  -- I want to use CORR() here to help SVM see the shape of the series.
06:54:56  40  -- But COVAR_POP is more stable:
06:54:56  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
06:54:56  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
06:54:56  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
06:54:56  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
06:54:56  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
06:54:56  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
06:54:56  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
06:54:56  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
06:54:56  49  -- Derive date related attributes:
06:54:56  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
06:54:56  51  ,0+TO_CHAR(ydate,'D')d
06:54:56  52  ,0+TO_CHAR(ydate,'W')w
06:54:56  53  -- mpm stands for minutes-past-midnight:
06:54:56  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
06:54:56  55  -- mph stands for minutes-past-hour:
06:54:56  56  ,0+TO_CHAR(ydate,'MI')mph
06:54:56  57  FROM svm6102
06:54:56  58  ORDER BY ydate
06:54:56  59  /

Table created.

Elapsed: 00:00:02.03
06:54:58 SQL> 
06:54:58 SQL> -- rpt
06:54:58 SQL> 
06:54:58 SQL> SELECT
06:54:58   2  pair
06:54:58   3  ,COUNT(pair)
06:54:58   4  ,MIN(clse),MAX(clse)
06:54:58   5  ,MIN(ydate),MAX(ydate)
06:54:58   6  FROM svm6122
06:54:58   7  GROUP BY pair
06:54:58   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19258 1.24213032 1.38284305 2010-09-30 06:55:01 2011-01-03 06:45:00

Elapsed: 00:00:00.06
06:54:58 SQL> 
06:54:58 SQL> -- Prepare for derivation of NTILE based params:
06:54:58 SQL> 
06:54:58 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.17
06:54:58 SQL> CREATE TABLE svm6142 COMPRESS AS
06:54:58   2  SELECT
06:54:58   3  pair
06:54:58   4  ,ydate
06:54:58   5  ,prdate
06:54:58   6  ,clse
06:54:58   7  ,g6
06:54:58   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
06:54:58   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
06:54:58  10  ,CASE WHEN trend IS NULL THEN 1
06:54:58  11  	    WHEN trend =0      THEN 1
06:54:58  12  	    ELSE trend END trend
06:54:58  13  ,cm4
06:54:58  14  ,cm6
06:54:58  15  ,cm8
06:54:58  16  ,cm10
06:54:58  17  ,cm12
06:54:58  18  ,cm14
06:54:58  19  ,cm16
06:54:58  20  ,cm18
06:54:58  21  --
06:54:58  22  ,ca4
06:54:58  23  ,ca6
06:54:58  24  ,ca8
06:54:58  25  ,ca10
06:54:58  26  ,ca12
06:54:58  27  ,ca14
06:54:58  28  ,ca16
06:54:58  29  ,ca18
06:54:58  30  --
06:54:58  31  ,cx4
06:54:58  32  ,cx6
06:54:58  33  ,cx8
06:54:58  34  ,cx10
06:54:58  35  ,cx12
06:54:58  36  ,cx14
06:54:58  37  ,cx16
06:54:58  38  ,cx18
06:54:58  39  --
06:54:58  40  ,crr4
06:54:58  41  ,crr6
06:54:58  42  ,crr8
06:54:58  43  ,crr10
06:54:58  44  ,crr12
06:54:58  45  ,crr14
06:54:58  46  ,crr16
06:54:58  47  ,crr18
06:54:58  48  --
06:54:58  49  ,hh
06:54:58  50  ,d
06:54:58  51  ,w
06:54:58  52  ,mpm
06:54:58  53  ,mph
06:54:58  54  FROM svm6122
06:54:58  55  ORDER BY ydate
06:54:58  56  /

Table created.

Elapsed: 00:00:00.40
06:54:59 SQL> 
06:54:59 SQL> -- rpt
06:54:59 SQL> 
06:54:59 SQL> SELECT
06:54:59   2  pair
06:54:59   3  ,trend
06:54:59   4  ,gatt
06:54:59   5  ,COUNT(pair)
06:54:59   6  ,AVG(g6)
06:54:59   7  FROM svm6142
06:54:59   8  GROUP BY pair,trend,gatt
06:54:59   9  ORDER BY pair,trend,gatt
06:54:59  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6501 -.00225428
ech_usd 	-1 up	      3522 .003577522
ech_usd 	-1		72
ech_usd 	 1 nup	      6314  -.0023838
ech_usd 	 1 up	      2849 .003846932

Elapsed: 00:00:00.05
06:54:59 SQL> 
06:54:59 SQL> 
06:54:59 SQL> -- Derive NTILE based params:
06:54:59 SQL> 
06:54:59 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
06:54:59 SQL> CREATE TABLE svm6162 COMPRESS AS
06:54:59   2  SELECT
06:54:59   3  pair
06:54:59   4  ,ydate
06:54:59   5  ,prdate
06:54:59   6  ,clse
06:54:59   7  ,g6
06:54:59   8  ,gatt
06:54:59   9  ,gattn
06:54:59  10  ,trend
06:54:59  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
06:54:59  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
06:54:59  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
06:54:59  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
06:54:59  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
06:54:59  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
06:54:59  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
06:54:59  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
06:54:59  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
06:54:59  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
06:54:59  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
06:54:59  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
06:54:59  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
06:54:59  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
06:54:59  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
06:54:59  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
06:54:59  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
06:54:59  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
06:54:59  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
06:54:59  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
06:54:59  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
06:54:59  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
06:54:59  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
06:54:59  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
06:54:59  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
06:54:59  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
06:54:59  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
06:54:59  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
06:54:59  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
06:54:59  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
06:54:59  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
06:54:59  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
06:54:59  43  ,hh  att32
06:54:59  44  ,d   att33
06:54:59  45  ,w   att34
06:54:59  46  ,mpm att35
06:54:59  47  ,mph att36
06:54:59  48  ,trend att37
06:54:59  49  FROM svm6142
06:54:59  50  ORDER BY ydate
06:54:59  51  /

Table created.

Elapsed: 00:00:04.76
06:55:04 SQL> 
06:55:04 SQL> -- rpt
06:55:04 SQL> 
06:55:04 SQL> SELECT
06:55:04   2  pair
06:55:04   3  ,trend
06:55:04   4  ,gatt
06:55:04   5  ,COUNT(pair)
06:55:04   6  ,AVG(g6)
06:55:04   7  FROM svm6162
06:55:04   8  GROUP BY pair,trend,gatt
06:55:04   9  ORDER BY pair,trend,gatt
06:55:04  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6501 -.00225428
ech_usd 	-1 up	      3522 .003577522
ech_usd 	-1		72
ech_usd 	 1 nup	      6314  -.0023838
ech_usd 	 1 up	      2849 .003846932

Elapsed: 00:00:00.02
06:55:04 SQL> 
06:55:04 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.19
06:55:04 SQL> CREATE TABLE modsrc COMPRESS AS
06:55:04   2  SELECT
06:55:04   3  pair
06:55:04   4  ,ydate
06:55:04   5  ,prdate
06:55:04   6  ,trend
06:55:04   7  ,g6
06:55:04   8  ,gatt
06:55:04   9  ,gattn
06:55:04  10  FROM svm6162
06:55:04  11  /

Table created.

Elapsed: 00:00:00.08
06:55:04 SQL> 
06:55:04 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.28
06:55:04 SQL> 
06:55:04 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.13
06:55:04 SQL> CREATE TABLE ech_ms610 COMPRESS AS
06:55:04   2  SELECT
06:55:04   3  ydate
06:55:04   4  ,trend ech_trend
06:55:04   5  ,g6    ech_g6
06:55:04   6  ,gatt  ech_gatt
06:55:04   7  ,gattn ech_gattn
06:55:04   8  FROM modsrc
06:55:04   9  /

Table created.

Elapsed: 00:00:00.07
06:55:04 SQL> 
06:55:04 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
06:55:05 SQL> 
06:55:05 SQL> -- I need a copy of the attributes:
06:55:05 SQL> 
06:55:05 SQL> 
06:55:05 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.05
06:55:05 SQL> CREATE TABLE ech_att COMPRESS AS
06:55:05   2  SELECT
06:55:05   3  ydate
06:55:05   4  ,att00 ech_att00
06:55:05   5  ,att01 ech_att01
06:55:05   6  ,att02 ech_att02
06:55:05   7  ,att03 ech_att03
06:55:05   8  ,att04 ech_att04
06:55:05   9  ,att05 ech_att05
06:55:05  10  ,att06 ech_att06
06:55:05  11  ,att07 ech_att07
06:55:05  12  ,att08 ech_att08
06:55:05  13  ,att09 ech_att09
06:55:05  14  ,att10 ech_att10
06:55:05  15  ,att11 ech_att11
06:55:05  16  ,att12 ech_att12
06:55:05  17  ,att13 ech_att13
06:55:05  18  ,att14 ech_att14
06:55:05  19  ,att15 ech_att15
06:55:05  20  ,att16 ech_att16
06:55:05  21  ,att17 ech_att17
06:55:05  22  ,att18 ech_att18
06:55:05  23  ,att19 ech_att19
06:55:05  24  ,att20 ech_att20
06:55:05  25  ,att21 ech_att21
06:55:05  26  ,att22 ech_att22
06:55:05  27  ,att23 ech_att23
06:55:05  28  ,att24 ech_att24
06:55:05  29  ,att25 ech_att25
06:55:05  30  ,att26 ech_att26
06:55:05  31  ,att27 ech_att27
06:55:05  32  ,att28 ech_att28
06:55:05  33  ,att29 ech_att29
06:55:05  34  ,att30 ech_att30
06:55:05  35  ,att31 ech_att31
06:55:05  36  ,att32 ech_att32
06:55:05  37  ,att33 ech_att33
06:55:05  38  ,att34 ech_att34
06:55:05  39  ,att35 ech_att35
06:55:05  40  ,att36 ech_att36
06:55:05  41  ,att37 ech_att37
06:55:05  42  FROM svm6162
06:55:05  43  /

Table created.

Elapsed: 00:00:00.18
06:55:05 SQL> 
06:55:05 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
06:55:05 SQL> 
06:55:05 SQL> -- rpt
06:55:05 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19257

Elapsed: 00:00:00.79
06:55:06 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19258

Elapsed: 00:00:00.00
06:55:06 SQL> 
06:55:06 SQL> --
06:55:06 SQL> -- egb610.sql
06:55:06 SQL> --
06:55:06 SQL> 
06:55:06 SQL> -- Creates views and tables for backtesting a forex SVM strategy
06:55:06 SQL> 
06:55:06 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.60
06:55:07 SQL> 
06:55:07 SQL> -- I created di5min here:
06:55:07 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
06:55:07 SQL> 
06:55:07 SQL> CREATE OR REPLACE VIEW svm6102 AS
06:55:07   2  SELECT
06:55:07   3  pair
06:55:07   4  ,ydate
06:55:07   5  ,prdate
06:55:07   6  ,rownum rnum -- acts as t in my time-series
06:55:07   7  ,clse
06:55:07   8  -- Derive a bunch of attributes from clse, the latest price:
06:55:07   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
06:55:07  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
06:55:07  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
06:55:07  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
06:55:07  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
06:55:07  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
06:55:07  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
06:55:07  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
06:55:07  17  --
06:55:07  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
06:55:07  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
06:55:07  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
06:55:07  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
06:55:07  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
06:55:07  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
06:55:07  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
06:55:07  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
06:55:07  26  --
06:55:07  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
06:55:07  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
06:55:07  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
06:55:07  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
06:55:07  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
06:55:07  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
06:55:07  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
06:55:07  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
06:55:07  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
06:55:07  36  FROM di5min WHERE pair LIKE'%egb%'
06:55:07  37  AND ydate > sysdate - 95
06:55:07  38  ORDER BY ydate
06:55:07  39  /

View created.

Elapsed: 00:00:00.05
06:55:07 SQL> 
06:55:07 SQL> -- rpt
06:55:07 SQL> 
06:55:07 SQL> SELECT
06:55:07   2  pair
06:55:07   3  ,COUNT(pair)
06:55:07   4  ,MIN(clse),MAX(clse)
06:55:07   5  ,MIN(avg6),MAX(avg6)
06:55:07   6  ,MIN(ydate),MAX(ydate)
06:55:07   7  FROM svm6102
06:55:07   8  GROUP BY pair
06:55:07   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19256 .833520557 .893920122 .834199029 .892400287 2010-09-30 07:00:01 2011-01-03 06:45:00

Elapsed: 00:00:00.94
06:55:08 SQL> 
06:55:08 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
06:55:08 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.16
06:55:08 SQL> CREATE TABLE svm6122 COMPRESS AS
06:55:08   2  SELECT
06:55:08   3  pair
06:55:08   4  ,ydate
06:55:08   5  ,prdate
06:55:08   6  ,clse
06:55:08   7  -- g6 is important. I want to predict g6:
06:55:08   8  ,ld6 - clse g6
06:55:08   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
06:55:08  10  -- I want more attributes from the ones I derived above:
06:55:08  11  -- clse relation to moving-min
06:55:08  12  ,clse-min4  cm4
06:55:08  13  ,clse-min6  cm6
06:55:08  14  ,clse-min8  cm8
06:55:08  15  ,clse-min10 cm10
06:55:08  16  ,clse-min12 cm12
06:55:08  17  ,clse-min14 cm14
06:55:08  18  ,clse-min16 cm16
06:55:08  19  ,clse-min18 cm18
06:55:08  20  -- clse relation to moving-avg
06:55:08  21  ,clse-avg4  ca4
06:55:08  22  ,clse-avg6  ca6
06:55:08  23  ,clse-avg8  ca8
06:55:08  24  ,clse-avg10 ca10
06:55:08  25  ,clse-avg12 ca12
06:55:08  26  ,clse-avg14 ca14
06:55:08  27  ,clse-avg16 ca16
06:55:08  28  ,clse-avg18 ca18
06:55:08  29  -- clse relation to moving-max
06:55:08  30  ,clse-max4  cx4
06:55:08  31  ,clse-max6  cx6
06:55:08  32  ,clse-max8  cx8
06:55:08  33  ,clse-max10 cx10
06:55:08  34  ,clse-max12 cx12
06:55:08  35  ,clse-max14 cx14
06:55:08  36  ,clse-max16 cx16
06:55:08  37  ,clse-max18 cx18
06:55:08  38  -- Derive more attributes.
06:55:08  39  -- I want to use CORR() here to help SVM see the shape of the series.
06:55:08  40  -- But COVAR_POP is more stable:
06:55:08  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
06:55:08  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
06:55:08  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
06:55:08  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
06:55:08  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
06:55:08  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
06:55:08  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
06:55:08  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
06:55:08  49  -- Derive date related attributes:
06:55:08  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
06:55:08  51  ,0+TO_CHAR(ydate,'D')d
06:55:08  52  ,0+TO_CHAR(ydate,'W')w
06:55:08  53  -- mpm stands for minutes-past-midnight:
06:55:08  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
06:55:08  55  -- mph stands for minutes-past-hour:
06:55:08  56  ,0+TO_CHAR(ydate,'MI')mph
06:55:08  57  FROM svm6102
06:55:08  58  ORDER BY ydate
06:55:08  59  /

Table created.

Elapsed: 00:00:02.54
06:55:10 SQL> 
06:55:10 SQL> -- rpt
06:55:10 SQL> 
06:55:10 SQL> SELECT
06:55:10   2  pair
06:55:10   3  ,COUNT(pair)
06:55:10   4  ,MIN(clse),MAX(clse)
06:55:10   5  ,MIN(ydate),MAX(ydate)
06:55:10   6  FROM svm6122
06:55:10   7  GROUP BY pair
06:55:10   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19256 .833520557 .893920122 2010-09-30 07:00:01 2011-01-03 06:45:00

Elapsed: 00:00:00.05
06:55:10 SQL> 
06:55:10 SQL> -- Prepare for derivation of NTILE based params:
06:55:10 SQL> 
06:55:10 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.39
06:55:11 SQL> CREATE TABLE svm6142 COMPRESS AS
06:55:11   2  SELECT
06:55:11   3  pair
06:55:11   4  ,ydate
06:55:11   5  ,prdate
06:55:11   6  ,clse
06:55:11   7  ,g6
06:55:11   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
06:55:11   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
06:55:11  10  ,CASE WHEN trend IS NULL THEN 1
06:55:11  11  	    WHEN trend =0      THEN 1
06:55:11  12  	    ELSE trend END trend
06:55:11  13  ,cm4
06:55:11  14  ,cm6
06:55:11  15  ,cm8
06:55:11  16  ,cm10
06:55:11  17  ,cm12
06:55:11  18  ,cm14
06:55:11  19  ,cm16
06:55:11  20  ,cm18
06:55:11  21  --
06:55:11  22  ,ca4
06:55:11  23  ,ca6
06:55:11  24  ,ca8
06:55:11  25  ,ca10
06:55:11  26  ,ca12
06:55:11  27  ,ca14
06:55:11  28  ,ca16
06:55:11  29  ,ca18
06:55:11  30  --
06:55:11  31  ,cx4
06:55:11  32  ,cx6
06:55:11  33  ,cx8
06:55:11  34  ,cx10
06:55:11  35  ,cx12
06:55:11  36  ,cx14
06:55:11  37  ,cx16
06:55:11  38  ,cx18
06:55:11  39  --
06:55:11  40  ,crr4
06:55:11  41  ,crr6
06:55:11  42  ,crr8
06:55:11  43  ,crr10
06:55:11  44  ,crr12
06:55:11  45  ,crr14
06:55:11  46  ,crr16
06:55:11  47  ,crr18
06:55:11  48  --
06:55:11  49  ,hh
06:55:11  50  ,d
06:55:11  51  ,w
06:55:11  52  ,mpm
06:55:11  53  ,mph
06:55:11  54  FROM svm6122
06:55:11  55  ORDER BY ydate
06:55:11  56  /

Table created.

Elapsed: 00:00:00.44
06:55:11 SQL> 
06:55:11 SQL> -- rpt
06:55:11 SQL> 
06:55:11 SQL> SELECT
06:55:11   2  pair
06:55:11   3  ,trend
06:55:11   4  ,gatt
06:55:11   5  ,COUNT(pair)
06:55:11   6  ,AVG(g6)
06:55:11   7  FROM svm6142
06:55:11   8  GROUP BY pair,trend,gatt
06:55:11   9  ORDER BY pair,trend,gatt
06:55:11  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7306 -.00100622
egb_usd 	-1 up	      2646 .002929878
egb_usd 	-1		72
egb_usd 	 1 nup	      6559  -.0013123
egb_usd 	 1 up	      2673 .002960303

Elapsed: 00:00:00.04
06:55:11 SQL> 
06:55:11 SQL> 
06:55:11 SQL> -- Derive NTILE based params:
06:55:11 SQL> 
06:55:11 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.40
06:55:12 SQL> CREATE TABLE svm6162 COMPRESS AS
06:55:12   2  SELECT
06:55:12   3  pair
06:55:12   4  ,ydate
06:55:12   5  ,prdate
06:55:12   6  ,clse
06:55:12   7  ,g6
06:55:12   8  ,gatt
06:55:12   9  ,gattn
06:55:12  10  ,trend
06:55:12  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
06:55:12  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
06:55:12  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
06:55:12  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
06:55:12  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
06:55:12  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
06:55:12  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
06:55:12  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
06:55:12  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
06:55:12  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
06:55:12  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
06:55:12  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
06:55:12  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
06:55:12  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
06:55:12  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
06:55:12  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
06:55:12  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
06:55:12  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
06:55:12  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
06:55:12  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
06:55:12  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
06:55:12  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
06:55:12  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
06:55:12  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
06:55:12  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
06:55:12  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
06:55:12  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
06:55:12  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
06:55:12  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
06:55:12  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
06:55:12  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
06:55:12  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
06:55:12  43  ,hh  att32
06:55:12  44  ,d   att33
06:55:12  45  ,w   att34
06:55:12  46  ,mpm att35
06:55:12  47  ,mph att36
06:55:12  48  ,trend att37
06:55:12  49  FROM svm6142
06:55:12  50  ORDER BY ydate
06:55:12  51  /

Table created.

Elapsed: 00:00:05.47
06:55:17 SQL> 
06:55:17 SQL> -- rpt
06:55:17 SQL> 
06:55:17 SQL> SELECT
06:55:17   2  pair
06:55:17   3  ,trend
06:55:17   4  ,gatt
06:55:17   5  ,COUNT(pair)
06:55:17   6  ,AVG(g6)
06:55:17   7  FROM svm6162
06:55:17   8  GROUP BY pair,trend,gatt
06:55:17   9  ORDER BY pair,trend,gatt
06:55:17  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7306 -.00100622
egb_usd 	-1 up	      2646 .002929878
egb_usd 	-1		72
egb_usd 	 1 nup	      6559  -.0013123
egb_usd 	 1 up	      2673 .002960303

Elapsed: 00:00:00.03
06:55:17 SQL> 
06:55:17 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
06:55:17 SQL> CREATE TABLE modsrc COMPRESS AS
06:55:17   2  SELECT
06:55:17   3  pair
06:55:17   4  ,ydate
06:55:17   5  ,prdate
06:55:17   6  ,trend
06:55:17   7  ,g6
06:55:17   8  ,gatt
06:55:17   9  ,gattn
06:55:17  10  FROM svm6162
06:55:17  11  /

Table created.

Elapsed: 00:00:00.08
06:55:17 SQL> 
06:55:17 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
06:55:18 SQL> 
06:55:18 SQL> DROP   TABLE egb_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
06:55:18 SQL> CREATE TABLE egb_ms610 COMPRESS AS
06:55:18   2  SELECT
06:55:18   3  ydate
06:55:18   4  ,trend egb_trend
06:55:18   5  ,g6    egb_g6
06:55:18   6  ,gatt  egb_gatt
06:55:18   7  ,gattn egb_gattn
06:55:18   8  FROM modsrc
06:55:18   9  /

Table created.

Elapsed: 00:00:00.08
06:55:18 SQL> 
06:55:18 SQL> ANALYZE TABLE egb_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
06:55:18 SQL> 
06:55:18 SQL> -- I need a copy of the attributes:
06:55:18 SQL> 
06:55:18 SQL> 
06:55:18 SQL> DROP   TABLE egb_att;

Table dropped.

Elapsed: 00:00:00.05
06:55:18 SQL> CREATE TABLE egb_att COMPRESS AS
06:55:18   2  SELECT
06:55:18   3  ydate
06:55:18   4  ,att00 egb_att00
06:55:18   5  ,att01 egb_att01
06:55:18   6  ,att02 egb_att02
06:55:18   7  ,att03 egb_att03
06:55:18   8  ,att04 egb_att04
06:55:18   9  ,att05 egb_att05
06:55:18  10  ,att06 egb_att06
06:55:18  11  ,att07 egb_att07
06:55:18  12  ,att08 egb_att08
06:55:18  13  ,att09 egb_att09
06:55:18  14  ,att10 egb_att10
06:55:18  15  ,att11 egb_att11
06:55:18  16  ,att12 egb_att12
06:55:18  17  ,att13 egb_att13
06:55:18  18  ,att14 egb_att14
06:55:18  19  ,att15 egb_att15
06:55:18  20  ,att16 egb_att16
06:55:18  21  ,att17 egb_att17
06:55:18  22  ,att18 egb_att18
06:55:18  23  ,att19 egb_att19
06:55:18  24  ,att20 egb_att20
06:55:18  25  ,att21 egb_att21
06:55:18  26  ,att22 egb_att22
06:55:18  27  ,att23 egb_att23
06:55:18  28  ,att24 egb_att24
06:55:18  29  ,att25 egb_att25
06:55:18  30  ,att26 egb_att26
06:55:18  31  ,att27 egb_att27
06:55:18  32  ,att28 egb_att28
06:55:18  33  ,att29 egb_att29
06:55:18  34  ,att30 egb_att30
06:55:18  35  ,att31 egb_att31
06:55:18  36  ,att32 egb_att32
06:55:18  37  ,att33 egb_att33
06:55:18  38  ,att34 egb_att34
06:55:18  39  ,att35 egb_att35
06:55:18  40  ,att36 egb_att36
06:55:18  41  ,att37 egb_att37
06:55:18  42  FROM svm6162
06:55:18  43  /

Table created.

Elapsed: 00:00:00.15
06:55:18 SQL> 
06:55:18 SQL> ANALYZE TABLE egb_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
06:55:19 SQL> 
06:55:19 SQL> -- rpt
06:55:19 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.95
06:55:19 SQL> SELECT COUNT(*)FROM egb_att;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.00
06:55:19 SQL> 
06:55:19 SQL> --
06:55:19 SQL> -- ejp610.sql
06:55:19 SQL> --
06:55:19 SQL> 
06:55:19 SQL> -- Creates views and tables for backtesting a forex SVM strategy
06:55:19 SQL> 
06:55:19 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.72
06:55:20 SQL> 
06:55:20 SQL> -- I created di5min here:
06:55:20 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
06:55:20 SQL> 
06:55:20 SQL> CREATE OR REPLACE VIEW svm6102 AS
06:55:20   2  SELECT
06:55:20   3  pair
06:55:20   4  ,ydate
06:55:20   5  ,prdate
06:55:20   6  ,rownum rnum -- acts as t in my time-series
06:55:20   7  ,clse
06:55:20   8  -- Derive a bunch of attributes from clse, the latest price:
06:55:20   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
06:55:20  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
06:55:20  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
06:55:20  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
06:55:20  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
06:55:20  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
06:55:20  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
06:55:20  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
06:55:20  17  --
06:55:20  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
06:55:20  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
06:55:20  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
06:55:20  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
06:55:20  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
06:55:20  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
06:55:20  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
06:55:20  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
06:55:20  26  --
06:55:20  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
06:55:20  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
06:55:20  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
06:55:20  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
06:55:20  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
06:55:20  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
06:55:20  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
06:55:20  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
06:55:20  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
06:55:20  36  FROM di5min WHERE pair LIKE'%ejp%'
06:55:20  37  AND ydate > sysdate - 95
06:55:20  38  ORDER BY ydate
06:55:20  39  /

View created.

Elapsed: 00:00:00.04
06:55:20 SQL> 
06:55:20 SQL> -- rpt
06:55:20 SQL> 
06:55:20 SQL> SELECT
06:55:20   2  pair
06:55:20   3  ,COUNT(pair)
06:55:20   4  ,MIN(clse),MAX(clse)
06:55:20   5  ,MIN(avg6),MAX(avg6)
06:55:20   6  ,MIN(ydate),MAX(ydate)
06:55:20   7  FROM svm6102
06:55:20   8  GROUP BY pair
06:55:20   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ejp_usd       19254 107.643765	115.63485 107.776148 115.509678 2010-09-30 07:00:01 2011-01-03 06:45:00

Elapsed: 00:00:00.85
06:55:21 SQL> 
06:55:21 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
06:55:21 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.27
06:55:21 SQL> CREATE TABLE svm6122 COMPRESS AS
06:55:21   2  SELECT
06:55:21   3  pair
06:55:21   4  ,ydate
06:55:21   5  ,prdate
06:55:21   6  ,clse
06:55:21   7  -- g6 is important. I want to predict g6:
06:55:21   8  ,ld6 - clse g6
06:55:21   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
06:55:21  10  -- I want more attributes from the ones I derived above:
06:55:21  11  -- clse relation to moving-min
06:55:21  12  ,clse-min4  cm4
06:55:21  13  ,clse-min6  cm6
06:55:21  14  ,clse-min8  cm8
06:55:21  15  ,clse-min10 cm10
06:55:21  16  ,clse-min12 cm12
06:55:21  17  ,clse-min14 cm14
06:55:21  18  ,clse-min16 cm16
06:55:21  19  ,clse-min18 cm18
06:55:21  20  -- clse relation to moving-avg
06:55:21  21  ,clse-avg4  ca4
06:55:21  22  ,clse-avg6  ca6
06:55:21  23  ,clse-avg8  ca8
06:55:21  24  ,clse-avg10 ca10
06:55:21  25  ,clse-avg12 ca12
06:55:21  26  ,clse-avg14 ca14
06:55:21  27  ,clse-avg16 ca16
06:55:21  28  ,clse-avg18 ca18
06:55:21  29  -- clse relation to moving-max
06:55:21  30  ,clse-max4  cx4
06:55:21  31  ,clse-max6  cx6
06:55:21  32  ,clse-max8  cx8
06:55:21  33  ,clse-max10 cx10
06:55:21  34  ,clse-max12 cx12
06:55:21  35  ,clse-max14 cx14
06:55:21  36  ,clse-max16 cx16
06:55:21  37  ,clse-max18 cx18
06:55:21  38  -- Derive more attributes.
06:55:21  39  -- I want to use CORR() here to help SVM see the shape of the series.
06:55:21  40  -- But COVAR_POP is more stable:
06:55:21  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
06:55:21  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
06:55:21  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
06:55:21  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
06:55:21  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
06:55:21  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
06:55:21  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
06:55:21  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
06:55:21  49  -- Derive date related attributes:
06:55:21  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
06:55:21  51  ,0+TO_CHAR(ydate,'D')d
06:55:21  52  ,0+TO_CHAR(ydate,'W')w
06:55:21  53  -- mpm stands for minutes-past-midnight:
06:55:21  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
06:55:21  55  -- mph stands for minutes-past-hour:
06:55:21  56  ,0+TO_CHAR(ydate,'MI')mph
06:55:21  57  FROM svm6102
06:55:21  58  ORDER BY ydate
06:55:21  59  /

Table created.

Elapsed: 00:00:02.09
06:55:23 SQL> 
06:55:23 SQL> -- rpt
06:55:23 SQL> 
06:55:23 SQL> SELECT
06:55:23   2  pair
06:55:23   3  ,COUNT(pair)
06:55:23   4  ,MIN(clse),MAX(clse)
06:55:23   5  ,MIN(ydate),MAX(ydate)
06:55:23   6  FROM svm6122
06:55:23   7  GROUP BY pair
06:55:23   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ejp_usd       19254 107.643765	115.63485 2010-09-30 07:00:01 2011-01-03 06:45:00

Elapsed: 00:00:00.04
06:55:23 SQL> 
06:55:23 SQL> -- Prepare for derivation of NTILE based params:
06:55:23 SQL> 
06:55:23 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.20
06:55:24 SQL> CREATE TABLE svm6142 COMPRESS AS
06:55:24   2  SELECT
06:55:24   3  pair
06:55:24   4  ,ydate
06:55:24   5  ,prdate
06:55:24   6  ,clse
06:55:24   7  ,g6
06:55:24   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
06:55:24   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
06:55:24  10  ,CASE WHEN trend IS NULL THEN 1
06:55:24  11  	    WHEN trend =0      THEN 1
06:55:24  12  	    ELSE trend END trend
06:55:24  13  ,cm4
06:55:24  14  ,cm6
06:55:24  15  ,cm8
06:55:24  16  ,cm10
06:55:24  17  ,cm12
06:55:24  18  ,cm14
06:55:24  19  ,cm16
06:55:24  20  ,cm18
06:55:24  21  --
06:55:24  22  ,ca4
06:55:24  23  ,ca6
06:55:24  24  ,ca8
06:55:24  25  ,ca10
06:55:24  26  ,ca12
06:55:24  27  ,ca14
06:55:24  28  ,ca16
06:55:24  29  ,ca18
06:55:24  30  --
06:55:24  31  ,cx4
06:55:24  32  ,cx6
06:55:24  33  ,cx8
06:55:24  34  ,cx10
06:55:24  35  ,cx12
06:55:24  36  ,cx14
06:55:24  37  ,cx16
06:55:24  38  ,cx18
06:55:24  39  --
06:55:24  40  ,crr4
06:55:24  41  ,crr6
06:55:24  42  ,crr8
06:55:24  43  ,crr10
06:55:24  44  ,crr12
06:55:24  45  ,crr14
06:55:24  46  ,crr16
06:55:24  47  ,crr18
06:55:24  48  --
06:55:24  49  ,hh
06:55:24  50  ,d
06:55:24  51  ,w
06:55:24  52  ,mpm
06:55:24  53  ,mph
06:55:24  54  FROM svm6122
06:55:24  55  ORDER BY ydate
06:55:24  56  /

Table created.

Elapsed: 00:00:00.37
06:55:24 SQL> 
06:55:24 SQL> -- rpt
06:55:24 SQL> 
06:55:24 SQL> SELECT
06:55:24   2  pair
06:55:24   3  ,trend
06:55:24   4  ,gatt
06:55:24   5  ,COUNT(pair)
06:55:24   6  ,AVG(g6)
06:55:24   7  FROM svm6142
06:55:24   8  GROUP BY pair,trend,gatt
06:55:24   9  ORDER BY pair,trend,gatt
06:55:24  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4840 -.32529255
ejp_usd 	-1 up	      4795 .268481572
ejp_usd 	-1		72
ejp_usd 	 1 nup	      4904  -.2893313
ejp_usd 	 1 up	      4643 .281612877

Elapsed: 00:00:00.04
06:55:24 SQL> 
06:55:24 SQL> 
06:55:24 SQL> -- Derive NTILE based params:
06:55:24 SQL> 
06:55:24 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
06:55:24 SQL> CREATE TABLE svm6162 COMPRESS AS
06:55:24   2  SELECT
06:55:24   3  pair
06:55:24   4  ,ydate
06:55:24   5  ,prdate
06:55:24   6  ,clse
06:55:24   7  ,g6
06:55:24   8  ,gatt
06:55:24   9  ,gattn
06:55:24  10  ,trend
06:55:24  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
06:55:24  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
06:55:24  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
06:55:24  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
06:55:24  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
06:55:24  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
06:55:24  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
06:55:24  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
06:55:24  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
06:55:24  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
06:55:24  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
06:55:24  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
06:55:24  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
06:55:24  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
06:55:24  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
06:55:24  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
06:55:24  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
06:55:24  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
06:55:24  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
06:55:24  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
06:55:24  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
06:55:24  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
06:55:24  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
06:55:24  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
06:55:24  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
06:55:24  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
06:55:24  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
06:55:24  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
06:55:24  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
06:55:24  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
06:55:24  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
06:55:24  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
06:55:24  43  ,hh  att32
06:55:24  44  ,d   att33
06:55:24  45  ,w   att34
06:55:24  46  ,mpm att35
06:55:24  47  ,mph att36
06:55:24  48  ,trend att37
06:55:24  49  FROM svm6142
06:55:24  50  ORDER BY ydate
06:55:24  51  /

Table created.

Elapsed: 00:00:04.87
06:55:29 SQL> 
06:55:29 SQL> -- rpt
06:55:29 SQL> 
06:55:29 SQL> SELECT
06:55:29   2  pair
06:55:29   3  ,trend
06:55:29   4  ,gatt
06:55:29   5  ,COUNT(pair)
06:55:29   6  ,AVG(g6)
06:55:29   7  FROM svm6162
06:55:29   8  GROUP BY pair,trend,gatt
06:55:29   9  ORDER BY pair,trend,gatt
06:55:29  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4840 -.32529255
ejp_usd 	-1 up	      4795 .268481572
ejp_usd 	-1		72
ejp_usd 	 1 nup	      4904  -.2893313
ejp_usd 	 1 up	      4643 .281612877

Elapsed: 00:00:00.02
06:55:29 SQL> 
06:55:29 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.32
06:55:29 SQL> CREATE TABLE modsrc COMPRESS AS
06:55:29   2  SELECT
06:55:29   3  pair
06:55:29   4  ,ydate
06:55:29   5  ,prdate
06:55:29   6  ,trend
06:55:29   7  ,g6
06:55:29   8  ,gatt
06:55:29   9  ,gattn
06:55:29  10  FROM svm6162
06:55:29  11  /

Table created.

Elapsed: 00:00:00.13
06:55:30 SQL> 
06:55:30 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
06:55:30 SQL> 
06:55:30 SQL> DROP   TABLE ejp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
06:55:30 SQL> CREATE TABLE ejp_ms610 COMPRESS AS
06:55:30   2  SELECT
06:55:30   3  ydate
06:55:30   4  ,trend ejp_trend
06:55:30   5  ,g6    ejp_g6
06:55:30   6  ,gatt  ejp_gatt
06:55:30   7  ,gattn ejp_gattn
06:55:30   8  FROM modsrc
06:55:30   9  /

Table created.

Elapsed: 00:00:00.08
06:55:30 SQL> 
06:55:30 SQL> ANALYZE TABLE ejp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.25
06:55:30 SQL> 
06:55:30 SQL> -- I need a copy of the attributes:
06:55:30 SQL> 
06:55:30 SQL> 
06:55:30 SQL> DROP   TABLE ejp_att;

Table dropped.

Elapsed: 00:00:00.04
06:55:30 SQL> CREATE TABLE ejp_att COMPRESS AS
06:55:30   2  SELECT
06:55:30   3  ydate
06:55:30   4  ,att00 ejp_att00
06:55:30   5  ,att01 ejp_att01
06:55:30   6  ,att02 ejp_att02
06:55:30   7  ,att03 ejp_att03
06:55:30   8  ,att04 ejp_att04
06:55:30   9  ,att05 ejp_att05
06:55:30  10  ,att06 ejp_att06
06:55:30  11  ,att07 ejp_att07
06:55:30  12  ,att08 ejp_att08
06:55:30  13  ,att09 ejp_att09
06:55:30  14  ,att10 ejp_att10
06:55:30  15  ,att11 ejp_att11
06:55:30  16  ,att12 ejp_att12
06:55:30  17  ,att13 ejp_att13
06:55:30  18  ,att14 ejp_att14
06:55:30  19  ,att15 ejp_att15
06:55:30  20  ,att16 ejp_att16
06:55:30  21  ,att17 ejp_att17
06:55:30  22  ,att18 ejp_att18
06:55:30  23  ,att19 ejp_att19
06:55:30  24  ,att20 ejp_att20
06:55:30  25  ,att21 ejp_att21
06:55:30  26  ,att22 ejp_att22
06:55:30  27  ,att23 ejp_att23
06:55:30  28  ,att24 ejp_att24
06:55:30  29  ,att25 ejp_att25
06:55:30  30  ,att26 ejp_att26
06:55:30  31  ,att27 ejp_att27
06:55:30  32  ,att28 ejp_att28
06:55:30  33  ,att29 ejp_att29
06:55:30  34  ,att30 ejp_att30
06:55:30  35  ,att31 ejp_att31
06:55:30  36  ,att32 ejp_att32
06:55:30  37  ,att33 ejp_att33
06:55:30  38  ,att34 ejp_att34
06:55:30  39  ,att35 ejp_att35
06:55:30  40  ,att36 ejp_att36
06:55:30  41  ,att37 ejp_att37
06:55:30  42  FROM svm6162
06:55:30  43  /

Table created.

Elapsed: 00:00:00.17
06:55:30 SQL> 
06:55:30 SQL> ANALYZE TABLE ejp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
06:55:31 SQL> 
06:55:31 SQL> -- rpt
06:55:31 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19254

Elapsed: 00:00:00.84
06:55:32 SQL> SELECT COUNT(*)FROM ejp_att;

  COUNT(*)
----------
     19254

Elapsed: 00:00:00.00
06:55:32 SQL> 
06:55:32 SQL> --
06:55:32 SQL> -- ajp610.sql
06:55:32 SQL> --
06:55:32 SQL> 
06:55:32 SQL> -- Creates views and tables for backtesting a forex SVM strategy
06:55:32 SQL> 
06:55:32 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.45
06:55:32 SQL> 
06:55:32 SQL> -- I created di5min here:
06:55:32 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
06:55:32 SQL> 
06:55:32 SQL> CREATE OR REPLACE VIEW svm6102 AS
06:55:32   2  SELECT
06:55:32   3  pair
06:55:32   4  ,ydate
06:55:32   5  ,prdate
06:55:32   6  ,rownum rnum -- acts as t in my time-series
06:55:32   7  ,clse
06:55:32   8  -- Derive a bunch of attributes from clse, the latest price:
06:55:32   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
06:55:32  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
06:55:32  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
06:55:32  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
06:55:32  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
06:55:32  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
06:55:32  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
06:55:32  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
06:55:32  17  --
06:55:32  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
06:55:32  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
06:55:32  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
06:55:32  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
06:55:32  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
06:55:32  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
06:55:32  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
06:55:32  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
06:55:32  26  --
06:55:32  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
06:55:32  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
06:55:32  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
06:55:32  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
06:55:32  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
06:55:32  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
06:55:32  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
06:55:32  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
06:55:32  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
06:55:32  36  FROM di5min WHERE pair LIKE'%ajp%'
06:55:32  37  AND ydate > sysdate - 95
06:55:32  38  ORDER BY ydate
06:55:32  39  /

View created.

Elapsed: 00:00:00.04
06:55:32 SQL> 
06:55:32 SQL> -- rpt
06:55:32 SQL> 
06:55:32 SQL> SELECT
06:55:32   2  pair
06:55:32   3  ,COUNT(pair)
06:55:32   4  ,MIN(clse),MAX(clse)
06:55:32   5  ,MIN(avg6),MAX(avg6)
06:55:32   6  ,MIN(ydate),MAX(ydate)
06:55:32   7  FROM svm6102
06:55:32   8  GROUP BY pair
06:55:32   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ajp_usd       19251  78.249976 83.6669853 78.5106193  83.546306 2010-09-30 07:00:01 2011-01-03 06:45:00

Elapsed: 00:00:00.77
06:55:33 SQL> 
06:55:33 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
06:55:33 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.27
06:55:33 SQL> CREATE TABLE svm6122 COMPRESS AS
06:55:33   2  SELECT
06:55:33   3  pair
06:55:33   4  ,ydate
06:55:33   5  ,prdate
06:55:33   6  ,clse
06:55:33   7  -- g6 is important. I want to predict g6:
06:55:33   8  ,ld6 - clse g6
06:55:33   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
06:55:33  10  -- I want more attributes from the ones I derived above:
06:55:33  11  -- clse relation to moving-min
06:55:33  12  ,clse-min4  cm4
06:55:33  13  ,clse-min6  cm6
06:55:33  14  ,clse-min8  cm8
06:55:33  15  ,clse-min10 cm10
06:55:33  16  ,clse-min12 cm12
06:55:33  17  ,clse-min14 cm14
06:55:33  18  ,clse-min16 cm16
06:55:33  19  ,clse-min18 cm18
06:55:33  20  -- clse relation to moving-avg
06:55:33  21  ,clse-avg4  ca4
06:55:33  22  ,clse-avg6  ca6
06:55:33  23  ,clse-avg8  ca8
06:55:33  24  ,clse-avg10 ca10
06:55:33  25  ,clse-avg12 ca12
06:55:33  26  ,clse-avg14 ca14
06:55:33  27  ,clse-avg16 ca16
06:55:33  28  ,clse-avg18 ca18
06:55:33  29  -- clse relation to moving-max
06:55:33  30  ,clse-max4  cx4
06:55:33  31  ,clse-max6  cx6
06:55:33  32  ,clse-max8  cx8
06:55:33  33  ,clse-max10 cx10
06:55:33  34  ,clse-max12 cx12
06:55:33  35  ,clse-max14 cx14
06:55:33  36  ,clse-max16 cx16
06:55:33  37  ,clse-max18 cx18
06:55:33  38  -- Derive more attributes.
06:55:33  39  -- I want to use CORR() here to help SVM see the shape of the series.
06:55:33  40  -- But COVAR_POP is more stable:
06:55:33  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
06:55:33  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
06:55:33  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
06:55:33  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
06:55:33  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
06:55:33  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
06:55:33  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
06:55:33  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
06:55:33  49  -- Derive date related attributes:
06:55:33  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
06:55:33  51  ,0+TO_CHAR(ydate,'D')d
06:55:33  52  ,0+TO_CHAR(ydate,'W')w
06:55:33  53  -- mpm stands for minutes-past-midnight:
06:55:33  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
06:55:33  55  -- mph stands for minutes-past-hour:
06:55:33  56  ,0+TO_CHAR(ydate,'MI')mph
06:55:33  57  FROM svm6102
06:55:33  58  ORDER BY ydate
06:55:33  59  /

Table created.

Elapsed: 00:00:01.99
06:55:35 SQL> 
06:55:35 SQL> -- rpt
06:55:35 SQL> 
06:55:35 SQL> SELECT
06:55:35   2  pair
06:55:35   3  ,COUNT(pair)
06:55:35   4  ,MIN(clse),MAX(clse)
06:55:35   5  ,MIN(ydate),MAX(ydate)
06:55:35   6  FROM svm6122
06:55:35   7  GROUP BY pair
06:55:35   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ajp_usd       19251  78.249976 83.6669853 2010-09-30 07:00:01 2011-01-03 06:45:00

Elapsed: 00:00:00.04
06:55:35 SQL> 
06:55:35 SQL> -- Prepare for derivation of NTILE based params:
06:55:35 SQL> 
06:55:35 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.24
06:55:36 SQL> CREATE TABLE svm6142 COMPRESS AS
06:55:36   2  SELECT
06:55:36   3  pair
06:55:36   4  ,ydate
06:55:36   5  ,prdate
06:55:36   6  ,clse
06:55:36   7  ,g6
06:55:36   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
06:55:36   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
06:55:36  10  ,CASE WHEN trend IS NULL THEN 1
06:55:36  11  	    WHEN trend =0      THEN 1
06:55:36  12  	    ELSE trend END trend
06:55:36  13  ,cm4
06:55:36  14  ,cm6
06:55:36  15  ,cm8
06:55:36  16  ,cm10
06:55:36  17  ,cm12
06:55:36  18  ,cm14
06:55:36  19  ,cm16
06:55:36  20  ,cm18
06:55:36  21  --
06:55:36  22  ,ca4
06:55:36  23  ,ca6
06:55:36  24  ,ca8
06:55:36  25  ,ca10
06:55:36  26  ,ca12
06:55:36  27  ,ca14
06:55:36  28  ,ca16
06:55:36  29  ,ca18
06:55:36  30  --
06:55:36  31  ,cx4
06:55:36  32  ,cx6
06:55:36  33  ,cx8
06:55:36  34  ,cx10
06:55:36  35  ,cx12
06:55:36  36  ,cx14
06:55:36  37  ,cx16
06:55:36  38  ,cx18
06:55:36  39  --
06:55:36  40  ,crr4
06:55:36  41  ,crr6
06:55:36  42  ,crr8
06:55:36  43  ,crr10
06:55:36  44  ,crr12
06:55:36  45  ,crr14
06:55:36  46  ,crr16
06:55:36  47  ,crr18
06:55:36  48  --
06:55:36  49  ,hh
06:55:36  50  ,d
06:55:36  51  ,w
06:55:36  52  ,mpm
06:55:36  53  ,mph
06:55:36  54  FROM svm6122
06:55:36  55  ORDER BY ydate
06:55:36  56  /

Table created.

Elapsed: 00:00:00.36
06:55:36 SQL> 
06:55:36 SQL> -- rpt
06:55:36 SQL> 
06:55:36 SQL> SELECT
06:55:36   2  pair
06:55:36   3  ,trend
06:55:36   4  ,gatt
06:55:36   5  ,COUNT(pair)
06:55:36   6  ,AVG(g6)
06:55:36   7  FROM svm6142
06:55:36   8  GROUP BY pair,trend,gatt
06:55:36   9  ORDER BY pair,trend,gatt
06:55:36  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4026 -.22832378
ajp_usd 	-1 up	      5128 .221964787
ajp_usd 	-1		53
ajp_usd 	 1 nup	      5235 -.20019938
ajp_usd 	 1 up	      4790 .205667711
ajp_usd 	 1		19

6 rows selected.

Elapsed: 00:00:00.04
06:55:36 SQL> 
06:55:36 SQL> 
06:55:36 SQL> -- Derive NTILE based params:
06:55:36 SQL> 
06:55:36 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.14
06:55:36 SQL> CREATE TABLE svm6162 COMPRESS AS
06:55:36   2  SELECT
06:55:36   3  pair
06:55:36   4  ,ydate
06:55:36   5  ,prdate
06:55:36   6  ,clse
06:55:36   7  ,g6
06:55:36   8  ,gatt
06:55:36   9  ,gattn
06:55:36  10  ,trend
06:55:36  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
06:55:36  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
06:55:36  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
06:55:36  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
06:55:36  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
06:55:36  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
06:55:36  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
06:55:36  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
06:55:36  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
06:55:36  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
06:55:36  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
06:55:36  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
06:55:36  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
06:55:36  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
06:55:36  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
06:55:36  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
06:55:36  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
06:55:36  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
06:55:36  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
06:55:36  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
06:55:36  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
06:55:36  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
06:55:36  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
06:55:36  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
06:55:36  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
06:55:36  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
06:55:36  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
06:55:36  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
06:55:36  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
06:55:36  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
06:55:36  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
06:55:36  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
06:55:36  43  ,hh  att32
06:55:36  44  ,d   att33
06:55:36  45  ,w   att34
06:55:36  46  ,mpm att35
06:55:36  47  ,mph att36
06:55:36  48  ,trend att37
06:55:36  49  FROM svm6142
06:55:36  50  ORDER BY ydate
06:55:36  51  /

Table created.

Elapsed: 00:00:04.91
06:55:41 SQL> 
06:55:41 SQL> -- rpt
06:55:41 SQL> 
06:55:41 SQL> SELECT
06:55:41   2  pair
06:55:41   3  ,trend
06:55:41   4  ,gatt
06:55:41   5  ,COUNT(pair)
06:55:41   6  ,AVG(g6)
06:55:41   7  FROM svm6162
06:55:41   8  GROUP BY pair,trend,gatt
06:55:41   9  ORDER BY pair,trend,gatt
06:55:41  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4026 -.22832378
ajp_usd 	-1 up	      5128 .221964787
ajp_usd 	-1		53
ajp_usd 	 1 nup	      5235 -.20019938
ajp_usd 	 1 up	      4790 .205667711
ajp_usd 	 1		19

6 rows selected.

Elapsed: 00:00:00.02
06:55:41 SQL> 
06:55:41 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
06:55:41 SQL> CREATE TABLE modsrc COMPRESS AS
06:55:41   2  SELECT
06:55:41   3  pair
06:55:41   4  ,ydate
06:55:41   5  ,prdate
06:55:41   6  ,trend
06:55:41   7  ,g6
06:55:41   8  ,gatt
06:55:41   9  ,gattn
06:55:41  10  FROM svm6162
06:55:41  11  /

Table created.

Elapsed: 00:00:00.10
06:55:41 SQL> 
06:55:41 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.25
06:55:42 SQL> 
06:55:42 SQL> DROP   TABLE ajp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
06:55:42 SQL> CREATE TABLE ajp_ms610 COMPRESS AS
06:55:42   2  SELECT
06:55:42   3  ydate
06:55:42   4  ,trend ajp_trend
06:55:42   5  ,g6    ajp_g6
06:55:42   6  ,gatt  ajp_gatt
06:55:42   7  ,gattn ajp_gattn
06:55:42   8  FROM modsrc
06:55:42   9  /

Table created.

Elapsed: 00:00:00.07
06:55:42 SQL> 
06:55:42 SQL> ANALYZE TABLE ajp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
06:55:42 SQL> 
06:55:42 SQL> -- I need a copy of the attributes:
06:55:42 SQL> 
06:55:42 SQL> 
06:55:42 SQL> DROP   TABLE ajp_att;

Table dropped.

Elapsed: 00:00:00.04
06:55:42 SQL> CREATE TABLE ajp_att COMPRESS AS
06:55:42   2  SELECT
06:55:42   3  ydate
06:55:42   4  ,att00 ajp_att00
06:55:42   5  ,att01 ajp_att01
06:55:42   6  ,att02 ajp_att02
06:55:42   7  ,att03 ajp_att03
06:55:42   8  ,att04 ajp_att04
06:55:42   9  ,att05 ajp_att05
06:55:42  10  ,att06 ajp_att06
06:55:42  11  ,att07 ajp_att07
06:55:42  12  ,att08 ajp_att08
06:55:42  13  ,att09 ajp_att09
06:55:42  14  ,att10 ajp_att10
06:55:42  15  ,att11 ajp_att11
06:55:42  16  ,att12 ajp_att12
06:55:42  17  ,att13 ajp_att13
06:55:42  18  ,att14 ajp_att14
06:55:42  19  ,att15 ajp_att15
06:55:42  20  ,att16 ajp_att16
06:55:42  21  ,att17 ajp_att17
06:55:42  22  ,att18 ajp_att18
06:55:42  23  ,att19 ajp_att19
06:55:42  24  ,att20 ajp_att20
06:55:42  25  ,att21 ajp_att21
06:55:42  26  ,att22 ajp_att22
06:55:42  27  ,att23 ajp_att23
06:55:42  28  ,att24 ajp_att24
06:55:42  29  ,att25 ajp_att25
06:55:42  30  ,att26 ajp_att26
06:55:42  31  ,att27 ajp_att27
06:55:42  32  ,att28 ajp_att28
06:55:42  33  ,att29 ajp_att29
06:55:42  34  ,att30 ajp_att30
06:55:42  35  ,att31 ajp_att31
06:55:42  36  ,att32 ajp_att32
06:55:42  37  ,att33 ajp_att33
06:55:42  38  ,att34 ajp_att34
06:55:42  39  ,att35 ajp_att35
06:55:42  40  ,att36 ajp_att36
06:55:42  41  ,att37 ajp_att37
06:55:42  42  FROM svm6162
06:55:42  43  /

Table created.

Elapsed: 00:00:00.18
06:55:42 SQL> 
06:55:42 SQL> ANALYZE TABLE ajp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.90
06:55:43 SQL> 
06:55:43 SQL> -- rpt
06:55:43 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19251

Elapsed: 00:00:00.77
06:55:44 SQL> SELECT COUNT(*)FROM ajp_att;

  COUNT(*)
----------
     19251

Elapsed: 00:00:00.00
06:55:44 SQL> 
06:55:44 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
