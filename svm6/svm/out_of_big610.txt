
SQL*Plus: Release 11.2.0.1.0 Production on Wed Jan 5 04:08:11 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

04:08:11 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
04:08:11 SQL> 04:08:11 SQL> --
04:08:11 SQL> -- eur610.sql
04:08:11 SQL> --
04:08:11 SQL> 
04:08:11 SQL> -- Creates views and tables for backtesting a forex SVM strategy
04:08:11 SQL> 
04:08:11 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.02
04:08:11 SQL> 
04:08:11 SQL> -- I created di5min here:
04:08:11 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
04:08:11 SQL> 
04:08:11 SQL> CREATE OR REPLACE VIEW svm6102 AS
04:08:11   2  SELECT
04:08:11   3  pair
04:08:11   4  ,ydate
04:08:11   5  ,prdate
04:08:11   6  ,rownum rnum -- acts as t in my time-series
04:08:11   7  ,clse
04:08:11   8  -- Derive a bunch of attributes from clse, the latest price:
04:08:11   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
04:08:11  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
04:08:11  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
04:08:11  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
04:08:11  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
04:08:11  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
04:08:11  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
04:08:11  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
04:08:11  17  --
04:08:11  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
04:08:11  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
04:08:11  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
04:08:11  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
04:08:11  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
04:08:11  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
04:08:11  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
04:08:11  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
04:08:11  26  --
04:08:11  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
04:08:11  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
04:08:11  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
04:08:11  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
04:08:11  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
04:08:11  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
04:08:11  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
04:08:11  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
04:08:11  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
04:08:11  36  FROM di5min WHERE pair LIKE'%eur%'
04:08:11  37  AND ydate > sysdate - 95
04:08:11  38  ORDER BY ydate
04:08:11  39  /

View created.

Elapsed: 00:00:00.07
04:08:11 SQL> 
04:08:11 SQL> -- rpt
04:08:11 SQL> 
04:08:11 SQL> SELECT
04:08:11   2  pair
04:08:11   3  ,COUNT(pair)
04:08:11   4  ,MIN(clse),MAX(clse)
04:08:11   5  ,MIN(avg6),MAX(avg6)
04:08:11   6  ,MIN(ydate),MAX(ydate)
04:08:11   7  FROM svm6102
04:08:11   8  GROUP BY pair
04:08:11   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19329    1.29735	   1.4273 1.29875103 1.42436233 2010-10-03 20:55:01 2011-01-05 04:05:00

Elapsed: 00:00:00.90
04:08:12 SQL> 
04:08:12 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
04:08:12 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.62
04:08:13 SQL> CREATE TABLE svm6122 COMPRESS AS
04:08:13   2  SELECT
04:08:13   3  pair
04:08:13   4  ,ydate
04:08:13   5  ,prdate
04:08:13   6  ,clse
04:08:13   7  -- g6 is important. I want to predict g6:
04:08:13   8  ,ld6 - clse g6
04:08:13   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
04:08:13  10  -- I want more attributes from the ones I derived above:
04:08:13  11  -- clse relation to moving-min
04:08:13  12  ,clse-min4  cm4
04:08:13  13  ,clse-min6  cm6
04:08:13  14  ,clse-min8  cm8
04:08:13  15  ,clse-min10 cm10
04:08:13  16  ,clse-min12 cm12
04:08:13  17  ,clse-min14 cm14
04:08:13  18  ,clse-min16 cm16
04:08:13  19  ,clse-min18 cm18
04:08:13  20  -- clse relation to moving-avg
04:08:13  21  ,clse-avg4  ca4
04:08:13  22  ,clse-avg6  ca6
04:08:13  23  ,clse-avg8  ca8
04:08:13  24  ,clse-avg10 ca10
04:08:13  25  ,clse-avg12 ca12
04:08:13  26  ,clse-avg14 ca14
04:08:13  27  ,clse-avg16 ca16
04:08:13  28  ,clse-avg18 ca18
04:08:13  29  -- clse relation to moving-max
04:08:13  30  ,clse-max4  cx4
04:08:13  31  ,clse-max6  cx6
04:08:13  32  ,clse-max8  cx8
04:08:13  33  ,clse-max10 cx10
04:08:13  34  ,clse-max12 cx12
04:08:13  35  ,clse-max14 cx14
04:08:13  36  ,clse-max16 cx16
04:08:13  37  ,clse-max18 cx18
04:08:13  38  -- Derive more attributes.
04:08:13  39  -- I want to use CORR() here to help SVM see the shape of the series.
04:08:13  40  -- But COVAR_POP is more stable:
04:08:13  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
04:08:13  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
04:08:13  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
04:08:13  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
04:08:13  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
04:08:13  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
04:08:13  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
04:08:13  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
04:08:13  49  -- Derive date related attributes:
04:08:13  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
04:08:13  51  ,0+TO_CHAR(ydate,'D')d
04:08:13  52  ,0+TO_CHAR(ydate,'W')w
04:08:13  53  -- mpm stands for minutes-past-midnight:
04:08:13  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
04:08:13  55  -- mph stands for minutes-past-hour:
04:08:13  56  ,0+TO_CHAR(ydate,'MI')mph
04:08:13  57  FROM svm6102
04:08:13  58  ORDER BY ydate
04:08:13  59  /

Table created.

Elapsed: 00:00:02.38
04:08:15 SQL> 
04:08:15 SQL> -- rpt
04:08:15 SQL> 
04:08:15 SQL> SELECT
04:08:15   2  pair
04:08:15   3  ,COUNT(pair)
04:08:15   4  ,MIN(clse),MAX(clse)
04:08:15   5  ,MIN(ydate),MAX(ydate)
04:08:15   6  FROM svm6122
04:08:15   7  GROUP BY pair
04:08:15   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19329    1.29735	   1.4273 2010-10-03 20:55:01 2011-01-05 04:05:00

Elapsed: 00:00:00.06
04:08:15 SQL> 
04:08:15 SQL> -- Prepare for derivation of NTILE based params:
04:08:15 SQL> 
04:08:15 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.38
04:08:15 SQL> CREATE TABLE svm6142 COMPRESS AS
04:08:15   2  SELECT
04:08:15   3  pair
04:08:15   4  ,ydate
04:08:15   5  ,prdate
04:08:15   6  ,clse
04:08:15   7  ,g6
04:08:15   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
04:08:15   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
04:08:15  10  ,CASE WHEN trend IS NULL THEN 1
04:08:15  11  	    WHEN trend =0      THEN 1
04:08:15  12  	    ELSE trend END trend
04:08:15  13  ,cm4
04:08:15  14  ,cm6
04:08:15  15  ,cm8
04:08:15  16  ,cm10
04:08:15  17  ,cm12
04:08:15  18  ,cm14
04:08:15  19  ,cm16
04:08:15  20  ,cm18
04:08:15  21  --
04:08:15  22  ,ca4
04:08:15  23  ,ca6
04:08:15  24  ,ca8
04:08:15  25  ,ca10
04:08:15  26  ,ca12
04:08:15  27  ,ca14
04:08:15  28  ,ca16
04:08:15  29  ,ca18
04:08:15  30  --
04:08:15  31  ,cx4
04:08:15  32  ,cx6
04:08:15  33  ,cx8
04:08:15  34  ,cx10
04:08:15  35  ,cx12
04:08:15  36  ,cx14
04:08:15  37  ,cx16
04:08:15  38  ,cx18
04:08:15  39  --
04:08:15  40  ,crr4
04:08:15  41  ,crr6
04:08:15  42  ,crr8
04:08:15  43  ,crr10
04:08:15  44  ,crr12
04:08:15  45  ,crr14
04:08:15  46  ,crr16
04:08:15  47  ,crr18
04:08:15  48  --
04:08:15  49  ,hh
04:08:15  50  ,d
04:08:15  51  ,w
04:08:15  52  ,mpm
04:08:15  53  ,mph
04:08:15  54  FROM svm6122
04:08:15  55  ORDER BY ydate
04:08:15  56  /

Table created.

Elapsed: 00:00:00.37
04:08:16 SQL> 
04:08:16 SQL> -- rpt
04:08:16 SQL> 
04:08:16 SQL> SELECT
04:08:16   2  pair
04:08:16   3  ,trend
04:08:16   4  ,gatt
04:08:16   5  ,COUNT(pair)
04:08:16   6  ,AVG(g6)
04:08:16   7  FROM svm6142
04:08:16   8  GROUP BY pair,trend,gatt
04:08:16   9  ORDER BY pair,trend,gatt
04:08:16  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6169 -.00310977
eur_usd 	-1 up	      3560 .004455267
eur_usd 	-1		59
eur_usd 	 1 nup	      5823 -.00324859
eur_usd 	 1 up	      3705 .005071238
eur_usd 	 1		13

6 rows selected.

Elapsed: 00:00:00.04
04:08:16 SQL> 
04:08:16 SQL> 
04:08:16 SQL> -- Derive NTILE based params:
04:08:16 SQL> 
04:08:16 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.47
04:08:16 SQL> CREATE TABLE svm6162 COMPRESS AS
04:08:16   2  SELECT
04:08:16   3  pair
04:08:16   4  ,ydate
04:08:16   5  ,prdate
04:08:16   6  ,clse
04:08:16   7  ,g6
04:08:16   8  ,gatt
04:08:16   9  ,gattn
04:08:16  10  ,trend
04:08:16  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
04:08:16  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
04:08:16  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
04:08:16  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
04:08:16  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
04:08:16  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
04:08:16  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
04:08:16  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
04:08:16  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
04:08:16  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
04:08:16  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
04:08:16  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
04:08:16  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
04:08:16  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
04:08:16  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
04:08:16  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
04:08:16  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
04:08:16  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
04:08:16  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
04:08:16  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
04:08:16  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
04:08:16  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
04:08:16  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
04:08:16  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
04:08:16  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
04:08:16  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
04:08:16  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
04:08:16  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
04:08:16  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
04:08:16  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
04:08:16  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
04:08:16  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
04:08:16  43  ,hh  att32
04:08:16  44  ,d   att33
04:08:16  45  ,w   att34
04:08:16  46  ,mpm att35
04:08:16  47  ,mph att36
04:08:16  48  ,trend att37
04:08:16  49  FROM svm6142
04:08:16  50  ORDER BY ydate
04:08:16  51  /

Table created.

Elapsed: 00:00:04.77
04:08:21 SQL> 
04:08:21 SQL> -- rpt
04:08:21 SQL> 
04:08:21 SQL> SELECT
04:08:21   2  pair
04:08:21   3  ,trend
04:08:21   4  ,gatt
04:08:21   5  ,COUNT(pair)
04:08:21   6  ,AVG(g6)
04:08:21   7  FROM svm6162
04:08:21   8  GROUP BY pair,trend,gatt
04:08:21   9  ORDER BY pair,trend,gatt
04:08:21  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6169 -.00310977
eur_usd 	-1 up	      3560 .004455267
eur_usd 	-1		59
eur_usd 	 1 nup	      5823 -.00324859
eur_usd 	 1 up	      3705 .005071238
eur_usd 	 1		13

6 rows selected.

Elapsed: 00:00:00.02
04:08:21 SQL> 
04:08:21 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.09
04:08:21 SQL> CREATE TABLE modsrc COMPRESS AS
04:08:21   2  SELECT
04:08:21   3  pair
04:08:21   4  ,ydate
04:08:21   5  ,prdate
04:08:21   6  ,trend
04:08:21   7  ,g6
04:08:21   8  ,gatt
04:08:21   9  ,gattn
04:08:21  10  FROM svm6162
04:08:21  11  /

Table created.

Elapsed: 00:00:00.09
04:08:21 SQL> 
04:08:21 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
04:08:21 SQL> 
04:08:21 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
04:08:21 SQL> CREATE TABLE eur_ms610 COMPRESS AS
04:08:21   2  SELECT
04:08:21   3  ydate
04:08:21   4  ,trend eur_trend
04:08:21   5  ,g6    eur_g6
04:08:21   6  ,gatt  eur_gatt
04:08:21   7  ,gattn eur_gattn
04:08:21   8  FROM modsrc
04:08:21   9  /

Table created.

Elapsed: 00:00:00.08
04:08:22 SQL> 
04:08:22 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.14
04:08:22 SQL> 
04:08:22 SQL> -- I need a copy of the attributes:
04:08:22 SQL> 
04:08:22 SQL> 
04:08:22 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.05
04:08:22 SQL> CREATE TABLE eur_att COMPRESS AS
04:08:22   2  SELECT
04:08:22   3  ydate
04:08:22   4  ,att00 eur_att00
04:08:22   5  ,att01 eur_att01
04:08:22   6  ,att02 eur_att02
04:08:22   7  ,att03 eur_att03
04:08:22   8  ,att04 eur_att04
04:08:22   9  ,att05 eur_att05
04:08:22  10  ,att06 eur_att06
04:08:22  11  ,att07 eur_att07
04:08:22  12  ,att08 eur_att08
04:08:22  13  ,att09 eur_att09
04:08:22  14  ,att10 eur_att10
04:08:22  15  ,att11 eur_att11
04:08:22  16  ,att12 eur_att12
04:08:22  17  ,att13 eur_att13
04:08:22  18  ,att14 eur_att14
04:08:22  19  ,att15 eur_att15
04:08:22  20  ,att16 eur_att16
04:08:22  21  ,att17 eur_att17
04:08:22  22  ,att18 eur_att18
04:08:22  23  ,att19 eur_att19
04:08:22  24  ,att20 eur_att20
04:08:22  25  ,att21 eur_att21
04:08:22  26  ,att22 eur_att22
04:08:22  27  ,att23 eur_att23
04:08:22  28  ,att24 eur_att24
04:08:22  29  ,att25 eur_att25
04:08:22  30  ,att26 eur_att26
04:08:22  31  ,att27 eur_att27
04:08:22  32  ,att28 eur_att28
04:08:22  33  ,att29 eur_att29
04:08:22  34  ,att30 eur_att30
04:08:22  35  ,att31 eur_att31
04:08:22  36  ,att32 eur_att32
04:08:22  37  ,att33 eur_att33
04:08:22  38  ,att34 eur_att34
04:08:22  39  ,att35 eur_att35
04:08:22  40  ,att36 eur_att36
04:08:22  41  ,att37 eur_att37
04:08:22  42  FROM svm6162
04:08:22  43  /

Table created.

Elapsed: 00:00:00.16
04:08:22 SQL> 
04:08:22 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
04:08:22 SQL> 
04:08:22 SQL> -- rpt
04:08:22 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19329

Elapsed: 00:00:00.87
04:08:23 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19329

Elapsed: 00:00:00.00
04:08:23 SQL> 
04:08:23 SQL> --
04:08:23 SQL> -- aud610.sql
04:08:23 SQL> --
04:08:23 SQL> 
04:08:23 SQL> -- Creates views and tables for backtesting a forex SVM strategy
04:08:23 SQL> 
04:08:23 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
04:08:24 SQL> 
04:08:24 SQL> -- I created di5min here:
04:08:24 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
04:08:24 SQL> 
04:08:24 SQL> CREATE OR REPLACE VIEW svm6102 AS
04:08:24   2  SELECT
04:08:24   3  pair
04:08:24   4  ,ydate
04:08:24   5  ,prdate
04:08:24   6  ,rownum rnum -- acts as t in my time-series
04:08:24   7  ,clse
04:08:24   8  -- Derive a bunch of attributes from clse, the latest price:
04:08:24   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
04:08:24  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
04:08:24  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
04:08:24  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
04:08:24  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
04:08:24  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
04:08:24  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
04:08:24  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
04:08:24  17  --
04:08:24  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
04:08:24  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
04:08:24  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
04:08:24  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
04:08:24  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
04:08:24  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
04:08:24  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
04:08:24  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
04:08:24  26  --
04:08:24  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
04:08:24  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
04:08:24  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
04:08:24  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
04:08:24  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
04:08:24  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
04:08:24  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
04:08:24  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
04:08:24  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
04:08:24  36  FROM di5min WHERE pair LIKE'%aud%'
04:08:24  37  AND ydate > sysdate - 95
04:08:24  38  ORDER BY ydate
04:08:24  39  /

View created.

Elapsed: 00:00:00.05
04:08:24 SQL> 
04:08:24 SQL> -- rpt
04:08:24 SQL> 
04:08:24 SQL> SELECT
04:08:24   2  pair
04:08:24   3  ,COUNT(pair)
04:08:24   4  ,MIN(clse),MAX(clse)
04:08:24   5  ,MIN(avg6),MAX(avg6)
04:08:24   6  ,MIN(ydate),MAX(ydate)
04:08:24   7  FROM svm6102
04:08:24   8  GROUP BY pair
04:08:24   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19326	.95405	  1.02495 .957141438 1.02284247 2010-10-03 20:55:01 2011-01-05 04:05:00

Elapsed: 00:00:00.86
04:08:25 SQL> 
04:08:25 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
04:08:25 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
04:08:25 SQL> CREATE TABLE svm6122 COMPRESS AS
04:08:25   2  SELECT
04:08:25   3  pair
04:08:25   4  ,ydate
04:08:25   5  ,prdate
04:08:25   6  ,clse
04:08:25   7  -- g6 is important. I want to predict g6:
04:08:25   8  ,ld6 - clse g6
04:08:25   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
04:08:25  10  -- I want more attributes from the ones I derived above:
04:08:25  11  -- clse relation to moving-min
04:08:25  12  ,clse-min4  cm4
04:08:25  13  ,clse-min6  cm6
04:08:25  14  ,clse-min8  cm8
04:08:25  15  ,clse-min10 cm10
04:08:25  16  ,clse-min12 cm12
04:08:25  17  ,clse-min14 cm14
04:08:25  18  ,clse-min16 cm16
04:08:25  19  ,clse-min18 cm18
04:08:25  20  -- clse relation to moving-avg
04:08:25  21  ,clse-avg4  ca4
04:08:25  22  ,clse-avg6  ca6
04:08:25  23  ,clse-avg8  ca8
04:08:25  24  ,clse-avg10 ca10
04:08:25  25  ,clse-avg12 ca12
04:08:25  26  ,clse-avg14 ca14
04:08:25  27  ,clse-avg16 ca16
04:08:25  28  ,clse-avg18 ca18
04:08:25  29  -- clse relation to moving-max
04:08:25  30  ,clse-max4  cx4
04:08:25  31  ,clse-max6  cx6
04:08:25  32  ,clse-max8  cx8
04:08:25  33  ,clse-max10 cx10
04:08:25  34  ,clse-max12 cx12
04:08:25  35  ,clse-max14 cx14
04:08:25  36  ,clse-max16 cx16
04:08:25  37  ,clse-max18 cx18
04:08:25  38  -- Derive more attributes.
04:08:25  39  -- I want to use CORR() here to help SVM see the shape of the series.
04:08:25  40  -- But COVAR_POP is more stable:
04:08:25  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
04:08:25  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
04:08:25  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
04:08:25  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
04:08:25  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
04:08:25  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
04:08:25  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
04:08:25  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
04:08:25  49  -- Derive date related attributes:
04:08:25  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
04:08:25  51  ,0+TO_CHAR(ydate,'D')d
04:08:25  52  ,0+TO_CHAR(ydate,'W')w
04:08:25  53  -- mpm stands for minutes-past-midnight:
04:08:25  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
04:08:25  55  -- mph stands for minutes-past-hour:
04:08:25  56  ,0+TO_CHAR(ydate,'MI')mph
04:08:25  57  FROM svm6102
04:08:25  58  ORDER BY ydate
04:08:25  59  /

Table created.

Elapsed: 00:00:02.10
04:08:27 SQL> 
04:08:27 SQL> -- rpt
04:08:27 SQL> 
04:08:27 SQL> SELECT
04:08:27   2  pair
04:08:27   3  ,COUNT(pair)
04:08:27   4  ,MIN(clse),MAX(clse)
04:08:27   5  ,MIN(ydate),MAX(ydate)
04:08:27   6  FROM svm6122
04:08:27   7  GROUP BY pair
04:08:27   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19326	.95405	  1.02495 2010-10-03 20:55:01 2011-01-05 04:05:00

Elapsed: 00:00:00.04
04:08:27 SQL> 
04:08:27 SQL> -- Prepare for derivation of NTILE based params:
04:08:27 SQL> 
04:08:27 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.87
04:08:28 SQL> CREATE TABLE svm6142 COMPRESS AS
04:08:28   2  SELECT
04:08:28   3  pair
04:08:28   4  ,ydate
04:08:28   5  ,prdate
04:08:28   6  ,clse
04:08:28   7  ,g6
04:08:28   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
04:08:28   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
04:08:28  10  ,CASE WHEN trend IS NULL THEN 1
04:08:28  11  	    WHEN trend =0      THEN 1
04:08:28  12  	    ELSE trend END trend
04:08:28  13  ,cm4
04:08:28  14  ,cm6
04:08:28  15  ,cm8
04:08:28  16  ,cm10
04:08:28  17  ,cm12
04:08:28  18  ,cm14
04:08:28  19  ,cm16
04:08:28  20  ,cm18
04:08:28  21  --
04:08:28  22  ,ca4
04:08:28  23  ,ca6
04:08:28  24  ,ca8
04:08:28  25  ,ca10
04:08:28  26  ,ca12
04:08:28  27  ,ca14
04:08:28  28  ,ca16
04:08:28  29  ,ca18
04:08:28  30  --
04:08:28  31  ,cx4
04:08:28  32  ,cx6
04:08:28  33  ,cx8
04:08:28  34  ,cx10
04:08:28  35  ,cx12
04:08:28  36  ,cx14
04:08:28  37  ,cx16
04:08:28  38  ,cx18
04:08:28  39  --
04:08:28  40  ,crr4
04:08:28  41  ,crr6
04:08:28  42  ,crr8
04:08:28  43  ,crr10
04:08:28  44  ,crr12
04:08:28  45  ,crr14
04:08:28  46  ,crr16
04:08:28  47  ,crr18
04:08:28  48  --
04:08:28  49  ,hh
04:08:28  50  ,d
04:08:28  51  ,w
04:08:28  52  ,mpm
04:08:28  53  ,mph
04:08:28  54  FROM svm6122
04:08:28  55  ORDER BY ydate
04:08:28  56  /

Table created.

Elapsed: 00:00:00.37
04:08:28 SQL> 
04:08:28 SQL> -- rpt
04:08:28 SQL> 
04:08:28 SQL> SELECT
04:08:28   2  pair
04:08:28   3  ,trend
04:08:28   4  ,gatt
04:08:28   5  ,COUNT(pair)
04:08:28   6  ,AVG(g6)
04:08:28   7  FROM svm6142
04:08:28   8  GROUP BY pair,trend,gatt
04:08:28   9  ORDER BY pair,trend,gatt
04:08:28  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5427  -.0021964
aud_usd 	-1 up	      3646 .003769261
aud_usd 	-1		42
aud_usd 	 1 nup	      6588 -.00212107
aud_usd 	 1 up	      3593 .004054752
aud_usd 	 1		30

6 rows selected.

Elapsed: 00:00:00.04
04:08:28 SQL> 
04:08:28 SQL> 
04:08:28 SQL> -- Derive NTILE based params:
04:08:28 SQL> 
04:08:28 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
04:08:28 SQL> CREATE TABLE svm6162 COMPRESS AS
04:08:28   2  SELECT
04:08:28   3  pair
04:08:28   4  ,ydate
04:08:28   5  ,prdate
04:08:28   6  ,clse
04:08:28   7  ,g6
04:08:28   8  ,gatt
04:08:28   9  ,gattn
04:08:28  10  ,trend
04:08:28  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
04:08:28  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
04:08:28  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
04:08:28  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
04:08:28  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
04:08:28  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
04:08:28  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
04:08:28  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
04:08:28  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
04:08:28  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
04:08:28  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
04:08:28  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
04:08:28  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
04:08:28  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
04:08:28  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
04:08:28  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
04:08:28  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
04:08:28  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
04:08:28  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
04:08:28  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
04:08:28  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
04:08:28  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
04:08:28  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
04:08:28  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
04:08:28  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
04:08:28  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
04:08:28  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
04:08:28  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
04:08:28  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
04:08:28  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
04:08:28  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
04:08:28  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
04:08:28  43  ,hh  att32
04:08:28  44  ,d   att33
04:08:28  45  ,w   att34
04:08:28  46  ,mpm att35
04:08:28  47  ,mph att36
04:08:28  48  ,trend att37
04:08:28  49  FROM svm6142
04:08:28  50  ORDER BY ydate
04:08:28  51  /

Table created.

Elapsed: 00:00:04.71
04:08:33 SQL> 
04:08:33 SQL> -- rpt
04:08:33 SQL> 
04:08:33 SQL> SELECT
04:08:33   2  pair
04:08:33   3  ,trend
04:08:33   4  ,gatt
04:08:33   5  ,COUNT(pair)
04:08:33   6  ,AVG(g6)
04:08:33   7  FROM svm6162
04:08:33   8  GROUP BY pair,trend,gatt
04:08:33   9  ORDER BY pair,trend,gatt
04:08:33  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5427  -.0021964
aud_usd 	-1 up	      3646 .003769261
aud_usd 	-1		42
aud_usd 	 1 nup	      6588 -.00212107
aud_usd 	 1 up	      3593 .004054752
aud_usd 	 1		30

6 rows selected.

Elapsed: 00:00:00.03
04:08:33 SQL> 
04:08:33 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.22
04:08:33 SQL> CREATE TABLE modsrc COMPRESS AS
04:08:33   2  SELECT
04:08:33   3  pair
04:08:33   4  ,ydate
04:08:33   5  ,prdate
04:08:33   6  ,trend
04:08:33   7  ,g6
04:08:33   8  ,gatt
04:08:33   9  ,gattn
04:08:33  10  FROM svm6162
04:08:33  11  /

Table created.

Elapsed: 00:00:00.08
04:08:33 SQL> 
04:08:33 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
04:08:34 SQL> 
04:08:34 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
04:08:34 SQL> CREATE TABLE aud_ms610 COMPRESS AS
04:08:34   2  SELECT
04:08:34   3  ydate
04:08:34   4  ,trend aud_trend
04:08:34   5  ,g6    aud_g6
04:08:34   6  ,gatt  aud_gatt
04:08:34   7  ,gattn aud_gattn
04:08:34   8  FROM modsrc
04:08:34   9  /

Table created.

Elapsed: 00:00:00.06
04:08:34 SQL> 
04:08:34 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
04:08:34 SQL> 
04:08:34 SQL> -- I need a copy of the attributes:
04:08:34 SQL> 
04:08:34 SQL> 
04:08:34 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.04
04:08:34 SQL> CREATE TABLE aud_att COMPRESS AS
04:08:34   2  SELECT
04:08:34   3  ydate
04:08:34   4  ,att00 aud_att00
04:08:34   5  ,att01 aud_att01
04:08:34   6  ,att02 aud_att02
04:08:34   7  ,att03 aud_att03
04:08:34   8  ,att04 aud_att04
04:08:34   9  ,att05 aud_att05
04:08:34  10  ,att06 aud_att06
04:08:34  11  ,att07 aud_att07
04:08:34  12  ,att08 aud_att08
04:08:34  13  ,att09 aud_att09
04:08:34  14  ,att10 aud_att10
04:08:34  15  ,att11 aud_att11
04:08:34  16  ,att12 aud_att12
04:08:34  17  ,att13 aud_att13
04:08:34  18  ,att14 aud_att14
04:08:34  19  ,att15 aud_att15
04:08:34  20  ,att16 aud_att16
04:08:34  21  ,att17 aud_att17
04:08:34  22  ,att18 aud_att18
04:08:34  23  ,att19 aud_att19
04:08:34  24  ,att20 aud_att20
04:08:34  25  ,att21 aud_att21
04:08:34  26  ,att22 aud_att22
04:08:34  27  ,att23 aud_att23
04:08:34  28  ,att24 aud_att24
04:08:34  29  ,att25 aud_att25
04:08:34  30  ,att26 aud_att26
04:08:34  31  ,att27 aud_att27
04:08:34  32  ,att28 aud_att28
04:08:34  33  ,att29 aud_att29
04:08:34  34  ,att30 aud_att30
04:08:34  35  ,att31 aud_att31
04:08:34  36  ,att32 aud_att32
04:08:34  37  ,att33 aud_att33
04:08:34  38  ,att34 aud_att34
04:08:34  39  ,att35 aud_att35
04:08:34  40  ,att36 aud_att36
04:08:34  41  ,att37 aud_att37
04:08:34  42  FROM svm6162
04:08:34  43  /

Table created.

Elapsed: 00:00:00.16
04:08:34 SQL> 
04:08:34 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
04:08:34 SQL> 
04:08:34 SQL> -- rpt
04:08:34 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19326

Elapsed: 00:00:00.86
04:08:35 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19326

Elapsed: 00:00:00.00
04:08:35 SQL> 
04:08:35 SQL> --
04:08:35 SQL> -- gbp610.sql
04:08:35 SQL> --
04:08:35 SQL> 
04:08:35 SQL> -- Creates views and tables for backtesting a forex SVM strategy
04:08:35 SQL> 
04:08:35 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.41
04:08:36 SQL> 
04:08:36 SQL> -- I created di5min here:
04:08:36 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
04:08:36 SQL> 
04:08:36 SQL> CREATE OR REPLACE VIEW svm6102 AS
04:08:36   2  SELECT
04:08:36   3  pair
04:08:36   4  ,ydate
04:08:36   5  ,prdate
04:08:36   6  ,rownum rnum -- acts as t in my time-series
04:08:36   7  ,clse
04:08:36   8  -- Derive a bunch of attributes from clse, the latest price:
04:08:36   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
04:08:36  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
04:08:36  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
04:08:36  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
04:08:36  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
04:08:36  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
04:08:36  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
04:08:36  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
04:08:36  17  --
04:08:36  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
04:08:36  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
04:08:36  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
04:08:36  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
04:08:36  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
04:08:36  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
04:08:36  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
04:08:36  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
04:08:36  26  --
04:08:36  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
04:08:36  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
04:08:36  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
04:08:36  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
04:08:36  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
04:08:36  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
04:08:36  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
04:08:36  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
04:08:36  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
04:08:36  36  FROM di5min WHERE pair LIKE'%gbp%'
04:08:36  37  AND ydate > sysdate - 95
04:08:36  38  ORDER BY ydate
04:08:36  39  /

View created.

Elapsed: 00:00:00.04
04:08:36 SQL> 
04:08:36 SQL> -- rpt
04:08:36 SQL> 
04:08:36 SQL> SELECT
04:08:36   2  pair
04:08:36   3  ,COUNT(pair)
04:08:36   4  ,MIN(clse),MAX(clse)
04:08:36   5  ,MIN(avg6),MAX(avg6)
04:08:36   6  ,MIN(ydate),MAX(ydate)
04:08:36   7  FROM svm6102
04:08:36   8  GROUP BY pair
04:08:36   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19328   1.535325	   1.6295 1.53696747 1.62716986 2010-10-03 20:55:01 2011-01-05 04:05:00

Elapsed: 00:00:00.85
04:08:37 SQL> 
04:08:37 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
04:08:37 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.20
04:08:37 SQL> CREATE TABLE svm6122 COMPRESS AS
04:08:37   2  SELECT
04:08:37   3  pair
04:08:37   4  ,ydate
04:08:37   5  ,prdate
04:08:37   6  ,clse
04:08:37   7  -- g6 is important. I want to predict g6:
04:08:37   8  ,ld6 - clse g6
04:08:37   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
04:08:37  10  -- I want more attributes from the ones I derived above:
04:08:37  11  -- clse relation to moving-min
04:08:37  12  ,clse-min4  cm4
04:08:37  13  ,clse-min6  cm6
04:08:37  14  ,clse-min8  cm8
04:08:37  15  ,clse-min10 cm10
04:08:37  16  ,clse-min12 cm12
04:08:37  17  ,clse-min14 cm14
04:08:37  18  ,clse-min16 cm16
04:08:37  19  ,clse-min18 cm18
04:08:37  20  -- clse relation to moving-avg
04:08:37  21  ,clse-avg4  ca4
04:08:37  22  ,clse-avg6  ca6
04:08:37  23  ,clse-avg8  ca8
04:08:37  24  ,clse-avg10 ca10
04:08:37  25  ,clse-avg12 ca12
04:08:37  26  ,clse-avg14 ca14
04:08:37  27  ,clse-avg16 ca16
04:08:37  28  ,clse-avg18 ca18
04:08:37  29  -- clse relation to moving-max
04:08:37  30  ,clse-max4  cx4
04:08:37  31  ,clse-max6  cx6
04:08:37  32  ,clse-max8  cx8
04:08:37  33  ,clse-max10 cx10
04:08:37  34  ,clse-max12 cx12
04:08:37  35  ,clse-max14 cx14
04:08:37  36  ,clse-max16 cx16
04:08:37  37  ,clse-max18 cx18
04:08:37  38  -- Derive more attributes.
04:08:37  39  -- I want to use CORR() here to help SVM see the shape of the series.
04:08:37  40  -- But COVAR_POP is more stable:
04:08:37  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
04:08:37  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
04:08:37  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
04:08:37  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
04:08:37  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
04:08:37  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
04:08:37  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
04:08:37  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
04:08:37  49  -- Derive date related attributes:
04:08:37  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
04:08:37  51  ,0+TO_CHAR(ydate,'D')d
04:08:37  52  ,0+TO_CHAR(ydate,'W')w
04:08:37  53  -- mpm stands for minutes-past-midnight:
04:08:37  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
04:08:37  55  -- mph stands for minutes-past-hour:
04:08:37  56  ,0+TO_CHAR(ydate,'MI')mph
04:08:37  57  FROM svm6102
04:08:37  58  ORDER BY ydate
04:08:37  59  /

Table created.

Elapsed: 00:00:02.04
04:08:39 SQL> 
04:08:39 SQL> -- rpt
04:08:39 SQL> 
04:08:39 SQL> SELECT
04:08:39   2  pair
04:08:39   3  ,COUNT(pair)
04:08:39   4  ,MIN(clse),MAX(clse)
04:08:39   5  ,MIN(ydate),MAX(ydate)
04:08:39   6  FROM svm6122
04:08:39   7  GROUP BY pair
04:08:39   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19328   1.535325	   1.6295 2010-10-03 20:55:01 2011-01-05 04:05:00

Elapsed: 00:00:00.06
04:08:39 SQL> 
04:08:39 SQL> -- Prepare for derivation of NTILE based params:
04:08:39 SQL> 
04:08:39 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.17
04:08:39 SQL> CREATE TABLE svm6142 COMPRESS AS
04:08:39   2  SELECT
04:08:39   3  pair
04:08:39   4  ,ydate
04:08:39   5  ,prdate
04:08:39   6  ,clse
04:08:39   7  ,g6
04:08:39   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
04:08:39   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
04:08:39  10  ,CASE WHEN trend IS NULL THEN 1
04:08:39  11  	    WHEN trend =0      THEN 1
04:08:39  12  	    ELSE trend END trend
04:08:39  13  ,cm4
04:08:39  14  ,cm6
04:08:39  15  ,cm8
04:08:39  16  ,cm10
04:08:39  17  ,cm12
04:08:39  18  ,cm14
04:08:39  19  ,cm16
04:08:39  20  ,cm18
04:08:39  21  --
04:08:39  22  ,ca4
04:08:39  23  ,ca6
04:08:39  24  ,ca8
04:08:39  25  ,ca10
04:08:39  26  ,ca12
04:08:39  27  ,ca14
04:08:39  28  ,ca16
04:08:39  29  ,ca18
04:08:39  30  --
04:08:39  31  ,cx4
04:08:39  32  ,cx6
04:08:39  33  ,cx8
04:08:39  34  ,cx10
04:08:39  35  ,cx12
04:08:39  36  ,cx14
04:08:39  37  ,cx16
04:08:39  38  ,cx18
04:08:39  39  --
04:08:39  40  ,crr4
04:08:39  41  ,crr6
04:08:39  42  ,crr8
04:08:39  43  ,crr10
04:08:39  44  ,crr12
04:08:39  45  ,crr14
04:08:39  46  ,crr16
04:08:39  47  ,crr18
04:08:39  48  --
04:08:39  49  ,hh
04:08:39  50  ,d
04:08:39  51  ,w
04:08:39  52  ,mpm
04:08:39  53  ,mph
04:08:39  54  FROM svm6122
04:08:39  55  ORDER BY ydate
04:08:39  56  /

Table created.

Elapsed: 00:00:00.36
04:08:39 SQL> 
04:08:39 SQL> -- rpt
04:08:39 SQL> 
04:08:39 SQL> SELECT
04:08:39   2  pair
04:08:39   3  ,trend
04:08:39   4  ,gatt
04:08:39   5  ,COUNT(pair)
04:08:39   6  ,AVG(g6)
04:08:39   7  FROM svm6142
04:08:39   8  GROUP BY pair,trend,gatt
04:08:39   9  ORDER BY pair,trend,gatt
04:08:39  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6265 -.00265344
gbp_usd 	-1 up	      3464 .004389517
gbp_usd 	-1		53
gbp_usd 	 1 nup	      6087  -.0025989
gbp_usd 	 1 up	      3440 .004531722
gbp_usd 	 1		19

6 rows selected.

Elapsed: 00:00:00.04
04:08:40 SQL> 
04:08:40 SQL> 
04:08:40 SQL> -- Derive NTILE based params:
04:08:40 SQL> 
04:08:40 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.18
04:08:40 SQL> CREATE TABLE svm6162 COMPRESS AS
04:08:40   2  SELECT
04:08:40   3  pair
04:08:40   4  ,ydate
04:08:40   5  ,prdate
04:08:40   6  ,clse
04:08:40   7  ,g6
04:08:40   8  ,gatt
04:08:40   9  ,gattn
04:08:40  10  ,trend
04:08:40  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
04:08:40  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
04:08:40  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
04:08:40  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
04:08:40  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
04:08:40  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
04:08:40  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
04:08:40  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
04:08:40  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
04:08:40  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
04:08:40  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
04:08:40  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
04:08:40  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
04:08:40  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
04:08:40  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
04:08:40  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
04:08:40  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
04:08:40  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
04:08:40  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
04:08:40  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
04:08:40  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
04:08:40  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
04:08:40  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
04:08:40  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
04:08:40  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
04:08:40  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
04:08:40  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
04:08:40  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
04:08:40  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
04:08:40  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
04:08:40  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
04:08:40  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
04:08:40  43  ,hh  att32
04:08:40  44  ,d   att33
04:08:40  45  ,w   att34
04:08:40  46  ,mpm att35
04:08:40  47  ,mph att36
04:08:40  48  ,trend att37
04:08:40  49  FROM svm6142
04:08:40  50  ORDER BY ydate
04:08:40  51  /

Table created.

Elapsed: 00:00:04.67
04:08:44 SQL> 
04:08:44 SQL> -- rpt
04:08:44 SQL> 
04:08:44 SQL> SELECT
04:08:44   2  pair
04:08:44   3  ,trend
04:08:44   4  ,gatt
04:08:44   5  ,COUNT(pair)
04:08:44   6  ,AVG(g6)
04:08:44   7  FROM svm6162
04:08:44   8  GROUP BY pair,trend,gatt
04:08:44   9  ORDER BY pair,trend,gatt
04:08:44  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6265 -.00265344
gbp_usd 	-1 up	      3464 .004389517
gbp_usd 	-1		53
gbp_usd 	 1 nup	      6087  -.0025989
gbp_usd 	 1 up	      3440 .004531722
gbp_usd 	 1		19

6 rows selected.

Elapsed: 00:00:00.02
04:08:44 SQL> 
04:08:44 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.24
04:08:45 SQL> CREATE TABLE modsrc COMPRESS AS
04:08:45   2  SELECT
04:08:45   3  pair
04:08:45   4  ,ydate
04:08:45   5  ,prdate
04:08:45   6  ,trend
04:08:45   7  ,g6
04:08:45   8  ,gatt
04:08:45   9  ,gattn
04:08:45  10  FROM svm6162
04:08:45  11  /

Table created.

Elapsed: 00:00:00.07
04:08:45 SQL> 
04:08:45 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
04:08:45 SQL> 
04:08:45 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
04:08:45 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
04:08:45   2  SELECT
04:08:45   3  ydate
04:08:45   4  ,trend gbp_trend
04:08:45   5  ,g6    gbp_g6
04:08:45   6  ,gatt  gbp_gatt
04:08:45   7  ,gattn gbp_gattn
04:08:45   8  FROM modsrc
04:08:45   9  /

Table created.

Elapsed: 00:00:00.06
04:08:45 SQL> 
04:08:45 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
04:08:45 SQL> 
04:08:45 SQL> -- I need a copy of the attributes:
04:08:45 SQL> 
04:08:45 SQL> 
04:08:45 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.04
04:08:45 SQL> CREATE TABLE gbp_att COMPRESS AS
04:08:45   2  SELECT
04:08:45   3  ydate
04:08:45   4  ,att00 gbp_att00
04:08:45   5  ,att01 gbp_att01
04:08:45   6  ,att02 gbp_att02
04:08:45   7  ,att03 gbp_att03
04:08:45   8  ,att04 gbp_att04
04:08:45   9  ,att05 gbp_att05
04:08:45  10  ,att06 gbp_att06
04:08:45  11  ,att07 gbp_att07
04:08:45  12  ,att08 gbp_att08
04:08:45  13  ,att09 gbp_att09
04:08:45  14  ,att10 gbp_att10
04:08:45  15  ,att11 gbp_att11
04:08:45  16  ,att12 gbp_att12
04:08:45  17  ,att13 gbp_att13
04:08:45  18  ,att14 gbp_att14
04:08:45  19  ,att15 gbp_att15
04:08:45  20  ,att16 gbp_att16
04:08:45  21  ,att17 gbp_att17
04:08:45  22  ,att18 gbp_att18
04:08:45  23  ,att19 gbp_att19
04:08:45  24  ,att20 gbp_att20
04:08:45  25  ,att21 gbp_att21
04:08:45  26  ,att22 gbp_att22
04:08:45  27  ,att23 gbp_att23
04:08:45  28  ,att24 gbp_att24
04:08:45  29  ,att25 gbp_att25
04:08:45  30  ,att26 gbp_att26
04:08:45  31  ,att27 gbp_att27
04:08:45  32  ,att28 gbp_att28
04:08:45  33  ,att29 gbp_att29
04:08:45  34  ,att30 gbp_att30
04:08:45  35  ,att31 gbp_att31
04:08:45  36  ,att32 gbp_att32
04:08:45  37  ,att33 gbp_att33
04:08:45  38  ,att34 gbp_att34
04:08:45  39  ,att35 gbp_att35
04:08:45  40  ,att36 gbp_att36
04:08:45  41  ,att37 gbp_att37
04:08:45  42  FROM svm6162
04:08:45  43  /

Table created.

Elapsed: 00:00:00.20
04:08:45 SQL> 
04:08:45 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
04:08:46 SQL> 
04:08:46 SQL> -- rpt
04:08:46 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19328

Elapsed: 00:00:00.87
04:08:47 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19328

Elapsed: 00:00:00.00
04:08:47 SQL> 
04:08:47 SQL> --
04:08:47 SQL> -- jpy610.sql
04:08:47 SQL> --
04:08:47 SQL> 
04:08:47 SQL> -- Creates views and tables for backtesting a forex SVM strategy
04:08:47 SQL> 
04:08:47 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
04:08:47 SQL> 
04:08:47 SQL> -- I created di5min here:
04:08:47 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
04:08:47 SQL> 
04:08:47 SQL> CREATE OR REPLACE VIEW svm6102 AS
04:08:47   2  SELECT
04:08:47   3  pair
04:08:47   4  ,ydate
04:08:47   5  ,prdate
04:08:47   6  ,rownum rnum -- acts as t in my time-series
04:08:47   7  ,clse
04:08:47   8  -- Derive a bunch of attributes from clse, the latest price:
04:08:47   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
04:08:47  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
04:08:47  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
04:08:47  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
04:08:47  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
04:08:47  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
04:08:47  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
04:08:47  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
04:08:47  17  --
04:08:47  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
04:08:47  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
04:08:47  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
04:08:47  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
04:08:47  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
04:08:47  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
04:08:47  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
04:08:47  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
04:08:47  26  --
04:08:47  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
04:08:47  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
04:08:47  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
04:08:47  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
04:08:47  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
04:08:47  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
04:08:47  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
04:08:47  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
04:08:47  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
04:08:47  36  FROM di5min WHERE pair LIKE'%jpy%'
04:08:47  37  AND ydate > sysdate - 95
04:08:47  38  ORDER BY ydate
04:08:47  39  /

View created.

Elapsed: 00:00:00.06
04:08:47 SQL> 
04:08:47 SQL> -- rpt
04:08:47 SQL> 
04:08:47 SQL> SELECT
04:08:47   2  pair
04:08:47   3  ,COUNT(pair)
04:08:47   4  ,MIN(clse),MAX(clse)
04:08:47   5  ,MIN(avg6),MAX(avg6)
04:08:47   6  ,MIN(ydate),MAX(ydate)
04:08:47   7  FROM svm6102
04:08:47   8  GROUP BY pair
04:08:47   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19326	 80.25	   84.485 80.3595205 84.3105479 2010-10-03 20:55:01 2011-01-05 04:05:00

Elapsed: 00:00:00.91
04:08:48 SQL> 
04:08:48 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
04:08:48 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.20
04:08:48 SQL> CREATE TABLE svm6122 COMPRESS AS
04:08:48   2  SELECT
04:08:48   3  pair
04:08:48   4  ,ydate
04:08:48   5  ,prdate
04:08:48   6  ,clse
04:08:48   7  -- g6 is important. I want to predict g6:
04:08:48   8  ,ld6 - clse g6
04:08:48   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
04:08:48  10  -- I want more attributes from the ones I derived above:
04:08:48  11  -- clse relation to moving-min
04:08:48  12  ,clse-min4  cm4
04:08:48  13  ,clse-min6  cm6
04:08:48  14  ,clse-min8  cm8
04:08:48  15  ,clse-min10 cm10
04:08:48  16  ,clse-min12 cm12
04:08:48  17  ,clse-min14 cm14
04:08:48  18  ,clse-min16 cm16
04:08:48  19  ,clse-min18 cm18
04:08:48  20  -- clse relation to moving-avg
04:08:48  21  ,clse-avg4  ca4
04:08:48  22  ,clse-avg6  ca6
04:08:48  23  ,clse-avg8  ca8
04:08:48  24  ,clse-avg10 ca10
04:08:48  25  ,clse-avg12 ca12
04:08:48  26  ,clse-avg14 ca14
04:08:48  27  ,clse-avg16 ca16
04:08:48  28  ,clse-avg18 ca18
04:08:48  29  -- clse relation to moving-max
04:08:48  30  ,clse-max4  cx4
04:08:48  31  ,clse-max6  cx6
04:08:48  32  ,clse-max8  cx8
04:08:48  33  ,clse-max10 cx10
04:08:48  34  ,clse-max12 cx12
04:08:48  35  ,clse-max14 cx14
04:08:48  36  ,clse-max16 cx16
04:08:48  37  ,clse-max18 cx18
04:08:48  38  -- Derive more attributes.
04:08:48  39  -- I want to use CORR() here to help SVM see the shape of the series.
04:08:48  40  -- But COVAR_POP is more stable:
04:08:48  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
04:08:48  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
04:08:48  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
04:08:48  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
04:08:48  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
04:08:48  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
04:08:48  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
04:08:48  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
04:08:48  49  -- Derive date related attributes:
04:08:48  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
04:08:48  51  ,0+TO_CHAR(ydate,'D')d
04:08:48  52  ,0+TO_CHAR(ydate,'W')w
04:08:48  53  -- mpm stands for minutes-past-midnight:
04:08:48  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
04:08:48  55  -- mph stands for minutes-past-hour:
04:08:48  56  ,0+TO_CHAR(ydate,'MI')mph
04:08:48  57  FROM svm6102
04:08:48  58  ORDER BY ydate
04:08:48  59  /

Table created.

Elapsed: 00:00:02.11
04:08:50 SQL> 
04:08:50 SQL> -- rpt
04:08:50 SQL> 
04:08:50 SQL> SELECT
04:08:50   2  pair
04:08:50   3  ,COUNT(pair)
04:08:50   4  ,MIN(clse),MAX(clse)
04:08:50   5  ,MIN(ydate),MAX(ydate)
04:08:50   6  FROM svm6122
04:08:50   7  GROUP BY pair
04:08:50   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19326	 80.25	   84.485 2010-10-03 20:55:01 2011-01-05 04:05:00

Elapsed: 00:00:00.04
04:08:50 SQL> 
04:08:50 SQL> -- Prepare for derivation of NTILE based params:
04:08:50 SQL> 
04:08:50 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.26
04:08:51 SQL> CREATE TABLE svm6142 COMPRESS AS
04:08:51   2  SELECT
04:08:51   3  pair
04:08:51   4  ,ydate
04:08:51   5  ,prdate
04:08:51   6  ,clse
04:08:51   7  ,g6
04:08:51   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
04:08:51   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
04:08:51  10  ,CASE WHEN trend IS NULL THEN 1
04:08:51  11  	    WHEN trend =0      THEN 1
04:08:51  12  	    ELSE trend END trend
04:08:51  13  ,cm4
04:08:51  14  ,cm6
04:08:51  15  ,cm8
04:08:51  16  ,cm10
04:08:51  17  ,cm12
04:08:51  18  ,cm14
04:08:51  19  ,cm16
04:08:51  20  ,cm18
04:08:51  21  --
04:08:51  22  ,ca4
04:08:51  23  ,ca6
04:08:51  24  ,ca8
04:08:51  25  ,ca10
04:08:51  26  ,ca12
04:08:51  27  ,ca14
04:08:51  28  ,ca16
04:08:51  29  ,ca18
04:08:51  30  --
04:08:51  31  ,cx4
04:08:51  32  ,cx6
04:08:51  33  ,cx8
04:08:51  34  ,cx10
04:08:51  35  ,cx12
04:08:51  36  ,cx14
04:08:51  37  ,cx16
04:08:51  38  ,cx18
04:08:51  39  --
04:08:51  40  ,crr4
04:08:51  41  ,crr6
04:08:51  42  ,crr8
04:08:51  43  ,crr10
04:08:51  44  ,crr12
04:08:51  45  ,crr14
04:08:51  46  ,crr16
04:08:51  47  ,crr18
04:08:51  48  --
04:08:51  49  ,hh
04:08:51  50  ,d
04:08:51  51  ,w
04:08:51  52  ,mpm
04:08:51  53  ,mph
04:08:51  54  FROM svm6122
04:08:51  55  ORDER BY ydate
04:08:51  56  /

Table created.

Elapsed: 00:00:00.35
04:08:51 SQL> 
04:08:51 SQL> -- rpt
04:08:51 SQL> 
04:08:51 SQL> SELECT
04:08:51   2  pair
04:08:51   3  ,trend
04:08:51   4  ,gatt
04:08:51   5  ,COUNT(pair)
04:08:51   6  ,AVG(g6)
04:08:51   7  FROM svm6142
04:08:51   8  GROUP BY pair,trend,gatt
04:08:51   9  ORDER BY pair,trend,gatt
04:08:51  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5110 -.16667614
usd_jpy 	-1 up	      4778 .163779074
usd_jpy 	-1		 1
usd_jpy 	 1 nup	      4930 -.15710822
usd_jpy 	 1 up	      4436 .168490404
usd_jpy 	 1		71

6 rows selected.

Elapsed: 00:00:00.04
04:08:51 SQL> 
04:08:51 SQL> 
04:08:51 SQL> -- Derive NTILE based params:
04:08:51 SQL> 
04:08:51 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.14
04:08:51 SQL> CREATE TABLE svm6162 COMPRESS AS
04:08:51   2  SELECT
04:08:51   3  pair
04:08:51   4  ,ydate
04:08:51   5  ,prdate
04:08:51   6  ,clse
04:08:51   7  ,g6
04:08:51   8  ,gatt
04:08:51   9  ,gattn
04:08:51  10  ,trend
04:08:51  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
04:08:51  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
04:08:51  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
04:08:51  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
04:08:51  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
04:08:51  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
04:08:51  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
04:08:51  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
04:08:51  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
04:08:51  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
04:08:51  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
04:08:51  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
04:08:51  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
04:08:51  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
04:08:51  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
04:08:51  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
04:08:51  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
04:08:51  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
04:08:51  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
04:08:51  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
04:08:51  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
04:08:51  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
04:08:51  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
04:08:51  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
04:08:51  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
04:08:51  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
04:08:51  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
04:08:51  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
04:08:51  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
04:08:51  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
04:08:51  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
04:08:51  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
04:08:51  43  ,hh  att32
04:08:51  44  ,d   att33
04:08:51  45  ,w   att34
04:08:51  46  ,mpm att35
04:08:51  47  ,mph att36
04:08:51  48  ,trend att37
04:08:51  49  FROM svm6142
04:08:51  50  ORDER BY ydate
04:08:51  51  /

Table created.

Elapsed: 00:00:04.67
04:08:56 SQL> 
04:08:56 SQL> -- rpt
04:08:56 SQL> 
04:08:56 SQL> SELECT
04:08:56   2  pair
04:08:56   3  ,trend
04:08:56   4  ,gatt
04:08:56   5  ,COUNT(pair)
04:08:56   6  ,AVG(g6)
04:08:56   7  FROM svm6162
04:08:56   8  GROUP BY pair,trend,gatt
04:08:56   9  ORDER BY pair,trend,gatt
04:08:56  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5110 -.16667614
usd_jpy 	-1 up	      4778 .163779074
usd_jpy 	-1		 1
usd_jpy 	 1 nup	      4930 -.15710822
usd_jpy 	 1 up	      4436 .168490404
usd_jpy 	 1		71

6 rows selected.

Elapsed: 00:00:00.03
04:08:56 SQL> 
04:08:56 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
04:08:56 SQL> CREATE TABLE modsrc COMPRESS AS
04:08:56   2  SELECT
04:08:56   3  pair
04:08:56   4  ,ydate
04:08:56   5  ,prdate
04:08:56   6  ,trend
04:08:56   7  ,g6
04:08:56   8  ,gatt
04:08:56   9  ,gattn
04:08:56  10  FROM svm6162
04:08:56  11  /

Table created.

Elapsed: 00:00:00.09
04:08:56 SQL> 
04:08:56 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
04:08:56 SQL> 
04:08:56 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
04:08:56 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
04:08:56   2  SELECT
04:08:56   3  ydate
04:08:56   4  ,trend jpy_trend
04:08:56   5  ,g6    jpy_g6
04:08:56   6  ,gatt  jpy_gatt
04:08:56   7  ,gattn jpy_gattn
04:08:56   8  FROM modsrc
04:08:56   9  /

Table created.

Elapsed: 00:00:00.06
04:08:56 SQL> 
04:08:56 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
04:08:57 SQL> 
04:08:57 SQL> -- I need a copy of the attributes:
04:08:57 SQL> 
04:08:57 SQL> 
04:08:57 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.04
04:08:57 SQL> CREATE TABLE jpy_att COMPRESS AS
04:08:57   2  SELECT
04:08:57   3  ydate
04:08:57   4  ,att00 jpy_att00
04:08:57   5  ,att01 jpy_att01
04:08:57   6  ,att02 jpy_att02
04:08:57   7  ,att03 jpy_att03
04:08:57   8  ,att04 jpy_att04
04:08:57   9  ,att05 jpy_att05
04:08:57  10  ,att06 jpy_att06
04:08:57  11  ,att07 jpy_att07
04:08:57  12  ,att08 jpy_att08
04:08:57  13  ,att09 jpy_att09
04:08:57  14  ,att10 jpy_att10
04:08:57  15  ,att11 jpy_att11
04:08:57  16  ,att12 jpy_att12
04:08:57  17  ,att13 jpy_att13
04:08:57  18  ,att14 jpy_att14
04:08:57  19  ,att15 jpy_att15
04:08:57  20  ,att16 jpy_att16
04:08:57  21  ,att17 jpy_att17
04:08:57  22  ,att18 jpy_att18
04:08:57  23  ,att19 jpy_att19
04:08:57  24  ,att20 jpy_att20
04:08:57  25  ,att21 jpy_att21
04:08:57  26  ,att22 jpy_att22
04:08:57  27  ,att23 jpy_att23
04:08:57  28  ,att24 jpy_att24
04:08:57  29  ,att25 jpy_att25
04:08:57  30  ,att26 jpy_att26
04:08:57  31  ,att27 jpy_att27
04:08:57  32  ,att28 jpy_att28
04:08:57  33  ,att29 jpy_att29
04:08:57  34  ,att30 jpy_att30
04:08:57  35  ,att31 jpy_att31
04:08:57  36  ,att32 jpy_att32
04:08:57  37  ,att33 jpy_att33
04:08:57  38  ,att34 jpy_att34
04:08:57  39  ,att35 jpy_att35
04:08:57  40  ,att36 jpy_att36
04:08:57  41  ,att37 jpy_att37
04:08:57  42  FROM svm6162
04:08:57  43  /

Table created.

Elapsed: 00:00:00.19
04:08:57 SQL> 
04:08:57 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:01.63
04:08:58 SQL> 
04:08:58 SQL> -- rpt
04:08:58 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19326

Elapsed: 00:00:00.91
04:08:59 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19326

Elapsed: 00:00:00.00
04:08:59 SQL> 
04:08:59 SQL> --
04:08:59 SQL> -- cad610.sql
04:08:59 SQL> --
04:08:59 SQL> 
04:08:59 SQL> -- Creates views and tables for backtesting a forex SVM strategy
04:08:59 SQL> 
04:08:59 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.37
04:09:00 SQL> 
04:09:00 SQL> -- I created di5min here:
04:09:00 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
04:09:00 SQL> 
04:09:00 SQL> CREATE OR REPLACE VIEW svm6102 AS
04:09:00   2  SELECT
04:09:00   3  pair
04:09:00   4  ,ydate
04:09:00   5  ,prdate
04:09:00   6  ,rownum rnum -- acts as t in my time-series
04:09:00   7  ,clse
04:09:00   8  -- Derive a bunch of attributes from clse, the latest price:
04:09:00   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
04:09:00  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
04:09:00  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
04:09:00  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
04:09:00  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
04:09:00  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
04:09:00  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
04:09:00  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
04:09:00  17  --
04:09:00  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
04:09:00  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
04:09:00  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
04:09:00  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
04:09:00  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
04:09:00  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
04:09:00  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
04:09:00  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
04:09:00  26  --
04:09:00  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
04:09:00  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
04:09:00  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
04:09:00  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
04:09:00  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
04:09:00  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
04:09:00  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
04:09:00  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
04:09:00  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
04:09:00  36  FROM di5min WHERE pair LIKE'%cad%'
04:09:00  37  AND ydate > sysdate - 95
04:09:00  38  ORDER BY ydate
04:09:00  39  /

View created.

Elapsed: 00:00:00.07
04:09:00 SQL> 
04:09:00 SQL> -- rpt
04:09:00 SQL> 
04:09:00 SQL> SELECT
04:09:00   2  pair
04:09:00   3  ,COUNT(pair)
04:09:00   4  ,MIN(clse),MAX(clse)
04:09:00   5  ,MIN(avg6),MAX(avg6)
04:09:00   6  ,MIN(ydate),MAX(ydate)
04:09:00   7  FROM svm6102
04:09:00   8  GROUP BY pair
04:09:00   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19326    .988925	   1.0355 .990603938 1.03282877 2010-10-03 20:55:01 2011-01-05 04:05:00

Elapsed: 00:00:00.86
04:09:01 SQL> 
04:09:01 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
04:09:01 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.25
04:09:01 SQL> CREATE TABLE svm6122 COMPRESS AS
04:09:01   2  SELECT
04:09:01   3  pair
04:09:01   4  ,ydate
04:09:01   5  ,prdate
04:09:01   6  ,clse
04:09:01   7  -- g6 is important. I want to predict g6:
04:09:01   8  ,ld6 - clse g6
04:09:01   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
04:09:01  10  -- I want more attributes from the ones I derived above:
04:09:01  11  -- clse relation to moving-min
04:09:01  12  ,clse-min4  cm4
04:09:01  13  ,clse-min6  cm6
04:09:01  14  ,clse-min8  cm8
04:09:01  15  ,clse-min10 cm10
04:09:01  16  ,clse-min12 cm12
04:09:01  17  ,clse-min14 cm14
04:09:01  18  ,clse-min16 cm16
04:09:01  19  ,clse-min18 cm18
04:09:01  20  -- clse relation to moving-avg
04:09:01  21  ,clse-avg4  ca4
04:09:01  22  ,clse-avg6  ca6
04:09:01  23  ,clse-avg8  ca8
04:09:01  24  ,clse-avg10 ca10
04:09:01  25  ,clse-avg12 ca12
04:09:01  26  ,clse-avg14 ca14
04:09:01  27  ,clse-avg16 ca16
04:09:01  28  ,clse-avg18 ca18
04:09:01  29  -- clse relation to moving-max
04:09:01  30  ,clse-max4  cx4
04:09:01  31  ,clse-max6  cx6
04:09:01  32  ,clse-max8  cx8
04:09:01  33  ,clse-max10 cx10
04:09:01  34  ,clse-max12 cx12
04:09:01  35  ,clse-max14 cx14
04:09:01  36  ,clse-max16 cx16
04:09:01  37  ,clse-max18 cx18
04:09:01  38  -- Derive more attributes.
04:09:01  39  -- I want to use CORR() here to help SVM see the shape of the series.
04:09:01  40  -- But COVAR_POP is more stable:
04:09:01  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
04:09:01  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
04:09:01  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
04:09:01  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
04:09:01  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
04:09:01  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
04:09:01  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
04:09:01  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
04:09:01  49  -- Derive date related attributes:
04:09:01  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
04:09:01  51  ,0+TO_CHAR(ydate,'D')d
04:09:01  52  ,0+TO_CHAR(ydate,'W')w
04:09:01  53  -- mpm stands for minutes-past-midnight:
04:09:01  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
04:09:01  55  -- mph stands for minutes-past-hour:
04:09:01  56  ,0+TO_CHAR(ydate,'MI')mph
04:09:01  57  FROM svm6102
04:09:01  58  ORDER BY ydate
04:09:01  59  /

Table created.

Elapsed: 00:00:02.04
04:09:03 SQL> 
04:09:03 SQL> -- rpt
04:09:03 SQL> 
04:09:03 SQL> SELECT
04:09:03   2  pair
04:09:03   3  ,COUNT(pair)
04:09:03   4  ,MIN(clse),MAX(clse)
04:09:03   5  ,MIN(ydate),MAX(ydate)
04:09:03   6  FROM svm6122
04:09:03   7  GROUP BY pair
04:09:03   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19326    .988925	   1.0355 2010-10-03 20:55:01 2011-01-05 04:05:00

Elapsed: 00:00:00.04
04:09:03 SQL> 
04:09:03 SQL> -- Prepare for derivation of NTILE based params:
04:09:03 SQL> 
04:09:03 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.17
04:09:03 SQL> CREATE TABLE svm6142 COMPRESS AS
04:09:03   2  SELECT
04:09:03   3  pair
04:09:03   4  ,ydate
04:09:03   5  ,prdate
04:09:03   6  ,clse
04:09:03   7  ,g6
04:09:03   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
04:09:03   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
04:09:03  10  ,CASE WHEN trend IS NULL THEN 1
04:09:03  11  	    WHEN trend =0      THEN 1
04:09:03  12  	    ELSE trend END trend
04:09:03  13  ,cm4
04:09:03  14  ,cm6
04:09:03  15  ,cm8
04:09:03  16  ,cm10
04:09:03  17  ,cm12
04:09:03  18  ,cm14
04:09:03  19  ,cm16
04:09:03  20  ,cm18
04:09:03  21  --
04:09:03  22  ,ca4
04:09:03  23  ,ca6
04:09:03  24  ,ca8
04:09:03  25  ,ca10
04:09:03  26  ,ca12
04:09:03  27  ,ca14
04:09:03  28  ,ca16
04:09:03  29  ,ca18
04:09:03  30  --
04:09:03  31  ,cx4
04:09:03  32  ,cx6
04:09:03  33  ,cx8
04:09:03  34  ,cx10
04:09:03  35  ,cx12
04:09:03  36  ,cx14
04:09:03  37  ,cx16
04:09:03  38  ,cx18
04:09:03  39  --
04:09:03  40  ,crr4
04:09:03  41  ,crr6
04:09:03  42  ,crr8
04:09:03  43  ,crr10
04:09:03  44  ,crr12
04:09:03  45  ,crr14
04:09:03  46  ,crr16
04:09:03  47  ,crr18
04:09:03  48  --
04:09:03  49  ,hh
04:09:03  50  ,d
04:09:03  51  ,w
04:09:03  52  ,mpm
04:09:03  53  ,mph
04:09:03  54  FROM svm6122
04:09:03  55  ORDER BY ydate
04:09:03  56  /

Table created.

Elapsed: 00:00:00.37
04:09:04 SQL> 
04:09:04 SQL> -- rpt
04:09:04 SQL> 
04:09:04 SQL> SELECT
04:09:04   2  pair
04:09:04   3  ,trend
04:09:04   4  ,gatt
04:09:04   5  ,COUNT(pair)
04:09:04   6  ,AVG(g6)
04:09:04   7  FROM svm6142
04:09:04   8  GROUP BY pair,trend,gatt
04:09:04   9  ORDER BY pair,trend,gatt
04:09:04  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7144 -.00124408
usd_cad 	-1 up	      3061 .003077006
usd_cad 	-1		40
usd_cad 	 1 nup	      6671 -.00160643
usd_cad 	 1 up	      2378 .003658419
usd_cad 	 1		32

6 rows selected.

Elapsed: 00:00:00.03
04:09:04 SQL> 
04:09:04 SQL> 
04:09:04 SQL> -- Derive NTILE based params:
04:09:04 SQL> 
04:09:04 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
04:09:04 SQL> CREATE TABLE svm6162 COMPRESS AS
04:09:04   2  SELECT
04:09:04   3  pair
04:09:04   4  ,ydate
04:09:04   5  ,prdate
04:09:04   6  ,clse
04:09:04   7  ,g6
04:09:04   8  ,gatt
04:09:04   9  ,gattn
04:09:04  10  ,trend
04:09:04  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
04:09:04  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
04:09:04  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
04:09:04  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
04:09:04  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
04:09:04  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
04:09:04  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
04:09:04  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
04:09:04  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
04:09:04  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
04:09:04  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
04:09:04  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
04:09:04  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
04:09:04  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
04:09:04  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
04:09:04  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
04:09:04  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
04:09:04  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
04:09:04  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
04:09:04  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
04:09:04  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
04:09:04  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
04:09:04  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
04:09:04  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
04:09:04  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
04:09:04  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
04:09:04  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
04:09:04  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
04:09:04  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
04:09:04  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
04:09:04  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
04:09:04  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
04:09:04  43  ,hh  att32
04:09:04  44  ,d   att33
04:09:04  45  ,w   att34
04:09:04  46  ,mpm att35
04:09:04  47  ,mph att36
04:09:04  48  ,trend att37
04:09:04  49  FROM svm6142
04:09:04  50  ORDER BY ydate
04:09:04  51  /

Table created.

Elapsed: 00:00:04.69
04:09:08 SQL> 
04:09:08 SQL> -- rpt
04:09:08 SQL> 
04:09:08 SQL> SELECT
04:09:08   2  pair
04:09:08   3  ,trend
04:09:08   4  ,gatt
04:09:08   5  ,COUNT(pair)
04:09:08   6  ,AVG(g6)
04:09:08   7  FROM svm6162
04:09:08   8  GROUP BY pair,trend,gatt
04:09:08   9  ORDER BY pair,trend,gatt
04:09:08  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7144 -.00124408
usd_cad 	-1 up	      3061 .003077006
usd_cad 	-1		40
usd_cad 	 1 nup	      6671 -.00160643
usd_cad 	 1 up	      2378 .003658419
usd_cad 	 1		32

6 rows selected.

Elapsed: 00:00:00.03
04:09:08 SQL> 
04:09:08 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.22
04:09:09 SQL> CREATE TABLE modsrc COMPRESS AS
04:09:09   2  SELECT
04:09:09   3  pair
04:09:09   4  ,ydate
04:09:09   5  ,prdate
04:09:09   6  ,trend
04:09:09   7  ,g6
04:09:09   8  ,gatt
04:09:09   9  ,gattn
04:09:09  10  FROM svm6162
04:09:09  11  /

Table created.

Elapsed: 00:00:00.09
04:09:09 SQL> 
04:09:09 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.24
04:09:09 SQL> 
04:09:09 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
04:09:09 SQL> CREATE TABLE cad_ms610 COMPRESS AS
04:09:09   2  SELECT
04:09:09   3  ydate
04:09:09   4  ,trend cad_trend
04:09:09   5  ,g6    cad_g6
04:09:09   6  ,gatt  cad_gatt
04:09:09   7  ,gattn cad_gattn
04:09:09   8  FROM modsrc
04:09:09   9  /

Table created.

Elapsed: 00:00:00.07
04:09:09 SQL> 
04:09:09 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
04:09:09 SQL> 
04:09:09 SQL> -- I need a copy of the attributes:
04:09:09 SQL> 
04:09:09 SQL> 
04:09:09 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.04
04:09:09 SQL> CREATE TABLE cad_att COMPRESS AS
04:09:09   2  SELECT
04:09:09   3  ydate
04:09:09   4  ,att00 cad_att00
04:09:09   5  ,att01 cad_att01
04:09:09   6  ,att02 cad_att02
04:09:09   7  ,att03 cad_att03
04:09:09   8  ,att04 cad_att04
04:09:09   9  ,att05 cad_att05
04:09:09  10  ,att06 cad_att06
04:09:09  11  ,att07 cad_att07
04:09:09  12  ,att08 cad_att08
04:09:09  13  ,att09 cad_att09
04:09:09  14  ,att10 cad_att10
04:09:09  15  ,att11 cad_att11
04:09:09  16  ,att12 cad_att12
04:09:09  17  ,att13 cad_att13
04:09:09  18  ,att14 cad_att14
04:09:09  19  ,att15 cad_att15
04:09:09  20  ,att16 cad_att16
04:09:09  21  ,att17 cad_att17
04:09:09  22  ,att18 cad_att18
04:09:09  23  ,att19 cad_att19
04:09:09  24  ,att20 cad_att20
04:09:09  25  ,att21 cad_att21
04:09:09  26  ,att22 cad_att22
04:09:09  27  ,att23 cad_att23
04:09:09  28  ,att24 cad_att24
04:09:09  29  ,att25 cad_att25
04:09:09  30  ,att26 cad_att26
04:09:09  31  ,att27 cad_att27
04:09:09  32  ,att28 cad_att28
04:09:09  33  ,att29 cad_att29
04:09:09  34  ,att30 cad_att30
04:09:09  35  ,att31 cad_att31
04:09:09  36  ,att32 cad_att32
04:09:09  37  ,att33 cad_att33
04:09:09  38  ,att34 cad_att34
04:09:09  39  ,att35 cad_att35
04:09:09  40  ,att36 cad_att36
04:09:09  41  ,att37 cad_att37
04:09:09  42  FROM svm6162
04:09:09  43  /

Table created.

Elapsed: 00:00:00.18
04:09:09 SQL> 
04:09:09 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
04:09:10 SQL> 
04:09:10 SQL> -- rpt
04:09:10 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19326

Elapsed: 00:00:00.83
04:09:11 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19326

Elapsed: 00:00:00.00
04:09:11 SQL> 
04:09:11 SQL> --
04:09:11 SQL> -- chf610.sql
04:09:11 SQL> --
04:09:11 SQL> 
04:09:11 SQL> -- Creates views and tables for backtesting a forex SVM strategy
04:09:11 SQL> 
04:09:11 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.36
04:09:11 SQL> 
04:09:11 SQL> -- I created di5min here:
04:09:11 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
04:09:11 SQL> 
04:09:11 SQL> CREATE OR REPLACE VIEW svm6102 AS
04:09:11   2  SELECT
04:09:11   3  pair
04:09:11   4  ,ydate
04:09:11   5  ,prdate
04:09:11   6  ,rownum rnum -- acts as t in my time-series
04:09:11   7  ,clse
04:09:11   8  -- Derive a bunch of attributes from clse, the latest price:
04:09:11   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
04:09:11  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
04:09:11  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
04:09:11  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
04:09:11  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
04:09:11  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
04:09:11  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
04:09:11  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
04:09:11  17  --
04:09:11  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
04:09:11  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
04:09:11  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
04:09:11  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
04:09:11  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
04:09:11  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
04:09:11  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
04:09:11  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
04:09:11  26  --
04:09:11  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
04:09:11  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
04:09:11  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
04:09:11  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
04:09:11  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
04:09:11  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
04:09:11  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
04:09:11  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
04:09:11  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
04:09:11  36  FROM di5min WHERE pair LIKE'%chf%'
04:09:11  37  AND ydate > sysdate - 95
04:09:11  38  ORDER BY ydate
04:09:11  39  /

View created.

Elapsed: 00:00:00.04
04:09:11 SQL> 
04:09:11 SQL> -- rpt
04:09:11 SQL> 
04:09:11 SQL> SELECT
04:09:11   2  pair
04:09:11   3  ,COUNT(pair)
04:09:11   4  ,MIN(clse),MAX(clse)
04:09:11   5  ,MIN(avg6),MAX(avg6)
04:09:11   6  ,MIN(ydate),MAX(ydate)
04:09:11   7  FROM svm6102
04:09:11   8  GROUP BY pair
04:09:11   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19329    .931675	  1.00635  .93325411 1.00498151 2010-10-03 20:55:01 2011-01-05 04:05:00

Elapsed: 00:00:00.87
04:09:12 SQL> 
04:09:12 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
04:09:12 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.21
04:09:12 SQL> CREATE TABLE svm6122 COMPRESS AS
04:09:12   2  SELECT
04:09:12   3  pair
04:09:12   4  ,ydate
04:09:12   5  ,prdate
04:09:12   6  ,clse
04:09:12   7  -- g6 is important. I want to predict g6:
04:09:12   8  ,ld6 - clse g6
04:09:12   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
04:09:12  10  -- I want more attributes from the ones I derived above:
04:09:12  11  -- clse relation to moving-min
04:09:12  12  ,clse-min4  cm4
04:09:12  13  ,clse-min6  cm6
04:09:12  14  ,clse-min8  cm8
04:09:12  15  ,clse-min10 cm10
04:09:12  16  ,clse-min12 cm12
04:09:12  17  ,clse-min14 cm14
04:09:12  18  ,clse-min16 cm16
04:09:12  19  ,clse-min18 cm18
04:09:12  20  -- clse relation to moving-avg
04:09:12  21  ,clse-avg4  ca4
04:09:12  22  ,clse-avg6  ca6
04:09:12  23  ,clse-avg8  ca8
04:09:12  24  ,clse-avg10 ca10
04:09:12  25  ,clse-avg12 ca12
04:09:12  26  ,clse-avg14 ca14
04:09:12  27  ,clse-avg16 ca16
04:09:12  28  ,clse-avg18 ca18
04:09:12  29  -- clse relation to moving-max
04:09:12  30  ,clse-max4  cx4
04:09:12  31  ,clse-max6  cx6
04:09:12  32  ,clse-max8  cx8
04:09:12  33  ,clse-max10 cx10
04:09:12  34  ,clse-max12 cx12
04:09:12  35  ,clse-max14 cx14
04:09:12  36  ,clse-max16 cx16
04:09:12  37  ,clse-max18 cx18
04:09:12  38  -- Derive more attributes.
04:09:12  39  -- I want to use CORR() here to help SVM see the shape of the series.
04:09:12  40  -- But COVAR_POP is more stable:
04:09:12  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
04:09:12  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
04:09:12  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
04:09:12  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
04:09:12  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
04:09:12  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
04:09:12  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
04:09:12  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
04:09:12  49  -- Derive date related attributes:
04:09:12  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
04:09:12  51  ,0+TO_CHAR(ydate,'D')d
04:09:12  52  ,0+TO_CHAR(ydate,'W')w
04:09:12  53  -- mpm stands for minutes-past-midnight:
04:09:12  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
04:09:12  55  -- mph stands for minutes-past-hour:
04:09:12  56  ,0+TO_CHAR(ydate,'MI')mph
04:09:12  57  FROM svm6102
04:09:12  58  ORDER BY ydate
04:09:12  59  /

Table created.

Elapsed: 00:00:02.04
04:09:14 SQL> 
04:09:14 SQL> -- rpt
04:09:14 SQL> 
04:09:14 SQL> SELECT
04:09:14   2  pair
04:09:14   3  ,COUNT(pair)
04:09:14   4  ,MIN(clse),MAX(clse)
04:09:14   5  ,MIN(ydate),MAX(ydate)
04:09:14   6  FROM svm6122
04:09:14   7  GROUP BY pair
04:09:14   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19329    .931675	  1.00635 2010-10-03 20:55:01 2011-01-05 04:05:00

Elapsed: 00:00:00.03
04:09:14 SQL> 
04:09:14 SQL> -- Prepare for derivation of NTILE based params:
04:09:14 SQL> 
04:09:14 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.16
04:09:14 SQL> CREATE TABLE svm6142 COMPRESS AS
04:09:14   2  SELECT
04:09:14   3  pair
04:09:14   4  ,ydate
04:09:14   5  ,prdate
04:09:14   6  ,clse
04:09:14   7  ,g6
04:09:14   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
04:09:14   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
04:09:14  10  ,CASE WHEN trend IS NULL THEN 1
04:09:14  11  	    WHEN trend =0      THEN 1
04:09:14  12  	    ELSE trend END trend
04:09:14  13  ,cm4
04:09:14  14  ,cm6
04:09:14  15  ,cm8
04:09:14  16  ,cm10
04:09:14  17  ,cm12
04:09:14  18  ,cm14
04:09:14  19  ,cm16
04:09:14  20  ,cm18
04:09:14  21  --
04:09:14  22  ,ca4
04:09:14  23  ,ca6
04:09:14  24  ,ca8
04:09:14  25  ,ca10
04:09:14  26  ,ca12
04:09:14  27  ,ca14
04:09:14  28  ,ca16
04:09:14  29  ,ca18
04:09:14  30  --
04:09:14  31  ,cx4
04:09:14  32  ,cx6
04:09:14  33  ,cx8
04:09:14  34  ,cx10
04:09:14  35  ,cx12
04:09:14  36  ,cx14
04:09:14  37  ,cx16
04:09:14  38  ,cx18
04:09:14  39  --
04:09:14  40  ,crr4
04:09:14  41  ,crr6
04:09:14  42  ,crr8
04:09:14  43  ,crr10
04:09:14  44  ,crr12
04:09:14  45  ,crr14
04:09:14  46  ,crr16
04:09:14  47  ,crr18
04:09:14  48  --
04:09:14  49  ,hh
04:09:14  50  ,d
04:09:14  51  ,w
04:09:14  52  ,mpm
04:09:14  53  ,mph
04:09:14  54  FROM svm6122
04:09:14  55  ORDER BY ydate
04:09:14  56  /

Table created.

Elapsed: 00:00:00.37
04:09:15 SQL> 
04:09:15 SQL> -- rpt
04:09:15 SQL> 
04:09:15 SQL> SELECT
04:09:15   2  pair
04:09:15   3  ,trend
04:09:15   4  ,gatt
04:09:15   5  ,COUNT(pair)
04:09:15   6  ,AVG(g6)
04:09:15   7  FROM svm6142
04:09:15   8  GROUP BY pair,trend,gatt
04:09:15   9  ORDER BY pair,trend,gatt
04:09:15  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7061 -.00199809
usd_chf 	-1 up	      3021 .003850689
usd_chf 	-1		35
usd_chf 	 1 nup	      6395 -.00155833
usd_chf 	 1 up	      2780 .003758424
usd_chf 	 1		37

6 rows selected.

Elapsed: 00:00:00.04
04:09:15 SQL> 
04:09:15 SQL> 
04:09:15 SQL> -- Derive NTILE based params:
04:09:15 SQL> 
04:09:15 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
04:09:15 SQL> CREATE TABLE svm6162 COMPRESS AS
04:09:15   2  SELECT
04:09:15   3  pair
04:09:15   4  ,ydate
04:09:15   5  ,prdate
04:09:15   6  ,clse
04:09:15   7  ,g6
04:09:15   8  ,gatt
04:09:15   9  ,gattn
04:09:15  10  ,trend
04:09:15  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
04:09:15  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
04:09:15  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
04:09:15  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
04:09:15  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
04:09:15  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
04:09:15  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
04:09:15  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
04:09:15  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
04:09:15  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
04:09:15  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
04:09:15  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
04:09:15  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
04:09:15  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
04:09:15  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
04:09:15  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
04:09:15  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
04:09:15  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
04:09:15  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
04:09:15  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
04:09:15  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
04:09:15  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
04:09:15  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
04:09:15  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
04:09:15  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
04:09:15  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
04:09:15  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
04:09:15  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
04:09:15  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
04:09:15  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
04:09:15  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
04:09:15  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
04:09:15  43  ,hh  att32
04:09:15  44  ,d   att33
04:09:15  45  ,w   att34
04:09:15  46  ,mpm att35
04:09:15  47  ,mph att36
04:09:15  48  ,trend att37
04:09:15  49  FROM svm6142
04:09:15  50  ORDER BY ydate
04:09:15  51  /

Table created.

Elapsed: 00:00:04.67
04:09:20 SQL> 
04:09:20 SQL> -- rpt
04:09:20 SQL> 
04:09:20 SQL> SELECT
04:09:20   2  pair
04:09:20   3  ,trend
04:09:20   4  ,gatt
04:09:20   5  ,COUNT(pair)
04:09:20   6  ,AVG(g6)
04:09:20   7  FROM svm6162
04:09:20   8  GROUP BY pair,trend,gatt
04:09:20   9  ORDER BY pair,trend,gatt
04:09:20  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7061 -.00199809
usd_chf 	-1 up	      3021 .003850689
usd_chf 	-1		35
usd_chf 	 1 nup	      6395 -.00155833
usd_chf 	 1 up	      2780 .003758424
usd_chf 	 1		37

6 rows selected.

Elapsed: 00:00:00.02
04:09:20 SQL> 
04:09:20 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
04:09:20 SQL> CREATE TABLE modsrc COMPRESS AS
04:09:20   2  SELECT
04:09:20   3  pair
04:09:20   4  ,ydate
04:09:20   5  ,prdate
04:09:20   6  ,trend
04:09:20   7  ,g6
04:09:20   8  ,gatt
04:09:20   9  ,gattn
04:09:20  10  FROM svm6162
04:09:20  11  /

Table created.

Elapsed: 00:00:00.09
04:09:20 SQL> 
04:09:20 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
04:09:20 SQL> 
04:09:20 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.03
04:09:20 SQL> CREATE TABLE chf_ms610 COMPRESS AS
04:09:20   2  SELECT
04:09:20   3  ydate
04:09:20   4  ,trend chf_trend
04:09:20   5  ,g6    chf_g6
04:09:20   6  ,gatt  chf_gatt
04:09:20   7  ,gattn chf_gattn
04:09:20   8  FROM modsrc
04:09:20   9  /

Table created.

Elapsed: 00:00:00.07
04:09:20 SQL> 
04:09:20 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
04:09:20 SQL> 
04:09:20 SQL> -- I need a copy of the attributes:
04:09:20 SQL> 
04:09:20 SQL> 
04:09:20 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.04
04:09:20 SQL> CREATE TABLE chf_att COMPRESS AS
04:09:20   2  SELECT
04:09:20   3  ydate
04:09:20   4  ,att00 chf_att00
04:09:20   5  ,att01 chf_att01
04:09:20   6  ,att02 chf_att02
04:09:21   7  ,att03 chf_att03
04:09:21   8  ,att04 chf_att04
04:09:21   9  ,att05 chf_att05
04:09:21  10  ,att06 chf_att06
04:09:21  11  ,att07 chf_att07
04:09:21  12  ,att08 chf_att08
04:09:21  13  ,att09 chf_att09
04:09:21  14  ,att10 chf_att10
04:09:21  15  ,att11 chf_att11
04:09:21  16  ,att12 chf_att12
04:09:21  17  ,att13 chf_att13
04:09:21  18  ,att14 chf_att14
04:09:21  19  ,att15 chf_att15
04:09:21  20  ,att16 chf_att16
04:09:21  21  ,att17 chf_att17
04:09:21  22  ,att18 chf_att18
04:09:21  23  ,att19 chf_att19
04:09:21  24  ,att20 chf_att20
04:09:21  25  ,att21 chf_att21
04:09:21  26  ,att22 chf_att22
04:09:21  27  ,att23 chf_att23
04:09:21  28  ,att24 chf_att24
04:09:21  29  ,att25 chf_att25
04:09:21  30  ,att26 chf_att26
04:09:21  31  ,att27 chf_att27
04:09:21  32  ,att28 chf_att28
04:09:21  33  ,att29 chf_att29
04:09:21  34  ,att30 chf_att30
04:09:21  35  ,att31 chf_att31
04:09:21  36  ,att32 chf_att32
04:09:21  37  ,att33 chf_att33
04:09:21  38  ,att34 chf_att34
04:09:21  39  ,att35 chf_att35
04:09:21  40  ,att36 chf_att36
04:09:21  41  ,att37 chf_att37
04:09:21  42  FROM svm6162
04:09:21  43  /

Table created.

Elapsed: 00:00:00.16
04:09:21 SQL> 
04:09:21 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
04:09:21 SQL> 
04:09:21 SQL> -- rpt
04:09:21 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19329

Elapsed: 00:00:00.87
04:09:22 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19329

Elapsed: 00:00:00.00
04:09:22 SQL> 
04:09:22 SQL> --
04:09:22 SQL> -- ech610.sql
04:09:22 SQL> --
04:09:22 SQL> 
04:09:22 SQL> -- Creates views and tables for backtesting a forex SVM strategy
04:09:22 SQL> 
04:09:22 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
04:09:22 SQL> 
04:09:22 SQL> -- I created di5min here:
04:09:22 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
04:09:22 SQL> 
04:09:22 SQL> CREATE OR REPLACE VIEW svm6102 AS
04:09:22   2  SELECT
04:09:22   3  pair
04:09:22   4  ,ydate
04:09:22   5  ,prdate
04:09:22   6  ,rownum rnum -- acts as t in my time-series
04:09:22   7  ,clse
04:09:22   8  -- Derive a bunch of attributes from clse, the latest price:
04:09:22   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
04:09:22  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
04:09:22  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
04:09:22  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
04:09:22  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
04:09:22  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
04:09:22  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
04:09:22  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
04:09:22  17  --
04:09:22  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
04:09:22  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
04:09:22  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
04:09:22  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
04:09:22  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
04:09:22  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
04:09:22  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
04:09:22  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
04:09:22  26  --
04:09:22  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
04:09:22  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
04:09:22  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
04:09:22  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
04:09:22  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
04:09:22  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
04:09:22  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
04:09:22  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
04:09:22  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
04:09:22  36  FROM di5min WHERE pair LIKE'%ech%'
04:09:22  37  AND ydate > sysdate - 95
04:09:22  38  ORDER BY ydate
04:09:22  39  /

View created.

Elapsed: 00:00:00.04
04:09:22 SQL> 
04:09:22 SQL> -- rpt
04:09:22 SQL> 
04:09:22 SQL> SELECT
04:09:22   2  pair
04:09:22   3  ,COUNT(pair)
04:09:22   4  ,MIN(clse),MAX(clse)
04:09:22   5  ,MIN(avg6),MAX(avg6)
04:09:22   6  ,MIN(ydate),MAX(ydate)
04:09:22   7  FROM svm6102
04:09:22   8  GROUP BY pair
04:09:22   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19328 1.24192946 1.38284305 1.24320711 1.37986485 2010-10-03 20:55:01 2011-01-05 04:05:00

Elapsed: 00:00:00.81
04:09:23 SQL> 
04:09:23 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
04:09:23 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.27
04:09:23 SQL> CREATE TABLE svm6122 COMPRESS AS
04:09:23   2  SELECT
04:09:23   3  pair
04:09:23   4  ,ydate
04:09:23   5  ,prdate
04:09:23   6  ,clse
04:09:23   7  -- g6 is important. I want to predict g6:
04:09:23   8  ,ld6 - clse g6
04:09:23   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
04:09:23  10  -- I want more attributes from the ones I derived above:
04:09:23  11  -- clse relation to moving-min
04:09:23  12  ,clse-min4  cm4
04:09:23  13  ,clse-min6  cm6
04:09:23  14  ,clse-min8  cm8
04:09:23  15  ,clse-min10 cm10
04:09:23  16  ,clse-min12 cm12
04:09:23  17  ,clse-min14 cm14
04:09:23  18  ,clse-min16 cm16
04:09:23  19  ,clse-min18 cm18
04:09:23  20  -- clse relation to moving-avg
04:09:23  21  ,clse-avg4  ca4
04:09:23  22  ,clse-avg6  ca6
04:09:23  23  ,clse-avg8  ca8
04:09:23  24  ,clse-avg10 ca10
04:09:23  25  ,clse-avg12 ca12
04:09:23  26  ,clse-avg14 ca14
04:09:23  27  ,clse-avg16 ca16
04:09:23  28  ,clse-avg18 ca18
04:09:23  29  -- clse relation to moving-max
04:09:23  30  ,clse-max4  cx4
04:09:23  31  ,clse-max6  cx6
04:09:23  32  ,clse-max8  cx8
04:09:23  33  ,clse-max10 cx10
04:09:23  34  ,clse-max12 cx12
04:09:23  35  ,clse-max14 cx14
04:09:23  36  ,clse-max16 cx16
04:09:23  37  ,clse-max18 cx18
04:09:23  38  -- Derive more attributes.
04:09:23  39  -- I want to use CORR() here to help SVM see the shape of the series.
04:09:23  40  -- But COVAR_POP is more stable:
04:09:23  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
04:09:23  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
04:09:23  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
04:09:23  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
04:09:23  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
04:09:23  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
04:09:23  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
04:09:23  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
04:09:23  49  -- Derive date related attributes:
04:09:23  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
04:09:23  51  ,0+TO_CHAR(ydate,'D')d
04:09:23  52  ,0+TO_CHAR(ydate,'W')w
04:09:23  53  -- mpm stands for minutes-past-midnight:
04:09:23  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
04:09:23  55  -- mph stands for minutes-past-hour:
04:09:23  56  ,0+TO_CHAR(ydate,'MI')mph
04:09:23  57  FROM svm6102
04:09:23  58  ORDER BY ydate
04:09:23  59  /

Table created.

Elapsed: 00:00:02.09
04:09:26 SQL> 
04:09:26 SQL> -- rpt
04:09:26 SQL> 
04:09:26 SQL> SELECT
04:09:26   2  pair
04:09:26   3  ,COUNT(pair)
04:09:26   4  ,MIN(clse),MAX(clse)
04:09:26   5  ,MIN(ydate),MAX(ydate)
04:09:26   6  FROM svm6122
04:09:26   7  GROUP BY pair
04:09:26   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19328 1.24192946 1.38284305 2010-10-03 20:55:01 2011-01-05 04:05:00

Elapsed: 00:00:00.04
04:09:26 SQL> 
04:09:26 SQL> -- Prepare for derivation of NTILE based params:
04:09:26 SQL> 
04:09:26 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.25
04:09:26 SQL> CREATE TABLE svm6142 COMPRESS AS
04:09:26   2  SELECT
04:09:26   3  pair
04:09:26   4  ,ydate
04:09:26   5  ,prdate
04:09:26   6  ,clse
04:09:26   7  ,g6
04:09:26   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
04:09:26   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
04:09:26  10  ,CASE WHEN trend IS NULL THEN 1
04:09:26  11  	    WHEN trend =0      THEN 1
04:09:26  12  	    ELSE trend END trend
04:09:26  13  ,cm4
04:09:26  14  ,cm6
04:09:26  15  ,cm8
04:09:26  16  ,cm10
04:09:26  17  ,cm12
04:09:26  18  ,cm14
04:09:26  19  ,cm16
04:09:26  20  ,cm18
04:09:26  21  --
04:09:26  22  ,ca4
04:09:26  23  ,ca6
04:09:26  24  ,ca8
04:09:26  25  ,ca10
04:09:26  26  ,ca12
04:09:26  27  ,ca14
04:09:26  28  ,ca16
04:09:26  29  ,ca18
04:09:26  30  --
04:09:26  31  ,cx4
04:09:26  32  ,cx6
04:09:26  33  ,cx8
04:09:26  34  ,cx10
04:09:26  35  ,cx12
04:09:26  36  ,cx14
04:09:26  37  ,cx16
04:09:26  38  ,cx18
04:09:26  39  --
04:09:26  40  ,crr4
04:09:26  41  ,crr6
04:09:26  42  ,crr8
04:09:26  43  ,crr10
04:09:26  44  ,crr12
04:09:26  45  ,crr14
04:09:26  46  ,crr16
04:09:26  47  ,crr18
04:09:26  48  --
04:09:26  49  ,hh
04:09:26  50  ,d
04:09:26  51  ,w
04:09:26  52  ,mpm
04:09:26  53  ,mph
04:09:26  54  FROM svm6122
04:09:26  55  ORDER BY ydate
04:09:26  56  /

Table created.

Elapsed: 00:00:00.39
04:09:26 SQL> 
04:09:26 SQL> -- rpt
04:09:26 SQL> 
04:09:26 SQL> SELECT
04:09:26   2  pair
04:09:26   3  ,trend
04:09:26   4  ,gatt
04:09:26   5  ,COUNT(pair)
04:09:26   6  ,AVG(g6)
04:09:26   7  FROM svm6142
04:09:26   8  GROUP BY pair,trend,gatt
04:09:26   9  ORDER BY pair,trend,gatt
04:09:26  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6587 -.00224356
ech_usd 	-1 up	      3536 .003509265
ech_usd 	-1		55
ech_usd 	 1 nup	      6297  -.0024163
ech_usd 	 1 up	      2836 .004078871
ech_usd 	 1		17

6 rows selected.

Elapsed: 00:00:00.03
04:09:26 SQL> 
04:09:26 SQL> 
04:09:26 SQL> -- Derive NTILE based params:
04:09:26 SQL> 
04:09:26 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
04:09:26 SQL> CREATE TABLE svm6162 COMPRESS AS
04:09:26   2  SELECT
04:09:26   3  pair
04:09:26   4  ,ydate
04:09:26   5  ,prdate
04:09:26   6  ,clse
04:09:26   7  ,g6
04:09:26   8  ,gatt
04:09:26   9  ,gattn
04:09:26  10  ,trend
04:09:26  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
04:09:26  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
04:09:26  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
04:09:26  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
04:09:26  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
04:09:26  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
04:09:26  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
04:09:26  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
04:09:26  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
04:09:26  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
04:09:26  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
04:09:26  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
04:09:26  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
04:09:26  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
04:09:26  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
04:09:26  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
04:09:26  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
04:09:26  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
04:09:26  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
04:09:26  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
04:09:26  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
04:09:26  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
04:09:26  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
04:09:26  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
04:09:26  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
04:09:26  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
04:09:26  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
04:09:26  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
04:09:26  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
04:09:26  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
04:09:26  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
04:09:26  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
04:09:26  43  ,hh  att32
04:09:26  44  ,d   att33
04:09:26  45  ,w   att34
04:09:26  46  ,mpm att35
04:09:26  47  ,mph att36
04:09:26  48  ,trend att37
04:09:26  49  FROM svm6142
04:09:26  50  ORDER BY ydate
04:09:26  51  /

Table created.

Elapsed: 00:00:04.89
04:09:31 SQL> 
04:09:31 SQL> -- rpt
04:09:31 SQL> 
04:09:31 SQL> SELECT
04:09:31   2  pair
04:09:31   3  ,trend
04:09:31   4  ,gatt
04:09:31   5  ,COUNT(pair)
04:09:31   6  ,AVG(g6)
04:09:31   7  FROM svm6162
04:09:31   8  GROUP BY pair,trend,gatt
04:09:31   9  ORDER BY pair,trend,gatt
04:09:31  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6587 -.00224356
ech_usd 	-1 up	      3536 .003509265
ech_usd 	-1		55
ech_usd 	 1 nup	      6297  -.0024163
ech_usd 	 1 up	      2836 .004078871
ech_usd 	 1		17

6 rows selected.

Elapsed: 00:00:00.02
04:09:31 SQL> 
04:09:31 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
04:09:32 SQL> CREATE TABLE modsrc COMPRESS AS
04:09:32   2  SELECT
04:09:32   3  pair
04:09:32   4  ,ydate
04:09:32   5  ,prdate
04:09:32   6  ,trend
04:09:32   7  ,g6
04:09:32   8  ,gatt
04:09:32   9  ,gattn
04:09:32  10  FROM svm6162
04:09:32  11  /

Table created.

Elapsed: 00:00:00.08
04:09:32 SQL> 
04:09:32 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.29
04:09:32 SQL> 
04:09:32 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.19
04:09:32 SQL> CREATE TABLE ech_ms610 COMPRESS AS
04:09:32   2  SELECT
04:09:32   3  ydate
04:09:32   4  ,trend ech_trend
04:09:32   5  ,g6    ech_g6
04:09:32   6  ,gatt  ech_gatt
04:09:32   7  ,gattn ech_gattn
04:09:32   8  FROM modsrc
04:09:32   9  /

Table created.

Elapsed: 00:00:00.07
04:09:32 SQL> 
04:09:32 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
04:09:32 SQL> 
04:09:32 SQL> -- I need a copy of the attributes:
04:09:32 SQL> 
04:09:32 SQL> 
04:09:32 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.05
04:09:32 SQL> CREATE TABLE ech_att COMPRESS AS
04:09:32   2  SELECT
04:09:32   3  ydate
04:09:32   4  ,att00 ech_att00
04:09:32   5  ,att01 ech_att01
04:09:32   6  ,att02 ech_att02
04:09:32   7  ,att03 ech_att03
04:09:32   8  ,att04 ech_att04
04:09:32   9  ,att05 ech_att05
04:09:32  10  ,att06 ech_att06
04:09:32  11  ,att07 ech_att07
04:09:32  12  ,att08 ech_att08
04:09:32  13  ,att09 ech_att09
04:09:32  14  ,att10 ech_att10
04:09:32  15  ,att11 ech_att11
04:09:32  16  ,att12 ech_att12
04:09:32  17  ,att13 ech_att13
04:09:32  18  ,att14 ech_att14
04:09:32  19  ,att15 ech_att15
04:09:32  20  ,att16 ech_att16
04:09:32  21  ,att17 ech_att17
04:09:32  22  ,att18 ech_att18
04:09:32  23  ,att19 ech_att19
04:09:32  24  ,att20 ech_att20
04:09:32  25  ,att21 ech_att21
04:09:32  26  ,att22 ech_att22
04:09:32  27  ,att23 ech_att23
04:09:32  28  ,att24 ech_att24
04:09:32  29  ,att25 ech_att25
04:09:32  30  ,att26 ech_att26
04:09:32  31  ,att27 ech_att27
04:09:32  32  ,att28 ech_att28
04:09:32  33  ,att29 ech_att29
04:09:32  34  ,att30 ech_att30
04:09:32  35  ,att31 ech_att31
04:09:32  36  ,att32 ech_att32
04:09:32  37  ,att33 ech_att33
04:09:32  38  ,att34 ech_att34
04:09:32  39  ,att35 ech_att35
04:09:32  40  ,att36 ech_att36
04:09:32  41  ,att37 ech_att37
04:09:32  42  FROM svm6162
04:09:32  43  /

Table created.

Elapsed: 00:00:00.20
04:09:33 SQL> 
04:09:33 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
04:09:33 SQL> 
04:09:33 SQL> -- rpt
04:09:33 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19328

Elapsed: 00:00:00.82
04:09:34 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19328

Elapsed: 00:00:00.00
04:09:34 SQL> 
04:09:34 SQL> --
04:09:34 SQL> -- egb610.sql
04:09:34 SQL> --
04:09:34 SQL> 
04:09:34 SQL> -- Creates views and tables for backtesting a forex SVM strategy
04:09:34 SQL> 
04:09:34 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.42
04:09:34 SQL> 
04:09:34 SQL> -- I created di5min here:
04:09:34 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
04:09:34 SQL> 
04:09:34 SQL> CREATE OR REPLACE VIEW svm6102 AS
04:09:34   2  SELECT
04:09:34   3  pair
04:09:34   4  ,ydate
04:09:34   5  ,prdate
04:09:34   6  ,rownum rnum -- acts as t in my time-series
04:09:34   7  ,clse
04:09:34   8  -- Derive a bunch of attributes from clse, the latest price:
04:09:34   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
04:09:34  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
04:09:34  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
04:09:34  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
04:09:34  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
04:09:34  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
04:09:34  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
04:09:34  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
04:09:34  17  --
04:09:34  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
04:09:34  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
04:09:34  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
04:09:34  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
04:09:34  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
04:09:34  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
04:09:34  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
04:09:34  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
04:09:34  26  --
04:09:34  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
04:09:34  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
04:09:34  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
04:09:34  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
04:09:34  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
04:09:34  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
04:09:34  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
04:09:34  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
04:09:34  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
04:09:34  36  FROM di5min WHERE pair LIKE'%egb%'
04:09:34  37  AND ydate > sysdate - 95
04:09:34  38  ORDER BY ydate
04:09:34  39  /

View created.

Elapsed: 00:00:00.05
04:09:34 SQL> 
04:09:34 SQL> -- rpt
04:09:34 SQL> 
04:09:34 SQL> SELECT
04:09:34   2  pair
04:09:34   3  ,COUNT(pair)
04:09:34   4  ,MIN(clse),MAX(clse)
04:09:34   5  ,MIN(avg6),MAX(avg6)
04:09:34   6  ,MIN(ydate),MAX(ydate)
04:09:34   7  FROM svm6102
04:09:34   8  GROUP BY pair
04:09:34   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19327 .833520557 .893920122 .834199029 .892400287 2010-10-03 20:55:01 2011-01-05 04:05:00

Elapsed: 00:00:00.95
04:09:35 SQL> 
04:09:35 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
04:09:35 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.19
04:09:35 SQL> CREATE TABLE svm6122 COMPRESS AS
04:09:35   2  SELECT
04:09:35   3  pair
04:09:35   4  ,ydate
04:09:35   5  ,prdate
04:09:35   6  ,clse
04:09:35   7  -- g6 is important. I want to predict g6:
04:09:35   8  ,ld6 - clse g6
04:09:35   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
04:09:35  10  -- I want more attributes from the ones I derived above:
04:09:35  11  -- clse relation to moving-min
04:09:35  12  ,clse-min4  cm4
04:09:35  13  ,clse-min6  cm6
04:09:35  14  ,clse-min8  cm8
04:09:35  15  ,clse-min10 cm10
04:09:35  16  ,clse-min12 cm12
04:09:35  17  ,clse-min14 cm14
04:09:35  18  ,clse-min16 cm16
04:09:35  19  ,clse-min18 cm18
04:09:35  20  -- clse relation to moving-avg
04:09:35  21  ,clse-avg4  ca4
04:09:35  22  ,clse-avg6  ca6
04:09:35  23  ,clse-avg8  ca8
04:09:35  24  ,clse-avg10 ca10
04:09:35  25  ,clse-avg12 ca12
04:09:35  26  ,clse-avg14 ca14
04:09:35  27  ,clse-avg16 ca16
04:09:35  28  ,clse-avg18 ca18
04:09:35  29  -- clse relation to moving-max
04:09:35  30  ,clse-max4  cx4
04:09:35  31  ,clse-max6  cx6
04:09:35  32  ,clse-max8  cx8
04:09:35  33  ,clse-max10 cx10
04:09:35  34  ,clse-max12 cx12
04:09:35  35  ,clse-max14 cx14
04:09:35  36  ,clse-max16 cx16
04:09:35  37  ,clse-max18 cx18
04:09:35  38  -- Derive more attributes.
04:09:35  39  -- I want to use CORR() here to help SVM see the shape of the series.
04:09:35  40  -- But COVAR_POP is more stable:
04:09:35  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
04:09:35  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
04:09:35  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
04:09:35  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
04:09:35  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
04:09:35  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
04:09:35  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
04:09:35  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
04:09:35  49  -- Derive date related attributes:
04:09:35  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
04:09:35  51  ,0+TO_CHAR(ydate,'D')d
04:09:35  52  ,0+TO_CHAR(ydate,'W')w
04:09:35  53  -- mpm stands for minutes-past-midnight:
04:09:35  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
04:09:35  55  -- mph stands for minutes-past-hour:
04:09:35  56  ,0+TO_CHAR(ydate,'MI')mph
04:09:35  57  FROM svm6102
04:09:35  58  ORDER BY ydate
04:09:35  59  /

Table created.

Elapsed: 00:00:02.48
04:09:38 SQL> 
04:09:38 SQL> -- rpt
04:09:38 SQL> 
04:09:38 SQL> SELECT
04:09:38   2  pair
04:09:38   3  ,COUNT(pair)
04:09:38   4  ,MIN(clse),MAX(clse)
04:09:38   5  ,MIN(ydate),MAX(ydate)
04:09:38   6  FROM svm6122
04:09:38   7  GROUP BY pair
04:09:38   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19327 .833520557 .893920122 2010-10-03 20:55:01 2011-01-05 04:05:00

Elapsed: 00:00:00.05
04:09:38 SQL> 
04:09:38 SQL> -- Prepare for derivation of NTILE based params:
04:09:38 SQL> 
04:09:38 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
04:09:38 SQL> CREATE TABLE svm6142 COMPRESS AS
04:09:38   2  SELECT
04:09:38   3  pair
04:09:38   4  ,ydate
04:09:38   5  ,prdate
04:09:38   6  ,clse
04:09:38   7  ,g6
04:09:38   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
04:09:38   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
04:09:38  10  ,CASE WHEN trend IS NULL THEN 1
04:09:38  11  	    WHEN trend =0      THEN 1
04:09:38  12  	    ELSE trend END trend
04:09:38  13  ,cm4
04:09:38  14  ,cm6
04:09:38  15  ,cm8
04:09:38  16  ,cm10
04:09:38  17  ,cm12
04:09:38  18  ,cm14
04:09:38  19  ,cm16
04:09:38  20  ,cm18
04:09:38  21  --
04:09:38  22  ,ca4
04:09:38  23  ,ca6
04:09:38  24  ,ca8
04:09:38  25  ,ca10
04:09:38  26  ,ca12
04:09:38  27  ,ca14
04:09:38  28  ,ca16
04:09:38  29  ,ca18
04:09:38  30  --
04:09:38  31  ,cx4
04:09:38  32  ,cx6
04:09:38  33  ,cx8
04:09:38  34  ,cx10
04:09:38  35  ,cx12
04:09:38  36  ,cx14
04:09:38  37  ,cx16
04:09:38  38  ,cx18
04:09:38  39  --
04:09:38  40  ,crr4
04:09:38  41  ,crr6
04:09:38  42  ,crr8
04:09:38  43  ,crr10
04:09:38  44  ,crr12
04:09:38  45  ,crr14
04:09:38  46  ,crr16
04:09:38  47  ,crr18
04:09:38  48  --
04:09:38  49  ,hh
04:09:38  50  ,d
04:09:38  51  ,w
04:09:38  52  ,mpm
04:09:38  53  ,mph
04:09:38  54  FROM svm6122
04:09:38  55  ORDER BY ydate
04:09:38  56  /

Table created.

Elapsed: 00:00:00.42
04:09:39 SQL> 
04:09:39 SQL> -- rpt
04:09:39 SQL> 
04:09:39 SQL> SELECT
04:09:39   2  pair
04:09:39   3  ,trend
04:09:39   4  ,gatt
04:09:39   5  ,COUNT(pair)
04:09:39   6  ,AVG(g6)
04:09:39   7  FROM svm6142
04:09:39   8  GROUP BY pair,trend,gatt
04:09:39   9  ORDER BY pair,trend,gatt
04:09:39  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7584 -.00103892
egb_usd 	-1 up	      2626 .002933187
egb_usd 	-1		53
egb_usd 	 1 nup	      6428 -.00136584
egb_usd 	 1 up	      2617   .0029282
egb_usd 	 1		19

6 rows selected.

Elapsed: 00:00:00.04
04:09:39 SQL> 
04:09:39 SQL> 
04:09:39 SQL> -- Derive NTILE based params:
04:09:39 SQL> 
04:09:39 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.27
04:09:39 SQL> CREATE TABLE svm6162 COMPRESS AS
04:09:39   2  SELECT
04:09:39   3  pair
04:09:39   4  ,ydate
04:09:39   5  ,prdate
04:09:39   6  ,clse
04:09:39   7  ,g6
04:09:39   8  ,gatt
04:09:39   9  ,gattn
04:09:39  10  ,trend
04:09:39  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
04:09:39  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
04:09:39  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
04:09:39  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
04:09:39  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
04:09:39  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
04:09:39  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
04:09:39  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
04:09:39  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
04:09:39  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
04:09:39  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
04:09:39  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
04:09:39  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
04:09:39  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
04:09:39  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
04:09:39  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
04:09:39  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
04:09:39  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
04:09:39  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
04:09:39  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
04:09:39  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
04:09:39  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
04:09:39  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
04:09:39  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
04:09:39  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
04:09:39  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
04:09:39  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
04:09:39  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
04:09:39  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
04:09:39  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
04:09:39  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
04:09:39  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
04:09:39  43  ,hh  att32
04:09:39  44  ,d   att33
04:09:39  45  ,w   att34
04:09:39  46  ,mpm att35
04:09:39  47  ,mph att36
04:09:39  48  ,trend att37
04:09:39  49  FROM svm6142
04:09:39  50  ORDER BY ydate
04:09:39  51  /

Table created.

Elapsed: 00:00:05.47
04:09:44 SQL> 
04:09:44 SQL> -- rpt
04:09:44 SQL> 
04:09:44 SQL> SELECT
04:09:44   2  pair
04:09:44   3  ,trend
04:09:44   4  ,gatt
04:09:44   5  ,COUNT(pair)
04:09:44   6  ,AVG(g6)
04:09:44   7  FROM svm6162
04:09:44   8  GROUP BY pair,trend,gatt
04:09:44   9  ORDER BY pair,trend,gatt
04:09:44  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7584 -.00103892
egb_usd 	-1 up	      2626 .002933187
egb_usd 	-1		53
egb_usd 	 1 nup	      6428 -.00136584
egb_usd 	 1 up	      2617   .0029282
egb_usd 	 1		19

6 rows selected.

Elapsed: 00:00:00.03
04:09:44 SQL> 
04:09:44 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.31
04:09:45 SQL> CREATE TABLE modsrc COMPRESS AS
04:09:45   2  SELECT
04:09:45   3  pair
04:09:45   4  ,ydate
04:09:45   5  ,prdate
04:09:45   6  ,trend
04:09:45   7  ,g6
04:09:45   8  ,gatt
04:09:45   9  ,gattn
04:09:45  10  FROM svm6162
04:09:45  11  /

Table created.

Elapsed: 00:00:00.09
04:09:45 SQL> 
04:09:45 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
04:09:45 SQL> 
04:09:45 SQL> DROP   TABLE egb_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
04:09:45 SQL> CREATE TABLE egb_ms610 COMPRESS AS
04:09:45   2  SELECT
04:09:45   3  ydate
04:09:45   4  ,trend egb_trend
04:09:45   5  ,g6    egb_g6
04:09:45   6  ,gatt  egb_gatt
04:09:45   7  ,gattn egb_gattn
04:09:45   8  FROM modsrc
04:09:45   9  /

Table created.

Elapsed: 00:00:00.06
04:09:45 SQL> 
04:09:45 SQL> ANALYZE TABLE egb_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
04:09:45 SQL> 
04:09:45 SQL> -- I need a copy of the attributes:
04:09:45 SQL> 
04:09:45 SQL> 
04:09:45 SQL> DROP   TABLE egb_att;

Table dropped.

Elapsed: 00:00:00.07
04:09:45 SQL> CREATE TABLE egb_att COMPRESS AS
04:09:45   2  SELECT
04:09:45   3  ydate
04:09:45   4  ,att00 egb_att00
04:09:45   5  ,att01 egb_att01
04:09:45   6  ,att02 egb_att02
04:09:45   7  ,att03 egb_att03
04:09:45   8  ,att04 egb_att04
04:09:45   9  ,att05 egb_att05
04:09:45  10  ,att06 egb_att06
04:09:45  11  ,att07 egb_att07
04:09:45  12  ,att08 egb_att08
04:09:45  13  ,att09 egb_att09
04:09:45  14  ,att10 egb_att10
04:09:45  15  ,att11 egb_att11
04:09:45  16  ,att12 egb_att12
04:09:45  17  ,att13 egb_att13
04:09:45  18  ,att14 egb_att14
04:09:45  19  ,att15 egb_att15
04:09:45  20  ,att16 egb_att16
04:09:45  21  ,att17 egb_att17
04:09:45  22  ,att18 egb_att18
04:09:45  23  ,att19 egb_att19
04:09:45  24  ,att20 egb_att20
04:09:45  25  ,att21 egb_att21
04:09:45  26  ,att22 egb_att22
04:09:45  27  ,att23 egb_att23
04:09:45  28  ,att24 egb_att24
04:09:45  29  ,att25 egb_att25
04:09:45  30  ,att26 egb_att26
04:09:45  31  ,att27 egb_att27
04:09:45  32  ,att28 egb_att28
04:09:45  33  ,att29 egb_att29
04:09:45  34  ,att30 egb_att30
04:09:45  35  ,att31 egb_att31
04:09:45  36  ,att32 egb_att32
04:09:45  37  ,att33 egb_att33
04:09:45  38  ,att34 egb_att34
04:09:45  39  ,att35 egb_att35
04:09:45  40  ,att36 egb_att36
04:09:45  41  ,att37 egb_att37
04:09:45  42  FROM svm6162
04:09:45  43  /

Table created.

Elapsed: 00:00:00.17
04:09:46 SQL> 
04:09:46 SQL> ANALYZE TABLE egb_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
04:09:46 SQL> 
04:09:46 SQL> -- rpt
04:09:46 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19327

Elapsed: 00:00:00.93
04:09:47 SQL> SELECT COUNT(*)FROM egb_att;

  COUNT(*)
----------
     19327

Elapsed: 00:00:00.00
04:09:47 SQL> 
04:09:47 SQL> --
04:09:47 SQL> -- ejp610.sql
04:09:47 SQL> --
04:09:47 SQL> 
04:09:47 SQL> -- Creates views and tables for backtesting a forex SVM strategy
04:09:47 SQL> 
04:09:47 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.48
04:09:47 SQL> 
04:09:47 SQL> -- I created di5min here:
04:09:47 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
04:09:47 SQL> 
04:09:47 SQL> CREATE OR REPLACE VIEW svm6102 AS
04:09:47   2  SELECT
04:09:47   3  pair
04:09:47   4  ,ydate
04:09:47   5  ,prdate
04:09:47   6  ,rownum rnum -- acts as t in my time-series
04:09:47   7  ,clse
04:09:47   8  -- Derive a bunch of attributes from clse, the latest price:
04:09:47   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
04:09:47  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
04:09:47  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
04:09:47  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
04:09:47  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
04:09:47  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
04:09:47  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
04:09:47  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
04:09:47  17  --
04:09:47  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
04:09:47  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
04:09:47  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
04:09:47  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
04:09:47  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
04:09:47  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
04:09:47  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
04:09:47  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
04:09:47  26  --
04:09:47  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
04:09:47  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
04:09:47  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
04:09:47  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
04:09:47  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
04:09:47  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
04:09:47  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
04:09:47  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
04:09:47  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
04:09:47  36  FROM di5min WHERE pair LIKE'%ejp%'
04:09:47  37  AND ydate > sysdate - 95
04:09:47  38  ORDER BY ydate
04:09:47  39  /

View created.

Elapsed: 00:00:00.04
04:09:48 SQL> 
04:09:48 SQL> -- rpt
04:09:48 SQL> 
04:09:48 SQL> SELECT
04:09:48   2  pair
04:09:48   3  ,COUNT(pair)
04:09:48   4  ,MIN(clse),MAX(clse)
04:09:48   5  ,MIN(avg6),MAX(avg6)
04:09:48   6  ,MIN(ydate),MAX(ydate)
04:09:48   7  FROM svm6102
04:09:48   8  GROUP BY pair
04:09:48   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ejp_usd       19325 107.643765	115.63485 107.776148 115.509678 2010-10-03 20:55:01 2011-01-05 04:05:00

Elapsed: 00:00:00.84
04:09:48 SQL> 
04:09:48 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
04:09:48 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.38
04:09:49 SQL> CREATE TABLE svm6122 COMPRESS AS
04:09:49   2  SELECT
04:09:49   3  pair
04:09:49   4  ,ydate
04:09:49   5  ,prdate
04:09:49   6  ,clse
04:09:49   7  -- g6 is important. I want to predict g6:
04:09:49   8  ,ld6 - clse g6
04:09:49   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
04:09:49  10  -- I want more attributes from the ones I derived above:
04:09:49  11  -- clse relation to moving-min
04:09:49  12  ,clse-min4  cm4
04:09:49  13  ,clse-min6  cm6
04:09:49  14  ,clse-min8  cm8
04:09:49  15  ,clse-min10 cm10
04:09:49  16  ,clse-min12 cm12
04:09:49  17  ,clse-min14 cm14
04:09:49  18  ,clse-min16 cm16
04:09:49  19  ,clse-min18 cm18
04:09:49  20  -- clse relation to moving-avg
04:09:49  21  ,clse-avg4  ca4
04:09:49  22  ,clse-avg6  ca6
04:09:49  23  ,clse-avg8  ca8
04:09:49  24  ,clse-avg10 ca10
04:09:49  25  ,clse-avg12 ca12
04:09:49  26  ,clse-avg14 ca14
04:09:49  27  ,clse-avg16 ca16
04:09:49  28  ,clse-avg18 ca18
04:09:49  29  -- clse relation to moving-max
04:09:49  30  ,clse-max4  cx4
04:09:49  31  ,clse-max6  cx6
04:09:49  32  ,clse-max8  cx8
04:09:49  33  ,clse-max10 cx10
04:09:49  34  ,clse-max12 cx12
04:09:49  35  ,clse-max14 cx14
04:09:49  36  ,clse-max16 cx16
04:09:49  37  ,clse-max18 cx18
04:09:49  38  -- Derive more attributes.
04:09:49  39  -- I want to use CORR() here to help SVM see the shape of the series.
04:09:49  40  -- But COVAR_POP is more stable:
04:09:49  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
04:09:49  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
04:09:49  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
04:09:49  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
04:09:49  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
04:09:49  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
04:09:49  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
04:09:49  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
04:09:49  49  -- Derive date related attributes:
04:09:49  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
04:09:49  51  ,0+TO_CHAR(ydate,'D')d
04:09:49  52  ,0+TO_CHAR(ydate,'W')w
04:09:49  53  -- mpm stands for minutes-past-midnight:
04:09:49  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
04:09:49  55  -- mph stands for minutes-past-hour:
04:09:49  56  ,0+TO_CHAR(ydate,'MI')mph
04:09:49  57  FROM svm6102
04:09:49  58  ORDER BY ydate
04:09:49  59  /

Table created.

Elapsed: 00:00:02.08
04:09:51 SQL> 
04:09:51 SQL> -- rpt
04:09:51 SQL> 
04:09:51 SQL> SELECT
04:09:51   2  pair
04:09:51   3  ,COUNT(pair)
04:09:51   4  ,MIN(clse),MAX(clse)
04:09:51   5  ,MIN(ydate),MAX(ydate)
04:09:51   6  FROM svm6122
04:09:51   7  GROUP BY pair
04:09:51   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ejp_usd       19325 107.643765	115.63485 2010-10-03 20:55:01 2011-01-05 04:05:00

Elapsed: 00:00:00.04
04:09:51 SQL> 
04:09:51 SQL> -- Prepare for derivation of NTILE based params:
04:09:51 SQL> 
04:09:51 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.21
04:09:51 SQL> CREATE TABLE svm6142 COMPRESS AS
04:09:51   2  SELECT
04:09:51   3  pair
04:09:51   4  ,ydate
04:09:51   5  ,prdate
04:09:51   6  ,clse
04:09:51   7  ,g6
04:09:51   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
04:09:51   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
04:09:51  10  ,CASE WHEN trend IS NULL THEN 1
04:09:51  11  	    WHEN trend =0      THEN 1
04:09:51  12  	    ELSE trend END trend
04:09:51  13  ,cm4
04:09:51  14  ,cm6
04:09:51  15  ,cm8
04:09:51  16  ,cm10
04:09:51  17  ,cm12
04:09:51  18  ,cm14
04:09:51  19  ,cm16
04:09:51  20  ,cm18
04:09:51  21  --
04:09:51  22  ,ca4
04:09:51  23  ,ca6
04:09:51  24  ,ca8
04:09:51  25  ,ca10
04:09:51  26  ,ca12
04:09:51  27  ,ca14
04:09:51  28  ,ca16
04:09:51  29  ,ca18
04:09:51  30  --
04:09:51  31  ,cx4
04:09:51  32  ,cx6
04:09:51  33  ,cx8
04:09:51  34  ,cx10
04:09:51  35  ,cx12
04:09:51  36  ,cx14
04:09:51  37  ,cx16
04:09:51  38  ,cx18
04:09:51  39  --
04:09:51  40  ,crr4
04:09:51  41  ,crr6
04:09:51  42  ,crr8
04:09:51  43  ,crr10
04:09:51  44  ,crr12
04:09:51  45  ,crr14
04:09:51  46  ,crr16
04:09:51  47  ,crr18
04:09:51  48  --
04:09:51  49  ,hh
04:09:51  50  ,d
04:09:51  51  ,w
04:09:51  52  ,mpm
04:09:51  53  ,mph
04:09:51  54  FROM svm6122
04:09:51  55  ORDER BY ydate
04:09:51  56  /

Table created.

Elapsed: 00:00:00.36
04:09:51 SQL> 
04:09:51 SQL> -- rpt
04:09:51 SQL> 
04:09:51 SQL> SELECT
04:09:51   2  pair
04:09:51   3  ,trend
04:09:51   4  ,gatt
04:09:51   5  ,COUNT(pair)
04:09:51   6  ,AVG(g6)
04:09:51   7  FROM svm6142
04:09:51   8  GROUP BY pair,trend,gatt
04:09:51   9  ORDER BY pair,trend,gatt
04:09:51  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4912 -.32271484
ejp_usd 	-1 up	      4860 .271412027
ejp_usd 	-1		40
ejp_usd 	 1 nup	      4906 -.30104078
ejp_usd 	 1 up	      4575 .290080166
ejp_usd 	 1		32

6 rows selected.

Elapsed: 00:00:00.04
04:09:51 SQL> 
04:09:51 SQL> 
04:09:51 SQL> -- Derive NTILE based params:
04:09:51 SQL> 
04:09:51 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.14
04:09:52 SQL> CREATE TABLE svm6162 COMPRESS AS
04:09:52   2  SELECT
04:09:52   3  pair
04:09:52   4  ,ydate
04:09:52   5  ,prdate
04:09:52   6  ,clse
04:09:52   7  ,g6
04:09:52   8  ,gatt
04:09:52   9  ,gattn
04:09:52  10  ,trend
04:09:52  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
04:09:52  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
04:09:52  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
04:09:52  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
04:09:52  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
04:09:52  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
04:09:52  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
04:09:52  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
04:09:52  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
04:09:52  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
04:09:52  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
04:09:52  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
04:09:52  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
04:09:52  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
04:09:52  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
04:09:52  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
04:09:52  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
04:09:52  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
04:09:52  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
04:09:52  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
04:09:52  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
04:09:52  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
04:09:52  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
04:09:52  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
04:09:52  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
04:09:52  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
04:09:52  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
04:09:52  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
04:09:52  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
04:09:52  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
04:09:52  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
04:09:52  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
04:09:52  43  ,hh  att32
04:09:52  44  ,d   att33
04:09:52  45  ,w   att34
04:09:52  46  ,mpm att35
04:09:52  47  ,mph att36
04:09:52  48  ,trend att37
04:09:52  49  FROM svm6142
04:09:52  50  ORDER BY ydate
04:09:52  51  /

Table created.

Elapsed: 00:00:04.77
04:09:56 SQL> 
04:09:56 SQL> -- rpt
04:09:56 SQL> 
04:09:56 SQL> SELECT
04:09:56   2  pair
04:09:56   3  ,trend
04:09:56   4  ,gatt
04:09:56   5  ,COUNT(pair)
04:09:56   6  ,AVG(g6)
04:09:56   7  FROM svm6162
04:09:56   8  GROUP BY pair,trend,gatt
04:09:56   9  ORDER BY pair,trend,gatt
04:09:56  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4912 -.32271484
ejp_usd 	-1 up	      4860 .271412027
ejp_usd 	-1		40
ejp_usd 	 1 nup	      4906 -.30104078
ejp_usd 	 1 up	      4575 .290080166
ejp_usd 	 1		32

6 rows selected.

Elapsed: 00:00:00.03
04:09:56 SQL> 
04:09:56 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
04:09:57 SQL> CREATE TABLE modsrc COMPRESS AS
04:09:57   2  SELECT
04:09:57   3  pair
04:09:57   4  ,ydate
04:09:57   5  ,prdate
04:09:57   6  ,trend
04:09:57   7  ,g6
04:09:57   8  ,gatt
04:09:57   9  ,gattn
04:09:57  10  FROM svm6162
04:09:57  11  /

Table created.

Elapsed: 00:00:00.14
04:09:57 SQL> 
04:09:57 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.32
04:09:57 SQL> 
04:09:57 SQL> DROP   TABLE ejp_ms610 ;

Table dropped.

Elapsed: 00:00:00.10
04:09:57 SQL> CREATE TABLE ejp_ms610 COMPRESS AS
04:09:57   2  SELECT
04:09:57   3  ydate
04:09:57   4  ,trend ejp_trend
04:09:57   5  ,g6    ejp_g6
04:09:57   6  ,gatt  ejp_gatt
04:09:57   7  ,gattn ejp_gattn
04:09:57   8  FROM modsrc
04:09:57   9  /

Table created.

Elapsed: 00:00:00.09
04:09:57 SQL> 
04:09:57 SQL> ANALYZE TABLE ejp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:01.33
04:09:59 SQL> 
04:09:59 SQL> -- I need a copy of the attributes:
04:09:59 SQL> 
04:09:59 SQL> 
04:09:59 SQL> DROP   TABLE ejp_att;

Table dropped.

Elapsed: 00:00:00.14
04:09:59 SQL> CREATE TABLE ejp_att COMPRESS AS
04:09:59   2  SELECT
04:09:59   3  ydate
04:09:59   4  ,att00 ejp_att00
04:09:59   5  ,att01 ejp_att01
04:09:59   6  ,att02 ejp_att02
04:09:59   7  ,att03 ejp_att03
04:09:59   8  ,att04 ejp_att04
04:09:59   9  ,att05 ejp_att05
04:09:59  10  ,att06 ejp_att06
04:09:59  11  ,att07 ejp_att07
04:09:59  12  ,att08 ejp_att08
04:09:59  13  ,att09 ejp_att09
04:09:59  14  ,att10 ejp_att10
04:09:59  15  ,att11 ejp_att11
04:09:59  16  ,att12 ejp_att12
04:09:59  17  ,att13 ejp_att13
04:09:59  18  ,att14 ejp_att14
04:09:59  19  ,att15 ejp_att15
04:09:59  20  ,att16 ejp_att16
04:09:59  21  ,att17 ejp_att17
04:09:59  22  ,att18 ejp_att18
04:09:59  23  ,att19 ejp_att19
04:09:59  24  ,att20 ejp_att20
04:09:59  25  ,att21 ejp_att21
04:09:59  26  ,att22 ejp_att22
04:09:59  27  ,att23 ejp_att23
04:09:59  28  ,att24 ejp_att24
04:09:59  29  ,att25 ejp_att25
04:09:59  30  ,att26 ejp_att26
04:09:59  31  ,att27 ejp_att27
04:09:59  32  ,att28 ejp_att28
04:09:59  33  ,att29 ejp_att29
04:09:59  34  ,att30 ejp_att30
04:09:59  35  ,att31 ejp_att31
04:09:59  36  ,att32 ejp_att32
04:09:59  37  ,att33 ejp_att33
04:09:59  38  ,att34 ejp_att34
04:09:59  39  ,att35 ejp_att35
04:09:59  40  ,att36 ejp_att36
04:09:59  41  ,att37 ejp_att37
04:09:59  42  FROM svm6162
04:09:59  43  /

Table created.

Elapsed: 00:00:00.18
04:09:59 SQL> 
04:09:59 SQL> ANALYZE TABLE ejp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
04:09:59 SQL> 
04:09:59 SQL> -- rpt
04:09:59 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19325

Elapsed: 00:00:00.82
04:10:00 SQL> SELECT COUNT(*)FROM ejp_att;

  COUNT(*)
----------
     19325

Elapsed: 00:00:00.00
04:10:00 SQL> 
04:10:00 SQL> --
04:10:00 SQL> -- ajp610.sql
04:10:00 SQL> --
04:10:00 SQL> 
04:10:00 SQL> -- Creates views and tables for backtesting a forex SVM strategy
04:10:00 SQL> 
04:10:00 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.65
04:10:01 SQL> 
04:10:01 SQL> -- I created di5min here:
04:10:01 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
04:10:01 SQL> 
04:10:01 SQL> CREATE OR REPLACE VIEW svm6102 AS
04:10:01   2  SELECT
04:10:01   3  pair
04:10:01   4  ,ydate
04:10:01   5  ,prdate
04:10:01   6  ,rownum rnum -- acts as t in my time-series
04:10:01   7  ,clse
04:10:01   8  -- Derive a bunch of attributes from clse, the latest price:
04:10:01   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
04:10:01  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
04:10:01  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
04:10:01  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
04:10:01  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
04:10:01  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
04:10:01  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
04:10:01  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
04:10:01  17  --
04:10:01  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
04:10:01  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
04:10:01  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
04:10:01  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
04:10:01  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
04:10:01  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
04:10:01  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
04:10:01  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
04:10:01  26  --
04:10:01  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
04:10:01  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
04:10:01  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
04:10:01  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
04:10:01  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
04:10:01  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
04:10:01  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
04:10:01  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
04:10:01  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
04:10:01  36  FROM di5min WHERE pair LIKE'%ajp%'
04:10:01  37  AND ydate > sysdate - 95
04:10:01  38  ORDER BY ydate
04:10:01  39  /

View created.

Elapsed: 00:00:00.04
04:10:01 SQL> 
04:10:01 SQL> -- rpt
04:10:01 SQL> 
04:10:01 SQL> SELECT
04:10:01   2  pair
04:10:01   3  ,COUNT(pair)
04:10:01   4  ,MIN(clse),MAX(clse)
04:10:01   5  ,MIN(avg6),MAX(avg6)
04:10:01   6  ,MIN(ydate),MAX(ydate)
04:10:01   7  FROM svm6102
04:10:01   8  GROUP BY pair
04:10:01   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ajp_usd       19322  78.249976 83.6669853 78.5106193  83.546306 2010-10-03 20:55:01 2011-01-05 04:05:00

Elapsed: 00:00:00.79
04:10:02 SQL> 
04:10:02 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
04:10:02 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.31
04:10:02 SQL> CREATE TABLE svm6122 COMPRESS AS
04:10:02   2  SELECT
04:10:02   3  pair
04:10:02   4  ,ydate
04:10:02   5  ,prdate
04:10:02   6  ,clse
04:10:02   7  -- g6 is important. I want to predict g6:
04:10:02   8  ,ld6 - clse g6
04:10:02   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
04:10:02  10  -- I want more attributes from the ones I derived above:
04:10:02  11  -- clse relation to moving-min
04:10:02  12  ,clse-min4  cm4
04:10:02  13  ,clse-min6  cm6
04:10:02  14  ,clse-min8  cm8
04:10:02  15  ,clse-min10 cm10
04:10:02  16  ,clse-min12 cm12
04:10:02  17  ,clse-min14 cm14
04:10:02  18  ,clse-min16 cm16
04:10:02  19  ,clse-min18 cm18
04:10:02  20  -- clse relation to moving-avg
04:10:02  21  ,clse-avg4  ca4
04:10:02  22  ,clse-avg6  ca6
04:10:02  23  ,clse-avg8  ca8
04:10:02  24  ,clse-avg10 ca10
04:10:02  25  ,clse-avg12 ca12
04:10:02  26  ,clse-avg14 ca14
04:10:02  27  ,clse-avg16 ca16
04:10:02  28  ,clse-avg18 ca18
04:10:02  29  -- clse relation to moving-max
04:10:02  30  ,clse-max4  cx4
04:10:02  31  ,clse-max6  cx6
04:10:02  32  ,clse-max8  cx8
04:10:02  33  ,clse-max10 cx10
04:10:02  34  ,clse-max12 cx12
04:10:02  35  ,clse-max14 cx14
04:10:02  36  ,clse-max16 cx16
04:10:02  37  ,clse-max18 cx18
04:10:02  38  -- Derive more attributes.
04:10:02  39  -- I want to use CORR() here to help SVM see the shape of the series.
04:10:02  40  -- But COVAR_POP is more stable:
04:10:02  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
04:10:02  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
04:10:02  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
04:10:02  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
04:10:02  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
04:10:02  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
04:10:02  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
04:10:02  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
04:10:02  49  -- Derive date related attributes:
04:10:02  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
04:10:02  51  ,0+TO_CHAR(ydate,'D')d
04:10:02  52  ,0+TO_CHAR(ydate,'W')w
04:10:02  53  -- mpm stands for minutes-past-midnight:
04:10:02  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
04:10:02  55  -- mph stands for minutes-past-hour:
04:10:02  56  ,0+TO_CHAR(ydate,'MI')mph
04:10:02  57  FROM svm6102
04:10:02  58  ORDER BY ydate
04:10:02  59  /

Table created.

Elapsed: 00:00:01.97
04:10:04 SQL> 
04:10:04 SQL> -- rpt
04:10:04 SQL> 
04:10:04 SQL> SELECT
04:10:04   2  pair
04:10:04   3  ,COUNT(pair)
04:10:04   4  ,MIN(clse),MAX(clse)
04:10:04   5  ,MIN(ydate),MAX(ydate)
04:10:04   6  FROM svm6122
04:10:04   7  GROUP BY pair
04:10:04   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ajp_usd       19322  78.249976 83.6669853 2010-10-03 20:55:01 2011-01-05 04:05:00

Elapsed: 00:00:00.03
04:10:04 SQL> 
04:10:04 SQL> -- Prepare for derivation of NTILE based params:
04:10:04 SQL> 
04:10:04 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.25
04:10:04 SQL> CREATE TABLE svm6142 COMPRESS AS
04:10:04   2  SELECT
04:10:04   3  pair
04:10:04   4  ,ydate
04:10:04   5  ,prdate
04:10:04   6  ,clse
04:10:04   7  ,g6
04:10:04   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
04:10:04   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
04:10:04  10  ,CASE WHEN trend IS NULL THEN 1
04:10:04  11  	    WHEN trend =0      THEN 1
04:10:04  12  	    ELSE trend END trend
04:10:04  13  ,cm4
04:10:04  14  ,cm6
04:10:04  15  ,cm8
04:10:04  16  ,cm10
04:10:04  17  ,cm12
04:10:04  18  ,cm14
04:10:04  19  ,cm16
04:10:04  20  ,cm18
04:10:04  21  --
04:10:04  22  ,ca4
04:10:04  23  ,ca6
04:10:04  24  ,ca8
04:10:04  25  ,ca10
04:10:04  26  ,ca12
04:10:04  27  ,ca14
04:10:04  28  ,ca16
04:10:04  29  ,ca18
04:10:04  30  --
04:10:04  31  ,cx4
04:10:04  32  ,cx6
04:10:04  33  ,cx8
04:10:04  34  ,cx10
04:10:04  35  ,cx12
04:10:04  36  ,cx14
04:10:04  37  ,cx16
04:10:04  38  ,cx18
04:10:04  39  --
04:10:04  40  ,crr4
04:10:04  41  ,crr6
04:10:04  42  ,crr8
04:10:04  43  ,crr10
04:10:04  44  ,crr12
04:10:04  45  ,crr14
04:10:04  46  ,crr16
04:10:04  47  ,crr18
04:10:04  48  --
04:10:04  49  ,hh
04:10:04  50  ,d
04:10:04  51  ,w
04:10:04  52  ,mpm
04:10:04  53  ,mph
04:10:04  54  FROM svm6122
04:10:04  55  ORDER BY ydate
04:10:04  56  /

Table created.

Elapsed: 00:00:00.40
04:10:05 SQL> 
04:10:05 SQL> -- rpt
04:10:05 SQL> 
04:10:05 SQL> SELECT
04:10:05   2  pair
04:10:05   3  ,trend
04:10:05   4  ,gatt
04:10:05   5  ,COUNT(pair)
04:10:05   6  ,AVG(g6)
04:10:05   7  FROM svm6142
04:10:05   8  GROUP BY pair,trend,gatt
04:10:05   9  ORDER BY pair,trend,gatt
04:10:05  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4199 -.22734689
ajp_usd 	-1 up	      5115 .220577996
ajp_usd 	-1		36
ajp_usd 	 1 nup	      5191 -.20235505
ajp_usd 	 1 up	      4745 .206911097
ajp_usd 	 1		36

6 rows selected.

Elapsed: 00:00:00.03
04:10:05 SQL> 
04:10:05 SQL> 
04:10:05 SQL> -- Derive NTILE based params:
04:10:05 SQL> 
04:10:05 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
04:10:05 SQL> CREATE TABLE svm6162 COMPRESS AS
04:10:05   2  SELECT
04:10:05   3  pair
04:10:05   4  ,ydate
04:10:05   5  ,prdate
04:10:05   6  ,clse
04:10:05   7  ,g6
04:10:05   8  ,gatt
04:10:05   9  ,gattn
04:10:05  10  ,trend
04:10:05  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
04:10:05  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
04:10:05  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
04:10:05  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
04:10:05  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
04:10:05  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
04:10:05  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
04:10:05  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
04:10:05  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
04:10:05  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
04:10:05  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
04:10:05  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
04:10:05  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
04:10:05  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
04:10:05  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
04:10:05  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
04:10:05  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
04:10:05  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
04:10:05  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
04:10:05  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
04:10:05  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
04:10:05  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
04:10:05  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
04:10:05  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
04:10:05  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
04:10:05  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
04:10:05  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
04:10:05  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
04:10:05  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
04:10:05  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
04:10:05  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
04:10:05  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
04:10:05  43  ,hh  att32
04:10:05  44  ,d   att33
04:10:05  45  ,w   att34
04:10:05  46  ,mpm att35
04:10:05  47  ,mph att36
04:10:05  48  ,trend att37
04:10:05  49  FROM svm6142
04:10:05  50  ORDER BY ydate
04:10:05  51  /

Table created.

Elapsed: 00:00:04.93
04:10:10 SQL> 
04:10:10 SQL> -- rpt
04:10:10 SQL> 
04:10:10 SQL> SELECT
04:10:10   2  pair
04:10:10   3  ,trend
04:10:10   4  ,gatt
04:10:10   5  ,COUNT(pair)
04:10:10   6  ,AVG(g6)
04:10:10   7  FROM svm6162
04:10:10   8  GROUP BY pair,trend,gatt
04:10:10   9  ORDER BY pair,trend,gatt
04:10:10  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4199 -.22734689
ajp_usd 	-1 up	      5115 .220577996
ajp_usd 	-1		36
ajp_usd 	 1 nup	      5191 -.20235505
ajp_usd 	 1 up	      4745 .206911097
ajp_usd 	 1		36

6 rows selected.

Elapsed: 00:00:00.03
04:10:10 SQL> 
04:10:10 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
04:10:10 SQL> CREATE TABLE modsrc COMPRESS AS
04:10:10   2  SELECT
04:10:10   3  pair
04:10:10   4  ,ydate
04:10:10   5  ,prdate
04:10:10   6  ,trend
04:10:10   7  ,g6
04:10:10   8  ,gatt
04:10:10   9  ,gattn
04:10:10  10  FROM svm6162
04:10:10  11  /

Table created.

Elapsed: 00:00:00.09
04:10:10 SQL> 
04:10:10 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
04:10:10 SQL> 
04:10:10 SQL> DROP   TABLE ajp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
04:10:10 SQL> CREATE TABLE ajp_ms610 COMPRESS AS
04:10:10   2  SELECT
04:10:10   3  ydate
04:10:10   4  ,trend ajp_trend
04:10:10   5  ,g6    ajp_g6
04:10:10   6  ,gatt  ajp_gatt
04:10:10   7  ,gattn ajp_gattn
04:10:10   8  FROM modsrc
04:10:10   9  /

Table created.

Elapsed: 00:00:00.08
04:10:10 SQL> 
04:10:10 SQL> ANALYZE TABLE ajp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
04:10:11 SQL> 
04:10:11 SQL> -- I need a copy of the attributes:
04:10:11 SQL> 
04:10:11 SQL> 
04:10:11 SQL> DROP   TABLE ajp_att;

Table dropped.

Elapsed: 00:00:00.04
04:10:11 SQL> CREATE TABLE ajp_att COMPRESS AS
04:10:11   2  SELECT
04:10:11   3  ydate
04:10:11   4  ,att00 ajp_att00
04:10:11   5  ,att01 ajp_att01
04:10:11   6  ,att02 ajp_att02
04:10:11   7  ,att03 ajp_att03
04:10:11   8  ,att04 ajp_att04
04:10:11   9  ,att05 ajp_att05
04:10:11  10  ,att06 ajp_att06
04:10:11  11  ,att07 ajp_att07
04:10:11  12  ,att08 ajp_att08
04:10:11  13  ,att09 ajp_att09
04:10:11  14  ,att10 ajp_att10
04:10:11  15  ,att11 ajp_att11
04:10:11  16  ,att12 ajp_att12
04:10:11  17  ,att13 ajp_att13
04:10:11  18  ,att14 ajp_att14
04:10:11  19  ,att15 ajp_att15
04:10:11  20  ,att16 ajp_att16
04:10:11  21  ,att17 ajp_att17
04:10:11  22  ,att18 ajp_att18
04:10:11  23  ,att19 ajp_att19
04:10:11  24  ,att20 ajp_att20
04:10:11  25  ,att21 ajp_att21
04:10:11  26  ,att22 ajp_att22
04:10:11  27  ,att23 ajp_att23
04:10:11  28  ,att24 ajp_att24
04:10:11  29  ,att25 ajp_att25
04:10:11  30  ,att26 ajp_att26
04:10:11  31  ,att27 ajp_att27
04:10:11  32  ,att28 ajp_att28
04:10:11  33  ,att29 ajp_att29
04:10:11  34  ,att30 ajp_att30
04:10:11  35  ,att31 ajp_att31
04:10:11  36  ,att32 ajp_att32
04:10:11  37  ,att33 ajp_att33
04:10:11  38  ,att34 ajp_att34
04:10:11  39  ,att35 ajp_att35
04:10:11  40  ,att36 ajp_att36
04:10:11  41  ,att37 ajp_att37
04:10:11  42  FROM svm6162
04:10:11  43  /

Table created.

Elapsed: 00:00:00.17
04:10:11 SQL> 
04:10:11 SQL> ANALYZE TABLE ajp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
04:10:11 SQL> 
04:10:11 SQL> -- rpt
04:10:11 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19322

Elapsed: 00:00:00.78
04:10:12 SQL> SELECT COUNT(*)FROM ajp_att;

  COUNT(*)
----------
     19322

Elapsed: 00:00:00.01
04:10:12 SQL> 
04:10:12 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
