
SQL*Plus: Release 11.2.0.1.0 Production on Wed Jan 5 03:12:46 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

03:12:47 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
03:12:47 SQL> 03:12:47 SQL> --
03:12:47 SQL> -- eur610.sql
03:12:47 SQL> --
03:12:47 SQL> 
03:12:47 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:12:47 SQL> 
03:12:47 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.06
03:12:47 SQL> 
03:12:47 SQL> -- I created di5min here:
03:12:47 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:12:47 SQL> 
03:12:47 SQL> CREATE OR REPLACE VIEW svm6102 AS
03:12:47   2  SELECT
03:12:47   3  pair
03:12:47   4  ,ydate
03:12:47   5  ,prdate
03:12:47   6  ,rownum rnum -- acts as t in my time-series
03:12:47   7  ,clse
03:12:47   8  -- Derive a bunch of attributes from clse, the latest price:
03:12:47   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
03:12:47  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
03:12:47  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
03:12:47  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
03:12:47  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
03:12:47  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
03:12:47  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
03:12:47  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
03:12:47  17  --
03:12:47  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
03:12:47  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
03:12:47  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
03:12:47  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
03:12:47  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
03:12:47  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
03:12:47  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
03:12:47  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
03:12:47  26  --
03:12:47  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
03:12:47  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
03:12:47  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
03:12:47  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
03:12:47  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
03:12:47  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
03:12:47  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
03:12:47  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
03:12:47  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
03:12:47  36  FROM di5min WHERE pair LIKE'%eur%'
03:12:47  37  AND ydate > sysdate - 95
03:12:47  38  ORDER BY ydate
03:12:47  39  /

View created.

Elapsed: 00:00:00.17
03:12:47 SQL> 
03:12:47 SQL> -- rpt
03:12:47 SQL> 
03:12:47 SQL> SELECT
03:12:47   2  pair
03:12:47   3  ,COUNT(pair)
03:12:47   4  ,MIN(clse),MAX(clse)
03:12:47   5  ,MIN(avg6),MAX(avg6)
03:12:47   6  ,MIN(ydate),MAX(ydate)
03:12:47   7  FROM svm6102
03:12:47   8  GROUP BY pair
03:12:47   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19318    1.29735	   1.4273 1.29875103 1.42436233 2010-10-03 20:55:01 2011-01-05 03:10:00

Elapsed: 00:00:00.89
03:12:48 SQL> 
03:12:48 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:12:48 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.08
03:12:48 SQL> CREATE TABLE svm6122 COMPRESS AS
03:12:48   2  SELECT
03:12:48   3  pair
03:12:48   4  ,ydate
03:12:48   5  ,prdate
03:12:48   6  ,clse
03:12:48   7  -- g6 is important. I want to predict g6:
03:12:48   8  ,ld6 - clse g6
03:12:48   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
03:12:48  10  -- I want more attributes from the ones I derived above:
03:12:48  11  -- clse relation to moving-min
03:12:48  12  ,clse-min4  cm4
03:12:48  13  ,clse-min6  cm6
03:12:48  14  ,clse-min8  cm8
03:12:48  15  ,clse-min10 cm10
03:12:48  16  ,clse-min12 cm12
03:12:48  17  ,clse-min14 cm14
03:12:48  18  ,clse-min16 cm16
03:12:48  19  ,clse-min18 cm18
03:12:48  20  -- clse relation to moving-avg
03:12:48  21  ,clse-avg4  ca4
03:12:48  22  ,clse-avg6  ca6
03:12:48  23  ,clse-avg8  ca8
03:12:48  24  ,clse-avg10 ca10
03:12:48  25  ,clse-avg12 ca12
03:12:48  26  ,clse-avg14 ca14
03:12:48  27  ,clse-avg16 ca16
03:12:48  28  ,clse-avg18 ca18
03:12:48  29  -- clse relation to moving-max
03:12:48  30  ,clse-max4  cx4
03:12:48  31  ,clse-max6  cx6
03:12:48  32  ,clse-max8  cx8
03:12:48  33  ,clse-max10 cx10
03:12:48  34  ,clse-max12 cx12
03:12:48  35  ,clse-max14 cx14
03:12:48  36  ,clse-max16 cx16
03:12:48  37  ,clse-max18 cx18
03:12:48  38  -- Derive more attributes.
03:12:48  39  -- I want to use CORR() here to help SVM see the shape of the series.
03:12:48  40  -- But COVAR_POP is more stable:
03:12:48  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
03:12:48  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:12:48  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:12:48  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:12:48  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:12:48  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:12:48  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:12:48  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:12:48  49  -- Derive date related attributes:
03:12:48  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:12:48  51  ,0+TO_CHAR(ydate,'D')d
03:12:48  52  ,0+TO_CHAR(ydate,'W')w
03:12:48  53  -- mpm stands for minutes-past-midnight:
03:12:48  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:12:48  55  -- mph stands for minutes-past-hour:
03:12:48  56  ,0+TO_CHAR(ydate,'MI')mph
03:12:48  57  FROM svm6102
03:12:48  58  ORDER BY ydate
03:12:48  59  /

Table created.

Elapsed: 00:00:02.48
03:12:50 SQL> 
03:12:50 SQL> -- rpt
03:12:50 SQL> 
03:12:50 SQL> SELECT
03:12:50   2  pair
03:12:50   3  ,COUNT(pair)
03:12:50   4  ,MIN(clse),MAX(clse)
03:12:50   5  ,MIN(ydate),MAX(ydate)
03:12:50   6  FROM svm6122
03:12:50   7  GROUP BY pair
03:12:50   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19318    1.29735	   1.4273 2010-10-03 20:55:01 2011-01-05 03:10:00

Elapsed: 00:00:00.05
03:12:50 SQL> 
03:12:50 SQL> -- Prepare for derivation of NTILE based params:
03:12:50 SQL> 
03:12:50 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.12
03:12:50 SQL> CREATE TABLE svm6142 COMPRESS AS
03:12:50   2  SELECT
03:12:50   3  pair
03:12:50   4  ,ydate
03:12:50   5  ,prdate
03:12:50   6  ,clse
03:12:50   7  ,g6
03:12:50   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
03:12:50   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
03:12:50  10  ,CASE WHEN trend IS NULL THEN 1
03:12:50  11  	    WHEN trend =0      THEN 1
03:12:50  12  	    ELSE trend END trend
03:12:50  13  ,cm4
03:12:50  14  ,cm6
03:12:50  15  ,cm8
03:12:50  16  ,cm10
03:12:50  17  ,cm12
03:12:50  18  ,cm14
03:12:50  19  ,cm16
03:12:50  20  ,cm18
03:12:50  21  --
03:12:50  22  ,ca4
03:12:50  23  ,ca6
03:12:50  24  ,ca8
03:12:50  25  ,ca10
03:12:50  26  ,ca12
03:12:50  27  ,ca14
03:12:50  28  ,ca16
03:12:50  29  ,ca18
03:12:50  30  --
03:12:50  31  ,cx4
03:12:50  32  ,cx6
03:12:50  33  ,cx8
03:12:50  34  ,cx10
03:12:50  35  ,cx12
03:12:50  36  ,cx14
03:12:50  37  ,cx16
03:12:50  38  ,cx18
03:12:50  39  --
03:12:50  40  ,crr4
03:12:50  41  ,crr6
03:12:50  42  ,crr8
03:12:50  43  ,crr10
03:12:50  44  ,crr12
03:12:50  45  ,crr14
03:12:50  46  ,crr16
03:12:50  47  ,crr18
03:12:50  48  --
03:12:50  49  ,hh
03:12:50  50  ,d
03:12:50  51  ,w
03:12:50  52  ,mpm
03:12:50  53  ,mph
03:12:50  54  FROM svm6122
03:12:50  55  ORDER BY ydate
03:12:50  56  /

Table created.

Elapsed: 00:00:00.39
03:12:51 SQL> 
03:12:51 SQL> -- rpt
03:12:51 SQL> 
03:12:51 SQL> SELECT
03:12:51   2  pair
03:12:51   3  ,trend
03:12:51   4  ,gatt
03:12:51   5  ,COUNT(pair)
03:12:51   6  ,AVG(g6)
03:12:51   7  FROM svm6142
03:12:51   8  GROUP BY pair,trend,gatt
03:12:51   9  ORDER BY pair,trend,gatt
03:12:51  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6158 -.00311166
eur_usd 	-1 up	      3560 .004455267
eur_usd 	-1		59
eur_usd 	 1 nup	      5823 -.00324859
eur_usd 	 1 up	      3705 .005071238
eur_usd 	 1		13

6 rows selected.

Elapsed: 00:00:00.04
03:12:51 SQL> 
03:12:51 SQL> 
03:12:51 SQL> -- Derive NTILE based params:
03:12:51 SQL> 
03:12:51 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.03
03:12:51 SQL> CREATE TABLE svm6162 COMPRESS AS
03:12:51   2  SELECT
03:12:51   3  pair
03:12:51   4  ,ydate
03:12:51   5  ,prdate
03:12:51   6  ,clse
03:12:51   7  ,g6
03:12:51   8  ,gatt
03:12:51   9  ,gattn
03:12:51  10  ,trend
03:12:51  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
03:12:51  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
03:12:51  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
03:12:51  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
03:12:51  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
03:12:51  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
03:12:51  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
03:12:51  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
03:12:51  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
03:12:51  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
03:12:51  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
03:12:51  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
03:12:51  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
03:12:51  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
03:12:51  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
03:12:51  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
03:12:51  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
03:12:51  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
03:12:51  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
03:12:51  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
03:12:51  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
03:12:51  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
03:12:51  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
03:12:51  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
03:12:51  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
03:12:51  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
03:12:51  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
03:12:51  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
03:12:51  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
03:12:51  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
03:12:51  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
03:12:51  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
03:12:51  43  ,hh  att32
03:12:51  44  ,d   att33
03:12:51  45  ,w   att34
03:12:51  46  ,mpm att35
03:12:51  47  ,mph att36
03:12:51  48  ,trend att37
03:12:51  49  FROM svm6142
03:12:51  50  ORDER BY ydate
03:12:51  51  /

Table created.

Elapsed: 00:00:04.73
03:12:56 SQL> 
03:12:56 SQL> -- rpt
03:12:56 SQL> 
03:12:56 SQL> SELECT
03:12:56   2  pair
03:12:56   3  ,trend
03:12:56   4  ,gatt
03:12:56   5  ,COUNT(pair)
03:12:56   6  ,AVG(g6)
03:12:56   7  FROM svm6162
03:12:56   8  GROUP BY pair,trend,gatt
03:12:56   9  ORDER BY pair,trend,gatt
03:12:56  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6158 -.00311166
eur_usd 	-1 up	      3560 .004455267
eur_usd 	-1		59
eur_usd 	 1 nup	      5823 -.00324859
eur_usd 	 1 up	      3705 .005071238
eur_usd 	 1		13

6 rows selected.

Elapsed: 00:00:00.03
03:12:56 SQL> 
03:12:56 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.04
03:12:56 SQL> CREATE TABLE modsrc COMPRESS AS
03:12:56   2  SELECT
03:12:56   3  pair
03:12:56   4  ,ydate
03:12:56   5  ,prdate
03:12:56   6  ,trend
03:12:56   7  ,g6
03:12:56   8  ,gatt
03:12:56   9  ,gattn
03:12:56  10  FROM svm6162
03:12:56  11  /

Table created.

Elapsed: 00:00:00.08
03:12:56 SQL> 
03:12:56 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
03:12:56 SQL> 
03:12:56 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.37
03:12:56 SQL> CREATE TABLE eur_ms610 COMPRESS AS
03:12:56   2  SELECT
03:12:56   3  ydate
03:12:56   4  ,trend eur_trend
03:12:56   5  ,g6    eur_g6
03:12:56   6  ,gatt  eur_gatt
03:12:56   7  ,gattn eur_gattn
03:12:56   8  FROM modsrc
03:12:56   9  /

Table created.

Elapsed: 00:00:00.07
03:12:56 SQL> 
03:12:56 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
03:12:57 SQL> 
03:12:57 SQL> -- I need a copy of the attributes:
03:12:57 SQL> 
03:12:57 SQL> 
03:12:57 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.04
03:12:57 SQL> CREATE TABLE eur_att COMPRESS AS
03:12:57   2  SELECT
03:12:57   3  ydate
03:12:57   4  ,att00 eur_att00
03:12:57   5  ,att01 eur_att01
03:12:57   6  ,att02 eur_att02
03:12:57   7  ,att03 eur_att03
03:12:57   8  ,att04 eur_att04
03:12:57   9  ,att05 eur_att05
03:12:57  10  ,att06 eur_att06
03:12:57  11  ,att07 eur_att07
03:12:57  12  ,att08 eur_att08
03:12:57  13  ,att09 eur_att09
03:12:57  14  ,att10 eur_att10
03:12:57  15  ,att11 eur_att11
03:12:57  16  ,att12 eur_att12
03:12:57  17  ,att13 eur_att13
03:12:57  18  ,att14 eur_att14
03:12:57  19  ,att15 eur_att15
03:12:57  20  ,att16 eur_att16
03:12:57  21  ,att17 eur_att17
03:12:57  22  ,att18 eur_att18
03:12:57  23  ,att19 eur_att19
03:12:57  24  ,att20 eur_att20
03:12:57  25  ,att21 eur_att21
03:12:57  26  ,att22 eur_att22
03:12:57  27  ,att23 eur_att23
03:12:57  28  ,att24 eur_att24
03:12:57  29  ,att25 eur_att25
03:12:57  30  ,att26 eur_att26
03:12:57  31  ,att27 eur_att27
03:12:57  32  ,att28 eur_att28
03:12:57  33  ,att29 eur_att29
03:12:57  34  ,att30 eur_att30
03:12:57  35  ,att31 eur_att31
03:12:57  36  ,att32 eur_att32
03:12:57  37  ,att33 eur_att33
03:12:57  38  ,att34 eur_att34
03:12:57  39  ,att35 eur_att35
03:12:57  40  ,att36 eur_att36
03:12:57  41  ,att37 eur_att37
03:12:57  42  FROM svm6162
03:12:57  43  /

Table created.

Elapsed: 00:00:00.18
03:12:57 SQL> 
03:12:57 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
03:12:57 SQL> 
03:12:57 SQL> -- rpt
03:12:57 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19318

Elapsed: 00:00:00.87
03:12:58 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19318

Elapsed: 00:00:00.01
03:12:58 SQL> 
03:12:58 SQL> --
03:12:58 SQL> -- aud610.sql
03:12:58 SQL> --
03:12:58 SQL> 
03:12:58 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:12:58 SQL> 
03:12:58 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.50
03:12:59 SQL> 
03:12:59 SQL> -- I created di5min here:
03:12:59 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:12:59 SQL> 
03:12:59 SQL> CREATE OR REPLACE VIEW svm6102 AS
03:12:59   2  SELECT
03:12:59   3  pair
03:12:59   4  ,ydate
03:12:59   5  ,prdate
03:12:59   6  ,rownum rnum -- acts as t in my time-series
03:12:59   7  ,clse
03:12:59   8  -- Derive a bunch of attributes from clse, the latest price:
03:12:59   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
03:12:59  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
03:12:59  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
03:12:59  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
03:12:59  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
03:12:59  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
03:12:59  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
03:12:59  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
03:12:59  17  --
03:12:59  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
03:12:59  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
03:12:59  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
03:12:59  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
03:12:59  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
03:12:59  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
03:12:59  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
03:12:59  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
03:12:59  26  --
03:12:59  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
03:12:59  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
03:12:59  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
03:12:59  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
03:12:59  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
03:12:59  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
03:12:59  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
03:12:59  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
03:12:59  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
03:12:59  36  FROM di5min WHERE pair LIKE'%aud%'
03:12:59  37  AND ydate > sysdate - 95
03:12:59  38  ORDER BY ydate
03:12:59  39  /

View created.

Elapsed: 00:00:00.05
03:12:59 SQL> 
03:12:59 SQL> -- rpt
03:12:59 SQL> 
03:12:59 SQL> SELECT
03:12:59   2  pair
03:12:59   3  ,COUNT(pair)
03:12:59   4  ,MIN(clse),MAX(clse)
03:12:59   5  ,MIN(avg6),MAX(avg6)
03:12:59   6  ,MIN(ydate),MAX(ydate)
03:12:59   7  FROM svm6102
03:12:59   8  GROUP BY pair
03:12:59   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19315	.95405	  1.02495 .957141438 1.02284247 2010-10-03 20:55:01 2011-01-05 03:10:00

Elapsed: 00:00:00.88
03:13:00 SQL> 
03:13:00 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:13:00 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.19
03:13:00 SQL> CREATE TABLE svm6122 COMPRESS AS
03:13:00   2  SELECT
03:13:00   3  pair
03:13:00   4  ,ydate
03:13:00   5  ,prdate
03:13:00   6  ,clse
03:13:00   7  -- g6 is important. I want to predict g6:
03:13:00   8  ,ld6 - clse g6
03:13:00   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
03:13:00  10  -- I want more attributes from the ones I derived above:
03:13:00  11  -- clse relation to moving-min
03:13:00  12  ,clse-min4  cm4
03:13:00  13  ,clse-min6  cm6
03:13:00  14  ,clse-min8  cm8
03:13:00  15  ,clse-min10 cm10
03:13:00  16  ,clse-min12 cm12
03:13:00  17  ,clse-min14 cm14
03:13:00  18  ,clse-min16 cm16
03:13:00  19  ,clse-min18 cm18
03:13:00  20  -- clse relation to moving-avg
03:13:00  21  ,clse-avg4  ca4
03:13:00  22  ,clse-avg6  ca6
03:13:00  23  ,clse-avg8  ca8
03:13:00  24  ,clse-avg10 ca10
03:13:00  25  ,clse-avg12 ca12
03:13:00  26  ,clse-avg14 ca14
03:13:00  27  ,clse-avg16 ca16
03:13:00  28  ,clse-avg18 ca18
03:13:00  29  -- clse relation to moving-max
03:13:00  30  ,clse-max4  cx4
03:13:00  31  ,clse-max6  cx6
03:13:00  32  ,clse-max8  cx8
03:13:00  33  ,clse-max10 cx10
03:13:00  34  ,clse-max12 cx12
03:13:00  35  ,clse-max14 cx14
03:13:00  36  ,clse-max16 cx16
03:13:00  37  ,clse-max18 cx18
03:13:00  38  -- Derive more attributes.
03:13:00  39  -- I want to use CORR() here to help SVM see the shape of the series.
03:13:00  40  -- But COVAR_POP is more stable:
03:13:00  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
03:13:00  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:13:00  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:13:00  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:13:00  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:13:00  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:13:00  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:13:00  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:13:00  49  -- Derive date related attributes:
03:13:00  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:13:00  51  ,0+TO_CHAR(ydate,'D')d
03:13:00  52  ,0+TO_CHAR(ydate,'W')w
03:13:00  53  -- mpm stands for minutes-past-midnight:
03:13:00  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:13:00  55  -- mph stands for minutes-past-hour:
03:13:00  56  ,0+TO_CHAR(ydate,'MI')mph
03:13:00  57  FROM svm6102
03:13:00  58  ORDER BY ydate
03:13:00  59  /

Table created.

Elapsed: 00:00:02.53
03:13:02 SQL> 
03:13:02 SQL> -- rpt
03:13:02 SQL> 
03:13:02 SQL> SELECT
03:13:02   2  pair
03:13:02   3  ,COUNT(pair)
03:13:02   4  ,MIN(clse),MAX(clse)
03:13:02   5  ,MIN(ydate),MAX(ydate)
03:13:02   6  FROM svm6122
03:13:02   7  GROUP BY pair
03:13:02   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19315	.95405	  1.02495 2010-10-03 20:55:01 2011-01-05 03:10:00

Elapsed: 00:00:00.05
03:13:02 SQL> 
03:13:02 SQL> -- Prepare for derivation of NTILE based params:
03:13:02 SQL> 
03:13:02 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.27
03:13:03 SQL> CREATE TABLE svm6142 COMPRESS AS
03:13:03   2  SELECT
03:13:03   3  pair
03:13:03   4  ,ydate
03:13:03   5  ,prdate
03:13:03   6  ,clse
03:13:03   7  ,g6
03:13:03   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
03:13:03   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
03:13:03  10  ,CASE WHEN trend IS NULL THEN 1
03:13:03  11  	    WHEN trend =0      THEN 1
03:13:03  12  	    ELSE trend END trend
03:13:03  13  ,cm4
03:13:03  14  ,cm6
03:13:03  15  ,cm8
03:13:03  16  ,cm10
03:13:03  17  ,cm12
03:13:03  18  ,cm14
03:13:03  19  ,cm16
03:13:03  20  ,cm18
03:13:03  21  --
03:13:03  22  ,ca4
03:13:03  23  ,ca6
03:13:03  24  ,ca8
03:13:03  25  ,ca10
03:13:03  26  ,ca12
03:13:03  27  ,ca14
03:13:03  28  ,ca16
03:13:03  29  ,ca18
03:13:03  30  --
03:13:03  31  ,cx4
03:13:03  32  ,cx6
03:13:03  33  ,cx8
03:13:03  34  ,cx10
03:13:03  35  ,cx12
03:13:03  36  ,cx14
03:13:03  37  ,cx16
03:13:03  38  ,cx18
03:13:03  39  --
03:13:03  40  ,crr4
03:13:03  41  ,crr6
03:13:03  42  ,crr8
03:13:03  43  ,crr10
03:13:03  44  ,crr12
03:13:03  45  ,crr14
03:13:03  46  ,crr16
03:13:03  47  ,crr18
03:13:03  48  --
03:13:03  49  ,hh
03:13:03  50  ,d
03:13:03  51  ,w
03:13:03  52  ,mpm
03:13:03  53  ,mph
03:13:03  54  FROM svm6122
03:13:03  55  ORDER BY ydate
03:13:03  56  /

Table created.

Elapsed: 00:00:00.36
03:13:03 SQL> 
03:13:03 SQL> -- rpt
03:13:03 SQL> 
03:13:03 SQL> SELECT
03:13:03   2  pair
03:13:03   3  ,trend
03:13:03   4  ,gatt
03:13:03   5  ,COUNT(pair)
03:13:03   6  ,AVG(g6)
03:13:03   7  FROM svm6142
03:13:03   8  GROUP BY pair,trend,gatt
03:13:03   9  ORDER BY pair,trend,gatt
03:13:03  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5416 -.00219697
aud_usd 	-1 up	      3646 .003769261
aud_usd 	-1		42
aud_usd 	 1 nup	      6588 -.00212107
aud_usd 	 1 up	      3593 .004054752
aud_usd 	 1		30

6 rows selected.

Elapsed: 00:00:00.04
03:13:03 SQL> 
03:13:03 SQL> 
03:13:03 SQL> -- Derive NTILE based params:
03:13:03 SQL> 
03:13:03 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.17
03:13:03 SQL> CREATE TABLE svm6162 COMPRESS AS
03:13:03   2  SELECT
03:13:03   3  pair
03:13:03   4  ,ydate
03:13:03   5  ,prdate
03:13:03   6  ,clse
03:13:03   7  ,g6
03:13:03   8  ,gatt
03:13:03   9  ,gattn
03:13:03  10  ,trend
03:13:03  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
03:13:03  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
03:13:03  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
03:13:03  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
03:13:03  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
03:13:03  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
03:13:03  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
03:13:03  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
03:13:03  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
03:13:03  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
03:13:03  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
03:13:03  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
03:13:03  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
03:13:03  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
03:13:03  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
03:13:03  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
03:13:03  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
03:13:03  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
03:13:03  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
03:13:03  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
03:13:03  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
03:13:03  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
03:13:03  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
03:13:03  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
03:13:03  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
03:13:03  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
03:13:03  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
03:13:03  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
03:13:03  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
03:13:03  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
03:13:03  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
03:13:03  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
03:13:03  43  ,hh  att32
03:13:03  44  ,d   att33
03:13:03  45  ,w   att34
03:13:03  46  ,mpm att35
03:13:03  47  ,mph att36
03:13:03  48  ,trend att37
03:13:03  49  FROM svm6142
03:13:03  50  ORDER BY ydate
03:13:03  51  /

Table created.

Elapsed: 00:00:04.76
03:13:08 SQL> 
03:13:08 SQL> -- rpt
03:13:08 SQL> 
03:13:08 SQL> SELECT
03:13:08   2  pair
03:13:08   3  ,trend
03:13:08   4  ,gatt
03:13:08   5  ,COUNT(pair)
03:13:08   6  ,AVG(g6)
03:13:08   7  FROM svm6162
03:13:08   8  GROUP BY pair,trend,gatt
03:13:08   9  ORDER BY pair,trend,gatt
03:13:08  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5416 -.00219697
aud_usd 	-1 up	      3646 .003769261
aud_usd 	-1		42
aud_usd 	 1 nup	      6588 -.00212107
aud_usd 	 1 up	      3593 .004054752
aud_usd 	 1		30

6 rows selected.

Elapsed: 00:00:00.03
03:13:08 SQL> 
03:13:08 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
03:13:08 SQL> CREATE TABLE modsrc COMPRESS AS
03:13:08   2  SELECT
03:13:08   3  pair
03:13:08   4  ,ydate
03:13:08   5  ,prdate
03:13:08   6  ,trend
03:13:08   7  ,g6
03:13:08   8  ,gatt
03:13:08   9  ,gattn
03:13:08  10  FROM svm6162
03:13:08  11  /

Table created.

Elapsed: 00:00:00.08
03:13:08 SQL> 
03:13:08 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
03:13:08 SQL> 
03:13:08 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
03:13:09 SQL> CREATE TABLE aud_ms610 COMPRESS AS
03:13:09   2  SELECT
03:13:09   3  ydate
03:13:09   4  ,trend aud_trend
03:13:09   5  ,g6    aud_g6
03:13:09   6  ,gatt  aud_gatt
03:13:09   7  ,gattn aud_gattn
03:13:09   8  FROM modsrc
03:13:09   9  /

Table created.

Elapsed: 00:00:00.07
03:13:09 SQL> 
03:13:09 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
03:13:09 SQL> 
03:13:09 SQL> -- I need a copy of the attributes:
03:13:09 SQL> 
03:13:09 SQL> 
03:13:09 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.14
03:13:09 SQL> CREATE TABLE aud_att COMPRESS AS
03:13:09   2  SELECT
03:13:09   3  ydate
03:13:09   4  ,att00 aud_att00
03:13:09   5  ,att01 aud_att01
03:13:09   6  ,att02 aud_att02
03:13:09   7  ,att03 aud_att03
03:13:09   8  ,att04 aud_att04
03:13:09   9  ,att05 aud_att05
03:13:09  10  ,att06 aud_att06
03:13:09  11  ,att07 aud_att07
03:13:09  12  ,att08 aud_att08
03:13:09  13  ,att09 aud_att09
03:13:09  14  ,att10 aud_att10
03:13:09  15  ,att11 aud_att11
03:13:09  16  ,att12 aud_att12
03:13:09  17  ,att13 aud_att13
03:13:09  18  ,att14 aud_att14
03:13:09  19  ,att15 aud_att15
03:13:09  20  ,att16 aud_att16
03:13:09  21  ,att17 aud_att17
03:13:09  22  ,att18 aud_att18
03:13:09  23  ,att19 aud_att19
03:13:09  24  ,att20 aud_att20
03:13:09  25  ,att21 aud_att21
03:13:09  26  ,att22 aud_att22
03:13:09  27  ,att23 aud_att23
03:13:09  28  ,att24 aud_att24
03:13:09  29  ,att25 aud_att25
03:13:09  30  ,att26 aud_att26
03:13:09  31  ,att27 aud_att27
03:13:09  32  ,att28 aud_att28
03:13:09  33  ,att29 aud_att29
03:13:09  34  ,att30 aud_att30
03:13:09  35  ,att31 aud_att31
03:13:09  36  ,att32 aud_att32
03:13:09  37  ,att33 aud_att33
03:13:09  38  ,att34 aud_att34
03:13:09  39  ,att35 aud_att35
03:13:09  40  ,att36 aud_att36
03:13:09  41  ,att37 aud_att37
03:13:09  42  FROM svm6162
03:13:09  43  /

Table created.

Elapsed: 00:00:00.17
03:13:09 SQL> 
03:13:09 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
03:13:10 SQL> 
03:13:10 SQL> -- rpt
03:13:10 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19315

Elapsed: 00:00:00.85
03:13:10 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19315

Elapsed: 00:00:00.00
03:13:10 SQL> 
03:13:10 SQL> --
03:13:10 SQL> -- gbp610.sql
03:13:10 SQL> --
03:13:10 SQL> 
03:13:10 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:13:10 SQL> 
03:13:10 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.46
03:13:11 SQL> 
03:13:11 SQL> -- I created di5min here:
03:13:11 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:13:11 SQL> 
03:13:11 SQL> CREATE OR REPLACE VIEW svm6102 AS
03:13:11   2  SELECT
03:13:11   3  pair
03:13:11   4  ,ydate
03:13:11   5  ,prdate
03:13:11   6  ,rownum rnum -- acts as t in my time-series
03:13:11   7  ,clse
03:13:11   8  -- Derive a bunch of attributes from clse, the latest price:
03:13:11   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
03:13:11  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
03:13:11  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
03:13:11  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
03:13:11  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
03:13:11  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
03:13:11  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
03:13:11  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
03:13:11  17  --
03:13:11  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
03:13:11  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
03:13:11  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
03:13:11  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
03:13:11  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
03:13:11  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
03:13:11  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
03:13:11  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
03:13:11  26  --
03:13:11  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
03:13:11  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
03:13:11  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
03:13:11  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
03:13:11  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
03:13:11  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
03:13:11  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
03:13:11  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
03:13:11  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
03:13:11  36  FROM di5min WHERE pair LIKE'%gbp%'
03:13:11  37  AND ydate > sysdate - 95
03:13:11  38  ORDER BY ydate
03:13:11  39  /

View created.

Elapsed: 00:00:00.05
03:13:11 SQL> 
03:13:11 SQL> -- rpt
03:13:11 SQL> 
03:13:11 SQL> SELECT
03:13:11   2  pair
03:13:11   3  ,COUNT(pair)
03:13:11   4  ,MIN(clse),MAX(clse)
03:13:11   5  ,MIN(avg6),MAX(avg6)
03:13:11   6  ,MIN(ydate),MAX(ydate)
03:13:11   7  FROM svm6102
03:13:11   8  GROUP BY pair
03:13:11   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19317   1.535325	   1.6295 1.53696747 1.62716986 2010-10-03 20:55:01 2011-01-05 03:10:00

Elapsed: 00:00:00.87
03:13:12 SQL> 
03:13:12 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:13:12 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.27
03:13:12 SQL> CREATE TABLE svm6122 COMPRESS AS
03:13:12   2  SELECT
03:13:12   3  pair
03:13:12   4  ,ydate
03:13:12   5  ,prdate
03:13:12   6  ,clse
03:13:12   7  -- g6 is important. I want to predict g6:
03:13:12   8  ,ld6 - clse g6
03:13:12   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
03:13:12  10  -- I want more attributes from the ones I derived above:
03:13:12  11  -- clse relation to moving-min
03:13:12  12  ,clse-min4  cm4
03:13:12  13  ,clse-min6  cm6
03:13:12  14  ,clse-min8  cm8
03:13:12  15  ,clse-min10 cm10
03:13:12  16  ,clse-min12 cm12
03:13:12  17  ,clse-min14 cm14
03:13:12  18  ,clse-min16 cm16
03:13:12  19  ,clse-min18 cm18
03:13:12  20  -- clse relation to moving-avg
03:13:12  21  ,clse-avg4  ca4
03:13:12  22  ,clse-avg6  ca6
03:13:12  23  ,clse-avg8  ca8
03:13:12  24  ,clse-avg10 ca10
03:13:12  25  ,clse-avg12 ca12
03:13:12  26  ,clse-avg14 ca14
03:13:12  27  ,clse-avg16 ca16
03:13:12  28  ,clse-avg18 ca18
03:13:12  29  -- clse relation to moving-max
03:13:12  30  ,clse-max4  cx4
03:13:12  31  ,clse-max6  cx6
03:13:12  32  ,clse-max8  cx8
03:13:12  33  ,clse-max10 cx10
03:13:12  34  ,clse-max12 cx12
03:13:12  35  ,clse-max14 cx14
03:13:12  36  ,clse-max16 cx16
03:13:12  37  ,clse-max18 cx18
03:13:12  38  -- Derive more attributes.
03:13:12  39  -- I want to use CORR() here to help SVM see the shape of the series.
03:13:12  40  -- But COVAR_POP is more stable:
03:13:12  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
03:13:12  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:13:12  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:13:12  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:13:12  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:13:12  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:13:12  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:13:12  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:13:12  49  -- Derive date related attributes:
03:13:12  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:13:12  51  ,0+TO_CHAR(ydate,'D')d
03:13:12  52  ,0+TO_CHAR(ydate,'W')w
03:13:12  53  -- mpm stands for minutes-past-midnight:
03:13:12  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:13:12  55  -- mph stands for minutes-past-hour:
03:13:12  56  ,0+TO_CHAR(ydate,'MI')mph
03:13:12  57  FROM svm6102
03:13:12  58  ORDER BY ydate
03:13:12  59  /

Table created.

Elapsed: 00:00:02.04
03:13:14 SQL> 
03:13:14 SQL> -- rpt
03:13:14 SQL> 
03:13:14 SQL> SELECT
03:13:14   2  pair
03:13:14   3  ,COUNT(pair)
03:13:14   4  ,MIN(clse),MAX(clse)
03:13:14   5  ,MIN(ydate),MAX(ydate)
03:13:14   6  FROM svm6122
03:13:14   7  GROUP BY pair
03:13:14   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19317   1.535325	   1.6295 2010-10-03 20:55:01 2011-01-05 03:10:00

Elapsed: 00:00:00.04
03:13:14 SQL> 
03:13:14 SQL> -- Prepare for derivation of NTILE based params:
03:13:14 SQL> 
03:13:14 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.37
03:13:14 SQL> CREATE TABLE svm6142 COMPRESS AS
03:13:14   2  SELECT
03:13:14   3  pair
03:13:14   4  ,ydate
03:13:14   5  ,prdate
03:13:14   6  ,clse
03:13:14   7  ,g6
03:13:14   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
03:13:14   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
03:13:14  10  ,CASE WHEN trend IS NULL THEN 1
03:13:14  11  	    WHEN trend =0      THEN 1
03:13:14  12  	    ELSE trend END trend
03:13:14  13  ,cm4
03:13:14  14  ,cm6
03:13:14  15  ,cm8
03:13:14  16  ,cm10
03:13:14  17  ,cm12
03:13:14  18  ,cm14
03:13:14  19  ,cm16
03:13:14  20  ,cm18
03:13:14  21  --
03:13:14  22  ,ca4
03:13:14  23  ,ca6
03:13:14  24  ,ca8
03:13:14  25  ,ca10
03:13:14  26  ,ca12
03:13:14  27  ,ca14
03:13:14  28  ,ca16
03:13:14  29  ,ca18
03:13:14  30  --
03:13:14  31  ,cx4
03:13:14  32  ,cx6
03:13:14  33  ,cx8
03:13:14  34  ,cx10
03:13:14  35  ,cx12
03:13:14  36  ,cx14
03:13:14  37  ,cx16
03:13:14  38  ,cx18
03:13:14  39  --
03:13:14  40  ,crr4
03:13:14  41  ,crr6
03:13:14  42  ,crr8
03:13:14  43  ,crr10
03:13:14  44  ,crr12
03:13:14  45  ,crr14
03:13:14  46  ,crr16
03:13:14  47  ,crr18
03:13:14  48  --
03:13:14  49  ,hh
03:13:14  50  ,d
03:13:14  51  ,w
03:13:14  52  ,mpm
03:13:14  53  ,mph
03:13:14  54  FROM svm6122
03:13:14  55  ORDER BY ydate
03:13:14  56  /

Table created.

Elapsed: 00:00:00.36
03:13:15 SQL> 
03:13:15 SQL> -- rpt
03:13:15 SQL> 
03:13:15 SQL> SELECT
03:13:15   2  pair
03:13:15   3  ,trend
03:13:15   4  ,gatt
03:13:15   5  ,COUNT(pair)
03:13:15   6  ,AVG(g6)
03:13:15   7  FROM svm6142
03:13:15   8  GROUP BY pair,trend,gatt
03:13:15   9  ORDER BY pair,trend,gatt
03:13:15  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6258 -.00265423
gbp_usd 	-1 up	      3464 .004389517
gbp_usd 	-1		49
gbp_usd 	 1 nup	      6083 -.00259969
gbp_usd 	 1 up	      3440 .004531722
gbp_usd 	 1		23

6 rows selected.

Elapsed: 00:00:00.04
03:13:15 SQL> 
03:13:15 SQL> 
03:13:15 SQL> -- Derive NTILE based params:
03:13:15 SQL> 
03:13:15 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
03:13:15 SQL> CREATE TABLE svm6162 COMPRESS AS
03:13:15   2  SELECT
03:13:15   3  pair
03:13:15   4  ,ydate
03:13:15   5  ,prdate
03:13:15   6  ,clse
03:13:15   7  ,g6
03:13:15   8  ,gatt
03:13:15   9  ,gattn
03:13:15  10  ,trend
03:13:15  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
03:13:15  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
03:13:15  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
03:13:15  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
03:13:15  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
03:13:15  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
03:13:15  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
03:13:15  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
03:13:15  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
03:13:15  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
03:13:15  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
03:13:15  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
03:13:15  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
03:13:15  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
03:13:15  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
03:13:15  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
03:13:15  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
03:13:15  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
03:13:15  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
03:13:15  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
03:13:15  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
03:13:15  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
03:13:15  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
03:13:15  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
03:13:15  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
03:13:15  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
03:13:15  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
03:13:15  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
03:13:15  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
03:13:15  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
03:13:15  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
03:13:15  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
03:13:15  43  ,hh  att32
03:13:15  44  ,d   att33
03:13:15  45  ,w   att34
03:13:15  46  ,mpm att35
03:13:15  47  ,mph att36
03:13:15  48  ,trend att37
03:13:15  49  FROM svm6142
03:13:15  50  ORDER BY ydate
03:13:15  51  /

Table created.

Elapsed: 00:00:04.68
03:13:20 SQL> 
03:13:20 SQL> -- rpt
03:13:20 SQL> 
03:13:20 SQL> SELECT
03:13:20   2  pair
03:13:20   3  ,trend
03:13:20   4  ,gatt
03:13:20   5  ,COUNT(pair)
03:13:20   6  ,AVG(g6)
03:13:20   7  FROM svm6162
03:13:20   8  GROUP BY pair,trend,gatt
03:13:20   9  ORDER BY pair,trend,gatt
03:13:20  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6258 -.00265423
gbp_usd 	-1 up	      3464 .004389517
gbp_usd 	-1		49
gbp_usd 	 1 nup	      6083 -.00259969
gbp_usd 	 1 up	      3440 .004531722
gbp_usd 	 1		23

6 rows selected.

Elapsed: 00:00:00.03
03:13:20 SQL> 
03:13:20 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
03:13:20 SQL> CREATE TABLE modsrc COMPRESS AS
03:13:20   2  SELECT
03:13:20   3  pair
03:13:20   4  ,ydate
03:13:20   5  ,prdate
03:13:20   6  ,trend
03:13:20   7  ,g6
03:13:20   8  ,gatt
03:13:20   9  ,gattn
03:13:20  10  FROM svm6162
03:13:20  11  /

Table created.

Elapsed: 00:00:00.11
03:13:20 SQL> 
03:13:20 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
03:13:20 SQL> 
03:13:20 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
03:13:20 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
03:13:20   2  SELECT
03:13:20   3  ydate
03:13:20   4  ,trend gbp_trend
03:13:20   5  ,g6    gbp_g6
03:13:20   6  ,gatt  gbp_gatt
03:13:20   7  ,gattn gbp_gattn
03:13:20   8  FROM modsrc
03:13:20   9  /

Table created.

Elapsed: 00:00:00.06
03:13:20 SQL> 
03:13:20 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
03:13:20 SQL> 
03:13:20 SQL> -- I need a copy of the attributes:
03:13:20 SQL> 
03:13:20 SQL> 
03:13:20 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.04
03:13:21 SQL> CREATE TABLE gbp_att COMPRESS AS
03:13:21   2  SELECT
03:13:21   3  ydate
03:13:21   4  ,att00 gbp_att00
03:13:21   5  ,att01 gbp_att01
03:13:21   6  ,att02 gbp_att02
03:13:21   7  ,att03 gbp_att03
03:13:21   8  ,att04 gbp_att04
03:13:21   9  ,att05 gbp_att05
03:13:21  10  ,att06 gbp_att06
03:13:21  11  ,att07 gbp_att07
03:13:21  12  ,att08 gbp_att08
03:13:21  13  ,att09 gbp_att09
03:13:21  14  ,att10 gbp_att10
03:13:21  15  ,att11 gbp_att11
03:13:21  16  ,att12 gbp_att12
03:13:21  17  ,att13 gbp_att13
03:13:21  18  ,att14 gbp_att14
03:13:21  19  ,att15 gbp_att15
03:13:21  20  ,att16 gbp_att16
03:13:21  21  ,att17 gbp_att17
03:13:21  22  ,att18 gbp_att18
03:13:21  23  ,att19 gbp_att19
03:13:21  24  ,att20 gbp_att20
03:13:21  25  ,att21 gbp_att21
03:13:21  26  ,att22 gbp_att22
03:13:21  27  ,att23 gbp_att23
03:13:21  28  ,att24 gbp_att24
03:13:21  29  ,att25 gbp_att25
03:13:21  30  ,att26 gbp_att26
03:13:21  31  ,att27 gbp_att27
03:13:21  32  ,att28 gbp_att28
03:13:21  33  ,att29 gbp_att29
03:13:21  34  ,att30 gbp_att30
03:13:21  35  ,att31 gbp_att31
03:13:21  36  ,att32 gbp_att32
03:13:21  37  ,att33 gbp_att33
03:13:21  38  ,att34 gbp_att34
03:13:21  39  ,att35 gbp_att35
03:13:21  40  ,att36 gbp_att36
03:13:21  41  ,att37 gbp_att37
03:13:21  42  FROM svm6162
03:13:21  43  /

Table created.

Elapsed: 00:00:00.19
03:13:21 SQL> 
03:13:21 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.41
03:13:21 SQL> 
03:13:21 SQL> -- rpt
03:13:21 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19317

Elapsed: 00:00:00.84
03:13:22 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19317

Elapsed: 00:00:00.01
03:13:22 SQL> 
03:13:22 SQL> --
03:13:22 SQL> -- jpy610.sql
03:13:22 SQL> --
03:13:22 SQL> 
03:13:22 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:13:22 SQL> 
03:13:22 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.49
03:13:22 SQL> 
03:13:22 SQL> -- I created di5min here:
03:13:22 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:13:22 SQL> 
03:13:22 SQL> CREATE OR REPLACE VIEW svm6102 AS
03:13:22   2  SELECT
03:13:22   3  pair
03:13:22   4  ,ydate
03:13:22   5  ,prdate
03:13:22   6  ,rownum rnum -- acts as t in my time-series
03:13:22   7  ,clse
03:13:22   8  -- Derive a bunch of attributes from clse, the latest price:
03:13:22   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
03:13:22  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
03:13:22  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
03:13:22  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
03:13:22  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
03:13:22  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
03:13:22  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
03:13:22  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
03:13:22  17  --
03:13:22  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
03:13:22  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
03:13:22  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
03:13:22  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
03:13:22  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
03:13:22  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
03:13:22  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
03:13:22  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
03:13:22  26  --
03:13:22  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
03:13:22  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
03:13:22  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
03:13:22  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
03:13:22  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
03:13:22  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
03:13:22  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
03:13:22  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
03:13:22  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
03:13:22  36  FROM di5min WHERE pair LIKE'%jpy%'
03:13:22  37  AND ydate > sysdate - 95
03:13:22  38  ORDER BY ydate
03:13:22  39  /

View created.

Elapsed: 00:00:00.05
03:13:23 SQL> 
03:13:23 SQL> -- rpt
03:13:23 SQL> 
03:13:23 SQL> SELECT
03:13:23   2  pair
03:13:23   3  ,COUNT(pair)
03:13:23   4  ,MIN(clse),MAX(clse)
03:13:23   5  ,MIN(avg6),MAX(avg6)
03:13:23   6  ,MIN(ydate),MAX(ydate)
03:13:23   7  FROM svm6102
03:13:23   8  GROUP BY pair
03:13:23   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19315	 80.25	   84.485 80.3595205 84.3105479 2010-10-03 20:55:01 2011-01-05 03:10:00

Elapsed: 00:00:00.94
03:13:23 SQL> 
03:13:23 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:13:23 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
03:13:24 SQL> CREATE TABLE svm6122 COMPRESS AS
03:13:24   2  SELECT
03:13:24   3  pair
03:13:24   4  ,ydate
03:13:24   5  ,prdate
03:13:24   6  ,clse
03:13:24   7  -- g6 is important. I want to predict g6:
03:13:24   8  ,ld6 - clse g6
03:13:24   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
03:13:24  10  -- I want more attributes from the ones I derived above:
03:13:24  11  -- clse relation to moving-min
03:13:24  12  ,clse-min4  cm4
03:13:24  13  ,clse-min6  cm6
03:13:24  14  ,clse-min8  cm8
03:13:24  15  ,clse-min10 cm10
03:13:24  16  ,clse-min12 cm12
03:13:24  17  ,clse-min14 cm14
03:13:24  18  ,clse-min16 cm16
03:13:24  19  ,clse-min18 cm18
03:13:24  20  -- clse relation to moving-avg
03:13:24  21  ,clse-avg4  ca4
03:13:24  22  ,clse-avg6  ca6
03:13:24  23  ,clse-avg8  ca8
03:13:24  24  ,clse-avg10 ca10
03:13:24  25  ,clse-avg12 ca12
03:13:24  26  ,clse-avg14 ca14
03:13:24  27  ,clse-avg16 ca16
03:13:24  28  ,clse-avg18 ca18
03:13:24  29  -- clse relation to moving-max
03:13:24  30  ,clse-max4  cx4
03:13:24  31  ,clse-max6  cx6
03:13:24  32  ,clse-max8  cx8
03:13:24  33  ,clse-max10 cx10
03:13:24  34  ,clse-max12 cx12
03:13:24  35  ,clse-max14 cx14
03:13:24  36  ,clse-max16 cx16
03:13:24  37  ,clse-max18 cx18
03:13:24  38  -- Derive more attributes.
03:13:24  39  -- I want to use CORR() here to help SVM see the shape of the series.
03:13:24  40  -- But COVAR_POP is more stable:
03:13:24  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
03:13:24  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:13:24  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:13:24  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:13:24  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:13:24  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:13:24  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:13:24  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:13:24  49  -- Derive date related attributes:
03:13:24  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:13:24  51  ,0+TO_CHAR(ydate,'D')d
03:13:24  52  ,0+TO_CHAR(ydate,'W')w
03:13:24  53  -- mpm stands for minutes-past-midnight:
03:13:24  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:13:24  55  -- mph stands for minutes-past-hour:
03:13:24  56  ,0+TO_CHAR(ydate,'MI')mph
03:13:24  57  FROM svm6102
03:13:24  58  ORDER BY ydate
03:13:24  59  /

Table created.

Elapsed: 00:00:02.12
03:13:26 SQL> 
03:13:26 SQL> -- rpt
03:13:26 SQL> 
03:13:26 SQL> SELECT
03:13:26   2  pair
03:13:26   3  ,COUNT(pair)
03:13:26   4  ,MIN(clse),MAX(clse)
03:13:26   5  ,MIN(ydate),MAX(ydate)
03:13:26   6  FROM svm6122
03:13:26   7  GROUP BY pair
03:13:26   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19315	 80.25	   84.485 2010-10-03 20:55:01 2011-01-05 03:10:00

Elapsed: 00:00:00.04
03:13:26 SQL> 
03:13:26 SQL> -- Prepare for derivation of NTILE based params:
03:13:26 SQL> 
03:13:26 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.18
03:13:26 SQL> CREATE TABLE svm6142 COMPRESS AS
03:13:26   2  SELECT
03:13:26   3  pair
03:13:26   4  ,ydate
03:13:26   5  ,prdate
03:13:26   6  ,clse
03:13:26   7  ,g6
03:13:26   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
03:13:26   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
03:13:26  10  ,CASE WHEN trend IS NULL THEN 1
03:13:26  11  	    WHEN trend =0      THEN 1
03:13:26  12  	    ELSE trend END trend
03:13:26  13  ,cm4
03:13:26  14  ,cm6
03:13:26  15  ,cm8
03:13:26  16  ,cm10
03:13:26  17  ,cm12
03:13:26  18  ,cm14
03:13:26  19  ,cm16
03:13:26  20  ,cm18
03:13:26  21  --
03:13:26  22  ,ca4
03:13:26  23  ,ca6
03:13:26  24  ,ca8
03:13:26  25  ,ca10
03:13:26  26  ,ca12
03:13:26  27  ,ca14
03:13:26  28  ,ca16
03:13:26  29  ,ca18
03:13:26  30  --
03:13:26  31  ,cx4
03:13:26  32  ,cx6
03:13:26  33  ,cx8
03:13:26  34  ,cx10
03:13:26  35  ,cx12
03:13:26  36  ,cx14
03:13:26  37  ,cx16
03:13:26  38  ,cx18
03:13:26  39  --
03:13:26  40  ,crr4
03:13:26  41  ,crr6
03:13:26  42  ,crr8
03:13:26  43  ,crr10
03:13:26  44  ,crr12
03:13:26  45  ,crr14
03:13:26  46  ,crr16
03:13:26  47  ,crr18
03:13:26  48  --
03:13:26  49  ,hh
03:13:26  50  ,d
03:13:26  51  ,w
03:13:26  52  ,mpm
03:13:26  53  ,mph
03:13:26  54  FROM svm6122
03:13:26  55  ORDER BY ydate
03:13:26  56  /

Table created.

Elapsed: 00:00:00.36
03:13:26 SQL> 
03:13:26 SQL> -- rpt
03:13:26 SQL> 
03:13:26 SQL> SELECT
03:13:26   2  pair
03:13:26   3  ,trend
03:13:26   4  ,gatt
03:13:26   5  ,COUNT(pair)
03:13:26   6  ,AVG(g6)
03:13:26   7  FROM svm6142
03:13:26   8  GROUP BY pair,trend,gatt
03:13:26   9  ORDER BY pair,trend,gatt
03:13:26  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5110 -.16667614
usd_jpy 	-1 up	      4767 .163953255
usd_jpy 	-1		12
usd_jpy 	 1 nup	      4930 -.15710822
usd_jpy 	 1 up	      4436 .168490404
usd_jpy 	 1		60

6 rows selected.

Elapsed: 00:00:00.08
03:13:26 SQL> 
03:13:26 SQL> 
03:13:26 SQL> -- Derive NTILE based params:
03:13:26 SQL> 
03:13:26 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.19
03:13:27 SQL> CREATE TABLE svm6162 COMPRESS AS
03:13:27   2  SELECT
03:13:27   3  pair
03:13:27   4  ,ydate
03:13:27   5  ,prdate
03:13:27   6  ,clse
03:13:27   7  ,g6
03:13:27   8  ,gatt
03:13:27   9  ,gattn
03:13:27  10  ,trend
03:13:27  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
03:13:27  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
03:13:27  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
03:13:27  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
03:13:27  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
03:13:27  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
03:13:27  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
03:13:27  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
03:13:27  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
03:13:27  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
03:13:27  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
03:13:27  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
03:13:27  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
03:13:27  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
03:13:27  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
03:13:27  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
03:13:27  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
03:13:27  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
03:13:27  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
03:13:27  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
03:13:27  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
03:13:27  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
03:13:27  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
03:13:27  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
03:13:27  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
03:13:27  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
03:13:27  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
03:13:27  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
03:13:27  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
03:13:27  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
03:13:27  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
03:13:27  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
03:13:27  43  ,hh  att32
03:13:27  44  ,d   att33
03:13:27  45  ,w   att34
03:13:27  46  ,mpm att35
03:13:27  47  ,mph att36
03:13:27  48  ,trend att37
03:13:27  49  FROM svm6142
03:13:27  50  ORDER BY ydate
03:13:27  51  /

Table created.

Elapsed: 00:00:04.82
03:13:31 SQL> 
03:13:31 SQL> -- rpt
03:13:31 SQL> 
03:13:31 SQL> SELECT
03:13:31   2  pair
03:13:31   3  ,trend
03:13:31   4  ,gatt
03:13:31   5  ,COUNT(pair)
03:13:31   6  ,AVG(g6)
03:13:31   7  FROM svm6162
03:13:31   8  GROUP BY pair,trend,gatt
03:13:31   9  ORDER BY pair,trend,gatt
03:13:31  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5110 -.16667614
usd_jpy 	-1 up	      4767 .163953255
usd_jpy 	-1		12
usd_jpy 	 1 nup	      4930 -.15710822
usd_jpy 	 1 up	      4436 .168490404
usd_jpy 	 1		60

6 rows selected.

Elapsed: 00:00:00.03
03:13:32 SQL> 
03:13:32 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:01.07
03:13:33 SQL> CREATE TABLE modsrc COMPRESS AS
03:13:33   2  SELECT
03:13:33   3  pair
03:13:33   4  ,ydate
03:13:33   5  ,prdate
03:13:33   6  ,trend
03:13:33   7  ,g6
03:13:33   8  ,gatt
03:13:33   9  ,gattn
03:13:33  10  FROM svm6162
03:13:33  11  /

Table created.

Elapsed: 00:00:00.08
03:13:33 SQL> 
03:13:33 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
03:13:33 SQL> 
03:13:33 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
03:13:33 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
03:13:33   2  SELECT
03:13:33   3  ydate
03:13:33   4  ,trend jpy_trend
03:13:33   5  ,g6    jpy_g6
03:13:33   6  ,gatt  jpy_gatt
03:13:33   7  ,gattn jpy_gattn
03:13:33   8  FROM modsrc
03:13:33   9  /

Table created.

Elapsed: 00:00:00.08
03:13:33 SQL> 
03:13:33 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
03:13:33 SQL> 
03:13:33 SQL> -- I need a copy of the attributes:
03:13:33 SQL> 
03:13:33 SQL> 
03:13:33 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.05
03:13:33 SQL> CREATE TABLE jpy_att COMPRESS AS
03:13:33   2  SELECT
03:13:33   3  ydate
03:13:33   4  ,att00 jpy_att00
03:13:33   5  ,att01 jpy_att01
03:13:33   6  ,att02 jpy_att02
03:13:33   7  ,att03 jpy_att03
03:13:33   8  ,att04 jpy_att04
03:13:33   9  ,att05 jpy_att05
03:13:33  10  ,att06 jpy_att06
03:13:33  11  ,att07 jpy_att07
03:13:33  12  ,att08 jpy_att08
03:13:33  13  ,att09 jpy_att09
03:13:33  14  ,att10 jpy_att10
03:13:33  15  ,att11 jpy_att11
03:13:33  16  ,att12 jpy_att12
03:13:33  17  ,att13 jpy_att13
03:13:33  18  ,att14 jpy_att14
03:13:33  19  ,att15 jpy_att15
03:13:33  20  ,att16 jpy_att16
03:13:33  21  ,att17 jpy_att17
03:13:33  22  ,att18 jpy_att18
03:13:33  23  ,att19 jpy_att19
03:13:33  24  ,att20 jpy_att20
03:13:33  25  ,att21 jpy_att21
03:13:33  26  ,att22 jpy_att22
03:13:33  27  ,att23 jpy_att23
03:13:33  28  ,att24 jpy_att24
03:13:33  29  ,att25 jpy_att25
03:13:33  30  ,att26 jpy_att26
03:13:33  31  ,att27 jpy_att27
03:13:33  32  ,att28 jpy_att28
03:13:33  33  ,att29 jpy_att29
03:13:33  34  ,att30 jpy_att30
03:13:33  35  ,att31 jpy_att31
03:13:33  36  ,att32 jpy_att32
03:13:33  37  ,att33 jpy_att33
03:13:33  38  ,att34 jpy_att34
03:13:33  39  ,att35 jpy_att35
03:13:33  40  ,att36 jpy_att36
03:13:33  41  ,att37 jpy_att37
03:13:33  42  FROM svm6162
03:13:33  43  /

Table created.

Elapsed: 00:00:00.17
03:13:33 SQL> 
03:13:33 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
03:13:34 SQL> 
03:13:34 SQL> -- rpt
03:13:34 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19315

Elapsed: 00:00:00.91
03:13:35 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19315

Elapsed: 00:00:00.00
03:13:35 SQL> 
03:13:35 SQL> --
03:13:35 SQL> -- cad610.sql
03:13:35 SQL> --
03:13:35 SQL> 
03:13:35 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:13:35 SQL> 
03:13:35 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
03:13:35 SQL> 
03:13:35 SQL> -- I created di5min here:
03:13:35 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:13:35 SQL> 
03:13:35 SQL> CREATE OR REPLACE VIEW svm6102 AS
03:13:35   2  SELECT
03:13:35   3  pair
03:13:35   4  ,ydate
03:13:35   5  ,prdate
03:13:35   6  ,rownum rnum -- acts as t in my time-series
03:13:35   7  ,clse
03:13:35   8  -- Derive a bunch of attributes from clse, the latest price:
03:13:35   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
03:13:35  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
03:13:35  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
03:13:35  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
03:13:35  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
03:13:35  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
03:13:35  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
03:13:35  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
03:13:35  17  --
03:13:35  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
03:13:35  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
03:13:35  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
03:13:35  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
03:13:35  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
03:13:35  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
03:13:35  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
03:13:35  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
03:13:35  26  --
03:13:35  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
03:13:35  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
03:13:35  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
03:13:35  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
03:13:35  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
03:13:35  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
03:13:35  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
03:13:35  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
03:13:35  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
03:13:35  36  FROM di5min WHERE pair LIKE'%cad%'
03:13:35  37  AND ydate > sysdate - 95
03:13:35  38  ORDER BY ydate
03:13:35  39  /

View created.

Elapsed: 00:00:00.04
03:13:35 SQL> 
03:13:35 SQL> -- rpt
03:13:35 SQL> 
03:13:35 SQL> SELECT
03:13:35   2  pair
03:13:35   3  ,COUNT(pair)
03:13:35   4  ,MIN(clse),MAX(clse)
03:13:35   5  ,MIN(avg6),MAX(avg6)
03:13:35   6  ,MIN(ydate),MAX(ydate)
03:13:35   7  FROM svm6102
03:13:35   8  GROUP BY pair
03:13:35   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19315    .988925	   1.0355 .990603938 1.03282877 2010-10-03 20:55:01 2011-01-05 03:10:00

Elapsed: 00:00:00.85
03:13:36 SQL> 
03:13:36 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:13:36 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.20
03:13:36 SQL> CREATE TABLE svm6122 COMPRESS AS
03:13:36   2  SELECT
03:13:36   3  pair
03:13:36   4  ,ydate
03:13:36   5  ,prdate
03:13:36   6  ,clse
03:13:36   7  -- g6 is important. I want to predict g6:
03:13:36   8  ,ld6 - clse g6
03:13:36   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
03:13:36  10  -- I want more attributes from the ones I derived above:
03:13:36  11  -- clse relation to moving-min
03:13:36  12  ,clse-min4  cm4
03:13:36  13  ,clse-min6  cm6
03:13:36  14  ,clse-min8  cm8
03:13:36  15  ,clse-min10 cm10
03:13:36  16  ,clse-min12 cm12
03:13:36  17  ,clse-min14 cm14
03:13:36  18  ,clse-min16 cm16
03:13:36  19  ,clse-min18 cm18
03:13:36  20  -- clse relation to moving-avg
03:13:36  21  ,clse-avg4  ca4
03:13:36  22  ,clse-avg6  ca6
03:13:36  23  ,clse-avg8  ca8
03:13:36  24  ,clse-avg10 ca10
03:13:36  25  ,clse-avg12 ca12
03:13:36  26  ,clse-avg14 ca14
03:13:36  27  ,clse-avg16 ca16
03:13:36  28  ,clse-avg18 ca18
03:13:36  29  -- clse relation to moving-max
03:13:36  30  ,clse-max4  cx4
03:13:36  31  ,clse-max6  cx6
03:13:36  32  ,clse-max8  cx8
03:13:36  33  ,clse-max10 cx10
03:13:36  34  ,clse-max12 cx12
03:13:36  35  ,clse-max14 cx14
03:13:36  36  ,clse-max16 cx16
03:13:36  37  ,clse-max18 cx18
03:13:36  38  -- Derive more attributes.
03:13:36  39  -- I want to use CORR() here to help SVM see the shape of the series.
03:13:36  40  -- But COVAR_POP is more stable:
03:13:36  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
03:13:36  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:13:36  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:13:36  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:13:36  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:13:36  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:13:36  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:13:36  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:13:36  49  -- Derive date related attributes:
03:13:36  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:13:36  51  ,0+TO_CHAR(ydate,'D')d
03:13:36  52  ,0+TO_CHAR(ydate,'W')w
03:13:36  53  -- mpm stands for minutes-past-midnight:
03:13:36  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:13:36  55  -- mph stands for minutes-past-hour:
03:13:36  56  ,0+TO_CHAR(ydate,'MI')mph
03:13:36  57  FROM svm6102
03:13:36  58  ORDER BY ydate
03:13:36  59  /

Table created.

Elapsed: 00:00:02.09
03:13:38 SQL> 
03:13:38 SQL> -- rpt
03:13:38 SQL> 
03:13:38 SQL> SELECT
03:13:38   2  pair
03:13:38   3  ,COUNT(pair)
03:13:38   4  ,MIN(clse),MAX(clse)
03:13:38   5  ,MIN(ydate),MAX(ydate)
03:13:38   6  FROM svm6122
03:13:38   7  GROUP BY pair
03:13:38   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19315    .988925	   1.0355 2010-10-03 20:55:01 2011-01-05 03:10:00

Elapsed: 00:00:00.04
03:13:38 SQL> 
03:13:38 SQL> -- Prepare for derivation of NTILE based params:
03:13:38 SQL> 
03:13:38 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.28
03:13:39 SQL> CREATE TABLE svm6142 COMPRESS AS
03:13:39   2  SELECT
03:13:39   3  pair
03:13:39   4  ,ydate
03:13:39   5  ,prdate
03:13:39   6  ,clse
03:13:39   7  ,g6
03:13:39   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
03:13:39   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
03:13:39  10  ,CASE WHEN trend IS NULL THEN 1
03:13:39  11  	    WHEN trend =0      THEN 1
03:13:39  12  	    ELSE trend END trend
03:13:39  13  ,cm4
03:13:39  14  ,cm6
03:13:39  15  ,cm8
03:13:39  16  ,cm10
03:13:39  17  ,cm12
03:13:39  18  ,cm14
03:13:39  19  ,cm16
03:13:39  20  ,cm18
03:13:39  21  --
03:13:39  22  ,ca4
03:13:39  23  ,ca6
03:13:39  24  ,ca8
03:13:39  25  ,ca10
03:13:39  26  ,ca12
03:13:39  27  ,ca14
03:13:39  28  ,ca16
03:13:39  29  ,ca18
03:13:39  30  --
03:13:39  31  ,cx4
03:13:39  32  ,cx6
03:13:39  33  ,cx8
03:13:39  34  ,cx10
03:13:39  35  ,cx12
03:13:39  36  ,cx14
03:13:39  37  ,cx16
03:13:39  38  ,cx18
03:13:39  39  --
03:13:39  40  ,crr4
03:13:39  41  ,crr6
03:13:39  42  ,crr8
03:13:39  43  ,crr10
03:13:39  44  ,crr12
03:13:39  45  ,crr14
03:13:39  46  ,crr16
03:13:39  47  ,crr18
03:13:39  48  --
03:13:39  49  ,hh
03:13:39  50  ,d
03:13:39  51  ,w
03:13:39  52  ,mpm
03:13:39  53  ,mph
03:13:39  54  FROM svm6122
03:13:39  55  ORDER BY ydate
03:13:39  56  /

Table created.

Elapsed: 00:00:00.34
03:13:39 SQL> 
03:13:39 SQL> -- rpt
03:13:39 SQL> 
03:13:39 SQL> SELECT
03:13:39   2  pair
03:13:39   3  ,trend
03:13:39   4  ,gatt
03:13:39   5  ,COUNT(pair)
03:13:39   6  ,AVG(g6)
03:13:39   7  FROM svm6142
03:13:39   8  GROUP BY pair,trend,gatt
03:13:39   9  ORDER BY pair,trend,gatt
03:13:39  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7142 -.00124456
usd_cad 	-1 up	      3061 .003077006
usd_cad 	-1		42
usd_cad 	 1 nup	      6663 -.00160916
usd_cad 	 1 up	      2377  .00365938
usd_cad 	 1		30

6 rows selected.

Elapsed: 00:00:00.04
03:13:39 SQL> 
03:13:39 SQL> 
03:13:39 SQL> -- Derive NTILE based params:
03:13:39 SQL> 
03:13:39 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
03:13:39 SQL> CREATE TABLE svm6162 COMPRESS AS
03:13:39   2  SELECT
03:13:39   3  pair
03:13:39   4  ,ydate
03:13:39   5  ,prdate
03:13:39   6  ,clse
03:13:39   7  ,g6
03:13:39   8  ,gatt
03:13:39   9  ,gattn
03:13:39  10  ,trend
03:13:39  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
03:13:39  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
03:13:39  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
03:13:39  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
03:13:39  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
03:13:39  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
03:13:39  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
03:13:39  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
03:13:39  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
03:13:39  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
03:13:39  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
03:13:39  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
03:13:39  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
03:13:39  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
03:13:39  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
03:13:39  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
03:13:39  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
03:13:39  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
03:13:39  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
03:13:39  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
03:13:39  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
03:13:39  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
03:13:39  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
03:13:39  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
03:13:39  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
03:13:39  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
03:13:39  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
03:13:39  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
03:13:39  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
03:13:39  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
03:13:39  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
03:13:39  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
03:13:39  43  ,hh  att32
03:13:39  44  ,d   att33
03:13:39  45  ,w   att34
03:13:39  46  ,mpm att35
03:13:39  47  ,mph att36
03:13:39  48  ,trend att37
03:13:39  49  FROM svm6142
03:13:39  50  ORDER BY ydate
03:13:39  51  /

Table created.

Elapsed: 00:00:04.76
03:13:44 SQL> 
03:13:44 SQL> -- rpt
03:13:44 SQL> 
03:13:44 SQL> SELECT
03:13:44   2  pair
03:13:44   3  ,trend
03:13:44   4  ,gatt
03:13:44   5  ,COUNT(pair)
03:13:44   6  ,AVG(g6)
03:13:44   7  FROM svm6162
03:13:44   8  GROUP BY pair,trend,gatt
03:13:44   9  ORDER BY pair,trend,gatt
03:13:44  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7142 -.00124456
usd_cad 	-1 up	      3061 .003077006
usd_cad 	-1		42
usd_cad 	 1 nup	      6663 -.00160916
usd_cad 	 1 up	      2377  .00365938
usd_cad 	 1		30

6 rows selected.

Elapsed: 00:00:00.03
03:13:44 SQL> 
03:13:44 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
03:13:44 SQL> CREATE TABLE modsrc COMPRESS AS
03:13:44   2  SELECT
03:13:44   3  pair
03:13:44   4  ,ydate
03:13:44   5  ,prdate
03:13:44   6  ,trend
03:13:44   7  ,g6
03:13:44   8  ,gatt
03:13:44   9  ,gattn
03:13:44  10  FROM svm6162
03:13:44  11  /

Table created.

Elapsed: 00:00:00.12
03:13:44 SQL> 
03:13:44 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
03:13:44 SQL> 
03:13:44 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
03:13:44 SQL> CREATE TABLE cad_ms610 COMPRESS AS
03:13:44   2  SELECT
03:13:44   3  ydate
03:13:44   4  ,trend cad_trend
03:13:44   5  ,g6    cad_g6
03:13:44   6  ,gatt  cad_gatt
03:13:44   7  ,gattn cad_gattn
03:13:44   8  FROM modsrc
03:13:44   9  /

Table created.

Elapsed: 00:00:00.07
03:13:45 SQL> 
03:13:45 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
03:13:45 SQL> 
03:13:45 SQL> -- I need a copy of the attributes:
03:13:45 SQL> 
03:13:45 SQL> 
03:13:45 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.05
03:13:45 SQL> CREATE TABLE cad_att COMPRESS AS
03:13:45   2  SELECT
03:13:45   3  ydate
03:13:45   4  ,att00 cad_att00
03:13:45   5  ,att01 cad_att01
03:13:45   6  ,att02 cad_att02
03:13:45   7  ,att03 cad_att03
03:13:45   8  ,att04 cad_att04
03:13:45   9  ,att05 cad_att05
03:13:45  10  ,att06 cad_att06
03:13:45  11  ,att07 cad_att07
03:13:45  12  ,att08 cad_att08
03:13:45  13  ,att09 cad_att09
03:13:45  14  ,att10 cad_att10
03:13:45  15  ,att11 cad_att11
03:13:45  16  ,att12 cad_att12
03:13:45  17  ,att13 cad_att13
03:13:45  18  ,att14 cad_att14
03:13:45  19  ,att15 cad_att15
03:13:45  20  ,att16 cad_att16
03:13:45  21  ,att17 cad_att17
03:13:45  22  ,att18 cad_att18
03:13:45  23  ,att19 cad_att19
03:13:45  24  ,att20 cad_att20
03:13:45  25  ,att21 cad_att21
03:13:45  26  ,att22 cad_att22
03:13:45  27  ,att23 cad_att23
03:13:45  28  ,att24 cad_att24
03:13:45  29  ,att25 cad_att25
03:13:45  30  ,att26 cad_att26
03:13:45  31  ,att27 cad_att27
03:13:45  32  ,att28 cad_att28
03:13:45  33  ,att29 cad_att29
03:13:45  34  ,att30 cad_att30
03:13:45  35  ,att31 cad_att31
03:13:45  36  ,att32 cad_att32
03:13:45  37  ,att33 cad_att33
03:13:45  38  ,att34 cad_att34
03:13:45  39  ,att35 cad_att35
03:13:45  40  ,att36 cad_att36
03:13:45  41  ,att37 cad_att37
03:13:45  42  FROM svm6162
03:13:45  43  /

Table created.

Elapsed: 00:00:00.18
03:13:45 SQL> 
03:13:45 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
03:13:45 SQL> 
03:13:45 SQL> -- rpt
03:13:45 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19315

Elapsed: 00:00:00.82
03:13:46 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19315

Elapsed: 00:00:00.01
03:13:46 SQL> 
03:13:46 SQL> --
03:13:46 SQL> -- chf610.sql
03:13:46 SQL> --
03:13:46 SQL> 
03:13:46 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:13:46 SQL> 
03:13:46 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.72
03:13:47 SQL> 
03:13:47 SQL> -- I created di5min here:
03:13:47 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:13:47 SQL> 
03:13:47 SQL> CREATE OR REPLACE VIEW svm6102 AS
03:13:47   2  SELECT
03:13:47   3  pair
03:13:47   4  ,ydate
03:13:47   5  ,prdate
03:13:47   6  ,rownum rnum -- acts as t in my time-series
03:13:47   7  ,clse
03:13:47   8  -- Derive a bunch of attributes from clse, the latest price:
03:13:47   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
03:13:47  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
03:13:47  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
03:13:47  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
03:13:47  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
03:13:47  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
03:13:47  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
03:13:47  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
03:13:47  17  --
03:13:47  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
03:13:47  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
03:13:47  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
03:13:47  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
03:13:47  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
03:13:47  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
03:13:47  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
03:13:47  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
03:13:47  26  --
03:13:47  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
03:13:47  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
03:13:47  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
03:13:47  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
03:13:47  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
03:13:47  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
03:13:47  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
03:13:47  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
03:13:47  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
03:13:47  36  FROM di5min WHERE pair LIKE'%chf%'
03:13:47  37  AND ydate > sysdate - 95
03:13:47  38  ORDER BY ydate
03:13:47  39  /

View created.

Elapsed: 00:00:00.04
03:13:47 SQL> 
03:13:47 SQL> -- rpt
03:13:47 SQL> 
03:13:47 SQL> SELECT
03:13:47   2  pair
03:13:47   3  ,COUNT(pair)
03:13:47   4  ,MIN(clse),MAX(clse)
03:13:47   5  ,MIN(avg6),MAX(avg6)
03:13:47   6  ,MIN(ydate),MAX(ydate)
03:13:47   7  FROM svm6102
03:13:47   8  GROUP BY pair
03:13:47   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19318    .931675	  1.00635  .93325411 1.00498151 2010-10-03 20:55:01 2011-01-05 03:10:00

Elapsed: 00:00:00.85
03:13:48 SQL> 
03:13:48 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:13:48 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
03:13:48 SQL> CREATE TABLE svm6122 COMPRESS AS
03:13:48   2  SELECT
03:13:48   3  pair
03:13:48   4  ,ydate
03:13:48   5  ,prdate
03:13:48   6  ,clse
03:13:48   7  -- g6 is important. I want to predict g6:
03:13:48   8  ,ld6 - clse g6
03:13:48   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
03:13:48  10  -- I want more attributes from the ones I derived above:
03:13:48  11  -- clse relation to moving-min
03:13:48  12  ,clse-min4  cm4
03:13:48  13  ,clse-min6  cm6
03:13:48  14  ,clse-min8  cm8
03:13:48  15  ,clse-min10 cm10
03:13:48  16  ,clse-min12 cm12
03:13:48  17  ,clse-min14 cm14
03:13:48  18  ,clse-min16 cm16
03:13:48  19  ,clse-min18 cm18
03:13:48  20  -- clse relation to moving-avg
03:13:48  21  ,clse-avg4  ca4
03:13:48  22  ,clse-avg6  ca6
03:13:48  23  ,clse-avg8  ca8
03:13:48  24  ,clse-avg10 ca10
03:13:48  25  ,clse-avg12 ca12
03:13:48  26  ,clse-avg14 ca14
03:13:48  27  ,clse-avg16 ca16
03:13:48  28  ,clse-avg18 ca18
03:13:48  29  -- clse relation to moving-max
03:13:48  30  ,clse-max4  cx4
03:13:48  31  ,clse-max6  cx6
03:13:48  32  ,clse-max8  cx8
03:13:48  33  ,clse-max10 cx10
03:13:48  34  ,clse-max12 cx12
03:13:48  35  ,clse-max14 cx14
03:13:48  36  ,clse-max16 cx16
03:13:48  37  ,clse-max18 cx18
03:13:48  38  -- Derive more attributes.
03:13:48  39  -- I want to use CORR() here to help SVM see the shape of the series.
03:13:48  40  -- But COVAR_POP is more stable:
03:13:48  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
03:13:48  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:13:48  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:13:48  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:13:48  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:13:48  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:13:48  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:13:48  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:13:48  49  -- Derive date related attributes:
03:13:48  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:13:48  51  ,0+TO_CHAR(ydate,'D')d
03:13:48  52  ,0+TO_CHAR(ydate,'W')w
03:13:48  53  -- mpm stands for minutes-past-midnight:
03:13:48  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:13:48  55  -- mph stands for minutes-past-hour:
03:13:48  56  ,0+TO_CHAR(ydate,'MI')mph
03:13:48  57  FROM svm6102
03:13:48  58  ORDER BY ydate
03:13:48  59  /

Table created.

Elapsed: 00:00:02.02
03:13:50 SQL> 
03:13:50 SQL> -- rpt
03:13:50 SQL> 
03:13:50 SQL> SELECT
03:13:50   2  pair
03:13:50   3  ,COUNT(pair)
03:13:50   4  ,MIN(clse),MAX(clse)
03:13:50   5  ,MIN(ydate),MAX(ydate)
03:13:50   6  FROM svm6122
03:13:50   7  GROUP BY pair
03:13:50   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19318    .931675	  1.00635 2010-10-03 20:55:01 2011-01-05 03:10:00

Elapsed: 00:00:00.03
03:13:50 SQL> 
03:13:50 SQL> -- Prepare for derivation of NTILE based params:
03:13:50 SQL> 
03:13:50 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
03:13:50 SQL> CREATE TABLE svm6142 COMPRESS AS
03:13:50   2  SELECT
03:13:50   3  pair
03:13:50   4  ,ydate
03:13:50   5  ,prdate
03:13:50   6  ,clse
03:13:50   7  ,g6
03:13:50   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
03:13:50   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
03:13:50  10  ,CASE WHEN trend IS NULL THEN 1
03:13:50  11  	    WHEN trend =0      THEN 1
03:13:50  12  	    ELSE trend END trend
03:13:50  13  ,cm4
03:13:50  14  ,cm6
03:13:50  15  ,cm8
03:13:50  16  ,cm10
03:13:50  17  ,cm12
03:13:50  18  ,cm14
03:13:50  19  ,cm16
03:13:50  20  ,cm18
03:13:50  21  --
03:13:50  22  ,ca4
03:13:50  23  ,ca6
03:13:50  24  ,ca8
03:13:50  25  ,ca10
03:13:50  26  ,ca12
03:13:50  27  ,ca14
03:13:50  28  ,ca16
03:13:50  29  ,ca18
03:13:50  30  --
03:13:50  31  ,cx4
03:13:50  32  ,cx6
03:13:50  33  ,cx8
03:13:50  34  ,cx10
03:13:50  35  ,cx12
03:13:50  36  ,cx14
03:13:50  37  ,cx16
03:13:50  38  ,cx18
03:13:50  39  --
03:13:50  40  ,crr4
03:13:50  41  ,crr6
03:13:50  42  ,crr8
03:13:50  43  ,crr10
03:13:50  44  ,crr12
03:13:50  45  ,crr14
03:13:50  46  ,crr16
03:13:50  47  ,crr18
03:13:50  48  --
03:13:50  49  ,hh
03:13:50  50  ,d
03:13:50  51  ,w
03:13:50  52  ,mpm
03:13:50  53  ,mph
03:13:50  54  FROM svm6122
03:13:50  55  ORDER BY ydate
03:13:50  56  /

Table created.

Elapsed: 00:00:00.38
03:13:51 SQL> 
03:13:51 SQL> -- rpt
03:13:51 SQL> 
03:13:51 SQL> SELECT
03:13:51   2  pair
03:13:51   3  ,trend
03:13:51   4  ,gatt
03:13:51   5  ,COUNT(pair)
03:13:51   6  ,AVG(g6)
03:13:51   7  FROM svm6142
03:13:51   8  GROUP BY pair,trend,gatt
03:13:51   9  ORDER BY pair,trend,gatt
03:13:51  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7061 -.00199809
usd_chf 	-1 up	      3021 .003850689
usd_chf 	-1		35
usd_chf 	 1 nup	      6384 -.00156217
usd_chf 	 1 up	      2780 .003758424
usd_chf 	 1		37

6 rows selected.

Elapsed: 00:00:00.05
03:13:51 SQL> 
03:13:51 SQL> 
03:13:51 SQL> -- Derive NTILE based params:
03:13:51 SQL> 
03:13:51 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.14
03:13:51 SQL> CREATE TABLE svm6162 COMPRESS AS
03:13:51   2  SELECT
03:13:51   3  pair
03:13:51   4  ,ydate
03:13:51   5  ,prdate
03:13:51   6  ,clse
03:13:51   7  ,g6
03:13:51   8  ,gatt
03:13:51   9  ,gattn
03:13:51  10  ,trend
03:13:51  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
03:13:51  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
03:13:51  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
03:13:51  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
03:13:51  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
03:13:51  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
03:13:51  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
03:13:51  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
03:13:51  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
03:13:51  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
03:13:51  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
03:13:51  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
03:13:51  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
03:13:51  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
03:13:51  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
03:13:51  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
03:13:51  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
03:13:51  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
03:13:51  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
03:13:51  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
03:13:51  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
03:13:51  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
03:13:51  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
03:13:51  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
03:13:51  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
03:13:51  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
03:13:51  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
03:13:51  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
03:13:51  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
03:13:51  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
03:13:51  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
03:13:51  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
03:13:51  43  ,hh  att32
03:13:51  44  ,d   att33
03:13:51  45  ,w   att34
03:13:51  46  ,mpm att35
03:13:51  47  ,mph att36
03:13:51  48  ,trend att37
03:13:51  49  FROM svm6142
03:13:51  50  ORDER BY ydate
03:13:51  51  /

Table created.

Elapsed: 00:00:04.71
03:13:56 SQL> 
03:13:56 SQL> -- rpt
03:13:56 SQL> 
03:13:56 SQL> SELECT
03:13:56   2  pair
03:13:56   3  ,trend
03:13:56   4  ,gatt
03:13:56   5  ,COUNT(pair)
03:13:56   6  ,AVG(g6)
03:13:56   7  FROM svm6162
03:13:56   8  GROUP BY pair,trend,gatt
03:13:56   9  ORDER BY pair,trend,gatt
03:13:56  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7061 -.00199809
usd_chf 	-1 up	      3021 .003850689
usd_chf 	-1		35
usd_chf 	 1 nup	      6384 -.00156217
usd_chf 	 1 up	      2780 .003758424
usd_chf 	 1		37

6 rows selected.

Elapsed: 00:00:00.03
03:13:56 SQL> 
03:13:56 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.19
03:13:56 SQL> CREATE TABLE modsrc COMPRESS AS
03:13:56   2  SELECT
03:13:56   3  pair
03:13:56   4  ,ydate
03:13:56   5  ,prdate
03:13:56   6  ,trend
03:13:56   7  ,g6
03:13:56   8  ,gatt
03:13:56   9  ,gattn
03:13:56  10  FROM svm6162
03:13:56  11  /

Table created.

Elapsed: 00:00:00.08
03:13:56 SQL> 
03:13:56 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
03:13:56 SQL> 
03:13:56 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.07
03:13:56 SQL> CREATE TABLE chf_ms610 COMPRESS AS
03:13:56   2  SELECT
03:13:56   3  ydate
03:13:56   4  ,trend chf_trend
03:13:56   5  ,g6    chf_g6
03:13:56   6  ,gatt  chf_gatt
03:13:56   7  ,gattn chf_gattn
03:13:56   8  FROM modsrc
03:13:56   9  /

Table created.

Elapsed: 00:00:00.07
03:13:56 SQL> 
03:13:56 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
03:13:56 SQL> 
03:13:56 SQL> -- I need a copy of the attributes:
03:13:56 SQL> 
03:13:56 SQL> 
03:13:56 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.04
03:13:57 SQL> CREATE TABLE chf_att COMPRESS AS
03:13:57   2  SELECT
03:13:57   3  ydate
03:13:57   4  ,att00 chf_att00
03:13:57   5  ,att01 chf_att01
03:13:57   6  ,att02 chf_att02
03:13:57   7  ,att03 chf_att03
03:13:57   8  ,att04 chf_att04
03:13:57   9  ,att05 chf_att05
03:13:57  10  ,att06 chf_att06
03:13:57  11  ,att07 chf_att07
03:13:57  12  ,att08 chf_att08
03:13:57  13  ,att09 chf_att09
03:13:57  14  ,att10 chf_att10
03:13:57  15  ,att11 chf_att11
03:13:57  16  ,att12 chf_att12
03:13:57  17  ,att13 chf_att13
03:13:57  18  ,att14 chf_att14
03:13:57  19  ,att15 chf_att15
03:13:57  20  ,att16 chf_att16
03:13:57  21  ,att17 chf_att17
03:13:57  22  ,att18 chf_att18
03:13:57  23  ,att19 chf_att19
03:13:57  24  ,att20 chf_att20
03:13:57  25  ,att21 chf_att21
03:13:57  26  ,att22 chf_att22
03:13:57  27  ,att23 chf_att23
03:13:57  28  ,att24 chf_att24
03:13:57  29  ,att25 chf_att25
03:13:57  30  ,att26 chf_att26
03:13:57  31  ,att27 chf_att27
03:13:57  32  ,att28 chf_att28
03:13:57  33  ,att29 chf_att29
03:13:57  34  ,att30 chf_att30
03:13:57  35  ,att31 chf_att31
03:13:57  36  ,att32 chf_att32
03:13:57  37  ,att33 chf_att33
03:13:57  38  ,att34 chf_att34
03:13:57  39  ,att35 chf_att35
03:13:57  40  ,att36 chf_att36
03:13:57  41  ,att37 chf_att37
03:13:57  42  FROM svm6162
03:13:57  43  /

Table created.

Elapsed: 00:00:00.18
03:13:57 SQL> 
03:13:57 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
03:13:57 SQL> 
03:13:57 SQL> -- rpt
03:13:57 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19318

Elapsed: 00:00:00.82
03:13:58 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19318

Elapsed: 00:00:00.00
03:13:58 SQL> 
03:13:58 SQL> --
03:13:58 SQL> -- ech610.sql
03:13:58 SQL> --
03:13:58 SQL> 
03:13:58 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:13:58 SQL> 
03:13:58 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
03:13:58 SQL> 
03:13:58 SQL> -- I created di5min here:
03:13:58 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:13:58 SQL> 
03:13:58 SQL> CREATE OR REPLACE VIEW svm6102 AS
03:13:58   2  SELECT
03:13:58   3  pair
03:13:58   4  ,ydate
03:13:58   5  ,prdate
03:13:58   6  ,rownum rnum -- acts as t in my time-series
03:13:58   7  ,clse
03:13:58   8  -- Derive a bunch of attributes from clse, the latest price:
03:13:58   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
03:13:58  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
03:13:58  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
03:13:58  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
03:13:58  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
03:13:58  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
03:13:58  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
03:13:58  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
03:13:58  17  --
03:13:58  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
03:13:58  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
03:13:58  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
03:13:58  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
03:13:58  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
03:13:58  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
03:13:58  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
03:13:58  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
03:13:58  26  --
03:13:58  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
03:13:58  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
03:13:58  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
03:13:58  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
03:13:58  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
03:13:58  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
03:13:58  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
03:13:58  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
03:13:58  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
03:13:58  36  FROM di5min WHERE pair LIKE'%ech%'
03:13:58  37  AND ydate > sysdate - 95
03:13:58  38  ORDER BY ydate
03:13:58  39  /

View created.

Elapsed: 00:00:00.05
03:13:58 SQL> 
03:13:58 SQL> -- rpt
03:13:58 SQL> 
03:13:58 SQL> SELECT
03:13:58   2  pair
03:13:58   3  ,COUNT(pair)
03:13:58   4  ,MIN(clse),MAX(clse)
03:13:58   5  ,MIN(avg6),MAX(avg6)
03:13:58   6  ,MIN(ydate),MAX(ydate)
03:13:58   7  FROM svm6102
03:13:58   8  GROUP BY pair
03:13:58   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19317 1.24192946 1.38284305 1.24320711 1.37986485 2010-10-03 20:55:01 2011-01-05 03:10:00

Elapsed: 00:00:00.80
03:13:59 SQL> 
03:13:59 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:13:59 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.18
03:13:59 SQL> CREATE TABLE svm6122 COMPRESS AS
03:13:59   2  SELECT
03:13:59   3  pair
03:13:59   4  ,ydate
03:13:59   5  ,prdate
03:13:59   6  ,clse
03:13:59   7  -- g6 is important. I want to predict g6:
03:13:59   8  ,ld6 - clse g6
03:13:59   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
03:13:59  10  -- I want more attributes from the ones I derived above:
03:13:59  11  -- clse relation to moving-min
03:13:59  12  ,clse-min4  cm4
03:13:59  13  ,clse-min6  cm6
03:13:59  14  ,clse-min8  cm8
03:13:59  15  ,clse-min10 cm10
03:13:59  16  ,clse-min12 cm12
03:13:59  17  ,clse-min14 cm14
03:13:59  18  ,clse-min16 cm16
03:13:59  19  ,clse-min18 cm18
03:13:59  20  -- clse relation to moving-avg
03:13:59  21  ,clse-avg4  ca4
03:13:59  22  ,clse-avg6  ca6
03:13:59  23  ,clse-avg8  ca8
03:13:59  24  ,clse-avg10 ca10
03:13:59  25  ,clse-avg12 ca12
03:13:59  26  ,clse-avg14 ca14
03:13:59  27  ,clse-avg16 ca16
03:13:59  28  ,clse-avg18 ca18
03:13:59  29  -- clse relation to moving-max
03:13:59  30  ,clse-max4  cx4
03:13:59  31  ,clse-max6  cx6
03:13:59  32  ,clse-max8  cx8
03:13:59  33  ,clse-max10 cx10
03:13:59  34  ,clse-max12 cx12
03:13:59  35  ,clse-max14 cx14
03:13:59  36  ,clse-max16 cx16
03:13:59  37  ,clse-max18 cx18
03:13:59  38  -- Derive more attributes.
03:13:59  39  -- I want to use CORR() here to help SVM see the shape of the series.
03:13:59  40  -- But COVAR_POP is more stable:
03:13:59  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
03:13:59  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:13:59  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:13:59  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:13:59  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:13:59  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:13:59  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:13:59  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:13:59  49  -- Derive date related attributes:
03:13:59  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:13:59  51  ,0+TO_CHAR(ydate,'D')d
03:13:59  52  ,0+TO_CHAR(ydate,'W')w
03:13:59  53  -- mpm stands for minutes-past-midnight:
03:13:59  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:13:59  55  -- mph stands for minutes-past-hour:
03:13:59  56  ,0+TO_CHAR(ydate,'MI')mph
03:13:59  57  FROM svm6102
03:13:59  58  ORDER BY ydate
03:13:59  59  /

Table created.

Elapsed: 00:00:02.07
03:14:01 SQL> 
03:14:01 SQL> -- rpt
03:14:01 SQL> 
03:14:01 SQL> SELECT
03:14:01   2  pair
03:14:01   3  ,COUNT(pair)
03:14:01   4  ,MIN(clse),MAX(clse)
03:14:01   5  ,MIN(ydate),MAX(ydate)
03:14:01   6  FROM svm6122
03:14:01   7  GROUP BY pair
03:14:01   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19317 1.24192946 1.38284305 2010-10-03 20:55:01 2011-01-05 03:10:00

Elapsed: 00:00:00.04
03:14:02 SQL> 
03:14:02 SQL> -- Prepare for derivation of NTILE based params:
03:14:02 SQL> 
03:14:02 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:01.12
03:14:03 SQL> CREATE TABLE svm6142 COMPRESS AS
03:14:03   2  SELECT
03:14:03   3  pair
03:14:03   4  ,ydate
03:14:03   5  ,prdate
03:14:03   6  ,clse
03:14:03   7  ,g6
03:14:03   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
03:14:03   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
03:14:03  10  ,CASE WHEN trend IS NULL THEN 1
03:14:03  11  	    WHEN trend =0      THEN 1
03:14:03  12  	    ELSE trend END trend
03:14:03  13  ,cm4
03:14:03  14  ,cm6
03:14:03  15  ,cm8
03:14:03  16  ,cm10
03:14:03  17  ,cm12
03:14:03  18  ,cm14
03:14:03  19  ,cm16
03:14:03  20  ,cm18
03:14:03  21  --
03:14:03  22  ,ca4
03:14:03  23  ,ca6
03:14:03  24  ,ca8
03:14:03  25  ,ca10
03:14:03  26  ,ca12
03:14:03  27  ,ca14
03:14:03  28  ,ca16
03:14:03  29  ,ca18
03:14:03  30  --
03:14:03  31  ,cx4
03:14:03  32  ,cx6
03:14:03  33  ,cx8
03:14:03  34  ,cx10
03:14:03  35  ,cx12
03:14:03  36  ,cx14
03:14:03  37  ,cx16
03:14:03  38  ,cx18
03:14:03  39  --
03:14:03  40  ,crr4
03:14:03  41  ,crr6
03:14:03  42  ,crr8
03:14:03  43  ,crr10
03:14:03  44  ,crr12
03:14:03  45  ,crr14
03:14:03  46  ,crr16
03:14:03  47  ,crr18
03:14:03  48  --
03:14:03  49  ,hh
03:14:03  50  ,d
03:14:03  51  ,w
03:14:03  52  ,mpm
03:14:03  53  ,mph
03:14:03  54  FROM svm6122
03:14:03  55  ORDER BY ydate
03:14:03  56  /

Table created.

Elapsed: 00:00:00.47
03:14:03 SQL> 
03:14:03 SQL> -- rpt
03:14:03 SQL> 
03:14:03 SQL> SELECT
03:14:03   2  pair
03:14:03   3  ,trend
03:14:03   4  ,gatt
03:14:03   5  ,COUNT(pair)
03:14:03   6  ,AVG(g6)
03:14:03   7  FROM svm6142
03:14:03   8  GROUP BY pair,trend,gatt
03:14:03   9  ORDER BY pair,trend,gatt
03:14:03  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6577 -.00224537
ech_usd 	-1 up	      3536 .003509265
ech_usd 	-1		54
ech_usd 	 1 nup	      6296 -.00241652
ech_usd 	 1 up	      2836 .004078871
ech_usd 	 1		18

6 rows selected.

Elapsed: 00:00:00.03
03:14:03 SQL> 
03:14:03 SQL> 
03:14:03 SQL> -- Derive NTILE based params:
03:14:03 SQL> 
03:14:03 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
03:14:03 SQL> CREATE TABLE svm6162 COMPRESS AS
03:14:03   2  SELECT
03:14:03   3  pair
03:14:03   4  ,ydate
03:14:03   5  ,prdate
03:14:03   6  ,clse
03:14:03   7  ,g6
03:14:03   8  ,gatt
03:14:03   9  ,gattn
03:14:03  10  ,trend
03:14:03  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
03:14:03  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
03:14:03  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
03:14:03  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
03:14:03  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
03:14:03  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
03:14:03  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
03:14:03  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
03:14:03  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
03:14:03  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
03:14:03  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
03:14:03  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
03:14:03  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
03:14:03  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
03:14:03  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
03:14:03  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
03:14:03  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
03:14:03  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
03:14:03  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
03:14:03  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
03:14:03  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
03:14:03  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
03:14:03  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
03:14:03  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
03:14:03  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
03:14:03  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
03:14:03  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
03:14:03  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
03:14:03  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
03:14:03  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
03:14:03  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
03:14:03  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
03:14:03  43  ,hh  att32
03:14:03  44  ,d   att33
03:14:03  45  ,w   att34
03:14:03  46  ,mpm att35
03:14:03  47  ,mph att36
03:14:03  48  ,trend att37
03:14:03  49  FROM svm6142
03:14:03  50  ORDER BY ydate
03:14:03  51  /

Table created.

Elapsed: 00:00:04.80
03:14:08 SQL> 
03:14:08 SQL> -- rpt
03:14:08 SQL> 
03:14:08 SQL> SELECT
03:14:08   2  pair
03:14:08   3  ,trend
03:14:08   4  ,gatt
03:14:08   5  ,COUNT(pair)
03:14:08   6  ,AVG(g6)
03:14:08   7  FROM svm6162
03:14:08   8  GROUP BY pair,trend,gatt
03:14:08   9  ORDER BY pair,trend,gatt
03:14:08  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6577 -.00224537
ech_usd 	-1 up	      3536 .003509265
ech_usd 	-1		54
ech_usd 	 1 nup	      6296 -.00241652
ech_usd 	 1 up	      2836 .004078871
ech_usd 	 1		18

6 rows selected.

Elapsed: 00:00:00.02
03:14:08 SQL> 
03:14:08 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.25
03:14:08 SQL> CREATE TABLE modsrc COMPRESS AS
03:14:08   2  SELECT
03:14:08   3  pair
03:14:08   4  ,ydate
03:14:08   5  ,prdate
03:14:08   6  ,trend
03:14:08   7  ,g6
03:14:08   8  ,gatt
03:14:08   9  ,gattn
03:14:08  10  FROM svm6162
03:14:08  11  /

Table created.

Elapsed: 00:00:00.07
03:14:08 SQL> 
03:14:08 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
03:14:09 SQL> 
03:14:09 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.09
03:14:09 SQL> CREATE TABLE ech_ms610 COMPRESS AS
03:14:09   2  SELECT
03:14:09   3  ydate
03:14:09   4  ,trend ech_trend
03:14:09   5  ,g6    ech_g6
03:14:09   6  ,gatt  ech_gatt
03:14:09   7  ,gattn ech_gattn
03:14:09   8  FROM modsrc
03:14:09   9  /

Table created.

Elapsed: 00:00:00.08
03:14:09 SQL> 
03:14:09 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
03:14:09 SQL> 
03:14:09 SQL> -- I need a copy of the attributes:
03:14:09 SQL> 
03:14:09 SQL> 
03:14:09 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.06
03:14:09 SQL> CREATE TABLE ech_att COMPRESS AS
03:14:09   2  SELECT
03:14:09   3  ydate
03:14:09   4  ,att00 ech_att00
03:14:09   5  ,att01 ech_att01
03:14:09   6  ,att02 ech_att02
03:14:09   7  ,att03 ech_att03
03:14:09   8  ,att04 ech_att04
03:14:09   9  ,att05 ech_att05
03:14:09  10  ,att06 ech_att06
03:14:09  11  ,att07 ech_att07
03:14:09  12  ,att08 ech_att08
03:14:09  13  ,att09 ech_att09
03:14:09  14  ,att10 ech_att10
03:14:09  15  ,att11 ech_att11
03:14:09  16  ,att12 ech_att12
03:14:09  17  ,att13 ech_att13
03:14:09  18  ,att14 ech_att14
03:14:09  19  ,att15 ech_att15
03:14:09  20  ,att16 ech_att16
03:14:09  21  ,att17 ech_att17
03:14:09  22  ,att18 ech_att18
03:14:09  23  ,att19 ech_att19
03:14:09  24  ,att20 ech_att20
03:14:09  25  ,att21 ech_att21
03:14:09  26  ,att22 ech_att22
03:14:09  27  ,att23 ech_att23
03:14:09  28  ,att24 ech_att24
03:14:09  29  ,att25 ech_att25
03:14:09  30  ,att26 ech_att26
03:14:09  31  ,att27 ech_att27
03:14:09  32  ,att28 ech_att28
03:14:09  33  ,att29 ech_att29
03:14:09  34  ,att30 ech_att30
03:14:09  35  ,att31 ech_att31
03:14:09  36  ,att32 ech_att32
03:14:09  37  ,att33 ech_att33
03:14:09  38  ,att34 ech_att34
03:14:09  39  ,att35 ech_att35
03:14:09  40  ,att36 ech_att36
03:14:09  41  ,att37 ech_att37
03:14:09  42  FROM svm6162
03:14:09  43  /

Table created.

Elapsed: 00:00:00.16
03:14:09 SQL> 
03:14:09 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
03:14:10 SQL> 
03:14:10 SQL> -- rpt
03:14:10 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19317

Elapsed: 00:00:00.78
03:14:11 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19317

Elapsed: 00:00:00.00
03:14:11 SQL> 
03:14:11 SQL> --
03:14:11 SQL> -- egb610.sql
03:14:11 SQL> --
03:14:11 SQL> 
03:14:11 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:14:11 SQL> 
03:14:11 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.72
03:14:11 SQL> 
03:14:11 SQL> -- I created di5min here:
03:14:11 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:14:11 SQL> 
03:14:11 SQL> CREATE OR REPLACE VIEW svm6102 AS
03:14:11   2  SELECT
03:14:11   3  pair
03:14:11   4  ,ydate
03:14:11   5  ,prdate
03:14:11   6  ,rownum rnum -- acts as t in my time-series
03:14:11   7  ,clse
03:14:11   8  -- Derive a bunch of attributes from clse, the latest price:
03:14:11   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
03:14:11  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
03:14:11  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
03:14:11  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
03:14:11  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
03:14:11  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
03:14:11  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
03:14:11  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
03:14:11  17  --
03:14:11  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
03:14:11  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
03:14:11  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
03:14:11  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
03:14:11  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
03:14:11  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
03:14:11  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
03:14:11  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
03:14:11  26  --
03:14:11  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
03:14:11  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
03:14:11  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
03:14:11  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
03:14:11  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
03:14:11  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
03:14:11  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
03:14:11  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
03:14:11  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
03:14:11  36  FROM di5min WHERE pair LIKE'%egb%'
03:14:11  37  AND ydate > sysdate - 95
03:14:11  38  ORDER BY ydate
03:14:11  39  /

View created.

Elapsed: 00:00:00.04
03:14:11 SQL> 
03:14:11 SQL> -- rpt
03:14:11 SQL> 
03:14:11 SQL> SELECT
03:14:11   2  pair
03:14:11   3  ,COUNT(pair)
03:14:11   4  ,MIN(clse),MAX(clse)
03:14:11   5  ,MIN(avg6),MAX(avg6)
03:14:11   6  ,MIN(ydate),MAX(ydate)
03:14:11   7  FROM svm6102
03:14:11   8  GROUP BY pair
03:14:11   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19316 .833520557 .893920122 .834199029 .892400287 2010-10-03 20:55:01 2011-01-05 03:10:00

Elapsed: 00:00:00.94
03:14:12 SQL> 
03:14:12 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:14:12 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
03:14:12 SQL> CREATE TABLE svm6122 COMPRESS AS
03:14:12   2  SELECT
03:14:12   3  pair
03:14:12   4  ,ydate
03:14:12   5  ,prdate
03:14:12   6  ,clse
03:14:12   7  -- g6 is important. I want to predict g6:
03:14:12   8  ,ld6 - clse g6
03:14:12   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
03:14:12  10  -- I want more attributes from the ones I derived above:
03:14:12  11  -- clse relation to moving-min
03:14:12  12  ,clse-min4  cm4
03:14:12  13  ,clse-min6  cm6
03:14:12  14  ,clse-min8  cm8
03:14:12  15  ,clse-min10 cm10
03:14:12  16  ,clse-min12 cm12
03:14:12  17  ,clse-min14 cm14
03:14:12  18  ,clse-min16 cm16
03:14:12  19  ,clse-min18 cm18
03:14:12  20  -- clse relation to moving-avg
03:14:12  21  ,clse-avg4  ca4
03:14:12  22  ,clse-avg6  ca6
03:14:12  23  ,clse-avg8  ca8
03:14:12  24  ,clse-avg10 ca10
03:14:12  25  ,clse-avg12 ca12
03:14:12  26  ,clse-avg14 ca14
03:14:12  27  ,clse-avg16 ca16
03:14:12  28  ,clse-avg18 ca18
03:14:12  29  -- clse relation to moving-max
03:14:12  30  ,clse-max4  cx4
03:14:12  31  ,clse-max6  cx6
03:14:12  32  ,clse-max8  cx8
03:14:12  33  ,clse-max10 cx10
03:14:12  34  ,clse-max12 cx12
03:14:12  35  ,clse-max14 cx14
03:14:12  36  ,clse-max16 cx16
03:14:12  37  ,clse-max18 cx18
03:14:12  38  -- Derive more attributes.
03:14:12  39  -- I want to use CORR() here to help SVM see the shape of the series.
03:14:12  40  -- But COVAR_POP is more stable:
03:14:12  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
03:14:12  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:14:12  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:14:12  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:14:12  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:14:12  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:14:12  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:14:12  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:14:12  49  -- Derive date related attributes:
03:14:12  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:14:12  51  ,0+TO_CHAR(ydate,'D')d
03:14:12  52  ,0+TO_CHAR(ydate,'W')w
03:14:12  53  -- mpm stands for minutes-past-midnight:
03:14:12  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:14:12  55  -- mph stands for minutes-past-hour:
03:14:12  56  ,0+TO_CHAR(ydate,'MI')mph
03:14:12  57  FROM svm6102
03:14:12  58  ORDER BY ydate
03:14:12  59  /

Table created.

Elapsed: 00:00:02.40
03:14:15 SQL> 
03:14:15 SQL> -- rpt
03:14:15 SQL> 
03:14:15 SQL> SELECT
03:14:15   2  pair
03:14:15   3  ,COUNT(pair)
03:14:15   4  ,MIN(clse),MAX(clse)
03:14:15   5  ,MIN(ydate),MAX(ydate)
03:14:15   6  FROM svm6122
03:14:15   7  GROUP BY pair
03:14:15   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19316 .833520557 .893920122 2010-10-03 20:55:01 2011-01-05 03:10:00

Elapsed: 00:00:00.04
03:14:15 SQL> 
03:14:15 SQL> -- Prepare for derivation of NTILE based params:
03:14:15 SQL> 
03:14:15 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.39
03:14:15 SQL> CREATE TABLE svm6142 COMPRESS AS
03:14:15   2  SELECT
03:14:15   3  pair
03:14:15   4  ,ydate
03:14:15   5  ,prdate
03:14:15   6  ,clse
03:14:15   7  ,g6
03:14:15   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
03:14:15   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
03:14:15  10  ,CASE WHEN trend IS NULL THEN 1
03:14:15  11  	    WHEN trend =0      THEN 1
03:14:15  12  	    ELSE trend END trend
03:14:15  13  ,cm4
03:14:15  14  ,cm6
03:14:15  15  ,cm8
03:14:15  16  ,cm10
03:14:15  17  ,cm12
03:14:15  18  ,cm14
03:14:15  19  ,cm16
03:14:15  20  ,cm18
03:14:15  21  --
03:14:15  22  ,ca4
03:14:15  23  ,ca6
03:14:15  24  ,ca8
03:14:15  25  ,ca10
03:14:15  26  ,ca12
03:14:15  27  ,ca14
03:14:15  28  ,ca16
03:14:15  29  ,ca18
03:14:15  30  --
03:14:15  31  ,cx4
03:14:15  32  ,cx6
03:14:15  33  ,cx8
03:14:15  34  ,cx10
03:14:15  35  ,cx12
03:14:15  36  ,cx14
03:14:15  37  ,cx16
03:14:15  38  ,cx18
03:14:15  39  --
03:14:15  40  ,crr4
03:14:15  41  ,crr6
03:14:15  42  ,crr8
03:14:15  43  ,crr10
03:14:15  44  ,crr12
03:14:15  45  ,crr14
03:14:15  46  ,crr16
03:14:15  47  ,crr18
03:14:15  48  --
03:14:15  49  ,hh
03:14:15  50  ,d
03:14:15  51  ,w
03:14:15  52  ,mpm
03:14:15  53  ,mph
03:14:15  54  FROM svm6122
03:14:15  55  ORDER BY ydate
03:14:15  56  /

Table created.

Elapsed: 00:00:00.42
03:14:16 SQL> 
03:14:16 SQL> -- rpt
03:14:16 SQL> 
03:14:16 SQL> SELECT
03:14:16   2  pair
03:14:16   3  ,trend
03:14:16   4  ,gatt
03:14:16   5  ,COUNT(pair)
03:14:16   6  ,AVG(g6)
03:14:16   7  FROM svm6142
03:14:16   8  GROUP BY pair,trend,gatt
03:14:16   9  ORDER BY pair,trend,gatt
03:14:16  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7573 -.00103991
egb_usd 	-1 up	      2626 .002933187
egb_usd 	-1		55
egb_usd 	 1 nup	      6428 -.00136584
egb_usd 	 1 up	      2617   .0029282
egb_usd 	 1		17

6 rows selected.

Elapsed: 00:00:00.06
03:14:16 SQL> 
03:14:16 SQL> 
03:14:16 SQL> -- Derive NTILE based params:
03:14:16 SQL> 
03:14:16 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.18
03:14:16 SQL> CREATE TABLE svm6162 COMPRESS AS
03:14:16   2  SELECT
03:14:16   3  pair
03:14:16   4  ,ydate
03:14:16   5  ,prdate
03:14:16   6  ,clse
03:14:16   7  ,g6
03:14:16   8  ,gatt
03:14:16   9  ,gattn
03:14:16  10  ,trend
03:14:16  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
03:14:16  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
03:14:16  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
03:14:16  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
03:14:16  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
03:14:16  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
03:14:16  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
03:14:16  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
03:14:16  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
03:14:16  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
03:14:16  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
03:14:16  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
03:14:16  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
03:14:16  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
03:14:16  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
03:14:16  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
03:14:16  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
03:14:16  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
03:14:16  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
03:14:16  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
03:14:16  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
03:14:16  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
03:14:16  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
03:14:16  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
03:14:16  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
03:14:16  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
03:14:16  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
03:14:16  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
03:14:16  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
03:14:16  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
03:14:16  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
03:14:16  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
03:14:16  43  ,hh  att32
03:14:16  44  ,d   att33
03:14:16  45  ,w   att34
03:14:16  46  ,mpm att35
03:14:16  47  ,mph att36
03:14:16  48  ,trend att37
03:14:16  49  FROM svm6142
03:14:16  50  ORDER BY ydate
03:14:16  51  /

Table created.

Elapsed: 00:00:05.57
03:14:22 SQL> 
03:14:22 SQL> -- rpt
03:14:22 SQL> 
03:14:22 SQL> SELECT
03:14:22   2  pair
03:14:22   3  ,trend
03:14:22   4  ,gatt
03:14:22   5  ,COUNT(pair)
03:14:22   6  ,AVG(g6)
03:14:22   7  FROM svm6162
03:14:22   8  GROUP BY pair,trend,gatt
03:14:22   9  ORDER BY pair,trend,gatt
03:14:22  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7573 -.00103991
egb_usd 	-1 up	      2626 .002933187
egb_usd 	-1		55
egb_usd 	 1 nup	      6428 -.00136584
egb_usd 	 1 up	      2617   .0029282
egb_usd 	 1		17

6 rows selected.

Elapsed: 00:00:00.04
03:14:22 SQL> 
03:14:22 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
03:14:22 SQL> CREATE TABLE modsrc COMPRESS AS
03:14:22   2  SELECT
03:14:22   3  pair
03:14:22   4  ,ydate
03:14:22   5  ,prdate
03:14:22   6  ,trend
03:14:22   7  ,g6
03:14:22   8  ,gatt
03:14:22   9  ,gattn
03:14:22  10  FROM svm6162
03:14:22  11  /

Table created.

Elapsed: 00:00:00.10
03:14:22 SQL> 
03:14:22 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
03:14:22 SQL> 
03:14:22 SQL> DROP   TABLE egb_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
03:14:22 SQL> CREATE TABLE egb_ms610 COMPRESS AS
03:14:22   2  SELECT
03:14:22   3  ydate
03:14:22   4  ,trend egb_trend
03:14:22   5  ,g6    egb_g6
03:14:22   6  ,gatt  egb_gatt
03:14:22   7  ,gattn egb_gattn
03:14:22   8  FROM modsrc
03:14:22   9  /

Table created.

Elapsed: 00:00:00.06
03:14:22 SQL> 
03:14:22 SQL> ANALYZE TABLE egb_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
03:14:22 SQL> 
03:14:22 SQL> -- I need a copy of the attributes:
03:14:22 SQL> 
03:14:22 SQL> 
03:14:22 SQL> DROP   TABLE egb_att;

Table dropped.

Elapsed: 00:00:00.14
03:14:23 SQL> CREATE TABLE egb_att COMPRESS AS
03:14:23   2  SELECT
03:14:23   3  ydate
03:14:23   4  ,att00 egb_att00
03:14:23   5  ,att01 egb_att01
03:14:23   6  ,att02 egb_att02
03:14:23   7  ,att03 egb_att03
03:14:23   8  ,att04 egb_att04
03:14:23   9  ,att05 egb_att05
03:14:23  10  ,att06 egb_att06
03:14:23  11  ,att07 egb_att07
03:14:23  12  ,att08 egb_att08
03:14:23  13  ,att09 egb_att09
03:14:23  14  ,att10 egb_att10
03:14:23  15  ,att11 egb_att11
03:14:23  16  ,att12 egb_att12
03:14:23  17  ,att13 egb_att13
03:14:23  18  ,att14 egb_att14
03:14:23  19  ,att15 egb_att15
03:14:23  20  ,att16 egb_att16
03:14:23  21  ,att17 egb_att17
03:14:23  22  ,att18 egb_att18
03:14:23  23  ,att19 egb_att19
03:14:23  24  ,att20 egb_att20
03:14:23  25  ,att21 egb_att21
03:14:23  26  ,att22 egb_att22
03:14:23  27  ,att23 egb_att23
03:14:23  28  ,att24 egb_att24
03:14:23  29  ,att25 egb_att25
03:14:23  30  ,att26 egb_att26
03:14:23  31  ,att27 egb_att27
03:14:23  32  ,att28 egb_att28
03:14:23  33  ,att29 egb_att29
03:14:23  34  ,att30 egb_att30
03:14:23  35  ,att31 egb_att31
03:14:23  36  ,att32 egb_att32
03:14:23  37  ,att33 egb_att33
03:14:23  38  ,att34 egb_att34
03:14:23  39  ,att35 egb_att35
03:14:23  40  ,att36 egb_att36
03:14:23  41  ,att37 egb_att37
03:14:23  42  FROM svm6162
03:14:23  43  /

Table created.

Elapsed: 00:00:00.18
03:14:23 SQL> 
03:14:23 SQL> ANALYZE TABLE egb_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.50
03:14:23 SQL> 
03:14:23 SQL> -- rpt
03:14:23 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19316

Elapsed: 00:00:00.91
03:14:24 SQL> SELECT COUNT(*)FROM egb_att;

  COUNT(*)
----------
     19316

Elapsed: 00:00:00.00
03:14:24 SQL> 
03:14:24 SQL> --
03:14:24 SQL> -- ejp610.sql
03:14:24 SQL> --
03:14:24 SQL> 
03:14:24 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:14:24 SQL> 
03:14:24 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.49
03:14:25 SQL> 
03:14:25 SQL> -- I created di5min here:
03:14:25 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:14:25 SQL> 
03:14:25 SQL> CREATE OR REPLACE VIEW svm6102 AS
03:14:25   2  SELECT
03:14:25   3  pair
03:14:25   4  ,ydate
03:14:25   5  ,prdate
03:14:25   6  ,rownum rnum -- acts as t in my time-series
03:14:25   7  ,clse
03:14:25   8  -- Derive a bunch of attributes from clse, the latest price:
03:14:25   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
03:14:25  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
03:14:25  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
03:14:25  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
03:14:25  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
03:14:25  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
03:14:25  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
03:14:25  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
03:14:25  17  --
03:14:25  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
03:14:25  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
03:14:25  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
03:14:25  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
03:14:25  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
03:14:25  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
03:14:25  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
03:14:25  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
03:14:25  26  --
03:14:25  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
03:14:25  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
03:14:25  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
03:14:25  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
03:14:25  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
03:14:25  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
03:14:25  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
03:14:25  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
03:14:25  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
03:14:25  36  FROM di5min WHERE pair LIKE'%ejp%'
03:14:25  37  AND ydate > sysdate - 95
03:14:25  38  ORDER BY ydate
03:14:25  39  /

View created.

Elapsed: 00:00:00.05
03:14:25 SQL> 
03:14:25 SQL> -- rpt
03:14:25 SQL> 
03:14:25 SQL> SELECT
03:14:25   2  pair
03:14:25   3  ,COUNT(pair)
03:14:25   4  ,MIN(clse),MAX(clse)
03:14:25   5  ,MIN(avg6),MAX(avg6)
03:14:25   6  ,MIN(ydate),MAX(ydate)
03:14:25   7  FROM svm6102
03:14:25   8  GROUP BY pair
03:14:25   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ejp_usd       19314 107.643765	115.63485 107.776148 115.509678 2010-10-03 20:55:01 2011-01-05 03:10:00

Elapsed: 00:00:00.83
03:14:26 SQL> 
03:14:26 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:14:26 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
03:14:26 SQL> CREATE TABLE svm6122 COMPRESS AS
03:14:26   2  SELECT
03:14:26   3  pair
03:14:26   4  ,ydate
03:14:26   5  ,prdate
03:14:26   6  ,clse
03:14:26   7  -- g6 is important. I want to predict g6:
03:14:26   8  ,ld6 - clse g6
03:14:26   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
03:14:26  10  -- I want more attributes from the ones I derived above:
03:14:26  11  -- clse relation to moving-min
03:14:26  12  ,clse-min4  cm4
03:14:26  13  ,clse-min6  cm6
03:14:26  14  ,clse-min8  cm8
03:14:26  15  ,clse-min10 cm10
03:14:26  16  ,clse-min12 cm12
03:14:26  17  ,clse-min14 cm14
03:14:26  18  ,clse-min16 cm16
03:14:26  19  ,clse-min18 cm18
03:14:26  20  -- clse relation to moving-avg
03:14:26  21  ,clse-avg4  ca4
03:14:26  22  ,clse-avg6  ca6
03:14:26  23  ,clse-avg8  ca8
03:14:26  24  ,clse-avg10 ca10
03:14:26  25  ,clse-avg12 ca12
03:14:26  26  ,clse-avg14 ca14
03:14:26  27  ,clse-avg16 ca16
03:14:26  28  ,clse-avg18 ca18
03:14:26  29  -- clse relation to moving-max
03:14:26  30  ,clse-max4  cx4
03:14:26  31  ,clse-max6  cx6
03:14:26  32  ,clse-max8  cx8
03:14:26  33  ,clse-max10 cx10
03:14:26  34  ,clse-max12 cx12
03:14:26  35  ,clse-max14 cx14
03:14:26  36  ,clse-max16 cx16
03:14:26  37  ,clse-max18 cx18
03:14:26  38  -- Derive more attributes.
03:14:26  39  -- I want to use CORR() here to help SVM see the shape of the series.
03:14:26  40  -- But COVAR_POP is more stable:
03:14:26  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
03:14:26  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:14:26  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:14:26  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:14:26  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:14:26  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:14:26  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:14:26  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:14:26  49  -- Derive date related attributes:
03:14:26  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:14:26  51  ,0+TO_CHAR(ydate,'D')d
03:14:26  52  ,0+TO_CHAR(ydate,'W')w
03:14:26  53  -- mpm stands for minutes-past-midnight:
03:14:26  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:14:26  55  -- mph stands for minutes-past-hour:
03:14:26  56  ,0+TO_CHAR(ydate,'MI')mph
03:14:26  57  FROM svm6102
03:14:26  58  ORDER BY ydate
03:14:26  59  /

Table created.

Elapsed: 00:00:02.12
03:14:28 SQL> 
03:14:28 SQL> -- rpt
03:14:28 SQL> 
03:14:28 SQL> SELECT
03:14:28   2  pair
03:14:28   3  ,COUNT(pair)
03:14:28   4  ,MIN(clse),MAX(clse)
03:14:28   5  ,MIN(ydate),MAX(ydate)
03:14:28   6  FROM svm6122
03:14:28   7  GROUP BY pair
03:14:28   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ejp_usd       19314 107.643765	115.63485 2010-10-03 20:55:01 2011-01-05 03:10:00

Elapsed: 00:00:00.04
03:14:28 SQL> 
03:14:28 SQL> -- Prepare for derivation of NTILE based params:
03:14:28 SQL> 
03:14:28 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.19
03:14:28 SQL> CREATE TABLE svm6142 COMPRESS AS
03:14:28   2  SELECT
03:14:28   3  pair
03:14:28   4  ,ydate
03:14:28   5  ,prdate
03:14:28   6  ,clse
03:14:28   7  ,g6
03:14:28   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
03:14:28   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
03:14:28  10  ,CASE WHEN trend IS NULL THEN 1
03:14:28  11  	    WHEN trend =0      THEN 1
03:14:28  12  	    ELSE trend END trend
03:14:28  13  ,cm4
03:14:28  14  ,cm6
03:14:28  15  ,cm8
03:14:28  16  ,cm10
03:14:28  17  ,cm12
03:14:28  18  ,cm14
03:14:28  19  ,cm16
03:14:28  20  ,cm18
03:14:28  21  --
03:14:28  22  ,ca4
03:14:28  23  ,ca6
03:14:28  24  ,ca8
03:14:28  25  ,ca10
03:14:28  26  ,ca12
03:14:28  27  ,ca14
03:14:28  28  ,ca16
03:14:28  29  ,ca18
03:14:28  30  --
03:14:28  31  ,cx4
03:14:28  32  ,cx6
03:14:28  33  ,cx8
03:14:28  34  ,cx10
03:14:28  35  ,cx12
03:14:28  36  ,cx14
03:14:28  37  ,cx16
03:14:28  38  ,cx18
03:14:28  39  --
03:14:28  40  ,crr4
03:14:28  41  ,crr6
03:14:28  42  ,crr8
03:14:28  43  ,crr10
03:14:28  44  ,crr12
03:14:28  45  ,crr14
03:14:28  46  ,crr16
03:14:28  47  ,crr18
03:14:28  48  --
03:14:28  49  ,hh
03:14:28  50  ,d
03:14:28  51  ,w
03:14:28  52  ,mpm
03:14:28  53  ,mph
03:14:28  54  FROM svm6122
03:14:28  55  ORDER BY ydate
03:14:28  56  /

Table created.

Elapsed: 00:00:00.36
03:14:29 SQL> 
03:14:29 SQL> -- rpt
03:14:29 SQL> 
03:14:29 SQL> SELECT
03:14:29   2  pair
03:14:29   3  ,trend
03:14:29   4  ,gatt
03:14:29   5  ,COUNT(pair)
03:14:29   6  ,AVG(g6)
03:14:29   7  FROM svm6142
03:14:29   8  GROUP BY pair,trend,gatt
03:14:29   9  ORDER BY pair,trend,gatt
03:14:29  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4902 -.32325776
ejp_usd 	-1 up	      4859 .271467191
ejp_usd 	-1		42
ejp_usd 	 1 nup	      4906 -.30104078
ejp_usd 	 1 up	      4575 .290080166
ejp_usd 	 1		30

6 rows selected.

Elapsed: 00:00:00.04
03:14:29 SQL> 
03:14:29 SQL> 
03:14:29 SQL> -- Derive NTILE based params:
03:14:29 SQL> 
03:14:29 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.19
03:14:29 SQL> CREATE TABLE svm6162 COMPRESS AS
03:14:29   2  SELECT
03:14:29   3  pair
03:14:29   4  ,ydate
03:14:29   5  ,prdate
03:14:29   6  ,clse
03:14:29   7  ,g6
03:14:29   8  ,gatt
03:14:29   9  ,gattn
03:14:29  10  ,trend
03:14:29  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
03:14:29  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
03:14:29  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
03:14:29  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
03:14:29  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
03:14:29  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
03:14:29  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
03:14:29  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
03:14:29  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
03:14:29  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
03:14:29  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
03:14:29  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
03:14:29  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
03:14:29  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
03:14:29  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
03:14:29  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
03:14:29  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
03:14:29  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
03:14:29  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
03:14:29  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
03:14:29  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
03:14:29  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
03:14:29  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
03:14:29  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
03:14:29  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
03:14:29  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
03:14:29  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
03:14:29  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
03:14:29  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
03:14:29  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
03:14:29  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
03:14:29  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
03:14:29  43  ,hh  att32
03:14:29  44  ,d   att33
03:14:29  45  ,w   att34
03:14:29  46  ,mpm att35
03:14:29  47  ,mph att36
03:14:29  48  ,trend att37
03:14:29  49  FROM svm6142
03:14:29  50  ORDER BY ydate
03:14:29  51  /

Table created.

Elapsed: 00:00:04.82
03:14:34 SQL> 
03:14:34 SQL> -- rpt
03:14:34 SQL> 
03:14:34 SQL> SELECT
03:14:34   2  pair
03:14:34   3  ,trend
03:14:34   4  ,gatt
03:14:34   5  ,COUNT(pair)
03:14:34   6  ,AVG(g6)
03:14:34   7  FROM svm6162
03:14:34   8  GROUP BY pair,trend,gatt
03:14:34   9  ORDER BY pair,trend,gatt
03:14:34  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4902 -.32325776
ejp_usd 	-1 up	      4859 .271467191
ejp_usd 	-1		42
ejp_usd 	 1 nup	      4906 -.30104078
ejp_usd 	 1 up	      4575 .290080166
ejp_usd 	 1		30

6 rows selected.

Elapsed: 00:00:00.03
03:14:34 SQL> 
03:14:34 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
03:14:34 SQL> CREATE TABLE modsrc COMPRESS AS
03:14:34   2  SELECT
03:14:34   3  pair
03:14:34   4  ,ydate
03:14:34   5  ,prdate
03:14:34   6  ,trend
03:14:34   7  ,g6
03:14:34   8  ,gatt
03:14:34   9  ,gattn
03:14:34  10  FROM svm6162
03:14:34  11  /

Table created.

Elapsed: 00:00:00.10
03:14:34 SQL> 
03:14:34 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
03:14:34 SQL> 
03:14:34 SQL> DROP   TABLE ejp_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
03:14:34 SQL> CREATE TABLE ejp_ms610 COMPRESS AS
03:14:34   2  SELECT
03:14:34   3  ydate
03:14:34   4  ,trend ejp_trend
03:14:34   5  ,g6    ejp_g6
03:14:34   6  ,gatt  ejp_gatt
03:14:34   7  ,gattn ejp_gattn
03:14:34   8  FROM modsrc
03:14:34   9  /

Table created.

Elapsed: 00:00:00.08
03:14:34 SQL> 
03:14:34 SQL> ANALYZE TABLE ejp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
03:14:34 SQL> 
03:14:34 SQL> -- I need a copy of the attributes:
03:14:34 SQL> 
03:14:34 SQL> 
03:14:34 SQL> DROP   TABLE ejp_att;

Table dropped.

Elapsed: 00:00:00.05
03:14:34 SQL> CREATE TABLE ejp_att COMPRESS AS
03:14:34   2  SELECT
03:14:34   3  ydate
03:14:34   4  ,att00 ejp_att00
03:14:34   5  ,att01 ejp_att01
03:14:34   6  ,att02 ejp_att02
03:14:34   7  ,att03 ejp_att03
03:14:34   8  ,att04 ejp_att04
03:14:34   9  ,att05 ejp_att05
03:14:34  10  ,att06 ejp_att06
03:14:34  11  ,att07 ejp_att07
03:14:34  12  ,att08 ejp_att08
03:14:34  13  ,att09 ejp_att09
03:14:34  14  ,att10 ejp_att10
03:14:34  15  ,att11 ejp_att11
03:14:34  16  ,att12 ejp_att12
03:14:34  17  ,att13 ejp_att13
03:14:34  18  ,att14 ejp_att14
03:14:34  19  ,att15 ejp_att15
03:14:34  20  ,att16 ejp_att16
03:14:34  21  ,att17 ejp_att17
03:14:34  22  ,att18 ejp_att18
03:14:34  23  ,att19 ejp_att19
03:14:34  24  ,att20 ejp_att20
03:14:34  25  ,att21 ejp_att21
03:14:34  26  ,att22 ejp_att22
03:14:34  27  ,att23 ejp_att23
03:14:34  28  ,att24 ejp_att24
03:14:34  29  ,att25 ejp_att25
03:14:34  30  ,att26 ejp_att26
03:14:34  31  ,att27 ejp_att27
03:14:34  32  ,att28 ejp_att28
03:14:34  33  ,att29 ejp_att29
03:14:34  34  ,att30 ejp_att30
03:14:34  35  ,att31 ejp_att31
03:14:34  36  ,att32 ejp_att32
03:14:34  37  ,att33 ejp_att33
03:14:34  38  ,att34 ejp_att34
03:14:34  39  ,att35 ejp_att35
03:14:34  40  ,att36 ejp_att36
03:14:34  41  ,att37 ejp_att37
03:14:34  42  FROM svm6162
03:14:34  43  /

Table created.

Elapsed: 00:00:00.18
03:14:35 SQL> 
03:14:35 SQL> ANALYZE TABLE ejp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
03:14:35 SQL> 
03:14:35 SQL> -- rpt
03:14:35 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19314

Elapsed: 00:00:00.83
03:14:36 SQL> SELECT COUNT(*)FROM ejp_att;

  COUNT(*)
----------
     19314

Elapsed: 00:00:00.01
03:14:36 SQL> 
03:14:36 SQL> --
03:14:36 SQL> -- ajp610.sql
03:14:36 SQL> --
03:14:36 SQL> 
03:14:36 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:14:36 SQL> 
03:14:36 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.42
03:14:36 SQL> 
03:14:36 SQL> -- I created di5min here:
03:14:36 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:14:36 SQL> 
03:14:36 SQL> CREATE OR REPLACE VIEW svm6102 AS
03:14:36   2  SELECT
03:14:36   3  pair
03:14:36   4  ,ydate
03:14:36   5  ,prdate
03:14:36   6  ,rownum rnum -- acts as t in my time-series
03:14:36   7  ,clse
03:14:36   8  -- Derive a bunch of attributes from clse, the latest price:
03:14:36   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
03:14:36  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
03:14:36  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
03:14:36  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
03:14:36  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
03:14:36  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
03:14:36  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
03:14:36  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
03:14:36  17  --
03:14:36  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
03:14:36  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
03:14:36  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
03:14:36  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
03:14:36  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
03:14:36  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
03:14:36  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
03:14:36  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
03:14:36  26  --
03:14:36  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
03:14:36  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
03:14:36  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
03:14:36  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
03:14:36  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
03:14:36  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
03:14:36  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
03:14:36  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
03:14:36  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
03:14:36  36  FROM di5min WHERE pair LIKE'%ajp%'
03:14:36  37  AND ydate > sysdate - 95
03:14:36  38  ORDER BY ydate
03:14:36  39  /

View created.

Elapsed: 00:00:00.05
03:14:36 SQL> 
03:14:36 SQL> -- rpt
03:14:36 SQL> 
03:14:36 SQL> SELECT
03:14:36   2  pair
03:14:36   3  ,COUNT(pair)
03:14:36   4  ,MIN(clse),MAX(clse)
03:14:36   5  ,MIN(avg6),MAX(avg6)
03:14:36   6  ,MIN(ydate),MAX(ydate)
03:14:36   7  FROM svm6102
03:14:36   8  GROUP BY pair
03:14:36   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ajp_usd       19311  78.249976 83.6669853 78.5106193  83.546306 2010-10-03 20:55:01 2011-01-05 03:10:00

Elapsed: 00:00:00.78
03:14:37 SQL> 
03:14:37 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:14:37 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.19
03:14:37 SQL> CREATE TABLE svm6122 COMPRESS AS
03:14:37   2  SELECT
03:14:37   3  pair
03:14:37   4  ,ydate
03:14:37   5  ,prdate
03:14:37   6  ,clse
03:14:37   7  -- g6 is important. I want to predict g6:
03:14:37   8  ,ld6 - clse g6
03:14:37   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
03:14:37  10  -- I want more attributes from the ones I derived above:
03:14:37  11  -- clse relation to moving-min
03:14:37  12  ,clse-min4  cm4
03:14:37  13  ,clse-min6  cm6
03:14:37  14  ,clse-min8  cm8
03:14:37  15  ,clse-min10 cm10
03:14:37  16  ,clse-min12 cm12
03:14:37  17  ,clse-min14 cm14
03:14:37  18  ,clse-min16 cm16
03:14:37  19  ,clse-min18 cm18
03:14:37  20  -- clse relation to moving-avg
03:14:37  21  ,clse-avg4  ca4
03:14:37  22  ,clse-avg6  ca6
03:14:37  23  ,clse-avg8  ca8
03:14:37  24  ,clse-avg10 ca10
03:14:37  25  ,clse-avg12 ca12
03:14:37  26  ,clse-avg14 ca14
03:14:37  27  ,clse-avg16 ca16
03:14:37  28  ,clse-avg18 ca18
03:14:37  29  -- clse relation to moving-max
03:14:37  30  ,clse-max4  cx4
03:14:37  31  ,clse-max6  cx6
03:14:37  32  ,clse-max8  cx8
03:14:37  33  ,clse-max10 cx10
03:14:37  34  ,clse-max12 cx12
03:14:37  35  ,clse-max14 cx14
03:14:37  36  ,clse-max16 cx16
03:14:37  37  ,clse-max18 cx18
03:14:37  38  -- Derive more attributes.
03:14:37  39  -- I want to use CORR() here to help SVM see the shape of the series.
03:14:37  40  -- But COVAR_POP is more stable:
03:14:37  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
03:14:37  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:14:37  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:14:37  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:14:37  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:14:37  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:14:37  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:14:37  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:14:37  49  -- Derive date related attributes:
03:14:37  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:14:37  51  ,0+TO_CHAR(ydate,'D')d
03:14:37  52  ,0+TO_CHAR(ydate,'W')w
03:14:37  53  -- mpm stands for minutes-past-midnight:
03:14:37  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:14:37  55  -- mph stands for minutes-past-hour:
03:14:37  56  ,0+TO_CHAR(ydate,'MI')mph
03:14:37  57  FROM svm6102
03:14:37  58  ORDER BY ydate
03:14:37  59  /

Table created.

Elapsed: 00:00:02.02
03:14:39 SQL> 
03:14:39 SQL> -- rpt
03:14:39 SQL> 
03:14:39 SQL> SELECT
03:14:39   2  pair
03:14:39   3  ,COUNT(pair)
03:14:39   4  ,MIN(clse),MAX(clse)
03:14:39   5  ,MIN(ydate),MAX(ydate)
03:14:39   6  FROM svm6122
03:14:39   7  GROUP BY pair
03:14:39   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ajp_usd       19311  78.249976 83.6669853 2010-10-03 20:55:01 2011-01-05 03:10:00

Elapsed: 00:00:00.03
03:14:39 SQL> 
03:14:39 SQL> -- Prepare for derivation of NTILE based params:
03:14:39 SQL> 
03:14:39 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.19
03:14:40 SQL> CREATE TABLE svm6142 COMPRESS AS
03:14:40   2  SELECT
03:14:40   3  pair
03:14:40   4  ,ydate
03:14:40   5  ,prdate
03:14:40   6  ,clse
03:14:40   7  ,g6
03:14:40   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
03:14:40   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
03:14:40  10  ,CASE WHEN trend IS NULL THEN 1
03:14:40  11  	    WHEN trend =0      THEN 1
03:14:40  12  	    ELSE trend END trend
03:14:40  13  ,cm4
03:14:40  14  ,cm6
03:14:40  15  ,cm8
03:14:40  16  ,cm10
03:14:40  17  ,cm12
03:14:40  18  ,cm14
03:14:40  19  ,cm16
03:14:40  20  ,cm18
03:14:40  21  --
03:14:40  22  ,ca4
03:14:40  23  ,ca6
03:14:40  24  ,ca8
03:14:40  25  ,ca10
03:14:40  26  ,ca12
03:14:40  27  ,ca14
03:14:40  28  ,ca16
03:14:40  29  ,ca18
03:14:40  30  --
03:14:40  31  ,cx4
03:14:40  32  ,cx6
03:14:40  33  ,cx8
03:14:40  34  ,cx10
03:14:40  35  ,cx12
03:14:40  36  ,cx14
03:14:40  37  ,cx16
03:14:40  38  ,cx18
03:14:40  39  --
03:14:40  40  ,crr4
03:14:40  41  ,crr6
03:14:40  42  ,crr8
03:14:40  43  ,crr10
03:14:40  44  ,crr12
03:14:40  45  ,crr14
03:14:40  46  ,crr16
03:14:40  47  ,crr18
03:14:40  48  --
03:14:40  49  ,hh
03:14:40  50  ,d
03:14:40  51  ,w
03:14:40  52  ,mpm
03:14:40  53  ,mph
03:14:40  54  FROM svm6122
03:14:40  55  ORDER BY ydate
03:14:40  56  /

Table created.

Elapsed: 00:00:00.39
03:14:40 SQL> 
03:14:40 SQL> -- rpt
03:14:40 SQL> 
03:14:40 SQL> SELECT
03:14:40   2  pair
03:14:40   3  ,trend
03:14:40   4  ,gatt
03:14:40   5  ,COUNT(pair)
03:14:40   6  ,AVG(g6)
03:14:40   7  FROM svm6142
03:14:40   8  GROUP BY pair,trend,gatt
03:14:40   9  ORDER BY pair,trend,gatt
03:14:40  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4188 -.22776399
ajp_usd 	-1 up	      5115 .220577996
ajp_usd 	-1		36
ajp_usd 	 1 nup	      5191 -.20235505
ajp_usd 	 1 up	      4745 .206911097
ajp_usd 	 1		36

6 rows selected.

Elapsed: 00:00:00.04
03:14:40 SQL> 
03:14:40 SQL> 
03:14:40 SQL> -- Derive NTILE based params:
03:14:40 SQL> 
03:14:40 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
03:14:40 SQL> CREATE TABLE svm6162 COMPRESS AS
03:14:40   2  SELECT
03:14:40   3  pair
03:14:40   4  ,ydate
03:14:40   5  ,prdate
03:14:40   6  ,clse
03:14:40   7  ,g6
03:14:40   8  ,gatt
03:14:40   9  ,gattn
03:14:40  10  ,trend
03:14:40  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
03:14:40  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
03:14:40  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
03:14:40  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
03:14:40  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
03:14:40  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
03:14:40  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
03:14:40  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
03:14:40  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
03:14:40  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
03:14:40  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
03:14:40  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
03:14:40  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
03:14:40  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
03:14:40  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
03:14:40  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
03:14:40  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
03:14:40  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
03:14:40  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
03:14:40  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
03:14:40  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
03:14:40  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
03:14:40  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
03:14:40  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
03:14:40  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
03:14:40  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
03:14:40  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
03:14:40  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
03:14:40  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
03:14:40  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
03:14:40  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
03:14:40  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
03:14:40  43  ,hh  att32
03:14:40  44  ,d   att33
03:14:40  45  ,w   att34
03:14:40  46  ,mpm att35
03:14:40  47  ,mph att36
03:14:40  48  ,trend att37
03:14:40  49  FROM svm6142
03:14:40  50  ORDER BY ydate
03:14:40  51  /

Table created.

Elapsed: 00:00:04.84
03:14:45 SQL> 
03:14:45 SQL> -- rpt
03:14:45 SQL> 
03:14:45 SQL> SELECT
03:14:45   2  pair
03:14:45   3  ,trend
03:14:45   4  ,gatt
03:14:45   5  ,COUNT(pair)
03:14:45   6  ,AVG(g6)
03:14:45   7  FROM svm6162
03:14:45   8  GROUP BY pair,trend,gatt
03:14:45   9  ORDER BY pair,trend,gatt
03:14:45  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4188 -.22776399
ajp_usd 	-1 up	      5115 .220577996
ajp_usd 	-1		36
ajp_usd 	 1 nup	      5191 -.20235505
ajp_usd 	 1 up	      4745 .206911097
ajp_usd 	 1		36

6 rows selected.

Elapsed: 00:00:00.03
03:14:45 SQL> 
03:14:45 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.14
03:14:45 SQL> CREATE TABLE modsrc COMPRESS AS
03:14:45   2  SELECT
03:14:45   3  pair
03:14:45   4  ,ydate
03:14:45   5  ,prdate
03:14:45   6  ,trend
03:14:45   7  ,g6
03:14:45   8  ,gatt
03:14:45   9  ,gattn
03:14:45  10  FROM svm6162
03:14:45  11  /

Table created.

Elapsed: 00:00:00.09
03:14:45 SQL> 
03:14:45 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
03:14:46 SQL> 
03:14:46 SQL> DROP   TABLE ajp_ms610 ;

Table dropped.

Elapsed: 00:00:00.07
03:14:46 SQL> CREATE TABLE ajp_ms610 COMPRESS AS
03:14:46   2  SELECT
03:14:46   3  ydate
03:14:46   4  ,trend ajp_trend
03:14:46   5  ,g6    ajp_g6
03:14:46   6  ,gatt  ajp_gatt
03:14:46   7  ,gattn ajp_gattn
03:14:46   8  FROM modsrc
03:14:46   9  /

Table created.

Elapsed: 00:00:00.10
03:14:46 SQL> 
03:14:46 SQL> ANALYZE TABLE ajp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
03:14:46 SQL> 
03:14:46 SQL> -- I need a copy of the attributes:
03:14:46 SQL> 
03:14:46 SQL> 
03:14:46 SQL> DROP   TABLE ajp_att;

Table dropped.

Elapsed: 00:00:00.07
03:14:46 SQL> CREATE TABLE ajp_att COMPRESS AS
03:14:46   2  SELECT
03:14:46   3  ydate
03:14:46   4  ,att00 ajp_att00
03:14:46   5  ,att01 ajp_att01
03:14:46   6  ,att02 ajp_att02
03:14:46   7  ,att03 ajp_att03
03:14:46   8  ,att04 ajp_att04
03:14:46   9  ,att05 ajp_att05
03:14:46  10  ,att06 ajp_att06
03:14:46  11  ,att07 ajp_att07
03:14:46  12  ,att08 ajp_att08
03:14:46  13  ,att09 ajp_att09
03:14:46  14  ,att10 ajp_att10
03:14:46  15  ,att11 ajp_att11
03:14:46  16  ,att12 ajp_att12
03:14:46  17  ,att13 ajp_att13
03:14:46  18  ,att14 ajp_att14
03:14:46  19  ,att15 ajp_att15
03:14:46  20  ,att16 ajp_att16
03:14:46  21  ,att17 ajp_att17
03:14:46  22  ,att18 ajp_att18
03:14:46  23  ,att19 ajp_att19
03:14:46  24  ,att20 ajp_att20
03:14:46  25  ,att21 ajp_att21
03:14:46  26  ,att22 ajp_att22
03:14:46  27  ,att23 ajp_att23
03:14:46  28  ,att24 ajp_att24
03:14:46  29  ,att25 ajp_att25
03:14:46  30  ,att26 ajp_att26
03:14:46  31  ,att27 ajp_att27
03:14:46  32  ,att28 ajp_att28
03:14:46  33  ,att29 ajp_att29
03:14:46  34  ,att30 ajp_att30
03:14:46  35  ,att31 ajp_att31
03:14:46  36  ,att32 ajp_att32
03:14:46  37  ,att33 ajp_att33
03:14:46  38  ,att34 ajp_att34
03:14:46  39  ,att35 ajp_att35
03:14:46  40  ,att36 ajp_att36
03:14:46  41  ,att37 ajp_att37
03:14:46  42  FROM svm6162
03:14:46  43  /

Table created.

Elapsed: 00:00:00.18
03:14:46 SQL> 
03:14:46 SQL> ANALYZE TABLE ajp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
03:14:47 SQL> 
03:14:47 SQL> -- rpt
03:14:47 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19311

Elapsed: 00:00:00.78
03:14:47 SQL> SELECT COUNT(*)FROM ajp_att;

  COUNT(*)
----------
     19311

Elapsed: 00:00:00.00
03:14:47 SQL> 
03:14:47 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
