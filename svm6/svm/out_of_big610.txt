
SQL*Plus: Release 11.2.0.1.0 Production on Mon Dec 27 07:17:33 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

07:17:33 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
07:17:33 SQL> 07:17:33 SQL> --
07:17:33 SQL> -- eur610.sql
07:17:33 SQL> --
07:17:33 SQL> 
07:17:33 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:17:33 SQL> 
07:17:33 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.01
07:17:33 SQL> 
07:17:33 SQL> -- I created di5min here:
07:17:33 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:17:33 SQL> 
07:17:33 SQL> CREATE OR REPLACE VIEW svm6102 AS
07:17:33   2  SELECT
07:17:33   3  pair
07:17:33   4  ,ydate
07:17:33   5  ,prdate
07:17:33   6  ,rownum rnum -- acts as t in my time-series
07:17:33   7  ,clse
07:17:33   8  -- Derive a bunch of attributes from clse, the latest price:
07:17:33   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
07:17:33  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
07:17:33  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
07:17:33  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
07:17:33  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
07:17:33  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
07:17:33  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
07:17:33  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
07:17:33  17  --
07:17:33  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
07:17:33  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
07:17:33  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
07:17:33  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
07:17:33  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
07:17:33  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
07:17:33  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
07:17:33  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
07:17:33  26  --
07:17:33  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
07:17:33  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
07:17:33  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
07:17:33  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
07:17:33  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
07:17:33  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
07:17:33  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
07:17:33  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
07:17:33  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
07:17:33  36  FROM di5min WHERE pair LIKE'%eur%'
07:17:33  37  AND ydate > sysdate - 95
07:17:33  38  ORDER BY ydate
07:17:33  39  /

View created.

Elapsed: 00:00:00.06
07:17:33 SQL> 
07:17:33 SQL> -- rpt
07:17:33 SQL> 
07:17:33 SQL> SELECT
07:17:33   2  pair
07:17:33   3  ,COUNT(pair)
07:17:33   4  ,MIN(clse),MAX(clse)
07:17:33   5  ,MIN(avg6),MAX(avg6)
07:17:33   6  ,MIN(ydate),MAX(ydate)
07:17:33   7  FROM svm6102
07:17:33   8  GROUP BY pair
07:17:33   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19287    1.29735	   1.4273 1.29875103 1.42436233 2010-09-23 07:20:01 2010-12-27 07:10:00

Elapsed: 00:00:00.86
07:17:34 SQL> 
07:17:34 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
07:17:34 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.04
07:17:34 SQL> CREATE TABLE svm6122 COMPRESS AS
07:17:34   2  SELECT
07:17:34   3  pair
07:17:34   4  ,ydate
07:17:34   5  ,prdate
07:17:34   6  ,clse
07:17:34   7  -- g6 is important. I want to predict g6:
07:17:34   8  ,ld6 - clse g6
07:17:34   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
07:17:34  10  -- I want more attributes from the ones I derived above:
07:17:34  11  -- clse relation to moving-min
07:17:34  12  ,clse-min4  cm4
07:17:34  13  ,clse-min6  cm6
07:17:34  14  ,clse-min8  cm8
07:17:34  15  ,clse-min10 cm10
07:17:34  16  ,clse-min12 cm12
07:17:34  17  ,clse-min14 cm14
07:17:34  18  ,clse-min16 cm16
07:17:34  19  ,clse-min18 cm18
07:17:34  20  -- clse relation to moving-avg
07:17:34  21  ,clse-avg4  ca4
07:17:34  22  ,clse-avg6  ca6
07:17:34  23  ,clse-avg8  ca8
07:17:34  24  ,clse-avg10 ca10
07:17:34  25  ,clse-avg12 ca12
07:17:34  26  ,clse-avg14 ca14
07:17:34  27  ,clse-avg16 ca16
07:17:34  28  ,clse-avg18 ca18
07:17:34  29  -- clse relation to moving-max
07:17:34  30  ,clse-max4  cx4
07:17:34  31  ,clse-max6  cx6
07:17:34  32  ,clse-max8  cx8
07:17:34  33  ,clse-max10 cx10
07:17:34  34  ,clse-max12 cx12
07:17:34  35  ,clse-max14 cx14
07:17:34  36  ,clse-max16 cx16
07:17:34  37  ,clse-max18 cx18
07:17:34  38  -- Derive more attributes.
07:17:34  39  -- I want to use CORR() here to help SVM see the shape of the series.
07:17:34  40  -- But COVAR_POP is more stable:
07:17:34  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
07:17:34  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:17:34  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:17:34  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:17:34  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:17:34  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:17:34  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:17:34  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:17:34  49  -- Derive date related attributes:
07:17:34  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:17:34  51  ,0+TO_CHAR(ydate,'D')d
07:17:34  52  ,0+TO_CHAR(ydate,'W')w
07:17:34  53  -- mpm stands for minutes-past-midnight:
07:17:34  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:17:34  55  -- mph stands for minutes-past-hour:
07:17:34  56  ,0+TO_CHAR(ydate,'MI')mph
07:17:34  57  FROM svm6102
07:17:34  58  ORDER BY ydate
07:17:34  59  /

Table created.

Elapsed: 00:00:02.30
07:17:36 SQL> 
07:17:36 SQL> -- rpt
07:17:36 SQL> 
07:17:36 SQL> SELECT
07:17:36   2  pair
07:17:36   3  ,COUNT(pair)
07:17:36   4  ,MIN(clse),MAX(clse)
07:17:36   5  ,MIN(ydate),MAX(ydate)
07:17:36   6  FROM svm6122
07:17:36   7  GROUP BY pair
07:17:36   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19287    1.29735	   1.4273 2010-09-23 07:20:01 2010-12-27 07:10:00

Elapsed: 00:00:00.04
07:17:36 SQL> 
07:17:36 SQL> -- Prepare for derivation of NTILE based params:
07:17:36 SQL> 
07:17:36 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.04
07:17:36 SQL> CREATE TABLE svm6142 COMPRESS AS
07:17:36   2  SELECT
07:17:36   3  pair
07:17:36   4  ,ydate
07:17:36   5  ,prdate
07:17:36   6  ,clse
07:17:36   7  ,g6
07:17:36   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
07:17:36   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
07:17:36  10  ,CASE WHEN trend IS NULL THEN 1
07:17:36  11  	    WHEN trend =0      THEN 1
07:17:36  12  	    ELSE trend END trend
07:17:36  13  ,cm4
07:17:36  14  ,cm6
07:17:36  15  ,cm8
07:17:36  16  ,cm10
07:17:36  17  ,cm12
07:17:36  18  ,cm14
07:17:36  19  ,cm16
07:17:36  20  ,cm18
07:17:36  21  --
07:17:36  22  ,ca4
07:17:36  23  ,ca6
07:17:36  24  ,ca8
07:17:36  25  ,ca10
07:17:36  26  ,ca12
07:17:36  27  ,ca14
07:17:36  28  ,ca16
07:17:36  29  ,ca18
07:17:36  30  --
07:17:36  31  ,cx4
07:17:36  32  ,cx6
07:17:36  33  ,cx8
07:17:36  34  ,cx10
07:17:36  35  ,cx12
07:17:36  36  ,cx14
07:17:36  37  ,cx16
07:17:36  38  ,cx18
07:17:36  39  --
07:17:36  40  ,crr4
07:17:36  41  ,crr6
07:17:36  42  ,crr8
07:17:36  43  ,crr10
07:17:36  44  ,crr12
07:17:36  45  ,crr14
07:17:36  46  ,crr16
07:17:36  47  ,crr18
07:17:36  48  --
07:17:36  49  ,hh
07:17:36  50  ,d
07:17:36  51  ,w
07:17:36  52  ,mpm
07:17:36  53  ,mph
07:17:36  54  FROM svm6122
07:17:36  55  ORDER BY ydate
07:17:36  56  /

Table created.

Elapsed: 00:00:00.37
07:17:37 SQL> 
07:17:37 SQL> -- rpt
07:17:37 SQL> 
07:17:37 SQL> SELECT
07:17:37   2  pair
07:17:37   3  ,trend
07:17:37   4  ,gatt
07:17:37   5  ,COUNT(pair)
07:17:37   6  ,AVG(g6)
07:17:37   7  FROM svm6142
07:17:37   8  GROUP BY pair,trend,gatt
07:17:37   9  ORDER BY pair,trend,gatt
07:17:37  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6032 -.00306157
eur_usd 	-1 up	      3649 .004462521
eur_usd 	-1		15
eur_usd 	 1 nup	      5848 -.00315603
eur_usd 	 1 up	      3686 .005173901
eur_usd 	 1		57

6 rows selected.

Elapsed: 00:00:00.04
07:17:37 SQL> 
07:17:37 SQL> 
07:17:37 SQL> -- Derive NTILE based params:
07:17:37 SQL> 
07:17:37 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.07
07:17:37 SQL> CREATE TABLE svm6162 COMPRESS AS
07:17:37   2  SELECT
07:17:37   3  pair
07:17:37   4  ,ydate
07:17:37   5  ,prdate
07:17:37   6  ,clse
07:17:37   7  ,g6
07:17:37   8  ,gatt
07:17:37   9  ,gattn
07:17:37  10  ,trend
07:17:37  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
07:17:37  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
07:17:37  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
07:17:37  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
07:17:37  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
07:17:37  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
07:17:37  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
07:17:37  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
07:17:37  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
07:17:37  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
07:17:37  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
07:17:37  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
07:17:37  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
07:17:37  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
07:17:37  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
07:17:37  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
07:17:37  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
07:17:37  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
07:17:37  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
07:17:37  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
07:17:37  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
07:17:37  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
07:17:37  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
07:17:37  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
07:17:37  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
07:17:37  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
07:17:37  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
07:17:37  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
07:17:37  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
07:17:37  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
07:17:37  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
07:17:37  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
07:17:37  43  ,hh  att32
07:17:37  44  ,d   att33
07:17:37  45  ,w   att34
07:17:37  46  ,mpm att35
07:17:37  47  ,mph att36
07:17:37  48  ,trend att37
07:17:37  49  FROM svm6142
07:17:37  50  ORDER BY ydate
07:17:37  51  /

Table created.

Elapsed: 00:00:04.64
07:17:41 SQL> 
07:17:41 SQL> -- rpt
07:17:41 SQL> 
07:17:41 SQL> SELECT
07:17:41   2  pair
07:17:41   3  ,trend
07:17:41   4  ,gatt
07:17:41   5  ,COUNT(pair)
07:17:41   6  ,AVG(g6)
07:17:41   7  FROM svm6162
07:17:41   8  GROUP BY pair,trend,gatt
07:17:41   9  ORDER BY pair,trend,gatt
07:17:41  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6032 -.00306157
eur_usd 	-1 up	      3649 .004462521
eur_usd 	-1		15
eur_usd 	 1 nup	      5848 -.00315603
eur_usd 	 1 up	      3686 .005173901
eur_usd 	 1		57

6 rows selected.

Elapsed: 00:00:00.03
07:17:41 SQL> 
07:17:41 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.09
07:17:42 SQL> CREATE TABLE modsrc COMPRESS AS
07:17:42   2  SELECT
07:17:42   3  pair
07:17:42   4  ,ydate
07:17:42   5  ,prdate
07:17:42   6  ,trend
07:17:42   7  ,g6
07:17:42   8  ,gatt
07:17:42   9  ,gattn
07:17:42  10  FROM svm6162
07:17:42  11  /

Table created.

Elapsed: 00:00:00.07
07:17:42 SQL> 
07:17:42 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
07:17:42 SQL> 
07:17:42 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
07:17:42 SQL> CREATE TABLE eur_ms610 COMPRESS AS
07:17:42   2  SELECT
07:17:42   3  ydate
07:17:42   4  ,trend eur_trend
07:17:42   5  ,g6    eur_g6
07:17:42   6  ,gatt  eur_gatt
07:17:42   7  ,gattn eur_gattn
07:17:42   8  FROM modsrc
07:17:42   9  /

Table created.

Elapsed: 00:00:00.06
07:17:42 SQL> 
07:17:42 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
07:17:42 SQL> 
07:17:42 SQL> -- I need a copy of the attributes:
07:17:42 SQL> 
07:17:42 SQL> 
07:17:42 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.04
07:17:42 SQL> CREATE TABLE eur_att COMPRESS AS
07:17:42   2  SELECT
07:17:42   3  ydate
07:17:42   4  ,att00 eur_att00
07:17:42   5  ,att01 eur_att01
07:17:42   6  ,att02 eur_att02
07:17:42   7  ,att03 eur_att03
07:17:42   8  ,att04 eur_att04
07:17:42   9  ,att05 eur_att05
07:17:42  10  ,att06 eur_att06
07:17:42  11  ,att07 eur_att07
07:17:42  12  ,att08 eur_att08
07:17:42  13  ,att09 eur_att09
07:17:42  14  ,att10 eur_att10
07:17:42  15  ,att11 eur_att11
07:17:42  16  ,att12 eur_att12
07:17:42  17  ,att13 eur_att13
07:17:42  18  ,att14 eur_att14
07:17:42  19  ,att15 eur_att15
07:17:42  20  ,att16 eur_att16
07:17:42  21  ,att17 eur_att17
07:17:42  22  ,att18 eur_att18
07:17:42  23  ,att19 eur_att19
07:17:42  24  ,att20 eur_att20
07:17:42  25  ,att21 eur_att21
07:17:42  26  ,att22 eur_att22
07:17:42  27  ,att23 eur_att23
07:17:42  28  ,att24 eur_att24
07:17:42  29  ,att25 eur_att25
07:17:42  30  ,att26 eur_att26
07:17:42  31  ,att27 eur_att27
07:17:42  32  ,att28 eur_att28
07:17:42  33  ,att29 eur_att29
07:17:42  34  ,att30 eur_att30
07:17:42  35  ,att31 eur_att31
07:17:42  36  ,att32 eur_att32
07:17:42  37  ,att33 eur_att33
07:17:42  38  ,att34 eur_att34
07:17:42  39  ,att35 eur_att35
07:17:42  40  ,att36 eur_att36
07:17:42  41  ,att37 eur_att37
07:17:42  42  FROM svm6162
07:17:42  43  /

Table created.

Elapsed: 00:00:00.16
07:17:42 SQL> 
07:17:42 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
07:17:43 SQL> 
07:17:43 SQL> -- rpt
07:17:43 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19287

Elapsed: 00:00:00.87
07:17:44 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19287

Elapsed: 00:00:00.00
07:17:44 SQL> 
07:17:44 SQL> --
07:17:44 SQL> -- aud610.sql
07:17:44 SQL> --
07:17:44 SQL> 
07:17:44 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:17:44 SQL> 
07:17:44 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.42
07:17:44 SQL> 
07:17:44 SQL> -- I created di5min here:
07:17:44 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:17:44 SQL> 
07:17:44 SQL> CREATE OR REPLACE VIEW svm6102 AS
07:17:44   2  SELECT
07:17:44   3  pair
07:17:44   4  ,ydate
07:17:44   5  ,prdate
07:17:44   6  ,rownum rnum -- acts as t in my time-series
07:17:44   7  ,clse
07:17:44   8  -- Derive a bunch of attributes from clse, the latest price:
07:17:44   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
07:17:44  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
07:17:44  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
07:17:44  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
07:17:44  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
07:17:44  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
07:17:44  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
07:17:44  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
07:17:44  17  --
07:17:44  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
07:17:44  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
07:17:44  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
07:17:44  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
07:17:44  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
07:17:44  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
07:17:44  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
07:17:44  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
07:17:44  26  --
07:17:44  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
07:17:44  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
07:17:44  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
07:17:44  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
07:17:44  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
07:17:44  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
07:17:44  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
07:17:44  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
07:17:44  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
07:17:44  36  FROM di5min WHERE pair LIKE'%aud%'
07:17:44  37  AND ydate > sysdate - 95
07:17:44  38  ORDER BY ydate
07:17:44  39  /

View created.

Elapsed: 00:00:00.19
07:17:44 SQL> 
07:17:44 SQL> -- rpt
07:17:44 SQL> 
07:17:44 SQL> SELECT
07:17:44   2  pair
07:17:44   3  ,COUNT(pair)
07:17:44   4  ,MIN(clse),MAX(clse)
07:17:44   5  ,MIN(avg6),MAX(avg6)
07:17:44   6  ,MIN(ydate),MAX(ydate)
07:17:44   7  FROM svm6102
07:17:44   8  GROUP BY pair
07:17:44   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19284	 .9465	   1.0181 .948724658 1.01556438 2010-09-23 07:20:01 2010-12-27 07:10:00

Elapsed: 00:00:00.85
07:17:45 SQL> 
07:17:45 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
07:17:45 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.18
07:17:45 SQL> CREATE TABLE svm6122 COMPRESS AS
07:17:45   2  SELECT
07:17:45   3  pair
07:17:45   4  ,ydate
07:17:45   5  ,prdate
07:17:45   6  ,clse
07:17:45   7  -- g6 is important. I want to predict g6:
07:17:45   8  ,ld6 - clse g6
07:17:45   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
07:17:45  10  -- I want more attributes from the ones I derived above:
07:17:45  11  -- clse relation to moving-min
07:17:45  12  ,clse-min4  cm4
07:17:45  13  ,clse-min6  cm6
07:17:45  14  ,clse-min8  cm8
07:17:45  15  ,clse-min10 cm10
07:17:45  16  ,clse-min12 cm12
07:17:45  17  ,clse-min14 cm14
07:17:45  18  ,clse-min16 cm16
07:17:45  19  ,clse-min18 cm18
07:17:45  20  -- clse relation to moving-avg
07:17:45  21  ,clse-avg4  ca4
07:17:45  22  ,clse-avg6  ca6
07:17:45  23  ,clse-avg8  ca8
07:17:45  24  ,clse-avg10 ca10
07:17:45  25  ,clse-avg12 ca12
07:17:45  26  ,clse-avg14 ca14
07:17:45  27  ,clse-avg16 ca16
07:17:45  28  ,clse-avg18 ca18
07:17:45  29  -- clse relation to moving-max
07:17:45  30  ,clse-max4  cx4
07:17:45  31  ,clse-max6  cx6
07:17:45  32  ,clse-max8  cx8
07:17:45  33  ,clse-max10 cx10
07:17:45  34  ,clse-max12 cx12
07:17:45  35  ,clse-max14 cx14
07:17:45  36  ,clse-max16 cx16
07:17:45  37  ,clse-max18 cx18
07:17:45  38  -- Derive more attributes.
07:17:45  39  -- I want to use CORR() here to help SVM see the shape of the series.
07:17:45  40  -- But COVAR_POP is more stable:
07:17:45  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
07:17:45  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:17:45  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:17:45  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:17:45  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:17:45  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:17:45  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:17:45  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:17:45  49  -- Derive date related attributes:
07:17:45  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:17:45  51  ,0+TO_CHAR(ydate,'D')d
07:17:45  52  ,0+TO_CHAR(ydate,'W')w
07:17:45  53  -- mpm stands for minutes-past-midnight:
07:17:45  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:17:45  55  -- mph stands for minutes-past-hour:
07:17:45  56  ,0+TO_CHAR(ydate,'MI')mph
07:17:45  57  FROM svm6102
07:17:45  58  ORDER BY ydate
07:17:45  59  /

Table created.

Elapsed: 00:00:02.06
07:17:47 SQL> 
07:17:47 SQL> -- rpt
07:17:47 SQL> 
07:17:47 SQL> SELECT
07:17:47   2  pair
07:17:47   3  ,COUNT(pair)
07:17:47   4  ,MIN(clse),MAX(clse)
07:17:47   5  ,MIN(ydate),MAX(ydate)
07:17:47   6  FROM svm6122
07:17:47   7  GROUP BY pair
07:17:47   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19284	 .9465	   1.0181 2010-09-23 07:20:01 2010-12-27 07:10:00

Elapsed: 00:00:00.04
07:17:47 SQL> 
07:17:47 SQL> -- Prepare for derivation of NTILE based params:
07:17:47 SQL> 
07:17:47 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.22
07:17:48 SQL> CREATE TABLE svm6142 COMPRESS AS
07:17:48   2  SELECT
07:17:48   3  pair
07:17:48   4  ,ydate
07:17:48   5  ,prdate
07:17:48   6  ,clse
07:17:48   7  ,g6
07:17:48   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
07:17:48   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
07:17:48  10  ,CASE WHEN trend IS NULL THEN 1
07:17:48  11  	    WHEN trend =0      THEN 1
07:17:48  12  	    ELSE trend END trend
07:17:48  13  ,cm4
07:17:48  14  ,cm6
07:17:48  15  ,cm8
07:17:48  16  ,cm10
07:17:48  17  ,cm12
07:17:48  18  ,cm14
07:17:48  19  ,cm16
07:17:48  20  ,cm18
07:17:48  21  --
07:17:48  22  ,ca4
07:17:48  23  ,ca6
07:17:48  24  ,ca8
07:17:48  25  ,ca10
07:17:48  26  ,ca12
07:17:48  27  ,ca14
07:17:48  28  ,ca16
07:17:48  29  ,ca18
07:17:48  30  --
07:17:48  31  ,cx4
07:17:48  32  ,cx6
07:17:48  33  ,cx8
07:17:48  34  ,cx10
07:17:48  35  ,cx12
07:17:48  36  ,cx14
07:17:48  37  ,cx16
07:17:48  38  ,cx18
07:17:48  39  --
07:17:48  40  ,crr4
07:17:48  41  ,crr6
07:17:48  42  ,crr8
07:17:48  43  ,crr10
07:17:48  44  ,crr12
07:17:48  45  ,crr14
07:17:48  46  ,crr16
07:17:48  47  ,crr18
07:17:48  48  --
07:17:48  49  ,hh
07:17:48  50  ,d
07:17:48  51  ,w
07:17:48  52  ,mpm
07:17:48  53  ,mph
07:17:48  54  FROM svm6122
07:17:48  55  ORDER BY ydate
07:17:48  56  /

Table created.

Elapsed: 00:00:00.40
07:17:48 SQL> 
07:17:48 SQL> -- rpt
07:17:48 SQL> 
07:17:48 SQL> SELECT
07:17:48   2  pair
07:17:48   3  ,trend
07:17:48   4  ,gatt
07:17:48   5  ,COUNT(pair)
07:17:48   6  ,AVG(g6)
07:17:48   7  FROM svm6142
07:17:48   8  GROUP BY pair,trend,gatt
07:17:48   9  ORDER BY pair,trend,gatt
07:17:48  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5107 -.00215479
aud_usd 	-1 up	      3804 .003757739
aud_usd 	-1		38
aud_usd 	 1 nup	      6672  -.0021444
aud_usd 	 1 up	      3629 .004094651
aud_usd 	 1		34

6 rows selected.

Elapsed: 00:00:00.04
07:17:48 SQL> 
07:17:48 SQL> 
07:17:48 SQL> -- Derive NTILE based params:
07:17:48 SQL> 
07:17:48 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.22
07:17:48 SQL> CREATE TABLE svm6162 COMPRESS AS
07:17:48   2  SELECT
07:17:48   3  pair
07:17:48   4  ,ydate
07:17:48   5  ,prdate
07:17:48   6  ,clse
07:17:48   7  ,g6
07:17:48   8  ,gatt
07:17:48   9  ,gattn
07:17:48  10  ,trend
07:17:48  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
07:17:48  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
07:17:48  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
07:17:48  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
07:17:48  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
07:17:48  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
07:17:48  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
07:17:48  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
07:17:48  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
07:17:48  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
07:17:48  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
07:17:48  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
07:17:48  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
07:17:48  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
07:17:48  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
07:17:48  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
07:17:48  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
07:17:48  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
07:17:48  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
07:17:48  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
07:17:48  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
07:17:48  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
07:17:48  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
07:17:48  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
07:17:48  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
07:17:48  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
07:17:48  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
07:17:48  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
07:17:48  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
07:17:48  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
07:17:48  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
07:17:48  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
07:17:48  43  ,hh  att32
07:17:48  44  ,d   att33
07:17:48  45  ,w   att34
07:17:48  46  ,mpm att35
07:17:48  47  ,mph att36
07:17:48  48  ,trend att37
07:17:48  49  FROM svm6142
07:17:48  50  ORDER BY ydate
07:17:48  51  /

Table created.

Elapsed: 00:00:04.70
07:17:53 SQL> 
07:17:53 SQL> -- rpt
07:17:53 SQL> 
07:17:53 SQL> SELECT
07:17:53   2  pair
07:17:53   3  ,trend
07:17:53   4  ,gatt
07:17:53   5  ,COUNT(pair)
07:17:53   6  ,AVG(g6)
07:17:53   7  FROM svm6162
07:17:53   8  GROUP BY pair,trend,gatt
07:17:53   9  ORDER BY pair,trend,gatt
07:17:53  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5107 -.00215479
aud_usd 	-1 up	      3804 .003757739
aud_usd 	-1		38
aud_usd 	 1 nup	      6672  -.0021444
aud_usd 	 1 up	      3629 .004094651
aud_usd 	 1		34

6 rows selected.

Elapsed: 00:00:00.02
07:17:53 SQL> 
07:17:53 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.21
07:17:53 SQL> CREATE TABLE modsrc COMPRESS AS
07:17:53   2  SELECT
07:17:53   3  pair
07:17:53   4  ,ydate
07:17:53   5  ,prdate
07:17:53   6  ,trend
07:17:53   7  ,g6
07:17:53   8  ,gatt
07:17:53   9  ,gattn
07:17:53  10  FROM svm6162
07:17:53  11  /

Table created.

Elapsed: 00:00:00.07
07:17:53 SQL> 
07:17:53 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
07:17:53 SQL> 
07:17:53 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
07:17:53 SQL> CREATE TABLE aud_ms610 COMPRESS AS
07:17:53   2  SELECT
07:17:53   3  ydate
07:17:53   4  ,trend aud_trend
07:17:53   5  ,g6    aud_g6
07:17:53   6  ,gatt  aud_gatt
07:17:53   7  ,gattn aud_gattn
07:17:53   8  FROM modsrc
07:17:53   9  /

Table created.

Elapsed: 00:00:00.05
07:17:54 SQL> 
07:17:54 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.14
07:17:54 SQL> 
07:17:54 SQL> -- I need a copy of the attributes:
07:17:54 SQL> 
07:17:54 SQL> 
07:17:54 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.04
07:17:54 SQL> CREATE TABLE aud_att COMPRESS AS
07:17:54   2  SELECT
07:17:54   3  ydate
07:17:54   4  ,att00 aud_att00
07:17:54   5  ,att01 aud_att01
07:17:54   6  ,att02 aud_att02
07:17:54   7  ,att03 aud_att03
07:17:54   8  ,att04 aud_att04
07:17:54   9  ,att05 aud_att05
07:17:54  10  ,att06 aud_att06
07:17:54  11  ,att07 aud_att07
07:17:54  12  ,att08 aud_att08
07:17:54  13  ,att09 aud_att09
07:17:54  14  ,att10 aud_att10
07:17:54  15  ,att11 aud_att11
07:17:54  16  ,att12 aud_att12
07:17:54  17  ,att13 aud_att13
07:17:54  18  ,att14 aud_att14
07:17:54  19  ,att15 aud_att15
07:17:54  20  ,att16 aud_att16
07:17:54  21  ,att17 aud_att17
07:17:54  22  ,att18 aud_att18
07:17:54  23  ,att19 aud_att19
07:17:54  24  ,att20 aud_att20
07:17:54  25  ,att21 aud_att21
07:17:54  26  ,att22 aud_att22
07:17:54  27  ,att23 aud_att23
07:17:54  28  ,att24 aud_att24
07:17:54  29  ,att25 aud_att25
07:17:54  30  ,att26 aud_att26
07:17:54  31  ,att27 aud_att27
07:17:54  32  ,att28 aud_att28
07:17:54  33  ,att29 aud_att29
07:17:54  34  ,att30 aud_att30
07:17:54  35  ,att31 aud_att31
07:17:54  36  ,att32 aud_att32
07:17:54  37  ,att33 aud_att33
07:17:54  38  ,att34 aud_att34
07:17:54  39  ,att35 aud_att35
07:17:54  40  ,att36 aud_att36
07:17:54  41  ,att37 aud_att37
07:17:54  42  FROM svm6162
07:17:54  43  /

Table created.

Elapsed: 00:00:00.16
07:17:54 SQL> 
07:17:54 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
07:17:54 SQL> 
07:17:54 SQL> -- rpt
07:17:54 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19284

Elapsed: 00:00:00.83
07:17:55 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19284

Elapsed: 00:00:00.01
07:17:55 SQL> 
07:17:55 SQL> --
07:17:55 SQL> -- gbp610.sql
07:17:55 SQL> --
07:17:55 SQL> 
07:17:55 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:17:55 SQL> 
07:17:55 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
07:17:56 SQL> 
07:17:56 SQL> -- I created di5min here:
07:17:56 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:17:56 SQL> 
07:17:56 SQL> CREATE OR REPLACE VIEW svm6102 AS
07:17:56   2  SELECT
07:17:56   3  pair
07:17:56   4  ,ydate
07:17:56   5  ,prdate
07:17:56   6  ,rownum rnum -- acts as t in my time-series
07:17:56   7  ,clse
07:17:56   8  -- Derive a bunch of attributes from clse, the latest price:
07:17:56   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
07:17:56  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
07:17:56  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
07:17:56  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
07:17:56  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
07:17:56  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
07:17:56  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
07:17:56  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
07:17:56  17  --
07:17:56  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
07:17:56  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
07:17:56  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
07:17:56  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
07:17:56  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
07:17:56  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
07:17:56  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
07:17:56  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
07:17:56  26  --
07:17:56  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
07:17:56  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
07:17:56  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
07:17:56  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
07:17:56  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
07:17:56  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
07:17:56  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
07:17:56  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
07:17:56  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
07:17:56  36  FROM di5min WHERE pair LIKE'%gbp%'
07:17:56  37  AND ydate > sysdate - 95
07:17:56  38  ORDER BY ydate
07:17:56  39  /

View created.

Elapsed: 00:00:00.05
07:17:56 SQL> 
07:17:56 SQL> -- rpt
07:17:56 SQL> 
07:17:56 SQL> SELECT
07:17:56   2  pair
07:17:56   3  ,COUNT(pair)
07:17:56   4  ,MIN(clse),MAX(clse)
07:17:56   5  ,MIN(avg6),MAX(avg6)
07:17:56   6  ,MIN(ydate),MAX(ydate)
07:17:56   7  FROM svm6102
07:17:56   8  GROUP BY pair
07:17:56   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19287   1.535825	   1.6295 1.53821404 1.62716986 2010-09-23 07:20:01 2010-12-27 07:15:00

Elapsed: 00:00:00.84
07:17:56 SQL> 
07:17:56 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
07:17:56 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.25
07:17:57 SQL> CREATE TABLE svm6122 COMPRESS AS
07:17:57   2  SELECT
07:17:57   3  pair
07:17:57   4  ,ydate
07:17:57   5  ,prdate
07:17:57   6  ,clse
07:17:57   7  -- g6 is important. I want to predict g6:
07:17:57   8  ,ld6 - clse g6
07:17:57   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
07:17:57  10  -- I want more attributes from the ones I derived above:
07:17:57  11  -- clse relation to moving-min
07:17:57  12  ,clse-min4  cm4
07:17:57  13  ,clse-min6  cm6
07:17:57  14  ,clse-min8  cm8
07:17:57  15  ,clse-min10 cm10
07:17:57  16  ,clse-min12 cm12
07:17:57  17  ,clse-min14 cm14
07:17:57  18  ,clse-min16 cm16
07:17:57  19  ,clse-min18 cm18
07:17:57  20  -- clse relation to moving-avg
07:17:57  21  ,clse-avg4  ca4
07:17:57  22  ,clse-avg6  ca6
07:17:57  23  ,clse-avg8  ca8
07:17:57  24  ,clse-avg10 ca10
07:17:57  25  ,clse-avg12 ca12
07:17:57  26  ,clse-avg14 ca14
07:17:57  27  ,clse-avg16 ca16
07:17:57  28  ,clse-avg18 ca18
07:17:57  29  -- clse relation to moving-max
07:17:57  30  ,clse-max4  cx4
07:17:57  31  ,clse-max6  cx6
07:17:57  32  ,clse-max8  cx8
07:17:57  33  ,clse-max10 cx10
07:17:57  34  ,clse-max12 cx12
07:17:57  35  ,clse-max14 cx14
07:17:57  36  ,clse-max16 cx16
07:17:57  37  ,clse-max18 cx18
07:17:57  38  -- Derive more attributes.
07:17:57  39  -- I want to use CORR() here to help SVM see the shape of the series.
07:17:57  40  -- But COVAR_POP is more stable:
07:17:57  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
07:17:57  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:17:57  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:17:57  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:17:57  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:17:57  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:17:57  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:17:57  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:17:57  49  -- Derive date related attributes:
07:17:57  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:17:57  51  ,0+TO_CHAR(ydate,'D')d
07:17:57  52  ,0+TO_CHAR(ydate,'W')w
07:17:57  53  -- mpm stands for minutes-past-midnight:
07:17:57  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:17:57  55  -- mph stands for minutes-past-hour:
07:17:57  56  ,0+TO_CHAR(ydate,'MI')mph
07:17:57  57  FROM svm6102
07:17:57  58  ORDER BY ydate
07:17:57  59  /

Table created.

Elapsed: 00:00:02.03
07:17:59 SQL> 
07:17:59 SQL> -- rpt
07:17:59 SQL> 
07:17:59 SQL> SELECT
07:17:59   2  pair
07:17:59   3  ,COUNT(pair)
07:17:59   4  ,MIN(clse),MAX(clse)
07:17:59   5  ,MIN(ydate),MAX(ydate)
07:17:59   6  FROM svm6122
07:17:59   7  GROUP BY pair
07:17:59   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19287   1.535825	   1.6295 2010-09-23 07:20:01 2010-12-27 07:15:00

Elapsed: 00:00:00.04
07:17:59 SQL> 
07:17:59 SQL> -- Prepare for derivation of NTILE based params:
07:17:59 SQL> 
07:17:59 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.17
07:17:59 SQL> CREATE TABLE svm6142 COMPRESS AS
07:17:59   2  SELECT
07:17:59   3  pair
07:17:59   4  ,ydate
07:17:59   5  ,prdate
07:17:59   6  ,clse
07:17:59   7  ,g6
07:17:59   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
07:17:59   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
07:17:59  10  ,CASE WHEN trend IS NULL THEN 1
07:17:59  11  	    WHEN trend =0      THEN 1
07:17:59  12  	    ELSE trend END trend
07:17:59  13  ,cm4
07:17:59  14  ,cm6
07:17:59  15  ,cm8
07:17:59  16  ,cm10
07:17:59  17  ,cm12
07:17:59  18  ,cm14
07:17:59  19  ,cm16
07:17:59  20  ,cm18
07:17:59  21  --
07:17:59  22  ,ca4
07:17:59  23  ,ca6
07:17:59  24  ,ca8
07:17:59  25  ,ca10
07:17:59  26  ,ca12
07:17:59  27  ,ca14
07:17:59  28  ,ca16
07:17:59  29  ,ca18
07:17:59  30  --
07:17:59  31  ,cx4
07:17:59  32  ,cx6
07:17:59  33  ,cx8
07:17:59  34  ,cx10
07:17:59  35  ,cx12
07:17:59  36  ,cx14
07:17:59  37  ,cx16
07:17:59  38  ,cx18
07:17:59  39  --
07:17:59  40  ,crr4
07:17:59  41  ,crr6
07:17:59  42  ,crr8
07:17:59  43  ,crr10
07:17:59  44  ,crr12
07:17:59  45  ,crr14
07:17:59  46  ,crr16
07:17:59  47  ,crr18
07:17:59  48  --
07:17:59  49  ,hh
07:17:59  50  ,d
07:17:59  51  ,w
07:17:59  52  ,mpm
07:17:59  53  ,mph
07:17:59  54  FROM svm6122
07:17:59  55  ORDER BY ydate
07:17:59  56  /

Table created.

Elapsed: 00:00:00.91
07:18:00 SQL> 
07:18:00 SQL> -- rpt
07:18:00 SQL> 
07:18:00 SQL> SELECT
07:18:00   2  pair
07:18:00   3  ,trend
07:18:00   4  ,gatt
07:18:00   5  ,COUNT(pair)
07:18:00   6  ,AVG(g6)
07:18:00   7  FROM svm6142
07:18:00   8  GROUP BY pair,trend,gatt
07:18:00   9  ORDER BY pair,trend,gatt
07:18:00  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6227 -.00254098
gbp_usd 	-1 up	      3401 .004337596
gbp_usd 	-1		55
gbp_usd 	 1 nup	      6125  -.0026076
gbp_usd 	 1 up	      3462 .004403264
gbp_usd 	 1		17

6 rows selected.

Elapsed: 00:00:00.04
07:18:00 SQL> 
07:18:00 SQL> 
07:18:00 SQL> -- Derive NTILE based params:
07:18:00 SQL> 
07:18:00 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
07:18:00 SQL> CREATE TABLE svm6162 COMPRESS AS
07:18:00   2  SELECT
07:18:00   3  pair
07:18:00   4  ,ydate
07:18:00   5  ,prdate
07:18:00   6  ,clse
07:18:00   7  ,g6
07:18:00   8  ,gatt
07:18:00   9  ,gattn
07:18:00  10  ,trend
07:18:00  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
07:18:00  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
07:18:00  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
07:18:00  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
07:18:00  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
07:18:00  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
07:18:00  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
07:18:00  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
07:18:00  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
07:18:00  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
07:18:00  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
07:18:00  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
07:18:00  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
07:18:00  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
07:18:00  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
07:18:00  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
07:18:00  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
07:18:00  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
07:18:00  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
07:18:00  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
07:18:00  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
07:18:00  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
07:18:00  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
07:18:00  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
07:18:00  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
07:18:00  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
07:18:00  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
07:18:00  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
07:18:00  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
07:18:00  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
07:18:00  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
07:18:00  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
07:18:00  43  ,hh  att32
07:18:00  44  ,d   att33
07:18:00  45  ,w   att34
07:18:00  46  ,mpm att35
07:18:00  47  ,mph att36
07:18:00  48  ,trend att37
07:18:00  49  FROM svm6142
07:18:00  50  ORDER BY ydate
07:18:00  51  /

Table created.

Elapsed: 00:00:04.69
07:18:05 SQL> 
07:18:05 SQL> -- rpt
07:18:05 SQL> 
07:18:05 SQL> SELECT
07:18:05   2  pair
07:18:05   3  ,trend
07:18:05   4  ,gatt
07:18:05   5  ,COUNT(pair)
07:18:05   6  ,AVG(g6)
07:18:05   7  FROM svm6162
07:18:05   8  GROUP BY pair,trend,gatt
07:18:05   9  ORDER BY pair,trend,gatt
07:18:05  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6227 -.00254098
gbp_usd 	-1 up	      3401 .004337596
gbp_usd 	-1		55
gbp_usd 	 1 nup	      6125  -.0026076
gbp_usd 	 1 up	      3462 .004403264
gbp_usd 	 1		17

6 rows selected.

Elapsed: 00:00:00.04
07:18:05 SQL> 
07:18:05 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.21
07:18:05 SQL> CREATE TABLE modsrc COMPRESS AS
07:18:05   2  SELECT
07:18:05   3  pair
07:18:05   4  ,ydate
07:18:05   5  ,prdate
07:18:05   6  ,trend
07:18:05   7  ,g6
07:18:05   8  ,gatt
07:18:05   9  ,gattn
07:18:05  10  FROM svm6162
07:18:05  11  /

Table created.

Elapsed: 00:00:00.10
07:18:05 SQL> 
07:18:05 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
07:18:05 SQL> 
07:18:05 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.03
07:18:05 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
07:18:05   2  SELECT
07:18:05   3  ydate
07:18:05   4  ,trend gbp_trend
07:18:05   5  ,g6    gbp_g6
07:18:05   6  ,gatt  gbp_gatt
07:18:05   7  ,gattn gbp_gattn
07:18:05   8  FROM modsrc
07:18:05   9  /

Table created.

Elapsed: 00:00:00.07
07:18:05 SQL> 
07:18:05 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
07:18:05 SQL> 
07:18:05 SQL> -- I need a copy of the attributes:
07:18:05 SQL> 
07:18:05 SQL> 
07:18:05 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.04
07:18:06 SQL> CREATE TABLE gbp_att COMPRESS AS
07:18:06   2  SELECT
07:18:06   3  ydate
07:18:06   4  ,att00 gbp_att00
07:18:06   5  ,att01 gbp_att01
07:18:06   6  ,att02 gbp_att02
07:18:06   7  ,att03 gbp_att03
07:18:06   8  ,att04 gbp_att04
07:18:06   9  ,att05 gbp_att05
07:18:06  10  ,att06 gbp_att06
07:18:06  11  ,att07 gbp_att07
07:18:06  12  ,att08 gbp_att08
07:18:06  13  ,att09 gbp_att09
07:18:06  14  ,att10 gbp_att10
07:18:06  15  ,att11 gbp_att11
07:18:06  16  ,att12 gbp_att12
07:18:06  17  ,att13 gbp_att13
07:18:06  18  ,att14 gbp_att14
07:18:06  19  ,att15 gbp_att15
07:18:06  20  ,att16 gbp_att16
07:18:06  21  ,att17 gbp_att17
07:18:06  22  ,att18 gbp_att18
07:18:06  23  ,att19 gbp_att19
07:18:06  24  ,att20 gbp_att20
07:18:06  25  ,att21 gbp_att21
07:18:06  26  ,att22 gbp_att22
07:18:06  27  ,att23 gbp_att23
07:18:06  28  ,att24 gbp_att24
07:18:06  29  ,att25 gbp_att25
07:18:06  30  ,att26 gbp_att26
07:18:06  31  ,att27 gbp_att27
07:18:06  32  ,att28 gbp_att28
07:18:06  33  ,att29 gbp_att29
07:18:06  34  ,att30 gbp_att30
07:18:06  35  ,att31 gbp_att31
07:18:06  36  ,att32 gbp_att32
07:18:06  37  ,att33 gbp_att33
07:18:06  38  ,att34 gbp_att34
07:18:06  39  ,att35 gbp_att35
07:18:06  40  ,att36 gbp_att36
07:18:06  41  ,att37 gbp_att37
07:18:06  42  FROM svm6162
07:18:06  43  /

Table created.

Elapsed: 00:00:00.17
07:18:06 SQL> 
07:18:06 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
07:18:06 SQL> 
07:18:06 SQL> -- rpt
07:18:06 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19287

Elapsed: 00:00:00.84
07:18:07 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19287

Elapsed: 00:00:00.00
07:18:07 SQL> 
07:18:07 SQL> --
07:18:07 SQL> -- jpy610.sql
07:18:07 SQL> --
07:18:07 SQL> 
07:18:07 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:18:07 SQL> 
07:18:07 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.44
07:18:07 SQL> 
07:18:07 SQL> -- I created di5min here:
07:18:07 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:18:07 SQL> 
07:18:07 SQL> CREATE OR REPLACE VIEW svm6102 AS
07:18:07   2  SELECT
07:18:07   3  pair
07:18:07   4  ,ydate
07:18:07   5  ,prdate
07:18:07   6  ,rownum rnum -- acts as t in my time-series
07:18:07   7  ,clse
07:18:07   8  -- Derive a bunch of attributes from clse, the latest price:
07:18:07   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
07:18:07  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
07:18:07  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
07:18:07  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
07:18:07  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
07:18:07  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
07:18:07  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
07:18:07  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
07:18:07  17  --
07:18:07  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
07:18:07  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
07:18:07  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
07:18:07  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
07:18:07  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
07:18:07  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
07:18:07  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
07:18:07  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
07:18:07  26  --
07:18:07  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
07:18:07  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
07:18:07  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
07:18:07  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
07:18:07  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
07:18:07  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
07:18:07  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
07:18:07  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
07:18:07  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
07:18:07  36  FROM di5min WHERE pair LIKE'%jpy%'
07:18:07  37  AND ydate > sysdate - 95
07:18:07  38  ORDER BY ydate
07:18:07  39  /

View created.

Elapsed: 00:00:00.04
07:18:07 SQL> 
07:18:07 SQL> -- rpt
07:18:07 SQL> 
07:18:07 SQL> SELECT
07:18:07   2  pair
07:18:07   3  ,COUNT(pair)
07:18:07   4  ,MIN(clse),MAX(clse)
07:18:07   5  ,MIN(avg6),MAX(avg6)
07:18:07   6  ,MIN(ydate),MAX(ydate)
07:18:07   7  FROM svm6102
07:18:07   8  GROUP BY pair
07:18:07   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19286	 80.25	     85.2 80.3595205 84.7693836 2010-09-23 07:20:01 2010-12-27 07:15:00

Elapsed: 00:00:00.88
07:18:08 SQL> 
07:18:08 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
07:18:08 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.21
07:18:09 SQL> CREATE TABLE svm6122 COMPRESS AS
07:18:09   2  SELECT
07:18:09   3  pair
07:18:09   4  ,ydate
07:18:09   5  ,prdate
07:18:09   6  ,clse
07:18:09   7  -- g6 is important. I want to predict g6:
07:18:09   8  ,ld6 - clse g6
07:18:09   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
07:18:09  10  -- I want more attributes from the ones I derived above:
07:18:09  11  -- clse relation to moving-min
07:18:09  12  ,clse-min4  cm4
07:18:09  13  ,clse-min6  cm6
07:18:09  14  ,clse-min8  cm8
07:18:09  15  ,clse-min10 cm10
07:18:09  16  ,clse-min12 cm12
07:18:09  17  ,clse-min14 cm14
07:18:09  18  ,clse-min16 cm16
07:18:09  19  ,clse-min18 cm18
07:18:09  20  -- clse relation to moving-avg
07:18:09  21  ,clse-avg4  ca4
07:18:09  22  ,clse-avg6  ca6
07:18:09  23  ,clse-avg8  ca8
07:18:09  24  ,clse-avg10 ca10
07:18:09  25  ,clse-avg12 ca12
07:18:09  26  ,clse-avg14 ca14
07:18:09  27  ,clse-avg16 ca16
07:18:09  28  ,clse-avg18 ca18
07:18:09  29  -- clse relation to moving-max
07:18:09  30  ,clse-max4  cx4
07:18:09  31  ,clse-max6  cx6
07:18:09  32  ,clse-max8  cx8
07:18:09  33  ,clse-max10 cx10
07:18:09  34  ,clse-max12 cx12
07:18:09  35  ,clse-max14 cx14
07:18:09  36  ,clse-max16 cx16
07:18:09  37  ,clse-max18 cx18
07:18:09  38  -- Derive more attributes.
07:18:09  39  -- I want to use CORR() here to help SVM see the shape of the series.
07:18:09  40  -- But COVAR_POP is more stable:
07:18:09  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
07:18:09  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:18:09  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:18:09  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:18:09  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:18:09  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:18:09  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:18:09  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:18:09  49  -- Derive date related attributes:
07:18:09  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:18:09  51  ,0+TO_CHAR(ydate,'D')d
07:18:09  52  ,0+TO_CHAR(ydate,'W')w
07:18:09  53  -- mpm stands for minutes-past-midnight:
07:18:09  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:18:09  55  -- mph stands for minutes-past-hour:
07:18:09  56  ,0+TO_CHAR(ydate,'MI')mph
07:18:09  57  FROM svm6102
07:18:09  58  ORDER BY ydate
07:18:09  59  /

Table created.

Elapsed: 00:00:01.99
07:18:11 SQL> 
07:18:11 SQL> -- rpt
07:18:11 SQL> 
07:18:11 SQL> SELECT
07:18:11   2  pair
07:18:11   3  ,COUNT(pair)
07:18:11   4  ,MIN(clse),MAX(clse)
07:18:11   5  ,MIN(ydate),MAX(ydate)
07:18:11   6  FROM svm6122
07:18:11   7  GROUP BY pair
07:18:11   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19286	 80.25	     85.2 2010-09-23 07:20:01 2010-12-27 07:15:00

Elapsed: 00:00:00.04
07:18:11 SQL> 
07:18:11 SQL> -- Prepare for derivation of NTILE based params:
07:18:11 SQL> 
07:18:11 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
07:18:11 SQL> CREATE TABLE svm6142 COMPRESS AS
07:18:11   2  SELECT
07:18:11   3  pair
07:18:11   4  ,ydate
07:18:11   5  ,prdate
07:18:11   6  ,clse
07:18:11   7  ,g6
07:18:11   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
07:18:11   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
07:18:11  10  ,CASE WHEN trend IS NULL THEN 1
07:18:11  11  	    WHEN trend =0      THEN 1
07:18:11  12  	    ELSE trend END trend
07:18:11  13  ,cm4
07:18:11  14  ,cm6
07:18:11  15  ,cm8
07:18:11  16  ,cm10
07:18:11  17  ,cm12
07:18:11  18  ,cm14
07:18:11  19  ,cm16
07:18:11  20  ,cm18
07:18:11  21  --
07:18:11  22  ,ca4
07:18:11  23  ,ca6
07:18:11  24  ,ca8
07:18:11  25  ,ca10
07:18:11  26  ,ca12
07:18:11  27  ,ca14
07:18:11  28  ,ca16
07:18:11  29  ,ca18
07:18:11  30  --
07:18:11  31  ,cx4
07:18:11  32  ,cx6
07:18:11  33  ,cx8
07:18:11  34  ,cx10
07:18:11  35  ,cx12
07:18:11  36  ,cx14
07:18:11  37  ,cx16
07:18:11  38  ,cx18
07:18:11  39  --
07:18:11  40  ,crr4
07:18:11  41  ,crr6
07:18:11  42  ,crr8
07:18:11  43  ,crr10
07:18:11  44  ,crr12
07:18:11  45  ,crr14
07:18:11  46  ,crr16
07:18:11  47  ,crr18
07:18:11  48  --
07:18:11  49  ,hh
07:18:11  50  ,d
07:18:11  51  ,w
07:18:11  52  ,mpm
07:18:11  53  ,mph
07:18:11  54  FROM svm6122
07:18:11  55  ORDER BY ydate
07:18:11  56  /

Table created.

Elapsed: 00:00:00.36
07:18:11 SQL> 
07:18:11 SQL> -- rpt
07:18:11 SQL> 
07:18:11 SQL> SELECT
07:18:11   2  pair
07:18:11   3  ,trend
07:18:11   4  ,gatt
07:18:11   5  ,COUNT(pair)
07:18:11   6  ,AVG(g6)
07:18:11   7  FROM svm6142
07:18:11   8  GROUP BY pair,trend,gatt
07:18:11   9  ORDER BY pair,trend,gatt
07:18:11  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5050 -.15641657
usd_jpy 	-1 up	      4931 .160318261
usd_jpy 	-1		36
usd_jpy 	 1 nup	      5074 -.15979743
usd_jpy 	 1 up	      4159 .167287565
usd_jpy 	 1		36

6 rows selected.

Elapsed: 00:00:00.04
07:18:11 SQL> 
07:18:11 SQL> 
07:18:11 SQL> -- Derive NTILE based params:
07:18:11 SQL> 
07:18:11 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.18
07:18:11 SQL> CREATE TABLE svm6162 COMPRESS AS
07:18:11   2  SELECT
07:18:11   3  pair
07:18:11   4  ,ydate
07:18:11   5  ,prdate
07:18:11   6  ,clse
07:18:11   7  ,g6
07:18:11   8  ,gatt
07:18:11   9  ,gattn
07:18:11  10  ,trend
07:18:11  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
07:18:11  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
07:18:11  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
07:18:11  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
07:18:11  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
07:18:11  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
07:18:11  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
07:18:11  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
07:18:11  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
07:18:11  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
07:18:11  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
07:18:11  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
07:18:11  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
07:18:11  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
07:18:11  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
07:18:11  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
07:18:11  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
07:18:11  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
07:18:11  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
07:18:11  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
07:18:11  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
07:18:11  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
07:18:11  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
07:18:11  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
07:18:11  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
07:18:11  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
07:18:11  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
07:18:11  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
07:18:11  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
07:18:11  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
07:18:11  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
07:18:11  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
07:18:11  43  ,hh  att32
07:18:11  44  ,d   att33
07:18:11  45  ,w   att34
07:18:11  46  ,mpm att35
07:18:11  47  ,mph att36
07:18:11  48  ,trend att37
07:18:11  49  FROM svm6142
07:18:11  50  ORDER BY ydate
07:18:11  51  /

Table created.

Elapsed: 00:00:04.69
07:18:16 SQL> 
07:18:16 SQL> -- rpt
07:18:16 SQL> 
07:18:16 SQL> SELECT
07:18:16   2  pair
07:18:16   3  ,trend
07:18:16   4  ,gatt
07:18:16   5  ,COUNT(pair)
07:18:16   6  ,AVG(g6)
07:18:16   7  FROM svm6162
07:18:16   8  GROUP BY pair,trend,gatt
07:18:16   9  ORDER BY pair,trend,gatt
07:18:16  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5050 -.15641657
usd_jpy 	-1 up	      4931 .160318261
usd_jpy 	-1		36
usd_jpy 	 1 nup	      5074 -.15979743
usd_jpy 	 1 up	      4159 .167287565
usd_jpy 	 1		36

6 rows selected.

Elapsed: 00:00:00.04
07:18:16 SQL> 
07:18:16 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
07:18:16 SQL> CREATE TABLE modsrc COMPRESS AS
07:18:16   2  SELECT
07:18:16   3  pair
07:18:16   4  ,ydate
07:18:16   5  ,prdate
07:18:16   6  ,trend
07:18:16   7  ,g6
07:18:16   8  ,gatt
07:18:16   9  ,gattn
07:18:16  10  FROM svm6162
07:18:16  11  /

Table created.

Elapsed: 00:00:00.08
07:18:16 SQL> 
07:18:16 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
07:18:17 SQL> 
07:18:17 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
07:18:17 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
07:18:17   2  SELECT
07:18:17   3  ydate
07:18:17   4  ,trend jpy_trend
07:18:17   5  ,g6    jpy_g6
07:18:17   6  ,gatt  jpy_gatt
07:18:17   7  ,gattn jpy_gattn
07:18:17   8  FROM modsrc
07:18:17   9  /

Table created.

Elapsed: 00:00:00.07
07:18:17 SQL> 
07:18:17 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
07:18:17 SQL> 
07:18:17 SQL> -- I need a copy of the attributes:
07:18:17 SQL> 
07:18:17 SQL> 
07:18:17 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.05
07:18:17 SQL> CREATE TABLE jpy_att COMPRESS AS
07:18:17   2  SELECT
07:18:17   3  ydate
07:18:17   4  ,att00 jpy_att00
07:18:17   5  ,att01 jpy_att01
07:18:17   6  ,att02 jpy_att02
07:18:17   7  ,att03 jpy_att03
07:18:17   8  ,att04 jpy_att04
07:18:17   9  ,att05 jpy_att05
07:18:17  10  ,att06 jpy_att06
07:18:17  11  ,att07 jpy_att07
07:18:17  12  ,att08 jpy_att08
07:18:17  13  ,att09 jpy_att09
07:18:17  14  ,att10 jpy_att10
07:18:17  15  ,att11 jpy_att11
07:18:17  16  ,att12 jpy_att12
07:18:17  17  ,att13 jpy_att13
07:18:17  18  ,att14 jpy_att14
07:18:17  19  ,att15 jpy_att15
07:18:17  20  ,att16 jpy_att16
07:18:17  21  ,att17 jpy_att17
07:18:17  22  ,att18 jpy_att18
07:18:17  23  ,att19 jpy_att19
07:18:17  24  ,att20 jpy_att20
07:18:17  25  ,att21 jpy_att21
07:18:17  26  ,att22 jpy_att22
07:18:17  27  ,att23 jpy_att23
07:18:17  28  ,att24 jpy_att24
07:18:17  29  ,att25 jpy_att25
07:18:17  30  ,att26 jpy_att26
07:18:17  31  ,att27 jpy_att27
07:18:17  32  ,att28 jpy_att28
07:18:17  33  ,att29 jpy_att29
07:18:17  34  ,att30 jpy_att30
07:18:17  35  ,att31 jpy_att31
07:18:17  36  ,att32 jpy_att32
07:18:17  37  ,att33 jpy_att33
07:18:17  38  ,att34 jpy_att34
07:18:17  39  ,att35 jpy_att35
07:18:17  40  ,att36 jpy_att36
07:18:17  41  ,att37 jpy_att37
07:18:17  42  FROM svm6162
07:18:17  43  /

Table created.

Elapsed: 00:00:00.16
07:18:17 SQL> 
07:18:17 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.49
07:18:18 SQL> 
07:18:18 SQL> -- rpt
07:18:18 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19286

Elapsed: 00:00:00.88
07:18:18 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19286

Elapsed: 00:00:00.00
07:18:18 SQL> 
07:18:18 SQL> --
07:18:18 SQL> -- cad610.sql
07:18:18 SQL> --
07:18:18 SQL> 
07:18:18 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:18:18 SQL> 
07:18:18 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
07:18:19 SQL> 
07:18:19 SQL> -- I created di5min here:
07:18:19 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:18:19 SQL> 
07:18:19 SQL> CREATE OR REPLACE VIEW svm6102 AS
07:18:19   2  SELECT
07:18:19   3  pair
07:18:19   4  ,ydate
07:18:19   5  ,prdate
07:18:19   6  ,rownum rnum -- acts as t in my time-series
07:18:19   7  ,clse
07:18:19   8  -- Derive a bunch of attributes from clse, the latest price:
07:18:19   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
07:18:19  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
07:18:19  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
07:18:19  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
07:18:19  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
07:18:19  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
07:18:19  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
07:18:19  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
07:18:19  17  --
07:18:19  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
07:18:19  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
07:18:19  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
07:18:19  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
07:18:19  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
07:18:19  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
07:18:19  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
07:18:19  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
07:18:19  26  --
07:18:19  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
07:18:19  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
07:18:19  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
07:18:19  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
07:18:19  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
07:18:19  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
07:18:19  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
07:18:19  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
07:18:19  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
07:18:19  36  FROM di5min WHERE pair LIKE'%cad%'
07:18:19  37  AND ydate > sysdate - 95
07:18:19  38  ORDER BY ydate
07:18:19  39  /

View created.

Elapsed: 00:00:00.05
07:18:19 SQL> 
07:18:19 SQL> -- rpt
07:18:19 SQL> 
07:18:19 SQL> SELECT
07:18:19   2  pair
07:18:19   3  ,COUNT(pair)
07:18:19   4  ,MIN(clse),MAX(clse)
07:18:19   5  ,MIN(avg6),MAX(avg6)
07:18:19   6  ,MIN(ydate),MAX(ydate)
07:18:19   7  FROM svm6102
07:18:19   8  GROUP BY pair
07:18:19   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19284	 .9981	   1.0371 .999404795 1.03438904 2010-09-23 07:20:01 2010-12-27 07:15:00

Elapsed: 00:00:00.80
07:18:20 SQL> 
07:18:20 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
07:18:20 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.18
07:18:20 SQL> CREATE TABLE svm6122 COMPRESS AS
07:18:20   2  SELECT
07:18:20   3  pair
07:18:20   4  ,ydate
07:18:20   5  ,prdate
07:18:20   6  ,clse
07:18:20   7  -- g6 is important. I want to predict g6:
07:18:20   8  ,ld6 - clse g6
07:18:20   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
07:18:20  10  -- I want more attributes from the ones I derived above:
07:18:20  11  -- clse relation to moving-min
07:18:20  12  ,clse-min4  cm4
07:18:20  13  ,clse-min6  cm6
07:18:20  14  ,clse-min8  cm8
07:18:20  15  ,clse-min10 cm10
07:18:20  16  ,clse-min12 cm12
07:18:20  17  ,clse-min14 cm14
07:18:20  18  ,clse-min16 cm16
07:18:20  19  ,clse-min18 cm18
07:18:20  20  -- clse relation to moving-avg
07:18:20  21  ,clse-avg4  ca4
07:18:20  22  ,clse-avg6  ca6
07:18:20  23  ,clse-avg8  ca8
07:18:20  24  ,clse-avg10 ca10
07:18:20  25  ,clse-avg12 ca12
07:18:20  26  ,clse-avg14 ca14
07:18:20  27  ,clse-avg16 ca16
07:18:20  28  ,clse-avg18 ca18
07:18:20  29  -- clse relation to moving-max
07:18:20  30  ,clse-max4  cx4
07:18:20  31  ,clse-max6  cx6
07:18:20  32  ,clse-max8  cx8
07:18:20  33  ,clse-max10 cx10
07:18:20  34  ,clse-max12 cx12
07:18:20  35  ,clse-max14 cx14
07:18:20  36  ,clse-max16 cx16
07:18:20  37  ,clse-max18 cx18
07:18:20  38  -- Derive more attributes.
07:18:20  39  -- I want to use CORR() here to help SVM see the shape of the series.
07:18:20  40  -- But COVAR_POP is more stable:
07:18:20  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
07:18:20  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:18:20  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:18:20  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:18:20  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:18:20  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:18:20  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:18:20  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:18:20  49  -- Derive date related attributes:
07:18:20  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:18:20  51  ,0+TO_CHAR(ydate,'D')d
07:18:20  52  ,0+TO_CHAR(ydate,'W')w
07:18:20  53  -- mpm stands for minutes-past-midnight:
07:18:20  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:18:20  55  -- mph stands for minutes-past-hour:
07:18:20  56  ,0+TO_CHAR(ydate,'MI')mph
07:18:20  57  FROM svm6102
07:18:20  58  ORDER BY ydate
07:18:20  59  /

Table created.

Elapsed: 00:00:01.99
07:18:22 SQL> 
07:18:22 SQL> -- rpt
07:18:22 SQL> 
07:18:22 SQL> SELECT
07:18:22   2  pair
07:18:22   3  ,COUNT(pair)
07:18:22   4  ,MIN(clse),MAX(clse)
07:18:22   5  ,MIN(ydate),MAX(ydate)
07:18:22   6  FROM svm6122
07:18:22   7  GROUP BY pair
07:18:22   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19284	 .9981	   1.0371 2010-09-23 07:20:01 2010-12-27 07:15:00

Elapsed: 00:00:00.04
07:18:22 SQL> 
07:18:22 SQL> -- Prepare for derivation of NTILE based params:
07:18:22 SQL> 
07:18:22 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
07:18:22 SQL> CREATE TABLE svm6142 COMPRESS AS
07:18:22   2  SELECT
07:18:22   3  pair
07:18:22   4  ,ydate
07:18:22   5  ,prdate
07:18:22   6  ,clse
07:18:22   7  ,g6
07:18:22   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
07:18:22   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
07:18:22  10  ,CASE WHEN trend IS NULL THEN 1
07:18:22  11  	    WHEN trend =0      THEN 1
07:18:22  12  	    ELSE trend END trend
07:18:22  13  ,cm4
07:18:22  14  ,cm6
07:18:22  15  ,cm8
07:18:22  16  ,cm10
07:18:22  17  ,cm12
07:18:22  18  ,cm14
07:18:22  19  ,cm16
07:18:22  20  ,cm18
07:18:22  21  --
07:18:22  22  ,ca4
07:18:22  23  ,ca6
07:18:22  24  ,ca8
07:18:22  25  ,ca10
07:18:22  26  ,ca12
07:18:22  27  ,ca14
07:18:22  28  ,ca16
07:18:22  29  ,ca18
07:18:22  30  --
07:18:22  31  ,cx4
07:18:22  32  ,cx6
07:18:22  33  ,cx8
07:18:22  34  ,cx10
07:18:22  35  ,cx12
07:18:22  36  ,cx14
07:18:22  37  ,cx16
07:18:22  38  ,cx18
07:18:22  39  --
07:18:22  40  ,crr4
07:18:22  41  ,crr6
07:18:22  42  ,crr8
07:18:22  43  ,crr10
07:18:22  44  ,crr12
07:18:22  45  ,crr14
07:18:22  46  ,crr16
07:18:22  47  ,crr18
07:18:22  48  --
07:18:22  49  ,hh
07:18:22  50  ,d
07:18:22  51  ,w
07:18:22  52  ,mpm
07:18:22  53  ,mph
07:18:22  54  FROM svm6122
07:18:22  55  ORDER BY ydate
07:18:22  56  /

Table created.

Elapsed: 00:00:00.35
07:18:22 SQL> 
07:18:22 SQL> -- rpt
07:18:22 SQL> 
07:18:22 SQL> SELECT
07:18:22   2  pair
07:18:22   3  ,trend
07:18:22   4  ,gatt
07:18:22   5  ,COUNT(pair)
07:18:22   6  ,AVG(g6)
07:18:22   7  FROM svm6142
07:18:22   8  GROUP BY pair,trend,gatt
07:18:22   9  ORDER BY pair,trend,gatt
07:18:22  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7132 -.00136484
usd_cad 	-1 up	      3057 .003140499
usd_cad 	-1		41
usd_cad 	 1 nup	      6529 -.00163852
usd_cad 	 1 up	      2494 .003599056
usd_cad 	 1		31

6 rows selected.

Elapsed: 00:00:00.06
07:18:22 SQL> 
07:18:22 SQL> 
07:18:22 SQL> -- Derive NTILE based params:
07:18:22 SQL> 
07:18:22 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.19
07:18:23 SQL> CREATE TABLE svm6162 COMPRESS AS
07:18:23   2  SELECT
07:18:23   3  pair
07:18:23   4  ,ydate
07:18:23   5  ,prdate
07:18:23   6  ,clse
07:18:23   7  ,g6
07:18:23   8  ,gatt
07:18:23   9  ,gattn
07:18:23  10  ,trend
07:18:23  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
07:18:23  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
07:18:23  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
07:18:23  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
07:18:23  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
07:18:23  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
07:18:23  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
07:18:23  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
07:18:23  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
07:18:23  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
07:18:23  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
07:18:23  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
07:18:23  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
07:18:23  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
07:18:23  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
07:18:23  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
07:18:23  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
07:18:23  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
07:18:23  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
07:18:23  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
07:18:23  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
07:18:23  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
07:18:23  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
07:18:23  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
07:18:23  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
07:18:23  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
07:18:23  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
07:18:23  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
07:18:23  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
07:18:23  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
07:18:23  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
07:18:23  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
07:18:23  43  ,hh  att32
07:18:23  44  ,d   att33
07:18:23  45  ,w   att34
07:18:23  46  ,mpm att35
07:18:23  47  ,mph att36
07:18:23  48  ,trend att37
07:18:23  49  FROM svm6142
07:18:23  50  ORDER BY ydate
07:18:23  51  /

Table created.

Elapsed: 00:00:04.66
07:18:27 SQL> 
07:18:27 SQL> -- rpt
07:18:27 SQL> 
07:18:27 SQL> SELECT
07:18:27   2  pair
07:18:27   3  ,trend
07:18:27   4  ,gatt
07:18:27   5  ,COUNT(pair)
07:18:27   6  ,AVG(g6)
07:18:27   7  FROM svm6162
07:18:27   8  GROUP BY pair,trend,gatt
07:18:27   9  ORDER BY pair,trend,gatt
07:18:27  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7132 -.00136484
usd_cad 	-1 up	      3057 .003140499
usd_cad 	-1		41
usd_cad 	 1 nup	      6529 -.00163852
usd_cad 	 1 up	      2494 .003599056
usd_cad 	 1		31

6 rows selected.

Elapsed: 00:00:00.03
07:18:27 SQL> 
07:18:27 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
07:18:27 SQL> CREATE TABLE modsrc COMPRESS AS
07:18:27   2  SELECT
07:18:27   3  pair
07:18:27   4  ,ydate
07:18:27   5  ,prdate
07:18:27   6  ,trend
07:18:27   7  ,g6
07:18:27   8  ,gatt
07:18:27   9  ,gattn
07:18:27  10  FROM svm6162
07:18:27  11  /

Table created.

Elapsed: 00:00:00.08
07:18:28 SQL> 
07:18:28 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
07:18:28 SQL> 
07:18:28 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.03
07:18:28 SQL> CREATE TABLE cad_ms610 COMPRESS AS
07:18:28   2  SELECT
07:18:28   3  ydate
07:18:28   4  ,trend cad_trend
07:18:28   5  ,g6    cad_g6
07:18:28   6  ,gatt  cad_gatt
07:18:28   7  ,gattn cad_gattn
07:18:28   8  FROM modsrc
07:18:28   9  /

Table created.

Elapsed: 00:00:00.05
07:18:28 SQL> 
07:18:28 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
07:18:28 SQL> 
07:18:28 SQL> -- I need a copy of the attributes:
07:18:28 SQL> 
07:18:28 SQL> 
07:18:28 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.05
07:18:28 SQL> CREATE TABLE cad_att COMPRESS AS
07:18:28   2  SELECT
07:18:28   3  ydate
07:18:28   4  ,att00 cad_att00
07:18:28   5  ,att01 cad_att01
07:18:28   6  ,att02 cad_att02
07:18:28   7  ,att03 cad_att03
07:18:28   8  ,att04 cad_att04
07:18:28   9  ,att05 cad_att05
07:18:28  10  ,att06 cad_att06
07:18:28  11  ,att07 cad_att07
07:18:28  12  ,att08 cad_att08
07:18:28  13  ,att09 cad_att09
07:18:28  14  ,att10 cad_att10
07:18:28  15  ,att11 cad_att11
07:18:28  16  ,att12 cad_att12
07:18:28  17  ,att13 cad_att13
07:18:28  18  ,att14 cad_att14
07:18:28  19  ,att15 cad_att15
07:18:28  20  ,att16 cad_att16
07:18:28  21  ,att17 cad_att17
07:18:28  22  ,att18 cad_att18
07:18:28  23  ,att19 cad_att19
07:18:28  24  ,att20 cad_att20
07:18:28  25  ,att21 cad_att21
07:18:28  26  ,att22 cad_att22
07:18:28  27  ,att23 cad_att23
07:18:28  28  ,att24 cad_att24
07:18:28  29  ,att25 cad_att25
07:18:28  30  ,att26 cad_att26
07:18:28  31  ,att27 cad_att27
07:18:28  32  ,att28 cad_att28
07:18:28  33  ,att29 cad_att29
07:18:28  34  ,att30 cad_att30
07:18:28  35  ,att31 cad_att31
07:18:28  36  ,att32 cad_att32
07:18:28  37  ,att33 cad_att33
07:18:28  38  ,att34 cad_att34
07:18:28  39  ,att35 cad_att35
07:18:28  40  ,att36 cad_att36
07:18:28  41  ,att37 cad_att37
07:18:28  42  FROM svm6162
07:18:28  43  /

Table created.

Elapsed: 00:00:00.21
07:18:28 SQL> 
07:18:28 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
07:18:29 SQL> 
07:18:29 SQL> -- rpt
07:18:29 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19284

Elapsed: 00:00:00.81
07:18:30 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19284

Elapsed: 00:00:00.00
07:18:30 SQL> 
07:18:30 SQL> --
07:18:30 SQL> -- chf610.sql
07:18:30 SQL> --
07:18:30 SQL> 
07:18:30 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:18:30 SQL> 
07:18:30 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.49
07:18:30 SQL> 
07:18:30 SQL> -- I created di5min here:
07:18:30 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:18:30 SQL> 
07:18:30 SQL> CREATE OR REPLACE VIEW svm6102 AS
07:18:30   2  SELECT
07:18:30   3  pair
07:18:30   4  ,ydate
07:18:30   5  ,prdate
07:18:30   6  ,rownum rnum -- acts as t in my time-series
07:18:30   7  ,clse
07:18:30   8  -- Derive a bunch of attributes from clse, the latest price:
07:18:30   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
07:18:30  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
07:18:30  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
07:18:30  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
07:18:30  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
07:18:30  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
07:18:30  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
07:18:30  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
07:18:30  17  --
07:18:30  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
07:18:30  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
07:18:30  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
07:18:30  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
07:18:30  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
07:18:30  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
07:18:30  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
07:18:30  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
07:18:30  26  --
07:18:30  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
07:18:30  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
07:18:30  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
07:18:30  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
07:18:30  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
07:18:30  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
07:18:30  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
07:18:30  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
07:18:30  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
07:18:30  36  FROM di5min WHERE pair LIKE'%chf%'
07:18:30  37  AND ydate > sysdate - 95
07:18:30  38  ORDER BY ydate
07:18:30  39  /

View created.

Elapsed: 00:00:00.04
07:18:30 SQL> 
07:18:30 SQL> -- rpt
07:18:30 SQL> 
07:18:30 SQL> SELECT
07:18:30   2  pair
07:18:30   3  ,COUNT(pair)
07:18:30   4  ,MIN(clse),MAX(clse)
07:18:30   5  ,MIN(avg6),MAX(avg6)
07:18:30   6  ,MIN(ydate),MAX(ydate)
07:18:30   7  FROM svm6102
07:18:30   8  GROUP BY pair
07:18:30   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19287	 .9471	  1.00635 .950038356 1.00498151 2010-09-23 07:20:01 2010-12-27 07:15:00

Elapsed: 00:00:00.81
07:18:31 SQL> 
07:18:31 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
07:18:31 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.26
07:18:31 SQL> CREATE TABLE svm6122 COMPRESS AS
07:18:31   2  SELECT
07:18:31   3  pair
07:18:31   4  ,ydate
07:18:31   5  ,prdate
07:18:31   6  ,clse
07:18:31   7  -- g6 is important. I want to predict g6:
07:18:31   8  ,ld6 - clse g6
07:18:31   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
07:18:31  10  -- I want more attributes from the ones I derived above:
07:18:31  11  -- clse relation to moving-min
07:18:31  12  ,clse-min4  cm4
07:18:31  13  ,clse-min6  cm6
07:18:31  14  ,clse-min8  cm8
07:18:31  15  ,clse-min10 cm10
07:18:31  16  ,clse-min12 cm12
07:18:31  17  ,clse-min14 cm14
07:18:31  18  ,clse-min16 cm16
07:18:31  19  ,clse-min18 cm18
07:18:31  20  -- clse relation to moving-avg
07:18:31  21  ,clse-avg4  ca4
07:18:31  22  ,clse-avg6  ca6
07:18:31  23  ,clse-avg8  ca8
07:18:31  24  ,clse-avg10 ca10
07:18:31  25  ,clse-avg12 ca12
07:18:31  26  ,clse-avg14 ca14
07:18:31  27  ,clse-avg16 ca16
07:18:31  28  ,clse-avg18 ca18
07:18:31  29  -- clse relation to moving-max
07:18:31  30  ,clse-max4  cx4
07:18:31  31  ,clse-max6  cx6
07:18:31  32  ,clse-max8  cx8
07:18:31  33  ,clse-max10 cx10
07:18:31  34  ,clse-max12 cx12
07:18:31  35  ,clse-max14 cx14
07:18:31  36  ,clse-max16 cx16
07:18:31  37  ,clse-max18 cx18
07:18:31  38  -- Derive more attributes.
07:18:31  39  -- I want to use CORR() here to help SVM see the shape of the series.
07:18:31  40  -- But COVAR_POP is more stable:
07:18:31  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
07:18:31  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:18:31  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:18:31  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:18:31  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:18:31  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:18:31  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:18:31  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:18:31  49  -- Derive date related attributes:
07:18:31  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:18:31  51  ,0+TO_CHAR(ydate,'D')d
07:18:31  52  ,0+TO_CHAR(ydate,'W')w
07:18:31  53  -- mpm stands for minutes-past-midnight:
07:18:31  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:18:31  55  -- mph stands for minutes-past-hour:
07:18:31  56  ,0+TO_CHAR(ydate,'MI')mph
07:18:31  57  FROM svm6102
07:18:31  58  ORDER BY ydate
07:18:31  59  /

Table created.

Elapsed: 00:00:02.01
07:18:33 SQL> 
07:18:33 SQL> -- rpt
07:18:33 SQL> 
07:18:33 SQL> SELECT
07:18:33   2  pair
07:18:33   3  ,COUNT(pair)
07:18:33   4  ,MIN(clse),MAX(clse)
07:18:33   5  ,MIN(ydate),MAX(ydate)
07:18:33   6  FROM svm6122
07:18:33   7  GROUP BY pair
07:18:33   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19287	 .9471	  1.00635 2010-09-23 07:20:01 2010-12-27 07:15:00

Elapsed: 00:00:00.04
07:18:33 SQL> 
07:18:33 SQL> -- Prepare for derivation of NTILE based params:
07:18:33 SQL> 
07:18:33 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.27
07:18:33 SQL> CREATE TABLE svm6142 COMPRESS AS
07:18:33   2  SELECT
07:18:33   3  pair
07:18:33   4  ,ydate
07:18:33   5  ,prdate
07:18:33   6  ,clse
07:18:33   7  ,g6
07:18:33   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
07:18:33   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
07:18:33  10  ,CASE WHEN trend IS NULL THEN 1
07:18:33  11  	    WHEN trend =0      THEN 1
07:18:33  12  	    ELSE trend END trend
07:18:33  13  ,cm4
07:18:33  14  ,cm6
07:18:33  15  ,cm8
07:18:33  16  ,cm10
07:18:33  17  ,cm12
07:18:33  18  ,cm14
07:18:33  19  ,cm16
07:18:33  20  ,cm18
07:18:33  21  --
07:18:33  22  ,ca4
07:18:33  23  ,ca6
07:18:33  24  ,ca8
07:18:33  25  ,ca10
07:18:33  26  ,ca12
07:18:33  27  ,ca14
07:18:33  28  ,ca16
07:18:33  29  ,ca18
07:18:33  30  --
07:18:33  31  ,cx4
07:18:33  32  ,cx6
07:18:33  33  ,cx8
07:18:33  34  ,cx10
07:18:33  35  ,cx12
07:18:33  36  ,cx14
07:18:33  37  ,cx16
07:18:33  38  ,cx18
07:18:33  39  --
07:18:33  40  ,crr4
07:18:33  41  ,crr6
07:18:33  42  ,crr8
07:18:33  43  ,crr10
07:18:33  44  ,crr12
07:18:33  45  ,crr14
07:18:33  46  ,crr16
07:18:33  47  ,crr18
07:18:33  48  --
07:18:33  49  ,hh
07:18:33  50  ,d
07:18:33  51  ,w
07:18:33  52  ,mpm
07:18:33  53  ,mph
07:18:33  54  FROM svm6122
07:18:33  55  ORDER BY ydate
07:18:33  56  /

Table created.

Elapsed: 00:00:00.38
07:18:34 SQL> 
07:18:34 SQL> -- rpt
07:18:34 SQL> 
07:18:34 SQL> SELECT
07:18:34   2  pair
07:18:34   3  ,trend
07:18:34   4  ,gatt
07:18:34   5  ,COUNT(pair)
07:18:34   6  ,AVG(g6)
07:18:34   7  FROM svm6142
07:18:34   8  GROUP BY pair,trend,gatt
07:18:34   9  ORDER BY pair,trend,gatt
07:18:34  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      6834 -.00186004
usd_chf 	-1 up	      3170 .003904788
usd_chf 	-1		69
usd_chf 	 1 nup	      6650 -.00164476
usd_chf 	 1 up	      2561  .00369087
usd_chf 	 1		 3

6 rows selected.

Elapsed: 00:00:00.04
07:18:34 SQL> 
07:18:34 SQL> 
07:18:34 SQL> -- Derive NTILE based params:
07:18:34 SQL> 
07:18:34 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
07:18:34 SQL> CREATE TABLE svm6162 COMPRESS AS
07:18:34   2  SELECT
07:18:34   3  pair
07:18:34   4  ,ydate
07:18:34   5  ,prdate
07:18:34   6  ,clse
07:18:34   7  ,g6
07:18:34   8  ,gatt
07:18:34   9  ,gattn
07:18:34  10  ,trend
07:18:34  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
07:18:34  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
07:18:34  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
07:18:34  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
07:18:34  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
07:18:34  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
07:18:34  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
07:18:34  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
07:18:34  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
07:18:34  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
07:18:34  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
07:18:34  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
07:18:34  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
07:18:34  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
07:18:34  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
07:18:34  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
07:18:34  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
07:18:34  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
07:18:34  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
07:18:34  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
07:18:34  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
07:18:34  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
07:18:34  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
07:18:34  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
07:18:34  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
07:18:34  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
07:18:34  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
07:18:34  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
07:18:34  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
07:18:34  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
07:18:34  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
07:18:34  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
07:18:34  43  ,hh  att32
07:18:34  44  ,d   att33
07:18:34  45  ,w   att34
07:18:34  46  ,mpm att35
07:18:34  47  ,mph att36
07:18:34  48  ,trend att37
07:18:34  49  FROM svm6142
07:18:34  50  ORDER BY ydate
07:18:34  51  /

Table created.

Elapsed: 00:00:04.75
07:18:39 SQL> 
07:18:39 SQL> -- rpt
07:18:39 SQL> 
07:18:39 SQL> SELECT
07:18:39   2  pair
07:18:39   3  ,trend
07:18:39   4  ,gatt
07:18:39   5  ,COUNT(pair)
07:18:39   6  ,AVG(g6)
07:18:39   7  FROM svm6162
07:18:39   8  GROUP BY pair,trend,gatt
07:18:39   9  ORDER BY pair,trend,gatt
07:18:39  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      6834 -.00186004
usd_chf 	-1 up	      3170 .003904788
usd_chf 	-1		69
usd_chf 	 1 nup	      6650 -.00164476
usd_chf 	 1 up	      2561  .00369087
usd_chf 	 1		 3

6 rows selected.

Elapsed: 00:00:00.02
07:18:39 SQL> 
07:18:39 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
07:18:39 SQL> CREATE TABLE modsrc COMPRESS AS
07:18:39   2  SELECT
07:18:39   3  pair
07:18:39   4  ,ydate
07:18:39   5  ,prdate
07:18:39   6  ,trend
07:18:39   7  ,g6
07:18:39   8  ,gatt
07:18:39   9  ,gattn
07:18:39  10  FROM svm6162
07:18:39  11  /

Table created.

Elapsed: 00:00:00.08
07:18:39 SQL> 
07:18:39 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
07:18:39 SQL> 
07:18:39 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
07:18:39 SQL> CREATE TABLE chf_ms610 COMPRESS AS
07:18:39   2  SELECT
07:18:39   3  ydate
07:18:39   4  ,trend chf_trend
07:18:39   5  ,g6    chf_g6
07:18:39   6  ,gatt  chf_gatt
07:18:39   7  ,gattn chf_gattn
07:18:39   8  FROM modsrc
07:18:39   9  /

Table created.

Elapsed: 00:00:00.06
07:18:39 SQL> 
07:18:39 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
07:18:40 SQL> 
07:18:40 SQL> -- I need a copy of the attributes:
07:18:40 SQL> 
07:18:40 SQL> 
07:18:40 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.04
07:18:40 SQL> CREATE TABLE chf_att COMPRESS AS
07:18:40   2  SELECT
07:18:40   3  ydate
07:18:40   4  ,att00 chf_att00
07:18:40   5  ,att01 chf_att01
07:18:40   6  ,att02 chf_att02
07:18:40   7  ,att03 chf_att03
07:18:40   8  ,att04 chf_att04
07:18:40   9  ,att05 chf_att05
07:18:40  10  ,att06 chf_att06
07:18:40  11  ,att07 chf_att07
07:18:40  12  ,att08 chf_att08
07:18:40  13  ,att09 chf_att09
07:18:40  14  ,att10 chf_att10
07:18:40  15  ,att11 chf_att11
07:18:40  16  ,att12 chf_att12
07:18:40  17  ,att13 chf_att13
07:18:40  18  ,att14 chf_att14
07:18:40  19  ,att15 chf_att15
07:18:40  20  ,att16 chf_att16
07:18:40  21  ,att17 chf_att17
07:18:40  22  ,att18 chf_att18
07:18:40  23  ,att19 chf_att19
07:18:40  24  ,att20 chf_att20
07:18:40  25  ,att21 chf_att21
07:18:40  26  ,att22 chf_att22
07:18:40  27  ,att23 chf_att23
07:18:40  28  ,att24 chf_att24
07:18:40  29  ,att25 chf_att25
07:18:40  30  ,att26 chf_att26
07:18:40  31  ,att27 chf_att27
07:18:40  32  ,att28 chf_att28
07:18:40  33  ,att29 chf_att29
07:18:40  34  ,att30 chf_att30
07:18:40  35  ,att31 chf_att31
07:18:40  36  ,att32 chf_att32
07:18:40  37  ,att33 chf_att33
07:18:40  38  ,att34 chf_att34
07:18:40  39  ,att35 chf_att35
07:18:40  40  ,att36 chf_att36
07:18:40  41  ,att37 chf_att37
07:18:40  42  FROM svm6162
07:18:40  43  /

Table created.

Elapsed: 00:00:00.16
07:18:40 SQL> 
07:18:40 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
07:18:40 SQL> 
07:18:40 SQL> -- rpt
07:18:40 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19287

Elapsed: 00:00:00.80
07:18:41 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19287

Elapsed: 00:00:00.01
07:18:41 SQL> 
07:18:41 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
