
SQL*Plus: Release 11.2.0.1.0 Production on Wed Jan 5 14:58:25 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

14:58:25 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
14:58:25 SQL> 14:58:25 SQL> --
14:58:25 SQL> -- eur610.sql
14:58:25 SQL> --
14:58:25 SQL> 
14:58:25 SQL> -- Creates views and tables for backtesting a forex SVM strategy
14:58:25 SQL> 
14:58:25 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.06
14:58:25 SQL> 
14:58:25 SQL> -- I created di5min here:
14:58:25 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
14:58:25 SQL> 
14:58:25 SQL> CREATE OR REPLACE VIEW svm6102 AS
14:58:25   2  SELECT
14:58:25   3  pair
14:58:25   4  ,ydate
14:58:25   5  ,prdate
14:58:25   6  ,rownum rnum -- acts as t in my time-series
14:58:25   7  ,clse
14:58:25   8  -- Derive a bunch of attributes from clse, the latest price:
14:58:25   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
14:58:25  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
14:58:25  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
14:58:25  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
14:58:25  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
14:58:25  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
14:58:25  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
14:58:25  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
14:58:25  17  --
14:58:25  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
14:58:25  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
14:58:25  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
14:58:25  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
14:58:25  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
14:58:25  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
14:58:25  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
14:58:25  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
14:58:25  26  --
14:58:25  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
14:58:25  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
14:58:25  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
14:58:25  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
14:58:25  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
14:58:25  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
14:58:25  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
14:58:25  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
14:58:25  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
14:58:25  36  FROM di5min WHERE pair LIKE'%eur%'
14:58:25  37  AND ydate > sysdate - 95
14:58:25  38  ORDER BY ydate
14:58:25  39  /

View created.

Elapsed: 00:00:00.08
14:58:25 SQL> 
14:58:25 SQL> -- rpt
14:58:25 SQL> 
14:58:25 SQL> SELECT
14:58:25   2  pair
14:58:25   3  ,COUNT(pair)
14:58:25   4  ,MIN(clse),MAX(clse)
14:58:25   5  ,MIN(avg6),MAX(avg6)
14:58:25   6  ,MIN(ydate),MAX(ydate)
14:58:25   7  FROM svm6102
14:58:25   8  GROUP BY pair
14:58:25   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19459    1.29735	   1.4273 1.29875103 1.42436233 2010-10-03 20:55:01 2011-01-05 14:55:00

Elapsed: 00:00:00.94
14:58:26 SQL> 
14:58:26 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
14:58:26 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.11
14:58:26 SQL> CREATE TABLE svm6122 COMPRESS AS
14:58:26   2  SELECT
14:58:26   3  pair
14:58:26   4  ,ydate
14:58:26   5  ,prdate
14:58:26   6  ,clse
14:58:26   7  -- g6 is important. I want to predict g6:
14:58:26   8  ,ld6 - clse g6
14:58:26   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
14:58:26  10  -- I want more attributes from the ones I derived above:
14:58:26  11  -- clse relation to moving-min
14:58:26  12  ,clse-min4  cm4
14:58:26  13  ,clse-min6  cm6
14:58:26  14  ,clse-min8  cm8
14:58:26  15  ,clse-min10 cm10
14:58:26  16  ,clse-min12 cm12
14:58:26  17  ,clse-min14 cm14
14:58:26  18  ,clse-min16 cm16
14:58:26  19  ,clse-min18 cm18
14:58:26  20  -- clse relation to moving-avg
14:58:26  21  ,clse-avg4  ca4
14:58:26  22  ,clse-avg6  ca6
14:58:26  23  ,clse-avg8  ca8
14:58:26  24  ,clse-avg10 ca10
14:58:26  25  ,clse-avg12 ca12
14:58:26  26  ,clse-avg14 ca14
14:58:26  27  ,clse-avg16 ca16
14:58:26  28  ,clse-avg18 ca18
14:58:26  29  -- clse relation to moving-max
14:58:26  30  ,clse-max4  cx4
14:58:26  31  ,clse-max6  cx6
14:58:26  32  ,clse-max8  cx8
14:58:26  33  ,clse-max10 cx10
14:58:26  34  ,clse-max12 cx12
14:58:26  35  ,clse-max14 cx14
14:58:26  36  ,clse-max16 cx16
14:58:26  37  ,clse-max18 cx18
14:58:26  38  -- Derive more attributes.
14:58:26  39  -- I want to use CORR() here to help SVM see the shape of the series.
14:58:26  40  -- But COVAR_POP is more stable:
14:58:26  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
14:58:26  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
14:58:26  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
14:58:26  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
14:58:26  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
14:58:26  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
14:58:26  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
14:58:26  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
14:58:26  49  -- Derive date related attributes:
14:58:26  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
14:58:26  51  ,0+TO_CHAR(ydate,'D')d
14:58:26  52  ,0+TO_CHAR(ydate,'W')w
14:58:26  53  -- mpm stands for minutes-past-midnight:
14:58:26  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
14:58:26  55  -- mph stands for minutes-past-hour:
14:58:26  56  ,0+TO_CHAR(ydate,'MI')mph
14:58:26  57  FROM svm6102
14:58:26  58  ORDER BY ydate
14:58:26  59  /

Table created.

Elapsed: 00:00:02.46
14:58:28 SQL> 
14:58:28 SQL> -- rpt
14:58:28 SQL> 
14:58:28 SQL> SELECT
14:58:28   2  pair
14:58:28   3  ,COUNT(pair)
14:58:28   4  ,MIN(clse),MAX(clse)
14:58:28   5  ,MIN(ydate),MAX(ydate)
14:58:28   6  FROM svm6122
14:58:28   7  GROUP BY pair
14:58:28   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19459    1.29735	   1.4273 2010-10-03 20:55:01 2011-01-05 14:55:00

Elapsed: 00:00:00.05
14:58:28 SQL> 
14:58:28 SQL> -- Prepare for derivation of NTILE based params:
14:58:28 SQL> 
14:58:28 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:01.36
14:58:30 SQL> CREATE TABLE svm6142 COMPRESS AS
14:58:30   2  SELECT
14:58:30   3  pair
14:58:30   4  ,ydate
14:58:30   5  ,prdate
14:58:30   6  ,clse
14:58:30   7  ,g6
14:58:30   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
14:58:30   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
14:58:30  10  ,CASE WHEN trend IS NULL THEN 1
14:58:30  11  	    WHEN trend =0      THEN 1
14:58:30  12  	    ELSE trend END trend
14:58:30  13  ,cm4
14:58:30  14  ,cm6
14:58:30  15  ,cm8
14:58:30  16  ,cm10
14:58:30  17  ,cm12
14:58:30  18  ,cm14
14:58:30  19  ,cm16
14:58:30  20  ,cm18
14:58:30  21  --
14:58:30  22  ,ca4
14:58:30  23  ,ca6
14:58:30  24  ,ca8
14:58:30  25  ,ca10
14:58:30  26  ,ca12
14:58:30  27  ,ca14
14:58:30  28  ,ca16
14:58:30  29  ,ca18
14:58:30  30  --
14:58:30  31  ,cx4
14:58:30  32  ,cx6
14:58:30  33  ,cx8
14:58:30  34  ,cx10
14:58:30  35  ,cx12
14:58:30  36  ,cx14
14:58:30  37  ,cx16
14:58:30  38  ,cx18
14:58:30  39  --
14:58:30  40  ,crr4
14:58:30  41  ,crr6
14:58:30  42  ,crr8
14:58:30  43  ,crr10
14:58:30  44  ,crr12
14:58:30  45  ,crr14
14:58:30  46  ,crr16
14:58:30  47  ,crr18
14:58:30  48  --
14:58:30  49  ,hh
14:58:30  50  ,d
14:58:30  51  ,w
14:58:30  52  ,mpm
14:58:30  53  ,mph
14:58:30  54  FROM svm6122
14:58:30  55  ORDER BY ydate
14:58:30  56  /

Table created.

Elapsed: 00:00:00.38
14:58:30 SQL> 
14:58:30 SQL> -- rpt
14:58:30 SQL> 
14:58:30 SQL> SELECT
14:58:30   2  pair
14:58:30   3  ,trend
14:58:30   4  ,gatt
14:58:30   5  ,COUNT(pair)
14:58:30   6  ,AVG(g6)
14:58:30   7  FROM svm6142
14:58:30   8  GROUP BY pair,trend,gatt
14:58:30   9  ORDER BY pair,trend,gatt
14:58:30  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6280 -.00312551
eur_usd 	-1 up	      3562 .004453576
eur_usd 	-1		72
eur_usd 	 1 nup	      5840 -.00325501
eur_usd 	 1 up	      3705 .005071238

Elapsed: 00:00:00.03
14:58:30 SQL> 
14:58:30 SQL> 
14:58:30 SQL> -- Derive NTILE based params:
14:58:30 SQL> 
14:58:30 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.49
14:58:31 SQL> CREATE TABLE svm6162 COMPRESS AS
14:58:31   2  SELECT
14:58:31   3  pair
14:58:31   4  ,ydate
14:58:31   5  ,prdate
14:58:31   6  ,clse
14:58:31   7  ,g6
14:58:31   8  ,gatt
14:58:31   9  ,gattn
14:58:31  10  ,trend
14:58:31  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
14:58:31  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
14:58:31  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
14:58:31  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
14:58:31  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
14:58:31  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
14:58:31  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
14:58:31  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
14:58:31  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
14:58:31  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
14:58:31  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
14:58:31  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
14:58:31  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
14:58:31  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
14:58:31  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
14:58:31  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
14:58:31  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
14:58:31  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
14:58:31  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
14:58:31  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
14:58:31  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
14:58:31  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
14:58:31  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
14:58:31  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
14:58:31  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
14:58:31  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
14:58:31  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
14:58:31  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
14:58:31  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
14:58:31  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
14:58:31  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
14:58:31  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
14:58:31  43  ,hh  att32
14:58:31  44  ,d   att33
14:58:31  45  ,w   att34
14:58:31  46  ,mpm att35
14:58:31  47  ,mph att36
14:58:31  48  ,trend att37
14:58:31  49  FROM svm6142
14:58:31  50  ORDER BY ydate
14:58:31  51  /

Table created.

Elapsed: 00:00:04.88
14:58:36 SQL> 
14:58:36 SQL> -- rpt
14:58:36 SQL> 
14:58:36 SQL> SELECT
14:58:36   2  pair
14:58:36   3  ,trend
14:58:36   4  ,gatt
14:58:36   5  ,COUNT(pair)
14:58:36   6  ,AVG(g6)
14:58:36   7  FROM svm6162
14:58:36   8  GROUP BY pair,trend,gatt
14:58:36   9  ORDER BY pair,trend,gatt
14:58:36  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6280 -.00312551
eur_usd 	-1 up	      3562 .004453576
eur_usd 	-1		72
eur_usd 	 1 nup	      5840 -.00325501
eur_usd 	 1 up	      3705 .005071238

Elapsed: 00:00:00.02
14:58:36 SQL> 
14:58:36 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.16
14:58:36 SQL> CREATE TABLE modsrc COMPRESS AS
14:58:36   2  SELECT
14:58:36   3  pair
14:58:36   4  ,ydate
14:58:36   5  ,prdate
14:58:36   6  ,trend
14:58:36   7  ,g6
14:58:36   8  ,gatt
14:58:36   9  ,gattn
14:58:36  10  FROM svm6162
14:58:36  11  /

Table created.

Elapsed: 00:00:00.07
14:58:36 SQL> 
14:58:36 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
14:58:36 SQL> 
14:58:36 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
14:58:36 SQL> CREATE TABLE eur_ms610 COMPRESS AS
14:58:36   2  SELECT
14:58:36   3  ydate
14:58:36   4  ,trend eur_trend
14:58:36   5  ,g6    eur_g6
14:58:36   6  ,gatt  eur_gatt
14:58:36   7  ,gattn eur_gattn
14:58:36   8  FROM modsrc
14:58:36   9  /

Table created.

Elapsed: 00:00:00.06
14:58:36 SQL> 
14:58:36 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
14:58:36 SQL> 
14:58:36 SQL> -- I need a copy of the attributes:
14:58:36 SQL> 
14:58:36 SQL> 
14:58:36 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.04
14:58:36 SQL> CREATE TABLE eur_att COMPRESS AS
14:58:36   2  SELECT
14:58:36   3  ydate
14:58:36   4  ,att00 eur_att00
14:58:36   5  ,att01 eur_att01
14:58:36   6  ,att02 eur_att02
14:58:36   7  ,att03 eur_att03
14:58:36   8  ,att04 eur_att04
14:58:36   9  ,att05 eur_att05
14:58:36  10  ,att06 eur_att06
14:58:36  11  ,att07 eur_att07
14:58:36  12  ,att08 eur_att08
14:58:36  13  ,att09 eur_att09
14:58:36  14  ,att10 eur_att10
14:58:36  15  ,att11 eur_att11
14:58:36  16  ,att12 eur_att12
14:58:36  17  ,att13 eur_att13
14:58:36  18  ,att14 eur_att14
14:58:36  19  ,att15 eur_att15
14:58:36  20  ,att16 eur_att16
14:58:36  21  ,att17 eur_att17
14:58:36  22  ,att18 eur_att18
14:58:36  23  ,att19 eur_att19
14:58:36  24  ,att20 eur_att20
14:58:36  25  ,att21 eur_att21
14:58:36  26  ,att22 eur_att22
14:58:36  27  ,att23 eur_att23
14:58:36  28  ,att24 eur_att24
14:58:36  29  ,att25 eur_att25
14:58:36  30  ,att26 eur_att26
14:58:36  31  ,att27 eur_att27
14:58:36  32  ,att28 eur_att28
14:58:36  33  ,att29 eur_att29
14:58:36  34  ,att30 eur_att30
14:58:36  35  ,att31 eur_att31
14:58:36  36  ,att32 eur_att32
14:58:36  37  ,att33 eur_att33
14:58:36  38  ,att34 eur_att34
14:58:36  39  ,att35 eur_att35
14:58:36  40  ,att36 eur_att36
14:58:36  41  ,att37 eur_att37
14:58:36  42  FROM svm6162
14:58:36  43  /

Table created.

Elapsed: 00:00:00.20
14:58:37 SQL> 
14:58:37 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
14:58:37 SQL> 
14:58:37 SQL> -- rpt
14:58:37 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19459

Elapsed: 00:00:00.89
14:58:38 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19459

Elapsed: 00:00:00.00
14:58:38 SQL> 
14:58:38 SQL> --
14:58:38 SQL> -- aud610.sql
14:58:38 SQL> --
14:58:38 SQL> 
14:58:38 SQL> -- Creates views and tables for backtesting a forex SVM strategy
14:58:38 SQL> 
14:58:38 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.51
14:58:38 SQL> 
14:58:38 SQL> -- I created di5min here:
14:58:38 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
14:58:38 SQL> 
14:58:38 SQL> CREATE OR REPLACE VIEW svm6102 AS
14:58:38   2  SELECT
14:58:38   3  pair
14:58:38   4  ,ydate
14:58:38   5  ,prdate
14:58:38   6  ,rownum rnum -- acts as t in my time-series
14:58:38   7  ,clse
14:58:38   8  -- Derive a bunch of attributes from clse, the latest price:
14:58:38   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
14:58:38  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
14:58:38  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
14:58:38  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
14:58:38  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
14:58:38  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
14:58:38  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
14:58:38  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
14:58:38  17  --
14:58:38  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
14:58:38  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
14:58:38  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
14:58:38  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
14:58:38  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
14:58:38  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
14:58:38  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
14:58:38  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
14:58:38  26  --
14:58:38  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
14:58:38  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
14:58:38  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
14:58:38  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
14:58:38  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
14:58:38  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
14:58:38  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
14:58:38  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
14:58:38  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
14:58:38  36  FROM di5min WHERE pair LIKE'%aud%'
14:58:38  37  AND ydate > sysdate - 95
14:58:38  38  ORDER BY ydate
14:58:38  39  /

View created.

Elapsed: 00:00:00.04
14:58:39 SQL> 
14:58:39 SQL> -- rpt
14:58:39 SQL> 
14:58:39 SQL> SELECT
14:58:39   2  pair
14:58:39   3  ,COUNT(pair)
14:58:39   4  ,MIN(clse),MAX(clse)
14:58:39   5  ,MIN(avg6),MAX(avg6)
14:58:39   6  ,MIN(ydate),MAX(ydate)
14:58:39   7  FROM svm6102
14:58:39   8  GROUP BY pair
14:58:39   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19456	.95405	  1.02495 .957141438 1.02284247 2010-10-03 20:55:01 2011-01-05 14:55:00

Elapsed: 00:00:00.88
14:58:39 SQL> 
14:58:39 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
14:58:39 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.28
14:58:40 SQL> CREATE TABLE svm6122 COMPRESS AS
14:58:40   2  SELECT
14:58:40   3  pair
14:58:40   4  ,ydate
14:58:40   5  ,prdate
14:58:40   6  ,clse
14:58:40   7  -- g6 is important. I want to predict g6:
14:58:40   8  ,ld6 - clse g6
14:58:40   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
14:58:40  10  -- I want more attributes from the ones I derived above:
14:58:40  11  -- clse relation to moving-min
14:58:40  12  ,clse-min4  cm4
14:58:40  13  ,clse-min6  cm6
14:58:40  14  ,clse-min8  cm8
14:58:40  15  ,clse-min10 cm10
14:58:40  16  ,clse-min12 cm12
14:58:40  17  ,clse-min14 cm14
14:58:40  18  ,clse-min16 cm16
14:58:40  19  ,clse-min18 cm18
14:58:40  20  -- clse relation to moving-avg
14:58:40  21  ,clse-avg4  ca4
14:58:40  22  ,clse-avg6  ca6
14:58:40  23  ,clse-avg8  ca8
14:58:40  24  ,clse-avg10 ca10
14:58:40  25  ,clse-avg12 ca12
14:58:40  26  ,clse-avg14 ca14
14:58:40  27  ,clse-avg16 ca16
14:58:40  28  ,clse-avg18 ca18
14:58:40  29  -- clse relation to moving-max
14:58:40  30  ,clse-max4  cx4
14:58:40  31  ,clse-max6  cx6
14:58:40  32  ,clse-max8  cx8
14:58:40  33  ,clse-max10 cx10
14:58:40  34  ,clse-max12 cx12
14:58:40  35  ,clse-max14 cx14
14:58:40  36  ,clse-max16 cx16
14:58:40  37  ,clse-max18 cx18
14:58:40  38  -- Derive more attributes.
14:58:40  39  -- I want to use CORR() here to help SVM see the shape of the series.
14:58:40  40  -- But COVAR_POP is more stable:
14:58:40  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
14:58:40  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
14:58:40  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
14:58:40  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
14:58:40  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
14:58:40  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
14:58:40  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
14:58:40  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
14:58:40  49  -- Derive date related attributes:
14:58:40  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
14:58:40  51  ,0+TO_CHAR(ydate,'D')d
14:58:40  52  ,0+TO_CHAR(ydate,'W')w
14:58:40  53  -- mpm stands for minutes-past-midnight:
14:58:40  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
14:58:40  55  -- mph stands for minutes-past-hour:
14:58:40  56  ,0+TO_CHAR(ydate,'MI')mph
14:58:40  57  FROM svm6102
14:58:40  58  ORDER BY ydate
14:58:40  59  /

Table created.

Elapsed: 00:00:02.17
14:58:42 SQL> 
14:58:42 SQL> -- rpt
14:58:42 SQL> 
14:58:42 SQL> SELECT
14:58:42   2  pair
14:58:42   3  ,COUNT(pair)
14:58:42   4  ,MIN(clse),MAX(clse)
14:58:42   5  ,MIN(ydate),MAX(ydate)
14:58:42   6  FROM svm6122
14:58:42   7  GROUP BY pair
14:58:42   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19456	.95405	  1.02495 2010-10-03 20:55:01 2011-01-05 14:55:00

Elapsed: 00:00:00.04
14:58:42 SQL> 
14:58:42 SQL> -- Prepare for derivation of NTILE based params:
14:58:42 SQL> 
14:58:42 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.22
14:58:42 SQL> CREATE TABLE svm6142 COMPRESS AS
14:58:42   2  SELECT
14:58:42   3  pair
14:58:42   4  ,ydate
14:58:42   5  ,prdate
14:58:42   6  ,clse
14:58:42   7  ,g6
14:58:42   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
14:58:42   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
14:58:42  10  ,CASE WHEN trend IS NULL THEN 1
14:58:42  11  	    WHEN trend =0      THEN 1
14:58:42  12  	    ELSE trend END trend
14:58:42  13  ,cm4
14:58:42  14  ,cm6
14:58:42  15  ,cm8
14:58:42  16  ,cm10
14:58:42  17  ,cm12
14:58:42  18  ,cm14
14:58:42  19  ,cm16
14:58:42  20  ,cm18
14:58:42  21  --
14:58:42  22  ,ca4
14:58:42  23  ,ca6
14:58:42  24  ,ca8
14:58:42  25  ,ca10
14:58:42  26  ,ca12
14:58:42  27  ,ca14
14:58:42  28  ,ca16
14:58:42  29  ,ca18
14:58:42  30  --
14:58:42  31  ,cx4
14:58:42  32  ,cx6
14:58:42  33  ,cx8
14:58:42  34  ,cx10
14:58:42  35  ,cx12
14:58:42  36  ,cx14
14:58:42  37  ,cx16
14:58:42  38  ,cx18
14:58:42  39  --
14:58:42  40  ,crr4
14:58:42  41  ,crr6
14:58:42  42  ,crr8
14:58:42  43  ,crr10
14:58:42  44  ,crr12
14:58:42  45  ,crr14
14:58:42  46  ,crr16
14:58:42  47  ,crr18
14:58:42  48  --
14:58:42  49  ,hh
14:58:42  50  ,d
14:58:42  51  ,w
14:58:42  52  ,mpm
14:58:42  53  ,mph
14:58:42  54  FROM svm6122
14:58:42  55  ORDER BY ydate
14:58:42  56  /

Table created.

Elapsed: 00:00:00.38
14:58:43 SQL> 
14:58:43 SQL> -- rpt
14:58:43 SQL> 
14:58:43 SQL> SELECT
14:58:43   2  pair
14:58:43   3  ,trend
14:58:43   4  ,gatt
14:58:43   5  ,COUNT(pair)
14:58:43   6  ,AVG(g6)
14:58:43   7  FROM svm6142
14:58:43   8  GROUP BY pair,trend,gatt
14:58:43   9  ORDER BY pair,trend,gatt
14:58:43  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5524  -.0021907
aud_usd 	-1 up	      3646 .003769261
aud_usd 	-1		71
aud_usd 	 1 nup	      6621 -.00213267
aud_usd 	 1 up	      3593 .004054752
aud_usd 	 1		 1

6 rows selected.

Elapsed: 00:00:00.04
14:58:43 SQL> 
14:58:43 SQL> 
14:58:43 SQL> -- Derive NTILE based params:
14:58:43 SQL> 
14:58:43 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.17
14:58:43 SQL> CREATE TABLE svm6162 COMPRESS AS
14:58:43   2  SELECT
14:58:43   3  pair
14:58:43   4  ,ydate
14:58:43   5  ,prdate
14:58:43   6  ,clse
14:58:43   7  ,g6
14:58:43   8  ,gatt
14:58:43   9  ,gattn
14:58:43  10  ,trend
14:58:43  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
14:58:43  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
14:58:43  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
14:58:43  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
14:58:43  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
14:58:43  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
14:58:43  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
14:58:43  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
14:58:43  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
14:58:43  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
14:58:43  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
14:58:43  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
14:58:43  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
14:58:43  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
14:58:43  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
14:58:43  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
14:58:43  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
14:58:43  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
14:58:43  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
14:58:43  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
14:58:43  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
14:58:43  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
14:58:43  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
14:58:43  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
14:58:43  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
14:58:43  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
14:58:43  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
14:58:43  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
14:58:43  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
14:58:43  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
14:58:43  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
14:58:43  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
14:58:43  43  ,hh  att32
14:58:43  44  ,d   att33
14:58:43  45  ,w   att34
14:58:43  46  ,mpm att35
14:58:43  47  ,mph att36
14:58:43  48  ,trend att37
14:58:43  49  FROM svm6142
14:58:43  50  ORDER BY ydate
14:58:43  51  /

Table created.

Elapsed: 00:00:04.77
14:58:47 SQL> 
14:58:47 SQL> -- rpt
14:58:47 SQL> 
14:58:47 SQL> SELECT
14:58:47   2  pair
14:58:47   3  ,trend
14:58:47   4  ,gatt
14:58:47   5  ,COUNT(pair)
14:58:47   6  ,AVG(g6)
14:58:47   7  FROM svm6162
14:58:47   8  GROUP BY pair,trend,gatt
14:58:47   9  ORDER BY pair,trend,gatt
14:58:47  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5524  -.0021907
aud_usd 	-1 up	      3646 .003769261
aud_usd 	-1		71
aud_usd 	 1 nup	      6621 -.00213267
aud_usd 	 1 up	      3593 .004054752
aud_usd 	 1		 1

6 rows selected.

Elapsed: 00:00:00.02
14:58:48 SQL> 
14:58:48 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
14:58:48 SQL> CREATE TABLE modsrc COMPRESS AS
14:58:48   2  SELECT
14:58:48   3  pair
14:58:48   4  ,ydate
14:58:48   5  ,prdate
14:58:48   6  ,trend
14:58:48   7  ,g6
14:58:48   8  ,gatt
14:58:48   9  ,gattn
14:58:48  10  FROM svm6162
14:58:48  11  /

Table created.

Elapsed: 00:00:00.09
14:58:48 SQL> 
14:58:48 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
14:58:48 SQL> 
14:58:48 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
14:58:48 SQL> CREATE TABLE aud_ms610 COMPRESS AS
14:58:48   2  SELECT
14:58:48   3  ydate
14:58:48   4  ,trend aud_trend
14:58:48   5  ,g6    aud_g6
14:58:48   6  ,gatt  aud_gatt
14:58:48   7  ,gattn aud_gattn
14:58:48   8  FROM modsrc
14:58:48   9  /

Table created.

Elapsed: 00:00:00.07
14:58:48 SQL> 
14:58:48 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
14:58:48 SQL> 
14:58:48 SQL> -- I need a copy of the attributes:
14:58:48 SQL> 
14:58:48 SQL> 
14:58:48 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.04
14:58:48 SQL> CREATE TABLE aud_att COMPRESS AS
14:58:48   2  SELECT
14:58:48   3  ydate
14:58:48   4  ,att00 aud_att00
14:58:48   5  ,att01 aud_att01
14:58:48   6  ,att02 aud_att02
14:58:48   7  ,att03 aud_att03
14:58:48   8  ,att04 aud_att04
14:58:48   9  ,att05 aud_att05
14:58:48  10  ,att06 aud_att06
14:58:48  11  ,att07 aud_att07
14:58:48  12  ,att08 aud_att08
14:58:48  13  ,att09 aud_att09
14:58:48  14  ,att10 aud_att10
14:58:48  15  ,att11 aud_att11
14:58:48  16  ,att12 aud_att12
14:58:48  17  ,att13 aud_att13
14:58:48  18  ,att14 aud_att14
14:58:48  19  ,att15 aud_att15
14:58:48  20  ,att16 aud_att16
14:58:48  21  ,att17 aud_att17
14:58:48  22  ,att18 aud_att18
14:58:48  23  ,att19 aud_att19
14:58:48  24  ,att20 aud_att20
14:58:48  25  ,att21 aud_att21
14:58:48  26  ,att22 aud_att22
14:58:48  27  ,att23 aud_att23
14:58:48  28  ,att24 aud_att24
14:58:48  29  ,att25 aud_att25
14:58:48  30  ,att26 aud_att26
14:58:48  31  ,att27 aud_att27
14:58:48  32  ,att28 aud_att28
14:58:48  33  ,att29 aud_att29
14:58:48  34  ,att30 aud_att30
14:58:48  35  ,att31 aud_att31
14:58:48  36  ,att32 aud_att32
14:58:48  37  ,att33 aud_att33
14:58:48  38  ,att34 aud_att34
14:58:48  39  ,att35 aud_att35
14:58:48  40  ,att36 aud_att36
14:58:48  41  ,att37 aud_att37
14:58:48  42  FROM svm6162
14:58:48  43  /

Table created.

Elapsed: 00:00:00.16
14:58:48 SQL> 
14:58:48 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
14:58:49 SQL> 
14:58:49 SQL> -- rpt
14:58:49 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19456

Elapsed: 00:00:00.87
14:58:50 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19456

Elapsed: 00:00:00.00
14:58:50 SQL> 
14:58:50 SQL> --
14:58:50 SQL> -- gbp610.sql
14:58:50 SQL> --
14:58:50 SQL> 
14:58:50 SQL> -- Creates views and tables for backtesting a forex SVM strategy
14:58:50 SQL> 
14:58:50 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.53
14:58:50 SQL> 
14:58:50 SQL> -- I created di5min here:
14:58:50 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
14:58:50 SQL> 
14:58:50 SQL> CREATE OR REPLACE VIEW svm6102 AS
14:58:50   2  SELECT
14:58:50   3  pair
14:58:50   4  ,ydate
14:58:50   5  ,prdate
14:58:50   6  ,rownum rnum -- acts as t in my time-series
14:58:50   7  ,clse
14:58:50   8  -- Derive a bunch of attributes from clse, the latest price:
14:58:50   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
14:58:50  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
14:58:50  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
14:58:50  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
14:58:50  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
14:58:50  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
14:58:50  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
14:58:50  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
14:58:50  17  --
14:58:50  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
14:58:50  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
14:58:50  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
14:58:50  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
14:58:50  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
14:58:50  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
14:58:50  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
14:58:50  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
14:58:50  26  --
14:58:50  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
14:58:50  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
14:58:50  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
14:58:50  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
14:58:50  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
14:58:50  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
14:58:50  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
14:58:50  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
14:58:50  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
14:58:50  36  FROM di5min WHERE pair LIKE'%gbp%'
14:58:50  37  AND ydate > sysdate - 95
14:58:50  38  ORDER BY ydate
14:58:50  39  /

View created.

Elapsed: 00:00:00.04
14:58:50 SQL> 
14:58:50 SQL> -- rpt
14:58:50 SQL> 
14:58:50 SQL> SELECT
14:58:50   2  pair
14:58:50   3  ,COUNT(pair)
14:58:50   4  ,MIN(clse),MAX(clse)
14:58:50   5  ,MIN(avg6),MAX(avg6)
14:58:50   6  ,MIN(ydate),MAX(ydate)
14:58:50   7  FROM svm6102
14:58:50   8  GROUP BY pair
14:58:50   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19458   1.535325	   1.6295 1.53696747 1.62716986 2010-10-03 20:55:01 2011-01-05 14:55:00

Elapsed: 00:00:00.85
14:58:51 SQL> 
14:58:51 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
14:58:51 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.30
14:58:51 SQL> CREATE TABLE svm6122 COMPRESS AS
14:58:51   2  SELECT
14:58:51   3  pair
14:58:51   4  ,ydate
14:58:51   5  ,prdate
14:58:51   6  ,clse
14:58:51   7  -- g6 is important. I want to predict g6:
14:58:51   8  ,ld6 - clse g6
14:58:51   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
14:58:51  10  -- I want more attributes from the ones I derived above:
14:58:51  11  -- clse relation to moving-min
14:58:51  12  ,clse-min4  cm4
14:58:51  13  ,clse-min6  cm6
14:58:51  14  ,clse-min8  cm8
14:58:51  15  ,clse-min10 cm10
14:58:51  16  ,clse-min12 cm12
14:58:51  17  ,clse-min14 cm14
14:58:51  18  ,clse-min16 cm16
14:58:51  19  ,clse-min18 cm18
14:58:51  20  -- clse relation to moving-avg
14:58:51  21  ,clse-avg4  ca4
14:58:51  22  ,clse-avg6  ca6
14:58:51  23  ,clse-avg8  ca8
14:58:51  24  ,clse-avg10 ca10
14:58:51  25  ,clse-avg12 ca12
14:58:51  26  ,clse-avg14 ca14
14:58:51  27  ,clse-avg16 ca16
14:58:51  28  ,clse-avg18 ca18
14:58:51  29  -- clse relation to moving-max
14:58:51  30  ,clse-max4  cx4
14:58:51  31  ,clse-max6  cx6
14:58:51  32  ,clse-max8  cx8
14:58:51  33  ,clse-max10 cx10
14:58:51  34  ,clse-max12 cx12
14:58:51  35  ,clse-max14 cx14
14:58:51  36  ,clse-max16 cx16
14:58:51  37  ,clse-max18 cx18
14:58:51  38  -- Derive more attributes.
14:58:51  39  -- I want to use CORR() here to help SVM see the shape of the series.
14:58:51  40  -- But COVAR_POP is more stable:
14:58:51  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
14:58:51  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
14:58:51  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
14:58:51  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
14:58:51  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
14:58:51  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
14:58:51  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
14:58:51  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
14:58:51  49  -- Derive date related attributes:
14:58:51  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
14:58:51  51  ,0+TO_CHAR(ydate,'D')d
14:58:51  52  ,0+TO_CHAR(ydate,'W')w
14:58:51  53  -- mpm stands for minutes-past-midnight:
14:58:51  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
14:58:51  55  -- mph stands for minutes-past-hour:
14:58:51  56  ,0+TO_CHAR(ydate,'MI')mph
14:58:51  57  FROM svm6102
14:58:51  58  ORDER BY ydate
14:58:51  59  /

Table created.

Elapsed: 00:00:02.09
14:58:54 SQL> 
14:58:54 SQL> -- rpt
14:58:54 SQL> 
14:58:54 SQL> SELECT
14:58:54   2  pair
14:58:54   3  ,COUNT(pair)
14:58:54   4  ,MIN(clse),MAX(clse)
14:58:54   5  ,MIN(ydate),MAX(ydate)
14:58:54   6  FROM svm6122
14:58:54   7  GROUP BY pair
14:58:54   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19458   1.535325	   1.6295 2010-10-03 20:55:01 2011-01-05 14:55:00

Elapsed: 00:00:00.04
14:58:54 SQL> 
14:58:54 SQL> -- Prepare for derivation of NTILE based params:
14:58:54 SQL> 
14:58:54 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.26
14:58:54 SQL> CREATE TABLE svm6142 COMPRESS AS
14:58:54   2  SELECT
14:58:54   3  pair
14:58:54   4  ,ydate
14:58:54   5  ,prdate
14:58:54   6  ,clse
14:58:54   7  ,g6
14:58:54   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
14:58:54   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
14:58:54  10  ,CASE WHEN trend IS NULL THEN 1
14:58:54  11  	    WHEN trend =0      THEN 1
14:58:54  12  	    ELSE trend END trend
14:58:54  13  ,cm4
14:58:54  14  ,cm6
14:58:54  15  ,cm8
14:58:54  16  ,cm10
14:58:54  17  ,cm12
14:58:54  18  ,cm14
14:58:54  19  ,cm16
14:58:54  20  ,cm18
14:58:54  21  --
14:58:54  22  ,ca4
14:58:54  23  ,ca6
14:58:54  24  ,ca8
14:58:54  25  ,ca10
14:58:54  26  ,ca12
14:58:54  27  ,ca14
14:58:54  28  ,ca16
14:58:54  29  ,ca18
14:58:54  30  --
14:58:54  31  ,cx4
14:58:54  32  ,cx6
14:58:54  33  ,cx8
14:58:54  34  ,cx10
14:58:54  35  ,cx12
14:58:54  36  ,cx14
14:58:54  37  ,cx16
14:58:54  38  ,cx18
14:58:54  39  --
14:58:54  40  ,crr4
14:58:54  41  ,crr6
14:58:54  42  ,crr8
14:58:54  43  ,crr10
14:58:54  44  ,crr12
14:58:54  45  ,crr14
14:58:54  46  ,crr16
14:58:54  47  ,crr18
14:58:54  48  --
14:58:54  49  ,hh
14:58:54  50  ,d
14:58:54  51  ,w
14:58:54  52  ,mpm
14:58:54  53  ,mph
14:58:54  54  FROM svm6122
14:58:54  55  ORDER BY ydate
14:58:54  56  /

Table created.

Elapsed: 00:00:00.37
14:58:54 SQL> 
14:58:54 SQL> -- rpt
14:58:54 SQL> 
14:58:54 SQL> SELECT
14:58:54   2  pair
14:58:54   3  ,trend
14:58:54   4  ,gatt
14:58:54   5  ,COUNT(pair)
14:58:54   6  ,AVG(g6)
14:58:54   7  FROM svm6142
14:58:54   8  GROUP BY pair,trend,gatt
14:58:54   9  ORDER BY pair,trend,gatt
14:58:54  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6315 -.00264115
gbp_usd 	-1 up	      3510 .004373914
gbp_usd 	-1		22
gbp_usd 	 1 nup	      6121 -.00262058
gbp_usd 	 1 up	      3440 .004531722
gbp_usd 	 1		50

6 rows selected.

Elapsed: 00:00:00.04
14:58:54 SQL> 
14:58:54 SQL> 
14:58:54 SQL> -- Derive NTILE based params:
14:58:54 SQL> 
14:58:54 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.22
14:58:54 SQL> CREATE TABLE svm6162 COMPRESS AS
14:58:54   2  SELECT
14:58:54   3  pair
14:58:54   4  ,ydate
14:58:54   5  ,prdate
14:58:54   6  ,clse
14:58:54   7  ,g6
14:58:54   8  ,gatt
14:58:54   9  ,gattn
14:58:54  10  ,trend
14:58:54  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
14:58:54  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
14:58:54  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
14:58:54  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
14:58:54  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
14:58:54  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
14:58:54  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
14:58:54  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
14:58:54  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
14:58:54  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
14:58:54  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
14:58:54  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
14:58:54  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
14:58:54  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
14:58:54  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
14:58:54  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
14:58:54  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
14:58:54  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
14:58:54  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
14:58:54  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
14:58:54  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
14:58:54  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
14:58:54  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
14:58:54  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
14:58:54  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
14:58:54  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
14:58:54  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
14:58:54  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
14:58:54  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
14:58:54  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
14:58:54  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
14:58:54  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
14:58:54  43  ,hh  att32
14:58:54  44  ,d   att33
14:58:54  45  ,w   att34
14:58:54  46  ,mpm att35
14:58:54  47  ,mph att36
14:58:54  48  ,trend att37
14:58:54  49  FROM svm6142
14:58:54  50  ORDER BY ydate
14:58:54  51  /

Table created.

Elapsed: 00:00:04.68
14:58:59 SQL> 
14:58:59 SQL> -- rpt
14:58:59 SQL> 
14:58:59 SQL> SELECT
14:58:59   2  pair
14:58:59   3  ,trend
14:58:59   4  ,gatt
14:58:59   5  ,COUNT(pair)
14:58:59   6  ,AVG(g6)
14:58:59   7  FROM svm6162
14:58:59   8  GROUP BY pair,trend,gatt
14:58:59   9  ORDER BY pair,trend,gatt
14:58:59  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6315 -.00264115
gbp_usd 	-1 up	      3510 .004373914
gbp_usd 	-1		22
gbp_usd 	 1 nup	      6121 -.00262058
gbp_usd 	 1 up	      3440 .004531722
gbp_usd 	 1		50

6 rows selected.

Elapsed: 00:00:00.02
14:58:59 SQL> 
14:58:59 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
14:58:59 SQL> CREATE TABLE modsrc COMPRESS AS
14:58:59   2  SELECT
14:58:59   3  pair
14:58:59   4  ,ydate
14:58:59   5  ,prdate
14:58:59   6  ,trend
14:58:59   7  ,g6
14:58:59   8  ,gatt
14:58:59   9  ,gattn
14:58:59  10  FROM svm6162
14:58:59  11  /

Table created.

Elapsed: 00:00:00.08
14:58:59 SQL> 
14:58:59 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
14:59:00 SQL> 
14:59:00 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
14:59:00 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
14:59:00   2  SELECT
14:59:00   3  ydate
14:59:00   4  ,trend gbp_trend
14:59:00   5  ,g6    gbp_g6
14:59:00   6  ,gatt  gbp_gatt
14:59:00   7  ,gattn gbp_gattn
14:59:00   8  FROM modsrc
14:59:00   9  /

Table created.

Elapsed: 00:00:00.05
14:59:00 SQL> 
14:59:00 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
14:59:00 SQL> 
14:59:00 SQL> -- I need a copy of the attributes:
14:59:00 SQL> 
14:59:00 SQL> 
14:59:00 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.05
14:59:00 SQL> CREATE TABLE gbp_att COMPRESS AS
14:59:00   2  SELECT
14:59:00   3  ydate
14:59:00   4  ,att00 gbp_att00
14:59:00   5  ,att01 gbp_att01
14:59:00   6  ,att02 gbp_att02
14:59:00   7  ,att03 gbp_att03
14:59:00   8  ,att04 gbp_att04
14:59:00   9  ,att05 gbp_att05
14:59:00  10  ,att06 gbp_att06
14:59:00  11  ,att07 gbp_att07
14:59:00  12  ,att08 gbp_att08
14:59:00  13  ,att09 gbp_att09
14:59:00  14  ,att10 gbp_att10
14:59:00  15  ,att11 gbp_att11
14:59:00  16  ,att12 gbp_att12
14:59:00  17  ,att13 gbp_att13
14:59:00  18  ,att14 gbp_att14
14:59:00  19  ,att15 gbp_att15
14:59:00  20  ,att16 gbp_att16
14:59:00  21  ,att17 gbp_att17
14:59:00  22  ,att18 gbp_att18
14:59:00  23  ,att19 gbp_att19
14:59:00  24  ,att20 gbp_att20
14:59:00  25  ,att21 gbp_att21
14:59:00  26  ,att22 gbp_att22
14:59:00  27  ,att23 gbp_att23
14:59:00  28  ,att24 gbp_att24
14:59:00  29  ,att25 gbp_att25
14:59:00  30  ,att26 gbp_att26
14:59:00  31  ,att27 gbp_att27
14:59:00  32  ,att28 gbp_att28
14:59:00  33  ,att29 gbp_att29
14:59:00  34  ,att30 gbp_att30
14:59:00  35  ,att31 gbp_att31
14:59:00  36  ,att32 gbp_att32
14:59:00  37  ,att33 gbp_att33
14:59:00  38  ,att34 gbp_att34
14:59:00  39  ,att35 gbp_att35
14:59:00  40  ,att36 gbp_att36
14:59:00  41  ,att37 gbp_att37
14:59:00  42  FROM svm6162
14:59:00  43  /

Table created.

Elapsed: 00:00:00.16
14:59:00 SQL> 
14:59:00 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
14:59:01 SQL> 
14:59:01 SQL> -- rpt
14:59:01 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19458

Elapsed: 00:00:00.86
14:59:01 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19458

Elapsed: 00:00:00.00
14:59:01 SQL> 
14:59:01 SQL> --
14:59:01 SQL> -- jpy610.sql
14:59:01 SQL> --
14:59:01 SQL> 
14:59:01 SQL> -- Creates views and tables for backtesting a forex SVM strategy
14:59:01 SQL> 
14:59:01 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.49
14:59:02 SQL> 
14:59:02 SQL> -- I created di5min here:
14:59:02 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
14:59:02 SQL> 
14:59:02 SQL> CREATE OR REPLACE VIEW svm6102 AS
14:59:02   2  SELECT
14:59:02   3  pair
14:59:02   4  ,ydate
14:59:02   5  ,prdate
14:59:02   6  ,rownum rnum -- acts as t in my time-series
14:59:02   7  ,clse
14:59:02   8  -- Derive a bunch of attributes from clse, the latest price:
14:59:02   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
14:59:02  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
14:59:02  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
14:59:02  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
14:59:02  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
14:59:02  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
14:59:02  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
14:59:02  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
14:59:02  17  --
14:59:02  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
14:59:02  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
14:59:02  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
14:59:02  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
14:59:02  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
14:59:02  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
14:59:02  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
14:59:02  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
14:59:02  26  --
14:59:02  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
14:59:02  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
14:59:02  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
14:59:02  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
14:59:02  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
14:59:02  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
14:59:02  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
14:59:02  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
14:59:02  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
14:59:02  36  FROM di5min WHERE pair LIKE'%jpy%'
14:59:02  37  AND ydate > sysdate - 95
14:59:02  38  ORDER BY ydate
14:59:02  39  /

View created.

Elapsed: 00:00:00.05
14:59:02 SQL> 
14:59:02 SQL> -- rpt
14:59:02 SQL> 
14:59:02 SQL> SELECT
14:59:02   2  pair
14:59:02   3  ,COUNT(pair)
14:59:02   4  ,MIN(clse),MAX(clse)
14:59:02   5  ,MIN(avg6),MAX(avg6)
14:59:02   6  ,MIN(ydate),MAX(ydate)
14:59:02   7  FROM svm6102
14:59:02   8  GROUP BY pair
14:59:02   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19456	 80.25	   84.485 80.3595205 84.3105479 2010-10-03 20:55:01 2011-01-05 14:55:00

Elapsed: 00:00:00.91
14:59:03 SQL> 
14:59:03 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
14:59:03 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.27
14:59:03 SQL> CREATE TABLE svm6122 COMPRESS AS
14:59:03   2  SELECT
14:59:03   3  pair
14:59:03   4  ,ydate
14:59:03   5  ,prdate
14:59:03   6  ,clse
14:59:03   7  -- g6 is important. I want to predict g6:
14:59:03   8  ,ld6 - clse g6
14:59:03   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
14:59:03  10  -- I want more attributes from the ones I derived above:
14:59:03  11  -- clse relation to moving-min
14:59:03  12  ,clse-min4  cm4
14:59:03  13  ,clse-min6  cm6
14:59:03  14  ,clse-min8  cm8
14:59:03  15  ,clse-min10 cm10
14:59:03  16  ,clse-min12 cm12
14:59:03  17  ,clse-min14 cm14
14:59:03  18  ,clse-min16 cm16
14:59:03  19  ,clse-min18 cm18
14:59:03  20  -- clse relation to moving-avg
14:59:03  21  ,clse-avg4  ca4
14:59:03  22  ,clse-avg6  ca6
14:59:03  23  ,clse-avg8  ca8
14:59:03  24  ,clse-avg10 ca10
14:59:03  25  ,clse-avg12 ca12
14:59:03  26  ,clse-avg14 ca14
14:59:03  27  ,clse-avg16 ca16
14:59:03  28  ,clse-avg18 ca18
14:59:03  29  -- clse relation to moving-max
14:59:03  30  ,clse-max4  cx4
14:59:03  31  ,clse-max6  cx6
14:59:03  32  ,clse-max8  cx8
14:59:03  33  ,clse-max10 cx10
14:59:03  34  ,clse-max12 cx12
14:59:03  35  ,clse-max14 cx14
14:59:03  36  ,clse-max16 cx16
14:59:03  37  ,clse-max18 cx18
14:59:03  38  -- Derive more attributes.
14:59:03  39  -- I want to use CORR() here to help SVM see the shape of the series.
14:59:03  40  -- But COVAR_POP is more stable:
14:59:03  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
14:59:03  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
14:59:03  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
14:59:03  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
14:59:03  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
14:59:03  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
14:59:03  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
14:59:03  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
14:59:03  49  -- Derive date related attributes:
14:59:03  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
14:59:03  51  ,0+TO_CHAR(ydate,'D')d
14:59:03  52  ,0+TO_CHAR(ydate,'W')w
14:59:03  53  -- mpm stands for minutes-past-midnight:
14:59:03  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
14:59:03  55  -- mph stands for minutes-past-hour:
14:59:03  56  ,0+TO_CHAR(ydate,'MI')mph
14:59:03  57  FROM svm6102
14:59:03  58  ORDER BY ydate
14:59:03  59  /

Table created.

Elapsed: 00:00:02.12
14:59:05 SQL> 
14:59:05 SQL> -- rpt
14:59:05 SQL> 
14:59:05 SQL> SELECT
14:59:05   2  pair
14:59:05   3  ,COUNT(pair)
14:59:05   4  ,MIN(clse),MAX(clse)
14:59:05   5  ,MIN(ydate),MAX(ydate)
14:59:05   6  FROM svm6122
14:59:05   7  GROUP BY pair
14:59:05   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19456	 80.25	   84.485 2010-10-03 20:55:01 2011-01-05 14:55:00

Elapsed: 00:00:00.04
14:59:05 SQL> 
14:59:05 SQL> -- Prepare for derivation of NTILE based params:
14:59:05 SQL> 
14:59:05 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.28
14:59:06 SQL> CREATE TABLE svm6142 COMPRESS AS
14:59:06   2  SELECT
14:59:06   3  pair
14:59:06   4  ,ydate
14:59:06   5  ,prdate
14:59:06   6  ,clse
14:59:06   7  ,g6
14:59:06   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
14:59:06   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
14:59:06  10  ,CASE WHEN trend IS NULL THEN 1
14:59:06  11  	    WHEN trend =0      THEN 1
14:59:06  12  	    ELSE trend END trend
14:59:06  13  ,cm4
14:59:06  14  ,cm6
14:59:06  15  ,cm8
14:59:06  16  ,cm10
14:59:06  17  ,cm12
14:59:06  18  ,cm14
14:59:06  19  ,cm16
14:59:06  20  ,cm18
14:59:06  21  --
14:59:06  22  ,ca4
14:59:06  23  ,ca6
14:59:06  24  ,ca8
14:59:06  25  ,ca10
14:59:06  26  ,ca12
14:59:06  27  ,ca14
14:59:06  28  ,ca16
14:59:06  29  ,ca18
14:59:06  30  --
14:59:06  31  ,cx4
14:59:06  32  ,cx6
14:59:06  33  ,cx8
14:59:06  34  ,cx10
14:59:06  35  ,cx12
14:59:06  36  ,cx14
14:59:06  37  ,cx16
14:59:06  38  ,cx18
14:59:06  39  --
14:59:06  40  ,crr4
14:59:06  41  ,crr6
14:59:06  42  ,crr8
14:59:06  43  ,crr10
14:59:06  44  ,crr12
14:59:06  45  ,crr14
14:59:06  46  ,crr16
14:59:06  47  ,crr18
14:59:06  48  --
14:59:06  49  ,hh
14:59:06  50  ,d
14:59:06  51  ,w
14:59:06  52  ,mpm
14:59:06  53  ,mph
14:59:06  54  FROM svm6122
14:59:06  55  ORDER BY ydate
14:59:06  56  /

Table created.

Elapsed: 00:00:00.45
14:59:06 SQL> 
14:59:06 SQL> -- rpt
14:59:06 SQL> 
14:59:06 SQL> SELECT
14:59:06   2  pair
14:59:06   3  ,trend
14:59:06   4  ,gatt
14:59:06   5  ,COUNT(pair)
14:59:06   6  ,AVG(g6)
14:59:06   7  FROM svm6142
14:59:06   8  GROUP BY pair,trend,gatt
14:59:06   9  ORDER BY pair,trend,gatt
14:59:06  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5111 -.16664378
usd_jpy 	-1 up	      4822 .167393232
usd_jpy 	-1		16
usd_jpy 	 1 nup	      4993  -.1561771
usd_jpy 	 1 up	      4458 .168145678
usd_jpy 	 1		56

6 rows selected.

Elapsed: 00:00:00.04
14:59:06 SQL> 
14:59:06 SQL> 
14:59:06 SQL> -- Derive NTILE based params:
14:59:06 SQL> 
14:59:06 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.21
14:59:06 SQL> CREATE TABLE svm6162 COMPRESS AS
14:59:06   2  SELECT
14:59:06   3  pair
14:59:06   4  ,ydate
14:59:06   5  ,prdate
14:59:06   6  ,clse
14:59:06   7  ,g6
14:59:06   8  ,gatt
14:59:06   9  ,gattn
14:59:06  10  ,trend
14:59:06  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
14:59:06  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
14:59:06  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
14:59:06  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
14:59:06  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
14:59:06  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
14:59:06  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
14:59:06  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
14:59:06  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
14:59:06  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
14:59:06  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
14:59:06  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
14:59:06  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
14:59:06  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
14:59:06  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
14:59:06  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
14:59:06  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
14:59:06  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
14:59:06  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
14:59:06  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
14:59:06  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
14:59:06  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
14:59:06  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
14:59:06  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
14:59:06  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
14:59:06  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
14:59:06  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
14:59:06  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
14:59:06  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
14:59:06  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
14:59:06  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
14:59:06  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
14:59:06  43  ,hh  att32
14:59:06  44  ,d   att33
14:59:06  45  ,w   att34
14:59:06  46  ,mpm att35
14:59:06  47  ,mph att36
14:59:06  48  ,trend att37
14:59:06  49  FROM svm6142
14:59:06  50  ORDER BY ydate
14:59:06  51  /

Table created.

Elapsed: 00:00:04.81
14:59:11 SQL> 
14:59:11 SQL> -- rpt
14:59:11 SQL> 
14:59:11 SQL> SELECT
14:59:11   2  pair
14:59:11   3  ,trend
14:59:11   4  ,gatt
14:59:11   5  ,COUNT(pair)
14:59:11   6  ,AVG(g6)
14:59:11   7  FROM svm6162
14:59:11   8  GROUP BY pair,trend,gatt
14:59:11   9  ORDER BY pair,trend,gatt
14:59:11  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5111 -.16664378
usd_jpy 	-1 up	      4822 .167393232
usd_jpy 	-1		16
usd_jpy 	 1 nup	      4993  -.1561771
usd_jpy 	 1 up	      4458 .168145678
usd_jpy 	 1		56

6 rows selected.

Elapsed: 00:00:00.02
14:59:11 SQL> 
14:59:11 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
14:59:11 SQL> CREATE TABLE modsrc COMPRESS AS
14:59:11   2  SELECT
14:59:11   3  pair
14:59:11   4  ,ydate
14:59:11   5  ,prdate
14:59:11   6  ,trend
14:59:11   7  ,g6
14:59:11   8  ,gatt
14:59:11   9  ,gattn
14:59:11  10  FROM svm6162
14:59:11  11  /

Table created.

Elapsed: 00:00:00.08
14:59:11 SQL> 
14:59:11 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
14:59:12 SQL> 
14:59:12 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.03
14:59:12 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
14:59:12   2  SELECT
14:59:12   3  ydate
14:59:12   4  ,trend jpy_trend
14:59:12   5  ,g6    jpy_g6
14:59:12   6  ,gatt  jpy_gatt
14:59:12   7  ,gattn jpy_gattn
14:59:12   8  FROM modsrc
14:59:12   9  /

Table created.

Elapsed: 00:00:00.07
14:59:12 SQL> 
14:59:12 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
14:59:12 SQL> 
14:59:12 SQL> -- I need a copy of the attributes:
14:59:12 SQL> 
14:59:12 SQL> 
14:59:12 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.12
14:59:12 SQL> CREATE TABLE jpy_att COMPRESS AS
14:59:12   2  SELECT
14:59:12   3  ydate
14:59:12   4  ,att00 jpy_att00
14:59:12   5  ,att01 jpy_att01
14:59:12   6  ,att02 jpy_att02
14:59:12   7  ,att03 jpy_att03
14:59:12   8  ,att04 jpy_att04
14:59:12   9  ,att05 jpy_att05
14:59:12  10  ,att06 jpy_att06
14:59:12  11  ,att07 jpy_att07
14:59:12  12  ,att08 jpy_att08
14:59:12  13  ,att09 jpy_att09
14:59:12  14  ,att10 jpy_att10
14:59:12  15  ,att11 jpy_att11
14:59:12  16  ,att12 jpy_att12
14:59:12  17  ,att13 jpy_att13
14:59:12  18  ,att14 jpy_att14
14:59:12  19  ,att15 jpy_att15
14:59:12  20  ,att16 jpy_att16
14:59:12  21  ,att17 jpy_att17
14:59:12  22  ,att18 jpy_att18
14:59:12  23  ,att19 jpy_att19
14:59:12  24  ,att20 jpy_att20
14:59:12  25  ,att21 jpy_att21
14:59:12  26  ,att22 jpy_att22
14:59:12  27  ,att23 jpy_att23
14:59:12  28  ,att24 jpy_att24
14:59:12  29  ,att25 jpy_att25
14:59:12  30  ,att26 jpy_att26
14:59:12  31  ,att27 jpy_att27
14:59:12  32  ,att28 jpy_att28
14:59:12  33  ,att29 jpy_att29
14:59:12  34  ,att30 jpy_att30
14:59:12  35  ,att31 jpy_att31
14:59:12  36  ,att32 jpy_att32
14:59:12  37  ,att33 jpy_att33
14:59:12  38  ,att34 jpy_att34
14:59:12  39  ,att35 jpy_att35
14:59:12  40  ,att36 jpy_att36
14:59:12  41  ,att37 jpy_att37
14:59:12  42  FROM svm6162
14:59:12  43  /

Table created.

Elapsed: 00:00:00.20
14:59:12 SQL> 
14:59:12 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
14:59:13 SQL> 
14:59:13 SQL> -- rpt
14:59:13 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19456

Elapsed: 00:00:00.91
14:59:13 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19456

Elapsed: 00:00:00.00
14:59:13 SQL> 
14:59:13 SQL> --
14:59:13 SQL> -- cad610.sql
14:59:13 SQL> --
14:59:13 SQL> 
14:59:13 SQL> -- Creates views and tables for backtesting a forex SVM strategy
14:59:13 SQL> 
14:59:13 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
14:59:14 SQL> 
14:59:14 SQL> -- I created di5min here:
14:59:14 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
14:59:14 SQL> 
14:59:14 SQL> CREATE OR REPLACE VIEW svm6102 AS
14:59:14   2  SELECT
14:59:14   3  pair
14:59:14   4  ,ydate
14:59:14   5  ,prdate
14:59:14   6  ,rownum rnum -- acts as t in my time-series
14:59:14   7  ,clse
14:59:14   8  -- Derive a bunch of attributes from clse, the latest price:
14:59:14   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
14:59:14  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
14:59:14  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
14:59:14  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
14:59:14  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
14:59:14  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
14:59:14  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
14:59:14  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
14:59:14  17  --
14:59:14  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
14:59:14  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
14:59:14  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
14:59:14  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
14:59:14  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
14:59:14  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
14:59:14  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
14:59:14  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
14:59:14  26  --
14:59:14  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
14:59:14  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
14:59:14  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
14:59:14  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
14:59:14  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
14:59:14  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
14:59:14  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
14:59:14  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
14:59:14  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
14:59:14  36  FROM di5min WHERE pair LIKE'%cad%'
14:59:14  37  AND ydate > sysdate - 95
14:59:14  38  ORDER BY ydate
14:59:14  39  /

View created.

Elapsed: 00:00:00.04
14:59:14 SQL> 
14:59:14 SQL> -- rpt
14:59:14 SQL> 
14:59:14 SQL> SELECT
14:59:14   2  pair
14:59:14   3  ,COUNT(pair)
14:59:14   4  ,MIN(clse),MAX(clse)
14:59:14   5  ,MIN(avg6),MAX(avg6)
14:59:14   6  ,MIN(ydate),MAX(ydate)
14:59:14   7  FROM svm6102
14:59:14   8  GROUP BY pair
14:59:14   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19456    .988925	   1.0355 .990603938 1.03282877 2010-10-03 20:55:01 2011-01-05 14:55:00

Elapsed: 00:00:00.90
14:59:15 SQL> 
14:59:15 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
14:59:15 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:01.20
14:59:16 SQL> CREATE TABLE svm6122 COMPRESS AS
14:59:16   2  SELECT
14:59:16   3  pair
14:59:16   4  ,ydate
14:59:16   5  ,prdate
14:59:16   6  ,clse
14:59:16   7  -- g6 is important. I want to predict g6:
14:59:16   8  ,ld6 - clse g6
14:59:16   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
14:59:16  10  -- I want more attributes from the ones I derived above:
14:59:16  11  -- clse relation to moving-min
14:59:16  12  ,clse-min4  cm4
14:59:16  13  ,clse-min6  cm6
14:59:16  14  ,clse-min8  cm8
14:59:16  15  ,clse-min10 cm10
14:59:16  16  ,clse-min12 cm12
14:59:16  17  ,clse-min14 cm14
14:59:16  18  ,clse-min16 cm16
14:59:16  19  ,clse-min18 cm18
14:59:16  20  -- clse relation to moving-avg
14:59:16  21  ,clse-avg4  ca4
14:59:16  22  ,clse-avg6  ca6
14:59:16  23  ,clse-avg8  ca8
14:59:16  24  ,clse-avg10 ca10
14:59:16  25  ,clse-avg12 ca12
14:59:16  26  ,clse-avg14 ca14
14:59:16  27  ,clse-avg16 ca16
14:59:16  28  ,clse-avg18 ca18
14:59:16  29  -- clse relation to moving-max
14:59:16  30  ,clse-max4  cx4
14:59:16  31  ,clse-max6  cx6
14:59:16  32  ,clse-max8  cx8
14:59:16  33  ,clse-max10 cx10
14:59:16  34  ,clse-max12 cx12
14:59:16  35  ,clse-max14 cx14
14:59:16  36  ,clse-max16 cx16
14:59:16  37  ,clse-max18 cx18
14:59:16  38  -- Derive more attributes.
14:59:16  39  -- I want to use CORR() here to help SVM see the shape of the series.
14:59:16  40  -- But COVAR_POP is more stable:
14:59:16  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
14:59:16  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
14:59:16  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
14:59:16  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
14:59:16  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
14:59:16  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
14:59:16  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
14:59:16  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
14:59:16  49  -- Derive date related attributes:
14:59:16  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
14:59:16  51  ,0+TO_CHAR(ydate,'D')d
14:59:16  52  ,0+TO_CHAR(ydate,'W')w
14:59:16  53  -- mpm stands for minutes-past-midnight:
14:59:16  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
14:59:16  55  -- mph stands for minutes-past-hour:
14:59:16  56  ,0+TO_CHAR(ydate,'MI')mph
14:59:16  57  FROM svm6102
14:59:16  58  ORDER BY ydate
14:59:16  59  /

Table created.

Elapsed: 00:00:02.05
14:59:18 SQL> 
14:59:18 SQL> -- rpt
14:59:18 SQL> 
14:59:18 SQL> SELECT
14:59:18   2  pair
14:59:18   3  ,COUNT(pair)
14:59:18   4  ,MIN(clse),MAX(clse)
14:59:18   5  ,MIN(ydate),MAX(ydate)
14:59:18   6  FROM svm6122
14:59:18   7  GROUP BY pair
14:59:18   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19456    .988925	   1.0355 2010-10-03 20:55:01 2011-01-05 14:55:00

Elapsed: 00:00:00.04
14:59:18 SQL> 
14:59:18 SQL> -- Prepare for derivation of NTILE based params:
14:59:18 SQL> 
14:59:18 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.30
14:59:18 SQL> CREATE TABLE svm6142 COMPRESS AS
14:59:18   2  SELECT
14:59:18   3  pair
14:59:18   4  ,ydate
14:59:18   5  ,prdate
14:59:18   6  ,clse
14:59:18   7  ,g6
14:59:18   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
14:59:18   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
14:59:18  10  ,CASE WHEN trend IS NULL THEN 1
14:59:18  11  	    WHEN trend =0      THEN 1
14:59:18  12  	    ELSE trend END trend
14:59:18  13  ,cm4
14:59:18  14  ,cm6
14:59:18  15  ,cm8
14:59:18  16  ,cm10
14:59:18  17  ,cm12
14:59:18  18  ,cm14
14:59:18  19  ,cm16
14:59:18  20  ,cm18
14:59:18  21  --
14:59:18  22  ,ca4
14:59:18  23  ,ca6
14:59:18  24  ,ca8
14:59:18  25  ,ca10
14:59:18  26  ,ca12
14:59:18  27  ,ca14
14:59:18  28  ,ca16
14:59:18  29  ,ca18
14:59:18  30  --
14:59:18  31  ,cx4
14:59:18  32  ,cx6
14:59:18  33  ,cx8
14:59:18  34  ,cx10
14:59:18  35  ,cx12
14:59:18  36  ,cx14
14:59:18  37  ,cx16
14:59:18  38  ,cx18
14:59:18  39  --
14:59:18  40  ,crr4
14:59:18  41  ,crr6
14:59:18  42  ,crr8
14:59:18  43  ,crr10
14:59:18  44  ,crr12
14:59:18  45  ,crr14
14:59:18  46  ,crr16
14:59:18  47  ,crr18
14:59:18  48  --
14:59:18  49  ,hh
14:59:18  50  ,d
14:59:18  51  ,w
14:59:18  52  ,mpm
14:59:18  53  ,mph
14:59:18  54  FROM svm6122
14:59:18  55  ORDER BY ydate
14:59:18  56  /

Table created.

Elapsed: 00:00:00.39
14:59:19 SQL> 
14:59:19 SQL> -- rpt
14:59:19 SQL> 
14:59:19 SQL> SELECT
14:59:19   2  pair
14:59:19   3  ,trend
14:59:19   4  ,gatt
14:59:19   5  ,COUNT(pair)
14:59:19   6  ,AVG(g6)
14:59:19   7  FROM svm6142
14:59:19   8  GROUP BY pair,trend,gatt
14:59:19   9  ORDER BY pair,trend,gatt
14:59:19  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7164 -.00124421
usd_cad 	-1 up	      3092 .003065739
usd_cad 	-1		30
usd_cad 	 1 nup	      6739 -.00159175
usd_cad 	 1 up	      2389 .003648486
usd_cad 	 1		42

6 rows selected.

Elapsed: 00:00:00.03
14:59:19 SQL> 
14:59:19 SQL> 
14:59:19 SQL> -- Derive NTILE based params:
14:59:19 SQL> 
14:59:19 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
14:59:19 SQL> CREATE TABLE svm6162 COMPRESS AS
14:59:19   2  SELECT
14:59:19   3  pair
14:59:19   4  ,ydate
14:59:19   5  ,prdate
14:59:19   6  ,clse
14:59:19   7  ,g6
14:59:19   8  ,gatt
14:59:19   9  ,gattn
14:59:19  10  ,trend
14:59:19  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
14:59:19  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
14:59:19  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
14:59:19  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
14:59:19  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
14:59:19  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
14:59:19  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
14:59:19  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
14:59:19  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
14:59:19  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
14:59:19  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
14:59:19  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
14:59:19  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
14:59:19  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
14:59:19  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
14:59:19  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
14:59:19  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
14:59:19  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
14:59:19  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
14:59:19  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
14:59:19  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
14:59:19  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
14:59:19  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
14:59:19  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
14:59:19  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
14:59:19  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
14:59:19  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
14:59:19  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
14:59:19  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
14:59:19  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
14:59:19  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
14:59:19  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
14:59:19  43  ,hh  att32
14:59:19  44  ,d   att33
14:59:19  45  ,w   att34
14:59:19  46  ,mpm att35
14:59:19  47  ,mph att36
14:59:19  48  ,trend att37
14:59:19  49  FROM svm6142
14:59:19  50  ORDER BY ydate
14:59:19  51  /

Table created.

Elapsed: 00:00:04.73
14:59:24 SQL> 
14:59:24 SQL> -- rpt
14:59:24 SQL> 
14:59:24 SQL> SELECT
14:59:24   2  pair
14:59:24   3  ,trend
14:59:24   4  ,gatt
14:59:24   5  ,COUNT(pair)
14:59:24   6  ,AVG(g6)
14:59:24   7  FROM svm6162
14:59:24   8  GROUP BY pair,trend,gatt
14:59:24   9  ORDER BY pair,trend,gatt
14:59:24  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7164 -.00124421
usd_cad 	-1 up	      3092 .003065739
usd_cad 	-1		30
usd_cad 	 1 nup	      6739 -.00159175
usd_cad 	 1 up	      2389 .003648486
usd_cad 	 1		42

6 rows selected.

Elapsed: 00:00:00.03
14:59:24 SQL> 
14:59:24 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.14
14:59:24 SQL> CREATE TABLE modsrc COMPRESS AS
14:59:24   2  SELECT
14:59:24   3  pair
14:59:24   4  ,ydate
14:59:24   5  ,prdate
14:59:24   6  ,trend
14:59:24   7  ,g6
14:59:24   8  ,gatt
14:59:24   9  ,gattn
14:59:24  10  FROM svm6162
14:59:24  11  /

Table created.

Elapsed: 00:00:00.08
14:59:24 SQL> 
14:59:24 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
14:59:24 SQL> 
14:59:24 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
14:59:24 SQL> CREATE TABLE cad_ms610 COMPRESS AS
14:59:24   2  SELECT
14:59:24   3  ydate
14:59:24   4  ,trend cad_trend
14:59:24   5  ,g6    cad_g6
14:59:24   6  ,gatt  cad_gatt
14:59:24   7  ,gattn cad_gattn
14:59:24   8  FROM modsrc
14:59:24   9  /

Table created.

Elapsed: 00:00:00.07
14:59:24 SQL> 
14:59:24 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
14:59:24 SQL> 
14:59:24 SQL> -- I need a copy of the attributes:
14:59:24 SQL> 
14:59:24 SQL> 
14:59:24 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.17
14:59:25 SQL> CREATE TABLE cad_att COMPRESS AS
14:59:25   2  SELECT
14:59:25   3  ydate
14:59:25   4  ,att00 cad_att00
14:59:25   5  ,att01 cad_att01
14:59:25   6  ,att02 cad_att02
14:59:25   7  ,att03 cad_att03
14:59:25   8  ,att04 cad_att04
14:59:25   9  ,att05 cad_att05
14:59:25  10  ,att06 cad_att06
14:59:25  11  ,att07 cad_att07
14:59:25  12  ,att08 cad_att08
14:59:25  13  ,att09 cad_att09
14:59:25  14  ,att10 cad_att10
14:59:25  15  ,att11 cad_att11
14:59:25  16  ,att12 cad_att12
14:59:25  17  ,att13 cad_att13
14:59:25  18  ,att14 cad_att14
14:59:25  19  ,att15 cad_att15
14:59:25  20  ,att16 cad_att16
14:59:25  21  ,att17 cad_att17
14:59:25  22  ,att18 cad_att18
14:59:25  23  ,att19 cad_att19
14:59:25  24  ,att20 cad_att20
14:59:25  25  ,att21 cad_att21
14:59:25  26  ,att22 cad_att22
14:59:25  27  ,att23 cad_att23
14:59:25  28  ,att24 cad_att24
14:59:25  29  ,att25 cad_att25
14:59:25  30  ,att26 cad_att26
14:59:25  31  ,att27 cad_att27
14:59:25  32  ,att28 cad_att28
14:59:25  33  ,att29 cad_att29
14:59:25  34  ,att30 cad_att30
14:59:25  35  ,att31 cad_att31
14:59:25  36  ,att32 cad_att32
14:59:25  37  ,att33 cad_att33
14:59:25  38  ,att34 cad_att34
14:59:25  39  ,att35 cad_att35
14:59:25  40  ,att36 cad_att36
14:59:25  41  ,att37 cad_att37
14:59:25  42  FROM svm6162
14:59:25  43  /

Table created.

Elapsed: 00:00:00.18
14:59:25 SQL> 
14:59:25 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
14:59:25 SQL> 
14:59:25 SQL> -- rpt
14:59:25 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19456

Elapsed: 00:00:00.83
14:59:26 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19456

Elapsed: 00:00:00.01
14:59:26 SQL> 
14:59:26 SQL> --
14:59:26 SQL> -- chf610.sql
14:59:26 SQL> --
14:59:26 SQL> 
14:59:26 SQL> -- Creates views and tables for backtesting a forex SVM strategy
14:59:26 SQL> 
14:59:26 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.36
14:59:26 SQL> 
14:59:26 SQL> -- I created di5min here:
14:59:26 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
14:59:26 SQL> 
14:59:26 SQL> CREATE OR REPLACE VIEW svm6102 AS
14:59:26   2  SELECT
14:59:26   3  pair
14:59:26   4  ,ydate
14:59:26   5  ,prdate
14:59:26   6  ,rownum rnum -- acts as t in my time-series
14:59:26   7  ,clse
14:59:26   8  -- Derive a bunch of attributes from clse, the latest price:
14:59:26   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
14:59:26  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
14:59:26  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
14:59:26  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
14:59:26  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
14:59:26  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
14:59:26  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
14:59:26  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
14:59:26  17  --
14:59:26  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
14:59:26  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
14:59:26  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
14:59:26  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
14:59:26  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
14:59:26  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
14:59:26  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
14:59:26  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
14:59:26  26  --
14:59:26  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
14:59:26  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
14:59:26  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
14:59:26  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
14:59:26  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
14:59:26  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
14:59:26  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
14:59:26  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
14:59:26  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
14:59:26  36  FROM di5min WHERE pair LIKE'%chf%'
14:59:26  37  AND ydate > sysdate - 95
14:59:26  38  ORDER BY ydate
14:59:26  39  /

View created.

Elapsed: 00:00:00.05
14:59:27 SQL> 
14:59:27 SQL> -- rpt
14:59:27 SQL> 
14:59:27 SQL> SELECT
14:59:27   2  pair
14:59:27   3  ,COUNT(pair)
14:59:27   4  ,MIN(clse),MAX(clse)
14:59:27   5  ,MIN(avg6),MAX(avg6)
14:59:27   6  ,MIN(ydate),MAX(ydate)
14:59:27   7  FROM svm6102
14:59:27   8  GROUP BY pair
14:59:27   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19459    .931675	  1.00635  .93325411 1.00498151 2010-10-03 20:55:01 2011-01-05 14:55:00

Elapsed: 00:00:00.88
14:59:27 SQL> 
14:59:27 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
14:59:27 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.29
14:59:28 SQL> CREATE TABLE svm6122 COMPRESS AS
14:59:28   2  SELECT
14:59:28   3  pair
14:59:28   4  ,ydate
14:59:28   5  ,prdate
14:59:28   6  ,clse
14:59:28   7  -- g6 is important. I want to predict g6:
14:59:28   8  ,ld6 - clse g6
14:59:28   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
14:59:28  10  -- I want more attributes from the ones I derived above:
14:59:28  11  -- clse relation to moving-min
14:59:28  12  ,clse-min4  cm4
14:59:28  13  ,clse-min6  cm6
14:59:28  14  ,clse-min8  cm8
14:59:28  15  ,clse-min10 cm10
14:59:28  16  ,clse-min12 cm12
14:59:28  17  ,clse-min14 cm14
14:59:28  18  ,clse-min16 cm16
14:59:28  19  ,clse-min18 cm18
14:59:28  20  -- clse relation to moving-avg
14:59:28  21  ,clse-avg4  ca4
14:59:28  22  ,clse-avg6  ca6
14:59:28  23  ,clse-avg8  ca8
14:59:28  24  ,clse-avg10 ca10
14:59:28  25  ,clse-avg12 ca12
14:59:28  26  ,clse-avg14 ca14
14:59:28  27  ,clse-avg16 ca16
14:59:28  28  ,clse-avg18 ca18
14:59:28  29  -- clse relation to moving-max
14:59:28  30  ,clse-max4  cx4
14:59:28  31  ,clse-max6  cx6
14:59:28  32  ,clse-max8  cx8
14:59:28  33  ,clse-max10 cx10
14:59:28  34  ,clse-max12 cx12
14:59:28  35  ,clse-max14 cx14
14:59:28  36  ,clse-max16 cx16
14:59:28  37  ,clse-max18 cx18
14:59:28  38  -- Derive more attributes.
14:59:28  39  -- I want to use CORR() here to help SVM see the shape of the series.
14:59:28  40  -- But COVAR_POP is more stable:
14:59:28  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
14:59:28  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
14:59:28  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
14:59:28  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
14:59:28  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
14:59:28  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
14:59:28  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
14:59:28  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
14:59:28  49  -- Derive date related attributes:
14:59:28  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
14:59:28  51  ,0+TO_CHAR(ydate,'D')d
14:59:28  52  ,0+TO_CHAR(ydate,'W')w
14:59:28  53  -- mpm stands for minutes-past-midnight:
14:59:28  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
14:59:28  55  -- mph stands for minutes-past-hour:
14:59:28  56  ,0+TO_CHAR(ydate,'MI')mph
14:59:28  57  FROM svm6102
14:59:28  58  ORDER BY ydate
14:59:28  59  /

Table created.

Elapsed: 00:00:02.14
14:59:30 SQL> 
14:59:30 SQL> -- rpt
14:59:30 SQL> 
14:59:30 SQL> SELECT
14:59:30   2  pair
14:59:30   3  ,COUNT(pair)
14:59:30   4  ,MIN(clse),MAX(clse)
14:59:30   5  ,MIN(ydate),MAX(ydate)
14:59:30   6  FROM svm6122
14:59:30   7  GROUP BY pair
14:59:30   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19459    .931675	  1.00635 2010-10-03 20:55:01 2011-01-05 14:55:00

Elapsed: 00:00:00.03
14:59:30 SQL> 
14:59:30 SQL> -- Prepare for derivation of NTILE based params:
14:59:30 SQL> 
14:59:30 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.31
14:59:30 SQL> CREATE TABLE svm6142 COMPRESS AS
14:59:30   2  SELECT
14:59:30   3  pair
14:59:30   4  ,ydate
14:59:30   5  ,prdate
14:59:30   6  ,clse
14:59:30   7  ,g6
14:59:30   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
14:59:30   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
14:59:30  10  ,CASE WHEN trend IS NULL THEN 1
14:59:30  11  	    WHEN trend =0      THEN 1
14:59:30  12  	    ELSE trend END trend
14:59:30  13  ,cm4
14:59:30  14  ,cm6
14:59:30  15  ,cm8
14:59:30  16  ,cm10
14:59:30  17  ,cm12
14:59:30  18  ,cm14
14:59:30  19  ,cm16
14:59:30  20  ,cm18
14:59:30  21  --
14:59:30  22  ,ca4
14:59:30  23  ,ca6
14:59:30  24  ,ca8
14:59:30  25  ,ca10
14:59:30  26  ,ca12
14:59:30  27  ,ca14
14:59:30  28  ,ca16
14:59:30  29  ,ca18
14:59:30  30  --
14:59:30  31  ,cx4
14:59:30  32  ,cx6
14:59:30  33  ,cx8
14:59:30  34  ,cx10
14:59:30  35  ,cx12
14:59:30  36  ,cx14
14:59:30  37  ,cx16
14:59:30  38  ,cx18
14:59:30  39  --
14:59:30  40  ,crr4
14:59:30  41  ,crr6
14:59:30  42  ,crr8
14:59:30  43  ,crr10
14:59:30  44  ,crr12
14:59:30  45  ,crr14
14:59:30  46  ,crr16
14:59:30  47  ,crr18
14:59:30  48  --
14:59:30  49  ,hh
14:59:30  50  ,d
14:59:30  51  ,w
14:59:30  52  ,mpm
14:59:30  53  ,mph
14:59:30  54  FROM svm6122
14:59:30  55  ORDER BY ydate
14:59:30  56  /

Table created.

Elapsed: 00:00:00.35
14:59:31 SQL> 
14:59:31 SQL> -- rpt
14:59:31 SQL> 
14:59:31 SQL> SELECT
14:59:31   2  pair
14:59:31   3  ,trend
14:59:31   4  ,gatt
14:59:31   5  ,COUNT(pair)
14:59:31   6  ,AVG(g6)
14:59:31   7  FROM svm6142
14:59:31   8  GROUP BY pair,trend,gatt
14:59:31   9  ORDER BY pair,trend,gatt
14:59:31  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7072  -.0019936
usd_chf 	-1 up	      3045 .003835688
usd_chf 	 1 nup	      6414  -.0015513
usd_chf 	 1 up	      2856 .003786732
usd_chf 	 1		72

Elapsed: 00:00:00.04
14:59:31 SQL> 
14:59:31 SQL> 
14:59:31 SQL> -- Derive NTILE based params:
14:59:31 SQL> 
14:59:31 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
14:59:31 SQL> CREATE TABLE svm6162 COMPRESS AS
14:59:31   2  SELECT
14:59:31   3  pair
14:59:31   4  ,ydate
14:59:31   5  ,prdate
14:59:31   6  ,clse
14:59:31   7  ,g6
14:59:31   8  ,gatt
14:59:31   9  ,gattn
14:59:31  10  ,trend
14:59:31  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
14:59:31  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
14:59:31  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
14:59:31  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
14:59:31  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
14:59:31  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
14:59:31  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
14:59:31  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
14:59:31  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
14:59:31  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
14:59:31  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
14:59:31  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
14:59:31  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
14:59:31  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
14:59:31  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
14:59:31  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
14:59:31  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
14:59:31  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
14:59:31  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
14:59:31  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
14:59:31  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
14:59:31  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
14:59:31  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
14:59:31  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
14:59:31  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
14:59:31  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
14:59:31  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
14:59:31  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
14:59:31  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
14:59:31  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
14:59:31  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
14:59:31  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
14:59:31  43  ,hh  att32
14:59:31  44  ,d   att33
14:59:31  45  ,w   att34
14:59:31  46  ,mpm att35
14:59:31  47  ,mph att36
14:59:31  48  ,trend att37
14:59:31  49  FROM svm6142
14:59:31  50  ORDER BY ydate
14:59:31  51  /

Table created.

Elapsed: 00:00:04.78
14:59:36 SQL> 
14:59:36 SQL> -- rpt
14:59:36 SQL> 
14:59:36 SQL> SELECT
14:59:36   2  pair
14:59:36   3  ,trend
14:59:36   4  ,gatt
14:59:36   5  ,COUNT(pair)
14:59:36   6  ,AVG(g6)
14:59:36   7  FROM svm6162
14:59:36   8  GROUP BY pair,trend,gatt
14:59:36   9  ORDER BY pair,trend,gatt
14:59:36  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7072  -.0019936
usd_chf 	-1 up	      3045 .003835688
usd_chf 	 1 nup	      6414  -.0015513
usd_chf 	 1 up	      2856 .003786732
usd_chf 	 1		72

Elapsed: 00:00:00.03
14:59:36 SQL> 
14:59:36 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
14:59:36 SQL> CREATE TABLE modsrc COMPRESS AS
14:59:36   2  SELECT
14:59:36   3  pair
14:59:36   4  ,ydate
14:59:36   5  ,prdate
14:59:36   6  ,trend
14:59:36   7  ,g6
14:59:36   8  ,gatt
14:59:36   9  ,gattn
14:59:36  10  FROM svm6162
14:59:36  11  /

Table created.

Elapsed: 00:00:00.08
14:59:36 SQL> 
14:59:36 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
14:59:36 SQL> 
14:59:36 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
14:59:36 SQL> CREATE TABLE chf_ms610 COMPRESS AS
14:59:36   2  SELECT
14:59:36   3  ydate
14:59:36   4  ,trend chf_trend
14:59:36   5  ,g6    chf_g6
14:59:36   6  ,gatt  chf_gatt
14:59:36   7  ,gattn chf_gattn
14:59:36   8  FROM modsrc
14:59:36   9  /

Table created.

Elapsed: 00:00:00.06
14:59:36 SQL> 
14:59:36 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
14:59:36 SQL> 
14:59:36 SQL> -- I need a copy of the attributes:
14:59:36 SQL> 
14:59:36 SQL> 
14:59:36 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.11
14:59:36 SQL> CREATE TABLE chf_att COMPRESS AS
14:59:36   2  SELECT
14:59:36   3  ydate
14:59:36   4  ,att00 chf_att00
14:59:36   5  ,att01 chf_att01
14:59:36   6  ,att02 chf_att02
14:59:36   7  ,att03 chf_att03
14:59:36   8  ,att04 chf_att04
14:59:36   9  ,att05 chf_att05
14:59:36  10  ,att06 chf_att06
14:59:36  11  ,att07 chf_att07
14:59:36  12  ,att08 chf_att08
14:59:36  13  ,att09 chf_att09
14:59:36  14  ,att10 chf_att10
14:59:36  15  ,att11 chf_att11
14:59:36  16  ,att12 chf_att12
14:59:36  17  ,att13 chf_att13
14:59:36  18  ,att14 chf_att14
14:59:36  19  ,att15 chf_att15
14:59:36  20  ,att16 chf_att16
14:59:36  21  ,att17 chf_att17
14:59:36  22  ,att18 chf_att18
14:59:36  23  ,att19 chf_att19
14:59:36  24  ,att20 chf_att20
14:59:36  25  ,att21 chf_att21
14:59:36  26  ,att22 chf_att22
14:59:36  27  ,att23 chf_att23
14:59:36  28  ,att24 chf_att24
14:59:36  29  ,att25 chf_att25
14:59:36  30  ,att26 chf_att26
14:59:36  31  ,att27 chf_att27
14:59:36  32  ,att28 chf_att28
14:59:36  33  ,att29 chf_att29
14:59:36  34  ,att30 chf_att30
14:59:36  35  ,att31 chf_att31
14:59:36  36  ,att32 chf_att32
14:59:36  37  ,att33 chf_att33
14:59:36  38  ,att34 chf_att34
14:59:36  39  ,att35 chf_att35
14:59:36  40  ,att36 chf_att36
14:59:36  41  ,att37 chf_att37
14:59:36  42  FROM svm6162
14:59:36  43  /

Table created.

Elapsed: 00:00:00.18
14:59:37 SQL> 
14:59:37 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
14:59:37 SQL> 
14:59:37 SQL> -- rpt
14:59:37 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19459

Elapsed: 00:00:00.88
14:59:38 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19459

Elapsed: 00:00:00.01
14:59:38 SQL> 
14:59:38 SQL> --
14:59:38 SQL> -- ech610.sql
14:59:38 SQL> --
14:59:38 SQL> 
14:59:38 SQL> -- Creates views and tables for backtesting a forex SVM strategy
14:59:38 SQL> 
14:59:38 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.31
14:59:38 SQL> 
14:59:38 SQL> -- I created di5min here:
14:59:38 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
14:59:38 SQL> 
14:59:38 SQL> CREATE OR REPLACE VIEW svm6102 AS
14:59:38   2  SELECT
14:59:38   3  pair
14:59:38   4  ,ydate
14:59:38   5  ,prdate
14:59:38   6  ,rownum rnum -- acts as t in my time-series
14:59:38   7  ,clse
14:59:38   8  -- Derive a bunch of attributes from clse, the latest price:
14:59:38   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
14:59:38  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
14:59:38  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
14:59:38  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
14:59:38  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
14:59:38  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
14:59:38  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
14:59:38  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
14:59:38  17  --
14:59:38  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
14:59:38  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
14:59:38  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
14:59:38  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
14:59:38  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
14:59:38  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
14:59:38  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
14:59:38  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
14:59:38  26  --
14:59:38  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
14:59:38  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
14:59:38  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
14:59:38  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
14:59:38  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
14:59:38  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
14:59:38  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
14:59:38  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
14:59:38  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
14:59:38  36  FROM di5min WHERE pair LIKE'%ech%'
14:59:38  37  AND ydate > sysdate - 95
14:59:38  38  ORDER BY ydate
14:59:38  39  /

View created.

Elapsed: 00:00:00.04
14:59:38 SQL> 
14:59:38 SQL> -- rpt
14:59:38 SQL> 
14:59:38 SQL> SELECT
14:59:38   2  pair
14:59:38   3  ,COUNT(pair)
14:59:38   4  ,MIN(clse),MAX(clse)
14:59:38   5  ,MIN(avg6),MAX(avg6)
14:59:38   6  ,MIN(ydate),MAX(ydate)
14:59:38   7  FROM svm6102
14:59:38   8  GROUP BY pair
14:59:38   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19458 1.24192946 1.38284305 1.24320711 1.37986485 2010-10-03 20:55:01 2011-01-05 14:55:00

Elapsed: 00:00:00.80
14:59:39 SQL> 
14:59:39 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
14:59:39 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
14:59:39 SQL> CREATE TABLE svm6122 COMPRESS AS
14:59:39   2  SELECT
14:59:39   3  pair
14:59:39   4  ,ydate
14:59:39   5  ,prdate
14:59:39   6  ,clse
14:59:39   7  -- g6 is important. I want to predict g6:
14:59:39   8  ,ld6 - clse g6
14:59:39   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
14:59:39  10  -- I want more attributes from the ones I derived above:
14:59:39  11  -- clse relation to moving-min
14:59:39  12  ,clse-min4  cm4
14:59:39  13  ,clse-min6  cm6
14:59:39  14  ,clse-min8  cm8
14:59:39  15  ,clse-min10 cm10
14:59:39  16  ,clse-min12 cm12
14:59:39  17  ,clse-min14 cm14
14:59:39  18  ,clse-min16 cm16
14:59:39  19  ,clse-min18 cm18
14:59:39  20  -- clse relation to moving-avg
14:59:39  21  ,clse-avg4  ca4
14:59:39  22  ,clse-avg6  ca6
14:59:39  23  ,clse-avg8  ca8
14:59:39  24  ,clse-avg10 ca10
14:59:39  25  ,clse-avg12 ca12
14:59:39  26  ,clse-avg14 ca14
14:59:39  27  ,clse-avg16 ca16
14:59:39  28  ,clse-avg18 ca18
14:59:39  29  -- clse relation to moving-max
14:59:39  30  ,clse-max4  cx4
14:59:39  31  ,clse-max6  cx6
14:59:39  32  ,clse-max8  cx8
14:59:39  33  ,clse-max10 cx10
14:59:39  34  ,clse-max12 cx12
14:59:39  35  ,clse-max14 cx14
14:59:39  36  ,clse-max16 cx16
14:59:39  37  ,clse-max18 cx18
14:59:39  38  -- Derive more attributes.
14:59:39  39  -- I want to use CORR() here to help SVM see the shape of the series.
14:59:39  40  -- But COVAR_POP is more stable:
14:59:39  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
14:59:39  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
14:59:39  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
14:59:39  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
14:59:39  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
14:59:39  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
14:59:39  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
14:59:39  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
14:59:39  49  -- Derive date related attributes:
14:59:39  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
14:59:39  51  ,0+TO_CHAR(ydate,'D')d
14:59:39  52  ,0+TO_CHAR(ydate,'W')w
14:59:39  53  -- mpm stands for minutes-past-midnight:
14:59:39  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
14:59:39  55  -- mph stands for minutes-past-hour:
14:59:39  56  ,0+TO_CHAR(ydate,'MI')mph
14:59:39  57  FROM svm6102
14:59:39  58  ORDER BY ydate
14:59:39  59  /

Table created.

Elapsed: 00:00:02.07
14:59:41 SQL> 
14:59:41 SQL> -- rpt
14:59:41 SQL> 
14:59:41 SQL> SELECT
14:59:41   2  pair
14:59:41   3  ,COUNT(pair)
14:59:41   4  ,MIN(clse),MAX(clse)
14:59:41   5  ,MIN(ydate),MAX(ydate)
14:59:41   6  FROM svm6122
14:59:41   7  GROUP BY pair
14:59:41   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19458 1.24192946 1.38284305 2010-10-03 20:55:01 2011-01-05 14:55:00

Elapsed: 00:00:00.03
14:59:41 SQL> 
14:59:41 SQL> -- Prepare for derivation of NTILE based params:
14:59:41 SQL> 
14:59:41 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.19
14:59:42 SQL> CREATE TABLE svm6142 COMPRESS AS
14:59:42   2  SELECT
14:59:42   3  pair
14:59:42   4  ,ydate
14:59:42   5  ,prdate
14:59:42   6  ,clse
14:59:42   7  ,g6
14:59:42   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
14:59:42   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
14:59:42  10  ,CASE WHEN trend IS NULL THEN 1
14:59:42  11  	    WHEN trend =0      THEN 1
14:59:42  12  	    ELSE trend END trend
14:59:42  13  ,cm4
14:59:42  14  ,cm6
14:59:42  15  ,cm8
14:59:42  16  ,cm10
14:59:42  17  ,cm12
14:59:42  18  ,cm14
14:59:42  19  ,cm16
14:59:42  20  ,cm18
14:59:42  21  --
14:59:42  22  ,ca4
14:59:42  23  ,ca6
14:59:42  24  ,ca8
14:59:42  25  ,ca10
14:59:42  26  ,ca12
14:59:42  27  ,ca14
14:59:42  28  ,ca16
14:59:42  29  ,ca18
14:59:42  30  --
14:59:42  31  ,cx4
14:59:42  32  ,cx6
14:59:42  33  ,cx8
14:59:42  34  ,cx10
14:59:42  35  ,cx12
14:59:42  36  ,cx14
14:59:42  37  ,cx16
14:59:42  38  ,cx18
14:59:42  39  --
14:59:42  40  ,crr4
14:59:42  41  ,crr6
14:59:42  42  ,crr8
14:59:42  43  ,crr10
14:59:42  44  ,crr12
14:59:42  45  ,crr14
14:59:42  46  ,crr16
14:59:42  47  ,crr18
14:59:42  48  --
14:59:42  49  ,hh
14:59:42  50  ,d
14:59:42  51  ,w
14:59:42  52  ,mpm
14:59:42  53  ,mph
14:59:42  54  FROM svm6122
14:59:42  55  ORDER BY ydate
14:59:42  56  /

Table created.

Elapsed: 00:00:00.41
14:59:42 SQL> 
14:59:42 SQL> -- rpt
14:59:42 SQL> 
14:59:42 SQL> SELECT
14:59:42   2  pair
14:59:42   3  ,trend
14:59:42   4  ,gatt
14:59:42   5  ,COUNT(pair)
14:59:42   6  ,AVG(g6)
14:59:42   7  FROM svm6142
14:59:42   8  GROUP BY pair,trend,gatt
14:59:42   9  ORDER BY pair,trend,gatt
14:59:42  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6658 -.00222518
ech_usd 	-1 up	      3552 .003510941
ech_usd 	-1		30
ech_usd 	 1 nup	      6320 -.00241051
ech_usd 	 1 up	      2856 .004073325
ech_usd 	 1		42

6 rows selected.

Elapsed: 00:00:00.04
14:59:42 SQL> 
14:59:42 SQL> 
14:59:42 SQL> -- Derive NTILE based params:
14:59:42 SQL> 
14:59:42 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
14:59:42 SQL> CREATE TABLE svm6162 COMPRESS AS
14:59:42   2  SELECT
14:59:42   3  pair
14:59:42   4  ,ydate
14:59:42   5  ,prdate
14:59:42   6  ,clse
14:59:42   7  ,g6
14:59:42   8  ,gatt
14:59:42   9  ,gattn
14:59:42  10  ,trend
14:59:42  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
14:59:42  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
14:59:42  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
14:59:42  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
14:59:42  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
14:59:42  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
14:59:42  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
14:59:42  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
14:59:42  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
14:59:42  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
14:59:42  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
14:59:42  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
14:59:42  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
14:59:42  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
14:59:42  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
14:59:42  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
14:59:42  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
14:59:42  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
14:59:42  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
14:59:42  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
14:59:42  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
14:59:42  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
14:59:42  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
14:59:42  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
14:59:42  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
14:59:42  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
14:59:42  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
14:59:42  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
14:59:42  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
14:59:42  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
14:59:42  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
14:59:42  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
14:59:42  43  ,hh  att32
14:59:42  44  ,d   att33
14:59:42  45  ,w   att34
14:59:42  46  ,mpm att35
14:59:42  47  ,mph att36
14:59:42  48  ,trend att37
14:59:42  49  FROM svm6142
14:59:42  50  ORDER BY ydate
14:59:42  51  /

Table created.

Elapsed: 00:00:04.85
14:59:47 SQL> 
14:59:47 SQL> -- rpt
14:59:47 SQL> 
14:59:47 SQL> SELECT
14:59:47   2  pair
14:59:47   3  ,trend
14:59:47   4  ,gatt
14:59:47   5  ,COUNT(pair)
14:59:47   6  ,AVG(g6)
14:59:47   7  FROM svm6162
14:59:47   8  GROUP BY pair,trend,gatt
14:59:47   9  ORDER BY pair,trend,gatt
14:59:47  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6658 -.00222518
ech_usd 	-1 up	      3552 .003510941
ech_usd 	-1		30
ech_usd 	 1 nup	      6320 -.00241051
ech_usd 	 1 up	      2856 .004073325
ech_usd 	 1		42

6 rows selected.

Elapsed: 00:00:00.03
14:59:47 SQL> 
14:59:47 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.10
14:59:47 SQL> CREATE TABLE modsrc COMPRESS AS
14:59:47   2  SELECT
14:59:47   3  pair
14:59:47   4  ,ydate
14:59:47   5  ,prdate
14:59:47   6  ,trend
14:59:47   7  ,g6
14:59:47   8  ,gatt
14:59:47   9  ,gattn
14:59:47  10  FROM svm6162
14:59:47  11  /

Table created.

Elapsed: 00:00:00.08
14:59:47 SQL> 
14:59:47 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
14:59:47 SQL> 
14:59:47 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
14:59:47 SQL> CREATE TABLE ech_ms610 COMPRESS AS
14:59:47   2  SELECT
14:59:47   3  ydate
14:59:47   4  ,trend ech_trend
14:59:47   5  ,g6    ech_g6
14:59:47   6  ,gatt  ech_gatt
14:59:47   7  ,gattn ech_gattn
14:59:47   8  FROM modsrc
14:59:47   9  /

Table created.

Elapsed: 00:00:00.07
14:59:48 SQL> 
14:59:48 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
14:59:48 SQL> 
14:59:48 SQL> -- I need a copy of the attributes:
14:59:48 SQL> 
14:59:48 SQL> 
14:59:48 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.05
14:59:48 SQL> CREATE TABLE ech_att COMPRESS AS
14:59:48   2  SELECT
14:59:48   3  ydate
14:59:48   4  ,att00 ech_att00
14:59:48   5  ,att01 ech_att01
14:59:48   6  ,att02 ech_att02
14:59:48   7  ,att03 ech_att03
14:59:48   8  ,att04 ech_att04
14:59:48   9  ,att05 ech_att05
14:59:48  10  ,att06 ech_att06
14:59:48  11  ,att07 ech_att07
14:59:48  12  ,att08 ech_att08
14:59:48  13  ,att09 ech_att09
14:59:48  14  ,att10 ech_att10
14:59:48  15  ,att11 ech_att11
14:59:48  16  ,att12 ech_att12
14:59:48  17  ,att13 ech_att13
14:59:48  18  ,att14 ech_att14
14:59:48  19  ,att15 ech_att15
14:59:48  20  ,att16 ech_att16
14:59:48  21  ,att17 ech_att17
14:59:48  22  ,att18 ech_att18
14:59:48  23  ,att19 ech_att19
14:59:48  24  ,att20 ech_att20
14:59:48  25  ,att21 ech_att21
14:59:48  26  ,att22 ech_att22
14:59:48  27  ,att23 ech_att23
14:59:48  28  ,att24 ech_att24
14:59:48  29  ,att25 ech_att25
14:59:48  30  ,att26 ech_att26
14:59:48  31  ,att27 ech_att27
14:59:48  32  ,att28 ech_att28
14:59:48  33  ,att29 ech_att29
14:59:48  34  ,att30 ech_att30
14:59:48  35  ,att31 ech_att31
14:59:48  36  ,att32 ech_att32
14:59:48  37  ,att33 ech_att33
14:59:48  38  ,att34 ech_att34
14:59:48  39  ,att35 ech_att35
14:59:48  40  ,att36 ech_att36
14:59:48  41  ,att37 ech_att37
14:59:48  42  FROM svm6162
14:59:48  43  /

Table created.

Elapsed: 00:00:00.18
14:59:48 SQL> 
14:59:48 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
14:59:48 SQL> 
14:59:48 SQL> -- rpt
14:59:48 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19458

Elapsed: 00:00:00.77
14:59:49 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19458

Elapsed: 00:00:00.00
14:59:49 SQL> 
14:59:49 SQL> --
14:59:49 SQL> -- egb610.sql
14:59:49 SQL> --
14:59:49 SQL> 
14:59:49 SQL> -- Creates views and tables for backtesting a forex SVM strategy
14:59:49 SQL> 
14:59:49 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
14:59:50 SQL> 
14:59:50 SQL> -- I created di5min here:
14:59:50 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
14:59:50 SQL> 
14:59:50 SQL> CREATE OR REPLACE VIEW svm6102 AS
14:59:50   2  SELECT
14:59:50   3  pair
14:59:50   4  ,ydate
14:59:50   5  ,prdate
14:59:50   6  ,rownum rnum -- acts as t in my time-series
14:59:50   7  ,clse
14:59:50   8  -- Derive a bunch of attributes from clse, the latest price:
14:59:50   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
14:59:50  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
14:59:50  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
14:59:50  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
14:59:50  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
14:59:50  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
14:59:50  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
14:59:50  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
14:59:50  17  --
14:59:50  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
14:59:50  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
14:59:50  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
14:59:50  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
14:59:50  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
14:59:50  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
14:59:50  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
14:59:50  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
14:59:50  26  --
14:59:50  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
14:59:50  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
14:59:50  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
14:59:50  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
14:59:50  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
14:59:50  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
14:59:50  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
14:59:50  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
14:59:50  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
14:59:50  36  FROM di5min WHERE pair LIKE'%egb%'
14:59:50  37  AND ydate > sysdate - 95
14:59:50  38  ORDER BY ydate
14:59:50  39  /

View created.

Elapsed: 00:00:00.06
14:59:50 SQL> 
14:59:50 SQL> -- rpt
14:59:50 SQL> 
14:59:50 SQL> SELECT
14:59:50   2  pair
14:59:50   3  ,COUNT(pair)
14:59:50   4  ,MIN(clse),MAX(clse)
14:59:50   5  ,MIN(avg6),MAX(avg6)
14:59:50   6  ,MIN(ydate),MAX(ydate)
14:59:50   7  FROM svm6102
14:59:50   8  GROUP BY pair
14:59:50   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19457 .833520557 .893920122 .834199029 .892400287 2010-10-03 20:55:01 2011-01-05 14:55:00

Elapsed: 00:00:00.96
14:59:51 SQL> 
14:59:51 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
14:59:51 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.27
14:59:51 SQL> CREATE TABLE svm6122 COMPRESS AS
14:59:51   2  SELECT
14:59:51   3  pair
14:59:51   4  ,ydate
14:59:51   5  ,prdate
14:59:51   6  ,clse
14:59:51   7  -- g6 is important. I want to predict g6:
14:59:51   8  ,ld6 - clse g6
14:59:51   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
14:59:51  10  -- I want more attributes from the ones I derived above:
14:59:51  11  -- clse relation to moving-min
14:59:51  12  ,clse-min4  cm4
14:59:51  13  ,clse-min6  cm6
14:59:51  14  ,clse-min8  cm8
14:59:51  15  ,clse-min10 cm10
14:59:51  16  ,clse-min12 cm12
14:59:51  17  ,clse-min14 cm14
14:59:51  18  ,clse-min16 cm16
14:59:51  19  ,clse-min18 cm18
14:59:51  20  -- clse relation to moving-avg
14:59:51  21  ,clse-avg4  ca4
14:59:51  22  ,clse-avg6  ca6
14:59:51  23  ,clse-avg8  ca8
14:59:51  24  ,clse-avg10 ca10
14:59:51  25  ,clse-avg12 ca12
14:59:51  26  ,clse-avg14 ca14
14:59:51  27  ,clse-avg16 ca16
14:59:51  28  ,clse-avg18 ca18
14:59:51  29  -- clse relation to moving-max
14:59:51  30  ,clse-max4  cx4
14:59:51  31  ,clse-max6  cx6
14:59:51  32  ,clse-max8  cx8
14:59:51  33  ,clse-max10 cx10
14:59:51  34  ,clse-max12 cx12
14:59:51  35  ,clse-max14 cx14
14:59:51  36  ,clse-max16 cx16
14:59:51  37  ,clse-max18 cx18
14:59:51  38  -- Derive more attributes.
14:59:51  39  -- I want to use CORR() here to help SVM see the shape of the series.
14:59:51  40  -- But COVAR_POP is more stable:
14:59:51  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
14:59:51  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
14:59:51  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
14:59:51  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
14:59:51  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
14:59:51  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
14:59:51  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
14:59:51  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
14:59:51  49  -- Derive date related attributes:
14:59:51  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
14:59:51  51  ,0+TO_CHAR(ydate,'D')d
14:59:51  52  ,0+TO_CHAR(ydate,'W')w
14:59:51  53  -- mpm stands for minutes-past-midnight:
14:59:51  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
14:59:51  55  -- mph stands for minutes-past-hour:
14:59:51  56  ,0+TO_CHAR(ydate,'MI')mph
14:59:51  57  FROM svm6102
14:59:51  58  ORDER BY ydate
14:59:51  59  /

Table created.

Elapsed: 00:00:02.52
14:59:53 SQL> 
14:59:53 SQL> -- rpt
14:59:53 SQL> 
14:59:53 SQL> SELECT
14:59:53   2  pair
14:59:53   3  ,COUNT(pair)
14:59:53   4  ,MIN(clse),MAX(clse)
14:59:53   5  ,MIN(ydate),MAX(ydate)
14:59:53   6  FROM svm6122
14:59:53   7  GROUP BY pair
14:59:53   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19457 .833520557 .893920122 2010-10-03 20:55:01 2011-01-05 14:55:00

Elapsed: 00:00:00.07
14:59:53 SQL> 
14:59:53 SQL> -- Prepare for derivation of NTILE based params:
14:59:53 SQL> 
14:59:53 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.42
14:59:54 SQL> CREATE TABLE svm6142 COMPRESS AS
14:59:54   2  SELECT
14:59:54   3  pair
14:59:54   4  ,ydate
14:59:54   5  ,prdate
14:59:54   6  ,clse
14:59:54   7  ,g6
14:59:54   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
14:59:54   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
14:59:54  10  ,CASE WHEN trend IS NULL THEN 1
14:59:54  11  	    WHEN trend =0      THEN 1
14:59:54  12  	    ELSE trend END trend
14:59:54  13  ,cm4
14:59:54  14  ,cm6
14:59:54  15  ,cm8
14:59:54  16  ,cm10
14:59:54  17  ,cm12
14:59:54  18  ,cm14
14:59:54  19  ,cm16
14:59:54  20  ,cm18
14:59:54  21  --
14:59:54  22  ,ca4
14:59:54  23  ,ca6
14:59:54  24  ,ca8
14:59:54  25  ,ca10
14:59:54  26  ,ca12
14:59:54  27  ,ca14
14:59:54  28  ,ca16
14:59:54  29  ,ca18
14:59:54  30  --
14:59:54  31  ,cx4
14:59:54  32  ,cx6
14:59:54  33  ,cx8
14:59:54  34  ,cx10
14:59:54  35  ,cx12
14:59:54  36  ,cx14
14:59:54  37  ,cx16
14:59:54  38  ,cx18
14:59:54  39  --
14:59:54  40  ,crr4
14:59:54  41  ,crr6
14:59:54  42  ,crr8
14:59:54  43  ,crr10
14:59:54  44  ,crr12
14:59:54  45  ,crr14
14:59:54  46  ,crr16
14:59:54  47  ,crr18
14:59:54  48  --
14:59:54  49  ,hh
14:59:54  50  ,d
14:59:54  51  ,w
14:59:54  52  ,mpm
14:59:54  53  ,mph
14:59:54  54  FROM svm6122
14:59:54  55  ORDER BY ydate
14:59:54  56  /

Table created.

Elapsed: 00:00:00.43
14:59:54 SQL> 
14:59:54 SQL> -- rpt
14:59:54 SQL> 
14:59:54 SQL> SELECT
14:59:54   2  pair
14:59:54   3  ,trend
14:59:54   4  ,gatt
14:59:54   5  ,COUNT(pair)
14:59:54   6  ,AVG(g6)
14:59:54   7  FROM svm6142
14:59:54   8  GROUP BY pair,trend,gatt
14:59:54   9  ORDER BY pair,trend,gatt
14:59:54  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7679 -.00104701
egb_usd 	-1 up	      2626 .002933187
egb_usd 	-1		69
egb_usd 	 1 nup	      6463 -.00137572
egb_usd 	 1 up	      2617   .0029282
egb_usd 	 1		 3

6 rows selected.

Elapsed: 00:00:00.05
14:59:54 SQL> 
14:59:54 SQL> 
14:59:54 SQL> -- Derive NTILE based params:
14:59:54 SQL> 
14:59:54 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.33
14:59:55 SQL> CREATE TABLE svm6162 COMPRESS AS
14:59:55   2  SELECT
14:59:55   3  pair
14:59:55   4  ,ydate
14:59:55   5  ,prdate
14:59:55   6  ,clse
14:59:55   7  ,g6
14:59:55   8  ,gatt
14:59:55   9  ,gattn
14:59:55  10  ,trend
14:59:55  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
14:59:55  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
14:59:55  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
14:59:55  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
14:59:55  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
14:59:55  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
14:59:55  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
14:59:55  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
14:59:55  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
14:59:55  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
14:59:55  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
14:59:55  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
14:59:55  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
14:59:55  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
14:59:55  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
14:59:55  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
14:59:55  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
14:59:55  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
14:59:55  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
14:59:55  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
14:59:55  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
14:59:55  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
14:59:55  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
14:59:55  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
14:59:55  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
14:59:55  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
14:59:55  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
14:59:55  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
14:59:55  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
14:59:55  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
14:59:55  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
14:59:55  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
14:59:55  43  ,hh  att32
14:59:55  44  ,d   att33
14:59:55  45  ,w   att34
14:59:55  46  ,mpm att35
14:59:55  47  ,mph att36
14:59:55  48  ,trend att37
14:59:55  49  FROM svm6142
14:59:55  50  ORDER BY ydate
14:59:55  51  /

Table created.

Elapsed: 00:00:05.54
15:00:00 SQL> 
15:00:00 SQL> -- rpt
15:00:00 SQL> 
15:00:00 SQL> SELECT
15:00:00   2  pair
15:00:00   3  ,trend
15:00:00   4  ,gatt
15:00:00   5  ,COUNT(pair)
15:00:00   6  ,AVG(g6)
15:00:00   7  FROM svm6162
15:00:00   8  GROUP BY pair,trend,gatt
15:00:00   9  ORDER BY pair,trend,gatt
15:00:00  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7679 -.00104701
egb_usd 	-1 up	      2626 .002933187
egb_usd 	-1		69
egb_usd 	 1 nup	      6463 -.00137572
egb_usd 	 1 up	      2617   .0029282
egb_usd 	 1		 3

6 rows selected.

Elapsed: 00:00:00.03
15:00:00 SQL> 
15:00:00 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.22
15:00:00 SQL> CREATE TABLE modsrc COMPRESS AS
15:00:00   2  SELECT
15:00:00   3  pair
15:00:00   4  ,ydate
15:00:00   5  ,prdate
15:00:00   6  ,trend
15:00:00   7  ,g6
15:00:00   8  ,gatt
15:00:00   9  ,gattn
15:00:00  10  FROM svm6162
15:00:00  11  /

Table created.

Elapsed: 00:00:00.08
15:00:01 SQL> 
15:00:01 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
15:00:01 SQL> 
15:00:01 SQL> DROP   TABLE egb_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
15:00:01 SQL> CREATE TABLE egb_ms610 COMPRESS AS
15:00:01   2  SELECT
15:00:01   3  ydate
15:00:01   4  ,trend egb_trend
15:00:01   5  ,g6    egb_g6
15:00:01   6  ,gatt  egb_gatt
15:00:01   7  ,gattn egb_gattn
15:00:01   8  FROM modsrc
15:00:01   9  /

Table created.

Elapsed: 00:00:00.06
15:00:01 SQL> 
15:00:01 SQL> ANALYZE TABLE egb_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
15:00:01 SQL> 
15:00:01 SQL> -- I need a copy of the attributes:
15:00:01 SQL> 
15:00:01 SQL> 
15:00:01 SQL> DROP   TABLE egb_att;

Table dropped.

Elapsed: 00:00:00.06
15:00:01 SQL> CREATE TABLE egb_att COMPRESS AS
15:00:01   2  SELECT
15:00:01   3  ydate
15:00:01   4  ,att00 egb_att00
15:00:01   5  ,att01 egb_att01
15:00:01   6  ,att02 egb_att02
15:00:01   7  ,att03 egb_att03
15:00:01   8  ,att04 egb_att04
15:00:01   9  ,att05 egb_att05
15:00:01  10  ,att06 egb_att06
15:00:01  11  ,att07 egb_att07
15:00:01  12  ,att08 egb_att08
15:00:01  13  ,att09 egb_att09
15:00:01  14  ,att10 egb_att10
15:00:01  15  ,att11 egb_att11
15:00:01  16  ,att12 egb_att12
15:00:01  17  ,att13 egb_att13
15:00:01  18  ,att14 egb_att14
15:00:01  19  ,att15 egb_att15
15:00:01  20  ,att16 egb_att16
15:00:01  21  ,att17 egb_att17
15:00:01  22  ,att18 egb_att18
15:00:01  23  ,att19 egb_att19
15:00:01  24  ,att20 egb_att20
15:00:01  25  ,att21 egb_att21
15:00:01  26  ,att22 egb_att22
15:00:01  27  ,att23 egb_att23
15:00:01  28  ,att24 egb_att24
15:00:01  29  ,att25 egb_att25
15:00:01  30  ,att26 egb_att26
15:00:01  31  ,att27 egb_att27
15:00:01  32  ,att28 egb_att28
15:00:01  33  ,att29 egb_att29
15:00:01  34  ,att30 egb_att30
15:00:01  35  ,att31 egb_att31
15:00:01  36  ,att32 egb_att32
15:00:01  37  ,att33 egb_att33
15:00:01  38  ,att34 egb_att34
15:00:01  39  ,att35 egb_att35
15:00:01  40  ,att36 egb_att36
15:00:01  41  ,att37 egb_att37
15:00:01  42  FROM svm6162
15:00:01  43  /

Table created.

Elapsed: 00:00:00.24
15:00:01 SQL> 
15:00:01 SQL> ANALYZE TABLE egb_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
15:00:02 SQL> 
15:00:02 SQL> -- rpt
15:00:02 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19457

Elapsed: 00:00:00.94
15:00:03 SQL> SELECT COUNT(*)FROM egb_att;

  COUNT(*)
----------
     19457

Elapsed: 00:00:00.00
15:00:03 SQL> 
15:00:03 SQL> --
15:00:03 SQL> -- ejp610.sql
15:00:03 SQL> --
15:00:03 SQL> 
15:00:03 SQL> -- Creates views and tables for backtesting a forex SVM strategy
15:00:03 SQL> 
15:00:03 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.63
15:00:03 SQL> 
15:00:03 SQL> -- I created di5min here:
15:00:03 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
15:00:03 SQL> 
15:00:03 SQL> CREATE OR REPLACE VIEW svm6102 AS
15:00:03   2  SELECT
15:00:03   3  pair
15:00:03   4  ,ydate
15:00:03   5  ,prdate
15:00:03   6  ,rownum rnum -- acts as t in my time-series
15:00:03   7  ,clse
15:00:03   8  -- Derive a bunch of attributes from clse, the latest price:
15:00:03   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
15:00:03  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
15:00:03  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
15:00:03  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
15:00:03  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
15:00:03  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
15:00:03  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
15:00:03  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
15:00:03  17  --
15:00:03  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
15:00:03  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
15:00:03  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
15:00:03  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
15:00:03  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
15:00:03  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
15:00:03  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
15:00:03  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
15:00:03  26  --
15:00:03  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
15:00:03  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
15:00:03  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
15:00:03  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
15:00:03  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
15:00:03  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
15:00:03  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
15:00:03  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
15:00:03  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
15:00:03  36  FROM di5min WHERE pair LIKE'%ejp%'
15:00:03  37  AND ydate > sysdate - 95
15:00:03  38  ORDER BY ydate
15:00:03  39  /

View created.

Elapsed: 00:00:00.05
15:00:03 SQL> 
15:00:03 SQL> -- rpt
15:00:03 SQL> 
15:00:03 SQL> SELECT
15:00:03   2  pair
15:00:03   3  ,COUNT(pair)
15:00:03   4  ,MIN(clse),MAX(clse)
15:00:03   5  ,MIN(avg6),MAX(avg6)
15:00:03   6  ,MIN(ydate),MAX(ydate)
15:00:03   7  FROM svm6102
15:00:03   8  GROUP BY pair
15:00:03   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ejp_usd       19455 107.643765	115.63485 107.776148 115.509678 2010-10-03 20:55:01 2011-01-05 14:55:00

Elapsed: 00:00:00.88
15:00:04 SQL> 
15:00:04 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
15:00:04 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.30
15:00:05 SQL> CREATE TABLE svm6122 COMPRESS AS
15:00:05   2  SELECT
15:00:05   3  pair
15:00:05   4  ,ydate
15:00:05   5  ,prdate
15:00:05   6  ,clse
15:00:05   7  -- g6 is important. I want to predict g6:
15:00:05   8  ,ld6 - clse g6
15:00:05   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
15:00:05  10  -- I want more attributes from the ones I derived above:
15:00:05  11  -- clse relation to moving-min
15:00:05  12  ,clse-min4  cm4
15:00:05  13  ,clse-min6  cm6
15:00:05  14  ,clse-min8  cm8
15:00:05  15  ,clse-min10 cm10
15:00:05  16  ,clse-min12 cm12
15:00:05  17  ,clse-min14 cm14
15:00:05  18  ,clse-min16 cm16
15:00:05  19  ,clse-min18 cm18
15:00:05  20  -- clse relation to moving-avg
15:00:05  21  ,clse-avg4  ca4
15:00:05  22  ,clse-avg6  ca6
15:00:05  23  ,clse-avg8  ca8
15:00:05  24  ,clse-avg10 ca10
15:00:05  25  ,clse-avg12 ca12
15:00:05  26  ,clse-avg14 ca14
15:00:05  27  ,clse-avg16 ca16
15:00:05  28  ,clse-avg18 ca18
15:00:05  29  -- clse relation to moving-max
15:00:05  30  ,clse-max4  cx4
15:00:05  31  ,clse-max6  cx6
15:00:05  32  ,clse-max8  cx8
15:00:05  33  ,clse-max10 cx10
15:00:05  34  ,clse-max12 cx12
15:00:05  35  ,clse-max14 cx14
15:00:05  36  ,clse-max16 cx16
15:00:05  37  ,clse-max18 cx18
15:00:05  38  -- Derive more attributes.
15:00:05  39  -- I want to use CORR() here to help SVM see the shape of the series.
15:00:05  40  -- But COVAR_POP is more stable:
15:00:05  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
15:00:05  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
15:00:05  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
15:00:05  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
15:00:05  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
15:00:05  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
15:00:05  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
15:00:05  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
15:00:05  49  -- Derive date related attributes:
15:00:05  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
15:00:05  51  ,0+TO_CHAR(ydate,'D')d
15:00:05  52  ,0+TO_CHAR(ydate,'W')w
15:00:05  53  -- mpm stands for minutes-past-midnight:
15:00:05  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
15:00:05  55  -- mph stands for minutes-past-hour:
15:00:05  56  ,0+TO_CHAR(ydate,'MI')mph
15:00:05  57  FROM svm6102
15:00:05  58  ORDER BY ydate
15:00:05  59  /

Table created.

Elapsed: 00:00:02.09
15:00:07 SQL> 
15:00:07 SQL> -- rpt
15:00:07 SQL> 
15:00:07 SQL> SELECT
15:00:07   2  pair
15:00:07   3  ,COUNT(pair)
15:00:07   4  ,MIN(clse),MAX(clse)
15:00:07   5  ,MIN(ydate),MAX(ydate)
15:00:07   6  FROM svm6122
15:00:07   7  GROUP BY pair
15:00:07   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ejp_usd       19455 107.643765	115.63485 2010-10-03 20:55:01 2011-01-05 14:55:00

Elapsed: 00:00:00.04
15:00:07 SQL> 
15:00:07 SQL> -- Prepare for derivation of NTILE based params:
15:00:07 SQL> 
15:00:07 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.24
15:00:07 SQL> CREATE TABLE svm6142 COMPRESS AS
15:00:07   2  SELECT
15:00:07   3  pair
15:00:07   4  ,ydate
15:00:07   5  ,prdate
15:00:07   6  ,clse
15:00:07   7  ,g6
15:00:07   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
15:00:07   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
15:00:07  10  ,CASE WHEN trend IS NULL THEN 1
15:00:07  11  	    WHEN trend =0      THEN 1
15:00:07  12  	    ELSE trend END trend
15:00:07  13  ,cm4
15:00:07  14  ,cm6
15:00:07  15  ,cm8
15:00:07  16  ,cm10
15:00:07  17  ,cm12
15:00:07  18  ,cm14
15:00:07  19  ,cm16
15:00:07  20  ,cm18
15:00:07  21  --
15:00:07  22  ,ca4
15:00:07  23  ,ca6
15:00:07  24  ,ca8
15:00:07  25  ,ca10
15:00:07  26  ,ca12
15:00:07  27  ,ca14
15:00:07  28  ,ca16
15:00:07  29  ,ca18
15:00:07  30  --
15:00:07  31  ,cx4
15:00:07  32  ,cx6
15:00:07  33  ,cx8
15:00:07  34  ,cx10
15:00:07  35  ,cx12
15:00:07  36  ,cx14
15:00:07  37  ,cx16
15:00:07  38  ,cx18
15:00:07  39  --
15:00:07  40  ,crr4
15:00:07  41  ,crr6
15:00:07  42  ,crr8
15:00:07  43  ,crr10
15:00:07  44  ,crr12
15:00:07  45  ,crr14
15:00:07  46  ,crr16
15:00:07  47  ,crr18
15:00:07  48  --
15:00:07  49  ,hh
15:00:07  50  ,d
15:00:07  51  ,w
15:00:07  52  ,mpm
15:00:07  53  ,mph
15:00:07  54  FROM svm6122
15:00:07  55  ORDER BY ydate
15:00:07  56  /

Table created.

Elapsed: 00:00:00.37
15:00:07 SQL> 
15:00:07 SQL> -- rpt
15:00:07 SQL> 
15:00:07 SQL> SELECT
15:00:07   2  pair
15:00:07   3  ,trend
15:00:07   4  ,gatt
15:00:07   5  ,COUNT(pair)
15:00:07   6  ,AVG(g6)
15:00:07   7  FROM svm6142
15:00:07   8  GROUP BY pair,trend,gatt
15:00:07   9  ORDER BY pair,trend,gatt
15:00:07  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4986 -.32090265
ejp_usd 	-1 up	      4882 .272394929
ejp_usd 	-1		51
ejp_usd 	 1 nup	      4940 -.30127115
ejp_usd 	 1 up	      4575 .290080166
ejp_usd 	 1		21

6 rows selected.

Elapsed: 00:00:00.04
15:00:07 SQL> 
15:00:07 SQL> 
15:00:07 SQL> -- Derive NTILE based params:
15:00:07 SQL> 
15:00:07 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
15:00:08 SQL> CREATE TABLE svm6162 COMPRESS AS
15:00:08   2  SELECT
15:00:08   3  pair
15:00:08   4  ,ydate
15:00:08   5  ,prdate
15:00:08   6  ,clse
15:00:08   7  ,g6
15:00:08   8  ,gatt
15:00:08   9  ,gattn
15:00:08  10  ,trend
15:00:08  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
15:00:08  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
15:00:08  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
15:00:08  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
15:00:08  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
15:00:08  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
15:00:08  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
15:00:08  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
15:00:08  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
15:00:08  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
15:00:08  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
15:00:08  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
15:00:08  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
15:00:08  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
15:00:08  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
15:00:08  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
15:00:08  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
15:00:08  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
15:00:08  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
15:00:08  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
15:00:08  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
15:00:08  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
15:00:08  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
15:00:08  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
15:00:08  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
15:00:08  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
15:00:08  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
15:00:08  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
15:00:08  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
15:00:08  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
15:00:08  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
15:00:08  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
15:00:08  43  ,hh  att32
15:00:08  44  ,d   att33
15:00:08  45  ,w   att34
15:00:08  46  ,mpm att35
15:00:08  47  ,mph att36
15:00:08  48  ,trend att37
15:00:08  49  FROM svm6142
15:00:08  50  ORDER BY ydate
15:00:08  51  /

Table created.

Elapsed: 00:00:04.88
15:00:12 SQL> 
15:00:12 SQL> -- rpt
15:00:12 SQL> 
15:00:12 SQL> SELECT
15:00:12   2  pair
15:00:12   3  ,trend
15:00:12   4  ,gatt
15:00:12   5  ,COUNT(pair)
15:00:12   6  ,AVG(g6)
15:00:12   7  FROM svm6162
15:00:12   8  GROUP BY pair,trend,gatt
15:00:12   9  ORDER BY pair,trend,gatt
15:00:12  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4986 -.32090265
ejp_usd 	-1 up	      4882 .272394929
ejp_usd 	-1		51
ejp_usd 	 1 nup	      4940 -.30127115
ejp_usd 	 1 up	      4575 .290080166
ejp_usd 	 1		21

6 rows selected.

Elapsed: 00:00:00.03
15:00:12 SQL> 
15:00:12 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.19
15:00:13 SQL> CREATE TABLE modsrc COMPRESS AS
15:00:13   2  SELECT
15:00:13   3  pair
15:00:13   4  ,ydate
15:00:13   5  ,prdate
15:00:13   6  ,trend
15:00:13   7  ,g6
15:00:13   8  ,gatt
15:00:13   9  ,gattn
15:00:13  10  FROM svm6162
15:00:13  11  /

Table created.

Elapsed: 00:00:00.11
15:00:13 SQL> 
15:00:13 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
15:00:13 SQL> 
15:00:13 SQL> DROP   TABLE ejp_ms610 ;

Table dropped.

Elapsed: 00:00:00.09
15:00:13 SQL> CREATE TABLE ejp_ms610 COMPRESS AS
15:00:13   2  SELECT
15:00:13   3  ydate
15:00:13   4  ,trend ejp_trend
15:00:13   5  ,g6    ejp_g6
15:00:13   6  ,gatt  ejp_gatt
15:00:13   7  ,gattn ejp_gattn
15:00:13   8  FROM modsrc
15:00:13   9  /

Table created.

Elapsed: 00:00:00.11
15:00:13 SQL> 
15:00:13 SQL> ANALYZE TABLE ejp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
15:00:13 SQL> 
15:00:13 SQL> -- I need a copy of the attributes:
15:00:13 SQL> 
15:00:13 SQL> 
15:00:13 SQL> DROP   TABLE ejp_att;

Table dropped.

Elapsed: 00:00:00.04
15:00:13 SQL> CREATE TABLE ejp_att COMPRESS AS
15:00:13   2  SELECT
15:00:13   3  ydate
15:00:13   4  ,att00 ejp_att00
15:00:13   5  ,att01 ejp_att01
15:00:13   6  ,att02 ejp_att02
15:00:13   7  ,att03 ejp_att03
15:00:13   8  ,att04 ejp_att04
15:00:13   9  ,att05 ejp_att05
15:00:13  10  ,att06 ejp_att06
15:00:13  11  ,att07 ejp_att07
15:00:13  12  ,att08 ejp_att08
15:00:13  13  ,att09 ejp_att09
15:00:13  14  ,att10 ejp_att10
15:00:13  15  ,att11 ejp_att11
15:00:13  16  ,att12 ejp_att12
15:00:13  17  ,att13 ejp_att13
15:00:13  18  ,att14 ejp_att14
15:00:13  19  ,att15 ejp_att15
15:00:13  20  ,att16 ejp_att16
15:00:13  21  ,att17 ejp_att17
15:00:13  22  ,att18 ejp_att18
15:00:13  23  ,att19 ejp_att19
15:00:13  24  ,att20 ejp_att20
15:00:13  25  ,att21 ejp_att21
15:00:13  26  ,att22 ejp_att22
15:00:13  27  ,att23 ejp_att23
15:00:13  28  ,att24 ejp_att24
15:00:13  29  ,att25 ejp_att25
15:00:13  30  ,att26 ejp_att26
15:00:13  31  ,att27 ejp_att27
15:00:13  32  ,att28 ejp_att28
15:00:13  33  ,att29 ejp_att29
15:00:13  34  ,att30 ejp_att30
15:00:13  35  ,att31 ejp_att31
15:00:13  36  ,att32 ejp_att32
15:00:13  37  ,att33 ejp_att33
15:00:13  38  ,att34 ejp_att34
15:00:13  39  ,att35 ejp_att35
15:00:13  40  ,att36 ejp_att36
15:00:13  41  ,att37 ejp_att37
15:00:13  42  FROM svm6162
15:00:13  43  /

Table created.

Elapsed: 00:00:00.18
15:00:14 SQL> 
15:00:14 SQL> ANALYZE TABLE ejp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.50
15:00:14 SQL> 
15:00:14 SQL> -- rpt
15:00:14 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19455

Elapsed: 00:00:00.84
15:00:15 SQL> SELECT COUNT(*)FROM ejp_att;

  COUNT(*)
----------
     19455

Elapsed: 00:00:00.00
15:00:15 SQL> 
15:00:15 SQL> --
15:00:15 SQL> -- ajp610.sql
15:00:15 SQL> --
15:00:15 SQL> 
15:00:15 SQL> -- Creates views and tables for backtesting a forex SVM strategy
15:00:15 SQL> 
15:00:15 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:01.02
15:00:16 SQL> 
15:00:16 SQL> -- I created di5min here:
15:00:16 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
15:00:16 SQL> 
15:00:16 SQL> CREATE OR REPLACE VIEW svm6102 AS
15:00:16   2  SELECT
15:00:16   3  pair
15:00:16   4  ,ydate
15:00:16   5  ,prdate
15:00:16   6  ,rownum rnum -- acts as t in my time-series
15:00:16   7  ,clse
15:00:16   8  -- Derive a bunch of attributes from clse, the latest price:
15:00:16   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
15:00:16  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
15:00:16  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
15:00:16  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
15:00:16  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
15:00:16  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
15:00:16  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
15:00:16  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
15:00:16  17  --
15:00:16  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
15:00:16  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
15:00:16  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
15:00:16  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
15:00:16  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
15:00:16  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
15:00:16  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
15:00:16  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
15:00:16  26  --
15:00:16  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
15:00:16  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
15:00:16  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
15:00:16  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
15:00:16  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
15:00:16  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
15:00:16  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
15:00:16  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
15:00:16  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
15:00:16  36  FROM di5min WHERE pair LIKE'%ajp%'
15:00:16  37  AND ydate > sysdate - 95
15:00:16  38  ORDER BY ydate
15:00:16  39  /

View created.

Elapsed: 00:00:00.05
15:00:16 SQL> 
15:00:16 SQL> -- rpt
15:00:16 SQL> 
15:00:16 SQL> SELECT
15:00:16   2  pair
15:00:16   3  ,COUNT(pair)
15:00:16   4  ,MIN(clse),MAX(clse)
15:00:16   5  ,MIN(avg6),MAX(avg6)
15:00:16   6  ,MIN(ydate),MAX(ydate)
15:00:16   7  FROM svm6102
15:00:16   8  GROUP BY pair
15:00:16   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ajp_usd       19452  78.249976 83.6669853 78.5106193  83.546306 2010-10-03 20:55:01 2011-01-05 14:55:00

Elapsed: 00:00:00.77
15:00:17 SQL> 
15:00:17 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
15:00:17 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.29
15:00:17 SQL> CREATE TABLE svm6122 COMPRESS AS
15:00:17   2  SELECT
15:00:17   3  pair
15:00:17   4  ,ydate
15:00:17   5  ,prdate
15:00:17   6  ,clse
15:00:17   7  -- g6 is important. I want to predict g6:
15:00:17   8  ,ld6 - clse g6
15:00:17   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
15:00:17  10  -- I want more attributes from the ones I derived above:
15:00:17  11  -- clse relation to moving-min
15:00:17  12  ,clse-min4  cm4
15:00:17  13  ,clse-min6  cm6
15:00:17  14  ,clse-min8  cm8
15:00:17  15  ,clse-min10 cm10
15:00:17  16  ,clse-min12 cm12
15:00:17  17  ,clse-min14 cm14
15:00:17  18  ,clse-min16 cm16
15:00:17  19  ,clse-min18 cm18
15:00:17  20  -- clse relation to moving-avg
15:00:17  21  ,clse-avg4  ca4
15:00:17  22  ,clse-avg6  ca6
15:00:17  23  ,clse-avg8  ca8
15:00:17  24  ,clse-avg10 ca10
15:00:17  25  ,clse-avg12 ca12
15:00:17  26  ,clse-avg14 ca14
15:00:17  27  ,clse-avg16 ca16
15:00:17  28  ,clse-avg18 ca18
15:00:17  29  -- clse relation to moving-max
15:00:17  30  ,clse-max4  cx4
15:00:17  31  ,clse-max6  cx6
15:00:17  32  ,clse-max8  cx8
15:00:17  33  ,clse-max10 cx10
15:00:17  34  ,clse-max12 cx12
15:00:17  35  ,clse-max14 cx14
15:00:17  36  ,clse-max16 cx16
15:00:17  37  ,clse-max18 cx18
15:00:17  38  -- Derive more attributes.
15:00:17  39  -- I want to use CORR() here to help SVM see the shape of the series.
15:00:17  40  -- But COVAR_POP is more stable:
15:00:17  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
15:00:17  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
15:00:17  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
15:00:17  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
15:00:17  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
15:00:17  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
15:00:17  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
15:00:17  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
15:00:17  49  -- Derive date related attributes:
15:00:17  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
15:00:17  51  ,0+TO_CHAR(ydate,'D')d
15:00:17  52  ,0+TO_CHAR(ydate,'W')w
15:00:17  53  -- mpm stands for minutes-past-midnight:
15:00:17  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
15:00:17  55  -- mph stands for minutes-past-hour:
15:00:17  56  ,0+TO_CHAR(ydate,'MI')mph
15:00:17  57  FROM svm6102
15:00:17  58  ORDER BY ydate
15:00:17  59  /

Table created.

Elapsed: 00:00:02.15
15:00:19 SQL> 
15:00:19 SQL> -- rpt
15:00:19 SQL> 
15:00:19 SQL> SELECT
15:00:19   2  pair
15:00:19   3  ,COUNT(pair)
15:00:19   4  ,MIN(clse),MAX(clse)
15:00:19   5  ,MIN(ydate),MAX(ydate)
15:00:19   6  FROM svm6122
15:00:19   7  GROUP BY pair
15:00:19   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ajp_usd       19452  78.249976 83.6669853 2010-10-03 20:55:01 2011-01-05 14:55:00

Elapsed: 00:00:00.04
15:00:19 SQL> 
15:00:19 SQL> -- Prepare for derivation of NTILE based params:
15:00:19 SQL> 
15:00:19 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
15:00:20 SQL> CREATE TABLE svm6142 COMPRESS AS
15:00:20   2  SELECT
15:00:20   3  pair
15:00:20   4  ,ydate
15:00:20   5  ,prdate
15:00:20   6  ,clse
15:00:20   7  ,g6
15:00:20   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
15:00:20   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
15:00:20  10  ,CASE WHEN trend IS NULL THEN 1
15:00:20  11  	    WHEN trend =0      THEN 1
15:00:20  12  	    ELSE trend END trend
15:00:20  13  ,cm4
15:00:20  14  ,cm6
15:00:20  15  ,cm8
15:00:20  16  ,cm10
15:00:20  17  ,cm12
15:00:20  18  ,cm14
15:00:20  19  ,cm16
15:00:20  20  ,cm18
15:00:20  21  --
15:00:20  22  ,ca4
15:00:20  23  ,ca6
15:00:20  24  ,ca8
15:00:20  25  ,ca10
15:00:20  26  ,ca12
15:00:20  27  ,ca14
15:00:20  28  ,ca16
15:00:20  29  ,ca18
15:00:20  30  --
15:00:20  31  ,cx4
15:00:20  32  ,cx6
15:00:20  33  ,cx8
15:00:20  34  ,cx10
15:00:20  35  ,cx12
15:00:20  36  ,cx14
15:00:20  37  ,cx16
15:00:20  38  ,cx18
15:00:20  39  --
15:00:20  40  ,crr4
15:00:20  41  ,crr6
15:00:20  42  ,crr8
15:00:20  43  ,crr10
15:00:20  44  ,crr12
15:00:20  45  ,crr14
15:00:20  46  ,crr16
15:00:20  47  ,crr18
15:00:20  48  --
15:00:20  49  ,hh
15:00:20  50  ,d
15:00:20  51  ,w
15:00:20  52  ,mpm
15:00:20  53  ,mph
15:00:20  54  FROM svm6122
15:00:20  55  ORDER BY ydate
15:00:20  56  /

Table created.

Elapsed: 00:00:00.40
15:00:20 SQL> 
15:00:20 SQL> -- rpt
15:00:20 SQL> 
15:00:20 SQL> SELECT
15:00:20   2  pair
15:00:20   3  ,trend
15:00:20   4  ,gatt
15:00:20   5  ,COUNT(pair)
15:00:20   6  ,AVG(g6)
15:00:20   7  FROM svm6142
15:00:20   8  GROUP BY pair,trend,gatt
15:00:20   9  ORDER BY pair,trend,gatt
15:00:20  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4244 -.22701426
ajp_usd 	-1 up	      5164  .22183708
ajp_usd 	-1		23
ajp_usd 	 1 nup	      5227 -.20362774
ajp_usd 	 1 up	      4745 .206911097
ajp_usd 	 1		49

6 rows selected.

Elapsed: 00:00:00.03
15:00:20 SQL> 
15:00:20 SQL> 
15:00:20 SQL> -- Derive NTILE based params:
15:00:20 SQL> 
15:00:20 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
15:00:20 SQL> CREATE TABLE svm6162 COMPRESS AS
15:00:20   2  SELECT
15:00:20   3  pair
15:00:20   4  ,ydate
15:00:20   5  ,prdate
15:00:20   6  ,clse
15:00:20   7  ,g6
15:00:20   8  ,gatt
15:00:20   9  ,gattn
15:00:20  10  ,trend
15:00:20  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
15:00:20  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
15:00:20  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
15:00:20  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
15:00:20  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
15:00:20  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
15:00:20  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
15:00:20  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
15:00:20  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
15:00:20  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
15:00:20  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
15:00:20  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
15:00:20  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
15:00:20  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
15:00:20  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
15:00:20  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
15:00:20  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
15:00:20  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
15:00:20  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
15:00:20  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
15:00:20  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
15:00:20  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
15:00:20  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
15:00:20  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
15:00:20  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
15:00:20  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
15:00:20  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
15:00:20  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
15:00:20  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
15:00:20  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
15:00:20  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
15:00:20  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
15:00:20  43  ,hh  att32
15:00:20  44  ,d   att33
15:00:20  45  ,w   att34
15:00:20  46  ,mpm att35
15:00:20  47  ,mph att36
15:00:20  48  ,trend att37
15:00:20  49  FROM svm6142
15:00:20  50  ORDER BY ydate
15:00:20  51  /

Table created.

Elapsed: 00:00:04.86
15:00:25 SQL> 
15:00:25 SQL> -- rpt
15:00:25 SQL> 
15:00:25 SQL> SELECT
15:00:25   2  pair
15:00:25   3  ,trend
15:00:25   4  ,gatt
15:00:25   5  ,COUNT(pair)
15:00:25   6  ,AVG(g6)
15:00:25   7  FROM svm6162
15:00:25   8  GROUP BY pair,trend,gatt
15:00:25   9  ORDER BY pair,trend,gatt
15:00:25  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4244 -.22701426
ajp_usd 	-1 up	      5164  .22183708
ajp_usd 	-1		23
ajp_usd 	 1 nup	      5227 -.20362774
ajp_usd 	 1 up	      4745 .206911097
ajp_usd 	 1		49

6 rows selected.

Elapsed: 00:00:00.04
15:00:25 SQL> 
15:00:25 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
15:00:25 SQL> CREATE TABLE modsrc COMPRESS AS
15:00:25   2  SELECT
15:00:25   3  pair
15:00:25   4  ,ydate
15:00:25   5  ,prdate
15:00:25   6  ,trend
15:00:25   7  ,g6
15:00:25   8  ,gatt
15:00:25   9  ,gattn
15:00:25  10  FROM svm6162
15:00:25  11  /

Table created.

Elapsed: 00:00:00.10
15:00:25 SQL> 
15:00:25 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
15:00:25 SQL> 
15:00:25 SQL> DROP   TABLE ajp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
15:00:26 SQL> CREATE TABLE ajp_ms610 COMPRESS AS
15:00:26   2  SELECT
15:00:26   3  ydate
15:00:26   4  ,trend ajp_trend
15:00:26   5  ,g6    ajp_g6
15:00:26   6  ,gatt  ajp_gatt
15:00:26   7  ,gattn ajp_gattn
15:00:26   8  FROM modsrc
15:00:26   9  /

Table created.

Elapsed: 00:00:00.07
15:00:26 SQL> 
15:00:26 SQL> ANALYZE TABLE ajp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.26
15:00:26 SQL> 
15:00:26 SQL> -- I need a copy of the attributes:
15:00:26 SQL> 
15:00:26 SQL> 
15:00:26 SQL> DROP   TABLE ajp_att;

Table dropped.

Elapsed: 00:00:00.05
15:00:26 SQL> CREATE TABLE ajp_att COMPRESS AS
15:00:26   2  SELECT
15:00:26   3  ydate
15:00:26   4  ,att00 ajp_att00
15:00:26   5  ,att01 ajp_att01
15:00:26   6  ,att02 ajp_att02
15:00:26   7  ,att03 ajp_att03
15:00:26   8  ,att04 ajp_att04
15:00:26   9  ,att05 ajp_att05
15:00:26  10  ,att06 ajp_att06
15:00:26  11  ,att07 ajp_att07
15:00:26  12  ,att08 ajp_att08
15:00:26  13  ,att09 ajp_att09
15:00:26  14  ,att10 ajp_att10
15:00:26  15  ,att11 ajp_att11
15:00:26  16  ,att12 ajp_att12
15:00:26  17  ,att13 ajp_att13
15:00:26  18  ,att14 ajp_att14
15:00:26  19  ,att15 ajp_att15
15:00:26  20  ,att16 ajp_att16
15:00:26  21  ,att17 ajp_att17
15:00:26  22  ,att18 ajp_att18
15:00:26  23  ,att19 ajp_att19
15:00:26  24  ,att20 ajp_att20
15:00:26  25  ,att21 ajp_att21
15:00:26  26  ,att22 ajp_att22
15:00:26  27  ,att23 ajp_att23
15:00:26  28  ,att24 ajp_att24
15:00:26  29  ,att25 ajp_att25
15:00:26  30  ,att26 ajp_att26
15:00:26  31  ,att27 ajp_att27
15:00:26  32  ,att28 ajp_att28
15:00:26  33  ,att29 ajp_att29
15:00:26  34  ,att30 ajp_att30
15:00:26  35  ,att31 ajp_att31
15:00:26  36  ,att32 ajp_att32
15:00:26  37  ,att33 ajp_att33
15:00:26  38  ,att34 ajp_att34
15:00:26  39  ,att35 ajp_att35
15:00:26  40  ,att36 ajp_att36
15:00:26  41  ,att37 ajp_att37
15:00:26  42  FROM svm6162
15:00:26  43  /

Table created.

Elapsed: 00:00:00.20
15:00:26 SQL> 
15:00:26 SQL> ANALYZE TABLE ajp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
15:00:27 SQL> 
15:00:27 SQL> -- rpt
15:00:27 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19452

Elapsed: 00:00:00.76
15:00:27 SQL> SELECT COUNT(*)FROM ajp_att;

  COUNT(*)
----------
     19452

Elapsed: 00:00:00.00
15:00:27 SQL> 
15:00:27 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
