
SQL*Plus: Release 11.2.0.1.0 Production on Fri Dec 24 22:55:08 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

22:55:08 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
22:55:08 SQL> 22:55:08 SQL> --
22:55:08 SQL> -- eur10.sql
22:55:08 SQL> --
22:55:08 SQL> 
22:55:08 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:55:08 SQL> 
22:55:08 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.13
22:55:08 SQL> 
22:55:08 SQL> -- I created di5min here:
22:55:08 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:55:08 SQL> 
22:55:08 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:55:08   2  SELECT
22:55:08   3  pair
22:55:08   4  ,ydate
22:55:08   5  ,prdate
22:55:08   6  ,rownum rnum -- acts as t in my time-series
22:55:08   7  ,clse
22:55:08   8  -- Derive a bunch of attributes from clse, the latest price:
22:55:08   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:55:08  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:55:08  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:55:08  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:55:08  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:55:08  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:55:08  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:55:08  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:55:08  17  --
22:55:08  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:55:08  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:55:08  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:55:08  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:55:08  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:55:08  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:55:08  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:55:08  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:55:08  26  --
22:55:08  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:55:08  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:55:08  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:55:08  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:55:08  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:55:08  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:55:08  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:55:08  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:55:08  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:55:08  36  FROM di5min WHERE pair LIKE'%eur%'
22:55:08  37  ORDER BY ydate
22:55:08  38  /

View created.

Elapsed: 00:00:00.05
22:55:08 SQL> 
22:55:08 SQL> -- rpt
22:55:08 SQL> 
22:55:08 SQL> SELECT
22:55:08   2  pair
22:55:08   3  ,COUNT(pair)
22:55:08   4  ,MIN(clse),MAX(clse)
22:55:08   5  ,MIN(avg6),MAX(avg6)
22:55:08   6  ,MIN(ydate),MAX(ydate)
22:55:08   7  FROM svm6102
22:55:08   8  GROUP BY pair
22:55:08   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       20738    1.29735	   1.4273 1.29875103 1.42436233 2010-09-15 22:25:01 2010-12-24 21:55:00

Elapsed: 00:00:00.93
22:55:09 SQL> 
22:55:09 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:55:09 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.03
22:55:09 SQL> CREATE TABLE svm6122 COMPRESS AS
22:55:09   2  SELECT
22:55:09   3  pair
22:55:09   4  ,ydate
22:55:09   5  ,prdate
22:55:09   6  ,clse
22:55:09   7  -- g6 is important. I want to predict g6:
22:55:09   8  ,ld6 - clse g6
22:55:09   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:55:09  10  -- I want more attributes from the ones I derived above:
22:55:09  11  -- clse relation to moving-min
22:55:09  12  ,clse-min4  cm4
22:55:09  13  ,clse-min6  cm6
22:55:09  14  ,clse-min8  cm8
22:55:09  15  ,clse-min10 cm10
22:55:09  16  ,clse-min12 cm12
22:55:09  17  ,clse-min14 cm14
22:55:09  18  ,clse-min16 cm16
22:55:09  19  ,clse-min18 cm18
22:55:09  20  -- clse relation to moving-avg
22:55:09  21  ,clse-avg4  ca4
22:55:09  22  ,clse-avg6  ca6
22:55:09  23  ,clse-avg8  ca8
22:55:09  24  ,clse-avg10 ca10
22:55:09  25  ,clse-avg12 ca12
22:55:09  26  ,clse-avg14 ca14
22:55:09  27  ,clse-avg16 ca16
22:55:09  28  ,clse-avg18 ca18
22:55:09  29  -- clse relation to moving-max
22:55:09  30  ,clse-max4  cx4
22:55:09  31  ,clse-max6  cx6
22:55:09  32  ,clse-max8  cx8
22:55:09  33  ,clse-max10 cx10
22:55:09  34  ,clse-max12 cx12
22:55:09  35  ,clse-max14 cx14
22:55:09  36  ,clse-max16 cx16
22:55:09  37  ,clse-max18 cx18
22:55:09  38  -- Derive more attributes.
22:55:09  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:55:09  40  -- But COVAR_POP is more stable:
22:55:09  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:55:09  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:55:09  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:55:09  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:55:09  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:55:09  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:55:09  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:55:09  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:55:09  49  -- Derive date related attributes:
22:55:09  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:55:09  51  ,0+TO_CHAR(ydate,'D')d
22:55:09  52  ,0+TO_CHAR(ydate,'W')w
22:55:09  53  -- mpm stands for minutes-past-midnight:
22:55:09  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:55:09  55  -- mph stands for minutes-past-hour:
22:55:09  56  ,0+TO_CHAR(ydate,'MI')mph
22:55:09  57  FROM svm6102
22:55:09  58  ORDER BY ydate
22:55:09  59  /

Table created.

Elapsed: 00:00:02.46
22:55:12 SQL> 
22:55:12 SQL> -- rpt
22:55:12 SQL> 
22:55:12 SQL> SELECT
22:55:12   2  pair
22:55:12   3  ,COUNT(pair)
22:55:12   4  ,MIN(clse),MAX(clse)
22:55:12   5  ,MIN(ydate),MAX(ydate)
22:55:12   6  FROM svm6122
22:55:12   7  GROUP BY pair
22:55:12   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       20738    1.29735	   1.4273 2010-09-15 22:25:01 2010-12-24 21:55:00

Elapsed: 00:00:00.04
22:55:12 SQL> 
22:55:12 SQL> -- Prepare for derivation of NTILE based params:
22:55:12 SQL> 
22:55:12 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.04
22:55:12 SQL> CREATE TABLE svm6142 COMPRESS AS
22:55:12   2  SELECT
22:55:12   3  pair
22:55:12   4  ,ydate
22:55:12   5  ,prdate
22:55:12   6  ,clse
22:55:12   7  ,g6
22:55:12   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:55:12   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:55:12  10  ,CASE WHEN trend IS NULL THEN 1
22:55:12  11  	    WHEN trend =0      THEN 1
22:55:12  12  	    ELSE trend END trend
22:55:12  13  ,cm4
22:55:12  14  ,cm6
22:55:12  15  ,cm8
22:55:12  16  ,cm10
22:55:12  17  ,cm12
22:55:12  18  ,cm14
22:55:12  19  ,cm16
22:55:12  20  ,cm18
22:55:12  21  --
22:55:12  22  ,ca4
22:55:12  23  ,ca6
22:55:12  24  ,ca8
22:55:12  25  ,ca10
22:55:12  26  ,ca12
22:55:12  27  ,ca14
22:55:12  28  ,ca16
22:55:12  29  ,ca18
22:55:12  30  --
22:55:12  31  ,cx4
22:55:12  32  ,cx6
22:55:12  33  ,cx8
22:55:12  34  ,cx10
22:55:12  35  ,cx12
22:55:12  36  ,cx14
22:55:12  37  ,cx16
22:55:12  38  ,cx18
22:55:12  39  --
22:55:12  40  ,crr4
22:55:12  41  ,crr6
22:55:12  42  ,crr8
22:55:12  43  ,crr10
22:55:12  44  ,crr12
22:55:12  45  ,crr14
22:55:12  46  ,crr16
22:55:12  47  ,crr18
22:55:12  48  --
22:55:12  49  ,hh
22:55:12  50  ,d
22:55:12  51  ,w
22:55:12  52  ,mpm
22:55:12  53  ,mph
22:55:12  54  FROM svm6122
22:55:12  55  ORDER BY ydate
22:55:12  56  /

Table created.

Elapsed: 00:00:00.37
22:55:12 SQL> 
22:55:12 SQL> -- rpt
22:55:12 SQL> 
22:55:12 SQL> SELECT
22:55:12   2  pair
22:55:12   3  ,trend
22:55:12   4  ,gatt
22:55:12   5  ,COUNT(pair)
22:55:12   6  ,AVG(g6)
22:55:12   7  FROM svm6142
22:55:12   8  GROUP BY pair,trend,gatt
22:55:12   9  ORDER BY pair,trend,gatt
22:55:12  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6297  -.0029884
eur_usd 	-1 up	      3903 .004552181
eur_usd 	-1		44
eur_usd 	 1 nup	      6303  -.0030992
eur_usd 	 1 up	      4163 .005148703
eur_usd 	 1		28

6 rows selected.

Elapsed: 00:00:00.04
22:55:12 SQL> 
22:55:12 SQL> 
22:55:12 SQL> -- Derive NTILE based params:
22:55:12 SQL> 
22:55:12 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.04
22:55:12 SQL> CREATE TABLE svm6162 COMPRESS AS
22:55:12   2  SELECT
22:55:12   3  pair
22:55:12   4  ,ydate
22:55:12   5  ,prdate
22:55:12   6  ,clse
22:55:12   7  ,g6
22:55:12   8  ,gatt
22:55:12   9  ,gattn
22:55:12  10  ,trend
22:55:12  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:55:12  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:55:12  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:55:12  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:55:12  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:55:12  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:55:12  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:55:12  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:55:12  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:55:12  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:55:12  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:55:12  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:55:12  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:55:12  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:55:12  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:55:12  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:55:12  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:55:12  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:55:12  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:55:12  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:55:12  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:55:12  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:55:12  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:55:12  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:55:12  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:55:12  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:55:12  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:55:12  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:55:12  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:55:12  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:55:12  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:55:12  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:55:12  43  ,hh  att32
22:55:12  44  ,d   att33
22:55:12  45  ,w   att34
22:55:12  46  ,mpm att35
22:55:12  47  ,mph att36
22:55:12  48  ,trend att37
22:55:12  49  FROM svm6142
22:55:12  50  ORDER BY ydate
22:55:12  51  /

Table created.

Elapsed: 00:00:05.09
22:55:17 SQL> 
22:55:17 SQL> -- rpt
22:55:17 SQL> 
22:55:17 SQL> SELECT
22:55:17   2  pair
22:55:17   3  ,trend
22:55:17   4  ,gatt
22:55:17   5  ,COUNT(pair)
22:55:17   6  ,AVG(g6)
22:55:17   7  FROM svm6162
22:55:17   8  GROUP BY pair,trend,gatt
22:55:17   9  ORDER BY pair,trend,gatt
22:55:17  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6297  -.0029884
eur_usd 	-1 up	      3903 .004552181
eur_usd 	-1		44
eur_usd 	 1 nup	      6303  -.0030992
eur_usd 	 1 up	      4163 .005148703
eur_usd 	 1		28

6 rows selected.

Elapsed: 00:00:00.04
22:55:17 SQL> 
22:55:17 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.03
22:55:17 SQL> CREATE TABLE modsrc COMPRESS AS
22:55:17   2  SELECT
22:55:17   3  pair
22:55:17   4  ,ydate
22:55:17   5  ,prdate
22:55:17   6  ,trend
22:55:17   7  ,g6
22:55:17   8  ,gatt
22:55:17   9  ,gattn
22:55:17  10  FROM svm6162
22:55:17  11  /

Table created.

Elapsed: 00:00:00.10
22:55:17 SQL> 
22:55:17 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
22:55:18 SQL> 
22:55:18 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
22:55:18 SQL> CREATE TABLE eur_ms610 COMPRESS AS
22:55:18   2  SELECT
22:55:18   3  ydate
22:55:18   4  ,trend eur_trend
22:55:18   5  ,g6    eur_g6
22:55:18   6  ,gatt  eur_gatt
22:55:18   7  ,gattn eur_gattn
22:55:18   8  FROM modsrc
22:55:18   9  /

Table created.

Elapsed: 00:00:00.07
22:55:18 SQL> 
22:55:18 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
22:55:18 SQL> 
22:55:18 SQL> -- I need a copy of the attributes:
22:55:18 SQL> 
22:55:18 SQL> 
22:55:18 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.04
22:55:18 SQL> CREATE TABLE eur_att COMPRESS AS
22:55:18   2  SELECT
22:55:18   3  ydate
22:55:18   4  ,att00 eur_att00
22:55:18   5  ,att01 eur_att01
22:55:18   6  ,att02 eur_att02
22:55:18   7  ,att03 eur_att03
22:55:18   8  ,att04 eur_att04
22:55:18   9  ,att05 eur_att05
22:55:18  10  ,att06 eur_att06
22:55:18  11  ,att07 eur_att07
22:55:18  12  ,att08 eur_att08
22:55:18  13  ,att09 eur_att09
22:55:18  14  ,att10 eur_att10
22:55:18  15  ,att11 eur_att11
22:55:18  16  ,att12 eur_att12
22:55:18  17  ,att13 eur_att13
22:55:18  18  ,att14 eur_att14
22:55:18  19  ,att15 eur_att15
22:55:18  20  ,att16 eur_att16
22:55:18  21  ,att17 eur_att17
22:55:18  22  ,att18 eur_att18
22:55:18  23  ,att19 eur_att19
22:55:18  24  ,att20 eur_att20
22:55:18  25  ,att21 eur_att21
22:55:18  26  ,att22 eur_att22
22:55:18  27  ,att23 eur_att23
22:55:18  28  ,att24 eur_att24
22:55:18  29  ,att25 eur_att25
22:55:18  30  ,att26 eur_att26
22:55:18  31  ,att27 eur_att27
22:55:18  32  ,att28 eur_att28
22:55:18  33  ,att29 eur_att29
22:55:18  34  ,att30 eur_att30
22:55:18  35  ,att31 eur_att31
22:55:18  36  ,att32 eur_att32
22:55:18  37  ,att33 eur_att33
22:55:18  38  ,att34 eur_att34
22:55:18  39  ,att35 eur_att35
22:55:18  40  ,att36 eur_att36
22:55:18  41  ,att37 eur_att37
22:55:18  42  FROM svm6162
22:55:18  43  /

Table created.

Elapsed: 00:00:00.18
22:55:18 SQL> 
22:55:18 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
22:55:19 SQL> 
22:55:19 SQL> -- rpt
22:55:19 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     20738

Elapsed: 00:00:00.90
22:55:19 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     20738

Elapsed: 00:00:00.01
22:55:19 SQL> 
22:55:19 SQL> --
22:55:19 SQL> -- aud10.sql
22:55:19 SQL> --
22:55:19 SQL> 
22:55:19 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:55:19 SQL> 
22:55:19 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.61
22:55:20 SQL> 
22:55:20 SQL> -- I created di5min here:
22:55:20 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:55:20 SQL> 
22:55:20 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:55:20   2  SELECT
22:55:20   3  pair
22:55:20   4  ,ydate
22:55:20   5  ,prdate
22:55:20   6  ,rownum rnum -- acts as t in my time-series
22:55:20   7  ,clse
22:55:20   8  -- Derive a bunch of attributes from clse, the latest price:
22:55:20   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:55:20  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:55:20  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:55:20  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:55:20  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:55:20  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:55:20  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:55:20  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:55:20  17  --
22:55:20  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:55:20  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:55:20  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:55:20  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:55:20  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:55:20  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:55:20  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:55:20  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:55:20  26  --
22:55:20  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:55:20  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:55:20  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:55:20  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:55:20  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:55:20  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:55:20  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:55:20  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:55:20  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:55:20  36  FROM di5min WHERE pair LIKE'%aud%'
22:55:20  37  ORDER BY ydate
22:55:20  38  /

View created.

Elapsed: 00:00:00.05
22:55:20 SQL> 
22:55:20 SQL> -- rpt
22:55:20 SQL> 
22:55:20 SQL> SELECT
22:55:20   2  pair
22:55:20   3  ,COUNT(pair)
22:55:20   4  ,MIN(clse),MAX(clse)
22:55:20   5  ,MIN(avg6),MAX(avg6)
22:55:20   6  ,MIN(ydate),MAX(ydate)
22:55:20   7  FROM svm6102
22:55:20   8  GROUP BY pair
22:55:20   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       20735	 .9332	   1.0181 .935386301 1.01556438 2010-09-15 22:25:01 2010-12-24 21:55:00

Elapsed: 00:00:00.89
22:55:21 SQL> 
22:55:21 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:55:21 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.19
22:55:21 SQL> CREATE TABLE svm6122 COMPRESS AS
22:55:21   2  SELECT
22:55:21   3  pair
22:55:21   4  ,ydate
22:55:21   5  ,prdate
22:55:21   6  ,clse
22:55:21   7  -- g6 is important. I want to predict g6:
22:55:21   8  ,ld6 - clse g6
22:55:21   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:55:21  10  -- I want more attributes from the ones I derived above:
22:55:21  11  -- clse relation to moving-min
22:55:21  12  ,clse-min4  cm4
22:55:21  13  ,clse-min6  cm6
22:55:21  14  ,clse-min8  cm8
22:55:21  15  ,clse-min10 cm10
22:55:21  16  ,clse-min12 cm12
22:55:21  17  ,clse-min14 cm14
22:55:21  18  ,clse-min16 cm16
22:55:21  19  ,clse-min18 cm18
22:55:21  20  -- clse relation to moving-avg
22:55:21  21  ,clse-avg4  ca4
22:55:21  22  ,clse-avg6  ca6
22:55:21  23  ,clse-avg8  ca8
22:55:21  24  ,clse-avg10 ca10
22:55:21  25  ,clse-avg12 ca12
22:55:21  26  ,clse-avg14 ca14
22:55:21  27  ,clse-avg16 ca16
22:55:21  28  ,clse-avg18 ca18
22:55:21  29  -- clse relation to moving-max
22:55:21  30  ,clse-max4  cx4
22:55:21  31  ,clse-max6  cx6
22:55:21  32  ,clse-max8  cx8
22:55:21  33  ,clse-max10 cx10
22:55:21  34  ,clse-max12 cx12
22:55:21  35  ,clse-max14 cx14
22:55:21  36  ,clse-max16 cx16
22:55:21  37  ,clse-max18 cx18
22:55:21  38  -- Derive more attributes.
22:55:21  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:55:21  40  -- But COVAR_POP is more stable:
22:55:21  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:55:21  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:55:21  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:55:21  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:55:21  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:55:21  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:55:21  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:55:21  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:55:21  49  -- Derive date related attributes:
22:55:21  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:55:21  51  ,0+TO_CHAR(ydate,'D')d
22:55:21  52  ,0+TO_CHAR(ydate,'W')w
22:55:21  53  -- mpm stands for minutes-past-midnight:
22:55:21  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:55:21  55  -- mph stands for minutes-past-hour:
22:55:21  56  ,0+TO_CHAR(ydate,'MI')mph
22:55:21  57  FROM svm6102
22:55:21  58  ORDER BY ydate
22:55:21  59  /

Table created.

Elapsed: 00:00:02.16
22:55:23 SQL> 
22:55:23 SQL> -- rpt
22:55:23 SQL> 
22:55:23 SQL> SELECT
22:55:23   2  pair
22:55:23   3  ,COUNT(pair)
22:55:23   4  ,MIN(clse),MAX(clse)
22:55:23   5  ,MIN(ydate),MAX(ydate)
22:55:23   6  FROM svm6122
22:55:23   7  GROUP BY pair
22:55:23   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       20735	 .9332	   1.0181 2010-09-15 22:25:01 2010-12-24 21:55:00

Elapsed: 00:00:00.04
22:55:23 SQL> 
22:55:23 SQL> -- Prepare for derivation of NTILE based params:
22:55:23 SQL> 
22:55:23 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.18
22:55:24 SQL> CREATE TABLE svm6142 COMPRESS AS
22:55:24   2  SELECT
22:55:24   3  pair
22:55:24   4  ,ydate
22:55:24   5  ,prdate
22:55:24   6  ,clse
22:55:24   7  ,g6
22:55:24   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:55:24   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:55:24  10  ,CASE WHEN trend IS NULL THEN 1
22:55:24  11  	    WHEN trend =0      THEN 1
22:55:24  12  	    ELSE trend END trend
22:55:24  13  ,cm4
22:55:24  14  ,cm6
22:55:24  15  ,cm8
22:55:24  16  ,cm10
22:55:24  17  ,cm12
22:55:24  18  ,cm14
22:55:24  19  ,cm16
22:55:24  20  ,cm18
22:55:24  21  --
22:55:24  22  ,ca4
22:55:24  23  ,ca6
22:55:24  24  ,ca8
22:55:24  25  ,ca10
22:55:24  26  ,ca12
22:55:24  27  ,ca14
22:55:24  28  ,ca16
22:55:24  29  ,ca18
22:55:24  30  --
22:55:24  31  ,cx4
22:55:24  32  ,cx6
22:55:24  33  ,cx8
22:55:24  34  ,cx10
22:55:24  35  ,cx12
22:55:24  36  ,cx14
22:55:24  37  ,cx16
22:55:24  38  ,cx18
22:55:24  39  --
22:55:24  40  ,crr4
22:55:24  41  ,crr6
22:55:24  42  ,crr8
22:55:24  43  ,crr10
22:55:24  44  ,crr12
22:55:24  45  ,crr14
22:55:24  46  ,crr16
22:55:24  47  ,crr18
22:55:24  48  --
22:55:24  49  ,hh
22:55:24  50  ,d
22:55:24  51  ,w
22:55:24  52  ,mpm
22:55:24  53  ,mph
22:55:24  54  FROM svm6122
22:55:24  55  ORDER BY ydate
22:55:24  56  /

Table created.

Elapsed: 00:00:00.37
22:55:24 SQL> 
22:55:24 SQL> -- rpt
22:55:24 SQL> 
22:55:24 SQL> SELECT
22:55:24   2  pair
22:55:24   3  ,trend
22:55:24   4  ,gatt
22:55:24   5  ,COUNT(pair)
22:55:24   6  ,AVG(g6)
22:55:24   7  FROM svm6142
22:55:24   8  GROUP BY pair,trend,gatt
22:55:24   9  ORDER BY pair,trend,gatt
22:55:24  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5458 -.00207705
aud_usd 	-1 up	      4030 .003724423
aud_usd 	-1		12
aud_usd 	 1 nup	      7178 -.00213233
aud_usd 	 1 up	      3997 .004125554
aud_usd 	 1		60

6 rows selected.

Elapsed: 00:00:00.04
22:55:24 SQL> 
22:55:24 SQL> 
22:55:24 SQL> -- Derive NTILE based params:
22:55:24 SQL> 
22:55:24 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.14
22:55:24 SQL> CREATE TABLE svm6162 COMPRESS AS
22:55:24   2  SELECT
22:55:24   3  pair
22:55:24   4  ,ydate
22:55:24   5  ,prdate
22:55:24   6  ,clse
22:55:24   7  ,g6
22:55:24   8  ,gatt
22:55:24   9  ,gattn
22:55:24  10  ,trend
22:55:24  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:55:24  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:55:24  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:55:24  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:55:24  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:55:24  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:55:24  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:55:24  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:55:24  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:55:24  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:55:24  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:55:24  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:55:24  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:55:24  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:55:24  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:55:24  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:55:24  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:55:24  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:55:24  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:55:24  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:55:24  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:55:24  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:55:24  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:55:24  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:55:24  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:55:24  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:55:24  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:55:24  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:55:24  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:55:24  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:55:24  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:55:24  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:55:24  43  ,hh  att32
22:55:24  44  ,d   att33
22:55:24  45  ,w   att34
22:55:24  46  ,mpm att35
22:55:24  47  ,mph att36
22:55:24  48  ,trend att37
22:55:24  49  FROM svm6142
22:55:24  50  ORDER BY ydate
22:55:24  51  /

Table created.

Elapsed: 00:00:05.03
22:55:29 SQL> 
22:55:29 SQL> -- rpt
22:55:29 SQL> 
22:55:29 SQL> SELECT
22:55:29   2  pair
22:55:29   3  ,trend
22:55:29   4  ,gatt
22:55:29   5  ,COUNT(pair)
22:55:29   6  ,AVG(g6)
22:55:29   7  FROM svm6162
22:55:29   8  GROUP BY pair,trend,gatt
22:55:29   9  ORDER BY pair,trend,gatt
22:55:29  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5458 -.00207705
aud_usd 	-1 up	      4030 .003724423
aud_usd 	-1		12
aud_usd 	 1 nup	      7178 -.00213233
aud_usd 	 1 up	      3997 .004125554
aud_usd 	 1		60

6 rows selected.

Elapsed: 00:00:00.02
22:55:29 SQL> 
22:55:29 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
22:55:29 SQL> CREATE TABLE modsrc COMPRESS AS
22:55:29   2  SELECT
22:55:29   3  pair
22:55:29   4  ,ydate
22:55:29   5  ,prdate
22:55:29   6  ,trend
22:55:29   7  ,g6
22:55:29   8  ,gatt
22:55:29   9  ,gattn
22:55:29  10  FROM svm6162
22:55:29  11  /

Table created.

Elapsed: 00:00:00.09
22:55:29 SQL> 
22:55:29 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
22:55:30 SQL> 
22:55:30 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
22:55:30 SQL> CREATE TABLE aud_ms610 COMPRESS AS
22:55:30   2  SELECT
22:55:30   3  ydate
22:55:30   4  ,trend aud_trend
22:55:30   5  ,g6    aud_g6
22:55:30   6  ,gatt  aud_gatt
22:55:30   7  ,gattn aud_gattn
22:55:30   8  FROM modsrc
22:55:30   9  /

Table created.

Elapsed: 00:00:00.05
22:55:30 SQL> 
22:55:30 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
22:55:30 SQL> 
22:55:30 SQL> -- I need a copy of the attributes:
22:55:30 SQL> 
22:55:30 SQL> 
22:55:30 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.05
22:55:30 SQL> CREATE TABLE aud_att COMPRESS AS
22:55:30   2  SELECT
22:55:30   3  ydate
22:55:30   4  ,att00 aud_att00
22:55:30   5  ,att01 aud_att01
22:55:30   6  ,att02 aud_att02
22:55:30   7  ,att03 aud_att03
22:55:30   8  ,att04 aud_att04
22:55:30   9  ,att05 aud_att05
22:55:30  10  ,att06 aud_att06
22:55:30  11  ,att07 aud_att07
22:55:30  12  ,att08 aud_att08
22:55:30  13  ,att09 aud_att09
22:55:30  14  ,att10 aud_att10
22:55:30  15  ,att11 aud_att11
22:55:30  16  ,att12 aud_att12
22:55:30  17  ,att13 aud_att13
22:55:30  18  ,att14 aud_att14
22:55:30  19  ,att15 aud_att15
22:55:30  20  ,att16 aud_att16
22:55:30  21  ,att17 aud_att17
22:55:30  22  ,att18 aud_att18
22:55:30  23  ,att19 aud_att19
22:55:30  24  ,att20 aud_att20
22:55:30  25  ,att21 aud_att21
22:55:30  26  ,att22 aud_att22
22:55:30  27  ,att23 aud_att23
22:55:30  28  ,att24 aud_att24
22:55:30  29  ,att25 aud_att25
22:55:30  30  ,att26 aud_att26
22:55:30  31  ,att27 aud_att27
22:55:30  32  ,att28 aud_att28
22:55:30  33  ,att29 aud_att29
22:55:30  34  ,att30 aud_att30
22:55:30  35  ,att31 aud_att31
22:55:30  36  ,att32 aud_att32
22:55:30  37  ,att33 aud_att33
22:55:30  38  ,att34 aud_att34
22:55:30  39  ,att35 aud_att35
22:55:30  40  ,att36 aud_att36
22:55:30  41  ,att37 aud_att37
22:55:30  42  FROM svm6162
22:55:30  43  /

Table created.

Elapsed: 00:00:00.22
22:55:30 SQL> 
22:55:30 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.57
22:55:31 SQL> 
22:55:31 SQL> -- rpt
22:55:31 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     20735

Elapsed: 00:00:00.90
22:55:32 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     20735

Elapsed: 00:00:00.01
22:55:32 SQL> 
22:55:32 SQL> --
22:55:32 SQL> -- gbp10.sql
22:55:32 SQL> --
22:55:32 SQL> 
22:55:32 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:55:32 SQL> 
22:55:32 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.43
22:55:32 SQL> 
22:55:32 SQL> -- I created di5min here:
22:55:32 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:55:32 SQL> 
22:55:32 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:55:32   2  SELECT
22:55:32   3  pair
22:55:32   4  ,ydate
22:55:32   5  ,prdate
22:55:32   6  ,rownum rnum -- acts as t in my time-series
22:55:32   7  ,clse
22:55:32   8  -- Derive a bunch of attributes from clse, the latest price:
22:55:32   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:55:32  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:55:32  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:55:32  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:55:32  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:55:32  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:55:32  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:55:32  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:55:32  17  --
22:55:32  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:55:32  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:55:32  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:55:32  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:55:32  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:55:32  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:55:32  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:55:32  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:55:32  26  --
22:55:32  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:55:32  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:55:32  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:55:32  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:55:32  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:55:32  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:55:32  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:55:32  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:55:32  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:55:32  36  FROM di5min WHERE pair LIKE'%gbp%'
22:55:32  37  ORDER BY ydate
22:55:32  38  /

View created.

Elapsed: 00:00:00.05
22:55:32 SQL> 
22:55:32 SQL> -- rpt
22:55:32 SQL> 
22:55:32 SQL> SELECT
22:55:32   2  pair
22:55:32   3  ,COUNT(pair)
22:55:32   4  ,MIN(clse),MAX(clse)
22:55:32   5  ,MIN(avg6),MAX(avg6)
22:55:32   6  ,MIN(ydate),MAX(ydate)
22:55:32   7  FROM svm6102
22:55:32   8  GROUP BY pair
22:55:32   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       20737   1.535825	   1.6295 1.53821404 1.62716986 2010-09-15 22:25:01 2010-12-24 21:55:00

Elapsed: 00:00:00.89
22:55:33 SQL> 
22:55:33 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:55:33 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.26
22:55:33 SQL> CREATE TABLE svm6122 COMPRESS AS
22:55:33   2  SELECT
22:55:33   3  pair
22:55:33   4  ,ydate
22:55:33   5  ,prdate
22:55:33   6  ,clse
22:55:33   7  -- g6 is important. I want to predict g6:
22:55:33   8  ,ld6 - clse g6
22:55:33   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:55:33  10  -- I want more attributes from the ones I derived above:
22:55:33  11  -- clse relation to moving-min
22:55:33  12  ,clse-min4  cm4
22:55:33  13  ,clse-min6  cm6
22:55:33  14  ,clse-min8  cm8
22:55:33  15  ,clse-min10 cm10
22:55:33  16  ,clse-min12 cm12
22:55:33  17  ,clse-min14 cm14
22:55:33  18  ,clse-min16 cm16
22:55:33  19  ,clse-min18 cm18
22:55:33  20  -- clse relation to moving-avg
22:55:33  21  ,clse-avg4  ca4
22:55:33  22  ,clse-avg6  ca6
22:55:33  23  ,clse-avg8  ca8
22:55:33  24  ,clse-avg10 ca10
22:55:33  25  ,clse-avg12 ca12
22:55:33  26  ,clse-avg14 ca14
22:55:33  27  ,clse-avg16 ca16
22:55:33  28  ,clse-avg18 ca18
22:55:33  29  -- clse relation to moving-max
22:55:33  30  ,clse-max4  cx4
22:55:33  31  ,clse-max6  cx6
22:55:33  32  ,clse-max8  cx8
22:55:33  33  ,clse-max10 cx10
22:55:33  34  ,clse-max12 cx12
22:55:33  35  ,clse-max14 cx14
22:55:33  36  ,clse-max16 cx16
22:55:33  37  ,clse-max18 cx18
22:55:33  38  -- Derive more attributes.
22:55:33  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:55:33  40  -- But COVAR_POP is more stable:
22:55:33  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:55:33  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:55:33  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:55:33  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:55:33  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:55:33  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:55:33  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:55:33  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:55:33  49  -- Derive date related attributes:
22:55:33  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:55:33  51  ,0+TO_CHAR(ydate,'D')d
22:55:33  52  ,0+TO_CHAR(ydate,'W')w
22:55:33  53  -- mpm stands for minutes-past-midnight:
22:55:33  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:55:33  55  -- mph stands for minutes-past-hour:
22:55:33  56  ,0+TO_CHAR(ydate,'MI')mph
22:55:33  57  FROM svm6102
22:55:33  58  ORDER BY ydate
22:55:33  59  /

Table created.

Elapsed: 00:00:02.10
22:55:35 SQL> 
22:55:35 SQL> -- rpt
22:55:35 SQL> 
22:55:35 SQL> SELECT
22:55:35   2  pair
22:55:35   3  ,COUNT(pair)
22:55:35   4  ,MIN(clse),MAX(clse)
22:55:35   5  ,MIN(ydate),MAX(ydate)
22:55:35   6  FROM svm6122
22:55:35   7  GROUP BY pair
22:55:35   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       20737   1.535825	   1.6295 2010-09-15 22:25:01 2010-12-24 21:55:00

Elapsed: 00:00:00.04
22:55:35 SQL> 
22:55:35 SQL> -- Prepare for derivation of NTILE based params:
22:55:35 SQL> 
22:55:35 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.19
22:55:36 SQL> CREATE TABLE svm6142 COMPRESS AS
22:55:36   2  SELECT
22:55:36   3  pair
22:55:36   4  ,ydate
22:55:36   5  ,prdate
22:55:36   6  ,clse
22:55:36   7  ,g6
22:55:36   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:55:36   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:55:36  10  ,CASE WHEN trend IS NULL THEN 1
22:55:36  11  	    WHEN trend =0      THEN 1
22:55:36  12  	    ELSE trend END trend
22:55:36  13  ,cm4
22:55:36  14  ,cm6
22:55:36  15  ,cm8
22:55:36  16  ,cm10
22:55:36  17  ,cm12
22:55:36  18  ,cm14
22:55:36  19  ,cm16
22:55:36  20  ,cm18
22:55:36  21  --
22:55:36  22  ,ca4
22:55:36  23  ,ca6
22:55:36  24  ,ca8
22:55:36  25  ,ca10
22:55:36  26  ,ca12
22:55:36  27  ,ca14
22:55:36  28  ,ca16
22:55:36  29  ,ca18
22:55:36  30  --
22:55:36  31  ,cx4
22:55:36  32  ,cx6
22:55:36  33  ,cx8
22:55:36  34  ,cx10
22:55:36  35  ,cx12
22:55:36  36  ,cx14
22:55:36  37  ,cx16
22:55:36  38  ,cx18
22:55:36  39  --
22:55:36  40  ,crr4
22:55:36  41  ,crr6
22:55:36  42  ,crr8
22:55:36  43  ,crr10
22:55:36  44  ,crr12
22:55:36  45  ,crr14
22:55:36  46  ,crr16
22:55:36  47  ,crr18
22:55:36  48  --
22:55:36  49  ,hh
22:55:36  50  ,d
22:55:36  51  ,w
22:55:36  52  ,mpm
22:55:36  53  ,mph
22:55:36  54  FROM svm6122
22:55:36  55  ORDER BY ydate
22:55:36  56  /

Table created.

Elapsed: 00:00:00.38
22:55:36 SQL> 
22:55:36 SQL> -- rpt
22:55:36 SQL> 
22:55:36 SQL> SELECT
22:55:36   2  pair
22:55:36   3  ,trend
22:55:36   4  ,gatt
22:55:36   5  ,COUNT(pair)
22:55:36   6  ,AVG(g6)
22:55:36   7  FROM svm6142
22:55:36   8  GROUP BY pair,trend,gatt
22:55:36   9  ORDER BY pair,trend,gatt
22:55:36  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6598 -.00249501
gbp_usd 	-1 up	      3731 .004304556
gbp_usd 	-1		23
gbp_usd 	 1 nup	      6594 -.00262086
gbp_usd 	 1 up	      3742 .004375975
gbp_usd 	 1		49

6 rows selected.

Elapsed: 00:00:00.03
22:55:36 SQL> 
22:55:36 SQL> 
22:55:36 SQL> -- Derive NTILE based params:
22:55:36 SQL> 
22:55:36 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.11
22:55:36 SQL> CREATE TABLE svm6162 COMPRESS AS
22:55:36   2  SELECT
22:55:36   3  pair
22:55:36   4  ,ydate
22:55:36   5  ,prdate
22:55:36   6  ,clse
22:55:36   7  ,g6
22:55:36   8  ,gatt
22:55:36   9  ,gattn
22:55:36  10  ,trend
22:55:36  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:55:36  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:55:36  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:55:36  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:55:36  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:55:36  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:55:36  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:55:36  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:55:36  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:55:36  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:55:36  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:55:36  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:55:36  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:55:36  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:55:36  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:55:36  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:55:36  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:55:36  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:55:36  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:55:36  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:55:36  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:55:36  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:55:36  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:55:36  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:55:36  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:55:36  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:55:36  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:55:36  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:55:36  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:55:36  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:55:36  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:55:36  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:55:36  43  ,hh  att32
22:55:36  44  ,d   att33
22:55:36  45  ,w   att34
22:55:36  46  ,mpm att35
22:55:36  47  ,mph att36
22:55:36  48  ,trend att37
22:55:36  49  FROM svm6142
22:55:36  50  ORDER BY ydate
22:55:36  51  /

Table created.

Elapsed: 00:00:04.94
22:55:41 SQL> 
22:55:41 SQL> -- rpt
22:55:41 SQL> 
22:55:41 SQL> SELECT
22:55:41   2  pair
22:55:41   3  ,trend
22:55:41   4  ,gatt
22:55:41   5  ,COUNT(pair)
22:55:41   6  ,AVG(g6)
22:55:41   7  FROM svm6162
22:55:41   8  GROUP BY pair,trend,gatt
22:55:41   9  ORDER BY pair,trend,gatt
22:55:41  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6598 -.00249501
gbp_usd 	-1 up	      3731 .004304556
gbp_usd 	-1		23
gbp_usd 	 1 nup	      6594 -.00262086
gbp_usd 	 1 up	      3742 .004375975
gbp_usd 	 1		49

6 rows selected.

Elapsed: 00:00:00.03
22:55:41 SQL> 
22:55:41 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.16
22:55:41 SQL> CREATE TABLE modsrc COMPRESS AS
22:55:41   2  SELECT
22:55:41   3  pair
22:55:41   4  ,ydate
22:55:41   5  ,prdate
22:55:41   6  ,trend
22:55:41   7  ,g6
22:55:41   8  ,gatt
22:55:41   9  ,gattn
22:55:41  10  FROM svm6162
22:55:41  11  /

Table created.

Elapsed: 00:00:00.10
22:55:41 SQL> 
22:55:41 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
22:55:42 SQL> 
22:55:42 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
22:55:42 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
22:55:42   2  SELECT
22:55:42   3  ydate
22:55:42   4  ,trend gbp_trend
22:55:42   5  ,g6    gbp_g6
22:55:42   6  ,gatt  gbp_gatt
22:55:42   7  ,gattn gbp_gattn
22:55:42   8  FROM modsrc
22:55:42   9  /

Table created.

Elapsed: 00:00:00.06
22:55:42 SQL> 
22:55:42 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
22:55:42 SQL> 
22:55:42 SQL> -- I need a copy of the attributes:
22:55:42 SQL> 
22:55:42 SQL> 
22:55:42 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.05
22:55:42 SQL> CREATE TABLE gbp_att COMPRESS AS
22:55:42   2  SELECT
22:55:42   3  ydate
22:55:42   4  ,att00 gbp_att00
22:55:42   5  ,att01 gbp_att01
22:55:42   6  ,att02 gbp_att02
22:55:42   7  ,att03 gbp_att03
22:55:42   8  ,att04 gbp_att04
22:55:42   9  ,att05 gbp_att05
22:55:42  10  ,att06 gbp_att06
22:55:42  11  ,att07 gbp_att07
22:55:42  12  ,att08 gbp_att08
22:55:42  13  ,att09 gbp_att09
22:55:42  14  ,att10 gbp_att10
22:55:42  15  ,att11 gbp_att11
22:55:42  16  ,att12 gbp_att12
22:55:42  17  ,att13 gbp_att13
22:55:42  18  ,att14 gbp_att14
22:55:42  19  ,att15 gbp_att15
22:55:42  20  ,att16 gbp_att16
22:55:42  21  ,att17 gbp_att17
22:55:42  22  ,att18 gbp_att18
22:55:42  23  ,att19 gbp_att19
22:55:42  24  ,att20 gbp_att20
22:55:42  25  ,att21 gbp_att21
22:55:42  26  ,att22 gbp_att22
22:55:42  27  ,att23 gbp_att23
22:55:42  28  ,att24 gbp_att24
22:55:42  29  ,att25 gbp_att25
22:55:42  30  ,att26 gbp_att26
22:55:42  31  ,att27 gbp_att27
22:55:42  32  ,att28 gbp_att28
22:55:42  33  ,att29 gbp_att29
22:55:42  34  ,att30 gbp_att30
22:55:42  35  ,att31 gbp_att31
22:55:42  36  ,att32 gbp_att32
22:55:42  37  ,att33 gbp_att33
22:55:42  38  ,att34 gbp_att34
22:55:42  39  ,att35 gbp_att35
22:55:42  40  ,att36 gbp_att36
22:55:42  41  ,att37 gbp_att37
22:55:42  42  FROM svm6162
22:55:42  43  /

Table created.

Elapsed: 00:00:00.18
22:55:42 SQL> 
22:55:42 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
22:55:43 SQL> 
22:55:43 SQL> -- rpt
22:55:43 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     20737

Elapsed: 00:00:00.89
22:55:43 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     20737

Elapsed: 00:00:00.01
22:55:43 SQL> 
22:55:43 SQL> --
22:55:43 SQL> -- jpy10.sql
22:55:43 SQL> --
22:55:43 SQL> 
22:55:43 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:55:43 SQL> 
22:55:43 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.37
22:55:44 SQL> 
22:55:44 SQL> -- I created di5min here:
22:55:44 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:55:44 SQL> 
22:55:44 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:55:44   2  SELECT
22:55:44   3  pair
22:55:44   4  ,ydate
22:55:44   5  ,prdate
22:55:44   6  ,rownum rnum -- acts as t in my time-series
22:55:44   7  ,clse
22:55:44   8  -- Derive a bunch of attributes from clse, the latest price:
22:55:44   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:55:44  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:55:44  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:55:44  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:55:44  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:55:44  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:55:44  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:55:44  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:55:44  17  --
22:55:44  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:55:44  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:55:44  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:55:44  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:55:44  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:55:44  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:55:44  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:55:44  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:55:44  26  --
22:55:44  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:55:44  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:55:44  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:55:44  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:55:44  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:55:44  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:55:44  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:55:44  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:55:44  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:55:44  36  FROM di5min WHERE pair LIKE'%jpy%'
22:55:44  37  ORDER BY ydate
22:55:44  38  /

View created.

Elapsed: 00:00:00.04
22:55:44 SQL> 
22:55:44 SQL> -- rpt
22:55:44 SQL> 
22:55:44 SQL> SELECT
22:55:44   2  pair
22:55:44   3  ,COUNT(pair)
22:55:44   4  ,MIN(clse),MAX(clse)
22:55:44   5  ,MIN(avg6),MAX(avg6)
22:55:44   6  ,MIN(ydate),MAX(ydate)
22:55:44   7  FROM svm6102
22:55:44   8  GROUP BY pair
22:55:44   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       20736	 80.25	    85.89 80.3595205 85.8020548 2010-09-15 22:25:01 2010-12-24 21:55:00

Elapsed: 00:00:00.94
22:55:45 SQL> 
22:55:45 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:55:45 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.26
22:55:45 SQL> CREATE TABLE svm6122 COMPRESS AS
22:55:45   2  SELECT
22:55:45   3  pair
22:55:45   4  ,ydate
22:55:45   5  ,prdate
22:55:45   6  ,clse
22:55:45   7  -- g6 is important. I want to predict g6:
22:55:45   8  ,ld6 - clse g6
22:55:45   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:55:45  10  -- I want more attributes from the ones I derived above:
22:55:45  11  -- clse relation to moving-min
22:55:45  12  ,clse-min4  cm4
22:55:45  13  ,clse-min6  cm6
22:55:45  14  ,clse-min8  cm8
22:55:45  15  ,clse-min10 cm10
22:55:45  16  ,clse-min12 cm12
22:55:45  17  ,clse-min14 cm14
22:55:45  18  ,clse-min16 cm16
22:55:45  19  ,clse-min18 cm18
22:55:45  20  -- clse relation to moving-avg
22:55:45  21  ,clse-avg4  ca4
22:55:45  22  ,clse-avg6  ca6
22:55:45  23  ,clse-avg8  ca8
22:55:45  24  ,clse-avg10 ca10
22:55:45  25  ,clse-avg12 ca12
22:55:45  26  ,clse-avg14 ca14
22:55:45  27  ,clse-avg16 ca16
22:55:45  28  ,clse-avg18 ca18
22:55:45  29  -- clse relation to moving-max
22:55:45  30  ,clse-max4  cx4
22:55:45  31  ,clse-max6  cx6
22:55:45  32  ,clse-max8  cx8
22:55:45  33  ,clse-max10 cx10
22:55:45  34  ,clse-max12 cx12
22:55:45  35  ,clse-max14 cx14
22:55:45  36  ,clse-max16 cx16
22:55:45  37  ,clse-max18 cx18
22:55:45  38  -- Derive more attributes.
22:55:45  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:55:45  40  -- But COVAR_POP is more stable:
22:55:45  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:55:45  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:55:45  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:55:45  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:55:45  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:55:45  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:55:45  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:55:45  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:55:45  49  -- Derive date related attributes:
22:55:45  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:55:45  51  ,0+TO_CHAR(ydate,'D')d
22:55:45  52  ,0+TO_CHAR(ydate,'W')w
22:55:45  53  -- mpm stands for minutes-past-midnight:
22:55:45  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:55:45  55  -- mph stands for minutes-past-hour:
22:55:45  56  ,0+TO_CHAR(ydate,'MI')mph
22:55:45  57  FROM svm6102
22:55:45  58  ORDER BY ydate
22:55:45  59  /

Table created.

Elapsed: 00:00:02.11
22:55:47 SQL> 
22:55:47 SQL> -- rpt
22:55:47 SQL> 
22:55:47 SQL> SELECT
22:55:47   2  pair
22:55:47   3  ,COUNT(pair)
22:55:47   4  ,MIN(clse),MAX(clse)
22:55:47   5  ,MIN(ydate),MAX(ydate)
22:55:47   6  FROM svm6122
22:55:47   7  GROUP BY pair
22:55:47   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       20736	 80.25	    85.89 2010-09-15 22:25:01 2010-12-24 21:55:00

Elapsed: 00:00:00.06
22:55:47 SQL> 
22:55:47 SQL> -- Prepare for derivation of NTILE based params:
22:55:47 SQL> 
22:55:47 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.18
22:55:47 SQL> CREATE TABLE svm6142 COMPRESS AS
22:55:47   2  SELECT
22:55:47   3  pair
22:55:47   4  ,ydate
22:55:47   5  ,prdate
22:55:47   6  ,clse
22:55:47   7  ,g6
22:55:47   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:55:47   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:55:47  10  ,CASE WHEN trend IS NULL THEN 1
22:55:47  11  	    WHEN trend =0      THEN 1
22:55:47  12  	    ELSE trend END trend
22:55:47  13  ,cm4
22:55:47  14  ,cm6
22:55:47  15  ,cm8
22:55:47  16  ,cm10
22:55:47  17  ,cm12
22:55:47  18  ,cm14
22:55:47  19  ,cm16
22:55:47  20  ,cm18
22:55:47  21  --
22:55:47  22  ,ca4
22:55:47  23  ,ca6
22:55:47  24  ,ca8
22:55:47  25  ,ca10
22:55:47  26  ,ca12
22:55:47  27  ,ca14
22:55:47  28  ,ca16
22:55:47  29  ,ca18
22:55:47  30  --
22:55:47  31  ,cx4
22:55:47  32  ,cx6
22:55:47  33  ,cx8
22:55:47  34  ,cx10
22:55:47  35  ,cx12
22:55:47  36  ,cx14
22:55:47  37  ,cx16
22:55:47  38  ,cx18
22:55:47  39  --
22:55:47  40  ,crr4
22:55:47  41  ,crr6
22:55:47  42  ,crr8
22:55:47  43  ,crr10
22:55:47  44  ,crr12
22:55:47  45  ,crr14
22:55:47  46  ,crr16
22:55:47  47  ,crr18
22:55:47  48  --
22:55:47  49  ,hh
22:55:47  50  ,d
22:55:47  51  ,w
22:55:47  52  ,mpm
22:55:47  53  ,mph
22:55:47  54  FROM svm6122
22:55:47  55  ORDER BY ydate
22:55:47  56  /

Table created.

Elapsed: 00:00:00.35
22:55:48 SQL> 
22:55:48 SQL> -- rpt
22:55:48 SQL> 
22:55:48 SQL> SELECT
22:55:48   2  pair
22:55:48   3  ,trend
22:55:48   4  ,gatt
22:55:48   5  ,COUNT(pair)
22:55:48   6  ,AVG(g6)
22:55:48   7  FROM svm6142
22:55:48   8  GROUP BY pair,trend,gatt
22:55:48   9  ORDER BY pair,trend,gatt
22:55:48  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5654 -.15617184
usd_jpy 	-1 up	      5199 .158911925
usd_jpy 	-1		66
usd_jpy 	 1 nup	      5403 -.15620008
usd_jpy 	 1 up	      4408 .162386074
usd_jpy 	 1		 6

6 rows selected.

Elapsed: 00:00:00.04
22:55:48 SQL> 
22:55:48 SQL> 
22:55:48 SQL> -- Derive NTILE based params:
22:55:48 SQL> 
22:55:48 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.18
22:55:48 SQL> CREATE TABLE svm6162 COMPRESS AS
22:55:48   2  SELECT
22:55:48   3  pair
22:55:48   4  ,ydate
22:55:48   5  ,prdate
22:55:48   6  ,clse
22:55:48   7  ,g6
22:55:48   8  ,gatt
22:55:48   9  ,gattn
22:55:48  10  ,trend
22:55:48  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:55:48  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:55:48  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:55:48  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:55:48  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:55:48  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:55:48  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:55:48  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:55:48  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:55:48  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:55:48  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:55:48  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:55:48  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:55:48  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:55:48  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:55:48  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:55:48  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:55:48  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:55:48  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:55:48  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:55:48  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:55:48  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:55:48  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:55:48  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:55:48  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:55:48  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:55:48  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:55:48  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:55:48  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:55:48  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:55:48  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:55:48  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:55:48  43  ,hh  att32
22:55:48  44  ,d   att33
22:55:48  45  ,w   att34
22:55:48  46  ,mpm att35
22:55:48  47  ,mph att36
22:55:48  48  ,trend att37
22:55:48  49  FROM svm6142
22:55:48  50  ORDER BY ydate
22:55:48  51  /

Table created.

Elapsed: 00:00:05.08
22:55:53 SQL> 
22:55:53 SQL> -- rpt
22:55:53 SQL> 
22:55:53 SQL> SELECT
22:55:53   2  pair
22:55:53   3  ,trend
22:55:53   4  ,gatt
22:55:53   5  ,COUNT(pair)
22:55:53   6  ,AVG(g6)
22:55:53   7  FROM svm6162
22:55:53   8  GROUP BY pair,trend,gatt
22:55:53   9  ORDER BY pair,trend,gatt
22:55:53  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5654 -.15617184
usd_jpy 	-1 up	      5199 .158911925
usd_jpy 	-1		66
usd_jpy 	 1 nup	      5403 -.15620008
usd_jpy 	 1 up	      4408 .162386074
usd_jpy 	 1		 6

6 rows selected.

Elapsed: 00:00:00.02
22:55:53 SQL> 
22:55:53 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.21
22:55:53 SQL> CREATE TABLE modsrc COMPRESS AS
22:55:53   2  SELECT
22:55:53   3  pair
22:55:53   4  ,ydate
22:55:53   5  ,prdate
22:55:53   6  ,trend
22:55:53   7  ,g6
22:55:53   8  ,gatt
22:55:53   9  ,gattn
22:55:53  10  FROM svm6162
22:55:53  11  /

Table created.

Elapsed: 00:00:00.08
22:55:53 SQL> 
22:55:53 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
22:55:54 SQL> 
22:55:54 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
22:55:54 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
22:55:54   2  SELECT
22:55:54   3  ydate
22:55:54   4  ,trend jpy_trend
22:55:54   5  ,g6    jpy_g6
22:55:54   6  ,gatt  jpy_gatt
22:55:54   7  ,gattn jpy_gattn
22:55:54   8  FROM modsrc
22:55:54   9  /

Table created.

Elapsed: 00:00:00.06
22:55:54 SQL> 
22:55:54 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
22:55:54 SQL> 
22:55:54 SQL> -- I need a copy of the attributes:
22:55:54 SQL> 
22:55:54 SQL> 
22:55:54 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.04
22:55:54 SQL> CREATE TABLE jpy_att COMPRESS AS
22:55:54   2  SELECT
22:55:54   3  ydate
22:55:54   4  ,att00 jpy_att00
22:55:54   5  ,att01 jpy_att01
22:55:54   6  ,att02 jpy_att02
22:55:54   7  ,att03 jpy_att03
22:55:54   8  ,att04 jpy_att04
22:55:54   9  ,att05 jpy_att05
22:55:54  10  ,att06 jpy_att06
22:55:54  11  ,att07 jpy_att07
22:55:54  12  ,att08 jpy_att08
22:55:54  13  ,att09 jpy_att09
22:55:54  14  ,att10 jpy_att10
22:55:54  15  ,att11 jpy_att11
22:55:54  16  ,att12 jpy_att12
22:55:54  17  ,att13 jpy_att13
22:55:54  18  ,att14 jpy_att14
22:55:54  19  ,att15 jpy_att15
22:55:54  20  ,att16 jpy_att16
22:55:54  21  ,att17 jpy_att17
22:55:54  22  ,att18 jpy_att18
22:55:54  23  ,att19 jpy_att19
22:55:54  24  ,att20 jpy_att20
22:55:54  25  ,att21 jpy_att21
22:55:54  26  ,att22 jpy_att22
22:55:54  27  ,att23 jpy_att23
22:55:54  28  ,att24 jpy_att24
22:55:54  29  ,att25 jpy_att25
22:55:54  30  ,att26 jpy_att26
22:55:54  31  ,att27 jpy_att27
22:55:54  32  ,att28 jpy_att28
22:55:54  33  ,att29 jpy_att29
22:55:54  34  ,att30 jpy_att30
22:55:54  35  ,att31 jpy_att31
22:55:54  36  ,att32 jpy_att32
22:55:54  37  ,att33 jpy_att33
22:55:54  38  ,att34 jpy_att34
22:55:54  39  ,att35 jpy_att35
22:55:54  40  ,att36 jpy_att36
22:55:54  41  ,att37 jpy_att37
22:55:54  42  FROM svm6162
22:55:54  43  /

Table created.

Elapsed: 00:00:00.16
22:55:54 SQL> 
22:55:54 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
22:55:55 SQL> 
22:55:55 SQL> -- rpt
22:55:55 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     20736

Elapsed: 00:00:00.93
22:55:55 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     20736

Elapsed: 00:00:00.01
22:55:55 SQL> 
22:55:55 SQL> --
22:55:55 SQL> -- cad10.sql
22:55:55 SQL> --
22:55:55 SQL> 
22:55:55 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:55:55 SQL> 
22:55:55 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.35
22:55:56 SQL> 
22:55:56 SQL> -- I created di5min here:
22:55:56 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:55:56 SQL> 
22:55:56 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:55:56   2  SELECT
22:55:56   3  pair
22:55:56   4  ,ydate
22:55:56   5  ,prdate
22:55:56   6  ,rownum rnum -- acts as t in my time-series
22:55:56   7  ,clse
22:55:56   8  -- Derive a bunch of attributes from clse, the latest price:
22:55:56   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:55:56  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:55:56  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:55:56  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:55:56  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:55:56  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:55:56  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:55:56  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:55:56  17  --
22:55:56  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:55:56  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:55:56  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:55:56  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:55:56  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:55:56  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:55:56  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:55:56  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:55:56  26  --
22:55:56  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:55:56  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:55:56  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:55:56  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:55:56  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:55:56  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:55:56  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:55:56  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:55:56  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:55:56  36  FROM di5min WHERE pair LIKE'%cad%'
22:55:56  37  ORDER BY ydate
22:55:56  38  /

View created.

Elapsed: 00:00:00.04
22:55:56 SQL> 
22:55:56 SQL> -- rpt
22:55:56 SQL> 
22:55:56 SQL> SELECT
22:55:56   2  pair
22:55:56   3  ,COUNT(pair)
22:55:56   4  ,MIN(clse),MAX(clse)
22:55:56   5  ,MIN(avg6),MAX(avg6)
22:55:56   6  ,MIN(ydate),MAX(ydate)
22:55:56   7  FROM svm6102
22:55:56   8  GROUP BY pair
22:55:56   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       20734	 .9981	   1.0371 .999404795 1.03438904 2010-09-15 22:25:01 2010-12-24 21:55:00

Elapsed: 00:00:00.88
22:55:57 SQL> 
22:55:57 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:55:57 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.26
22:55:57 SQL> CREATE TABLE svm6122 COMPRESS AS
22:55:57   2  SELECT
22:55:57   3  pair
22:55:57   4  ,ydate
22:55:57   5  ,prdate
22:55:57   6  ,clse
22:55:57   7  -- g6 is important. I want to predict g6:
22:55:57   8  ,ld6 - clse g6
22:55:57   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:55:57  10  -- I want more attributes from the ones I derived above:
22:55:57  11  -- clse relation to moving-min
22:55:57  12  ,clse-min4  cm4
22:55:57  13  ,clse-min6  cm6
22:55:57  14  ,clse-min8  cm8
22:55:57  15  ,clse-min10 cm10
22:55:57  16  ,clse-min12 cm12
22:55:57  17  ,clse-min14 cm14
22:55:57  18  ,clse-min16 cm16
22:55:57  19  ,clse-min18 cm18
22:55:57  20  -- clse relation to moving-avg
22:55:57  21  ,clse-avg4  ca4
22:55:57  22  ,clse-avg6  ca6
22:55:57  23  ,clse-avg8  ca8
22:55:57  24  ,clse-avg10 ca10
22:55:57  25  ,clse-avg12 ca12
22:55:57  26  ,clse-avg14 ca14
22:55:57  27  ,clse-avg16 ca16
22:55:57  28  ,clse-avg18 ca18
22:55:57  29  -- clse relation to moving-max
22:55:57  30  ,clse-max4  cx4
22:55:57  31  ,clse-max6  cx6
22:55:57  32  ,clse-max8  cx8
22:55:57  33  ,clse-max10 cx10
22:55:57  34  ,clse-max12 cx12
22:55:57  35  ,clse-max14 cx14
22:55:57  36  ,clse-max16 cx16
22:55:57  37  ,clse-max18 cx18
22:55:57  38  -- Derive more attributes.
22:55:57  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:55:57  40  -- But COVAR_POP is more stable:
22:55:57  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:55:57  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:55:57  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:55:57  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:55:57  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:55:57  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:55:57  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:55:57  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:55:57  49  -- Derive date related attributes:
22:55:57  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:55:57  51  ,0+TO_CHAR(ydate,'D')d
22:55:57  52  ,0+TO_CHAR(ydate,'W')w
22:55:57  53  -- mpm stands for minutes-past-midnight:
22:55:57  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:55:57  55  -- mph stands for minutes-past-hour:
22:55:57  56  ,0+TO_CHAR(ydate,'MI')mph
22:55:57  57  FROM svm6102
22:55:57  58  ORDER BY ydate
22:55:57  59  /

Table created.

Elapsed: 00:00:02.18
22:55:59 SQL> 
22:55:59 SQL> -- rpt
22:55:59 SQL> 
22:55:59 SQL> SELECT
22:55:59   2  pair
22:55:59   3  ,COUNT(pair)
22:55:59   4  ,MIN(clse),MAX(clse)
22:55:59   5  ,MIN(ydate),MAX(ydate)
22:55:59   6  FROM svm6122
22:55:59   7  GROUP BY pair
22:55:59   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       20734	 .9981	   1.0371 2010-09-15 22:25:01 2010-12-24 21:55:00

Elapsed: 00:00:00.05
22:55:59 SQL> 
22:55:59 SQL> -- Prepare for derivation of NTILE based params:
22:55:59 SQL> 
22:55:59 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.27
22:56:00 SQL> CREATE TABLE svm6142 COMPRESS AS
22:56:00   2  SELECT
22:56:00   3  pair
22:56:00   4  ,ydate
22:56:00   5  ,prdate
22:56:00   6  ,clse
22:56:00   7  ,g6
22:56:00   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:56:00   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:56:00  10  ,CASE WHEN trend IS NULL THEN 1
22:56:00  11  	    WHEN trend =0      THEN 1
22:56:00  12  	    ELSE trend END trend
22:56:00  13  ,cm4
22:56:00  14  ,cm6
22:56:00  15  ,cm8
22:56:00  16  ,cm10
22:56:00  17  ,cm12
22:56:00  18  ,cm14
22:56:00  19  ,cm16
22:56:00  20  ,cm18
22:56:00  21  --
22:56:00  22  ,ca4
22:56:00  23  ,ca6
22:56:00  24  ,ca8
22:56:00  25  ,ca10
22:56:00  26  ,ca12
22:56:00  27  ,ca14
22:56:00  28  ,ca16
22:56:00  29  ,ca18
22:56:00  30  --
22:56:00  31  ,cx4
22:56:00  32  ,cx6
22:56:00  33  ,cx8
22:56:00  34  ,cx10
22:56:00  35  ,cx12
22:56:00  36  ,cx14
22:56:00  37  ,cx16
22:56:00  38  ,cx18
22:56:00  39  --
22:56:00  40  ,crr4
22:56:00  41  ,crr6
22:56:00  42  ,crr8
22:56:00  43  ,crr10
22:56:00  44  ,crr12
22:56:00  45  ,crr14
22:56:00  46  ,crr16
22:56:00  47  ,crr18
22:56:00  48  --
22:56:00  49  ,hh
22:56:00  50  ,d
22:56:00  51  ,w
22:56:00  52  ,mpm
22:56:00  53  ,mph
22:56:00  54  FROM svm6122
22:56:00  55  ORDER BY ydate
22:56:00  56  /

Table created.

Elapsed: 00:00:00.37
22:56:00 SQL> 
22:56:00 SQL> -- rpt
22:56:00 SQL> 
22:56:00 SQL> SELECT
22:56:00   2  pair
22:56:00   3  ,trend
22:56:00   4  ,gatt
22:56:00   5  ,COUNT(pair)
22:56:00   6  ,AVG(g6)
22:56:00   7  FROM svm6142
22:56:00   8  GROUP BY pair,trend,gatt
22:56:00   9  ORDER BY pair,trend,gatt
22:56:00  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7678 -.00136161
usd_cad 	-1 up	      3375 .003327746
usd_cad 	-1		26
usd_cad 	 1 nup	      7021 -.00163282
usd_cad 	 1 up	      2588 .003590763
usd_cad 	 1		46

6 rows selected.

Elapsed: 00:00:00.04
22:56:00 SQL> 
22:56:00 SQL> 
22:56:00 SQL> -- Derive NTILE based params:
22:56:00 SQL> 
22:56:00 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.11
22:56:00 SQL> CREATE TABLE svm6162 COMPRESS AS
22:56:00   2  SELECT
22:56:00   3  pair
22:56:00   4  ,ydate
22:56:00   5  ,prdate
22:56:00   6  ,clse
22:56:00   7  ,g6
22:56:00   8  ,gatt
22:56:00   9  ,gattn
22:56:00  10  ,trend
22:56:00  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:56:00  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:56:00  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:56:00  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:56:00  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:56:00  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:56:00  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:56:00  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:56:00  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:56:00  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:56:00  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:56:00  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:56:00  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:56:00  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:56:00  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:56:00  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:56:00  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:56:00  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:56:00  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:56:00  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:56:00  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:56:00  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:56:00  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:56:00  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:56:00  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:56:00  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:56:00  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:56:00  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:56:00  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:56:00  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:56:00  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:56:00  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:56:00  43  ,hh  att32
22:56:00  44  ,d   att33
22:56:00  45  ,w   att34
22:56:00  46  ,mpm att35
22:56:00  47  ,mph att36
22:56:00  48  ,trend att37
22:56:00  49  FROM svm6142
22:56:00  50  ORDER BY ydate
22:56:00  51  /

Table created.

Elapsed: 00:00:05.06
22:56:05 SQL> 
22:56:05 SQL> -- rpt
22:56:05 SQL> 
22:56:05 SQL> SELECT
22:56:05   2  pair
22:56:05   3  ,trend
22:56:05   4  ,gatt
22:56:05   5  ,COUNT(pair)
22:56:05   6  ,AVG(g6)
22:56:05   7  FROM svm6162
22:56:05   8  GROUP BY pair,trend,gatt
22:56:05   9  ORDER BY pair,trend,gatt
22:56:05  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7678 -.00136161
usd_cad 	-1 up	      3375 .003327746
usd_cad 	-1		26
usd_cad 	 1 nup	      7021 -.00163282
usd_cad 	 1 up	      2588 .003590763
usd_cad 	 1		46

6 rows selected.

Elapsed: 00:00:00.03
22:56:05 SQL> 
22:56:05 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
22:56:05 SQL> CREATE TABLE modsrc COMPRESS AS
22:56:05   2  SELECT
22:56:05   3  pair
22:56:05   4  ,ydate
22:56:05   5  ,prdate
22:56:05   6  ,trend
22:56:05   7  ,g6
22:56:05   8  ,gatt
22:56:05   9  ,gattn
22:56:05  10  FROM svm6162
22:56:05  11  /

Table created.

Elapsed: 00:00:00.08
22:56:05 SQL> 
22:56:05 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
22:56:06 SQL> 
22:56:06 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
22:56:06 SQL> CREATE TABLE cad_ms610 COMPRESS AS
22:56:06   2  SELECT
22:56:06   3  ydate
22:56:06   4  ,trend cad_trend
22:56:06   5  ,g6    cad_g6
22:56:06   6  ,gatt  cad_gatt
22:56:06   7  ,gattn cad_gattn
22:56:06   8  FROM modsrc
22:56:06   9  /

Table created.

Elapsed: 00:00:00.06
22:56:06 SQL> 
22:56:06 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
22:56:06 SQL> 
22:56:06 SQL> -- I need a copy of the attributes:
22:56:06 SQL> 
22:56:06 SQL> 
22:56:06 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.04
22:56:06 SQL> CREATE TABLE cad_att COMPRESS AS
22:56:06   2  SELECT
22:56:06   3  ydate
22:56:06   4  ,att00 cad_att00
22:56:06   5  ,att01 cad_att01
22:56:06   6  ,att02 cad_att02
22:56:06   7  ,att03 cad_att03
22:56:06   8  ,att04 cad_att04
22:56:06   9  ,att05 cad_att05
22:56:06  10  ,att06 cad_att06
22:56:06  11  ,att07 cad_att07
22:56:06  12  ,att08 cad_att08
22:56:06  13  ,att09 cad_att09
22:56:06  14  ,att10 cad_att10
22:56:06  15  ,att11 cad_att11
22:56:06  16  ,att12 cad_att12
22:56:06  17  ,att13 cad_att13
22:56:06  18  ,att14 cad_att14
22:56:06  19  ,att15 cad_att15
22:56:06  20  ,att16 cad_att16
22:56:06  21  ,att17 cad_att17
22:56:06  22  ,att18 cad_att18
22:56:06  23  ,att19 cad_att19
22:56:06  24  ,att20 cad_att20
22:56:06  25  ,att21 cad_att21
22:56:06  26  ,att22 cad_att22
22:56:06  27  ,att23 cad_att23
22:56:06  28  ,att24 cad_att24
22:56:06  29  ,att25 cad_att25
22:56:06  30  ,att26 cad_att26
22:56:06  31  ,att27 cad_att27
22:56:06  32  ,att28 cad_att28
22:56:06  33  ,att29 cad_att29
22:56:06  34  ,att30 cad_att30
22:56:06  35  ,att31 cad_att31
22:56:06  36  ,att32 cad_att32
22:56:06  37  ,att33 cad_att33
22:56:06  38  ,att34 cad_att34
22:56:06  39  ,att35 cad_att35
22:56:06  40  ,att36 cad_att36
22:56:06  41  ,att37 cad_att37
22:56:06  42  FROM svm6162
22:56:06  43  /

Table created.

Elapsed: 00:00:00.19
22:56:06 SQL> 
22:56:06 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.52
22:56:07 SQL> 
22:56:07 SQL> -- rpt
22:56:07 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     20734

Elapsed: 00:00:00.86
22:56:07 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     20734

Elapsed: 00:00:00.01
22:56:07 SQL> 
22:56:07 SQL> --
22:56:07 SQL> -- chf10.sql
22:56:07 SQL> --
22:56:07 SQL> 
22:56:07 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:56:07 SQL> 
22:56:07 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.71
22:56:08 SQL> 
22:56:08 SQL> -- I created di5min here:
22:56:08 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:56:08 SQL> 
22:56:08 SQL> CREATE OR REPLACE VIEW svm6102 AS
22:56:08   2  SELECT
22:56:08   3  pair
22:56:08   4  ,ydate
22:56:08   5  ,prdate
22:56:08   6  ,rownum rnum -- acts as t in my time-series
22:56:08   7  ,clse
22:56:08   8  -- Derive a bunch of attributes from clse, the latest price:
22:56:08   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
22:56:08  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
22:56:08  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
22:56:08  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
22:56:08  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
22:56:08  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
22:56:08  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
22:56:08  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
22:56:08  17  --
22:56:08  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
22:56:08  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
22:56:08  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
22:56:08  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
22:56:08  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
22:56:08  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
22:56:08  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
22:56:08  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
22:56:08  26  --
22:56:08  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
22:56:08  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
22:56:08  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
22:56:08  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
22:56:08  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
22:56:08  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
22:56:08  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
22:56:08  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
22:56:08  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
22:56:08  36  FROM di5min WHERE pair LIKE'%chf%'
22:56:08  37  ORDER BY ydate
22:56:08  38  /

View created.

Elapsed: 00:00:00.05
22:56:08 SQL> 
22:56:08 SQL> -- rpt
22:56:08 SQL> 
22:56:08 SQL> SELECT
22:56:08   2  pair
22:56:08   3  ,COUNT(pair)
22:56:08   4  ,MIN(clse),MAX(clse)
22:56:08   5  ,MIN(avg6),MAX(avg6)
22:56:08   6  ,MIN(ydate),MAX(ydate)
22:56:08   7  FROM svm6102
22:56:08   8  GROUP BY pair
22:56:08   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       20737	 .9471	   1.0177 .950038356 1.01613699 2010-09-15 22:25:01 2010-12-24 21:55:00

Elapsed: 00:00:00.88
22:56:09 SQL> 
22:56:09 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
22:56:09 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.22
22:56:09 SQL> CREATE TABLE svm6122 COMPRESS AS
22:56:09   2  SELECT
22:56:09   3  pair
22:56:09   4  ,ydate
22:56:09   5  ,prdate
22:56:09   6  ,clse
22:56:09   7  -- g6 is important. I want to predict g6:
22:56:09   8  ,ld6 - clse g6
22:56:09   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
22:56:09  10  -- I want more attributes from the ones I derived above:
22:56:09  11  -- clse relation to moving-min
22:56:09  12  ,clse-min4  cm4
22:56:09  13  ,clse-min6  cm6
22:56:09  14  ,clse-min8  cm8
22:56:09  15  ,clse-min10 cm10
22:56:09  16  ,clse-min12 cm12
22:56:09  17  ,clse-min14 cm14
22:56:09  18  ,clse-min16 cm16
22:56:09  19  ,clse-min18 cm18
22:56:09  20  -- clse relation to moving-avg
22:56:09  21  ,clse-avg4  ca4
22:56:09  22  ,clse-avg6  ca6
22:56:09  23  ,clse-avg8  ca8
22:56:09  24  ,clse-avg10 ca10
22:56:09  25  ,clse-avg12 ca12
22:56:09  26  ,clse-avg14 ca14
22:56:09  27  ,clse-avg16 ca16
22:56:09  28  ,clse-avg18 ca18
22:56:09  29  -- clse relation to moving-max
22:56:09  30  ,clse-max4  cx4
22:56:09  31  ,clse-max6  cx6
22:56:09  32  ,clse-max8  cx8
22:56:09  33  ,clse-max10 cx10
22:56:09  34  ,clse-max12 cx12
22:56:09  35  ,clse-max14 cx14
22:56:09  36  ,clse-max16 cx16
22:56:09  37  ,clse-max18 cx18
22:56:09  38  -- Derive more attributes.
22:56:09  39  -- I want to use CORR() here to help SVM see the shape of the series.
22:56:09  40  -- But COVAR_POP is more stable:
22:56:09  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
22:56:09  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:56:09  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:56:09  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:56:09  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:56:09  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:56:09  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:56:09  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:56:09  49  -- Derive date related attributes:
22:56:09  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:56:09  51  ,0+TO_CHAR(ydate,'D')d
22:56:09  52  ,0+TO_CHAR(ydate,'W')w
22:56:09  53  -- mpm stands for minutes-past-midnight:
22:56:09  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:56:09  55  -- mph stands for minutes-past-hour:
22:56:09  56  ,0+TO_CHAR(ydate,'MI')mph
22:56:09  57  FROM svm6102
22:56:09  58  ORDER BY ydate
22:56:09  59  /

Table created.

Elapsed: 00:00:02.10
22:56:11 SQL> 
22:56:11 SQL> -- rpt
22:56:11 SQL> 
22:56:11 SQL> SELECT
22:56:11   2  pair
22:56:11   3  ,COUNT(pair)
22:56:11   4  ,MIN(clse),MAX(clse)
22:56:11   5  ,MIN(ydate),MAX(ydate)
22:56:11   6  FROM svm6122
22:56:11   7  GROUP BY pair
22:56:11   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       20737	 .9471	   1.0177 2010-09-15 22:25:01 2010-12-24 21:55:00

Elapsed: 00:00:00.04
22:56:11 SQL> 
22:56:11 SQL> -- Prepare for derivation of NTILE based params:
22:56:11 SQL> 
22:56:11 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.19
22:56:12 SQL> CREATE TABLE svm6142 COMPRESS AS
22:56:12   2  SELECT
22:56:12   3  pair
22:56:12   4  ,ydate
22:56:12   5  ,prdate
22:56:12   6  ,clse
22:56:12   7  ,g6
22:56:12   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
22:56:12   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
22:56:12  10  ,CASE WHEN trend IS NULL THEN 1
22:56:12  11  	    WHEN trend =0      THEN 1
22:56:12  12  	    ELSE trend END trend
22:56:12  13  ,cm4
22:56:12  14  ,cm6
22:56:12  15  ,cm8
22:56:12  16  ,cm10
22:56:12  17  ,cm12
22:56:12  18  ,cm14
22:56:12  19  ,cm16
22:56:12  20  ,cm18
22:56:12  21  --
22:56:12  22  ,ca4
22:56:12  23  ,ca6
22:56:12  24  ,ca8
22:56:12  25  ,ca10
22:56:12  26  ,ca12
22:56:12  27  ,ca14
22:56:12  28  ,ca16
22:56:12  29  ,ca18
22:56:12  30  --
22:56:12  31  ,cx4
22:56:12  32  ,cx6
22:56:12  33  ,cx8
22:56:12  34  ,cx10
22:56:12  35  ,cx12
22:56:12  36  ,cx14
22:56:12  37  ,cx16
22:56:12  38  ,cx18
22:56:12  39  --
22:56:12  40  ,crr4
22:56:12  41  ,crr6
22:56:12  42  ,crr8
22:56:12  43  ,crr10
22:56:12  44  ,crr12
22:56:12  45  ,crr14
22:56:12  46  ,crr16
22:56:12  47  ,crr18
22:56:12  48  --
22:56:12  49  ,hh
22:56:12  50  ,d
22:56:12  51  ,w
22:56:12  52  ,mpm
22:56:12  53  ,mph
22:56:12  54  FROM svm6122
22:56:12  55  ORDER BY ydate
22:56:12  56  /

Table created.

Elapsed: 00:00:00.37
22:56:12 SQL> 
22:56:12 SQL> -- rpt
22:56:12 SQL> 
22:56:12 SQL> SELECT
22:56:12   2  pair
22:56:12   3  ,trend
22:56:12   4  ,gatt
22:56:12   5  ,COUNT(pair)
22:56:12   6  ,AVG(g6)
22:56:12   7  FROM svm6142
22:56:12   8  GROUP BY pair,trend,gatt
22:56:12   9  ORDER BY pair,trend,gatt
22:56:12  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7524 -.00182455
usd_chf 	-1 up	      3335 .003944738
usd_chf 	-1		20
usd_chf 	 1 nup	      7122 -.00171477
usd_chf 	 1 up	      2684 .003708453
usd_chf 	 1		52

6 rows selected.

Elapsed: 00:00:00.04
22:56:12 SQL> 
22:56:12 SQL> 
22:56:12 SQL> -- Derive NTILE based params:
22:56:12 SQL> 
22:56:12 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
22:56:12 SQL> CREATE TABLE svm6162 COMPRESS AS
22:56:12   2  SELECT
22:56:12   3  pair
22:56:12   4  ,ydate
22:56:12   5  ,prdate
22:56:12   6  ,clse
22:56:12   7  ,g6
22:56:12   8  ,gatt
22:56:12   9  ,gattn
22:56:12  10  ,trend
22:56:12  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
22:56:12  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
22:56:12  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
22:56:12  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
22:56:12  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
22:56:12  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
22:56:12  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
22:56:12  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
22:56:12  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
22:56:12  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
22:56:12  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
22:56:12  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
22:56:12  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
22:56:12  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
22:56:12  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
22:56:12  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
22:56:12  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
22:56:12  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
22:56:12  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
22:56:12  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
22:56:12  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
22:56:12  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
22:56:12  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
22:56:12  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
22:56:12  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
22:56:12  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
22:56:12  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
22:56:12  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
22:56:12  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
22:56:12  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
22:56:12  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
22:56:12  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
22:56:12  43  ,hh  att32
22:56:12  44  ,d   att33
22:56:12  45  ,w   att34
22:56:12  46  ,mpm att35
22:56:12  47  ,mph att36
22:56:12  48  ,trend att37
22:56:12  49  FROM svm6142
22:56:12  50  ORDER BY ydate
22:56:12  51  /

Table created.

Elapsed: 00:00:05.01
22:56:17 SQL> 
22:56:17 SQL> -- rpt
22:56:17 SQL> 
22:56:17 SQL> SELECT
22:56:17   2  pair
22:56:17   3  ,trend
22:56:17   4  ,gatt
22:56:17   5  ,COUNT(pair)
22:56:17   6  ,AVG(g6)
22:56:17   7  FROM svm6162
22:56:17   8  GROUP BY pair,trend,gatt
22:56:17   9  ORDER BY pair,trend,gatt
22:56:17  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7524 -.00182455
usd_chf 	-1 up	      3335 .003944738
usd_chf 	-1		20
usd_chf 	 1 nup	      7122 -.00171477
usd_chf 	 1 up	      2684 .003708453
usd_chf 	 1		52

6 rows selected.

Elapsed: 00:00:00.04
22:56:17 SQL> 
22:56:17 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
22:56:17 SQL> CREATE TABLE modsrc COMPRESS AS
22:56:17   2  SELECT
22:56:17   3  pair
22:56:17   4  ,ydate
22:56:17   5  ,prdate
22:56:17   6  ,trend
22:56:17   7  ,g6
22:56:17   8  ,gatt
22:56:17   9  ,gattn
22:56:17  10  FROM svm6162
22:56:17  11  /

Table created.

Elapsed: 00:00:00.09
22:56:17 SQL> 
22:56:17 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.25
22:56:18 SQL> 
22:56:18 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
22:56:18 SQL> CREATE TABLE chf_ms610 COMPRESS AS
22:56:18   2  SELECT
22:56:18   3  ydate
22:56:18   4  ,trend chf_trend
22:56:18   5  ,g6    chf_g6
22:56:18   6  ,gatt  chf_gatt
22:56:18   7  ,gattn chf_gattn
22:56:18   8  FROM modsrc
22:56:18   9  /

Table created.

Elapsed: 00:00:00.07
22:56:18 SQL> 
22:56:18 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
22:56:18 SQL> 
22:56:18 SQL> -- I need a copy of the attributes:
22:56:18 SQL> 
22:56:18 SQL> 
22:56:18 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.04
22:56:18 SQL> CREATE TABLE chf_att COMPRESS AS
22:56:18   2  SELECT
22:56:18   3  ydate
22:56:18   4  ,att00 chf_att00
22:56:18   5  ,att01 chf_att01
22:56:18   6  ,att02 chf_att02
22:56:18   7  ,att03 chf_att03
22:56:18   8  ,att04 chf_att04
22:56:18   9  ,att05 chf_att05
22:56:18  10  ,att06 chf_att06
22:56:18  11  ,att07 chf_att07
22:56:18  12  ,att08 chf_att08
22:56:18  13  ,att09 chf_att09
22:56:18  14  ,att10 chf_att10
22:56:18  15  ,att11 chf_att11
22:56:18  16  ,att12 chf_att12
22:56:18  17  ,att13 chf_att13
22:56:18  18  ,att14 chf_att14
22:56:18  19  ,att15 chf_att15
22:56:18  20  ,att16 chf_att16
22:56:18  21  ,att17 chf_att17
22:56:18  22  ,att18 chf_att18
22:56:18  23  ,att19 chf_att19
22:56:18  24  ,att20 chf_att20
22:56:18  25  ,att21 chf_att21
22:56:18  26  ,att22 chf_att22
22:56:18  27  ,att23 chf_att23
22:56:18  28  ,att24 chf_att24
22:56:18  29  ,att25 chf_att25
22:56:18  30  ,att26 chf_att26
22:56:18  31  ,att27 chf_att27
22:56:18  32  ,att28 chf_att28
22:56:18  33  ,att29 chf_att29
22:56:18  34  ,att30 chf_att30
22:56:18  35  ,att31 chf_att31
22:56:18  36  ,att32 chf_att32
22:56:18  37  ,att33 chf_att33
22:56:18  38  ,att34 chf_att34
22:56:18  39  ,att35 chf_att35
22:56:18  40  ,att36 chf_att36
22:56:18  41  ,att37 chf_att37
22:56:18  42  FROM svm6162
22:56:18  43  /

Table created.

Elapsed: 00:00:00.19
22:56:18 SQL> 
22:56:18 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
22:56:19 SQL> 
22:56:19 SQL> -- rpt
22:56:19 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     20737

Elapsed: 00:00:00.86
22:56:20 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     20737

Elapsed: 00:00:00.00
22:56:20 SQL> 
22:56:20 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
