
SQL*Plus: Release 11.2.0.1.0 Production on Fri Jan 7 09:24:48 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

09:24:48 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
09:24:48 SQL> 09:24:48 SQL> --
09:24:48 SQL> -- eur610.sql
09:24:48 SQL> --
09:24:48 SQL> 
09:24:48 SQL> -- Creates views and tables for backtesting a forex SVM strategy
09:24:48 SQL> 
09:24:48 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.07
09:24:48 SQL> 
09:24:48 SQL> -- I created di5min here:
09:24:48 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
09:24:48 SQL> 
09:24:48 SQL> CREATE OR REPLACE VIEW svm6102 AS
09:24:48   2  SELECT
09:24:48   3  pair
09:24:48   4  ,ydate
09:24:48   5  ,prdate
09:24:48   6  ,rownum rnum -- acts as t in my time-series
09:24:48   7  ,clse
09:24:48   8  -- Derive a bunch of attributes from clse, the latest price:
09:24:48   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
09:24:48  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
09:24:48  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
09:24:48  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
09:24:48  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
09:24:48  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
09:24:48  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
09:24:48  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
09:24:48  17  --
09:24:48  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
09:24:48  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
09:24:48  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
09:24:48  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
09:24:48  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
09:24:48  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
09:24:48  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
09:24:48  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
09:24:48  26  --
09:24:48  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
09:24:48  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
09:24:48  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
09:24:48  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
09:24:48  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
09:24:48  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
09:24:48  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
09:24:48  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
09:24:48  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
09:24:48  36  FROM di5min WHERE pair LIKE'%eur%'
09:24:48  37  AND ydate > sysdate - 95
09:24:48  38  ORDER BY ydate
09:24:48  39  /

View created.

Elapsed: 00:00:00.23
09:24:49 SQL> 
09:24:49 SQL> -- rpt
09:24:49 SQL> 
09:24:49 SQL> SELECT
09:24:49   2  pair
09:24:49   3  ,COUNT(pair)
09:24:49   4  ,MIN(clse),MAX(clse)
09:24:49   5  ,MIN(avg6),MAX(avg6)
09:24:49   6  ,MIN(ydate),MAX(ydate)
09:24:49   7  FROM svm6102
09:24:49   8  GROUP BY pair
09:24:49   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19811  1.2970625	   1.4273 1.29875103 1.42436233 2010-10-04 09:25:01 2011-01-07 09:20:00

Elapsed: 00:00:00.98
09:24:50 SQL> 
09:24:50 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
09:24:50 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.57
09:24:50 SQL> CREATE TABLE svm6122 COMPRESS AS
09:24:50   2  SELECT
09:24:50   3  pair
09:24:50   4  ,ydate
09:24:50   5  ,prdate
09:24:50   6  ,clse
09:24:50   7  -- g6 is important. I want to predict g6:
09:24:50   8  ,ld6 - clse g6
09:24:50   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
09:24:50  10  -- I want more attributes from the ones I derived above:
09:24:50  11  -- clse relation to moving-min
09:24:50  12  ,clse-min4  cm4
09:24:50  13  ,clse-min6  cm6
09:24:50  14  ,clse-min8  cm8
09:24:50  15  ,clse-min10 cm10
09:24:50  16  ,clse-min12 cm12
09:24:50  17  ,clse-min14 cm14
09:24:50  18  ,clse-min16 cm16
09:24:50  19  ,clse-min18 cm18
09:24:50  20  -- clse relation to moving-avg
09:24:50  21  ,clse-avg4  ca4
09:24:50  22  ,clse-avg6  ca6
09:24:50  23  ,clse-avg8  ca8
09:24:50  24  ,clse-avg10 ca10
09:24:50  25  ,clse-avg12 ca12
09:24:50  26  ,clse-avg14 ca14
09:24:50  27  ,clse-avg16 ca16
09:24:50  28  ,clse-avg18 ca18
09:24:50  29  -- clse relation to moving-max
09:24:50  30  ,clse-max4  cx4
09:24:50  31  ,clse-max6  cx6
09:24:50  32  ,clse-max8  cx8
09:24:50  33  ,clse-max10 cx10
09:24:50  34  ,clse-max12 cx12
09:24:50  35  ,clse-max14 cx14
09:24:50  36  ,clse-max16 cx16
09:24:50  37  ,clse-max18 cx18
09:24:50  38  -- Derive more attributes.
09:24:50  39  -- I want to use CORR() here to help SVM see the shape of the series.
09:24:50  40  -- But COVAR_POP is more stable:
09:24:50  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
09:24:50  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
09:24:50  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
09:24:50  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
09:24:50  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
09:24:50  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
09:24:50  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
09:24:50  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
09:24:50  49  -- Derive date related attributes:
09:24:50  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
09:24:50  51  ,0+TO_CHAR(ydate,'D')d
09:24:50  52  ,0+TO_CHAR(ydate,'W')w
09:24:50  53  -- mpm stands for minutes-past-midnight:
09:24:50  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
09:24:50  55  -- mph stands for minutes-past-hour:
09:24:50  56  ,0+TO_CHAR(ydate,'MI')mph
09:24:50  57  FROM svm6102
09:24:50  58  ORDER BY ydate
09:24:50  59  /

Table created.

Elapsed: 00:00:02.57
09:24:53 SQL> 
09:24:53 SQL> -- rpt
09:24:53 SQL> 
09:24:53 SQL> SELECT
09:24:53   2  pair
09:24:53   3  ,COUNT(pair)
09:24:53   4  ,MIN(clse),MAX(clse)
09:24:53   5  ,MIN(ydate),MAX(ydate)
09:24:53   6  FROM svm6122
09:24:53   7  GROUP BY pair
09:24:53   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19811  1.2970625	   1.4273 2010-10-04 09:25:01 2011-01-07 09:20:00

Elapsed: 00:00:00.04
09:24:53 SQL> 
09:24:53 SQL> -- Prepare for derivation of NTILE based params:
09:24:53 SQL> 
09:24:53 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.38
09:24:53 SQL> CREATE TABLE svm6142 COMPRESS AS
09:24:53   2  SELECT
09:24:53   3  pair
09:24:53   4  ,ydate
09:24:53   5  ,prdate
09:24:53   6  ,clse
09:24:53   7  ,g6
09:24:53   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
09:24:53   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
09:24:53  10  ,CASE WHEN trend IS NULL THEN 1
09:24:53  11  	    WHEN trend =0      THEN 1
09:24:53  12  	    ELSE trend END trend
09:24:53  13  ,cm4
09:24:53  14  ,cm6
09:24:53  15  ,cm8
09:24:53  16  ,cm10
09:24:53  17  ,cm12
09:24:53  18  ,cm14
09:24:53  19  ,cm16
09:24:53  20  ,cm18
09:24:53  21  --
09:24:53  22  ,ca4
09:24:53  23  ,ca6
09:24:53  24  ,ca8
09:24:53  25  ,ca10
09:24:53  26  ,ca12
09:24:53  27  ,ca14
09:24:53  28  ,ca16
09:24:53  29  ,ca18
09:24:53  30  --
09:24:53  31  ,cx4
09:24:53  32  ,cx6
09:24:53  33  ,cx8
09:24:53  34  ,cx10
09:24:53  35  ,cx12
09:24:53  36  ,cx14
09:24:53  37  ,cx16
09:24:53  38  ,cx18
09:24:53  39  --
09:24:53  40  ,crr4
09:24:53  41  ,crr6
09:24:53  42  ,crr8
09:24:53  43  ,crr10
09:24:53  44  ,crr12
09:24:53  45  ,crr14
09:24:53  46  ,crr16
09:24:53  47  ,crr18
09:24:53  48  --
09:24:53  49  ,hh
09:24:53  50  ,d
09:24:53  51  ,w
09:24:53  52  ,mpm
09:24:53  53  ,mph
09:24:53  54  FROM svm6122
09:24:53  55  ORDER BY ydate
09:24:53  56  /

Table created.

Elapsed: 00:00:00.37
09:24:54 SQL> 
09:24:54 SQL> -- rpt
09:24:54 SQL> 
09:24:54 SQL> SELECT
09:24:54   2  pair
09:24:54   3  ,trend
09:24:54   4  ,gatt
09:24:54   5  ,COUNT(pair)
09:24:54   6  ,AVG(g6)
09:24:54   7  FROM svm6142
09:24:54   8  GROUP BY pair,trend,gatt
09:24:54   9  ORDER BY pair,trend,gatt
09:24:54  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6559 -.00314692
eur_usd 	-1 up	      3565 .004450866
eur_usd 	-1		66
eur_usd 	 1 nup	      5910 -.00323444
eur_usd 	 1 up	      3705 .005071238
eur_usd 	 1		 6

6 rows selected.

Elapsed: 00:00:00.04
09:24:54 SQL> 
09:24:54 SQL> 
09:24:54 SQL> -- Derive NTILE based params:
09:24:54 SQL> 
09:24:54 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:01.44
09:24:55 SQL> CREATE TABLE svm6162 COMPRESS AS
09:24:55   2  SELECT
09:24:55   3  pair
09:24:55   4  ,ydate
09:24:55   5  ,prdate
09:24:55   6  ,clse
09:24:55   7  ,g6
09:24:55   8  ,gatt
09:24:55   9  ,gattn
09:24:55  10  ,trend
09:24:55  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
09:24:55  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
09:24:55  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
09:24:55  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
09:24:55  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
09:24:55  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
09:24:55  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
09:24:55  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
09:24:55  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
09:24:55  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
09:24:55  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
09:24:55  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
09:24:55  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
09:24:55  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
09:24:55  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
09:24:55  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
09:24:55  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
09:24:55  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
09:24:55  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
09:24:55  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
09:24:55  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
09:24:55  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
09:24:55  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
09:24:55  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
09:24:55  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
09:24:55  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
09:24:55  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
09:24:55  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
09:24:55  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
09:24:55  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
09:24:55  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
09:24:55  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
09:24:55  43  ,hh  att32
09:24:55  44  ,d   att33
09:24:55  45  ,w   att34
09:24:55  46  ,mpm att35
09:24:55  47  ,mph att36
09:24:55  48  ,trend att37
09:24:55  49  FROM svm6142
09:24:55  50  ORDER BY ydate
09:24:55  51  /

Table created.

Elapsed: 00:00:04.90
09:25:00 SQL> 
09:25:00 SQL> -- rpt
09:25:00 SQL> 
09:25:00 SQL> SELECT
09:25:00   2  pair
09:25:00   3  ,trend
09:25:00   4  ,gatt
09:25:00   5  ,COUNT(pair)
09:25:00   6  ,AVG(g6)
09:25:00   7  FROM svm6162
09:25:00   8  GROUP BY pair,trend,gatt
09:25:00   9  ORDER BY pair,trend,gatt
09:25:00  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6559 -.00314692
eur_usd 	-1 up	      3565 .004450866
eur_usd 	-1		66
eur_usd 	 1 nup	      5910 -.00323444
eur_usd 	 1 up	      3705 .005071238
eur_usd 	 1		 6

6 rows selected.

Elapsed: 00:00:00.02
09:25:00 SQL> 
09:25:00 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.11
09:25:00 SQL> CREATE TABLE modsrc COMPRESS AS
09:25:00   2  SELECT
09:25:00   3  pair
09:25:00   4  ,ydate
09:25:00   5  ,prdate
09:25:00   6  ,trend
09:25:00   7  ,g6
09:25:00   8  ,gatt
09:25:00   9  ,gattn
09:25:00  10  FROM svm6162
09:25:00  11  /

Table created.

Elapsed: 00:00:00.09
09:25:00 SQL> 
09:25:00 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
09:25:00 SQL> 
09:25:00 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
09:25:00 SQL> CREATE TABLE eur_ms610 COMPRESS AS
09:25:00   2  SELECT
09:25:00   3  ydate
09:25:00   4  ,trend eur_trend
09:25:00   5  ,g6    eur_g6
09:25:00   6  ,gatt  eur_gatt
09:25:00   7  ,gattn eur_gattn
09:25:00   8  FROM modsrc
09:25:00   9  /

Table created.

Elapsed: 00:00:00.06
09:25:00 SQL> 
09:25:00 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
09:25:01 SQL> 
09:25:01 SQL> -- I need a copy of the attributes:
09:25:01 SQL> 
09:25:01 SQL> 
09:25:01 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.08
09:25:01 SQL> CREATE TABLE eur_att COMPRESS AS
09:25:01   2  SELECT
09:25:01   3  ydate
09:25:01   4  ,att00 eur_att00
09:25:01   5  ,att01 eur_att01
09:25:01   6  ,att02 eur_att02
09:25:01   7  ,att03 eur_att03
09:25:01   8  ,att04 eur_att04
09:25:01   9  ,att05 eur_att05
09:25:01  10  ,att06 eur_att06
09:25:01  11  ,att07 eur_att07
09:25:01  12  ,att08 eur_att08
09:25:01  13  ,att09 eur_att09
09:25:01  14  ,att10 eur_att10
09:25:01  15  ,att11 eur_att11
09:25:01  16  ,att12 eur_att12
09:25:01  17  ,att13 eur_att13
09:25:01  18  ,att14 eur_att14
09:25:01  19  ,att15 eur_att15
09:25:01  20  ,att16 eur_att16
09:25:01  21  ,att17 eur_att17
09:25:01  22  ,att18 eur_att18
09:25:01  23  ,att19 eur_att19
09:25:01  24  ,att20 eur_att20
09:25:01  25  ,att21 eur_att21
09:25:01  26  ,att22 eur_att22
09:25:01  27  ,att23 eur_att23
09:25:01  28  ,att24 eur_att24
09:25:01  29  ,att25 eur_att25
09:25:01  30  ,att26 eur_att26
09:25:01  31  ,att27 eur_att27
09:25:01  32  ,att28 eur_att28
09:25:01  33  ,att29 eur_att29
09:25:01  34  ,att30 eur_att30
09:25:01  35  ,att31 eur_att31
09:25:01  36  ,att32 eur_att32
09:25:01  37  ,att33 eur_att33
09:25:01  38  ,att34 eur_att34
09:25:01  39  ,att35 eur_att35
09:25:01  40  ,att36 eur_att36
09:25:01  41  ,att37 eur_att37
09:25:01  42  FROM svm6162
09:25:01  43  /

Table created.

Elapsed: 00:00:00.19
09:25:01 SQL> 
09:25:01 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
09:25:01 SQL> 
09:25:01 SQL> -- rpt
09:25:01 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19810

Elapsed: 00:00:00.89
09:25:02 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19811

Elapsed: 00:00:00.00
09:25:02 SQL> 
09:25:02 SQL> --
09:25:02 SQL> -- aud610.sql
09:25:02 SQL> --
09:25:02 SQL> 
09:25:02 SQL> -- Creates views and tables for backtesting a forex SVM strategy
09:25:02 SQL> 
09:25:02 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.53
09:25:03 SQL> 
09:25:03 SQL> -- I created di5min here:
09:25:03 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
09:25:03 SQL> 
09:25:03 SQL> CREATE OR REPLACE VIEW svm6102 AS
09:25:03   2  SELECT
09:25:03   3  pair
09:25:03   4  ,ydate
09:25:03   5  ,prdate
09:25:03   6  ,rownum rnum -- acts as t in my time-series
09:25:03   7  ,clse
09:25:03   8  -- Derive a bunch of attributes from clse, the latest price:
09:25:03   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
09:25:03  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
09:25:03  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
09:25:03  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
09:25:03  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
09:25:03  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
09:25:03  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
09:25:03  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
09:25:03  17  --
09:25:03  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
09:25:03  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
09:25:03  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
09:25:03  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
09:25:03  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
09:25:03  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
09:25:03  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
09:25:03  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
09:25:03  26  --
09:25:03  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
09:25:03  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
09:25:03  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
09:25:03  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
09:25:03  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
09:25:03  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
09:25:03  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
09:25:03  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
09:25:03  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
09:25:03  36  FROM di5min WHERE pair LIKE'%aud%'
09:25:03  37  AND ydate > sysdate - 95
09:25:03  38  ORDER BY ydate
09:25:03  39  /

View created.

Elapsed: 00:00:00.04
09:25:03 SQL> 
09:25:03 SQL> -- rpt
09:25:03 SQL> 
09:25:03 SQL> SELECT
09:25:03   2  pair
09:25:03   3  ,COUNT(pair)
09:25:03   4  ,MIN(clse),MAX(clse)
09:25:03   5  ,MIN(avg6),MAX(avg6)
09:25:03   6  ,MIN(ydate),MAX(ydate)
09:25:03   7  FROM svm6102
09:25:03   8  GROUP BY pair
09:25:03   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19807	.95405	  1.02495 .957141438 1.02284247 2010-10-04 09:30:01 2011-01-07 09:20:00

Elapsed: 00:00:00.86
09:25:04 SQL> 
09:25:04 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
09:25:04 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.27
09:25:04 SQL> CREATE TABLE svm6122 COMPRESS AS
09:25:04   2  SELECT
09:25:04   3  pair
09:25:04   4  ,ydate
09:25:04   5  ,prdate
09:25:04   6  ,clse
09:25:04   7  -- g6 is important. I want to predict g6:
09:25:04   8  ,ld6 - clse g6
09:25:04   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
09:25:04  10  -- I want more attributes from the ones I derived above:
09:25:04  11  -- clse relation to moving-min
09:25:04  12  ,clse-min4  cm4
09:25:04  13  ,clse-min6  cm6
09:25:04  14  ,clse-min8  cm8
09:25:04  15  ,clse-min10 cm10
09:25:04  16  ,clse-min12 cm12
09:25:04  17  ,clse-min14 cm14
09:25:04  18  ,clse-min16 cm16
09:25:04  19  ,clse-min18 cm18
09:25:04  20  -- clse relation to moving-avg
09:25:04  21  ,clse-avg4  ca4
09:25:04  22  ,clse-avg6  ca6
09:25:04  23  ,clse-avg8  ca8
09:25:04  24  ,clse-avg10 ca10
09:25:04  25  ,clse-avg12 ca12
09:25:04  26  ,clse-avg14 ca14
09:25:04  27  ,clse-avg16 ca16
09:25:04  28  ,clse-avg18 ca18
09:25:04  29  -- clse relation to moving-max
09:25:04  30  ,clse-max4  cx4
09:25:04  31  ,clse-max6  cx6
09:25:04  32  ,clse-max8  cx8
09:25:04  33  ,clse-max10 cx10
09:25:04  34  ,clse-max12 cx12
09:25:04  35  ,clse-max14 cx14
09:25:04  36  ,clse-max16 cx16
09:25:04  37  ,clse-max18 cx18
09:25:04  38  -- Derive more attributes.
09:25:04  39  -- I want to use CORR() here to help SVM see the shape of the series.
09:25:04  40  -- But COVAR_POP is more stable:
09:25:04  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
09:25:04  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
09:25:04  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
09:25:04  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
09:25:04  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
09:25:04  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
09:25:04  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
09:25:04  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
09:25:04  49  -- Derive date related attributes:
09:25:04  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
09:25:04  51  ,0+TO_CHAR(ydate,'D')d
09:25:04  52  ,0+TO_CHAR(ydate,'W')w
09:25:04  53  -- mpm stands for minutes-past-midnight:
09:25:04  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
09:25:04  55  -- mph stands for minutes-past-hour:
09:25:04  56  ,0+TO_CHAR(ydate,'MI')mph
09:25:04  57  FROM svm6102
09:25:04  58  ORDER BY ydate
09:25:04  59  /

Table created.

Elapsed: 00:00:02.35
09:25:06 SQL> 
09:25:06 SQL> -- rpt
09:25:06 SQL> 
09:25:06 SQL> SELECT
09:25:06   2  pair
09:25:06   3  ,COUNT(pair)
09:25:06   4  ,MIN(clse),MAX(clse)
09:25:06   5  ,MIN(ydate),MAX(ydate)
09:25:06   6  FROM svm6122
09:25:06   7  GROUP BY pair
09:25:06   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19807	.95405	  1.02495 2010-10-04 09:30:01 2011-01-07 09:20:00

Elapsed: 00:00:00.04
09:25:06 SQL> 
09:25:06 SQL> -- Prepare for derivation of NTILE based params:
09:25:06 SQL> 
09:25:06 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.30
09:25:07 SQL> CREATE TABLE svm6142 COMPRESS AS
09:25:07   2  SELECT
09:25:07   3  pair
09:25:07   4  ,ydate
09:25:07   5  ,prdate
09:25:07   6  ,clse
09:25:07   7  ,g6
09:25:07   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
09:25:07   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
09:25:07  10  ,CASE WHEN trend IS NULL THEN 1
09:25:07  11  	    WHEN trend =0      THEN 1
09:25:07  12  	    ELSE trend END trend
09:25:07  13  ,cm4
09:25:07  14  ,cm6
09:25:07  15  ,cm8
09:25:07  16  ,cm10
09:25:07  17  ,cm12
09:25:07  18  ,cm14
09:25:07  19  ,cm16
09:25:07  20  ,cm18
09:25:07  21  --
09:25:07  22  ,ca4
09:25:07  23  ,ca6
09:25:07  24  ,ca8
09:25:07  25  ,ca10
09:25:07  26  ,ca12
09:25:07  27  ,ca14
09:25:07  28  ,ca16
09:25:07  29  ,ca18
09:25:07  30  --
09:25:07  31  ,cx4
09:25:07  32  ,cx6
09:25:07  33  ,cx8
09:25:07  34  ,cx10
09:25:07  35  ,cx12
09:25:07  36  ,cx14
09:25:07  37  ,cx16
09:25:07  38  ,cx18
09:25:07  39  --
09:25:07  40  ,crr4
09:25:07  41  ,crr6
09:25:07  42  ,crr8
09:25:07  43  ,crr10
09:25:07  44  ,crr12
09:25:07  45  ,crr14
09:25:07  46  ,crr16
09:25:07  47  ,crr18
09:25:07  48  --
09:25:07  49  ,hh
09:25:07  50  ,d
09:25:07  51  ,w
09:25:07  52  ,mpm
09:25:07  53  ,mph
09:25:07  54  FROM svm6122
09:25:07  55  ORDER BY ydate
09:25:07  56  /

Table created.

Elapsed: 00:00:00.40
09:25:07 SQL> 
09:25:07 SQL> -- rpt
09:25:07 SQL> 
09:25:07 SQL> SELECT
09:25:07   2  pair
09:25:07   3  ,trend
09:25:07   4  ,gatt
09:25:07   5  ,COUNT(pair)
09:25:07   6  ,AVG(g6)
09:25:07   7  FROM svm6142
09:25:07   8  GROUP BY pair,trend,gatt
09:25:07   9  ORDER BY pair,trend,gatt
09:25:07  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5717 -.00213653
aud_usd 	-1 up	      3685  .00375498
aud_usd 	-1		64
aud_usd 	 1 nup	      6740 -.00213906
aud_usd 	 1 up	      3593 .004054752
aud_usd 	 1		 8

6 rows selected.

Elapsed: 00:00:00.04
09:25:07 SQL> 
09:25:07 SQL> 
09:25:07 SQL> -- Derive NTILE based params:
09:25:07 SQL> 
09:25:07 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.17
09:25:07 SQL> CREATE TABLE svm6162 COMPRESS AS
09:25:07   2  SELECT
09:25:07   3  pair
09:25:07   4  ,ydate
09:25:07   5  ,prdate
09:25:07   6  ,clse
09:25:07   7  ,g6
09:25:07   8  ,gatt
09:25:07   9  ,gattn
09:25:07  10  ,trend
09:25:07  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
09:25:07  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
09:25:07  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
09:25:07  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
09:25:07  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
09:25:07  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
09:25:07  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
09:25:07  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
09:25:07  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
09:25:07  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
09:25:07  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
09:25:07  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
09:25:07  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
09:25:07  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
09:25:07  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
09:25:07  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
09:25:07  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
09:25:07  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
09:25:07  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
09:25:07  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
09:25:07  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
09:25:07  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
09:25:07  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
09:25:07  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
09:25:07  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
09:25:07  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
09:25:07  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
09:25:07  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
09:25:07  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
09:25:07  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
09:25:07  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
09:25:07  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
09:25:07  43  ,hh  att32
09:25:07  44  ,d   att33
09:25:07  45  ,w   att34
09:25:07  46  ,mpm att35
09:25:07  47  ,mph att36
09:25:07  48  ,trend att37
09:25:07  49  FROM svm6142
09:25:07  50  ORDER BY ydate
09:25:07  51  /

Table created.

Elapsed: 00:00:04.76
09:25:12 SQL> 
09:25:12 SQL> -- rpt
09:25:12 SQL> 
09:25:12 SQL> SELECT
09:25:12   2  pair
09:25:12   3  ,trend
09:25:12   4  ,gatt
09:25:12   5  ,COUNT(pair)
09:25:12   6  ,AVG(g6)
09:25:12   7  FROM svm6162
09:25:12   8  GROUP BY pair,trend,gatt
09:25:12   9  ORDER BY pair,trend,gatt
09:25:12  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5717 -.00213653
aud_usd 	-1 up	      3685  .00375498
aud_usd 	-1		64
aud_usd 	 1 nup	      6740 -.00213906
aud_usd 	 1 up	      3593 .004054752
aud_usd 	 1		 8

6 rows selected.

Elapsed: 00:00:00.03
09:25:12 SQL> 
09:25:12 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
09:25:12 SQL> CREATE TABLE modsrc COMPRESS AS
09:25:12   2  SELECT
09:25:12   3  pair
09:25:12   4  ,ydate
09:25:12   5  ,prdate
09:25:12   6  ,trend
09:25:12   7  ,g6
09:25:12   8  ,gatt
09:25:12   9  ,gattn
09:25:12  10  FROM svm6162
09:25:12  11  /

Table created.

Elapsed: 00:00:00.08
09:25:12 SQL> 
09:25:12 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.29
09:25:13 SQL> 
09:25:13 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.11
09:25:13 SQL> CREATE TABLE aud_ms610 COMPRESS AS
09:25:13   2  SELECT
09:25:13   3  ydate
09:25:13   4  ,trend aud_trend
09:25:13   5  ,g6    aud_g6
09:25:13   6  ,gatt  aud_gatt
09:25:13   7  ,gattn aud_gattn
09:25:13   8  FROM modsrc
09:25:13   9  /

Table created.

Elapsed: 00:00:00.07
09:25:13 SQL> 
09:25:13 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
09:25:13 SQL> 
09:25:13 SQL> -- I need a copy of the attributes:
09:25:13 SQL> 
09:25:13 SQL> 
09:25:13 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.05
09:25:13 SQL> CREATE TABLE aud_att COMPRESS AS
09:25:13   2  SELECT
09:25:13   3  ydate
09:25:13   4  ,att00 aud_att00
09:25:13   5  ,att01 aud_att01
09:25:13   6  ,att02 aud_att02
09:25:13   7  ,att03 aud_att03
09:25:13   8  ,att04 aud_att04
09:25:13   9  ,att05 aud_att05
09:25:13  10  ,att06 aud_att06
09:25:13  11  ,att07 aud_att07
09:25:13  12  ,att08 aud_att08
09:25:13  13  ,att09 aud_att09
09:25:13  14  ,att10 aud_att10
09:25:13  15  ,att11 aud_att11
09:25:13  16  ,att12 aud_att12
09:25:13  17  ,att13 aud_att13
09:25:13  18  ,att14 aud_att14
09:25:13  19  ,att15 aud_att15
09:25:13  20  ,att16 aud_att16
09:25:13  21  ,att17 aud_att17
09:25:13  22  ,att18 aud_att18
09:25:13  23  ,att19 aud_att19
09:25:13  24  ,att20 aud_att20
09:25:13  25  ,att21 aud_att21
09:25:13  26  ,att22 aud_att22
09:25:13  27  ,att23 aud_att23
09:25:13  28  ,att24 aud_att24
09:25:13  29  ,att25 aud_att25
09:25:13  30  ,att26 aud_att26
09:25:13  31  ,att27 aud_att27
09:25:13  32  ,att28 aud_att28
09:25:13  33  ,att29 aud_att29
09:25:13  34  ,att30 aud_att30
09:25:13  35  ,att31 aud_att31
09:25:13  36  ,att32 aud_att32
09:25:13  37  ,att33 aud_att33
09:25:13  38  ,att34 aud_att34
09:25:13  39  ,att35 aud_att35
09:25:13  40  ,att36 aud_att36
09:25:13  41  ,att37 aud_att37
09:25:13  42  FROM svm6162
09:25:13  43  /

Table created.

Elapsed: 00:00:00.19
09:25:13 SQL> 
09:25:13 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
09:25:14 SQL> 
09:25:14 SQL> -- rpt
09:25:14 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19807

Elapsed: 00:00:00.85
09:25:15 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19807

Elapsed: 00:00:00.00
09:25:15 SQL> 
09:25:15 SQL> --
09:25:15 SQL> -- gbp610.sql
09:25:15 SQL> --
09:25:15 SQL> 
09:25:15 SQL> -- Creates views and tables for backtesting a forex SVM strategy
09:25:15 SQL> 
09:25:15 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.40
09:25:15 SQL> 
09:25:15 SQL> -- I created di5min here:
09:25:15 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
09:25:15 SQL> 
09:25:15 SQL> CREATE OR REPLACE VIEW svm6102 AS
09:25:15   2  SELECT
09:25:15   3  pair
09:25:15   4  ,ydate
09:25:15   5  ,prdate
09:25:15   6  ,rownum rnum -- acts as t in my time-series
09:25:15   7  ,clse
09:25:15   8  -- Derive a bunch of attributes from clse, the latest price:
09:25:15   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
09:25:15  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
09:25:15  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
09:25:15  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
09:25:15  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
09:25:15  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
09:25:15  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
09:25:15  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
09:25:15  17  --
09:25:15  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
09:25:15  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
09:25:15  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
09:25:15  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
09:25:15  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
09:25:15  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
09:25:15  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
09:25:15  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
09:25:15  26  --
09:25:15  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
09:25:15  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
09:25:15  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
09:25:15  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
09:25:15  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
09:25:15  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
09:25:15  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
09:25:15  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
09:25:15  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
09:25:15  36  FROM di5min WHERE pair LIKE'%gbp%'
09:25:15  37  AND ydate > sysdate - 95
09:25:15  38  ORDER BY ydate
09:25:15  39  /

View created.

Elapsed: 00:00:00.05
09:25:15 SQL> 
09:25:15 SQL> -- rpt
09:25:15 SQL> 
09:25:15 SQL> SELECT
09:25:15   2  pair
09:25:15   3  ,COUNT(pair)
09:25:15   4  ,MIN(clse),MAX(clse)
09:25:15   5  ,MIN(avg6),MAX(avg6)
09:25:15   6  ,MIN(ydate),MAX(ydate)
09:25:15   7  FROM svm6102
09:25:15   8  GROUP BY pair
09:25:15   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19809   1.535325	   1.6295 1.53696747 1.62716986 2010-10-04 09:30:01 2011-01-07 09:20:00

Elapsed: 00:00:00.87
09:25:16 SQL> 
09:25:16 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
09:25:16 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.27
09:25:16 SQL> CREATE TABLE svm6122 COMPRESS AS
09:25:16   2  SELECT
09:25:16   3  pair
09:25:16   4  ,ydate
09:25:16   5  ,prdate
09:25:16   6  ,clse
09:25:16   7  -- g6 is important. I want to predict g6:
09:25:16   8  ,ld6 - clse g6
09:25:16   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
09:25:16  10  -- I want more attributes from the ones I derived above:
09:25:16  11  -- clse relation to moving-min
09:25:16  12  ,clse-min4  cm4
09:25:16  13  ,clse-min6  cm6
09:25:16  14  ,clse-min8  cm8
09:25:16  15  ,clse-min10 cm10
09:25:16  16  ,clse-min12 cm12
09:25:16  17  ,clse-min14 cm14
09:25:16  18  ,clse-min16 cm16
09:25:16  19  ,clse-min18 cm18
09:25:16  20  -- clse relation to moving-avg
09:25:16  21  ,clse-avg4  ca4
09:25:16  22  ,clse-avg6  ca6
09:25:16  23  ,clse-avg8  ca8
09:25:16  24  ,clse-avg10 ca10
09:25:16  25  ,clse-avg12 ca12
09:25:16  26  ,clse-avg14 ca14
09:25:16  27  ,clse-avg16 ca16
09:25:16  28  ,clse-avg18 ca18
09:25:16  29  -- clse relation to moving-max
09:25:16  30  ,clse-max4  cx4
09:25:16  31  ,clse-max6  cx6
09:25:16  32  ,clse-max8  cx8
09:25:16  33  ,clse-max10 cx10
09:25:16  34  ,clse-max12 cx12
09:25:16  35  ,clse-max14 cx14
09:25:16  36  ,clse-max16 cx16
09:25:16  37  ,clse-max18 cx18
09:25:16  38  -- Derive more attributes.
09:25:16  39  -- I want to use CORR() here to help SVM see the shape of the series.
09:25:16  40  -- But COVAR_POP is more stable:
09:25:16  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
09:25:16  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
09:25:16  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
09:25:16  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
09:25:16  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
09:25:16  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
09:25:16  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
09:25:16  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
09:25:16  49  -- Derive date related attributes:
09:25:16  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
09:25:16  51  ,0+TO_CHAR(ydate,'D')d
09:25:16  52  ,0+TO_CHAR(ydate,'W')w
09:25:16  53  -- mpm stands for minutes-past-midnight:
09:25:16  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
09:25:16  55  -- mph stands for minutes-past-hour:
09:25:16  56  ,0+TO_CHAR(ydate,'MI')mph
09:25:16  57  FROM svm6102
09:25:16  58  ORDER BY ydate
09:25:16  59  /

Table created.

Elapsed: 00:00:02.35
09:25:18 SQL> 
09:25:18 SQL> -- rpt
09:25:18 SQL> 
09:25:18 SQL> SELECT
09:25:18   2  pair
09:25:18   3  ,COUNT(pair)
09:25:18   4  ,MIN(clse),MAX(clse)
09:25:18   5  ,MIN(ydate),MAX(ydate)
09:25:18   6  FROM svm6122
09:25:18   7  GROUP BY pair
09:25:18   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19809   1.535325	   1.6295 2010-10-04 09:30:01 2011-01-07 09:20:00

Elapsed: 00:00:00.04
09:25:18 SQL> 
09:25:18 SQL> -- Prepare for derivation of NTILE based params:
09:25:18 SQL> 
09:25:18 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.24
09:25:19 SQL> CREATE TABLE svm6142 COMPRESS AS
09:25:19   2  SELECT
09:25:19   3  pair
09:25:19   4  ,ydate
09:25:19   5  ,prdate
09:25:19   6  ,clse
09:25:19   7  ,g6
09:25:19   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
09:25:19   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
09:25:19  10  ,CASE WHEN trend IS NULL THEN 1
09:25:19  11  	    WHEN trend =0      THEN 1
09:25:19  12  	    ELSE trend END trend
09:25:19  13  ,cm4
09:25:19  14  ,cm6
09:25:19  15  ,cm8
09:25:19  16  ,cm10
09:25:19  17  ,cm12
09:25:19  18  ,cm14
09:25:19  19  ,cm16
09:25:19  20  ,cm18
09:25:19  21  --
09:25:19  22  ,ca4
09:25:19  23  ,ca6
09:25:19  24  ,ca8
09:25:19  25  ,ca10
09:25:19  26  ,ca12
09:25:19  27  ,ca14
09:25:19  28  ,ca16
09:25:19  29  ,ca18
09:25:19  30  --
09:25:19  31  ,cx4
09:25:19  32  ,cx6
09:25:19  33  ,cx8
09:25:19  34  ,cx10
09:25:19  35  ,cx12
09:25:19  36  ,cx14
09:25:19  37  ,cx16
09:25:19  38  ,cx18
09:25:19  39  --
09:25:19  40  ,crr4
09:25:19  41  ,crr6
09:25:19  42  ,crr8
09:25:19  43  ,crr10
09:25:19  44  ,crr12
09:25:19  45  ,crr14
09:25:19  46  ,crr16
09:25:19  47  ,crr18
09:25:19  48  --
09:25:19  49  ,hh
09:25:19  50  ,d
09:25:19  51  ,w
09:25:19  52  ,mpm
09:25:19  53  ,mph
09:25:19  54  FROM svm6122
09:25:19  55  ORDER BY ydate
09:25:19  56  /

Table created.

Elapsed: 00:00:00.37
09:25:19 SQL> 
09:25:19 SQL> -- rpt
09:25:19 SQL> 
09:25:19 SQL> SELECT
09:25:19   2  pair
09:25:19   3  ,trend
09:25:19   4  ,gatt
09:25:19   5  ,COUNT(pair)
09:25:19   6  ,AVG(g6)
09:25:19   7  FROM svm6142
09:25:19   8  GROUP BY pair,trend,gatt
09:25:19   9  ORDER BY pair,trend,gatt
09:25:19  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6481 -.00262056
gbp_usd 	-1 up	      3513 .004319816
gbp_usd 	-1		72
gbp_usd 	 1 nup	      6279 -.00265679
gbp_usd 	 1 up	      3464  .00452644

Elapsed: 00:00:00.04
09:25:19 SQL> 
09:25:19 SQL> 
09:25:19 SQL> -- Derive NTILE based params:
09:25:19 SQL> 
09:25:19 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
09:25:19 SQL> CREATE TABLE svm6162 COMPRESS AS
09:25:19   2  SELECT
09:25:19   3  pair
09:25:19   4  ,ydate
09:25:19   5  ,prdate
09:25:19   6  ,clse
09:25:19   7  ,g6
09:25:19   8  ,gatt
09:25:19   9  ,gattn
09:25:19  10  ,trend
09:25:19  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
09:25:19  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
09:25:19  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
09:25:19  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
09:25:19  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
09:25:19  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
09:25:19  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
09:25:19  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
09:25:19  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
09:25:19  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
09:25:19  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
09:25:19  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
09:25:19  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
09:25:19  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
09:25:19  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
09:25:19  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
09:25:19  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
09:25:19  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
09:25:19  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
09:25:19  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
09:25:19  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
09:25:19  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
09:25:19  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
09:25:19  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
09:25:19  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
09:25:19  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
09:25:19  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
09:25:19  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
09:25:19  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
09:25:19  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
09:25:19  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
09:25:19  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
09:25:19  43  ,hh  att32
09:25:19  44  ,d   att33
09:25:19  45  ,w   att34
09:25:19  46  ,mpm att35
09:25:19  47  ,mph att36
09:25:19  48  ,trend att37
09:25:19  49  FROM svm6142
09:25:19  50  ORDER BY ydate
09:25:19  51  /

Table created.

Elapsed: 00:00:04.79
09:25:24 SQL> 
09:25:24 SQL> -- rpt
09:25:24 SQL> 
09:25:24 SQL> SELECT
09:25:24   2  pair
09:25:24   3  ,trend
09:25:24   4  ,gatt
09:25:24   5  ,COUNT(pair)
09:25:24   6  ,AVG(g6)
09:25:24   7  FROM svm6162
09:25:24   8  GROUP BY pair,trend,gatt
09:25:24   9  ORDER BY pair,trend,gatt
09:25:24  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6481 -.00262056
gbp_usd 	-1 up	      3513 .004319816
gbp_usd 	-1		72
gbp_usd 	 1 nup	      6279 -.00265679
gbp_usd 	 1 up	      3464  .00452644

Elapsed: 00:00:00.03
09:25:24 SQL> 
09:25:24 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.11
09:25:24 SQL> CREATE TABLE modsrc COMPRESS AS
09:25:24   2  SELECT
09:25:24   3  pair
09:25:24   4  ,ydate
09:25:24   5  ,prdate
09:25:24   6  ,trend
09:25:24   7  ,g6
09:25:24   8  ,gatt
09:25:24   9  ,gattn
09:25:24  10  FROM svm6162
09:25:24  11  /

Table created.

Elapsed: 00:00:00.07
09:25:24 SQL> 
09:25:24 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
09:25:25 SQL> 
09:25:25 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
09:25:25 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
09:25:25   2  SELECT
09:25:25   3  ydate
09:25:25   4  ,trend gbp_trend
09:25:25   5  ,g6    gbp_g6
09:25:25   6  ,gatt  gbp_gatt
09:25:25   7  ,gattn gbp_gattn
09:25:25   8  FROM modsrc
09:25:25   9  /

Table created.

Elapsed: 00:00:00.07
09:25:25 SQL> 
09:25:25 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
09:25:25 SQL> 
09:25:25 SQL> -- I need a copy of the attributes:
09:25:25 SQL> 
09:25:25 SQL> 
09:25:25 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.04
09:25:25 SQL> CREATE TABLE gbp_att COMPRESS AS
09:25:25   2  SELECT
09:25:25   3  ydate
09:25:25   4  ,att00 gbp_att00
09:25:25   5  ,att01 gbp_att01
09:25:25   6  ,att02 gbp_att02
09:25:25   7  ,att03 gbp_att03
09:25:25   8  ,att04 gbp_att04
09:25:25   9  ,att05 gbp_att05
09:25:25  10  ,att06 gbp_att06
09:25:25  11  ,att07 gbp_att07
09:25:25  12  ,att08 gbp_att08
09:25:25  13  ,att09 gbp_att09
09:25:25  14  ,att10 gbp_att10
09:25:25  15  ,att11 gbp_att11
09:25:25  16  ,att12 gbp_att12
09:25:25  17  ,att13 gbp_att13
09:25:25  18  ,att14 gbp_att14
09:25:25  19  ,att15 gbp_att15
09:25:25  20  ,att16 gbp_att16
09:25:25  21  ,att17 gbp_att17
09:25:25  22  ,att18 gbp_att18
09:25:25  23  ,att19 gbp_att19
09:25:25  24  ,att20 gbp_att20
09:25:25  25  ,att21 gbp_att21
09:25:25  26  ,att22 gbp_att22
09:25:25  27  ,att23 gbp_att23
09:25:25  28  ,att24 gbp_att24
09:25:25  29  ,att25 gbp_att25
09:25:25  30  ,att26 gbp_att26
09:25:25  31  ,att27 gbp_att27
09:25:25  32  ,att28 gbp_att28
09:25:25  33  ,att29 gbp_att29
09:25:25  34  ,att30 gbp_att30
09:25:25  35  ,att31 gbp_att31
09:25:25  36  ,att32 gbp_att32
09:25:25  37  ,att33 gbp_att33
09:25:25  38  ,att34 gbp_att34
09:25:25  39  ,att35 gbp_att35
09:25:25  40  ,att36 gbp_att36
09:25:25  41  ,att37 gbp_att37
09:25:25  42  FROM svm6162
09:25:25  43  /

Table created.

Elapsed: 00:00:00.15
09:25:25 SQL> 
09:25:25 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
09:25:25 SQL> 
09:25:25 SQL> -- rpt
09:25:25 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.87
09:25:26 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.00
09:25:26 SQL> 
09:25:26 SQL> --
09:25:26 SQL> -- jpy610.sql
09:25:26 SQL> --
09:25:26 SQL> 
09:25:26 SQL> -- Creates views and tables for backtesting a forex SVM strategy
09:25:26 SQL> 
09:25:26 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.55
09:25:27 SQL> 
09:25:27 SQL> -- I created di5min here:
09:25:27 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
09:25:27 SQL> 
09:25:27 SQL> CREATE OR REPLACE VIEW svm6102 AS
09:25:27   2  SELECT
09:25:27   3  pair
09:25:27   4  ,ydate
09:25:27   5  ,prdate
09:25:27   6  ,rownum rnum -- acts as t in my time-series
09:25:27   7  ,clse
09:25:27   8  -- Derive a bunch of attributes from clse, the latest price:
09:25:27   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
09:25:27  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
09:25:27  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
09:25:27  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
09:25:27  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
09:25:27  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
09:25:27  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
09:25:27  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
09:25:27  17  --
09:25:27  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
09:25:27  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
09:25:27  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
09:25:27  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
09:25:27  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
09:25:27  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
09:25:27  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
09:25:27  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
09:25:27  26  --
09:25:27  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
09:25:27  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
09:25:27  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
09:25:27  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
09:25:27  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
09:25:27  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
09:25:27  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
09:25:27  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
09:25:27  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
09:25:27  36  FROM di5min WHERE pair LIKE'%jpy%'
09:25:27  37  AND ydate > sysdate - 95
09:25:27  38  ORDER BY ydate
09:25:27  39  /

View created.

Elapsed: 00:00:00.08
09:25:27 SQL> 
09:25:27 SQL> -- rpt
09:25:27 SQL> 
09:25:27 SQL> SELECT
09:25:27   2  pair
09:25:27   3  ,COUNT(pair)
09:25:27   4  ,MIN(clse),MAX(clse)
09:25:27   5  ,MIN(avg6),MAX(avg6)
09:25:27   6  ,MIN(ydate),MAX(ydate)
09:25:27   7  FROM svm6102
09:25:27   8  GROUP BY pair
09:25:27   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19808	 80.25	   84.485 80.3595205 84.3105479 2010-10-04 09:30:01 2011-01-07 09:20:00

Elapsed: 00:00:00.91
09:25:28 SQL> 
09:25:28 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
09:25:28 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.26
09:25:28 SQL> CREATE TABLE svm6122 COMPRESS AS
09:25:28   2  SELECT
09:25:28   3  pair
09:25:28   4  ,ydate
09:25:28   5  ,prdate
09:25:28   6  ,clse
09:25:28   7  -- g6 is important. I want to predict g6:
09:25:28   8  ,ld6 - clse g6
09:25:28   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
09:25:28  10  -- I want more attributes from the ones I derived above:
09:25:28  11  -- clse relation to moving-min
09:25:28  12  ,clse-min4  cm4
09:25:28  13  ,clse-min6  cm6
09:25:28  14  ,clse-min8  cm8
09:25:28  15  ,clse-min10 cm10
09:25:28  16  ,clse-min12 cm12
09:25:28  17  ,clse-min14 cm14
09:25:28  18  ,clse-min16 cm16
09:25:28  19  ,clse-min18 cm18
09:25:28  20  -- clse relation to moving-avg
09:25:28  21  ,clse-avg4  ca4
09:25:28  22  ,clse-avg6  ca6
09:25:28  23  ,clse-avg8  ca8
09:25:28  24  ,clse-avg10 ca10
09:25:28  25  ,clse-avg12 ca12
09:25:28  26  ,clse-avg14 ca14
09:25:28  27  ,clse-avg16 ca16
09:25:28  28  ,clse-avg18 ca18
09:25:28  29  -- clse relation to moving-max
09:25:28  30  ,clse-max4  cx4
09:25:28  31  ,clse-max6  cx6
09:25:28  32  ,clse-max8  cx8
09:25:28  33  ,clse-max10 cx10
09:25:28  34  ,clse-max12 cx12
09:25:28  35  ,clse-max14 cx14
09:25:28  36  ,clse-max16 cx16
09:25:28  37  ,clse-max18 cx18
09:25:28  38  -- Derive more attributes.
09:25:28  39  -- I want to use CORR() here to help SVM see the shape of the series.
09:25:28  40  -- But COVAR_POP is more stable:
09:25:28  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
09:25:28  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
09:25:28  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
09:25:28  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
09:25:28  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
09:25:28  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
09:25:28  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
09:25:28  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
09:25:28  49  -- Derive date related attributes:
09:25:28  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
09:25:28  51  ,0+TO_CHAR(ydate,'D')d
09:25:28  52  ,0+TO_CHAR(ydate,'W')w
09:25:28  53  -- mpm stands for minutes-past-midnight:
09:25:28  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
09:25:28  55  -- mph stands for minutes-past-hour:
09:25:28  56  ,0+TO_CHAR(ydate,'MI')mph
09:25:28  57  FROM svm6102
09:25:28  58  ORDER BY ydate
09:25:28  59  /

Table created.

Elapsed: 00:00:02.72
09:25:31 SQL> 
09:25:31 SQL> -- rpt
09:25:31 SQL> 
09:25:31 SQL> SELECT
09:25:31   2  pair
09:25:31   3  ,COUNT(pair)
09:25:31   4  ,MIN(clse),MAX(clse)
09:25:31   5  ,MIN(ydate),MAX(ydate)
09:25:31   6  FROM svm6122
09:25:31   7  GROUP BY pair
09:25:31   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19808	 80.25	   84.485 2010-10-04 09:30:01 2011-01-07 09:20:00

Elapsed: 00:00:00.04
09:25:31 SQL> 
09:25:31 SQL> -- Prepare for derivation of NTILE based params:
09:25:31 SQL> 
09:25:31 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.28
09:25:31 SQL> CREATE TABLE svm6142 COMPRESS AS
09:25:31   2  SELECT
09:25:31   3  pair
09:25:31   4  ,ydate
09:25:31   5  ,prdate
09:25:31   6  ,clse
09:25:31   7  ,g6
09:25:31   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
09:25:31   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
09:25:31  10  ,CASE WHEN trend IS NULL THEN 1
09:25:31  11  	    WHEN trend =0      THEN 1
09:25:31  12  	    ELSE trend END trend
09:25:31  13  ,cm4
09:25:31  14  ,cm6
09:25:31  15  ,cm8
09:25:31  16  ,cm10
09:25:31  17  ,cm12
09:25:31  18  ,cm14
09:25:31  19  ,cm16
09:25:31  20  ,cm18
09:25:31  21  --
09:25:31  22  ,ca4
09:25:31  23  ,ca6
09:25:31  24  ,ca8
09:25:31  25  ,ca10
09:25:31  26  ,ca12
09:25:31  27  ,ca14
09:25:31  28  ,ca16
09:25:31  29  ,ca18
09:25:31  30  --
09:25:31  31  ,cx4
09:25:31  32  ,cx6
09:25:31  33  ,cx8
09:25:31  34  ,cx10
09:25:31  35  ,cx12
09:25:31  36  ,cx14
09:25:31  37  ,cx16
09:25:31  38  ,cx18
09:25:31  39  --
09:25:31  40  ,crr4
09:25:31  41  ,crr6
09:25:31  42  ,crr8
09:25:31  43  ,crr10
09:25:31  44  ,crr12
09:25:31  45  ,crr14
09:25:31  46  ,crr16
09:25:31  47  ,crr18
09:25:31  48  --
09:25:31  49  ,hh
09:25:31  50  ,d
09:25:31  51  ,w
09:25:31  52  ,mpm
09:25:31  53  ,mph
09:25:31  54  FROM svm6122
09:25:31  55  ORDER BY ydate
09:25:31  56  /

Table created.

Elapsed: 00:00:00.38
09:25:32 SQL> 
09:25:32 SQL> -- rpt
09:25:32 SQL> 
09:25:32 SQL> SELECT
09:25:32   2  pair
09:25:32   3  ,trend
09:25:32   4  ,gatt
09:25:32   5  ,COUNT(pair)
09:25:32   6  ,AVG(g6)
09:25:32   7  FROM svm6142
09:25:32   8  GROUP BY pair,trend,gatt
09:25:32   9  ORDER BY pair,trend,gatt
09:25:32  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5171 -.16583061
usd_jpy 	-1 up	      4864 .170690824
usd_jpy 	-1		 1
usd_jpy 	 1 nup	      5017 -.15289785
usd_jpy 	 1 up	      4684 .172185297
usd_jpy 	 1		71

6 rows selected.

Elapsed: 00:00:00.04
09:25:32 SQL> 
09:25:32 SQL> 
09:25:32 SQL> -- Derive NTILE based params:
09:25:32 SQL> 
09:25:32 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.23
09:25:32 SQL> CREATE TABLE svm6162 COMPRESS AS
09:25:32   2  SELECT
09:25:32   3  pair
09:25:32   4  ,ydate
09:25:32   5  ,prdate
09:25:32   6  ,clse
09:25:32   7  ,g6
09:25:32   8  ,gatt
09:25:32   9  ,gattn
09:25:32  10  ,trend
09:25:32  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
09:25:32  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
09:25:32  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
09:25:32  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
09:25:32  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
09:25:32  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
09:25:32  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
09:25:32  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
09:25:32  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
09:25:32  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
09:25:32  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
09:25:32  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
09:25:32  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
09:25:32  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
09:25:32  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
09:25:32  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
09:25:32  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
09:25:32  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
09:25:32  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
09:25:32  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
09:25:32  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
09:25:32  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
09:25:32  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
09:25:32  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
09:25:32  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
09:25:32  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
09:25:32  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
09:25:32  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
09:25:32  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
09:25:32  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
09:25:32  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
09:25:32  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
09:25:32  43  ,hh  att32
09:25:32  44  ,d   att33
09:25:32  45  ,w   att34
09:25:32  46  ,mpm att35
09:25:32  47  ,mph att36
09:25:32  48  ,trend att37
09:25:32  49  FROM svm6142
09:25:32  50  ORDER BY ydate
09:25:32  51  /

Table created.

Elapsed: 00:00:04.80
09:25:37 SQL> 
09:25:37 SQL> -- rpt
09:25:37 SQL> 
09:25:37 SQL> SELECT
09:25:37   2  pair
09:25:37   3  ,trend
09:25:37   4  ,gatt
09:25:37   5  ,COUNT(pair)
09:25:37   6  ,AVG(g6)
09:25:37   7  FROM svm6162
09:25:37   8  GROUP BY pair,trend,gatt
09:25:37   9  ORDER BY pair,trend,gatt
09:25:37  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5171 -.16583061
usd_jpy 	-1 up	      4864 .170690824
usd_jpy 	-1		 1
usd_jpy 	 1 nup	      5017 -.15289785
usd_jpy 	 1 up	      4684 .172185297
usd_jpy 	 1		71

6 rows selected.

Elapsed: 00:00:00.03
09:25:37 SQL> 
09:25:37 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.32
09:25:37 SQL> CREATE TABLE modsrc COMPRESS AS
09:25:37   2  SELECT
09:25:37   3  pair
09:25:37   4  ,ydate
09:25:37   5  ,prdate
09:25:37   6  ,trend
09:25:37   7  ,g6
09:25:37   8  ,gatt
09:25:37   9  ,gattn
09:25:37  10  FROM svm6162
09:25:37  11  /

Table created.

Elapsed: 00:00:00.08
09:25:37 SQL> 
09:25:37 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
09:25:37 SQL> 
09:25:37 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.12
09:25:37 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
09:25:37   2  SELECT
09:25:37   3  ydate
09:25:37   4  ,trend jpy_trend
09:25:37   5  ,g6    jpy_g6
09:25:37   6  ,gatt  jpy_gatt
09:25:37   7  ,gattn jpy_gattn
09:25:37   8  FROM modsrc
09:25:37   9  /

Table created.

Elapsed: 00:00:00.10
09:25:38 SQL> 
09:25:38 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
09:25:38 SQL> 
09:25:38 SQL> -- I need a copy of the attributes:
09:25:38 SQL> 
09:25:38 SQL> 
09:25:38 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.05
09:25:38 SQL> CREATE TABLE jpy_att COMPRESS AS
09:25:38   2  SELECT
09:25:38   3  ydate
09:25:38   4  ,att00 jpy_att00
09:25:38   5  ,att01 jpy_att01
09:25:38   6  ,att02 jpy_att02
09:25:38   7  ,att03 jpy_att03
09:25:38   8  ,att04 jpy_att04
09:25:38   9  ,att05 jpy_att05
09:25:38  10  ,att06 jpy_att06
09:25:38  11  ,att07 jpy_att07
09:25:38  12  ,att08 jpy_att08
09:25:38  13  ,att09 jpy_att09
09:25:38  14  ,att10 jpy_att10
09:25:38  15  ,att11 jpy_att11
09:25:38  16  ,att12 jpy_att12
09:25:38  17  ,att13 jpy_att13
09:25:38  18  ,att14 jpy_att14
09:25:38  19  ,att15 jpy_att15
09:25:38  20  ,att16 jpy_att16
09:25:38  21  ,att17 jpy_att17
09:25:38  22  ,att18 jpy_att18
09:25:38  23  ,att19 jpy_att19
09:25:38  24  ,att20 jpy_att20
09:25:38  25  ,att21 jpy_att21
09:25:38  26  ,att22 jpy_att22
09:25:38  27  ,att23 jpy_att23
09:25:38  28  ,att24 jpy_att24
09:25:38  29  ,att25 jpy_att25
09:25:38  30  ,att26 jpy_att26
09:25:38  31  ,att27 jpy_att27
09:25:38  32  ,att28 jpy_att28
09:25:38  33  ,att29 jpy_att29
09:25:38  34  ,att30 jpy_att30
09:25:38  35  ,att31 jpy_att31
09:25:38  36  ,att32 jpy_att32
09:25:38  37  ,att33 jpy_att33
09:25:38  38  ,att34 jpy_att34
09:25:38  39  ,att35 jpy_att35
09:25:38  40  ,att36 jpy_att36
09:25:38  41  ,att37 jpy_att37
09:25:38  42  FROM svm6162
09:25:38  43  /

Table created.

Elapsed: 00:00:00.18
09:25:38 SQL> 
09:25:38 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.50
09:25:38 SQL> 
09:25:38 SQL> -- rpt
09:25:38 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.90
09:25:39 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.00
09:25:39 SQL> 
09:25:39 SQL> --
09:25:39 SQL> -- cad610.sql
09:25:39 SQL> --
09:25:39 SQL> 
09:25:39 SQL> -- Creates views and tables for backtesting a forex SVM strategy
09:25:39 SQL> 
09:25:39 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
09:25:40 SQL> 
09:25:40 SQL> -- I created di5min here:
09:25:40 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
09:25:40 SQL> 
09:25:40 SQL> CREATE OR REPLACE VIEW svm6102 AS
09:25:40   2  SELECT
09:25:40   3  pair
09:25:40   4  ,ydate
09:25:40   5  ,prdate
09:25:40   6  ,rownum rnum -- acts as t in my time-series
09:25:40   7  ,clse
09:25:40   8  -- Derive a bunch of attributes from clse, the latest price:
09:25:40   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
09:25:40  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
09:25:40  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
09:25:40  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
09:25:40  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
09:25:40  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
09:25:40  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
09:25:40  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
09:25:40  17  --
09:25:40  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
09:25:40  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
09:25:40  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
09:25:40  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
09:25:40  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
09:25:40  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
09:25:40  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
09:25:40  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
09:25:40  26  --
09:25:40  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
09:25:40  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
09:25:40  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
09:25:40  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
09:25:40  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
09:25:40  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
09:25:40  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
09:25:40  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
09:25:40  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
09:25:40  36  FROM di5min WHERE pair LIKE'%cad%'
09:25:40  37  AND ydate > sysdate - 95
09:25:40  38  ORDER BY ydate
09:25:40  39  /

View created.

Elapsed: 00:00:00.04
09:25:40 SQL> 
09:25:40 SQL> -- rpt
09:25:40 SQL> 
09:25:40 SQL> SELECT
09:25:40   2  pair
09:25:40   3  ,COUNT(pair)
09:25:40   4  ,MIN(clse),MAX(clse)
09:25:40   5  ,MIN(avg6),MAX(avg6)
09:25:40   6  ,MIN(ydate),MAX(ydate)
09:25:40   7  FROM svm6102
09:25:40   8  GROUP BY pair
09:25:40   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19808    .988925	   1.0355  .99060274 1.03282877 2010-10-04 09:30:01 2011-01-07 09:20:00

Elapsed: 00:00:00.85
09:25:41 SQL> 
09:25:41 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
09:25:41 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.23
09:25:41 SQL> CREATE TABLE svm6122 COMPRESS AS
09:25:41   2  SELECT
09:25:41   3  pair
09:25:41   4  ,ydate
09:25:41   5  ,prdate
09:25:41   6  ,clse
09:25:41   7  -- g6 is important. I want to predict g6:
09:25:41   8  ,ld6 - clse g6
09:25:41   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
09:25:41  10  -- I want more attributes from the ones I derived above:
09:25:41  11  -- clse relation to moving-min
09:25:41  12  ,clse-min4  cm4
09:25:41  13  ,clse-min6  cm6
09:25:41  14  ,clse-min8  cm8
09:25:41  15  ,clse-min10 cm10
09:25:41  16  ,clse-min12 cm12
09:25:41  17  ,clse-min14 cm14
09:25:41  18  ,clse-min16 cm16
09:25:41  19  ,clse-min18 cm18
09:25:41  20  -- clse relation to moving-avg
09:25:41  21  ,clse-avg4  ca4
09:25:41  22  ,clse-avg6  ca6
09:25:41  23  ,clse-avg8  ca8
09:25:41  24  ,clse-avg10 ca10
09:25:41  25  ,clse-avg12 ca12
09:25:41  26  ,clse-avg14 ca14
09:25:41  27  ,clse-avg16 ca16
09:25:41  28  ,clse-avg18 ca18
09:25:41  29  -- clse relation to moving-max
09:25:41  30  ,clse-max4  cx4
09:25:41  31  ,clse-max6  cx6
09:25:41  32  ,clse-max8  cx8
09:25:41  33  ,clse-max10 cx10
09:25:41  34  ,clse-max12 cx12
09:25:41  35  ,clse-max14 cx14
09:25:41  36  ,clse-max16 cx16
09:25:41  37  ,clse-max18 cx18
09:25:41  38  -- Derive more attributes.
09:25:41  39  -- I want to use CORR() here to help SVM see the shape of the series.
09:25:41  40  -- But COVAR_POP is more stable:
09:25:41  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
09:25:41  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
09:25:41  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
09:25:41  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
09:25:41  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
09:25:41  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
09:25:41  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
09:25:41  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
09:25:41  49  -- Derive date related attributes:
09:25:41  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
09:25:41  51  ,0+TO_CHAR(ydate,'D')d
09:25:41  52  ,0+TO_CHAR(ydate,'W')w
09:25:41  53  -- mpm stands for minutes-past-midnight:
09:25:41  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
09:25:41  55  -- mph stands for minutes-past-hour:
09:25:41  56  ,0+TO_CHAR(ydate,'MI')mph
09:25:41  57  FROM svm6102
09:25:41  58  ORDER BY ydate
09:25:41  59  /

Table created.

Elapsed: 00:00:02.06
09:25:43 SQL> 
09:25:43 SQL> -- rpt
09:25:43 SQL> 
09:25:43 SQL> SELECT
09:25:43   2  pair
09:25:43   3  ,COUNT(pair)
09:25:43   4  ,MIN(clse),MAX(clse)
09:25:43   5  ,MIN(ydate),MAX(ydate)
09:25:43   6  FROM svm6122
09:25:43   7  GROUP BY pair
09:25:43   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19808    .988925	   1.0355 2010-10-04 09:30:01 2011-01-07 09:20:00

Elapsed: 00:00:00.05
09:25:43 SQL> 
09:25:43 SQL> -- Prepare for derivation of NTILE based params:
09:25:43 SQL> 
09:25:43 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.26
09:25:43 SQL> CREATE TABLE svm6142 COMPRESS AS
09:25:43   2  SELECT
09:25:43   3  pair
09:25:43   4  ,ydate
09:25:43   5  ,prdate
09:25:43   6  ,clse
09:25:43   7  ,g6
09:25:43   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
09:25:43   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
09:25:43  10  ,CASE WHEN trend IS NULL THEN 1
09:25:43  11  	    WHEN trend =0      THEN 1
09:25:43  12  	    ELSE trend END trend
09:25:43  13  ,cm4
09:25:43  14  ,cm6
09:25:43  15  ,cm8
09:25:43  16  ,cm10
09:25:43  17  ,cm12
09:25:43  18  ,cm14
09:25:43  19  ,cm16
09:25:43  20  ,cm18
09:25:43  21  --
09:25:43  22  ,ca4
09:25:43  23  ,ca6
09:25:43  24  ,ca8
09:25:43  25  ,ca10
09:25:43  26  ,ca12
09:25:43  27  ,ca14
09:25:43  28  ,ca16
09:25:43  29  ,ca18
09:25:43  30  --
09:25:43  31  ,cx4
09:25:43  32  ,cx6
09:25:43  33  ,cx8
09:25:43  34  ,cx10
09:25:43  35  ,cx12
09:25:43  36  ,cx14
09:25:43  37  ,cx16
09:25:43  38  ,cx18
09:25:43  39  --
09:25:43  40  ,crr4
09:25:43  41  ,crr6
09:25:43  42  ,crr8
09:25:43  43  ,crr10
09:25:43  44  ,crr12
09:25:43  45  ,crr14
09:25:43  46  ,crr16
09:25:43  47  ,crr18
09:25:43  48  --
09:25:43  49  ,hh
09:25:43  50  ,d
09:25:43  51  ,w
09:25:43  52  ,mpm
09:25:43  53  ,mph
09:25:43  54  FROM svm6122
09:25:43  55  ORDER BY ydate
09:25:43  56  /

Table created.

Elapsed: 00:00:00.38
09:25:44 SQL> 
09:25:44 SQL> -- rpt
09:25:44 SQL> 
09:25:44 SQL> SELECT
09:25:44   2  pair
09:25:44   3  ,trend
09:25:44   4  ,gatt
09:25:44   5  ,COUNT(pair)
09:25:44   6  ,AVG(g6)
09:25:44   7  FROM svm6142
09:25:44   8  GROUP BY pair,trend,gatt
09:25:44   9  ORDER BY pair,trend,gatt
09:25:44  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7336 -.00123609
usd_cad 	-1 up	      3154 .003039167
usd_cad 	-1		 7
usd_cad 	 1 nup	      6833 -.00160717
usd_cad 	 1 up	      2413 .003632261
usd_cad 	 1		65

6 rows selected.

Elapsed: 00:00:00.04
09:25:44 SQL> 
09:25:44 SQL> 
09:25:44 SQL> -- Derive NTILE based params:
09:25:44 SQL> 
09:25:44 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.19
09:25:44 SQL> CREATE TABLE svm6162 COMPRESS AS
09:25:44   2  SELECT
09:25:44   3  pair
09:25:44   4  ,ydate
09:25:44   5  ,prdate
09:25:44   6  ,clse
09:25:44   7  ,g6
09:25:44   8  ,gatt
09:25:44   9  ,gattn
09:25:44  10  ,trend
09:25:44  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
09:25:44  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
09:25:44  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
09:25:44  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
09:25:44  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
09:25:44  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
09:25:44  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
09:25:44  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
09:25:44  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
09:25:44  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
09:25:44  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
09:25:44  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
09:25:44  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
09:25:44  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
09:25:44  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
09:25:44  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
09:25:44  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
09:25:44  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
09:25:44  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
09:25:44  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
09:25:44  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
09:25:44  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
09:25:44  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
09:25:44  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
09:25:44  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
09:25:44  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
09:25:44  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
09:25:44  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
09:25:44  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
09:25:44  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
09:25:44  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
09:25:44  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
09:25:44  43  ,hh  att32
09:25:44  44  ,d   att33
09:25:44  45  ,w   att34
09:25:44  46  ,mpm att35
09:25:44  47  ,mph att36
09:25:44  48  ,trend att37
09:25:44  49  FROM svm6142
09:25:44  50  ORDER BY ydate
09:25:44  51  /

Table created.

Elapsed: 00:00:04.92
09:25:49 SQL> 
09:25:49 SQL> -- rpt
09:25:49 SQL> 
09:25:49 SQL> SELECT
09:25:49   2  pair
09:25:49   3  ,trend
09:25:49   4  ,gatt
09:25:49   5  ,COUNT(pair)
09:25:49   6  ,AVG(g6)
09:25:49   7  FROM svm6162
09:25:49   8  GROUP BY pair,trend,gatt
09:25:49   9  ORDER BY pair,trend,gatt
09:25:49  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7336 -.00123609
usd_cad 	-1 up	      3154 .003039167
usd_cad 	-1		 7
usd_cad 	 1 nup	      6833 -.00160717
usd_cad 	 1 up	      2413 .003632261
usd_cad 	 1		65

6 rows selected.

Elapsed: 00:00:00.03
09:25:49 SQL> 
09:25:49 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.16
09:25:49 SQL> CREATE TABLE modsrc COMPRESS AS
09:25:49   2  SELECT
09:25:49   3  pair
09:25:49   4  ,ydate
09:25:49   5  ,prdate
09:25:49   6  ,trend
09:25:49   7  ,g6
09:25:49   8  ,gatt
09:25:49   9  ,gattn
09:25:49  10  FROM svm6162
09:25:49  11  /

Table created.

Elapsed: 00:00:00.09
09:25:49 SQL> 
09:25:49 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
09:25:49 SQL> 
09:25:49 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
09:25:49 SQL> CREATE TABLE cad_ms610 COMPRESS AS
09:25:49   2  SELECT
09:25:49   3  ydate
09:25:49   4  ,trend cad_trend
09:25:49   5  ,g6    cad_g6
09:25:49   6  ,gatt  cad_gatt
09:25:49   7  ,gattn cad_gattn
09:25:49   8  FROM modsrc
09:25:49   9  /

Table created.

Elapsed: 00:00:00.08
09:25:49 SQL> 
09:25:49 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
09:25:50 SQL> 
09:25:50 SQL> -- I need a copy of the attributes:
09:25:50 SQL> 
09:25:50 SQL> 
09:25:50 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.05
09:25:50 SQL> CREATE TABLE cad_att COMPRESS AS
09:25:50   2  SELECT
09:25:50   3  ydate
09:25:50   4  ,att00 cad_att00
09:25:50   5  ,att01 cad_att01
09:25:50   6  ,att02 cad_att02
09:25:50   7  ,att03 cad_att03
09:25:50   8  ,att04 cad_att04
09:25:50   9  ,att05 cad_att05
09:25:50  10  ,att06 cad_att06
09:25:50  11  ,att07 cad_att07
09:25:50  12  ,att08 cad_att08
09:25:50  13  ,att09 cad_att09
09:25:50  14  ,att10 cad_att10
09:25:50  15  ,att11 cad_att11
09:25:50  16  ,att12 cad_att12
09:25:50  17  ,att13 cad_att13
09:25:50  18  ,att14 cad_att14
09:25:50  19  ,att15 cad_att15
09:25:50  20  ,att16 cad_att16
09:25:50  21  ,att17 cad_att17
09:25:50  22  ,att18 cad_att18
09:25:50  23  ,att19 cad_att19
09:25:50  24  ,att20 cad_att20
09:25:50  25  ,att21 cad_att21
09:25:50  26  ,att22 cad_att22
09:25:50  27  ,att23 cad_att23
09:25:50  28  ,att24 cad_att24
09:25:50  29  ,att25 cad_att25
09:25:50  30  ,att26 cad_att26
09:25:50  31  ,att27 cad_att27
09:25:50  32  ,att28 cad_att28
09:25:50  33  ,att29 cad_att29
09:25:50  34  ,att30 cad_att30
09:25:50  35  ,att31 cad_att31
09:25:50  36  ,att32 cad_att32
09:25:50  37  ,att33 cad_att33
09:25:50  38  ,att34 cad_att34
09:25:50  39  ,att35 cad_att35
09:25:50  40  ,att36 cad_att36
09:25:50  41  ,att37 cad_att37
09:25:50  42  FROM svm6162
09:25:50  43  /

Table created.

Elapsed: 00:00:00.18
09:25:50 SQL> 
09:25:50 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.53
09:25:50 SQL> 
09:25:50 SQL> -- rpt
09:25:50 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.86
09:25:51 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.00
09:25:51 SQL> 
09:25:51 SQL> --
09:25:51 SQL> -- chf610.sql
09:25:51 SQL> --
09:25:51 SQL> 
09:25:51 SQL> -- Creates views and tables for backtesting a forex SVM strategy
09:25:51 SQL> 
09:25:51 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.48
09:25:52 SQL> 
09:25:52 SQL> -- I created di5min here:
09:25:52 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
09:25:52 SQL> 
09:25:52 SQL> CREATE OR REPLACE VIEW svm6102 AS
09:25:52   2  SELECT
09:25:52   3  pair
09:25:52   4  ,ydate
09:25:52   5  ,prdate
09:25:52   6  ,rownum rnum -- acts as t in my time-series
09:25:52   7  ,clse
09:25:52   8  -- Derive a bunch of attributes from clse, the latest price:
09:25:52   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
09:25:52  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
09:25:52  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
09:25:52  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
09:25:52  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
09:25:52  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
09:25:52  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
09:25:52  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
09:25:52  17  --
09:25:52  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
09:25:52  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
09:25:52  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
09:25:52  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
09:25:52  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
09:25:52  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
09:25:52  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
09:25:52  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
09:25:52  26  --
09:25:52  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
09:25:52  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
09:25:52  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
09:25:52  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
09:25:52  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
09:25:52  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
09:25:52  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
09:25:52  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
09:25:52  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
09:25:52  36  FROM di5min WHERE pair LIKE'%chf%'
09:25:52  37  AND ydate > sysdate - 95
09:25:52  38  ORDER BY ydate
09:25:52  39  /

View created.

Elapsed: 00:00:00.05
09:25:52 SQL> 
09:25:52 SQL> -- rpt
09:25:52 SQL> 
09:25:52 SQL> SELECT
09:25:52   2  pair
09:25:52   3  ,COUNT(pair)
09:25:52   4  ,MIN(clse),MAX(clse)
09:25:52   5  ,MIN(avg6),MAX(avg6)
09:25:52   6  ,MIN(ydate),MAX(ydate)
09:25:52   7  FROM svm6102
09:25:52   8  GROUP BY pair
09:25:52   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19811    .931675	  1.00635 .933257705 1.00498151 2010-10-04 09:30:01 2011-01-07 09:20:00

Elapsed: 00:00:00.88
09:25:53 SQL> 
09:25:53 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
09:25:53 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.20
09:25:53 SQL> CREATE TABLE svm6122 COMPRESS AS
09:25:53   2  SELECT
09:25:53   3  pair
09:25:53   4  ,ydate
09:25:53   5  ,prdate
09:25:53   6  ,clse
09:25:53   7  -- g6 is important. I want to predict g6:
09:25:53   8  ,ld6 - clse g6
09:25:53   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
09:25:53  10  -- I want more attributes from the ones I derived above:
09:25:53  11  -- clse relation to moving-min
09:25:53  12  ,clse-min4  cm4
09:25:53  13  ,clse-min6  cm6
09:25:53  14  ,clse-min8  cm8
09:25:53  15  ,clse-min10 cm10
09:25:53  16  ,clse-min12 cm12
09:25:53  17  ,clse-min14 cm14
09:25:53  18  ,clse-min16 cm16
09:25:53  19  ,clse-min18 cm18
09:25:53  20  -- clse relation to moving-avg
09:25:53  21  ,clse-avg4  ca4
09:25:53  22  ,clse-avg6  ca6
09:25:53  23  ,clse-avg8  ca8
09:25:53  24  ,clse-avg10 ca10
09:25:53  25  ,clse-avg12 ca12
09:25:53  26  ,clse-avg14 ca14
09:25:53  27  ,clse-avg16 ca16
09:25:53  28  ,clse-avg18 ca18
09:25:53  29  -- clse relation to moving-max
09:25:53  30  ,clse-max4  cx4
09:25:53  31  ,clse-max6  cx6
09:25:53  32  ,clse-max8  cx8
09:25:53  33  ,clse-max10 cx10
09:25:53  34  ,clse-max12 cx12
09:25:53  35  ,clse-max14 cx14
09:25:53  36  ,clse-max16 cx16
09:25:53  37  ,clse-max18 cx18
09:25:53  38  -- Derive more attributes.
09:25:53  39  -- I want to use CORR() here to help SVM see the shape of the series.
09:25:53  40  -- But COVAR_POP is more stable:
09:25:53  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
09:25:53  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
09:25:53  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
09:25:53  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
09:25:53  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
09:25:53  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
09:25:53  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
09:25:53  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
09:25:53  49  -- Derive date related attributes:
09:25:53  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
09:25:53  51  ,0+TO_CHAR(ydate,'D')d
09:25:53  52  ,0+TO_CHAR(ydate,'W')w
09:25:53  53  -- mpm stands for minutes-past-midnight:
09:25:53  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
09:25:53  55  -- mph stands for minutes-past-hour:
09:25:53  56  ,0+TO_CHAR(ydate,'MI')mph
09:25:53  57  FROM svm6102
09:25:53  58  ORDER BY ydate
09:25:53  59  /

Table created.

Elapsed: 00:00:02.10
09:25:55 SQL> 
09:25:55 SQL> -- rpt
09:25:55 SQL> 
09:25:55 SQL> SELECT
09:25:55   2  pair
09:25:55   3  ,COUNT(pair)
09:25:55   4  ,MIN(clse),MAX(clse)
09:25:55   5  ,MIN(ydate),MAX(ydate)
09:25:55   6  FROM svm6122
09:25:55   7  GROUP BY pair
09:25:55   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19811    .931675	  1.00635 2010-10-04 09:30:01 2011-01-07 09:20:00

Elapsed: 00:00:00.04
09:25:55 SQL> 
09:25:55 SQL> -- Prepare for derivation of NTILE based params:
09:25:55 SQL> 
09:25:55 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.27
09:25:55 SQL> CREATE TABLE svm6142 COMPRESS AS
09:25:55   2  SELECT
09:25:55   3  pair
09:25:55   4  ,ydate
09:25:55   5  ,prdate
09:25:55   6  ,clse
09:25:55   7  ,g6
09:25:55   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
09:25:55   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
09:25:55  10  ,CASE WHEN trend IS NULL THEN 1
09:25:55  11  	    WHEN trend =0      THEN 1
09:25:55  12  	    ELSE trend END trend
09:25:55  13  ,cm4
09:25:55  14  ,cm6
09:25:55  15  ,cm8
09:25:55  16  ,cm10
09:25:55  17  ,cm12
09:25:55  18  ,cm14
09:25:55  19  ,cm16
09:25:55  20  ,cm18
09:25:55  21  --
09:25:55  22  ,ca4
09:25:55  23  ,ca6
09:25:55  24  ,ca8
09:25:55  25  ,ca10
09:25:55  26  ,ca12
09:25:55  27  ,ca14
09:25:55  28  ,ca16
09:25:55  29  ,ca18
09:25:55  30  --
09:25:55  31  ,cx4
09:25:55  32  ,cx6
09:25:55  33  ,cx8
09:25:55  34  ,cx10
09:25:55  35  ,cx12
09:25:55  36  ,cx14
09:25:55  37  ,cx16
09:25:55  38  ,cx18
09:25:55  39  --
09:25:55  40  ,crr4
09:25:55  41  ,crr6
09:25:55  42  ,crr8
09:25:55  43  ,crr10
09:25:55  44  ,crr12
09:25:55  45  ,crr14
09:25:55  46  ,crr16
09:25:55  47  ,crr18
09:25:55  48  --
09:25:55  49  ,hh
09:25:55  50  ,d
09:25:55  51  ,w
09:25:55  52  ,mpm
09:25:55  53  ,mph
09:25:55  54  FROM svm6122
09:25:55  55  ORDER BY ydate
09:25:55  56  /

Table created.

Elapsed: 00:00:00.38
09:25:56 SQL> 
09:25:56 SQL> -- rpt
09:25:56 SQL> 
09:25:56 SQL> SELECT
09:25:56   2  pair
09:25:56   3  ,trend
09:25:56   4  ,gatt
09:25:56   5  ,COUNT(pair)
09:25:56   6  ,AVG(g6)
09:25:56   7  FROM svm6142
09:25:56   8  GROUP BY pair,trend,gatt
09:25:56   9  ORDER BY pair,trend,gatt
09:25:56  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7114 -.00196925
usd_chf 	-1 up	      3086 .003809605
usd_chf 	-1		31
usd_chf 	 1 nup	      6593 -.00151322
usd_chf 	 1 up	      2946 .003958819
usd_chf 	 1		41

6 rows selected.

Elapsed: 00:00:00.03
09:25:56 SQL> 
09:25:56 SQL> 
09:25:56 SQL> -- Derive NTILE based params:
09:25:56 SQL> 
09:25:56 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.22
09:25:56 SQL> CREATE TABLE svm6162 COMPRESS AS
09:25:56   2  SELECT
09:25:56   3  pair
09:25:56   4  ,ydate
09:25:56   5  ,prdate
09:25:56   6  ,clse
09:25:56   7  ,g6
09:25:56   8  ,gatt
09:25:56   9  ,gattn
09:25:56  10  ,trend
09:25:56  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
09:25:56  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
09:25:56  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
09:25:56  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
09:25:56  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
09:25:56  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
09:25:56  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
09:25:56  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
09:25:56  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
09:25:56  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
09:25:56  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
09:25:56  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
09:25:56  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
09:25:56  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
09:25:56  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
09:25:56  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
09:25:56  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
09:25:56  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
09:25:56  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
09:25:56  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
09:25:56  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
09:25:56  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
09:25:56  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
09:25:56  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
09:25:56  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
09:25:56  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
09:25:56  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
09:25:56  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
09:25:56  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
09:25:56  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
09:25:56  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
09:25:56  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
09:25:56  43  ,hh  att32
09:25:56  44  ,d   att33
09:25:56  45  ,w   att34
09:25:56  46  ,mpm att35
09:25:56  47  ,mph att36
09:25:56  48  ,trend att37
09:25:56  49  FROM svm6142
09:25:56  50  ORDER BY ydate
09:25:56  51  /

Table created.

Elapsed: 00:00:04.89
09:26:01 SQL> 
09:26:01 SQL> -- rpt
09:26:01 SQL> 
09:26:01 SQL> SELECT
09:26:01   2  pair
09:26:01   3  ,trend
09:26:01   4  ,gatt
09:26:01   5  ,COUNT(pair)
09:26:01   6  ,AVG(g6)
09:26:01   7  FROM svm6162
09:26:01   8  GROUP BY pair,trend,gatt
09:26:01   9  ORDER BY pair,trend,gatt
09:26:01  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7114 -.00196925
usd_chf 	-1 up	      3086 .003809605
usd_chf 	-1		31
usd_chf 	 1 nup	      6593 -.00151322
usd_chf 	 1 up	      2946 .003958819
usd_chf 	 1		41

6 rows selected.

Elapsed: 00:00:00.02
09:26:01 SQL> 
09:26:01 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.11
09:26:01 SQL> CREATE TABLE modsrc COMPRESS AS
09:26:01   2  SELECT
09:26:01   3  pair
09:26:01   4  ,ydate
09:26:01   5  ,prdate
09:26:01   6  ,trend
09:26:01   7  ,g6
09:26:01   8  ,gatt
09:26:01   9  ,gattn
09:26:01  10  FROM svm6162
09:26:01  11  /

Table created.

Elapsed: 00:00:00.11
09:26:01 SQL> 
09:26:01 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
09:26:01 SQL> 
09:26:01 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.16
09:26:01 SQL> CREATE TABLE chf_ms610 COMPRESS AS
09:26:01   2  SELECT
09:26:01   3  ydate
09:26:01   4  ,trend chf_trend
09:26:01   5  ,g6    chf_g6
09:26:01   6  ,gatt  chf_gatt
09:26:01   7  ,gattn chf_gattn
09:26:01   8  FROM modsrc
09:26:01   9  /

Table created.

Elapsed: 00:00:00.08
09:26:01 SQL> 
09:26:01 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
09:26:02 SQL> 
09:26:02 SQL> -- I need a copy of the attributes:
09:26:02 SQL> 
09:26:02 SQL> 
09:26:02 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.08
09:26:02 SQL> CREATE TABLE chf_att COMPRESS AS
09:26:02   2  SELECT
09:26:02   3  ydate
09:26:02   4  ,att00 chf_att00
09:26:02   5  ,att01 chf_att01
09:26:02   6  ,att02 chf_att02
09:26:02   7  ,att03 chf_att03
09:26:02   8  ,att04 chf_att04
09:26:02   9  ,att05 chf_att05
09:26:02  10  ,att06 chf_att06
09:26:02  11  ,att07 chf_att07
09:26:02  12  ,att08 chf_att08
09:26:02  13  ,att09 chf_att09
09:26:02  14  ,att10 chf_att10
09:26:02  15  ,att11 chf_att11
09:26:02  16  ,att12 chf_att12
09:26:02  17  ,att13 chf_att13
09:26:02  18  ,att14 chf_att14
09:26:02  19  ,att15 chf_att15
09:26:02  20  ,att16 chf_att16
09:26:02  21  ,att17 chf_att17
09:26:02  22  ,att18 chf_att18
09:26:02  23  ,att19 chf_att19
09:26:02  24  ,att20 chf_att20
09:26:02  25  ,att21 chf_att21
09:26:02  26  ,att22 chf_att22
09:26:02  27  ,att23 chf_att23
09:26:02  28  ,att24 chf_att24
09:26:02  29  ,att25 chf_att25
09:26:02  30  ,att26 chf_att26
09:26:02  31  ,att27 chf_att27
09:26:02  32  ,att28 chf_att28
09:26:02  33  ,att29 chf_att29
09:26:02  34  ,att30 chf_att30
09:26:02  35  ,att31 chf_att31
09:26:02  36  ,att32 chf_att32
09:26:02  37  ,att33 chf_att33
09:26:02  38  ,att34 chf_att34
09:26:02  39  ,att35 chf_att35
09:26:02  40  ,att36 chf_att36
09:26:02  41  ,att37 chf_att37
09:26:02  42  FROM svm6162
09:26:02  43  /

Table created.

Elapsed: 00:00:00.19
09:26:02 SQL> 
09:26:02 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
09:26:02 SQL> 
09:26:02 SQL> -- rpt
09:26:02 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19811

Elapsed: 00:00:00.86
09:26:03 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19811

Elapsed: 00:00:00.01
09:26:03 SQL> 
09:26:03 SQL> --
09:26:03 SQL> -- ech610.sql
09:26:03 SQL> --
09:26:03 SQL> 
09:26:03 SQL> -- Creates views and tables for backtesting a forex SVM strategy
09:26:03 SQL> 
09:26:03 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
09:26:04 SQL> 
09:26:04 SQL> -- I created di5min here:
09:26:04 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
09:26:04 SQL> 
09:26:04 SQL> CREATE OR REPLACE VIEW svm6102 AS
09:26:04   2  SELECT
09:26:04   3  pair
09:26:04   4  ,ydate
09:26:04   5  ,prdate
09:26:04   6  ,rownum rnum -- acts as t in my time-series
09:26:04   7  ,clse
09:26:04   8  -- Derive a bunch of attributes from clse, the latest price:
09:26:04   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
09:26:04  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
09:26:04  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
09:26:04  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
09:26:04  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
09:26:04  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
09:26:04  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
09:26:04  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
09:26:04  17  --
09:26:04  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
09:26:04  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
09:26:04  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
09:26:04  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
09:26:04  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
09:26:04  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
09:26:04  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
09:26:04  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
09:26:04  26  --
09:26:04  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
09:26:04  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
09:26:04  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
09:26:04  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
09:26:04  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
09:26:04  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
09:26:04  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
09:26:04  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
09:26:04  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
09:26:04  36  FROM di5min WHERE pair LIKE'%ech%'
09:26:04  37  AND ydate > sysdate - 95
09:26:04  38  ORDER BY ydate
09:26:04  39  /

View created.

Elapsed: 00:00:00.04
09:26:04 SQL> 
09:26:04 SQL> -- rpt
09:26:04 SQL> 
09:26:04 SQL> SELECT
09:26:04   2  pair
09:26:04   3  ,COUNT(pair)
09:26:04   4  ,MIN(clse),MAX(clse)
09:26:04   5  ,MIN(avg6),MAX(avg6)
09:26:04   6  ,MIN(ydate),MAX(ydate)
09:26:04   7  FROM svm6102
09:26:04   8  GROUP BY pair
09:26:04   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19809 1.24182424 1.38284305 1.24320711 1.37986485 2010-10-04 09:30:01 2011-01-07 09:20:00

Elapsed: 00:00:00.83
09:26:04 SQL> 
09:26:04 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
09:26:04 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.34
09:26:05 SQL> CREATE TABLE svm6122 COMPRESS AS
09:26:05   2  SELECT
09:26:05   3  pair
09:26:05   4  ,ydate
09:26:05   5  ,prdate
09:26:05   6  ,clse
09:26:05   7  -- g6 is important. I want to predict g6:
09:26:05   8  ,ld6 - clse g6
09:26:05   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
09:26:05  10  -- I want more attributes from the ones I derived above:
09:26:05  11  -- clse relation to moving-min
09:26:05  12  ,clse-min4  cm4
09:26:05  13  ,clse-min6  cm6
09:26:05  14  ,clse-min8  cm8
09:26:05  15  ,clse-min10 cm10
09:26:05  16  ,clse-min12 cm12
09:26:05  17  ,clse-min14 cm14
09:26:05  18  ,clse-min16 cm16
09:26:05  19  ,clse-min18 cm18
09:26:05  20  -- clse relation to moving-avg
09:26:05  21  ,clse-avg4  ca4
09:26:05  22  ,clse-avg6  ca6
09:26:05  23  ,clse-avg8  ca8
09:26:05  24  ,clse-avg10 ca10
09:26:05  25  ,clse-avg12 ca12
09:26:05  26  ,clse-avg14 ca14
09:26:05  27  ,clse-avg16 ca16
09:26:05  28  ,clse-avg18 ca18
09:26:05  29  -- clse relation to moving-max
09:26:05  30  ,clse-max4  cx4
09:26:05  31  ,clse-max6  cx6
09:26:05  32  ,clse-max8  cx8
09:26:05  33  ,clse-max10 cx10
09:26:05  34  ,clse-max12 cx12
09:26:05  35  ,clse-max14 cx14
09:26:05  36  ,clse-max16 cx16
09:26:05  37  ,clse-max18 cx18
09:26:05  38  -- Derive more attributes.
09:26:05  39  -- I want to use CORR() here to help SVM see the shape of the series.
09:26:05  40  -- But COVAR_POP is more stable:
09:26:05  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
09:26:05  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
09:26:05  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
09:26:05  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
09:26:05  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
09:26:05  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
09:26:05  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
09:26:05  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
09:26:05  49  -- Derive date related attributes:
09:26:05  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
09:26:05  51  ,0+TO_CHAR(ydate,'D')d
09:26:05  52  ,0+TO_CHAR(ydate,'W')w
09:26:05  53  -- mpm stands for minutes-past-midnight:
09:26:05  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
09:26:05  55  -- mph stands for minutes-past-hour:
09:26:05  56  ,0+TO_CHAR(ydate,'MI')mph
09:26:05  57  FROM svm6102
09:26:05  58  ORDER BY ydate
09:26:05  59  /

Table created.

Elapsed: 00:00:02.17
09:26:07 SQL> 
09:26:07 SQL> -- rpt
09:26:07 SQL> 
09:26:07 SQL> SELECT
09:26:07   2  pair
09:26:07   3  ,COUNT(pair)
09:26:07   4  ,MIN(clse),MAX(clse)
09:26:07   5  ,MIN(ydate),MAX(ydate)
09:26:07   6  FROM svm6122
09:26:07   7  GROUP BY pair
09:26:07   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19809 1.24182424 1.38284305 2010-10-04 09:30:01 2011-01-07 09:20:00

Elapsed: 00:00:00.05
09:26:07 SQL> 
09:26:07 SQL> -- Prepare for derivation of NTILE based params:
09:26:07 SQL> 
09:26:07 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.42
09:26:07 SQL> CREATE TABLE svm6142 COMPRESS AS
09:26:07   2  SELECT
09:26:07   3  pair
09:26:07   4  ,ydate
09:26:07   5  ,prdate
09:26:07   6  ,clse
09:26:07   7  ,g6
09:26:07   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
09:26:07   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
09:26:07  10  ,CASE WHEN trend IS NULL THEN 1
09:26:07  11  	    WHEN trend =0      THEN 1
09:26:07  12  	    ELSE trend END trend
09:26:07  13  ,cm4
09:26:07  14  ,cm6
09:26:07  15  ,cm8
09:26:07  16  ,cm10
09:26:07  17  ,cm12
09:26:07  18  ,cm14
09:26:07  19  ,cm16
09:26:07  20  ,cm18
09:26:07  21  --
09:26:07  22  ,ca4
09:26:07  23  ,ca6
09:26:07  24  ,ca8
09:26:07  25  ,ca10
09:26:07  26  ,ca12
09:26:07  27  ,ca14
09:26:07  28  ,ca16
09:26:07  29  ,ca18
09:26:07  30  --
09:26:07  31  ,cx4
09:26:07  32  ,cx6
09:26:07  33  ,cx8
09:26:07  34  ,cx10
09:26:07  35  ,cx12
09:26:07  36  ,cx14
09:26:07  37  ,cx16
09:26:07  38  ,cx18
09:26:07  39  --
09:26:07  40  ,crr4
09:26:07  41  ,crr6
09:26:07  42  ,crr8
09:26:07  43  ,crr10
09:26:07  44  ,crr12
09:26:07  45  ,crr14
09:26:07  46  ,crr16
09:26:07  47  ,crr18
09:26:07  48  --
09:26:07  49  ,hh
09:26:07  50  ,d
09:26:07  51  ,w
09:26:07  52  ,mpm
09:26:07  53  ,mph
09:26:07  54  FROM svm6122
09:26:07  55  ORDER BY ydate
09:26:07  56  /

Table created.

Elapsed: 00:00:00.40
09:26:08 SQL> 
09:26:08 SQL> -- rpt
09:26:08 SQL> 
09:26:08 SQL> SELECT
09:26:08   2  pair
09:26:08   3  ,trend
09:26:08   4  ,gatt
09:26:08   5  ,COUNT(pair)
09:26:08   6  ,AVG(g6)
09:26:08   7  FROM svm6142
09:26:08   8  GROUP BY pair,trend,gatt
09:26:08   9  ORDER BY pair,trend,gatt
09:26:08  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6815 -.00228035
ech_usd 	-1 up	      3567 .003580667
ech_usd 	-1		60
ech_usd 	 1 nup	      6450 -.00231133
ech_usd 	 1 up	      2905 .004122708
ech_usd 	 1		12

6 rows selected.

Elapsed: 00:00:00.03
09:26:08 SQL> 
09:26:08 SQL> 
09:26:08 SQL> -- Derive NTILE based params:
09:26:08 SQL> 
09:26:08 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
09:26:08 SQL> CREATE TABLE svm6162 COMPRESS AS
09:26:08   2  SELECT
09:26:08   3  pair
09:26:08   4  ,ydate
09:26:08   5  ,prdate
09:26:08   6  ,clse
09:26:08   7  ,g6
09:26:08   8  ,gatt
09:26:08   9  ,gattn
09:26:08  10  ,trend
09:26:08  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
09:26:08  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
09:26:08  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
09:26:08  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
09:26:08  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
09:26:08  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
09:26:08  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
09:26:08  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
09:26:08  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
09:26:08  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
09:26:08  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
09:26:08  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
09:26:08  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
09:26:08  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
09:26:08  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
09:26:08  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
09:26:08  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
09:26:08  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
09:26:08  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
09:26:08  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
09:26:08  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
09:26:08  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
09:26:08  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
09:26:08  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
09:26:08  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
09:26:08  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
09:26:08  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
09:26:08  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
09:26:08  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
09:26:08  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
09:26:08  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
09:26:08  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
09:26:08  43  ,hh  att32
09:26:08  44  ,d   att33
09:26:08  45  ,w   att34
09:26:08  46  ,mpm att35
09:26:08  47  ,mph att36
09:26:08  48  ,trend att37
09:26:08  49  FROM svm6142
09:26:08  50  ORDER BY ydate
09:26:08  51  /

Table created.

Elapsed: 00:00:04.97
09:26:13 SQL> 
09:26:13 SQL> -- rpt
09:26:13 SQL> 
09:26:13 SQL> SELECT
09:26:13   2  pair
09:26:13   3  ,trend
09:26:13   4  ,gatt
09:26:13   5  ,COUNT(pair)
09:26:13   6  ,AVG(g6)
09:26:13   7  FROM svm6162
09:26:13   8  GROUP BY pair,trend,gatt
09:26:13   9  ORDER BY pair,trend,gatt
09:26:13  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6815 -.00228035
ech_usd 	-1 up	      3567 .003580667
ech_usd 	-1		60
ech_usd 	 1 nup	      6450 -.00231133
ech_usd 	 1 up	      2905 .004122708
ech_usd 	 1		12

6 rows selected.

Elapsed: 00:00:00.03
09:26:13 SQL> 
09:26:13 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.14
09:26:13 SQL> CREATE TABLE modsrc COMPRESS AS
09:26:13   2  SELECT
09:26:13   3  pair
09:26:13   4  ,ydate
09:26:13   5  ,prdate
09:26:13   6  ,trend
09:26:13   7  ,g6
09:26:13   8  ,gatt
09:26:13   9  ,gattn
09:26:13  10  FROM svm6162
09:26:13  11  /

Table created.

Elapsed: 00:00:00.09
09:26:13 SQL> 
09:26:13 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.30
09:26:14 SQL> 
09:26:14 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
09:26:14 SQL> CREATE TABLE ech_ms610 COMPRESS AS
09:26:14   2  SELECT
09:26:14   3  ydate
09:26:14   4  ,trend ech_trend
09:26:14   5  ,g6    ech_g6
09:26:14   6  ,gatt  ech_gatt
09:26:14   7  ,gattn ech_gattn
09:26:14   8  FROM modsrc
09:26:14   9  /

Table created.

Elapsed: 00:00:00.07
09:26:14 SQL> 
09:26:14 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
09:26:14 SQL> 
09:26:14 SQL> -- I need a copy of the attributes:
09:26:14 SQL> 
09:26:14 SQL> 
09:26:14 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.04
09:26:14 SQL> CREATE TABLE ech_att COMPRESS AS
09:26:14   2  SELECT
09:26:14   3  ydate
09:26:14   4  ,att00 ech_att00
09:26:14   5  ,att01 ech_att01
09:26:14   6  ,att02 ech_att02
09:26:14   7  ,att03 ech_att03
09:26:14   8  ,att04 ech_att04
09:26:14   9  ,att05 ech_att05
09:26:14  10  ,att06 ech_att06
09:26:14  11  ,att07 ech_att07
09:26:14  12  ,att08 ech_att08
09:26:14  13  ,att09 ech_att09
09:26:14  14  ,att10 ech_att10
09:26:14  15  ,att11 ech_att11
09:26:14  16  ,att12 ech_att12
09:26:14  17  ,att13 ech_att13
09:26:14  18  ,att14 ech_att14
09:26:14  19  ,att15 ech_att15
09:26:14  20  ,att16 ech_att16
09:26:14  21  ,att17 ech_att17
09:26:14  22  ,att18 ech_att18
09:26:14  23  ,att19 ech_att19
09:26:14  24  ,att20 ech_att20
09:26:14  25  ,att21 ech_att21
09:26:14  26  ,att22 ech_att22
09:26:14  27  ,att23 ech_att23
09:26:14  28  ,att24 ech_att24
09:26:14  29  ,att25 ech_att25
09:26:14  30  ,att26 ech_att26
09:26:14  31  ,att27 ech_att27
09:26:14  32  ,att28 ech_att28
09:26:14  33  ,att29 ech_att29
09:26:14  34  ,att30 ech_att30
09:26:14  35  ,att31 ech_att31
09:26:14  36  ,att32 ech_att32
09:26:14  37  ,att33 ech_att33
09:26:14  38  ,att34 ech_att34
09:26:14  39  ,att35 ech_att35
09:26:14  40  ,att36 ech_att36
09:26:14  41  ,att37 ech_att37
09:26:14  42  FROM svm6162
09:26:14  43  /

Table created.

Elapsed: 00:00:00.18
09:26:14 SQL> 
09:26:14 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
09:26:15 SQL> 
09:26:15 SQL> -- rpt
09:26:15 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.83
09:26:15 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.00
09:26:15 SQL> 
09:26:15 SQL> --
09:26:15 SQL> -- egb610.sql
09:26:15 SQL> --
09:26:15 SQL> 
09:26:15 SQL> -- Creates views and tables for backtesting a forex SVM strategy
09:26:15 SQL> 
09:26:15 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.48
09:26:16 SQL> 
09:26:16 SQL> -- I created di5min here:
09:26:16 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
09:26:16 SQL> 
09:26:16 SQL> CREATE OR REPLACE VIEW svm6102 AS
09:26:16   2  SELECT
09:26:16   3  pair
09:26:16   4  ,ydate
09:26:16   5  ,prdate
09:26:16   6  ,rownum rnum -- acts as t in my time-series
09:26:16   7  ,clse
09:26:16   8  -- Derive a bunch of attributes from clse, the latest price:
09:26:16   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
09:26:16  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
09:26:16  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
09:26:16  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
09:26:16  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
09:26:16  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
09:26:16  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
09:26:16  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
09:26:16  17  --
09:26:16  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
09:26:16  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
09:26:16  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
09:26:16  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
09:26:16  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
09:26:16  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
09:26:16  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
09:26:16  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
09:26:16  26  --
09:26:16  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
09:26:16  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
09:26:16  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
09:26:16  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
09:26:16  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
09:26:16  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
09:26:16  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
09:26:16  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
09:26:16  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
09:26:16  36  FROM di5min WHERE pair LIKE'%egb%'
09:26:16  37  AND ydate > sysdate - 95
09:26:16  38  ORDER BY ydate
09:26:16  39  /

View created.

Elapsed: 00:00:00.05
09:26:16 SQL> 
09:26:16 SQL> -- rpt
09:26:16 SQL> 
09:26:16 SQL> SELECT
09:26:16   2  pair
09:26:16   3  ,COUNT(pair)
09:26:16   4  ,MIN(clse),MAX(clse)
09:26:16   5  ,MIN(avg6),MAX(avg6)
09:26:16   6  ,MIN(ydate),MAX(ydate)
09:26:16   7  FROM svm6102
09:26:16   8  GROUP BY pair
09:26:16   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19808 .833520557 .893920122 .834199029 .892400287 2010-10-04 09:30:01 2011-01-07 09:20:00

Elapsed: 00:00:00.97
09:26:17 SQL> 
09:26:17 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
09:26:17 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.20
09:26:17 SQL> CREATE TABLE svm6122 COMPRESS AS
09:26:17   2  SELECT
09:26:17   3  pair
09:26:17   4  ,ydate
09:26:17   5  ,prdate
09:26:17   6  ,clse
09:26:17   7  -- g6 is important. I want to predict g6:
09:26:17   8  ,ld6 - clse g6
09:26:17   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
09:26:17  10  -- I want more attributes from the ones I derived above:
09:26:17  11  -- clse relation to moving-min
09:26:17  12  ,clse-min4  cm4
09:26:17  13  ,clse-min6  cm6
09:26:17  14  ,clse-min8  cm8
09:26:17  15  ,clse-min10 cm10
09:26:17  16  ,clse-min12 cm12
09:26:17  17  ,clse-min14 cm14
09:26:17  18  ,clse-min16 cm16
09:26:17  19  ,clse-min18 cm18
09:26:17  20  -- clse relation to moving-avg
09:26:17  21  ,clse-avg4  ca4
09:26:17  22  ,clse-avg6  ca6
09:26:17  23  ,clse-avg8  ca8
09:26:17  24  ,clse-avg10 ca10
09:26:17  25  ,clse-avg12 ca12
09:26:17  26  ,clse-avg14 ca14
09:26:17  27  ,clse-avg16 ca16
09:26:17  28  ,clse-avg18 ca18
09:26:17  29  -- clse relation to moving-max
09:26:17  30  ,clse-max4  cx4
09:26:17  31  ,clse-max6  cx6
09:26:17  32  ,clse-max8  cx8
09:26:17  33  ,clse-max10 cx10
09:26:17  34  ,clse-max12 cx12
09:26:17  35  ,clse-max14 cx14
09:26:17  36  ,clse-max16 cx16
09:26:17  37  ,clse-max18 cx18
09:26:17  38  -- Derive more attributes.
09:26:17  39  -- I want to use CORR() here to help SVM see the shape of the series.
09:26:17  40  -- But COVAR_POP is more stable:
09:26:17  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
09:26:17  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
09:26:17  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
09:26:17  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
09:26:17  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
09:26:17  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
09:26:17  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
09:26:17  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
09:26:17  49  -- Derive date related attributes:
09:26:17  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
09:26:17  51  ,0+TO_CHAR(ydate,'D')d
09:26:17  52  ,0+TO_CHAR(ydate,'W')w
09:26:17  53  -- mpm stands for minutes-past-midnight:
09:26:17  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
09:26:17  55  -- mph stands for minutes-past-hour:
09:26:17  56  ,0+TO_CHAR(ydate,'MI')mph
09:26:17  57  FROM svm6102
09:26:17  58  ORDER BY ydate
09:26:17  59  /

Table created.

Elapsed: 00:00:02.64
09:26:20 SQL> 
09:26:20 SQL> -- rpt
09:26:20 SQL> 
09:26:20 SQL> SELECT
09:26:20   2  pair
09:26:20   3  ,COUNT(pair)
09:26:20   4  ,MIN(clse),MAX(clse)
09:26:20   5  ,MIN(ydate),MAX(ydate)
09:26:20   6  FROM svm6122
09:26:20   7  GROUP BY pair
09:26:20   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19808 .833520557 .893920122 2010-10-04 09:30:01 2011-01-07 09:20:00

Elapsed: 00:00:00.04
09:26:20 SQL> 
09:26:20 SQL> -- Prepare for derivation of NTILE based params:
09:26:20 SQL> 
09:26:20 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.27
09:26:20 SQL> CREATE TABLE svm6142 COMPRESS AS
09:26:20   2  SELECT
09:26:20   3  pair
09:26:20   4  ,ydate
09:26:20   5  ,prdate
09:26:20   6  ,clse
09:26:20   7  ,g6
09:26:20   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
09:26:20   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
09:26:20  10  ,CASE WHEN trend IS NULL THEN 1
09:26:20  11  	    WHEN trend =0      THEN 1
09:26:20  12  	    ELSE trend END trend
09:26:20  13  ,cm4
09:26:20  14  ,cm6
09:26:20  15  ,cm8
09:26:20  16  ,cm10
09:26:20  17  ,cm12
09:26:20  18  ,cm14
09:26:20  19  ,cm16
09:26:20  20  ,cm18
09:26:20  21  --
09:26:20  22  ,ca4
09:26:20  23  ,ca6
09:26:20  24  ,ca8
09:26:20  25  ,ca10
09:26:20  26  ,ca12
09:26:20  27  ,ca14
09:26:20  28  ,ca16
09:26:20  29  ,ca18
09:26:20  30  --
09:26:20  31  ,cx4
09:26:20  32  ,cx6
09:26:20  33  ,cx8
09:26:20  34  ,cx10
09:26:20  35  ,cx12
09:26:20  36  ,cx14
09:26:20  37  ,cx16
09:26:20  38  ,cx18
09:26:20  39  --
09:26:20  40  ,crr4
09:26:20  41  ,crr6
09:26:20  42  ,crr8
09:26:20  43  ,crr10
09:26:20  44  ,crr12
09:26:20  45  ,crr14
09:26:20  46  ,crr16
09:26:20  47  ,crr18
09:26:20  48  --
09:26:20  49  ,hh
09:26:20  50  ,d
09:26:20  51  ,w
09:26:20  52  ,mpm
09:26:20  53  ,mph
09:26:20  54  FROM svm6122
09:26:20  55  ORDER BY ydate
09:26:20  56  /

Table created.

Elapsed: 00:00:00.45
09:26:20 SQL> 
09:26:20 SQL> -- rpt
09:26:20 SQL> 
09:26:20 SQL> SELECT
09:26:20   2  pair
09:26:20   3  ,trend
09:26:20   4  ,gatt
09:26:20   5  ,COUNT(pair)
09:26:20   6  ,AVG(g6)
09:26:20   7  FROM svm6142
09:26:20   8  GROUP BY pair,trend,gatt
09:26:20   9  ORDER BY pair,trend,gatt
09:26:20  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7955 -.00103285
egb_usd 	-1 up	      2634 .002928824
egb_usd 	-1		20
egb_usd 	 1 nup	      6528 -.00136217
egb_usd 	 1 up	      2619 .002926948
egb_usd 	 1		52

6 rows selected.

Elapsed: 00:00:00.05
09:26:20 SQL> 
09:26:20 SQL> 
09:26:20 SQL> -- Derive NTILE based params:
09:26:20 SQL> 
09:26:20 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.24
09:26:21 SQL> CREATE TABLE svm6162 COMPRESS AS
09:26:21   2  SELECT
09:26:21   3  pair
09:26:21   4  ,ydate
09:26:21   5  ,prdate
09:26:21   6  ,clse
09:26:21   7  ,g6
09:26:21   8  ,gatt
09:26:21   9  ,gattn
09:26:21  10  ,trend
09:26:21  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
09:26:21  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
09:26:21  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
09:26:21  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
09:26:21  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
09:26:21  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
09:26:21  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
09:26:21  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
09:26:21  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
09:26:21  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
09:26:21  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
09:26:21  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
09:26:21  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
09:26:21  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
09:26:21  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
09:26:21  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
09:26:21  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
09:26:21  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
09:26:21  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
09:26:21  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
09:26:21  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
09:26:21  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
09:26:21  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
09:26:21  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
09:26:21  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
09:26:21  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
09:26:21  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
09:26:21  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
09:26:21  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
09:26:21  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
09:26:21  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
09:26:21  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
09:26:21  43  ,hh  att32
09:26:21  44  ,d   att33
09:26:21  45  ,w   att34
09:26:21  46  ,mpm att35
09:26:21  47  ,mph att36
09:26:21  48  ,trend att37
09:26:21  49  FROM svm6142
09:26:21  50  ORDER BY ydate
09:26:21  51  /

Table created.

Elapsed: 00:00:05.61
09:26:26 SQL> 
09:26:26 SQL> -- rpt
09:26:26 SQL> 
09:26:26 SQL> SELECT
09:26:26   2  pair
09:26:26   3  ,trend
09:26:26   4  ,gatt
09:26:26   5  ,COUNT(pair)
09:26:26   6  ,AVG(g6)
09:26:26   7  FROM svm6162
09:26:26   8  GROUP BY pair,trend,gatt
09:26:26   9  ORDER BY pair,trend,gatt
09:26:26  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7955 -.00103285
egb_usd 	-1 up	      2634 .002928824
egb_usd 	-1		20
egb_usd 	 1 nup	      6528 -.00136217
egb_usd 	 1 up	      2619 .002926948
egb_usd 	 1		52

6 rows selected.

Elapsed: 00:00:00.04
09:26:26 SQL> 
09:26:26 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.27
09:26:27 SQL> CREATE TABLE modsrc COMPRESS AS
09:26:27   2  SELECT
09:26:27   3  pair
09:26:27   4  ,ydate
09:26:27   5  ,prdate
09:26:27   6  ,trend
09:26:27   7  ,g6
09:26:27   8  ,gatt
09:26:27   9  ,gattn
09:26:27  10  FROM svm6162
09:26:27  11  /

Table created.

Elapsed: 00:00:00.09
09:26:27 SQL> 
09:26:27 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
09:26:27 SQL> 
09:26:27 SQL> DROP   TABLE egb_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
09:26:27 SQL> CREATE TABLE egb_ms610 COMPRESS AS
09:26:27   2  SELECT
09:26:27   3  ydate
09:26:27   4  ,trend egb_trend
09:26:27   5  ,g6    egb_g6
09:26:27   6  ,gatt  egb_gatt
09:26:27   7  ,gattn egb_gattn
09:26:27   8  FROM modsrc
09:26:27   9  /

Table created.

Elapsed: 00:00:00.08
09:26:27 SQL> 
09:26:27 SQL> ANALYZE TABLE egb_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
09:26:27 SQL> 
09:26:27 SQL> -- I need a copy of the attributes:
09:26:27 SQL> 
09:26:27 SQL> 
09:26:27 SQL> DROP   TABLE egb_att;

Table dropped.

Elapsed: 00:00:00.06
09:26:27 SQL> CREATE TABLE egb_att COMPRESS AS
09:26:27   2  SELECT
09:26:27   3  ydate
09:26:27   4  ,att00 egb_att00
09:26:27   5  ,att01 egb_att01
09:26:27   6  ,att02 egb_att02
09:26:27   7  ,att03 egb_att03
09:26:27   8  ,att04 egb_att04
09:26:27   9  ,att05 egb_att05
09:26:27  10  ,att06 egb_att06
09:26:27  11  ,att07 egb_att07
09:26:27  12  ,att08 egb_att08
09:26:27  13  ,att09 egb_att09
09:26:27  14  ,att10 egb_att10
09:26:27  15  ,att11 egb_att11
09:26:27  16  ,att12 egb_att12
09:26:27  17  ,att13 egb_att13
09:26:27  18  ,att14 egb_att14
09:26:27  19  ,att15 egb_att15
09:26:27  20  ,att16 egb_att16
09:26:27  21  ,att17 egb_att17
09:26:27  22  ,att18 egb_att18
09:26:27  23  ,att19 egb_att19
09:26:27  24  ,att20 egb_att20
09:26:27  25  ,att21 egb_att21
09:26:27  26  ,att22 egb_att22
09:26:27  27  ,att23 egb_att23
09:26:27  28  ,att24 egb_att24
09:26:27  29  ,att25 egb_att25
09:26:27  30  ,att26 egb_att26
09:26:27  31  ,att27 egb_att27
09:26:27  32  ,att28 egb_att28
09:26:27  33  ,att29 egb_att29
09:26:27  34  ,att30 egb_att30
09:26:27  35  ,att31 egb_att31
09:26:27  36  ,att32 egb_att32
09:26:27  37  ,att33 egb_att33
09:26:27  38  ,att34 egb_att34
09:26:27  39  ,att35 egb_att35
09:26:27  40  ,att36 egb_att36
09:26:27  41  ,att37 egb_att37
09:26:27  42  FROM svm6162
09:26:27  43  /

Table created.

Elapsed: 00:00:00.19
09:26:28 SQL> 
09:26:28 SQL> ANALYZE TABLE egb_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.50
09:26:28 SQL> 
09:26:28 SQL> -- rpt
09:26:28 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.97
09:26:29 SQL> SELECT COUNT(*)FROM egb_att;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.00
09:26:29 SQL> 
09:26:29 SQL> --
09:26:29 SQL> -- ejp610.sql
09:26:29 SQL> --
09:26:29 SQL> 
09:26:29 SQL> -- Creates views and tables for backtesting a forex SVM strategy
09:26:29 SQL> 
09:26:29 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.56
09:26:30 SQL> 
09:26:30 SQL> -- I created di5min here:
09:26:30 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
09:26:30 SQL> 
09:26:30 SQL> CREATE OR REPLACE VIEW svm6102 AS
09:26:30   2  SELECT
09:26:30   3  pair
09:26:30   4  ,ydate
09:26:30   5  ,prdate
09:26:30   6  ,rownum rnum -- acts as t in my time-series
09:26:30   7  ,clse
09:26:30   8  -- Derive a bunch of attributes from clse, the latest price:
09:26:30   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
09:26:30  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
09:26:30  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
09:26:30  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
09:26:30  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
09:26:30  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
09:26:30  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
09:26:30  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
09:26:30  17  --
09:26:30  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
09:26:30  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
09:26:30  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
09:26:30  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
09:26:30  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
09:26:30  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
09:26:30  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
09:26:30  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
09:26:30  26  --
09:26:30  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
09:26:30  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
09:26:30  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
09:26:30  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
09:26:30  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
09:26:30  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
09:26:30  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
09:26:30  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
09:26:30  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
09:26:30  36  FROM di5min WHERE pair LIKE'%ejp%'
09:26:30  37  AND ydate > sysdate - 95
09:26:30  38  ORDER BY ydate
09:26:30  39  /

View created.

Elapsed: 00:00:00.04
09:26:30 SQL> 
09:26:30 SQL> -- rpt
09:26:30 SQL> 
09:26:30 SQL> SELECT
09:26:30   2  pair
09:26:30   3  ,COUNT(pair)
09:26:30   4  ,MIN(clse),MAX(clse)
09:26:30   5  ,MIN(avg6),MAX(avg6)
09:26:30   6  ,MIN(ydate),MAX(ydate)
09:26:30   7  FROM svm6102
09:26:30   8  GROUP BY pair
09:26:30   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ejp_usd       19806 107.643765	115.63485 107.776148 115.509678 2010-10-04 09:30:01 2011-01-07 09:20:00

Elapsed: 00:00:00.89
09:26:31 SQL> 
09:26:31 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
09:26:31 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.74
09:26:31 SQL> CREATE TABLE svm6122 COMPRESS AS
09:26:31   2  SELECT
09:26:31   3  pair
09:26:31   4  ,ydate
09:26:31   5  ,prdate
09:26:31   6  ,clse
09:26:31   7  -- g6 is important. I want to predict g6:
09:26:31   8  ,ld6 - clse g6
09:26:31   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
09:26:31  10  -- I want more attributes from the ones I derived above:
09:26:31  11  -- clse relation to moving-min
09:26:31  12  ,clse-min4  cm4
09:26:31  13  ,clse-min6  cm6
09:26:31  14  ,clse-min8  cm8
09:26:31  15  ,clse-min10 cm10
09:26:31  16  ,clse-min12 cm12
09:26:31  17  ,clse-min14 cm14
09:26:31  18  ,clse-min16 cm16
09:26:31  19  ,clse-min18 cm18
09:26:31  20  -- clse relation to moving-avg
09:26:31  21  ,clse-avg4  ca4
09:26:31  22  ,clse-avg6  ca6
09:26:31  23  ,clse-avg8  ca8
09:26:31  24  ,clse-avg10 ca10
09:26:31  25  ,clse-avg12 ca12
09:26:31  26  ,clse-avg14 ca14
09:26:31  27  ,clse-avg16 ca16
09:26:31  28  ,clse-avg18 ca18
09:26:31  29  -- clse relation to moving-max
09:26:31  30  ,clse-max4  cx4
09:26:31  31  ,clse-max6  cx6
09:26:31  32  ,clse-max8  cx8
09:26:31  33  ,clse-max10 cx10
09:26:31  34  ,clse-max12 cx12
09:26:31  35  ,clse-max14 cx14
09:26:31  36  ,clse-max16 cx16
09:26:31  37  ,clse-max18 cx18
09:26:31  38  -- Derive more attributes.
09:26:31  39  -- I want to use CORR() here to help SVM see the shape of the series.
09:26:31  40  -- But COVAR_POP is more stable:
09:26:31  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
09:26:31  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
09:26:31  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
09:26:31  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
09:26:31  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
09:26:31  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
09:26:31  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
09:26:31  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
09:26:31  49  -- Derive date related attributes:
09:26:31  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
09:26:31  51  ,0+TO_CHAR(ydate,'D')d
09:26:31  52  ,0+TO_CHAR(ydate,'W')w
09:26:31  53  -- mpm stands for minutes-past-midnight:
09:26:31  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
09:26:31  55  -- mph stands for minutes-past-hour:
09:26:31  56  ,0+TO_CHAR(ydate,'MI')mph
09:26:31  57  FROM svm6102
09:26:31  58  ORDER BY ydate
09:26:31  59  /

Table created.

Elapsed: 00:00:02.19
09:26:33 SQL> 
09:26:33 SQL> -- rpt
09:26:33 SQL> 
09:26:33 SQL> SELECT
09:26:33   2  pair
09:26:33   3  ,COUNT(pair)
09:26:33   4  ,MIN(clse),MAX(clse)
09:26:33   5  ,MIN(ydate),MAX(ydate)
09:26:33   6  FROM svm6122
09:26:33   7  GROUP BY pair
09:26:33   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ejp_usd       19806 107.643765	115.63485 2010-10-04 09:30:01 2011-01-07 09:20:00

Elapsed: 00:00:00.04
09:26:34 SQL> 
09:26:34 SQL> -- Prepare for derivation of NTILE based params:
09:26:34 SQL> 
09:26:34 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
09:26:34 SQL> CREATE TABLE svm6142 COMPRESS AS
09:26:34   2  SELECT
09:26:34   3  pair
09:26:34   4  ,ydate
09:26:34   5  ,prdate
09:26:34   6  ,clse
09:26:34   7  ,g6
09:26:34   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
09:26:34   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
09:26:34  10  ,CASE WHEN trend IS NULL THEN 1
09:26:34  11  	    WHEN trend =0      THEN 1
09:26:34  12  	    ELSE trend END trend
09:26:34  13  ,cm4
09:26:34  14  ,cm6
09:26:34  15  ,cm8
09:26:34  16  ,cm10
09:26:34  17  ,cm12
09:26:34  18  ,cm14
09:26:34  19  ,cm16
09:26:34  20  ,cm18
09:26:34  21  --
09:26:34  22  ,ca4
09:26:34  23  ,ca6
09:26:34  24  ,ca8
09:26:34  25  ,ca10
09:26:34  26  ,ca12
09:26:34  27  ,ca14
09:26:34  28  ,ca16
09:26:34  29  ,ca18
09:26:34  30  --
09:26:34  31  ,cx4
09:26:34  32  ,cx6
09:26:34  33  ,cx8
09:26:34  34  ,cx10
09:26:34  35  ,cx12
09:26:34  36  ,cx14
09:26:34  37  ,cx16
09:26:34  38  ,cx18
09:26:34  39  --
09:26:34  40  ,crr4
09:26:34  41  ,crr6
09:26:34  42  ,crr8
09:26:34  43  ,crr10
09:26:34  44  ,crr12
09:26:34  45  ,crr14
09:26:34  46  ,crr16
09:26:34  47  ,crr18
09:26:34  48  --
09:26:34  49  ,hh
09:26:34  50  ,d
09:26:34  51  ,w
09:26:34  52  ,mpm
09:26:34  53  ,mph
09:26:34  54  FROM svm6122
09:26:34  55  ORDER BY ydate
09:26:34  56  /

Table created.

Elapsed: 00:00:00.40
09:26:34 SQL> 
09:26:34 SQL> -- rpt
09:26:34 SQL> 
09:26:34 SQL> SELECT
09:26:34   2  pair
09:26:34   3  ,trend
09:26:34   4  ,gatt
09:26:34   5  ,COUNT(pair)
09:26:34   6  ,AVG(g6)
09:26:34   7  FROM svm6142
09:26:34   8  GROUP BY pair,trend,gatt
09:26:34   9  ORDER BY pair,trend,gatt
09:26:34  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      5190 -.32175442
ejp_usd 	-1 up	      4927 .277716975
ejp_usd 	-1		11
ejp_usd 	 1 nup	      4965 -.29092058
ejp_usd 	 1 up	      4652 .287382987
ejp_usd 	 1		61

6 rows selected.

Elapsed: 00:00:00.04
09:26:34 SQL> 
09:26:34 SQL> 
09:26:34 SQL> -- Derive NTILE based params:
09:26:34 SQL> 
09:26:34 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.17
09:26:34 SQL> CREATE TABLE svm6162 COMPRESS AS
09:26:34   2  SELECT
09:26:34   3  pair
09:26:34   4  ,ydate
09:26:34   5  ,prdate
09:26:34   6  ,clse
09:26:34   7  ,g6
09:26:34   8  ,gatt
09:26:34   9  ,gattn
09:26:34  10  ,trend
09:26:34  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
09:26:34  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
09:26:34  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
09:26:34  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
09:26:34  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
09:26:34  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
09:26:34  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
09:26:34  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
09:26:34  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
09:26:34  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
09:26:34  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
09:26:34  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
09:26:34  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
09:26:34  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
09:26:34  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
09:26:34  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
09:26:34  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
09:26:34  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
09:26:34  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
09:26:34  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
09:26:34  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
09:26:34  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
09:26:34  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
09:26:34  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
09:26:34  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
09:26:34  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
09:26:34  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
09:26:34  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
09:26:34  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
09:26:34  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
09:26:34  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
09:26:34  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
09:26:34  43  ,hh  att32
09:26:34  44  ,d   att33
09:26:34  45  ,w   att34
09:26:34  46  ,mpm att35
09:26:34  47  ,mph att36
09:26:34  48  ,trend att37
09:26:34  49  FROM svm6142
09:26:34  50  ORDER BY ydate
09:26:34  51  /

Table created.

Elapsed: 00:00:04.92
09:26:39 SQL> 
09:26:39 SQL> -- rpt
09:26:39 SQL> 
09:26:39 SQL> SELECT
09:26:39   2  pair
09:26:39   3  ,trend
09:26:39   4  ,gatt
09:26:39   5  ,COUNT(pair)
09:26:39   6  ,AVG(g6)
09:26:39   7  FROM svm6162
09:26:39   8  GROUP BY pair,trend,gatt
09:26:39   9  ORDER BY pair,trend,gatt
09:26:39  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      5190 -.32175442
ejp_usd 	-1 up	      4927 .277716975
ejp_usd 	-1		11
ejp_usd 	 1 nup	      4965 -.29092058
ejp_usd 	 1 up	      4652 .287382987
ejp_usd 	 1		61

6 rows selected.

Elapsed: 00:00:00.03
09:26:39 SQL> 
09:26:39 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
09:26:39 SQL> CREATE TABLE modsrc COMPRESS AS
09:26:39   2  SELECT
09:26:39   3  pair
09:26:39   4  ,ydate
09:26:39   5  ,prdate
09:26:39   6  ,trend
09:26:39   7  ,g6
09:26:39   8  ,gatt
09:26:39   9  ,gattn
09:26:39  10  FROM svm6162
09:26:39  11  /

Table created.

Elapsed: 00:00:00.09
09:26:40 SQL> 
09:26:40 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
09:26:40 SQL> 
09:26:40 SQL> DROP   TABLE ejp_ms610 ;

Table dropped.

Elapsed: 00:00:00.08
09:26:40 SQL> CREATE TABLE ejp_ms610 COMPRESS AS
09:26:40   2  SELECT
09:26:40   3  ydate
09:26:40   4  ,trend ejp_trend
09:26:40   5  ,g6    ejp_g6
09:26:40   6  ,gatt  ejp_gatt
09:26:40   7  ,gattn ejp_gattn
09:26:40   8  FROM modsrc
09:26:40   9  /

Table created.

Elapsed: 00:00:00.07
09:26:40 SQL> 
09:26:40 SQL> ANALYZE TABLE ejp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
09:26:40 SQL> 
09:26:40 SQL> -- I need a copy of the attributes:
09:26:40 SQL> 
09:26:40 SQL> 
09:26:40 SQL> DROP   TABLE ejp_att;

Table dropped.

Elapsed: 00:00:00.04
09:26:40 SQL> CREATE TABLE ejp_att COMPRESS AS
09:26:40   2  SELECT
09:26:40   3  ydate
09:26:40   4  ,att00 ejp_att00
09:26:40   5  ,att01 ejp_att01
09:26:40   6  ,att02 ejp_att02
09:26:40   7  ,att03 ejp_att03
09:26:40   8  ,att04 ejp_att04
09:26:40   9  ,att05 ejp_att05
09:26:40  10  ,att06 ejp_att06
09:26:40  11  ,att07 ejp_att07
09:26:40  12  ,att08 ejp_att08
09:26:40  13  ,att09 ejp_att09
09:26:40  14  ,att10 ejp_att10
09:26:40  15  ,att11 ejp_att11
09:26:40  16  ,att12 ejp_att12
09:26:40  17  ,att13 ejp_att13
09:26:40  18  ,att14 ejp_att14
09:26:40  19  ,att15 ejp_att15
09:26:40  20  ,att16 ejp_att16
09:26:40  21  ,att17 ejp_att17
09:26:40  22  ,att18 ejp_att18
09:26:40  23  ,att19 ejp_att19
09:26:40  24  ,att20 ejp_att20
09:26:40  25  ,att21 ejp_att21
09:26:40  26  ,att22 ejp_att22
09:26:40  27  ,att23 ejp_att23
09:26:40  28  ,att24 ejp_att24
09:26:40  29  ,att25 ejp_att25
09:26:40  30  ,att26 ejp_att26
09:26:40  31  ,att27 ejp_att27
09:26:40  32  ,att28 ejp_att28
09:26:40  33  ,att29 ejp_att29
09:26:40  34  ,att30 ejp_att30
09:26:40  35  ,att31 ejp_att31
09:26:40  36  ,att32 ejp_att32
09:26:40  37  ,att33 ejp_att33
09:26:40  38  ,att34 ejp_att34
09:26:40  39  ,att35 ejp_att35
09:26:40  40  ,att36 ejp_att36
09:26:40  41  ,att37 ejp_att37
09:26:40  42  FROM svm6162
09:26:40  43  /

Table created.

Elapsed: 00:00:00.17
09:26:40 SQL> 
09:26:40 SQL> ANALYZE TABLE ejp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
09:26:41 SQL> 
09:26:41 SQL> -- rpt
09:26:41 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19806

Elapsed: 00:00:00.86
09:26:42 SQL> SELECT COUNT(*)FROM ejp_att;

  COUNT(*)
----------
     19806

Elapsed: 00:00:00.00
09:26:42 SQL> 
09:26:42 SQL> --
09:26:42 SQL> -- ajp610.sql
09:26:42 SQL> --
09:26:42 SQL> 
09:26:42 SQL> -- Creates views and tables for backtesting a forex SVM strategy
09:26:42 SQL> 
09:26:42 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.37
09:26:42 SQL> 
09:26:42 SQL> -- I created di5min here:
09:26:42 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
09:26:42 SQL> 
09:26:42 SQL> CREATE OR REPLACE VIEW svm6102 AS
09:26:42   2  SELECT
09:26:42   3  pair
09:26:42   4  ,ydate
09:26:42   5  ,prdate
09:26:42   6  ,rownum rnum -- acts as t in my time-series
09:26:42   7  ,clse
09:26:42   8  -- Derive a bunch of attributes from clse, the latest price:
09:26:42   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
09:26:42  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
09:26:42  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
09:26:42  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
09:26:42  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
09:26:42  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
09:26:42  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
09:26:42  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
09:26:42  17  --
09:26:42  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
09:26:42  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
09:26:42  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
09:26:42  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
09:26:42  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
09:26:42  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
09:26:42  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
09:26:42  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
09:26:42  26  --
09:26:42  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
09:26:42  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
09:26:42  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
09:26:42  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
09:26:42  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
09:26:42  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
09:26:42  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
09:26:42  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
09:26:42  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
09:26:42  36  FROM di5min WHERE pair LIKE'%ajp%'
09:26:42  37  AND ydate > sysdate - 95
09:26:42  38  ORDER BY ydate
09:26:42  39  /

View created.

Elapsed: 00:00:00.04
09:26:42 SQL> 
09:26:42 SQL> -- rpt
09:26:42 SQL> 
09:26:42 SQL> SELECT
09:26:42   2  pair
09:26:42   3  ,COUNT(pair)
09:26:42   4  ,MIN(clse),MAX(clse)
09:26:42   5  ,MIN(avg6),MAX(avg6)
09:26:42   6  ,MIN(ydate),MAX(ydate)
09:26:42   7  FROM svm6102
09:26:42   8  GROUP BY pair
09:26:42   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ajp_usd       19803  78.249976 83.6669853 78.5106193  83.546306 2010-10-04 09:30:01 2011-01-07 09:20:00

Elapsed: 00:00:00.78
09:26:43 SQL> 
09:26:43 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
09:26:43 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.22
09:26:43 SQL> CREATE TABLE svm6122 COMPRESS AS
09:26:43   2  SELECT
09:26:43   3  pair
09:26:43   4  ,ydate
09:26:43   5  ,prdate
09:26:43   6  ,clse
09:26:43   7  -- g6 is important. I want to predict g6:
09:26:43   8  ,ld6 - clse g6
09:26:43   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
09:26:43  10  -- I want more attributes from the ones I derived above:
09:26:43  11  -- clse relation to moving-min
09:26:43  12  ,clse-min4  cm4
09:26:43  13  ,clse-min6  cm6
09:26:43  14  ,clse-min8  cm8
09:26:43  15  ,clse-min10 cm10
09:26:43  16  ,clse-min12 cm12
09:26:43  17  ,clse-min14 cm14
09:26:43  18  ,clse-min16 cm16
09:26:43  19  ,clse-min18 cm18
09:26:43  20  -- clse relation to moving-avg
09:26:43  21  ,clse-avg4  ca4
09:26:43  22  ,clse-avg6  ca6
09:26:43  23  ,clse-avg8  ca8
09:26:43  24  ,clse-avg10 ca10
09:26:43  25  ,clse-avg12 ca12
09:26:43  26  ,clse-avg14 ca14
09:26:43  27  ,clse-avg16 ca16
09:26:43  28  ,clse-avg18 ca18
09:26:43  29  -- clse relation to moving-max
09:26:43  30  ,clse-max4  cx4
09:26:43  31  ,clse-max6  cx6
09:26:43  32  ,clse-max8  cx8
09:26:43  33  ,clse-max10 cx10
09:26:43  34  ,clse-max12 cx12
09:26:43  35  ,clse-max14 cx14
09:26:43  36  ,clse-max16 cx16
09:26:43  37  ,clse-max18 cx18
09:26:43  38  -- Derive more attributes.
09:26:43  39  -- I want to use CORR() here to help SVM see the shape of the series.
09:26:43  40  -- But COVAR_POP is more stable:
09:26:43  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
09:26:43  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
09:26:43  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
09:26:43  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
09:26:43  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
09:26:43  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
09:26:43  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
09:26:43  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
09:26:43  49  -- Derive date related attributes:
09:26:43  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
09:26:43  51  ,0+TO_CHAR(ydate,'D')d
09:26:43  52  ,0+TO_CHAR(ydate,'W')w
09:26:43  53  -- mpm stands for minutes-past-midnight:
09:26:43  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
09:26:43  55  -- mph stands for minutes-past-hour:
09:26:43  56  ,0+TO_CHAR(ydate,'MI')mph
09:26:43  57  FROM svm6102
09:26:43  58  ORDER BY ydate
09:26:43  59  /

Table created.

Elapsed: 00:00:02.03
09:26:45 SQL> 
09:26:45 SQL> -- rpt
09:26:45 SQL> 
09:26:45 SQL> SELECT
09:26:45   2  pair
09:26:45   3  ,COUNT(pair)
09:26:45   4  ,MIN(clse),MAX(clse)
09:26:45   5  ,MIN(ydate),MAX(ydate)
09:26:45   6  FROM svm6122
09:26:45   7  GROUP BY pair
09:26:45   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ajp_usd       19803  78.249976 83.6669853 2010-10-04 09:30:01 2011-01-07 09:20:00

Elapsed: 00:00:00.04
09:26:45 SQL> 
09:26:45 SQL> -- Prepare for derivation of NTILE based params:
09:26:45 SQL> 
09:26:45 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.24
09:26:45 SQL> CREATE TABLE svm6142 COMPRESS AS
09:26:45   2  SELECT
09:26:45   3  pair
09:26:45   4  ,ydate
09:26:45   5  ,prdate
09:26:45   6  ,clse
09:26:45   7  ,g6
09:26:45   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
09:26:45   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
09:26:45  10  ,CASE WHEN trend IS NULL THEN 1
09:26:45  11  	    WHEN trend =0      THEN 1
09:26:45  12  	    ELSE trend END trend
09:26:45  13  ,cm4
09:26:45  14  ,cm6
09:26:45  15  ,cm8
09:26:45  16  ,cm10
09:26:45  17  ,cm12
09:26:45  18  ,cm14
09:26:45  19  ,cm16
09:26:45  20  ,cm18
09:26:45  21  --
09:26:45  22  ,ca4
09:26:45  23  ,ca6
09:26:45  24  ,ca8
09:26:45  25  ,ca10
09:26:45  26  ,ca12
09:26:45  27  ,ca14
09:26:45  28  ,ca16
09:26:45  29  ,ca18
09:26:45  30  --
09:26:45  31  ,cx4
09:26:45  32  ,cx6
09:26:45  33  ,cx8
09:26:45  34  ,cx10
09:26:45  35  ,cx12
09:26:45  36  ,cx14
09:26:45  37  ,cx16
09:26:45  38  ,cx18
09:26:45  39  --
09:26:45  40  ,crr4
09:26:45  41  ,crr6
09:26:45  42  ,crr8
09:26:45  43  ,crr10
09:26:45  44  ,crr12
09:26:45  45  ,crr14
09:26:45  46  ,crr16
09:26:45  47  ,crr18
09:26:45  48  --
09:26:45  49  ,hh
09:26:45  50  ,d
09:26:45  51  ,w
09:26:45  52  ,mpm
09:26:45  53  ,mph
09:26:45  54  FROM svm6122
09:26:45  55  ORDER BY ydate
09:26:45  56  /

Table created.

Elapsed: 00:00:00.38
09:26:46 SQL> 
09:26:46 SQL> -- rpt
09:26:46 SQL> 
09:26:46 SQL> SELECT
09:26:46   2  pair
09:26:46   3  ,trend
09:26:46   4  ,gatt
09:26:46   5  ,COUNT(pair)
09:26:46   6  ,AVG(g6)
09:26:46   7  FROM svm6142
09:26:46   8  GROUP BY pair,trend,gatt
09:26:46   9  ORDER BY pair,trend,gatt
09:26:46  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4350 -.22370192
ajp_usd 	-1 up	      5245 .222564188
ajp_usd 	-1		13
ajp_usd 	 1 nup	      5310 -.19946796
ajp_usd 	 1 up	      4826 .212344484
ajp_usd 	 1		59

6 rows selected.

Elapsed: 00:00:00.03
09:26:46 SQL> 
09:26:46 SQL> 
09:26:46 SQL> -- Derive NTILE based params:
09:26:46 SQL> 
09:26:46 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.17
09:26:46 SQL> CREATE TABLE svm6162 COMPRESS AS
09:26:46   2  SELECT
09:26:46   3  pair
09:26:46   4  ,ydate
09:26:46   5  ,prdate
09:26:46   6  ,clse
09:26:46   7  ,g6
09:26:46   8  ,gatt
09:26:46   9  ,gattn
09:26:46  10  ,trend
09:26:46  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
09:26:46  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
09:26:46  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
09:26:46  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
09:26:46  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
09:26:46  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
09:26:46  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
09:26:46  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
09:26:46  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
09:26:46  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
09:26:46  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
09:26:46  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
09:26:46  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
09:26:46  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
09:26:46  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
09:26:46  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
09:26:46  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
09:26:46  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
09:26:46  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
09:26:46  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
09:26:46  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
09:26:46  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
09:26:46  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
09:26:46  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
09:26:46  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
09:26:46  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
09:26:46  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
09:26:46  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
09:26:46  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
09:26:46  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
09:26:46  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
09:26:46  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
09:26:46  43  ,hh  att32
09:26:46  44  ,d   att33
09:26:46  45  ,w   att34
09:26:46  46  ,mpm att35
09:26:46  47  ,mph att36
09:26:46  48  ,trend att37
09:26:46  49  FROM svm6142
09:26:46  50  ORDER BY ydate
09:26:46  51  /

Table created.

Elapsed: 00:00:04.96
09:26:51 SQL> 
09:26:51 SQL> -- rpt
09:26:51 SQL> 
09:26:51 SQL> SELECT
09:26:51   2  pair
09:26:51   3  ,trend
09:26:51   4  ,gatt
09:26:51   5  ,COUNT(pair)
09:26:51   6  ,AVG(g6)
09:26:51   7  FROM svm6162
09:26:51   8  GROUP BY pair,trend,gatt
09:26:51   9  ORDER BY pair,trend,gatt
09:26:51  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4350 -.22370192
ajp_usd 	-1 up	      5245 .222564188
ajp_usd 	-1		13
ajp_usd 	 1 nup	      5310 -.19946796
ajp_usd 	 1 up	      4826 .212344484
ajp_usd 	 1		59

6 rows selected.

Elapsed: 00:00:00.02
09:26:51 SQL> 
09:26:51 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.16
09:26:51 SQL> CREATE TABLE modsrc COMPRESS AS
09:26:51   2  SELECT
09:26:51   3  pair
09:26:51   4  ,ydate
09:26:51   5  ,prdate
09:26:51   6  ,trend
09:26:51   7  ,g6
09:26:51   8  ,gatt
09:26:51   9  ,gattn
09:26:51  10  FROM svm6162
09:26:51  11  /

Table created.

Elapsed: 00:00:00.09
09:26:51 SQL> 
09:26:51 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.24
09:26:51 SQL> 
09:26:51 SQL> DROP   TABLE ajp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
09:26:51 SQL> CREATE TABLE ajp_ms610 COMPRESS AS
09:26:51   2  SELECT
09:26:51   3  ydate
09:26:51   4  ,trend ajp_trend
09:26:51   5  ,g6    ajp_g6
09:26:51   6  ,gatt  ajp_gatt
09:26:51   7  ,gattn ajp_gattn
09:26:51   8  FROM modsrc
09:26:51   9  /

Table created.

Elapsed: 00:00:00.09
09:26:52 SQL> 
09:26:52 SQL> ANALYZE TABLE ajp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
09:26:52 SQL> 
09:26:52 SQL> -- I need a copy of the attributes:
09:26:52 SQL> 
09:26:52 SQL> 
09:26:52 SQL> DROP   TABLE ajp_att;

Table dropped.

Elapsed: 00:00:00.07
09:26:52 SQL> CREATE TABLE ajp_att COMPRESS AS
09:26:52   2  SELECT
09:26:52   3  ydate
09:26:52   4  ,att00 ajp_att00
09:26:52   5  ,att01 ajp_att01
09:26:52   6  ,att02 ajp_att02
09:26:52   7  ,att03 ajp_att03
09:26:52   8  ,att04 ajp_att04
09:26:52   9  ,att05 ajp_att05
09:26:52  10  ,att06 ajp_att06
09:26:52  11  ,att07 ajp_att07
09:26:52  12  ,att08 ajp_att08
09:26:52  13  ,att09 ajp_att09
09:26:52  14  ,att10 ajp_att10
09:26:52  15  ,att11 ajp_att11
09:26:52  16  ,att12 ajp_att12
09:26:52  17  ,att13 ajp_att13
09:26:52  18  ,att14 ajp_att14
09:26:52  19  ,att15 ajp_att15
09:26:52  20  ,att16 ajp_att16
09:26:52  21  ,att17 ajp_att17
09:26:52  22  ,att18 ajp_att18
09:26:52  23  ,att19 ajp_att19
09:26:52  24  ,att20 ajp_att20
09:26:52  25  ,att21 ajp_att21
09:26:52  26  ,att22 ajp_att22
09:26:52  27  ,att23 ajp_att23
09:26:52  28  ,att24 ajp_att24
09:26:52  29  ,att25 ajp_att25
09:26:52  30  ,att26 ajp_att26
09:26:52  31  ,att27 ajp_att27
09:26:52  32  ,att28 ajp_att28
09:26:52  33  ,att29 ajp_att29
09:26:52  34  ,att30 ajp_att30
09:26:52  35  ,att31 ajp_att31
09:26:52  36  ,att32 ajp_att32
09:26:52  37  ,att33 ajp_att33
09:26:52  38  ,att34 ajp_att34
09:26:52  39  ,att35 ajp_att35
09:26:52  40  ,att36 ajp_att36
09:26:52  41  ,att37 ajp_att37
09:26:52  42  FROM svm6162
09:26:52  43  /

Table created.

Elapsed: 00:00:00.20
09:26:52 SQL> 
09:26:52 SQL> ANALYZE TABLE ajp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.53
09:26:53 SQL> 
09:26:53 SQL> -- rpt
09:26:53 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19803

Elapsed: 00:00:00.77
09:26:53 SQL> SELECT COUNT(*)FROM ajp_att;

  COUNT(*)
----------
     19803

Elapsed: 00:00:00.00
09:26:53 SQL> 
09:26:53 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
