
SQL*Plus: Release 11.2.0.1.0 Production on Thu Jan 6 21:03:33 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

21:03:33 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
21:03:33 SQL> 21:03:33 SQL> --
21:03:33 SQL> -- eur610.sql
21:03:33 SQL> --
21:03:33 SQL> 
21:03:33 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:03:33 SQL> 
21:03:33 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.01
21:03:33 SQL> 
21:03:33 SQL> -- I created di5min here:
21:03:33 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:03:33 SQL> 
21:03:33 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:03:33   2  SELECT
21:03:33   3  pair
21:03:33   4  ,ydate
21:03:33   5  ,prdate
21:03:33   6  ,rownum rnum -- acts as t in my time-series
21:03:33   7  ,clse
21:03:33   8  -- Derive a bunch of attributes from clse, the latest price:
21:03:33   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:03:33  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:03:33  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:03:33  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:03:33  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:03:33  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:03:33  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:03:33  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:03:33  17  --
21:03:33  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:03:33  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:03:33  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:03:33  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:03:33  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:03:33  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:03:33  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:03:33  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:03:33  26  --
21:03:33  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:03:33  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:03:33  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:03:33  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:03:33  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:03:33  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:03:33  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:03:33  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:03:33  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:03:33  36  FROM di5min WHERE pair LIKE'%eur%'
21:03:33  37  AND ydate > sysdate - 95
21:03:33  38  ORDER BY ydate
21:03:33  39  /

View created.

Elapsed: 00:00:00.07
21:03:33 SQL> 
21:03:33 SQL> -- rpt
21:03:33 SQL> 
21:03:33 SQL> SELECT
21:03:33   2  pair
21:03:33   3  ,COUNT(pair)
21:03:33   4  ,MIN(clse),MAX(clse)
21:03:33   5  ,MIN(avg6),MAX(avg6)
21:03:33   6  ,MIN(ydate),MAX(ydate)
21:03:33   7  FROM svm6102
21:03:33   8  GROUP BY pair
21:03:33   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19814    1.29735	   1.4273 1.29875103 1.42436233 2010-10-03 21:05:01 2011-01-06 21:00:00

Elapsed: 00:00:00.96
21:03:34 SQL> 
21:03:34 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:03:34 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.26
21:03:35 SQL> CREATE TABLE svm6122 COMPRESS AS
21:03:35   2  SELECT
21:03:35   3  pair
21:03:35   4  ,ydate
21:03:35   5  ,prdate
21:03:35   6  ,clse
21:03:35   7  -- g6 is important. I want to predict g6:
21:03:35   8  ,ld6 - clse g6
21:03:35   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:03:35  10  -- I want more attributes from the ones I derived above:
21:03:35  11  -- clse relation to moving-min
21:03:35  12  ,clse-min4  cm4
21:03:35  13  ,clse-min6  cm6
21:03:35  14  ,clse-min8  cm8
21:03:35  15  ,clse-min10 cm10
21:03:35  16  ,clse-min12 cm12
21:03:35  17  ,clse-min14 cm14
21:03:35  18  ,clse-min16 cm16
21:03:35  19  ,clse-min18 cm18
21:03:35  20  -- clse relation to moving-avg
21:03:35  21  ,clse-avg4  ca4
21:03:35  22  ,clse-avg6  ca6
21:03:35  23  ,clse-avg8  ca8
21:03:35  24  ,clse-avg10 ca10
21:03:35  25  ,clse-avg12 ca12
21:03:35  26  ,clse-avg14 ca14
21:03:35  27  ,clse-avg16 ca16
21:03:35  28  ,clse-avg18 ca18
21:03:35  29  -- clse relation to moving-max
21:03:35  30  ,clse-max4  cx4
21:03:35  31  ,clse-max6  cx6
21:03:35  32  ,clse-max8  cx8
21:03:35  33  ,clse-max10 cx10
21:03:35  34  ,clse-max12 cx12
21:03:35  35  ,clse-max14 cx14
21:03:35  36  ,clse-max16 cx16
21:03:35  37  ,clse-max18 cx18
21:03:35  38  -- Derive more attributes.
21:03:35  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:03:35  40  -- But COVAR_POP is more stable:
21:03:35  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:03:35  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:03:35  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:03:35  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:03:35  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:03:35  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:03:35  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:03:35  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:03:35  49  -- Derive date related attributes:
21:03:35  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:03:35  51  ,0+TO_CHAR(ydate,'D')d
21:03:35  52  ,0+TO_CHAR(ydate,'W')w
21:03:35  53  -- mpm stands for minutes-past-midnight:
21:03:35  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:03:35  55  -- mph stands for minutes-past-hour:
21:03:35  56  ,0+TO_CHAR(ydate,'MI')mph
21:03:35  57  FROM svm6102
21:03:35  58  ORDER BY ydate
21:03:35  59  /

Table created.

Elapsed: 00:00:02.56
21:03:37 SQL> 
21:03:37 SQL> -- rpt
21:03:37 SQL> 
21:03:37 SQL> SELECT
21:03:37   2  pair
21:03:37   3  ,COUNT(pair)
21:03:37   4  ,MIN(clse),MAX(clse)
21:03:37   5  ,MIN(ydate),MAX(ydate)
21:03:37   6  FROM svm6122
21:03:37   7  GROUP BY pair
21:03:37   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19814    1.29735	   1.4273 2010-10-03 21:05:01 2011-01-06 21:00:00

Elapsed: 00:00:00.07
21:03:37 SQL> 
21:03:37 SQL> -- Prepare for derivation of NTILE based params:
21:03:37 SQL> 
21:03:37 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.17
21:03:37 SQL> CREATE TABLE svm6142 COMPRESS AS
21:03:37   2  SELECT
21:03:37   3  pair
21:03:37   4  ,ydate
21:03:37   5  ,prdate
21:03:37   6  ,clse
21:03:37   7  ,g6
21:03:37   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:03:37   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:03:37  10  ,CASE WHEN trend IS NULL THEN 1
21:03:37  11  	    WHEN trend =0      THEN 1
21:03:37  12  	    ELSE trend END trend
21:03:37  13  ,cm4
21:03:37  14  ,cm6
21:03:37  15  ,cm8
21:03:37  16  ,cm10
21:03:37  17  ,cm12
21:03:37  18  ,cm14
21:03:37  19  ,cm16
21:03:37  20  ,cm18
21:03:37  21  --
21:03:37  22  ,ca4
21:03:37  23  ,ca6
21:03:37  24  ,ca8
21:03:37  25  ,ca10
21:03:37  26  ,ca12
21:03:37  27  ,ca14
21:03:37  28  ,ca16
21:03:37  29  ,ca18
21:03:37  30  --
21:03:37  31  ,cx4
21:03:37  32  ,cx6
21:03:37  33  ,cx8
21:03:37  34  ,cx10
21:03:37  35  ,cx12
21:03:37  36  ,cx14
21:03:37  37  ,cx16
21:03:37  38  ,cx18
21:03:37  39  --
21:03:37  40  ,crr4
21:03:37  41  ,crr6
21:03:37  42  ,crr8
21:03:37  43  ,crr10
21:03:37  44  ,crr12
21:03:37  45  ,crr14
21:03:37  46  ,crr16
21:03:37  47  ,crr18
21:03:37  48  --
21:03:37  49  ,hh
21:03:37  50  ,d
21:03:37  51  ,w
21:03:37  52  ,mpm
21:03:37  53  ,mph
21:03:37  54  FROM svm6122
21:03:37  55  ORDER BY ydate
21:03:37  56  /

Table created.

Elapsed: 00:00:00.36
21:03:38 SQL> 
21:03:38 SQL> -- rpt
21:03:38 SQL> 
21:03:38 SQL> SELECT
21:03:38   2  pair
21:03:38   3  ,trend
21:03:38   4  ,gatt
21:03:38   5  ,COUNT(pair)
21:03:38   6  ,AVG(g6)
21:03:38   7  FROM svm6142
21:03:38   8  GROUP BY pair,trend,gatt
21:03:38   9  ORDER BY pair,trend,gatt
21:03:38  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6597 -.00317724
eur_usd 	-1 up	      3570 .004447223
eur_usd 	-1		72
eur_usd 	 1 nup	      5870 -.00325282
eur_usd 	 1 up	      3705 .005071238

Elapsed: 00:00:00.04
21:03:38 SQL> 
21:03:38 SQL> 
21:03:38 SQL> -- Derive NTILE based params:
21:03:38 SQL> 
21:03:38 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.05
21:03:38 SQL> CREATE TABLE svm6162 COMPRESS AS
21:03:38   2  SELECT
21:03:38   3  pair
21:03:38   4  ,ydate
21:03:38   5  ,prdate
21:03:38   6  ,clse
21:03:38   7  ,g6
21:03:38   8  ,gatt
21:03:38   9  ,gattn
21:03:38  10  ,trend
21:03:38  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:03:38  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:03:38  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:03:38  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:03:38  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:03:38  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:03:38  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:03:38  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:03:38  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:03:38  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:03:38  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:03:38  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:03:38  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:03:38  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:03:38  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:03:38  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:03:38  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:03:38  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:03:38  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:03:38  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:03:38  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:03:38  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:03:38  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:03:38  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:03:38  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:03:38  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:03:38  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:03:38  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:03:38  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:03:38  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:03:38  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:03:38  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:03:38  43  ,hh  att32
21:03:38  44  ,d   att33
21:03:38  45  ,w   att34
21:03:38  46  ,mpm att35
21:03:38  47  ,mph att36
21:03:38  48  ,trend att37
21:03:38  49  FROM svm6142
21:03:38  50  ORDER BY ydate
21:03:38  51  /

Table created.

Elapsed: 00:00:04.91
21:03:43 SQL> 
21:03:43 SQL> -- rpt
21:03:43 SQL> 
21:03:43 SQL> SELECT
21:03:43   2  pair
21:03:43   3  ,trend
21:03:43   4  ,gatt
21:03:43   5  ,COUNT(pair)
21:03:43   6  ,AVG(g6)
21:03:43   7  FROM svm6162
21:03:43   8  GROUP BY pair,trend,gatt
21:03:43   9  ORDER BY pair,trend,gatt
21:03:43  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6597 -.00317724
eur_usd 	-1 up	      3570 .004447223
eur_usd 	-1		72
eur_usd 	 1 nup	      5870 -.00325282
eur_usd 	 1 up	      3705 .005071238

Elapsed: 00:00:00.03
21:03:43 SQL> 
21:03:43 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.04
21:03:43 SQL> CREATE TABLE modsrc COMPRESS AS
21:03:43   2  SELECT
21:03:43   3  pair
21:03:43   4  ,ydate
21:03:43   5  ,prdate
21:03:43   6  ,trend
21:03:43   7  ,g6
21:03:43   8  ,gatt
21:03:43   9  ,gattn
21:03:43  10  FROM svm6162
21:03:43  11  /

Table created.

Elapsed: 00:00:00.08
21:03:43 SQL> 
21:03:43 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.73
21:03:44 SQL> 
21:03:44 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
21:03:44 SQL> CREATE TABLE eur_ms610 COMPRESS AS
21:03:44   2  SELECT
21:03:44   3  ydate
21:03:44   4  ,trend eur_trend
21:03:44   5  ,g6    eur_g6
21:03:44   6  ,gatt  eur_gatt
21:03:44   7  ,gattn eur_gattn
21:03:44   8  FROM modsrc
21:03:44   9  /

Table created.

Elapsed: 00:00:00.05
21:03:44 SQL> 
21:03:44 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
21:03:44 SQL> 
21:03:44 SQL> -- I need a copy of the attributes:
21:03:44 SQL> 
21:03:44 SQL> 
21:03:44 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.05
21:03:44 SQL> CREATE TABLE eur_att COMPRESS AS
21:03:44   2  SELECT
21:03:44   3  ydate
21:03:44   4  ,att00 eur_att00
21:03:44   5  ,att01 eur_att01
21:03:44   6  ,att02 eur_att02
21:03:44   7  ,att03 eur_att03
21:03:44   8  ,att04 eur_att04
21:03:44   9  ,att05 eur_att05
21:03:44  10  ,att06 eur_att06
21:03:44  11  ,att07 eur_att07
21:03:44  12  ,att08 eur_att08
21:03:44  13  ,att09 eur_att09
21:03:44  14  ,att10 eur_att10
21:03:44  15  ,att11 eur_att11
21:03:44  16  ,att12 eur_att12
21:03:44  17  ,att13 eur_att13
21:03:44  18  ,att14 eur_att14
21:03:44  19  ,att15 eur_att15
21:03:44  20  ,att16 eur_att16
21:03:44  21  ,att17 eur_att17
21:03:44  22  ,att18 eur_att18
21:03:44  23  ,att19 eur_att19
21:03:44  24  ,att20 eur_att20
21:03:44  25  ,att21 eur_att21
21:03:44  26  ,att22 eur_att22
21:03:44  27  ,att23 eur_att23
21:03:44  28  ,att24 eur_att24
21:03:44  29  ,att25 eur_att25
21:03:44  30  ,att26 eur_att26
21:03:44  31  ,att27 eur_att27
21:03:44  32  ,att28 eur_att28
21:03:44  33  ,att29 eur_att29
21:03:44  34  ,att30 eur_att30
21:03:44  35  ,att31 eur_att31
21:03:44  36  ,att32 eur_att32
21:03:44  37  ,att33 eur_att33
21:03:44  38  ,att34 eur_att34
21:03:44  39  ,att35 eur_att35
21:03:44  40  ,att36 eur_att36
21:03:44  41  ,att37 eur_att37
21:03:44  42  FROM svm6162
21:03:44  43  /

Table created.

Elapsed: 00:00:00.19
21:03:44 SQL> 
21:03:44 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.49
21:03:45 SQL> 
21:03:45 SQL> -- rpt
21:03:45 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19814

Elapsed: 00:00:00.88
21:03:46 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19814

Elapsed: 00:00:00.01
21:03:46 SQL> 
21:03:46 SQL> --
21:03:46 SQL> -- aud610.sql
21:03:46 SQL> --
21:03:46 SQL> 
21:03:46 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:03:46 SQL> 
21:03:46 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.44
21:03:46 SQL> 
21:03:46 SQL> -- I created di5min here:
21:03:46 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:03:46 SQL> 
21:03:46 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:03:46   2  SELECT
21:03:46   3  pair
21:03:46   4  ,ydate
21:03:46   5  ,prdate
21:03:46   6  ,rownum rnum -- acts as t in my time-series
21:03:46   7  ,clse
21:03:46   8  -- Derive a bunch of attributes from clse, the latest price:
21:03:46   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:03:46  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:03:46  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:03:46  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:03:46  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:03:46  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:03:46  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:03:46  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:03:46  17  --
21:03:46  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:03:46  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:03:46  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:03:46  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:03:46  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:03:46  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:03:46  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:03:46  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:03:46  26  --
21:03:46  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:03:46  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:03:46  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:03:46  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:03:46  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:03:46  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:03:46  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:03:46  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:03:46  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:03:46  36  FROM di5min WHERE pair LIKE'%aud%'
21:03:46  37  AND ydate > sysdate - 95
21:03:46  38  ORDER BY ydate
21:03:46  39  /

View created.

Elapsed: 00:00:00.05
21:03:46 SQL> 
21:03:46 SQL> -- rpt
21:03:46 SQL> 
21:03:46 SQL> SELECT
21:03:46   2  pair
21:03:46   3  ,COUNT(pair)
21:03:46   4  ,MIN(clse),MAX(clse)
21:03:46   5  ,MIN(avg6),MAX(avg6)
21:03:46   6  ,MIN(ydate),MAX(ydate)
21:03:46   7  FROM svm6102
21:03:46   8  GROUP BY pair
21:03:46   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19811	.95405	  1.02495 .957141438 1.02284247 2010-10-03 21:05:01 2011-01-06 21:00:00

Elapsed: 00:00:00.92
21:03:47 SQL> 
21:03:47 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:03:47 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.30
21:03:47 SQL> CREATE TABLE svm6122 COMPRESS AS
21:03:47   2  SELECT
21:03:47   3  pair
21:03:47   4  ,ydate
21:03:47   5  ,prdate
21:03:47   6  ,clse
21:03:47   7  -- g6 is important. I want to predict g6:
21:03:47   8  ,ld6 - clse g6
21:03:47   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:03:47  10  -- I want more attributes from the ones I derived above:
21:03:47  11  -- clse relation to moving-min
21:03:47  12  ,clse-min4  cm4
21:03:47  13  ,clse-min6  cm6
21:03:47  14  ,clse-min8  cm8
21:03:47  15  ,clse-min10 cm10
21:03:47  16  ,clse-min12 cm12
21:03:47  17  ,clse-min14 cm14
21:03:47  18  ,clse-min16 cm16
21:03:47  19  ,clse-min18 cm18
21:03:47  20  -- clse relation to moving-avg
21:03:47  21  ,clse-avg4  ca4
21:03:47  22  ,clse-avg6  ca6
21:03:47  23  ,clse-avg8  ca8
21:03:47  24  ,clse-avg10 ca10
21:03:47  25  ,clse-avg12 ca12
21:03:47  26  ,clse-avg14 ca14
21:03:47  27  ,clse-avg16 ca16
21:03:47  28  ,clse-avg18 ca18
21:03:47  29  -- clse relation to moving-max
21:03:47  30  ,clse-max4  cx4
21:03:47  31  ,clse-max6  cx6
21:03:47  32  ,clse-max8  cx8
21:03:47  33  ,clse-max10 cx10
21:03:47  34  ,clse-max12 cx12
21:03:47  35  ,clse-max14 cx14
21:03:47  36  ,clse-max16 cx16
21:03:47  37  ,clse-max18 cx18
21:03:47  38  -- Derive more attributes.
21:03:47  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:03:47  40  -- But COVAR_POP is more stable:
21:03:47  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:03:47  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:03:47  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:03:47  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:03:47  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:03:47  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:03:47  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:03:47  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:03:47  49  -- Derive date related attributes:
21:03:47  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:03:47  51  ,0+TO_CHAR(ydate,'D')d
21:03:47  52  ,0+TO_CHAR(ydate,'W')w
21:03:47  53  -- mpm stands for minutes-past-midnight:
21:03:47  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:03:47  55  -- mph stands for minutes-past-hour:
21:03:47  56  ,0+TO_CHAR(ydate,'MI')mph
21:03:47  57  FROM svm6102
21:03:47  58  ORDER BY ydate
21:03:47  59  /

Table created.

Elapsed: 00:00:02.18
21:03:49 SQL> 
21:03:49 SQL> -- rpt
21:03:49 SQL> 
21:03:49 SQL> SELECT
21:03:49   2  pair
21:03:49   3  ,COUNT(pair)
21:03:49   4  ,MIN(clse),MAX(clse)
21:03:49   5  ,MIN(ydate),MAX(ydate)
21:03:49   6  FROM svm6122
21:03:49   7  GROUP BY pair
21:03:49   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19811	.95405	  1.02495 2010-10-03 21:05:01 2011-01-06 21:00:00

Elapsed: 00:00:00.05
21:03:50 SQL> 
21:03:50 SQL> -- Prepare for derivation of NTILE based params:
21:03:50 SQL> 
21:03:50 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.32
21:03:50 SQL> CREATE TABLE svm6142 COMPRESS AS
21:03:50   2  SELECT
21:03:50   3  pair
21:03:50   4  ,ydate
21:03:50   5  ,prdate
21:03:50   6  ,clse
21:03:50   7  ,g6
21:03:50   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:03:50   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:03:50  10  ,CASE WHEN trend IS NULL THEN 1
21:03:50  11  	    WHEN trend =0      THEN 1
21:03:50  12  	    ELSE trend END trend
21:03:50  13  ,cm4
21:03:50  14  ,cm6
21:03:50  15  ,cm8
21:03:50  16  ,cm10
21:03:50  17  ,cm12
21:03:50  18  ,cm14
21:03:50  19  ,cm16
21:03:50  20  ,cm18
21:03:50  21  --
21:03:50  22  ,ca4
21:03:50  23  ,ca6
21:03:50  24  ,ca8
21:03:50  25  ,ca10
21:03:50  26  ,ca12
21:03:50  27  ,ca14
21:03:50  28  ,ca16
21:03:50  29  ,ca18
21:03:50  30  --
21:03:50  31  ,cx4
21:03:50  32  ,cx6
21:03:50  33  ,cx8
21:03:50  34  ,cx10
21:03:50  35  ,cx12
21:03:50  36  ,cx14
21:03:50  37  ,cx16
21:03:50  38  ,cx18
21:03:50  39  --
21:03:50  40  ,crr4
21:03:50  41  ,crr6
21:03:50  42  ,crr8
21:03:50  43  ,crr10
21:03:50  44  ,crr12
21:03:50  45  ,crr14
21:03:50  46  ,crr16
21:03:50  47  ,crr18
21:03:50  48  --
21:03:50  49  ,hh
21:03:50  50  ,d
21:03:50  51  ,w
21:03:50  52  ,mpm
21:03:50  53  ,mph
21:03:50  54  FROM svm6122
21:03:50  55  ORDER BY ydate
21:03:50  56  /

Table created.

Elapsed: 00:00:00.41
21:03:50 SQL> 
21:03:50 SQL> -- rpt
21:03:50 SQL> 
21:03:50 SQL> SELECT
21:03:50   2  pair
21:03:50   3  ,trend
21:03:50   4  ,gatt
21:03:50   5  ,COUNT(pair)
21:03:50   6  ,AVG(g6)
21:03:50   7  FROM svm6142
21:03:50   8  GROUP BY pair,trend,gatt
21:03:50   9  ORDER BY pair,trend,gatt
21:03:50  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5716 -.00214976
aud_usd 	-1 up	      3701 .003745866
aud_usd 	-1		72
aud_usd 	 1 nup	      6729 -.00213856
aud_usd 	 1 up	      3593 .004054752

Elapsed: 00:00:00.04
21:03:50 SQL> 
21:03:50 SQL> 
21:03:50 SQL> -- Derive NTILE based params:
21:03:50 SQL> 
21:03:50 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.19
21:03:50 SQL> CREATE TABLE svm6162 COMPRESS AS
21:03:50   2  SELECT
21:03:50   3  pair
21:03:50   4  ,ydate
21:03:50   5  ,prdate
21:03:50   6  ,clse
21:03:50   7  ,g6
21:03:50   8  ,gatt
21:03:50   9  ,gattn
21:03:50  10  ,trend
21:03:50  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:03:50  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:03:50  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:03:50  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:03:50  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:03:50  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:03:50  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:03:50  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:03:50  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:03:50  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:03:50  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:03:50  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:03:50  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:03:50  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:03:50  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:03:50  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:03:50  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:03:50  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:03:50  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:03:50  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:03:50  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:03:50  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:03:51  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:03:51  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:03:51  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:03:51  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:03:51  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:03:51  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:03:51  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:03:51  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:03:51  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:03:51  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:03:51  43  ,hh  att32
21:03:51  44  ,d   att33
21:03:51  45  ,w   att34
21:03:51  46  ,mpm att35
21:03:51  47  ,mph att36
21:03:51  48  ,trend att37
21:03:51  49  FROM svm6142
21:03:51  50  ORDER BY ydate
21:03:51  51  /

Table created.

Elapsed: 00:00:04.84
21:03:55 SQL> 
21:03:55 SQL> -- rpt
21:03:55 SQL> 
21:03:55 SQL> SELECT
21:03:55   2  pair
21:03:55   3  ,trend
21:03:55   4  ,gatt
21:03:55   5  ,COUNT(pair)
21:03:55   6  ,AVG(g6)
21:03:55   7  FROM svm6162
21:03:55   8  GROUP BY pair,trend,gatt
21:03:55   9  ORDER BY pair,trend,gatt
21:03:55  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5716 -.00214976
aud_usd 	-1 up	      3701 .003745866
aud_usd 	-1		72
aud_usd 	 1 nup	      6729 -.00213856
aud_usd 	 1 up	      3593 .004054752

Elapsed: 00:00:00.03
21:03:55 SQL> 
21:03:55 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.19
21:03:56 SQL> CREATE TABLE modsrc COMPRESS AS
21:03:56   2  SELECT
21:03:56   3  pair
21:03:56   4  ,ydate
21:03:56   5  ,prdate
21:03:56   6  ,trend
21:03:56   7  ,g6
21:03:56   8  ,gatt
21:03:56   9  ,gattn
21:03:56  10  FROM svm6162
21:03:56  11  /

Table created.

Elapsed: 00:00:00.10
21:03:56 SQL> 
21:03:56 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
21:03:56 SQL> 
21:03:56 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
21:03:56 SQL> CREATE TABLE aud_ms610 COMPRESS AS
21:03:56   2  SELECT
21:03:56   3  ydate
21:03:56   4  ,trend aud_trend
21:03:56   5  ,g6    aud_g6
21:03:56   6  ,gatt  aud_gatt
21:03:56   7  ,gattn aud_gattn
21:03:56   8  FROM modsrc
21:03:56   9  /

Table created.

Elapsed: 00:00:00.07
21:03:56 SQL> 
21:03:56 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
21:03:56 SQL> 
21:03:56 SQL> -- I need a copy of the attributes:
21:03:56 SQL> 
21:03:56 SQL> 
21:03:56 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.04
21:03:56 SQL> CREATE TABLE aud_att COMPRESS AS
21:03:56   2  SELECT
21:03:56   3  ydate
21:03:56   4  ,att00 aud_att00
21:03:56   5  ,att01 aud_att01
21:03:56   6  ,att02 aud_att02
21:03:56   7  ,att03 aud_att03
21:03:56   8  ,att04 aud_att04
21:03:56   9  ,att05 aud_att05
21:03:56  10  ,att06 aud_att06
21:03:56  11  ,att07 aud_att07
21:03:56  12  ,att08 aud_att08
21:03:56  13  ,att09 aud_att09
21:03:56  14  ,att10 aud_att10
21:03:56  15  ,att11 aud_att11
21:03:56  16  ,att12 aud_att12
21:03:56  17  ,att13 aud_att13
21:03:56  18  ,att14 aud_att14
21:03:56  19  ,att15 aud_att15
21:03:56  20  ,att16 aud_att16
21:03:56  21  ,att17 aud_att17
21:03:56  22  ,att18 aud_att18
21:03:56  23  ,att19 aud_att19
21:03:56  24  ,att20 aud_att20
21:03:56  25  ,att21 aud_att21
21:03:56  26  ,att22 aud_att22
21:03:56  27  ,att23 aud_att23
21:03:56  28  ,att24 aud_att24
21:03:56  29  ,att25 aud_att25
21:03:56  30  ,att26 aud_att26
21:03:56  31  ,att27 aud_att27
21:03:56  32  ,att28 aud_att28
21:03:56  33  ,att29 aud_att29
21:03:56  34  ,att30 aud_att30
21:03:56  35  ,att31 aud_att31
21:03:56  36  ,att32 aud_att32
21:03:56  37  ,att33 aud_att33
21:03:56  38  ,att34 aud_att34
21:03:56  39  ,att35 aud_att35
21:03:56  40  ,att36 aud_att36
21:03:56  41  ,att37 aud_att37
21:03:56  42  FROM svm6162
21:03:56  43  /

Table created.

Elapsed: 00:00:00.17
21:03:56 SQL> 
21:03:56 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
21:03:57 SQL> 
21:03:57 SQL> -- rpt
21:03:57 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19811

Elapsed: 00:00:00.90
21:03:58 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19811

Elapsed: 00:00:00.00
21:03:58 SQL> 
21:03:58 SQL> --
21:03:58 SQL> -- gbp610.sql
21:03:58 SQL> --
21:03:58 SQL> 
21:03:58 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:03:58 SQL> 
21:03:58 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.56
21:03:58 SQL> 
21:03:58 SQL> -- I created di5min here:
21:03:58 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:03:58 SQL> 
21:03:58 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:03:58   2  SELECT
21:03:58   3  pair
21:03:58   4  ,ydate
21:03:58   5  ,prdate
21:03:58   6  ,rownum rnum -- acts as t in my time-series
21:03:58   7  ,clse
21:03:58   8  -- Derive a bunch of attributes from clse, the latest price:
21:03:58   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:03:58  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:03:58  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:03:58  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:03:58  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:03:58  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:03:58  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:03:58  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:03:58  17  --
21:03:58  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:03:58  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:03:58  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:03:58  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:03:58  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:03:58  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:03:58  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:03:58  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:03:58  26  --
21:03:58  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:03:58  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:03:58  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:03:58  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:03:58  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:03:58  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:03:58  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:03:58  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:03:58  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:03:58  36  FROM di5min WHERE pair LIKE'%gbp%'
21:03:58  37  AND ydate > sysdate - 95
21:03:58  38  ORDER BY ydate
21:03:58  39  /

View created.

Elapsed: 00:00:00.06
21:03:58 SQL> 
21:03:58 SQL> -- rpt
21:03:58 SQL> 
21:03:58 SQL> SELECT
21:03:58   2  pair
21:03:58   3  ,COUNT(pair)
21:03:58   4  ,MIN(clse),MAX(clse)
21:03:58   5  ,MIN(avg6),MAX(avg6)
21:03:58   6  ,MIN(ydate),MAX(ydate)
21:03:58   7  FROM svm6102
21:03:58   8  GROUP BY pair
21:03:58   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19813   1.535325	   1.6295 1.53696747 1.62716986 2010-10-03 21:05:01 2011-01-06 21:00:00

Elapsed: 00:00:00.91
21:03:59 SQL> 
21:03:59 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:03:59 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.45
21:04:00 SQL> CREATE TABLE svm6122 COMPRESS AS
21:04:00   2  SELECT
21:04:00   3  pair
21:04:00   4  ,ydate
21:04:00   5  ,prdate
21:04:00   6  ,clse
21:04:00   7  -- g6 is important. I want to predict g6:
21:04:00   8  ,ld6 - clse g6
21:04:00   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:04:00  10  -- I want more attributes from the ones I derived above:
21:04:00  11  -- clse relation to moving-min
21:04:00  12  ,clse-min4  cm4
21:04:00  13  ,clse-min6  cm6
21:04:00  14  ,clse-min8  cm8
21:04:00  15  ,clse-min10 cm10
21:04:00  16  ,clse-min12 cm12
21:04:00  17  ,clse-min14 cm14
21:04:00  18  ,clse-min16 cm16
21:04:00  19  ,clse-min18 cm18
21:04:00  20  -- clse relation to moving-avg
21:04:00  21  ,clse-avg4  ca4
21:04:00  22  ,clse-avg6  ca6
21:04:00  23  ,clse-avg8  ca8
21:04:00  24  ,clse-avg10 ca10
21:04:00  25  ,clse-avg12 ca12
21:04:00  26  ,clse-avg14 ca14
21:04:00  27  ,clse-avg16 ca16
21:04:00  28  ,clse-avg18 ca18
21:04:00  29  -- clse relation to moving-max
21:04:00  30  ,clse-max4  cx4
21:04:00  31  ,clse-max6  cx6
21:04:00  32  ,clse-max8  cx8
21:04:00  33  ,clse-max10 cx10
21:04:00  34  ,clse-max12 cx12
21:04:00  35  ,clse-max14 cx14
21:04:00  36  ,clse-max16 cx16
21:04:00  37  ,clse-max18 cx18
21:04:00  38  -- Derive more attributes.
21:04:00  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:04:00  40  -- But COVAR_POP is more stable:
21:04:00  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:04:00  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:04:00  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:04:00  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:04:00  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:04:00  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:04:00  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:04:00  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:04:00  49  -- Derive date related attributes:
21:04:00  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:04:00  51  ,0+TO_CHAR(ydate,'D')d
21:04:00  52  ,0+TO_CHAR(ydate,'W')w
21:04:00  53  -- mpm stands for minutes-past-midnight:
21:04:00  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:04:00  55  -- mph stands for minutes-past-hour:
21:04:00  56  ,0+TO_CHAR(ydate,'MI')mph
21:04:00  57  FROM svm6102
21:04:00  58  ORDER BY ydate
21:04:00  59  /

Table created.

Elapsed: 00:00:02.14
21:04:02 SQL> 
21:04:02 SQL> -- rpt
21:04:02 SQL> 
21:04:02 SQL> SELECT
21:04:02   2  pair
21:04:02   3  ,COUNT(pair)
21:04:02   4  ,MIN(clse),MAX(clse)
21:04:02   5  ,MIN(ydate),MAX(ydate)
21:04:02   6  FROM svm6122
21:04:02   7  GROUP BY pair
21:04:02   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19813   1.535325	   1.6295 2010-10-03 21:05:01 2011-01-06 21:00:00

Elapsed: 00:00:00.05
21:04:02 SQL> 
21:04:02 SQL> -- Prepare for derivation of NTILE based params:
21:04:02 SQL> 
21:04:02 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
21:04:02 SQL> CREATE TABLE svm6142 COMPRESS AS
21:04:02   2  SELECT
21:04:02   3  pair
21:04:02   4  ,ydate
21:04:02   5  ,prdate
21:04:02   6  ,clse
21:04:02   7  ,g6
21:04:02   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:04:02   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:04:02  10  ,CASE WHEN trend IS NULL THEN 1
21:04:02  11  	    WHEN trend =0      THEN 1
21:04:02  12  	    ELSE trend END trend
21:04:02  13  ,cm4
21:04:02  14  ,cm6
21:04:02  15  ,cm8
21:04:02  16  ,cm10
21:04:02  17  ,cm12
21:04:02  18  ,cm14
21:04:02  19  ,cm16
21:04:02  20  ,cm18
21:04:02  21  --
21:04:02  22  ,ca4
21:04:02  23  ,ca6
21:04:02  24  ,ca8
21:04:02  25  ,ca10
21:04:02  26  ,ca12
21:04:02  27  ,ca14
21:04:02  28  ,ca16
21:04:02  29  ,ca18
21:04:02  30  --
21:04:02  31  ,cx4
21:04:02  32  ,cx6
21:04:02  33  ,cx8
21:04:02  34  ,cx10
21:04:02  35  ,cx12
21:04:02  36  ,cx14
21:04:02  37  ,cx16
21:04:02  38  ,cx18
21:04:02  39  --
21:04:02  40  ,crr4
21:04:02  41  ,crr6
21:04:02  42  ,crr8
21:04:02  43  ,crr10
21:04:02  44  ,crr12
21:04:02  45  ,crr14
21:04:02  46  ,crr16
21:04:02  47  ,crr18
21:04:02  48  --
21:04:02  49  ,hh
21:04:02  50  ,d
21:04:02  51  ,w
21:04:02  52  ,mpm
21:04:02  53  ,mph
21:04:02  54  FROM svm6122
21:04:02  55  ORDER BY ydate
21:04:02  56  /

Table created.

Elapsed: 00:00:00.36
21:04:03 SQL> 
21:04:03 SQL> -- rpt
21:04:03 SQL> 
21:04:03 SQL> SELECT
21:04:03   2  pair
21:04:03   3  ,trend
21:04:03   4  ,gatt
21:04:03   5  ,COUNT(pair)
21:04:03   6  ,AVG(g6)
21:04:03   7  FROM svm6142
21:04:03   8  GROUP BY pair,trend,gatt
21:04:03   9  ORDER BY pair,trend,gatt
21:04:03  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6421 -.00262655
gbp_usd 	-1 up	      3579 .004338911
gbp_usd 	-1		50
gbp_usd 	 1 nup	      6285 -.00265048
gbp_usd 	 1 up	      3456 .004524374
gbp_usd 	 1		22

6 rows selected.

Elapsed: 00:00:00.04
21:04:03 SQL> 
21:04:03 SQL> 
21:04:03 SQL> -- Derive NTILE based params:
21:04:03 SQL> 
21:04:03 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
21:04:03 SQL> CREATE TABLE svm6162 COMPRESS AS
21:04:03   2  SELECT
21:04:03   3  pair
21:04:03   4  ,ydate
21:04:03   5  ,prdate
21:04:03   6  ,clse
21:04:03   7  ,g6
21:04:03   8  ,gatt
21:04:03   9  ,gattn
21:04:03  10  ,trend
21:04:03  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:04:03  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:04:03  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:04:03  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:04:03  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:04:03  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:04:03  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:04:03  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:04:03  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:04:03  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:04:03  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:04:03  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:04:03  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:04:03  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:04:03  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:04:03  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:04:03  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:04:03  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:04:03  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:04:03  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:04:03  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:04:03  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:04:03  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:04:03  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:04:03  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:04:03  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:04:03  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:04:03  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:04:03  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:04:03  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:04:03  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:04:03  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:04:03  43  ,hh  att32
21:04:03  44  ,d   att33
21:04:03  45  ,w   att34
21:04:03  46  ,mpm att35
21:04:03  47  ,mph att36
21:04:03  48  ,trend att37
21:04:03  49  FROM svm6142
21:04:03  50  ORDER BY ydate
21:04:03  51  /

Table created.

Elapsed: 00:00:04.84
21:04:08 SQL> 
21:04:08 SQL> -- rpt
21:04:08 SQL> 
21:04:08 SQL> SELECT
21:04:08   2  pair
21:04:08   3  ,trend
21:04:08   4  ,gatt
21:04:08   5  ,COUNT(pair)
21:04:08   6  ,AVG(g6)
21:04:08   7  FROM svm6162
21:04:08   8  GROUP BY pair,trend,gatt
21:04:08   9  ORDER BY pair,trend,gatt
21:04:08  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6421 -.00262655
gbp_usd 	-1 up	      3579 .004338911
gbp_usd 	-1		50
gbp_usd 	 1 nup	      6285 -.00265048
gbp_usd 	 1 up	      3456 .004524374
gbp_usd 	 1		22

6 rows selected.

Elapsed: 00:00:00.03
21:04:08 SQL> 
21:04:08 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.11
21:04:08 SQL> CREATE TABLE modsrc COMPRESS AS
21:04:08   2  SELECT
21:04:08   3  pair
21:04:08   4  ,ydate
21:04:08   5  ,prdate
21:04:08   6  ,trend
21:04:08   7  ,g6
21:04:08   8  ,gatt
21:04:08   9  ,gattn
21:04:08  10  FROM svm6162
21:04:08  11  /

Table created.

Elapsed: 00:00:00.08
21:04:08 SQL> 
21:04:08 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
21:04:08 SQL> 
21:04:08 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.07
21:04:08 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
21:04:08   2  SELECT
21:04:08   3  ydate
21:04:08   4  ,trend gbp_trend
21:04:08   5  ,g6    gbp_g6
21:04:08   6  ,gatt  gbp_gatt
21:04:08   7  ,gattn gbp_gattn
21:04:08   8  FROM modsrc
21:04:08   9  /

Table created.

Elapsed: 00:00:00.07
21:04:08 SQL> 
21:04:08 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
21:04:08 SQL> 
21:04:08 SQL> -- I need a copy of the attributes:
21:04:08 SQL> 
21:04:08 SQL> 
21:04:08 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.04
21:04:08 SQL> CREATE TABLE gbp_att COMPRESS AS
21:04:08   2  SELECT
21:04:08   3  ydate
21:04:08   4  ,att00 gbp_att00
21:04:08   5  ,att01 gbp_att01
21:04:08   6  ,att02 gbp_att02
21:04:08   7  ,att03 gbp_att03
21:04:08   8  ,att04 gbp_att04
21:04:08   9  ,att05 gbp_att05
21:04:08  10  ,att06 gbp_att06
21:04:08  11  ,att07 gbp_att07
21:04:08  12  ,att08 gbp_att08
21:04:08  13  ,att09 gbp_att09
21:04:08  14  ,att10 gbp_att10
21:04:08  15  ,att11 gbp_att11
21:04:08  16  ,att12 gbp_att12
21:04:08  17  ,att13 gbp_att13
21:04:08  18  ,att14 gbp_att14
21:04:08  19  ,att15 gbp_att15
21:04:08  20  ,att16 gbp_att16
21:04:08  21  ,att17 gbp_att17
21:04:08  22  ,att18 gbp_att18
21:04:08  23  ,att19 gbp_att19
21:04:08  24  ,att20 gbp_att20
21:04:08  25  ,att21 gbp_att21
21:04:08  26  ,att22 gbp_att22
21:04:08  27  ,att23 gbp_att23
21:04:08  28  ,att24 gbp_att24
21:04:08  29  ,att25 gbp_att25
21:04:08  30  ,att26 gbp_att26
21:04:08  31  ,att27 gbp_att27
21:04:08  32  ,att28 gbp_att28
21:04:08  33  ,att29 gbp_att29
21:04:08  34  ,att30 gbp_att30
21:04:08  35  ,att31 gbp_att31
21:04:08  36  ,att32 gbp_att32
21:04:08  37  ,att33 gbp_att33
21:04:08  38  ,att34 gbp_att34
21:04:08  39  ,att35 gbp_att35
21:04:08  40  ,att36 gbp_att36
21:04:08  41  ,att37 gbp_att37
21:04:08  42  FROM svm6162
21:04:08  43  /

Table created.

Elapsed: 00:00:00.16
21:04:08 SQL> 
21:04:08 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
21:04:09 SQL> 
21:04:09 SQL> -- rpt
21:04:09 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19813

Elapsed: 00:00:00.86
21:04:10 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19813

Elapsed: 00:00:00.00
21:04:10 SQL> 
21:04:10 SQL> --
21:04:10 SQL> -- jpy610.sql
21:04:10 SQL> --
21:04:10 SQL> 
21:04:10 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:04:10 SQL> 
21:04:10 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.36
21:04:10 SQL> 
21:04:10 SQL> -- I created di5min here:
21:04:10 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:04:10 SQL> 
21:04:10 SQL> CREATE OR REPLACE VIEW svm6102 AS
21:04:10   2  SELECT
21:04:10   3  pair
21:04:10   4  ,ydate
21:04:10   5  ,prdate
21:04:10   6  ,rownum rnum -- acts as t in my time-series
21:04:10   7  ,clse
21:04:10   8  -- Derive a bunch of attributes from clse, the latest price:
21:04:10   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
21:04:10  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
21:04:10  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
21:04:10  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
21:04:10  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
21:04:10  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
21:04:10  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
21:04:10  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
21:04:10  17  --
21:04:10  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
21:04:10  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
21:04:10  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
21:04:10  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
21:04:10  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
21:04:10  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
21:04:10  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
21:04:10  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
21:04:10  26  --
21:04:10  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
21:04:10  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
21:04:10  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
21:04:10  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
21:04:10  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
21:04:10  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
21:04:10  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
21:04:10  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
21:04:10  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
21:04:10  36  FROM di5min WHERE pair LIKE'%jpy%'
21:04:10  37  AND ydate > sysdate - 95
21:04:10  38  ORDER BY ydate
21:04:10  39  /

View created.

Elapsed: 00:00:00.05
21:04:10 SQL> 
21:04:10 SQL> -- rpt
21:04:10 SQL> 
21:04:10 SQL> SELECT
21:04:10   2  pair
21:04:10   3  ,COUNT(pair)
21:04:10   4  ,MIN(clse),MAX(clse)
21:04:10   5  ,MIN(avg6),MAX(avg6)
21:04:10   6  ,MIN(ydate),MAX(ydate)
21:04:10   7  FROM svm6102
21:04:10   8  GROUP BY pair
21:04:10   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19812	 80.25	   84.485 80.3595205 84.3105479 2010-10-03 21:05:01 2011-01-06 21:00:00

Elapsed: 00:00:00.96
21:04:11 SQL> 
21:04:11 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
21:04:11 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.28
21:04:11 SQL> CREATE TABLE svm6122 COMPRESS AS
21:04:11   2  SELECT
21:04:11   3  pair
21:04:11   4  ,ydate
21:04:11   5  ,prdate
21:04:11   6  ,clse
21:04:11   7  -- g6 is important. I want to predict g6:
21:04:11   8  ,ld6 - clse g6
21:04:11   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
21:04:11  10  -- I want more attributes from the ones I derived above:
21:04:11  11  -- clse relation to moving-min
21:04:11  12  ,clse-min4  cm4
21:04:11  13  ,clse-min6  cm6
21:04:11  14  ,clse-min8  cm8
21:04:11  15  ,clse-min10 cm10
21:04:11  16  ,clse-min12 cm12
21:04:11  17  ,clse-min14 cm14
21:04:11  18  ,clse-min16 cm16
21:04:11  19  ,clse-min18 cm18
21:04:11  20  -- clse relation to moving-avg
21:04:11  21  ,clse-avg4  ca4
21:04:11  22  ,clse-avg6  ca6
21:04:11  23  ,clse-avg8  ca8
21:04:11  24  ,clse-avg10 ca10
21:04:11  25  ,clse-avg12 ca12
21:04:11  26  ,clse-avg14 ca14
21:04:11  27  ,clse-avg16 ca16
21:04:11  28  ,clse-avg18 ca18
21:04:11  29  -- clse relation to moving-max
21:04:11  30  ,clse-max4  cx4
21:04:11  31  ,clse-max6  cx6
21:04:11  32  ,clse-max8  cx8
21:04:11  33  ,clse-max10 cx10
21:04:11  34  ,clse-max12 cx12
21:04:11  35  ,clse-max14 cx14
21:04:11  36  ,clse-max16 cx16
21:04:11  37  ,clse-max18 cx18
21:04:11  38  -- Derive more attributes.
21:04:11  39  -- I want to use CORR() here to help SVM see the shape of the series.
21:04:11  40  -- But COVAR_POP is more stable:
21:04:11  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
21:04:11  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:04:11  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:04:11  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:04:11  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:04:11  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:04:11  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:04:11  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:04:11  49  -- Derive date related attributes:
21:04:11  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:04:11  51  ,0+TO_CHAR(ydate,'D')d
21:04:11  52  ,0+TO_CHAR(ydate,'W')w
21:04:11  53  -- mpm stands for minutes-past-midnight:
21:04:11  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:04:11  55  -- mph stands for minutes-past-hour:
21:04:11  56  ,0+TO_CHAR(ydate,'MI')mph
21:04:11  57  FROM svm6102
21:04:11  58  ORDER BY ydate
21:04:11  59  /

Table created.

Elapsed: 00:00:02.69
21:04:14 SQL> 
21:04:14 SQL> -- rpt
21:04:14 SQL> 
21:04:14 SQL> SELECT
21:04:14   2  pair
21:04:14   3  ,COUNT(pair)
21:04:14   4  ,MIN(clse),MAX(clse)
21:04:14   5  ,MIN(ydate),MAX(ydate)
21:04:14   6  FROM svm6122
21:04:14   7  GROUP BY pair
21:04:14   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19812	 80.25	   84.485 2010-10-03 21:05:01 2011-01-06 21:00:00

Elapsed: 00:00:00.07
21:04:14 SQL> 
21:04:14 SQL> -- Prepare for derivation of NTILE based params:
21:04:14 SQL> 
21:04:14 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.22
21:04:14 SQL> CREATE TABLE svm6142 COMPRESS AS
21:04:14   2  SELECT
21:04:14   3  pair
21:04:14   4  ,ydate
21:04:14   5  ,prdate
21:04:14   6  ,clse
21:04:14   7  ,g6
21:04:14   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
21:04:14   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
21:04:14  10  ,CASE WHEN trend IS NULL THEN 1
21:04:14  11  	    WHEN trend =0      THEN 1
21:04:14  12  	    ELSE trend END trend
21:04:14  13  ,cm4
21:04:14  14  ,cm6
21:04:14  15  ,cm8
21:04:14  16  ,cm10
21:04:14  17  ,cm12
21:04:14  18  ,cm14
21:04:14  19  ,cm16
21:04:14  20  ,cm18
21:04:14  21  --
21:04:14  22  ,ca4
21:04:14  23  ,ca6
21:04:14  24  ,ca8
21:04:14  25  ,ca10
21:04:14  26  ,ca12
21:04:14  27  ,ca14
21:04:14  28  ,ca16
21:04:14  29  ,ca18
21:04:14  30  --
21:04:14  31  ,cx4
21:04:14  32  ,cx6
21:04:14  33  ,cx8
21:04:14  34  ,cx10
21:04:14  35  ,cx12
21:04:14  36  ,cx14
21:04:14  37  ,cx16
21:04:14  38  ,cx18
21:04:14  39  --
21:04:14  40  ,crr4
21:04:14  41  ,crr6
21:04:14  42  ,crr8
21:04:14  43  ,crr10
21:04:14  44  ,crr12
21:04:14  45  ,crr14
21:04:14  46  ,crr16
21:04:14  47  ,crr18
21:04:14  48  --
21:04:14  49  ,hh
21:04:14  50  ,d
21:04:14  51  ,w
21:04:14  52  ,mpm
21:04:14  53  ,mph
21:04:14  54  FROM svm6122
21:04:14  55  ORDER BY ydate
21:04:14  56  /

Table created.

Elapsed: 00:00:00.37
21:04:15 SQL> 
21:04:15 SQL> -- rpt
21:04:15 SQL> 
21:04:15 SQL> SELECT
21:04:15   2  pair
21:04:15   3  ,trend
21:04:15   4  ,gatt
21:04:15   5  ,COUNT(pair)
21:04:15   6  ,AVG(g6)
21:04:15   7  FROM svm6142
21:04:15   8  GROUP BY pair,trend,gatt
21:04:15   9  ORDER BY pair,trend,gatt
21:04:15  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5184 -.16553339
usd_jpy 	-1 up	      4906 .169435164
usd_jpy 	-1		 5
usd_jpy 	 1 nup	      5077 -.15499158
usd_jpy 	 1 up	      4573 .174490144
usd_jpy 	 1		67

6 rows selected.

Elapsed: 00:00:00.04
21:04:15 SQL> 
21:04:15 SQL> 
21:04:15 SQL> -- Derive NTILE based params:
21:04:15 SQL> 
21:04:15 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.15
21:04:15 SQL> CREATE TABLE svm6162 COMPRESS AS
21:04:15   2  SELECT
21:04:15   3  pair
21:04:15   4  ,ydate
21:04:15   5  ,prdate
21:04:15   6  ,clse
21:04:15   7  ,g6
21:04:15   8  ,gatt
21:04:15   9  ,gattn
21:04:15  10  ,trend
21:04:15  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
21:04:15  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
21:04:15  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
21:04:15  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
21:04:15  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
21:04:15  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
21:04:15  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
21:04:15  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
21:04:15  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
21:04:15  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
21:04:15  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
21:04:15  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
21:04:15  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
21:04:15  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
21:04:15  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
21:04:15  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
21:04:15  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
21:04:15  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
21:04:15  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
21:04:15  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
21:04:15  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
21:04:15  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
21:04:15  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
21:04:15  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
21:04:15  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
21:04:15  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
21:04:15  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
21:04:15  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
21:04:15  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
21:04:15  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
21:04:15  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
21:04:15  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
21:04:15  43  ,hh  att32
21:04:15  44  ,d   att33
21:04:15  45  ,w   att34
21:04:15  46  ,mpm att35
21:04:15  47  ,mph att36
21:04:15  48  ,trend att37
21:04:15  49  FROM svm6142
21:04:15  50  ORDER BY ydate
21:04:15  51  /
