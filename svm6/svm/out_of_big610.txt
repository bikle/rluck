
SQL*Plus: Release 11.2.0.1.0 Production on Fri Jan 7 05:41:56 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

05:41:56 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
05:41:56 SQL> 05:41:56 SQL> --
05:41:56 SQL> -- eur610.sql
05:41:56 SQL> --
05:41:56 SQL> 
05:41:56 SQL> -- Creates views and tables for backtesting a forex SVM strategy
05:41:56 SQL> 
05:41:56 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.03
05:41:56 SQL> 
05:41:56 SQL> -- I created di5min here:
05:41:56 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
05:41:56 SQL> 
05:41:56 SQL> CREATE OR REPLACE VIEW svm6102 AS
05:41:56   2  SELECT
05:41:56   3  pair
05:41:56   4  ,ydate
05:41:56   5  ,prdate
05:41:56   6  ,rownum rnum -- acts as t in my time-series
05:41:56   7  ,clse
05:41:56   8  -- Derive a bunch of attributes from clse, the latest price:
05:41:56   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
05:41:56  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
05:41:56  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
05:41:56  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
05:41:56  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
05:41:56  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
05:41:56  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
05:41:56  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
05:41:56  17  --
05:41:56  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
05:41:56  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
05:41:56  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
05:41:56  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
05:41:56  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
05:41:56  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
05:41:56  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
05:41:56  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
05:41:56  26  --
05:41:56  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
05:41:56  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
05:41:56  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
05:41:56  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
05:41:56  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
05:41:56  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
05:41:56  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
05:41:56  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
05:41:56  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
05:41:56  36  FROM di5min WHERE pair LIKE'%eur%'
05:41:56  37  AND ydate > sysdate - 95
05:41:56  38  ORDER BY ydate
05:41:56  39  /

View created.

Elapsed: 00:00:00.06
05:41:57 SQL> 
05:41:57 SQL> -- rpt
05:41:57 SQL> 
05:41:57 SQL> SELECT
05:41:57   2  pair
05:41:57   3  ,COUNT(pair)
05:41:57   4  ,MIN(clse),MAX(clse)
05:41:57   5  ,MIN(avg6),MAX(avg6)
05:41:57   6  ,MIN(ydate),MAX(ydate)
05:41:57   7  FROM svm6102
05:41:57   8  GROUP BY pair
05:41:57   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19800    1.29735	   1.4273 1.29875103 1.42436233 2010-10-04 05:45:01 2011-01-07 04:45:00

Elapsed: 00:00:00.94
05:41:57 SQL> 
05:41:57 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
05:41:57 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.05
05:41:58 SQL> CREATE TABLE svm6122 COMPRESS AS
05:41:58   2  SELECT
05:41:58   3  pair
05:41:58   4  ,ydate
05:41:58   5  ,prdate
05:41:58   6  ,clse
05:41:58   7  -- g6 is important. I want to predict g6:
05:41:58   8  ,ld6 - clse g6
05:41:58   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
05:41:58  10  -- I want more attributes from the ones I derived above:
05:41:58  11  -- clse relation to moving-min
05:41:58  12  ,clse-min4  cm4
05:41:58  13  ,clse-min6  cm6
05:41:58  14  ,clse-min8  cm8
05:41:58  15  ,clse-min10 cm10
05:41:58  16  ,clse-min12 cm12
05:41:58  17  ,clse-min14 cm14
05:41:58  18  ,clse-min16 cm16
05:41:58  19  ,clse-min18 cm18
05:41:58  20  -- clse relation to moving-avg
05:41:58  21  ,clse-avg4  ca4
05:41:58  22  ,clse-avg6  ca6
05:41:58  23  ,clse-avg8  ca8
05:41:58  24  ,clse-avg10 ca10
05:41:58  25  ,clse-avg12 ca12
05:41:58  26  ,clse-avg14 ca14
05:41:58  27  ,clse-avg16 ca16
05:41:58  28  ,clse-avg18 ca18
05:41:58  29  -- clse relation to moving-max
05:41:58  30  ,clse-max4  cx4
05:41:58  31  ,clse-max6  cx6
05:41:58  32  ,clse-max8  cx8
05:41:58  33  ,clse-max10 cx10
05:41:58  34  ,clse-max12 cx12
05:41:58  35  ,clse-max14 cx14
05:41:58  36  ,clse-max16 cx16
05:41:58  37  ,clse-max18 cx18
05:41:58  38  -- Derive more attributes.
05:41:58  39  -- I want to use CORR() here to help SVM see the shape of the series.
05:41:58  40  -- But COVAR_POP is more stable:
05:41:58  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
05:41:58  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
05:41:58  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
05:41:58  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
05:41:58  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
05:41:58  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
05:41:58  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
05:41:58  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
05:41:58  49  -- Derive date related attributes:
05:41:58  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
05:41:58  51  ,0+TO_CHAR(ydate,'D')d
05:41:58  52  ,0+TO_CHAR(ydate,'W')w
05:41:58  53  -- mpm stands for minutes-past-midnight:
05:41:58  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
05:41:58  55  -- mph stands for minutes-past-hour:
05:41:58  56  ,0+TO_CHAR(ydate,'MI')mph
05:41:58  57  FROM svm6102
05:41:58  58  ORDER BY ydate
05:41:58  59  /

Table created.

Elapsed: 00:00:02.44
05:42:00 SQL> 
05:42:00 SQL> -- rpt
05:42:00 SQL> 
05:42:00 SQL> SELECT
05:42:00   2  pair
05:42:00   3  ,COUNT(pair)
05:42:00   4  ,MIN(clse),MAX(clse)
05:42:00   5  ,MIN(ydate),MAX(ydate)
05:42:00   6  FROM svm6122
05:42:00   7  GROUP BY pair
05:42:00   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19800    1.29735	   1.4273 2010-10-04 05:45:01 2011-01-07 04:45:00

Elapsed: 00:00:00.05
05:42:00 SQL> 
05:42:00 SQL> -- Prepare for derivation of NTILE based params:
05:42:00 SQL> 
05:42:00 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:01.18
05:42:01 SQL> CREATE TABLE svm6142 COMPRESS AS
05:42:01   2  SELECT
05:42:01   3  pair
05:42:01   4  ,ydate
05:42:01   5  ,prdate
05:42:01   6  ,clse
05:42:01   7  ,g6
05:42:01   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
05:42:01   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
05:42:01  10  ,CASE WHEN trend IS NULL THEN 1
05:42:01  11  	    WHEN trend =0      THEN 1
05:42:01  12  	    ELSE trend END trend
05:42:01  13  ,cm4
05:42:01  14  ,cm6
05:42:01  15  ,cm8
05:42:01  16  ,cm10
05:42:01  17  ,cm12
05:42:01  18  ,cm14
05:42:01  19  ,cm16
05:42:01  20  ,cm18
05:42:01  21  --
05:42:01  22  ,ca4
05:42:01  23  ,ca6
05:42:01  24  ,ca8
05:42:01  25  ,ca10
05:42:01  26  ,ca12
05:42:01  27  ,ca14
05:42:01  28  ,ca16
05:42:01  29  ,ca18
05:42:01  30  --
05:42:01  31  ,cx4
05:42:01  32  ,cx6
05:42:01  33  ,cx8
05:42:01  34  ,cx10
05:42:01  35  ,cx12
05:42:01  36  ,cx14
05:42:01  37  ,cx16
05:42:01  38  ,cx18
05:42:01  39  --
05:42:01  40  ,crr4
05:42:01  41  ,crr6
05:42:01  42  ,crr8
05:42:01  43  ,crr10
05:42:01  44  ,crr12
05:42:01  45  ,crr14
05:42:01  46  ,crr16
05:42:01  47  ,crr18
05:42:01  48  --
05:42:01  49  ,hh
05:42:01  50  ,d
05:42:01  51  ,w
05:42:01  52  ,mpm
05:42:01  53  ,mph
05:42:01  54  FROM svm6122
05:42:01  55  ORDER BY ydate
05:42:01  56  /

Table created.

Elapsed: 00:00:00.41
05:42:02 SQL> 
05:42:02 SQL> -- rpt
05:42:02 SQL> 
05:42:02 SQL> SELECT
05:42:02   2  pair
05:42:02   3  ,trend
05:42:02   4  ,gatt
05:42:02   5  ,COUNT(pair)
05:42:02   6  ,AVG(g6)
05:42:02   7  FROM svm6142
05:42:02   8  GROUP BY pair,trend,gatt
05:42:02   9  ORDER BY pair,trend,gatt
05:42:02  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6589 -.00314472
eur_usd 	-1 up	      3565 .004450866
eur_usd 	-1		56
eur_usd 	 1 nup	      5869 -.00325132
eur_usd 	 1 up	      3705 .005071238
eur_usd 	 1		16

6 rows selected.

Elapsed: 00:00:00.05
05:42:02 SQL> 
05:42:02 SQL> 
05:42:02 SQL> -- Derive NTILE based params:
05:42:02 SQL> 
05:42:02 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.57
05:42:02 SQL> CREATE TABLE svm6162 COMPRESS AS
05:42:02   2  SELECT
05:42:02   3  pair
05:42:02   4  ,ydate
05:42:02   5  ,prdate
05:42:02   6  ,clse
05:42:02   7  ,g6
05:42:02   8  ,gatt
05:42:02   9  ,gattn
05:42:02  10  ,trend
05:42:02  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
05:42:02  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
05:42:02  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
05:42:02  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
05:42:02  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
05:42:02  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
05:42:02  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
05:42:02  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
05:42:02  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
05:42:02  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
05:42:02  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
05:42:02  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
05:42:02  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
05:42:02  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
05:42:02  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
05:42:02  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
05:42:02  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
05:42:02  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
05:42:02  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
05:42:02  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
05:42:02  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
05:42:02  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
05:42:02  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
05:42:02  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
05:42:02  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
05:42:02  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
05:42:02  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
05:42:02  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
05:42:02  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
05:42:02  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
05:42:02  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
05:42:02  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
05:42:02  43  ,hh  att32
05:42:02  44  ,d   att33
05:42:02  45  ,w   att34
05:42:02  46  ,mpm att35
05:42:02  47  ,mph att36
05:42:02  48  ,trend att37
05:42:02  49  FROM svm6142
05:42:02  50  ORDER BY ydate
05:42:02  51  /

Table created.

Elapsed: 00:00:04.82
05:42:07 SQL> 
05:42:07 SQL> -- rpt
05:42:07 SQL> 
05:42:07 SQL> SELECT
05:42:07   2  pair
05:42:07   3  ,trend
05:42:07   4  ,gatt
05:42:07   5  ,COUNT(pair)
05:42:07   6  ,AVG(g6)
05:42:07   7  FROM svm6162
05:42:07   8  GROUP BY pair,trend,gatt
05:42:07   9  ORDER BY pair,trend,gatt
05:42:07  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6589 -.00314472
eur_usd 	-1 up	      3565 .004450866
eur_usd 	-1		56
eur_usd 	 1 nup	      5869 -.00325132
eur_usd 	 1 up	      3705 .005071238
eur_usd 	 1		16

6 rows selected.

Elapsed: 00:00:00.03
05:42:07 SQL> 
05:42:07 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.23
05:42:07 SQL> CREATE TABLE modsrc COMPRESS AS
05:42:07   2  SELECT
05:42:07   3  pair
05:42:07   4  ,ydate
05:42:07   5  ,prdate
05:42:07   6  ,trend
05:42:07   7  ,g6
05:42:07   8  ,gatt
05:42:07   9  ,gattn
05:42:07  10  FROM svm6162
05:42:07  11  /

Table created.

Elapsed: 00:00:00.09
05:42:07 SQL> 
05:42:07 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
05:42:08 SQL> 
05:42:08 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.12
05:42:08 SQL> CREATE TABLE eur_ms610 COMPRESS AS
05:42:08   2  SELECT
05:42:08   3  ydate
05:42:08   4  ,trend eur_trend
05:42:08   5  ,g6    eur_g6
05:42:08   6  ,gatt  eur_gatt
05:42:08   7  ,gattn eur_gattn
05:42:08   8  FROM modsrc
05:42:08   9  /

Table created.

Elapsed: 00:00:00.07
05:42:08 SQL> 
05:42:08 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
05:42:08 SQL> 
05:42:08 SQL> -- I need a copy of the attributes:
05:42:08 SQL> 
05:42:08 SQL> 
05:42:08 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.05
05:42:08 SQL> CREATE TABLE eur_att COMPRESS AS
05:42:08   2  SELECT
05:42:08   3  ydate
05:42:08   4  ,att00 eur_att00
05:42:08   5  ,att01 eur_att01
05:42:08   6  ,att02 eur_att02
05:42:08   7  ,att03 eur_att03
05:42:08   8  ,att04 eur_att04
05:42:08   9  ,att05 eur_att05
05:42:08  10  ,att06 eur_att06
05:42:08  11  ,att07 eur_att07
05:42:08  12  ,att08 eur_att08
05:42:08  13  ,att09 eur_att09
05:42:08  14  ,att10 eur_att10
05:42:08  15  ,att11 eur_att11
05:42:08  16  ,att12 eur_att12
05:42:08  17  ,att13 eur_att13
05:42:08  18  ,att14 eur_att14
05:42:08  19  ,att15 eur_att15
05:42:08  20  ,att16 eur_att16
05:42:08  21  ,att17 eur_att17
05:42:08  22  ,att18 eur_att18
05:42:08  23  ,att19 eur_att19
05:42:08  24  ,att20 eur_att20
05:42:08  25  ,att21 eur_att21
05:42:08  26  ,att22 eur_att22
05:42:08  27  ,att23 eur_att23
05:42:08  28  ,att24 eur_att24
05:42:08  29  ,att25 eur_att25
05:42:08  30  ,att26 eur_att26
05:42:08  31  ,att27 eur_att27
05:42:08  32  ,att28 eur_att28
05:42:08  33  ,att29 eur_att29
05:42:08  34  ,att30 eur_att30
05:42:08  35  ,att31 eur_att31
05:42:08  36  ,att32 eur_att32
05:42:08  37  ,att33 eur_att33
05:42:08  38  ,att34 eur_att34
05:42:08  39  ,att35 eur_att35
05:42:08  40  ,att36 eur_att36
05:42:08  41  ,att37 eur_att37
05:42:08  42  FROM svm6162
05:42:08  43  /

Table created.

Elapsed: 00:00:00.18
05:42:08 SQL> 
05:42:08 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
05:42:09 SQL> 
05:42:09 SQL> -- rpt
05:42:09 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19800

Elapsed: 00:00:00.94
05:42:10 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19800

Elapsed: 00:00:00.00
05:42:10 SQL> 
05:42:10 SQL> --
05:42:10 SQL> -- aud610.sql
05:42:10 SQL> --
05:42:10 SQL> 
05:42:10 SQL> -- Creates views and tables for backtesting a forex SVM strategy
05:42:10 SQL> 
05:42:10 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:01.28
05:42:11 SQL> 
05:42:11 SQL> -- I created di5min here:
05:42:11 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
05:42:11 SQL> 
05:42:11 SQL> CREATE OR REPLACE VIEW svm6102 AS
05:42:11   2  SELECT
05:42:11   3  pair
05:42:11   4  ,ydate
05:42:11   5  ,prdate
05:42:11   6  ,rownum rnum -- acts as t in my time-series
05:42:11   7  ,clse
05:42:11   8  -- Derive a bunch of attributes from clse, the latest price:
05:42:11   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
05:42:11  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
05:42:11  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
05:42:11  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
05:42:11  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
05:42:11  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
05:42:11  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
05:42:11  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
05:42:11  17  --
05:42:11  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
05:42:11  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
05:42:11  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
05:42:11  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
05:42:11  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
05:42:11  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
05:42:11  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
05:42:11  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
05:42:11  26  --
05:42:11  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
05:42:11  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
05:42:11  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
05:42:11  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
05:42:11  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
05:42:11  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
05:42:11  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
05:42:11  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
05:42:11  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
05:42:11  36  FROM di5min WHERE pair LIKE'%aud%'
05:42:11  37  AND ydate > sysdate - 95
05:42:11  38  ORDER BY ydate
05:42:11  39  /

View created.

Elapsed: 00:00:00.05
05:42:11 SQL> 
05:42:11 SQL> -- rpt
05:42:11 SQL> 
05:42:11 SQL> SELECT
05:42:11   2  pair
05:42:11   3  ,COUNT(pair)
05:42:11   4  ,MIN(clse),MAX(clse)
05:42:11   5  ,MIN(avg6),MAX(avg6)
05:42:11   6  ,MIN(ydate),MAX(ydate)
05:42:11   7  FROM svm6102
05:42:11   8  GROUP BY pair
05:42:11   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19797	.95405	  1.02495 .957141438 1.02284247 2010-10-04 05:45:01 2011-01-07 04:45:00

Elapsed: 00:00:00.89
05:42:12 SQL> 
05:42:12 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
05:42:12 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.23
05:42:12 SQL> CREATE TABLE svm6122 COMPRESS AS
05:42:12   2  SELECT
05:42:12   3  pair
05:42:12   4  ,ydate
05:42:12   5  ,prdate
05:42:12   6  ,clse
05:42:12   7  -- g6 is important. I want to predict g6:
05:42:12   8  ,ld6 - clse g6
05:42:12   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
05:42:12  10  -- I want more attributes from the ones I derived above:
05:42:12  11  -- clse relation to moving-min
05:42:12  12  ,clse-min4  cm4
05:42:12  13  ,clse-min6  cm6
05:42:12  14  ,clse-min8  cm8
05:42:12  15  ,clse-min10 cm10
05:42:12  16  ,clse-min12 cm12
05:42:12  17  ,clse-min14 cm14
05:42:12  18  ,clse-min16 cm16
05:42:12  19  ,clse-min18 cm18
05:42:12  20  -- clse relation to moving-avg
05:42:12  21  ,clse-avg4  ca4
05:42:12  22  ,clse-avg6  ca6
05:42:12  23  ,clse-avg8  ca8
05:42:12  24  ,clse-avg10 ca10
05:42:12  25  ,clse-avg12 ca12
05:42:12  26  ,clse-avg14 ca14
05:42:12  27  ,clse-avg16 ca16
05:42:12  28  ,clse-avg18 ca18
05:42:12  29  -- clse relation to moving-max
05:42:12  30  ,clse-max4  cx4
05:42:12  31  ,clse-max6  cx6
05:42:12  32  ,clse-max8  cx8
05:42:12  33  ,clse-max10 cx10
05:42:12  34  ,clse-max12 cx12
05:42:12  35  ,clse-max14 cx14
05:42:12  36  ,clse-max16 cx16
05:42:12  37  ,clse-max18 cx18
05:42:12  38  -- Derive more attributes.
05:42:12  39  -- I want to use CORR() here to help SVM see the shape of the series.
05:42:12  40  -- But COVAR_POP is more stable:
05:42:12  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
05:42:12  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
05:42:12  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
05:42:12  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
05:42:12  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
05:42:12  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
05:42:12  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
05:42:12  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
05:42:12  49  -- Derive date related attributes:
05:42:12  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
05:42:12  51  ,0+TO_CHAR(ydate,'D')d
05:42:12  52  ,0+TO_CHAR(ydate,'W')w
05:42:12  53  -- mpm stands for minutes-past-midnight:
05:42:12  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
05:42:12  55  -- mph stands for minutes-past-hour:
05:42:12  56  ,0+TO_CHAR(ydate,'MI')mph
05:42:12  57  FROM svm6102
05:42:12  58  ORDER BY ydate
05:42:12  59  /

Table created.

Elapsed: 00:00:02.10
05:42:14 SQL> 
05:42:14 SQL> -- rpt
05:42:14 SQL> 
05:42:14 SQL> SELECT
05:42:14   2  pair
05:42:14   3  ,COUNT(pair)
05:42:14   4  ,MIN(clse),MAX(clse)
05:42:14   5  ,MIN(ydate),MAX(ydate)
05:42:14   6  FROM svm6122
05:42:14   7  GROUP BY pair
05:42:14   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19797	.95405	  1.02495 2010-10-04 05:45:01 2011-01-07 04:45:00

Elapsed: 00:00:00.04
05:42:14 SQL> 
05:42:14 SQL> -- Prepare for derivation of NTILE based params:
05:42:14 SQL> 
05:42:14 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.21
05:42:14 SQL> CREATE TABLE svm6142 COMPRESS AS
05:42:14   2  SELECT
05:42:14   3  pair
05:42:14   4  ,ydate
05:42:14   5  ,prdate
05:42:14   6  ,clse
05:42:14   7  ,g6
05:42:14   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
05:42:14   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
05:42:14  10  ,CASE WHEN trend IS NULL THEN 1
05:42:14  11  	    WHEN trend =0      THEN 1
05:42:14  12  	    ELSE trend END trend
05:42:14  13  ,cm4
05:42:14  14  ,cm6
05:42:14  15  ,cm8
05:42:14  16  ,cm10
05:42:14  17  ,cm12
05:42:14  18  ,cm14
05:42:14  19  ,cm16
05:42:14  20  ,cm18
05:42:14  21  --
05:42:14  22  ,ca4
05:42:14  23  ,ca6
05:42:14  24  ,ca8
05:42:14  25  ,ca10
05:42:14  26  ,ca12
05:42:14  27  ,ca14
05:42:14  28  ,ca16
05:42:14  29  ,ca18
05:42:14  30  --
05:42:14  31  ,cx4
05:42:14  32  ,cx6
05:42:14  33  ,cx8
05:42:14  34  ,cx10
05:42:14  35  ,cx12
05:42:14  36  ,cx14
05:42:14  37  ,cx16
05:42:14  38  ,cx18
05:42:14  39  --
05:42:14  40  ,crr4
05:42:14  41  ,crr6
05:42:14  42  ,crr8
05:42:14  43  ,crr10
05:42:14  44  ,crr12
05:42:14  45  ,crr14
05:42:14  46  ,crr16
05:42:14  47  ,crr18
05:42:14  48  --
05:42:14  49  ,hh
05:42:14  50  ,d
05:42:14  51  ,w
05:42:14  52  ,mpm
05:42:14  53  ,mph
05:42:14  54  FROM svm6122
05:42:14  55  ORDER BY ydate
05:42:14  56  /

Table created.

Elapsed: 00:00:00.38
05:42:15 SQL> 
05:42:15 SQL> -- rpt
05:42:15 SQL> 
05:42:15 SQL> SELECT
05:42:15   2  pair
05:42:15   3  ,trend
05:42:15   4  ,gatt
05:42:15   5  ,COUNT(pair)
05:42:15   6  ,AVG(g6)
05:42:15   7  FROM svm6142
05:42:15   8  GROUP BY pair,trend,gatt
05:42:15   9  ORDER BY pair,trend,gatt
05:42:15  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5698 -.00214103
aud_usd 	-1 up	      3701 .003745866
aud_usd 	-1		68
aud_usd 	 1 nup	      6733 -.00213652
aud_usd 	 1 up	      3593 .004054752
aud_usd 	 1		 4

6 rows selected.

Elapsed: 00:00:00.04
05:42:15 SQL> 
05:42:15 SQL> 
05:42:15 SQL> -- Derive NTILE based params:
05:42:15 SQL> 
05:42:15 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
05:42:15 SQL> CREATE TABLE svm6162 COMPRESS AS
05:42:15   2  SELECT
05:42:15   3  pair
05:42:15   4  ,ydate
05:42:15   5  ,prdate
05:42:15   6  ,clse
05:42:15   7  ,g6
05:42:15   8  ,gatt
05:42:15   9  ,gattn
05:42:15  10  ,trend
05:42:15  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
05:42:15  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
05:42:15  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
05:42:15  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
05:42:15  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
05:42:15  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
05:42:15  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
05:42:15  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
05:42:15  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
05:42:15  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
05:42:15  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
05:42:15  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
05:42:15  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
05:42:15  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
05:42:15  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
05:42:15  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
05:42:15  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
05:42:15  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
05:42:15  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
05:42:15  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
05:42:15  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
05:42:15  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
05:42:15  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
05:42:15  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
05:42:15  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
05:42:15  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
05:42:15  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
05:42:15  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
05:42:15  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
05:42:15  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
05:42:15  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
05:42:15  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
05:42:15  43  ,hh  att32
05:42:15  44  ,d   att33
05:42:15  45  ,w   att34
05:42:15  46  ,mpm att35
05:42:15  47  ,mph att36
05:42:15  48  ,trend att37
05:42:15  49  FROM svm6142
05:42:15  50  ORDER BY ydate
05:42:15  51  /

Table created.

Elapsed: 00:00:04.79
05:42:20 SQL> 
05:42:20 SQL> -- rpt
05:42:20 SQL> 
05:42:20 SQL> SELECT
05:42:20   2  pair
05:42:20   3  ,trend
05:42:20   4  ,gatt
05:42:20   5  ,COUNT(pair)
05:42:20   6  ,AVG(g6)
05:42:20   7  FROM svm6162
05:42:20   8  GROUP BY pair,trend,gatt
05:42:20   9  ORDER BY pair,trend,gatt
05:42:20  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5698 -.00214103
aud_usd 	-1 up	      3701 .003745866
aud_usd 	-1		68
aud_usd 	 1 nup	      6733 -.00213652
aud_usd 	 1 up	      3593 .004054752
aud_usd 	 1		 4

6 rows selected.

Elapsed: 00:00:00.03
05:42:20 SQL> 
05:42:20 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.21
05:42:20 SQL> CREATE TABLE modsrc COMPRESS AS
05:42:20   2  SELECT
05:42:20   3  pair
05:42:20   4  ,ydate
05:42:20   5  ,prdate
05:42:20   6  ,trend
05:42:20   7  ,g6
05:42:20   8  ,gatt
05:42:20   9  ,gattn
05:42:20  10  FROM svm6162
05:42:20  11  /

Table created.

Elapsed: 00:00:00.08
05:42:20 SQL> 
05:42:20 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
05:42:20 SQL> 
05:42:20 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
05:42:20 SQL> CREATE TABLE aud_ms610 COMPRESS AS
05:42:20   2  SELECT
05:42:20   3  ydate
05:42:20   4  ,trend aud_trend
05:42:20   5  ,g6    aud_g6
05:42:20   6  ,gatt  aud_gatt
05:42:20   7  ,gattn aud_gattn
05:42:20   8  FROM modsrc
05:42:20   9  /

Table created.

Elapsed: 00:00:00.06
05:42:20 SQL> 
05:42:20 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
05:42:21 SQL> 
05:42:21 SQL> -- I need a copy of the attributes:
05:42:21 SQL> 
05:42:21 SQL> 
05:42:21 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.06
05:42:21 SQL> CREATE TABLE aud_att COMPRESS AS
05:42:21   2  SELECT
05:42:21   3  ydate
05:42:21   4  ,att00 aud_att00
05:42:21   5  ,att01 aud_att01
05:42:21   6  ,att02 aud_att02
05:42:21   7  ,att03 aud_att03
05:42:21   8  ,att04 aud_att04
05:42:21   9  ,att05 aud_att05
05:42:21  10  ,att06 aud_att06
05:42:21  11  ,att07 aud_att07
05:42:21  12  ,att08 aud_att08
05:42:21  13  ,att09 aud_att09
05:42:21  14  ,att10 aud_att10
05:42:21  15  ,att11 aud_att11
05:42:21  16  ,att12 aud_att12
05:42:21  17  ,att13 aud_att13
05:42:21  18  ,att14 aud_att14
05:42:21  19  ,att15 aud_att15
05:42:21  20  ,att16 aud_att16
05:42:21  21  ,att17 aud_att17
05:42:21  22  ,att18 aud_att18
05:42:21  23  ,att19 aud_att19
05:42:21  24  ,att20 aud_att20
05:42:21  25  ,att21 aud_att21
05:42:21  26  ,att22 aud_att22
05:42:21  27  ,att23 aud_att23
05:42:21  28  ,att24 aud_att24
05:42:21  29  ,att25 aud_att25
05:42:21  30  ,att26 aud_att26
05:42:21  31  ,att27 aud_att27
05:42:21  32  ,att28 aud_att28
05:42:21  33  ,att29 aud_att29
05:42:21  34  ,att30 aud_att30
05:42:21  35  ,att31 aud_att31
05:42:21  36  ,att32 aud_att32
05:42:21  37  ,att33 aud_att33
05:42:21  38  ,att34 aud_att34
05:42:21  39  ,att35 aud_att35
05:42:21  40  ,att36 aud_att36
05:42:21  41  ,att37 aud_att37
05:42:21  42  FROM svm6162
05:42:21  43  /

Table created.

Elapsed: 00:00:00.18
05:42:21 SQL> 
05:42:21 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
05:42:21 SQL> 
05:42:21 SQL> -- rpt
05:42:21 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19797

Elapsed: 00:00:00.86
05:42:22 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19797

Elapsed: 00:00:00.00
05:42:22 SQL> 
05:42:22 SQL> --
05:42:22 SQL> -- gbp610.sql
05:42:22 SQL> --
05:42:22 SQL> 
05:42:22 SQL> -- Creates views and tables for backtesting a forex SVM strategy
05:42:22 SQL> 
05:42:22 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.40
05:42:22 SQL> 
05:42:22 SQL> -- I created di5min here:
05:42:22 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
05:42:22 SQL> 
05:42:22 SQL> CREATE OR REPLACE VIEW svm6102 AS
05:42:22   2  SELECT
05:42:22   3  pair
05:42:22   4  ,ydate
05:42:22   5  ,prdate
05:42:22   6  ,rownum rnum -- acts as t in my time-series
05:42:22   7  ,clse
05:42:22   8  -- Derive a bunch of attributes from clse, the latest price:
05:42:22   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
05:42:22  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
05:42:22  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
05:42:22  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
05:42:22  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
05:42:22  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
05:42:22  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
05:42:22  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
05:42:22  17  --
05:42:22  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
05:42:22  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
05:42:22  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
05:42:22  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
05:42:22  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
05:42:22  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
05:42:22  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
05:42:22  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
05:42:22  26  --
05:42:22  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
05:42:22  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
05:42:22  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
05:42:22  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
05:42:22  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
05:42:22  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
05:42:22  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
05:42:22  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
05:42:22  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
05:42:22  36  FROM di5min WHERE pair LIKE'%gbp%'
05:42:22  37  AND ydate > sysdate - 95
05:42:22  38  ORDER BY ydate
05:42:22  39  /

View created.

Elapsed: 00:00:00.04
05:42:23 SQL> 
05:42:23 SQL> -- rpt
05:42:23 SQL> 
05:42:23 SQL> SELECT
05:42:23   2  pair
05:42:23   3  ,COUNT(pair)
05:42:23   4  ,MIN(clse),MAX(clse)
05:42:23   5  ,MIN(avg6),MAX(avg6)
05:42:23   6  ,MIN(ydate),MAX(ydate)
05:42:23   7  FROM svm6102
05:42:23   8  GROUP BY pair
05:42:23   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19799   1.535325	   1.6295 1.53696747 1.62716986 2010-10-04 05:45:01 2011-01-07 04:45:00

Elapsed: 00:00:00.87
05:42:23 SQL> 
05:42:23 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
05:42:23 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.23
05:42:24 SQL> CREATE TABLE svm6122 COMPRESS AS
05:42:24   2  SELECT
05:42:24   3  pair
05:42:24   4  ,ydate
05:42:24   5  ,prdate
05:42:24   6  ,clse
05:42:24   7  -- g6 is important. I want to predict g6:
05:42:24   8  ,ld6 - clse g6
05:42:24   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
05:42:24  10  -- I want more attributes from the ones I derived above:
05:42:24  11  -- clse relation to moving-min
05:42:24  12  ,clse-min4  cm4
05:42:24  13  ,clse-min6  cm6
05:42:24  14  ,clse-min8  cm8
05:42:24  15  ,clse-min10 cm10
05:42:24  16  ,clse-min12 cm12
05:42:24  17  ,clse-min14 cm14
05:42:24  18  ,clse-min16 cm16
05:42:24  19  ,clse-min18 cm18
05:42:24  20  -- clse relation to moving-avg
05:42:24  21  ,clse-avg4  ca4
05:42:24  22  ,clse-avg6  ca6
05:42:24  23  ,clse-avg8  ca8
05:42:24  24  ,clse-avg10 ca10
05:42:24  25  ,clse-avg12 ca12
05:42:24  26  ,clse-avg14 ca14
05:42:24  27  ,clse-avg16 ca16
05:42:24  28  ,clse-avg18 ca18
05:42:24  29  -- clse relation to moving-max
05:42:24  30  ,clse-max4  cx4
05:42:24  31  ,clse-max6  cx6
05:42:24  32  ,clse-max8  cx8
05:42:24  33  ,clse-max10 cx10
05:42:24  34  ,clse-max12 cx12
05:42:24  35  ,clse-max14 cx14
05:42:24  36  ,clse-max16 cx16
05:42:24  37  ,clse-max18 cx18
05:42:24  38  -- Derive more attributes.
05:42:24  39  -- I want to use CORR() here to help SVM see the shape of the series.
05:42:24  40  -- But COVAR_POP is more stable:
05:42:24  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
05:42:24  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
05:42:24  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
05:42:24  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
05:42:24  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
05:42:24  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
05:42:24  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
05:42:24  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
05:42:24  49  -- Derive date related attributes:
05:42:24  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
05:42:24  51  ,0+TO_CHAR(ydate,'D')d
05:42:24  52  ,0+TO_CHAR(ydate,'W')w
05:42:24  53  -- mpm stands for minutes-past-midnight:
05:42:24  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
05:42:24  55  -- mph stands for minutes-past-hour:
05:42:24  56  ,0+TO_CHAR(ydate,'MI')mph
05:42:24  57  FROM svm6102
05:42:24  58  ORDER BY ydate
05:42:24  59  /

Table created.

Elapsed: 00:00:02.08
05:42:26 SQL> 
05:42:26 SQL> -- rpt
05:42:26 SQL> 
05:42:26 SQL> SELECT
05:42:26   2  pair
05:42:26   3  ,COUNT(pair)
05:42:26   4  ,MIN(clse),MAX(clse)
05:42:26   5  ,MIN(ydate),MAX(ydate)
05:42:26   6  FROM svm6122
05:42:26   7  GROUP BY pair
05:42:26   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19799   1.535325	   1.6295 2010-10-04 05:45:01 2011-01-07 04:45:00

Elapsed: 00:00:00.04
05:42:26 SQL> 
05:42:26 SQL> -- Prepare for derivation of NTILE based params:
05:42:26 SQL> 
05:42:26 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.22
05:42:26 SQL> CREATE TABLE svm6142 COMPRESS AS
05:42:26   2  SELECT
05:42:26   3  pair
05:42:26   4  ,ydate
05:42:26   5  ,prdate
05:42:26   6  ,clse
05:42:26   7  ,g6
05:42:26   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
05:42:26   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
05:42:26  10  ,CASE WHEN trend IS NULL THEN 1
05:42:26  11  	    WHEN trend =0      THEN 1
05:42:26  12  	    ELSE trend END trend
05:42:26  13  ,cm4
05:42:26  14  ,cm6
05:42:26  15  ,cm8
05:42:26  16  ,cm10
05:42:26  17  ,cm12
05:42:26  18  ,cm14
05:42:26  19  ,cm16
05:42:26  20  ,cm18
05:42:26  21  --
05:42:26  22  ,ca4
05:42:26  23  ,ca6
05:42:26  24  ,ca8
05:42:26  25  ,ca10
05:42:26  26  ,ca12
05:42:26  27  ,ca14
05:42:26  28  ,ca16
05:42:26  29  ,ca18
05:42:26  30  --
05:42:26  31  ,cx4
05:42:26  32  ,cx6
05:42:26  33  ,cx8
05:42:26  34  ,cx10
05:42:26  35  ,cx12
05:42:26  36  ,cx14
05:42:26  37  ,cx16
05:42:26  38  ,cx18
05:42:26  39  --
05:42:26  40  ,crr4
05:42:26  41  ,crr6
05:42:26  42  ,crr8
05:42:26  43  ,crr10
05:42:26  44  ,crr12
05:42:26  45  ,crr14
05:42:26  46  ,crr16
05:42:26  47  ,crr18
05:42:26  48  --
05:42:26  49  ,hh
05:42:26  50  ,d
05:42:26  51  ,w
05:42:26  52  ,mpm
05:42:26  53  ,mph
05:42:26  54  FROM svm6122
05:42:26  55  ORDER BY ydate
05:42:26  56  /

Table created.

Elapsed: 00:00:00.36
05:42:26 SQL> 
05:42:26 SQL> -- rpt
05:42:26 SQL> 
05:42:26 SQL> SELECT
05:42:26   2  pair
05:42:26   3  ,trend
05:42:26   4  ,gatt
05:42:26   5  ,COUNT(pair)
05:42:26   6  ,AVG(g6)
05:42:26   7  FROM svm6142
05:42:26   8  GROUP BY pair,trend,gatt
05:42:26   9  ORDER BY pair,trend,gatt
05:42:26  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6431 -.00262526
gbp_usd 	-1 up	      3540 .004339326
gbp_usd 	-1		67
gbp_usd 	 1 nup	      6274 -.00265665
gbp_usd 	 1 up	      3482 .004527179
gbp_usd 	 1		 5

6 rows selected.

Elapsed: 00:00:00.04
05:42:26 SQL> 
05:42:26 SQL> 
05:42:26 SQL> -- Derive NTILE based params:
05:42:26 SQL> 
05:42:26 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.22
05:42:27 SQL> CREATE TABLE svm6162 COMPRESS AS
05:42:27   2  SELECT
05:42:27   3  pair
05:42:27   4  ,ydate
05:42:27   5  ,prdate
05:42:27   6  ,clse
05:42:27   7  ,g6
05:42:27   8  ,gatt
05:42:27   9  ,gattn
05:42:27  10  ,trend
05:42:27  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
05:42:27  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
05:42:27  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
05:42:27  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
05:42:27  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
05:42:27  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
05:42:27  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
05:42:27  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
05:42:27  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
05:42:27  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
05:42:27  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
05:42:27  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
05:42:27  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
05:42:27  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
05:42:27  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
05:42:27  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
05:42:27  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
05:42:27  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
05:42:27  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
05:42:27  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
05:42:27  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
05:42:27  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
05:42:27  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
05:42:27  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
05:42:27  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
05:42:27  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
05:42:27  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
05:42:27  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
05:42:27  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
05:42:27  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
05:42:27  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
05:42:27  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
05:42:27  43  ,hh  att32
05:42:27  44  ,d   att33
05:42:27  45  ,w   att34
05:42:27  46  ,mpm att35
05:42:27  47  ,mph att36
05:42:27  48  ,trend att37
05:42:27  49  FROM svm6142
05:42:27  50  ORDER BY ydate
05:42:27  51  /

Table created.

Elapsed: 00:00:04.74
05:42:31 SQL> 
05:42:31 SQL> -- rpt
05:42:31 SQL> 
05:42:31 SQL> SELECT
05:42:31   2  pair
05:42:31   3  ,trend
05:42:31   4  ,gatt
05:42:31   5  ,COUNT(pair)
05:42:31   6  ,AVG(g6)
05:42:31   7  FROM svm6162
05:42:31   8  GROUP BY pair,trend,gatt
05:42:31   9  ORDER BY pair,trend,gatt
05:42:31  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6431 -.00262526
gbp_usd 	-1 up	      3540 .004339326
gbp_usd 	-1		67
gbp_usd 	 1 nup	      6274 -.00265665
gbp_usd 	 1 up	      3482 .004527179
gbp_usd 	 1		 5

6 rows selected.

Elapsed: 00:00:00.02
05:42:31 SQL> 
05:42:31 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.16
05:42:32 SQL> CREATE TABLE modsrc COMPRESS AS
05:42:32   2  SELECT
05:42:32   3  pair
05:42:32   4  ,ydate
05:42:32   5  ,prdate
05:42:32   6  ,trend
05:42:32   7  ,g6
05:42:32   8  ,gatt
05:42:32   9  ,gattn
05:42:32  10  FROM svm6162
05:42:32  11  /

Table created.

Elapsed: 00:00:00.07
05:42:32 SQL> 
05:42:32 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
05:42:32 SQL> 
05:42:32 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
05:42:32 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
05:42:32   2  SELECT
05:42:32   3  ydate
05:42:32   4  ,trend gbp_trend
05:42:32   5  ,g6    gbp_g6
05:42:32   6  ,gatt  gbp_gatt
05:42:32   7  ,gattn gbp_gattn
05:42:32   8  FROM modsrc
05:42:32   9  /

Table created.

Elapsed: 00:00:00.08
05:42:32 SQL> 
05:42:32 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
05:42:32 SQL> 
05:42:32 SQL> -- I need a copy of the attributes:
05:42:32 SQL> 
05:42:32 SQL> 
05:42:32 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.04
05:42:32 SQL> CREATE TABLE gbp_att COMPRESS AS
05:42:32   2  SELECT
05:42:32   3  ydate
05:42:32   4  ,att00 gbp_att00
05:42:32   5  ,att01 gbp_att01
05:42:32   6  ,att02 gbp_att02
05:42:32   7  ,att03 gbp_att03
05:42:32   8  ,att04 gbp_att04
05:42:32   9  ,att05 gbp_att05
05:42:32  10  ,att06 gbp_att06
05:42:32  11  ,att07 gbp_att07
05:42:32  12  ,att08 gbp_att08
05:42:32  13  ,att09 gbp_att09
05:42:32  14  ,att10 gbp_att10
05:42:32  15  ,att11 gbp_att11
05:42:32  16  ,att12 gbp_att12
05:42:32  17  ,att13 gbp_att13
05:42:32  18  ,att14 gbp_att14
05:42:32  19  ,att15 gbp_att15
05:42:32  20  ,att16 gbp_att16
05:42:32  21  ,att17 gbp_att17
05:42:32  22  ,att18 gbp_att18
05:42:32  23  ,att19 gbp_att19
05:42:32  24  ,att20 gbp_att20
05:42:32  25  ,att21 gbp_att21
05:42:32  26  ,att22 gbp_att22
05:42:32  27  ,att23 gbp_att23
05:42:32  28  ,att24 gbp_att24
05:42:32  29  ,att25 gbp_att25
05:42:32  30  ,att26 gbp_att26
05:42:32  31  ,att27 gbp_att27
05:42:32  32  ,att28 gbp_att28
05:42:32  33  ,att29 gbp_att29
05:42:32  34  ,att30 gbp_att30
05:42:32  35  ,att31 gbp_att31
05:42:32  36  ,att32 gbp_att32
05:42:32  37  ,att33 gbp_att33
05:42:32  38  ,att34 gbp_att34
05:42:32  39  ,att35 gbp_att35
05:42:32  40  ,att36 gbp_att36
05:42:32  41  ,att37 gbp_att37
05:42:32  42  FROM svm6162
05:42:32  43  /

Table created.

Elapsed: 00:00:00.17
05:42:32 SQL> 
05:42:32 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
05:42:33 SQL> 
05:42:33 SQL> -- rpt
05:42:33 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19799

Elapsed: 00:00:00.89
05:42:34 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19799

Elapsed: 00:00:00.00
05:42:34 SQL> 
05:42:34 SQL> --
05:42:34 SQL> -- jpy610.sql
05:42:34 SQL> --
05:42:34 SQL> 
05:42:34 SQL> -- Creates views and tables for backtesting a forex SVM strategy
05:42:34 SQL> 
05:42:34 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.34
05:42:34 SQL> 
05:42:34 SQL> -- I created di5min here:
05:42:34 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
05:42:34 SQL> 
05:42:34 SQL> CREATE OR REPLACE VIEW svm6102 AS
05:42:34   2  SELECT
05:42:34   3  pair
05:42:34   4  ,ydate
05:42:34   5  ,prdate
05:42:34   6  ,rownum rnum -- acts as t in my time-series
05:42:34   7  ,clse
05:42:34   8  -- Derive a bunch of attributes from clse, the latest price:
05:42:34   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
05:42:34  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
05:42:34  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
05:42:34  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
05:42:34  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
05:42:34  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
05:42:34  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
05:42:34  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
05:42:34  17  --
05:42:34  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
05:42:34  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
05:42:34  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
05:42:34  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
05:42:34  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
05:42:34  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
05:42:34  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
05:42:34  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
05:42:34  26  --
05:42:34  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
05:42:34  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
05:42:34  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
05:42:34  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
05:42:34  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
05:42:34  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
05:42:34  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
05:42:34  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
05:42:34  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
05:42:34  36  FROM di5min WHERE pair LIKE'%jpy%'
05:42:34  37  AND ydate > sysdate - 95
05:42:34  38  ORDER BY ydate
05:42:34  39  /

View created.

Elapsed: 00:00:00.04
05:42:34 SQL> 
05:42:34 SQL> -- rpt
05:42:34 SQL> 
05:42:34 SQL> SELECT
05:42:34   2  pair
05:42:34   3  ,COUNT(pair)
05:42:34   4  ,MIN(clse),MAX(clse)
05:42:34   5  ,MIN(avg6),MAX(avg6)
05:42:34   6  ,MIN(ydate),MAX(ydate)
05:42:34   7  FROM svm6102
05:42:34   8  GROUP BY pair
05:42:34   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19798	 80.25	   84.485 80.3595205 84.3105479 2010-10-04 05:45:01 2011-01-07 04:45:00

Elapsed: 00:00:00.95
05:42:35 SQL> 
05:42:35 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
05:42:35 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.23
05:42:35 SQL> CREATE TABLE svm6122 COMPRESS AS
05:42:35   2  SELECT
05:42:35   3  pair
05:42:35   4  ,ydate
05:42:35   5  ,prdate
05:42:35   6  ,clse
05:42:35   7  -- g6 is important. I want to predict g6:
05:42:35   8  ,ld6 - clse g6
05:42:35   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
05:42:35  10  -- I want more attributes from the ones I derived above:
05:42:35  11  -- clse relation to moving-min
05:42:35  12  ,clse-min4  cm4
05:42:35  13  ,clse-min6  cm6
05:42:35  14  ,clse-min8  cm8
05:42:35  15  ,clse-min10 cm10
05:42:35  16  ,clse-min12 cm12
05:42:35  17  ,clse-min14 cm14
05:42:35  18  ,clse-min16 cm16
05:42:35  19  ,clse-min18 cm18
05:42:35  20  -- clse relation to moving-avg
05:42:35  21  ,clse-avg4  ca4
05:42:35  22  ,clse-avg6  ca6
05:42:35  23  ,clse-avg8  ca8
05:42:35  24  ,clse-avg10 ca10
05:42:35  25  ,clse-avg12 ca12
05:42:35  26  ,clse-avg14 ca14
05:42:35  27  ,clse-avg16 ca16
05:42:35  28  ,clse-avg18 ca18
05:42:35  29  -- clse relation to moving-max
05:42:35  30  ,clse-max4  cx4
05:42:35  31  ,clse-max6  cx6
05:42:35  32  ,clse-max8  cx8
05:42:35  33  ,clse-max10 cx10
05:42:35  34  ,clse-max12 cx12
05:42:35  35  ,clse-max14 cx14
05:42:35  36  ,clse-max16 cx16
05:42:35  37  ,clse-max18 cx18
05:42:35  38  -- Derive more attributes.
05:42:35  39  -- I want to use CORR() here to help SVM see the shape of the series.
05:42:35  40  -- But COVAR_POP is more stable:
05:42:35  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
05:42:35  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
05:42:35  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
05:42:35  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
05:42:35  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
05:42:35  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
05:42:35  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
05:42:35  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
05:42:35  49  -- Derive date related attributes:
05:42:35  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
05:42:35  51  ,0+TO_CHAR(ydate,'D')d
05:42:35  52  ,0+TO_CHAR(ydate,'W')w
05:42:35  53  -- mpm stands for minutes-past-midnight:
05:42:35  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
05:42:35  55  -- mph stands for minutes-past-hour:
05:42:35  56  ,0+TO_CHAR(ydate,'MI')mph
05:42:35  57  FROM svm6102
05:42:35  58  ORDER BY ydate
05:42:35  59  /

Table created.

Elapsed: 00:00:02.18
05:42:37 SQL> 
05:42:37 SQL> -- rpt
05:42:37 SQL> 
05:42:37 SQL> SELECT
05:42:37   2  pair
05:42:37   3  ,COUNT(pair)
05:42:37   4  ,MIN(clse),MAX(clse)
05:42:37   5  ,MIN(ydate),MAX(ydate)
05:42:37   6  FROM svm6122
05:42:37   7  GROUP BY pair
05:42:37   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19798	 80.25	   84.485 2010-10-04 05:45:01 2011-01-07 04:45:00

Elapsed: 00:00:00.05
05:42:37 SQL> 
05:42:37 SQL> -- Prepare for derivation of NTILE based params:
05:42:37 SQL> 
05:42:37 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.21
05:42:38 SQL> CREATE TABLE svm6142 COMPRESS AS
05:42:38   2  SELECT
05:42:38   3  pair
05:42:38   4  ,ydate
05:42:38   5  ,prdate
05:42:38   6  ,clse
05:42:38   7  ,g6
05:42:38   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
05:42:38   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
05:42:38  10  ,CASE WHEN trend IS NULL THEN 1
05:42:38  11  	    WHEN trend =0      THEN 1
05:42:38  12  	    ELSE trend END trend
05:42:38  13  ,cm4
05:42:38  14  ,cm6
05:42:38  15  ,cm8
05:42:38  16  ,cm10
05:42:38  17  ,cm12
05:42:38  18  ,cm14
05:42:38  19  ,cm16
05:42:38  20  ,cm18
05:42:38  21  --
05:42:38  22  ,ca4
05:42:38  23  ,ca6
05:42:38  24  ,ca8
05:42:38  25  ,ca10
05:42:38  26  ,ca12
05:42:38  27  ,ca14
05:42:38  28  ,ca16
05:42:38  29  ,ca18
05:42:38  30  --
05:42:38  31  ,cx4
05:42:38  32  ,cx6
05:42:38  33  ,cx8
05:42:38  34  ,cx10
05:42:38  35  ,cx12
05:42:38  36  ,cx14
05:42:38  37  ,cx16
05:42:38  38  ,cx18
05:42:38  39  --
05:42:38  40  ,crr4
05:42:38  41  ,crr6
05:42:38  42  ,crr8
05:42:38  43  ,crr10
05:42:38  44  ,crr12
05:42:38  45  ,crr14
05:42:38  46  ,crr16
05:42:38  47  ,crr18
05:42:38  48  --
05:42:38  49  ,hh
05:42:38  50  ,d
05:42:38  51  ,w
05:42:38  52  ,mpm
05:42:38  53  ,mph
05:42:38  54  FROM svm6122
05:42:38  55  ORDER BY ydate
05:42:38  56  /

Table created.

Elapsed: 00:00:00.37
05:42:38 SQL> 
05:42:38 SQL> -- rpt
05:42:38 SQL> 
05:42:38 SQL> SELECT
05:42:38   2  pair
05:42:38   3  ,trend
05:42:38   4  ,gatt
05:42:38   5  ,COUNT(pair)
05:42:38   6  ,AVG(g6)
05:42:38   7  FROM svm6142
05:42:38   8  GROUP BY pair,trend,gatt
05:42:38   9  ORDER BY pair,trend,gatt
05:42:38  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5182 -.16558763
usd_jpy 	-1 up	      4896  .16970081
usd_jpy 	-1		14
usd_jpy 	 1 nup	      5023 -.15276299
usd_jpy 	 1 up	      4625  .17236858
usd_jpy 	 1		58

6 rows selected.

Elapsed: 00:00:00.04
05:42:38 SQL> 
05:42:38 SQL> 
05:42:38 SQL> -- Derive NTILE based params:
05:42:38 SQL> 
05:42:38 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.17
05:42:38 SQL> CREATE TABLE svm6162 COMPRESS AS
05:42:38   2  SELECT
05:42:38   3  pair
05:42:38   4  ,ydate
05:42:38   5  ,prdate
05:42:38   6  ,clse
05:42:38   7  ,g6
05:42:38   8  ,gatt
05:42:38   9  ,gattn
05:42:38  10  ,trend
05:42:38  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
05:42:38  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
05:42:38  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
05:42:38  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
05:42:38  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
05:42:38  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
05:42:38  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
05:42:38  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
05:42:38  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
05:42:38  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
05:42:38  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
05:42:38  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
05:42:38  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
05:42:38  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
05:42:38  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
05:42:38  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
05:42:38  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
05:42:38  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
05:42:38  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
05:42:38  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
05:42:38  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
05:42:38  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
05:42:38  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
05:42:38  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
05:42:38  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
05:42:38  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
05:42:38  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
05:42:38  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
05:42:38  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
05:42:38  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
05:42:38  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
05:42:38  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
05:42:38  43  ,hh  att32
05:42:38  44  ,d   att33
05:42:38  45  ,w   att34
05:42:38  46  ,mpm att35
05:42:38  47  ,mph att36
05:42:38  48  ,trend att37
05:42:38  49  FROM svm6142
05:42:38  50  ORDER BY ydate
05:42:38  51  /

Table created.

Elapsed: 00:00:04.83
05:42:43 SQL> 
05:42:43 SQL> -- rpt
05:42:43 SQL> 
05:42:43 SQL> SELECT
05:42:43   2  pair
05:42:43   3  ,trend
05:42:43   4  ,gatt
05:42:43   5  ,COUNT(pair)
05:42:43   6  ,AVG(g6)
05:42:43   7  FROM svm6162
05:42:43   8  GROUP BY pair,trend,gatt
05:42:43   9  ORDER BY pair,trend,gatt
05:42:43  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5182 -.16558763
usd_jpy 	-1 up	      4896  .16970081
usd_jpy 	-1		14
usd_jpy 	 1 nup	      5023 -.15276299
usd_jpy 	 1 up	      4625  .17236858
usd_jpy 	 1		58

6 rows selected.

Elapsed: 00:00:00.03
05:42:43 SQL> 
05:42:43 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
05:42:43 SQL> CREATE TABLE modsrc COMPRESS AS
05:42:43   2  SELECT
05:42:43   3  pair
05:42:43   4  ,ydate
05:42:43   5  ,prdate
05:42:43   6  ,trend
05:42:43   7  ,g6
05:42:43   8  ,gatt
05:42:43   9  ,gattn
05:42:43  10  FROM svm6162
05:42:43  11  /

Table created.

Elapsed: 00:00:00.08
05:42:43 SQL> 
05:42:43 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
05:42:44 SQL> 
05:42:44 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
05:42:44 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
05:42:44   2  SELECT
05:42:44   3  ydate
05:42:44   4  ,trend jpy_trend
05:42:44   5  ,g6    jpy_g6
05:42:44   6  ,gatt  jpy_gatt
05:42:44   7  ,gattn jpy_gattn
05:42:44   8  FROM modsrc
05:42:44   9  /

Table created.

Elapsed: 00:00:00.07
05:42:44 SQL> 
05:42:44 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
05:42:44 SQL> 
05:42:44 SQL> -- I need a copy of the attributes:
05:42:44 SQL> 
05:42:44 SQL> 
05:42:44 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.04
05:42:44 SQL> CREATE TABLE jpy_att COMPRESS AS
05:42:44   2  SELECT
05:42:44   3  ydate
05:42:44   4  ,att00 jpy_att00
05:42:44   5  ,att01 jpy_att01
05:42:44   6  ,att02 jpy_att02
05:42:44   7  ,att03 jpy_att03
05:42:44   8  ,att04 jpy_att04
05:42:44   9  ,att05 jpy_att05
05:42:44  10  ,att06 jpy_att06
05:42:44  11  ,att07 jpy_att07
05:42:44  12  ,att08 jpy_att08
05:42:44  13  ,att09 jpy_att09
05:42:44  14  ,att10 jpy_att10
05:42:44  15  ,att11 jpy_att11
05:42:44  16  ,att12 jpy_att12
05:42:44  17  ,att13 jpy_att13
05:42:44  18  ,att14 jpy_att14
05:42:44  19  ,att15 jpy_att15
05:42:44  20  ,att16 jpy_att16
05:42:44  21  ,att17 jpy_att17
05:42:44  22  ,att18 jpy_att18
05:42:44  23  ,att19 jpy_att19
05:42:44  24  ,att20 jpy_att20
05:42:44  25  ,att21 jpy_att21
05:42:44  26  ,att22 jpy_att22
05:42:44  27  ,att23 jpy_att23
05:42:44  28  ,att24 jpy_att24
05:42:44  29  ,att25 jpy_att25
05:42:44  30  ,att26 jpy_att26
05:42:44  31  ,att27 jpy_att27
05:42:44  32  ,att28 jpy_att28
05:42:44  33  ,att29 jpy_att29
05:42:44  34  ,att30 jpy_att30
05:42:44  35  ,att31 jpy_att31
05:42:44  36  ,att32 jpy_att32
05:42:44  37  ,att33 jpy_att33
05:42:44  38  ,att34 jpy_att34
05:42:44  39  ,att35 jpy_att35
05:42:44  40  ,att36 jpy_att36
05:42:44  41  ,att37 jpy_att37
05:42:44  42  FROM svm6162
05:42:44  43  /

Table created.

Elapsed: 00:00:00.17
05:42:44 SQL> 
05:42:44 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.50
05:42:45 SQL> 
05:42:45 SQL> -- rpt
05:42:45 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19798

Elapsed: 00:00:00.93
05:42:46 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19798

Elapsed: 00:00:00.00
05:42:46 SQL> 
05:42:46 SQL> --
05:42:46 SQL> -- cad610.sql
05:42:46 SQL> --
05:42:46 SQL> 
05:42:46 SQL> -- Creates views and tables for backtesting a forex SVM strategy
05:42:46 SQL> 
05:42:46 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
05:42:46 SQL> 
05:42:46 SQL> -- I created di5min here:
05:42:46 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
05:42:46 SQL> 
05:42:46 SQL> CREATE OR REPLACE VIEW svm6102 AS
05:42:46   2  SELECT
05:42:46   3  pair
05:42:46   4  ,ydate
05:42:46   5  ,prdate
05:42:46   6  ,rownum rnum -- acts as t in my time-series
05:42:46   7  ,clse
05:42:46   8  -- Derive a bunch of attributes from clse, the latest price:
05:42:46   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
05:42:46  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
05:42:46  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
05:42:46  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
05:42:46  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
05:42:46  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
05:42:46  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
05:42:46  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
05:42:46  17  --
05:42:46  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
05:42:46  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
05:42:46  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
05:42:46  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
05:42:46  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
05:42:46  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
05:42:46  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
05:42:46  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
05:42:46  26  --
05:42:46  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
05:42:46  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
05:42:46  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
05:42:46  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
05:42:46  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
05:42:46  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
05:42:46  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
05:42:46  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
05:42:46  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
05:42:46  36  FROM di5min WHERE pair LIKE'%cad%'
05:42:46  37  AND ydate > sysdate - 95
05:42:46  38  ORDER BY ydate
05:42:46  39  /

View created.

Elapsed: 00:00:00.04
05:42:46 SQL> 
05:42:46 SQL> -- rpt
05:42:46 SQL> 
05:42:46 SQL> SELECT
05:42:46   2  pair
05:42:46   3  ,COUNT(pair)
05:42:46   4  ,MIN(clse),MAX(clse)
05:42:46   5  ,MIN(avg6),MAX(avg6)
05:42:46   6  ,MIN(ydate),MAX(ydate)
05:42:46   7  FROM svm6102
05:42:46   8  GROUP BY pair
05:42:46   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19798    .988925	   1.0355  .99060274 1.03282877 2010-10-04 05:45:01 2011-01-07 04:45:00

Elapsed: 00:00:00.87
05:42:47 SQL> 
05:42:47 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
05:42:47 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.28
05:42:47 SQL> CREATE TABLE svm6122 COMPRESS AS
05:42:47   2  SELECT
05:42:47   3  pair
05:42:47   4  ,ydate
05:42:47   5  ,prdate
05:42:47   6  ,clse
05:42:47   7  -- g6 is important. I want to predict g6:
05:42:47   8  ,ld6 - clse g6
05:42:47   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
05:42:47  10  -- I want more attributes from the ones I derived above:
05:42:47  11  -- clse relation to moving-min
05:42:47  12  ,clse-min4  cm4
05:42:47  13  ,clse-min6  cm6
05:42:47  14  ,clse-min8  cm8
05:42:47  15  ,clse-min10 cm10
05:42:47  16  ,clse-min12 cm12
05:42:47  17  ,clse-min14 cm14
05:42:47  18  ,clse-min16 cm16
05:42:47  19  ,clse-min18 cm18
05:42:47  20  -- clse relation to moving-avg
05:42:47  21  ,clse-avg4  ca4
05:42:47  22  ,clse-avg6  ca6
05:42:47  23  ,clse-avg8  ca8
05:42:47  24  ,clse-avg10 ca10
05:42:47  25  ,clse-avg12 ca12
05:42:47  26  ,clse-avg14 ca14
05:42:47  27  ,clse-avg16 ca16
05:42:47  28  ,clse-avg18 ca18
05:42:47  29  -- clse relation to moving-max
05:42:47  30  ,clse-max4  cx4
05:42:47  31  ,clse-max6  cx6
05:42:47  32  ,clse-max8  cx8
05:42:47  33  ,clse-max10 cx10
05:42:47  34  ,clse-max12 cx12
05:42:47  35  ,clse-max14 cx14
05:42:47  36  ,clse-max16 cx16
05:42:47  37  ,clse-max18 cx18
05:42:47  38  -- Derive more attributes.
05:42:47  39  -- I want to use CORR() here to help SVM see the shape of the series.
05:42:47  40  -- But COVAR_POP is more stable:
05:42:47  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
05:42:47  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
05:42:47  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
05:42:47  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
05:42:47  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
05:42:47  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
05:42:47  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
05:42:47  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
05:42:47  49  -- Derive date related attributes:
05:42:47  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
05:42:47  51  ,0+TO_CHAR(ydate,'D')d
05:42:47  52  ,0+TO_CHAR(ydate,'W')w
05:42:47  53  -- mpm stands for minutes-past-midnight:
05:42:47  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
05:42:47  55  -- mph stands for minutes-past-hour:
05:42:47  56  ,0+TO_CHAR(ydate,'MI')mph
05:42:47  57  FROM svm6102
05:42:47  58  ORDER BY ydate
05:42:47  59  /

Table created.

Elapsed: 00:00:02.13
05:42:49 SQL> 
05:42:49 SQL> -- rpt
05:42:49 SQL> 
05:42:49 SQL> SELECT
05:42:49   2  pair
05:42:49   3  ,COUNT(pair)
05:42:49   4  ,MIN(clse),MAX(clse)
05:42:49   5  ,MIN(ydate),MAX(ydate)
05:42:49   6  FROM svm6122
05:42:49   7  GROUP BY pair
05:42:49   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19798    .988925	   1.0355 2010-10-04 05:45:01 2011-01-07 04:45:00

Elapsed: 00:00:00.04
05:42:49 SQL> 
05:42:49 SQL> -- Prepare for derivation of NTILE based params:
05:42:49 SQL> 
05:42:49 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.26
05:42:50 SQL> CREATE TABLE svm6142 COMPRESS AS
05:42:50   2  SELECT
05:42:50   3  pair
05:42:50   4  ,ydate
05:42:50   5  ,prdate
05:42:50   6  ,clse
05:42:50   7  ,g6
05:42:50   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
05:42:50   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
05:42:50  10  ,CASE WHEN trend IS NULL THEN 1
05:42:50  11  	    WHEN trend =0      THEN 1
05:42:50  12  	    ELSE trend END trend
05:42:50  13  ,cm4
05:42:50  14  ,cm6
05:42:50  15  ,cm8
05:42:50  16  ,cm10
05:42:50  17  ,cm12
05:42:50  18  ,cm14
05:42:50  19  ,cm16
05:42:50  20  ,cm18
05:42:50  21  --
05:42:50  22  ,ca4
05:42:50  23  ,ca6
05:42:50  24  ,ca8
05:42:50  25  ,ca10
05:42:50  26  ,ca12
05:42:50  27  ,ca14
05:42:50  28  ,ca16
05:42:50  29  ,ca18
05:42:50  30  --
05:42:50  31  ,cx4
05:42:50  32  ,cx6
05:42:50  33  ,cx8
05:42:50  34  ,cx10
05:42:50  35  ,cx12
05:42:50  36  ,cx14
05:42:50  37  ,cx16
05:42:50  38  ,cx18
05:42:50  39  --
05:42:50  40  ,crr4
05:42:50  41  ,crr6
05:42:50  42  ,crr8
05:42:50  43  ,crr10
05:42:50  44  ,crr12
05:42:50  45  ,crr14
05:42:50  46  ,crr16
05:42:50  47  ,crr18
05:42:50  48  --
05:42:50  49  ,hh
05:42:50  50  ,d
05:42:50  51  ,w
05:42:50  52  ,mpm
05:42:50  53  ,mph
05:42:50  54  FROM svm6122
05:42:50  55  ORDER BY ydate
05:42:50  56  /

Table created.

Elapsed: 00:00:00.39
05:42:50 SQL> 
05:42:50 SQL> -- rpt
05:42:50 SQL> 
05:42:50 SQL> SELECT
05:42:50   2  pair
05:42:50   3  ,trend
05:42:50   4  ,gatt
05:42:50   5  ,COUNT(pair)
05:42:50   6  ,AVG(g6)
05:42:50   7  FROM svm6142
05:42:50   8  GROUP BY pair,trend,gatt
05:42:50   9  ORDER BY pair,trend,gatt
05:42:50  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7324  -.0012402
usd_cad 	-1 up	      3148 .003048994
usd_cad 	-1		 7
usd_cad 	 1 nup	      6846 -.00160371
usd_cad 	 1 up	      2408 .003631243
usd_cad 	 1		65

6 rows selected.

Elapsed: 00:00:00.04
05:42:50 SQL> 
05:42:50 SQL> 
05:42:50 SQL> -- Derive NTILE based params:
05:42:50 SQL> 
05:42:50 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.21
05:42:50 SQL> CREATE TABLE svm6162 COMPRESS AS
05:42:50   2  SELECT
05:42:50   3  pair
05:42:50   4  ,ydate
05:42:50   5  ,prdate
05:42:50   6  ,clse
05:42:50   7  ,g6
05:42:50   8  ,gatt
05:42:50   9  ,gattn
05:42:50  10  ,trend
05:42:50  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
05:42:50  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
05:42:50  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
05:42:50  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
05:42:50  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
05:42:50  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
05:42:50  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
05:42:50  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
05:42:50  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
05:42:50  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
05:42:50  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
05:42:50  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
05:42:50  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
05:42:50  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
05:42:50  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
05:42:50  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
05:42:50  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
05:42:50  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
05:42:50  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
05:42:50  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
05:42:50  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
05:42:50  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
05:42:50  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
05:42:50  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
05:42:50  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
05:42:50  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
05:42:50  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
05:42:50  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
05:42:50  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
05:42:50  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
05:42:50  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
05:42:50  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
05:42:50  43  ,hh  att32
05:42:50  44  ,d   att33
05:42:50  45  ,w   att34
05:42:50  46  ,mpm att35
05:42:50  47  ,mph att36
05:42:50  48  ,trend att37
05:42:50  49  FROM svm6142
05:42:50  50  ORDER BY ydate
05:42:50  51  /

Table created.

Elapsed: 00:00:05.40
05:42:56 SQL> 
05:42:56 SQL> -- rpt
05:42:56 SQL> 
05:42:56 SQL> SELECT
05:42:56   2  pair
05:42:56   3  ,trend
05:42:56   4  ,gatt
05:42:56   5  ,COUNT(pair)
05:42:56   6  ,AVG(g6)
05:42:56   7  FROM svm6162
05:42:56   8  GROUP BY pair,trend,gatt
05:42:56   9  ORDER BY pair,trend,gatt
05:42:56  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7324  -.0012402
usd_cad 	-1 up	      3148 .003048994
usd_cad 	-1		 7
usd_cad 	 1 nup	      6846 -.00160371
usd_cad 	 1 up	      2408 .003631243
usd_cad 	 1		65

6 rows selected.

Elapsed: 00:00:00.03
05:42:56 SQL> 
05:42:56 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.14
05:42:56 SQL> CREATE TABLE modsrc COMPRESS AS
05:42:56   2  SELECT
05:42:56   3  pair
05:42:56   4  ,ydate
05:42:56   5  ,prdate
05:42:56   6  ,trend
05:42:56   7  ,g6
05:42:56   8  ,gatt
05:42:56   9  ,gattn
05:42:56  10  FROM svm6162
05:42:56  11  /

Table created.

Elapsed: 00:00:00.09
05:42:56 SQL> 
05:42:56 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.29
05:42:56 SQL> 
05:42:56 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
05:42:56 SQL> CREATE TABLE cad_ms610 COMPRESS AS
05:42:56   2  SELECT
05:42:56   3  ydate
05:42:56   4  ,trend cad_trend
05:42:56   5  ,g6    cad_g6
05:42:56   6  ,gatt  cad_gatt
05:42:56   7  ,gattn cad_gattn
05:42:56   8  FROM modsrc
05:42:56   9  /

Table created.

Elapsed: 00:00:00.06
05:42:56 SQL> 
05:42:56 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
05:42:57 SQL> 
05:42:57 SQL> -- I need a copy of the attributes:
05:42:57 SQL> 
05:42:57 SQL> 
05:42:57 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.05
05:42:57 SQL> CREATE TABLE cad_att COMPRESS AS
05:42:57   2  SELECT
05:42:57   3  ydate
05:42:57   4  ,att00 cad_att00
05:42:57   5  ,att01 cad_att01
05:42:57   6  ,att02 cad_att02
05:42:57   7  ,att03 cad_att03
05:42:57   8  ,att04 cad_att04
05:42:57   9  ,att05 cad_att05
05:42:57  10  ,att06 cad_att06
05:42:57  11  ,att07 cad_att07
05:42:57  12  ,att08 cad_att08
05:42:57  13  ,att09 cad_att09
05:42:57  14  ,att10 cad_att10
05:42:57  15  ,att11 cad_att11
05:42:57  16  ,att12 cad_att12
05:42:57  17  ,att13 cad_att13
05:42:57  18  ,att14 cad_att14
05:42:57  19  ,att15 cad_att15
05:42:57  20  ,att16 cad_att16
05:42:57  21  ,att17 cad_att17
05:42:57  22  ,att18 cad_att18
05:42:57  23  ,att19 cad_att19
05:42:57  24  ,att20 cad_att20
05:42:57  25  ,att21 cad_att21
05:42:57  26  ,att22 cad_att22
05:42:57  27  ,att23 cad_att23
05:42:57  28  ,att24 cad_att24
05:42:57  29  ,att25 cad_att25
05:42:57  30  ,att26 cad_att26
05:42:57  31  ,att27 cad_att27
05:42:57  32  ,att28 cad_att28
05:42:57  33  ,att29 cad_att29
05:42:57  34  ,att30 cad_att30
05:42:57  35  ,att31 cad_att31
05:42:57  36  ,att32 cad_att32
05:42:57  37  ,att33 cad_att33
05:42:57  38  ,att34 cad_att34
05:42:57  39  ,att35 cad_att35
05:42:57  40  ,att36 cad_att36
05:42:57  41  ,att37 cad_att37
05:42:57  42  FROM svm6162
05:42:57  43  /

Table created.

Elapsed: 00:00:00.18
05:42:57 SQL> 
05:42:57 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
05:42:57 SQL> 
05:42:57 SQL> -- rpt
05:42:57 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19798

Elapsed: 00:00:00.83
05:42:58 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19798

Elapsed: 00:00:00.00
05:42:58 SQL> 
05:42:58 SQL> --
05:42:58 SQL> -- chf610.sql
05:42:58 SQL> --
05:42:58 SQL> 
05:42:58 SQL> -- Creates views and tables for backtesting a forex SVM strategy
05:42:58 SQL> 
05:42:58 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
05:42:58 SQL> 
05:42:58 SQL> -- I created di5min here:
05:42:58 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
05:42:58 SQL> 
05:42:58 SQL> CREATE OR REPLACE VIEW svm6102 AS
05:42:58   2  SELECT
05:42:58   3  pair
05:42:58   4  ,ydate
05:42:58   5  ,prdate
05:42:58   6  ,rownum rnum -- acts as t in my time-series
05:42:58   7  ,clse
05:42:58   8  -- Derive a bunch of attributes from clse, the latest price:
05:42:58   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
05:42:58  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
05:42:58  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
05:42:58  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
05:42:58  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
05:42:58  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
05:42:58  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
05:42:58  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
05:42:58  17  --
05:42:58  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
05:42:58  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
05:42:58  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
05:42:58  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
05:42:58  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
05:42:58  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
05:42:58  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
05:42:58  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
05:42:58  26  --
05:42:58  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
05:42:58  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
05:42:58  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
05:42:58  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
05:42:58  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
05:42:58  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
05:42:58  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
05:42:58  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
05:42:58  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
05:42:58  36  FROM di5min WHERE pair LIKE'%chf%'
05:42:58  37  AND ydate > sysdate - 95
05:42:58  38  ORDER BY ydate
05:42:58  39  /

View created.

Elapsed: 00:00:00.03
05:42:58 SQL> 
05:42:58 SQL> -- rpt
05:42:58 SQL> 
05:42:58 SQL> SELECT
05:42:58   2  pair
05:42:58   3  ,COUNT(pair)
05:42:58   4  ,MIN(clse),MAX(clse)
05:42:58   5  ,MIN(avg6),MAX(avg6)
05:42:58   6  ,MIN(ydate),MAX(ydate)
05:42:58   7  FROM svm6102
05:42:58   8  GROUP BY pair
05:42:58   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19801    .931675	  1.00635 .933257705 1.00498151 2010-10-04 05:45:01 2011-01-07 04:45:00

Elapsed: 00:00:00.91
05:42:59 SQL> 
05:42:59 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
05:42:59 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.34
05:43:00 SQL> CREATE TABLE svm6122 COMPRESS AS
05:43:00   2  SELECT
05:43:00   3  pair
05:43:00   4  ,ydate
05:43:00   5  ,prdate
05:43:00   6  ,clse
05:43:00   7  -- g6 is important. I want to predict g6:
05:43:00   8  ,ld6 - clse g6
05:43:00   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
05:43:00  10  -- I want more attributes from the ones I derived above:
05:43:00  11  -- clse relation to moving-min
05:43:00  12  ,clse-min4  cm4
05:43:00  13  ,clse-min6  cm6
05:43:00  14  ,clse-min8  cm8
05:43:00  15  ,clse-min10 cm10
05:43:00  16  ,clse-min12 cm12
05:43:00  17  ,clse-min14 cm14
05:43:00  18  ,clse-min16 cm16
05:43:00  19  ,clse-min18 cm18
05:43:00  20  -- clse relation to moving-avg
05:43:00  21  ,clse-avg4  ca4
05:43:00  22  ,clse-avg6  ca6
05:43:00  23  ,clse-avg8  ca8
05:43:00  24  ,clse-avg10 ca10
05:43:00  25  ,clse-avg12 ca12
05:43:00  26  ,clse-avg14 ca14
05:43:00  27  ,clse-avg16 ca16
05:43:00  28  ,clse-avg18 ca18
05:43:00  29  -- clse relation to moving-max
05:43:00  30  ,clse-max4  cx4
05:43:00  31  ,clse-max6  cx6
05:43:00  32  ,clse-max8  cx8
05:43:00  33  ,clse-max10 cx10
05:43:00  34  ,clse-max12 cx12
05:43:00  35  ,clse-max14 cx14
05:43:00  36  ,clse-max16 cx16
05:43:00  37  ,clse-max18 cx18
05:43:00  38  -- Derive more attributes.
05:43:00  39  -- I want to use CORR() here to help SVM see the shape of the series.
05:43:00  40  -- But COVAR_POP is more stable:
05:43:00  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
05:43:00  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
05:43:00  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
05:43:00  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
05:43:00  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
05:43:00  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
05:43:00  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
05:43:00  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
05:43:00  49  -- Derive date related attributes:
05:43:00  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
05:43:00  51  ,0+TO_CHAR(ydate,'D')d
05:43:00  52  ,0+TO_CHAR(ydate,'W')w
05:43:00  53  -- mpm stands for minutes-past-midnight:
05:43:00  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
05:43:00  55  -- mph stands for minutes-past-hour:
05:43:00  56  ,0+TO_CHAR(ydate,'MI')mph
05:43:00  57  FROM svm6102
05:43:00  58  ORDER BY ydate
05:43:00  59  /

Table created.

Elapsed: 00:00:02.13
05:43:02 SQL> 
05:43:02 SQL> -- rpt
05:43:02 SQL> 
05:43:02 SQL> SELECT
05:43:02   2  pair
05:43:02   3  ,COUNT(pair)
05:43:02   4  ,MIN(clse),MAX(clse)
05:43:02   5  ,MIN(ydate),MAX(ydate)
05:43:02   6  FROM svm6122
05:43:02   7  GROUP BY pair
05:43:02   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19801    .931675	  1.00635 2010-10-04 05:45:01 2011-01-07 04:45:00

Elapsed: 00:00:00.04
05:43:02 SQL> 
05:43:02 SQL> -- Prepare for derivation of NTILE based params:
05:43:02 SQL> 
05:43:02 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.18
05:43:02 SQL> CREATE TABLE svm6142 COMPRESS AS
05:43:02   2  SELECT
05:43:02   3  pair
05:43:02   4  ,ydate
05:43:02   5  ,prdate
05:43:02   6  ,clse
05:43:02   7  ,g6
05:43:02   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
05:43:02   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
05:43:02  10  ,CASE WHEN trend IS NULL THEN 1
05:43:02  11  	    WHEN trend =0      THEN 1
05:43:02  12  	    ELSE trend END trend
05:43:02  13  ,cm4
05:43:02  14  ,cm6
05:43:02  15  ,cm8
05:43:02  16  ,cm10
05:43:02  17  ,cm12
05:43:02  18  ,cm14
05:43:02  19  ,cm16
05:43:02  20  ,cm18
05:43:02  21  --
05:43:02  22  ,ca4
05:43:02  23  ,ca6
05:43:02  24  ,ca8
05:43:02  25  ,ca10
05:43:02  26  ,ca12
05:43:02  27  ,ca14
05:43:02  28  ,ca16
05:43:02  29  ,ca18
05:43:02  30  --
05:43:02  31  ,cx4
05:43:02  32  ,cx6
05:43:02  33  ,cx8
05:43:02  34  ,cx10
05:43:02  35  ,cx12
05:43:02  36  ,cx14
05:43:02  37  ,cx16
05:43:02  38  ,cx18
05:43:02  39  --
05:43:02  40  ,crr4
05:43:02  41  ,crr6
05:43:02  42  ,crr8
05:43:02  43  ,crr10
05:43:02  44  ,crr12
05:43:02  45  ,crr14
05:43:02  46  ,crr16
05:43:02  47  ,crr18
05:43:02  48  --
05:43:02  49  ,hh
05:43:02  50  ,d
05:43:02  51  ,w
05:43:02  52  ,mpm
05:43:02  53  ,mph
05:43:02  54  FROM svm6122
05:43:02  55  ORDER BY ydate
05:43:02  56  /

Table created.

Elapsed: 00:00:00.39
05:43:02 SQL> 
05:43:02 SQL> -- rpt
05:43:02 SQL> 
05:43:02 SQL> SELECT
05:43:02   2  pair
05:43:02   3  ,trend
05:43:02   4  ,gatt
05:43:02   5  ,COUNT(pair)
05:43:02   6  ,AVG(g6)
05:43:02   7  FROM svm6142
05:43:02   8  GROUP BY pair,trend,gatt
05:43:02   9  ORDER BY pair,trend,gatt
05:43:02  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7166  -.0019707
usd_chf 	-1 up	      3083 .003811811
usd_chf 	-1		23
usd_chf 	 1 nup	      6535 -.00152602
usd_chf 	 1 up	      2945 .003959629
usd_chf 	 1		49

6 rows selected.

Elapsed: 00:00:00.04
05:43:02 SQL> 
05:43:02 SQL> 
05:43:02 SQL> -- Derive NTILE based params:
05:43:02 SQL> 
05:43:02 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
05:43:03 SQL> CREATE TABLE svm6162 COMPRESS AS
05:43:03   2  SELECT
05:43:03   3  pair
05:43:03   4  ,ydate
05:43:03   5  ,prdate
05:43:03   6  ,clse
05:43:03   7  ,g6
05:43:03   8  ,gatt
05:43:03   9  ,gattn
05:43:03  10  ,trend
05:43:03  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
05:43:03  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
05:43:03  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
05:43:03  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
05:43:03  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
05:43:03  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
05:43:03  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
05:43:03  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
05:43:03  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
05:43:03  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
05:43:03  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
05:43:03  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
05:43:03  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
05:43:03  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
05:43:03  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
05:43:03  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
05:43:03  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
05:43:03  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
05:43:03  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
05:43:03  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
05:43:03  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
05:43:03  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
05:43:03  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
05:43:03  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
05:43:03  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
05:43:03  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
05:43:03  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
05:43:03  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
05:43:03  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
05:43:03  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
05:43:03  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
05:43:03  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
05:43:03  43  ,hh  att32
05:43:03  44  ,d   att33
05:43:03  45  ,w   att34
05:43:03  46  ,mpm att35
05:43:03  47  ,mph att36
05:43:03  48  ,trend att37
05:43:03  49  FROM svm6142
05:43:03  50  ORDER BY ydate
05:43:03  51  /

Table created.

Elapsed: 00:00:04.99
05:43:08 SQL> 
05:43:08 SQL> -- rpt
05:43:08 SQL> 
05:43:08 SQL> SELECT
05:43:08   2  pair
05:43:08   3  ,trend
05:43:08   4  ,gatt
05:43:08   5  ,COUNT(pair)
05:43:08   6  ,AVG(g6)
05:43:08   7  FROM svm6162
05:43:08   8  GROUP BY pair,trend,gatt
05:43:08   9  ORDER BY pair,trend,gatt
05:43:08  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7166  -.0019707
usd_chf 	-1 up	      3083 .003811811
usd_chf 	-1		23
usd_chf 	 1 nup	      6535 -.00152602
usd_chf 	 1 up	      2945 .003959629
usd_chf 	 1		49

6 rows selected.

Elapsed: 00:00:00.03
05:43:08 SQL> 
05:43:08 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
05:43:08 SQL> CREATE TABLE modsrc COMPRESS AS
05:43:08   2  SELECT
05:43:08   3  pair
05:43:08   4  ,ydate
05:43:08   5  ,prdate
05:43:08   6  ,trend
05:43:08   7  ,g6
05:43:08   8  ,gatt
05:43:08   9  ,gattn
05:43:08  10  FROM svm6162
05:43:08  11  /

Table created.

Elapsed: 00:00:00.10
05:43:08 SQL> 
05:43:08 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
05:43:08 SQL> 
05:43:08 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
05:43:08 SQL> CREATE TABLE chf_ms610 COMPRESS AS
05:43:08   2  SELECT
05:43:08   3  ydate
05:43:08   4  ,trend chf_trend
05:43:08   5  ,g6    chf_g6
05:43:08   6  ,gatt  chf_gatt
05:43:08   7  ,gattn chf_gattn
05:43:08   8  FROM modsrc
05:43:08   9  /

Table created.

Elapsed: 00:00:00.08
05:43:08 SQL> 
05:43:08 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
05:43:08 SQL> 
05:43:08 SQL> -- I need a copy of the attributes:
05:43:08 SQL> 
05:43:08 SQL> 
05:43:08 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.05
05:43:08 SQL> CREATE TABLE chf_att COMPRESS AS
05:43:08   2  SELECT
05:43:08   3  ydate
05:43:08   4  ,att00 chf_att00
05:43:08   5  ,att01 chf_att01
05:43:08   6  ,att02 chf_att02
05:43:08   7  ,att03 chf_att03
05:43:08   8  ,att04 chf_att04
05:43:08   9  ,att05 chf_att05
05:43:08  10  ,att06 chf_att06
05:43:08  11  ,att07 chf_att07
05:43:08  12  ,att08 chf_att08
05:43:08  13  ,att09 chf_att09
05:43:08  14  ,att10 chf_att10
05:43:08  15  ,att11 chf_att11
05:43:08  16  ,att12 chf_att12
05:43:08  17  ,att13 chf_att13
05:43:08  18  ,att14 chf_att14
05:43:08  19  ,att15 chf_att15
05:43:08  20  ,att16 chf_att16
05:43:08  21  ,att17 chf_att17
05:43:08  22  ,att18 chf_att18
05:43:08  23  ,att19 chf_att19
05:43:08  24  ,att20 chf_att20
05:43:08  25  ,att21 chf_att21
05:43:08  26  ,att22 chf_att22
05:43:08  27  ,att23 chf_att23
05:43:08  28  ,att24 chf_att24
05:43:08  29  ,att25 chf_att25
05:43:08  30  ,att26 chf_att26
05:43:08  31  ,att27 chf_att27
05:43:08  32  ,att28 chf_att28
05:43:08  33  ,att29 chf_att29
05:43:08  34  ,att30 chf_att30
05:43:08  35  ,att31 chf_att31
05:43:08  36  ,att32 chf_att32
05:43:08  37  ,att33 chf_att33
05:43:08  38  ,att34 chf_att34
05:43:08  39  ,att35 chf_att35
05:43:08  40  ,att36 chf_att36
05:43:08  41  ,att37 chf_att37
05:43:08  42  FROM svm6162
05:43:08  43  /

Table created.

Elapsed: 00:00:00.17
05:43:09 SQL> 
05:43:09 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
05:43:09 SQL> 
05:43:09 SQL> -- rpt
05:43:09 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19801

Elapsed: 00:00:00.90
05:43:10 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19801

Elapsed: 00:00:00.00
05:43:10 SQL> 
05:43:10 SQL> --
05:43:10 SQL> -- ech610.sql
05:43:10 SQL> --
05:43:10 SQL> 
05:43:10 SQL> -- Creates views and tables for backtesting a forex SVM strategy
05:43:10 SQL> 
05:43:10 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.90
05:43:11 SQL> 
05:43:11 SQL> -- I created di5min here:
05:43:11 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
05:43:11 SQL> 
05:43:11 SQL> CREATE OR REPLACE VIEW svm6102 AS
05:43:11   2  SELECT
05:43:11   3  pair
05:43:11   4  ,ydate
05:43:11   5  ,prdate
05:43:11   6  ,rownum rnum -- acts as t in my time-series
05:43:11   7  ,clse
05:43:11   8  -- Derive a bunch of attributes from clse, the latest price:
05:43:11   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
05:43:11  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
05:43:11  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
05:43:11  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
05:43:11  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
05:43:11  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
05:43:11  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
05:43:11  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
05:43:11  17  --
05:43:11  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
05:43:11  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
05:43:11  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
05:43:11  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
05:43:11  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
05:43:11  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
05:43:11  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
05:43:11  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
05:43:11  26  --
05:43:11  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
05:43:11  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
05:43:11  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
05:43:11  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
05:43:11  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
05:43:11  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
05:43:11  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
05:43:11  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
05:43:11  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
05:43:11  36  FROM di5min WHERE pair LIKE'%ech%'
05:43:11  37  AND ydate > sysdate - 95
05:43:11  38  ORDER BY ydate
05:43:11  39  /

View created.

Elapsed: 00:00:00.05
05:43:11 SQL> 
05:43:11 SQL> -- rpt
05:43:11 SQL> 
05:43:11 SQL> SELECT
05:43:11   2  pair
05:43:11   3  ,COUNT(pair)
05:43:11   4  ,MIN(clse),MAX(clse)
05:43:11   5  ,MIN(avg6),MAX(avg6)
05:43:11   6  ,MIN(ydate),MAX(ydate)
05:43:11   7  FROM svm6102
05:43:11   8  GROUP BY pair
05:43:11   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19799 1.24182424 1.38284305 1.24320711 1.37986485 2010-10-04 05:45:01 2011-01-07 04:45:00

Elapsed: 00:00:00.81
05:43:12 SQL> 
05:43:12 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
05:43:12 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.25
05:43:12 SQL> CREATE TABLE svm6122 COMPRESS AS
05:43:12   2  SELECT
05:43:12   3  pair
05:43:12   4  ,ydate
05:43:12   5  ,prdate
05:43:12   6  ,clse
05:43:12   7  -- g6 is important. I want to predict g6:
05:43:12   8  ,ld6 - clse g6
05:43:12   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
05:43:12  10  -- I want more attributes from the ones I derived above:
05:43:12  11  -- clse relation to moving-min
05:43:12  12  ,clse-min4  cm4
05:43:12  13  ,clse-min6  cm6
05:43:12  14  ,clse-min8  cm8
05:43:12  15  ,clse-min10 cm10
05:43:12  16  ,clse-min12 cm12
05:43:12  17  ,clse-min14 cm14
05:43:12  18  ,clse-min16 cm16
05:43:12  19  ,clse-min18 cm18
05:43:12  20  -- clse relation to moving-avg
05:43:12  21  ,clse-avg4  ca4
05:43:12  22  ,clse-avg6  ca6
05:43:12  23  ,clse-avg8  ca8
05:43:12  24  ,clse-avg10 ca10
05:43:12  25  ,clse-avg12 ca12
05:43:12  26  ,clse-avg14 ca14
05:43:12  27  ,clse-avg16 ca16
05:43:12  28  ,clse-avg18 ca18
05:43:12  29  -- clse relation to moving-max
05:43:12  30  ,clse-max4  cx4
05:43:12  31  ,clse-max6  cx6
05:43:12  32  ,clse-max8  cx8
05:43:12  33  ,clse-max10 cx10
05:43:12  34  ,clse-max12 cx12
05:43:12  35  ,clse-max14 cx14
05:43:12  36  ,clse-max16 cx16
05:43:12  37  ,clse-max18 cx18
05:43:12  38  -- Derive more attributes.
05:43:12  39  -- I want to use CORR() here to help SVM see the shape of the series.
05:43:12  40  -- But COVAR_POP is more stable:
05:43:12  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
05:43:12  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
05:43:12  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
05:43:12  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
05:43:12  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
05:43:12  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
05:43:12  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
05:43:12  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
05:43:12  49  -- Derive date related attributes:
05:43:12  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
05:43:12  51  ,0+TO_CHAR(ydate,'D')d
05:43:12  52  ,0+TO_CHAR(ydate,'W')w
05:43:12  53  -- mpm stands for minutes-past-midnight:
05:43:12  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
05:43:12  55  -- mph stands for minutes-past-hour:
05:43:12  56  ,0+TO_CHAR(ydate,'MI')mph
05:43:12  57  FROM svm6102
05:43:12  58  ORDER BY ydate
05:43:12  59  /

Table created.

Elapsed: 00:00:02.15
05:43:14 SQL> 
05:43:14 SQL> -- rpt
05:43:14 SQL> 
05:43:14 SQL> SELECT
05:43:14   2  pair
05:43:14   3  ,COUNT(pair)
05:43:14   4  ,MIN(clse),MAX(clse)
05:43:14   5  ,MIN(ydate),MAX(ydate)
05:43:14   6  FROM svm6122
05:43:14   7  GROUP BY pair
05:43:14   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19799 1.24182424 1.38284305 2010-10-04 05:45:01 2011-01-07 04:45:00

Elapsed: 00:00:00.04
05:43:14 SQL> 
05:43:14 SQL> -- Prepare for derivation of NTILE based params:
05:43:14 SQL> 
05:43:14 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.35
05:43:14 SQL> CREATE TABLE svm6142 COMPRESS AS
05:43:14   2  SELECT
05:43:14   3  pair
05:43:14   4  ,ydate
05:43:14   5  ,prdate
05:43:14   6  ,clse
05:43:14   7  ,g6
05:43:14   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
05:43:14   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
05:43:14  10  ,CASE WHEN trend IS NULL THEN 1
05:43:14  11  	    WHEN trend =0      THEN 1
05:43:14  12  	    ELSE trend END trend
05:43:14  13  ,cm4
05:43:14  14  ,cm6
05:43:14  15  ,cm8
05:43:14  16  ,cm10
05:43:14  17  ,cm12
05:43:14  18  ,cm14
05:43:14  19  ,cm16
05:43:14  20  ,cm18
05:43:14  21  --
05:43:14  22  ,ca4
05:43:14  23  ,ca6
05:43:14  24  ,ca8
05:43:14  25  ,ca10
05:43:14  26  ,ca12
05:43:14  27  ,ca14
05:43:14  28  ,ca16
05:43:14  29  ,ca18
05:43:14  30  --
05:43:14  31  ,cx4
05:43:14  32  ,cx6
05:43:14  33  ,cx8
05:43:14  34  ,cx10
05:43:14  35  ,cx12
05:43:14  36  ,cx14
05:43:14  37  ,cx16
05:43:14  38  ,cx18
05:43:14  39  --
05:43:14  40  ,crr4
05:43:14  41  ,crr6
05:43:14  42  ,crr8
05:43:14  43  ,crr10
05:43:14  44  ,crr12
05:43:14  45  ,crr14
05:43:14  46  ,crr16
05:43:14  47  ,crr18
05:43:14  48  --
05:43:14  49  ,hh
05:43:14  50  ,d
05:43:14  51  ,w
05:43:14  52  ,mpm
05:43:14  53  ,mph
05:43:14  54  FROM svm6122
05:43:14  55  ORDER BY ydate
05:43:14  56  /

Table created.

Elapsed: 00:00:00.40
05:43:15 SQL> 
05:43:15 SQL> -- rpt
05:43:15 SQL> 
05:43:15 SQL> SELECT
05:43:15   2  pair
05:43:15   3  ,trend
05:43:15   4  ,gatt
05:43:15   5  ,COUNT(pair)
05:43:15   6  ,AVG(g6)
05:43:15   7  FROM svm6142
05:43:15   8  GROUP BY pair,trend,gatt
05:43:15   9  ORDER BY pair,trend,gatt
05:43:15  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6858 -.00230344
ech_usd 	-1 up	      3567 .003580667
ech_usd 	-1		53
ech_usd 	 1 nup	      6397 -.00232211
ech_usd 	 1 up	      2905 .004122708
ech_usd 	 1		19

6 rows selected.

Elapsed: 00:00:00.04
05:43:15 SQL> 
05:43:15 SQL> 
05:43:15 SQL> -- Derive NTILE based params:
05:43:15 SQL> 
05:43:15 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.19
05:43:15 SQL> CREATE TABLE svm6162 COMPRESS AS
05:43:15   2  SELECT
05:43:15   3  pair
05:43:15   4  ,ydate
05:43:15   5  ,prdate
05:43:15   6  ,clse
05:43:15   7  ,g6
05:43:15   8  ,gatt
05:43:15   9  ,gattn
05:43:15  10  ,trend
05:43:15  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
05:43:15  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
05:43:15  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
05:43:15  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
05:43:15  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
05:43:15  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
05:43:15  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
05:43:15  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
05:43:15  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
05:43:15  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
05:43:15  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
05:43:15  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
05:43:15  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
05:43:15  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
05:43:15  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
05:43:15  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
05:43:15  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
05:43:15  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
05:43:15  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
05:43:15  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
05:43:15  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
05:43:15  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
05:43:15  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
05:43:15  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
05:43:15  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
05:43:15  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
05:43:15  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
05:43:15  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
05:43:15  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
05:43:15  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
05:43:15  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
05:43:15  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
05:43:15  43  ,hh  att32
05:43:15  44  ,d   att33
05:43:15  45  ,w   att34
05:43:15  46  ,mpm att35
05:43:15  47  ,mph att36
05:43:15  48  ,trend att37
05:43:15  49  FROM svm6142
05:43:15  50  ORDER BY ydate
05:43:15  51  /

Table created.

Elapsed: 00:00:04.91
05:43:20 SQL> 
05:43:20 SQL> -- rpt
05:43:20 SQL> 
05:43:20 SQL> SELECT
05:43:20   2  pair
05:43:20   3  ,trend
05:43:20   4  ,gatt
05:43:20   5  ,COUNT(pair)
05:43:20   6  ,AVG(g6)
05:43:20   7  FROM svm6162
05:43:20   8  GROUP BY pair,trend,gatt
05:43:20   9  ORDER BY pair,trend,gatt
05:43:20  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6858 -.00230344
ech_usd 	-1 up	      3567 .003580667
ech_usd 	-1		53
ech_usd 	 1 nup	      6397 -.00232211
ech_usd 	 1 up	      2905 .004122708
ech_usd 	 1		19

6 rows selected.

Elapsed: 00:00:00.03
05:43:20 SQL> 
05:43:20 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.11
05:43:20 SQL> CREATE TABLE modsrc COMPRESS AS
05:43:20   2  SELECT
05:43:20   3  pair
05:43:20   4  ,ydate
05:43:20   5  ,prdate
05:43:20   6  ,trend
05:43:20   7  ,g6
05:43:20   8  ,gatt
05:43:20   9  ,gattn
05:43:20  10  FROM svm6162
05:43:20  11  /

Table created.

Elapsed: 00:00:00.08
05:43:20 SQL> 
05:43:20 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
05:43:20 SQL> 
05:43:20 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
05:43:20 SQL> CREATE TABLE ech_ms610 COMPRESS AS
05:43:20   2  SELECT
05:43:20   3  ydate
05:43:20   4  ,trend ech_trend
05:43:20   5  ,g6    ech_g6
05:43:20   6  ,gatt  ech_gatt
05:43:20   7  ,gattn ech_gattn
05:43:20   8  FROM modsrc
05:43:20   9  /

Table created.

Elapsed: 00:00:00.08
05:43:21 SQL> 
05:43:21 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
05:43:21 SQL> 
05:43:21 SQL> -- I need a copy of the attributes:
05:43:21 SQL> 
05:43:21 SQL> 
05:43:21 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.05
05:43:21 SQL> CREATE TABLE ech_att COMPRESS AS
05:43:21   2  SELECT
05:43:21   3  ydate
05:43:21   4  ,att00 ech_att00
05:43:21   5  ,att01 ech_att01
05:43:21   6  ,att02 ech_att02
05:43:21   7  ,att03 ech_att03
05:43:21   8  ,att04 ech_att04
05:43:21   9  ,att05 ech_att05
05:43:21  10  ,att06 ech_att06
05:43:21  11  ,att07 ech_att07
05:43:21  12  ,att08 ech_att08
05:43:21  13  ,att09 ech_att09
05:43:21  14  ,att10 ech_att10
05:43:21  15  ,att11 ech_att11
05:43:21  16  ,att12 ech_att12
05:43:21  17  ,att13 ech_att13
05:43:21  18  ,att14 ech_att14
05:43:21  19  ,att15 ech_att15
05:43:21  20  ,att16 ech_att16
05:43:21  21  ,att17 ech_att17
05:43:21  22  ,att18 ech_att18
05:43:21  23  ,att19 ech_att19
05:43:21  24  ,att20 ech_att20
05:43:21  25  ,att21 ech_att21
05:43:21  26  ,att22 ech_att22
05:43:21  27  ,att23 ech_att23
05:43:21  28  ,att24 ech_att24
05:43:21  29  ,att25 ech_att25
05:43:21  30  ,att26 ech_att26
05:43:21  31  ,att27 ech_att27
05:43:21  32  ,att28 ech_att28
05:43:21  33  ,att29 ech_att29
05:43:21  34  ,att30 ech_att30
05:43:21  35  ,att31 ech_att31
05:43:21  36  ,att32 ech_att32
05:43:21  37  ,att33 ech_att33
05:43:21  38  ,att34 ech_att34
05:43:21  39  ,att35 ech_att35
05:43:21  40  ,att36 ech_att36
05:43:21  41  ,att37 ech_att37
05:43:21  42  FROM svm6162
05:43:21  43  /

Table created.

Elapsed: 00:00:00.19
05:43:21 SQL> 
05:43:21 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
05:43:21 SQL> 
05:43:21 SQL> -- rpt
05:43:21 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19799

Elapsed: 00:00:00.80
05:43:22 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19799

Elapsed: 00:00:00.00
05:43:22 SQL> 
05:43:22 SQL> --
05:43:22 SQL> -- egb610.sql
05:43:22 SQL> --
05:43:22 SQL> 
05:43:22 SQL> -- Creates views and tables for backtesting a forex SVM strategy
05:43:22 SQL> 
05:43:22 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
05:43:23 SQL> 
05:43:23 SQL> -- I created di5min here:
05:43:23 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
05:43:23 SQL> 
05:43:23 SQL> CREATE OR REPLACE VIEW svm6102 AS
05:43:23   2  SELECT
05:43:23   3  pair
05:43:23   4  ,ydate
05:43:23   5  ,prdate
05:43:23   6  ,rownum rnum -- acts as t in my time-series
05:43:23   7  ,clse
05:43:23   8  -- Derive a bunch of attributes from clse, the latest price:
05:43:23   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
05:43:23  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
05:43:23  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
05:43:23  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
05:43:23  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
05:43:23  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
05:43:23  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
05:43:23  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
05:43:23  17  --
05:43:23  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
05:43:23  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
05:43:23  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
05:43:23  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
05:43:23  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
05:43:23  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
05:43:23  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
05:43:23  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
05:43:23  26  --
05:43:23  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
05:43:23  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
05:43:23  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
05:43:23  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
05:43:23  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
05:43:23  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
05:43:23  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
05:43:23  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
05:43:23  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
05:43:23  36  FROM di5min WHERE pair LIKE'%egb%'
05:43:23  37  AND ydate > sysdate - 95
05:43:23  38  ORDER BY ydate
05:43:23  39  /

View created.

Elapsed: 00:00:00.05
05:43:23 SQL> 
05:43:23 SQL> -- rpt
05:43:23 SQL> 
05:43:23 SQL> SELECT
05:43:23   2  pair
05:43:23   3  ,COUNT(pair)
05:43:23   4  ,MIN(clse),MAX(clse)
05:43:23   5  ,MIN(avg6),MAX(avg6)
05:43:23   6  ,MIN(ydate),MAX(ydate)
05:43:23   7  FROM svm6102
05:43:23   8  GROUP BY pair
05:43:23   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19798 .833520557 .893920122 .834199029 .892400287 2010-10-04 05:45:01 2011-01-07 04:45:00

Elapsed: 00:00:00.97
05:43:24 SQL> 
05:43:24 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
05:43:24 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.22
05:43:24 SQL> CREATE TABLE svm6122 COMPRESS AS
05:43:24   2  SELECT
05:43:24   3  pair
05:43:24   4  ,ydate
05:43:24   5  ,prdate
05:43:24   6  ,clse
05:43:24   7  -- g6 is important. I want to predict g6:
05:43:24   8  ,ld6 - clse g6
05:43:24   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
05:43:24  10  -- I want more attributes from the ones I derived above:
05:43:24  11  -- clse relation to moving-min
05:43:24  12  ,clse-min4  cm4
05:43:24  13  ,clse-min6  cm6
05:43:24  14  ,clse-min8  cm8
05:43:24  15  ,clse-min10 cm10
05:43:24  16  ,clse-min12 cm12
05:43:24  17  ,clse-min14 cm14
05:43:24  18  ,clse-min16 cm16
05:43:24  19  ,clse-min18 cm18
05:43:24  20  -- clse relation to moving-avg
05:43:24  21  ,clse-avg4  ca4
05:43:24  22  ,clse-avg6  ca6
05:43:24  23  ,clse-avg8  ca8
05:43:24  24  ,clse-avg10 ca10
05:43:24  25  ,clse-avg12 ca12
05:43:24  26  ,clse-avg14 ca14
05:43:24  27  ,clse-avg16 ca16
05:43:24  28  ,clse-avg18 ca18
05:43:24  29  -- clse relation to moving-max
05:43:24  30  ,clse-max4  cx4
05:43:24  31  ,clse-max6  cx6
05:43:24  32  ,clse-max8  cx8
05:43:24  33  ,clse-max10 cx10
05:43:24  34  ,clse-max12 cx12
05:43:24  35  ,clse-max14 cx14
05:43:24  36  ,clse-max16 cx16
05:43:24  37  ,clse-max18 cx18
05:43:24  38  -- Derive more attributes.
05:43:24  39  -- I want to use CORR() here to help SVM see the shape of the series.
05:43:24  40  -- But COVAR_POP is more stable:
05:43:24  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
05:43:24  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
05:43:24  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
05:43:24  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
05:43:24  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
05:43:24  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
05:43:24  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
05:43:24  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
05:43:24  49  -- Derive date related attributes:
05:43:24  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
05:43:24  51  ,0+TO_CHAR(ydate,'D')d
05:43:24  52  ,0+TO_CHAR(ydate,'W')w
05:43:24  53  -- mpm stands for minutes-past-midnight:
05:43:24  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
05:43:24  55  -- mph stands for minutes-past-hour:
05:43:24  56  ,0+TO_CHAR(ydate,'MI')mph
05:43:24  57  FROM svm6102
05:43:24  58  ORDER BY ydate
05:43:24  59  /

Table created.

Elapsed: 00:00:02.49
05:43:26 SQL> 
05:43:26 SQL> -- rpt
05:43:26 SQL> 
05:43:26 SQL> SELECT
05:43:26   2  pair
05:43:26   3  ,COUNT(pair)
05:43:26   4  ,MIN(clse),MAX(clse)
05:43:26   5  ,MIN(ydate),MAX(ydate)
05:43:26   6  FROM svm6122
05:43:26   7  GROUP BY pair
05:43:26   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19798 .833520557 .893920122 2010-10-04 05:45:01 2011-01-07 04:45:00

Elapsed: 00:00:00.04
05:43:26 SQL> 
05:43:26 SQL> -- Prepare for derivation of NTILE based params:
05:43:26 SQL> 
05:43:26 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.20
05:43:27 SQL> CREATE TABLE svm6142 COMPRESS AS
05:43:27   2  SELECT
05:43:27   3  pair
05:43:27   4  ,ydate
05:43:27   5  ,prdate
05:43:27   6  ,clse
05:43:27   7  ,g6
05:43:27   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
05:43:27   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
05:43:27  10  ,CASE WHEN trend IS NULL THEN 1
05:43:27  11  	    WHEN trend =0      THEN 1
05:43:27  12  	    ELSE trend END trend
05:43:27  13  ,cm4
05:43:27  14  ,cm6
05:43:27  15  ,cm8
05:43:27  16  ,cm10
05:43:27  17  ,cm12
05:43:27  18  ,cm14
05:43:27  19  ,cm16
05:43:27  20  ,cm18
05:43:27  21  --
05:43:27  22  ,ca4
05:43:27  23  ,ca6
05:43:27  24  ,ca8
05:43:27  25  ,ca10
05:43:27  26  ,ca12
05:43:27  27  ,ca14
05:43:27  28  ,ca16
05:43:27  29  ,ca18
05:43:27  30  --
05:43:27  31  ,cx4
05:43:27  32  ,cx6
05:43:27  33  ,cx8
05:43:27  34  ,cx10
05:43:27  35  ,cx12
05:43:27  36  ,cx14
05:43:27  37  ,cx16
05:43:27  38  ,cx18
05:43:27  39  --
05:43:27  40  ,crr4
05:43:27  41  ,crr6
05:43:27  42  ,crr8
05:43:27  43  ,crr10
05:43:27  44  ,crr12
05:43:27  45  ,crr14
05:43:27  46  ,crr16
05:43:27  47  ,crr18
05:43:27  48  --
05:43:27  49  ,hh
05:43:27  50  ,d
05:43:27  51  ,w
05:43:27  52  ,mpm
05:43:27  53  ,mph
05:43:27  54  FROM svm6122
05:43:27  55  ORDER BY ydate
05:43:27  56  /

Table created.

Elapsed: 00:00:00.43
05:43:27 SQL> 
05:43:27 SQL> -- rpt
05:43:27 SQL> 
05:43:27 SQL> SELECT
05:43:27   2  pair
05:43:27   3  ,trend
05:43:27   4  ,gatt
05:43:27   5  ,COUNT(pair)
05:43:27   6  ,AVG(g6)
05:43:27   7  FROM svm6142
05:43:27   8  GROUP BY pair,trend,gatt
05:43:27   9  ORDER BY pair,trend,gatt
05:43:27  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7978 -.00105522
egb_usd 	-1 up	      2629  .00293193
egb_usd 	-1		24
egb_usd 	 1 nup	      6502 -.00137174
egb_usd 	 1 up	      2617   .0029282
egb_usd 	 1		48

6 rows selected.

Elapsed: 00:00:00.04
05:43:27 SQL> 
05:43:27 SQL> 
05:43:27 SQL> -- Derive NTILE based params:
05:43:27 SQL> 
05:43:27 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
05:43:27 SQL> CREATE TABLE svm6162 COMPRESS AS
05:43:27   2  SELECT
05:43:27   3  pair
05:43:27   4  ,ydate
05:43:27   5  ,prdate
05:43:27   6  ,clse
05:43:27   7  ,g6
05:43:27   8  ,gatt
05:43:27   9  ,gattn
05:43:27  10  ,trend
05:43:27  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
05:43:27  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
05:43:27  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
05:43:27  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
05:43:27  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
05:43:27  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
05:43:27  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
05:43:27  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
05:43:27  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
05:43:27  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
05:43:27  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
05:43:27  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
05:43:27  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
05:43:27  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
05:43:27  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
05:43:27  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
05:43:27  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
05:43:27  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
05:43:27  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
05:43:27  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
05:43:27  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
05:43:27  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
05:43:27  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
05:43:27  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
05:43:27  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
05:43:27  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
05:43:27  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
05:43:27  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
05:43:27  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
05:43:27  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
05:43:27  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
05:43:27  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
05:43:27  43  ,hh  att32
05:43:27  44  ,d   att33
05:43:27  45  ,w   att34
05:43:27  46  ,mpm att35
05:43:27  47  ,mph att36
05:43:27  48  ,trend att37
05:43:27  49  FROM svm6142
05:43:27  50  ORDER BY ydate
05:43:27  51  /

Table created.

Elapsed: 00:00:05.62
05:43:33 SQL> 
05:43:33 SQL> -- rpt
05:43:33 SQL> 
05:43:33 SQL> SELECT
05:43:33   2  pair
05:43:33   3  ,trend
05:43:33   4  ,gatt
05:43:33   5  ,COUNT(pair)
05:43:33   6  ,AVG(g6)
05:43:33   7  FROM svm6162
05:43:33   8  GROUP BY pair,trend,gatt
05:43:33   9  ORDER BY pair,trend,gatt
05:43:33  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7978 -.00105522
egb_usd 	-1 up	      2629  .00293193
egb_usd 	-1		24
egb_usd 	 1 nup	      6502 -.00137174
egb_usd 	 1 up	      2617   .0029282
egb_usd 	 1		48

6 rows selected.

Elapsed: 00:00:00.03
05:43:33 SQL> 
05:43:33 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.22
05:43:33 SQL> CREATE TABLE modsrc COMPRESS AS
05:43:33   2  SELECT
05:43:33   3  pair
05:43:33   4  ,ydate
05:43:33   5  ,prdate
05:43:33   6  ,trend
05:43:33   7  ,g6
05:43:33   8  ,gatt
05:43:33   9  ,gattn
05:43:33  10  FROM svm6162
05:43:33  11  /

Table created.

Elapsed: 00:00:00.09
05:43:33 SQL> 
05:43:33 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
05:43:33 SQL> 
05:43:33 SQL> DROP   TABLE egb_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
05:43:33 SQL> CREATE TABLE egb_ms610 COMPRESS AS
05:43:33   2  SELECT
05:43:33   3  ydate
05:43:33   4  ,trend egb_trend
05:43:33   5  ,g6    egb_g6
05:43:33   6  ,gatt  egb_gatt
05:43:33   7  ,gattn egb_gattn
05:43:33   8  FROM modsrc
05:43:33   9  /

Table created.

Elapsed: 00:00:00.06
05:43:34 SQL> 
05:43:34 SQL> ANALYZE TABLE egb_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
05:43:34 SQL> 
05:43:34 SQL> -- I need a copy of the attributes:
05:43:34 SQL> 
05:43:34 SQL> 
05:43:34 SQL> DROP   TABLE egb_att;

Table dropped.

Elapsed: 00:00:00.05
05:43:34 SQL> CREATE TABLE egb_att COMPRESS AS
05:43:34   2  SELECT
05:43:34   3  ydate
05:43:34   4  ,att00 egb_att00
05:43:34   5  ,att01 egb_att01
05:43:34   6  ,att02 egb_att02
05:43:34   7  ,att03 egb_att03
05:43:34   8  ,att04 egb_att04
05:43:34   9  ,att05 egb_att05
05:43:34  10  ,att06 egb_att06
05:43:34  11  ,att07 egb_att07
05:43:34  12  ,att08 egb_att08
05:43:34  13  ,att09 egb_att09
05:43:34  14  ,att10 egb_att10
05:43:34  15  ,att11 egb_att11
05:43:34  16  ,att12 egb_att12
05:43:34  17  ,att13 egb_att13
05:43:34  18  ,att14 egb_att14
05:43:34  19  ,att15 egb_att15
05:43:34  20  ,att16 egb_att16
05:43:34  21  ,att17 egb_att17
05:43:34  22  ,att18 egb_att18
05:43:34  23  ,att19 egb_att19
05:43:34  24  ,att20 egb_att20
05:43:34  25  ,att21 egb_att21
05:43:34  26  ,att22 egb_att22
05:43:34  27  ,att23 egb_att23
05:43:34  28  ,att24 egb_att24
05:43:34  29  ,att25 egb_att25
05:43:34  30  ,att26 egb_att26
05:43:34  31  ,att27 egb_att27
05:43:34  32  ,att28 egb_att28
05:43:34  33  ,att29 egb_att29
05:43:34  34  ,att30 egb_att30
05:43:34  35  ,att31 egb_att31
05:43:34  36  ,att32 egb_att32
05:43:34  37  ,att33 egb_att33
05:43:34  38  ,att34 egb_att34
05:43:34  39  ,att35 egb_att35
05:43:34  40  ,att36 egb_att36
05:43:34  41  ,att37 egb_att37
05:43:34  42  FROM svm6162
05:43:34  43  /

Table created.

Elapsed: 00:00:00.19
05:43:34 SQL> 
05:43:34 SQL> ANALYZE TABLE egb_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
05:43:34 SQL> 
05:43:34 SQL> -- rpt
05:43:34 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19798

Elapsed: 00:00:00.95
05:43:35 SQL> SELECT COUNT(*)FROM egb_att;

  COUNT(*)
----------
     19798

Elapsed: 00:00:00.01
05:43:35 SQL> 
05:43:35 SQL> --
05:43:35 SQL> -- ejp610.sql
05:43:35 SQL> --
05:43:35 SQL> 
05:43:35 SQL> -- Creates views and tables for backtesting a forex SVM strategy
05:43:35 SQL> 
05:43:35 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.40
05:43:36 SQL> 
05:43:36 SQL> -- I created di5min here:
05:43:36 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
05:43:36 SQL> 
05:43:36 SQL> CREATE OR REPLACE VIEW svm6102 AS
05:43:36   2  SELECT
05:43:36   3  pair
05:43:36   4  ,ydate
05:43:36   5  ,prdate
05:43:36   6  ,rownum rnum -- acts as t in my time-series
05:43:36   7  ,clse
05:43:36   8  -- Derive a bunch of attributes from clse, the latest price:
05:43:36   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
05:43:36  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
05:43:36  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
05:43:36  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
05:43:36  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
05:43:36  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
05:43:36  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
05:43:36  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
05:43:36  17  --
05:43:36  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
05:43:36  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
05:43:36  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
05:43:36  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
05:43:36  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
05:43:36  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
05:43:36  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
05:43:36  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
05:43:36  26  --
05:43:36  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
05:43:36  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
05:43:36  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
05:43:36  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
05:43:36  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
05:43:36  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
05:43:36  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
05:43:36  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
05:43:36  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
05:43:36  36  FROM di5min WHERE pair LIKE'%ejp%'
05:43:36  37  AND ydate > sysdate - 95
05:43:36  38  ORDER BY ydate
05:43:36  39  /

View created.

Elapsed: 00:00:00.05
05:43:36 SQL> 
05:43:36 SQL> -- rpt
05:43:36 SQL> 
05:43:36 SQL> SELECT
05:43:36   2  pair
05:43:36   3  ,COUNT(pair)
05:43:36   4  ,MIN(clse),MAX(clse)
05:43:36   5  ,MIN(avg6),MAX(avg6)
05:43:36   6  ,MIN(ydate),MAX(ydate)
05:43:36   7  FROM svm6102
05:43:36   8  GROUP BY pair
05:43:36   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ejp_usd       19796 107.643765	115.63485 107.776148 115.509678 2010-10-04 05:45:01 2011-01-07 04:45:00

Elapsed: 00:00:00.86
05:43:37 SQL> 
05:43:37 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
05:43:37 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.23
05:43:37 SQL> CREATE TABLE svm6122 COMPRESS AS
05:43:37   2  SELECT
05:43:37   3  pair
05:43:37   4  ,ydate
05:43:37   5  ,prdate
05:43:37   6  ,clse
05:43:37   7  -- g6 is important. I want to predict g6:
05:43:37   8  ,ld6 - clse g6
05:43:37   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
05:43:37  10  -- I want more attributes from the ones I derived above:
05:43:37  11  -- clse relation to moving-min
05:43:37  12  ,clse-min4  cm4
05:43:37  13  ,clse-min6  cm6
05:43:37  14  ,clse-min8  cm8
05:43:37  15  ,clse-min10 cm10
05:43:37  16  ,clse-min12 cm12
05:43:37  17  ,clse-min14 cm14
05:43:37  18  ,clse-min16 cm16
05:43:37  19  ,clse-min18 cm18
05:43:37  20  -- clse relation to moving-avg
05:43:37  21  ,clse-avg4  ca4
05:43:37  22  ,clse-avg6  ca6
05:43:37  23  ,clse-avg8  ca8
05:43:37  24  ,clse-avg10 ca10
05:43:37  25  ,clse-avg12 ca12
05:43:37  26  ,clse-avg14 ca14
05:43:37  27  ,clse-avg16 ca16
05:43:37  28  ,clse-avg18 ca18
05:43:37  29  -- clse relation to moving-max
05:43:37  30  ,clse-max4  cx4
05:43:37  31  ,clse-max6  cx6
05:43:37  32  ,clse-max8  cx8
05:43:37  33  ,clse-max10 cx10
05:43:37  34  ,clse-max12 cx12
05:43:37  35  ,clse-max14 cx14
05:43:37  36  ,clse-max16 cx16
05:43:37  37  ,clse-max18 cx18
05:43:37  38  -- Derive more attributes.
05:43:37  39  -- I want to use CORR() here to help SVM see the shape of the series.
05:43:37  40  -- But COVAR_POP is more stable:
05:43:37  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
05:43:37  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
05:43:37  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
05:43:37  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
05:43:37  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
05:43:37  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
05:43:37  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
05:43:37  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
05:43:37  49  -- Derive date related attributes:
05:43:37  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
05:43:37  51  ,0+TO_CHAR(ydate,'D')d
05:43:37  52  ,0+TO_CHAR(ydate,'W')w
05:43:37  53  -- mpm stands for minutes-past-midnight:
05:43:37  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
05:43:37  55  -- mph stands for minutes-past-hour:
05:43:37  56  ,0+TO_CHAR(ydate,'MI')mph
05:43:37  57  FROM svm6102
05:43:37  58  ORDER BY ydate
05:43:37  59  /

Table created.

Elapsed: 00:00:02.13
05:43:39 SQL> 
05:43:39 SQL> -- rpt
05:43:39 SQL> 
05:43:39 SQL> SELECT
05:43:39   2  pair
05:43:39   3  ,COUNT(pair)
05:43:39   4  ,MIN(clse),MAX(clse)
05:43:39   5  ,MIN(ydate),MAX(ydate)
05:43:39   6  FROM svm6122
05:43:39   7  GROUP BY pair
05:43:39   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ejp_usd       19796 107.643765	115.63485 2010-10-04 05:45:01 2011-01-07 04:45:00

Elapsed: 00:00:00.03
05:43:39 SQL> 
05:43:39 SQL> -- Prepare for derivation of NTILE based params:
05:43:39 SQL> 
05:43:39 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.32
05:43:39 SQL> CREATE TABLE svm6142 COMPRESS AS
05:43:39   2  SELECT
05:43:39   3  pair
05:43:39   4  ,ydate
05:43:39   5  ,prdate
05:43:39   6  ,clse
05:43:39   7  ,g6
05:43:39   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
05:43:39   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
05:43:39  10  ,CASE WHEN trend IS NULL THEN 1
05:43:39  11  	    WHEN trend =0      THEN 1
05:43:39  12  	    ELSE trend END trend
05:43:39  13  ,cm4
05:43:39  14  ,cm6
05:43:39  15  ,cm8
05:43:39  16  ,cm10
05:43:39  17  ,cm12
05:43:39  18  ,cm14
05:43:39  19  ,cm16
05:43:39  20  ,cm18
05:43:39  21  --
05:43:39  22  ,ca4
05:43:39  23  ,ca6
05:43:39  24  ,ca8
05:43:39  25  ,ca10
05:43:39  26  ,ca12
05:43:39  27  ,ca14
05:43:39  28  ,ca16
05:43:39  29  ,ca18
05:43:39  30  --
05:43:39  31  ,cx4
05:43:39  32  ,cx6
05:43:39  33  ,cx8
05:43:39  34  ,cx10
05:43:39  35  ,cx12
05:43:39  36  ,cx14
05:43:39  37  ,cx16
05:43:39  38  ,cx18
05:43:39  39  --
05:43:39  40  ,crr4
05:43:39  41  ,crr6
05:43:39  42  ,crr8
05:43:39  43  ,crr10
05:43:39  44  ,crr12
05:43:39  45  ,crr14
05:43:39  46  ,crr16
05:43:39  47  ,crr18
05:43:39  48  --
05:43:39  49  ,hh
05:43:39  50  ,d
05:43:39  51  ,w
05:43:39  52  ,mpm
05:43:39  53  ,mph
05:43:39  54  FROM svm6122
05:43:39  55  ORDER BY ydate
05:43:39  56  /

Table created.

Elapsed: 00:00:01.17
05:43:41 SQL> 
05:43:41 SQL> -- rpt
05:43:41 SQL> 
05:43:41 SQL> SELECT
05:43:41   2  pair
05:43:41   3  ,trend
05:43:41   4  ,gatt
05:43:41   5  ,COUNT(pair)
05:43:41   6  ,AVG(g6)
05:43:41   7  FROM svm6142
05:43:41   8  GROUP BY pair,trend,gatt
05:43:41   9  ORDER BY pair,trend,gatt
05:43:41  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      5228 -.32096733
ejp_usd 	-1 up	      4926 .277457867
ejp_usd 	-1		52
ejp_usd 	 1 nup	      4952 -.29231444
ejp_usd 	 1 up	      4618 .288802854
ejp_usd 	 1		20

6 rows selected.

Elapsed: 00:00:00.03
05:43:41 SQL> 
05:43:41 SQL> 
05:43:41 SQL> -- Derive NTILE based params:
05:43:41 SQL> 
05:43:41 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.24
05:43:41 SQL> CREATE TABLE svm6162 COMPRESS AS
05:43:41   2  SELECT
05:43:41   3  pair
05:43:41   4  ,ydate
05:43:41   5  ,prdate
05:43:41   6  ,clse
05:43:41   7  ,g6
05:43:41   8  ,gatt
05:43:41   9  ,gattn
05:43:41  10  ,trend
05:43:41  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
05:43:41  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
05:43:41  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
05:43:41  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
05:43:41  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
05:43:41  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
05:43:41  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
05:43:41  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
05:43:41  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
05:43:41  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
05:43:41  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
05:43:41  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
05:43:41  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
05:43:41  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
05:43:41  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
05:43:41  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
05:43:41  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
05:43:41  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
05:43:41  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
05:43:41  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
05:43:41  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
05:43:41  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
05:43:41  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
05:43:41  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
05:43:41  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
05:43:41  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
05:43:41  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
05:43:41  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
05:43:41  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
05:43:41  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
05:43:41  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
05:43:41  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
05:43:41  43  ,hh  att32
05:43:41  44  ,d   att33
05:43:41  45  ,w   att34
05:43:41  46  ,mpm att35
05:43:41  47  ,mph att36
05:43:41  48  ,trend att37
05:43:41  49  FROM svm6142
05:43:41  50  ORDER BY ydate
05:43:41  51  /

Table created.

Elapsed: 00:00:05.12
05:43:46 SQL> 
05:43:46 SQL> -- rpt
05:43:46 SQL> 
05:43:46 SQL> SELECT
05:43:46   2  pair
05:43:46   3  ,trend
05:43:46   4  ,gatt
05:43:46   5  ,COUNT(pair)
05:43:46   6  ,AVG(g6)
05:43:46   7  FROM svm6162
05:43:46   8  GROUP BY pair,trend,gatt
05:43:46   9  ORDER BY pair,trend,gatt
05:43:46  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      5228 -.32096733
ejp_usd 	-1 up	      4926 .277457867
ejp_usd 	-1		52
ejp_usd 	 1 nup	      4952 -.29231444
ejp_usd 	 1 up	      4618 .288802854
ejp_usd 	 1		20

6 rows selected.

Elapsed: 00:00:00.03
05:43:46 SQL> 
05:43:46 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
05:43:46 SQL> CREATE TABLE modsrc COMPRESS AS
05:43:46   2  SELECT
05:43:46   3  pair
05:43:46   4  ,ydate
05:43:46   5  ,prdate
05:43:46   6  ,trend
05:43:46   7  ,g6
05:43:46   8  ,gatt
05:43:46   9  ,gattn
05:43:46  10  FROM svm6162
05:43:46  11  /

Table created.

Elapsed: 00:00:00.09
05:43:46 SQL> 
05:43:46 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
05:43:46 SQL> 
05:43:46 SQL> DROP   TABLE ejp_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
05:43:46 SQL> CREATE TABLE ejp_ms610 COMPRESS AS
05:43:46   2  SELECT
05:43:46   3  ydate
05:43:46   4  ,trend ejp_trend
05:43:46   5  ,g6    ejp_g6
05:43:46   6  ,gatt  ejp_gatt
05:43:46   7  ,gattn ejp_gattn
05:43:46   8  FROM modsrc
05:43:46   9  /

Table created.

Elapsed: 00:00:00.07
05:43:47 SQL> 
05:43:47 SQL> ANALYZE TABLE ejp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
05:43:47 SQL> 
05:43:47 SQL> -- I need a copy of the attributes:
05:43:47 SQL> 
05:43:47 SQL> 
05:43:47 SQL> DROP   TABLE ejp_att;

Table dropped.

Elapsed: 00:00:00.08
05:43:47 SQL> CREATE TABLE ejp_att COMPRESS AS
05:43:47   2  SELECT
05:43:47   3  ydate
05:43:47   4  ,att00 ejp_att00
05:43:47   5  ,att01 ejp_att01
05:43:47   6  ,att02 ejp_att02
05:43:47   7  ,att03 ejp_att03
05:43:47   8  ,att04 ejp_att04
05:43:47   9  ,att05 ejp_att05
05:43:47  10  ,att06 ejp_att06
05:43:47  11  ,att07 ejp_att07
05:43:47  12  ,att08 ejp_att08
05:43:47  13  ,att09 ejp_att09
05:43:47  14  ,att10 ejp_att10
05:43:47  15  ,att11 ejp_att11
05:43:47  16  ,att12 ejp_att12
05:43:47  17  ,att13 ejp_att13
05:43:47  18  ,att14 ejp_att14
05:43:47  19  ,att15 ejp_att15
05:43:47  20  ,att16 ejp_att16
05:43:47  21  ,att17 ejp_att17
05:43:47  22  ,att18 ejp_att18
05:43:47  23  ,att19 ejp_att19
05:43:47  24  ,att20 ejp_att20
05:43:47  25  ,att21 ejp_att21
05:43:47  26  ,att22 ejp_att22
05:43:47  27  ,att23 ejp_att23
05:43:47  28  ,att24 ejp_att24
05:43:47  29  ,att25 ejp_att25
05:43:47  30  ,att26 ejp_att26
05:43:47  31  ,att27 ejp_att27
05:43:47  32  ,att28 ejp_att28
05:43:47  33  ,att29 ejp_att29
05:43:47  34  ,att30 ejp_att30
05:43:47  35  ,att31 ejp_att31
05:43:47  36  ,att32 ejp_att32
05:43:47  37  ,att33 ejp_att33
05:43:47  38  ,att34 ejp_att34
05:43:47  39  ,att35 ejp_att35
05:43:47  40  ,att36 ejp_att36
05:43:47  41  ,att37 ejp_att37
05:43:47  42  FROM svm6162
05:43:47  43  /

Table created.

Elapsed: 00:00:00.17
05:43:47 SQL> 
05:43:47 SQL> ANALYZE TABLE ejp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.49
05:43:47 SQL> 
05:43:47 SQL> -- rpt
05:43:47 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19796

Elapsed: 00:00:00.87
05:43:48 SQL> SELECT COUNT(*)FROM ejp_att;

  COUNT(*)
----------
     19796

Elapsed: 00:00:00.00
05:43:48 SQL> 
05:43:48 SQL> --
05:43:48 SQL> -- ajp610.sql
05:43:48 SQL> --
05:43:48 SQL> 
05:43:48 SQL> -- Creates views and tables for backtesting a forex SVM strategy
05:43:48 SQL> 
05:43:48 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.41
05:43:49 SQL> 
05:43:49 SQL> -- I created di5min here:
05:43:49 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
05:43:49 SQL> 
05:43:49 SQL> CREATE OR REPLACE VIEW svm6102 AS
05:43:49   2  SELECT
05:43:49   3  pair
05:43:49   4  ,ydate
05:43:49   5  ,prdate
05:43:49   6  ,rownum rnum -- acts as t in my time-series
05:43:49   7  ,clse
05:43:49   8  -- Derive a bunch of attributes from clse, the latest price:
05:43:49   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
05:43:49  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
05:43:49  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
05:43:49  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
05:43:49  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
05:43:49  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
05:43:49  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
05:43:49  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
05:43:49  17  --
05:43:49  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
05:43:49  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
05:43:49  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
05:43:49  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
05:43:49  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
05:43:49  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
05:43:49  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
05:43:49  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
05:43:49  26  --
05:43:49  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
05:43:49  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
05:43:49  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
05:43:49  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
05:43:49  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
05:43:49  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
05:43:49  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
05:43:49  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
05:43:49  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
05:43:49  36  FROM di5min WHERE pair LIKE'%ajp%'
05:43:49  37  AND ydate > sysdate - 95
05:43:49  38  ORDER BY ydate
05:43:49  39  /

View created.

Elapsed: 00:00:00.05
05:43:49 SQL> 
05:43:49 SQL> -- rpt
05:43:49 SQL> 
05:43:49 SQL> SELECT
05:43:49   2  pair
05:43:49   3  ,COUNT(pair)
05:43:49   4  ,MIN(clse),MAX(clse)
05:43:49   5  ,MIN(avg6),MAX(avg6)
05:43:49   6  ,MIN(ydate),MAX(ydate)
05:43:49   7  FROM svm6102
05:43:49   8  GROUP BY pair
05:43:49   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ajp_usd       19793  78.249976 83.6669853 78.5106193  83.546306 2010-10-04 05:45:01 2011-01-07 04:45:00

Elapsed: 00:00:00.78
05:43:50 SQL> 
05:43:50 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
05:43:50 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
05:43:50 SQL> CREATE TABLE svm6122 COMPRESS AS
05:43:50   2  SELECT
05:43:50   3  pair
05:43:50   4  ,ydate
05:43:50   5  ,prdate
05:43:50   6  ,clse
05:43:50   7  -- g6 is important. I want to predict g6:
05:43:50   8  ,ld6 - clse g6
05:43:50   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
05:43:50  10  -- I want more attributes from the ones I derived above:
05:43:50  11  -- clse relation to moving-min
05:43:50  12  ,clse-min4  cm4
05:43:50  13  ,clse-min6  cm6
05:43:50  14  ,clse-min8  cm8
05:43:50  15  ,clse-min10 cm10
05:43:50  16  ,clse-min12 cm12
05:43:50  17  ,clse-min14 cm14
05:43:50  18  ,clse-min16 cm16
05:43:50  19  ,clse-min18 cm18
05:43:50  20  -- clse relation to moving-avg
05:43:50  21  ,clse-avg4  ca4
05:43:50  22  ,clse-avg6  ca6
05:43:50  23  ,clse-avg8  ca8
05:43:50  24  ,clse-avg10 ca10
05:43:50  25  ,clse-avg12 ca12
05:43:50  26  ,clse-avg14 ca14
05:43:50  27  ,clse-avg16 ca16
05:43:50  28  ,clse-avg18 ca18
05:43:50  29  -- clse relation to moving-max
05:43:50  30  ,clse-max4  cx4
05:43:50  31  ,clse-max6  cx6
05:43:50  32  ,clse-max8  cx8
05:43:50  33  ,clse-max10 cx10
05:43:50  34  ,clse-max12 cx12
05:43:50  35  ,clse-max14 cx14
05:43:50  36  ,clse-max16 cx16
05:43:50  37  ,clse-max18 cx18
05:43:50  38  -- Derive more attributes.
05:43:50  39  -- I want to use CORR() here to help SVM see the shape of the series.
05:43:50  40  -- But COVAR_POP is more stable:
05:43:50  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
05:43:50  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
05:43:50  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
05:43:50  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
05:43:50  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
05:43:50  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
05:43:50  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
05:43:50  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
05:43:50  49  -- Derive date related attributes:
05:43:50  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
05:43:50  51  ,0+TO_CHAR(ydate,'D')d
05:43:50  52  ,0+TO_CHAR(ydate,'W')w
05:43:50  53  -- mpm stands for minutes-past-midnight:
05:43:50  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
05:43:50  55  -- mph stands for minutes-past-hour:
05:43:50  56  ,0+TO_CHAR(ydate,'MI')mph
05:43:50  57  FROM svm6102
05:43:50  58  ORDER BY ydate
05:43:50  59  /

Table created.

Elapsed: 00:00:02.07
05:43:52 SQL> 
05:43:52 SQL> -- rpt
05:43:52 SQL> 
05:43:52 SQL> SELECT
05:43:52   2  pair
05:43:52   3  ,COUNT(pair)
05:43:52   4  ,MIN(clse),MAX(clse)
05:43:52   5  ,MIN(ydate),MAX(ydate)
05:43:52   6  FROM svm6122
05:43:52   7  GROUP BY pair
05:43:52   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ajp_usd       19793  78.249976 83.6669853 2010-10-04 05:45:01 2011-01-07 04:45:00

Elapsed: 00:00:00.03
05:43:52 SQL> 
05:43:52 SQL> -- Prepare for derivation of NTILE based params:
05:43:52 SQL> 
05:43:52 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.19
05:43:52 SQL> CREATE TABLE svm6142 COMPRESS AS
05:43:52   2  SELECT
05:43:52   3  pair
05:43:52   4  ,ydate
05:43:52   5  ,prdate
05:43:52   6  ,clse
05:43:52   7  ,g6
05:43:52   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
05:43:52   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
05:43:52  10  ,CASE WHEN trend IS NULL THEN 1
05:43:52  11  	    WHEN trend =0      THEN 1
05:43:52  12  	    ELSE trend END trend
05:43:52  13  ,cm4
05:43:52  14  ,cm6
05:43:52  15  ,cm8
05:43:52  16  ,cm10
05:43:52  17  ,cm12
05:43:52  18  ,cm14
05:43:52  19  ,cm16
05:43:52  20  ,cm18
05:43:52  21  --
05:43:52  22  ,ca4
05:43:52  23  ,ca6
05:43:52  24  ,ca8
05:43:52  25  ,ca10
05:43:52  26  ,ca12
05:43:52  27  ,ca14
05:43:52  28  ,ca16
05:43:52  29  ,ca18
05:43:52  30  --
05:43:52  31  ,cx4
05:43:52  32  ,cx6
05:43:52  33  ,cx8
05:43:52  34  ,cx10
05:43:52  35  ,cx12
05:43:52  36  ,cx14
05:43:52  37  ,cx16
05:43:52  38  ,cx18
05:43:52  39  --
05:43:52  40  ,crr4
05:43:52  41  ,crr6
05:43:52  42  ,crr8
05:43:52  43  ,crr10
05:43:52  44  ,crr12
05:43:52  45  ,crr14
05:43:52  46  ,crr16
05:43:52  47  ,crr18
05:43:52  48  --
05:43:52  49  ,hh
05:43:52  50  ,d
05:43:52  51  ,w
05:43:52  52  ,mpm
05:43:52  53  ,mph
05:43:52  54  FROM svm6122
05:43:52  55  ORDER BY ydate
05:43:52  56  /

Table created.

Elapsed: 00:00:00.38
05:43:53 SQL> 
05:43:53 SQL> -- rpt
05:43:53 SQL> 
05:43:53 SQL> SELECT
05:43:53   2  pair
05:43:53   3  ,trend
05:43:53   4  ,gatt
05:43:53   5  ,COUNT(pair)
05:43:53   6  ,AVG(g6)
05:43:53   7  FROM svm6142
05:43:53   8  GROUP BY pair,trend,gatt
05:43:53   9  ORDER BY pair,trend,gatt
05:43:53  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4380  -.2228047
ajp_usd 	-1 up	      5232 .223221272
ajp_usd 	-1		57
ajp_usd 	 1 nup	      5298 -.19990032
ajp_usd 	 1 up	      4811 .212749728
ajp_usd 	 1		15

6 rows selected.

Elapsed: 00:00:00.03
05:43:53 SQL> 
05:43:53 SQL> 
05:43:53 SQL> -- Derive NTILE based params:
05:43:53 SQL> 
05:43:53 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.21
05:43:53 SQL> CREATE TABLE svm6162 COMPRESS AS
05:43:53   2  SELECT
05:43:53   3  pair
05:43:53   4  ,ydate
05:43:53   5  ,prdate
05:43:53   6  ,clse
05:43:53   7  ,g6
05:43:53   8  ,gatt
05:43:53   9  ,gattn
05:43:53  10  ,trend
05:43:53  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
05:43:53  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
05:43:53  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
05:43:53  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
05:43:53  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
05:43:53  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
05:43:53  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
05:43:53  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
05:43:53  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
05:43:53  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
05:43:53  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
05:43:53  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
05:43:53  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
05:43:53  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
05:43:53  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
05:43:53  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
05:43:53  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
05:43:53  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
05:43:53  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
05:43:53  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
05:43:53  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
05:43:53  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
05:43:53  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
05:43:53  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
05:43:53  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
05:43:53  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
05:43:53  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
05:43:53  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
05:43:53  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
05:43:53  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
05:43:53  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
05:43:53  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
05:43:53  43  ,hh  att32
05:43:53  44  ,d   att33
05:43:53  45  ,w   att34
05:43:53  46  ,mpm att35
05:43:53  47  ,mph att36
05:43:53  48  ,trend att37
05:43:53  49  FROM svm6142
05:43:53  50  ORDER BY ydate
05:43:53  51  /

Table created.

Elapsed: 00:00:04.96
05:43:58 SQL> 
05:43:58 SQL> -- rpt
05:43:58 SQL> 
05:43:58 SQL> SELECT
05:43:58   2  pair
05:43:58   3  ,trend
05:43:58   4  ,gatt
05:43:58   5  ,COUNT(pair)
05:43:58   6  ,AVG(g6)
05:43:58   7  FROM svm6162
05:43:58   8  GROUP BY pair,trend,gatt
05:43:58   9  ORDER BY pair,trend,gatt
05:43:58  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4380  -.2228047
ajp_usd 	-1 up	      5232 .223221272
ajp_usd 	-1		57
ajp_usd 	 1 nup	      5298 -.19990032
ajp_usd 	 1 up	      4811 .212749728
ajp_usd 	 1		15

6 rows selected.

Elapsed: 00:00:00.02
05:43:58 SQL> 
05:43:58 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
05:43:58 SQL> CREATE TABLE modsrc COMPRESS AS
05:43:58   2  SELECT
05:43:58   3  pair
05:43:58   4  ,ydate
05:43:58   5  ,prdate
05:43:58   6  ,trend
05:43:58   7  ,g6
05:43:58   8  ,gatt
05:43:58   9  ,gattn
05:43:58  10  FROM svm6162
05:43:58  11  /

Table created.

Elapsed: 00:00:00.09
05:43:58 SQL> 
05:43:58 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
05:43:58 SQL> 
05:43:58 SQL> DROP   TABLE ajp_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
05:43:58 SQL> CREATE TABLE ajp_ms610 COMPRESS AS
05:43:58   2  SELECT
05:43:58   3  ydate
05:43:58   4  ,trend ajp_trend
05:43:58   5  ,g6    ajp_g6
05:43:58   6  ,gatt  ajp_gatt
05:43:58   7  ,gattn ajp_gattn
05:43:58   8  FROM modsrc
05:43:58   9  /

Table created.

Elapsed: 00:00:00.08
05:43:58 SQL> 
05:43:58 SQL> ANALYZE TABLE ajp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
05:43:58 SQL> 
05:43:58 SQL> -- I need a copy of the attributes:
05:43:58 SQL> 
05:43:58 SQL> 
05:43:58 SQL> DROP   TABLE ajp_att;

Table dropped.

Elapsed: 00:00:00.05
05:43:59 SQL> CREATE TABLE ajp_att COMPRESS AS
05:43:59   2  SELECT
05:43:59   3  ydate
05:43:59   4  ,att00 ajp_att00
05:43:59   5  ,att01 ajp_att01
05:43:59   6  ,att02 ajp_att02
05:43:59   7  ,att03 ajp_att03
05:43:59   8  ,att04 ajp_att04
05:43:59   9  ,att05 ajp_att05
05:43:59  10  ,att06 ajp_att06
05:43:59  11  ,att07 ajp_att07
05:43:59  12  ,att08 ajp_att08
05:43:59  13  ,att09 ajp_att09
05:43:59  14  ,att10 ajp_att10
05:43:59  15  ,att11 ajp_att11
05:43:59  16  ,att12 ajp_att12
05:43:59  17  ,att13 ajp_att13
05:43:59  18  ,att14 ajp_att14
05:43:59  19  ,att15 ajp_att15
05:43:59  20  ,att16 ajp_att16
05:43:59  21  ,att17 ajp_att17
05:43:59  22  ,att18 ajp_att18
05:43:59  23  ,att19 ajp_att19
05:43:59  24  ,att20 ajp_att20
05:43:59  25  ,att21 ajp_att21
05:43:59  26  ,att22 ajp_att22
05:43:59  27  ,att23 ajp_att23
05:43:59  28  ,att24 ajp_att24
05:43:59  29  ,att25 ajp_att25
05:43:59  30  ,att26 ajp_att26
05:43:59  31  ,att27 ajp_att27
05:43:59  32  ,att28 ajp_att28
05:43:59  33  ,att29 ajp_att29
05:43:59  34  ,att30 ajp_att30
05:43:59  35  ,att31 ajp_att31
05:43:59  36  ,att32 ajp_att32
05:43:59  37  ,att33 ajp_att33
05:43:59  38  ,att34 ajp_att34
05:43:59  39  ,att35 ajp_att35
05:43:59  40  ,att36 ajp_att36
05:43:59  41  ,att37 ajp_att37
05:43:59  42  FROM svm6162
05:43:59  43  /

Table created.

Elapsed: 00:00:00.16
05:43:59 SQL> 
05:43:59 SQL> ANALYZE TABLE ajp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
05:43:59 SQL> 
05:43:59 SQL> -- rpt
05:43:59 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19793

Elapsed: 00:00:00.79
05:44:00 SQL> SELECT COUNT(*)FROM ajp_att;

  COUNT(*)
----------
     19793

Elapsed: 00:00:00.01
05:44:00 SQL> 
05:44:00 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
