
SQL*Plus: Release 11.2.0.1.0 Production on Fri Jan 7 04:48:23 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

04:48:23 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
04:48:23 SQL> 04:48:23 SQL> --
04:48:23 SQL> -- eur610.sql
04:48:23 SQL> --
04:48:23 SQL> 
04:48:23 SQL> -- Creates views and tables for backtesting a forex SVM strategy
04:48:23 SQL> 
04:48:23 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.02
04:48:23 SQL> 
04:48:23 SQL> -- I created di5min here:
04:48:23 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
04:48:23 SQL> 
04:48:23 SQL> CREATE OR REPLACE VIEW svm6102 AS
04:48:23   2  SELECT
04:48:23   3  pair
04:48:23   4  ,ydate
04:48:23   5  ,prdate
04:48:23   6  ,rownum rnum -- acts as t in my time-series
04:48:23   7  ,clse
04:48:23   8  -- Derive a bunch of attributes from clse, the latest price:
04:48:23   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
04:48:23  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
04:48:23  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
04:48:23  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
04:48:23  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
04:48:23  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
04:48:23  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
04:48:23  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
04:48:23  17  --
04:48:23  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
04:48:23  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
04:48:23  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
04:48:23  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
04:48:23  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
04:48:23  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
04:48:23  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
04:48:23  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
04:48:23  26  --
04:48:23  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
04:48:23  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
04:48:23  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
04:48:23  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
04:48:23  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
04:48:23  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
04:48:23  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
04:48:23  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
04:48:23  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
04:48:23  36  FROM di5min WHERE pair LIKE'%eur%'
04:48:23  37  AND ydate > sysdate - 95
04:48:23  38  ORDER BY ydate
04:48:23  39  /

View created.

Elapsed: 00:00:00.06
04:48:23 SQL> 
04:48:23 SQL> -- rpt
04:48:23 SQL> 
04:48:23 SQL> SELECT
04:48:23   2  pair
04:48:23   3  ,COUNT(pair)
04:48:23   4  ,MIN(clse),MAX(clse)
04:48:23   5  ,MIN(avg6),MAX(avg6)
04:48:23   6  ,MIN(ydate),MAX(ydate)
04:48:23   7  FROM svm6102
04:48:23   8  GROUP BY pair
04:48:23   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19811    1.29735	   1.4273 1.29875103 1.42436233 2010-10-04 04:50:01 2011-01-07 04:45:00

Elapsed: 00:00:00.92
04:48:24 SQL> 
04:48:24 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
04:48:24 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.04
04:48:24 SQL> CREATE TABLE svm6122 COMPRESS AS
04:48:24   2  SELECT
04:48:24   3  pair
04:48:24   4  ,ydate
04:48:24   5  ,prdate
04:48:24   6  ,clse
04:48:24   7  -- g6 is important. I want to predict g6:
04:48:24   8  ,ld6 - clse g6
04:48:24   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
04:48:24  10  -- I want more attributes from the ones I derived above:
04:48:24  11  -- clse relation to moving-min
04:48:24  12  ,clse-min4  cm4
04:48:24  13  ,clse-min6  cm6
04:48:24  14  ,clse-min8  cm8
04:48:24  15  ,clse-min10 cm10
04:48:24  16  ,clse-min12 cm12
04:48:24  17  ,clse-min14 cm14
04:48:24  18  ,clse-min16 cm16
04:48:24  19  ,clse-min18 cm18
04:48:24  20  -- clse relation to moving-avg
04:48:24  21  ,clse-avg4  ca4
04:48:24  22  ,clse-avg6  ca6
04:48:24  23  ,clse-avg8  ca8
04:48:24  24  ,clse-avg10 ca10
04:48:24  25  ,clse-avg12 ca12
04:48:24  26  ,clse-avg14 ca14
04:48:24  27  ,clse-avg16 ca16
04:48:24  28  ,clse-avg18 ca18
04:48:24  29  -- clse relation to moving-max
04:48:24  30  ,clse-max4  cx4
04:48:24  31  ,clse-max6  cx6
04:48:24  32  ,clse-max8  cx8
04:48:24  33  ,clse-max10 cx10
04:48:24  34  ,clse-max12 cx12
04:48:24  35  ,clse-max14 cx14
04:48:24  36  ,clse-max16 cx16
04:48:24  37  ,clse-max18 cx18
04:48:24  38  -- Derive more attributes.
04:48:24  39  -- I want to use CORR() here to help SVM see the shape of the series.
04:48:24  40  -- But COVAR_POP is more stable:
04:48:24  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
04:48:24  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
04:48:24  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
04:48:24  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
04:48:24  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
04:48:24  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
04:48:24  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
04:48:24  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
04:48:24  49  -- Derive date related attributes:
04:48:24  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
04:48:24  51  ,0+TO_CHAR(ydate,'D')d
04:48:24  52  ,0+TO_CHAR(ydate,'W')w
04:48:24  53  -- mpm stands for minutes-past-midnight:
04:48:24  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
04:48:24  55  -- mph stands for minutes-past-hour:
04:48:24  56  ,0+TO_CHAR(ydate,'MI')mph
04:48:24  57  FROM svm6102
04:48:24  58  ORDER BY ydate
04:48:24  59  /

Table created.

Elapsed: 00:00:02.49
04:48:27 SQL> 
04:48:27 SQL> -- rpt
04:48:27 SQL> 
04:48:27 SQL> SELECT
04:48:27   2  pair
04:48:27   3  ,COUNT(pair)
04:48:27   4  ,MIN(clse),MAX(clse)
04:48:27   5  ,MIN(ydate),MAX(ydate)
04:48:27   6  FROM svm6122
04:48:27   7  GROUP BY pair
04:48:27   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19811    1.29735	   1.4273 2010-10-04 04:50:01 2011-01-07 04:45:00

Elapsed: 00:00:00.06
04:48:27 SQL> 
04:48:27 SQL> -- Prepare for derivation of NTILE based params:
04:48:27 SQL> 
04:48:27 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.34
04:48:27 SQL> CREATE TABLE svm6142 COMPRESS AS
04:48:27   2  SELECT
04:48:27   3  pair
04:48:27   4  ,ydate
04:48:27   5  ,prdate
04:48:27   6  ,clse
04:48:27   7  ,g6
04:48:27   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
04:48:27   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
04:48:27  10  ,CASE WHEN trend IS NULL THEN 1
04:48:27  11  	    WHEN trend =0      THEN 1
04:48:27  12  	    ELSE trend END trend
04:48:27  13  ,cm4
04:48:27  14  ,cm6
04:48:27  15  ,cm8
04:48:27  16  ,cm10
04:48:27  17  ,cm12
04:48:27  18  ,cm14
04:48:27  19  ,cm16
04:48:27  20  ,cm18
04:48:27  21  --
04:48:27  22  ,ca4
04:48:27  23  ,ca6
04:48:27  24  ,ca8
04:48:27  25  ,ca10
04:48:27  26  ,ca12
04:48:27  27  ,ca14
04:48:27  28  ,ca16
04:48:27  29  ,ca18
04:48:27  30  --
04:48:27  31  ,cx4
04:48:27  32  ,cx6
04:48:27  33  ,cx8
04:48:27  34  ,cx10
04:48:27  35  ,cx12
04:48:27  36  ,cx14
04:48:27  37  ,cx16
04:48:27  38  ,cx18
04:48:27  39  --
04:48:27  40  ,crr4
04:48:27  41  ,crr6
04:48:27  42  ,crr8
04:48:27  43  ,crr10
04:48:27  44  ,crr12
04:48:27  45  ,crr14
04:48:27  46  ,crr16
04:48:27  47  ,crr18
04:48:27  48  --
04:48:27  49  ,hh
04:48:27  50  ,d
04:48:27  51  ,w
04:48:27  52  ,mpm
04:48:27  53  ,mph
04:48:27  54  FROM svm6122
04:48:27  55  ORDER BY ydate
04:48:27  56  /

Table created.

Elapsed: 00:00:00.39
04:48:27 SQL> 
04:48:27 SQL> -- rpt
04:48:27 SQL> 
04:48:27 SQL> SELECT
04:48:27   2  pair
04:48:27   3  ,trend
04:48:27   4  ,gatt
04:48:27   5  ,COUNT(pair)
04:48:27   6  ,AVG(g6)
04:48:27   7  FROM svm6142
04:48:27   8  GROUP BY pair,trend,gatt
04:48:27   9  ORDER BY pair,trend,gatt
04:48:27  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6599  -.0031449
eur_usd 	-1 up	      3565 .004450866
eur_usd 	-1		56
eur_usd 	 1 nup	      5870 -.00325398
eur_usd 	 1 up	      3705 .005071238
eur_usd 	 1		16

6 rows selected.

Elapsed: 00:00:00.04
04:48:27 SQL> 
04:48:27 SQL> 
04:48:27 SQL> -- Derive NTILE based params:
04:48:27 SQL> 
04:48:27 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.03
04:48:27 SQL> CREATE TABLE svm6162 COMPRESS AS
04:48:27   2  SELECT
04:48:27   3  pair
04:48:27   4  ,ydate
04:48:27   5  ,prdate
04:48:27   6  ,clse
04:48:27   7  ,g6
04:48:27   8  ,gatt
04:48:27   9  ,gattn
04:48:27  10  ,trend
04:48:27  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
04:48:27  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
04:48:27  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
04:48:27  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
04:48:27  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
04:48:27  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
04:48:27  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
04:48:27  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
04:48:27  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
04:48:27  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
04:48:27  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
04:48:27  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
04:48:27  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
04:48:27  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
04:48:27  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
04:48:27  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
04:48:27  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
04:48:27  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
04:48:27  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
04:48:27  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
04:48:27  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
04:48:27  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
04:48:27  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
04:48:27  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
04:48:27  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
04:48:27  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
04:48:27  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
04:48:27  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
04:48:27  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
04:48:27  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
04:48:27  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
04:48:27  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
04:48:27  43  ,hh  att32
04:48:27  44  ,d   att33
04:48:27  45  ,w   att34
04:48:27  46  ,mpm att35
04:48:27  47  ,mph att36
04:48:27  48  ,trend att37
04:48:27  49  FROM svm6142
04:48:27  50  ORDER BY ydate
04:48:27  51  /

Table created.

Elapsed: 00:00:04.92
04:48:32 SQL> 
04:48:32 SQL> -- rpt
04:48:32 SQL> 
04:48:32 SQL> SELECT
04:48:32   2  pair
04:48:32   3  ,trend
04:48:32   4  ,gatt
04:48:32   5  ,COUNT(pair)
04:48:32   6  ,AVG(g6)
04:48:32   7  FROM svm6162
04:48:32   8  GROUP BY pair,trend,gatt
04:48:32   9  ORDER BY pair,trend,gatt
04:48:32  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6599  -.0031449
eur_usd 	-1 up	      3565 .004450866
eur_usd 	-1		56
eur_usd 	 1 nup	      5870 -.00325398
eur_usd 	 1 up	      3705 .005071238
eur_usd 	 1		16

6 rows selected.

Elapsed: 00:00:00.03
04:48:32 SQL> 
04:48:32 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.27
04:48:33 SQL> CREATE TABLE modsrc COMPRESS AS
04:48:33   2  SELECT
04:48:33   3  pair
04:48:33   4  ,ydate
04:48:33   5  ,prdate
04:48:33   6  ,trend
04:48:33   7  ,g6
04:48:33   8  ,gatt
04:48:33   9  ,gattn
04:48:33  10  FROM svm6162
04:48:33  11  /

Table created.

Elapsed: 00:00:00.10
04:48:33 SQL> 
04:48:33 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
04:48:33 SQL> 
04:48:33 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
04:48:33 SQL> CREATE TABLE eur_ms610 COMPRESS AS
04:48:33   2  SELECT
04:48:33   3  ydate
04:48:33   4  ,trend eur_trend
04:48:33   5  ,g6    eur_g6
04:48:33   6  ,gatt  eur_gatt
04:48:33   7  ,gattn eur_gattn
04:48:33   8  FROM modsrc
04:48:33   9  /

Table created.

Elapsed: 00:00:00.07
04:48:33 SQL> 
04:48:33 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
04:48:33 SQL> 
04:48:33 SQL> -- I need a copy of the attributes:
04:48:33 SQL> 
04:48:33 SQL> 
04:48:33 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.04
04:48:33 SQL> CREATE TABLE eur_att COMPRESS AS
04:48:33   2  SELECT
04:48:33   3  ydate
04:48:33   4  ,att00 eur_att00
04:48:33   5  ,att01 eur_att01
04:48:33   6  ,att02 eur_att02
04:48:33   7  ,att03 eur_att03
04:48:33   8  ,att04 eur_att04
04:48:33   9  ,att05 eur_att05
04:48:33  10  ,att06 eur_att06
04:48:33  11  ,att07 eur_att07
04:48:33  12  ,att08 eur_att08
04:48:33  13  ,att09 eur_att09
04:48:33  14  ,att10 eur_att10
04:48:33  15  ,att11 eur_att11
04:48:33  16  ,att12 eur_att12
04:48:33  17  ,att13 eur_att13
04:48:33  18  ,att14 eur_att14
04:48:33  19  ,att15 eur_att15
04:48:33  20  ,att16 eur_att16
04:48:33  21  ,att17 eur_att17
04:48:33  22  ,att18 eur_att18
04:48:33  23  ,att19 eur_att19
04:48:33  24  ,att20 eur_att20
04:48:33  25  ,att21 eur_att21
04:48:33  26  ,att22 eur_att22
04:48:33  27  ,att23 eur_att23
04:48:33  28  ,att24 eur_att24
04:48:33  29  ,att25 eur_att25
04:48:33  30  ,att26 eur_att26
04:48:33  31  ,att27 eur_att27
04:48:33  32  ,att28 eur_att28
04:48:33  33  ,att29 eur_att29
04:48:33  34  ,att30 eur_att30
04:48:33  35  ,att31 eur_att31
04:48:33  36  ,att32 eur_att32
04:48:33  37  ,att33 eur_att33
04:48:33  38  ,att34 eur_att34
04:48:33  39  ,att35 eur_att35
04:48:33  40  ,att36 eur_att36
04:48:33  41  ,att37 eur_att37
04:48:33  42  FROM svm6162
04:48:33  43  /

Table created.

Elapsed: 00:00:00.16
04:48:34 SQL> 
04:48:34 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
04:48:34 SQL> 
04:48:34 SQL> -- rpt
04:48:34 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19811

Elapsed: 00:00:00.94
04:48:35 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19811

Elapsed: 00:00:00.00
04:48:35 SQL> 
04:48:35 SQL> --
04:48:35 SQL> -- aud610.sql
04:48:35 SQL> --
04:48:35 SQL> 
04:48:35 SQL> -- Creates views and tables for backtesting a forex SVM strategy
04:48:35 SQL> 
04:48:35 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:01.16
04:48:36 SQL> 
04:48:36 SQL> -- I created di5min here:
04:48:36 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
04:48:36 SQL> 
04:48:36 SQL> CREATE OR REPLACE VIEW svm6102 AS
04:48:36   2  SELECT
04:48:36   3  pair
04:48:36   4  ,ydate
04:48:36   5  ,prdate
04:48:36   6  ,rownum rnum -- acts as t in my time-series
04:48:36   7  ,clse
04:48:36   8  -- Derive a bunch of attributes from clse, the latest price:
04:48:36   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
04:48:36  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
04:48:36  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
04:48:36  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
04:48:36  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
04:48:36  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
04:48:36  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
04:48:36  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
04:48:36  17  --
04:48:36  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
04:48:36  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
04:48:36  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
04:48:36  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
04:48:36  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
04:48:36  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
04:48:36  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
04:48:36  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
04:48:36  26  --
04:48:36  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
04:48:36  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
04:48:36  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
04:48:36  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
04:48:36  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
04:48:36  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
04:48:36  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
04:48:36  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
04:48:36  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
04:48:36  36  FROM di5min WHERE pair LIKE'%aud%'
04:48:36  37  AND ydate > sysdate - 95
04:48:36  38  ORDER BY ydate
04:48:36  39  /

View created.

Elapsed: 00:00:00.05
04:48:36 SQL> 
04:48:36 SQL> -- rpt
04:48:36 SQL> 
04:48:36 SQL> SELECT
04:48:36   2  pair
04:48:36   3  ,COUNT(pair)
04:48:36   4  ,MIN(clse),MAX(clse)
04:48:36   5  ,MIN(avg6),MAX(avg6)
04:48:36   6  ,MIN(ydate),MAX(ydate)
04:48:36   7  FROM svm6102
04:48:36   8  GROUP BY pair
04:48:36   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19808	.95405	  1.02495 .957141438 1.02284247 2010-10-04 04:50:01 2011-01-07 04:45:00

Elapsed: 00:00:00.90
04:48:37 SQL> 
04:48:37 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
04:48:37 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:01.29
04:48:38 SQL> CREATE TABLE svm6122 COMPRESS AS
04:48:38   2  SELECT
04:48:38   3  pair
04:48:38   4  ,ydate
04:48:38   5  ,prdate
04:48:38   6  ,clse
04:48:38   7  -- g6 is important. I want to predict g6:
04:48:38   8  ,ld6 - clse g6
04:48:38   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
04:48:38  10  -- I want more attributes from the ones I derived above:
04:48:38  11  -- clse relation to moving-min
04:48:38  12  ,clse-min4  cm4
04:48:38  13  ,clse-min6  cm6
04:48:38  14  ,clse-min8  cm8
04:48:38  15  ,clse-min10 cm10
04:48:38  16  ,clse-min12 cm12
04:48:38  17  ,clse-min14 cm14
04:48:38  18  ,clse-min16 cm16
04:48:38  19  ,clse-min18 cm18
04:48:38  20  -- clse relation to moving-avg
04:48:38  21  ,clse-avg4  ca4
04:48:38  22  ,clse-avg6  ca6
04:48:38  23  ,clse-avg8  ca8
04:48:38  24  ,clse-avg10 ca10
04:48:38  25  ,clse-avg12 ca12
04:48:38  26  ,clse-avg14 ca14
04:48:38  27  ,clse-avg16 ca16
04:48:38  28  ,clse-avg18 ca18
04:48:38  29  -- clse relation to moving-max
04:48:38  30  ,clse-max4  cx4
04:48:38  31  ,clse-max6  cx6
04:48:38  32  ,clse-max8  cx8
04:48:38  33  ,clse-max10 cx10
04:48:38  34  ,clse-max12 cx12
04:48:38  35  ,clse-max14 cx14
04:48:38  36  ,clse-max16 cx16
04:48:38  37  ,clse-max18 cx18
04:48:38  38  -- Derive more attributes.
04:48:38  39  -- I want to use CORR() here to help SVM see the shape of the series.
04:48:38  40  -- But COVAR_POP is more stable:
04:48:38  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
04:48:38  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
04:48:38  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
04:48:38  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
04:48:38  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
04:48:38  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
04:48:38  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
04:48:38  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
04:48:38  49  -- Derive date related attributes:
04:48:38  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
04:48:38  51  ,0+TO_CHAR(ydate,'D')d
04:48:38  52  ,0+TO_CHAR(ydate,'W')w
04:48:38  53  -- mpm stands for minutes-past-midnight:
04:48:38  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
04:48:38  55  -- mph stands for minutes-past-hour:
04:48:38  56  ,0+TO_CHAR(ydate,'MI')mph
04:48:38  57  FROM svm6102
04:48:38  58  ORDER BY ydate
04:48:38  59  /

Table created.

Elapsed: 00:00:02.19
04:48:41 SQL> 
04:48:41 SQL> -- rpt
04:48:41 SQL> 
04:48:41 SQL> SELECT
04:48:41   2  pair
04:48:41   3  ,COUNT(pair)
04:48:41   4  ,MIN(clse),MAX(clse)
04:48:41   5  ,MIN(ydate),MAX(ydate)
04:48:41   6  FROM svm6122
04:48:41   7  GROUP BY pair
04:48:41   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19808	.95405	  1.02495 2010-10-04 04:50:01 2011-01-07 04:45:00

Elapsed: 00:00:00.04
04:48:41 SQL> 
04:48:41 SQL> -- Prepare for derivation of NTILE based params:
04:48:41 SQL> 
04:48:41 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:02.51
04:48:43 SQL> CREATE TABLE svm6142 COMPRESS AS
04:48:43   2  SELECT
04:48:43   3  pair
04:48:43   4  ,ydate
04:48:43   5  ,prdate
04:48:43   6  ,clse
04:48:43   7  ,g6
04:48:43   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
04:48:43   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
04:48:43  10  ,CASE WHEN trend IS NULL THEN 1
04:48:43  11  	    WHEN trend =0      THEN 1
04:48:43  12  	    ELSE trend END trend
04:48:43  13  ,cm4
04:48:43  14  ,cm6
04:48:43  15  ,cm8
04:48:43  16  ,cm10
04:48:43  17  ,cm12
04:48:43  18  ,cm14
04:48:43  19  ,cm16
04:48:43  20  ,cm18
04:48:43  21  --
04:48:43  22  ,ca4
04:48:43  23  ,ca6
04:48:43  24  ,ca8
04:48:43  25  ,ca10
04:48:43  26  ,ca12
04:48:43  27  ,ca14
04:48:43  28  ,ca16
04:48:43  29  ,ca18
04:48:43  30  --
04:48:43  31  ,cx4
04:48:43  32  ,cx6
04:48:43  33  ,cx8
04:48:43  34  ,cx10
04:48:43  35  ,cx12
04:48:43  36  ,cx14
04:48:43  37  ,cx16
04:48:43  38  ,cx18
04:48:43  39  --
04:48:43  40  ,crr4
04:48:43  41  ,crr6
04:48:43  42  ,crr8
04:48:43  43  ,crr10
04:48:43  44  ,crr12
04:48:43  45  ,crr14
04:48:43  46  ,crr16
04:48:43  47  ,crr18
04:48:43  48  --
04:48:43  49  ,hh
04:48:43  50  ,d
04:48:43  51  ,w
04:48:43  52  ,mpm
04:48:43  53  ,mph
04:48:43  54  FROM svm6122
04:48:43  55  ORDER BY ydate
04:48:43  56  /

Table created.

Elapsed: 00:00:00.62
04:48:44 SQL> 
04:48:44 SQL> -- rpt
04:48:44 SQL> 
04:48:44 SQL> SELECT
04:48:44   2  pair
04:48:44   3  ,trend
04:48:44   4  ,gatt
04:48:44   5  ,COUNT(pair)
04:48:44   6  ,AVG(g6)
04:48:44   7  FROM svm6142
04:48:44   8  GROUP BY pair,trend,gatt
04:48:44   9  ORDER BY pair,trend,gatt
04:48:44  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5706 -.00213861
aud_usd 	-1 up	      3701 .003745866
aud_usd 	-1		68
aud_usd 	 1 nup	      6736 -.00213563
aud_usd 	 1 up	      3593 .004054752
aud_usd 	 1		 4

6 rows selected.

Elapsed: 00:00:00.06
04:48:44 SQL> 
04:48:44 SQL> 
04:48:44 SQL> -- Derive NTILE based params:
04:48:44 SQL> 
04:48:44 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:01.73
04:48:45 SQL> CREATE TABLE svm6162 COMPRESS AS
04:48:45   2  SELECT
04:48:45   3  pair
04:48:45   4  ,ydate
04:48:45   5  ,prdate
04:48:45   6  ,clse
04:48:45   7  ,g6
04:48:45   8  ,gatt
04:48:45   9  ,gattn
04:48:45  10  ,trend
04:48:45  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
04:48:45  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
04:48:45  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
04:48:45  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
04:48:45  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
04:48:45  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
04:48:45  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
04:48:45  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
04:48:45  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
04:48:45  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
04:48:45  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
04:48:45  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
04:48:45  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
04:48:45  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
04:48:45  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
04:48:45  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
04:48:45  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
04:48:45  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
04:48:45  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
04:48:45  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
04:48:45  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
04:48:45  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
04:48:45  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
04:48:45  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
04:48:45  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
04:48:45  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
04:48:45  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
04:48:45  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
04:48:45  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
04:48:45  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
04:48:45  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
04:48:45  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
04:48:45  43  ,hh  att32
04:48:45  44  ,d   att33
04:48:45  45  ,w   att34
04:48:45  46  ,mpm att35
04:48:45  47  ,mph att36
04:48:45  48  ,trend att37
04:48:45  49  FROM svm6142
04:48:45  50  ORDER BY ydate
04:48:45  51  /

Table created.

Elapsed: 00:00:05.59
04:48:51 SQL> 
04:48:51 SQL> -- rpt
04:48:51 SQL> 
04:48:51 SQL> SELECT
04:48:51   2  pair
04:48:51   3  ,trend
04:48:51   4  ,gatt
04:48:51   5  ,COUNT(pair)
04:48:51   6  ,AVG(g6)
04:48:51   7  FROM svm6162
04:48:51   8  GROUP BY pair,trend,gatt
04:48:51   9  ORDER BY pair,trend,gatt
04:48:51  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5706 -.00213861
aud_usd 	-1 up	      3701 .003745866
aud_usd 	-1		68
aud_usd 	 1 nup	      6736 -.00213563
aud_usd 	 1 up	      3593 .004054752
aud_usd 	 1		 4

6 rows selected.

Elapsed: 00:00:00.04
04:48:51 SQL> 
04:48:51 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.14
04:48:51 SQL> CREATE TABLE modsrc COMPRESS AS
04:48:51   2  SELECT
04:48:51   3  pair
04:48:51   4  ,ydate
04:48:51   5  ,prdate
04:48:51   6  ,trend
04:48:51   7  ,g6
04:48:51   8  ,gatt
04:48:51   9  ,gattn
04:48:51  10  FROM svm6162
04:48:51  11  /

Table created.

Elapsed: 00:00:00.18
04:48:51 SQL> 
04:48:51 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.38
04:48:52 SQL> 
04:48:52 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.10
04:48:52 SQL> CREATE TABLE aud_ms610 COMPRESS AS
04:48:52   2  SELECT
04:48:52   3  ydate
04:48:52   4  ,trend aud_trend
04:48:52   5  ,g6    aud_g6
04:48:52   6  ,gatt  aud_gatt
04:48:52   7  ,gattn aud_gattn
04:48:52   8  FROM modsrc
04:48:52   9  /

Table created.

Elapsed: 00:00:00.05
04:48:52 SQL> 
04:48:52 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
04:48:52 SQL> 
04:48:52 SQL> -- I need a copy of the attributes:
04:48:52 SQL> 
04:48:52 SQL> 
04:48:52 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.05
04:48:52 SQL> CREATE TABLE aud_att COMPRESS AS
04:48:52   2  SELECT
04:48:52   3  ydate
04:48:52   4  ,att00 aud_att00
04:48:52   5  ,att01 aud_att01
04:48:52   6  ,att02 aud_att02
04:48:52   7  ,att03 aud_att03
04:48:52   8  ,att04 aud_att04
04:48:52   9  ,att05 aud_att05
04:48:52  10  ,att06 aud_att06
04:48:52  11  ,att07 aud_att07
04:48:52  12  ,att08 aud_att08
04:48:52  13  ,att09 aud_att09
04:48:52  14  ,att10 aud_att10
04:48:52  15  ,att11 aud_att11
04:48:52  16  ,att12 aud_att12
04:48:52  17  ,att13 aud_att13
04:48:52  18  ,att14 aud_att14
04:48:52  19  ,att15 aud_att15
04:48:52  20  ,att16 aud_att16
04:48:52  21  ,att17 aud_att17
04:48:52  22  ,att18 aud_att18
04:48:52  23  ,att19 aud_att19
04:48:52  24  ,att20 aud_att20
04:48:52  25  ,att21 aud_att21
04:48:52  26  ,att22 aud_att22
04:48:52  27  ,att23 aud_att23
04:48:52  28  ,att24 aud_att24
04:48:52  29  ,att25 aud_att25
04:48:52  30  ,att26 aud_att26
04:48:52  31  ,att27 aud_att27
04:48:52  32  ,att28 aud_att28
04:48:52  33  ,att29 aud_att29
04:48:52  34  ,att30 aud_att30
04:48:52  35  ,att31 aud_att31
04:48:52  36  ,att32 aud_att32
04:48:52  37  ,att33 aud_att33
04:48:52  38  ,att34 aud_att34
04:48:52  39  ,att35 aud_att35
04:48:52  40  ,att36 aud_att36
04:48:52  41  ,att37 aud_att37
04:48:52  42  FROM svm6162
04:48:52  43  /

Table created.

Elapsed: 00:00:00.16
04:48:52 SQL> 
04:48:52 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
04:48:53 SQL> 
04:48:53 SQL> -- rpt
04:48:53 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.88
04:48:54 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.00
04:48:54 SQL> 
04:48:54 SQL> --
04:48:54 SQL> -- gbp610.sql
04:48:54 SQL> --
04:48:54 SQL> 
04:48:54 SQL> -- Creates views and tables for backtesting a forex SVM strategy
04:48:54 SQL> 
04:48:54 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
04:48:54 SQL> 
04:48:54 SQL> -- I created di5min here:
04:48:54 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
04:48:54 SQL> 
04:48:54 SQL> CREATE OR REPLACE VIEW svm6102 AS
04:48:54   2  SELECT
04:48:54   3  pair
04:48:54   4  ,ydate
04:48:54   5  ,prdate
04:48:54   6  ,rownum rnum -- acts as t in my time-series
04:48:54   7  ,clse
04:48:54   8  -- Derive a bunch of attributes from clse, the latest price:
04:48:54   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
04:48:54  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
04:48:54  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
04:48:54  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
04:48:54  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
04:48:54  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
04:48:54  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
04:48:54  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
04:48:54  17  --
04:48:54  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
04:48:54  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
04:48:54  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
04:48:54  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
04:48:54  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
04:48:54  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
04:48:54  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
04:48:54  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
04:48:54  26  --
04:48:54  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
04:48:54  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
04:48:54  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
04:48:54  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
04:48:54  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
04:48:54  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
04:48:54  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
04:48:54  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
04:48:54  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
04:48:54  36  FROM di5min WHERE pair LIKE'%gbp%'
04:48:54  37  AND ydate > sysdate - 95
04:48:54  38  ORDER BY ydate
04:48:54  39  /

View created.

Elapsed: 00:00:00.05
04:48:54 SQL> 
04:48:54 SQL> -- rpt
04:48:54 SQL> 
04:48:54 SQL> SELECT
04:48:54   2  pair
04:48:54   3  ,COUNT(pair)
04:48:54   4  ,MIN(clse),MAX(clse)
04:48:54   5  ,MIN(avg6),MAX(avg6)
04:48:54   6  ,MIN(ydate),MAX(ydate)
04:48:54   7  FROM svm6102
04:48:54   8  GROUP BY pair
04:48:54   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19810   1.535325	   1.6295 1.53696747 1.62716986 2010-10-04 04:50:01 2011-01-07 04:45:00

Elapsed: 00:00:00.86
04:48:55 SQL> 
04:48:55 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
04:48:55 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.28
04:48:55 SQL> CREATE TABLE svm6122 COMPRESS AS
04:48:55   2  SELECT
04:48:55   3  pair
04:48:55   4  ,ydate
04:48:55   5  ,prdate
04:48:55   6  ,clse
04:48:55   7  -- g6 is important. I want to predict g6:
04:48:55   8  ,ld6 - clse g6
04:48:55   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
04:48:55  10  -- I want more attributes from the ones I derived above:
04:48:55  11  -- clse relation to moving-min
04:48:55  12  ,clse-min4  cm4
04:48:55  13  ,clse-min6  cm6
04:48:55  14  ,clse-min8  cm8
04:48:55  15  ,clse-min10 cm10
04:48:55  16  ,clse-min12 cm12
04:48:55  17  ,clse-min14 cm14
04:48:55  18  ,clse-min16 cm16
04:48:55  19  ,clse-min18 cm18
04:48:55  20  -- clse relation to moving-avg
04:48:55  21  ,clse-avg4  ca4
04:48:55  22  ,clse-avg6  ca6
04:48:55  23  ,clse-avg8  ca8
04:48:55  24  ,clse-avg10 ca10
04:48:55  25  ,clse-avg12 ca12
04:48:55  26  ,clse-avg14 ca14
04:48:55  27  ,clse-avg16 ca16
04:48:55  28  ,clse-avg18 ca18
04:48:55  29  -- clse relation to moving-max
04:48:55  30  ,clse-max4  cx4
04:48:55  31  ,clse-max6  cx6
04:48:55  32  ,clse-max8  cx8
04:48:55  33  ,clse-max10 cx10
04:48:55  34  ,clse-max12 cx12
04:48:55  35  ,clse-max14 cx14
04:48:55  36  ,clse-max16 cx16
04:48:55  37  ,clse-max18 cx18
04:48:55  38  -- Derive more attributes.
04:48:55  39  -- I want to use CORR() here to help SVM see the shape of the series.
04:48:55  40  -- But COVAR_POP is more stable:
04:48:55  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
04:48:55  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
04:48:55  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
04:48:55  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
04:48:55  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
04:48:55  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
04:48:55  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
04:48:55  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
04:48:55  49  -- Derive date related attributes:
04:48:55  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
04:48:55  51  ,0+TO_CHAR(ydate,'D')d
04:48:55  52  ,0+TO_CHAR(ydate,'W')w
04:48:55  53  -- mpm stands for minutes-past-midnight:
04:48:55  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
04:48:55  55  -- mph stands for minutes-past-hour:
04:48:55  56  ,0+TO_CHAR(ydate,'MI')mph
04:48:55  57  FROM svm6102
04:48:55  58  ORDER BY ydate
04:48:55  59  /

Table created.

Elapsed: 00:00:02.10
04:48:57 SQL> 
04:48:57 SQL> -- rpt
04:48:57 SQL> 
04:48:57 SQL> SELECT
04:48:57   2  pair
04:48:57   3  ,COUNT(pair)
04:48:57   4  ,MIN(clse),MAX(clse)
04:48:57   5  ,MIN(ydate),MAX(ydate)
04:48:57   6  FROM svm6122
04:48:57   7  GROUP BY pair
04:48:57   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19810   1.535325	   1.6295 2010-10-04 04:50:01 2011-01-07 04:45:00

Elapsed: 00:00:00.04
04:48:57 SQL> 
04:48:57 SQL> -- Prepare for derivation of NTILE based params:
04:48:57 SQL> 
04:48:57 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.32
04:48:58 SQL> CREATE TABLE svm6142 COMPRESS AS
04:48:58   2  SELECT
04:48:58   3  pair
04:48:58   4  ,ydate
04:48:58   5  ,prdate
04:48:58   6  ,clse
04:48:58   7  ,g6
04:48:58   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
04:48:58   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
04:48:58  10  ,CASE WHEN trend IS NULL THEN 1
04:48:58  11  	    WHEN trend =0      THEN 1
04:48:58  12  	    ELSE trend END trend
04:48:58  13  ,cm4
04:48:58  14  ,cm6
04:48:58  15  ,cm8
04:48:58  16  ,cm10
04:48:58  17  ,cm12
04:48:58  18  ,cm14
04:48:58  19  ,cm16
04:48:58  20  ,cm18
04:48:58  21  --
04:48:58  22  ,ca4
04:48:58  23  ,ca6
04:48:58  24  ,ca8
04:48:58  25  ,ca10
04:48:58  26  ,ca12
04:48:58  27  ,ca14
04:48:58  28  ,ca16
04:48:58  29  ,ca18
04:48:58  30  --
04:48:58  31  ,cx4
04:48:58  32  ,cx6
04:48:58  33  ,cx8
04:48:58  34  ,cx10
04:48:58  35  ,cx12
04:48:58  36  ,cx14
04:48:58  37  ,cx16
04:48:58  38  ,cx18
04:48:58  39  --
04:48:58  40  ,crr4
04:48:58  41  ,crr6
04:48:58  42  ,crr8
04:48:58  43  ,crr10
04:48:58  44  ,crr12
04:48:58  45  ,crr14
04:48:58  46  ,crr16
04:48:58  47  ,crr18
04:48:58  48  --
04:48:58  49  ,hh
04:48:58  50  ,d
04:48:58  51  ,w
04:48:58  52  ,mpm
04:48:58  53  ,mph
04:48:58  54  FROM svm6122
04:48:58  55  ORDER BY ydate
04:48:58  56  /

Table created.

Elapsed: 00:00:00.37
04:48:58 SQL> 
04:48:58 SQL> -- rpt
04:48:58 SQL> 
04:48:58 SQL> SELECT
04:48:58   2  pair
04:48:58   3  ,trend
04:48:58   4  ,gatt
04:48:58   5  ,COUNT(pair)
04:48:58   6  ,AVG(g6)
04:48:58   7  FROM svm6142
04:48:58   8  GROUP BY pair,trend,gatt
04:48:58   9  ORDER BY pair,trend,gatt
04:48:58  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6431 -.00262526
gbp_usd 	-1 up	      3559 .004339945
gbp_usd 	-1		67
gbp_usd 	 1 nup	      6274 -.00265665
gbp_usd 	 1 up	      3474  .00452396
gbp_usd 	 1		 5

6 rows selected.

Elapsed: 00:00:00.04
04:48:58 SQL> 
04:48:58 SQL> 
04:48:58 SQL> -- Derive NTILE based params:
04:48:58 SQL> 
04:48:58 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.18
04:48:58 SQL> CREATE TABLE svm6162 COMPRESS AS
04:48:58   2  SELECT
04:48:58   3  pair
04:48:58   4  ,ydate
04:48:58   5  ,prdate
04:48:58   6  ,clse
04:48:58   7  ,g6
04:48:58   8  ,gatt
04:48:58   9  ,gattn
04:48:58  10  ,trend
04:48:58  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
04:48:58  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
04:48:58  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
04:48:58  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
04:48:58  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
04:48:58  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
04:48:58  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
04:48:58  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
04:48:58  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
04:48:58  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
04:48:58  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
04:48:58  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
04:48:58  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
04:48:58  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
04:48:58  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
04:48:58  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
04:48:58  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
04:48:58  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
04:48:58  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
04:48:58  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
04:48:58  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
04:48:58  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
04:48:58  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
04:48:58  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
04:48:58  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
04:48:58  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
04:48:58  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
04:48:58  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
04:48:58  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
04:48:58  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
04:48:58  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
04:48:58  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
04:48:58  43  ,hh  att32
04:48:58  44  ,d   att33
04:48:58  45  ,w   att34
04:48:58  46  ,mpm att35
04:48:58  47  ,mph att36
04:48:58  48  ,trend att37
04:48:58  49  FROM svm6142
04:48:58  50  ORDER BY ydate
04:48:58  51  /

Table created.

Elapsed: 00:00:04.86
04:49:03 SQL> 
04:49:03 SQL> -- rpt
04:49:03 SQL> 
04:49:03 SQL> SELECT
04:49:03   2  pair
04:49:03   3  ,trend
04:49:03   4  ,gatt
04:49:03   5  ,COUNT(pair)
04:49:03   6  ,AVG(g6)
04:49:03   7  FROM svm6162
04:49:03   8  GROUP BY pair,trend,gatt
04:49:03   9  ORDER BY pair,trend,gatt
04:49:03  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6431 -.00262526
gbp_usd 	-1 up	      3559 .004339945
gbp_usd 	-1		67
gbp_usd 	 1 nup	      6274 -.00265665
gbp_usd 	 1 up	      3474  .00452396
gbp_usd 	 1		 5

6 rows selected.

Elapsed: 00:00:00.03
04:49:03 SQL> 
04:49:03 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.34
04:49:04 SQL> CREATE TABLE modsrc COMPRESS AS
04:49:04   2  SELECT
04:49:04   3  pair
04:49:04   4  ,ydate
04:49:04   5  ,prdate
04:49:04   6  ,trend
04:49:04   7  ,g6
04:49:04   8  ,gatt
04:49:04   9  ,gattn
04:49:04  10  FROM svm6162
04:49:04  11  /

Table created.

Elapsed: 00:00:00.08
04:49:04 SQL> 
04:49:04 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
04:49:04 SQL> 
04:49:04 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
04:49:04 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
04:49:04   2  SELECT
04:49:04   3  ydate
04:49:04   4  ,trend gbp_trend
04:49:04   5  ,g6    gbp_g6
04:49:04   6  ,gatt  gbp_gatt
04:49:04   7  ,gattn gbp_gattn
04:49:04   8  FROM modsrc
04:49:04   9  /

Table created.

Elapsed: 00:00:00.07
04:49:04 SQL> 
04:49:04 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.38
04:49:04 SQL> 
04:49:04 SQL> -- I need a copy of the attributes:
04:49:04 SQL> 
04:49:04 SQL> 
04:49:04 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.47
04:49:05 SQL> CREATE TABLE gbp_att COMPRESS AS
04:49:05   2  SELECT
04:49:05   3  ydate
04:49:05   4  ,att00 gbp_att00
04:49:05   5  ,att01 gbp_att01
04:49:05   6  ,att02 gbp_att02
04:49:05   7  ,att03 gbp_att03
04:49:05   8  ,att04 gbp_att04
04:49:05   9  ,att05 gbp_att05
04:49:05  10  ,att06 gbp_att06
04:49:05  11  ,att07 gbp_att07
04:49:05  12  ,att08 gbp_att08
04:49:05  13  ,att09 gbp_att09
04:49:05  14  ,att10 gbp_att10
04:49:05  15  ,att11 gbp_att11
04:49:05  16  ,att12 gbp_att12
04:49:05  17  ,att13 gbp_att13
04:49:05  18  ,att14 gbp_att14
04:49:05  19  ,att15 gbp_att15
04:49:05  20  ,att16 gbp_att16
04:49:05  21  ,att17 gbp_att17
04:49:05  22  ,att18 gbp_att18
04:49:05  23  ,att19 gbp_att19
04:49:05  24  ,att20 gbp_att20
04:49:05  25  ,att21 gbp_att21
04:49:05  26  ,att22 gbp_att22
04:49:05  27  ,att23 gbp_att23
04:49:05  28  ,att24 gbp_att24
04:49:05  29  ,att25 gbp_att25
04:49:05  30  ,att26 gbp_att26
04:49:05  31  ,att27 gbp_att27
04:49:05  32  ,att28 gbp_att28
04:49:05  33  ,att29 gbp_att29
04:49:05  34  ,att30 gbp_att30
04:49:05  35  ,att31 gbp_att31
04:49:05  36  ,att32 gbp_att32
04:49:05  37  ,att33 gbp_att33
04:49:05  38  ,att34 gbp_att34
04:49:05  39  ,att35 gbp_att35
04:49:05  40  ,att36 gbp_att36
04:49:05  41  ,att37 gbp_att37
04:49:05  42  FROM svm6162
04:49:05  43  /

Table created.

Elapsed: 00:00:02.42
04:49:07 SQL> 
04:49:07 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:01.32
04:49:09 SQL> 
04:49:09 SQL> -- rpt
04:49:09 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19810

Elapsed: 00:00:00.95
04:49:10 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19810

Elapsed: 00:00:00.01
04:49:10 SQL> 
04:49:10 SQL> --
04:49:10 SQL> -- jpy610.sql
04:49:10 SQL> --
04:49:10 SQL> 
04:49:10 SQL> -- Creates views and tables for backtesting a forex SVM strategy
04:49:10 SQL> 
04:49:10 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:01.93
04:49:11 SQL> 
04:49:11 SQL> -- I created di5min here:
04:49:11 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
04:49:11 SQL> 
04:49:11 SQL> CREATE OR REPLACE VIEW svm6102 AS
04:49:11   2  SELECT
04:49:11   3  pair
04:49:11   4  ,ydate
04:49:11   5  ,prdate
04:49:11   6  ,rownum rnum -- acts as t in my time-series
04:49:11   7  ,clse
04:49:11   8  -- Derive a bunch of attributes from clse, the latest price:
04:49:11   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
04:49:11  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
04:49:11  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
04:49:11  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
04:49:11  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
04:49:11  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
04:49:11  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
04:49:11  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
04:49:11  17  --
04:49:11  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
04:49:11  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
04:49:11  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
04:49:11  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
04:49:11  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
04:49:11  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
04:49:11  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
04:49:11  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
04:49:11  26  --
04:49:11  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
04:49:11  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
04:49:11  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
04:49:11  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
04:49:11  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
04:49:11  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
04:49:11  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
04:49:11  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
04:49:11  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
04:49:11  36  FROM di5min WHERE pair LIKE'%jpy%'
04:49:11  37  AND ydate > sysdate - 95
04:49:11  38  ORDER BY ydate
04:49:11  39  /

View created.

Elapsed: 00:00:00.21
04:49:12 SQL> 
04:49:12 SQL> -- rpt
04:49:12 SQL> 
04:49:12 SQL> SELECT
04:49:12   2  pair
04:49:12   3  ,COUNT(pair)
04:49:12   4  ,MIN(clse),MAX(clse)
04:49:12   5  ,MIN(avg6),MAX(avg6)
04:49:12   6  ,MIN(ydate),MAX(ydate)
04:49:12   7  FROM svm6102
04:49:12   8  GROUP BY pair
04:49:12   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19809	 80.25	   84.485 80.3595205 84.3105479 2010-10-04 04:50:01 2011-01-07 04:45:00

Elapsed: 00:00:01.00
04:49:13 SQL> 
04:49:13 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
04:49:13 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:02.03
04:49:15 SQL> CREATE TABLE svm6122 COMPRESS AS
04:49:15   2  SELECT
04:49:15   3  pair
04:49:15   4  ,ydate
04:49:15   5  ,prdate
04:49:15   6  ,clse
04:49:15   7  -- g6 is important. I want to predict g6:
04:49:15   8  ,ld6 - clse g6
04:49:15   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
04:49:15  10  -- I want more attributes from the ones I derived above:
04:49:15  11  -- clse relation to moving-min
04:49:15  12  ,clse-min4  cm4
04:49:15  13  ,clse-min6  cm6
04:49:15  14  ,clse-min8  cm8
04:49:15  15  ,clse-min10 cm10
04:49:15  16  ,clse-min12 cm12
04:49:15  17  ,clse-min14 cm14
04:49:15  18  ,clse-min16 cm16
04:49:15  19  ,clse-min18 cm18
04:49:15  20  -- clse relation to moving-avg
04:49:15  21  ,clse-avg4  ca4
04:49:15  22  ,clse-avg6  ca6
04:49:15  23  ,clse-avg8  ca8
04:49:15  24  ,clse-avg10 ca10
04:49:15  25  ,clse-avg12 ca12
04:49:15  26  ,clse-avg14 ca14
04:49:15  27  ,clse-avg16 ca16
04:49:15  28  ,clse-avg18 ca18
04:49:15  29  -- clse relation to moving-max
04:49:15  30  ,clse-max4  cx4
04:49:15  31  ,clse-max6  cx6
04:49:15  32  ,clse-max8  cx8
04:49:15  33  ,clse-max10 cx10
04:49:15  34  ,clse-max12 cx12
04:49:15  35  ,clse-max14 cx14
04:49:15  36  ,clse-max16 cx16
04:49:15  37  ,clse-max18 cx18
04:49:15  38  -- Derive more attributes.
04:49:15  39  -- I want to use CORR() here to help SVM see the shape of the series.
04:49:15  40  -- But COVAR_POP is more stable:
04:49:15  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
04:49:15  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
04:49:15  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
04:49:15  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
04:49:15  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
04:49:15  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
04:49:15  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
04:49:15  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
04:49:15  49  -- Derive date related attributes:
04:49:15  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
04:49:15  51  ,0+TO_CHAR(ydate,'D')d
04:49:15  52  ,0+TO_CHAR(ydate,'W')w
04:49:15  53  -- mpm stands for minutes-past-midnight:
04:49:15  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
04:49:15  55  -- mph stands for minutes-past-hour:
04:49:15  56  ,0+TO_CHAR(ydate,'MI')mph
04:49:15  57  FROM svm6102
04:49:15  58  ORDER BY ydate
04:49:15  59  /

Table created.

Elapsed: 00:00:02.21
04:49:17 SQL> 
04:49:17 SQL> -- rpt
04:49:17 SQL> 
04:49:17 SQL> SELECT
04:49:17   2  pair
04:49:17   3  ,COUNT(pair)
04:49:17   4  ,MIN(clse),MAX(clse)
04:49:17   5  ,MIN(ydate),MAX(ydate)
04:49:17   6  FROM svm6122
04:49:17   7  GROUP BY pair
04:49:17   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19809	 80.25	   84.485 2010-10-04 04:50:01 2011-01-07 04:45:00

Elapsed: 00:00:00.04
04:49:17 SQL> 
04:49:17 SQL> -- Prepare for derivation of NTILE based params:
04:49:17 SQL> 
04:49:17 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.25
04:49:17 SQL> CREATE TABLE svm6142 COMPRESS AS
04:49:17   2  SELECT
04:49:17   3  pair
04:49:17   4  ,ydate
04:49:17   5  ,prdate
04:49:17   6  ,clse
04:49:17   7  ,g6
04:49:17   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
04:49:17   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
04:49:17  10  ,CASE WHEN trend IS NULL THEN 1
04:49:17  11  	    WHEN trend =0      THEN 1
04:49:17  12  	    ELSE trend END trend
04:49:17  13  ,cm4
04:49:17  14  ,cm6
04:49:17  15  ,cm8
04:49:17  16  ,cm10
04:49:17  17  ,cm12
04:49:17  18  ,cm14
04:49:17  19  ,cm16
04:49:17  20  ,cm18
04:49:17  21  --
04:49:17  22  ,ca4
04:49:17  23  ,ca6
04:49:17  24  ,ca8
04:49:17  25  ,ca10
04:49:17  26  ,ca12
04:49:17  27  ,ca14
04:49:17  28  ,ca16
04:49:17  29  ,ca18
04:49:17  30  --
04:49:17  31  ,cx4
04:49:17  32  ,cx6
04:49:17  33  ,cx8
04:49:17  34  ,cx10
04:49:17  35  ,cx12
04:49:17  36  ,cx14
04:49:17  37  ,cx16
04:49:17  38  ,cx18
04:49:17  39  --
04:49:17  40  ,crr4
04:49:17  41  ,crr6
04:49:17  42  ,crr8
04:49:17  43  ,crr10
04:49:17  44  ,crr12
04:49:17  45  ,crr14
04:49:17  46  ,crr16
04:49:17  47  ,crr18
04:49:17  48  --
04:49:17  49  ,hh
04:49:17  50  ,d
04:49:17  51  ,w
04:49:17  52  ,mpm
04:49:17  53  ,mph
04:49:17  54  FROM svm6122
04:49:17  55  ORDER BY ydate
04:49:17  56  /

Table created.

Elapsed: 00:00:00.39
04:49:18 SQL> 
04:49:18 SQL> -- rpt
04:49:18 SQL> 
04:49:18 SQL> SELECT
04:49:18   2  pair
04:49:18   3  ,trend
04:49:18   4  ,gatt
04:49:18   5  ,COUNT(pair)
04:49:18   6  ,AVG(g6)
04:49:18   7  FROM svm6142
04:49:18   8  GROUP BY pair,trend,gatt
04:49:18   9  ORDER BY pair,trend,gatt
04:49:18  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5195 -.16558712
usd_jpy 	-1 up	      4910 .169384962
usd_jpy 	-1		14
usd_jpy 	 1 nup	      5021 -.15304193
usd_jpy 	 1 up	      4611 .172713008
usd_jpy 	 1		58

6 rows selected.

Elapsed: 00:00:00.04
04:49:18 SQL> 
04:49:18 SQL> 
04:49:18 SQL> -- Derive NTILE based params:
04:49:18 SQL> 
04:49:18 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.17
04:49:18 SQL> CREATE TABLE svm6162 COMPRESS AS
04:49:18   2  SELECT
04:49:18   3  pair
04:49:18   4  ,ydate
04:49:18   5  ,prdate
04:49:18   6  ,clse
04:49:18   7  ,g6
04:49:18   8  ,gatt
04:49:18   9  ,gattn
04:49:18  10  ,trend
04:49:18  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
04:49:18  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
04:49:18  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
04:49:18  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
04:49:18  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
04:49:18  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
04:49:18  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
04:49:18  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
04:49:18  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
04:49:18  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
04:49:18  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
04:49:18  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
04:49:18  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
04:49:18  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
04:49:18  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
04:49:18  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
04:49:18  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
04:49:18  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
04:49:18  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
04:49:18  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
04:49:18  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
04:49:18  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
04:49:18  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
04:49:18  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
04:49:18  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
04:49:18  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
04:49:18  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
04:49:18  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
04:49:18  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
04:49:18  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
04:49:18  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
04:49:18  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
04:49:18  43  ,hh  att32
04:49:18  44  ,d   att33
04:49:18  45  ,w   att34
04:49:18  46  ,mpm att35
04:49:18  47  ,mph att36
04:49:18  48  ,trend att37
04:49:18  49  FROM svm6142
04:49:18  50  ORDER BY ydate
04:49:18  51  /

Table created.

Elapsed: 00:00:04.83
04:49:23 SQL> 
04:49:23 SQL> -- rpt
04:49:23 SQL> 
04:49:23 SQL> SELECT
04:49:23   2  pair
04:49:23   3  ,trend
04:49:23   4  ,gatt
04:49:23   5  ,COUNT(pair)
04:49:23   6  ,AVG(g6)
04:49:23   7  FROM svm6162
04:49:23   8  GROUP BY pair,trend,gatt
04:49:23   9  ORDER BY pair,trend,gatt
04:49:23  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5195 -.16558712
usd_jpy 	-1 up	      4910 .169384962
usd_jpy 	-1		14
usd_jpy 	 1 nup	      5021 -.15304193
usd_jpy 	 1 up	      4611 .172713008
usd_jpy 	 1		58

6 rows selected.

Elapsed: 00:00:00.03
04:49:23 SQL> 
04:49:23 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.14
04:49:23 SQL> CREATE TABLE modsrc COMPRESS AS
04:49:23   2  SELECT
04:49:23   3  pair
04:49:23   4  ,ydate
04:49:23   5  ,prdate
04:49:23   6  ,trend
04:49:23   7  ,g6
04:49:23   8  ,gatt
04:49:23   9  ,gattn
04:49:23  10  FROM svm6162
04:49:23  11  /

Table created.

Elapsed: 00:00:00.09
04:49:23 SQL> 
04:49:23 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
04:49:23 SQL> 
04:49:23 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
04:49:23 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
04:49:23   2  SELECT
04:49:23   3  ydate
04:49:23   4  ,trend jpy_trend
04:49:23   5  ,g6    jpy_g6
04:49:23   6  ,gatt  jpy_gatt
04:49:23   7  ,gattn jpy_gattn
04:49:23   8  FROM modsrc
04:49:23   9  /

Table created.

Elapsed: 00:00:00.08
04:49:23 SQL> 
04:49:23 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
04:49:23 SQL> 
04:49:23 SQL> -- I need a copy of the attributes:
04:49:23 SQL> 
04:49:23 SQL> 
04:49:23 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.17
04:49:24 SQL> CREATE TABLE jpy_att COMPRESS AS
04:49:24   2  SELECT
04:49:24   3  ydate
04:49:24   4  ,att00 jpy_att00
04:49:24   5  ,att01 jpy_att01
04:49:24   6  ,att02 jpy_att02
04:49:24   7  ,att03 jpy_att03
04:49:24   8  ,att04 jpy_att04
04:49:24   9  ,att05 jpy_att05
04:49:24  10  ,att06 jpy_att06
04:49:24  11  ,att07 jpy_att07
04:49:24  12  ,att08 jpy_att08
04:49:24  13  ,att09 jpy_att09
04:49:24  14  ,att10 jpy_att10
04:49:24  15  ,att11 jpy_att11
04:49:24  16  ,att12 jpy_att12
04:49:24  17  ,att13 jpy_att13
04:49:24  18  ,att14 jpy_att14
04:49:24  19  ,att15 jpy_att15
04:49:24  20  ,att16 jpy_att16
04:49:24  21  ,att17 jpy_att17
04:49:24  22  ,att18 jpy_att18
04:49:24  23  ,att19 jpy_att19
04:49:24  24  ,att20 jpy_att20
04:49:24  25  ,att21 jpy_att21
04:49:24  26  ,att22 jpy_att22
04:49:24  27  ,att23 jpy_att23
04:49:24  28  ,att24 jpy_att24
04:49:24  29  ,att25 jpy_att25
04:49:24  30  ,att26 jpy_att26
04:49:24  31  ,att27 jpy_att27
04:49:24  32  ,att28 jpy_att28
04:49:24  33  ,att29 jpy_att29
04:49:24  34  ,att30 jpy_att30
04:49:24  35  ,att31 jpy_att31
04:49:24  36  ,att32 jpy_att32
04:49:24  37  ,att33 jpy_att33
04:49:24  38  ,att34 jpy_att34
04:49:24  39  ,att35 jpy_att35
04:49:24  40  ,att36 jpy_att36
04:49:24  41  ,att37 jpy_att37
04:49:24  42  FROM svm6162
04:49:24  43  /

Table created.

Elapsed: 00:00:00.19
04:49:24 SQL> 
04:49:24 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.52
04:49:24 SQL> 
04:49:24 SQL> -- rpt
04:49:24 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.95
04:49:25 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.00
04:49:25 SQL> 
04:49:25 SQL> --
04:49:25 SQL> -- cad610.sql
04:49:25 SQL> --
04:49:25 SQL> 
04:49:25 SQL> -- Creates views and tables for backtesting a forex SVM strategy
04:49:25 SQL> 
04:49:25 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.41
04:49:26 SQL> 
04:49:26 SQL> -- I created di5min here:
04:49:26 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
04:49:26 SQL> 
04:49:26 SQL> CREATE OR REPLACE VIEW svm6102 AS
04:49:26   2  SELECT
04:49:26   3  pair
04:49:26   4  ,ydate
04:49:26   5  ,prdate
04:49:26   6  ,rownum rnum -- acts as t in my time-series
04:49:26   7  ,clse
04:49:26   8  -- Derive a bunch of attributes from clse, the latest price:
04:49:26   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
04:49:26  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
04:49:26  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
04:49:26  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
04:49:26  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
04:49:26  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
04:49:26  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
04:49:26  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
04:49:26  17  --
04:49:26  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
04:49:26  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
04:49:26  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
04:49:26  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
04:49:26  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
04:49:26  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
04:49:26  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
04:49:26  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
04:49:26  26  --
04:49:26  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
04:49:26  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
04:49:26  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
04:49:26  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
04:49:26  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
04:49:26  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
04:49:26  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
04:49:26  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
04:49:26  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
04:49:26  36  FROM di5min WHERE pair LIKE'%cad%'
04:49:26  37  AND ydate > sysdate - 95
04:49:26  38  ORDER BY ydate
04:49:26  39  /

View created.

Elapsed: 00:00:00.05
04:49:26 SQL> 
04:49:26 SQL> -- rpt
04:49:26 SQL> 
04:49:26 SQL> SELECT
04:49:26   2  pair
04:49:26   3  ,COUNT(pair)
04:49:26   4  ,MIN(clse),MAX(clse)
04:49:26   5  ,MIN(avg6),MAX(avg6)
04:49:26   6  ,MIN(ydate),MAX(ydate)
04:49:26   7  FROM svm6102
04:49:26   8  GROUP BY pair
04:49:26   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19809    .988925	   1.0355  .99060274 1.03282877 2010-10-04 04:50:01 2011-01-07 04:45:00

Elapsed: 00:00:00.85
04:49:27 SQL> 
04:49:27 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
04:49:27 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.22
04:49:27 SQL> CREATE TABLE svm6122 COMPRESS AS
04:49:27   2  SELECT
04:49:27   3  pair
04:49:27   4  ,ydate
04:49:27   5  ,prdate
04:49:27   6  ,clse
04:49:27   7  -- g6 is important. I want to predict g6:
04:49:27   8  ,ld6 - clse g6
04:49:27   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
04:49:27  10  -- I want more attributes from the ones I derived above:
04:49:27  11  -- clse relation to moving-min
04:49:27  12  ,clse-min4  cm4
04:49:27  13  ,clse-min6  cm6
04:49:27  14  ,clse-min8  cm8
04:49:27  15  ,clse-min10 cm10
04:49:27  16  ,clse-min12 cm12
04:49:27  17  ,clse-min14 cm14
04:49:27  18  ,clse-min16 cm16
04:49:27  19  ,clse-min18 cm18
04:49:27  20  -- clse relation to moving-avg
04:49:27  21  ,clse-avg4  ca4
04:49:27  22  ,clse-avg6  ca6
04:49:27  23  ,clse-avg8  ca8
04:49:27  24  ,clse-avg10 ca10
04:49:27  25  ,clse-avg12 ca12
04:49:27  26  ,clse-avg14 ca14
04:49:27  27  ,clse-avg16 ca16
04:49:27  28  ,clse-avg18 ca18
04:49:27  29  -- clse relation to moving-max
04:49:27  30  ,clse-max4  cx4
04:49:27  31  ,clse-max6  cx6
04:49:27  32  ,clse-max8  cx8
04:49:27  33  ,clse-max10 cx10
04:49:27  34  ,clse-max12 cx12
04:49:27  35  ,clse-max14 cx14
04:49:27  36  ,clse-max16 cx16
04:49:27  37  ,clse-max18 cx18
04:49:27  38  -- Derive more attributes.
04:49:27  39  -- I want to use CORR() here to help SVM see the shape of the series.
04:49:27  40  -- But COVAR_POP is more stable:
04:49:27  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
04:49:27  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
04:49:27  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
04:49:27  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
04:49:27  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
04:49:27  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
04:49:27  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
04:49:27  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
04:49:27  49  -- Derive date related attributes:
04:49:27  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
04:49:27  51  ,0+TO_CHAR(ydate,'D')d
04:49:27  52  ,0+TO_CHAR(ydate,'W')w
04:49:27  53  -- mpm stands for minutes-past-midnight:
04:49:27  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
04:49:27  55  -- mph stands for minutes-past-hour:
04:49:27  56  ,0+TO_CHAR(ydate,'MI')mph
04:49:27  57  FROM svm6102
04:49:27  58  ORDER BY ydate
04:49:27  59  /

Table created.

Elapsed: 00:00:02.15
04:49:29 SQL> 
04:49:29 SQL> -- rpt
04:49:29 SQL> 
04:49:29 SQL> SELECT
04:49:29   2  pair
04:49:29   3  ,COUNT(pair)
04:49:29   4  ,MIN(clse),MAX(clse)
04:49:29   5  ,MIN(ydate),MAX(ydate)
04:49:29   6  FROM svm6122
04:49:29   7  GROUP BY pair
04:49:29   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19809    .988925	   1.0355 2010-10-04 04:50:01 2011-01-07 04:45:00

Elapsed: 00:00:00.04
04:49:29 SQL> 
04:49:29 SQL> -- Prepare for derivation of NTILE based params:
04:49:29 SQL> 
04:49:29 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
04:49:29 SQL> CREATE TABLE svm6142 COMPRESS AS
04:49:29   2  SELECT
04:49:29   3  pair
04:49:29   4  ,ydate
04:49:29   5  ,prdate
04:49:29   6  ,clse
04:49:29   7  ,g6
04:49:29   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
04:49:29   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
04:49:29  10  ,CASE WHEN trend IS NULL THEN 1
04:49:29  11  	    WHEN trend =0      THEN 1
04:49:29  12  	    ELSE trend END trend
04:49:29  13  ,cm4
04:49:29  14  ,cm6
04:49:29  15  ,cm8
04:49:29  16  ,cm10
04:49:29  17  ,cm12
04:49:29  18  ,cm14
04:49:29  19  ,cm16
04:49:29  20  ,cm18
04:49:29  21  --
04:49:29  22  ,ca4
04:49:29  23  ,ca6
04:49:29  24  ,ca8
04:49:29  25  ,ca10
04:49:29  26  ,ca12
04:49:29  27  ,ca14
04:49:29  28  ,ca16
04:49:29  29  ,ca18
04:49:29  30  --
04:49:29  31  ,cx4
04:49:29  32  ,cx6
04:49:29  33  ,cx8
04:49:29  34  ,cx10
04:49:29  35  ,cx12
04:49:29  36  ,cx14
04:49:29  37  ,cx16
04:49:29  38  ,cx18
04:49:29  39  --
04:49:29  40  ,crr4
04:49:29  41  ,crr6
04:49:29  42  ,crr8
04:49:29  43  ,crr10
04:49:29  44  ,crr12
04:49:29  45  ,crr14
04:49:29  46  ,crr16
04:49:29  47  ,crr18
04:49:29  48  --
04:49:29  49  ,hh
04:49:29  50  ,d
04:49:29  51  ,w
04:49:29  52  ,mpm
04:49:29  53  ,mph
04:49:29  54  FROM svm6122
04:49:29  55  ORDER BY ydate
04:49:29  56  /

Table created.

Elapsed: 00:00:00.39
04:49:30 SQL> 
04:49:30 SQL> -- rpt
04:49:30 SQL> 
04:49:30 SQL> SELECT
04:49:30   2  pair
04:49:30   3  ,trend
04:49:30   4  ,gatt
04:49:30   5  ,COUNT(pair)
04:49:30   6  ,AVG(g6)
04:49:30   7  FROM svm6142
04:49:30   8  GROUP BY pair,trend,gatt
04:49:30   9  ORDER BY pair,trend,gatt
04:49:30  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7324 -.00124019
usd_cad 	-1 up	      3144 .003050943
usd_cad 	-1		 7
usd_cad 	 1 nup	      6846 -.00160372
usd_cad 	 1 up	      2423  .00362036
usd_cad 	 1		65

6 rows selected.

Elapsed: 00:00:00.05
04:49:30 SQL> 
04:49:30 SQL> 
04:49:30 SQL> -- Derive NTILE based params:
04:49:30 SQL> 
04:49:30 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.17
04:49:30 SQL> CREATE TABLE svm6162 COMPRESS AS
04:49:30   2  SELECT
04:49:30   3  pair
04:49:30   4  ,ydate
04:49:30   5  ,prdate
04:49:30   6  ,clse
04:49:30   7  ,g6
04:49:30   8  ,gatt
04:49:30   9  ,gattn
04:49:30  10  ,trend
04:49:30  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
04:49:30  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
04:49:30  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
04:49:30  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
04:49:30  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
04:49:30  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
04:49:30  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
04:49:30  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
04:49:30  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
04:49:30  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
04:49:30  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
04:49:30  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
04:49:30  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
04:49:30  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
04:49:30  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
04:49:30  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
04:49:30  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
04:49:30  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
04:49:30  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
04:49:30  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
04:49:30  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
04:49:30  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
04:49:30  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
04:49:30  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
04:49:30  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
04:49:30  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
04:49:30  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
04:49:30  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
04:49:30  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
04:49:30  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
04:49:30  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
04:49:30  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
04:49:30  43  ,hh  att32
04:49:30  44  ,d   att33
04:49:30  45  ,w   att34
04:49:30  46  ,mpm att35
04:49:30  47  ,mph att36
04:49:30  48  ,trend att37
04:49:30  49  FROM svm6142
04:49:30  50  ORDER BY ydate
04:49:30  51  /

Table created.

Elapsed: 00:00:04.91
04:49:35 SQL> 
04:49:35 SQL> -- rpt
04:49:35 SQL> 
04:49:35 SQL> SELECT
04:49:35   2  pair
04:49:35   3  ,trend
04:49:35   4  ,gatt
04:49:35   5  ,COUNT(pair)
04:49:35   6  ,AVG(g6)
04:49:35   7  FROM svm6162
04:49:35   8  GROUP BY pair,trend,gatt
04:49:35   9  ORDER BY pair,trend,gatt
04:49:35  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7324 -.00124019
usd_cad 	-1 up	      3144 .003050943
usd_cad 	-1		 7
usd_cad 	 1 nup	      6846 -.00160372
usd_cad 	 1 up	      2423  .00362036
usd_cad 	 1		65

6 rows selected.

Elapsed: 00:00:00.03
04:49:35 SQL> 
04:49:35 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
04:49:35 SQL> CREATE TABLE modsrc COMPRESS AS
04:49:35   2  SELECT
04:49:35   3  pair
04:49:35   4  ,ydate
04:49:35   5  ,prdate
04:49:35   6  ,trend
04:49:35   7  ,g6
04:49:35   8  ,gatt
04:49:35   9  ,gattn
04:49:35  10  FROM svm6162
04:49:35  11  /

Table created.

Elapsed: 00:00:00.07
04:49:35 SQL> 
04:49:35 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:01.02
04:49:36 SQL> 
04:49:36 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.27
04:49:36 SQL> CREATE TABLE cad_ms610 COMPRESS AS
04:49:36   2  SELECT
04:49:36   3  ydate
04:49:36   4  ,trend cad_trend
04:49:36   5  ,g6    cad_g6
04:49:36   6  ,gatt  cad_gatt
04:49:36   7  ,gattn cad_gattn
04:49:36   8  FROM modsrc
04:49:36   9  /

Table created.

Elapsed: 00:00:00.09
04:49:36 SQL> 
04:49:36 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
04:49:37 SQL> 
04:49:37 SQL> -- I need a copy of the attributes:
04:49:37 SQL> 
04:49:37 SQL> 
04:49:37 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.04
04:49:37 SQL> CREATE TABLE cad_att COMPRESS AS
04:49:37   2  SELECT
04:49:37   3  ydate
04:49:37   4  ,att00 cad_att00
04:49:37   5  ,att01 cad_att01
04:49:37   6  ,att02 cad_att02
04:49:37   7  ,att03 cad_att03
04:49:37   8  ,att04 cad_att04
04:49:37   9  ,att05 cad_att05
04:49:37  10  ,att06 cad_att06
04:49:37  11  ,att07 cad_att07
04:49:37  12  ,att08 cad_att08
04:49:37  13  ,att09 cad_att09
04:49:37  14  ,att10 cad_att10
04:49:37  15  ,att11 cad_att11
04:49:37  16  ,att12 cad_att12
04:49:37  17  ,att13 cad_att13
04:49:37  18  ,att14 cad_att14
04:49:37  19  ,att15 cad_att15
04:49:37  20  ,att16 cad_att16
04:49:37  21  ,att17 cad_att17
04:49:37  22  ,att18 cad_att18
04:49:37  23  ,att19 cad_att19
04:49:37  24  ,att20 cad_att20
04:49:37  25  ,att21 cad_att21
04:49:37  26  ,att22 cad_att22
04:49:37  27  ,att23 cad_att23
04:49:37  28  ,att24 cad_att24
04:49:37  29  ,att25 cad_att25
04:49:37  30  ,att26 cad_att26
04:49:37  31  ,att27 cad_att27
04:49:37  32  ,att28 cad_att28
04:49:37  33  ,att29 cad_att29
04:49:37  34  ,att30 cad_att30
04:49:37  35  ,att31 cad_att31
04:49:37  36  ,att32 cad_att32
04:49:37  37  ,att33 cad_att33
04:49:37  38  ,att34 cad_att34
04:49:37  39  ,att35 cad_att35
04:49:37  40  ,att36 cad_att36
04:49:37  41  ,att37 cad_att37
04:49:37  42  FROM svm6162
04:49:37  43  /

Table created.

Elapsed: 00:00:00.17
04:49:37 SQL> 
04:49:37 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.41
04:49:37 SQL> 
04:49:37 SQL> -- rpt
04:49:37 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.81
04:49:38 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.00
04:49:38 SQL> 
04:49:38 SQL> --
04:49:38 SQL> -- chf610.sql
04:49:38 SQL> --
04:49:38 SQL> 
04:49:38 SQL> -- Creates views and tables for backtesting a forex SVM strategy
04:49:38 SQL> 
04:49:38 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.68
04:49:39 SQL> 
04:49:39 SQL> -- I created di5min here:
04:49:39 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
04:49:39 SQL> 
04:49:39 SQL> CREATE OR REPLACE VIEW svm6102 AS
04:49:39   2  SELECT
04:49:39   3  pair
04:49:39   4  ,ydate
04:49:39   5  ,prdate
04:49:39   6  ,rownum rnum -- acts as t in my time-series
04:49:39   7  ,clse
04:49:39   8  -- Derive a bunch of attributes from clse, the latest price:
04:49:39   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
04:49:39  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
04:49:39  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
04:49:39  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
04:49:39  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
04:49:39  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
04:49:39  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
04:49:39  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
04:49:39  17  --
04:49:39  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
04:49:39  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
04:49:39  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
04:49:39  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
04:49:39  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
04:49:39  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
04:49:39  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
04:49:39  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
04:49:39  26  --
04:49:39  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
04:49:39  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
04:49:39  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
04:49:39  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
04:49:39  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
04:49:39  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
04:49:39  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
04:49:39  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
04:49:39  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
04:49:39  36  FROM di5min WHERE pair LIKE'%chf%'
04:49:39  37  AND ydate > sysdate - 95
04:49:39  38  ORDER BY ydate
04:49:39  39  /

View created.

Elapsed: 00:00:00.06
04:49:39 SQL> 
04:49:39 SQL> -- rpt
04:49:39 SQL> 
04:49:39 SQL> SELECT
04:49:39   2  pair
04:49:39   3  ,COUNT(pair)
04:49:39   4  ,MIN(clse),MAX(clse)
04:49:39   5  ,MIN(avg6),MAX(avg6)
04:49:39   6  ,MIN(ydate),MAX(ydate)
04:49:39   7  FROM svm6102
04:49:39   8  GROUP BY pair
04:49:39   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19812    .931675	  1.00635 .933257705 1.00498151 2010-10-04 04:50:01 2011-01-07 04:45:00

Elapsed: 00:00:00.92
04:49:40 SQL> 
04:49:40 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
04:49:40 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.47
04:49:40 SQL> CREATE TABLE svm6122 COMPRESS AS
04:49:40   2  SELECT
04:49:40   3  pair
04:49:40   4  ,ydate
04:49:40   5  ,prdate
04:49:40   6  ,clse
04:49:40   7  -- g6 is important. I want to predict g6:
04:49:40   8  ,ld6 - clse g6
04:49:40   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
04:49:40  10  -- I want more attributes from the ones I derived above:
04:49:40  11  -- clse relation to moving-min
04:49:40  12  ,clse-min4  cm4
04:49:40  13  ,clse-min6  cm6
04:49:40  14  ,clse-min8  cm8
04:49:40  15  ,clse-min10 cm10
04:49:40  16  ,clse-min12 cm12
04:49:40  17  ,clse-min14 cm14
04:49:40  18  ,clse-min16 cm16
04:49:40  19  ,clse-min18 cm18
04:49:40  20  -- clse relation to moving-avg
04:49:40  21  ,clse-avg4  ca4
04:49:40  22  ,clse-avg6  ca6
04:49:40  23  ,clse-avg8  ca8
04:49:40  24  ,clse-avg10 ca10
04:49:40  25  ,clse-avg12 ca12
04:49:40  26  ,clse-avg14 ca14
04:49:40  27  ,clse-avg16 ca16
04:49:40  28  ,clse-avg18 ca18
04:49:40  29  -- clse relation to moving-max
04:49:40  30  ,clse-max4  cx4
04:49:40  31  ,clse-max6  cx6
04:49:40  32  ,clse-max8  cx8
04:49:40  33  ,clse-max10 cx10
04:49:40  34  ,clse-max12 cx12
04:49:40  35  ,clse-max14 cx14
04:49:40  36  ,clse-max16 cx16
04:49:40  37  ,clse-max18 cx18
04:49:40  38  -- Derive more attributes.
04:49:40  39  -- I want to use CORR() here to help SVM see the shape of the series.
04:49:40  40  -- But COVAR_POP is more stable:
04:49:40  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
04:49:40  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
04:49:40  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
04:49:40  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
04:49:40  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
04:49:40  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
04:49:40  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
04:49:40  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
04:49:40  49  -- Derive date related attributes:
04:49:40  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
04:49:40  51  ,0+TO_CHAR(ydate,'D')d
04:49:40  52  ,0+TO_CHAR(ydate,'W')w
04:49:40  53  -- mpm stands for minutes-past-midnight:
04:49:40  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
04:49:40  55  -- mph stands for minutes-past-hour:
04:49:40  56  ,0+TO_CHAR(ydate,'MI')mph
04:49:40  57  FROM svm6102
04:49:40  58  ORDER BY ydate
04:49:40  59  /

Table created.

Elapsed: 00:00:02.07
04:49:42 SQL> 
04:49:42 SQL> -- rpt
04:49:42 SQL> 
04:49:42 SQL> SELECT
04:49:42   2  pair
04:49:42   3  ,COUNT(pair)
04:49:42   4  ,MIN(clse),MAX(clse)
04:49:42   5  ,MIN(ydate),MAX(ydate)
04:49:42   6  FROM svm6122
04:49:42   7  GROUP BY pair
04:49:42   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19812    .931675	  1.00635 2010-10-04 04:50:01 2011-01-07 04:45:00

Elapsed: 00:00:00.03
04:49:42 SQL> 
04:49:42 SQL> -- Prepare for derivation of NTILE based params:
04:49:42 SQL> 
04:49:42 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.22
04:49:42 SQL> CREATE TABLE svm6142 COMPRESS AS
04:49:42   2  SELECT
04:49:42   3  pair
04:49:42   4  ,ydate
04:49:42   5  ,prdate
04:49:42   6  ,clse
04:49:42   7  ,g6
04:49:42   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
04:49:42   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
04:49:42  10  ,CASE WHEN trend IS NULL THEN 1
04:49:42  11  	    WHEN trend =0      THEN 1
04:49:42  12  	    ELSE trend END trend
04:49:42  13  ,cm4
04:49:42  14  ,cm6
04:49:42  15  ,cm8
04:49:42  16  ,cm10
04:49:42  17  ,cm12
04:49:42  18  ,cm14
04:49:42  19  ,cm16
04:49:42  20  ,cm18
04:49:42  21  --
04:49:42  22  ,ca4
04:49:42  23  ,ca6
04:49:42  24  ,ca8
04:49:42  25  ,ca10
04:49:42  26  ,ca12
04:49:42  27  ,ca14
04:49:42  28  ,ca16
04:49:42  29  ,ca18
04:49:42  30  --
04:49:42  31  ,cx4
04:49:42  32  ,cx6
04:49:42  33  ,cx8
04:49:42  34  ,cx10
04:49:42  35  ,cx12
04:49:42  36  ,cx14
04:49:42  37  ,cx16
04:49:42  38  ,cx18
04:49:42  39  --
04:49:42  40  ,crr4
04:49:42  41  ,crr6
04:49:42  42  ,crr8
04:49:42  43  ,crr10
04:49:42  44  ,crr12
04:49:42  45  ,crr14
04:49:42  46  ,crr16
04:49:42  47  ,crr18
04:49:42  48  --
04:49:42  49  ,hh
04:49:42  50  ,d
04:49:42  51  ,w
04:49:42  52  ,mpm
04:49:42  53  ,mph
04:49:42  54  FROM svm6122
04:49:42  55  ORDER BY ydate
04:49:42  56  /

Table created.

Elapsed: 00:00:00.36
04:49:43 SQL> 
04:49:43 SQL> -- rpt
04:49:43 SQL> 
04:49:43 SQL> SELECT
04:49:43   2  pair
04:49:43   3  ,trend
04:49:43   4  ,gatt
04:49:43   5  ,COUNT(pair)
04:49:43   6  ,AVG(g6)
04:49:43   7  FROM svm6142
04:49:43   8  GROUP BY pair,trend,gatt
04:49:43   9  ORDER BY pair,trend,gatt
04:49:43  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7175 -.00197276
usd_chf 	-1 up	      3083  .00381181
usd_chf 	-1		23
usd_chf 	 1 nup	      6537 -.00153095
usd_chf 	 1 up	      2945 .003959628
usd_chf 	 1		49

6 rows selected.

Elapsed: 00:00:00.04
04:49:43 SQL> 
04:49:43 SQL> 
04:49:43 SQL> -- Derive NTILE based params:
04:49:43 SQL> 
04:49:43 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
04:49:43 SQL> CREATE TABLE svm6162 COMPRESS AS
04:49:43   2  SELECT
04:49:43   3  pair
04:49:43   4  ,ydate
04:49:43   5  ,prdate
04:49:43   6  ,clse
04:49:43   7  ,g6
04:49:43   8  ,gatt
04:49:43   9  ,gattn
04:49:43  10  ,trend
04:49:43  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
04:49:43  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
04:49:43  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
04:49:43  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
04:49:43  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
04:49:43  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
04:49:43  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
04:49:43  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
04:49:43  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
04:49:43  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
04:49:43  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
04:49:43  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
04:49:43  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
04:49:43  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
04:49:43  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
04:49:43  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
04:49:43  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
04:49:43  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
04:49:43  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
04:49:43  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
04:49:43  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
04:49:43  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
04:49:43  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
04:49:43  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
04:49:43  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
04:49:43  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
04:49:43  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
04:49:43  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
04:49:43  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
04:49:43  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
04:49:43  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
04:49:43  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
04:49:43  43  ,hh  att32
04:49:43  44  ,d   att33
04:49:43  45  ,w   att34
04:49:43  46  ,mpm att35
04:49:43  47  ,mph att36
04:49:43  48  ,trend att37
04:49:43  49  FROM svm6142
04:49:43  50  ORDER BY ydate
04:49:43  51  /

Table created.

Elapsed: 00:00:04.94
04:49:48 SQL> 
04:49:48 SQL> -- rpt
04:49:48 SQL> 
04:49:48 SQL> SELECT
04:49:48   2  pair
04:49:48   3  ,trend
04:49:48   4  ,gatt
04:49:48   5  ,COUNT(pair)
04:49:48   6  ,AVG(g6)
04:49:48   7  FROM svm6162
04:49:48   8  GROUP BY pair,trend,gatt
04:49:48   9  ORDER BY pair,trend,gatt
04:49:48  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7175 -.00197276
usd_chf 	-1 up	      3083  .00381181
usd_chf 	-1		23
usd_chf 	 1 nup	      6537 -.00153095
usd_chf 	 1 up	      2945 .003959628
usd_chf 	 1		49

6 rows selected.

Elapsed: 00:00:00.03
04:49:48 SQL> 
04:49:48 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
04:49:48 SQL> CREATE TABLE modsrc COMPRESS AS
04:49:48   2  SELECT
04:49:48   3  pair
04:49:48   4  ,ydate
04:49:48   5  ,prdate
04:49:48   6  ,trend
04:49:48   7  ,g6
04:49:48   8  ,gatt
04:49:48   9  ,gattn
04:49:48  10  FROM svm6162
04:49:48  11  /

Table created.

Elapsed: 00:00:00.09
04:49:48 SQL> 
04:49:48 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
04:49:48 SQL> 
04:49:48 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
04:49:48 SQL> CREATE TABLE chf_ms610 COMPRESS AS
04:49:48   2  SELECT
04:49:48   3  ydate
04:49:48   4  ,trend chf_trend
04:49:48   5  ,g6    chf_g6
04:49:48   6  ,gatt  chf_gatt
04:49:48   7  ,gattn chf_gattn
04:49:48   8  FROM modsrc
04:49:48   9  /

Table created.

Elapsed: 00:00:00.06
04:49:48 SQL> 
04:49:48 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
04:49:49 SQL> 
04:49:49 SQL> -- I need a copy of the attributes:
04:49:49 SQL> 
04:49:49 SQL> 
04:49:49 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.12
04:49:49 SQL> CREATE TABLE chf_att COMPRESS AS
04:49:49   2  SELECT
04:49:49   3  ydate
04:49:49   4  ,att00 chf_att00
04:49:49   5  ,att01 chf_att01
04:49:49   6  ,att02 chf_att02
04:49:49   7  ,att03 chf_att03
04:49:49   8  ,att04 chf_att04
04:49:49   9  ,att05 chf_att05
04:49:49  10  ,att06 chf_att06
04:49:49  11  ,att07 chf_att07
04:49:49  12  ,att08 chf_att08
04:49:49  13  ,att09 chf_att09
04:49:49  14  ,att10 chf_att10
04:49:49  15  ,att11 chf_att11
04:49:49  16  ,att12 chf_att12
04:49:49  17  ,att13 chf_att13
04:49:49  18  ,att14 chf_att14
04:49:49  19  ,att15 chf_att15
04:49:49  20  ,att16 chf_att16
04:49:49  21  ,att17 chf_att17
04:49:49  22  ,att18 chf_att18
04:49:49  23  ,att19 chf_att19
04:49:49  24  ,att20 chf_att20
04:49:49  25  ,att21 chf_att21
04:49:49  26  ,att22 chf_att22
04:49:49  27  ,att23 chf_att23
04:49:49  28  ,att24 chf_att24
04:49:49  29  ,att25 chf_att25
04:49:49  30  ,att26 chf_att26
04:49:49  31  ,att27 chf_att27
04:49:49  32  ,att28 chf_att28
04:49:49  33  ,att29 chf_att29
04:49:49  34  ,att30 chf_att30
04:49:49  35  ,att31 chf_att31
04:49:49  36  ,att32 chf_att32
04:49:49  37  ,att33 chf_att33
04:49:49  38  ,att34 chf_att34
04:49:49  39  ,att35 chf_att35
04:49:49  40  ,att36 chf_att36
04:49:49  41  ,att37 chf_att37
04:49:49  42  FROM svm6162
04:49:49  43  /

Table created.

Elapsed: 00:00:00.21
04:49:49 SQL> 
04:49:49 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
04:49:49 SQL> 
04:49:49 SQL> -- rpt
04:49:49 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19812

Elapsed: 00:00:00.87
04:49:50 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19812

Elapsed: 00:00:00.00
04:49:50 SQL> 
04:49:50 SQL> --
04:49:50 SQL> -- ech610.sql
04:49:50 SQL> --
04:49:50 SQL> 
04:49:50 SQL> -- Creates views and tables for backtesting a forex SVM strategy
04:49:50 SQL> 
04:49:50 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.73
04:49:51 SQL> 
04:49:51 SQL> -- I created di5min here:
04:49:51 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
04:49:51 SQL> 
04:49:51 SQL> CREATE OR REPLACE VIEW svm6102 AS
04:49:51   2  SELECT
04:49:51   3  pair
04:49:51   4  ,ydate
04:49:51   5  ,prdate
04:49:51   6  ,rownum rnum -- acts as t in my time-series
04:49:51   7  ,clse
04:49:51   8  -- Derive a bunch of attributes from clse, the latest price:
04:49:51   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
04:49:51  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
04:49:51  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
04:49:51  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
04:49:51  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
04:49:51  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
04:49:51  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
04:49:51  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
04:49:51  17  --
04:49:51  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
04:49:51  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
04:49:51  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
04:49:51  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
04:49:51  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
04:49:51  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
04:49:51  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
04:49:51  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
04:49:51  26  --
04:49:51  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
04:49:51  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
04:49:51  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
04:49:51  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
04:49:51  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
04:49:51  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
04:49:51  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
04:49:51  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
04:49:51  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
04:49:51  36  FROM di5min WHERE pair LIKE'%ech%'
04:49:51  37  AND ydate > sysdate - 95
04:49:51  38  ORDER BY ydate
04:49:51  39  /

View created.

Elapsed: 00:00:00.04
04:49:51 SQL> 
04:49:51 SQL> -- rpt
04:49:51 SQL> 
04:49:51 SQL> SELECT
04:49:51   2  pair
04:49:51   3  ,COUNT(pair)
04:49:51   4  ,MIN(clse),MAX(clse)
04:49:51   5  ,MIN(avg6),MAX(avg6)
04:49:51   6  ,MIN(ydate),MAX(ydate)
04:49:51   7  FROM svm6102
04:49:51   8  GROUP BY pair
04:49:51   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19810 1.24182424 1.38284305 1.24320711 1.37986485 2010-10-04 04:50:01 2011-01-07 04:45:00

Elapsed: 00:00:00.81
04:49:52 SQL> 
04:49:52 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
04:49:52 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.31
04:49:52 SQL> CREATE TABLE svm6122 COMPRESS AS
04:49:52   2  SELECT
04:49:52   3  pair
04:49:52   4  ,ydate
04:49:52   5  ,prdate
04:49:52   6  ,clse
04:49:52   7  -- g6 is important. I want to predict g6:
04:49:52   8  ,ld6 - clse g6
04:49:52   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
04:49:52  10  -- I want more attributes from the ones I derived above:
04:49:52  11  -- clse relation to moving-min
04:49:52  12  ,clse-min4  cm4
04:49:52  13  ,clse-min6  cm6
04:49:52  14  ,clse-min8  cm8
04:49:52  15  ,clse-min10 cm10
04:49:52  16  ,clse-min12 cm12
04:49:52  17  ,clse-min14 cm14
04:49:52  18  ,clse-min16 cm16
04:49:52  19  ,clse-min18 cm18
04:49:52  20  -- clse relation to moving-avg
04:49:52  21  ,clse-avg4  ca4
04:49:52  22  ,clse-avg6  ca6
04:49:52  23  ,clse-avg8  ca8
04:49:52  24  ,clse-avg10 ca10
04:49:52  25  ,clse-avg12 ca12
04:49:52  26  ,clse-avg14 ca14
04:49:52  27  ,clse-avg16 ca16
04:49:52  28  ,clse-avg18 ca18
04:49:52  29  -- clse relation to moving-max
04:49:52  30  ,clse-max4  cx4
04:49:52  31  ,clse-max6  cx6
04:49:52  32  ,clse-max8  cx8
04:49:52  33  ,clse-max10 cx10
04:49:52  34  ,clse-max12 cx12
04:49:52  35  ,clse-max14 cx14
04:49:52  36  ,clse-max16 cx16
04:49:52  37  ,clse-max18 cx18
04:49:52  38  -- Derive more attributes.
04:49:52  39  -- I want to use CORR() here to help SVM see the shape of the series.
04:49:52  40  -- But COVAR_POP is more stable:
04:49:52  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
04:49:52  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
04:49:52  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
04:49:52  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
04:49:52  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
04:49:52  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
04:49:52  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
04:49:52  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
04:49:52  49  -- Derive date related attributes:
04:49:52  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
04:49:52  51  ,0+TO_CHAR(ydate,'D')d
04:49:52  52  ,0+TO_CHAR(ydate,'W')w
04:49:52  53  -- mpm stands for minutes-past-midnight:
04:49:52  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
04:49:52  55  -- mph stands for minutes-past-hour:
04:49:52  56  ,0+TO_CHAR(ydate,'MI')mph
04:49:52  57  FROM svm6102
04:49:52  58  ORDER BY ydate
04:49:52  59  /

Table created.

Elapsed: 00:00:02.17
04:49:54 SQL> 
04:49:54 SQL> -- rpt
04:49:54 SQL> 
04:49:54 SQL> SELECT
04:49:54   2  pair
04:49:54   3  ,COUNT(pair)
04:49:54   4  ,MIN(clse),MAX(clse)
04:49:54   5  ,MIN(ydate),MAX(ydate)
04:49:54   6  FROM svm6122
04:49:54   7  GROUP BY pair
04:49:54   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19810 1.24182424 1.38284305 2010-10-04 04:50:01 2011-01-07 04:45:00

Elapsed: 00:00:00.03
04:49:54 SQL> 
04:49:54 SQL> -- Prepare for derivation of NTILE based params:
04:49:54 SQL> 
04:49:54 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.21
04:49:55 SQL> CREATE TABLE svm6142 COMPRESS AS
04:49:55   2  SELECT
04:49:55   3  pair
04:49:55   4  ,ydate
04:49:55   5  ,prdate
04:49:55   6  ,clse
04:49:55   7  ,g6
04:49:55   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
04:49:55   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
04:49:55  10  ,CASE WHEN trend IS NULL THEN 1
04:49:55  11  	    WHEN trend =0      THEN 1
04:49:55  12  	    ELSE trend END trend
04:49:55  13  ,cm4
04:49:55  14  ,cm6
04:49:55  15  ,cm8
04:49:55  16  ,cm10
04:49:55  17  ,cm12
04:49:55  18  ,cm14
04:49:55  19  ,cm16
04:49:55  20  ,cm18
04:49:55  21  --
04:49:55  22  ,ca4
04:49:55  23  ,ca6
04:49:55  24  ,ca8
04:49:55  25  ,ca10
04:49:55  26  ,ca12
04:49:55  27  ,ca14
04:49:55  28  ,ca16
04:49:55  29  ,ca18
04:49:55  30  --
04:49:55  31  ,cx4
04:49:55  32  ,cx6
04:49:55  33  ,cx8
04:49:55  34  ,cx10
04:49:55  35  ,cx12
04:49:55  36  ,cx14
04:49:55  37  ,cx16
04:49:55  38  ,cx18
04:49:55  39  --
04:49:55  40  ,crr4
04:49:55  41  ,crr6
04:49:55  42  ,crr8
04:49:55  43  ,crr10
04:49:55  44  ,crr12
04:49:55  45  ,crr14
04:49:55  46  ,crr16
04:49:55  47  ,crr18
04:49:55  48  --
04:49:55  49  ,hh
04:49:55  50  ,d
04:49:55  51  ,w
04:49:55  52  ,mpm
04:49:55  53  ,mph
04:49:55  54  FROM svm6122
04:49:55  55  ORDER BY ydate
04:49:55  56  /

Table created.

Elapsed: 00:00:00.48
04:49:55 SQL> 
04:49:55 SQL> -- rpt
04:49:55 SQL> 
04:49:55 SQL> SELECT
04:49:55   2  pair
04:49:55   3  ,trend
04:49:55   4  ,gatt
04:49:55   5  ,COUNT(pair)
04:49:55   6  ,AVG(g6)
04:49:55   7  FROM svm6142
04:49:55   8  GROUP BY pair,trend,gatt
04:49:55   9  ORDER BY pair,trend,gatt
04:49:55  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6868 -.00231767
ech_usd 	-1 up	      3567 .003580662
ech_usd 	-1		53
ech_usd 	 1 nup	      6398 -.00232527
ech_usd 	 1 up	      2905 .004122715
ech_usd 	 1		19

6 rows selected.

Elapsed: 00:00:00.04
04:49:55 SQL> 
04:49:55 SQL> 
04:49:55 SQL> -- Derive NTILE based params:
04:49:55 SQL> 
04:49:55 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.19
04:49:55 SQL> CREATE TABLE svm6162 COMPRESS AS
04:49:55   2  SELECT
04:49:55   3  pair
04:49:55   4  ,ydate
04:49:55   5  ,prdate
04:49:55   6  ,clse
04:49:55   7  ,g6
04:49:55   8  ,gatt
04:49:55   9  ,gattn
04:49:55  10  ,trend
04:49:55  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
04:49:55  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
04:49:55  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
04:49:55  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
04:49:55  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
04:49:55  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
04:49:55  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
04:49:55  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
04:49:55  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
04:49:55  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
04:49:55  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
04:49:55  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
04:49:55  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
04:49:55  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
04:49:55  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
04:49:55  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
04:49:55  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
04:49:55  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
04:49:55  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
04:49:55  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
04:49:55  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
04:49:55  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
04:49:55  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
04:49:55  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
04:49:55  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
04:49:55  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
04:49:55  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
04:49:55  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
04:49:55  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
04:49:55  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
04:49:55  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
04:49:55  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
04:49:55  43  ,hh  att32
04:49:55  44  ,d   att33
04:49:55  45  ,w   att34
04:49:55  46  ,mpm att35
04:49:55  47  ,mph att36
04:49:55  48  ,trend att37
04:49:55  49  FROM svm6142
04:49:55  50  ORDER BY ydate
04:49:55  51  /

Table created.

Elapsed: 00:00:05.03
04:50:00 SQL> 
04:50:00 SQL> -- rpt
04:50:00 SQL> 
04:50:00 SQL> SELECT
04:50:00   2  pair
04:50:00   3  ,trend
04:50:00   4  ,gatt
04:50:00   5  ,COUNT(pair)
04:50:00   6  ,AVG(g6)
04:50:00   7  FROM svm6162
04:50:00   8  GROUP BY pair,trend,gatt
04:50:00   9  ORDER BY pair,trend,gatt
04:50:00  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6868 -.00231767
ech_usd 	-1 up	      3567 .003580662
ech_usd 	-1		53
ech_usd 	 1 nup	      6398 -.00232527
ech_usd 	 1 up	      2905 .004122715
ech_usd 	 1		19

6 rows selected.

Elapsed: 00:00:00.02
04:50:00 SQL> 
04:50:00 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
04:50:01 SQL> CREATE TABLE modsrc COMPRESS AS
04:50:01   2  SELECT
04:50:01   3  pair
04:50:01   4  ,ydate
04:50:01   5  ,prdate
04:50:01   6  ,trend
04:50:01   7  ,g6
04:50:01   8  ,gatt
04:50:01   9  ,gattn
04:50:01  10  FROM svm6162
04:50:01  11  /

Table created.

Elapsed: 00:00:00.10
04:50:01 SQL> 
04:50:01 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
04:50:01 SQL> 
04:50:01 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.07
04:50:01 SQL> CREATE TABLE ech_ms610 COMPRESS AS
04:50:01   2  SELECT
04:50:01   3  ydate
04:50:01   4  ,trend ech_trend
04:50:01   5  ,g6    ech_g6
04:50:01   6  ,gatt  ech_gatt
04:50:01   7  ,gattn ech_gattn
04:50:01   8  FROM modsrc
04:50:01   9  /

Table created.

Elapsed: 00:00:00.08
04:50:01 SQL> 
04:50:01 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
04:50:01 SQL> 
04:50:01 SQL> -- I need a copy of the attributes:
04:50:01 SQL> 
04:50:01 SQL> 
04:50:01 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.06
04:50:01 SQL> CREATE TABLE ech_att COMPRESS AS
04:50:01   2  SELECT
04:50:01   3  ydate
04:50:01   4  ,att00 ech_att00
04:50:01   5  ,att01 ech_att01
04:50:01   6  ,att02 ech_att02
04:50:01   7  ,att03 ech_att03
04:50:01   8  ,att04 ech_att04
04:50:01   9  ,att05 ech_att05
04:50:01  10  ,att06 ech_att06
04:50:01  11  ,att07 ech_att07
04:50:01  12  ,att08 ech_att08
04:50:01  13  ,att09 ech_att09
04:50:01  14  ,att10 ech_att10
04:50:01  15  ,att11 ech_att11
04:50:01  16  ,att12 ech_att12
04:50:01  17  ,att13 ech_att13
04:50:01  18  ,att14 ech_att14
04:50:01  19  ,att15 ech_att15
04:50:01  20  ,att16 ech_att16
04:50:01  21  ,att17 ech_att17
04:50:01  22  ,att18 ech_att18
04:50:01  23  ,att19 ech_att19
04:50:01  24  ,att20 ech_att20
04:50:01  25  ,att21 ech_att21
04:50:01  26  ,att22 ech_att22
04:50:01  27  ,att23 ech_att23
04:50:01  28  ,att24 ech_att24
04:50:01  29  ,att25 ech_att25
04:50:01  30  ,att26 ech_att26
04:50:01  31  ,att27 ech_att27
04:50:01  32  ,att28 ech_att28
04:50:01  33  ,att29 ech_att29
04:50:01  34  ,att30 ech_att30
04:50:01  35  ,att31 ech_att31
04:50:01  36  ,att32 ech_att32
04:50:01  37  ,att33 ech_att33
04:50:01  38  ,att34 ech_att34
04:50:01  39  ,att35 ech_att35
04:50:01  40  ,att36 ech_att36
04:50:01  41  ,att37 ech_att37
04:50:01  42  FROM svm6162
04:50:01  43  /

Table created.

Elapsed: 00:00:00.19
04:50:01 SQL> 
04:50:01 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
04:50:02 SQL> 
04:50:02 SQL> -- rpt
04:50:02 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19809

Elapsed: 00:00:00.82
04:50:03 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19810

Elapsed: 00:00:00.00
04:50:03 SQL> 
04:50:03 SQL> --
04:50:03 SQL> -- egb610.sql
04:50:03 SQL> --
04:50:03 SQL> 
04:50:03 SQL> -- Creates views and tables for backtesting a forex SVM strategy
04:50:03 SQL> 
04:50:03 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.60
04:50:03 SQL> 
04:50:03 SQL> -- I created di5min here:
04:50:03 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
04:50:03 SQL> 
04:50:03 SQL> CREATE OR REPLACE VIEW svm6102 AS
04:50:03   2  SELECT
04:50:03   3  pair
04:50:03   4  ,ydate
04:50:03   5  ,prdate
04:50:03   6  ,rownum rnum -- acts as t in my time-series
04:50:03   7  ,clse
04:50:03   8  -- Derive a bunch of attributes from clse, the latest price:
04:50:03   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
04:50:03  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
04:50:03  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
04:50:03  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
04:50:03  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
04:50:03  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
04:50:03  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
04:50:03  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
04:50:03  17  --
04:50:03  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
04:50:03  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
04:50:03  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
04:50:03  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
04:50:03  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
04:50:03  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
04:50:03  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
04:50:03  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
04:50:03  26  --
04:50:03  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
04:50:03  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
04:50:03  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
04:50:03  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
04:50:03  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
04:50:03  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
04:50:03  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
04:50:03  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
04:50:03  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
04:50:03  36  FROM di5min WHERE pair LIKE'%egb%'
04:50:03  37  AND ydate > sysdate - 95
04:50:03  38  ORDER BY ydate
04:50:03  39  /

View created.

Elapsed: 00:00:00.04
04:50:03 SQL> 
04:50:03 SQL> -- rpt
04:50:03 SQL> 
04:50:03 SQL> SELECT
04:50:03   2  pair
04:50:03   3  ,COUNT(pair)
04:50:03   4  ,MIN(clse),MAX(clse)
04:50:03   5  ,MIN(avg6),MAX(avg6)
04:50:03   6  ,MIN(ydate),MAX(ydate)
04:50:03   7  FROM svm6102
04:50:03   8  GROUP BY pair
04:50:03   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19808 .833520557 .893920122 .834199029 .892400287 2010-10-04 04:55:01 2011-01-07 04:45:00

Elapsed: 00:00:00.95
04:50:04 SQL> 
04:50:04 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
04:50:04 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.28
04:50:05 SQL> CREATE TABLE svm6122 COMPRESS AS
04:50:05   2  SELECT
04:50:05   3  pair
04:50:05   4  ,ydate
04:50:05   5  ,prdate
04:50:05   6  ,clse
04:50:05   7  -- g6 is important. I want to predict g6:
04:50:05   8  ,ld6 - clse g6
04:50:05   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
04:50:05  10  -- I want more attributes from the ones I derived above:
04:50:05  11  -- clse relation to moving-min
04:50:05  12  ,clse-min4  cm4
04:50:05  13  ,clse-min6  cm6
04:50:05  14  ,clse-min8  cm8
04:50:05  15  ,clse-min10 cm10
04:50:05  16  ,clse-min12 cm12
04:50:05  17  ,clse-min14 cm14
04:50:05  18  ,clse-min16 cm16
04:50:05  19  ,clse-min18 cm18
04:50:05  20  -- clse relation to moving-avg
04:50:05  21  ,clse-avg4  ca4
04:50:05  22  ,clse-avg6  ca6
04:50:05  23  ,clse-avg8  ca8
04:50:05  24  ,clse-avg10 ca10
04:50:05  25  ,clse-avg12 ca12
04:50:05  26  ,clse-avg14 ca14
04:50:05  27  ,clse-avg16 ca16
04:50:05  28  ,clse-avg18 ca18
04:50:05  29  -- clse relation to moving-max
04:50:05  30  ,clse-max4  cx4
04:50:05  31  ,clse-max6  cx6
04:50:05  32  ,clse-max8  cx8
04:50:05  33  ,clse-max10 cx10
04:50:05  34  ,clse-max12 cx12
04:50:05  35  ,clse-max14 cx14
04:50:05  36  ,clse-max16 cx16
04:50:05  37  ,clse-max18 cx18
04:50:05  38  -- Derive more attributes.
04:50:05  39  -- I want to use CORR() here to help SVM see the shape of the series.
04:50:05  40  -- But COVAR_POP is more stable:
04:50:05  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
04:50:05  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
04:50:05  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
04:50:05  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
04:50:05  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
04:50:05  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
04:50:05  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
04:50:05  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
04:50:05  49  -- Derive date related attributes:
04:50:05  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
04:50:05  51  ,0+TO_CHAR(ydate,'D')d
04:50:05  52  ,0+TO_CHAR(ydate,'W')w
04:50:05  53  -- mpm stands for minutes-past-midnight:
04:50:05  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
04:50:05  55  -- mph stands for minutes-past-hour:
04:50:05  56  ,0+TO_CHAR(ydate,'MI')mph
04:50:05  57  FROM svm6102
04:50:05  58  ORDER BY ydate
04:50:05  59  /

Table created.

Elapsed: 00:00:02.58
04:50:07 SQL> 
04:50:07 SQL> -- rpt
04:50:07 SQL> 
04:50:07 SQL> SELECT
04:50:07   2  pair
04:50:07   3  ,COUNT(pair)
04:50:07   4  ,MIN(clse),MAX(clse)
04:50:07   5  ,MIN(ydate),MAX(ydate)
04:50:07   6  FROM svm6122
04:50:07   7  GROUP BY pair
04:50:07   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19808 .833520557 .893920122 2010-10-04 04:55:01 2011-01-07 04:45:00

Elapsed: 00:00:00.07
04:50:07 SQL> 
04:50:07 SQL> -- Prepare for derivation of NTILE based params:
04:50:07 SQL> 
04:50:07 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.33
04:50:08 SQL> CREATE TABLE svm6142 COMPRESS AS
04:50:08   2  SELECT
04:50:08   3  pair
04:50:08   4  ,ydate
04:50:08   5  ,prdate
04:50:08   6  ,clse
04:50:08   7  ,g6
04:50:08   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
04:50:08   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
04:50:08  10  ,CASE WHEN trend IS NULL THEN 1
04:50:08  11  	    WHEN trend =0      THEN 1
04:50:08  12  	    ELSE trend END trend
04:50:08  13  ,cm4
04:50:08  14  ,cm6
04:50:08  15  ,cm8
04:50:08  16  ,cm10
04:50:08  17  ,cm12
04:50:08  18  ,cm14
04:50:08  19  ,cm16
04:50:08  20  ,cm18
04:50:08  21  --
04:50:08  22  ,ca4
04:50:08  23  ,ca6
04:50:08  24  ,ca8
04:50:08  25  ,ca10
04:50:08  26  ,ca12
04:50:08  27  ,ca14
04:50:08  28  ,ca16
04:50:08  29  ,ca18
04:50:08  30  --
04:50:08  31  ,cx4
04:50:08  32  ,cx6
04:50:08  33  ,cx8
04:50:08  34  ,cx10
04:50:08  35  ,cx12
04:50:08  36  ,cx14
04:50:08  37  ,cx16
04:50:08  38  ,cx18
04:50:08  39  --
04:50:08  40  ,crr4
04:50:08  41  ,crr6
04:50:08  42  ,crr8
04:50:08  43  ,crr10
04:50:08  44  ,crr12
04:50:08  45  ,crr14
04:50:08  46  ,crr16
04:50:08  47  ,crr18
04:50:08  48  --
04:50:08  49  ,hh
04:50:08  50  ,d
04:50:08  51  ,w
04:50:08  52  ,mpm
04:50:08  53  ,mph
04:50:08  54  FROM svm6122
04:50:08  55  ORDER BY ydate
04:50:08  56  /

Table created.

Elapsed: 00:00:00.42
04:50:08 SQL> 
04:50:08 SQL> -- rpt
04:50:08 SQL> 
04:50:08 SQL> SELECT
04:50:08   2  pair
04:50:08   3  ,trend
04:50:08   4  ,gatt
04:50:08   5  ,COUNT(pair)
04:50:08   6  ,AVG(g6)
04:50:08   7  FROM svm6142
04:50:08   8  GROUP BY pair,trend,gatt
04:50:08   9  ORDER BY pair,trend,gatt
04:50:08  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7971 -.00105018
egb_usd 	-1 up	      2629  .00293193
egb_usd 	-1		24
egb_usd 	 1 nup	      6519 -.00138274
egb_usd 	 1 up	      2617   .0029282
egb_usd 	 1		48

6 rows selected.

Elapsed: 00:00:00.04
04:50:08 SQL> 
04:50:08 SQL> 
04:50:08 SQL> -- Derive NTILE based params:
04:50:08 SQL> 
04:50:08 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
04:50:08 SQL> CREATE TABLE svm6162 COMPRESS AS
04:50:08   2  SELECT
04:50:08   3  pair
04:50:08   4  ,ydate
04:50:08   5  ,prdate
04:50:08   6  ,clse
04:50:08   7  ,g6
04:50:08   8  ,gatt
04:50:08   9  ,gattn
04:50:08  10  ,trend
04:50:08  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
04:50:08  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
04:50:08  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
04:50:08  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
04:50:08  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
04:50:08  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
04:50:08  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
04:50:08  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
04:50:08  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
04:50:08  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
04:50:08  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
04:50:08  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
04:50:08  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
04:50:08  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
04:50:08  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
04:50:08  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
04:50:08  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
04:50:08  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
04:50:08  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
04:50:08  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
04:50:08  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
04:50:08  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
04:50:08  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
04:50:08  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
04:50:08  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
04:50:08  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
04:50:08  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
04:50:08  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
04:50:08  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
04:50:08  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
04:50:08  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
04:50:08  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
04:50:08  43  ,hh  att32
04:50:08  44  ,d   att33
04:50:08  45  ,w   att34
04:50:08  46  ,mpm att35
04:50:08  47  ,mph att36
04:50:08  48  ,trend att37
04:50:08  49  FROM svm6142
04:50:08  50  ORDER BY ydate
04:50:08  51  /

Table created.

Elapsed: 00:00:05.66
04:50:14 SQL> 
04:50:14 SQL> -- rpt
04:50:14 SQL> 
04:50:14 SQL> SELECT
04:50:14   2  pair
04:50:14   3  ,trend
04:50:14   4  ,gatt
04:50:14   5  ,COUNT(pair)
04:50:14   6  ,AVG(g6)
04:50:14   7  FROM svm6162
04:50:14   8  GROUP BY pair,trend,gatt
04:50:14   9  ORDER BY pair,trend,gatt
04:50:14  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7971 -.00105018
egb_usd 	-1 up	      2629  .00293193
egb_usd 	-1		24
egb_usd 	 1 nup	      6519 -.00138274
egb_usd 	 1 up	      2617   .0029282
egb_usd 	 1		48

6 rows selected.

Elapsed: 00:00:00.02
04:50:14 SQL> 
04:50:14 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
04:50:14 SQL> CREATE TABLE modsrc COMPRESS AS
04:50:14   2  SELECT
04:50:14   3  pair
04:50:14   4  ,ydate
04:50:14   5  ,prdate
04:50:14   6  ,trend
04:50:14   7  ,g6
04:50:14   8  ,gatt
04:50:14   9  ,gattn
04:50:14  10  FROM svm6162
04:50:14  11  /

Table created.

Elapsed: 00:00:00.08
04:50:14 SQL> 
04:50:14 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
04:50:14 SQL> 
04:50:14 SQL> DROP   TABLE egb_ms610 ;

Table dropped.

Elapsed: 00:00:00.07
04:50:14 SQL> CREATE TABLE egb_ms610 COMPRESS AS
04:50:14   2  SELECT
04:50:14   3  ydate
04:50:14   4  ,trend egb_trend
04:50:14   5  ,g6    egb_g6
04:50:14   6  ,gatt  egb_gatt
04:50:14   7  ,gattn egb_gattn
04:50:14   8  FROM modsrc
04:50:14   9  /

Table created.

Elapsed: 00:00:00.07
04:50:14 SQL> 
04:50:14 SQL> ANALYZE TABLE egb_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
04:50:15 SQL> 
04:50:15 SQL> -- I need a copy of the attributes:
04:50:15 SQL> 
04:50:15 SQL> 
04:50:15 SQL> DROP   TABLE egb_att;

Table dropped.

Elapsed: 00:00:00.36
04:50:15 SQL> CREATE TABLE egb_att COMPRESS AS
04:50:15   2  SELECT
04:50:15   3  ydate
04:50:15   4  ,att00 egb_att00
04:50:15   5  ,att01 egb_att01
04:50:15   6  ,att02 egb_att02
04:50:15   7  ,att03 egb_att03
04:50:15   8  ,att04 egb_att04
04:50:15   9  ,att05 egb_att05
04:50:15  10  ,att06 egb_att06
04:50:15  11  ,att07 egb_att07
04:50:15  12  ,att08 egb_att08
04:50:15  13  ,att09 egb_att09
04:50:15  14  ,att10 egb_att10
04:50:15  15  ,att11 egb_att11
04:50:15  16  ,att12 egb_att12
04:50:15  17  ,att13 egb_att13
04:50:15  18  ,att14 egb_att14
04:50:15  19  ,att15 egb_att15
04:50:15  20  ,att16 egb_att16
04:50:15  21  ,att17 egb_att17
04:50:15  22  ,att18 egb_att18
04:50:15  23  ,att19 egb_att19
04:50:15  24  ,att20 egb_att20
04:50:15  25  ,att21 egb_att21
04:50:15  26  ,att22 egb_att22
04:50:15  27  ,att23 egb_att23
04:50:15  28  ,att24 egb_att24
04:50:15  29  ,att25 egb_att25
04:50:15  30  ,att26 egb_att26
04:50:15  31  ,att27 egb_att27
04:50:15  32  ,att28 egb_att28
04:50:15  33  ,att29 egb_att29
04:50:15  34  ,att30 egb_att30
04:50:15  35  ,att31 egb_att31
04:50:15  36  ,att32 egb_att32
04:50:15  37  ,att33 egb_att33
04:50:15  38  ,att34 egb_att34
04:50:15  39  ,att35 egb_att35
04:50:15  40  ,att36 egb_att36
04:50:15  41  ,att37 egb_att37
04:50:15  42  FROM svm6162
04:50:15  43  /

Table created.

Elapsed: 00:00:00.18
04:50:15 SQL> 
04:50:15 SQL> ANALYZE TABLE egb_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
04:50:16 SQL> 
04:50:16 SQL> -- rpt
04:50:16 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.95
04:50:17 SQL> SELECT COUNT(*)FROM egb_att;

  COUNT(*)
----------
     19808

Elapsed: 00:00:00.00
04:50:17 SQL> 
04:50:17 SQL> --
04:50:17 SQL> -- ejp610.sql
04:50:17 SQL> --
04:50:17 SQL> 
04:50:17 SQL> -- Creates views and tables for backtesting a forex SVM strategy
04:50:17 SQL> 
04:50:17 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.59
04:50:17 SQL> 
04:50:17 SQL> -- I created di5min here:
04:50:17 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
04:50:17 SQL> 
04:50:17 SQL> CREATE OR REPLACE VIEW svm6102 AS
04:50:17   2  SELECT
04:50:17   3  pair
04:50:17   4  ,ydate
04:50:17   5  ,prdate
04:50:17   6  ,rownum rnum -- acts as t in my time-series
04:50:17   7  ,clse
04:50:17   8  -- Derive a bunch of attributes from clse, the latest price:
04:50:17   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
04:50:17  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
04:50:17  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
04:50:17  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
04:50:17  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
04:50:17  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
04:50:17  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
04:50:17  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
04:50:17  17  --
04:50:17  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
04:50:17  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
04:50:17  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
04:50:17  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
04:50:17  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
04:50:17  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
04:50:17  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
04:50:17  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
04:50:17  26  --
04:50:17  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
04:50:17  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
04:50:17  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
04:50:17  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
04:50:17  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
04:50:17  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
04:50:17  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
04:50:17  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
04:50:17  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
04:50:17  36  FROM di5min WHERE pair LIKE'%ejp%'
04:50:17  37  AND ydate > sysdate - 95
04:50:17  38  ORDER BY ydate
04:50:17  39  /

View created.

Elapsed: 00:00:00.05
04:50:17 SQL> 
04:50:17 SQL> -- rpt
04:50:17 SQL> 
04:50:17 SQL> SELECT
04:50:17   2  pair
04:50:17   3  ,COUNT(pair)
04:50:17   4  ,MIN(clse),MAX(clse)
04:50:17   5  ,MIN(avg6),MAX(avg6)
04:50:17   6  ,MIN(ydate),MAX(ydate)
04:50:17   7  FROM svm6102
04:50:17   8  GROUP BY pair
04:50:17   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ejp_usd       19806 107.643765	115.63485 107.776148 115.509678 2010-10-04 04:55:01 2011-01-07 04:45:00

Elapsed: 00:00:00.86
04:50:18 SQL> 
04:50:18 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
04:50:18 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
04:50:18 SQL> CREATE TABLE svm6122 COMPRESS AS
04:50:18   2  SELECT
04:50:18   3  pair
04:50:18   4  ,ydate
04:50:18   5  ,prdate
04:50:18   6  ,clse
04:50:18   7  -- g6 is important. I want to predict g6:
04:50:18   8  ,ld6 - clse g6
04:50:18   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
04:50:18  10  -- I want more attributes from the ones I derived above:
04:50:18  11  -- clse relation to moving-min
04:50:18  12  ,clse-min4  cm4
04:50:18  13  ,clse-min6  cm6
04:50:18  14  ,clse-min8  cm8
04:50:18  15  ,clse-min10 cm10
04:50:18  16  ,clse-min12 cm12
04:50:18  17  ,clse-min14 cm14
04:50:18  18  ,clse-min16 cm16
04:50:18  19  ,clse-min18 cm18
04:50:18  20  -- clse relation to moving-avg
04:50:18  21  ,clse-avg4  ca4
04:50:18  22  ,clse-avg6  ca6
04:50:18  23  ,clse-avg8  ca8
04:50:18  24  ,clse-avg10 ca10
04:50:18  25  ,clse-avg12 ca12
04:50:18  26  ,clse-avg14 ca14
04:50:18  27  ,clse-avg16 ca16
04:50:18  28  ,clse-avg18 ca18
04:50:18  29  -- clse relation to moving-max
04:50:18  30  ,clse-max4  cx4
04:50:18  31  ,clse-max6  cx6
04:50:18  32  ,clse-max8  cx8
04:50:18  33  ,clse-max10 cx10
04:50:18  34  ,clse-max12 cx12
04:50:18  35  ,clse-max14 cx14
04:50:18  36  ,clse-max16 cx16
04:50:18  37  ,clse-max18 cx18
04:50:18  38  -- Derive more attributes.
04:50:18  39  -- I want to use CORR() here to help SVM see the shape of the series.
04:50:18  40  -- But COVAR_POP is more stable:
04:50:18  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
04:50:18  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
04:50:18  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
04:50:18  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
04:50:18  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
04:50:18  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
04:50:18  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
04:50:18  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
04:50:18  49  -- Derive date related attributes:
04:50:18  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
04:50:18  51  ,0+TO_CHAR(ydate,'D')d
04:50:18  52  ,0+TO_CHAR(ydate,'W')w
04:50:18  53  -- mpm stands for minutes-past-midnight:
04:50:18  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
04:50:18  55  -- mph stands for minutes-past-hour:
04:50:18  56  ,0+TO_CHAR(ydate,'MI')mph
04:50:18  57  FROM svm6102
04:50:18  58  ORDER BY ydate
04:50:18  59  /

Table created.

Elapsed: 00:00:02.32
04:50:21 SQL> 
04:50:21 SQL> -- rpt
04:50:21 SQL> 
04:50:21 SQL> SELECT
04:50:21   2  pair
04:50:21   3  ,COUNT(pair)
04:50:21   4  ,MIN(clse),MAX(clse)
04:50:21   5  ,MIN(ydate),MAX(ydate)
04:50:21   6  FROM svm6122
04:50:21   7  GROUP BY pair
04:50:21   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ejp_usd       19806 107.643765	115.63485 2010-10-04 04:55:01 2011-01-07 04:45:00

Elapsed: 00:00:00.04
04:50:21 SQL> 
04:50:21 SQL> -- Prepare for derivation of NTILE based params:
04:50:21 SQL> 
04:50:21 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.24
04:50:21 SQL> CREATE TABLE svm6142 COMPRESS AS
04:50:21   2  SELECT
04:50:21   3  pair
04:50:21   4  ,ydate
04:50:21   5  ,prdate
04:50:21   6  ,clse
04:50:21   7  ,g6
04:50:21   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
04:50:21   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
04:50:21  10  ,CASE WHEN trend IS NULL THEN 1
04:50:21  11  	    WHEN trend =0      THEN 1
04:50:21  12  	    ELSE trend END trend
04:50:21  13  ,cm4
04:50:21  14  ,cm6
04:50:21  15  ,cm8
04:50:21  16  ,cm10
04:50:21  17  ,cm12
04:50:21  18  ,cm14
04:50:21  19  ,cm16
04:50:21  20  ,cm18
04:50:21  21  --
04:50:21  22  ,ca4
04:50:21  23  ,ca6
04:50:21  24  ,ca8
04:50:21  25  ,ca10
04:50:21  26  ,ca12
04:50:21  27  ,ca14
04:50:21  28  ,ca16
04:50:21  29  ,ca18
04:50:21  30  --
04:50:21  31  ,cx4
04:50:21  32  ,cx6
04:50:21  33  ,cx8
04:50:21  34  ,cx10
04:50:21  35  ,cx12
04:50:21  36  ,cx14
04:50:21  37  ,cx16
04:50:21  38  ,cx18
04:50:21  39  --
04:50:21  40  ,crr4
04:50:21  41  ,crr6
04:50:21  42  ,crr8
04:50:21  43  ,crr10
04:50:21  44  ,crr12
04:50:21  45  ,crr14
04:50:21  46  ,crr16
04:50:21  47  ,crr18
04:50:21  48  --
04:50:21  49  ,hh
04:50:21  50  ,d
04:50:21  51  ,w
04:50:21  52  ,mpm
04:50:21  53  ,mph
04:50:21  54  FROM svm6122
04:50:21  55  ORDER BY ydate
04:50:21  56  /

Table created.

Elapsed: 00:00:00.47
04:50:21 SQL> 
04:50:21 SQL> -- rpt
04:50:21 SQL> 
04:50:21 SQL> SELECT
04:50:21   2  pair
04:50:21   3  ,trend
04:50:21   4  ,gatt
04:50:21   5  ,COUNT(pair)
04:50:21   6  ,AVG(g6)
04:50:21   7  FROM svm6142
04:50:21   8  GROUP BY pair,trend,gatt
04:50:21   9  ORDER BY pair,trend,gatt
04:50:21  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      5242 -.32189249
ejp_usd 	-1 up	      4926 .277457867
ejp_usd 	-1		52
ejp_usd 	 1 nup	      4948 -.29222654
ejp_usd 	 1 up	      4618 .288802854
ejp_usd 	 1		20

6 rows selected.

Elapsed: 00:00:00.04
04:50:21 SQL> 
04:50:21 SQL> 
04:50:21 SQL> -- Derive NTILE based params:
04:50:21 SQL> 
04:50:21 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.21
04:50:22 SQL> CREATE TABLE svm6162 COMPRESS AS
04:50:22   2  SELECT
04:50:22   3  pair
04:50:22   4  ,ydate
04:50:22   5  ,prdate
04:50:22   6  ,clse
04:50:22   7  ,g6
04:50:22   8  ,gatt
04:50:22   9  ,gattn
04:50:22  10  ,trend
04:50:22  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
04:50:22  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
04:50:22  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
04:50:22  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
04:50:22  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
04:50:22  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
04:50:22  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
04:50:22  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
04:50:22  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
04:50:22  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
04:50:22  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
04:50:22  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
04:50:22  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
04:50:22  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
04:50:22  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
04:50:22  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
04:50:22  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
04:50:22  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
04:50:22  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
04:50:22  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
04:50:22  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
04:50:22  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
04:50:22  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
04:50:22  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
04:50:22  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
04:50:22  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
04:50:22  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
04:50:22  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
04:50:22  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
04:50:22  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
04:50:22  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
04:50:22  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
04:50:22  43  ,hh  att32
04:50:22  44  ,d   att33
04:50:22  45  ,w   att34
04:50:22  46  ,mpm att35
04:50:22  47  ,mph att36
04:50:22  48  ,trend att37
04:50:22  49  FROM svm6142
04:50:22  50  ORDER BY ydate
04:50:22  51  /

Table created.

Elapsed: 00:00:04.94
04:50:27 SQL> 
04:50:27 SQL> -- rpt
04:50:27 SQL> 
04:50:27 SQL> SELECT
04:50:27   2  pair
04:50:27   3  ,trend
04:50:27   4  ,gatt
04:50:27   5  ,COUNT(pair)
04:50:27   6  ,AVG(g6)
04:50:27   7  FROM svm6162
04:50:27   8  GROUP BY pair,trend,gatt
04:50:27   9  ORDER BY pair,trend,gatt
04:50:27  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      5242 -.32189249
ejp_usd 	-1 up	      4926 .277457867
ejp_usd 	-1		52
ejp_usd 	 1 nup	      4948 -.29222654
ejp_usd 	 1 up	      4618 .288802854
ejp_usd 	 1		20

6 rows selected.

Elapsed: 00:00:00.03
04:50:27 SQL> 
04:50:27 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
04:50:27 SQL> CREATE TABLE modsrc COMPRESS AS
04:50:27   2  SELECT
04:50:27   3  pair
04:50:27   4  ,ydate
04:50:27   5  ,prdate
04:50:27   6  ,trend
04:50:27   7  ,g6
04:50:27   8  ,gatt
04:50:27   9  ,gattn
04:50:27  10  FROM svm6162
04:50:27  11  /

Table created.

Elapsed: 00:00:00.09
04:50:27 SQL> 
04:50:27 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
04:50:27 SQL> 
04:50:27 SQL> DROP   TABLE ejp_ms610 ;

Table dropped.

Elapsed: 00:00:00.14
04:50:27 SQL> CREATE TABLE ejp_ms610 COMPRESS AS
04:50:27   2  SELECT
04:50:27   3  ydate
04:50:27   4  ,trend ejp_trend
04:50:27   5  ,g6    ejp_g6
04:50:27   6  ,gatt  ejp_gatt
04:50:27   7  ,gattn ejp_gattn
04:50:27   8  FROM modsrc
04:50:27   9  /

Table created.

Elapsed: 00:00:00.07
04:50:27 SQL> 
04:50:27 SQL> ANALYZE TABLE ejp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
04:50:27 SQL> 
04:50:27 SQL> -- I need a copy of the attributes:
04:50:27 SQL> 
04:50:27 SQL> 
04:50:27 SQL> DROP   TABLE ejp_att;

Table dropped.

Elapsed: 00:00:00.13
04:50:28 SQL> CREATE TABLE ejp_att COMPRESS AS
04:50:28   2  SELECT
04:50:28   3  ydate
04:50:28   4  ,att00 ejp_att00
04:50:28   5  ,att01 ejp_att01
04:50:28   6  ,att02 ejp_att02
04:50:28   7  ,att03 ejp_att03
04:50:28   8  ,att04 ejp_att04
04:50:28   9  ,att05 ejp_att05
04:50:28  10  ,att06 ejp_att06
04:50:28  11  ,att07 ejp_att07
04:50:28  12  ,att08 ejp_att08
04:50:28  13  ,att09 ejp_att09
04:50:28  14  ,att10 ejp_att10
04:50:28  15  ,att11 ejp_att11
04:50:28  16  ,att12 ejp_att12
04:50:28  17  ,att13 ejp_att13
04:50:28  18  ,att14 ejp_att14
04:50:28  19  ,att15 ejp_att15
04:50:28  20  ,att16 ejp_att16
04:50:28  21  ,att17 ejp_att17
04:50:28  22  ,att18 ejp_att18
04:50:28  23  ,att19 ejp_att19
04:50:28  24  ,att20 ejp_att20
04:50:28  25  ,att21 ejp_att21
04:50:28  26  ,att22 ejp_att22
04:50:28  27  ,att23 ejp_att23
04:50:28  28  ,att24 ejp_att24
04:50:28  29  ,att25 ejp_att25
04:50:28  30  ,att26 ejp_att26
04:50:28  31  ,att27 ejp_att27
04:50:28  32  ,att28 ejp_att28
04:50:28  33  ,att29 ejp_att29
04:50:28  34  ,att30 ejp_att30
04:50:28  35  ,att31 ejp_att31
04:50:28  36  ,att32 ejp_att32
04:50:28  37  ,att33 ejp_att33
04:50:28  38  ,att34 ejp_att34
04:50:28  39  ,att35 ejp_att35
04:50:28  40  ,att36 ejp_att36
04:50:28  41  ,att37 ejp_att37
04:50:28  42  FROM svm6162
04:50:28  43  /

Table created.

Elapsed: 00:00:00.22
04:50:28 SQL> 
04:50:28 SQL> ANALYZE TABLE ejp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.49
04:50:28 SQL> 
04:50:28 SQL> -- rpt
04:50:28 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19806

Elapsed: 00:00:00.85
04:50:29 SQL> SELECT COUNT(*)FROM ejp_att;

  COUNT(*)
----------
     19806

Elapsed: 00:00:00.00
04:50:29 SQL> 
04:50:29 SQL> --
04:50:29 SQL> -- ajp610.sql
04:50:29 SQL> --
04:50:29 SQL> 
04:50:29 SQL> -- Creates views and tables for backtesting a forex SVM strategy
04:50:29 SQL> 
04:50:29 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.48
04:50:30 SQL> 
04:50:30 SQL> -- I created di5min here:
04:50:30 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
04:50:30 SQL> 
04:50:30 SQL> CREATE OR REPLACE VIEW svm6102 AS
04:50:30   2  SELECT
04:50:30   3  pair
04:50:30   4  ,ydate
04:50:30   5  ,prdate
04:50:30   6  ,rownum rnum -- acts as t in my time-series
04:50:30   7  ,clse
04:50:30   8  -- Derive a bunch of attributes from clse, the latest price:
04:50:30   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
04:50:30  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
04:50:30  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
04:50:30  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
04:50:30  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
04:50:30  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
04:50:30  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
04:50:30  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
04:50:30  17  --
04:50:30  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
04:50:30  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
04:50:30  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
04:50:30  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
04:50:30  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
04:50:30  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
04:50:30  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
04:50:30  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
04:50:30  26  --
04:50:30  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
04:50:30  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
04:50:30  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
04:50:30  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
04:50:30  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
04:50:30  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
04:50:30  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
04:50:30  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
04:50:30  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
04:50:30  36  FROM di5min WHERE pair LIKE'%ajp%'
04:50:30  37  AND ydate > sysdate - 95
04:50:30  38  ORDER BY ydate
04:50:30  39  /

View created.

Elapsed: 00:00:00.04
04:50:30 SQL> 
04:50:30 SQL> -- rpt
04:50:30 SQL> 
04:50:30 SQL> SELECT
04:50:30   2  pair
04:50:30   3  ,COUNT(pair)
04:50:30   4  ,MIN(clse),MAX(clse)
04:50:30   5  ,MIN(avg6),MAX(avg6)
04:50:30   6  ,MIN(ydate),MAX(ydate)
04:50:30   7  FROM svm6102
04:50:30   8  GROUP BY pair
04:50:30   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ajp_usd       19803  78.249976 83.6669853 78.5106193  83.546306 2010-10-04 04:55:01 2011-01-07 04:45:00

Elapsed: 00:00:00.80
04:50:30 SQL> 
04:50:30 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
04:50:30 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.33
04:50:31 SQL> CREATE TABLE svm6122 COMPRESS AS
04:50:31   2  SELECT
04:50:31   3  pair
04:50:31   4  ,ydate
04:50:31   5  ,prdate
04:50:31   6  ,clse
04:50:31   7  -- g6 is important. I want to predict g6:
04:50:31   8  ,ld6 - clse g6
04:50:31   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
04:50:31  10  -- I want more attributes from the ones I derived above:
04:50:31  11  -- clse relation to moving-min
04:50:31  12  ,clse-min4  cm4
04:50:31  13  ,clse-min6  cm6
04:50:31  14  ,clse-min8  cm8
04:50:31  15  ,clse-min10 cm10
04:50:31  16  ,clse-min12 cm12
04:50:31  17  ,clse-min14 cm14
04:50:31  18  ,clse-min16 cm16
04:50:31  19  ,clse-min18 cm18
04:50:31  20  -- clse relation to moving-avg
04:50:31  21  ,clse-avg4  ca4
04:50:31  22  ,clse-avg6  ca6
04:50:31  23  ,clse-avg8  ca8
04:50:31  24  ,clse-avg10 ca10
04:50:31  25  ,clse-avg12 ca12
04:50:31  26  ,clse-avg14 ca14
04:50:31  27  ,clse-avg16 ca16
04:50:31  28  ,clse-avg18 ca18
04:50:31  29  -- clse relation to moving-max
04:50:31  30  ,clse-max4  cx4
04:50:31  31  ,clse-max6  cx6
04:50:31  32  ,clse-max8  cx8
04:50:31  33  ,clse-max10 cx10
04:50:31  34  ,clse-max12 cx12
04:50:31  35  ,clse-max14 cx14
04:50:31  36  ,clse-max16 cx16
04:50:31  37  ,clse-max18 cx18
04:50:31  38  -- Derive more attributes.
04:50:31  39  -- I want to use CORR() here to help SVM see the shape of the series.
04:50:31  40  -- But COVAR_POP is more stable:
04:50:31  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
04:50:31  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
04:50:31  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
04:50:31  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
04:50:31  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
04:50:31  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
04:50:31  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
04:50:31  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
04:50:31  49  -- Derive date related attributes:
04:50:31  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
04:50:31  51  ,0+TO_CHAR(ydate,'D')d
04:50:31  52  ,0+TO_CHAR(ydate,'W')w
04:50:31  53  -- mpm stands for minutes-past-midnight:
04:50:31  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
04:50:31  55  -- mph stands for minutes-past-hour:
04:50:31  56  ,0+TO_CHAR(ydate,'MI')mph
04:50:31  57  FROM svm6102
04:50:31  58  ORDER BY ydate
04:50:31  59  /

Table created.

Elapsed: 00:00:02.06
04:50:33 SQL> 
04:50:33 SQL> -- rpt
04:50:33 SQL> 
04:50:33 SQL> SELECT
04:50:33   2  pair
04:50:33   3  ,COUNT(pair)
04:50:33   4  ,MIN(clse),MAX(clse)
04:50:33   5  ,MIN(ydate),MAX(ydate)
04:50:33   6  FROM svm6122
04:50:33   7  GROUP BY pair
04:50:33   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ajp_usd       19803  78.249976 83.6669853 2010-10-04 04:55:01 2011-01-07 04:45:00

Elapsed: 00:00:00.03
04:50:33 SQL> 
04:50:33 SQL> -- Prepare for derivation of NTILE based params:
04:50:33 SQL> 
04:50:33 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.26
04:50:33 SQL> CREATE TABLE svm6142 COMPRESS AS
04:50:33   2  SELECT
04:50:33   3  pair
04:50:33   4  ,ydate
04:50:33   5  ,prdate
04:50:33   6  ,clse
04:50:33   7  ,g6
04:50:33   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
04:50:33   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
04:50:33  10  ,CASE WHEN trend IS NULL THEN 1
04:50:33  11  	    WHEN trend =0      THEN 1
04:50:33  12  	    ELSE trend END trend
04:50:33  13  ,cm4
04:50:33  14  ,cm6
04:50:33  15  ,cm8
04:50:33  16  ,cm10
04:50:33  17  ,cm12
04:50:33  18  ,cm14
04:50:33  19  ,cm16
04:50:33  20  ,cm18
04:50:33  21  --
04:50:33  22  ,ca4
04:50:33  23  ,ca6
04:50:33  24  ,ca8
04:50:33  25  ,ca10
04:50:33  26  ,ca12
04:50:33  27  ,ca14
04:50:33  28  ,ca16
04:50:33  29  ,ca18
04:50:33  30  --
04:50:33  31  ,cx4
04:50:33  32  ,cx6
04:50:33  33  ,cx8
04:50:33  34  ,cx10
04:50:33  35  ,cx12
04:50:33  36  ,cx14
04:50:33  37  ,cx16
04:50:33  38  ,cx18
04:50:33  39  --
04:50:33  40  ,crr4
04:50:33  41  ,crr6
04:50:33  42  ,crr8
04:50:33  43  ,crr10
04:50:33  44  ,crr12
04:50:33  45  ,crr14
04:50:33  46  ,crr16
04:50:33  47  ,crr18
04:50:33  48  --
04:50:33  49  ,hh
04:50:33  50  ,d
04:50:33  51  ,w
04:50:33  52  ,mpm
04:50:33  53  ,mph
04:50:33  54  FROM svm6122
04:50:33  55  ORDER BY ydate
04:50:33  56  /

Table created.

Elapsed: 00:00:00.39
04:50:34 SQL> 
04:50:34 SQL> -- rpt
04:50:34 SQL> 
04:50:34 SQL> SELECT
04:50:34   2  pair
04:50:34   3  ,trend
04:50:34   4  ,gatt
04:50:34   5  ,COUNT(pair)
04:50:34   6  ,AVG(g6)
04:50:34   7  FROM svm6142
04:50:34   8  GROUP BY pair,trend,gatt
04:50:34   9  ORDER BY pair,trend,gatt
04:50:34  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4406 -.22255024
ajp_usd 	-1 up	      5232 .223221313
ajp_usd 	-1		57
ajp_usd 	 1 nup	      5282 -.20018762
ajp_usd 	 1 up	      4811 .212749728
ajp_usd 	 1		15

6 rows selected.

Elapsed: 00:00:00.04
04:50:34 SQL> 
04:50:34 SQL> 
04:50:34 SQL> -- Derive NTILE based params:
04:50:34 SQL> 
04:50:34 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.20
04:50:34 SQL> CREATE TABLE svm6162 COMPRESS AS
04:50:34   2  SELECT
04:50:34   3  pair
04:50:34   4  ,ydate
04:50:34   5  ,prdate
04:50:34   6  ,clse
04:50:34   7  ,g6
04:50:34   8  ,gatt
04:50:34   9  ,gattn
04:50:34  10  ,trend
04:50:34  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
04:50:34  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
04:50:34  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
04:50:34  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
04:50:34  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
04:50:34  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
04:50:34  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
04:50:34  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
04:50:34  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
04:50:34  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
04:50:34  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
04:50:34  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
04:50:34  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
04:50:34  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
04:50:34  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
04:50:34  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
04:50:34  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
04:50:34  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
04:50:34  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
04:50:34  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
04:50:34  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
04:50:34  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
04:50:34  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
04:50:34  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
04:50:34  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
04:50:34  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
04:50:34  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
04:50:34  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
04:50:34  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
04:50:34  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
04:50:34  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
04:50:34  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
04:50:34  43  ,hh  att32
04:50:34  44  ,d   att33
04:50:34  45  ,w   att34
04:50:34  46  ,mpm att35
04:50:34  47  ,mph att36
04:50:34  48  ,trend att37
04:50:34  49  FROM svm6142
04:50:34  50  ORDER BY ydate
04:50:34  51  /

Table created.

Elapsed: 00:00:05.03
04:50:39 SQL> 
04:50:39 SQL> -- rpt
04:50:39 SQL> 
04:50:39 SQL> SELECT
04:50:39   2  pair
04:50:39   3  ,trend
04:50:39   4  ,gatt
04:50:39   5  ,COUNT(pair)
04:50:39   6  ,AVG(g6)
04:50:39   7  FROM svm6162
04:50:39   8  GROUP BY pair,trend,gatt
04:50:39   9  ORDER BY pair,trend,gatt
04:50:39  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4406 -.22255024
ajp_usd 	-1 up	      5232 .223221313
ajp_usd 	-1		57
ajp_usd 	 1 nup	      5282 -.20018762
ajp_usd 	 1 up	      4811 .212749728
ajp_usd 	 1		15

6 rows selected.

Elapsed: 00:00:00.03
04:50:39 SQL> 
04:50:39 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.22
04:50:39 SQL> CREATE TABLE modsrc COMPRESS AS
04:50:39   2  SELECT
04:50:39   3  pair
04:50:39   4  ,ydate
04:50:39   5  ,prdate
04:50:39   6  ,trend
04:50:39   7  ,g6
04:50:39   8  ,gatt
04:50:39   9  ,gattn
04:50:39  10  FROM svm6162
04:50:39  11  /

Table created.

Elapsed: 00:00:00.09
04:50:39 SQL> 
04:50:39 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
04:50:39 SQL> 
04:50:39 SQL> DROP   TABLE ajp_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
04:50:39 SQL> CREATE TABLE ajp_ms610 COMPRESS AS
04:50:39   2  SELECT
04:50:39   3  ydate
04:50:39   4  ,trend ajp_trend
04:50:39   5  ,g6    ajp_g6
04:50:39   6  ,gatt  ajp_gatt
04:50:39   7  ,gattn ajp_gattn
04:50:39   8  FROM modsrc
04:50:39   9  /

Table created.

Elapsed: 00:00:00.08
04:50:39 SQL> 
04:50:39 SQL> ANALYZE TABLE ajp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
04:50:40 SQL> 
04:50:40 SQL> -- I need a copy of the attributes:
04:50:40 SQL> 
04:50:40 SQL> 
04:50:40 SQL> DROP   TABLE ajp_att;

Table dropped.

Elapsed: 00:00:00.05
04:50:40 SQL> CREATE TABLE ajp_att COMPRESS AS
04:50:40   2  SELECT
04:50:40   3  ydate
04:50:40   4  ,att00 ajp_att00
04:50:40   5  ,att01 ajp_att01
04:50:40   6  ,att02 ajp_att02
04:50:40   7  ,att03 ajp_att03
04:50:40   8  ,att04 ajp_att04
04:50:40   9  ,att05 ajp_att05
04:50:40  10  ,att06 ajp_att06
04:50:40  11  ,att07 ajp_att07
04:50:40  12  ,att08 ajp_att08
04:50:40  13  ,att09 ajp_att09
04:50:40  14  ,att10 ajp_att10
04:50:40  15  ,att11 ajp_att11
04:50:40  16  ,att12 ajp_att12
04:50:40  17  ,att13 ajp_att13
04:50:40  18  ,att14 ajp_att14
04:50:40  19  ,att15 ajp_att15
04:50:40  20  ,att16 ajp_att16
04:50:40  21  ,att17 ajp_att17
04:50:40  22  ,att18 ajp_att18
04:50:40  23  ,att19 ajp_att19
04:50:40  24  ,att20 ajp_att20
04:50:40  25  ,att21 ajp_att21
04:50:40  26  ,att22 ajp_att22
04:50:40  27  ,att23 ajp_att23
04:50:40  28  ,att24 ajp_att24
04:50:40  29  ,att25 ajp_att25
04:50:40  30  ,att26 ajp_att26
04:50:40  31  ,att27 ajp_att27
04:50:40  32  ,att28 ajp_att28
04:50:40  33  ,att29 ajp_att29
04:50:40  34  ,att30 ajp_att30
04:50:40  35  ,att31 ajp_att31
04:50:40  36  ,att32 ajp_att32
04:50:40  37  ,att33 ajp_att33
04:50:40  38  ,att34 ajp_att34
04:50:40  39  ,att35 ajp_att35
04:50:40  40  ,att36 ajp_att36
04:50:40  41  ,att37 ajp_att37
04:50:40  42  FROM svm6162
04:50:40  43  /

Table created.

Elapsed: 00:00:00.21
04:50:40 SQL> 
04:50:40 SQL> ANALYZE TABLE ajp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
04:50:40 SQL> 
04:50:40 SQL> -- rpt
04:50:40 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19803

Elapsed: 00:00:00.78
04:50:41 SQL> SELECT COUNT(*)FROM ajp_att;

  COUNT(*)
----------
     19803

Elapsed: 00:00:00.00
04:50:41 SQL> 
04:50:41 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
