
SQL*Plus: Release 11.2.0.1.0 Production on Wed Jan 5 16:08:10 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

16:08:11 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
16:08:11 SQL> 16:08:11 SQL> --
16:08:11 SQL> -- eur610.sql
16:08:11 SQL> --
16:08:11 SQL> 
16:08:11 SQL> -- Creates views and tables for backtesting a forex SVM strategy
16:08:11 SQL> 
16:08:11 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.05
16:08:11 SQL> 
16:08:11 SQL> -- I created di5min here:
16:08:11 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
16:08:11 SQL> 
16:08:11 SQL> CREATE OR REPLACE VIEW svm6102 AS
16:08:11   2  SELECT
16:08:11   3  pair
16:08:11   4  ,ydate
16:08:11   5  ,prdate
16:08:11   6  ,rownum rnum -- acts as t in my time-series
16:08:11   7  ,clse
16:08:11   8  -- Derive a bunch of attributes from clse, the latest price:
16:08:11   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
16:08:11  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
16:08:11  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
16:08:11  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
16:08:11  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
16:08:11  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
16:08:11  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
16:08:11  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
16:08:11  17  --
16:08:11  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
16:08:11  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
16:08:11  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
16:08:11  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
16:08:11  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
16:08:11  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
16:08:11  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
16:08:11  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
16:08:11  26  --
16:08:11  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
16:08:11  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
16:08:11  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
16:08:11  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
16:08:11  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
16:08:11  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
16:08:11  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
16:08:11  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
16:08:11  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
16:08:11  36  FROM di5min WHERE pair LIKE'%eur%'
16:08:11  37  AND ydate > sysdate - 95
16:08:11  38  ORDER BY ydate
16:08:11  39  /

View created.

Elapsed: 00:00:00.18
16:08:11 SQL> 
16:08:11 SQL> -- rpt
16:08:11 SQL> 
16:08:11 SQL> SELECT
16:08:11   2  pair
16:08:11   3  ,COUNT(pair)
16:08:11   4  ,MIN(clse),MAX(clse)
16:08:11   5  ,MIN(avg6),MAX(avg6)
16:08:11   6  ,MIN(ydate),MAX(ydate)
16:08:11   7  FROM svm6102
16:08:11   8  GROUP BY pair
16:08:11   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19473    1.29735	   1.4273 1.29875103 1.42436233 2010-10-03 20:55:01 2011-01-05 16:05:00

Elapsed: 00:00:00.96
16:08:12 SQL> 
16:08:12 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
16:08:12 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.04
16:08:12 SQL> CREATE TABLE svm6122 COMPRESS AS
16:08:12   2  SELECT
16:08:12   3  pair
16:08:12   4  ,ydate
16:08:12   5  ,prdate
16:08:12   6  ,clse
16:08:12   7  -- g6 is important. I want to predict g6:
16:08:12   8  ,ld6 - clse g6
16:08:12   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
16:08:12  10  -- I want more attributes from the ones I derived above:
16:08:12  11  -- clse relation to moving-min
16:08:12  12  ,clse-min4  cm4
16:08:12  13  ,clse-min6  cm6
16:08:12  14  ,clse-min8  cm8
16:08:12  15  ,clse-min10 cm10
16:08:12  16  ,clse-min12 cm12
16:08:12  17  ,clse-min14 cm14
16:08:12  18  ,clse-min16 cm16
16:08:12  19  ,clse-min18 cm18
16:08:12  20  -- clse relation to moving-avg
16:08:12  21  ,clse-avg4  ca4
16:08:12  22  ,clse-avg6  ca6
16:08:12  23  ,clse-avg8  ca8
16:08:12  24  ,clse-avg10 ca10
16:08:12  25  ,clse-avg12 ca12
16:08:12  26  ,clse-avg14 ca14
16:08:12  27  ,clse-avg16 ca16
16:08:12  28  ,clse-avg18 ca18
16:08:12  29  -- clse relation to moving-max
16:08:12  30  ,clse-max4  cx4
16:08:12  31  ,clse-max6  cx6
16:08:12  32  ,clse-max8  cx8
16:08:12  33  ,clse-max10 cx10
16:08:12  34  ,clse-max12 cx12
16:08:12  35  ,clse-max14 cx14
16:08:12  36  ,clse-max16 cx16
16:08:12  37  ,clse-max18 cx18
16:08:12  38  -- Derive more attributes.
16:08:12  39  -- I want to use CORR() here to help SVM see the shape of the series.
16:08:12  40  -- But COVAR_POP is more stable:
16:08:12  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
16:08:12  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
16:08:12  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
16:08:12  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
16:08:12  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
16:08:12  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
16:08:12  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
16:08:12  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
16:08:12  49  -- Derive date related attributes:
16:08:12  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
16:08:12  51  ,0+TO_CHAR(ydate,'D')d
16:08:12  52  ,0+TO_CHAR(ydate,'W')w
16:08:12  53  -- mpm stands for minutes-past-midnight:
16:08:12  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
16:08:12  55  -- mph stands for minutes-past-hour:
16:08:12  56  ,0+TO_CHAR(ydate,'MI')mph
16:08:12  57  FROM svm6102
16:08:12  58  ORDER BY ydate
16:08:12  59  /

Table created.

Elapsed: 00:00:02.42
16:08:14 SQL> 
16:08:14 SQL> -- rpt
16:08:14 SQL> 
16:08:14 SQL> SELECT
16:08:14   2  pair
16:08:14   3  ,COUNT(pair)
16:08:14   4  ,MIN(clse),MAX(clse)
16:08:14   5  ,MIN(ydate),MAX(ydate)
16:08:14   6  FROM svm6122
16:08:14   7  GROUP BY pair
16:08:14   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19473    1.29735	   1.4273 2010-10-03 20:55:01 2011-01-05 16:05:00

Elapsed: 00:00:00.05
16:08:14 SQL> 
16:08:14 SQL> -- Prepare for derivation of NTILE based params:
16:08:14 SQL> 
16:08:14 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:01.08
16:08:15 SQL> CREATE TABLE svm6142 COMPRESS AS
16:08:15   2  SELECT
16:08:15   3  pair
16:08:15   4  ,ydate
16:08:15   5  ,prdate
16:08:15   6  ,clse
16:08:15   7  ,g6
16:08:15   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
16:08:15   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
16:08:15  10  ,CASE WHEN trend IS NULL THEN 1
16:08:15  11  	    WHEN trend =0      THEN 1
16:08:15  12  	    ELSE trend END trend
16:08:15  13  ,cm4
16:08:15  14  ,cm6
16:08:15  15  ,cm8
16:08:15  16  ,cm10
16:08:15  17  ,cm12
16:08:15  18  ,cm14
16:08:15  19  ,cm16
16:08:15  20  ,cm18
16:08:15  21  --
16:08:15  22  ,ca4
16:08:15  23  ,ca6
16:08:15  24  ,ca8
16:08:15  25  ,ca10
16:08:15  26  ,ca12
16:08:15  27  ,ca14
16:08:15  28  ,ca16
16:08:15  29  ,ca18
16:08:15  30  --
16:08:15  31  ,cx4
16:08:15  32  ,cx6
16:08:15  33  ,cx8
16:08:15  34  ,cx10
16:08:15  35  ,cx12
16:08:15  36  ,cx14
16:08:15  37  ,cx16
16:08:15  38  ,cx18
16:08:15  39  --
16:08:15  40  ,crr4
16:08:15  41  ,crr6
16:08:15  42  ,crr8
16:08:15  43  ,crr10
16:08:15  44  ,crr12
16:08:15  45  ,crr14
16:08:15  46  ,crr16
16:08:15  47  ,crr18
16:08:15  48  --
16:08:15  49  ,hh
16:08:15  50  ,d
16:08:15  51  ,w
16:08:15  52  ,mpm
16:08:15  53  ,mph
16:08:15  54  FROM svm6122
16:08:15  55  ORDER BY ydate
16:08:15  56  /

Table created.

Elapsed: 00:00:00.36
16:08:16 SQL> 
16:08:16 SQL> -- rpt
16:08:16 SQL> 
16:08:16 SQL> SELECT
16:08:16   2  pair
16:08:16   3  ,trend
16:08:16   4  ,gatt
16:08:16   5  ,COUNT(pair)
16:08:16   6  ,AVG(g6)
16:08:16   7  FROM svm6142
16:08:16   8  GROUP BY pair,trend,gatt
16:08:16   9  ORDER BY pair,trend,gatt
16:08:16  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6294 -.00314513
eur_usd 	-1 up	      3562 .004453576
eur_usd 	-1		72
eur_usd 	 1 nup	      5840 -.00325501
eur_usd 	 1 up	      3705 .005071238

Elapsed: 00:00:00.04
16:08:16 SQL> 
16:08:16 SQL> 
16:08:16 SQL> -- Derive NTILE based params:
16:08:16 SQL> 
16:08:16 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.89
16:08:17 SQL> CREATE TABLE svm6162 COMPRESS AS
16:08:17   2  SELECT
16:08:17   3  pair
16:08:17   4  ,ydate
16:08:17   5  ,prdate
16:08:17   6  ,clse
16:08:17   7  ,g6
16:08:17   8  ,gatt
16:08:17   9  ,gattn
16:08:17  10  ,trend
16:08:17  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
16:08:17  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
16:08:17  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
16:08:17  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
16:08:17  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
16:08:17  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
16:08:17  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
16:08:17  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
16:08:17  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
16:08:17  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
16:08:17  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
16:08:17  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
16:08:17  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
16:08:17  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
16:08:17  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
16:08:17  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
16:08:17  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
16:08:17  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
16:08:17  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
16:08:17  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
16:08:17  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
16:08:17  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
16:08:17  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
16:08:17  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
16:08:17  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
16:08:17  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
16:08:17  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
16:08:17  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
16:08:17  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
16:08:17  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
16:08:17  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
16:08:17  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
16:08:17  43  ,hh  att32
16:08:17  44  ,d   att33
16:08:17  45  ,w   att34
16:08:17  46  ,mpm att35
16:08:17  47  ,mph att36
16:08:17  48  ,trend att37
16:08:17  49  FROM svm6142
16:08:17  50  ORDER BY ydate
16:08:17  51  /

Table created.

Elapsed: 00:00:04.85
16:08:21 SQL> 
16:08:21 SQL> -- rpt
16:08:21 SQL> 
16:08:21 SQL> SELECT
16:08:21   2  pair
16:08:21   3  ,trend
16:08:21   4  ,gatt
16:08:21   5  ,COUNT(pair)
16:08:21   6  ,AVG(g6)
16:08:21   7  FROM svm6162
16:08:21   8  GROUP BY pair,trend,gatt
16:08:21   9  ORDER BY pair,trend,gatt
16:08:21  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6294 -.00314513
eur_usd 	-1 up	      3562 .004453576
eur_usd 	-1		72
eur_usd 	 1 nup	      5840 -.00325501
eur_usd 	 1 up	      3705 .005071238

Elapsed: 00:00:00.03
16:08:21 SQL> 
16:08:21 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.28
16:08:22 SQL> CREATE TABLE modsrc COMPRESS AS
16:08:22   2  SELECT
16:08:22   3  pair
16:08:22   4  ,ydate
16:08:22   5  ,prdate
16:08:22   6  ,trend
16:08:22   7  ,g6
16:08:22   8  ,gatt
16:08:22   9  ,gattn
16:08:22  10  FROM svm6162
16:08:22  11  /

Table created.

Elapsed: 00:00:00.08
16:08:22 SQL> 
16:08:22 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
16:08:22 SQL> 
16:08:22 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.07
16:08:22 SQL> CREATE TABLE eur_ms610 COMPRESS AS
16:08:22   2  SELECT
16:08:22   3  ydate
16:08:22   4  ,trend eur_trend
16:08:22   5  ,g6    eur_g6
16:08:22   6  ,gatt  eur_gatt
16:08:22   7  ,gattn eur_gattn
16:08:22   8  FROM modsrc
16:08:22   9  /

Table created.

Elapsed: 00:00:00.07
16:08:22 SQL> 
16:08:22 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
16:08:22 SQL> 
16:08:22 SQL> -- I need a copy of the attributes:
16:08:22 SQL> 
16:08:22 SQL> 
16:08:22 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.04
16:08:22 SQL> CREATE TABLE eur_att COMPRESS AS
16:08:22   2  SELECT
16:08:22   3  ydate
16:08:22   4  ,att00 eur_att00
16:08:22   5  ,att01 eur_att01
16:08:22   6  ,att02 eur_att02
16:08:22   7  ,att03 eur_att03
16:08:22   8  ,att04 eur_att04
16:08:22   9  ,att05 eur_att05
16:08:22  10  ,att06 eur_att06
16:08:22  11  ,att07 eur_att07
16:08:22  12  ,att08 eur_att08
16:08:22  13  ,att09 eur_att09
16:08:22  14  ,att10 eur_att10
16:08:22  15  ,att11 eur_att11
16:08:22  16  ,att12 eur_att12
16:08:22  17  ,att13 eur_att13
16:08:22  18  ,att14 eur_att14
16:08:22  19  ,att15 eur_att15
16:08:22  20  ,att16 eur_att16
16:08:22  21  ,att17 eur_att17
16:08:22  22  ,att18 eur_att18
16:08:22  23  ,att19 eur_att19
16:08:22  24  ,att20 eur_att20
16:08:22  25  ,att21 eur_att21
16:08:22  26  ,att22 eur_att22
16:08:22  27  ,att23 eur_att23
16:08:22  28  ,att24 eur_att24
16:08:22  29  ,att25 eur_att25
16:08:22  30  ,att26 eur_att26
16:08:22  31  ,att27 eur_att27
16:08:22  32  ,att28 eur_att28
16:08:22  33  ,att29 eur_att29
16:08:22  34  ,att30 eur_att30
16:08:22  35  ,att31 eur_att31
16:08:22  36  ,att32 eur_att32
16:08:22  37  ,att33 eur_att33
16:08:22  38  ,att34 eur_att34
16:08:22  39  ,att35 eur_att35
16:08:22  40  ,att36 eur_att36
16:08:22  41  ,att37 eur_att37
16:08:22  42  FROM svm6162
16:08:22  43  /

Table created.

Elapsed: 00:00:00.16
16:08:23 SQL> 
16:08:23 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.51
16:08:23 SQL> 
16:08:23 SQL> -- rpt
16:08:23 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19473

Elapsed: 00:00:00.91
16:08:24 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19473

Elapsed: 00:00:00.01
16:08:24 SQL> 
16:08:24 SQL> --
16:08:24 SQL> -- aud610.sql
16:08:24 SQL> --
16:08:24 SQL> 
16:08:24 SQL> -- Creates views and tables for backtesting a forex SVM strategy
16:08:24 SQL> 
16:08:24 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.61
16:08:25 SQL> 
16:08:25 SQL> -- I created di5min here:
16:08:25 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
16:08:25 SQL> 
16:08:25 SQL> CREATE OR REPLACE VIEW svm6102 AS
16:08:25   2  SELECT
16:08:25   3  pair
16:08:25   4  ,ydate
16:08:25   5  ,prdate
16:08:25   6  ,rownum rnum -- acts as t in my time-series
16:08:25   7  ,clse
16:08:25   8  -- Derive a bunch of attributes from clse, the latest price:
16:08:25   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
16:08:25  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
16:08:25  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
16:08:25  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
16:08:25  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
16:08:25  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
16:08:25  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
16:08:25  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
16:08:25  17  --
16:08:25  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
16:08:25  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
16:08:25  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
16:08:25  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
16:08:25  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
16:08:25  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
16:08:25  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
16:08:25  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
16:08:25  26  --
16:08:25  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
16:08:25  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
16:08:25  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
16:08:25  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
16:08:25  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
16:08:25  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
16:08:25  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
16:08:25  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
16:08:25  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
16:08:25  36  FROM di5min WHERE pair LIKE'%aud%'
16:08:25  37  AND ydate > sysdate - 95
16:08:25  38  ORDER BY ydate
16:08:25  39  /

View created.

Elapsed: 00:00:00.05
16:08:25 SQL> 
16:08:25 SQL> -- rpt
16:08:25 SQL> 
16:08:25 SQL> SELECT
16:08:25   2  pair
16:08:25   3  ,COUNT(pair)
16:08:25   4  ,MIN(clse),MAX(clse)
16:08:25   5  ,MIN(avg6),MAX(avg6)
16:08:25   6  ,MIN(ydate),MAX(ydate)
16:08:25   7  FROM svm6102
16:08:25   8  GROUP BY pair
16:08:25   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19470	.95405	  1.02495 .957141438 1.02284247 2010-10-03 20:55:01 2011-01-05 16:05:00

Elapsed: 00:00:00.93
16:08:26 SQL> 
16:08:26 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
16:08:26 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
16:08:26 SQL> CREATE TABLE svm6122 COMPRESS AS
16:08:26   2  SELECT
16:08:26   3  pair
16:08:26   4  ,ydate
16:08:26   5  ,prdate
16:08:26   6  ,clse
16:08:26   7  -- g6 is important. I want to predict g6:
16:08:26   8  ,ld6 - clse g6
16:08:26   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
16:08:26  10  -- I want more attributes from the ones I derived above:
16:08:26  11  -- clse relation to moving-min
16:08:26  12  ,clse-min4  cm4
16:08:26  13  ,clse-min6  cm6
16:08:26  14  ,clse-min8  cm8
16:08:26  15  ,clse-min10 cm10
16:08:26  16  ,clse-min12 cm12
16:08:26  17  ,clse-min14 cm14
16:08:26  18  ,clse-min16 cm16
16:08:26  19  ,clse-min18 cm18
16:08:26  20  -- clse relation to moving-avg
16:08:26  21  ,clse-avg4  ca4
16:08:26  22  ,clse-avg6  ca6
16:08:26  23  ,clse-avg8  ca8
16:08:26  24  ,clse-avg10 ca10
16:08:26  25  ,clse-avg12 ca12
16:08:26  26  ,clse-avg14 ca14
16:08:26  27  ,clse-avg16 ca16
16:08:26  28  ,clse-avg18 ca18
16:08:26  29  -- clse relation to moving-max
16:08:26  30  ,clse-max4  cx4
16:08:26  31  ,clse-max6  cx6
16:08:26  32  ,clse-max8  cx8
16:08:26  33  ,clse-max10 cx10
16:08:26  34  ,clse-max12 cx12
16:08:26  35  ,clse-max14 cx14
16:08:26  36  ,clse-max16 cx16
16:08:26  37  ,clse-max18 cx18
16:08:26  38  -- Derive more attributes.
16:08:26  39  -- I want to use CORR() here to help SVM see the shape of the series.
16:08:26  40  -- But COVAR_POP is more stable:
16:08:26  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
16:08:26  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
16:08:26  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
16:08:26  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
16:08:26  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
16:08:26  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
16:08:26  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
16:08:26  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
16:08:26  49  -- Derive date related attributes:
16:08:26  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
16:08:26  51  ,0+TO_CHAR(ydate,'D')d
16:08:26  52  ,0+TO_CHAR(ydate,'W')w
16:08:26  53  -- mpm stands for minutes-past-midnight:
16:08:26  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
16:08:26  55  -- mph stands for minutes-past-hour:
16:08:26  56  ,0+TO_CHAR(ydate,'MI')mph
16:08:26  57  FROM svm6102
16:08:26  58  ORDER BY ydate
16:08:26  59  /

Table created.

Elapsed: 00:00:02.15
16:08:28 SQL> 
16:08:28 SQL> -- rpt
16:08:28 SQL> 
16:08:28 SQL> SELECT
16:08:28   2  pair
16:08:28   3  ,COUNT(pair)
16:08:28   4  ,MIN(clse),MAX(clse)
16:08:28   5  ,MIN(ydate),MAX(ydate)
16:08:28   6  FROM svm6122
16:08:28   7  GROUP BY pair
16:08:28   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19470	.95405	  1.02495 2010-10-03 20:55:01 2011-01-05 16:05:00

Elapsed: 00:00:00.04
16:08:28 SQL> 
16:08:28 SQL> -- Prepare for derivation of NTILE based params:
16:08:28 SQL> 
16:08:28 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.21
16:08:28 SQL> CREATE TABLE svm6142 COMPRESS AS
16:08:28   2  SELECT
16:08:28   3  pair
16:08:28   4  ,ydate
16:08:28   5  ,prdate
16:08:28   6  ,clse
16:08:28   7  ,g6
16:08:28   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
16:08:28   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
16:08:28  10  ,CASE WHEN trend IS NULL THEN 1
16:08:28  11  	    WHEN trend =0      THEN 1
16:08:28  12  	    ELSE trend END trend
16:08:28  13  ,cm4
16:08:28  14  ,cm6
16:08:28  15  ,cm8
16:08:28  16  ,cm10
16:08:28  17  ,cm12
16:08:28  18  ,cm14
16:08:28  19  ,cm16
16:08:28  20  ,cm18
16:08:28  21  --
16:08:28  22  ,ca4
16:08:28  23  ,ca6
16:08:28  24  ,ca8
16:08:28  25  ,ca10
16:08:28  26  ,ca12
16:08:28  27  ,ca14
16:08:28  28  ,ca16
16:08:28  29  ,ca18
16:08:28  30  --
16:08:28  31  ,cx4
16:08:28  32  ,cx6
16:08:28  33  ,cx8
16:08:28  34  ,cx10
16:08:28  35  ,cx12
16:08:28  36  ,cx14
16:08:28  37  ,cx16
16:08:28  38  ,cx18
16:08:28  39  --
16:08:28  40  ,crr4
16:08:28  41  ,crr6
16:08:28  42  ,crr8
16:08:28  43  ,crr10
16:08:28  44  ,crr12
16:08:28  45  ,crr14
16:08:28  46  ,crr16
16:08:28  47  ,crr18
16:08:28  48  --
16:08:28  49  ,hh
16:08:28  50  ,d
16:08:28  51  ,w
16:08:28  52  ,mpm
16:08:28  53  ,mph
16:08:28  54  FROM svm6122
16:08:28  55  ORDER BY ydate
16:08:28  56  /

Table created.

Elapsed: 00:00:00.38
16:08:29 SQL> 
16:08:29 SQL> -- rpt
16:08:29 SQL> 
16:08:29 SQL> SELECT
16:08:29   2  pair
16:08:29   3  ,trend
16:08:29   4  ,gatt
16:08:29   5  ,COUNT(pair)
16:08:29   6  ,AVG(g6)
16:08:29   7  FROM svm6142
16:08:29   8  GROUP BY pair,trend,gatt
16:08:29   9  ORDER BY pair,trend,gatt
16:08:29  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5538 -.00219392
aud_usd 	-1 up	      3646 .003769261
aud_usd 	-1		71
aud_usd 	 1 nup	      6621 -.00213267
aud_usd 	 1 up	      3593 .004054752
aud_usd 	 1		 1

6 rows selected.

Elapsed: 00:00:00.04
16:08:29 SQL> 
16:08:29 SQL> 
16:08:29 SQL> -- Derive NTILE based params:
16:08:29 SQL> 
16:08:29 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.17
16:08:29 SQL> CREATE TABLE svm6162 COMPRESS AS
16:08:29   2  SELECT
16:08:29   3  pair
16:08:29   4  ,ydate
16:08:29   5  ,prdate
16:08:29   6  ,clse
16:08:29   7  ,g6
16:08:29   8  ,gatt
16:08:29   9  ,gattn
16:08:29  10  ,trend
16:08:29  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
16:08:29  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
16:08:29  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
16:08:29  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
16:08:29  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
16:08:29  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
16:08:29  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
16:08:29  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
16:08:29  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
16:08:29  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
16:08:29  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
16:08:29  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
16:08:29  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
16:08:29  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
16:08:29  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
16:08:29  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
16:08:29  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
16:08:29  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
16:08:29  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
16:08:29  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
16:08:29  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
16:08:29  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
16:08:29  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
16:08:29  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
16:08:29  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
16:08:29  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
16:08:29  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
16:08:29  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
16:08:29  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
16:08:29  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
16:08:29  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
16:08:29  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
16:08:29  43  ,hh  att32
16:08:29  44  ,d   att33
16:08:29  45  ,w   att34
16:08:29  46  ,mpm att35
16:08:29  47  ,mph att36
16:08:29  48  ,trend att37
16:08:29  49  FROM svm6142
16:08:29  50  ORDER BY ydate
16:08:29  51  /

Table created.

Elapsed: 00:00:05.40
16:08:34 SQL> 
16:08:34 SQL> -- rpt
16:08:34 SQL> 
16:08:34 SQL> SELECT
16:08:34   2  pair
16:08:34   3  ,trend
16:08:34   4  ,gatt
16:08:34   5  ,COUNT(pair)
16:08:34   6  ,AVG(g6)
16:08:34   7  FROM svm6162
16:08:34   8  GROUP BY pair,trend,gatt
16:08:34   9  ORDER BY pair,trend,gatt
16:08:34  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5538 -.00219392
aud_usd 	-1 up	      3646 .003769261
aud_usd 	-1		71
aud_usd 	 1 nup	      6621 -.00213267
aud_usd 	 1 up	      3593 .004054752
aud_usd 	 1		 1

6 rows selected.

Elapsed: 00:00:00.03
16:08:34 SQL> 
16:08:34 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.35
16:08:35 SQL> CREATE TABLE modsrc COMPRESS AS
16:08:35   2  SELECT
16:08:35   3  pair
16:08:35   4  ,ydate
16:08:35   5  ,prdate
16:08:35   6  ,trend
16:08:35   7  ,g6
16:08:35   8  ,gatt
16:08:35   9  ,gattn
16:08:35  10  FROM svm6162
16:08:35  11  /

Table created.

Elapsed: 00:00:00.09
16:08:35 SQL> 
16:08:35 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
16:08:35 SQL> 
16:08:35 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
16:08:35 SQL> CREATE TABLE aud_ms610 COMPRESS AS
16:08:35   2  SELECT
16:08:35   3  ydate
16:08:35   4  ,trend aud_trend
16:08:35   5  ,g6    aud_g6
16:08:35   6  ,gatt  aud_gatt
16:08:35   7  ,gattn aud_gattn
16:08:35   8  FROM modsrc
16:08:35   9  /

Table created.

Elapsed: 00:00:00.07
16:08:35 SQL> 
16:08:35 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
16:08:35 SQL> 
16:08:35 SQL> -- I need a copy of the attributes:
16:08:35 SQL> 
16:08:35 SQL> 
16:08:35 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.06
16:08:35 SQL> CREATE TABLE aud_att COMPRESS AS
16:08:35   2  SELECT
16:08:35   3  ydate
16:08:35   4  ,att00 aud_att00
16:08:35   5  ,att01 aud_att01
16:08:35   6  ,att02 aud_att02
16:08:35   7  ,att03 aud_att03
16:08:35   8  ,att04 aud_att04
16:08:35   9  ,att05 aud_att05
16:08:35  10  ,att06 aud_att06
16:08:35  11  ,att07 aud_att07
16:08:35  12  ,att08 aud_att08
16:08:35  13  ,att09 aud_att09
16:08:35  14  ,att10 aud_att10
16:08:35  15  ,att11 aud_att11
16:08:35  16  ,att12 aud_att12
16:08:35  17  ,att13 aud_att13
16:08:35  18  ,att14 aud_att14
16:08:35  19  ,att15 aud_att15
16:08:35  20  ,att16 aud_att16
16:08:35  21  ,att17 aud_att17
16:08:35  22  ,att18 aud_att18
16:08:35  23  ,att19 aud_att19
16:08:35  24  ,att20 aud_att20
16:08:35  25  ,att21 aud_att21
16:08:35  26  ,att22 aud_att22
16:08:35  27  ,att23 aud_att23
16:08:35  28  ,att24 aud_att24
16:08:35  29  ,att25 aud_att25
16:08:35  30  ,att26 aud_att26
16:08:35  31  ,att27 aud_att27
16:08:35  32  ,att28 aud_att28
16:08:35  33  ,att29 aud_att29
16:08:35  34  ,att30 aud_att30
16:08:35  35  ,att31 aud_att31
16:08:35  36  ,att32 aud_att32
16:08:35  37  ,att33 aud_att33
16:08:35  38  ,att34 aud_att34
16:08:35  39  ,att35 aud_att35
16:08:35  40  ,att36 aud_att36
16:08:35  41  ,att37 aud_att37
16:08:35  42  FROM svm6162
16:08:35  43  /

Table created.

Elapsed: 00:00:00.17
16:08:35 SQL> 
16:08:35 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
16:08:36 SQL> 
16:08:36 SQL> -- rpt
16:08:36 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19470

Elapsed: 00:00:00.86
16:08:37 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19470

Elapsed: 00:00:00.01
16:08:37 SQL> 
16:08:37 SQL> --
16:08:37 SQL> -- gbp610.sql
16:08:37 SQL> --
16:08:37 SQL> 
16:08:37 SQL> -- Creates views and tables for backtesting a forex SVM strategy
16:08:37 SQL> 
16:08:37 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.41
16:08:37 SQL> 
16:08:37 SQL> -- I created di5min here:
16:08:37 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
16:08:37 SQL> 
16:08:37 SQL> CREATE OR REPLACE VIEW svm6102 AS
16:08:37   2  SELECT
16:08:37   3  pair
16:08:37   4  ,ydate
16:08:37   5  ,prdate
16:08:37   6  ,rownum rnum -- acts as t in my time-series
16:08:37   7  ,clse
16:08:37   8  -- Derive a bunch of attributes from clse, the latest price:
16:08:37   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
16:08:37  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
16:08:37  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
16:08:37  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
16:08:37  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
16:08:37  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
16:08:37  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
16:08:37  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
16:08:37  17  --
16:08:37  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
16:08:37  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
16:08:37  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
16:08:37  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
16:08:37  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
16:08:37  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
16:08:37  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
16:08:37  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
16:08:37  26  --
16:08:37  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
16:08:37  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
16:08:37  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
16:08:37  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
16:08:37  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
16:08:37  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
16:08:37  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
16:08:37  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
16:08:37  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
16:08:37  36  FROM di5min WHERE pair LIKE'%gbp%'
16:08:37  37  AND ydate > sysdate - 95
16:08:37  38  ORDER BY ydate
16:08:37  39  /

View created.

Elapsed: 00:00:00.05
16:08:37 SQL> 
16:08:37 SQL> -- rpt
16:08:37 SQL> 
16:08:37 SQL> SELECT
16:08:37   2  pair
16:08:37   3  ,COUNT(pair)
16:08:37   4  ,MIN(clse),MAX(clse)
16:08:37   5  ,MIN(avg6),MAX(avg6)
16:08:37   6  ,MIN(ydate),MAX(ydate)
16:08:37   7  FROM svm6102
16:08:37   8  GROUP BY pair
16:08:37   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19472   1.535325	   1.6295 1.53696747 1.62716986 2010-10-03 20:55:01 2011-01-05 16:05:00

Elapsed: 00:00:00.88
16:08:38 SQL> 
16:08:38 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
16:08:38 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.27
16:08:38 SQL> CREATE TABLE svm6122 COMPRESS AS
16:08:38   2  SELECT
16:08:38   3  pair
16:08:38   4  ,ydate
16:08:38   5  ,prdate
16:08:38   6  ,clse
16:08:38   7  -- g6 is important. I want to predict g6:
16:08:38   8  ,ld6 - clse g6
16:08:38   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
16:08:38  10  -- I want more attributes from the ones I derived above:
16:08:38  11  -- clse relation to moving-min
16:08:38  12  ,clse-min4  cm4
16:08:38  13  ,clse-min6  cm6
16:08:38  14  ,clse-min8  cm8
16:08:38  15  ,clse-min10 cm10
16:08:38  16  ,clse-min12 cm12
16:08:38  17  ,clse-min14 cm14
16:08:38  18  ,clse-min16 cm16
16:08:38  19  ,clse-min18 cm18
16:08:38  20  -- clse relation to moving-avg
16:08:38  21  ,clse-avg4  ca4
16:08:38  22  ,clse-avg6  ca6
16:08:38  23  ,clse-avg8  ca8
16:08:38  24  ,clse-avg10 ca10
16:08:38  25  ,clse-avg12 ca12
16:08:38  26  ,clse-avg14 ca14
16:08:38  27  ,clse-avg16 ca16
16:08:38  28  ,clse-avg18 ca18
16:08:38  29  -- clse relation to moving-max
16:08:38  30  ,clse-max4  cx4
16:08:38  31  ,clse-max6  cx6
16:08:38  32  ,clse-max8  cx8
16:08:38  33  ,clse-max10 cx10
16:08:38  34  ,clse-max12 cx12
16:08:38  35  ,clse-max14 cx14
16:08:38  36  ,clse-max16 cx16
16:08:38  37  ,clse-max18 cx18
16:08:38  38  -- Derive more attributes.
16:08:38  39  -- I want to use CORR() here to help SVM see the shape of the series.
16:08:38  40  -- But COVAR_POP is more stable:
16:08:38  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
16:08:38  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
16:08:38  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
16:08:38  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
16:08:38  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
16:08:38  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
16:08:38  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
16:08:38  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
16:08:38  49  -- Derive date related attributes:
16:08:38  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
16:08:38  51  ,0+TO_CHAR(ydate,'D')d
16:08:38  52  ,0+TO_CHAR(ydate,'W')w
16:08:38  53  -- mpm stands for minutes-past-midnight:
16:08:38  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
16:08:38  55  -- mph stands for minutes-past-hour:
16:08:38  56  ,0+TO_CHAR(ydate,'MI')mph
16:08:38  57  FROM svm6102
16:08:38  58  ORDER BY ydate
16:08:38  59  /

Table created.

Elapsed: 00:00:02.12
16:08:40 SQL> 
16:08:40 SQL> -- rpt
16:08:40 SQL> 
16:08:40 SQL> SELECT
16:08:40   2  pair
16:08:40   3  ,COUNT(pair)
16:08:40   4  ,MIN(clse),MAX(clse)
16:08:40   5  ,MIN(ydate),MAX(ydate)
16:08:40   6  FROM svm6122
16:08:40   7  GROUP BY pair
16:08:40   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19472   1.535325	   1.6295 2010-10-03 20:55:01 2011-01-05 16:05:00

Elapsed: 00:00:00.04
16:08:41 SQL> 
16:08:41 SQL> -- Prepare for derivation of NTILE based params:
16:08:41 SQL> 
16:08:41 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.32
16:08:41 SQL> CREATE TABLE svm6142 COMPRESS AS
16:08:41   2  SELECT
16:08:41   3  pair
16:08:41   4  ,ydate
16:08:41   5  ,prdate
16:08:41   6  ,clse
16:08:41   7  ,g6
16:08:41   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
16:08:41   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
16:08:41  10  ,CASE WHEN trend IS NULL THEN 1
16:08:41  11  	    WHEN trend =0      THEN 1
16:08:41  12  	    ELSE trend END trend
16:08:41  13  ,cm4
16:08:41  14  ,cm6
16:08:41  15  ,cm8
16:08:41  16  ,cm10
16:08:41  17  ,cm12
16:08:41  18  ,cm14
16:08:41  19  ,cm16
16:08:41  20  ,cm18
16:08:41  21  --
16:08:41  22  ,ca4
16:08:41  23  ,ca6
16:08:41  24  ,ca8
16:08:41  25  ,ca10
16:08:41  26  ,ca12
16:08:41  27  ,ca14
16:08:41  28  ,ca16
16:08:41  29  ,ca18
16:08:41  30  --
16:08:41  31  ,cx4
16:08:41  32  ,cx6
16:08:41  33  ,cx8
16:08:41  34  ,cx10
16:08:41  35  ,cx12
16:08:41  36  ,cx14
16:08:41  37  ,cx16
16:08:41  38  ,cx18
16:08:41  39  --
16:08:41  40  ,crr4
16:08:41  41  ,crr6
16:08:41  42  ,crr8
16:08:41  43  ,crr10
16:08:41  44  ,crr12
16:08:41  45  ,crr14
16:08:41  46  ,crr16
16:08:41  47  ,crr18
16:08:41  48  --
16:08:41  49  ,hh
16:08:41  50  ,d
16:08:41  51  ,w
16:08:41  52  ,mpm
16:08:41  53  ,mph
16:08:41  54  FROM svm6122
16:08:41  55  ORDER BY ydate
16:08:41  56  /

Table created.

Elapsed: 00:00:00.37
16:08:41 SQL> 
16:08:41 SQL> -- rpt
16:08:41 SQL> 
16:08:41 SQL> SELECT
16:08:41   2  pair
16:08:41   3  ,trend
16:08:41   4  ,gatt
16:08:41   5  ,COUNT(pair)
16:08:41   6  ,AVG(g6)
16:08:41   7  FROM svm6142
16:08:41   8  GROUP BY pair,trend,gatt
16:08:41   9  ORDER BY pair,trend,gatt
16:08:41  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6317 -.00264333
gbp_usd 	-1 up	      3510 .004373914
gbp_usd 	-1		34
gbp_usd 	 1 nup	      6133 -.00263497
gbp_usd 	 1 up	      3440 .004531722
gbp_usd 	 1		38

6 rows selected.

Elapsed: 00:00:00.03
16:08:41 SQL> 
16:08:41 SQL> 
16:08:41 SQL> -- Derive NTILE based params:
16:08:41 SQL> 
16:08:41 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.21
16:08:41 SQL> CREATE TABLE svm6162 COMPRESS AS
16:08:41   2  SELECT
16:08:41   3  pair
16:08:41   4  ,ydate
16:08:41   5  ,prdate
16:08:41   6  ,clse
16:08:41   7  ,g6
16:08:41   8  ,gatt
16:08:41   9  ,gattn
16:08:41  10  ,trend
16:08:41  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
16:08:41  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
16:08:41  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
16:08:41  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
16:08:41  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
16:08:41  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
16:08:41  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
16:08:41  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
16:08:41  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
16:08:41  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
16:08:41  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
16:08:41  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
16:08:41  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
16:08:41  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
16:08:41  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
16:08:41  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
16:08:41  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
16:08:41  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
16:08:41  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
16:08:41  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
16:08:41  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
16:08:41  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
16:08:41  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
16:08:41  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
16:08:41  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
16:08:41  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
16:08:41  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
16:08:41  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
16:08:41  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
16:08:41  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
16:08:41  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
16:08:41  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
16:08:41  43  ,hh  att32
16:08:41  44  ,d   att33
16:08:41  45  ,w   att34
16:08:41  46  ,mpm att35
16:08:41  47  ,mph att36
16:08:41  48  ,trend att37
16:08:41  49  FROM svm6142
16:08:41  50  ORDER BY ydate
16:08:41  51  /

Table created.

Elapsed: 00:00:04.75
16:08:46 SQL> 
16:08:46 SQL> -- rpt
16:08:46 SQL> 
16:08:46 SQL> SELECT
16:08:46   2  pair
16:08:46   3  ,trend
16:08:46   4  ,gatt
16:08:46   5  ,COUNT(pair)
16:08:46   6  ,AVG(g6)
16:08:46   7  FROM svm6162
16:08:46   8  GROUP BY pair,trend,gatt
16:08:46   9  ORDER BY pair,trend,gatt
16:08:46  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6317 -.00264333
gbp_usd 	-1 up	      3510 .004373914
gbp_usd 	-1		34
gbp_usd 	 1 nup	      6133 -.00263497
gbp_usd 	 1 up	      3440 .004531722
gbp_usd 	 1		38

6 rows selected.

Elapsed: 00:00:00.03
16:08:46 SQL> 
16:08:46 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
16:08:46 SQL> CREATE TABLE modsrc COMPRESS AS
16:08:46   2  SELECT
16:08:46   3  pair
16:08:46   4  ,ydate
16:08:46   5  ,prdate
16:08:46   6  ,trend
16:08:46   7  ,g6
16:08:46   8  ,gatt
16:08:46   9  ,gattn
16:08:46  10  FROM svm6162
16:08:46  11  /

Table created.

Elapsed: 00:00:00.08
16:08:46 SQL> 
16:08:46 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
16:08:47 SQL> 
16:08:47 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
16:08:47 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
16:08:47   2  SELECT
16:08:47   3  ydate
16:08:47   4  ,trend gbp_trend
16:08:47   5  ,g6    gbp_g6
16:08:47   6  ,gatt  gbp_gatt
16:08:47   7  ,gattn gbp_gattn
16:08:47   8  FROM modsrc
16:08:47   9  /

Table created.

Elapsed: 00:00:00.08
16:08:47 SQL> 
16:08:47 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
16:08:47 SQL> 
16:08:47 SQL> -- I need a copy of the attributes:
16:08:47 SQL> 
16:08:47 SQL> 
16:08:47 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.04
16:08:47 SQL> CREATE TABLE gbp_att COMPRESS AS
16:08:47   2  SELECT
16:08:47   3  ydate
16:08:47   4  ,att00 gbp_att00
16:08:47   5  ,att01 gbp_att01
16:08:47   6  ,att02 gbp_att02
16:08:47   7  ,att03 gbp_att03
16:08:47   8  ,att04 gbp_att04
16:08:47   9  ,att05 gbp_att05
16:08:47  10  ,att06 gbp_att06
16:08:47  11  ,att07 gbp_att07
16:08:47  12  ,att08 gbp_att08
16:08:47  13  ,att09 gbp_att09
16:08:47  14  ,att10 gbp_att10
16:08:47  15  ,att11 gbp_att11
16:08:47  16  ,att12 gbp_att12
16:08:47  17  ,att13 gbp_att13
16:08:47  18  ,att14 gbp_att14
16:08:47  19  ,att15 gbp_att15
16:08:47  20  ,att16 gbp_att16
16:08:47  21  ,att17 gbp_att17
16:08:47  22  ,att18 gbp_att18
16:08:47  23  ,att19 gbp_att19
16:08:47  24  ,att20 gbp_att20
16:08:47  25  ,att21 gbp_att21
16:08:47  26  ,att22 gbp_att22
16:08:47  27  ,att23 gbp_att23
16:08:47  28  ,att24 gbp_att24
16:08:47  29  ,att25 gbp_att25
16:08:47  30  ,att26 gbp_att26
16:08:47  31  ,att27 gbp_att27
16:08:47  32  ,att28 gbp_att28
16:08:47  33  ,att29 gbp_att29
16:08:47  34  ,att30 gbp_att30
16:08:47  35  ,att31 gbp_att31
16:08:47  36  ,att32 gbp_att32
16:08:47  37  ,att33 gbp_att33
16:08:47  38  ,att34 gbp_att34
16:08:47  39  ,att35 gbp_att35
16:08:47  40  ,att36 gbp_att36
16:08:47  41  ,att37 gbp_att37
16:08:47  42  FROM svm6162
16:08:47  43  /

Table created.

Elapsed: 00:00:00.16
16:08:47 SQL> 
16:08:47 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
16:08:48 SQL> 
16:08:48 SQL> -- rpt
16:08:48 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19472

Elapsed: 00:00:00.87
16:08:48 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19472

Elapsed: 00:00:00.00
16:08:48 SQL> 
16:08:48 SQL> --
16:08:48 SQL> -- jpy610.sql
16:08:48 SQL> --
16:08:48 SQL> 
16:08:48 SQL> -- Creates views and tables for backtesting a forex SVM strategy
16:08:48 SQL> 
16:08:48 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.48
16:08:49 SQL> 
16:08:49 SQL> -- I created di5min here:
16:08:49 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
16:08:49 SQL> 
16:08:49 SQL> CREATE OR REPLACE VIEW svm6102 AS
16:08:49   2  SELECT
16:08:49   3  pair
16:08:49   4  ,ydate
16:08:49   5  ,prdate
16:08:49   6  ,rownum rnum -- acts as t in my time-series
16:08:49   7  ,clse
16:08:49   8  -- Derive a bunch of attributes from clse, the latest price:
16:08:49   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
16:08:49  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
16:08:49  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
16:08:49  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
16:08:49  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
16:08:49  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
16:08:49  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
16:08:49  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
16:08:49  17  --
16:08:49  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
16:08:49  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
16:08:49  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
16:08:49  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
16:08:49  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
16:08:49  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
16:08:49  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
16:08:49  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
16:08:49  26  --
16:08:49  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
16:08:49  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
16:08:49  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
16:08:49  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
16:08:49  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
16:08:49  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
16:08:49  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
16:08:49  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
16:08:49  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
16:08:49  36  FROM di5min WHERE pair LIKE'%jpy%'
16:08:49  37  AND ydate > sysdate - 95
16:08:49  38  ORDER BY ydate
16:08:49  39  /

View created.

Elapsed: 00:00:00.04
16:08:49 SQL> 
16:08:49 SQL> -- rpt
16:08:49 SQL> 
16:08:49 SQL> SELECT
16:08:49   2  pair
16:08:49   3  ,COUNT(pair)
16:08:49   4  ,MIN(clse),MAX(clse)
16:08:49   5  ,MIN(avg6),MAX(avg6)
16:08:49   6  ,MIN(ydate),MAX(ydate)
16:08:49   7  FROM svm6102
16:08:49   8  GROUP BY pair
16:08:49   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19470	 80.25	   84.485 80.3595205 84.3105479 2010-10-03 20:55:01 2011-01-05 16:05:00

Elapsed: 00:00:00.92
16:08:50 SQL> 
16:08:50 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
16:08:50 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.29
16:08:50 SQL> CREATE TABLE svm6122 COMPRESS AS
16:08:50   2  SELECT
16:08:50   3  pair
16:08:50   4  ,ydate
16:08:50   5  ,prdate
16:08:50   6  ,clse
16:08:50   7  -- g6 is important. I want to predict g6:
16:08:50   8  ,ld6 - clse g6
16:08:50   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
16:08:50  10  -- I want more attributes from the ones I derived above:
16:08:50  11  -- clse relation to moving-min
16:08:50  12  ,clse-min4  cm4
16:08:50  13  ,clse-min6  cm6
16:08:50  14  ,clse-min8  cm8
16:08:50  15  ,clse-min10 cm10
16:08:50  16  ,clse-min12 cm12
16:08:50  17  ,clse-min14 cm14
16:08:50  18  ,clse-min16 cm16
16:08:50  19  ,clse-min18 cm18
16:08:50  20  -- clse relation to moving-avg
16:08:50  21  ,clse-avg4  ca4
16:08:50  22  ,clse-avg6  ca6
16:08:50  23  ,clse-avg8  ca8
16:08:50  24  ,clse-avg10 ca10
16:08:50  25  ,clse-avg12 ca12
16:08:50  26  ,clse-avg14 ca14
16:08:50  27  ,clse-avg16 ca16
16:08:50  28  ,clse-avg18 ca18
16:08:50  29  -- clse relation to moving-max
16:08:50  30  ,clse-max4  cx4
16:08:50  31  ,clse-max6  cx6
16:08:50  32  ,clse-max8  cx8
16:08:50  33  ,clse-max10 cx10
16:08:50  34  ,clse-max12 cx12
16:08:50  35  ,clse-max14 cx14
16:08:50  36  ,clse-max16 cx16
16:08:50  37  ,clse-max18 cx18
16:08:50  38  -- Derive more attributes.
16:08:50  39  -- I want to use CORR() here to help SVM see the shape of the series.
16:08:50  40  -- But COVAR_POP is more stable:
16:08:50  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
16:08:50  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
16:08:50  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
16:08:50  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
16:08:50  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
16:08:50  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
16:08:50  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
16:08:50  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
16:08:50  49  -- Derive date related attributes:
16:08:50  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
16:08:50  51  ,0+TO_CHAR(ydate,'D')d
16:08:50  52  ,0+TO_CHAR(ydate,'W')w
16:08:50  53  -- mpm stands for minutes-past-midnight:
16:08:50  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
16:08:50  55  -- mph stands for minutes-past-hour:
16:08:50  56  ,0+TO_CHAR(ydate,'MI')mph
16:08:50  57  FROM svm6102
16:08:50  58  ORDER BY ydate
16:08:50  59  /

Table created.

Elapsed: 00:00:02.21
16:08:52 SQL> 
16:08:52 SQL> -- rpt
16:08:52 SQL> 
16:08:52 SQL> SELECT
16:08:52   2  pair
16:08:52   3  ,COUNT(pair)
16:08:52   4  ,MIN(clse),MAX(clse)
16:08:52   5  ,MIN(ydate),MAX(ydate)
16:08:52   6  FROM svm6122
16:08:52   7  GROUP BY pair
16:08:52   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19470	 80.25	   84.485 2010-10-03 20:55:01 2011-01-05 16:05:00

Elapsed: 00:00:00.04
16:08:52 SQL> 
16:08:52 SQL> -- Prepare for derivation of NTILE based params:
16:08:52 SQL> 
16:08:52 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.21
16:08:53 SQL> CREATE TABLE svm6142 COMPRESS AS
16:08:53   2  SELECT
16:08:53   3  pair
16:08:53   4  ,ydate
16:08:53   5  ,prdate
16:08:53   6  ,clse
16:08:53   7  ,g6
16:08:53   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
16:08:53   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
16:08:53  10  ,CASE WHEN trend IS NULL THEN 1
16:08:53  11  	    WHEN trend =0      THEN 1
16:08:53  12  	    ELSE trend END trend
16:08:53  13  ,cm4
16:08:53  14  ,cm6
16:08:53  15  ,cm8
16:08:53  16  ,cm10
16:08:53  17  ,cm12
16:08:53  18  ,cm14
16:08:53  19  ,cm16
16:08:53  20  ,cm18
16:08:53  21  --
16:08:53  22  ,ca4
16:08:53  23  ,ca6
16:08:53  24  ,ca8
16:08:53  25  ,ca10
16:08:53  26  ,ca12
16:08:53  27  ,ca14
16:08:53  28  ,ca16
16:08:53  29  ,ca18
16:08:53  30  --
16:08:53  31  ,cx4
16:08:53  32  ,cx6
16:08:53  33  ,cx8
16:08:53  34  ,cx10
16:08:53  35  ,cx12
16:08:53  36  ,cx14
16:08:53  37  ,cx16
16:08:53  38  ,cx18
16:08:53  39  --
16:08:53  40  ,crr4
16:08:53  41  ,crr6
16:08:53  42  ,crr8
16:08:53  43  ,crr10
16:08:53  44  ,crr12
16:08:53  45  ,crr14
16:08:53  46  ,crr16
16:08:53  47  ,crr18
16:08:53  48  --
16:08:53  49  ,hh
16:08:53  50  ,d
16:08:53  51  ,w
16:08:53  52  ,mpm
16:08:53  53  ,mph
16:08:53  54  FROM svm6122
16:08:53  55  ORDER BY ydate
16:08:53  56  /

Table created.

Elapsed: 00:00:00.38
16:08:53 SQL> 
16:08:53 SQL> -- rpt
16:08:53 SQL> 
16:08:53 SQL> SELECT
16:08:53   2  pair
16:08:53   3  ,trend
16:08:53   4  ,gatt
16:08:53   5  ,COUNT(pair)
16:08:53   6  ,AVG(g6)
16:08:53   7  FROM svm6142
16:08:53   8  GROUP BY pair,trend,gatt
16:08:53   9  ORDER BY pair,trend,gatt
16:08:53  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5111 -.16664378
usd_jpy 	-1 up	      4836 .170117642
usd_jpy 	-1		 2
usd_jpy 	 1 nup	      4993  -.1561771
usd_jpy 	 1 up	      4458 .168145678
usd_jpy 	 1		70

6 rows selected.

Elapsed: 00:00:00.03
16:08:53 SQL> 
16:08:53 SQL> 
16:08:53 SQL> -- Derive NTILE based params:
16:08:53 SQL> 
16:08:53 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.23
16:08:53 SQL> CREATE TABLE svm6162 COMPRESS AS
16:08:53   2  SELECT
16:08:53   3  pair
16:08:53   4  ,ydate
16:08:53   5  ,prdate
16:08:53   6  ,clse
16:08:53   7  ,g6
16:08:53   8  ,gatt
16:08:53   9  ,gattn
16:08:53  10  ,trend
16:08:53  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
16:08:53  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
16:08:53  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
16:08:53  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
16:08:53  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
16:08:53  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
16:08:53  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
16:08:53  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
16:08:53  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
16:08:53  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
16:08:53  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
16:08:53  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
16:08:53  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
16:08:53  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
16:08:53  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
16:08:53  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
16:08:53  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
16:08:53  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
16:08:53  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
16:08:53  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
16:08:53  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
16:08:53  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
16:08:53  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
16:08:53  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
16:08:53  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
16:08:53  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
16:08:53  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
16:08:53  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
16:08:53  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
16:08:53  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
16:08:53  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
16:08:53  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
16:08:53  43  ,hh  att32
16:08:53  44  ,d   att33
16:08:53  45  ,w   att34
16:08:53  46  ,mpm att35
16:08:53  47  ,mph att36
16:08:53  48  ,trend att37
16:08:53  49  FROM svm6142
16:08:53  50  ORDER BY ydate
16:08:53  51  /

Table created.

Elapsed: 00:00:04.77
16:08:58 SQL> 
16:08:58 SQL> -- rpt
16:08:58 SQL> 
16:08:58 SQL> SELECT
16:08:58   2  pair
16:08:58   3  ,trend
16:08:58   4  ,gatt
16:08:58   5  ,COUNT(pair)
16:08:58   6  ,AVG(g6)
16:08:58   7  FROM svm6162
16:08:58   8  GROUP BY pair,trend,gatt
16:08:58   9  ORDER BY pair,trend,gatt
16:08:58  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5111 -.16664378
usd_jpy 	-1 up	      4836 .170117642
usd_jpy 	-1		 2
usd_jpy 	 1 nup	      4993  -.1561771
usd_jpy 	 1 up	      4458 .168145678
usd_jpy 	 1		70

6 rows selected.

Elapsed: 00:00:00.03
16:08:58 SQL> 
16:08:58 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.14
16:08:58 SQL> CREATE TABLE modsrc COMPRESS AS
16:08:58   2  SELECT
16:08:58   3  pair
16:08:58   4  ,ydate
16:08:58   5  ,prdate
16:08:58   6  ,trend
16:08:58   7  ,g6
16:08:58   8  ,gatt
16:08:58   9  ,gattn
16:08:58  10  FROM svm6162
16:08:58  11  /

Table created.

Elapsed: 00:00:00.08
16:08:58 SQL> 
16:08:58 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
16:08:59 SQL> 
16:08:59 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
16:08:59 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
16:08:59   2  SELECT
16:08:59   3  ydate
16:08:59   4  ,trend jpy_trend
16:08:59   5  ,g6    jpy_g6
16:08:59   6  ,gatt  jpy_gatt
16:08:59   7  ,gattn jpy_gattn
16:08:59   8  FROM modsrc
16:08:59   9  /

Table created.

Elapsed: 00:00:00.07
16:08:59 SQL> 
16:08:59 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
16:08:59 SQL> 
16:08:59 SQL> -- I need a copy of the attributes:
16:08:59 SQL> 
16:08:59 SQL> 
16:08:59 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.13
16:08:59 SQL> CREATE TABLE jpy_att COMPRESS AS
16:08:59   2  SELECT
16:08:59   3  ydate
16:08:59   4  ,att00 jpy_att00
16:08:59   5  ,att01 jpy_att01
16:08:59   6  ,att02 jpy_att02
16:08:59   7  ,att03 jpy_att03
16:08:59   8  ,att04 jpy_att04
16:08:59   9  ,att05 jpy_att05
16:08:59  10  ,att06 jpy_att06
16:08:59  11  ,att07 jpy_att07
16:08:59  12  ,att08 jpy_att08
16:08:59  13  ,att09 jpy_att09
16:08:59  14  ,att10 jpy_att10
16:08:59  15  ,att11 jpy_att11
16:08:59  16  ,att12 jpy_att12
16:08:59  17  ,att13 jpy_att13
16:08:59  18  ,att14 jpy_att14
16:08:59  19  ,att15 jpy_att15
16:08:59  20  ,att16 jpy_att16
16:08:59  21  ,att17 jpy_att17
16:08:59  22  ,att18 jpy_att18
16:08:59  23  ,att19 jpy_att19
16:08:59  24  ,att20 jpy_att20
16:08:59  25  ,att21 jpy_att21
16:08:59  26  ,att22 jpy_att22
16:08:59  27  ,att23 jpy_att23
16:08:59  28  ,att24 jpy_att24
16:08:59  29  ,att25 jpy_att25
16:08:59  30  ,att26 jpy_att26
16:08:59  31  ,att27 jpy_att27
16:08:59  32  ,att28 jpy_att28
16:08:59  33  ,att29 jpy_att29
16:08:59  34  ,att30 jpy_att30
16:08:59  35  ,att31 jpy_att31
16:08:59  36  ,att32 jpy_att32
16:08:59  37  ,att33 jpy_att33
16:08:59  38  ,att34 jpy_att34
16:08:59  39  ,att35 jpy_att35
16:08:59  40  ,att36 jpy_att36
16:08:59  41  ,att37 jpy_att37
16:08:59  42  FROM svm6162
16:08:59  43  /

Table created.

Elapsed: 00:00:00.19
16:08:59 SQL> 
16:08:59 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
16:09:00 SQL> 
16:09:00 SQL> -- rpt
16:09:00 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19470

Elapsed: 00:00:00.90
16:09:01 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19470

Elapsed: 00:00:00.01
16:09:01 SQL> 
16:09:01 SQL> --
16:09:01 SQL> -- cad610.sql
16:09:01 SQL> --
16:09:01 SQL> 
16:09:01 SQL> -- Creates views and tables for backtesting a forex SVM strategy
16:09:01 SQL> 
16:09:01 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.54
16:09:01 SQL> 
16:09:01 SQL> -- I created di5min here:
16:09:01 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
16:09:01 SQL> 
16:09:01 SQL> CREATE OR REPLACE VIEW svm6102 AS
16:09:01   2  SELECT
16:09:01   3  pair
16:09:01   4  ,ydate
16:09:01   5  ,prdate
16:09:01   6  ,rownum rnum -- acts as t in my time-series
16:09:01   7  ,clse
16:09:01   8  -- Derive a bunch of attributes from clse, the latest price:
16:09:01   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
16:09:01  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
16:09:01  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
16:09:01  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
16:09:01  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
16:09:01  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
16:09:01  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
16:09:01  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
16:09:01  17  --
16:09:01  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
16:09:01  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
16:09:01  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
16:09:01  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
16:09:01  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
16:09:01  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
16:09:01  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
16:09:01  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
16:09:01  26  --
16:09:01  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
16:09:01  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
16:09:01  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
16:09:01  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
16:09:01  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
16:09:01  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
16:09:01  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
16:09:01  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
16:09:01  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
16:09:01  36  FROM di5min WHERE pair LIKE'%cad%'
16:09:01  37  AND ydate > sysdate - 95
16:09:01  38  ORDER BY ydate
16:09:01  39  /

View created.

Elapsed: 00:00:00.05
16:09:01 SQL> 
16:09:01 SQL> -- rpt
16:09:01 SQL> 
16:09:01 SQL> SELECT
16:09:01   2  pair
16:09:01   3  ,COUNT(pair)
16:09:01   4  ,MIN(clse),MAX(clse)
16:09:01   5  ,MIN(avg6),MAX(avg6)
16:09:01   6  ,MIN(ydate),MAX(ydate)
16:09:01   7  FROM svm6102
16:09:01   8  GROUP BY pair
16:09:01   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19470    .988925	   1.0355 .990603938 1.03282877 2010-10-03 20:55:01 2011-01-05 16:05:00

Elapsed: 00:00:00.85
16:09:02 SQL> 
16:09:02 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
16:09:02 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.32
16:09:02 SQL> CREATE TABLE svm6122 COMPRESS AS
16:09:02   2  SELECT
16:09:02   3  pair
16:09:02   4  ,ydate
16:09:02   5  ,prdate
16:09:02   6  ,clse
16:09:02   7  -- g6 is important. I want to predict g6:
16:09:02   8  ,ld6 - clse g6
16:09:02   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
16:09:02  10  -- I want more attributes from the ones I derived above:
16:09:02  11  -- clse relation to moving-min
16:09:02  12  ,clse-min4  cm4
16:09:02  13  ,clse-min6  cm6
16:09:02  14  ,clse-min8  cm8
16:09:02  15  ,clse-min10 cm10
16:09:02  16  ,clse-min12 cm12
16:09:02  17  ,clse-min14 cm14
16:09:02  18  ,clse-min16 cm16
16:09:02  19  ,clse-min18 cm18
16:09:02  20  -- clse relation to moving-avg
16:09:02  21  ,clse-avg4  ca4
16:09:02  22  ,clse-avg6  ca6
16:09:02  23  ,clse-avg8  ca8
16:09:02  24  ,clse-avg10 ca10
16:09:02  25  ,clse-avg12 ca12
16:09:02  26  ,clse-avg14 ca14
16:09:02  27  ,clse-avg16 ca16
16:09:02  28  ,clse-avg18 ca18
16:09:02  29  -- clse relation to moving-max
16:09:02  30  ,clse-max4  cx4
16:09:02  31  ,clse-max6  cx6
16:09:02  32  ,clse-max8  cx8
16:09:02  33  ,clse-max10 cx10
16:09:02  34  ,clse-max12 cx12
16:09:02  35  ,clse-max14 cx14
16:09:02  36  ,clse-max16 cx16
16:09:02  37  ,clse-max18 cx18
16:09:02  38  -- Derive more attributes.
16:09:02  39  -- I want to use CORR() here to help SVM see the shape of the series.
16:09:02  40  -- But COVAR_POP is more stable:
16:09:02  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
16:09:02  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
16:09:02  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
16:09:02  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
16:09:02  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
16:09:02  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
16:09:02  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
16:09:02  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
16:09:02  49  -- Derive date related attributes:
16:09:02  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
16:09:02  51  ,0+TO_CHAR(ydate,'D')d
16:09:02  52  ,0+TO_CHAR(ydate,'W')w
16:09:02  53  -- mpm stands for minutes-past-midnight:
16:09:02  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
16:09:02  55  -- mph stands for minutes-past-hour:
16:09:02  56  ,0+TO_CHAR(ydate,'MI')mph
16:09:02  57  FROM svm6102
16:09:02  58  ORDER BY ydate
16:09:02  59  /

Table created.

Elapsed: 00:00:02.07
16:09:04 SQL> 
16:09:04 SQL> -- rpt
16:09:04 SQL> 
16:09:04 SQL> SELECT
16:09:04   2  pair
16:09:04   3  ,COUNT(pair)
16:09:04   4  ,MIN(clse),MAX(clse)
16:09:04   5  ,MIN(ydate),MAX(ydate)
16:09:04   6  FROM svm6122
16:09:04   7  GROUP BY pair
16:09:04   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19470    .988925	   1.0355 2010-10-03 20:55:01 2011-01-05 16:05:00

Elapsed: 00:00:00.05
16:09:04 SQL> 
16:09:04 SQL> -- Prepare for derivation of NTILE based params:
16:09:04 SQL> 
16:09:04 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.22
16:09:05 SQL> CREATE TABLE svm6142 COMPRESS AS
16:09:05   2  SELECT
16:09:05   3  pair
16:09:05   4  ,ydate
16:09:05   5  ,prdate
16:09:05   6  ,clse
16:09:05   7  ,g6
16:09:05   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
16:09:05   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
16:09:05  10  ,CASE WHEN trend IS NULL THEN 1
16:09:05  11  	    WHEN trend =0      THEN 1
16:09:05  12  	    ELSE trend END trend
16:09:05  13  ,cm4
16:09:05  14  ,cm6
16:09:05  15  ,cm8
16:09:05  16  ,cm10
16:09:05  17  ,cm12
16:09:05  18  ,cm14
16:09:05  19  ,cm16
16:09:05  20  ,cm18
16:09:05  21  --
16:09:05  22  ,ca4
16:09:05  23  ,ca6
16:09:05  24  ,ca8
16:09:05  25  ,ca10
16:09:05  26  ,ca12
16:09:05  27  ,ca14
16:09:05  28  ,ca16
16:09:05  29  ,ca18
16:09:05  30  --
16:09:05  31  ,cx4
16:09:05  32  ,cx6
16:09:05  33  ,cx8
16:09:05  34  ,cx10
16:09:05  35  ,cx12
16:09:05  36  ,cx14
16:09:05  37  ,cx16
16:09:05  38  ,cx18
16:09:05  39  --
16:09:05  40  ,crr4
16:09:05  41  ,crr6
16:09:05  42  ,crr8
16:09:05  43  ,crr10
16:09:05  44  ,crr12
16:09:05  45  ,crr14
16:09:05  46  ,crr16
16:09:05  47  ,crr18
16:09:05  48  --
16:09:05  49  ,hh
16:09:05  50  ,d
16:09:05  51  ,w
16:09:05  52  ,mpm
16:09:05  53  ,mph
16:09:05  54  FROM svm6122
16:09:05  55  ORDER BY ydate
16:09:05  56  /

Table created.

Elapsed: 00:00:00.36
16:09:05 SQL> 
16:09:05 SQL> -- rpt
16:09:05 SQL> 
16:09:05 SQL> SELECT
16:09:05   2  pair
16:09:05   3  ,trend
16:09:05   4  ,gatt
16:09:05   5  ,COUNT(pair)
16:09:05   6  ,AVG(g6)
16:09:05   7  FROM svm6142
16:09:05   8  GROUP BY pair,trend,gatt
16:09:05   9  ORDER BY pair,trend,gatt
16:09:05  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7170 -.00124571
usd_cad 	-1 up	      3092 .003065739
usd_cad 	-1		38
usd_cad 	 1 nup	      6747 -.00159374
usd_cad 	 1 up	      2389 .003648486
usd_cad 	 1		34

6 rows selected.

Elapsed: 00:00:00.04
16:09:05 SQL> 
16:09:05 SQL> 
16:09:05 SQL> -- Derive NTILE based params:
16:09:05 SQL> 
16:09:05 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
16:09:05 SQL> CREATE TABLE svm6162 COMPRESS AS
16:09:05   2  SELECT
16:09:05   3  pair
16:09:05   4  ,ydate
16:09:05   5  ,prdate
16:09:05   6  ,clse
16:09:05   7  ,g6
16:09:05   8  ,gatt
16:09:05   9  ,gattn
16:09:05  10  ,trend
16:09:05  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
16:09:05  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
16:09:05  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
16:09:05  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
16:09:05  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
16:09:05  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
16:09:05  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
16:09:05  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
16:09:05  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
16:09:05  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
16:09:05  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
16:09:05  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
16:09:05  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
16:09:05  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
16:09:05  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
16:09:05  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
16:09:05  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
16:09:05  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
16:09:05  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
16:09:05  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
16:09:05  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
16:09:05  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
16:09:05  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
16:09:05  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
16:09:05  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
16:09:05  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
16:09:05  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
16:09:05  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
16:09:05  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
16:09:05  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
16:09:05  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
16:09:05  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
16:09:05  43  ,hh  att32
16:09:05  44  ,d   att33
16:09:05  45  ,w   att34
16:09:05  46  ,mpm att35
16:09:05  47  ,mph att36
16:09:05  48  ,trend att37
16:09:05  49  FROM svm6142
16:09:05  50  ORDER BY ydate
16:09:05  51  /

Table created.

Elapsed: 00:00:04.84
16:09:10 SQL> 
16:09:10 SQL> -- rpt
16:09:10 SQL> 
16:09:10 SQL> SELECT
16:09:10   2  pair
16:09:10   3  ,trend
16:09:10   4  ,gatt
16:09:10   5  ,COUNT(pair)
16:09:10   6  ,AVG(g6)
16:09:10   7  FROM svm6162
16:09:10   8  GROUP BY pair,trend,gatt
16:09:10   9  ORDER BY pair,trend,gatt
16:09:10  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7170 -.00124571
usd_cad 	-1 up	      3092 .003065739
usd_cad 	-1		38
usd_cad 	 1 nup	      6747 -.00159374
usd_cad 	 1 up	      2389 .003648486
usd_cad 	 1		34

6 rows selected.

Elapsed: 00:00:00.03
16:09:10 SQL> 
16:09:10 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.10
16:09:10 SQL> CREATE TABLE modsrc COMPRESS AS
16:09:10   2  SELECT
16:09:10   3  pair
16:09:10   4  ,ydate
16:09:10   5  ,prdate
16:09:10   6  ,trend
16:09:10   7  ,g6
16:09:10   8  ,gatt
16:09:10   9  ,gattn
16:09:10  10  FROM svm6162
16:09:10  11  /

Table created.

Elapsed: 00:00:00.08
16:09:10 SQL> 
16:09:10 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
16:09:10 SQL> 
16:09:10 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
16:09:10 SQL> CREATE TABLE cad_ms610 COMPRESS AS
16:09:10   2  SELECT
16:09:10   3  ydate
16:09:10   4  ,trend cad_trend
16:09:10   5  ,g6    cad_g6
16:09:10   6  ,gatt  cad_gatt
16:09:10   7  ,gattn cad_gattn
16:09:10   8  FROM modsrc
16:09:10   9  /

Table created.

Elapsed: 00:00:00.07
16:09:11 SQL> 
16:09:11 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
16:09:11 SQL> 
16:09:11 SQL> -- I need a copy of the attributes:
16:09:11 SQL> 
16:09:11 SQL> 
16:09:11 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.04
16:09:11 SQL> CREATE TABLE cad_att COMPRESS AS
16:09:11   2  SELECT
16:09:11   3  ydate
16:09:11   4  ,att00 cad_att00
16:09:11   5  ,att01 cad_att01
16:09:11   6  ,att02 cad_att02
16:09:11   7  ,att03 cad_att03
16:09:11   8  ,att04 cad_att04
16:09:11   9  ,att05 cad_att05
16:09:11  10  ,att06 cad_att06
16:09:11  11  ,att07 cad_att07
16:09:11  12  ,att08 cad_att08
16:09:11  13  ,att09 cad_att09
16:09:11  14  ,att10 cad_att10
16:09:11  15  ,att11 cad_att11
16:09:11  16  ,att12 cad_att12
16:09:11  17  ,att13 cad_att13
16:09:11  18  ,att14 cad_att14
16:09:11  19  ,att15 cad_att15
16:09:11  20  ,att16 cad_att16
16:09:11  21  ,att17 cad_att17
16:09:11  22  ,att18 cad_att18
16:09:11  23  ,att19 cad_att19
16:09:11  24  ,att20 cad_att20
16:09:11  25  ,att21 cad_att21
16:09:11  26  ,att22 cad_att22
16:09:11  27  ,att23 cad_att23
16:09:11  28  ,att24 cad_att24
16:09:11  29  ,att25 cad_att25
16:09:11  30  ,att26 cad_att26
16:09:11  31  ,att27 cad_att27
16:09:11  32  ,att28 cad_att28
16:09:11  33  ,att29 cad_att29
16:09:11  34  ,att30 cad_att30
16:09:11  35  ,att31 cad_att31
16:09:11  36  ,att32 cad_att32
16:09:11  37  ,att33 cad_att33
16:09:11  38  ,att34 cad_att34
16:09:11  39  ,att35 cad_att35
16:09:11  40  ,att36 cad_att36
16:09:11  41  ,att37 cad_att37
16:09:11  42  FROM svm6162
16:09:11  43  /

Table created.

Elapsed: 00:00:00.18
16:09:11 SQL> 
16:09:11 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
16:09:11 SQL> 
16:09:11 SQL> -- rpt
16:09:11 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19470

Elapsed: 00:00:00.84
16:09:12 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19470

Elapsed: 00:00:00.01
16:09:12 SQL> 
16:09:12 SQL> --
16:09:12 SQL> -- chf610.sql
16:09:12 SQL> --
16:09:12 SQL> 
16:09:12 SQL> -- Creates views and tables for backtesting a forex SVM strategy
16:09:12 SQL> 
16:09:12 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.45
16:09:13 SQL> 
16:09:13 SQL> -- I created di5min here:
16:09:13 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
16:09:13 SQL> 
16:09:13 SQL> CREATE OR REPLACE VIEW svm6102 AS
16:09:13   2  SELECT
16:09:13   3  pair
16:09:13   4  ,ydate
16:09:13   5  ,prdate
16:09:13   6  ,rownum rnum -- acts as t in my time-series
16:09:13   7  ,clse
16:09:13   8  -- Derive a bunch of attributes from clse, the latest price:
16:09:13   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
16:09:13  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
16:09:13  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
16:09:13  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
16:09:13  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
16:09:13  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
16:09:13  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
16:09:13  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
16:09:13  17  --
16:09:13  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
16:09:13  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
16:09:13  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
16:09:13  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
16:09:13  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
16:09:13  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
16:09:13  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
16:09:13  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
16:09:13  26  --
16:09:13  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
16:09:13  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
16:09:13  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
16:09:13  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
16:09:13  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
16:09:13  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
16:09:13  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
16:09:13  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
16:09:13  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
16:09:13  36  FROM di5min WHERE pair LIKE'%chf%'
16:09:13  37  AND ydate > sysdate - 95
16:09:13  38  ORDER BY ydate
16:09:13  39  /

View created.

Elapsed: 00:00:00.04
16:09:13 SQL> 
16:09:13 SQL> -- rpt
16:09:13 SQL> 
16:09:13 SQL> SELECT
16:09:13   2  pair
16:09:13   3  ,COUNT(pair)
16:09:13   4  ,MIN(clse),MAX(clse)
16:09:13   5  ,MIN(avg6),MAX(avg6)
16:09:13   6  ,MIN(ydate),MAX(ydate)
16:09:13   7  FROM svm6102
16:09:13   8  GROUP BY pair
16:09:13   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19473    .931675	  1.00635  .93325411 1.00498151 2010-10-03 20:55:01 2011-01-05 16:05:00

Elapsed: 00:00:00.85
16:09:14 SQL> 
16:09:14 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
16:09:14 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.29
16:09:14 SQL> CREATE TABLE svm6122 COMPRESS AS
16:09:14   2  SELECT
16:09:14   3  pair
16:09:14   4  ,ydate
16:09:14   5  ,prdate
16:09:14   6  ,clse
16:09:14   7  -- g6 is important. I want to predict g6:
16:09:14   8  ,ld6 - clse g6
16:09:14   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
16:09:14  10  -- I want more attributes from the ones I derived above:
16:09:14  11  -- clse relation to moving-min
16:09:14  12  ,clse-min4  cm4
16:09:14  13  ,clse-min6  cm6
16:09:14  14  ,clse-min8  cm8
16:09:14  15  ,clse-min10 cm10
16:09:14  16  ,clse-min12 cm12
16:09:14  17  ,clse-min14 cm14
16:09:14  18  ,clse-min16 cm16
16:09:14  19  ,clse-min18 cm18
16:09:14  20  -- clse relation to moving-avg
16:09:14  21  ,clse-avg4  ca4
16:09:14  22  ,clse-avg6  ca6
16:09:14  23  ,clse-avg8  ca8
16:09:14  24  ,clse-avg10 ca10
16:09:14  25  ,clse-avg12 ca12
16:09:14  26  ,clse-avg14 ca14
16:09:14  27  ,clse-avg16 ca16
16:09:14  28  ,clse-avg18 ca18
16:09:14  29  -- clse relation to moving-max
16:09:14  30  ,clse-max4  cx4
16:09:14  31  ,clse-max6  cx6
16:09:14  32  ,clse-max8  cx8
16:09:14  33  ,clse-max10 cx10
16:09:14  34  ,clse-max12 cx12
16:09:14  35  ,clse-max14 cx14
16:09:14  36  ,clse-max16 cx16
16:09:14  37  ,clse-max18 cx18
16:09:14  38  -- Derive more attributes.
16:09:14  39  -- I want to use CORR() here to help SVM see the shape of the series.
16:09:14  40  -- But COVAR_POP is more stable:
16:09:14  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
16:09:14  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
16:09:14  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
16:09:14  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
16:09:14  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
16:09:14  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
16:09:14  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
16:09:14  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
16:09:14  49  -- Derive date related attributes:
16:09:14  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
16:09:14  51  ,0+TO_CHAR(ydate,'D')d
16:09:14  52  ,0+TO_CHAR(ydate,'W')w
16:09:14  53  -- mpm stands for minutes-past-midnight:
16:09:14  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
16:09:14  55  -- mph stands for minutes-past-hour:
16:09:14  56  ,0+TO_CHAR(ydate,'MI')mph
16:09:14  57  FROM svm6102
16:09:14  58  ORDER BY ydate
16:09:14  59  /

Table created.

Elapsed: 00:00:02.08
16:09:16 SQL> 
16:09:16 SQL> -- rpt
16:09:16 SQL> 
16:09:16 SQL> SELECT
16:09:16   2  pair
16:09:16   3  ,COUNT(pair)
16:09:16   4  ,MIN(clse),MAX(clse)
16:09:16   5  ,MIN(ydate),MAX(ydate)
16:09:16   6  FROM svm6122
16:09:16   7  GROUP BY pair
16:09:16   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19473    .931675	  1.00635 2010-10-03 20:55:01 2011-01-05 16:05:00

Elapsed: 00:00:00.04
16:09:16 SQL> 
16:09:16 SQL> -- Prepare for derivation of NTILE based params:
16:09:16 SQL> 
16:09:16 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.31
16:09:16 SQL> CREATE TABLE svm6142 COMPRESS AS
16:09:16   2  SELECT
16:09:16   3  pair
16:09:16   4  ,ydate
16:09:16   5  ,prdate
16:09:16   6  ,clse
16:09:16   7  ,g6
16:09:16   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
16:09:16   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
16:09:16  10  ,CASE WHEN trend IS NULL THEN 1
16:09:16  11  	    WHEN trend =0      THEN 1
16:09:16  12  	    ELSE trend END trend
16:09:16  13  ,cm4
16:09:16  14  ,cm6
16:09:16  15  ,cm8
16:09:16  16  ,cm10
16:09:16  17  ,cm12
16:09:16  18  ,cm14
16:09:16  19  ,cm16
16:09:16  20  ,cm18
16:09:16  21  --
16:09:16  22  ,ca4
16:09:16  23  ,ca6
16:09:16  24  ,ca8
16:09:16  25  ,ca10
16:09:16  26  ,ca12
16:09:16  27  ,ca14
16:09:16  28  ,ca16
16:09:16  29  ,ca18
16:09:16  30  --
16:09:16  31  ,cx4
16:09:16  32  ,cx6
16:09:16  33  ,cx8
16:09:16  34  ,cx10
16:09:16  35  ,cx12
16:09:16  36  ,cx14
16:09:16  37  ,cx16
16:09:16  38  ,cx18
16:09:16  39  --
16:09:16  40  ,crr4
16:09:16  41  ,crr6
16:09:16  42  ,crr8
16:09:16  43  ,crr10
16:09:16  44  ,crr12
16:09:16  45  ,crr14
16:09:16  46  ,crr16
16:09:16  47  ,crr18
16:09:16  48  --
16:09:16  49  ,hh
16:09:16  50  ,d
16:09:16  51  ,w
16:09:16  52  ,mpm
16:09:16  53  ,mph
16:09:16  54  FROM svm6122
16:09:16  55  ORDER BY ydate
16:09:16  56  /

Table created.

Elapsed: 00:00:00.35
16:09:17 SQL> 
16:09:17 SQL> -- rpt
16:09:17 SQL> 
16:09:17 SQL> SELECT
16:09:17   2  pair
16:09:17   3  ,trend
16:09:17   4  ,gatt
16:09:17   5  ,COUNT(pair)
16:09:17   6  ,AVG(g6)
16:09:17   7  FROM svm6142
16:09:17   8  GROUP BY pair,trend,gatt
16:09:17   9  ORDER BY pair,trend,gatt
16:09:17  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7072  -.0019936
usd_chf 	-1 up	      3045 .003835688
usd_chf 	 1 nup	      6414  -.0015513
usd_chf 	 1 up	      2870 .003843326
usd_chf 	 1		72

Elapsed: 00:00:00.04
16:09:17 SQL> 
16:09:17 SQL> 
16:09:17 SQL> -- Derive NTILE based params:
16:09:17 SQL> 
16:09:17 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.16
16:09:17 SQL> CREATE TABLE svm6162 COMPRESS AS
16:09:17   2  SELECT
16:09:17   3  pair
16:09:17   4  ,ydate
16:09:17   5  ,prdate
16:09:17   6  ,clse
16:09:17   7  ,g6
16:09:17   8  ,gatt
16:09:17   9  ,gattn
16:09:17  10  ,trend
16:09:17  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
16:09:17  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
16:09:17  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
16:09:17  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
16:09:17  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
16:09:17  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
16:09:17  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
16:09:17  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
16:09:17  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
16:09:17  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
16:09:17  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
16:09:17  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
16:09:17  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
16:09:17  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
16:09:17  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
16:09:17  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
16:09:17  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
16:09:17  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
16:09:17  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
16:09:17  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
16:09:17  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
16:09:17  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
16:09:17  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
16:09:17  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
16:09:17  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
16:09:17  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
16:09:17  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
16:09:17  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
16:09:17  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
16:09:17  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
16:09:17  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
16:09:17  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
16:09:17  43  ,hh  att32
16:09:17  44  ,d   att33
16:09:17  45  ,w   att34
16:09:17  46  ,mpm att35
16:09:17  47  ,mph att36
16:09:17  48  ,trend att37
16:09:17  49  FROM svm6142
16:09:17  50  ORDER BY ydate
16:09:17  51  /

Table created.

Elapsed: 00:00:04.88
16:09:22 SQL> 
16:09:22 SQL> -- rpt
16:09:22 SQL> 
16:09:22 SQL> SELECT
16:09:22   2  pair
16:09:22   3  ,trend
16:09:22   4  ,gatt
16:09:22   5  ,COUNT(pair)
16:09:22   6  ,AVG(g6)
16:09:22   7  FROM svm6162
16:09:22   8  GROUP BY pair,trend,gatt
16:09:22   9  ORDER BY pair,trend,gatt
16:09:22  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7072  -.0019936
usd_chf 	-1 up	      3045 .003835688
usd_chf 	 1 nup	      6414  -.0015513
usd_chf 	 1 up	      2870 .003843326
usd_chf 	 1		72

Elapsed: 00:00:00.03
16:09:22 SQL> 
16:09:22 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.20
16:09:22 SQL> CREATE TABLE modsrc COMPRESS AS
16:09:22   2  SELECT
16:09:22   3  pair
16:09:22   4  ,ydate
16:09:22   5  ,prdate
16:09:22   6  ,trend
16:09:22   7  ,g6
16:09:22   8  ,gatt
16:09:22   9  ,gattn
16:09:22  10  FROM svm6162
16:09:22  11  /

Table created.

Elapsed: 00:00:00.09
16:09:22 SQL> 
16:09:22 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
16:09:22 SQL> 
16:09:22 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
16:09:22 SQL> CREATE TABLE chf_ms610 COMPRESS AS
16:09:22   2  SELECT
16:09:22   3  ydate
16:09:22   4  ,trend chf_trend
16:09:22   5  ,g6    chf_g6
16:09:22   6  ,gatt  chf_gatt
16:09:22   7  ,gattn chf_gattn
16:09:22   8  FROM modsrc
16:09:22   9  /

Table created.

Elapsed: 00:00:00.07
16:09:22 SQL> 
16:09:22 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
16:09:23 SQL> 
16:09:23 SQL> -- I need a copy of the attributes:
16:09:23 SQL> 
16:09:23 SQL> 
16:09:23 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.12
16:09:23 SQL> CREATE TABLE chf_att COMPRESS AS
16:09:23   2  SELECT
16:09:23   3  ydate
16:09:23   4  ,att00 chf_att00
16:09:23   5  ,att01 chf_att01
16:09:23   6  ,att02 chf_att02
16:09:23   7  ,att03 chf_att03
16:09:23   8  ,att04 chf_att04
16:09:23   9  ,att05 chf_att05
16:09:23  10  ,att06 chf_att06
16:09:23  11  ,att07 chf_att07
16:09:23  12  ,att08 chf_att08
16:09:23  13  ,att09 chf_att09
16:09:23  14  ,att10 chf_att10
16:09:23  15  ,att11 chf_att11
16:09:23  16  ,att12 chf_att12
16:09:23  17  ,att13 chf_att13
16:09:23  18  ,att14 chf_att14
16:09:23  19  ,att15 chf_att15
16:09:23  20  ,att16 chf_att16
16:09:23  21  ,att17 chf_att17
16:09:23  22  ,att18 chf_att18
16:09:23  23  ,att19 chf_att19
16:09:23  24  ,att20 chf_att20
16:09:23  25  ,att21 chf_att21
16:09:23  26  ,att22 chf_att22
16:09:23  27  ,att23 chf_att23
16:09:23  28  ,att24 chf_att24
16:09:23  29  ,att25 chf_att25
16:09:23  30  ,att26 chf_att26
16:09:23  31  ,att27 chf_att27
16:09:23  32  ,att28 chf_att28
16:09:23  33  ,att29 chf_att29
16:09:23  34  ,att30 chf_att30
16:09:23  35  ,att31 chf_att31
16:09:23  36  ,att32 chf_att32
16:09:23  37  ,att33 chf_att33
16:09:23  38  ,att34 chf_att34
16:09:23  39  ,att35 chf_att35
16:09:23  40  ,att36 chf_att36
16:09:23  41  ,att37 chf_att37
16:09:23  42  FROM svm6162
16:09:23  43  /

Table created.

Elapsed: 00:00:00.17
16:09:23 SQL> 
16:09:23 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
16:09:23 SQL> 
16:09:23 SQL> -- rpt
16:09:23 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19473

Elapsed: 00:00:00.83
16:09:24 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19473

Elapsed: 00:00:00.00
16:09:24 SQL> 
16:09:24 SQL> --
16:09:24 SQL> -- ech610.sql
16:09:24 SQL> --
16:09:24 SQL> 
16:09:24 SQL> -- Creates views and tables for backtesting a forex SVM strategy
16:09:24 SQL> 
16:09:24 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
16:09:25 SQL> 
16:09:25 SQL> -- I created di5min here:
16:09:25 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
16:09:25 SQL> 
16:09:25 SQL> CREATE OR REPLACE VIEW svm6102 AS
16:09:25   2  SELECT
16:09:25   3  pair
16:09:25   4  ,ydate
16:09:25   5  ,prdate
16:09:25   6  ,rownum rnum -- acts as t in my time-series
16:09:25   7  ,clse
16:09:25   8  -- Derive a bunch of attributes from clse, the latest price:
16:09:25   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
16:09:25  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
16:09:25  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
16:09:25  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
16:09:25  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
16:09:25  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
16:09:25  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
16:09:25  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
16:09:25  17  --
16:09:25  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
16:09:25  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
16:09:25  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
16:09:25  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
16:09:25  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
16:09:25  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
16:09:25  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
16:09:25  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
16:09:25  26  --
16:09:25  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
16:09:25  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
16:09:25  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
16:09:25  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
16:09:25  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
16:09:25  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
16:09:25  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
16:09:25  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
16:09:25  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
16:09:25  36  FROM di5min WHERE pair LIKE'%ech%'
16:09:25  37  AND ydate > sysdate - 95
16:09:25  38  ORDER BY ydate
16:09:25  39  /

View created.

Elapsed: 00:00:00.05
16:09:25 SQL> 
16:09:25 SQL> -- rpt
16:09:25 SQL> 
16:09:25 SQL> SELECT
16:09:25   2  pair
16:09:25   3  ,COUNT(pair)
16:09:25   4  ,MIN(clse),MAX(clse)
16:09:25   5  ,MIN(avg6),MAX(avg6)
16:09:25   6  ,MIN(ydate),MAX(ydate)
16:09:25   7  FROM svm6102
16:09:25   8  GROUP BY pair
16:09:25   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19472 1.24192946 1.38284305 1.24320711 1.37986485 2010-10-03 20:55:01 2011-01-05 16:05:00

Elapsed: 00:00:00.80
16:09:25 SQL> 
16:09:25 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
16:09:25 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.30
16:09:26 SQL> CREATE TABLE svm6122 COMPRESS AS
16:09:26   2  SELECT
16:09:26   3  pair
16:09:26   4  ,ydate
16:09:26   5  ,prdate
16:09:26   6  ,clse
16:09:26   7  -- g6 is important. I want to predict g6:
16:09:26   8  ,ld6 - clse g6
16:09:26   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
16:09:26  10  -- I want more attributes from the ones I derived above:
16:09:26  11  -- clse relation to moving-min
16:09:26  12  ,clse-min4  cm4
16:09:26  13  ,clse-min6  cm6
16:09:26  14  ,clse-min8  cm8
16:09:26  15  ,clse-min10 cm10
16:09:26  16  ,clse-min12 cm12
16:09:26  17  ,clse-min14 cm14
16:09:26  18  ,clse-min16 cm16
16:09:26  19  ,clse-min18 cm18
16:09:26  20  -- clse relation to moving-avg
16:09:26  21  ,clse-avg4  ca4
16:09:26  22  ,clse-avg6  ca6
16:09:26  23  ,clse-avg8  ca8
16:09:26  24  ,clse-avg10 ca10
16:09:26  25  ,clse-avg12 ca12
16:09:26  26  ,clse-avg14 ca14
16:09:26  27  ,clse-avg16 ca16
16:09:26  28  ,clse-avg18 ca18
16:09:26  29  -- clse relation to moving-max
16:09:26  30  ,clse-max4  cx4
16:09:26  31  ,clse-max6  cx6
16:09:26  32  ,clse-max8  cx8
16:09:26  33  ,clse-max10 cx10
16:09:26  34  ,clse-max12 cx12
16:09:26  35  ,clse-max14 cx14
16:09:26  36  ,clse-max16 cx16
16:09:26  37  ,clse-max18 cx18
16:09:26  38  -- Derive more attributes.
16:09:26  39  -- I want to use CORR() here to help SVM see the shape of the series.
16:09:26  40  -- But COVAR_POP is more stable:
16:09:26  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
16:09:26  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
16:09:26  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
16:09:26  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
16:09:26  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
16:09:26  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
16:09:26  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
16:09:26  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
16:09:26  49  -- Derive date related attributes:
16:09:26  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
16:09:26  51  ,0+TO_CHAR(ydate,'D')d
16:09:26  52  ,0+TO_CHAR(ydate,'W')w
16:09:26  53  -- mpm stands for minutes-past-midnight:
16:09:26  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
16:09:26  55  -- mph stands for minutes-past-hour:
16:09:26  56  ,0+TO_CHAR(ydate,'MI')mph
16:09:26  57  FROM svm6102
16:09:26  58  ORDER BY ydate
16:09:26  59  /

Table created.

Elapsed: 00:00:02.10
16:09:28 SQL> 
16:09:28 SQL> -- rpt
16:09:28 SQL> 
16:09:28 SQL> SELECT
16:09:28   2  pair
16:09:28   3  ,COUNT(pair)
16:09:28   4  ,MIN(clse),MAX(clse)
16:09:28   5  ,MIN(ydate),MAX(ydate)
16:09:28   6  FROM svm6122
16:09:28   7  GROUP BY pair
16:09:28   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19472 1.24192946 1.38284305 2010-10-03 20:55:01 2011-01-05 16:05:00

Elapsed: 00:00:00.03
16:09:28 SQL> 
16:09:28 SQL> -- Prepare for derivation of NTILE based params:
16:09:28 SQL> 
16:09:28 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.26
16:09:28 SQL> CREATE TABLE svm6142 COMPRESS AS
16:09:28   2  SELECT
16:09:28   3  pair
16:09:28   4  ,ydate
16:09:28   5  ,prdate
16:09:28   6  ,clse
16:09:28   7  ,g6
16:09:28   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
16:09:28   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
16:09:28  10  ,CASE WHEN trend IS NULL THEN 1
16:09:28  11  	    WHEN trend =0      THEN 1
16:09:28  12  	    ELSE trend END trend
16:09:28  13  ,cm4
16:09:28  14  ,cm6
16:09:28  15  ,cm8
16:09:28  16  ,cm10
16:09:28  17  ,cm12
16:09:28  18  ,cm14
16:09:28  19  ,cm16
16:09:28  20  ,cm18
16:09:28  21  --
16:09:28  22  ,ca4
16:09:28  23  ,ca6
16:09:28  24  ,ca8
16:09:28  25  ,ca10
16:09:28  26  ,ca12
16:09:28  27  ,ca14
16:09:28  28  ,ca16
16:09:28  29  ,ca18
16:09:28  30  --
16:09:28  31  ,cx4
16:09:28  32  ,cx6
16:09:28  33  ,cx8
16:09:28  34  ,cx10
16:09:28  35  ,cx12
16:09:28  36  ,cx14
16:09:28  37  ,cx16
16:09:28  38  ,cx18
16:09:28  39  --
16:09:28  40  ,crr4
16:09:28  41  ,crr6
16:09:28  42  ,crr8
16:09:28  43  ,crr10
16:09:28  44  ,crr12
16:09:28  45  ,crr14
16:09:28  46  ,crr16
16:09:28  47  ,crr18
16:09:28  48  --
16:09:28  49  ,hh
16:09:28  50  ,d
16:09:28  51  ,w
16:09:28  52  ,mpm
16:09:28  53  ,mph
16:09:28  54  FROM svm6122
16:09:28  55  ORDER BY ydate
16:09:28  56  /

Table created.

Elapsed: 00:00:00.40
16:09:28 SQL> 
16:09:28 SQL> -- rpt
16:09:28 SQL> 
16:09:28 SQL> SELECT
16:09:28   2  pair
16:09:28   3  ,trend
16:09:28   4  ,gatt
16:09:28   5  ,COUNT(pair)
16:09:28   6  ,AVG(g6)
16:09:28   7  FROM svm6142
16:09:28   8  GROUP BY pair,trend,gatt
16:09:28   9  ORDER BY pair,trend,gatt
16:09:28  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6658 -.00222518
ech_usd 	-1 up	      3557 .003519821
ech_usd 	-1		25
ech_usd 	 1 nup	      6320 -.00241051
ech_usd 	 1 up	      2865 .004086742
ech_usd 	 1		47

6 rows selected.

Elapsed: 00:00:00.04
16:09:29 SQL> 
16:09:29 SQL> 
16:09:29 SQL> -- Derive NTILE based params:
16:09:29 SQL> 
16:09:29 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.22
16:09:29 SQL> CREATE TABLE svm6162 COMPRESS AS
16:09:29   2  SELECT
16:09:29   3  pair
16:09:29   4  ,ydate
16:09:29   5  ,prdate
16:09:29   6  ,clse
16:09:29   7  ,g6
16:09:29   8  ,gatt
16:09:29   9  ,gattn
16:09:29  10  ,trend
16:09:29  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
16:09:29  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
16:09:29  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
16:09:29  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
16:09:29  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
16:09:29  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
16:09:29  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
16:09:29  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
16:09:29  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
16:09:29  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
16:09:29  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
16:09:29  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
16:09:29  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
16:09:29  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
16:09:29  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
16:09:29  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
16:09:29  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
16:09:29  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
16:09:29  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
16:09:29  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
16:09:29  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
16:09:29  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
16:09:29  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
16:09:29  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
16:09:29  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
16:09:29  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
16:09:29  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
16:09:29  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
16:09:29  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
16:09:29  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
16:09:29  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
16:09:29  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
16:09:29  43  ,hh  att32
16:09:29  44  ,d   att33
16:09:29  45  ,w   att34
16:09:29  46  ,mpm att35
16:09:29  47  ,mph att36
16:09:29  48  ,trend att37
16:09:29  49  FROM svm6142
16:09:29  50  ORDER BY ydate
16:09:29  51  /

Table created.

Elapsed: 00:00:05.44
16:09:34 SQL> 
16:09:34 SQL> -- rpt
16:09:34 SQL> 
16:09:34 SQL> SELECT
16:09:34   2  pair
16:09:34   3  ,trend
16:09:34   4  ,gatt
16:09:34   5  ,COUNT(pair)
16:09:34   6  ,AVG(g6)
16:09:34   7  FROM svm6162
16:09:34   8  GROUP BY pair,trend,gatt
16:09:34   9  ORDER BY pair,trend,gatt
16:09:34  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6658 -.00222518
ech_usd 	-1 up	      3557 .003519821
ech_usd 	-1		25
ech_usd 	 1 nup	      6320 -.00241051
ech_usd 	 1 up	      2865 .004086742
ech_usd 	 1		47

6 rows selected.

Elapsed: 00:00:00.03
16:09:34 SQL> 
16:09:34 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.23
16:09:34 SQL> CREATE TABLE modsrc COMPRESS AS
16:09:34   2  SELECT
16:09:34   3  pair
16:09:34   4  ,ydate
16:09:34   5  ,prdate
16:09:34   6  ,trend
16:09:34   7  ,g6
16:09:34   8  ,gatt
16:09:34   9  ,gattn
16:09:34  10  FROM svm6162
16:09:34  11  /

Table created.

Elapsed: 00:00:00.09
16:09:35 SQL> 
16:09:35 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
16:09:35 SQL> 
16:09:35 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
16:09:35 SQL> CREATE TABLE ech_ms610 COMPRESS AS
16:09:35   2  SELECT
16:09:35   3  ydate
16:09:35   4  ,trend ech_trend
16:09:35   5  ,g6    ech_g6
16:09:35   6  ,gatt  ech_gatt
16:09:35   7  ,gattn ech_gattn
16:09:35   8  FROM modsrc
16:09:35   9  /

Table created.

Elapsed: 00:00:00.06
16:09:35 SQL> 
16:09:35 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
16:09:35 SQL> 
16:09:35 SQL> -- I need a copy of the attributes:
16:09:35 SQL> 
16:09:35 SQL> 
16:09:35 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.18
16:09:35 SQL> CREATE TABLE ech_att COMPRESS AS
16:09:35   2  SELECT
16:09:35   3  ydate
16:09:35   4  ,att00 ech_att00
16:09:35   5  ,att01 ech_att01
16:09:35   6  ,att02 ech_att02
16:09:35   7  ,att03 ech_att03
16:09:35   8  ,att04 ech_att04
16:09:35   9  ,att05 ech_att05
16:09:35  10  ,att06 ech_att06
16:09:35  11  ,att07 ech_att07
16:09:35  12  ,att08 ech_att08
16:09:35  13  ,att09 ech_att09
16:09:35  14  ,att10 ech_att10
16:09:35  15  ,att11 ech_att11
16:09:35  16  ,att12 ech_att12
16:09:35  17  ,att13 ech_att13
16:09:35  18  ,att14 ech_att14
16:09:35  19  ,att15 ech_att15
16:09:35  20  ,att16 ech_att16
16:09:35  21  ,att17 ech_att17
16:09:35  22  ,att18 ech_att18
16:09:35  23  ,att19 ech_att19
16:09:35  24  ,att20 ech_att20
16:09:35  25  ,att21 ech_att21
16:09:35  26  ,att22 ech_att22
16:09:35  27  ,att23 ech_att23
16:09:35  28  ,att24 ech_att24
16:09:35  29  ,att25 ech_att25
16:09:35  30  ,att26 ech_att26
16:09:35  31  ,att27 ech_att27
16:09:35  32  ,att28 ech_att28
16:09:35  33  ,att29 ech_att29
16:09:35  34  ,att30 ech_att30
16:09:35  35  ,att31 ech_att31
16:09:35  36  ,att32 ech_att32
16:09:35  37  ,att33 ech_att33
16:09:35  38  ,att34 ech_att34
16:09:35  39  ,att35 ech_att35
16:09:35  40  ,att36 ech_att36
16:09:35  41  ,att37 ech_att37
16:09:35  42  FROM svm6162
16:09:35  43  /

Table created.

Elapsed: 00:00:00.18
16:09:35 SQL> 
16:09:35 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.50
16:09:36 SQL> 
16:09:36 SQL> -- rpt
16:09:36 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19472

Elapsed: 00:00:00.81
16:09:37 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19472

Elapsed: 00:00:00.00
16:09:37 SQL> 
16:09:37 SQL> --
16:09:37 SQL> -- egb610.sql
16:09:37 SQL> --
16:09:37 SQL> 
16:09:37 SQL> -- Creates views and tables for backtesting a forex SVM strategy
16:09:37 SQL> 
16:09:37 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.43
16:09:37 SQL> 
16:09:37 SQL> -- I created di5min here:
16:09:37 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
16:09:37 SQL> 
16:09:37 SQL> CREATE OR REPLACE VIEW svm6102 AS
16:09:37   2  SELECT
16:09:37   3  pair
16:09:37   4  ,ydate
16:09:37   5  ,prdate
16:09:37   6  ,rownum rnum -- acts as t in my time-series
16:09:37   7  ,clse
16:09:37   8  -- Derive a bunch of attributes from clse, the latest price:
16:09:37   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
16:09:37  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
16:09:37  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
16:09:37  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
16:09:37  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
16:09:37  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
16:09:37  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
16:09:37  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
16:09:37  17  --
16:09:37  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
16:09:37  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
16:09:37  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
16:09:37  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
16:09:37  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
16:09:37  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
16:09:37  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
16:09:37  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
16:09:37  26  --
16:09:37  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
16:09:37  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
16:09:37  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
16:09:37  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
16:09:37  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
16:09:37  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
16:09:37  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
16:09:37  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
16:09:37  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
16:09:37  36  FROM di5min WHERE pair LIKE'%egb%'
16:09:37  37  AND ydate > sysdate - 95
16:09:37  38  ORDER BY ydate
16:09:37  39  /

View created.

Elapsed: 00:00:00.05
16:09:37 SQL> 
16:09:37 SQL> -- rpt
16:09:37 SQL> 
16:09:37 SQL> SELECT
16:09:37   2  pair
16:09:37   3  ,COUNT(pair)
16:09:37   4  ,MIN(clse),MAX(clse)
16:09:37   5  ,MIN(avg6),MAX(avg6)
16:09:37   6  ,MIN(ydate),MAX(ydate)
16:09:37   7  FROM svm6102
16:09:37   8  GROUP BY pair
16:09:37   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19471 .833520557 .893920122 .834199029 .892400287 2010-10-03 20:55:01 2011-01-05 16:05:00

Elapsed: 00:00:00.96
16:09:38 SQL> 
16:09:38 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
16:09:38 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.31
16:09:38 SQL> CREATE TABLE svm6122 COMPRESS AS
16:09:38   2  SELECT
16:09:38   3  pair
16:09:38   4  ,ydate
16:09:39   5  ,prdate
16:09:39   6  ,clse
16:09:39   7  -- g6 is important. I want to predict g6:
16:09:39   8  ,ld6 - clse g6
16:09:39   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
16:09:39  10  -- I want more attributes from the ones I derived above:
16:09:39  11  -- clse relation to moving-min
16:09:39  12  ,clse-min4  cm4
16:09:39  13  ,clse-min6  cm6
16:09:39  14  ,clse-min8  cm8
16:09:39  15  ,clse-min10 cm10
16:09:39  16  ,clse-min12 cm12
16:09:39  17  ,clse-min14 cm14
16:09:39  18  ,clse-min16 cm16
16:09:39  19  ,clse-min18 cm18
16:09:39  20  -- clse relation to moving-avg
16:09:39  21  ,clse-avg4  ca4
16:09:39  22  ,clse-avg6  ca6
16:09:39  23  ,clse-avg8  ca8
16:09:39  24  ,clse-avg10 ca10
16:09:39  25  ,clse-avg12 ca12
16:09:39  26  ,clse-avg14 ca14
16:09:39  27  ,clse-avg16 ca16
16:09:39  28  ,clse-avg18 ca18
16:09:39  29  -- clse relation to moving-max
16:09:39  30  ,clse-max4  cx4
16:09:39  31  ,clse-max6  cx6
16:09:39  32  ,clse-max8  cx8
16:09:39  33  ,clse-max10 cx10
16:09:39  34  ,clse-max12 cx12
16:09:39  35  ,clse-max14 cx14
16:09:39  36  ,clse-max16 cx16
16:09:39  37  ,clse-max18 cx18
16:09:39  38  -- Derive more attributes.
16:09:39  39  -- I want to use CORR() here to help SVM see the shape of the series.
16:09:39  40  -- But COVAR_POP is more stable:
16:09:39  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
16:09:39  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
16:09:39  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
16:09:39  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
16:09:39  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
16:09:39  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
16:09:39  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
16:09:39  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
16:09:39  49  -- Derive date related attributes:
16:09:39  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
16:09:39  51  ,0+TO_CHAR(ydate,'D')d
16:09:39  52  ,0+TO_CHAR(ydate,'W')w
16:09:39  53  -- mpm stands for minutes-past-midnight:
16:09:39  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
16:09:39  55  -- mph stands for minutes-past-hour:
16:09:39  56  ,0+TO_CHAR(ydate,'MI')mph
16:09:39  57  FROM svm6102
16:09:39  58  ORDER BY ydate
16:09:39  59  /

Table created.

Elapsed: 00:00:02.50
16:09:41 SQL> 
16:09:41 SQL> -- rpt
16:09:41 SQL> 
16:09:41 SQL> SELECT
16:09:41   2  pair
16:09:41   3  ,COUNT(pair)
16:09:41   4  ,MIN(clse),MAX(clse)
16:09:41   5  ,MIN(ydate),MAX(ydate)
16:09:41   6  FROM svm6122
16:09:41   7  GROUP BY pair
16:09:41   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19471 .833520557 .893920122 2010-10-03 20:55:01 2011-01-05 16:05:00

Elapsed: 00:00:00.04
16:09:41 SQL> 
16:09:41 SQL> -- Prepare for derivation of NTILE based params:
16:09:41 SQL> 
16:09:41 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.31
16:09:41 SQL> CREATE TABLE svm6142 COMPRESS AS
16:09:41   2  SELECT
16:09:41   3  pair
16:09:41   4  ,ydate
16:09:41   5  ,prdate
16:09:41   6  ,clse
16:09:41   7  ,g6
16:09:41   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
16:09:41   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
16:09:41  10  ,CASE WHEN trend IS NULL THEN 1
16:09:41  11  	    WHEN trend =0      THEN 1
16:09:41  12  	    ELSE trend END trend
16:09:41  13  ,cm4
16:09:41  14  ,cm6
16:09:41  15  ,cm8
16:09:41  16  ,cm10
16:09:41  17  ,cm12
16:09:41  18  ,cm14
16:09:41  19  ,cm16
16:09:41  20  ,cm18
16:09:41  21  --
16:09:41  22  ,ca4
16:09:41  23  ,ca6
16:09:41  24  ,ca8
16:09:41  25  ,ca10
16:09:41  26  ,ca12
16:09:41  27  ,ca14
16:09:41  28  ,ca16
16:09:41  29  ,ca18
16:09:41  30  --
16:09:41  31  ,cx4
16:09:41  32  ,cx6
16:09:41  33  ,cx8
16:09:41  34  ,cx10
16:09:41  35  ,cx12
16:09:41  36  ,cx14
16:09:41  37  ,cx16
16:09:41  38  ,cx18
16:09:41  39  --
16:09:41  40  ,crr4
16:09:41  41  ,crr6
16:09:41  42  ,crr8
16:09:41  43  ,crr10
16:09:41  44  ,crr12
16:09:41  45  ,crr14
16:09:41  46  ,crr16
16:09:41  47  ,crr18
16:09:41  48  --
16:09:41  49  ,hh
16:09:41  50  ,d
16:09:41  51  ,w
16:09:41  52  ,mpm
16:09:41  53  ,mph
16:09:41  54  FROM svm6122
16:09:41  55  ORDER BY ydate
16:09:41  56  /

Table created.

Elapsed: 00:00:00.44
16:09:42 SQL> 
16:09:42 SQL> -- rpt
16:09:42 SQL> 
16:09:42 SQL> SELECT
16:09:42   2  pair
16:09:42   3  ,trend
16:09:42   4  ,gatt
16:09:42   5  ,COUNT(pair)
16:09:42   6  ,AVG(g6)
16:09:42   7  FROM svm6142
16:09:42   8  GROUP BY pair,trend,gatt
16:09:42   9  ORDER BY pair,trend,gatt
16:09:42  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7693 -.00104923
egb_usd 	-1 up	      2626 .002933187
egb_usd 	-1		69
egb_usd 	 1 nup	      6463 -.00137572
egb_usd 	 1 up	      2617   .0029282
egb_usd 	 1		 3

6 rows selected.

Elapsed: 00:00:00.06
16:09:42 SQL> 
16:09:42 SQL> 
16:09:42 SQL> -- Derive NTILE based params:
16:09:42 SQL> 
16:09:42 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.21
16:09:42 SQL> CREATE TABLE svm6162 COMPRESS AS
16:09:42   2  SELECT
16:09:42   3  pair
16:09:42   4  ,ydate
16:09:42   5  ,prdate
16:09:42   6  ,clse
16:09:42   7  ,g6
16:09:42   8  ,gatt
16:09:42   9  ,gattn
16:09:42  10  ,trend
16:09:42  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
16:09:42  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
16:09:42  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
16:09:42  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
16:09:42  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
16:09:42  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
16:09:42  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
16:09:42  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
16:09:42  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
16:09:42  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
16:09:42  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
16:09:42  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
16:09:42  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
16:09:42  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
16:09:42  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
16:09:42  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
16:09:42  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
16:09:42  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
16:09:42  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
16:09:42  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
16:09:42  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
16:09:42  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
16:09:42  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
16:09:42  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
16:09:42  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
16:09:42  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
16:09:42  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
16:09:42  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
16:09:42  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
16:09:42  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
16:09:42  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
16:09:42  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
16:09:42  43  ,hh  att32
16:09:42  44  ,d   att33
16:09:42  45  ,w   att34
16:09:42  46  ,mpm att35
16:09:42  47  ,mph att36
16:09:42  48  ,trend att37
16:09:42  49  FROM svm6142
16:09:42  50  ORDER BY ydate
16:09:42  51  /

Table created.

Elapsed: 00:00:05.52
16:09:48 SQL> 
16:09:48 SQL> -- rpt
16:09:48 SQL> 
16:09:48 SQL> SELECT
16:09:48   2  pair
16:09:48   3  ,trend
16:09:48   4  ,gatt
16:09:48   5  ,COUNT(pair)
16:09:48   6  ,AVG(g6)
16:09:48   7  FROM svm6162
16:09:48   8  GROUP BY pair,trend,gatt
16:09:48   9  ORDER BY pair,trend,gatt
16:09:48  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7693 -.00104923
egb_usd 	-1 up	      2626 .002933187
egb_usd 	-1		69
egb_usd 	 1 nup	      6463 -.00137572
egb_usd 	 1 up	      2617   .0029282
egb_usd 	 1		 3

6 rows selected.

Elapsed: 00:00:00.04
16:09:48 SQL> 
16:09:48 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.22
16:09:48 SQL> CREATE TABLE modsrc COMPRESS AS
16:09:48   2  SELECT
16:09:48   3  pair
16:09:48   4  ,ydate
16:09:48   5  ,prdate
16:09:48   6  ,trend
16:09:48   7  ,g6
16:09:48   8  ,gatt
16:09:48   9  ,gattn
16:09:48  10  FROM svm6162
16:09:48  11  /

Table created.

Elapsed: 00:00:00.13
16:09:48 SQL> 
16:09:48 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.28
16:09:48 SQL> 
16:09:48 SQL> DROP   TABLE egb_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
16:09:48 SQL> CREATE TABLE egb_ms610 COMPRESS AS
16:09:48   2  SELECT
16:09:48   3  ydate
16:09:48   4  ,trend egb_trend
16:09:48   5  ,g6    egb_g6
16:09:48   6  ,gatt  egb_gatt
16:09:48   7  ,gattn egb_gattn
16:09:48   8  FROM modsrc
16:09:48   9  /

Table created.

Elapsed: 00:00:00.11
16:09:48 SQL> 
16:09:48 SQL> ANALYZE TABLE egb_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.26
16:09:49 SQL> 
16:09:49 SQL> -- I need a copy of the attributes:
16:09:49 SQL> 
16:09:49 SQL> 
16:09:49 SQL> DROP   TABLE egb_att;

Table dropped.

Elapsed: 00:00:00.06
16:09:49 SQL> CREATE TABLE egb_att COMPRESS AS
16:09:49   2  SELECT
16:09:49   3  ydate
16:09:49   4  ,att00 egb_att00
16:09:49   5  ,att01 egb_att01
16:09:49   6  ,att02 egb_att02
16:09:49   7  ,att03 egb_att03
16:09:49   8  ,att04 egb_att04
16:09:49   9  ,att05 egb_att05
16:09:49  10  ,att06 egb_att06
16:09:49  11  ,att07 egb_att07
16:09:49  12  ,att08 egb_att08
16:09:49  13  ,att09 egb_att09
16:09:49  14  ,att10 egb_att10
16:09:49  15  ,att11 egb_att11
16:09:49  16  ,att12 egb_att12
16:09:49  17  ,att13 egb_att13
16:09:49  18  ,att14 egb_att14
16:09:49  19  ,att15 egb_att15
16:09:49  20  ,att16 egb_att16
16:09:49  21  ,att17 egb_att17
16:09:49  22  ,att18 egb_att18
16:09:49  23  ,att19 egb_att19
16:09:49  24  ,att20 egb_att20
16:09:49  25  ,att21 egb_att21
16:09:49  26  ,att22 egb_att22
16:09:49  27  ,att23 egb_att23
16:09:49  28  ,att24 egb_att24
16:09:49  29  ,att25 egb_att25
16:09:49  30  ,att26 egb_att26
16:09:49  31  ,att27 egb_att27
16:09:49  32  ,att28 egb_att28
16:09:49  33  ,att29 egb_att29
16:09:49  34  ,att30 egb_att30
16:09:49  35  ,att31 egb_att31
16:09:49  36  ,att32 egb_att32
16:09:49  37  ,att33 egb_att33
16:09:49  38  ,att34 egb_att34
16:09:49  39  ,att35 egb_att35
16:09:49  40  ,att36 egb_att36
16:09:49  41  ,att37 egb_att37
16:09:49  42  FROM svm6162
16:09:49  43  /

Table created.

Elapsed: 00:00:00.20
16:09:49 SQL> 
16:09:49 SQL> ANALYZE TABLE egb_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
16:09:49 SQL> 
16:09:49 SQL> -- rpt
16:09:49 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19471

Elapsed: 00:00:00.91
16:09:50 SQL> SELECT COUNT(*)FROM egb_att;

  COUNT(*)
----------
     19471

Elapsed: 00:00:00.00
16:09:50 SQL> 
16:09:50 SQL> --
16:09:50 SQL> -- ejp610.sql
16:09:50 SQL> --
16:09:50 SQL> 
16:09:50 SQL> -- Creates views and tables for backtesting a forex SVM strategy
16:09:50 SQL> 
16:09:50 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.78
16:09:51 SQL> 
16:09:51 SQL> -- I created di5min here:
16:09:51 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
16:09:51 SQL> 
16:09:51 SQL> CREATE OR REPLACE VIEW svm6102 AS
16:09:51   2  SELECT
16:09:51   3  pair
16:09:51   4  ,ydate
16:09:51   5  ,prdate
16:09:51   6  ,rownum rnum -- acts as t in my time-series
16:09:51   7  ,clse
16:09:51   8  -- Derive a bunch of attributes from clse, the latest price:
16:09:51   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
16:09:51  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
16:09:51  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
16:09:51  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
16:09:51  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
16:09:51  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
16:09:51  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
16:09:51  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
16:09:51  17  --
16:09:51  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
16:09:51  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
16:09:51  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
16:09:51  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
16:09:51  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
16:09:51  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
16:09:51  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
16:09:51  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
16:09:51  26  --
16:09:51  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
16:09:51  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
16:09:51  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
16:09:51  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
16:09:51  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
16:09:51  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
16:09:51  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
16:09:51  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
16:09:51  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
16:09:51  36  FROM di5min WHERE pair LIKE'%ejp%'
16:09:51  37  AND ydate > sysdate - 95
16:09:51  38  ORDER BY ydate
16:09:51  39  /

View created.

Elapsed: 00:00:00.07
16:09:51 SQL> 
16:09:51 SQL> -- rpt
16:09:51 SQL> 
16:09:51 SQL> SELECT
16:09:51   2  pair
16:09:51   3  ,COUNT(pair)
16:09:51   4  ,MIN(clse),MAX(clse)
16:09:51   5  ,MIN(avg6),MAX(avg6)
16:09:51   6  ,MIN(ydate),MAX(ydate)
16:09:51   7  FROM svm6102
16:09:51   8  GROUP BY pair
16:09:51   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ejp_usd       19469 107.643765	115.63485 107.776148 115.509678 2010-10-03 20:55:01 2011-01-05 16:05:00

Elapsed: 00:00:00.84
16:09:52 SQL> 
16:09:52 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
16:09:52 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
16:09:52 SQL> CREATE TABLE svm6122 COMPRESS AS
16:09:52   2  SELECT
16:09:52   3  pair
16:09:52   4  ,ydate
16:09:52   5  ,prdate
16:09:52   6  ,clse
16:09:52   7  -- g6 is important. I want to predict g6:
16:09:52   8  ,ld6 - clse g6
16:09:52   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
16:09:52  10  -- I want more attributes from the ones I derived above:
16:09:52  11  -- clse relation to moving-min
16:09:52  12  ,clse-min4  cm4
16:09:52  13  ,clse-min6  cm6
16:09:52  14  ,clse-min8  cm8
16:09:52  15  ,clse-min10 cm10
16:09:52  16  ,clse-min12 cm12
16:09:52  17  ,clse-min14 cm14
16:09:52  18  ,clse-min16 cm16
16:09:52  19  ,clse-min18 cm18
16:09:52  20  -- clse relation to moving-avg
16:09:52  21  ,clse-avg4  ca4
16:09:52  22  ,clse-avg6  ca6
16:09:52  23  ,clse-avg8  ca8
16:09:52  24  ,clse-avg10 ca10
16:09:52  25  ,clse-avg12 ca12
16:09:52  26  ,clse-avg14 ca14
16:09:52  27  ,clse-avg16 ca16
16:09:52  28  ,clse-avg18 ca18
16:09:52  29  -- clse relation to moving-max
16:09:52  30  ,clse-max4  cx4
16:09:52  31  ,clse-max6  cx6
16:09:52  32  ,clse-max8  cx8
16:09:52  33  ,clse-max10 cx10
16:09:52  34  ,clse-max12 cx12
16:09:52  35  ,clse-max14 cx14
16:09:52  36  ,clse-max16 cx16
16:09:52  37  ,clse-max18 cx18
16:09:52  38  -- Derive more attributes.
16:09:52  39  -- I want to use CORR() here to help SVM see the shape of the series.
16:09:52  40  -- But COVAR_POP is more stable:
16:09:52  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
16:09:52  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
16:09:52  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
16:09:52  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
16:09:52  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
16:09:52  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
16:09:52  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
16:09:52  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
16:09:52  49  -- Derive date related attributes:
16:09:52  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
16:09:52  51  ,0+TO_CHAR(ydate,'D')d
16:09:52  52  ,0+TO_CHAR(ydate,'W')w
16:09:52  53  -- mpm stands for minutes-past-midnight:
16:09:52  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
16:09:52  55  -- mph stands for minutes-past-hour:
16:09:52  56  ,0+TO_CHAR(ydate,'MI')mph
16:09:52  57  FROM svm6102
16:09:52  58  ORDER BY ydate
16:09:52  59  /

Table created.

Elapsed: 00:00:02.13
16:09:54 SQL> 
16:09:54 SQL> -- rpt
16:09:54 SQL> 
16:09:54 SQL> SELECT
16:09:54   2  pair
16:09:54   3  ,COUNT(pair)
16:09:54   4  ,MIN(clse),MAX(clse)
16:09:54   5  ,MIN(ydate),MAX(ydate)
16:09:54   6  FROM svm6122
16:09:54   7  GROUP BY pair
16:09:54   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ejp_usd       19469 107.643765	115.63485 2010-10-03 20:55:01 2011-01-05 16:05:00

Elapsed: 00:00:00.04
16:09:54 SQL> 
16:09:54 SQL> -- Prepare for derivation of NTILE based params:
16:09:54 SQL> 
16:09:54 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.27
16:09:55 SQL> CREATE TABLE svm6142 COMPRESS AS
16:09:55   2  SELECT
16:09:55   3  pair
16:09:55   4  ,ydate
16:09:55   5  ,prdate
16:09:55   6  ,clse
16:09:55   7  ,g6
16:09:55   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
16:09:55   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
16:09:55  10  ,CASE WHEN trend IS NULL THEN 1
16:09:55  11  	    WHEN trend =0      THEN 1
16:09:55  12  	    ELSE trend END trend
16:09:55  13  ,cm4
16:09:55  14  ,cm6
16:09:55  15  ,cm8
16:09:55  16  ,cm10
16:09:55  17  ,cm12
16:09:55  18  ,cm14
16:09:55  19  ,cm16
16:09:55  20  ,cm18
16:09:55  21  --
16:09:55  22  ,ca4
16:09:55  23  ,ca6
16:09:55  24  ,ca8
16:09:55  25  ,ca10
16:09:55  26  ,ca12
16:09:55  27  ,ca14
16:09:55  28  ,ca16
16:09:55  29  ,ca18
16:09:55  30  --
16:09:55  31  ,cx4
16:09:55  32  ,cx6
16:09:55  33  ,cx8
16:09:55  34  ,cx10
16:09:55  35  ,cx12
16:09:55  36  ,cx14
16:09:55  37  ,cx16
16:09:55  38  ,cx18
16:09:55  39  --
16:09:55  40  ,crr4
16:09:55  41  ,crr6
16:09:55  42  ,crr8
16:09:55  43  ,crr10
16:09:55  44  ,crr12
16:09:55  45  ,crr14
16:09:55  46  ,crr16
16:09:55  47  ,crr18
16:09:55  48  --
16:09:55  49  ,hh
16:09:55  50  ,d
16:09:55  51  ,w
16:09:55  52  ,mpm
16:09:55  53  ,mph
16:09:55  54  FROM svm6122
16:09:55  55  ORDER BY ydate
16:09:55  56  /

Table created.

Elapsed: 00:00:00.40
16:09:55 SQL> 
16:09:55 SQL> -- rpt
16:09:55 SQL> 
16:09:55 SQL> SELECT
16:09:55   2  pair
16:09:55   3  ,trend
16:09:55   4  ,gatt
16:09:55   5  ,COUNT(pair)
16:09:55   6  ,AVG(g6)
16:09:55   7  FROM svm6142
16:09:55   8  GROUP BY pair,trend,gatt
16:09:55   9  ORDER BY pair,trend,gatt
16:09:55  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4986 -.32090265
ejp_usd 	-1 up	      4896 .272979848
ejp_usd 	-1		37
ejp_usd 	 1 nup	      4940 -.30127115
ejp_usd 	 1 up	      4575 .290080166
ejp_usd 	 1		35

6 rows selected.

Elapsed: 00:00:00.04
16:09:55 SQL> 
16:09:55 SQL> 
16:09:55 SQL> -- Derive NTILE based params:
16:09:55 SQL> 
16:09:55 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.17
16:09:55 SQL> CREATE TABLE svm6162 COMPRESS AS
16:09:55   2  SELECT
16:09:55   3  pair
16:09:55   4  ,ydate
16:09:55   5  ,prdate
16:09:55   6  ,clse
16:09:55   7  ,g6
16:09:55   8  ,gatt
16:09:55   9  ,gattn
16:09:55  10  ,trend
16:09:55  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
16:09:55  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
16:09:55  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
16:09:55  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
16:09:55  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
16:09:55  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
16:09:55  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
16:09:55  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
16:09:55  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
16:09:55  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
16:09:55  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
16:09:55  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
16:09:55  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
16:09:55  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
16:09:55  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
16:09:55  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
16:09:55  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
16:09:55  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
16:09:55  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
16:09:55  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
16:09:55  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
16:09:55  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
16:09:55  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
16:09:55  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
16:09:55  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
16:09:55  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
16:09:55  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
16:09:55  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
16:09:55  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
16:09:55  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
16:09:55  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
16:09:55  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
16:09:55  43  ,hh  att32
16:09:55  44  ,d   att33
16:09:55  45  ,w   att34
16:09:55  46  ,mpm att35
16:09:55  47  ,mph att36
16:09:55  48  ,trend att37
16:09:55  49  FROM svm6142
16:09:55  50  ORDER BY ydate
16:09:55  51  /

Table created.

Elapsed: 00:00:04.88
16:10:00 SQL> 
16:10:00 SQL> -- rpt
16:10:00 SQL> 
16:10:00 SQL> SELECT
16:10:00   2  pair
16:10:00   3  ,trend
16:10:00   4  ,gatt
16:10:00   5  ,COUNT(pair)
16:10:00   6  ,AVG(g6)
16:10:00   7  FROM svm6162
16:10:00   8  GROUP BY pair,trend,gatt
16:10:00   9  ORDER BY pair,trend,gatt
16:10:00  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ejp_usd 	-1 nup	      4986 -.32090265
ejp_usd 	-1 up	      4896 .272979848
ejp_usd 	-1		37
ejp_usd 	 1 nup	      4940 -.30127115
ejp_usd 	 1 up	      4575 .290080166
ejp_usd 	 1		35

6 rows selected.

Elapsed: 00:00:00.03
16:10:00 SQL> 
16:10:00 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
16:10:00 SQL> CREATE TABLE modsrc COMPRESS AS
16:10:00   2  SELECT
16:10:00   3  pair
16:10:00   4  ,ydate
16:10:00   5  ,prdate
16:10:00   6  ,trend
16:10:00   7  ,g6
16:10:00   8  ,gatt
16:10:00   9  ,gattn
16:10:00  10  FROM svm6162
16:10:00  11  /

Table created.

Elapsed: 00:00:00.08
16:10:00 SQL> 
16:10:00 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
16:10:01 SQL> 
16:10:01 SQL> DROP   TABLE ejp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
16:10:01 SQL> CREATE TABLE ejp_ms610 COMPRESS AS
16:10:01   2  SELECT
16:10:01   3  ydate
16:10:01   4  ,trend ejp_trend
16:10:01   5  ,g6    ejp_g6
16:10:01   6  ,gatt  ejp_gatt
16:10:01   7  ,gattn ejp_gattn
16:10:01   8  FROM modsrc
16:10:01   9  /

Table created.

Elapsed: 00:00:00.05
16:10:01 SQL> 
16:10:01 SQL> ANALYZE TABLE ejp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
16:10:01 SQL> 
16:10:01 SQL> -- I need a copy of the attributes:
16:10:01 SQL> 
16:10:01 SQL> 
16:10:01 SQL> DROP   TABLE ejp_att;

Table dropped.

Elapsed: 00:00:00.06
16:10:01 SQL> CREATE TABLE ejp_att COMPRESS AS
16:10:01   2  SELECT
16:10:01   3  ydate
16:10:01   4  ,att00 ejp_att00
16:10:01   5  ,att01 ejp_att01
16:10:01   6  ,att02 ejp_att02
16:10:01   7  ,att03 ejp_att03
16:10:01   8  ,att04 ejp_att04
16:10:01   9  ,att05 ejp_att05
16:10:01  10  ,att06 ejp_att06
16:10:01  11  ,att07 ejp_att07
16:10:01  12  ,att08 ejp_att08
16:10:01  13  ,att09 ejp_att09
16:10:01  14  ,att10 ejp_att10
16:10:01  15  ,att11 ejp_att11
16:10:01  16  ,att12 ejp_att12
16:10:01  17  ,att13 ejp_att13
16:10:01  18  ,att14 ejp_att14
16:10:01  19  ,att15 ejp_att15
16:10:01  20  ,att16 ejp_att16
16:10:01  21  ,att17 ejp_att17
16:10:01  22  ,att18 ejp_att18
16:10:01  23  ,att19 ejp_att19
16:10:01  24  ,att20 ejp_att20
16:10:01  25  ,att21 ejp_att21
16:10:01  26  ,att22 ejp_att22
16:10:01  27  ,att23 ejp_att23
16:10:01  28  ,att24 ejp_att24
16:10:01  29  ,att25 ejp_att25
16:10:01  30  ,att26 ejp_att26
16:10:01  31  ,att27 ejp_att27
16:10:01  32  ,att28 ejp_att28
16:10:01  33  ,att29 ejp_att29
16:10:01  34  ,att30 ejp_att30
16:10:01  35  ,att31 ejp_att31
16:10:01  36  ,att32 ejp_att32
16:10:01  37  ,att33 ejp_att33
16:10:01  38  ,att34 ejp_att34
16:10:01  39  ,att35 ejp_att35
16:10:01  40  ,att36 ejp_att36
16:10:01  41  ,att37 ejp_att37
16:10:01  42  FROM svm6162
16:10:01  43  /

Table created.

Elapsed: 00:00:00.19
16:10:01 SQL> 
16:10:01 SQL> ANALYZE TABLE ejp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
16:10:02 SQL> 
16:10:02 SQL> -- rpt
16:10:02 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19469

Elapsed: 00:00:00.83
16:10:02 SQL> SELECT COUNT(*)FROM ejp_att;

  COUNT(*)
----------
     19469

Elapsed: 00:00:00.00
16:10:02 SQL> 
16:10:02 SQL> --
16:10:02 SQL> -- ajp610.sql
16:10:02 SQL> --
16:10:02 SQL> 
16:10:02 SQL> -- Creates views and tables for backtesting a forex SVM strategy
16:10:02 SQL> 
16:10:02 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
16:10:03 SQL> 
16:10:03 SQL> -- I created di5min here:
16:10:03 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
16:10:03 SQL> 
16:10:03 SQL> CREATE OR REPLACE VIEW svm6102 AS
16:10:03   2  SELECT
16:10:03   3  pair
16:10:03   4  ,ydate
16:10:03   5  ,prdate
16:10:03   6  ,rownum rnum -- acts as t in my time-series
16:10:03   7  ,clse
16:10:03   8  -- Derive a bunch of attributes from clse, the latest price:
16:10:03   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
16:10:03  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
16:10:03  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
16:10:03  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
16:10:03  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
16:10:03  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
16:10:03  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
16:10:03  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
16:10:03  17  --
16:10:03  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
16:10:03  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
16:10:03  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
16:10:03  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
16:10:03  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
16:10:03  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
16:10:03  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
16:10:03  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
16:10:03  26  --
16:10:03  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
16:10:03  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
16:10:03  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
16:10:03  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
16:10:03  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
16:10:03  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
16:10:03  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
16:10:03  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
16:10:03  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
16:10:03  36  FROM di5min WHERE pair LIKE'%ajp%'
16:10:03  37  AND ydate > sysdate - 95
16:10:03  38  ORDER BY ydate
16:10:03  39  /

View created.

Elapsed: 00:00:00.05
16:10:03 SQL> 
16:10:03 SQL> -- rpt
16:10:03 SQL> 
16:10:03 SQL> SELECT
16:10:03   2  pair
16:10:03   3  ,COUNT(pair)
16:10:03   4  ,MIN(clse),MAX(clse)
16:10:03   5  ,MIN(avg6),MAX(avg6)
16:10:03   6  ,MIN(ydate),MAX(ydate)
16:10:03   7  FROM svm6102
16:10:03   8  GROUP BY pair
16:10:03   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ajp_usd       19466  78.249976 83.6669853 78.5106193  83.546306 2010-10-03 20:55:01 2011-01-05 16:05:00

Elapsed: 00:00:00.80
16:10:04 SQL> 
16:10:04 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
16:10:04 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:01.08
16:10:05 SQL> CREATE TABLE svm6122 COMPRESS AS
16:10:05   2  SELECT
16:10:05   3  pair
16:10:05   4  ,ydate
16:10:05   5  ,prdate
16:10:05   6  ,clse
16:10:05   7  -- g6 is important. I want to predict g6:
16:10:05   8  ,ld6 - clse g6
16:10:05   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
16:10:05  10  -- I want more attributes from the ones I derived above:
16:10:05  11  -- clse relation to moving-min
16:10:05  12  ,clse-min4  cm4
16:10:05  13  ,clse-min6  cm6
16:10:05  14  ,clse-min8  cm8
16:10:05  15  ,clse-min10 cm10
16:10:05  16  ,clse-min12 cm12
16:10:05  17  ,clse-min14 cm14
16:10:05  18  ,clse-min16 cm16
16:10:05  19  ,clse-min18 cm18
16:10:05  20  -- clse relation to moving-avg
16:10:05  21  ,clse-avg4  ca4
16:10:05  22  ,clse-avg6  ca6
16:10:05  23  ,clse-avg8  ca8
16:10:05  24  ,clse-avg10 ca10
16:10:05  25  ,clse-avg12 ca12
16:10:05  26  ,clse-avg14 ca14
16:10:05  27  ,clse-avg16 ca16
16:10:05  28  ,clse-avg18 ca18
16:10:05  29  -- clse relation to moving-max
16:10:05  30  ,clse-max4  cx4
16:10:05  31  ,clse-max6  cx6
16:10:05  32  ,clse-max8  cx8
16:10:05  33  ,clse-max10 cx10
16:10:05  34  ,clse-max12 cx12
16:10:05  35  ,clse-max14 cx14
16:10:05  36  ,clse-max16 cx16
16:10:05  37  ,clse-max18 cx18
16:10:05  38  -- Derive more attributes.
16:10:05  39  -- I want to use CORR() here to help SVM see the shape of the series.
16:10:05  40  -- But COVAR_POP is more stable:
16:10:05  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
16:10:05  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
16:10:05  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
16:10:05  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
16:10:05  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
16:10:05  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
16:10:05  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
16:10:05  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
16:10:05  49  -- Derive date related attributes:
16:10:05  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
16:10:05  51  ,0+TO_CHAR(ydate,'D')d
16:10:05  52  ,0+TO_CHAR(ydate,'W')w
16:10:05  53  -- mpm stands for minutes-past-midnight:
16:10:05  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
16:10:05  55  -- mph stands for minutes-past-hour:
16:10:05  56  ,0+TO_CHAR(ydate,'MI')mph
16:10:05  57  FROM svm6102
16:10:05  58  ORDER BY ydate
16:10:05  59  /

Table created.

Elapsed: 00:00:02.04
16:10:07 SQL> 
16:10:07 SQL> -- rpt
16:10:07 SQL> 
16:10:07 SQL> SELECT
16:10:07   2  pair
16:10:07   3  ,COUNT(pair)
16:10:07   4  ,MIN(clse),MAX(clse)
16:10:07   5  ,MIN(ydate),MAX(ydate)
16:10:07   6  FROM svm6122
16:10:07   7  GROUP BY pair
16:10:07   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ajp_usd       19466  78.249976 83.6669853 2010-10-03 20:55:01 2011-01-05 16:05:00

Elapsed: 00:00:00.04
16:10:07 SQL> 
16:10:07 SQL> -- Prepare for derivation of NTILE based params:
16:10:07 SQL> 
16:10:07 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
16:10:07 SQL> CREATE TABLE svm6142 COMPRESS AS
16:10:07   2  SELECT
16:10:07   3  pair
16:10:07   4  ,ydate
16:10:07   5  ,prdate
16:10:07   6  ,clse
16:10:07   7  ,g6
16:10:07   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
16:10:07   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
16:10:07  10  ,CASE WHEN trend IS NULL THEN 1
16:10:07  11  	    WHEN trend =0      THEN 1
16:10:07  12  	    ELSE trend END trend
16:10:07  13  ,cm4
16:10:07  14  ,cm6
16:10:07  15  ,cm8
16:10:07  16  ,cm10
16:10:07  17  ,cm12
16:10:07  18  ,cm14
16:10:07  19  ,cm16
16:10:07  20  ,cm18
16:10:07  21  --
16:10:07  22  ,ca4
16:10:07  23  ,ca6
16:10:07  24  ,ca8
16:10:07  25  ,ca10
16:10:07  26  ,ca12
16:10:07  27  ,ca14
16:10:07  28  ,ca16
16:10:07  29  ,ca18
16:10:07  30  --
16:10:07  31  ,cx4
16:10:07  32  ,cx6
16:10:07  33  ,cx8
16:10:07  34  ,cx10
16:10:07  35  ,cx12
16:10:07  36  ,cx14
16:10:07  37  ,cx16
16:10:07  38  ,cx18
16:10:07  39  --
16:10:07  40  ,crr4
16:10:07  41  ,crr6
16:10:07  42  ,crr8
16:10:07  43  ,crr10
16:10:07  44  ,crr12
16:10:07  45  ,crr14
16:10:07  46  ,crr16
16:10:07  47  ,crr18
16:10:07  48  --
16:10:07  49  ,hh
16:10:07  50  ,d
16:10:07  51  ,w
16:10:07  52  ,mpm
16:10:07  53  ,mph
16:10:07  54  FROM svm6122
16:10:07  55  ORDER BY ydate
16:10:07  56  /

Table created.

Elapsed: 00:00:00.38
16:10:07 SQL> 
16:10:07 SQL> -- rpt
16:10:07 SQL> 
16:10:07 SQL> SELECT
16:10:07   2  pair
16:10:07   3  ,trend
16:10:07   4  ,gatt
16:10:07   5  ,COUNT(pair)
16:10:07   6  ,AVG(g6)
16:10:07   7  FROM svm6142
16:10:07   8  GROUP BY pair,trend,gatt
16:10:07   9  ORDER BY pair,trend,gatt
16:10:07  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4244 -.22701426
ajp_usd 	-1 up	      5178 .223459035
ajp_usd 	-1		 9
ajp_usd 	 1 nup	      5227 -.20362774
ajp_usd 	 1 up	      4745 .206911097
ajp_usd 	 1		63

6 rows selected.

Elapsed: 00:00:00.04
16:10:08 SQL> 
16:10:08 SQL> 
16:10:08 SQL> -- Derive NTILE based params:
16:10:08 SQL> 
16:10:08 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.20
16:10:08 SQL> CREATE TABLE svm6162 COMPRESS AS
16:10:08   2  SELECT
16:10:08   3  pair
16:10:08   4  ,ydate
16:10:08   5  ,prdate
16:10:08   6  ,clse
16:10:08   7  ,g6
16:10:08   8  ,gatt
16:10:08   9  ,gattn
16:10:08  10  ,trend
16:10:08  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
16:10:08  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
16:10:08  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
16:10:08  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
16:10:08  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
16:10:08  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
16:10:08  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
16:10:08  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
16:10:08  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
16:10:08  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
16:10:08  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
16:10:08  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
16:10:08  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
16:10:08  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
16:10:08  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
16:10:08  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
16:10:08  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
16:10:08  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
16:10:08  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
16:10:08  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
16:10:08  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
16:10:08  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
16:10:08  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
16:10:08  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
16:10:08  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
16:10:08  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
16:10:08  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
16:10:08  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
16:10:08  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
16:10:08  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
16:10:08  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
16:10:08  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
16:10:08  43  ,hh  att32
16:10:08  44  ,d   att33
16:10:08  45  ,w   att34
16:10:08  46  ,mpm att35
16:10:08  47  ,mph att36
16:10:08  48  ,trend att37
16:10:08  49  FROM svm6142
16:10:08  50  ORDER BY ydate
16:10:08  51  /

Table created.

Elapsed: 00:00:04.93
16:10:13 SQL> 
16:10:13 SQL> -- rpt
16:10:13 SQL> 
16:10:13 SQL> SELECT
16:10:13   2  pair
16:10:13   3  ,trend
16:10:13   4  ,gatt
16:10:13   5  ,COUNT(pair)
16:10:13   6  ,AVG(g6)
16:10:13   7  FROM svm6162
16:10:13   8  GROUP BY pair,trend,gatt
16:10:13   9  ORDER BY pair,trend,gatt
16:10:13  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ajp_usd 	-1 nup	      4244 -.22701426
ajp_usd 	-1 up	      5178 .223459035
ajp_usd 	-1		 9
ajp_usd 	 1 nup	      5227 -.20362774
ajp_usd 	 1 up	      4745 .206911097
ajp_usd 	 1		63

6 rows selected.

Elapsed: 00:00:00.03
16:10:13 SQL> 
16:10:13 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.22
16:10:13 SQL> CREATE TABLE modsrc COMPRESS AS
16:10:13   2  SELECT
16:10:13   3  pair
16:10:13   4  ,ydate
16:10:13   5  ,prdate
16:10:13   6  ,trend
16:10:13   7  ,g6
16:10:13   8  ,gatt
16:10:13   9  ,gattn
16:10:13  10  FROM svm6162
16:10:13  11  /

Table created.

Elapsed: 00:00:00.10
16:10:13 SQL> 
16:10:13 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.24
16:10:13 SQL> 
16:10:13 SQL> DROP   TABLE ajp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
16:10:13 SQL> CREATE TABLE ajp_ms610 COMPRESS AS
16:10:13   2  SELECT
16:10:13   3  ydate
16:10:13   4  ,trend ajp_trend
16:10:13   5  ,g6    ajp_g6
16:10:13   6  ,gatt  ajp_gatt
16:10:13   7  ,gattn ajp_gattn
16:10:13   8  FROM modsrc
16:10:13   9  /

Table created.

Elapsed: 00:00:00.09
16:10:13 SQL> 
16:10:13 SQL> ANALYZE TABLE ajp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
16:10:14 SQL> 
16:10:14 SQL> -- I need a copy of the attributes:
16:10:14 SQL> 
16:10:14 SQL> 
16:10:14 SQL> DROP   TABLE ajp_att;

Table dropped.

Elapsed: 00:00:00.05
16:10:14 SQL> CREATE TABLE ajp_att COMPRESS AS
16:10:14   2  SELECT
16:10:14   3  ydate
16:10:14   4  ,att00 ajp_att00
16:10:14   5  ,att01 ajp_att01
16:10:14   6  ,att02 ajp_att02
16:10:14   7  ,att03 ajp_att03
16:10:14   8  ,att04 ajp_att04
16:10:14   9  ,att05 ajp_att05
16:10:14  10  ,att06 ajp_att06
16:10:14  11  ,att07 ajp_att07
16:10:14  12  ,att08 ajp_att08
16:10:14  13  ,att09 ajp_att09
16:10:14  14  ,att10 ajp_att10
16:10:14  15  ,att11 ajp_att11
16:10:14  16  ,att12 ajp_att12
16:10:14  17  ,att13 ajp_att13
16:10:14  18  ,att14 ajp_att14
16:10:14  19  ,att15 ajp_att15
16:10:14  20  ,att16 ajp_att16
16:10:14  21  ,att17 ajp_att17
16:10:14  22  ,att18 ajp_att18
16:10:14  23  ,att19 ajp_att19
16:10:14  24  ,att20 ajp_att20
16:10:14  25  ,att21 ajp_att21
16:10:14  26  ,att22 ajp_att22
16:10:14  27  ,att23 ajp_att23
16:10:14  28  ,att24 ajp_att24
16:10:14  29  ,att25 ajp_att25
16:10:14  30  ,att26 ajp_att26
16:10:14  31  ,att27 ajp_att27
16:10:14  32  ,att28 ajp_att28
16:10:14  33  ,att29 ajp_att29
16:10:14  34  ,att30 ajp_att30
16:10:14  35  ,att31 ajp_att31
16:10:14  36  ,att32 ajp_att32
16:10:14  37  ,att33 ajp_att33
16:10:14  38  ,att34 ajp_att34
16:10:14  39  ,att35 ajp_att35
16:10:14  40  ,att36 ajp_att36
16:10:14  41  ,att37 ajp_att37
16:10:14  42  FROM svm6162
16:10:14  43  /

Table created.

Elapsed: 00:00:00.17
16:10:14 SQL> 
16:10:14 SQL> ANALYZE TABLE ajp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
16:10:14 SQL> 
16:10:14 SQL> -- rpt
16:10:14 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19466

Elapsed: 00:00:00.79
16:10:15 SQL> SELECT COUNT(*)FROM ajp_att;

  COUNT(*)
----------
     19466

Elapsed: 00:00:00.00
16:10:15 SQL> 
16:10:15 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
