
SQL*Plus: Release 11.2.0.1.0 Production on Tue Dec 28 19:27:57 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

19:27:57 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
19:27:57 SQL> 19:27:57 SQL> --
19:27:57 SQL> -- eur610.sql
19:27:57 SQL> --
19:27:57 SQL> 
19:27:57 SQL> -- Creates views and tables for backtesting a forex SVM strategy
19:27:57 SQL> 
19:27:57 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.02
19:27:57 SQL> 
19:27:57 SQL> -- I created di5min here:
19:27:57 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
19:27:57 SQL> 
19:27:57 SQL> CREATE OR REPLACE VIEW svm6102 AS
19:27:57   2  SELECT
19:27:57   3  pair
19:27:57   4  ,ydate
19:27:57   5  ,prdate
19:27:57   6  ,rownum rnum -- acts as t in my time-series
19:27:57   7  ,clse
19:27:57   8  -- Derive a bunch of attributes from clse, the latest price:
19:27:57   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
19:27:57  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
19:27:57  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
19:27:57  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
19:27:57  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
19:27:57  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
19:27:57  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
19:27:57  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
19:27:57  17  --
19:27:57  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
19:27:57  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
19:27:57  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
19:27:57  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
19:27:57  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
19:27:57  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
19:27:57  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
19:27:57  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
19:27:57  26  --
19:27:57  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
19:27:57  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
19:27:57  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
19:27:57  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
19:27:57  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
19:27:57  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
19:27:57  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
19:27:57  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
19:27:57  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
19:27:57  36  FROM di5min WHERE pair LIKE'%eur%'
19:27:57  37  AND ydate > sysdate - 95
19:27:57  38  ORDER BY ydate
19:27:57  39  /

View created.

Elapsed: 00:00:00.07
19:27:57 SQL> 
19:27:57 SQL> -- rpt
19:27:57 SQL> 
19:27:57 SQL> SELECT
19:27:57   2  pair
19:27:57   3  ,COUNT(pair)
19:27:57   4  ,MIN(clse),MAX(clse)
19:27:57   5  ,MIN(avg6),MAX(avg6)
19:27:57   6  ,MIN(ydate),MAX(ydate)
19:27:57   7  FROM svm6102
19:27:57   8  GROUP BY pair
19:27:57   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19284    1.29735	   1.4273 1.29875103 1.42436233 2010-09-24 19:30:01 2010-12-28 19:20:00

Elapsed: 00:00:00.88
19:27:58 SQL> 
19:27:58 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
19:27:58 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.03
19:27:58 SQL> CREATE TABLE svm6122 COMPRESS AS
19:27:58   2  SELECT
19:27:58   3  pair
19:27:58   4  ,ydate
19:27:58   5  ,prdate
19:27:58   6  ,clse
19:27:58   7  -- g6 is important. I want to predict g6:
19:27:58   8  ,ld6 - clse g6
19:27:58   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
19:27:58  10  -- I want more attributes from the ones I derived above:
19:27:58  11  -- clse relation to moving-min
19:27:58  12  ,clse-min4  cm4
19:27:58  13  ,clse-min6  cm6
19:27:58  14  ,clse-min8  cm8
19:27:58  15  ,clse-min10 cm10
19:27:58  16  ,clse-min12 cm12
19:27:58  17  ,clse-min14 cm14
19:27:58  18  ,clse-min16 cm16
19:27:58  19  ,clse-min18 cm18
19:27:58  20  -- clse relation to moving-avg
19:27:58  21  ,clse-avg4  ca4
19:27:58  22  ,clse-avg6  ca6
19:27:58  23  ,clse-avg8  ca8
19:27:58  24  ,clse-avg10 ca10
19:27:58  25  ,clse-avg12 ca12
19:27:58  26  ,clse-avg14 ca14
19:27:58  27  ,clse-avg16 ca16
19:27:58  28  ,clse-avg18 ca18
19:27:58  29  -- clse relation to moving-max
19:27:58  30  ,clse-max4  cx4
19:27:58  31  ,clse-max6  cx6
19:27:58  32  ,clse-max8  cx8
19:27:58  33  ,clse-max10 cx10
19:27:58  34  ,clse-max12 cx12
19:27:58  35  ,clse-max14 cx14
19:27:58  36  ,clse-max16 cx16
19:27:58  37  ,clse-max18 cx18
19:27:58  38  -- Derive more attributes.
19:27:58  39  -- I want to use CORR() here to help SVM see the shape of the series.
19:27:58  40  -- But COVAR_POP is more stable:
19:27:58  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
19:27:58  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
19:27:58  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
19:27:58  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
19:27:58  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
19:27:58  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
19:27:58  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
19:27:58  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
19:27:58  49  -- Derive date related attributes:
19:27:58  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
19:27:58  51  ,0+TO_CHAR(ydate,'D')d
19:27:58  52  ,0+TO_CHAR(ydate,'W')w
19:27:58  53  -- mpm stands for minutes-past-midnight:
19:27:58  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
19:27:58  55  -- mph stands for minutes-past-hour:
19:27:58  56  ,0+TO_CHAR(ydate,'MI')mph
19:27:58  57  FROM svm6102
19:27:58  58  ORDER BY ydate
19:27:58  59  /

Table created.

Elapsed: 00:00:02.34
19:28:00 SQL> 
19:28:00 SQL> -- rpt
19:28:00 SQL> 
19:28:00 SQL> SELECT
19:28:00   2  pair
19:28:00   3  ,COUNT(pair)
19:28:00   4  ,MIN(clse),MAX(clse)
19:28:00   5  ,MIN(ydate),MAX(ydate)
19:28:00   6  FROM svm6122
19:28:00   7  GROUP BY pair
19:28:00   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19284    1.29735	   1.4273 2010-09-24 19:30:01 2010-12-28 19:20:00

Elapsed: 00:00:00.06
19:28:00 SQL> 
19:28:00 SQL> -- Prepare for derivation of NTILE based params:
19:28:00 SQL> 
19:28:00 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.95
19:28:01 SQL> CREATE TABLE svm6142 COMPRESS AS
19:28:01   2  SELECT
19:28:01   3  pair
19:28:01   4  ,ydate
19:28:01   5  ,prdate
19:28:01   6  ,clse
19:28:01   7  ,g6
19:28:01   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
19:28:01   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
19:28:01  10  ,CASE WHEN trend IS NULL THEN 1
19:28:01  11  	    WHEN trend =0      THEN 1
19:28:01  12  	    ELSE trend END trend
19:28:01  13  ,cm4
19:28:01  14  ,cm6
19:28:01  15  ,cm8
19:28:01  16  ,cm10
19:28:01  17  ,cm12
19:28:01  18  ,cm14
19:28:01  19  ,cm16
19:28:01  20  ,cm18
19:28:01  21  --
19:28:01  22  ,ca4
19:28:01  23  ,ca6
19:28:01  24  ,ca8
19:28:01  25  ,ca10
19:28:01  26  ,ca12
19:28:01  27  ,ca14
19:28:01  28  ,ca16
19:28:01  29  ,ca18
19:28:01  30  --
19:28:01  31  ,cx4
19:28:01  32  ,cx6
19:28:01  33  ,cx8
19:28:01  34  ,cx10
19:28:01  35  ,cx12
19:28:01  36  ,cx14
19:28:01  37  ,cx16
19:28:01  38  ,cx18
19:28:01  39  --
19:28:01  40  ,crr4
19:28:01  41  ,crr6
19:28:01  42  ,crr8
19:28:01  43  ,crr10
19:28:01  44  ,crr12
19:28:01  45  ,crr14
19:28:01  46  ,crr16
19:28:01  47  ,crr18
19:28:01  48  --
19:28:01  49  ,hh
19:28:01  50  ,d
19:28:01  51  ,w
19:28:01  52  ,mpm
19:28:01  53  ,mph
19:28:01  54  FROM svm6122
19:28:01  55  ORDER BY ydate
19:28:01  56  /

Table created.

Elapsed: 00:00:00.36
19:28:02 SQL> 
19:28:02 SQL> -- rpt
19:28:02 SQL> 
19:28:02 SQL> SELECT
19:28:02   2  pair
19:28:02   3  ,trend
19:28:02   4  ,gatt
19:28:02   5  ,COUNT(pair)
19:28:02   6  ,AVG(g6)
19:28:02   7  FROM svm6142
19:28:02   8  GROUP BY pair,trend,gatt
19:28:02   9  ORDER BY pair,trend,gatt
19:28:02  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6056 -.00309058
eur_usd 	-1 up	      3630 .004485382
eur_usd 	-1		72
eur_usd 	 1 nup	      5881 -.00319024
eur_usd 	 1 up	      3645 .005140343

Elapsed: 00:00:00.05
19:28:02 SQL> 
19:28:02 SQL> 
19:28:02 SQL> -- Derive NTILE based params:
19:28:02 SQL> 
19:28:02 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.50
19:28:02 SQL> CREATE TABLE svm6162 COMPRESS AS
19:28:02   2  SELECT
19:28:02   3  pair
19:28:02   4  ,ydate
19:28:02   5  ,prdate
19:28:02   6  ,clse
19:28:02   7  ,g6
19:28:02   8  ,gatt
19:28:02   9  ,gattn
19:28:02  10  ,trend
19:28:02  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
19:28:02  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
19:28:02  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
19:28:02  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
19:28:02  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
19:28:02  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
19:28:02  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
19:28:02  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
19:28:02  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
19:28:02  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
19:28:02  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
19:28:02  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
19:28:02  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
19:28:02  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
19:28:02  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
19:28:02  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
19:28:02  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
19:28:02  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
19:28:02  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
19:28:02  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
19:28:02  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
19:28:02  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
19:28:02  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
19:28:02  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
19:28:02  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
19:28:02  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
19:28:02  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
19:28:02  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
19:28:02  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
19:28:02  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
19:28:02  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
19:28:02  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
19:28:02  43  ,hh  att32
19:28:02  44  ,d   att33
19:28:02  45  ,w   att34
19:28:02  46  ,mpm att35
19:28:02  47  ,mph att36
19:28:02  48  ,trend att37
19:28:02  49  FROM svm6142
19:28:02  50  ORDER BY ydate
19:28:02  51  /

Table created.

Elapsed: 00:00:04.69
19:28:07 SQL> 
19:28:07 SQL> -- rpt
19:28:07 SQL> 
19:28:07 SQL> SELECT
19:28:07   2  pair
19:28:07   3  ,trend
19:28:07   4  ,gatt
19:28:07   5  ,COUNT(pair)
19:28:07   6  ,AVG(g6)
19:28:07   7  FROM svm6162
19:28:07   8  GROUP BY pair,trend,gatt
19:28:07   9  ORDER BY pair,trend,gatt
19:28:07  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      6056 -.00309058
eur_usd 	-1 up	      3630 .004485382
eur_usd 	-1		72
eur_usd 	 1 nup	      5881 -.00319024
eur_usd 	 1 up	      3645 .005140343

Elapsed: 00:00:00.03
19:28:07 SQL> 
19:28:07 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.22
19:28:07 SQL> CREATE TABLE modsrc COMPRESS AS
19:28:07   2  SELECT
19:28:07   3  pair
19:28:07   4  ,ydate
19:28:07   5  ,prdate
19:28:07   6  ,trend
19:28:07   7  ,g6
19:28:07   8  ,gatt
19:28:07   9  ,gattn
19:28:07  10  FROM svm6162
19:28:07  11  /

Table created.

Elapsed: 00:00:00.08
19:28:07 SQL> 
19:28:07 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
19:28:08 SQL> 
19:28:08 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.13
19:28:08 SQL> CREATE TABLE eur_ms610 COMPRESS AS
19:28:08   2  SELECT
19:28:08   3  ydate
19:28:08   4  ,trend eur_trend
19:28:08   5  ,g6    eur_g6
19:28:08   6  ,gatt  eur_gatt
19:28:08   7  ,gattn eur_gattn
19:28:08   8  FROM modsrc
19:28:08   9  /

Table created.

Elapsed: 00:00:00.05
19:28:08 SQL> 
19:28:08 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
19:28:08 SQL> 
19:28:08 SQL> -- I need a copy of the attributes:
19:28:08 SQL> 
19:28:08 SQL> 
19:28:08 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.03
19:28:08 SQL> CREATE TABLE eur_att COMPRESS AS
19:28:08   2  SELECT
19:28:08   3  ydate
19:28:08   4  ,att00 eur_att00
19:28:08   5  ,att01 eur_att01
19:28:08   6  ,att02 eur_att02
19:28:08   7  ,att03 eur_att03
19:28:08   8  ,att04 eur_att04
19:28:08   9  ,att05 eur_att05
19:28:08  10  ,att06 eur_att06
19:28:08  11  ,att07 eur_att07
19:28:08  12  ,att08 eur_att08
19:28:08  13  ,att09 eur_att09
19:28:08  14  ,att10 eur_att10
19:28:08  15  ,att11 eur_att11
19:28:08  16  ,att12 eur_att12
19:28:08  17  ,att13 eur_att13
19:28:08  18  ,att14 eur_att14
19:28:08  19  ,att15 eur_att15
19:28:08  20  ,att16 eur_att16
19:28:08  21  ,att17 eur_att17
19:28:08  22  ,att18 eur_att18
19:28:08  23  ,att19 eur_att19
19:28:08  24  ,att20 eur_att20
19:28:08  25  ,att21 eur_att21
19:28:08  26  ,att22 eur_att22
19:28:08  27  ,att23 eur_att23
19:28:08  28  ,att24 eur_att24
19:28:08  29  ,att25 eur_att25
19:28:08  30  ,att26 eur_att26
19:28:08  31  ,att27 eur_att27
19:28:08  32  ,att28 eur_att28
19:28:08  33  ,att29 eur_att29
19:28:08  34  ,att30 eur_att30
19:28:08  35  ,att31 eur_att31
19:28:08  36  ,att32 eur_att32
19:28:08  37  ,att33 eur_att33
19:28:08  38  ,att34 eur_att34
19:28:08  39  ,att35 eur_att35
19:28:08  40  ,att36 eur_att36
19:28:08  41  ,att37 eur_att37
19:28:08  42  FROM svm6162
19:28:08  43  /

Table created.

Elapsed: 00:00:00.16
19:28:08 SQL> 
19:28:08 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.42
19:28:09 SQL> 
19:28:09 SQL> -- rpt
19:28:09 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19284

Elapsed: 00:00:00.83
19:28:09 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19284

Elapsed: 00:00:00.01
19:28:09 SQL> 
19:28:09 SQL> --
19:28:09 SQL> -- aud610.sql
19:28:09 SQL> --
19:28:09 SQL> 
19:28:09 SQL> -- Creates views and tables for backtesting a forex SVM strategy
19:28:09 SQL> 
19:28:09 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.45
19:28:10 SQL> 
19:28:10 SQL> -- I created di5min here:
19:28:10 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
19:28:10 SQL> 
19:28:10 SQL> CREATE OR REPLACE VIEW svm6102 AS
19:28:10   2  SELECT
19:28:10   3  pair
19:28:10   4  ,ydate
19:28:10   5  ,prdate
19:28:10   6  ,rownum rnum -- acts as t in my time-series
19:28:10   7  ,clse
19:28:10   8  -- Derive a bunch of attributes from clse, the latest price:
19:28:10   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
19:28:10  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
19:28:10  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
19:28:10  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
19:28:10  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
19:28:10  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
19:28:10  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
19:28:10  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
19:28:10  17  --
19:28:10  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
19:28:10  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
19:28:10  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
19:28:10  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
19:28:10  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
19:28:10  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
19:28:10  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
19:28:10  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
19:28:10  26  --
19:28:10  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
19:28:10  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
19:28:10  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
19:28:10  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
19:28:10  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
19:28:10  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
19:28:10  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
19:28:10  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
19:28:10  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
19:28:10  36  FROM di5min WHERE pair LIKE'%aud%'
19:28:10  37  AND ydate > sysdate - 95
19:28:10  38  ORDER BY ydate
19:28:10  39  /

View created.

Elapsed: 00:00:00.03
19:28:10 SQL> 
19:28:10 SQL> -- rpt
19:28:10 SQL> 
19:28:10 SQL> SELECT
19:28:10   2  pair
19:28:10   3  ,COUNT(pair)
19:28:10   4  ,MIN(clse),MAX(clse)
19:28:10   5  ,MIN(avg6),MAX(avg6)
19:28:10   6  ,MIN(ydate),MAX(ydate)
19:28:10   7  FROM svm6102
19:28:10   8  GROUP BY pair
19:28:10   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19281	.95405	   1.0181 .957141438 1.01556438 2010-09-24 19:30:01 2010-12-28 19:20:00

Elapsed: 00:00:00.86
19:28:11 SQL> 
19:28:11 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
19:28:11 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.20
19:28:11 SQL> CREATE TABLE svm6122 COMPRESS AS
19:28:11   2  SELECT
19:28:11   3  pair
19:28:11   4  ,ydate
19:28:11   5  ,prdate
19:28:11   6  ,clse
19:28:11   7  -- g6 is important. I want to predict g6:
19:28:11   8  ,ld6 - clse g6
19:28:11   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
19:28:11  10  -- I want more attributes from the ones I derived above:
19:28:11  11  -- clse relation to moving-min
19:28:11  12  ,clse-min4  cm4
19:28:11  13  ,clse-min6  cm6
19:28:11  14  ,clse-min8  cm8
19:28:11  15  ,clse-min10 cm10
19:28:11  16  ,clse-min12 cm12
19:28:11  17  ,clse-min14 cm14
19:28:11  18  ,clse-min16 cm16
19:28:11  19  ,clse-min18 cm18
19:28:11  20  -- clse relation to moving-avg
19:28:11  21  ,clse-avg4  ca4
19:28:11  22  ,clse-avg6  ca6
19:28:11  23  ,clse-avg8  ca8
19:28:11  24  ,clse-avg10 ca10
19:28:11  25  ,clse-avg12 ca12
19:28:11  26  ,clse-avg14 ca14
19:28:11  27  ,clse-avg16 ca16
19:28:11  28  ,clse-avg18 ca18
19:28:11  29  -- clse relation to moving-max
19:28:11  30  ,clse-max4  cx4
19:28:11  31  ,clse-max6  cx6
19:28:11  32  ,clse-max8  cx8
19:28:11  33  ,clse-max10 cx10
19:28:11  34  ,clse-max12 cx12
19:28:11  35  ,clse-max14 cx14
19:28:11  36  ,clse-max16 cx16
19:28:11  37  ,clse-max18 cx18
19:28:11  38  -- Derive more attributes.
19:28:11  39  -- I want to use CORR() here to help SVM see the shape of the series.
19:28:11  40  -- But COVAR_POP is more stable:
19:28:11  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
19:28:11  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
19:28:11  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
19:28:11  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
19:28:11  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
19:28:11  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
19:28:11  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
19:28:11  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
19:28:11  49  -- Derive date related attributes:
19:28:11  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
19:28:11  51  ,0+TO_CHAR(ydate,'D')d
19:28:11  52  ,0+TO_CHAR(ydate,'W')w
19:28:11  53  -- mpm stands for minutes-past-midnight:
19:28:11  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
19:28:11  55  -- mph stands for minutes-past-hour:
19:28:11  56  ,0+TO_CHAR(ydate,'MI')mph
19:28:11  57  FROM svm6102
19:28:11  58  ORDER BY ydate
19:28:11  59  /

Table created.

Elapsed: 00:00:02.03
19:28:13 SQL> 
19:28:13 SQL> -- rpt
19:28:13 SQL> 
19:28:13 SQL> SELECT
19:28:13   2  pair
19:28:13   3  ,COUNT(pair)
19:28:13   4  ,MIN(clse),MAX(clse)
19:28:13   5  ,MIN(ydate),MAX(ydate)
19:28:13   6  FROM svm6122
19:28:13   7  GROUP BY pair
19:28:13   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19281	.95405	   1.0181 2010-09-24 19:30:01 2010-12-28 19:20:00

Elapsed: 00:00:00.04
19:28:13 SQL> 
19:28:13 SQL> -- Prepare for derivation of NTILE based params:
19:28:13 SQL> 
19:28:13 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.25
19:28:13 SQL> CREATE TABLE svm6142 COMPRESS AS
19:28:13   2  SELECT
19:28:13   3  pair
19:28:13   4  ,ydate
19:28:13   5  ,prdate
19:28:13   6  ,clse
19:28:13   7  ,g6
19:28:13   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
19:28:13   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
19:28:13  10  ,CASE WHEN trend IS NULL THEN 1
19:28:13  11  	    WHEN trend =0      THEN 1
19:28:13  12  	    ELSE trend END trend
19:28:13  13  ,cm4
19:28:13  14  ,cm6
19:28:13  15  ,cm8
19:28:13  16  ,cm10
19:28:13  17  ,cm12
19:28:13  18  ,cm14
19:28:13  19  ,cm16
19:28:13  20  ,cm18
19:28:13  21  --
19:28:13  22  ,ca4
19:28:13  23  ,ca6
19:28:13  24  ,ca8
19:28:13  25  ,ca10
19:28:13  26  ,ca12
19:28:13  27  ,ca14
19:28:13  28  ,ca16
19:28:13  29  ,ca18
19:28:13  30  --
19:28:13  31  ,cx4
19:28:13  32  ,cx6
19:28:13  33  ,cx8
19:28:13  34  ,cx10
19:28:13  35  ,cx12
19:28:13  36  ,cx14
19:28:13  37  ,cx16
19:28:13  38  ,cx18
19:28:13  39  --
19:28:13  40  ,crr4
19:28:13  41  ,crr6
19:28:13  42  ,crr8
19:28:13  43  ,crr10
19:28:13  44  ,crr12
19:28:13  45  ,crr14
19:28:13  46  ,crr16
19:28:13  47  ,crr18
19:28:13  48  --
19:28:13  49  ,hh
19:28:13  50  ,d
19:28:13  51  ,w
19:28:13  52  ,mpm
19:28:13  53  ,mph
19:28:13  54  FROM svm6122
19:28:13  55  ORDER BY ydate
19:28:13  56  /

Table created.

Elapsed: 00:00:00.36
19:28:14 SQL> 
19:28:14 SQL> -- rpt
19:28:14 SQL> 
19:28:14 SQL> SELECT
19:28:14   2  pair
19:28:14   3  ,trend
19:28:14   4  ,gatt
19:28:14   5  ,COUNT(pair)
19:28:14   6  ,AVG(g6)
19:28:14   7  FROM svm6142
19:28:14   8  GROUP BY pair,trend,gatt
19:28:14   9  ORDER BY pair,trend,gatt
19:28:14  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5109 -.00214949
aud_usd 	-1 up	      3772 .003741417
aud_usd 	-1		35
aud_usd 	 1 nup	      6681 -.00212501
aud_usd 	 1 up	      3647 .004062925
aud_usd 	 1		37

6 rows selected.

Elapsed: 00:00:00.04
19:28:14 SQL> 
19:28:14 SQL> 
19:28:14 SQL> -- Derive NTILE based params:
19:28:14 SQL> 
19:28:14 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.18
19:28:14 SQL> CREATE TABLE svm6162 COMPRESS AS
19:28:14   2  SELECT
19:28:14   3  pair
19:28:14   4  ,ydate
19:28:14   5  ,prdate
19:28:14   6  ,clse
19:28:14   7  ,g6
19:28:14   8  ,gatt
19:28:14   9  ,gattn
19:28:14  10  ,trend
19:28:14  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
19:28:14  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
19:28:14  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
19:28:14  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
19:28:14  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
19:28:14  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
19:28:14  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
19:28:14  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
19:28:14  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
19:28:14  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
19:28:14  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
19:28:14  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
19:28:14  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
19:28:14  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
19:28:14  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
19:28:14  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
19:28:14  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
19:28:14  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
19:28:14  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
19:28:14  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
19:28:14  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
19:28:14  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
19:28:14  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
19:28:14  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
19:28:14  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
19:28:14  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
19:28:14  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
19:28:14  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
19:28:14  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
19:28:14  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
19:28:14  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
19:28:14  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
19:28:14  43  ,hh  att32
19:28:14  44  ,d   att33
19:28:14  45  ,w   att34
19:28:14  46  ,mpm att35
19:28:14  47  ,mph att36
19:28:14  48  ,trend att37
19:28:14  49  FROM svm6142
19:28:14  50  ORDER BY ydate
19:28:14  51  /

Table created.

Elapsed: 00:00:04.82
19:28:19 SQL> 
19:28:19 SQL> -- rpt
19:28:19 SQL> 
19:28:19 SQL> SELECT
19:28:19   2  pair
19:28:19   3  ,trend
19:28:19   4  ,gatt
19:28:19   5  ,COUNT(pair)
19:28:19   6  ,AVG(g6)
19:28:19   7  FROM svm6162
19:28:19   8  GROUP BY pair,trend,gatt
19:28:19   9  ORDER BY pair,trend,gatt
19:28:19  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5109 -.00214949
aud_usd 	-1 up	      3772 .003741417
aud_usd 	-1		35
aud_usd 	 1 nup	      6681 -.00212501
aud_usd 	 1 up	      3647 .004062925
aud_usd 	 1		37

6 rows selected.

Elapsed: 00:00:00.03
19:28:19 SQL> 
19:28:19 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
19:28:19 SQL> CREATE TABLE modsrc COMPRESS AS
19:28:19   2  SELECT
19:28:19   3  pair
19:28:19   4  ,ydate
19:28:19   5  ,prdate
19:28:19   6  ,trend
19:28:19   7  ,g6
19:28:19   8  ,gatt
19:28:19   9  ,gattn
19:28:19  10  FROM svm6162
19:28:19  11  /

Table created.

Elapsed: 00:00:00.08
19:28:19 SQL> 
19:28:19 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
19:28:19 SQL> 
19:28:19 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
19:28:19 SQL> CREATE TABLE aud_ms610 COMPRESS AS
19:28:19   2  SELECT
19:28:19   3  ydate
19:28:19   4  ,trend aud_trend
19:28:19   5  ,g6    aud_g6
19:28:19   6  ,gatt  aud_gatt
19:28:19   7  ,gattn aud_gattn
19:28:19   8  FROM modsrc
19:28:19   9  /

Table created.

Elapsed: 00:00:00.07
19:28:19 SQL> 
19:28:19 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
19:28:19 SQL> 
19:28:19 SQL> -- I need a copy of the attributes:
19:28:19 SQL> 
19:28:19 SQL> 
19:28:19 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.11
19:28:20 SQL> CREATE TABLE aud_att COMPRESS AS
19:28:20   2  SELECT
19:28:20   3  ydate
19:28:20   4  ,att00 aud_att00
19:28:20   5  ,att01 aud_att01
19:28:20   6  ,att02 aud_att02
19:28:20   7  ,att03 aud_att03
19:28:20   8  ,att04 aud_att04
19:28:20   9  ,att05 aud_att05
19:28:20  10  ,att06 aud_att06
19:28:20  11  ,att07 aud_att07
19:28:20  12  ,att08 aud_att08
19:28:20  13  ,att09 aud_att09
19:28:20  14  ,att10 aud_att10
19:28:20  15  ,att11 aud_att11
19:28:20  16  ,att12 aud_att12
19:28:20  17  ,att13 aud_att13
19:28:20  18  ,att14 aud_att14
19:28:20  19  ,att15 aud_att15
19:28:20  20  ,att16 aud_att16
19:28:20  21  ,att17 aud_att17
19:28:20  22  ,att18 aud_att18
19:28:20  23  ,att19 aud_att19
19:28:20  24  ,att20 aud_att20
19:28:20  25  ,att21 aud_att21
19:28:20  26  ,att22 aud_att22
19:28:20  27  ,att23 aud_att23
19:28:20  28  ,att24 aud_att24
19:28:20  29  ,att25 aud_att25
19:28:20  30  ,att26 aud_att26
19:28:20  31  ,att27 aud_att27
19:28:20  32  ,att28 aud_att28
19:28:20  33  ,att29 aud_att29
19:28:20  34  ,att30 aud_att30
19:28:20  35  ,att31 aud_att31
19:28:20  36  ,att32 aud_att32
19:28:20  37  ,att33 aud_att33
19:28:20  38  ,att34 aud_att34
19:28:20  39  ,att35 aud_att35
19:28:20  40  ,att36 aud_att36
19:28:20  41  ,att37 aud_att37
19:28:20  42  FROM svm6162
19:28:20  43  /

Table created.

Elapsed: 00:00:00.17
19:28:20 SQL> 
19:28:20 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
19:28:20 SQL> 
19:28:20 SQL> -- rpt
19:28:20 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19281

Elapsed: 00:00:00.83
19:28:21 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19281

Elapsed: 00:00:00.00
19:28:21 SQL> 
19:28:21 SQL> --
19:28:21 SQL> -- gbp610.sql
19:28:21 SQL> --
19:28:21 SQL> 
19:28:21 SQL> -- Creates views and tables for backtesting a forex SVM strategy
19:28:21 SQL> 
19:28:21 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
19:28:21 SQL> 
19:28:21 SQL> -- I created di5min here:
19:28:21 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
19:28:21 SQL> 
19:28:21 SQL> CREATE OR REPLACE VIEW svm6102 AS
19:28:21   2  SELECT
19:28:21   3  pair
19:28:21   4  ,ydate
19:28:21   5  ,prdate
19:28:21   6  ,rownum rnum -- acts as t in my time-series
19:28:21   7  ,clse
19:28:21   8  -- Derive a bunch of attributes from clse, the latest price:
19:28:21   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
19:28:21  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
19:28:21  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
19:28:21  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
19:28:21  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
19:28:21  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
19:28:21  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
19:28:21  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
19:28:21  17  --
19:28:21  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
19:28:21  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
19:28:21  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
19:28:21  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
19:28:21  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
19:28:21  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
19:28:21  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
19:28:21  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
19:28:21  26  --
19:28:21  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
19:28:21  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
19:28:21  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
19:28:21  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
19:28:21  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
19:28:21  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
19:28:21  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
19:28:21  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
19:28:21  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
19:28:21  36  FROM di5min WHERE pair LIKE'%gbp%'
19:28:21  37  AND ydate > sysdate - 95
19:28:21  38  ORDER BY ydate
19:28:21  39  /

View created.

Elapsed: 00:00:00.05
19:28:21 SQL> 
19:28:21 SQL> -- rpt
19:28:21 SQL> 
19:28:21 SQL> SELECT
19:28:21   2  pair
19:28:21   3  ,COUNT(pair)
19:28:21   4  ,MIN(clse),MAX(clse)
19:28:21   5  ,MIN(avg6),MAX(avg6)
19:28:21   6  ,MIN(ydate),MAX(ydate)
19:28:21   7  FROM svm6102
19:28:21   8  GROUP BY pair
19:28:21   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19284   1.535475	   1.6295 1.53821404 1.62716986 2010-09-24 19:30:01 2010-12-28 19:25:00

Elapsed: 00:00:00.83
19:28:22 SQL> 
19:28:22 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
19:28:22 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
19:28:22 SQL> CREATE TABLE svm6122 COMPRESS AS
19:28:22   2  SELECT
19:28:22   3  pair
19:28:22   4  ,ydate
19:28:22   5  ,prdate
19:28:22   6  ,clse
19:28:22   7  -- g6 is important. I want to predict g6:
19:28:22   8  ,ld6 - clse g6
19:28:22   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
19:28:22  10  -- I want more attributes from the ones I derived above:
19:28:22  11  -- clse relation to moving-min
19:28:22  12  ,clse-min4  cm4
19:28:22  13  ,clse-min6  cm6
19:28:22  14  ,clse-min8  cm8
19:28:22  15  ,clse-min10 cm10
19:28:22  16  ,clse-min12 cm12
19:28:22  17  ,clse-min14 cm14
19:28:22  18  ,clse-min16 cm16
19:28:22  19  ,clse-min18 cm18
19:28:22  20  -- clse relation to moving-avg
19:28:22  21  ,clse-avg4  ca4
19:28:22  22  ,clse-avg6  ca6
19:28:22  23  ,clse-avg8  ca8
19:28:22  24  ,clse-avg10 ca10
19:28:22  25  ,clse-avg12 ca12
19:28:22  26  ,clse-avg14 ca14
19:28:22  27  ,clse-avg16 ca16
19:28:22  28  ,clse-avg18 ca18
19:28:22  29  -- clse relation to moving-max
19:28:22  30  ,clse-max4  cx4
19:28:22  31  ,clse-max6  cx6
19:28:22  32  ,clse-max8  cx8
19:28:22  33  ,clse-max10 cx10
19:28:22  34  ,clse-max12 cx12
19:28:22  35  ,clse-max14 cx14
19:28:22  36  ,clse-max16 cx16
19:28:22  37  ,clse-max18 cx18
19:28:22  38  -- Derive more attributes.
19:28:22  39  -- I want to use CORR() here to help SVM see the shape of the series.
19:28:22  40  -- But COVAR_POP is more stable:
19:28:22  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
19:28:22  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
19:28:22  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
19:28:22  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
19:28:22  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
19:28:22  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
19:28:22  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
19:28:22  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
19:28:22  49  -- Derive date related attributes:
19:28:22  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
19:28:22  51  ,0+TO_CHAR(ydate,'D')d
19:28:22  52  ,0+TO_CHAR(ydate,'W')w
19:28:22  53  -- mpm stands for minutes-past-midnight:
19:28:22  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
19:28:22  55  -- mph stands for minutes-past-hour:
19:28:22  56  ,0+TO_CHAR(ydate,'MI')mph
19:28:22  57  FROM svm6102
19:28:22  58  ORDER BY ydate
19:28:22  59  /

Table created.

Elapsed: 00:00:02.00
19:28:24 SQL> 
19:28:24 SQL> -- rpt
19:28:24 SQL> 
19:28:24 SQL> SELECT
19:28:24   2  pair
19:28:24   3  ,COUNT(pair)
19:28:24   4  ,MIN(clse),MAX(clse)
19:28:24   5  ,MIN(ydate),MAX(ydate)
19:28:24   6  FROM svm6122
19:28:24   7  GROUP BY pair
19:28:24   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19284   1.535475	   1.6295 2010-09-24 19:30:01 2010-12-28 19:25:00

Elapsed: 00:00:00.04
19:28:25 SQL> 
19:28:25 SQL> -- Prepare for derivation of NTILE based params:
19:28:25 SQL> 
19:28:25 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.20
19:28:25 SQL> CREATE TABLE svm6142 COMPRESS AS
19:28:25   2  SELECT
19:28:25   3  pair
19:28:25   4  ,ydate
19:28:25   5  ,prdate
19:28:25   6  ,clse
19:28:25   7  ,g6
19:28:25   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
19:28:25   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
19:28:25  10  ,CASE WHEN trend IS NULL THEN 1
19:28:25  11  	    WHEN trend =0      THEN 1
19:28:25  12  	    ELSE trend END trend
19:28:25  13  ,cm4
19:28:25  14  ,cm6
19:28:25  15  ,cm8
19:28:25  16  ,cm10
19:28:25  17  ,cm12
19:28:25  18  ,cm14
19:28:25  19  ,cm16
19:28:25  20  ,cm18
19:28:25  21  --
19:28:25  22  ,ca4
19:28:25  23  ,ca6
19:28:25  24  ,ca8
19:28:25  25  ,ca10
19:28:25  26  ,ca12
19:28:25  27  ,ca14
19:28:25  28  ,ca16
19:28:25  29  ,ca18
19:28:25  30  --
19:28:25  31  ,cx4
19:28:25  32  ,cx6
19:28:25  33  ,cx8
19:28:25  34  ,cx10
19:28:25  35  ,cx12
19:28:25  36  ,cx14
19:28:25  37  ,cx16
19:28:25  38  ,cx18
19:28:25  39  --
19:28:25  40  ,crr4
19:28:25  41  ,crr6
19:28:25  42  ,crr8
19:28:25  43  ,crr10
19:28:25  44  ,crr12
19:28:25  45  ,crr14
19:28:25  46  ,crr16
19:28:25  47  ,crr18
19:28:25  48  --
19:28:25  49  ,hh
19:28:25  50  ,d
19:28:25  51  ,w
19:28:25  52  ,mpm
19:28:25  53  ,mph
19:28:25  54  FROM svm6122
19:28:25  55  ORDER BY ydate
19:28:25  56  /

Table created.

Elapsed: 00:00:00.34
19:28:25 SQL> 
19:28:25 SQL> -- rpt
19:28:25 SQL> 
19:28:25 SQL> SELECT
19:28:25   2  pair
19:28:25   3  ,trend
19:28:25   4  ,gatt
19:28:25   5  ,COUNT(pair)
19:28:25   6  ,AVG(g6)
19:28:25   7  FROM svm6142
19:28:25   8  GROUP BY pair,trend,gatt
19:28:25   9  ORDER BY pair,trend,gatt
19:28:25  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6261 -.00257019
gbp_usd 	-1 up	      3468 .004262774
gbp_usd 	-1		62
gbp_usd 	 1 nup	      6122 -.00269056
gbp_usd 	 1 up	      3361 .004356966
gbp_usd 	 1		10

6 rows selected.

Elapsed: 00:00:00.04
19:28:25 SQL> 
19:28:25 SQL> 
19:28:25 SQL> -- Derive NTILE based params:
19:28:25 SQL> 
19:28:25 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
19:28:25 SQL> CREATE TABLE svm6162 COMPRESS AS
19:28:25   2  SELECT
19:28:25   3  pair
19:28:25   4  ,ydate
19:28:25   5  ,prdate
19:28:25   6  ,clse
19:28:25   7  ,g6
19:28:25   8  ,gatt
19:28:25   9  ,gattn
19:28:25  10  ,trend
19:28:25  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
19:28:25  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
19:28:25  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
19:28:25  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
19:28:25  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
19:28:25  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
19:28:25  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
19:28:25  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
19:28:25  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
19:28:25  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
19:28:25  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
19:28:25  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
19:28:25  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
19:28:25  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
19:28:25  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
19:28:25  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
19:28:25  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
19:28:25  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
19:28:25  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
19:28:25  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
19:28:25  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
19:28:25  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
19:28:25  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
19:28:25  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
19:28:25  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
19:28:25  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
19:28:25  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
19:28:25  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
19:28:25  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
19:28:25  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
19:28:25  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
19:28:25  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
19:28:25  43  ,hh  att32
19:28:25  44  ,d   att33
19:28:25  45  ,w   att34
19:28:25  46  ,mpm att35
19:28:25  47  ,mph att36
19:28:25  48  ,trend att37
19:28:25  49  FROM svm6142
19:28:25  50  ORDER BY ydate
19:28:25  51  /

Table created.

Elapsed: 00:00:04.59
19:28:30 SQL> 
19:28:30 SQL> -- rpt
19:28:30 SQL> 
19:28:30 SQL> SELECT
19:28:30   2  pair
19:28:30   3  ,trend
19:28:30   4  ,gatt
19:28:30   5  ,COUNT(pair)
19:28:30   6  ,AVG(g6)
19:28:30   7  FROM svm6162
19:28:30   8  GROUP BY pair,trend,gatt
19:28:30   9  ORDER BY pair,trend,gatt
19:28:30  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6261 -.00257019
gbp_usd 	-1 up	      3468 .004262774
gbp_usd 	-1		62
gbp_usd 	 1 nup	      6122 -.00269056
gbp_usd 	 1 up	      3361 .004356966
gbp_usd 	 1		10

6 rows selected.

Elapsed: 00:00:00.03
19:28:30 SQL> 
19:28:30 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
19:28:30 SQL> CREATE TABLE modsrc COMPRESS AS
19:28:30   2  SELECT
19:28:30   3  pair
19:28:30   4  ,ydate
19:28:30   5  ,prdate
19:28:30   6  ,trend
19:28:30   7  ,g6
19:28:30   8  ,gatt
19:28:30   9  ,gattn
19:28:30  10  FROM svm6162
19:28:30  11  /

Table created.

Elapsed: 00:00:00.08
19:28:30 SQL> 
19:28:30 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
19:28:30 SQL> 
19:28:30 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
19:28:30 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
19:28:30   2  SELECT
19:28:30   3  ydate
19:28:30   4  ,trend gbp_trend
19:28:30   5  ,g6    gbp_g6
19:28:30   6  ,gatt  gbp_gatt
19:28:30   7  ,gattn gbp_gattn
19:28:30   8  FROM modsrc
19:28:30   9  /

Table created.

Elapsed: 00:00:00.06
19:28:30 SQL> 
19:28:30 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
19:28:31 SQL> 
19:28:31 SQL> -- I need a copy of the attributes:
19:28:31 SQL> 
19:28:31 SQL> 
19:28:31 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.04
19:28:31 SQL> CREATE TABLE gbp_att COMPRESS AS
19:28:31   2  SELECT
19:28:31   3  ydate
19:28:31   4  ,att00 gbp_att00
19:28:31   5  ,att01 gbp_att01
19:28:31   6  ,att02 gbp_att02
19:28:31   7  ,att03 gbp_att03
19:28:31   8  ,att04 gbp_att04
19:28:31   9  ,att05 gbp_att05
19:28:31  10  ,att06 gbp_att06
19:28:31  11  ,att07 gbp_att07
19:28:31  12  ,att08 gbp_att08
19:28:31  13  ,att09 gbp_att09
19:28:31  14  ,att10 gbp_att10
19:28:31  15  ,att11 gbp_att11
19:28:31  16  ,att12 gbp_att12
19:28:31  17  ,att13 gbp_att13
19:28:31  18  ,att14 gbp_att14
19:28:31  19  ,att15 gbp_att15
19:28:31  20  ,att16 gbp_att16
19:28:31  21  ,att17 gbp_att17
19:28:31  22  ,att18 gbp_att18
19:28:31  23  ,att19 gbp_att19
19:28:31  24  ,att20 gbp_att20
19:28:31  25  ,att21 gbp_att21
19:28:31  26  ,att22 gbp_att22
19:28:31  27  ,att23 gbp_att23
19:28:31  28  ,att24 gbp_att24
19:28:31  29  ,att25 gbp_att25
19:28:31  30  ,att26 gbp_att26
19:28:31  31  ,att27 gbp_att27
19:28:31  32  ,att28 gbp_att28
19:28:31  33  ,att29 gbp_att29
19:28:31  34  ,att30 gbp_att30
19:28:31  35  ,att31 gbp_att31
19:28:31  36  ,att32 gbp_att32
19:28:31  37  ,att33 gbp_att33
19:28:31  38  ,att34 gbp_att34
19:28:31  39  ,att35 gbp_att35
19:28:31  40  ,att36 gbp_att36
19:28:31  41  ,att37 gbp_att37
19:28:31  42  FROM svm6162
19:28:31  43  /

Table created.

Elapsed: 00:00:00.19
19:28:31 SQL> 
19:28:31 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
19:28:31 SQL> 
19:28:31 SQL> -- rpt
19:28:31 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19284

Elapsed: 00:00:00.84
19:28:32 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19284

Elapsed: 00:00:00.00
19:28:32 SQL> 
19:28:32 SQL> --
19:28:32 SQL> -- jpy610.sql
19:28:32 SQL> --
19:28:32 SQL> 
19:28:32 SQL> -- Creates views and tables for backtesting a forex SVM strategy
19:28:32 SQL> 
19:28:32 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.37
19:28:32 SQL> 
19:28:32 SQL> -- I created di5min here:
19:28:32 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
19:28:32 SQL> 
19:28:32 SQL> CREATE OR REPLACE VIEW svm6102 AS
19:28:32   2  SELECT
19:28:32   3  pair
19:28:32   4  ,ydate
19:28:32   5  ,prdate
19:28:32   6  ,rownum rnum -- acts as t in my time-series
19:28:32   7  ,clse
19:28:32   8  -- Derive a bunch of attributes from clse, the latest price:
19:28:32   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
19:28:32  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
19:28:32  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
19:28:32  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
19:28:32  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
19:28:32  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
19:28:32  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
19:28:32  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
19:28:32  17  --
19:28:32  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
19:28:32  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
19:28:32  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
19:28:32  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
19:28:32  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
19:28:32  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
19:28:32  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
19:28:32  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
19:28:32  26  --
19:28:32  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
19:28:32  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
19:28:32  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
19:28:32  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
19:28:32  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
19:28:32  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
19:28:32  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
19:28:32  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
19:28:32  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
19:28:32  36  FROM di5min WHERE pair LIKE'%jpy%'
19:28:32  37  AND ydate > sysdate - 95
19:28:32  38  ORDER BY ydate
19:28:32  39  /

View created.

Elapsed: 00:00:00.04
19:28:33 SQL> 
19:28:33 SQL> -- rpt
19:28:33 SQL> 
19:28:33 SQL> SELECT
19:28:33   2  pair
19:28:33   3  ,COUNT(pair)
19:28:33   4  ,MIN(clse),MAX(clse)
19:28:33   5  ,MIN(avg6),MAX(avg6)
19:28:33   6  ,MIN(ydate),MAX(ydate)
19:28:33   7  FROM svm6102
19:28:33   8  GROUP BY pair
19:28:33   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19281	 80.25	   84.485 80.3595205 84.3105479 2010-09-24 19:30:01 2010-12-28 19:25:00

Elapsed: 00:00:00.87
19:28:33 SQL> 
19:28:33 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
19:28:33 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.19
19:28:34 SQL> CREATE TABLE svm6122 COMPRESS AS
19:28:34   2  SELECT
19:28:34   3  pair
19:28:34   4  ,ydate
19:28:34   5  ,prdate
19:28:34   6  ,clse
19:28:34   7  -- g6 is important. I want to predict g6:
19:28:34   8  ,ld6 - clse g6
19:28:34   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
19:28:34  10  -- I want more attributes from the ones I derived above:
19:28:34  11  -- clse relation to moving-min
19:28:34  12  ,clse-min4  cm4
19:28:34  13  ,clse-min6  cm6
19:28:34  14  ,clse-min8  cm8
19:28:34  15  ,clse-min10 cm10
19:28:34  16  ,clse-min12 cm12
19:28:34  17  ,clse-min14 cm14
19:28:34  18  ,clse-min16 cm16
19:28:34  19  ,clse-min18 cm18
19:28:34  20  -- clse relation to moving-avg
19:28:34  21  ,clse-avg4  ca4
19:28:34  22  ,clse-avg6  ca6
19:28:34  23  ,clse-avg8  ca8
19:28:34  24  ,clse-avg10 ca10
19:28:34  25  ,clse-avg12 ca12
19:28:34  26  ,clse-avg14 ca14
19:28:34  27  ,clse-avg16 ca16
19:28:34  28  ,clse-avg18 ca18
19:28:34  29  -- clse relation to moving-max
19:28:34  30  ,clse-max4  cx4
19:28:34  31  ,clse-max6  cx6
19:28:34  32  ,clse-max8  cx8
19:28:34  33  ,clse-max10 cx10
19:28:34  34  ,clse-max12 cx12
19:28:34  35  ,clse-max14 cx14
19:28:34  36  ,clse-max16 cx16
19:28:34  37  ,clse-max18 cx18
19:28:34  38  -- Derive more attributes.
19:28:34  39  -- I want to use CORR() here to help SVM see the shape of the series.
19:28:34  40  -- But COVAR_POP is more stable:
19:28:34  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
19:28:34  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
19:28:34  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
19:28:34  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
19:28:34  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
19:28:34  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
19:28:34  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
19:28:34  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
19:28:34  49  -- Derive date related attributes:
19:28:34  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
19:28:34  51  ,0+TO_CHAR(ydate,'D')d
19:28:34  52  ,0+TO_CHAR(ydate,'W')w
19:28:34  53  -- mpm stands for minutes-past-midnight:
19:28:34  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
19:28:34  55  -- mph stands for minutes-past-hour:
19:28:34  56  ,0+TO_CHAR(ydate,'MI')mph
19:28:34  57  FROM svm6102
19:28:34  58  ORDER BY ydate
19:28:34  59  /

Table created.

Elapsed: 00:00:02.01
19:28:36 SQL> 
19:28:36 SQL> -- rpt
19:28:36 SQL> 
19:28:36 SQL> SELECT
19:28:36   2  pair
19:28:36   3  ,COUNT(pair)
19:28:36   4  ,MIN(clse),MAX(clse)
19:28:36   5  ,MIN(ydate),MAX(ydate)
19:28:36   6  FROM svm6122
19:28:36   7  GROUP BY pair
19:28:36   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19281	 80.25	   84.485 2010-09-24 19:30:01 2010-12-28 19:25:00

Elapsed: 00:00:00.04
19:28:36 SQL> 
19:28:36 SQL> -- Prepare for derivation of NTILE based params:
19:28:36 SQL> 
19:28:36 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.19
19:28:36 SQL> CREATE TABLE svm6142 COMPRESS AS
19:28:36   2  SELECT
19:28:36   3  pair
19:28:36   4  ,ydate
19:28:36   5  ,prdate
19:28:36   6  ,clse
19:28:36   7  ,g6
19:28:36   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
19:28:36   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
19:28:36  10  ,CASE WHEN trend IS NULL THEN 1
19:28:36  11  	    WHEN trend =0      THEN 1
19:28:36  12  	    ELSE trend END trend
19:28:36  13  ,cm4
19:28:36  14  ,cm6
19:28:36  15  ,cm8
19:28:36  16  ,cm10
19:28:36  17  ,cm12
19:28:36  18  ,cm14
19:28:36  19  ,cm16
19:28:36  20  ,cm18
19:28:36  21  --
19:28:36  22  ,ca4
19:28:36  23  ,ca6
19:28:36  24  ,ca8
19:28:36  25  ,ca10
19:28:36  26  ,ca12
19:28:36  27  ,ca14
19:28:36  28  ,ca16
19:28:36  29  ,ca18
19:28:36  30  --
19:28:36  31  ,cx4
19:28:36  32  ,cx6
19:28:36  33  ,cx8
19:28:36  34  ,cx10
19:28:36  35  ,cx12
19:28:36  36  ,cx14
19:28:36  37  ,cx16
19:28:36  38  ,cx18
19:28:36  39  --
19:28:36  40  ,crr4
19:28:36  41  ,crr6
19:28:36  42  ,crr8
19:28:36  43  ,crr10
19:28:36  44  ,crr12
19:28:36  45  ,crr14
19:28:36  46  ,crr16
19:28:36  47  ,crr18
19:28:36  48  --
19:28:36  49  ,hh
19:28:36  50  ,d
19:28:36  51  ,w
19:28:36  52  ,mpm
19:28:36  53  ,mph
19:28:36  54  FROM svm6122
19:28:36  55  ORDER BY ydate
19:28:36  56  /

Table created.

Elapsed: 00:00:00.36
19:28:36 SQL> 
19:28:36 SQL> -- rpt
19:28:36 SQL> 
19:28:36 SQL> SELECT
19:28:36   2  pair
19:28:36   3  ,trend
19:28:36   4  ,gatt
19:28:36   5  ,COUNT(pair)
19:28:36   6  ,AVG(g6)
19:28:36   7  FROM svm6142
19:28:36   8  GROUP BY pair,trend,gatt
19:28:36   9  ORDER BY pair,trend,gatt
19:28:36  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5083  -.1628788
usd_jpy 	-1 up	      4939 .161065592
usd_jpy 	-1		39
usd_jpy 	 1 nup	      5112 -.15519715
usd_jpy 	 1 up	      4075 .165070629
usd_jpy 	 1		33

6 rows selected.

Elapsed: 00:00:00.03
19:28:36 SQL> 
19:28:36 SQL> 
19:28:36 SQL> -- Derive NTILE based params:
19:28:36 SQL> 
19:28:36 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.19
19:28:36 SQL> CREATE TABLE svm6162 COMPRESS AS
19:28:36   2  SELECT
19:28:36   3  pair
19:28:36   4  ,ydate
19:28:36   5  ,prdate
19:28:36   6  ,clse
19:28:36   7  ,g6
19:28:36   8  ,gatt
19:28:36   9  ,gattn
19:28:36  10  ,trend
19:28:36  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
19:28:36  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
19:28:36  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
19:28:36  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
19:28:36  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
19:28:36  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
19:28:36  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
19:28:36  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
19:28:36  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
19:28:36  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
19:28:36  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
19:28:36  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
19:28:36  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
19:28:36  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
19:28:36  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
19:28:36  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
19:28:36  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
19:28:36  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
19:28:36  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
19:28:36  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
19:28:36  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
19:28:36  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
19:28:36  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
19:28:36  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
19:28:36  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
19:28:36  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
19:28:36  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
19:28:36  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
19:28:36  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
19:28:36  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
19:28:36  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
19:28:36  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
19:28:36  43  ,hh  att32
19:28:36  44  ,d   att33
19:28:36  45  ,w   att34
19:28:36  46  ,mpm att35
19:28:36  47  ,mph att36
19:28:36  48  ,trend att37
19:28:36  49  FROM svm6142
19:28:36  50  ORDER BY ydate
19:28:36  51  /

Table created.

Elapsed: 00:00:04.70
19:28:41 SQL> 
19:28:41 SQL> -- rpt
19:28:41 SQL> 
19:28:41 SQL> SELECT
19:28:41   2  pair
19:28:41   3  ,trend
19:28:41   4  ,gatt
19:28:41   5  ,COUNT(pair)
19:28:41   6  ,AVG(g6)
19:28:41   7  FROM svm6162
19:28:41   8  GROUP BY pair,trend,gatt
19:28:41   9  ORDER BY pair,trend,gatt
19:28:41  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5083  -.1628788
usd_jpy 	-1 up	      4939 .161065592
usd_jpy 	-1		39
usd_jpy 	 1 nup	      5112 -.15519715
usd_jpy 	 1 up	      4075 .165070629
usd_jpy 	 1		33

6 rows selected.

Elapsed: 00:00:00.02
19:28:41 SQL> 
19:28:41 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.16
19:28:41 SQL> CREATE TABLE modsrc COMPRESS AS
19:28:41   2  SELECT
19:28:41   3  pair
19:28:41   4  ,ydate
19:28:41   5  ,prdate
19:28:41   6  ,trend
19:28:41   7  ,g6
19:28:41   8  ,gatt
19:28:41   9  ,gattn
19:28:41  10  FROM svm6162
19:28:41  11  /

Table created.

Elapsed: 00:00:00.08
19:28:41 SQL> 
19:28:41 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
19:28:42 SQL> 
19:28:42 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
19:28:42 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
19:28:42   2  SELECT
19:28:42   3  ydate
19:28:42   4  ,trend jpy_trend
19:28:42   5  ,g6    jpy_g6
19:28:42   6  ,gatt  jpy_gatt
19:28:42   7  ,gattn jpy_gattn
19:28:42   8  FROM modsrc
19:28:42   9  /

Table created.

Elapsed: 00:00:00.07
19:28:42 SQL> 
19:28:42 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
19:28:42 SQL> 
19:28:42 SQL> -- I need a copy of the attributes:
19:28:42 SQL> 
19:28:42 SQL> 
19:28:42 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.04
19:28:42 SQL> CREATE TABLE jpy_att COMPRESS AS
19:28:42   2  SELECT
19:28:42   3  ydate
19:28:42   4  ,att00 jpy_att00
19:28:42   5  ,att01 jpy_att01
19:28:42   6  ,att02 jpy_att02
19:28:42   7  ,att03 jpy_att03
19:28:42   8  ,att04 jpy_att04
19:28:42   9  ,att05 jpy_att05
19:28:42  10  ,att06 jpy_att06
19:28:42  11  ,att07 jpy_att07
19:28:42  12  ,att08 jpy_att08
19:28:42  13  ,att09 jpy_att09
19:28:42  14  ,att10 jpy_att10
19:28:42  15  ,att11 jpy_att11
19:28:42  16  ,att12 jpy_att12
19:28:42  17  ,att13 jpy_att13
19:28:42  18  ,att14 jpy_att14
19:28:42  19  ,att15 jpy_att15
19:28:42  20  ,att16 jpy_att16
19:28:42  21  ,att17 jpy_att17
19:28:42  22  ,att18 jpy_att18
19:28:42  23  ,att19 jpy_att19
19:28:42  24  ,att20 jpy_att20
19:28:42  25  ,att21 jpy_att21
19:28:42  26  ,att22 jpy_att22
19:28:42  27  ,att23 jpy_att23
19:28:42  28  ,att24 jpy_att24
19:28:42  29  ,att25 jpy_att25
19:28:42  30  ,att26 jpy_att26
19:28:42  31  ,att27 jpy_att27
19:28:42  32  ,att28 jpy_att28
19:28:42  33  ,att29 jpy_att29
19:28:42  34  ,att30 jpy_att30
19:28:42  35  ,att31 jpy_att31
19:28:42  36  ,att32 jpy_att32
19:28:42  37  ,att33 jpy_att33
19:28:42  38  ,att34 jpy_att34
19:28:42  39  ,att35 jpy_att35
19:28:42  40  ,att36 jpy_att36
19:28:42  41  ,att37 jpy_att37
19:28:42  42  FROM svm6162
19:28:42  43  /

Table created.

Elapsed: 00:00:00.18
19:28:42 SQL> 
19:28:42 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.50
19:28:43 SQL> 
19:28:43 SQL> -- rpt
19:28:43 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19281

Elapsed: 00:00:00.85
19:28:43 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19281

Elapsed: 00:00:00.00
19:28:43 SQL> 
19:28:43 SQL> --
19:28:43 SQL> -- cad610.sql
19:28:43 SQL> --
19:28:43 SQL> 
19:28:43 SQL> -- Creates views and tables for backtesting a forex SVM strategy
19:28:43 SQL> 
19:28:43 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.44
19:28:44 SQL> 
19:28:44 SQL> -- I created di5min here:
19:28:44 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
19:28:44 SQL> 
19:28:44 SQL> CREATE OR REPLACE VIEW svm6102 AS
19:28:44   2  SELECT
19:28:44   3  pair
19:28:44   4  ,ydate
19:28:44   5  ,prdate
19:28:44   6  ,rownum rnum -- acts as t in my time-series
19:28:44   7  ,clse
19:28:44   8  -- Derive a bunch of attributes from clse, the latest price:
19:28:44   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
19:28:44  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
19:28:44  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
19:28:44  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
19:28:44  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
19:28:44  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
19:28:44  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
19:28:44  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
19:28:44  17  --
19:28:44  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
19:28:44  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
19:28:44  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
19:28:44  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
19:28:44  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
19:28:44  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
19:28:44  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
19:28:44  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
19:28:44  26  --
19:28:44  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
19:28:44  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
19:28:44  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
19:28:44  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
19:28:44  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
19:28:44  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
19:28:44  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
19:28:44  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
19:28:44  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
19:28:44  36  FROM di5min WHERE pair LIKE'%cad%'
19:28:44  37  AND ydate > sysdate - 95
19:28:44  38  ORDER BY ydate
19:28:44  39  /

View created.

Elapsed: 00:00:00.06
19:28:44 SQL> 
19:28:44 SQL> -- rpt
19:28:44 SQL> 
19:28:44 SQL> SELECT
19:28:44   2  pair
19:28:44   3  ,COUNT(pair)
19:28:44   4  ,MIN(clse),MAX(clse)
19:28:44   5  ,MIN(avg6),MAX(avg6)
19:28:44   6  ,MIN(ydate),MAX(ydate)
19:28:44   7  FROM svm6102
19:28:44   8  GROUP BY pair
19:28:44   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19281    .997975	    1.036 .999321062 1.03336849 2010-09-24 19:30:01 2010-12-28 19:25:00

Elapsed: 00:00:00.81
19:28:45 SQL> 
19:28:45 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
19:28:45 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.21
19:28:45 SQL> CREATE TABLE svm6122 COMPRESS AS
19:28:45   2  SELECT
19:28:45   3  pair
19:28:45   4  ,ydate
19:28:45   5  ,prdate
19:28:45   6  ,clse
19:28:45   7  -- g6 is important. I want to predict g6:
19:28:45   8  ,ld6 - clse g6
19:28:45   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
19:28:45  10  -- I want more attributes from the ones I derived above:
19:28:45  11  -- clse relation to moving-min
19:28:45  12  ,clse-min4  cm4
19:28:45  13  ,clse-min6  cm6
19:28:45  14  ,clse-min8  cm8
19:28:45  15  ,clse-min10 cm10
19:28:45  16  ,clse-min12 cm12
19:28:45  17  ,clse-min14 cm14
19:28:45  18  ,clse-min16 cm16
19:28:45  19  ,clse-min18 cm18
19:28:45  20  -- clse relation to moving-avg
19:28:45  21  ,clse-avg4  ca4
19:28:45  22  ,clse-avg6  ca6
19:28:45  23  ,clse-avg8  ca8
19:28:45  24  ,clse-avg10 ca10
19:28:45  25  ,clse-avg12 ca12
19:28:45  26  ,clse-avg14 ca14
19:28:45  27  ,clse-avg16 ca16
19:28:45  28  ,clse-avg18 ca18
19:28:45  29  -- clse relation to moving-max
19:28:45  30  ,clse-max4  cx4
19:28:45  31  ,clse-max6  cx6
19:28:45  32  ,clse-max8  cx8
19:28:45  33  ,clse-max10 cx10
19:28:45  34  ,clse-max12 cx12
19:28:45  35  ,clse-max14 cx14
19:28:45  36  ,clse-max16 cx16
19:28:45  37  ,clse-max18 cx18
19:28:45  38  -- Derive more attributes.
19:28:45  39  -- I want to use CORR() here to help SVM see the shape of the series.
19:28:45  40  -- But COVAR_POP is more stable:
19:28:45  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
19:28:45  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
19:28:45  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
19:28:45  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
19:28:45  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
19:28:45  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
19:28:45  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
19:28:45  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
19:28:45  49  -- Derive date related attributes:
19:28:45  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
19:28:45  51  ,0+TO_CHAR(ydate,'D')d
19:28:45  52  ,0+TO_CHAR(ydate,'W')w
19:28:45  53  -- mpm stands for minutes-past-midnight:
19:28:45  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
19:28:45  55  -- mph stands for minutes-past-hour:
19:28:45  56  ,0+TO_CHAR(ydate,'MI')mph
19:28:45  57  FROM svm6102
19:28:45  58  ORDER BY ydate
19:28:45  59  /

Table created.

Elapsed: 00:00:01.97
19:28:47 SQL> 
19:28:47 SQL> -- rpt
19:28:47 SQL> 
19:28:47 SQL> SELECT
19:28:47   2  pair
19:28:47   3  ,COUNT(pair)
19:28:47   4  ,MIN(clse),MAX(clse)
19:28:47   5  ,MIN(ydate),MAX(ydate)
19:28:47   6  FROM svm6122
19:28:47   7  GROUP BY pair
19:28:47   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19281    .997975	    1.036 2010-09-24 19:30:01 2010-12-28 19:25:00

Elapsed: 00:00:00.05
19:28:47 SQL> 
19:28:47 SQL> -- Prepare for derivation of NTILE based params:
19:28:47 SQL> 
19:28:47 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.24
19:28:47 SQL> CREATE TABLE svm6142 COMPRESS AS
19:28:47   2  SELECT
19:28:47   3  pair
19:28:47   4  ,ydate
19:28:47   5  ,prdate
19:28:47   6  ,clse
19:28:47   7  ,g6
19:28:47   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
19:28:47   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
19:28:47  10  ,CASE WHEN trend IS NULL THEN 1
19:28:47  11  	    WHEN trend =0      THEN 1
19:28:47  12  	    ELSE trend END trend
19:28:47  13  ,cm4
19:28:47  14  ,cm6
19:28:47  15  ,cm8
19:28:47  16  ,cm10
19:28:47  17  ,cm12
19:28:47  18  ,cm14
19:28:47  19  ,cm16
19:28:47  20  ,cm18
19:28:47  21  --
19:28:47  22  ,ca4
19:28:47  23  ,ca6
19:28:47  24  ,ca8
19:28:47  25  ,ca10
19:28:47  26  ,ca12
19:28:47  27  ,ca14
19:28:47  28  ,ca16
19:28:47  29  ,ca18
19:28:47  30  --
19:28:47  31  ,cx4
19:28:47  32  ,cx6
19:28:47  33  ,cx8
19:28:47  34  ,cx10
19:28:47  35  ,cx12
19:28:47  36  ,cx14
19:28:47  37  ,cx16
19:28:47  38  ,cx18
19:28:47  39  --
19:28:47  40  ,crr4
19:28:47  41  ,crr6
19:28:47  42  ,crr8
19:28:47  43  ,crr10
19:28:47  44  ,crr12
19:28:47  45  ,crr14
19:28:47  46  ,crr16
19:28:47  47  ,crr18
19:28:47  48  --
19:28:47  49  ,hh
19:28:47  50  ,d
19:28:47  51  ,w
19:28:47  52  ,mpm
19:28:47  53  ,mph
19:28:47  54  FROM svm6122
19:28:47  55  ORDER BY ydate
19:28:47  56  /

Table created.

Elapsed: 00:00:00.35
19:28:48 SQL> 
19:28:48 SQL> -- rpt
19:28:48 SQL> 
19:28:48 SQL> SELECT
19:28:48   2  pair
19:28:48   3  ,trend
19:28:48   4  ,gatt
19:28:48   5  ,COUNT(pair)
19:28:48   6  ,AVG(g6)
19:28:48   7  FROM svm6142
19:28:48   8  GROUP BY pair,trend,gatt
19:28:48   9  ORDER BY pair,trend,gatt
19:28:48  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7157 -.00133201
usd_cad 	-1 up	      3042 .003118882
usd_cad 	-1		68
usd_cad 	 1 nup	      6527 -.00163957
usd_cad 	 1 up	      2483 .003602656
usd_cad 	 1		 4

6 rows selected.

Elapsed: 00:00:00.04
19:28:48 SQL> 
19:28:48 SQL> 
19:28:48 SQL> -- Derive NTILE based params:
19:28:48 SQL> 
19:28:48 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.13
19:28:48 SQL> CREATE TABLE svm6162 COMPRESS AS
19:28:48   2  SELECT
19:28:48   3  pair
19:28:48   4  ,ydate
19:28:48   5  ,prdate
19:28:48   6  ,clse
19:28:48   7  ,g6
19:28:48   8  ,gatt
19:28:48   9  ,gattn
19:28:48  10  ,trend
19:28:48  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
19:28:48  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
19:28:48  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
19:28:48  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
19:28:48  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
19:28:48  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
19:28:48  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
19:28:48  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
19:28:48  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
19:28:48  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
19:28:48  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
19:28:48  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
19:28:48  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
19:28:48  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
19:28:48  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
19:28:48  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
19:28:48  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
19:28:48  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
19:28:48  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
19:28:48  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
19:28:48  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
19:28:48  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
19:28:48  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
19:28:48  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
19:28:48  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
19:28:48  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
19:28:48  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
19:28:48  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
19:28:48  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
19:28:48  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
19:28:48  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
19:28:48  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
19:28:48  43  ,hh  att32
19:28:48  44  ,d   att33
19:28:48  45  ,w   att34
19:28:48  46  ,mpm att35
19:28:48  47  ,mph att36
19:28:48  48  ,trend att37
19:28:48  49  FROM svm6142
19:28:48  50  ORDER BY ydate
19:28:48  51  /

Table created.

Elapsed: 00:00:04.80
19:28:53 SQL> 
19:28:53 SQL> -- rpt
19:28:53 SQL> 
19:28:53 SQL> SELECT
19:28:53   2  pair
19:28:53   3  ,trend
19:28:53   4  ,gatt
19:28:53   5  ,COUNT(pair)
19:28:53   6  ,AVG(g6)
19:28:53   7  FROM svm6162
19:28:53   8  GROUP BY pair,trend,gatt
19:28:53   9  ORDER BY pair,trend,gatt
19:28:53  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7157 -.00133201
usd_cad 	-1 up	      3042 .003118882
usd_cad 	-1		68
usd_cad 	 1 nup	      6527 -.00163957
usd_cad 	 1 up	      2483 .003602656
usd_cad 	 1		 4

6 rows selected.

Elapsed: 00:00:00.02
19:28:53 SQL> 
19:28:53 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
19:28:53 SQL> CREATE TABLE modsrc COMPRESS AS
19:28:53   2  SELECT
19:28:53   3  pair
19:28:53   4  ,ydate
19:28:53   5  ,prdate
19:28:53   6  ,trend
19:28:53   7  ,g6
19:28:53   8  ,gatt
19:28:53   9  ,gattn
19:28:53  10  FROM svm6162
19:28:53  11  /

Table created.

Elapsed: 00:00:00.10
19:28:53 SQL> 
19:28:53 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
19:28:53 SQL> 
19:28:53 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
19:28:53 SQL> CREATE TABLE cad_ms610 COMPRESS AS
19:28:53   2  SELECT
19:28:53   3  ydate
19:28:53   4  ,trend cad_trend
19:28:53   5  ,g6    cad_g6
19:28:53   6  ,gatt  cad_gatt
19:28:53   7  ,gattn cad_gattn
19:28:53   8  FROM modsrc
19:28:53   9  /

Table created.

Elapsed: 00:00:00.07
19:28:53 SQL> 
19:28:53 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
19:28:53 SQL> 
19:28:53 SQL> -- I need a copy of the attributes:
19:28:53 SQL> 
19:28:53 SQL> 
19:28:53 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.05
19:28:53 SQL> CREATE TABLE cad_att COMPRESS AS
19:28:53   2  SELECT
19:28:53   3  ydate
19:28:53   4  ,att00 cad_att00
19:28:53   5  ,att01 cad_att01
19:28:53   6  ,att02 cad_att02
19:28:53   7  ,att03 cad_att03
19:28:53   8  ,att04 cad_att04
19:28:53   9  ,att05 cad_att05
19:28:53  10  ,att06 cad_att06
19:28:53  11  ,att07 cad_att07
19:28:53  12  ,att08 cad_att08
19:28:53  13  ,att09 cad_att09
19:28:53  14  ,att10 cad_att10
19:28:53  15  ,att11 cad_att11
19:28:53  16  ,att12 cad_att12
19:28:53  17  ,att13 cad_att13
19:28:53  18  ,att14 cad_att14
19:28:53  19  ,att15 cad_att15
19:28:53  20  ,att16 cad_att16
19:28:53  21  ,att17 cad_att17
19:28:53  22  ,att18 cad_att18
19:28:53  23  ,att19 cad_att19
19:28:53  24  ,att20 cad_att20
19:28:53  25  ,att21 cad_att21
19:28:53  26  ,att22 cad_att22
19:28:53  27  ,att23 cad_att23
19:28:53  28  ,att24 cad_att24
19:28:53  29  ,att25 cad_att25
19:28:53  30  ,att26 cad_att26
19:28:53  31  ,att27 cad_att27
19:28:53  32  ,att28 cad_att28
19:28:53  33  ,att29 cad_att29
19:28:53  34  ,att30 cad_att30
19:28:53  35  ,att31 cad_att31
19:28:53  36  ,att32 cad_att32
19:28:53  37  ,att33 cad_att33
19:28:53  38  ,att34 cad_att34
19:28:53  39  ,att35 cad_att35
19:28:53  40  ,att36 cad_att36
19:28:53  41  ,att37 cad_att37
19:28:53  42  FROM svm6162
19:28:53  43  /

Table created.

Elapsed: 00:00:00.16
19:28:54 SQL> 
19:28:54 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
19:28:54 SQL> 
19:28:54 SQL> -- rpt
19:28:54 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19281

Elapsed: 00:00:00.80
19:28:55 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19281

Elapsed: 00:00:00.00
19:28:55 SQL> 
19:28:55 SQL> --
19:28:55 SQL> -- chf610.sql
19:28:55 SQL> --
19:28:55 SQL> 
19:28:55 SQL> -- Creates views and tables for backtesting a forex SVM strategy
19:28:55 SQL> 
19:28:55 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.53
19:28:55 SQL> 
19:28:55 SQL> -- I created di5min here:
19:28:55 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
19:28:55 SQL> 
19:28:55 SQL> CREATE OR REPLACE VIEW svm6102 AS
19:28:55   2  SELECT
19:28:55   3  pair
19:28:55   4  ,ydate
19:28:55   5  ,prdate
19:28:55   6  ,rownum rnum -- acts as t in my time-series
19:28:55   7  ,clse
19:28:55   8  -- Derive a bunch of attributes from clse, the latest price:
19:28:55   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
19:28:55  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
19:28:55  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
19:28:55  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
19:28:55  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
19:28:55  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
19:28:55  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
19:28:55  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
19:28:55  17  --
19:28:55  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
19:28:55  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
19:28:55  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
19:28:55  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
19:28:55  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
19:28:55  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
19:28:55  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
19:28:55  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
19:28:55  26  --
19:28:55  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
19:28:55  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
19:28:55  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
19:28:55  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
19:28:55  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
19:28:55  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
19:28:55  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
19:28:55  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
19:28:55  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
19:28:55  36  FROM di5min WHERE pair LIKE'%chf%'
19:28:55  37  AND ydate > sysdate - 95
19:28:55  38  ORDER BY ydate
19:28:55  39  /

View created.

Elapsed: 00:00:00.05
19:28:55 SQL> 
19:28:55 SQL> -- rpt
19:28:55 SQL> 
19:28:55 SQL> SELECT
19:28:55   2  pair
19:28:55   3  ,COUNT(pair)
19:28:55   4  ,MIN(clse),MAX(clse)
19:28:55   5  ,MIN(avg6),MAX(avg6)
19:28:55   6  ,MIN(ydate),MAX(ydate)
19:28:55   7  FROM svm6102
19:28:55   8  GROUP BY pair
19:28:55   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19284	.94525	  1.00635 .947785616 1.00498151 2010-09-24 19:30:01 2010-12-28 19:25:00

Elapsed: 00:00:00.83
19:28:56 SQL> 
19:28:56 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
19:28:56 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:01.05
19:28:57 SQL> CREATE TABLE svm6122 COMPRESS AS
19:28:57   2  SELECT
19:28:57   3  pair
19:28:57   4  ,ydate
19:28:57   5  ,prdate
19:28:57   6  ,clse
19:28:57   7  -- g6 is important. I want to predict g6:
19:28:57   8  ,ld6 - clse g6
19:28:57   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
19:28:57  10  -- I want more attributes from the ones I derived above:
19:28:57  11  -- clse relation to moving-min
19:28:57  12  ,clse-min4  cm4
19:28:57  13  ,clse-min6  cm6
19:28:57  14  ,clse-min8  cm8
19:28:57  15  ,clse-min10 cm10
19:28:57  16  ,clse-min12 cm12
19:28:57  17  ,clse-min14 cm14
19:28:57  18  ,clse-min16 cm16
19:28:57  19  ,clse-min18 cm18
19:28:57  20  -- clse relation to moving-avg
19:28:57  21  ,clse-avg4  ca4
19:28:57  22  ,clse-avg6  ca6
19:28:57  23  ,clse-avg8  ca8
19:28:57  24  ,clse-avg10 ca10
19:28:57  25  ,clse-avg12 ca12
19:28:57  26  ,clse-avg14 ca14
19:28:57  27  ,clse-avg16 ca16
19:28:57  28  ,clse-avg18 ca18
19:28:57  29  -- clse relation to moving-max
19:28:57  30  ,clse-max4  cx4
19:28:57  31  ,clse-max6  cx6
19:28:57  32  ,clse-max8  cx8
19:28:57  33  ,clse-max10 cx10
19:28:57  34  ,clse-max12 cx12
19:28:57  35  ,clse-max14 cx14
19:28:57  36  ,clse-max16 cx16
19:28:57  37  ,clse-max18 cx18
19:28:57  38  -- Derive more attributes.
19:28:57  39  -- I want to use CORR() here to help SVM see the shape of the series.
19:28:57  40  -- But COVAR_POP is more stable:
19:28:57  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
19:28:57  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
19:28:57  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
19:28:57  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
19:28:57  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
19:28:57  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
19:28:57  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
19:28:57  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
19:28:57  49  -- Derive date related attributes:
19:28:57  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
19:28:57  51  ,0+TO_CHAR(ydate,'D')d
19:28:57  52  ,0+TO_CHAR(ydate,'W')w
19:28:57  53  -- mpm stands for minutes-past-midnight:
19:28:57  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
19:28:57  55  -- mph stands for minutes-past-hour:
19:28:57  56  ,0+TO_CHAR(ydate,'MI')mph
19:28:57  57  FROM svm6102
19:28:57  58  ORDER BY ydate
19:28:57  59  /

Table created.

Elapsed: 00:00:02.05
19:28:59 SQL> 
19:28:59 SQL> -- rpt
19:28:59 SQL> 
19:28:59 SQL> SELECT
19:28:59   2  pair
19:28:59   3  ,COUNT(pair)
19:28:59   4  ,MIN(clse),MAX(clse)
19:28:59   5  ,MIN(ydate),MAX(ydate)
19:28:59   6  FROM svm6122
19:28:59   7  GROUP BY pair
19:28:59   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19284	.94525	  1.00635 2010-09-24 19:30:01 2010-12-28 19:25:00

Elapsed: 00:00:00.03
19:28:59 SQL> 
19:28:59 SQL> -- Prepare for derivation of NTILE based params:
19:28:59 SQL> 
19:28:59 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.18
19:28:59 SQL> CREATE TABLE svm6142 COMPRESS AS
19:28:59   2  SELECT
19:28:59   3  pair
19:28:59   4  ,ydate
19:28:59   5  ,prdate
19:28:59   6  ,clse
19:28:59   7  ,g6
19:28:59   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
19:28:59   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
19:28:59  10  ,CASE WHEN trend IS NULL THEN 1
19:28:59  11  	    WHEN trend =0      THEN 1
19:28:59  12  	    ELSE trend END trend
19:28:59  13  ,cm4
19:28:59  14  ,cm6
19:28:59  15  ,cm8
19:28:59  16  ,cm10
19:28:59  17  ,cm12
19:28:59  18  ,cm14
19:28:59  19  ,cm16
19:28:59  20  ,cm18
19:28:59  21  --
19:28:59  22  ,ca4
19:28:59  23  ,ca6
19:28:59  24  ,ca8
19:28:59  25  ,ca10
19:28:59  26  ,ca12
19:28:59  27  ,ca14
19:28:59  28  ,ca16
19:28:59  29  ,ca18
19:28:59  30  --
19:28:59  31  ,cx4
19:28:59  32  ,cx6
19:28:59  33  ,cx8
19:28:59  34  ,cx10
19:28:59  35  ,cx12
19:28:59  36  ,cx14
19:28:59  37  ,cx16
19:28:59  38  ,cx18
19:28:59  39  --
19:28:59  40  ,crr4
19:28:59  41  ,crr6
19:28:59  42  ,crr8
19:28:59  43  ,crr10
19:28:59  44  ,crr12
19:28:59  45  ,crr14
19:28:59  46  ,crr16
19:28:59  47  ,crr18
19:28:59  48  --
19:28:59  49  ,hh
19:28:59  50  ,d
19:28:59  51  ,w
19:28:59  52  ,mpm
19:28:59  53  ,mph
19:28:59  54  FROM svm6122
19:28:59  55  ORDER BY ydate
19:28:59  56  /

Table created.

Elapsed: 00:00:00.36
19:29:00 SQL> 
19:29:00 SQL> -- rpt
19:29:00 SQL> 
19:29:00 SQL> SELECT
19:29:00   2  pair
19:29:00   3  ,trend
19:29:00   4  ,gatt
19:29:00   5  ,COUNT(pair)
19:29:00   6  ,AVG(g6)
19:29:00   7  FROM svm6142
19:29:00   8  GROUP BY pair,trend,gatt
19:29:00   9  ORDER BY pair,trend,gatt
19:29:00  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      6897 -.00194296
usd_chf 	-1 up	      3181 .003891182
usd_chf 	-1		25
usd_chf 	 1 nup	      6590 -.00163724
usd_chf 	 1 up	      2544 .003699499
usd_chf 	 1		47

6 rows selected.

Elapsed: 00:00:00.04
19:29:00 SQL> 
19:29:00 SQL> 
19:29:00 SQL> -- Derive NTILE based params:
19:29:00 SQL> 
19:29:00 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
19:29:00 SQL> CREATE TABLE svm6162 COMPRESS AS
19:29:00   2  SELECT
19:29:00   3  pair
19:29:00   4  ,ydate
19:29:00   5  ,prdate
19:29:00   6  ,clse
19:29:00   7  ,g6
19:29:00   8  ,gatt
19:29:00   9  ,gattn
19:29:00  10  ,trend
19:29:00  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
19:29:00  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
19:29:00  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
19:29:00  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
19:29:00  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
19:29:00  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
19:29:00  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
19:29:00  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
19:29:00  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
19:29:00  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
19:29:00  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
19:29:00  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
19:29:00  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
19:29:00  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
19:29:00  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
19:29:00  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
19:29:00  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
19:29:00  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
19:29:00  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
19:29:00  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
19:29:00  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
19:29:00  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
19:29:00  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
19:29:00  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
19:29:00  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
19:29:00  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
19:29:00  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
19:29:00  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
19:29:00  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
19:29:00  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
19:29:00  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
19:29:00  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
19:29:00  43  ,hh  att32
19:29:00  44  ,d   att33
19:29:00  45  ,w   att34
19:29:00  46  ,mpm att35
19:29:00  47  ,mph att36
19:29:00  48  ,trend att37
19:29:00  49  FROM svm6142
19:29:00  50  ORDER BY ydate
19:29:00  51  /

Table created.

Elapsed: 00:00:04.90
19:29:05 SQL> 
19:29:05 SQL> -- rpt
19:29:05 SQL> 
19:29:05 SQL> SELECT
19:29:05   2  pair
19:29:05   3  ,trend
19:29:05   4  ,gatt
19:29:05   5  ,COUNT(pair)
19:29:05   6  ,AVG(g6)
19:29:05   7  FROM svm6162
19:29:05   8  GROUP BY pair,trend,gatt
19:29:05   9  ORDER BY pair,trend,gatt
19:29:05  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      6897 -.00194296
usd_chf 	-1 up	      3181 .003891182
usd_chf 	-1		25
usd_chf 	 1 nup	      6590 -.00163724
usd_chf 	 1 up	      2544 .003699499
usd_chf 	 1		47

6 rows selected.

Elapsed: 00:00:00.03
19:29:05 SQL> 
19:29:05 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
19:29:05 SQL> CREATE TABLE modsrc COMPRESS AS
19:29:05   2  SELECT
19:29:05   3  pair
19:29:05   4  ,ydate
19:29:05   5  ,prdate
19:29:05   6  ,trend
19:29:05   7  ,g6
19:29:05   8  ,gatt
19:29:05   9  ,gattn
19:29:05  10  FROM svm6162
19:29:05  11  /

Table created.

Elapsed: 00:00:00.08
19:29:05 SQL> 
19:29:05 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
19:29:05 SQL> 
19:29:05 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
19:29:05 SQL> CREATE TABLE chf_ms610 COMPRESS AS
19:29:05   2  SELECT
19:29:05   3  ydate
19:29:05   4  ,trend chf_trend
19:29:05   5  ,g6    chf_g6
19:29:05   6  ,gatt  chf_gatt
19:29:05   7  ,gattn chf_gattn
19:29:05   8  FROM modsrc
19:29:05   9  /

Table created.

Elapsed: 00:00:00.05
19:29:05 SQL> 
19:29:05 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
19:29:06 SQL> 
19:29:06 SQL> -- I need a copy of the attributes:
19:29:06 SQL> 
19:29:06 SQL> 
19:29:06 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.04
19:29:06 SQL> CREATE TABLE chf_att COMPRESS AS
19:29:06   2  SELECT
19:29:06   3  ydate
19:29:06   4  ,att00 chf_att00
19:29:06   5  ,att01 chf_att01
19:29:06   6  ,att02 chf_att02
19:29:06   7  ,att03 chf_att03
19:29:06   8  ,att04 chf_att04
19:29:06   9  ,att05 chf_att05
19:29:06  10  ,att06 chf_att06
19:29:06  11  ,att07 chf_att07
19:29:06  12  ,att08 chf_att08
19:29:06  13  ,att09 chf_att09
19:29:06  14  ,att10 chf_att10
19:29:06  15  ,att11 chf_att11
19:29:06  16  ,att12 chf_att12
19:29:06  17  ,att13 chf_att13
19:29:06  18  ,att14 chf_att14
19:29:06  19  ,att15 chf_att15
19:29:06  20  ,att16 chf_att16
19:29:06  21  ,att17 chf_att17
19:29:06  22  ,att18 chf_att18
19:29:06  23  ,att19 chf_att19
19:29:06  24  ,att20 chf_att20
19:29:06  25  ,att21 chf_att21
19:29:06  26  ,att22 chf_att22
19:29:06  27  ,att23 chf_att23
19:29:06  28  ,att24 chf_att24
19:29:06  29  ,att25 chf_att25
19:29:06  30  ,att26 chf_att26
19:29:06  31  ,att27 chf_att27
19:29:06  32  ,att28 chf_att28
19:29:06  33  ,att29 chf_att29
19:29:06  34  ,att30 chf_att30
19:29:06  35  ,att31 chf_att31
19:29:06  36  ,att32 chf_att32
19:29:06  37  ,att33 chf_att33
19:29:06  38  ,att34 chf_att34
19:29:06  39  ,att35 chf_att35
19:29:06  40  ,att36 chf_att36
19:29:06  41  ,att37 chf_att37
19:29:06  42  FROM svm6162
19:29:06  43  /

Table created.

Elapsed: 00:00:00.17
19:29:06 SQL> 
19:29:06 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.41
19:29:06 SQL> 
19:29:06 SQL> -- rpt
19:29:06 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19284

Elapsed: 00:00:00.81
19:29:07 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19284

Elapsed: 00:00:00.01
19:29:07 SQL> 
19:29:07 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
