
SQL*Plus: Release 11.2.0.1.0 Production on Mon Jan 3 03:40:29 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

03:40:29 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.01
03:40:29 SQL> 03:40:29 SQL> --
03:40:29 SQL> -- eur610.sql
03:40:29 SQL> --
03:40:29 SQL> 
03:40:29 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:40:29 SQL> 
03:40:29 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.02
03:40:29 SQL> 
03:40:29 SQL> -- I created di5min here:
03:40:29 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:40:29 SQL> 
03:40:29 SQL> CREATE OR REPLACE VIEW svm6102 AS
03:40:29   2  SELECT
03:40:29   3  pair
03:40:29   4  ,ydate
03:40:29   5  ,prdate
03:40:29   6  ,rownum rnum -- acts as t in my time-series
03:40:29   7  ,clse
03:40:29   8  -- Derive a bunch of attributes from clse, the latest price:
03:40:29   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
03:40:29  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
03:40:29  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
03:40:29  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
03:40:29  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
03:40:29  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
03:40:29  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
03:40:29  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
03:40:29  17  --
03:40:29  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
03:40:29  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
03:40:29  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
03:40:29  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
03:40:29  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
03:40:29  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
03:40:29  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
03:40:29  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
03:40:29  26  --
03:40:29  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
03:40:29  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
03:40:29  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
03:40:29  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
03:40:29  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
03:40:29  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
03:40:29  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
03:40:29  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
03:40:29  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
03:40:29  36  FROM di5min WHERE pair LIKE'%eur%'
03:40:29  37  AND ydate > sysdate - 95
03:40:29  38  ORDER BY ydate
03:40:29  39  /

View created.

Elapsed: 00:00:00.11
03:40:29 SQL> 
03:40:29 SQL> -- rpt
03:40:29 SQL> 
03:40:29 SQL> SELECT
03:40:29   2  pair
03:40:29   3  ,COUNT(pair)
03:40:29   4  ,MIN(clse),MAX(clse)
03:40:29   5  ,MIN(avg6),MAX(avg6)
03:40:29   6  ,MIN(ydate),MAX(ydate)
03:40:29   7  FROM svm6102
03:40:29   8  GROUP BY pair
03:40:29   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
eur_usd       19259    1.29735	   1.4273 1.29875103 1.42436233 2010-09-30 03:45:01 2011-01-03 03:35:00

Elapsed: 00:00:00.91
03:40:30 SQL> 
03:40:30 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:40:30 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.15
03:40:30 SQL> CREATE TABLE svm6122 COMPRESS AS
03:40:30   2  SELECT
03:40:30   3  pair
03:40:30   4  ,ydate
03:40:30   5  ,prdate
03:40:30   6  ,clse
03:40:30   7  -- g6 is important. I want to predict g6:
03:40:30   8  ,ld6 - clse g6
03:40:30   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
03:40:30  10  -- I want more attributes from the ones I derived above:
03:40:30  11  -- clse relation to moving-min
03:40:30  12  ,clse-min4  cm4
03:40:30  13  ,clse-min6  cm6
03:40:30  14  ,clse-min8  cm8
03:40:30  15  ,clse-min10 cm10
03:40:30  16  ,clse-min12 cm12
03:40:30  17  ,clse-min14 cm14
03:40:30  18  ,clse-min16 cm16
03:40:30  19  ,clse-min18 cm18
03:40:30  20  -- clse relation to moving-avg
03:40:30  21  ,clse-avg4  ca4
03:40:30  22  ,clse-avg6  ca6
03:40:30  23  ,clse-avg8  ca8
03:40:30  24  ,clse-avg10 ca10
03:40:30  25  ,clse-avg12 ca12
03:40:30  26  ,clse-avg14 ca14
03:40:30  27  ,clse-avg16 ca16
03:40:30  28  ,clse-avg18 ca18
03:40:30  29  -- clse relation to moving-max
03:40:30  30  ,clse-max4  cx4
03:40:30  31  ,clse-max6  cx6
03:40:30  32  ,clse-max8  cx8
03:40:30  33  ,clse-max10 cx10
03:40:30  34  ,clse-max12 cx12
03:40:30  35  ,clse-max14 cx14
03:40:30  36  ,clse-max16 cx16
03:40:30  37  ,clse-max18 cx18
03:40:30  38  -- Derive more attributes.
03:40:30  39  -- I want to use CORR() here to help SVM see the shape of the series.
03:40:30  40  -- But COVAR_POP is more stable:
03:40:30  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
03:40:30  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:40:30  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:40:30  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:40:30  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:40:30  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:40:30  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:40:30  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:40:30  49  -- Derive date related attributes:
03:40:30  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:40:30  51  ,0+TO_CHAR(ydate,'D')d
03:40:30  52  ,0+TO_CHAR(ydate,'W')w
03:40:30  53  -- mpm stands for minutes-past-midnight:
03:40:30  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:40:30  55  -- mph stands for minutes-past-hour:
03:40:30  56  ,0+TO_CHAR(ydate,'MI')mph
03:40:30  57  FROM svm6102
03:40:30  58  ORDER BY ydate
03:40:30  59  /

Table created.

Elapsed: 00:00:02.35
03:40:32 SQL> 
03:40:32 SQL> -- rpt
03:40:32 SQL> 
03:40:32 SQL> SELECT
03:40:32   2  pair
03:40:32   3  ,COUNT(pair)
03:40:32   4  ,MIN(clse),MAX(clse)
03:40:32   5  ,MIN(ydate),MAX(ydate)
03:40:32   6  FROM svm6122
03:40:32   7  GROUP BY pair
03:40:32   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
eur_usd       19259    1.29735	   1.4273 2010-09-30 03:45:01 2011-01-03 03:35:00

Elapsed: 00:00:00.04
03:40:33 SQL> 
03:40:33 SQL> -- Prepare for derivation of NTILE based params:
03:40:33 SQL> 
03:40:33 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.67
03:40:33 SQL> CREATE TABLE svm6142 COMPRESS AS
03:40:33   2  SELECT
03:40:33   3  pair
03:40:33   4  ,ydate
03:40:33   5  ,prdate
03:40:33   6  ,clse
03:40:33   7  ,g6
03:40:33   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
03:40:33   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
03:40:33  10  ,CASE WHEN trend IS NULL THEN 1
03:40:33  11  	    WHEN trend =0      THEN 1
03:40:33  12  	    ELSE trend END trend
03:40:33  13  ,cm4
03:40:33  14  ,cm6
03:40:33  15  ,cm8
03:40:33  16  ,cm10
03:40:33  17  ,cm12
03:40:33  18  ,cm14
03:40:33  19  ,cm16
03:40:33  20  ,cm18
03:40:33  21  --
03:40:33  22  ,ca4
03:40:33  23  ,ca6
03:40:33  24  ,ca8
03:40:33  25  ,ca10
03:40:33  26  ,ca12
03:40:33  27  ,ca14
03:40:33  28  ,ca16
03:40:33  29  ,ca18
03:40:33  30  --
03:40:33  31  ,cx4
03:40:33  32  ,cx6
03:40:33  33  ,cx8
03:40:33  34  ,cx10
03:40:33  35  ,cx12
03:40:33  36  ,cx14
03:40:33  37  ,cx16
03:40:33  38  ,cx18
03:40:33  39  --
03:40:33  40  ,crr4
03:40:33  41  ,crr6
03:40:33  42  ,crr8
03:40:33  43  ,crr10
03:40:33  44  ,crr12
03:40:33  45  ,crr14
03:40:33  46  ,crr16
03:40:33  47  ,crr18
03:40:33  48  --
03:40:33  49  ,hh
03:40:33  50  ,d
03:40:33  51  ,w
03:40:33  52  ,mpm
03:40:33  53  ,mph
03:40:33  54  FROM svm6122
03:40:33  55  ORDER BY ydate
03:40:33  56  /

Table created.

Elapsed: 00:00:00.36
03:40:34 SQL> 
03:40:34 SQL> -- rpt
03:40:34 SQL> 
03:40:34 SQL> SELECT
03:40:34   2  pair
03:40:34   3  ,trend
03:40:34   4  ,gatt
03:40:34   5  ,COUNT(pair)
03:40:34   6  ,AVG(g6)
03:40:34   7  FROM svm6142
03:40:34   8  GROUP BY pair,trend,gatt
03:40:34   9  ORDER BY pair,trend,gatt
03:40:34  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      5957  -.0031418
eur_usd 	-1 up	      3547 .004480966
eur_usd 	-1		72
eur_usd 	 1 nup	      5853 -.00317247
eur_usd 	 1 up	      3830 .005056116

Elapsed: 00:00:00.04
03:40:34 SQL> 
03:40:34 SQL> 
03:40:34 SQL> -- Derive NTILE based params:
03:40:34 SQL> 
03:40:34 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.33
03:40:34 SQL> CREATE TABLE svm6162 COMPRESS AS
03:40:34   2  SELECT
03:40:34   3  pair
03:40:34   4  ,ydate
03:40:34   5  ,prdate
03:40:34   6  ,clse
03:40:34   7  ,g6
03:40:34   8  ,gatt
03:40:34   9  ,gattn
03:40:34  10  ,trend
03:40:34  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
03:40:34  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
03:40:34  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
03:40:34  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
03:40:34  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
03:40:34  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
03:40:34  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
03:40:34  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
03:40:34  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
03:40:34  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
03:40:34  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
03:40:34  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
03:40:34  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
03:40:34  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
03:40:34  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
03:40:34  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
03:40:34  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
03:40:34  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
03:40:34  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
03:40:34  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
03:40:34  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
03:40:34  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
03:40:34  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
03:40:34  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
03:40:34  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
03:40:34  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
03:40:34  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
03:40:34  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
03:40:34  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
03:40:34  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
03:40:34  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
03:40:34  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
03:40:34  43  ,hh  att32
03:40:34  44  ,d   att33
03:40:34  45  ,w   att34
03:40:34  46  ,mpm att35
03:40:34  47  ,mph att36
03:40:34  48  ,trend att37
03:40:34  49  FROM svm6142
03:40:34  50  ORDER BY ydate
03:40:34  51  /

Table created.

Elapsed: 00:00:04.71
03:40:39 SQL> 
03:40:39 SQL> -- rpt
03:40:39 SQL> 
03:40:39 SQL> SELECT
03:40:39   2  pair
03:40:39   3  ,trend
03:40:39   4  ,gatt
03:40:39   5  ,COUNT(pair)
03:40:39   6  ,AVG(g6)
03:40:39   7  FROM svm6162
03:40:39   8  GROUP BY pair,trend,gatt
03:40:39   9  ORDER BY pair,trend,gatt
03:40:39  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
eur_usd 	-1 nup	      5957  -.0031418
eur_usd 	-1 up	      3547 .004480966
eur_usd 	-1		72
eur_usd 	 1 nup	      5853 -.00317247
eur_usd 	 1 up	      3830 .005056116

Elapsed: 00:00:00.06
03:40:39 SQL> 
03:40:39 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.34
03:40:39 SQL> CREATE TABLE modsrc COMPRESS AS
03:40:39   2  SELECT
03:40:39   3  pair
03:40:39   4  ,ydate
03:40:39   5  ,prdate
03:40:39   6  ,trend
03:40:39   7  ,g6
03:40:39   8  ,gatt
03:40:39   9  ,gattn
03:40:39  10  FROM svm6162
03:40:39  11  /

Table created.

Elapsed: 00:00:00.10
03:40:39 SQL> 
03:40:39 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
03:40:39 SQL> 
03:40:39 SQL> DROP   TABLE eur_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
03:40:39 SQL> CREATE TABLE eur_ms610 COMPRESS AS
03:40:39   2  SELECT
03:40:39   3  ydate
03:40:39   4  ,trend eur_trend
03:40:39   5  ,g6    eur_g6
03:40:39   6  ,gatt  eur_gatt
03:40:39   7  ,gattn eur_gattn
03:40:39   8  FROM modsrc
03:40:39   9  /

Table created.

Elapsed: 00:00:00.07
03:40:39 SQL> 
03:40:39 SQL> ANALYZE TABLE eur_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
03:40:40 SQL> 
03:40:40 SQL> -- I need a copy of the attributes:
03:40:40 SQL> 
03:40:40 SQL> 
03:40:40 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.05
03:40:40 SQL> CREATE TABLE eur_att COMPRESS AS
03:40:40   2  SELECT
03:40:40   3  ydate
03:40:40   4  ,att00 eur_att00
03:40:40   5  ,att01 eur_att01
03:40:40   6  ,att02 eur_att02
03:40:40   7  ,att03 eur_att03
03:40:40   8  ,att04 eur_att04
03:40:40   9  ,att05 eur_att05
03:40:40  10  ,att06 eur_att06
03:40:40  11  ,att07 eur_att07
03:40:40  12  ,att08 eur_att08
03:40:40  13  ,att09 eur_att09
03:40:40  14  ,att10 eur_att10
03:40:40  15  ,att11 eur_att11
03:40:40  16  ,att12 eur_att12
03:40:40  17  ,att13 eur_att13
03:40:40  18  ,att14 eur_att14
03:40:40  19  ,att15 eur_att15
03:40:40  20  ,att16 eur_att16
03:40:40  21  ,att17 eur_att17
03:40:40  22  ,att18 eur_att18
03:40:40  23  ,att19 eur_att19
03:40:40  24  ,att20 eur_att20
03:40:40  25  ,att21 eur_att21
03:40:40  26  ,att22 eur_att22
03:40:40  27  ,att23 eur_att23
03:40:40  28  ,att24 eur_att24
03:40:40  29  ,att25 eur_att25
03:40:40  30  ,att26 eur_att26
03:40:40  31  ,att27 eur_att27
03:40:40  32  ,att28 eur_att28
03:40:40  33  ,att29 eur_att29
03:40:40  34  ,att30 eur_att30
03:40:40  35  ,att31 eur_att31
03:40:40  36  ,att32 eur_att32
03:40:40  37  ,att33 eur_att33
03:40:40  38  ,att34 eur_att34
03:40:40  39  ,att35 eur_att35
03:40:40  40  ,att36 eur_att36
03:40:40  41  ,att37 eur_att37
03:40:40  42  FROM svm6162
03:40:40  43  /

Table created.

Elapsed: 00:00:00.16
03:40:40 SQL> 
03:40:40 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.52
03:40:40 SQL> 
03:40:40 SQL> -- rpt
03:40:40 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.86
03:40:41 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.00
03:40:41 SQL> 
03:40:41 SQL> --
03:40:41 SQL> -- aud610.sql
03:40:41 SQL> --
03:40:41 SQL> 
03:40:41 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:40:41 SQL> 
03:40:41 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.55
03:40:42 SQL> 
03:40:42 SQL> -- I created di5min here:
03:40:42 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:40:42 SQL> 
03:40:42 SQL> CREATE OR REPLACE VIEW svm6102 AS
03:40:42   2  SELECT
03:40:42   3  pair
03:40:42   4  ,ydate
03:40:42   5  ,prdate
03:40:42   6  ,rownum rnum -- acts as t in my time-series
03:40:42   7  ,clse
03:40:42   8  -- Derive a bunch of attributes from clse, the latest price:
03:40:42   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
03:40:42  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
03:40:42  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
03:40:42  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
03:40:42  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
03:40:42  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
03:40:42  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
03:40:42  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
03:40:42  17  --
03:40:42  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
03:40:42  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
03:40:42  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
03:40:42  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
03:40:42  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
03:40:42  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
03:40:42  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
03:40:42  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
03:40:42  26  --
03:40:42  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
03:40:42  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
03:40:42  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
03:40:42  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
03:40:42  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
03:40:42  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
03:40:42  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
03:40:42  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
03:40:42  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
03:40:42  36  FROM di5min WHERE pair LIKE'%aud%'
03:40:42  37  AND ydate > sysdate - 95
03:40:42  38  ORDER BY ydate
03:40:42  39  /

View created.

Elapsed: 00:00:00.05
03:40:42 SQL> 
03:40:42 SQL> -- rpt
03:40:42 SQL> 
03:40:42 SQL> SELECT
03:40:42   2  pair
03:40:42   3  ,COUNT(pair)
03:40:42   4  ,MIN(clse),MAX(clse)
03:40:42   5  ,MIN(avg6),MAX(avg6)
03:40:42   6  ,MIN(ydate),MAX(ydate)
03:40:42   7  FROM svm6102
03:40:42   8  GROUP BY pair
03:40:42   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
aud_usd       19256	.95405	  1.02495 .957141438 1.02284247 2010-09-30 03:45:01 2011-01-03 03:35:00

Elapsed: 00:00:00.88
03:40:43 SQL> 
03:40:43 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:40:43 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.24
03:40:43 SQL> CREATE TABLE svm6122 COMPRESS AS
03:40:43   2  SELECT
03:40:43   3  pair
03:40:43   4  ,ydate
03:40:43   5  ,prdate
03:40:43   6  ,clse
03:40:43   7  -- g6 is important. I want to predict g6:
03:40:43   8  ,ld6 - clse g6
03:40:43   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
03:40:43  10  -- I want more attributes from the ones I derived above:
03:40:43  11  -- clse relation to moving-min
03:40:43  12  ,clse-min4  cm4
03:40:43  13  ,clse-min6  cm6
03:40:43  14  ,clse-min8  cm8
03:40:43  15  ,clse-min10 cm10
03:40:43  16  ,clse-min12 cm12
03:40:43  17  ,clse-min14 cm14
03:40:43  18  ,clse-min16 cm16
03:40:43  19  ,clse-min18 cm18
03:40:43  20  -- clse relation to moving-avg
03:40:43  21  ,clse-avg4  ca4
03:40:43  22  ,clse-avg6  ca6
03:40:43  23  ,clse-avg8  ca8
03:40:43  24  ,clse-avg10 ca10
03:40:43  25  ,clse-avg12 ca12
03:40:43  26  ,clse-avg14 ca14
03:40:43  27  ,clse-avg16 ca16
03:40:43  28  ,clse-avg18 ca18
03:40:43  29  -- clse relation to moving-max
03:40:43  30  ,clse-max4  cx4
03:40:43  31  ,clse-max6  cx6
03:40:43  32  ,clse-max8  cx8
03:40:43  33  ,clse-max10 cx10
03:40:43  34  ,clse-max12 cx12
03:40:43  35  ,clse-max14 cx14
03:40:43  36  ,clse-max16 cx16
03:40:43  37  ,clse-max18 cx18
03:40:43  38  -- Derive more attributes.
03:40:43  39  -- I want to use CORR() here to help SVM see the shape of the series.
03:40:43  40  -- But COVAR_POP is more stable:
03:40:43  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
03:40:43  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:40:43  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:40:43  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:40:43  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:40:43  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:40:43  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:40:43  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:40:43  49  -- Derive date related attributes:
03:40:43  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:40:43  51  ,0+TO_CHAR(ydate,'D')d
03:40:43  52  ,0+TO_CHAR(ydate,'W')w
03:40:43  53  -- mpm stands for minutes-past-midnight:
03:40:43  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:40:43  55  -- mph stands for minutes-past-hour:
03:40:43  56  ,0+TO_CHAR(ydate,'MI')mph
03:40:43  57  FROM svm6102
03:40:43  58  ORDER BY ydate
03:40:43  59  /

Table created.

Elapsed: 00:00:02.02
03:40:45 SQL> 
03:40:45 SQL> -- rpt
03:40:45 SQL> 
03:40:45 SQL> SELECT
03:40:45   2  pair
03:40:45   3  ,COUNT(pair)
03:40:45   4  ,MIN(clse),MAX(clse)
03:40:45   5  ,MIN(ydate),MAX(ydate)
03:40:45   6  FROM svm6122
03:40:45   7  GROUP BY pair
03:40:45   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
aud_usd       19256	.95405	  1.02495 2010-09-30 03:45:01 2011-01-03 03:35:00

Elapsed: 00:00:00.04
03:40:45 SQL> 
03:40:45 SQL> -- Prepare for derivation of NTILE based params:
03:40:45 SQL> 
03:40:45 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.27
03:40:45 SQL> CREATE TABLE svm6142 COMPRESS AS
03:40:45   2  SELECT
03:40:45   3  pair
03:40:45   4  ,ydate
03:40:45   5  ,prdate
03:40:45   6  ,clse
03:40:45   7  ,g6
03:40:45   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
03:40:45   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
03:40:45  10  ,CASE WHEN trend IS NULL THEN 1
03:40:45  11  	    WHEN trend =0      THEN 1
03:40:45  12  	    ELSE trend END trend
03:40:45  13  ,cm4
03:40:45  14  ,cm6
03:40:45  15  ,cm8
03:40:45  16  ,cm10
03:40:45  17  ,cm12
03:40:45  18  ,cm14
03:40:45  19  ,cm16
03:40:45  20  ,cm18
03:40:45  21  --
03:40:45  22  ,ca4
03:40:45  23  ,ca6
03:40:45  24  ,ca8
03:40:45  25  ,ca10
03:40:45  26  ,ca12
03:40:45  27  ,ca14
03:40:45  28  ,ca16
03:40:45  29  ,ca18
03:40:45  30  --
03:40:45  31  ,cx4
03:40:45  32  ,cx6
03:40:45  33  ,cx8
03:40:45  34  ,cx10
03:40:45  35  ,cx12
03:40:45  36  ,cx14
03:40:45  37  ,cx16
03:40:45  38  ,cx18
03:40:45  39  --
03:40:45  40  ,crr4
03:40:45  41  ,crr6
03:40:45  42  ,crr8
03:40:45  43  ,crr10
03:40:45  44  ,crr12
03:40:45  45  ,crr14
03:40:45  46  ,crr16
03:40:45  47  ,crr18
03:40:45  48  --
03:40:45  49  ,hh
03:40:45  50  ,d
03:40:45  51  ,w
03:40:45  52  ,mpm
03:40:45  53  ,mph
03:40:45  54  FROM svm6122
03:40:45  55  ORDER BY ydate
03:40:45  56  /

Table created.

Elapsed: 00:00:00.36
03:40:46 SQL> 
03:40:46 SQL> -- rpt
03:40:46 SQL> 
03:40:46 SQL> SELECT
03:40:46   2  pair
03:40:46   3  ,trend
03:40:46   4  ,gatt
03:40:46   5  ,COUNT(pair)
03:40:46   6  ,AVG(g6)
03:40:46   7  FROM svm6142
03:40:46   8  GROUP BY pair,trend,gatt
03:40:46   9  ORDER BY pair,trend,gatt
03:40:46  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5033 -.00217742
aud_usd 	-1 up	      3739 .003751381
aud_usd 	-1		65
aud_usd 	 1 nup	      6710 -.00211536
aud_usd 	 1 up	      3702 .004031193
aud_usd 	 1		 7

6 rows selected.

Elapsed: 00:00:00.06
03:40:46 SQL> 
03:40:46 SQL> 
03:40:46 SQL> -- Derive NTILE based params:
03:40:46 SQL> 
03:40:46 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.20
03:40:46 SQL> CREATE TABLE svm6162 COMPRESS AS
03:40:46   2  SELECT
03:40:46   3  pair
03:40:46   4  ,ydate
03:40:46   5  ,prdate
03:40:46   6  ,clse
03:40:46   7  ,g6
03:40:46   8  ,gatt
03:40:46   9  ,gattn
03:40:46  10  ,trend
03:40:46  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
03:40:46  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
03:40:46  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
03:40:46  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
03:40:46  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
03:40:46  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
03:40:46  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
03:40:46  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
03:40:46  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
03:40:46  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
03:40:46  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
03:40:46  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
03:40:46  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
03:40:46  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
03:40:46  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
03:40:46  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
03:40:46  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
03:40:46  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
03:40:46  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
03:40:46  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
03:40:46  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
03:40:46  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
03:40:46  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
03:40:46  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
03:40:46  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
03:40:46  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
03:40:46  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
03:40:46  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
03:40:46  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
03:40:46  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
03:40:46  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
03:40:46  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
03:40:46  43  ,hh  att32
03:40:46  44  ,d   att33
03:40:46  45  ,w   att34
03:40:46  46  ,mpm att35
03:40:46  47  ,mph att36
03:40:46  48  ,trend att37
03:40:46  49  FROM svm6142
03:40:46  50  ORDER BY ydate
03:40:46  51  /

Table created.

Elapsed: 00:00:04.82
03:40:51 SQL> 
03:40:51 SQL> -- rpt
03:40:51 SQL> 
03:40:51 SQL> SELECT
03:40:51   2  pair
03:40:51   3  ,trend
03:40:51   4  ,gatt
03:40:51   5  ,COUNT(pair)
03:40:51   6  ,AVG(g6)
03:40:51   7  FROM svm6162
03:40:51   8  GROUP BY pair,trend,gatt
03:40:51   9  ORDER BY pair,trend,gatt
03:40:51  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
aud_usd 	-1 nup	      5033 -.00217742
aud_usd 	-1 up	      3739 .003751381
aud_usd 	-1		65
aud_usd 	 1 nup	      6710 -.00211536
aud_usd 	 1 up	      3702 .004031193
aud_usd 	 1		 7

6 rows selected.

Elapsed: 00:00:00.03
03:40:51 SQL> 
03:40:51 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
03:40:51 SQL> CREATE TABLE modsrc COMPRESS AS
03:40:51   2  SELECT
03:40:51   3  pair
03:40:51   4  ,ydate
03:40:51   5  ,prdate
03:40:51   6  ,trend
03:40:51   7  ,g6
03:40:51   8  ,gatt
03:40:51   9  ,gattn
03:40:51  10  FROM svm6162
03:40:51  11  /

Table created.

Elapsed: 00:00:00.08
03:40:51 SQL> 
03:40:51 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
03:40:51 SQL> 
03:40:51 SQL> DROP   TABLE aud_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
03:40:51 SQL> CREATE TABLE aud_ms610 COMPRESS AS
03:40:51   2  SELECT
03:40:51   3  ydate
03:40:51   4  ,trend aud_trend
03:40:51   5  ,g6    aud_g6
03:40:51   6  ,gatt  aud_gatt
03:40:51   7  ,gattn aud_gattn
03:40:51   8  FROM modsrc
03:40:51   9  /

Table created.

Elapsed: 00:00:00.07
03:40:51 SQL> 
03:40:51 SQL> ANALYZE TABLE aud_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:01.27
03:40:53 SQL> 
03:40:53 SQL> -- I need a copy of the attributes:
03:40:53 SQL> 
03:40:53 SQL> 
03:40:53 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.11
03:40:53 SQL> CREATE TABLE aud_att COMPRESS AS
03:40:53   2  SELECT
03:40:53   3  ydate
03:40:53   4  ,att00 aud_att00
03:40:53   5  ,att01 aud_att01
03:40:53   6  ,att02 aud_att02
03:40:53   7  ,att03 aud_att03
03:40:53   8  ,att04 aud_att04
03:40:53   9  ,att05 aud_att05
03:40:53  10  ,att06 aud_att06
03:40:53  11  ,att07 aud_att07
03:40:53  12  ,att08 aud_att08
03:40:53  13  ,att09 aud_att09
03:40:53  14  ,att10 aud_att10
03:40:53  15  ,att11 aud_att11
03:40:53  16  ,att12 aud_att12
03:40:53  17  ,att13 aud_att13
03:40:53  18  ,att14 aud_att14
03:40:53  19  ,att15 aud_att15
03:40:53  20  ,att16 aud_att16
03:40:53  21  ,att17 aud_att17
03:40:53  22  ,att18 aud_att18
03:40:53  23  ,att19 aud_att19
03:40:53  24  ,att20 aud_att20
03:40:53  25  ,att21 aud_att21
03:40:53  26  ,att22 aud_att22
03:40:53  27  ,att23 aud_att23
03:40:53  28  ,att24 aud_att24
03:40:53  29  ,att25 aud_att25
03:40:53  30  ,att26 aud_att26
03:40:53  31  ,att27 aud_att27
03:40:53  32  ,att28 aud_att28
03:40:53  33  ,att29 aud_att29
03:40:53  34  ,att30 aud_att30
03:40:53  35  ,att31 aud_att31
03:40:53  36  ,att32 aud_att32
03:40:53  37  ,att33 aud_att33
03:40:53  38  ,att34 aud_att34
03:40:53  39  ,att35 aud_att35
03:40:53  40  ,att36 aud_att36
03:40:53  41  ,att37 aud_att37
03:40:53  42  FROM svm6162
03:40:53  43  /

Table created.

Elapsed: 00:00:00.19
03:40:53 SQL> 
03:40:53 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
03:40:53 SQL> 
03:40:53 SQL> -- rpt
03:40:53 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.83
03:40:54 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.00
03:40:54 SQL> 
03:40:54 SQL> --
03:40:54 SQL> -- gbp610.sql
03:40:54 SQL> --
03:40:54 SQL> 
03:40:54 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:40:54 SQL> 
03:40:54 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.36
03:40:54 SQL> 
03:40:54 SQL> -- I created di5min here:
03:40:54 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:40:54 SQL> 
03:40:54 SQL> CREATE OR REPLACE VIEW svm6102 AS
03:40:54   2  SELECT
03:40:54   3  pair
03:40:54   4  ,ydate
03:40:54   5  ,prdate
03:40:54   6  ,rownum rnum -- acts as t in my time-series
03:40:54   7  ,clse
03:40:54   8  -- Derive a bunch of attributes from clse, the latest price:
03:40:54   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
03:40:54  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
03:40:54  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
03:40:54  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
03:40:54  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
03:40:54  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
03:40:54  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
03:40:54  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
03:40:54  17  --
03:40:54  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
03:40:54  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
03:40:54  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
03:40:54  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
03:40:54  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
03:40:54  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
03:40:54  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
03:40:54  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
03:40:54  26  --
03:40:54  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
03:40:54  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
03:40:54  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
03:40:54  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
03:40:54  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
03:40:54  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
03:40:54  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
03:40:54  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
03:40:54  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
03:40:54  36  FROM di5min WHERE pair LIKE'%gbp%'
03:40:54  37  AND ydate > sysdate - 95
03:40:54  38  ORDER BY ydate
03:40:54  39  /

View created.

Elapsed: 00:00:00.05
03:40:55 SQL> 
03:40:55 SQL> -- rpt
03:40:55 SQL> 
03:40:55 SQL> SELECT
03:40:55   2  pair
03:40:55   3  ,COUNT(pair)
03:40:55   4  ,MIN(clse),MAX(clse)
03:40:55   5  ,MIN(avg6),MAX(avg6)
03:40:55   6  ,MIN(ydate),MAX(ydate)
03:40:55   7  FROM svm6102
03:40:55   8  GROUP BY pair
03:40:55   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
gbp_usd       19258   1.535325	   1.6295 1.53696747 1.62716986 2010-09-30 03:45:01 2011-01-03 03:35:00

Elapsed: 00:00:00.86
03:40:55 SQL> 
03:40:55 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:40:55 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.41
03:40:56 SQL> CREATE TABLE svm6122 COMPRESS AS
03:40:56   2  SELECT
03:40:56   3  pair
03:40:56   4  ,ydate
03:40:56   5  ,prdate
03:40:56   6  ,clse
03:40:56   7  -- g6 is important. I want to predict g6:
03:40:56   8  ,ld6 - clse g6
03:40:56   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
03:40:56  10  -- I want more attributes from the ones I derived above:
03:40:56  11  -- clse relation to moving-min
03:40:56  12  ,clse-min4  cm4
03:40:56  13  ,clse-min6  cm6
03:40:56  14  ,clse-min8  cm8
03:40:56  15  ,clse-min10 cm10
03:40:56  16  ,clse-min12 cm12
03:40:56  17  ,clse-min14 cm14
03:40:56  18  ,clse-min16 cm16
03:40:56  19  ,clse-min18 cm18
03:40:56  20  -- clse relation to moving-avg
03:40:56  21  ,clse-avg4  ca4
03:40:56  22  ,clse-avg6  ca6
03:40:56  23  ,clse-avg8  ca8
03:40:56  24  ,clse-avg10 ca10
03:40:56  25  ,clse-avg12 ca12
03:40:56  26  ,clse-avg14 ca14
03:40:56  27  ,clse-avg16 ca16
03:40:56  28  ,clse-avg18 ca18
03:40:56  29  -- clse relation to moving-max
03:40:56  30  ,clse-max4  cx4
03:40:56  31  ,clse-max6  cx6
03:40:56  32  ,clse-max8  cx8
03:40:56  33  ,clse-max10 cx10
03:40:56  34  ,clse-max12 cx12
03:40:56  35  ,clse-max14 cx14
03:40:56  36  ,clse-max16 cx16
03:40:56  37  ,clse-max18 cx18
03:40:56  38  -- Derive more attributes.
03:40:56  39  -- I want to use CORR() here to help SVM see the shape of the series.
03:40:56  40  -- But COVAR_POP is more stable:
03:40:56  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
03:40:56  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:40:56  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:40:56  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:40:56  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:40:56  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:40:56  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:40:56  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:40:56  49  -- Derive date related attributes:
03:40:56  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:40:56  51  ,0+TO_CHAR(ydate,'D')d
03:40:56  52  ,0+TO_CHAR(ydate,'W')w
03:40:56  53  -- mpm stands for minutes-past-midnight:
03:40:56  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:40:56  55  -- mph stands for minutes-past-hour:
03:40:56  56  ,0+TO_CHAR(ydate,'MI')mph
03:40:56  57  FROM svm6102
03:40:56  58  ORDER BY ydate
03:40:56  59  /

Table created.

Elapsed: 00:00:02.10
03:40:58 SQL> 
03:40:58 SQL> -- rpt
03:40:58 SQL> 
03:40:58 SQL> SELECT
03:40:58   2  pair
03:40:58   3  ,COUNT(pair)
03:40:58   4  ,MIN(clse),MAX(clse)
03:40:58   5  ,MIN(ydate),MAX(ydate)
03:40:58   6  FROM svm6122
03:40:58   7  GROUP BY pair
03:40:58   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
gbp_usd       19258   1.535325	   1.6295 2010-09-30 03:45:01 2011-01-03 03:35:00

Elapsed: 00:00:00.04
03:40:58 SQL> 
03:40:58 SQL> -- Prepare for derivation of NTILE based params:
03:40:58 SQL> 
03:40:58 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.27
03:40:58 SQL> CREATE TABLE svm6142 COMPRESS AS
03:40:58   2  SELECT
03:40:58   3  pair
03:40:58   4  ,ydate
03:40:58   5  ,prdate
03:40:58   6  ,clse
03:40:58   7  ,g6
03:40:58   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
03:40:58   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
03:40:58  10  ,CASE WHEN trend IS NULL THEN 1
03:40:58  11  	    WHEN trend =0      THEN 1
03:40:58  12  	    ELSE trend END trend
03:40:58  13  ,cm4
03:40:58  14  ,cm6
03:40:58  15  ,cm8
03:40:58  16  ,cm10
03:40:58  17  ,cm12
03:40:58  18  ,cm14
03:40:58  19  ,cm16
03:40:58  20  ,cm18
03:40:58  21  --
03:40:58  22  ,ca4
03:40:58  23  ,ca6
03:40:58  24  ,ca8
03:40:58  25  ,ca10
03:40:58  26  ,ca12
03:40:58  27  ,ca14
03:40:58  28  ,ca16
03:40:58  29  ,ca18
03:40:58  30  --
03:40:58  31  ,cx4
03:40:58  32  ,cx6
03:40:58  33  ,cx8
03:40:58  34  ,cx10
03:40:58  35  ,cx12
03:40:58  36  ,cx14
03:40:58  37  ,cx16
03:40:58  38  ,cx18
03:40:58  39  --
03:40:58  40  ,crr4
03:40:58  41  ,crr6
03:40:58  42  ,crr8
03:40:58  43  ,crr10
03:40:58  44  ,crr12
03:40:58  45  ,crr14
03:40:58  46  ,crr16
03:40:58  47  ,crr18
03:40:58  48  --
03:40:58  49  ,hh
03:40:58  50  ,d
03:40:58  51  ,w
03:40:58  52  ,mpm
03:40:58  53  ,mph
03:40:58  54  FROM svm6122
03:40:58  55  ORDER BY ydate
03:40:58  56  /

Table created.

Elapsed: 00:00:00.37
03:40:59 SQL> 
03:40:59 SQL> -- rpt
03:40:59 SQL> 
03:40:59 SQL> SELECT
03:40:59   2  pair
03:40:59   3  ,trend
03:40:59   4  ,gatt
03:40:59   5  ,COUNT(pair)
03:40:59   6  ,AVG(g6)
03:40:59   7  FROM svm6142
03:40:59   8  GROUP BY pair,trend,gatt
03:40:59   9  ORDER BY pair,trend,gatt
03:40:59  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6121 -.00268543
gbp_usd 	-1 up	      3474 .004328649
gbp_usd 	-1		70
gbp_usd 	 1 nup	      6093 -.00270892
gbp_usd 	 1 up	      3498 .004510299
gbp_usd 	 1		 2

6 rows selected.

Elapsed: 00:00:00.04
03:40:59 SQL> 
03:40:59 SQL> 
03:40:59 SQL> -- Derive NTILE based params:
03:40:59 SQL> 
03:40:59 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.14
03:40:59 SQL> CREATE TABLE svm6162 COMPRESS AS
03:40:59   2  SELECT
03:40:59   3  pair
03:40:59   4  ,ydate
03:40:59   5  ,prdate
03:40:59   6  ,clse
03:40:59   7  ,g6
03:40:59   8  ,gatt
03:40:59   9  ,gattn
03:40:59  10  ,trend
03:40:59  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
03:40:59  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
03:40:59  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
03:40:59  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
03:40:59  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
03:40:59  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
03:40:59  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
03:40:59  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
03:40:59  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
03:40:59  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
03:40:59  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
03:40:59  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
03:40:59  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
03:40:59  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
03:40:59  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
03:40:59  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
03:40:59  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
03:40:59  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
03:40:59  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
03:40:59  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
03:40:59  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
03:40:59  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
03:40:59  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
03:40:59  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
03:40:59  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
03:40:59  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
03:40:59  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
03:40:59  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
03:40:59  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
03:40:59  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
03:40:59  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
03:40:59  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
03:40:59  43  ,hh  att32
03:40:59  44  ,d   att33
03:40:59  45  ,w   att34
03:40:59  46  ,mpm att35
03:40:59  47  ,mph att36
03:40:59  48  ,trend att37
03:40:59  49  FROM svm6142
03:40:59  50  ORDER BY ydate
03:40:59  51  /

Table created.

Elapsed: 00:00:04.63
03:41:03 SQL> 
03:41:03 SQL> -- rpt
03:41:03 SQL> 
03:41:03 SQL> SELECT
03:41:03   2  pair
03:41:03   3  ,trend
03:41:03   4  ,gatt
03:41:03   5  ,COUNT(pair)
03:41:03   6  ,AVG(g6)
03:41:03   7  FROM svm6162
03:41:03   8  GROUP BY pair,trend,gatt
03:41:03   9  ORDER BY pair,trend,gatt
03:41:03  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
gbp_usd 	-1 nup	      6121 -.00268543
gbp_usd 	-1 up	      3474 .004328649
gbp_usd 	-1		70
gbp_usd 	 1 nup	      6093 -.00270892
gbp_usd 	 1 up	      3498 .004510299
gbp_usd 	 1		 2

6 rows selected.

Elapsed: 00:00:00.04
03:41:03 SQL> 
03:41:03 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.11
03:41:04 SQL> CREATE TABLE modsrc COMPRESS AS
03:41:04   2  SELECT
03:41:04   3  pair
03:41:04   4  ,ydate
03:41:04   5  ,prdate
03:41:04   6  ,trend
03:41:04   7  ,g6
03:41:04   8  ,gatt
03:41:04   9  ,gattn
03:41:04  10  FROM svm6162
03:41:04  11  /

Table created.

Elapsed: 00:00:00.08
03:41:04 SQL> 
03:41:04 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
03:41:04 SQL> 
03:41:04 SQL> DROP   TABLE gbp_ms610 ;

Table dropped.

Elapsed: 00:00:00.06
03:41:04 SQL> CREATE TABLE gbp_ms610 COMPRESS AS
03:41:04   2  SELECT
03:41:04   3  ydate
03:41:04   4  ,trend gbp_trend
03:41:04   5  ,g6    gbp_g6
03:41:04   6  ,gatt  gbp_gatt
03:41:04   7  ,gattn gbp_gattn
03:41:04   8  FROM modsrc
03:41:04   9  /

Table created.

Elapsed: 00:00:00.06
03:41:04 SQL> 
03:41:04 SQL> ANALYZE TABLE gbp_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
03:41:04 SQL> 
03:41:04 SQL> -- I need a copy of the attributes:
03:41:04 SQL> 
03:41:04 SQL> 
03:41:04 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.06
03:41:04 SQL> CREATE TABLE gbp_att COMPRESS AS
03:41:04   2  SELECT
03:41:04   3  ydate
03:41:04   4  ,att00 gbp_att00
03:41:04   5  ,att01 gbp_att01
03:41:04   6  ,att02 gbp_att02
03:41:04   7  ,att03 gbp_att03
03:41:04   8  ,att04 gbp_att04
03:41:04   9  ,att05 gbp_att05
03:41:04  10  ,att06 gbp_att06
03:41:04  11  ,att07 gbp_att07
03:41:04  12  ,att08 gbp_att08
03:41:04  13  ,att09 gbp_att09
03:41:04  14  ,att10 gbp_att10
03:41:04  15  ,att11 gbp_att11
03:41:04  16  ,att12 gbp_att12
03:41:04  17  ,att13 gbp_att13
03:41:04  18  ,att14 gbp_att14
03:41:04  19  ,att15 gbp_att15
03:41:04  20  ,att16 gbp_att16
03:41:04  21  ,att17 gbp_att17
03:41:04  22  ,att18 gbp_att18
03:41:04  23  ,att19 gbp_att19
03:41:04  24  ,att20 gbp_att20
03:41:04  25  ,att21 gbp_att21
03:41:04  26  ,att22 gbp_att22
03:41:04  27  ,att23 gbp_att23
03:41:04  28  ,att24 gbp_att24
03:41:04  29  ,att25 gbp_att25
03:41:04  30  ,att26 gbp_att26
03:41:04  31  ,att27 gbp_att27
03:41:04  32  ,att28 gbp_att28
03:41:04  33  ,att29 gbp_att29
03:41:04  34  ,att30 gbp_att30
03:41:04  35  ,att31 gbp_att31
03:41:04  36  ,att32 gbp_att32
03:41:04  37  ,att33 gbp_att33
03:41:04  38  ,att34 gbp_att34
03:41:04  39  ,att35 gbp_att35
03:41:04  40  ,att36 gbp_att36
03:41:04  41  ,att37 gbp_att37
03:41:04  42  FROM svm6162
03:41:04  43  /

Table created.

Elapsed: 00:00:00.21
03:41:04 SQL> 
03:41:04 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.68
03:41:05 SQL> 
03:41:05 SQL> -- rpt
03:41:05 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19258

Elapsed: 00:00:00.84
03:41:06 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19258

Elapsed: 00:00:00.01
03:41:06 SQL> 
03:41:06 SQL> --
03:41:06 SQL> -- jpy610.sql
03:41:06 SQL> --
03:41:06 SQL> 
03:41:06 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:41:06 SQL> 
03:41:06 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.35
03:41:06 SQL> 
03:41:06 SQL> -- I created di5min here:
03:41:06 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:41:06 SQL> 
03:41:06 SQL> CREATE OR REPLACE VIEW svm6102 AS
03:41:06   2  SELECT
03:41:06   3  pair
03:41:06   4  ,ydate
03:41:06   5  ,prdate
03:41:06   6  ,rownum rnum -- acts as t in my time-series
03:41:06   7  ,clse
03:41:06   8  -- Derive a bunch of attributes from clse, the latest price:
03:41:06   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
03:41:06  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
03:41:06  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
03:41:06  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
03:41:06  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
03:41:06  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
03:41:06  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
03:41:06  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
03:41:06  17  --
03:41:06  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
03:41:06  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
03:41:06  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
03:41:06  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
03:41:06  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
03:41:06  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
03:41:06  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
03:41:06  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
03:41:06  26  --
03:41:06  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
03:41:06  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
03:41:06  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
03:41:06  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
03:41:06  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
03:41:06  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
03:41:06  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
03:41:06  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
03:41:06  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
03:41:06  36  FROM di5min WHERE pair LIKE'%jpy%'
03:41:06  37  AND ydate > sysdate - 95
03:41:06  38  ORDER BY ydate
03:41:06  39  /

View created.

Elapsed: 00:00:00.06
03:41:06 SQL> 
03:41:06 SQL> -- rpt
03:41:06 SQL> 
03:41:06 SQL> SELECT
03:41:06   2  pair
03:41:06   3  ,COUNT(pair)
03:41:06   4  ,MIN(clse),MAX(clse)
03:41:06   5  ,MIN(avg6),MAX(avg6)
03:41:06   6  ,MIN(ydate),MAX(ydate)
03:41:06   7  FROM svm6102
03:41:06   8  GROUP BY pair
03:41:06   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_jpy       19256	 80.25	   84.485 80.3595205 84.3105479 2010-09-30 03:45:01 2011-01-03 03:35:00

Elapsed: 00:00:00.90
03:41:07 SQL> 
03:41:07 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:41:07 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.32
03:41:08 SQL> CREATE TABLE svm6122 COMPRESS AS
03:41:08   2  SELECT
03:41:08   3  pair
03:41:08   4  ,ydate
03:41:08   5  ,prdate
03:41:08   6  ,clse
03:41:08   7  -- g6 is important. I want to predict g6:
03:41:08   8  ,ld6 - clse g6
03:41:08   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
03:41:08  10  -- I want more attributes from the ones I derived above:
03:41:08  11  -- clse relation to moving-min
03:41:08  12  ,clse-min4  cm4
03:41:08  13  ,clse-min6  cm6
03:41:08  14  ,clse-min8  cm8
03:41:08  15  ,clse-min10 cm10
03:41:08  16  ,clse-min12 cm12
03:41:08  17  ,clse-min14 cm14
03:41:08  18  ,clse-min16 cm16
03:41:08  19  ,clse-min18 cm18
03:41:08  20  -- clse relation to moving-avg
03:41:08  21  ,clse-avg4  ca4
03:41:08  22  ,clse-avg6  ca6
03:41:08  23  ,clse-avg8  ca8
03:41:08  24  ,clse-avg10 ca10
03:41:08  25  ,clse-avg12 ca12
03:41:08  26  ,clse-avg14 ca14
03:41:08  27  ,clse-avg16 ca16
03:41:08  28  ,clse-avg18 ca18
03:41:08  29  -- clse relation to moving-max
03:41:08  30  ,clse-max4  cx4
03:41:08  31  ,clse-max6  cx6
03:41:08  32  ,clse-max8  cx8
03:41:08  33  ,clse-max10 cx10
03:41:08  34  ,clse-max12 cx12
03:41:08  35  ,clse-max14 cx14
03:41:08  36  ,clse-max16 cx16
03:41:08  37  ,clse-max18 cx18
03:41:08  38  -- Derive more attributes.
03:41:08  39  -- I want to use CORR() here to help SVM see the shape of the series.
03:41:08  40  -- But COVAR_POP is more stable:
03:41:08  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
03:41:08  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:41:08  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:41:08  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:41:08  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:41:08  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:41:08  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:41:08  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:41:08  49  -- Derive date related attributes:
03:41:08  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:41:08  51  ,0+TO_CHAR(ydate,'D')d
03:41:08  52  ,0+TO_CHAR(ydate,'W')w
03:41:08  53  -- mpm stands for minutes-past-midnight:
03:41:08  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:41:08  55  -- mph stands for minutes-past-hour:
03:41:08  56  ,0+TO_CHAR(ydate,'MI')mph
03:41:08  57  FROM svm6102
03:41:08  58  ORDER BY ydate
03:41:08  59  /

Table created.

Elapsed: 00:00:02.05
03:41:10 SQL> 
03:41:10 SQL> -- rpt
03:41:10 SQL> 
03:41:10 SQL> SELECT
03:41:10   2  pair
03:41:10   3  ,COUNT(pair)
03:41:10   4  ,MIN(clse),MAX(clse)
03:41:10   5  ,MIN(ydate),MAX(ydate)
03:41:10   6  FROM svm6122
03:41:10   7  GROUP BY pair
03:41:10   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_jpy       19256	 80.25	   84.485 2010-09-30 03:45:01 2011-01-03 03:35:00

Elapsed: 00:00:00.04
03:41:10 SQL> 
03:41:10 SQL> -- Prepare for derivation of NTILE based params:
03:41:10 SQL> 
03:41:10 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.16
03:41:10 SQL> CREATE TABLE svm6142 COMPRESS AS
03:41:10   2  SELECT
03:41:10   3  pair
03:41:10   4  ,ydate
03:41:10   5  ,prdate
03:41:10   6  ,clse
03:41:10   7  ,g6
03:41:10   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
03:41:10   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
03:41:10  10  ,CASE WHEN trend IS NULL THEN 1
03:41:10  11  	    WHEN trend =0      THEN 1
03:41:10  12  	    ELSE trend END trend
03:41:10  13  ,cm4
03:41:10  14  ,cm6
03:41:10  15  ,cm8
03:41:10  16  ,cm10
03:41:10  17  ,cm12
03:41:10  18  ,cm14
03:41:10  19  ,cm16
03:41:10  20  ,cm18
03:41:10  21  --
03:41:10  22  ,ca4
03:41:10  23  ,ca6
03:41:10  24  ,ca8
03:41:10  25  ,ca10
03:41:10  26  ,ca12
03:41:10  27  ,ca14
03:41:10  28  ,ca16
03:41:10  29  ,ca18
03:41:10  30  --
03:41:10  31  ,cx4
03:41:10  32  ,cx6
03:41:10  33  ,cx8
03:41:10  34  ,cx10
03:41:10  35  ,cx12
03:41:10  36  ,cx14
03:41:10  37  ,cx16
03:41:10  38  ,cx18
03:41:10  39  --
03:41:10  40  ,crr4
03:41:10  41  ,crr6
03:41:10  42  ,crr8
03:41:10  43  ,crr10
03:41:10  44  ,crr12
03:41:10  45  ,crr14
03:41:10  46  ,crr16
03:41:10  47  ,crr18
03:41:10  48  --
03:41:10  49  ,hh
03:41:10  50  ,d
03:41:10  51  ,w
03:41:10  52  ,mpm
03:41:10  53  ,mph
03:41:10  54  FROM svm6122
03:41:10  55  ORDER BY ydate
03:41:10  56  /

Table created.

Elapsed: 00:00:00.35
03:41:10 SQL> 
03:41:10 SQL> -- rpt
03:41:10 SQL> 
03:41:10 SQL> SELECT
03:41:10   2  pair
03:41:10   3  ,trend
03:41:10   4  ,gatt
03:41:10   5  ,COUNT(pair)
03:41:10   6  ,AVG(g6)
03:41:10   7  FROM svm6142
03:41:10   8  GROUP BY pair,trend,gatt
03:41:10   9  ORDER BY pair,trend,gatt
03:41:10  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5229 -.16571525
usd_jpy 	-1 up	      4872 .164825118
usd_jpy 	-1		13
usd_jpy 	 1 nup	      4967  -.1557413
usd_jpy 	 1 up	      4116 .166146221
usd_jpy 	 1		59

6 rows selected.

Elapsed: 00:00:00.03
03:41:10 SQL> 
03:41:10 SQL> 
03:41:10 SQL> -- Derive NTILE based params:
03:41:10 SQL> 
03:41:10 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
03:41:10 SQL> CREATE TABLE svm6162 COMPRESS AS
03:41:10   2  SELECT
03:41:10   3  pair
03:41:10   4  ,ydate
03:41:10   5  ,prdate
03:41:10   6  ,clse
03:41:10   7  ,g6
03:41:10   8  ,gatt
03:41:10   9  ,gattn
03:41:10  10  ,trend
03:41:10  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
03:41:10  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
03:41:10  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
03:41:10  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
03:41:10  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
03:41:10  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
03:41:10  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
03:41:10  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
03:41:10  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
03:41:10  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
03:41:10  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
03:41:10  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
03:41:10  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
03:41:10  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
03:41:10  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
03:41:10  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
03:41:10  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
03:41:10  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
03:41:10  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
03:41:10  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
03:41:10  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
03:41:10  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
03:41:10  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
03:41:10  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
03:41:10  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
03:41:10  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
03:41:10  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
03:41:10  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
03:41:10  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
03:41:10  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
03:41:10  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
03:41:10  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
03:41:10  43  ,hh  att32
03:41:10  44  ,d   att33
03:41:10  45  ,w   att34
03:41:10  46  ,mpm att35
03:41:10  47  ,mph att36
03:41:10  48  ,trend att37
03:41:10  49  FROM svm6142
03:41:10  50  ORDER BY ydate
03:41:10  51  /

Table created.

Elapsed: 00:00:04.63
03:41:15 SQL> 
03:41:15 SQL> -- rpt
03:41:15 SQL> 
03:41:15 SQL> SELECT
03:41:15   2  pair
03:41:15   3  ,trend
03:41:15   4  ,gatt
03:41:15   5  ,COUNT(pair)
03:41:15   6  ,AVG(g6)
03:41:15   7  FROM svm6162
03:41:15   8  GROUP BY pair,trend,gatt
03:41:15   9  ORDER BY pair,trend,gatt
03:41:15  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_jpy 	-1 nup	      5229 -.16571525
usd_jpy 	-1 up	      4872 .164825118
usd_jpy 	-1		13
usd_jpy 	 1 nup	      4967  -.1557413
usd_jpy 	 1 up	      4116 .166146221
usd_jpy 	 1		59

6 rows selected.

Elapsed: 00:00:00.03
03:41:15 SQL> 
03:41:15 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
03:41:15 SQL> CREATE TABLE modsrc COMPRESS AS
03:41:15   2  SELECT
03:41:15   3  pair
03:41:15   4  ,ydate
03:41:15   5  ,prdate
03:41:15   6  ,trend
03:41:15   7  ,g6
03:41:15   8  ,gatt
03:41:15   9  ,gattn
03:41:15  10  FROM svm6162
03:41:15  11  /

Table created.

Elapsed: 00:00:00.08
03:41:15 SQL> 
03:41:15 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
03:41:15 SQL> 
03:41:15 SQL> DROP   TABLE jpy_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
03:41:15 SQL> CREATE TABLE jpy_ms610 COMPRESS AS
03:41:15   2  SELECT
03:41:15   3  ydate
03:41:15   4  ,trend jpy_trend
03:41:15   5  ,g6    jpy_g6
03:41:15   6  ,gatt  jpy_gatt
03:41:15   7  ,gattn jpy_gattn
03:41:15   8  FROM modsrc
03:41:15   9  /

Table created.

Elapsed: 00:00:00.07
03:41:15 SQL> 
03:41:15 SQL> ANALYZE TABLE jpy_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
03:41:16 SQL> 
03:41:16 SQL> -- I need a copy of the attributes:
03:41:16 SQL> 
03:41:16 SQL> 
03:41:16 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.04
03:41:16 SQL> CREATE TABLE jpy_att COMPRESS AS
03:41:16   2  SELECT
03:41:16   3  ydate
03:41:16   4  ,att00 jpy_att00
03:41:16   5  ,att01 jpy_att01
03:41:16   6  ,att02 jpy_att02
03:41:16   7  ,att03 jpy_att03
03:41:16   8  ,att04 jpy_att04
03:41:16   9  ,att05 jpy_att05
03:41:16  10  ,att06 jpy_att06
03:41:16  11  ,att07 jpy_att07
03:41:16  12  ,att08 jpy_att08
03:41:16  13  ,att09 jpy_att09
03:41:16  14  ,att10 jpy_att10
03:41:16  15  ,att11 jpy_att11
03:41:16  16  ,att12 jpy_att12
03:41:16  17  ,att13 jpy_att13
03:41:16  18  ,att14 jpy_att14
03:41:16  19  ,att15 jpy_att15
03:41:16  20  ,att16 jpy_att16
03:41:16  21  ,att17 jpy_att17
03:41:16  22  ,att18 jpy_att18
03:41:16  23  ,att19 jpy_att19
03:41:16  24  ,att20 jpy_att20
03:41:16  25  ,att21 jpy_att21
03:41:16  26  ,att22 jpy_att22
03:41:16  27  ,att23 jpy_att23
03:41:16  28  ,att24 jpy_att24
03:41:16  29  ,att25 jpy_att25
03:41:16  30  ,att26 jpy_att26
03:41:16  31  ,att27 jpy_att27
03:41:16  32  ,att28 jpy_att28
03:41:16  33  ,att29 jpy_att29
03:41:16  34  ,att30 jpy_att30
03:41:16  35  ,att31 jpy_att31
03:41:16  36  ,att32 jpy_att32
03:41:16  37  ,att33 jpy_att33
03:41:16  38  ,att34 jpy_att34
03:41:16  39  ,att35 jpy_att35
03:41:16  40  ,att36 jpy_att36
03:41:16  41  ,att37 jpy_att37
03:41:16  42  FROM svm6162
03:41:16  43  /

Table created.

Elapsed: 00:00:00.15
03:41:16 SQL> 
03:41:16 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
03:41:16 SQL> 
03:41:16 SQL> -- rpt
03:41:16 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.87
03:41:17 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.00
03:41:17 SQL> 
03:41:17 SQL> --
03:41:17 SQL> -- cad610.sql
03:41:17 SQL> --
03:41:17 SQL> 
03:41:17 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:41:17 SQL> 
03:41:17 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
03:41:18 SQL> 
03:41:18 SQL> -- I created di5min here:
03:41:18 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:41:18 SQL> 
03:41:18 SQL> CREATE OR REPLACE VIEW svm6102 AS
03:41:18   2  SELECT
03:41:18   3  pair
03:41:18   4  ,ydate
03:41:18   5  ,prdate
03:41:18   6  ,rownum rnum -- acts as t in my time-series
03:41:18   7  ,clse
03:41:18   8  -- Derive a bunch of attributes from clse, the latest price:
03:41:18   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
03:41:18  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
03:41:18  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
03:41:18  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
03:41:18  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
03:41:18  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
03:41:18  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
03:41:18  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
03:41:18  17  --
03:41:18  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
03:41:18  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
03:41:18  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
03:41:18  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
03:41:18  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
03:41:18  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
03:41:18  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
03:41:18  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
03:41:18  26  --
03:41:18  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
03:41:18  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
03:41:18  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
03:41:18  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
03:41:18  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
03:41:18  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
03:41:18  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
03:41:18  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
03:41:18  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
03:41:18  36  FROM di5min WHERE pair LIKE'%cad%'
03:41:18  37  AND ydate > sysdate - 95
03:41:18  38  ORDER BY ydate
03:41:18  39  /

View created.

Elapsed: 00:00:00.04
03:41:18 SQL> 
03:41:18 SQL> -- rpt
03:41:18 SQL> 
03:41:18 SQL> SELECT
03:41:18   2  pair
03:41:18   3  ,COUNT(pair)
03:41:18   4  ,MIN(clse),MAX(clse)
03:41:18   5  ,MIN(avg6),MAX(avg6)
03:41:18   6  ,MIN(ydate),MAX(ydate)
03:41:18   7  FROM svm6102
03:41:18   8  GROUP BY pair
03:41:18   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_cad       19256    .992825	   1.0355 .994071233 1.03385714 2010-09-30 03:45:01 2011-01-03 03:35:00

Elapsed: 00:00:00.82
03:41:18 SQL> 
03:41:18 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:41:18 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.17
03:41:19 SQL> CREATE TABLE svm6122 COMPRESS AS
03:41:19   2  SELECT
03:41:19   3  pair
03:41:19   4  ,ydate
03:41:19   5  ,prdate
03:41:19   6  ,clse
03:41:19   7  -- g6 is important. I want to predict g6:
03:41:19   8  ,ld6 - clse g6
03:41:19   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
03:41:19  10  -- I want more attributes from the ones I derived above:
03:41:19  11  -- clse relation to moving-min
03:41:19  12  ,clse-min4  cm4
03:41:19  13  ,clse-min6  cm6
03:41:19  14  ,clse-min8  cm8
03:41:19  15  ,clse-min10 cm10
03:41:19  16  ,clse-min12 cm12
03:41:19  17  ,clse-min14 cm14
03:41:19  18  ,clse-min16 cm16
03:41:19  19  ,clse-min18 cm18
03:41:19  20  -- clse relation to moving-avg
03:41:19  21  ,clse-avg4  ca4
03:41:19  22  ,clse-avg6  ca6
03:41:19  23  ,clse-avg8  ca8
03:41:19  24  ,clse-avg10 ca10
03:41:19  25  ,clse-avg12 ca12
03:41:19  26  ,clse-avg14 ca14
03:41:19  27  ,clse-avg16 ca16
03:41:19  28  ,clse-avg18 ca18
03:41:19  29  -- clse relation to moving-max
03:41:19  30  ,clse-max4  cx4
03:41:19  31  ,clse-max6  cx6
03:41:19  32  ,clse-max8  cx8
03:41:19  33  ,clse-max10 cx10
03:41:19  34  ,clse-max12 cx12
03:41:19  35  ,clse-max14 cx14
03:41:19  36  ,clse-max16 cx16
03:41:19  37  ,clse-max18 cx18
03:41:19  38  -- Derive more attributes.
03:41:19  39  -- I want to use CORR() here to help SVM see the shape of the series.
03:41:19  40  -- But COVAR_POP is more stable:
03:41:19  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
03:41:19  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:41:19  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:41:19  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:41:19  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:41:19  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:41:19  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:41:19  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:41:19  49  -- Derive date related attributes:
03:41:19  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:41:19  51  ,0+TO_CHAR(ydate,'D')d
03:41:19  52  ,0+TO_CHAR(ydate,'W')w
03:41:19  53  -- mpm stands for minutes-past-midnight:
03:41:19  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:41:19  55  -- mph stands for minutes-past-hour:
03:41:19  56  ,0+TO_CHAR(ydate,'MI')mph
03:41:19  57  FROM svm6102
03:41:19  58  ORDER BY ydate
03:41:19  59  /

Table created.

Elapsed: 00:00:02.06
03:41:21 SQL> 
03:41:21 SQL> -- rpt
03:41:21 SQL> 
03:41:21 SQL> SELECT
03:41:21   2  pair
03:41:21   3  ,COUNT(pair)
03:41:21   4  ,MIN(clse),MAX(clse)
03:41:21   5  ,MIN(ydate),MAX(ydate)
03:41:21   6  FROM svm6122
03:41:21   7  GROUP BY pair
03:41:21   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_cad       19256    .992825	   1.0355 2010-09-30 03:45:01 2011-01-03 03:35:00

Elapsed: 00:00:00.04
03:41:21 SQL> 
03:41:21 SQL> -- Prepare for derivation of NTILE based params:
03:41:21 SQL> 
03:41:21 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.23
03:41:21 SQL> CREATE TABLE svm6142 COMPRESS AS
03:41:21   2  SELECT
03:41:21   3  pair
03:41:21   4  ,ydate
03:41:21   5  ,prdate
03:41:21   6  ,clse
03:41:21   7  ,g6
03:41:21   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
03:41:21   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
03:41:21  10  ,CASE WHEN trend IS NULL THEN 1
03:41:21  11  	    WHEN trend =0      THEN 1
03:41:21  12  	    ELSE trend END trend
03:41:21  13  ,cm4
03:41:21  14  ,cm6
03:41:21  15  ,cm8
03:41:21  16  ,cm10
03:41:21  17  ,cm12
03:41:21  18  ,cm14
03:41:21  19  ,cm16
03:41:21  20  ,cm18
03:41:21  21  --
03:41:21  22  ,ca4
03:41:21  23  ,ca6
03:41:21  24  ,ca8
03:41:21  25  ,ca10
03:41:21  26  ,ca12
03:41:21  27  ,ca14
03:41:21  28  ,ca16
03:41:21  29  ,ca18
03:41:21  30  --
03:41:21  31  ,cx4
03:41:21  32  ,cx6
03:41:21  33  ,cx8
03:41:21  34  ,cx10
03:41:21  35  ,cx12
03:41:21  36  ,cx14
03:41:21  37  ,cx16
03:41:21  38  ,cx18
03:41:21  39  --
03:41:21  40  ,crr4
03:41:21  41  ,crr6
03:41:21  42  ,crr8
03:41:21  43  ,crr10
03:41:21  44  ,crr12
03:41:21  45  ,crr14
03:41:21  46  ,crr16
03:41:21  47  ,crr18
03:41:21  48  --
03:41:21  49  ,hh
03:41:21  50  ,d
03:41:21  51  ,w
03:41:21  52  ,mpm
03:41:21  53  ,mph
03:41:21  54  FROM svm6122
03:41:21  55  ORDER BY ydate
03:41:21  56  /

Table created.

Elapsed: 00:00:00.34
03:41:21 SQL> 
03:41:21 SQL> -- rpt
03:41:21 SQL> 
03:41:21 SQL> SELECT
03:41:21   2  pair
03:41:21   3  ,trend
03:41:21   4  ,gatt
03:41:21   5  ,COUNT(pair)
03:41:21   6  ,AVG(g6)
03:41:21   7  FROM svm6142
03:41:21   8  GROUP BY pair,trend,gatt
03:41:21   9  ORDER BY pair,trend,gatt
03:41:21  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7331  -.0013267
usd_cad 	-1 up	      3000 .003056492
usd_cad 	-1		58
usd_cad 	 1 nup	      6548 -.00162674
usd_cad 	 1 up	      2305 .003653973
usd_cad 	 1		14

6 rows selected.

Elapsed: 00:00:00.03
03:41:21 SQL> 
03:41:21 SQL> 
03:41:21 SQL> -- Derive NTILE based params:
03:41:21 SQL> 
03:41:21 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.18
03:41:21 SQL> CREATE TABLE svm6162 COMPRESS AS
03:41:21   2  SELECT
03:41:21   3  pair
03:41:21   4  ,ydate
03:41:21   5  ,prdate
03:41:21   6  ,clse
03:41:21   7  ,g6
03:41:21   8  ,gatt
03:41:21   9  ,gattn
03:41:21  10  ,trend
03:41:21  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
03:41:21  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
03:41:21  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
03:41:21  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
03:41:21  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
03:41:21  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
03:41:21  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
03:41:21  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
03:41:21  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
03:41:21  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
03:41:21  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
03:41:21  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
03:41:21  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
03:41:21  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
03:41:21  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
03:41:21  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
03:41:21  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
03:41:21  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
03:41:21  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
03:41:21  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
03:41:21  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
03:41:21  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
03:41:21  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
03:41:21  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
03:41:21  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
03:41:21  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
03:41:21  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
03:41:21  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
03:41:21  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
03:41:21  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
03:41:21  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
03:41:21  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
03:41:21  43  ,hh  att32
03:41:21  44  ,d   att33
03:41:21  45  ,w   att34
03:41:21  46  ,mpm att35
03:41:21  47  ,mph att36
03:41:21  48  ,trend att37
03:41:21  49  FROM svm6142
03:41:21  50  ORDER BY ydate
03:41:21  51  /

Table created.

Elapsed: 00:00:04.65
03:41:26 SQL> 
03:41:26 SQL> -- rpt
03:41:26 SQL> 
03:41:26 SQL> SELECT
03:41:26   2  pair
03:41:26   3  ,trend
03:41:26   4  ,gatt
03:41:26   5  ,COUNT(pair)
03:41:26   6  ,AVG(g6)
03:41:26   7  FROM svm6162
03:41:26   8  GROUP BY pair,trend,gatt
03:41:26   9  ORDER BY pair,trend,gatt
03:41:26  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_cad 	-1 nup	      7331  -.0013267
usd_cad 	-1 up	      3000 .003056492
usd_cad 	-1		58
usd_cad 	 1 nup	      6548 -.00162674
usd_cad 	 1 up	      2305 .003653973
usd_cad 	 1		14

6 rows selected.

Elapsed: 00:00:00.03
03:41:26 SQL> 
03:41:26 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
03:41:26 SQL> CREATE TABLE modsrc COMPRESS AS
03:41:26   2  SELECT
03:41:26   3  pair
03:41:26   4  ,ydate
03:41:26   5  ,prdate
03:41:26   6  ,trend
03:41:26   7  ,g6
03:41:26   8  ,gatt
03:41:26   9  ,gattn
03:41:26  10  FROM svm6162
03:41:26  11  /

Table created.

Elapsed: 00:00:00.08
03:41:26 SQL> 
03:41:26 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
03:41:27 SQL> 
03:41:27 SQL> DROP   TABLE cad_ms610 ;

Table dropped.

Elapsed: 00:00:00.05
03:41:27 SQL> CREATE TABLE cad_ms610 COMPRESS AS
03:41:27   2  SELECT
03:41:27   3  ydate
03:41:27   4  ,trend cad_trend
03:41:27   5  ,g6    cad_g6
03:41:27   6  ,gatt  cad_gatt
03:41:27   7  ,gattn cad_gattn
03:41:27   8  FROM modsrc
03:41:27   9  /

Table created.

Elapsed: 00:00:00.06
03:41:27 SQL> 
03:41:27 SQL> ANALYZE TABLE cad_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
03:41:27 SQL> 
03:41:27 SQL> -- I need a copy of the attributes:
03:41:27 SQL> 
03:41:27 SQL> 
03:41:27 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.09
03:41:27 SQL> CREATE TABLE cad_att COMPRESS AS
03:41:27   2  SELECT
03:41:27   3  ydate
03:41:27   4  ,att00 cad_att00
03:41:27   5  ,att01 cad_att01
03:41:27   6  ,att02 cad_att02
03:41:27   7  ,att03 cad_att03
03:41:27   8  ,att04 cad_att04
03:41:27   9  ,att05 cad_att05
03:41:27  10  ,att06 cad_att06
03:41:27  11  ,att07 cad_att07
03:41:27  12  ,att08 cad_att08
03:41:27  13  ,att09 cad_att09
03:41:27  14  ,att10 cad_att10
03:41:27  15  ,att11 cad_att11
03:41:27  16  ,att12 cad_att12
03:41:27  17  ,att13 cad_att13
03:41:27  18  ,att14 cad_att14
03:41:27  19  ,att15 cad_att15
03:41:27  20  ,att16 cad_att16
03:41:27  21  ,att17 cad_att17
03:41:27  22  ,att18 cad_att18
03:41:27  23  ,att19 cad_att19
03:41:27  24  ,att20 cad_att20
03:41:27  25  ,att21 cad_att21
03:41:27  26  ,att22 cad_att22
03:41:27  27  ,att23 cad_att23
03:41:27  28  ,att24 cad_att24
03:41:27  29  ,att25 cad_att25
03:41:27  30  ,att26 cad_att26
03:41:27  31  ,att27 cad_att27
03:41:27  32  ,att28 cad_att28
03:41:27  33  ,att29 cad_att29
03:41:27  34  ,att30 cad_att30
03:41:27  35  ,att31 cad_att31
03:41:27  36  ,att32 cad_att32
03:41:27  37  ,att33 cad_att33
03:41:27  38  ,att34 cad_att34
03:41:27  39  ,att35 cad_att35
03:41:27  40  ,att36 cad_att36
03:41:27  41  ,att37 cad_att37
03:41:27  42  FROM svm6162
03:41:27  43  /

Table created.

Elapsed: 00:00:00.16
03:41:27 SQL> 
03:41:27 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
03:41:27 SQL> 
03:41:27 SQL> -- rpt
03:41:27 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.80
03:41:28 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19256

Elapsed: 00:00:00.00
03:41:28 SQL> 
03:41:28 SQL> --
03:41:28 SQL> -- chf610.sql
03:41:28 SQL> --
03:41:28 SQL> 
03:41:28 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:41:28 SQL> 
03:41:28 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
03:41:29 SQL> 
03:41:29 SQL> -- I created di5min here:
03:41:29 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:41:29 SQL> 
03:41:29 SQL> CREATE OR REPLACE VIEW svm6102 AS
03:41:29   2  SELECT
03:41:29   3  pair
03:41:29   4  ,ydate
03:41:29   5  ,prdate
03:41:29   6  ,rownum rnum -- acts as t in my time-series
03:41:29   7  ,clse
03:41:29   8  -- Derive a bunch of attributes from clse, the latest price:
03:41:29   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
03:41:29  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
03:41:29  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
03:41:29  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
03:41:29  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
03:41:29  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
03:41:29  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
03:41:29  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
03:41:29  17  --
03:41:29  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
03:41:29  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
03:41:29  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
03:41:29  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
03:41:29  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
03:41:29  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
03:41:29  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
03:41:29  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
03:41:29  26  --
03:41:29  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
03:41:29  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
03:41:29  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
03:41:29  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
03:41:29  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
03:41:29  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
03:41:29  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
03:41:29  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
03:41:29  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
03:41:29  36  FROM di5min WHERE pair LIKE'%chf%'
03:41:29  37  AND ydate > sysdate - 95
03:41:29  38  ORDER BY ydate
03:41:29  39  /

View created.

Elapsed: 00:00:00.04
03:41:29 SQL> 
03:41:29 SQL> -- rpt
03:41:29 SQL> 
03:41:29 SQL> SELECT
03:41:29   2  pair
03:41:29   3  ,COUNT(pair)
03:41:29   4  ,MIN(clse),MAX(clse)
03:41:29   5  ,MIN(avg6),MAX(avg6)
03:41:29   6  ,MIN(ydate),MAX(ydate)
03:41:29   7  FROM svm6102
03:41:29   8  GROUP BY pair
03:41:29   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
usd_chf       19259    .931675	  1.00635 .933969692 1.00498151 2010-09-30 03:45:01 2011-01-03 03:35:00

Elapsed: 00:00:00.83
03:41:30 SQL> 
03:41:30 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:41:30 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.21
03:41:30 SQL> CREATE TABLE svm6122 COMPRESS AS
03:41:30   2  SELECT
03:41:30   3  pair
03:41:30   4  ,ydate
03:41:30   5  ,prdate
03:41:30   6  ,clse
03:41:30   7  -- g6 is important. I want to predict g6:
03:41:30   8  ,ld6 - clse g6
03:41:30   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
03:41:30  10  -- I want more attributes from the ones I derived above:
03:41:30  11  -- clse relation to moving-min
03:41:30  12  ,clse-min4  cm4
03:41:30  13  ,clse-min6  cm6
03:41:30  14  ,clse-min8  cm8
03:41:30  15  ,clse-min10 cm10
03:41:30  16  ,clse-min12 cm12
03:41:30  17  ,clse-min14 cm14
03:41:30  18  ,clse-min16 cm16
03:41:30  19  ,clse-min18 cm18
03:41:30  20  -- clse relation to moving-avg
03:41:30  21  ,clse-avg4  ca4
03:41:30  22  ,clse-avg6  ca6
03:41:30  23  ,clse-avg8  ca8
03:41:30  24  ,clse-avg10 ca10
03:41:30  25  ,clse-avg12 ca12
03:41:30  26  ,clse-avg14 ca14
03:41:30  27  ,clse-avg16 ca16
03:41:30  28  ,clse-avg18 ca18
03:41:30  29  -- clse relation to moving-max
03:41:30  30  ,clse-max4  cx4
03:41:30  31  ,clse-max6  cx6
03:41:30  32  ,clse-max8  cx8
03:41:30  33  ,clse-max10 cx10
03:41:30  34  ,clse-max12 cx12
03:41:30  35  ,clse-max14 cx14
03:41:30  36  ,clse-max16 cx16
03:41:30  37  ,clse-max18 cx18
03:41:30  38  -- Derive more attributes.
03:41:30  39  -- I want to use CORR() here to help SVM see the shape of the series.
03:41:30  40  -- But COVAR_POP is more stable:
03:41:30  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
03:41:30  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:41:30  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:41:30  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:41:30  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:41:30  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:41:30  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:41:30  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:41:30  49  -- Derive date related attributes:
03:41:30  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:41:30  51  ,0+TO_CHAR(ydate,'D')d
03:41:30  52  ,0+TO_CHAR(ydate,'W')w
03:41:30  53  -- mpm stands for minutes-past-midnight:
03:41:30  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:41:30  55  -- mph stands for minutes-past-hour:
03:41:30  56  ,0+TO_CHAR(ydate,'MI')mph
03:41:30  57  FROM svm6102
03:41:30  58  ORDER BY ydate
03:41:30  59  /

Table created.

Elapsed: 00:00:02.04
03:41:32 SQL> 
03:41:32 SQL> -- rpt
03:41:32 SQL> 
03:41:32 SQL> SELECT
03:41:32   2  pair
03:41:32   3  ,COUNT(pair)
03:41:32   4  ,MIN(clse),MAX(clse)
03:41:32   5  ,MIN(ydate),MAX(ydate)
03:41:32   6  FROM svm6122
03:41:32   7  GROUP BY pair
03:41:32   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
usd_chf       19259    .931675	  1.00635 2010-09-30 03:45:01 2011-01-03 03:35:00

Elapsed: 00:00:00.04
03:41:32 SQL> 
03:41:32 SQL> -- Prepare for derivation of NTILE based params:
03:41:32 SQL> 
03:41:32 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.24
03:41:32 SQL> CREATE TABLE svm6142 COMPRESS AS
03:41:32   2  SELECT
03:41:32   3  pair
03:41:32   4  ,ydate
03:41:32   5  ,prdate
03:41:32   6  ,clse
03:41:32   7  ,g6
03:41:32   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
03:41:32   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
03:41:32  10  ,CASE WHEN trend IS NULL THEN 1
03:41:32  11  	    WHEN trend =0      THEN 1
03:41:32  12  	    ELSE trend END trend
03:41:32  13  ,cm4
03:41:32  14  ,cm6
03:41:32  15  ,cm8
03:41:32  16  ,cm10
03:41:32  17  ,cm12
03:41:32  18  ,cm14
03:41:32  19  ,cm16
03:41:32  20  ,cm18
03:41:32  21  --
03:41:32  22  ,ca4
03:41:32  23  ,ca6
03:41:32  24  ,ca8
03:41:32  25  ,ca10
03:41:32  26  ,ca12
03:41:32  27  ,ca14
03:41:32  28  ,ca16
03:41:32  29  ,ca18
03:41:32  30  --
03:41:32  31  ,cx4
03:41:32  32  ,cx6
03:41:32  33  ,cx8
03:41:32  34  ,cx10
03:41:32  35  ,cx12
03:41:32  36  ,cx14
03:41:32  37  ,cx16
03:41:32  38  ,cx18
03:41:32  39  --
03:41:32  40  ,crr4
03:41:32  41  ,crr6
03:41:32  42  ,crr8
03:41:32  43  ,crr10
03:41:32  44  ,crr12
03:41:32  45  ,crr14
03:41:32  46  ,crr16
03:41:32  47  ,crr18
03:41:32  48  --
03:41:32  49  ,hh
03:41:32  50  ,d
03:41:32  51  ,w
03:41:32  52  ,mpm
03:41:32  53  ,mph
03:41:32  54  FROM svm6122
03:41:32  55  ORDER BY ydate
03:41:32  56  /

Table created.

Elapsed: 00:00:00.36
03:41:32 SQL> 
03:41:32 SQL> -- rpt
03:41:32 SQL> 
03:41:32 SQL> SELECT
03:41:32   2  pair
03:41:32   3  ,trend
03:41:32   4  ,gatt
03:41:32   5  ,COUNT(pair)
03:41:32   6  ,AVG(g6)
03:41:32   7  FROM svm6142
03:41:32   8  GROUP BY pair,trend,gatt
03:41:32   9  ORDER BY pair,trend,gatt
03:41:32  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7217 -.00200118
usd_chf 	-1 up	      3083 .003952549
usd_chf 	-1		22
usd_chf 	 1 nup	      6332 -.00161613
usd_chf 	 1 up	      2555  .00369768
usd_chf 	 1		50

6 rows selected.

Elapsed: 00:00:00.04
03:41:32 SQL> 
03:41:32 SQL> 
03:41:32 SQL> -- Derive NTILE based params:
03:41:32 SQL> 
03:41:32 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.18
03:41:33 SQL> CREATE TABLE svm6162 COMPRESS AS
03:41:33   2  SELECT
03:41:33   3  pair
03:41:33   4  ,ydate
03:41:33   5  ,prdate
03:41:33   6  ,clse
03:41:33   7  ,g6
03:41:33   8  ,gatt
03:41:33   9  ,gattn
03:41:33  10  ,trend
03:41:33  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
03:41:33  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
03:41:33  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
03:41:33  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
03:41:33  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
03:41:33  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
03:41:33  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
03:41:33  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
03:41:33  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
03:41:33  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
03:41:33  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
03:41:33  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
03:41:33  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
03:41:33  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
03:41:33  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
03:41:33  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
03:41:33  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
03:41:33  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
03:41:33  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
03:41:33  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
03:41:33  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
03:41:33  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
03:41:33  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
03:41:33  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
03:41:33  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
03:41:33  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
03:41:33  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
03:41:33  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
03:41:33  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
03:41:33  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
03:41:33  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
03:41:33  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
03:41:33  43  ,hh  att32
03:41:33  44  ,d   att33
03:41:33  45  ,w   att34
03:41:33  46  ,mpm att35
03:41:33  47  ,mph att36
03:41:33  48  ,trend att37
03:41:33  49  FROM svm6142
03:41:33  50  ORDER BY ydate
03:41:33  51  /

Table created.

Elapsed: 00:00:04.69
03:41:37 SQL> 
03:41:37 SQL> -- rpt
03:41:37 SQL> 
03:41:37 SQL> SELECT
03:41:37   2  pair
03:41:37   3  ,trend
03:41:37   4  ,gatt
03:41:37   5  ,COUNT(pair)
03:41:37   6  ,AVG(g6)
03:41:37   7  FROM svm6162
03:41:37   8  GROUP BY pair,trend,gatt
03:41:37   9  ORDER BY pair,trend,gatt
03:41:37  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
usd_chf 	-1 nup	      7217 -.00200118
usd_chf 	-1 up	      3083 .003952549
usd_chf 	-1		22
usd_chf 	 1 nup	      6332 -.00161613
usd_chf 	 1 up	      2555  .00369768
usd_chf 	 1		50

6 rows selected.

Elapsed: 00:00:00.03
03:41:37 SQL> 
03:41:37 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
03:41:37 SQL> CREATE TABLE modsrc COMPRESS AS
03:41:37   2  SELECT
03:41:37   3  pair
03:41:37   4  ,ydate
03:41:37   5  ,prdate
03:41:37   6  ,trend
03:41:37   7  ,g6
03:41:37   8  ,gatt
03:41:37   9  ,gattn
03:41:37  10  FROM svm6162
03:41:37  11  /

Table created.

Elapsed: 00:00:00.09
03:41:38 SQL> 
03:41:38 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
03:41:38 SQL> 
03:41:38 SQL> DROP   TABLE chf_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
03:41:38 SQL> CREATE TABLE chf_ms610 COMPRESS AS
03:41:38   2  SELECT
03:41:38   3  ydate
03:41:38   4  ,trend chf_trend
03:41:38   5  ,g6    chf_g6
03:41:38   6  ,gatt  chf_gatt
03:41:38   7  ,gattn chf_gattn
03:41:38   8  FROM modsrc
03:41:38   9  /

Table created.

Elapsed: 00:00:00.06
03:41:38 SQL> 
03:41:38 SQL> ANALYZE TABLE chf_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
03:41:38 SQL> 
03:41:38 SQL> -- I need a copy of the attributes:
03:41:38 SQL> 
03:41:38 SQL> 
03:41:38 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.05
03:41:38 SQL> CREATE TABLE chf_att COMPRESS AS
03:41:38   2  SELECT
03:41:38   3  ydate
03:41:38   4  ,att00 chf_att00
03:41:38   5  ,att01 chf_att01
03:41:38   6  ,att02 chf_att02
03:41:38   7  ,att03 chf_att03
03:41:38   8  ,att04 chf_att04
03:41:38   9  ,att05 chf_att05
03:41:38  10  ,att06 chf_att06
03:41:38  11  ,att07 chf_att07
03:41:38  12  ,att08 chf_att08
03:41:38  13  ,att09 chf_att09
03:41:38  14  ,att10 chf_att10
03:41:38  15  ,att11 chf_att11
03:41:38  16  ,att12 chf_att12
03:41:38  17  ,att13 chf_att13
03:41:38  18  ,att14 chf_att14
03:41:38  19  ,att15 chf_att15
03:41:38  20  ,att16 chf_att16
03:41:38  21  ,att17 chf_att17
03:41:38  22  ,att18 chf_att18
03:41:38  23  ,att19 chf_att19
03:41:38  24  ,att20 chf_att20
03:41:38  25  ,att21 chf_att21
03:41:38  26  ,att22 chf_att22
03:41:38  27  ,att23 chf_att23
03:41:38  28  ,att24 chf_att24
03:41:38  29  ,att25 chf_att25
03:41:38  30  ,att26 chf_att26
03:41:38  31  ,att27 chf_att27
03:41:38  32  ,att28 chf_att28
03:41:38  33  ,att29 chf_att29
03:41:38  34  ,att30 chf_att30
03:41:38  35  ,att31 chf_att31
03:41:38  36  ,att32 chf_att32
03:41:38  37  ,att33 chf_att33
03:41:38  38  ,att34 chf_att34
03:41:38  39  ,att35 chf_att35
03:41:38  40  ,att36 chf_att36
03:41:38  41  ,att37 chf_att37
03:41:38  42  FROM svm6162
03:41:38  43  /

Table created.

Elapsed: 00:00:00.17
03:41:38 SQL> 
03:41:38 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
03:41:39 SQL> 
03:41:39 SQL> -- rpt
03:41:39 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.83
03:41:40 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19259

Elapsed: 00:00:00.00
03:41:40 SQL> 
03:41:40 SQL> --
03:41:40 SQL> -- ech610.sql
03:41:40 SQL> --
03:41:40 SQL> 
03:41:40 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:41:40 SQL> 
03:41:40 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.36
03:41:40 SQL> 
03:41:40 SQL> -- I created di5min here:
03:41:40 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:41:40 SQL> 
03:41:40 SQL> CREATE OR REPLACE VIEW svm6102 AS
03:41:40   2  SELECT
03:41:40   3  pair
03:41:40   4  ,ydate
03:41:40   5  ,prdate
03:41:40   6  ,rownum rnum -- acts as t in my time-series
03:41:40   7  ,clse
03:41:40   8  -- Derive a bunch of attributes from clse, the latest price:
03:41:40   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
03:41:40  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
03:41:40  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
03:41:40  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
03:41:40  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
03:41:40  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
03:41:40  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
03:41:40  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
03:41:40  17  --
03:41:40  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
03:41:40  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
03:41:40  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
03:41:40  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
03:41:40  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
03:41:40  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
03:41:40  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
03:41:40  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
03:41:40  26  --
03:41:40  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
03:41:40  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
03:41:40  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
03:41:40  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
03:41:40  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
03:41:40  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
03:41:40  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
03:41:40  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
03:41:40  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
03:41:40  36  FROM di5min WHERE pair LIKE'%ech%'
03:41:40  37  AND ydate > sysdate - 95
03:41:40  38  ORDER BY ydate
03:41:40  39  /

View created.

Elapsed: 00:00:00.04
03:41:40 SQL> 
03:41:40 SQL> -- rpt
03:41:40 SQL> 
03:41:40 SQL> SELECT
03:41:40   2  pair
03:41:40   3  ,COUNT(pair)
03:41:40   4  ,MIN(clse),MAX(clse)
03:41:40   5  ,MIN(avg6),MAX(avg6)
03:41:40   6  ,MIN(ydate),MAX(ydate)
03:41:40   7  FROM svm6102
03:41:40   8  GROUP BY pair
03:41:40   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
ech_usd       19258 1.24213032 1.38284305 1.24320711 1.37986485 2010-09-30 03:45:01 2011-01-03 03:35:00

Elapsed: 00:00:00.80
03:41:41 SQL> 
03:41:41 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:41:41 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.20
03:41:41 SQL> CREATE TABLE svm6122 COMPRESS AS
03:41:41   2  SELECT
03:41:41   3  pair
03:41:41   4  ,ydate
03:41:41   5  ,prdate
03:41:41   6  ,clse
03:41:41   7  -- g6 is important. I want to predict g6:
03:41:41   8  ,ld6 - clse g6
03:41:41   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
03:41:41  10  -- I want more attributes from the ones I derived above:
03:41:41  11  -- clse relation to moving-min
03:41:41  12  ,clse-min4  cm4
03:41:41  13  ,clse-min6  cm6
03:41:41  14  ,clse-min8  cm8
03:41:41  15  ,clse-min10 cm10
03:41:41  16  ,clse-min12 cm12
03:41:41  17  ,clse-min14 cm14
03:41:41  18  ,clse-min16 cm16
03:41:41  19  ,clse-min18 cm18
03:41:41  20  -- clse relation to moving-avg
03:41:41  21  ,clse-avg4  ca4
03:41:41  22  ,clse-avg6  ca6
03:41:41  23  ,clse-avg8  ca8
03:41:41  24  ,clse-avg10 ca10
03:41:41  25  ,clse-avg12 ca12
03:41:41  26  ,clse-avg14 ca14
03:41:41  27  ,clse-avg16 ca16
03:41:41  28  ,clse-avg18 ca18
03:41:41  29  -- clse relation to moving-max
03:41:41  30  ,clse-max4  cx4
03:41:41  31  ,clse-max6  cx6
03:41:41  32  ,clse-max8  cx8
03:41:41  33  ,clse-max10 cx10
03:41:41  34  ,clse-max12 cx12
03:41:41  35  ,clse-max14 cx14
03:41:41  36  ,clse-max16 cx16
03:41:41  37  ,clse-max18 cx18
03:41:41  38  -- Derive more attributes.
03:41:41  39  -- I want to use CORR() here to help SVM see the shape of the series.
03:41:41  40  -- But COVAR_POP is more stable:
03:41:41  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
03:41:41  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:41:41  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:41:41  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:41:41  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:41:41  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:41:41  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:41:41  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:41:41  49  -- Derive date related attributes:
03:41:41  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:41:41  51  ,0+TO_CHAR(ydate,'D')d
03:41:41  52  ,0+TO_CHAR(ydate,'W')w
03:41:41  53  -- mpm stands for minutes-past-midnight:
03:41:41  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:41:41  55  -- mph stands for minutes-past-hour:
03:41:41  56  ,0+TO_CHAR(ydate,'MI')mph
03:41:41  57  FROM svm6102
03:41:41  58  ORDER BY ydate
03:41:41  59  /

Table created.

Elapsed: 00:00:02.02
03:41:43 SQL> 
03:41:43 SQL> -- rpt
03:41:43 SQL> 
03:41:43 SQL> SELECT
03:41:43   2  pair
03:41:43   3  ,COUNT(pair)
03:41:43   4  ,MIN(clse),MAX(clse)
03:41:43   5  ,MIN(ydate),MAX(ydate)
03:41:43   6  FROM svm6122
03:41:43   7  GROUP BY pair
03:41:43   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
ech_usd       19258 1.24213032 1.38284305 2010-09-30 03:45:01 2011-01-03 03:35:00

Elapsed: 00:00:00.04
03:41:43 SQL> 
03:41:43 SQL> -- Prepare for derivation of NTILE based params:
03:41:43 SQL> 
03:41:43 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.17
03:41:43 SQL> CREATE TABLE svm6142 COMPRESS AS
03:41:43   2  SELECT
03:41:43   3  pair
03:41:43   4  ,ydate
03:41:43   5  ,prdate
03:41:43   6  ,clse
03:41:43   7  ,g6
03:41:43   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
03:41:43   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
03:41:43  10  ,CASE WHEN trend IS NULL THEN 1
03:41:43  11  	    WHEN trend =0      THEN 1
03:41:43  12  	    ELSE trend END trend
03:41:43  13  ,cm4
03:41:43  14  ,cm6
03:41:43  15  ,cm8
03:41:43  16  ,cm10
03:41:43  17  ,cm12
03:41:43  18  ,cm14
03:41:43  19  ,cm16
03:41:43  20  ,cm18
03:41:43  21  --
03:41:43  22  ,ca4
03:41:43  23  ,ca6
03:41:43  24  ,ca8
03:41:43  25  ,ca10
03:41:43  26  ,ca12
03:41:43  27  ,ca14
03:41:43  28  ,ca16
03:41:43  29  ,ca18
03:41:43  30  --
03:41:43  31  ,cx4
03:41:43  32  ,cx6
03:41:43  33  ,cx8
03:41:43  34  ,cx10
03:41:43  35  ,cx12
03:41:43  36  ,cx14
03:41:43  37  ,cx16
03:41:43  38  ,cx18
03:41:43  39  --
03:41:43  40  ,crr4
03:41:43  41  ,crr6
03:41:43  42  ,crr8
03:41:43  43  ,crr10
03:41:43  44  ,crr12
03:41:43  45  ,crr14
03:41:43  46  ,crr16
03:41:43  47  ,crr18
03:41:43  48  --
03:41:43  49  ,hh
03:41:43  50  ,d
03:41:43  51  ,w
03:41:43  52  ,mpm
03:41:43  53  ,mph
03:41:43  54  FROM svm6122
03:41:43  55  ORDER BY ydate
03:41:43  56  /

Table created.

Elapsed: 00:00:00.38
03:41:44 SQL> 
03:41:44 SQL> -- rpt
03:41:44 SQL> 
03:41:44 SQL> SELECT
03:41:44   2  pair
03:41:44   3  ,trend
03:41:44   4  ,gatt
03:41:44   5  ,COUNT(pair)
03:41:44   6  ,AVG(g6)
03:41:44   7  FROM svm6142
03:41:44   8  GROUP BY pair,trend,gatt
03:41:44   9  ORDER BY pair,trend,gatt
03:41:44  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6484 -.00224861
ech_usd 	-1 up	      3510 .003562966
ech_usd 	-1		65
ech_usd 	 1 nup	      6324 -.00237568
ech_usd 	 1 up	      2868 .003858012
ech_usd 	 1		 7

6 rows selected.

Elapsed: 00:00:00.04
03:41:44 SQL> 
03:41:44 SQL> 
03:41:44 SQL> -- Derive NTILE based params:
03:41:44 SQL> 
03:41:44 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.12
03:41:44 SQL> CREATE TABLE svm6162 COMPRESS AS
03:41:44   2  SELECT
03:41:44   3  pair
03:41:44   4  ,ydate
03:41:44   5  ,prdate
03:41:44   6  ,clse
03:41:44   7  ,g6
03:41:44   8  ,gatt
03:41:44   9  ,gattn
03:41:44  10  ,trend
03:41:44  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
03:41:44  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
03:41:44  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
03:41:44  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
03:41:44  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
03:41:44  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
03:41:44  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
03:41:44  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
03:41:44  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
03:41:44  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
03:41:44  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
03:41:44  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
03:41:44  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
03:41:44  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
03:41:44  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
03:41:44  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
03:41:44  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
03:41:44  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
03:41:44  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
03:41:44  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
03:41:44  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
03:41:44  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
03:41:44  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
03:41:44  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
03:41:44  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
03:41:44  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
03:41:44  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
03:41:44  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
03:41:44  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
03:41:44  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
03:41:44  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
03:41:44  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
03:41:44  43  ,hh  att32
03:41:44  44  ,d   att33
03:41:44  45  ,w   att34
03:41:44  46  ,mpm att35
03:41:44  47  ,mph att36
03:41:44  48  ,trend att37
03:41:44  49  FROM svm6142
03:41:44  50  ORDER BY ydate
03:41:44  51  /

Table created.

Elapsed: 00:00:04.81
03:41:49 SQL> 
03:41:49 SQL> -- rpt
03:41:49 SQL> 
03:41:49 SQL> SELECT
03:41:49   2  pair
03:41:49   3  ,trend
03:41:49   4  ,gatt
03:41:49   5  ,COUNT(pair)
03:41:49   6  ,AVG(g6)
03:41:49   7  FROM svm6162
03:41:49   8  GROUP BY pair,trend,gatt
03:41:49   9  ORDER BY pair,trend,gatt
03:41:49  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
ech_usd 	-1 nup	      6484 -.00224861
ech_usd 	-1 up	      3510 .003562966
ech_usd 	-1		65
ech_usd 	 1 nup	      6324 -.00237568
ech_usd 	 1 up	      2868 .003858012
ech_usd 	 1		 7

6 rows selected.

Elapsed: 00:00:00.03
03:41:49 SQL> 
03:41:49 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
03:41:49 SQL> CREATE TABLE modsrc COMPRESS AS
03:41:49   2  SELECT
03:41:49   3  pair
03:41:49   4  ,ydate
03:41:49   5  ,prdate
03:41:49   6  ,trend
03:41:49   7  ,g6
03:41:49   8  ,gatt
03:41:49   9  ,gattn
03:41:49  10  FROM svm6162
03:41:49  11  /

Table created.

Elapsed: 00:00:00.09
03:41:49 SQL> 
03:41:49 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
03:41:49 SQL> 
03:41:49 SQL> DROP   TABLE ech_ms610 ;

Table dropped.

Elapsed: 00:00:00.04
03:41:49 SQL> CREATE TABLE ech_ms610 COMPRESS AS
03:41:49   2  SELECT
03:41:49   3  ydate
03:41:49   4  ,trend ech_trend
03:41:49   5  ,g6    ech_g6
03:41:49   6  ,gatt  ech_gatt
03:41:49   7  ,gattn ech_gattn
03:41:49   8  FROM modsrc
03:41:49   9  /

Table created.

Elapsed: 00:00:00.07
03:41:49 SQL> 
03:41:49 SQL> ANALYZE TABLE ech_ms610 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
03:41:49 SQL> 
03:41:49 SQL> -- I need a copy of the attributes:
03:41:49 SQL> 
03:41:49 SQL> 
03:41:49 SQL> DROP   TABLE ech_att;

Table dropped.

Elapsed: 00:00:00.09
03:41:49 SQL> CREATE TABLE ech_att COMPRESS AS
03:41:49   2  SELECT
03:41:49   3  ydate
03:41:49   4  ,att00 ech_att00
03:41:49   5  ,att01 ech_att01
03:41:49   6  ,att02 ech_att02
03:41:49   7  ,att03 ech_att03
03:41:49   8  ,att04 ech_att04
03:41:49   9  ,att05 ech_att05
03:41:49  10  ,att06 ech_att06
03:41:49  11  ,att07 ech_att07
03:41:49  12  ,att08 ech_att08
03:41:49  13  ,att09 ech_att09
03:41:49  14  ,att10 ech_att10
03:41:49  15  ,att11 ech_att11
03:41:49  16  ,att12 ech_att12
03:41:49  17  ,att13 ech_att13
03:41:49  18  ,att14 ech_att14
03:41:49  19  ,att15 ech_att15
03:41:49  20  ,att16 ech_att16
03:41:49  21  ,att17 ech_att17
03:41:49  22  ,att18 ech_att18
03:41:49  23  ,att19 ech_att19
03:41:49  24  ,att20 ech_att20
03:41:49  25  ,att21 ech_att21
03:41:49  26  ,att22 ech_att22
03:41:49  27  ,att23 ech_att23
03:41:49  28  ,att24 ech_att24
03:41:49  29  ,att25 ech_att25
03:41:49  30  ,att26 ech_att26
03:41:49  31  ,att27 ech_att27
03:41:49  32  ,att28 ech_att28
03:41:49  33  ,att29 ech_att29
03:41:49  34  ,att30 ech_att30
03:41:49  35  ,att31 ech_att31
03:41:49  36  ,att32 ech_att32
03:41:49  37  ,att33 ech_att33
03:41:49  38  ,att34 ech_att34
03:41:49  39  ,att35 ech_att35
03:41:49  40  ,att36 ech_att36
03:41:49  41  ,att37 ech_att37
03:41:49  42  FROM svm6162
03:41:49  43  /

Table created.

Elapsed: 00:00:00.15
03:41:49 SQL> 
03:41:49 SQL> ANALYZE TABLE ech_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
03:41:50 SQL> 
03:41:50 SQL> -- rpt
03:41:50 SQL> SELECT COUNT(*)FROM svm6102;

  COUNT(*)
----------
     19258

Elapsed: 00:00:00.76
03:41:51 SQL> SELECT COUNT(*)FROM ech_att;

  COUNT(*)
----------
     19258

Elapsed: 00:00:00.00
03:41:51 SQL> 
03:41:51 SQL> --
03:41:51 SQL> -- egb610.sql
03:41:51 SQL> --
03:41:51 SQL> 
03:41:51 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:41:51 SQL> 
03:41:51 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
03:41:51 SQL> 
03:41:51 SQL> -- I created di5min here:
03:41:51 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:41:51 SQL> 
03:41:51 SQL> CREATE OR REPLACE VIEW svm6102 AS
03:41:51   2  SELECT
03:41:51   3  pair
03:41:51   4  ,ydate
03:41:51   5  ,prdate
03:41:51   6  ,rownum rnum -- acts as t in my time-series
03:41:51   7  ,clse
03:41:51   8  -- Derive a bunch of attributes from clse, the latest price:
03:41:51   9  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)min4
03:41:51  10  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)min6
03:41:51  11  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)min8
03:41:51  12  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)min10
03:41:51  13  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)min12
03:41:51  14  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)min14
03:41:51  15  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)min16
03:41:51  16  ,MIN(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)min18
03:41:51  17  --
03:41:51  18  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)avg4
03:41:51  19  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)avg6
03:41:51  20  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)avg8
03:41:51  21  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)avg10
03:41:51  22  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)avg12
03:41:51  23  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)avg14
03:41:51  24  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)avg16
03:41:51  25  ,AVG(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)avg18
03:41:51  26  --
03:41:51  27  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4 PRECEDING AND CURRENT ROW)max4
03:41:51  28  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6 PRECEDING AND CURRENT ROW)max6
03:41:51  29  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8 PRECEDING AND CURRENT ROW)max8
03:41:51  30  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)max10
03:41:51  31  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)max12
03:41:51  32  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)max14
03:41:51  33  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)max16
03:41:51  34  ,MAX(clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)max18
03:41:51  35  ,LEAD(clse,12*6,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld6
03:41:51  36  FROM di5min WHERE pair LIKE'%egb%'
03:41:51  37  AND ydate > sysdate - 95
03:41:51  38  ORDER BY ydate
03:41:51  39  /

View created.

Elapsed: 00:00:00.06
03:41:51 SQL> 
03:41:51 SQL> -- rpt
03:41:51 SQL> 
03:41:51 SQL> SELECT
03:41:51   2  pair
03:41:51   3  ,COUNT(pair)
03:41:51   4  ,MIN(clse),MAX(clse)
03:41:51   5  ,MIN(avg6),MAX(avg6)
03:41:51   6  ,MIN(ydate),MAX(ydate)
03:41:51   7  FROM svm6102
03:41:51   8  GROUP BY pair
03:41:51   9  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE)  MIN(AVG6)  MAX(AVG6) MIN(YDATE)	    MAX(YDATE)
------- ----------- ---------- ---------- ---------- ---------- ------------------- -------------------
egb_usd       19257 .833520557 .893920122 .834199029 .892400287 2010-09-30 03:45:01 2011-01-03 03:35:00

Elapsed: 00:00:00.95
03:41:52 SQL> 
03:41:52 SQL> -- Derive trend, clse-relations, moving correlation of clse, and date related params:
03:41:52 SQL> DROP TABLE svm6122;

Table dropped.

Elapsed: 00:00:00.42
03:41:52 SQL> CREATE TABLE svm6122 COMPRESS AS
03:41:52   2  SELECT
03:41:52   3  pair
03:41:52   4  ,ydate
03:41:52   5  ,prdate
03:41:52   6  ,clse
03:41:52   7  -- g6 is important. I want to predict g6:
03:41:53   8  ,ld6 - clse g6
03:41:53   9  ,SIGN(avg6 - LAG(avg6,2,NULL)OVER(PARTITION BY pair ORDER BY ydate))trend
03:41:53  10  -- I want more attributes from the ones I derived above:
03:41:53  11  -- clse relation to moving-min
03:41:53  12  ,clse-min4  cm4
03:41:53  13  ,clse-min6  cm6
03:41:53  14  ,clse-min8  cm8
03:41:53  15  ,clse-min10 cm10
03:41:53  16  ,clse-min12 cm12
03:41:53  17  ,clse-min14 cm14
03:41:53  18  ,clse-min16 cm16
03:41:53  19  ,clse-min18 cm18
03:41:53  20  -- clse relation to moving-avg
03:41:53  21  ,clse-avg4  ca4
03:41:53  22  ,clse-avg6  ca6
03:41:53  23  ,clse-avg8  ca8
03:41:53  24  ,clse-avg10 ca10
03:41:53  25  ,clse-avg12 ca12
03:41:53  26  ,clse-avg14 ca14
03:41:53  27  ,clse-avg16 ca16
03:41:53  28  ,clse-avg18 ca18
03:41:53  29  -- clse relation to moving-max
03:41:53  30  ,clse-max4  cx4
03:41:53  31  ,clse-max6  cx6
03:41:53  32  ,clse-max8  cx8
03:41:53  33  ,clse-max10 cx10
03:41:53  34  ,clse-max12 cx12
03:41:53  35  ,clse-max14 cx14
03:41:53  36  ,clse-max16 cx16
03:41:53  37  ,clse-max18 cx18
03:41:53  38  -- Derive more attributes.
03:41:53  39  -- I want to use CORR() here to help SVM see the shape of the series.
03:41:53  40  -- But COVAR_POP is more stable:
03:41:53  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*4  PRECEDING AND CURRENT ROW)crr4
03:41:53  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:41:53  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:41:53  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:41:53  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:41:53  46  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:41:53  47  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:41:53  48  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:41:53  49  -- Derive date related attributes:
03:41:53  50  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:41:53  51  ,0+TO_CHAR(ydate,'D')d
03:41:53  52  ,0+TO_CHAR(ydate,'W')w
03:41:53  53  -- mpm stands for minutes-past-midnight:
03:41:53  54  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:41:53  55  -- mph stands for minutes-past-hour:
03:41:53  56  ,0+TO_CHAR(ydate,'MI')mph
03:41:53  57  FROM svm6102
03:41:53  58  ORDER BY ydate
03:41:53  59  /

Table created.

Elapsed: 00:00:02.48
03:41:55 SQL> 
03:41:55 SQL> -- rpt
03:41:55 SQL> 
03:41:55 SQL> SELECT
03:41:55   2  pair
03:41:55   3  ,COUNT(pair)
03:41:55   4  ,MIN(clse),MAX(clse)
03:41:55   5  ,MIN(ydate),MAX(ydate)
03:41:55   6  FROM svm6122
03:41:55   7  GROUP BY pair
03:41:55   8  /

PAIR	COUNT(PAIR)  MIN(CLSE)	MAX(CLSE) MIN(YDATE)	      MAX(YDATE)
------- ----------- ---------- ---------- ------------------- -------------------
egb_usd       19257 .833520557 .893920122 2010-09-30 03:45:01 2011-01-03 03:35:00

Elapsed: 00:00:00.04
03:41:55 SQL> 
03:41:55 SQL> -- Prepare for derivation of NTILE based params:
03:41:55 SQL> 
03:41:55 SQL> DROP TABLE svm6142;

Table dropped.

Elapsed: 00:00:00.30
03:41:55 SQL> CREATE TABLE svm6142 COMPRESS AS
03:41:55   2  SELECT
03:41:55   3  pair
03:41:55   4  ,ydate
03:41:55   5  ,prdate
03:41:55   6  ,clse
03:41:55   7  ,g6
03:41:55   8  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6 > 0.0012 THEN 'up' ELSE 'nup' END gatt
03:41:55   9  ,CASE WHEN g6 IS NULL THEN NULL WHEN g6< -0.0012 THEN 'up' ELSE 'nup' END gattn
03:41:55  10  ,CASE WHEN trend IS NULL THEN 1
03:41:55  11  	    WHEN trend =0      THEN 1
03:41:55  12  	    ELSE trend END trend
03:41:55  13  ,cm4
03:41:55  14  ,cm6
03:41:55  15  ,cm8
03:41:55  16  ,cm10
03:41:55  17  ,cm12
03:41:55  18  ,cm14
03:41:55  19  ,cm16
03:41:55  20  ,cm18
03:41:55  21  --
03:41:55  22  ,ca4
03:41:55  23  ,ca6
03:41:55  24  ,ca8
03:41:55  25  ,ca10
03:41:55  26  ,ca12
03:41:55  27  ,ca14
03:41:55  28  ,ca16
03:41:55  29  ,ca18
03:41:55  30  --
03:41:55  31  ,cx4
03:41:55  32  ,cx6
03:41:55  33  ,cx8
03:41:55  34  ,cx10
03:41:55  35  ,cx12
03:41:55  36  ,cx14
03:41:55  37  ,cx16
03:41:55  38  ,cx18
03:41:55  39  --
03:41:55  40  ,crr4
03:41:55  41  ,crr6
03:41:55  42  ,crr8
03:41:55  43  ,crr10
03:41:55  44  ,crr12
03:41:55  45  ,crr14
03:41:55  46  ,crr16
03:41:55  47  ,crr18
03:41:55  48  --
03:41:55  49  ,hh
03:41:55  50  ,d
03:41:55  51  ,w
03:41:55  52  ,mpm
03:41:55  53  ,mph
03:41:55  54  FROM svm6122
03:41:55  55  ORDER BY ydate
03:41:55  56  /

Table created.

Elapsed: 00:00:00.45
03:41:56 SQL> 
03:41:56 SQL> -- rpt
03:41:56 SQL> 
03:41:56 SQL> SELECT
03:41:56   2  pair
03:41:56   3  ,trend
03:41:56   4  ,gatt
03:41:56   5  ,COUNT(pair)
03:41:56   6  ,AVG(g6)
03:41:56   7  FROM svm6142
03:41:56   8  GROUP BY pair,trend,gatt
03:41:56   9  ORDER BY pair,trend,gatt
03:41:56  10  /

PAIR	     TREND GAT COUNT(PAIR)    AVG(G6)
------- ---------- --- ----------- ----------
egb_usd 	-1 nup	      7295 -.00099866
egb_usd 	-1 up	      2640 .002894501
egb_usd 	-1		60
egb_usd 	 1 nup	      6554 -.00130846
egb_usd 	 1 up	      2696 .003001315
egb_usd 	 1		12

6 rows selected.

Elapsed: 00:00:00.05
03:41:56 SQL> 
03:41:56 SQL> 
03:41:56 SQL> -- Derive NTILE based params:
03:41:56 SQL> 
03:41:56 SQL> DROP TABLE svm6162;

Table dropped.

Elapsed: 00:00:00.31
03:41:56 SQL> CREATE TABLE svm6162 COMPRESS AS
03:41:56   2  SELECT
03:41:56   3  pair
03:41:56   4  ,ydate
03:41:56   5  ,prdate
03:41:56   6  ,clse
03:41:56   7  ,g6
03:41:56   8  ,gatt
03:41:56   9  ,gattn
03:41:56  10  ,trend
03:41:56  11  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm4  )att00
03:41:56  12  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm6  )att01
03:41:56  13  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm8  )att02
03:41:56  14  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm10 )att03
03:41:56  15  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm12 )att04
03:41:56  16  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm14 )att05
03:41:56  17  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm16 )att06
03:41:56  18  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cm18 )att07
03:41:56  19  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca4  )att08
03:41:56  20  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca6  )att09
03:41:56  21  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca8  )att10
03:41:56  22  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca10 )att11
03:41:56  23  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca12 )att12
03:41:56  24  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca14 )att13
03:41:56  25  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca16 )att14
03:41:56  26  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY ca18 )att15
03:41:56  27  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx4  )att16
03:41:56  28  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx6  )att17
03:41:56  29  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx8  )att18
03:41:56  30  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx10 )att19
03:41:56  31  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx12 )att20
03:41:56  32  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx14 )att21
03:41:56  33  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx16 )att22
03:41:56  34  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY cx18 )att23
03:41:56  35  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr4 )att24
03:41:56  36  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr6 )att25
03:41:56  37  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr8 )att26
03:41:56  38  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr10)att27
03:41:56  39  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr12)att28
03:41:56  40  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr14)att29
03:41:56  41  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr16)att30
03:41:56  42  ,NTILE(9)OVER(PARTITION BY trend,pair ORDER BY crr18)att31
03:41:56  43  ,hh  att32
03:41:56  44  ,d   att33
03:41:56  45  ,w   att34
03:41:56  46  ,mpm att35
03:41:56  47  ,mph att36
03:41:56  48  ,trend att37
03:41:56  49  FROM svm6142
03:41:56  50  ORDER BY ydate
03:41:56  51  /
