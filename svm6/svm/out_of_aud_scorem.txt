
SQL*Plus: Release 11.2.0.1.0 Production on Wed Dec 29 07:41:35 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

07:41:35 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
07:41:35 SQL> 07:41:35 SQL> @aud_score1day.sql  2010-12-29 07:20:00
07:41:35 SQL> --
07:41:35 SQL> -- aud_score1day.sql
07:41:35 SQL> --
07:41:35 SQL> 
07:41:35 SQL> CREATE OR REPLACE VIEW sme AS
07:41:35   2  SELECT
07:41:35   3  'aud'||m.ydate prdate
07:41:35   4  ,NULL gatt
07:41:35   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
07:41:35   6  ,eur_g00
07:41:35   7  ,eur_g01
07:41:35   8  ,eur_g02
07:41:35   9  ,eur_g03
07:41:35  10  ,eur_g04
07:41:35  11  ,eur_g05
07:41:35  12  ,eur_g06
07:41:35  13  ,eur_g07
07:41:35  14  ,eur_g08
07:41:35  15  ,eur_g09
07:41:35  16  ,eur_g10
07:41:35  17  ,eur_g11
07:41:35  18  ,eur_g12
07:41:35  19  ,eur_g13
07:41:35  20  ,eur_g14
07:41:35  21  ,eur_g15
07:41:35  22  ,eur_g16
07:41:35  23  ,eur_g17
07:41:35  24  ,eur_g18
07:41:35  25  ,eur_g19
07:41:35  26  ,eur_g20
07:41:35  27  ,eur_g21
07:41:35  28  ,eur_g22
07:41:35  29  ,eur_g23
07:41:35  30  ,eur_g24
07:41:35  31  ,eur_g25
07:41:35  32  ,eur_g26
07:41:35  33  ,eur_g27
07:41:35  34  ,eur_g28
07:41:35  35  ,eur_g29
07:41:35  36  ,eur_g30
07:41:35  37  ,eur_g31
07:41:35  38  ,eur_g32
07:41:35  39  ,eur_g33
07:41:35  40  ,eur_g34
07:41:35  41  ,eur_g35
07:41:35  42  ,eur_g36
07:41:35  43  ,eur_g37
07:41:35  44  ,eur_g38
07:41:35  45  ,eur_g39
07:41:35  46  ,eur_g40
07:41:35  47  ,eur_g41
07:41:35  48  ,aud_g00
07:41:35  49  ,aud_g01
07:41:35  50  ,aud_g02
07:41:35  51  ,aud_g03
07:41:35  52  ,aud_g04
07:41:35  53  ,aud_g05
07:41:35  54  ,aud_g06
07:41:35  55  ,aud_g07
07:41:35  56  ,aud_g08
07:41:35  57  ,aud_g09
07:41:35  58  ,aud_g10
07:41:35  59  ,aud_g11
07:41:35  60  ,aud_g12
07:41:35  61  ,aud_g13
07:41:35  62  ,aud_g14
07:41:35  63  ,aud_g15
07:41:35  64  ,aud_g16
07:41:35  65  ,aud_g17
07:41:35  66  ,aud_g18
07:41:35  67  ,aud_g19
07:41:35  68  ,aud_g20
07:41:35  69  ,aud_g21
07:41:35  70  ,aud_g22
07:41:35  71  ,aud_g23
07:41:35  72  ,aud_g24
07:41:35  73  ,aud_g25
07:41:35  74  ,aud_g26
07:41:35  75  ,aud_g27
07:41:35  76  ,aud_g28
07:41:35  77  ,aud_g29
07:41:35  78  ,aud_g30
07:41:35  79  ,aud_g31
07:41:35  80  ,aud_g32
07:41:35  81  ,aud_g33
07:41:35  82  ,aud_g34
07:41:35  83  ,aud_g35
07:41:35  84  ,aud_g36
07:41:35  85  ,aud_g37
07:41:35  86  ,aud_g38
07:41:35  87  ,aud_g39
07:41:35  88  ,aud_g40
07:41:35  89  ,aud_g41
07:41:35  90  ,gbp_g00
07:41:35  91  ,gbp_g01
07:41:35  92  ,gbp_g02
07:41:35  93  ,gbp_g03
07:41:35  94  ,gbp_g04
07:41:35  95  ,gbp_g05
07:41:35  96  ,gbp_g06
07:41:35  97  ,gbp_g07
07:41:35  98  ,gbp_g08
07:41:35  99  ,gbp_g09
07:41:35 100  ,gbp_g10
07:41:35 101  ,gbp_g11
07:41:35 102  ,gbp_g12
07:41:35 103  ,gbp_g13
07:41:35 104  ,gbp_g14
07:41:35 105  ,gbp_g15
07:41:35 106  ,gbp_g16
07:41:35 107  ,gbp_g17
07:41:35 108  ,gbp_g18
07:41:35 109  ,gbp_g19
07:41:35 110  ,gbp_g20
07:41:35 111  ,gbp_g21
07:41:35 112  ,gbp_g22
07:41:35 113  ,gbp_g23
07:41:35 114  ,gbp_g24
07:41:35 115  ,gbp_g25
07:41:35 116  ,gbp_g26
07:41:35 117  ,gbp_g27
07:41:35 118  ,gbp_g28
07:41:35 119  ,gbp_g29
07:41:35 120  ,gbp_g30
07:41:35 121  ,gbp_g31
07:41:35 122  ,gbp_g32
07:41:35 123  ,gbp_g33
07:41:35 124  ,gbp_g34
07:41:35 125  ,gbp_g35
07:41:35 126  ,gbp_g36
07:41:35 127  ,gbp_g37
07:41:35 128  ,gbp_g38
07:41:35 129  ,gbp_g39
07:41:35 130  ,gbp_g40
07:41:35 131  ,gbp_g41
07:41:35 132  ,jpy_g00
07:41:35 133  ,jpy_g01
07:41:35 134  ,jpy_g02
07:41:35 135  ,jpy_g03
07:41:35 136  ,jpy_g04
07:41:35 137  ,jpy_g05
07:41:35 138  ,jpy_g06
07:41:35 139  ,jpy_g07
07:41:35 140  ,jpy_g08
07:41:35 141  ,jpy_g09
07:41:35 142  ,jpy_g10
07:41:35 143  ,jpy_g11
07:41:35 144  ,jpy_g12
07:41:35 145  ,jpy_g13
07:41:35 146  ,jpy_g14
07:41:35 147  ,jpy_g15
07:41:35 148  ,jpy_g16
07:41:35 149  ,jpy_g17
07:41:35 150  ,jpy_g18
07:41:35 151  ,jpy_g19
07:41:35 152  ,jpy_g20
07:41:35 153  ,jpy_g21
07:41:35 154  ,jpy_g22
07:41:35 155  ,jpy_g23
07:41:35 156  ,jpy_g24
07:41:35 157  ,jpy_g25
07:41:35 158  ,jpy_g26
07:41:35 159  ,jpy_g27
07:41:35 160  ,jpy_g28
07:41:35 161  ,jpy_g29
07:41:35 162  ,jpy_g30
07:41:35 163  ,jpy_g31
07:41:35 164  ,jpy_g32
07:41:35 165  ,jpy_g33
07:41:35 166  ,jpy_g34
07:41:35 167  ,jpy_g35
07:41:35 168  ,jpy_g36
07:41:35 169  ,jpy_g37
07:41:35 170  ,jpy_g38
07:41:35 171  ,jpy_g39
07:41:35 172  ,jpy_g40
07:41:35 173  ,jpy_g41
07:41:35 174  ,cad_g00
07:41:35 175  ,cad_g01
07:41:35 176  ,cad_g02
07:41:35 177  ,cad_g03
07:41:35 178  ,cad_g04
07:41:35 179  ,cad_g05
07:41:35 180  ,cad_g06
07:41:35 181  ,cad_g07
07:41:35 182  ,cad_g08
07:41:35 183  ,cad_g09
07:41:35 184  ,cad_g10
07:41:35 185  ,cad_g11
07:41:35 186  ,cad_g12
07:41:35 187  ,cad_g13
07:41:35 188  ,cad_g14
07:41:35 189  ,cad_g15
07:41:35 190  ,cad_g16
07:41:35 191  ,cad_g17
07:41:35 192  ,cad_g18
07:41:35 193  ,cad_g19
07:41:35 194  ,cad_g20
07:41:35 195  ,cad_g21
07:41:35 196  ,cad_g22
07:41:35 197  ,cad_g23
07:41:35 198  ,cad_g24
07:41:35 199  ,cad_g25
07:41:35 200  ,cad_g26
07:41:35 201  ,cad_g27
07:41:35 202  ,cad_g28
07:41:35 203  ,cad_g29
07:41:35 204  ,cad_g30
07:41:35 205  ,cad_g31
07:41:35 206  ,cad_g32
07:41:35 207  ,cad_g33
07:41:35 208  ,cad_g34
07:41:35 209  ,cad_g35
07:41:35 210  ,cad_g36
07:41:35 211  ,cad_g37
07:41:35 212  ,cad_g38
07:41:35 213  ,cad_g39
07:41:35 214  ,cad_g40
07:41:35 215  ,cad_g41
07:41:35 216  ,chf_g00
07:41:35 217  ,chf_g01
07:41:35 218  ,chf_g02
07:41:35 219  ,chf_g03
07:41:35 220  ,chf_g04
07:41:35 221  ,chf_g05
07:41:35 222  ,chf_g06
07:41:35 223  ,chf_g07
07:41:35 224  ,chf_g08
07:41:35 225  ,chf_g09
07:41:35 226  ,chf_g10
07:41:35 227  ,chf_g11
07:41:35 228  ,chf_g12
07:41:35 229  ,chf_g13
07:41:35 230  ,chf_g14
07:41:35 231  ,chf_g15
07:41:35 232  ,chf_g16
07:41:35 233  ,chf_g17
07:41:35 234  ,chf_g18
07:41:35 235  ,chf_g19
07:41:35 236  ,chf_g20
07:41:35 237  ,chf_g21
07:41:35 238  ,chf_g22
07:41:35 239  ,chf_g23
07:41:35 240  ,chf_g24
07:41:35 241  ,chf_g25
07:41:35 242  ,chf_g26
07:41:35 243  ,chf_g27
07:41:35 244  ,chf_g28
07:41:35 245  ,chf_g29
07:41:35 246  ,chf_g30
07:41:35 247  ,chf_g31
07:41:35 248  ,chf_g32
07:41:35 249  ,chf_g33
07:41:35 250  ,chf_g34
07:41:35 251  ,chf_g35
07:41:35 252  ,chf_g36
07:41:35 253  ,chf_g37
07:41:35 254  ,chf_g38
07:41:35 255  ,chf_g39
07:41:35 256  ,chf_g40
07:41:35 257  ,chf_g41
07:41:35 258  FROM aud_ms6 m
07:41:35 259  WHERE m.ydate = '&1'||' '||'&2'
07:41:35 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2010-12-29'||' '||'07:20:00'

View created.

Elapsed: 00:00:00.18
07:41:35 SQL> 
07:41:35 SQL> -- rpt
07:41:35 SQL> -- We should see just 1 row:
07:41:35 SQL> 
07:41:35 SQL> SELECT COUNT(prdate) FROM sme
07:41:35   2  
07:41:35 SQL> -- Build the model:
07:41:35 SQL> CREATE OR REPLACE VIEW bme AS
07:41:35   2  SELECT
07:41:35   3  'aud'||m.ydate prdate
07:41:35   4  ,gatt
07:41:35   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
07:41:35   6  ,eur_g00
07:41:35   7  ,eur_g01
07:41:35   8  ,eur_g02
07:41:35   9  ,eur_g03
07:41:35  10  ,eur_g04
07:41:35  11  ,eur_g05
07:41:35  12  ,eur_g06
07:41:35  13  ,eur_g07
07:41:35  14  ,eur_g08
07:41:35  15  ,eur_g09
07:41:35  16  ,eur_g10
07:41:35  17  ,eur_g11
07:41:35  18  ,eur_g12
07:41:35  19  ,eur_g13
07:41:35  20  ,eur_g14
07:41:35  21  ,eur_g15
07:41:35  22  ,eur_g16
07:41:35  23  ,eur_g17
07:41:35  24  ,eur_g18
07:41:35  25  ,eur_g19
07:41:35  26  ,eur_g20
07:41:35  27  ,eur_g21
07:41:35  28  ,eur_g22
07:41:35  29  ,eur_g23
07:41:35  30  ,eur_g24
07:41:35  31  ,eur_g25
07:41:35  32  ,eur_g26
07:41:35  33  ,eur_g27
07:41:35  34  ,eur_g28
07:41:35  35  ,eur_g29
07:41:35  36  ,eur_g30
07:41:35  37  ,eur_g31
07:41:35  38  ,eur_g32
07:41:35  39  ,eur_g33
07:41:35  40  ,eur_g34
07:41:35  41  ,eur_g35
07:41:35  42  ,eur_g36
07:41:35  43  ,eur_g37
07:41:35  44  ,eur_g38
07:41:35  45  ,eur_g39
07:41:35  46  ,eur_g40
07:41:35  47  ,eur_g41
07:41:35  48  ,aud_g00
07:41:35  49  ,aud_g01
07:41:35  50  ,aud_g02
07:41:35  51  ,aud_g03
07:41:35  52  ,aud_g04
07:41:35  53  ,aud_g05
07:41:35  54  ,aud_g06
07:41:35  55  ,aud_g07
07:41:35  56  ,aud_g08
07:41:35  57  ,aud_g09
07:41:35  58  ,aud_g10
07:41:35  59  ,aud_g11
07:41:35  60  ,aud_g12
07:41:35  61  ,aud_g13
07:41:35  62  ,aud_g14
07:41:35  63  ,aud_g15
07:41:35  64  ,aud_g16
07:41:35  65  ,aud_g17
07:41:35  66  ,aud_g18
07:41:35  67  ,aud_g19
07:41:35  68  ,aud_g20
07:41:35  69  ,aud_g21
07:41:35  70  ,aud_g22
07:41:35  71  ,aud_g23
07:41:35  72  ,aud_g24
07:41:35  73  ,aud_g25
07:41:35  74  ,aud_g26
07:41:35  75  ,aud_g27
07:41:35  76  ,aud_g28
07:41:35  77  ,aud_g29
07:41:35  78  ,aud_g30
07:41:35  79  ,aud_g31
07:41:35  80  ,aud_g32
07:41:35  81  ,aud_g33
07:41:35  82  ,aud_g34
07:41:35  83  ,aud_g35
07:41:35  84  ,aud_g36
07:41:35  85  ,aud_g37
07:41:35  86  ,aud_g38
07:41:35  87  ,aud_g39
07:41:35  88  ,aud_g40
07:41:35  89  ,aud_g41
07:41:35  90  ,gbp_g00
07:41:35  91  ,gbp_g01
07:41:35  92  ,gbp_g02
07:41:35  93  ,gbp_g03
07:41:35  94  ,gbp_g04
07:41:35  95  ,gbp_g05
07:41:35  96  ,gbp_g06
07:41:35  97  ,gbp_g07
07:41:35  98  ,gbp_g08
07:41:35  99  ,gbp_g09
07:41:35 100  ,gbp_g10
07:41:35 101  ,gbp_g11
07:41:35 102  ,gbp_g12
07:41:35 103  ,gbp_g13
07:41:35 104  ,gbp_g14
07:41:35 105  ,gbp_g15
07:41:35 106  ,gbp_g16
07:41:35 107  ,gbp_g17
07:41:35 108  ,gbp_g18
07:41:35 109  ,gbp_g19
07:41:35 110  ,gbp_g20
07:41:35 111  ,gbp_g21
07:41:35 112  ,gbp_g22
07:41:35 113  ,gbp_g23
07:41:35 114  ,gbp_g24
07:41:35 115  ,gbp_g25
07:41:35 116  ,gbp_g26
07:41:35 117  ,gbp_g27
07:41:35 118  ,gbp_g28
07:41:35 119  ,gbp_g29
07:41:35 120  ,gbp_g30
07:41:35 121  ,gbp_g31
07:41:35 122  ,gbp_g32
07:41:35 123  ,gbp_g33
07:41:35 124  ,gbp_g34
07:41:35 125  ,gbp_g35
07:41:35 126  ,gbp_g36
07:41:35 127  ,gbp_g37
07:41:35 128  ,gbp_g38
07:41:35 129  ,gbp_g39
07:41:35 130  ,gbp_g40
07:41:35 131  ,gbp_g41
07:41:35 132  ,jpy_g00
07:41:35 133  ,jpy_g01
07:41:35 134  ,jpy_g02
07:41:35 135  ,jpy_g03
07:41:35 136  ,jpy_g04
07:41:35 137  ,jpy_g05
07:41:35 138  ,jpy_g06
07:41:35 139  ,jpy_g07
07:41:35 140  ,jpy_g08
07:41:35 141  ,jpy_g09
07:41:35 142  ,jpy_g10
07:41:35 143  ,jpy_g11
07:41:35 144  ,jpy_g12
07:41:35 145  ,jpy_g13
07:41:35 146  ,jpy_g14
07:41:35 147  ,jpy_g15
07:41:35 148  ,jpy_g16
07:41:35 149  ,jpy_g17
07:41:35 150  ,jpy_g18
07:41:35 151  ,jpy_g19
07:41:35 152  ,jpy_g20
07:41:35 153  ,jpy_g21
07:41:35 154  ,jpy_g22
07:41:35 155  ,jpy_g23
07:41:35 156  ,jpy_g24
07:41:35 157  ,jpy_g25
07:41:35 158  ,jpy_g26
07:41:35 159  ,jpy_g27
07:41:35 160  ,jpy_g28
07:41:35 161  ,jpy_g29
07:41:35 162  ,jpy_g30
07:41:35 163  ,jpy_g31
07:41:35 164  ,jpy_g32
07:41:35 165  ,jpy_g33
07:41:35 166  ,jpy_g34
07:41:35 167  ,jpy_g35
07:41:35 168  ,jpy_g36
07:41:35 169  ,jpy_g37
07:41:35 170  ,jpy_g38
07:41:35 171  ,jpy_g39
07:41:35 172  ,jpy_g40
07:41:35 173  ,jpy_g41
07:41:35 174  ,cad_g00
07:41:35 175  ,cad_g01
07:41:35 176  ,cad_g02
07:41:35 177  ,cad_g03
07:41:35 178  ,cad_g04
07:41:35 179  ,cad_g05
07:41:35 180  ,cad_g06
07:41:35 181  ,cad_g07
07:41:35 182  ,cad_g08
07:41:35 183  ,cad_g09
07:41:35 184  ,cad_g10
07:41:35 185  ,cad_g11
07:41:35 186  ,cad_g12
07:41:35 187  ,cad_g13
07:41:35 188  ,cad_g14
07:41:35 189  ,cad_g15
07:41:35 190  ,cad_g16
07:41:35 191  ,cad_g17
07:41:35 192  ,cad_g18
07:41:35 193  ,cad_g19
07:41:35 194  ,cad_g20
07:41:35 195  ,cad_g21
07:41:35 196  ,cad_g22
07:41:35 197  ,cad_g23
07:41:35 198  ,cad_g24
07:41:35 199  ,cad_g25
07:41:35 200  ,cad_g26
07:41:35 201  ,cad_g27
07:41:35 202  ,cad_g28
07:41:35 203  ,cad_g29
07:41:35 204  ,cad_g30
07:41:35 205  ,cad_g31
07:41:35 206  ,cad_g32
07:41:35 207  ,cad_g33
07:41:35 208  ,cad_g34
07:41:35 209  ,cad_g35
07:41:35 210  ,cad_g36
07:41:35 211  ,cad_g37
07:41:35 212  ,cad_g38
07:41:35 213  ,cad_g39
07:41:35 214  ,cad_g40
07:41:35 215  ,cad_g41
07:41:35 216  ,chf_g00
07:41:35 217  ,chf_g01
07:41:35 218  ,chf_g02
07:41:35 219  ,chf_g03
07:41:35 220  ,chf_g04
07:41:35 221  ,chf_g05
07:41:35 222  ,chf_g06
07:41:35 223  ,chf_g07
07:41:35 224  ,chf_g08
07:41:35 225  ,chf_g09
07:41:35 226  ,chf_g10
07:41:35 227  ,chf_g11
07:41:35 228  ,chf_g12
07:41:35 229  ,chf_g13
07:41:35 230  ,chf_g14
07:41:35 231  ,chf_g15
07:41:35 232  ,chf_g16
07:41:35 233  ,chf_g17
07:41:35 234  ,chf_g18
07:41:35 235  ,chf_g19
07:41:35 236  ,chf_g20
07:41:35 237  ,chf_g21
07:41:35 238  ,chf_g22
07:41:35 239  ,chf_g23
07:41:35 240  ,chf_g24
07:41:35 241  ,chf_g25
07:41:35 242  ,chf_g26
07:41:35 243  ,chf_g27
07:41:35 244  ,chf_g28
07:41:35 245  ,chf_g29
07:41:35 246  ,chf_g30
07:41:35 247  ,chf_g31
07:41:35 248  ,chf_g32
07:41:35 249  ,chf_g33
07:41:35 250  ,chf_g34
07:41:35 251  ,chf_g35
07:41:35 252  ,chf_g36
07:41:35 253  ,chf_g37
07:41:35 254  ,chf_g38
07:41:35 255  ,chf_g39
07:41:35 256  ,chf_g40
07:41:35 257  ,chf_g41
07:41:35 258  FROM aud_ms6 m
07:41:35 259  WHERE gatt IN('nup','up')
07:41:35 260  AND 1+m.ydate < '&1'||' '||'&2'
07:41:35 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2010-12-29'||' '||'07:20:00'

View created.

Elapsed: 00:00:00.11
07:41:35 SQL> 
07:41:35 SQL> -- rpt
07:41:35 SQL> 
07:41:35 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt
07:41:35   2  
07:41:35 SQL> SELECT MAX(prdate) FROM bme
07:41:35   2  
07:41:35 SQL> -- Now build model from bme and score sme
07:41:35 SQL> @score1.sql
07:41:35 SQL> -- score1.sql
07:41:35 SQL> 
07:41:35 SQL> -- Does the 1st SVM score
07:41:35 SQL> 
07:41:35 SQL> -- Fill up svmc_apply_prep
07:41:35 SQL> @score.sql
07:41:35 SQL> --
07:41:35 SQL> -- score.sql
07:41:35 SQL> --
07:41:35 SQL> 
07:41:35 SQL> -- usage: score.sql
07:41:35 SQL> 
07:41:35 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
07:41:35 SQL> 
07:41:35 SQL> DEFINE target	= 'gatt'
07:41:35 SQL> DEFINE model_name = 'forex14'
07:41:35 SQL> DEFINE bldtable	= 'bme'
07:41:35 SQL> DEFINE scoretable = 'sme'
07:41:35 SQL> DEFINE case_id	= 'prdate'
07:41:35 SQL> 
07:41:35 SQL> -- Define a variable to help me exclude some columns from some data mining calls
07:41:35 SQL> DEFINE exclude1 = "'&target','&case_id'"
07:41:35 SQL> 
07:41:35 SQL> -- Builds an SVM model using pl/sql.
07:41:35 SQL> 
07:41:35 SQL> -----------------------------------------------------------------------
07:41:35 SQL> --			    BUILD THE MODEL
07:41:35 SQL> -----------------------------------------------------------------------
07:41:35 SQL> 
07:41:35 SQL> -- Cleanup old build data preparation objects for repeat runs
07:41:35 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.00
07:41:35 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
07:41:35 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.01
07:41:35 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.00
07:41:35 SQL> 
07:41:35 SQL> 
07:41:35 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
07:41:35 SQL> --
07:41:35 SQL> -- DROP	TABLE svmc_settings ;
07:41:35 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
07:41:35 SQL> -- DELETE svmc_settings;
07:41:35 SQL> 
07:41:35 SQL> -- The default classification algorithm is Naive Bayes. So override
07:41:35 SQL> -- this choice to SVM using a settings table.
07:41:35 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
07:41:35 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
07:41:35 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
07:41:35 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
07:41:35 SQL> -- models.
07:41:35 SQL> --
07:41:35 SQL> 
07:41:35 SQL> -- Do this once and then comment it out.
07:41:35 SQL> -- That makes script go faster.
07:41:35 SQL> -- BEGIN
07:41:35 SQL> -- -- Populate settings table
07:41:35 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:41:35 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
07:41:35 SQL> --
07:41:35 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:41:35 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
07:41:35 SQL> --
07:41:35 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:41:35 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
07:41:35 SQL> --   COMMIT;
07:41:35 SQL> -- END;
07:41:35 SQL> -- /
07:41:35 SQL> 
07:41:35 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
07:41:35 SQL> 
07:41:35 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
07:41:35   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:41:35   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
07:41:35 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
07:41:35   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:41:35   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
07:41:35 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
07:41:35   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:41:35   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.14
07:41:35 SQL> 
07:41:35 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
07:41:35   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:41:35   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
07:41:35 SQL> 
07:41:35 SQL> --------------------------------
07:41:35 SQL> -- PREPARE BUILD (TRAINING) DATA
07:41:35 SQL> --
07:41:35 SQL> 
07:41:35 SQL> -- 1. Missing Value treatment for all Predictors and
07:41:35 SQL> -- 2. Outlier Treatment and
07:41:35 SQL> -- 3. Normalization are performed below.
07:41:35 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
07:41:35 SQL> --    normalized here.
07:41:35 SQL> 
07:41:35 SQL> BEGIN
07:41:35   2  	-- Perform missing value treatment for all predictors
07:41:35   3  	-- create miss tables
07:41:35   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
07:41:35   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
07:41:35   6  
07:41:35   7  	-- populate miss tables
07:41:35   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
07:41:35   9  	  miss_table_name => 'svmc_miss_num',
07:41:35  10  	  data_table_name => '&bldtable',
07:41:35  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:41:35  12  
07:41:35  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
07:41:35  14  	  miss_table_name => 'svmc_miss_cat',
07:41:35  15  	  data_table_name => '&bldtable',
07:41:35  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:41:35  17  
07:41:35  18  	-- xform input data to replace missing values
07:41:35  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:41:35  20  	  miss_table_name => 'svmc_miss_num',
07:41:35  21  	  data_table_name => '&bldtable',
07:41:35  22  	  xform_view_name => 'xformed_build_miss_num');
07:41:35  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:41:35  24  	  miss_table_name => 'svmc_miss_cat',
07:41:35  25  	  data_table_name => '&bldtable',
07:41:35  26  	  xform_view_name => 'xformed_build_miss_cat');
07:41:35  27  
07:41:35  28  	-- Perform outlier treatment.
07:41:35  29  	-- create clip table
07:41:35  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
07:41:35  31  
07:41:35  32  	-- populate clip table
07:41:35  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
07:41:35  34  	  clip_table_name => 'svmc_clip',
07:41:35  35  	  data_table_name => '&bldtable',
07:41:35  36  	  tail_frac	  => 0.025,
07:41:35  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:41:35  38  
07:41:35  39  	-- xform input data to winsorized data
07:41:35  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
07:41:35  41  	  clip_table_name => 'svmc_clip',
07:41:35  42  	  data_table_name => '&bldtable',
07:41:35  43  	  xform_view_name => 'svmc_winsor');
07:41:35  44  
07:41:35  45  	-- create normalization table
07:41:35  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
07:41:35  47  
07:41:35  48  	-- populate normalization table based on winsorized data
07:41:35  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
07:41:35  50  	  norm_table_name => 'svmc_norm',
07:41:35  51  	  data_table_name => 'svmc_winsor',
07:41:35  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:41:35  53  
07:41:35  54  	-- normalize the original data
07:41:35  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:41:35  56  	  norm_table_name => 'svmc_norm',
07:41:35  57  	  data_table_name => '&bldtable',
07:41:35  58  	  xform_view_name => 'svmc_build_prep');
07:41:35  59  END;
07:41:35  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:18.26
07:41:54 SQL> 
07:41:54 SQL> ---------------------
07:41:54 SQL> -- CREATE A NEW MODEL
07:41:54 SQL> --
07:41:54 SQL> -- Cleanup old model with the same name for repeat runs
07:41:54 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
07:41:54   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:41:54   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.52
07:41:54 SQL> 
07:41:54 SQL> -- Build a new SVM Model
07:41:54 SQL> BEGIN
07:41:54   2  	DBMS_DATA_MINING.CREATE_MODEL(
07:41:54   3  	  model_name	      => '&model_name',
07:41:54   4  	  mining_function     => dbms_data_mining.classification,
07:41:54   5  	  data_table_name     => 'svmc_build_prep',
07:41:54   6  	  case_id_column_name => '&case_id',
07:41:54   7  	  target_column_name  => '&target',
07:41:54   8  	  settings_table_name => 'svmc_settings');
07:41:54   9  END;
07:41:54  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:27.36
07:42:22 SQL> 
07:42:22 SQL> -----------------------------------------------------------------------
07:42:22 SQL> --			       APPLY/score THE MODEL
07:42:22 SQL> -----------------------------------------------------------------------
07:42:22 SQL> 
07:42:22 SQL> -- Cleanup old scoring data preparation objects for repeat runs
07:42:22 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
07:42:22   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:42:22   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
07:42:22 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
07:42:22   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:42:22   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
07:42:22 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
07:42:22   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:42:22   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.09
07:42:22 SQL> -----------------------
07:42:22 SQL> -- PREPARE SCORING DATA
07:42:22 SQL> --
07:42:22 SQL> -- If the data for model creation has been prepared, then the data
07:42:22 SQL> -- to be scored using the model must be prepared in the same manner
07:42:22 SQL> -- in order to obtain meaningful results.
07:42:22 SQL> --
07:42:22 SQL> -- 1. Missing Value treatment for all Predictors and
07:42:22 SQL> -- 2. Normalization
07:42:22 SQL> -- No outlier treatment will be performed during test and apply. The
07:42:22 SQL> -- normalization step is sufficient, since the normalization parameters
07:42:22 SQL> -- already capture the effects of outlier treatment done with build data.
07:42:22 SQL> --
07:42:22 SQL> BEGIN
07:42:22   2  	-- Xform Test data to replace missing values
07:42:22   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:42:22   4  	  miss_table_name => 'svmc_miss_num',
07:42:22   5  	  data_table_name => '&scoretable',
07:42:22   6  	  xform_view_name => 'xformed_apply_miss_num');
07:42:22   7  
07:42:22   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:42:22   9  	  miss_table_name => 'svmc_miss_cat',
07:42:22  10  	  data_table_name => '&scoretable',
07:42:22  11  	  xform_view_name => 'xformed_apply_miss_cat');
07:42:22  12  
07:42:22  13  	-- Normalize the data to be scored
07:42:22  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:42:22  15  	  norm_table_name => 'svmc_norm',
07:42:22  16  	  data_table_name => '&scoretable',
07:42:22  17  	  xform_view_name => 'svmc_apply_prep');
07:42:22  18  END;
07:42:22  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.22
07:42:23 SQL> 
07:42:23 SQL> -- Use same model_name used in score.sql
07:42:23 SQL> DEFINE model_name = 'forex14'
07:42:23 SQL> 
07:42:23 SQL> -- CREATE TABLE fxscores6 (prdate VARCHAR2(30),score NUMBER,rundate DATE,pair VARCHAR2(8),ydate DATE);
07:42:23 SQL> 
07:42:23 SQL> DELETE fxscores6 WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.04
07:42:23 SQL> 
07:42:23 SQL> INSERT INTO fxscores6 (prdate,score,rundate,pair,ydate)
07:42:23   2  SELECT
07:42:23   3  prdate
07:42:23   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
07:42:23   5  ,sysdate
07:42:23   6  ,SUBSTR(prdate,1,3)pair
07:42:23   7  ,SUBSTR(prdate,4,19)ydate
07:42:23   8  FROM svmc_apply_prep
07:42:23   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.19
07:42:23 SQL> @aud_score1day.sql  2010-12-29 07:25:00
07:42:23 SQL> --
07:42:23 SQL> -- aud_score1day.sql
07:42:23 SQL> --
07:42:23 SQL> 
07:42:23 SQL> CREATE OR REPLACE VIEW sme AS
07:42:23   2  SELECT
07:42:23   3  'aud'||m.ydate prdate
07:42:23   4  ,NULL gatt
07:42:23   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
07:42:23   6  ,eur_g00
07:42:23   7  ,eur_g01
07:42:23   8  ,eur_g02
07:42:23   9  ,eur_g03
07:42:23  10  ,eur_g04
07:42:23  11  ,eur_g05
07:42:23  12  ,eur_g06
07:42:23  13  ,eur_g07
07:42:23  14  ,eur_g08
07:42:23  15  ,eur_g09
07:42:23  16  ,eur_g10
07:42:23  17  ,eur_g11
07:42:23  18  ,eur_g12
07:42:23  19  ,eur_g13
07:42:23  20  ,eur_g14
07:42:23  21  ,eur_g15
07:42:23  22  ,eur_g16
07:42:23  23  ,eur_g17
07:42:23  24  ,eur_g18
07:42:23  25  ,eur_g19
07:42:23  26  ,eur_g20
07:42:23  27  ,eur_g21
07:42:23  28  ,eur_g22
07:42:23  29  ,eur_g23
07:42:23  30  ,eur_g24
07:42:23  31  ,eur_g25
07:42:23  32  ,eur_g26
07:42:23  33  ,eur_g27
07:42:23  34  ,eur_g28
07:42:23  35  ,eur_g29
07:42:23  36  ,eur_g30
07:42:23  37  ,eur_g31
07:42:23  38  ,eur_g32
07:42:23  39  ,eur_g33
07:42:23  40  ,eur_g34
07:42:23  41  ,eur_g35
07:42:23  42  ,eur_g36
07:42:23  43  ,eur_g37
07:42:23  44  ,eur_g38
07:42:23  45  ,eur_g39
07:42:23  46  ,eur_g40
07:42:23  47  ,eur_g41
07:42:23  48  ,aud_g00
07:42:23  49  ,aud_g01
07:42:23  50  ,aud_g02
07:42:23  51  ,aud_g03
07:42:23  52  ,aud_g04
07:42:23  53  ,aud_g05
07:42:23  54  ,aud_g06
07:42:23  55  ,aud_g07
07:42:23  56  ,aud_g08
07:42:23  57  ,aud_g09
07:42:23  58  ,aud_g10
07:42:23  59  ,aud_g11
07:42:23  60  ,aud_g12
07:42:23  61  ,aud_g13
07:42:23  62  ,aud_g14
07:42:23  63  ,aud_g15
07:42:23  64  ,aud_g16
07:42:23  65  ,aud_g17
07:42:23  66  ,aud_g18
07:42:23  67  ,aud_g19
07:42:23  68  ,aud_g20
07:42:23  69  ,aud_g21
07:42:23  70  ,aud_g22
07:42:23  71  ,aud_g23
07:42:23  72  ,aud_g24
07:42:23  73  ,aud_g25
07:42:23  74  ,aud_g26
07:42:23  75  ,aud_g27
07:42:23  76  ,aud_g28
07:42:23  77  ,aud_g29
07:42:23  78  ,aud_g30
07:42:23  79  ,aud_g31
07:42:23  80  ,aud_g32
07:42:23  81  ,aud_g33
07:42:23  82  ,aud_g34
07:42:23  83  ,aud_g35
07:42:23  84  ,aud_g36
07:42:23  85  ,aud_g37
07:42:23  86  ,aud_g38
07:42:23  87  ,aud_g39
07:42:23  88  ,aud_g40
07:42:23  89  ,aud_g41
07:42:23  90  ,gbp_g00
07:42:23  91  ,gbp_g01
07:42:23  92  ,gbp_g02
07:42:23  93  ,gbp_g03
07:42:23  94  ,gbp_g04
07:42:23  95  ,gbp_g05
07:42:23  96  ,gbp_g06
07:42:23  97  ,gbp_g07
07:42:23  98  ,gbp_g08
07:42:23  99  ,gbp_g09
07:42:23 100  ,gbp_g10
07:42:23 101  ,gbp_g11
07:42:23 102  ,gbp_g12
07:42:23 103  ,gbp_g13
07:42:23 104  ,gbp_g14
07:42:23 105  ,gbp_g15
07:42:23 106  ,gbp_g16
07:42:23 107  ,gbp_g17
07:42:23 108  ,gbp_g18
07:42:23 109  ,gbp_g19
07:42:23 110  ,gbp_g20
07:42:23 111  ,gbp_g21
07:42:23 112  ,gbp_g22
07:42:23 113  ,gbp_g23
07:42:23 114  ,gbp_g24
07:42:23 115  ,gbp_g25
07:42:23 116  ,gbp_g26
07:42:23 117  ,gbp_g27
07:42:23 118  ,gbp_g28
07:42:23 119  ,gbp_g29
07:42:23 120  ,gbp_g30
07:42:23 121  ,gbp_g31
07:42:23 122  ,gbp_g32
07:42:23 123  ,gbp_g33
07:42:23 124  ,gbp_g34
07:42:23 125  ,gbp_g35
07:42:23 126  ,gbp_g36
07:42:23 127  ,gbp_g37
07:42:23 128  ,gbp_g38
07:42:23 129  ,gbp_g39
07:42:23 130  ,gbp_g40
07:42:23 131  ,gbp_g41
07:42:23 132  ,jpy_g00
07:42:23 133  ,jpy_g01
07:42:23 134  ,jpy_g02
07:42:23 135  ,jpy_g03
07:42:23 136  ,jpy_g04
07:42:23 137  ,jpy_g05
07:42:23 138  ,jpy_g06
07:42:23 139  ,jpy_g07
07:42:23 140  ,jpy_g08
07:42:23 141  ,jpy_g09
07:42:23 142  ,jpy_g10
07:42:23 143  ,jpy_g11
07:42:23 144  ,jpy_g12
07:42:23 145  ,jpy_g13
07:42:23 146  ,jpy_g14
07:42:23 147  ,jpy_g15
07:42:23 148  ,jpy_g16
07:42:23 149  ,jpy_g17
07:42:23 150  ,jpy_g18
07:42:23 151  ,jpy_g19
07:42:23 152  ,jpy_g20
07:42:23 153  ,jpy_g21
07:42:23 154  ,jpy_g22
07:42:23 155  ,jpy_g23
07:42:23 156  ,jpy_g24
07:42:23 157  ,jpy_g25
07:42:23 158  ,jpy_g26
07:42:23 159  ,jpy_g27
07:42:23 160  ,jpy_g28
07:42:23 161  ,jpy_g29
07:42:23 162  ,jpy_g30
07:42:23 163  ,jpy_g31
07:42:23 164  ,jpy_g32
07:42:23 165  ,jpy_g33
07:42:23 166  ,jpy_g34
07:42:23 167  ,jpy_g35
07:42:23 168  ,jpy_g36
07:42:23 169  ,jpy_g37
07:42:23 170  ,jpy_g38
07:42:23 171  ,jpy_g39
07:42:23 172  ,jpy_g40
07:42:23 173  ,jpy_g41
07:42:23 174  ,cad_g00
07:42:23 175  ,cad_g01
07:42:23 176  ,cad_g02
07:42:23 177  ,cad_g03
07:42:23 178  ,cad_g04
07:42:23 179  ,cad_g05
07:42:23 180  ,cad_g06
07:42:23 181  ,cad_g07
07:42:23 182  ,cad_g08
07:42:23 183  ,cad_g09
07:42:23 184  ,cad_g10
07:42:23 185  ,cad_g11
07:42:23 186  ,cad_g12
07:42:23 187  ,cad_g13
07:42:23 188  ,cad_g14
07:42:23 189  ,cad_g15
07:42:23 190  ,cad_g16
07:42:23 191  ,cad_g17
07:42:23 192  ,cad_g18
07:42:23 193  ,cad_g19
07:42:23 194  ,cad_g20
07:42:23 195  ,cad_g21
07:42:23 196  ,cad_g22
07:42:23 197  ,cad_g23
07:42:23 198  ,cad_g24
07:42:23 199  ,cad_g25
07:42:23 200  ,cad_g26
07:42:23 201  ,cad_g27
07:42:23 202  ,cad_g28
07:42:23 203  ,cad_g29
07:42:23 204  ,cad_g30
07:42:23 205  ,cad_g31
07:42:23 206  ,cad_g32
07:42:23 207  ,cad_g33
07:42:23 208  ,cad_g34
07:42:23 209  ,cad_g35
07:42:23 210  ,cad_g36
07:42:23 211  ,cad_g37
07:42:23 212  ,cad_g38
07:42:23 213  ,cad_g39
07:42:23 214  ,cad_g40
07:42:23 215  ,cad_g41
07:42:23 216  ,chf_g00
07:42:23 217  ,chf_g01
07:42:23 218  ,chf_g02
07:42:23 219  ,chf_g03
07:42:23 220  ,chf_g04
07:42:23 221  ,chf_g05
07:42:23 222  ,chf_g06
07:42:23 223  ,chf_g07
07:42:23 224  ,chf_g08
07:42:23 225  ,chf_g09
07:42:23 226  ,chf_g10
07:42:23 227  ,chf_g11
07:42:23 228  ,chf_g12
07:42:23 229  ,chf_g13
07:42:23 230  ,chf_g14
07:42:23 231  ,chf_g15
07:42:23 232  ,chf_g16
07:42:23 233  ,chf_g17
07:42:23 234  ,chf_g18
07:42:23 235  ,chf_g19
07:42:23 236  ,chf_g20
07:42:23 237  ,chf_g21
07:42:23 238  ,chf_g22
07:42:23 239  ,chf_g23
07:42:23 240  ,chf_g24
07:42:23 241  ,chf_g25
07:42:23 242  ,chf_g26
07:42:23 243  ,chf_g27
07:42:23 244  ,chf_g28
07:42:23 245  ,chf_g29
07:42:23 246  ,chf_g30
07:42:23 247  ,chf_g31
07:42:23 248  ,chf_g32
07:42:23 249  ,chf_g33
07:42:23 250  ,chf_g34
07:42:23 251  ,chf_g35
07:42:23 252  ,chf_g36
07:42:23 253  ,chf_g37
07:42:23 254  ,chf_g38
07:42:23 255  ,chf_g39
07:42:23 256  ,chf_g40
07:42:23 257  ,chf_g41
07:42:23 258  FROM aud_ms6 m
07:42:23 259  WHERE m.ydate = '&1'||' '||'&2'
07:42:23 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2010-12-29'||' '||'07:25:00'

View created.

Elapsed: 00:00:00.12
07:42:23 SQL> 
07:42:23 SQL> -- rpt
07:42:23 SQL> -- We should see just 1 row:
07:42:23 SQL> 
07:42:23 SQL> SELECT COUNT(prdate) FROM sme
07:42:23   2  
07:42:23 SQL> -- Build the model:
07:42:23 SQL> CREATE OR REPLACE VIEW bme AS
07:42:23   2  SELECT
07:42:23   3  'aud'||m.ydate prdate
07:42:23   4  ,gatt
07:42:23   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
07:42:23   6  ,eur_g00
07:42:23   7  ,eur_g01
07:42:23   8  ,eur_g02
07:42:23   9  ,eur_g03
07:42:23  10  ,eur_g04
07:42:23  11  ,eur_g05
07:42:23  12  ,eur_g06
07:42:23  13  ,eur_g07
07:42:23  14  ,eur_g08
07:42:23  15  ,eur_g09
07:42:23  16  ,eur_g10
07:42:23  17  ,eur_g11
07:42:23  18  ,eur_g12
07:42:23  19  ,eur_g13
07:42:23  20  ,eur_g14
07:42:23  21  ,eur_g15
07:42:23  22  ,eur_g16
07:42:23  23  ,eur_g17
07:42:23  24  ,eur_g18
07:42:23  25  ,eur_g19
07:42:23  26  ,eur_g20
07:42:23  27  ,eur_g21
07:42:23  28  ,eur_g22
07:42:23  29  ,eur_g23
07:42:23  30  ,eur_g24
07:42:23  31  ,eur_g25
07:42:23  32  ,eur_g26
07:42:23  33  ,eur_g27
07:42:23  34  ,eur_g28
07:42:23  35  ,eur_g29
07:42:23  36  ,eur_g30
07:42:23  37  ,eur_g31
07:42:23  38  ,eur_g32
07:42:23  39  ,eur_g33
07:42:23  40  ,eur_g34
07:42:23  41  ,eur_g35
07:42:23  42  ,eur_g36
07:42:23  43  ,eur_g37
07:42:23  44  ,eur_g38
07:42:23  45  ,eur_g39
07:42:23  46  ,eur_g40
07:42:23  47  ,eur_g41
07:42:23  48  ,aud_g00
07:42:23  49  ,aud_g01
07:42:23  50  ,aud_g02
07:42:23  51  ,aud_g03
07:42:23  52  ,aud_g04
07:42:23  53  ,aud_g05
07:42:23  54  ,aud_g06
07:42:23  55  ,aud_g07
07:42:23  56  ,aud_g08
07:42:23  57  ,aud_g09
07:42:23  58  ,aud_g10
07:42:23  59  ,aud_g11
07:42:23  60  ,aud_g12
07:42:23  61  ,aud_g13
07:42:23  62  ,aud_g14
07:42:23  63  ,aud_g15
07:42:23  64  ,aud_g16
07:42:23  65  ,aud_g17
07:42:23  66  ,aud_g18
07:42:23  67  ,aud_g19
07:42:23  68  ,aud_g20
07:42:23  69  ,aud_g21
07:42:23  70  ,aud_g22
07:42:23  71  ,aud_g23
07:42:23  72  ,aud_g24
07:42:23  73  ,aud_g25
07:42:23  74  ,aud_g26
07:42:23  75  ,aud_g27
07:42:23  76  ,aud_g28
07:42:23  77  ,aud_g29
07:42:23  78  ,aud_g30
07:42:23  79  ,aud_g31
07:42:23  80  ,aud_g32
07:42:23  81  ,aud_g33
07:42:23  82  ,aud_g34
07:42:23  83  ,aud_g35
07:42:23  84  ,aud_g36
07:42:23  85  ,aud_g37
07:42:23  86  ,aud_g38
07:42:23  87  ,aud_g39
07:42:23  88  ,aud_g40
07:42:23  89  ,aud_g41
07:42:23  90  ,gbp_g00
07:42:23  91  ,gbp_g01
07:42:23  92  ,gbp_g02
07:42:23  93  ,gbp_g03
07:42:23  94  ,gbp_g04
07:42:23  95  ,gbp_g05
07:42:23  96  ,gbp_g06
07:42:23  97  ,gbp_g07
07:42:23  98  ,gbp_g08
07:42:23  99  ,gbp_g09
07:42:23 100  ,gbp_g10
07:42:23 101  ,gbp_g11
07:42:23 102  ,gbp_g12
07:42:23 103  ,gbp_g13
07:42:23 104  ,gbp_g14
07:42:23 105  ,gbp_g15
07:42:23 106  ,gbp_g16
07:42:23 107  ,gbp_g17
07:42:23 108  ,gbp_g18
07:42:23 109  ,gbp_g19
07:42:23 110  ,gbp_g20
07:42:23 111  ,gbp_g21
07:42:23 112  ,gbp_g22
07:42:23 113  ,gbp_g23
07:42:23 114  ,gbp_g24
07:42:23 115  ,gbp_g25
07:42:23 116  ,gbp_g26
07:42:23 117  ,gbp_g27
07:42:23 118  ,gbp_g28
07:42:23 119  ,gbp_g29
07:42:23 120  ,gbp_g30
07:42:23 121  ,gbp_g31
07:42:23 122  ,gbp_g32
07:42:23 123  ,gbp_g33
07:42:23 124  ,gbp_g34
07:42:23 125  ,gbp_g35
07:42:23 126  ,gbp_g36
07:42:23 127  ,gbp_g37
07:42:23 128  ,gbp_g38
07:42:23 129  ,gbp_g39
07:42:23 130  ,gbp_g40
07:42:23 131  ,gbp_g41
07:42:23 132  ,jpy_g00
07:42:23 133  ,jpy_g01
07:42:23 134  ,jpy_g02
07:42:23 135  ,jpy_g03
07:42:23 136  ,jpy_g04
07:42:23 137  ,jpy_g05
07:42:23 138  ,jpy_g06
07:42:23 139  ,jpy_g07
07:42:23 140  ,jpy_g08
07:42:23 141  ,jpy_g09
07:42:23 142  ,jpy_g10
07:42:23 143  ,jpy_g11
07:42:23 144  ,jpy_g12
07:42:23 145  ,jpy_g13
07:42:23 146  ,jpy_g14
07:42:23 147  ,jpy_g15
07:42:23 148  ,jpy_g16
07:42:23 149  ,jpy_g17
07:42:23 150  ,jpy_g18
07:42:23 151  ,jpy_g19
07:42:23 152  ,jpy_g20
07:42:23 153  ,jpy_g21
07:42:23 154  ,jpy_g22
07:42:23 155  ,jpy_g23
07:42:23 156  ,jpy_g24
07:42:23 157  ,jpy_g25
07:42:23 158  ,jpy_g26
07:42:23 159  ,jpy_g27
07:42:23 160  ,jpy_g28
07:42:23 161  ,jpy_g29
07:42:23 162  ,jpy_g30
07:42:23 163  ,jpy_g31
07:42:23 164  ,jpy_g32
07:42:23 165  ,jpy_g33
07:42:23 166  ,jpy_g34
07:42:23 167  ,jpy_g35
07:42:23 168  ,jpy_g36
07:42:23 169  ,jpy_g37
07:42:23 170  ,jpy_g38
07:42:23 171  ,jpy_g39
07:42:23 172  ,jpy_g40
07:42:23 173  ,jpy_g41
07:42:23 174  ,cad_g00
07:42:23 175  ,cad_g01
07:42:23 176  ,cad_g02
07:42:23 177  ,cad_g03
07:42:23 178  ,cad_g04
07:42:23 179  ,cad_g05
07:42:23 180  ,cad_g06
07:42:23 181  ,cad_g07
07:42:23 182  ,cad_g08
07:42:23 183  ,cad_g09
07:42:23 184  ,cad_g10
07:42:23 185  ,cad_g11
07:42:23 186  ,cad_g12
07:42:23 187  ,cad_g13
07:42:23 188  ,cad_g14
07:42:23 189  ,cad_g15
07:42:23 190  ,cad_g16
07:42:23 191  ,cad_g17
07:42:23 192  ,cad_g18
07:42:23 193  ,cad_g19
07:42:23 194  ,cad_g20
07:42:23 195  ,cad_g21
07:42:23 196  ,cad_g22
07:42:23 197  ,cad_g23
07:42:23 198  ,cad_g24
07:42:23 199  ,cad_g25
07:42:23 200  ,cad_g26
07:42:23 201  ,cad_g27
07:42:23 202  ,cad_g28
07:42:23 203  ,cad_g29
07:42:23 204  ,cad_g30
07:42:23 205  ,cad_g31
07:42:23 206  ,cad_g32
07:42:23 207  ,cad_g33
07:42:23 208  ,cad_g34
07:42:23 209  ,cad_g35
07:42:23 210  ,cad_g36
07:42:23 211  ,cad_g37
07:42:23 212  ,cad_g38
07:42:23 213  ,cad_g39
07:42:23 214  ,cad_g40
07:42:23 215  ,cad_g41
07:42:23 216  ,chf_g00
07:42:23 217  ,chf_g01
07:42:23 218  ,chf_g02
07:42:23 219  ,chf_g03
07:42:23 220  ,chf_g04
07:42:23 221  ,chf_g05
07:42:23 222  ,chf_g06
07:42:23 223  ,chf_g07
07:42:23 224  ,chf_g08
07:42:23 225  ,chf_g09
07:42:23 226  ,chf_g10
07:42:23 227  ,chf_g11
07:42:23 228  ,chf_g12
07:42:23 229  ,chf_g13
07:42:23 230  ,chf_g14
07:42:23 231  ,chf_g15
07:42:23 232  ,chf_g16
07:42:23 233  ,chf_g17
07:42:23 234  ,chf_g18
07:42:23 235  ,chf_g19
07:42:23 236  ,chf_g20
07:42:23 237  ,chf_g21
07:42:23 238  ,chf_g22
07:42:23 239  ,chf_g23
07:42:23 240  ,chf_g24
07:42:23 241  ,chf_g25
07:42:23 242  ,chf_g26
07:42:23 243  ,chf_g27
07:42:23 244  ,chf_g28
07:42:23 245  ,chf_g29
07:42:23 246  ,chf_g30
07:42:23 247  ,chf_g31
07:42:23 248  ,chf_g32
07:42:23 249  ,chf_g33
07:42:23 250  ,chf_g34
07:42:23 251  ,chf_g35
07:42:23 252  ,chf_g36
07:42:23 253  ,chf_g37
07:42:23 254  ,chf_g38
07:42:23 255  ,chf_g39
07:42:23 256  ,chf_g40
07:42:23 257  ,chf_g41
07:42:23 258  FROM aud_ms6 m
07:42:23 259  WHERE gatt IN('nup','up')
07:42:23 260  AND 1+m.ydate < '&1'||' '||'&2'
07:42:23 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2010-12-29'||' '||'07:25:00'

View created.

Elapsed: 00:00:00.12
07:42:24 SQL> 
07:42:24 SQL> -- rpt
07:42:24 SQL> 
07:42:24 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt
07:42:24   2  
07:42:24 SQL> SELECT MAX(prdate) FROM bme
07:42:24   2  
07:42:24 SQL> -- Now build model from bme and score sme
07:42:24 SQL> @score1.sql
07:42:24 SQL> -- score1.sql
07:42:24 SQL> 
07:42:24 SQL> -- Does the 1st SVM score
07:42:24 SQL> 
07:42:24 SQL> -- Fill up svmc_apply_prep
07:42:24 SQL> @score.sql
07:42:24 SQL> --
07:42:24 SQL> -- score.sql
07:42:24 SQL> --
07:42:24 SQL> 
07:42:24 SQL> -- usage: score.sql
07:42:24 SQL> 
07:42:24 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
07:42:24 SQL> 
07:42:24 SQL> DEFINE target	= 'gatt'
07:42:24 SQL> DEFINE model_name = 'forex14'
07:42:24 SQL> DEFINE bldtable	= 'bme'
07:42:24 SQL> DEFINE scoretable = 'sme'
07:42:24 SQL> DEFINE case_id	= 'prdate'
07:42:24 SQL> 
07:42:24 SQL> -- Define a variable to help me exclude some columns from some data mining calls
07:42:24 SQL> DEFINE exclude1 = "'&target','&case_id'"
07:42:24 SQL> 
07:42:24 SQL> -- Builds an SVM model using pl/sql.
07:42:24 SQL> 
07:42:24 SQL> -----------------------------------------------------------------------
07:42:24 SQL> --			    BUILD THE MODEL
07:42:24 SQL> -----------------------------------------------------------------------
07:42:24 SQL> 
07:42:24 SQL> -- Cleanup old build data preparation objects for repeat runs
07:42:24 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.01
07:42:24 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
07:42:24 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.01
07:42:24 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.00
07:42:24 SQL> 
07:42:24 SQL> 
07:42:24 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
07:42:24 SQL> --
07:42:24 SQL> -- DROP	TABLE svmc_settings ;
07:42:24 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
07:42:24 SQL> -- DELETE svmc_settings;
07:42:24 SQL> 
07:42:24 SQL> -- The default classification algorithm is Naive Bayes. So override
07:42:24 SQL> -- this choice to SVM using a settings table.
07:42:24 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
07:42:24 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
07:42:24 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
07:42:24 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
07:42:24 SQL> -- models.
07:42:24 SQL> --
07:42:24 SQL> 
07:42:24 SQL> -- Do this once and then comment it out.
07:42:24 SQL> -- That makes script go faster.
07:42:24 SQL> -- BEGIN
07:42:24 SQL> -- -- Populate settings table
07:42:24 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:42:24 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
07:42:24 SQL> --
07:42:24 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:42:24 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
07:42:24 SQL> --
07:42:24 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:42:24 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
07:42:24 SQL> --   COMMIT;
07:42:24 SQL> -- END;
07:42:24 SQL> -- /
07:42:24 SQL> 
07:42:24 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
07:42:24 SQL> 
07:42:24 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
07:42:24   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:42:24   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
07:42:24 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
07:42:24   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:42:24   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
07:42:24 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
07:42:24   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:42:24   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
07:42:24 SQL> 
07:42:24 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
07:42:24   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:42:24   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
07:42:24 SQL> 
07:42:24 SQL> --------------------------------
07:42:24 SQL> -- PREPARE BUILD (TRAINING) DATA
07:42:24 SQL> --
07:42:24 SQL> 
07:42:24 SQL> -- 1. Missing Value treatment for all Predictors and
07:42:24 SQL> -- 2. Outlier Treatment and
07:42:24 SQL> -- 3. Normalization are performed below.
07:42:24 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
07:42:24 SQL> --    normalized here.
07:42:24 SQL> 
07:42:24 SQL> BEGIN
07:42:24   2  	-- Perform missing value treatment for all predictors
07:42:24   3  	-- create miss tables
07:42:24   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
07:42:24   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
07:42:24   6  
07:42:24   7  	-- populate miss tables
07:42:24   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
07:42:24   9  	  miss_table_name => 'svmc_miss_num',
07:42:24  10  	  data_table_name => '&bldtable',
07:42:24  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:42:24  12  
07:42:24  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
07:42:24  14  	  miss_table_name => 'svmc_miss_cat',
07:42:24  15  	  data_table_name => '&bldtable',
07:42:24  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:42:24  17  
07:42:24  18  	-- xform input data to replace missing values
07:42:24  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:42:24  20  	  miss_table_name => 'svmc_miss_num',
07:42:24  21  	  data_table_name => '&bldtable',
07:42:24  22  	  xform_view_name => 'xformed_build_miss_num');
07:42:24  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:42:24  24  	  miss_table_name => 'svmc_miss_cat',
07:42:24  25  	  data_table_name => '&bldtable',
07:42:24  26  	  xform_view_name => 'xformed_build_miss_cat');
07:42:24  27  
07:42:24  28  	-- Perform outlier treatment.
07:42:24  29  	-- create clip table
07:42:24  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
07:42:24  31  
07:42:24  32  	-- populate clip table
07:42:24  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
07:42:24  34  	  clip_table_name => 'svmc_clip',
07:42:24  35  	  data_table_name => '&bldtable',
07:42:24  36  	  tail_frac	  => 0.025,
07:42:24  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:42:24  38  
07:42:24  39  	-- xform input data to winsorized data
07:42:24  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
07:42:24  41  	  clip_table_name => 'svmc_clip',
07:42:24  42  	  data_table_name => '&bldtable',
07:42:24  43  	  xform_view_name => 'svmc_winsor');
07:42:24  44  
07:42:24  45  	-- create normalization table
07:42:24  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
07:42:24  47  
07:42:24  48  	-- populate normalization table based on winsorized data
07:42:24  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
07:42:24  50  	  norm_table_name => 'svmc_norm',
07:42:24  51  	  data_table_name => 'svmc_winsor',
07:42:24  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:42:24  53  
07:42:24  54  	-- normalize the original data
07:42:24  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:42:24  56  	  norm_table_name => 'svmc_norm',
07:42:24  57  	  data_table_name => '&bldtable',
07:42:24  58  	  xform_view_name => 'svmc_build_prep');
07:42:24  59  END;
07:42:24  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:17.72
07:42:42 SQL> 
07:42:42 SQL> ---------------------
07:42:42 SQL> -- CREATE A NEW MODEL
07:42:42 SQL> --
07:42:42 SQL> -- Cleanup old model with the same name for repeat runs
07:42:42 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
07:42:42   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:42:42   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.13
07:42:43 SQL> 
07:42:43 SQL> -- Build a new SVM Model
07:42:43 SQL> BEGIN
07:42:43   2  	DBMS_DATA_MINING.CREATE_MODEL(
07:42:43   3  	  model_name	      => '&model_name',
07:42:43   4  	  mining_function     => dbms_data_mining.classification,
07:42:43   5  	  data_table_name     => 'svmc_build_prep',
07:42:43   6  	  case_id_column_name => '&case_id',
07:42:43   7  	  target_column_name  => '&target',
07:42:43   8  	  settings_table_name => 'svmc_settings');
07:42:43   9  END;
07:42:43  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:27.99
07:43:11 SQL> 
07:43:11 SQL> -----------------------------------------------------------------------
07:43:11 SQL> --			       APPLY/score THE MODEL
07:43:11 SQL> -----------------------------------------------------------------------
07:43:11 SQL> 
07:43:11 SQL> -- Cleanup old scoring data preparation objects for repeat runs
07:43:11 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
07:43:11   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:43:11   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
07:43:11 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
07:43:11   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:43:11   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
07:43:11 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
07:43:11   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:43:11   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
07:43:11 SQL> -----------------------
07:43:11 SQL> -- PREPARE SCORING DATA
07:43:11 SQL> --
07:43:11 SQL> -- If the data for model creation has been prepared, then the data
07:43:11 SQL> -- to be scored using the model must be prepared in the same manner
07:43:11 SQL> -- in order to obtain meaningful results.
07:43:11 SQL> --
07:43:11 SQL> -- 1. Missing Value treatment for all Predictors and
07:43:11 SQL> -- 2. Normalization
07:43:11 SQL> -- No outlier treatment will be performed during test and apply. The
07:43:11 SQL> -- normalization step is sufficient, since the normalization parameters
07:43:11 SQL> -- already capture the effects of outlier treatment done with build data.
07:43:11 SQL> --
07:43:11 SQL> BEGIN
07:43:11   2  	-- Xform Test data to replace missing values
07:43:11   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:43:11   4  	  miss_table_name => 'svmc_miss_num',
07:43:11   5  	  data_table_name => '&scoretable',
07:43:11   6  	  xform_view_name => 'xformed_apply_miss_num');
07:43:11   7  
07:43:11   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:43:11   9  	  miss_table_name => 'svmc_miss_cat',
07:43:11  10  	  data_table_name => '&scoretable',
07:43:11  11  	  xform_view_name => 'xformed_apply_miss_cat');
07:43:11  12  
07:43:11  13  	-- Normalize the data to be scored
07:43:11  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:43:11  15  	  norm_table_name => 'svmc_norm',
07:43:11  16  	  data_table_name => '&scoretable',
07:43:11  17  	  xform_view_name => 'svmc_apply_prep');
07:43:11  18  END;
07:43:11  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.27
07:43:12 SQL> 
07:43:12 SQL> -- Use same model_name used in score.sql
07:43:12 SQL> DEFINE model_name = 'forex14'
07:43:12 SQL> 
07:43:12 SQL> -- CREATE TABLE fxscores6 (prdate VARCHAR2(30),score NUMBER,rundate DATE,pair VARCHAR2(8),ydate DATE);
07:43:12 SQL> 
07:43:12 SQL> DELETE fxscores6 WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.04
07:43:12 SQL> 
07:43:12 SQL> INSERT INTO fxscores6 (prdate,score,rundate,pair,ydate)
07:43:12   2  SELECT
07:43:12   3  prdate
07:43:12   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
07:43:12   5  ,sysdate
07:43:12   6  ,SUBSTR(prdate,1,3)pair
07:43:12   7  ,SUBSTR(prdate,4,19)ydate
07:43:12   8  FROM svmc_apply_prep
07:43:12   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.16
07:43:12 SQL> @aud_score1day.sql  2010-12-29 07:30:00
07:43:12 SQL> --
07:43:12 SQL> -- aud_score1day.sql
07:43:12 SQL> --
07:43:12 SQL> 
07:43:12 SQL> CREATE OR REPLACE VIEW sme AS
07:43:12   2  SELECT
07:43:12   3  'aud'||m.ydate prdate
07:43:12   4  ,NULL gatt
07:43:12   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
07:43:12   6  ,eur_g00
07:43:12   7  ,eur_g01
07:43:12   8  ,eur_g02
07:43:12   9  ,eur_g03
07:43:12  10  ,eur_g04
07:43:12  11  ,eur_g05
07:43:12  12  ,eur_g06
07:43:12  13  ,eur_g07
07:43:12  14  ,eur_g08
07:43:12  15  ,eur_g09
07:43:12  16  ,eur_g10
07:43:12  17  ,eur_g11
07:43:12  18  ,eur_g12
07:43:12  19  ,eur_g13
07:43:12  20  ,eur_g14
07:43:12  21  ,eur_g15
07:43:12  22  ,eur_g16
07:43:12  23  ,eur_g17
07:43:12  24  ,eur_g18
07:43:12  25  ,eur_g19
07:43:12  26  ,eur_g20
07:43:12  27  ,eur_g21
07:43:12  28  ,eur_g22
07:43:12  29  ,eur_g23
07:43:12  30  ,eur_g24
07:43:12  31  ,eur_g25
07:43:12  32  ,eur_g26
07:43:12  33  ,eur_g27
07:43:12  34  ,eur_g28
07:43:12  35  ,eur_g29
07:43:12  36  ,eur_g30
07:43:12  37  ,eur_g31
07:43:12  38  ,eur_g32
07:43:12  39  ,eur_g33
07:43:12  40  ,eur_g34
07:43:12  41  ,eur_g35
07:43:12  42  ,eur_g36
07:43:12  43  ,eur_g37
07:43:12  44  ,eur_g38
07:43:12  45  ,eur_g39
07:43:12  46  ,eur_g40
07:43:12  47  ,eur_g41
07:43:12  48  ,aud_g00
07:43:12  49  ,aud_g01
07:43:12  50  ,aud_g02
07:43:12  51  ,aud_g03
07:43:12  52  ,aud_g04
07:43:12  53  ,aud_g05
07:43:12  54  ,aud_g06
07:43:12  55  ,aud_g07
07:43:12  56  ,aud_g08
07:43:12  57  ,aud_g09
07:43:12  58  ,aud_g10
07:43:12  59  ,aud_g11
07:43:12  60  ,aud_g12
07:43:12  61  ,aud_g13
07:43:12  62  ,aud_g14
07:43:12  63  ,aud_g15
07:43:12  64  ,aud_g16
07:43:12  65  ,aud_g17
07:43:12  66  ,aud_g18
07:43:12  67  ,aud_g19
07:43:12  68  ,aud_g20
07:43:12  69  ,aud_g21
07:43:12  70  ,aud_g22
07:43:12  71  ,aud_g23
07:43:12  72  ,aud_g24
07:43:12  73  ,aud_g25
07:43:12  74  ,aud_g26
07:43:12  75  ,aud_g27
07:43:12  76  ,aud_g28
07:43:12  77  ,aud_g29
07:43:12  78  ,aud_g30
07:43:12  79  ,aud_g31
07:43:12  80  ,aud_g32
07:43:12  81  ,aud_g33
07:43:12  82  ,aud_g34
07:43:12  83  ,aud_g35
07:43:12  84  ,aud_g36
07:43:12  85  ,aud_g37
07:43:12  86  ,aud_g38
07:43:12  87  ,aud_g39
07:43:12  88  ,aud_g40
07:43:12  89  ,aud_g41
07:43:12  90  ,gbp_g00
07:43:12  91  ,gbp_g01
07:43:12  92  ,gbp_g02
07:43:12  93  ,gbp_g03
07:43:12  94  ,gbp_g04
07:43:12  95  ,gbp_g05
07:43:12  96  ,gbp_g06
07:43:12  97  ,gbp_g07
07:43:12  98  ,gbp_g08
07:43:12  99  ,gbp_g09
07:43:12 100  ,gbp_g10
07:43:12 101  ,gbp_g11
07:43:12 102  ,gbp_g12
07:43:12 103  ,gbp_g13
07:43:12 104  ,gbp_g14
07:43:12 105  ,gbp_g15
07:43:12 106  ,gbp_g16
07:43:12 107  ,gbp_g17
07:43:12 108  ,gbp_g18
07:43:12 109  ,gbp_g19
07:43:12 110  ,gbp_g20
07:43:12 111  ,gbp_g21
07:43:12 112  ,gbp_g22
07:43:12 113  ,gbp_g23
07:43:12 114  ,gbp_g24
07:43:12 115  ,gbp_g25
07:43:12 116  ,gbp_g26
07:43:12 117  ,gbp_g27
07:43:12 118  ,gbp_g28
07:43:12 119  ,gbp_g29
07:43:12 120  ,gbp_g30
07:43:12 121  ,gbp_g31
07:43:12 122  ,gbp_g32
07:43:12 123  ,gbp_g33
07:43:12 124  ,gbp_g34
07:43:12 125  ,gbp_g35
07:43:12 126  ,gbp_g36
07:43:12 127  ,gbp_g37
07:43:12 128  ,gbp_g38
07:43:12 129  ,gbp_g39
07:43:12 130  ,gbp_g40
07:43:12 131  ,gbp_g41
07:43:12 132  ,jpy_g00
07:43:12 133  ,jpy_g01
07:43:12 134  ,jpy_g02
07:43:12 135  ,jpy_g03
07:43:12 136  ,jpy_g04
07:43:12 137  ,jpy_g05
07:43:12 138  ,jpy_g06
07:43:12 139  ,jpy_g07
07:43:12 140  ,jpy_g08
07:43:12 141  ,jpy_g09
07:43:12 142  ,jpy_g10
07:43:12 143  ,jpy_g11
07:43:12 144  ,jpy_g12
07:43:12 145  ,jpy_g13
07:43:12 146  ,jpy_g14
07:43:12 147  ,jpy_g15
07:43:12 148  ,jpy_g16
07:43:12 149  ,jpy_g17
07:43:12 150  ,jpy_g18
07:43:12 151  ,jpy_g19
07:43:12 152  ,jpy_g20
07:43:12 153  ,jpy_g21
07:43:12 154  ,jpy_g22
07:43:12 155  ,jpy_g23
07:43:12 156  ,jpy_g24
07:43:12 157  ,jpy_g25
07:43:12 158  ,jpy_g26
07:43:12 159  ,jpy_g27
07:43:12 160  ,jpy_g28
07:43:12 161  ,jpy_g29
07:43:12 162  ,jpy_g30
07:43:12 163  ,jpy_g31
07:43:12 164  ,jpy_g32
07:43:12 165  ,jpy_g33
07:43:12 166  ,jpy_g34
07:43:12 167  ,jpy_g35
07:43:12 168  ,jpy_g36
07:43:12 169  ,jpy_g37
07:43:12 170  ,jpy_g38
07:43:12 171  ,jpy_g39
07:43:12 172  ,jpy_g40
07:43:12 173  ,jpy_g41
07:43:12 174  ,cad_g00
07:43:12 175  ,cad_g01
07:43:12 176  ,cad_g02
07:43:12 177  ,cad_g03
07:43:12 178  ,cad_g04
07:43:12 179  ,cad_g05
07:43:12 180  ,cad_g06
07:43:12 181  ,cad_g07
07:43:12 182  ,cad_g08
07:43:12 183  ,cad_g09
07:43:12 184  ,cad_g10
07:43:12 185  ,cad_g11
07:43:12 186  ,cad_g12
07:43:12 187  ,cad_g13
07:43:12 188  ,cad_g14
07:43:12 189  ,cad_g15
07:43:12 190  ,cad_g16
07:43:12 191  ,cad_g17
07:43:12 192  ,cad_g18
07:43:12 193  ,cad_g19
07:43:12 194  ,cad_g20
07:43:12 195  ,cad_g21
07:43:12 196  ,cad_g22
07:43:12 197  ,cad_g23
07:43:12 198  ,cad_g24
07:43:12 199  ,cad_g25
07:43:12 200  ,cad_g26
07:43:12 201  ,cad_g27
07:43:12 202  ,cad_g28
07:43:12 203  ,cad_g29
07:43:12 204  ,cad_g30
07:43:12 205  ,cad_g31
07:43:12 206  ,cad_g32
07:43:12 207  ,cad_g33
07:43:12 208  ,cad_g34
07:43:12 209  ,cad_g35
07:43:12 210  ,cad_g36
07:43:12 211  ,cad_g37
07:43:12 212  ,cad_g38
07:43:12 213  ,cad_g39
07:43:12 214  ,cad_g40
07:43:12 215  ,cad_g41
07:43:12 216  ,chf_g00
07:43:12 217  ,chf_g01
07:43:12 218  ,chf_g02
07:43:12 219  ,chf_g03
07:43:12 220  ,chf_g04
07:43:12 221  ,chf_g05
07:43:12 222  ,chf_g06
07:43:12 223  ,chf_g07
07:43:12 224  ,chf_g08
07:43:12 225  ,chf_g09
07:43:12 226  ,chf_g10
07:43:12 227  ,chf_g11
07:43:12 228  ,chf_g12
07:43:12 229  ,chf_g13
07:43:12 230  ,chf_g14
07:43:12 231  ,chf_g15
07:43:12 232  ,chf_g16
07:43:12 233  ,chf_g17
07:43:12 234  ,chf_g18
07:43:12 235  ,chf_g19
07:43:12 236  ,chf_g20
07:43:12 237  ,chf_g21
07:43:12 238  ,chf_g22
07:43:12 239  ,chf_g23
07:43:12 240  ,chf_g24
07:43:12 241  ,chf_g25
07:43:12 242  ,chf_g26
07:43:12 243  ,chf_g27
07:43:12 244  ,chf_g28
07:43:12 245  ,chf_g29
07:43:12 246  ,chf_g30
07:43:12 247  ,chf_g31
07:43:12 248  ,chf_g32
07:43:12 249  ,chf_g33
07:43:12 250  ,chf_g34
07:43:12 251  ,chf_g35
07:43:12 252  ,chf_g36
07:43:12 253  ,chf_g37
07:43:12 254  ,chf_g38
07:43:12 255  ,chf_g39
07:43:12 256  ,chf_g40
07:43:12 257  ,chf_g41
07:43:12 258  FROM aud_ms6 m
07:43:12 259  WHERE m.ydate = '&1'||' '||'&2'
07:43:12 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2010-12-29'||' '||'07:30:00'

View created.

Elapsed: 00:00:00.11
07:43:12 SQL> 
07:43:12 SQL> -- rpt
07:43:12 SQL> -- We should see just 1 row:
07:43:12 SQL> 
07:43:12 SQL> SELECT COUNT(prdate) FROM sme
07:43:12   2  
07:43:12 SQL> -- Build the model:
07:43:12 SQL> CREATE OR REPLACE VIEW bme AS
07:43:12   2  SELECT
07:43:12   3  'aud'||m.ydate prdate
07:43:12   4  ,gatt
07:43:12   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
07:43:12   6  ,eur_g00
07:43:12   7  ,eur_g01
07:43:12   8  ,eur_g02
07:43:12   9  ,eur_g03
07:43:12  10  ,eur_g04
07:43:12  11  ,eur_g05
07:43:12  12  ,eur_g06
07:43:12  13  ,eur_g07
07:43:12  14  ,eur_g08
07:43:12  15  ,eur_g09
07:43:12  16  ,eur_g10
07:43:12  17  ,eur_g11
07:43:12  18  ,eur_g12
07:43:12  19  ,eur_g13
07:43:12  20  ,eur_g14
07:43:12  21  ,eur_g15
07:43:12  22  ,eur_g16
07:43:12  23  ,eur_g17
07:43:12  24  ,eur_g18
07:43:12  25  ,eur_g19
07:43:12  26  ,eur_g20
07:43:12  27  ,eur_g21
07:43:12  28  ,eur_g22
07:43:12  29  ,eur_g23
07:43:12  30  ,eur_g24
07:43:12  31  ,eur_g25
07:43:12  32  ,eur_g26
07:43:12  33  ,eur_g27
07:43:12  34  ,eur_g28
07:43:12  35  ,eur_g29
07:43:12  36  ,eur_g30
07:43:12  37  ,eur_g31
07:43:12  38  ,eur_g32
07:43:12  39  ,eur_g33
07:43:12  40  ,eur_g34
07:43:12  41  ,eur_g35
07:43:12  42  ,eur_g36
07:43:12  43  ,eur_g37
07:43:12  44  ,eur_g38
07:43:12  45  ,eur_g39
07:43:12  46  ,eur_g40
07:43:12  47  ,eur_g41
07:43:12  48  ,aud_g00
07:43:12  49  ,aud_g01
07:43:12  50  ,aud_g02
07:43:12  51  ,aud_g03
07:43:12  52  ,aud_g04
07:43:12  53  ,aud_g05
07:43:12  54  ,aud_g06
07:43:12  55  ,aud_g07
07:43:12  56  ,aud_g08
07:43:12  57  ,aud_g09
07:43:12  58  ,aud_g10
07:43:12  59  ,aud_g11
07:43:12  60  ,aud_g12
07:43:12  61  ,aud_g13
07:43:12  62  ,aud_g14
07:43:12  63  ,aud_g15
07:43:12  64  ,aud_g16
07:43:12  65  ,aud_g17
07:43:12  66  ,aud_g18
07:43:12  67  ,aud_g19
07:43:12  68  ,aud_g20
07:43:12  69  ,aud_g21
07:43:12  70  ,aud_g22
07:43:12  71  ,aud_g23
07:43:12  72  ,aud_g24
07:43:12  73  ,aud_g25
07:43:12  74  ,aud_g26
07:43:12  75  ,aud_g27
07:43:12  76  ,aud_g28
07:43:12  77  ,aud_g29
07:43:12  78  ,aud_g30
07:43:12  79  ,aud_g31
07:43:12  80  ,aud_g32
07:43:12  81  ,aud_g33
07:43:12  82  ,aud_g34
07:43:12  83  ,aud_g35
07:43:12  84  ,aud_g36
07:43:12  85  ,aud_g37
07:43:12  86  ,aud_g38
07:43:12  87  ,aud_g39
07:43:12  88  ,aud_g40
07:43:12  89  ,aud_g41
07:43:12  90  ,gbp_g00
07:43:12  91  ,gbp_g01
07:43:12  92  ,gbp_g02
07:43:12  93  ,gbp_g03
07:43:12  94  ,gbp_g04
07:43:12  95  ,gbp_g05
07:43:12  96  ,gbp_g06
07:43:12  97  ,gbp_g07
07:43:12  98  ,gbp_g08
07:43:12  99  ,gbp_g09
07:43:12 100  ,gbp_g10
07:43:12 101  ,gbp_g11
07:43:12 102  ,gbp_g12
07:43:12 103  ,gbp_g13
07:43:12 104  ,gbp_g14
07:43:12 105  ,gbp_g15
07:43:12 106  ,gbp_g16
07:43:12 107  ,gbp_g17
07:43:12 108  ,gbp_g18
07:43:12 109  ,gbp_g19
07:43:12 110  ,gbp_g20
07:43:12 111  ,gbp_g21
07:43:12 112  ,gbp_g22
07:43:12 113  ,gbp_g23
07:43:12 114  ,gbp_g24
07:43:12 115  ,gbp_g25
07:43:12 116  ,gbp_g26
07:43:12 117  ,gbp_g27
07:43:12 118  ,gbp_g28
07:43:12 119  ,gbp_g29
07:43:12 120  ,gbp_g30
07:43:12 121  ,gbp_g31
07:43:12 122  ,gbp_g32
07:43:12 123  ,gbp_g33
07:43:12 124  ,gbp_g34
07:43:12 125  ,gbp_g35
07:43:12 126  ,gbp_g36
07:43:12 127  ,gbp_g37
07:43:12 128  ,gbp_g38
07:43:12 129  ,gbp_g39
07:43:12 130  ,gbp_g40
07:43:12 131  ,gbp_g41
07:43:12 132  ,jpy_g00
07:43:12 133  ,jpy_g01
07:43:12 134  ,jpy_g02
07:43:12 135  ,jpy_g03
07:43:12 136  ,jpy_g04
07:43:12 137  ,jpy_g05
07:43:12 138  ,jpy_g06
07:43:12 139  ,jpy_g07
07:43:12 140  ,jpy_g08
07:43:12 141  ,jpy_g09
07:43:12 142  ,jpy_g10
07:43:12 143  ,jpy_g11
07:43:12 144  ,jpy_g12
07:43:12 145  ,jpy_g13
07:43:12 146  ,jpy_g14
07:43:12 147  ,jpy_g15
07:43:12 148  ,jpy_g16
07:43:12 149  ,jpy_g17
07:43:12 150  ,jpy_g18
07:43:12 151  ,jpy_g19
07:43:12 152  ,jpy_g20
07:43:12 153  ,jpy_g21
07:43:12 154  ,jpy_g22
07:43:12 155  ,jpy_g23
07:43:12 156  ,jpy_g24
07:43:12 157  ,jpy_g25
07:43:12 158  ,jpy_g26
07:43:12 159  ,jpy_g27
07:43:12 160  ,jpy_g28
07:43:12 161  ,jpy_g29
07:43:12 162  ,jpy_g30
07:43:12 163  ,jpy_g31
07:43:12 164  ,jpy_g32
07:43:12 165  ,jpy_g33
07:43:12 166  ,jpy_g34
07:43:12 167  ,jpy_g35
07:43:12 168  ,jpy_g36
07:43:12 169  ,jpy_g37
07:43:12 170  ,jpy_g38
07:43:12 171  ,jpy_g39
07:43:12 172  ,jpy_g40
07:43:12 173  ,jpy_g41
07:43:12 174  ,cad_g00
07:43:12 175  ,cad_g01
07:43:12 176  ,cad_g02
07:43:12 177  ,cad_g03
07:43:12 178  ,cad_g04
07:43:12 179  ,cad_g05
07:43:12 180  ,cad_g06
07:43:12 181  ,cad_g07
07:43:12 182  ,cad_g08
07:43:12 183  ,cad_g09
07:43:12 184  ,cad_g10
07:43:12 185  ,cad_g11
07:43:12 186  ,cad_g12
07:43:12 187  ,cad_g13
07:43:12 188  ,cad_g14
07:43:12 189  ,cad_g15
07:43:12 190  ,cad_g16
07:43:12 191  ,cad_g17
07:43:12 192  ,cad_g18
07:43:12 193  ,cad_g19
07:43:12 194  ,cad_g20
07:43:12 195  ,cad_g21
07:43:12 196  ,cad_g22
07:43:12 197  ,cad_g23
07:43:12 198  ,cad_g24
07:43:12 199  ,cad_g25
07:43:12 200  ,cad_g26
07:43:12 201  ,cad_g27
07:43:12 202  ,cad_g28
07:43:12 203  ,cad_g29
07:43:12 204  ,cad_g30
07:43:12 205  ,cad_g31
07:43:12 206  ,cad_g32
07:43:12 207  ,cad_g33
07:43:12 208  ,cad_g34
07:43:12 209  ,cad_g35
07:43:12 210  ,cad_g36
07:43:12 211  ,cad_g37
07:43:12 212  ,cad_g38
07:43:12 213  ,cad_g39
07:43:12 214  ,cad_g40
07:43:12 215  ,cad_g41
07:43:12 216  ,chf_g00
07:43:12 217  ,chf_g01
07:43:12 218  ,chf_g02
07:43:12 219  ,chf_g03
07:43:12 220  ,chf_g04
07:43:12 221  ,chf_g05
07:43:12 222  ,chf_g06
07:43:12 223  ,chf_g07
07:43:12 224  ,chf_g08
07:43:12 225  ,chf_g09
07:43:12 226  ,chf_g10
07:43:12 227  ,chf_g11
07:43:12 228  ,chf_g12
07:43:12 229  ,chf_g13
07:43:12 230  ,chf_g14
07:43:12 231  ,chf_g15
07:43:12 232  ,chf_g16
07:43:12 233  ,chf_g17
07:43:12 234  ,chf_g18
07:43:12 235  ,chf_g19
07:43:12 236  ,chf_g20
07:43:12 237  ,chf_g21
07:43:12 238  ,chf_g22
07:43:12 239  ,chf_g23
07:43:12 240  ,chf_g24
07:43:12 241  ,chf_g25
07:43:12 242  ,chf_g26
07:43:12 243  ,chf_g27
07:43:12 244  ,chf_g28
07:43:12 245  ,chf_g29
07:43:12 246  ,chf_g30
07:43:12 247  ,chf_g31
07:43:12 248  ,chf_g32
07:43:12 249  ,chf_g33
07:43:12 250  ,chf_g34
07:43:12 251  ,chf_g35
07:43:12 252  ,chf_g36
07:43:12 253  ,chf_g37
07:43:12 254  ,chf_g38
07:43:12 255  ,chf_g39
07:43:12 256  ,chf_g40
07:43:12 257  ,chf_g41
07:43:12 258  FROM aud_ms6 m
07:43:12 259  WHERE gatt IN('nup','up')
07:43:12 260  AND 1+m.ydate < '&1'||' '||'&2'
07:43:12 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2010-12-29'||' '||'07:30:00'

View created.

Elapsed: 00:00:00.12
07:43:13 SQL> 
07:43:13 SQL> -- rpt
07:43:13 SQL> 
07:43:13 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt
07:43:13   2  
07:43:13 SQL> SELECT MAX(prdate) FROM bme
07:43:13   2  
07:43:13 SQL> -- Now build model from bme and score sme
07:43:13 SQL> @score1.sql
07:43:13 SQL> -- score1.sql
07:43:13 SQL> 
07:43:13 SQL> -- Does the 1st SVM score
07:43:13 SQL> 
07:43:13 SQL> -- Fill up svmc_apply_prep
07:43:13 SQL> @score.sql
07:43:13 SQL> --
07:43:13 SQL> -- score.sql
07:43:13 SQL> --
07:43:13 SQL> 
07:43:13 SQL> -- usage: score.sql
07:43:13 SQL> 
07:43:13 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
07:43:13 SQL> 
07:43:13 SQL> DEFINE target	= 'gatt'
07:43:13 SQL> DEFINE model_name = 'forex14'
07:43:13 SQL> DEFINE bldtable	= 'bme'
07:43:13 SQL> DEFINE scoretable = 'sme'
07:43:13 SQL> DEFINE case_id	= 'prdate'
07:43:13 SQL> 
07:43:13 SQL> -- Define a variable to help me exclude some columns from some data mining calls
07:43:13 SQL> DEFINE exclude1 = "'&target','&case_id'"
07:43:13 SQL> 
07:43:13 SQL> -- Builds an SVM model using pl/sql.
07:43:13 SQL> 
07:43:13 SQL> -----------------------------------------------------------------------
07:43:13 SQL> --			    BUILD THE MODEL
07:43:13 SQL> -----------------------------------------------------------------------
07:43:13 SQL> 
07:43:13 SQL> -- Cleanup old build data preparation objects for repeat runs
07:43:13 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.01
07:43:13 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
07:43:13 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.00
07:43:13 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.00
07:43:13 SQL> 
07:43:13 SQL> 
07:43:13 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
07:43:13 SQL> --
07:43:13 SQL> -- DROP	TABLE svmc_settings ;
07:43:13 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
07:43:13 SQL> -- DELETE svmc_settings;
07:43:13 SQL> 
07:43:13 SQL> -- The default classification algorithm is Naive Bayes. So override
07:43:13 SQL> -- this choice to SVM using a settings table.
07:43:13 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
07:43:13 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
07:43:13 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
07:43:13 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
07:43:13 SQL> -- models.
07:43:13 SQL> --
07:43:13 SQL> 
07:43:13 SQL> -- Do this once and then comment it out.
07:43:13 SQL> -- That makes script go faster.
07:43:13 SQL> -- BEGIN
07:43:13 SQL> -- -- Populate settings table
07:43:13 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:43:13 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
07:43:13 SQL> --
07:43:13 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:43:13 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
07:43:13 SQL> --
07:43:13 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:43:13 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
07:43:13 SQL> --   COMMIT;
07:43:13 SQL> -- END;
07:43:13 SQL> -- /
07:43:13 SQL> 
07:43:13 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
07:43:13 SQL> 
07:43:13 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
07:43:13   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:43:13   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
07:43:13 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
07:43:13   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:43:13   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
07:43:13 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
07:43:13   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:43:13   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
07:43:13 SQL> 
07:43:13 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
07:43:13   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:43:13   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
07:43:13 SQL> 
07:43:13 SQL> --------------------------------
07:43:13 SQL> -- PREPARE BUILD (TRAINING) DATA
07:43:13 SQL> --
07:43:13 SQL> 
07:43:13 SQL> -- 1. Missing Value treatment for all Predictors and
07:43:13 SQL> -- 2. Outlier Treatment and
07:43:13 SQL> -- 3. Normalization are performed below.
07:43:13 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
07:43:13 SQL> --    normalized here.
07:43:13 SQL> 
07:43:13 SQL> BEGIN
07:43:13   2  	-- Perform missing value treatment for all predictors
07:43:13   3  	-- create miss tables
07:43:13   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
07:43:13   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
07:43:13   6  
07:43:13   7  	-- populate miss tables
07:43:13   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
07:43:13   9  	  miss_table_name => 'svmc_miss_num',
07:43:13  10  	  data_table_name => '&bldtable',
07:43:13  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:43:13  12  
07:43:13  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
07:43:13  14  	  miss_table_name => 'svmc_miss_cat',
07:43:13  15  	  data_table_name => '&bldtable',
07:43:13  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:43:13  17  
07:43:13  18  	-- xform input data to replace missing values
07:43:13  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:43:13  20  	  miss_table_name => 'svmc_miss_num',
07:43:13  21  	  data_table_name => '&bldtable',
07:43:13  22  	  xform_view_name => 'xformed_build_miss_num');
07:43:13  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:43:13  24  	  miss_table_name => 'svmc_miss_cat',
07:43:13  25  	  data_table_name => '&bldtable',
07:43:13  26  	  xform_view_name => 'xformed_build_miss_cat');
07:43:13  27  
07:43:13  28  	-- Perform outlier treatment.
07:43:13  29  	-- create clip table
07:43:13  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
07:43:13  31  
07:43:13  32  	-- populate clip table
07:43:13  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
07:43:13  34  	  clip_table_name => 'svmc_clip',
07:43:13  35  	  data_table_name => '&bldtable',
07:43:13  36  	  tail_frac	  => 0.025,
07:43:13  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:43:13  38  
07:43:13  39  	-- xform input data to winsorized data
07:43:13  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
07:43:13  41  	  clip_table_name => 'svmc_clip',
07:43:13  42  	  data_table_name => '&bldtable',
07:43:13  43  	  xform_view_name => 'svmc_winsor');
07:43:13  44  
07:43:13  45  	-- create normalization table
07:43:13  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
07:43:13  47  
07:43:13  48  	-- populate normalization table based on winsorized data
07:43:13  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
07:43:13  50  	  norm_table_name => 'svmc_norm',
07:43:13  51  	  data_table_name => 'svmc_winsor',
07:43:13  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:43:13  53  
07:43:13  54  	-- normalize the original data
07:43:13  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:43:13  56  	  norm_table_name => 'svmc_norm',
07:43:13  57  	  data_table_name => '&bldtable',
07:43:13  58  	  xform_view_name => 'svmc_build_prep');
07:43:13  59  END;
07:43:13  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:17.85
07:43:31 SQL> 
07:43:31 SQL> ---------------------
07:43:31 SQL> -- CREATE A NEW MODEL
07:43:31 SQL> --
07:43:31 SQL> -- Cleanup old model with the same name for repeat runs
07:43:31 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
07:43:31   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:43:31   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.02
07:43:32 SQL> 
07:43:32 SQL> -- Build a new SVM Model
07:43:32 SQL> BEGIN
07:43:32   2  	DBMS_DATA_MINING.CREATE_MODEL(
07:43:32   3  	  model_name	      => '&model_name',
07:43:32   4  	  mining_function     => dbms_data_mining.classification,
07:43:32   5  	  data_table_name     => 'svmc_build_prep',
07:43:32   6  	  case_id_column_name => '&case_id',
07:43:32   7  	  target_column_name  => '&target',
07:43:32   8  	  settings_table_name => 'svmc_settings');
07:43:32   9  END;
07:43:32  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:28.09
07:44:00 SQL> 
07:44:00 SQL> -----------------------------------------------------------------------
07:44:00 SQL> --			       APPLY/score THE MODEL
07:44:00 SQL> -----------------------------------------------------------------------
07:44:00 SQL> 
07:44:00 SQL> -- Cleanup old scoring data preparation objects for repeat runs
07:44:00 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
07:44:00   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:00   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
07:44:00 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
07:44:00   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:00   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
07:44:00 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
07:44:00   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:00   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
07:44:00 SQL> -----------------------
07:44:00 SQL> -- PREPARE SCORING DATA
07:44:00 SQL> --
07:44:00 SQL> -- If the data for model creation has been prepared, then the data
07:44:00 SQL> -- to be scored using the model must be prepared in the same manner
07:44:00 SQL> -- in order to obtain meaningful results.
07:44:00 SQL> --
07:44:00 SQL> -- 1. Missing Value treatment for all Predictors and
07:44:00 SQL> -- 2. Normalization
07:44:00 SQL> -- No outlier treatment will be performed during test and apply. The
07:44:00 SQL> -- normalization step is sufficient, since the normalization parameters
07:44:00 SQL> -- already capture the effects of outlier treatment done with build data.
07:44:00 SQL> --
07:44:00 SQL> BEGIN
07:44:00   2  	-- Xform Test data to replace missing values
07:44:00   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:44:00   4  	  miss_table_name => 'svmc_miss_num',
07:44:00   5  	  data_table_name => '&scoretable',
07:44:00   6  	  xform_view_name => 'xformed_apply_miss_num');
07:44:00   7  
07:44:00   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:44:00   9  	  miss_table_name => 'svmc_miss_cat',
07:44:00  10  	  data_table_name => '&scoretable',
07:44:00  11  	  xform_view_name => 'xformed_apply_miss_cat');
07:44:00  12  
07:44:00  13  	-- Normalize the data to be scored
07:44:00  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:44:00  15  	  norm_table_name => 'svmc_norm',
07:44:00  16  	  data_table_name => '&scoretable',
07:44:00  17  	  xform_view_name => 'svmc_apply_prep');
07:44:00  18  END;
07:44:00  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.24
07:44:01 SQL> 
07:44:01 SQL> -- Use same model_name used in score.sql
07:44:01 SQL> DEFINE model_name = 'forex14'
07:44:01 SQL> 
07:44:01 SQL> -- CREATE TABLE fxscores6 (prdate VARCHAR2(30),score NUMBER,rundate DATE,pair VARCHAR2(8),ydate DATE);
07:44:01 SQL> 
07:44:01 SQL> DELETE fxscores6 WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.03
07:44:01 SQL> 
07:44:01 SQL> INSERT INTO fxscores6 (prdate,score,rundate,pair,ydate)
07:44:01   2  SELECT
07:44:01   3  prdate
07:44:01   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
07:44:01   5  ,sysdate
07:44:01   6  ,SUBSTR(prdate,1,3)pair
07:44:01   7  ,SUBSTR(prdate,4,19)ydate
07:44:01   8  FROM svmc_apply_prep
07:44:01   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.17
07:44:01 SQL> @aud_score1day_gattn.sql	2010-12-29 07:20:00
07:44:01 SQL> --
07:44:01 SQL> -- aud_score1day_gattn.sql
07:44:01 SQL> --
07:44:01 SQL> 
07:44:01 SQL> CREATE OR REPLACE VIEW sme AS
07:44:01   2  SELECT
07:44:01   3  'aud'||m.ydate prdate
07:44:01   4  ,NULL gattn
07:44:01   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
07:44:01   6  ,eur_g00
07:44:01   7  ,eur_g01
07:44:01   8  ,eur_g02
07:44:01   9  ,eur_g03
07:44:01  10  ,eur_g04
07:44:01  11  ,eur_g05
07:44:01  12  ,eur_g06
07:44:01  13  ,eur_g07
07:44:01  14  ,eur_g08
07:44:01  15  ,eur_g09
07:44:01  16  ,eur_g10
07:44:01  17  ,eur_g11
07:44:01  18  ,eur_g12
07:44:01  19  ,eur_g13
07:44:01  20  ,eur_g14
07:44:01  21  ,eur_g15
07:44:01  22  ,eur_g16
07:44:01  23  ,eur_g17
07:44:01  24  ,eur_g18
07:44:01  25  ,eur_g19
07:44:01  26  ,eur_g20
07:44:01  27  ,eur_g21
07:44:01  28  ,eur_g22
07:44:01  29  ,eur_g23
07:44:01  30  ,eur_g24
07:44:01  31  ,eur_g25
07:44:01  32  ,eur_g26
07:44:01  33  ,eur_g27
07:44:01  34  ,eur_g28
07:44:01  35  ,eur_g29
07:44:01  36  ,eur_g30
07:44:01  37  ,eur_g31
07:44:01  38  ,eur_g32
07:44:01  39  ,eur_g33
07:44:01  40  ,eur_g34
07:44:01  41  ,eur_g35
07:44:01  42  ,eur_g36
07:44:01  43  ,eur_g37
07:44:01  44  ,eur_g38
07:44:01  45  ,eur_g39
07:44:01  46  ,eur_g40
07:44:01  47  ,eur_g41
07:44:01  48  ,aud_g00
07:44:01  49  ,aud_g01
07:44:01  50  ,aud_g02
07:44:01  51  ,aud_g03
07:44:01  52  ,aud_g04
07:44:01  53  ,aud_g05
07:44:01  54  ,aud_g06
07:44:01  55  ,aud_g07
07:44:01  56  ,aud_g08
07:44:01  57  ,aud_g09
07:44:01  58  ,aud_g10
07:44:01  59  ,aud_g11
07:44:01  60  ,aud_g12
07:44:01  61  ,aud_g13
07:44:01  62  ,aud_g14
07:44:01  63  ,aud_g15
07:44:01  64  ,aud_g16
07:44:01  65  ,aud_g17
07:44:01  66  ,aud_g18
07:44:01  67  ,aud_g19
07:44:01  68  ,aud_g20
07:44:01  69  ,aud_g21
07:44:01  70  ,aud_g22
07:44:01  71  ,aud_g23
07:44:01  72  ,aud_g24
07:44:01  73  ,aud_g25
07:44:01  74  ,aud_g26
07:44:01  75  ,aud_g27
07:44:01  76  ,aud_g28
07:44:01  77  ,aud_g29
07:44:01  78  ,aud_g30
07:44:01  79  ,aud_g31
07:44:01  80  ,aud_g32
07:44:01  81  ,aud_g33
07:44:01  82  ,aud_g34
07:44:01  83  ,aud_g35
07:44:01  84  ,aud_g36
07:44:01  85  ,aud_g37
07:44:01  86  ,aud_g38
07:44:01  87  ,aud_g39
07:44:01  88  ,aud_g40
07:44:01  89  ,aud_g41
07:44:01  90  ,gbp_g00
07:44:01  91  ,gbp_g01
07:44:01  92  ,gbp_g02
07:44:01  93  ,gbp_g03
07:44:01  94  ,gbp_g04
07:44:01  95  ,gbp_g05
07:44:01  96  ,gbp_g06
07:44:01  97  ,gbp_g07
07:44:01  98  ,gbp_g08
07:44:01  99  ,gbp_g09
07:44:01 100  ,gbp_g10
07:44:01 101  ,gbp_g11
07:44:01 102  ,gbp_g12
07:44:01 103  ,gbp_g13
07:44:01 104  ,gbp_g14
07:44:01 105  ,gbp_g15
07:44:01 106  ,gbp_g16
07:44:01 107  ,gbp_g17
07:44:01 108  ,gbp_g18
07:44:01 109  ,gbp_g19
07:44:01 110  ,gbp_g20
07:44:01 111  ,gbp_g21
07:44:01 112  ,gbp_g22
07:44:01 113  ,gbp_g23
07:44:01 114  ,gbp_g24
07:44:01 115  ,gbp_g25
07:44:01 116  ,gbp_g26
07:44:01 117  ,gbp_g27
07:44:01 118  ,gbp_g28
07:44:01 119  ,gbp_g29
07:44:01 120  ,gbp_g30
07:44:01 121  ,gbp_g31
07:44:01 122  ,gbp_g32
07:44:01 123  ,gbp_g33
07:44:01 124  ,gbp_g34
07:44:01 125  ,gbp_g35
07:44:01 126  ,gbp_g36
07:44:01 127  ,gbp_g37
07:44:01 128  ,gbp_g38
07:44:01 129  ,gbp_g39
07:44:01 130  ,gbp_g40
07:44:01 131  ,gbp_g41
07:44:01 132  ,jpy_g00
07:44:01 133  ,jpy_g01
07:44:01 134  ,jpy_g02
07:44:01 135  ,jpy_g03
07:44:01 136  ,jpy_g04
07:44:01 137  ,jpy_g05
07:44:01 138  ,jpy_g06
07:44:01 139  ,jpy_g07
07:44:01 140  ,jpy_g08
07:44:01 141  ,jpy_g09
07:44:01 142  ,jpy_g10
07:44:01 143  ,jpy_g11
07:44:01 144  ,jpy_g12
07:44:01 145  ,jpy_g13
07:44:01 146  ,jpy_g14
07:44:01 147  ,jpy_g15
07:44:01 148  ,jpy_g16
07:44:01 149  ,jpy_g17
07:44:01 150  ,jpy_g18
07:44:01 151  ,jpy_g19
07:44:01 152  ,jpy_g20
07:44:01 153  ,jpy_g21
07:44:01 154  ,jpy_g22
07:44:01 155  ,jpy_g23
07:44:01 156  ,jpy_g24
07:44:01 157  ,jpy_g25
07:44:01 158  ,jpy_g26
07:44:01 159  ,jpy_g27
07:44:01 160  ,jpy_g28
07:44:01 161  ,jpy_g29
07:44:01 162  ,jpy_g30
07:44:01 163  ,jpy_g31
07:44:01 164  ,jpy_g32
07:44:01 165  ,jpy_g33
07:44:01 166  ,jpy_g34
07:44:01 167  ,jpy_g35
07:44:01 168  ,jpy_g36
07:44:01 169  ,jpy_g37
07:44:01 170  ,jpy_g38
07:44:01 171  ,jpy_g39
07:44:01 172  ,jpy_g40
07:44:01 173  ,jpy_g41
07:44:01 174  ,cad_g00
07:44:01 175  ,cad_g01
07:44:01 176  ,cad_g02
07:44:01 177  ,cad_g03
07:44:01 178  ,cad_g04
07:44:01 179  ,cad_g05
07:44:01 180  ,cad_g06
07:44:01 181  ,cad_g07
07:44:01 182  ,cad_g08
07:44:01 183  ,cad_g09
07:44:01 184  ,cad_g10
07:44:01 185  ,cad_g11
07:44:01 186  ,cad_g12
07:44:01 187  ,cad_g13
07:44:01 188  ,cad_g14
07:44:01 189  ,cad_g15
07:44:01 190  ,cad_g16
07:44:01 191  ,cad_g17
07:44:01 192  ,cad_g18
07:44:01 193  ,cad_g19
07:44:01 194  ,cad_g20
07:44:01 195  ,cad_g21
07:44:01 196  ,cad_g22
07:44:01 197  ,cad_g23
07:44:01 198  ,cad_g24
07:44:01 199  ,cad_g25
07:44:01 200  ,cad_g26
07:44:01 201  ,cad_g27
07:44:01 202  ,cad_g28
07:44:01 203  ,cad_g29
07:44:01 204  ,cad_g30
07:44:01 205  ,cad_g31
07:44:01 206  ,cad_g32
07:44:01 207  ,cad_g33
07:44:01 208  ,cad_g34
07:44:01 209  ,cad_g35
07:44:01 210  ,cad_g36
07:44:01 211  ,cad_g37
07:44:01 212  ,cad_g38
07:44:01 213  ,cad_g39
07:44:01 214  ,cad_g40
07:44:01 215  ,cad_g41
07:44:01 216  ,chf_g00
07:44:01 217  ,chf_g01
07:44:01 218  ,chf_g02
07:44:01 219  ,chf_g03
07:44:01 220  ,chf_g04
07:44:01 221  ,chf_g05
07:44:01 222  ,chf_g06
07:44:01 223  ,chf_g07
07:44:01 224  ,chf_g08
07:44:01 225  ,chf_g09
07:44:01 226  ,chf_g10
07:44:01 227  ,chf_g11
07:44:01 228  ,chf_g12
07:44:01 229  ,chf_g13
07:44:01 230  ,chf_g14
07:44:01 231  ,chf_g15
07:44:01 232  ,chf_g16
07:44:01 233  ,chf_g17
07:44:01 234  ,chf_g18
07:44:01 235  ,chf_g19
07:44:01 236  ,chf_g20
07:44:01 237  ,chf_g21
07:44:01 238  ,chf_g22
07:44:01 239  ,chf_g23
07:44:01 240  ,chf_g24
07:44:01 241  ,chf_g25
07:44:01 242  ,chf_g26
07:44:01 243  ,chf_g27
07:44:01 244  ,chf_g28
07:44:01 245  ,chf_g29
07:44:01 246  ,chf_g30
07:44:01 247  ,chf_g31
07:44:01 248  ,chf_g32
07:44:01 249  ,chf_g33
07:44:01 250  ,chf_g34
07:44:01 251  ,chf_g35
07:44:01 252  ,chf_g36
07:44:01 253  ,chf_g37
07:44:01 254  ,chf_g38
07:44:01 255  ,chf_g39
07:44:01 256  ,chf_g40
07:44:01 257  ,chf_g41
07:44:01 258  FROM aud_ms6 m
07:44:01 259  WHERE m.ydate = '&1'||' '||'&2'
07:44:01 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2010-12-29'||' '||'07:20:00'

View created.

Elapsed: 00:00:00.12
07:44:02 SQL> 
07:44:02 SQL> -- rpt
07:44:02 SQL> -- We should see just 1 row:
07:44:02 SQL> 
07:44:02 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
07:44:02 SQL> 
07:44:02 SQL> -- Build the model:
07:44:02 SQL> CREATE OR REPLACE VIEW bme AS
07:44:02   2  SELECT
07:44:02   3  'aud'||m.ydate prdate
07:44:02   4  ,gattn
07:44:02   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
07:44:02   6  ,eur_g00
07:44:02   7  ,eur_g01
07:44:02   8  ,eur_g02
07:44:02   9  ,eur_g03
07:44:02  10  ,eur_g04
07:44:02  11  ,eur_g05
07:44:02  12  ,eur_g06
07:44:02  13  ,eur_g07
07:44:02  14  ,eur_g08
07:44:02  15  ,eur_g09
07:44:02  16  ,eur_g10
07:44:02  17  ,eur_g11
07:44:02  18  ,eur_g12
07:44:02  19  ,eur_g13
07:44:02  20  ,eur_g14
07:44:02  21  ,eur_g15
07:44:02  22  ,eur_g16
07:44:02  23  ,eur_g17
07:44:02  24  ,eur_g18
07:44:02  25  ,eur_g19
07:44:02  26  ,eur_g20
07:44:02  27  ,eur_g21
07:44:02  28  ,eur_g22
07:44:02  29  ,eur_g23
07:44:02  30  ,eur_g24
07:44:02  31  ,eur_g25
07:44:02  32  ,eur_g26
07:44:02  33  ,eur_g27
07:44:02  34  ,eur_g28
07:44:02  35  ,eur_g29
07:44:02  36  ,eur_g30
07:44:02  37  ,eur_g31
07:44:02  38  ,eur_g32
07:44:02  39  ,eur_g33
07:44:02  40  ,eur_g34
07:44:02  41  ,eur_g35
07:44:02  42  ,eur_g36
07:44:02  43  ,eur_g37
07:44:02  44  ,eur_g38
07:44:02  45  ,eur_g39
07:44:02  46  ,eur_g40
07:44:02  47  ,eur_g41
07:44:02  48  ,aud_g00
07:44:02  49  ,aud_g01
07:44:02  50  ,aud_g02
07:44:02  51  ,aud_g03
07:44:02  52  ,aud_g04
07:44:02  53  ,aud_g05
07:44:02  54  ,aud_g06
07:44:02  55  ,aud_g07
07:44:02  56  ,aud_g08
07:44:02  57  ,aud_g09
07:44:02  58  ,aud_g10
07:44:02  59  ,aud_g11
07:44:02  60  ,aud_g12
07:44:02  61  ,aud_g13
07:44:02  62  ,aud_g14
07:44:02  63  ,aud_g15
07:44:02  64  ,aud_g16
07:44:02  65  ,aud_g17
07:44:02  66  ,aud_g18
07:44:02  67  ,aud_g19
07:44:02  68  ,aud_g20
07:44:02  69  ,aud_g21
07:44:02  70  ,aud_g22
07:44:02  71  ,aud_g23
07:44:02  72  ,aud_g24
07:44:02  73  ,aud_g25
07:44:02  74  ,aud_g26
07:44:02  75  ,aud_g27
07:44:02  76  ,aud_g28
07:44:02  77  ,aud_g29
07:44:02  78  ,aud_g30
07:44:02  79  ,aud_g31
07:44:02  80  ,aud_g32
07:44:02  81  ,aud_g33
07:44:02  82  ,aud_g34
07:44:02  83  ,aud_g35
07:44:02  84  ,aud_g36
07:44:02  85  ,aud_g37
07:44:02  86  ,aud_g38
07:44:02  87  ,aud_g39
07:44:02  88  ,aud_g40
07:44:02  89  ,aud_g41
07:44:02  90  ,gbp_g00
07:44:02  91  ,gbp_g01
07:44:02  92  ,gbp_g02
07:44:02  93  ,gbp_g03
07:44:02  94  ,gbp_g04
07:44:02  95  ,gbp_g05
07:44:02  96  ,gbp_g06
07:44:02  97  ,gbp_g07
07:44:02  98  ,gbp_g08
07:44:02  99  ,gbp_g09
07:44:02 100  ,gbp_g10
07:44:02 101  ,gbp_g11
07:44:02 102  ,gbp_g12
07:44:02 103  ,gbp_g13
07:44:02 104  ,gbp_g14
07:44:02 105  ,gbp_g15
07:44:02 106  ,gbp_g16
07:44:02 107  ,gbp_g17
07:44:02 108  ,gbp_g18
07:44:02 109  ,gbp_g19
07:44:02 110  ,gbp_g20
07:44:02 111  ,gbp_g21
07:44:02 112  ,gbp_g22
07:44:02 113  ,gbp_g23
07:44:02 114  ,gbp_g24
07:44:02 115  ,gbp_g25
07:44:02 116  ,gbp_g26
07:44:02 117  ,gbp_g27
07:44:02 118  ,gbp_g28
07:44:02 119  ,gbp_g29
07:44:02 120  ,gbp_g30
07:44:02 121  ,gbp_g31
07:44:02 122  ,gbp_g32
07:44:02 123  ,gbp_g33
07:44:02 124  ,gbp_g34
07:44:02 125  ,gbp_g35
07:44:02 126  ,gbp_g36
07:44:02 127  ,gbp_g37
07:44:02 128  ,gbp_g38
07:44:02 129  ,gbp_g39
07:44:02 130  ,gbp_g40
07:44:02 131  ,gbp_g41
07:44:02 132  ,jpy_g00
07:44:02 133  ,jpy_g01
07:44:02 134  ,jpy_g02
07:44:02 135  ,jpy_g03
07:44:02 136  ,jpy_g04
07:44:02 137  ,jpy_g05
07:44:02 138  ,jpy_g06
07:44:02 139  ,jpy_g07
07:44:02 140  ,jpy_g08
07:44:02 141  ,jpy_g09
07:44:02 142  ,jpy_g10
07:44:02 143  ,jpy_g11
07:44:02 144  ,jpy_g12
07:44:02 145  ,jpy_g13
07:44:02 146  ,jpy_g14
07:44:02 147  ,jpy_g15
07:44:02 148  ,jpy_g16
07:44:02 149  ,jpy_g17
07:44:02 150  ,jpy_g18
07:44:02 151  ,jpy_g19
07:44:02 152  ,jpy_g20
07:44:02 153  ,jpy_g21
07:44:02 154  ,jpy_g22
07:44:02 155  ,jpy_g23
07:44:02 156  ,jpy_g24
07:44:02 157  ,jpy_g25
07:44:02 158  ,jpy_g26
07:44:02 159  ,jpy_g27
07:44:02 160  ,jpy_g28
07:44:02 161  ,jpy_g29
07:44:02 162  ,jpy_g30
07:44:02 163  ,jpy_g31
07:44:02 164  ,jpy_g32
07:44:02 165  ,jpy_g33
07:44:02 166  ,jpy_g34
07:44:02 167  ,jpy_g35
07:44:02 168  ,jpy_g36
07:44:02 169  ,jpy_g37
07:44:02 170  ,jpy_g38
07:44:02 171  ,jpy_g39
07:44:02 172  ,jpy_g40
07:44:02 173  ,jpy_g41
07:44:02 174  ,cad_g00
07:44:02 175  ,cad_g01
07:44:02 176  ,cad_g02
07:44:02 177  ,cad_g03
07:44:02 178  ,cad_g04
07:44:02 179  ,cad_g05
07:44:02 180  ,cad_g06
07:44:02 181  ,cad_g07
07:44:02 182  ,cad_g08
07:44:02 183  ,cad_g09
07:44:02 184  ,cad_g10
07:44:02 185  ,cad_g11
07:44:02 186  ,cad_g12
07:44:02 187  ,cad_g13
07:44:02 188  ,cad_g14
07:44:02 189  ,cad_g15
07:44:02 190  ,cad_g16
07:44:02 191  ,cad_g17
07:44:02 192  ,cad_g18
07:44:02 193  ,cad_g19
07:44:02 194  ,cad_g20
07:44:02 195  ,cad_g21
07:44:02 196  ,cad_g22
07:44:02 197  ,cad_g23
07:44:02 198  ,cad_g24
07:44:02 199  ,cad_g25
07:44:02 200  ,cad_g26
07:44:02 201  ,cad_g27
07:44:02 202  ,cad_g28
07:44:02 203  ,cad_g29
07:44:02 204  ,cad_g30
07:44:02 205  ,cad_g31
07:44:02 206  ,cad_g32
07:44:02 207  ,cad_g33
07:44:02 208  ,cad_g34
07:44:02 209  ,cad_g35
07:44:02 210  ,cad_g36
07:44:02 211  ,cad_g37
07:44:02 212  ,cad_g38
07:44:02 213  ,cad_g39
07:44:02 214  ,cad_g40
07:44:02 215  ,cad_g41
07:44:02 216  ,chf_g00
07:44:02 217  ,chf_g01
07:44:02 218  ,chf_g02
07:44:02 219  ,chf_g03
07:44:02 220  ,chf_g04
07:44:02 221  ,chf_g05
07:44:02 222  ,chf_g06
07:44:02 223  ,chf_g07
07:44:02 224  ,chf_g08
07:44:02 225  ,chf_g09
07:44:02 226  ,chf_g10
07:44:02 227  ,chf_g11
07:44:02 228  ,chf_g12
07:44:02 229  ,chf_g13
07:44:02 230  ,chf_g14
07:44:02 231  ,chf_g15
07:44:02 232  ,chf_g16
07:44:02 233  ,chf_g17
07:44:02 234  ,chf_g18
07:44:02 235  ,chf_g19
07:44:02 236  ,chf_g20
07:44:02 237  ,chf_g21
07:44:02 238  ,chf_g22
07:44:02 239  ,chf_g23
07:44:02 240  ,chf_g24
07:44:02 241  ,chf_g25
07:44:02 242  ,chf_g26
07:44:02 243  ,chf_g27
07:44:02 244  ,chf_g28
07:44:02 245  ,chf_g29
07:44:02 246  ,chf_g30
07:44:02 247  ,chf_g31
07:44:02 248  ,chf_g32
07:44:02 249  ,chf_g33
07:44:02 250  ,chf_g34
07:44:02 251  ,chf_g35
07:44:02 252  ,chf_g36
07:44:02 253  ,chf_g37
07:44:02 254  ,chf_g38
07:44:02 255  ,chf_g39
07:44:02 256  ,chf_g40
07:44:02 257  ,chf_g41
07:44:02 258  FROM aud_ms6 m
07:44:02 259  WHERE gattn IN('nup','up')
07:44:02 260  AND 1+m.ydate < '&1'||' '||'&2'
07:44:02 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2010-12-29'||' '||'07:20:00'

View created.

Elapsed: 00:00:00.14
07:44:02 SQL> 
07:44:02 SQL> -- rpt
07:44:02 SQL> 
07:44:02 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	    12776
up	     6322

Elapsed: 00:00:00.04
07:44:02 SQL> 
07:44:02 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
aud2010-12-28 07:15:00

Elapsed: 00:00:00.03
07:44:02 SQL> 
07:44:02 SQL> -- Now build model from bme and score sme
07:44:02 SQL> @score1gattn.sql
07:44:02 SQL> -- score1gattn.sql
07:44:02 SQL> 
07:44:02 SQL> -- Does the 1st SVM score
07:44:02 SQL> 
07:44:02 SQL> -- Fill up svmc_apply_prep
07:44:02 SQL> @score_gattn.sql
07:44:02 SQL> --
07:44:02 SQL> -- score_gattn.sql
07:44:02 SQL> --
07:44:02 SQL> 
07:44:02 SQL> -- usage: score_gattn.sql
07:44:02 SQL> 
07:44:02 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
07:44:02 SQL> 
07:44:02 SQL> DEFINE target	= 'gattn'
07:44:02 SQL> DEFINE model_name = 'forex14'
07:44:02 SQL> DEFINE bldtable	= 'bme'
07:44:02 SQL> DEFINE scoretable = 'sme'
07:44:02 SQL> DEFINE case_id	= 'prdate'
07:44:02 SQL> 
07:44:02 SQL> -- Define a variable to help me exclude some columns from some data mining calls
07:44:02 SQL> DEFINE exclude1 = "'&target','&case_id'"
07:44:02 SQL> 
07:44:02 SQL> -- Builds an SVM model using pl/sql.
07:44:02 SQL> 
07:44:02 SQL> -----------------------------------------------------------------------
07:44:02 SQL> --			    BUILD THE MODEL
07:44:02 SQL> -----------------------------------------------------------------------
07:44:02 SQL> 
07:44:02 SQL> -- Cleanup old build data preparation objects for repeat runs
07:44:02 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.00
07:44:02 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
07:44:02 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.00
07:44:02 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.02
07:44:02 SQL> 
07:44:02 SQL> 
07:44:02 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
07:44:02 SQL> --
07:44:02 SQL> -- DROP	TABLE svmc_settings ;
07:44:02 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
07:44:02 SQL> -- DELETE svmc_settings;
07:44:02 SQL> 
07:44:02 SQL> -- The default classification algorithm is Naive Bayes. So override
07:44:02 SQL> -- this choice to SVM using a settings table.
07:44:02 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
07:44:02 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
07:44:02 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
07:44:02 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
07:44:02 SQL> -- models.
07:44:02 SQL> --
07:44:02 SQL> 
07:44:02 SQL> -- Do this once and then comment it out.
07:44:02 SQL> -- That makes script go faster.
07:44:02 SQL> -- BEGIN
07:44:02 SQL> -- -- Populate settings table
07:44:02 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:44:02 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
07:44:02 SQL> --
07:44:02 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:44:02 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
07:44:02 SQL> --
07:44:02 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:44:02 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
07:44:02 SQL> --   COMMIT;
07:44:02 SQL> -- END;
07:44:02 SQL> -- /
07:44:02 SQL> 
07:44:02 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
07:44:02 SQL> 
07:44:02 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
07:44:02   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:02   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.22
07:44:02 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
07:44:02   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:02   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.13
07:44:02 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
07:44:02   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:02   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.12
07:44:02 SQL> 
07:44:02 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
07:44:02   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:02   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.11
07:44:02 SQL> 
07:44:02 SQL> --------------------------------
07:44:02 SQL> -- PREPARE BUILD (TRAINING) DATA
07:44:02 SQL> --
07:44:02 SQL> 
07:44:02 SQL> -- 1. Missing Value treatment for all Predictors and
07:44:02 SQL> -- 2. Outlier Treatment and
07:44:02 SQL> -- 3. Normalization are performed below.
07:44:02 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
07:44:02 SQL> --    normalized here.
07:44:02 SQL> 
07:44:02 SQL> BEGIN
07:44:02   2  	-- Perform missing value treatment for all predictors
07:44:02   3  	-- create miss tables
07:44:02   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
07:44:02   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
07:44:02   6  
07:44:02   7  	-- populate miss tables
07:44:02   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
07:44:02   9  	  miss_table_name => 'svmc_miss_num',
07:44:02  10  	  data_table_name => '&bldtable',
07:44:02  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:44:02  12  
07:44:02  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
07:44:02  14  	  miss_table_name => 'svmc_miss_cat',
07:44:02  15  	  data_table_name => '&bldtable',
07:44:02  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:44:02  17  
07:44:02  18  	-- xform input data to replace missing values
07:44:02  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:44:02  20  	  miss_table_name => 'svmc_miss_num',
07:44:02  21  	  data_table_name => '&bldtable',
07:44:02  22  	  xform_view_name => 'xformed_build_miss_num');
07:44:02  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:44:02  24  	  miss_table_name => 'svmc_miss_cat',
07:44:02  25  	  data_table_name => '&bldtable',
07:44:02  26  	  xform_view_name => 'xformed_build_miss_cat');
07:44:02  27  
07:44:02  28  	-- Perform outlier treatment.
07:44:02  29  	-- create clip table
07:44:02  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
07:44:02  31  
07:44:02  32  	-- populate clip table
07:44:02  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
07:44:02  34  	  clip_table_name => 'svmc_clip',
07:44:02  35  	  data_table_name => '&bldtable',
07:44:02  36  	  tail_frac	  => 0.025,
07:44:02  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:44:02  38  
07:44:02  39  	-- xform input data to winsorized data
07:44:02  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
07:44:02  41  	  clip_table_name => 'svmc_clip',
07:44:02  42  	  data_table_name => '&bldtable',
07:44:02  43  	  xform_view_name => 'svmc_winsor');
07:44:02  44  
07:44:02  45  	-- create normalization table
07:44:02  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
07:44:02  47  
07:44:02  48  	-- populate normalization table based on winsorized data
07:44:02  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
07:44:02  50  	  norm_table_name => 'svmc_norm',
07:44:02  51  	  data_table_name => 'svmc_winsor',
07:44:02  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:44:02  53  
07:44:02  54  	-- normalize the original data
07:44:02  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:44:02  56  	  norm_table_name => 'svmc_norm',
07:44:02  57  	  data_table_name => '&bldtable',
07:44:02  58  	  xform_view_name => 'svmc_build_prep');
07:44:02  59  END;
07:44:02  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:18.13
07:44:20 SQL> 
07:44:20 SQL> ---------------------
07:44:20 SQL> -- CREATE A NEW MODEL
07:44:20 SQL> --
07:44:20 SQL> -- Cleanup old model with the same name for repeat runs
07:44:20 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
07:44:20   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:20   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.85
07:44:21 SQL> 
07:44:21 SQL> -- Build a new SVM Model
07:44:21 SQL> BEGIN
07:44:21   2  	DBMS_DATA_MINING.CREATE_MODEL(
07:44:21   3  	  model_name	      => '&model_name',
07:44:21   4  	  mining_function     => dbms_data_mining.classification,
07:44:21   5  	  data_table_name     => 'svmc_build_prep',
07:44:21   6  	  case_id_column_name => '&case_id',
07:44:21   7  	  target_column_name  => '&target',
07:44:21   8  	  settings_table_name => 'svmc_settings');
07:44:21   9  END;
07:44:21  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:26.88
07:44:48 SQL> 
07:44:48 SQL> -----------------------------------------------------------------------
07:44:48 SQL> --			       APPLY/score THE MODEL
07:44:48 SQL> -----------------------------------------------------------------------
07:44:48 SQL> 
07:44:48 SQL> -- Cleanup old scoring data preparation objects for repeat runs
07:44:48 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
07:44:48   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:48   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
07:44:48 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
07:44:48   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:48   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
07:44:48 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
07:44:48   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:48   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.09
07:44:48 SQL> -----------------------
07:44:48 SQL> -- PREPARE SCORING DATA
07:44:48 SQL> --
07:44:48 SQL> -- If the data for model creation has been prepared, then the data
07:44:48 SQL> -- to be scored using the model must be prepared in the same manner
07:44:48 SQL> -- in order to obtain meaningful results.
07:44:48 SQL> --
07:44:48 SQL> -- 1. Missing Value treatment for all Predictors and
07:44:48 SQL> -- 2. Normalization
07:44:48 SQL> -- No outlier treatment will be performed during test and apply. The
07:44:48 SQL> -- normalization step is sufficient, since the normalization parameters
07:44:48 SQL> -- already capture the effects of outlier treatment done with build data.
07:44:48 SQL> --
07:44:48 SQL> BEGIN
07:44:48   2  	-- Xform Test data to replace missing values
07:44:48   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:44:48   4  	  miss_table_name => 'svmc_miss_num',
07:44:48   5  	  data_table_name => '&scoretable',
07:44:48   6  	  xform_view_name => 'xformed_apply_miss_num');
07:44:48   7  
07:44:48   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:44:48   9  	  miss_table_name => 'svmc_miss_cat',
07:44:48  10  	  data_table_name => '&scoretable',
07:44:48  11  	  xform_view_name => 'xformed_apply_miss_cat');
07:44:48  12  
07:44:48  13  	-- Normalize the data to be scored
07:44:48  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:44:48  15  	  norm_table_name => 'svmc_norm',
07:44:48  16  	  data_table_name => '&scoretable',
07:44:48  17  	  xform_view_name => 'svmc_apply_prep');
07:44:48  18  END;
07:44:48  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.25
07:44:50 SQL> 
07:44:50 SQL> -- Use same model_name used in score_gattn.sql
07:44:50 SQL> DEFINE model_name = 'forex14'
07:44:50 SQL> 
07:44:50 SQL> DELETE fxscores6_gattn WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.04
07:44:50 SQL> 
07:44:50 SQL> INSERT INTO fxscores6_gattn (prdate,score,rundate,pair,ydate)
07:44:50   2  SELECT
07:44:50   3  prdate
07:44:50   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
07:44:50   5  ,sysdate
07:44:50   6  ,SUBSTR(prdate,1,3)pair
07:44:50   7  ,SUBSTR(prdate,4,19)ydate
07:44:50   8  FROM svmc_apply_prep
07:44:50   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.17
07:44:50 SQL> @aud_score1day_gattn.sql	2010-12-29 07:25:00
07:44:50 SQL> --
07:44:50 SQL> -- aud_score1day_gattn.sql
07:44:50 SQL> --
07:44:50 SQL> 
07:44:50 SQL> CREATE OR REPLACE VIEW sme AS
07:44:50   2  SELECT
07:44:50   3  'aud'||m.ydate prdate
07:44:50   4  ,NULL gattn
07:44:50   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
07:44:50   6  ,eur_g00
07:44:50   7  ,eur_g01
07:44:50   8  ,eur_g02
07:44:50   9  ,eur_g03
07:44:50  10  ,eur_g04
07:44:50  11  ,eur_g05
07:44:50  12  ,eur_g06
07:44:50  13  ,eur_g07
07:44:50  14  ,eur_g08
07:44:50  15  ,eur_g09
07:44:50  16  ,eur_g10
07:44:50  17  ,eur_g11
07:44:50  18  ,eur_g12
07:44:50  19  ,eur_g13
07:44:50  20  ,eur_g14
07:44:50  21  ,eur_g15
07:44:50  22  ,eur_g16
07:44:50  23  ,eur_g17
07:44:50  24  ,eur_g18
07:44:50  25  ,eur_g19
07:44:50  26  ,eur_g20
07:44:50  27  ,eur_g21
07:44:50  28  ,eur_g22
07:44:50  29  ,eur_g23
07:44:50  30  ,eur_g24
07:44:50  31  ,eur_g25
07:44:50  32  ,eur_g26
07:44:50  33  ,eur_g27
07:44:50  34  ,eur_g28
07:44:50  35  ,eur_g29
07:44:50  36  ,eur_g30
07:44:50  37  ,eur_g31
07:44:50  38  ,eur_g32
07:44:50  39  ,eur_g33
07:44:50  40  ,eur_g34
07:44:50  41  ,eur_g35
07:44:50  42  ,eur_g36
07:44:50  43  ,eur_g37
07:44:50  44  ,eur_g38
07:44:50  45  ,eur_g39
07:44:50  46  ,eur_g40
07:44:50  47  ,eur_g41
07:44:50  48  ,aud_g00
07:44:50  49  ,aud_g01
07:44:50  50  ,aud_g02
07:44:50  51  ,aud_g03
07:44:50  52  ,aud_g04
07:44:50  53  ,aud_g05
07:44:50  54  ,aud_g06
07:44:50  55  ,aud_g07
07:44:50  56  ,aud_g08
07:44:50  57  ,aud_g09
07:44:50  58  ,aud_g10
07:44:50  59  ,aud_g11
07:44:50  60  ,aud_g12
07:44:50  61  ,aud_g13
07:44:50  62  ,aud_g14
07:44:50  63  ,aud_g15
07:44:50  64  ,aud_g16
07:44:50  65  ,aud_g17
07:44:50  66  ,aud_g18
07:44:50  67  ,aud_g19
07:44:50  68  ,aud_g20
07:44:50  69  ,aud_g21
07:44:50  70  ,aud_g22
07:44:50  71  ,aud_g23
07:44:50  72  ,aud_g24
07:44:50  73  ,aud_g25
07:44:50  74  ,aud_g26
07:44:50  75  ,aud_g27
07:44:50  76  ,aud_g28
07:44:50  77  ,aud_g29
07:44:50  78  ,aud_g30
07:44:50  79  ,aud_g31
07:44:50  80  ,aud_g32
07:44:50  81  ,aud_g33
07:44:50  82  ,aud_g34
07:44:50  83  ,aud_g35
07:44:50  84  ,aud_g36
07:44:50  85  ,aud_g37
07:44:50  86  ,aud_g38
07:44:50  87  ,aud_g39
07:44:50  88  ,aud_g40
07:44:50  89  ,aud_g41
07:44:50  90  ,gbp_g00
07:44:50  91  ,gbp_g01
07:44:50  92  ,gbp_g02
07:44:50  93  ,gbp_g03
07:44:50  94  ,gbp_g04
07:44:50  95  ,gbp_g05
07:44:50  96  ,gbp_g06
07:44:50  97  ,gbp_g07
07:44:50  98  ,gbp_g08
07:44:50  99  ,gbp_g09
07:44:50 100  ,gbp_g10
07:44:50 101  ,gbp_g11
07:44:50 102  ,gbp_g12
07:44:50 103  ,gbp_g13
07:44:50 104  ,gbp_g14
07:44:50 105  ,gbp_g15
07:44:50 106  ,gbp_g16
07:44:50 107  ,gbp_g17
07:44:50 108  ,gbp_g18
07:44:50 109  ,gbp_g19
07:44:50 110  ,gbp_g20
07:44:50 111  ,gbp_g21
07:44:50 112  ,gbp_g22
07:44:50 113  ,gbp_g23
07:44:50 114  ,gbp_g24
07:44:50 115  ,gbp_g25
07:44:50 116  ,gbp_g26
07:44:50 117  ,gbp_g27
07:44:50 118  ,gbp_g28
07:44:50 119  ,gbp_g29
07:44:50 120  ,gbp_g30
07:44:50 121  ,gbp_g31
07:44:50 122  ,gbp_g32
07:44:50 123  ,gbp_g33
07:44:50 124  ,gbp_g34
07:44:50 125  ,gbp_g35
07:44:50 126  ,gbp_g36
07:44:50 127  ,gbp_g37
07:44:50 128  ,gbp_g38
07:44:50 129  ,gbp_g39
07:44:50 130  ,gbp_g40
07:44:50 131  ,gbp_g41
07:44:50 132  ,jpy_g00
07:44:50 133  ,jpy_g01
07:44:50 134  ,jpy_g02
07:44:50 135  ,jpy_g03
07:44:50 136  ,jpy_g04
07:44:50 137  ,jpy_g05
07:44:50 138  ,jpy_g06
07:44:50 139  ,jpy_g07
07:44:50 140  ,jpy_g08
07:44:50 141  ,jpy_g09
07:44:50 142  ,jpy_g10
07:44:50 143  ,jpy_g11
07:44:50 144  ,jpy_g12
07:44:50 145  ,jpy_g13
07:44:50 146  ,jpy_g14
07:44:50 147  ,jpy_g15
07:44:50 148  ,jpy_g16
07:44:50 149  ,jpy_g17
07:44:50 150  ,jpy_g18
07:44:50 151  ,jpy_g19
07:44:50 152  ,jpy_g20
07:44:50 153  ,jpy_g21
07:44:50 154  ,jpy_g22
07:44:50 155  ,jpy_g23
07:44:50 156  ,jpy_g24
07:44:50 157  ,jpy_g25
07:44:50 158  ,jpy_g26
07:44:50 159  ,jpy_g27
07:44:50 160  ,jpy_g28
07:44:50 161  ,jpy_g29
07:44:50 162  ,jpy_g30
07:44:50 163  ,jpy_g31
07:44:50 164  ,jpy_g32
07:44:50 165  ,jpy_g33
07:44:50 166  ,jpy_g34
07:44:50 167  ,jpy_g35
07:44:50 168  ,jpy_g36
07:44:50 169  ,jpy_g37
07:44:50 170  ,jpy_g38
07:44:50 171  ,jpy_g39
07:44:50 172  ,jpy_g40
07:44:50 173  ,jpy_g41
07:44:50 174  ,cad_g00
07:44:50 175  ,cad_g01
07:44:50 176  ,cad_g02
07:44:50 177  ,cad_g03
07:44:50 178  ,cad_g04
07:44:50 179  ,cad_g05
07:44:50 180  ,cad_g06
07:44:50 181  ,cad_g07
07:44:50 182  ,cad_g08
07:44:50 183  ,cad_g09
07:44:50 184  ,cad_g10
07:44:50 185  ,cad_g11
07:44:50 186  ,cad_g12
07:44:50 187  ,cad_g13
07:44:50 188  ,cad_g14
07:44:50 189  ,cad_g15
07:44:50 190  ,cad_g16
07:44:50 191  ,cad_g17
07:44:50 192  ,cad_g18
07:44:50 193  ,cad_g19
07:44:50 194  ,cad_g20
07:44:50 195  ,cad_g21
07:44:50 196  ,cad_g22
07:44:50 197  ,cad_g23
07:44:50 198  ,cad_g24
07:44:50 199  ,cad_g25
07:44:50 200  ,cad_g26
07:44:50 201  ,cad_g27
07:44:50 202  ,cad_g28
07:44:50 203  ,cad_g29
07:44:50 204  ,cad_g30
07:44:50 205  ,cad_g31
07:44:50 206  ,cad_g32
07:44:50 207  ,cad_g33
07:44:50 208  ,cad_g34
07:44:50 209  ,cad_g35
07:44:50 210  ,cad_g36
07:44:50 211  ,cad_g37
07:44:50 212  ,cad_g38
07:44:50 213  ,cad_g39
07:44:50 214  ,cad_g40
07:44:50 215  ,cad_g41
07:44:50 216  ,chf_g00
07:44:50 217  ,chf_g01
07:44:50 218  ,chf_g02
07:44:50 219  ,chf_g03
07:44:50 220  ,chf_g04
07:44:50 221  ,chf_g05
07:44:50 222  ,chf_g06
07:44:50 223  ,chf_g07
07:44:50 224  ,chf_g08
07:44:50 225  ,chf_g09
07:44:50 226  ,chf_g10
07:44:50 227  ,chf_g11
07:44:50 228  ,chf_g12
07:44:50 229  ,chf_g13
07:44:50 230  ,chf_g14
07:44:50 231  ,chf_g15
07:44:50 232  ,chf_g16
07:44:50 233  ,chf_g17
07:44:50 234  ,chf_g18
07:44:50 235  ,chf_g19
07:44:50 236  ,chf_g20
07:44:50 237  ,chf_g21
07:44:50 238  ,chf_g22
07:44:50 239  ,chf_g23
07:44:50 240  ,chf_g24
07:44:50 241  ,chf_g25
07:44:50 242  ,chf_g26
07:44:50 243  ,chf_g27
07:44:50 244  ,chf_g28
07:44:50 245  ,chf_g29
07:44:50 246  ,chf_g30
07:44:50 247  ,chf_g31
07:44:50 248  ,chf_g32
07:44:50 249  ,chf_g33
07:44:50 250  ,chf_g34
07:44:50 251  ,chf_g35
07:44:50 252  ,chf_g36
07:44:50 253  ,chf_g37
07:44:50 254  ,chf_g38
07:44:50 255  ,chf_g39
07:44:50 256  ,chf_g40
07:44:50 257  ,chf_g41
07:44:50 258  FROM aud_ms6 m
07:44:50 259  WHERE m.ydate = '&1'||' '||'&2'
07:44:50 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2010-12-29'||' '||'07:25:00'

View created.

Elapsed: 00:00:00.13
07:44:50 SQL> 
07:44:50 SQL> -- rpt
07:44:50 SQL> -- We should see just 1 row:
07:44:50 SQL> 
07:44:50 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
07:44:50 SQL> 
07:44:50 SQL> -- Build the model:
07:44:50 SQL> CREATE OR REPLACE VIEW bme AS
07:44:50   2  SELECT
07:44:50   3  'aud'||m.ydate prdate
07:44:50   4  ,gattn
07:44:50   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
07:44:50   6  ,eur_g00
07:44:50   7  ,eur_g01
07:44:50   8  ,eur_g02
07:44:50   9  ,eur_g03
07:44:50  10  ,eur_g04
07:44:50  11  ,eur_g05
07:44:50  12  ,eur_g06
07:44:50  13  ,eur_g07
07:44:50  14  ,eur_g08
07:44:50  15  ,eur_g09
07:44:50  16  ,eur_g10
07:44:50  17  ,eur_g11
07:44:50  18  ,eur_g12
07:44:50  19  ,eur_g13
07:44:50  20  ,eur_g14
07:44:50  21  ,eur_g15
07:44:50  22  ,eur_g16
07:44:50  23  ,eur_g17
07:44:50  24  ,eur_g18
07:44:50  25  ,eur_g19
07:44:50  26  ,eur_g20
07:44:50  27  ,eur_g21
07:44:50  28  ,eur_g22
07:44:50  29  ,eur_g23
07:44:50  30  ,eur_g24
07:44:50  31  ,eur_g25
07:44:50  32  ,eur_g26
07:44:50  33  ,eur_g27
07:44:50  34  ,eur_g28
07:44:50  35  ,eur_g29
07:44:50  36  ,eur_g30
07:44:50  37  ,eur_g31
07:44:50  38  ,eur_g32
07:44:50  39  ,eur_g33
07:44:50  40  ,eur_g34
07:44:50  41  ,eur_g35
07:44:50  42  ,eur_g36
07:44:50  43  ,eur_g37
07:44:50  44  ,eur_g38
07:44:50  45  ,eur_g39
07:44:50  46  ,eur_g40
07:44:50  47  ,eur_g41
07:44:50  48  ,aud_g00
07:44:50  49  ,aud_g01
07:44:50  50  ,aud_g02
07:44:50  51  ,aud_g03
07:44:50  52  ,aud_g04
07:44:50  53  ,aud_g05
07:44:50  54  ,aud_g06
07:44:50  55  ,aud_g07
07:44:50  56  ,aud_g08
07:44:50  57  ,aud_g09
07:44:50  58  ,aud_g10
07:44:50  59  ,aud_g11
07:44:50  60  ,aud_g12
07:44:50  61  ,aud_g13
07:44:50  62  ,aud_g14
07:44:50  63  ,aud_g15
07:44:50  64  ,aud_g16
07:44:50  65  ,aud_g17
07:44:50  66  ,aud_g18
07:44:50  67  ,aud_g19
07:44:50  68  ,aud_g20
07:44:50  69  ,aud_g21
07:44:50  70  ,aud_g22
07:44:50  71  ,aud_g23
07:44:50  72  ,aud_g24
07:44:50  73  ,aud_g25
07:44:50  74  ,aud_g26
07:44:50  75  ,aud_g27
07:44:50  76  ,aud_g28
07:44:50  77  ,aud_g29
07:44:50  78  ,aud_g30
07:44:50  79  ,aud_g31
07:44:50  80  ,aud_g32
07:44:50  81  ,aud_g33
07:44:50  82  ,aud_g34
07:44:50  83  ,aud_g35
07:44:50  84  ,aud_g36
07:44:50  85  ,aud_g37
07:44:50  86  ,aud_g38
07:44:50  87  ,aud_g39
07:44:50  88  ,aud_g40
07:44:50  89  ,aud_g41
07:44:50  90  ,gbp_g00
07:44:50  91  ,gbp_g01
07:44:50  92  ,gbp_g02
07:44:50  93  ,gbp_g03
07:44:50  94  ,gbp_g04
07:44:50  95  ,gbp_g05
07:44:50  96  ,gbp_g06
07:44:50  97  ,gbp_g07
07:44:50  98  ,gbp_g08
07:44:50  99  ,gbp_g09
07:44:50 100  ,gbp_g10
07:44:50 101  ,gbp_g11
07:44:50 102  ,gbp_g12
07:44:50 103  ,gbp_g13
07:44:50 104  ,gbp_g14
07:44:50 105  ,gbp_g15
07:44:50 106  ,gbp_g16
07:44:50 107  ,gbp_g17
07:44:50 108  ,gbp_g18
07:44:50 109  ,gbp_g19
07:44:50 110  ,gbp_g20
07:44:50 111  ,gbp_g21
07:44:50 112  ,gbp_g22
07:44:50 113  ,gbp_g23
07:44:50 114  ,gbp_g24
07:44:50 115  ,gbp_g25
07:44:50 116  ,gbp_g26
07:44:50 117  ,gbp_g27
07:44:50 118  ,gbp_g28
07:44:50 119  ,gbp_g29
07:44:50 120  ,gbp_g30
07:44:50 121  ,gbp_g31
07:44:50 122  ,gbp_g32
07:44:50 123  ,gbp_g33
07:44:50 124  ,gbp_g34
07:44:50 125  ,gbp_g35
07:44:50 126  ,gbp_g36
07:44:50 127  ,gbp_g37
07:44:50 128  ,gbp_g38
07:44:50 129  ,gbp_g39
07:44:50 130  ,gbp_g40
07:44:50 131  ,gbp_g41
07:44:50 132  ,jpy_g00
07:44:50 133  ,jpy_g01
07:44:50 134  ,jpy_g02
07:44:50 135  ,jpy_g03
07:44:50 136  ,jpy_g04
07:44:50 137  ,jpy_g05
07:44:50 138  ,jpy_g06
07:44:50 139  ,jpy_g07
07:44:50 140  ,jpy_g08
07:44:50 141  ,jpy_g09
07:44:50 142  ,jpy_g10
07:44:50 143  ,jpy_g11
07:44:50 144  ,jpy_g12
07:44:50 145  ,jpy_g13
07:44:50 146  ,jpy_g14
07:44:50 147  ,jpy_g15
07:44:50 148  ,jpy_g16
07:44:50 149  ,jpy_g17
07:44:50 150  ,jpy_g18
07:44:50 151  ,jpy_g19
07:44:50 152  ,jpy_g20
07:44:50 153  ,jpy_g21
07:44:50 154  ,jpy_g22
07:44:50 155  ,jpy_g23
07:44:50 156  ,jpy_g24
07:44:50 157  ,jpy_g25
07:44:50 158  ,jpy_g26
07:44:50 159  ,jpy_g27
07:44:50 160  ,jpy_g28
07:44:50 161  ,jpy_g29
07:44:50 162  ,jpy_g30
07:44:50 163  ,jpy_g31
07:44:50 164  ,jpy_g32
07:44:50 165  ,jpy_g33
07:44:50 166  ,jpy_g34
07:44:50 167  ,jpy_g35
07:44:50 168  ,jpy_g36
07:44:50 169  ,jpy_g37
07:44:50 170  ,jpy_g38
07:44:50 171  ,jpy_g39
07:44:50 172  ,jpy_g40
07:44:50 173  ,jpy_g41
07:44:50 174  ,cad_g00
07:44:50 175  ,cad_g01
07:44:50 176  ,cad_g02
07:44:50 177  ,cad_g03
07:44:50 178  ,cad_g04
07:44:50 179  ,cad_g05
07:44:50 180  ,cad_g06
07:44:50 181  ,cad_g07
07:44:50 182  ,cad_g08
07:44:50 183  ,cad_g09
07:44:50 184  ,cad_g10
07:44:50 185  ,cad_g11
07:44:50 186  ,cad_g12
07:44:50 187  ,cad_g13
07:44:50 188  ,cad_g14
07:44:50 189  ,cad_g15
07:44:50 190  ,cad_g16
07:44:50 191  ,cad_g17
07:44:50 192  ,cad_g18
07:44:50 193  ,cad_g19
07:44:50 194  ,cad_g20
07:44:50 195  ,cad_g21
07:44:50 196  ,cad_g22
07:44:50 197  ,cad_g23
07:44:50 198  ,cad_g24
07:44:50 199  ,cad_g25
07:44:50 200  ,cad_g26
07:44:50 201  ,cad_g27
07:44:50 202  ,cad_g28
07:44:50 203  ,cad_g29
07:44:50 204  ,cad_g30
07:44:50 205  ,cad_g31
07:44:50 206  ,cad_g32
07:44:50 207  ,cad_g33
07:44:50 208  ,cad_g34
07:44:50 209  ,cad_g35
07:44:50 210  ,cad_g36
07:44:50 211  ,cad_g37
07:44:50 212  ,cad_g38
07:44:50 213  ,cad_g39
07:44:50 214  ,cad_g40
07:44:50 215  ,cad_g41
07:44:50 216  ,chf_g00
07:44:50 217  ,chf_g01
07:44:50 218  ,chf_g02
07:44:50 219  ,chf_g03
07:44:50 220  ,chf_g04
07:44:50 221  ,chf_g05
07:44:50 222  ,chf_g06
07:44:50 223  ,chf_g07
07:44:50 224  ,chf_g08
07:44:50 225  ,chf_g09
07:44:50 226  ,chf_g10
07:44:50 227  ,chf_g11
07:44:50 228  ,chf_g12
07:44:50 229  ,chf_g13
07:44:50 230  ,chf_g14
07:44:50 231  ,chf_g15
07:44:50 232  ,chf_g16
07:44:50 233  ,chf_g17
07:44:50 234  ,chf_g18
07:44:50 235  ,chf_g19
07:44:50 236  ,chf_g20
07:44:50 237  ,chf_g21
07:44:50 238  ,chf_g22
07:44:50 239  ,chf_g23
07:44:50 240  ,chf_g24
07:44:50 241  ,chf_g25
07:44:50 242  ,chf_g26
07:44:50 243  ,chf_g27
07:44:50 244  ,chf_g28
07:44:50 245  ,chf_g29
07:44:50 246  ,chf_g30
07:44:50 247  ,chf_g31
07:44:50 248  ,chf_g32
07:44:50 249  ,chf_g33
07:44:50 250  ,chf_g34
07:44:50 251  ,chf_g35
07:44:50 252  ,chf_g36
07:44:50 253  ,chf_g37
07:44:50 254  ,chf_g38
07:44:50 255  ,chf_g39
07:44:50 256  ,chf_g40
07:44:50 257  ,chf_g41
07:44:50 258  FROM aud_ms6 m
07:44:50 259  WHERE gattn IN('nup','up')
07:44:50 260  AND 1+m.ydate < '&1'||' '||'&2'
07:44:50 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2010-12-29'||' '||'07:25:00'

View created.

Elapsed: 00:00:00.12
07:44:50 SQL> 
07:44:50 SQL> -- rpt
07:44:50 SQL> 
07:44:50 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	    12777
up	     6322

Elapsed: 00:00:00.04
07:44:50 SQL> 
07:44:50 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
aud2010-12-28 07:20:00

Elapsed: 00:00:00.03
07:44:50 SQL> 
07:44:50 SQL> -- Now build model from bme and score sme
07:44:50 SQL> @score1gattn.sql
07:44:50 SQL> -- score1gattn.sql
07:44:50 SQL> 
07:44:50 SQL> -- Does the 1st SVM score
07:44:50 SQL> 
07:44:50 SQL> -- Fill up svmc_apply_prep
07:44:50 SQL> @score_gattn.sql
07:44:50 SQL> --
07:44:50 SQL> -- score_gattn.sql
07:44:50 SQL> --
07:44:50 SQL> 
07:44:50 SQL> -- usage: score_gattn.sql
07:44:50 SQL> 
07:44:50 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
07:44:50 SQL> 
07:44:50 SQL> DEFINE target	= 'gattn'
07:44:50 SQL> DEFINE model_name = 'forex14'
07:44:50 SQL> DEFINE bldtable	= 'bme'
07:44:50 SQL> DEFINE scoretable = 'sme'
07:44:50 SQL> DEFINE case_id	= 'prdate'
07:44:50 SQL> 
07:44:50 SQL> -- Define a variable to help me exclude some columns from some data mining calls
07:44:50 SQL> DEFINE exclude1 = "'&target','&case_id'"
07:44:50 SQL> 
07:44:50 SQL> -- Builds an SVM model using pl/sql.
07:44:50 SQL> 
07:44:50 SQL> -----------------------------------------------------------------------
07:44:50 SQL> --			    BUILD THE MODEL
07:44:50 SQL> -----------------------------------------------------------------------
07:44:50 SQL> 
07:44:50 SQL> -- Cleanup old build data preparation objects for repeat runs
07:44:50 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.01
07:44:50 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
07:44:50 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.00
07:44:50 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.00
07:44:50 SQL> 
07:44:50 SQL> 
07:44:50 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
07:44:50 SQL> --
07:44:50 SQL> -- DROP	TABLE svmc_settings ;
07:44:50 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
07:44:50 SQL> -- DELETE svmc_settings;
07:44:50 SQL> 
07:44:50 SQL> -- The default classification algorithm is Naive Bayes. So override
07:44:50 SQL> -- this choice to SVM using a settings table.
07:44:50 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
07:44:50 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
07:44:50 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
07:44:50 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
07:44:50 SQL> -- models.
07:44:50 SQL> --
07:44:50 SQL> 
07:44:50 SQL> -- Do this once and then comment it out.
07:44:50 SQL> -- That makes script go faster.
07:44:50 SQL> -- BEGIN
07:44:50 SQL> -- -- Populate settings table
07:44:50 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:44:50 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
07:44:50 SQL> --
07:44:50 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:44:50 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
07:44:50 SQL> --
07:44:50 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:44:50 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
07:44:50 SQL> --   COMMIT;
07:44:50 SQL> -- END;
07:44:50 SQL> -- /
07:44:50 SQL> 
07:44:50 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.01
07:44:50 SQL> 
07:44:50 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
07:44:50   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:50   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
07:44:50 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
07:44:50   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:50   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
07:44:50 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
07:44:50   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:50   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
07:44:50 SQL> 
07:44:50 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
07:44:50   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:44:50   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
07:44:50 SQL> 
07:44:50 SQL> --------------------------------
07:44:50 SQL> -- PREPARE BUILD (TRAINING) DATA
07:44:50 SQL> --
07:44:50 SQL> 
07:44:50 SQL> -- 1. Missing Value treatment for all Predictors and
07:44:50 SQL> -- 2. Outlier Treatment and
07:44:50 SQL> -- 3. Normalization are performed below.
07:44:50 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
07:44:50 SQL> --    normalized here.
07:44:50 SQL> 
07:44:50 SQL> BEGIN
07:44:50   2  	-- Perform missing value treatment for all predictors
07:44:50   3  	-- create miss tables
07:44:50   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
07:44:50   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
07:44:50   6  
07:44:50   7  	-- populate miss tables
07:44:50   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
07:44:50   9  	  miss_table_name => 'svmc_miss_num',
07:44:50  10  	  data_table_name => '&bldtable',
07:44:50  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:44:50  12  
07:44:50  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
07:44:50  14  	  miss_table_name => 'svmc_miss_cat',
07:44:50  15  	  data_table_name => '&bldtable',
07:44:50  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:44:50  17  
07:44:50  18  	-- xform input data to replace missing values
07:44:50  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:44:50  20  	  miss_table_name => 'svmc_miss_num',
07:44:50  21  	  data_table_name => '&bldtable',
07:44:50  22  	  xform_view_name => 'xformed_build_miss_num');
07:44:50  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:44:50  24  	  miss_table_name => 'svmc_miss_cat',
07:44:50  25  	  data_table_name => '&bldtable',
07:44:50  26  	  xform_view_name => 'xformed_build_miss_cat');
07:44:50  27  
07:44:50  28  	-- Perform outlier treatment.
07:44:50  29  	-- create clip table
07:44:50  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
07:44:50  31  
07:44:50  32  	-- populate clip table
07:44:50  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
07:44:50  34  	  clip_table_name => 'svmc_clip',
07:44:50  35  	  data_table_name => '&bldtable',
07:44:50  36  	  tail_frac	  => 0.025,
07:44:50  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:44:50  38  
07:44:50  39  	-- xform input data to winsorized data
07:44:50  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
07:44:50  41  	  clip_table_name => 'svmc_clip',
07:44:50  42  	  data_table_name => '&bldtable',
07:44:50  43  	  xform_view_name => 'svmc_winsor');
07:44:50  44  
07:44:50  45  	-- create normalization table
07:44:50  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
07:44:50  47  
07:44:50  48  	-- populate normalization table based on winsorized data
07:44:50  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
07:44:50  50  	  norm_table_name => 'svmc_norm',
07:44:50  51  	  data_table_name => 'svmc_winsor',
07:44:50  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:44:50  53  
07:44:50  54  	-- normalize the original data
07:44:50  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:44:50  56  	  norm_table_name => 'svmc_norm',
07:44:50  57  	  data_table_name => '&bldtable',
07:44:50  58  	  xform_view_name => 'svmc_build_prep');
07:44:50  59  END;
07:44:50  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:17.60
07:45:08 SQL> 
07:45:08 SQL> ---------------------
07:45:08 SQL> -- CREATE A NEW MODEL
07:45:08 SQL> --
07:45:08 SQL> -- Cleanup old model with the same name for repeat runs
07:45:08 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
07:45:08   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:08   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.92
07:45:09 SQL> 
07:45:09 SQL> -- Build a new SVM Model
07:45:09 SQL> BEGIN
07:45:09   2  	DBMS_DATA_MINING.CREATE_MODEL(
07:45:09   3  	  model_name	      => '&model_name',
07:45:09   4  	  mining_function     => dbms_data_mining.classification,
07:45:09   5  	  data_table_name     => 'svmc_build_prep',
07:45:09   6  	  case_id_column_name => '&case_id',
07:45:09   7  	  target_column_name  => '&target',
07:45:09   8  	  settings_table_name => 'svmc_settings');
07:45:09   9  END;
07:45:09  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:26.95
07:45:36 SQL> 
07:45:36 SQL> -----------------------------------------------------------------------
07:45:36 SQL> --			       APPLY/score THE MODEL
07:45:36 SQL> -----------------------------------------------------------------------
07:45:36 SQL> 
07:45:36 SQL> -- Cleanup old scoring data preparation objects for repeat runs
07:45:36 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
07:45:36   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:36   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
07:45:36 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
07:45:36   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:36   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
07:45:36 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
07:45:36   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:36   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
07:45:36 SQL> -----------------------
07:45:36 SQL> -- PREPARE SCORING DATA
07:45:36 SQL> --
07:45:36 SQL> -- If the data for model creation has been prepared, then the data
07:45:36 SQL> -- to be scored using the model must be prepared in the same manner
07:45:36 SQL> -- in order to obtain meaningful results.
07:45:36 SQL> --
07:45:36 SQL> -- 1. Missing Value treatment for all Predictors and
07:45:36 SQL> -- 2. Normalization
07:45:36 SQL> -- No outlier treatment will be performed during test and apply. The
07:45:36 SQL> -- normalization step is sufficient, since the normalization parameters
07:45:36 SQL> -- already capture the effects of outlier treatment done with build data.
07:45:36 SQL> --
07:45:36 SQL> BEGIN
07:45:36   2  	-- Xform Test data to replace missing values
07:45:36   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:45:36   4  	  miss_table_name => 'svmc_miss_num',
07:45:36   5  	  data_table_name => '&scoretable',
07:45:36   6  	  xform_view_name => 'xformed_apply_miss_num');
07:45:36   7  
07:45:36   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:45:36   9  	  miss_table_name => 'svmc_miss_cat',
07:45:36  10  	  data_table_name => '&scoretable',
07:45:36  11  	  xform_view_name => 'xformed_apply_miss_cat');
07:45:36  12  
07:45:36  13  	-- Normalize the data to be scored
07:45:36  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:45:36  15  	  norm_table_name => 'svmc_norm',
07:45:36  16  	  data_table_name => '&scoretable',
07:45:36  17  	  xform_view_name => 'svmc_apply_prep');
07:45:36  18  END;
07:45:36  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.33
07:45:37 SQL> 
07:45:37 SQL> -- Use same model_name used in score_gattn.sql
07:45:37 SQL> DEFINE model_name = 'forex14'
07:45:37 SQL> 
07:45:37 SQL> DELETE fxscores6_gattn WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.04
07:45:37 SQL> 
07:45:37 SQL> INSERT INTO fxscores6_gattn (prdate,score,rundate,pair,ydate)
07:45:37   2  SELECT
07:45:37   3  prdate
07:45:37   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
07:45:37   5  ,sysdate
07:45:37   6  ,SUBSTR(prdate,1,3)pair
07:45:37   7  ,SUBSTR(prdate,4,19)ydate
07:45:37   8  FROM svmc_apply_prep
07:45:37   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.17
07:45:38 SQL> @aud_score1day_gattn.sql	2010-12-29 07:30:00
07:45:38 SQL> --
07:45:38 SQL> -- aud_score1day_gattn.sql
07:45:38 SQL> --
07:45:38 SQL> 
07:45:38 SQL> CREATE OR REPLACE VIEW sme AS
07:45:38   2  SELECT
07:45:38   3  'aud'||m.ydate prdate
07:45:38   4  ,NULL gattn
07:45:38   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
07:45:38   6  ,eur_g00
07:45:38   7  ,eur_g01
07:45:38   8  ,eur_g02
07:45:38   9  ,eur_g03
07:45:38  10  ,eur_g04
07:45:38  11  ,eur_g05
07:45:38  12  ,eur_g06
07:45:38  13  ,eur_g07
07:45:38  14  ,eur_g08
07:45:38  15  ,eur_g09
07:45:38  16  ,eur_g10
07:45:38  17  ,eur_g11
07:45:38  18  ,eur_g12
07:45:38  19  ,eur_g13
07:45:38  20  ,eur_g14
07:45:38  21  ,eur_g15
07:45:38  22  ,eur_g16
07:45:38  23  ,eur_g17
07:45:38  24  ,eur_g18
07:45:38  25  ,eur_g19
07:45:38  26  ,eur_g20
07:45:38  27  ,eur_g21
07:45:38  28  ,eur_g22
07:45:38  29  ,eur_g23
07:45:38  30  ,eur_g24
07:45:38  31  ,eur_g25
07:45:38  32  ,eur_g26
07:45:38  33  ,eur_g27
07:45:38  34  ,eur_g28
07:45:38  35  ,eur_g29
07:45:38  36  ,eur_g30
07:45:38  37  ,eur_g31
07:45:38  38  ,eur_g32
07:45:38  39  ,eur_g33
07:45:38  40  ,eur_g34
07:45:38  41  ,eur_g35
07:45:38  42  ,eur_g36
07:45:38  43  ,eur_g37
07:45:38  44  ,eur_g38
07:45:38  45  ,eur_g39
07:45:38  46  ,eur_g40
07:45:38  47  ,eur_g41
07:45:38  48  ,aud_g00
07:45:38  49  ,aud_g01
07:45:38  50  ,aud_g02
07:45:38  51  ,aud_g03
07:45:38  52  ,aud_g04
07:45:38  53  ,aud_g05
07:45:38  54  ,aud_g06
07:45:38  55  ,aud_g07
07:45:38  56  ,aud_g08
07:45:38  57  ,aud_g09
07:45:38  58  ,aud_g10
07:45:38  59  ,aud_g11
07:45:38  60  ,aud_g12
07:45:38  61  ,aud_g13
07:45:38  62  ,aud_g14
07:45:38  63  ,aud_g15
07:45:38  64  ,aud_g16
07:45:38  65  ,aud_g17
07:45:38  66  ,aud_g18
07:45:38  67  ,aud_g19
07:45:38  68  ,aud_g20
07:45:38  69  ,aud_g21
07:45:38  70  ,aud_g22
07:45:38  71  ,aud_g23
07:45:38  72  ,aud_g24
07:45:38  73  ,aud_g25
07:45:38  74  ,aud_g26
07:45:38  75  ,aud_g27
07:45:38  76  ,aud_g28
07:45:38  77  ,aud_g29
07:45:38  78  ,aud_g30
07:45:38  79  ,aud_g31
07:45:38  80  ,aud_g32
07:45:38  81  ,aud_g33
07:45:38  82  ,aud_g34
07:45:38  83  ,aud_g35
07:45:38  84  ,aud_g36
07:45:38  85  ,aud_g37
07:45:38  86  ,aud_g38
07:45:38  87  ,aud_g39
07:45:38  88  ,aud_g40
07:45:38  89  ,aud_g41
07:45:38  90  ,gbp_g00
07:45:38  91  ,gbp_g01
07:45:38  92  ,gbp_g02
07:45:38  93  ,gbp_g03
07:45:38  94  ,gbp_g04
07:45:38  95  ,gbp_g05
07:45:38  96  ,gbp_g06
07:45:38  97  ,gbp_g07
07:45:38  98  ,gbp_g08
07:45:38  99  ,gbp_g09
07:45:38 100  ,gbp_g10
07:45:38 101  ,gbp_g11
07:45:38 102  ,gbp_g12
07:45:38 103  ,gbp_g13
07:45:38 104  ,gbp_g14
07:45:38 105  ,gbp_g15
07:45:38 106  ,gbp_g16
07:45:38 107  ,gbp_g17
07:45:38 108  ,gbp_g18
07:45:38 109  ,gbp_g19
07:45:38 110  ,gbp_g20
07:45:38 111  ,gbp_g21
07:45:38 112  ,gbp_g22
07:45:38 113  ,gbp_g23
07:45:38 114  ,gbp_g24
07:45:38 115  ,gbp_g25
07:45:38 116  ,gbp_g26
07:45:38 117  ,gbp_g27
07:45:38 118  ,gbp_g28
07:45:38 119  ,gbp_g29
07:45:38 120  ,gbp_g30
07:45:38 121  ,gbp_g31
07:45:38 122  ,gbp_g32
07:45:38 123  ,gbp_g33
07:45:38 124  ,gbp_g34
07:45:38 125  ,gbp_g35
07:45:38 126  ,gbp_g36
07:45:38 127  ,gbp_g37
07:45:38 128  ,gbp_g38
07:45:38 129  ,gbp_g39
07:45:38 130  ,gbp_g40
07:45:38 131  ,gbp_g41
07:45:38 132  ,jpy_g00
07:45:38 133  ,jpy_g01
07:45:38 134  ,jpy_g02
07:45:38 135  ,jpy_g03
07:45:38 136  ,jpy_g04
07:45:38 137  ,jpy_g05
07:45:38 138  ,jpy_g06
07:45:38 139  ,jpy_g07
07:45:38 140  ,jpy_g08
07:45:38 141  ,jpy_g09
07:45:38 142  ,jpy_g10
07:45:38 143  ,jpy_g11
07:45:38 144  ,jpy_g12
07:45:38 145  ,jpy_g13
07:45:38 146  ,jpy_g14
07:45:38 147  ,jpy_g15
07:45:38 148  ,jpy_g16
07:45:38 149  ,jpy_g17
07:45:38 150  ,jpy_g18
07:45:38 151  ,jpy_g19
07:45:38 152  ,jpy_g20
07:45:38 153  ,jpy_g21
07:45:38 154  ,jpy_g22
07:45:38 155  ,jpy_g23
07:45:38 156  ,jpy_g24
07:45:38 157  ,jpy_g25
07:45:38 158  ,jpy_g26
07:45:38 159  ,jpy_g27
07:45:38 160  ,jpy_g28
07:45:38 161  ,jpy_g29
07:45:38 162  ,jpy_g30
07:45:38 163  ,jpy_g31
07:45:38 164  ,jpy_g32
07:45:38 165  ,jpy_g33
07:45:38 166  ,jpy_g34
07:45:38 167  ,jpy_g35
07:45:38 168  ,jpy_g36
07:45:38 169  ,jpy_g37
07:45:38 170  ,jpy_g38
07:45:38 171  ,jpy_g39
07:45:38 172  ,jpy_g40
07:45:38 173  ,jpy_g41
07:45:38 174  ,cad_g00
07:45:38 175  ,cad_g01
07:45:38 176  ,cad_g02
07:45:38 177  ,cad_g03
07:45:38 178  ,cad_g04
07:45:38 179  ,cad_g05
07:45:38 180  ,cad_g06
07:45:38 181  ,cad_g07
07:45:38 182  ,cad_g08
07:45:38 183  ,cad_g09
07:45:38 184  ,cad_g10
07:45:38 185  ,cad_g11
07:45:38 186  ,cad_g12
07:45:38 187  ,cad_g13
07:45:38 188  ,cad_g14
07:45:38 189  ,cad_g15
07:45:38 190  ,cad_g16
07:45:38 191  ,cad_g17
07:45:38 192  ,cad_g18
07:45:38 193  ,cad_g19
07:45:38 194  ,cad_g20
07:45:38 195  ,cad_g21
07:45:38 196  ,cad_g22
07:45:38 197  ,cad_g23
07:45:38 198  ,cad_g24
07:45:38 199  ,cad_g25
07:45:38 200  ,cad_g26
07:45:38 201  ,cad_g27
07:45:38 202  ,cad_g28
07:45:38 203  ,cad_g29
07:45:38 204  ,cad_g30
07:45:38 205  ,cad_g31
07:45:38 206  ,cad_g32
07:45:38 207  ,cad_g33
07:45:38 208  ,cad_g34
07:45:38 209  ,cad_g35
07:45:38 210  ,cad_g36
07:45:38 211  ,cad_g37
07:45:38 212  ,cad_g38
07:45:38 213  ,cad_g39
07:45:38 214  ,cad_g40
07:45:38 215  ,cad_g41
07:45:38 216  ,chf_g00
07:45:38 217  ,chf_g01
07:45:38 218  ,chf_g02
07:45:38 219  ,chf_g03
07:45:38 220  ,chf_g04
07:45:38 221  ,chf_g05
07:45:38 222  ,chf_g06
07:45:38 223  ,chf_g07
07:45:38 224  ,chf_g08
07:45:38 225  ,chf_g09
07:45:38 226  ,chf_g10
07:45:38 227  ,chf_g11
07:45:38 228  ,chf_g12
07:45:38 229  ,chf_g13
07:45:38 230  ,chf_g14
07:45:38 231  ,chf_g15
07:45:38 232  ,chf_g16
07:45:38 233  ,chf_g17
07:45:38 234  ,chf_g18
07:45:38 235  ,chf_g19
07:45:38 236  ,chf_g20
07:45:38 237  ,chf_g21
07:45:38 238  ,chf_g22
07:45:38 239  ,chf_g23
07:45:38 240  ,chf_g24
07:45:38 241  ,chf_g25
07:45:38 242  ,chf_g26
07:45:38 243  ,chf_g27
07:45:38 244  ,chf_g28
07:45:38 245  ,chf_g29
07:45:38 246  ,chf_g30
07:45:38 247  ,chf_g31
07:45:38 248  ,chf_g32
07:45:38 249  ,chf_g33
07:45:38 250  ,chf_g34
07:45:38 251  ,chf_g35
07:45:38 252  ,chf_g36
07:45:38 253  ,chf_g37
07:45:38 254  ,chf_g38
07:45:38 255  ,chf_g39
07:45:38 256  ,chf_g40
07:45:38 257  ,chf_g41
07:45:38 258  FROM aud_ms6 m
07:45:38 259  WHERE m.ydate = '&1'||' '||'&2'
07:45:38 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2010-12-29'||' '||'07:30:00'

View created.

Elapsed: 00:00:00.13
07:45:38 SQL> 
07:45:38 SQL> -- rpt
07:45:38 SQL> -- We should see just 1 row:
07:45:38 SQL> 
07:45:38 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
07:45:38 SQL> 
07:45:38 SQL> -- Build the model:
07:45:38 SQL> CREATE OR REPLACE VIEW bme AS
07:45:38   2  SELECT
07:45:38   3  'aud'||m.ydate prdate
07:45:38   4  ,gattn
07:45:38   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
07:45:38   6  ,eur_g00
07:45:38   7  ,eur_g01
07:45:38   8  ,eur_g02
07:45:38   9  ,eur_g03
07:45:38  10  ,eur_g04
07:45:38  11  ,eur_g05
07:45:38  12  ,eur_g06
07:45:38  13  ,eur_g07
07:45:38  14  ,eur_g08
07:45:38  15  ,eur_g09
07:45:38  16  ,eur_g10
07:45:38  17  ,eur_g11
07:45:38  18  ,eur_g12
07:45:38  19  ,eur_g13
07:45:38  20  ,eur_g14
07:45:38  21  ,eur_g15
07:45:38  22  ,eur_g16
07:45:38  23  ,eur_g17
07:45:38  24  ,eur_g18
07:45:38  25  ,eur_g19
07:45:38  26  ,eur_g20
07:45:38  27  ,eur_g21
07:45:38  28  ,eur_g22
07:45:38  29  ,eur_g23
07:45:38  30  ,eur_g24
07:45:38  31  ,eur_g25
07:45:38  32  ,eur_g26
07:45:38  33  ,eur_g27
07:45:38  34  ,eur_g28
07:45:38  35  ,eur_g29
07:45:38  36  ,eur_g30
07:45:38  37  ,eur_g31
07:45:38  38  ,eur_g32
07:45:38  39  ,eur_g33
07:45:38  40  ,eur_g34
07:45:38  41  ,eur_g35
07:45:38  42  ,eur_g36
07:45:38  43  ,eur_g37
07:45:38  44  ,eur_g38
07:45:38  45  ,eur_g39
07:45:38  46  ,eur_g40
07:45:38  47  ,eur_g41
07:45:38  48  ,aud_g00
07:45:38  49  ,aud_g01
07:45:38  50  ,aud_g02
07:45:38  51  ,aud_g03
07:45:38  52  ,aud_g04
07:45:38  53  ,aud_g05
07:45:38  54  ,aud_g06
07:45:38  55  ,aud_g07
07:45:38  56  ,aud_g08
07:45:38  57  ,aud_g09
07:45:38  58  ,aud_g10
07:45:38  59  ,aud_g11
07:45:38  60  ,aud_g12
07:45:38  61  ,aud_g13
07:45:38  62  ,aud_g14
07:45:38  63  ,aud_g15
07:45:38  64  ,aud_g16
07:45:38  65  ,aud_g17
07:45:38  66  ,aud_g18
07:45:38  67  ,aud_g19
07:45:38  68  ,aud_g20
07:45:38  69  ,aud_g21
07:45:38  70  ,aud_g22
07:45:38  71  ,aud_g23
07:45:38  72  ,aud_g24
07:45:38  73  ,aud_g25
07:45:38  74  ,aud_g26
07:45:38  75  ,aud_g27
07:45:38  76  ,aud_g28
07:45:38  77  ,aud_g29
07:45:38  78  ,aud_g30
07:45:38  79  ,aud_g31
07:45:38  80  ,aud_g32
07:45:38  81  ,aud_g33
07:45:38  82  ,aud_g34
07:45:38  83  ,aud_g35
07:45:38  84  ,aud_g36
07:45:38  85  ,aud_g37
07:45:38  86  ,aud_g38
07:45:38  87  ,aud_g39
07:45:38  88  ,aud_g40
07:45:38  89  ,aud_g41
07:45:38  90  ,gbp_g00
07:45:38  91  ,gbp_g01
07:45:38  92  ,gbp_g02
07:45:38  93  ,gbp_g03
07:45:38  94  ,gbp_g04
07:45:38  95  ,gbp_g05
07:45:38  96  ,gbp_g06
07:45:38  97  ,gbp_g07
07:45:38  98  ,gbp_g08
07:45:38  99  ,gbp_g09
07:45:38 100  ,gbp_g10
07:45:38 101  ,gbp_g11
07:45:38 102  ,gbp_g12
07:45:38 103  ,gbp_g13
07:45:38 104  ,gbp_g14
07:45:38 105  ,gbp_g15
07:45:38 106  ,gbp_g16
07:45:38 107  ,gbp_g17
07:45:38 108  ,gbp_g18
07:45:38 109  ,gbp_g19
07:45:38 110  ,gbp_g20
07:45:38 111  ,gbp_g21
07:45:38 112  ,gbp_g22
07:45:38 113  ,gbp_g23
07:45:38 114  ,gbp_g24
07:45:38 115  ,gbp_g25
07:45:38 116  ,gbp_g26
07:45:38 117  ,gbp_g27
07:45:38 118  ,gbp_g28
07:45:38 119  ,gbp_g29
07:45:38 120  ,gbp_g30
07:45:38 121  ,gbp_g31
07:45:38 122  ,gbp_g32
07:45:38 123  ,gbp_g33
07:45:38 124  ,gbp_g34
07:45:38 125  ,gbp_g35
07:45:38 126  ,gbp_g36
07:45:38 127  ,gbp_g37
07:45:38 128  ,gbp_g38
07:45:38 129  ,gbp_g39
07:45:38 130  ,gbp_g40
07:45:38 131  ,gbp_g41
07:45:38 132  ,jpy_g00
07:45:38 133  ,jpy_g01
07:45:38 134  ,jpy_g02
07:45:38 135  ,jpy_g03
07:45:38 136  ,jpy_g04
07:45:38 137  ,jpy_g05
07:45:38 138  ,jpy_g06
07:45:38 139  ,jpy_g07
07:45:38 140  ,jpy_g08
07:45:38 141  ,jpy_g09
07:45:38 142  ,jpy_g10
07:45:38 143  ,jpy_g11
07:45:38 144  ,jpy_g12
07:45:38 145  ,jpy_g13
07:45:38 146  ,jpy_g14
07:45:38 147  ,jpy_g15
07:45:38 148  ,jpy_g16
07:45:38 149  ,jpy_g17
07:45:38 150  ,jpy_g18
07:45:38 151  ,jpy_g19
07:45:38 152  ,jpy_g20
07:45:38 153  ,jpy_g21
07:45:38 154  ,jpy_g22
07:45:38 155  ,jpy_g23
07:45:38 156  ,jpy_g24
07:45:38 157  ,jpy_g25
07:45:38 158  ,jpy_g26
07:45:38 159  ,jpy_g27
07:45:38 160  ,jpy_g28
07:45:38 161  ,jpy_g29
07:45:38 162  ,jpy_g30
07:45:38 163  ,jpy_g31
07:45:38 164  ,jpy_g32
07:45:38 165  ,jpy_g33
07:45:38 166  ,jpy_g34
07:45:38 167  ,jpy_g35
07:45:38 168  ,jpy_g36
07:45:38 169  ,jpy_g37
07:45:38 170  ,jpy_g38
07:45:38 171  ,jpy_g39
07:45:38 172  ,jpy_g40
07:45:38 173  ,jpy_g41
07:45:38 174  ,cad_g00
07:45:38 175  ,cad_g01
07:45:38 176  ,cad_g02
07:45:38 177  ,cad_g03
07:45:38 178  ,cad_g04
07:45:38 179  ,cad_g05
07:45:38 180  ,cad_g06
07:45:38 181  ,cad_g07
07:45:38 182  ,cad_g08
07:45:38 183  ,cad_g09
07:45:38 184  ,cad_g10
07:45:38 185  ,cad_g11
07:45:38 186  ,cad_g12
07:45:38 187  ,cad_g13
07:45:38 188  ,cad_g14
07:45:38 189  ,cad_g15
07:45:38 190  ,cad_g16
07:45:38 191  ,cad_g17
07:45:38 192  ,cad_g18
07:45:38 193  ,cad_g19
07:45:38 194  ,cad_g20
07:45:38 195  ,cad_g21
07:45:38 196  ,cad_g22
07:45:38 197  ,cad_g23
07:45:38 198  ,cad_g24
07:45:38 199  ,cad_g25
07:45:38 200  ,cad_g26
07:45:38 201  ,cad_g27
07:45:38 202  ,cad_g28
07:45:38 203  ,cad_g29
07:45:38 204  ,cad_g30
07:45:38 205  ,cad_g31
07:45:38 206  ,cad_g32
07:45:38 207  ,cad_g33
07:45:38 208  ,cad_g34
07:45:38 209  ,cad_g35
07:45:38 210  ,cad_g36
07:45:38 211  ,cad_g37
07:45:38 212  ,cad_g38
07:45:38 213  ,cad_g39
07:45:38 214  ,cad_g40
07:45:38 215  ,cad_g41
07:45:38 216  ,chf_g00
07:45:38 217  ,chf_g01
07:45:38 218  ,chf_g02
07:45:38 219  ,chf_g03
07:45:38 220  ,chf_g04
07:45:38 221  ,chf_g05
07:45:38 222  ,chf_g06
07:45:38 223  ,chf_g07
07:45:38 224  ,chf_g08
07:45:38 225  ,chf_g09
07:45:38 226  ,chf_g10
07:45:38 227  ,chf_g11
07:45:38 228  ,chf_g12
07:45:38 229  ,chf_g13
07:45:38 230  ,chf_g14
07:45:38 231  ,chf_g15
07:45:38 232  ,chf_g16
07:45:38 233  ,chf_g17
07:45:38 234  ,chf_g18
07:45:38 235  ,chf_g19
07:45:38 236  ,chf_g20
07:45:38 237  ,chf_g21
07:45:38 238  ,chf_g22
07:45:38 239  ,chf_g23
07:45:38 240  ,chf_g24
07:45:38 241  ,chf_g25
07:45:38 242  ,chf_g26
07:45:38 243  ,chf_g27
07:45:38 244  ,chf_g28
07:45:38 245  ,chf_g29
07:45:38 246  ,chf_g30
07:45:38 247  ,chf_g31
07:45:38 248  ,chf_g32
07:45:38 249  ,chf_g33
07:45:38 250  ,chf_g34
07:45:38 251  ,chf_g35
07:45:38 252  ,chf_g36
07:45:38 253  ,chf_g37
07:45:38 254  ,chf_g38
07:45:38 255  ,chf_g39
07:45:38 256  ,chf_g40
07:45:38 257  ,chf_g41
07:45:38 258  FROM aud_ms6 m
07:45:38 259  WHERE gattn IN('nup','up')
07:45:38 260  AND 1+m.ydate < '&1'||' '||'&2'
07:45:38 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2010-12-29'||' '||'07:30:00'

View created.

Elapsed: 00:00:00.16
07:45:38 SQL> 
07:45:38 SQL> -- rpt
07:45:38 SQL> 
07:45:38 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	    12778
up	     6322

Elapsed: 00:00:00.04
07:45:38 SQL> 
07:45:38 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
aud2010-12-28 07:25:00

Elapsed: 00:00:00.04
07:45:38 SQL> 
07:45:38 SQL> -- Now build model from bme and score sme
07:45:38 SQL> @score1gattn.sql
07:45:38 SQL> -- score1gattn.sql
07:45:38 SQL> 
07:45:38 SQL> -- Does the 1st SVM score
07:45:38 SQL> 
07:45:38 SQL> -- Fill up svmc_apply_prep
07:45:38 SQL> @score_gattn.sql
07:45:38 SQL> --
07:45:38 SQL> -- score_gattn.sql
07:45:38 SQL> --
07:45:38 SQL> 
07:45:38 SQL> -- usage: score_gattn.sql
07:45:38 SQL> 
07:45:38 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
07:45:38 SQL> 
07:45:38 SQL> DEFINE target	= 'gattn'
07:45:38 SQL> DEFINE model_name = 'forex14'
07:45:38 SQL> DEFINE bldtable	= 'bme'
07:45:38 SQL> DEFINE scoretable = 'sme'
07:45:38 SQL> DEFINE case_id	= 'prdate'
07:45:38 SQL> 
07:45:38 SQL> -- Define a variable to help me exclude some columns from some data mining calls
07:45:38 SQL> DEFINE exclude1 = "'&target','&case_id'"
07:45:38 SQL> 
07:45:38 SQL> -- Builds an SVM model using pl/sql.
07:45:38 SQL> 
07:45:38 SQL> -----------------------------------------------------------------------
07:45:38 SQL> --			    BUILD THE MODEL
07:45:38 SQL> -----------------------------------------------------------------------
07:45:38 SQL> 
07:45:38 SQL> -- Cleanup old build data preparation objects for repeat runs
07:45:38 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.00
07:45:38 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
07:45:38 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.01
07:45:38 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.00
07:45:38 SQL> 
07:45:38 SQL> 
07:45:38 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
07:45:38 SQL> --
07:45:38 SQL> -- DROP	TABLE svmc_settings ;
07:45:38 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
07:45:38 SQL> -- DELETE svmc_settings;
07:45:38 SQL> 
07:45:38 SQL> -- The default classification algorithm is Naive Bayes. So override
07:45:38 SQL> -- this choice to SVM using a settings table.
07:45:38 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
07:45:38 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
07:45:38 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
07:45:38 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
07:45:38 SQL> -- models.
07:45:38 SQL> --
07:45:38 SQL> 
07:45:38 SQL> -- Do this once and then comment it out.
07:45:38 SQL> -- That makes script go faster.
07:45:38 SQL> -- BEGIN
07:45:38 SQL> -- -- Populate settings table
07:45:38 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:45:38 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
07:45:38 SQL> --
07:45:38 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:45:38 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
07:45:38 SQL> --
07:45:38 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
07:45:38 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
07:45:38 SQL> --   COMMIT;
07:45:38 SQL> -- END;
07:45:38 SQL> -- /
07:45:38 SQL> 
07:45:38 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
07:45:38 SQL> 
07:45:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
07:45:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
07:45:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
07:45:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
07:45:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
07:45:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
07:45:38 SQL> 
07:45:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
07:45:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
07:45:38 SQL> 
07:45:38 SQL> --------------------------------
07:45:38 SQL> -- PREPARE BUILD (TRAINING) DATA
07:45:38 SQL> --
07:45:38 SQL> 
07:45:38 SQL> -- 1. Missing Value treatment for all Predictors and
07:45:38 SQL> -- 2. Outlier Treatment and
07:45:38 SQL> -- 3. Normalization are performed below.
07:45:38 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
07:45:38 SQL> --    normalized here.
07:45:38 SQL> 
07:45:38 SQL> BEGIN
07:45:38   2  	-- Perform missing value treatment for all predictors
07:45:38   3  	-- create miss tables
07:45:38   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
07:45:38   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
07:45:38   6  
07:45:38   7  	-- populate miss tables
07:45:38   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
07:45:38   9  	  miss_table_name => 'svmc_miss_num',
07:45:38  10  	  data_table_name => '&bldtable',
07:45:38  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:45:38  12  
07:45:38  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
07:45:38  14  	  miss_table_name => 'svmc_miss_cat',
07:45:38  15  	  data_table_name => '&bldtable',
07:45:38  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:45:38  17  
07:45:38  18  	-- xform input data to replace missing values
07:45:38  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:45:38  20  	  miss_table_name => 'svmc_miss_num',
07:45:38  21  	  data_table_name => '&bldtable',
07:45:38  22  	  xform_view_name => 'xformed_build_miss_num');
07:45:38  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:45:38  24  	  miss_table_name => 'svmc_miss_cat',
07:45:38  25  	  data_table_name => '&bldtable',
07:45:38  26  	  xform_view_name => 'xformed_build_miss_cat');
07:45:38  27  
07:45:38  28  	-- Perform outlier treatment.
07:45:38  29  	-- create clip table
07:45:38  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
07:45:38  31  
07:45:38  32  	-- populate clip table
07:45:38  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
07:45:38  34  	  clip_table_name => 'svmc_clip',
07:45:38  35  	  data_table_name => '&bldtable',
07:45:38  36  	  tail_frac	  => 0.025,
07:45:38  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:45:38  38  
07:45:38  39  	-- xform input data to winsorized data
07:45:38  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
07:45:38  41  	  clip_table_name => 'svmc_clip',
07:45:38  42  	  data_table_name => '&bldtable',
07:45:38  43  	  xform_view_name => 'svmc_winsor');
07:45:38  44  
07:45:38  45  	-- create normalization table
07:45:38  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
07:45:38  47  
07:45:38  48  	-- populate normalization table based on winsorized data
07:45:38  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
07:45:38  50  	  norm_table_name => 'svmc_norm',
07:45:38  51  	  data_table_name => 'svmc_winsor',
07:45:38  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
07:45:38  53  
07:45:38  54  	-- normalize the original data
07:45:38  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:45:38  56  	  norm_table_name => 'svmc_norm',
07:45:38  57  	  data_table_name => '&bldtable',
07:45:38  58  	  xform_view_name => 'svmc_build_prep');
07:45:38  59  END;
07:45:38  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:17.92
07:45:56 SQL> 
07:45:56 SQL> ---------------------
07:45:56 SQL> -- CREATE A NEW MODEL
07:45:56 SQL> --
07:45:56 SQL> -- Cleanup old model with the same name for repeat runs
07:45:56 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
07:45:56   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:45:56   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.87
07:45:57 SQL> 
07:45:57 SQL> -- Build a new SVM Model
07:45:57 SQL> BEGIN
07:45:57   2  	DBMS_DATA_MINING.CREATE_MODEL(
07:45:57   3  	  model_name	      => '&model_name',
07:45:57   4  	  mining_function     => dbms_data_mining.classification,
07:45:57   5  	  data_table_name     => 'svmc_build_prep',
07:45:57   6  	  case_id_column_name => '&case_id',
07:45:57   7  	  target_column_name  => '&target',
07:45:57   8  	  settings_table_name => 'svmc_settings');
07:45:57   9  END;
07:45:57  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:25.97
07:46:23 SQL> 
07:46:23 SQL> -----------------------------------------------------------------------
07:46:23 SQL> --			       APPLY/score THE MODEL
07:46:23 SQL> -----------------------------------------------------------------------
07:46:23 SQL> 
07:46:23 SQL> -- Cleanup old scoring data preparation objects for repeat runs
07:46:23 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
07:46:23   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:23   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.09
07:46:23 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
07:46:23   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:23   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
07:46:23 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
07:46:23   2  EXCEPTION WHEN OTHERS THEN NULL; END;
07:46:23   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
07:46:23 SQL> -----------------------
07:46:23 SQL> -- PREPARE SCORING DATA
07:46:23 SQL> --
07:46:23 SQL> -- If the data for model creation has been prepared, then the data
07:46:23 SQL> -- to be scored using the model must be prepared in the same manner
07:46:23 SQL> -- in order to obtain meaningful results.
07:46:23 SQL> --
07:46:23 SQL> -- 1. Missing Value treatment for all Predictors and
07:46:23 SQL> -- 2. Normalization
07:46:23 SQL> -- No outlier treatment will be performed during test and apply. The
07:46:23 SQL> -- normalization step is sufficient, since the normalization parameters
07:46:23 SQL> -- already capture the effects of outlier treatment done with build data.
07:46:23 SQL> --
07:46:23 SQL> BEGIN
07:46:23   2  	-- Xform Test data to replace missing values
07:46:23   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
07:46:23   4  	  miss_table_name => 'svmc_miss_num',
07:46:23   5  	  data_table_name => '&scoretable',
07:46:23   6  	  xform_view_name => 'xformed_apply_miss_num');
07:46:23   7  
07:46:23   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
07:46:23   9  	  miss_table_name => 'svmc_miss_cat',
07:46:23  10  	  data_table_name => '&scoretable',
07:46:23  11  	  xform_view_name => 'xformed_apply_miss_cat');
07:46:23  12  
07:46:23  13  	-- Normalize the data to be scored
07:46:23  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
07:46:23  15  	  norm_table_name => 'svmc_norm',
07:46:23  16  	  data_table_name => '&scoretable',
07:46:23  17  	  xform_view_name => 'svmc_apply_prep');
07:46:23  18  END;
07:46:23  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.21
07:46:25 SQL> 
07:46:25 SQL> -- Use same model_name used in score_gattn.sql
07:46:25 SQL> DEFINE model_name = 'forex14'
07:46:25 SQL> 
07:46:25 SQL> DELETE fxscores6_gattn WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.04
07:46:25 SQL> 
07:46:25 SQL> INSERT INTO fxscores6_gattn (prdate,score,rundate,pair,ydate)
07:46:25   2  SELECT
07:46:25   3  prdate
07:46:25   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
07:46:25   5  ,sysdate
07:46:25   6  ,SUBSTR(prdate,1,3)pair
07:46:25   7  ,SUBSTR(prdate,4,19)ydate
07:46:25   8  FROM svmc_apply_prep
07:46:25   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.17
07:46:25 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
