
SQL*Plus: Release 11.2.0.1.0 Production on Fri Jan 7 08:49:54 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

08:49:54 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
08:49:54 SQL> 08:49:54 SQL> @aud_score1day.sql  2011-01-07 08:25:00
08:49:54 SQL> --
08:49:54 SQL> -- aud_score1day.sql
08:49:54 SQL> --
08:49:54 SQL> 
08:49:54 SQL> CREATE OR REPLACE VIEW sme AS
08:49:54   2  SELECT
08:49:54   3  'aud'||m.ydate prdate
08:49:54   4  ,NULL gatt
08:49:54   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
08:49:54   6  ,eur_g00
08:49:54   7  ,eur_g01
08:49:54   8  ,eur_g02
08:49:54   9  ,eur_g03
08:49:54  10  ,eur_g04
08:49:54  11  ,eur_g05
08:49:54  12  ,eur_g06
08:49:54  13  ,eur_g07
08:49:54  14  ,eur_g08
08:49:54  15  ,eur_g09
08:49:54  16  ,eur_g10
08:49:54  17  ,eur_g11
08:49:54  18  ,eur_g12
08:49:54  19  ,eur_g13
08:49:54  20  ,eur_g14
08:49:54  21  ,eur_g15
08:49:54  22  ,eur_g16
08:49:54  23  ,eur_g17
08:49:54  24  ,eur_g18
08:49:54  25  ,eur_g19
08:49:54  26  ,eur_g20
08:49:54  27  ,eur_g21
08:49:54  28  ,eur_g22
08:49:54  29  ,eur_g23
08:49:54  30  ,eur_g24
08:49:54  31  ,eur_g25
08:49:54  32  ,eur_g26
08:49:54  33  ,eur_g27
08:49:54  34  ,eur_g28
08:49:54  35  ,eur_g29
08:49:54  36  ,eur_g30
08:49:54  37  ,eur_g31
08:49:54  38  ,eur_g32
08:49:54  39  ,eur_g33
08:49:54  40  ,eur_g34
08:49:54  41  ,eur_g35
08:49:54  42  ,eur_g36
08:49:54  43  ,eur_g37
08:49:54  44  ,eur_g38
08:49:54  45  ,eur_g39
08:49:54  46  ,eur_g40
08:49:54  47  ,eur_g41
08:49:54  48  ,aud_g00
08:49:54  49  ,aud_g01
08:49:54  50  ,aud_g02
08:49:54  51  ,aud_g03
08:49:54  52  ,aud_g04
08:49:54  53  ,aud_g05
08:49:54  54  ,aud_g06
08:49:54  55  ,aud_g07
08:49:54  56  ,aud_g08
08:49:54  57  ,aud_g09
08:49:54  58  ,aud_g10
08:49:54  59  ,aud_g11
08:49:54  60  ,aud_g12
08:49:54  61  ,aud_g13
08:49:54  62  ,aud_g14
08:49:54  63  ,aud_g15
08:49:54  64  ,aud_g16
08:49:54  65  ,aud_g17
08:49:54  66  ,aud_g18
08:49:54  67  ,aud_g19
08:49:54  68  ,aud_g20
08:49:54  69  ,aud_g21
08:49:54  70  ,aud_g22
08:49:54  71  ,aud_g23
08:49:54  72  ,aud_g24
08:49:54  73  ,aud_g25
08:49:54  74  ,aud_g26
08:49:54  75  ,aud_g27
08:49:54  76  ,aud_g28
08:49:54  77  ,aud_g29
08:49:54  78  ,aud_g30
08:49:54  79  ,aud_g31
08:49:54  80  ,aud_g32
08:49:54  81  ,aud_g33
08:49:54  82  ,aud_g34
08:49:54  83  ,aud_g35
08:49:54  84  ,aud_g36
08:49:54  85  ,aud_g37
08:49:54  86  ,aud_g38
08:49:54  87  ,aud_g39
08:49:54  88  ,aud_g40
08:49:54  89  ,aud_g41
08:49:54  90  ,gbp_g00
08:49:54  91  ,gbp_g01
08:49:54  92  ,gbp_g02
08:49:54  93  ,gbp_g03
08:49:54  94  ,gbp_g04
08:49:54  95  ,gbp_g05
08:49:54  96  ,gbp_g06
08:49:54  97  ,gbp_g07
08:49:54  98  ,gbp_g08
08:49:54  99  ,gbp_g09
08:49:54 100  ,gbp_g10
08:49:54 101  ,gbp_g11
08:49:54 102  ,gbp_g12
08:49:54 103  ,gbp_g13
08:49:54 104  ,gbp_g14
08:49:54 105  ,gbp_g15
08:49:54 106  ,gbp_g16
08:49:54 107  ,gbp_g17
08:49:54 108  ,gbp_g18
08:49:54 109  ,gbp_g19
08:49:54 110  ,gbp_g20
08:49:54 111  ,gbp_g21
08:49:54 112  ,gbp_g22
08:49:54 113  ,gbp_g23
08:49:54 114  ,gbp_g24
08:49:54 115  ,gbp_g25
08:49:54 116  ,gbp_g26
08:49:54 117  ,gbp_g27
08:49:54 118  ,gbp_g28
08:49:54 119  ,gbp_g29
08:49:54 120  ,gbp_g30
08:49:54 121  ,gbp_g31
08:49:54 122  ,gbp_g32
08:49:54 123  ,gbp_g33
08:49:54 124  ,gbp_g34
08:49:54 125  ,gbp_g35
08:49:54 126  ,gbp_g36
08:49:54 127  ,gbp_g37
08:49:54 128  ,gbp_g38
08:49:54 129  ,gbp_g39
08:49:54 130  ,gbp_g40
08:49:54 131  ,gbp_g41
08:49:54 132  ,jpy_g00
08:49:54 133  ,jpy_g01
08:49:54 134  ,jpy_g02
08:49:54 135  ,jpy_g03
08:49:54 136  ,jpy_g04
08:49:54 137  ,jpy_g05
08:49:54 138  ,jpy_g06
08:49:54 139  ,jpy_g07
08:49:54 140  ,jpy_g08
08:49:54 141  ,jpy_g09
08:49:54 142  ,jpy_g10
08:49:54 143  ,jpy_g11
08:49:54 144  ,jpy_g12
08:49:54 145  ,jpy_g13
08:49:54 146  ,jpy_g14
08:49:54 147  ,jpy_g15
08:49:54 148  ,jpy_g16
08:49:54 149  ,jpy_g17
08:49:54 150  ,jpy_g18
08:49:54 151  ,jpy_g19
08:49:54 152  ,jpy_g20
08:49:54 153  ,jpy_g21
08:49:54 154  ,jpy_g22
08:49:54 155  ,jpy_g23
08:49:54 156  ,jpy_g24
08:49:54 157  ,jpy_g25
08:49:54 158  ,jpy_g26
08:49:54 159  ,jpy_g27
08:49:54 160  ,jpy_g28
08:49:54 161  ,jpy_g29
08:49:54 162  ,jpy_g30
08:49:54 163  ,jpy_g31
08:49:54 164  ,jpy_g32
08:49:54 165  ,jpy_g33
08:49:54 166  ,jpy_g34
08:49:54 167  ,jpy_g35
08:49:54 168  ,jpy_g36
08:49:54 169  ,jpy_g37
08:49:54 170  ,jpy_g38
08:49:54 171  ,jpy_g39
08:49:54 172  ,jpy_g40
08:49:54 173  ,jpy_g41
08:49:54 174  ,cad_g00
08:49:54 175  ,cad_g01
08:49:54 176  ,cad_g02
08:49:54 177  ,cad_g03
08:49:54 178  ,cad_g04
08:49:54 179  ,cad_g05
08:49:54 180  ,cad_g06
08:49:54 181  ,cad_g07
08:49:54 182  ,cad_g08
08:49:54 183  ,cad_g09
08:49:54 184  ,cad_g10
08:49:54 185  ,cad_g11
08:49:54 186  ,cad_g12
08:49:54 187  ,cad_g13
08:49:54 188  ,cad_g14
08:49:54 189  ,cad_g15
08:49:54 190  ,cad_g16
08:49:54 191  ,cad_g17
08:49:54 192  ,cad_g18
08:49:54 193  ,cad_g19
08:49:54 194  ,cad_g20
08:49:54 195  ,cad_g21
08:49:54 196  ,cad_g22
08:49:54 197  ,cad_g23
08:49:54 198  ,cad_g24
08:49:54 199  ,cad_g25
08:49:54 200  ,cad_g26
08:49:54 201  ,cad_g27
08:49:54 202  ,cad_g28
08:49:54 203  ,cad_g29
08:49:54 204  ,cad_g30
08:49:54 205  ,cad_g31
08:49:54 206  ,cad_g32
08:49:54 207  ,cad_g33
08:49:54 208  ,cad_g34
08:49:54 209  ,cad_g35
08:49:54 210  ,cad_g36
08:49:54 211  ,cad_g37
08:49:54 212  ,cad_g38
08:49:54 213  ,cad_g39
08:49:54 214  ,cad_g40
08:49:54 215  ,cad_g41
08:49:54 216  ,chf_g00
08:49:54 217  ,chf_g01
08:49:54 218  ,chf_g02
08:49:54 219  ,chf_g03
08:49:54 220  ,chf_g04
08:49:54 221  ,chf_g05
08:49:54 222  ,chf_g06
08:49:54 223  ,chf_g07
08:49:54 224  ,chf_g08
08:49:54 225  ,chf_g09
08:49:54 226  ,chf_g10
08:49:54 227  ,chf_g11
08:49:54 228  ,chf_g12
08:49:54 229  ,chf_g13
08:49:54 230  ,chf_g14
08:49:54 231  ,chf_g15
08:49:54 232  ,chf_g16
08:49:54 233  ,chf_g17
08:49:54 234  ,chf_g18
08:49:54 235  ,chf_g19
08:49:54 236  ,chf_g20
08:49:54 237  ,chf_g21
08:49:54 238  ,chf_g22
08:49:54 239  ,chf_g23
08:49:54 240  ,chf_g24
08:49:54 241  ,chf_g25
08:49:54 242  ,chf_g26
08:49:54 243  ,chf_g27
08:49:54 244  ,chf_g28
08:49:54 245  ,chf_g29
08:49:54 246  ,chf_g30
08:49:54 247  ,chf_g31
08:49:54 248  ,chf_g32
08:49:54 249  ,chf_g33
08:49:54 250  ,chf_g34
08:49:54 251  ,chf_g35
08:49:54 252  ,chf_g36
08:49:54 253  ,chf_g37
08:49:54 254  ,chf_g38
08:49:54 255  ,chf_g39
08:49:54 256  ,chf_g40
08:49:54 257  ,chf_g41
08:49:54 258  FROM aud_ms6 m
08:49:54 259  WHERE m.ydate = '&1'||' '||'&2'
08:49:54 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2011-01-07'||' '||'08:25:00'

View created.

Elapsed: 00:00:00.15
08:49:54 SQL> 
08:49:54 SQL> -- rpt
08:49:54 SQL> -- We should see just 1 row:
08:49:54 SQL> 
08:49:54 SQL> SELECT COUNT(prdate) FROM sme
08:49:54   2  
08:49:54 SQL> -- Build the model:
08:49:54 SQL> CREATE OR REPLACE VIEW bme AS
08:49:54   2  SELECT
08:49:54   3  'aud'||m.ydate prdate
08:49:54   4  ,gatt
08:49:54   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
08:49:54   6  ,eur_g00
08:49:54   7  ,eur_g01
08:49:54   8  ,eur_g02
08:49:54   9  ,eur_g03
08:49:54  10  ,eur_g04
08:49:54  11  ,eur_g05
08:49:54  12  ,eur_g06
08:49:54  13  ,eur_g07
08:49:54  14  ,eur_g08
08:49:54  15  ,eur_g09
08:49:54  16  ,eur_g10
08:49:54  17  ,eur_g11
08:49:54  18  ,eur_g12
08:49:54  19  ,eur_g13
08:49:54  20  ,eur_g14
08:49:54  21  ,eur_g15
08:49:54  22  ,eur_g16
08:49:54  23  ,eur_g17
08:49:54  24  ,eur_g18
08:49:54  25  ,eur_g19
08:49:54  26  ,eur_g20
08:49:54  27  ,eur_g21
08:49:54  28  ,eur_g22
08:49:54  29  ,eur_g23
08:49:54  30  ,eur_g24
08:49:54  31  ,eur_g25
08:49:54  32  ,eur_g26
08:49:54  33  ,eur_g27
08:49:54  34  ,eur_g28
08:49:54  35  ,eur_g29
08:49:54  36  ,eur_g30
08:49:54  37  ,eur_g31
08:49:54  38  ,eur_g32
08:49:54  39  ,eur_g33
08:49:54  40  ,eur_g34
08:49:54  41  ,eur_g35
08:49:54  42  ,eur_g36
08:49:54  43  ,eur_g37
08:49:54  44  ,eur_g38
08:49:54  45  ,eur_g39
08:49:54  46  ,eur_g40
08:49:54  47  ,eur_g41
08:49:54  48  ,aud_g00
08:49:54  49  ,aud_g01
08:49:54  50  ,aud_g02
08:49:54  51  ,aud_g03
08:49:54  52  ,aud_g04
08:49:54  53  ,aud_g05
08:49:54  54  ,aud_g06
08:49:54  55  ,aud_g07
08:49:54  56  ,aud_g08
08:49:54  57  ,aud_g09
08:49:54  58  ,aud_g10
08:49:54  59  ,aud_g11
08:49:54  60  ,aud_g12
08:49:54  61  ,aud_g13
08:49:54  62  ,aud_g14
08:49:54  63  ,aud_g15
08:49:54  64  ,aud_g16
08:49:54  65  ,aud_g17
08:49:54  66  ,aud_g18
08:49:54  67  ,aud_g19
08:49:54  68  ,aud_g20
08:49:54  69  ,aud_g21
08:49:54  70  ,aud_g22
08:49:54  71  ,aud_g23
08:49:54  72  ,aud_g24
08:49:54  73  ,aud_g25
08:49:54  74  ,aud_g26
08:49:54  75  ,aud_g27
08:49:54  76  ,aud_g28
08:49:54  77  ,aud_g29
08:49:54  78  ,aud_g30
08:49:54  79  ,aud_g31
08:49:54  80  ,aud_g32
08:49:54  81  ,aud_g33
08:49:54  82  ,aud_g34
08:49:54  83  ,aud_g35
08:49:54  84  ,aud_g36
08:49:54  85  ,aud_g37
08:49:54  86  ,aud_g38
08:49:54  87  ,aud_g39
08:49:54  88  ,aud_g40
08:49:54  89  ,aud_g41
08:49:54  90  ,gbp_g00
08:49:54  91  ,gbp_g01
08:49:54  92  ,gbp_g02
08:49:54  93  ,gbp_g03
08:49:54  94  ,gbp_g04
08:49:54  95  ,gbp_g05
08:49:54  96  ,gbp_g06
08:49:54  97  ,gbp_g07
08:49:54  98  ,gbp_g08
08:49:54  99  ,gbp_g09
08:49:54 100  ,gbp_g10
08:49:54 101  ,gbp_g11
08:49:54 102  ,gbp_g12
08:49:54 103  ,gbp_g13
08:49:54 104  ,gbp_g14
08:49:54 105  ,gbp_g15
08:49:54 106  ,gbp_g16
08:49:54 107  ,gbp_g17
08:49:54 108  ,gbp_g18
08:49:54 109  ,gbp_g19
08:49:54 110  ,gbp_g20
08:49:54 111  ,gbp_g21
08:49:54 112  ,gbp_g22
08:49:54 113  ,gbp_g23
08:49:54 114  ,gbp_g24
08:49:54 115  ,gbp_g25
08:49:54 116  ,gbp_g26
08:49:54 117  ,gbp_g27
08:49:54 118  ,gbp_g28
08:49:54 119  ,gbp_g29
08:49:54 120  ,gbp_g30
08:49:54 121  ,gbp_g31
08:49:54 122  ,gbp_g32
08:49:54 123  ,gbp_g33
08:49:54 124  ,gbp_g34
08:49:54 125  ,gbp_g35
08:49:54 126  ,gbp_g36
08:49:54 127  ,gbp_g37
08:49:54 128  ,gbp_g38
08:49:54 129  ,gbp_g39
08:49:54 130  ,gbp_g40
08:49:54 131  ,gbp_g41
08:49:54 132  ,jpy_g00
08:49:54 133  ,jpy_g01
08:49:54 134  ,jpy_g02
08:49:54 135  ,jpy_g03
08:49:54 136  ,jpy_g04
08:49:54 137  ,jpy_g05
08:49:54 138  ,jpy_g06
08:49:54 139  ,jpy_g07
08:49:54 140  ,jpy_g08
08:49:54 141  ,jpy_g09
08:49:54 142  ,jpy_g10
08:49:54 143  ,jpy_g11
08:49:54 144  ,jpy_g12
08:49:54 145  ,jpy_g13
08:49:54 146  ,jpy_g14
08:49:54 147  ,jpy_g15
08:49:54 148  ,jpy_g16
08:49:54 149  ,jpy_g17
08:49:54 150  ,jpy_g18
08:49:54 151  ,jpy_g19
08:49:54 152  ,jpy_g20
08:49:54 153  ,jpy_g21
08:49:54 154  ,jpy_g22
08:49:54 155  ,jpy_g23
08:49:54 156  ,jpy_g24
08:49:54 157  ,jpy_g25
08:49:54 158  ,jpy_g26
08:49:54 159  ,jpy_g27
08:49:54 160  ,jpy_g28
08:49:54 161  ,jpy_g29
08:49:54 162  ,jpy_g30
08:49:54 163  ,jpy_g31
08:49:54 164  ,jpy_g32
08:49:54 165  ,jpy_g33
08:49:54 166  ,jpy_g34
08:49:54 167  ,jpy_g35
08:49:54 168  ,jpy_g36
08:49:54 169  ,jpy_g37
08:49:54 170  ,jpy_g38
08:49:54 171  ,jpy_g39
08:49:54 172  ,jpy_g40
08:49:54 173  ,jpy_g41
08:49:54 174  ,cad_g00
08:49:54 175  ,cad_g01
08:49:54 176  ,cad_g02
08:49:54 177  ,cad_g03
08:49:54 178  ,cad_g04
08:49:54 179  ,cad_g05
08:49:54 180  ,cad_g06
08:49:54 181  ,cad_g07
08:49:54 182  ,cad_g08
08:49:54 183  ,cad_g09
08:49:54 184  ,cad_g10
08:49:54 185  ,cad_g11
08:49:54 186  ,cad_g12
08:49:54 187  ,cad_g13
08:49:54 188  ,cad_g14
08:49:54 189  ,cad_g15
08:49:54 190  ,cad_g16
08:49:54 191  ,cad_g17
08:49:54 192  ,cad_g18
08:49:54 193  ,cad_g19
08:49:54 194  ,cad_g20
08:49:54 195  ,cad_g21
08:49:54 196  ,cad_g22
08:49:54 197  ,cad_g23
08:49:54 198  ,cad_g24
08:49:54 199  ,cad_g25
08:49:54 200  ,cad_g26
08:49:54 201  ,cad_g27
08:49:54 202  ,cad_g28
08:49:54 203  ,cad_g29
08:49:54 204  ,cad_g30
08:49:54 205  ,cad_g31
08:49:54 206  ,cad_g32
08:49:54 207  ,cad_g33
08:49:54 208  ,cad_g34
08:49:54 209  ,cad_g35
08:49:54 210  ,cad_g36
08:49:54 211  ,cad_g37
08:49:54 212  ,cad_g38
08:49:54 213  ,cad_g39
08:49:54 214  ,cad_g40
08:49:54 215  ,cad_g41
08:49:54 216  ,chf_g00
08:49:54 217  ,chf_g01
08:49:54 218  ,chf_g02
08:49:54 219  ,chf_g03
08:49:54 220  ,chf_g04
08:49:54 221  ,chf_g05
08:49:54 222  ,chf_g06
08:49:54 223  ,chf_g07
08:49:54 224  ,chf_g08
08:49:54 225  ,chf_g09
08:49:54 226  ,chf_g10
08:49:54 227  ,chf_g11
08:49:54 228  ,chf_g12
08:49:54 229  ,chf_g13
08:49:54 230  ,chf_g14
08:49:54 231  ,chf_g15
08:49:54 232  ,chf_g16
08:49:54 233  ,chf_g17
08:49:54 234  ,chf_g18
08:49:54 235  ,chf_g19
08:49:54 236  ,chf_g20
08:49:54 237  ,chf_g21
08:49:54 238  ,chf_g22
08:49:54 239  ,chf_g23
08:49:54 240  ,chf_g24
08:49:54 241  ,chf_g25
08:49:54 242  ,chf_g26
08:49:54 243  ,chf_g27
08:49:54 244  ,chf_g28
08:49:54 245  ,chf_g29
08:49:54 246  ,chf_g30
08:49:54 247  ,chf_g31
08:49:54 248  ,chf_g32
08:49:54 249  ,chf_g33
08:49:54 250  ,chf_g34
08:49:54 251  ,chf_g35
08:49:54 252  ,chf_g36
08:49:54 253  ,chf_g37
08:49:54 254  ,chf_g38
08:49:54 255  ,chf_g39
08:49:54 256  ,chf_g40
08:49:54 257  ,chf_g41
08:49:54 258  FROM aud_ms6 m
08:49:54 259  WHERE gatt IN('nup','up')
08:49:54 260  AND 1+m.ydate < '&1'||' '||'&2'
08:49:54 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2011-01-07'||' '||'08:25:00'

View created.

Elapsed: 00:00:00.14
08:49:54 SQL> 
08:49:54 SQL> -- rpt
08:49:54 SQL> 
08:49:54 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt
08:49:54   2  
08:49:54 SQL> SELECT MAX(prdate) FROM bme
08:49:54   2  
08:49:54 SQL> -- Now build model from bme and score sme
08:49:54 SQL> @score1.sql
08:49:54 SQL> -- score1.sql
08:49:54 SQL> 
08:49:54 SQL> -- Does the 1st SVM score
08:49:54 SQL> 
08:49:54 SQL> -- Fill up svmc_apply_prep
08:49:54 SQL> @score.sql
08:49:54 SQL> --
08:49:54 SQL> -- score.sql
08:49:54 SQL> --
08:49:54 SQL> 
08:49:54 SQL> -- usage: score.sql
08:49:54 SQL> 
08:49:54 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
08:49:54 SQL> 
08:49:54 SQL> DEFINE target	= 'gatt'
08:49:54 SQL> DEFINE model_name = 'forex15'
08:49:54 SQL> DEFINE bldtable	= 'bme'
08:49:54 SQL> DEFINE scoretable = 'sme'
08:49:54 SQL> DEFINE case_id	= 'prdate'
08:49:54 SQL> 
08:49:54 SQL> -- Define a variable to help me exclude some columns from some data mining calls
08:49:54 SQL> DEFINE exclude1 = "'&target','&case_id'"
08:49:54 SQL> 
08:49:54 SQL> -- Builds an SVM model using pl/sql.
08:49:54 SQL> 
08:49:54 SQL> -----------------------------------------------------------------------
08:49:54 SQL> --			    BUILD THE MODEL
08:49:54 SQL> -----------------------------------------------------------------------
08:49:54 SQL> 
08:49:54 SQL> -- Cleanup old build data preparation objects for repeat runs
08:49:54 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.00
08:49:54 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.01
08:49:54 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.00
08:49:54 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.01
08:49:54 SQL> 
08:49:54 SQL> 
08:49:54 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
08:49:54 SQL> --
08:49:54 SQL> -- DROP	TABLE svmc_settings ;
08:49:54 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
08:49:54 SQL> -- DELETE svmc_settings;
08:49:54 SQL> 
08:49:54 SQL> -- The default classification algorithm is Naive Bayes. So override
08:49:54 SQL> -- this choice to SVM using a settings table.
08:49:54 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
08:49:54 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
08:49:54 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
08:49:54 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
08:49:54 SQL> -- models.
08:49:54 SQL> --
08:49:54 SQL> 
08:49:54 SQL> -- Do this once and then comment it out.
08:49:54 SQL> -- That makes script go faster.
08:49:54 SQL> -- BEGIN
08:49:54 SQL> -- -- Populate settings table
08:49:54 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
08:49:54 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
08:49:54 SQL> --
08:49:54 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
08:49:54 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
08:49:54 SQL> --
08:49:54 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
08:49:54 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
08:49:54 SQL> --   COMMIT;
08:49:54 SQL> -- END;
08:49:54 SQL> -- /
08:49:54 SQL> 
08:49:54 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
08:49:54 SQL> 
08:49:54 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
08:49:54   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:49:54   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
08:49:54 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
08:49:54   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:49:54   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.09
08:49:54 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
08:49:54   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:49:54   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
08:49:54 SQL> 
08:49:54 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
08:49:54   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:49:54   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
08:49:54 SQL> 
08:49:54 SQL> --------------------------------
08:49:54 SQL> -- PREPARE BUILD (TRAINING) DATA
08:49:54 SQL> --
08:49:54 SQL> 
08:49:54 SQL> -- 1. Missing Value treatment for all Predictors and
08:49:54 SQL> -- 2. Outlier Treatment and
08:49:54 SQL> -- 3. Normalization are performed below.
08:49:54 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
08:49:54 SQL> --    normalized here.
08:49:54 SQL> 
08:49:54 SQL> BEGIN
08:49:54   2  	-- Perform missing value treatment for all predictors
08:49:54   3  	-- create miss tables
08:49:54   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
08:49:54   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
08:49:54   6  
08:49:54   7  	-- populate miss tables
08:49:54   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
08:49:54   9  	  miss_table_name => 'svmc_miss_num',
08:49:54  10  	  data_table_name => '&bldtable',
08:49:54  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
08:49:54  12  
08:49:54  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
08:49:54  14  	  miss_table_name => 'svmc_miss_cat',
08:49:54  15  	  data_table_name => '&bldtable',
08:49:54  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
08:49:54  17  
08:49:54  18  	-- xform input data to replace missing values
08:49:54  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
08:49:54  20  	  miss_table_name => 'svmc_miss_num',
08:49:54  21  	  data_table_name => '&bldtable',
08:49:54  22  	  xform_view_name => 'xformed_build_miss_num');
08:49:54  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
08:49:54  24  	  miss_table_name => 'svmc_miss_cat',
08:49:54  25  	  data_table_name => '&bldtable',
08:49:54  26  	  xform_view_name => 'xformed_build_miss_cat');
08:49:54  27  
08:49:54  28  	-- Perform outlier treatment.
08:49:54  29  	-- create clip table
08:49:54  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
08:49:54  31  
08:49:54  32  	-- populate clip table
08:49:54  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
08:49:54  34  	  clip_table_name => 'svmc_clip',
08:49:55  35  	  data_table_name => '&bldtable',
08:49:55  36  	  tail_frac	  => 0.025,
08:49:55  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
08:49:55  38  
08:49:55  39  	-- xform input data to winsorized data
08:49:55  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
08:49:55  41  	  clip_table_name => 'svmc_clip',
08:49:55  42  	  data_table_name => '&bldtable',
08:49:55  43  	  xform_view_name => 'svmc_winsor');
08:49:55  44  
08:49:55  45  	-- create normalization table
08:49:55  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
08:49:55  47  
08:49:55  48  	-- populate normalization table based on winsorized data
08:49:55  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
08:49:55  50  	  norm_table_name => 'svmc_norm',
08:49:55  51  	  data_table_name => 'svmc_winsor',
08:49:55  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
08:49:55  53  
08:49:55  54  	-- normalize the original data
08:49:55  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
08:49:55  56  	  norm_table_name => 'svmc_norm',
08:49:55  57  	  data_table_name => '&bldtable',
08:49:55  58  	  xform_view_name => 'svmc_build_prep');
08:49:55  59  END;
08:49:55  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:19.05
08:50:14 SQL> 
08:50:14 SQL> ---------------------
08:50:14 SQL> -- CREATE A NEW MODEL
08:50:14 SQL> --
08:50:14 SQL> -- Cleanup old model with the same name for repeat runs
08:50:14 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
08:50:14   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:50:14   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex15');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.54
08:50:14 SQL> 
08:50:14 SQL> -- Build a new SVM Model
08:50:14 SQL> BEGIN
08:50:14   2  	DBMS_DATA_MINING.CREATE_MODEL(
08:50:14   3  	  model_name	      => '&model_name',
08:50:14   4  	  mining_function     => dbms_data_mining.classification,
08:50:14   5  	  data_table_name     => 'svmc_build_prep',
08:50:14   6  	  case_id_column_name => '&case_id',
08:50:14   7  	  target_column_name  => '&target',
08:50:14   8  	  settings_table_name => 'svmc_settings');
08:50:14   9  END;
08:50:14  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex15',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:27.84
08:50:42 SQL> 
08:50:42 SQL> -----------------------------------------------------------------------
08:50:42 SQL> --			       APPLY/score THE MODEL
08:50:42 SQL> -----------------------------------------------------------------------
08:50:42 SQL> 
08:50:42 SQL> -- Cleanup old scoring data preparation objects for repeat runs
08:50:42 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
08:50:42   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:50:42   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
08:50:42 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
08:50:42   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:50:42   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
08:50:42 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
08:50:42   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:50:42   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.09
08:50:42 SQL> -----------------------
08:50:42 SQL> -- PREPARE SCORING DATA
08:50:42 SQL> --
08:50:42 SQL> -- If the data for model creation has been prepared, then the data
08:50:42 SQL> -- to be scored using the model must be prepared in the same manner
08:50:42 SQL> -- in order to obtain meaningful results.
08:50:42 SQL> --
08:50:42 SQL> -- 1. Missing Value treatment for all Predictors and
08:50:42 SQL> -- 2. Normalization
08:50:42 SQL> -- No outlier treatment will be performed during test and apply. The
08:50:42 SQL> -- normalization step is sufficient, since the normalization parameters
08:50:42 SQL> -- already capture the effects of outlier treatment done with build data.
08:50:42 SQL> --
08:50:42 SQL> BEGIN
08:50:42   2  	-- Xform Test data to replace missing values
08:50:42   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
08:50:42   4  	  miss_table_name => 'svmc_miss_num',
08:50:42   5  	  data_table_name => '&scoretable',
08:50:42   6  	  xform_view_name => 'xformed_apply_miss_num');
08:50:42   7  
08:50:42   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
08:50:42   9  	  miss_table_name => 'svmc_miss_cat',
08:50:42  10  	  data_table_name => '&scoretable',
08:50:42  11  	  xform_view_name => 'xformed_apply_miss_cat');
08:50:42  12  
08:50:42  13  	-- Normalize the data to be scored
08:50:42  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
08:50:42  15  	  norm_table_name => 'svmc_norm',
08:50:42  16  	  data_table_name => '&scoretable',
08:50:42  17  	  xform_view_name => 'svmc_apply_prep');
08:50:42  18  END;
08:50:42  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.11
08:50:44 SQL> 
08:50:44 SQL> -- Use same model_name used in score.sql
08:50:44 SQL> DEFINE model_name = 'forex15'
08:50:44 SQL> 
08:50:44 SQL> -- CREATE TABLE fxscores6 (prdate VARCHAR2(30),score NUMBER,rundate DATE,pair VARCHAR2(8),ydate DATE);
08:50:44 SQL> 
08:50:44 SQL> DELETE fxscores6 WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.05
08:50:44 SQL> 
08:50:44 SQL> INSERT INTO fxscores6 (prdate,score,rundate,pair,ydate)
08:50:44   2  SELECT
08:50:44   3  prdate
08:50:44   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
08:50:44   5  ,sysdate
08:50:44   6  ,SUBSTR(prdate,1,3)pair
08:50:44   7  ,SUBSTR(prdate,4,19)ydate
08:50:44   8  FROM svmc_apply_prep
08:50:44   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex15,'up' USING *)score

1 row created.

Elapsed: 00:00:00.21
08:50:45 SQL> @aud_score1day.sql  2011-01-07 08:30:00
08:50:45 SQL> --
08:50:45 SQL> -- aud_score1day.sql
08:50:45 SQL> --
08:50:45 SQL> 
08:50:45 SQL> CREATE OR REPLACE VIEW sme AS
08:50:45   2  SELECT
08:50:45   3  'aud'||m.ydate prdate
08:50:45   4  ,NULL gatt
08:50:45   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
08:50:45   6  ,eur_g00
08:50:45   7  ,eur_g01
08:50:45   8  ,eur_g02
08:50:45   9  ,eur_g03
08:50:45  10  ,eur_g04
08:50:45  11  ,eur_g05
08:50:45  12  ,eur_g06
08:50:45  13  ,eur_g07
08:50:45  14  ,eur_g08
08:50:45  15  ,eur_g09
08:50:45  16  ,eur_g10
08:50:45  17  ,eur_g11
08:50:45  18  ,eur_g12
08:50:45  19  ,eur_g13
08:50:45  20  ,eur_g14
08:50:45  21  ,eur_g15
08:50:45  22  ,eur_g16
08:50:45  23  ,eur_g17
08:50:45  24  ,eur_g18
08:50:45  25  ,eur_g19
08:50:45  26  ,eur_g20
08:50:45  27  ,eur_g21
08:50:45  28  ,eur_g22
08:50:45  29  ,eur_g23
08:50:45  30  ,eur_g24
08:50:45  31  ,eur_g25
08:50:45  32  ,eur_g26
08:50:45  33  ,eur_g27
08:50:45  34  ,eur_g28
08:50:45  35  ,eur_g29
08:50:45  36  ,eur_g30
08:50:45  37  ,eur_g31
08:50:45  38  ,eur_g32
08:50:45  39  ,eur_g33
08:50:45  40  ,eur_g34
08:50:45  41  ,eur_g35
08:50:45  42  ,eur_g36
08:50:45  43  ,eur_g37
08:50:45  44  ,eur_g38
08:50:45  45  ,eur_g39
08:50:45  46  ,eur_g40
08:50:45  47  ,eur_g41
08:50:45  48  ,aud_g00
08:50:45  49  ,aud_g01
08:50:45  50  ,aud_g02
08:50:45  51  ,aud_g03
08:50:45  52  ,aud_g04
08:50:45  53  ,aud_g05
08:50:45  54  ,aud_g06
08:50:45  55  ,aud_g07
08:50:45  56  ,aud_g08
08:50:45  57  ,aud_g09
08:50:45  58  ,aud_g10
08:50:45  59  ,aud_g11
08:50:45  60  ,aud_g12
08:50:45  61  ,aud_g13
08:50:45  62  ,aud_g14
08:50:45  63  ,aud_g15
08:50:45  64  ,aud_g16
08:50:45  65  ,aud_g17
08:50:45  66  ,aud_g18
08:50:45  67  ,aud_g19
08:50:45  68  ,aud_g20
08:50:45  69  ,aud_g21
08:50:45  70  ,aud_g22
08:50:45  71  ,aud_g23
08:50:45  72  ,aud_g24
08:50:45  73  ,aud_g25
08:50:45  74  ,aud_g26
08:50:45  75  ,aud_g27
08:50:45  76  ,aud_g28
08:50:45  77  ,aud_g29
08:50:45  78  ,aud_g30
08:50:45  79  ,aud_g31
08:50:45  80  ,aud_g32
08:50:45  81  ,aud_g33
08:50:45  82  ,aud_g34
08:50:45  83  ,aud_g35
08:50:45  84  ,aud_g36
08:50:45  85  ,aud_g37
08:50:45  86  ,aud_g38
08:50:45  87  ,aud_g39
08:50:45  88  ,aud_g40
08:50:45  89  ,aud_g41
08:50:45  90  ,gbp_g00
08:50:45  91  ,gbp_g01
08:50:45  92  ,gbp_g02
08:50:45  93  ,gbp_g03
08:50:45  94  ,gbp_g04
08:50:45  95  ,gbp_g05
08:50:45  96  ,gbp_g06
08:50:45  97  ,gbp_g07
08:50:45  98  ,gbp_g08
08:50:45  99  ,gbp_g09
08:50:45 100  ,gbp_g10
08:50:45 101  ,gbp_g11
08:50:45 102  ,gbp_g12
08:50:45 103  ,gbp_g13
08:50:45 104  ,gbp_g14
08:50:45 105  ,gbp_g15
08:50:45 106  ,gbp_g16
08:50:45 107  ,gbp_g17
08:50:45 108  ,gbp_g18
08:50:45 109  ,gbp_g19
08:50:45 110  ,gbp_g20
08:50:45 111  ,gbp_g21
08:50:45 112  ,gbp_g22
08:50:45 113  ,gbp_g23
08:50:45 114  ,gbp_g24
08:50:45 115  ,gbp_g25
08:50:45 116  ,gbp_g26
08:50:45 117  ,gbp_g27
08:50:45 118  ,gbp_g28
08:50:45 119  ,gbp_g29
08:50:45 120  ,gbp_g30
08:50:45 121  ,gbp_g31
08:50:45 122  ,gbp_g32
08:50:45 123  ,gbp_g33
08:50:45 124  ,gbp_g34
08:50:45 125  ,gbp_g35
08:50:45 126  ,gbp_g36
08:50:45 127  ,gbp_g37
08:50:45 128  ,gbp_g38
08:50:45 129  ,gbp_g39
08:50:45 130  ,gbp_g40
08:50:45 131  ,gbp_g41
08:50:45 132  ,jpy_g00
08:50:45 133  ,jpy_g01
08:50:45 134  ,jpy_g02
08:50:45 135  ,jpy_g03
08:50:45 136  ,jpy_g04
08:50:45 137  ,jpy_g05
08:50:45 138  ,jpy_g06
08:50:45 139  ,jpy_g07
08:50:45 140  ,jpy_g08
08:50:45 141  ,jpy_g09
08:50:45 142  ,jpy_g10
08:50:45 143  ,jpy_g11
08:50:45 144  ,jpy_g12
08:50:45 145  ,jpy_g13
08:50:45 146  ,jpy_g14
08:50:45 147  ,jpy_g15
08:50:45 148  ,jpy_g16
08:50:45 149  ,jpy_g17
08:50:45 150  ,jpy_g18
08:50:45 151  ,jpy_g19
08:50:45 152  ,jpy_g20
08:50:45 153  ,jpy_g21
08:50:45 154  ,jpy_g22
08:50:45 155  ,jpy_g23
08:50:45 156  ,jpy_g24
08:50:45 157  ,jpy_g25
08:50:45 158  ,jpy_g26
08:50:45 159  ,jpy_g27
08:50:45 160  ,jpy_g28
08:50:45 161  ,jpy_g29
08:50:45 162  ,jpy_g30
08:50:45 163  ,jpy_g31
08:50:45 164  ,jpy_g32
08:50:45 165  ,jpy_g33
08:50:45 166  ,jpy_g34
08:50:45 167  ,jpy_g35
08:50:45 168  ,jpy_g36
08:50:45 169  ,jpy_g37
08:50:45 170  ,jpy_g38
08:50:45 171  ,jpy_g39
08:50:45 172  ,jpy_g40
08:50:45 173  ,jpy_g41
08:50:45 174  ,cad_g00
08:50:45 175  ,cad_g01
08:50:45 176  ,cad_g02
08:50:45 177  ,cad_g03
08:50:45 178  ,cad_g04
08:50:45 179  ,cad_g05
08:50:45 180  ,cad_g06
08:50:45 181  ,cad_g07
08:50:45 182  ,cad_g08
08:50:45 183  ,cad_g09
08:50:45 184  ,cad_g10
08:50:45 185  ,cad_g11
08:50:45 186  ,cad_g12
08:50:45 187  ,cad_g13
08:50:45 188  ,cad_g14
08:50:45 189  ,cad_g15
08:50:45 190  ,cad_g16
08:50:45 191  ,cad_g17
08:50:45 192  ,cad_g18
08:50:45 193  ,cad_g19
08:50:45 194  ,cad_g20
08:50:45 195  ,cad_g21
08:50:45 196  ,cad_g22
08:50:45 197  ,cad_g23
08:50:45 198  ,cad_g24
08:50:45 199  ,cad_g25
08:50:45 200  ,cad_g26
08:50:45 201  ,cad_g27
08:50:45 202  ,cad_g28
08:50:45 203  ,cad_g29
08:50:45 204  ,cad_g30
08:50:45 205  ,cad_g31
08:50:45 206  ,cad_g32
08:50:45 207  ,cad_g33
08:50:45 208  ,cad_g34
08:50:45 209  ,cad_g35
08:50:45 210  ,cad_g36
08:50:45 211  ,cad_g37
08:50:45 212  ,cad_g38
08:50:45 213  ,cad_g39
08:50:45 214  ,cad_g40
08:50:45 215  ,cad_g41
08:50:45 216  ,chf_g00
08:50:45 217  ,chf_g01
08:50:45 218  ,chf_g02
08:50:45 219  ,chf_g03
08:50:45 220  ,chf_g04
08:50:45 221  ,chf_g05
08:50:45 222  ,chf_g06
08:50:45 223  ,chf_g07
08:50:45 224  ,chf_g08
08:50:45 225  ,chf_g09
08:50:45 226  ,chf_g10
08:50:45 227  ,chf_g11
08:50:45 228  ,chf_g12
08:50:45 229  ,chf_g13
08:50:45 230  ,chf_g14
08:50:45 231  ,chf_g15
08:50:45 232  ,chf_g16
08:50:45 233  ,chf_g17
08:50:45 234  ,chf_g18
08:50:45 235  ,chf_g19
08:50:45 236  ,chf_g20
08:50:45 237  ,chf_g21
08:50:45 238  ,chf_g22
08:50:45 239  ,chf_g23
08:50:45 240  ,chf_g24
08:50:45 241  ,chf_g25
08:50:45 242  ,chf_g26
08:50:45 243  ,chf_g27
08:50:45 244  ,chf_g28
08:50:45 245  ,chf_g29
08:50:45 246  ,chf_g30
08:50:45 247  ,chf_g31
08:50:45 248  ,chf_g32
08:50:45 249  ,chf_g33
08:50:45 250  ,chf_g34
08:50:45 251  ,chf_g35
08:50:45 252  ,chf_g36
08:50:45 253  ,chf_g37
08:50:45 254  ,chf_g38
08:50:45 255  ,chf_g39
08:50:45 256  ,chf_g40
08:50:45 257  ,chf_g41
08:50:45 258  FROM aud_ms6 m
08:50:45 259  WHERE m.ydate = '&1'||' '||'&2'
08:50:45 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2011-01-07'||' '||'08:30:00'

View created.

Elapsed: 00:00:00.13
08:50:45 SQL> 
08:50:45 SQL> -- rpt
08:50:45 SQL> -- We should see just 1 row:
08:50:45 SQL> 
08:50:45 SQL> SELECT COUNT(prdate) FROM sme
08:50:45   2  
08:50:45 SQL> -- Build the model:
08:50:45 SQL> CREATE OR REPLACE VIEW bme AS
08:50:45   2  SELECT
08:50:45   3  'aud'||m.ydate prdate
08:50:45   4  ,gatt
08:50:45   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
08:50:45   6  ,eur_g00
08:50:45   7  ,eur_g01
08:50:45   8  ,eur_g02
08:50:45   9  ,eur_g03
08:50:45  10  ,eur_g04
08:50:45  11  ,eur_g05
08:50:45  12  ,eur_g06
08:50:45  13  ,eur_g07
08:50:45  14  ,eur_g08
08:50:45  15  ,eur_g09
08:50:45  16  ,eur_g10
08:50:45  17  ,eur_g11
08:50:45  18  ,eur_g12
08:50:45  19  ,eur_g13
08:50:45  20  ,eur_g14
08:50:45  21  ,eur_g15
08:50:45  22  ,eur_g16
08:50:45  23  ,eur_g17
08:50:45  24  ,eur_g18
08:50:45  25  ,eur_g19
08:50:45  26  ,eur_g20
08:50:45  27  ,eur_g21
08:50:45  28  ,eur_g22
08:50:45  29  ,eur_g23
08:50:45  30  ,eur_g24
08:50:45  31  ,eur_g25
08:50:45  32  ,eur_g26
08:50:45  33  ,eur_g27
08:50:45  34  ,eur_g28
08:50:45  35  ,eur_g29
08:50:45  36  ,eur_g30
08:50:45  37  ,eur_g31
08:50:45  38  ,eur_g32
08:50:45  39  ,eur_g33
08:50:45  40  ,eur_g34
08:50:45  41  ,eur_g35
08:50:45  42  ,eur_g36
08:50:45  43  ,eur_g37
08:50:45  44  ,eur_g38
08:50:45  45  ,eur_g39
08:50:45  46  ,eur_g40
08:50:45  47  ,eur_g41
08:50:45  48  ,aud_g00
08:50:45  49  ,aud_g01
08:50:45  50  ,aud_g02
08:50:45  51  ,aud_g03
08:50:45  52  ,aud_g04
08:50:45  53  ,aud_g05
08:50:45  54  ,aud_g06
08:50:45  55  ,aud_g07
08:50:45  56  ,aud_g08
08:50:45  57  ,aud_g09
08:50:45  58  ,aud_g10
08:50:45  59  ,aud_g11
08:50:45  60  ,aud_g12
08:50:45  61  ,aud_g13
08:50:45  62  ,aud_g14
08:50:45  63  ,aud_g15
08:50:45  64  ,aud_g16
08:50:45  65  ,aud_g17
08:50:45  66  ,aud_g18
08:50:45  67  ,aud_g19
08:50:45  68  ,aud_g20
08:50:45  69  ,aud_g21
08:50:45  70  ,aud_g22
08:50:45  71  ,aud_g23
08:50:45  72  ,aud_g24
08:50:45  73  ,aud_g25
08:50:45  74  ,aud_g26
08:50:45  75  ,aud_g27
08:50:45  76  ,aud_g28
08:50:45  77  ,aud_g29
08:50:45  78  ,aud_g30
08:50:45  79  ,aud_g31
08:50:45  80  ,aud_g32
08:50:45  81  ,aud_g33
08:50:45  82  ,aud_g34
08:50:45  83  ,aud_g35
08:50:45  84  ,aud_g36
08:50:45  85  ,aud_g37
08:50:45  86  ,aud_g38
08:50:45  87  ,aud_g39
08:50:45  88  ,aud_g40
08:50:45  89  ,aud_g41
08:50:45  90  ,gbp_g00
08:50:45  91  ,gbp_g01
08:50:45  92  ,gbp_g02
08:50:45  93  ,gbp_g03
08:50:45  94  ,gbp_g04
08:50:45  95  ,gbp_g05
08:50:45  96  ,gbp_g06
08:50:45  97  ,gbp_g07
08:50:45  98  ,gbp_g08
08:50:45  99  ,gbp_g09
08:50:45 100  ,gbp_g10
08:50:45 101  ,gbp_g11
08:50:45 102  ,gbp_g12
08:50:45 103  ,gbp_g13
08:50:45 104  ,gbp_g14
08:50:45 105  ,gbp_g15
08:50:45 106  ,gbp_g16
08:50:45 107  ,gbp_g17
08:50:45 108  ,gbp_g18
08:50:45 109  ,gbp_g19
08:50:45 110  ,gbp_g20
08:50:45 111  ,gbp_g21
08:50:45 112  ,gbp_g22
08:50:45 113  ,gbp_g23
08:50:45 114  ,gbp_g24
08:50:45 115  ,gbp_g25
08:50:45 116  ,gbp_g26
08:50:45 117  ,gbp_g27
08:50:45 118  ,gbp_g28
08:50:45 119  ,gbp_g29
08:50:45 120  ,gbp_g30
08:50:45 121  ,gbp_g31
08:50:45 122  ,gbp_g32
08:50:45 123  ,gbp_g33
08:50:45 124  ,gbp_g34
08:50:45 125  ,gbp_g35
08:50:45 126  ,gbp_g36
08:50:45 127  ,gbp_g37
08:50:45 128  ,gbp_g38
08:50:45 129  ,gbp_g39
08:50:45 130  ,gbp_g40
08:50:45 131  ,gbp_g41
08:50:45 132  ,jpy_g00
08:50:45 133  ,jpy_g01
08:50:45 134  ,jpy_g02
08:50:45 135  ,jpy_g03
08:50:45 136  ,jpy_g04
08:50:45 137  ,jpy_g05
08:50:45 138  ,jpy_g06
08:50:45 139  ,jpy_g07
08:50:45 140  ,jpy_g08
08:50:45 141  ,jpy_g09
08:50:45 142  ,jpy_g10
08:50:45 143  ,jpy_g11
08:50:45 144  ,jpy_g12
08:50:45 145  ,jpy_g13
08:50:45 146  ,jpy_g14
08:50:45 147  ,jpy_g15
08:50:45 148  ,jpy_g16
08:50:45 149  ,jpy_g17
08:50:45 150  ,jpy_g18
08:50:45 151  ,jpy_g19
08:50:45 152  ,jpy_g20
08:50:45 153  ,jpy_g21
08:50:45 154  ,jpy_g22
08:50:45 155  ,jpy_g23
08:50:45 156  ,jpy_g24
08:50:45 157  ,jpy_g25
08:50:45 158  ,jpy_g26
08:50:45 159  ,jpy_g27
08:50:45 160  ,jpy_g28
08:50:45 161  ,jpy_g29
08:50:45 162  ,jpy_g30
08:50:45 163  ,jpy_g31
08:50:45 164  ,jpy_g32
08:50:45 165  ,jpy_g33
08:50:45 166  ,jpy_g34
08:50:45 167  ,jpy_g35
08:50:45 168  ,jpy_g36
08:50:45 169  ,jpy_g37
08:50:45 170  ,jpy_g38
08:50:45 171  ,jpy_g39
08:50:45 172  ,jpy_g40
08:50:45 173  ,jpy_g41
08:50:45 174  ,cad_g00
08:50:45 175  ,cad_g01
08:50:45 176  ,cad_g02
08:50:45 177  ,cad_g03
08:50:45 178  ,cad_g04
08:50:45 179  ,cad_g05
08:50:45 180  ,cad_g06
08:50:45 181  ,cad_g07
08:50:45 182  ,cad_g08
08:50:45 183  ,cad_g09
08:50:45 184  ,cad_g10
08:50:45 185  ,cad_g11
08:50:45 186  ,cad_g12
08:50:45 187  ,cad_g13
08:50:45 188  ,cad_g14
08:50:45 189  ,cad_g15
08:50:45 190  ,cad_g16
08:50:45 191  ,cad_g17
08:50:45 192  ,cad_g18
08:50:45 193  ,cad_g19
08:50:45 194  ,cad_g20
08:50:45 195  ,cad_g21
08:50:45 196  ,cad_g22
08:50:45 197  ,cad_g23
08:50:45 198  ,cad_g24
08:50:45 199  ,cad_g25
08:50:45 200  ,cad_g26
08:50:45 201  ,cad_g27
08:50:45 202  ,cad_g28
08:50:45 203  ,cad_g29
08:50:45 204  ,cad_g30
08:50:45 205  ,cad_g31
08:50:45 206  ,cad_g32
08:50:45 207  ,cad_g33
08:50:45 208  ,cad_g34
08:50:45 209  ,cad_g35
08:50:45 210  ,cad_g36
08:50:45 211  ,cad_g37
08:50:45 212  ,cad_g38
08:50:45 213  ,cad_g39
08:50:45 214  ,cad_g40
08:50:45 215  ,cad_g41
08:50:45 216  ,chf_g00
08:50:45 217  ,chf_g01
08:50:45 218  ,chf_g02
08:50:45 219  ,chf_g03
08:50:45 220  ,chf_g04
08:50:45 221  ,chf_g05
08:50:45 222  ,chf_g06
08:50:45 223  ,chf_g07
08:50:45 224  ,chf_g08
08:50:45 225  ,chf_g09
08:50:45 226  ,chf_g10
08:50:45 227  ,chf_g11
08:50:45 228  ,chf_g12
08:50:45 229  ,chf_g13
08:50:45 230  ,chf_g14
08:50:45 231  ,chf_g15
08:50:45 232  ,chf_g16
08:50:45 233  ,chf_g17
08:50:45 234  ,chf_g18
08:50:45 235  ,chf_g19
08:50:45 236  ,chf_g20
08:50:45 237  ,chf_g21
08:50:45 238  ,chf_g22
08:50:45 239  ,chf_g23
08:50:45 240  ,chf_g24
08:50:45 241  ,chf_g25
08:50:45 242  ,chf_g26
08:50:45 243  ,chf_g27
08:50:45 244  ,chf_g28
08:50:45 245  ,chf_g29
08:50:45 246  ,chf_g30
08:50:45 247  ,chf_g31
08:50:45 248  ,chf_g32
08:50:45 249  ,chf_g33
08:50:45 250  ,chf_g34
08:50:45 251  ,chf_g35
08:50:45 252  ,chf_g36
08:50:45 253  ,chf_g37
08:50:45 254  ,chf_g38
08:50:45 255  ,chf_g39
08:50:45 256  ,chf_g40
08:50:45 257  ,chf_g41
08:50:45 258  FROM aud_ms6 m
08:50:45 259  WHERE gatt IN('nup','up')
08:50:45 260  AND 1+m.ydate < '&1'||' '||'&2'
08:50:45 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2011-01-07'||' '||'08:30:00'

View created.

Elapsed: 00:00:00.12
08:50:45 SQL> 
08:50:45 SQL> -- rpt
08:50:45 SQL> 
08:50:45 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt
08:50:45   2  
08:50:45 SQL> SELECT MAX(prdate) FROM bme
08:50:45   2  
08:50:45 SQL> -- Now build model from bme and score sme
08:50:45 SQL> @score1.sql
08:50:45 SQL> -- score1.sql
08:50:45 SQL> 
08:50:45 SQL> -- Does the 1st SVM score
08:50:45 SQL> 
08:50:45 SQL> -- Fill up svmc_apply_prep
08:50:45 SQL> @score.sql
08:50:45 SQL> --
08:50:45 SQL> -- score.sql
08:50:45 SQL> --
08:50:45 SQL> 
08:50:45 SQL> -- usage: score.sql
08:50:45 SQL> 
08:50:45 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
08:50:45 SQL> 
08:50:45 SQL> DEFINE target	= 'gatt'
08:50:45 SQL> DEFINE model_name = 'forex15'
08:50:45 SQL> DEFINE bldtable	= 'bme'
08:50:45 SQL> DEFINE scoretable = 'sme'
08:50:45 SQL> DEFINE case_id	= 'prdate'
08:50:45 SQL> 
08:50:45 SQL> -- Define a variable to help me exclude some columns from some data mining calls
08:50:45 SQL> DEFINE exclude1 = "'&target','&case_id'"
08:50:45 SQL> 
08:50:45 SQL> -- Builds an SVM model using pl/sql.
08:50:45 SQL> 
08:50:45 SQL> -----------------------------------------------------------------------
08:50:45 SQL> --			    BUILD THE MODEL
08:50:45 SQL> -----------------------------------------------------------------------
08:50:45 SQL> 
08:50:45 SQL> -- Cleanup old build data preparation objects for repeat runs
08:50:45 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.01
08:50:45 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
08:50:45 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.00
08:50:45 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.00
08:50:45 SQL> 
08:50:45 SQL> 
08:50:45 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
08:50:45 SQL> --
08:50:45 SQL> -- DROP	TABLE svmc_settings ;
08:50:45 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
08:50:45 SQL> -- DELETE svmc_settings;
08:50:45 SQL> 
08:50:45 SQL> -- The default classification algorithm is Naive Bayes. So override
08:50:45 SQL> -- this choice to SVM using a settings table.
08:50:45 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
08:50:45 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
08:50:45 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
08:50:45 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
08:50:45 SQL> -- models.
08:50:45 SQL> --
08:50:45 SQL> 
08:50:45 SQL> -- Do this once and then comment it out.
08:50:45 SQL> -- That makes script go faster.
08:50:45 SQL> -- BEGIN
08:50:45 SQL> -- -- Populate settings table
08:50:45 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
08:50:45 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
08:50:45 SQL> --
08:50:45 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
08:50:45 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
08:50:45 SQL> --
08:50:45 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
08:50:45 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
08:50:45 SQL> --   COMMIT;
08:50:45 SQL> -- END;
08:50:45 SQL> -- /
08:50:45 SQL> 
08:50:45 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.01
08:50:45 SQL> 
08:50:45 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
08:50:45   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:50:45   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
08:50:45 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
08:50:45   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:50:45   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
08:50:45 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
08:50:45   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:50:45   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
08:50:45 SQL> 
08:50:45 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
08:50:45   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:50:45   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
08:50:45 SQL> 
08:50:45 SQL> --------------------------------
08:50:45 SQL> -- PREPARE BUILD (TRAINING) DATA
08:50:45 SQL> --
08:50:45 SQL> 
08:50:45 SQL> -- 1. Missing Value treatment for all Predictors and
08:50:45 SQL> -- 2. Outlier Treatment and
08:50:45 SQL> -- 3. Normalization are performed below.
08:50:45 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
08:50:45 SQL> --    normalized here.
08:50:45 SQL> 
08:50:45 SQL> BEGIN
08:50:45   2  	-- Perform missing value treatment for all predictors
08:50:45   3  	-- create miss tables
08:50:45   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
08:50:45   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
08:50:45   6  
08:50:45   7  	-- populate miss tables
08:50:45   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
08:50:45   9  	  miss_table_name => 'svmc_miss_num',
08:50:45  10  	  data_table_name => '&bldtable',
08:50:45  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
08:50:45  12  
08:50:45  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
08:50:45  14  	  miss_table_name => 'svmc_miss_cat',
08:50:45  15  	  data_table_name => '&bldtable',
08:50:45  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
08:50:45  17  
08:50:45  18  	-- xform input data to replace missing values
08:50:45  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
08:50:45  20  	  miss_table_name => 'svmc_miss_num',
08:50:45  21  	  data_table_name => '&bldtable',
08:50:45  22  	  xform_view_name => 'xformed_build_miss_num');
08:50:45  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
08:50:45  24  	  miss_table_name => 'svmc_miss_cat',
08:50:45  25  	  data_table_name => '&bldtable',
08:50:45  26  	  xform_view_name => 'xformed_build_miss_cat');
08:50:45  27  
08:50:45  28  	-- Perform outlier treatment.
08:50:45  29  	-- create clip table
08:50:45  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
08:50:45  31  
08:50:45  32  	-- populate clip table
08:50:45  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
08:50:45  34  	  clip_table_name => 'svmc_clip',
08:50:45  35  	  data_table_name => '&bldtable',
08:50:45  36  	  tail_frac	  => 0.025,
08:50:45  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
08:50:45  38  
08:50:45  39  	-- xform input data to winsorized data
08:50:45  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
08:50:45  41  	  clip_table_name => 'svmc_clip',
08:50:45  42  	  data_table_name => '&bldtable',
08:50:45  43  	  xform_view_name => 'svmc_winsor');
08:50:45  44  
08:50:45  45  	-- create normalization table
08:50:45  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
08:50:45  47  
08:50:45  48  	-- populate normalization table based on winsorized data
08:50:45  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
08:50:45  50  	  norm_table_name => 'svmc_norm',
08:50:45  51  	  data_table_name => 'svmc_winsor',
08:50:45  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
08:50:45  53  
08:50:45  54  	-- normalize the original data
08:50:45  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
08:50:45  56  	  norm_table_name => 'svmc_norm',
08:50:45  57  	  data_table_name => '&bldtable',
08:50:45  58  	  xform_view_name => 'svmc_build_prep');
08:50:45  59  END;
08:50:45  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:18.57
08:51:04 SQL> 
08:51:04 SQL> ---------------------
08:51:04 SQL> -- CREATE A NEW MODEL
08:51:04 SQL> --
08:51:04 SQL> -- Cleanup old model with the same name for repeat runs
08:51:04 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
08:51:04   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:51:04   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex15');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.10
08:51:05 SQL> 
08:51:05 SQL> -- Build a new SVM Model
08:51:05 SQL> BEGIN
08:51:05   2  	DBMS_DATA_MINING.CREATE_MODEL(
08:51:05   3  	  model_name	      => '&model_name',
08:51:05   4  	  mining_function     => dbms_data_mining.classification,
08:51:05   5  	  data_table_name     => 'svmc_build_prep',
08:51:05   6  	  case_id_column_name => '&case_id',
08:51:05   7  	  target_column_name  => '&target',
08:51:05   8  	  settings_table_name => 'svmc_settings');
08:51:05   9  END;
08:51:05  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex15',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:27.88
08:51:33 SQL> 
08:51:33 SQL> -----------------------------------------------------------------------
08:51:33 SQL> --			       APPLY/score THE MODEL
08:51:33 SQL> -----------------------------------------------------------------------
08:51:33 SQL> 
08:51:33 SQL> -- Cleanup old scoring data preparation objects for repeat runs
08:51:33 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
08:51:33   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:51:33   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
08:51:33 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
08:51:33   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:51:33   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
08:51:33 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
08:51:33   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:51:33   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
08:51:33 SQL> -----------------------
08:51:33 SQL> -- PREPARE SCORING DATA
08:51:33 SQL> --
08:51:33 SQL> -- If the data for model creation has been prepared, then the data
08:51:33 SQL> -- to be scored using the model must be prepared in the same manner
08:51:33 SQL> -- in order to obtain meaningful results.
08:51:33 SQL> --
08:51:33 SQL> -- 1. Missing Value treatment for all Predictors and
08:51:33 SQL> -- 2. Normalization
08:51:33 SQL> -- No outlier treatment will be performed during test and apply. The
08:51:33 SQL> -- normalization step is sufficient, since the normalization parameters
08:51:33 SQL> -- already capture the effects of outlier treatment done with build data.
08:51:33 SQL> --
08:51:33 SQL> BEGIN
08:51:33   2  	-- Xform Test data to replace missing values
08:51:33   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
08:51:33   4  	  miss_table_name => 'svmc_miss_num',
08:51:33   5  	  data_table_name => '&scoretable',
08:51:33   6  	  xform_view_name => 'xformed_apply_miss_num');
08:51:33   7  
08:51:33   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
08:51:33   9  	  miss_table_name => 'svmc_miss_cat',
08:51:33  10  	  data_table_name => '&scoretable',
08:51:33  11  	  xform_view_name => 'xformed_apply_miss_cat');
08:51:33  12  
08:51:33  13  	-- Normalize the data to be scored
08:51:33  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
08:51:33  15  	  norm_table_name => 'svmc_norm',
08:51:33  16  	  data_table_name => '&scoretable',
08:51:33  17  	  xform_view_name => 'svmc_apply_prep');
08:51:33  18  END;
08:51:33  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.23
08:51:34 SQL> 
08:51:34 SQL> -- Use same model_name used in score.sql
08:51:34 SQL> DEFINE model_name = 'forex15'
08:51:34 SQL> 
08:51:34 SQL> -- CREATE TABLE fxscores6 (prdate VARCHAR2(30),score NUMBER,rundate DATE,pair VARCHAR2(8),ydate DATE);
08:51:34 SQL> 
08:51:34 SQL> DELETE fxscores6 WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.04
08:51:34 SQL> 
08:51:34 SQL> INSERT INTO fxscores6 (prdate,score,rundate,pair,ydate)
08:51:34   2  SELECT
08:51:34   3  prdate
08:51:34   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
08:51:34   5  ,sysdate
08:51:34   6  ,SUBSTR(prdate,1,3)pair
08:51:34   7  ,SUBSTR(prdate,4,19)ydate
08:51:34   8  FROM svmc_apply_prep
08:51:34   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex15,'up' USING *)score

1 row created.

Elapsed: 00:00:00.17
08:51:34 SQL> @aud_score1day.sql  2011-01-07 08:35:00
08:51:34 SQL> --
08:51:34 SQL> -- aud_score1day.sql
08:51:34 SQL> --
08:51:34 SQL> 
08:51:34 SQL> CREATE OR REPLACE VIEW sme AS
08:51:34   2  SELECT
08:51:34   3  'aud'||m.ydate prdate
08:51:34   4  ,NULL gatt
08:51:34   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
08:51:34   6  ,eur_g00
08:51:34   7  ,eur_g01
08:51:34   8  ,eur_g02
08:51:34   9  ,eur_g03
08:51:34  10  ,eur_g04
08:51:34  11  ,eur_g05
08:51:34  12  ,eur_g06
08:51:34  13  ,eur_g07
08:51:34  14  ,eur_g08
08:51:34  15  ,eur_g09
08:51:34  16  ,eur_g10
08:51:34  17  ,eur_g11
08:51:34  18  ,eur_g12
08:51:34  19  ,eur_g13
08:51:34  20  ,eur_g14
08:51:34  21  ,eur_g15
08:51:34  22  ,eur_g16
08:51:34  23  ,eur_g17
08:51:34  24  ,eur_g18
08:51:34  25  ,eur_g19
08:51:34  26  ,eur_g20
08:51:34  27  ,eur_g21
08:51:34  28  ,eur_g22
08:51:34  29  ,eur_g23
08:51:34  30  ,eur_g24
08:51:34  31  ,eur_g25
08:51:34  32  ,eur_g26
08:51:34  33  ,eur_g27
08:51:34  34  ,eur_g28
08:51:34  35  ,eur_g29
08:51:34  36  ,eur_g30
08:51:34  37  ,eur_g31
08:51:34  38  ,eur_g32
08:51:34  39  ,eur_g33
08:51:34  40  ,eur_g34
08:51:34  41  ,eur_g35
08:51:34  42  ,eur_g36
08:51:34  43  ,eur_g37
08:51:34  44  ,eur_g38
08:51:34  45  ,eur_g39
08:51:34  46  ,eur_g40
08:51:34  47  ,eur_g41
08:51:34  48  ,aud_g00
08:51:34  49  ,aud_g01
08:51:34  50  ,aud_g02
08:51:34  51  ,aud_g03
08:51:34  52  ,aud_g04
08:51:34  53  ,aud_g05
08:51:34  54  ,aud_g06
08:51:34  55  ,aud_g07
08:51:34  56  ,aud_g08
08:51:34  57  ,aud_g09
08:51:34  58  ,aud_g10
08:51:34  59  ,aud_g11
08:51:34  60  ,aud_g12
08:51:34  61  ,aud_g13
08:51:34  62  ,aud_g14
08:51:34  63  ,aud_g15
08:51:34  64  ,aud_g16
08:51:34  65  ,aud_g17
08:51:34  66  ,aud_g18
08:51:34  67  ,aud_g19
08:51:34  68  ,aud_g20
08:51:34  69  ,aud_g21
08:51:34  70  ,aud_g22
08:51:34  71  ,aud_g23
08:51:34  72  ,aud_g24
08:51:34  73  ,aud_g25
08:51:34  74  ,aud_g26
08:51:34  75  ,aud_g27
08:51:34  76  ,aud_g28
08:51:34  77  ,aud_g29
08:51:34  78  ,aud_g30
08:51:34  79  ,aud_g31
08:51:34  80  ,aud_g32
08:51:34  81  ,aud_g33
08:51:34  82  ,aud_g34
08:51:34  83  ,aud_g35
08:51:34  84  ,aud_g36
08:51:34  85  ,aud_g37
08:51:34  86  ,aud_g38
08:51:34  87  ,aud_g39
08:51:34  88  ,aud_g40
08:51:34  89  ,aud_g41
08:51:34  90  ,gbp_g00
08:51:34  91  ,gbp_g01
08:51:34  92  ,gbp_g02
08:51:34  93  ,gbp_g03
08:51:34  94  ,gbp_g04
08:51:34  95  ,gbp_g05
08:51:34  96  ,gbp_g06
08:51:34  97  ,gbp_g07
08:51:34  98  ,gbp_g08
08:51:34  99  ,gbp_g09
08:51:34 100  ,gbp_g10
08:51:34 101  ,gbp_g11
08:51:34 102  ,gbp_g12
08:51:34 103  ,gbp_g13
08:51:34 104  ,gbp_g14
08:51:34 105  ,gbp_g15
08:51:34 106  ,gbp_g16
08:51:34 107  ,gbp_g17
08:51:34 108  ,gbp_g18
08:51:34 109  ,gbp_g19
08:51:34 110  ,gbp_g20
08:51:34 111  ,gbp_g21
08:51:34 112  ,gbp_g22
08:51:34 113  ,gbp_g23
08:51:34 114  ,gbp_g24
08:51:34 115  ,gbp_g25
08:51:34 116  ,gbp_g26
08:51:34 117  ,gbp_g27
08:51:34 118  ,gbp_g28
08:51:34 119  ,gbp_g29
08:51:34 120  ,gbp_g30
08:51:34 121  ,gbp_g31
08:51:34 122  ,gbp_g32
08:51:34 123  ,gbp_g33
08:51:34 124  ,gbp_g34
08:51:34 125  ,gbp_g35
08:51:34 126  ,gbp_g36
08:51:34 127  ,gbp_g37
08:51:34 128  ,gbp_g38
08:51:34 129  ,gbp_g39
08:51:34 130  ,gbp_g40
08:51:34 131  ,gbp_g41
08:51:34 132  ,jpy_g00
08:51:34 133  ,jpy_g01
08:51:34 134  ,jpy_g02
08:51:34 135  ,jpy_g03
08:51:34 136  ,jpy_g04
08:51:34 137  ,jpy_g05
08:51:34 138  ,jpy_g06
08:51:34 139  ,jpy_g07
08:51:34 140  ,jpy_g08
08:51:34 141  ,jpy_g09
08:51:34 142  ,jpy_g10
08:51:34 143  ,jpy_g11
08:51:34 144  ,jpy_g12
08:51:34 145  ,jpy_g13
08:51:34 146  ,jpy_g14
08:51:34 147  ,jpy_g15
08:51:34 148  ,jpy_g16
08:51:34 149  ,jpy_g17
08:51:34 150  ,jpy_g18
08:51:34 151  ,jpy_g19
08:51:34 152  ,jpy_g20
08:51:34 153  ,jpy_g21
08:51:34 154  ,jpy_g22
08:51:34 155  ,jpy_g23
08:51:34 156  ,jpy_g24
08:51:34 157  ,jpy_g25
08:51:34 158  ,jpy_g26
08:51:34 159  ,jpy_g27
08:51:34 160  ,jpy_g28
08:51:34 161  ,jpy_g29
08:51:34 162  ,jpy_g30
08:51:34 163  ,jpy_g31
08:51:34 164  ,jpy_g32
08:51:34 165  ,jpy_g33
08:51:34 166  ,jpy_g34
08:51:34 167  ,jpy_g35
08:51:34 168  ,jpy_g36
08:51:34 169  ,jpy_g37
08:51:34 170  ,jpy_g38
08:51:34 171  ,jpy_g39
08:51:34 172  ,jpy_g40
08:51:34 173  ,jpy_g41
08:51:34 174  ,cad_g00
08:51:34 175  ,cad_g01
08:51:34 176  ,cad_g02
08:51:34 177  ,cad_g03
08:51:34 178  ,cad_g04
08:51:34 179  ,cad_g05
08:51:34 180  ,cad_g06
08:51:34 181  ,cad_g07
08:51:34 182  ,cad_g08
08:51:34 183  ,cad_g09
08:51:34 184  ,cad_g10
08:51:34 185  ,cad_g11
08:51:34 186  ,cad_g12
08:51:34 187  ,cad_g13
08:51:34 188  ,cad_g14
08:51:34 189  ,cad_g15
08:51:34 190  ,cad_g16
08:51:34 191  ,cad_g17
08:51:34 192  ,cad_g18
08:51:34 193  ,cad_g19
08:51:34 194  ,cad_g20
08:51:34 195  ,cad_g21
08:51:34 196  ,cad_g22
08:51:34 197  ,cad_g23
08:51:34 198  ,cad_g24
08:51:34 199  ,cad_g25
08:51:34 200  ,cad_g26
08:51:34 201  ,cad_g27
08:51:34 202  ,cad_g28
08:51:34 203  ,cad_g29
08:51:34 204  ,cad_g30
08:51:34 205  ,cad_g31
08:51:34 206  ,cad_g32
08:51:34 207  ,cad_g33
08:51:34 208  ,cad_g34
08:51:34 209  ,cad_g35
08:51:34 210  ,cad_g36
08:51:34 211  ,cad_g37
08:51:34 212  ,cad_g38
08:51:34 213  ,cad_g39
08:51:34 214  ,cad_g40
08:51:34 215  ,cad_g41
08:51:34 216  ,chf_g00
08:51:34 217  ,chf_g01
08:51:34 218  ,chf_g02
08:51:34 219  ,chf_g03
08:51:34 220  ,chf_g04
08:51:34 221  ,chf_g05
08:51:34 222  ,chf_g06
08:51:34 223  ,chf_g07
08:51:34 224  ,chf_g08
08:51:34 225  ,chf_g09
08:51:34 226  ,chf_g10
08:51:34 227  ,chf_g11
08:51:34 228  ,chf_g12
08:51:34 229  ,chf_g13
08:51:34 230  ,chf_g14
08:51:34 231  ,chf_g15
08:51:34 232  ,chf_g16
08:51:34 233  ,chf_g17
08:51:34 234  ,chf_g18
08:51:34 235  ,chf_g19
08:51:34 236  ,chf_g20
08:51:34 237  ,chf_g21
08:51:34 238  ,chf_g22
08:51:34 239  ,chf_g23
08:51:34 240  ,chf_g24
08:51:34 241  ,chf_g25
08:51:34 242  ,chf_g26
08:51:34 243  ,chf_g27
08:51:34 244  ,chf_g28
08:51:34 245  ,chf_g29
08:51:34 246  ,chf_g30
08:51:34 247  ,chf_g31
08:51:34 248  ,chf_g32
08:51:34 249  ,chf_g33
08:51:34 250  ,chf_g34
08:51:34 251  ,chf_g35
08:51:34 252  ,chf_g36
08:51:34 253  ,chf_g37
08:51:34 254  ,chf_g38
08:51:34 255  ,chf_g39
08:51:34 256  ,chf_g40
08:51:34 257  ,chf_g41
08:51:34 258  FROM aud_ms6 m
08:51:34 259  WHERE m.ydate = '&1'||' '||'&2'
08:51:34 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2011-01-07'||' '||'08:35:00'

View created.

Elapsed: 00:00:00.12
08:51:34 SQL> 
08:51:34 SQL> -- rpt
08:51:34 SQL> -- We should see just 1 row:
08:51:34 SQL> 
08:51:34 SQL> SELECT COUNT(prdate) FROM sme
08:51:34   2  
08:51:34 SQL> -- Build the model:
08:51:34 SQL> CREATE OR REPLACE VIEW bme AS
08:51:34   2  SELECT
08:51:34   3  'aud'||m.ydate prdate
08:51:34   4  ,gatt
08:51:34   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
08:51:34   6  ,eur_g00
08:51:34   7  ,eur_g01
08:51:34   8  ,eur_g02
08:51:34   9  ,eur_g03
08:51:34  10  ,eur_g04
08:51:34  11  ,eur_g05
08:51:34  12  ,eur_g06
08:51:34  13  ,eur_g07
08:51:34  14  ,eur_g08
08:51:34  15  ,eur_g09
08:51:34  16  ,eur_g10
08:51:34  17  ,eur_g11
08:51:34  18  ,eur_g12
08:51:34  19  ,eur_g13
08:51:34  20  ,eur_g14
08:51:34  21  ,eur_g15
08:51:34  22  ,eur_g16
08:51:34  23  ,eur_g17
08:51:34  24  ,eur_g18
08:51:34  25  ,eur_g19
08:51:34  26  ,eur_g20
08:51:34  27  ,eur_g21
08:51:34  28  ,eur_g22
08:51:34  29  ,eur_g23
08:51:34  30  ,eur_g24
08:51:34  31  ,eur_g25
08:51:34  32  ,eur_g26
08:51:34  33  ,eur_g27
08:51:34  34  ,eur_g28
08:51:34  35  ,eur_g29
08:51:34  36  ,eur_g30
08:51:34  37  ,eur_g31
08:51:34  38  ,eur_g32
08:51:34  39  ,eur_g33
08:51:34  40  ,eur_g34
08:51:34  41  ,eur_g35
08:51:34  42  ,eur_g36
08:51:34  43  ,eur_g37
08:51:34  44  ,eur_g38
08:51:34  45  ,eur_g39
08:51:34  46  ,eur_g40
08:51:34  47  ,eur_g41
08:51:34  48  ,aud_g00
08:51:34  49  ,aud_g01
08:51:34  50  ,aud_g02
08:51:34  51  ,aud_g03
08:51:34  52  ,aud_g04
08:51:34  53  ,aud_g05
08:51:34  54  ,aud_g06
08:51:34  55  ,aud_g07
08:51:34  56  ,aud_g08
08:51:34  57  ,aud_g09
08:51:34  58  ,aud_g10
08:51:34  59  ,aud_g11
08:51:34  60  ,aud_g12
08:51:34  61  ,aud_g13
08:51:34  62  ,aud_g14
08:51:34  63  ,aud_g15
08:51:34  64  ,aud_g16
08:51:34  65  ,aud_g17
08:51:34  66  ,aud_g18
08:51:34  67  ,aud_g19
08:51:34  68  ,aud_g20
08:51:34  69  ,aud_g21
08:51:34  70  ,aud_g22
08:51:34  71  ,aud_g23
08:51:34  72  ,aud_g24
08:51:34  73  ,aud_g25
08:51:34  74  ,aud_g26
08:51:34  75  ,aud_g27
08:51:34  76  ,aud_g28
08:51:34  77  ,aud_g29
08:51:34  78  ,aud_g30
08:51:34  79  ,aud_g31
08:51:34  80  ,aud_g32
08:51:34  81  ,aud_g33
08:51:34  82  ,aud_g34
08:51:34  83  ,aud_g35
08:51:34  84  ,aud_g36
08:51:34  85  ,aud_g37
08:51:34  86  ,aud_g38
08:51:34  87  ,aud_g39
08:51:34  88  ,aud_g40
08:51:34  89  ,aud_g41
08:51:34  90  ,gbp_g00
08:51:34  91  ,gbp_g01
08:51:34  92  ,gbp_g02
08:51:34  93  ,gbp_g03
08:51:34  94  ,gbp_g04
08:51:34  95  ,gbp_g05
08:51:34  96  ,gbp_g06
08:51:34  97  ,gbp_g07
08:51:34  98  ,gbp_g08
08:51:34  99  ,gbp_g09
08:51:34 100  ,gbp_g10
08:51:34 101  ,gbp_g11
08:51:34 102  ,gbp_g12
08:51:34 103  ,gbp_g13
08:51:34 104  ,gbp_g14
08:51:34 105  ,gbp_g15
08:51:34 106  ,gbp_g16
08:51:34 107  ,gbp_g17
08:51:34 108  ,gbp_g18
08:51:34 109  ,gbp_g19
08:51:34 110  ,gbp_g20
08:51:34 111  ,gbp_g21
08:51:34 112  ,gbp_g22
08:51:34 113  ,gbp_g23
08:51:34 114  ,gbp_g24
08:51:34 115  ,gbp_g25
08:51:34 116  ,gbp_g26
08:51:34 117  ,gbp_g27
08:51:34 118  ,gbp_g28
08:51:34 119  ,gbp_g29
08:51:34 120  ,gbp_g30
08:51:34 121  ,gbp_g31
08:51:34 122  ,gbp_g32
08:51:34 123  ,gbp_g33
08:51:34 124  ,gbp_g34
08:51:34 125  ,gbp_g35
08:51:34 126  ,gbp_g36
08:51:34 127  ,gbp_g37
08:51:34 128  ,gbp_g38
08:51:34 129  ,gbp_g39
08:51:34 130  ,gbp_g40
08:51:34 131  ,gbp_g41
08:51:34 132  ,jpy_g00
08:51:34 133  ,jpy_g01
08:51:34 134  ,jpy_g02
08:51:34 135  ,jpy_g03
08:51:34 136  ,jpy_g04
08:51:34 137  ,jpy_g05
08:51:34 138  ,jpy_g06
08:51:34 139  ,jpy_g07
08:51:34 140  ,jpy_g08
08:51:34 141  ,jpy_g09
08:51:34 142  ,jpy_g10
08:51:34 143  ,jpy_g11
08:51:34 144  ,jpy_g12
08:51:34 145  ,jpy_g13
08:51:34 146  ,jpy_g14
08:51:34 147  ,jpy_g15
08:51:34 148  ,jpy_g16
08:51:34 149  ,jpy_g17
08:51:34 150  ,jpy_g18
08:51:34 151  ,jpy_g19
08:51:34 152  ,jpy_g20
08:51:34 153  ,jpy_g21
08:51:34 154  ,jpy_g22
08:51:34 155  ,jpy_g23
08:51:34 156  ,jpy_g24
08:51:34 157  ,jpy_g25
08:51:34 158  ,jpy_g26
08:51:34 159  ,jpy_g27
08:51:34 160  ,jpy_g28
08:51:34 161  ,jpy_g29
08:51:34 162  ,jpy_g30
08:51:34 163  ,jpy_g31
08:51:34 164  ,jpy_g32
08:51:34 165  ,jpy_g33
08:51:34 166  ,jpy_g34
08:51:34 167  ,jpy_g35
08:51:34 168  ,jpy_g36
08:51:34 169  ,jpy_g37
08:51:34 170  ,jpy_g38
08:51:34 171  ,jpy_g39
08:51:34 172  ,jpy_g40
08:51:34 173  ,jpy_g41
08:51:34 174  ,cad_g00
08:51:34 175  ,cad_g01
08:51:34 176  ,cad_g02
08:51:34 177  ,cad_g03
08:51:34 178  ,cad_g04
08:51:34 179  ,cad_g05
08:51:34 180  ,cad_g06
08:51:34 181  ,cad_g07
08:51:34 182  ,cad_g08
08:51:34 183  ,cad_g09
08:51:34 184  ,cad_g10
08:51:34 185  ,cad_g11
08:51:34 186  ,cad_g12
08:51:34 187  ,cad_g13
08:51:34 188  ,cad_g14
08:51:34 189  ,cad_g15
08:51:34 190  ,cad_g16
08:51:34 191  ,cad_g17
08:51:34 192  ,cad_g18
08:51:34 193  ,cad_g19
08:51:34 194  ,cad_g20
08:51:34 195  ,cad_g21
08:51:34 196  ,cad_g22
08:51:34 197  ,cad_g23
08:51:34 198  ,cad_g24
08:51:34 199  ,cad_g25
08:51:34 200  ,cad_g26
08:51:34 201  ,cad_g27
08:51:34 202  ,cad_g28
08:51:34 203  ,cad_g29
08:51:34 204  ,cad_g30
08:51:34 205  ,cad_g31
08:51:34 206  ,cad_g32
08:51:34 207  ,cad_g33
08:51:34 208  ,cad_g34
08:51:34 209  ,cad_g35
08:51:34 210  ,cad_g36
08:51:34 211  ,cad_g37
08:51:34 212  ,cad_g38
08:51:34 213  ,cad_g39
08:51:34 214  ,cad_g40
08:51:34 215  ,cad_g41
08:51:34 216  ,chf_g00
08:51:34 217  ,chf_g01
08:51:34 218  ,chf_g02
08:51:34 219  ,chf_g03
08:51:34 220  ,chf_g04
08:51:34 221  ,chf_g05
08:51:34 222  ,chf_g06
08:51:34 223  ,chf_g07
08:51:34 224  ,chf_g08
08:51:34 225  ,chf_g09
08:51:34 226  ,chf_g10
08:51:34 227  ,chf_g11
08:51:34 228  ,chf_g12
08:51:34 229  ,chf_g13
08:51:34 230  ,chf_g14
08:51:34 231  ,chf_g15
08:51:34 232  ,chf_g16
08:51:34 233  ,chf_g17
08:51:34 234  ,chf_g18
08:51:34 235  ,chf_g19
08:51:34 236  ,chf_g20
08:51:34 237  ,chf_g21
08:51:34 238  ,chf_g22
08:51:34 239  ,chf_g23
08:51:34 240  ,chf_g24
08:51:34 241  ,chf_g25
08:51:34 242  ,chf_g26
08:51:34 243  ,chf_g27
08:51:34 244  ,chf_g28
08:51:34 245  ,chf_g29
08:51:34 246  ,chf_g30
08:51:34 247  ,chf_g31
08:51:34 248  ,chf_g32
08:51:34 249  ,chf_g33
08:51:34 250  ,chf_g34
08:51:34 251  ,chf_g35
08:51:34 252  ,chf_g36
08:51:34 253  ,chf_g37
08:51:34 254  ,chf_g38
08:51:34 255  ,chf_g39
08:51:34 256  ,chf_g40
08:51:34 257  ,chf_g41
08:51:34 258  FROM aud_ms6 m
08:51:34 259  WHERE gatt IN('nup','up')
08:51:34 260  AND 1+m.ydate < '&1'||' '||'&2'
08:51:34 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2011-01-07'||' '||'08:35:00'

View created.

Elapsed: 00:00:00.14
08:51:35 SQL> 
08:51:35 SQL> -- rpt
08:51:35 SQL> 
08:51:35 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt
08:51:35   2  
08:51:35 SQL> SELECT MAX(prdate) FROM bme
08:51:35   2  
08:51:35 SQL> -- Now build model from bme and score sme
08:51:35 SQL> @score1.sql
08:51:35 SQL> -- score1.sql
08:51:35 SQL> 
08:51:35 SQL> -- Does the 1st SVM score
08:51:35 SQL> 
08:51:35 SQL> -- Fill up svmc_apply_prep
08:51:35 SQL> @score.sql
08:51:35 SQL> --
08:51:35 SQL> -- score.sql
08:51:35 SQL> --
08:51:35 SQL> 
08:51:35 SQL> -- usage: score.sql
08:51:35 SQL> 
08:51:35 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
08:51:35 SQL> 
08:51:35 SQL> DEFINE target	= 'gatt'
08:51:35 SQL> DEFINE model_name = 'forex15'
08:51:35 SQL> DEFINE bldtable	= 'bme'
08:51:35 SQL> DEFINE scoretable = 'sme'
08:51:35 SQL> DEFINE case_id	= 'prdate'
08:51:35 SQL> 
08:51:35 SQL> -- Define a variable to help me exclude some columns from some data mining calls
08:51:35 SQL> DEFINE exclude1 = "'&target','&case_id'"
08:51:35 SQL> 
08:51:35 SQL> -- Builds an SVM model using pl/sql.
08:51:35 SQL> 
08:51:35 SQL> -----------------------------------------------------------------------
08:51:35 SQL> --			    BUILD THE MODEL
08:51:35 SQL> -----------------------------------------------------------------------
08:51:35 SQL> 
08:51:35 SQL> -- Cleanup old build data preparation objects for repeat runs
08:51:35 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.01
08:51:35 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
08:51:35 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.00
08:51:35 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.00
08:51:35 SQL> 
08:51:35 SQL> 
08:51:35 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
08:51:35 SQL> --
08:51:35 SQL> -- DROP	TABLE svmc_settings ;
08:51:35 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
08:51:35 SQL> -- DELETE svmc_settings;
08:51:35 SQL> 
08:51:35 SQL> -- The default classification algorithm is Naive Bayes. So override
08:51:35 SQL> -- this choice to SVM using a settings table.
08:51:35 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
08:51:35 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
08:51:35 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
08:51:35 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
08:51:35 SQL> -- models.
08:51:35 SQL> --
08:51:35 SQL> 
08:51:35 SQL> -- Do this once and then comment it out.
08:51:35 SQL> -- That makes script go faster.
08:51:35 SQL> -- BEGIN
08:51:35 SQL> -- -- Populate settings table
08:51:35 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
08:51:35 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
08:51:35 SQL> --
08:51:35 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
08:51:35 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
08:51:35 SQL> --
08:51:35 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
08:51:35 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
08:51:35 SQL> --   COMMIT;
08:51:35 SQL> -- END;
08:51:35 SQL> -- /
08:51:35 SQL> 
08:51:35 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.01
08:51:35 SQL> 
08:51:35 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
08:51:35   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:51:35   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
08:51:35 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
08:51:35   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:51:35   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
08:51:35 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
08:51:35   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:51:35   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
08:51:35 SQL> 
08:51:35 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
08:51:35   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:51:35   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
08:51:35 SQL> 
08:51:35 SQL> --------------------------------
08:51:35 SQL> -- PREPARE BUILD (TRAINING) DATA
08:51:35 SQL> --
08:51:35 SQL> 
08:51:35 SQL> -- 1. Missing Value treatment for all Predictors and
08:51:35 SQL> -- 2. Outlier Treatment and
08:51:35 SQL> -- 3. Normalization are performed below.
08:51:35 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
08:51:35 SQL> --    normalized here.
08:51:35 SQL> 
08:51:35 SQL> BEGIN
08:51:35   2  	-- Perform missing value treatment for all predictors
08:51:35   3  	-- create miss tables
08:51:35   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
08:51:35   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
08:51:35   6  
08:51:35   7  	-- populate miss tables
08:51:35   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
08:51:35   9  	  miss_table_name => 'svmc_miss_num',
08:51:35  10  	  data_table_name => '&bldtable',
08:51:35  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
08:51:35  12  
08:51:35  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
08:51:35  14  	  miss_table_name => 'svmc_miss_cat',
08:51:35  15  	  data_table_name => '&bldtable',
08:51:35  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
08:51:35  17  
08:51:35  18  	-- xform input data to replace missing values
08:51:35  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
08:51:35  20  	  miss_table_name => 'svmc_miss_num',
08:51:35  21  	  data_table_name => '&bldtable',
08:51:35  22  	  xform_view_name => 'xformed_build_miss_num');
08:51:35  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
08:51:35  24  	  miss_table_name => 'svmc_miss_cat',
08:51:35  25  	  data_table_name => '&bldtable',
08:51:35  26  	  xform_view_name => 'xformed_build_miss_cat');
08:51:35  27  
08:51:35  28  	-- Perform outlier treatment.
08:51:35  29  	-- create clip table
08:51:35  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
08:51:35  31  
08:51:35  32  	-- populate clip table
08:51:35  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
08:51:35  34  	  clip_table_name => 'svmc_clip',
08:51:35  35  	  data_table_name => '&bldtable',
08:51:35  36  	  tail_frac	  => 0.025,
08:51:35  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
08:51:35  38  
08:51:35  39  	-- xform input data to winsorized data
08:51:35  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
08:51:35  41  	  clip_table_name => 'svmc_clip',
08:51:35  42  	  data_table_name => '&bldtable',
08:51:35  43  	  xform_view_name => 'svmc_winsor');
08:51:35  44  
08:51:35  45  	-- create normalization table
08:51:35  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
08:51:35  47  
08:51:35  48  	-- populate normalization table based on winsorized data
08:51:35  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
08:51:35  50  	  norm_table_name => 'svmc_norm',
08:51:35  51  	  data_table_name => 'svmc_winsor',
08:51:35  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
08:51:35  53  
08:51:35  54  	-- normalize the original data
08:51:35  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
08:51:35  56  	  norm_table_name => 'svmc_norm',
08:51:35  57  	  data_table_name => '&bldtable',
08:51:35  58  	  xform_view_name => 'svmc_build_prep');
08:51:35  59  END;
08:51:35  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:18.46
08:51:53 SQL> 
08:51:53 SQL> ---------------------
08:51:53 SQL> -- CREATE A NEW MODEL
08:51:53 SQL> --
08:51:53 SQL> -- Cleanup old model with the same name for repeat runs
08:51:53 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
08:51:53   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:51:53   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex15');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.99
08:51:54 SQL> 
08:51:54 SQL> -- Build a new SVM Model
08:51:54 SQL> BEGIN
08:51:54   2  	DBMS_DATA_MINING.CREATE_MODEL(
08:51:54   3  	  model_name	      => '&model_name',
08:51:54   4  	  mining_function     => dbms_data_mining.classification,
08:51:54   5  	  data_table_name     => 'svmc_build_prep',
08:51:54   6  	  case_id_column_name => '&case_id',
08:51:54   7  	  target_column_name  => '&target',
08:51:54   8  	  settings_table_name => 'svmc_settings');
08:51:54   9  END;
08:51:54  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex15',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:27.34
08:52:22 SQL> 
08:52:22 SQL> -----------------------------------------------------------------------
08:52:22 SQL> --			       APPLY/score THE MODEL
08:52:22 SQL> -----------------------------------------------------------------------
08:52:22 SQL> 
08:52:22 SQL> -- Cleanup old scoring data preparation objects for repeat runs
08:52:22 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
08:52:22   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:52:22   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
08:52:22 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
08:52:22   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:52:22   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
08:52:22 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
08:52:22   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:52:22   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
08:52:22 SQL> -----------------------
08:52:22 SQL> -- PREPARE SCORING DATA
08:52:22 SQL> --
08:52:22 SQL> -- If the data for model creation has been prepared, then the data
08:52:22 SQL> -- to be scored using the model must be prepared in the same manner
08:52:22 SQL> -- in order to obtain meaningful results.
08:52:22 SQL> --
08:52:22 SQL> -- 1. Missing Value treatment for all Predictors and
08:52:22 SQL> -- 2. Normalization
08:52:22 SQL> -- No outlier treatment will be performed during test and apply. The
08:52:22 SQL> -- normalization step is sufficient, since the normalization parameters
08:52:22 SQL> -- already capture the effects of outlier treatment done with build data.
08:52:22 SQL> --
08:52:22 SQL> BEGIN
08:52:22   2  	-- Xform Test data to replace missing values
08:52:22   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
08:52:22   4  	  miss_table_name => 'svmc_miss_num',
08:52:22   5  	  data_table_name => '&scoretable',
08:52:22   6  	  xform_view_name => 'xformed_apply_miss_num');
08:52:22   7  
08:52:22   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
08:52:22   9  	  miss_table_name => 'svmc_miss_cat',
08:52:22  10  	  data_table_name => '&scoretable',
08:52:22  11  	  xform_view_name => 'xformed_apply_miss_cat');
08:52:22  12  
08:52:22  13  	-- Normalize the data to be scored
08:52:22  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
08:52:22  15  	  norm_table_name => 'svmc_norm',
08:52:22  16  	  data_table_name => '&scoretable',
08:52:22  17  	  xform_view_name => 'svmc_apply_prep');
08:52:22  18  END;
08:52:22  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.39
08:52:23 SQL> 
08:52:23 SQL> -- Use same model_name used in score.sql
08:52:23 SQL> DEFINE model_name = 'forex15'
08:52:23 SQL> 
08:52:23 SQL> -- CREATE TABLE fxscores6 (prdate VARCHAR2(30),score NUMBER,rundate DATE,pair VARCHAR2(8),ydate DATE);
08:52:23 SQL> 
08:52:23 SQL> DELETE fxscores6 WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.04
08:52:23 SQL> 
08:52:23 SQL> INSERT INTO fxscores6 (prdate,score,rundate,pair,ydate)
08:52:23   2  SELECT
08:52:23   3  prdate
08:52:23   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
08:52:23   5  ,sysdate
08:52:23   6  ,SUBSTR(prdate,1,3)pair
08:52:23   7  ,SUBSTR(prdate,4,19)ydate
08:52:23   8  FROM svmc_apply_prep
08:52:23   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex15,'up' USING *)score

1 row created.

Elapsed: 00:00:00.17
08:52:23 SQL> @aud_score1day.sql  2011-01-07 08:40:00
08:52:23 SQL> --
08:52:23 SQL> -- aud_score1day.sql
08:52:23 SQL> --
08:52:23 SQL> 
08:52:23 SQL> CREATE OR REPLACE VIEW sme AS
08:52:23   2  SELECT
08:52:23   3  'aud'||m.ydate prdate
08:52:23   4  ,NULL gatt
08:52:23   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
08:52:23   6  ,eur_g00
08:52:23   7  ,eur_g01
08:52:23   8  ,eur_g02
08:52:23   9  ,eur_g03
08:52:23  10  ,eur_g04
08:52:23  11  ,eur_g05
08:52:23  12  ,eur_g06
08:52:23  13  ,eur_g07
08:52:23  14  ,eur_g08
08:52:23  15  ,eur_g09
08:52:23  16  ,eur_g10
08:52:23  17  ,eur_g11
08:52:23  18  ,eur_g12
08:52:23  19  ,eur_g13
08:52:23  20  ,eur_g14
08:52:23  21  ,eur_g15
08:52:23  22  ,eur_g16
08:52:23  23  ,eur_g17
08:52:23  24  ,eur_g18
08:52:23  25  ,eur_g19
08:52:23  26  ,eur_g20
08:52:23  27  ,eur_g21
08:52:23  28  ,eur_g22
08:52:23  29  ,eur_g23
08:52:23  30  ,eur_g24
08:52:23  31  ,eur_g25
08:52:23  32  ,eur_g26
08:52:23  33  ,eur_g27
08:52:23  34  ,eur_g28
08:52:23  35  ,eur_g29
08:52:23  36  ,eur_g30
08:52:23  37  ,eur_g31
08:52:23  38  ,eur_g32
08:52:23  39  ,eur_g33
08:52:23  40  ,eur_g34
08:52:23  41  ,eur_g35
08:52:23  42  ,eur_g36
08:52:23  43  ,eur_g37
08:52:23  44  ,eur_g38
08:52:23  45  ,eur_g39
08:52:23  46  ,eur_g40
08:52:23  47  ,eur_g41
08:52:23  48  ,aud_g00
08:52:23  49  ,aud_g01
08:52:23  50  ,aud_g02
08:52:23  51  ,aud_g03
08:52:23  52  ,aud_g04
08:52:23  53  ,aud_g05
08:52:23  54  ,aud_g06
08:52:23  55  ,aud_g07
08:52:23  56  ,aud_g08
08:52:23  57  ,aud_g09
08:52:23  58  ,aud_g10
08:52:23  59  ,aud_g11
08:52:23  60  ,aud_g12
08:52:23  61  ,aud_g13
08:52:23  62  ,aud_g14
08:52:23  63  ,aud_g15
08:52:23  64  ,aud_g16
08:52:23  65  ,aud_g17
08:52:23  66  ,aud_g18
08:52:23  67  ,aud_g19
08:52:23  68  ,aud_g20
08:52:23  69  ,aud_g21
08:52:23  70  ,aud_g22
08:52:23  71  ,aud_g23
08:52:23  72  ,aud_g24
08:52:23  73  ,aud_g25
08:52:23  74  ,aud_g26
08:52:23  75  ,aud_g27
08:52:23  76  ,aud_g28
08:52:23  77  ,aud_g29
08:52:23  78  ,aud_g30
08:52:23  79  ,aud_g31
08:52:23  80  ,aud_g32
08:52:23  81  ,aud_g33
08:52:23  82  ,aud_g34
08:52:23  83  ,aud_g35
08:52:23  84  ,aud_g36
08:52:23  85  ,aud_g37
08:52:23  86  ,aud_g38
08:52:23  87  ,aud_g39
08:52:23  88  ,aud_g40
08:52:23  89  ,aud_g41
08:52:23  90  ,gbp_g00
08:52:23  91  ,gbp_g01
08:52:23  92  ,gbp_g02
08:52:23  93  ,gbp_g03
08:52:23  94  ,gbp_g04
08:52:23  95  ,gbp_g05
08:52:23  96  ,gbp_g06
08:52:23  97  ,gbp_g07
08:52:23  98  ,gbp_g08
08:52:23  99  ,gbp_g09
08:52:23 100  ,gbp_g10
08:52:23 101  ,gbp_g11
08:52:23 102  ,gbp_g12
08:52:23 103  ,gbp_g13
08:52:23 104  ,gbp_g14
08:52:23 105  ,gbp_g15
08:52:23 106  ,gbp_g16
08:52:23 107  ,gbp_g17
08:52:23 108  ,gbp_g18
08:52:23 109  ,gbp_g19
08:52:23 110  ,gbp_g20
08:52:23 111  ,gbp_g21
08:52:23 112  ,gbp_g22
08:52:23 113  ,gbp_g23
08:52:23 114  ,gbp_g24
08:52:23 115  ,gbp_g25
08:52:23 116  ,gbp_g26
08:52:23 117  ,gbp_g27
08:52:23 118  ,gbp_g28
08:52:23 119  ,gbp_g29
08:52:23 120  ,gbp_g30
08:52:23 121  ,gbp_g31
08:52:23 122  ,gbp_g32
08:52:23 123  ,gbp_g33
08:52:23 124  ,gbp_g34
08:52:23 125  ,gbp_g35
08:52:23 126  ,gbp_g36
08:52:23 127  ,gbp_g37
08:52:23 128  ,gbp_g38
08:52:23 129  ,gbp_g39
08:52:23 130  ,gbp_g40
08:52:23 131  ,gbp_g41
08:52:23 132  ,jpy_g00
08:52:23 133  ,jpy_g01
08:52:23 134  ,jpy_g02
08:52:23 135  ,jpy_g03
08:52:23 136  ,jpy_g04
08:52:23 137  ,jpy_g05
08:52:23 138  ,jpy_g06
08:52:23 139  ,jpy_g07
08:52:23 140  ,jpy_g08
08:52:23 141  ,jpy_g09
08:52:23 142  ,jpy_g10
08:52:23 143  ,jpy_g11
08:52:23 144  ,jpy_g12
08:52:23 145  ,jpy_g13
08:52:23 146  ,jpy_g14
08:52:23 147  ,jpy_g15
08:52:23 148  ,jpy_g16
08:52:23 149  ,jpy_g17
08:52:23 150  ,jpy_g18
08:52:23 151  ,jpy_g19
08:52:23 152  ,jpy_g20
08:52:23 153  ,jpy_g21
08:52:23 154  ,jpy_g22
08:52:23 155  ,jpy_g23
08:52:23 156  ,jpy_g24
08:52:23 157  ,jpy_g25
08:52:23 158  ,jpy_g26
08:52:23 159  ,jpy_g27
08:52:23 160  ,jpy_g28
08:52:23 161  ,jpy_g29
08:52:23 162  ,jpy_g30
08:52:23 163  ,jpy_g31
08:52:23 164  ,jpy_g32
08:52:23 165  ,jpy_g33
08:52:23 166  ,jpy_g34
08:52:23 167  ,jpy_g35
08:52:23 168  ,jpy_g36
08:52:23 169  ,jpy_g37
08:52:23 170  ,jpy_g38
08:52:23 171  ,jpy_g39
08:52:23 172  ,jpy_g40
08:52:23 173  ,jpy_g41
08:52:23 174  ,cad_g00
08:52:23 175  ,cad_g01
08:52:23 176  ,cad_g02
08:52:23 177  ,cad_g03
08:52:23 178  ,cad_g04
08:52:23 179  ,cad_g05
08:52:23 180  ,cad_g06
08:52:23 181  ,cad_g07
08:52:23 182  ,cad_g08
08:52:23 183  ,cad_g09
08:52:23 184  ,cad_g10
08:52:23 185  ,cad_g11
08:52:23 186  ,cad_g12
08:52:23 187  ,cad_g13
08:52:23 188  ,cad_g14
08:52:23 189  ,cad_g15
08:52:23 190  ,cad_g16
08:52:23 191  ,cad_g17
08:52:23 192  ,cad_g18
08:52:23 193  ,cad_g19
08:52:23 194  ,cad_g20
08:52:23 195  ,cad_g21
08:52:23 196  ,cad_g22
08:52:23 197  ,cad_g23
08:52:23 198  ,cad_g24
08:52:23 199  ,cad_g25
08:52:23 200  ,cad_g26
08:52:23 201  ,cad_g27
08:52:23 202  ,cad_g28
08:52:23 203  ,cad_g29
08:52:23 204  ,cad_g30
08:52:23 205  ,cad_g31
08:52:23 206  ,cad_g32
08:52:23 207  ,cad_g33
08:52:23 208  ,cad_g34
08:52:23 209  ,cad_g35
08:52:23 210  ,cad_g36
08:52:23 211  ,cad_g37
08:52:23 212  ,cad_g38
08:52:23 213  ,cad_g39
08:52:23 214  ,cad_g40
08:52:23 215  ,cad_g41
08:52:23 216  ,chf_g00
08:52:23 217  ,chf_g01
08:52:23 218  ,chf_g02
08:52:23 219  ,chf_g03
08:52:23 220  ,chf_g04
08:52:23 221  ,chf_g05
08:52:23 222  ,chf_g06
08:52:23 223  ,chf_g07
08:52:23 224  ,chf_g08
08:52:23 225  ,chf_g09
08:52:23 226  ,chf_g10
08:52:23 227  ,chf_g11
08:52:23 228  ,chf_g12
08:52:23 229  ,chf_g13
08:52:23 230  ,chf_g14
08:52:23 231  ,chf_g15
08:52:23 232  ,chf_g16
08:52:23 233  ,chf_g17
08:52:23 234  ,chf_g18
08:52:23 235  ,chf_g19
08:52:23 236  ,chf_g20
08:52:23 237  ,chf_g21
08:52:23 238  ,chf_g22
08:52:23 239  ,chf_g23
08:52:23 240  ,chf_g24
08:52:23 241  ,chf_g25
08:52:23 242  ,chf_g26
08:52:23 243  ,chf_g27
08:52:23 244  ,chf_g28
08:52:23 245  ,chf_g29
08:52:23 246  ,chf_g30
08:52:23 247  ,chf_g31
08:52:23 248  ,chf_g32
08:52:23 249  ,chf_g33
08:52:23 250  ,chf_g34
08:52:23 251  ,chf_g35
08:52:23 252  ,chf_g36
08:52:23 253  ,chf_g37
08:52:23 254  ,chf_g38
08:52:23 255  ,chf_g39
08:52:23 256  ,chf_g40
08:52:23 257  ,chf_g41
08:52:23 258  FROM aud_ms6 m
08:52:23 259  WHERE m.ydate = '&1'||' '||'&2'
08:52:23 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2011-01-07'||' '||'08:40:00'

View created.

Elapsed: 00:00:00.14
08:52:24 SQL> 
08:52:24 SQL> -- rpt
08:52:24 SQL> -- We should see just 1 row:
08:52:24 SQL> 
08:52:24 SQL> SELECT COUNT(prdate) FROM sme
08:52:24   2  
08:52:24 SQL> -- Build the model:
08:52:24 SQL> CREATE OR REPLACE VIEW bme AS
08:52:24   2  SELECT
08:52:24   3  'aud'||m.ydate prdate
08:52:24   4  ,gatt
08:52:24   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
08:52:24   6  ,eur_g00
08:52:24   7  ,eur_g01
08:52:24   8  ,eur_g02
08:52:24   9  ,eur_g03
08:52:24  10  ,eur_g04
08:52:24  11  ,eur_g05
08:52:24  12  ,eur_g06
08:52:24  13  ,eur_g07
08:52:24  14  ,eur_g08
08:52:24  15  ,eur_g09
08:52:24  16  ,eur_g10
08:52:24  17  ,eur_g11
08:52:24  18  ,eur_g12
08:52:24  19  ,eur_g13
08:52:24  20  ,eur_g14
08:52:24  21  ,eur_g15
08:52:24  22  ,eur_g16
08:52:24  23  ,eur_g17
08:52:24  24  ,eur_g18
08:52:24  25  ,eur_g19
08:52:24  26  ,eur_g20
08:52:24  27  ,eur_g21
08:52:24  28  ,eur_g22
08:52:24  29  ,eur_g23
08:52:24  30  ,eur_g24
08:52:24  31  ,eur_g25
08:52:24  32  ,eur_g26
08:52:24  33  ,eur_g27
08:52:24  34  ,eur_g28
08:52:24  35  ,eur_g29
08:52:24  36  ,eur_g30
08:52:24  37  ,eur_g31
08:52:24  38  ,eur_g32
08:52:24  39  ,eur_g33
08:52:24  40  ,eur_g34
08:52:24  41  ,eur_g35
08:52:24  42  ,eur_g36
08:52:24  43  ,eur_g37
08:52:24  44  ,eur_g38
08:52:24  45  ,eur_g39
08:52:24  46  ,eur_g40
08:52:24  47  ,eur_g41
08:52:24  48  ,aud_g00
08:52:24  49  ,aud_g01
08:52:24  50  ,aud_g02
08:52:24  51  ,aud_g03
08:52:24  52  ,aud_g04
08:52:24  53  ,aud_g05
08:52:24  54  ,aud_g06
08:52:24  55  ,aud_g07
08:52:24  56  ,aud_g08
08:52:24  57  ,aud_g09
08:52:24  58  ,aud_g10
08:52:24  59  ,aud_g11
08:52:24  60  ,aud_g12
08:52:24  61  ,aud_g13
08:52:24  62  ,aud_g14
08:52:24  63  ,aud_g15
08:52:24  64  ,aud_g16
08:52:24  65  ,aud_g17
08:52:24  66  ,aud_g18
08:52:24  67  ,aud_g19
08:52:24  68  ,aud_g20
08:52:24  69  ,aud_g21
08:52:24  70  ,aud_g22
08:52:24  71  ,aud_g23
08:52:24  72  ,aud_g24
08:52:24  73  ,aud_g25
08:52:24  74  ,aud_g26
08:52:24  75  ,aud_g27
08:52:24  76  ,aud_g28
08:52:24  77  ,aud_g29
08:52:24  78  ,aud_g30
08:52:24  79  ,aud_g31
08:52:24  80  ,aud_g32
08:52:24  81  ,aud_g33
08:52:24  82  ,aud_g34
08:52:24  83  ,aud_g35
08:52:24  84  ,aud_g36
08:52:24  85  ,aud_g37
08:52:24  86  ,aud_g38
08:52:24  87  ,aud_g39
08:52:24  88  ,aud_g40
08:52:24  89  ,aud_g41
08:52:24  90  ,gbp_g00
08:52:24  91  ,gbp_g01
08:52:24  92  ,gbp_g02
08:52:24  93  ,gbp_g03
08:52:24  94  ,gbp_g04
08:52:24  95  ,gbp_g05
08:52:24  96  ,gbp_g06
08:52:24  97  ,gbp_g07
08:52:24  98  ,gbp_g08
08:52:24  99  ,gbp_g09
08:52:24 100  ,gbp_g10
08:52:24 101  ,gbp_g11
08:52:24 102  ,gbp_g12
08:52:24 103  ,gbp_g13
08:52:24 104  ,gbp_g14
08:52:24 105  ,gbp_g15
08:52:24 106  ,gbp_g16
08:52:24 107  ,gbp_g17
08:52:24 108  ,gbp_g18
08:52:24 109  ,gbp_g19
08:52:24 110  ,gbp_g20
08:52:24 111  ,gbp_g21
08:52:24 112  ,gbp_g22
08:52:24 113  ,gbp_g23
08:52:24 114  ,gbp_g24
08:52:24 115  ,gbp_g25
08:52:24 116  ,gbp_g26
08:52:24 117  ,gbp_g27
08:52:24 118  ,gbp_g28
08:52:24 119  ,gbp_g29
08:52:24 120  ,gbp_g30
08:52:24 121  ,gbp_g31
08:52:24 122  ,gbp_g32
08:52:24 123  ,gbp_g33
08:52:24 124  ,gbp_g34
08:52:24 125  ,gbp_g35
08:52:24 126  ,gbp_g36
08:52:24 127  ,gbp_g37
08:52:24 128  ,gbp_g38
08:52:24 129  ,gbp_g39
08:52:24 130  ,gbp_g40
08:52:24 131  ,gbp_g41
08:52:24 132  ,jpy_g00
08:52:24 133  ,jpy_g01
08:52:24 134  ,jpy_g02
08:52:24 135  ,jpy_g03
08:52:24 136  ,jpy_g04
08:52:24 137  ,jpy_g05
08:52:24 138  ,jpy_g06
08:52:24 139  ,jpy_g07
08:52:24 140  ,jpy_g08
08:52:24 141  ,jpy_g09
08:52:24 142  ,jpy_g10
08:52:24 143  ,jpy_g11
08:52:24 144  ,jpy_g12
08:52:24 145  ,jpy_g13
08:52:24 146  ,jpy_g14
08:52:24 147  ,jpy_g15
08:52:24 148  ,jpy_g16
08:52:24 149  ,jpy_g17
08:52:24 150  ,jpy_g18
08:52:24 151  ,jpy_g19
08:52:24 152  ,jpy_g20
08:52:24 153  ,jpy_g21
08:52:24 154  ,jpy_g22
08:52:24 155  ,jpy_g23
08:52:24 156  ,jpy_g24
08:52:24 157  ,jpy_g25
08:52:24 158  ,jpy_g26
08:52:24 159  ,jpy_g27
08:52:24 160  ,jpy_g28
08:52:24 161  ,jpy_g29
08:52:24 162  ,jpy_g30
08:52:24 163  ,jpy_g31
08:52:24 164  ,jpy_g32
08:52:24 165  ,jpy_g33
08:52:24 166  ,jpy_g34
08:52:24 167  ,jpy_g35
08:52:24 168  ,jpy_g36
08:52:24 169  ,jpy_g37
08:52:24 170  ,jpy_g38
08:52:24 171  ,jpy_g39
08:52:24 172  ,jpy_g40
08:52:24 173  ,jpy_g41
08:52:24 174  ,cad_g00
08:52:24 175  ,cad_g01
08:52:24 176  ,cad_g02
08:52:24 177  ,cad_g03
08:52:24 178  ,cad_g04
08:52:24 179  ,cad_g05
08:52:24 180  ,cad_g06
08:52:24 181  ,cad_g07
08:52:24 182  ,cad_g08
08:52:24 183  ,cad_g09
08:52:24 184  ,cad_g10
08:52:24 185  ,cad_g11
08:52:24 186  ,cad_g12
08:52:24 187  ,cad_g13
08:52:24 188  ,cad_g14
08:52:24 189  ,cad_g15
08:52:24 190  ,cad_g16
08:52:24 191  ,cad_g17
08:52:24 192  ,cad_g18
08:52:24 193  ,cad_g19
08:52:24 194  ,cad_g20
08:52:24 195  ,cad_g21
08:52:24 196  ,cad_g22
08:52:24 197  ,cad_g23
08:52:24 198  ,cad_g24
08:52:24 199  ,cad_g25
08:52:24 200  ,cad_g26
08:52:24 201  ,cad_g27
08:52:24 202  ,cad_g28
08:52:24 203  ,cad_g29
08:52:24 204  ,cad_g30
08:52:24 205  ,cad_g31
08:52:24 206  ,cad_g32
08:52:24 207  ,cad_g33
08:52:24 208  ,cad_g34
08:52:24 209  ,cad_g35
08:52:24 210  ,cad_g36
08:52:24 211  ,cad_g37
08:52:24 212  ,cad_g38
08:52:24 213  ,cad_g39
08:52:24 214  ,cad_g40
08:52:24 215  ,cad_g41
08:52:24 216  ,chf_g00
08:52:24 217  ,chf_g01
08:52:24 218  ,chf_g02
08:52:24 219  ,chf_g03
08:52:24 220  ,chf_g04
08:52:24 221  ,chf_g05
08:52:24 222  ,chf_g06
08:52:24 223  ,chf_g07
08:52:24 224  ,chf_g08
08:52:24 225  ,chf_g09
08:52:24 226  ,chf_g10
08:52:24 227  ,chf_g11
08:52:24 228  ,chf_g12
08:52:24 229  ,chf_g13
08:52:24 230  ,chf_g14
08:52:24 231  ,chf_g15
08:52:24 232  ,chf_g16
08:52:24 233  ,chf_g17
08:52:24 234  ,chf_g18
08:52:24 235  ,chf_g19
08:52:24 236  ,chf_g20
08:52:24 237  ,chf_g21
08:52:24 238  ,chf_g22
08:52:24 239  ,chf_g23
08:52:24 240  ,chf_g24
08:52:24 241  ,chf_g25
08:52:24 242  ,chf_g26
08:52:24 243  ,chf_g27
08:52:24 244  ,chf_g28
08:52:24 245  ,chf_g29
08:52:24 246  ,chf_g30
08:52:24 247  ,chf_g31
08:52:24 248  ,chf_g32
08:52:24 249  ,chf_g33
08:52:24 250  ,chf_g34
08:52:24 251  ,chf_g35
08:52:24 252  ,chf_g36
08:52:24 253  ,chf_g37
08:52:24 254  ,chf_g38
08:52:24 255  ,chf_g39
08:52:24 256  ,chf_g40
08:52:24 257  ,chf_g41
08:52:24 258  FROM aud_ms6 m
08:52:24 259  WHERE gatt IN('nup','up')
08:52:24 260  AND 1+m.ydate < '&1'||' '||'&2'
08:52:24 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2011-01-07'||' '||'08:40:00'

View created.

Elapsed: 00:00:00.13
08:52:24 SQL> 
08:52:24 SQL> -- rpt
08:52:24 SQL> 
08:52:24 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt
08:52:24   2  
08:52:24 SQL> SELECT MAX(prdate) FROM bme
08:52:24   2  
08:52:24 SQL> -- Now build model from bme and score sme
08:52:24 SQL> @score1.sql
08:52:24 SQL> -- score1.sql
08:52:24 SQL> 
08:52:24 SQL> -- Does the 1st SVM score
08:52:24 SQL> 
08:52:24 SQL> -- Fill up svmc_apply_prep
08:52:24 SQL> @score.sql
08:52:24 SQL> --
08:52:24 SQL> -- score.sql
08:52:24 SQL> --
08:52:24 SQL> 
08:52:24 SQL> -- usage: score.sql
08:52:24 SQL> 
08:52:24 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
08:52:24 SQL> 
08:52:24 SQL> DEFINE target	= 'gatt'
08:52:24 SQL> DEFINE model_name = 'forex15'
08:52:24 SQL> DEFINE bldtable	= 'bme'
08:52:24 SQL> DEFINE scoretable = 'sme'
08:52:24 SQL> DEFINE case_id	= 'prdate'
08:52:24 SQL> 
08:52:24 SQL> -- Define a variable to help me exclude some columns from some data mining calls
08:52:24 SQL> DEFINE exclude1 = "'&target','&case_id'"
08:52:24 SQL> 
08:52:24 SQL> -- Builds an SVM model using pl/sql.
08:52:24 SQL> 
08:52:24 SQL> -----------------------------------------------------------------------
08:52:24 SQL> --			    BUILD THE MODEL
08:52:24 SQL> -----------------------------------------------------------------------
08:52:24 SQL> 
08:52:24 SQL> -- Cleanup old build data preparation objects for repeat runs
08:52:24 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.00
08:52:24 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
08:52:24 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.01
08:52:24 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.00
08:52:24 SQL> 
08:52:24 SQL> 
08:52:24 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
08:52:24 SQL> --
08:52:24 SQL> -- DROP	TABLE svmc_settings ;
08:52:24 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
08:52:24 SQL> -- DELETE svmc_settings;
08:52:24 SQL> 
08:52:24 SQL> -- The default classification algorithm is Naive Bayes. So override
08:52:24 SQL> -- this choice to SVM using a settings table.
08:52:24 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
08:52:24 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
08:52:24 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
08:52:24 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
08:52:24 SQL> -- models.
08:52:24 SQL> --
08:52:24 SQL> 
08:52:24 SQL> -- Do this once and then comment it out.
08:52:24 SQL> -- That makes script go faster.
08:52:24 SQL> -- BEGIN
08:52:24 SQL> -- -- Populate settings table
08:52:24 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
08:52:24 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
08:52:24 SQL> --
08:52:24 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
08:52:24 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
08:52:24 SQL> --
08:52:24 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
08:52:24 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
08:52:24 SQL> --   COMMIT;
08:52:24 SQL> -- END;
08:52:24 SQL> -- /
08:52:24 SQL> 
08:52:24 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
08:52:24 SQL> 
08:52:24 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
08:52:24   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:52:24   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
08:52:24 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
08:52:24   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:52:24   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
08:52:24 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
08:52:24   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:52:24   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
08:52:24 SQL> 
08:52:24 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
08:52:24   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:52:24   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
08:52:24 SQL> 
08:52:24 SQL> --------------------------------
08:52:24 SQL> -- PREPARE BUILD (TRAINING) DATA
08:52:24 SQL> --
08:52:24 SQL> 
08:52:24 SQL> -- 1. Missing Value treatment for all Predictors and
08:52:24 SQL> -- 2. Outlier Treatment and
08:52:24 SQL> -- 3. Normalization are performed below.
08:52:24 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
08:52:24 SQL> --    normalized here.
08:52:24 SQL> 
08:52:24 SQL> BEGIN
08:52:24   2  	-- Perform missing value treatment for all predictors
08:52:24   3  	-- create miss tables
08:52:24   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
08:52:24   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
08:52:24   6  
08:52:24   7  	-- populate miss tables
08:52:24   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
08:52:24   9  	  miss_table_name => 'svmc_miss_num',
08:52:24  10  	  data_table_name => '&bldtable',
08:52:24  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
08:52:24  12  
08:52:24  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
08:52:24  14  	  miss_table_name => 'svmc_miss_cat',
08:52:24  15  	  data_table_name => '&bldtable',
08:52:24  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
08:52:24  17  
08:52:24  18  	-- xform input data to replace missing values
08:52:24  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
08:52:24  20  	  miss_table_name => 'svmc_miss_num',
08:52:24  21  	  data_table_name => '&bldtable',
08:52:24  22  	  xform_view_name => 'xformed_build_miss_num');
08:52:24  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
08:52:24  24  	  miss_table_name => 'svmc_miss_cat',
08:52:24  25  	  data_table_name => '&bldtable',
08:52:24  26  	  xform_view_name => 'xformed_build_miss_cat');
08:52:24  27  
08:52:24  28  	-- Perform outlier treatment.
08:52:24  29  	-- create clip table
08:52:24  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
08:52:24  31  
08:52:24  32  	-- populate clip table
08:52:24  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
08:52:24  34  	  clip_table_name => 'svmc_clip',
08:52:24  35  	  data_table_name => '&bldtable',
08:52:24  36  	  tail_frac	  => 0.025,
08:52:24  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
08:52:24  38  
08:52:24  39  	-- xform input data to winsorized data
08:52:24  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
08:52:24  41  	  clip_table_name => 'svmc_clip',
08:52:24  42  	  data_table_name => '&bldtable',
08:52:24  43  	  xform_view_name => 'svmc_winsor');
08:52:24  44  
08:52:24  45  	-- create normalization table
08:52:24  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
08:52:24  47  
08:52:24  48  	-- populate normalization table based on winsorized data
08:52:24  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
08:52:24  50  	  norm_table_name => 'svmc_norm',
08:52:24  51  	  data_table_name => 'svmc_winsor',
08:52:24  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
08:52:24  53  
08:52:24  54  	-- normalize the original data
08:52:24  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
08:52:24  56  	  norm_table_name => 'svmc_norm',
08:52:24  57  	  data_table_name => '&bldtable',
08:52:24  58  	  xform_view_name => 'svmc_build_prep');
08:52:24  59  END;
08:52:24  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:18.72
08:52:43 SQL> 
08:52:43 SQL> ---------------------
08:52:43 SQL> -- CREATE A NEW MODEL
08:52:43 SQL> --
08:52:43 SQL> -- Cleanup old model with the same name for repeat runs
08:52:43 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
08:52:43   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:52:43   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex15');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.04
08:52:44 SQL> 
08:52:44 SQL> -- Build a new SVM Model
08:52:44 SQL> BEGIN
08:52:44   2  	DBMS_DATA_MINING.CREATE_MODEL(
08:52:44   3  	  model_name	      => '&model_name',
08:52:44   4  	  mining_function     => dbms_data_mining.classification,
08:52:44   5  	  data_table_name     => 'svmc_build_prep',
08:52:44   6  	  case_id_column_name => '&case_id',
08:52:44   7  	  target_column_name  => '&target',
08:52:44   8  	  settings_table_name => 'svmc_settings');
08:52:44   9  END;
08:52:44  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex15',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:28.59
08:53:12 SQL> 
08:53:12 SQL> -----------------------------------------------------------------------
08:53:12 SQL> --			       APPLY/score THE MODEL
08:53:12 SQL> -----------------------------------------------------------------------
08:53:12 SQL> 
08:53:12 SQL> -- Cleanup old scoring data preparation objects for repeat runs
08:53:12 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
08:53:12   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:53:12   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
08:53:12 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
08:53:12   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:53:12   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
08:53:12 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
08:53:12   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:53:12   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
08:53:12 SQL> -----------------------
08:53:12 SQL> -- PREPARE SCORING DATA
08:53:12 SQL> --
08:53:12 SQL> -- If the data for model creation has been prepared, then the data
08:53:12 SQL> -- to be scored using the model must be prepared in the same manner
08:53:12 SQL> -- in order to obtain meaningful results.
08:53:12 SQL> --
08:53:12 SQL> -- 1. Missing Value treatment for all Predictors and
08:53:12 SQL> -- 2. Normalization
08:53:12 SQL> -- No outlier treatment will be performed during test and apply. The
08:53:12 SQL> -- normalization step is sufficient, since the normalization parameters
08:53:12 SQL> -- already capture the effects of outlier treatment done with build data.
08:53:12 SQL> --
08:53:12 SQL> BEGIN
08:53:12   2  	-- Xform Test data to replace missing values
08:53:12   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
08:53:12   4  	  miss_table_name => 'svmc_miss_num',
08:53:12   5  	  data_table_name => '&scoretable',
08:53:12   6  	  xform_view_name => 'xformed_apply_miss_num');
08:53:12   7  
08:53:12   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
08:53:12   9  	  miss_table_name => 'svmc_miss_cat',
08:53:12  10  	  data_table_name => '&scoretable',
08:53:12  11  	  xform_view_name => 'xformed_apply_miss_cat');
08:53:12  12  
08:53:12  13  	-- Normalize the data to be scored
08:53:12  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
08:53:12  15  	  norm_table_name => 'svmc_norm',
08:53:12  16  	  data_table_name => '&scoretable',
08:53:12  17  	  xform_view_name => 'svmc_apply_prep');
08:53:12  18  END;
08:53:12  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.29
08:53:14 SQL> 
08:53:14 SQL> -- Use same model_name used in score.sql
08:53:14 SQL> DEFINE model_name = 'forex15'
08:53:14 SQL> 
08:53:14 SQL> -- CREATE TABLE fxscores6 (prdate VARCHAR2(30),score NUMBER,rundate DATE,pair VARCHAR2(8),ydate DATE);
08:53:14 SQL> 
08:53:14 SQL> DELETE fxscores6 WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.04
08:53:14 SQL> 
08:53:14 SQL> INSERT INTO fxscores6 (prdate,score,rundate,pair,ydate)
08:53:14   2  SELECT
08:53:14   3  prdate
08:53:14   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
08:53:14   5  ,sysdate
08:53:14   6  ,SUBSTR(prdate,1,3)pair
08:53:14   7  ,SUBSTR(prdate,4,19)ydate
08:53:14   8  FROM svmc_apply_prep
08:53:14   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex15,'up' USING *)score

1 row created.

Elapsed: 00:00:00.18
08:53:14 SQL> @aud_score1day_gattn.sql	2011-01-07 08:25:00
08:53:14 SQL> --
08:53:14 SQL> -- aud_score1day_gattn.sql
08:53:14 SQL> --
08:53:14 SQL> 
08:53:14 SQL> CREATE OR REPLACE VIEW sme AS
08:53:14   2  SELECT
08:53:14   3  'aud'||m.ydate prdate
08:53:14   4  ,NULL gattn
08:53:14   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
08:53:14   6  ,eur_g00
08:53:14   7  ,eur_g01
08:53:14   8  ,eur_g02
08:53:14   9  ,eur_g03
08:53:14  10  ,eur_g04
08:53:14  11  ,eur_g05
08:53:14  12  ,eur_g06
08:53:14  13  ,eur_g07
08:53:14  14  ,eur_g08
08:53:14  15  ,eur_g09
08:53:14  16  ,eur_g10
08:53:14  17  ,eur_g11
08:53:14  18  ,eur_g12
08:53:14  19  ,eur_g13
08:53:14  20  ,eur_g14
08:53:14  21  ,eur_g15
08:53:14  22  ,eur_g16
08:53:14  23  ,eur_g17
08:53:14  24  ,eur_g18
08:53:14  25  ,eur_g19
08:53:14  26  ,eur_g20
08:53:14  27  ,eur_g21
08:53:14  28  ,eur_g22
08:53:14  29  ,eur_g23
08:53:14  30  ,eur_g24
08:53:14  31  ,eur_g25
08:53:14  32  ,eur_g26
08:53:14  33  ,eur_g27
08:53:14  34  ,eur_g28
08:53:14  35  ,eur_g29
08:53:14  36  ,eur_g30
08:53:14  37  ,eur_g31
08:53:14  38  ,eur_g32
08:53:14  39  ,eur_g33
08:53:14  40  ,eur_g34
08:53:14  41  ,eur_g35
08:53:14  42  ,eur_g36
08:53:14  43  ,eur_g37
08:53:14  44  ,eur_g38
08:53:14  45  ,eur_g39
08:53:14  46  ,eur_g40
08:53:14  47  ,eur_g41
08:53:14  48  ,aud_g00
08:53:14  49  ,aud_g01
08:53:14  50  ,aud_g02
08:53:14  51  ,aud_g03
08:53:14  52  ,aud_g04
08:53:14  53  ,aud_g05
08:53:14  54  ,aud_g06
08:53:14  55  ,aud_g07
08:53:14  56  ,aud_g08
08:53:14  57  ,aud_g09
08:53:14  58  ,aud_g10
08:53:14  59  ,aud_g11
08:53:14  60  ,aud_g12
08:53:14  61  ,aud_g13
08:53:14  62  ,aud_g14
08:53:14  63  ,aud_g15
08:53:14  64  ,aud_g16
08:53:14  65  ,aud_g17
08:53:14  66  ,aud_g18
08:53:14  67  ,aud_g19
08:53:14  68  ,aud_g20
08:53:14  69  ,aud_g21
08:53:14  70  ,aud_g22
08:53:14  71  ,aud_g23
08:53:14  72  ,aud_g24
08:53:14  73  ,aud_g25
08:53:14  74  ,aud_g26
08:53:14  75  ,aud_g27
08:53:14  76  ,aud_g28
08:53:14  77  ,aud_g29
08:53:14  78  ,aud_g30
08:53:14  79  ,aud_g31
08:53:14  80  ,aud_g32
08:53:14  81  ,aud_g33
08:53:14  82  ,aud_g34
08:53:14  83  ,aud_g35
08:53:14  84  ,aud_g36
08:53:14  85  ,aud_g37
08:53:14  86  ,aud_g38
08:53:14  87  ,aud_g39
08:53:14  88  ,aud_g40
08:53:14  89  ,aud_g41
08:53:14  90  ,gbp_g00
08:53:14  91  ,gbp_g01
08:53:14  92  ,gbp_g02
08:53:14  93  ,gbp_g03
08:53:14  94  ,gbp_g04
08:53:14  95  ,gbp_g05
08:53:14  96  ,gbp_g06
08:53:14  97  ,gbp_g07
08:53:14  98  ,gbp_g08
08:53:14  99  ,gbp_g09
08:53:14 100  ,gbp_g10
08:53:14 101  ,gbp_g11
08:53:14 102  ,gbp_g12
08:53:14 103  ,gbp_g13
08:53:14 104  ,gbp_g14
08:53:14 105  ,gbp_g15
08:53:14 106  ,gbp_g16
08:53:14 107  ,gbp_g17
08:53:14 108  ,gbp_g18
08:53:14 109  ,gbp_g19
08:53:14 110  ,gbp_g20
08:53:14 111  ,gbp_g21
08:53:14 112  ,gbp_g22
08:53:14 113  ,gbp_g23
08:53:14 114  ,gbp_g24
08:53:14 115  ,gbp_g25
08:53:14 116  ,gbp_g26
08:53:14 117  ,gbp_g27
08:53:14 118  ,gbp_g28
08:53:14 119  ,gbp_g29
08:53:14 120  ,gbp_g30
08:53:14 121  ,gbp_g31
08:53:14 122  ,gbp_g32
08:53:14 123  ,gbp_g33
08:53:14 124  ,gbp_g34
08:53:14 125  ,gbp_g35
08:53:14 126  ,gbp_g36
08:53:14 127  ,gbp_g37
08:53:14 128  ,gbp_g38
08:53:14 129  ,gbp_g39
08:53:14 130  ,gbp_g40
08:53:14 131  ,gbp_g41
08:53:14 132  ,jpy_g00
08:53:14 133  ,jpy_g01
08:53:14 134  ,jpy_g02
08:53:14 135  ,jpy_g03
08:53:14 136  ,jpy_g04
08:53:14 137  ,jpy_g05
08:53:14 138  ,jpy_g06
08:53:14 139  ,jpy_g07
08:53:14 140  ,jpy_g08
08:53:14 141  ,jpy_g09
08:53:14 142  ,jpy_g10
08:53:14 143  ,jpy_g11
08:53:14 144  ,jpy_g12
08:53:14 145  ,jpy_g13
08:53:14 146  ,jpy_g14
08:53:14 147  ,jpy_g15
08:53:14 148  ,jpy_g16
08:53:14 149  ,jpy_g17
08:53:14 150  ,jpy_g18
08:53:14 151  ,jpy_g19
08:53:14 152  ,jpy_g20
08:53:14 153  ,jpy_g21
08:53:14 154  ,jpy_g22
08:53:14 155  ,jpy_g23
08:53:14 156  ,jpy_g24
08:53:14 157  ,jpy_g25
08:53:14 158  ,jpy_g26
08:53:14 159  ,jpy_g27
08:53:14 160  ,jpy_g28
08:53:14 161  ,jpy_g29
08:53:14 162  ,jpy_g30
08:53:14 163  ,jpy_g31
08:53:14 164  ,jpy_g32
08:53:14 165  ,jpy_g33
08:53:14 166  ,jpy_g34
08:53:14 167  ,jpy_g35
08:53:14 168  ,jpy_g36
08:53:14 169  ,jpy_g37
08:53:14 170  ,jpy_g38
08:53:14 171  ,jpy_g39
08:53:14 172  ,jpy_g40
08:53:14 173  ,jpy_g41
08:53:14 174  ,cad_g00
08:53:14 175  ,cad_g01
08:53:14 176  ,cad_g02
08:53:14 177  ,cad_g03
08:53:14 178  ,cad_g04
08:53:14 179  ,cad_g05
08:53:14 180  ,cad_g06
08:53:14 181  ,cad_g07
08:53:14 182  ,cad_g08
08:53:14 183  ,cad_g09
08:53:14 184  ,cad_g10
08:53:14 185  ,cad_g11
08:53:14 186  ,cad_g12
08:53:14 187  ,cad_g13
08:53:14 188  ,cad_g14
08:53:14 189  ,cad_g15
08:53:14 190  ,cad_g16
08:53:14 191  ,cad_g17
08:53:14 192  ,cad_g18
08:53:14 193  ,cad_g19
08:53:14 194  ,cad_g20
08:53:14 195  ,cad_g21
08:53:14 196  ,cad_g22
08:53:14 197  ,cad_g23
08:53:14 198  ,cad_g24
08:53:14 199  ,cad_g25
08:53:14 200  ,cad_g26
08:53:14 201  ,cad_g27
08:53:14 202  ,cad_g28
08:53:14 203  ,cad_g29
08:53:14 204  ,cad_g30
08:53:14 205  ,cad_g31
08:53:14 206  ,cad_g32
08:53:14 207  ,cad_g33
08:53:14 208  ,cad_g34
08:53:14 209  ,cad_g35
08:53:14 210  ,cad_g36
08:53:14 211  ,cad_g37
08:53:14 212  ,cad_g38
08:53:14 213  ,cad_g39
08:53:14 214  ,cad_g40
08:53:14 215  ,cad_g41
08:53:14 216  ,chf_g00
08:53:14 217  ,chf_g01
08:53:14 218  ,chf_g02
08:53:14 219  ,chf_g03
08:53:14 220  ,chf_g04
08:53:14 221  ,chf_g05
08:53:14 222  ,chf_g06
08:53:14 223  ,chf_g07
08:53:14 224  ,chf_g08
08:53:14 225  ,chf_g09
08:53:14 226  ,chf_g10
08:53:14 227  ,chf_g11
08:53:14 228  ,chf_g12
08:53:14 229  ,chf_g13
08:53:14 230  ,chf_g14
08:53:14 231  ,chf_g15
08:53:14 232  ,chf_g16
08:53:14 233  ,chf_g17
08:53:14 234  ,chf_g18
08:53:14 235  ,chf_g19
08:53:14 236  ,chf_g20
08:53:14 237  ,chf_g21
08:53:14 238  ,chf_g22
08:53:14 239  ,chf_g23
08:53:14 240  ,chf_g24
08:53:14 241  ,chf_g25
08:53:14 242  ,chf_g26
08:53:14 243  ,chf_g27
08:53:14 244  ,chf_g28
08:53:14 245  ,chf_g29
08:53:14 246  ,chf_g30
08:53:14 247  ,chf_g31
08:53:14 248  ,chf_g32
08:53:14 249  ,chf_g33
08:53:14 250  ,chf_g34
08:53:14 251  ,chf_g35
08:53:14 252  ,chf_g36
08:53:14 253  ,chf_g37
08:53:14 254  ,chf_g38
08:53:14 255  ,chf_g39
08:53:14 256  ,chf_g40
08:53:14 257  ,chf_g41
08:53:14 258  FROM aud_ms6 m
08:53:14 259  WHERE m.ydate = '&1'||' '||'&2'
08:53:14 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2011-01-07'||' '||'08:25:00'

View created.

Elapsed: 00:00:00.12
08:53:14 SQL> 
08:53:14 SQL> -- rpt
08:53:14 SQL> -- We should see just 1 row:
08:53:14 SQL> 
08:53:14 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
08:53:14 SQL> 
08:53:14 SQL> -- Build the model:
08:53:14 SQL> CREATE OR REPLACE VIEW bme AS
08:53:14   2  SELECT
08:53:14   3  'aud'||m.ydate prdate
08:53:14   4  ,gattn
08:53:14   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
08:53:14   6  ,eur_g00
08:53:14   7  ,eur_g01
08:53:14   8  ,eur_g02
08:53:14   9  ,eur_g03
08:53:14  10  ,eur_g04
08:53:14  11  ,eur_g05
08:53:14  12  ,eur_g06
08:53:14  13  ,eur_g07
08:53:14  14  ,eur_g08
08:53:14  15  ,eur_g09
08:53:14  16  ,eur_g10
08:53:14  17  ,eur_g11
08:53:14  18  ,eur_g12
08:53:14  19  ,eur_g13
08:53:14  20  ,eur_g14
08:53:14  21  ,eur_g15
08:53:14  22  ,eur_g16
08:53:14  23  ,eur_g17
08:53:14  24  ,eur_g18
08:53:14  25  ,eur_g19
08:53:14  26  ,eur_g20
08:53:14  27  ,eur_g21
08:53:14  28  ,eur_g22
08:53:14  29  ,eur_g23
08:53:14  30  ,eur_g24
08:53:14  31  ,eur_g25
08:53:14  32  ,eur_g26
08:53:14  33  ,eur_g27
08:53:14  34  ,eur_g28
08:53:14  35  ,eur_g29
08:53:14  36  ,eur_g30
08:53:14  37  ,eur_g31
08:53:14  38  ,eur_g32
08:53:14  39  ,eur_g33
08:53:14  40  ,eur_g34
08:53:14  41  ,eur_g35
08:53:14  42  ,eur_g36
08:53:14  43  ,eur_g37
08:53:14  44  ,eur_g38
08:53:14  45  ,eur_g39
08:53:14  46  ,eur_g40
08:53:14  47  ,eur_g41
08:53:14  48  ,aud_g00
08:53:14  49  ,aud_g01
08:53:14  50  ,aud_g02
08:53:14  51  ,aud_g03
08:53:14  52  ,aud_g04
08:53:14  53  ,aud_g05
08:53:14  54  ,aud_g06
08:53:14  55  ,aud_g07
08:53:14  56  ,aud_g08
08:53:14  57  ,aud_g09
08:53:14  58  ,aud_g10
08:53:14  59  ,aud_g11
08:53:14  60  ,aud_g12
08:53:14  61  ,aud_g13
08:53:14  62  ,aud_g14
08:53:14  63  ,aud_g15
08:53:14  64  ,aud_g16
08:53:14  65  ,aud_g17
08:53:14  66  ,aud_g18
08:53:14  67  ,aud_g19
08:53:14  68  ,aud_g20
08:53:14  69  ,aud_g21
08:53:14  70  ,aud_g22
08:53:14  71  ,aud_g23
08:53:14  72  ,aud_g24
08:53:14  73  ,aud_g25
08:53:14  74  ,aud_g26
08:53:14  75  ,aud_g27
08:53:14  76  ,aud_g28
08:53:14  77  ,aud_g29
08:53:14  78  ,aud_g30
08:53:14  79  ,aud_g31
08:53:14  80  ,aud_g32
08:53:14  81  ,aud_g33
08:53:14  82  ,aud_g34
08:53:14  83  ,aud_g35
08:53:14  84  ,aud_g36
08:53:14  85  ,aud_g37
08:53:14  86  ,aud_g38
08:53:14  87  ,aud_g39
08:53:14  88  ,aud_g40
08:53:14  89  ,aud_g41
08:53:14  90  ,gbp_g00
08:53:14  91  ,gbp_g01
08:53:14  92  ,gbp_g02
08:53:14  93  ,gbp_g03
08:53:14  94  ,gbp_g04
08:53:14  95  ,gbp_g05
08:53:14  96  ,gbp_g06
08:53:14  97  ,gbp_g07
08:53:14  98  ,gbp_g08
08:53:14  99  ,gbp_g09
08:53:14 100  ,gbp_g10
08:53:14 101  ,gbp_g11
08:53:14 102  ,gbp_g12
08:53:14 103  ,gbp_g13
08:53:14 104  ,gbp_g14
08:53:14 105  ,gbp_g15
08:53:14 106  ,gbp_g16
08:53:14 107  ,gbp_g17
08:53:14 108  ,gbp_g18
08:53:14 109  ,gbp_g19
08:53:14 110  ,gbp_g20
08:53:14 111  ,gbp_g21
08:53:14 112  ,gbp_g22
08:53:14 113  ,gbp_g23
08:53:14 114  ,gbp_g24
08:53:14 115  ,gbp_g25
08:53:14 116  ,gbp_g26
08:53:14 117  ,gbp_g27
08:53:14 118  ,gbp_g28
08:53:14 119  ,gbp_g29
08:53:14 120  ,gbp_g30
08:53:14 121  ,gbp_g31
08:53:14 122  ,gbp_g32
08:53:14 123  ,gbp_g33
08:53:14 124  ,gbp_g34
08:53:14 125  ,gbp_g35
08:53:14 126  ,gbp_g36
08:53:14 127  ,gbp_g37
08:53:14 128  ,gbp_g38
08:53:14 129  ,gbp_g39
08:53:14 130  ,gbp_g40
08:53:14 131  ,gbp_g41
08:53:14 132  ,jpy_g00
08:53:14 133  ,jpy_g01
08:53:14 134  ,jpy_g02
08:53:14 135  ,jpy_g03
08:53:14 136  ,jpy_g04
08:53:14 137  ,jpy_g05
08:53:14 138  ,jpy_g06
08:53:14 139  ,jpy_g07
08:53:14 140  ,jpy_g08
08:53:14 141  ,jpy_g09
08:53:14 142  ,jpy_g10
08:53:14 143  ,jpy_g11
08:53:14 144  ,jpy_g12
08:53:14 145  ,jpy_g13
08:53:14 146  ,jpy_g14
08:53:14 147  ,jpy_g15
08:53:14 148  ,jpy_g16
08:53:14 149  ,jpy_g17
08:53:14 150  ,jpy_g18
08:53:14 151  ,jpy_g19
08:53:14 152  ,jpy_g20
08:53:14 153  ,jpy_g21
08:53:14 154  ,jpy_g22
08:53:14 155  ,jpy_g23
08:53:14 156  ,jpy_g24
08:53:14 157  ,jpy_g25
08:53:14 158  ,jpy_g26
08:53:14 159  ,jpy_g27
08:53:14 160  ,jpy_g28
08:53:14 161  ,jpy_g29
08:53:14 162  ,jpy_g30
08:53:14 163  ,jpy_g31
08:53:14 164  ,jpy_g32
08:53:14 165  ,jpy_g33
08:53:14 166  ,jpy_g34
08:53:14 167  ,jpy_g35
08:53:14 168  ,jpy_g36
08:53:14 169  ,jpy_g37
08:53:14 170  ,jpy_g38
08:53:14 171  ,jpy_g39
08:53:14 172  ,jpy_g40
08:53:14 173  ,jpy_g41
08:53:14 174  ,cad_g00
08:53:14 175  ,cad_g01
08:53:14 176  ,cad_g02
08:53:14 177  ,cad_g03
08:53:14 178  ,cad_g04
08:53:14 179  ,cad_g05
08:53:14 180  ,cad_g06
08:53:14 181  ,cad_g07
08:53:14 182  ,cad_g08
08:53:14 183  ,cad_g09
08:53:14 184  ,cad_g10
08:53:14 185  ,cad_g11
08:53:14 186  ,cad_g12
08:53:14 187  ,cad_g13
08:53:14 188  ,cad_g14
08:53:14 189  ,cad_g15
08:53:14 190  ,cad_g16
08:53:14 191  ,cad_g17
08:53:14 192  ,cad_g18
08:53:14 193  ,cad_g19
08:53:14 194  ,cad_g20
08:53:14 195  ,cad_g21
08:53:14 196  ,cad_g22
08:53:14 197  ,cad_g23
08:53:14 198  ,cad_g24
08:53:14 199  ,cad_g25
08:53:14 200  ,cad_g26
08:53:14 201  ,cad_g27
08:53:14 202  ,cad_g28
08:53:14 203  ,cad_g29
08:53:14 204  ,cad_g30
08:53:14 205  ,cad_g31
08:53:14 206  ,cad_g32
08:53:14 207  ,cad_g33
08:53:14 208  ,cad_g34
08:53:14 209  ,cad_g35
08:53:14 210  ,cad_g36
08:53:14 211  ,cad_g37
08:53:14 212  ,cad_g38
08:53:14 213  ,cad_g39
08:53:14 214  ,cad_g40
08:53:14 215  ,cad_g41
08:53:14 216  ,chf_g00
08:53:14 217  ,chf_g01
08:53:14 218  ,chf_g02
08:53:14 219  ,chf_g03
08:53:14 220  ,chf_g04
08:53:14 221  ,chf_g05
08:53:14 222  ,chf_g06
08:53:14 223  ,chf_g07
08:53:14 224  ,chf_g08
08:53:14 225  ,chf_g09
08:53:14 226  ,chf_g10
08:53:14 227  ,chf_g11
08:53:14 228  ,chf_g12
08:53:14 229  ,chf_g13
08:53:14 230  ,chf_g14
08:53:14 231  ,chf_g15
08:53:14 232  ,chf_g16
08:53:14 233  ,chf_g17
08:53:14 234  ,chf_g18
08:53:14 235  ,chf_g19
08:53:14 236  ,chf_g20
08:53:14 237  ,chf_g21
08:53:14 238  ,chf_g22
08:53:14 239  ,chf_g23
08:53:14 240  ,chf_g24
08:53:14 241  ,chf_g25
08:53:14 242  ,chf_g26
08:53:14 243  ,chf_g27
08:53:14 244  ,chf_g28
08:53:14 245  ,chf_g29
08:53:14 246  ,chf_g30
08:53:14 247  ,chf_g31
08:53:14 248  ,chf_g32
08:53:14 249  ,chf_g33
08:53:14 250  ,chf_g34
08:53:14 251  ,chf_g35
08:53:14 252  ,chf_g36
08:53:14 253  ,chf_g37
08:53:14 254  ,chf_g38
08:53:14 255  ,chf_g39
08:53:14 256  ,chf_g40
08:53:14 257  ,chf_g41
08:53:14 258  FROM aud_ms6 m
08:53:14 259  WHERE gattn IN('nup','up')
08:53:14 260  AND 1+m.ydate < '&1'||' '||'&2'
08:53:14 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2011-01-07'||' '||'08:25:00'

View created.

Elapsed: 00:00:00.11
08:53:14 SQL> 
08:53:14 SQL> -- rpt
08:53:14 SQL> 
08:53:14 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	    12900
up	     6608

Elapsed: 00:00:00.04
08:53:14 SQL> 
08:53:14 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
aud2011-01-06 08:20:00

Elapsed: 00:00:00.04
08:53:14 SQL> 
08:53:14 SQL> -- Now build model from bme and score sme
08:53:14 SQL> @score1gattn.sql
08:53:14 SQL> -- score1gattn.sql
08:53:14 SQL> 
08:53:14 SQL> -- Does the 1st SVM score
08:53:14 SQL> 
08:53:14 SQL> -- Fill up svmc_apply_prep
08:53:14 SQL> @score_gattn.sql
08:53:14 SQL> --
08:53:14 SQL> -- score_gattn.sql
08:53:14 SQL> --
08:53:14 SQL> 
08:53:14 SQL> -- usage: score_gattn.sql
08:53:14 SQL> 
08:53:14 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
08:53:14 SQL> 
08:53:14 SQL> DEFINE target	= 'gattn'
08:53:14 SQL> DEFINE model_name = 'forex15'
08:53:14 SQL> DEFINE bldtable	= 'bme'
08:53:14 SQL> DEFINE scoretable = 'sme'
08:53:14 SQL> DEFINE case_id	= 'prdate'
08:53:14 SQL> 
08:53:14 SQL> -- Define a variable to help me exclude some columns from some data mining calls
08:53:14 SQL> DEFINE exclude1 = "'&target','&case_id'"
08:53:14 SQL> 
08:53:14 SQL> -- Builds an SVM model using pl/sql.
08:53:14 SQL> 
08:53:14 SQL> -----------------------------------------------------------------------
08:53:14 SQL> --			    BUILD THE MODEL
08:53:14 SQL> -----------------------------------------------------------------------
08:53:14 SQL> 
08:53:14 SQL> -- Cleanup old build data preparation objects for repeat runs
08:53:14 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.00
08:53:14 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
08:53:14 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.01
08:53:14 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.00
08:53:14 SQL> 
08:53:14 SQL> 
08:53:14 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
08:53:14 SQL> --
08:53:14 SQL> -- DROP	TABLE svmc_settings ;
08:53:14 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
08:53:14 SQL> -- DELETE svmc_settings;
08:53:14 SQL> 
08:53:14 SQL> -- The default classification algorithm is Naive Bayes. So override
08:53:14 SQL> -- this choice to SVM using a settings table.
08:53:14 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
08:53:14 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
08:53:14 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
08:53:14 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
08:53:14 SQL> -- models.
08:53:14 SQL> --
08:53:14 SQL> 
08:53:14 SQL> -- Do this once and then comment it out.
08:53:14 SQL> -- That makes script go faster.
08:53:14 SQL> -- BEGIN
08:53:14 SQL> -- -- Populate settings table
08:53:14 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
08:53:14 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
08:53:14 SQL> --
08:53:14 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
08:53:14 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
08:53:14 SQL> --
08:53:14 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
08:53:14 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
08:53:14 SQL> --   COMMIT;
08:53:14 SQL> -- END;
08:53:14 SQL> -- /
08:53:14 SQL> 
08:53:14 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
08:53:14 SQL> 
08:53:14 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
08:53:14   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:53:14   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
08:53:14 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
08:53:14   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:53:14   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
08:53:14 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
08:53:14   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:53:14   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
08:53:15 SQL> 
08:53:15 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
08:53:15   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:53:15   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
08:53:15 SQL> 
08:53:15 SQL> --------------------------------
08:53:15 SQL> -- PREPARE BUILD (TRAINING) DATA
08:53:15 SQL> --
08:53:15 SQL> 
08:53:15 SQL> -- 1. Missing Value treatment for all Predictors and
08:53:15 SQL> -- 2. Outlier Treatment and
08:53:15 SQL> -- 3. Normalization are performed below.
08:53:15 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
08:53:15 SQL> --    normalized here.
08:53:15 SQL> 
08:53:15 SQL> BEGIN
08:53:15   2  	-- Perform missing value treatment for all predictors
08:53:15   3  	-- create miss tables
08:53:15   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
08:53:15   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
08:53:15   6  
08:53:15   7  	-- populate miss tables
08:53:15   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
08:53:15   9  	  miss_table_name => 'svmc_miss_num',
08:53:15  10  	  data_table_name => '&bldtable',
08:53:15  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
08:53:15  12  
08:53:15  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
08:53:15  14  	  miss_table_name => 'svmc_miss_cat',
08:53:15  15  	  data_table_name => '&bldtable',
08:53:15  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
08:53:15  17  
08:53:15  18  	-- xform input data to replace missing values
08:53:15  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
08:53:15  20  	  miss_table_name => 'svmc_miss_num',
08:53:15  21  	  data_table_name => '&bldtable',
08:53:15  22  	  xform_view_name => 'xformed_build_miss_num');
08:53:15  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
08:53:15  24  	  miss_table_name => 'svmc_miss_cat',
08:53:15  25  	  data_table_name => '&bldtable',
08:53:15  26  	  xform_view_name => 'xformed_build_miss_cat');
08:53:15  27  
08:53:15  28  	-- Perform outlier treatment.
08:53:15  29  	-- create clip table
08:53:15  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
08:53:15  31  
08:53:15  32  	-- populate clip table
08:53:15  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
08:53:15  34  	  clip_table_name => 'svmc_clip',
08:53:15  35  	  data_table_name => '&bldtable',
08:53:15  36  	  tail_frac	  => 0.025,
08:53:15  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
08:53:15  38  
08:53:15  39  	-- xform input data to winsorized data
08:53:15  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
08:53:15  41  	  clip_table_name => 'svmc_clip',
08:53:15  42  	  data_table_name => '&bldtable',
08:53:15  43  	  xform_view_name => 'svmc_winsor');
08:53:15  44  
08:53:15  45  	-- create normalization table
08:53:15  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
08:53:15  47  
08:53:15  48  	-- populate normalization table based on winsorized data
08:53:15  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
08:53:15  50  	  norm_table_name => 'svmc_norm',
08:53:15  51  	  data_table_name => 'svmc_winsor',
08:53:15  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
08:53:15  53  
08:53:15  54  	-- normalize the original data
08:53:15  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
08:53:15  56  	  norm_table_name => 'svmc_norm',
08:53:15  57  	  data_table_name => '&bldtable',
08:53:15  58  	  xform_view_name => 'svmc_build_prep');
08:53:15  59  END;
08:53:15  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:18.87
08:53:33 SQL> 
08:53:33 SQL> ---------------------
08:53:33 SQL> -- CREATE A NEW MODEL
08:53:33 SQL> --
08:53:33 SQL> -- Cleanup old model with the same name for repeat runs
08:53:33 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
08:53:33   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:53:33   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex15');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.00
08:53:34 SQL> 
08:53:34 SQL> -- Build a new SVM Model
08:53:34 SQL> BEGIN
08:53:34   2  	DBMS_DATA_MINING.CREATE_MODEL(
08:53:34   3  	  model_name	      => '&model_name',
08:53:34   4  	  mining_function     => dbms_data_mining.classification,
08:53:34   5  	  data_table_name     => 'svmc_build_prep',
08:53:34   6  	  case_id_column_name => '&case_id',
08:53:34   7  	  target_column_name  => '&target',
08:53:34   8  	  settings_table_name => 'svmc_settings');
08:53:34   9  END;
08:53:34  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex15',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:36.34
08:54:11 SQL> 
08:54:11 SQL> -----------------------------------------------------------------------
08:54:11 SQL> --			       APPLY/score THE MODEL
08:54:11 SQL> -----------------------------------------------------------------------
08:54:11 SQL> 
08:54:11 SQL> -- Cleanup old scoring data preparation objects for repeat runs
08:54:11 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
08:54:11   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:54:11   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
08:54:11 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
08:54:11   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:54:11   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
08:54:11 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
08:54:11   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:54:11   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
08:54:11 SQL> -----------------------
08:54:11 SQL> -- PREPARE SCORING DATA
08:54:11 SQL> --
08:54:11 SQL> -- If the data for model creation has been prepared, then the data
08:54:11 SQL> -- to be scored using the model must be prepared in the same manner
08:54:11 SQL> -- in order to obtain meaningful results.
08:54:11 SQL> --
08:54:11 SQL> -- 1. Missing Value treatment for all Predictors and
08:54:11 SQL> -- 2. Normalization
08:54:11 SQL> -- No outlier treatment will be performed during test and apply. The
08:54:11 SQL> -- normalization step is sufficient, since the normalization parameters
08:54:11 SQL> -- already capture the effects of outlier treatment done with build data.
08:54:11 SQL> --
08:54:11 SQL> BEGIN
08:54:11   2  	-- Xform Test data to replace missing values
08:54:11   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
08:54:11   4  	  miss_table_name => 'svmc_miss_num',
08:54:11   5  	  data_table_name => '&scoretable',
08:54:11   6  	  xform_view_name => 'xformed_apply_miss_num');
08:54:11   7  
08:54:11   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
08:54:11   9  	  miss_table_name => 'svmc_miss_cat',
08:54:11  10  	  data_table_name => '&scoretable',
08:54:11  11  	  xform_view_name => 'xformed_apply_miss_cat');
08:54:11  12  
08:54:11  13  	-- Normalize the data to be scored
08:54:11  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
08:54:11  15  	  norm_table_name => 'svmc_norm',
08:54:11  16  	  data_table_name => '&scoretable',
08:54:11  17  	  xform_view_name => 'svmc_apply_prep');
08:54:11  18  END;
08:54:11  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.28
08:54:12 SQL> 
08:54:12 SQL> -- Use same model_name used in score_gattn.sql
08:54:12 SQL> DEFINE model_name = 'forex15'
08:54:12 SQL> 
08:54:12 SQL> DELETE fxscores6_gattn WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.04
08:54:12 SQL> 
08:54:12 SQL> INSERT INTO fxscores6_gattn (prdate,score,rundate,pair,ydate)
08:54:12   2  SELECT
08:54:12   3  prdate
08:54:12   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
08:54:12   5  ,sysdate
08:54:12   6  ,SUBSTR(prdate,1,3)pair
08:54:12   7  ,SUBSTR(prdate,4,19)ydate
08:54:12   8  FROM svmc_apply_prep
08:54:12   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex15,'up' USING *)score

1 row created.

Elapsed: 00:00:00.20
08:54:13 SQL> @aud_score1day_gattn.sql	2011-01-07 08:30:00
08:54:13 SQL> --
08:54:13 SQL> -- aud_score1day_gattn.sql
08:54:13 SQL> --
08:54:13 SQL> 
08:54:13 SQL> CREATE OR REPLACE VIEW sme AS
08:54:13   2  SELECT
08:54:13   3  'aud'||m.ydate prdate
08:54:13   4  ,NULL gattn
08:54:13   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
08:54:13   6  ,eur_g00
08:54:13   7  ,eur_g01
08:54:13   8  ,eur_g02
08:54:13   9  ,eur_g03
08:54:13  10  ,eur_g04
08:54:13  11  ,eur_g05
08:54:13  12  ,eur_g06
08:54:13  13  ,eur_g07
08:54:13  14  ,eur_g08
08:54:13  15  ,eur_g09
08:54:13  16  ,eur_g10
08:54:13  17  ,eur_g11
08:54:13  18  ,eur_g12
08:54:13  19  ,eur_g13
08:54:13  20  ,eur_g14
08:54:13  21  ,eur_g15
08:54:13  22  ,eur_g16
08:54:13  23  ,eur_g17
08:54:13  24  ,eur_g18
08:54:13  25  ,eur_g19
08:54:13  26  ,eur_g20
08:54:13  27  ,eur_g21
08:54:13  28  ,eur_g22
08:54:13  29  ,eur_g23
08:54:13  30  ,eur_g24
08:54:13  31  ,eur_g25
08:54:13  32  ,eur_g26
08:54:13  33  ,eur_g27
08:54:13  34  ,eur_g28
08:54:13  35  ,eur_g29
08:54:13  36  ,eur_g30
08:54:13  37  ,eur_g31
08:54:13  38  ,eur_g32
08:54:13  39  ,eur_g33
08:54:13  40  ,eur_g34
08:54:13  41  ,eur_g35
08:54:13  42  ,eur_g36
08:54:13  43  ,eur_g37
08:54:13  44  ,eur_g38
08:54:13  45  ,eur_g39
08:54:13  46  ,eur_g40
08:54:13  47  ,eur_g41
08:54:13  48  ,aud_g00
08:54:13  49  ,aud_g01
08:54:13  50  ,aud_g02
08:54:13  51  ,aud_g03
08:54:13  52  ,aud_g04
08:54:13  53  ,aud_g05
08:54:13  54  ,aud_g06
08:54:13  55  ,aud_g07
08:54:13  56  ,aud_g08
08:54:13  57  ,aud_g09
08:54:13  58  ,aud_g10
08:54:13  59  ,aud_g11
08:54:13  60  ,aud_g12
08:54:13  61  ,aud_g13
08:54:13  62  ,aud_g14
08:54:13  63  ,aud_g15
08:54:13  64  ,aud_g16
08:54:13  65  ,aud_g17
08:54:13  66  ,aud_g18
08:54:13  67  ,aud_g19
08:54:13  68  ,aud_g20
08:54:13  69  ,aud_g21
08:54:13  70  ,aud_g22
08:54:13  71  ,aud_g23
08:54:13  72  ,aud_g24
08:54:13  73  ,aud_g25
08:54:13  74  ,aud_g26
08:54:13  75  ,aud_g27
08:54:13  76  ,aud_g28
08:54:13  77  ,aud_g29
08:54:13  78  ,aud_g30
08:54:13  79  ,aud_g31
08:54:13  80  ,aud_g32
08:54:13  81  ,aud_g33
08:54:13  82  ,aud_g34
08:54:13  83  ,aud_g35
08:54:13  84  ,aud_g36
08:54:13  85  ,aud_g37
08:54:13  86  ,aud_g38
08:54:13  87  ,aud_g39
08:54:13  88  ,aud_g40
08:54:13  89  ,aud_g41
08:54:13  90  ,gbp_g00
08:54:13  91  ,gbp_g01
08:54:13  92  ,gbp_g02
08:54:13  93  ,gbp_g03
08:54:13  94  ,gbp_g04
08:54:13  95  ,gbp_g05
08:54:13  96  ,gbp_g06
08:54:13  97  ,gbp_g07
08:54:13  98  ,gbp_g08
08:54:13  99  ,gbp_g09
08:54:13 100  ,gbp_g10
08:54:13 101  ,gbp_g11
08:54:13 102  ,gbp_g12
08:54:13 103  ,gbp_g13
08:54:13 104  ,gbp_g14
08:54:13 105  ,gbp_g15
08:54:13 106  ,gbp_g16
08:54:13 107  ,gbp_g17
08:54:13 108  ,gbp_g18
08:54:13 109  ,gbp_g19
08:54:13 110  ,gbp_g20
08:54:13 111  ,gbp_g21
08:54:13 112  ,gbp_g22
08:54:13 113  ,gbp_g23
08:54:13 114  ,gbp_g24
08:54:13 115  ,gbp_g25
08:54:13 116  ,gbp_g26
08:54:13 117  ,gbp_g27
08:54:13 118  ,gbp_g28
08:54:13 119  ,gbp_g29
08:54:13 120  ,gbp_g30
08:54:13 121  ,gbp_g31
08:54:13 122  ,gbp_g32
08:54:13 123  ,gbp_g33
08:54:13 124  ,gbp_g34
08:54:13 125  ,gbp_g35
08:54:13 126  ,gbp_g36
08:54:13 127  ,gbp_g37
08:54:13 128  ,gbp_g38
08:54:13 129  ,gbp_g39
08:54:13 130  ,gbp_g40
08:54:13 131  ,gbp_g41
08:54:13 132  ,jpy_g00
08:54:13 133  ,jpy_g01
08:54:13 134  ,jpy_g02
08:54:13 135  ,jpy_g03
08:54:13 136  ,jpy_g04
08:54:13 137  ,jpy_g05
08:54:13 138  ,jpy_g06
08:54:13 139  ,jpy_g07
08:54:13 140  ,jpy_g08
08:54:13 141  ,jpy_g09
08:54:13 142  ,jpy_g10
08:54:13 143  ,jpy_g11
08:54:13 144  ,jpy_g12
08:54:13 145  ,jpy_g13
08:54:13 146  ,jpy_g14
08:54:13 147  ,jpy_g15
08:54:13 148  ,jpy_g16
08:54:13 149  ,jpy_g17
08:54:13 150  ,jpy_g18
08:54:13 151  ,jpy_g19
08:54:13 152  ,jpy_g20
08:54:13 153  ,jpy_g21
08:54:13 154  ,jpy_g22
08:54:13 155  ,jpy_g23
08:54:13 156  ,jpy_g24
08:54:13 157  ,jpy_g25
08:54:13 158  ,jpy_g26
08:54:13 159  ,jpy_g27
08:54:13 160  ,jpy_g28
08:54:13 161  ,jpy_g29
08:54:13 162  ,jpy_g30
08:54:13 163  ,jpy_g31
08:54:13 164  ,jpy_g32
08:54:13 165  ,jpy_g33
08:54:13 166  ,jpy_g34
08:54:13 167  ,jpy_g35
08:54:13 168  ,jpy_g36
08:54:13 169  ,jpy_g37
08:54:13 170  ,jpy_g38
08:54:13 171  ,jpy_g39
08:54:13 172  ,jpy_g40
08:54:13 173  ,jpy_g41
08:54:13 174  ,cad_g00
08:54:13 175  ,cad_g01
08:54:13 176  ,cad_g02
08:54:13 177  ,cad_g03
08:54:13 178  ,cad_g04
08:54:13 179  ,cad_g05
08:54:13 180  ,cad_g06
08:54:13 181  ,cad_g07
08:54:13 182  ,cad_g08
08:54:13 183  ,cad_g09
08:54:13 184  ,cad_g10
08:54:13 185  ,cad_g11
08:54:13 186  ,cad_g12
08:54:13 187  ,cad_g13
08:54:13 188  ,cad_g14
08:54:13 189  ,cad_g15
08:54:13 190  ,cad_g16
08:54:13 191  ,cad_g17
08:54:13 192  ,cad_g18
08:54:13 193  ,cad_g19
08:54:13 194  ,cad_g20
08:54:13 195  ,cad_g21
08:54:13 196  ,cad_g22
08:54:13 197  ,cad_g23
08:54:13 198  ,cad_g24
08:54:13 199  ,cad_g25
08:54:13 200  ,cad_g26
08:54:13 201  ,cad_g27
08:54:13 202  ,cad_g28
08:54:13 203  ,cad_g29
08:54:13 204  ,cad_g30
08:54:13 205  ,cad_g31
08:54:13 206  ,cad_g32
08:54:13 207  ,cad_g33
08:54:13 208  ,cad_g34
08:54:13 209  ,cad_g35
08:54:13 210  ,cad_g36
08:54:13 211  ,cad_g37
08:54:13 212  ,cad_g38
08:54:13 213  ,cad_g39
08:54:13 214  ,cad_g40
08:54:13 215  ,cad_g41
08:54:13 216  ,chf_g00
08:54:13 217  ,chf_g01
08:54:13 218  ,chf_g02
08:54:13 219  ,chf_g03
08:54:13 220  ,chf_g04
08:54:13 221  ,chf_g05
08:54:13 222  ,chf_g06
08:54:13 223  ,chf_g07
08:54:13 224  ,chf_g08
08:54:13 225  ,chf_g09
08:54:13 226  ,chf_g10
08:54:13 227  ,chf_g11
08:54:13 228  ,chf_g12
08:54:13 229  ,chf_g13
08:54:13 230  ,chf_g14
08:54:13 231  ,chf_g15
08:54:13 232  ,chf_g16
08:54:13 233  ,chf_g17
08:54:13 234  ,chf_g18
08:54:13 235  ,chf_g19
08:54:13 236  ,chf_g20
08:54:13 237  ,chf_g21
08:54:13 238  ,chf_g22
08:54:13 239  ,chf_g23
08:54:13 240  ,chf_g24
08:54:13 241  ,chf_g25
08:54:13 242  ,chf_g26
08:54:13 243  ,chf_g27
08:54:13 244  ,chf_g28
08:54:13 245  ,chf_g29
08:54:13 246  ,chf_g30
08:54:13 247  ,chf_g31
08:54:13 248  ,chf_g32
08:54:13 249  ,chf_g33
08:54:13 250  ,chf_g34
08:54:13 251  ,chf_g35
08:54:13 252  ,chf_g36
08:54:13 253  ,chf_g37
08:54:13 254  ,chf_g38
08:54:13 255  ,chf_g39
08:54:13 256  ,chf_g40
08:54:13 257  ,chf_g41
08:54:13 258  FROM aud_ms6 m
08:54:13 259  WHERE m.ydate = '&1'||' '||'&2'
08:54:13 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2011-01-07'||' '||'08:30:00'

View created.

Elapsed: 00:00:00.14
08:54:13 SQL> 
08:54:13 SQL> -- rpt
08:54:13 SQL> -- We should see just 1 row:
08:54:13 SQL> 
08:54:13 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
08:54:13 SQL> 
08:54:13 SQL> -- Build the model:
08:54:13 SQL> CREATE OR REPLACE VIEW bme AS
08:54:13   2  SELECT
08:54:13   3  'aud'||m.ydate prdate
08:54:13   4  ,gattn
08:54:13   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
08:54:13   6  ,eur_g00
08:54:13   7  ,eur_g01
08:54:13   8  ,eur_g02
08:54:13   9  ,eur_g03
08:54:13  10  ,eur_g04
08:54:13  11  ,eur_g05
08:54:13  12  ,eur_g06
08:54:13  13  ,eur_g07
08:54:13  14  ,eur_g08
08:54:13  15  ,eur_g09
08:54:13  16  ,eur_g10
08:54:13  17  ,eur_g11
08:54:13  18  ,eur_g12
08:54:13  19  ,eur_g13
08:54:13  20  ,eur_g14
08:54:13  21  ,eur_g15
08:54:13  22  ,eur_g16
08:54:13  23  ,eur_g17
08:54:13  24  ,eur_g18
08:54:13  25  ,eur_g19
08:54:13  26  ,eur_g20
08:54:13  27  ,eur_g21
08:54:13  28  ,eur_g22
08:54:13  29  ,eur_g23
08:54:13  30  ,eur_g24
08:54:13  31  ,eur_g25
08:54:13  32  ,eur_g26
08:54:13  33  ,eur_g27
08:54:13  34  ,eur_g28
08:54:13  35  ,eur_g29
08:54:13  36  ,eur_g30
08:54:13  37  ,eur_g31
08:54:13  38  ,eur_g32
08:54:13  39  ,eur_g33
08:54:13  40  ,eur_g34
08:54:13  41  ,eur_g35
08:54:13  42  ,eur_g36
08:54:13  43  ,eur_g37
08:54:13  44  ,eur_g38
08:54:13  45  ,eur_g39
08:54:13  46  ,eur_g40
08:54:13  47  ,eur_g41
08:54:13  48  ,aud_g00
08:54:13  49  ,aud_g01
08:54:13  50  ,aud_g02
08:54:13  51  ,aud_g03
08:54:13  52  ,aud_g04
08:54:13  53  ,aud_g05
08:54:13  54  ,aud_g06
08:54:13  55  ,aud_g07
08:54:13  56  ,aud_g08
08:54:13  57  ,aud_g09
08:54:13  58  ,aud_g10
08:54:13  59  ,aud_g11
08:54:13  60  ,aud_g12
08:54:13  61  ,aud_g13
08:54:13  62  ,aud_g14
08:54:13  63  ,aud_g15
08:54:13  64  ,aud_g16
08:54:13  65  ,aud_g17
08:54:13  66  ,aud_g18
08:54:13  67  ,aud_g19
08:54:13  68  ,aud_g20
08:54:13  69  ,aud_g21
08:54:13  70  ,aud_g22
08:54:13  71  ,aud_g23
08:54:13  72  ,aud_g24
08:54:13  73  ,aud_g25
08:54:13  74  ,aud_g26
08:54:13  75  ,aud_g27
08:54:13  76  ,aud_g28
08:54:13  77  ,aud_g29
08:54:13  78  ,aud_g30
08:54:13  79  ,aud_g31
08:54:13  80  ,aud_g32
08:54:13  81  ,aud_g33
08:54:13  82  ,aud_g34
08:54:13  83  ,aud_g35
08:54:13  84  ,aud_g36
08:54:13  85  ,aud_g37
08:54:13  86  ,aud_g38
08:54:13  87  ,aud_g39
08:54:13  88  ,aud_g40
08:54:13  89  ,aud_g41
08:54:13  90  ,gbp_g00
08:54:13  91  ,gbp_g01
08:54:13  92  ,gbp_g02
08:54:13  93  ,gbp_g03
08:54:13  94  ,gbp_g04
08:54:13  95  ,gbp_g05
08:54:13  96  ,gbp_g06
08:54:13  97  ,gbp_g07
08:54:13  98  ,gbp_g08
08:54:13  99  ,gbp_g09
08:54:13 100  ,gbp_g10
08:54:13 101  ,gbp_g11
08:54:13 102  ,gbp_g12
08:54:13 103  ,gbp_g13
08:54:13 104  ,gbp_g14
08:54:13 105  ,gbp_g15
08:54:13 106  ,gbp_g16
08:54:13 107  ,gbp_g17
08:54:13 108  ,gbp_g18
08:54:13 109  ,gbp_g19
08:54:13 110  ,gbp_g20
08:54:13 111  ,gbp_g21
08:54:13 112  ,gbp_g22
08:54:13 113  ,gbp_g23
08:54:13 114  ,gbp_g24
08:54:13 115  ,gbp_g25
08:54:13 116  ,gbp_g26
08:54:13 117  ,gbp_g27
08:54:13 118  ,gbp_g28
08:54:13 119  ,gbp_g29
08:54:13 120  ,gbp_g30
08:54:13 121  ,gbp_g31
08:54:13 122  ,gbp_g32
08:54:13 123  ,gbp_g33
08:54:13 124  ,gbp_g34
08:54:13 125  ,gbp_g35
08:54:13 126  ,gbp_g36
08:54:13 127  ,gbp_g37
08:54:13 128  ,gbp_g38
08:54:13 129  ,gbp_g39
08:54:13 130  ,gbp_g40
08:54:13 131  ,gbp_g41
08:54:13 132  ,jpy_g00
08:54:13 133  ,jpy_g01
08:54:13 134  ,jpy_g02
08:54:13 135  ,jpy_g03
08:54:13 136  ,jpy_g04
08:54:13 137  ,jpy_g05
08:54:13 138  ,jpy_g06
08:54:13 139  ,jpy_g07
08:54:13 140  ,jpy_g08
08:54:13 141  ,jpy_g09
08:54:13 142  ,jpy_g10
08:54:13 143  ,jpy_g11
08:54:13 144  ,jpy_g12
08:54:13 145  ,jpy_g13
08:54:13 146  ,jpy_g14
08:54:13 147  ,jpy_g15
08:54:13 148  ,jpy_g16
08:54:13 149  ,jpy_g17
08:54:13 150  ,jpy_g18
08:54:13 151  ,jpy_g19
08:54:13 152  ,jpy_g20
08:54:13 153  ,jpy_g21
08:54:13 154  ,jpy_g22
08:54:13 155  ,jpy_g23
08:54:13 156  ,jpy_g24
08:54:13 157  ,jpy_g25
08:54:13 158  ,jpy_g26
08:54:13 159  ,jpy_g27
08:54:13 160  ,jpy_g28
08:54:13 161  ,jpy_g29
08:54:13 162  ,jpy_g30
08:54:13 163  ,jpy_g31
08:54:13 164  ,jpy_g32
08:54:13 165  ,jpy_g33
08:54:13 166  ,jpy_g34
08:54:13 167  ,jpy_g35
08:54:13 168  ,jpy_g36
08:54:13 169  ,jpy_g37
08:54:13 170  ,jpy_g38
08:54:13 171  ,jpy_g39
08:54:13 172  ,jpy_g40
08:54:13 173  ,jpy_g41
08:54:13 174  ,cad_g00
08:54:13 175  ,cad_g01
08:54:13 176  ,cad_g02
08:54:13 177  ,cad_g03
08:54:13 178  ,cad_g04
08:54:13 179  ,cad_g05
08:54:13 180  ,cad_g06
08:54:13 181  ,cad_g07
08:54:13 182  ,cad_g08
08:54:13 183  ,cad_g09
08:54:13 184  ,cad_g10
08:54:13 185  ,cad_g11
08:54:13 186  ,cad_g12
08:54:13 187  ,cad_g13
08:54:13 188  ,cad_g14
08:54:13 189  ,cad_g15
08:54:13 190  ,cad_g16
08:54:13 191  ,cad_g17
08:54:13 192  ,cad_g18
08:54:13 193  ,cad_g19
08:54:13 194  ,cad_g20
08:54:13 195  ,cad_g21
08:54:13 196  ,cad_g22
08:54:13 197  ,cad_g23
08:54:13 198  ,cad_g24
08:54:13 199  ,cad_g25
08:54:13 200  ,cad_g26
08:54:13 201  ,cad_g27
08:54:13 202  ,cad_g28
08:54:13 203  ,cad_g29
08:54:13 204  ,cad_g30
08:54:13 205  ,cad_g31
08:54:13 206  ,cad_g32
08:54:13 207  ,cad_g33
08:54:13 208  ,cad_g34
08:54:13 209  ,cad_g35
08:54:13 210  ,cad_g36
08:54:13 211  ,cad_g37
08:54:13 212  ,cad_g38
08:54:13 213  ,cad_g39
08:54:13 214  ,cad_g40
08:54:13 215  ,cad_g41
08:54:13 216  ,chf_g00
08:54:13 217  ,chf_g01
08:54:13 218  ,chf_g02
08:54:13 219  ,chf_g03
08:54:13 220  ,chf_g04
08:54:13 221  ,chf_g05
08:54:13 222  ,chf_g06
08:54:13 223  ,chf_g07
08:54:13 224  ,chf_g08
08:54:13 225  ,chf_g09
08:54:13 226  ,chf_g10
08:54:13 227  ,chf_g11
08:54:13 228  ,chf_g12
08:54:13 229  ,chf_g13
08:54:13 230  ,chf_g14
08:54:13 231  ,chf_g15
08:54:13 232  ,chf_g16
08:54:13 233  ,chf_g17
08:54:13 234  ,chf_g18
08:54:13 235  ,chf_g19
08:54:13 236  ,chf_g20
08:54:13 237  ,chf_g21
08:54:13 238  ,chf_g22
08:54:13 239  ,chf_g23
08:54:13 240  ,chf_g24
08:54:13 241  ,chf_g25
08:54:13 242  ,chf_g26
08:54:13 243  ,chf_g27
08:54:13 244  ,chf_g28
08:54:13 245  ,chf_g29
08:54:13 246  ,chf_g30
08:54:13 247  ,chf_g31
08:54:13 248  ,chf_g32
08:54:13 249  ,chf_g33
08:54:13 250  ,chf_g34
08:54:13 251  ,chf_g35
08:54:13 252  ,chf_g36
08:54:13 253  ,chf_g37
08:54:13 254  ,chf_g38
08:54:13 255  ,chf_g39
08:54:13 256  ,chf_g40
08:54:13 257  ,chf_g41
08:54:13 258  FROM aud_ms6 m
08:54:13 259  WHERE gattn IN('nup','up')
08:54:13 260  AND 1+m.ydate < '&1'||' '||'&2'
08:54:13 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2011-01-07'||' '||'08:30:00'

View created.

Elapsed: 00:00:00.15
08:54:13 SQL> 
08:54:13 SQL> -- rpt
08:54:13 SQL> 
08:54:13 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	    12901
up	     6608

Elapsed: 00:00:00.05
08:54:13 SQL> 
08:54:13 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
aud2011-01-06 08:25:00

Elapsed: 00:00:00.03
08:54:13 SQL> 
08:54:13 SQL> -- Now build model from bme and score sme
08:54:13 SQL> @score1gattn.sql
08:54:13 SQL> -- score1gattn.sql
08:54:13 SQL> 
08:54:13 SQL> -- Does the 1st SVM score
08:54:13 SQL> 
08:54:13 SQL> -- Fill up svmc_apply_prep
08:54:13 SQL> @score_gattn.sql
08:54:13 SQL> --
08:54:13 SQL> -- score_gattn.sql
08:54:13 SQL> --
08:54:13 SQL> 
08:54:13 SQL> -- usage: score_gattn.sql
08:54:13 SQL> 
08:54:13 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
08:54:13 SQL> 
08:54:13 SQL> DEFINE target	= 'gattn'
08:54:13 SQL> DEFINE model_name = 'forex15'
08:54:13 SQL> DEFINE bldtable	= 'bme'
08:54:13 SQL> DEFINE scoretable = 'sme'
08:54:13 SQL> DEFINE case_id	= 'prdate'
08:54:13 SQL> 
08:54:13 SQL> -- Define a variable to help me exclude some columns from some data mining calls
08:54:13 SQL> DEFINE exclude1 = "'&target','&case_id'"
08:54:13 SQL> 
08:54:13 SQL> -- Builds an SVM model using pl/sql.
08:54:13 SQL> 
08:54:13 SQL> -----------------------------------------------------------------------
08:54:13 SQL> --			    BUILD THE MODEL
08:54:13 SQL> -----------------------------------------------------------------------
08:54:13 SQL> 
08:54:13 SQL> -- Cleanup old build data preparation objects for repeat runs
08:54:13 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.00
08:54:13 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
08:54:13 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.00
08:54:13 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.01
08:54:13 SQL> 
08:54:13 SQL> 
08:54:13 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
08:54:13 SQL> --
08:54:13 SQL> -- DROP	TABLE svmc_settings ;
08:54:13 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
08:54:13 SQL> -- DELETE svmc_settings;
08:54:13 SQL> 
08:54:13 SQL> -- The default classification algorithm is Naive Bayes. So override
08:54:13 SQL> -- this choice to SVM using a settings table.
08:54:13 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
08:54:13 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
08:54:13 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
08:54:13 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
08:54:13 SQL> -- models.
08:54:13 SQL> --
08:54:13 SQL> 
08:54:13 SQL> -- Do this once and then comment it out.
08:54:13 SQL> -- That makes script go faster.
08:54:13 SQL> -- BEGIN
08:54:13 SQL> -- -- Populate settings table
08:54:13 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
08:54:13 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
08:54:13 SQL> --
08:54:13 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
08:54:13 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
08:54:13 SQL> --
08:54:13 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
08:54:13 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
08:54:13 SQL> --   COMMIT;
08:54:13 SQL> -- END;
08:54:13 SQL> -- /
08:54:13 SQL> 
08:54:13 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
08:54:13 SQL> 
08:54:13 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
08:54:13   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:54:13   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
08:54:13 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
08:54:13   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:54:13   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
08:54:13 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
08:54:13   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:54:13   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
08:54:13 SQL> 
08:54:13 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
08:54:13   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:54:13   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
08:54:13 SQL> 
08:54:13 SQL> --------------------------------
08:54:13 SQL> -- PREPARE BUILD (TRAINING) DATA
08:54:13 SQL> --
08:54:13 SQL> 
08:54:13 SQL> -- 1. Missing Value treatment for all Predictors and
08:54:13 SQL> -- 2. Outlier Treatment and
08:54:13 SQL> -- 3. Normalization are performed below.
08:54:13 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
08:54:13 SQL> --    normalized here.
08:54:13 SQL> 
08:54:13 SQL> BEGIN
08:54:13   2  	-- Perform missing value treatment for all predictors
08:54:13   3  	-- create miss tables
08:54:13   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
08:54:13   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
08:54:13   6  
08:54:13   7  	-- populate miss tables
08:54:13   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
08:54:13   9  	  miss_table_name => 'svmc_miss_num',
08:54:13  10  	  data_table_name => '&bldtable',
08:54:13  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
08:54:13  12  
08:54:13  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
08:54:13  14  	  miss_table_name => 'svmc_miss_cat',
08:54:13  15  	  data_table_name => '&bldtable',
08:54:13  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
08:54:13  17  
08:54:13  18  	-- xform input data to replace missing values
08:54:13  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
08:54:13  20  	  miss_table_name => 'svmc_miss_num',
08:54:13  21  	  data_table_name => '&bldtable',
08:54:13  22  	  xform_view_name => 'xformed_build_miss_num');
08:54:13  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
08:54:13  24  	  miss_table_name => 'svmc_miss_cat',
08:54:13  25  	  data_table_name => '&bldtable',
08:54:13  26  	  xform_view_name => 'xformed_build_miss_cat');
08:54:13  27  
08:54:13  28  	-- Perform outlier treatment.
08:54:13  29  	-- create clip table
08:54:13  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
08:54:13  31  
08:54:13  32  	-- populate clip table
08:54:13  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
08:54:13  34  	  clip_table_name => 'svmc_clip',
08:54:13  35  	  data_table_name => '&bldtable',
08:54:13  36  	  tail_frac	  => 0.025,
08:54:13  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
08:54:13  38  
08:54:13  39  	-- xform input data to winsorized data
08:54:13  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
08:54:13  41  	  clip_table_name => 'svmc_clip',
08:54:13  42  	  data_table_name => '&bldtable',
08:54:13  43  	  xform_view_name => 'svmc_winsor');
08:54:13  44  
08:54:13  45  	-- create normalization table
08:54:13  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
08:54:13  47  
08:54:13  48  	-- populate normalization table based on winsorized data
08:54:13  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
08:54:13  50  	  norm_table_name => 'svmc_norm',
08:54:13  51  	  data_table_name => 'svmc_winsor',
08:54:13  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
08:54:13  53  
08:54:13  54  	-- normalize the original data
08:54:13  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
08:54:13  56  	  norm_table_name => 'svmc_norm',
08:54:13  57  	  data_table_name => '&bldtable',
08:54:13  58  	  xform_view_name => 'svmc_build_prep');
08:54:13  59  END;
08:54:13  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:18.52
08:54:32 SQL> 
08:54:32 SQL> ---------------------
08:54:32 SQL> -- CREATE A NEW MODEL
08:54:32 SQL> --
08:54:32 SQL> -- Cleanup old model with the same name for repeat runs
08:54:32 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
08:54:32   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:54:32   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex15');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.08
08:54:33 SQL> 
08:54:33 SQL> -- Build a new SVM Model
08:54:33 SQL> BEGIN
08:54:33   2  	DBMS_DATA_MINING.CREATE_MODEL(
08:54:33   3  	  model_name	      => '&model_name',
08:54:33   4  	  mining_function     => dbms_data_mining.classification,
08:54:33   5  	  data_table_name     => 'svmc_build_prep',
08:54:33   6  	  case_id_column_name => '&case_id',
08:54:33   7  	  target_column_name  => '&target',
08:54:33   8  	  settings_table_name => 'svmc_settings');
08:54:33   9  END;
08:54:33  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex15',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:33.58
08:55:06 SQL> 
08:55:06 SQL> -----------------------------------------------------------------------
08:55:06 SQL> --			       APPLY/score THE MODEL
08:55:06 SQL> -----------------------------------------------------------------------
08:55:06 SQL> 
08:55:06 SQL> -- Cleanup old scoring data preparation objects for repeat runs
08:55:06 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
08:55:06   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:55:06   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
08:55:06 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
08:55:06   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:55:06   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
08:55:07 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
08:55:07   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:55:07   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
08:55:07 SQL> -----------------------
08:55:07 SQL> -- PREPARE SCORING DATA
08:55:07 SQL> --
08:55:07 SQL> -- If the data for model creation has been prepared, then the data
08:55:07 SQL> -- to be scored using the model must be prepared in the same manner
08:55:07 SQL> -- in order to obtain meaningful results.
08:55:07 SQL> --
08:55:07 SQL> -- 1. Missing Value treatment for all Predictors and
08:55:07 SQL> -- 2. Normalization
08:55:07 SQL> -- No outlier treatment will be performed during test and apply. The
08:55:07 SQL> -- normalization step is sufficient, since the normalization parameters
08:55:07 SQL> -- already capture the effects of outlier treatment done with build data.
08:55:07 SQL> --
08:55:07 SQL> BEGIN
08:55:07   2  	-- Xform Test data to replace missing values
08:55:07   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
08:55:07   4  	  miss_table_name => 'svmc_miss_num',
08:55:07   5  	  data_table_name => '&scoretable',
08:55:07   6  	  xform_view_name => 'xformed_apply_miss_num');
08:55:07   7  
08:55:07   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
08:55:07   9  	  miss_table_name => 'svmc_miss_cat',
08:55:07  10  	  data_table_name => '&scoretable',
08:55:07  11  	  xform_view_name => 'xformed_apply_miss_cat');
08:55:07  12  
08:55:07  13  	-- Normalize the data to be scored
08:55:07  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
08:55:07  15  	  norm_table_name => 'svmc_norm',
08:55:07  16  	  data_table_name => '&scoretable',
08:55:07  17  	  xform_view_name => 'svmc_apply_prep');
08:55:07  18  END;
08:55:07  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.16
08:55:08 SQL> 
08:55:08 SQL> -- Use same model_name used in score_gattn.sql
08:55:08 SQL> DEFINE model_name = 'forex15'
08:55:08 SQL> 
08:55:08 SQL> DELETE fxscores6_gattn WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.03
08:55:08 SQL> 
08:55:08 SQL> INSERT INTO fxscores6_gattn (prdate,score,rundate,pair,ydate)
08:55:08   2  SELECT
08:55:08   3  prdate
08:55:08   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
08:55:08   5  ,sysdate
08:55:08   6  ,SUBSTR(prdate,1,3)pair
08:55:08   7  ,SUBSTR(prdate,4,19)ydate
08:55:08   8  FROM svmc_apply_prep
08:55:08   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex15,'up' USING *)score

1 row created.

Elapsed: 00:00:00.16
08:55:08 SQL> @aud_score1day_gattn.sql	2011-01-07 08:35:00
08:55:08 SQL> --
08:55:08 SQL> -- aud_score1day_gattn.sql
08:55:08 SQL> --
08:55:08 SQL> 
08:55:08 SQL> CREATE OR REPLACE VIEW sme AS
08:55:08   2  SELECT
08:55:08   3  'aud'||m.ydate prdate
08:55:08   4  ,NULL gattn
08:55:08   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
08:55:08   6  ,eur_g00
08:55:08   7  ,eur_g01
08:55:08   8  ,eur_g02
08:55:08   9  ,eur_g03
08:55:08  10  ,eur_g04
08:55:08  11  ,eur_g05
08:55:08  12  ,eur_g06
08:55:08  13  ,eur_g07
08:55:08  14  ,eur_g08
08:55:08  15  ,eur_g09
08:55:08  16  ,eur_g10
08:55:08  17  ,eur_g11
08:55:08  18  ,eur_g12
08:55:08  19  ,eur_g13
08:55:08  20  ,eur_g14
08:55:08  21  ,eur_g15
08:55:08  22  ,eur_g16
08:55:08  23  ,eur_g17
08:55:08  24  ,eur_g18
08:55:08  25  ,eur_g19
08:55:08  26  ,eur_g20
08:55:08  27  ,eur_g21
08:55:08  28  ,eur_g22
08:55:08  29  ,eur_g23
08:55:08  30  ,eur_g24
08:55:08  31  ,eur_g25
08:55:08  32  ,eur_g26
08:55:08  33  ,eur_g27
08:55:08  34  ,eur_g28
08:55:08  35  ,eur_g29
08:55:08  36  ,eur_g30
08:55:08  37  ,eur_g31
08:55:08  38  ,eur_g32
08:55:08  39  ,eur_g33
08:55:08  40  ,eur_g34
08:55:08  41  ,eur_g35
08:55:08  42  ,eur_g36
08:55:08  43  ,eur_g37
08:55:08  44  ,eur_g38
08:55:08  45  ,eur_g39
08:55:08  46  ,eur_g40
08:55:08  47  ,eur_g41
08:55:08  48  ,aud_g00
08:55:08  49  ,aud_g01
08:55:08  50  ,aud_g02
08:55:08  51  ,aud_g03
08:55:08  52  ,aud_g04
08:55:08  53  ,aud_g05
08:55:08  54  ,aud_g06
08:55:08  55  ,aud_g07
08:55:08  56  ,aud_g08
08:55:08  57  ,aud_g09
08:55:08  58  ,aud_g10
08:55:08  59  ,aud_g11
08:55:08  60  ,aud_g12
08:55:08  61  ,aud_g13
08:55:08  62  ,aud_g14
08:55:08  63  ,aud_g15
08:55:08  64  ,aud_g16
08:55:08  65  ,aud_g17
08:55:08  66  ,aud_g18
08:55:08  67  ,aud_g19
08:55:08  68  ,aud_g20
08:55:08  69  ,aud_g21
08:55:08  70  ,aud_g22
08:55:08  71  ,aud_g23
08:55:08  72  ,aud_g24
08:55:08  73  ,aud_g25
08:55:08  74  ,aud_g26
08:55:08  75  ,aud_g27
08:55:08  76  ,aud_g28
08:55:08  77  ,aud_g29
08:55:08  78  ,aud_g30
08:55:08  79  ,aud_g31
08:55:08  80  ,aud_g32
08:55:08  81  ,aud_g33
08:55:08  82  ,aud_g34
08:55:08  83  ,aud_g35
08:55:08  84  ,aud_g36
08:55:08  85  ,aud_g37
08:55:08  86  ,aud_g38
08:55:08  87  ,aud_g39
08:55:08  88  ,aud_g40
08:55:08  89  ,aud_g41
08:55:08  90  ,gbp_g00
08:55:08  91  ,gbp_g01
08:55:08  92  ,gbp_g02
08:55:08  93  ,gbp_g03
08:55:08  94  ,gbp_g04
08:55:08  95  ,gbp_g05
08:55:08  96  ,gbp_g06
08:55:08  97  ,gbp_g07
08:55:08  98  ,gbp_g08
08:55:08  99  ,gbp_g09
08:55:08 100  ,gbp_g10
08:55:08 101  ,gbp_g11
08:55:08 102  ,gbp_g12
08:55:08 103  ,gbp_g13
08:55:08 104  ,gbp_g14
08:55:08 105  ,gbp_g15
08:55:08 106  ,gbp_g16
08:55:08 107  ,gbp_g17
08:55:08 108  ,gbp_g18
08:55:08 109  ,gbp_g19
08:55:08 110  ,gbp_g20
08:55:08 111  ,gbp_g21
08:55:08 112  ,gbp_g22
08:55:08 113  ,gbp_g23
08:55:08 114  ,gbp_g24
08:55:08 115  ,gbp_g25
08:55:08 116  ,gbp_g26
08:55:08 117  ,gbp_g27
08:55:08 118  ,gbp_g28
08:55:08 119  ,gbp_g29
08:55:08 120  ,gbp_g30
08:55:08 121  ,gbp_g31
08:55:08 122  ,gbp_g32
08:55:08 123  ,gbp_g33
08:55:08 124  ,gbp_g34
08:55:08 125  ,gbp_g35
08:55:08 126  ,gbp_g36
08:55:08 127  ,gbp_g37
08:55:08 128  ,gbp_g38
08:55:08 129  ,gbp_g39
08:55:08 130  ,gbp_g40
08:55:08 131  ,gbp_g41
08:55:08 132  ,jpy_g00
08:55:08 133  ,jpy_g01
08:55:08 134  ,jpy_g02
08:55:08 135  ,jpy_g03
08:55:08 136  ,jpy_g04
08:55:08 137  ,jpy_g05
08:55:08 138  ,jpy_g06
08:55:08 139  ,jpy_g07
08:55:08 140  ,jpy_g08
08:55:08 141  ,jpy_g09
08:55:08 142  ,jpy_g10
08:55:08 143  ,jpy_g11
08:55:08 144  ,jpy_g12
08:55:08 145  ,jpy_g13
08:55:08 146  ,jpy_g14
08:55:08 147  ,jpy_g15
08:55:08 148  ,jpy_g16
08:55:08 149  ,jpy_g17
08:55:08 150  ,jpy_g18
08:55:08 151  ,jpy_g19
08:55:08 152  ,jpy_g20
08:55:08 153  ,jpy_g21
08:55:08 154  ,jpy_g22
08:55:08 155  ,jpy_g23
08:55:08 156  ,jpy_g24
08:55:08 157  ,jpy_g25
08:55:08 158  ,jpy_g26
08:55:08 159  ,jpy_g27
08:55:08 160  ,jpy_g28
08:55:08 161  ,jpy_g29
08:55:08 162  ,jpy_g30
08:55:08 163  ,jpy_g31
08:55:08 164  ,jpy_g32
08:55:08 165  ,jpy_g33
08:55:08 166  ,jpy_g34
08:55:08 167  ,jpy_g35
08:55:08 168  ,jpy_g36
08:55:08 169  ,jpy_g37
08:55:08 170  ,jpy_g38
08:55:08 171  ,jpy_g39
08:55:08 172  ,jpy_g40
08:55:08 173  ,jpy_g41
08:55:08 174  ,cad_g00
08:55:08 175  ,cad_g01
08:55:08 176  ,cad_g02
08:55:08 177  ,cad_g03
08:55:08 178  ,cad_g04
08:55:08 179  ,cad_g05
08:55:08 180  ,cad_g06
08:55:08 181  ,cad_g07
08:55:08 182  ,cad_g08
08:55:08 183  ,cad_g09
08:55:08 184  ,cad_g10
08:55:08 185  ,cad_g11
08:55:08 186  ,cad_g12
08:55:08 187  ,cad_g13
08:55:08 188  ,cad_g14
08:55:08 189  ,cad_g15
08:55:08 190  ,cad_g16
08:55:08 191  ,cad_g17
08:55:08 192  ,cad_g18
08:55:08 193  ,cad_g19
08:55:08 194  ,cad_g20
08:55:08 195  ,cad_g21
08:55:08 196  ,cad_g22
08:55:08 197  ,cad_g23
08:55:08 198  ,cad_g24
08:55:08 199  ,cad_g25
08:55:08 200  ,cad_g26
08:55:08 201  ,cad_g27
08:55:08 202  ,cad_g28
08:55:08 203  ,cad_g29
08:55:08 204  ,cad_g30
08:55:08 205  ,cad_g31
08:55:08 206  ,cad_g32
08:55:08 207  ,cad_g33
08:55:08 208  ,cad_g34
08:55:08 209  ,cad_g35
08:55:08 210  ,cad_g36
08:55:08 211  ,cad_g37
08:55:08 212  ,cad_g38
08:55:08 213  ,cad_g39
08:55:08 214  ,cad_g40
08:55:08 215  ,cad_g41
08:55:08 216  ,chf_g00
08:55:08 217  ,chf_g01
08:55:08 218  ,chf_g02
08:55:08 219  ,chf_g03
08:55:08 220  ,chf_g04
08:55:08 221  ,chf_g05
08:55:08 222  ,chf_g06
08:55:08 223  ,chf_g07
08:55:08 224  ,chf_g08
08:55:08 225  ,chf_g09
08:55:08 226  ,chf_g10
08:55:08 227  ,chf_g11
08:55:08 228  ,chf_g12
08:55:08 229  ,chf_g13
08:55:08 230  ,chf_g14
08:55:08 231  ,chf_g15
08:55:08 232  ,chf_g16
08:55:08 233  ,chf_g17
08:55:08 234  ,chf_g18
08:55:08 235  ,chf_g19
08:55:08 236  ,chf_g20
08:55:08 237  ,chf_g21
08:55:08 238  ,chf_g22
08:55:08 239  ,chf_g23
08:55:08 240  ,chf_g24
08:55:08 241  ,chf_g25
08:55:08 242  ,chf_g26
08:55:08 243  ,chf_g27
08:55:08 244  ,chf_g28
08:55:08 245  ,chf_g29
08:55:08 246  ,chf_g30
08:55:08 247  ,chf_g31
08:55:08 248  ,chf_g32
08:55:08 249  ,chf_g33
08:55:08 250  ,chf_g34
08:55:08 251  ,chf_g35
08:55:08 252  ,chf_g36
08:55:08 253  ,chf_g37
08:55:08 254  ,chf_g38
08:55:08 255  ,chf_g39
08:55:08 256  ,chf_g40
08:55:08 257  ,chf_g41
08:55:08 258  FROM aud_ms6 m
08:55:08 259  WHERE m.ydate = '&1'||' '||'&2'
08:55:08 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2011-01-07'||' '||'08:35:00'

View created.

Elapsed: 00:00:00.12
08:55:08 SQL> 
08:55:08 SQL> -- rpt
08:55:08 SQL> -- We should see just 1 row:
08:55:08 SQL> 
08:55:08 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
08:55:08 SQL> 
08:55:08 SQL> -- Build the model:
08:55:08 SQL> CREATE OR REPLACE VIEW bme AS
08:55:08   2  SELECT
08:55:08   3  'aud'||m.ydate prdate
08:55:08   4  ,gattn
08:55:08   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
08:55:08   6  ,eur_g00
08:55:08   7  ,eur_g01
08:55:08   8  ,eur_g02
08:55:08   9  ,eur_g03
08:55:08  10  ,eur_g04
08:55:08  11  ,eur_g05
08:55:08  12  ,eur_g06
08:55:08  13  ,eur_g07
08:55:08  14  ,eur_g08
08:55:08  15  ,eur_g09
08:55:08  16  ,eur_g10
08:55:08  17  ,eur_g11
08:55:08  18  ,eur_g12
08:55:08  19  ,eur_g13
08:55:08  20  ,eur_g14
08:55:08  21  ,eur_g15
08:55:08  22  ,eur_g16
08:55:08  23  ,eur_g17
08:55:08  24  ,eur_g18
08:55:08  25  ,eur_g19
08:55:08  26  ,eur_g20
08:55:08  27  ,eur_g21
08:55:08  28  ,eur_g22
08:55:08  29  ,eur_g23
08:55:08  30  ,eur_g24
08:55:08  31  ,eur_g25
08:55:08  32  ,eur_g26
08:55:08  33  ,eur_g27
08:55:08  34  ,eur_g28
08:55:08  35  ,eur_g29
08:55:08  36  ,eur_g30
08:55:08  37  ,eur_g31
08:55:08  38  ,eur_g32
08:55:08  39  ,eur_g33
08:55:08  40  ,eur_g34
08:55:08  41  ,eur_g35
08:55:08  42  ,eur_g36
08:55:08  43  ,eur_g37
08:55:08  44  ,eur_g38
08:55:08  45  ,eur_g39
08:55:08  46  ,eur_g40
08:55:08  47  ,eur_g41
08:55:08  48  ,aud_g00
08:55:08  49  ,aud_g01
08:55:08  50  ,aud_g02
08:55:08  51  ,aud_g03
08:55:08  52  ,aud_g04
08:55:08  53  ,aud_g05
08:55:08  54  ,aud_g06
08:55:08  55  ,aud_g07
08:55:08  56  ,aud_g08
08:55:08  57  ,aud_g09
08:55:08  58  ,aud_g10
08:55:08  59  ,aud_g11
08:55:08  60  ,aud_g12
08:55:08  61  ,aud_g13
08:55:08  62  ,aud_g14
08:55:08  63  ,aud_g15
08:55:08  64  ,aud_g16
08:55:08  65  ,aud_g17
08:55:08  66  ,aud_g18
08:55:08  67  ,aud_g19
08:55:08  68  ,aud_g20
08:55:08  69  ,aud_g21
08:55:08  70  ,aud_g22
08:55:08  71  ,aud_g23
08:55:08  72  ,aud_g24
08:55:08  73  ,aud_g25
08:55:08  74  ,aud_g26
08:55:08  75  ,aud_g27
08:55:08  76  ,aud_g28
08:55:08  77  ,aud_g29
08:55:08  78  ,aud_g30
08:55:08  79  ,aud_g31
08:55:08  80  ,aud_g32
08:55:08  81  ,aud_g33
08:55:08  82  ,aud_g34
08:55:08  83  ,aud_g35
08:55:08  84  ,aud_g36
08:55:08  85  ,aud_g37
08:55:08  86  ,aud_g38
08:55:08  87  ,aud_g39
08:55:08  88  ,aud_g40
08:55:08  89  ,aud_g41
08:55:08  90  ,gbp_g00
08:55:08  91  ,gbp_g01
08:55:08  92  ,gbp_g02
08:55:08  93  ,gbp_g03
08:55:08  94  ,gbp_g04
08:55:08  95  ,gbp_g05
08:55:08  96  ,gbp_g06
08:55:08  97  ,gbp_g07
08:55:08  98  ,gbp_g08
08:55:08  99  ,gbp_g09
08:55:08 100  ,gbp_g10
08:55:08 101  ,gbp_g11
08:55:08 102  ,gbp_g12
08:55:08 103  ,gbp_g13
08:55:08 104  ,gbp_g14
08:55:08 105  ,gbp_g15
08:55:08 106  ,gbp_g16
08:55:08 107  ,gbp_g17
08:55:08 108  ,gbp_g18
08:55:08 109  ,gbp_g19
08:55:08 110  ,gbp_g20
08:55:08 111  ,gbp_g21
08:55:08 112  ,gbp_g22
08:55:08 113  ,gbp_g23
08:55:08 114  ,gbp_g24
08:55:08 115  ,gbp_g25
08:55:08 116  ,gbp_g26
08:55:08 117  ,gbp_g27
08:55:08 118  ,gbp_g28
08:55:08 119  ,gbp_g29
08:55:08 120  ,gbp_g30
08:55:08 121  ,gbp_g31
08:55:08 122  ,gbp_g32
08:55:08 123  ,gbp_g33
08:55:08 124  ,gbp_g34
08:55:08 125  ,gbp_g35
08:55:08 126  ,gbp_g36
08:55:08 127  ,gbp_g37
08:55:08 128  ,gbp_g38
08:55:08 129  ,gbp_g39
08:55:08 130  ,gbp_g40
08:55:08 131  ,gbp_g41
08:55:08 132  ,jpy_g00
08:55:08 133  ,jpy_g01
08:55:08 134  ,jpy_g02
08:55:08 135  ,jpy_g03
08:55:08 136  ,jpy_g04
08:55:08 137  ,jpy_g05
08:55:08 138  ,jpy_g06
08:55:08 139  ,jpy_g07
08:55:08 140  ,jpy_g08
08:55:08 141  ,jpy_g09
08:55:08 142  ,jpy_g10
08:55:08 143  ,jpy_g11
08:55:08 144  ,jpy_g12
08:55:08 145  ,jpy_g13
08:55:08 146  ,jpy_g14
08:55:08 147  ,jpy_g15
08:55:08 148  ,jpy_g16
08:55:08 149  ,jpy_g17
08:55:08 150  ,jpy_g18
08:55:08 151  ,jpy_g19
08:55:08 152  ,jpy_g20
08:55:08 153  ,jpy_g21
08:55:08 154  ,jpy_g22
08:55:08 155  ,jpy_g23
08:55:08 156  ,jpy_g24
08:55:08 157  ,jpy_g25
08:55:08 158  ,jpy_g26
08:55:08 159  ,jpy_g27
08:55:08 160  ,jpy_g28
08:55:08 161  ,jpy_g29
08:55:08 162  ,jpy_g30
08:55:08 163  ,jpy_g31
08:55:08 164  ,jpy_g32
08:55:08 165  ,jpy_g33
08:55:08 166  ,jpy_g34
08:55:08 167  ,jpy_g35
08:55:08 168  ,jpy_g36
08:55:08 169  ,jpy_g37
08:55:08 170  ,jpy_g38
08:55:08 171  ,jpy_g39
08:55:08 172  ,jpy_g40
08:55:08 173  ,jpy_g41
08:55:08 174  ,cad_g00
08:55:08 175  ,cad_g01
08:55:08 176  ,cad_g02
08:55:08 177  ,cad_g03
08:55:08 178  ,cad_g04
08:55:08 179  ,cad_g05
08:55:08 180  ,cad_g06
08:55:08 181  ,cad_g07
08:55:08 182  ,cad_g08
08:55:08 183  ,cad_g09
08:55:08 184  ,cad_g10
08:55:08 185  ,cad_g11
08:55:08 186  ,cad_g12
08:55:08 187  ,cad_g13
08:55:08 188  ,cad_g14
08:55:08 189  ,cad_g15
08:55:08 190  ,cad_g16
08:55:08 191  ,cad_g17
08:55:08 192  ,cad_g18
08:55:08 193  ,cad_g19
08:55:08 194  ,cad_g20
08:55:08 195  ,cad_g21
08:55:08 196  ,cad_g22
08:55:08 197  ,cad_g23
08:55:08 198  ,cad_g24
08:55:08 199  ,cad_g25
08:55:08 200  ,cad_g26
08:55:08 201  ,cad_g27
08:55:08 202  ,cad_g28
08:55:08 203  ,cad_g29
08:55:08 204  ,cad_g30
08:55:08 205  ,cad_g31
08:55:08 206  ,cad_g32
08:55:08 207  ,cad_g33
08:55:08 208  ,cad_g34
08:55:08 209  ,cad_g35
08:55:08 210  ,cad_g36
08:55:08 211  ,cad_g37
08:55:08 212  ,cad_g38
08:55:08 213  ,cad_g39
08:55:08 214  ,cad_g40
08:55:08 215  ,cad_g41
08:55:08 216  ,chf_g00
08:55:08 217  ,chf_g01
08:55:08 218  ,chf_g02
08:55:08 219  ,chf_g03
08:55:08 220  ,chf_g04
08:55:08 221  ,chf_g05
08:55:08 222  ,chf_g06
08:55:08 223  ,chf_g07
08:55:08 224  ,chf_g08
08:55:08 225  ,chf_g09
08:55:08 226  ,chf_g10
08:55:08 227  ,chf_g11
08:55:08 228  ,chf_g12
08:55:08 229  ,chf_g13
08:55:08 230  ,chf_g14
08:55:08 231  ,chf_g15
08:55:08 232  ,chf_g16
08:55:08 233  ,chf_g17
08:55:08 234  ,chf_g18
08:55:08 235  ,chf_g19
08:55:08 236  ,chf_g20
08:55:08 237  ,chf_g21
08:55:08 238  ,chf_g22
08:55:08 239  ,chf_g23
08:55:08 240  ,chf_g24
08:55:08 241  ,chf_g25
08:55:08 242  ,chf_g26
08:55:08 243  ,chf_g27
08:55:08 244  ,chf_g28
08:55:08 245  ,chf_g29
08:55:08 246  ,chf_g30
08:55:08 247  ,chf_g31
08:55:08 248  ,chf_g32
08:55:08 249  ,chf_g33
08:55:08 250  ,chf_g34
08:55:08 251  ,chf_g35
08:55:08 252  ,chf_g36
08:55:08 253  ,chf_g37
08:55:08 254  ,chf_g38
08:55:08 255  ,chf_g39
08:55:08 256  ,chf_g40
08:55:08 257  ,chf_g41
08:55:08 258  FROM aud_ms6 m
08:55:08 259  WHERE gattn IN('nup','up')
08:55:08 260  AND 1+m.ydate < '&1'||' '||'&2'
08:55:08 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2011-01-07'||' '||'08:35:00'

View created.

Elapsed: 00:00:00.12
08:55:08 SQL> 
08:55:08 SQL> -- rpt
08:55:08 SQL> 
08:55:08 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	    12901
up	     6609

Elapsed: 00:00:00.05
08:55:08 SQL> 
08:55:08 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
aud2011-01-06 08:30:00

Elapsed: 00:00:00.03
08:55:08 SQL> 
08:55:08 SQL> -- Now build model from bme and score sme
08:55:08 SQL> @score1gattn.sql
08:55:08 SQL> -- score1gattn.sql
08:55:08 SQL> 
08:55:08 SQL> -- Does the 1st SVM score
08:55:08 SQL> 
08:55:08 SQL> -- Fill up svmc_apply_prep
08:55:08 SQL> @score_gattn.sql
08:55:08 SQL> --
08:55:08 SQL> -- score_gattn.sql
08:55:08 SQL> --
08:55:08 SQL> 
08:55:08 SQL> -- usage: score_gattn.sql
08:55:08 SQL> 
08:55:08 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
08:55:08 SQL> 
08:55:08 SQL> DEFINE target	= 'gattn'
08:55:08 SQL> DEFINE model_name = 'forex15'
08:55:08 SQL> DEFINE bldtable	= 'bme'
08:55:08 SQL> DEFINE scoretable = 'sme'
08:55:08 SQL> DEFINE case_id	= 'prdate'
08:55:08 SQL> 
08:55:08 SQL> -- Define a variable to help me exclude some columns from some data mining calls
08:55:08 SQL> DEFINE exclude1 = "'&target','&case_id'"
08:55:08 SQL> 
08:55:08 SQL> -- Builds an SVM model using pl/sql.
08:55:08 SQL> 
08:55:08 SQL> -----------------------------------------------------------------------
08:55:08 SQL> --			    BUILD THE MODEL
08:55:08 SQL> -----------------------------------------------------------------------
08:55:08 SQL> 
08:55:08 SQL> -- Cleanup old build data preparation objects for repeat runs
08:55:08 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.01
08:55:08 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
08:55:08 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.00
08:55:08 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.00
08:55:08 SQL> 
08:55:08 SQL> 
08:55:08 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
08:55:08 SQL> --
08:55:08 SQL> -- DROP	TABLE svmc_settings ;
08:55:08 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
08:55:08 SQL> -- DELETE svmc_settings;
08:55:08 SQL> 
08:55:08 SQL> -- The default classification algorithm is Naive Bayes. So override
08:55:08 SQL> -- this choice to SVM using a settings table.
08:55:08 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
08:55:08 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
08:55:08 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
08:55:08 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
08:55:08 SQL> -- models.
08:55:08 SQL> --
08:55:08 SQL> 
08:55:08 SQL> -- Do this once and then comment it out.
08:55:08 SQL> -- That makes script go faster.
08:55:08 SQL> -- BEGIN
08:55:08 SQL> -- -- Populate settings table
08:55:08 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
08:55:08 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
08:55:08 SQL> --
08:55:08 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
08:55:08 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
08:55:08 SQL> --
08:55:08 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
08:55:08 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
08:55:08 SQL> --   COMMIT;
08:55:08 SQL> -- END;
08:55:08 SQL> -- /
08:55:08 SQL> 
08:55:08 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
08:55:08 SQL> 
08:55:08 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
08:55:08   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:55:08   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.09
08:55:08 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
08:55:08   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:55:08   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.43
08:55:09 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
08:55:09   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:55:09   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.26
08:55:09 SQL> 
08:55:09 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
08:55:09   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:55:09   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.11
08:55:09 SQL> 
08:55:09 SQL> --------------------------------
08:55:09 SQL> -- PREPARE BUILD (TRAINING) DATA
08:55:09 SQL> --
08:55:09 SQL> 
08:55:09 SQL> -- 1. Missing Value treatment for all Predictors and
08:55:09 SQL> -- 2. Outlier Treatment and
08:55:09 SQL> -- 3. Normalization are performed below.
08:55:09 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
08:55:09 SQL> --    normalized here.
08:55:09 SQL> 
08:55:09 SQL> BEGIN
08:55:09   2  	-- Perform missing value treatment for all predictors
08:55:09   3  	-- create miss tables
08:55:09   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
08:55:09   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
08:55:09   6  
08:55:09   7  	-- populate miss tables
08:55:09   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
08:55:09   9  	  miss_table_name => 'svmc_miss_num',
08:55:09  10  	  data_table_name => '&bldtable',
08:55:09  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
08:55:09  12  
08:55:09  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
08:55:09  14  	  miss_table_name => 'svmc_miss_cat',
08:55:09  15  	  data_table_name => '&bldtable',
08:55:09  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
08:55:09  17  
08:55:09  18  	-- xform input data to replace missing values
08:55:09  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
08:55:09  20  	  miss_table_name => 'svmc_miss_num',
08:55:09  21  	  data_table_name => '&bldtable',
08:55:09  22  	  xform_view_name => 'xformed_build_miss_num');
08:55:09  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
08:55:09  24  	  miss_table_name => 'svmc_miss_cat',
08:55:09  25  	  data_table_name => '&bldtable',
08:55:09  26  	  xform_view_name => 'xformed_build_miss_cat');
08:55:09  27  
08:55:09  28  	-- Perform outlier treatment.
08:55:09  29  	-- create clip table
08:55:09  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
08:55:09  31  
08:55:09  32  	-- populate clip table
08:55:09  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
08:55:09  34  	  clip_table_name => 'svmc_clip',
08:55:09  35  	  data_table_name => '&bldtable',
08:55:09  36  	  tail_frac	  => 0.025,
08:55:09  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
08:55:09  38  
08:55:09  39  	-- xform input data to winsorized data
08:55:09  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
08:55:09  41  	  clip_table_name => 'svmc_clip',
08:55:09  42  	  data_table_name => '&bldtable',
08:55:09  43  	  xform_view_name => 'svmc_winsor');
08:55:09  44  
08:55:09  45  	-- create normalization table
08:55:09  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
08:55:09  47  
08:55:09  48  	-- populate normalization table based on winsorized data
08:55:09  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
08:55:09  50  	  norm_table_name => 'svmc_norm',
08:55:09  51  	  data_table_name => 'svmc_winsor',
08:55:09  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
08:55:09  53  
08:55:09  54  	-- normalize the original data
08:55:09  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
08:55:09  56  	  norm_table_name => 'svmc_norm',
08:55:09  57  	  data_table_name => '&bldtable',
08:55:09  58  	  xform_view_name => 'svmc_build_prep');
08:55:09  59  END;
08:55:09  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:18.38
08:55:28 SQL> 
08:55:28 SQL> ---------------------
08:55:28 SQL> -- CREATE A NEW MODEL
08:55:28 SQL> --
08:55:28 SQL> -- Cleanup old model with the same name for repeat runs
08:55:28 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
08:55:28   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:55:28   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex15');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.04
08:55:29 SQL> 
08:55:29 SQL> -- Build a new SVM Model
08:55:29 SQL> BEGIN
08:55:29   2  	DBMS_DATA_MINING.CREATE_MODEL(
08:55:29   3  	  model_name	      => '&model_name',
08:55:29   4  	  mining_function     => dbms_data_mining.classification,
08:55:29   5  	  data_table_name     => 'svmc_build_prep',
08:55:29   6  	  case_id_column_name => '&case_id',
08:55:29   7  	  target_column_name  => '&target',
08:55:29   8  	  settings_table_name => 'svmc_settings');
08:55:29   9  END;
08:55:29  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex15',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:29.71
08:55:58 SQL> 
08:55:58 SQL> -----------------------------------------------------------------------
08:55:58 SQL> --			       APPLY/score THE MODEL
08:55:58 SQL> -----------------------------------------------------------------------
08:55:58 SQL> 
08:55:58 SQL> -- Cleanup old scoring data preparation objects for repeat runs
08:55:58 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
08:55:58   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:55:58   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
08:55:58 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
08:55:58   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:55:58   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
08:55:58 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
08:55:58   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:55:58   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
08:55:59 SQL> -----------------------
08:55:59 SQL> -- PREPARE SCORING DATA
08:55:59 SQL> --
08:55:59 SQL> -- If the data for model creation has been prepared, then the data
08:55:59 SQL> -- to be scored using the model must be prepared in the same manner
08:55:59 SQL> -- in order to obtain meaningful results.
08:55:59 SQL> --
08:55:59 SQL> -- 1. Missing Value treatment for all Predictors and
08:55:59 SQL> -- 2. Normalization
08:55:59 SQL> -- No outlier treatment will be performed during test and apply. The
08:55:59 SQL> -- normalization step is sufficient, since the normalization parameters
08:55:59 SQL> -- already capture the effects of outlier treatment done with build data.
08:55:59 SQL> --
08:55:59 SQL> BEGIN
08:55:59   2  	-- Xform Test data to replace missing values
08:55:59   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
08:55:59   4  	  miss_table_name => 'svmc_miss_num',
08:55:59   5  	  data_table_name => '&scoretable',
08:55:59   6  	  xform_view_name => 'xformed_apply_miss_num');
08:55:59   7  
08:55:59   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
08:55:59   9  	  miss_table_name => 'svmc_miss_cat',
08:55:59  10  	  data_table_name => '&scoretable',
08:55:59  11  	  xform_view_name => 'xformed_apply_miss_cat');
08:55:59  12  
08:55:59  13  	-- Normalize the data to be scored
08:55:59  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
08:55:59  15  	  norm_table_name => 'svmc_norm',
08:55:59  16  	  data_table_name => '&scoretable',
08:55:59  17  	  xform_view_name => 'svmc_apply_prep');
08:55:59  18  END;
08:55:59  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.18
08:56:00 SQL> 
08:56:00 SQL> -- Use same model_name used in score_gattn.sql
08:56:00 SQL> DEFINE model_name = 'forex15'
08:56:00 SQL> 
08:56:00 SQL> DELETE fxscores6_gattn WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.03
08:56:00 SQL> 
08:56:00 SQL> INSERT INTO fxscores6_gattn (prdate,score,rundate,pair,ydate)
08:56:00   2  SELECT
08:56:00   3  prdate
08:56:00   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
08:56:00   5  ,sysdate
08:56:00   6  ,SUBSTR(prdate,1,3)pair
08:56:00   7  ,SUBSTR(prdate,4,19)ydate
08:56:00   8  FROM svmc_apply_prep
08:56:00   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex15,'up' USING *)score

1 row created.

Elapsed: 00:00:00.17
08:56:00 SQL> @aud_score1day_gattn.sql	2011-01-07 08:40:00
08:56:00 SQL> --
08:56:00 SQL> -- aud_score1day_gattn.sql
08:56:00 SQL> --
08:56:00 SQL> 
08:56:00 SQL> CREATE OR REPLACE VIEW sme AS
08:56:00   2  SELECT
08:56:00   3  'aud'||m.ydate prdate
08:56:00   4  ,NULL gattn
08:56:00   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
08:56:00   6  ,eur_g00
08:56:00   7  ,eur_g01
08:56:00   8  ,eur_g02
08:56:00   9  ,eur_g03
08:56:00  10  ,eur_g04
08:56:00  11  ,eur_g05
08:56:00  12  ,eur_g06
08:56:00  13  ,eur_g07
08:56:00  14  ,eur_g08
08:56:00  15  ,eur_g09
08:56:00  16  ,eur_g10
08:56:00  17  ,eur_g11
08:56:00  18  ,eur_g12
08:56:00  19  ,eur_g13
08:56:00  20  ,eur_g14
08:56:00  21  ,eur_g15
08:56:00  22  ,eur_g16
08:56:00  23  ,eur_g17
08:56:00  24  ,eur_g18
08:56:00  25  ,eur_g19
08:56:00  26  ,eur_g20
08:56:00  27  ,eur_g21
08:56:00  28  ,eur_g22
08:56:00  29  ,eur_g23
08:56:00  30  ,eur_g24
08:56:00  31  ,eur_g25
08:56:00  32  ,eur_g26
08:56:00  33  ,eur_g27
08:56:00  34  ,eur_g28
08:56:00  35  ,eur_g29
08:56:00  36  ,eur_g30
08:56:00  37  ,eur_g31
08:56:00  38  ,eur_g32
08:56:00  39  ,eur_g33
08:56:00  40  ,eur_g34
08:56:00  41  ,eur_g35
08:56:00  42  ,eur_g36
08:56:00  43  ,eur_g37
08:56:00  44  ,eur_g38
08:56:00  45  ,eur_g39
08:56:00  46  ,eur_g40
08:56:00  47  ,eur_g41
08:56:00  48  ,aud_g00
08:56:00  49  ,aud_g01
08:56:00  50  ,aud_g02
08:56:00  51  ,aud_g03
08:56:00  52  ,aud_g04
08:56:00  53  ,aud_g05
08:56:00  54  ,aud_g06
08:56:00  55  ,aud_g07
08:56:00  56  ,aud_g08
08:56:00  57  ,aud_g09
08:56:00  58  ,aud_g10
08:56:00  59  ,aud_g11
08:56:00  60  ,aud_g12
08:56:00  61  ,aud_g13
08:56:00  62  ,aud_g14
08:56:00  63  ,aud_g15
08:56:00  64  ,aud_g16
08:56:00  65  ,aud_g17
08:56:00  66  ,aud_g18
08:56:00  67  ,aud_g19
08:56:00  68  ,aud_g20
08:56:00  69  ,aud_g21
08:56:00  70  ,aud_g22
08:56:00  71  ,aud_g23
08:56:00  72  ,aud_g24
08:56:00  73  ,aud_g25
08:56:00  74  ,aud_g26
08:56:00  75  ,aud_g27
08:56:00  76  ,aud_g28
08:56:00  77  ,aud_g29
08:56:00  78  ,aud_g30
08:56:00  79  ,aud_g31
08:56:00  80  ,aud_g32
08:56:00  81  ,aud_g33
08:56:00  82  ,aud_g34
08:56:00  83  ,aud_g35
08:56:00  84  ,aud_g36
08:56:00  85  ,aud_g37
08:56:00  86  ,aud_g38
08:56:00  87  ,aud_g39
08:56:00  88  ,aud_g40
08:56:00  89  ,aud_g41
08:56:00  90  ,gbp_g00
08:56:00  91  ,gbp_g01
08:56:00  92  ,gbp_g02
08:56:00  93  ,gbp_g03
08:56:00  94  ,gbp_g04
08:56:00  95  ,gbp_g05
08:56:00  96  ,gbp_g06
08:56:00  97  ,gbp_g07
08:56:00  98  ,gbp_g08
08:56:00  99  ,gbp_g09
08:56:00 100  ,gbp_g10
08:56:00 101  ,gbp_g11
08:56:00 102  ,gbp_g12
08:56:00 103  ,gbp_g13
08:56:00 104  ,gbp_g14
08:56:00 105  ,gbp_g15
08:56:00 106  ,gbp_g16
08:56:00 107  ,gbp_g17
08:56:00 108  ,gbp_g18
08:56:00 109  ,gbp_g19
08:56:00 110  ,gbp_g20
08:56:00 111  ,gbp_g21
08:56:00 112  ,gbp_g22
08:56:00 113  ,gbp_g23
08:56:00 114  ,gbp_g24
08:56:00 115  ,gbp_g25
08:56:00 116  ,gbp_g26
08:56:00 117  ,gbp_g27
08:56:00 118  ,gbp_g28
08:56:00 119  ,gbp_g29
08:56:00 120  ,gbp_g30
08:56:00 121  ,gbp_g31
08:56:00 122  ,gbp_g32
08:56:00 123  ,gbp_g33
08:56:00 124  ,gbp_g34
08:56:00 125  ,gbp_g35
08:56:00 126  ,gbp_g36
08:56:00 127  ,gbp_g37
08:56:00 128  ,gbp_g38
08:56:00 129  ,gbp_g39
08:56:00 130  ,gbp_g40
08:56:00 131  ,gbp_g41
08:56:00 132  ,jpy_g00
08:56:00 133  ,jpy_g01
08:56:00 134  ,jpy_g02
08:56:00 135  ,jpy_g03
08:56:00 136  ,jpy_g04
08:56:00 137  ,jpy_g05
08:56:00 138  ,jpy_g06
08:56:00 139  ,jpy_g07
08:56:00 140  ,jpy_g08
08:56:00 141  ,jpy_g09
08:56:00 142  ,jpy_g10
08:56:00 143  ,jpy_g11
08:56:00 144  ,jpy_g12
08:56:00 145  ,jpy_g13
08:56:00 146  ,jpy_g14
08:56:00 147  ,jpy_g15
08:56:00 148  ,jpy_g16
08:56:00 149  ,jpy_g17
08:56:00 150  ,jpy_g18
08:56:00 151  ,jpy_g19
08:56:00 152  ,jpy_g20
08:56:00 153  ,jpy_g21
08:56:00 154  ,jpy_g22
08:56:00 155  ,jpy_g23
08:56:00 156  ,jpy_g24
08:56:00 157  ,jpy_g25
08:56:00 158  ,jpy_g26
08:56:00 159  ,jpy_g27
08:56:00 160  ,jpy_g28
08:56:00 161  ,jpy_g29
08:56:00 162  ,jpy_g30
08:56:00 163  ,jpy_g31
08:56:00 164  ,jpy_g32
08:56:00 165  ,jpy_g33
08:56:00 166  ,jpy_g34
08:56:00 167  ,jpy_g35
08:56:00 168  ,jpy_g36
08:56:00 169  ,jpy_g37
08:56:00 170  ,jpy_g38
08:56:00 171  ,jpy_g39
08:56:00 172  ,jpy_g40
08:56:00 173  ,jpy_g41
08:56:00 174  ,cad_g00
08:56:00 175  ,cad_g01
08:56:00 176  ,cad_g02
08:56:00 177  ,cad_g03
08:56:00 178  ,cad_g04
08:56:00 179  ,cad_g05
08:56:00 180  ,cad_g06
08:56:00 181  ,cad_g07
08:56:00 182  ,cad_g08
08:56:00 183  ,cad_g09
08:56:00 184  ,cad_g10
08:56:00 185  ,cad_g11
08:56:00 186  ,cad_g12
08:56:00 187  ,cad_g13
08:56:00 188  ,cad_g14
08:56:00 189  ,cad_g15
08:56:00 190  ,cad_g16
08:56:00 191  ,cad_g17
08:56:00 192  ,cad_g18
08:56:00 193  ,cad_g19
08:56:00 194  ,cad_g20
08:56:00 195  ,cad_g21
08:56:00 196  ,cad_g22
08:56:00 197  ,cad_g23
08:56:00 198  ,cad_g24
08:56:00 199  ,cad_g25
08:56:00 200  ,cad_g26
08:56:00 201  ,cad_g27
08:56:00 202  ,cad_g28
08:56:00 203  ,cad_g29
08:56:00 204  ,cad_g30
08:56:00 205  ,cad_g31
08:56:00 206  ,cad_g32
08:56:00 207  ,cad_g33
08:56:00 208  ,cad_g34
08:56:00 209  ,cad_g35
08:56:00 210  ,cad_g36
08:56:00 211  ,cad_g37
08:56:00 212  ,cad_g38
08:56:00 213  ,cad_g39
08:56:00 214  ,cad_g40
08:56:00 215  ,cad_g41
08:56:00 216  ,chf_g00
08:56:00 217  ,chf_g01
08:56:00 218  ,chf_g02
08:56:00 219  ,chf_g03
08:56:00 220  ,chf_g04
08:56:00 221  ,chf_g05
08:56:00 222  ,chf_g06
08:56:00 223  ,chf_g07
08:56:00 224  ,chf_g08
08:56:00 225  ,chf_g09
08:56:00 226  ,chf_g10
08:56:00 227  ,chf_g11
08:56:00 228  ,chf_g12
08:56:00 229  ,chf_g13
08:56:00 230  ,chf_g14
08:56:00 231  ,chf_g15
08:56:00 232  ,chf_g16
08:56:00 233  ,chf_g17
08:56:00 234  ,chf_g18
08:56:00 235  ,chf_g19
08:56:00 236  ,chf_g20
08:56:00 237  ,chf_g21
08:56:00 238  ,chf_g22
08:56:00 239  ,chf_g23
08:56:00 240  ,chf_g24
08:56:00 241  ,chf_g25
08:56:00 242  ,chf_g26
08:56:00 243  ,chf_g27
08:56:00 244  ,chf_g28
08:56:00 245  ,chf_g29
08:56:00 246  ,chf_g30
08:56:00 247  ,chf_g31
08:56:00 248  ,chf_g32
08:56:00 249  ,chf_g33
08:56:00 250  ,chf_g34
08:56:00 251  ,chf_g35
08:56:00 252  ,chf_g36
08:56:00 253  ,chf_g37
08:56:00 254  ,chf_g38
08:56:00 255  ,chf_g39
08:56:00 256  ,chf_g40
08:56:00 257  ,chf_g41
08:56:00 258  FROM aud_ms6 m
08:56:00 259  WHERE m.ydate = '&1'||' '||'&2'
08:56:00 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2011-01-07'||' '||'08:40:00'

View created.

Elapsed: 00:00:00.13
08:56:00 SQL> 
08:56:00 SQL> -- rpt
08:56:00 SQL> -- We should see just 1 row:
08:56:00 SQL> 
08:56:00 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
08:56:00 SQL> 
08:56:00 SQL> -- Build the model:
08:56:00 SQL> CREATE OR REPLACE VIEW bme AS
08:56:00   2  SELECT
08:56:00   3  'aud'||m.ydate prdate
08:56:00   4  ,gattn
08:56:00   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
08:56:00   6  ,eur_g00
08:56:00   7  ,eur_g01
08:56:00   8  ,eur_g02
08:56:00   9  ,eur_g03
08:56:00  10  ,eur_g04
08:56:00  11  ,eur_g05
08:56:00  12  ,eur_g06
08:56:00  13  ,eur_g07
08:56:00  14  ,eur_g08
08:56:00  15  ,eur_g09
08:56:00  16  ,eur_g10
08:56:00  17  ,eur_g11
08:56:00  18  ,eur_g12
08:56:00  19  ,eur_g13
08:56:00  20  ,eur_g14
08:56:00  21  ,eur_g15
08:56:00  22  ,eur_g16
08:56:00  23  ,eur_g17
08:56:00  24  ,eur_g18
08:56:00  25  ,eur_g19
08:56:00  26  ,eur_g20
08:56:00  27  ,eur_g21
08:56:00  28  ,eur_g22
08:56:00  29  ,eur_g23
08:56:00  30  ,eur_g24
08:56:00  31  ,eur_g25
08:56:00  32  ,eur_g26
08:56:00  33  ,eur_g27
08:56:00  34  ,eur_g28
08:56:00  35  ,eur_g29
08:56:00  36  ,eur_g30
08:56:00  37  ,eur_g31
08:56:00  38  ,eur_g32
08:56:00  39  ,eur_g33
08:56:00  40  ,eur_g34
08:56:00  41  ,eur_g35
08:56:00  42  ,eur_g36
08:56:00  43  ,eur_g37
08:56:00  44  ,eur_g38
08:56:00  45  ,eur_g39
08:56:00  46  ,eur_g40
08:56:00  47  ,eur_g41
08:56:00  48  ,aud_g00
08:56:00  49  ,aud_g01
08:56:00  50  ,aud_g02
08:56:00  51  ,aud_g03
08:56:00  52  ,aud_g04
08:56:00  53  ,aud_g05
08:56:00  54  ,aud_g06
08:56:00  55  ,aud_g07
08:56:00  56  ,aud_g08
08:56:00  57  ,aud_g09
08:56:00  58  ,aud_g10
08:56:00  59  ,aud_g11
08:56:00  60  ,aud_g12
08:56:00  61  ,aud_g13
08:56:00  62  ,aud_g14
08:56:00  63  ,aud_g15
08:56:00  64  ,aud_g16
08:56:00  65  ,aud_g17
08:56:00  66  ,aud_g18
08:56:00  67  ,aud_g19
08:56:00  68  ,aud_g20
08:56:00  69  ,aud_g21
08:56:00  70  ,aud_g22
08:56:00  71  ,aud_g23
08:56:00  72  ,aud_g24
08:56:00  73  ,aud_g25
08:56:00  74  ,aud_g26
08:56:00  75  ,aud_g27
08:56:00  76  ,aud_g28
08:56:00  77  ,aud_g29
08:56:00  78  ,aud_g30
08:56:00  79  ,aud_g31
08:56:00  80  ,aud_g32
08:56:00  81  ,aud_g33
08:56:00  82  ,aud_g34
08:56:00  83  ,aud_g35
08:56:00  84  ,aud_g36
08:56:00  85  ,aud_g37
08:56:00  86  ,aud_g38
08:56:00  87  ,aud_g39
08:56:00  88  ,aud_g40
08:56:00  89  ,aud_g41
08:56:00  90  ,gbp_g00
08:56:00  91  ,gbp_g01
08:56:00  92  ,gbp_g02
08:56:00  93  ,gbp_g03
08:56:00  94  ,gbp_g04
08:56:00  95  ,gbp_g05
08:56:00  96  ,gbp_g06
08:56:00  97  ,gbp_g07
08:56:00  98  ,gbp_g08
08:56:00  99  ,gbp_g09
08:56:00 100  ,gbp_g10
08:56:00 101  ,gbp_g11
08:56:00 102  ,gbp_g12
08:56:00 103  ,gbp_g13
08:56:00 104  ,gbp_g14
08:56:00 105  ,gbp_g15
08:56:00 106  ,gbp_g16
08:56:00 107  ,gbp_g17
08:56:00 108  ,gbp_g18
08:56:00 109  ,gbp_g19
08:56:00 110  ,gbp_g20
08:56:00 111  ,gbp_g21
08:56:00 112  ,gbp_g22
08:56:00 113  ,gbp_g23
08:56:00 114  ,gbp_g24
08:56:00 115  ,gbp_g25
08:56:00 116  ,gbp_g26
08:56:00 117  ,gbp_g27
08:56:00 118  ,gbp_g28
08:56:00 119  ,gbp_g29
08:56:00 120  ,gbp_g30
08:56:00 121  ,gbp_g31
08:56:00 122  ,gbp_g32
08:56:00 123  ,gbp_g33
08:56:00 124  ,gbp_g34
08:56:00 125  ,gbp_g35
08:56:00 126  ,gbp_g36
08:56:00 127  ,gbp_g37
08:56:00 128  ,gbp_g38
08:56:00 129  ,gbp_g39
08:56:00 130  ,gbp_g40
08:56:00 131  ,gbp_g41
08:56:00 132  ,jpy_g00
08:56:00 133  ,jpy_g01
08:56:00 134  ,jpy_g02
08:56:00 135  ,jpy_g03
08:56:00 136  ,jpy_g04
08:56:00 137  ,jpy_g05
08:56:00 138  ,jpy_g06
08:56:00 139  ,jpy_g07
08:56:00 140  ,jpy_g08
08:56:00 141  ,jpy_g09
08:56:00 142  ,jpy_g10
08:56:00 143  ,jpy_g11
08:56:00 144  ,jpy_g12
08:56:00 145  ,jpy_g13
08:56:00 146  ,jpy_g14
08:56:00 147  ,jpy_g15
08:56:00 148  ,jpy_g16
08:56:00 149  ,jpy_g17
08:56:00 150  ,jpy_g18
08:56:00 151  ,jpy_g19
08:56:00 152  ,jpy_g20
08:56:00 153  ,jpy_g21
08:56:00 154  ,jpy_g22
08:56:00 155  ,jpy_g23
08:56:00 156  ,jpy_g24
08:56:00 157  ,jpy_g25
08:56:00 158  ,jpy_g26
08:56:00 159  ,jpy_g27
08:56:00 160  ,jpy_g28
08:56:00 161  ,jpy_g29
08:56:00 162  ,jpy_g30
08:56:00 163  ,jpy_g31
08:56:00 164  ,jpy_g32
08:56:00 165  ,jpy_g33
08:56:00 166  ,jpy_g34
08:56:00 167  ,jpy_g35
08:56:00 168  ,jpy_g36
08:56:00 169  ,jpy_g37
08:56:00 170  ,jpy_g38
08:56:00 171  ,jpy_g39
08:56:00 172  ,jpy_g40
08:56:00 173  ,jpy_g41
08:56:00 174  ,cad_g00
08:56:00 175  ,cad_g01
08:56:00 176  ,cad_g02
08:56:00 177  ,cad_g03
08:56:00 178  ,cad_g04
08:56:00 179  ,cad_g05
08:56:00 180  ,cad_g06
08:56:00 181  ,cad_g07
08:56:00 182  ,cad_g08
08:56:00 183  ,cad_g09
08:56:00 184  ,cad_g10
08:56:00 185  ,cad_g11
08:56:00 186  ,cad_g12
08:56:00 187  ,cad_g13
08:56:00 188  ,cad_g14
08:56:00 189  ,cad_g15
08:56:00 190  ,cad_g16
08:56:00 191  ,cad_g17
08:56:00 192  ,cad_g18
08:56:00 193  ,cad_g19
08:56:00 194  ,cad_g20
08:56:00 195  ,cad_g21
08:56:00 196  ,cad_g22
08:56:00 197  ,cad_g23
08:56:00 198  ,cad_g24
08:56:00 199  ,cad_g25
08:56:00 200  ,cad_g26
08:56:00 201  ,cad_g27
08:56:00 202  ,cad_g28
08:56:00 203  ,cad_g29
08:56:00 204  ,cad_g30
08:56:00 205  ,cad_g31
08:56:00 206  ,cad_g32
08:56:00 207  ,cad_g33
08:56:00 208  ,cad_g34
08:56:00 209  ,cad_g35
08:56:00 210  ,cad_g36
08:56:00 211  ,cad_g37
08:56:00 212  ,cad_g38
08:56:00 213  ,cad_g39
08:56:00 214  ,cad_g40
08:56:00 215  ,cad_g41
08:56:00 216  ,chf_g00
08:56:00 217  ,chf_g01
08:56:00 218  ,chf_g02
08:56:00 219  ,chf_g03
08:56:00 220  ,chf_g04
08:56:00 221  ,chf_g05
08:56:00 222  ,chf_g06
08:56:00 223  ,chf_g07
08:56:00 224  ,chf_g08
08:56:00 225  ,chf_g09
08:56:00 226  ,chf_g10
08:56:00 227  ,chf_g11
08:56:00 228  ,chf_g12
08:56:00 229  ,chf_g13
08:56:00 230  ,chf_g14
08:56:00 231  ,chf_g15
08:56:00 232  ,chf_g16
08:56:00 233  ,chf_g17
08:56:00 234  ,chf_g18
08:56:00 235  ,chf_g19
08:56:00 236  ,chf_g20
08:56:00 237  ,chf_g21
08:56:00 238  ,chf_g22
08:56:00 239  ,chf_g23
08:56:00 240  ,chf_g24
08:56:00 241  ,chf_g25
08:56:00 242  ,chf_g26
08:56:00 243  ,chf_g27
08:56:00 244  ,chf_g28
08:56:00 245  ,chf_g29
08:56:00 246  ,chf_g30
08:56:00 247  ,chf_g31
08:56:00 248  ,chf_g32
08:56:00 249  ,chf_g33
08:56:00 250  ,chf_g34
08:56:00 251  ,chf_g35
08:56:00 252  ,chf_g36
08:56:00 253  ,chf_g37
08:56:00 254  ,chf_g38
08:56:00 255  ,chf_g39
08:56:00 256  ,chf_g40
08:56:00 257  ,chf_g41
08:56:00 258  FROM aud_ms6 m
08:56:00 259  WHERE gattn IN('nup','up')
08:56:00 260  AND 1+m.ydate < '&1'||' '||'&2'
08:56:00 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2011-01-07'||' '||'08:40:00'

View created.

Elapsed: 00:00:00.13
08:56:00 SQL> 
08:56:00 SQL> -- rpt
08:56:00 SQL> 
08:56:00 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	    12901
up	     6610

Elapsed: 00:00:00.04
08:56:00 SQL> 
08:56:00 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
aud2011-01-06 08:35:00

Elapsed: 00:00:00.03
08:56:00 SQL> 
08:56:00 SQL> -- Now build model from bme and score sme
08:56:00 SQL> @score1gattn.sql
08:56:00 SQL> -- score1gattn.sql
08:56:00 SQL> 
08:56:00 SQL> -- Does the 1st SVM score
08:56:00 SQL> 
08:56:00 SQL> -- Fill up svmc_apply_prep
08:56:00 SQL> @score_gattn.sql
08:56:00 SQL> --
08:56:00 SQL> -- score_gattn.sql
08:56:00 SQL> --
08:56:00 SQL> 
08:56:00 SQL> -- usage: score_gattn.sql
08:56:00 SQL> 
08:56:00 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
08:56:00 SQL> 
08:56:00 SQL> DEFINE target	= 'gattn'
08:56:00 SQL> DEFINE model_name = 'forex15'
08:56:00 SQL> DEFINE bldtable	= 'bme'
08:56:00 SQL> DEFINE scoretable = 'sme'
08:56:00 SQL> DEFINE case_id	= 'prdate'
08:56:00 SQL> 
08:56:00 SQL> -- Define a variable to help me exclude some columns from some data mining calls
08:56:00 SQL> DEFINE exclude1 = "'&target','&case_id'"
08:56:00 SQL> 
08:56:00 SQL> -- Builds an SVM model using pl/sql.
08:56:00 SQL> 
08:56:00 SQL> -----------------------------------------------------------------------
08:56:00 SQL> --			    BUILD THE MODEL
08:56:00 SQL> -----------------------------------------------------------------------
08:56:00 SQL> 
08:56:00 SQL> -- Cleanup old build data preparation objects for repeat runs
08:56:00 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.01
08:56:00 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
08:56:00 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.00
08:56:00 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.00
08:56:00 SQL> 
08:56:00 SQL> 
08:56:00 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
08:56:00 SQL> --
08:56:00 SQL> -- DROP	TABLE svmc_settings ;
08:56:00 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
08:56:00 SQL> -- DELETE svmc_settings;
08:56:00 SQL> 
08:56:00 SQL> -- The default classification algorithm is Naive Bayes. So override
08:56:00 SQL> -- this choice to SVM using a settings table.
08:56:00 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
08:56:00 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
08:56:00 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
08:56:00 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
08:56:00 SQL> -- models.
08:56:00 SQL> --
08:56:00 SQL> 
08:56:00 SQL> -- Do this once and then comment it out.
08:56:00 SQL> -- That makes script go faster.
08:56:00 SQL> -- BEGIN
08:56:00 SQL> -- -- Populate settings table
08:56:00 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
08:56:00 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
08:56:00 SQL> --
08:56:00 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
08:56:00 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
08:56:00 SQL> --
08:56:00 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
08:56:00 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
08:56:00 SQL> --   COMMIT;
08:56:00 SQL> -- END;
08:56:00 SQL> -- /
08:56:00 SQL> 
08:56:00 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
08:56:00 SQL> 
08:56:00 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
08:56:00   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:56:00   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
08:56:00 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
08:56:00   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:56:00   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
08:56:00 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
08:56:00   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:56:00   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
08:56:00 SQL> 
08:56:00 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
08:56:00   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:56:00   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
08:56:01 SQL> 
08:56:01 SQL> --------------------------------
08:56:01 SQL> -- PREPARE BUILD (TRAINING) DATA
08:56:01 SQL> --
08:56:01 SQL> 
08:56:01 SQL> -- 1. Missing Value treatment for all Predictors and
08:56:01 SQL> -- 2. Outlier Treatment and
08:56:01 SQL> -- 3. Normalization are performed below.
08:56:01 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
08:56:01 SQL> --    normalized here.
08:56:01 SQL> 
08:56:01 SQL> BEGIN
08:56:01   2  	-- Perform missing value treatment for all predictors
08:56:01   3  	-- create miss tables
08:56:01   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
08:56:01   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
08:56:01   6  
08:56:01   7  	-- populate miss tables
08:56:01   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
08:56:01   9  	  miss_table_name => 'svmc_miss_num',
08:56:01  10  	  data_table_name => '&bldtable',
08:56:01  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
08:56:01  12  
08:56:01  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
08:56:01  14  	  miss_table_name => 'svmc_miss_cat',
08:56:01  15  	  data_table_name => '&bldtable',
08:56:01  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
08:56:01  17  
08:56:01  18  	-- xform input data to replace missing values
08:56:01  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
08:56:01  20  	  miss_table_name => 'svmc_miss_num',
08:56:01  21  	  data_table_name => '&bldtable',
08:56:01  22  	  xform_view_name => 'xformed_build_miss_num');
08:56:01  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
08:56:01  24  	  miss_table_name => 'svmc_miss_cat',
08:56:01  25  	  data_table_name => '&bldtable',
08:56:01  26  	  xform_view_name => 'xformed_build_miss_cat');
08:56:01  27  
08:56:01  28  	-- Perform outlier treatment.
08:56:01  29  	-- create clip table
08:56:01  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
08:56:01  31  
08:56:01  32  	-- populate clip table
08:56:01  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
08:56:01  34  	  clip_table_name => 'svmc_clip',
08:56:01  35  	  data_table_name => '&bldtable',
08:56:01  36  	  tail_frac	  => 0.025,
08:56:01  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
08:56:01  38  
08:56:01  39  	-- xform input data to winsorized data
08:56:01  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
08:56:01  41  	  clip_table_name => 'svmc_clip',
08:56:01  42  	  data_table_name => '&bldtable',
08:56:01  43  	  xform_view_name => 'svmc_winsor');
08:56:01  44  
08:56:01  45  	-- create normalization table
08:56:01  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
08:56:01  47  
08:56:01  48  	-- populate normalization table based on winsorized data
08:56:01  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
08:56:01  50  	  norm_table_name => 'svmc_norm',
08:56:01  51  	  data_table_name => 'svmc_winsor',
08:56:01  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
08:56:01  53  
08:56:01  54  	-- normalize the original data
08:56:01  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
08:56:01  56  	  norm_table_name => 'svmc_norm',
08:56:01  57  	  data_table_name => '&bldtable',
08:56:01  58  	  xform_view_name => 'svmc_build_prep');
08:56:01  59  END;
08:56:01  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:18.41
08:56:19 SQL> 
08:56:19 SQL> ---------------------
08:56:19 SQL> -- CREATE A NEW MODEL
08:56:19 SQL> --
08:56:19 SQL> -- Cleanup old model with the same name for repeat runs
08:56:19 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
08:56:19   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:56:19   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex15');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.06
08:56:20 SQL> 
08:56:20 SQL> -- Build a new SVM Model
08:56:20 SQL> BEGIN
08:56:20   2  	DBMS_DATA_MINING.CREATE_MODEL(
08:56:20   3  	  model_name	      => '&model_name',
08:56:20   4  	  mining_function     => dbms_data_mining.classification,
08:56:20   5  	  data_table_name     => 'svmc_build_prep',
08:56:20   6  	  case_id_column_name => '&case_id',
08:56:20   7  	  target_column_name  => '&target',
08:56:20   8  	  settings_table_name => 'svmc_settings');
08:56:20   9  END;
08:56:20  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex15',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:28.61
08:56:49 SQL> 
08:56:49 SQL> -----------------------------------------------------------------------
08:56:49 SQL> --			       APPLY/score THE MODEL
08:56:49 SQL> -----------------------------------------------------------------------
08:56:49 SQL> 
08:56:49 SQL> -- Cleanup old scoring data preparation objects for repeat runs
08:56:49 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
08:56:49   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:56:49   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
08:56:49 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
08:56:49   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:56:49   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
08:56:49 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
08:56:49   2  EXCEPTION WHEN OTHERS THEN NULL; END;
08:56:49   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
08:56:49 SQL> -----------------------
08:56:49 SQL> -- PREPARE SCORING DATA
08:56:49 SQL> --
08:56:49 SQL> -- If the data for model creation has been prepared, then the data
08:56:49 SQL> -- to be scored using the model must be prepared in the same manner
08:56:49 SQL> -- in order to obtain meaningful results.
08:56:49 SQL> --
08:56:49 SQL> -- 1. Missing Value treatment for all Predictors and
08:56:49 SQL> -- 2. Normalization
08:56:49 SQL> -- No outlier treatment will be performed during test and apply. The
08:56:49 SQL> -- normalization step is sufficient, since the normalization parameters
08:56:49 SQL> -- already capture the effects of outlier treatment done with build data.
08:56:49 SQL> --
08:56:49 SQL> BEGIN
08:56:49   2  	-- Xform Test data to replace missing values
08:56:49   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
08:56:49   4  	  miss_table_name => 'svmc_miss_num',
08:56:49   5  	  data_table_name => '&scoretable',
08:56:49   6  	  xform_view_name => 'xformed_apply_miss_num');
08:56:49   7  
08:56:49   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
08:56:49   9  	  miss_table_name => 'svmc_miss_cat',
08:56:49  10  	  data_table_name => '&scoretable',
08:56:49  11  	  xform_view_name => 'xformed_apply_miss_cat');
08:56:49  12  
08:56:49  13  	-- Normalize the data to be scored
08:56:49  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
08:56:49  15  	  norm_table_name => 'svmc_norm',
08:56:49  16  	  data_table_name => '&scoretable',
08:56:49  17  	  xform_view_name => 'svmc_apply_prep');
08:56:49  18  END;
08:56:49  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.19
08:56:50 SQL> 
08:56:50 SQL> -- Use same model_name used in score_gattn.sql
08:56:50 SQL> DEFINE model_name = 'forex15'
08:56:50 SQL> 
08:56:50 SQL> DELETE fxscores6_gattn WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.04
08:56:50 SQL> 
08:56:50 SQL> INSERT INTO fxscores6_gattn (prdate,score,rundate,pair,ydate)
08:56:50   2  SELECT
08:56:50   3  prdate
08:56:50   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
08:56:50   5  ,sysdate
08:56:50   6  ,SUBSTR(prdate,1,3)pair
08:56:50   7  ,SUBSTR(prdate,4,19)ydate
08:56:50   8  FROM svmc_apply_prep
08:56:50   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex15,'up' USING *)score

1 row created.

Elapsed: 00:00:00.16
08:56:50 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
