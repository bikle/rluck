
SQL*Plus: Release 11.2.0.1.0 Production on Wed Dec 29 03:21:32 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

03:21:32 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
03:21:32 SQL> 03:21:32 SQL> @aud_score1day.sql  2010-12-29 03:00:00
03:21:32 SQL> --
03:21:32 SQL> -- aud_score1day.sql
03:21:32 SQL> --
03:21:32 SQL> 
03:21:32 SQL> CREATE OR REPLACE VIEW sme AS
03:21:32   2  SELECT
03:21:32   3  'aud'||m.ydate prdate
03:21:32   4  ,NULL gatt
03:21:32   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
03:21:32   6  ,eur_g00
03:21:32   7  ,eur_g01
03:21:32   8  ,eur_g02
03:21:32   9  ,eur_g03
03:21:32  10  ,eur_g04
03:21:32  11  ,eur_g05
03:21:32  12  ,eur_g06
03:21:32  13  ,eur_g07
03:21:32  14  ,eur_g08
03:21:32  15  ,eur_g09
03:21:32  16  ,eur_g10
03:21:32  17  ,eur_g11
03:21:32  18  ,eur_g12
03:21:32  19  ,eur_g13
03:21:32  20  ,eur_g14
03:21:32  21  ,eur_g15
03:21:32  22  ,eur_g16
03:21:32  23  ,eur_g17
03:21:32  24  ,eur_g18
03:21:32  25  ,eur_g19
03:21:32  26  ,eur_g20
03:21:32  27  ,eur_g21
03:21:32  28  ,eur_g22
03:21:32  29  ,eur_g23
03:21:32  30  ,eur_g24
03:21:32  31  ,eur_g25
03:21:32  32  ,eur_g26
03:21:32  33  ,eur_g27
03:21:32  34  ,eur_g28
03:21:32  35  ,eur_g29
03:21:32  36  ,eur_g30
03:21:32  37  ,eur_g31
03:21:32  38  ,eur_g32
03:21:32  39  ,eur_g33
03:21:32  40  ,eur_g34
03:21:32  41  ,eur_g35
03:21:32  42  ,eur_g36
03:21:32  43  ,eur_g37
03:21:32  44  ,eur_g38
03:21:32  45  ,eur_g39
03:21:32  46  ,eur_g40
03:21:32  47  ,eur_g41
03:21:32  48  ,aud_g00
03:21:32  49  ,aud_g01
03:21:32  50  ,aud_g02
03:21:32  51  ,aud_g03
03:21:32  52  ,aud_g04
03:21:32  53  ,aud_g05
03:21:32  54  ,aud_g06
03:21:32  55  ,aud_g07
03:21:32  56  ,aud_g08
03:21:32  57  ,aud_g09
03:21:32  58  ,aud_g10
03:21:32  59  ,aud_g11
03:21:32  60  ,aud_g12
03:21:32  61  ,aud_g13
03:21:32  62  ,aud_g14
03:21:32  63  ,aud_g15
03:21:32  64  ,aud_g16
03:21:32  65  ,aud_g17
03:21:32  66  ,aud_g18
03:21:32  67  ,aud_g19
03:21:32  68  ,aud_g20
03:21:32  69  ,aud_g21
03:21:32  70  ,aud_g22
03:21:32  71  ,aud_g23
03:21:32  72  ,aud_g24
03:21:32  73  ,aud_g25
03:21:32  74  ,aud_g26
03:21:32  75  ,aud_g27
03:21:32  76  ,aud_g28
03:21:32  77  ,aud_g29
03:21:32  78  ,aud_g30
03:21:32  79  ,aud_g31
03:21:32  80  ,aud_g32
03:21:32  81  ,aud_g33
03:21:32  82  ,aud_g34
03:21:32  83  ,aud_g35
03:21:32  84  ,aud_g36
03:21:32  85  ,aud_g37
03:21:32  86  ,aud_g38
03:21:32  87  ,aud_g39
03:21:32  88  ,aud_g40
03:21:32  89  ,aud_g41
03:21:32  90  ,gbp_g00
03:21:32  91  ,gbp_g01
03:21:32  92  ,gbp_g02
03:21:32  93  ,gbp_g03
03:21:32  94  ,gbp_g04
03:21:32  95  ,gbp_g05
03:21:32  96  ,gbp_g06
03:21:32  97  ,gbp_g07
03:21:32  98  ,gbp_g08
03:21:32  99  ,gbp_g09
03:21:32 100  ,gbp_g10
03:21:32 101  ,gbp_g11
03:21:32 102  ,gbp_g12
03:21:32 103  ,gbp_g13
03:21:32 104  ,gbp_g14
03:21:32 105  ,gbp_g15
03:21:32 106  ,gbp_g16
03:21:32 107  ,gbp_g17
03:21:32 108  ,gbp_g18
03:21:32 109  ,gbp_g19
03:21:32 110  ,gbp_g20
03:21:32 111  ,gbp_g21
03:21:32 112  ,gbp_g22
03:21:32 113  ,gbp_g23
03:21:32 114  ,gbp_g24
03:21:32 115  ,gbp_g25
03:21:32 116  ,gbp_g26
03:21:32 117  ,gbp_g27
03:21:32 118  ,gbp_g28
03:21:32 119  ,gbp_g29
03:21:32 120  ,gbp_g30
03:21:32 121  ,gbp_g31
03:21:32 122  ,gbp_g32
03:21:32 123  ,gbp_g33
03:21:32 124  ,gbp_g34
03:21:32 125  ,gbp_g35
03:21:32 126  ,gbp_g36
03:21:32 127  ,gbp_g37
03:21:32 128  ,gbp_g38
03:21:32 129  ,gbp_g39
03:21:32 130  ,gbp_g40
03:21:32 131  ,gbp_g41
03:21:32 132  ,jpy_g00
03:21:32 133  ,jpy_g01
03:21:32 134  ,jpy_g02
03:21:32 135  ,jpy_g03
03:21:32 136  ,jpy_g04
03:21:32 137  ,jpy_g05
03:21:32 138  ,jpy_g06
03:21:32 139  ,jpy_g07
03:21:32 140  ,jpy_g08
03:21:32 141  ,jpy_g09
03:21:32 142  ,jpy_g10
03:21:32 143  ,jpy_g11
03:21:32 144  ,jpy_g12
03:21:32 145  ,jpy_g13
03:21:32 146  ,jpy_g14
03:21:32 147  ,jpy_g15
03:21:32 148  ,jpy_g16
03:21:32 149  ,jpy_g17
03:21:32 150  ,jpy_g18
03:21:32 151  ,jpy_g19
03:21:32 152  ,jpy_g20
03:21:32 153  ,jpy_g21
03:21:32 154  ,jpy_g22
03:21:32 155  ,jpy_g23
03:21:32 156  ,jpy_g24
03:21:32 157  ,jpy_g25
03:21:32 158  ,jpy_g26
03:21:32 159  ,jpy_g27
03:21:32 160  ,jpy_g28
03:21:32 161  ,jpy_g29
03:21:32 162  ,jpy_g30
03:21:32 163  ,jpy_g31
03:21:32 164  ,jpy_g32
03:21:32 165  ,jpy_g33
03:21:32 166  ,jpy_g34
03:21:32 167  ,jpy_g35
03:21:32 168  ,jpy_g36
03:21:32 169  ,jpy_g37
03:21:32 170  ,jpy_g38
03:21:32 171  ,jpy_g39
03:21:32 172  ,jpy_g40
03:21:32 173  ,jpy_g41
03:21:32 174  ,cad_g00
03:21:32 175  ,cad_g01
03:21:32 176  ,cad_g02
03:21:32 177  ,cad_g03
03:21:32 178  ,cad_g04
03:21:32 179  ,cad_g05
03:21:32 180  ,cad_g06
03:21:32 181  ,cad_g07
03:21:32 182  ,cad_g08
03:21:32 183  ,cad_g09
03:21:32 184  ,cad_g10
03:21:32 185  ,cad_g11
03:21:32 186  ,cad_g12
03:21:32 187  ,cad_g13
03:21:32 188  ,cad_g14
03:21:32 189  ,cad_g15
03:21:32 190  ,cad_g16
03:21:32 191  ,cad_g17
03:21:32 192  ,cad_g18
03:21:32 193  ,cad_g19
03:21:32 194  ,cad_g20
03:21:32 195  ,cad_g21
03:21:32 196  ,cad_g22
03:21:32 197  ,cad_g23
03:21:32 198  ,cad_g24
03:21:32 199  ,cad_g25
03:21:32 200  ,cad_g26
03:21:32 201  ,cad_g27
03:21:32 202  ,cad_g28
03:21:32 203  ,cad_g29
03:21:32 204  ,cad_g30
03:21:32 205  ,cad_g31
03:21:32 206  ,cad_g32
03:21:32 207  ,cad_g33
03:21:32 208  ,cad_g34
03:21:32 209  ,cad_g35
03:21:32 210  ,cad_g36
03:21:32 211  ,cad_g37
03:21:32 212  ,cad_g38
03:21:32 213  ,cad_g39
03:21:32 214  ,cad_g40
03:21:32 215  ,cad_g41
03:21:32 216  ,chf_g00
03:21:32 217  ,chf_g01
03:21:32 218  ,chf_g02
03:21:32 219  ,chf_g03
03:21:32 220  ,chf_g04
03:21:32 221  ,chf_g05
03:21:32 222  ,chf_g06
03:21:32 223  ,chf_g07
03:21:32 224  ,chf_g08
03:21:32 225  ,chf_g09
03:21:32 226  ,chf_g10
03:21:32 227  ,chf_g11
03:21:32 228  ,chf_g12
03:21:32 229  ,chf_g13
03:21:32 230  ,chf_g14
03:21:32 231  ,chf_g15
03:21:32 232  ,chf_g16
03:21:32 233  ,chf_g17
03:21:32 234  ,chf_g18
03:21:32 235  ,chf_g19
03:21:32 236  ,chf_g20
03:21:32 237  ,chf_g21
03:21:32 238  ,chf_g22
03:21:32 239  ,chf_g23
03:21:32 240  ,chf_g24
03:21:32 241  ,chf_g25
03:21:32 242  ,chf_g26
03:21:32 243  ,chf_g27
03:21:32 244  ,chf_g28
03:21:32 245  ,chf_g29
03:21:32 246  ,chf_g30
03:21:32 247  ,chf_g31
03:21:32 248  ,chf_g32
03:21:32 249  ,chf_g33
03:21:32 250  ,chf_g34
03:21:32 251  ,chf_g35
03:21:32 252  ,chf_g36
03:21:32 253  ,chf_g37
03:21:32 254  ,chf_g38
03:21:32 255  ,chf_g39
03:21:32 256  ,chf_g40
03:21:32 257  ,chf_g41
03:21:32 258  FROM aud_ms6 m
03:21:32 259  WHERE m.ydate = '&1'||' '||'&2'
03:21:32 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2010-12-29'||' '||'03:00:00'

View created.

Elapsed: 00:00:00.17
03:21:32 SQL> 
03:21:32 SQL> -- rpt
03:21:32 SQL> -- We should see just 1 row:
03:21:32 SQL> 
03:21:32 SQL> SELECT COUNT(prdate) FROM sme
03:21:32   2  
03:21:32 SQL> -- Build the model:
03:21:32 SQL> CREATE OR REPLACE VIEW bme AS
03:21:32   2  SELECT
03:21:32   3  'aud'||m.ydate prdate
03:21:32   4  ,gatt
03:21:32   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
03:21:32   6  ,eur_g00
03:21:32   7  ,eur_g01
03:21:32   8  ,eur_g02
03:21:32   9  ,eur_g03
03:21:32  10  ,eur_g04
03:21:32  11  ,eur_g05
03:21:32  12  ,eur_g06
03:21:32  13  ,eur_g07
03:21:32  14  ,eur_g08
03:21:32  15  ,eur_g09
03:21:32  16  ,eur_g10
03:21:32  17  ,eur_g11
03:21:32  18  ,eur_g12
03:21:32  19  ,eur_g13
03:21:32  20  ,eur_g14
03:21:32  21  ,eur_g15
03:21:32  22  ,eur_g16
03:21:32  23  ,eur_g17
03:21:32  24  ,eur_g18
03:21:32  25  ,eur_g19
03:21:32  26  ,eur_g20
03:21:32  27  ,eur_g21
03:21:32  28  ,eur_g22
03:21:32  29  ,eur_g23
03:21:32  30  ,eur_g24
03:21:32  31  ,eur_g25
03:21:32  32  ,eur_g26
03:21:32  33  ,eur_g27
03:21:32  34  ,eur_g28
03:21:32  35  ,eur_g29
03:21:32  36  ,eur_g30
03:21:32  37  ,eur_g31
03:21:32  38  ,eur_g32
03:21:32  39  ,eur_g33
03:21:32  40  ,eur_g34
03:21:32  41  ,eur_g35
03:21:32  42  ,eur_g36
03:21:32  43  ,eur_g37
03:21:32  44  ,eur_g38
03:21:32  45  ,eur_g39
03:21:32  46  ,eur_g40
03:21:32  47  ,eur_g41
03:21:32  48  ,aud_g00
03:21:32  49  ,aud_g01
03:21:32  50  ,aud_g02
03:21:32  51  ,aud_g03
03:21:32  52  ,aud_g04
03:21:32  53  ,aud_g05
03:21:32  54  ,aud_g06
03:21:32  55  ,aud_g07
03:21:32  56  ,aud_g08
03:21:32  57  ,aud_g09
03:21:32  58  ,aud_g10
03:21:32  59  ,aud_g11
03:21:32  60  ,aud_g12
03:21:32  61  ,aud_g13
03:21:32  62  ,aud_g14
03:21:32  63  ,aud_g15
03:21:32  64  ,aud_g16
03:21:32  65  ,aud_g17
03:21:32  66  ,aud_g18
03:21:32  67  ,aud_g19
03:21:32  68  ,aud_g20
03:21:32  69  ,aud_g21
03:21:32  70  ,aud_g22
03:21:32  71  ,aud_g23
03:21:32  72  ,aud_g24
03:21:32  73  ,aud_g25
03:21:32  74  ,aud_g26
03:21:32  75  ,aud_g27
03:21:32  76  ,aud_g28
03:21:32  77  ,aud_g29
03:21:32  78  ,aud_g30
03:21:32  79  ,aud_g31
03:21:32  80  ,aud_g32
03:21:32  81  ,aud_g33
03:21:32  82  ,aud_g34
03:21:32  83  ,aud_g35
03:21:32  84  ,aud_g36
03:21:32  85  ,aud_g37
03:21:32  86  ,aud_g38
03:21:32  87  ,aud_g39
03:21:32  88  ,aud_g40
03:21:32  89  ,aud_g41
03:21:32  90  ,gbp_g00
03:21:32  91  ,gbp_g01
03:21:32  92  ,gbp_g02
03:21:32  93  ,gbp_g03
03:21:32  94  ,gbp_g04
03:21:32  95  ,gbp_g05
03:21:32  96  ,gbp_g06
03:21:32  97  ,gbp_g07
03:21:32  98  ,gbp_g08
03:21:32  99  ,gbp_g09
03:21:32 100  ,gbp_g10
03:21:32 101  ,gbp_g11
03:21:32 102  ,gbp_g12
03:21:32 103  ,gbp_g13
03:21:32 104  ,gbp_g14
03:21:32 105  ,gbp_g15
03:21:32 106  ,gbp_g16
03:21:32 107  ,gbp_g17
03:21:32 108  ,gbp_g18
03:21:32 109  ,gbp_g19
03:21:32 110  ,gbp_g20
03:21:32 111  ,gbp_g21
03:21:32 112  ,gbp_g22
03:21:32 113  ,gbp_g23
03:21:32 114  ,gbp_g24
03:21:32 115  ,gbp_g25
03:21:32 116  ,gbp_g26
03:21:32 117  ,gbp_g27
03:21:32 118  ,gbp_g28
03:21:32 119  ,gbp_g29
03:21:32 120  ,gbp_g30
03:21:32 121  ,gbp_g31
03:21:32 122  ,gbp_g32
03:21:32 123  ,gbp_g33
03:21:32 124  ,gbp_g34
03:21:32 125  ,gbp_g35
03:21:32 126  ,gbp_g36
03:21:32 127  ,gbp_g37
03:21:32 128  ,gbp_g38
03:21:32 129  ,gbp_g39
03:21:32 130  ,gbp_g40
03:21:32 131  ,gbp_g41
03:21:32 132  ,jpy_g00
03:21:32 133  ,jpy_g01
03:21:32 134  ,jpy_g02
03:21:32 135  ,jpy_g03
03:21:32 136  ,jpy_g04
03:21:32 137  ,jpy_g05
03:21:32 138  ,jpy_g06
03:21:32 139  ,jpy_g07
03:21:32 140  ,jpy_g08
03:21:32 141  ,jpy_g09
03:21:32 142  ,jpy_g10
03:21:32 143  ,jpy_g11
03:21:32 144  ,jpy_g12
03:21:32 145  ,jpy_g13
03:21:32 146  ,jpy_g14
03:21:32 147  ,jpy_g15
03:21:32 148  ,jpy_g16
03:21:32 149  ,jpy_g17
03:21:32 150  ,jpy_g18
03:21:32 151  ,jpy_g19
03:21:32 152  ,jpy_g20
03:21:32 153  ,jpy_g21
03:21:32 154  ,jpy_g22
03:21:32 155  ,jpy_g23
03:21:32 156  ,jpy_g24
03:21:32 157  ,jpy_g25
03:21:32 158  ,jpy_g26
03:21:32 159  ,jpy_g27
03:21:32 160  ,jpy_g28
03:21:32 161  ,jpy_g29
03:21:32 162  ,jpy_g30
03:21:32 163  ,jpy_g31
03:21:32 164  ,jpy_g32
03:21:32 165  ,jpy_g33
03:21:32 166  ,jpy_g34
03:21:32 167  ,jpy_g35
03:21:32 168  ,jpy_g36
03:21:32 169  ,jpy_g37
03:21:32 170  ,jpy_g38
03:21:32 171  ,jpy_g39
03:21:32 172  ,jpy_g40
03:21:32 173  ,jpy_g41
03:21:32 174  ,cad_g00
03:21:32 175  ,cad_g01
03:21:32 176  ,cad_g02
03:21:32 177  ,cad_g03
03:21:32 178  ,cad_g04
03:21:32 179  ,cad_g05
03:21:32 180  ,cad_g06
03:21:32 181  ,cad_g07
03:21:32 182  ,cad_g08
03:21:32 183  ,cad_g09
03:21:32 184  ,cad_g10
03:21:32 185  ,cad_g11
03:21:32 186  ,cad_g12
03:21:32 187  ,cad_g13
03:21:32 188  ,cad_g14
03:21:32 189  ,cad_g15
03:21:32 190  ,cad_g16
03:21:32 191  ,cad_g17
03:21:32 192  ,cad_g18
03:21:32 193  ,cad_g19
03:21:32 194  ,cad_g20
03:21:32 195  ,cad_g21
03:21:32 196  ,cad_g22
03:21:32 197  ,cad_g23
03:21:32 198  ,cad_g24
03:21:32 199  ,cad_g25
03:21:32 200  ,cad_g26
03:21:32 201  ,cad_g27
03:21:32 202  ,cad_g28
03:21:32 203  ,cad_g29
03:21:32 204  ,cad_g30
03:21:32 205  ,cad_g31
03:21:32 206  ,cad_g32
03:21:32 207  ,cad_g33
03:21:32 208  ,cad_g34
03:21:32 209  ,cad_g35
03:21:32 210  ,cad_g36
03:21:32 211  ,cad_g37
03:21:32 212  ,cad_g38
03:21:32 213  ,cad_g39
03:21:32 214  ,cad_g40
03:21:32 215  ,cad_g41
03:21:32 216  ,chf_g00
03:21:32 217  ,chf_g01
03:21:32 218  ,chf_g02
03:21:32 219  ,chf_g03
03:21:32 220  ,chf_g04
03:21:32 221  ,chf_g05
03:21:32 222  ,chf_g06
03:21:32 223  ,chf_g07
03:21:32 224  ,chf_g08
03:21:32 225  ,chf_g09
03:21:32 226  ,chf_g10
03:21:32 227  ,chf_g11
03:21:32 228  ,chf_g12
03:21:32 229  ,chf_g13
03:21:32 230  ,chf_g14
03:21:32 231  ,chf_g15
03:21:32 232  ,chf_g16
03:21:32 233  ,chf_g17
03:21:32 234  ,chf_g18
03:21:32 235  ,chf_g19
03:21:32 236  ,chf_g20
03:21:32 237  ,chf_g21
03:21:32 238  ,chf_g22
03:21:32 239  ,chf_g23
03:21:32 240  ,chf_g24
03:21:32 241  ,chf_g25
03:21:32 242  ,chf_g26
03:21:32 243  ,chf_g27
03:21:32 244  ,chf_g28
03:21:32 245  ,chf_g29
03:21:32 246  ,chf_g30
03:21:32 247  ,chf_g31
03:21:32 248  ,chf_g32
03:21:32 249  ,chf_g33
03:21:32 250  ,chf_g34
03:21:32 251  ,chf_g35
03:21:32 252  ,chf_g36
03:21:32 253  ,chf_g37
03:21:32 254  ,chf_g38
03:21:32 255  ,chf_g39
03:21:32 256  ,chf_g40
03:21:32 257  ,chf_g41
03:21:32 258  FROM aud_ms6 m
03:21:32 259  WHERE gatt IN('nup','up')
03:21:32 260  AND 1+m.ydate < '&1'||' '||'&2'
03:21:32 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2010-12-29'||' '||'03:00:00'

View created.

Elapsed: 00:00:00.17
03:21:32 SQL> 
03:21:32 SQL> -- rpt
03:21:32 SQL> 
03:21:32 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt
03:21:32   2  
03:21:32 SQL> SELECT MAX(prdate) FROM bme
03:21:32   2  
03:21:32 SQL> -- Now build model from bme and score sme
03:21:32 SQL> @score1.sql
03:21:32 SQL> -- score1.sql
03:21:32 SQL> 
03:21:32 SQL> -- Does the 1st SVM score
03:21:32 SQL> 
03:21:32 SQL> -- Fill up svmc_apply_prep
03:21:32 SQL> @score.sql
03:21:32 SQL> --
03:21:32 SQL> -- score.sql
03:21:32 SQL> --
03:21:32 SQL> 
03:21:32 SQL> -- usage: score.sql
03:21:32 SQL> 
03:21:32 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
03:21:32 SQL> 
03:21:32 SQL> DEFINE target	= 'gatt'
03:21:32 SQL> DEFINE model_name = 'forex14'
03:21:32 SQL> DEFINE bldtable	= 'bme'
03:21:32 SQL> DEFINE scoretable = 'sme'
03:21:32 SQL> DEFINE case_id	= 'prdate'
03:21:32 SQL> 
03:21:32 SQL> -- Define a variable to help me exclude some columns from some data mining calls
03:21:32 SQL> DEFINE exclude1 = "'&target','&case_id'"
03:21:32 SQL> 
03:21:32 SQL> -- Builds an SVM model using pl/sql.
03:21:32 SQL> 
03:21:32 SQL> -----------------------------------------------------------------------
03:21:32 SQL> --			    BUILD THE MODEL
03:21:32 SQL> -----------------------------------------------------------------------
03:21:32 SQL> 
03:21:32 SQL> -- Cleanup old build data preparation objects for repeat runs
03:21:32 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.01
03:21:32 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
03:21:32 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.00
03:21:32 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.01
03:21:32 SQL> 
03:21:32 SQL> 
03:21:32 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
03:21:32 SQL> --
03:21:32 SQL> -- DROP	TABLE svmc_settings ;
03:21:32 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
03:21:32 SQL> -- DELETE svmc_settings;
03:21:32 SQL> 
03:21:32 SQL> -- The default classification algorithm is Naive Bayes. So override
03:21:32 SQL> -- this choice to SVM using a settings table.
03:21:32 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
03:21:32 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
03:21:32 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
03:21:32 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
03:21:32 SQL> -- models.
03:21:32 SQL> --
03:21:32 SQL> 
03:21:32 SQL> -- Do this once and then comment it out.
03:21:32 SQL> -- That makes script go faster.
03:21:32 SQL> -- BEGIN
03:21:32 SQL> -- -- Populate settings table
03:21:32 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
03:21:32 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
03:21:32 SQL> --
03:21:32 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
03:21:32 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
03:21:32 SQL> --
03:21:32 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
03:21:32 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
03:21:32 SQL> --   COMMIT;
03:21:32 SQL> -- END;
03:21:32 SQL> -- /
03:21:32 SQL> 
03:21:32 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.01
03:21:32 SQL> 
03:21:32 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
03:21:32   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:21:32   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.10
03:21:32 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
03:21:32   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:21:32   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
03:21:32 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
03:21:32   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:21:32   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
03:21:33 SQL> 
03:21:33 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
03:21:33   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:21:33   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
03:21:33 SQL> 
03:21:33 SQL> --------------------------------
03:21:33 SQL> -- PREPARE BUILD (TRAINING) DATA
03:21:33 SQL> --
03:21:33 SQL> 
03:21:33 SQL> -- 1. Missing Value treatment for all Predictors and
03:21:33 SQL> -- 2. Outlier Treatment and
03:21:33 SQL> -- 3. Normalization are performed below.
03:21:33 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
03:21:33 SQL> --    normalized here.
03:21:33 SQL> 
03:21:33 SQL> BEGIN
03:21:33   2  	-- Perform missing value treatment for all predictors
03:21:33   3  	-- create miss tables
03:21:33   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
03:21:33   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
03:21:33   6  
03:21:33   7  	-- populate miss tables
03:21:33   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
03:21:33   9  	  miss_table_name => 'svmc_miss_num',
03:21:33  10  	  data_table_name => '&bldtable',
03:21:33  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:21:33  12  
03:21:33  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
03:21:33  14  	  miss_table_name => 'svmc_miss_cat',
03:21:33  15  	  data_table_name => '&bldtable',
03:21:33  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:21:33  17  
03:21:33  18  	-- xform input data to replace missing values
03:21:33  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
03:21:33  20  	  miss_table_name => 'svmc_miss_num',
03:21:33  21  	  data_table_name => '&bldtable',
03:21:33  22  	  xform_view_name => 'xformed_build_miss_num');
03:21:33  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
03:21:33  24  	  miss_table_name => 'svmc_miss_cat',
03:21:33  25  	  data_table_name => '&bldtable',
03:21:33  26  	  xform_view_name => 'xformed_build_miss_cat');
03:21:33  27  
03:21:33  28  	-- Perform outlier treatment.
03:21:33  29  	-- create clip table
03:21:33  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
03:21:33  31  
03:21:33  32  	-- populate clip table
03:21:33  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
03:21:33  34  	  clip_table_name => 'svmc_clip',
03:21:33  35  	  data_table_name => '&bldtable',
03:21:33  36  	  tail_frac	  => 0.025,
03:21:33  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:21:33  38  
03:21:33  39  	-- xform input data to winsorized data
03:21:33  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
03:21:33  41  	  clip_table_name => 'svmc_clip',
03:21:33  42  	  data_table_name => '&bldtable',
03:21:33  43  	  xform_view_name => 'svmc_winsor');
03:21:33  44  
03:21:33  45  	-- create normalization table
03:21:33  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
03:21:33  47  
03:21:33  48  	-- populate normalization table based on winsorized data
03:21:33  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
03:21:33  50  	  norm_table_name => 'svmc_norm',
03:21:33  51  	  data_table_name => 'svmc_winsor',
03:21:33  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:21:33  53  
03:21:33  54  	-- normalize the original data
03:21:33  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
03:21:33  56  	  norm_table_name => 'svmc_norm',
03:21:33  57  	  data_table_name => '&bldtable',
03:21:33  58  	  xform_view_name => 'svmc_build_prep');
03:21:33  59  END;
03:21:33  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:18.53
03:21:51 SQL> 
03:21:51 SQL> ---------------------
03:21:51 SQL> -- CREATE A NEW MODEL
03:21:51 SQL> --
03:21:51 SQL> -- Cleanup old model with the same name for repeat runs
03:21:51 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
03:21:51   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:21:51   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.62
03:21:52 SQL> 
03:21:52 SQL> -- Build a new SVM Model
03:21:52 SQL> BEGIN
03:21:52   2  	DBMS_DATA_MINING.CREATE_MODEL(
03:21:52   3  	  model_name	      => '&model_name',
03:21:52   4  	  mining_function     => dbms_data_mining.classification,
03:21:52   5  	  data_table_name     => 'svmc_build_prep',
03:21:52   6  	  case_id_column_name => '&case_id',
03:21:52   7  	  target_column_name  => '&target',
03:21:52   8  	  settings_table_name => 'svmc_settings');
03:21:52   9  END;
03:21:52  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:32.05
03:22:24 SQL> 
03:22:24 SQL> -----------------------------------------------------------------------
03:22:24 SQL> --			       APPLY/score THE MODEL
03:22:24 SQL> -----------------------------------------------------------------------
03:22:24 SQL> 
03:22:24 SQL> -- Cleanup old scoring data preparation objects for repeat runs
03:22:24 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
03:22:24   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:22:24   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
03:22:24 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
03:22:24   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:22:24   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
03:22:24 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
03:22:24   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:22:24   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
03:22:24 SQL> -----------------------
03:22:24 SQL> -- PREPARE SCORING DATA
03:22:24 SQL> --
03:22:24 SQL> -- If the data for model creation has been prepared, then the data
03:22:24 SQL> -- to be scored using the model must be prepared in the same manner
03:22:24 SQL> -- in order to obtain meaningful results.
03:22:24 SQL> --
03:22:24 SQL> -- 1. Missing Value treatment for all Predictors and
03:22:24 SQL> -- 2. Normalization
03:22:24 SQL> -- No outlier treatment will be performed during test and apply. The
03:22:24 SQL> -- normalization step is sufficient, since the normalization parameters
03:22:24 SQL> -- already capture the effects of outlier treatment done with build data.
03:22:24 SQL> --
03:22:24 SQL> BEGIN
03:22:24   2  	-- Xform Test data to replace missing values
03:22:24   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
03:22:24   4  	  miss_table_name => 'svmc_miss_num',
03:22:24   5  	  data_table_name => '&scoretable',
03:22:24   6  	  xform_view_name => 'xformed_apply_miss_num');
03:22:24   7  
03:22:24   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
03:22:24   9  	  miss_table_name => 'svmc_miss_cat',
03:22:24  10  	  data_table_name => '&scoretable',
03:22:24  11  	  xform_view_name => 'xformed_apply_miss_cat');
03:22:24  12  
03:22:24  13  	-- Normalize the data to be scored
03:22:24  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
03:22:24  15  	  norm_table_name => 'svmc_norm',
03:22:24  16  	  data_table_name => '&scoretable',
03:22:24  17  	  xform_view_name => 'svmc_apply_prep');
03:22:24  18  END;
03:22:24  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.23
03:22:25 SQL> 
03:22:25 SQL> -- Use same model_name used in score.sql
03:22:25 SQL> DEFINE model_name = 'forex14'
03:22:25 SQL> 
03:22:25 SQL> -- CREATE TABLE fxscores6 (prdate VARCHAR2(30),score NUMBER,rundate DATE,pair VARCHAR2(8),ydate DATE);
03:22:25 SQL> 
03:22:25 SQL> DELETE fxscores6 WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.03
03:22:25 SQL> 
03:22:25 SQL> INSERT INTO fxscores6 (prdate,score,rundate,pair,ydate)
03:22:25   2  SELECT
03:22:25   3  prdate
03:22:25   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
03:22:25   5  ,sysdate
03:22:25   6  ,SUBSTR(prdate,1,3)pair
03:22:25   7  ,SUBSTR(prdate,4,19)ydate
03:22:25   8  FROM svmc_apply_prep
03:22:25   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.28
03:22:26 SQL> @aud_score1day.sql  2010-12-29 03:05:00
03:22:26 SQL> --
03:22:26 SQL> -- aud_score1day.sql
03:22:26 SQL> --
03:22:26 SQL> 
03:22:26 SQL> CREATE OR REPLACE VIEW sme AS
03:22:26   2  SELECT
03:22:26   3  'aud'||m.ydate prdate
03:22:26   4  ,NULL gatt
03:22:26   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
03:22:26   6  ,eur_g00
03:22:26   7  ,eur_g01
03:22:26   8  ,eur_g02
03:22:26   9  ,eur_g03
03:22:26  10  ,eur_g04
03:22:26  11  ,eur_g05
03:22:26  12  ,eur_g06
03:22:26  13  ,eur_g07
03:22:26  14  ,eur_g08
03:22:26  15  ,eur_g09
03:22:26  16  ,eur_g10
03:22:26  17  ,eur_g11
03:22:26  18  ,eur_g12
03:22:26  19  ,eur_g13
03:22:26  20  ,eur_g14
03:22:26  21  ,eur_g15
03:22:26  22  ,eur_g16
03:22:26  23  ,eur_g17
03:22:26  24  ,eur_g18
03:22:26  25  ,eur_g19
03:22:26  26  ,eur_g20
03:22:26  27  ,eur_g21
03:22:26  28  ,eur_g22
03:22:26  29  ,eur_g23
03:22:26  30  ,eur_g24
03:22:26  31  ,eur_g25
03:22:26  32  ,eur_g26
03:22:26  33  ,eur_g27
03:22:26  34  ,eur_g28
03:22:26  35  ,eur_g29
03:22:26  36  ,eur_g30
03:22:26  37  ,eur_g31
03:22:26  38  ,eur_g32
03:22:26  39  ,eur_g33
03:22:26  40  ,eur_g34
03:22:26  41  ,eur_g35
03:22:26  42  ,eur_g36
03:22:26  43  ,eur_g37
03:22:26  44  ,eur_g38
03:22:26  45  ,eur_g39
03:22:26  46  ,eur_g40
03:22:26  47  ,eur_g41
03:22:26  48  ,aud_g00
03:22:26  49  ,aud_g01
03:22:26  50  ,aud_g02
03:22:26  51  ,aud_g03
03:22:26  52  ,aud_g04
03:22:26  53  ,aud_g05
03:22:26  54  ,aud_g06
03:22:26  55  ,aud_g07
03:22:26  56  ,aud_g08
03:22:26  57  ,aud_g09
03:22:26  58  ,aud_g10
03:22:26  59  ,aud_g11
03:22:26  60  ,aud_g12
03:22:26  61  ,aud_g13
03:22:26  62  ,aud_g14
03:22:26  63  ,aud_g15
03:22:26  64  ,aud_g16
03:22:26  65  ,aud_g17
03:22:26  66  ,aud_g18
03:22:26  67  ,aud_g19
03:22:26  68  ,aud_g20
03:22:26  69  ,aud_g21
03:22:26  70  ,aud_g22
03:22:26  71  ,aud_g23
03:22:26  72  ,aud_g24
03:22:26  73  ,aud_g25
03:22:26  74  ,aud_g26
03:22:26  75  ,aud_g27
03:22:26  76  ,aud_g28
03:22:26  77  ,aud_g29
03:22:26  78  ,aud_g30
03:22:26  79  ,aud_g31
03:22:26  80  ,aud_g32
03:22:26  81  ,aud_g33
03:22:26  82  ,aud_g34
03:22:26  83  ,aud_g35
03:22:26  84  ,aud_g36
03:22:26  85  ,aud_g37
03:22:26  86  ,aud_g38
03:22:26  87  ,aud_g39
03:22:26  88  ,aud_g40
03:22:26  89  ,aud_g41
03:22:26  90  ,gbp_g00
03:22:26  91  ,gbp_g01
03:22:26  92  ,gbp_g02
03:22:26  93  ,gbp_g03
03:22:26  94  ,gbp_g04
03:22:26  95  ,gbp_g05
03:22:26  96  ,gbp_g06
03:22:26  97  ,gbp_g07
03:22:26  98  ,gbp_g08
03:22:26  99  ,gbp_g09
03:22:26 100  ,gbp_g10
03:22:26 101  ,gbp_g11
03:22:26 102  ,gbp_g12
03:22:26 103  ,gbp_g13
03:22:26 104  ,gbp_g14
03:22:26 105  ,gbp_g15
03:22:26 106  ,gbp_g16
03:22:26 107  ,gbp_g17
03:22:26 108  ,gbp_g18
03:22:26 109  ,gbp_g19
03:22:26 110  ,gbp_g20
03:22:26 111  ,gbp_g21
03:22:26 112  ,gbp_g22
03:22:26 113  ,gbp_g23
03:22:26 114  ,gbp_g24
03:22:26 115  ,gbp_g25
03:22:26 116  ,gbp_g26
03:22:26 117  ,gbp_g27
03:22:26 118  ,gbp_g28
03:22:26 119  ,gbp_g29
03:22:26 120  ,gbp_g30
03:22:26 121  ,gbp_g31
03:22:26 122  ,gbp_g32
03:22:26 123  ,gbp_g33
03:22:26 124  ,gbp_g34
03:22:26 125  ,gbp_g35
03:22:26 126  ,gbp_g36
03:22:26 127  ,gbp_g37
03:22:26 128  ,gbp_g38
03:22:26 129  ,gbp_g39
03:22:26 130  ,gbp_g40
03:22:26 131  ,gbp_g41
03:22:26 132  ,jpy_g00
03:22:26 133  ,jpy_g01
03:22:26 134  ,jpy_g02
03:22:26 135  ,jpy_g03
03:22:26 136  ,jpy_g04
03:22:26 137  ,jpy_g05
03:22:26 138  ,jpy_g06
03:22:26 139  ,jpy_g07
03:22:26 140  ,jpy_g08
03:22:26 141  ,jpy_g09
03:22:26 142  ,jpy_g10
03:22:26 143  ,jpy_g11
03:22:26 144  ,jpy_g12
03:22:26 145  ,jpy_g13
03:22:26 146  ,jpy_g14
03:22:26 147  ,jpy_g15
03:22:26 148  ,jpy_g16
03:22:26 149  ,jpy_g17
03:22:26 150  ,jpy_g18
03:22:26 151  ,jpy_g19
03:22:26 152  ,jpy_g20
03:22:26 153  ,jpy_g21
03:22:26 154  ,jpy_g22
03:22:26 155  ,jpy_g23
03:22:26 156  ,jpy_g24
03:22:26 157  ,jpy_g25
03:22:26 158  ,jpy_g26
03:22:26 159  ,jpy_g27
03:22:26 160  ,jpy_g28
03:22:26 161  ,jpy_g29
03:22:26 162  ,jpy_g30
03:22:26 163  ,jpy_g31
03:22:26 164  ,jpy_g32
03:22:26 165  ,jpy_g33
03:22:26 166  ,jpy_g34
03:22:26 167  ,jpy_g35
03:22:26 168  ,jpy_g36
03:22:26 169  ,jpy_g37
03:22:26 170  ,jpy_g38
03:22:26 171  ,jpy_g39
03:22:26 172  ,jpy_g40
03:22:26 173  ,jpy_g41
03:22:26 174  ,cad_g00
03:22:26 175  ,cad_g01
03:22:26 176  ,cad_g02
03:22:26 177  ,cad_g03
03:22:26 178  ,cad_g04
03:22:26 179  ,cad_g05
03:22:26 180  ,cad_g06
03:22:26 181  ,cad_g07
03:22:26 182  ,cad_g08
03:22:26 183  ,cad_g09
03:22:26 184  ,cad_g10
03:22:26 185  ,cad_g11
03:22:26 186  ,cad_g12
03:22:26 187  ,cad_g13
03:22:26 188  ,cad_g14
03:22:26 189  ,cad_g15
03:22:26 190  ,cad_g16
03:22:26 191  ,cad_g17
03:22:26 192  ,cad_g18
03:22:26 193  ,cad_g19
03:22:26 194  ,cad_g20
03:22:26 195  ,cad_g21
03:22:26 196  ,cad_g22
03:22:26 197  ,cad_g23
03:22:26 198  ,cad_g24
03:22:26 199  ,cad_g25
03:22:26 200  ,cad_g26
03:22:26 201  ,cad_g27
03:22:26 202  ,cad_g28
03:22:26 203  ,cad_g29
03:22:26 204  ,cad_g30
03:22:26 205  ,cad_g31
03:22:26 206  ,cad_g32
03:22:26 207  ,cad_g33
03:22:26 208  ,cad_g34
03:22:26 209  ,cad_g35
03:22:26 210  ,cad_g36
03:22:26 211  ,cad_g37
03:22:26 212  ,cad_g38
03:22:26 213  ,cad_g39
03:22:26 214  ,cad_g40
03:22:26 215  ,cad_g41
03:22:26 216  ,chf_g00
03:22:26 217  ,chf_g01
03:22:26 218  ,chf_g02
03:22:26 219  ,chf_g03
03:22:26 220  ,chf_g04
03:22:26 221  ,chf_g05
03:22:26 222  ,chf_g06
03:22:26 223  ,chf_g07
03:22:26 224  ,chf_g08
03:22:26 225  ,chf_g09
03:22:26 226  ,chf_g10
03:22:26 227  ,chf_g11
03:22:26 228  ,chf_g12
03:22:26 229  ,chf_g13
03:22:26 230  ,chf_g14
03:22:26 231  ,chf_g15
03:22:26 232  ,chf_g16
03:22:26 233  ,chf_g17
03:22:26 234  ,chf_g18
03:22:26 235  ,chf_g19
03:22:26 236  ,chf_g20
03:22:26 237  ,chf_g21
03:22:26 238  ,chf_g22
03:22:26 239  ,chf_g23
03:22:26 240  ,chf_g24
03:22:26 241  ,chf_g25
03:22:26 242  ,chf_g26
03:22:26 243  ,chf_g27
03:22:26 244  ,chf_g28
03:22:26 245  ,chf_g29
03:22:26 246  ,chf_g30
03:22:26 247  ,chf_g31
03:22:26 248  ,chf_g32
03:22:26 249  ,chf_g33
03:22:26 250  ,chf_g34
03:22:26 251  ,chf_g35
03:22:26 252  ,chf_g36
03:22:26 253  ,chf_g37
03:22:26 254  ,chf_g38
03:22:26 255  ,chf_g39
03:22:26 256  ,chf_g40
03:22:26 257  ,chf_g41
03:22:26 258  FROM aud_ms6 m
03:22:26 259  WHERE m.ydate = '&1'||' '||'&2'
03:22:26 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2010-12-29'||' '||'03:05:00'

View created.

Elapsed: 00:00:00.13
03:22:26 SQL> 
03:22:26 SQL> -- rpt
03:22:26 SQL> -- We should see just 1 row:
03:22:26 SQL> 
03:22:26 SQL> SELECT COUNT(prdate) FROM sme
03:22:26   2  
03:22:26 SQL> -- Build the model:
03:22:26 SQL> CREATE OR REPLACE VIEW bme AS
03:22:26   2  SELECT
03:22:26   3  'aud'||m.ydate prdate
03:22:26   4  ,gatt
03:22:26   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
03:22:26   6  ,eur_g00
03:22:26   7  ,eur_g01
03:22:26   8  ,eur_g02
03:22:26   9  ,eur_g03
03:22:26  10  ,eur_g04
03:22:26  11  ,eur_g05
03:22:26  12  ,eur_g06
03:22:26  13  ,eur_g07
03:22:26  14  ,eur_g08
03:22:26  15  ,eur_g09
03:22:26  16  ,eur_g10
03:22:26  17  ,eur_g11
03:22:26  18  ,eur_g12
03:22:26  19  ,eur_g13
03:22:26  20  ,eur_g14
03:22:26  21  ,eur_g15
03:22:26  22  ,eur_g16
03:22:26  23  ,eur_g17
03:22:26  24  ,eur_g18
03:22:26  25  ,eur_g19
03:22:26  26  ,eur_g20
03:22:26  27  ,eur_g21
03:22:26  28  ,eur_g22
03:22:26  29  ,eur_g23
03:22:26  30  ,eur_g24
03:22:26  31  ,eur_g25
03:22:26  32  ,eur_g26
03:22:26  33  ,eur_g27
03:22:26  34  ,eur_g28
03:22:26  35  ,eur_g29
03:22:26  36  ,eur_g30
03:22:26  37  ,eur_g31
03:22:26  38  ,eur_g32
03:22:26  39  ,eur_g33
03:22:26  40  ,eur_g34
03:22:26  41  ,eur_g35
03:22:26  42  ,eur_g36
03:22:26  43  ,eur_g37
03:22:26  44  ,eur_g38
03:22:26  45  ,eur_g39
03:22:26  46  ,eur_g40
03:22:26  47  ,eur_g41
03:22:26  48  ,aud_g00
03:22:26  49  ,aud_g01
03:22:26  50  ,aud_g02
03:22:26  51  ,aud_g03
03:22:26  52  ,aud_g04
03:22:26  53  ,aud_g05
03:22:26  54  ,aud_g06
03:22:26  55  ,aud_g07
03:22:26  56  ,aud_g08
03:22:26  57  ,aud_g09
03:22:26  58  ,aud_g10
03:22:26  59  ,aud_g11
03:22:26  60  ,aud_g12
03:22:26  61  ,aud_g13
03:22:26  62  ,aud_g14
03:22:26  63  ,aud_g15
03:22:26  64  ,aud_g16
03:22:26  65  ,aud_g17
03:22:26  66  ,aud_g18
03:22:26  67  ,aud_g19
03:22:26  68  ,aud_g20
03:22:26  69  ,aud_g21
03:22:26  70  ,aud_g22
03:22:26  71  ,aud_g23
03:22:26  72  ,aud_g24
03:22:26  73  ,aud_g25
03:22:26  74  ,aud_g26
03:22:26  75  ,aud_g27
03:22:26  76  ,aud_g28
03:22:26  77  ,aud_g29
03:22:26  78  ,aud_g30
03:22:26  79  ,aud_g31
03:22:26  80  ,aud_g32
03:22:26  81  ,aud_g33
03:22:26  82  ,aud_g34
03:22:26  83  ,aud_g35
03:22:26  84  ,aud_g36
03:22:26  85  ,aud_g37
03:22:26  86  ,aud_g38
03:22:26  87  ,aud_g39
03:22:26  88  ,aud_g40
03:22:26  89  ,aud_g41
03:22:26  90  ,gbp_g00
03:22:26  91  ,gbp_g01
03:22:26  92  ,gbp_g02
03:22:26  93  ,gbp_g03
03:22:26  94  ,gbp_g04
03:22:26  95  ,gbp_g05
03:22:26  96  ,gbp_g06
03:22:26  97  ,gbp_g07
03:22:26  98  ,gbp_g08
03:22:26  99  ,gbp_g09
03:22:26 100  ,gbp_g10
03:22:26 101  ,gbp_g11
03:22:26 102  ,gbp_g12
03:22:26 103  ,gbp_g13
03:22:26 104  ,gbp_g14
03:22:26 105  ,gbp_g15
03:22:26 106  ,gbp_g16
03:22:26 107  ,gbp_g17
03:22:26 108  ,gbp_g18
03:22:26 109  ,gbp_g19
03:22:26 110  ,gbp_g20
03:22:26 111  ,gbp_g21
03:22:26 112  ,gbp_g22
03:22:26 113  ,gbp_g23
03:22:26 114  ,gbp_g24
03:22:26 115  ,gbp_g25
03:22:26 116  ,gbp_g26
03:22:26 117  ,gbp_g27
03:22:26 118  ,gbp_g28
03:22:26 119  ,gbp_g29
03:22:26 120  ,gbp_g30
03:22:26 121  ,gbp_g31
03:22:26 122  ,gbp_g32
03:22:26 123  ,gbp_g33
03:22:26 124  ,gbp_g34
03:22:26 125  ,gbp_g35
03:22:26 126  ,gbp_g36
03:22:26 127  ,gbp_g37
03:22:26 128  ,gbp_g38
03:22:26 129  ,gbp_g39
03:22:26 130  ,gbp_g40
03:22:26 131  ,gbp_g41
03:22:26 132  ,jpy_g00
03:22:26 133  ,jpy_g01
03:22:26 134  ,jpy_g02
03:22:26 135  ,jpy_g03
03:22:26 136  ,jpy_g04
03:22:26 137  ,jpy_g05
03:22:26 138  ,jpy_g06
03:22:26 139  ,jpy_g07
03:22:26 140  ,jpy_g08
03:22:26 141  ,jpy_g09
03:22:26 142  ,jpy_g10
03:22:26 143  ,jpy_g11
03:22:26 144  ,jpy_g12
03:22:26 145  ,jpy_g13
03:22:26 146  ,jpy_g14
03:22:26 147  ,jpy_g15
03:22:26 148  ,jpy_g16
03:22:26 149  ,jpy_g17
03:22:26 150  ,jpy_g18
03:22:26 151  ,jpy_g19
03:22:26 152  ,jpy_g20
03:22:26 153  ,jpy_g21
03:22:26 154  ,jpy_g22
03:22:26 155  ,jpy_g23
03:22:26 156  ,jpy_g24
03:22:26 157  ,jpy_g25
03:22:26 158  ,jpy_g26
03:22:26 159  ,jpy_g27
03:22:26 160  ,jpy_g28
03:22:26 161  ,jpy_g29
03:22:26 162  ,jpy_g30
03:22:26 163  ,jpy_g31
03:22:26 164  ,jpy_g32
03:22:26 165  ,jpy_g33
03:22:26 166  ,jpy_g34
03:22:26 167  ,jpy_g35
03:22:26 168  ,jpy_g36
03:22:26 169  ,jpy_g37
03:22:26 170  ,jpy_g38
03:22:26 171  ,jpy_g39
03:22:26 172  ,jpy_g40
03:22:26 173  ,jpy_g41
03:22:26 174  ,cad_g00
03:22:26 175  ,cad_g01
03:22:26 176  ,cad_g02
03:22:26 177  ,cad_g03
03:22:26 178  ,cad_g04
03:22:26 179  ,cad_g05
03:22:26 180  ,cad_g06
03:22:26 181  ,cad_g07
03:22:26 182  ,cad_g08
03:22:26 183  ,cad_g09
03:22:26 184  ,cad_g10
03:22:26 185  ,cad_g11
03:22:26 186  ,cad_g12
03:22:26 187  ,cad_g13
03:22:26 188  ,cad_g14
03:22:26 189  ,cad_g15
03:22:26 190  ,cad_g16
03:22:26 191  ,cad_g17
03:22:26 192  ,cad_g18
03:22:26 193  ,cad_g19
03:22:26 194  ,cad_g20
03:22:26 195  ,cad_g21
03:22:26 196  ,cad_g22
03:22:26 197  ,cad_g23
03:22:26 198  ,cad_g24
03:22:26 199  ,cad_g25
03:22:26 200  ,cad_g26
03:22:26 201  ,cad_g27
03:22:26 202  ,cad_g28
03:22:26 203  ,cad_g29
03:22:26 204  ,cad_g30
03:22:26 205  ,cad_g31
03:22:26 206  ,cad_g32
03:22:26 207  ,cad_g33
03:22:26 208  ,cad_g34
03:22:26 209  ,cad_g35
03:22:26 210  ,cad_g36
03:22:26 211  ,cad_g37
03:22:26 212  ,cad_g38
03:22:26 213  ,cad_g39
03:22:26 214  ,cad_g40
03:22:26 215  ,cad_g41
03:22:26 216  ,chf_g00
03:22:26 217  ,chf_g01
03:22:26 218  ,chf_g02
03:22:26 219  ,chf_g03
03:22:26 220  ,chf_g04
03:22:26 221  ,chf_g05
03:22:26 222  ,chf_g06
03:22:26 223  ,chf_g07
03:22:26 224  ,chf_g08
03:22:26 225  ,chf_g09
03:22:26 226  ,chf_g10
03:22:26 227  ,chf_g11
03:22:26 228  ,chf_g12
03:22:26 229  ,chf_g13
03:22:26 230  ,chf_g14
03:22:26 231  ,chf_g15
03:22:26 232  ,chf_g16
03:22:26 233  ,chf_g17
03:22:26 234  ,chf_g18
03:22:26 235  ,chf_g19
03:22:26 236  ,chf_g20
03:22:26 237  ,chf_g21
03:22:26 238  ,chf_g22
03:22:26 239  ,chf_g23
03:22:26 240  ,chf_g24
03:22:26 241  ,chf_g25
03:22:26 242  ,chf_g26
03:22:26 243  ,chf_g27
03:22:26 244  ,chf_g28
03:22:26 245  ,chf_g29
03:22:26 246  ,chf_g30
03:22:26 247  ,chf_g31
03:22:26 248  ,chf_g32
03:22:26 249  ,chf_g33
03:22:26 250  ,chf_g34
03:22:26 251  ,chf_g35
03:22:26 252  ,chf_g36
03:22:26 253  ,chf_g37
03:22:26 254  ,chf_g38
03:22:26 255  ,chf_g39
03:22:26 256  ,chf_g40
03:22:26 257  ,chf_g41
03:22:26 258  FROM aud_ms6 m
03:22:26 259  WHERE gatt IN('nup','up')
03:22:26 260  AND 1+m.ydate < '&1'||' '||'&2'
03:22:26 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2010-12-29'||' '||'03:05:00'

View created.

Elapsed: 00:00:00.12
03:22:26 SQL> 
03:22:26 SQL> -- rpt
03:22:26 SQL> 
03:22:26 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt
03:22:26   2  
03:22:26 SQL> SELECT MAX(prdate) FROM bme
03:22:26   2  
03:22:26 SQL> -- Now build model from bme and score sme
03:22:26 SQL> @score1.sql
03:22:26 SQL> -- score1.sql
03:22:26 SQL> 
03:22:26 SQL> -- Does the 1st SVM score
03:22:26 SQL> 
03:22:26 SQL> -- Fill up svmc_apply_prep
03:22:26 SQL> @score.sql
03:22:26 SQL> --
03:22:26 SQL> -- score.sql
03:22:26 SQL> --
03:22:26 SQL> 
03:22:26 SQL> -- usage: score.sql
03:22:26 SQL> 
03:22:26 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
03:22:26 SQL> 
03:22:26 SQL> DEFINE target	= 'gatt'
03:22:26 SQL> DEFINE model_name = 'forex14'
03:22:26 SQL> DEFINE bldtable	= 'bme'
03:22:26 SQL> DEFINE scoretable = 'sme'
03:22:26 SQL> DEFINE case_id	= 'prdate'
03:22:26 SQL> 
03:22:26 SQL> -- Define a variable to help me exclude some columns from some data mining calls
03:22:26 SQL> DEFINE exclude1 = "'&target','&case_id'"
03:22:26 SQL> 
03:22:26 SQL> -- Builds an SVM model using pl/sql.
03:22:26 SQL> 
03:22:26 SQL> -----------------------------------------------------------------------
03:22:26 SQL> --			    BUILD THE MODEL
03:22:26 SQL> -----------------------------------------------------------------------
03:22:26 SQL> 
03:22:26 SQL> -- Cleanup old build data preparation objects for repeat runs
03:22:26 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.00
03:22:26 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
03:22:26 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.01
03:22:26 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.00
03:22:26 SQL> 
03:22:26 SQL> 
03:22:26 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
03:22:26 SQL> --
03:22:26 SQL> -- DROP	TABLE svmc_settings ;
03:22:26 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
03:22:26 SQL> -- DELETE svmc_settings;
03:22:26 SQL> 
03:22:26 SQL> -- The default classification algorithm is Naive Bayes. So override
03:22:26 SQL> -- this choice to SVM using a settings table.
03:22:26 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
03:22:26 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
03:22:26 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
03:22:26 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
03:22:26 SQL> -- models.
03:22:26 SQL> --
03:22:26 SQL> 
03:22:26 SQL> -- Do this once and then comment it out.
03:22:26 SQL> -- That makes script go faster.
03:22:26 SQL> -- BEGIN
03:22:26 SQL> -- -- Populate settings table
03:22:26 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
03:22:26 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
03:22:26 SQL> --
03:22:26 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
03:22:26 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
03:22:26 SQL> --
03:22:26 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
03:22:26 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
03:22:26 SQL> --   COMMIT;
03:22:26 SQL> -- END;
03:22:26 SQL> -- /
03:22:26 SQL> 
03:22:26 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.01
03:22:26 SQL> 
03:22:26 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
03:22:26   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:22:26   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.09
03:22:26 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
03:22:26   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:22:26   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
03:22:26 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
03:22:26   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:22:26   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
03:22:26 SQL> 
03:22:26 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
03:22:26   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:22:26   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
03:22:26 SQL> 
03:22:26 SQL> --------------------------------
03:22:26 SQL> -- PREPARE BUILD (TRAINING) DATA
03:22:26 SQL> --
03:22:26 SQL> 
03:22:26 SQL> -- 1. Missing Value treatment for all Predictors and
03:22:26 SQL> -- 2. Outlier Treatment and
03:22:26 SQL> -- 3. Normalization are performed below.
03:22:26 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
03:22:26 SQL> --    normalized here.
03:22:26 SQL> 
03:22:26 SQL> BEGIN
03:22:26   2  	-- Perform missing value treatment for all predictors
03:22:26   3  	-- create miss tables
03:22:26   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
03:22:26   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
03:22:26   6  
03:22:26   7  	-- populate miss tables
03:22:26   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
03:22:26   9  	  miss_table_name => 'svmc_miss_num',
03:22:26  10  	  data_table_name => '&bldtable',
03:22:26  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:22:26  12  
03:22:26  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
03:22:26  14  	  miss_table_name => 'svmc_miss_cat',
03:22:26  15  	  data_table_name => '&bldtable',
03:22:26  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:22:26  17  
03:22:26  18  	-- xform input data to replace missing values
03:22:26  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
03:22:26  20  	  miss_table_name => 'svmc_miss_num',
03:22:26  21  	  data_table_name => '&bldtable',
03:22:26  22  	  xform_view_name => 'xformed_build_miss_num');
03:22:26  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
03:22:26  24  	  miss_table_name => 'svmc_miss_cat',
03:22:26  25  	  data_table_name => '&bldtable',
03:22:26  26  	  xform_view_name => 'xformed_build_miss_cat');
03:22:26  27  
03:22:26  28  	-- Perform outlier treatment.
03:22:26  29  	-- create clip table
03:22:26  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
03:22:26  31  
03:22:26  32  	-- populate clip table
03:22:26  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
03:22:26  34  	  clip_table_name => 'svmc_clip',
03:22:26  35  	  data_table_name => '&bldtable',
03:22:26  36  	  tail_frac	  => 0.025,
03:22:26  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:22:26  38  
03:22:26  39  	-- xform input data to winsorized data
03:22:26  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
03:22:26  41  	  clip_table_name => 'svmc_clip',
03:22:26  42  	  data_table_name => '&bldtable',
03:22:26  43  	  xform_view_name => 'svmc_winsor');
03:22:26  44  
03:22:26  45  	-- create normalization table
03:22:26  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
03:22:26  47  
03:22:26  48  	-- populate normalization table based on winsorized data
03:22:26  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
03:22:26  50  	  norm_table_name => 'svmc_norm',
03:22:26  51  	  data_table_name => 'svmc_winsor',
03:22:26  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:22:26  53  
03:22:26  54  	-- normalize the original data
03:22:26  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
03:22:26  56  	  norm_table_name => 'svmc_norm',
03:22:26  57  	  data_table_name => '&bldtable',
03:22:26  58  	  xform_view_name => 'svmc_build_prep');
03:22:26  59  END;
03:22:26  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:18.00
03:22:44 SQL> 
03:22:44 SQL> ---------------------
03:22:44 SQL> -- CREATE A NEW MODEL
03:22:44 SQL> --
03:22:44 SQL> -- Cleanup old model with the same name for repeat runs
03:22:44 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
03:22:44   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:22:44   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.26
03:22:45 SQL> 
03:22:45 SQL> -- Build a new SVM Model
03:22:45 SQL> BEGIN
03:22:45   2  	DBMS_DATA_MINING.CREATE_MODEL(
03:22:45   3  	  model_name	      => '&model_name',
03:22:45   4  	  mining_function     => dbms_data_mining.classification,
03:22:45   5  	  data_table_name     => 'svmc_build_prep',
03:22:45   6  	  case_id_column_name => '&case_id',
03:22:45   7  	  target_column_name  => '&target',
03:22:45   8  	  settings_table_name => 'svmc_settings');
03:22:45   9  END;
03:22:45  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:27.12
03:23:13 SQL> 
03:23:13 SQL> -----------------------------------------------------------------------
03:23:13 SQL> --			       APPLY/score THE MODEL
03:23:13 SQL> -----------------------------------------------------------------------
03:23:13 SQL> 
03:23:13 SQL> -- Cleanup old scoring data preparation objects for repeat runs
03:23:13 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
03:23:13   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:23:13   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
03:23:13 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
03:23:13   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:23:13   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
03:23:13 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
03:23:13   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:23:13   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
03:23:13 SQL> -----------------------
03:23:13 SQL> -- PREPARE SCORING DATA
03:23:13 SQL> --
03:23:13 SQL> -- If the data for model creation has been prepared, then the data
03:23:13 SQL> -- to be scored using the model must be prepared in the same manner
03:23:13 SQL> -- in order to obtain meaningful results.
03:23:13 SQL> --
03:23:13 SQL> -- 1. Missing Value treatment for all Predictors and
03:23:13 SQL> -- 2. Normalization
03:23:13 SQL> -- No outlier treatment will be performed during test and apply. The
03:23:13 SQL> -- normalization step is sufficient, since the normalization parameters
03:23:13 SQL> -- already capture the effects of outlier treatment done with build data.
03:23:13 SQL> --
03:23:13 SQL> BEGIN
03:23:13   2  	-- Xform Test data to replace missing values
03:23:13   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
03:23:13   4  	  miss_table_name => 'svmc_miss_num',
03:23:13   5  	  data_table_name => '&scoretable',
03:23:13   6  	  xform_view_name => 'xformed_apply_miss_num');
03:23:13   7  
03:23:13   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
03:23:13   9  	  miss_table_name => 'svmc_miss_cat',
03:23:13  10  	  data_table_name => '&scoretable',
03:23:13  11  	  xform_view_name => 'xformed_apply_miss_cat');
03:23:13  12  
03:23:13  13  	-- Normalize the data to be scored
03:23:13  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
03:23:13  15  	  norm_table_name => 'svmc_norm',
03:23:13  16  	  data_table_name => '&scoretable',
03:23:13  17  	  xform_view_name => 'svmc_apply_prep');
03:23:13  18  END;
03:23:13  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.23
03:23:14 SQL> 
03:23:14 SQL> -- Use same model_name used in score.sql
03:23:14 SQL> DEFINE model_name = 'forex14'
03:23:14 SQL> 
03:23:14 SQL> -- CREATE TABLE fxscores6 (prdate VARCHAR2(30),score NUMBER,rundate DATE,pair VARCHAR2(8),ydate DATE);
03:23:14 SQL> 
03:23:14 SQL> DELETE fxscores6 WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.03
03:23:14 SQL> 
03:23:14 SQL> INSERT INTO fxscores6 (prdate,score,rundate,pair,ydate)
03:23:14   2  SELECT
03:23:14   3  prdate
03:23:14   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
03:23:14   5  ,sysdate
03:23:14   6  ,SUBSTR(prdate,1,3)pair
03:23:14   7  ,SUBSTR(prdate,4,19)ydate
03:23:14   8  FROM svmc_apply_prep
03:23:14   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.17
03:23:14 SQL> @aud_score1day.sql  2010-12-29 03:10:00
03:23:14 SQL> --
03:23:14 SQL> -- aud_score1day.sql
03:23:14 SQL> --
03:23:14 SQL> 
03:23:14 SQL> CREATE OR REPLACE VIEW sme AS
03:23:14   2  SELECT
03:23:14   3  'aud'||m.ydate prdate
03:23:14   4  ,NULL gatt
03:23:14   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
03:23:14   6  ,eur_g00
03:23:14   7  ,eur_g01
03:23:14   8  ,eur_g02
03:23:14   9  ,eur_g03
03:23:14  10  ,eur_g04
03:23:14  11  ,eur_g05
03:23:14  12  ,eur_g06
03:23:14  13  ,eur_g07
03:23:14  14  ,eur_g08
03:23:14  15  ,eur_g09
03:23:14  16  ,eur_g10
03:23:14  17  ,eur_g11
03:23:14  18  ,eur_g12
03:23:14  19  ,eur_g13
03:23:14  20  ,eur_g14
03:23:14  21  ,eur_g15
03:23:14  22  ,eur_g16
03:23:14  23  ,eur_g17
03:23:14  24  ,eur_g18
03:23:14  25  ,eur_g19
03:23:14  26  ,eur_g20
03:23:14  27  ,eur_g21
03:23:14  28  ,eur_g22
03:23:14  29  ,eur_g23
03:23:14  30  ,eur_g24
03:23:14  31  ,eur_g25
03:23:14  32  ,eur_g26
03:23:14  33  ,eur_g27
03:23:14  34  ,eur_g28
03:23:14  35  ,eur_g29
03:23:14  36  ,eur_g30
03:23:14  37  ,eur_g31
03:23:14  38  ,eur_g32
03:23:14  39  ,eur_g33
03:23:14  40  ,eur_g34
03:23:14  41  ,eur_g35
03:23:14  42  ,eur_g36
03:23:14  43  ,eur_g37
03:23:14  44  ,eur_g38
03:23:14  45  ,eur_g39
03:23:14  46  ,eur_g40
03:23:14  47  ,eur_g41
03:23:14  48  ,aud_g00
03:23:14  49  ,aud_g01
03:23:14  50  ,aud_g02
03:23:14  51  ,aud_g03
03:23:14  52  ,aud_g04
03:23:14  53  ,aud_g05
03:23:14  54  ,aud_g06
03:23:14  55  ,aud_g07
03:23:14  56  ,aud_g08
03:23:14  57  ,aud_g09
03:23:14  58  ,aud_g10
03:23:14  59  ,aud_g11
03:23:14  60  ,aud_g12
03:23:14  61  ,aud_g13
03:23:14  62  ,aud_g14
03:23:14  63  ,aud_g15
03:23:14  64  ,aud_g16
03:23:14  65  ,aud_g17
03:23:14  66  ,aud_g18
03:23:14  67  ,aud_g19
03:23:14  68  ,aud_g20
03:23:14  69  ,aud_g21
03:23:14  70  ,aud_g22
03:23:14  71  ,aud_g23
03:23:14  72  ,aud_g24
03:23:14  73  ,aud_g25
03:23:14  74  ,aud_g26
03:23:14  75  ,aud_g27
03:23:14  76  ,aud_g28
03:23:14  77  ,aud_g29
03:23:14  78  ,aud_g30
03:23:14  79  ,aud_g31
03:23:14  80  ,aud_g32
03:23:14  81  ,aud_g33
03:23:14  82  ,aud_g34
03:23:14  83  ,aud_g35
03:23:14  84  ,aud_g36
03:23:14  85  ,aud_g37
03:23:14  86  ,aud_g38
03:23:14  87  ,aud_g39
03:23:14  88  ,aud_g40
03:23:14  89  ,aud_g41
03:23:14  90  ,gbp_g00
03:23:14  91  ,gbp_g01
03:23:14  92  ,gbp_g02
03:23:14  93  ,gbp_g03
03:23:14  94  ,gbp_g04
03:23:14  95  ,gbp_g05
03:23:14  96  ,gbp_g06
03:23:14  97  ,gbp_g07
03:23:14  98  ,gbp_g08
03:23:14  99  ,gbp_g09
03:23:14 100  ,gbp_g10
03:23:14 101  ,gbp_g11
03:23:14 102  ,gbp_g12
03:23:14 103  ,gbp_g13
03:23:14 104  ,gbp_g14
03:23:14 105  ,gbp_g15
03:23:14 106  ,gbp_g16
03:23:14 107  ,gbp_g17
03:23:14 108  ,gbp_g18
03:23:14 109  ,gbp_g19
03:23:14 110  ,gbp_g20
03:23:14 111  ,gbp_g21
03:23:14 112  ,gbp_g22
03:23:14 113  ,gbp_g23
03:23:14 114  ,gbp_g24
03:23:14 115  ,gbp_g25
03:23:14 116  ,gbp_g26
03:23:14 117  ,gbp_g27
03:23:14 118  ,gbp_g28
03:23:14 119  ,gbp_g29
03:23:14 120  ,gbp_g30
03:23:14 121  ,gbp_g31
03:23:14 122  ,gbp_g32
03:23:14 123  ,gbp_g33
03:23:14 124  ,gbp_g34
03:23:14 125  ,gbp_g35
03:23:14 126  ,gbp_g36
03:23:14 127  ,gbp_g37
03:23:14 128  ,gbp_g38
03:23:14 129  ,gbp_g39
03:23:14 130  ,gbp_g40
03:23:14 131  ,gbp_g41
03:23:14 132  ,jpy_g00
03:23:14 133  ,jpy_g01
03:23:14 134  ,jpy_g02
03:23:14 135  ,jpy_g03
03:23:14 136  ,jpy_g04
03:23:14 137  ,jpy_g05
03:23:14 138  ,jpy_g06
03:23:14 139  ,jpy_g07
03:23:14 140  ,jpy_g08
03:23:14 141  ,jpy_g09
03:23:14 142  ,jpy_g10
03:23:14 143  ,jpy_g11
03:23:14 144  ,jpy_g12
03:23:14 145  ,jpy_g13
03:23:14 146  ,jpy_g14
03:23:14 147  ,jpy_g15
03:23:14 148  ,jpy_g16
03:23:14 149  ,jpy_g17
03:23:14 150  ,jpy_g18
03:23:14 151  ,jpy_g19
03:23:14 152  ,jpy_g20
03:23:14 153  ,jpy_g21
03:23:14 154  ,jpy_g22
03:23:14 155  ,jpy_g23
03:23:14 156  ,jpy_g24
03:23:14 157  ,jpy_g25
03:23:14 158  ,jpy_g26
03:23:14 159  ,jpy_g27
03:23:14 160  ,jpy_g28
03:23:14 161  ,jpy_g29
03:23:14 162  ,jpy_g30
03:23:14 163  ,jpy_g31
03:23:14 164  ,jpy_g32
03:23:14 165  ,jpy_g33
03:23:14 166  ,jpy_g34
03:23:14 167  ,jpy_g35
03:23:14 168  ,jpy_g36
03:23:14 169  ,jpy_g37
03:23:14 170  ,jpy_g38
03:23:14 171  ,jpy_g39
03:23:14 172  ,jpy_g40
03:23:14 173  ,jpy_g41
03:23:14 174  ,cad_g00
03:23:14 175  ,cad_g01
03:23:14 176  ,cad_g02
03:23:14 177  ,cad_g03
03:23:14 178  ,cad_g04
03:23:14 179  ,cad_g05
03:23:14 180  ,cad_g06
03:23:14 181  ,cad_g07
03:23:14 182  ,cad_g08
03:23:14 183  ,cad_g09
03:23:14 184  ,cad_g10
03:23:14 185  ,cad_g11
03:23:14 186  ,cad_g12
03:23:14 187  ,cad_g13
03:23:14 188  ,cad_g14
03:23:14 189  ,cad_g15
03:23:14 190  ,cad_g16
03:23:14 191  ,cad_g17
03:23:14 192  ,cad_g18
03:23:14 193  ,cad_g19
03:23:14 194  ,cad_g20
03:23:14 195  ,cad_g21
03:23:14 196  ,cad_g22
03:23:14 197  ,cad_g23
03:23:14 198  ,cad_g24
03:23:14 199  ,cad_g25
03:23:14 200  ,cad_g26
03:23:14 201  ,cad_g27
03:23:14 202  ,cad_g28
03:23:14 203  ,cad_g29
03:23:14 204  ,cad_g30
03:23:14 205  ,cad_g31
03:23:14 206  ,cad_g32
03:23:14 207  ,cad_g33
03:23:14 208  ,cad_g34
03:23:14 209  ,cad_g35
03:23:14 210  ,cad_g36
03:23:14 211  ,cad_g37
03:23:14 212  ,cad_g38
03:23:14 213  ,cad_g39
03:23:14 214  ,cad_g40
03:23:14 215  ,cad_g41
03:23:14 216  ,chf_g00
03:23:14 217  ,chf_g01
03:23:14 218  ,chf_g02
03:23:14 219  ,chf_g03
03:23:14 220  ,chf_g04
03:23:14 221  ,chf_g05
03:23:14 222  ,chf_g06
03:23:14 223  ,chf_g07
03:23:14 224  ,chf_g08
03:23:14 225  ,chf_g09
03:23:14 226  ,chf_g10
03:23:14 227  ,chf_g11
03:23:14 228  ,chf_g12
03:23:14 229  ,chf_g13
03:23:14 230  ,chf_g14
03:23:14 231  ,chf_g15
03:23:14 232  ,chf_g16
03:23:14 233  ,chf_g17
03:23:14 234  ,chf_g18
03:23:14 235  ,chf_g19
03:23:14 236  ,chf_g20
03:23:14 237  ,chf_g21
03:23:14 238  ,chf_g22
03:23:14 239  ,chf_g23
03:23:14 240  ,chf_g24
03:23:14 241  ,chf_g25
03:23:14 242  ,chf_g26
03:23:14 243  ,chf_g27
03:23:14 244  ,chf_g28
03:23:14 245  ,chf_g29
03:23:14 246  ,chf_g30
03:23:14 247  ,chf_g31
03:23:14 248  ,chf_g32
03:23:14 249  ,chf_g33
03:23:14 250  ,chf_g34
03:23:14 251  ,chf_g35
03:23:14 252  ,chf_g36
03:23:14 253  ,chf_g37
03:23:14 254  ,chf_g38
03:23:14 255  ,chf_g39
03:23:14 256  ,chf_g40
03:23:14 257  ,chf_g41
03:23:14 258  FROM aud_ms6 m
03:23:14 259  WHERE m.ydate = '&1'||' '||'&2'
03:23:14 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2010-12-29'||' '||'03:10:00'

View created.

Elapsed: 00:00:00.13
03:23:14 SQL> 
03:23:14 SQL> -- rpt
03:23:14 SQL> -- We should see just 1 row:
03:23:14 SQL> 
03:23:14 SQL> SELECT COUNT(prdate) FROM sme
03:23:14   2  
03:23:14 SQL> -- Build the model:
03:23:14 SQL> CREATE OR REPLACE VIEW bme AS
03:23:14   2  SELECT
03:23:14   3  'aud'||m.ydate prdate
03:23:14   4  ,gatt
03:23:14   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
03:23:14   6  ,eur_g00
03:23:14   7  ,eur_g01
03:23:14   8  ,eur_g02
03:23:14   9  ,eur_g03
03:23:14  10  ,eur_g04
03:23:14  11  ,eur_g05
03:23:14  12  ,eur_g06
03:23:14  13  ,eur_g07
03:23:14  14  ,eur_g08
03:23:14  15  ,eur_g09
03:23:14  16  ,eur_g10
03:23:14  17  ,eur_g11
03:23:14  18  ,eur_g12
03:23:14  19  ,eur_g13
03:23:14  20  ,eur_g14
03:23:14  21  ,eur_g15
03:23:14  22  ,eur_g16
03:23:14  23  ,eur_g17
03:23:14  24  ,eur_g18
03:23:14  25  ,eur_g19
03:23:14  26  ,eur_g20
03:23:14  27  ,eur_g21
03:23:14  28  ,eur_g22
03:23:14  29  ,eur_g23
03:23:14  30  ,eur_g24
03:23:14  31  ,eur_g25
03:23:14  32  ,eur_g26
03:23:14  33  ,eur_g27
03:23:14  34  ,eur_g28
03:23:14  35  ,eur_g29
03:23:14  36  ,eur_g30
03:23:14  37  ,eur_g31
03:23:14  38  ,eur_g32
03:23:14  39  ,eur_g33
03:23:14  40  ,eur_g34
03:23:14  41  ,eur_g35
03:23:14  42  ,eur_g36
03:23:14  43  ,eur_g37
03:23:14  44  ,eur_g38
03:23:14  45  ,eur_g39
03:23:14  46  ,eur_g40
03:23:14  47  ,eur_g41
03:23:14  48  ,aud_g00
03:23:14  49  ,aud_g01
03:23:14  50  ,aud_g02
03:23:14  51  ,aud_g03
03:23:14  52  ,aud_g04
03:23:14  53  ,aud_g05
03:23:14  54  ,aud_g06
03:23:14  55  ,aud_g07
03:23:14  56  ,aud_g08
03:23:14  57  ,aud_g09
03:23:14  58  ,aud_g10
03:23:14  59  ,aud_g11
03:23:14  60  ,aud_g12
03:23:14  61  ,aud_g13
03:23:14  62  ,aud_g14
03:23:14  63  ,aud_g15
03:23:14  64  ,aud_g16
03:23:14  65  ,aud_g17
03:23:14  66  ,aud_g18
03:23:14  67  ,aud_g19
03:23:14  68  ,aud_g20
03:23:14  69  ,aud_g21
03:23:14  70  ,aud_g22
03:23:14  71  ,aud_g23
03:23:14  72  ,aud_g24
03:23:14  73  ,aud_g25
03:23:14  74  ,aud_g26
03:23:14  75  ,aud_g27
03:23:14  76  ,aud_g28
03:23:14  77  ,aud_g29
03:23:14  78  ,aud_g30
03:23:14  79  ,aud_g31
03:23:14  80  ,aud_g32
03:23:14  81  ,aud_g33
03:23:14  82  ,aud_g34
03:23:14  83  ,aud_g35
03:23:14  84  ,aud_g36
03:23:14  85  ,aud_g37
03:23:14  86  ,aud_g38
03:23:14  87  ,aud_g39
03:23:14  88  ,aud_g40
03:23:14  89  ,aud_g41
03:23:14  90  ,gbp_g00
03:23:14  91  ,gbp_g01
03:23:14  92  ,gbp_g02
03:23:14  93  ,gbp_g03
03:23:14  94  ,gbp_g04
03:23:14  95  ,gbp_g05
03:23:14  96  ,gbp_g06
03:23:14  97  ,gbp_g07
03:23:14  98  ,gbp_g08
03:23:14  99  ,gbp_g09
03:23:14 100  ,gbp_g10
03:23:14 101  ,gbp_g11
03:23:14 102  ,gbp_g12
03:23:14 103  ,gbp_g13
03:23:14 104  ,gbp_g14
03:23:14 105  ,gbp_g15
03:23:14 106  ,gbp_g16
03:23:14 107  ,gbp_g17
03:23:14 108  ,gbp_g18
03:23:14 109  ,gbp_g19
03:23:14 110  ,gbp_g20
03:23:14 111  ,gbp_g21
03:23:14 112  ,gbp_g22
03:23:14 113  ,gbp_g23
03:23:14 114  ,gbp_g24
03:23:14 115  ,gbp_g25
03:23:14 116  ,gbp_g26
03:23:14 117  ,gbp_g27
03:23:14 118  ,gbp_g28
03:23:14 119  ,gbp_g29
03:23:14 120  ,gbp_g30
03:23:14 121  ,gbp_g31
03:23:14 122  ,gbp_g32
03:23:14 123  ,gbp_g33
03:23:14 124  ,gbp_g34
03:23:14 125  ,gbp_g35
03:23:14 126  ,gbp_g36
03:23:14 127  ,gbp_g37
03:23:14 128  ,gbp_g38
03:23:14 129  ,gbp_g39
03:23:14 130  ,gbp_g40
03:23:14 131  ,gbp_g41
03:23:14 132  ,jpy_g00
03:23:14 133  ,jpy_g01
03:23:14 134  ,jpy_g02
03:23:14 135  ,jpy_g03
03:23:14 136  ,jpy_g04
03:23:14 137  ,jpy_g05
03:23:14 138  ,jpy_g06
03:23:14 139  ,jpy_g07
03:23:14 140  ,jpy_g08
03:23:14 141  ,jpy_g09
03:23:14 142  ,jpy_g10
03:23:14 143  ,jpy_g11
03:23:14 144  ,jpy_g12
03:23:14 145  ,jpy_g13
03:23:14 146  ,jpy_g14
03:23:14 147  ,jpy_g15
03:23:14 148  ,jpy_g16
03:23:14 149  ,jpy_g17
03:23:14 150  ,jpy_g18
03:23:14 151  ,jpy_g19
03:23:14 152  ,jpy_g20
03:23:14 153  ,jpy_g21
03:23:14 154  ,jpy_g22
03:23:14 155  ,jpy_g23
03:23:14 156  ,jpy_g24
03:23:14 157  ,jpy_g25
03:23:14 158  ,jpy_g26
03:23:14 159  ,jpy_g27
03:23:14 160  ,jpy_g28
03:23:14 161  ,jpy_g29
03:23:14 162  ,jpy_g30
03:23:14 163  ,jpy_g31
03:23:14 164  ,jpy_g32
03:23:14 165  ,jpy_g33
03:23:14 166  ,jpy_g34
03:23:14 167  ,jpy_g35
03:23:14 168  ,jpy_g36
03:23:14 169  ,jpy_g37
03:23:14 170  ,jpy_g38
03:23:14 171  ,jpy_g39
03:23:14 172  ,jpy_g40
03:23:14 173  ,jpy_g41
03:23:14 174  ,cad_g00
03:23:14 175  ,cad_g01
03:23:14 176  ,cad_g02
03:23:14 177  ,cad_g03
03:23:14 178  ,cad_g04
03:23:14 179  ,cad_g05
03:23:14 180  ,cad_g06
03:23:14 181  ,cad_g07
03:23:14 182  ,cad_g08
03:23:14 183  ,cad_g09
03:23:14 184  ,cad_g10
03:23:14 185  ,cad_g11
03:23:14 186  ,cad_g12
03:23:14 187  ,cad_g13
03:23:14 188  ,cad_g14
03:23:14 189  ,cad_g15
03:23:14 190  ,cad_g16
03:23:14 191  ,cad_g17
03:23:14 192  ,cad_g18
03:23:14 193  ,cad_g19
03:23:14 194  ,cad_g20
03:23:14 195  ,cad_g21
03:23:14 196  ,cad_g22
03:23:14 197  ,cad_g23
03:23:14 198  ,cad_g24
03:23:14 199  ,cad_g25
03:23:14 200  ,cad_g26
03:23:14 201  ,cad_g27
03:23:14 202  ,cad_g28
03:23:14 203  ,cad_g29
03:23:14 204  ,cad_g30
03:23:14 205  ,cad_g31
03:23:14 206  ,cad_g32
03:23:14 207  ,cad_g33
03:23:14 208  ,cad_g34
03:23:14 209  ,cad_g35
03:23:14 210  ,cad_g36
03:23:14 211  ,cad_g37
03:23:14 212  ,cad_g38
03:23:14 213  ,cad_g39
03:23:14 214  ,cad_g40
03:23:14 215  ,cad_g41
03:23:14 216  ,chf_g00
03:23:14 217  ,chf_g01
03:23:14 218  ,chf_g02
03:23:14 219  ,chf_g03
03:23:14 220  ,chf_g04
03:23:14 221  ,chf_g05
03:23:14 222  ,chf_g06
03:23:14 223  ,chf_g07
03:23:14 224  ,chf_g08
03:23:14 225  ,chf_g09
03:23:14 226  ,chf_g10
03:23:14 227  ,chf_g11
03:23:14 228  ,chf_g12
03:23:14 229  ,chf_g13
03:23:14 230  ,chf_g14
03:23:14 231  ,chf_g15
03:23:14 232  ,chf_g16
03:23:14 233  ,chf_g17
03:23:14 234  ,chf_g18
03:23:14 235  ,chf_g19
03:23:14 236  ,chf_g20
03:23:14 237  ,chf_g21
03:23:14 238  ,chf_g22
03:23:14 239  ,chf_g23
03:23:14 240  ,chf_g24
03:23:14 241  ,chf_g25
03:23:14 242  ,chf_g26
03:23:14 243  ,chf_g27
03:23:14 244  ,chf_g28
03:23:14 245  ,chf_g29
03:23:14 246  ,chf_g30
03:23:14 247  ,chf_g31
03:23:14 248  ,chf_g32
03:23:14 249  ,chf_g33
03:23:14 250  ,chf_g34
03:23:14 251  ,chf_g35
03:23:14 252  ,chf_g36
03:23:14 253  ,chf_g37
03:23:14 254  ,chf_g38
03:23:14 255  ,chf_g39
03:23:14 256  ,chf_g40
03:23:14 257  ,chf_g41
03:23:14 258  FROM aud_ms6 m
03:23:14 259  WHERE gatt IN('nup','up')
03:23:14 260  AND 1+m.ydate < '&1'||' '||'&2'
03:23:14 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2010-12-29'||' '||'03:10:00'

View created.

Elapsed: 00:00:00.17
03:23:15 SQL> 
03:23:15 SQL> -- rpt
03:23:15 SQL> 
03:23:15 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt
03:23:15   2  
03:23:15 SQL> SELECT MAX(prdate) FROM bme
03:23:15   2  
03:23:15 SQL> -- Now build model from bme and score sme
03:23:15 SQL> @score1.sql
03:23:15 SQL> -- score1.sql
03:23:15 SQL> 
03:23:15 SQL> -- Does the 1st SVM score
03:23:15 SQL> 
03:23:15 SQL> -- Fill up svmc_apply_prep
03:23:15 SQL> @score.sql
03:23:15 SQL> --
03:23:15 SQL> -- score.sql
03:23:15 SQL> --
03:23:15 SQL> 
03:23:15 SQL> -- usage: score.sql
03:23:15 SQL> 
03:23:15 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
03:23:15 SQL> 
03:23:15 SQL> DEFINE target	= 'gatt'
03:23:15 SQL> DEFINE model_name = 'forex14'
03:23:15 SQL> DEFINE bldtable	= 'bme'
03:23:15 SQL> DEFINE scoretable = 'sme'
03:23:15 SQL> DEFINE case_id	= 'prdate'
03:23:15 SQL> 
03:23:15 SQL> -- Define a variable to help me exclude some columns from some data mining calls
03:23:15 SQL> DEFINE exclude1 = "'&target','&case_id'"
03:23:15 SQL> 
03:23:15 SQL> -- Builds an SVM model using pl/sql.
03:23:15 SQL> 
03:23:15 SQL> -----------------------------------------------------------------------
03:23:15 SQL> --			    BUILD THE MODEL
03:23:15 SQL> -----------------------------------------------------------------------
03:23:15 SQL> 
03:23:15 SQL> -- Cleanup old build data preparation objects for repeat runs
03:23:15 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.00
03:23:15 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
03:23:15 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.02
03:23:15 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.01
03:23:15 SQL> 
03:23:15 SQL> 
03:23:15 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
03:23:15 SQL> --
03:23:15 SQL> -- DROP	TABLE svmc_settings ;
03:23:15 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
03:23:15 SQL> -- DELETE svmc_settings;
03:23:15 SQL> 
03:23:15 SQL> -- The default classification algorithm is Naive Bayes. So override
03:23:15 SQL> -- this choice to SVM using a settings table.
03:23:15 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
03:23:15 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
03:23:15 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
03:23:15 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
03:23:15 SQL> -- models.
03:23:15 SQL> --
03:23:15 SQL> 
03:23:15 SQL> -- Do this once and then comment it out.
03:23:15 SQL> -- That makes script go faster.
03:23:15 SQL> -- BEGIN
03:23:15 SQL> -- -- Populate settings table
03:23:15 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
03:23:15 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
03:23:15 SQL> --
03:23:15 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
03:23:15 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
03:23:15 SQL> --
03:23:15 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
03:23:15 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
03:23:15 SQL> --   COMMIT;
03:23:15 SQL> -- END;
03:23:15 SQL> -- /
03:23:15 SQL> 
03:23:15 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
03:23:15 SQL> 
03:23:15 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
03:23:15   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:23:15   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.12
03:23:15 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
03:23:15   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:23:15   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
03:23:15 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
03:23:15   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:23:15   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
03:23:15 SQL> 
03:23:15 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
03:23:15   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:23:15   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.12
03:23:15 SQL> 
03:23:15 SQL> --------------------------------
03:23:15 SQL> -- PREPARE BUILD (TRAINING) DATA
03:23:15 SQL> --
03:23:15 SQL> 
03:23:15 SQL> -- 1. Missing Value treatment for all Predictors and
03:23:15 SQL> -- 2. Outlier Treatment and
03:23:15 SQL> -- 3. Normalization are performed below.
03:23:15 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
03:23:15 SQL> --    normalized here.
03:23:15 SQL> 
03:23:15 SQL> BEGIN
03:23:15   2  	-- Perform missing value treatment for all predictors
03:23:15   3  	-- create miss tables
03:23:15   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
03:23:15   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
03:23:15   6  
03:23:15   7  	-- populate miss tables
03:23:15   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
03:23:15   9  	  miss_table_name => 'svmc_miss_num',
03:23:15  10  	  data_table_name => '&bldtable',
03:23:15  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:23:15  12  
03:23:15  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
03:23:15  14  	  miss_table_name => 'svmc_miss_cat',
03:23:15  15  	  data_table_name => '&bldtable',
03:23:15  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:23:15  17  
03:23:15  18  	-- xform input data to replace missing values
03:23:15  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
03:23:15  20  	  miss_table_name => 'svmc_miss_num',
03:23:15  21  	  data_table_name => '&bldtable',
03:23:15  22  	  xform_view_name => 'xformed_build_miss_num');
03:23:15  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
03:23:15  24  	  miss_table_name => 'svmc_miss_cat',
03:23:15  25  	  data_table_name => '&bldtable',
03:23:15  26  	  xform_view_name => 'xformed_build_miss_cat');
03:23:15  27  
03:23:15  28  	-- Perform outlier treatment.
03:23:15  29  	-- create clip table
03:23:15  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
03:23:15  31  
03:23:15  32  	-- populate clip table
03:23:15  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
03:23:15  34  	  clip_table_name => 'svmc_clip',
03:23:15  35  	  data_table_name => '&bldtable',
03:23:15  36  	  tail_frac	  => 0.025,
03:23:15  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:23:15  38  
03:23:15  39  	-- xform input data to winsorized data
03:23:15  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
03:23:15  41  	  clip_table_name => 'svmc_clip',
03:23:15  42  	  data_table_name => '&bldtable',
03:23:15  43  	  xform_view_name => 'svmc_winsor');
03:23:15  44  
03:23:15  45  	-- create normalization table
03:23:15  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
03:23:15  47  
03:23:15  48  	-- populate normalization table based on winsorized data
03:23:15  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
03:23:15  50  	  norm_table_name => 'svmc_norm',
03:23:15  51  	  data_table_name => 'svmc_winsor',
03:23:15  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:23:15  53  
03:23:15  54  	-- normalize the original data
03:23:15  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
03:23:15  56  	  norm_table_name => 'svmc_norm',
03:23:15  57  	  data_table_name => '&bldtable',
03:23:15  58  	  xform_view_name => 'svmc_build_prep');
03:23:15  59  END;
03:23:15  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:17.91
03:23:33 SQL> 
03:23:33 SQL> ---------------------
03:23:33 SQL> -- CREATE A NEW MODEL
03:23:33 SQL> --
03:23:33 SQL> -- Cleanup old model with the same name for repeat runs
03:23:33 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
03:23:33   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:23:33   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.21
03:23:34 SQL> 
03:23:34 SQL> -- Build a new SVM Model
03:23:34 SQL> BEGIN
03:23:34   2  	DBMS_DATA_MINING.CREATE_MODEL(
03:23:34   3  	  model_name	      => '&model_name',
03:23:34   4  	  mining_function     => dbms_data_mining.classification,
03:23:34   5  	  data_table_name     => 'svmc_build_prep',
03:23:34   6  	  case_id_column_name => '&case_id',
03:23:34   7  	  target_column_name  => '&target',
03:23:34   8  	  settings_table_name => 'svmc_settings');
03:23:34   9  END;
03:23:34  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:26.58
03:24:01 SQL> 
03:24:01 SQL> -----------------------------------------------------------------------
03:24:01 SQL> --			       APPLY/score THE MODEL
03:24:01 SQL> -----------------------------------------------------------------------
03:24:01 SQL> 
03:24:01 SQL> -- Cleanup old scoring data preparation objects for repeat runs
03:24:01 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
03:24:01   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:24:01   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
03:24:01 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
03:24:01   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:24:01   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
03:24:01 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
03:24:01   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:24:01   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
03:24:01 SQL> -----------------------
03:24:01 SQL> -- PREPARE SCORING DATA
03:24:01 SQL> --
03:24:01 SQL> -- If the data for model creation has been prepared, then the data
03:24:01 SQL> -- to be scored using the model must be prepared in the same manner
03:24:01 SQL> -- in order to obtain meaningful results.
03:24:01 SQL> --
03:24:01 SQL> -- 1. Missing Value treatment for all Predictors and
03:24:01 SQL> -- 2. Normalization
03:24:01 SQL> -- No outlier treatment will be performed during test and apply. The
03:24:01 SQL> -- normalization step is sufficient, since the normalization parameters
03:24:01 SQL> -- already capture the effects of outlier treatment done with build data.
03:24:01 SQL> --
03:24:01 SQL> BEGIN
03:24:01   2  	-- Xform Test data to replace missing values
03:24:01   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
03:24:01   4  	  miss_table_name => 'svmc_miss_num',
03:24:01   5  	  data_table_name => '&scoretable',
03:24:01   6  	  xform_view_name => 'xformed_apply_miss_num');
03:24:01   7  
03:24:01   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
03:24:01   9  	  miss_table_name => 'svmc_miss_cat',
03:24:01  10  	  data_table_name => '&scoretable',
03:24:01  11  	  xform_view_name => 'xformed_apply_miss_cat');
03:24:01  12  
03:24:01  13  	-- Normalize the data to be scored
03:24:01  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
03:24:01  15  	  norm_table_name => 'svmc_norm',
03:24:01  16  	  data_table_name => '&scoretable',
03:24:01  17  	  xform_view_name => 'svmc_apply_prep');
03:24:01  18  END;
03:24:01  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.29
03:24:02 SQL> 
03:24:02 SQL> -- Use same model_name used in score.sql
03:24:02 SQL> DEFINE model_name = 'forex14'
03:24:02 SQL> 
03:24:02 SQL> -- CREATE TABLE fxscores6 (prdate VARCHAR2(30),score NUMBER,rundate DATE,pair VARCHAR2(8),ydate DATE);
03:24:02 SQL> 
03:24:02 SQL> DELETE fxscores6 WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.03
03:24:02 SQL> 
03:24:02 SQL> INSERT INTO fxscores6 (prdate,score,rundate,pair,ydate)
03:24:02   2  SELECT
03:24:02   3  prdate
03:24:02   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
03:24:02   5  ,sysdate
03:24:02   6  ,SUBSTR(prdate,1,3)pair
03:24:02   7  ,SUBSTR(prdate,4,19)ydate
03:24:02   8  FROM svmc_apply_prep
03:24:02   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.19
03:24:02 SQL> @aud_score1day_gattn.sql	2010-12-29 03:00:00
03:24:02 SQL> --
03:24:02 SQL> -- aud_score1day_gattn.sql
03:24:02 SQL> --
03:24:02 SQL> 
03:24:02 SQL> CREATE OR REPLACE VIEW sme AS
03:24:02   2  SELECT
03:24:02   3  'aud'||m.ydate prdate
03:24:02   4  ,NULL gattn
03:24:02   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
03:24:02   6  ,eur_g00
03:24:02   7  ,eur_g01
03:24:02   8  ,eur_g02
03:24:02   9  ,eur_g03
03:24:02  10  ,eur_g04
03:24:02  11  ,eur_g05
03:24:02  12  ,eur_g06
03:24:02  13  ,eur_g07
03:24:02  14  ,eur_g08
03:24:02  15  ,eur_g09
03:24:02  16  ,eur_g10
03:24:02  17  ,eur_g11
03:24:02  18  ,eur_g12
03:24:02  19  ,eur_g13
03:24:02  20  ,eur_g14
03:24:02  21  ,eur_g15
03:24:02  22  ,eur_g16
03:24:02  23  ,eur_g17
03:24:02  24  ,eur_g18
03:24:02  25  ,eur_g19
03:24:02  26  ,eur_g20
03:24:02  27  ,eur_g21
03:24:02  28  ,eur_g22
03:24:02  29  ,eur_g23
03:24:02  30  ,eur_g24
03:24:02  31  ,eur_g25
03:24:02  32  ,eur_g26
03:24:02  33  ,eur_g27
03:24:02  34  ,eur_g28
03:24:02  35  ,eur_g29
03:24:02  36  ,eur_g30
03:24:02  37  ,eur_g31
03:24:02  38  ,eur_g32
03:24:02  39  ,eur_g33
03:24:02  40  ,eur_g34
03:24:02  41  ,eur_g35
03:24:02  42  ,eur_g36
03:24:02  43  ,eur_g37
03:24:02  44  ,eur_g38
03:24:02  45  ,eur_g39
03:24:02  46  ,eur_g40
03:24:02  47  ,eur_g41
03:24:02  48  ,aud_g00
03:24:02  49  ,aud_g01
03:24:02  50  ,aud_g02
03:24:02  51  ,aud_g03
03:24:02  52  ,aud_g04
03:24:02  53  ,aud_g05
03:24:02  54  ,aud_g06
03:24:02  55  ,aud_g07
03:24:02  56  ,aud_g08
03:24:02  57  ,aud_g09
03:24:02  58  ,aud_g10
03:24:02  59  ,aud_g11
03:24:02  60  ,aud_g12
03:24:02  61  ,aud_g13
03:24:02  62  ,aud_g14
03:24:02  63  ,aud_g15
03:24:02  64  ,aud_g16
03:24:02  65  ,aud_g17
03:24:02  66  ,aud_g18
03:24:02  67  ,aud_g19
03:24:02  68  ,aud_g20
03:24:02  69  ,aud_g21
03:24:02  70  ,aud_g22
03:24:02  71  ,aud_g23
03:24:02  72  ,aud_g24
03:24:02  73  ,aud_g25
03:24:02  74  ,aud_g26
03:24:02  75  ,aud_g27
03:24:02  76  ,aud_g28
03:24:02  77  ,aud_g29
03:24:02  78  ,aud_g30
03:24:02  79  ,aud_g31
03:24:02  80  ,aud_g32
03:24:02  81  ,aud_g33
03:24:02  82  ,aud_g34
03:24:02  83  ,aud_g35
03:24:02  84  ,aud_g36
03:24:02  85  ,aud_g37
03:24:02  86  ,aud_g38
03:24:02  87  ,aud_g39
03:24:02  88  ,aud_g40
03:24:02  89  ,aud_g41
03:24:02  90  ,gbp_g00
03:24:02  91  ,gbp_g01
03:24:02  92  ,gbp_g02
03:24:02  93  ,gbp_g03
03:24:02  94  ,gbp_g04
03:24:02  95  ,gbp_g05
03:24:02  96  ,gbp_g06
03:24:02  97  ,gbp_g07
03:24:02  98  ,gbp_g08
03:24:02  99  ,gbp_g09
03:24:02 100  ,gbp_g10
03:24:02 101  ,gbp_g11
03:24:02 102  ,gbp_g12
03:24:02 103  ,gbp_g13
03:24:02 104  ,gbp_g14
03:24:02 105  ,gbp_g15
03:24:02 106  ,gbp_g16
03:24:02 107  ,gbp_g17
03:24:02 108  ,gbp_g18
03:24:02 109  ,gbp_g19
03:24:02 110  ,gbp_g20
03:24:02 111  ,gbp_g21
03:24:02 112  ,gbp_g22
03:24:02 113  ,gbp_g23
03:24:02 114  ,gbp_g24
03:24:02 115  ,gbp_g25
03:24:02 116  ,gbp_g26
03:24:02 117  ,gbp_g27
03:24:02 118  ,gbp_g28
03:24:02 119  ,gbp_g29
03:24:02 120  ,gbp_g30
03:24:02 121  ,gbp_g31
03:24:02 122  ,gbp_g32
03:24:02 123  ,gbp_g33
03:24:02 124  ,gbp_g34
03:24:02 125  ,gbp_g35
03:24:02 126  ,gbp_g36
03:24:02 127  ,gbp_g37
03:24:02 128  ,gbp_g38
03:24:02 129  ,gbp_g39
03:24:02 130  ,gbp_g40
03:24:02 131  ,gbp_g41
03:24:02 132  ,jpy_g00
03:24:02 133  ,jpy_g01
03:24:02 134  ,jpy_g02
03:24:02 135  ,jpy_g03
03:24:02 136  ,jpy_g04
03:24:02 137  ,jpy_g05
03:24:02 138  ,jpy_g06
03:24:02 139  ,jpy_g07
03:24:02 140  ,jpy_g08
03:24:02 141  ,jpy_g09
03:24:02 142  ,jpy_g10
03:24:02 143  ,jpy_g11
03:24:02 144  ,jpy_g12
03:24:02 145  ,jpy_g13
03:24:02 146  ,jpy_g14
03:24:02 147  ,jpy_g15
03:24:02 148  ,jpy_g16
03:24:02 149  ,jpy_g17
03:24:02 150  ,jpy_g18
03:24:02 151  ,jpy_g19
03:24:02 152  ,jpy_g20
03:24:02 153  ,jpy_g21
03:24:02 154  ,jpy_g22
03:24:02 155  ,jpy_g23
03:24:02 156  ,jpy_g24
03:24:02 157  ,jpy_g25
03:24:02 158  ,jpy_g26
03:24:02 159  ,jpy_g27
03:24:02 160  ,jpy_g28
03:24:02 161  ,jpy_g29
03:24:02 162  ,jpy_g30
03:24:02 163  ,jpy_g31
03:24:02 164  ,jpy_g32
03:24:02 165  ,jpy_g33
03:24:02 166  ,jpy_g34
03:24:02 167  ,jpy_g35
03:24:02 168  ,jpy_g36
03:24:02 169  ,jpy_g37
03:24:02 170  ,jpy_g38
03:24:02 171  ,jpy_g39
03:24:02 172  ,jpy_g40
03:24:02 173  ,jpy_g41
03:24:02 174  ,cad_g00
03:24:02 175  ,cad_g01
03:24:02 176  ,cad_g02
03:24:02 177  ,cad_g03
03:24:02 178  ,cad_g04
03:24:02 179  ,cad_g05
03:24:02 180  ,cad_g06
03:24:02 181  ,cad_g07
03:24:02 182  ,cad_g08
03:24:02 183  ,cad_g09
03:24:02 184  ,cad_g10
03:24:02 185  ,cad_g11
03:24:02 186  ,cad_g12
03:24:02 187  ,cad_g13
03:24:02 188  ,cad_g14
03:24:02 189  ,cad_g15
03:24:02 190  ,cad_g16
03:24:02 191  ,cad_g17
03:24:02 192  ,cad_g18
03:24:02 193  ,cad_g19
03:24:02 194  ,cad_g20
03:24:02 195  ,cad_g21
03:24:02 196  ,cad_g22
03:24:02 197  ,cad_g23
03:24:02 198  ,cad_g24
03:24:02 199  ,cad_g25
03:24:02 200  ,cad_g26
03:24:02 201  ,cad_g27
03:24:02 202  ,cad_g28
03:24:02 203  ,cad_g29
03:24:02 204  ,cad_g30
03:24:02 205  ,cad_g31
03:24:02 206  ,cad_g32
03:24:02 207  ,cad_g33
03:24:02 208  ,cad_g34
03:24:02 209  ,cad_g35
03:24:02 210  ,cad_g36
03:24:02 211  ,cad_g37
03:24:02 212  ,cad_g38
03:24:02 213  ,cad_g39
03:24:02 214  ,cad_g40
03:24:02 215  ,cad_g41
03:24:02 216  ,chf_g00
03:24:02 217  ,chf_g01
03:24:02 218  ,chf_g02
03:24:02 219  ,chf_g03
03:24:02 220  ,chf_g04
03:24:02 221  ,chf_g05
03:24:02 222  ,chf_g06
03:24:02 223  ,chf_g07
03:24:02 224  ,chf_g08
03:24:02 225  ,chf_g09
03:24:02 226  ,chf_g10
03:24:02 227  ,chf_g11
03:24:02 228  ,chf_g12
03:24:02 229  ,chf_g13
03:24:02 230  ,chf_g14
03:24:02 231  ,chf_g15
03:24:02 232  ,chf_g16
03:24:02 233  ,chf_g17
03:24:02 234  ,chf_g18
03:24:02 235  ,chf_g19
03:24:02 236  ,chf_g20
03:24:02 237  ,chf_g21
03:24:02 238  ,chf_g22
03:24:02 239  ,chf_g23
03:24:02 240  ,chf_g24
03:24:02 241  ,chf_g25
03:24:02 242  ,chf_g26
03:24:02 243  ,chf_g27
03:24:02 244  ,chf_g28
03:24:02 245  ,chf_g29
03:24:02 246  ,chf_g30
03:24:02 247  ,chf_g31
03:24:02 248  ,chf_g32
03:24:02 249  ,chf_g33
03:24:02 250  ,chf_g34
03:24:02 251  ,chf_g35
03:24:02 252  ,chf_g36
03:24:02 253  ,chf_g37
03:24:02 254  ,chf_g38
03:24:02 255  ,chf_g39
03:24:02 256  ,chf_g40
03:24:02 257  ,chf_g41
03:24:02 258  FROM aud_ms6 m
03:24:02 259  WHERE m.ydate = '&1'||' '||'&2'
03:24:02 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2010-12-29'||' '||'03:00:00'

View created.

Elapsed: 00:00:00.12
03:24:02 SQL> 
03:24:02 SQL> -- rpt
03:24:02 SQL> -- We should see just 1 row:
03:24:02 SQL> 
03:24:02 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
03:24:02 SQL> 
03:24:02 SQL> -- Build the model:
03:24:02 SQL> CREATE OR REPLACE VIEW bme AS
03:24:02   2  SELECT
03:24:02   3  'aud'||m.ydate prdate
03:24:02   4  ,gattn
03:24:02   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
03:24:02   6  ,eur_g00
03:24:02   7  ,eur_g01
03:24:02   8  ,eur_g02
03:24:02   9  ,eur_g03
03:24:02  10  ,eur_g04
03:24:02  11  ,eur_g05
03:24:02  12  ,eur_g06
03:24:02  13  ,eur_g07
03:24:02  14  ,eur_g08
03:24:02  15  ,eur_g09
03:24:02  16  ,eur_g10
03:24:02  17  ,eur_g11
03:24:02  18  ,eur_g12
03:24:02  19  ,eur_g13
03:24:02  20  ,eur_g14
03:24:02  21  ,eur_g15
03:24:02  22  ,eur_g16
03:24:02  23  ,eur_g17
03:24:02  24  ,eur_g18
03:24:02  25  ,eur_g19
03:24:02  26  ,eur_g20
03:24:02  27  ,eur_g21
03:24:02  28  ,eur_g22
03:24:02  29  ,eur_g23
03:24:02  30  ,eur_g24
03:24:02  31  ,eur_g25
03:24:02  32  ,eur_g26
03:24:02  33  ,eur_g27
03:24:02  34  ,eur_g28
03:24:02  35  ,eur_g29
03:24:02  36  ,eur_g30
03:24:02  37  ,eur_g31
03:24:02  38  ,eur_g32
03:24:02  39  ,eur_g33
03:24:02  40  ,eur_g34
03:24:02  41  ,eur_g35
03:24:02  42  ,eur_g36
03:24:02  43  ,eur_g37
03:24:02  44  ,eur_g38
03:24:02  45  ,eur_g39
03:24:02  46  ,eur_g40
03:24:02  47  ,eur_g41
03:24:02  48  ,aud_g00
03:24:02  49  ,aud_g01
03:24:02  50  ,aud_g02
03:24:02  51  ,aud_g03
03:24:02  52  ,aud_g04
03:24:02  53  ,aud_g05
03:24:02  54  ,aud_g06
03:24:02  55  ,aud_g07
03:24:02  56  ,aud_g08
03:24:02  57  ,aud_g09
03:24:02  58  ,aud_g10
03:24:02  59  ,aud_g11
03:24:02  60  ,aud_g12
03:24:02  61  ,aud_g13
03:24:02  62  ,aud_g14
03:24:02  63  ,aud_g15
03:24:02  64  ,aud_g16
03:24:02  65  ,aud_g17
03:24:02  66  ,aud_g18
03:24:02  67  ,aud_g19
03:24:02  68  ,aud_g20
03:24:02  69  ,aud_g21
03:24:02  70  ,aud_g22
03:24:02  71  ,aud_g23
03:24:02  72  ,aud_g24
03:24:02  73  ,aud_g25
03:24:02  74  ,aud_g26
03:24:02  75  ,aud_g27
03:24:02  76  ,aud_g28
03:24:02  77  ,aud_g29
03:24:02  78  ,aud_g30
03:24:02  79  ,aud_g31
03:24:02  80  ,aud_g32
03:24:02  81  ,aud_g33
03:24:02  82  ,aud_g34
03:24:02  83  ,aud_g35
03:24:02  84  ,aud_g36
03:24:02  85  ,aud_g37
03:24:02  86  ,aud_g38
03:24:02  87  ,aud_g39
03:24:02  88  ,aud_g40
03:24:02  89  ,aud_g41
03:24:02  90  ,gbp_g00
03:24:02  91  ,gbp_g01
03:24:02  92  ,gbp_g02
03:24:02  93  ,gbp_g03
03:24:02  94  ,gbp_g04
03:24:02  95  ,gbp_g05
03:24:02  96  ,gbp_g06
03:24:02  97  ,gbp_g07
03:24:02  98  ,gbp_g08
03:24:02  99  ,gbp_g09
03:24:02 100  ,gbp_g10
03:24:02 101  ,gbp_g11
03:24:02 102  ,gbp_g12
03:24:02 103  ,gbp_g13
03:24:02 104  ,gbp_g14
03:24:02 105  ,gbp_g15
03:24:02 106  ,gbp_g16
03:24:02 107  ,gbp_g17
03:24:02 108  ,gbp_g18
03:24:02 109  ,gbp_g19
03:24:02 110  ,gbp_g20
03:24:02 111  ,gbp_g21
03:24:02 112  ,gbp_g22
03:24:02 113  ,gbp_g23
03:24:02 114  ,gbp_g24
03:24:02 115  ,gbp_g25
03:24:02 116  ,gbp_g26
03:24:02 117  ,gbp_g27
03:24:02 118  ,gbp_g28
03:24:02 119  ,gbp_g29
03:24:02 120  ,gbp_g30
03:24:02 121  ,gbp_g31
03:24:02 122  ,gbp_g32
03:24:02 123  ,gbp_g33
03:24:02 124  ,gbp_g34
03:24:02 125  ,gbp_g35
03:24:02 126  ,gbp_g36
03:24:02 127  ,gbp_g37
03:24:02 128  ,gbp_g38
03:24:02 129  ,gbp_g39
03:24:02 130  ,gbp_g40
03:24:02 131  ,gbp_g41
03:24:02 132  ,jpy_g00
03:24:02 133  ,jpy_g01
03:24:02 134  ,jpy_g02
03:24:02 135  ,jpy_g03
03:24:02 136  ,jpy_g04
03:24:02 137  ,jpy_g05
03:24:02 138  ,jpy_g06
03:24:02 139  ,jpy_g07
03:24:02 140  ,jpy_g08
03:24:02 141  ,jpy_g09
03:24:02 142  ,jpy_g10
03:24:02 143  ,jpy_g11
03:24:02 144  ,jpy_g12
03:24:02 145  ,jpy_g13
03:24:02 146  ,jpy_g14
03:24:02 147  ,jpy_g15
03:24:02 148  ,jpy_g16
03:24:02 149  ,jpy_g17
03:24:02 150  ,jpy_g18
03:24:02 151  ,jpy_g19
03:24:02 152  ,jpy_g20
03:24:02 153  ,jpy_g21
03:24:02 154  ,jpy_g22
03:24:02 155  ,jpy_g23
03:24:02 156  ,jpy_g24
03:24:02 157  ,jpy_g25
03:24:02 158  ,jpy_g26
03:24:02 159  ,jpy_g27
03:24:02 160  ,jpy_g28
03:24:02 161  ,jpy_g29
03:24:02 162  ,jpy_g30
03:24:02 163  ,jpy_g31
03:24:02 164  ,jpy_g32
03:24:02 165  ,jpy_g33
03:24:02 166  ,jpy_g34
03:24:02 167  ,jpy_g35
03:24:02 168  ,jpy_g36
03:24:02 169  ,jpy_g37
03:24:02 170  ,jpy_g38
03:24:02 171  ,jpy_g39
03:24:02 172  ,jpy_g40
03:24:02 173  ,jpy_g41
03:24:02 174  ,cad_g00
03:24:02 175  ,cad_g01
03:24:02 176  ,cad_g02
03:24:02 177  ,cad_g03
03:24:02 178  ,cad_g04
03:24:02 179  ,cad_g05
03:24:02 180  ,cad_g06
03:24:02 181  ,cad_g07
03:24:02 182  ,cad_g08
03:24:02 183  ,cad_g09
03:24:02 184  ,cad_g10
03:24:02 185  ,cad_g11
03:24:02 186  ,cad_g12
03:24:02 187  ,cad_g13
03:24:02 188  ,cad_g14
03:24:02 189  ,cad_g15
03:24:02 190  ,cad_g16
03:24:02 191  ,cad_g17
03:24:02 192  ,cad_g18
03:24:02 193  ,cad_g19
03:24:02 194  ,cad_g20
03:24:02 195  ,cad_g21
03:24:02 196  ,cad_g22
03:24:02 197  ,cad_g23
03:24:02 198  ,cad_g24
03:24:02 199  ,cad_g25
03:24:02 200  ,cad_g26
03:24:02 201  ,cad_g27
03:24:02 202  ,cad_g28
03:24:02 203  ,cad_g29
03:24:02 204  ,cad_g30
03:24:02 205  ,cad_g31
03:24:02 206  ,cad_g32
03:24:02 207  ,cad_g33
03:24:02 208  ,cad_g34
03:24:02 209  ,cad_g35
03:24:02 210  ,cad_g36
03:24:02 211  ,cad_g37
03:24:02 212  ,cad_g38
03:24:02 213  ,cad_g39
03:24:02 214  ,cad_g40
03:24:02 215  ,cad_g41
03:24:02 216  ,chf_g00
03:24:02 217  ,chf_g01
03:24:02 218  ,chf_g02
03:24:02 219  ,chf_g03
03:24:02 220  ,chf_g04
03:24:02 221  ,chf_g05
03:24:02 222  ,chf_g06
03:24:02 223  ,chf_g07
03:24:02 224  ,chf_g08
03:24:02 225  ,chf_g09
03:24:02 226  ,chf_g10
03:24:02 227  ,chf_g11
03:24:02 228  ,chf_g12
03:24:02 229  ,chf_g13
03:24:02 230  ,chf_g14
03:24:02 231  ,chf_g15
03:24:02 232  ,chf_g16
03:24:02 233  ,chf_g17
03:24:02 234  ,chf_g18
03:24:02 235  ,chf_g19
03:24:02 236  ,chf_g20
03:24:02 237  ,chf_g21
03:24:02 238  ,chf_g22
03:24:02 239  ,chf_g23
03:24:02 240  ,chf_g24
03:24:02 241  ,chf_g25
03:24:02 242  ,chf_g26
03:24:02 243  ,chf_g27
03:24:02 244  ,chf_g28
03:24:02 245  ,chf_g29
03:24:02 246  ,chf_g30
03:24:02 247  ,chf_g31
03:24:02 248  ,chf_g32
03:24:02 249  ,chf_g33
03:24:02 250  ,chf_g34
03:24:02 251  ,chf_g35
03:24:02 252  ,chf_g36
03:24:02 253  ,chf_g37
03:24:02 254  ,chf_g38
03:24:02 255  ,chf_g39
03:24:02 256  ,chf_g40
03:24:02 257  ,chf_g41
03:24:02 258  FROM aud_ms6 m
03:24:02 259  WHERE gattn IN('nup','up')
03:24:02 260  AND 1+m.ydate < '&1'||' '||'&2'
03:24:02 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2010-12-29'||' '||'03:00:00'

View created.

Elapsed: 00:00:00.12
03:24:03 SQL> 
03:24:03 SQL> -- rpt
03:24:03 SQL> 
03:24:03 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	    12724
up	     6322

Elapsed: 00:00:00.03
03:24:03 SQL> 
03:24:03 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
aud2010-12-28 02:55:00

Elapsed: 00:00:00.03
03:24:03 SQL> 
03:24:03 SQL> -- Now build model from bme and score sme
03:24:03 SQL> @score1gattn.sql
03:24:03 SQL> -- score1gattn.sql
03:24:03 SQL> 
03:24:03 SQL> -- Does the 1st SVM score
03:24:03 SQL> 
03:24:03 SQL> -- Fill up svmc_apply_prep
03:24:03 SQL> @score_gattn.sql
03:24:03 SQL> --
03:24:03 SQL> -- score_gattn.sql
03:24:03 SQL> --
03:24:03 SQL> 
03:24:03 SQL> -- usage: score_gattn.sql
03:24:03 SQL> 
03:24:03 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
03:24:03 SQL> 
03:24:03 SQL> DEFINE target	= 'gattn'
03:24:03 SQL> DEFINE model_name = 'forex14'
03:24:03 SQL> DEFINE bldtable	= 'bme'
03:24:03 SQL> DEFINE scoretable = 'sme'
03:24:03 SQL> DEFINE case_id	= 'prdate'
03:24:03 SQL> 
03:24:03 SQL> -- Define a variable to help me exclude some columns from some data mining calls
03:24:03 SQL> DEFINE exclude1 = "'&target','&case_id'"
03:24:03 SQL> 
03:24:03 SQL> -- Builds an SVM model using pl/sql.
03:24:03 SQL> 
03:24:03 SQL> -----------------------------------------------------------------------
03:24:03 SQL> --			    BUILD THE MODEL
03:24:03 SQL> -----------------------------------------------------------------------
03:24:03 SQL> 
03:24:03 SQL> -- Cleanup old build data preparation objects for repeat runs
03:24:03 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.00
03:24:03 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.01
03:24:03 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.00
03:24:03 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.01
03:24:03 SQL> 
03:24:03 SQL> 
03:24:03 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
03:24:03 SQL> --
03:24:03 SQL> -- DROP	TABLE svmc_settings ;
03:24:03 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
03:24:03 SQL> -- DELETE svmc_settings;
03:24:03 SQL> 
03:24:03 SQL> -- The default classification algorithm is Naive Bayes. So override
03:24:03 SQL> -- this choice to SVM using a settings table.
03:24:03 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
03:24:03 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
03:24:03 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
03:24:03 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
03:24:03 SQL> -- models.
03:24:03 SQL> --
03:24:03 SQL> 
03:24:03 SQL> -- Do this once and then comment it out.
03:24:03 SQL> -- That makes script go faster.
03:24:03 SQL> -- BEGIN
03:24:03 SQL> -- -- Populate settings table
03:24:03 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
03:24:03 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
03:24:03 SQL> --
03:24:03 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
03:24:03 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
03:24:03 SQL> --
03:24:03 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
03:24:03 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
03:24:03 SQL> --   COMMIT;
03:24:03 SQL> -- END;
03:24:03 SQL> -- /
03:24:03 SQL> 
03:24:03 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
03:24:03 SQL> 
03:24:03 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
03:24:03   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:24:03   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
03:24:03 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
03:24:03   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:24:03   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
03:24:03 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
03:24:03   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:24:03   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.09
03:24:03 SQL> 
03:24:03 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
03:24:03   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:24:03   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
03:24:03 SQL> 
03:24:03 SQL> --------------------------------
03:24:03 SQL> -- PREPARE BUILD (TRAINING) DATA
03:24:03 SQL> --
03:24:03 SQL> 
03:24:03 SQL> -- 1. Missing Value treatment for all Predictors and
03:24:03 SQL> -- 2. Outlier Treatment and
03:24:03 SQL> -- 3. Normalization are performed below.
03:24:03 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
03:24:03 SQL> --    normalized here.
03:24:03 SQL> 
03:24:03 SQL> BEGIN
03:24:03   2  	-- Perform missing value treatment for all predictors
03:24:03   3  	-- create miss tables
03:24:03   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
03:24:03   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
03:24:03   6  
03:24:03   7  	-- populate miss tables
03:24:03   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
03:24:03   9  	  miss_table_name => 'svmc_miss_num',
03:24:03  10  	  data_table_name => '&bldtable',
03:24:03  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:24:03  12  
03:24:03  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
03:24:03  14  	  miss_table_name => 'svmc_miss_cat',
03:24:03  15  	  data_table_name => '&bldtable',
03:24:03  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:24:03  17  
03:24:03  18  	-- xform input data to replace missing values
03:24:03  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
03:24:03  20  	  miss_table_name => 'svmc_miss_num',
03:24:03  21  	  data_table_name => '&bldtable',
03:24:03  22  	  xform_view_name => 'xformed_build_miss_num');
03:24:03  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
03:24:03  24  	  miss_table_name => 'svmc_miss_cat',
03:24:03  25  	  data_table_name => '&bldtable',
03:24:03  26  	  xform_view_name => 'xformed_build_miss_cat');
03:24:03  27  
03:24:03  28  	-- Perform outlier treatment.
03:24:03  29  	-- create clip table
03:24:03  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
03:24:03  31  
03:24:03  32  	-- populate clip table
03:24:03  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
03:24:03  34  	  clip_table_name => 'svmc_clip',
03:24:03  35  	  data_table_name => '&bldtable',
03:24:03  36  	  tail_frac	  => 0.025,
03:24:03  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:24:03  38  
03:24:03  39  	-- xform input data to winsorized data
03:24:03  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
03:24:03  41  	  clip_table_name => 'svmc_clip',
03:24:03  42  	  data_table_name => '&bldtable',
03:24:03  43  	  xform_view_name => 'svmc_winsor');
03:24:03  44  
03:24:03  45  	-- create normalization table
03:24:03  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
03:24:03  47  
03:24:03  48  	-- populate normalization table based on winsorized data
03:24:03  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
03:24:03  50  	  norm_table_name => 'svmc_norm',
03:24:03  51  	  data_table_name => 'svmc_winsor',
03:24:03  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:24:03  53  
03:24:03  54  	-- normalize the original data
03:24:03  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
03:24:03  56  	  norm_table_name => 'svmc_norm',
03:24:03  57  	  data_table_name => '&bldtable',
03:24:03  58  	  xform_view_name => 'svmc_build_prep');
03:24:03  59  END;
03:24:03  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:18.05
03:24:21 SQL> 
03:24:21 SQL> ---------------------
03:24:21 SQL> -- CREATE A NEW MODEL
03:24:21 SQL> --
03:24:21 SQL> -- Cleanup old model with the same name for repeat runs
03:24:21 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
03:24:21   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:24:21   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.94
03:24:22 SQL> 
03:24:22 SQL> -- Build a new SVM Model
03:24:22 SQL> BEGIN
03:24:22   2  	DBMS_DATA_MINING.CREATE_MODEL(
03:24:22   3  	  model_name	      => '&model_name',
03:24:22   4  	  mining_function     => dbms_data_mining.classification,
03:24:22   5  	  data_table_name     => 'svmc_build_prep',
03:24:22   6  	  case_id_column_name => '&case_id',
03:24:22   7  	  target_column_name  => '&target',
03:24:22   8  	  settings_table_name => 'svmc_settings');
03:24:22   9  END;
03:24:22  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:26.94
03:24:49 SQL> 
03:24:49 SQL> -----------------------------------------------------------------------
03:24:49 SQL> --			       APPLY/score THE MODEL
03:24:49 SQL> -----------------------------------------------------------------------
03:24:49 SQL> 
03:24:49 SQL> -- Cleanup old scoring data preparation objects for repeat runs
03:24:49 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
03:24:49   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:24:49   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
03:24:49 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
03:24:49   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:24:49   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
03:24:49 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
03:24:49   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:24:49   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
03:24:49 SQL> -----------------------
03:24:49 SQL> -- PREPARE SCORING DATA
03:24:49 SQL> --
03:24:49 SQL> -- If the data for model creation has been prepared, then the data
03:24:49 SQL> -- to be scored using the model must be prepared in the same manner
03:24:49 SQL> -- in order to obtain meaningful results.
03:24:49 SQL> --
03:24:49 SQL> -- 1. Missing Value treatment for all Predictors and
03:24:49 SQL> -- 2. Normalization
03:24:49 SQL> -- No outlier treatment will be performed during test and apply. The
03:24:49 SQL> -- normalization step is sufficient, since the normalization parameters
03:24:49 SQL> -- already capture the effects of outlier treatment done with build data.
03:24:49 SQL> --
03:24:49 SQL> BEGIN
03:24:49   2  	-- Xform Test data to replace missing values
03:24:49   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
03:24:49   4  	  miss_table_name => 'svmc_miss_num',
03:24:49   5  	  data_table_name => '&scoretable',
03:24:49   6  	  xform_view_name => 'xformed_apply_miss_num');
03:24:49   7  
03:24:49   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
03:24:49   9  	  miss_table_name => 'svmc_miss_cat',
03:24:49  10  	  data_table_name => '&scoretable',
03:24:49  11  	  xform_view_name => 'xformed_apply_miss_cat');
03:24:49  12  
03:24:49  13  	-- Normalize the data to be scored
03:24:49  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
03:24:49  15  	  norm_table_name => 'svmc_norm',
03:24:49  16  	  data_table_name => '&scoretable',
03:24:49  17  	  xform_view_name => 'svmc_apply_prep');
03:24:49  18  END;
03:24:49  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.14
03:24:50 SQL> 
03:24:50 SQL> -- Use same model_name used in score_gattn.sql
03:24:50 SQL> DEFINE model_name = 'forex14'
03:24:50 SQL> 
03:24:50 SQL> DELETE fxscores6_gattn WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.04
03:24:50 SQL> 
03:24:50 SQL> INSERT INTO fxscores6_gattn (prdate,score,rundate,pair,ydate)
03:24:50   2  SELECT
03:24:50   3  prdate
03:24:50   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
03:24:50   5  ,sysdate
03:24:50   6  ,SUBSTR(prdate,1,3)pair
03:24:50   7  ,SUBSTR(prdate,4,19)ydate
03:24:50   8  FROM svmc_apply_prep
03:24:50   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.16
03:24:50 SQL> @aud_score1day_gattn.sql	2010-12-29 03:05:00
03:24:50 SQL> --
03:24:50 SQL> -- aud_score1day_gattn.sql
03:24:50 SQL> --
03:24:50 SQL> 
03:24:50 SQL> CREATE OR REPLACE VIEW sme AS
03:24:50   2  SELECT
03:24:50   3  'aud'||m.ydate prdate
03:24:50   4  ,NULL gattn
03:24:50   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
03:24:50   6  ,eur_g00
03:24:50   7  ,eur_g01
03:24:50   8  ,eur_g02
03:24:50   9  ,eur_g03
03:24:50  10  ,eur_g04
03:24:50  11  ,eur_g05
03:24:50  12  ,eur_g06
03:24:50  13  ,eur_g07
03:24:50  14  ,eur_g08
03:24:50  15  ,eur_g09
03:24:50  16  ,eur_g10
03:24:50  17  ,eur_g11
03:24:50  18  ,eur_g12
03:24:50  19  ,eur_g13
03:24:50  20  ,eur_g14
03:24:50  21  ,eur_g15
03:24:50  22  ,eur_g16
03:24:50  23  ,eur_g17
03:24:50  24  ,eur_g18
03:24:50  25  ,eur_g19
03:24:50  26  ,eur_g20
03:24:50  27  ,eur_g21
03:24:50  28  ,eur_g22
03:24:50  29  ,eur_g23
03:24:50  30  ,eur_g24
03:24:50  31  ,eur_g25
03:24:50  32  ,eur_g26
03:24:50  33  ,eur_g27
03:24:50  34  ,eur_g28
03:24:50  35  ,eur_g29
03:24:50  36  ,eur_g30
03:24:50  37  ,eur_g31
03:24:50  38  ,eur_g32
03:24:50  39  ,eur_g33
03:24:50  40  ,eur_g34
03:24:50  41  ,eur_g35
03:24:50  42  ,eur_g36
03:24:50  43  ,eur_g37
03:24:50  44  ,eur_g38
03:24:50  45  ,eur_g39
03:24:50  46  ,eur_g40
03:24:50  47  ,eur_g41
03:24:50  48  ,aud_g00
03:24:50  49  ,aud_g01
03:24:50  50  ,aud_g02
03:24:50  51  ,aud_g03
03:24:50  52  ,aud_g04
03:24:50  53  ,aud_g05
03:24:50  54  ,aud_g06
03:24:50  55  ,aud_g07
03:24:50  56  ,aud_g08
03:24:50  57  ,aud_g09
03:24:50  58  ,aud_g10
03:24:50  59  ,aud_g11
03:24:50  60  ,aud_g12
03:24:50  61  ,aud_g13
03:24:50  62  ,aud_g14
03:24:50  63  ,aud_g15
03:24:50  64  ,aud_g16
03:24:50  65  ,aud_g17
03:24:50  66  ,aud_g18
03:24:50  67  ,aud_g19
03:24:50  68  ,aud_g20
03:24:50  69  ,aud_g21
03:24:50  70  ,aud_g22
03:24:50  71  ,aud_g23
03:24:50  72  ,aud_g24
03:24:50  73  ,aud_g25
03:24:50  74  ,aud_g26
03:24:50  75  ,aud_g27
03:24:50  76  ,aud_g28
03:24:50  77  ,aud_g29
03:24:50  78  ,aud_g30
03:24:50  79  ,aud_g31
03:24:50  80  ,aud_g32
03:24:50  81  ,aud_g33
03:24:50  82  ,aud_g34
03:24:50  83  ,aud_g35
03:24:50  84  ,aud_g36
03:24:50  85  ,aud_g37
03:24:50  86  ,aud_g38
03:24:50  87  ,aud_g39
03:24:50  88  ,aud_g40
03:24:50  89  ,aud_g41
03:24:50  90  ,gbp_g00
03:24:50  91  ,gbp_g01
03:24:50  92  ,gbp_g02
03:24:50  93  ,gbp_g03
03:24:50  94  ,gbp_g04
03:24:50  95  ,gbp_g05
03:24:50  96  ,gbp_g06
03:24:50  97  ,gbp_g07
03:24:50  98  ,gbp_g08
03:24:50  99  ,gbp_g09
03:24:50 100  ,gbp_g10
03:24:50 101  ,gbp_g11
03:24:50 102  ,gbp_g12
03:24:50 103  ,gbp_g13
03:24:50 104  ,gbp_g14
03:24:50 105  ,gbp_g15
03:24:50 106  ,gbp_g16
03:24:50 107  ,gbp_g17
03:24:50 108  ,gbp_g18
03:24:50 109  ,gbp_g19
03:24:50 110  ,gbp_g20
03:24:50 111  ,gbp_g21
03:24:50 112  ,gbp_g22
03:24:50 113  ,gbp_g23
03:24:50 114  ,gbp_g24
03:24:50 115  ,gbp_g25
03:24:50 116  ,gbp_g26
03:24:50 117  ,gbp_g27
03:24:50 118  ,gbp_g28
03:24:50 119  ,gbp_g29
03:24:50 120  ,gbp_g30
03:24:50 121  ,gbp_g31
03:24:50 122  ,gbp_g32
03:24:50 123  ,gbp_g33
03:24:50 124  ,gbp_g34
03:24:50 125  ,gbp_g35
03:24:50 126  ,gbp_g36
03:24:50 127  ,gbp_g37
03:24:50 128  ,gbp_g38
03:24:50 129  ,gbp_g39
03:24:50 130  ,gbp_g40
03:24:50 131  ,gbp_g41
03:24:50 132  ,jpy_g00
03:24:50 133  ,jpy_g01
03:24:50 134  ,jpy_g02
03:24:50 135  ,jpy_g03
03:24:50 136  ,jpy_g04
03:24:50 137  ,jpy_g05
03:24:50 138  ,jpy_g06
03:24:50 139  ,jpy_g07
03:24:50 140  ,jpy_g08
03:24:50 141  ,jpy_g09
03:24:50 142  ,jpy_g10
03:24:50 143  ,jpy_g11
03:24:50 144  ,jpy_g12
03:24:50 145  ,jpy_g13
03:24:50 146  ,jpy_g14
03:24:50 147  ,jpy_g15
03:24:50 148  ,jpy_g16
03:24:50 149  ,jpy_g17
03:24:50 150  ,jpy_g18
03:24:50 151  ,jpy_g19
03:24:50 152  ,jpy_g20
03:24:50 153  ,jpy_g21
03:24:50 154  ,jpy_g22
03:24:50 155  ,jpy_g23
03:24:50 156  ,jpy_g24
03:24:50 157  ,jpy_g25
03:24:50 158  ,jpy_g26
03:24:50 159  ,jpy_g27
03:24:50 160  ,jpy_g28
03:24:50 161  ,jpy_g29
03:24:50 162  ,jpy_g30
03:24:50 163  ,jpy_g31
03:24:50 164  ,jpy_g32
03:24:50 165  ,jpy_g33
03:24:50 166  ,jpy_g34
03:24:50 167  ,jpy_g35
03:24:50 168  ,jpy_g36
03:24:50 169  ,jpy_g37
03:24:50 170  ,jpy_g38
03:24:50 171  ,jpy_g39
03:24:50 172  ,jpy_g40
03:24:50 173  ,jpy_g41
03:24:50 174  ,cad_g00
03:24:50 175  ,cad_g01
03:24:50 176  ,cad_g02
03:24:50 177  ,cad_g03
03:24:50 178  ,cad_g04
03:24:50 179  ,cad_g05
03:24:50 180  ,cad_g06
03:24:50 181  ,cad_g07
03:24:50 182  ,cad_g08
03:24:50 183  ,cad_g09
03:24:50 184  ,cad_g10
03:24:50 185  ,cad_g11
03:24:50 186  ,cad_g12
03:24:50 187  ,cad_g13
03:24:50 188  ,cad_g14
03:24:50 189  ,cad_g15
03:24:50 190  ,cad_g16
03:24:50 191  ,cad_g17
03:24:50 192  ,cad_g18
03:24:50 193  ,cad_g19
03:24:50 194  ,cad_g20
03:24:50 195  ,cad_g21
03:24:50 196  ,cad_g22
03:24:50 197  ,cad_g23
03:24:50 198  ,cad_g24
03:24:50 199  ,cad_g25
03:24:50 200  ,cad_g26
03:24:50 201  ,cad_g27
03:24:50 202  ,cad_g28
03:24:50 203  ,cad_g29
03:24:50 204  ,cad_g30
03:24:50 205  ,cad_g31
03:24:50 206  ,cad_g32
03:24:50 207  ,cad_g33
03:24:50 208  ,cad_g34
03:24:50 209  ,cad_g35
03:24:50 210  ,cad_g36
03:24:50 211  ,cad_g37
03:24:50 212  ,cad_g38
03:24:50 213  ,cad_g39
03:24:50 214  ,cad_g40
03:24:50 215  ,cad_g41
03:24:50 216  ,chf_g00
03:24:50 217  ,chf_g01
03:24:50 218  ,chf_g02
03:24:50 219  ,chf_g03
03:24:50 220  ,chf_g04
03:24:50 221  ,chf_g05
03:24:50 222  ,chf_g06
03:24:50 223  ,chf_g07
03:24:50 224  ,chf_g08
03:24:50 225  ,chf_g09
03:24:50 226  ,chf_g10
03:24:50 227  ,chf_g11
03:24:50 228  ,chf_g12
03:24:50 229  ,chf_g13
03:24:50 230  ,chf_g14
03:24:50 231  ,chf_g15
03:24:50 232  ,chf_g16
03:24:50 233  ,chf_g17
03:24:50 234  ,chf_g18
03:24:50 235  ,chf_g19
03:24:50 236  ,chf_g20
03:24:50 237  ,chf_g21
03:24:50 238  ,chf_g22
03:24:50 239  ,chf_g23
03:24:50 240  ,chf_g24
03:24:50 241  ,chf_g25
03:24:50 242  ,chf_g26
03:24:50 243  ,chf_g27
03:24:50 244  ,chf_g28
03:24:50 245  ,chf_g29
03:24:50 246  ,chf_g30
03:24:50 247  ,chf_g31
03:24:50 248  ,chf_g32
03:24:50 249  ,chf_g33
03:24:50 250  ,chf_g34
03:24:50 251  ,chf_g35
03:24:50 252  ,chf_g36
03:24:50 253  ,chf_g37
03:24:50 254  ,chf_g38
03:24:50 255  ,chf_g39
03:24:50 256  ,chf_g40
03:24:50 257  ,chf_g41
03:24:50 258  FROM aud_ms6 m
03:24:50 259  WHERE m.ydate = '&1'||' '||'&2'
03:24:50 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2010-12-29'||' '||'03:05:00'

View created.

Elapsed: 00:00:00.12
03:24:51 SQL> 
03:24:51 SQL> -- rpt
03:24:51 SQL> -- We should see just 1 row:
03:24:51 SQL> 
03:24:51 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
03:24:51 SQL> 
03:24:51 SQL> -- Build the model:
03:24:51 SQL> CREATE OR REPLACE VIEW bme AS
03:24:51   2  SELECT
03:24:51   3  'aud'||m.ydate prdate
03:24:51   4  ,gattn
03:24:51   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
03:24:51   6  ,eur_g00
03:24:51   7  ,eur_g01
03:24:51   8  ,eur_g02
03:24:51   9  ,eur_g03
03:24:51  10  ,eur_g04
03:24:51  11  ,eur_g05
03:24:51  12  ,eur_g06
03:24:51  13  ,eur_g07
03:24:51  14  ,eur_g08
03:24:51  15  ,eur_g09
03:24:51  16  ,eur_g10
03:24:51  17  ,eur_g11
03:24:51  18  ,eur_g12
03:24:51  19  ,eur_g13
03:24:51  20  ,eur_g14
03:24:51  21  ,eur_g15
03:24:51  22  ,eur_g16
03:24:51  23  ,eur_g17
03:24:51  24  ,eur_g18
03:24:51  25  ,eur_g19
03:24:51  26  ,eur_g20
03:24:51  27  ,eur_g21
03:24:51  28  ,eur_g22
03:24:51  29  ,eur_g23
03:24:51  30  ,eur_g24
03:24:51  31  ,eur_g25
03:24:51  32  ,eur_g26
03:24:51  33  ,eur_g27
03:24:51  34  ,eur_g28
03:24:51  35  ,eur_g29
03:24:51  36  ,eur_g30
03:24:51  37  ,eur_g31
03:24:51  38  ,eur_g32
03:24:51  39  ,eur_g33
03:24:51  40  ,eur_g34
03:24:51  41  ,eur_g35
03:24:51  42  ,eur_g36
03:24:51  43  ,eur_g37
03:24:51  44  ,eur_g38
03:24:51  45  ,eur_g39
03:24:51  46  ,eur_g40
03:24:51  47  ,eur_g41
03:24:51  48  ,aud_g00
03:24:51  49  ,aud_g01
03:24:51  50  ,aud_g02
03:24:51  51  ,aud_g03
03:24:51  52  ,aud_g04
03:24:51  53  ,aud_g05
03:24:51  54  ,aud_g06
03:24:51  55  ,aud_g07
03:24:51  56  ,aud_g08
03:24:51  57  ,aud_g09
03:24:51  58  ,aud_g10
03:24:51  59  ,aud_g11
03:24:51  60  ,aud_g12
03:24:51  61  ,aud_g13
03:24:51  62  ,aud_g14
03:24:51  63  ,aud_g15
03:24:51  64  ,aud_g16
03:24:51  65  ,aud_g17
03:24:51  66  ,aud_g18
03:24:51  67  ,aud_g19
03:24:51  68  ,aud_g20
03:24:51  69  ,aud_g21
03:24:51  70  ,aud_g22
03:24:51  71  ,aud_g23
03:24:51  72  ,aud_g24
03:24:51  73  ,aud_g25
03:24:51  74  ,aud_g26
03:24:51  75  ,aud_g27
03:24:51  76  ,aud_g28
03:24:51  77  ,aud_g29
03:24:51  78  ,aud_g30
03:24:51  79  ,aud_g31
03:24:51  80  ,aud_g32
03:24:51  81  ,aud_g33
03:24:51  82  ,aud_g34
03:24:51  83  ,aud_g35
03:24:51  84  ,aud_g36
03:24:51  85  ,aud_g37
03:24:51  86  ,aud_g38
03:24:51  87  ,aud_g39
03:24:51  88  ,aud_g40
03:24:51  89  ,aud_g41
03:24:51  90  ,gbp_g00
03:24:51  91  ,gbp_g01
03:24:51  92  ,gbp_g02
03:24:51  93  ,gbp_g03
03:24:51  94  ,gbp_g04
03:24:51  95  ,gbp_g05
03:24:51  96  ,gbp_g06
03:24:51  97  ,gbp_g07
03:24:51  98  ,gbp_g08
03:24:51  99  ,gbp_g09
03:24:51 100  ,gbp_g10
03:24:51 101  ,gbp_g11
03:24:51 102  ,gbp_g12
03:24:51 103  ,gbp_g13
03:24:51 104  ,gbp_g14
03:24:51 105  ,gbp_g15
03:24:51 106  ,gbp_g16
03:24:51 107  ,gbp_g17
03:24:51 108  ,gbp_g18
03:24:51 109  ,gbp_g19
03:24:51 110  ,gbp_g20
03:24:51 111  ,gbp_g21
03:24:51 112  ,gbp_g22
03:24:51 113  ,gbp_g23
03:24:51 114  ,gbp_g24
03:24:51 115  ,gbp_g25
03:24:51 116  ,gbp_g26
03:24:51 117  ,gbp_g27
03:24:51 118  ,gbp_g28
03:24:51 119  ,gbp_g29
03:24:51 120  ,gbp_g30
03:24:51 121  ,gbp_g31
03:24:51 122  ,gbp_g32
03:24:51 123  ,gbp_g33
03:24:51 124  ,gbp_g34
03:24:51 125  ,gbp_g35
03:24:51 126  ,gbp_g36
03:24:51 127  ,gbp_g37
03:24:51 128  ,gbp_g38
03:24:51 129  ,gbp_g39
03:24:51 130  ,gbp_g40
03:24:51 131  ,gbp_g41
03:24:51 132  ,jpy_g00
03:24:51 133  ,jpy_g01
03:24:51 134  ,jpy_g02
03:24:51 135  ,jpy_g03
03:24:51 136  ,jpy_g04
03:24:51 137  ,jpy_g05
03:24:51 138  ,jpy_g06
03:24:51 139  ,jpy_g07
03:24:51 140  ,jpy_g08
03:24:51 141  ,jpy_g09
03:24:51 142  ,jpy_g10
03:24:51 143  ,jpy_g11
03:24:51 144  ,jpy_g12
03:24:51 145  ,jpy_g13
03:24:51 146  ,jpy_g14
03:24:51 147  ,jpy_g15
03:24:51 148  ,jpy_g16
03:24:51 149  ,jpy_g17
03:24:51 150  ,jpy_g18
03:24:51 151  ,jpy_g19
03:24:51 152  ,jpy_g20
03:24:51 153  ,jpy_g21
03:24:51 154  ,jpy_g22
03:24:51 155  ,jpy_g23
03:24:51 156  ,jpy_g24
03:24:51 157  ,jpy_g25
03:24:51 158  ,jpy_g26
03:24:51 159  ,jpy_g27
03:24:51 160  ,jpy_g28
03:24:51 161  ,jpy_g29
03:24:51 162  ,jpy_g30
03:24:51 163  ,jpy_g31
03:24:51 164  ,jpy_g32
03:24:51 165  ,jpy_g33
03:24:51 166  ,jpy_g34
03:24:51 167  ,jpy_g35
03:24:51 168  ,jpy_g36
03:24:51 169  ,jpy_g37
03:24:51 170  ,jpy_g38
03:24:51 171  ,jpy_g39
03:24:51 172  ,jpy_g40
03:24:51 173  ,jpy_g41
03:24:51 174  ,cad_g00
03:24:51 175  ,cad_g01
03:24:51 176  ,cad_g02
03:24:51 177  ,cad_g03
03:24:51 178  ,cad_g04
03:24:51 179  ,cad_g05
03:24:51 180  ,cad_g06
03:24:51 181  ,cad_g07
03:24:51 182  ,cad_g08
03:24:51 183  ,cad_g09
03:24:51 184  ,cad_g10
03:24:51 185  ,cad_g11
03:24:51 186  ,cad_g12
03:24:51 187  ,cad_g13
03:24:51 188  ,cad_g14
03:24:51 189  ,cad_g15
03:24:51 190  ,cad_g16
03:24:51 191  ,cad_g17
03:24:51 192  ,cad_g18
03:24:51 193  ,cad_g19
03:24:51 194  ,cad_g20
03:24:51 195  ,cad_g21
03:24:51 196  ,cad_g22
03:24:51 197  ,cad_g23
03:24:51 198  ,cad_g24
03:24:51 199  ,cad_g25
03:24:51 200  ,cad_g26
03:24:51 201  ,cad_g27
03:24:51 202  ,cad_g28
03:24:51 203  ,cad_g29
03:24:51 204  ,cad_g30
03:24:51 205  ,cad_g31
03:24:51 206  ,cad_g32
03:24:51 207  ,cad_g33
03:24:51 208  ,cad_g34
03:24:51 209  ,cad_g35
03:24:51 210  ,cad_g36
03:24:51 211  ,cad_g37
03:24:51 212  ,cad_g38
03:24:51 213  ,cad_g39
03:24:51 214  ,cad_g40
03:24:51 215  ,cad_g41
03:24:51 216  ,chf_g00
03:24:51 217  ,chf_g01
03:24:51 218  ,chf_g02
03:24:51 219  ,chf_g03
03:24:51 220  ,chf_g04
03:24:51 221  ,chf_g05
03:24:51 222  ,chf_g06
03:24:51 223  ,chf_g07
03:24:51 224  ,chf_g08
03:24:51 225  ,chf_g09
03:24:51 226  ,chf_g10
03:24:51 227  ,chf_g11
03:24:51 228  ,chf_g12
03:24:51 229  ,chf_g13
03:24:51 230  ,chf_g14
03:24:51 231  ,chf_g15
03:24:51 232  ,chf_g16
03:24:51 233  ,chf_g17
03:24:51 234  ,chf_g18
03:24:51 235  ,chf_g19
03:24:51 236  ,chf_g20
03:24:51 237  ,chf_g21
03:24:51 238  ,chf_g22
03:24:51 239  ,chf_g23
03:24:51 240  ,chf_g24
03:24:51 241  ,chf_g25
03:24:51 242  ,chf_g26
03:24:51 243  ,chf_g27
03:24:51 244  ,chf_g28
03:24:51 245  ,chf_g29
03:24:51 246  ,chf_g30
03:24:51 247  ,chf_g31
03:24:51 248  ,chf_g32
03:24:51 249  ,chf_g33
03:24:51 250  ,chf_g34
03:24:51 251  ,chf_g35
03:24:51 252  ,chf_g36
03:24:51 253  ,chf_g37
03:24:51 254  ,chf_g38
03:24:51 255  ,chf_g39
03:24:51 256  ,chf_g40
03:24:51 257  ,chf_g41
03:24:51 258  FROM aud_ms6 m
03:24:51 259  WHERE gattn IN('nup','up')
03:24:51 260  AND 1+m.ydate < '&1'||' '||'&2'
03:24:51 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2010-12-29'||' '||'03:05:00'

View created.

Elapsed: 00:00:00.12
03:24:51 SQL> 
03:24:51 SQL> -- rpt
03:24:51 SQL> 
03:24:51 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	    12725
up	     6322

Elapsed: 00:00:00.04
03:24:51 SQL> 
03:24:51 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
aud2010-12-28 03:00:00

Elapsed: 00:00:00.03
03:24:51 SQL> 
03:24:51 SQL> -- Now build model from bme and score sme
03:24:51 SQL> @score1gattn.sql
03:24:51 SQL> -- score1gattn.sql
03:24:51 SQL> 
03:24:51 SQL> -- Does the 1st SVM score
03:24:51 SQL> 
03:24:51 SQL> -- Fill up svmc_apply_prep
03:24:51 SQL> @score_gattn.sql
03:24:51 SQL> --
03:24:51 SQL> -- score_gattn.sql
03:24:51 SQL> --
03:24:51 SQL> 
03:24:51 SQL> -- usage: score_gattn.sql
03:24:51 SQL> 
03:24:51 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
03:24:51 SQL> 
03:24:51 SQL> DEFINE target	= 'gattn'
03:24:51 SQL> DEFINE model_name = 'forex14'
03:24:51 SQL> DEFINE bldtable	= 'bme'
03:24:51 SQL> DEFINE scoretable = 'sme'
03:24:51 SQL> DEFINE case_id	= 'prdate'
03:24:51 SQL> 
03:24:51 SQL> -- Define a variable to help me exclude some columns from some data mining calls
03:24:51 SQL> DEFINE exclude1 = "'&target','&case_id'"
03:24:51 SQL> 
03:24:51 SQL> -- Builds an SVM model using pl/sql.
03:24:51 SQL> 
03:24:51 SQL> -----------------------------------------------------------------------
03:24:51 SQL> --			    BUILD THE MODEL
03:24:51 SQL> -----------------------------------------------------------------------
03:24:51 SQL> 
03:24:51 SQL> -- Cleanup old build data preparation objects for repeat runs
03:24:51 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.00
03:24:51 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
03:24:51 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.00
03:24:51 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.00
03:24:51 SQL> 
03:24:51 SQL> 
03:24:51 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
03:24:51 SQL> --
03:24:51 SQL> -- DROP	TABLE svmc_settings ;
03:24:51 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
03:24:51 SQL> -- DELETE svmc_settings;
03:24:51 SQL> 
03:24:51 SQL> -- The default classification algorithm is Naive Bayes. So override
03:24:51 SQL> -- this choice to SVM using a settings table.
03:24:51 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
03:24:51 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
03:24:51 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
03:24:51 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
03:24:51 SQL> -- models.
03:24:51 SQL> --
03:24:51 SQL> 
03:24:51 SQL> -- Do this once and then comment it out.
03:24:51 SQL> -- That makes script go faster.
03:24:51 SQL> -- BEGIN
03:24:51 SQL> -- -- Populate settings table
03:24:51 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
03:24:51 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
03:24:51 SQL> --
03:24:51 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
03:24:51 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
03:24:51 SQL> --
03:24:51 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
03:24:51 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
03:24:51 SQL> --   COMMIT;
03:24:51 SQL> -- END;
03:24:51 SQL> -- /
03:24:51 SQL> 
03:24:51 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
03:24:51 SQL> 
03:24:51 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
03:24:51   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:24:51   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
03:24:51 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
03:24:51   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:24:51   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.10
03:24:51 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
03:24:51   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:24:51   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.16
03:24:51 SQL> 
03:24:51 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
03:24:51   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:24:51   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.10
03:24:51 SQL> 
03:24:51 SQL> --------------------------------
03:24:51 SQL> -- PREPARE BUILD (TRAINING) DATA
03:24:51 SQL> --
03:24:51 SQL> 
03:24:51 SQL> -- 1. Missing Value treatment for all Predictors and
03:24:51 SQL> -- 2. Outlier Treatment and
03:24:51 SQL> -- 3. Normalization are performed below.
03:24:51 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
03:24:51 SQL> --    normalized here.
03:24:51 SQL> 
03:24:51 SQL> BEGIN
03:24:51   2  	-- Perform missing value treatment for all predictors
03:24:51   3  	-- create miss tables
03:24:51   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
03:24:51   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
03:24:51   6  
03:24:51   7  	-- populate miss tables
03:24:51   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
03:24:51   9  	  miss_table_name => 'svmc_miss_num',
03:24:51  10  	  data_table_name => '&bldtable',
03:24:51  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:24:51  12  
03:24:51  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
03:24:51  14  	  miss_table_name => 'svmc_miss_cat',
03:24:51  15  	  data_table_name => '&bldtable',
03:24:51  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:24:51  17  
03:24:51  18  	-- xform input data to replace missing values
03:24:51  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
03:24:51  20  	  miss_table_name => 'svmc_miss_num',
03:24:51  21  	  data_table_name => '&bldtable',
03:24:51  22  	  xform_view_name => 'xformed_build_miss_num');
03:24:51  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
03:24:51  24  	  miss_table_name => 'svmc_miss_cat',
03:24:51  25  	  data_table_name => '&bldtable',
03:24:51  26  	  xform_view_name => 'xformed_build_miss_cat');
03:24:51  27  
03:24:51  28  	-- Perform outlier treatment.
03:24:51  29  	-- create clip table
03:24:51  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
03:24:51  31  
03:24:51  32  	-- populate clip table
03:24:51  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
03:24:51  34  	  clip_table_name => 'svmc_clip',
03:24:51  35  	  data_table_name => '&bldtable',
03:24:51  36  	  tail_frac	  => 0.025,
03:24:51  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:24:51  38  
03:24:51  39  	-- xform input data to winsorized data
03:24:51  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
03:24:51  41  	  clip_table_name => 'svmc_clip',
03:24:51  42  	  data_table_name => '&bldtable',
03:24:51  43  	  xform_view_name => 'svmc_winsor');
03:24:51  44  
03:24:51  45  	-- create normalization table
03:24:51  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
03:24:51  47  
03:24:51  48  	-- populate normalization table based on winsorized data
03:24:51  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
03:24:51  50  	  norm_table_name => 'svmc_norm',
03:24:51  51  	  data_table_name => 'svmc_winsor',
03:24:51  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:24:51  53  
03:24:51  54  	-- normalize the original data
03:24:51  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
03:24:51  56  	  norm_table_name => 'svmc_norm',
03:24:51  57  	  data_table_name => '&bldtable',
03:24:51  58  	  xform_view_name => 'svmc_build_prep');
03:24:51  59  END;
03:24:51  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:18.13
03:25:09 SQL> 
03:25:09 SQL> ---------------------
03:25:09 SQL> -- CREATE A NEW MODEL
03:25:09 SQL> --
03:25:09 SQL> -- Cleanup old model with the same name for repeat runs
03:25:09 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
03:25:09   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:25:09   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.20
03:25:11 SQL> 
03:25:11 SQL> -- Build a new SVM Model
03:25:11 SQL> BEGIN
03:25:11   2  	DBMS_DATA_MINING.CREATE_MODEL(
03:25:11   3  	  model_name	      => '&model_name',
03:25:11   4  	  mining_function     => dbms_data_mining.classification,
03:25:11   5  	  data_table_name     => 'svmc_build_prep',
03:25:11   6  	  case_id_column_name => '&case_id',
03:25:11   7  	  target_column_name  => '&target',
03:25:11   8  	  settings_table_name => 'svmc_settings');
03:25:11   9  END;
03:25:11  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:28.83
03:25:39 SQL> 
03:25:39 SQL> -----------------------------------------------------------------------
03:25:39 SQL> --			       APPLY/score THE MODEL
03:25:39 SQL> -----------------------------------------------------------------------
03:25:39 SQL> 
03:25:39 SQL> -- Cleanup old scoring data preparation objects for repeat runs
03:25:39 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
03:25:39   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:25:39   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
03:25:39 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
03:25:39   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:25:39   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.10
03:25:40 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
03:25:40   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:25:40   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.15
03:25:40 SQL> -----------------------
03:25:40 SQL> -- PREPARE SCORING DATA
03:25:40 SQL> --
03:25:40 SQL> -- If the data for model creation has been prepared, then the data
03:25:40 SQL> -- to be scored using the model must be prepared in the same manner
03:25:40 SQL> -- in order to obtain meaningful results.
03:25:40 SQL> --
03:25:40 SQL> -- 1. Missing Value treatment for all Predictors and
03:25:40 SQL> -- 2. Normalization
03:25:40 SQL> -- No outlier treatment will be performed during test and apply. The
03:25:40 SQL> -- normalization step is sufficient, since the normalization parameters
03:25:40 SQL> -- already capture the effects of outlier treatment done with build data.
03:25:40 SQL> --
03:25:40 SQL> BEGIN
03:25:40   2  	-- Xform Test data to replace missing values
03:25:40   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
03:25:40   4  	  miss_table_name => 'svmc_miss_num',
03:25:40   5  	  data_table_name => '&scoretable',
03:25:40   6  	  xform_view_name => 'xformed_apply_miss_num');
03:25:40   7  
03:25:40   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
03:25:40   9  	  miss_table_name => 'svmc_miss_cat',
03:25:40  10  	  data_table_name => '&scoretable',
03:25:40  11  	  xform_view_name => 'xformed_apply_miss_cat');
03:25:40  12  
03:25:40  13  	-- Normalize the data to be scored
03:25:40  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
03:25:40  15  	  norm_table_name => 'svmc_norm',
03:25:40  16  	  data_table_name => '&scoretable',
03:25:40  17  	  xform_view_name => 'svmc_apply_prep');
03:25:40  18  END;
03:25:40  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.34
03:25:41 SQL> 
03:25:41 SQL> -- Use same model_name used in score_gattn.sql
03:25:41 SQL> DEFINE model_name = 'forex14'
03:25:41 SQL> 
03:25:41 SQL> DELETE fxscores6_gattn WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.04
03:25:41 SQL> 
03:25:41 SQL> INSERT INTO fxscores6_gattn (prdate,score,rundate,pair,ydate)
03:25:41   2  SELECT
03:25:41   3  prdate
03:25:41   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
03:25:41   5  ,sysdate
03:25:41   6  ,SUBSTR(prdate,1,3)pair
03:25:41   7  ,SUBSTR(prdate,4,19)ydate
03:25:41   8  FROM svmc_apply_prep
03:25:41   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.20
03:25:41 SQL> @aud_score1day_gattn.sql	2010-12-29 03:10:00
03:25:41 SQL> --
03:25:41 SQL> -- aud_score1day_gattn.sql
03:25:41 SQL> --
03:25:41 SQL> 
03:25:41 SQL> CREATE OR REPLACE VIEW sme AS
03:25:41   2  SELECT
03:25:41   3  'aud'||m.ydate prdate
03:25:41   4  ,NULL gattn
03:25:41   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
03:25:41   6  ,eur_g00
03:25:41   7  ,eur_g01
03:25:41   8  ,eur_g02
03:25:41   9  ,eur_g03
03:25:41  10  ,eur_g04
03:25:41  11  ,eur_g05
03:25:41  12  ,eur_g06
03:25:41  13  ,eur_g07
03:25:41  14  ,eur_g08
03:25:41  15  ,eur_g09
03:25:41  16  ,eur_g10
03:25:41  17  ,eur_g11
03:25:41  18  ,eur_g12
03:25:41  19  ,eur_g13
03:25:41  20  ,eur_g14
03:25:41  21  ,eur_g15
03:25:41  22  ,eur_g16
03:25:41  23  ,eur_g17
03:25:41  24  ,eur_g18
03:25:41  25  ,eur_g19
03:25:41  26  ,eur_g20
03:25:41  27  ,eur_g21
03:25:41  28  ,eur_g22
03:25:41  29  ,eur_g23
03:25:41  30  ,eur_g24
03:25:41  31  ,eur_g25
03:25:41  32  ,eur_g26
03:25:41  33  ,eur_g27
03:25:41  34  ,eur_g28
03:25:41  35  ,eur_g29
03:25:41  36  ,eur_g30
03:25:41  37  ,eur_g31
03:25:41  38  ,eur_g32
03:25:41  39  ,eur_g33
03:25:41  40  ,eur_g34
03:25:41  41  ,eur_g35
03:25:41  42  ,eur_g36
03:25:41  43  ,eur_g37
03:25:41  44  ,eur_g38
03:25:41  45  ,eur_g39
03:25:41  46  ,eur_g40
03:25:41  47  ,eur_g41
03:25:41  48  ,aud_g00
03:25:41  49  ,aud_g01
03:25:41  50  ,aud_g02
03:25:41  51  ,aud_g03
03:25:41  52  ,aud_g04
03:25:41  53  ,aud_g05
03:25:41  54  ,aud_g06
03:25:41  55  ,aud_g07
03:25:41  56  ,aud_g08
03:25:41  57  ,aud_g09
03:25:41  58  ,aud_g10
03:25:41  59  ,aud_g11
03:25:41  60  ,aud_g12
03:25:41  61  ,aud_g13
03:25:41  62  ,aud_g14
03:25:41  63  ,aud_g15
03:25:41  64  ,aud_g16
03:25:41  65  ,aud_g17
03:25:41  66  ,aud_g18
03:25:41  67  ,aud_g19
03:25:41  68  ,aud_g20
03:25:41  69  ,aud_g21
03:25:41  70  ,aud_g22
03:25:41  71  ,aud_g23
03:25:41  72  ,aud_g24
03:25:41  73  ,aud_g25
03:25:41  74  ,aud_g26
03:25:41  75  ,aud_g27
03:25:41  76  ,aud_g28
03:25:41  77  ,aud_g29
03:25:41  78  ,aud_g30
03:25:41  79  ,aud_g31
03:25:41  80  ,aud_g32
03:25:41  81  ,aud_g33
03:25:41  82  ,aud_g34
03:25:41  83  ,aud_g35
03:25:41  84  ,aud_g36
03:25:41  85  ,aud_g37
03:25:41  86  ,aud_g38
03:25:41  87  ,aud_g39
03:25:41  88  ,aud_g40
03:25:41  89  ,aud_g41
03:25:41  90  ,gbp_g00
03:25:41  91  ,gbp_g01
03:25:41  92  ,gbp_g02
03:25:41  93  ,gbp_g03
03:25:41  94  ,gbp_g04
03:25:41  95  ,gbp_g05
03:25:41  96  ,gbp_g06
03:25:41  97  ,gbp_g07
03:25:41  98  ,gbp_g08
03:25:41  99  ,gbp_g09
03:25:41 100  ,gbp_g10
03:25:41 101  ,gbp_g11
03:25:41 102  ,gbp_g12
03:25:41 103  ,gbp_g13
03:25:41 104  ,gbp_g14
03:25:41 105  ,gbp_g15
03:25:41 106  ,gbp_g16
03:25:41 107  ,gbp_g17
03:25:41 108  ,gbp_g18
03:25:41 109  ,gbp_g19
03:25:41 110  ,gbp_g20
03:25:41 111  ,gbp_g21
03:25:41 112  ,gbp_g22
03:25:41 113  ,gbp_g23
03:25:41 114  ,gbp_g24
03:25:41 115  ,gbp_g25
03:25:41 116  ,gbp_g26
03:25:41 117  ,gbp_g27
03:25:41 118  ,gbp_g28
03:25:41 119  ,gbp_g29
03:25:41 120  ,gbp_g30
03:25:41 121  ,gbp_g31
03:25:41 122  ,gbp_g32
03:25:41 123  ,gbp_g33
03:25:41 124  ,gbp_g34
03:25:41 125  ,gbp_g35
03:25:41 126  ,gbp_g36
03:25:41 127  ,gbp_g37
03:25:41 128  ,gbp_g38
03:25:41 129  ,gbp_g39
03:25:41 130  ,gbp_g40
03:25:41 131  ,gbp_g41
03:25:41 132  ,jpy_g00
03:25:41 133  ,jpy_g01
03:25:41 134  ,jpy_g02
03:25:41 135  ,jpy_g03
03:25:41 136  ,jpy_g04
03:25:41 137  ,jpy_g05
03:25:41 138  ,jpy_g06
03:25:41 139  ,jpy_g07
03:25:41 140  ,jpy_g08
03:25:41 141  ,jpy_g09
03:25:41 142  ,jpy_g10
03:25:41 143  ,jpy_g11
03:25:41 144  ,jpy_g12
03:25:41 145  ,jpy_g13
03:25:41 146  ,jpy_g14
03:25:41 147  ,jpy_g15
03:25:41 148  ,jpy_g16
03:25:41 149  ,jpy_g17
03:25:41 150  ,jpy_g18
03:25:41 151  ,jpy_g19
03:25:41 152  ,jpy_g20
03:25:41 153  ,jpy_g21
03:25:41 154  ,jpy_g22
03:25:41 155  ,jpy_g23
03:25:41 156  ,jpy_g24
03:25:41 157  ,jpy_g25
03:25:41 158  ,jpy_g26
03:25:41 159  ,jpy_g27
03:25:41 160  ,jpy_g28
03:25:41 161  ,jpy_g29
03:25:41 162  ,jpy_g30
03:25:41 163  ,jpy_g31
03:25:41 164  ,jpy_g32
03:25:41 165  ,jpy_g33
03:25:41 166  ,jpy_g34
03:25:41 167  ,jpy_g35
03:25:41 168  ,jpy_g36
03:25:41 169  ,jpy_g37
03:25:41 170  ,jpy_g38
03:25:41 171  ,jpy_g39
03:25:41 172  ,jpy_g40
03:25:41 173  ,jpy_g41
03:25:41 174  ,cad_g00
03:25:41 175  ,cad_g01
03:25:41 176  ,cad_g02
03:25:41 177  ,cad_g03
03:25:41 178  ,cad_g04
03:25:41 179  ,cad_g05
03:25:41 180  ,cad_g06
03:25:41 181  ,cad_g07
03:25:41 182  ,cad_g08
03:25:41 183  ,cad_g09
03:25:41 184  ,cad_g10
03:25:41 185  ,cad_g11
03:25:41 186  ,cad_g12
03:25:41 187  ,cad_g13
03:25:41 188  ,cad_g14
03:25:41 189  ,cad_g15
03:25:41 190  ,cad_g16
03:25:41 191  ,cad_g17
03:25:41 192  ,cad_g18
03:25:41 193  ,cad_g19
03:25:41 194  ,cad_g20
03:25:41 195  ,cad_g21
03:25:41 196  ,cad_g22
03:25:41 197  ,cad_g23
03:25:41 198  ,cad_g24
03:25:41 199  ,cad_g25
03:25:41 200  ,cad_g26
03:25:41 201  ,cad_g27
03:25:41 202  ,cad_g28
03:25:41 203  ,cad_g29
03:25:41 204  ,cad_g30
03:25:41 205  ,cad_g31
03:25:41 206  ,cad_g32
03:25:41 207  ,cad_g33
03:25:41 208  ,cad_g34
03:25:41 209  ,cad_g35
03:25:41 210  ,cad_g36
03:25:41 211  ,cad_g37
03:25:41 212  ,cad_g38
03:25:41 213  ,cad_g39
03:25:41 214  ,cad_g40
03:25:41 215  ,cad_g41
03:25:41 216  ,chf_g00
03:25:41 217  ,chf_g01
03:25:41 218  ,chf_g02
03:25:41 219  ,chf_g03
03:25:41 220  ,chf_g04
03:25:41 221  ,chf_g05
03:25:41 222  ,chf_g06
03:25:41 223  ,chf_g07
03:25:41 224  ,chf_g08
03:25:41 225  ,chf_g09
03:25:41 226  ,chf_g10
03:25:41 227  ,chf_g11
03:25:41 228  ,chf_g12
03:25:41 229  ,chf_g13
03:25:41 230  ,chf_g14
03:25:41 231  ,chf_g15
03:25:41 232  ,chf_g16
03:25:41 233  ,chf_g17
03:25:41 234  ,chf_g18
03:25:41 235  ,chf_g19
03:25:41 236  ,chf_g20
03:25:41 237  ,chf_g21
03:25:41 238  ,chf_g22
03:25:41 239  ,chf_g23
03:25:41 240  ,chf_g24
03:25:41 241  ,chf_g25
03:25:41 242  ,chf_g26
03:25:41 243  ,chf_g27
03:25:41 244  ,chf_g28
03:25:41 245  ,chf_g29
03:25:41 246  ,chf_g30
03:25:41 247  ,chf_g31
03:25:41 248  ,chf_g32
03:25:41 249  ,chf_g33
03:25:41 250  ,chf_g34
03:25:41 251  ,chf_g35
03:25:41 252  ,chf_g36
03:25:41 253  ,chf_g37
03:25:41 254  ,chf_g38
03:25:41 255  ,chf_g39
03:25:41 256  ,chf_g40
03:25:41 257  ,chf_g41
03:25:41 258  FROM aud_ms6 m
03:25:41 259  WHERE m.ydate = '&1'||' '||'&2'
03:25:41 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2010-12-29'||' '||'03:10:00'

View created.

Elapsed: 00:00:00.18
03:25:42 SQL> 
03:25:42 SQL> -- rpt
03:25:42 SQL> -- We should see just 1 row:
03:25:42 SQL> 
03:25:42 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.03
03:25:42 SQL> 
03:25:42 SQL> -- Build the model:
03:25:42 SQL> CREATE OR REPLACE VIEW bme AS
03:25:42   2  SELECT
03:25:42   3  'aud'||m.ydate prdate
03:25:42   4  ,gattn
03:25:42   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
03:25:42   6  ,eur_g00
03:25:42   7  ,eur_g01
03:25:42   8  ,eur_g02
03:25:42   9  ,eur_g03
03:25:42  10  ,eur_g04
03:25:42  11  ,eur_g05
03:25:42  12  ,eur_g06
03:25:42  13  ,eur_g07
03:25:42  14  ,eur_g08
03:25:42  15  ,eur_g09
03:25:42  16  ,eur_g10
03:25:42  17  ,eur_g11
03:25:42  18  ,eur_g12
03:25:42  19  ,eur_g13
03:25:42  20  ,eur_g14
03:25:42  21  ,eur_g15
03:25:42  22  ,eur_g16
03:25:42  23  ,eur_g17
03:25:42  24  ,eur_g18
03:25:42  25  ,eur_g19
03:25:42  26  ,eur_g20
03:25:42  27  ,eur_g21
03:25:42  28  ,eur_g22
03:25:42  29  ,eur_g23
03:25:42  30  ,eur_g24
03:25:42  31  ,eur_g25
03:25:42  32  ,eur_g26
03:25:42  33  ,eur_g27
03:25:42  34  ,eur_g28
03:25:42  35  ,eur_g29
03:25:42  36  ,eur_g30
03:25:42  37  ,eur_g31
03:25:42  38  ,eur_g32
03:25:42  39  ,eur_g33
03:25:42  40  ,eur_g34
03:25:42  41  ,eur_g35
03:25:42  42  ,eur_g36
03:25:42  43  ,eur_g37
03:25:42  44  ,eur_g38
03:25:42  45  ,eur_g39
03:25:42  46  ,eur_g40
03:25:42  47  ,eur_g41
03:25:42  48  ,aud_g00
03:25:42  49  ,aud_g01
03:25:42  50  ,aud_g02
03:25:42  51  ,aud_g03
03:25:42  52  ,aud_g04
03:25:42  53  ,aud_g05
03:25:42  54  ,aud_g06
03:25:42  55  ,aud_g07
03:25:42  56  ,aud_g08
03:25:42  57  ,aud_g09
03:25:42  58  ,aud_g10
03:25:42  59  ,aud_g11
03:25:42  60  ,aud_g12
03:25:42  61  ,aud_g13
03:25:42  62  ,aud_g14
03:25:42  63  ,aud_g15
03:25:42  64  ,aud_g16
03:25:42  65  ,aud_g17
03:25:42  66  ,aud_g18
03:25:42  67  ,aud_g19
03:25:42  68  ,aud_g20
03:25:42  69  ,aud_g21
03:25:42  70  ,aud_g22
03:25:42  71  ,aud_g23
03:25:42  72  ,aud_g24
03:25:42  73  ,aud_g25
03:25:42  74  ,aud_g26
03:25:42  75  ,aud_g27
03:25:42  76  ,aud_g28
03:25:42  77  ,aud_g29
03:25:42  78  ,aud_g30
03:25:42  79  ,aud_g31
03:25:42  80  ,aud_g32
03:25:42  81  ,aud_g33
03:25:42  82  ,aud_g34
03:25:42  83  ,aud_g35
03:25:42  84  ,aud_g36
03:25:42  85  ,aud_g37
03:25:42  86  ,aud_g38
03:25:42  87  ,aud_g39
03:25:42  88  ,aud_g40
03:25:42  89  ,aud_g41
03:25:42  90  ,gbp_g00
03:25:42  91  ,gbp_g01
03:25:42  92  ,gbp_g02
03:25:42  93  ,gbp_g03
03:25:42  94  ,gbp_g04
03:25:42  95  ,gbp_g05
03:25:42  96  ,gbp_g06
03:25:42  97  ,gbp_g07
03:25:42  98  ,gbp_g08
03:25:42  99  ,gbp_g09
03:25:42 100  ,gbp_g10
03:25:42 101  ,gbp_g11
03:25:42 102  ,gbp_g12
03:25:42 103  ,gbp_g13
03:25:42 104  ,gbp_g14
03:25:42 105  ,gbp_g15
03:25:42 106  ,gbp_g16
03:25:42 107  ,gbp_g17
03:25:42 108  ,gbp_g18
03:25:42 109  ,gbp_g19
03:25:42 110  ,gbp_g20
03:25:42 111  ,gbp_g21
03:25:42 112  ,gbp_g22
03:25:42 113  ,gbp_g23
03:25:42 114  ,gbp_g24
03:25:42 115  ,gbp_g25
03:25:42 116  ,gbp_g26
03:25:42 117  ,gbp_g27
03:25:42 118  ,gbp_g28
03:25:42 119  ,gbp_g29
03:25:42 120  ,gbp_g30
03:25:42 121  ,gbp_g31
03:25:42 122  ,gbp_g32
03:25:42 123  ,gbp_g33
03:25:42 124  ,gbp_g34
03:25:42 125  ,gbp_g35
03:25:42 126  ,gbp_g36
03:25:42 127  ,gbp_g37
03:25:42 128  ,gbp_g38
03:25:42 129  ,gbp_g39
03:25:42 130  ,gbp_g40
03:25:42 131  ,gbp_g41
03:25:42 132  ,jpy_g00
03:25:42 133  ,jpy_g01
03:25:42 134  ,jpy_g02
03:25:42 135  ,jpy_g03
03:25:42 136  ,jpy_g04
03:25:42 137  ,jpy_g05
03:25:42 138  ,jpy_g06
03:25:42 139  ,jpy_g07
03:25:42 140  ,jpy_g08
03:25:42 141  ,jpy_g09
03:25:42 142  ,jpy_g10
03:25:42 143  ,jpy_g11
03:25:42 144  ,jpy_g12
03:25:42 145  ,jpy_g13
03:25:42 146  ,jpy_g14
03:25:42 147  ,jpy_g15
03:25:42 148  ,jpy_g16
03:25:42 149  ,jpy_g17
03:25:42 150  ,jpy_g18
03:25:42 151  ,jpy_g19
03:25:42 152  ,jpy_g20
03:25:42 153  ,jpy_g21
03:25:42 154  ,jpy_g22
03:25:42 155  ,jpy_g23
03:25:42 156  ,jpy_g24
03:25:42 157  ,jpy_g25
03:25:42 158  ,jpy_g26
03:25:42 159  ,jpy_g27
03:25:42 160  ,jpy_g28
03:25:42 161  ,jpy_g29
03:25:42 162  ,jpy_g30
03:25:42 163  ,jpy_g31
03:25:42 164  ,jpy_g32
03:25:42 165  ,jpy_g33
03:25:42 166  ,jpy_g34
03:25:42 167  ,jpy_g35
03:25:42 168  ,jpy_g36
03:25:42 169  ,jpy_g37
03:25:42 170  ,jpy_g38
03:25:42 171  ,jpy_g39
03:25:42 172  ,jpy_g40
03:25:42 173  ,jpy_g41
03:25:42 174  ,cad_g00
03:25:42 175  ,cad_g01
03:25:42 176  ,cad_g02
03:25:42 177  ,cad_g03
03:25:42 178  ,cad_g04
03:25:42 179  ,cad_g05
03:25:42 180  ,cad_g06
03:25:42 181  ,cad_g07
03:25:42 182  ,cad_g08
03:25:42 183  ,cad_g09
03:25:42 184  ,cad_g10
03:25:42 185  ,cad_g11
03:25:42 186  ,cad_g12
03:25:42 187  ,cad_g13
03:25:42 188  ,cad_g14
03:25:42 189  ,cad_g15
03:25:42 190  ,cad_g16
03:25:42 191  ,cad_g17
03:25:42 192  ,cad_g18
03:25:42 193  ,cad_g19
03:25:42 194  ,cad_g20
03:25:42 195  ,cad_g21
03:25:42 196  ,cad_g22
03:25:42 197  ,cad_g23
03:25:42 198  ,cad_g24
03:25:42 199  ,cad_g25
03:25:42 200  ,cad_g26
03:25:42 201  ,cad_g27
03:25:42 202  ,cad_g28
03:25:42 203  ,cad_g29
03:25:42 204  ,cad_g30
03:25:42 205  ,cad_g31
03:25:42 206  ,cad_g32
03:25:42 207  ,cad_g33
03:25:42 208  ,cad_g34
03:25:42 209  ,cad_g35
03:25:42 210  ,cad_g36
03:25:42 211  ,cad_g37
03:25:42 212  ,cad_g38
03:25:42 213  ,cad_g39
03:25:42 214  ,cad_g40
03:25:42 215  ,cad_g41
03:25:42 216  ,chf_g00
03:25:42 217  ,chf_g01
03:25:42 218  ,chf_g02
03:25:42 219  ,chf_g03
03:25:42 220  ,chf_g04
03:25:42 221  ,chf_g05
03:25:42 222  ,chf_g06
03:25:42 223  ,chf_g07
03:25:42 224  ,chf_g08
03:25:42 225  ,chf_g09
03:25:42 226  ,chf_g10
03:25:42 227  ,chf_g11
03:25:42 228  ,chf_g12
03:25:42 229  ,chf_g13
03:25:42 230  ,chf_g14
03:25:42 231  ,chf_g15
03:25:42 232  ,chf_g16
03:25:42 233  ,chf_g17
03:25:42 234  ,chf_g18
03:25:42 235  ,chf_g19
03:25:42 236  ,chf_g20
03:25:42 237  ,chf_g21
03:25:42 238  ,chf_g22
03:25:42 239  ,chf_g23
03:25:42 240  ,chf_g24
03:25:42 241  ,chf_g25
03:25:42 242  ,chf_g26
03:25:42 243  ,chf_g27
03:25:42 244  ,chf_g28
03:25:42 245  ,chf_g29
03:25:42 246  ,chf_g30
03:25:42 247  ,chf_g31
03:25:42 248  ,chf_g32
03:25:42 249  ,chf_g33
03:25:42 250  ,chf_g34
03:25:42 251  ,chf_g35
03:25:42 252  ,chf_g36
03:25:42 253  ,chf_g37
03:25:42 254  ,chf_g38
03:25:42 255  ,chf_g39
03:25:42 256  ,chf_g40
03:25:42 257  ,chf_g41
03:25:42 258  FROM aud_ms6 m
03:25:42 259  WHERE gattn IN('nup','up')
03:25:42 260  AND 1+m.ydate < '&1'||' '||'&2'
03:25:42 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2010-12-29'||' '||'03:10:00'

View created.

Elapsed: 00:00:00.18
03:25:42 SQL> 
03:25:42 SQL> -- rpt
03:25:42 SQL> 
03:25:42 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	    12726
up	     6322

Elapsed: 00:00:00.05
03:25:42 SQL> 
03:25:42 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
aud2010-12-28 03:05:00

Elapsed: 00:00:00.03
03:25:42 SQL> 
03:25:42 SQL> -- Now build model from bme and score sme
03:25:42 SQL> @score1gattn.sql
03:25:42 SQL> -- score1gattn.sql
03:25:42 SQL> 
03:25:42 SQL> -- Does the 1st SVM score
03:25:42 SQL> 
03:25:42 SQL> -- Fill up svmc_apply_prep
03:25:42 SQL> @score_gattn.sql
03:25:42 SQL> --
03:25:42 SQL> -- score_gattn.sql
03:25:42 SQL> --
03:25:42 SQL> 
03:25:42 SQL> -- usage: score_gattn.sql
03:25:42 SQL> 
03:25:42 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
03:25:42 SQL> 
03:25:42 SQL> DEFINE target	= 'gattn'
03:25:42 SQL> DEFINE model_name = 'forex14'
03:25:42 SQL> DEFINE bldtable	= 'bme'
03:25:42 SQL> DEFINE scoretable = 'sme'
03:25:42 SQL> DEFINE case_id	= 'prdate'
03:25:42 SQL> 
03:25:42 SQL> -- Define a variable to help me exclude some columns from some data mining calls
03:25:42 SQL> DEFINE exclude1 = "'&target','&case_id'"
03:25:42 SQL> 
03:25:42 SQL> -- Builds an SVM model using pl/sql.
03:25:42 SQL> 
03:25:42 SQL> -----------------------------------------------------------------------
03:25:42 SQL> --			    BUILD THE MODEL
03:25:42 SQL> -----------------------------------------------------------------------
03:25:42 SQL> 
03:25:42 SQL> -- Cleanup old build data preparation objects for repeat runs
03:25:42 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.01
03:25:42 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
03:25:42 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.00
03:25:42 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.00
03:25:42 SQL> 
03:25:42 SQL> 
03:25:42 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
03:25:42 SQL> --
03:25:42 SQL> -- DROP	TABLE svmc_settings ;
03:25:42 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
03:25:42 SQL> -- DELETE svmc_settings;
03:25:42 SQL> 
03:25:42 SQL> -- The default classification algorithm is Naive Bayes. So override
03:25:42 SQL> -- this choice to SVM using a settings table.
03:25:42 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
03:25:42 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
03:25:42 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
03:25:42 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
03:25:42 SQL> -- models.
03:25:42 SQL> --
03:25:42 SQL> 
03:25:42 SQL> -- Do this once and then comment it out.
03:25:42 SQL> -- That makes script go faster.
03:25:42 SQL> -- BEGIN
03:25:42 SQL> -- -- Populate settings table
03:25:42 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
03:25:42 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
03:25:42 SQL> --
03:25:42 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
03:25:42 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
03:25:42 SQL> --
03:25:42 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
03:25:42 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
03:25:42 SQL> --   COMMIT;
03:25:42 SQL> -- END;
03:25:42 SQL> -- /
03:25:42 SQL> 
03:25:42 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
03:25:42 SQL> 
03:25:42 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
03:25:42   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:25:42   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.12
03:25:42 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
03:25:42   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:25:42   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.11
03:25:42 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
03:25:42   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:25:42   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
03:25:42 SQL> 
03:25:42 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
03:25:42   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:25:42   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
03:25:42 SQL> 
03:25:42 SQL> --------------------------------
03:25:42 SQL> -- PREPARE BUILD (TRAINING) DATA
03:25:42 SQL> --
03:25:42 SQL> 
03:25:42 SQL> -- 1. Missing Value treatment for all Predictors and
03:25:42 SQL> -- 2. Outlier Treatment and
03:25:42 SQL> -- 3. Normalization are performed below.
03:25:42 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
03:25:42 SQL> --    normalized here.
03:25:42 SQL> 
03:25:42 SQL> BEGIN
03:25:42   2  	-- Perform missing value treatment for all predictors
03:25:42   3  	-- create miss tables
03:25:42   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
03:25:42   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
03:25:42   6  
03:25:42   7  	-- populate miss tables
03:25:42   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
03:25:42   9  	  miss_table_name => 'svmc_miss_num',
03:25:42  10  	  data_table_name => '&bldtable',
03:25:42  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:25:42  12  
03:25:42  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
03:25:42  14  	  miss_table_name => 'svmc_miss_cat',
03:25:42  15  	  data_table_name => '&bldtable',
03:25:42  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:25:42  17  
03:25:42  18  	-- xform input data to replace missing values
03:25:42  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
03:25:42  20  	  miss_table_name => 'svmc_miss_num',
03:25:42  21  	  data_table_name => '&bldtable',
03:25:42  22  	  xform_view_name => 'xformed_build_miss_num');
03:25:42  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
03:25:42  24  	  miss_table_name => 'svmc_miss_cat',
03:25:42  25  	  data_table_name => '&bldtable',
03:25:42  26  	  xform_view_name => 'xformed_build_miss_cat');
03:25:42  27  
03:25:42  28  	-- Perform outlier treatment.
03:25:42  29  	-- create clip table
03:25:42  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
03:25:42  31  
03:25:42  32  	-- populate clip table
03:25:42  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
03:25:42  34  	  clip_table_name => 'svmc_clip',
03:25:42  35  	  data_table_name => '&bldtable',
03:25:42  36  	  tail_frac	  => 0.025,
03:25:42  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:25:42  38  
03:25:42  39  	-- xform input data to winsorized data
03:25:42  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
03:25:42  41  	  clip_table_name => 'svmc_clip',
03:25:42  42  	  data_table_name => '&bldtable',
03:25:42  43  	  xform_view_name => 'svmc_winsor');
03:25:42  44  
03:25:42  45  	-- create normalization table
03:25:42  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
03:25:42  47  
03:25:42  48  	-- populate normalization table based on winsorized data
03:25:42  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
03:25:42  50  	  norm_table_name => 'svmc_norm',
03:25:42  51  	  data_table_name => 'svmc_winsor',
03:25:42  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:25:42  53  
03:25:42  54  	-- normalize the original data
03:25:42  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
03:25:42  56  	  norm_table_name => 'svmc_norm',
03:25:42  57  	  data_table_name => '&bldtable',
03:25:42  58  	  xform_view_name => 'svmc_build_prep');
03:25:42  59  END;
03:25:42  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:17.62
03:26:00 SQL> 
03:26:00 SQL> ---------------------
03:26:00 SQL> -- CREATE A NEW MODEL
03:26:00 SQL> --
03:26:00 SQL> -- Cleanup old model with the same name for repeat runs
03:26:00 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
03:26:00   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:26:00   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.15
03:26:01 SQL> 
03:26:01 SQL> -- Build a new SVM Model
03:26:01 SQL> BEGIN
03:26:01   2  	DBMS_DATA_MINING.CREATE_MODEL(
03:26:01   3  	  model_name	      => '&model_name',
03:26:01   4  	  mining_function     => dbms_data_mining.classification,
03:26:01   5  	  data_table_name     => 'svmc_build_prep',
03:26:01   6  	  case_id_column_name => '&case_id',
03:26:01   7  	  target_column_name  => '&target',
03:26:01   8  	  settings_table_name => 'svmc_settings');
03:26:01   9  END;
03:26:01  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:26.79
03:26:28 SQL> 
03:26:28 SQL> -----------------------------------------------------------------------
03:26:28 SQL> --			       APPLY/score THE MODEL
03:26:28 SQL> -----------------------------------------------------------------------
03:26:28 SQL> 
03:26:28 SQL> -- Cleanup old scoring data preparation objects for repeat runs
03:26:28 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
03:26:28   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:26:28   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
03:26:28 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
03:26:28   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:26:28   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.09
03:26:28 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
03:26:28   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:26:28   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.11
03:26:28 SQL> -----------------------
03:26:28 SQL> -- PREPARE SCORING DATA
03:26:28 SQL> --
03:26:28 SQL> -- If the data for model creation has been prepared, then the data
03:26:28 SQL> -- to be scored using the model must be prepared in the same manner
03:26:28 SQL> -- in order to obtain meaningful results.
03:26:28 SQL> --
03:26:28 SQL> -- 1. Missing Value treatment for all Predictors and
03:26:28 SQL> -- 2. Normalization
03:26:28 SQL> -- No outlier treatment will be performed during test and apply. The
03:26:28 SQL> -- normalization step is sufficient, since the normalization parameters
03:26:28 SQL> -- already capture the effects of outlier treatment done with build data.
03:26:28 SQL> --
03:26:28 SQL> BEGIN
03:26:28   2  	-- Xform Test data to replace missing values
03:26:28   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
03:26:28   4  	  miss_table_name => 'svmc_miss_num',
03:26:28   5  	  data_table_name => '&scoretable',
03:26:28   6  	  xform_view_name => 'xformed_apply_miss_num');
03:26:28   7  
03:26:28   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
03:26:28   9  	  miss_table_name => 'svmc_miss_cat',
03:26:28  10  	  data_table_name => '&scoretable',
03:26:28  11  	  xform_view_name => 'xformed_apply_miss_cat');
03:26:28  12  
03:26:28  13  	-- Normalize the data to be scored
03:26:28  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
03:26:28  15  	  norm_table_name => 'svmc_norm',
03:26:28  16  	  data_table_name => '&scoretable',
03:26:28  17  	  xform_view_name => 'svmc_apply_prep');
03:26:28  18  END;
03:26:28  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.22
03:26:29 SQL> 
03:26:29 SQL> -- Use same model_name used in score_gattn.sql
03:26:29 SQL> DEFINE model_name = 'forex14'
03:26:29 SQL> 
03:26:29 SQL> DELETE fxscores6_gattn WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.05
03:26:29 SQL> 
03:26:29 SQL> INSERT INTO fxscores6_gattn (prdate,score,rundate,pair,ydate)
03:26:29   2  SELECT
03:26:29   3  prdate
03:26:29   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
03:26:29   5  ,sysdate
03:26:29   6  ,SUBSTR(prdate,1,3)pair
03:26:29   7  ,SUBSTR(prdate,4,19)ydate
03:26:29   8  FROM svmc_apply_prep
03:26:29   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.17
03:26:30 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
