
SQL*Plus: Release 11.2.0.1.0 Production on Fri Dec 31 00:31:31 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

00:31:31 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
00:31:31 SQL> 00:31:31 SQL> @aud_score1day.sql  2010-12-31 00:10:00
00:31:31 SQL> --
00:31:31 SQL> -- aud_score1day.sql
00:31:31 SQL> --
00:31:31 SQL> 
00:31:31 SQL> CREATE OR REPLACE VIEW sme AS
00:31:31   2  SELECT
00:31:31   3  'aud'||m.ydate prdate
00:31:31   4  ,NULL gatt
00:31:31   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
00:31:31   6  ,eur_g00
00:31:31   7  ,eur_g01
00:31:31   8  ,eur_g02
00:31:31   9  ,eur_g03
00:31:31  10  ,eur_g04
00:31:31  11  ,eur_g05
00:31:31  12  ,eur_g06
00:31:31  13  ,eur_g07
00:31:31  14  ,eur_g08
00:31:31  15  ,eur_g09
00:31:31  16  ,eur_g10
00:31:31  17  ,eur_g11
00:31:31  18  ,eur_g12
00:31:31  19  ,eur_g13
00:31:31  20  ,eur_g14
00:31:31  21  ,eur_g15
00:31:31  22  ,eur_g16
00:31:31  23  ,eur_g17
00:31:31  24  ,eur_g18
00:31:31  25  ,eur_g19
00:31:31  26  ,eur_g20
00:31:31  27  ,eur_g21
00:31:31  28  ,eur_g22
00:31:31  29  ,eur_g23
00:31:31  30  ,eur_g24
00:31:31  31  ,eur_g25
00:31:31  32  ,eur_g26
00:31:31  33  ,eur_g27
00:31:31  34  ,eur_g28
00:31:31  35  ,eur_g29
00:31:31  36  ,eur_g30
00:31:31  37  ,eur_g31
00:31:31  38  ,eur_g32
00:31:31  39  ,eur_g33
00:31:31  40  ,eur_g34
00:31:31  41  ,eur_g35
00:31:31  42  ,eur_g36
00:31:31  43  ,eur_g37
00:31:31  44  ,eur_g38
00:31:31  45  ,eur_g39
00:31:31  46  ,eur_g40
00:31:31  47  ,eur_g41
00:31:31  48  ,aud_g00
00:31:31  49  ,aud_g01
00:31:31  50  ,aud_g02
00:31:31  51  ,aud_g03
00:31:31  52  ,aud_g04
00:31:31  53  ,aud_g05
00:31:31  54  ,aud_g06
00:31:31  55  ,aud_g07
00:31:31  56  ,aud_g08
00:31:31  57  ,aud_g09
00:31:31  58  ,aud_g10
00:31:31  59  ,aud_g11
00:31:31  60  ,aud_g12
00:31:31  61  ,aud_g13
00:31:31  62  ,aud_g14
00:31:31  63  ,aud_g15
00:31:31  64  ,aud_g16
00:31:31  65  ,aud_g17
00:31:31  66  ,aud_g18
00:31:31  67  ,aud_g19
00:31:31  68  ,aud_g20
00:31:31  69  ,aud_g21
00:31:31  70  ,aud_g22
00:31:31  71  ,aud_g23
00:31:31  72  ,aud_g24
00:31:31  73  ,aud_g25
00:31:31  74  ,aud_g26
00:31:31  75  ,aud_g27
00:31:31  76  ,aud_g28
00:31:31  77  ,aud_g29
00:31:31  78  ,aud_g30
00:31:31  79  ,aud_g31
00:31:31  80  ,aud_g32
00:31:31  81  ,aud_g33
00:31:31  82  ,aud_g34
00:31:31  83  ,aud_g35
00:31:31  84  ,aud_g36
00:31:31  85  ,aud_g37
00:31:31  86  ,aud_g38
00:31:31  87  ,aud_g39
00:31:31  88  ,aud_g40
00:31:31  89  ,aud_g41
00:31:31  90  ,gbp_g00
00:31:31  91  ,gbp_g01
00:31:31  92  ,gbp_g02
00:31:31  93  ,gbp_g03
00:31:31  94  ,gbp_g04
00:31:31  95  ,gbp_g05
00:31:31  96  ,gbp_g06
00:31:31  97  ,gbp_g07
00:31:31  98  ,gbp_g08
00:31:31  99  ,gbp_g09
00:31:31 100  ,gbp_g10
00:31:31 101  ,gbp_g11
00:31:31 102  ,gbp_g12
00:31:31 103  ,gbp_g13
00:31:31 104  ,gbp_g14
00:31:31 105  ,gbp_g15
00:31:31 106  ,gbp_g16
00:31:31 107  ,gbp_g17
00:31:31 108  ,gbp_g18
00:31:31 109  ,gbp_g19
00:31:31 110  ,gbp_g20
00:31:31 111  ,gbp_g21
00:31:31 112  ,gbp_g22
00:31:31 113  ,gbp_g23
00:31:31 114  ,gbp_g24
00:31:31 115  ,gbp_g25
00:31:31 116  ,gbp_g26
00:31:31 117  ,gbp_g27
00:31:31 118  ,gbp_g28
00:31:31 119  ,gbp_g29
00:31:31 120  ,gbp_g30
00:31:31 121  ,gbp_g31
00:31:31 122  ,gbp_g32
00:31:31 123  ,gbp_g33
00:31:31 124  ,gbp_g34
00:31:31 125  ,gbp_g35
00:31:31 126  ,gbp_g36
00:31:31 127  ,gbp_g37
00:31:31 128  ,gbp_g38
00:31:31 129  ,gbp_g39
00:31:31 130  ,gbp_g40
00:31:31 131  ,gbp_g41
00:31:31 132  ,jpy_g00
00:31:31 133  ,jpy_g01
00:31:31 134  ,jpy_g02
00:31:31 135  ,jpy_g03
00:31:31 136  ,jpy_g04
00:31:32 137  ,jpy_g05
00:31:32 138  ,jpy_g06
00:31:32 139  ,jpy_g07
00:31:32 140  ,jpy_g08
00:31:32 141  ,jpy_g09
00:31:32 142  ,jpy_g10
00:31:32 143  ,jpy_g11
00:31:32 144  ,jpy_g12
00:31:32 145  ,jpy_g13
00:31:32 146  ,jpy_g14
00:31:32 147  ,jpy_g15
00:31:32 148  ,jpy_g16
00:31:32 149  ,jpy_g17
00:31:32 150  ,jpy_g18
00:31:32 151  ,jpy_g19
00:31:32 152  ,jpy_g20
00:31:32 153  ,jpy_g21
00:31:32 154  ,jpy_g22
00:31:32 155  ,jpy_g23
00:31:32 156  ,jpy_g24
00:31:32 157  ,jpy_g25
00:31:32 158  ,jpy_g26
00:31:32 159  ,jpy_g27
00:31:32 160  ,jpy_g28
00:31:32 161  ,jpy_g29
00:31:32 162  ,jpy_g30
00:31:32 163  ,jpy_g31
00:31:32 164  ,jpy_g32
00:31:32 165  ,jpy_g33
00:31:32 166  ,jpy_g34
00:31:32 167  ,jpy_g35
00:31:32 168  ,jpy_g36
00:31:32 169  ,jpy_g37
00:31:32 170  ,jpy_g38
00:31:32 171  ,jpy_g39
00:31:32 172  ,jpy_g40
00:31:32 173  ,jpy_g41
00:31:32 174  ,cad_g00
00:31:32 175  ,cad_g01
00:31:32 176  ,cad_g02
00:31:32 177  ,cad_g03
00:31:32 178  ,cad_g04
00:31:32 179  ,cad_g05
00:31:32 180  ,cad_g06
00:31:32 181  ,cad_g07
00:31:32 182  ,cad_g08
00:31:32 183  ,cad_g09
00:31:32 184  ,cad_g10
00:31:32 185  ,cad_g11
00:31:32 186  ,cad_g12
00:31:32 187  ,cad_g13
00:31:32 188  ,cad_g14
00:31:32 189  ,cad_g15
00:31:32 190  ,cad_g16
00:31:32 191  ,cad_g17
00:31:32 192  ,cad_g18
00:31:32 193  ,cad_g19
00:31:32 194  ,cad_g20
00:31:32 195  ,cad_g21
00:31:32 196  ,cad_g22
00:31:32 197  ,cad_g23
00:31:32 198  ,cad_g24
00:31:32 199  ,cad_g25
00:31:32 200  ,cad_g26
00:31:32 201  ,cad_g27
00:31:32 202  ,cad_g28
00:31:32 203  ,cad_g29
00:31:32 204  ,cad_g30
00:31:32 205  ,cad_g31
00:31:32 206  ,cad_g32
00:31:32 207  ,cad_g33
00:31:32 208  ,cad_g34
00:31:32 209  ,cad_g35
00:31:32 210  ,cad_g36
00:31:32 211  ,cad_g37
00:31:32 212  ,cad_g38
00:31:32 213  ,cad_g39
00:31:32 214  ,cad_g40
00:31:32 215  ,cad_g41
00:31:32 216  ,chf_g00
00:31:32 217  ,chf_g01
00:31:32 218  ,chf_g02
00:31:32 219  ,chf_g03
00:31:32 220  ,chf_g04
00:31:32 221  ,chf_g05
00:31:32 222  ,chf_g06
00:31:32 223  ,chf_g07
00:31:32 224  ,chf_g08
00:31:32 225  ,chf_g09
00:31:32 226  ,chf_g10
00:31:32 227  ,chf_g11
00:31:32 228  ,chf_g12
00:31:32 229  ,chf_g13
00:31:32 230  ,chf_g14
00:31:32 231  ,chf_g15
00:31:32 232  ,chf_g16
00:31:32 233  ,chf_g17
00:31:32 234  ,chf_g18
00:31:32 235  ,chf_g19
00:31:32 236  ,chf_g20
00:31:32 237  ,chf_g21
00:31:32 238  ,chf_g22
00:31:32 239  ,chf_g23
00:31:32 240  ,chf_g24
00:31:32 241  ,chf_g25
00:31:32 242  ,chf_g26
00:31:32 243  ,chf_g27
00:31:32 244  ,chf_g28
00:31:32 245  ,chf_g29
00:31:32 246  ,chf_g30
00:31:32 247  ,chf_g31
00:31:32 248  ,chf_g32
00:31:32 249  ,chf_g33
00:31:32 250  ,chf_g34
00:31:32 251  ,chf_g35
00:31:32 252  ,chf_g36
00:31:32 253  ,chf_g37
00:31:32 254  ,chf_g38
00:31:32 255  ,chf_g39
00:31:32 256  ,chf_g40
00:31:32 257  ,chf_g41
00:31:32 258  FROM aud_ms6 m
00:31:32 259  WHERE m.ydate = '&1'||' '||'&2'
00:31:32 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2010-12-31'||' '||'00:10:00'

View created.

Elapsed: 00:00:00.13
00:31:32 SQL> 
00:31:32 SQL> -- rpt
00:31:32 SQL> -- We should see just 1 row:
00:31:32 SQL> 
00:31:32 SQL> SELECT COUNT(prdate) FROM sme
00:31:32   2  
00:31:32 SQL> -- Build the model:
00:31:32 SQL> CREATE OR REPLACE VIEW bme AS
00:31:32   2  SELECT
00:31:32   3  'aud'||m.ydate prdate
00:31:32   4  ,gatt
00:31:32   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
00:31:32   6  ,eur_g00
00:31:32   7  ,eur_g01
00:31:32   8  ,eur_g02
00:31:32   9  ,eur_g03
00:31:32  10  ,eur_g04
00:31:32  11  ,eur_g05
00:31:32  12  ,eur_g06
00:31:32  13  ,eur_g07
00:31:32  14  ,eur_g08
00:31:32  15  ,eur_g09
00:31:32  16  ,eur_g10
00:31:32  17  ,eur_g11
00:31:32  18  ,eur_g12
00:31:32  19  ,eur_g13
00:31:32  20  ,eur_g14
00:31:32  21  ,eur_g15
00:31:32  22  ,eur_g16
00:31:32  23  ,eur_g17
00:31:32  24  ,eur_g18
00:31:32  25  ,eur_g19
00:31:32  26  ,eur_g20
00:31:32  27  ,eur_g21
00:31:32  28  ,eur_g22
00:31:32  29  ,eur_g23
00:31:32  30  ,eur_g24
00:31:32  31  ,eur_g25
00:31:32  32  ,eur_g26
00:31:32  33  ,eur_g27
00:31:32  34  ,eur_g28
00:31:32  35  ,eur_g29
00:31:32  36  ,eur_g30
00:31:32  37  ,eur_g31
00:31:32  38  ,eur_g32
00:31:32  39  ,eur_g33
00:31:32  40  ,eur_g34
00:31:32  41  ,eur_g35
00:31:32  42  ,eur_g36
00:31:32  43  ,eur_g37
00:31:32  44  ,eur_g38
00:31:32  45  ,eur_g39
00:31:32  46  ,eur_g40
00:31:32  47  ,eur_g41
00:31:32  48  ,aud_g00
00:31:32  49  ,aud_g01
00:31:32  50  ,aud_g02
00:31:32  51  ,aud_g03
00:31:32  52  ,aud_g04
00:31:32  53  ,aud_g05
00:31:32  54  ,aud_g06
00:31:32  55  ,aud_g07
00:31:32  56  ,aud_g08
00:31:32  57  ,aud_g09
00:31:32  58  ,aud_g10
00:31:32  59  ,aud_g11
00:31:32  60  ,aud_g12
00:31:32  61  ,aud_g13
00:31:32  62  ,aud_g14
00:31:32  63  ,aud_g15
00:31:32  64  ,aud_g16
00:31:32  65  ,aud_g17
00:31:32  66  ,aud_g18
00:31:32  67  ,aud_g19
00:31:32  68  ,aud_g20
00:31:32  69  ,aud_g21
00:31:32  70  ,aud_g22
00:31:32  71  ,aud_g23
00:31:32  72  ,aud_g24
00:31:32  73  ,aud_g25
00:31:32  74  ,aud_g26
00:31:32  75  ,aud_g27
00:31:32  76  ,aud_g28
00:31:32  77  ,aud_g29
00:31:32  78  ,aud_g30
00:31:32  79  ,aud_g31
00:31:32  80  ,aud_g32
00:31:32  81  ,aud_g33
00:31:32  82  ,aud_g34
00:31:32  83  ,aud_g35
00:31:32  84  ,aud_g36
00:31:32  85  ,aud_g37
00:31:32  86  ,aud_g38
00:31:32  87  ,aud_g39
00:31:32  88  ,aud_g40
00:31:32  89  ,aud_g41
00:31:32  90  ,gbp_g00
00:31:32  91  ,gbp_g01
00:31:32  92  ,gbp_g02
00:31:32  93  ,gbp_g03
00:31:32  94  ,gbp_g04
00:31:32  95  ,gbp_g05
00:31:32  96  ,gbp_g06
00:31:32  97  ,gbp_g07
00:31:32  98  ,gbp_g08
00:31:32  99  ,gbp_g09
00:31:32 100  ,gbp_g10
00:31:32 101  ,gbp_g11
00:31:32 102  ,gbp_g12
00:31:32 103  ,gbp_g13
00:31:32 104  ,gbp_g14
00:31:32 105  ,gbp_g15
00:31:32 106  ,gbp_g16
00:31:32 107  ,gbp_g17
00:31:32 108  ,gbp_g18
00:31:32 109  ,gbp_g19
00:31:32 110  ,gbp_g20
00:31:32 111  ,gbp_g21
00:31:32 112  ,gbp_g22
00:31:32 113  ,gbp_g23
00:31:32 114  ,gbp_g24
00:31:32 115  ,gbp_g25
00:31:32 116  ,gbp_g26
00:31:32 117  ,gbp_g27
00:31:32 118  ,gbp_g28
00:31:32 119  ,gbp_g29
00:31:32 120  ,gbp_g30
00:31:32 121  ,gbp_g31
00:31:32 122  ,gbp_g32
00:31:32 123  ,gbp_g33
00:31:32 124  ,gbp_g34
00:31:32 125  ,gbp_g35
00:31:32 126  ,gbp_g36
00:31:32 127  ,gbp_g37
00:31:32 128  ,gbp_g38
00:31:32 129  ,gbp_g39
00:31:32 130  ,gbp_g40
00:31:32 131  ,gbp_g41
00:31:32 132  ,jpy_g00
00:31:32 133  ,jpy_g01
00:31:32 134  ,jpy_g02
00:31:32 135  ,jpy_g03
00:31:32 136  ,jpy_g04
00:31:32 137  ,jpy_g05
00:31:32 138  ,jpy_g06
00:31:32 139  ,jpy_g07
00:31:32 140  ,jpy_g08
00:31:32 141  ,jpy_g09
00:31:32 142  ,jpy_g10
00:31:32 143  ,jpy_g11
00:31:32 144  ,jpy_g12
00:31:32 145  ,jpy_g13
00:31:32 146  ,jpy_g14
00:31:32 147  ,jpy_g15
00:31:32 148  ,jpy_g16
00:31:32 149  ,jpy_g17
00:31:32 150  ,jpy_g18
00:31:32 151  ,jpy_g19
00:31:32 152  ,jpy_g20
00:31:32 153  ,jpy_g21
00:31:32 154  ,jpy_g22
00:31:32 155  ,jpy_g23
00:31:32 156  ,jpy_g24
00:31:32 157  ,jpy_g25
00:31:32 158  ,jpy_g26
00:31:32 159  ,jpy_g27
00:31:32 160  ,jpy_g28
00:31:32 161  ,jpy_g29
00:31:32 162  ,jpy_g30
00:31:32 163  ,jpy_g31
00:31:32 164  ,jpy_g32
00:31:32 165  ,jpy_g33
00:31:32 166  ,jpy_g34
00:31:32 167  ,jpy_g35
00:31:32 168  ,jpy_g36
00:31:32 169  ,jpy_g37
00:31:32 170  ,jpy_g38
00:31:32 171  ,jpy_g39
00:31:32 172  ,jpy_g40
00:31:32 173  ,jpy_g41
00:31:32 174  ,cad_g00
00:31:32 175  ,cad_g01
00:31:32 176  ,cad_g02
00:31:32 177  ,cad_g03
00:31:32 178  ,cad_g04
00:31:32 179  ,cad_g05
00:31:32 180  ,cad_g06
00:31:32 181  ,cad_g07
00:31:32 182  ,cad_g08
00:31:32 183  ,cad_g09
00:31:32 184  ,cad_g10
00:31:32 185  ,cad_g11
00:31:32 186  ,cad_g12
00:31:32 187  ,cad_g13
00:31:32 188  ,cad_g14
00:31:32 189  ,cad_g15
00:31:32 190  ,cad_g16
00:31:32 191  ,cad_g17
00:31:32 192  ,cad_g18
00:31:32 193  ,cad_g19
00:31:32 194  ,cad_g20
00:31:32 195  ,cad_g21
00:31:32 196  ,cad_g22
00:31:32 197  ,cad_g23
00:31:32 198  ,cad_g24
00:31:32 199  ,cad_g25
00:31:32 200  ,cad_g26
00:31:32 201  ,cad_g27
00:31:32 202  ,cad_g28
00:31:32 203  ,cad_g29
00:31:32 204  ,cad_g30
00:31:32 205  ,cad_g31
00:31:32 206  ,cad_g32
00:31:32 207  ,cad_g33
00:31:32 208  ,cad_g34
00:31:32 209  ,cad_g35
00:31:32 210  ,cad_g36
00:31:32 211  ,cad_g37
00:31:32 212  ,cad_g38
00:31:32 213  ,cad_g39
00:31:32 214  ,cad_g40
00:31:32 215  ,cad_g41
00:31:32 216  ,chf_g00
00:31:32 217  ,chf_g01
00:31:32 218  ,chf_g02
00:31:32 219  ,chf_g03
00:31:32 220  ,chf_g04
00:31:32 221  ,chf_g05
00:31:32 222  ,chf_g06
00:31:32 223  ,chf_g07
00:31:32 224  ,chf_g08
00:31:32 225  ,chf_g09
00:31:32 226  ,chf_g10
00:31:32 227  ,chf_g11
00:31:32 228  ,chf_g12
00:31:32 229  ,chf_g13
00:31:32 230  ,chf_g14
00:31:32 231  ,chf_g15
00:31:32 232  ,chf_g16
00:31:32 233  ,chf_g17
00:31:32 234  ,chf_g18
00:31:32 235  ,chf_g19
00:31:32 236  ,chf_g20
00:31:32 237  ,chf_g21
00:31:32 238  ,chf_g22
00:31:32 239  ,chf_g23
00:31:32 240  ,chf_g24
00:31:32 241  ,chf_g25
00:31:32 242  ,chf_g26
00:31:32 243  ,chf_g27
00:31:32 244  ,chf_g28
00:31:32 245  ,chf_g29
00:31:32 246  ,chf_g30
00:31:32 247  ,chf_g31
00:31:32 248  ,chf_g32
00:31:32 249  ,chf_g33
00:31:32 250  ,chf_g34
00:31:32 251  ,chf_g35
00:31:32 252  ,chf_g36
00:31:32 253  ,chf_g37
00:31:32 254  ,chf_g38
00:31:32 255  ,chf_g39
00:31:32 256  ,chf_g40
00:31:32 257  ,chf_g41
00:31:32 258  FROM aud_ms6 m
00:31:32 259  WHERE gatt IN('nup','up')
00:31:32 260  AND 1+m.ydate < '&1'||' '||'&2'
00:31:32 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2010-12-31'||' '||'00:10:00'

View created.

Elapsed: 00:00:00.13
00:31:32 SQL> 
00:31:32 SQL> -- rpt
00:31:32 SQL> 
00:31:32 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt
00:31:32   2  
00:31:32 SQL> SELECT MAX(prdate) FROM bme
00:31:32   2  
00:31:32 SQL> -- Now build model from bme and score sme
00:31:32 SQL> @score1.sql
00:31:32 SQL> -- score1.sql
00:31:32 SQL> 
00:31:32 SQL> -- Does the 1st SVM score
00:31:32 SQL> 
00:31:32 SQL> -- Fill up svmc_apply_prep
00:31:32 SQL> @score.sql
00:31:32 SQL> --
00:31:32 SQL> -- score.sql
00:31:32 SQL> --
00:31:32 SQL> 
00:31:32 SQL> -- usage: score.sql
00:31:32 SQL> 
00:31:32 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
00:31:32 SQL> 
00:31:32 SQL> DEFINE target	= 'gatt'
00:31:32 SQL> DEFINE model_name = 'forex14'
00:31:32 SQL> DEFINE bldtable	= 'bme'
00:31:32 SQL> DEFINE scoretable = 'sme'
00:31:32 SQL> DEFINE case_id	= 'prdate'
00:31:32 SQL> 
00:31:32 SQL> -- Define a variable to help me exclude some columns from some data mining calls
00:31:32 SQL> DEFINE exclude1 = "'&target','&case_id'"
00:31:32 SQL> 
00:31:32 SQL> -- Builds an SVM model using pl/sql.
00:31:32 SQL> 
00:31:32 SQL> -----------------------------------------------------------------------
00:31:32 SQL> --			    BUILD THE MODEL
00:31:32 SQL> -----------------------------------------------------------------------
00:31:32 SQL> 
00:31:32 SQL> -- Cleanup old build data preparation objects for repeat runs
00:31:32 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.01
00:31:32 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
00:31:32 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.00
00:31:32 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.01
00:31:32 SQL> 
00:31:32 SQL> 
00:31:32 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
00:31:32 SQL> --
00:31:32 SQL> -- DROP	TABLE svmc_settings ;
00:31:32 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
00:31:32 SQL> -- DELETE svmc_settings;
00:31:32 SQL> 
00:31:32 SQL> -- The default classification algorithm is Naive Bayes. So override
00:31:32 SQL> -- this choice to SVM using a settings table.
00:31:32 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
00:31:32 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
00:31:32 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
00:31:32 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
00:31:32 SQL> -- models.
00:31:32 SQL> --
00:31:32 SQL> 
00:31:32 SQL> -- Do this once and then comment it out.
00:31:32 SQL> -- That makes script go faster.
00:31:32 SQL> -- BEGIN
00:31:32 SQL> -- -- Populate settings table
00:31:32 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
00:31:32 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
00:31:32 SQL> --
00:31:32 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
00:31:32 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
00:31:32 SQL> --
00:31:32 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
00:31:32 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
00:31:32 SQL> --   COMMIT;
00:31:32 SQL> -- END;
00:31:32 SQL> -- /
00:31:32 SQL> 
00:31:32 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
00:31:32 SQL> 
00:31:32 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
00:31:32   2  EXCEPTION WHEN OTHERS THEN NULL; END;
00:31:32   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
00:31:32 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
00:31:32   2  EXCEPTION WHEN OTHERS THEN NULL; END;
00:31:32   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
00:31:32 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
00:31:32   2  EXCEPTION WHEN OTHERS THEN NULL; END;
00:31:32   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
00:31:32 SQL> 
00:31:32 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
00:31:32   2  EXCEPTION WHEN OTHERS THEN NULL; END;
00:31:32   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
00:31:32 SQL> 
00:31:32 SQL> --------------------------------
00:31:32 SQL> -- PREPARE BUILD (TRAINING) DATA
00:31:32 SQL> --
00:31:32 SQL> 
00:31:32 SQL> -- 1. Missing Value treatment for all Predictors and
00:31:32 SQL> -- 2. Outlier Treatment and
00:31:32 SQL> -- 3. Normalization are performed below.
00:31:32 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
00:31:32 SQL> --    normalized here.
00:31:32 SQL> 
00:31:32 SQL> BEGIN
00:31:32   2  	-- Perform missing value treatment for all predictors
00:31:32   3  	-- create miss tables
00:31:32   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
00:31:32   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
00:31:32   6  
00:31:32   7  	-- populate miss tables
00:31:32   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
00:31:32   9  	  miss_table_name => 'svmc_miss_num',
00:31:32  10  	  data_table_name => '&bldtable',
00:31:32  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
00:31:32  12  
00:31:32  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
00:31:32  14  	  miss_table_name => 'svmc_miss_cat',
00:31:32  15  	  data_table_name => '&bldtable',
00:31:32  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
00:31:32  17  
00:31:32  18  	-- xform input data to replace missing values
00:31:32  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
00:31:32  20  	  miss_table_name => 'svmc_miss_num',
00:31:32  21  	  data_table_name => '&bldtable',
00:31:32  22  	  xform_view_name => 'xformed_build_miss_num');
00:31:32  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
00:31:32  24  	  miss_table_name => 'svmc_miss_cat',
00:31:32  25  	  data_table_name => '&bldtable',
00:31:32  26  	  xform_view_name => 'xformed_build_miss_cat');
00:31:32  27  
00:31:32  28  	-- Perform outlier treatment.
00:31:32  29  	-- create clip table
00:31:32  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
00:31:32  31  
00:31:32  32  	-- populate clip table
00:31:32  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
00:31:32  34  	  clip_table_name => 'svmc_clip',
00:31:32  35  	  data_table_name => '&bldtable',
00:31:32  36  	  tail_frac	  => 0.025,
00:31:32  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
00:31:32  38  
00:31:32  39  	-- xform input data to winsorized data
00:31:32  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
00:31:32  41  	  clip_table_name => 'svmc_clip',
00:31:32  42  	  data_table_name => '&bldtable',
00:31:32  43  	  xform_view_name => 'svmc_winsor');
00:31:32  44  
00:31:32  45  	-- create normalization table
00:31:32  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
00:31:32  47  
00:31:32  48  	-- populate normalization table based on winsorized data
00:31:32  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
00:31:32  50  	  norm_table_name => 'svmc_norm',
00:31:32  51  	  data_table_name => 'svmc_winsor',
00:31:32  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
00:31:32  53  
00:31:32  54  	-- normalize the original data
00:31:32  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
00:31:32  56  	  norm_table_name => 'svmc_norm',
00:31:32  57  	  data_table_name => '&bldtable',
00:31:32  58  	  xform_view_name => 'svmc_build_prep');
00:31:32  59  END;
00:31:32  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:18.39
00:31:50 SQL> 
00:31:50 SQL> ---------------------
00:31:50 SQL> -- CREATE A NEW MODEL
00:31:50 SQL> --
00:31:50 SQL> -- Cleanup old model with the same name for repeat runs
00:31:50 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
00:31:50   2  EXCEPTION WHEN OTHERS THEN NULL; END;
00:31:50   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.56
00:31:51 SQL> 
00:31:51 SQL> -- Build a new SVM Model
00:31:51 SQL> BEGIN
00:31:51   2  	DBMS_DATA_MINING.CREATE_MODEL(
00:31:51   3  	  model_name	      => '&model_name',
00:31:51   4  	  mining_function     => dbms_data_mining.classification,
00:31:51   5  	  data_table_name     => 'svmc_build_prep',
00:31:51   6  	  case_id_column_name => '&case_id',
00:31:51   7  	  target_column_name  => '&target',
00:31:51   8  	  settings_table_name => 'svmc_settings');
00:31:51   9  END;
00:31:51  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:28.11
00:32:19 SQL> 
00:32:19 SQL> -----------------------------------------------------------------------
00:32:19 SQL> --			       APPLY/score THE MODEL
00:32:19 SQL> -----------------------------------------------------------------------
00:32:19 SQL> 
00:32:19 SQL> -- Cleanup old scoring data preparation objects for repeat runs
00:32:19 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
00:32:19   2  EXCEPTION WHEN OTHERS THEN NULL; END;
00:32:19   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
00:32:19 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
00:32:19   2  EXCEPTION WHEN OTHERS THEN NULL; END;
00:32:19   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
00:32:19 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
00:32:19   2  EXCEPTION WHEN OTHERS THEN NULL; END;
00:32:19   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
00:32:19 SQL> -----------------------
00:32:19 SQL> -- PREPARE SCORING DATA
00:32:19 SQL> --
00:32:19 SQL> -- If the data for model creation has been prepared, then the data
00:32:19 SQL> -- to be scored using the model must be prepared in the same manner
00:32:19 SQL> -- in order to obtain meaningful results.
00:32:19 SQL> --
00:32:19 SQL> -- 1. Missing Value treatment for all Predictors and
00:32:19 SQL> -- 2. Normalization
00:32:19 SQL> -- No outlier treatment will be performed during test and apply. The
00:32:19 SQL> -- normalization step is sufficient, since the normalization parameters
00:32:19 SQL> -- already capture the effects of outlier treatment done with build data.
00:32:19 SQL> --
00:32:19 SQL> BEGIN
00:32:19   2  	-- Xform Test data to replace missing values
00:32:19   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
00:32:19   4  	  miss_table_name => 'svmc_miss_num',
00:32:19   5  	  data_table_name => '&scoretable',
00:32:19   6  	  xform_view_name => 'xformed_apply_miss_num');
00:32:19   7  
00:32:19   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
00:32:19   9  	  miss_table_name => 'svmc_miss_cat',
00:32:19  10  	  data_table_name => '&scoretable',
00:32:19  11  	  xform_view_name => 'xformed_apply_miss_cat');
00:32:19  12  
00:32:19  13  	-- Normalize the data to be scored
00:32:19  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
00:32:19  15  	  norm_table_name => 'svmc_norm',
00:32:19  16  	  data_table_name => '&scoretable',
00:32:19  17  	  xform_view_name => 'svmc_apply_prep');
00:32:19  18  END;
00:32:19  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.22
00:32:21 SQL> 
00:32:21 SQL> -- Use same model_name used in score.sql
00:32:21 SQL> DEFINE model_name = 'forex14'
00:32:21 SQL> 
00:32:21 SQL> -- CREATE TABLE fxscores6 (prdate VARCHAR2(30),score NUMBER,rundate DATE,pair VARCHAR2(8),ydate DATE);
00:32:21 SQL> 
00:32:21 SQL> DELETE fxscores6 WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.06
00:32:21 SQL> 
00:32:21 SQL> INSERT INTO fxscores6 (prdate,score,rundate,pair,ydate)
00:32:21   2  SELECT
00:32:21   3  prdate
00:32:21   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
00:32:21   5  ,sysdate
00:32:21   6  ,SUBSTR(prdate,1,3)pair
00:32:21   7  ,SUBSTR(prdate,4,19)ydate
00:32:21   8  FROM svmc_apply_prep
00:32:21   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.19
00:32:21 SQL> @aud_score1day.sql  2010-12-31 00:15:00
00:32:21 SQL> --
00:32:21 SQL> -- aud_score1day.sql
00:32:21 SQL> --
00:32:21 SQL> 
00:32:21 SQL> CREATE OR REPLACE VIEW sme AS
00:32:21   2  SELECT
00:32:21   3  'aud'||m.ydate prdate
00:32:21   4  ,NULL gatt
00:32:21   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
00:32:21   6  ,eur_g00
00:32:21   7  ,eur_g01
00:32:21   8  ,eur_g02
00:32:21   9  ,eur_g03
00:32:21  10  ,eur_g04
00:32:21  11  ,eur_g05
00:32:21  12  ,eur_g06
00:32:21  13  ,eur_g07
00:32:21  14  ,eur_g08
00:32:21  15  ,eur_g09
00:32:21  16  ,eur_g10
00:32:21  17  ,eur_g11
00:32:21  18  ,eur_g12
00:32:21  19  ,eur_g13
00:32:21  20  ,eur_g14
00:32:21  21  ,eur_g15
00:32:21  22  ,eur_g16
00:32:21  23  ,eur_g17
00:32:21  24  ,eur_g18
00:32:21  25  ,eur_g19
00:32:21  26  ,eur_g20
00:32:21  27  ,eur_g21
00:32:21  28  ,eur_g22
00:32:21  29  ,eur_g23
00:32:21  30  ,eur_g24
00:32:21  31  ,eur_g25
00:32:21  32  ,eur_g26
00:32:21  33  ,eur_g27
00:32:21  34  ,eur_g28
00:32:21  35  ,eur_g29
00:32:21  36  ,eur_g30
00:32:21  37  ,eur_g31
00:32:21  38  ,eur_g32
00:32:21  39  ,eur_g33
00:32:21  40  ,eur_g34
00:32:21  41  ,eur_g35
00:32:21  42  ,eur_g36
00:32:21  43  ,eur_g37
00:32:21  44  ,eur_g38
00:32:21  45  ,eur_g39
00:32:21  46  ,eur_g40
00:32:21  47  ,eur_g41
00:32:21  48  ,aud_g00
00:32:21  49  ,aud_g01
00:32:21  50  ,aud_g02
00:32:21  51  ,aud_g03
00:32:21  52  ,aud_g04
00:32:21  53  ,aud_g05
00:32:21  54  ,aud_g06
00:32:21  55  ,aud_g07
00:32:21  56  ,aud_g08
00:32:21  57  ,aud_g09
00:32:21  58  ,aud_g10
00:32:21  59  ,aud_g11
00:32:21  60  ,aud_g12
00:32:21  61  ,aud_g13
00:32:21  62  ,aud_g14
00:32:21  63  ,aud_g15
00:32:21  64  ,aud_g16
00:32:21  65  ,aud_g17
00:32:21  66  ,aud_g18
00:32:21  67  ,aud_g19
00:32:21  68  ,aud_g20
00:32:21  69  ,aud_g21
00:32:21  70  ,aud_g22
00:32:21  71  ,aud_g23
00:32:21  72  ,aud_g24
00:32:21  73  ,aud_g25
00:32:21  74  ,aud_g26
00:32:21  75  ,aud_g27
00:32:21  76  ,aud_g28
00:32:21  77  ,aud_g29
00:32:21  78  ,aud_g30
00:32:21  79  ,aud_g31
00:32:21  80  ,aud_g32
00:32:21  81  ,aud_g33
00:32:21  82  ,aud_g34
00:32:21  83  ,aud_g35
00:32:21  84  ,aud_g36
00:32:21  85  ,aud_g37
00:32:21  86  ,aud_g38
00:32:21  87  ,aud_g39
00:32:21  88  ,aud_g40
00:32:21  89  ,aud_g41
00:32:21  90  ,gbp_g00
00:32:21  91  ,gbp_g01
00:32:21  92  ,gbp_g02
00:32:21  93  ,gbp_g03
00:32:21  94  ,gbp_g04
00:32:21  95  ,gbp_g05
00:32:21  96  ,gbp_g06
00:32:21  97  ,gbp_g07
00:32:21  98  ,gbp_g08
00:32:21  99  ,gbp_g09
00:32:21 100  ,gbp_g10
00:32:21 101  ,gbp_g11
00:32:21 102  ,gbp_g12
00:32:21 103  ,gbp_g13
00:32:21 104  ,gbp_g14
00:32:21 105  ,gbp_g15
00:32:21 106  ,gbp_g16
00:32:21 107  ,gbp_g17
00:32:21 108  ,gbp_g18
00:32:21 109  ,gbp_g19
00:32:21 110  ,gbp_g20
00:32:21 111  ,gbp_g21
00:32:21 112  ,gbp_g22
00:32:21 113  ,gbp_g23
00:32:21 114  ,gbp_g24
00:32:21 115  ,gbp_g25
00:32:21 116  ,gbp_g26
00:32:21 117  ,gbp_g27
00:32:21 118  ,gbp_g28
00:32:21 119  ,gbp_g29
00:32:21 120  ,gbp_g30
00:32:21 121  ,gbp_g31
00:32:21 122  ,gbp_g32
00:32:21 123  ,gbp_g33
00:32:21 124  ,gbp_g34
00:32:21 125  ,gbp_g35
00:32:21 126  ,gbp_g36
00:32:21 127  ,gbp_g37
00:32:21 128  ,gbp_g38
00:32:21 129  ,gbp_g39
00:32:21 130  ,gbp_g40
00:32:21 131  ,gbp_g41
00:32:21 132  ,jpy_g00
00:32:21 133  ,jpy_g01
00:32:21 134  ,jpy_g02
00:32:21 135  ,jpy_g03
00:32:21 136  ,jpy_g04
00:32:21 137  ,jpy_g05
00:32:21 138  ,jpy_g06
00:32:21 139  ,jpy_g07
00:32:21 140  ,jpy_g08
00:32:21 141  ,jpy_g09
00:32:21 142  ,jpy_g10
00:32:21 143  ,jpy_g11
00:32:21 144  ,jpy_g12
00:32:21 145  ,jpy_g13
00:32:21 146  ,jpy_g14
00:32:21 147  ,jpy_g15
00:32:21 148  ,jpy_g16
00:32:21 149  ,jpy_g17
00:32:21 150  ,jpy_g18
00:32:21 151  ,jpy_g19
00:32:21 152  ,jpy_g20
00:32:21 153  ,jpy_g21
00:32:21 154  ,jpy_g22
00:32:21 155  ,jpy_g23
00:32:21 156  ,jpy_g24
00:32:21 157  ,jpy_g25
00:32:21 158  ,jpy_g26
00:32:21 159  ,jpy_g27
00:32:21 160  ,jpy_g28
00:32:21 161  ,jpy_g29
00:32:21 162  ,jpy_g30
00:32:21 163  ,jpy_g31
00:32:21 164  ,jpy_g32
00:32:21 165  ,jpy_g33
00:32:21 166  ,jpy_g34
00:32:21 167  ,jpy_g35
00:32:21 168  ,jpy_g36
00:32:21 169  ,jpy_g37
00:32:21 170  ,jpy_g38
00:32:21 171  ,jpy_g39
00:32:21 172  ,jpy_g40
00:32:21 173  ,jpy_g41
00:32:21 174  ,cad_g00
00:32:21 175  ,cad_g01
00:32:21 176  ,cad_g02
00:32:21 177  ,cad_g03
00:32:21 178  ,cad_g04
00:32:21 179  ,cad_g05
00:32:21 180  ,cad_g06
00:32:21 181  ,cad_g07
00:32:21 182  ,cad_g08
00:32:21 183  ,cad_g09
00:32:21 184  ,cad_g10
00:32:21 185  ,cad_g11
00:32:21 186  ,cad_g12
00:32:21 187  ,cad_g13
00:32:21 188  ,cad_g14
00:32:21 189  ,cad_g15
00:32:21 190  ,cad_g16
00:32:21 191  ,cad_g17
00:32:21 192  ,cad_g18
00:32:21 193  ,cad_g19
00:32:21 194  ,cad_g20
00:32:21 195  ,cad_g21
00:32:21 196  ,cad_g22
00:32:21 197  ,cad_g23
00:32:21 198  ,cad_g24
00:32:21 199  ,cad_g25
00:32:21 200  ,cad_g26
00:32:21 201  ,cad_g27
00:32:21 202  ,cad_g28
00:32:21 203  ,cad_g29
00:32:21 204  ,cad_g30
00:32:21 205  ,cad_g31
00:32:21 206  ,cad_g32
00:32:21 207  ,cad_g33
00:32:21 208  ,cad_g34
00:32:21 209  ,cad_g35
00:32:21 210  ,cad_g36
00:32:21 211  ,cad_g37
00:32:21 212  ,cad_g38
00:32:21 213  ,cad_g39
00:32:21 214  ,cad_g40
00:32:21 215  ,cad_g41
00:32:21 216  ,chf_g00
00:32:21 217  ,chf_g01
00:32:21 218  ,chf_g02
00:32:21 219  ,chf_g03
00:32:21 220  ,chf_g04
00:32:21 221  ,chf_g05
00:32:21 222  ,chf_g06
00:32:21 223  ,chf_g07
00:32:21 224  ,chf_g08
00:32:21 225  ,chf_g09
00:32:21 226  ,chf_g10
00:32:21 227  ,chf_g11
00:32:21 228  ,chf_g12
00:32:21 229  ,chf_g13
00:32:21 230  ,chf_g14
00:32:21 231  ,chf_g15
00:32:21 232  ,chf_g16
00:32:21 233  ,chf_g17
00:32:21 234  ,chf_g18
00:32:21 235  ,chf_g19
00:32:21 236  ,chf_g20
00:32:21 237  ,chf_g21
00:32:21 238  ,chf_g22
00:32:21 239  ,chf_g23
00:32:21 240  ,chf_g24
00:32:21 241  ,chf_g25
00:32:21 242  ,chf_g26
00:32:21 243  ,chf_g27
00:32:21 244  ,chf_g28
00:32:21 245  ,chf_g29
00:32:21 246  ,chf_g30
00:32:21 247  ,chf_g31
00:32:21 248  ,chf_g32
00:32:21 249  ,chf_g33
00:32:21 250  ,chf_g34
00:32:21 251  ,chf_g35
00:32:21 252  ,chf_g36
00:32:21 253  ,chf_g37
00:32:21 254  ,chf_g38
00:32:21 255  ,chf_g39
00:32:21 256  ,chf_g40
00:32:21 257  ,chf_g41
00:32:21 258  FROM aud_ms6 m
00:32:21 259  WHERE m.ydate = '&1'||' '||'&2'
00:32:21 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2010-12-31'||' '||'00:15:00'

View created.

Elapsed: 00:00:00.12
00:32:21 SQL> 
00:32:21 SQL> -- rpt
00:32:21 SQL> -- We should see just 1 row:
00:32:21 SQL> 
00:32:21 SQL> SELECT COUNT(prdate) FROM sme
00:32:21   2  
00:32:21 SQL> -- Build the model:
00:32:21 SQL> CREATE OR REPLACE VIEW bme AS
00:32:21   2  SELECT
00:32:21   3  'aud'||m.ydate prdate
00:32:21   4  ,gatt
00:32:21   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
00:32:21   6  ,eur_g00
00:32:21   7  ,eur_g01
00:32:21   8  ,eur_g02
00:32:21   9  ,eur_g03
00:32:21  10  ,eur_g04
00:32:21  11  ,eur_g05
00:32:21  12  ,eur_g06
00:32:21  13  ,eur_g07
00:32:21  14  ,eur_g08
00:32:21  15  ,eur_g09
00:32:21  16  ,eur_g10
00:32:21  17  ,eur_g11
00:32:21  18  ,eur_g12
00:32:21  19  ,eur_g13
00:32:21  20  ,eur_g14
00:32:21  21  ,eur_g15
00:32:21  22  ,eur_g16
00:32:21  23  ,eur_g17
00:32:21  24  ,eur_g18
00:32:21  25  ,eur_g19
00:32:21  26  ,eur_g20
00:32:21  27  ,eur_g21
00:32:21  28  ,eur_g22
00:32:21  29  ,eur_g23
00:32:21  30  ,eur_g24
00:32:21  31  ,eur_g25
00:32:21  32  ,eur_g26
00:32:21  33  ,eur_g27
00:32:21  34  ,eur_g28
00:32:21  35  ,eur_g29
00:32:21  36  ,eur_g30
00:32:21  37  ,eur_g31
00:32:21  38  ,eur_g32
00:32:21  39  ,eur_g33
00:32:21  40  ,eur_g34
00:32:21  41  ,eur_g35
00:32:21  42  ,eur_g36
00:32:21  43  ,eur_g37
00:32:21  44  ,eur_g38
00:32:21  45  ,eur_g39
00:32:21  46  ,eur_g40
00:32:21  47  ,eur_g41
00:32:21  48  ,aud_g00
00:32:21  49  ,aud_g01
00:32:21  50  ,aud_g02
00:32:21  51  ,aud_g03
00:32:21  52  ,aud_g04
00:32:21  53  ,aud_g05
00:32:21  54  ,aud_g06
00:32:21  55  ,aud_g07
00:32:21  56  ,aud_g08
00:32:21  57  ,aud_g09
00:32:21  58  ,aud_g10
00:32:21  59  ,aud_g11
00:32:21  60  ,aud_g12
00:32:21  61  ,aud_g13
00:32:21  62  ,aud_g14
00:32:21  63  ,aud_g15
00:32:21  64  ,aud_g16
00:32:21  65  ,aud_g17
00:32:21  66  ,aud_g18
00:32:21  67  ,aud_g19
00:32:21  68  ,aud_g20
00:32:21  69  ,aud_g21
00:32:21  70  ,aud_g22
00:32:21  71  ,aud_g23
00:32:21  72  ,aud_g24
00:32:21  73  ,aud_g25
00:32:21  74  ,aud_g26
00:32:21  75  ,aud_g27
00:32:21  76  ,aud_g28
00:32:21  77  ,aud_g29
00:32:21  78  ,aud_g30
00:32:21  79  ,aud_g31
00:32:21  80  ,aud_g32
00:32:21  81  ,aud_g33
00:32:21  82  ,aud_g34
00:32:21  83  ,aud_g35
00:32:21  84  ,aud_g36
00:32:21  85  ,aud_g37
00:32:21  86  ,aud_g38
00:32:21  87  ,aud_g39
00:32:21  88  ,aud_g40
00:32:21  89  ,aud_g41
00:32:21  90  ,gbp_g00
00:32:21  91  ,gbp_g01
00:32:21  92  ,gbp_g02
00:32:21  93  ,gbp_g03
00:32:21  94  ,gbp_g04
00:32:21  95  ,gbp_g05
00:32:21  96  ,gbp_g06
00:32:21  97  ,gbp_g07
00:32:21  98  ,gbp_g08
00:32:21  99  ,gbp_g09
00:32:21 100  ,gbp_g10
00:32:21 101  ,gbp_g11
00:32:21 102  ,gbp_g12
00:32:21 103  ,gbp_g13
00:32:21 104  ,gbp_g14
00:32:21 105  ,gbp_g15
00:32:21 106  ,gbp_g16
00:32:21 107  ,gbp_g17
00:32:21 108  ,gbp_g18
00:32:21 109  ,gbp_g19
00:32:21 110  ,gbp_g20
00:32:21 111  ,gbp_g21
00:32:21 112  ,gbp_g22
00:32:21 113  ,gbp_g23
00:32:21 114  ,gbp_g24
00:32:21 115  ,gbp_g25
00:32:21 116  ,gbp_g26
00:32:21 117  ,gbp_g27
00:32:21 118  ,gbp_g28
00:32:21 119  ,gbp_g29
00:32:21 120  ,gbp_g30
00:32:21 121  ,gbp_g31
00:32:21 122  ,gbp_g32
00:32:21 123  ,gbp_g33
00:32:21 124  ,gbp_g34
00:32:21 125  ,gbp_g35
00:32:21 126  ,gbp_g36
00:32:21 127  ,gbp_g37
00:32:21 128  ,gbp_g38
00:32:21 129  ,gbp_g39
00:32:21 130  ,gbp_g40
00:32:21 131  ,gbp_g41
00:32:21 132  ,jpy_g00
00:32:21 133  ,jpy_g01
00:32:21 134  ,jpy_g02
00:32:21 135  ,jpy_g03
00:32:21 136  ,jpy_g04
00:32:21 137  ,jpy_g05
00:32:21 138  ,jpy_g06
00:32:21 139  ,jpy_g07
00:32:21 140  ,jpy_g08
00:32:21 141  ,jpy_g09
00:32:21 142  ,jpy_g10
00:32:21 143  ,jpy_g11
00:32:21 144  ,jpy_g12
00:32:21 145  ,jpy_g13
00:32:21 146  ,jpy_g14
00:32:21 147  ,jpy_g15
00:32:21 148  ,jpy_g16
00:32:21 149  ,jpy_g17
00:32:21 150  ,jpy_g18
00:32:21 151  ,jpy_g19
00:32:21 152  ,jpy_g20
00:32:21 153  ,jpy_g21
00:32:21 154  ,jpy_g22
00:32:21 155  ,jpy_g23
00:32:21 156  ,jpy_g24
00:32:21 157  ,jpy_g25
00:32:21 158  ,jpy_g26
00:32:21 159  ,jpy_g27
00:32:21 160  ,jpy_g28
00:32:21 161  ,jpy_g29
00:32:21 162  ,jpy_g30
00:32:21 163  ,jpy_g31
00:32:21 164  ,jpy_g32
00:32:21 165  ,jpy_g33
00:32:21 166  ,jpy_g34
00:32:21 167  ,jpy_g35
00:32:21 168  ,jpy_g36
00:32:21 169  ,jpy_g37
00:32:21 170  ,jpy_g38
00:32:21 171  ,jpy_g39
00:32:21 172  ,jpy_g40
00:32:21 173  ,jpy_g41
00:32:21 174  ,cad_g00
00:32:21 175  ,cad_g01
00:32:21 176  ,cad_g02
00:32:21 177  ,cad_g03
00:32:21 178  ,cad_g04
00:32:21 179  ,cad_g05
00:32:21 180  ,cad_g06
00:32:21 181  ,cad_g07
00:32:21 182  ,cad_g08
00:32:21 183  ,cad_g09
00:32:21 184  ,cad_g10
00:32:21 185  ,cad_g11
00:32:21 186  ,cad_g12
00:32:21 187  ,cad_g13
00:32:21 188  ,cad_g14
00:32:21 189  ,cad_g15
00:32:21 190  ,cad_g16
00:32:21 191  ,cad_g17
00:32:21 192  ,cad_g18
00:32:21 193  ,cad_g19
00:32:21 194  ,cad_g20
00:32:21 195  ,cad_g21
00:32:21 196  ,cad_g22
00:32:21 197  ,cad_g23
00:32:21 198  ,cad_g24
00:32:21 199  ,cad_g25
00:32:21 200  ,cad_g26
00:32:21 201  ,cad_g27
00:32:21 202  ,cad_g28
00:32:21 203  ,cad_g29
00:32:21 204  ,cad_g30
00:32:21 205  ,cad_g31
00:32:21 206  ,cad_g32
00:32:21 207  ,cad_g33
00:32:21 208  ,cad_g34
00:32:21 209  ,cad_g35
00:32:21 210  ,cad_g36
00:32:21 211  ,cad_g37
00:32:21 212  ,cad_g38
00:32:21 213  ,cad_g39
00:32:21 214  ,cad_g40
00:32:21 215  ,cad_g41
00:32:21 216  ,chf_g00
00:32:21 217  ,chf_g01
00:32:21 218  ,chf_g02
00:32:21 219  ,chf_g03
00:32:21 220  ,chf_g04
00:32:21 221  ,chf_g05
00:32:21 222  ,chf_g06
00:32:21 223  ,chf_g07
00:32:21 224  ,chf_g08
00:32:21 225  ,chf_g09
00:32:21 226  ,chf_g10
00:32:21 227  ,chf_g11
00:32:21 228  ,chf_g12
00:32:21 229  ,chf_g13
00:32:21 230  ,chf_g14
00:32:21 231  ,chf_g15
00:32:21 232  ,chf_g16
00:32:21 233  ,chf_g17
00:32:21 234  ,chf_g18
00:32:21 235  ,chf_g19
00:32:21 236  ,chf_g20
00:32:21 237  ,chf_g21
00:32:21 238  ,chf_g22
00:32:21 239  ,chf_g23
00:32:21 240  ,chf_g24
00:32:21 241  ,chf_g25
00:32:21 242  ,chf_g26
00:32:21 243  ,chf_g27
00:32:21 244  ,chf_g28
00:32:21 245  ,chf_g29
00:32:21 246  ,chf_g30
00:32:21 247  ,chf_g31
00:32:21 248  ,chf_g32
00:32:21 249  ,chf_g33
00:32:21 250  ,chf_g34
00:32:21 251  ,chf_g35
00:32:21 252  ,chf_g36
00:32:21 253  ,chf_g37
00:32:21 254  ,chf_g38
00:32:21 255  ,chf_g39
00:32:21 256  ,chf_g40
00:32:21 257  ,chf_g41
00:32:21 258  FROM aud_ms6 m
00:32:21 259  WHERE gatt IN('nup','up')
00:32:21 260  AND 1+m.ydate < '&1'||' '||'&2'
00:32:21 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2010-12-31'||' '||'00:15:00'

View created.

Elapsed: 00:00:00.15
00:32:21 SQL> 
00:32:21 SQL> -- rpt
00:32:21 SQL> 
00:32:21 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt
00:32:21   2  
00:32:21 SQL> SELECT MAX(prdate) FROM bme
00:32:21   2  
00:32:21 SQL> -- Now build model from bme and score sme
00:32:21 SQL> @score1.sql
00:32:21 SQL> -- score1.sql
00:32:21 SQL> 
00:32:21 SQL> -- Does the 1st SVM score
00:32:21 SQL> 
00:32:21 SQL> -- Fill up svmc_apply_prep
00:32:21 SQL> @score.sql
00:32:21 SQL> --
00:32:21 SQL> -- score.sql
00:32:21 SQL> --
00:32:21 SQL> 
00:32:21 SQL> -- usage: score.sql
00:32:21 SQL> 
00:32:21 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
00:32:21 SQL> 
00:32:21 SQL> DEFINE target	= 'gatt'
00:32:21 SQL> DEFINE model_name = 'forex14'
00:32:21 SQL> DEFINE bldtable	= 'bme'
00:32:21 SQL> DEFINE scoretable = 'sme'
00:32:21 SQL> DEFINE case_id	= 'prdate'
00:32:21 SQL> 
00:32:21 SQL> -- Define a variable to help me exclude some columns from some data mining calls
00:32:21 SQL> DEFINE exclude1 = "'&target','&case_id'"
00:32:21 SQL> 
00:32:21 SQL> -- Builds an SVM model using pl/sql.
00:32:21 SQL> 
00:32:21 SQL> -----------------------------------------------------------------------
00:32:21 SQL> --			    BUILD THE MODEL
00:32:21 SQL> -----------------------------------------------------------------------
00:32:21 SQL> 
00:32:21 SQL> -- Cleanup old build data preparation objects for repeat runs
00:32:21 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.01
00:32:21 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
00:32:21 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.01
00:32:21 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.01
00:32:21 SQL> 
00:32:21 SQL> 
00:32:21 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
00:32:21 SQL> --
00:32:21 SQL> -- DROP	TABLE svmc_settings ;
00:32:21 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
00:32:21 SQL> -- DELETE svmc_settings;
00:32:21 SQL> 
00:32:21 SQL> -- The default classification algorithm is Naive Bayes. So override
00:32:21 SQL> -- this choice to SVM using a settings table.
00:32:21 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
00:32:21 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
00:32:21 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
00:32:21 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
00:32:21 SQL> -- models.
00:32:21 SQL> --
00:32:21 SQL> 
00:32:21 SQL> -- Do this once and then comment it out.
00:32:21 SQL> -- That makes script go faster.
00:32:21 SQL> -- BEGIN
00:32:21 SQL> -- -- Populate settings table
00:32:21 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
00:32:21 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
00:32:21 SQL> --
00:32:21 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
00:32:21 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
00:32:21 SQL> --
00:32:21 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
00:32:21 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
00:32:21 SQL> --   COMMIT;
00:32:21 SQL> -- END;
00:32:21 SQL> -- /
00:32:21 SQL> 
00:32:21 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
00:32:21 SQL> 
00:32:21 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
00:32:21   2  EXCEPTION WHEN OTHERS THEN NULL; END;
00:32:21   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
00:32:21 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
00:32:21   2  EXCEPTION WHEN OTHERS THEN NULL; END;
00:32:21   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.09
00:32:21 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
00:32:21   2  EXCEPTION WHEN OTHERS THEN NULL; END;
00:32:21   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
00:32:21 SQL> 
00:32:21 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
00:32:21   2  EXCEPTION WHEN OTHERS THEN NULL; END;
00:32:21   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
00:32:21 SQL> 
00:32:21 SQL> --------------------------------
00:32:21 SQL> -- PREPARE BUILD (TRAINING) DATA
00:32:21 SQL> --
00:32:21 SQL> 
00:32:21 SQL> -- 1. Missing Value treatment for all Predictors and
00:32:21 SQL> -- 2. Outlier Treatment and
00:32:21 SQL> -- 3. Normalization are performed below.
00:32:21 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
00:32:21 SQL> --    normalized here.
00:32:21 SQL> 
00:32:21 SQL> BEGIN
00:32:21   2  	-- Perform missing value treatment for all predictors
00:32:21   3  	-- create miss tables
00:32:21   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
00:32:21   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
00:32:21   6  
00:32:21   7  	-- populate miss tables
00:32:21   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
00:32:21   9  	  miss_table_name => 'svmc_miss_num',
00:32:21  10  	  data_table_name => '&bldtable',
00:32:21  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
00:32:21  12  
00:32:21  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
00:32:21  14  	  miss_table_name => 'svmc_miss_cat',
00:32:21  15  	  data_table_name => '&bldtable',
00:32:21  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
00:32:21  17  
00:32:21  18  	-- xform input data to replace missing values
00:32:21  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
00:32:21  20  	  miss_table_name => 'svmc_miss_num',
00:32:21  21  	  data_table_name => '&bldtable',
00:32:21  22  	  xform_view_name => 'xformed_build_miss_num');
00:32:21  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
00:32:21  24  	  miss_table_name => 'svmc_miss_cat',
00:32:21  25  	  data_table_name => '&bldtable',
00:32:21  26  	  xform_view_name => 'xformed_build_miss_cat');
00:32:21  27  
00:32:21  28  	-- Perform outlier treatment.
00:32:21  29  	-- create clip table
00:32:21  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
00:32:21  31  
00:32:21  32  	-- populate clip table
00:32:21  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
00:32:21  34  	  clip_table_name => 'svmc_clip',
00:32:21  35  	  data_table_name => '&bldtable',
00:32:21  36  	  tail_frac	  => 0.025,
00:32:21  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
00:32:21  38  
00:32:21  39  	-- xform input data to winsorized data
00:32:21  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
00:32:21  41  	  clip_table_name => 'svmc_clip',
00:32:21  42  	  data_table_name => '&bldtable',
00:32:21  43  	  xform_view_name => 'svmc_winsor');
00:32:21  44  
00:32:21  45  	-- create normalization table
00:32:21  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
00:32:21  47  
00:32:21  48  	-- populate normalization table based on winsorized data
00:32:21  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
00:32:21  50  	  norm_table_name => 'svmc_norm',
00:32:21  51  	  data_table_name => 'svmc_winsor',
00:32:21  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
00:32:21  53  
00:32:21  54  	-- normalize the original data
00:32:21  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
00:32:21  56  	  norm_table_name => 'svmc_norm',
00:32:21  57  	  data_table_name => '&bldtable',
00:32:21  58  	  xform_view_name => 'svmc_build_prep');
00:32:21  59  END;
00:32:21  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:18.04
00:32:39 SQL> 
00:32:39 SQL> ---------------------
00:32:39 SQL> -- CREATE A NEW MODEL
00:32:39 SQL> --
00:32:39 SQL> -- Cleanup old model with the same name for repeat runs
00:32:39 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
00:32:39   2  EXCEPTION WHEN OTHERS THEN NULL; END;
00:32:39   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.93
00:32:40 SQL> 
00:32:40 SQL> -- Build a new SVM Model
00:32:40 SQL> BEGIN
00:32:40   2  	DBMS_DATA_MINING.CREATE_MODEL(
00:32:40   3  	  model_name	      => '&model_name',
00:32:40   4  	  mining_function     => dbms_data_mining.classification,
00:32:40   5  	  data_table_name     => 'svmc_build_prep',
00:32:40   6  	  case_id_column_name => '&case_id',
00:32:40   7  	  target_column_name  => '&target',
00:32:40   8  	  settings_table_name => 'svmc_settings');
00:32:40   9  END;
00:32:40  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:27.02
00:33:07 SQL> 
00:33:07 SQL> -----------------------------------------------------------------------
00:33:07 SQL> --			       APPLY/score THE MODEL
00:33:07 SQL> -----------------------------------------------------------------------
00:33:07 SQL> 
00:33:07 SQL> -- Cleanup old scoring data preparation objects for repeat runs
00:33:07 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
00:33:07   2  EXCEPTION WHEN OTHERS THEN NULL; END;
00:33:07   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
00:33:07 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
00:33:07   2  EXCEPTION WHEN OTHERS THEN NULL; END;
00:33:07   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
00:33:07 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
00:33:07   2  EXCEPTION WHEN OTHERS THEN NULL; END;
00:33:07   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
00:33:08 SQL> -----------------------
00:33:08 SQL> -- PREPARE SCORING DATA
00:33:08 SQL> --
00:33:08 SQL> -- If the data for model creation has been prepared, then the data
00:33:08 SQL> -- to be scored using the model must be prepared in the same manner
00:33:08 SQL> -- in order to obtain meaningful results.
00:33:08 SQL> --
00:33:08 SQL> -- 1. Missing Value treatment for all Predictors and
00:33:08 SQL> -- 2. Normalization
00:33:08 SQL> -- No outlier treatment will be performed during test and apply. The
00:33:08 SQL> -- normalization step is sufficient, since the normalization parameters
00:33:08 SQL> -- already capture the effects of outlier treatment done with build data.
00:33:08 SQL> --
00:33:08 SQL> BEGIN
00:33:08   2  	-- Xform Test data to replace missing values
00:33:08   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
00:33:08   4  	  miss_table_name => 'svmc_miss_num',
00:33:08   5  	  data_table_name => '&scoretable',
00:33:08   6  	  xform_view_name => 'xformed_apply_miss_num');
00:33:08   7  
00:33:08   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
00:33:08   9  	  miss_table_name => 'svmc_miss_cat',
00:33:08  10  	  data_table_name => '&scoretable',
00:33:08  11  	  xform_view_name => 'xformed_apply_miss_cat');
00:33:08  12  
00:33:08  13  	-- Normalize the data to be scored
00:33:08  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
00:33:08  15  	  norm_table_name => 'svmc_norm',
00:33:08  16  	  data_table_name => '&scoretable',
00:33:08  17  	  xform_view_name => 'svmc_apply_prep');
00:33:08  18  END;
00:33:08  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.25
00:33:09 SQL> 
00:33:09 SQL> -- Use same model_name used in score.sql
00:33:09 SQL> DEFINE model_name = 'forex14'
00:33:09 SQL> 
00:33:09 SQL> -- CREATE TABLE fxscores6 (prdate VARCHAR2(30),score NUMBER,rundate DATE,pair VARCHAR2(8),ydate DATE);
00:33:09 SQL> 
00:33:09 SQL> DELETE fxscores6 WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.03
00:33:09 SQL> 
00:33:09 SQL> INSERT INTO fxscores6 (prdate,score,rundate,pair,ydate)
00:33:09   2  SELECT
00:33:09   3  prdate
00:33:09   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
00:33:09   5  ,sysdate
00:33:09   6  ,SUBSTR(prdate,1,3)pair
00:33:09   7  ,SUBSTR(prdate,4,19)ydate
00:33:09   8  FROM svmc_apply_prep
00:33:09   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.17
00:33:09 SQL> @aud_score1day.sql  2010-12-31 00:20:00
00:33:09 SQL> --
00:33:09 SQL> -- aud_score1day.sql
00:33:09 SQL> --
00:33:09 SQL> 
00:33:09 SQL> CREATE OR REPLACE VIEW sme AS
00:33:09   2  SELECT
00:33:09   3  'aud'||m.ydate prdate
00:33:09   4  ,NULL gatt
00:33:09   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
00:33:09   6  ,eur_g00
00:33:09   7  ,eur_g01
00:33:09   8  ,eur_g02
00:33:09   9  ,eur_g03
00:33:09  10  ,eur_g04
00:33:09  11  ,eur_g05
00:33:09  12  ,eur_g06
00:33:09  13  ,eur_g07
00:33:09  14  ,eur_g08
00:33:09  15  ,eur_g09
00:33:09  16  ,eur_g10
00:33:09  17  ,eur_g11
00:33:09  18  ,eur_g12
00:33:09  19  ,eur_g13
00:33:09  20  ,eur_g14
00:33:09  21  ,eur_g15
00:33:09  22  ,eur_g16
00:33:09  23  ,eur_g17
00:33:09  24  ,eur_g18
00:33:09  25  ,eur_g19
00:33:09  26  ,eur_g20
00:33:09  27  ,eur_g21
00:33:09  28  ,eur_g22
00:33:09  29  ,eur_g23
00:33:09  30  ,eur_g24
00:33:09  31  ,eur_g25
00:33:09  32  ,eur_g26
00:33:09  33  ,eur_g27
00:33:09  34  ,eur_g28
00:33:09  35  ,eur_g29
00:33:09  36  ,eur_g30
00:33:09  37  ,eur_g31
00:33:09  38  ,eur_g32
00:33:09  39  ,eur_g33
00:33:09  40  ,eur_g34
00:33:09  41  ,eur_g35
00:33:09  42  ,eur_g36
00:33:09  43  ,eur_g37
00:33:09  44  ,eur_g38
00:33:09  45  ,eur_g39
00:33:09  46  ,eur_g40
00:33:09  47  ,eur_g41
00:33:09  48  ,aud_g00
00:33:09  49  ,aud_g01
00:33:09  50  ,aud_g02
00:33:09  51  ,aud_g03
00:33:09  52  ,aud_g04
00:33:09  53  ,aud_g05
00:33:09  54  ,aud_g06
00:33:09  55  ,aud_g07
00:33:09  56  ,aud_g08
00:33:09  57  ,aud_g09
00:33:09  58  ,aud_g10
00:33:09  59  ,aud_g11
00:33:09  60  ,aud_g12
00:33:09  61  ,aud_g13
00:33:09  62  ,aud_g14
00:33:09  63  ,aud_g15
00:33:09  64  ,aud_g16
00:33:09  65  ,aud_g17
00:33:09  66  ,aud_g18
00:33:09  67  ,aud_g19
00:33:09  68  ,aud_g20
00:33:09  69  ,aud_g21
00:33:09  70  ,aud_g22
00:33:09  71  ,aud_g23
00:33:09  72  ,aud_g24
00:33:09  73  ,aud_g25
00:33:09  74  ,aud_g26
00:33:09  75  ,aud_g27
00:33:09  76  ,aud_g28
00:33:09  77  ,aud_g29
00:33:09  78  ,aud_g30
00:33:09  79  ,aud_g31
00:33:09  80  ,aud_g32
00:33:09  81  ,aud_g33
00:33:09  82  ,aud_g34
00:33:09  83  ,aud_g35
00:33:09  84  ,aud_g36
00:33:09  85  ,aud_g37
00:33:09  86  ,aud_g38
00:33:09  87  ,aud_g39
00:33:09  88  ,aud_g40
00:33:09  89  ,aud_g41
00:33:09  90  ,gbp_g00
00:33:09  91  ,gbp_g01
00:33:09  92  ,gbp_g02
00:33:09  93  ,gbp_g03
00:33:09  94  ,gbp_g04
00:33:09  95  ,gbp_g05
00:33:09  96  ,gbp_g06
00:33:09  97  ,gbp_g07
00:33:09  98  ,gbp_g08
00:33:09  99  ,gbp_g09
00:33:09 100  ,gbp_g10
00:33:09 101  ,gbp_g11
00:33:09 102  ,gbp_g12
00:33:09 103  ,gbp_g13
00:33:09 104  ,gbp_g14
00:33:09 105  ,gbp_g15
00:33:09 106  ,gbp_g16
00:33:09 107  ,gbp_g17
00:33:09 108  ,gbp_g18
00:33:09 109  ,gbp_g19
00:33:09 110  ,gbp_g20
00:33:09 111  ,gbp_g21
00:33:09 112  ,gbp_g22
00:33:09 113  ,gbp_g23
00:33:09 114  ,gbp_g24
00:33:09 115  ,gbp_g25
00:33:09 116  ,gbp_g26
00:33:09 117  ,gbp_g27
00:33:09 118  ,gbp_g28
00:33:09 119  ,gbp_g29
00:33:09 120  ,gbp_g30
00:33:09 121  ,gbp_g31
00:33:09 122  ,gbp_g32
00:33:09 123  ,gbp_g33
00:33:09 124  ,gbp_g34
00:33:09 125  ,gbp_g35
00:33:09 126  ,gbp_g36
00:33:09 127  ,gbp_g37
00:33:09 128  ,gbp_g38
00:33:09 129  ,gbp_g39
00:33:09 130  ,gbp_g40
00:33:09 131  ,gbp_g41
00:33:09 132  ,jpy_g00
00:33:09 133  ,jpy_g01
00:33:09 134  ,jpy_g02
00:33:09 135  ,jpy_g03
00:33:09 136  ,jpy_g04
00:33:09 137  ,jpy_g05
00:33:09 138  ,jpy_g06
00:33:09 139  ,jpy_g07
00:33:09 140  ,jpy_g08
00:33:09 141  ,jpy_g09
00:33:09 142  ,jpy_g10
00:33:09 143  ,jpy_g11
00:33:09 144  ,jpy_g12
00:33:09 145  ,jpy_g13
00:33:09 146  ,jpy_g14
00:33:09 147  ,jpy_g15
00:33:09 148  ,jpy_g16
00:33:09 149  ,jpy_g17
00:33:09 150  ,jpy_g18
00:33:09 151  ,jpy_g19
00:33:09 152  ,jpy_g20
00:33:09 153  ,jpy_g21
00:33:09 154  ,jpy_g22
00:33:09 155  ,jpy_g23
00:33:09 156  ,jpy_g24
00:33:09 157  ,jpy_g25
00:33:09 158  ,jpy_g26
00:33:09 159  ,jpy_g27
00:33:09 160  ,jpy_g28
00:33:09 161  ,jpy_g29
00:33:09 162  ,jpy_g30
00:33:09 163  ,jpy_g31
00:33:09 164  ,jpy_g32
00:33:09 165  ,jpy_g33
00:33:09 166  ,jpy_g34
00:33:09 167  ,jpy_g35
00:33:09 168  ,jpy_g36
00:33:09 169  ,jpy_g37
00:33:09 170  ,jpy_g38
00:33:09 171  ,jpy_g39
00:33:09 172  ,jpy_g40
00:33:09 173  ,jpy_g41
00:33:09 174  ,cad_g00
00:33:09 175  ,cad_g01
00:33:09 176  ,cad_g02
00:33:09 177  ,cad_g03
00:33:09 178  ,cad_g04
00:33:09 179  ,cad_g05
00:33:09 180  ,cad_g06
00:33:09 181  ,cad_g07
00:33:09 182  ,cad_g08
00:33:09 183  ,cad_g09
00:33:09 184  ,cad_g10
00:33:09 185  ,cad_g11
00:33:09 186  ,cad_g12
00:33:09 187  ,cad_g13
00:33:09 188  ,cad_g14
00:33:09 189  ,cad_g15
00:33:09 190  ,cad_g16
00:33:09 191  ,cad_g17
00:33:09 192  ,cad_g18
00:33:09 193  ,cad_g19
00:33:09 194  ,cad_g20
00:33:09 195  ,cad_g21
00:33:09 196  ,cad_g22
00:33:09 197  ,cad_g23
00:33:09 198  ,cad_g24
00:33:09 199  ,cad_g25
00:33:09 200  ,cad_g26
00:33:09 201  ,cad_g27
00:33:09 202  ,cad_g28
00:33:09 203  ,cad_g29
00:33:09 204  ,cad_g30
00:33:09 205  ,cad_g31
00:33:09 206  ,cad_g32
00:33:09 207  ,cad_g33
00:33:09 208  ,cad_g34
00:33:09 209  ,cad_g35
00:33:09 210  ,cad_g36
00:33:09 211  ,cad_g37
00:33:09 212  ,cad_g38
00:33:09 213  ,cad_g39
00:33:09 214  ,cad_g40
00:33:09 215  ,cad_g41
00:33:09 216  ,chf_g00
00:33:09 217  ,chf_g01
00:33:09 218  ,chf_g02
00:33:09 219  ,chf_g03
00:33:09 220  ,chf_g04
00:33:09 221  ,chf_g05
00:33:09 222  ,chf_g06
00:33:09 223  ,chf_g07
00:33:09 224  ,chf_g08
00:33:09 225  ,chf_g09
00:33:09 226  ,chf_g10
00:33:09 227  ,chf_g11
00:33:09 228  ,chf_g12
00:33:09 229  ,chf_g13
00:33:09 230  ,chf_g14
00:33:09 231  ,chf_g15
00:33:09 232  ,chf_g16
00:33:09 233  ,chf_g17
00:33:09 234  ,chf_g18
00:33:09 235  ,chf_g19
00:33:09 236  ,chf_g20
00:33:09 237  ,chf_g21
00:33:09 238  ,chf_g22
00:33:09 239  ,chf_g23
00:33:09 240  ,chf_g24
00:33:09 241  ,chf_g25
00:33:09 242  ,chf_g26
00:33:09 243  ,chf_g27
00:33:09 244  ,chf_g28
00:33:09 245  ,chf_g29
00:33:09 246  ,chf_g30
00:33:09 247  ,chf_g31
00:33:09 248  ,chf_g32
00:33:09 249  ,chf_g33
00:33:09 250  ,chf_g34
00:33:09 251  ,chf_g35
00:33:09 252  ,chf_g36
00:33:09 253  ,chf_g37
00:33:09 254  ,chf_g38
00:33:09 255  ,chf_g39
00:33:09 256  ,chf_g40
00:33:09 257  ,chf_g41
00:33:09 258  FROM aud_ms6 m
00:33:09 259  WHERE m.ydate = '&1'||' '||'&2'
00:33:09 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2010-12-31'||' '||'00:20:00'

View created.

Elapsed: 00:00:00.14
00:33:09 SQL> 
00:33:09 SQL> -- rpt
00:33:09 SQL> -- We should see just 1 row:
00:33:09 SQL> 
00:33:09 SQL> SELECT COUNT(prdate) FROM sme
00:33:09   2  
00:33:09 SQL> -- Build the model:
00:33:09 SQL> CREATE OR REPLACE VIEW bme AS
00:33:09   2  SELECT
00:33:09   3  'aud'||m.ydate prdate
00:33:09   4  ,gatt
00:33:09   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
00:33:09   6  ,eur_g00
00:33:09   7  ,eur_g01
00:33:09   8  ,eur_g02
00:33:09   9  ,eur_g03
00:33:09  10  ,eur_g04
00:33:09  11  ,eur_g05
00:33:09  12  ,eur_g06
00:33:09  13  ,eur_g07
00:33:09  14  ,eur_g08
00:33:09  15  ,eur_g09
00:33:09  16  ,eur_g10
00:33:09  17  ,eur_g11
00:33:09  18  ,eur_g12
00:33:09  19  ,eur_g13
00:33:09  20  ,eur_g14
00:33:09  21  ,eur_g15
00:33:09  22  ,eur_g16
00:33:09  23  ,eur_g17
00:33:09  24  ,eur_g18
00:33:09  25  ,eur_g19
00:33:09  26  ,eur_g20
00:33:09  27  ,eur_g21
00:33:09  28  ,eur_g22
00:33:09  29  ,eur_g23
00:33:09  30  ,eur_g24
00:33:09  31  ,eur_g25
00:33:09  32  ,eur_g26
00:33:09  33  ,eur_g27
00:33:09  34  ,eur_g28
00:33:09  35  ,eur_g29
00:33:09  36  ,eur_g30
00:33:09  37  ,eur_g31
00:33:09  38  ,eur_g32
00:33:09  39  ,eur_g33
00:33:09  40  ,eur_g34
00:33:09  41  ,eur_g35
00:33:09  42  ,eur_g36
00:33:09  43  ,eur_g37
00:33:09  44  ,eur_g38
00:33:09  45  ,eur_g39
00:33:09  46  ,eur_g40
00:33:09  47  ,eur_g41
00:33:09  48  ,aud_g00
00:33:09  49  ,aud_g01
00:33:09  50  ,aud_g02
00:33:09  51  ,aud_g03
00:33:09  52  ,aud_g04
00:33:09  53  ,aud_g05
00:33:09  54  ,aud_g06
00:33:09  55  ,aud_g07
00:33:09  56  ,aud_g08
00:33:09  57  ,aud_g09
00:33:09  58  ,aud_g10
00:33:09  59  ,aud_g11
00:33:09  60  ,aud_g12
00:33:09  61  ,aud_g13
00:33:09  62  ,aud_g14
00:33:09  63  ,aud_g15
00:33:09  64  ,aud_g16
00:33:09  65  ,aud_g17
00:33:09  66  ,aud_g18
00:33:09  67  ,aud_g19
00:33:09  68  ,aud_g20
00:33:09  69  ,aud_g21
00:33:09  70  ,aud_g22
00:33:09  71  ,aud_g23
00:33:09  72  ,aud_g24
00:33:09  73  ,aud_g25
00:33:09  74  ,aud_g26
00:33:09  75  ,aud_g27
00:33:09  76  ,aud_g28
00:33:09  77  ,aud_g29
00:33:09  78  ,aud_g30
00:33:09  79  ,aud_g31
00:33:09  80  ,aud_g32
00:33:09  81  ,aud_g33
00:33:09  82  ,aud_g34
00:33:09  83  ,aud_g35
00:33:09  84  ,aud_g36
00:33:09  85  ,aud_g37
00:33:09  86  ,aud_g38
00:33:09  87  ,aud_g39
00:33:09  88  ,aud_g40
00:33:09  89  ,aud_g41
00:33:09  90  ,gbp_g00
00:33:09  91  ,gbp_g01
00:33:09  92  ,gbp_g02
00:33:09  93  ,gbp_g03
00:33:09  94  ,gbp_g04
00:33:09  95  ,gbp_g05
00:33:09  96  ,gbp_g06
00:33:09  97  ,gbp_g07
00:33:09  98  ,gbp_g08
00:33:09  99  ,gbp_g09
00:33:09 100  ,gbp_g10
00:33:09 101  ,gbp_g11
00:33:09 102  ,gbp_g12
00:33:09 103  ,gbp_g13
00:33:09 104  ,gbp_g14
00:33:09 105  ,gbp_g15
00:33:09 106  ,gbp_g16
00:33:09 107  ,gbp_g17
00:33:09 108  ,gbp_g18
00:33:09 109  ,gbp_g19
00:33:09 110  ,gbp_g20
00:33:09 111  ,gbp_g21
00:33:09 112  ,gbp_g22
00:33:09 113  ,gbp_g23
00:33:09 114  ,gbp_g24
00:33:09 115  ,gbp_g25
00:33:09 116  ,gbp_g26
00:33:09 117  ,gbp_g27
00:33:09 118  ,gbp_g28
00:33:09 119  ,gbp_g29
00:33:09 120  ,gbp_g30
00:33:09 121  ,gbp_g31
00:33:09 122  ,gbp_g32
00:33:09 123  ,gbp_g33
00:33:09 124  ,gbp_g34
00:33:09 125  ,gbp_g35
00:33:09 126  ,gbp_g36
00:33:09 127  ,gbp_g37
00:33:09 128  ,gbp_g38
00:33:09 129  ,gbp_g39
00:33:09 130  ,gbp_g40
00:33:09 131  ,gbp_g41
00:33:09 132  ,jpy_g00
00:33:09 133  ,jpy_g01
00:33:09 134  ,jpy_g02
00:33:09 135  ,jpy_g03
00:33:09 136  ,jpy_g04
00:33:09 137  ,jpy_g05
00:33:09 138  ,jpy_g06
00:33:09 139  ,jpy_g07
00:33:09 140  ,jpy_g08
00:33:09 141  ,jpy_g09
00:33:09 142  ,jpy_g10
00:33:09 143  ,jpy_g11
00:33:09 144  ,jpy_g12
00:33:09 145  ,jpy_g13
00:33:09 146  ,jpy_g14
00:33:09 147  ,jpy_g15
00:33:09 148  ,jpy_g16
00:33:09 149  ,jpy_g17
00:33:09 150  ,jpy_g18
00:33:09 151  ,jpy_g19
00:33:09 152  ,jpy_g20
00:33:09 153  ,jpy_g21
00:33:09 154  ,jpy_g22
00:33:09 155  ,jpy_g23
00:33:09 156  ,jpy_g24
00:33:09 157  ,jpy_g25
00:33:09 158  ,jpy_g26
00:33:09 159  ,jpy_g27
00:33:09 160  ,jpy_g28
00:33:09 161  ,jpy_g29
00:33:09 162  ,jpy_g30
00:33:09 163  ,jpy_g31
00:33:09 164  ,jpy_g32
00:33:09 165  ,jpy_g33
00:33:09 166  ,jpy_g34
00:33:09 167  ,jpy_g35
00:33:09 168  ,jpy_g36
00:33:09 169  ,jpy_g37
00:33:09 170  ,jpy_g38
00:33:09 171  ,jpy_g39
00:33:09 172  ,jpy_g40
00:33:09 173  ,jpy_g41
00:33:09 174  ,cad_g00
00:33:09 175  ,cad_g01
00:33:09 176  ,cad_g02
00:33:09 177  ,cad_g03
00:33:09 178  ,cad_g04
00:33:09 179  ,cad_g05
00:33:09 180  ,cad_g06
00:33:09 181  ,cad_g07
00:33:09 182  ,cad_g08
00:33:09 183  ,cad_g09
00:33:09 184  ,cad_g10
00:33:09 185  ,cad_g11
00:33:09 186  ,cad_g12
00:33:09 187  ,cad_g13
00:33:09 188  ,cad_g14
00:33:09 189  ,cad_g15
00:33:09 190  ,cad_g16
00:33:09 191  ,cad_g17
00:33:09 192  ,cad_g18
00:33:09 193  ,cad_g19
00:33:09 194  ,cad_g20
00:33:09 195  ,cad_g21
00:33:09 196  ,cad_g22
00:33:09 197  ,cad_g23
00:33:09 198  ,cad_g24
00:33:09 199  ,cad_g25
00:33:09 200  ,cad_g26
00:33:09 201  ,cad_g27
00:33:09 202  ,cad_g28
00:33:09 203  ,cad_g29
00:33:09 204  ,cad_g30
00:33:09 205  ,cad_g31
00:33:09 206  ,cad_g32
00:33:09 207  ,cad_g33
00:33:09 208  ,cad_g34
00:33:09 209  ,cad_g35
00:33:09 210  ,cad_g36
00:33:09 211  ,cad_g37
00:33:09 212  ,cad_g38
00:33:09 213  ,cad_g39
00:33:09 214  ,cad_g40
00:33:09 215  ,cad_g41
00:33:09 216  ,chf_g00
00:33:09 217  ,chf_g01
00:33:09 218  ,chf_g02
00:33:09 219  ,chf_g03
00:33:09 220  ,chf_g04
00:33:09 221  ,chf_g05
00:33:09 222  ,chf_g06
00:33:09 223  ,chf_g07
00:33:09 224  ,chf_g08
00:33:09 225  ,chf_g09
00:33:09 226  ,chf_g10
00:33:09 227  ,chf_g11
00:33:09 228  ,chf_g12
00:33:09 229  ,chf_g13
00:33:09 230  ,chf_g14
00:33:09 231  ,chf_g15
00:33:09 232  ,chf_g16
00:33:09 233  ,chf_g17
00:33:09 234  ,chf_g18
00:33:09 235  ,chf_g19
00:33:09 236  ,chf_g20
00:33:09 237  ,chf_g21
00:33:09 238  ,chf_g22
00:33:09 239  ,chf_g23
00:33:09 240  ,chf_g24
00:33:09 241  ,chf_g25
00:33:09 242  ,chf_g26
00:33:09 243  ,chf_g27
00:33:09 244  ,chf_g28
00:33:09 245  ,chf_g29
00:33:09 246  ,chf_g30
00:33:09 247  ,chf_g31
00:33:09 248  ,chf_g32
00:33:09 249  ,chf_g33
00:33:09 250  ,chf_g34
00:33:09 251  ,chf_g35
00:33:09 252  ,chf_g36
00:33:09 253  ,chf_g37
00:33:09 254  ,chf_g38
00:33:09 255  ,chf_g39
00:33:09 256  ,chf_g40
00:33:09 257  ,chf_g41
00:33:09 258  FROM aud_ms6 m
00:33:09 259  WHERE gatt IN('nup','up')
00:33:09 260  AND 1+m.ydate < '&1'||' '||'&2'
00:33:09 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2010-12-31'||' '||'00:20:00'

View created.

Elapsed: 00:00:00.13
00:33:09 SQL> 
00:33:09 SQL> -- rpt
00:33:09 SQL> 
00:33:09 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt
00:33:09   2  
00:33:09 SQL> SELECT MAX(prdate) FROM bme
00:33:09   2  
00:33:09 SQL> -- Now build model from bme and score sme
00:33:09 SQL> @score1.sql
00:33:09 SQL> -- score1.sql
00:33:09 SQL> 
00:33:09 SQL> -- Does the 1st SVM score
00:33:09 SQL> 
00:33:09 SQL> -- Fill up svmc_apply_prep
00:33:09 SQL> @score.sql
00:33:09 SQL> --
00:33:09 SQL> -- score.sql
00:33:09 SQL> --
00:33:09 SQL> 
00:33:09 SQL> -- usage: score.sql
00:33:09 SQL> 
00:33:09 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
00:33:09 SQL> 
00:33:09 SQL> DEFINE target	= 'gatt'
00:33:09 SQL> DEFINE model_name = 'forex14'
00:33:09 SQL> DEFINE bldtable	= 'bme'
00:33:09 SQL> DEFINE scoretable = 'sme'
00:33:09 SQL> DEFINE case_id	= 'prdate'
00:33:09 SQL> 
00:33:09 SQL> -- Define a variable to help me exclude some columns from some data mining calls
00:33:09 SQL> DEFINE exclude1 = "'&target','&case_id'"
00:33:09 SQL> 
00:33:09 SQL> -- Builds an SVM model using pl/sql.
00:33:09 SQL> 
00:33:09 SQL> -----------------------------------------------------------------------
00:33:09 SQL> --			    BUILD THE MODEL
00:33:09 SQL> -----------------------------------------------------------------------
00:33:09 SQL> 
00:33:09 SQL> -- Cleanup old build data preparation objects for repeat runs
00:33:09 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.00
00:33:09 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
00:33:09 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.01
00:33:09 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.00
00:33:09 SQL> 
00:33:09 SQL> 
00:33:09 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
00:33:09 SQL> --
00:33:09 SQL> -- DROP	TABLE svmc_settings ;
00:33:09 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
00:33:09 SQL> -- DELETE svmc_settings;
00:33:09 SQL> 
00:33:09 SQL> -- The default classification algorithm is Naive Bayes. So override
00:33:09 SQL> -- this choice to SVM using a settings table.
00:33:09 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
00:33:09 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
00:33:09 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
00:33:09 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
00:33:09 SQL> -- models.
00:33:09 SQL> --
00:33:09 SQL> 
00:33:09 SQL> -- Do this once and then comment it out.
00:33:09 SQL> -- That makes script go faster.
00:33:09 SQL> -- BEGIN
00:33:09 SQL> -- -- Populate settings table
00:33:09 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
00:33:09 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
00:33:09 SQL> --
00:33:09 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
00:33:09 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
00:33:09 SQL> --
00:33:09 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
00:33:09 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
00:33:09 SQL> --   COMMIT;
00:33:09 SQL> -- END;
00:33:09 SQL> -- /
00:33:09 SQL> 
00:33:09 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
00:33:09 SQL> 
00:33:09 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
00:33:09   2  EXCEPTION WHEN OTHERS THEN NULL; END;
00:33:09   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.09
00:33:09 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
00:33:09   2  EXCEPTION WHEN OTHERS THEN NULL; END;
00:33:09   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
00:33:09 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
00:33:09   2  EXCEPTION WHEN OTHERS THEN NULL; END;
00:33:09   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
00:33:09 SQL> 
00:33:09 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
00:33:09   2  EXCEPTION WHEN OTHERS THEN NULL; END;
00:33:09   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
00:33:10 SQL> 
00:33:10 SQL> --------------------------------
00:33:10 SQL> -- PREPARE BUILD (TRAINING) DATA
00:33:10 SQL> --
00:33:10 SQL> 
00:33:10 SQL> -- 1. Missing Value treatment for all Predictors and
00:33:10 SQL> -- 2. Outlier Treatment and
00:33:10 SQL> -- 3. Normalization are performed below.
00:33:10 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
00:33:10 SQL> --    normalized here.
00:33:10 SQL> 
00:33:10 SQL> BEGIN
00:33:10   2  	-- Perform missing value treatment for all predictors
00:33:10   3  	-- create miss tables
00:33:10   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
00:33:10   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
00:33:10   6  
00:33:10   7  	-- populate miss tables
00:33:10   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
00:33:10   9  	  miss_table_name => 'svmc_miss_num',
00:33:10  10  	  data_table_name => '&bldtable',
00:33:10  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
00:33:10  12  
00:33:10  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
00:33:10  14  	  miss_table_name => 'svmc_miss_cat',
00:33:10  15  	  data_table_name => '&bldtable',
00:33:10  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
00:33:10  17  
00:33:10  18  	-- xform input data to replace missing values
00:33:10  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
00:33:10  20  	  miss_table_name => 'svmc_miss_num',
00:33:10  21  	  data_table_name => '&bldtable',
00:33:10  22  	  xform_view_name => 'xformed_build_miss_num');
00:33:10  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
00:33:10  24  	  miss_table_name => 'svmc_miss_cat',
00:33:10  25  	  data_table_name => '&bldtable',
00:33:10  26  	  xform_view_name => 'xformed_build_miss_cat');
00:33:10  27  
00:33:10  28  	-- Perform outlier treatment.
00:33:10  29  	-- create clip table
00:33:10  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
00:33:10  31  
00:33:10  32  	-- populate clip table
00:33:10  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
00:33:10  34  	  clip_table_name => 'svmc_clip',
00:33:10  35  	  data_table_name => '&bldtable',
00:33:10  36  	  tail_frac	  => 0.025,
00:33:10  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
00:33:10  38  
00:33:10  39  	-- xform input data to winsorized data
00:33:10  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
00:33:10  41  	  clip_table_name => 'svmc_clip',
00:33:10  42  	  data_table_name => '&bldtable',
00:33:10  43  	  xform_view_name => 'svmc_winsor');
00:33:10  44  
00:33:10  45  	-- create normalization table
00:33:10  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
00:33:10  47  
00:33:10  48  	-- populate normalization table based on winsorized data
00:33:10  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
00:33:10  50  	  norm_table_name => 'svmc_norm',
00:33:10  51  	  data_table_name => 'svmc_winsor',
00:33:10  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
00:33:10  53  
00:33:10  54  	-- normalize the original data
00:33:10  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
00:33:10  56  	  norm_table_name => 'svmc_norm',
00:33:10  57  	  data_table_name => '&bldtable',
00:33:10  58  	  xform_view_name => 'svmc_build_prep');
00:33:10  59  END;
00:33:10  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:18.01
00:33:28 SQL> 
00:33:28 SQL> ---------------------
00:33:28 SQL> -- CREATE A NEW MODEL
00:33:28 SQL> --
00:33:28 SQL> -- Cleanup old model with the same name for repeat runs
00:33:28 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
00:33:28   2  EXCEPTION WHEN OTHERS THEN NULL; END;
00:33:28   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.93
00:33:28 SQL> 
00:33:28 SQL> -- Build a new SVM Model
00:33:28 SQL> BEGIN
00:33:28   2  	DBMS_DATA_MINING.CREATE_MODEL(
00:33:28   3  	  model_name	      => '&model_name',
00:33:28   4  	  mining_function     => dbms_data_mining.classification,
00:33:28   5  	  data_table_name     => 'svmc_build_prep',
00:33:28   6  	  case_id_column_name => '&case_id',
00:33:28   7  	  target_column_name  => '&target',
00:33:28   8  	  settings_table_name => 'svmc_settings');
00:33:28   9  END;
00:33:28  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:29.28
00:33:58 SQL> 
00:33:58 SQL> -----------------------------------------------------------------------
00:33:58 SQL> --			       APPLY/score THE MODEL
00:33:58 SQL> -----------------------------------------------------------------------
00:33:58 SQL> 
00:33:58 SQL> -- Cleanup old scoring data preparation objects for repeat runs
00:33:58 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
00:33:58   2  EXCEPTION WHEN OTHERS THEN NULL; END;
00:33:58   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
00:33:58 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
00:33:58   2  EXCEPTION WHEN OTHERS THEN NULL; END;
00:33:58   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
00:33:58 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
00:33:58   2  EXCEPTION WHEN OTHERS THEN NULL; END;
00:33:58   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
00:33:58 SQL> -----------------------
00:33:58 SQL> -- PREPARE SCORING DATA
00:33:58 SQL> --
00:33:58 SQL> -- If the data for model creation has been prepared, then the data
00:33:58 SQL> -- to be scored using the model must be prepared in the same manner
00:33:58 SQL> -- in order to obtain meaningful results.
00:33:58 SQL> --
00:33:58 SQL> -- 1. Missing Value treatment for all Predictors and
00:33:58 SQL> -- 2. Normalization
00:33:58 SQL> -- No outlier treatment will be performed during test and apply. The
00:33:58 SQL> -- normalization step is sufficient, since the normalization parameters
00:33:58 SQL> -- already capture the effects of outlier treatment done with build data.
00:33:58 SQL> --
00:33:58 SQL> BEGIN
00:33:58   2  	-- Xform Test data to replace missing values
00:33:58   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
00:33:58   4  	  miss_table_name => 'svmc_miss_num',
00:33:58   5  	  data_table_name => '&scoretable',
00:33:58   6  	  xform_view_name => 'xformed_apply_miss_num');
00:33:58   7  
00:33:58   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
00:33:58   9  	  miss_table_name => 'svmc_miss_cat',
00:33:58  10  	  data_table_name => '&scoretable',
00:33:58  11  	  xform_view_name => 'xformed_apply_miss_cat');
00:33:58  12  
00:33:58  13  	-- Normalize the data to be scored
00:33:58  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
00:33:58  15  	  norm_table_name => 'svmc_norm',
00:33:58  16  	  data_table_name => '&scoretable',
00:33:58  17  	  xform_view_name => 'svmc_apply_prep');
00:33:58  18  END;
00:33:58  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.28
00:33:59 SQL> 
00:33:59 SQL> -- Use same model_name used in score.sql
00:33:59 SQL> DEFINE model_name = 'forex14'
00:33:59 SQL> 
00:33:59 SQL> -- CREATE TABLE fxscores6 (prdate VARCHAR2(30),score NUMBER,rundate DATE,pair VARCHAR2(8),ydate DATE);
00:33:59 SQL> 
00:33:59 SQL> DELETE fxscores6 WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.03
00:33:59 SQL> 
00:33:59 SQL> INSERT INTO fxscores6 (prdate,score,rundate,pair,ydate)
00:33:59   2  SELECT
00:33:59   3  prdate
00:33:59   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
00:33:59   5  ,sysdate
00:33:59   6  ,SUBSTR(prdate,1,3)pair
00:33:59   7  ,SUBSTR(prdate,4,19)ydate
00:33:59   8  FROM svmc_apply_prep
00:33:59   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.17
00:33:59 SQL> @aud_score1day_gattn.sql	2010-12-31 00:10:00
00:33:59 SQL> --
00:33:59 SQL> -- aud_score1day_gattn.sql
00:33:59 SQL> --
00:33:59 SQL> 
00:33:59 SQL> CREATE OR REPLACE VIEW sme AS
00:33:59   2  SELECT
00:33:59   3  'aud'||m.ydate prdate
00:33:59   4  ,NULL gattn
00:33:59   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
00:33:59   6  ,eur_g00
00:33:59   7  ,eur_g01
00:33:59   8  ,eur_g02
00:33:59   9  ,eur_g03
00:33:59  10  ,eur_g04
00:33:59  11  ,eur_g05
00:33:59  12  ,eur_g06
00:33:59  13  ,eur_g07
00:33:59  14  ,eur_g08
00:33:59  15  ,eur_g09
00:33:59  16  ,eur_g10
00:33:59  17  ,eur_g11
00:33:59  18  ,eur_g12
00:33:59  19  ,eur_g13
00:33:59  20  ,eur_g14
00:33:59  21  ,eur_g15
00:33:59  22  ,eur_g16
00:33:59  23  ,eur_g17
00:33:59  24  ,eur_g18
00:33:59  25  ,eur_g19
00:33:59  26  ,eur_g20
00:33:59  27  ,eur_g21
00:33:59  28  ,eur_g22
00:33:59  29  ,eur_g23
00:33:59  30  ,eur_g24
00:33:59  31  ,eur_g25
00:33:59  32  ,eur_g26
00:33:59  33  ,eur_g27
00:33:59  34  ,eur_g28
00:33:59  35  ,eur_g29
00:33:59  36  ,eur_g30
00:33:59  37  ,eur_g31
00:33:59  38  ,eur_g32
00:33:59  39  ,eur_g33
00:33:59  40  ,eur_g34
00:33:59  41  ,eur_g35
00:33:59  42  ,eur_g36
00:33:59  43  ,eur_g37
00:33:59  44  ,eur_g38
00:33:59  45  ,eur_g39
00:33:59  46  ,eur_g40
00:33:59  47  ,eur_g41
00:33:59  48  ,aud_g00
00:33:59  49  ,aud_g01
00:33:59  50  ,aud_g02
00:33:59  51  ,aud_g03
00:33:59  52  ,aud_g04
00:33:59  53  ,aud_g05
00:33:59  54  ,aud_g06
00:33:59  55  ,aud_g07
00:33:59  56  ,aud_g08
00:33:59  57  ,aud_g09
00:33:59  58  ,aud_g10
00:33:59  59  ,aud_g11
00:33:59  60  ,aud_g12
00:33:59  61  ,aud_g13
00:33:59  62  ,aud_g14
00:33:59  63  ,aud_g15
00:33:59  64  ,aud_g16
00:33:59  65  ,aud_g17
00:33:59  66  ,aud_g18
00:33:59  67  ,aud_g19
00:33:59  68  ,aud_g20
00:33:59  69  ,aud_g21
00:33:59  70  ,aud_g22
00:33:59  71  ,aud_g23
00:33:59  72  ,aud_g24
00:33:59  73  ,aud_g25
00:33:59  74  ,aud_g26
00:33:59  75  ,aud_g27
00:33:59  76  ,aud_g28
00:33:59  77  ,aud_g29
00:33:59  78  ,aud_g30
00:33:59  79  ,aud_g31
00:33:59  80  ,aud_g32
00:33:59  81  ,aud_g33
00:33:59  82  ,aud_g34
00:33:59  83  ,aud_g35
00:33:59  84  ,aud_g36
00:33:59  85  ,aud_g37
00:33:59  86  ,aud_g38
00:33:59  87  ,aud_g39
00:33:59  88  ,aud_g40
00:33:59  89  ,aud_g41
00:33:59  90  ,gbp_g00
00:33:59  91  ,gbp_g01
00:33:59  92  ,gbp_g02
00:33:59  93  ,gbp_g03
00:33:59  94  ,gbp_g04
00:33:59  95  ,gbp_g05
00:33:59  96  ,gbp_g06
00:33:59  97  ,gbp_g07
00:33:59  98  ,gbp_g08
00:33:59  99  ,gbp_g09
00:33:59 100  ,gbp_g10
00:33:59 101  ,gbp_g11
00:33:59 102  ,gbp_g12
00:33:59 103  ,gbp_g13
00:33:59 104  ,gbp_g14
00:33:59 105  ,gbp_g15
00:33:59 106  ,gbp_g16
00:33:59 107  ,gbp_g17
00:33:59 108  ,gbp_g18
00:33:59 109  ,gbp_g19
00:33:59 110  ,gbp_g20
00:33:59 111  ,gbp_g21
00:33:59 112  ,gbp_g22
00:33:59 113  ,gbp_g23
00:33:59 114  ,gbp_g24
00:33:59 115  ,gbp_g25
00:33:59 116  ,gbp_g26
00:33:59 117  ,gbp_g27
00:33:59 118  ,gbp_g28
00:33:59 119  ,gbp_g29
00:33:59 120  ,gbp_g30
00:33:59 121  ,gbp_g31
00:33:59 122  ,gbp_g32
00:33:59 123  ,gbp_g33
00:33:59 124  ,gbp_g34
00:33:59 125  ,gbp_g35
00:33:59 126  ,gbp_g36
00:33:59 127  ,gbp_g37
00:33:59 128  ,gbp_g38
00:33:59 129  ,gbp_g39
00:33:59 130  ,gbp_g40
00:33:59 131  ,gbp_g41
00:33:59 132  ,jpy_g00
00:33:59 133  ,jpy_g01
00:33:59 134  ,jpy_g02
00:33:59 135  ,jpy_g03
00:33:59 136  ,jpy_g04
00:33:59 137  ,jpy_g05
00:33:59 138  ,jpy_g06
00:33:59 139  ,jpy_g07
00:33:59 140  ,jpy_g08
00:33:59 141  ,jpy_g09
00:33:59 142  ,jpy_g10
00:33:59 143  ,jpy_g11
00:33:59 144  ,jpy_g12
00:33:59 145  ,jpy_g13
00:33:59 146  ,jpy_g14
00:33:59 147  ,jpy_g15
00:33:59 148  ,jpy_g16
00:33:59 149  ,jpy_g17
00:33:59 150  ,jpy_g18
00:33:59 151  ,jpy_g19
00:33:59 152  ,jpy_g20
00:33:59 153  ,jpy_g21
00:33:59 154  ,jpy_g22
00:33:59 155  ,jpy_g23
00:33:59 156  ,jpy_g24
00:33:59 157  ,jpy_g25
00:33:59 158  ,jpy_g26
00:33:59 159  ,jpy_g27
00:33:59 160  ,jpy_g28
00:33:59 161  ,jpy_g29
00:33:59 162  ,jpy_g30
00:33:59 163  ,jpy_g31
00:33:59 164  ,jpy_g32
00:33:59 165  ,jpy_g33
00:33:59 166  ,jpy_g34
00:33:59 167  ,jpy_g35
00:33:59 168  ,jpy_g36
00:33:59 169  ,jpy_g37
00:33:59 170  ,jpy_g38
00:33:59 171  ,jpy_g39
00:33:59 172  ,jpy_g40
00:33:59 173  ,jpy_g41
00:33:59 174  ,cad_g00
00:33:59 175  ,cad_g01
00:33:59 176  ,cad_g02
00:33:59 177  ,cad_g03
00:33:59 178  ,cad_g04
00:33:59 179  ,cad_g05
00:33:59 180  ,cad_g06
00:33:59 181  ,cad_g07
00:33:59 182  ,cad_g08
00:33:59 183  ,cad_g09
00:33:59 184  ,cad_g10
00:33:59 185  ,cad_g11
00:33:59 186  ,cad_g12
00:33:59 187  ,cad_g13
00:33:59 188  ,cad_g14
00:33:59 189  ,cad_g15
00:33:59 190  ,cad_g16
00:33:59 191  ,cad_g17
00:33:59 192  ,cad_g18
00:33:59 193  ,cad_g19
00:33:59 194  ,cad_g20
00:33:59 195  ,cad_g21
00:33:59 196  ,cad_g22
00:33:59 197  ,cad_g23
00:33:59 198  ,cad_g24
00:33:59 199  ,cad_g25
00:33:59 200  ,cad_g26
00:33:59 201  ,cad_g27
00:33:59 202  ,cad_g28
00:33:59 203  ,cad_g29
00:33:59 204  ,cad_g30
00:33:59 205  ,cad_g31
00:33:59 206  ,cad_g32
00:33:59 207  ,cad_g33
00:33:59 208  ,cad_g34
00:33:59 209  ,cad_g35
00:33:59 210  ,cad_g36
00:33:59 211  ,cad_g37
00:33:59 212  ,cad_g38
00:33:59 213  ,cad_g39
00:33:59 214  ,cad_g40
00:33:59 215  ,cad_g41
00:33:59 216  ,chf_g00
00:33:59 217  ,chf_g01
00:33:59 218  ,chf_g02
00:33:59 219  ,chf_g03
00:33:59 220  ,chf_g04
00:33:59 221  ,chf_g05
00:33:59 222  ,chf_g06
00:33:59 223  ,chf_g07
00:33:59 224  ,chf_g08
00:33:59 225  ,chf_g09
00:33:59 226  ,chf_g10
00:33:59 227  ,chf_g11
00:33:59 228  ,chf_g12
00:33:59 229  ,chf_g13
00:33:59 230  ,chf_g14
00:33:59 231  ,chf_g15
00:33:59 232  ,chf_g16
00:33:59 233  ,chf_g17
00:33:59 234  ,chf_g18
00:33:59 235  ,chf_g19
00:33:59 236  ,chf_g20
00:33:59 237  ,chf_g21
00:33:59 238  ,chf_g22
00:33:59 239  ,chf_g23
00:33:59 240  ,chf_g24
00:33:59 241  ,chf_g25
00:33:59 242  ,chf_g26
00:33:59 243  ,chf_g27
00:33:59 244  ,chf_g28
00:33:59 245  ,chf_g29
00:33:59 246  ,chf_g30
00:33:59 247  ,chf_g31
00:33:59 248  ,chf_g32
00:33:59 249  ,chf_g33
00:33:59 250  ,chf_g34
00:33:59 251  ,chf_g35
00:33:59 252  ,chf_g36
00:33:59 253  ,chf_g37
00:33:59 254  ,chf_g38
00:33:59 255  ,chf_g39
00:33:59 256  ,chf_g40
00:33:59 257  ,chf_g41
00:33:59 258  FROM aud_ms6 m
00:33:59 259  WHERE m.ydate = '&1'||' '||'&2'
00:33:59 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2010-12-31'||' '||'00:10:00'

View created.

Elapsed: 00:00:00.12
00:34:00 SQL> 
00:34:00 SQL> -- rpt
00:34:00 SQL> -- We should see just 1 row:
00:34:00 SQL> 
00:34:00 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
00:34:00 SQL> 
00:34:00 SQL> -- Build the model:
00:34:00 SQL> CREATE OR REPLACE VIEW bme AS
00:34:00   2  SELECT
00:34:00   3  'aud'||m.ydate prdate
00:34:00   4  ,gattn
00:34:00   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
00:34:00   6  ,eur_g00
00:34:00   7  ,eur_g01
00:34:00   8  ,eur_g02
00:34:00   9  ,eur_g03
00:34:00  10  ,eur_g04
00:34:00  11  ,eur_g05
00:34:00  12  ,eur_g06
00:34:00  13  ,eur_g07
00:34:00  14  ,eur_g08
00:34:00  15  ,eur_g09
00:34:00  16  ,eur_g10
00:34:00  17  ,eur_g11
00:34:00  18  ,eur_g12
00:34:00  19  ,eur_g13
00:34:00  20  ,eur_g14
00:34:00  21  ,eur_g15
00:34:00  22  ,eur_g16
00:34:00  23  ,eur_g17
00:34:00  24  ,eur_g18
00:34:00  25  ,eur_g19
00:34:00  26  ,eur_g20
00:34:00  27  ,eur_g21
00:34:00  28  ,eur_g22
00:34:00  29  ,eur_g23
00:34:00  30  ,eur_g24
00:34:00  31  ,eur_g25
00:34:00  32  ,eur_g26
00:34:00  33  ,eur_g27
00:34:00  34  ,eur_g28
00:34:00  35  ,eur_g29
00:34:00  36  ,eur_g30
00:34:00  37  ,eur_g31
00:34:00  38  ,eur_g32
00:34:00  39  ,eur_g33
00:34:00  40  ,eur_g34
00:34:00  41  ,eur_g35
00:34:00  42  ,eur_g36
00:34:00  43  ,eur_g37
00:34:00  44  ,eur_g38
00:34:00  45  ,eur_g39
00:34:00  46  ,eur_g40
00:34:00  47  ,eur_g41
00:34:00  48  ,aud_g00
00:34:00  49  ,aud_g01
00:34:00  50  ,aud_g02
00:34:00  51  ,aud_g03
00:34:00  52  ,aud_g04
00:34:00  53  ,aud_g05
00:34:00  54  ,aud_g06
00:34:00  55  ,aud_g07
00:34:00  56  ,aud_g08
00:34:00  57  ,aud_g09
00:34:00  58  ,aud_g10
00:34:00  59  ,aud_g11
00:34:00  60  ,aud_g12
00:34:00  61  ,aud_g13
00:34:00  62  ,aud_g14
00:34:00  63  ,aud_g15
00:34:00  64  ,aud_g16
00:34:00  65  ,aud_g17
00:34:00  66  ,aud_g18
00:34:00  67  ,aud_g19
00:34:00  68  ,aud_g20
00:34:00  69  ,aud_g21
00:34:00  70  ,aud_g22
00:34:00  71  ,aud_g23
00:34:00  72  ,aud_g24
00:34:00  73  ,aud_g25
00:34:00  74  ,aud_g26
00:34:00  75  ,aud_g27
00:34:00  76  ,aud_g28
00:34:00  77  ,aud_g29
00:34:00  78  ,aud_g30
00:34:00  79  ,aud_g31
00:34:00  80  ,aud_g32
00:34:00  81  ,aud_g33
00:34:00  82  ,aud_g34
00:34:00  83  ,aud_g35
00:34:00  84  ,aud_g36
00:34:00  85  ,aud_g37
00:34:00  86  ,aud_g38
00:34:00  87  ,aud_g39
00:34:00  88  ,aud_g40
00:34:00  89  ,aud_g41
00:34:00  90  ,gbp_g00
00:34:00  91  ,gbp_g01
00:34:00  92  ,gbp_g02
00:34:00  93  ,gbp_g03
00:34:00  94  ,gbp_g04
00:34:00  95  ,gbp_g05
00:34:00  96  ,gbp_g06
00:34:00  97  ,gbp_g07
00:34:00  98  ,gbp_g08
00:34:00  99  ,gbp_g09
00:34:00 100  ,gbp_g10
00:34:00 101  ,gbp_g11
00:34:00 102  ,gbp_g12
00:34:00 103  ,gbp_g13
00:34:00 104  ,gbp_g14
00:34:00 105  ,gbp_g15
00:34:00 106  ,gbp_g16
00:34:00 107  ,gbp_g17
00:34:00 108  ,gbp_g18
00:34:00 109  ,gbp_g19
00:34:00 110  ,gbp_g20
00:34:00 111  ,gbp_g21
00:34:00 112  ,gbp_g22
00:34:00 113  ,gbp_g23
00:34:00 114  ,gbp_g24
00:34:00 115  ,gbp_g25
00:34:00 116  ,gbp_g26
00:34:00 117  ,gbp_g27
00:34:00 118  ,gbp_g28
00:34:00 119  ,gbp_g29
00:34:00 120  ,gbp_g30
00:34:00 121  ,gbp_g31
00:34:00 122  ,gbp_g32
00:34:00 123  ,gbp_g33
00:34:00 124  ,gbp_g34
00:34:00 125  ,gbp_g35
00:34:00 126  ,gbp_g36
00:34:00 127  ,gbp_g37
00:34:00 128  ,gbp_g38
00:34:00 129  ,gbp_g39
00:34:00 130  ,gbp_g40
00:34:00 131  ,gbp_g41
00:34:00 132  ,jpy_g00
00:34:00 133  ,jpy_g01
00:34:00 134  ,jpy_g02
00:34:00 135  ,jpy_g03
00:34:00 136  ,jpy_g04
00:34:00 137  ,jpy_g05
00:34:00 138  ,jpy_g06
00:34:00 139  ,jpy_g07
00:34:00 140  ,jpy_g08
00:34:00 141  ,jpy_g09
00:34:00 142  ,jpy_g10
00:34:00 143  ,jpy_g11
00:34:00 144  ,jpy_g12
00:34:00 145  ,jpy_g13
00:34:00 146  ,jpy_g14
00:34:00 147  ,jpy_g15
00:34:00 148  ,jpy_g16
00:34:00 149  ,jpy_g17
00:34:00 150  ,jpy_g18
00:34:00 151  ,jpy_g19
00:34:00 152  ,jpy_g20
00:34:00 153  ,jpy_g21
00:34:00 154  ,jpy_g22
00:34:00 155  ,jpy_g23
00:34:00 156  ,jpy_g24
00:34:00 157  ,jpy_g25
00:34:00 158  ,jpy_g26
00:34:00 159  ,jpy_g27
00:34:00 160  ,jpy_g28
00:34:00 161  ,jpy_g29
00:34:00 162  ,jpy_g30
00:34:00 163  ,jpy_g31
00:34:00 164  ,jpy_g32
00:34:00 165  ,jpy_g33
00:34:00 166  ,jpy_g34
00:34:00 167  ,jpy_g35
00:34:00 168  ,jpy_g36
00:34:00 169  ,jpy_g37
00:34:00 170  ,jpy_g38
00:34:00 171  ,jpy_g39
00:34:00 172  ,jpy_g40
00:34:00 173  ,jpy_g41
00:34:00 174  ,cad_g00
00:34:00 175  ,cad_g01
00:34:00 176  ,cad_g02
00:34:00 177  ,cad_g03
00:34:00 178  ,cad_g04
00:34:00 179  ,cad_g05
00:34:00 180  ,cad_g06
00:34:00 181  ,cad_g07
00:34:00 182  ,cad_g08
00:34:00 183  ,cad_g09
00:34:00 184  ,cad_g10
00:34:00 185  ,cad_g11
00:34:00 186  ,cad_g12
00:34:00 187  ,cad_g13
00:34:00 188  ,cad_g14
00:34:00 189  ,cad_g15
00:34:00 190  ,cad_g16
00:34:00 191  ,cad_g17
00:34:00 192  ,cad_g18
00:34:00 193  ,cad_g19
00:34:00 194  ,cad_g20
00:34:00 195  ,cad_g21
00:34:00 196  ,cad_g22
00:34:00 197  ,cad_g23
00:34:00 198  ,cad_g24
00:34:00 199  ,cad_g25
00:34:00 200  ,cad_g26
00:34:00 201  ,cad_g27
00:34:00 202  ,cad_g28
00:34:00 203  ,cad_g29
00:34:00 204  ,cad_g30
00:34:00 205  ,cad_g31
00:34:00 206  ,cad_g32
00:34:00 207  ,cad_g33
00:34:00 208  ,cad_g34
00:34:00 209  ,cad_g35
00:34:00 210  ,cad_g36
00:34:00 211  ,cad_g37
00:34:00 212  ,cad_g38
00:34:00 213  ,cad_g39
00:34:00 214  ,cad_g40
00:34:00 215  ,cad_g41
00:34:00 216  ,chf_g00
00:34:00 217  ,chf_g01
00:34:00 218  ,chf_g02
00:34:00 219  ,chf_g03
00:34:00 220  ,chf_g04
00:34:00 221  ,chf_g05
00:34:00 222  ,chf_g06
00:34:00 223  ,chf_g07
00:34:00 224  ,chf_g08
00:34:00 225  ,chf_g09
00:34:00 226  ,chf_g10
00:34:00 227  ,chf_g11
00:34:00 228  ,chf_g12
00:34:00 229  ,chf_g13
00:34:00 230  ,chf_g14
00:34:00 231  ,chf_g15
00:34:00 232  ,chf_g16
00:34:00 233  ,chf_g17
00:34:00 234  ,chf_g18
00:34:00 235  ,chf_g19
00:34:00 236  ,chf_g20
00:34:00 237  ,chf_g21
00:34:00 238  ,chf_g22
00:34:00 239  ,chf_g23
00:34:00 240  ,chf_g24
00:34:00 241  ,chf_g25
00:34:00 242  ,chf_g26
00:34:00 243  ,chf_g27
00:34:00 244  ,chf_g28
00:34:00 245  ,chf_g29
00:34:00 246  ,chf_g30
00:34:00 247  ,chf_g31
00:34:00 248  ,chf_g32
00:34:00 249  ,chf_g33
00:34:00 250  ,chf_g34
00:34:00 251  ,chf_g35
00:34:00 252  ,chf_g36
00:34:00 253  ,chf_g37
00:34:00 254  ,chf_g38
00:34:00 255  ,chf_g39
00:34:00 256  ,chf_g40
00:34:00 257  ,chf_g41
00:34:00 258  FROM aud_ms6 m
00:34:00 259  WHERE gattn IN('nup','up')
00:34:00 260  AND 1+m.ydate < '&1'||' '||'&2'
00:34:00 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2010-12-31'||' '||'00:10:00'

View created.

Elapsed: 00:00:00.12
00:34:00 SQL> 
00:34:00 SQL> -- rpt
00:34:00 SQL> 
00:34:00 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	    13174
up	     6363

Elapsed: 00:00:00.04
00:34:00 SQL> 
00:34:00 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
aud2010-12-30 00:05:00

Elapsed: 00:00:00.04
00:34:00 SQL> 
00:34:00 SQL> -- Now build model from bme and score sme
00:34:00 SQL> @score1gattn.sql
00:34:00 SQL> -- score1gattn.sql
00:34:00 SQL> 
00:34:00 SQL> -- Does the 1st SVM score
00:34:00 SQL> 
00:34:00 SQL> -- Fill up svmc_apply_prep
00:34:00 SQL> @score_gattn.sql
00:34:00 SQL> --
00:34:00 SQL> -- score_gattn.sql
00:34:00 SQL> --
00:34:00 SQL> 
00:34:00 SQL> -- usage: score_gattn.sql
00:34:00 SQL> 
00:34:00 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
00:34:00 SQL> 
00:34:00 SQL> DEFINE target	= 'gattn'
00:34:00 SQL> DEFINE model_name = 'forex14'
00:34:00 SQL> DEFINE bldtable	= 'bme'
00:34:00 SQL> DEFINE scoretable = 'sme'
00:34:00 SQL> DEFINE case_id	= 'prdate'
00:34:00 SQL> 
00:34:00 SQL> -- Define a variable to help me exclude some columns from some data mining calls
00:34:00 SQL> DEFINE exclude1 = "'&target','&case_id'"
00:34:00 SQL> 
00:34:00 SQL> -- Builds an SVM model using pl/sql.
00:34:00 SQL> 
00:34:00 SQL> -----------------------------------------------------------------------
00:34:00 SQL> --			    BUILD THE MODEL
00:34:00 SQL> -----------------------------------------------------------------------
00:34:00 SQL> 
00:34:00 SQL> -- Cleanup old build data preparation objects for repeat runs
00:34:00 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.00
00:34:00 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
00:34:00 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.01
00:34:00 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.00
00:34:00 SQL> 
00:34:00 SQL> 
00:34:00 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
00:34:00 SQL> --
00:34:00 SQL> -- DROP	TABLE svmc_settings ;
00:34:00 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
00:34:00 SQL> -- DELETE svmc_settings;
00:34:00 SQL> 
00:34:00 SQL> -- The default classification algorithm is Naive Bayes. So override
00:34:00 SQL> -- this choice to SVM using a settings table.
00:34:00 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
00:34:00 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
00:34:00 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
00:34:00 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
00:34:00 SQL> -- models.
00:34:00 SQL> --
00:34:00 SQL> 
00:34:00 SQL> -- Do this once and then comment it out.
00:34:00 SQL> -- That makes script go faster.
00:34:00 SQL> -- BEGIN
00:34:00 SQL> -- -- Populate settings table
00:34:00 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
00:34:00 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
00:34:00 SQL> --
00:34:00 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
00:34:00 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
00:34:00 SQL> --
00:34:00 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
00:34:00 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
00:34:00 SQL> --   COMMIT;
00:34:00 SQL> -- END;
00:34:00 SQL> -- /
00:34:00 SQL> 
00:34:00 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
00:34:00 SQL> 
00:34:00 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
00:34:00   2  EXCEPTION WHEN OTHERS THEN NULL; END;
00:34:00   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
00:34:00 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
00:34:00   2  EXCEPTION WHEN OTHERS THEN NULL; END;
00:34:00   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
00:34:00 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
00:34:00   2  EXCEPTION WHEN OTHERS THEN NULL; END;
00:34:00   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
00:34:00 SQL> 
00:34:00 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
00:34:00   2  EXCEPTION WHEN OTHERS THEN NULL; END;
00:34:00   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
00:34:00 SQL> 
00:34:00 SQL> --------------------------------
00:34:00 SQL> -- PREPARE BUILD (TRAINING) DATA
00:34:00 SQL> --
00:34:00 SQL> 
00:34:00 SQL> -- 1. Missing Value treatment for all Predictors and
00:34:00 SQL> -- 2. Outlier Treatment and
00:34:00 SQL> -- 3. Normalization are performed below.
00:34:00 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
00:34:00 SQL> --    normalized here.
00:34:00 SQL> 
00:34:00 SQL> BEGIN
00:34:00   2  	-- Perform missing value treatment for all predictors
00:34:00   3  	-- create miss tables
00:34:00   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
00:34:00   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
00:34:00   6  
00:34:00   7  	-- populate miss tables
00:34:00   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
00:34:00   9  	  miss_table_name => 'svmc_miss_num',
00:34:00  10  	  data_table_name => '&bldtable',
00:34:00  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
00:34:00  12  
00:34:00  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
00:34:00  14  	  miss_table_name => 'svmc_miss_cat',
00:34:00  15  	  data_table_name => '&bldtable',
00:34:00  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
00:34:00  17  
00:34:00  18  	-- xform input data to replace missing values
00:34:00  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
00:34:00  20  	  miss_table_name => 'svmc_miss_num',
00:34:00  21  	  data_table_name => '&bldtable',
00:34:00  22  	  xform_view_name => 'xformed_build_miss_num');
00:34:00  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
00:34:00  24  	  miss_table_name => 'svmc_miss_cat',
00:34:00  25  	  data_table_name => '&bldtable',
00:34:00  26  	  xform_view_name => 'xformed_build_miss_cat');
00:34:00  27  
00:34:00  28  	-- Perform outlier treatment.
00:34:00  29  	-- create clip table
00:34:00  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
00:34:00  31  
00:34:00  32  	-- populate clip table
00:34:00  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
00:34:00  34  	  clip_table_name => 'svmc_clip',
00:34:00  35  	  data_table_name => '&bldtable',
00:34:00  36  	  tail_frac	  => 0.025,
00:34:00  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
00:34:00  38  
00:34:00  39  	-- xform input data to winsorized data
00:34:00  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
00:34:00  41  	  clip_table_name => 'svmc_clip',
00:34:00  42  	  data_table_name => '&bldtable',
00:34:00  43  	  xform_view_name => 'svmc_winsor');
00:34:00  44  
00:34:00  45  	-- create normalization table
00:34:00  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
00:34:00  47  
00:34:00  48  	-- populate normalization table based on winsorized data
00:34:00  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
00:34:00  50  	  norm_table_name => 'svmc_norm',
00:34:00  51  	  data_table_name => 'svmc_winsor',
00:34:00  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
00:34:00  53  
00:34:00  54  	-- normalize the original data
00:34:00  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
00:34:00  56  	  norm_table_name => 'svmc_norm',
00:34:00  57  	  data_table_name => '&bldtable',
00:34:00  58  	  xform_view_name => 'svmc_build_prep');
00:34:00  59  END;
00:34:00  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:18.23
00:34:18 SQL> 
00:34:18 SQL> ---------------------
00:34:18 SQL> -- CREATE A NEW MODEL
00:34:18 SQL> --
00:34:18 SQL> -- Cleanup old model with the same name for repeat runs
00:34:18 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
00:34:18   2  EXCEPTION WHEN OTHERS THEN NULL; END;
00:34:18   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.01
00:34:19 SQL> 
00:34:19 SQL> -- Build a new SVM Model
00:34:19 SQL> BEGIN
00:34:19   2  	DBMS_DATA_MINING.CREATE_MODEL(
00:34:19   3  	  model_name	      => '&model_name',
00:34:19   4  	  mining_function     => dbms_data_mining.classification,
00:34:19   5  	  data_table_name     => 'svmc_build_prep',
00:34:19   6  	  case_id_column_name => '&case_id',
00:34:19   7  	  target_column_name  => '&target',
00:34:19   8  	  settings_table_name => 'svmc_settings');
00:34:19   9  END;
00:34:19  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:27.77
00:34:47 SQL> 
00:34:47 SQL> -----------------------------------------------------------------------
00:34:47 SQL> --			       APPLY/score THE MODEL
00:34:47 SQL> -----------------------------------------------------------------------
00:34:47 SQL> 
00:34:47 SQL> -- Cleanup old scoring data preparation objects for repeat runs
00:34:47 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
00:34:47   2  EXCEPTION WHEN OTHERS THEN NULL; END;
00:34:47   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
00:34:47 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
00:34:47   2  EXCEPTION WHEN OTHERS THEN NULL; END;
00:34:47   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
00:34:47 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
00:34:47   2  EXCEPTION WHEN OTHERS THEN NULL; END;
00:34:47   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.15
00:34:47 SQL> -----------------------
00:34:47 SQL> -- PREPARE SCORING DATA
00:34:47 SQL> --
00:34:47 SQL> -- If the data for model creation has been prepared, then the data
00:34:47 SQL> -- to be scored using the model must be prepared in the same manner
00:34:47 SQL> -- in order to obtain meaningful results.
00:34:47 SQL> --
00:34:47 SQL> -- 1. Missing Value treatment for all Predictors and
00:34:47 SQL> -- 2. Normalization
00:34:47 SQL> -- No outlier treatment will be performed during test and apply. The
00:34:47 SQL> -- normalization step is sufficient, since the normalization parameters
00:34:47 SQL> -- already capture the effects of outlier treatment done with build data.
00:34:47 SQL> --
00:34:47 SQL> BEGIN
00:34:47   2  	-- Xform Test data to replace missing values
00:34:47   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
00:34:47   4  	  miss_table_name => 'svmc_miss_num',
00:34:47   5  	  data_table_name => '&scoretable',
00:34:47   6  	  xform_view_name => 'xformed_apply_miss_num');
00:34:47   7  
00:34:47   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
00:34:47   9  	  miss_table_name => 'svmc_miss_cat',
00:34:47  10  	  data_table_name => '&scoretable',
00:34:47  11  	  xform_view_name => 'xformed_apply_miss_cat');
00:34:47  12  
00:34:47  13  	-- Normalize the data to be scored
00:34:47  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
00:34:47  15  	  norm_table_name => 'svmc_norm',
00:34:47  16  	  data_table_name => '&scoretable',
00:34:47  17  	  xform_view_name => 'svmc_apply_prep');
00:34:47  18  END;
00:34:47  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.20
00:34:49 SQL> 
00:34:49 SQL> -- Use same model_name used in score_gattn.sql
00:34:49 SQL> DEFINE model_name = 'forex14'
00:34:49 SQL> 
00:34:49 SQL> DELETE fxscores6_gattn WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.04
00:34:49 SQL> 
00:34:49 SQL> INSERT INTO fxscores6_gattn (prdate,score,rundate,pair,ydate)
00:34:49   2  SELECT
00:34:49   3  prdate
00:34:49   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
00:34:49   5  ,sysdate
00:34:49   6  ,SUBSTR(prdate,1,3)pair
00:34:49   7  ,SUBSTR(prdate,4,19)ydate
00:34:49   8  FROM svmc_apply_prep
00:34:49   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.18
00:34:49 SQL> @aud_score1day_gattn.sql	2010-12-31 00:15:00
00:34:49 SQL> --
00:34:49 SQL> -- aud_score1day_gattn.sql
00:34:49 SQL> --
00:34:49 SQL> 
00:34:49 SQL> CREATE OR REPLACE VIEW sme AS
00:34:49   2  SELECT
00:34:49   3  'aud'||m.ydate prdate
00:34:49   4  ,NULL gattn
00:34:49   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
00:34:49   6  ,eur_g00
00:34:49   7  ,eur_g01
00:34:49   8  ,eur_g02
00:34:49   9  ,eur_g03
00:34:49  10  ,eur_g04
00:34:49  11  ,eur_g05
00:34:49  12  ,eur_g06
00:34:49  13  ,eur_g07
00:34:49  14  ,eur_g08
00:34:49  15  ,eur_g09
00:34:49  16  ,eur_g10
00:34:49  17  ,eur_g11
00:34:49  18  ,eur_g12
00:34:49  19  ,eur_g13
00:34:49  20  ,eur_g14
00:34:49  21  ,eur_g15
00:34:49  22  ,eur_g16
00:34:49  23  ,eur_g17
00:34:49  24  ,eur_g18
00:34:49  25  ,eur_g19
00:34:49  26  ,eur_g20
00:34:49  27  ,eur_g21
00:34:49  28  ,eur_g22
00:34:49  29  ,eur_g23
00:34:49  30  ,eur_g24
00:34:49  31  ,eur_g25
00:34:49  32  ,eur_g26
00:34:49  33  ,eur_g27
00:34:49  34  ,eur_g28
00:34:49  35  ,eur_g29
00:34:49  36  ,eur_g30
00:34:49  37  ,eur_g31
00:34:49  38  ,eur_g32
00:34:49  39  ,eur_g33
00:34:49  40  ,eur_g34
00:34:49  41  ,eur_g35
00:34:49  42  ,eur_g36
00:34:49  43  ,eur_g37
00:34:49  44  ,eur_g38
00:34:49  45  ,eur_g39
00:34:49  46  ,eur_g40
00:34:49  47  ,eur_g41
00:34:49  48  ,aud_g00
00:34:49  49  ,aud_g01
00:34:49  50  ,aud_g02
00:34:49  51  ,aud_g03
00:34:49  52  ,aud_g04
00:34:49  53  ,aud_g05
00:34:49  54  ,aud_g06
00:34:49  55  ,aud_g07
00:34:49  56  ,aud_g08
00:34:49  57  ,aud_g09
00:34:49  58  ,aud_g10
00:34:49  59  ,aud_g11
00:34:49  60  ,aud_g12
00:34:49  61  ,aud_g13
00:34:49  62  ,aud_g14
00:34:49  63  ,aud_g15
00:34:49  64  ,aud_g16
00:34:49  65  ,aud_g17
00:34:49  66  ,aud_g18
00:34:49  67  ,aud_g19
00:34:49  68  ,aud_g20
00:34:49  69  ,aud_g21
00:34:49  70  ,aud_g22
00:34:49  71  ,aud_g23
00:34:49  72  ,aud_g24
00:34:49  73  ,aud_g25
00:34:49  74  ,aud_g26
00:34:49  75  ,aud_g27
00:34:49  76  ,aud_g28
00:34:49  77  ,aud_g29
00:34:49  78  ,aud_g30
00:34:49  79  ,aud_g31
00:34:49  80  ,aud_g32
00:34:49  81  ,aud_g33
00:34:49  82  ,aud_g34
00:34:49  83  ,aud_g35
00:34:49  84  ,aud_g36
00:34:49  85  ,aud_g37
00:34:49  86  ,aud_g38
00:34:49  87  ,aud_g39
00:34:49  88  ,aud_g40
00:34:49  89  ,aud_g41
00:34:49  90  ,gbp_g00
00:34:49  91  ,gbp_g01
00:34:49  92  ,gbp_g02
00:34:49  93  ,gbp_g03
00:34:49  94  ,gbp_g04
00:34:49  95  ,gbp_g05
00:34:49  96  ,gbp_g06
00:34:49  97  ,gbp_g07
00:34:49  98  ,gbp_g08
00:34:49  99  ,gbp_g09
00:34:49 100  ,gbp_g10
00:34:49 101  ,gbp_g11
00:34:49 102  ,gbp_g12
00:34:49 103  ,gbp_g13
00:34:49 104  ,gbp_g14
00:34:49 105  ,gbp_g15
00:34:49 106  ,gbp_g16
00:34:49 107  ,gbp_g17
00:34:49 108  ,gbp_g18
00:34:49 109  ,gbp_g19
00:34:49 110  ,gbp_g20
00:34:49 111  ,gbp_g21
00:34:49 112  ,gbp_g22
00:34:49 113  ,gbp_g23
00:34:49 114  ,gbp_g24
00:34:49 115  ,gbp_g25
00:34:49 116  ,gbp_g26
00:34:49 117  ,gbp_g27
00:34:49 118  ,gbp_g28
00:34:49 119  ,gbp_g29
00:34:49 120  ,gbp_g30
00:34:49 121  ,gbp_g31
00:34:49 122  ,gbp_g32
00:34:49 123  ,gbp_g33
00:34:49 124  ,gbp_g34
00:34:49 125  ,gbp_g35
00:34:49 126  ,gbp_g36
00:34:49 127  ,gbp_g37
00:34:49 128  ,gbp_g38
00:34:49 129  ,gbp_g39
00:34:49 130  ,gbp_g40
00:34:49 131  ,gbp_g41
00:34:49 132  ,jpy_g00
00:34:49 133  ,jpy_g01
00:34:49 134  ,jpy_g02
00:34:49 135  ,jpy_g03
00:34:49 136  ,jpy_g04
00:34:49 137  ,jpy_g05
00:34:49 138  ,jpy_g06
00:34:49 139  ,jpy_g07
00:34:49 140  ,jpy_g08
00:34:49 141  ,jpy_g09
00:34:49 142  ,jpy_g10
00:34:49 143  ,jpy_g11
00:34:49 144  ,jpy_g12
00:34:49 145  ,jpy_g13
00:34:49 146  ,jpy_g14
00:34:49 147  ,jpy_g15
00:34:49 148  ,jpy_g16
00:34:49 149  ,jpy_g17
00:34:49 150  ,jpy_g18
00:34:49 151  ,jpy_g19
00:34:49 152  ,jpy_g20
00:34:49 153  ,jpy_g21
00:34:49 154  ,jpy_g22
00:34:49 155  ,jpy_g23
00:34:49 156  ,jpy_g24
00:34:49 157  ,jpy_g25
00:34:49 158  ,jpy_g26
00:34:49 159  ,jpy_g27
00:34:49 160  ,jpy_g28
00:34:49 161  ,jpy_g29
00:34:49 162  ,jpy_g30
00:34:49 163  ,jpy_g31
00:34:49 164  ,jpy_g32
00:34:49 165  ,jpy_g33
00:34:49 166  ,jpy_g34
00:34:49 167  ,jpy_g35
00:34:49 168  ,jpy_g36
00:34:49 169  ,jpy_g37
00:34:49 170  ,jpy_g38
00:34:49 171  ,jpy_g39
00:34:49 172  ,jpy_g40
00:34:49 173  ,jpy_g41
00:34:49 174  ,cad_g00
00:34:49 175  ,cad_g01
00:34:49 176  ,cad_g02
00:34:49 177  ,cad_g03
00:34:49 178  ,cad_g04
00:34:49 179  ,cad_g05
00:34:49 180  ,cad_g06
00:34:49 181  ,cad_g07
00:34:49 182  ,cad_g08
00:34:49 183  ,cad_g09
00:34:49 184  ,cad_g10
00:34:49 185  ,cad_g11
00:34:49 186  ,cad_g12
00:34:49 187  ,cad_g13
00:34:49 188  ,cad_g14
00:34:49 189  ,cad_g15
00:34:49 190  ,cad_g16
00:34:49 191  ,cad_g17
00:34:49 192  ,cad_g18
00:34:49 193  ,cad_g19
00:34:49 194  ,cad_g20
00:34:49 195  ,cad_g21
00:34:49 196  ,cad_g22
00:34:49 197  ,cad_g23
00:34:49 198  ,cad_g24
00:34:49 199  ,cad_g25
00:34:49 200  ,cad_g26
00:34:49 201  ,cad_g27
00:34:49 202  ,cad_g28
00:34:49 203  ,cad_g29
00:34:49 204  ,cad_g30
00:34:49 205  ,cad_g31
00:34:49 206  ,cad_g32
00:34:49 207  ,cad_g33
00:34:49 208  ,cad_g34
00:34:49 209  ,cad_g35
00:34:49 210  ,cad_g36
00:34:49 211  ,cad_g37
00:34:49 212  ,cad_g38
00:34:49 213  ,cad_g39
00:34:49 214  ,cad_g40
00:34:49 215  ,cad_g41
00:34:49 216  ,chf_g00
00:34:49 217  ,chf_g01
00:34:49 218  ,chf_g02
00:34:49 219  ,chf_g03
00:34:49 220  ,chf_g04
00:34:49 221  ,chf_g05
00:34:49 222  ,chf_g06
00:34:49 223  ,chf_g07
00:34:49 224  ,chf_g08
00:34:49 225  ,chf_g09
00:34:49 226  ,chf_g10
00:34:49 227  ,chf_g11
00:34:49 228  ,chf_g12
00:34:49 229  ,chf_g13
00:34:49 230  ,chf_g14
00:34:49 231  ,chf_g15
00:34:49 232  ,chf_g16
00:34:49 233  ,chf_g17
00:34:49 234  ,chf_g18
00:34:49 235  ,chf_g19
00:34:49 236  ,chf_g20
00:34:49 237  ,chf_g21
00:34:49 238  ,chf_g22
00:34:49 239  ,chf_g23
00:34:49 240  ,chf_g24
00:34:49 241  ,chf_g25
00:34:49 242  ,chf_g26
00:34:49 243  ,chf_g27
00:34:49 244  ,chf_g28
00:34:49 245  ,chf_g29
00:34:49 246  ,chf_g30
00:34:49 247  ,chf_g31
00:34:49 248  ,chf_g32
00:34:49 249  ,chf_g33
00:34:49 250  ,chf_g34
00:34:49 251  ,chf_g35
00:34:49 252  ,chf_g36
00:34:49 253  ,chf_g37
00:34:49 254  ,chf_g38
00:34:49 255  ,chf_g39
00:34:49 256  ,chf_g40
00:34:49 257  ,chf_g41
00:34:49 258  FROM aud_ms6 m
00:34:49 259  WHERE m.ydate = '&1'||' '||'&2'
00:34:49 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2010-12-31'||' '||'00:15:00'

View created.

Elapsed: 00:00:00.13
00:34:49 SQL> 
00:34:49 SQL> -- rpt
00:34:49 SQL> -- We should see just 1 row:
00:34:49 SQL> 
00:34:49 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
00:34:49 SQL> 
00:34:49 SQL> -- Build the model:
00:34:49 SQL> CREATE OR REPLACE VIEW bme AS
00:34:49   2  SELECT
00:34:49   3  'aud'||m.ydate prdate
00:34:49   4  ,gattn
00:34:49   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
00:34:49   6  ,eur_g00
00:34:49   7  ,eur_g01
00:34:49   8  ,eur_g02
00:34:49   9  ,eur_g03
00:34:49  10  ,eur_g04
00:34:49  11  ,eur_g05
00:34:49  12  ,eur_g06
00:34:49  13  ,eur_g07
00:34:49  14  ,eur_g08
00:34:49  15  ,eur_g09
00:34:49  16  ,eur_g10
00:34:49  17  ,eur_g11
00:34:49  18  ,eur_g12
00:34:49  19  ,eur_g13
00:34:49  20  ,eur_g14
00:34:49  21  ,eur_g15
00:34:49  22  ,eur_g16
00:34:49  23  ,eur_g17
00:34:49  24  ,eur_g18
00:34:49  25  ,eur_g19
00:34:49  26  ,eur_g20
00:34:49  27  ,eur_g21
00:34:49  28  ,eur_g22
00:34:49  29  ,eur_g23
00:34:49  30  ,eur_g24
00:34:49  31  ,eur_g25
00:34:49  32  ,eur_g26
00:34:49  33  ,eur_g27
00:34:49  34  ,eur_g28
00:34:49  35  ,eur_g29
00:34:49  36  ,eur_g30
00:34:49  37  ,eur_g31
00:34:49  38  ,eur_g32
00:34:49  39  ,eur_g33
00:34:49  40  ,eur_g34
00:34:49  41  ,eur_g35
00:34:49  42  ,eur_g36
00:34:49  43  ,eur_g37
00:34:49  44  ,eur_g38
00:34:49  45  ,eur_g39
00:34:49  46  ,eur_g40
00:34:49  47  ,eur_g41
00:34:49  48  ,aud_g00
00:34:49  49  ,aud_g01
00:34:49  50  ,aud_g02
00:34:49  51  ,aud_g03
00:34:49  52  ,aud_g04
00:34:49  53  ,aud_g05
00:34:49  54  ,aud_g06
00:34:49  55  ,aud_g07
00:34:49  56  ,aud_g08
00:34:49  57  ,aud_g09
00:34:49  58  ,aud_g10
00:34:49  59  ,aud_g11
00:34:49  60  ,aud_g12
00:34:49  61  ,aud_g13
00:34:49  62  ,aud_g14
00:34:49  63  ,aud_g15
00:34:49  64  ,aud_g16
00:34:49  65  ,aud_g17
00:34:49  66  ,aud_g18
00:34:49  67  ,aud_g19
00:34:49  68  ,aud_g20
00:34:49  69  ,aud_g21
00:34:49  70  ,aud_g22
00:34:49  71  ,aud_g23
00:34:49  72  ,aud_g24
00:34:49  73  ,aud_g25
00:34:49  74  ,aud_g26
00:34:49  75  ,aud_g27
00:34:49  76  ,aud_g28
00:34:49  77  ,aud_g29
00:34:49  78  ,aud_g30
00:34:49  79  ,aud_g31
00:34:49  80  ,aud_g32
00:34:49  81  ,aud_g33
00:34:49  82  ,aud_g34
00:34:49  83  ,aud_g35
00:34:49  84  ,aud_g36
00:34:49  85  ,aud_g37
00:34:49  86  ,aud_g38
00:34:49  87  ,aud_g39
00:34:49  88  ,aud_g40
00:34:49  89  ,aud_g41
00:34:49  90  ,gbp_g00
00:34:49  91  ,gbp_g01
00:34:49  92  ,gbp_g02
00:34:49  93  ,gbp_g03
00:34:49  94  ,gbp_g04
00:34:49  95  ,gbp_g05
00:34:49  96  ,gbp_g06
00:34:49  97  ,gbp_g07
00:34:49  98  ,gbp_g08
00:34:49  99  ,gbp_g09
00:34:49 100  ,gbp_g10
00:34:49 101  ,gbp_g11
00:34:49 102  ,gbp_g12
00:34:49 103  ,gbp_g13
00:34:49 104  ,gbp_g14
00:34:49 105  ,gbp_g15
00:34:49 106  ,gbp_g16
00:34:49 107  ,gbp_g17
00:34:49 108  ,gbp_g18
00:34:49 109  ,gbp_g19
00:34:49 110  ,gbp_g20
00:34:49 111  ,gbp_g21
00:34:49 112  ,gbp_g22
00:34:49 113  ,gbp_g23
00:34:49 114  ,gbp_g24
00:34:49 115  ,gbp_g25
00:34:49 116  ,gbp_g26
00:34:49 117  ,gbp_g27
00:34:49 118  ,gbp_g28
00:34:49 119  ,gbp_g29
00:34:49 120  ,gbp_g30
00:34:49 121  ,gbp_g31
00:34:49 122  ,gbp_g32
00:34:49 123  ,gbp_g33
00:34:49 124  ,gbp_g34
00:34:49 125  ,gbp_g35
00:34:49 126  ,gbp_g36
00:34:49 127  ,gbp_g37
00:34:49 128  ,gbp_g38
00:34:49 129  ,gbp_g39
00:34:49 130  ,gbp_g40
00:34:49 131  ,gbp_g41
00:34:49 132  ,jpy_g00
00:34:49 133  ,jpy_g01
00:34:49 134  ,jpy_g02
00:34:49 135  ,jpy_g03
00:34:49 136  ,jpy_g04
00:34:49 137  ,jpy_g05
00:34:49 138  ,jpy_g06
00:34:49 139  ,jpy_g07
00:34:49 140  ,jpy_g08
00:34:49 141  ,jpy_g09
00:34:49 142  ,jpy_g10
00:34:49 143  ,jpy_g11
00:34:49 144  ,jpy_g12
00:34:49 145  ,jpy_g13
00:34:49 146  ,jpy_g14
00:34:49 147  ,jpy_g15
00:34:49 148  ,jpy_g16
00:34:49 149  ,jpy_g17
00:34:49 150  ,jpy_g18
00:34:49 151  ,jpy_g19
00:34:49 152  ,jpy_g20
00:34:49 153  ,jpy_g21
00:34:49 154  ,jpy_g22
00:34:49 155  ,jpy_g23
00:34:49 156  ,jpy_g24
00:34:49 157  ,jpy_g25
00:34:49 158  ,jpy_g26
00:34:49 159  ,jpy_g27
00:34:49 160  ,jpy_g28
00:34:49 161  ,jpy_g29
00:34:49 162  ,jpy_g30
00:34:49 163  ,jpy_g31
00:34:49 164  ,jpy_g32
00:34:49 165  ,jpy_g33
00:34:49 166  ,jpy_g34
00:34:49 167  ,jpy_g35
00:34:49 168  ,jpy_g36
00:34:49 169  ,jpy_g37
00:34:49 170  ,jpy_g38
00:34:49 171  ,jpy_g39
00:34:49 172  ,jpy_g40
00:34:49 173  ,jpy_g41
00:34:49 174  ,cad_g00
00:34:49 175  ,cad_g01
00:34:49 176  ,cad_g02
00:34:49 177  ,cad_g03
00:34:49 178  ,cad_g04
00:34:49 179  ,cad_g05
00:34:49 180  ,cad_g06
00:34:49 181  ,cad_g07
00:34:49 182  ,cad_g08
00:34:49 183  ,cad_g09
00:34:49 184  ,cad_g10
00:34:49 185  ,cad_g11
00:34:49 186  ,cad_g12
00:34:49 187  ,cad_g13
00:34:49 188  ,cad_g14
00:34:49 189  ,cad_g15
00:34:49 190  ,cad_g16
00:34:49 191  ,cad_g17
00:34:49 192  ,cad_g18
00:34:49 193  ,cad_g19
00:34:49 194  ,cad_g20
00:34:49 195  ,cad_g21
00:34:49 196  ,cad_g22
00:34:49 197  ,cad_g23
00:34:49 198  ,cad_g24
00:34:49 199  ,cad_g25
00:34:49 200  ,cad_g26
00:34:49 201  ,cad_g27
00:34:49 202  ,cad_g28
00:34:49 203  ,cad_g29
00:34:49 204  ,cad_g30
00:34:49 205  ,cad_g31
00:34:49 206  ,cad_g32
00:34:49 207  ,cad_g33
00:34:49 208  ,cad_g34
00:34:49 209  ,cad_g35
00:34:49 210  ,cad_g36
00:34:49 211  ,cad_g37
00:34:49 212  ,cad_g38
00:34:49 213  ,cad_g39
00:34:49 214  ,cad_g40
00:34:49 215  ,cad_g41
00:34:49 216  ,chf_g00
00:34:49 217  ,chf_g01
00:34:49 218  ,chf_g02
00:34:49 219  ,chf_g03
00:34:49 220  ,chf_g04
00:34:49 221  ,chf_g05
00:34:49 222  ,chf_g06
00:34:49 223  ,chf_g07
00:34:49 224  ,chf_g08
00:34:49 225  ,chf_g09
00:34:49 226  ,chf_g10
00:34:49 227  ,chf_g11
00:34:49 228  ,chf_g12
00:34:49 229  ,chf_g13
00:34:49 230  ,chf_g14
00:34:49 231  ,chf_g15
00:34:49 232  ,chf_g16
00:34:49 233  ,chf_g17
00:34:49 234  ,chf_g18
00:34:49 235  ,chf_g19
00:34:49 236  ,chf_g20
00:34:49 237  ,chf_g21
00:34:49 238  ,chf_g22
00:34:49 239  ,chf_g23
00:34:49 240  ,chf_g24
00:34:49 241  ,chf_g25
00:34:49 242  ,chf_g26
00:34:49 243  ,chf_g27
00:34:49 244  ,chf_g28
00:34:49 245  ,chf_g29
00:34:49 246  ,chf_g30
00:34:49 247  ,chf_g31
00:34:49 248  ,chf_g32
00:34:49 249  ,chf_g33
00:34:49 250  ,chf_g34
00:34:49 251  ,chf_g35
00:34:49 252  ,chf_g36
00:34:49 253  ,chf_g37
00:34:49 254  ,chf_g38
00:34:49 255  ,chf_g39
00:34:49 256  ,chf_g40
00:34:49 257  ,chf_g41
00:34:49 258  FROM aud_ms6 m
00:34:49 259  WHERE gattn IN('nup','up')
00:34:49 260  AND 1+m.ydate < '&1'||' '||'&2'
00:34:49 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2010-12-31'||' '||'00:15:00'

View created.

Elapsed: 00:00:00.12
00:34:49 SQL> 
00:34:49 SQL> -- rpt
00:34:49 SQL> 
00:34:49 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	    13175
up	     6363

Elapsed: 00:00:00.04
00:34:49 SQL> 
00:34:49 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
aud2010-12-30 00:10:00

Elapsed: 00:00:00.04
00:34:49 SQL> 
00:34:49 SQL> -- Now build model from bme and score sme
00:34:49 SQL> @score1gattn.sql
00:34:49 SQL> -- score1gattn.sql
00:34:49 SQL> 
00:34:49 SQL> -- Does the 1st SVM score
00:34:49 SQL> 
00:34:49 SQL> -- Fill up svmc_apply_prep
00:34:49 SQL> @score_gattn.sql
00:34:49 SQL> --
00:34:49 SQL> -- score_gattn.sql
00:34:49 SQL> --
00:34:49 SQL> 
00:34:49 SQL> -- usage: score_gattn.sql
00:34:49 SQL> 
00:34:49 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
00:34:49 SQL> 
00:34:49 SQL> DEFINE target	= 'gattn'
00:34:49 SQL> DEFINE model_name = 'forex14'
00:34:49 SQL> DEFINE bldtable	= 'bme'
00:34:49 SQL> DEFINE scoretable = 'sme'
00:34:49 SQL> DEFINE case_id	= 'prdate'
00:34:49 SQL> 
00:34:49 SQL> -- Define a variable to help me exclude some columns from some data mining calls
00:34:49 SQL> DEFINE exclude1 = "'&target','&case_id'"
00:34:49 SQL> 
00:34:49 SQL> -- Builds an SVM model using pl/sql.
00:34:49 SQL> 
00:34:49 SQL> -----------------------------------------------------------------------
00:34:49 SQL> --			    BUILD THE MODEL
00:34:49 SQL> -----------------------------------------------------------------------
00:34:49 SQL> 
00:34:49 SQL> -- Cleanup old build data preparation objects for repeat runs
00:34:49 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.00
00:34:49 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
00:34:49 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.01
00:34:49 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.00
00:34:49 SQL> 
00:34:49 SQL> 
00:34:49 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
00:34:49 SQL> --
00:34:49 SQL> -- DROP	TABLE svmc_settings ;
00:34:49 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
00:34:49 SQL> -- DELETE svmc_settings;
00:34:49 SQL> 
00:34:49 SQL> -- The default classification algorithm is Naive Bayes. So override
00:34:49 SQL> -- this choice to SVM using a settings table.
00:34:49 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
00:34:49 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
00:34:49 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
00:34:49 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
00:34:49 SQL> -- models.
00:34:49 SQL> --
00:34:49 SQL> 
00:34:49 SQL> -- Do this once and then comment it out.
00:34:49 SQL> -- That makes script go faster.
00:34:49 SQL> -- BEGIN
00:34:49 SQL> -- -- Populate settings table
00:34:49 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
00:34:49 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
00:34:49 SQL> --
00:34:49 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
00:34:49 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
00:34:49 SQL> --
00:34:49 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
00:34:49 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
00:34:49 SQL> --   COMMIT;
00:34:49 SQL> -- END;
00:34:49 SQL> -- /
00:34:49 SQL> 
00:34:49 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
00:34:49 SQL> 
00:34:49 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
00:34:49   2  EXCEPTION WHEN OTHERS THEN NULL; END;
00:34:49   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
00:34:49 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
00:34:49   2  EXCEPTION WHEN OTHERS THEN NULL; END;
00:34:49   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
00:34:49 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
00:34:49   2  EXCEPTION WHEN OTHERS THEN NULL; END;
00:34:49   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
00:34:49 SQL> 
00:34:49 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
00:34:49   2  EXCEPTION WHEN OTHERS THEN NULL; END;
00:34:49   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
00:34:49 SQL> 
00:34:49 SQL> --------------------------------
00:34:49 SQL> -- PREPARE BUILD (TRAINING) DATA
00:34:49 SQL> --
00:34:49 SQL> 
00:34:49 SQL> -- 1. Missing Value treatment for all Predictors and
00:34:49 SQL> -- 2. Outlier Treatment and
00:34:49 SQL> -- 3. Normalization are performed below.
00:34:49 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
00:34:49 SQL> --    normalized here.
00:34:49 SQL> 
00:34:49 SQL> BEGIN
00:34:49   2  	-- Perform missing value treatment for all predictors
00:34:49   3  	-- create miss tables
00:34:49   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
00:34:49   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
00:34:49   6  
00:34:49   7  	-- populate miss tables
00:34:49   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
00:34:49   9  	  miss_table_name => 'svmc_miss_num',
00:34:49  10  	  data_table_name => '&bldtable',
00:34:49  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
00:34:49  12  
00:34:49  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
00:34:49  14  	  miss_table_name => 'svmc_miss_cat',
00:34:49  15  	  data_table_name => '&bldtable',
00:34:49  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
00:34:49  17  
00:34:49  18  	-- xform input data to replace missing values
00:34:49  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
00:34:49  20  	  miss_table_name => 'svmc_miss_num',
00:34:49  21  	  data_table_name => '&bldtable',
00:34:49  22  	  xform_view_name => 'xformed_build_miss_num');
00:34:49  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
00:34:49  24  	  miss_table_name => 'svmc_miss_cat',
00:34:49  25  	  data_table_name => '&bldtable',
00:34:49  26  	  xform_view_name => 'xformed_build_miss_cat');
00:34:49  27  
00:34:49  28  	-- Perform outlier treatment.
00:34:49  29  	-- create clip table
00:34:49  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
00:34:49  31  
00:34:49  32  	-- populate clip table
00:34:49  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
00:34:49  34  	  clip_table_name => 'svmc_clip',
00:34:49  35  	  data_table_name => '&bldtable',
00:34:49  36  	  tail_frac	  => 0.025,
00:34:49  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
00:34:49  38  
00:34:49  39  	-- xform input data to winsorized data
00:34:49  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
00:34:49  41  	  clip_table_name => 'svmc_clip',
00:34:49  42  	  data_table_name => '&bldtable',
00:34:49  43  	  xform_view_name => 'svmc_winsor');
00:34:49  44  
00:34:49  45  	-- create normalization table
00:34:49  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
00:34:49  47  
00:34:49  48  	-- populate normalization table based on winsorized data
00:34:49  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
00:34:49  50  	  norm_table_name => 'svmc_norm',
00:34:49  51  	  data_table_name => 'svmc_winsor',
00:34:49  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
00:34:49  53  
00:34:49  54  	-- normalize the original data
00:34:49  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
00:34:49  56  	  norm_table_name => 'svmc_norm',
00:34:49  57  	  data_table_name => '&bldtable',
00:34:49  58  	  xform_view_name => 'svmc_build_prep');
00:34:49  59  END;
00:34:49  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:17.93
00:35:07 SQL> 
00:35:07 SQL> ---------------------
00:35:07 SQL> -- CREATE A NEW MODEL
00:35:07 SQL> --
00:35:07 SQL> -- Cleanup old model with the same name for repeat runs
00:35:07 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
00:35:07   2  EXCEPTION WHEN OTHERS THEN NULL; END;
00:35:07   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.11
00:35:08 SQL> 
00:35:08 SQL> -- Build a new SVM Model
00:35:08 SQL> BEGIN
00:35:08   2  	DBMS_DATA_MINING.CREATE_MODEL(
00:35:08   3  	  model_name	      => '&model_name',
00:35:08   4  	  mining_function     => dbms_data_mining.classification,
00:35:08   5  	  data_table_name     => 'svmc_build_prep',
00:35:08   6  	  case_id_column_name => '&case_id',
00:35:08   7  	  target_column_name  => '&target',
00:35:08   8  	  settings_table_name => 'svmc_settings');
00:35:08   9  END;
00:35:08  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:27.33
00:35:36 SQL> 
00:35:36 SQL> -----------------------------------------------------------------------
00:35:36 SQL> --			       APPLY/score THE MODEL
00:35:36 SQL> -----------------------------------------------------------------------
00:35:36 SQL> 
00:35:36 SQL> -- Cleanup old scoring data preparation objects for repeat runs
00:35:36 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
00:35:36   2  EXCEPTION WHEN OTHERS THEN NULL; END;
00:35:36   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
00:35:36 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
00:35:36   2  EXCEPTION WHEN OTHERS THEN NULL; END;
00:35:36   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
00:35:36 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
00:35:36   2  EXCEPTION WHEN OTHERS THEN NULL; END;
00:35:36   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
00:35:36 SQL> -----------------------
00:35:36 SQL> -- PREPARE SCORING DATA
00:35:36 SQL> --
00:35:36 SQL> -- If the data for model creation has been prepared, then the data
00:35:36 SQL> -- to be scored using the model must be prepared in the same manner
00:35:36 SQL> -- in order to obtain meaningful results.
00:35:36 SQL> --
00:35:36 SQL> -- 1. Missing Value treatment for all Predictors and
00:35:36 SQL> -- 2. Normalization
00:35:36 SQL> -- No outlier treatment will be performed during test and apply. The
00:35:36 SQL> -- normalization step is sufficient, since the normalization parameters
00:35:36 SQL> -- already capture the effects of outlier treatment done with build data.
00:35:36 SQL> --
00:35:36 SQL> BEGIN
00:35:36   2  	-- Xform Test data to replace missing values
00:35:36   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
00:35:36   4  	  miss_table_name => 'svmc_miss_num',
00:35:36   5  	  data_table_name => '&scoretable',
00:35:36   6  	  xform_view_name => 'xformed_apply_miss_num');
00:35:36   7  
00:35:36   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
00:35:36   9  	  miss_table_name => 'svmc_miss_cat',
00:35:36  10  	  data_table_name => '&scoretable',
00:35:36  11  	  xform_view_name => 'xformed_apply_miss_cat');
00:35:36  12  
00:35:36  13  	-- Normalize the data to be scored
00:35:36  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
00:35:36  15  	  norm_table_name => 'svmc_norm',
00:35:36  16  	  data_table_name => '&scoretable',
00:35:36  17  	  xform_view_name => 'svmc_apply_prep');
00:35:36  18  END;
00:35:36  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.20
00:35:37 SQL> 
00:35:37 SQL> -- Use same model_name used in score_gattn.sql
00:35:37 SQL> DEFINE model_name = 'forex14'
00:35:37 SQL> 
00:35:37 SQL> DELETE fxscores6_gattn WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.04
00:35:37 SQL> 
00:35:37 SQL> INSERT INTO fxscores6_gattn (prdate,score,rundate,pair,ydate)
00:35:37   2  SELECT
00:35:37   3  prdate
00:35:37   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
00:35:37   5  ,sysdate
00:35:37   6  ,SUBSTR(prdate,1,3)pair
00:35:37   7  ,SUBSTR(prdate,4,19)ydate
00:35:37   8  FROM svmc_apply_prep
00:35:37   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.17
00:35:37 SQL> @aud_score1day_gattn.sql	2010-12-31 00:20:00
00:35:37 SQL> --
00:35:37 SQL> -- aud_score1day_gattn.sql
00:35:37 SQL> --
00:35:37 SQL> 
00:35:37 SQL> CREATE OR REPLACE VIEW sme AS
00:35:37   2  SELECT
00:35:37   3  'aud'||m.ydate prdate
00:35:37   4  ,NULL gattn
00:35:37   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
00:35:37   6  ,eur_g00
00:35:37   7  ,eur_g01
00:35:37   8  ,eur_g02
00:35:37   9  ,eur_g03
00:35:37  10  ,eur_g04
00:35:37  11  ,eur_g05
00:35:37  12  ,eur_g06
00:35:37  13  ,eur_g07
00:35:37  14  ,eur_g08
00:35:37  15  ,eur_g09
00:35:37  16  ,eur_g10
00:35:37  17  ,eur_g11
00:35:37  18  ,eur_g12
00:35:37  19  ,eur_g13
00:35:37  20  ,eur_g14
00:35:37  21  ,eur_g15
00:35:37  22  ,eur_g16
00:35:37  23  ,eur_g17
00:35:37  24  ,eur_g18
00:35:37  25  ,eur_g19
00:35:37  26  ,eur_g20
00:35:37  27  ,eur_g21
00:35:37  28  ,eur_g22
00:35:37  29  ,eur_g23
00:35:37  30  ,eur_g24
00:35:37  31  ,eur_g25
00:35:37  32  ,eur_g26
00:35:37  33  ,eur_g27
00:35:37  34  ,eur_g28
00:35:37  35  ,eur_g29
00:35:37  36  ,eur_g30
00:35:37  37  ,eur_g31
00:35:37  38  ,eur_g32
00:35:37  39  ,eur_g33
00:35:37  40  ,eur_g34
00:35:37  41  ,eur_g35
00:35:37  42  ,eur_g36
00:35:37  43  ,eur_g37
00:35:37  44  ,eur_g38
00:35:37  45  ,eur_g39
00:35:37  46  ,eur_g40
00:35:37  47  ,eur_g41
00:35:37  48  ,aud_g00
00:35:37  49  ,aud_g01
00:35:37  50  ,aud_g02
00:35:37  51  ,aud_g03
00:35:37  52  ,aud_g04
00:35:37  53  ,aud_g05
00:35:37  54  ,aud_g06
00:35:37  55  ,aud_g07
00:35:37  56  ,aud_g08
00:35:37  57  ,aud_g09
00:35:37  58  ,aud_g10
00:35:37  59  ,aud_g11
00:35:37  60  ,aud_g12
00:35:37  61  ,aud_g13
00:35:37  62  ,aud_g14
00:35:37  63  ,aud_g15
00:35:37  64  ,aud_g16
00:35:37  65  ,aud_g17
00:35:37  66  ,aud_g18
00:35:37  67  ,aud_g19
00:35:37  68  ,aud_g20
00:35:37  69  ,aud_g21
00:35:37  70  ,aud_g22
00:35:37  71  ,aud_g23
00:35:37  72  ,aud_g24
00:35:37  73  ,aud_g25
00:35:37  74  ,aud_g26
00:35:37  75  ,aud_g27
00:35:37  76  ,aud_g28
00:35:37  77  ,aud_g29
00:35:37  78  ,aud_g30
00:35:37  79  ,aud_g31
00:35:37  80  ,aud_g32
00:35:37  81  ,aud_g33
00:35:37  82  ,aud_g34
00:35:37  83  ,aud_g35
00:35:37  84  ,aud_g36
00:35:37  85  ,aud_g37
00:35:37  86  ,aud_g38
00:35:37  87  ,aud_g39
00:35:37  88  ,aud_g40
00:35:37  89  ,aud_g41
00:35:37  90  ,gbp_g00
00:35:37  91  ,gbp_g01
00:35:37  92  ,gbp_g02
00:35:37  93  ,gbp_g03
00:35:37  94  ,gbp_g04
00:35:37  95  ,gbp_g05
00:35:37  96  ,gbp_g06
00:35:37  97  ,gbp_g07
00:35:37  98  ,gbp_g08
00:35:37  99  ,gbp_g09
00:35:37 100  ,gbp_g10
00:35:37 101  ,gbp_g11
00:35:37 102  ,gbp_g12
00:35:37 103  ,gbp_g13
00:35:37 104  ,gbp_g14
00:35:37 105  ,gbp_g15
00:35:37 106  ,gbp_g16
00:35:37 107  ,gbp_g17
00:35:37 108  ,gbp_g18
00:35:37 109  ,gbp_g19
00:35:37 110  ,gbp_g20
00:35:37 111  ,gbp_g21
00:35:37 112  ,gbp_g22
00:35:37 113  ,gbp_g23
00:35:37 114  ,gbp_g24
00:35:37 115  ,gbp_g25
00:35:37 116  ,gbp_g26
00:35:37 117  ,gbp_g27
00:35:37 118  ,gbp_g28
00:35:37 119  ,gbp_g29
00:35:37 120  ,gbp_g30
00:35:37 121  ,gbp_g31
00:35:37 122  ,gbp_g32
00:35:37 123  ,gbp_g33
00:35:37 124  ,gbp_g34
00:35:37 125  ,gbp_g35
00:35:37 126  ,gbp_g36
00:35:37 127  ,gbp_g37
00:35:37 128  ,gbp_g38
00:35:37 129  ,gbp_g39
00:35:37 130  ,gbp_g40
00:35:37 131  ,gbp_g41
00:35:37 132  ,jpy_g00
00:35:37 133  ,jpy_g01
00:35:37 134  ,jpy_g02
00:35:37 135  ,jpy_g03
00:35:37 136  ,jpy_g04
00:35:37 137  ,jpy_g05
00:35:37 138  ,jpy_g06
00:35:37 139  ,jpy_g07
00:35:37 140  ,jpy_g08
00:35:37 141  ,jpy_g09
00:35:37 142  ,jpy_g10
00:35:37 143  ,jpy_g11
00:35:37 144  ,jpy_g12
00:35:37 145  ,jpy_g13
00:35:37 146  ,jpy_g14
00:35:37 147  ,jpy_g15
00:35:37 148  ,jpy_g16
00:35:37 149  ,jpy_g17
00:35:37 150  ,jpy_g18
00:35:37 151  ,jpy_g19
00:35:37 152  ,jpy_g20
00:35:37 153  ,jpy_g21
00:35:37 154  ,jpy_g22
00:35:37 155  ,jpy_g23
00:35:37 156  ,jpy_g24
00:35:37 157  ,jpy_g25
00:35:37 158  ,jpy_g26
00:35:37 159  ,jpy_g27
00:35:37 160  ,jpy_g28
00:35:37 161  ,jpy_g29
00:35:37 162  ,jpy_g30
00:35:37 163  ,jpy_g31
00:35:37 164  ,jpy_g32
00:35:37 165  ,jpy_g33
00:35:37 166  ,jpy_g34
00:35:37 167  ,jpy_g35
00:35:37 168  ,jpy_g36
00:35:37 169  ,jpy_g37
00:35:37 170  ,jpy_g38
00:35:37 171  ,jpy_g39
00:35:37 172  ,jpy_g40
00:35:37 173  ,jpy_g41
00:35:37 174  ,cad_g00
00:35:37 175  ,cad_g01
00:35:37 176  ,cad_g02
00:35:37 177  ,cad_g03
00:35:37 178  ,cad_g04
00:35:37 179  ,cad_g05
00:35:37 180  ,cad_g06
00:35:37 181  ,cad_g07
00:35:37 182  ,cad_g08
00:35:37 183  ,cad_g09
00:35:37 184  ,cad_g10
00:35:37 185  ,cad_g11
00:35:37 186  ,cad_g12
00:35:37 187  ,cad_g13
00:35:37 188  ,cad_g14
00:35:37 189  ,cad_g15
00:35:37 190  ,cad_g16
00:35:37 191  ,cad_g17
00:35:37 192  ,cad_g18
00:35:37 193  ,cad_g19
00:35:37 194  ,cad_g20
00:35:37 195  ,cad_g21
00:35:37 196  ,cad_g22
00:35:37 197  ,cad_g23
00:35:37 198  ,cad_g24
00:35:37 199  ,cad_g25
00:35:37 200  ,cad_g26
00:35:37 201  ,cad_g27
00:35:37 202  ,cad_g28
00:35:37 203  ,cad_g29
00:35:37 204  ,cad_g30
00:35:37 205  ,cad_g31
00:35:37 206  ,cad_g32
00:35:37 207  ,cad_g33
00:35:37 208  ,cad_g34
00:35:37 209  ,cad_g35
00:35:37 210  ,cad_g36
00:35:37 211  ,cad_g37
00:35:37 212  ,cad_g38
00:35:37 213  ,cad_g39
00:35:37 214  ,cad_g40
00:35:37 215  ,cad_g41
00:35:37 216  ,chf_g00
00:35:37 217  ,chf_g01
00:35:37 218  ,chf_g02
00:35:37 219  ,chf_g03
00:35:37 220  ,chf_g04
00:35:37 221  ,chf_g05
00:35:37 222  ,chf_g06
00:35:37 223  ,chf_g07
00:35:37 224  ,chf_g08
00:35:37 225  ,chf_g09
00:35:37 226  ,chf_g10
00:35:37 227  ,chf_g11
00:35:37 228  ,chf_g12
00:35:37 229  ,chf_g13
00:35:37 230  ,chf_g14
00:35:37 231  ,chf_g15
00:35:37 232  ,chf_g16
00:35:37 233  ,chf_g17
00:35:37 234  ,chf_g18
00:35:37 235  ,chf_g19
00:35:37 236  ,chf_g20
00:35:37 237  ,chf_g21
00:35:37 238  ,chf_g22
00:35:37 239  ,chf_g23
00:35:37 240  ,chf_g24
00:35:37 241  ,chf_g25
00:35:37 242  ,chf_g26
00:35:37 243  ,chf_g27
00:35:37 244  ,chf_g28
00:35:37 245  ,chf_g29
00:35:37 246  ,chf_g30
00:35:37 247  ,chf_g31
00:35:37 248  ,chf_g32
00:35:37 249  ,chf_g33
00:35:37 250  ,chf_g34
00:35:37 251  ,chf_g35
00:35:37 252  ,chf_g36
00:35:37 253  ,chf_g37
00:35:37 254  ,chf_g38
00:35:37 255  ,chf_g39
00:35:37 256  ,chf_g40
00:35:37 257  ,chf_g41
00:35:37 258  FROM aud_ms6 m
00:35:37 259  WHERE m.ydate = '&1'||' '||'&2'
00:35:37 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2010-12-31'||' '||'00:20:00'

View created.

Elapsed: 00:00:00.14
00:35:37 SQL> 
00:35:37 SQL> -- rpt
00:35:37 SQL> -- We should see just 1 row:
00:35:37 SQL> 
00:35:37 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
00:35:37 SQL> 
00:35:37 SQL> -- Build the model:
00:35:37 SQL> CREATE OR REPLACE VIEW bme AS
00:35:37   2  SELECT
00:35:37   3  'aud'||m.ydate prdate
00:35:37   4  ,gattn
00:35:37   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
00:35:37   6  ,eur_g00
00:35:37   7  ,eur_g01
00:35:37   8  ,eur_g02
00:35:37   9  ,eur_g03
00:35:37  10  ,eur_g04
00:35:37  11  ,eur_g05
00:35:37  12  ,eur_g06
00:35:37  13  ,eur_g07
00:35:37  14  ,eur_g08
00:35:37  15  ,eur_g09
00:35:37  16  ,eur_g10
00:35:37  17  ,eur_g11
00:35:37  18  ,eur_g12
00:35:37  19  ,eur_g13
00:35:37  20  ,eur_g14
00:35:37  21  ,eur_g15
00:35:37  22  ,eur_g16
00:35:37  23  ,eur_g17
00:35:37  24  ,eur_g18
00:35:37  25  ,eur_g19
00:35:37  26  ,eur_g20
00:35:37  27  ,eur_g21
00:35:37  28  ,eur_g22
00:35:37  29  ,eur_g23
00:35:37  30  ,eur_g24
00:35:37  31  ,eur_g25
00:35:37  32  ,eur_g26
00:35:37  33  ,eur_g27
00:35:37  34  ,eur_g28
00:35:37  35  ,eur_g29
00:35:37  36  ,eur_g30
00:35:37  37  ,eur_g31
00:35:37  38  ,eur_g32
00:35:37  39  ,eur_g33
00:35:37  40  ,eur_g34
00:35:37  41  ,eur_g35
00:35:37  42  ,eur_g36
00:35:37  43  ,eur_g37
00:35:37  44  ,eur_g38
00:35:37  45  ,eur_g39
00:35:37  46  ,eur_g40
00:35:37  47  ,eur_g41
00:35:37  48  ,aud_g00
00:35:37  49  ,aud_g01
00:35:37  50  ,aud_g02
00:35:37  51  ,aud_g03
00:35:37  52  ,aud_g04
00:35:37  53  ,aud_g05
00:35:37  54  ,aud_g06
00:35:37  55  ,aud_g07
00:35:37  56  ,aud_g08
00:35:37  57  ,aud_g09
00:35:37  58  ,aud_g10
00:35:37  59  ,aud_g11
00:35:37  60  ,aud_g12
00:35:37  61  ,aud_g13
00:35:37  62  ,aud_g14
00:35:37  63  ,aud_g15
00:35:37  64  ,aud_g16
00:35:37  65  ,aud_g17
00:35:37  66  ,aud_g18
00:35:37  67  ,aud_g19
00:35:37  68  ,aud_g20
00:35:37  69  ,aud_g21
00:35:37  70  ,aud_g22
00:35:37  71  ,aud_g23
00:35:37  72  ,aud_g24
00:35:37  73  ,aud_g25
00:35:37  74  ,aud_g26
00:35:37  75  ,aud_g27
00:35:37  76  ,aud_g28
00:35:37  77  ,aud_g29
00:35:37  78  ,aud_g30
00:35:37  79  ,aud_g31
00:35:37  80  ,aud_g32
00:35:37  81  ,aud_g33
00:35:37  82  ,aud_g34
00:35:37  83  ,aud_g35
00:35:37  84  ,aud_g36
00:35:37  85  ,aud_g37
00:35:37  86  ,aud_g38
00:35:37  87  ,aud_g39
00:35:37  88  ,aud_g40
00:35:37  89  ,aud_g41
00:35:37  90  ,gbp_g00
00:35:37  91  ,gbp_g01
00:35:37  92  ,gbp_g02
00:35:37  93  ,gbp_g03
00:35:37  94  ,gbp_g04
00:35:37  95  ,gbp_g05
00:35:37  96  ,gbp_g06
00:35:37  97  ,gbp_g07
00:35:37  98  ,gbp_g08
00:35:37  99  ,gbp_g09
00:35:37 100  ,gbp_g10
00:35:37 101  ,gbp_g11
00:35:37 102  ,gbp_g12
00:35:37 103  ,gbp_g13
00:35:37 104  ,gbp_g14
00:35:37 105  ,gbp_g15
00:35:37 106  ,gbp_g16
00:35:37 107  ,gbp_g17
00:35:37 108  ,gbp_g18
00:35:37 109  ,gbp_g19
00:35:37 110  ,gbp_g20
00:35:37 111  ,gbp_g21
00:35:37 112  ,gbp_g22
00:35:37 113  ,gbp_g23
00:35:37 114  ,gbp_g24
00:35:37 115  ,gbp_g25
00:35:37 116  ,gbp_g26
00:35:37 117  ,gbp_g27
00:35:37 118  ,gbp_g28
00:35:37 119  ,gbp_g29
00:35:37 120  ,gbp_g30
00:35:37 121  ,gbp_g31
00:35:37 122  ,gbp_g32
00:35:37 123  ,gbp_g33
00:35:37 124  ,gbp_g34
00:35:37 125  ,gbp_g35
00:35:37 126  ,gbp_g36
00:35:37 127  ,gbp_g37
00:35:37 128  ,gbp_g38
00:35:37 129  ,gbp_g39
00:35:37 130  ,gbp_g40
00:35:37 131  ,gbp_g41
00:35:37 132  ,jpy_g00
00:35:37 133  ,jpy_g01
00:35:37 134  ,jpy_g02
00:35:37 135  ,jpy_g03
00:35:37 136  ,jpy_g04
00:35:37 137  ,jpy_g05
00:35:37 138  ,jpy_g06
00:35:37 139  ,jpy_g07
00:35:37 140  ,jpy_g08
00:35:37 141  ,jpy_g09
00:35:37 142  ,jpy_g10
00:35:37 143  ,jpy_g11
00:35:37 144  ,jpy_g12
00:35:37 145  ,jpy_g13
00:35:37 146  ,jpy_g14
00:35:37 147  ,jpy_g15
00:35:37 148  ,jpy_g16
00:35:37 149  ,jpy_g17
00:35:37 150  ,jpy_g18
00:35:37 151  ,jpy_g19
00:35:37 152  ,jpy_g20
00:35:37 153  ,jpy_g21
00:35:37 154  ,jpy_g22
00:35:37 155  ,jpy_g23
00:35:37 156  ,jpy_g24
00:35:37 157  ,jpy_g25
00:35:37 158  ,jpy_g26
00:35:37 159  ,jpy_g27
00:35:37 160  ,jpy_g28
00:35:37 161  ,jpy_g29
00:35:37 162  ,jpy_g30
00:35:37 163  ,jpy_g31
00:35:37 164  ,jpy_g32
00:35:37 165  ,jpy_g33
00:35:37 166  ,jpy_g34
00:35:37 167  ,jpy_g35
00:35:37 168  ,jpy_g36
00:35:37 169  ,jpy_g37
00:35:37 170  ,jpy_g38
00:35:37 171  ,jpy_g39
00:35:37 172  ,jpy_g40
00:35:37 173  ,jpy_g41
00:35:37 174  ,cad_g00
00:35:37 175  ,cad_g01
00:35:37 176  ,cad_g02
00:35:37 177  ,cad_g03
00:35:37 178  ,cad_g04
00:35:37 179  ,cad_g05
00:35:37 180  ,cad_g06
00:35:37 181  ,cad_g07
00:35:37 182  ,cad_g08
00:35:37 183  ,cad_g09
00:35:37 184  ,cad_g10
00:35:37 185  ,cad_g11
00:35:37 186  ,cad_g12
00:35:37 187  ,cad_g13
00:35:37 188  ,cad_g14
00:35:37 189  ,cad_g15
00:35:37 190  ,cad_g16
00:35:37 191  ,cad_g17
00:35:37 192  ,cad_g18
00:35:37 193  ,cad_g19
00:35:37 194  ,cad_g20
00:35:37 195  ,cad_g21
00:35:37 196  ,cad_g22
00:35:37 197  ,cad_g23
00:35:37 198  ,cad_g24
00:35:37 199  ,cad_g25
00:35:37 200  ,cad_g26
00:35:37 201  ,cad_g27
00:35:37 202  ,cad_g28
00:35:37 203  ,cad_g29
00:35:37 204  ,cad_g30
00:35:37 205  ,cad_g31
00:35:37 206  ,cad_g32
00:35:37 207  ,cad_g33
00:35:37 208  ,cad_g34
00:35:37 209  ,cad_g35
00:35:37 210  ,cad_g36
00:35:37 211  ,cad_g37
00:35:37 212  ,cad_g38
00:35:37 213  ,cad_g39
00:35:37 214  ,cad_g40
00:35:37 215  ,cad_g41
00:35:37 216  ,chf_g00
00:35:37 217  ,chf_g01
00:35:37 218  ,chf_g02
00:35:37 219  ,chf_g03
00:35:37 220  ,chf_g04
00:35:37 221  ,chf_g05
00:35:37 222  ,chf_g06
00:35:37 223  ,chf_g07
00:35:37 224  ,chf_g08
00:35:37 225  ,chf_g09
00:35:37 226  ,chf_g10
00:35:37 227  ,chf_g11
00:35:37 228  ,chf_g12
00:35:37 229  ,chf_g13
00:35:37 230  ,chf_g14
00:35:37 231  ,chf_g15
00:35:37 232  ,chf_g16
00:35:37 233  ,chf_g17
00:35:37 234  ,chf_g18
00:35:37 235  ,chf_g19
00:35:37 236  ,chf_g20
00:35:37 237  ,chf_g21
00:35:37 238  ,chf_g22
00:35:37 239  ,chf_g23
00:35:37 240  ,chf_g24
00:35:37 241  ,chf_g25
00:35:37 242  ,chf_g26
00:35:37 243  ,chf_g27
00:35:37 244  ,chf_g28
00:35:37 245  ,chf_g29
00:35:37 246  ,chf_g30
00:35:37 247  ,chf_g31
00:35:37 248  ,chf_g32
00:35:37 249  ,chf_g33
00:35:37 250  ,chf_g34
00:35:37 251  ,chf_g35
00:35:37 252  ,chf_g36
00:35:37 253  ,chf_g37
00:35:37 254  ,chf_g38
00:35:37 255  ,chf_g39
00:35:37 256  ,chf_g40
00:35:37 257  ,chf_g41
00:35:37 258  FROM aud_ms6 m
00:35:37 259  WHERE gattn IN('nup','up')
00:35:37 260  AND 1+m.ydate < '&1'||' '||'&2'
00:35:37 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2010-12-31'||' '||'00:20:00'

View created.

Elapsed: 00:00:00.12
00:35:38 SQL> 
00:35:38 SQL> -- rpt
00:35:38 SQL> 
00:35:38 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	    13176
up	     6363

Elapsed: 00:00:00.04
00:35:38 SQL> 
00:35:38 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
aud2010-12-30 00:15:00

Elapsed: 00:00:00.03
00:35:38 SQL> 
00:35:38 SQL> -- Now build model from bme and score sme
00:35:38 SQL> @score1gattn.sql
00:35:38 SQL> -- score1gattn.sql
00:35:38 SQL> 
00:35:38 SQL> -- Does the 1st SVM score
00:35:38 SQL> 
00:35:38 SQL> -- Fill up svmc_apply_prep
00:35:38 SQL> @score_gattn.sql
00:35:38 SQL> --
00:35:38 SQL> -- score_gattn.sql
00:35:38 SQL> --
00:35:38 SQL> 
00:35:38 SQL> -- usage: score_gattn.sql
00:35:38 SQL> 
00:35:38 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
00:35:38 SQL> 
00:35:38 SQL> DEFINE target	= 'gattn'
00:35:38 SQL> DEFINE model_name = 'forex14'
00:35:38 SQL> DEFINE bldtable	= 'bme'
00:35:38 SQL> DEFINE scoretable = 'sme'
00:35:38 SQL> DEFINE case_id	= 'prdate'
00:35:38 SQL> 
00:35:38 SQL> -- Define a variable to help me exclude some columns from some data mining calls
00:35:38 SQL> DEFINE exclude1 = "'&target','&case_id'"
00:35:38 SQL> 
00:35:38 SQL> -- Builds an SVM model using pl/sql.
00:35:38 SQL> 
00:35:38 SQL> -----------------------------------------------------------------------
00:35:38 SQL> --			    BUILD THE MODEL
00:35:38 SQL> -----------------------------------------------------------------------
00:35:38 SQL> 
00:35:38 SQL> -- Cleanup old build data preparation objects for repeat runs
00:35:38 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.01
00:35:38 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
00:35:38 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.01
00:35:38 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.01
00:35:38 SQL> 
00:35:38 SQL> 
00:35:38 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
00:35:38 SQL> --
00:35:38 SQL> -- DROP	TABLE svmc_settings ;
00:35:38 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
00:35:38 SQL> -- DELETE svmc_settings;
00:35:38 SQL> 
00:35:38 SQL> -- The default classification algorithm is Naive Bayes. So override
00:35:38 SQL> -- this choice to SVM using a settings table.
00:35:38 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
00:35:38 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
00:35:38 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
00:35:38 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
00:35:38 SQL> -- models.
00:35:38 SQL> --
00:35:38 SQL> 
00:35:38 SQL> -- Do this once and then comment it out.
00:35:38 SQL> -- That makes script go faster.
00:35:38 SQL> -- BEGIN
00:35:38 SQL> -- -- Populate settings table
00:35:38 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
00:35:38 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
00:35:38 SQL> --
00:35:38 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
00:35:38 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
00:35:38 SQL> --
00:35:38 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
00:35:38 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
00:35:38 SQL> --   COMMIT;
00:35:38 SQL> -- END;
00:35:38 SQL> -- /
00:35:38 SQL> 
00:35:38 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
00:35:38 SQL> 
00:35:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
00:35:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
00:35:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
00:35:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
00:35:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
00:35:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
00:35:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
00:35:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
00:35:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
00:35:38 SQL> 
00:35:38 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
00:35:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
00:35:38   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
00:35:38 SQL> 
00:35:38 SQL> --------------------------------
00:35:38 SQL> -- PREPARE BUILD (TRAINING) DATA
00:35:38 SQL> --
00:35:38 SQL> 
00:35:38 SQL> -- 1. Missing Value treatment for all Predictors and
00:35:38 SQL> -- 2. Outlier Treatment and
00:35:38 SQL> -- 3. Normalization are performed below.
00:35:38 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
00:35:38 SQL> --    normalized here.
00:35:38 SQL> 
00:35:38 SQL> BEGIN
00:35:38   2  	-- Perform missing value treatment for all predictors
00:35:38   3  	-- create miss tables
00:35:38   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
00:35:38   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
00:35:38   6  
00:35:38   7  	-- populate miss tables
00:35:38   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
00:35:38   9  	  miss_table_name => 'svmc_miss_num',
00:35:38  10  	  data_table_name => '&bldtable',
00:35:38  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
00:35:38  12  
00:35:38  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
00:35:38  14  	  miss_table_name => 'svmc_miss_cat',
00:35:38  15  	  data_table_name => '&bldtable',
00:35:38  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
00:35:38  17  
00:35:38  18  	-- xform input data to replace missing values
00:35:38  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
00:35:38  20  	  miss_table_name => 'svmc_miss_num',
00:35:38  21  	  data_table_name => '&bldtable',
00:35:38  22  	  xform_view_name => 'xformed_build_miss_num');
00:35:38  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
00:35:38  24  	  miss_table_name => 'svmc_miss_cat',
00:35:38  25  	  data_table_name => '&bldtable',
00:35:38  26  	  xform_view_name => 'xformed_build_miss_cat');
00:35:38  27  
00:35:38  28  	-- Perform outlier treatment.
00:35:38  29  	-- create clip table
00:35:38  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
00:35:38  31  
00:35:38  32  	-- populate clip table
00:35:38  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
00:35:38  34  	  clip_table_name => 'svmc_clip',
00:35:38  35  	  data_table_name => '&bldtable',
00:35:38  36  	  tail_frac	  => 0.025,
00:35:38  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
00:35:38  38  
00:35:38  39  	-- xform input data to winsorized data
00:35:38  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
00:35:38  41  	  clip_table_name => 'svmc_clip',
00:35:38  42  	  data_table_name => '&bldtable',
00:35:38  43  	  xform_view_name => 'svmc_winsor');
00:35:38  44  
00:35:38  45  	-- create normalization table
00:35:38  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
00:35:38  47  
00:35:38  48  	-- populate normalization table based on winsorized data
00:35:38  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
00:35:38  50  	  norm_table_name => 'svmc_norm',
00:35:38  51  	  data_table_name => 'svmc_winsor',
00:35:38  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
00:35:38  53  
00:35:38  54  	-- normalize the original data
00:35:38  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
00:35:38  56  	  norm_table_name => 'svmc_norm',
00:35:38  57  	  data_table_name => '&bldtable',
00:35:38  58  	  xform_view_name => 'svmc_build_prep');
00:35:38  59  END;
00:35:38  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:18.02
00:35:56 SQL> 
00:35:56 SQL> ---------------------
00:35:56 SQL> -- CREATE A NEW MODEL
00:35:56 SQL> --
00:35:56 SQL> -- Cleanup old model with the same name for repeat runs
00:35:56 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
00:35:56   2  EXCEPTION WHEN OTHERS THEN NULL; END;
00:35:56   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.92
00:35:57 SQL> 
00:35:57 SQL> -- Build a new SVM Model
00:35:57 SQL> BEGIN
00:35:57   2  	DBMS_DATA_MINING.CREATE_MODEL(
00:35:57   3  	  model_name	      => '&model_name',
00:35:57   4  	  mining_function     => dbms_data_mining.classification,
00:35:57   5  	  data_table_name     => 'svmc_build_prep',
00:35:57   6  	  case_id_column_name => '&case_id',
00:35:57   7  	  target_column_name  => '&target',
00:35:57   8  	  settings_table_name => 'svmc_settings');
00:35:57   9  END;
00:35:57  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:27.29
00:36:24 SQL> 
00:36:24 SQL> -----------------------------------------------------------------------
00:36:24 SQL> --			       APPLY/score THE MODEL
00:36:24 SQL> -----------------------------------------------------------------------
00:36:24 SQL> 
00:36:24 SQL> -- Cleanup old scoring data preparation objects for repeat runs
00:36:24 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
00:36:24   2  EXCEPTION WHEN OTHERS THEN NULL; END;
00:36:24   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
00:36:24 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
00:36:24   2  EXCEPTION WHEN OTHERS THEN NULL; END;
00:36:24   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
00:36:24 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
00:36:24   2  EXCEPTION WHEN OTHERS THEN NULL; END;
00:36:24   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
00:36:24 SQL> -----------------------
00:36:24 SQL> -- PREPARE SCORING DATA
00:36:24 SQL> --
00:36:24 SQL> -- If the data for model creation has been prepared, then the data
00:36:24 SQL> -- to be scored using the model must be prepared in the same manner
00:36:24 SQL> -- in order to obtain meaningful results.
00:36:24 SQL> --
00:36:24 SQL> -- 1. Missing Value treatment for all Predictors and
00:36:24 SQL> -- 2. Normalization
00:36:24 SQL> -- No outlier treatment will be performed during test and apply. The
00:36:24 SQL> -- normalization step is sufficient, since the normalization parameters
00:36:24 SQL> -- already capture the effects of outlier treatment done with build data.
00:36:24 SQL> --
00:36:24 SQL> BEGIN
00:36:24   2  	-- Xform Test data to replace missing values
00:36:24   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
00:36:24   4  	  miss_table_name => 'svmc_miss_num',
00:36:24   5  	  data_table_name => '&scoretable',
00:36:24   6  	  xform_view_name => 'xformed_apply_miss_num');
00:36:24   7  
00:36:24   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
00:36:24   9  	  miss_table_name => 'svmc_miss_cat',
00:36:24  10  	  data_table_name => '&scoretable',
00:36:24  11  	  xform_view_name => 'xformed_apply_miss_cat');
00:36:24  12  
00:36:24  13  	-- Normalize the data to be scored
00:36:24  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
00:36:24  15  	  norm_table_name => 'svmc_norm',
00:36:24  16  	  data_table_name => '&scoretable',
00:36:24  17  	  xform_view_name => 'svmc_apply_prep');
00:36:24  18  END;
00:36:24  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.23
00:36:26 SQL> 
00:36:26 SQL> -- Use same model_name used in score_gattn.sql
00:36:26 SQL> DEFINE model_name = 'forex14'
00:36:26 SQL> 
00:36:26 SQL> DELETE fxscores6_gattn WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.04
00:36:26 SQL> 
00:36:26 SQL> INSERT INTO fxscores6_gattn (prdate,score,rundate,pair,ydate)
00:36:26   2  SELECT
00:36:26   3  prdate
00:36:26   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
00:36:26   5  ,sysdate
00:36:26   6  ,SUBSTR(prdate,1,3)pair
00:36:26   7  ,SUBSTR(prdate,4,19)ydate
00:36:26   8  FROM svmc_apply_prep
00:36:26   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.17
00:36:26 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
