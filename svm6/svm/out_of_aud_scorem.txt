
SQL*Plus: Release 11.2.0.1.0 Production on Wed Jan 5 01:42:29 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

01:42:29 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
01:42:29 SQL> 01:42:29 SQL> @aud_score1day.sql  2011-01-05 01:20:00
01:42:29 SQL> --
01:42:29 SQL> -- aud_score1day.sql
01:42:29 SQL> --
01:42:29 SQL> 
01:42:29 SQL> CREATE OR REPLACE VIEW sme AS
01:42:29   2  SELECT
01:42:29   3  'aud'||m.ydate prdate
01:42:29   4  ,NULL gatt
01:42:29   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
01:42:29   6  ,eur_g00
01:42:29   7  ,eur_g01
01:42:29   8  ,eur_g02
01:42:29   9  ,eur_g03
01:42:29  10  ,eur_g04
01:42:29  11  ,eur_g05
01:42:29  12  ,eur_g06
01:42:29  13  ,eur_g07
01:42:29  14  ,eur_g08
01:42:29  15  ,eur_g09
01:42:29  16  ,eur_g10
01:42:29  17  ,eur_g11
01:42:29  18  ,eur_g12
01:42:29  19  ,eur_g13
01:42:29  20  ,eur_g14
01:42:29  21  ,eur_g15
01:42:29  22  ,eur_g16
01:42:29  23  ,eur_g17
01:42:29  24  ,eur_g18
01:42:29  25  ,eur_g19
01:42:29  26  ,eur_g20
01:42:29  27  ,eur_g21
01:42:29  28  ,eur_g22
01:42:29  29  ,eur_g23
01:42:29  30  ,eur_g24
01:42:29  31  ,eur_g25
01:42:29  32  ,eur_g26
01:42:29  33  ,eur_g27
01:42:29  34  ,eur_g28
01:42:29  35  ,eur_g29
01:42:29  36  ,eur_g30
01:42:29  37  ,eur_g31
01:42:29  38  ,eur_g32
01:42:29  39  ,eur_g33
01:42:29  40  ,eur_g34
01:42:29  41  ,eur_g35
01:42:29  42  ,eur_g36
01:42:29  43  ,eur_g37
01:42:29  44  ,eur_g38
01:42:29  45  ,eur_g39
01:42:29  46  ,eur_g40
01:42:29  47  ,eur_g41
01:42:29  48  ,aud_g00
01:42:29  49  ,aud_g01
01:42:29  50  ,aud_g02
01:42:29  51  ,aud_g03
01:42:29  52  ,aud_g04
01:42:29  53  ,aud_g05
01:42:29  54  ,aud_g06
01:42:29  55  ,aud_g07
01:42:29  56  ,aud_g08
01:42:29  57  ,aud_g09
01:42:29  58  ,aud_g10
01:42:29  59  ,aud_g11
01:42:29  60  ,aud_g12
01:42:29  61  ,aud_g13
01:42:29  62  ,aud_g14
01:42:29  63  ,aud_g15
01:42:29  64  ,aud_g16
01:42:29  65  ,aud_g17
01:42:29  66  ,aud_g18
01:42:29  67  ,aud_g19
01:42:29  68  ,aud_g20
01:42:29  69  ,aud_g21
01:42:29  70  ,aud_g22
01:42:29  71  ,aud_g23
01:42:29  72  ,aud_g24
01:42:29  73  ,aud_g25
01:42:29  74  ,aud_g26
01:42:29  75  ,aud_g27
01:42:29  76  ,aud_g28
01:42:29  77  ,aud_g29
01:42:29  78  ,aud_g30
01:42:29  79  ,aud_g31
01:42:29  80  ,aud_g32
01:42:29  81  ,aud_g33
01:42:29  82  ,aud_g34
01:42:29  83  ,aud_g35
01:42:29  84  ,aud_g36
01:42:29  85  ,aud_g37
01:42:29  86  ,aud_g38
01:42:29  87  ,aud_g39
01:42:29  88  ,aud_g40
01:42:29  89  ,aud_g41
01:42:29  90  ,gbp_g00
01:42:29  91  ,gbp_g01
01:42:29  92  ,gbp_g02
01:42:29  93  ,gbp_g03
01:42:29  94  ,gbp_g04
01:42:29  95  ,gbp_g05
01:42:29  96  ,gbp_g06
01:42:29  97  ,gbp_g07
01:42:29  98  ,gbp_g08
01:42:29  99  ,gbp_g09
01:42:29 100  ,gbp_g10
01:42:29 101  ,gbp_g11
01:42:29 102  ,gbp_g12
01:42:29 103  ,gbp_g13
01:42:29 104  ,gbp_g14
01:42:29 105  ,gbp_g15
01:42:29 106  ,gbp_g16
01:42:29 107  ,gbp_g17
01:42:29 108  ,gbp_g18
01:42:29 109  ,gbp_g19
01:42:29 110  ,gbp_g20
01:42:29 111  ,gbp_g21
01:42:29 112  ,gbp_g22
01:42:29 113  ,gbp_g23
01:42:29 114  ,gbp_g24
01:42:29 115  ,gbp_g25
01:42:29 116  ,gbp_g26
01:42:29 117  ,gbp_g27
01:42:29 118  ,gbp_g28
01:42:29 119  ,gbp_g29
01:42:29 120  ,gbp_g30
01:42:29 121  ,gbp_g31
01:42:29 122  ,gbp_g32
01:42:29 123  ,gbp_g33
01:42:29 124  ,gbp_g34
01:42:29 125  ,gbp_g35
01:42:29 126  ,gbp_g36
01:42:29 127  ,gbp_g37
01:42:29 128  ,gbp_g38
01:42:29 129  ,gbp_g39
01:42:29 130  ,gbp_g40
01:42:29 131  ,gbp_g41
01:42:29 132  ,jpy_g00
01:42:29 133  ,jpy_g01
01:42:29 134  ,jpy_g02
01:42:29 135  ,jpy_g03
01:42:29 136  ,jpy_g04
01:42:29 137  ,jpy_g05
01:42:29 138  ,jpy_g06
01:42:29 139  ,jpy_g07
01:42:29 140  ,jpy_g08
01:42:29 141  ,jpy_g09
01:42:29 142  ,jpy_g10
01:42:29 143  ,jpy_g11
01:42:29 144  ,jpy_g12
01:42:29 145  ,jpy_g13
01:42:29 146  ,jpy_g14
01:42:29 147  ,jpy_g15
01:42:29 148  ,jpy_g16
01:42:29 149  ,jpy_g17
01:42:29 150  ,jpy_g18
01:42:29 151  ,jpy_g19
01:42:29 152  ,jpy_g20
01:42:29 153  ,jpy_g21
01:42:29 154  ,jpy_g22
01:42:29 155  ,jpy_g23
01:42:29 156  ,jpy_g24
01:42:29 157  ,jpy_g25
01:42:29 158  ,jpy_g26
01:42:29 159  ,jpy_g27
01:42:29 160  ,jpy_g28
01:42:29 161  ,jpy_g29
01:42:29 162  ,jpy_g30
01:42:29 163  ,jpy_g31
01:42:29 164  ,jpy_g32
01:42:29 165  ,jpy_g33
01:42:29 166  ,jpy_g34
01:42:29 167  ,jpy_g35
01:42:29 168  ,jpy_g36
01:42:29 169  ,jpy_g37
01:42:29 170  ,jpy_g38
01:42:29 171  ,jpy_g39
01:42:29 172  ,jpy_g40
01:42:29 173  ,jpy_g41
01:42:29 174  ,cad_g00
01:42:29 175  ,cad_g01
01:42:29 176  ,cad_g02
01:42:29 177  ,cad_g03
01:42:29 178  ,cad_g04
01:42:29 179  ,cad_g05
01:42:29 180  ,cad_g06
01:42:29 181  ,cad_g07
01:42:29 182  ,cad_g08
01:42:29 183  ,cad_g09
01:42:29 184  ,cad_g10
01:42:29 185  ,cad_g11
01:42:29 186  ,cad_g12
01:42:29 187  ,cad_g13
01:42:29 188  ,cad_g14
01:42:29 189  ,cad_g15
01:42:29 190  ,cad_g16
01:42:29 191  ,cad_g17
01:42:29 192  ,cad_g18
01:42:29 193  ,cad_g19
01:42:29 194  ,cad_g20
01:42:29 195  ,cad_g21
01:42:29 196  ,cad_g22
01:42:29 197  ,cad_g23
01:42:29 198  ,cad_g24
01:42:29 199  ,cad_g25
01:42:29 200  ,cad_g26
01:42:29 201  ,cad_g27
01:42:29 202  ,cad_g28
01:42:29 203  ,cad_g29
01:42:29 204  ,cad_g30
01:42:29 205  ,cad_g31
01:42:29 206  ,cad_g32
01:42:29 207  ,cad_g33
01:42:29 208  ,cad_g34
01:42:29 209  ,cad_g35
01:42:29 210  ,cad_g36
01:42:29 211  ,cad_g37
01:42:29 212  ,cad_g38
01:42:29 213  ,cad_g39
01:42:29 214  ,cad_g40
01:42:29 215  ,cad_g41
01:42:29 216  ,chf_g00
01:42:29 217  ,chf_g01
01:42:29 218  ,chf_g02
01:42:29 219  ,chf_g03
01:42:29 220  ,chf_g04
01:42:29 221  ,chf_g05
01:42:29 222  ,chf_g06
01:42:29 223  ,chf_g07
01:42:29 224  ,chf_g08
01:42:29 225  ,chf_g09
01:42:29 226  ,chf_g10
01:42:29 227  ,chf_g11
01:42:29 228  ,chf_g12
01:42:29 229  ,chf_g13
01:42:29 230  ,chf_g14
01:42:29 231  ,chf_g15
01:42:29 232  ,chf_g16
01:42:29 233  ,chf_g17
01:42:29 234  ,chf_g18
01:42:29 235  ,chf_g19
01:42:29 236  ,chf_g20
01:42:29 237  ,chf_g21
01:42:29 238  ,chf_g22
01:42:29 239  ,chf_g23
01:42:29 240  ,chf_g24
01:42:29 241  ,chf_g25
01:42:29 242  ,chf_g26
01:42:29 243  ,chf_g27
01:42:29 244  ,chf_g28
01:42:29 245  ,chf_g29
01:42:29 246  ,chf_g30
01:42:29 247  ,chf_g31
01:42:29 248  ,chf_g32
01:42:29 249  ,chf_g33
01:42:29 250  ,chf_g34
01:42:29 251  ,chf_g35
01:42:29 252  ,chf_g36
01:42:29 253  ,chf_g37
01:42:29 254  ,chf_g38
01:42:29 255  ,chf_g39
01:42:29 256  ,chf_g40
01:42:29 257  ,chf_g41
01:42:29 258  FROM aud_ms6 m
01:42:29 259  WHERE m.ydate = '&1'||' '||'&2'
01:42:29 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2011-01-05'||' '||'01:20:00'

View created.

Elapsed: 00:00:00.13
01:42:29 SQL> 
01:42:29 SQL> -- rpt
01:42:29 SQL> -- We should see just 1 row:
01:42:29 SQL> 
01:42:29 SQL> SELECT COUNT(prdate) FROM sme
01:42:29   2  
01:42:29 SQL> -- Build the model:
01:42:29 SQL> CREATE OR REPLACE VIEW bme AS
01:42:29   2  SELECT
01:42:29   3  'aud'||m.ydate prdate
01:42:29   4  ,gatt
01:42:29   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
01:42:29   6  ,eur_g00
01:42:29   7  ,eur_g01
01:42:29   8  ,eur_g02
01:42:29   9  ,eur_g03
01:42:29  10  ,eur_g04
01:42:29  11  ,eur_g05
01:42:29  12  ,eur_g06
01:42:29  13  ,eur_g07
01:42:29  14  ,eur_g08
01:42:29  15  ,eur_g09
01:42:29  16  ,eur_g10
01:42:29  17  ,eur_g11
01:42:29  18  ,eur_g12
01:42:29  19  ,eur_g13
01:42:29  20  ,eur_g14
01:42:29  21  ,eur_g15
01:42:29  22  ,eur_g16
01:42:29  23  ,eur_g17
01:42:29  24  ,eur_g18
01:42:29  25  ,eur_g19
01:42:29  26  ,eur_g20
01:42:29  27  ,eur_g21
01:42:29  28  ,eur_g22
01:42:29  29  ,eur_g23
01:42:29  30  ,eur_g24
01:42:29  31  ,eur_g25
01:42:29  32  ,eur_g26
01:42:29  33  ,eur_g27
01:42:29  34  ,eur_g28
01:42:29  35  ,eur_g29
01:42:29  36  ,eur_g30
01:42:29  37  ,eur_g31
01:42:29  38  ,eur_g32
01:42:29  39  ,eur_g33
01:42:29  40  ,eur_g34
01:42:29  41  ,eur_g35
01:42:29  42  ,eur_g36
01:42:29  43  ,eur_g37
01:42:29  44  ,eur_g38
01:42:29  45  ,eur_g39
01:42:29  46  ,eur_g40
01:42:29  47  ,eur_g41
01:42:29  48  ,aud_g00
01:42:29  49  ,aud_g01
01:42:29  50  ,aud_g02
01:42:29  51  ,aud_g03
01:42:29  52  ,aud_g04
01:42:29  53  ,aud_g05
01:42:29  54  ,aud_g06
01:42:29  55  ,aud_g07
01:42:29  56  ,aud_g08
01:42:29  57  ,aud_g09
01:42:29  58  ,aud_g10
01:42:29  59  ,aud_g11
01:42:29  60  ,aud_g12
01:42:29  61  ,aud_g13
01:42:29  62  ,aud_g14
01:42:29  63  ,aud_g15
01:42:29  64  ,aud_g16
01:42:29  65  ,aud_g17
01:42:29  66  ,aud_g18
01:42:29  67  ,aud_g19
01:42:29  68  ,aud_g20
01:42:29  69  ,aud_g21
01:42:29  70  ,aud_g22
01:42:29  71  ,aud_g23
01:42:29  72  ,aud_g24
01:42:29  73  ,aud_g25
01:42:29  74  ,aud_g26
01:42:29  75  ,aud_g27
01:42:29  76  ,aud_g28
01:42:29  77  ,aud_g29
01:42:29  78  ,aud_g30
01:42:29  79  ,aud_g31
01:42:29  80  ,aud_g32
01:42:29  81  ,aud_g33
01:42:29  82  ,aud_g34
01:42:29  83  ,aud_g35
01:42:29  84  ,aud_g36
01:42:29  85  ,aud_g37
01:42:29  86  ,aud_g38
01:42:29  87  ,aud_g39
01:42:29  88  ,aud_g40
01:42:29  89  ,aud_g41
01:42:29  90  ,gbp_g00
01:42:29  91  ,gbp_g01
01:42:29  92  ,gbp_g02
01:42:29  93  ,gbp_g03
01:42:29  94  ,gbp_g04
01:42:29  95  ,gbp_g05
01:42:29  96  ,gbp_g06
01:42:29  97  ,gbp_g07
01:42:29  98  ,gbp_g08
01:42:29  99  ,gbp_g09
01:42:29 100  ,gbp_g10
01:42:29 101  ,gbp_g11
01:42:29 102  ,gbp_g12
01:42:29 103  ,gbp_g13
01:42:29 104  ,gbp_g14
01:42:29 105  ,gbp_g15
01:42:29 106  ,gbp_g16
01:42:29 107  ,gbp_g17
01:42:29 108  ,gbp_g18
01:42:29 109  ,gbp_g19
01:42:29 110  ,gbp_g20
01:42:29 111  ,gbp_g21
01:42:29 112  ,gbp_g22
01:42:29 113  ,gbp_g23
01:42:29 114  ,gbp_g24
01:42:29 115  ,gbp_g25
01:42:29 116  ,gbp_g26
01:42:29 117  ,gbp_g27
01:42:29 118  ,gbp_g28
01:42:29 119  ,gbp_g29
01:42:29 120  ,gbp_g30
01:42:29 121  ,gbp_g31
01:42:29 122  ,gbp_g32
01:42:29 123  ,gbp_g33
01:42:29 124  ,gbp_g34
01:42:29 125  ,gbp_g35
01:42:29 126  ,gbp_g36
01:42:29 127  ,gbp_g37
01:42:29 128  ,gbp_g38
01:42:29 129  ,gbp_g39
01:42:29 130  ,gbp_g40
01:42:29 131  ,gbp_g41
01:42:29 132  ,jpy_g00
01:42:29 133  ,jpy_g01
01:42:29 134  ,jpy_g02
01:42:29 135  ,jpy_g03
01:42:29 136  ,jpy_g04
01:42:29 137  ,jpy_g05
01:42:29 138  ,jpy_g06
01:42:29 139  ,jpy_g07
01:42:29 140  ,jpy_g08
01:42:29 141  ,jpy_g09
01:42:29 142  ,jpy_g10
01:42:29 143  ,jpy_g11
01:42:29 144  ,jpy_g12
01:42:29 145  ,jpy_g13
01:42:29 146  ,jpy_g14
01:42:29 147  ,jpy_g15
01:42:29 148  ,jpy_g16
01:42:29 149  ,jpy_g17
01:42:29 150  ,jpy_g18
01:42:29 151  ,jpy_g19
01:42:29 152  ,jpy_g20
01:42:29 153  ,jpy_g21
01:42:29 154  ,jpy_g22
01:42:29 155  ,jpy_g23
01:42:29 156  ,jpy_g24
01:42:29 157  ,jpy_g25
01:42:29 158  ,jpy_g26
01:42:29 159  ,jpy_g27
01:42:29 160  ,jpy_g28
01:42:29 161  ,jpy_g29
01:42:29 162  ,jpy_g30
01:42:29 163  ,jpy_g31
01:42:29 164  ,jpy_g32
01:42:29 165  ,jpy_g33
01:42:29 166  ,jpy_g34
01:42:29 167  ,jpy_g35
01:42:29 168  ,jpy_g36
01:42:29 169  ,jpy_g37
01:42:29 170  ,jpy_g38
01:42:29 171  ,jpy_g39
01:42:29 172  ,jpy_g40
01:42:29 173  ,jpy_g41
01:42:29 174  ,cad_g00
01:42:29 175  ,cad_g01
01:42:29 176  ,cad_g02
01:42:29 177  ,cad_g03
01:42:29 178  ,cad_g04
01:42:29 179  ,cad_g05
01:42:29 180  ,cad_g06
01:42:29 181  ,cad_g07
01:42:29 182  ,cad_g08
01:42:29 183  ,cad_g09
01:42:29 184  ,cad_g10
01:42:29 185  ,cad_g11
01:42:29 186  ,cad_g12
01:42:29 187  ,cad_g13
01:42:29 188  ,cad_g14
01:42:29 189  ,cad_g15
01:42:29 190  ,cad_g16
01:42:29 191  ,cad_g17
01:42:29 192  ,cad_g18
01:42:29 193  ,cad_g19
01:42:29 194  ,cad_g20
01:42:29 195  ,cad_g21
01:42:29 196  ,cad_g22
01:42:29 197  ,cad_g23
01:42:29 198  ,cad_g24
01:42:29 199  ,cad_g25
01:42:29 200  ,cad_g26
01:42:29 201  ,cad_g27
01:42:29 202  ,cad_g28
01:42:29 203  ,cad_g29
01:42:29 204  ,cad_g30
01:42:29 205  ,cad_g31
01:42:29 206  ,cad_g32
01:42:29 207  ,cad_g33
01:42:29 208  ,cad_g34
01:42:29 209  ,cad_g35
01:42:29 210  ,cad_g36
01:42:29 211  ,cad_g37
01:42:29 212  ,cad_g38
01:42:29 213  ,cad_g39
01:42:29 214  ,cad_g40
01:42:29 215  ,cad_g41
01:42:29 216  ,chf_g00
01:42:29 217  ,chf_g01
01:42:29 218  ,chf_g02
01:42:29 219  ,chf_g03
01:42:29 220  ,chf_g04
01:42:29 221  ,chf_g05
01:42:29 222  ,chf_g06
01:42:29 223  ,chf_g07
01:42:29 224  ,chf_g08
01:42:29 225  ,chf_g09
01:42:29 226  ,chf_g10
01:42:29 227  ,chf_g11
01:42:29 228  ,chf_g12
01:42:29 229  ,chf_g13
01:42:29 230  ,chf_g14
01:42:29 231  ,chf_g15
01:42:29 232  ,chf_g16
01:42:29 233  ,chf_g17
01:42:29 234  ,chf_g18
01:42:29 235  ,chf_g19
01:42:29 236  ,chf_g20
01:42:29 237  ,chf_g21
01:42:29 238  ,chf_g22
01:42:29 239  ,chf_g23
01:42:29 240  ,chf_g24
01:42:29 241  ,chf_g25
01:42:29 242  ,chf_g26
01:42:29 243  ,chf_g27
01:42:29 244  ,chf_g28
01:42:29 245  ,chf_g29
01:42:29 246  ,chf_g30
01:42:29 247  ,chf_g31
01:42:29 248  ,chf_g32
01:42:29 249  ,chf_g33
01:42:29 250  ,chf_g34
01:42:29 251  ,chf_g35
01:42:29 252  ,chf_g36
01:42:29 253  ,chf_g37
01:42:29 254  ,chf_g38
01:42:29 255  ,chf_g39
01:42:29 256  ,chf_g40
01:42:29 257  ,chf_g41
01:42:29 258  FROM aud_ms6 m
01:42:29 259  WHERE gatt IN('nup','up')
01:42:29 260  AND 1+m.ydate < '&1'||' '||'&2'
01:42:29 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2011-01-05'||' '||'01:20:00'

View created.

Elapsed: 00:00:00.13
01:42:29 SQL> 
01:42:29 SQL> -- rpt
01:42:29 SQL> 
01:42:29 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt
01:42:29   2  
01:42:29 SQL> SELECT MAX(prdate) FROM bme
01:42:29   2  
01:42:29 SQL> -- Now build model from bme and score sme
01:42:29 SQL> @score1.sql
01:42:29 SQL> -- score1.sql
01:42:29 SQL> 
01:42:29 SQL> -- Does the 1st SVM score
01:42:29 SQL> 
01:42:29 SQL> -- Fill up svmc_apply_prep
01:42:29 SQL> @score.sql
01:42:29 SQL> --
01:42:29 SQL> -- score.sql
01:42:29 SQL> --
01:42:29 SQL> 
01:42:29 SQL> -- usage: score.sql
01:42:29 SQL> 
01:42:29 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
01:42:29 SQL> 
01:42:29 SQL> DEFINE target	= 'gatt'
01:42:29 SQL> DEFINE model_name = 'forex15'
01:42:29 SQL> DEFINE bldtable	= 'bme'
01:42:29 SQL> DEFINE scoretable = 'sme'
01:42:29 SQL> DEFINE case_id	= 'prdate'
01:42:29 SQL> 
01:42:29 SQL> -- Define a variable to help me exclude some columns from some data mining calls
01:42:29 SQL> DEFINE exclude1 = "'&target','&case_id'"
01:42:29 SQL> 
01:42:29 SQL> -- Builds an SVM model using pl/sql.
01:42:29 SQL> 
01:42:29 SQL> -----------------------------------------------------------------------
01:42:29 SQL> --			    BUILD THE MODEL
01:42:29 SQL> -----------------------------------------------------------------------
01:42:29 SQL> 
01:42:29 SQL> -- Cleanup old build data preparation objects for repeat runs
01:42:29 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.00
01:42:29 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
01:42:29 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.00
01:42:29 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.01
01:42:29 SQL> 
01:42:29 SQL> 
01:42:29 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
01:42:29 SQL> --
01:42:29 SQL> -- DROP	TABLE svmc_settings ;
01:42:29 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
01:42:29 SQL> -- DELETE svmc_settings;
01:42:29 SQL> 
01:42:29 SQL> -- The default classification algorithm is Naive Bayes. So override
01:42:29 SQL> -- this choice to SVM using a settings table.
01:42:29 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
01:42:29 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
01:42:29 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
01:42:29 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
01:42:29 SQL> -- models.
01:42:29 SQL> --
01:42:29 SQL> 
01:42:29 SQL> -- Do this once and then comment it out.
01:42:29 SQL> -- That makes script go faster.
01:42:29 SQL> -- BEGIN
01:42:29 SQL> -- -- Populate settings table
01:42:29 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
01:42:29 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
01:42:29 SQL> --
01:42:29 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
01:42:29 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
01:42:29 SQL> --
01:42:29 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
01:42:29 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
01:42:29 SQL> --   COMMIT;
01:42:29 SQL> -- END;
01:42:29 SQL> -- /
01:42:29 SQL> 
01:42:29 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
01:42:29 SQL> 
01:42:29 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
01:42:29   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:42:29   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
01:42:29 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
01:42:29   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:42:29   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
01:42:29 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
01:42:29   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:42:29   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
01:42:29 SQL> 
01:42:29 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
01:42:29   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:42:29   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
01:42:29 SQL> 
01:42:29 SQL> --------------------------------
01:42:29 SQL> -- PREPARE BUILD (TRAINING) DATA
01:42:29 SQL> --
01:42:29 SQL> 
01:42:29 SQL> -- 1. Missing Value treatment for all Predictors and
01:42:29 SQL> -- 2. Outlier Treatment and
01:42:29 SQL> -- 3. Normalization are performed below.
01:42:29 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
01:42:29 SQL> --    normalized here.
01:42:29 SQL> 
01:42:29 SQL> BEGIN
01:42:29   2  	-- Perform missing value treatment for all predictors
01:42:29   3  	-- create miss tables
01:42:29   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
01:42:29   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
01:42:29   6  
01:42:29   7  	-- populate miss tables
01:42:29   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
01:42:29   9  	  miss_table_name => 'svmc_miss_num',
01:42:29  10  	  data_table_name => '&bldtable',
01:42:29  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
01:42:29  12  
01:42:29  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
01:42:29  14  	  miss_table_name => 'svmc_miss_cat',
01:42:29  15  	  data_table_name => '&bldtable',
01:42:29  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
01:42:29  17  
01:42:29  18  	-- xform input data to replace missing values
01:42:29  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
01:42:29  20  	  miss_table_name => 'svmc_miss_num',
01:42:29  21  	  data_table_name => '&bldtable',
01:42:29  22  	  xform_view_name => 'xformed_build_miss_num');
01:42:29  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
01:42:29  24  	  miss_table_name => 'svmc_miss_cat',
01:42:29  25  	  data_table_name => '&bldtable',
01:42:29  26  	  xform_view_name => 'xformed_build_miss_cat');
01:42:29  27  
01:42:29  28  	-- Perform outlier treatment.
01:42:29  29  	-- create clip table
01:42:29  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
01:42:29  31  
01:42:29  32  	-- populate clip table
01:42:29  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
01:42:29  34  	  clip_table_name => 'svmc_clip',
01:42:29  35  	  data_table_name => '&bldtable',
01:42:29  36  	  tail_frac	  => 0.025,
01:42:29  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
01:42:29  38  
01:42:29  39  	-- xform input data to winsorized data
01:42:29  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
01:42:29  41  	  clip_table_name => 'svmc_clip',
01:42:29  42  	  data_table_name => '&bldtable',
01:42:29  43  	  xform_view_name => 'svmc_winsor');
01:42:29  44  
01:42:29  45  	-- create normalization table
01:42:29  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
01:42:29  47  
01:42:29  48  	-- populate normalization table based on winsorized data
01:42:29  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
01:42:29  50  	  norm_table_name => 'svmc_norm',
01:42:29  51  	  data_table_name => 'svmc_winsor',
01:42:29  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
01:42:29  53  
01:42:29  54  	-- normalize the original data
01:42:29  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
01:42:29  56  	  norm_table_name => 'svmc_norm',
01:42:29  57  	  data_table_name => '&bldtable',
01:42:29  58  	  xform_view_name => 'svmc_build_prep');
01:42:29  59  END;
01:42:29  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:18.22
01:42:47 SQL> 
01:42:47 SQL> ---------------------
01:42:47 SQL> -- CREATE A NEW MODEL
01:42:47 SQL> --
01:42:47 SQL> -- Cleanup old model with the same name for repeat runs
01:42:47 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
01:42:47   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:42:47   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex15');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.80
01:42:48 SQL> 
01:42:48 SQL> -- Build a new SVM Model
01:42:48 SQL> BEGIN
01:42:48   2  	DBMS_DATA_MINING.CREATE_MODEL(
01:42:48   3  	  model_name	      => '&model_name',
01:42:48   4  	  mining_function     => dbms_data_mining.classification,
01:42:48   5  	  data_table_name     => 'svmc_build_prep',
01:42:48   6  	  case_id_column_name => '&case_id',
01:42:48   7  	  target_column_name  => '&target',
01:42:48   8  	  settings_table_name => 'svmc_settings');
01:42:48   9  END;
01:42:48  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex15',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:29.38
01:43:18 SQL> 
01:43:18 SQL> -----------------------------------------------------------------------
01:43:18 SQL> --			       APPLY/score THE MODEL
01:43:18 SQL> -----------------------------------------------------------------------
01:43:18 SQL> 
01:43:18 SQL> -- Cleanup old scoring data preparation objects for repeat runs
01:43:18 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
01:43:18   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:43:18   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
01:43:18 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
01:43:18   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:43:18   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
01:43:18 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
01:43:18   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:43:18   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
01:43:18 SQL> -----------------------
01:43:18 SQL> -- PREPARE SCORING DATA
01:43:18 SQL> --
01:43:18 SQL> -- If the data for model creation has been prepared, then the data
01:43:18 SQL> -- to be scored using the model must be prepared in the same manner
01:43:18 SQL> -- in order to obtain meaningful results.
01:43:18 SQL> --
01:43:18 SQL> -- 1. Missing Value treatment for all Predictors and
01:43:18 SQL> -- 2. Normalization
01:43:18 SQL> -- No outlier treatment will be performed during test and apply. The
01:43:18 SQL> -- normalization step is sufficient, since the normalization parameters
01:43:18 SQL> -- already capture the effects of outlier treatment done with build data.
01:43:18 SQL> --
01:43:18 SQL> BEGIN
01:43:18   2  	-- Xform Test data to replace missing values
01:43:18   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
01:43:18   4  	  miss_table_name => 'svmc_miss_num',
01:43:18   5  	  data_table_name => '&scoretable',
01:43:18   6  	  xform_view_name => 'xformed_apply_miss_num');
01:43:18   7  
01:43:18   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
01:43:18   9  	  miss_table_name => 'svmc_miss_cat',
01:43:18  10  	  data_table_name => '&scoretable',
01:43:18  11  	  xform_view_name => 'xformed_apply_miss_cat');
01:43:18  12  
01:43:18  13  	-- Normalize the data to be scored
01:43:18  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
01:43:18  15  	  norm_table_name => 'svmc_norm',
01:43:18  16  	  data_table_name => '&scoretable',
01:43:18  17  	  xform_view_name => 'svmc_apply_prep');
01:43:18  18  END;
01:43:18  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.35
01:43:19 SQL> 
01:43:19 SQL> -- Use same model_name used in score.sql
01:43:19 SQL> DEFINE model_name = 'forex15'
01:43:19 SQL> 
01:43:19 SQL> -- CREATE TABLE fxscores6 (prdate VARCHAR2(30),score NUMBER,rundate DATE,pair VARCHAR2(8),ydate DATE);
01:43:19 SQL> 
01:43:19 SQL> DELETE fxscores6 WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.05
01:43:19 SQL> 
01:43:19 SQL> INSERT INTO fxscores6 (prdate,score,rundate,pair,ydate)
01:43:19   2  SELECT
01:43:19   3  prdate
01:43:19   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
01:43:19   5  ,sysdate
01:43:19   6  ,SUBSTR(prdate,1,3)pair
01:43:19   7  ,SUBSTR(prdate,4,19)ydate
01:43:19   8  FROM svmc_apply_prep
01:43:19   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex15,'up' USING *)score

1 row created.

Elapsed: 00:00:00.19
01:43:19 SQL> @aud_score1day.sql  2011-01-05 01:25:00
01:43:19 SQL> --
01:43:19 SQL> -- aud_score1day.sql
01:43:19 SQL> --
01:43:19 SQL> 
01:43:19 SQL> CREATE OR REPLACE VIEW sme AS
01:43:19   2  SELECT
01:43:19   3  'aud'||m.ydate prdate
01:43:19   4  ,NULL gatt
01:43:19   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
01:43:19   6  ,eur_g00
01:43:19   7  ,eur_g01
01:43:19   8  ,eur_g02
01:43:19   9  ,eur_g03
01:43:19  10  ,eur_g04
01:43:19  11  ,eur_g05
01:43:19  12  ,eur_g06
01:43:19  13  ,eur_g07
01:43:19  14  ,eur_g08
01:43:19  15  ,eur_g09
01:43:19  16  ,eur_g10
01:43:19  17  ,eur_g11
01:43:19  18  ,eur_g12
01:43:19  19  ,eur_g13
01:43:19  20  ,eur_g14
01:43:19  21  ,eur_g15
01:43:19  22  ,eur_g16
01:43:19  23  ,eur_g17
01:43:19  24  ,eur_g18
01:43:19  25  ,eur_g19
01:43:19  26  ,eur_g20
01:43:19  27  ,eur_g21
01:43:19  28  ,eur_g22
01:43:19  29  ,eur_g23
01:43:19  30  ,eur_g24
01:43:19  31  ,eur_g25
01:43:19  32  ,eur_g26
01:43:19  33  ,eur_g27
01:43:19  34  ,eur_g28
01:43:19  35  ,eur_g29
01:43:19  36  ,eur_g30
01:43:19  37  ,eur_g31
01:43:19  38  ,eur_g32
01:43:19  39  ,eur_g33
01:43:19  40  ,eur_g34
01:43:19  41  ,eur_g35
01:43:19  42  ,eur_g36
01:43:19  43  ,eur_g37
01:43:19  44  ,eur_g38
01:43:19  45  ,eur_g39
01:43:19  46  ,eur_g40
01:43:19  47  ,eur_g41
01:43:19  48  ,aud_g00
01:43:19  49  ,aud_g01
01:43:19  50  ,aud_g02
01:43:19  51  ,aud_g03
01:43:19  52  ,aud_g04
01:43:19  53  ,aud_g05
01:43:19  54  ,aud_g06
01:43:19  55  ,aud_g07
01:43:19  56  ,aud_g08
01:43:19  57  ,aud_g09
01:43:19  58  ,aud_g10
01:43:19  59  ,aud_g11
01:43:19  60  ,aud_g12
01:43:19  61  ,aud_g13
01:43:19  62  ,aud_g14
01:43:19  63  ,aud_g15
01:43:19  64  ,aud_g16
01:43:19  65  ,aud_g17
01:43:19  66  ,aud_g18
01:43:19  67  ,aud_g19
01:43:19  68  ,aud_g20
01:43:19  69  ,aud_g21
01:43:19  70  ,aud_g22
01:43:19  71  ,aud_g23
01:43:19  72  ,aud_g24
01:43:19  73  ,aud_g25
01:43:19  74  ,aud_g26
01:43:19  75  ,aud_g27
01:43:19  76  ,aud_g28
01:43:19  77  ,aud_g29
01:43:19  78  ,aud_g30
01:43:19  79  ,aud_g31
01:43:19  80  ,aud_g32
01:43:19  81  ,aud_g33
01:43:19  82  ,aud_g34
01:43:19  83  ,aud_g35
01:43:19  84  ,aud_g36
01:43:19  85  ,aud_g37
01:43:19  86  ,aud_g38
01:43:19  87  ,aud_g39
01:43:19  88  ,aud_g40
01:43:19  89  ,aud_g41
01:43:19  90  ,gbp_g00
01:43:19  91  ,gbp_g01
01:43:19  92  ,gbp_g02
01:43:19  93  ,gbp_g03
01:43:19  94  ,gbp_g04
01:43:19  95  ,gbp_g05
01:43:19  96  ,gbp_g06
01:43:19  97  ,gbp_g07
01:43:19  98  ,gbp_g08
01:43:19  99  ,gbp_g09
01:43:19 100  ,gbp_g10
01:43:19 101  ,gbp_g11
01:43:19 102  ,gbp_g12
01:43:19 103  ,gbp_g13
01:43:19 104  ,gbp_g14
01:43:19 105  ,gbp_g15
01:43:19 106  ,gbp_g16
01:43:19 107  ,gbp_g17
01:43:19 108  ,gbp_g18
01:43:19 109  ,gbp_g19
01:43:19 110  ,gbp_g20
01:43:19 111  ,gbp_g21
01:43:19 112  ,gbp_g22
01:43:19 113  ,gbp_g23
01:43:19 114  ,gbp_g24
01:43:19 115  ,gbp_g25
01:43:19 116  ,gbp_g26
01:43:19 117  ,gbp_g27
01:43:19 118  ,gbp_g28
01:43:19 119  ,gbp_g29
01:43:19 120  ,gbp_g30
01:43:19 121  ,gbp_g31
01:43:19 122  ,gbp_g32
01:43:19 123  ,gbp_g33
01:43:19 124  ,gbp_g34
01:43:19 125  ,gbp_g35
01:43:19 126  ,gbp_g36
01:43:19 127  ,gbp_g37
01:43:19 128  ,gbp_g38
01:43:19 129  ,gbp_g39
01:43:19 130  ,gbp_g40
01:43:19 131  ,gbp_g41
01:43:19 132  ,jpy_g00
01:43:19 133  ,jpy_g01
01:43:19 134  ,jpy_g02
01:43:19 135  ,jpy_g03
01:43:19 136  ,jpy_g04
01:43:19 137  ,jpy_g05
01:43:19 138  ,jpy_g06
01:43:19 139  ,jpy_g07
01:43:19 140  ,jpy_g08
01:43:19 141  ,jpy_g09
01:43:19 142  ,jpy_g10
01:43:19 143  ,jpy_g11
01:43:19 144  ,jpy_g12
01:43:19 145  ,jpy_g13
01:43:19 146  ,jpy_g14
01:43:19 147  ,jpy_g15
01:43:19 148  ,jpy_g16
01:43:19 149  ,jpy_g17
01:43:19 150  ,jpy_g18
01:43:19 151  ,jpy_g19
01:43:19 152  ,jpy_g20
01:43:19 153  ,jpy_g21
01:43:19 154  ,jpy_g22
01:43:19 155  ,jpy_g23
01:43:19 156  ,jpy_g24
01:43:19 157  ,jpy_g25
01:43:19 158  ,jpy_g26
01:43:19 159  ,jpy_g27
01:43:19 160  ,jpy_g28
01:43:19 161  ,jpy_g29
01:43:19 162  ,jpy_g30
01:43:19 163  ,jpy_g31
01:43:19 164  ,jpy_g32
01:43:19 165  ,jpy_g33
01:43:19 166  ,jpy_g34
01:43:19 167  ,jpy_g35
01:43:19 168  ,jpy_g36
01:43:19 169  ,jpy_g37
01:43:19 170  ,jpy_g38
01:43:19 171  ,jpy_g39
01:43:19 172  ,jpy_g40
01:43:19 173  ,jpy_g41
01:43:19 174  ,cad_g00
01:43:19 175  ,cad_g01
01:43:19 176  ,cad_g02
01:43:19 177  ,cad_g03
01:43:19 178  ,cad_g04
01:43:19 179  ,cad_g05
01:43:19 180  ,cad_g06
01:43:19 181  ,cad_g07
01:43:19 182  ,cad_g08
01:43:19 183  ,cad_g09
01:43:19 184  ,cad_g10
01:43:19 185  ,cad_g11
01:43:19 186  ,cad_g12
01:43:19 187  ,cad_g13
01:43:19 188  ,cad_g14
01:43:19 189  ,cad_g15
01:43:19 190  ,cad_g16
01:43:19 191  ,cad_g17
01:43:19 192  ,cad_g18
01:43:19 193  ,cad_g19
01:43:19 194  ,cad_g20
01:43:19 195  ,cad_g21
01:43:19 196  ,cad_g22
01:43:19 197  ,cad_g23
01:43:19 198  ,cad_g24
01:43:19 199  ,cad_g25
01:43:19 200  ,cad_g26
01:43:19 201  ,cad_g27
01:43:19 202  ,cad_g28
01:43:19 203  ,cad_g29
01:43:19 204  ,cad_g30
01:43:19 205  ,cad_g31
01:43:19 206  ,cad_g32
01:43:19 207  ,cad_g33
01:43:19 208  ,cad_g34
01:43:19 209  ,cad_g35
01:43:19 210  ,cad_g36
01:43:19 211  ,cad_g37
01:43:19 212  ,cad_g38
01:43:19 213  ,cad_g39
01:43:19 214  ,cad_g40
01:43:19 215  ,cad_g41
01:43:19 216  ,chf_g00
01:43:19 217  ,chf_g01
01:43:19 218  ,chf_g02
01:43:19 219  ,chf_g03
01:43:19 220  ,chf_g04
01:43:19 221  ,chf_g05
01:43:19 222  ,chf_g06
01:43:19 223  ,chf_g07
01:43:19 224  ,chf_g08
01:43:19 225  ,chf_g09
01:43:19 226  ,chf_g10
01:43:19 227  ,chf_g11
01:43:19 228  ,chf_g12
01:43:19 229  ,chf_g13
01:43:19 230  ,chf_g14
01:43:19 231  ,chf_g15
01:43:19 232  ,chf_g16
01:43:19 233  ,chf_g17
01:43:19 234  ,chf_g18
01:43:19 235  ,chf_g19
01:43:19 236  ,chf_g20
01:43:19 237  ,chf_g21
01:43:19 238  ,chf_g22
01:43:19 239  ,chf_g23
01:43:19 240  ,chf_g24
01:43:19 241  ,chf_g25
01:43:19 242  ,chf_g26
01:43:19 243  ,chf_g27
01:43:19 244  ,chf_g28
01:43:19 245  ,chf_g29
01:43:19 246  ,chf_g30
01:43:19 247  ,chf_g31
01:43:19 248  ,chf_g32
01:43:19 249  ,chf_g33
01:43:19 250  ,chf_g34
01:43:19 251  ,chf_g35
01:43:19 252  ,chf_g36
01:43:19 253  ,chf_g37
01:43:19 254  ,chf_g38
01:43:19 255  ,chf_g39
01:43:19 256  ,chf_g40
01:43:19 257  ,chf_g41
01:43:19 258  FROM aud_ms6 m
01:43:19 259  WHERE m.ydate = '&1'||' '||'&2'
01:43:19 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2011-01-05'||' '||'01:25:00'

View created.

Elapsed: 00:00:00.13
01:43:19 SQL> 
01:43:19 SQL> -- rpt
01:43:19 SQL> -- We should see just 1 row:
01:43:19 SQL> 
01:43:19 SQL> SELECT COUNT(prdate) FROM sme
01:43:19   2  
01:43:19 SQL> -- Build the model:
01:43:19 SQL> CREATE OR REPLACE VIEW bme AS
01:43:19   2  SELECT
01:43:19   3  'aud'||m.ydate prdate
01:43:19   4  ,gatt
01:43:19   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
01:43:19   6  ,eur_g00
01:43:19   7  ,eur_g01
01:43:19   8  ,eur_g02
01:43:19   9  ,eur_g03
01:43:19  10  ,eur_g04
01:43:19  11  ,eur_g05
01:43:19  12  ,eur_g06
01:43:19  13  ,eur_g07
01:43:19  14  ,eur_g08
01:43:19  15  ,eur_g09
01:43:19  16  ,eur_g10
01:43:19  17  ,eur_g11
01:43:19  18  ,eur_g12
01:43:19  19  ,eur_g13
01:43:19  20  ,eur_g14
01:43:19  21  ,eur_g15
01:43:19  22  ,eur_g16
01:43:19  23  ,eur_g17
01:43:19  24  ,eur_g18
01:43:19  25  ,eur_g19
01:43:19  26  ,eur_g20
01:43:19  27  ,eur_g21
01:43:19  28  ,eur_g22
01:43:19  29  ,eur_g23
01:43:19  30  ,eur_g24
01:43:19  31  ,eur_g25
01:43:19  32  ,eur_g26
01:43:19  33  ,eur_g27
01:43:19  34  ,eur_g28
01:43:19  35  ,eur_g29
01:43:19  36  ,eur_g30
01:43:19  37  ,eur_g31
01:43:19  38  ,eur_g32
01:43:19  39  ,eur_g33
01:43:19  40  ,eur_g34
01:43:19  41  ,eur_g35
01:43:19  42  ,eur_g36
01:43:19  43  ,eur_g37
01:43:19  44  ,eur_g38
01:43:19  45  ,eur_g39
01:43:19  46  ,eur_g40
01:43:19  47  ,eur_g41
01:43:19  48  ,aud_g00
01:43:19  49  ,aud_g01
01:43:19  50  ,aud_g02
01:43:19  51  ,aud_g03
01:43:19  52  ,aud_g04
01:43:19  53  ,aud_g05
01:43:19  54  ,aud_g06
01:43:19  55  ,aud_g07
01:43:19  56  ,aud_g08
01:43:19  57  ,aud_g09
01:43:19  58  ,aud_g10
01:43:19  59  ,aud_g11
01:43:19  60  ,aud_g12
01:43:19  61  ,aud_g13
01:43:19  62  ,aud_g14
01:43:19  63  ,aud_g15
01:43:19  64  ,aud_g16
01:43:19  65  ,aud_g17
01:43:19  66  ,aud_g18
01:43:19  67  ,aud_g19
01:43:19  68  ,aud_g20
01:43:19  69  ,aud_g21
01:43:19  70  ,aud_g22
01:43:19  71  ,aud_g23
01:43:19  72  ,aud_g24
01:43:19  73  ,aud_g25
01:43:19  74  ,aud_g26
01:43:19  75  ,aud_g27
01:43:19  76  ,aud_g28
01:43:19  77  ,aud_g29
01:43:19  78  ,aud_g30
01:43:19  79  ,aud_g31
01:43:19  80  ,aud_g32
01:43:19  81  ,aud_g33
01:43:19  82  ,aud_g34
01:43:19  83  ,aud_g35
01:43:19  84  ,aud_g36
01:43:19  85  ,aud_g37
01:43:19  86  ,aud_g38
01:43:19  87  ,aud_g39
01:43:19  88  ,aud_g40
01:43:19  89  ,aud_g41
01:43:19  90  ,gbp_g00
01:43:19  91  ,gbp_g01
01:43:19  92  ,gbp_g02
01:43:19  93  ,gbp_g03
01:43:19  94  ,gbp_g04
01:43:19  95  ,gbp_g05
01:43:19  96  ,gbp_g06
01:43:19  97  ,gbp_g07
01:43:19  98  ,gbp_g08
01:43:19  99  ,gbp_g09
01:43:19 100  ,gbp_g10
01:43:19 101  ,gbp_g11
01:43:19 102  ,gbp_g12
01:43:19 103  ,gbp_g13
01:43:19 104  ,gbp_g14
01:43:19 105  ,gbp_g15
01:43:19 106  ,gbp_g16
01:43:19 107  ,gbp_g17
01:43:19 108  ,gbp_g18
01:43:19 109  ,gbp_g19
01:43:19 110  ,gbp_g20
01:43:19 111  ,gbp_g21
01:43:19 112  ,gbp_g22
01:43:19 113  ,gbp_g23
01:43:19 114  ,gbp_g24
01:43:19 115  ,gbp_g25
01:43:19 116  ,gbp_g26
01:43:19 117  ,gbp_g27
01:43:19 118  ,gbp_g28
01:43:19 119  ,gbp_g29
01:43:19 120  ,gbp_g30
01:43:19 121  ,gbp_g31
01:43:19 122  ,gbp_g32
01:43:19 123  ,gbp_g33
01:43:19 124  ,gbp_g34
01:43:19 125  ,gbp_g35
01:43:19 126  ,gbp_g36
01:43:19 127  ,gbp_g37
01:43:19 128  ,gbp_g38
01:43:19 129  ,gbp_g39
01:43:19 130  ,gbp_g40
01:43:19 131  ,gbp_g41
01:43:19 132  ,jpy_g00
01:43:19 133  ,jpy_g01
01:43:19 134  ,jpy_g02
01:43:19 135  ,jpy_g03
01:43:19 136  ,jpy_g04
01:43:19 137  ,jpy_g05
01:43:19 138  ,jpy_g06
01:43:19 139  ,jpy_g07
01:43:19 140  ,jpy_g08
01:43:19 141  ,jpy_g09
01:43:19 142  ,jpy_g10
01:43:19 143  ,jpy_g11
01:43:19 144  ,jpy_g12
01:43:19 145  ,jpy_g13
01:43:19 146  ,jpy_g14
01:43:19 147  ,jpy_g15
01:43:19 148  ,jpy_g16
01:43:19 149  ,jpy_g17
01:43:19 150  ,jpy_g18
01:43:19 151  ,jpy_g19
01:43:19 152  ,jpy_g20
01:43:19 153  ,jpy_g21
01:43:19 154  ,jpy_g22
01:43:19 155  ,jpy_g23
01:43:19 156  ,jpy_g24
01:43:19 157  ,jpy_g25
01:43:19 158  ,jpy_g26
01:43:19 159  ,jpy_g27
01:43:19 160  ,jpy_g28
01:43:19 161  ,jpy_g29
01:43:19 162  ,jpy_g30
01:43:19 163  ,jpy_g31
01:43:19 164  ,jpy_g32
01:43:19 165  ,jpy_g33
01:43:19 166  ,jpy_g34
01:43:19 167  ,jpy_g35
01:43:19 168  ,jpy_g36
01:43:19 169  ,jpy_g37
01:43:19 170  ,jpy_g38
01:43:19 171  ,jpy_g39
01:43:19 172  ,jpy_g40
01:43:19 173  ,jpy_g41
01:43:19 174  ,cad_g00
01:43:19 175  ,cad_g01
01:43:19 176  ,cad_g02
01:43:19 177  ,cad_g03
01:43:19 178  ,cad_g04
01:43:19 179  ,cad_g05
01:43:19 180  ,cad_g06
01:43:19 181  ,cad_g07
01:43:19 182  ,cad_g08
01:43:19 183  ,cad_g09
01:43:19 184  ,cad_g10
01:43:19 185  ,cad_g11
01:43:19 186  ,cad_g12
01:43:19 187  ,cad_g13
01:43:19 188  ,cad_g14
01:43:19 189  ,cad_g15
01:43:19 190  ,cad_g16
01:43:19 191  ,cad_g17
01:43:19 192  ,cad_g18
01:43:19 193  ,cad_g19
01:43:19 194  ,cad_g20
01:43:19 195  ,cad_g21
01:43:19 196  ,cad_g22
01:43:19 197  ,cad_g23
01:43:19 198  ,cad_g24
01:43:19 199  ,cad_g25
01:43:19 200  ,cad_g26
01:43:19 201  ,cad_g27
01:43:19 202  ,cad_g28
01:43:19 203  ,cad_g29
01:43:19 204  ,cad_g30
01:43:19 205  ,cad_g31
01:43:19 206  ,cad_g32
01:43:19 207  ,cad_g33
01:43:19 208  ,cad_g34
01:43:19 209  ,cad_g35
01:43:19 210  ,cad_g36
01:43:19 211  ,cad_g37
01:43:19 212  ,cad_g38
01:43:19 213  ,cad_g39
01:43:19 214  ,cad_g40
01:43:19 215  ,cad_g41
01:43:19 216  ,chf_g00
01:43:19 217  ,chf_g01
01:43:19 218  ,chf_g02
01:43:19 219  ,chf_g03
01:43:19 220  ,chf_g04
01:43:19 221  ,chf_g05
01:43:19 222  ,chf_g06
01:43:19 223  ,chf_g07
01:43:19 224  ,chf_g08
01:43:19 225  ,chf_g09
01:43:19 226  ,chf_g10
01:43:19 227  ,chf_g11
01:43:19 228  ,chf_g12
01:43:19 229  ,chf_g13
01:43:19 230  ,chf_g14
01:43:19 231  ,chf_g15
01:43:19 232  ,chf_g16
01:43:19 233  ,chf_g17
01:43:19 234  ,chf_g18
01:43:19 235  ,chf_g19
01:43:19 236  ,chf_g20
01:43:19 237  ,chf_g21
01:43:19 238  ,chf_g22
01:43:19 239  ,chf_g23
01:43:19 240  ,chf_g24
01:43:19 241  ,chf_g25
01:43:19 242  ,chf_g26
01:43:19 243  ,chf_g27
01:43:19 244  ,chf_g28
01:43:19 245  ,chf_g29
01:43:19 246  ,chf_g30
01:43:19 247  ,chf_g31
01:43:19 248  ,chf_g32
01:43:19 249  ,chf_g33
01:43:19 250  ,chf_g34
01:43:19 251  ,chf_g35
01:43:19 252  ,chf_g36
01:43:19 253  ,chf_g37
01:43:19 254  ,chf_g38
01:43:19 255  ,chf_g39
01:43:19 256  ,chf_g40
01:43:19 257  ,chf_g41
01:43:19 258  FROM aud_ms6 m
01:43:19 259  WHERE gatt IN('nup','up')
01:43:19 260  AND 1+m.ydate < '&1'||' '||'&2'
01:43:19 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2011-01-05'||' '||'01:25:00'

View created.

Elapsed: 00:00:00.12
01:43:20 SQL> 
01:43:20 SQL> -- rpt
01:43:20 SQL> 
01:43:20 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt
01:43:20   2  
01:43:20 SQL> SELECT MAX(prdate) FROM bme
01:43:20   2  
01:43:20 SQL> -- Now build model from bme and score sme
01:43:20 SQL> @score1.sql
01:43:20 SQL> -- score1.sql
01:43:20 SQL> 
01:43:20 SQL> -- Does the 1st SVM score
01:43:20 SQL> 
01:43:20 SQL> -- Fill up svmc_apply_prep
01:43:20 SQL> @score.sql
01:43:20 SQL> --
01:43:20 SQL> -- score.sql
01:43:20 SQL> --
01:43:20 SQL> 
01:43:20 SQL> -- usage: score.sql
01:43:20 SQL> 
01:43:20 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
01:43:20 SQL> 
01:43:20 SQL> DEFINE target	= 'gatt'
01:43:20 SQL> DEFINE model_name = 'forex15'
01:43:20 SQL> DEFINE bldtable	= 'bme'
01:43:20 SQL> DEFINE scoretable = 'sme'
01:43:20 SQL> DEFINE case_id	= 'prdate'
01:43:20 SQL> 
01:43:20 SQL> -- Define a variable to help me exclude some columns from some data mining calls
01:43:20 SQL> DEFINE exclude1 = "'&target','&case_id'"
01:43:20 SQL> 
01:43:20 SQL> -- Builds an SVM model using pl/sql.
01:43:20 SQL> 
01:43:20 SQL> -----------------------------------------------------------------------
01:43:20 SQL> --			    BUILD THE MODEL
01:43:20 SQL> -----------------------------------------------------------------------
01:43:20 SQL> 
01:43:20 SQL> -- Cleanup old build data preparation objects for repeat runs
01:43:20 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.00
01:43:20 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
01:43:20 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.00
01:43:20 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.01
01:43:20 SQL> 
01:43:20 SQL> 
01:43:20 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
01:43:20 SQL> --
01:43:20 SQL> -- DROP	TABLE svmc_settings ;
01:43:20 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
01:43:20 SQL> -- DELETE svmc_settings;
01:43:20 SQL> 
01:43:20 SQL> -- The default classification algorithm is Naive Bayes. So override
01:43:20 SQL> -- this choice to SVM using a settings table.
01:43:20 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
01:43:20 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
01:43:20 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
01:43:20 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
01:43:20 SQL> -- models.
01:43:20 SQL> --
01:43:20 SQL> 
01:43:20 SQL> -- Do this once and then comment it out.
01:43:20 SQL> -- That makes script go faster.
01:43:20 SQL> -- BEGIN
01:43:20 SQL> -- -- Populate settings table
01:43:20 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
01:43:20 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
01:43:20 SQL> --
01:43:20 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
01:43:20 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
01:43:20 SQL> --
01:43:20 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
01:43:20 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
01:43:20 SQL> --   COMMIT;
01:43:20 SQL> -- END;
01:43:20 SQL> -- /
01:43:20 SQL> 
01:43:20 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
01:43:20 SQL> 
01:43:20 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
01:43:20   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:43:20   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
01:43:20 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
01:43:20   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:43:20   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
01:43:20 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
01:43:20   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:43:20   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
01:43:20 SQL> 
01:43:20 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
01:43:20   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:43:20   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
01:43:20 SQL> 
01:43:20 SQL> --------------------------------
01:43:20 SQL> -- PREPARE BUILD (TRAINING) DATA
01:43:20 SQL> --
01:43:20 SQL> 
01:43:20 SQL> -- 1. Missing Value treatment for all Predictors and
01:43:20 SQL> -- 2. Outlier Treatment and
01:43:20 SQL> -- 3. Normalization are performed below.
01:43:20 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
01:43:20 SQL> --    normalized here.
01:43:20 SQL> 
01:43:20 SQL> BEGIN
01:43:20   2  	-- Perform missing value treatment for all predictors
01:43:20   3  	-- create miss tables
01:43:20   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
01:43:20   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
01:43:20   6  
01:43:20   7  	-- populate miss tables
01:43:20   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
01:43:20   9  	  miss_table_name => 'svmc_miss_num',
01:43:20  10  	  data_table_name => '&bldtable',
01:43:20  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
01:43:20  12  
01:43:20  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
01:43:20  14  	  miss_table_name => 'svmc_miss_cat',
01:43:20  15  	  data_table_name => '&bldtable',
01:43:20  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
01:43:20  17  
01:43:20  18  	-- xform input data to replace missing values
01:43:20  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
01:43:20  20  	  miss_table_name => 'svmc_miss_num',
01:43:20  21  	  data_table_name => '&bldtable',
01:43:20  22  	  xform_view_name => 'xformed_build_miss_num');
01:43:20  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
01:43:20  24  	  miss_table_name => 'svmc_miss_cat',
01:43:20  25  	  data_table_name => '&bldtable',
01:43:20  26  	  xform_view_name => 'xformed_build_miss_cat');
01:43:20  27  
01:43:20  28  	-- Perform outlier treatment.
01:43:20  29  	-- create clip table
01:43:20  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
01:43:20  31  
01:43:20  32  	-- populate clip table
01:43:20  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
01:43:20  34  	  clip_table_name => 'svmc_clip',
01:43:20  35  	  data_table_name => '&bldtable',
01:43:20  36  	  tail_frac	  => 0.025,
01:43:20  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
01:43:20  38  
01:43:20  39  	-- xform input data to winsorized data
01:43:20  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
01:43:20  41  	  clip_table_name => 'svmc_clip',
01:43:20  42  	  data_table_name => '&bldtable',
01:43:20  43  	  xform_view_name => 'svmc_winsor');
01:43:20  44  
01:43:20  45  	-- create normalization table
01:43:20  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
01:43:20  47  
01:43:20  48  	-- populate normalization table based on winsorized data
01:43:20  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
01:43:20  50  	  norm_table_name => 'svmc_norm',
01:43:20  51  	  data_table_name => 'svmc_winsor',
01:43:20  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
01:43:20  53  
01:43:20  54  	-- normalize the original data
01:43:20  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
01:43:20  56  	  norm_table_name => 'svmc_norm',
01:43:20  57  	  data_table_name => '&bldtable',
01:43:20  58  	  xform_view_name => 'svmc_build_prep');
01:43:20  59  END;
01:43:20  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:18.99
01:43:39 SQL> 
01:43:39 SQL> ---------------------
01:43:39 SQL> -- CREATE A NEW MODEL
01:43:39 SQL> --
01:43:39 SQL> -- Cleanup old model with the same name for repeat runs
01:43:39 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
01:43:39   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:43:39   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex15');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.21
01:43:40 SQL> 
01:43:40 SQL> -- Build a new SVM Model
01:43:40 SQL> BEGIN
01:43:40   2  	DBMS_DATA_MINING.CREATE_MODEL(
01:43:40   3  	  model_name	      => '&model_name',
01:43:40   4  	  mining_function     => dbms_data_mining.classification,
01:43:40   5  	  data_table_name     => 'svmc_build_prep',
01:43:40   6  	  case_id_column_name => '&case_id',
01:43:40   7  	  target_column_name  => '&target',
01:43:40   8  	  settings_table_name => 'svmc_settings');
01:43:40   9  END;
01:43:40  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex15',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:27.66
01:44:08 SQL> 
01:44:08 SQL> -----------------------------------------------------------------------
01:44:08 SQL> --			       APPLY/score THE MODEL
01:44:08 SQL> -----------------------------------------------------------------------
01:44:08 SQL> 
01:44:08 SQL> -- Cleanup old scoring data preparation objects for repeat runs
01:44:08 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
01:44:08   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:44:08   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
01:44:08 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
01:44:08   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:44:08   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
01:44:08 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
01:44:08   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:44:08   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
01:44:08 SQL> -----------------------
01:44:08 SQL> -- PREPARE SCORING DATA
01:44:08 SQL> --
01:44:08 SQL> -- If the data for model creation has been prepared, then the data
01:44:08 SQL> -- to be scored using the model must be prepared in the same manner
01:44:08 SQL> -- in order to obtain meaningful results.
01:44:08 SQL> --
01:44:08 SQL> -- 1. Missing Value treatment for all Predictors and
01:44:08 SQL> -- 2. Normalization
01:44:08 SQL> -- No outlier treatment will be performed during test and apply. The
01:44:08 SQL> -- normalization step is sufficient, since the normalization parameters
01:44:08 SQL> -- already capture the effects of outlier treatment done with build data.
01:44:08 SQL> --
01:44:08 SQL> BEGIN
01:44:08   2  	-- Xform Test data to replace missing values
01:44:08   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
01:44:08   4  	  miss_table_name => 'svmc_miss_num',
01:44:08   5  	  data_table_name => '&scoretable',
01:44:08   6  	  xform_view_name => 'xformed_apply_miss_num');
01:44:08   7  
01:44:08   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
01:44:08   9  	  miss_table_name => 'svmc_miss_cat',
01:44:08  10  	  data_table_name => '&scoretable',
01:44:08  11  	  xform_view_name => 'xformed_apply_miss_cat');
01:44:08  12  
01:44:08  13  	-- Normalize the data to be scored
01:44:08  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
01:44:08  15  	  norm_table_name => 'svmc_norm',
01:44:08  16  	  data_table_name => '&scoretable',
01:44:08  17  	  xform_view_name => 'svmc_apply_prep');
01:44:08  18  END;
01:44:08  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.22
01:44:09 SQL> 
01:44:09 SQL> -- Use same model_name used in score.sql
01:44:09 SQL> DEFINE model_name = 'forex15'
01:44:09 SQL> 
01:44:09 SQL> -- CREATE TABLE fxscores6 (prdate VARCHAR2(30),score NUMBER,rundate DATE,pair VARCHAR2(8),ydate DATE);
01:44:09 SQL> 
01:44:09 SQL> DELETE fxscores6 WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.04
01:44:09 SQL> 
01:44:09 SQL> INSERT INTO fxscores6 (prdate,score,rundate,pair,ydate)
01:44:09   2  SELECT
01:44:09   3  prdate
01:44:09   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
01:44:09   5  ,sysdate
01:44:09   6  ,SUBSTR(prdate,1,3)pair
01:44:09   7  ,SUBSTR(prdate,4,19)ydate
01:44:09   8  FROM svmc_apply_prep
01:44:09   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex15,'up' USING *)score

1 row created.

Elapsed: 00:00:00.18
01:44:09 SQL> @aud_score1day.sql  2011-01-05 01:30:00
01:44:09 SQL> --
01:44:09 SQL> -- aud_score1day.sql
01:44:09 SQL> --
01:44:09 SQL> 
01:44:09 SQL> CREATE OR REPLACE VIEW sme AS
01:44:09   2  SELECT
01:44:09   3  'aud'||m.ydate prdate
01:44:09   4  ,NULL gatt
01:44:09   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
01:44:09   6  ,eur_g00
01:44:09   7  ,eur_g01
01:44:09   8  ,eur_g02
01:44:09   9  ,eur_g03
01:44:09  10  ,eur_g04
01:44:09  11  ,eur_g05
01:44:09  12  ,eur_g06
01:44:09  13  ,eur_g07
01:44:09  14  ,eur_g08
01:44:09  15  ,eur_g09
01:44:09  16  ,eur_g10
01:44:09  17  ,eur_g11
01:44:09  18  ,eur_g12
01:44:09  19  ,eur_g13
01:44:09  20  ,eur_g14
01:44:09  21  ,eur_g15
01:44:09  22  ,eur_g16
01:44:09  23  ,eur_g17
01:44:09  24  ,eur_g18
01:44:09  25  ,eur_g19
01:44:09  26  ,eur_g20
01:44:09  27  ,eur_g21
01:44:09  28  ,eur_g22
01:44:09  29  ,eur_g23
01:44:09  30  ,eur_g24
01:44:09  31  ,eur_g25
01:44:09  32  ,eur_g26
01:44:09  33  ,eur_g27
01:44:09  34  ,eur_g28
01:44:09  35  ,eur_g29
01:44:09  36  ,eur_g30
01:44:09  37  ,eur_g31
01:44:09  38  ,eur_g32
01:44:09  39  ,eur_g33
01:44:09  40  ,eur_g34
01:44:09  41  ,eur_g35
01:44:09  42  ,eur_g36
01:44:09  43  ,eur_g37
01:44:09  44  ,eur_g38
01:44:09  45  ,eur_g39
01:44:09  46  ,eur_g40
01:44:09  47  ,eur_g41
01:44:09  48  ,aud_g00
01:44:09  49  ,aud_g01
01:44:09  50  ,aud_g02
01:44:09  51  ,aud_g03
01:44:09  52  ,aud_g04
01:44:09  53  ,aud_g05
01:44:09  54  ,aud_g06
01:44:09  55  ,aud_g07
01:44:09  56  ,aud_g08
01:44:09  57  ,aud_g09
01:44:09  58  ,aud_g10
01:44:09  59  ,aud_g11
01:44:09  60  ,aud_g12
01:44:09  61  ,aud_g13
01:44:09  62  ,aud_g14
01:44:09  63  ,aud_g15
01:44:09  64  ,aud_g16
01:44:09  65  ,aud_g17
01:44:09  66  ,aud_g18
01:44:09  67  ,aud_g19
01:44:09  68  ,aud_g20
01:44:09  69  ,aud_g21
01:44:09  70  ,aud_g22
01:44:09  71  ,aud_g23
01:44:09  72  ,aud_g24
01:44:09  73  ,aud_g25
01:44:09  74  ,aud_g26
01:44:09  75  ,aud_g27
01:44:09  76  ,aud_g28
01:44:09  77  ,aud_g29
01:44:09  78  ,aud_g30
01:44:09  79  ,aud_g31
01:44:09  80  ,aud_g32
01:44:09  81  ,aud_g33
01:44:09  82  ,aud_g34
01:44:09  83  ,aud_g35
01:44:09  84  ,aud_g36
01:44:09  85  ,aud_g37
01:44:09  86  ,aud_g38
01:44:09  87  ,aud_g39
01:44:09  88  ,aud_g40
01:44:09  89  ,aud_g41
01:44:09  90  ,gbp_g00
01:44:09  91  ,gbp_g01
01:44:09  92  ,gbp_g02
01:44:09  93  ,gbp_g03
01:44:09  94  ,gbp_g04
01:44:09  95  ,gbp_g05
01:44:09  96  ,gbp_g06
01:44:09  97  ,gbp_g07
01:44:09  98  ,gbp_g08
01:44:09  99  ,gbp_g09
01:44:09 100  ,gbp_g10
01:44:09 101  ,gbp_g11
01:44:09 102  ,gbp_g12
01:44:09 103  ,gbp_g13
01:44:09 104  ,gbp_g14
01:44:09 105  ,gbp_g15
01:44:09 106  ,gbp_g16
01:44:09 107  ,gbp_g17
01:44:09 108  ,gbp_g18
01:44:09 109  ,gbp_g19
01:44:09 110  ,gbp_g20
01:44:09 111  ,gbp_g21
01:44:09 112  ,gbp_g22
01:44:09 113  ,gbp_g23
01:44:09 114  ,gbp_g24
01:44:09 115  ,gbp_g25
01:44:09 116  ,gbp_g26
01:44:09 117  ,gbp_g27
01:44:09 118  ,gbp_g28
01:44:09 119  ,gbp_g29
01:44:09 120  ,gbp_g30
01:44:09 121  ,gbp_g31
01:44:09 122  ,gbp_g32
01:44:09 123  ,gbp_g33
01:44:09 124  ,gbp_g34
01:44:09 125  ,gbp_g35
01:44:09 126  ,gbp_g36
01:44:09 127  ,gbp_g37
01:44:09 128  ,gbp_g38
01:44:09 129  ,gbp_g39
01:44:09 130  ,gbp_g40
01:44:09 131  ,gbp_g41
01:44:09 132  ,jpy_g00
01:44:09 133  ,jpy_g01
01:44:09 134  ,jpy_g02
01:44:09 135  ,jpy_g03
01:44:09 136  ,jpy_g04
01:44:09 137  ,jpy_g05
01:44:09 138  ,jpy_g06
01:44:09 139  ,jpy_g07
01:44:09 140  ,jpy_g08
01:44:09 141  ,jpy_g09
01:44:09 142  ,jpy_g10
01:44:09 143  ,jpy_g11
01:44:09 144  ,jpy_g12
01:44:09 145  ,jpy_g13
01:44:09 146  ,jpy_g14
01:44:09 147  ,jpy_g15
01:44:09 148  ,jpy_g16
01:44:09 149  ,jpy_g17
01:44:09 150  ,jpy_g18
01:44:09 151  ,jpy_g19
01:44:09 152  ,jpy_g20
01:44:09 153  ,jpy_g21
01:44:09 154  ,jpy_g22
01:44:09 155  ,jpy_g23
01:44:09 156  ,jpy_g24
01:44:09 157  ,jpy_g25
01:44:09 158  ,jpy_g26
01:44:09 159  ,jpy_g27
01:44:09 160  ,jpy_g28
01:44:09 161  ,jpy_g29
01:44:09 162  ,jpy_g30
01:44:09 163  ,jpy_g31
01:44:09 164  ,jpy_g32
01:44:09 165  ,jpy_g33
01:44:09 166  ,jpy_g34
01:44:09 167  ,jpy_g35
01:44:09 168  ,jpy_g36
01:44:09 169  ,jpy_g37
01:44:09 170  ,jpy_g38
01:44:09 171  ,jpy_g39
01:44:09 172  ,jpy_g40
01:44:09 173  ,jpy_g41
01:44:09 174  ,cad_g00
01:44:09 175  ,cad_g01
01:44:09 176  ,cad_g02
01:44:09 177  ,cad_g03
01:44:09 178  ,cad_g04
01:44:09 179  ,cad_g05
01:44:09 180  ,cad_g06
01:44:09 181  ,cad_g07
01:44:09 182  ,cad_g08
01:44:09 183  ,cad_g09
01:44:09 184  ,cad_g10
01:44:09 185  ,cad_g11
01:44:09 186  ,cad_g12
01:44:09 187  ,cad_g13
01:44:09 188  ,cad_g14
01:44:09 189  ,cad_g15
01:44:09 190  ,cad_g16
01:44:09 191  ,cad_g17
01:44:09 192  ,cad_g18
01:44:09 193  ,cad_g19
01:44:09 194  ,cad_g20
01:44:09 195  ,cad_g21
01:44:09 196  ,cad_g22
01:44:09 197  ,cad_g23
01:44:09 198  ,cad_g24
01:44:09 199  ,cad_g25
01:44:09 200  ,cad_g26
01:44:09 201  ,cad_g27
01:44:09 202  ,cad_g28
01:44:09 203  ,cad_g29
01:44:09 204  ,cad_g30
01:44:09 205  ,cad_g31
01:44:09 206  ,cad_g32
01:44:09 207  ,cad_g33
01:44:09 208  ,cad_g34
01:44:09 209  ,cad_g35
01:44:09 210  ,cad_g36
01:44:09 211  ,cad_g37
01:44:09 212  ,cad_g38
01:44:09 213  ,cad_g39
01:44:09 214  ,cad_g40
01:44:09 215  ,cad_g41
01:44:09 216  ,chf_g00
01:44:09 217  ,chf_g01
01:44:09 218  ,chf_g02
01:44:09 219  ,chf_g03
01:44:09 220  ,chf_g04
01:44:09 221  ,chf_g05
01:44:09 222  ,chf_g06
01:44:09 223  ,chf_g07
01:44:09 224  ,chf_g08
01:44:09 225  ,chf_g09
01:44:09 226  ,chf_g10
01:44:09 227  ,chf_g11
01:44:09 228  ,chf_g12
01:44:09 229  ,chf_g13
01:44:09 230  ,chf_g14
01:44:09 231  ,chf_g15
01:44:09 232  ,chf_g16
01:44:09 233  ,chf_g17
01:44:09 234  ,chf_g18
01:44:09 235  ,chf_g19
01:44:09 236  ,chf_g20
01:44:09 237  ,chf_g21
01:44:09 238  ,chf_g22
01:44:09 239  ,chf_g23
01:44:09 240  ,chf_g24
01:44:09 241  ,chf_g25
01:44:09 242  ,chf_g26
01:44:09 243  ,chf_g27
01:44:09 244  ,chf_g28
01:44:09 245  ,chf_g29
01:44:09 246  ,chf_g30
01:44:09 247  ,chf_g31
01:44:09 248  ,chf_g32
01:44:09 249  ,chf_g33
01:44:09 250  ,chf_g34
01:44:09 251  ,chf_g35
01:44:09 252  ,chf_g36
01:44:09 253  ,chf_g37
01:44:09 254  ,chf_g38
01:44:09 255  ,chf_g39
01:44:09 256  ,chf_g40
01:44:09 257  ,chf_g41
01:44:09 258  FROM aud_ms6 m
01:44:09 259  WHERE m.ydate = '&1'||' '||'&2'
01:44:09 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2011-01-05'||' '||'01:30:00'

View created.

Elapsed: 00:00:00.13
01:44:09 SQL> 
01:44:09 SQL> -- rpt
01:44:09 SQL> -- We should see just 1 row:
01:44:09 SQL> 
01:44:09 SQL> SELECT COUNT(prdate) FROM sme
01:44:09   2  
01:44:09 SQL> -- Build the model:
01:44:09 SQL> CREATE OR REPLACE VIEW bme AS
01:44:09   2  SELECT
01:44:09   3  'aud'||m.ydate prdate
01:44:09   4  ,gatt
01:44:09   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
01:44:09   6  ,eur_g00
01:44:09   7  ,eur_g01
01:44:09   8  ,eur_g02
01:44:09   9  ,eur_g03
01:44:09  10  ,eur_g04
01:44:09  11  ,eur_g05
01:44:09  12  ,eur_g06
01:44:09  13  ,eur_g07
01:44:09  14  ,eur_g08
01:44:09  15  ,eur_g09
01:44:09  16  ,eur_g10
01:44:09  17  ,eur_g11
01:44:09  18  ,eur_g12
01:44:09  19  ,eur_g13
01:44:09  20  ,eur_g14
01:44:09  21  ,eur_g15
01:44:09  22  ,eur_g16
01:44:09  23  ,eur_g17
01:44:09  24  ,eur_g18
01:44:09  25  ,eur_g19
01:44:09  26  ,eur_g20
01:44:09  27  ,eur_g21
01:44:09  28  ,eur_g22
01:44:09  29  ,eur_g23
01:44:09  30  ,eur_g24
01:44:09  31  ,eur_g25
01:44:09  32  ,eur_g26
01:44:09  33  ,eur_g27
01:44:09  34  ,eur_g28
01:44:09  35  ,eur_g29
01:44:09  36  ,eur_g30
01:44:09  37  ,eur_g31
01:44:09  38  ,eur_g32
01:44:09  39  ,eur_g33
01:44:09  40  ,eur_g34
01:44:09  41  ,eur_g35
01:44:09  42  ,eur_g36
01:44:09  43  ,eur_g37
01:44:09  44  ,eur_g38
01:44:09  45  ,eur_g39
01:44:09  46  ,eur_g40
01:44:09  47  ,eur_g41
01:44:09  48  ,aud_g00
01:44:09  49  ,aud_g01
01:44:09  50  ,aud_g02
01:44:09  51  ,aud_g03
01:44:09  52  ,aud_g04
01:44:09  53  ,aud_g05
01:44:09  54  ,aud_g06
01:44:09  55  ,aud_g07
01:44:09  56  ,aud_g08
01:44:09  57  ,aud_g09
01:44:09  58  ,aud_g10
01:44:09  59  ,aud_g11
01:44:09  60  ,aud_g12
01:44:09  61  ,aud_g13
01:44:09  62  ,aud_g14
01:44:09  63  ,aud_g15
01:44:09  64  ,aud_g16
01:44:09  65  ,aud_g17
01:44:09  66  ,aud_g18
01:44:09  67  ,aud_g19
01:44:09  68  ,aud_g20
01:44:09  69  ,aud_g21
01:44:09  70  ,aud_g22
01:44:09  71  ,aud_g23
01:44:09  72  ,aud_g24
01:44:09  73  ,aud_g25
01:44:09  74  ,aud_g26
01:44:09  75  ,aud_g27
01:44:09  76  ,aud_g28
01:44:09  77  ,aud_g29
01:44:09  78  ,aud_g30
01:44:09  79  ,aud_g31
01:44:09  80  ,aud_g32
01:44:09  81  ,aud_g33
01:44:09  82  ,aud_g34
01:44:09  83  ,aud_g35
01:44:09  84  ,aud_g36
01:44:09  85  ,aud_g37
01:44:09  86  ,aud_g38
01:44:09  87  ,aud_g39
01:44:09  88  ,aud_g40
01:44:09  89  ,aud_g41
01:44:09  90  ,gbp_g00
01:44:09  91  ,gbp_g01
01:44:09  92  ,gbp_g02
01:44:09  93  ,gbp_g03
01:44:09  94  ,gbp_g04
01:44:09  95  ,gbp_g05
01:44:09  96  ,gbp_g06
01:44:09  97  ,gbp_g07
01:44:09  98  ,gbp_g08
01:44:09  99  ,gbp_g09
01:44:09 100  ,gbp_g10
01:44:09 101  ,gbp_g11
01:44:09 102  ,gbp_g12
01:44:09 103  ,gbp_g13
01:44:09 104  ,gbp_g14
01:44:09 105  ,gbp_g15
01:44:09 106  ,gbp_g16
01:44:09 107  ,gbp_g17
01:44:09 108  ,gbp_g18
01:44:09 109  ,gbp_g19
01:44:09 110  ,gbp_g20
01:44:09 111  ,gbp_g21
01:44:09 112  ,gbp_g22
01:44:09 113  ,gbp_g23
01:44:09 114  ,gbp_g24
01:44:09 115  ,gbp_g25
01:44:09 116  ,gbp_g26
01:44:09 117  ,gbp_g27
01:44:09 118  ,gbp_g28
01:44:09 119  ,gbp_g29
01:44:09 120  ,gbp_g30
01:44:09 121  ,gbp_g31
01:44:09 122  ,gbp_g32
01:44:09 123  ,gbp_g33
01:44:09 124  ,gbp_g34
01:44:09 125  ,gbp_g35
01:44:09 126  ,gbp_g36
01:44:09 127  ,gbp_g37
01:44:09 128  ,gbp_g38
01:44:09 129  ,gbp_g39
01:44:09 130  ,gbp_g40
01:44:09 131  ,gbp_g41
01:44:09 132  ,jpy_g00
01:44:09 133  ,jpy_g01
01:44:09 134  ,jpy_g02
01:44:09 135  ,jpy_g03
01:44:09 136  ,jpy_g04
01:44:09 137  ,jpy_g05
01:44:09 138  ,jpy_g06
01:44:09 139  ,jpy_g07
01:44:09 140  ,jpy_g08
01:44:09 141  ,jpy_g09
01:44:09 142  ,jpy_g10
01:44:09 143  ,jpy_g11
01:44:09 144  ,jpy_g12
01:44:09 145  ,jpy_g13
01:44:09 146  ,jpy_g14
01:44:09 147  ,jpy_g15
01:44:09 148  ,jpy_g16
01:44:09 149  ,jpy_g17
01:44:09 150  ,jpy_g18
01:44:09 151  ,jpy_g19
01:44:09 152  ,jpy_g20
01:44:09 153  ,jpy_g21
01:44:09 154  ,jpy_g22
01:44:09 155  ,jpy_g23
01:44:09 156  ,jpy_g24
01:44:09 157  ,jpy_g25
01:44:09 158  ,jpy_g26
01:44:09 159  ,jpy_g27
01:44:09 160  ,jpy_g28
01:44:09 161  ,jpy_g29
01:44:09 162  ,jpy_g30
01:44:09 163  ,jpy_g31
01:44:09 164  ,jpy_g32
01:44:09 165  ,jpy_g33
01:44:09 166  ,jpy_g34
01:44:09 167  ,jpy_g35
01:44:09 168  ,jpy_g36
01:44:09 169  ,jpy_g37
01:44:09 170  ,jpy_g38
01:44:09 171  ,jpy_g39
01:44:09 172  ,jpy_g40
01:44:09 173  ,jpy_g41
01:44:09 174  ,cad_g00
01:44:09 175  ,cad_g01
01:44:09 176  ,cad_g02
01:44:09 177  ,cad_g03
01:44:09 178  ,cad_g04
01:44:09 179  ,cad_g05
01:44:09 180  ,cad_g06
01:44:09 181  ,cad_g07
01:44:09 182  ,cad_g08
01:44:09 183  ,cad_g09
01:44:09 184  ,cad_g10
01:44:09 185  ,cad_g11
01:44:09 186  ,cad_g12
01:44:09 187  ,cad_g13
01:44:09 188  ,cad_g14
01:44:09 189  ,cad_g15
01:44:09 190  ,cad_g16
01:44:09 191  ,cad_g17
01:44:09 192  ,cad_g18
01:44:09 193  ,cad_g19
01:44:09 194  ,cad_g20
01:44:09 195  ,cad_g21
01:44:09 196  ,cad_g22
01:44:09 197  ,cad_g23
01:44:09 198  ,cad_g24
01:44:09 199  ,cad_g25
01:44:09 200  ,cad_g26
01:44:09 201  ,cad_g27
01:44:09 202  ,cad_g28
01:44:09 203  ,cad_g29
01:44:09 204  ,cad_g30
01:44:09 205  ,cad_g31
01:44:09 206  ,cad_g32
01:44:09 207  ,cad_g33
01:44:09 208  ,cad_g34
01:44:09 209  ,cad_g35
01:44:09 210  ,cad_g36
01:44:09 211  ,cad_g37
01:44:09 212  ,cad_g38
01:44:09 213  ,cad_g39
01:44:09 214  ,cad_g40
01:44:09 215  ,cad_g41
01:44:09 216  ,chf_g00
01:44:09 217  ,chf_g01
01:44:09 218  ,chf_g02
01:44:09 219  ,chf_g03
01:44:09 220  ,chf_g04
01:44:09 221  ,chf_g05
01:44:09 222  ,chf_g06
01:44:09 223  ,chf_g07
01:44:09 224  ,chf_g08
01:44:09 225  ,chf_g09
01:44:09 226  ,chf_g10
01:44:09 227  ,chf_g11
01:44:09 228  ,chf_g12
01:44:09 229  ,chf_g13
01:44:09 230  ,chf_g14
01:44:09 231  ,chf_g15
01:44:09 232  ,chf_g16
01:44:09 233  ,chf_g17
01:44:09 234  ,chf_g18
01:44:09 235  ,chf_g19
01:44:09 236  ,chf_g20
01:44:09 237  ,chf_g21
01:44:09 238  ,chf_g22
01:44:09 239  ,chf_g23
01:44:09 240  ,chf_g24
01:44:09 241  ,chf_g25
01:44:09 242  ,chf_g26
01:44:09 243  ,chf_g27
01:44:09 244  ,chf_g28
01:44:09 245  ,chf_g29
01:44:09 246  ,chf_g30
01:44:09 247  ,chf_g31
01:44:09 248  ,chf_g32
01:44:09 249  ,chf_g33
01:44:09 250  ,chf_g34
01:44:09 251  ,chf_g35
01:44:09 252  ,chf_g36
01:44:09 253  ,chf_g37
01:44:09 254  ,chf_g38
01:44:09 255  ,chf_g39
01:44:09 256  ,chf_g40
01:44:09 257  ,chf_g41
01:44:09 258  FROM aud_ms6 m
01:44:09 259  WHERE gatt IN('nup','up')
01:44:09 260  AND 1+m.ydate < '&1'||' '||'&2'
01:44:09 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2011-01-05'||' '||'01:30:00'

View created.

Elapsed: 00:00:00.14
01:44:10 SQL> 
01:44:10 SQL> -- rpt
01:44:10 SQL> 
01:44:10 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt
01:44:10   2  
01:44:10 SQL> SELECT MAX(prdate) FROM bme
01:44:10   2  
01:44:10 SQL> -- Now build model from bme and score sme
01:44:10 SQL> @score1.sql
01:44:10 SQL> -- score1.sql
01:44:10 SQL> 
01:44:10 SQL> -- Does the 1st SVM score
01:44:10 SQL> 
01:44:10 SQL> -- Fill up svmc_apply_prep
01:44:10 SQL> @score.sql
01:44:10 SQL> --
01:44:10 SQL> -- score.sql
01:44:10 SQL> --
01:44:10 SQL> 
01:44:10 SQL> -- usage: score.sql
01:44:10 SQL> 
01:44:10 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
01:44:10 SQL> 
01:44:10 SQL> DEFINE target	= 'gatt'
01:44:10 SQL> DEFINE model_name = 'forex15'
01:44:10 SQL> DEFINE bldtable	= 'bme'
01:44:10 SQL> DEFINE scoretable = 'sme'
01:44:10 SQL> DEFINE case_id	= 'prdate'
01:44:10 SQL> 
01:44:10 SQL> -- Define a variable to help me exclude some columns from some data mining calls
01:44:10 SQL> DEFINE exclude1 = "'&target','&case_id'"
01:44:10 SQL> 
01:44:10 SQL> -- Builds an SVM model using pl/sql.
01:44:10 SQL> 
01:44:10 SQL> -----------------------------------------------------------------------
01:44:10 SQL> --			    BUILD THE MODEL
01:44:10 SQL> -----------------------------------------------------------------------
01:44:10 SQL> 
01:44:10 SQL> -- Cleanup old build data preparation objects for repeat runs
01:44:10 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.01
01:44:10 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
01:44:10 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.03
01:44:10 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.01
01:44:10 SQL> 
01:44:10 SQL> 
01:44:10 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
01:44:10 SQL> --
01:44:10 SQL> -- DROP	TABLE svmc_settings ;
01:44:10 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
01:44:10 SQL> -- DELETE svmc_settings;
01:44:10 SQL> 
01:44:10 SQL> -- The default classification algorithm is Naive Bayes. So override
01:44:10 SQL> -- this choice to SVM using a settings table.
01:44:10 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
01:44:10 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
01:44:10 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
01:44:10 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
01:44:10 SQL> -- models.
01:44:10 SQL> --
01:44:10 SQL> 
01:44:10 SQL> -- Do this once and then comment it out.
01:44:10 SQL> -- That makes script go faster.
01:44:10 SQL> -- BEGIN
01:44:10 SQL> -- -- Populate settings table
01:44:10 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
01:44:10 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
01:44:10 SQL> --
01:44:10 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
01:44:10 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
01:44:10 SQL> --
01:44:10 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
01:44:10 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
01:44:10 SQL> --   COMMIT;
01:44:10 SQL> -- END;
01:44:10 SQL> -- /
01:44:10 SQL> 
01:44:10 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
01:44:10 SQL> 
01:44:10 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
01:44:10   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:44:10   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
01:44:10 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
01:44:10   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:44:10   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
01:44:10 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
01:44:10   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:44:10   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
01:44:10 SQL> 
01:44:10 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
01:44:10   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:44:10   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
01:44:10 SQL> 
01:44:10 SQL> --------------------------------
01:44:10 SQL> -- PREPARE BUILD (TRAINING) DATA
01:44:10 SQL> --
01:44:10 SQL> 
01:44:10 SQL> -- 1. Missing Value treatment for all Predictors and
01:44:10 SQL> -- 2. Outlier Treatment and
01:44:10 SQL> -- 3. Normalization are performed below.
01:44:10 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
01:44:10 SQL> --    normalized here.
01:44:10 SQL> 
01:44:10 SQL> BEGIN
01:44:10   2  	-- Perform missing value treatment for all predictors
01:44:10   3  	-- create miss tables
01:44:10   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
01:44:10   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
01:44:10   6  
01:44:10   7  	-- populate miss tables
01:44:10   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
01:44:10   9  	  miss_table_name => 'svmc_miss_num',
01:44:10  10  	  data_table_name => '&bldtable',
01:44:10  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
01:44:10  12  
01:44:10  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
01:44:10  14  	  miss_table_name => 'svmc_miss_cat',
01:44:10  15  	  data_table_name => '&bldtable',
01:44:10  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
01:44:10  17  
01:44:10  18  	-- xform input data to replace missing values
01:44:10  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
01:44:10  20  	  miss_table_name => 'svmc_miss_num',
01:44:10  21  	  data_table_name => '&bldtable',
01:44:10  22  	  xform_view_name => 'xformed_build_miss_num');
01:44:10  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
01:44:10  24  	  miss_table_name => 'svmc_miss_cat',
01:44:10  25  	  data_table_name => '&bldtable',
01:44:10  26  	  xform_view_name => 'xformed_build_miss_cat');
01:44:10  27  
01:44:10  28  	-- Perform outlier treatment.
01:44:10  29  	-- create clip table
01:44:10  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
01:44:10  31  
01:44:10  32  	-- populate clip table
01:44:10  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
01:44:10  34  	  clip_table_name => 'svmc_clip',
01:44:10  35  	  data_table_name => '&bldtable',
01:44:10  36  	  tail_frac	  => 0.025,
01:44:10  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
01:44:10  38  
01:44:10  39  	-- xform input data to winsorized data
01:44:10  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
01:44:10  41  	  clip_table_name => 'svmc_clip',
01:44:10  42  	  data_table_name => '&bldtable',
01:44:10  43  	  xform_view_name => 'svmc_winsor');
01:44:10  44  
01:44:10  45  	-- create normalization table
01:44:10  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
01:44:10  47  
01:44:10  48  	-- populate normalization table based on winsorized data
01:44:10  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
01:44:10  50  	  norm_table_name => 'svmc_norm',
01:44:10  51  	  data_table_name => 'svmc_winsor',
01:44:10  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
01:44:10  53  
01:44:10  54  	-- normalize the original data
01:44:10  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
01:44:10  56  	  norm_table_name => 'svmc_norm',
01:44:10  57  	  data_table_name => '&bldtable',
01:44:10  58  	  xform_view_name => 'svmc_build_prep');
01:44:10  59  END;
01:44:10  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:18.14
01:44:28 SQL> 
01:44:28 SQL> ---------------------
01:44:28 SQL> -- CREATE A NEW MODEL
01:44:28 SQL> --
01:44:28 SQL> -- Cleanup old model with the same name for repeat runs
01:44:28 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
01:44:28   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:44:28   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex15');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.93
01:44:29 SQL> 
01:44:29 SQL> -- Build a new SVM Model
01:44:29 SQL> BEGIN
01:44:29   2  	DBMS_DATA_MINING.CREATE_MODEL(
01:44:29   3  	  model_name	      => '&model_name',
01:44:29   4  	  mining_function     => dbms_data_mining.classification,
01:44:29   5  	  data_table_name     => 'svmc_build_prep',
01:44:29   6  	  case_id_column_name => '&case_id',
01:44:29   7  	  target_column_name  => '&target',
01:44:29   8  	  settings_table_name => 'svmc_settings');
01:44:29   9  END;
01:44:29  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex15',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:27.58
01:44:57 SQL> 
01:44:57 SQL> -----------------------------------------------------------------------
01:44:57 SQL> --			       APPLY/score THE MODEL
01:44:57 SQL> -----------------------------------------------------------------------
01:44:57 SQL> 
01:44:57 SQL> -- Cleanup old scoring data preparation objects for repeat runs
01:44:57 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
01:44:57   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:44:57   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
01:44:57 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
01:44:57   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:44:57   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
01:44:57 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
01:44:57   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:44:57   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
01:44:57 SQL> -----------------------
01:44:57 SQL> -- PREPARE SCORING DATA
01:44:57 SQL> --
01:44:57 SQL> -- If the data for model creation has been prepared, then the data
01:44:57 SQL> -- to be scored using the model must be prepared in the same manner
01:44:57 SQL> -- in order to obtain meaningful results.
01:44:57 SQL> --
01:44:57 SQL> -- 1. Missing Value treatment for all Predictors and
01:44:57 SQL> -- 2. Normalization
01:44:57 SQL> -- No outlier treatment will be performed during test and apply. The
01:44:57 SQL> -- normalization step is sufficient, since the normalization parameters
01:44:57 SQL> -- already capture the effects of outlier treatment done with build data.
01:44:57 SQL> --
01:44:57 SQL> BEGIN
01:44:57   2  	-- Xform Test data to replace missing values
01:44:57   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
01:44:57   4  	  miss_table_name => 'svmc_miss_num',
01:44:57   5  	  data_table_name => '&scoretable',
01:44:57   6  	  xform_view_name => 'xformed_apply_miss_num');
01:44:57   7  
01:44:57   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
01:44:57   9  	  miss_table_name => 'svmc_miss_cat',
01:44:57  10  	  data_table_name => '&scoretable',
01:44:57  11  	  xform_view_name => 'xformed_apply_miss_cat');
01:44:57  12  
01:44:57  13  	-- Normalize the data to be scored
01:44:57  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
01:44:57  15  	  norm_table_name => 'svmc_norm',
01:44:57  16  	  data_table_name => '&scoretable',
01:44:57  17  	  xform_view_name => 'svmc_apply_prep');
01:44:57  18  END;
01:44:57  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.22
01:44:58 SQL> 
01:44:58 SQL> -- Use same model_name used in score.sql
01:44:58 SQL> DEFINE model_name = 'forex15'
01:44:58 SQL> 
01:44:58 SQL> -- CREATE TABLE fxscores6 (prdate VARCHAR2(30),score NUMBER,rundate DATE,pair VARCHAR2(8),ydate DATE);
01:44:58 SQL> 
01:44:58 SQL> DELETE fxscores6 WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.03
01:44:58 SQL> 
01:44:58 SQL> INSERT INTO fxscores6 (prdate,score,rundate,pair,ydate)
01:44:58   2  SELECT
01:44:58   3  prdate
01:44:58   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
01:44:58   5  ,sysdate
01:44:58   6  ,SUBSTR(prdate,1,3)pair
01:44:58   7  ,SUBSTR(prdate,4,19)ydate
01:44:58   8  FROM svmc_apply_prep
01:44:58   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex15,'up' USING *)score

1 row created.

Elapsed: 00:00:00.17
01:44:58 SQL> @aud_score1day.sql  2011-01-05 01:35:00
01:44:58 SQL> --
01:44:58 SQL> -- aud_score1day.sql
01:44:58 SQL> --
01:44:58 SQL> 
01:44:58 SQL> CREATE OR REPLACE VIEW sme AS
01:44:58   2  SELECT
01:44:58   3  'aud'||m.ydate prdate
01:44:58   4  ,NULL gatt
01:44:58   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
01:44:58   6  ,eur_g00
01:44:58   7  ,eur_g01
01:44:58   8  ,eur_g02
01:44:58   9  ,eur_g03
01:44:58  10  ,eur_g04
01:44:58  11  ,eur_g05
01:44:58  12  ,eur_g06
01:44:58  13  ,eur_g07
01:44:58  14  ,eur_g08
01:44:58  15  ,eur_g09
01:44:58  16  ,eur_g10
01:44:58  17  ,eur_g11
01:44:58  18  ,eur_g12
01:44:58  19  ,eur_g13
01:44:58  20  ,eur_g14
01:44:58  21  ,eur_g15
01:44:58  22  ,eur_g16
01:44:58  23  ,eur_g17
01:44:58  24  ,eur_g18
01:44:58  25  ,eur_g19
01:44:58  26  ,eur_g20
01:44:58  27  ,eur_g21
01:44:58  28  ,eur_g22
01:44:58  29  ,eur_g23
01:44:58  30  ,eur_g24
01:44:58  31  ,eur_g25
01:44:58  32  ,eur_g26
01:44:58  33  ,eur_g27
01:44:58  34  ,eur_g28
01:44:58  35  ,eur_g29
01:44:58  36  ,eur_g30
01:44:58  37  ,eur_g31
01:44:58  38  ,eur_g32
01:44:58  39  ,eur_g33
01:44:58  40  ,eur_g34
01:44:58  41  ,eur_g35
01:44:58  42  ,eur_g36
01:44:58  43  ,eur_g37
01:44:58  44  ,eur_g38
01:44:58  45  ,eur_g39
01:44:58  46  ,eur_g40
01:44:58  47  ,eur_g41
01:44:58  48  ,aud_g00
01:44:58  49  ,aud_g01
01:44:58  50  ,aud_g02
01:44:58  51  ,aud_g03
01:44:58  52  ,aud_g04
01:44:58  53  ,aud_g05
01:44:58  54  ,aud_g06
01:44:58  55  ,aud_g07
01:44:58  56  ,aud_g08
01:44:58  57  ,aud_g09
01:44:58  58  ,aud_g10
01:44:58  59  ,aud_g11
01:44:58  60  ,aud_g12
01:44:58  61  ,aud_g13
01:44:58  62  ,aud_g14
01:44:58  63  ,aud_g15
01:44:58  64  ,aud_g16
01:44:58  65  ,aud_g17
01:44:58  66  ,aud_g18
01:44:58  67  ,aud_g19
01:44:58  68  ,aud_g20
01:44:58  69  ,aud_g21
01:44:58  70  ,aud_g22
01:44:58  71  ,aud_g23
01:44:58  72  ,aud_g24
01:44:58  73  ,aud_g25
01:44:58  74  ,aud_g26
01:44:58  75  ,aud_g27
01:44:58  76  ,aud_g28
01:44:58  77  ,aud_g29
01:44:58  78  ,aud_g30
01:44:58  79  ,aud_g31
01:44:58  80  ,aud_g32
01:44:58  81  ,aud_g33
01:44:58  82  ,aud_g34
01:44:58  83  ,aud_g35
01:44:58  84  ,aud_g36
01:44:58  85  ,aud_g37
01:44:58  86  ,aud_g38
01:44:58  87  ,aud_g39
01:44:58  88  ,aud_g40
01:44:58  89  ,aud_g41
01:44:58  90  ,gbp_g00
01:44:58  91  ,gbp_g01
01:44:58  92  ,gbp_g02
01:44:58  93  ,gbp_g03
01:44:58  94  ,gbp_g04
01:44:58  95  ,gbp_g05
01:44:58  96  ,gbp_g06
01:44:58  97  ,gbp_g07
01:44:58  98  ,gbp_g08
01:44:58  99  ,gbp_g09
01:44:58 100  ,gbp_g10
01:44:58 101  ,gbp_g11
01:44:58 102  ,gbp_g12
01:44:58 103  ,gbp_g13
01:44:58 104  ,gbp_g14
01:44:58 105  ,gbp_g15
01:44:58 106  ,gbp_g16
01:44:58 107  ,gbp_g17
01:44:58 108  ,gbp_g18
01:44:58 109  ,gbp_g19
01:44:58 110  ,gbp_g20
01:44:58 111  ,gbp_g21
01:44:58 112  ,gbp_g22
01:44:58 113  ,gbp_g23
01:44:58 114  ,gbp_g24
01:44:58 115  ,gbp_g25
01:44:58 116  ,gbp_g26
01:44:58 117  ,gbp_g27
01:44:58 118  ,gbp_g28
01:44:58 119  ,gbp_g29
01:44:58 120  ,gbp_g30
01:44:58 121  ,gbp_g31
01:44:58 122  ,gbp_g32
01:44:58 123  ,gbp_g33
01:44:58 124  ,gbp_g34
01:44:58 125  ,gbp_g35
01:44:58 126  ,gbp_g36
01:44:58 127  ,gbp_g37
01:44:58 128  ,gbp_g38
01:44:58 129  ,gbp_g39
01:44:58 130  ,gbp_g40
01:44:58 131  ,gbp_g41
01:44:58 132  ,jpy_g00
01:44:58 133  ,jpy_g01
01:44:58 134  ,jpy_g02
01:44:58 135  ,jpy_g03
01:44:58 136  ,jpy_g04
01:44:58 137  ,jpy_g05
01:44:58 138  ,jpy_g06
01:44:58 139  ,jpy_g07
01:44:58 140  ,jpy_g08
01:44:58 141  ,jpy_g09
01:44:58 142  ,jpy_g10
01:44:58 143  ,jpy_g11
01:44:58 144  ,jpy_g12
01:44:58 145  ,jpy_g13
01:44:58 146  ,jpy_g14
01:44:58 147  ,jpy_g15
01:44:58 148  ,jpy_g16
01:44:58 149  ,jpy_g17
01:44:58 150  ,jpy_g18
01:44:58 151  ,jpy_g19
01:44:58 152  ,jpy_g20
01:44:58 153  ,jpy_g21
01:44:58 154  ,jpy_g22
01:44:58 155  ,jpy_g23
01:44:58 156  ,jpy_g24
01:44:58 157  ,jpy_g25
01:44:58 158  ,jpy_g26
01:44:58 159  ,jpy_g27
01:44:58 160  ,jpy_g28
01:44:58 161  ,jpy_g29
01:44:58 162  ,jpy_g30
01:44:58 163  ,jpy_g31
01:44:58 164  ,jpy_g32
01:44:58 165  ,jpy_g33
01:44:58 166  ,jpy_g34
01:44:58 167  ,jpy_g35
01:44:58 168  ,jpy_g36
01:44:58 169  ,jpy_g37
01:44:58 170  ,jpy_g38
01:44:58 171  ,jpy_g39
01:44:58 172  ,jpy_g40
01:44:58 173  ,jpy_g41
01:44:58 174  ,cad_g00
01:44:58 175  ,cad_g01
01:44:58 176  ,cad_g02
01:44:58 177  ,cad_g03
01:44:58 178  ,cad_g04
01:44:58 179  ,cad_g05
01:44:58 180  ,cad_g06
01:44:58 181  ,cad_g07
01:44:58 182  ,cad_g08
01:44:58 183  ,cad_g09
01:44:58 184  ,cad_g10
01:44:58 185  ,cad_g11
01:44:58 186  ,cad_g12
01:44:58 187  ,cad_g13
01:44:58 188  ,cad_g14
01:44:58 189  ,cad_g15
01:44:58 190  ,cad_g16
01:44:58 191  ,cad_g17
01:44:58 192  ,cad_g18
01:44:58 193  ,cad_g19
01:44:58 194  ,cad_g20
01:44:58 195  ,cad_g21
01:44:58 196  ,cad_g22
01:44:58 197  ,cad_g23
01:44:58 198  ,cad_g24
01:44:58 199  ,cad_g25
01:44:58 200  ,cad_g26
01:44:58 201  ,cad_g27
01:44:58 202  ,cad_g28
01:44:58 203  ,cad_g29
01:44:58 204  ,cad_g30
01:44:58 205  ,cad_g31
01:44:58 206  ,cad_g32
01:44:58 207  ,cad_g33
01:44:58 208  ,cad_g34
01:44:58 209  ,cad_g35
01:44:58 210  ,cad_g36
01:44:58 211  ,cad_g37
01:44:58 212  ,cad_g38
01:44:58 213  ,cad_g39
01:44:58 214  ,cad_g40
01:44:58 215  ,cad_g41
01:44:58 216  ,chf_g00
01:44:58 217  ,chf_g01
01:44:58 218  ,chf_g02
01:44:58 219  ,chf_g03
01:44:58 220  ,chf_g04
01:44:58 221  ,chf_g05
01:44:58 222  ,chf_g06
01:44:58 223  ,chf_g07
01:44:58 224  ,chf_g08
01:44:58 225  ,chf_g09
01:44:58 226  ,chf_g10
01:44:58 227  ,chf_g11
01:44:58 228  ,chf_g12
01:44:58 229  ,chf_g13
01:44:58 230  ,chf_g14
01:44:58 231  ,chf_g15
01:44:58 232  ,chf_g16
01:44:58 233  ,chf_g17
01:44:58 234  ,chf_g18
01:44:58 235  ,chf_g19
01:44:58 236  ,chf_g20
01:44:58 237  ,chf_g21
01:44:58 238  ,chf_g22
01:44:58 239  ,chf_g23
01:44:58 240  ,chf_g24
01:44:58 241  ,chf_g25
01:44:58 242  ,chf_g26
01:44:58 243  ,chf_g27
01:44:58 244  ,chf_g28
01:44:58 245  ,chf_g29
01:44:58 246  ,chf_g30
01:44:58 247  ,chf_g31
01:44:58 248  ,chf_g32
01:44:58 249  ,chf_g33
01:44:58 250  ,chf_g34
01:44:58 251  ,chf_g35
01:44:58 252  ,chf_g36
01:44:58 253  ,chf_g37
01:44:58 254  ,chf_g38
01:44:58 255  ,chf_g39
01:44:58 256  ,chf_g40
01:44:58 257  ,chf_g41
01:44:58 258  FROM aud_ms6 m
01:44:58 259  WHERE m.ydate = '&1'||' '||'&2'
01:44:58 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2011-01-05'||' '||'01:35:00'

View created.

Elapsed: 00:00:00.12
01:44:58 SQL> 
01:44:58 SQL> -- rpt
01:44:58 SQL> -- We should see just 1 row:
01:44:58 SQL> 
01:44:58 SQL> SELECT COUNT(prdate) FROM sme
01:44:58   2  
01:44:58 SQL> -- Build the model:
01:44:58 SQL> CREATE OR REPLACE VIEW bme AS
01:44:58   2  SELECT
01:44:58   3  'aud'||m.ydate prdate
01:44:58   4  ,gatt
01:44:58   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
01:44:58   6  ,eur_g00
01:44:58   7  ,eur_g01
01:44:58   8  ,eur_g02
01:44:58   9  ,eur_g03
01:44:58  10  ,eur_g04
01:44:58  11  ,eur_g05
01:44:58  12  ,eur_g06
01:44:58  13  ,eur_g07
01:44:58  14  ,eur_g08
01:44:58  15  ,eur_g09
01:44:58  16  ,eur_g10
01:44:58  17  ,eur_g11
01:44:58  18  ,eur_g12
01:44:58  19  ,eur_g13
01:44:58  20  ,eur_g14
01:44:58  21  ,eur_g15
01:44:58  22  ,eur_g16
01:44:58  23  ,eur_g17
01:44:58  24  ,eur_g18
01:44:58  25  ,eur_g19
01:44:58  26  ,eur_g20
01:44:58  27  ,eur_g21
01:44:58  28  ,eur_g22
01:44:58  29  ,eur_g23
01:44:58  30  ,eur_g24
01:44:58  31  ,eur_g25
01:44:58  32  ,eur_g26
01:44:58  33  ,eur_g27
01:44:58  34  ,eur_g28
01:44:58  35  ,eur_g29
01:44:58  36  ,eur_g30
01:44:58  37  ,eur_g31
01:44:58  38  ,eur_g32
01:44:58  39  ,eur_g33
01:44:58  40  ,eur_g34
01:44:58  41  ,eur_g35
01:44:58  42  ,eur_g36
01:44:58  43  ,eur_g37
01:44:58  44  ,eur_g38
01:44:58  45  ,eur_g39
01:44:58  46  ,eur_g40
01:44:58  47  ,eur_g41
01:44:58  48  ,aud_g00
01:44:58  49  ,aud_g01
01:44:58  50  ,aud_g02
01:44:58  51  ,aud_g03
01:44:58  52  ,aud_g04
01:44:58  53  ,aud_g05
01:44:58  54  ,aud_g06
01:44:58  55  ,aud_g07
01:44:58  56  ,aud_g08
01:44:58  57  ,aud_g09
01:44:58  58  ,aud_g10
01:44:58  59  ,aud_g11
01:44:58  60  ,aud_g12
01:44:58  61  ,aud_g13
01:44:58  62  ,aud_g14
01:44:58  63  ,aud_g15
01:44:58  64  ,aud_g16
01:44:58  65  ,aud_g17
01:44:58  66  ,aud_g18
01:44:58  67  ,aud_g19
01:44:58  68  ,aud_g20
01:44:58  69  ,aud_g21
01:44:58  70  ,aud_g22
01:44:58  71  ,aud_g23
01:44:58  72  ,aud_g24
01:44:58  73  ,aud_g25
01:44:58  74  ,aud_g26
01:44:58  75  ,aud_g27
01:44:58  76  ,aud_g28
01:44:58  77  ,aud_g29
01:44:58  78  ,aud_g30
01:44:58  79  ,aud_g31
01:44:58  80  ,aud_g32
01:44:58  81  ,aud_g33
01:44:58  82  ,aud_g34
01:44:58  83  ,aud_g35
01:44:58  84  ,aud_g36
01:44:58  85  ,aud_g37
01:44:58  86  ,aud_g38
01:44:58  87  ,aud_g39
01:44:58  88  ,aud_g40
01:44:58  89  ,aud_g41
01:44:58  90  ,gbp_g00
01:44:58  91  ,gbp_g01
01:44:58  92  ,gbp_g02
01:44:58  93  ,gbp_g03
01:44:58  94  ,gbp_g04
01:44:58  95  ,gbp_g05
01:44:58  96  ,gbp_g06
01:44:58  97  ,gbp_g07
01:44:58  98  ,gbp_g08
01:44:58  99  ,gbp_g09
01:44:58 100  ,gbp_g10
01:44:58 101  ,gbp_g11
01:44:58 102  ,gbp_g12
01:44:58 103  ,gbp_g13
01:44:58 104  ,gbp_g14
01:44:58 105  ,gbp_g15
01:44:58 106  ,gbp_g16
01:44:58 107  ,gbp_g17
01:44:58 108  ,gbp_g18
01:44:58 109  ,gbp_g19
01:44:58 110  ,gbp_g20
01:44:58 111  ,gbp_g21
01:44:58 112  ,gbp_g22
01:44:58 113  ,gbp_g23
01:44:58 114  ,gbp_g24
01:44:58 115  ,gbp_g25
01:44:58 116  ,gbp_g26
01:44:58 117  ,gbp_g27
01:44:58 118  ,gbp_g28
01:44:58 119  ,gbp_g29
01:44:58 120  ,gbp_g30
01:44:58 121  ,gbp_g31
01:44:58 122  ,gbp_g32
01:44:58 123  ,gbp_g33
01:44:58 124  ,gbp_g34
01:44:58 125  ,gbp_g35
01:44:58 126  ,gbp_g36
01:44:58 127  ,gbp_g37
01:44:58 128  ,gbp_g38
01:44:58 129  ,gbp_g39
01:44:58 130  ,gbp_g40
01:44:58 131  ,gbp_g41
01:44:58 132  ,jpy_g00
01:44:58 133  ,jpy_g01
01:44:58 134  ,jpy_g02
01:44:58 135  ,jpy_g03
01:44:58 136  ,jpy_g04
01:44:58 137  ,jpy_g05
01:44:58 138  ,jpy_g06
01:44:58 139  ,jpy_g07
01:44:58 140  ,jpy_g08
01:44:58 141  ,jpy_g09
01:44:58 142  ,jpy_g10
01:44:58 143  ,jpy_g11
01:44:58 144  ,jpy_g12
01:44:58 145  ,jpy_g13
01:44:58 146  ,jpy_g14
01:44:58 147  ,jpy_g15
01:44:58 148  ,jpy_g16
01:44:58 149  ,jpy_g17
01:44:58 150  ,jpy_g18
01:44:58 151  ,jpy_g19
01:44:58 152  ,jpy_g20
01:44:58 153  ,jpy_g21
01:44:58 154  ,jpy_g22
01:44:58 155  ,jpy_g23
01:44:58 156  ,jpy_g24
01:44:58 157  ,jpy_g25
01:44:58 158  ,jpy_g26
01:44:58 159  ,jpy_g27
01:44:58 160  ,jpy_g28
01:44:58 161  ,jpy_g29
01:44:58 162  ,jpy_g30
01:44:58 163  ,jpy_g31
01:44:58 164  ,jpy_g32
01:44:58 165  ,jpy_g33
01:44:58 166  ,jpy_g34
01:44:58 167  ,jpy_g35
01:44:58 168  ,jpy_g36
01:44:58 169  ,jpy_g37
01:44:58 170  ,jpy_g38
01:44:58 171  ,jpy_g39
01:44:58 172  ,jpy_g40
01:44:58 173  ,jpy_g41
01:44:58 174  ,cad_g00
01:44:58 175  ,cad_g01
01:44:58 176  ,cad_g02
01:44:58 177  ,cad_g03
01:44:58 178  ,cad_g04
01:44:58 179  ,cad_g05
01:44:58 180  ,cad_g06
01:44:58 181  ,cad_g07
01:44:58 182  ,cad_g08
01:44:58 183  ,cad_g09
01:44:58 184  ,cad_g10
01:44:58 185  ,cad_g11
01:44:58 186  ,cad_g12
01:44:58 187  ,cad_g13
01:44:58 188  ,cad_g14
01:44:58 189  ,cad_g15
01:44:58 190  ,cad_g16
01:44:58 191  ,cad_g17
01:44:58 192  ,cad_g18
01:44:58 193  ,cad_g19
01:44:58 194  ,cad_g20
01:44:58 195  ,cad_g21
01:44:58 196  ,cad_g22
01:44:58 197  ,cad_g23
01:44:58 198  ,cad_g24
01:44:58 199  ,cad_g25
01:44:58 200  ,cad_g26
01:44:58 201  ,cad_g27
01:44:58 202  ,cad_g28
01:44:58 203  ,cad_g29
01:44:58 204  ,cad_g30
01:44:58 205  ,cad_g31
01:44:58 206  ,cad_g32
01:44:58 207  ,cad_g33
01:44:58 208  ,cad_g34
01:44:58 209  ,cad_g35
01:44:58 210  ,cad_g36
01:44:58 211  ,cad_g37
01:44:58 212  ,cad_g38
01:44:58 213  ,cad_g39
01:44:58 214  ,cad_g40
01:44:58 215  ,cad_g41
01:44:58 216  ,chf_g00
01:44:58 217  ,chf_g01
01:44:58 218  ,chf_g02
01:44:58 219  ,chf_g03
01:44:58 220  ,chf_g04
01:44:58 221  ,chf_g05
01:44:58 222  ,chf_g06
01:44:58 223  ,chf_g07
01:44:58 224  ,chf_g08
01:44:58 225  ,chf_g09
01:44:58 226  ,chf_g10
01:44:58 227  ,chf_g11
01:44:58 228  ,chf_g12
01:44:58 229  ,chf_g13
01:44:58 230  ,chf_g14
01:44:58 231  ,chf_g15
01:44:58 232  ,chf_g16
01:44:58 233  ,chf_g17
01:44:58 234  ,chf_g18
01:44:58 235  ,chf_g19
01:44:58 236  ,chf_g20
01:44:58 237  ,chf_g21
01:44:58 238  ,chf_g22
01:44:58 239  ,chf_g23
01:44:58 240  ,chf_g24
01:44:58 241  ,chf_g25
01:44:58 242  ,chf_g26
01:44:58 243  ,chf_g27
01:44:58 244  ,chf_g28
01:44:58 245  ,chf_g29
01:44:58 246  ,chf_g30
01:44:58 247  ,chf_g31
01:44:58 248  ,chf_g32
01:44:58 249  ,chf_g33
01:44:58 250  ,chf_g34
01:44:58 251  ,chf_g35
01:44:58 252  ,chf_g36
01:44:58 253  ,chf_g37
01:44:58 254  ,chf_g38
01:44:58 255  ,chf_g39
01:44:58 256  ,chf_g40
01:44:58 257  ,chf_g41
01:44:58 258  FROM aud_ms6 m
01:44:58 259  WHERE gatt IN('nup','up')
01:44:58 260  AND 1+m.ydate < '&1'||' '||'&2'
01:44:58 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2011-01-05'||' '||'01:35:00'

View created.

Elapsed: 00:00:00.12
01:44:58 SQL> 
01:44:58 SQL> -- rpt
01:44:58 SQL> 
01:44:58 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt
01:44:58   2  
01:44:58 SQL> SELECT MAX(prdate) FROM bme
01:44:58   2  
01:44:58 SQL> -- Now build model from bme and score sme
01:44:58 SQL> @score1.sql
01:44:58 SQL> -- score1.sql
01:44:58 SQL> 
01:44:58 SQL> -- Does the 1st SVM score
01:44:58 SQL> 
01:44:58 SQL> -- Fill up svmc_apply_prep
01:44:58 SQL> @score.sql
01:44:58 SQL> --
01:44:58 SQL> -- score.sql
01:44:58 SQL> --
01:44:58 SQL> 
01:44:58 SQL> -- usage: score.sql
01:44:58 SQL> 
01:44:58 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
01:44:58 SQL> 
01:44:58 SQL> DEFINE target	= 'gatt'
01:44:58 SQL> DEFINE model_name = 'forex15'
01:44:58 SQL> DEFINE bldtable	= 'bme'
01:44:58 SQL> DEFINE scoretable = 'sme'
01:44:58 SQL> DEFINE case_id	= 'prdate'
01:44:58 SQL> 
01:44:58 SQL> -- Define a variable to help me exclude some columns from some data mining calls
01:44:58 SQL> DEFINE exclude1 = "'&target','&case_id'"
01:44:58 SQL> 
01:44:58 SQL> -- Builds an SVM model using pl/sql.
01:44:58 SQL> 
01:44:58 SQL> -----------------------------------------------------------------------
01:44:58 SQL> --			    BUILD THE MODEL
01:44:58 SQL> -----------------------------------------------------------------------
01:44:58 SQL> 
01:44:58 SQL> -- Cleanup old build data preparation objects for repeat runs
01:44:58 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.00
01:44:58 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
01:44:58 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.01
01:44:58 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.00
01:44:58 SQL> 
01:44:58 SQL> 
01:44:58 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
01:44:58 SQL> --
01:44:58 SQL> -- DROP	TABLE svmc_settings ;
01:44:58 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
01:44:58 SQL> -- DELETE svmc_settings;
01:44:58 SQL> 
01:44:58 SQL> -- The default classification algorithm is Naive Bayes. So override
01:44:58 SQL> -- this choice to SVM using a settings table.
01:44:58 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
01:44:58 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
01:44:58 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
01:44:58 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
01:44:58 SQL> -- models.
01:44:58 SQL> --
01:44:58 SQL> 
01:44:58 SQL> -- Do this once and then comment it out.
01:44:58 SQL> -- That makes script go faster.
01:44:58 SQL> -- BEGIN
01:44:58 SQL> -- -- Populate settings table
01:44:58 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
01:44:58 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
01:44:58 SQL> --
01:44:58 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
01:44:58 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
01:44:58 SQL> --
01:44:58 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
01:44:58 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
01:44:58 SQL> --   COMMIT;
01:44:58 SQL> -- END;
01:44:58 SQL> -- /
01:44:58 SQL> 
01:44:58 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
01:44:58 SQL> 
01:44:58 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
01:44:58   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:44:58   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
01:44:59 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
01:44:59   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:44:59   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
01:44:59 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
01:44:59   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:44:59   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.09
01:44:59 SQL> 
01:44:59 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
01:44:59   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:44:59   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
01:44:59 SQL> 
01:44:59 SQL> --------------------------------
01:44:59 SQL> -- PREPARE BUILD (TRAINING) DATA
01:44:59 SQL> --
01:44:59 SQL> 
01:44:59 SQL> -- 1. Missing Value treatment for all Predictors and
01:44:59 SQL> -- 2. Outlier Treatment and
01:44:59 SQL> -- 3. Normalization are performed below.
01:44:59 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
01:44:59 SQL> --    normalized here.
01:44:59 SQL> 
01:44:59 SQL> BEGIN
01:44:59   2  	-- Perform missing value treatment for all predictors
01:44:59   3  	-- create miss tables
01:44:59   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
01:44:59   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
01:44:59   6  
01:44:59   7  	-- populate miss tables
01:44:59   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
01:44:59   9  	  miss_table_name => 'svmc_miss_num',
01:44:59  10  	  data_table_name => '&bldtable',
01:44:59  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
01:44:59  12  
01:44:59  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
01:44:59  14  	  miss_table_name => 'svmc_miss_cat',
01:44:59  15  	  data_table_name => '&bldtable',
01:44:59  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
01:44:59  17  
01:44:59  18  	-- xform input data to replace missing values
01:44:59  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
01:44:59  20  	  miss_table_name => 'svmc_miss_num',
01:44:59  21  	  data_table_name => '&bldtable',
01:44:59  22  	  xform_view_name => 'xformed_build_miss_num');
01:44:59  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
01:44:59  24  	  miss_table_name => 'svmc_miss_cat',
01:44:59  25  	  data_table_name => '&bldtable',
01:44:59  26  	  xform_view_name => 'xformed_build_miss_cat');
01:44:59  27  
01:44:59  28  	-- Perform outlier treatment.
01:44:59  29  	-- create clip table
01:44:59  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
01:44:59  31  
01:44:59  32  	-- populate clip table
01:44:59  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
01:44:59  34  	  clip_table_name => 'svmc_clip',
01:44:59  35  	  data_table_name => '&bldtable',
01:44:59  36  	  tail_frac	  => 0.025,
01:44:59  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
01:44:59  38  
01:44:59  39  	-- xform input data to winsorized data
01:44:59  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
01:44:59  41  	  clip_table_name => 'svmc_clip',
01:44:59  42  	  data_table_name => '&bldtable',
01:44:59  43  	  xform_view_name => 'svmc_winsor');
01:44:59  44  
01:44:59  45  	-- create normalization table
01:44:59  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
01:44:59  47  
01:44:59  48  	-- populate normalization table based on winsorized data
01:44:59  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
01:44:59  50  	  norm_table_name => 'svmc_norm',
01:44:59  51  	  data_table_name => 'svmc_winsor',
01:44:59  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
01:44:59  53  
01:44:59  54  	-- normalize the original data
01:44:59  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
01:44:59  56  	  norm_table_name => 'svmc_norm',
01:44:59  57  	  data_table_name => '&bldtable',
01:44:59  58  	  xform_view_name => 'svmc_build_prep');
01:44:59  59  END;
01:44:59  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:18.70
01:45:17 SQL> 
01:45:17 SQL> ---------------------
01:45:17 SQL> -- CREATE A NEW MODEL
01:45:17 SQL> --
01:45:17 SQL> -- Cleanup old model with the same name for repeat runs
01:45:17 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
01:45:17   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:45:17   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex15');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.29
01:45:19 SQL> 
01:45:19 SQL> -- Build a new SVM Model
01:45:19 SQL> BEGIN
01:45:19   2  	DBMS_DATA_MINING.CREATE_MODEL(
01:45:19   3  	  model_name	      => '&model_name',
01:45:19   4  	  mining_function     => dbms_data_mining.classification,
01:45:19   5  	  data_table_name     => 'svmc_build_prep',
01:45:19   6  	  case_id_column_name => '&case_id',
01:45:19   7  	  target_column_name  => '&target',
01:45:19   8  	  settings_table_name => 'svmc_settings');
01:45:19   9  END;
01:45:19  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex15',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:27.23
01:45:46 SQL> 
01:45:46 SQL> -----------------------------------------------------------------------
01:45:46 SQL> --			       APPLY/score THE MODEL
01:45:46 SQL> -----------------------------------------------------------------------
01:45:46 SQL> 
01:45:46 SQL> -- Cleanup old scoring data preparation objects for repeat runs
01:45:46 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
01:45:46   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:45:46   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
01:45:46 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
01:45:46   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:45:46   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
01:45:46 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
01:45:46   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:45:46   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
01:45:46 SQL> -----------------------
01:45:46 SQL> -- PREPARE SCORING DATA
01:45:46 SQL> --
01:45:46 SQL> -- If the data for model creation has been prepared, then the data
01:45:46 SQL> -- to be scored using the model must be prepared in the same manner
01:45:46 SQL> -- in order to obtain meaningful results.
01:45:46 SQL> --
01:45:46 SQL> -- 1. Missing Value treatment for all Predictors and
01:45:46 SQL> -- 2. Normalization
01:45:46 SQL> -- No outlier treatment will be performed during test and apply. The
01:45:46 SQL> -- normalization step is sufficient, since the normalization parameters
01:45:46 SQL> -- already capture the effects of outlier treatment done with build data.
01:45:46 SQL> --
01:45:46 SQL> BEGIN
01:45:46   2  	-- Xform Test data to replace missing values
01:45:46   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
01:45:46   4  	  miss_table_name => 'svmc_miss_num',
01:45:46   5  	  data_table_name => '&scoretable',
01:45:46   6  	  xform_view_name => 'xformed_apply_miss_num');
01:45:46   7  
01:45:46   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
01:45:46   9  	  miss_table_name => 'svmc_miss_cat',
01:45:46  10  	  data_table_name => '&scoretable',
01:45:46  11  	  xform_view_name => 'xformed_apply_miss_cat');
01:45:46  12  
01:45:46  13  	-- Normalize the data to be scored
01:45:46  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
01:45:46  15  	  norm_table_name => 'svmc_norm',
01:45:46  16  	  data_table_name => '&scoretable',
01:45:46  17  	  xform_view_name => 'svmc_apply_prep');
01:45:46  18  END;
01:45:46  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.37
01:45:48 SQL> 
01:45:48 SQL> -- Use same model_name used in score.sql
01:45:48 SQL> DEFINE model_name = 'forex15'
01:45:48 SQL> 
01:45:48 SQL> -- CREATE TABLE fxscores6 (prdate VARCHAR2(30),score NUMBER,rundate DATE,pair VARCHAR2(8),ydate DATE);
01:45:48 SQL> 
01:45:48 SQL> DELETE fxscores6 WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.04
01:45:48 SQL> 
01:45:48 SQL> INSERT INTO fxscores6 (prdate,score,rundate,pair,ydate)
01:45:48   2  SELECT
01:45:48   3  prdate
01:45:48   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
01:45:48   5  ,sysdate
01:45:48   6  ,SUBSTR(prdate,1,3)pair
01:45:48   7  ,SUBSTR(prdate,4,19)ydate
01:45:48   8  FROM svmc_apply_prep
01:45:48   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex15,'up' USING *)score

1 row created.

Elapsed: 00:00:00.17
01:45:48 SQL> @aud_score1day_gattn.sql	2011-01-05 01:20:00
01:45:48 SQL> --
01:45:48 SQL> -- aud_score1day_gattn.sql
01:45:48 SQL> --
01:45:48 SQL> 
01:45:48 SQL> CREATE OR REPLACE VIEW sme AS
01:45:48   2  SELECT
01:45:48   3  'aud'||m.ydate prdate
01:45:48   4  ,NULL gattn
01:45:48   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
01:45:48   6  ,eur_g00
01:45:48   7  ,eur_g01
01:45:48   8  ,eur_g02
01:45:48   9  ,eur_g03
01:45:48  10  ,eur_g04
01:45:48  11  ,eur_g05
01:45:48  12  ,eur_g06
01:45:48  13  ,eur_g07
01:45:48  14  ,eur_g08
01:45:48  15  ,eur_g09
01:45:48  16  ,eur_g10
01:45:48  17  ,eur_g11
01:45:48  18  ,eur_g12
01:45:48  19  ,eur_g13
01:45:48  20  ,eur_g14
01:45:48  21  ,eur_g15
01:45:48  22  ,eur_g16
01:45:48  23  ,eur_g17
01:45:48  24  ,eur_g18
01:45:48  25  ,eur_g19
01:45:48  26  ,eur_g20
01:45:48  27  ,eur_g21
01:45:48  28  ,eur_g22
01:45:48  29  ,eur_g23
01:45:48  30  ,eur_g24
01:45:48  31  ,eur_g25
01:45:48  32  ,eur_g26
01:45:48  33  ,eur_g27
01:45:48  34  ,eur_g28
01:45:48  35  ,eur_g29
01:45:48  36  ,eur_g30
01:45:48  37  ,eur_g31
01:45:48  38  ,eur_g32
01:45:48  39  ,eur_g33
01:45:48  40  ,eur_g34
01:45:48  41  ,eur_g35
01:45:48  42  ,eur_g36
01:45:48  43  ,eur_g37
01:45:48  44  ,eur_g38
01:45:48  45  ,eur_g39
01:45:48  46  ,eur_g40
01:45:48  47  ,eur_g41
01:45:48  48  ,aud_g00
01:45:48  49  ,aud_g01
01:45:48  50  ,aud_g02
01:45:48  51  ,aud_g03
01:45:48  52  ,aud_g04
01:45:48  53  ,aud_g05
01:45:48  54  ,aud_g06
01:45:48  55  ,aud_g07
01:45:48  56  ,aud_g08
01:45:48  57  ,aud_g09
01:45:48  58  ,aud_g10
01:45:48  59  ,aud_g11
01:45:48  60  ,aud_g12
01:45:48  61  ,aud_g13
01:45:48  62  ,aud_g14
01:45:48  63  ,aud_g15
01:45:48  64  ,aud_g16
01:45:48  65  ,aud_g17
01:45:48  66  ,aud_g18
01:45:48  67  ,aud_g19
01:45:48  68  ,aud_g20
01:45:48  69  ,aud_g21
01:45:48  70  ,aud_g22
01:45:48  71  ,aud_g23
01:45:48  72  ,aud_g24
01:45:48  73  ,aud_g25
01:45:48  74  ,aud_g26
01:45:48  75  ,aud_g27
01:45:48  76  ,aud_g28
01:45:48  77  ,aud_g29
01:45:48  78  ,aud_g30
01:45:48  79  ,aud_g31
01:45:48  80  ,aud_g32
01:45:48  81  ,aud_g33
01:45:48  82  ,aud_g34
01:45:48  83  ,aud_g35
01:45:48  84  ,aud_g36
01:45:48  85  ,aud_g37
01:45:48  86  ,aud_g38
01:45:48  87  ,aud_g39
01:45:48  88  ,aud_g40
01:45:48  89  ,aud_g41
01:45:48  90  ,gbp_g00
01:45:48  91  ,gbp_g01
01:45:48  92  ,gbp_g02
01:45:48  93  ,gbp_g03
01:45:48  94  ,gbp_g04
01:45:48  95  ,gbp_g05
01:45:48  96  ,gbp_g06
01:45:48  97  ,gbp_g07
01:45:48  98  ,gbp_g08
01:45:48  99  ,gbp_g09
01:45:48 100  ,gbp_g10
01:45:48 101  ,gbp_g11
01:45:48 102  ,gbp_g12
01:45:48 103  ,gbp_g13
01:45:48 104  ,gbp_g14
01:45:48 105  ,gbp_g15
01:45:48 106  ,gbp_g16
01:45:48 107  ,gbp_g17
01:45:48 108  ,gbp_g18
01:45:48 109  ,gbp_g19
01:45:48 110  ,gbp_g20
01:45:48 111  ,gbp_g21
01:45:48 112  ,gbp_g22
01:45:48 113  ,gbp_g23
01:45:48 114  ,gbp_g24
01:45:48 115  ,gbp_g25
01:45:48 116  ,gbp_g26
01:45:48 117  ,gbp_g27
01:45:48 118  ,gbp_g28
01:45:48 119  ,gbp_g29
01:45:48 120  ,gbp_g30
01:45:48 121  ,gbp_g31
01:45:48 122  ,gbp_g32
01:45:48 123  ,gbp_g33
01:45:48 124  ,gbp_g34
01:45:48 125  ,gbp_g35
01:45:48 126  ,gbp_g36
01:45:48 127  ,gbp_g37
01:45:48 128  ,gbp_g38
01:45:48 129  ,gbp_g39
01:45:48 130  ,gbp_g40
01:45:48 131  ,gbp_g41
01:45:48 132  ,jpy_g00
01:45:48 133  ,jpy_g01
01:45:48 134  ,jpy_g02
01:45:48 135  ,jpy_g03
01:45:48 136  ,jpy_g04
01:45:48 137  ,jpy_g05
01:45:48 138  ,jpy_g06
01:45:48 139  ,jpy_g07
01:45:48 140  ,jpy_g08
01:45:48 141  ,jpy_g09
01:45:48 142  ,jpy_g10
01:45:48 143  ,jpy_g11
01:45:48 144  ,jpy_g12
01:45:48 145  ,jpy_g13
01:45:48 146  ,jpy_g14
01:45:48 147  ,jpy_g15
01:45:48 148  ,jpy_g16
01:45:48 149  ,jpy_g17
01:45:48 150  ,jpy_g18
01:45:48 151  ,jpy_g19
01:45:48 152  ,jpy_g20
01:45:48 153  ,jpy_g21
01:45:48 154  ,jpy_g22
01:45:48 155  ,jpy_g23
01:45:48 156  ,jpy_g24
01:45:48 157  ,jpy_g25
01:45:48 158  ,jpy_g26
01:45:48 159  ,jpy_g27
01:45:48 160  ,jpy_g28
01:45:48 161  ,jpy_g29
01:45:48 162  ,jpy_g30
01:45:48 163  ,jpy_g31
01:45:48 164  ,jpy_g32
01:45:48 165  ,jpy_g33
01:45:48 166  ,jpy_g34
01:45:48 167  ,jpy_g35
01:45:48 168  ,jpy_g36
01:45:48 169  ,jpy_g37
01:45:48 170  ,jpy_g38
01:45:48 171  ,jpy_g39
01:45:48 172  ,jpy_g40
01:45:48 173  ,jpy_g41
01:45:48 174  ,cad_g00
01:45:48 175  ,cad_g01
01:45:48 176  ,cad_g02
01:45:48 177  ,cad_g03
01:45:48 178  ,cad_g04
01:45:48 179  ,cad_g05
01:45:48 180  ,cad_g06
01:45:48 181  ,cad_g07
01:45:48 182  ,cad_g08
01:45:48 183  ,cad_g09
01:45:48 184  ,cad_g10
01:45:48 185  ,cad_g11
01:45:48 186  ,cad_g12
01:45:48 187  ,cad_g13
01:45:48 188  ,cad_g14
01:45:48 189  ,cad_g15
01:45:48 190  ,cad_g16
01:45:48 191  ,cad_g17
01:45:48 192  ,cad_g18
01:45:48 193  ,cad_g19
01:45:48 194  ,cad_g20
01:45:48 195  ,cad_g21
01:45:48 196  ,cad_g22
01:45:48 197  ,cad_g23
01:45:48 198  ,cad_g24
01:45:48 199  ,cad_g25
01:45:48 200  ,cad_g26
01:45:48 201  ,cad_g27
01:45:48 202  ,cad_g28
01:45:48 203  ,cad_g29
01:45:48 204  ,cad_g30
01:45:48 205  ,cad_g31
01:45:48 206  ,cad_g32
01:45:48 207  ,cad_g33
01:45:48 208  ,cad_g34
01:45:48 209  ,cad_g35
01:45:48 210  ,cad_g36
01:45:48 211  ,cad_g37
01:45:48 212  ,cad_g38
01:45:48 213  ,cad_g39
01:45:48 214  ,cad_g40
01:45:48 215  ,cad_g41
01:45:48 216  ,chf_g00
01:45:48 217  ,chf_g01
01:45:48 218  ,chf_g02
01:45:48 219  ,chf_g03
01:45:48 220  ,chf_g04
01:45:48 221  ,chf_g05
01:45:48 222  ,chf_g06
01:45:48 223  ,chf_g07
01:45:48 224  ,chf_g08
01:45:48 225  ,chf_g09
01:45:48 226  ,chf_g10
01:45:48 227  ,chf_g11
01:45:48 228  ,chf_g12
01:45:48 229  ,chf_g13
01:45:48 230  ,chf_g14
01:45:48 231  ,chf_g15
01:45:48 232  ,chf_g16
01:45:48 233  ,chf_g17
01:45:48 234  ,chf_g18
01:45:48 235  ,chf_g19
01:45:48 236  ,chf_g20
01:45:48 237  ,chf_g21
01:45:48 238  ,chf_g22
01:45:48 239  ,chf_g23
01:45:48 240  ,chf_g24
01:45:48 241  ,chf_g25
01:45:48 242  ,chf_g26
01:45:48 243  ,chf_g27
01:45:48 244  ,chf_g28
01:45:48 245  ,chf_g29
01:45:48 246  ,chf_g30
01:45:48 247  ,chf_g31
01:45:48 248  ,chf_g32
01:45:48 249  ,chf_g33
01:45:48 250  ,chf_g34
01:45:48 251  ,chf_g35
01:45:48 252  ,chf_g36
01:45:48 253  ,chf_g37
01:45:48 254  ,chf_g38
01:45:48 255  ,chf_g39
01:45:48 256  ,chf_g40
01:45:48 257  ,chf_g41
01:45:48 258  FROM aud_ms6 m
01:45:48 259  WHERE m.ydate = '&1'||' '||'&2'
01:45:48 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2011-01-05'||' '||'01:20:00'

View created.

Elapsed: 00:00:00.12
01:45:48 SQL> 
01:45:48 SQL> -- rpt
01:45:48 SQL> -- We should see just 1 row:
01:45:48 SQL> 
01:45:48 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
01:45:48 SQL> 
01:45:48 SQL> -- Build the model:
01:45:48 SQL> CREATE OR REPLACE VIEW bme AS
01:45:48   2  SELECT
01:45:48   3  'aud'||m.ydate prdate
01:45:48   4  ,gattn
01:45:48   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
01:45:48   6  ,eur_g00
01:45:48   7  ,eur_g01
01:45:48   8  ,eur_g02
01:45:48   9  ,eur_g03
01:45:48  10  ,eur_g04
01:45:48  11  ,eur_g05
01:45:48  12  ,eur_g06
01:45:48  13  ,eur_g07
01:45:48  14  ,eur_g08
01:45:48  15  ,eur_g09
01:45:48  16  ,eur_g10
01:45:48  17  ,eur_g11
01:45:48  18  ,eur_g12
01:45:48  19  ,eur_g13
01:45:48  20  ,eur_g14
01:45:48  21  ,eur_g15
01:45:48  22  ,eur_g16
01:45:48  23  ,eur_g17
01:45:48  24  ,eur_g18
01:45:48  25  ,eur_g19
01:45:48  26  ,eur_g20
01:45:48  27  ,eur_g21
01:45:48  28  ,eur_g22
01:45:48  29  ,eur_g23
01:45:48  30  ,eur_g24
01:45:48  31  ,eur_g25
01:45:48  32  ,eur_g26
01:45:48  33  ,eur_g27
01:45:48  34  ,eur_g28
01:45:48  35  ,eur_g29
01:45:48  36  ,eur_g30
01:45:48  37  ,eur_g31
01:45:48  38  ,eur_g32
01:45:48  39  ,eur_g33
01:45:48  40  ,eur_g34
01:45:48  41  ,eur_g35
01:45:48  42  ,eur_g36
01:45:48  43  ,eur_g37
01:45:48  44  ,eur_g38
01:45:48  45  ,eur_g39
01:45:48  46  ,eur_g40
01:45:48  47  ,eur_g41
01:45:48  48  ,aud_g00
01:45:48  49  ,aud_g01
01:45:48  50  ,aud_g02
01:45:48  51  ,aud_g03
01:45:48  52  ,aud_g04
01:45:48  53  ,aud_g05
01:45:48  54  ,aud_g06
01:45:48  55  ,aud_g07
01:45:48  56  ,aud_g08
01:45:48  57  ,aud_g09
01:45:48  58  ,aud_g10
01:45:48  59  ,aud_g11
01:45:48  60  ,aud_g12
01:45:48  61  ,aud_g13
01:45:48  62  ,aud_g14
01:45:48  63  ,aud_g15
01:45:48  64  ,aud_g16
01:45:48  65  ,aud_g17
01:45:48  66  ,aud_g18
01:45:48  67  ,aud_g19
01:45:48  68  ,aud_g20
01:45:48  69  ,aud_g21
01:45:48  70  ,aud_g22
01:45:48  71  ,aud_g23
01:45:48  72  ,aud_g24
01:45:48  73  ,aud_g25
01:45:48  74  ,aud_g26
01:45:48  75  ,aud_g27
01:45:48  76  ,aud_g28
01:45:48  77  ,aud_g29
01:45:48  78  ,aud_g30
01:45:48  79  ,aud_g31
01:45:48  80  ,aud_g32
01:45:48  81  ,aud_g33
01:45:48  82  ,aud_g34
01:45:48  83  ,aud_g35
01:45:48  84  ,aud_g36
01:45:48  85  ,aud_g37
01:45:48  86  ,aud_g38
01:45:48  87  ,aud_g39
01:45:48  88  ,aud_g40
01:45:48  89  ,aud_g41
01:45:48  90  ,gbp_g00
01:45:48  91  ,gbp_g01
01:45:48  92  ,gbp_g02
01:45:48  93  ,gbp_g03
01:45:48  94  ,gbp_g04
01:45:48  95  ,gbp_g05
01:45:48  96  ,gbp_g06
01:45:48  97  ,gbp_g07
01:45:48  98  ,gbp_g08
01:45:48  99  ,gbp_g09
01:45:48 100  ,gbp_g10
01:45:48 101  ,gbp_g11
01:45:48 102  ,gbp_g12
01:45:48 103  ,gbp_g13
01:45:48 104  ,gbp_g14
01:45:48 105  ,gbp_g15
01:45:48 106  ,gbp_g16
01:45:48 107  ,gbp_g17
01:45:48 108  ,gbp_g18
01:45:48 109  ,gbp_g19
01:45:48 110  ,gbp_g20
01:45:48 111  ,gbp_g21
01:45:48 112  ,gbp_g22
01:45:48 113  ,gbp_g23
01:45:48 114  ,gbp_g24
01:45:48 115  ,gbp_g25
01:45:48 116  ,gbp_g26
01:45:48 117  ,gbp_g27
01:45:48 118  ,gbp_g28
01:45:48 119  ,gbp_g29
01:45:48 120  ,gbp_g30
01:45:48 121  ,gbp_g31
01:45:48 122  ,gbp_g32
01:45:48 123  ,gbp_g33
01:45:48 124  ,gbp_g34
01:45:48 125  ,gbp_g35
01:45:48 126  ,gbp_g36
01:45:48 127  ,gbp_g37
01:45:48 128  ,gbp_g38
01:45:48 129  ,gbp_g39
01:45:48 130  ,gbp_g40
01:45:48 131  ,gbp_g41
01:45:48 132  ,jpy_g00
01:45:48 133  ,jpy_g01
01:45:48 134  ,jpy_g02
01:45:48 135  ,jpy_g03
01:45:48 136  ,jpy_g04
01:45:48 137  ,jpy_g05
01:45:48 138  ,jpy_g06
01:45:48 139  ,jpy_g07
01:45:48 140  ,jpy_g08
01:45:48 141  ,jpy_g09
01:45:48 142  ,jpy_g10
01:45:48 143  ,jpy_g11
01:45:48 144  ,jpy_g12
01:45:48 145  ,jpy_g13
01:45:48 146  ,jpy_g14
01:45:48 147  ,jpy_g15
01:45:48 148  ,jpy_g16
01:45:48 149  ,jpy_g17
01:45:48 150  ,jpy_g18
01:45:48 151  ,jpy_g19
01:45:48 152  ,jpy_g20
01:45:48 153  ,jpy_g21
01:45:48 154  ,jpy_g22
01:45:48 155  ,jpy_g23
01:45:48 156  ,jpy_g24
01:45:48 157  ,jpy_g25
01:45:48 158  ,jpy_g26
01:45:48 159  ,jpy_g27
01:45:48 160  ,jpy_g28
01:45:48 161  ,jpy_g29
01:45:48 162  ,jpy_g30
01:45:48 163  ,jpy_g31
01:45:48 164  ,jpy_g32
01:45:48 165  ,jpy_g33
01:45:48 166  ,jpy_g34
01:45:48 167  ,jpy_g35
01:45:48 168  ,jpy_g36
01:45:48 169  ,jpy_g37
01:45:48 170  ,jpy_g38
01:45:48 171  ,jpy_g39
01:45:48 172  ,jpy_g40
01:45:48 173  ,jpy_g41
01:45:48 174  ,cad_g00
01:45:48 175  ,cad_g01
01:45:48 176  ,cad_g02
01:45:48 177  ,cad_g03
01:45:48 178  ,cad_g04
01:45:48 179  ,cad_g05
01:45:48 180  ,cad_g06
01:45:48 181  ,cad_g07
01:45:48 182  ,cad_g08
01:45:48 183  ,cad_g09
01:45:48 184  ,cad_g10
01:45:48 185  ,cad_g11
01:45:48 186  ,cad_g12
01:45:48 187  ,cad_g13
01:45:48 188  ,cad_g14
01:45:48 189  ,cad_g15
01:45:48 190  ,cad_g16
01:45:48 191  ,cad_g17
01:45:48 192  ,cad_g18
01:45:48 193  ,cad_g19
01:45:48 194  ,cad_g20
01:45:48 195  ,cad_g21
01:45:48 196  ,cad_g22
01:45:48 197  ,cad_g23
01:45:48 198  ,cad_g24
01:45:48 199  ,cad_g25
01:45:48 200  ,cad_g26
01:45:48 201  ,cad_g27
01:45:48 202  ,cad_g28
01:45:48 203  ,cad_g29
01:45:48 204  ,cad_g30
01:45:48 205  ,cad_g31
01:45:48 206  ,cad_g32
01:45:48 207  ,cad_g33
01:45:48 208  ,cad_g34
01:45:48 209  ,cad_g35
01:45:48 210  ,cad_g36
01:45:48 211  ,cad_g37
01:45:48 212  ,cad_g38
01:45:48 213  ,cad_g39
01:45:48 214  ,cad_g40
01:45:48 215  ,cad_g41
01:45:48 216  ,chf_g00
01:45:48 217  ,chf_g01
01:45:48 218  ,chf_g02
01:45:48 219  ,chf_g03
01:45:48 220  ,chf_g04
01:45:48 221  ,chf_g05
01:45:48 222  ,chf_g06
01:45:48 223  ,chf_g07
01:45:48 224  ,chf_g08
01:45:48 225  ,chf_g09
01:45:48 226  ,chf_g10
01:45:48 227  ,chf_g11
01:45:48 228  ,chf_g12
01:45:48 229  ,chf_g13
01:45:48 230  ,chf_g14
01:45:48 231  ,chf_g15
01:45:48 232  ,chf_g16
01:45:48 233  ,chf_g17
01:45:48 234  ,chf_g18
01:45:48 235  ,chf_g19
01:45:48 236  ,chf_g20
01:45:48 237  ,chf_g21
01:45:48 238  ,chf_g22
01:45:48 239  ,chf_g23
01:45:48 240  ,chf_g24
01:45:48 241  ,chf_g25
01:45:48 242  ,chf_g26
01:45:48 243  ,chf_g27
01:45:48 244  ,chf_g28
01:45:48 245  ,chf_g29
01:45:48 246  ,chf_g30
01:45:48 247  ,chf_g31
01:45:48 248  ,chf_g32
01:45:48 249  ,chf_g33
01:45:48 250  ,chf_g34
01:45:48 251  ,chf_g35
01:45:48 252  ,chf_g36
01:45:48 253  ,chf_g37
01:45:48 254  ,chf_g38
01:45:48 255  ,chf_g39
01:45:48 256  ,chf_g40
01:45:48 257  ,chf_g41
01:45:48 258  FROM aud_ms6 m
01:45:48 259  WHERE gattn IN('nup','up')
01:45:48 260  AND 1+m.ydate < '&1'||' '||'&2'
01:45:48 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2011-01-05'||' '||'01:20:00'

View created.

Elapsed: 00:00:00.12
01:45:48 SQL> 
01:45:48 SQL> -- rpt
01:45:48 SQL> 
01:45:48 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	    12651
up	     6345

Elapsed: 00:00:00.05
01:45:48 SQL> 
01:45:48 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
aud2011-01-04 01:15:00

Elapsed: 00:00:00.03
01:45:48 SQL> 
01:45:48 SQL> -- Now build model from bme and score sme
01:45:48 SQL> @score1gattn.sql
01:45:48 SQL> -- score1gattn.sql
01:45:48 SQL> 
01:45:48 SQL> -- Does the 1st SVM score
01:45:48 SQL> 
01:45:48 SQL> -- Fill up svmc_apply_prep
01:45:48 SQL> @score_gattn.sql
01:45:48 SQL> --
01:45:48 SQL> -- score_gattn.sql
01:45:48 SQL> --
01:45:48 SQL> 
01:45:48 SQL> -- usage: score_gattn.sql
01:45:48 SQL> 
01:45:48 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
01:45:48 SQL> 
01:45:48 SQL> DEFINE target	= 'gattn'
01:45:48 SQL> DEFINE model_name = 'forex15'
01:45:48 SQL> DEFINE bldtable	= 'bme'
01:45:48 SQL> DEFINE scoretable = 'sme'
01:45:48 SQL> DEFINE case_id	= 'prdate'
01:45:48 SQL> 
01:45:48 SQL> -- Define a variable to help me exclude some columns from some data mining calls
01:45:48 SQL> DEFINE exclude1 = "'&target','&case_id'"
01:45:48 SQL> 
01:45:48 SQL> -- Builds an SVM model using pl/sql.
01:45:48 SQL> 
01:45:48 SQL> -----------------------------------------------------------------------
01:45:48 SQL> --			    BUILD THE MODEL
01:45:48 SQL> -----------------------------------------------------------------------
01:45:48 SQL> 
01:45:48 SQL> -- Cleanup old build data preparation objects for repeat runs
01:45:48 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.01
01:45:48 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
01:45:48 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.00
01:45:48 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.00
01:45:48 SQL> 
01:45:48 SQL> 
01:45:48 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
01:45:48 SQL> --
01:45:48 SQL> -- DROP	TABLE svmc_settings ;
01:45:48 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
01:45:48 SQL> -- DELETE svmc_settings;
01:45:48 SQL> 
01:45:48 SQL> -- The default classification algorithm is Naive Bayes. So override
01:45:48 SQL> -- this choice to SVM using a settings table.
01:45:48 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
01:45:48 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
01:45:48 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
01:45:48 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
01:45:48 SQL> -- models.
01:45:48 SQL> --
01:45:48 SQL> 
01:45:48 SQL> -- Do this once and then comment it out.
01:45:48 SQL> -- That makes script go faster.
01:45:48 SQL> -- BEGIN
01:45:48 SQL> -- -- Populate settings table
01:45:48 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
01:45:48 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
01:45:48 SQL> --
01:45:48 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
01:45:48 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
01:45:48 SQL> --
01:45:48 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
01:45:48 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
01:45:48 SQL> --   COMMIT;
01:45:48 SQL> -- END;
01:45:48 SQL> -- /
01:45:48 SQL> 
01:45:48 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
01:45:48 SQL> 
01:45:48 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
01:45:48   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:45:48   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.09
01:45:48 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
01:45:48   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:45:48   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
01:45:48 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
01:45:48   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:45:48   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
01:45:48 SQL> 
01:45:48 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
01:45:48   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:45:48   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
01:45:48 SQL> 
01:45:48 SQL> --------------------------------
01:45:48 SQL> -- PREPARE BUILD (TRAINING) DATA
01:45:48 SQL> --
01:45:48 SQL> 
01:45:48 SQL> -- 1. Missing Value treatment for all Predictors and
01:45:48 SQL> -- 2. Outlier Treatment and
01:45:48 SQL> -- 3. Normalization are performed below.
01:45:48 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
01:45:48 SQL> --    normalized here.
01:45:48 SQL> 
01:45:48 SQL> BEGIN
01:45:48   2  	-- Perform missing value treatment for all predictors
01:45:48   3  	-- create miss tables
01:45:48   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
01:45:48   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
01:45:48   6  
01:45:48   7  	-- populate miss tables
01:45:48   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
01:45:48   9  	  miss_table_name => 'svmc_miss_num',
01:45:48  10  	  data_table_name => '&bldtable',
01:45:48  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
01:45:48  12  
01:45:48  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
01:45:48  14  	  miss_table_name => 'svmc_miss_cat',
01:45:48  15  	  data_table_name => '&bldtable',
01:45:48  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
01:45:48  17  
01:45:48  18  	-- xform input data to replace missing values
01:45:48  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
01:45:48  20  	  miss_table_name => 'svmc_miss_num',
01:45:48  21  	  data_table_name => '&bldtable',
01:45:48  22  	  xform_view_name => 'xformed_build_miss_num');
01:45:48  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
01:45:48  24  	  miss_table_name => 'svmc_miss_cat',
01:45:48  25  	  data_table_name => '&bldtable',
01:45:48  26  	  xform_view_name => 'xformed_build_miss_cat');
01:45:48  27  
01:45:48  28  	-- Perform outlier treatment.
01:45:48  29  	-- create clip table
01:45:48  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
01:45:48  31  
01:45:48  32  	-- populate clip table
01:45:48  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
01:45:48  34  	  clip_table_name => 'svmc_clip',
01:45:48  35  	  data_table_name => '&bldtable',
01:45:48  36  	  tail_frac	  => 0.025,
01:45:48  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
01:45:48  38  
01:45:48  39  	-- xform input data to winsorized data
01:45:48  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
01:45:48  41  	  clip_table_name => 'svmc_clip',
01:45:48  42  	  data_table_name => '&bldtable',
01:45:48  43  	  xform_view_name => 'svmc_winsor');
01:45:48  44  
01:45:48  45  	-- create normalization table
01:45:48  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
01:45:48  47  
01:45:48  48  	-- populate normalization table based on winsorized data
01:45:48  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
01:45:48  50  	  norm_table_name => 'svmc_norm',
01:45:48  51  	  data_table_name => 'svmc_winsor',
01:45:48  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
01:45:48  53  
01:45:48  54  	-- normalize the original data
01:45:48  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
01:45:48  56  	  norm_table_name => 'svmc_norm',
01:45:48  57  	  data_table_name => '&bldtable',
01:45:48  58  	  xform_view_name => 'svmc_build_prep');
01:45:48  59  END;
01:45:48  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:19.37
01:46:08 SQL> 
01:46:08 SQL> ---------------------
01:46:08 SQL> -- CREATE A NEW MODEL
01:46:08 SQL> --
01:46:08 SQL> -- Cleanup old model with the same name for repeat runs
01:46:08 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
01:46:08   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:46:08   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex15');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.13
01:46:09 SQL> 
01:46:09 SQL> -- Build a new SVM Model
01:46:09 SQL> BEGIN
01:46:09   2  	DBMS_DATA_MINING.CREATE_MODEL(
01:46:09   3  	  model_name	      => '&model_name',
01:46:09   4  	  mining_function     => dbms_data_mining.classification,
01:46:09   5  	  data_table_name     => 'svmc_build_prep',
01:46:09   6  	  case_id_column_name => '&case_id',
01:46:09   7  	  target_column_name  => '&target',
01:46:09   8  	  settings_table_name => 'svmc_settings');
01:46:09   9  END;
01:46:09  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex15',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:28.41
01:46:37 SQL> 
01:46:37 SQL> -----------------------------------------------------------------------
01:46:37 SQL> --			       APPLY/score THE MODEL
01:46:37 SQL> -----------------------------------------------------------------------
01:46:37 SQL> 
01:46:37 SQL> -- Cleanup old scoring data preparation objects for repeat runs
01:46:37 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
01:46:37   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:46:37   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
01:46:37 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
01:46:37   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:46:37   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
01:46:37 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
01:46:37   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:46:37   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
01:46:37 SQL> -----------------------
01:46:37 SQL> -- PREPARE SCORING DATA
01:46:37 SQL> --
01:46:37 SQL> -- If the data for model creation has been prepared, then the data
01:46:37 SQL> -- to be scored using the model must be prepared in the same manner
01:46:37 SQL> -- in order to obtain meaningful results.
01:46:37 SQL> --
01:46:37 SQL> -- 1. Missing Value treatment for all Predictors and
01:46:37 SQL> -- 2. Normalization
01:46:37 SQL> -- No outlier treatment will be performed during test and apply. The
01:46:37 SQL> -- normalization step is sufficient, since the normalization parameters
01:46:37 SQL> -- already capture the effects of outlier treatment done with build data.
01:46:37 SQL> --
01:46:37 SQL> BEGIN
01:46:37   2  	-- Xform Test data to replace missing values
01:46:37   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
01:46:37   4  	  miss_table_name => 'svmc_miss_num',
01:46:37   5  	  data_table_name => '&scoretable',
01:46:37   6  	  xform_view_name => 'xformed_apply_miss_num');
01:46:37   7  
01:46:37   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
01:46:37   9  	  miss_table_name => 'svmc_miss_cat',
01:46:37  10  	  data_table_name => '&scoretable',
01:46:37  11  	  xform_view_name => 'xformed_apply_miss_cat');
01:46:37  12  
01:46:37  13  	-- Normalize the data to be scored
01:46:37  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
01:46:37  15  	  norm_table_name => 'svmc_norm',
01:46:37  16  	  data_table_name => '&scoretable',
01:46:37  17  	  xform_view_name => 'svmc_apply_prep');
01:46:37  18  END;
01:46:37  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.25
01:46:39 SQL> 
01:46:39 SQL> -- Use same model_name used in score_gattn.sql
01:46:39 SQL> DEFINE model_name = 'forex15'
01:46:39 SQL> 
01:46:39 SQL> DELETE fxscores6_gattn WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.04
01:46:39 SQL> 
01:46:39 SQL> INSERT INTO fxscores6_gattn (prdate,score,rundate,pair,ydate)
01:46:39   2  SELECT
01:46:39   3  prdate
01:46:39   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
01:46:39   5  ,sysdate
01:46:39   6  ,SUBSTR(prdate,1,3)pair
01:46:39   7  ,SUBSTR(prdate,4,19)ydate
01:46:39   8  FROM svmc_apply_prep
01:46:39   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex15,'up' USING *)score

1 row created.

Elapsed: 00:00:00.18
01:46:39 SQL> @aud_score1day_gattn.sql	2011-01-05 01:25:00
01:46:39 SQL> --
01:46:39 SQL> -- aud_score1day_gattn.sql
01:46:39 SQL> --
01:46:39 SQL> 
01:46:39 SQL> CREATE OR REPLACE VIEW sme AS
01:46:39   2  SELECT
01:46:39   3  'aud'||m.ydate prdate
01:46:39   4  ,NULL gattn
01:46:39   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
01:46:39   6  ,eur_g00
01:46:39   7  ,eur_g01
01:46:39   8  ,eur_g02
01:46:39   9  ,eur_g03
01:46:39  10  ,eur_g04
01:46:39  11  ,eur_g05
01:46:39  12  ,eur_g06
01:46:39  13  ,eur_g07
01:46:39  14  ,eur_g08
01:46:39  15  ,eur_g09
01:46:39  16  ,eur_g10
01:46:39  17  ,eur_g11
01:46:39  18  ,eur_g12
01:46:39  19  ,eur_g13
01:46:39  20  ,eur_g14
01:46:39  21  ,eur_g15
01:46:39  22  ,eur_g16
01:46:39  23  ,eur_g17
01:46:39  24  ,eur_g18
01:46:39  25  ,eur_g19
01:46:39  26  ,eur_g20
01:46:39  27  ,eur_g21
01:46:39  28  ,eur_g22
01:46:39  29  ,eur_g23
01:46:39  30  ,eur_g24
01:46:39  31  ,eur_g25
01:46:39  32  ,eur_g26
01:46:39  33  ,eur_g27
01:46:39  34  ,eur_g28
01:46:39  35  ,eur_g29
01:46:39  36  ,eur_g30
01:46:39  37  ,eur_g31
01:46:39  38  ,eur_g32
01:46:39  39  ,eur_g33
01:46:39  40  ,eur_g34
01:46:39  41  ,eur_g35
01:46:39  42  ,eur_g36
01:46:39  43  ,eur_g37
01:46:39  44  ,eur_g38
01:46:39  45  ,eur_g39
01:46:39  46  ,eur_g40
01:46:39  47  ,eur_g41
01:46:39  48  ,aud_g00
01:46:39  49  ,aud_g01
01:46:39  50  ,aud_g02
01:46:39  51  ,aud_g03
01:46:39  52  ,aud_g04
01:46:39  53  ,aud_g05
01:46:39  54  ,aud_g06
01:46:39  55  ,aud_g07
01:46:39  56  ,aud_g08
01:46:39  57  ,aud_g09
01:46:39  58  ,aud_g10
01:46:39  59  ,aud_g11
01:46:39  60  ,aud_g12
01:46:39  61  ,aud_g13
01:46:39  62  ,aud_g14
01:46:39  63  ,aud_g15
01:46:39  64  ,aud_g16
01:46:39  65  ,aud_g17
01:46:39  66  ,aud_g18
01:46:39  67  ,aud_g19
01:46:39  68  ,aud_g20
01:46:39  69  ,aud_g21
01:46:39  70  ,aud_g22
01:46:39  71  ,aud_g23
01:46:39  72  ,aud_g24
01:46:39  73  ,aud_g25
01:46:39  74  ,aud_g26
01:46:39  75  ,aud_g27
01:46:39  76  ,aud_g28
01:46:39  77  ,aud_g29
01:46:39  78  ,aud_g30
01:46:39  79  ,aud_g31
01:46:39  80  ,aud_g32
01:46:39  81  ,aud_g33
01:46:39  82  ,aud_g34
01:46:39  83  ,aud_g35
01:46:39  84  ,aud_g36
01:46:39  85  ,aud_g37
01:46:39  86  ,aud_g38
01:46:39  87  ,aud_g39
01:46:39  88  ,aud_g40
01:46:39  89  ,aud_g41
01:46:39  90  ,gbp_g00
01:46:39  91  ,gbp_g01
01:46:39  92  ,gbp_g02
01:46:39  93  ,gbp_g03
01:46:39  94  ,gbp_g04
01:46:39  95  ,gbp_g05
01:46:39  96  ,gbp_g06
01:46:39  97  ,gbp_g07
01:46:39  98  ,gbp_g08
01:46:39  99  ,gbp_g09
01:46:39 100  ,gbp_g10
01:46:39 101  ,gbp_g11
01:46:39 102  ,gbp_g12
01:46:39 103  ,gbp_g13
01:46:39 104  ,gbp_g14
01:46:39 105  ,gbp_g15
01:46:39 106  ,gbp_g16
01:46:39 107  ,gbp_g17
01:46:39 108  ,gbp_g18
01:46:39 109  ,gbp_g19
01:46:39 110  ,gbp_g20
01:46:39 111  ,gbp_g21
01:46:39 112  ,gbp_g22
01:46:39 113  ,gbp_g23
01:46:39 114  ,gbp_g24
01:46:39 115  ,gbp_g25
01:46:39 116  ,gbp_g26
01:46:39 117  ,gbp_g27
01:46:39 118  ,gbp_g28
01:46:39 119  ,gbp_g29
01:46:39 120  ,gbp_g30
01:46:39 121  ,gbp_g31
01:46:39 122  ,gbp_g32
01:46:39 123  ,gbp_g33
01:46:39 124  ,gbp_g34
01:46:39 125  ,gbp_g35
01:46:39 126  ,gbp_g36
01:46:39 127  ,gbp_g37
01:46:39 128  ,gbp_g38
01:46:39 129  ,gbp_g39
01:46:39 130  ,gbp_g40
01:46:39 131  ,gbp_g41
01:46:39 132  ,jpy_g00
01:46:39 133  ,jpy_g01
01:46:39 134  ,jpy_g02
01:46:39 135  ,jpy_g03
01:46:39 136  ,jpy_g04
01:46:39 137  ,jpy_g05
01:46:39 138  ,jpy_g06
01:46:39 139  ,jpy_g07
01:46:39 140  ,jpy_g08
01:46:39 141  ,jpy_g09
01:46:39 142  ,jpy_g10
01:46:39 143  ,jpy_g11
01:46:39 144  ,jpy_g12
01:46:39 145  ,jpy_g13
01:46:39 146  ,jpy_g14
01:46:39 147  ,jpy_g15
01:46:39 148  ,jpy_g16
01:46:39 149  ,jpy_g17
01:46:39 150  ,jpy_g18
01:46:39 151  ,jpy_g19
01:46:39 152  ,jpy_g20
01:46:39 153  ,jpy_g21
01:46:39 154  ,jpy_g22
01:46:39 155  ,jpy_g23
01:46:39 156  ,jpy_g24
01:46:39 157  ,jpy_g25
01:46:39 158  ,jpy_g26
01:46:39 159  ,jpy_g27
01:46:39 160  ,jpy_g28
01:46:39 161  ,jpy_g29
01:46:39 162  ,jpy_g30
01:46:39 163  ,jpy_g31
01:46:39 164  ,jpy_g32
01:46:39 165  ,jpy_g33
01:46:39 166  ,jpy_g34
01:46:39 167  ,jpy_g35
01:46:39 168  ,jpy_g36
01:46:39 169  ,jpy_g37
01:46:39 170  ,jpy_g38
01:46:39 171  ,jpy_g39
01:46:39 172  ,jpy_g40
01:46:39 173  ,jpy_g41
01:46:39 174  ,cad_g00
01:46:39 175  ,cad_g01
01:46:39 176  ,cad_g02
01:46:39 177  ,cad_g03
01:46:39 178  ,cad_g04
01:46:39 179  ,cad_g05
01:46:39 180  ,cad_g06
01:46:39 181  ,cad_g07
01:46:39 182  ,cad_g08
01:46:39 183  ,cad_g09
01:46:39 184  ,cad_g10
01:46:39 185  ,cad_g11
01:46:39 186  ,cad_g12
01:46:39 187  ,cad_g13
01:46:39 188  ,cad_g14
01:46:39 189  ,cad_g15
01:46:39 190  ,cad_g16
01:46:39 191  ,cad_g17
01:46:39 192  ,cad_g18
01:46:39 193  ,cad_g19
01:46:39 194  ,cad_g20
01:46:39 195  ,cad_g21
01:46:39 196  ,cad_g22
01:46:39 197  ,cad_g23
01:46:39 198  ,cad_g24
01:46:39 199  ,cad_g25
01:46:39 200  ,cad_g26
01:46:39 201  ,cad_g27
01:46:39 202  ,cad_g28
01:46:39 203  ,cad_g29
01:46:39 204  ,cad_g30
01:46:39 205  ,cad_g31
01:46:39 206  ,cad_g32
01:46:39 207  ,cad_g33
01:46:39 208  ,cad_g34
01:46:39 209  ,cad_g35
01:46:39 210  ,cad_g36
01:46:39 211  ,cad_g37
01:46:39 212  ,cad_g38
01:46:39 213  ,cad_g39
01:46:39 214  ,cad_g40
01:46:39 215  ,cad_g41
01:46:39 216  ,chf_g00
01:46:39 217  ,chf_g01
01:46:39 218  ,chf_g02
01:46:39 219  ,chf_g03
01:46:39 220  ,chf_g04
01:46:39 221  ,chf_g05
01:46:39 222  ,chf_g06
01:46:39 223  ,chf_g07
01:46:39 224  ,chf_g08
01:46:39 225  ,chf_g09
01:46:39 226  ,chf_g10
01:46:39 227  ,chf_g11
01:46:39 228  ,chf_g12
01:46:39 229  ,chf_g13
01:46:39 230  ,chf_g14
01:46:39 231  ,chf_g15
01:46:39 232  ,chf_g16
01:46:39 233  ,chf_g17
01:46:39 234  ,chf_g18
01:46:39 235  ,chf_g19
01:46:39 236  ,chf_g20
01:46:39 237  ,chf_g21
01:46:39 238  ,chf_g22
01:46:39 239  ,chf_g23
01:46:39 240  ,chf_g24
01:46:39 241  ,chf_g25
01:46:39 242  ,chf_g26
01:46:39 243  ,chf_g27
01:46:39 244  ,chf_g28
01:46:39 245  ,chf_g29
01:46:39 246  ,chf_g30
01:46:39 247  ,chf_g31
01:46:39 248  ,chf_g32
01:46:39 249  ,chf_g33
01:46:39 250  ,chf_g34
01:46:39 251  ,chf_g35
01:46:39 252  ,chf_g36
01:46:39 253  ,chf_g37
01:46:39 254  ,chf_g38
01:46:39 255  ,chf_g39
01:46:39 256  ,chf_g40
01:46:39 257  ,chf_g41
01:46:39 258  FROM aud_ms6 m
01:46:39 259  WHERE m.ydate = '&1'||' '||'&2'
01:46:39 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2011-01-05'||' '||'01:25:00'

View created.

Elapsed: 00:00:00.12
01:46:39 SQL> 
01:46:39 SQL> -- rpt
01:46:39 SQL> -- We should see just 1 row:
01:46:39 SQL> 
01:46:39 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
01:46:39 SQL> 
01:46:39 SQL> -- Build the model:
01:46:39 SQL> CREATE OR REPLACE VIEW bme AS
01:46:39   2  SELECT
01:46:39   3  'aud'||m.ydate prdate
01:46:39   4  ,gattn
01:46:39   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
01:46:39   6  ,eur_g00
01:46:39   7  ,eur_g01
01:46:39   8  ,eur_g02
01:46:39   9  ,eur_g03
01:46:39  10  ,eur_g04
01:46:39  11  ,eur_g05
01:46:39  12  ,eur_g06
01:46:39  13  ,eur_g07
01:46:39  14  ,eur_g08
01:46:39  15  ,eur_g09
01:46:39  16  ,eur_g10
01:46:39  17  ,eur_g11
01:46:39  18  ,eur_g12
01:46:39  19  ,eur_g13
01:46:39  20  ,eur_g14
01:46:39  21  ,eur_g15
01:46:39  22  ,eur_g16
01:46:39  23  ,eur_g17
01:46:39  24  ,eur_g18
01:46:39  25  ,eur_g19
01:46:39  26  ,eur_g20
01:46:39  27  ,eur_g21
01:46:39  28  ,eur_g22
01:46:39  29  ,eur_g23
01:46:39  30  ,eur_g24
01:46:39  31  ,eur_g25
01:46:39  32  ,eur_g26
01:46:39  33  ,eur_g27
01:46:39  34  ,eur_g28
01:46:39  35  ,eur_g29
01:46:39  36  ,eur_g30
01:46:39  37  ,eur_g31
01:46:39  38  ,eur_g32
01:46:39  39  ,eur_g33
01:46:39  40  ,eur_g34
01:46:39  41  ,eur_g35
01:46:39  42  ,eur_g36
01:46:39  43  ,eur_g37
01:46:39  44  ,eur_g38
01:46:39  45  ,eur_g39
01:46:39  46  ,eur_g40
01:46:39  47  ,eur_g41
01:46:39  48  ,aud_g00
01:46:39  49  ,aud_g01
01:46:39  50  ,aud_g02
01:46:39  51  ,aud_g03
01:46:39  52  ,aud_g04
01:46:39  53  ,aud_g05
01:46:39  54  ,aud_g06
01:46:39  55  ,aud_g07
01:46:39  56  ,aud_g08
01:46:39  57  ,aud_g09
01:46:39  58  ,aud_g10
01:46:39  59  ,aud_g11
01:46:39  60  ,aud_g12
01:46:39  61  ,aud_g13
01:46:39  62  ,aud_g14
01:46:39  63  ,aud_g15
01:46:39  64  ,aud_g16
01:46:39  65  ,aud_g17
01:46:39  66  ,aud_g18
01:46:39  67  ,aud_g19
01:46:39  68  ,aud_g20
01:46:39  69  ,aud_g21
01:46:39  70  ,aud_g22
01:46:39  71  ,aud_g23
01:46:39  72  ,aud_g24
01:46:39  73  ,aud_g25
01:46:39  74  ,aud_g26
01:46:39  75  ,aud_g27
01:46:39  76  ,aud_g28
01:46:39  77  ,aud_g29
01:46:39  78  ,aud_g30
01:46:39  79  ,aud_g31
01:46:39  80  ,aud_g32
01:46:39  81  ,aud_g33
01:46:39  82  ,aud_g34
01:46:39  83  ,aud_g35
01:46:39  84  ,aud_g36
01:46:39  85  ,aud_g37
01:46:39  86  ,aud_g38
01:46:39  87  ,aud_g39
01:46:39  88  ,aud_g40
01:46:39  89  ,aud_g41
01:46:39  90  ,gbp_g00
01:46:39  91  ,gbp_g01
01:46:39  92  ,gbp_g02
01:46:39  93  ,gbp_g03
01:46:39  94  ,gbp_g04
01:46:39  95  ,gbp_g05
01:46:39  96  ,gbp_g06
01:46:39  97  ,gbp_g07
01:46:39  98  ,gbp_g08
01:46:39  99  ,gbp_g09
01:46:39 100  ,gbp_g10
01:46:39 101  ,gbp_g11
01:46:39 102  ,gbp_g12
01:46:39 103  ,gbp_g13
01:46:39 104  ,gbp_g14
01:46:39 105  ,gbp_g15
01:46:39 106  ,gbp_g16
01:46:39 107  ,gbp_g17
01:46:39 108  ,gbp_g18
01:46:39 109  ,gbp_g19
01:46:39 110  ,gbp_g20
01:46:39 111  ,gbp_g21
01:46:39 112  ,gbp_g22
01:46:39 113  ,gbp_g23
01:46:39 114  ,gbp_g24
01:46:39 115  ,gbp_g25
01:46:39 116  ,gbp_g26
01:46:39 117  ,gbp_g27
01:46:39 118  ,gbp_g28
01:46:39 119  ,gbp_g29
01:46:39 120  ,gbp_g30
01:46:39 121  ,gbp_g31
01:46:39 122  ,gbp_g32
01:46:39 123  ,gbp_g33
01:46:39 124  ,gbp_g34
01:46:39 125  ,gbp_g35
01:46:39 126  ,gbp_g36
01:46:39 127  ,gbp_g37
01:46:39 128  ,gbp_g38
01:46:39 129  ,gbp_g39
01:46:39 130  ,gbp_g40
01:46:39 131  ,gbp_g41
01:46:39 132  ,jpy_g00
01:46:39 133  ,jpy_g01
01:46:39 134  ,jpy_g02
01:46:39 135  ,jpy_g03
01:46:39 136  ,jpy_g04
01:46:39 137  ,jpy_g05
01:46:39 138  ,jpy_g06
01:46:39 139  ,jpy_g07
01:46:39 140  ,jpy_g08
01:46:39 141  ,jpy_g09
01:46:39 142  ,jpy_g10
01:46:39 143  ,jpy_g11
01:46:39 144  ,jpy_g12
01:46:39 145  ,jpy_g13
01:46:39 146  ,jpy_g14
01:46:39 147  ,jpy_g15
01:46:39 148  ,jpy_g16
01:46:39 149  ,jpy_g17
01:46:39 150  ,jpy_g18
01:46:39 151  ,jpy_g19
01:46:39 152  ,jpy_g20
01:46:39 153  ,jpy_g21
01:46:39 154  ,jpy_g22
01:46:39 155  ,jpy_g23
01:46:39 156  ,jpy_g24
01:46:39 157  ,jpy_g25
01:46:39 158  ,jpy_g26
01:46:39 159  ,jpy_g27
01:46:39 160  ,jpy_g28
01:46:39 161  ,jpy_g29
01:46:39 162  ,jpy_g30
01:46:39 163  ,jpy_g31
01:46:39 164  ,jpy_g32
01:46:39 165  ,jpy_g33
01:46:39 166  ,jpy_g34
01:46:39 167  ,jpy_g35
01:46:39 168  ,jpy_g36
01:46:39 169  ,jpy_g37
01:46:39 170  ,jpy_g38
01:46:39 171  ,jpy_g39
01:46:39 172  ,jpy_g40
01:46:39 173  ,jpy_g41
01:46:39 174  ,cad_g00
01:46:39 175  ,cad_g01
01:46:39 176  ,cad_g02
01:46:39 177  ,cad_g03
01:46:39 178  ,cad_g04
01:46:39 179  ,cad_g05
01:46:39 180  ,cad_g06
01:46:39 181  ,cad_g07
01:46:39 182  ,cad_g08
01:46:39 183  ,cad_g09
01:46:39 184  ,cad_g10
01:46:39 185  ,cad_g11
01:46:39 186  ,cad_g12
01:46:39 187  ,cad_g13
01:46:39 188  ,cad_g14
01:46:39 189  ,cad_g15
01:46:39 190  ,cad_g16
01:46:39 191  ,cad_g17
01:46:39 192  ,cad_g18
01:46:39 193  ,cad_g19
01:46:39 194  ,cad_g20
01:46:39 195  ,cad_g21
01:46:39 196  ,cad_g22
01:46:39 197  ,cad_g23
01:46:39 198  ,cad_g24
01:46:39 199  ,cad_g25
01:46:39 200  ,cad_g26
01:46:39 201  ,cad_g27
01:46:39 202  ,cad_g28
01:46:39 203  ,cad_g29
01:46:39 204  ,cad_g30
01:46:39 205  ,cad_g31
01:46:39 206  ,cad_g32
01:46:39 207  ,cad_g33
01:46:39 208  ,cad_g34
01:46:39 209  ,cad_g35
01:46:39 210  ,cad_g36
01:46:39 211  ,cad_g37
01:46:39 212  ,cad_g38
01:46:39 213  ,cad_g39
01:46:39 214  ,cad_g40
01:46:39 215  ,cad_g41
01:46:39 216  ,chf_g00
01:46:39 217  ,chf_g01
01:46:39 218  ,chf_g02
01:46:39 219  ,chf_g03
01:46:39 220  ,chf_g04
01:46:39 221  ,chf_g05
01:46:39 222  ,chf_g06
01:46:39 223  ,chf_g07
01:46:39 224  ,chf_g08
01:46:39 225  ,chf_g09
01:46:39 226  ,chf_g10
01:46:39 227  ,chf_g11
01:46:39 228  ,chf_g12
01:46:39 229  ,chf_g13
01:46:39 230  ,chf_g14
01:46:39 231  ,chf_g15
01:46:39 232  ,chf_g16
01:46:39 233  ,chf_g17
01:46:39 234  ,chf_g18
01:46:39 235  ,chf_g19
01:46:39 236  ,chf_g20
01:46:39 237  ,chf_g21
01:46:39 238  ,chf_g22
01:46:39 239  ,chf_g23
01:46:39 240  ,chf_g24
01:46:39 241  ,chf_g25
01:46:39 242  ,chf_g26
01:46:39 243  ,chf_g27
01:46:39 244  ,chf_g28
01:46:39 245  ,chf_g29
01:46:39 246  ,chf_g30
01:46:39 247  ,chf_g31
01:46:39 248  ,chf_g32
01:46:39 249  ,chf_g33
01:46:39 250  ,chf_g34
01:46:39 251  ,chf_g35
01:46:39 252  ,chf_g36
01:46:39 253  ,chf_g37
01:46:39 254  ,chf_g38
01:46:39 255  ,chf_g39
01:46:39 256  ,chf_g40
01:46:39 257  ,chf_g41
01:46:39 258  FROM aud_ms6 m
01:46:39 259  WHERE gattn IN('nup','up')
01:46:39 260  AND 1+m.ydate < '&1'||' '||'&2'
01:46:39 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2011-01-05'||' '||'01:25:00'

View created.

Elapsed: 00:00:00.11
01:46:39 SQL> 
01:46:39 SQL> -- rpt
01:46:39 SQL> 
01:46:39 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	    12651
up	     6346

Elapsed: 00:00:00.04
01:46:39 SQL> 
01:46:39 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
aud2011-01-04 01:20:00

Elapsed: 00:00:00.03
01:46:39 SQL> 
01:46:39 SQL> -- Now build model from bme and score sme
01:46:39 SQL> @score1gattn.sql
01:46:39 SQL> -- score1gattn.sql
01:46:39 SQL> 
01:46:39 SQL> -- Does the 1st SVM score
01:46:39 SQL> 
01:46:39 SQL> -- Fill up svmc_apply_prep
01:46:39 SQL> @score_gattn.sql
01:46:39 SQL> --
01:46:39 SQL> -- score_gattn.sql
01:46:39 SQL> --
01:46:39 SQL> 
01:46:39 SQL> -- usage: score_gattn.sql
01:46:39 SQL> 
01:46:39 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
01:46:39 SQL> 
01:46:39 SQL> DEFINE target	= 'gattn'
01:46:39 SQL> DEFINE model_name = 'forex15'
01:46:39 SQL> DEFINE bldtable	= 'bme'
01:46:39 SQL> DEFINE scoretable = 'sme'
01:46:39 SQL> DEFINE case_id	= 'prdate'
01:46:39 SQL> 
01:46:39 SQL> -- Define a variable to help me exclude some columns from some data mining calls
01:46:39 SQL> DEFINE exclude1 = "'&target','&case_id'"
01:46:39 SQL> 
01:46:39 SQL> -- Builds an SVM model using pl/sql.
01:46:39 SQL> 
01:46:39 SQL> -----------------------------------------------------------------------
01:46:39 SQL> --			    BUILD THE MODEL
01:46:39 SQL> -----------------------------------------------------------------------
01:46:39 SQL> 
01:46:39 SQL> -- Cleanup old build data preparation objects for repeat runs
01:46:39 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.01
01:46:39 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
01:46:39 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.00
01:46:39 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.00
01:46:39 SQL> 
01:46:39 SQL> 
01:46:39 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
01:46:39 SQL> --
01:46:39 SQL> -- DROP	TABLE svmc_settings ;
01:46:39 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
01:46:39 SQL> -- DELETE svmc_settings;
01:46:39 SQL> 
01:46:39 SQL> -- The default classification algorithm is Naive Bayes. So override
01:46:39 SQL> -- this choice to SVM using a settings table.
01:46:39 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
01:46:39 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
01:46:39 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
01:46:39 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
01:46:39 SQL> -- models.
01:46:39 SQL> --
01:46:39 SQL> 
01:46:39 SQL> -- Do this once and then comment it out.
01:46:39 SQL> -- That makes script go faster.
01:46:39 SQL> -- BEGIN
01:46:39 SQL> -- -- Populate settings table
01:46:39 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
01:46:39 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
01:46:39 SQL> --
01:46:39 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
01:46:39 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
01:46:39 SQL> --
01:46:39 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
01:46:39 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
01:46:39 SQL> --   COMMIT;
01:46:39 SQL> -- END;
01:46:39 SQL> -- /
01:46:39 SQL> 
01:46:39 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
01:46:39 SQL> 
01:46:39 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
01:46:39   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:46:39   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
01:46:39 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
01:46:39   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:46:39   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
01:46:39 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
01:46:39   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:46:39   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
01:46:39 SQL> 
01:46:39 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
01:46:39   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:46:39   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
01:46:40 SQL> 
01:46:40 SQL> --------------------------------
01:46:40 SQL> -- PREPARE BUILD (TRAINING) DATA
01:46:40 SQL> --
01:46:40 SQL> 
01:46:40 SQL> -- 1. Missing Value treatment for all Predictors and
01:46:40 SQL> -- 2. Outlier Treatment and
01:46:40 SQL> -- 3. Normalization are performed below.
01:46:40 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
01:46:40 SQL> --    normalized here.
01:46:40 SQL> 
01:46:40 SQL> BEGIN
01:46:40   2  	-- Perform missing value treatment for all predictors
01:46:40   3  	-- create miss tables
01:46:40   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
01:46:40   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
01:46:40   6  
01:46:40   7  	-- populate miss tables
01:46:40   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
01:46:40   9  	  miss_table_name => 'svmc_miss_num',
01:46:40  10  	  data_table_name => '&bldtable',
01:46:40  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
01:46:40  12  
01:46:40  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
01:46:40  14  	  miss_table_name => 'svmc_miss_cat',
01:46:40  15  	  data_table_name => '&bldtable',
01:46:40  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
01:46:40  17  
01:46:40  18  	-- xform input data to replace missing values
01:46:40  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
01:46:40  20  	  miss_table_name => 'svmc_miss_num',
01:46:40  21  	  data_table_name => '&bldtable',
01:46:40  22  	  xform_view_name => 'xformed_build_miss_num');
01:46:40  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
01:46:40  24  	  miss_table_name => 'svmc_miss_cat',
01:46:40  25  	  data_table_name => '&bldtable',
01:46:40  26  	  xform_view_name => 'xformed_build_miss_cat');
01:46:40  27  
01:46:40  28  	-- Perform outlier treatment.
01:46:40  29  	-- create clip table
01:46:40  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
01:46:40  31  
01:46:40  32  	-- populate clip table
01:46:40  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
01:46:40  34  	  clip_table_name => 'svmc_clip',
01:46:40  35  	  data_table_name => '&bldtable',
01:46:40  36  	  tail_frac	  => 0.025,
01:46:40  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
01:46:40  38  
01:46:40  39  	-- xform input data to winsorized data
01:46:40  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
01:46:40  41  	  clip_table_name => 'svmc_clip',
01:46:40  42  	  data_table_name => '&bldtable',
01:46:40  43  	  xform_view_name => 'svmc_winsor');
01:46:40  44  
01:46:40  45  	-- create normalization table
01:46:40  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
01:46:40  47  
01:46:40  48  	-- populate normalization table based on winsorized data
01:46:40  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
01:46:40  50  	  norm_table_name => 'svmc_norm',
01:46:40  51  	  data_table_name => 'svmc_winsor',
01:46:40  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
01:46:40  53  
01:46:40  54  	-- normalize the original data
01:46:40  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
01:46:40  56  	  norm_table_name => 'svmc_norm',
01:46:40  57  	  data_table_name => '&bldtable',
01:46:40  58  	  xform_view_name => 'svmc_build_prep');
01:46:40  59  END;
01:46:40  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:21.78
01:47:01 SQL> 
01:47:01 SQL> ---------------------
01:47:01 SQL> -- CREATE A NEW MODEL
01:47:01 SQL> --
01:47:01 SQL> -- Cleanup old model with the same name for repeat runs
01:47:01 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
01:47:01   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:47:01   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex15');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.98
01:47:02 SQL> 
01:47:02 SQL> -- Build a new SVM Model
01:47:02 SQL> BEGIN
01:47:02   2  	DBMS_DATA_MINING.CREATE_MODEL(
01:47:02   3  	  model_name	      => '&model_name',
01:47:02   4  	  mining_function     => dbms_data_mining.classification,
01:47:02   5  	  data_table_name     => 'svmc_build_prep',
01:47:02   6  	  case_id_column_name => '&case_id',
01:47:02   7  	  target_column_name  => '&target',
01:47:02   8  	  settings_table_name => 'svmc_settings');
01:47:02   9  END;
01:47:02  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex15',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:27.90
01:47:30 SQL> 
01:47:30 SQL> -----------------------------------------------------------------------
01:47:30 SQL> --			       APPLY/score THE MODEL
01:47:30 SQL> -----------------------------------------------------------------------
01:47:30 SQL> 
01:47:30 SQL> -- Cleanup old scoring data preparation objects for repeat runs
01:47:30 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
01:47:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:47:30   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
01:47:30 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
01:47:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:47:30   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
01:47:30 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
01:47:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:47:30   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.09
01:47:30 SQL> -----------------------
01:47:30 SQL> -- PREPARE SCORING DATA
01:47:30 SQL> --
01:47:30 SQL> -- If the data for model creation has been prepared, then the data
01:47:30 SQL> -- to be scored using the model must be prepared in the same manner
01:47:30 SQL> -- in order to obtain meaningful results.
01:47:30 SQL> --
01:47:30 SQL> -- 1. Missing Value treatment for all Predictors and
01:47:30 SQL> -- 2. Normalization
01:47:30 SQL> -- No outlier treatment will be performed during test and apply. The
01:47:30 SQL> -- normalization step is sufficient, since the normalization parameters
01:47:30 SQL> -- already capture the effects of outlier treatment done with build data.
01:47:30 SQL> --
01:47:30 SQL> BEGIN
01:47:30   2  	-- Xform Test data to replace missing values
01:47:30   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
01:47:30   4  	  miss_table_name => 'svmc_miss_num',
01:47:30   5  	  data_table_name => '&scoretable',
01:47:30   6  	  xform_view_name => 'xformed_apply_miss_num');
01:47:30   7  
01:47:30   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
01:47:30   9  	  miss_table_name => 'svmc_miss_cat',
01:47:30  10  	  data_table_name => '&scoretable',
01:47:30  11  	  xform_view_name => 'xformed_apply_miss_cat');
01:47:30  12  
01:47:30  13  	-- Normalize the data to be scored
01:47:30  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
01:47:30  15  	  norm_table_name => 'svmc_norm',
01:47:30  16  	  data_table_name => '&scoretable',
01:47:30  17  	  xform_view_name => 'svmc_apply_prep');
01:47:30  18  END;
01:47:30  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.21
01:47:32 SQL> 
01:47:32 SQL> -- Use same model_name used in score_gattn.sql
01:47:32 SQL> DEFINE model_name = 'forex15'
01:47:32 SQL> 
01:47:32 SQL> DELETE fxscores6_gattn WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.04
01:47:32 SQL> 
01:47:32 SQL> INSERT INTO fxscores6_gattn (prdate,score,rundate,pair,ydate)
01:47:32   2  SELECT
01:47:32   3  prdate
01:47:32   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
01:47:32   5  ,sysdate
01:47:32   6  ,SUBSTR(prdate,1,3)pair
01:47:32   7  ,SUBSTR(prdate,4,19)ydate
01:47:32   8  FROM svmc_apply_prep
01:47:32   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex15,'up' USING *)score

1 row created.

Elapsed: 00:00:00.17
01:47:32 SQL> @aud_score1day_gattn.sql	2011-01-05 01:30:00
01:47:32 SQL> --
01:47:32 SQL> -- aud_score1day_gattn.sql
01:47:32 SQL> --
01:47:32 SQL> 
01:47:32 SQL> CREATE OR REPLACE VIEW sme AS
01:47:32   2  SELECT
01:47:32   3  'aud'||m.ydate prdate
01:47:32   4  ,NULL gattn
01:47:32   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
01:47:32   6  ,eur_g00
01:47:32   7  ,eur_g01
01:47:32   8  ,eur_g02
01:47:32   9  ,eur_g03
01:47:32  10  ,eur_g04
01:47:32  11  ,eur_g05
01:47:32  12  ,eur_g06
01:47:32  13  ,eur_g07
01:47:32  14  ,eur_g08
01:47:32  15  ,eur_g09
01:47:32  16  ,eur_g10
01:47:32  17  ,eur_g11
01:47:32  18  ,eur_g12
01:47:32  19  ,eur_g13
01:47:32  20  ,eur_g14
01:47:32  21  ,eur_g15
01:47:32  22  ,eur_g16
01:47:32  23  ,eur_g17
01:47:32  24  ,eur_g18
01:47:32  25  ,eur_g19
01:47:32  26  ,eur_g20
01:47:32  27  ,eur_g21
01:47:32  28  ,eur_g22
01:47:32  29  ,eur_g23
01:47:32  30  ,eur_g24
01:47:32  31  ,eur_g25
01:47:32  32  ,eur_g26
01:47:32  33  ,eur_g27
01:47:32  34  ,eur_g28
01:47:32  35  ,eur_g29
01:47:32  36  ,eur_g30
01:47:32  37  ,eur_g31
01:47:32  38  ,eur_g32
01:47:32  39  ,eur_g33
01:47:32  40  ,eur_g34
01:47:32  41  ,eur_g35
01:47:32  42  ,eur_g36
01:47:32  43  ,eur_g37
01:47:32  44  ,eur_g38
01:47:32  45  ,eur_g39
01:47:32  46  ,eur_g40
01:47:32  47  ,eur_g41
01:47:32  48  ,aud_g00
01:47:32  49  ,aud_g01
01:47:32  50  ,aud_g02
01:47:32  51  ,aud_g03
01:47:32  52  ,aud_g04
01:47:32  53  ,aud_g05
01:47:32  54  ,aud_g06
01:47:32  55  ,aud_g07
01:47:32  56  ,aud_g08
01:47:32  57  ,aud_g09
01:47:32  58  ,aud_g10
01:47:32  59  ,aud_g11
01:47:32  60  ,aud_g12
01:47:32  61  ,aud_g13
01:47:32  62  ,aud_g14
01:47:32  63  ,aud_g15
01:47:32  64  ,aud_g16
01:47:32  65  ,aud_g17
01:47:32  66  ,aud_g18
01:47:32  67  ,aud_g19
01:47:32  68  ,aud_g20
01:47:32  69  ,aud_g21
01:47:32  70  ,aud_g22
01:47:32  71  ,aud_g23
01:47:32  72  ,aud_g24
01:47:32  73  ,aud_g25
01:47:32  74  ,aud_g26
01:47:32  75  ,aud_g27
01:47:32  76  ,aud_g28
01:47:32  77  ,aud_g29
01:47:32  78  ,aud_g30
01:47:32  79  ,aud_g31
01:47:32  80  ,aud_g32
01:47:32  81  ,aud_g33
01:47:32  82  ,aud_g34
01:47:32  83  ,aud_g35
01:47:32  84  ,aud_g36
01:47:32  85  ,aud_g37
01:47:32  86  ,aud_g38
01:47:32  87  ,aud_g39
01:47:32  88  ,aud_g40
01:47:32  89  ,aud_g41
01:47:32  90  ,gbp_g00
01:47:32  91  ,gbp_g01
01:47:32  92  ,gbp_g02
01:47:32  93  ,gbp_g03
01:47:32  94  ,gbp_g04
01:47:32  95  ,gbp_g05
01:47:32  96  ,gbp_g06
01:47:32  97  ,gbp_g07
01:47:32  98  ,gbp_g08
01:47:32  99  ,gbp_g09
01:47:32 100  ,gbp_g10
01:47:32 101  ,gbp_g11
01:47:32 102  ,gbp_g12
01:47:32 103  ,gbp_g13
01:47:32 104  ,gbp_g14
01:47:32 105  ,gbp_g15
01:47:32 106  ,gbp_g16
01:47:32 107  ,gbp_g17
01:47:32 108  ,gbp_g18
01:47:32 109  ,gbp_g19
01:47:32 110  ,gbp_g20
01:47:32 111  ,gbp_g21
01:47:32 112  ,gbp_g22
01:47:32 113  ,gbp_g23
01:47:32 114  ,gbp_g24
01:47:32 115  ,gbp_g25
01:47:32 116  ,gbp_g26
01:47:32 117  ,gbp_g27
01:47:32 118  ,gbp_g28
01:47:32 119  ,gbp_g29
01:47:32 120  ,gbp_g30
01:47:32 121  ,gbp_g31
01:47:32 122  ,gbp_g32
01:47:32 123  ,gbp_g33
01:47:32 124  ,gbp_g34
01:47:32 125  ,gbp_g35
01:47:32 126  ,gbp_g36
01:47:32 127  ,gbp_g37
01:47:32 128  ,gbp_g38
01:47:32 129  ,gbp_g39
01:47:32 130  ,gbp_g40
01:47:32 131  ,gbp_g41
01:47:32 132  ,jpy_g00
01:47:32 133  ,jpy_g01
01:47:32 134  ,jpy_g02
01:47:32 135  ,jpy_g03
01:47:32 136  ,jpy_g04
01:47:32 137  ,jpy_g05
01:47:32 138  ,jpy_g06
01:47:32 139  ,jpy_g07
01:47:32 140  ,jpy_g08
01:47:32 141  ,jpy_g09
01:47:32 142  ,jpy_g10
01:47:32 143  ,jpy_g11
01:47:32 144  ,jpy_g12
01:47:32 145  ,jpy_g13
01:47:32 146  ,jpy_g14
01:47:32 147  ,jpy_g15
01:47:32 148  ,jpy_g16
01:47:32 149  ,jpy_g17
01:47:32 150  ,jpy_g18
01:47:32 151  ,jpy_g19
01:47:32 152  ,jpy_g20
01:47:32 153  ,jpy_g21
01:47:32 154  ,jpy_g22
01:47:32 155  ,jpy_g23
01:47:32 156  ,jpy_g24
01:47:32 157  ,jpy_g25
01:47:32 158  ,jpy_g26
01:47:32 159  ,jpy_g27
01:47:32 160  ,jpy_g28
01:47:32 161  ,jpy_g29
01:47:32 162  ,jpy_g30
01:47:32 163  ,jpy_g31
01:47:32 164  ,jpy_g32
01:47:32 165  ,jpy_g33
01:47:32 166  ,jpy_g34
01:47:32 167  ,jpy_g35
01:47:32 168  ,jpy_g36
01:47:32 169  ,jpy_g37
01:47:32 170  ,jpy_g38
01:47:32 171  ,jpy_g39
01:47:32 172  ,jpy_g40
01:47:32 173  ,jpy_g41
01:47:32 174  ,cad_g00
01:47:32 175  ,cad_g01
01:47:32 176  ,cad_g02
01:47:32 177  ,cad_g03
01:47:32 178  ,cad_g04
01:47:32 179  ,cad_g05
01:47:32 180  ,cad_g06
01:47:32 181  ,cad_g07
01:47:32 182  ,cad_g08
01:47:32 183  ,cad_g09
01:47:32 184  ,cad_g10
01:47:32 185  ,cad_g11
01:47:32 186  ,cad_g12
01:47:32 187  ,cad_g13
01:47:32 188  ,cad_g14
01:47:32 189  ,cad_g15
01:47:32 190  ,cad_g16
01:47:32 191  ,cad_g17
01:47:32 192  ,cad_g18
01:47:32 193  ,cad_g19
01:47:32 194  ,cad_g20
01:47:32 195  ,cad_g21
01:47:32 196  ,cad_g22
01:47:32 197  ,cad_g23
01:47:32 198  ,cad_g24
01:47:32 199  ,cad_g25
01:47:32 200  ,cad_g26
01:47:32 201  ,cad_g27
01:47:32 202  ,cad_g28
01:47:32 203  ,cad_g29
01:47:32 204  ,cad_g30
01:47:32 205  ,cad_g31
01:47:32 206  ,cad_g32
01:47:32 207  ,cad_g33
01:47:32 208  ,cad_g34
01:47:32 209  ,cad_g35
01:47:32 210  ,cad_g36
01:47:32 211  ,cad_g37
01:47:32 212  ,cad_g38
01:47:32 213  ,cad_g39
01:47:32 214  ,cad_g40
01:47:32 215  ,cad_g41
01:47:32 216  ,chf_g00
01:47:32 217  ,chf_g01
01:47:32 218  ,chf_g02
01:47:32 219  ,chf_g03
01:47:32 220  ,chf_g04
01:47:32 221  ,chf_g05
01:47:32 222  ,chf_g06
01:47:32 223  ,chf_g07
01:47:32 224  ,chf_g08
01:47:32 225  ,chf_g09
01:47:32 226  ,chf_g10
01:47:32 227  ,chf_g11
01:47:32 228  ,chf_g12
01:47:32 229  ,chf_g13
01:47:32 230  ,chf_g14
01:47:32 231  ,chf_g15
01:47:32 232  ,chf_g16
01:47:32 233  ,chf_g17
01:47:32 234  ,chf_g18
01:47:32 235  ,chf_g19
01:47:32 236  ,chf_g20
01:47:32 237  ,chf_g21
01:47:32 238  ,chf_g22
01:47:32 239  ,chf_g23
01:47:32 240  ,chf_g24
01:47:32 241  ,chf_g25
01:47:32 242  ,chf_g26
01:47:32 243  ,chf_g27
01:47:32 244  ,chf_g28
01:47:32 245  ,chf_g29
01:47:32 246  ,chf_g30
01:47:32 247  ,chf_g31
01:47:32 248  ,chf_g32
01:47:32 249  ,chf_g33
01:47:32 250  ,chf_g34
01:47:32 251  ,chf_g35
01:47:32 252  ,chf_g36
01:47:32 253  ,chf_g37
01:47:32 254  ,chf_g38
01:47:32 255  ,chf_g39
01:47:32 256  ,chf_g40
01:47:32 257  ,chf_g41
01:47:32 258  FROM aud_ms6 m
01:47:32 259  WHERE m.ydate = '&1'||' '||'&2'
01:47:32 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2011-01-05'||' '||'01:30:00'

View created.

Elapsed: 00:00:00.12
01:47:32 SQL> 
01:47:32 SQL> -- rpt
01:47:32 SQL> -- We should see just 1 row:
01:47:32 SQL> 
01:47:32 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
01:47:32 SQL> 
01:47:32 SQL> -- Build the model:
01:47:32 SQL> CREATE OR REPLACE VIEW bme AS
01:47:32   2  SELECT
01:47:32   3  'aud'||m.ydate prdate
01:47:32   4  ,gattn
01:47:32   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
01:47:32   6  ,eur_g00
01:47:32   7  ,eur_g01
01:47:32   8  ,eur_g02
01:47:32   9  ,eur_g03
01:47:32  10  ,eur_g04
01:47:32  11  ,eur_g05
01:47:32  12  ,eur_g06
01:47:32  13  ,eur_g07
01:47:32  14  ,eur_g08
01:47:32  15  ,eur_g09
01:47:32  16  ,eur_g10
01:47:32  17  ,eur_g11
01:47:32  18  ,eur_g12
01:47:32  19  ,eur_g13
01:47:32  20  ,eur_g14
01:47:32  21  ,eur_g15
01:47:32  22  ,eur_g16
01:47:32  23  ,eur_g17
01:47:32  24  ,eur_g18
01:47:32  25  ,eur_g19
01:47:32  26  ,eur_g20
01:47:32  27  ,eur_g21
01:47:32  28  ,eur_g22
01:47:32  29  ,eur_g23
01:47:32  30  ,eur_g24
01:47:32  31  ,eur_g25
01:47:32  32  ,eur_g26
01:47:32  33  ,eur_g27
01:47:32  34  ,eur_g28
01:47:32  35  ,eur_g29
01:47:32  36  ,eur_g30
01:47:32  37  ,eur_g31
01:47:32  38  ,eur_g32
01:47:32  39  ,eur_g33
01:47:32  40  ,eur_g34
01:47:32  41  ,eur_g35
01:47:32  42  ,eur_g36
01:47:32  43  ,eur_g37
01:47:32  44  ,eur_g38
01:47:32  45  ,eur_g39
01:47:32  46  ,eur_g40
01:47:32  47  ,eur_g41
01:47:32  48  ,aud_g00
01:47:32  49  ,aud_g01
01:47:32  50  ,aud_g02
01:47:32  51  ,aud_g03
01:47:32  52  ,aud_g04
01:47:32  53  ,aud_g05
01:47:32  54  ,aud_g06
01:47:32  55  ,aud_g07
01:47:32  56  ,aud_g08
01:47:32  57  ,aud_g09
01:47:32  58  ,aud_g10
01:47:32  59  ,aud_g11
01:47:32  60  ,aud_g12
01:47:32  61  ,aud_g13
01:47:32  62  ,aud_g14
01:47:32  63  ,aud_g15
01:47:32  64  ,aud_g16
01:47:32  65  ,aud_g17
01:47:32  66  ,aud_g18
01:47:32  67  ,aud_g19
01:47:32  68  ,aud_g20
01:47:32  69  ,aud_g21
01:47:32  70  ,aud_g22
01:47:32  71  ,aud_g23
01:47:32  72  ,aud_g24
01:47:32  73  ,aud_g25
01:47:32  74  ,aud_g26
01:47:32  75  ,aud_g27
01:47:32  76  ,aud_g28
01:47:32  77  ,aud_g29
01:47:32  78  ,aud_g30
01:47:32  79  ,aud_g31
01:47:32  80  ,aud_g32
01:47:32  81  ,aud_g33
01:47:32  82  ,aud_g34
01:47:32  83  ,aud_g35
01:47:32  84  ,aud_g36
01:47:32  85  ,aud_g37
01:47:32  86  ,aud_g38
01:47:32  87  ,aud_g39
01:47:32  88  ,aud_g40
01:47:32  89  ,aud_g41
01:47:32  90  ,gbp_g00
01:47:32  91  ,gbp_g01
01:47:32  92  ,gbp_g02
01:47:32  93  ,gbp_g03
01:47:32  94  ,gbp_g04
01:47:32  95  ,gbp_g05
01:47:32  96  ,gbp_g06
01:47:32  97  ,gbp_g07
01:47:32  98  ,gbp_g08
01:47:32  99  ,gbp_g09
01:47:32 100  ,gbp_g10
01:47:32 101  ,gbp_g11
01:47:32 102  ,gbp_g12
01:47:32 103  ,gbp_g13
01:47:32 104  ,gbp_g14
01:47:32 105  ,gbp_g15
01:47:32 106  ,gbp_g16
01:47:32 107  ,gbp_g17
01:47:32 108  ,gbp_g18
01:47:32 109  ,gbp_g19
01:47:32 110  ,gbp_g20
01:47:32 111  ,gbp_g21
01:47:32 112  ,gbp_g22
01:47:32 113  ,gbp_g23
01:47:32 114  ,gbp_g24
01:47:32 115  ,gbp_g25
01:47:32 116  ,gbp_g26
01:47:32 117  ,gbp_g27
01:47:32 118  ,gbp_g28
01:47:32 119  ,gbp_g29
01:47:32 120  ,gbp_g30
01:47:32 121  ,gbp_g31
01:47:32 122  ,gbp_g32
01:47:32 123  ,gbp_g33
01:47:32 124  ,gbp_g34
01:47:32 125  ,gbp_g35
01:47:32 126  ,gbp_g36
01:47:32 127  ,gbp_g37
01:47:32 128  ,gbp_g38
01:47:32 129  ,gbp_g39
01:47:32 130  ,gbp_g40
01:47:32 131  ,gbp_g41
01:47:32 132  ,jpy_g00
01:47:32 133  ,jpy_g01
01:47:32 134  ,jpy_g02
01:47:32 135  ,jpy_g03
01:47:32 136  ,jpy_g04
01:47:32 137  ,jpy_g05
01:47:32 138  ,jpy_g06
01:47:32 139  ,jpy_g07
01:47:32 140  ,jpy_g08
01:47:32 141  ,jpy_g09
01:47:32 142  ,jpy_g10
01:47:32 143  ,jpy_g11
01:47:32 144  ,jpy_g12
01:47:32 145  ,jpy_g13
01:47:32 146  ,jpy_g14
01:47:32 147  ,jpy_g15
01:47:32 148  ,jpy_g16
01:47:32 149  ,jpy_g17
01:47:32 150  ,jpy_g18
01:47:32 151  ,jpy_g19
01:47:32 152  ,jpy_g20
01:47:32 153  ,jpy_g21
01:47:32 154  ,jpy_g22
01:47:32 155  ,jpy_g23
01:47:32 156  ,jpy_g24
01:47:32 157  ,jpy_g25
01:47:32 158  ,jpy_g26
01:47:32 159  ,jpy_g27
01:47:32 160  ,jpy_g28
01:47:32 161  ,jpy_g29
01:47:32 162  ,jpy_g30
01:47:32 163  ,jpy_g31
01:47:32 164  ,jpy_g32
01:47:32 165  ,jpy_g33
01:47:32 166  ,jpy_g34
01:47:32 167  ,jpy_g35
01:47:32 168  ,jpy_g36
01:47:32 169  ,jpy_g37
01:47:32 170  ,jpy_g38
01:47:32 171  ,jpy_g39
01:47:32 172  ,jpy_g40
01:47:32 173  ,jpy_g41
01:47:32 174  ,cad_g00
01:47:32 175  ,cad_g01
01:47:32 176  ,cad_g02
01:47:32 177  ,cad_g03
01:47:32 178  ,cad_g04
01:47:32 179  ,cad_g05
01:47:32 180  ,cad_g06
01:47:32 181  ,cad_g07
01:47:32 182  ,cad_g08
01:47:32 183  ,cad_g09
01:47:32 184  ,cad_g10
01:47:32 185  ,cad_g11
01:47:32 186  ,cad_g12
01:47:32 187  ,cad_g13
01:47:32 188  ,cad_g14
01:47:32 189  ,cad_g15
01:47:32 190  ,cad_g16
01:47:32 191  ,cad_g17
01:47:32 192  ,cad_g18
01:47:32 193  ,cad_g19
01:47:32 194  ,cad_g20
01:47:32 195  ,cad_g21
01:47:32 196  ,cad_g22
01:47:32 197  ,cad_g23
01:47:32 198  ,cad_g24
01:47:32 199  ,cad_g25
01:47:32 200  ,cad_g26
01:47:32 201  ,cad_g27
01:47:32 202  ,cad_g28
01:47:32 203  ,cad_g29
01:47:32 204  ,cad_g30
01:47:32 205  ,cad_g31
01:47:32 206  ,cad_g32
01:47:32 207  ,cad_g33
01:47:32 208  ,cad_g34
01:47:32 209  ,cad_g35
01:47:32 210  ,cad_g36
01:47:32 211  ,cad_g37
01:47:32 212  ,cad_g38
01:47:32 213  ,cad_g39
01:47:32 214  ,cad_g40
01:47:32 215  ,cad_g41
01:47:32 216  ,chf_g00
01:47:32 217  ,chf_g01
01:47:32 218  ,chf_g02
01:47:32 219  ,chf_g03
01:47:32 220  ,chf_g04
01:47:32 221  ,chf_g05
01:47:32 222  ,chf_g06
01:47:32 223  ,chf_g07
01:47:32 224  ,chf_g08
01:47:32 225  ,chf_g09
01:47:32 226  ,chf_g10
01:47:32 227  ,chf_g11
01:47:32 228  ,chf_g12
01:47:32 229  ,chf_g13
01:47:32 230  ,chf_g14
01:47:32 231  ,chf_g15
01:47:32 232  ,chf_g16
01:47:32 233  ,chf_g17
01:47:32 234  ,chf_g18
01:47:32 235  ,chf_g19
01:47:32 236  ,chf_g20
01:47:32 237  ,chf_g21
01:47:32 238  ,chf_g22
01:47:32 239  ,chf_g23
01:47:32 240  ,chf_g24
01:47:32 241  ,chf_g25
01:47:32 242  ,chf_g26
01:47:32 243  ,chf_g27
01:47:32 244  ,chf_g28
01:47:32 245  ,chf_g29
01:47:32 246  ,chf_g30
01:47:32 247  ,chf_g31
01:47:32 248  ,chf_g32
01:47:32 249  ,chf_g33
01:47:32 250  ,chf_g34
01:47:32 251  ,chf_g35
01:47:32 252  ,chf_g36
01:47:32 253  ,chf_g37
01:47:32 254  ,chf_g38
01:47:32 255  ,chf_g39
01:47:32 256  ,chf_g40
01:47:32 257  ,chf_g41
01:47:32 258  FROM aud_ms6 m
01:47:32 259  WHERE gattn IN('nup','up')
01:47:32 260  AND 1+m.ydate < '&1'||' '||'&2'
01:47:32 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2011-01-05'||' '||'01:30:00'

View created.

Elapsed: 00:00:00.20
01:47:32 SQL> 
01:47:32 SQL> -- rpt
01:47:32 SQL> 
01:47:32 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	    12651
up	     6347

Elapsed: 00:00:00.05
01:47:32 SQL> 
01:47:32 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
aud2011-01-04 01:25:00

Elapsed: 00:00:00.03
01:47:32 SQL> 
01:47:32 SQL> -- Now build model from bme and score sme
01:47:32 SQL> @score1gattn.sql
01:47:32 SQL> -- score1gattn.sql
01:47:32 SQL> 
01:47:32 SQL> -- Does the 1st SVM score
01:47:32 SQL> 
01:47:32 SQL> -- Fill up svmc_apply_prep
01:47:32 SQL> @score_gattn.sql
01:47:32 SQL> --
01:47:32 SQL> -- score_gattn.sql
01:47:32 SQL> --
01:47:32 SQL> 
01:47:32 SQL> -- usage: score_gattn.sql
01:47:32 SQL> 
01:47:32 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
01:47:32 SQL> 
01:47:32 SQL> DEFINE target	= 'gattn'
01:47:32 SQL> DEFINE model_name = 'forex15'
01:47:32 SQL> DEFINE bldtable	= 'bme'
01:47:32 SQL> DEFINE scoretable = 'sme'
01:47:32 SQL> DEFINE case_id	= 'prdate'
01:47:32 SQL> 
01:47:32 SQL> -- Define a variable to help me exclude some columns from some data mining calls
01:47:32 SQL> DEFINE exclude1 = "'&target','&case_id'"
01:47:32 SQL> 
01:47:32 SQL> -- Builds an SVM model using pl/sql.
01:47:32 SQL> 
01:47:32 SQL> -----------------------------------------------------------------------
01:47:32 SQL> --			    BUILD THE MODEL
01:47:32 SQL> -----------------------------------------------------------------------
01:47:32 SQL> 
01:47:32 SQL> -- Cleanup old build data preparation objects for repeat runs
01:47:32 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.01
01:47:32 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
01:47:32 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.00
01:47:32 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.00
01:47:32 SQL> 
01:47:32 SQL> 
01:47:32 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
01:47:32 SQL> --
01:47:32 SQL> -- DROP	TABLE svmc_settings ;
01:47:32 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
01:47:32 SQL> -- DELETE svmc_settings;
01:47:32 SQL> 
01:47:32 SQL> -- The default classification algorithm is Naive Bayes. So override
01:47:32 SQL> -- this choice to SVM using a settings table.
01:47:32 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
01:47:32 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
01:47:32 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
01:47:32 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
01:47:32 SQL> -- models.
01:47:32 SQL> --
01:47:32 SQL> 
01:47:32 SQL> -- Do this once and then comment it out.
01:47:32 SQL> -- That makes script go faster.
01:47:32 SQL> -- BEGIN
01:47:32 SQL> -- -- Populate settings table
01:47:32 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
01:47:32 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
01:47:32 SQL> --
01:47:32 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
01:47:32 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
01:47:32 SQL> --
01:47:32 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
01:47:32 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
01:47:32 SQL> --   COMMIT;
01:47:32 SQL> -- END;
01:47:32 SQL> -- /
01:47:32 SQL> 
01:47:32 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.01
01:47:32 SQL> 
01:47:32 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
01:47:32   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:47:32   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
01:47:32 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
01:47:32   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:47:32   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
01:47:32 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
01:47:32   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:47:32   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
01:47:32 SQL> 
01:47:32 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
01:47:32   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:47:32   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
01:47:33 SQL> 
01:47:33 SQL> --------------------------------
01:47:33 SQL> -- PREPARE BUILD (TRAINING) DATA
01:47:33 SQL> --
01:47:33 SQL> 
01:47:33 SQL> -- 1. Missing Value treatment for all Predictors and
01:47:33 SQL> -- 2. Outlier Treatment and
01:47:33 SQL> -- 3. Normalization are performed below.
01:47:33 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
01:47:33 SQL> --    normalized here.
01:47:33 SQL> 
01:47:33 SQL> BEGIN
01:47:33   2  	-- Perform missing value treatment for all predictors
01:47:33   3  	-- create miss tables
01:47:33   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
01:47:33   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
01:47:33   6  
01:47:33   7  	-- populate miss tables
01:47:33   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
01:47:33   9  	  miss_table_name => 'svmc_miss_num',
01:47:33  10  	  data_table_name => '&bldtable',
01:47:33  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
01:47:33  12  
01:47:33  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
01:47:33  14  	  miss_table_name => 'svmc_miss_cat',
01:47:33  15  	  data_table_name => '&bldtable',
01:47:33  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
01:47:33  17  
01:47:33  18  	-- xform input data to replace missing values
01:47:33  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
01:47:33  20  	  miss_table_name => 'svmc_miss_num',
01:47:33  21  	  data_table_name => '&bldtable',
01:47:33  22  	  xform_view_name => 'xformed_build_miss_num');
01:47:33  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
01:47:33  24  	  miss_table_name => 'svmc_miss_cat',
01:47:33  25  	  data_table_name => '&bldtable',
01:47:33  26  	  xform_view_name => 'xformed_build_miss_cat');
01:47:33  27  
01:47:33  28  	-- Perform outlier treatment.
01:47:33  29  	-- create clip table
01:47:33  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
01:47:33  31  
01:47:33  32  	-- populate clip table
01:47:33  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
01:47:33  34  	  clip_table_name => 'svmc_clip',
01:47:33  35  	  data_table_name => '&bldtable',
01:47:33  36  	  tail_frac	  => 0.025,
01:47:33  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
01:47:33  38  
01:47:33  39  	-- xform input data to winsorized data
01:47:33  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
01:47:33  41  	  clip_table_name => 'svmc_clip',
01:47:33  42  	  data_table_name => '&bldtable',
01:47:33  43  	  xform_view_name => 'svmc_winsor');
01:47:33  44  
01:47:33  45  	-- create normalization table
01:47:33  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
01:47:33  47  
01:47:33  48  	-- populate normalization table based on winsorized data
01:47:33  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
01:47:33  50  	  norm_table_name => 'svmc_norm',
01:47:33  51  	  data_table_name => 'svmc_winsor',
01:47:33  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
01:47:33  53  
01:47:33  54  	-- normalize the original data
01:47:33  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
01:47:33  56  	  norm_table_name => 'svmc_norm',
01:47:33  57  	  data_table_name => '&bldtable',
01:47:33  58  	  xform_view_name => 'svmc_build_prep');
01:47:33  59  END;
01:47:33  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:21.47
01:47:54 SQL> 
01:47:54 SQL> ---------------------
01:47:54 SQL> -- CREATE A NEW MODEL
01:47:54 SQL> --
01:47:54 SQL> -- Cleanup old model with the same name for repeat runs
01:47:54 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
01:47:54   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:47:54   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex15');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.10
01:47:55 SQL> 
01:47:55 SQL> -- Build a new SVM Model
01:47:55 SQL> BEGIN
01:47:55   2  	DBMS_DATA_MINING.CREATE_MODEL(
01:47:55   3  	  model_name	      => '&model_name',
01:47:55   4  	  mining_function     => dbms_data_mining.classification,
01:47:55   5  	  data_table_name     => 'svmc_build_prep',
01:47:55   6  	  case_id_column_name => '&case_id',
01:47:55   7  	  target_column_name  => '&target',
01:47:55   8  	  settings_table_name => 'svmc_settings');
01:47:55   9  END;
01:47:55  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex15',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:28.21
01:48:23 SQL> 
01:48:23 SQL> -----------------------------------------------------------------------
01:48:23 SQL> --			       APPLY/score THE MODEL
01:48:23 SQL> -----------------------------------------------------------------------
01:48:23 SQL> 
01:48:23 SQL> -- Cleanup old scoring data preparation objects for repeat runs
01:48:23 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
01:48:23   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:48:23   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.13
01:48:23 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
01:48:23   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:48:23   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.12
01:48:24 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
01:48:24   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:48:24   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
01:48:24 SQL> -----------------------
01:48:24 SQL> -- PREPARE SCORING DATA
01:48:24 SQL> --
01:48:24 SQL> -- If the data for model creation has been prepared, then the data
01:48:24 SQL> -- to be scored using the model must be prepared in the same manner
01:48:24 SQL> -- in order to obtain meaningful results.
01:48:24 SQL> --
01:48:24 SQL> -- 1. Missing Value treatment for all Predictors and
01:48:24 SQL> -- 2. Normalization
01:48:24 SQL> -- No outlier treatment will be performed during test and apply. The
01:48:24 SQL> -- normalization step is sufficient, since the normalization parameters
01:48:24 SQL> -- already capture the effects of outlier treatment done with build data.
01:48:24 SQL> --
01:48:24 SQL> BEGIN
01:48:24   2  	-- Xform Test data to replace missing values
01:48:24   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
01:48:24   4  	  miss_table_name => 'svmc_miss_num',
01:48:24   5  	  data_table_name => '&scoretable',
01:48:24   6  	  xform_view_name => 'xformed_apply_miss_num');
01:48:24   7  
01:48:24   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
01:48:24   9  	  miss_table_name => 'svmc_miss_cat',
01:48:24  10  	  data_table_name => '&scoretable',
01:48:24  11  	  xform_view_name => 'xformed_apply_miss_cat');
01:48:24  12  
01:48:24  13  	-- Normalize the data to be scored
01:48:24  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
01:48:24  15  	  norm_table_name => 'svmc_norm',
01:48:24  16  	  data_table_name => '&scoretable',
01:48:24  17  	  xform_view_name => 'svmc_apply_prep');
01:48:24  18  END;
01:48:24  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:03.90
01:48:28 SQL> 
01:48:28 SQL> -- Use same model_name used in score_gattn.sql
01:48:28 SQL> DEFINE model_name = 'forex15'
01:48:28 SQL> 
01:48:28 SQL> DELETE fxscores6_gattn WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.08
01:48:28 SQL> 
01:48:28 SQL> INSERT INTO fxscores6_gattn (prdate,score,rundate,pair,ydate)
01:48:28   2  SELECT
01:48:28   3  prdate
01:48:28   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
01:48:28   5  ,sysdate
01:48:28   6  ,SUBSTR(prdate,1,3)pair
01:48:28   7  ,SUBSTR(prdate,4,19)ydate
01:48:28   8  FROM svmc_apply_prep
01:48:28   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex15,'up' USING *)score

1 row created.

Elapsed: 00:00:00.33
01:48:28 SQL> @aud_score1day_gattn.sql	2011-01-05 01:35:00
01:48:28 SQL> --
01:48:28 SQL> -- aud_score1day_gattn.sql
01:48:28 SQL> --
01:48:28 SQL> 
01:48:28 SQL> CREATE OR REPLACE VIEW sme AS
01:48:28   2  SELECT
01:48:28   3  'aud'||m.ydate prdate
01:48:28   4  ,NULL gattn
01:48:28   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
01:48:28   6  ,eur_g00
01:48:28   7  ,eur_g01
01:48:28   8  ,eur_g02
01:48:28   9  ,eur_g03
01:48:28  10  ,eur_g04
01:48:28  11  ,eur_g05
01:48:28  12  ,eur_g06
01:48:28  13  ,eur_g07
01:48:28  14  ,eur_g08
01:48:28  15  ,eur_g09
01:48:28  16  ,eur_g10
01:48:28  17  ,eur_g11
01:48:28  18  ,eur_g12
01:48:28  19  ,eur_g13
01:48:28  20  ,eur_g14
01:48:28  21  ,eur_g15
01:48:28  22  ,eur_g16
01:48:28  23  ,eur_g17
01:48:28  24  ,eur_g18
01:48:28  25  ,eur_g19
01:48:28  26  ,eur_g20
01:48:28  27  ,eur_g21
01:48:28  28  ,eur_g22
01:48:28  29  ,eur_g23
01:48:28  30  ,eur_g24
01:48:28  31  ,eur_g25
01:48:28  32  ,eur_g26
01:48:28  33  ,eur_g27
01:48:28  34  ,eur_g28
01:48:28  35  ,eur_g29
01:48:28  36  ,eur_g30
01:48:28  37  ,eur_g31
01:48:28  38  ,eur_g32
01:48:28  39  ,eur_g33
01:48:28  40  ,eur_g34
01:48:28  41  ,eur_g35
01:48:28  42  ,eur_g36
01:48:28  43  ,eur_g37
01:48:28  44  ,eur_g38
01:48:28  45  ,eur_g39
01:48:28  46  ,eur_g40
01:48:28  47  ,eur_g41
01:48:28  48  ,aud_g00
01:48:28  49  ,aud_g01
01:48:28  50  ,aud_g02
01:48:28  51  ,aud_g03
01:48:28  52  ,aud_g04
01:48:28  53  ,aud_g05
01:48:28  54  ,aud_g06
01:48:28  55  ,aud_g07
01:48:28  56  ,aud_g08
01:48:28  57  ,aud_g09
01:48:28  58  ,aud_g10
01:48:28  59  ,aud_g11
01:48:28  60  ,aud_g12
01:48:28  61  ,aud_g13
01:48:28  62  ,aud_g14
01:48:28  63  ,aud_g15
01:48:28  64  ,aud_g16
01:48:28  65  ,aud_g17
01:48:28  66  ,aud_g18
01:48:28  67  ,aud_g19
01:48:28  68  ,aud_g20
01:48:28  69  ,aud_g21
01:48:28  70  ,aud_g22
01:48:28  71  ,aud_g23
01:48:28  72  ,aud_g24
01:48:28  73  ,aud_g25
01:48:28  74  ,aud_g26
01:48:28  75  ,aud_g27
01:48:28  76  ,aud_g28
01:48:28  77  ,aud_g29
01:48:28  78  ,aud_g30
01:48:28  79  ,aud_g31
01:48:28  80  ,aud_g32
01:48:28  81  ,aud_g33
01:48:28  82  ,aud_g34
01:48:28  83  ,aud_g35
01:48:28  84  ,aud_g36
01:48:28  85  ,aud_g37
01:48:28  86  ,aud_g38
01:48:28  87  ,aud_g39
01:48:28  88  ,aud_g40
01:48:28  89  ,aud_g41
01:48:28  90  ,gbp_g00
01:48:28  91  ,gbp_g01
01:48:28  92  ,gbp_g02
01:48:28  93  ,gbp_g03
01:48:28  94  ,gbp_g04
01:48:28  95  ,gbp_g05
01:48:28  96  ,gbp_g06
01:48:28  97  ,gbp_g07
01:48:28  98  ,gbp_g08
01:48:28  99  ,gbp_g09
01:48:28 100  ,gbp_g10
01:48:28 101  ,gbp_g11
01:48:28 102  ,gbp_g12
01:48:28 103  ,gbp_g13
01:48:28 104  ,gbp_g14
01:48:28 105  ,gbp_g15
01:48:28 106  ,gbp_g16
01:48:28 107  ,gbp_g17
01:48:28 108  ,gbp_g18
01:48:28 109  ,gbp_g19
01:48:28 110  ,gbp_g20
01:48:28 111  ,gbp_g21
01:48:28 112  ,gbp_g22
01:48:28 113  ,gbp_g23
01:48:28 114  ,gbp_g24
01:48:28 115  ,gbp_g25
01:48:28 116  ,gbp_g26
01:48:28 117  ,gbp_g27
01:48:28 118  ,gbp_g28
01:48:28 119  ,gbp_g29
01:48:28 120  ,gbp_g30
01:48:28 121  ,gbp_g31
01:48:28 122  ,gbp_g32
01:48:28 123  ,gbp_g33
01:48:28 124  ,gbp_g34
01:48:28 125  ,gbp_g35
01:48:28 126  ,gbp_g36
01:48:28 127  ,gbp_g37
01:48:28 128  ,gbp_g38
01:48:28 129  ,gbp_g39
01:48:28 130  ,gbp_g40
01:48:28 131  ,gbp_g41
01:48:28 132  ,jpy_g00
01:48:28 133  ,jpy_g01
01:48:28 134  ,jpy_g02
01:48:28 135  ,jpy_g03
01:48:28 136  ,jpy_g04
01:48:28 137  ,jpy_g05
01:48:28 138  ,jpy_g06
01:48:28 139  ,jpy_g07
01:48:28 140  ,jpy_g08
01:48:28 141  ,jpy_g09
01:48:28 142  ,jpy_g10
01:48:28 143  ,jpy_g11
01:48:28 144  ,jpy_g12
01:48:28 145  ,jpy_g13
01:48:28 146  ,jpy_g14
01:48:28 147  ,jpy_g15
01:48:28 148  ,jpy_g16
01:48:28 149  ,jpy_g17
01:48:28 150  ,jpy_g18
01:48:28 151  ,jpy_g19
01:48:28 152  ,jpy_g20
01:48:28 153  ,jpy_g21
01:48:28 154  ,jpy_g22
01:48:28 155  ,jpy_g23
01:48:28 156  ,jpy_g24
01:48:28 157  ,jpy_g25
01:48:28 158  ,jpy_g26
01:48:28 159  ,jpy_g27
01:48:28 160  ,jpy_g28
01:48:28 161  ,jpy_g29
01:48:28 162  ,jpy_g30
01:48:28 163  ,jpy_g31
01:48:28 164  ,jpy_g32
01:48:28 165  ,jpy_g33
01:48:28 166  ,jpy_g34
01:48:28 167  ,jpy_g35
01:48:28 168  ,jpy_g36
01:48:28 169  ,jpy_g37
01:48:28 170  ,jpy_g38
01:48:28 171  ,jpy_g39
01:48:28 172  ,jpy_g40
01:48:28 173  ,jpy_g41
01:48:28 174  ,cad_g00
01:48:28 175  ,cad_g01
01:48:28 176  ,cad_g02
01:48:28 177  ,cad_g03
01:48:28 178  ,cad_g04
01:48:28 179  ,cad_g05
01:48:28 180  ,cad_g06
01:48:28 181  ,cad_g07
01:48:28 182  ,cad_g08
01:48:28 183  ,cad_g09
01:48:28 184  ,cad_g10
01:48:28 185  ,cad_g11
01:48:28 186  ,cad_g12
01:48:28 187  ,cad_g13
01:48:28 188  ,cad_g14
01:48:28 189  ,cad_g15
01:48:28 190  ,cad_g16
01:48:28 191  ,cad_g17
01:48:28 192  ,cad_g18
01:48:28 193  ,cad_g19
01:48:28 194  ,cad_g20
01:48:28 195  ,cad_g21
01:48:28 196  ,cad_g22
01:48:28 197  ,cad_g23
01:48:28 198  ,cad_g24
01:48:28 199  ,cad_g25
01:48:28 200  ,cad_g26
01:48:28 201  ,cad_g27
01:48:28 202  ,cad_g28
01:48:28 203  ,cad_g29
01:48:28 204  ,cad_g30
01:48:28 205  ,cad_g31
01:48:28 206  ,cad_g32
01:48:28 207  ,cad_g33
01:48:28 208  ,cad_g34
01:48:28 209  ,cad_g35
01:48:28 210  ,cad_g36
01:48:28 211  ,cad_g37
01:48:28 212  ,cad_g38
01:48:28 213  ,cad_g39
01:48:28 214  ,cad_g40
01:48:28 215  ,cad_g41
01:48:28 216  ,chf_g00
01:48:28 217  ,chf_g01
01:48:28 218  ,chf_g02
01:48:28 219  ,chf_g03
01:48:28 220  ,chf_g04
01:48:28 221  ,chf_g05
01:48:28 222  ,chf_g06
01:48:28 223  ,chf_g07
01:48:28 224  ,chf_g08
01:48:28 225  ,chf_g09
01:48:28 226  ,chf_g10
01:48:28 227  ,chf_g11
01:48:28 228  ,chf_g12
01:48:28 229  ,chf_g13
01:48:28 230  ,chf_g14
01:48:28 231  ,chf_g15
01:48:28 232  ,chf_g16
01:48:28 233  ,chf_g17
01:48:28 234  ,chf_g18
01:48:28 235  ,chf_g19
01:48:28 236  ,chf_g20
01:48:28 237  ,chf_g21
01:48:28 238  ,chf_g22
01:48:28 239  ,chf_g23
01:48:28 240  ,chf_g24
01:48:28 241  ,chf_g25
01:48:28 242  ,chf_g26
01:48:28 243  ,chf_g27
01:48:28 244  ,chf_g28
01:48:28 245  ,chf_g29
01:48:28 246  ,chf_g30
01:48:28 247  ,chf_g31
01:48:28 248  ,chf_g32
01:48:28 249  ,chf_g33
01:48:28 250  ,chf_g34
01:48:28 251  ,chf_g35
01:48:28 252  ,chf_g36
01:48:28 253  ,chf_g37
01:48:28 254  ,chf_g38
01:48:28 255  ,chf_g39
01:48:28 256  ,chf_g40
01:48:28 257  ,chf_g41
01:48:28 258  FROM aud_ms6 m
01:48:28 259  WHERE m.ydate = '&1'||' '||'&2'
01:48:28 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2011-01-05'||' '||'01:35:00'

View created.

Elapsed: 00:00:00.27
01:48:28 SQL> 
01:48:28 SQL> -- rpt
01:48:28 SQL> -- We should see just 1 row:
01:48:28 SQL> 
01:48:28 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
01:48:28 SQL> 
01:48:28 SQL> -- Build the model:
01:48:28 SQL> CREATE OR REPLACE VIEW bme AS
01:48:28   2  SELECT
01:48:28   3  'aud'||m.ydate prdate
01:48:28   4  ,gattn
01:48:28   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
01:48:28   6  ,eur_g00
01:48:28   7  ,eur_g01
01:48:28   8  ,eur_g02
01:48:28   9  ,eur_g03
01:48:28  10  ,eur_g04
01:48:28  11  ,eur_g05
01:48:28  12  ,eur_g06
01:48:28  13  ,eur_g07
01:48:28  14  ,eur_g08
01:48:28  15  ,eur_g09
01:48:28  16  ,eur_g10
01:48:28  17  ,eur_g11
01:48:28  18  ,eur_g12
01:48:28  19  ,eur_g13
01:48:28  20  ,eur_g14
01:48:28  21  ,eur_g15
01:48:28  22  ,eur_g16
01:48:28  23  ,eur_g17
01:48:28  24  ,eur_g18
01:48:28  25  ,eur_g19
01:48:28  26  ,eur_g20
01:48:28  27  ,eur_g21
01:48:28  28  ,eur_g22
01:48:28  29  ,eur_g23
01:48:28  30  ,eur_g24
01:48:28  31  ,eur_g25
01:48:28  32  ,eur_g26
01:48:28  33  ,eur_g27
01:48:28  34  ,eur_g28
01:48:28  35  ,eur_g29
01:48:28  36  ,eur_g30
01:48:28  37  ,eur_g31
01:48:28  38  ,eur_g32
01:48:28  39  ,eur_g33
01:48:28  40  ,eur_g34
01:48:28  41  ,eur_g35
01:48:28  42  ,eur_g36
01:48:28  43  ,eur_g37
01:48:28  44  ,eur_g38
01:48:28  45  ,eur_g39
01:48:28  46  ,eur_g40
01:48:28  47  ,eur_g41
01:48:28  48  ,aud_g00
01:48:28  49  ,aud_g01
01:48:28  50  ,aud_g02
01:48:28  51  ,aud_g03
01:48:28  52  ,aud_g04
01:48:28  53  ,aud_g05
01:48:28  54  ,aud_g06
01:48:28  55  ,aud_g07
01:48:28  56  ,aud_g08
01:48:28  57  ,aud_g09
01:48:28  58  ,aud_g10
01:48:28  59  ,aud_g11
01:48:28  60  ,aud_g12
01:48:28  61  ,aud_g13
01:48:28  62  ,aud_g14
01:48:28  63  ,aud_g15
01:48:28  64  ,aud_g16
01:48:28  65  ,aud_g17
01:48:28  66  ,aud_g18
01:48:28  67  ,aud_g19
01:48:28  68  ,aud_g20
01:48:28  69  ,aud_g21
01:48:28  70  ,aud_g22
01:48:28  71  ,aud_g23
01:48:28  72  ,aud_g24
01:48:28  73  ,aud_g25
01:48:28  74  ,aud_g26
01:48:28  75  ,aud_g27
01:48:28  76  ,aud_g28
01:48:28  77  ,aud_g29
01:48:28  78  ,aud_g30
01:48:28  79  ,aud_g31
01:48:28  80  ,aud_g32
01:48:28  81  ,aud_g33
01:48:28  82  ,aud_g34
01:48:28  83  ,aud_g35
01:48:28  84  ,aud_g36
01:48:28  85  ,aud_g37
01:48:28  86  ,aud_g38
01:48:28  87  ,aud_g39
01:48:28  88  ,aud_g40
01:48:28  89  ,aud_g41
01:48:28  90  ,gbp_g00
01:48:28  91  ,gbp_g01
01:48:28  92  ,gbp_g02
01:48:28  93  ,gbp_g03
01:48:28  94  ,gbp_g04
01:48:28  95  ,gbp_g05
01:48:28  96  ,gbp_g06
01:48:28  97  ,gbp_g07
01:48:28  98  ,gbp_g08
01:48:28  99  ,gbp_g09
01:48:28 100  ,gbp_g10
01:48:28 101  ,gbp_g11
01:48:28 102  ,gbp_g12
01:48:28 103  ,gbp_g13
01:48:28 104  ,gbp_g14
01:48:28 105  ,gbp_g15
01:48:28 106  ,gbp_g16
01:48:28 107  ,gbp_g17
01:48:28 108  ,gbp_g18
01:48:28 109  ,gbp_g19
01:48:28 110  ,gbp_g20
01:48:28 111  ,gbp_g21
01:48:28 112  ,gbp_g22
01:48:28 113  ,gbp_g23
01:48:28 114  ,gbp_g24
01:48:28 115  ,gbp_g25
01:48:28 116  ,gbp_g26
01:48:28 117  ,gbp_g27
01:48:28 118  ,gbp_g28
01:48:28 119  ,gbp_g29
01:48:28 120  ,gbp_g30
01:48:28 121  ,gbp_g31
01:48:28 122  ,gbp_g32
01:48:28 123  ,gbp_g33
01:48:28 124  ,gbp_g34
01:48:28 125  ,gbp_g35
01:48:28 126  ,gbp_g36
01:48:28 127  ,gbp_g37
01:48:28 128  ,gbp_g38
01:48:28 129  ,gbp_g39
01:48:28 130  ,gbp_g40
01:48:28 131  ,gbp_g41
01:48:28 132  ,jpy_g00
01:48:28 133  ,jpy_g01
01:48:28 134  ,jpy_g02
01:48:28 135  ,jpy_g03
01:48:28 136  ,jpy_g04
01:48:28 137  ,jpy_g05
01:48:28 138  ,jpy_g06
01:48:28 139  ,jpy_g07
01:48:28 140  ,jpy_g08
01:48:28 141  ,jpy_g09
01:48:28 142  ,jpy_g10
01:48:28 143  ,jpy_g11
01:48:28 144  ,jpy_g12
01:48:28 145  ,jpy_g13
01:48:28 146  ,jpy_g14
01:48:28 147  ,jpy_g15
01:48:28 148  ,jpy_g16
01:48:28 149  ,jpy_g17
01:48:28 150  ,jpy_g18
01:48:28 151  ,jpy_g19
01:48:28 152  ,jpy_g20
01:48:28 153  ,jpy_g21
01:48:28 154  ,jpy_g22
01:48:28 155  ,jpy_g23
01:48:28 156  ,jpy_g24
01:48:28 157  ,jpy_g25
01:48:28 158  ,jpy_g26
01:48:28 159  ,jpy_g27
01:48:28 160  ,jpy_g28
01:48:28 161  ,jpy_g29
01:48:28 162  ,jpy_g30
01:48:28 163  ,jpy_g31
01:48:28 164  ,jpy_g32
01:48:28 165  ,jpy_g33
01:48:28 166  ,jpy_g34
01:48:28 167  ,jpy_g35
01:48:28 168  ,jpy_g36
01:48:28 169  ,jpy_g37
01:48:28 170  ,jpy_g38
01:48:28 171  ,jpy_g39
01:48:28 172  ,jpy_g40
01:48:28 173  ,jpy_g41
01:48:28 174  ,cad_g00
01:48:28 175  ,cad_g01
01:48:28 176  ,cad_g02
01:48:28 177  ,cad_g03
01:48:28 178  ,cad_g04
01:48:28 179  ,cad_g05
01:48:28 180  ,cad_g06
01:48:28 181  ,cad_g07
01:48:28 182  ,cad_g08
01:48:28 183  ,cad_g09
01:48:28 184  ,cad_g10
01:48:28 185  ,cad_g11
01:48:28 186  ,cad_g12
01:48:28 187  ,cad_g13
01:48:28 188  ,cad_g14
01:48:28 189  ,cad_g15
01:48:28 190  ,cad_g16
01:48:28 191  ,cad_g17
01:48:28 192  ,cad_g18
01:48:28 193  ,cad_g19
01:48:28 194  ,cad_g20
01:48:28 195  ,cad_g21
01:48:28 196  ,cad_g22
01:48:28 197  ,cad_g23
01:48:28 198  ,cad_g24
01:48:28 199  ,cad_g25
01:48:28 200  ,cad_g26
01:48:28 201  ,cad_g27
01:48:28 202  ,cad_g28
01:48:28 203  ,cad_g29
01:48:28 204  ,cad_g30
01:48:28 205  ,cad_g31
01:48:28 206  ,cad_g32
01:48:28 207  ,cad_g33
01:48:28 208  ,cad_g34
01:48:28 209  ,cad_g35
01:48:28 210  ,cad_g36
01:48:28 211  ,cad_g37
01:48:28 212  ,cad_g38
01:48:28 213  ,cad_g39
01:48:28 214  ,cad_g40
01:48:28 215  ,cad_g41
01:48:28 216  ,chf_g00
01:48:28 217  ,chf_g01
01:48:28 218  ,chf_g02
01:48:28 219  ,chf_g03
01:48:28 220  ,chf_g04
01:48:28 221  ,chf_g05
01:48:28 222  ,chf_g06
01:48:28 223  ,chf_g07
01:48:28 224  ,chf_g08
01:48:28 225  ,chf_g09
01:48:28 226  ,chf_g10
01:48:28 227  ,chf_g11
01:48:28 228  ,chf_g12
01:48:28 229  ,chf_g13
01:48:28 230  ,chf_g14
01:48:28 231  ,chf_g15
01:48:28 232  ,chf_g16
01:48:28 233  ,chf_g17
01:48:28 234  ,chf_g18
01:48:28 235  ,chf_g19
01:48:28 236  ,chf_g20
01:48:28 237  ,chf_g21
01:48:28 238  ,chf_g22
01:48:28 239  ,chf_g23
01:48:28 240  ,chf_g24
01:48:28 241  ,chf_g25
01:48:28 242  ,chf_g26
01:48:28 243  ,chf_g27
01:48:28 244  ,chf_g28
01:48:28 245  ,chf_g29
01:48:28 246  ,chf_g30
01:48:28 247  ,chf_g31
01:48:28 248  ,chf_g32
01:48:28 249  ,chf_g33
01:48:28 250  ,chf_g34
01:48:28 251  ,chf_g35
01:48:28 252  ,chf_g36
01:48:28 253  ,chf_g37
01:48:28 254  ,chf_g38
01:48:28 255  ,chf_g39
01:48:28 256  ,chf_g40
01:48:28 257  ,chf_g41
01:48:28 258  FROM aud_ms6 m
01:48:28 259  WHERE gattn IN('nup','up')
01:48:28 260  AND 1+m.ydate < '&1'||' '||'&2'
01:48:28 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2011-01-05'||' '||'01:35:00'

View created.

Elapsed: 00:00:00.25
01:48:29 SQL> 
01:48:29 SQL> -- rpt
01:48:29 SQL> 
01:48:29 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	    12651
up	     6348

Elapsed: 00:00:00.05
01:48:29 SQL> 
01:48:29 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
aud2011-01-04 01:30:00

Elapsed: 00:00:00.03
01:48:29 SQL> 
01:48:29 SQL> -- Now build model from bme and score sme
01:48:29 SQL> @score1gattn.sql
01:48:29 SQL> -- score1gattn.sql
01:48:29 SQL> 
01:48:29 SQL> -- Does the 1st SVM score
01:48:29 SQL> 
01:48:29 SQL> -- Fill up svmc_apply_prep
01:48:29 SQL> @score_gattn.sql
01:48:29 SQL> --
01:48:29 SQL> -- score_gattn.sql
01:48:29 SQL> --
01:48:29 SQL> 
01:48:29 SQL> -- usage: score_gattn.sql
01:48:29 SQL> 
01:48:29 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
01:48:29 SQL> 
01:48:29 SQL> DEFINE target	= 'gattn'
01:48:29 SQL> DEFINE model_name = 'forex15'
01:48:29 SQL> DEFINE bldtable	= 'bme'
01:48:29 SQL> DEFINE scoretable = 'sme'
01:48:29 SQL> DEFINE case_id	= 'prdate'
01:48:29 SQL> 
01:48:29 SQL> -- Define a variable to help me exclude some columns from some data mining calls
01:48:29 SQL> DEFINE exclude1 = "'&target','&case_id'"
01:48:29 SQL> 
01:48:29 SQL> -- Builds an SVM model using pl/sql.
01:48:29 SQL> 
01:48:29 SQL> -----------------------------------------------------------------------
01:48:29 SQL> --			    BUILD THE MODEL
01:48:29 SQL> -----------------------------------------------------------------------
01:48:29 SQL> 
01:48:29 SQL> -- Cleanup old build data preparation objects for repeat runs
01:48:29 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.01
01:48:29 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
01:48:29 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.00
01:48:29 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.00
01:48:29 SQL> 
01:48:29 SQL> 
01:48:29 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
01:48:29 SQL> --
01:48:29 SQL> -- DROP	TABLE svmc_settings ;
01:48:29 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
01:48:29 SQL> -- DELETE svmc_settings;
01:48:29 SQL> 
01:48:29 SQL> -- The default classification algorithm is Naive Bayes. So override
01:48:29 SQL> -- this choice to SVM using a settings table.
01:48:29 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
01:48:29 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
01:48:29 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
01:48:29 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
01:48:29 SQL> -- models.
01:48:29 SQL> --
01:48:29 SQL> 
01:48:29 SQL> -- Do this once and then comment it out.
01:48:29 SQL> -- That makes script go faster.
01:48:29 SQL> -- BEGIN
01:48:29 SQL> -- -- Populate settings table
01:48:29 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
01:48:29 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
01:48:29 SQL> --
01:48:29 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
01:48:29 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
01:48:29 SQL> --
01:48:29 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
01:48:29 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
01:48:29 SQL> --   COMMIT;
01:48:29 SQL> -- END;
01:48:29 SQL> -- /
01:48:29 SQL> 
01:48:29 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
01:48:29 SQL> 
01:48:29 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
01:48:29   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:48:29   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
01:48:29 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
01:48:29   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:48:29   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
01:48:29 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
01:48:29   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:48:29   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
01:48:29 SQL> 
01:48:29 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
01:48:29   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:48:29   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
01:48:29 SQL> 
01:48:29 SQL> --------------------------------
01:48:29 SQL> -- PREPARE BUILD (TRAINING) DATA
01:48:29 SQL> --
01:48:29 SQL> 
01:48:29 SQL> -- 1. Missing Value treatment for all Predictors and
01:48:29 SQL> -- 2. Outlier Treatment and
01:48:29 SQL> -- 3. Normalization are performed below.
01:48:29 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
01:48:29 SQL> --    normalized here.
01:48:29 SQL> 
01:48:29 SQL> BEGIN
01:48:29   2  	-- Perform missing value treatment for all predictors
01:48:29   3  	-- create miss tables
01:48:29   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
01:48:29   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
01:48:29   6  
01:48:29   7  	-- populate miss tables
01:48:29   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
01:48:29   9  	  miss_table_name => 'svmc_miss_num',
01:48:29  10  	  data_table_name => '&bldtable',
01:48:29  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
01:48:29  12  
01:48:29  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
01:48:29  14  	  miss_table_name => 'svmc_miss_cat',
01:48:29  15  	  data_table_name => '&bldtable',
01:48:29  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
01:48:29  17  
01:48:29  18  	-- xform input data to replace missing values
01:48:29  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
01:48:29  20  	  miss_table_name => 'svmc_miss_num',
01:48:29  21  	  data_table_name => '&bldtable',
01:48:29  22  	  xform_view_name => 'xformed_build_miss_num');
01:48:29  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
01:48:29  24  	  miss_table_name => 'svmc_miss_cat',
01:48:29  25  	  data_table_name => '&bldtable',
01:48:29  26  	  xform_view_name => 'xformed_build_miss_cat');
01:48:29  27  
01:48:29  28  	-- Perform outlier treatment.
01:48:29  29  	-- create clip table
01:48:29  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
01:48:29  31  
01:48:29  32  	-- populate clip table
01:48:29  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
01:48:29  34  	  clip_table_name => 'svmc_clip',
01:48:29  35  	  data_table_name => '&bldtable',
01:48:29  36  	  tail_frac	  => 0.025,
01:48:29  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
01:48:29  38  
01:48:29  39  	-- xform input data to winsorized data
01:48:29  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
01:48:29  41  	  clip_table_name => 'svmc_clip',
01:48:29  42  	  data_table_name => '&bldtable',
01:48:29  43  	  xform_view_name => 'svmc_winsor');
01:48:29  44  
01:48:29  45  	-- create normalization table
01:48:29  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
01:48:29  47  
01:48:29  48  	-- populate normalization table based on winsorized data
01:48:29  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
01:48:29  50  	  norm_table_name => 'svmc_norm',
01:48:29  51  	  data_table_name => 'svmc_winsor',
01:48:29  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
01:48:29  53  
01:48:29  54  	-- normalize the original data
01:48:29  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
01:48:29  56  	  norm_table_name => 'svmc_norm',
01:48:29  57  	  data_table_name => '&bldtable',
01:48:29  58  	  xform_view_name => 'svmc_build_prep');
01:48:29  59  END;
01:48:29  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:17.90
01:48:47 SQL> 
01:48:47 SQL> ---------------------
01:48:47 SQL> -- CREATE A NEW MODEL
01:48:47 SQL> --
01:48:47 SQL> -- Cleanup old model with the same name for repeat runs
01:48:47 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
01:48:47   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:48:47   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex15');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.08
01:48:48 SQL> 
01:48:48 SQL> -- Build a new SVM Model
01:48:48 SQL> BEGIN
01:48:48   2  	DBMS_DATA_MINING.CREATE_MODEL(
01:48:48   3  	  model_name	      => '&model_name',
01:48:48   4  	  mining_function     => dbms_data_mining.classification,
01:48:48   5  	  data_table_name     => 'svmc_build_prep',
01:48:48   6  	  case_id_column_name => '&case_id',
01:48:48   7  	  target_column_name  => '&target',
01:48:48   8  	  settings_table_name => 'svmc_settings');
01:48:48   9  END;
01:48:48  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex15',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:27.80
01:49:16 SQL> 
01:49:16 SQL> -----------------------------------------------------------------------
01:49:16 SQL> --			       APPLY/score THE MODEL
01:49:16 SQL> -----------------------------------------------------------------------
01:49:16 SQL> 
01:49:16 SQL> -- Cleanup old scoring data preparation objects for repeat runs
01:49:16 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
01:49:16   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:49:16   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
01:49:16 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
01:49:16   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:49:16   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
01:49:16 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
01:49:16   2  EXCEPTION WHEN OTHERS THEN NULL; END;
01:49:16   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
01:49:16 SQL> -----------------------
01:49:16 SQL> -- PREPARE SCORING DATA
01:49:16 SQL> --
01:49:16 SQL> -- If the data for model creation has been prepared, then the data
01:49:16 SQL> -- to be scored using the model must be prepared in the same manner
01:49:16 SQL> -- in order to obtain meaningful results.
01:49:16 SQL> --
01:49:16 SQL> -- 1. Missing Value treatment for all Predictors and
01:49:16 SQL> -- 2. Normalization
01:49:16 SQL> -- No outlier treatment will be performed during test and apply. The
01:49:16 SQL> -- normalization step is sufficient, since the normalization parameters
01:49:16 SQL> -- already capture the effects of outlier treatment done with build data.
01:49:16 SQL> --
01:49:16 SQL> BEGIN
01:49:16   2  	-- Xform Test data to replace missing values
01:49:16   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
01:49:16   4  	  miss_table_name => 'svmc_miss_num',
01:49:16   5  	  data_table_name => '&scoretable',
01:49:16   6  	  xform_view_name => 'xformed_apply_miss_num');
01:49:16   7  
01:49:16   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
01:49:16   9  	  miss_table_name => 'svmc_miss_cat',
01:49:16  10  	  data_table_name => '&scoretable',
01:49:16  11  	  xform_view_name => 'xformed_apply_miss_cat');
01:49:16  12  
01:49:16  13  	-- Normalize the data to be scored
01:49:16  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
01:49:16  15  	  norm_table_name => 'svmc_norm',
01:49:16  16  	  data_table_name => '&scoretable',
01:49:16  17  	  xform_view_name => 'svmc_apply_prep');
01:49:16  18  END;
01:49:16  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.24
01:49:17 SQL> 
01:49:17 SQL> -- Use same model_name used in score_gattn.sql
01:49:17 SQL> DEFINE model_name = 'forex15'
01:49:17 SQL> 
01:49:17 SQL> DELETE fxscores6_gattn WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.05
01:49:17 SQL> 
01:49:17 SQL> INSERT INTO fxscores6_gattn (prdate,score,rundate,pair,ydate)
01:49:17   2  SELECT
01:49:17   3  prdate
01:49:17   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
01:49:17   5  ,sysdate
01:49:17   6  ,SUBSTR(prdate,1,3)pair
01:49:17   7  ,SUBSTR(prdate,4,19)ydate
01:49:17   8  FROM svmc_apply_prep
01:49:17   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex15,'up' USING *)score

1 row created.

Elapsed: 00:00:00.19
01:49:17 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
