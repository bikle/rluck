
SQL*Plus: Release 11.2.0.1.0 Production on Tue Jan 4 10:06:58 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

10:06:58 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
10:06:58 SQL> 10:06:58 SQL> @aud_score1day.sql  2011-01-04 09:45:00
10:06:58 SQL> --
10:06:58 SQL> -- aud_score1day.sql
10:06:58 SQL> --
10:06:58 SQL> 
10:06:58 SQL> CREATE OR REPLACE VIEW sme AS
10:06:58   2  SELECT
10:06:58   3  'aud'||m.ydate prdate
10:06:58   4  ,NULL gatt
10:06:58   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
10:06:58   6  ,eur_g00
10:06:58   7  ,eur_g01
10:06:58   8  ,eur_g02
10:06:58   9  ,eur_g03
10:06:58  10  ,eur_g04
10:06:58  11  ,eur_g05
10:06:58  12  ,eur_g06
10:06:58  13  ,eur_g07
10:06:58  14  ,eur_g08
10:06:58  15  ,eur_g09
10:06:58  16  ,eur_g10
10:06:58  17  ,eur_g11
10:06:58  18  ,eur_g12
10:06:58  19  ,eur_g13
10:06:58  20  ,eur_g14
10:06:58  21  ,eur_g15
10:06:58  22  ,eur_g16
10:06:58  23  ,eur_g17
10:06:58  24  ,eur_g18
10:06:58  25  ,eur_g19
10:06:58  26  ,eur_g20
10:06:58  27  ,eur_g21
10:06:58  28  ,eur_g22
10:06:58  29  ,eur_g23
10:06:58  30  ,eur_g24
10:06:58  31  ,eur_g25
10:06:58  32  ,eur_g26
10:06:58  33  ,eur_g27
10:06:58  34  ,eur_g28
10:06:58  35  ,eur_g29
10:06:58  36  ,eur_g30
10:06:58  37  ,eur_g31
10:06:58  38  ,eur_g32
10:06:58  39  ,eur_g33
10:06:58  40  ,eur_g34
10:06:58  41  ,eur_g35
10:06:58  42  ,eur_g36
10:06:58  43  ,eur_g37
10:06:58  44  ,eur_g38
10:06:58  45  ,eur_g39
10:06:58  46  ,eur_g40
10:06:58  47  ,eur_g41
10:06:58  48  ,aud_g00
10:06:58  49  ,aud_g01
10:06:58  50  ,aud_g02
10:06:58  51  ,aud_g03
10:06:58  52  ,aud_g04
10:06:58  53  ,aud_g05
10:06:58  54  ,aud_g06
10:06:58  55  ,aud_g07
10:06:58  56  ,aud_g08
10:06:58  57  ,aud_g09
10:06:58  58  ,aud_g10
10:06:58  59  ,aud_g11
10:06:58  60  ,aud_g12
10:06:58  61  ,aud_g13
10:06:58  62  ,aud_g14
10:06:58  63  ,aud_g15
10:06:58  64  ,aud_g16
10:06:58  65  ,aud_g17
10:06:58  66  ,aud_g18
10:06:58  67  ,aud_g19
10:06:58  68  ,aud_g20
10:06:58  69  ,aud_g21
10:06:58  70  ,aud_g22
10:06:58  71  ,aud_g23
10:06:58  72  ,aud_g24
10:06:58  73  ,aud_g25
10:06:58  74  ,aud_g26
10:06:58  75  ,aud_g27
10:06:58  76  ,aud_g28
10:06:58  77  ,aud_g29
10:06:58  78  ,aud_g30
10:06:58  79  ,aud_g31
10:06:58  80  ,aud_g32
10:06:58  81  ,aud_g33
10:06:58  82  ,aud_g34
10:06:58  83  ,aud_g35
10:06:58  84  ,aud_g36
10:06:58  85  ,aud_g37
10:06:58  86  ,aud_g38
10:06:58  87  ,aud_g39
10:06:58  88  ,aud_g40
10:06:58  89  ,aud_g41
10:06:58  90  ,gbp_g00
10:06:58  91  ,gbp_g01
10:06:58  92  ,gbp_g02
10:06:58  93  ,gbp_g03
10:06:58  94  ,gbp_g04
10:06:58  95  ,gbp_g05
10:06:58  96  ,gbp_g06
10:06:58  97  ,gbp_g07
10:06:58  98  ,gbp_g08
10:06:58  99  ,gbp_g09
10:06:58 100  ,gbp_g10
10:06:58 101  ,gbp_g11
10:06:58 102  ,gbp_g12
10:06:58 103  ,gbp_g13
10:06:58 104  ,gbp_g14
10:06:58 105  ,gbp_g15
10:06:58 106  ,gbp_g16
10:06:58 107  ,gbp_g17
10:06:58 108  ,gbp_g18
10:06:58 109  ,gbp_g19
10:06:58 110  ,gbp_g20
10:06:58 111  ,gbp_g21
10:06:58 112  ,gbp_g22
10:06:58 113  ,gbp_g23
10:06:58 114  ,gbp_g24
10:06:58 115  ,gbp_g25
10:06:58 116  ,gbp_g26
10:06:58 117  ,gbp_g27
10:06:58 118  ,gbp_g28
10:06:58 119  ,gbp_g29
10:06:58 120  ,gbp_g30
10:06:58 121  ,gbp_g31
10:06:58 122  ,gbp_g32
10:06:58 123  ,gbp_g33
10:06:58 124  ,gbp_g34
10:06:58 125  ,gbp_g35
10:06:58 126  ,gbp_g36
10:06:58 127  ,gbp_g37
10:06:58 128  ,gbp_g38
10:06:58 129  ,gbp_g39
10:06:58 130  ,gbp_g40
10:06:58 131  ,gbp_g41
10:06:58 132  ,jpy_g00
10:06:58 133  ,jpy_g01
10:06:58 134  ,jpy_g02
10:06:58 135  ,jpy_g03
10:06:58 136  ,jpy_g04
10:06:58 137  ,jpy_g05
10:06:58 138  ,jpy_g06
10:06:58 139  ,jpy_g07
10:06:58 140  ,jpy_g08
10:06:58 141  ,jpy_g09
10:06:58 142  ,jpy_g10
10:06:58 143  ,jpy_g11
10:06:58 144  ,jpy_g12
10:06:58 145  ,jpy_g13
10:06:58 146  ,jpy_g14
10:06:58 147  ,jpy_g15
10:06:58 148  ,jpy_g16
10:06:58 149  ,jpy_g17
10:06:58 150  ,jpy_g18
10:06:58 151  ,jpy_g19
10:06:58 152  ,jpy_g20
10:06:58 153  ,jpy_g21
10:06:58 154  ,jpy_g22
10:06:58 155  ,jpy_g23
10:06:58 156  ,jpy_g24
10:06:58 157  ,jpy_g25
10:06:58 158  ,jpy_g26
10:06:58 159  ,jpy_g27
10:06:58 160  ,jpy_g28
10:06:58 161  ,jpy_g29
10:06:58 162  ,jpy_g30
10:06:58 163  ,jpy_g31
10:06:58 164  ,jpy_g32
10:06:58 165  ,jpy_g33
10:06:58 166  ,jpy_g34
10:06:58 167  ,jpy_g35
10:06:58 168  ,jpy_g36
10:06:58 169  ,jpy_g37
10:06:58 170  ,jpy_g38
10:06:58 171  ,jpy_g39
10:06:58 172  ,jpy_g40
10:06:58 173  ,jpy_g41
10:06:58 174  ,cad_g00
10:06:58 175  ,cad_g01
10:06:58 176  ,cad_g02
10:06:58 177  ,cad_g03
10:06:58 178  ,cad_g04
10:06:58 179  ,cad_g05
10:06:58 180  ,cad_g06
10:06:58 181  ,cad_g07
10:06:58 182  ,cad_g08
10:06:58 183  ,cad_g09
10:06:58 184  ,cad_g10
10:06:58 185  ,cad_g11
10:06:58 186  ,cad_g12
10:06:58 187  ,cad_g13
10:06:58 188  ,cad_g14
10:06:58 189  ,cad_g15
10:06:58 190  ,cad_g16
10:06:58 191  ,cad_g17
10:06:58 192  ,cad_g18
10:06:58 193  ,cad_g19
10:06:58 194  ,cad_g20
10:06:58 195  ,cad_g21
10:06:58 196  ,cad_g22
10:06:58 197  ,cad_g23
10:06:58 198  ,cad_g24
10:06:58 199  ,cad_g25
10:06:58 200  ,cad_g26
10:06:58 201  ,cad_g27
10:06:58 202  ,cad_g28
10:06:58 203  ,cad_g29
10:06:58 204  ,cad_g30
10:06:58 205  ,cad_g31
10:06:58 206  ,cad_g32
10:06:58 207  ,cad_g33
10:06:58 208  ,cad_g34
10:06:58 209  ,cad_g35
10:06:58 210  ,cad_g36
10:06:58 211  ,cad_g37
10:06:58 212  ,cad_g38
10:06:58 213  ,cad_g39
10:06:58 214  ,cad_g40
10:06:58 215  ,cad_g41
10:06:58 216  ,chf_g00
10:06:58 217  ,chf_g01
10:06:58 218  ,chf_g02
10:06:58 219  ,chf_g03
10:06:58 220  ,chf_g04
10:06:58 221  ,chf_g05
10:06:58 222  ,chf_g06
10:06:58 223  ,chf_g07
10:06:58 224  ,chf_g08
10:06:58 225  ,chf_g09
10:06:58 226  ,chf_g10
10:06:58 227  ,chf_g11
10:06:58 228  ,chf_g12
10:06:58 229  ,chf_g13
10:06:58 230  ,chf_g14
10:06:58 231  ,chf_g15
10:06:58 232  ,chf_g16
10:06:58 233  ,chf_g17
10:06:58 234  ,chf_g18
10:06:58 235  ,chf_g19
10:06:58 236  ,chf_g20
10:06:58 237  ,chf_g21
10:06:58 238  ,chf_g22
10:06:58 239  ,chf_g23
10:06:58 240  ,chf_g24
10:06:58 241  ,chf_g25
10:06:58 242  ,chf_g26
10:06:58 243  ,chf_g27
10:06:58 244  ,chf_g28
10:06:58 245  ,chf_g29
10:06:58 246  ,chf_g30
10:06:58 247  ,chf_g31
10:06:58 248  ,chf_g32
10:06:58 249  ,chf_g33
10:06:58 250  ,chf_g34
10:06:58 251  ,chf_g35
10:06:58 252  ,chf_g36
10:06:58 253  ,chf_g37
10:06:58 254  ,chf_g38
10:06:58 255  ,chf_g39
10:06:58 256  ,chf_g40
10:06:58 257  ,chf_g41
10:06:58 258  FROM aud_ms6 m
10:06:58 259  WHERE m.ydate = '&1'||' '||'&2'
10:06:58 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2011-01-04'||' '||'09:45:00'

View created.

Elapsed: 00:00:00.22
10:06:58 SQL> 
10:06:58 SQL> -- rpt
10:06:58 SQL> -- We should see just 1 row:
10:06:58 SQL> 
10:06:58 SQL> SELECT COUNT(prdate) FROM sme
10:06:58   2  
10:06:58 SQL> -- Build the model:
10:06:58 SQL> CREATE OR REPLACE VIEW bme AS
10:06:58   2  SELECT
10:06:58   3  'aud'||m.ydate prdate
10:06:58   4  ,gatt
10:06:58   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
10:06:58   6  ,eur_g00
10:06:58   7  ,eur_g01
10:06:58   8  ,eur_g02
10:06:58   9  ,eur_g03
10:06:58  10  ,eur_g04
10:06:58  11  ,eur_g05
10:06:58  12  ,eur_g06
10:06:58  13  ,eur_g07
10:06:58  14  ,eur_g08
10:06:58  15  ,eur_g09
10:06:58  16  ,eur_g10
10:06:58  17  ,eur_g11
10:06:58  18  ,eur_g12
10:06:58  19  ,eur_g13
10:06:58  20  ,eur_g14
10:06:58  21  ,eur_g15
10:06:58  22  ,eur_g16
10:06:58  23  ,eur_g17
10:06:58  24  ,eur_g18
10:06:58  25  ,eur_g19
10:06:58  26  ,eur_g20
10:06:58  27  ,eur_g21
10:06:58  28  ,eur_g22
10:06:58  29  ,eur_g23
10:06:58  30  ,eur_g24
10:06:58  31  ,eur_g25
10:06:58  32  ,eur_g26
10:06:58  33  ,eur_g27
10:06:58  34  ,eur_g28
10:06:58  35  ,eur_g29
10:06:58  36  ,eur_g30
10:06:58  37  ,eur_g31
10:06:58  38  ,eur_g32
10:06:58  39  ,eur_g33
10:06:58  40  ,eur_g34
10:06:58  41  ,eur_g35
10:06:58  42  ,eur_g36
10:06:58  43  ,eur_g37
10:06:58  44  ,eur_g38
10:06:58  45  ,eur_g39
10:06:58  46  ,eur_g40
10:06:58  47  ,eur_g41
10:06:58  48  ,aud_g00
10:06:58  49  ,aud_g01
10:06:58  50  ,aud_g02
10:06:58  51  ,aud_g03
10:06:58  52  ,aud_g04
10:06:58  53  ,aud_g05
10:06:58  54  ,aud_g06
10:06:58  55  ,aud_g07
10:06:58  56  ,aud_g08
10:06:58  57  ,aud_g09
10:06:58  58  ,aud_g10
10:06:58  59  ,aud_g11
10:06:58  60  ,aud_g12
10:06:58  61  ,aud_g13
10:06:58  62  ,aud_g14
10:06:58  63  ,aud_g15
10:06:58  64  ,aud_g16
10:06:58  65  ,aud_g17
10:06:58  66  ,aud_g18
10:06:58  67  ,aud_g19
10:06:58  68  ,aud_g20
10:06:58  69  ,aud_g21
10:06:58  70  ,aud_g22
10:06:58  71  ,aud_g23
10:06:58  72  ,aud_g24
10:06:58  73  ,aud_g25
10:06:58  74  ,aud_g26
10:06:58  75  ,aud_g27
10:06:58  76  ,aud_g28
10:06:58  77  ,aud_g29
10:06:58  78  ,aud_g30
10:06:58  79  ,aud_g31
10:06:58  80  ,aud_g32
10:06:58  81  ,aud_g33
10:06:58  82  ,aud_g34
10:06:58  83  ,aud_g35
10:06:58  84  ,aud_g36
10:06:58  85  ,aud_g37
10:06:58  86  ,aud_g38
10:06:58  87  ,aud_g39
10:06:58  88  ,aud_g40
10:06:58  89  ,aud_g41
10:06:58  90  ,gbp_g00
10:06:58  91  ,gbp_g01
10:06:58  92  ,gbp_g02
10:06:58  93  ,gbp_g03
10:06:58  94  ,gbp_g04
10:06:58  95  ,gbp_g05
10:06:58  96  ,gbp_g06
10:06:58  97  ,gbp_g07
10:06:58  98  ,gbp_g08
10:06:58  99  ,gbp_g09
10:06:58 100  ,gbp_g10
10:06:58 101  ,gbp_g11
10:06:58 102  ,gbp_g12
10:06:58 103  ,gbp_g13
10:06:58 104  ,gbp_g14
10:06:58 105  ,gbp_g15
10:06:58 106  ,gbp_g16
10:06:58 107  ,gbp_g17
10:06:58 108  ,gbp_g18
10:06:58 109  ,gbp_g19
10:06:58 110  ,gbp_g20
10:06:58 111  ,gbp_g21
10:06:58 112  ,gbp_g22
10:06:58 113  ,gbp_g23
10:06:58 114  ,gbp_g24
10:06:58 115  ,gbp_g25
10:06:58 116  ,gbp_g26
10:06:58 117  ,gbp_g27
10:06:58 118  ,gbp_g28
10:06:58 119  ,gbp_g29
10:06:58 120  ,gbp_g30
10:06:58 121  ,gbp_g31
10:06:58 122  ,gbp_g32
10:06:58 123  ,gbp_g33
10:06:58 124  ,gbp_g34
10:06:58 125  ,gbp_g35
10:06:58 126  ,gbp_g36
10:06:58 127  ,gbp_g37
10:06:58 128  ,gbp_g38
10:06:58 129  ,gbp_g39
10:06:58 130  ,gbp_g40
10:06:58 131  ,gbp_g41
10:06:58 132  ,jpy_g00
10:06:58 133  ,jpy_g01
10:06:58 134  ,jpy_g02
10:06:58 135  ,jpy_g03
10:06:58 136  ,jpy_g04
10:06:58 137  ,jpy_g05
10:06:58 138  ,jpy_g06
10:06:58 139  ,jpy_g07
10:06:58 140  ,jpy_g08
10:06:58 141  ,jpy_g09
10:06:58 142  ,jpy_g10
10:06:58 143  ,jpy_g11
10:06:58 144  ,jpy_g12
10:06:58 145  ,jpy_g13
10:06:58 146  ,jpy_g14
10:06:58 147  ,jpy_g15
10:06:58 148  ,jpy_g16
10:06:58 149  ,jpy_g17
10:06:58 150  ,jpy_g18
10:06:58 151  ,jpy_g19
10:06:58 152  ,jpy_g20
10:06:58 153  ,jpy_g21
10:06:58 154  ,jpy_g22
10:06:58 155  ,jpy_g23
10:06:58 156  ,jpy_g24
10:06:58 157  ,jpy_g25
10:06:58 158  ,jpy_g26
10:06:58 159  ,jpy_g27
10:06:58 160  ,jpy_g28
10:06:58 161  ,jpy_g29
10:06:58 162  ,jpy_g30
10:06:58 163  ,jpy_g31
10:06:58 164  ,jpy_g32
10:06:58 165  ,jpy_g33
10:06:58 166  ,jpy_g34
10:06:58 167  ,jpy_g35
10:06:58 168  ,jpy_g36
10:06:58 169  ,jpy_g37
10:06:58 170  ,jpy_g38
10:06:58 171  ,jpy_g39
10:06:58 172  ,jpy_g40
10:06:58 173  ,jpy_g41
10:06:58 174  ,cad_g00
10:06:58 175  ,cad_g01
10:06:58 176  ,cad_g02
10:06:58 177  ,cad_g03
10:06:58 178  ,cad_g04
10:06:58 179  ,cad_g05
10:06:58 180  ,cad_g06
10:06:58 181  ,cad_g07
10:06:58 182  ,cad_g08
10:06:58 183  ,cad_g09
10:06:58 184  ,cad_g10
10:06:58 185  ,cad_g11
10:06:58 186  ,cad_g12
10:06:58 187  ,cad_g13
10:06:58 188  ,cad_g14
10:06:58 189  ,cad_g15
10:06:58 190  ,cad_g16
10:06:58 191  ,cad_g17
10:06:58 192  ,cad_g18
10:06:58 193  ,cad_g19
10:06:58 194  ,cad_g20
10:06:58 195  ,cad_g21
10:06:58 196  ,cad_g22
10:06:58 197  ,cad_g23
10:06:58 198  ,cad_g24
10:06:58 199  ,cad_g25
10:06:58 200  ,cad_g26
10:06:58 201  ,cad_g27
10:06:58 202  ,cad_g28
10:06:58 203  ,cad_g29
10:06:58 204  ,cad_g30
10:06:58 205  ,cad_g31
10:06:58 206  ,cad_g32
10:06:58 207  ,cad_g33
10:06:58 208  ,cad_g34
10:06:58 209  ,cad_g35
10:06:58 210  ,cad_g36
10:06:58 211  ,cad_g37
10:06:58 212  ,cad_g38
10:06:58 213  ,cad_g39
10:06:58 214  ,cad_g40
10:06:58 215  ,cad_g41
10:06:58 216  ,chf_g00
10:06:58 217  ,chf_g01
10:06:58 218  ,chf_g02
10:06:58 219  ,chf_g03
10:06:58 220  ,chf_g04
10:06:58 221  ,chf_g05
10:06:58 222  ,chf_g06
10:06:58 223  ,chf_g07
10:06:58 224  ,chf_g08
10:06:58 225  ,chf_g09
10:06:58 226  ,chf_g10
10:06:58 227  ,chf_g11
10:06:58 228  ,chf_g12
10:06:58 229  ,chf_g13
10:06:58 230  ,chf_g14
10:06:58 231  ,chf_g15
10:06:58 232  ,chf_g16
10:06:58 233  ,chf_g17
10:06:58 234  ,chf_g18
10:06:58 235  ,chf_g19
10:06:58 236  ,chf_g20
10:06:58 237  ,chf_g21
10:06:58 238  ,chf_g22
10:06:58 239  ,chf_g23
10:06:58 240  ,chf_g24
10:06:58 241  ,chf_g25
10:06:58 242  ,chf_g26
10:06:58 243  ,chf_g27
10:06:58 244  ,chf_g28
10:06:58 245  ,chf_g29
10:06:58 246  ,chf_g30
10:06:58 247  ,chf_g31
10:06:58 248  ,chf_g32
10:06:58 249  ,chf_g33
10:06:58 250  ,chf_g34
10:06:58 251  ,chf_g35
10:06:58 252  ,chf_g36
10:06:58 253  ,chf_g37
10:06:58 254  ,chf_g38
10:06:58 255  ,chf_g39
10:06:58 256  ,chf_g40
10:06:58 257  ,chf_g41
10:06:58 258  FROM aud_ms6 m
10:06:58 259  WHERE gatt IN('nup','up')
10:06:58 260  AND 1+m.ydate < '&1'||' '||'&2'
10:06:58 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2011-01-04'||' '||'09:45:00'

View created.

Elapsed: 00:00:00.17
10:06:58 SQL> 
10:06:58 SQL> -- rpt
10:06:58 SQL> 
10:06:58 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt
10:06:58   2  
10:06:58 SQL> SELECT MAX(prdate) FROM bme
10:06:58   2  
10:06:58 SQL> -- Now build model from bme and score sme
10:06:58 SQL> @score1.sql
10:06:58 SQL> -- score1.sql
10:06:58 SQL> 
10:06:58 SQL> -- Does the 1st SVM score
10:06:58 SQL> 
10:06:58 SQL> -- Fill up svmc_apply_prep
10:06:58 SQL> @score.sql
10:06:58 SQL> --
10:06:58 SQL> -- score.sql
10:06:58 SQL> --
10:06:58 SQL> 
10:06:58 SQL> -- usage: score.sql
10:06:58 SQL> 
10:06:58 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
10:06:58 SQL> 
10:06:58 SQL> DEFINE target	= 'gatt'
10:06:58 SQL> DEFINE model_name = 'forex14'
10:06:58 SQL> DEFINE bldtable	= 'bme'
10:06:58 SQL> DEFINE scoretable = 'sme'
10:06:58 SQL> DEFINE case_id	= 'prdate'
10:06:58 SQL> 
10:06:58 SQL> -- Define a variable to help me exclude some columns from some data mining calls
10:06:58 SQL> DEFINE exclude1 = "'&target','&case_id'"
10:06:58 SQL> 
10:06:58 SQL> -- Builds an SVM model using pl/sql.
10:06:58 SQL> 
10:06:58 SQL> -----------------------------------------------------------------------
10:06:58 SQL> --			    BUILD THE MODEL
10:06:58 SQL> -----------------------------------------------------------------------
10:06:58 SQL> 
10:06:58 SQL> -- Cleanup old build data preparation objects for repeat runs
10:06:58 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.03
10:06:58 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.01
10:06:58 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.03
10:06:58 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.02
10:06:58 SQL> 
10:06:58 SQL> 
10:06:58 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
10:06:58 SQL> --
10:06:58 SQL> -- DROP	TABLE svmc_settings ;
10:06:58 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
10:06:58 SQL> -- DELETE svmc_settings;
10:06:58 SQL> 
10:06:58 SQL> -- The default classification algorithm is Naive Bayes. So override
10:06:58 SQL> -- this choice to SVM using a settings table.
10:06:58 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
10:06:58 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
10:06:58 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
10:06:58 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
10:06:58 SQL> -- models.
10:06:58 SQL> --
10:06:58 SQL> 
10:06:58 SQL> -- Do this once and then comment it out.
10:06:58 SQL> -- That makes script go faster.
10:06:58 SQL> -- BEGIN
10:06:58 SQL> -- -- Populate settings table
10:06:58 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
10:06:58 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
10:06:58 SQL> --
10:06:58 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
10:06:58 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
10:06:58 SQL> --
10:06:58 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
10:06:58 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
10:06:58 SQL> --   COMMIT;
10:06:58 SQL> -- END;
10:06:58 SQL> -- /
10:06:58 SQL> 
10:06:58 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.02
10:06:58 SQL> 
10:06:58 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
10:06:58   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:06:58   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.21
10:06:58 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
10:06:58   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:06:58   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.14
10:06:59 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
10:06:59   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:06:59   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.18
10:06:59 SQL> 
10:06:59 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
10:06:59   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:06:59   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
10:06:59 SQL> 
10:06:59 SQL> --------------------------------
10:06:59 SQL> -- PREPARE BUILD (TRAINING) DATA
10:06:59 SQL> --
10:06:59 SQL> 
10:06:59 SQL> -- 1. Missing Value treatment for all Predictors and
10:06:59 SQL> -- 2. Outlier Treatment and
10:06:59 SQL> -- 3. Normalization are performed below.
10:06:59 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
10:06:59 SQL> --    normalized here.
10:06:59 SQL> 
10:06:59 SQL> BEGIN
10:06:59   2  	-- Perform missing value treatment for all predictors
10:06:59   3  	-- create miss tables
10:06:59   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
10:06:59   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
10:06:59   6  
10:06:59   7  	-- populate miss tables
10:06:59   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
10:06:59   9  	  miss_table_name => 'svmc_miss_num',
10:06:59  10  	  data_table_name => '&bldtable',
10:06:59  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:06:59  12  
10:06:59  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
10:06:59  14  	  miss_table_name => 'svmc_miss_cat',
10:06:59  15  	  data_table_name => '&bldtable',
10:06:59  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:06:59  17  
10:06:59  18  	-- xform input data to replace missing values
10:06:59  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
10:06:59  20  	  miss_table_name => 'svmc_miss_num',
10:06:59  21  	  data_table_name => '&bldtable',
10:06:59  22  	  xform_view_name => 'xformed_build_miss_num');
10:06:59  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
10:06:59  24  	  miss_table_name => 'svmc_miss_cat',
10:06:59  25  	  data_table_name => '&bldtable',
10:06:59  26  	  xform_view_name => 'xformed_build_miss_cat');
10:06:59  27  
10:06:59  28  	-- Perform outlier treatment.
10:06:59  29  	-- create clip table
10:06:59  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
10:06:59  31  
10:06:59  32  	-- populate clip table
10:06:59  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
10:06:59  34  	  clip_table_name => 'svmc_clip',
10:06:59  35  	  data_table_name => '&bldtable',
10:06:59  36  	  tail_frac	  => 0.025,
10:06:59  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:06:59  38  
10:06:59  39  	-- xform input data to winsorized data
10:06:59  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
10:06:59  41  	  clip_table_name => 'svmc_clip',
10:06:59  42  	  data_table_name => '&bldtable',
10:06:59  43  	  xform_view_name => 'svmc_winsor');
10:06:59  44  
10:06:59  45  	-- create normalization table
10:06:59  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
10:06:59  47  
10:06:59  48  	-- populate normalization table based on winsorized data
10:06:59  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
10:06:59  50  	  norm_table_name => 'svmc_norm',
10:06:59  51  	  data_table_name => 'svmc_winsor',
10:06:59  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:06:59  53  
10:06:59  54  	-- normalize the original data
10:06:59  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
10:06:59  56  	  norm_table_name => 'svmc_norm',
10:06:59  57  	  data_table_name => '&bldtable',
10:06:59  58  	  xform_view_name => 'svmc_build_prep');
10:06:59  59  END;
10:06:59  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:17.84
10:07:17 SQL> 
10:07:17 SQL> ---------------------
10:07:17 SQL> -- CREATE A NEW MODEL
10:07:17 SQL> --
10:07:17 SQL> -- Cleanup old model with the same name for repeat runs
10:07:17 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
10:07:17   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:07:17   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.28
10:07:18 SQL> 
10:07:18 SQL> -- Build a new SVM Model
10:07:18 SQL> BEGIN
10:07:18   2  	DBMS_DATA_MINING.CREATE_MODEL(
10:07:18   3  	  model_name	      => '&model_name',
10:07:18   4  	  mining_function     => dbms_data_mining.classification,
10:07:18   5  	  data_table_name     => 'svmc_build_prep',
10:07:18   6  	  case_id_column_name => '&case_id',
10:07:18   7  	  target_column_name  => '&target',
10:07:18   8  	  settings_table_name => 'svmc_settings');
10:07:18   9  END;
10:07:18  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:28.10
10:07:46 SQL> 
10:07:46 SQL> -----------------------------------------------------------------------
10:07:46 SQL> --			       APPLY/score THE MODEL
10:07:46 SQL> -----------------------------------------------------------------------
10:07:46 SQL> 
10:07:46 SQL> -- Cleanup old scoring data preparation objects for repeat runs
10:07:46 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
10:07:46   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:07:46   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.22
10:07:46 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
10:07:46   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:07:46   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.14
10:07:46 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
10:07:46   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:07:46   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.16
10:07:47 SQL> -----------------------
10:07:47 SQL> -- PREPARE SCORING DATA
10:07:47 SQL> --
10:07:47 SQL> -- If the data for model creation has been prepared, then the data
10:07:47 SQL> -- to be scored using the model must be prepared in the same manner
10:07:47 SQL> -- in order to obtain meaningful results.
10:07:47 SQL> --
10:07:47 SQL> -- 1. Missing Value treatment for all Predictors and
10:07:47 SQL> -- 2. Normalization
10:07:47 SQL> -- No outlier treatment will be performed during test and apply. The
10:07:47 SQL> -- normalization step is sufficient, since the normalization parameters
10:07:47 SQL> -- already capture the effects of outlier treatment done with build data.
10:07:47 SQL> --
10:07:47 SQL> BEGIN
10:07:47   2  	-- Xform Test data to replace missing values
10:07:47   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
10:07:47   4  	  miss_table_name => 'svmc_miss_num',
10:07:47   5  	  data_table_name => '&scoretable',
10:07:47   6  	  xform_view_name => 'xformed_apply_miss_num');
10:07:47   7  
10:07:47   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
10:07:47   9  	  miss_table_name => 'svmc_miss_cat',
10:07:47  10  	  data_table_name => '&scoretable',
10:07:47  11  	  xform_view_name => 'xformed_apply_miss_cat');
10:07:47  12  
10:07:47  13  	-- Normalize the data to be scored
10:07:47  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
10:07:47  15  	  norm_table_name => 'svmc_norm',
10:07:47  16  	  data_table_name => '&scoretable',
10:07:47  17  	  xform_view_name => 'svmc_apply_prep');
10:07:47  18  END;
10:07:47  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.33
10:07:48 SQL> 
10:07:48 SQL> -- Use same model_name used in score.sql
10:07:48 SQL> DEFINE model_name = 'forex14'
10:07:48 SQL> 
10:07:48 SQL> -- CREATE TABLE fxscores6 (prdate VARCHAR2(30),score NUMBER,rundate DATE,pair VARCHAR2(8),ydate DATE);
10:07:48 SQL> 
10:07:48 SQL> DELETE fxscores6 WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.04
10:07:48 SQL> 
10:07:48 SQL> INSERT INTO fxscores6 (prdate,score,rundate,pair,ydate)
10:07:48   2  SELECT
10:07:48   3  prdate
10:07:48   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
10:07:48   5  ,sysdate
10:07:48   6  ,SUBSTR(prdate,1,3)pair
10:07:48   7  ,SUBSTR(prdate,4,19)ydate
10:07:48   8  FROM svmc_apply_prep
10:07:48   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.22
10:07:48 SQL> @aud_score1day.sql  2011-01-04 09:50:00
10:07:48 SQL> --
10:07:48 SQL> -- aud_score1day.sql
10:07:48 SQL> --
10:07:48 SQL> 
10:07:48 SQL> CREATE OR REPLACE VIEW sme AS
10:07:48   2  SELECT
10:07:48   3  'aud'||m.ydate prdate
10:07:48   4  ,NULL gatt
10:07:48   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
10:07:48   6  ,eur_g00
10:07:48   7  ,eur_g01
10:07:48   8  ,eur_g02
10:07:48   9  ,eur_g03
10:07:48  10  ,eur_g04
10:07:48  11  ,eur_g05
10:07:48  12  ,eur_g06
10:07:48  13  ,eur_g07
10:07:48  14  ,eur_g08
10:07:48  15  ,eur_g09
10:07:48  16  ,eur_g10
10:07:48  17  ,eur_g11
10:07:48  18  ,eur_g12
10:07:48  19  ,eur_g13
10:07:48  20  ,eur_g14
10:07:48  21  ,eur_g15
10:07:48  22  ,eur_g16
10:07:48  23  ,eur_g17
10:07:48  24  ,eur_g18
10:07:48  25  ,eur_g19
10:07:48  26  ,eur_g20
10:07:48  27  ,eur_g21
10:07:48  28  ,eur_g22
10:07:48  29  ,eur_g23
10:07:48  30  ,eur_g24
10:07:48  31  ,eur_g25
10:07:48  32  ,eur_g26
10:07:48  33  ,eur_g27
10:07:48  34  ,eur_g28
10:07:48  35  ,eur_g29
10:07:48  36  ,eur_g30
10:07:48  37  ,eur_g31
10:07:48  38  ,eur_g32
10:07:48  39  ,eur_g33
10:07:48  40  ,eur_g34
10:07:48  41  ,eur_g35
10:07:48  42  ,eur_g36
10:07:48  43  ,eur_g37
10:07:48  44  ,eur_g38
10:07:48  45  ,eur_g39
10:07:48  46  ,eur_g40
10:07:48  47  ,eur_g41
10:07:48  48  ,aud_g00
10:07:48  49  ,aud_g01
10:07:48  50  ,aud_g02
10:07:48  51  ,aud_g03
10:07:48  52  ,aud_g04
10:07:48  53  ,aud_g05
10:07:48  54  ,aud_g06
10:07:48  55  ,aud_g07
10:07:48  56  ,aud_g08
10:07:48  57  ,aud_g09
10:07:48  58  ,aud_g10
10:07:48  59  ,aud_g11
10:07:48  60  ,aud_g12
10:07:48  61  ,aud_g13
10:07:48  62  ,aud_g14
10:07:48  63  ,aud_g15
10:07:48  64  ,aud_g16
10:07:48  65  ,aud_g17
10:07:48  66  ,aud_g18
10:07:48  67  ,aud_g19
10:07:48  68  ,aud_g20
10:07:48  69  ,aud_g21
10:07:48  70  ,aud_g22
10:07:48  71  ,aud_g23
10:07:48  72  ,aud_g24
10:07:48  73  ,aud_g25
10:07:48  74  ,aud_g26
10:07:48  75  ,aud_g27
10:07:48  76  ,aud_g28
10:07:48  77  ,aud_g29
10:07:48  78  ,aud_g30
10:07:48  79  ,aud_g31
10:07:48  80  ,aud_g32
10:07:48  81  ,aud_g33
10:07:48  82  ,aud_g34
10:07:48  83  ,aud_g35
10:07:48  84  ,aud_g36
10:07:48  85  ,aud_g37
10:07:48  86  ,aud_g38
10:07:48  87  ,aud_g39
10:07:48  88  ,aud_g40
10:07:48  89  ,aud_g41
10:07:48  90  ,gbp_g00
10:07:48  91  ,gbp_g01
10:07:48  92  ,gbp_g02
10:07:48  93  ,gbp_g03
10:07:48  94  ,gbp_g04
10:07:48  95  ,gbp_g05
10:07:48  96  ,gbp_g06
10:07:48  97  ,gbp_g07
10:07:48  98  ,gbp_g08
10:07:48  99  ,gbp_g09
10:07:48 100  ,gbp_g10
10:07:48 101  ,gbp_g11
10:07:48 102  ,gbp_g12
10:07:48 103  ,gbp_g13
10:07:48 104  ,gbp_g14
10:07:48 105  ,gbp_g15
10:07:48 106  ,gbp_g16
10:07:48 107  ,gbp_g17
10:07:48 108  ,gbp_g18
10:07:48 109  ,gbp_g19
10:07:48 110  ,gbp_g20
10:07:48 111  ,gbp_g21
10:07:48 112  ,gbp_g22
10:07:48 113  ,gbp_g23
10:07:48 114  ,gbp_g24
10:07:48 115  ,gbp_g25
10:07:48 116  ,gbp_g26
10:07:48 117  ,gbp_g27
10:07:48 118  ,gbp_g28
10:07:48 119  ,gbp_g29
10:07:48 120  ,gbp_g30
10:07:48 121  ,gbp_g31
10:07:48 122  ,gbp_g32
10:07:48 123  ,gbp_g33
10:07:48 124  ,gbp_g34
10:07:48 125  ,gbp_g35
10:07:48 126  ,gbp_g36
10:07:48 127  ,gbp_g37
10:07:48 128  ,gbp_g38
10:07:48 129  ,gbp_g39
10:07:48 130  ,gbp_g40
10:07:48 131  ,gbp_g41
10:07:48 132  ,jpy_g00
10:07:48 133  ,jpy_g01
10:07:48 134  ,jpy_g02
10:07:48 135  ,jpy_g03
10:07:48 136  ,jpy_g04
10:07:48 137  ,jpy_g05
10:07:48 138  ,jpy_g06
10:07:48 139  ,jpy_g07
10:07:48 140  ,jpy_g08
10:07:48 141  ,jpy_g09
10:07:48 142  ,jpy_g10
10:07:48 143  ,jpy_g11
10:07:48 144  ,jpy_g12
10:07:48 145  ,jpy_g13
10:07:48 146  ,jpy_g14
10:07:48 147  ,jpy_g15
10:07:48 148  ,jpy_g16
10:07:48 149  ,jpy_g17
10:07:48 150  ,jpy_g18
10:07:48 151  ,jpy_g19
10:07:48 152  ,jpy_g20
10:07:48 153  ,jpy_g21
10:07:48 154  ,jpy_g22
10:07:48 155  ,jpy_g23
10:07:48 156  ,jpy_g24
10:07:48 157  ,jpy_g25
10:07:48 158  ,jpy_g26
10:07:48 159  ,jpy_g27
10:07:48 160  ,jpy_g28
10:07:48 161  ,jpy_g29
10:07:48 162  ,jpy_g30
10:07:48 163  ,jpy_g31
10:07:48 164  ,jpy_g32
10:07:48 165  ,jpy_g33
10:07:48 166  ,jpy_g34
10:07:48 167  ,jpy_g35
10:07:48 168  ,jpy_g36
10:07:48 169  ,jpy_g37
10:07:48 170  ,jpy_g38
10:07:48 171  ,jpy_g39
10:07:48 172  ,jpy_g40
10:07:48 173  ,jpy_g41
10:07:48 174  ,cad_g00
10:07:48 175  ,cad_g01
10:07:48 176  ,cad_g02
10:07:48 177  ,cad_g03
10:07:48 178  ,cad_g04
10:07:48 179  ,cad_g05
10:07:48 180  ,cad_g06
10:07:48 181  ,cad_g07
10:07:48 182  ,cad_g08
10:07:48 183  ,cad_g09
10:07:48 184  ,cad_g10
10:07:48 185  ,cad_g11
10:07:48 186  ,cad_g12
10:07:48 187  ,cad_g13
10:07:48 188  ,cad_g14
10:07:48 189  ,cad_g15
10:07:48 190  ,cad_g16
10:07:48 191  ,cad_g17
10:07:48 192  ,cad_g18
10:07:48 193  ,cad_g19
10:07:48 194  ,cad_g20
10:07:48 195  ,cad_g21
10:07:48 196  ,cad_g22
10:07:48 197  ,cad_g23
10:07:48 198  ,cad_g24
10:07:48 199  ,cad_g25
10:07:48 200  ,cad_g26
10:07:48 201  ,cad_g27
10:07:48 202  ,cad_g28
10:07:48 203  ,cad_g29
10:07:48 204  ,cad_g30
10:07:48 205  ,cad_g31
10:07:48 206  ,cad_g32
10:07:48 207  ,cad_g33
10:07:48 208  ,cad_g34
10:07:48 209  ,cad_g35
10:07:48 210  ,cad_g36
10:07:48 211  ,cad_g37
10:07:48 212  ,cad_g38
10:07:48 213  ,cad_g39
10:07:48 214  ,cad_g40
10:07:48 215  ,cad_g41
10:07:48 216  ,chf_g00
10:07:48 217  ,chf_g01
10:07:48 218  ,chf_g02
10:07:48 219  ,chf_g03
10:07:48 220  ,chf_g04
10:07:48 221  ,chf_g05
10:07:48 222  ,chf_g06
10:07:48 223  ,chf_g07
10:07:48 224  ,chf_g08
10:07:48 225  ,chf_g09
10:07:48 226  ,chf_g10
10:07:48 227  ,chf_g11
10:07:48 228  ,chf_g12
10:07:48 229  ,chf_g13
10:07:48 230  ,chf_g14
10:07:48 231  ,chf_g15
10:07:48 232  ,chf_g16
10:07:48 233  ,chf_g17
10:07:48 234  ,chf_g18
10:07:48 235  ,chf_g19
10:07:48 236  ,chf_g20
10:07:48 237  ,chf_g21
10:07:48 238  ,chf_g22
10:07:48 239  ,chf_g23
10:07:48 240  ,chf_g24
10:07:48 241  ,chf_g25
10:07:48 242  ,chf_g26
10:07:48 243  ,chf_g27
10:07:48 244  ,chf_g28
10:07:48 245  ,chf_g29
10:07:48 246  ,chf_g30
10:07:48 247  ,chf_g31
10:07:48 248  ,chf_g32
10:07:48 249  ,chf_g33
10:07:48 250  ,chf_g34
10:07:48 251  ,chf_g35
10:07:48 252  ,chf_g36
10:07:48 253  ,chf_g37
10:07:48 254  ,chf_g38
10:07:48 255  ,chf_g39
10:07:48 256  ,chf_g40
10:07:48 257  ,chf_g41
10:07:48 258  FROM aud_ms6 m
10:07:48 259  WHERE m.ydate = '&1'||' '||'&2'
10:07:48 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2011-01-04'||' '||'09:50:00'

View created.

Elapsed: 00:00:00.14
10:07:48 SQL> 
10:07:48 SQL> -- rpt
10:07:48 SQL> -- We should see just 1 row:
10:07:48 SQL> 
10:07:48 SQL> SELECT COUNT(prdate) FROM sme
10:07:48   2  
10:07:48 SQL> -- Build the model:
10:07:48 SQL> CREATE OR REPLACE VIEW bme AS
10:07:48   2  SELECT
10:07:48   3  'aud'||m.ydate prdate
10:07:48   4  ,gatt
10:07:48   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
10:07:48   6  ,eur_g00
10:07:48   7  ,eur_g01
10:07:48   8  ,eur_g02
10:07:48   9  ,eur_g03
10:07:48  10  ,eur_g04
10:07:48  11  ,eur_g05
10:07:48  12  ,eur_g06
10:07:48  13  ,eur_g07
10:07:48  14  ,eur_g08
10:07:48  15  ,eur_g09
10:07:48  16  ,eur_g10
10:07:48  17  ,eur_g11
10:07:48  18  ,eur_g12
10:07:48  19  ,eur_g13
10:07:48  20  ,eur_g14
10:07:48  21  ,eur_g15
10:07:48  22  ,eur_g16
10:07:48  23  ,eur_g17
10:07:48  24  ,eur_g18
10:07:48  25  ,eur_g19
10:07:48  26  ,eur_g20
10:07:48  27  ,eur_g21
10:07:48  28  ,eur_g22
10:07:48  29  ,eur_g23
10:07:48  30  ,eur_g24
10:07:48  31  ,eur_g25
10:07:48  32  ,eur_g26
10:07:48  33  ,eur_g27
10:07:48  34  ,eur_g28
10:07:48  35  ,eur_g29
10:07:48  36  ,eur_g30
10:07:48  37  ,eur_g31
10:07:48  38  ,eur_g32
10:07:48  39  ,eur_g33
10:07:48  40  ,eur_g34
10:07:48  41  ,eur_g35
10:07:48  42  ,eur_g36
10:07:48  43  ,eur_g37
10:07:48  44  ,eur_g38
10:07:48  45  ,eur_g39
10:07:48  46  ,eur_g40
10:07:48  47  ,eur_g41
10:07:48  48  ,aud_g00
10:07:48  49  ,aud_g01
10:07:48  50  ,aud_g02
10:07:48  51  ,aud_g03
10:07:48  52  ,aud_g04
10:07:48  53  ,aud_g05
10:07:48  54  ,aud_g06
10:07:48  55  ,aud_g07
10:07:48  56  ,aud_g08
10:07:48  57  ,aud_g09
10:07:48  58  ,aud_g10
10:07:48  59  ,aud_g11
10:07:48  60  ,aud_g12
10:07:48  61  ,aud_g13
10:07:48  62  ,aud_g14
10:07:48  63  ,aud_g15
10:07:48  64  ,aud_g16
10:07:48  65  ,aud_g17
10:07:48  66  ,aud_g18
10:07:48  67  ,aud_g19
10:07:48  68  ,aud_g20
10:07:48  69  ,aud_g21
10:07:48  70  ,aud_g22
10:07:48  71  ,aud_g23
10:07:48  72  ,aud_g24
10:07:48  73  ,aud_g25
10:07:48  74  ,aud_g26
10:07:48  75  ,aud_g27
10:07:48  76  ,aud_g28
10:07:48  77  ,aud_g29
10:07:48  78  ,aud_g30
10:07:48  79  ,aud_g31
10:07:48  80  ,aud_g32
10:07:48  81  ,aud_g33
10:07:48  82  ,aud_g34
10:07:48  83  ,aud_g35
10:07:48  84  ,aud_g36
10:07:48  85  ,aud_g37
10:07:48  86  ,aud_g38
10:07:48  87  ,aud_g39
10:07:48  88  ,aud_g40
10:07:48  89  ,aud_g41
10:07:48  90  ,gbp_g00
10:07:48  91  ,gbp_g01
10:07:48  92  ,gbp_g02
10:07:48  93  ,gbp_g03
10:07:48  94  ,gbp_g04
10:07:48  95  ,gbp_g05
10:07:48  96  ,gbp_g06
10:07:48  97  ,gbp_g07
10:07:48  98  ,gbp_g08
10:07:48  99  ,gbp_g09
10:07:48 100  ,gbp_g10
10:07:48 101  ,gbp_g11
10:07:48 102  ,gbp_g12
10:07:48 103  ,gbp_g13
10:07:48 104  ,gbp_g14
10:07:48 105  ,gbp_g15
10:07:48 106  ,gbp_g16
10:07:48 107  ,gbp_g17
10:07:48 108  ,gbp_g18
10:07:48 109  ,gbp_g19
10:07:48 110  ,gbp_g20
10:07:48 111  ,gbp_g21
10:07:48 112  ,gbp_g22
10:07:48 113  ,gbp_g23
10:07:48 114  ,gbp_g24
10:07:48 115  ,gbp_g25
10:07:48 116  ,gbp_g26
10:07:48 117  ,gbp_g27
10:07:48 118  ,gbp_g28
10:07:48 119  ,gbp_g29
10:07:48 120  ,gbp_g30
10:07:48 121  ,gbp_g31
10:07:48 122  ,gbp_g32
10:07:48 123  ,gbp_g33
10:07:48 124  ,gbp_g34
10:07:48 125  ,gbp_g35
10:07:48 126  ,gbp_g36
10:07:48 127  ,gbp_g37
10:07:48 128  ,gbp_g38
10:07:48 129  ,gbp_g39
10:07:48 130  ,gbp_g40
10:07:48 131  ,gbp_g41
10:07:48 132  ,jpy_g00
10:07:48 133  ,jpy_g01
10:07:48 134  ,jpy_g02
10:07:48 135  ,jpy_g03
10:07:48 136  ,jpy_g04
10:07:48 137  ,jpy_g05
10:07:48 138  ,jpy_g06
10:07:48 139  ,jpy_g07
10:07:48 140  ,jpy_g08
10:07:48 141  ,jpy_g09
10:07:48 142  ,jpy_g10
10:07:48 143  ,jpy_g11
10:07:48 144  ,jpy_g12
10:07:48 145  ,jpy_g13
10:07:48 146  ,jpy_g14
10:07:48 147  ,jpy_g15
10:07:48 148  ,jpy_g16
10:07:48 149  ,jpy_g17
10:07:48 150  ,jpy_g18
10:07:48 151  ,jpy_g19
10:07:48 152  ,jpy_g20
10:07:48 153  ,jpy_g21
10:07:48 154  ,jpy_g22
10:07:48 155  ,jpy_g23
10:07:48 156  ,jpy_g24
10:07:48 157  ,jpy_g25
10:07:48 158  ,jpy_g26
10:07:48 159  ,jpy_g27
10:07:48 160  ,jpy_g28
10:07:48 161  ,jpy_g29
10:07:48 162  ,jpy_g30
10:07:48 163  ,jpy_g31
10:07:48 164  ,jpy_g32
10:07:48 165  ,jpy_g33
10:07:48 166  ,jpy_g34
10:07:48 167  ,jpy_g35
10:07:48 168  ,jpy_g36
10:07:48 169  ,jpy_g37
10:07:48 170  ,jpy_g38
10:07:48 171  ,jpy_g39
10:07:48 172  ,jpy_g40
10:07:48 173  ,jpy_g41
10:07:48 174  ,cad_g00
10:07:48 175  ,cad_g01
10:07:48 176  ,cad_g02
10:07:48 177  ,cad_g03
10:07:48 178  ,cad_g04
10:07:48 179  ,cad_g05
10:07:48 180  ,cad_g06
10:07:48 181  ,cad_g07
10:07:48 182  ,cad_g08
10:07:48 183  ,cad_g09
10:07:48 184  ,cad_g10
10:07:48 185  ,cad_g11
10:07:48 186  ,cad_g12
10:07:48 187  ,cad_g13
10:07:48 188  ,cad_g14
10:07:48 189  ,cad_g15
10:07:48 190  ,cad_g16
10:07:48 191  ,cad_g17
10:07:48 192  ,cad_g18
10:07:48 193  ,cad_g19
10:07:48 194  ,cad_g20
10:07:48 195  ,cad_g21
10:07:48 196  ,cad_g22
10:07:48 197  ,cad_g23
10:07:48 198  ,cad_g24
10:07:48 199  ,cad_g25
10:07:48 200  ,cad_g26
10:07:48 201  ,cad_g27
10:07:48 202  ,cad_g28
10:07:48 203  ,cad_g29
10:07:48 204  ,cad_g30
10:07:48 205  ,cad_g31
10:07:48 206  ,cad_g32
10:07:48 207  ,cad_g33
10:07:48 208  ,cad_g34
10:07:48 209  ,cad_g35
10:07:48 210  ,cad_g36
10:07:48 211  ,cad_g37
10:07:48 212  ,cad_g38
10:07:48 213  ,cad_g39
10:07:48 214  ,cad_g40
10:07:48 215  ,cad_g41
10:07:48 216  ,chf_g00
10:07:48 217  ,chf_g01
10:07:48 218  ,chf_g02
10:07:48 219  ,chf_g03
10:07:48 220  ,chf_g04
10:07:48 221  ,chf_g05
10:07:48 222  ,chf_g06
10:07:48 223  ,chf_g07
10:07:48 224  ,chf_g08
10:07:48 225  ,chf_g09
10:07:48 226  ,chf_g10
10:07:48 227  ,chf_g11
10:07:48 228  ,chf_g12
10:07:48 229  ,chf_g13
10:07:48 230  ,chf_g14
10:07:48 231  ,chf_g15
10:07:48 232  ,chf_g16
10:07:48 233  ,chf_g17
10:07:48 234  ,chf_g18
10:07:48 235  ,chf_g19
10:07:48 236  ,chf_g20
10:07:48 237  ,chf_g21
10:07:48 238  ,chf_g22
10:07:48 239  ,chf_g23
10:07:48 240  ,chf_g24
10:07:48 241  ,chf_g25
10:07:48 242  ,chf_g26
10:07:48 243  ,chf_g27
10:07:48 244  ,chf_g28
10:07:48 245  ,chf_g29
10:07:48 246  ,chf_g30
10:07:48 247  ,chf_g31
10:07:48 248  ,chf_g32
10:07:48 249  ,chf_g33
10:07:48 250  ,chf_g34
10:07:48 251  ,chf_g35
10:07:48 252  ,chf_g36
10:07:48 253  ,chf_g37
10:07:48 254  ,chf_g38
10:07:48 255  ,chf_g39
10:07:48 256  ,chf_g40
10:07:48 257  ,chf_g41
10:07:48 258  FROM aud_ms6 m
10:07:48 259  WHERE gatt IN('nup','up')
10:07:48 260  AND 1+m.ydate < '&1'||' '||'&2'
10:07:48 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2011-01-04'||' '||'09:50:00'

View created.

Elapsed: 00:00:00.12
10:07:49 SQL> 
10:07:49 SQL> -- rpt
10:07:49 SQL> 
10:07:49 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt
10:07:49   2  
10:07:49 SQL> SELECT MAX(prdate) FROM bme
10:07:49   2  
10:07:49 SQL> -- Now build model from bme and score sme
10:07:49 SQL> @score1.sql
10:07:49 SQL> -- score1.sql
10:07:49 SQL> 
10:07:49 SQL> -- Does the 1st SVM score
10:07:49 SQL> 
10:07:49 SQL> -- Fill up svmc_apply_prep
10:07:49 SQL> @score.sql
10:07:49 SQL> --
10:07:49 SQL> -- score.sql
10:07:49 SQL> --
10:07:49 SQL> 
10:07:49 SQL> -- usage: score.sql
10:07:49 SQL> 
10:07:49 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
10:07:49 SQL> 
10:07:49 SQL> DEFINE target	= 'gatt'
10:07:49 SQL> DEFINE model_name = 'forex14'
10:07:49 SQL> DEFINE bldtable	= 'bme'
10:07:49 SQL> DEFINE scoretable = 'sme'
10:07:49 SQL> DEFINE case_id	= 'prdate'
10:07:49 SQL> 
10:07:49 SQL> -- Define a variable to help me exclude some columns from some data mining calls
10:07:49 SQL> DEFINE exclude1 = "'&target','&case_id'"
10:07:49 SQL> 
10:07:49 SQL> -- Builds an SVM model using pl/sql.
10:07:49 SQL> 
10:07:49 SQL> -----------------------------------------------------------------------
10:07:49 SQL> --			    BUILD THE MODEL
10:07:49 SQL> -----------------------------------------------------------------------
10:07:49 SQL> 
10:07:49 SQL> -- Cleanup old build data preparation objects for repeat runs
10:07:49 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.01
10:07:49 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.01
10:07:49 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.01
10:07:49 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.00
10:07:49 SQL> 
10:07:49 SQL> 
10:07:49 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
10:07:49 SQL> --
10:07:49 SQL> -- DROP	TABLE svmc_settings ;
10:07:49 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
10:07:49 SQL> -- DELETE svmc_settings;
10:07:49 SQL> 
10:07:49 SQL> -- The default classification algorithm is Naive Bayes. So override
10:07:49 SQL> -- this choice to SVM using a settings table.
10:07:49 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
10:07:49 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
10:07:49 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
10:07:49 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
10:07:49 SQL> -- models.
10:07:49 SQL> --
10:07:49 SQL> 
10:07:49 SQL> -- Do this once and then comment it out.
10:07:49 SQL> -- That makes script go faster.
10:07:49 SQL> -- BEGIN
10:07:49 SQL> -- -- Populate settings table
10:07:49 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
10:07:49 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
10:07:49 SQL> --
10:07:49 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
10:07:49 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
10:07:49 SQL> --
10:07:49 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
10:07:49 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
10:07:49 SQL> --   COMMIT;
10:07:49 SQL> -- END;
10:07:49 SQL> -- /
10:07:49 SQL> 
10:07:49 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
10:07:49 SQL> 
10:07:49 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
10:07:49   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:07:49   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
10:07:49 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
10:07:49   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:07:49   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
10:07:49 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
10:07:49   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:07:49   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.09
10:07:49 SQL> 
10:07:49 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
10:07:49   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:07:49   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
10:07:49 SQL> 
10:07:49 SQL> --------------------------------
10:07:49 SQL> -- PREPARE BUILD (TRAINING) DATA
10:07:49 SQL> --
10:07:49 SQL> 
10:07:49 SQL> -- 1. Missing Value treatment for all Predictors and
10:07:49 SQL> -- 2. Outlier Treatment and
10:07:49 SQL> -- 3. Normalization are performed below.
10:07:49 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
10:07:49 SQL> --    normalized here.
10:07:49 SQL> 
10:07:49 SQL> BEGIN
10:07:49   2  	-- Perform missing value treatment for all predictors
10:07:49   3  	-- create miss tables
10:07:49   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
10:07:49   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
10:07:49   6  
10:07:49   7  	-- populate miss tables
10:07:49   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
10:07:49   9  	  miss_table_name => 'svmc_miss_num',
10:07:49  10  	  data_table_name => '&bldtable',
10:07:49  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:07:49  12  
10:07:49  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
10:07:49  14  	  miss_table_name => 'svmc_miss_cat',
10:07:49  15  	  data_table_name => '&bldtable',
10:07:49  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:07:49  17  
10:07:49  18  	-- xform input data to replace missing values
10:07:49  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
10:07:49  20  	  miss_table_name => 'svmc_miss_num',
10:07:49  21  	  data_table_name => '&bldtable',
10:07:49  22  	  xform_view_name => 'xformed_build_miss_num');
10:07:49  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
10:07:49  24  	  miss_table_name => 'svmc_miss_cat',
10:07:49  25  	  data_table_name => '&bldtable',
10:07:49  26  	  xform_view_name => 'xformed_build_miss_cat');
10:07:49  27  
10:07:49  28  	-- Perform outlier treatment.
10:07:49  29  	-- create clip table
10:07:49  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
10:07:49  31  
10:07:49  32  	-- populate clip table
10:07:49  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
10:07:49  34  	  clip_table_name => 'svmc_clip',
10:07:49  35  	  data_table_name => '&bldtable',
10:07:49  36  	  tail_frac	  => 0.025,
10:07:49  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:07:49  38  
10:07:49  39  	-- xform input data to winsorized data
10:07:49  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
10:07:49  41  	  clip_table_name => 'svmc_clip',
10:07:49  42  	  data_table_name => '&bldtable',
10:07:49  43  	  xform_view_name => 'svmc_winsor');
10:07:49  44  
10:07:49  45  	-- create normalization table
10:07:49  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
10:07:49  47  
10:07:49  48  	-- populate normalization table based on winsorized data
10:07:49  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
10:07:49  50  	  norm_table_name => 'svmc_norm',
10:07:49  51  	  data_table_name => 'svmc_winsor',
10:07:49  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:07:49  53  
10:07:49  54  	-- normalize the original data
10:07:49  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
10:07:49  56  	  norm_table_name => 'svmc_norm',
10:07:49  57  	  data_table_name => '&bldtable',
10:07:49  58  	  xform_view_name => 'svmc_build_prep');
10:07:49  59  END;
10:07:49  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:17.59
10:08:06 SQL> 
10:08:06 SQL> ---------------------
10:08:06 SQL> -- CREATE A NEW MODEL
10:08:06 SQL> --
10:08:06 SQL> -- Cleanup old model with the same name for repeat runs
10:08:06 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
10:08:06   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:08:06   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.97
10:08:07 SQL> 
10:08:07 SQL> -- Build a new SVM Model
10:08:07 SQL> BEGIN
10:08:07   2  	DBMS_DATA_MINING.CREATE_MODEL(
10:08:07   3  	  model_name	      => '&model_name',
10:08:07   4  	  mining_function     => dbms_data_mining.classification,
10:08:07   5  	  data_table_name     => 'svmc_build_prep',
10:08:07   6  	  case_id_column_name => '&case_id',
10:08:07   7  	  target_column_name  => '&target',
10:08:07   8  	  settings_table_name => 'svmc_settings');
10:08:07   9  END;
10:08:07  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:27.54
10:08:35 SQL> 
10:08:35 SQL> -----------------------------------------------------------------------
10:08:35 SQL> --			       APPLY/score THE MODEL
10:08:35 SQL> -----------------------------------------------------------------------
10:08:35 SQL> 
10:08:35 SQL> -- Cleanup old scoring data preparation objects for repeat runs
10:08:35 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
10:08:35   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:08:35   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
10:08:35 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
10:08:35   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:08:35   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
10:08:35 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
10:08:35   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:08:35   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
10:08:35 SQL> -----------------------
10:08:35 SQL> -- PREPARE SCORING DATA
10:08:35 SQL> --
10:08:35 SQL> -- If the data for model creation has been prepared, then the data
10:08:35 SQL> -- to be scored using the model must be prepared in the same manner
10:08:35 SQL> -- in order to obtain meaningful results.
10:08:35 SQL> --
10:08:35 SQL> -- 1. Missing Value treatment for all Predictors and
10:08:35 SQL> -- 2. Normalization
10:08:35 SQL> -- No outlier treatment will be performed during test and apply. The
10:08:35 SQL> -- normalization step is sufficient, since the normalization parameters
10:08:35 SQL> -- already capture the effects of outlier treatment done with build data.
10:08:35 SQL> --
10:08:35 SQL> BEGIN
10:08:35   2  	-- Xform Test data to replace missing values
10:08:35   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
10:08:35   4  	  miss_table_name => 'svmc_miss_num',
10:08:35   5  	  data_table_name => '&scoretable',
10:08:35   6  	  xform_view_name => 'xformed_apply_miss_num');
10:08:35   7  
10:08:35   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
10:08:35   9  	  miss_table_name => 'svmc_miss_cat',
10:08:35  10  	  data_table_name => '&scoretable',
10:08:35  11  	  xform_view_name => 'xformed_apply_miss_cat');
10:08:35  12  
10:08:35  13  	-- Normalize the data to be scored
10:08:35  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
10:08:35  15  	  norm_table_name => 'svmc_norm',
10:08:35  16  	  data_table_name => '&scoretable',
10:08:35  17  	  xform_view_name => 'svmc_apply_prep');
10:08:35  18  END;
10:08:35  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.25
10:08:36 SQL> 
10:08:36 SQL> -- Use same model_name used in score.sql
10:08:36 SQL> DEFINE model_name = 'forex14'
10:08:36 SQL> 
10:08:36 SQL> -- CREATE TABLE fxscores6 (prdate VARCHAR2(30),score NUMBER,rundate DATE,pair VARCHAR2(8),ydate DATE);
10:08:36 SQL> 
10:08:36 SQL> DELETE fxscores6 WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.04
10:08:36 SQL> 
10:08:36 SQL> INSERT INTO fxscores6 (prdate,score,rundate,pair,ydate)
10:08:36   2  SELECT
10:08:36   3  prdate
10:08:36   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
10:08:36   5  ,sysdate
10:08:36   6  ,SUBSTR(prdate,1,3)pair
10:08:36   7  ,SUBSTR(prdate,4,19)ydate
10:08:36   8  FROM svmc_apply_prep
10:08:36   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.17
10:08:37 SQL> @aud_score1day.sql  2011-01-04 09:55:00
10:08:37 SQL> --
10:08:37 SQL> -- aud_score1day.sql
10:08:37 SQL> --
10:08:37 SQL> 
10:08:37 SQL> CREATE OR REPLACE VIEW sme AS
10:08:37   2  SELECT
10:08:37   3  'aud'||m.ydate prdate
10:08:37   4  ,NULL gatt
10:08:37   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
10:08:37   6  ,eur_g00
10:08:37   7  ,eur_g01
10:08:37   8  ,eur_g02
10:08:37   9  ,eur_g03
10:08:37  10  ,eur_g04
10:08:37  11  ,eur_g05
10:08:37  12  ,eur_g06
10:08:37  13  ,eur_g07
10:08:37  14  ,eur_g08
10:08:37  15  ,eur_g09
10:08:37  16  ,eur_g10
10:08:37  17  ,eur_g11
10:08:37  18  ,eur_g12
10:08:37  19  ,eur_g13
10:08:37  20  ,eur_g14
10:08:37  21  ,eur_g15
10:08:37  22  ,eur_g16
10:08:37  23  ,eur_g17
10:08:37  24  ,eur_g18
10:08:37  25  ,eur_g19
10:08:37  26  ,eur_g20
10:08:37  27  ,eur_g21
10:08:37  28  ,eur_g22
10:08:37  29  ,eur_g23
10:08:37  30  ,eur_g24
10:08:37  31  ,eur_g25
10:08:37  32  ,eur_g26
10:08:37  33  ,eur_g27
10:08:37  34  ,eur_g28
10:08:37  35  ,eur_g29
10:08:37  36  ,eur_g30
10:08:37  37  ,eur_g31
10:08:37  38  ,eur_g32
10:08:37  39  ,eur_g33
10:08:37  40  ,eur_g34
10:08:37  41  ,eur_g35
10:08:37  42  ,eur_g36
10:08:37  43  ,eur_g37
10:08:37  44  ,eur_g38
10:08:37  45  ,eur_g39
10:08:37  46  ,eur_g40
10:08:37  47  ,eur_g41
10:08:37  48  ,aud_g00
10:08:37  49  ,aud_g01
10:08:37  50  ,aud_g02
10:08:37  51  ,aud_g03
10:08:37  52  ,aud_g04
10:08:37  53  ,aud_g05
10:08:37  54  ,aud_g06
10:08:37  55  ,aud_g07
10:08:37  56  ,aud_g08
10:08:37  57  ,aud_g09
10:08:37  58  ,aud_g10
10:08:37  59  ,aud_g11
10:08:37  60  ,aud_g12
10:08:37  61  ,aud_g13
10:08:37  62  ,aud_g14
10:08:37  63  ,aud_g15
10:08:37  64  ,aud_g16
10:08:37  65  ,aud_g17
10:08:37  66  ,aud_g18
10:08:37  67  ,aud_g19
10:08:37  68  ,aud_g20
10:08:37  69  ,aud_g21
10:08:37  70  ,aud_g22
10:08:37  71  ,aud_g23
10:08:37  72  ,aud_g24
10:08:37  73  ,aud_g25
10:08:37  74  ,aud_g26
10:08:37  75  ,aud_g27
10:08:37  76  ,aud_g28
10:08:37  77  ,aud_g29
10:08:37  78  ,aud_g30
10:08:37  79  ,aud_g31
10:08:37  80  ,aud_g32
10:08:37  81  ,aud_g33
10:08:37  82  ,aud_g34
10:08:37  83  ,aud_g35
10:08:37  84  ,aud_g36
10:08:37  85  ,aud_g37
10:08:37  86  ,aud_g38
10:08:37  87  ,aud_g39
10:08:37  88  ,aud_g40
10:08:37  89  ,aud_g41
10:08:37  90  ,gbp_g00
10:08:37  91  ,gbp_g01
10:08:37  92  ,gbp_g02
10:08:37  93  ,gbp_g03
10:08:37  94  ,gbp_g04
10:08:37  95  ,gbp_g05
10:08:37  96  ,gbp_g06
10:08:37  97  ,gbp_g07
10:08:37  98  ,gbp_g08
10:08:37  99  ,gbp_g09
10:08:37 100  ,gbp_g10
10:08:37 101  ,gbp_g11
10:08:37 102  ,gbp_g12
10:08:37 103  ,gbp_g13
10:08:37 104  ,gbp_g14
10:08:37 105  ,gbp_g15
10:08:37 106  ,gbp_g16
10:08:37 107  ,gbp_g17
10:08:37 108  ,gbp_g18
10:08:37 109  ,gbp_g19
10:08:37 110  ,gbp_g20
10:08:37 111  ,gbp_g21
10:08:37 112  ,gbp_g22
10:08:37 113  ,gbp_g23
10:08:37 114  ,gbp_g24
10:08:37 115  ,gbp_g25
10:08:37 116  ,gbp_g26
10:08:37 117  ,gbp_g27
10:08:37 118  ,gbp_g28
10:08:37 119  ,gbp_g29
10:08:37 120  ,gbp_g30
10:08:37 121  ,gbp_g31
10:08:37 122  ,gbp_g32
10:08:37 123  ,gbp_g33
10:08:37 124  ,gbp_g34
10:08:37 125  ,gbp_g35
10:08:37 126  ,gbp_g36
10:08:37 127  ,gbp_g37
10:08:37 128  ,gbp_g38
10:08:37 129  ,gbp_g39
10:08:37 130  ,gbp_g40
10:08:37 131  ,gbp_g41
10:08:37 132  ,jpy_g00
10:08:37 133  ,jpy_g01
10:08:37 134  ,jpy_g02
10:08:37 135  ,jpy_g03
10:08:37 136  ,jpy_g04
10:08:37 137  ,jpy_g05
10:08:37 138  ,jpy_g06
10:08:37 139  ,jpy_g07
10:08:37 140  ,jpy_g08
10:08:37 141  ,jpy_g09
10:08:37 142  ,jpy_g10
10:08:37 143  ,jpy_g11
10:08:37 144  ,jpy_g12
10:08:37 145  ,jpy_g13
10:08:37 146  ,jpy_g14
10:08:37 147  ,jpy_g15
10:08:37 148  ,jpy_g16
10:08:37 149  ,jpy_g17
10:08:37 150  ,jpy_g18
10:08:37 151  ,jpy_g19
10:08:37 152  ,jpy_g20
10:08:37 153  ,jpy_g21
10:08:37 154  ,jpy_g22
10:08:37 155  ,jpy_g23
10:08:37 156  ,jpy_g24
10:08:37 157  ,jpy_g25
10:08:37 158  ,jpy_g26
10:08:37 159  ,jpy_g27
10:08:37 160  ,jpy_g28
10:08:37 161  ,jpy_g29
10:08:37 162  ,jpy_g30
10:08:37 163  ,jpy_g31
10:08:37 164  ,jpy_g32
10:08:37 165  ,jpy_g33
10:08:37 166  ,jpy_g34
10:08:37 167  ,jpy_g35
10:08:37 168  ,jpy_g36
10:08:37 169  ,jpy_g37
10:08:37 170  ,jpy_g38
10:08:37 171  ,jpy_g39
10:08:37 172  ,jpy_g40
10:08:37 173  ,jpy_g41
10:08:37 174  ,cad_g00
10:08:37 175  ,cad_g01
10:08:37 176  ,cad_g02
10:08:37 177  ,cad_g03
10:08:37 178  ,cad_g04
10:08:37 179  ,cad_g05
10:08:37 180  ,cad_g06
10:08:37 181  ,cad_g07
10:08:37 182  ,cad_g08
10:08:37 183  ,cad_g09
10:08:37 184  ,cad_g10
10:08:37 185  ,cad_g11
10:08:37 186  ,cad_g12
10:08:37 187  ,cad_g13
10:08:37 188  ,cad_g14
10:08:37 189  ,cad_g15
10:08:37 190  ,cad_g16
10:08:37 191  ,cad_g17
10:08:37 192  ,cad_g18
10:08:37 193  ,cad_g19
10:08:37 194  ,cad_g20
10:08:37 195  ,cad_g21
10:08:37 196  ,cad_g22
10:08:37 197  ,cad_g23
10:08:37 198  ,cad_g24
10:08:37 199  ,cad_g25
10:08:37 200  ,cad_g26
10:08:37 201  ,cad_g27
10:08:37 202  ,cad_g28
10:08:37 203  ,cad_g29
10:08:37 204  ,cad_g30
10:08:37 205  ,cad_g31
10:08:37 206  ,cad_g32
10:08:37 207  ,cad_g33
10:08:37 208  ,cad_g34
10:08:37 209  ,cad_g35
10:08:37 210  ,cad_g36
10:08:37 211  ,cad_g37
10:08:37 212  ,cad_g38
10:08:37 213  ,cad_g39
10:08:37 214  ,cad_g40
10:08:37 215  ,cad_g41
10:08:37 216  ,chf_g00
10:08:37 217  ,chf_g01
10:08:37 218  ,chf_g02
10:08:37 219  ,chf_g03
10:08:37 220  ,chf_g04
10:08:37 221  ,chf_g05
10:08:37 222  ,chf_g06
10:08:37 223  ,chf_g07
10:08:37 224  ,chf_g08
10:08:37 225  ,chf_g09
10:08:37 226  ,chf_g10
10:08:37 227  ,chf_g11
10:08:37 228  ,chf_g12
10:08:37 229  ,chf_g13
10:08:37 230  ,chf_g14
10:08:37 231  ,chf_g15
10:08:37 232  ,chf_g16
10:08:37 233  ,chf_g17
10:08:37 234  ,chf_g18
10:08:37 235  ,chf_g19
10:08:37 236  ,chf_g20
10:08:37 237  ,chf_g21
10:08:37 238  ,chf_g22
10:08:37 239  ,chf_g23
10:08:37 240  ,chf_g24
10:08:37 241  ,chf_g25
10:08:37 242  ,chf_g26
10:08:37 243  ,chf_g27
10:08:37 244  ,chf_g28
10:08:37 245  ,chf_g29
10:08:37 246  ,chf_g30
10:08:37 247  ,chf_g31
10:08:37 248  ,chf_g32
10:08:37 249  ,chf_g33
10:08:37 250  ,chf_g34
10:08:37 251  ,chf_g35
10:08:37 252  ,chf_g36
10:08:37 253  ,chf_g37
10:08:37 254  ,chf_g38
10:08:37 255  ,chf_g39
10:08:37 256  ,chf_g40
10:08:37 257  ,chf_g41
10:08:37 258  FROM aud_ms6 m
10:08:37 259  WHERE m.ydate = '&1'||' '||'&2'
10:08:37 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2011-01-04'||' '||'09:55:00'

View created.

Elapsed: 00:00:00.16
10:08:37 SQL> 
10:08:37 SQL> -- rpt
10:08:37 SQL> -- We should see just 1 row:
10:08:37 SQL> 
10:08:37 SQL> SELECT COUNT(prdate) FROM sme
10:08:37   2  
10:08:37 SQL> -- Build the model:
10:08:37 SQL> CREATE OR REPLACE VIEW bme AS
10:08:37   2  SELECT
10:08:37   3  'aud'||m.ydate prdate
10:08:37   4  ,gatt
10:08:37   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
10:08:37   6  ,eur_g00
10:08:37   7  ,eur_g01
10:08:37   8  ,eur_g02
10:08:37   9  ,eur_g03
10:08:37  10  ,eur_g04
10:08:37  11  ,eur_g05
10:08:37  12  ,eur_g06
10:08:37  13  ,eur_g07
10:08:37  14  ,eur_g08
10:08:37  15  ,eur_g09
10:08:37  16  ,eur_g10
10:08:37  17  ,eur_g11
10:08:37  18  ,eur_g12
10:08:37  19  ,eur_g13
10:08:37  20  ,eur_g14
10:08:37  21  ,eur_g15
10:08:37  22  ,eur_g16
10:08:37  23  ,eur_g17
10:08:37  24  ,eur_g18
10:08:37  25  ,eur_g19
10:08:37  26  ,eur_g20
10:08:37  27  ,eur_g21
10:08:37  28  ,eur_g22
10:08:37  29  ,eur_g23
10:08:37  30  ,eur_g24
10:08:37  31  ,eur_g25
10:08:37  32  ,eur_g26
10:08:37  33  ,eur_g27
10:08:37  34  ,eur_g28
10:08:37  35  ,eur_g29
10:08:37  36  ,eur_g30
10:08:37  37  ,eur_g31
10:08:37  38  ,eur_g32
10:08:37  39  ,eur_g33
10:08:37  40  ,eur_g34
10:08:37  41  ,eur_g35
10:08:37  42  ,eur_g36
10:08:37  43  ,eur_g37
10:08:37  44  ,eur_g38
10:08:37  45  ,eur_g39
10:08:37  46  ,eur_g40
10:08:37  47  ,eur_g41
10:08:37  48  ,aud_g00
10:08:37  49  ,aud_g01
10:08:37  50  ,aud_g02
10:08:37  51  ,aud_g03
10:08:37  52  ,aud_g04
10:08:37  53  ,aud_g05
10:08:37  54  ,aud_g06
10:08:37  55  ,aud_g07
10:08:37  56  ,aud_g08
10:08:37  57  ,aud_g09
10:08:37  58  ,aud_g10
10:08:37  59  ,aud_g11
10:08:37  60  ,aud_g12
10:08:37  61  ,aud_g13
10:08:37  62  ,aud_g14
10:08:37  63  ,aud_g15
10:08:37  64  ,aud_g16
10:08:37  65  ,aud_g17
10:08:37  66  ,aud_g18
10:08:37  67  ,aud_g19
10:08:37  68  ,aud_g20
10:08:37  69  ,aud_g21
10:08:37  70  ,aud_g22
10:08:37  71  ,aud_g23
10:08:37  72  ,aud_g24
10:08:37  73  ,aud_g25
10:08:37  74  ,aud_g26
10:08:37  75  ,aud_g27
10:08:37  76  ,aud_g28
10:08:37  77  ,aud_g29
10:08:37  78  ,aud_g30
10:08:37  79  ,aud_g31
10:08:37  80  ,aud_g32
10:08:37  81  ,aud_g33
10:08:37  82  ,aud_g34
10:08:37  83  ,aud_g35
10:08:37  84  ,aud_g36
10:08:37  85  ,aud_g37
10:08:37  86  ,aud_g38
10:08:37  87  ,aud_g39
10:08:37  88  ,aud_g40
10:08:37  89  ,aud_g41
10:08:37  90  ,gbp_g00
10:08:37  91  ,gbp_g01
10:08:37  92  ,gbp_g02
10:08:37  93  ,gbp_g03
10:08:37  94  ,gbp_g04
10:08:37  95  ,gbp_g05
10:08:37  96  ,gbp_g06
10:08:37  97  ,gbp_g07
10:08:37  98  ,gbp_g08
10:08:37  99  ,gbp_g09
10:08:37 100  ,gbp_g10
10:08:37 101  ,gbp_g11
10:08:37 102  ,gbp_g12
10:08:37 103  ,gbp_g13
10:08:37 104  ,gbp_g14
10:08:37 105  ,gbp_g15
10:08:37 106  ,gbp_g16
10:08:37 107  ,gbp_g17
10:08:37 108  ,gbp_g18
10:08:37 109  ,gbp_g19
10:08:37 110  ,gbp_g20
10:08:37 111  ,gbp_g21
10:08:37 112  ,gbp_g22
10:08:37 113  ,gbp_g23
10:08:37 114  ,gbp_g24
10:08:37 115  ,gbp_g25
10:08:37 116  ,gbp_g26
10:08:37 117  ,gbp_g27
10:08:37 118  ,gbp_g28
10:08:37 119  ,gbp_g29
10:08:37 120  ,gbp_g30
10:08:37 121  ,gbp_g31
10:08:37 122  ,gbp_g32
10:08:37 123  ,gbp_g33
10:08:37 124  ,gbp_g34
10:08:37 125  ,gbp_g35
10:08:37 126  ,gbp_g36
10:08:37 127  ,gbp_g37
10:08:37 128  ,gbp_g38
10:08:37 129  ,gbp_g39
10:08:37 130  ,gbp_g40
10:08:37 131  ,gbp_g41
10:08:37 132  ,jpy_g00
10:08:37 133  ,jpy_g01
10:08:37 134  ,jpy_g02
10:08:37 135  ,jpy_g03
10:08:37 136  ,jpy_g04
10:08:37 137  ,jpy_g05
10:08:37 138  ,jpy_g06
10:08:37 139  ,jpy_g07
10:08:37 140  ,jpy_g08
10:08:37 141  ,jpy_g09
10:08:37 142  ,jpy_g10
10:08:37 143  ,jpy_g11
10:08:37 144  ,jpy_g12
10:08:37 145  ,jpy_g13
10:08:37 146  ,jpy_g14
10:08:37 147  ,jpy_g15
10:08:37 148  ,jpy_g16
10:08:37 149  ,jpy_g17
10:08:37 150  ,jpy_g18
10:08:37 151  ,jpy_g19
10:08:37 152  ,jpy_g20
10:08:37 153  ,jpy_g21
10:08:37 154  ,jpy_g22
10:08:37 155  ,jpy_g23
10:08:37 156  ,jpy_g24
10:08:37 157  ,jpy_g25
10:08:37 158  ,jpy_g26
10:08:37 159  ,jpy_g27
10:08:37 160  ,jpy_g28
10:08:37 161  ,jpy_g29
10:08:37 162  ,jpy_g30
10:08:37 163  ,jpy_g31
10:08:37 164  ,jpy_g32
10:08:37 165  ,jpy_g33
10:08:37 166  ,jpy_g34
10:08:37 167  ,jpy_g35
10:08:37 168  ,jpy_g36
10:08:37 169  ,jpy_g37
10:08:37 170  ,jpy_g38
10:08:37 171  ,jpy_g39
10:08:37 172  ,jpy_g40
10:08:37 173  ,jpy_g41
10:08:37 174  ,cad_g00
10:08:37 175  ,cad_g01
10:08:37 176  ,cad_g02
10:08:37 177  ,cad_g03
10:08:37 178  ,cad_g04
10:08:37 179  ,cad_g05
10:08:37 180  ,cad_g06
10:08:37 181  ,cad_g07
10:08:37 182  ,cad_g08
10:08:37 183  ,cad_g09
10:08:37 184  ,cad_g10
10:08:37 185  ,cad_g11
10:08:37 186  ,cad_g12
10:08:37 187  ,cad_g13
10:08:37 188  ,cad_g14
10:08:37 189  ,cad_g15
10:08:37 190  ,cad_g16
10:08:37 191  ,cad_g17
10:08:37 192  ,cad_g18
10:08:37 193  ,cad_g19
10:08:37 194  ,cad_g20
10:08:37 195  ,cad_g21
10:08:37 196  ,cad_g22
10:08:37 197  ,cad_g23
10:08:37 198  ,cad_g24
10:08:37 199  ,cad_g25
10:08:37 200  ,cad_g26
10:08:37 201  ,cad_g27
10:08:37 202  ,cad_g28
10:08:37 203  ,cad_g29
10:08:37 204  ,cad_g30
10:08:37 205  ,cad_g31
10:08:37 206  ,cad_g32
10:08:37 207  ,cad_g33
10:08:37 208  ,cad_g34
10:08:37 209  ,cad_g35
10:08:37 210  ,cad_g36
10:08:37 211  ,cad_g37
10:08:37 212  ,cad_g38
10:08:37 213  ,cad_g39
10:08:37 214  ,cad_g40
10:08:37 215  ,cad_g41
10:08:37 216  ,chf_g00
10:08:37 217  ,chf_g01
10:08:37 218  ,chf_g02
10:08:37 219  ,chf_g03
10:08:37 220  ,chf_g04
10:08:37 221  ,chf_g05
10:08:37 222  ,chf_g06
10:08:37 223  ,chf_g07
10:08:37 224  ,chf_g08
10:08:37 225  ,chf_g09
10:08:37 226  ,chf_g10
10:08:37 227  ,chf_g11
10:08:37 228  ,chf_g12
10:08:37 229  ,chf_g13
10:08:37 230  ,chf_g14
10:08:37 231  ,chf_g15
10:08:37 232  ,chf_g16
10:08:37 233  ,chf_g17
10:08:37 234  ,chf_g18
10:08:37 235  ,chf_g19
10:08:37 236  ,chf_g20
10:08:37 237  ,chf_g21
10:08:37 238  ,chf_g22
10:08:37 239  ,chf_g23
10:08:37 240  ,chf_g24
10:08:37 241  ,chf_g25
10:08:37 242  ,chf_g26
10:08:37 243  ,chf_g27
10:08:37 244  ,chf_g28
10:08:37 245  ,chf_g29
10:08:37 246  ,chf_g30
10:08:37 247  ,chf_g31
10:08:37 248  ,chf_g32
10:08:37 249  ,chf_g33
10:08:37 250  ,chf_g34
10:08:37 251  ,chf_g35
10:08:37 252  ,chf_g36
10:08:37 253  ,chf_g37
10:08:37 254  ,chf_g38
10:08:37 255  ,chf_g39
10:08:37 256  ,chf_g40
10:08:37 257  ,chf_g41
10:08:37 258  FROM aud_ms6 m
10:08:37 259  WHERE gatt IN('nup','up')
10:08:37 260  AND 1+m.ydate < '&1'||' '||'&2'
10:08:37 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2011-01-04'||' '||'09:55:00'

View created.

Elapsed: 00:00:00.13
10:08:37 SQL> 
10:08:37 SQL> -- rpt
10:08:37 SQL> 
10:08:37 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt
10:08:37   2  
10:08:37 SQL> SELECT MAX(prdate) FROM bme
10:08:37   2  
10:08:37 SQL> -- Now build model from bme and score sme
10:08:37 SQL> @score1.sql
10:08:37 SQL> -- score1.sql
10:08:37 SQL> 
10:08:37 SQL> -- Does the 1st SVM score
10:08:37 SQL> 
10:08:37 SQL> -- Fill up svmc_apply_prep
10:08:37 SQL> @score.sql
10:08:37 SQL> --
10:08:37 SQL> -- score.sql
10:08:37 SQL> --
10:08:37 SQL> 
10:08:37 SQL> -- usage: score.sql
10:08:37 SQL> 
10:08:37 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
10:08:37 SQL> 
10:08:37 SQL> DEFINE target	= 'gatt'
10:08:37 SQL> DEFINE model_name = 'forex14'
10:08:37 SQL> DEFINE bldtable	= 'bme'
10:08:37 SQL> DEFINE scoretable = 'sme'
10:08:37 SQL> DEFINE case_id	= 'prdate'
10:08:37 SQL> 
10:08:37 SQL> -- Define a variable to help me exclude some columns from some data mining calls
10:08:37 SQL> DEFINE exclude1 = "'&target','&case_id'"
10:08:37 SQL> 
10:08:37 SQL> -- Builds an SVM model using pl/sql.
10:08:37 SQL> 
10:08:37 SQL> -----------------------------------------------------------------------
10:08:37 SQL> --			    BUILD THE MODEL
10:08:37 SQL> -----------------------------------------------------------------------
10:08:37 SQL> 
10:08:37 SQL> -- Cleanup old build data preparation objects for repeat runs
10:08:37 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.01
10:08:37 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
10:08:37 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.00
10:08:37 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.01
10:08:37 SQL> 
10:08:37 SQL> 
10:08:37 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
10:08:37 SQL> --
10:08:37 SQL> -- DROP	TABLE svmc_settings ;
10:08:37 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
10:08:37 SQL> -- DELETE svmc_settings;
10:08:37 SQL> 
10:08:37 SQL> -- The default classification algorithm is Naive Bayes. So override
10:08:37 SQL> -- this choice to SVM using a settings table.
10:08:37 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
10:08:37 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
10:08:37 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
10:08:37 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
10:08:37 SQL> -- models.
10:08:37 SQL> --
10:08:37 SQL> 
10:08:37 SQL> -- Do this once and then comment it out.
10:08:37 SQL> -- That makes script go faster.
10:08:37 SQL> -- BEGIN
10:08:37 SQL> -- -- Populate settings table
10:08:37 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
10:08:37 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
10:08:37 SQL> --
10:08:37 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
10:08:37 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
10:08:37 SQL> --
10:08:37 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
10:08:37 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
10:08:37 SQL> --   COMMIT;
10:08:37 SQL> -- END;
10:08:37 SQL> -- /
10:08:37 SQL> 
10:08:37 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
10:08:37 SQL> 
10:08:37 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
10:08:37   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:08:37   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
10:08:37 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
10:08:37   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:08:37   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
10:08:37 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
10:08:37   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:08:37   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
10:08:37 SQL> 
10:08:37 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
10:08:37   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:08:37   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
10:08:37 SQL> 
10:08:37 SQL> --------------------------------
10:08:37 SQL> -- PREPARE BUILD (TRAINING) DATA
10:08:37 SQL> --
10:08:37 SQL> 
10:08:37 SQL> -- 1. Missing Value treatment for all Predictors and
10:08:37 SQL> -- 2. Outlier Treatment and
10:08:37 SQL> -- 3. Normalization are performed below.
10:08:37 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
10:08:37 SQL> --    normalized here.
10:08:37 SQL> 
10:08:37 SQL> BEGIN
10:08:37   2  	-- Perform missing value treatment for all predictors
10:08:37   3  	-- create miss tables
10:08:37   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
10:08:37   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
10:08:37   6  
10:08:37   7  	-- populate miss tables
10:08:37   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
10:08:37   9  	  miss_table_name => 'svmc_miss_num',
10:08:37  10  	  data_table_name => '&bldtable',
10:08:37  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:08:37  12  
10:08:37  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
10:08:37  14  	  miss_table_name => 'svmc_miss_cat',
10:08:37  15  	  data_table_name => '&bldtable',
10:08:37  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:08:37  17  
10:08:37  18  	-- xform input data to replace missing values
10:08:37  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
10:08:37  20  	  miss_table_name => 'svmc_miss_num',
10:08:37  21  	  data_table_name => '&bldtable',
10:08:37  22  	  xform_view_name => 'xformed_build_miss_num');
10:08:37  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
10:08:37  24  	  miss_table_name => 'svmc_miss_cat',
10:08:37  25  	  data_table_name => '&bldtable',
10:08:37  26  	  xform_view_name => 'xformed_build_miss_cat');
10:08:37  27  
10:08:37  28  	-- Perform outlier treatment.
10:08:37  29  	-- create clip table
10:08:37  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
10:08:37  31  
10:08:37  32  	-- populate clip table
10:08:37  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
10:08:37  34  	  clip_table_name => 'svmc_clip',
10:08:37  35  	  data_table_name => '&bldtable',
10:08:37  36  	  tail_frac	  => 0.025,
10:08:37  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:08:37  38  
10:08:37  39  	-- xform input data to winsorized data
10:08:37  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
10:08:37  41  	  clip_table_name => 'svmc_clip',
10:08:37  42  	  data_table_name => '&bldtable',
10:08:37  43  	  xform_view_name => 'svmc_winsor');
10:08:37  44  
10:08:37  45  	-- create normalization table
10:08:37  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
10:08:37  47  
10:08:37  48  	-- populate normalization table based on winsorized data
10:08:37  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
10:08:37  50  	  norm_table_name => 'svmc_norm',
10:08:37  51  	  data_table_name => 'svmc_winsor',
10:08:37  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:08:37  53  
10:08:37  54  	-- normalize the original data
10:08:37  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
10:08:37  56  	  norm_table_name => 'svmc_norm',
10:08:37  57  	  data_table_name => '&bldtable',
10:08:37  58  	  xform_view_name => 'svmc_build_prep');
10:08:37  59  END;
10:08:37  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:17.60
10:08:55 SQL> 
10:08:55 SQL> ---------------------
10:08:55 SQL> -- CREATE A NEW MODEL
10:08:55 SQL> --
10:08:55 SQL> -- Cleanup old model with the same name for repeat runs
10:08:55 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
10:08:55   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:08:55   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.93
10:08:56 SQL> 
10:08:56 SQL> -- Build a new SVM Model
10:08:56 SQL> BEGIN
10:08:56   2  	DBMS_DATA_MINING.CREATE_MODEL(
10:08:56   3  	  model_name	      => '&model_name',
10:08:56   4  	  mining_function     => dbms_data_mining.classification,
10:08:56   5  	  data_table_name     => 'svmc_build_prep',
10:08:56   6  	  case_id_column_name => '&case_id',
10:08:56   7  	  target_column_name  => '&target',
10:08:56   8  	  settings_table_name => 'svmc_settings');
10:08:56   9  END;
10:08:56  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:26.32
10:09:22 SQL> 
10:09:22 SQL> -----------------------------------------------------------------------
10:09:22 SQL> --			       APPLY/score THE MODEL
10:09:22 SQL> -----------------------------------------------------------------------
10:09:22 SQL> 
10:09:22 SQL> -- Cleanup old scoring data preparation objects for repeat runs
10:09:22 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
10:09:22   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:09:22   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
10:09:22 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
10:09:22   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:09:22   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
10:09:22 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
10:09:22   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:09:22   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
10:09:22 SQL> -----------------------
10:09:22 SQL> -- PREPARE SCORING DATA
10:09:22 SQL> --
10:09:22 SQL> -- If the data for model creation has been prepared, then the data
10:09:22 SQL> -- to be scored using the model must be prepared in the same manner
10:09:22 SQL> -- in order to obtain meaningful results.
10:09:22 SQL> --
10:09:22 SQL> -- 1. Missing Value treatment for all Predictors and
10:09:22 SQL> -- 2. Normalization
10:09:22 SQL> -- No outlier treatment will be performed during test and apply. The
10:09:22 SQL> -- normalization step is sufficient, since the normalization parameters
10:09:22 SQL> -- already capture the effects of outlier treatment done with build data.
10:09:22 SQL> --
10:09:22 SQL> BEGIN
10:09:22   2  	-- Xform Test data to replace missing values
10:09:22   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
10:09:22   4  	  miss_table_name => 'svmc_miss_num',
10:09:22   5  	  data_table_name => '&scoretable',
10:09:22   6  	  xform_view_name => 'xformed_apply_miss_num');
10:09:22   7  
10:09:22   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
10:09:22   9  	  miss_table_name => 'svmc_miss_cat',
10:09:22  10  	  data_table_name => '&scoretable',
10:09:22  11  	  xform_view_name => 'xformed_apply_miss_cat');
10:09:22  12  
10:09:22  13  	-- Normalize the data to be scored
10:09:22  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
10:09:22  15  	  norm_table_name => 'svmc_norm',
10:09:22  16  	  data_table_name => '&scoretable',
10:09:22  17  	  xform_view_name => 'svmc_apply_prep');
10:09:22  18  END;
10:09:22  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.22
10:09:23 SQL> 
10:09:23 SQL> -- Use same model_name used in score.sql
10:09:23 SQL> DEFINE model_name = 'forex14'
10:09:23 SQL> 
10:09:23 SQL> -- CREATE TABLE fxscores6 (prdate VARCHAR2(30),score NUMBER,rundate DATE,pair VARCHAR2(8),ydate DATE);
10:09:23 SQL> 
10:09:23 SQL> DELETE fxscores6 WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.04
10:09:23 SQL> 
10:09:23 SQL> INSERT INTO fxscores6 (prdate,score,rundate,pair,ydate)
10:09:23   2  SELECT
10:09:23   3  prdate
10:09:23   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
10:09:23   5  ,sysdate
10:09:23   6  ,SUBSTR(prdate,1,3)pair
10:09:23   7  ,SUBSTR(prdate,4,19)ydate
10:09:23   8  FROM svmc_apply_prep
10:09:23   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.17
10:09:24 SQL> @aud_score1day_gattn.sql	2011-01-04 09:45:00
10:09:24 SQL> --
10:09:24 SQL> -- aud_score1day_gattn.sql
10:09:24 SQL> --
10:09:24 SQL> 
10:09:24 SQL> CREATE OR REPLACE VIEW sme AS
10:09:24   2  SELECT
10:09:24   3  'aud'||m.ydate prdate
10:09:24   4  ,NULL gattn
10:09:24   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
10:09:24   6  ,eur_g00
10:09:24   7  ,eur_g01
10:09:24   8  ,eur_g02
10:09:24   9  ,eur_g03
10:09:24  10  ,eur_g04
10:09:24  11  ,eur_g05
10:09:24  12  ,eur_g06
10:09:24  13  ,eur_g07
10:09:24  14  ,eur_g08
10:09:24  15  ,eur_g09
10:09:24  16  ,eur_g10
10:09:24  17  ,eur_g11
10:09:24  18  ,eur_g12
10:09:24  19  ,eur_g13
10:09:24  20  ,eur_g14
10:09:24  21  ,eur_g15
10:09:24  22  ,eur_g16
10:09:24  23  ,eur_g17
10:09:24  24  ,eur_g18
10:09:24  25  ,eur_g19
10:09:24  26  ,eur_g20
10:09:24  27  ,eur_g21
10:09:24  28  ,eur_g22
10:09:24  29  ,eur_g23
10:09:24  30  ,eur_g24
10:09:24  31  ,eur_g25
10:09:24  32  ,eur_g26
10:09:24  33  ,eur_g27
10:09:24  34  ,eur_g28
10:09:24  35  ,eur_g29
10:09:24  36  ,eur_g30
10:09:24  37  ,eur_g31
10:09:24  38  ,eur_g32
10:09:24  39  ,eur_g33
10:09:24  40  ,eur_g34
10:09:24  41  ,eur_g35
10:09:24  42  ,eur_g36
10:09:24  43  ,eur_g37
10:09:24  44  ,eur_g38
10:09:24  45  ,eur_g39
10:09:24  46  ,eur_g40
10:09:24  47  ,eur_g41
10:09:24  48  ,aud_g00
10:09:24  49  ,aud_g01
10:09:24  50  ,aud_g02
10:09:24  51  ,aud_g03
10:09:24  52  ,aud_g04
10:09:24  53  ,aud_g05
10:09:24  54  ,aud_g06
10:09:24  55  ,aud_g07
10:09:24  56  ,aud_g08
10:09:24  57  ,aud_g09
10:09:24  58  ,aud_g10
10:09:24  59  ,aud_g11
10:09:24  60  ,aud_g12
10:09:24  61  ,aud_g13
10:09:24  62  ,aud_g14
10:09:24  63  ,aud_g15
10:09:24  64  ,aud_g16
10:09:24  65  ,aud_g17
10:09:24  66  ,aud_g18
10:09:24  67  ,aud_g19
10:09:24  68  ,aud_g20
10:09:24  69  ,aud_g21
10:09:24  70  ,aud_g22
10:09:24  71  ,aud_g23
10:09:24  72  ,aud_g24
10:09:24  73  ,aud_g25
10:09:24  74  ,aud_g26
10:09:24  75  ,aud_g27
10:09:24  76  ,aud_g28
10:09:24  77  ,aud_g29
10:09:24  78  ,aud_g30
10:09:24  79  ,aud_g31
10:09:24  80  ,aud_g32
10:09:24  81  ,aud_g33
10:09:24  82  ,aud_g34
10:09:24  83  ,aud_g35
10:09:24  84  ,aud_g36
10:09:24  85  ,aud_g37
10:09:24  86  ,aud_g38
10:09:24  87  ,aud_g39
10:09:24  88  ,aud_g40
10:09:24  89  ,aud_g41
10:09:24  90  ,gbp_g00
10:09:24  91  ,gbp_g01
10:09:24  92  ,gbp_g02
10:09:24  93  ,gbp_g03
10:09:24  94  ,gbp_g04
10:09:24  95  ,gbp_g05
10:09:24  96  ,gbp_g06
10:09:24  97  ,gbp_g07
10:09:24  98  ,gbp_g08
10:09:24  99  ,gbp_g09
10:09:24 100  ,gbp_g10
10:09:24 101  ,gbp_g11
10:09:24 102  ,gbp_g12
10:09:24 103  ,gbp_g13
10:09:24 104  ,gbp_g14
10:09:24 105  ,gbp_g15
10:09:24 106  ,gbp_g16
10:09:24 107  ,gbp_g17
10:09:24 108  ,gbp_g18
10:09:24 109  ,gbp_g19
10:09:24 110  ,gbp_g20
10:09:24 111  ,gbp_g21
10:09:24 112  ,gbp_g22
10:09:24 113  ,gbp_g23
10:09:24 114  ,gbp_g24
10:09:24 115  ,gbp_g25
10:09:24 116  ,gbp_g26
10:09:24 117  ,gbp_g27
10:09:24 118  ,gbp_g28
10:09:24 119  ,gbp_g29
10:09:24 120  ,gbp_g30
10:09:24 121  ,gbp_g31
10:09:24 122  ,gbp_g32
10:09:24 123  ,gbp_g33
10:09:24 124  ,gbp_g34
10:09:24 125  ,gbp_g35
10:09:24 126  ,gbp_g36
10:09:24 127  ,gbp_g37
10:09:24 128  ,gbp_g38
10:09:24 129  ,gbp_g39
10:09:24 130  ,gbp_g40
10:09:24 131  ,gbp_g41
10:09:24 132  ,jpy_g00
10:09:24 133  ,jpy_g01
10:09:24 134  ,jpy_g02
10:09:24 135  ,jpy_g03
10:09:24 136  ,jpy_g04
10:09:24 137  ,jpy_g05
10:09:24 138  ,jpy_g06
10:09:24 139  ,jpy_g07
10:09:24 140  ,jpy_g08
10:09:24 141  ,jpy_g09
10:09:24 142  ,jpy_g10
10:09:24 143  ,jpy_g11
10:09:24 144  ,jpy_g12
10:09:24 145  ,jpy_g13
10:09:24 146  ,jpy_g14
10:09:24 147  ,jpy_g15
10:09:24 148  ,jpy_g16
10:09:24 149  ,jpy_g17
10:09:24 150  ,jpy_g18
10:09:24 151  ,jpy_g19
10:09:24 152  ,jpy_g20
10:09:24 153  ,jpy_g21
10:09:24 154  ,jpy_g22
10:09:24 155  ,jpy_g23
10:09:24 156  ,jpy_g24
10:09:24 157  ,jpy_g25
10:09:24 158  ,jpy_g26
10:09:24 159  ,jpy_g27
10:09:24 160  ,jpy_g28
10:09:24 161  ,jpy_g29
10:09:24 162  ,jpy_g30
10:09:24 163  ,jpy_g31
10:09:24 164  ,jpy_g32
10:09:24 165  ,jpy_g33
10:09:24 166  ,jpy_g34
10:09:24 167  ,jpy_g35
10:09:24 168  ,jpy_g36
10:09:24 169  ,jpy_g37
10:09:24 170  ,jpy_g38
10:09:24 171  ,jpy_g39
10:09:24 172  ,jpy_g40
10:09:24 173  ,jpy_g41
10:09:24 174  ,cad_g00
10:09:24 175  ,cad_g01
10:09:24 176  ,cad_g02
10:09:24 177  ,cad_g03
10:09:24 178  ,cad_g04
10:09:24 179  ,cad_g05
10:09:24 180  ,cad_g06
10:09:24 181  ,cad_g07
10:09:24 182  ,cad_g08
10:09:24 183  ,cad_g09
10:09:24 184  ,cad_g10
10:09:24 185  ,cad_g11
10:09:24 186  ,cad_g12
10:09:24 187  ,cad_g13
10:09:24 188  ,cad_g14
10:09:24 189  ,cad_g15
10:09:24 190  ,cad_g16
10:09:24 191  ,cad_g17
10:09:24 192  ,cad_g18
10:09:24 193  ,cad_g19
10:09:24 194  ,cad_g20
10:09:24 195  ,cad_g21
10:09:24 196  ,cad_g22
10:09:24 197  ,cad_g23
10:09:24 198  ,cad_g24
10:09:24 199  ,cad_g25
10:09:24 200  ,cad_g26
10:09:24 201  ,cad_g27
10:09:24 202  ,cad_g28
10:09:24 203  ,cad_g29
10:09:24 204  ,cad_g30
10:09:24 205  ,cad_g31
10:09:24 206  ,cad_g32
10:09:24 207  ,cad_g33
10:09:24 208  ,cad_g34
10:09:24 209  ,cad_g35
10:09:24 210  ,cad_g36
10:09:24 211  ,cad_g37
10:09:24 212  ,cad_g38
10:09:24 213  ,cad_g39
10:09:24 214  ,cad_g40
10:09:24 215  ,cad_g41
10:09:24 216  ,chf_g00
10:09:24 217  ,chf_g01
10:09:24 218  ,chf_g02
10:09:24 219  ,chf_g03
10:09:24 220  ,chf_g04
10:09:24 221  ,chf_g05
10:09:24 222  ,chf_g06
10:09:24 223  ,chf_g07
10:09:24 224  ,chf_g08
10:09:24 225  ,chf_g09
10:09:24 226  ,chf_g10
10:09:24 227  ,chf_g11
10:09:24 228  ,chf_g12
10:09:24 229  ,chf_g13
10:09:24 230  ,chf_g14
10:09:24 231  ,chf_g15
10:09:24 232  ,chf_g16
10:09:24 233  ,chf_g17
10:09:24 234  ,chf_g18
10:09:24 235  ,chf_g19
10:09:24 236  ,chf_g20
10:09:24 237  ,chf_g21
10:09:24 238  ,chf_g22
10:09:24 239  ,chf_g23
10:09:24 240  ,chf_g24
10:09:24 241  ,chf_g25
10:09:24 242  ,chf_g26
10:09:24 243  ,chf_g27
10:09:24 244  ,chf_g28
10:09:24 245  ,chf_g29
10:09:24 246  ,chf_g30
10:09:24 247  ,chf_g31
10:09:24 248  ,chf_g32
10:09:24 249  ,chf_g33
10:09:24 250  ,chf_g34
10:09:24 251  ,chf_g35
10:09:24 252  ,chf_g36
10:09:24 253  ,chf_g37
10:09:24 254  ,chf_g38
10:09:24 255  ,chf_g39
10:09:24 256  ,chf_g40
10:09:24 257  ,chf_g41
10:09:24 258  FROM aud_ms6 m
10:09:24 259  WHERE m.ydate = '&1'||' '||'&2'
10:09:24 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2011-01-04'||' '||'09:45:00'

View created.

Elapsed: 00:00:00.14
10:09:24 SQL> 
10:09:24 SQL> -- rpt
10:09:24 SQL> -- We should see just 1 row:
10:09:24 SQL> 
10:09:24 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
10:09:24 SQL> 
10:09:24 SQL> -- Build the model:
10:09:24 SQL> CREATE OR REPLACE VIEW bme AS
10:09:24   2  SELECT
10:09:24   3  'aud'||m.ydate prdate
10:09:24   4  ,gattn
10:09:24   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
10:09:24   6  ,eur_g00
10:09:24   7  ,eur_g01
10:09:24   8  ,eur_g02
10:09:24   9  ,eur_g03
10:09:24  10  ,eur_g04
10:09:24  11  ,eur_g05
10:09:24  12  ,eur_g06
10:09:24  13  ,eur_g07
10:09:24  14  ,eur_g08
10:09:24  15  ,eur_g09
10:09:24  16  ,eur_g10
10:09:24  17  ,eur_g11
10:09:24  18  ,eur_g12
10:09:24  19  ,eur_g13
10:09:24  20  ,eur_g14
10:09:24  21  ,eur_g15
10:09:24  22  ,eur_g16
10:09:24  23  ,eur_g17
10:09:24  24  ,eur_g18
10:09:24  25  ,eur_g19
10:09:24  26  ,eur_g20
10:09:24  27  ,eur_g21
10:09:24  28  ,eur_g22
10:09:24  29  ,eur_g23
10:09:24  30  ,eur_g24
10:09:24  31  ,eur_g25
10:09:24  32  ,eur_g26
10:09:24  33  ,eur_g27
10:09:24  34  ,eur_g28
10:09:24  35  ,eur_g29
10:09:24  36  ,eur_g30
10:09:24  37  ,eur_g31
10:09:24  38  ,eur_g32
10:09:24  39  ,eur_g33
10:09:24  40  ,eur_g34
10:09:24  41  ,eur_g35
10:09:24  42  ,eur_g36
10:09:24  43  ,eur_g37
10:09:24  44  ,eur_g38
10:09:24  45  ,eur_g39
10:09:24  46  ,eur_g40
10:09:24  47  ,eur_g41
10:09:24  48  ,aud_g00
10:09:24  49  ,aud_g01
10:09:24  50  ,aud_g02
10:09:24  51  ,aud_g03
10:09:24  52  ,aud_g04
10:09:24  53  ,aud_g05
10:09:24  54  ,aud_g06
10:09:24  55  ,aud_g07
10:09:24  56  ,aud_g08
10:09:24  57  ,aud_g09
10:09:24  58  ,aud_g10
10:09:24  59  ,aud_g11
10:09:24  60  ,aud_g12
10:09:24  61  ,aud_g13
10:09:24  62  ,aud_g14
10:09:24  63  ,aud_g15
10:09:24  64  ,aud_g16
10:09:24  65  ,aud_g17
10:09:24  66  ,aud_g18
10:09:24  67  ,aud_g19
10:09:24  68  ,aud_g20
10:09:24  69  ,aud_g21
10:09:24  70  ,aud_g22
10:09:24  71  ,aud_g23
10:09:24  72  ,aud_g24
10:09:24  73  ,aud_g25
10:09:24  74  ,aud_g26
10:09:24  75  ,aud_g27
10:09:24  76  ,aud_g28
10:09:24  77  ,aud_g29
10:09:24  78  ,aud_g30
10:09:24  79  ,aud_g31
10:09:24  80  ,aud_g32
10:09:24  81  ,aud_g33
10:09:24  82  ,aud_g34
10:09:24  83  ,aud_g35
10:09:24  84  ,aud_g36
10:09:24  85  ,aud_g37
10:09:24  86  ,aud_g38
10:09:24  87  ,aud_g39
10:09:24  88  ,aud_g40
10:09:24  89  ,aud_g41
10:09:24  90  ,gbp_g00
10:09:24  91  ,gbp_g01
10:09:24  92  ,gbp_g02
10:09:24  93  ,gbp_g03
10:09:24  94  ,gbp_g04
10:09:24  95  ,gbp_g05
10:09:24  96  ,gbp_g06
10:09:24  97  ,gbp_g07
10:09:24  98  ,gbp_g08
10:09:24  99  ,gbp_g09
10:09:24 100  ,gbp_g10
10:09:24 101  ,gbp_g11
10:09:24 102  ,gbp_g12
10:09:24 103  ,gbp_g13
10:09:24 104  ,gbp_g14
10:09:24 105  ,gbp_g15
10:09:24 106  ,gbp_g16
10:09:24 107  ,gbp_g17
10:09:24 108  ,gbp_g18
10:09:24 109  ,gbp_g19
10:09:24 110  ,gbp_g20
10:09:24 111  ,gbp_g21
10:09:24 112  ,gbp_g22
10:09:24 113  ,gbp_g23
10:09:24 114  ,gbp_g24
10:09:24 115  ,gbp_g25
10:09:24 116  ,gbp_g26
10:09:24 117  ,gbp_g27
10:09:24 118  ,gbp_g28
10:09:24 119  ,gbp_g29
10:09:24 120  ,gbp_g30
10:09:24 121  ,gbp_g31
10:09:24 122  ,gbp_g32
10:09:24 123  ,gbp_g33
10:09:24 124  ,gbp_g34
10:09:24 125  ,gbp_g35
10:09:24 126  ,gbp_g36
10:09:24 127  ,gbp_g37
10:09:24 128  ,gbp_g38
10:09:24 129  ,gbp_g39
10:09:24 130  ,gbp_g40
10:09:24 131  ,gbp_g41
10:09:24 132  ,jpy_g00
10:09:24 133  ,jpy_g01
10:09:24 134  ,jpy_g02
10:09:24 135  ,jpy_g03
10:09:24 136  ,jpy_g04
10:09:24 137  ,jpy_g05
10:09:24 138  ,jpy_g06
10:09:24 139  ,jpy_g07
10:09:24 140  ,jpy_g08
10:09:24 141  ,jpy_g09
10:09:24 142  ,jpy_g10
10:09:24 143  ,jpy_g11
10:09:24 144  ,jpy_g12
10:09:24 145  ,jpy_g13
10:09:24 146  ,jpy_g14
10:09:24 147  ,jpy_g15
10:09:24 148  ,jpy_g16
10:09:24 149  ,jpy_g17
10:09:24 150  ,jpy_g18
10:09:24 151  ,jpy_g19
10:09:24 152  ,jpy_g20
10:09:24 153  ,jpy_g21
10:09:24 154  ,jpy_g22
10:09:24 155  ,jpy_g23
10:09:24 156  ,jpy_g24
10:09:24 157  ,jpy_g25
10:09:24 158  ,jpy_g26
10:09:24 159  ,jpy_g27
10:09:24 160  ,jpy_g28
10:09:24 161  ,jpy_g29
10:09:24 162  ,jpy_g30
10:09:24 163  ,jpy_g31
10:09:24 164  ,jpy_g32
10:09:24 165  ,jpy_g33
10:09:24 166  ,jpy_g34
10:09:24 167  ,jpy_g35
10:09:24 168  ,jpy_g36
10:09:24 169  ,jpy_g37
10:09:24 170  ,jpy_g38
10:09:24 171  ,jpy_g39
10:09:24 172  ,jpy_g40
10:09:24 173  ,jpy_g41
10:09:24 174  ,cad_g00
10:09:24 175  ,cad_g01
10:09:24 176  ,cad_g02
10:09:24 177  ,cad_g03
10:09:24 178  ,cad_g04
10:09:24 179  ,cad_g05
10:09:24 180  ,cad_g06
10:09:24 181  ,cad_g07
10:09:24 182  ,cad_g08
10:09:24 183  ,cad_g09
10:09:24 184  ,cad_g10
10:09:24 185  ,cad_g11
10:09:24 186  ,cad_g12
10:09:24 187  ,cad_g13
10:09:24 188  ,cad_g14
10:09:24 189  ,cad_g15
10:09:24 190  ,cad_g16
10:09:24 191  ,cad_g17
10:09:24 192  ,cad_g18
10:09:24 193  ,cad_g19
10:09:24 194  ,cad_g20
10:09:24 195  ,cad_g21
10:09:24 196  ,cad_g22
10:09:24 197  ,cad_g23
10:09:24 198  ,cad_g24
10:09:24 199  ,cad_g25
10:09:24 200  ,cad_g26
10:09:24 201  ,cad_g27
10:09:24 202  ,cad_g28
10:09:24 203  ,cad_g29
10:09:24 204  ,cad_g30
10:09:24 205  ,cad_g31
10:09:24 206  ,cad_g32
10:09:24 207  ,cad_g33
10:09:24 208  ,cad_g34
10:09:24 209  ,cad_g35
10:09:24 210  ,cad_g36
10:09:24 211  ,cad_g37
10:09:24 212  ,cad_g38
10:09:24 213  ,cad_g39
10:09:24 214  ,cad_g40
10:09:24 215  ,cad_g41
10:09:24 216  ,chf_g00
10:09:24 217  ,chf_g01
10:09:24 218  ,chf_g02
10:09:24 219  ,chf_g03
10:09:24 220  ,chf_g04
10:09:24 221  ,chf_g05
10:09:24 222  ,chf_g06
10:09:24 223  ,chf_g07
10:09:24 224  ,chf_g08
10:09:24 225  ,chf_g09
10:09:24 226  ,chf_g10
10:09:24 227  ,chf_g11
10:09:24 228  ,chf_g12
10:09:24 229  ,chf_g13
10:09:24 230  ,chf_g14
10:09:24 231  ,chf_g15
10:09:24 232  ,chf_g16
10:09:24 233  ,chf_g17
10:09:24 234  ,chf_g18
10:09:24 235  ,chf_g19
10:09:24 236  ,chf_g20
10:09:24 237  ,chf_g21
10:09:24 238  ,chf_g22
10:09:24 239  ,chf_g23
10:09:24 240  ,chf_g24
10:09:24 241  ,chf_g25
10:09:24 242  ,chf_g26
10:09:24 243  ,chf_g27
10:09:24 244  ,chf_g28
10:09:24 245  ,chf_g29
10:09:24 246  ,chf_g30
10:09:24 247  ,chf_g31
10:09:24 248  ,chf_g32
10:09:24 249  ,chf_g33
10:09:24 250  ,chf_g34
10:09:24 251  ,chf_g35
10:09:24 252  ,chf_g36
10:09:24 253  ,chf_g37
10:09:24 254  ,chf_g38
10:09:24 255  ,chf_g39
10:09:24 256  ,chf_g40
10:09:24 257  ,chf_g41
10:09:24 258  FROM aud_ms6 m
10:09:24 259  WHERE gattn IN('nup','up')
10:09:24 260  AND 1+m.ydate < '&1'||' '||'&2'
10:09:24 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2011-01-04'||' '||'09:45:00'

View created.

Elapsed: 00:00:00.13
10:09:24 SQL> 
10:09:24 SQL> -- rpt
10:09:24 SQL> 
10:09:24 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	    12687
up	     6267

Elapsed: 00:00:00.04
10:09:24 SQL> 
10:09:24 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
aud2011-01-03 09:40:00

Elapsed: 00:00:00.03
10:09:24 SQL> 
10:09:24 SQL> -- Now build model from bme and score sme
10:09:24 SQL> @score1gattn.sql
10:09:24 SQL> -- score1gattn.sql
10:09:24 SQL> 
10:09:24 SQL> -- Does the 1st SVM score
10:09:24 SQL> 
10:09:24 SQL> -- Fill up svmc_apply_prep
10:09:24 SQL> @score_gattn.sql
10:09:24 SQL> --
10:09:24 SQL> -- score_gattn.sql
10:09:24 SQL> --
10:09:24 SQL> 
10:09:24 SQL> -- usage: score_gattn.sql
10:09:24 SQL> 
10:09:24 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
10:09:24 SQL> 
10:09:24 SQL> DEFINE target	= 'gattn'
10:09:24 SQL> DEFINE model_name = 'forex14'
10:09:24 SQL> DEFINE bldtable	= 'bme'
10:09:24 SQL> DEFINE scoretable = 'sme'
10:09:24 SQL> DEFINE case_id	= 'prdate'
10:09:24 SQL> 
10:09:24 SQL> -- Define a variable to help me exclude some columns from some data mining calls
10:09:24 SQL> DEFINE exclude1 = "'&target','&case_id'"
10:09:24 SQL> 
10:09:24 SQL> -- Builds an SVM model using pl/sql.
10:09:24 SQL> 
10:09:24 SQL> -----------------------------------------------------------------------
10:09:24 SQL> --			    BUILD THE MODEL
10:09:24 SQL> -----------------------------------------------------------------------
10:09:24 SQL> 
10:09:24 SQL> -- Cleanup old build data preparation objects for repeat runs
10:09:24 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.01
10:09:24 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
10:09:24 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.01
10:09:24 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.01
10:09:24 SQL> 
10:09:24 SQL> 
10:09:24 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
10:09:24 SQL> --
10:09:24 SQL> -- DROP	TABLE svmc_settings ;
10:09:24 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
10:09:24 SQL> -- DELETE svmc_settings;
10:09:24 SQL> 
10:09:24 SQL> -- The default classification algorithm is Naive Bayes. So override
10:09:24 SQL> -- this choice to SVM using a settings table.
10:09:24 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
10:09:24 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
10:09:24 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
10:09:24 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
10:09:24 SQL> -- models.
10:09:24 SQL> --
10:09:24 SQL> 
10:09:24 SQL> -- Do this once and then comment it out.
10:09:24 SQL> -- That makes script go faster.
10:09:24 SQL> -- BEGIN
10:09:24 SQL> -- -- Populate settings table
10:09:24 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
10:09:24 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
10:09:24 SQL> --
10:09:24 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
10:09:24 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
10:09:24 SQL> --
10:09:24 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
10:09:24 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
10:09:24 SQL> --   COMMIT;
10:09:24 SQL> -- END;
10:09:24 SQL> -- /
10:09:24 SQL> 
10:09:24 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.01
10:09:24 SQL> 
10:09:24 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
10:09:24   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:09:24   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
10:09:24 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
10:09:24   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:09:24   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
10:09:24 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
10:09:24   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:09:24   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
10:09:24 SQL> 
10:09:24 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
10:09:24   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:09:24   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.11
10:09:24 SQL> 
10:09:24 SQL> --------------------------------
10:09:24 SQL> -- PREPARE BUILD (TRAINING) DATA
10:09:24 SQL> --
10:09:24 SQL> 
10:09:24 SQL> -- 1. Missing Value treatment for all Predictors and
10:09:24 SQL> -- 2. Outlier Treatment and
10:09:24 SQL> -- 3. Normalization are performed below.
10:09:24 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
10:09:24 SQL> --    normalized here.
10:09:24 SQL> 
10:09:24 SQL> BEGIN
10:09:24   2  	-- Perform missing value treatment for all predictors
10:09:24   3  	-- create miss tables
10:09:24   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
10:09:24   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
10:09:24   6  
10:09:24   7  	-- populate miss tables
10:09:24   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
10:09:24   9  	  miss_table_name => 'svmc_miss_num',
10:09:24  10  	  data_table_name => '&bldtable',
10:09:24  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:09:24  12  
10:09:24  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
10:09:24  14  	  miss_table_name => 'svmc_miss_cat',
10:09:24  15  	  data_table_name => '&bldtable',
10:09:24  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:09:24  17  
10:09:24  18  	-- xform input data to replace missing values
10:09:24  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
10:09:24  20  	  miss_table_name => 'svmc_miss_num',
10:09:24  21  	  data_table_name => '&bldtable',
10:09:24  22  	  xform_view_name => 'xformed_build_miss_num');
10:09:24  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
10:09:24  24  	  miss_table_name => 'svmc_miss_cat',
10:09:24  25  	  data_table_name => '&bldtable',
10:09:24  26  	  xform_view_name => 'xformed_build_miss_cat');
10:09:24  27  
10:09:24  28  	-- Perform outlier treatment.
10:09:24  29  	-- create clip table
10:09:24  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
10:09:24  31  
10:09:24  32  	-- populate clip table
10:09:24  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
10:09:24  34  	  clip_table_name => 'svmc_clip',
10:09:24  35  	  data_table_name => '&bldtable',
10:09:24  36  	  tail_frac	  => 0.025,
10:09:24  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:09:24  38  
10:09:24  39  	-- xform input data to winsorized data
10:09:24  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
10:09:24  41  	  clip_table_name => 'svmc_clip',
10:09:24  42  	  data_table_name => '&bldtable',
10:09:24  43  	  xform_view_name => 'svmc_winsor');
10:09:24  44  
10:09:24  45  	-- create normalization table
10:09:24  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
10:09:24  47  
10:09:24  48  	-- populate normalization table based on winsorized data
10:09:24  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
10:09:24  50  	  norm_table_name => 'svmc_norm',
10:09:24  51  	  data_table_name => 'svmc_winsor',
10:09:24  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:09:24  53  
10:09:24  54  	-- normalize the original data
10:09:24  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
10:09:24  56  	  norm_table_name => 'svmc_norm',
10:09:24  57  	  data_table_name => '&bldtable',
10:09:24  58  	  xform_view_name => 'svmc_build_prep');
10:09:24  59  END;
10:09:24  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:17.60
10:09:42 SQL> 
10:09:42 SQL> ---------------------
10:09:42 SQL> -- CREATE A NEW MODEL
10:09:42 SQL> --
10:09:42 SQL> -- Cleanup old model with the same name for repeat runs
10:09:42 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
10:09:42   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:09:42   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.95
10:09:43 SQL> 
10:09:43 SQL> -- Build a new SVM Model
10:09:43 SQL> BEGIN
10:09:43   2  	DBMS_DATA_MINING.CREATE_MODEL(
10:09:43   3  	  model_name	      => '&model_name',
10:09:43   4  	  mining_function     => dbms_data_mining.classification,
10:09:43   5  	  data_table_name     => 'svmc_build_prep',
10:09:43   6  	  case_id_column_name => '&case_id',
10:09:43   7  	  target_column_name  => '&target',
10:09:43   8  	  settings_table_name => 'svmc_settings');
10:09:43   9  END;
10:09:43  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:26.86
10:10:10 SQL> 
10:10:10 SQL> -----------------------------------------------------------------------
10:10:10 SQL> --			       APPLY/score THE MODEL
10:10:10 SQL> -----------------------------------------------------------------------
10:10:10 SQL> 
10:10:10 SQL> -- Cleanup old scoring data preparation objects for repeat runs
10:10:10 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
10:10:10   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:10:10   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
10:10:10 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
10:10:10   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:10:10   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
10:10:10 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
10:10:10   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:10:10   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
10:10:10 SQL> -----------------------
10:10:10 SQL> -- PREPARE SCORING DATA
10:10:10 SQL> --
10:10:10 SQL> -- If the data for model creation has been prepared, then the data
10:10:10 SQL> -- to be scored using the model must be prepared in the same manner
10:10:10 SQL> -- in order to obtain meaningful results.
10:10:10 SQL> --
10:10:10 SQL> -- 1. Missing Value treatment for all Predictors and
10:10:10 SQL> -- 2. Normalization
10:10:10 SQL> -- No outlier treatment will be performed during test and apply. The
10:10:10 SQL> -- normalization step is sufficient, since the normalization parameters
10:10:10 SQL> -- already capture the effects of outlier treatment done with build data.
10:10:10 SQL> --
10:10:10 SQL> BEGIN
10:10:10   2  	-- Xform Test data to replace missing values
10:10:10   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
10:10:10   4  	  miss_table_name => 'svmc_miss_num',
10:10:10   5  	  data_table_name => '&scoretable',
10:10:10   6  	  xform_view_name => 'xformed_apply_miss_num');
10:10:10   7  
10:10:10   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
10:10:10   9  	  miss_table_name => 'svmc_miss_cat',
10:10:10  10  	  data_table_name => '&scoretable',
10:10:10  11  	  xform_view_name => 'xformed_apply_miss_cat');
10:10:10  12  
10:10:10  13  	-- Normalize the data to be scored
10:10:10  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
10:10:10  15  	  norm_table_name => 'svmc_norm',
10:10:10  16  	  data_table_name => '&scoretable',
10:10:10  17  	  xform_view_name => 'svmc_apply_prep');
10:10:10  18  END;
10:10:10  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.26
10:10:11 SQL> 
10:10:11 SQL> -- Use same model_name used in score_gattn.sql
10:10:11 SQL> DEFINE model_name = 'forex14'
10:10:11 SQL> 
10:10:11 SQL> DELETE fxscores6_gattn WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.04
10:10:11 SQL> 
10:10:11 SQL> INSERT INTO fxscores6_gattn (prdate,score,rundate,pair,ydate)
10:10:11   2  SELECT
10:10:11   3  prdate
10:10:11   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
10:10:11   5  ,sysdate
10:10:11   6  ,SUBSTR(prdate,1,3)pair
10:10:11   7  ,SUBSTR(prdate,4,19)ydate
10:10:11   8  FROM svmc_apply_prep
10:10:11   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.18
10:10:11 SQL> @aud_score1day_gattn.sql	2011-01-04 09:50:00
10:10:11 SQL> --
10:10:11 SQL> -- aud_score1day_gattn.sql
10:10:11 SQL> --
10:10:11 SQL> 
10:10:11 SQL> CREATE OR REPLACE VIEW sme AS
10:10:11   2  SELECT
10:10:11   3  'aud'||m.ydate prdate
10:10:11   4  ,NULL gattn
10:10:11   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
10:10:11   6  ,eur_g00
10:10:11   7  ,eur_g01
10:10:11   8  ,eur_g02
10:10:11   9  ,eur_g03
10:10:11  10  ,eur_g04
10:10:11  11  ,eur_g05
10:10:11  12  ,eur_g06
10:10:11  13  ,eur_g07
10:10:11  14  ,eur_g08
10:10:11  15  ,eur_g09
10:10:11  16  ,eur_g10
10:10:11  17  ,eur_g11
10:10:11  18  ,eur_g12
10:10:11  19  ,eur_g13
10:10:11  20  ,eur_g14
10:10:11  21  ,eur_g15
10:10:11  22  ,eur_g16
10:10:11  23  ,eur_g17
10:10:11  24  ,eur_g18
10:10:11  25  ,eur_g19
10:10:11  26  ,eur_g20
10:10:11  27  ,eur_g21
10:10:11  28  ,eur_g22
10:10:11  29  ,eur_g23
10:10:11  30  ,eur_g24
10:10:11  31  ,eur_g25
10:10:11  32  ,eur_g26
10:10:11  33  ,eur_g27
10:10:11  34  ,eur_g28
10:10:11  35  ,eur_g29
10:10:11  36  ,eur_g30
10:10:11  37  ,eur_g31
10:10:11  38  ,eur_g32
10:10:11  39  ,eur_g33
10:10:11  40  ,eur_g34
10:10:11  41  ,eur_g35
10:10:11  42  ,eur_g36
10:10:11  43  ,eur_g37
10:10:11  44  ,eur_g38
10:10:11  45  ,eur_g39
10:10:11  46  ,eur_g40
10:10:11  47  ,eur_g41
10:10:11  48  ,aud_g00
10:10:11  49  ,aud_g01
10:10:11  50  ,aud_g02
10:10:11  51  ,aud_g03
10:10:12  52  ,aud_g04
10:10:12  53  ,aud_g05
10:10:12  54  ,aud_g06
10:10:12  55  ,aud_g07
10:10:12  56  ,aud_g08
10:10:12  57  ,aud_g09
10:10:12  58  ,aud_g10
10:10:12  59  ,aud_g11
10:10:12  60  ,aud_g12
10:10:12  61  ,aud_g13
10:10:12  62  ,aud_g14
10:10:12  63  ,aud_g15
10:10:12  64  ,aud_g16
10:10:12  65  ,aud_g17
10:10:12  66  ,aud_g18
10:10:12  67  ,aud_g19
10:10:12  68  ,aud_g20
10:10:12  69  ,aud_g21
10:10:12  70  ,aud_g22
10:10:12  71  ,aud_g23
10:10:12  72  ,aud_g24
10:10:12  73  ,aud_g25
10:10:12  74  ,aud_g26
10:10:12  75  ,aud_g27
10:10:12  76  ,aud_g28
10:10:12  77  ,aud_g29
10:10:12  78  ,aud_g30
10:10:12  79  ,aud_g31
10:10:12  80  ,aud_g32
10:10:12  81  ,aud_g33
10:10:12  82  ,aud_g34
10:10:12  83  ,aud_g35
10:10:12  84  ,aud_g36
10:10:12  85  ,aud_g37
10:10:12  86  ,aud_g38
10:10:12  87  ,aud_g39
10:10:12  88  ,aud_g40
10:10:12  89  ,aud_g41
10:10:12  90  ,gbp_g00
10:10:12  91  ,gbp_g01
10:10:12  92  ,gbp_g02
10:10:12  93  ,gbp_g03
10:10:12  94  ,gbp_g04
10:10:12  95  ,gbp_g05
10:10:12  96  ,gbp_g06
10:10:12  97  ,gbp_g07
10:10:12  98  ,gbp_g08
10:10:12  99  ,gbp_g09
10:10:12 100  ,gbp_g10
10:10:12 101  ,gbp_g11
10:10:12 102  ,gbp_g12
10:10:12 103  ,gbp_g13
10:10:12 104  ,gbp_g14
10:10:12 105  ,gbp_g15
10:10:12 106  ,gbp_g16
10:10:12 107  ,gbp_g17
10:10:12 108  ,gbp_g18
10:10:12 109  ,gbp_g19
10:10:12 110  ,gbp_g20
10:10:12 111  ,gbp_g21
10:10:12 112  ,gbp_g22
10:10:12 113  ,gbp_g23
10:10:12 114  ,gbp_g24
10:10:12 115  ,gbp_g25
10:10:12 116  ,gbp_g26
10:10:12 117  ,gbp_g27
10:10:12 118  ,gbp_g28
10:10:12 119  ,gbp_g29
10:10:12 120  ,gbp_g30
10:10:12 121  ,gbp_g31
10:10:12 122  ,gbp_g32
10:10:12 123  ,gbp_g33
10:10:12 124  ,gbp_g34
10:10:12 125  ,gbp_g35
10:10:12 126  ,gbp_g36
10:10:12 127  ,gbp_g37
10:10:12 128  ,gbp_g38
10:10:12 129  ,gbp_g39
10:10:12 130  ,gbp_g40
10:10:12 131  ,gbp_g41
10:10:12 132  ,jpy_g00
10:10:12 133  ,jpy_g01
10:10:12 134  ,jpy_g02
10:10:12 135  ,jpy_g03
10:10:12 136  ,jpy_g04
10:10:12 137  ,jpy_g05
10:10:12 138  ,jpy_g06
10:10:12 139  ,jpy_g07
10:10:12 140  ,jpy_g08
10:10:12 141  ,jpy_g09
10:10:12 142  ,jpy_g10
10:10:12 143  ,jpy_g11
10:10:12 144  ,jpy_g12
10:10:12 145  ,jpy_g13
10:10:12 146  ,jpy_g14
10:10:12 147  ,jpy_g15
10:10:12 148  ,jpy_g16
10:10:12 149  ,jpy_g17
10:10:12 150  ,jpy_g18
10:10:12 151  ,jpy_g19
10:10:12 152  ,jpy_g20
10:10:12 153  ,jpy_g21
10:10:12 154  ,jpy_g22
10:10:12 155  ,jpy_g23
10:10:12 156  ,jpy_g24
10:10:12 157  ,jpy_g25
10:10:12 158  ,jpy_g26
10:10:12 159  ,jpy_g27
10:10:12 160  ,jpy_g28
10:10:12 161  ,jpy_g29
10:10:12 162  ,jpy_g30
10:10:12 163  ,jpy_g31
10:10:12 164  ,jpy_g32
10:10:12 165  ,jpy_g33
10:10:12 166  ,jpy_g34
10:10:12 167  ,jpy_g35
10:10:12 168  ,jpy_g36
10:10:12 169  ,jpy_g37
10:10:12 170  ,jpy_g38
10:10:12 171  ,jpy_g39
10:10:12 172  ,jpy_g40
10:10:12 173  ,jpy_g41
10:10:12 174  ,cad_g00
10:10:12 175  ,cad_g01
10:10:12 176  ,cad_g02
10:10:12 177  ,cad_g03
10:10:12 178  ,cad_g04
10:10:12 179  ,cad_g05
10:10:12 180  ,cad_g06
10:10:12 181  ,cad_g07
10:10:12 182  ,cad_g08
10:10:12 183  ,cad_g09
10:10:12 184  ,cad_g10
10:10:12 185  ,cad_g11
10:10:12 186  ,cad_g12
10:10:12 187  ,cad_g13
10:10:12 188  ,cad_g14
10:10:12 189  ,cad_g15
10:10:12 190  ,cad_g16
10:10:12 191  ,cad_g17
10:10:12 192  ,cad_g18
10:10:12 193  ,cad_g19
10:10:12 194  ,cad_g20
10:10:12 195  ,cad_g21
10:10:12 196  ,cad_g22
10:10:12 197  ,cad_g23
10:10:12 198  ,cad_g24
10:10:12 199  ,cad_g25
10:10:12 200  ,cad_g26
10:10:12 201  ,cad_g27
10:10:12 202  ,cad_g28
10:10:12 203  ,cad_g29
10:10:12 204  ,cad_g30
10:10:12 205  ,cad_g31
10:10:12 206  ,cad_g32
10:10:12 207  ,cad_g33
10:10:12 208  ,cad_g34
10:10:12 209  ,cad_g35
10:10:12 210  ,cad_g36
10:10:12 211  ,cad_g37
10:10:12 212  ,cad_g38
10:10:12 213  ,cad_g39
10:10:12 214  ,cad_g40
10:10:12 215  ,cad_g41
10:10:12 216  ,chf_g00
10:10:12 217  ,chf_g01
10:10:12 218  ,chf_g02
10:10:12 219  ,chf_g03
10:10:12 220  ,chf_g04
10:10:12 221  ,chf_g05
10:10:12 222  ,chf_g06
10:10:12 223  ,chf_g07
10:10:12 224  ,chf_g08
10:10:12 225  ,chf_g09
10:10:12 226  ,chf_g10
10:10:12 227  ,chf_g11
10:10:12 228  ,chf_g12
10:10:12 229  ,chf_g13
10:10:12 230  ,chf_g14
10:10:12 231  ,chf_g15
10:10:12 232  ,chf_g16
10:10:12 233  ,chf_g17
10:10:12 234  ,chf_g18
10:10:12 235  ,chf_g19
10:10:12 236  ,chf_g20
10:10:12 237  ,chf_g21
10:10:12 238  ,chf_g22
10:10:12 239  ,chf_g23
10:10:12 240  ,chf_g24
10:10:12 241  ,chf_g25
10:10:12 242  ,chf_g26
10:10:12 243  ,chf_g27
10:10:12 244  ,chf_g28
10:10:12 245  ,chf_g29
10:10:12 246  ,chf_g30
10:10:12 247  ,chf_g31
10:10:12 248  ,chf_g32
10:10:12 249  ,chf_g33
10:10:12 250  ,chf_g34
10:10:12 251  ,chf_g35
10:10:12 252  ,chf_g36
10:10:12 253  ,chf_g37
10:10:12 254  ,chf_g38
10:10:12 255  ,chf_g39
10:10:12 256  ,chf_g40
10:10:12 257  ,chf_g41
10:10:12 258  FROM aud_ms6 m
10:10:12 259  WHERE m.ydate = '&1'||' '||'&2'
10:10:12 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2011-01-04'||' '||'09:50:00'

View created.

Elapsed: 00:00:00.13
10:10:12 SQL> 
10:10:12 SQL> -- rpt
10:10:12 SQL> -- We should see just 1 row:
10:10:12 SQL> 
10:10:12 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
10:10:12 SQL> 
10:10:12 SQL> -- Build the model:
10:10:12 SQL> CREATE OR REPLACE VIEW bme AS
10:10:12   2  SELECT
10:10:12   3  'aud'||m.ydate prdate
10:10:12   4  ,gattn
10:10:12   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
10:10:12   6  ,eur_g00
10:10:12   7  ,eur_g01
10:10:12   8  ,eur_g02
10:10:12   9  ,eur_g03
10:10:12  10  ,eur_g04
10:10:12  11  ,eur_g05
10:10:12  12  ,eur_g06
10:10:12  13  ,eur_g07
10:10:12  14  ,eur_g08
10:10:12  15  ,eur_g09
10:10:12  16  ,eur_g10
10:10:12  17  ,eur_g11
10:10:12  18  ,eur_g12
10:10:12  19  ,eur_g13
10:10:12  20  ,eur_g14
10:10:12  21  ,eur_g15
10:10:12  22  ,eur_g16
10:10:12  23  ,eur_g17
10:10:12  24  ,eur_g18
10:10:12  25  ,eur_g19
10:10:12  26  ,eur_g20
10:10:12  27  ,eur_g21
10:10:12  28  ,eur_g22
10:10:12  29  ,eur_g23
10:10:12  30  ,eur_g24
10:10:12  31  ,eur_g25
10:10:12  32  ,eur_g26
10:10:12  33  ,eur_g27
10:10:12  34  ,eur_g28
10:10:12  35  ,eur_g29
10:10:12  36  ,eur_g30
10:10:12  37  ,eur_g31
10:10:12  38  ,eur_g32
10:10:12  39  ,eur_g33
10:10:12  40  ,eur_g34
10:10:12  41  ,eur_g35
10:10:12  42  ,eur_g36
10:10:12  43  ,eur_g37
10:10:12  44  ,eur_g38
10:10:12  45  ,eur_g39
10:10:12  46  ,eur_g40
10:10:12  47  ,eur_g41
10:10:12  48  ,aud_g00
10:10:12  49  ,aud_g01
10:10:12  50  ,aud_g02
10:10:12  51  ,aud_g03
10:10:12  52  ,aud_g04
10:10:12  53  ,aud_g05
10:10:12  54  ,aud_g06
10:10:12  55  ,aud_g07
10:10:12  56  ,aud_g08
10:10:12  57  ,aud_g09
10:10:12  58  ,aud_g10
10:10:12  59  ,aud_g11
10:10:12  60  ,aud_g12
10:10:12  61  ,aud_g13
10:10:12  62  ,aud_g14
10:10:12  63  ,aud_g15
10:10:12  64  ,aud_g16
10:10:12  65  ,aud_g17
10:10:12  66  ,aud_g18
10:10:12  67  ,aud_g19
10:10:12  68  ,aud_g20
10:10:12  69  ,aud_g21
10:10:12  70  ,aud_g22
10:10:12  71  ,aud_g23
10:10:12  72  ,aud_g24
10:10:12  73  ,aud_g25
10:10:12  74  ,aud_g26
10:10:12  75  ,aud_g27
10:10:12  76  ,aud_g28
10:10:12  77  ,aud_g29
10:10:12  78  ,aud_g30
10:10:12  79  ,aud_g31
10:10:12  80  ,aud_g32
10:10:12  81  ,aud_g33
10:10:12  82  ,aud_g34
10:10:12  83  ,aud_g35
10:10:12  84  ,aud_g36
10:10:12  85  ,aud_g37
10:10:12  86  ,aud_g38
10:10:12  87  ,aud_g39
10:10:12  88  ,aud_g40
10:10:12  89  ,aud_g41
10:10:12  90  ,gbp_g00
10:10:12  91  ,gbp_g01
10:10:12  92  ,gbp_g02
10:10:12  93  ,gbp_g03
10:10:12  94  ,gbp_g04
10:10:12  95  ,gbp_g05
10:10:12  96  ,gbp_g06
10:10:12  97  ,gbp_g07
10:10:12  98  ,gbp_g08
10:10:12  99  ,gbp_g09
10:10:12 100  ,gbp_g10
10:10:12 101  ,gbp_g11
10:10:12 102  ,gbp_g12
10:10:12 103  ,gbp_g13
10:10:12 104  ,gbp_g14
10:10:12 105  ,gbp_g15
10:10:12 106  ,gbp_g16
10:10:12 107  ,gbp_g17
10:10:12 108  ,gbp_g18
10:10:12 109  ,gbp_g19
10:10:12 110  ,gbp_g20
10:10:12 111  ,gbp_g21
10:10:12 112  ,gbp_g22
10:10:12 113  ,gbp_g23
10:10:12 114  ,gbp_g24
10:10:12 115  ,gbp_g25
10:10:12 116  ,gbp_g26
10:10:12 117  ,gbp_g27
10:10:12 118  ,gbp_g28
10:10:12 119  ,gbp_g29
10:10:12 120  ,gbp_g30
10:10:12 121  ,gbp_g31
10:10:12 122  ,gbp_g32
10:10:12 123  ,gbp_g33
10:10:12 124  ,gbp_g34
10:10:12 125  ,gbp_g35
10:10:12 126  ,gbp_g36
10:10:12 127  ,gbp_g37
10:10:12 128  ,gbp_g38
10:10:12 129  ,gbp_g39
10:10:12 130  ,gbp_g40
10:10:12 131  ,gbp_g41
10:10:12 132  ,jpy_g00
10:10:12 133  ,jpy_g01
10:10:12 134  ,jpy_g02
10:10:12 135  ,jpy_g03
10:10:12 136  ,jpy_g04
10:10:12 137  ,jpy_g05
10:10:12 138  ,jpy_g06
10:10:12 139  ,jpy_g07
10:10:12 140  ,jpy_g08
10:10:12 141  ,jpy_g09
10:10:12 142  ,jpy_g10
10:10:12 143  ,jpy_g11
10:10:12 144  ,jpy_g12
10:10:12 145  ,jpy_g13
10:10:12 146  ,jpy_g14
10:10:12 147  ,jpy_g15
10:10:12 148  ,jpy_g16
10:10:12 149  ,jpy_g17
10:10:12 150  ,jpy_g18
10:10:12 151  ,jpy_g19
10:10:12 152  ,jpy_g20
10:10:12 153  ,jpy_g21
10:10:12 154  ,jpy_g22
10:10:12 155  ,jpy_g23
10:10:12 156  ,jpy_g24
10:10:12 157  ,jpy_g25
10:10:12 158  ,jpy_g26
10:10:12 159  ,jpy_g27
10:10:12 160  ,jpy_g28
10:10:12 161  ,jpy_g29
10:10:12 162  ,jpy_g30
10:10:12 163  ,jpy_g31
10:10:12 164  ,jpy_g32
10:10:12 165  ,jpy_g33
10:10:12 166  ,jpy_g34
10:10:12 167  ,jpy_g35
10:10:12 168  ,jpy_g36
10:10:12 169  ,jpy_g37
10:10:12 170  ,jpy_g38
10:10:12 171  ,jpy_g39
10:10:12 172  ,jpy_g40
10:10:12 173  ,jpy_g41
10:10:12 174  ,cad_g00
10:10:12 175  ,cad_g01
10:10:12 176  ,cad_g02
10:10:12 177  ,cad_g03
10:10:12 178  ,cad_g04
10:10:12 179  ,cad_g05
10:10:12 180  ,cad_g06
10:10:12 181  ,cad_g07
10:10:12 182  ,cad_g08
10:10:12 183  ,cad_g09
10:10:12 184  ,cad_g10
10:10:12 185  ,cad_g11
10:10:12 186  ,cad_g12
10:10:12 187  ,cad_g13
10:10:12 188  ,cad_g14
10:10:12 189  ,cad_g15
10:10:12 190  ,cad_g16
10:10:12 191  ,cad_g17
10:10:12 192  ,cad_g18
10:10:12 193  ,cad_g19
10:10:12 194  ,cad_g20
10:10:12 195  ,cad_g21
10:10:12 196  ,cad_g22
10:10:12 197  ,cad_g23
10:10:12 198  ,cad_g24
10:10:12 199  ,cad_g25
10:10:12 200  ,cad_g26
10:10:12 201  ,cad_g27
10:10:12 202  ,cad_g28
10:10:12 203  ,cad_g29
10:10:12 204  ,cad_g30
10:10:12 205  ,cad_g31
10:10:12 206  ,cad_g32
10:10:12 207  ,cad_g33
10:10:12 208  ,cad_g34
10:10:12 209  ,cad_g35
10:10:12 210  ,cad_g36
10:10:12 211  ,cad_g37
10:10:12 212  ,cad_g38
10:10:12 213  ,cad_g39
10:10:12 214  ,cad_g40
10:10:12 215  ,cad_g41
10:10:12 216  ,chf_g00
10:10:12 217  ,chf_g01
10:10:12 218  ,chf_g02
10:10:12 219  ,chf_g03
10:10:12 220  ,chf_g04
10:10:12 221  ,chf_g05
10:10:12 222  ,chf_g06
10:10:12 223  ,chf_g07
10:10:12 224  ,chf_g08
10:10:12 225  ,chf_g09
10:10:12 226  ,chf_g10
10:10:12 227  ,chf_g11
10:10:12 228  ,chf_g12
10:10:12 229  ,chf_g13
10:10:12 230  ,chf_g14
10:10:12 231  ,chf_g15
10:10:12 232  ,chf_g16
10:10:12 233  ,chf_g17
10:10:12 234  ,chf_g18
10:10:12 235  ,chf_g19
10:10:12 236  ,chf_g20
10:10:12 237  ,chf_g21
10:10:12 238  ,chf_g22
10:10:12 239  ,chf_g23
10:10:12 240  ,chf_g24
10:10:12 241  ,chf_g25
10:10:12 242  ,chf_g26
10:10:12 243  ,chf_g27
10:10:12 244  ,chf_g28
10:10:12 245  ,chf_g29
10:10:12 246  ,chf_g30
10:10:12 247  ,chf_g31
10:10:12 248  ,chf_g32
10:10:12 249  ,chf_g33
10:10:12 250  ,chf_g34
10:10:12 251  ,chf_g35
10:10:12 252  ,chf_g36
10:10:12 253  ,chf_g37
10:10:12 254  ,chf_g38
10:10:12 255  ,chf_g39
10:10:12 256  ,chf_g40
10:10:12 257  ,chf_g41
10:10:12 258  FROM aud_ms6 m
10:10:12 259  WHERE gattn IN('nup','up')
10:10:12 260  AND 1+m.ydate < '&1'||' '||'&2'
10:10:12 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2011-01-04'||' '||'09:50:00'

View created.

Elapsed: 00:00:00.12
10:10:12 SQL> 
10:10:12 SQL> -- rpt
10:10:12 SQL> 
10:10:12 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	    12687
up	     6268

Elapsed: 00:00:00.04
10:10:12 SQL> 
10:10:12 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
aud2011-01-03 09:45:00

Elapsed: 00:00:00.03
10:10:12 SQL> 
10:10:12 SQL> -- Now build model from bme and score sme
10:10:12 SQL> @score1gattn.sql
10:10:12 SQL> -- score1gattn.sql
10:10:12 SQL> 
10:10:12 SQL> -- Does the 1st SVM score
10:10:12 SQL> 
10:10:12 SQL> -- Fill up svmc_apply_prep
10:10:12 SQL> @score_gattn.sql
10:10:12 SQL> --
10:10:12 SQL> -- score_gattn.sql
10:10:12 SQL> --
10:10:12 SQL> 
10:10:12 SQL> -- usage: score_gattn.sql
10:10:12 SQL> 
10:10:12 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
10:10:12 SQL> 
10:10:12 SQL> DEFINE target	= 'gattn'
10:10:12 SQL> DEFINE model_name = 'forex14'
10:10:12 SQL> DEFINE bldtable	= 'bme'
10:10:12 SQL> DEFINE scoretable = 'sme'
10:10:12 SQL> DEFINE case_id	= 'prdate'
10:10:12 SQL> 
10:10:12 SQL> -- Define a variable to help me exclude some columns from some data mining calls
10:10:12 SQL> DEFINE exclude1 = "'&target','&case_id'"
10:10:12 SQL> 
10:10:12 SQL> -- Builds an SVM model using pl/sql.
10:10:12 SQL> 
10:10:12 SQL> -----------------------------------------------------------------------
10:10:12 SQL> --			    BUILD THE MODEL
10:10:12 SQL> -----------------------------------------------------------------------
10:10:12 SQL> 
10:10:12 SQL> -- Cleanup old build data preparation objects for repeat runs
10:10:12 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.00
10:10:12 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
10:10:12 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.00
10:10:12 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.00
10:10:12 SQL> 
10:10:12 SQL> 
10:10:12 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
10:10:12 SQL> --
10:10:12 SQL> -- DROP	TABLE svmc_settings ;
10:10:12 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
10:10:12 SQL> -- DELETE svmc_settings;
10:10:12 SQL> 
10:10:12 SQL> -- The default classification algorithm is Naive Bayes. So override
10:10:12 SQL> -- this choice to SVM using a settings table.
10:10:12 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
10:10:12 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
10:10:12 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
10:10:12 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
10:10:12 SQL> -- models.
10:10:12 SQL> --
10:10:12 SQL> 
10:10:12 SQL> -- Do this once and then comment it out.
10:10:12 SQL> -- That makes script go faster.
10:10:12 SQL> -- BEGIN
10:10:12 SQL> -- -- Populate settings table
10:10:12 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
10:10:12 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
10:10:12 SQL> --
10:10:12 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
10:10:12 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
10:10:12 SQL> --
10:10:12 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
10:10:12 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
10:10:12 SQL> --   COMMIT;
10:10:12 SQL> -- END;
10:10:12 SQL> -- /
10:10:12 SQL> 
10:10:12 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.01
10:10:12 SQL> 
10:10:12 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
10:10:12   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:10:12   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
10:10:12 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
10:10:12   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:10:12   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
10:10:12 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
10:10:12   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:10:12   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
10:10:12 SQL> 
10:10:12 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
10:10:12   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:10:12   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
10:10:12 SQL> 
10:10:12 SQL> --------------------------------
10:10:12 SQL> -- PREPARE BUILD (TRAINING) DATA
10:10:12 SQL> --
10:10:12 SQL> 
10:10:12 SQL> -- 1. Missing Value treatment for all Predictors and
10:10:12 SQL> -- 2. Outlier Treatment and
10:10:12 SQL> -- 3. Normalization are performed below.
10:10:12 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
10:10:12 SQL> --    normalized here.
10:10:12 SQL> 
10:10:12 SQL> BEGIN
10:10:12   2  	-- Perform missing value treatment for all predictors
10:10:12   3  	-- create miss tables
10:10:12   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
10:10:12   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
10:10:12   6  
10:10:12   7  	-- populate miss tables
10:10:12   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
10:10:12   9  	  miss_table_name => 'svmc_miss_num',
10:10:12  10  	  data_table_name => '&bldtable',
10:10:12  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:10:12  12  
10:10:12  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
10:10:12  14  	  miss_table_name => 'svmc_miss_cat',
10:10:12  15  	  data_table_name => '&bldtable',
10:10:12  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:10:12  17  
10:10:12  18  	-- xform input data to replace missing values
10:10:12  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
10:10:12  20  	  miss_table_name => 'svmc_miss_num',
10:10:12  21  	  data_table_name => '&bldtable',
10:10:12  22  	  xform_view_name => 'xformed_build_miss_num');
10:10:12  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
10:10:12  24  	  miss_table_name => 'svmc_miss_cat',
10:10:12  25  	  data_table_name => '&bldtable',
10:10:12  26  	  xform_view_name => 'xformed_build_miss_cat');
10:10:12  27  
10:10:12  28  	-- Perform outlier treatment.
10:10:12  29  	-- create clip table
10:10:12  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
10:10:12  31  
10:10:12  32  	-- populate clip table
10:10:12  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
10:10:12  34  	  clip_table_name => 'svmc_clip',
10:10:12  35  	  data_table_name => '&bldtable',
10:10:12  36  	  tail_frac	  => 0.025,
10:10:12  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:10:12  38  
10:10:12  39  	-- xform input data to winsorized data
10:10:12  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
10:10:12  41  	  clip_table_name => 'svmc_clip',
10:10:12  42  	  data_table_name => '&bldtable',
10:10:12  43  	  xform_view_name => 'svmc_winsor');
10:10:12  44  
10:10:12  45  	-- create normalization table
10:10:12  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
10:10:12  47  
10:10:12  48  	-- populate normalization table based on winsorized data
10:10:12  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
10:10:12  50  	  norm_table_name => 'svmc_norm',
10:10:12  51  	  data_table_name => 'svmc_winsor',
10:10:12  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:10:12  53  
10:10:12  54  	-- normalize the original data
10:10:12  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
10:10:12  56  	  norm_table_name => 'svmc_norm',
10:10:12  57  	  data_table_name => '&bldtable',
10:10:12  58  	  xform_view_name => 'svmc_build_prep');
10:10:12  59  END;
10:10:12  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:17.71
10:10:30 SQL> 
10:10:30 SQL> ---------------------
10:10:30 SQL> -- CREATE A NEW MODEL
10:10:30 SQL> --
10:10:30 SQL> -- Cleanup old model with the same name for repeat runs
10:10:30 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
10:10:30   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:10:30   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.00
10:10:31 SQL> 
10:10:31 SQL> -- Build a new SVM Model
10:10:31 SQL> BEGIN
10:10:31   2  	DBMS_DATA_MINING.CREATE_MODEL(
10:10:31   3  	  model_name	      => '&model_name',
10:10:31   4  	  mining_function     => dbms_data_mining.classification,
10:10:31   5  	  data_table_name     => 'svmc_build_prep',
10:10:31   6  	  case_id_column_name => '&case_id',
10:10:31   7  	  target_column_name  => '&target',
10:10:31   8  	  settings_table_name => 'svmc_settings');
10:10:31   9  END;
10:10:31  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:26.96
10:10:58 SQL> 
10:10:58 SQL> -----------------------------------------------------------------------
10:10:58 SQL> --			       APPLY/score THE MODEL
10:10:58 SQL> -----------------------------------------------------------------------
10:10:58 SQL> 
10:10:58 SQL> -- Cleanup old scoring data preparation objects for repeat runs
10:10:58 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
10:10:58   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:10:58   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
10:10:58 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
10:10:58   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:10:58   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
10:10:58 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
10:10:58   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:10:58   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
10:10:58 SQL> -----------------------
10:10:58 SQL> -- PREPARE SCORING DATA
10:10:58 SQL> --
10:10:58 SQL> -- If the data for model creation has been prepared, then the data
10:10:58 SQL> -- to be scored using the model must be prepared in the same manner
10:10:58 SQL> -- in order to obtain meaningful results.
10:10:58 SQL> --
10:10:58 SQL> -- 1. Missing Value treatment for all Predictors and
10:10:58 SQL> -- 2. Normalization
10:10:58 SQL> -- No outlier treatment will be performed during test and apply. The
10:10:58 SQL> -- normalization step is sufficient, since the normalization parameters
10:10:58 SQL> -- already capture the effects of outlier treatment done with build data.
10:10:58 SQL> --
10:10:58 SQL> BEGIN
10:10:58   2  	-- Xform Test data to replace missing values
10:10:58   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
10:10:58   4  	  miss_table_name => 'svmc_miss_num',
10:10:58   5  	  data_table_name => '&scoretable',
10:10:58   6  	  xform_view_name => 'xformed_apply_miss_num');
10:10:58   7  
10:10:58   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
10:10:58   9  	  miss_table_name => 'svmc_miss_cat',
10:10:58  10  	  data_table_name => '&scoretable',
10:10:58  11  	  xform_view_name => 'xformed_apply_miss_cat');
10:10:58  12  
10:10:58  13  	-- Normalize the data to be scored
10:10:58  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
10:10:58  15  	  norm_table_name => 'svmc_norm',
10:10:58  16  	  data_table_name => '&scoretable',
10:10:58  17  	  xform_view_name => 'svmc_apply_prep');
10:10:58  18  END;
10:10:58  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.25
10:10:59 SQL> 
10:10:59 SQL> -- Use same model_name used in score_gattn.sql
10:10:59 SQL> DEFINE model_name = 'forex14'
10:10:59 SQL> 
10:10:59 SQL> DELETE fxscores6_gattn WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.03
10:10:59 SQL> 
10:10:59 SQL> INSERT INTO fxscores6_gattn (prdate,score,rundate,pair,ydate)
10:10:59   2  SELECT
10:10:59   3  prdate
10:10:59   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
10:10:59   5  ,sysdate
10:10:59   6  ,SUBSTR(prdate,1,3)pair
10:10:59   7  ,SUBSTR(prdate,4,19)ydate
10:10:59   8  FROM svmc_apply_prep
10:10:59   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.17
10:10:59 SQL> @aud_score1day_gattn.sql	2011-01-04 09:55:00
10:10:59 SQL> --
10:10:59 SQL> -- aud_score1day_gattn.sql
10:10:59 SQL> --
10:10:59 SQL> 
10:10:59 SQL> CREATE OR REPLACE VIEW sme AS
10:10:59   2  SELECT
10:10:59   3  'aud'||m.ydate prdate
10:10:59   4  ,NULL gattn
10:10:59   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
10:10:59   6  ,eur_g00
10:10:59   7  ,eur_g01
10:10:59   8  ,eur_g02
10:10:59   9  ,eur_g03
10:10:59  10  ,eur_g04
10:10:59  11  ,eur_g05
10:10:59  12  ,eur_g06
10:10:59  13  ,eur_g07
10:10:59  14  ,eur_g08
10:10:59  15  ,eur_g09
10:10:59  16  ,eur_g10
10:10:59  17  ,eur_g11
10:10:59  18  ,eur_g12
10:10:59  19  ,eur_g13
10:10:59  20  ,eur_g14
10:10:59  21  ,eur_g15
10:10:59  22  ,eur_g16
10:10:59  23  ,eur_g17
10:10:59  24  ,eur_g18
10:10:59  25  ,eur_g19
10:10:59  26  ,eur_g20
10:10:59  27  ,eur_g21
10:10:59  28  ,eur_g22
10:10:59  29  ,eur_g23
10:10:59  30  ,eur_g24
10:10:59  31  ,eur_g25
10:10:59  32  ,eur_g26
10:10:59  33  ,eur_g27
10:10:59  34  ,eur_g28
10:10:59  35  ,eur_g29
10:10:59  36  ,eur_g30
10:10:59  37  ,eur_g31
10:10:59  38  ,eur_g32
10:10:59  39  ,eur_g33
10:10:59  40  ,eur_g34
10:10:59  41  ,eur_g35
10:10:59  42  ,eur_g36
10:10:59  43  ,eur_g37
10:10:59  44  ,eur_g38
10:10:59  45  ,eur_g39
10:10:59  46  ,eur_g40
10:10:59  47  ,eur_g41
10:10:59  48  ,aud_g00
10:10:59  49  ,aud_g01
10:10:59  50  ,aud_g02
10:10:59  51  ,aud_g03
10:10:59  52  ,aud_g04
10:10:59  53  ,aud_g05
10:10:59  54  ,aud_g06
10:10:59  55  ,aud_g07
10:10:59  56  ,aud_g08
10:10:59  57  ,aud_g09
10:10:59  58  ,aud_g10
10:10:59  59  ,aud_g11
10:10:59  60  ,aud_g12
10:10:59  61  ,aud_g13
10:10:59  62  ,aud_g14
10:10:59  63  ,aud_g15
10:10:59  64  ,aud_g16
10:10:59  65  ,aud_g17
10:10:59  66  ,aud_g18
10:10:59  67  ,aud_g19
10:10:59  68  ,aud_g20
10:10:59  69  ,aud_g21
10:10:59  70  ,aud_g22
10:10:59  71  ,aud_g23
10:10:59  72  ,aud_g24
10:10:59  73  ,aud_g25
10:10:59  74  ,aud_g26
10:10:59  75  ,aud_g27
10:10:59  76  ,aud_g28
10:10:59  77  ,aud_g29
10:10:59  78  ,aud_g30
10:10:59  79  ,aud_g31
10:10:59  80  ,aud_g32
10:10:59  81  ,aud_g33
10:10:59  82  ,aud_g34
10:10:59  83  ,aud_g35
10:10:59  84  ,aud_g36
10:10:59  85  ,aud_g37
10:10:59  86  ,aud_g38
10:10:59  87  ,aud_g39
10:10:59  88  ,aud_g40
10:10:59  89  ,aud_g41
10:10:59  90  ,gbp_g00
10:10:59  91  ,gbp_g01
10:10:59  92  ,gbp_g02
10:10:59  93  ,gbp_g03
10:10:59  94  ,gbp_g04
10:10:59  95  ,gbp_g05
10:10:59  96  ,gbp_g06
10:10:59  97  ,gbp_g07
10:10:59  98  ,gbp_g08
10:10:59  99  ,gbp_g09
10:10:59 100  ,gbp_g10
10:10:59 101  ,gbp_g11
10:10:59 102  ,gbp_g12
10:10:59 103  ,gbp_g13
10:10:59 104  ,gbp_g14
10:10:59 105  ,gbp_g15
10:10:59 106  ,gbp_g16
10:10:59 107  ,gbp_g17
10:10:59 108  ,gbp_g18
10:10:59 109  ,gbp_g19
10:10:59 110  ,gbp_g20
10:10:59 111  ,gbp_g21
10:10:59 112  ,gbp_g22
10:10:59 113  ,gbp_g23
10:10:59 114  ,gbp_g24
10:10:59 115  ,gbp_g25
10:10:59 116  ,gbp_g26
10:10:59 117  ,gbp_g27
10:10:59 118  ,gbp_g28
10:10:59 119  ,gbp_g29
10:10:59 120  ,gbp_g30
10:10:59 121  ,gbp_g31
10:10:59 122  ,gbp_g32
10:10:59 123  ,gbp_g33
10:10:59 124  ,gbp_g34
10:10:59 125  ,gbp_g35
10:10:59 126  ,gbp_g36
10:10:59 127  ,gbp_g37
10:10:59 128  ,gbp_g38
10:10:59 129  ,gbp_g39
10:10:59 130  ,gbp_g40
10:10:59 131  ,gbp_g41
10:10:59 132  ,jpy_g00
10:10:59 133  ,jpy_g01
10:10:59 134  ,jpy_g02
10:10:59 135  ,jpy_g03
10:10:59 136  ,jpy_g04
10:10:59 137  ,jpy_g05
10:10:59 138  ,jpy_g06
10:10:59 139  ,jpy_g07
10:10:59 140  ,jpy_g08
10:10:59 141  ,jpy_g09
10:10:59 142  ,jpy_g10
10:10:59 143  ,jpy_g11
10:10:59 144  ,jpy_g12
10:10:59 145  ,jpy_g13
10:10:59 146  ,jpy_g14
10:10:59 147  ,jpy_g15
10:10:59 148  ,jpy_g16
10:10:59 149  ,jpy_g17
10:10:59 150  ,jpy_g18
10:10:59 151  ,jpy_g19
10:10:59 152  ,jpy_g20
10:10:59 153  ,jpy_g21
10:10:59 154  ,jpy_g22
10:10:59 155  ,jpy_g23
10:10:59 156  ,jpy_g24
10:10:59 157  ,jpy_g25
10:10:59 158  ,jpy_g26
10:10:59 159  ,jpy_g27
10:10:59 160  ,jpy_g28
10:10:59 161  ,jpy_g29
10:10:59 162  ,jpy_g30
10:10:59 163  ,jpy_g31
10:10:59 164  ,jpy_g32
10:10:59 165  ,jpy_g33
10:10:59 166  ,jpy_g34
10:10:59 167  ,jpy_g35
10:10:59 168  ,jpy_g36
10:10:59 169  ,jpy_g37
10:10:59 170  ,jpy_g38
10:10:59 171  ,jpy_g39
10:10:59 172  ,jpy_g40
10:10:59 173  ,jpy_g41
10:10:59 174  ,cad_g00
10:10:59 175  ,cad_g01
10:10:59 176  ,cad_g02
10:10:59 177  ,cad_g03
10:10:59 178  ,cad_g04
10:10:59 179  ,cad_g05
10:10:59 180  ,cad_g06
10:10:59 181  ,cad_g07
10:10:59 182  ,cad_g08
10:10:59 183  ,cad_g09
10:10:59 184  ,cad_g10
10:10:59 185  ,cad_g11
10:10:59 186  ,cad_g12
10:10:59 187  ,cad_g13
10:10:59 188  ,cad_g14
10:10:59 189  ,cad_g15
10:10:59 190  ,cad_g16
10:10:59 191  ,cad_g17
10:10:59 192  ,cad_g18
10:10:59 193  ,cad_g19
10:10:59 194  ,cad_g20
10:10:59 195  ,cad_g21
10:10:59 196  ,cad_g22
10:10:59 197  ,cad_g23
10:10:59 198  ,cad_g24
10:10:59 199  ,cad_g25
10:10:59 200  ,cad_g26
10:10:59 201  ,cad_g27
10:10:59 202  ,cad_g28
10:10:59 203  ,cad_g29
10:10:59 204  ,cad_g30
10:10:59 205  ,cad_g31
10:10:59 206  ,cad_g32
10:10:59 207  ,cad_g33
10:10:59 208  ,cad_g34
10:10:59 209  ,cad_g35
10:10:59 210  ,cad_g36
10:10:59 211  ,cad_g37
10:10:59 212  ,cad_g38
10:10:59 213  ,cad_g39
10:10:59 214  ,cad_g40
10:10:59 215  ,cad_g41
10:10:59 216  ,chf_g00
10:10:59 217  ,chf_g01
10:10:59 218  ,chf_g02
10:10:59 219  ,chf_g03
10:10:59 220  ,chf_g04
10:10:59 221  ,chf_g05
10:10:59 222  ,chf_g06
10:10:59 223  ,chf_g07
10:10:59 224  ,chf_g08
10:10:59 225  ,chf_g09
10:10:59 226  ,chf_g10
10:10:59 227  ,chf_g11
10:10:59 228  ,chf_g12
10:10:59 229  ,chf_g13
10:10:59 230  ,chf_g14
10:10:59 231  ,chf_g15
10:10:59 232  ,chf_g16
10:10:59 233  ,chf_g17
10:10:59 234  ,chf_g18
10:10:59 235  ,chf_g19
10:10:59 236  ,chf_g20
10:10:59 237  ,chf_g21
10:10:59 238  ,chf_g22
10:10:59 239  ,chf_g23
10:10:59 240  ,chf_g24
10:10:59 241  ,chf_g25
10:10:59 242  ,chf_g26
10:10:59 243  ,chf_g27
10:10:59 244  ,chf_g28
10:10:59 245  ,chf_g29
10:10:59 246  ,chf_g30
10:10:59 247  ,chf_g31
10:10:59 248  ,chf_g32
10:10:59 249  ,chf_g33
10:10:59 250  ,chf_g34
10:10:59 251  ,chf_g35
10:10:59 252  ,chf_g36
10:10:59 253  ,chf_g37
10:10:59 254  ,chf_g38
10:10:59 255  ,chf_g39
10:10:59 256  ,chf_g40
10:10:59 257  ,chf_g41
10:10:59 258  FROM aud_ms6 m
10:10:59 259  WHERE m.ydate = '&1'||' '||'&2'
10:10:59 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2011-01-04'||' '||'09:55:00'

View created.

Elapsed: 00:00:00.14
10:11:00 SQL> 
10:11:00 SQL> -- rpt
10:11:00 SQL> -- We should see just 1 row:
10:11:00 SQL> 
10:11:00 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
10:11:00 SQL> 
10:11:00 SQL> -- Build the model:
10:11:00 SQL> CREATE OR REPLACE VIEW bme AS
10:11:00   2  SELECT
10:11:00   3  'aud'||m.ydate prdate
10:11:00   4  ,gattn
10:11:00   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
10:11:00   6  ,eur_g00
10:11:00   7  ,eur_g01
10:11:00   8  ,eur_g02
10:11:00   9  ,eur_g03
10:11:00  10  ,eur_g04
10:11:00  11  ,eur_g05
10:11:00  12  ,eur_g06
10:11:00  13  ,eur_g07
10:11:00  14  ,eur_g08
10:11:00  15  ,eur_g09
10:11:00  16  ,eur_g10
10:11:00  17  ,eur_g11
10:11:00  18  ,eur_g12
10:11:00  19  ,eur_g13
10:11:00  20  ,eur_g14
10:11:00  21  ,eur_g15
10:11:00  22  ,eur_g16
10:11:00  23  ,eur_g17
10:11:00  24  ,eur_g18
10:11:00  25  ,eur_g19
10:11:00  26  ,eur_g20
10:11:00  27  ,eur_g21
10:11:00  28  ,eur_g22
10:11:00  29  ,eur_g23
10:11:00  30  ,eur_g24
10:11:00  31  ,eur_g25
10:11:00  32  ,eur_g26
10:11:00  33  ,eur_g27
10:11:00  34  ,eur_g28
10:11:00  35  ,eur_g29
10:11:00  36  ,eur_g30
10:11:00  37  ,eur_g31
10:11:00  38  ,eur_g32
10:11:00  39  ,eur_g33
10:11:00  40  ,eur_g34
10:11:00  41  ,eur_g35
10:11:00  42  ,eur_g36
10:11:00  43  ,eur_g37
10:11:00  44  ,eur_g38
10:11:00  45  ,eur_g39
10:11:00  46  ,eur_g40
10:11:00  47  ,eur_g41
10:11:00  48  ,aud_g00
10:11:00  49  ,aud_g01
10:11:00  50  ,aud_g02
10:11:00  51  ,aud_g03
10:11:00  52  ,aud_g04
10:11:00  53  ,aud_g05
10:11:00  54  ,aud_g06
10:11:00  55  ,aud_g07
10:11:00  56  ,aud_g08
10:11:00  57  ,aud_g09
10:11:00  58  ,aud_g10
10:11:00  59  ,aud_g11
10:11:00  60  ,aud_g12
10:11:00  61  ,aud_g13
10:11:00  62  ,aud_g14
10:11:00  63  ,aud_g15
10:11:00  64  ,aud_g16
10:11:00  65  ,aud_g17
10:11:00  66  ,aud_g18
10:11:00  67  ,aud_g19
10:11:00  68  ,aud_g20
10:11:00  69  ,aud_g21
10:11:00  70  ,aud_g22
10:11:00  71  ,aud_g23
10:11:00  72  ,aud_g24
10:11:00  73  ,aud_g25
10:11:00  74  ,aud_g26
10:11:00  75  ,aud_g27
10:11:00  76  ,aud_g28
10:11:00  77  ,aud_g29
10:11:00  78  ,aud_g30
10:11:00  79  ,aud_g31
10:11:00  80  ,aud_g32
10:11:00  81  ,aud_g33
10:11:00  82  ,aud_g34
10:11:00  83  ,aud_g35
10:11:00  84  ,aud_g36
10:11:00  85  ,aud_g37
10:11:00  86  ,aud_g38
10:11:00  87  ,aud_g39
10:11:00  88  ,aud_g40
10:11:00  89  ,aud_g41
10:11:00  90  ,gbp_g00
10:11:00  91  ,gbp_g01
10:11:00  92  ,gbp_g02
10:11:00  93  ,gbp_g03
10:11:00  94  ,gbp_g04
10:11:00  95  ,gbp_g05
10:11:00  96  ,gbp_g06
10:11:00  97  ,gbp_g07
10:11:00  98  ,gbp_g08
10:11:00  99  ,gbp_g09
10:11:00 100  ,gbp_g10
10:11:00 101  ,gbp_g11
10:11:00 102  ,gbp_g12
10:11:00 103  ,gbp_g13
10:11:00 104  ,gbp_g14
10:11:00 105  ,gbp_g15
10:11:00 106  ,gbp_g16
10:11:00 107  ,gbp_g17
10:11:00 108  ,gbp_g18
10:11:00 109  ,gbp_g19
10:11:00 110  ,gbp_g20
10:11:00 111  ,gbp_g21
10:11:00 112  ,gbp_g22
10:11:00 113  ,gbp_g23
10:11:00 114  ,gbp_g24
10:11:00 115  ,gbp_g25
10:11:00 116  ,gbp_g26
10:11:00 117  ,gbp_g27
10:11:00 118  ,gbp_g28
10:11:00 119  ,gbp_g29
10:11:00 120  ,gbp_g30
10:11:00 121  ,gbp_g31
10:11:00 122  ,gbp_g32
10:11:00 123  ,gbp_g33
10:11:00 124  ,gbp_g34
10:11:00 125  ,gbp_g35
10:11:00 126  ,gbp_g36
10:11:00 127  ,gbp_g37
10:11:00 128  ,gbp_g38
10:11:00 129  ,gbp_g39
10:11:00 130  ,gbp_g40
10:11:00 131  ,gbp_g41
10:11:00 132  ,jpy_g00
10:11:00 133  ,jpy_g01
10:11:00 134  ,jpy_g02
10:11:00 135  ,jpy_g03
10:11:00 136  ,jpy_g04
10:11:00 137  ,jpy_g05
10:11:00 138  ,jpy_g06
10:11:00 139  ,jpy_g07
10:11:00 140  ,jpy_g08
10:11:00 141  ,jpy_g09
10:11:00 142  ,jpy_g10
10:11:00 143  ,jpy_g11
10:11:00 144  ,jpy_g12
10:11:00 145  ,jpy_g13
10:11:00 146  ,jpy_g14
10:11:00 147  ,jpy_g15
10:11:00 148  ,jpy_g16
10:11:00 149  ,jpy_g17
10:11:00 150  ,jpy_g18
10:11:00 151  ,jpy_g19
10:11:00 152  ,jpy_g20
10:11:00 153  ,jpy_g21
10:11:00 154  ,jpy_g22
10:11:00 155  ,jpy_g23
10:11:00 156  ,jpy_g24
10:11:00 157  ,jpy_g25
10:11:00 158  ,jpy_g26
10:11:00 159  ,jpy_g27
10:11:00 160  ,jpy_g28
10:11:00 161  ,jpy_g29
10:11:00 162  ,jpy_g30
10:11:00 163  ,jpy_g31
10:11:00 164  ,jpy_g32
10:11:00 165  ,jpy_g33
10:11:00 166  ,jpy_g34
10:11:00 167  ,jpy_g35
10:11:00 168  ,jpy_g36
10:11:00 169  ,jpy_g37
10:11:00 170  ,jpy_g38
10:11:00 171  ,jpy_g39
10:11:00 172  ,jpy_g40
10:11:00 173  ,jpy_g41
10:11:00 174  ,cad_g00
10:11:00 175  ,cad_g01
10:11:00 176  ,cad_g02
10:11:00 177  ,cad_g03
10:11:00 178  ,cad_g04
10:11:00 179  ,cad_g05
10:11:00 180  ,cad_g06
10:11:00 181  ,cad_g07
10:11:00 182  ,cad_g08
10:11:00 183  ,cad_g09
10:11:00 184  ,cad_g10
10:11:00 185  ,cad_g11
10:11:00 186  ,cad_g12
10:11:00 187  ,cad_g13
10:11:00 188  ,cad_g14
10:11:00 189  ,cad_g15
10:11:00 190  ,cad_g16
10:11:00 191  ,cad_g17
10:11:00 192  ,cad_g18
10:11:00 193  ,cad_g19
10:11:00 194  ,cad_g20
10:11:00 195  ,cad_g21
10:11:00 196  ,cad_g22
10:11:00 197  ,cad_g23
10:11:00 198  ,cad_g24
10:11:00 199  ,cad_g25
10:11:00 200  ,cad_g26
10:11:00 201  ,cad_g27
10:11:00 202  ,cad_g28
10:11:00 203  ,cad_g29
10:11:00 204  ,cad_g30
10:11:00 205  ,cad_g31
10:11:00 206  ,cad_g32
10:11:00 207  ,cad_g33
10:11:00 208  ,cad_g34
10:11:00 209  ,cad_g35
10:11:00 210  ,cad_g36
10:11:00 211  ,cad_g37
10:11:00 212  ,cad_g38
10:11:00 213  ,cad_g39
10:11:00 214  ,cad_g40
10:11:00 215  ,cad_g41
10:11:00 216  ,chf_g00
10:11:00 217  ,chf_g01
10:11:00 218  ,chf_g02
10:11:00 219  ,chf_g03
10:11:00 220  ,chf_g04
10:11:00 221  ,chf_g05
10:11:00 222  ,chf_g06
10:11:00 223  ,chf_g07
10:11:00 224  ,chf_g08
10:11:00 225  ,chf_g09
10:11:00 226  ,chf_g10
10:11:00 227  ,chf_g11
10:11:00 228  ,chf_g12
10:11:00 229  ,chf_g13
10:11:00 230  ,chf_g14
10:11:00 231  ,chf_g15
10:11:00 232  ,chf_g16
10:11:00 233  ,chf_g17
10:11:00 234  ,chf_g18
10:11:00 235  ,chf_g19
10:11:00 236  ,chf_g20
10:11:00 237  ,chf_g21
10:11:00 238  ,chf_g22
10:11:00 239  ,chf_g23
10:11:00 240  ,chf_g24
10:11:00 241  ,chf_g25
10:11:00 242  ,chf_g26
10:11:00 243  ,chf_g27
10:11:00 244  ,chf_g28
10:11:00 245  ,chf_g29
10:11:00 246  ,chf_g30
10:11:00 247  ,chf_g31
10:11:00 248  ,chf_g32
10:11:00 249  ,chf_g33
10:11:00 250  ,chf_g34
10:11:00 251  ,chf_g35
10:11:00 252  ,chf_g36
10:11:00 253  ,chf_g37
10:11:00 254  ,chf_g38
10:11:00 255  ,chf_g39
10:11:00 256  ,chf_g40
10:11:00 257  ,chf_g41
10:11:00 258  FROM aud_ms6 m
10:11:00 259  WHERE gattn IN('nup','up')
10:11:00 260  AND 1+m.ydate < '&1'||' '||'&2'
10:11:00 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2011-01-04'||' '||'09:55:00'

View created.

Elapsed: 00:00:00.13
10:11:00 SQL> 
10:11:00 SQL> -- rpt
10:11:00 SQL> 
10:11:00 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	    12688
up	     6268

Elapsed: 00:00:00.05
10:11:00 SQL> 
10:11:00 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
aud2011-01-03 09:50:00

Elapsed: 00:00:00.03
10:11:00 SQL> 
10:11:00 SQL> -- Now build model from bme and score sme
10:11:00 SQL> @score1gattn.sql
10:11:00 SQL> -- score1gattn.sql
10:11:00 SQL> 
10:11:00 SQL> -- Does the 1st SVM score
10:11:00 SQL> 
10:11:00 SQL> -- Fill up svmc_apply_prep
10:11:00 SQL> @score_gattn.sql
10:11:00 SQL> --
10:11:00 SQL> -- score_gattn.sql
10:11:00 SQL> --
10:11:00 SQL> 
10:11:00 SQL> -- usage: score_gattn.sql
10:11:00 SQL> 
10:11:00 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
10:11:00 SQL> 
10:11:00 SQL> DEFINE target	= 'gattn'
10:11:00 SQL> DEFINE model_name = 'forex14'
10:11:00 SQL> DEFINE bldtable	= 'bme'
10:11:00 SQL> DEFINE scoretable = 'sme'
10:11:00 SQL> DEFINE case_id	= 'prdate'
10:11:00 SQL> 
10:11:00 SQL> -- Define a variable to help me exclude some columns from some data mining calls
10:11:00 SQL> DEFINE exclude1 = "'&target','&case_id'"
10:11:00 SQL> 
10:11:00 SQL> -- Builds an SVM model using pl/sql.
10:11:00 SQL> 
10:11:00 SQL> -----------------------------------------------------------------------
10:11:00 SQL> --			    BUILD THE MODEL
10:11:00 SQL> -----------------------------------------------------------------------
10:11:00 SQL> 
10:11:00 SQL> -- Cleanup old build data preparation objects for repeat runs
10:11:00 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.00
10:11:00 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
10:11:00 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.01
10:11:00 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.00
10:11:00 SQL> 
10:11:00 SQL> 
10:11:00 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
10:11:00 SQL> --
10:11:00 SQL> -- DROP	TABLE svmc_settings ;
10:11:00 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
10:11:00 SQL> -- DELETE svmc_settings;
10:11:00 SQL> 
10:11:00 SQL> -- The default classification algorithm is Naive Bayes. So override
10:11:00 SQL> -- this choice to SVM using a settings table.
10:11:00 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
10:11:00 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
10:11:00 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
10:11:00 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
10:11:00 SQL> -- models.
10:11:00 SQL> --
10:11:00 SQL> 
10:11:00 SQL> -- Do this once and then comment it out.
10:11:00 SQL> -- That makes script go faster.
10:11:00 SQL> -- BEGIN
10:11:00 SQL> -- -- Populate settings table
10:11:00 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
10:11:00 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
10:11:00 SQL> --
10:11:00 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
10:11:00 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
10:11:00 SQL> --
10:11:00 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
10:11:00 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
10:11:00 SQL> --   COMMIT;
10:11:00 SQL> -- END;
10:11:00 SQL> -- /
10:11:00 SQL> 
10:11:00 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
10:11:00 SQL> 
10:11:00 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
10:11:00   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:11:00   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.09
10:11:00 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
10:11:00   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:11:00   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
10:11:00 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
10:11:00   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:11:00   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
10:11:00 SQL> 
10:11:00 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
10:11:00   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:11:00   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
10:11:00 SQL> 
10:11:00 SQL> --------------------------------
10:11:00 SQL> -- PREPARE BUILD (TRAINING) DATA
10:11:00 SQL> --
10:11:00 SQL> 
10:11:00 SQL> -- 1. Missing Value treatment for all Predictors and
10:11:00 SQL> -- 2. Outlier Treatment and
10:11:00 SQL> -- 3. Normalization are performed below.
10:11:00 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
10:11:00 SQL> --    normalized here.
10:11:00 SQL> 
10:11:00 SQL> BEGIN
10:11:00   2  	-- Perform missing value treatment for all predictors
10:11:00   3  	-- create miss tables
10:11:00   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
10:11:00   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
10:11:00   6  
10:11:00   7  	-- populate miss tables
10:11:00   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
10:11:00   9  	  miss_table_name => 'svmc_miss_num',
10:11:00  10  	  data_table_name => '&bldtable',
10:11:00  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:11:00  12  
10:11:00  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
10:11:00  14  	  miss_table_name => 'svmc_miss_cat',
10:11:00  15  	  data_table_name => '&bldtable',
10:11:00  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:11:00  17  
10:11:00  18  	-- xform input data to replace missing values
10:11:00  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
10:11:00  20  	  miss_table_name => 'svmc_miss_num',
10:11:00  21  	  data_table_name => '&bldtable',
10:11:00  22  	  xform_view_name => 'xformed_build_miss_num');
10:11:00  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
10:11:00  24  	  miss_table_name => 'svmc_miss_cat',
10:11:00  25  	  data_table_name => '&bldtable',
10:11:00  26  	  xform_view_name => 'xformed_build_miss_cat');
10:11:00  27  
10:11:00  28  	-- Perform outlier treatment.
10:11:00  29  	-- create clip table
10:11:00  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
10:11:00  31  
10:11:00  32  	-- populate clip table
10:11:00  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
10:11:00  34  	  clip_table_name => 'svmc_clip',
10:11:00  35  	  data_table_name => '&bldtable',
10:11:00  36  	  tail_frac	  => 0.025,
10:11:00  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:11:00  38  
10:11:00  39  	-- xform input data to winsorized data
10:11:00  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
10:11:00  41  	  clip_table_name => 'svmc_clip',
10:11:00  42  	  data_table_name => '&bldtable',
10:11:00  43  	  xform_view_name => 'svmc_winsor');
10:11:00  44  
10:11:00  45  	-- create normalization table
10:11:00  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
10:11:00  47  
10:11:00  48  	-- populate normalization table based on winsorized data
10:11:00  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
10:11:00  50  	  norm_table_name => 'svmc_norm',
10:11:00  51  	  data_table_name => 'svmc_winsor',
10:11:00  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:11:00  53  
10:11:00  54  	-- normalize the original data
10:11:00  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
10:11:00  56  	  norm_table_name => 'svmc_norm',
10:11:00  57  	  data_table_name => '&bldtable',
10:11:00  58  	  xform_view_name => 'svmc_build_prep');
10:11:00  59  END;
10:11:00  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:17.35
10:11:18 SQL> 
10:11:18 SQL> ---------------------
10:11:18 SQL> -- CREATE A NEW MODEL
10:11:18 SQL> --
10:11:18 SQL> -- Cleanup old model with the same name for repeat runs
10:11:18 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
10:11:18   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:11:18   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.91
10:11:18 SQL> 
10:11:18 SQL> -- Build a new SVM Model
10:11:18 SQL> BEGIN
10:11:18   2  	DBMS_DATA_MINING.CREATE_MODEL(
10:11:18   3  	  model_name	      => '&model_name',
10:11:18   4  	  mining_function     => dbms_data_mining.classification,
10:11:18   5  	  data_table_name     => 'svmc_build_prep',
10:11:18   6  	  case_id_column_name => '&case_id',
10:11:18   7  	  target_column_name  => '&target',
10:11:18   8  	  settings_table_name => 'svmc_settings');
10:11:18   9  END;
10:11:18  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:26.97
10:11:45 SQL> 
10:11:45 SQL> -----------------------------------------------------------------------
10:11:45 SQL> --			       APPLY/score THE MODEL
10:11:45 SQL> -----------------------------------------------------------------------
10:11:45 SQL> 
10:11:45 SQL> -- Cleanup old scoring data preparation objects for repeat runs
10:11:45 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
10:11:45   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:11:45   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
10:11:45 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
10:11:45   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:11:45   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
10:11:46 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
10:11:46   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:11:46   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
10:11:46 SQL> -----------------------
10:11:46 SQL> -- PREPARE SCORING DATA
10:11:46 SQL> --
10:11:46 SQL> -- If the data for model creation has been prepared, then the data
10:11:46 SQL> -- to be scored using the model must be prepared in the same manner
10:11:46 SQL> -- in order to obtain meaningful results.
10:11:46 SQL> --
10:11:46 SQL> -- 1. Missing Value treatment for all Predictors and
10:11:46 SQL> -- 2. Normalization
10:11:46 SQL> -- No outlier treatment will be performed during test and apply. The
10:11:46 SQL> -- normalization step is sufficient, since the normalization parameters
10:11:46 SQL> -- already capture the effects of outlier treatment done with build data.
10:11:46 SQL> --
10:11:46 SQL> BEGIN
10:11:46   2  	-- Xform Test data to replace missing values
10:11:46   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
10:11:46   4  	  miss_table_name => 'svmc_miss_num',
10:11:46   5  	  data_table_name => '&scoretable',
10:11:46   6  	  xform_view_name => 'xformed_apply_miss_num');
10:11:46   7  
10:11:46   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
10:11:46   9  	  miss_table_name => 'svmc_miss_cat',
10:11:46  10  	  data_table_name => '&scoretable',
10:11:46  11  	  xform_view_name => 'xformed_apply_miss_cat');
10:11:46  12  
10:11:46  13  	-- Normalize the data to be scored
10:11:46  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
10:11:46  15  	  norm_table_name => 'svmc_norm',
10:11:46  16  	  data_table_name => '&scoretable',
10:11:46  17  	  xform_view_name => 'svmc_apply_prep');
10:11:46  18  END;
10:11:46  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.26
10:11:47 SQL> 
10:11:47 SQL> -- Use same model_name used in score_gattn.sql
10:11:47 SQL> DEFINE model_name = 'forex14'
10:11:47 SQL> 
10:11:47 SQL> DELETE fxscores6_gattn WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.04
10:11:47 SQL> 
10:11:47 SQL> INSERT INTO fxscores6_gattn (prdate,score,rundate,pair,ydate)
10:11:47   2  SELECT
10:11:47   3  prdate
10:11:47   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
10:11:47   5  ,sysdate
10:11:47   6  ,SUBSTR(prdate,1,3)pair
10:11:47   7  ,SUBSTR(prdate,4,19)ydate
10:11:47   8  FROM svmc_apply_prep
10:11:47   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.18
10:11:47 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
