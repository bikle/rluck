
SQL*Plus: Release 11.2.0.1.0 Production on Mon Jan 3 05:43:41 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

05:43:41 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.01
05:43:41 SQL> 05:43:41 SQL> @aud_score1day.sql  2011-01-03 05:20:00
05:43:41 SQL> --
05:43:41 SQL> -- aud_score1day.sql
05:43:41 SQL> --
05:43:41 SQL> 
05:43:41 SQL> CREATE OR REPLACE VIEW sme AS
05:43:41   2  SELECT
05:43:41   3  'aud'||m.ydate prdate
05:43:41   4  ,NULL gatt
05:43:41   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
05:43:41   6  ,eur_g00
05:43:41   7  ,eur_g01
05:43:41   8  ,eur_g02
05:43:41   9  ,eur_g03
05:43:41  10  ,eur_g04
05:43:41  11  ,eur_g05
05:43:41  12  ,eur_g06
05:43:41  13  ,eur_g07
05:43:41  14  ,eur_g08
05:43:41  15  ,eur_g09
05:43:41  16  ,eur_g10
05:43:41  17  ,eur_g11
05:43:41  18  ,eur_g12
05:43:41  19  ,eur_g13
05:43:41  20  ,eur_g14
05:43:41  21  ,eur_g15
05:43:41  22  ,eur_g16
05:43:41  23  ,eur_g17
05:43:41  24  ,eur_g18
05:43:41  25  ,eur_g19
05:43:41  26  ,eur_g20
05:43:41  27  ,eur_g21
05:43:41  28  ,eur_g22
05:43:41  29  ,eur_g23
05:43:41  30  ,eur_g24
05:43:41  31  ,eur_g25
05:43:41  32  ,eur_g26
05:43:41  33  ,eur_g27
05:43:41  34  ,eur_g28
05:43:41  35  ,eur_g29
05:43:41  36  ,eur_g30
05:43:41  37  ,eur_g31
05:43:41  38  ,eur_g32
05:43:41  39  ,eur_g33
05:43:41  40  ,eur_g34
05:43:41  41  ,eur_g35
05:43:41  42  ,eur_g36
05:43:41  43  ,eur_g37
05:43:41  44  ,eur_g38
05:43:41  45  ,eur_g39
05:43:41  46  ,eur_g40
05:43:41  47  ,eur_g41
05:43:41  48  ,aud_g00
05:43:41  49  ,aud_g01
05:43:41  50  ,aud_g02
05:43:41  51  ,aud_g03
05:43:41  52  ,aud_g04
05:43:41  53  ,aud_g05
05:43:41  54  ,aud_g06
05:43:41  55  ,aud_g07
05:43:41  56  ,aud_g08
05:43:41  57  ,aud_g09
05:43:41  58  ,aud_g10
05:43:41  59  ,aud_g11
05:43:41  60  ,aud_g12
05:43:41  61  ,aud_g13
05:43:41  62  ,aud_g14
05:43:41  63  ,aud_g15
05:43:41  64  ,aud_g16
05:43:41  65  ,aud_g17
05:43:41  66  ,aud_g18
05:43:41  67  ,aud_g19
05:43:41  68  ,aud_g20
05:43:41  69  ,aud_g21
05:43:41  70  ,aud_g22
05:43:41  71  ,aud_g23
05:43:41  72  ,aud_g24
05:43:41  73  ,aud_g25
05:43:41  74  ,aud_g26
05:43:41  75  ,aud_g27
05:43:41  76  ,aud_g28
05:43:41  77  ,aud_g29
05:43:41  78  ,aud_g30
05:43:41  79  ,aud_g31
05:43:41  80  ,aud_g32
05:43:41  81  ,aud_g33
05:43:41  82  ,aud_g34
05:43:41  83  ,aud_g35
05:43:41  84  ,aud_g36
05:43:41  85  ,aud_g37
05:43:41  86  ,aud_g38
05:43:41  87  ,aud_g39
05:43:41  88  ,aud_g40
05:43:41  89  ,aud_g41
05:43:41  90  ,gbp_g00
05:43:41  91  ,gbp_g01
05:43:41  92  ,gbp_g02
05:43:41  93  ,gbp_g03
05:43:41  94  ,gbp_g04
05:43:41  95  ,gbp_g05
05:43:41  96  ,gbp_g06
05:43:41  97  ,gbp_g07
05:43:41  98  ,gbp_g08
05:43:41  99  ,gbp_g09
05:43:41 100  ,gbp_g10
05:43:41 101  ,gbp_g11
05:43:41 102  ,gbp_g12
05:43:41 103  ,gbp_g13
05:43:41 104  ,gbp_g14
05:43:41 105  ,gbp_g15
05:43:41 106  ,gbp_g16
05:43:41 107  ,gbp_g17
05:43:41 108  ,gbp_g18
05:43:41 109  ,gbp_g19
05:43:41 110  ,gbp_g20
05:43:41 111  ,gbp_g21
05:43:41 112  ,gbp_g22
05:43:41 113  ,gbp_g23
05:43:41 114  ,gbp_g24
05:43:41 115  ,gbp_g25
05:43:41 116  ,gbp_g26
05:43:41 117  ,gbp_g27
05:43:41 118  ,gbp_g28
05:43:41 119  ,gbp_g29
05:43:41 120  ,gbp_g30
05:43:41 121  ,gbp_g31
05:43:41 122  ,gbp_g32
05:43:41 123  ,gbp_g33
05:43:41 124  ,gbp_g34
05:43:41 125  ,gbp_g35
05:43:41 126  ,gbp_g36
05:43:41 127  ,gbp_g37
05:43:41 128  ,gbp_g38
05:43:41 129  ,gbp_g39
05:43:41 130  ,gbp_g40
05:43:41 131  ,gbp_g41
05:43:41 132  ,jpy_g00
05:43:41 133  ,jpy_g01
05:43:41 134  ,jpy_g02
05:43:41 135  ,jpy_g03
05:43:41 136  ,jpy_g04
05:43:41 137  ,jpy_g05
05:43:41 138  ,jpy_g06
05:43:41 139  ,jpy_g07
05:43:41 140  ,jpy_g08
05:43:41 141  ,jpy_g09
05:43:41 142  ,jpy_g10
05:43:41 143  ,jpy_g11
05:43:41 144  ,jpy_g12
05:43:41 145  ,jpy_g13
05:43:41 146  ,jpy_g14
05:43:41 147  ,jpy_g15
05:43:41 148  ,jpy_g16
05:43:41 149  ,jpy_g17
05:43:41 150  ,jpy_g18
05:43:41 151  ,jpy_g19
05:43:41 152  ,jpy_g20
05:43:41 153  ,jpy_g21
05:43:41 154  ,jpy_g22
05:43:41 155  ,jpy_g23
05:43:41 156  ,jpy_g24
05:43:41 157  ,jpy_g25
05:43:41 158  ,jpy_g26
05:43:41 159  ,jpy_g27
05:43:41 160  ,jpy_g28
05:43:41 161  ,jpy_g29
05:43:41 162  ,jpy_g30
05:43:41 163  ,jpy_g31
05:43:41 164  ,jpy_g32
05:43:41 165  ,jpy_g33
05:43:41 166  ,jpy_g34
05:43:41 167  ,jpy_g35
05:43:41 168  ,jpy_g36
05:43:41 169  ,jpy_g37
05:43:41 170  ,jpy_g38
05:43:41 171  ,jpy_g39
05:43:41 172  ,jpy_g40
05:43:41 173  ,jpy_g41
05:43:41 174  ,cad_g00
05:43:41 175  ,cad_g01
05:43:41 176  ,cad_g02
05:43:41 177  ,cad_g03
05:43:41 178  ,cad_g04
05:43:41 179  ,cad_g05
05:43:41 180  ,cad_g06
05:43:41 181  ,cad_g07
05:43:41 182  ,cad_g08
05:43:41 183  ,cad_g09
05:43:41 184  ,cad_g10
05:43:41 185  ,cad_g11
05:43:41 186  ,cad_g12
05:43:41 187  ,cad_g13
05:43:41 188  ,cad_g14
05:43:41 189  ,cad_g15
05:43:41 190  ,cad_g16
05:43:41 191  ,cad_g17
05:43:41 192  ,cad_g18
05:43:41 193  ,cad_g19
05:43:41 194  ,cad_g20
05:43:41 195  ,cad_g21
05:43:41 196  ,cad_g22
05:43:41 197  ,cad_g23
05:43:41 198  ,cad_g24
05:43:41 199  ,cad_g25
05:43:41 200  ,cad_g26
05:43:41 201  ,cad_g27
05:43:41 202  ,cad_g28
05:43:41 203  ,cad_g29
05:43:41 204  ,cad_g30
05:43:41 205  ,cad_g31
05:43:41 206  ,cad_g32
05:43:41 207  ,cad_g33
05:43:41 208  ,cad_g34
05:43:41 209  ,cad_g35
05:43:41 210  ,cad_g36
05:43:41 211  ,cad_g37
05:43:41 212  ,cad_g38
05:43:41 213  ,cad_g39
05:43:41 214  ,cad_g40
05:43:41 215  ,cad_g41
05:43:41 216  ,chf_g00
05:43:41 217  ,chf_g01
05:43:41 218  ,chf_g02
05:43:41 219  ,chf_g03
05:43:41 220  ,chf_g04
05:43:41 221  ,chf_g05
05:43:41 222  ,chf_g06
05:43:41 223  ,chf_g07
05:43:41 224  ,chf_g08
05:43:41 225  ,chf_g09
05:43:41 226  ,chf_g10
05:43:41 227  ,chf_g11
05:43:41 228  ,chf_g12
05:43:41 229  ,chf_g13
05:43:41 230  ,chf_g14
05:43:41 231  ,chf_g15
05:43:41 232  ,chf_g16
05:43:41 233  ,chf_g17
05:43:41 234  ,chf_g18
05:43:41 235  ,chf_g19
05:43:41 236  ,chf_g20
05:43:41 237  ,chf_g21
05:43:41 238  ,chf_g22
05:43:41 239  ,chf_g23
05:43:41 240  ,chf_g24
05:43:41 241  ,chf_g25
05:43:41 242  ,chf_g26
05:43:41 243  ,chf_g27
05:43:41 244  ,chf_g28
05:43:41 245  ,chf_g29
05:43:41 246  ,chf_g30
05:43:41 247  ,chf_g31
05:43:41 248  ,chf_g32
05:43:41 249  ,chf_g33
05:43:41 250  ,chf_g34
05:43:41 251  ,chf_g35
05:43:41 252  ,chf_g36
05:43:41 253  ,chf_g37
05:43:41 254  ,chf_g38
05:43:41 255  ,chf_g39
05:43:41 256  ,chf_g40
05:43:41 257  ,chf_g41
05:43:41 258  FROM aud_ms6 m
05:43:41 259  WHERE m.ydate = '&1'||' '||'&2'
05:43:41 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2011-01-03'||' '||'05:20:00'

View created.

Elapsed: 00:00:00.15
05:43:41 SQL> 
05:43:41 SQL> -- rpt
05:43:41 SQL> -- We should see just 1 row:
05:43:41 SQL> 
05:43:41 SQL> SELECT COUNT(prdate) FROM sme
05:43:41   2  
05:43:41 SQL> -- Build the model:
05:43:41 SQL> CREATE OR REPLACE VIEW bme AS
05:43:41   2  SELECT
05:43:41   3  'aud'||m.ydate prdate
05:43:41   4  ,gatt
05:43:41   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
05:43:41   6  ,eur_g00
05:43:41   7  ,eur_g01
05:43:41   8  ,eur_g02
05:43:41   9  ,eur_g03
05:43:41  10  ,eur_g04
05:43:41  11  ,eur_g05
05:43:41  12  ,eur_g06
05:43:41  13  ,eur_g07
05:43:41  14  ,eur_g08
05:43:41  15  ,eur_g09
05:43:41  16  ,eur_g10
05:43:41  17  ,eur_g11
05:43:41  18  ,eur_g12
05:43:41  19  ,eur_g13
05:43:41  20  ,eur_g14
05:43:41  21  ,eur_g15
05:43:41  22  ,eur_g16
05:43:41  23  ,eur_g17
05:43:41  24  ,eur_g18
05:43:41  25  ,eur_g19
05:43:41  26  ,eur_g20
05:43:41  27  ,eur_g21
05:43:41  28  ,eur_g22
05:43:41  29  ,eur_g23
05:43:41  30  ,eur_g24
05:43:41  31  ,eur_g25
05:43:41  32  ,eur_g26
05:43:41  33  ,eur_g27
05:43:41  34  ,eur_g28
05:43:41  35  ,eur_g29
05:43:41  36  ,eur_g30
05:43:41  37  ,eur_g31
05:43:41  38  ,eur_g32
05:43:41  39  ,eur_g33
05:43:41  40  ,eur_g34
05:43:41  41  ,eur_g35
05:43:41  42  ,eur_g36
05:43:41  43  ,eur_g37
05:43:41  44  ,eur_g38
05:43:41  45  ,eur_g39
05:43:41  46  ,eur_g40
05:43:41  47  ,eur_g41
05:43:41  48  ,aud_g00
05:43:41  49  ,aud_g01
05:43:41  50  ,aud_g02
05:43:41  51  ,aud_g03
05:43:41  52  ,aud_g04
05:43:41  53  ,aud_g05
05:43:41  54  ,aud_g06
05:43:41  55  ,aud_g07
05:43:41  56  ,aud_g08
05:43:41  57  ,aud_g09
05:43:41  58  ,aud_g10
05:43:41  59  ,aud_g11
05:43:41  60  ,aud_g12
05:43:41  61  ,aud_g13
05:43:41  62  ,aud_g14
05:43:41  63  ,aud_g15
05:43:41  64  ,aud_g16
05:43:41  65  ,aud_g17
05:43:41  66  ,aud_g18
05:43:41  67  ,aud_g19
05:43:41  68  ,aud_g20
05:43:41  69  ,aud_g21
05:43:41  70  ,aud_g22
05:43:41  71  ,aud_g23
05:43:41  72  ,aud_g24
05:43:41  73  ,aud_g25
05:43:41  74  ,aud_g26
05:43:41  75  ,aud_g27
05:43:41  76  ,aud_g28
05:43:41  77  ,aud_g29
05:43:41  78  ,aud_g30
05:43:41  79  ,aud_g31
05:43:41  80  ,aud_g32
05:43:41  81  ,aud_g33
05:43:41  82  ,aud_g34
05:43:41  83  ,aud_g35
05:43:41  84  ,aud_g36
05:43:41  85  ,aud_g37
05:43:41  86  ,aud_g38
05:43:41  87  ,aud_g39
05:43:41  88  ,aud_g40
05:43:41  89  ,aud_g41
05:43:41  90  ,gbp_g00
05:43:41  91  ,gbp_g01
05:43:41  92  ,gbp_g02
05:43:41  93  ,gbp_g03
05:43:41  94  ,gbp_g04
05:43:41  95  ,gbp_g05
05:43:41  96  ,gbp_g06
05:43:41  97  ,gbp_g07
05:43:41  98  ,gbp_g08
05:43:41  99  ,gbp_g09
05:43:41 100  ,gbp_g10
05:43:41 101  ,gbp_g11
05:43:41 102  ,gbp_g12
05:43:41 103  ,gbp_g13
05:43:41 104  ,gbp_g14
05:43:41 105  ,gbp_g15
05:43:41 106  ,gbp_g16
05:43:41 107  ,gbp_g17
05:43:41 108  ,gbp_g18
05:43:41 109  ,gbp_g19
05:43:41 110  ,gbp_g20
05:43:41 111  ,gbp_g21
05:43:41 112  ,gbp_g22
05:43:41 113  ,gbp_g23
05:43:41 114  ,gbp_g24
05:43:41 115  ,gbp_g25
05:43:41 116  ,gbp_g26
05:43:41 117  ,gbp_g27
05:43:41 118  ,gbp_g28
05:43:41 119  ,gbp_g29
05:43:41 120  ,gbp_g30
05:43:41 121  ,gbp_g31
05:43:41 122  ,gbp_g32
05:43:41 123  ,gbp_g33
05:43:41 124  ,gbp_g34
05:43:41 125  ,gbp_g35
05:43:41 126  ,gbp_g36
05:43:41 127  ,gbp_g37
05:43:41 128  ,gbp_g38
05:43:41 129  ,gbp_g39
05:43:41 130  ,gbp_g40
05:43:41 131  ,gbp_g41
05:43:41 132  ,jpy_g00
05:43:41 133  ,jpy_g01
05:43:41 134  ,jpy_g02
05:43:41 135  ,jpy_g03
05:43:41 136  ,jpy_g04
05:43:41 137  ,jpy_g05
05:43:41 138  ,jpy_g06
05:43:41 139  ,jpy_g07
05:43:41 140  ,jpy_g08
05:43:41 141  ,jpy_g09
05:43:41 142  ,jpy_g10
05:43:41 143  ,jpy_g11
05:43:41 144  ,jpy_g12
05:43:41 145  ,jpy_g13
05:43:41 146  ,jpy_g14
05:43:41 147  ,jpy_g15
05:43:41 148  ,jpy_g16
05:43:41 149  ,jpy_g17
05:43:41 150  ,jpy_g18
05:43:41 151  ,jpy_g19
05:43:41 152  ,jpy_g20
05:43:41 153  ,jpy_g21
05:43:41 154  ,jpy_g22
05:43:41 155  ,jpy_g23
05:43:41 156  ,jpy_g24
05:43:41 157  ,jpy_g25
05:43:41 158  ,jpy_g26
05:43:41 159  ,jpy_g27
05:43:41 160  ,jpy_g28
05:43:41 161  ,jpy_g29
05:43:41 162  ,jpy_g30
05:43:41 163  ,jpy_g31
05:43:41 164  ,jpy_g32
05:43:41 165  ,jpy_g33
05:43:41 166  ,jpy_g34
05:43:41 167  ,jpy_g35
05:43:41 168  ,jpy_g36
05:43:41 169  ,jpy_g37
05:43:41 170  ,jpy_g38
05:43:41 171  ,jpy_g39
05:43:41 172  ,jpy_g40
05:43:41 173  ,jpy_g41
05:43:41 174  ,cad_g00
05:43:41 175  ,cad_g01
05:43:41 176  ,cad_g02
05:43:41 177  ,cad_g03
05:43:41 178  ,cad_g04
05:43:41 179  ,cad_g05
05:43:41 180  ,cad_g06
05:43:41 181  ,cad_g07
05:43:41 182  ,cad_g08
05:43:41 183  ,cad_g09
05:43:41 184  ,cad_g10
05:43:41 185  ,cad_g11
05:43:41 186  ,cad_g12
05:43:41 187  ,cad_g13
05:43:41 188  ,cad_g14
05:43:41 189  ,cad_g15
05:43:41 190  ,cad_g16
05:43:41 191  ,cad_g17
05:43:41 192  ,cad_g18
05:43:41 193  ,cad_g19
05:43:41 194  ,cad_g20
05:43:41 195  ,cad_g21
05:43:41 196  ,cad_g22
05:43:41 197  ,cad_g23
05:43:41 198  ,cad_g24
05:43:41 199  ,cad_g25
05:43:41 200  ,cad_g26
05:43:41 201  ,cad_g27
05:43:41 202  ,cad_g28
05:43:41 203  ,cad_g29
05:43:41 204  ,cad_g30
05:43:41 205  ,cad_g31
05:43:41 206  ,cad_g32
05:43:41 207  ,cad_g33
05:43:41 208  ,cad_g34
05:43:41 209  ,cad_g35
05:43:41 210  ,cad_g36
05:43:41 211  ,cad_g37
05:43:41 212  ,cad_g38
05:43:41 213  ,cad_g39
05:43:41 214  ,cad_g40
05:43:41 215  ,cad_g41
05:43:41 216  ,chf_g00
05:43:41 217  ,chf_g01
05:43:41 218  ,chf_g02
05:43:41 219  ,chf_g03
05:43:41 220  ,chf_g04
05:43:41 221  ,chf_g05
05:43:41 222  ,chf_g06
05:43:41 223  ,chf_g07
05:43:41 224  ,chf_g08
05:43:41 225  ,chf_g09
05:43:41 226  ,chf_g10
05:43:41 227  ,chf_g11
05:43:41 228  ,chf_g12
05:43:41 229  ,chf_g13
05:43:41 230  ,chf_g14
05:43:41 231  ,chf_g15
05:43:41 232  ,chf_g16
05:43:41 233  ,chf_g17
05:43:41 234  ,chf_g18
05:43:41 235  ,chf_g19
05:43:41 236  ,chf_g20
05:43:41 237  ,chf_g21
05:43:41 238  ,chf_g22
05:43:41 239  ,chf_g23
05:43:41 240  ,chf_g24
05:43:41 241  ,chf_g25
05:43:41 242  ,chf_g26
05:43:41 243  ,chf_g27
05:43:41 244  ,chf_g28
05:43:41 245  ,chf_g29
05:43:41 246  ,chf_g30
05:43:41 247  ,chf_g31
05:43:41 248  ,chf_g32
05:43:41 249  ,chf_g33
05:43:41 250  ,chf_g34
05:43:41 251  ,chf_g35
05:43:41 252  ,chf_g36
05:43:41 253  ,chf_g37
05:43:41 254  ,chf_g38
05:43:41 255  ,chf_g39
05:43:41 256  ,chf_g40
05:43:41 257  ,chf_g41
05:43:41 258  FROM aud_ms6 m
05:43:41 259  WHERE gatt IN('nup','up')
05:43:41 260  AND 1+m.ydate < '&1'||' '||'&2'
05:43:41 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2011-01-03'||' '||'05:20:00'

View created.

Elapsed: 00:00:00.13
05:43:41 SQL> 
05:43:41 SQL> -- rpt
05:43:41 SQL> 
05:43:41 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt
05:43:41   2  
05:43:41 SQL> SELECT MAX(prdate) FROM bme
05:43:41   2  
05:43:41 SQL> -- Now build model from bme and score sme
05:43:41 SQL> @score1.sql
05:43:41 SQL> -- score1.sql
05:43:41 SQL> 
05:43:41 SQL> -- Does the 1st SVM score
05:43:41 SQL> 
05:43:41 SQL> -- Fill up svmc_apply_prep
05:43:41 SQL> @score.sql
05:43:41 SQL> --
05:43:41 SQL> -- score.sql
05:43:41 SQL> --
05:43:41 SQL> 
05:43:41 SQL> -- usage: score.sql
05:43:41 SQL> 
05:43:41 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
05:43:41 SQL> 
05:43:41 SQL> DEFINE target	= 'gatt'
05:43:41 SQL> DEFINE model_name = 'forex14'
05:43:41 SQL> DEFINE bldtable	= 'bme'
05:43:41 SQL> DEFINE scoretable = 'sme'
05:43:41 SQL> DEFINE case_id	= 'prdate'
05:43:41 SQL> 
05:43:41 SQL> -- Define a variable to help me exclude some columns from some data mining calls
05:43:41 SQL> DEFINE exclude1 = "'&target','&case_id'"
05:43:41 SQL> 
05:43:41 SQL> -- Builds an SVM model using pl/sql.
05:43:41 SQL> 
05:43:41 SQL> -----------------------------------------------------------------------
05:43:41 SQL> --			    BUILD THE MODEL
05:43:41 SQL> -----------------------------------------------------------------------
05:43:41 SQL> 
05:43:41 SQL> -- Cleanup old build data preparation objects for repeat runs
05:43:41 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.00
05:43:41 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
05:43:41 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.01
05:43:41 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.00
05:43:41 SQL> 
05:43:41 SQL> 
05:43:41 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
05:43:41 SQL> --
05:43:41 SQL> -- DROP	TABLE svmc_settings ;
05:43:41 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
05:43:41 SQL> -- DELETE svmc_settings;
05:43:41 SQL> 
05:43:41 SQL> -- The default classification algorithm is Naive Bayes. So override
05:43:41 SQL> -- this choice to SVM using a settings table.
05:43:41 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
05:43:41 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
05:43:41 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
05:43:41 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
05:43:41 SQL> -- models.
05:43:41 SQL> --
05:43:41 SQL> 
05:43:41 SQL> -- Do this once and then comment it out.
05:43:41 SQL> -- That makes script go faster.
05:43:41 SQL> -- BEGIN
05:43:41 SQL> -- -- Populate settings table
05:43:41 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
05:43:41 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
05:43:41 SQL> --
05:43:41 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
05:43:41 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
05:43:41 SQL> --
05:43:41 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
05:43:41 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
05:43:41 SQL> --   COMMIT;
05:43:41 SQL> -- END;
05:43:41 SQL> -- /
05:43:41 SQL> 
05:43:41 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
05:43:41 SQL> 
05:43:41 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
05:43:41   2  EXCEPTION WHEN OTHERS THEN NULL; END;
05:43:41   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.10
05:43:41 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
05:43:41   2  EXCEPTION WHEN OTHERS THEN NULL; END;
05:43:41   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
05:43:41 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
05:43:41   2  EXCEPTION WHEN OTHERS THEN NULL; END;
05:43:41   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.09
05:43:41 SQL> 
05:43:41 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
05:43:41   2  EXCEPTION WHEN OTHERS THEN NULL; END;
05:43:41   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
05:43:41 SQL> 
05:43:41 SQL> --------------------------------
05:43:41 SQL> -- PREPARE BUILD (TRAINING) DATA
05:43:41 SQL> --
05:43:41 SQL> 
05:43:41 SQL> -- 1. Missing Value treatment for all Predictors and
05:43:41 SQL> -- 2. Outlier Treatment and
05:43:41 SQL> -- 3. Normalization are performed below.
05:43:41 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
05:43:41 SQL> --    normalized here.
05:43:41 SQL> 
05:43:41 SQL> BEGIN
05:43:41   2  	-- Perform missing value treatment for all predictors
05:43:41   3  	-- create miss tables
05:43:41   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
05:43:41   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
05:43:41   6  
05:43:41   7  	-- populate miss tables
05:43:41   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
05:43:41   9  	  miss_table_name => 'svmc_miss_num',
05:43:41  10  	  data_table_name => '&bldtable',
05:43:41  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
05:43:41  12  
05:43:41  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
05:43:41  14  	  miss_table_name => 'svmc_miss_cat',
05:43:41  15  	  data_table_name => '&bldtable',
05:43:41  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
05:43:41  17  
05:43:41  18  	-- xform input data to replace missing values
05:43:41  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
05:43:41  20  	  miss_table_name => 'svmc_miss_num',
05:43:41  21  	  data_table_name => '&bldtable',
05:43:41  22  	  xform_view_name => 'xformed_build_miss_num');
05:43:41  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
05:43:41  24  	  miss_table_name => 'svmc_miss_cat',
05:43:41  25  	  data_table_name => '&bldtable',
05:43:41  26  	  xform_view_name => 'xformed_build_miss_cat');
05:43:41  27  
05:43:41  28  	-- Perform outlier treatment.
05:43:41  29  	-- create clip table
05:43:41  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
05:43:41  31  
05:43:41  32  	-- populate clip table
05:43:41  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
05:43:41  34  	  clip_table_name => 'svmc_clip',
05:43:41  35  	  data_table_name => '&bldtable',
05:43:41  36  	  tail_frac	  => 0.025,
05:43:41  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
05:43:41  38  
05:43:41  39  	-- xform input data to winsorized data
05:43:41  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
05:43:41  41  	  clip_table_name => 'svmc_clip',
05:43:41  42  	  data_table_name => '&bldtable',
05:43:41  43  	  xform_view_name => 'svmc_winsor');
05:43:41  44  
05:43:41  45  	-- create normalization table
05:43:41  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
05:43:41  47  
05:43:41  48  	-- populate normalization table based on winsorized data
05:43:41  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
05:43:41  50  	  norm_table_name => 'svmc_norm',
05:43:41  51  	  data_table_name => 'svmc_winsor',
05:43:41  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
05:43:41  53  
05:43:41  54  	-- normalize the original data
05:43:41  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
05:43:41  56  	  norm_table_name => 'svmc_norm',
05:43:41  57  	  data_table_name => '&bldtable',
05:43:41  58  	  xform_view_name => 'svmc_build_prep');
05:43:41  59  END;
05:43:41  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:18.62
05:44:00 SQL> 
05:44:00 SQL> ---------------------
05:44:00 SQL> -- CREATE A NEW MODEL
05:44:00 SQL> --
05:44:00 SQL> -- Cleanup old model with the same name for repeat runs
05:44:00 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
05:44:00   2  EXCEPTION WHEN OTHERS THEN NULL; END;
05:44:00   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.62
05:44:01 SQL> 
05:44:01 SQL> -- Build a new SVM Model
05:44:01 SQL> BEGIN
05:44:01   2  	DBMS_DATA_MINING.CREATE_MODEL(
05:44:01   3  	  model_name	      => '&model_name',
05:44:01   4  	  mining_function     => dbms_data_mining.classification,
05:44:01   5  	  data_table_name     => 'svmc_build_prep',
05:44:01   6  	  case_id_column_name => '&case_id',
05:44:01   7  	  target_column_name  => '&target',
05:44:01   8  	  settings_table_name => 'svmc_settings');
05:44:01   9  END;
05:44:01  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:31.79
05:44:32 SQL> 
05:44:32 SQL> -----------------------------------------------------------------------
05:44:32 SQL> --			       APPLY/score THE MODEL
05:44:32 SQL> -----------------------------------------------------------------------
05:44:32 SQL> 
05:44:32 SQL> -- Cleanup old scoring data preparation objects for repeat runs
05:44:32 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
05:44:32   2  EXCEPTION WHEN OTHERS THEN NULL; END;
05:44:32   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
05:44:32 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
05:44:32   2  EXCEPTION WHEN OTHERS THEN NULL; END;
05:44:32   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.09
05:44:33 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
05:44:33   2  EXCEPTION WHEN OTHERS THEN NULL; END;
05:44:33   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
05:44:33 SQL> -----------------------
05:44:33 SQL> -- PREPARE SCORING DATA
05:44:33 SQL> --
05:44:33 SQL> -- If the data for model creation has been prepared, then the data
05:44:33 SQL> -- to be scored using the model must be prepared in the same manner
05:44:33 SQL> -- in order to obtain meaningful results.
05:44:33 SQL> --
05:44:33 SQL> -- 1. Missing Value treatment for all Predictors and
05:44:33 SQL> -- 2. Normalization
05:44:33 SQL> -- No outlier treatment will be performed during test and apply. The
05:44:33 SQL> -- normalization step is sufficient, since the normalization parameters
05:44:33 SQL> -- already capture the effects of outlier treatment done with build data.
05:44:33 SQL> --
05:44:33 SQL> BEGIN
05:44:33   2  	-- Xform Test data to replace missing values
05:44:33   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
05:44:33   4  	  miss_table_name => 'svmc_miss_num',
05:44:33   5  	  data_table_name => '&scoretable',
05:44:33   6  	  xform_view_name => 'xformed_apply_miss_num');
05:44:33   7  
05:44:33   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
05:44:33   9  	  miss_table_name => 'svmc_miss_cat',
05:44:33  10  	  data_table_name => '&scoretable',
05:44:33  11  	  xform_view_name => 'xformed_apply_miss_cat');
05:44:33  12  
05:44:33  13  	-- Normalize the data to be scored
05:44:33  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
05:44:33  15  	  norm_table_name => 'svmc_norm',
05:44:33  16  	  data_table_name => '&scoretable',
05:44:33  17  	  xform_view_name => 'svmc_apply_prep');
05:44:33  18  END;
05:44:33  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.31
05:44:34 SQL> 
05:44:34 SQL> -- Use same model_name used in score.sql
05:44:34 SQL> DEFINE model_name = 'forex14'
05:44:34 SQL> 
05:44:34 SQL> -- CREATE TABLE fxscores6 (prdate VARCHAR2(30),score NUMBER,rundate DATE,pair VARCHAR2(8),ydate DATE);
05:44:34 SQL> 
05:44:34 SQL> DELETE fxscores6 WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.04
05:44:34 SQL> 
05:44:34 SQL> INSERT INTO fxscores6 (prdate,score,rundate,pair,ydate)
05:44:34   2  SELECT
05:44:34   3  prdate
05:44:34   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
05:44:34   5  ,sysdate
05:44:34   6  ,SUBSTR(prdate,1,3)pair
05:44:34   7  ,SUBSTR(prdate,4,19)ydate
05:44:34   8  FROM svmc_apply_prep
05:44:34   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.22
05:44:34 SQL> @aud_score1day.sql  2011-01-03 05:25:00
05:44:34 SQL> --
05:44:34 SQL> -- aud_score1day.sql
05:44:34 SQL> --
05:44:34 SQL> 
05:44:34 SQL> CREATE OR REPLACE VIEW sme AS
05:44:34   2  SELECT
05:44:34   3  'aud'||m.ydate prdate
05:44:34   4  ,NULL gatt
05:44:34   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
05:44:34   6  ,eur_g00
05:44:34   7  ,eur_g01
05:44:34   8  ,eur_g02
05:44:34   9  ,eur_g03
05:44:34  10  ,eur_g04
05:44:34  11  ,eur_g05
05:44:34  12  ,eur_g06
05:44:34  13  ,eur_g07
05:44:34  14  ,eur_g08
05:44:34  15  ,eur_g09
05:44:34  16  ,eur_g10
05:44:34  17  ,eur_g11
05:44:34  18  ,eur_g12
05:44:34  19  ,eur_g13
05:44:34  20  ,eur_g14
05:44:34  21  ,eur_g15
05:44:34  22  ,eur_g16
05:44:34  23  ,eur_g17
05:44:34  24  ,eur_g18
05:44:34  25  ,eur_g19
05:44:34  26  ,eur_g20
05:44:34  27  ,eur_g21
05:44:34  28  ,eur_g22
05:44:34  29  ,eur_g23
05:44:34  30  ,eur_g24
05:44:34  31  ,eur_g25
05:44:34  32  ,eur_g26
05:44:34  33  ,eur_g27
05:44:34  34  ,eur_g28
05:44:34  35  ,eur_g29
05:44:34  36  ,eur_g30
05:44:34  37  ,eur_g31
05:44:34  38  ,eur_g32
05:44:34  39  ,eur_g33
05:44:34  40  ,eur_g34
05:44:34  41  ,eur_g35
05:44:34  42  ,eur_g36
05:44:34  43  ,eur_g37
05:44:34  44  ,eur_g38
05:44:34  45  ,eur_g39
05:44:34  46  ,eur_g40
05:44:34  47  ,eur_g41
05:44:34  48  ,aud_g00
05:44:34  49  ,aud_g01
05:44:34  50  ,aud_g02
05:44:34  51  ,aud_g03
05:44:34  52  ,aud_g04
05:44:34  53  ,aud_g05
05:44:34  54  ,aud_g06
05:44:34  55  ,aud_g07
05:44:34  56  ,aud_g08
05:44:34  57  ,aud_g09
05:44:34  58  ,aud_g10
05:44:34  59  ,aud_g11
05:44:34  60  ,aud_g12
05:44:34  61  ,aud_g13
05:44:34  62  ,aud_g14
05:44:34  63  ,aud_g15
05:44:34  64  ,aud_g16
05:44:34  65  ,aud_g17
05:44:34  66  ,aud_g18
05:44:34  67  ,aud_g19
05:44:34  68  ,aud_g20
05:44:34  69  ,aud_g21
05:44:34  70  ,aud_g22
05:44:34  71  ,aud_g23
05:44:34  72  ,aud_g24
05:44:34  73  ,aud_g25
05:44:34  74  ,aud_g26
05:44:34  75  ,aud_g27
05:44:34  76  ,aud_g28
05:44:34  77  ,aud_g29
05:44:34  78  ,aud_g30
05:44:34  79  ,aud_g31
05:44:34  80  ,aud_g32
05:44:34  81  ,aud_g33
05:44:34  82  ,aud_g34
05:44:34  83  ,aud_g35
05:44:34  84  ,aud_g36
05:44:34  85  ,aud_g37
05:44:34  86  ,aud_g38
05:44:34  87  ,aud_g39
05:44:34  88  ,aud_g40
05:44:34  89  ,aud_g41
05:44:34  90  ,gbp_g00
05:44:34  91  ,gbp_g01
05:44:34  92  ,gbp_g02
05:44:34  93  ,gbp_g03
05:44:34  94  ,gbp_g04
05:44:34  95  ,gbp_g05
05:44:34  96  ,gbp_g06
05:44:34  97  ,gbp_g07
05:44:34  98  ,gbp_g08
05:44:34  99  ,gbp_g09
05:44:34 100  ,gbp_g10
05:44:34 101  ,gbp_g11
05:44:34 102  ,gbp_g12
05:44:34 103  ,gbp_g13
05:44:34 104  ,gbp_g14
05:44:34 105  ,gbp_g15
05:44:34 106  ,gbp_g16
05:44:34 107  ,gbp_g17
05:44:34 108  ,gbp_g18
05:44:34 109  ,gbp_g19
05:44:34 110  ,gbp_g20
05:44:34 111  ,gbp_g21
05:44:34 112  ,gbp_g22
05:44:34 113  ,gbp_g23
05:44:34 114  ,gbp_g24
05:44:34 115  ,gbp_g25
05:44:34 116  ,gbp_g26
05:44:34 117  ,gbp_g27
05:44:34 118  ,gbp_g28
05:44:34 119  ,gbp_g29
05:44:34 120  ,gbp_g30
05:44:34 121  ,gbp_g31
05:44:34 122  ,gbp_g32
05:44:34 123  ,gbp_g33
05:44:34 124  ,gbp_g34
05:44:34 125  ,gbp_g35
05:44:34 126  ,gbp_g36
05:44:34 127  ,gbp_g37
05:44:34 128  ,gbp_g38
05:44:34 129  ,gbp_g39
05:44:34 130  ,gbp_g40
05:44:34 131  ,gbp_g41
05:44:34 132  ,jpy_g00
05:44:34 133  ,jpy_g01
05:44:34 134  ,jpy_g02
05:44:34 135  ,jpy_g03
05:44:34 136  ,jpy_g04
05:44:34 137  ,jpy_g05
05:44:34 138  ,jpy_g06
05:44:34 139  ,jpy_g07
05:44:34 140  ,jpy_g08
05:44:34 141  ,jpy_g09
05:44:34 142  ,jpy_g10
05:44:34 143  ,jpy_g11
05:44:34 144  ,jpy_g12
05:44:34 145  ,jpy_g13
05:44:34 146  ,jpy_g14
05:44:34 147  ,jpy_g15
05:44:34 148  ,jpy_g16
05:44:34 149  ,jpy_g17
05:44:34 150  ,jpy_g18
05:44:34 151  ,jpy_g19
05:44:34 152  ,jpy_g20
05:44:34 153  ,jpy_g21
05:44:34 154  ,jpy_g22
05:44:34 155  ,jpy_g23
05:44:34 156  ,jpy_g24
05:44:34 157  ,jpy_g25
05:44:34 158  ,jpy_g26
05:44:34 159  ,jpy_g27
05:44:34 160  ,jpy_g28
05:44:34 161  ,jpy_g29
05:44:34 162  ,jpy_g30
05:44:34 163  ,jpy_g31
05:44:34 164  ,jpy_g32
05:44:34 165  ,jpy_g33
05:44:34 166  ,jpy_g34
05:44:34 167  ,jpy_g35
05:44:34 168  ,jpy_g36
05:44:34 169  ,jpy_g37
05:44:34 170  ,jpy_g38
05:44:34 171  ,jpy_g39
05:44:34 172  ,jpy_g40
05:44:34 173  ,jpy_g41
05:44:34 174  ,cad_g00
05:44:34 175  ,cad_g01
05:44:34 176  ,cad_g02
05:44:34 177  ,cad_g03
05:44:34 178  ,cad_g04
05:44:34 179  ,cad_g05
05:44:34 180  ,cad_g06
05:44:34 181  ,cad_g07
05:44:34 182  ,cad_g08
05:44:34 183  ,cad_g09
05:44:34 184  ,cad_g10
05:44:34 185  ,cad_g11
05:44:34 186  ,cad_g12
05:44:34 187  ,cad_g13
05:44:34 188  ,cad_g14
05:44:34 189  ,cad_g15
05:44:34 190  ,cad_g16
05:44:34 191  ,cad_g17
05:44:34 192  ,cad_g18
05:44:34 193  ,cad_g19
05:44:34 194  ,cad_g20
05:44:34 195  ,cad_g21
05:44:34 196  ,cad_g22
05:44:34 197  ,cad_g23
05:44:34 198  ,cad_g24
05:44:34 199  ,cad_g25
05:44:34 200  ,cad_g26
05:44:34 201  ,cad_g27
05:44:34 202  ,cad_g28
05:44:34 203  ,cad_g29
05:44:34 204  ,cad_g30
05:44:34 205  ,cad_g31
05:44:34 206  ,cad_g32
05:44:34 207  ,cad_g33
05:44:34 208  ,cad_g34
05:44:34 209  ,cad_g35
05:44:34 210  ,cad_g36
05:44:34 211  ,cad_g37
05:44:34 212  ,cad_g38
05:44:34 213  ,cad_g39
05:44:34 214  ,cad_g40
05:44:34 215  ,cad_g41
05:44:34 216  ,chf_g00
05:44:34 217  ,chf_g01
05:44:34 218  ,chf_g02
05:44:34 219  ,chf_g03
05:44:34 220  ,chf_g04
05:44:34 221  ,chf_g05
05:44:34 222  ,chf_g06
05:44:34 223  ,chf_g07
05:44:34 224  ,chf_g08
05:44:34 225  ,chf_g09
05:44:34 226  ,chf_g10
05:44:34 227  ,chf_g11
05:44:34 228  ,chf_g12
05:44:34 229  ,chf_g13
05:44:34 230  ,chf_g14
05:44:34 231  ,chf_g15
05:44:34 232  ,chf_g16
05:44:34 233  ,chf_g17
05:44:34 234  ,chf_g18
05:44:34 235  ,chf_g19
05:44:34 236  ,chf_g20
05:44:34 237  ,chf_g21
05:44:34 238  ,chf_g22
05:44:34 239  ,chf_g23
05:44:34 240  ,chf_g24
05:44:34 241  ,chf_g25
05:44:34 242  ,chf_g26
05:44:34 243  ,chf_g27
05:44:34 244  ,chf_g28
05:44:34 245  ,chf_g29
05:44:34 246  ,chf_g30
05:44:34 247  ,chf_g31
05:44:34 248  ,chf_g32
05:44:34 249  ,chf_g33
05:44:34 250  ,chf_g34
05:44:34 251  ,chf_g35
05:44:34 252  ,chf_g36
05:44:34 253  ,chf_g37
05:44:34 254  ,chf_g38
05:44:34 255  ,chf_g39
05:44:34 256  ,chf_g40
05:44:34 257  ,chf_g41
05:44:34 258  FROM aud_ms6 m
05:44:34 259  WHERE m.ydate = '&1'||' '||'&2'
05:44:34 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2011-01-03'||' '||'05:25:00'

View created.

Elapsed: 00:00:00.12
05:44:34 SQL> 
05:44:34 SQL> -- rpt
05:44:34 SQL> -- We should see just 1 row:
05:44:34 SQL> 
05:44:34 SQL> SELECT COUNT(prdate) FROM sme
05:44:34   2  
05:44:34 SQL> -- Build the model:
05:44:34 SQL> CREATE OR REPLACE VIEW bme AS
05:44:34   2  SELECT
05:44:34   3  'aud'||m.ydate prdate
05:44:34   4  ,gatt
05:44:34   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
05:44:34   6  ,eur_g00
05:44:34   7  ,eur_g01
05:44:34   8  ,eur_g02
05:44:34   9  ,eur_g03
05:44:34  10  ,eur_g04
05:44:34  11  ,eur_g05
05:44:34  12  ,eur_g06
05:44:34  13  ,eur_g07
05:44:34  14  ,eur_g08
05:44:34  15  ,eur_g09
05:44:34  16  ,eur_g10
05:44:34  17  ,eur_g11
05:44:34  18  ,eur_g12
05:44:34  19  ,eur_g13
05:44:34  20  ,eur_g14
05:44:34  21  ,eur_g15
05:44:34  22  ,eur_g16
05:44:34  23  ,eur_g17
05:44:34  24  ,eur_g18
05:44:34  25  ,eur_g19
05:44:34  26  ,eur_g20
05:44:34  27  ,eur_g21
05:44:34  28  ,eur_g22
05:44:34  29  ,eur_g23
05:44:34  30  ,eur_g24
05:44:34  31  ,eur_g25
05:44:34  32  ,eur_g26
05:44:34  33  ,eur_g27
05:44:34  34  ,eur_g28
05:44:34  35  ,eur_g29
05:44:34  36  ,eur_g30
05:44:34  37  ,eur_g31
05:44:34  38  ,eur_g32
05:44:34  39  ,eur_g33
05:44:34  40  ,eur_g34
05:44:34  41  ,eur_g35
05:44:34  42  ,eur_g36
05:44:34  43  ,eur_g37
05:44:34  44  ,eur_g38
05:44:34  45  ,eur_g39
05:44:34  46  ,eur_g40
05:44:34  47  ,eur_g41
05:44:34  48  ,aud_g00
05:44:34  49  ,aud_g01
05:44:34  50  ,aud_g02
05:44:34  51  ,aud_g03
05:44:34  52  ,aud_g04
05:44:34  53  ,aud_g05
05:44:34  54  ,aud_g06
05:44:34  55  ,aud_g07
05:44:34  56  ,aud_g08
05:44:34  57  ,aud_g09
05:44:34  58  ,aud_g10
05:44:34  59  ,aud_g11
05:44:34  60  ,aud_g12
05:44:34  61  ,aud_g13
05:44:34  62  ,aud_g14
05:44:34  63  ,aud_g15
05:44:34  64  ,aud_g16
05:44:34  65  ,aud_g17
05:44:34  66  ,aud_g18
05:44:34  67  ,aud_g19
05:44:34  68  ,aud_g20
05:44:34  69  ,aud_g21
05:44:34  70  ,aud_g22
05:44:34  71  ,aud_g23
05:44:34  72  ,aud_g24
05:44:34  73  ,aud_g25
05:44:34  74  ,aud_g26
05:44:34  75  ,aud_g27
05:44:34  76  ,aud_g28
05:44:34  77  ,aud_g29
05:44:34  78  ,aud_g30
05:44:34  79  ,aud_g31
05:44:34  80  ,aud_g32
05:44:34  81  ,aud_g33
05:44:34  82  ,aud_g34
05:44:34  83  ,aud_g35
05:44:34  84  ,aud_g36
05:44:34  85  ,aud_g37
05:44:34  86  ,aud_g38
05:44:34  87  ,aud_g39
05:44:34  88  ,aud_g40
05:44:34  89  ,aud_g41
05:44:34  90  ,gbp_g00
05:44:34  91  ,gbp_g01
05:44:34  92  ,gbp_g02
05:44:34  93  ,gbp_g03
05:44:34  94  ,gbp_g04
05:44:34  95  ,gbp_g05
05:44:34  96  ,gbp_g06
05:44:34  97  ,gbp_g07
05:44:34  98  ,gbp_g08
05:44:34  99  ,gbp_g09
05:44:34 100  ,gbp_g10
05:44:34 101  ,gbp_g11
05:44:34 102  ,gbp_g12
05:44:34 103  ,gbp_g13
05:44:34 104  ,gbp_g14
05:44:34 105  ,gbp_g15
05:44:34 106  ,gbp_g16
05:44:34 107  ,gbp_g17
05:44:34 108  ,gbp_g18
05:44:34 109  ,gbp_g19
05:44:34 110  ,gbp_g20
05:44:34 111  ,gbp_g21
05:44:34 112  ,gbp_g22
05:44:34 113  ,gbp_g23
05:44:34 114  ,gbp_g24
05:44:34 115  ,gbp_g25
05:44:34 116  ,gbp_g26
05:44:34 117  ,gbp_g27
05:44:34 118  ,gbp_g28
05:44:34 119  ,gbp_g29
05:44:34 120  ,gbp_g30
05:44:34 121  ,gbp_g31
05:44:34 122  ,gbp_g32
05:44:34 123  ,gbp_g33
05:44:34 124  ,gbp_g34
05:44:34 125  ,gbp_g35
05:44:34 126  ,gbp_g36
05:44:34 127  ,gbp_g37
05:44:34 128  ,gbp_g38
05:44:34 129  ,gbp_g39
05:44:34 130  ,gbp_g40
05:44:34 131  ,gbp_g41
05:44:34 132  ,jpy_g00
05:44:34 133  ,jpy_g01
05:44:34 134  ,jpy_g02
05:44:34 135  ,jpy_g03
05:44:34 136  ,jpy_g04
05:44:34 137  ,jpy_g05
05:44:34 138  ,jpy_g06
05:44:34 139  ,jpy_g07
05:44:34 140  ,jpy_g08
05:44:34 141  ,jpy_g09
05:44:34 142  ,jpy_g10
05:44:34 143  ,jpy_g11
05:44:34 144  ,jpy_g12
05:44:34 145  ,jpy_g13
05:44:34 146  ,jpy_g14
05:44:34 147  ,jpy_g15
05:44:34 148  ,jpy_g16
05:44:34 149  ,jpy_g17
05:44:34 150  ,jpy_g18
05:44:34 151  ,jpy_g19
05:44:34 152  ,jpy_g20
05:44:34 153  ,jpy_g21
05:44:34 154  ,jpy_g22
05:44:34 155  ,jpy_g23
05:44:34 156  ,jpy_g24
05:44:34 157  ,jpy_g25
05:44:34 158  ,jpy_g26
05:44:34 159  ,jpy_g27
05:44:34 160  ,jpy_g28
05:44:34 161  ,jpy_g29
05:44:34 162  ,jpy_g30
05:44:34 163  ,jpy_g31
05:44:34 164  ,jpy_g32
05:44:34 165  ,jpy_g33
05:44:34 166  ,jpy_g34
05:44:34 167  ,jpy_g35
05:44:34 168  ,jpy_g36
05:44:34 169  ,jpy_g37
05:44:34 170  ,jpy_g38
05:44:34 171  ,jpy_g39
05:44:34 172  ,jpy_g40
05:44:34 173  ,jpy_g41
05:44:34 174  ,cad_g00
05:44:34 175  ,cad_g01
05:44:34 176  ,cad_g02
05:44:34 177  ,cad_g03
05:44:34 178  ,cad_g04
05:44:34 179  ,cad_g05
05:44:34 180  ,cad_g06
05:44:34 181  ,cad_g07
05:44:34 182  ,cad_g08
05:44:34 183  ,cad_g09
05:44:34 184  ,cad_g10
05:44:34 185  ,cad_g11
05:44:34 186  ,cad_g12
05:44:34 187  ,cad_g13
05:44:34 188  ,cad_g14
05:44:34 189  ,cad_g15
05:44:34 190  ,cad_g16
05:44:34 191  ,cad_g17
05:44:34 192  ,cad_g18
05:44:34 193  ,cad_g19
05:44:34 194  ,cad_g20
05:44:34 195  ,cad_g21
05:44:34 196  ,cad_g22
05:44:34 197  ,cad_g23
05:44:34 198  ,cad_g24
05:44:34 199  ,cad_g25
05:44:34 200  ,cad_g26
05:44:34 201  ,cad_g27
05:44:34 202  ,cad_g28
05:44:34 203  ,cad_g29
05:44:34 204  ,cad_g30
05:44:34 205  ,cad_g31
05:44:34 206  ,cad_g32
05:44:34 207  ,cad_g33
05:44:34 208  ,cad_g34
05:44:34 209  ,cad_g35
05:44:34 210  ,cad_g36
05:44:34 211  ,cad_g37
05:44:34 212  ,cad_g38
05:44:34 213  ,cad_g39
05:44:34 214  ,cad_g40
05:44:34 215  ,cad_g41
05:44:34 216  ,chf_g00
05:44:34 217  ,chf_g01
05:44:34 218  ,chf_g02
05:44:34 219  ,chf_g03
05:44:34 220  ,chf_g04
05:44:34 221  ,chf_g05
05:44:34 222  ,chf_g06
05:44:34 223  ,chf_g07
05:44:34 224  ,chf_g08
05:44:34 225  ,chf_g09
05:44:34 226  ,chf_g10
05:44:34 227  ,chf_g11
05:44:34 228  ,chf_g12
05:44:34 229  ,chf_g13
05:44:34 230  ,chf_g14
05:44:34 231  ,chf_g15
05:44:34 232  ,chf_g16
05:44:34 233  ,chf_g17
05:44:34 234  ,chf_g18
05:44:34 235  ,chf_g19
05:44:34 236  ,chf_g20
05:44:34 237  ,chf_g21
05:44:34 238  ,chf_g22
05:44:34 239  ,chf_g23
05:44:34 240  ,chf_g24
05:44:34 241  ,chf_g25
05:44:34 242  ,chf_g26
05:44:34 243  ,chf_g27
05:44:34 244  ,chf_g28
05:44:34 245  ,chf_g29
05:44:34 246  ,chf_g30
05:44:34 247  ,chf_g31
05:44:34 248  ,chf_g32
05:44:34 249  ,chf_g33
05:44:34 250  ,chf_g34
05:44:34 251  ,chf_g35
05:44:34 252  ,chf_g36
05:44:34 253  ,chf_g37
05:44:34 254  ,chf_g38
05:44:34 255  ,chf_g39
05:44:34 256  ,chf_g40
05:44:34 257  ,chf_g41
05:44:34 258  FROM aud_ms6 m
05:44:34 259  WHERE gatt IN('nup','up')
05:44:34 260  AND 1+m.ydate < '&1'||' '||'&2'
05:44:34 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2011-01-03'||' '||'05:25:00'

View created.

Elapsed: 00:00:00.12
05:44:34 SQL> 
05:44:34 SQL> -- rpt
05:44:34 SQL> 
05:44:34 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt
05:44:34   2  
05:44:34 SQL> SELECT MAX(prdate) FROM bme
05:44:34   2  
05:44:34 SQL> -- Now build model from bme and score sme
05:44:34 SQL> @score1.sql
05:44:34 SQL> -- score1.sql
05:44:34 SQL> 
05:44:34 SQL> -- Does the 1st SVM score
05:44:34 SQL> 
05:44:34 SQL> -- Fill up svmc_apply_prep
05:44:34 SQL> @score.sql
05:44:34 SQL> --
05:44:34 SQL> -- score.sql
05:44:34 SQL> --
05:44:34 SQL> 
05:44:34 SQL> -- usage: score.sql
05:44:34 SQL> 
05:44:34 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
05:44:34 SQL> 
05:44:34 SQL> DEFINE target	= 'gatt'
05:44:34 SQL> DEFINE model_name = 'forex14'
05:44:34 SQL> DEFINE bldtable	= 'bme'
05:44:34 SQL> DEFINE scoretable = 'sme'
05:44:34 SQL> DEFINE case_id	= 'prdate'
05:44:34 SQL> 
05:44:34 SQL> -- Define a variable to help me exclude some columns from some data mining calls
05:44:34 SQL> DEFINE exclude1 = "'&target','&case_id'"
05:44:34 SQL> 
05:44:34 SQL> -- Builds an SVM model using pl/sql.
05:44:34 SQL> 
05:44:34 SQL> -----------------------------------------------------------------------
05:44:34 SQL> --			    BUILD THE MODEL
05:44:34 SQL> -----------------------------------------------------------------------
05:44:34 SQL> 
05:44:34 SQL> -- Cleanup old build data preparation objects for repeat runs
05:44:34 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.00
05:44:34 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.01
05:44:34 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.00
05:44:34 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.01
05:44:34 SQL> 
05:44:34 SQL> 
05:44:34 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
05:44:34 SQL> --
05:44:34 SQL> -- DROP	TABLE svmc_settings ;
05:44:34 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
05:44:34 SQL> -- DELETE svmc_settings;
05:44:34 SQL> 
05:44:34 SQL> -- The default classification algorithm is Naive Bayes. So override
05:44:34 SQL> -- this choice to SVM using a settings table.
05:44:34 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
05:44:34 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
05:44:34 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
05:44:34 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
05:44:34 SQL> -- models.
05:44:34 SQL> --
05:44:34 SQL> 
05:44:34 SQL> -- Do this once and then comment it out.
05:44:34 SQL> -- That makes script go faster.
05:44:34 SQL> -- BEGIN
05:44:34 SQL> -- -- Populate settings table
05:44:34 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
05:44:34 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
05:44:34 SQL> --
05:44:34 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
05:44:34 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
05:44:34 SQL> --
05:44:34 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
05:44:34 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
05:44:34 SQL> --   COMMIT;
05:44:34 SQL> -- END;
05:44:34 SQL> -- /
05:44:34 SQL> 
05:44:34 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
05:44:34 SQL> 
05:44:34 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
05:44:34   2  EXCEPTION WHEN OTHERS THEN NULL; END;
05:44:34   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
05:44:35 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
05:44:35   2  EXCEPTION WHEN OTHERS THEN NULL; END;
05:44:35   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
05:44:35 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
05:44:35   2  EXCEPTION WHEN OTHERS THEN NULL; END;
05:44:35   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
05:44:35 SQL> 
05:44:35 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
05:44:35   2  EXCEPTION WHEN OTHERS THEN NULL; END;
05:44:35   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
05:44:35 SQL> 
05:44:35 SQL> --------------------------------
05:44:35 SQL> -- PREPARE BUILD (TRAINING) DATA
05:44:35 SQL> --
05:44:35 SQL> 
05:44:35 SQL> -- 1. Missing Value treatment for all Predictors and
05:44:35 SQL> -- 2. Outlier Treatment and
05:44:35 SQL> -- 3. Normalization are performed below.
05:44:35 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
05:44:35 SQL> --    normalized here.
05:44:35 SQL> 
05:44:35 SQL> BEGIN
05:44:35   2  	-- Perform missing value treatment for all predictors
05:44:35   3  	-- create miss tables
05:44:35   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
05:44:35   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
05:44:35   6  
05:44:35   7  	-- populate miss tables
05:44:35   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
05:44:35   9  	  miss_table_name => 'svmc_miss_num',
05:44:35  10  	  data_table_name => '&bldtable',
05:44:35  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
05:44:35  12  
05:44:35  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
05:44:35  14  	  miss_table_name => 'svmc_miss_cat',
05:44:35  15  	  data_table_name => '&bldtable',
05:44:35  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
05:44:35  17  
05:44:35  18  	-- xform input data to replace missing values
05:44:35  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
05:44:35  20  	  miss_table_name => 'svmc_miss_num',
05:44:35  21  	  data_table_name => '&bldtable',
05:44:35  22  	  xform_view_name => 'xformed_build_miss_num');
05:44:35  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
05:44:35  24  	  miss_table_name => 'svmc_miss_cat',
05:44:35  25  	  data_table_name => '&bldtable',
05:44:35  26  	  xform_view_name => 'xformed_build_miss_cat');
05:44:35  27  
05:44:35  28  	-- Perform outlier treatment.
05:44:35  29  	-- create clip table
05:44:35  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
05:44:35  31  
05:44:35  32  	-- populate clip table
05:44:35  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
05:44:35  34  	  clip_table_name => 'svmc_clip',
05:44:35  35  	  data_table_name => '&bldtable',
05:44:35  36  	  tail_frac	  => 0.025,
05:44:35  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
05:44:35  38  
05:44:35  39  	-- xform input data to winsorized data
05:44:35  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
05:44:35  41  	  clip_table_name => 'svmc_clip',
05:44:35  42  	  data_table_name => '&bldtable',
05:44:35  43  	  xform_view_name => 'svmc_winsor');
05:44:35  44  
05:44:35  45  	-- create normalization table
05:44:35  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
05:44:35  47  
05:44:35  48  	-- populate normalization table based on winsorized data
05:44:35  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
05:44:35  50  	  norm_table_name => 'svmc_norm',
05:44:35  51  	  data_table_name => 'svmc_winsor',
05:44:35  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
05:44:35  53  
05:44:35  54  	-- normalize the original data
05:44:35  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
05:44:35  56  	  norm_table_name => 'svmc_norm',
05:44:35  57  	  data_table_name => '&bldtable',
05:44:35  58  	  xform_view_name => 'svmc_build_prep');
05:44:35  59  END;
05:44:35  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:18.30
05:44:53 SQL> 
05:44:53 SQL> ---------------------
05:44:53 SQL> -- CREATE A NEW MODEL
05:44:53 SQL> --
05:44:53 SQL> -- Cleanup old model with the same name for repeat runs
05:44:53 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
05:44:53   2  EXCEPTION WHEN OTHERS THEN NULL; END;
05:44:53   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.05
05:44:54 SQL> 
05:44:54 SQL> -- Build a new SVM Model
05:44:54 SQL> BEGIN
05:44:54   2  	DBMS_DATA_MINING.CREATE_MODEL(
05:44:54   3  	  model_name	      => '&model_name',
05:44:54   4  	  mining_function     => dbms_data_mining.classification,
05:44:54   5  	  data_table_name     => 'svmc_build_prep',
05:44:54   6  	  case_id_column_name => '&case_id',
05:44:54   7  	  target_column_name  => '&target',
05:44:54   8  	  settings_table_name => 'svmc_settings');
05:44:54   9  END;
05:44:54  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:31.20
05:45:25 SQL> 
05:45:25 SQL> -----------------------------------------------------------------------
05:45:25 SQL> --			       APPLY/score THE MODEL
05:45:25 SQL> -----------------------------------------------------------------------
05:45:25 SQL> 
05:45:25 SQL> -- Cleanup old scoring data preparation objects for repeat runs
05:45:25 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
05:45:25   2  EXCEPTION WHEN OTHERS THEN NULL; END;
05:45:25   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
05:45:25 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
05:45:25   2  EXCEPTION WHEN OTHERS THEN NULL; END;
05:45:25   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
05:45:25 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
05:45:25   2  EXCEPTION WHEN OTHERS THEN NULL; END;
05:45:25   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
05:45:25 SQL> -----------------------
05:45:25 SQL> -- PREPARE SCORING DATA
05:45:25 SQL> --
05:45:25 SQL> -- If the data for model creation has been prepared, then the data
05:45:25 SQL> -- to be scored using the model must be prepared in the same manner
05:45:25 SQL> -- in order to obtain meaningful results.
05:45:25 SQL> --
05:45:25 SQL> -- 1. Missing Value treatment for all Predictors and
05:45:25 SQL> -- 2. Normalization
05:45:25 SQL> -- No outlier treatment will be performed during test and apply. The
05:45:25 SQL> -- normalization step is sufficient, since the normalization parameters
05:45:25 SQL> -- already capture the effects of outlier treatment done with build data.
05:45:25 SQL> --
05:45:25 SQL> BEGIN
05:45:25   2  	-- Xform Test data to replace missing values
05:45:25   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
05:45:25   4  	  miss_table_name => 'svmc_miss_num',
05:45:25   5  	  data_table_name => '&scoretable',
05:45:25   6  	  xform_view_name => 'xformed_apply_miss_num');
05:45:25   7  
05:45:25   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
05:45:25   9  	  miss_table_name => 'svmc_miss_cat',
05:45:25  10  	  data_table_name => '&scoretable',
05:45:25  11  	  xform_view_name => 'xformed_apply_miss_cat');
05:45:25  12  
05:45:25  13  	-- Normalize the data to be scored
05:45:25  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
05:45:25  15  	  norm_table_name => 'svmc_norm',
05:45:25  16  	  data_table_name => '&scoretable',
05:45:25  17  	  xform_view_name => 'svmc_apply_prep');
05:45:25  18  END;
05:45:25  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.23
05:45:27 SQL> 
05:45:27 SQL> -- Use same model_name used in score.sql
05:45:27 SQL> DEFINE model_name = 'forex14'
05:45:27 SQL> 
05:45:27 SQL> -- CREATE TABLE fxscores6 (prdate VARCHAR2(30),score NUMBER,rundate DATE,pair VARCHAR2(8),ydate DATE);
05:45:27 SQL> 
05:45:27 SQL> DELETE fxscores6 WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.03
05:45:27 SQL> 
05:45:27 SQL> INSERT INTO fxscores6 (prdate,score,rundate,pair,ydate)
05:45:27   2  SELECT
05:45:27   3  prdate
05:45:27   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
05:45:27   5  ,sysdate
05:45:27   6  ,SUBSTR(prdate,1,3)pair
05:45:27   7  ,SUBSTR(prdate,4,19)ydate
05:45:27   8  FROM svmc_apply_prep
05:45:27   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.22
05:45:27 SQL> @aud_score1day.sql  2011-01-03 05:30:00
05:45:27 SQL> --
05:45:27 SQL> -- aud_score1day.sql
05:45:27 SQL> --
05:45:27 SQL> 
05:45:27 SQL> CREATE OR REPLACE VIEW sme AS
05:45:27   2  SELECT
05:45:27   3  'aud'||m.ydate prdate
05:45:27   4  ,NULL gatt
05:45:27   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
05:45:27   6  ,eur_g00
05:45:27   7  ,eur_g01
05:45:27   8  ,eur_g02
05:45:27   9  ,eur_g03
05:45:27  10  ,eur_g04
05:45:27  11  ,eur_g05
05:45:27  12  ,eur_g06
05:45:27  13  ,eur_g07
05:45:27  14  ,eur_g08
05:45:27  15  ,eur_g09
05:45:27  16  ,eur_g10
05:45:27  17  ,eur_g11
05:45:27  18  ,eur_g12
05:45:27  19  ,eur_g13
05:45:27  20  ,eur_g14
05:45:27  21  ,eur_g15
05:45:27  22  ,eur_g16
05:45:27  23  ,eur_g17
05:45:27  24  ,eur_g18
05:45:27  25  ,eur_g19
05:45:27  26  ,eur_g20
05:45:27  27  ,eur_g21
05:45:27  28  ,eur_g22
05:45:27  29  ,eur_g23
05:45:27  30  ,eur_g24
05:45:27  31  ,eur_g25
05:45:27  32  ,eur_g26
05:45:27  33  ,eur_g27
05:45:27  34  ,eur_g28
05:45:27  35  ,eur_g29
05:45:27  36  ,eur_g30
05:45:27  37  ,eur_g31
05:45:27  38  ,eur_g32
05:45:27  39  ,eur_g33
05:45:27  40  ,eur_g34
05:45:27  41  ,eur_g35
05:45:27  42  ,eur_g36
05:45:27  43  ,eur_g37
05:45:27  44  ,eur_g38
05:45:27  45  ,eur_g39
05:45:27  46  ,eur_g40
05:45:27  47  ,eur_g41
05:45:27  48  ,aud_g00
05:45:27  49  ,aud_g01
05:45:27  50  ,aud_g02
05:45:27  51  ,aud_g03
05:45:27  52  ,aud_g04
05:45:27  53  ,aud_g05
05:45:27  54  ,aud_g06
05:45:27  55  ,aud_g07
05:45:27  56  ,aud_g08
05:45:27  57  ,aud_g09
05:45:27  58  ,aud_g10
05:45:27  59  ,aud_g11
05:45:27  60  ,aud_g12
05:45:27  61  ,aud_g13
05:45:27  62  ,aud_g14
05:45:27  63  ,aud_g15
05:45:27  64  ,aud_g16
05:45:27  65  ,aud_g17
05:45:27  66  ,aud_g18
05:45:27  67  ,aud_g19
05:45:27  68  ,aud_g20
05:45:27  69  ,aud_g21
05:45:27  70  ,aud_g22
05:45:27  71  ,aud_g23
05:45:27  72  ,aud_g24
05:45:27  73  ,aud_g25
05:45:27  74  ,aud_g26
05:45:27  75  ,aud_g27
05:45:27  76  ,aud_g28
05:45:27  77  ,aud_g29
05:45:27  78  ,aud_g30
05:45:27  79  ,aud_g31
05:45:27  80  ,aud_g32
05:45:27  81  ,aud_g33
05:45:27  82  ,aud_g34
05:45:27  83  ,aud_g35
05:45:27  84  ,aud_g36
05:45:27  85  ,aud_g37
05:45:27  86  ,aud_g38
05:45:27  87  ,aud_g39
05:45:27  88  ,aud_g40
05:45:27  89  ,aud_g41
05:45:27  90  ,gbp_g00
05:45:27  91  ,gbp_g01
05:45:27  92  ,gbp_g02
05:45:27  93  ,gbp_g03
05:45:27  94  ,gbp_g04
05:45:27  95  ,gbp_g05
05:45:27  96  ,gbp_g06
05:45:27  97  ,gbp_g07
05:45:27  98  ,gbp_g08
05:45:27  99  ,gbp_g09
05:45:27 100  ,gbp_g10
05:45:27 101  ,gbp_g11
05:45:27 102  ,gbp_g12
05:45:27 103  ,gbp_g13
05:45:27 104  ,gbp_g14
05:45:27 105  ,gbp_g15
05:45:27 106  ,gbp_g16
05:45:27 107  ,gbp_g17
05:45:27 108  ,gbp_g18
05:45:27 109  ,gbp_g19
05:45:27 110  ,gbp_g20
05:45:27 111  ,gbp_g21
05:45:27 112  ,gbp_g22
05:45:27 113  ,gbp_g23
05:45:27 114  ,gbp_g24
05:45:27 115  ,gbp_g25
05:45:27 116  ,gbp_g26
05:45:27 117  ,gbp_g27
05:45:27 118  ,gbp_g28
05:45:27 119  ,gbp_g29
05:45:27 120  ,gbp_g30
05:45:27 121  ,gbp_g31
05:45:27 122  ,gbp_g32
05:45:27 123  ,gbp_g33
05:45:27 124  ,gbp_g34
05:45:27 125  ,gbp_g35
05:45:27 126  ,gbp_g36
05:45:27 127  ,gbp_g37
05:45:27 128  ,gbp_g38
05:45:27 129  ,gbp_g39
05:45:27 130  ,gbp_g40
05:45:27 131  ,gbp_g41
05:45:27 132  ,jpy_g00
05:45:27 133  ,jpy_g01
05:45:27 134  ,jpy_g02
05:45:27 135  ,jpy_g03
05:45:27 136  ,jpy_g04
05:45:27 137  ,jpy_g05
05:45:27 138  ,jpy_g06
05:45:27 139  ,jpy_g07
05:45:27 140  ,jpy_g08
05:45:27 141  ,jpy_g09
05:45:27 142  ,jpy_g10
05:45:27 143  ,jpy_g11
05:45:27 144  ,jpy_g12
05:45:27 145  ,jpy_g13
05:45:27 146  ,jpy_g14
05:45:27 147  ,jpy_g15
05:45:27 148  ,jpy_g16
05:45:27 149  ,jpy_g17
05:45:27 150  ,jpy_g18
05:45:27 151  ,jpy_g19
05:45:27 152  ,jpy_g20
05:45:27 153  ,jpy_g21
05:45:27 154  ,jpy_g22
05:45:27 155  ,jpy_g23
05:45:27 156  ,jpy_g24
05:45:27 157  ,jpy_g25
05:45:27 158  ,jpy_g26
05:45:27 159  ,jpy_g27
05:45:27 160  ,jpy_g28
05:45:27 161  ,jpy_g29
05:45:27 162  ,jpy_g30
05:45:27 163  ,jpy_g31
05:45:27 164  ,jpy_g32
05:45:27 165  ,jpy_g33
05:45:27 166  ,jpy_g34
05:45:27 167  ,jpy_g35
05:45:27 168  ,jpy_g36
05:45:27 169  ,jpy_g37
05:45:27 170  ,jpy_g38
05:45:27 171  ,jpy_g39
05:45:27 172  ,jpy_g40
05:45:27 173  ,jpy_g41
05:45:27 174  ,cad_g00
05:45:27 175  ,cad_g01
05:45:27 176  ,cad_g02
05:45:27 177  ,cad_g03
05:45:27 178  ,cad_g04
05:45:27 179  ,cad_g05
05:45:27 180  ,cad_g06
05:45:27 181  ,cad_g07
05:45:27 182  ,cad_g08
05:45:27 183  ,cad_g09
05:45:27 184  ,cad_g10
05:45:27 185  ,cad_g11
05:45:27 186  ,cad_g12
05:45:27 187  ,cad_g13
05:45:27 188  ,cad_g14
05:45:27 189  ,cad_g15
05:45:27 190  ,cad_g16
05:45:27 191  ,cad_g17
05:45:27 192  ,cad_g18
05:45:27 193  ,cad_g19
05:45:27 194  ,cad_g20
05:45:27 195  ,cad_g21
05:45:27 196  ,cad_g22
05:45:27 197  ,cad_g23
05:45:27 198  ,cad_g24
05:45:27 199  ,cad_g25
05:45:27 200  ,cad_g26
05:45:27 201  ,cad_g27
05:45:27 202  ,cad_g28
05:45:27 203  ,cad_g29
05:45:27 204  ,cad_g30
05:45:27 205  ,cad_g31
05:45:27 206  ,cad_g32
05:45:27 207  ,cad_g33
05:45:27 208  ,cad_g34
05:45:27 209  ,cad_g35
05:45:27 210  ,cad_g36
05:45:27 211  ,cad_g37
05:45:27 212  ,cad_g38
05:45:27 213  ,cad_g39
05:45:27 214  ,cad_g40
05:45:27 215  ,cad_g41
05:45:27 216  ,chf_g00
05:45:27 217  ,chf_g01
05:45:27 218  ,chf_g02
05:45:27 219  ,chf_g03
05:45:27 220  ,chf_g04
05:45:27 221  ,chf_g05
05:45:27 222  ,chf_g06
05:45:27 223  ,chf_g07
05:45:27 224  ,chf_g08
05:45:27 225  ,chf_g09
05:45:27 226  ,chf_g10
05:45:27 227  ,chf_g11
05:45:27 228  ,chf_g12
05:45:27 229  ,chf_g13
05:45:27 230  ,chf_g14
05:45:27 231  ,chf_g15
05:45:27 232  ,chf_g16
05:45:27 233  ,chf_g17
05:45:27 234  ,chf_g18
05:45:27 235  ,chf_g19
05:45:27 236  ,chf_g20
05:45:27 237  ,chf_g21
05:45:27 238  ,chf_g22
05:45:27 239  ,chf_g23
05:45:27 240  ,chf_g24
05:45:27 241  ,chf_g25
05:45:27 242  ,chf_g26
05:45:27 243  ,chf_g27
05:45:27 244  ,chf_g28
05:45:27 245  ,chf_g29
05:45:27 246  ,chf_g30
05:45:27 247  ,chf_g31
05:45:27 248  ,chf_g32
05:45:27 249  ,chf_g33
05:45:27 250  ,chf_g34
05:45:27 251  ,chf_g35
05:45:27 252  ,chf_g36
05:45:27 253  ,chf_g37
05:45:27 254  ,chf_g38
05:45:27 255  ,chf_g39
05:45:27 256  ,chf_g40
05:45:27 257  ,chf_g41
05:45:27 258  FROM aud_ms6 m
05:45:27 259  WHERE m.ydate = '&1'||' '||'&2'
05:45:27 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2011-01-03'||' '||'05:30:00'

View created.

Elapsed: 00:00:00.12
05:45:27 SQL> 
05:45:27 SQL> -- rpt
05:45:27 SQL> -- We should see just 1 row:
05:45:27 SQL> 
05:45:27 SQL> SELECT COUNT(prdate) FROM sme
05:45:27   2  
05:45:27 SQL> -- Build the model:
05:45:27 SQL> CREATE OR REPLACE VIEW bme AS
05:45:27   2  SELECT
05:45:27   3  'aud'||m.ydate prdate
05:45:27   4  ,gatt
05:45:27   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
05:45:27   6  ,eur_g00
05:45:27   7  ,eur_g01
05:45:27   8  ,eur_g02
05:45:27   9  ,eur_g03
05:45:27  10  ,eur_g04
05:45:27  11  ,eur_g05
05:45:27  12  ,eur_g06
05:45:27  13  ,eur_g07
05:45:27  14  ,eur_g08
05:45:27  15  ,eur_g09
05:45:27  16  ,eur_g10
05:45:27  17  ,eur_g11
05:45:27  18  ,eur_g12
05:45:27  19  ,eur_g13
05:45:27  20  ,eur_g14
05:45:27  21  ,eur_g15
05:45:27  22  ,eur_g16
05:45:27  23  ,eur_g17
05:45:27  24  ,eur_g18
05:45:27  25  ,eur_g19
05:45:27  26  ,eur_g20
05:45:27  27  ,eur_g21
05:45:27  28  ,eur_g22
05:45:27  29  ,eur_g23
05:45:27  30  ,eur_g24
05:45:27  31  ,eur_g25
05:45:27  32  ,eur_g26
05:45:27  33  ,eur_g27
05:45:27  34  ,eur_g28
05:45:27  35  ,eur_g29
05:45:27  36  ,eur_g30
05:45:27  37  ,eur_g31
05:45:27  38  ,eur_g32
05:45:27  39  ,eur_g33
05:45:27  40  ,eur_g34
05:45:27  41  ,eur_g35
05:45:27  42  ,eur_g36
05:45:27  43  ,eur_g37
05:45:27  44  ,eur_g38
05:45:27  45  ,eur_g39
05:45:27  46  ,eur_g40
05:45:27  47  ,eur_g41
05:45:27  48  ,aud_g00
05:45:27  49  ,aud_g01
05:45:27  50  ,aud_g02
05:45:27  51  ,aud_g03
05:45:27  52  ,aud_g04
05:45:27  53  ,aud_g05
05:45:27  54  ,aud_g06
05:45:27  55  ,aud_g07
05:45:27  56  ,aud_g08
05:45:27  57  ,aud_g09
05:45:27  58  ,aud_g10
05:45:27  59  ,aud_g11
05:45:27  60  ,aud_g12
05:45:27  61  ,aud_g13
05:45:27  62  ,aud_g14
05:45:27  63  ,aud_g15
05:45:27  64  ,aud_g16
05:45:27  65  ,aud_g17
05:45:27  66  ,aud_g18
05:45:27  67  ,aud_g19
05:45:27  68  ,aud_g20
05:45:27  69  ,aud_g21
05:45:27  70  ,aud_g22
05:45:27  71  ,aud_g23
05:45:27  72  ,aud_g24
05:45:27  73  ,aud_g25
05:45:27  74  ,aud_g26
05:45:27  75  ,aud_g27
05:45:27  76  ,aud_g28
05:45:27  77  ,aud_g29
05:45:27  78  ,aud_g30
05:45:27  79  ,aud_g31
05:45:27  80  ,aud_g32
05:45:27  81  ,aud_g33
05:45:27  82  ,aud_g34
05:45:27  83  ,aud_g35
05:45:27  84  ,aud_g36
05:45:27  85  ,aud_g37
05:45:27  86  ,aud_g38
05:45:27  87  ,aud_g39
05:45:27  88  ,aud_g40
05:45:27  89  ,aud_g41
05:45:27  90  ,gbp_g00
05:45:27  91  ,gbp_g01
05:45:27  92  ,gbp_g02
05:45:27  93  ,gbp_g03
05:45:27  94  ,gbp_g04
05:45:27  95  ,gbp_g05
05:45:27  96  ,gbp_g06
05:45:27  97  ,gbp_g07
05:45:27  98  ,gbp_g08
05:45:27  99  ,gbp_g09
05:45:27 100  ,gbp_g10
05:45:27 101  ,gbp_g11
05:45:27 102  ,gbp_g12
05:45:27 103  ,gbp_g13
05:45:27 104  ,gbp_g14
05:45:27 105  ,gbp_g15
05:45:27 106  ,gbp_g16
05:45:27 107  ,gbp_g17
05:45:27 108  ,gbp_g18
05:45:27 109  ,gbp_g19
05:45:27 110  ,gbp_g20
05:45:27 111  ,gbp_g21
05:45:27 112  ,gbp_g22
05:45:27 113  ,gbp_g23
05:45:27 114  ,gbp_g24
05:45:27 115  ,gbp_g25
05:45:27 116  ,gbp_g26
05:45:27 117  ,gbp_g27
05:45:27 118  ,gbp_g28
05:45:27 119  ,gbp_g29
05:45:27 120  ,gbp_g30
05:45:27 121  ,gbp_g31
05:45:27 122  ,gbp_g32
05:45:27 123  ,gbp_g33
05:45:27 124  ,gbp_g34
05:45:27 125  ,gbp_g35
05:45:27 126  ,gbp_g36
05:45:27 127  ,gbp_g37
05:45:27 128  ,gbp_g38
05:45:27 129  ,gbp_g39
05:45:27 130  ,gbp_g40
05:45:27 131  ,gbp_g41
05:45:27 132  ,jpy_g00
05:45:27 133  ,jpy_g01
05:45:27 134  ,jpy_g02
05:45:27 135  ,jpy_g03
05:45:27 136  ,jpy_g04
05:45:27 137  ,jpy_g05
05:45:27 138  ,jpy_g06
05:45:27 139  ,jpy_g07
05:45:27 140  ,jpy_g08
05:45:27 141  ,jpy_g09
05:45:27 142  ,jpy_g10
05:45:27 143  ,jpy_g11
05:45:27 144  ,jpy_g12
05:45:27 145  ,jpy_g13
05:45:27 146  ,jpy_g14
05:45:27 147  ,jpy_g15
05:45:27 148  ,jpy_g16
05:45:27 149  ,jpy_g17
05:45:27 150  ,jpy_g18
05:45:27 151  ,jpy_g19
05:45:27 152  ,jpy_g20
05:45:27 153  ,jpy_g21
05:45:27 154  ,jpy_g22
05:45:27 155  ,jpy_g23
05:45:27 156  ,jpy_g24
05:45:27 157  ,jpy_g25
05:45:27 158  ,jpy_g26
05:45:27 159  ,jpy_g27
05:45:27 160  ,jpy_g28
05:45:27 161  ,jpy_g29
05:45:27 162  ,jpy_g30
05:45:27 163  ,jpy_g31
05:45:27 164  ,jpy_g32
05:45:27 165  ,jpy_g33
05:45:27 166  ,jpy_g34
05:45:27 167  ,jpy_g35
05:45:27 168  ,jpy_g36
05:45:27 169  ,jpy_g37
05:45:27 170  ,jpy_g38
05:45:27 171  ,jpy_g39
05:45:27 172  ,jpy_g40
05:45:27 173  ,jpy_g41
05:45:27 174  ,cad_g00
05:45:27 175  ,cad_g01
05:45:27 176  ,cad_g02
05:45:27 177  ,cad_g03
05:45:27 178  ,cad_g04
05:45:27 179  ,cad_g05
05:45:27 180  ,cad_g06
05:45:27 181  ,cad_g07
05:45:27 182  ,cad_g08
05:45:27 183  ,cad_g09
05:45:27 184  ,cad_g10
05:45:27 185  ,cad_g11
05:45:27 186  ,cad_g12
05:45:27 187  ,cad_g13
05:45:27 188  ,cad_g14
05:45:27 189  ,cad_g15
05:45:27 190  ,cad_g16
05:45:27 191  ,cad_g17
05:45:27 192  ,cad_g18
05:45:27 193  ,cad_g19
05:45:27 194  ,cad_g20
05:45:27 195  ,cad_g21
05:45:27 196  ,cad_g22
05:45:27 197  ,cad_g23
05:45:27 198  ,cad_g24
05:45:27 199  ,cad_g25
05:45:27 200  ,cad_g26
05:45:27 201  ,cad_g27
05:45:27 202  ,cad_g28
05:45:27 203  ,cad_g29
05:45:27 204  ,cad_g30
05:45:27 205  ,cad_g31
05:45:27 206  ,cad_g32
05:45:27 207  ,cad_g33
05:45:27 208  ,cad_g34
05:45:27 209  ,cad_g35
05:45:27 210  ,cad_g36
05:45:27 211  ,cad_g37
05:45:27 212  ,cad_g38
05:45:27 213  ,cad_g39
05:45:27 214  ,cad_g40
05:45:27 215  ,cad_g41
05:45:27 216  ,chf_g00
05:45:27 217  ,chf_g01
05:45:27 218  ,chf_g02
05:45:27 219  ,chf_g03
05:45:27 220  ,chf_g04
05:45:27 221  ,chf_g05
05:45:27 222  ,chf_g06
05:45:27 223  ,chf_g07
05:45:27 224  ,chf_g08
05:45:27 225  ,chf_g09
05:45:27 226  ,chf_g10
05:45:27 227  ,chf_g11
05:45:27 228  ,chf_g12
05:45:27 229  ,chf_g13
05:45:27 230  ,chf_g14
05:45:27 231  ,chf_g15
05:45:27 232  ,chf_g16
05:45:27 233  ,chf_g17
05:45:27 234  ,chf_g18
05:45:27 235  ,chf_g19
05:45:27 236  ,chf_g20
05:45:27 237  ,chf_g21
05:45:27 238  ,chf_g22
05:45:27 239  ,chf_g23
05:45:27 240  ,chf_g24
05:45:27 241  ,chf_g25
05:45:27 242  ,chf_g26
05:45:27 243  ,chf_g27
05:45:27 244  ,chf_g28
05:45:27 245  ,chf_g29
05:45:27 246  ,chf_g30
05:45:27 247  ,chf_g31
05:45:27 248  ,chf_g32
05:45:27 249  ,chf_g33
05:45:27 250  ,chf_g34
05:45:27 251  ,chf_g35
05:45:27 252  ,chf_g36
05:45:27 253  ,chf_g37
05:45:27 254  ,chf_g38
05:45:27 255  ,chf_g39
05:45:27 256  ,chf_g40
05:45:27 257  ,chf_g41
05:45:27 258  FROM aud_ms6 m
05:45:27 259  WHERE gatt IN('nup','up')
05:45:27 260  AND 1+m.ydate < '&1'||' '||'&2'
05:45:27 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2011-01-03'||' '||'05:30:00'

View created.

Elapsed: 00:00:00.12
05:45:27 SQL> 
05:45:27 SQL> -- rpt
05:45:27 SQL> 
05:45:27 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt
05:45:27   2  
05:45:27 SQL> SELECT MAX(prdate) FROM bme
05:45:27   2  
05:45:27 SQL> -- Now build model from bme and score sme
05:45:27 SQL> @score1.sql
05:45:27 SQL> -- score1.sql
05:45:27 SQL> 
05:45:27 SQL> -- Does the 1st SVM score
05:45:27 SQL> 
05:45:27 SQL> -- Fill up svmc_apply_prep
05:45:27 SQL> @score.sql
05:45:27 SQL> --
05:45:27 SQL> -- score.sql
05:45:27 SQL> --
05:45:27 SQL> 
05:45:27 SQL> -- usage: score.sql
05:45:27 SQL> 
05:45:27 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
05:45:27 SQL> 
05:45:27 SQL> DEFINE target	= 'gatt'
05:45:27 SQL> DEFINE model_name = 'forex14'
05:45:27 SQL> DEFINE bldtable	= 'bme'
05:45:27 SQL> DEFINE scoretable = 'sme'
05:45:27 SQL> DEFINE case_id	= 'prdate'
05:45:27 SQL> 
05:45:27 SQL> -- Define a variable to help me exclude some columns from some data mining calls
05:45:27 SQL> DEFINE exclude1 = "'&target','&case_id'"
05:45:27 SQL> 
05:45:27 SQL> -- Builds an SVM model using pl/sql.
05:45:27 SQL> 
05:45:27 SQL> -----------------------------------------------------------------------
05:45:27 SQL> --			    BUILD THE MODEL
05:45:27 SQL> -----------------------------------------------------------------------
05:45:27 SQL> 
05:45:27 SQL> -- Cleanup old build data preparation objects for repeat runs
05:45:27 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.00
05:45:27 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
05:45:27 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.01
05:45:27 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.01
05:45:27 SQL> 
05:45:27 SQL> 
05:45:27 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
05:45:27 SQL> --
05:45:27 SQL> -- DROP	TABLE svmc_settings ;
05:45:27 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
05:45:27 SQL> -- DELETE svmc_settings;
05:45:27 SQL> 
05:45:27 SQL> -- The default classification algorithm is Naive Bayes. So override
05:45:27 SQL> -- this choice to SVM using a settings table.
05:45:27 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
05:45:27 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
05:45:27 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
05:45:27 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
05:45:27 SQL> -- models.
05:45:27 SQL> --
05:45:27 SQL> 
05:45:27 SQL> -- Do this once and then comment it out.
05:45:27 SQL> -- That makes script go faster.
05:45:27 SQL> -- BEGIN
05:45:27 SQL> -- -- Populate settings table
05:45:27 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
05:45:27 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
05:45:27 SQL> --
05:45:27 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
05:45:27 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
05:45:27 SQL> --
05:45:27 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
05:45:27 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
05:45:27 SQL> --   COMMIT;
05:45:27 SQL> -- END;
05:45:27 SQL> -- /
05:45:27 SQL> 
05:45:27 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
05:45:27 SQL> 
05:45:27 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
05:45:27   2  EXCEPTION WHEN OTHERS THEN NULL; END;
05:45:27   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
05:45:27 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
05:45:27   2  EXCEPTION WHEN OTHERS THEN NULL; END;
05:45:27   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
05:45:27 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
05:45:27   2  EXCEPTION WHEN OTHERS THEN NULL; END;
05:45:27   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
05:45:27 SQL> 
05:45:27 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
05:45:27   2  EXCEPTION WHEN OTHERS THEN NULL; END;
05:45:27   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
05:45:27 SQL> 
05:45:27 SQL> --------------------------------
05:45:27 SQL> -- PREPARE BUILD (TRAINING) DATA
05:45:27 SQL> --
05:45:27 SQL> 
05:45:27 SQL> -- 1. Missing Value treatment for all Predictors and
05:45:27 SQL> -- 2. Outlier Treatment and
05:45:27 SQL> -- 3. Normalization are performed below.
05:45:27 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
05:45:27 SQL> --    normalized here.
05:45:27 SQL> 
05:45:27 SQL> BEGIN
05:45:27   2  	-- Perform missing value treatment for all predictors
05:45:27   3  	-- create miss tables
05:45:27   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
05:45:27   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
05:45:27   6  
05:45:27   7  	-- populate miss tables
05:45:27   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
05:45:27   9  	  miss_table_name => 'svmc_miss_num',
05:45:27  10  	  data_table_name => '&bldtable',
05:45:27  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
05:45:27  12  
05:45:27  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
05:45:27  14  	  miss_table_name => 'svmc_miss_cat',
05:45:27  15  	  data_table_name => '&bldtable',
05:45:27  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
05:45:27  17  
05:45:27  18  	-- xform input data to replace missing values
05:45:27  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
05:45:27  20  	  miss_table_name => 'svmc_miss_num',
05:45:27  21  	  data_table_name => '&bldtable',
05:45:27  22  	  xform_view_name => 'xformed_build_miss_num');
05:45:27  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
05:45:27  24  	  miss_table_name => 'svmc_miss_cat',
05:45:27  25  	  data_table_name => '&bldtable',
05:45:27  26  	  xform_view_name => 'xformed_build_miss_cat');
05:45:27  27  
05:45:27  28  	-- Perform outlier treatment.
05:45:27  29  	-- create clip table
05:45:27  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
05:45:27  31  
05:45:27  32  	-- populate clip table
05:45:27  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
05:45:27  34  	  clip_table_name => 'svmc_clip',
05:45:27  35  	  data_table_name => '&bldtable',
05:45:27  36  	  tail_frac	  => 0.025,
05:45:27  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
05:45:27  38  
05:45:27  39  	-- xform input data to winsorized data
05:45:27  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
05:45:27  41  	  clip_table_name => 'svmc_clip',
05:45:27  42  	  data_table_name => '&bldtable',
05:45:27  43  	  xform_view_name => 'svmc_winsor');
05:45:27  44  
05:45:27  45  	-- create normalization table
05:45:27  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
05:45:27  47  
05:45:27  48  	-- populate normalization table based on winsorized data
05:45:27  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
05:45:27  50  	  norm_table_name => 'svmc_norm',
05:45:27  51  	  data_table_name => 'svmc_winsor',
05:45:27  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
05:45:27  53  
05:45:27  54  	-- normalize the original data
05:45:27  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
05:45:27  56  	  norm_table_name => 'svmc_norm',
05:45:27  57  	  data_table_name => '&bldtable',
05:45:27  58  	  xform_view_name => 'svmc_build_prep');
05:45:27  59  END;
05:45:27  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:17.78
05:45:45 SQL> 
05:45:45 SQL> ---------------------
05:45:45 SQL> -- CREATE A NEW MODEL
05:45:45 SQL> --
05:45:45 SQL> -- Cleanup old model with the same name for repeat runs
05:45:45 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
05:45:45   2  EXCEPTION WHEN OTHERS THEN NULL; END;
05:45:45   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.13
05:45:46 SQL> 
05:45:46 SQL> -- Build a new SVM Model
05:45:46 SQL> BEGIN
05:45:46   2  	DBMS_DATA_MINING.CREATE_MODEL(
05:45:46   3  	  model_name	      => '&model_name',
05:45:46   4  	  mining_function     => dbms_data_mining.classification,
05:45:46   5  	  data_table_name     => 'svmc_build_prep',
05:45:46   6  	  case_id_column_name => '&case_id',
05:45:46   7  	  target_column_name  => '&target',
05:45:46   8  	  settings_table_name => 'svmc_settings');
05:45:46   9  END;
05:45:46  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:30.76
05:46:17 SQL> 
05:46:17 SQL> -----------------------------------------------------------------------
05:46:17 SQL> --			       APPLY/score THE MODEL
05:46:17 SQL> -----------------------------------------------------------------------
05:46:17 SQL> 
05:46:17 SQL> -- Cleanup old scoring data preparation objects for repeat runs
05:46:17 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
05:46:17   2  EXCEPTION WHEN OTHERS THEN NULL; END;
05:46:17   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.09
05:46:17 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
05:46:17   2  EXCEPTION WHEN OTHERS THEN NULL; END;
05:46:17   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
05:46:17 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
05:46:17   2  EXCEPTION WHEN OTHERS THEN NULL; END;
05:46:17   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
05:46:17 SQL> -----------------------
05:46:17 SQL> -- PREPARE SCORING DATA
05:46:17 SQL> --
05:46:17 SQL> -- If the data for model creation has been prepared, then the data
05:46:17 SQL> -- to be scored using the model must be prepared in the same manner
05:46:17 SQL> -- in order to obtain meaningful results.
05:46:17 SQL> --
05:46:17 SQL> -- 1. Missing Value treatment for all Predictors and
05:46:17 SQL> -- 2. Normalization
05:46:17 SQL> -- No outlier treatment will be performed during test and apply. The
05:46:17 SQL> -- normalization step is sufficient, since the normalization parameters
05:46:17 SQL> -- already capture the effects of outlier treatment done with build data.
05:46:17 SQL> --
05:46:17 SQL> BEGIN
05:46:17   2  	-- Xform Test data to replace missing values
05:46:17   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
05:46:17   4  	  miss_table_name => 'svmc_miss_num',
05:46:17   5  	  data_table_name => '&scoretable',
05:46:17   6  	  xform_view_name => 'xformed_apply_miss_num');
05:46:17   7  
05:46:17   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
05:46:17   9  	  miss_table_name => 'svmc_miss_cat',
05:46:17  10  	  data_table_name => '&scoretable',
05:46:17  11  	  xform_view_name => 'xformed_apply_miss_cat');
05:46:17  12  
05:46:17  13  	-- Normalize the data to be scored
05:46:17  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
05:46:17  15  	  norm_table_name => 'svmc_norm',
05:46:17  16  	  data_table_name => '&scoretable',
05:46:17  17  	  xform_view_name => 'svmc_apply_prep');
05:46:17  18  END;
05:46:17  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.20
05:46:19 SQL> 
05:46:19 SQL> -- Use same model_name used in score.sql
05:46:19 SQL> DEFINE model_name = 'forex14'
05:46:19 SQL> 
05:46:19 SQL> -- CREATE TABLE fxscores6 (prdate VARCHAR2(30),score NUMBER,rundate DATE,pair VARCHAR2(8),ydate DATE);
05:46:19 SQL> 
05:46:19 SQL> DELETE fxscores6 WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.04
05:46:19 SQL> 
05:46:19 SQL> INSERT INTO fxscores6 (prdate,score,rundate,pair,ydate)
05:46:19   2  SELECT
05:46:19   3  prdate
05:46:19   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
05:46:19   5  ,sysdate
05:46:19   6  ,SUBSTR(prdate,1,3)pair
05:46:19   7  ,SUBSTR(prdate,4,19)ydate
05:46:19   8  FROM svmc_apply_prep
05:46:19   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.22
05:46:19 SQL> @aud_score1day_gattn.sql	2011-01-03 05:20:00
05:46:19 SQL> --
05:46:19 SQL> -- aud_score1day_gattn.sql
05:46:19 SQL> --
05:46:19 SQL> 
05:46:19 SQL> CREATE OR REPLACE VIEW sme AS
05:46:19   2  SELECT
05:46:19   3  'aud'||m.ydate prdate
05:46:19   4  ,NULL gattn
05:46:19   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
05:46:19   6  ,eur_g00
05:46:19   7  ,eur_g01
05:46:19   8  ,eur_g02
05:46:19   9  ,eur_g03
05:46:19  10  ,eur_g04
05:46:19  11  ,eur_g05
05:46:19  12  ,eur_g06
05:46:19  13  ,eur_g07
05:46:19  14  ,eur_g08
05:46:19  15  ,eur_g09
05:46:19  16  ,eur_g10
05:46:19  17  ,eur_g11
05:46:19  18  ,eur_g12
05:46:19  19  ,eur_g13
05:46:19  20  ,eur_g14
05:46:19  21  ,eur_g15
05:46:19  22  ,eur_g16
05:46:19  23  ,eur_g17
05:46:19  24  ,eur_g18
05:46:19  25  ,eur_g19
05:46:19  26  ,eur_g20
05:46:19  27  ,eur_g21
05:46:19  28  ,eur_g22
05:46:19  29  ,eur_g23
05:46:19  30  ,eur_g24
05:46:19  31  ,eur_g25
05:46:19  32  ,eur_g26
05:46:19  33  ,eur_g27
05:46:19  34  ,eur_g28
05:46:19  35  ,eur_g29
05:46:19  36  ,eur_g30
05:46:19  37  ,eur_g31
05:46:19  38  ,eur_g32
05:46:19  39  ,eur_g33
05:46:19  40  ,eur_g34
05:46:19  41  ,eur_g35
05:46:19  42  ,eur_g36
05:46:19  43  ,eur_g37
05:46:19  44  ,eur_g38
05:46:19  45  ,eur_g39
05:46:19  46  ,eur_g40
05:46:19  47  ,eur_g41
05:46:19  48  ,aud_g00
05:46:19  49  ,aud_g01
05:46:19  50  ,aud_g02
05:46:19  51  ,aud_g03
05:46:19  52  ,aud_g04
05:46:19  53  ,aud_g05
05:46:19  54  ,aud_g06
05:46:19  55  ,aud_g07
05:46:19  56  ,aud_g08
05:46:19  57  ,aud_g09
05:46:19  58  ,aud_g10
05:46:19  59  ,aud_g11
05:46:19  60  ,aud_g12
05:46:19  61  ,aud_g13
05:46:19  62  ,aud_g14
05:46:19  63  ,aud_g15
05:46:19  64  ,aud_g16
05:46:19  65  ,aud_g17
05:46:19  66  ,aud_g18
05:46:19  67  ,aud_g19
05:46:19  68  ,aud_g20
05:46:19  69  ,aud_g21
05:46:19  70  ,aud_g22
05:46:19  71  ,aud_g23
05:46:19  72  ,aud_g24
05:46:19  73  ,aud_g25
05:46:19  74  ,aud_g26
05:46:19  75  ,aud_g27
05:46:19  76  ,aud_g28
05:46:19  77  ,aud_g29
05:46:19  78  ,aud_g30
05:46:19  79  ,aud_g31
05:46:19  80  ,aud_g32
05:46:19  81  ,aud_g33
05:46:19  82  ,aud_g34
05:46:19  83  ,aud_g35
05:46:19  84  ,aud_g36
05:46:19  85  ,aud_g37
05:46:19  86  ,aud_g38
05:46:19  87  ,aud_g39
05:46:19  88  ,aud_g40
05:46:19  89  ,aud_g41
05:46:19  90  ,gbp_g00
05:46:19  91  ,gbp_g01
05:46:19  92  ,gbp_g02
05:46:19  93  ,gbp_g03
05:46:19  94  ,gbp_g04
05:46:19  95  ,gbp_g05
05:46:19  96  ,gbp_g06
05:46:19  97  ,gbp_g07
05:46:19  98  ,gbp_g08
05:46:19  99  ,gbp_g09
05:46:19 100  ,gbp_g10
05:46:19 101  ,gbp_g11
05:46:19 102  ,gbp_g12
05:46:19 103  ,gbp_g13
05:46:19 104  ,gbp_g14
05:46:19 105  ,gbp_g15
05:46:19 106  ,gbp_g16
05:46:19 107  ,gbp_g17
05:46:19 108  ,gbp_g18
05:46:19 109  ,gbp_g19
05:46:19 110  ,gbp_g20
05:46:19 111  ,gbp_g21
05:46:19 112  ,gbp_g22
05:46:19 113  ,gbp_g23
05:46:19 114  ,gbp_g24
05:46:19 115  ,gbp_g25
05:46:19 116  ,gbp_g26
05:46:19 117  ,gbp_g27
05:46:19 118  ,gbp_g28
05:46:19 119  ,gbp_g29
05:46:19 120  ,gbp_g30
05:46:19 121  ,gbp_g31
05:46:19 122  ,gbp_g32
05:46:19 123  ,gbp_g33
05:46:19 124  ,gbp_g34
05:46:19 125  ,gbp_g35
05:46:19 126  ,gbp_g36
05:46:19 127  ,gbp_g37
05:46:19 128  ,gbp_g38
05:46:19 129  ,gbp_g39
05:46:19 130  ,gbp_g40
05:46:19 131  ,gbp_g41
05:46:19 132  ,jpy_g00
05:46:19 133  ,jpy_g01
05:46:19 134  ,jpy_g02
05:46:19 135  ,jpy_g03
05:46:19 136  ,jpy_g04
05:46:19 137  ,jpy_g05
05:46:19 138  ,jpy_g06
05:46:19 139  ,jpy_g07
05:46:19 140  ,jpy_g08
05:46:19 141  ,jpy_g09
05:46:19 142  ,jpy_g10
05:46:19 143  ,jpy_g11
05:46:19 144  ,jpy_g12
05:46:19 145  ,jpy_g13
05:46:19 146  ,jpy_g14
05:46:19 147  ,jpy_g15
05:46:19 148  ,jpy_g16
05:46:19 149  ,jpy_g17
05:46:19 150  ,jpy_g18
05:46:19 151  ,jpy_g19
05:46:19 152  ,jpy_g20
05:46:19 153  ,jpy_g21
05:46:19 154  ,jpy_g22
05:46:19 155  ,jpy_g23
05:46:19 156  ,jpy_g24
05:46:19 157  ,jpy_g25
05:46:19 158  ,jpy_g26
05:46:19 159  ,jpy_g27
05:46:19 160  ,jpy_g28
05:46:19 161  ,jpy_g29
05:46:19 162  ,jpy_g30
05:46:19 163  ,jpy_g31
05:46:19 164  ,jpy_g32
05:46:19 165  ,jpy_g33
05:46:19 166  ,jpy_g34
05:46:19 167  ,jpy_g35
05:46:19 168  ,jpy_g36
05:46:19 169  ,jpy_g37
05:46:19 170  ,jpy_g38
05:46:19 171  ,jpy_g39
05:46:19 172  ,jpy_g40
05:46:19 173  ,jpy_g41
05:46:19 174  ,cad_g00
05:46:19 175  ,cad_g01
05:46:19 176  ,cad_g02
05:46:19 177  ,cad_g03
05:46:19 178  ,cad_g04
05:46:19 179  ,cad_g05
05:46:19 180  ,cad_g06
05:46:19 181  ,cad_g07
05:46:19 182  ,cad_g08
05:46:19 183  ,cad_g09
05:46:19 184  ,cad_g10
05:46:19 185  ,cad_g11
05:46:19 186  ,cad_g12
05:46:19 187  ,cad_g13
05:46:19 188  ,cad_g14
05:46:19 189  ,cad_g15
05:46:19 190  ,cad_g16
05:46:19 191  ,cad_g17
05:46:19 192  ,cad_g18
05:46:19 193  ,cad_g19
05:46:19 194  ,cad_g20
05:46:19 195  ,cad_g21
05:46:19 196  ,cad_g22
05:46:19 197  ,cad_g23
05:46:19 198  ,cad_g24
05:46:19 199  ,cad_g25
05:46:19 200  ,cad_g26
05:46:19 201  ,cad_g27
05:46:19 202  ,cad_g28
05:46:19 203  ,cad_g29
05:46:19 204  ,cad_g30
05:46:19 205  ,cad_g31
05:46:19 206  ,cad_g32
05:46:19 207  ,cad_g33
05:46:19 208  ,cad_g34
05:46:19 209  ,cad_g35
05:46:19 210  ,cad_g36
05:46:19 211  ,cad_g37
05:46:19 212  ,cad_g38
05:46:19 213  ,cad_g39
05:46:19 214  ,cad_g40
05:46:19 215  ,cad_g41
05:46:19 216  ,chf_g00
05:46:19 217  ,chf_g01
05:46:19 218  ,chf_g02
05:46:19 219  ,chf_g03
05:46:19 220  ,chf_g04
05:46:19 221  ,chf_g05
05:46:19 222  ,chf_g06
05:46:19 223  ,chf_g07
05:46:19 224  ,chf_g08
05:46:19 225  ,chf_g09
05:46:19 226  ,chf_g10
05:46:19 227  ,chf_g11
05:46:19 228  ,chf_g12
05:46:19 229  ,chf_g13
05:46:19 230  ,chf_g14
05:46:19 231  ,chf_g15
05:46:19 232  ,chf_g16
05:46:19 233  ,chf_g17
05:46:19 234  ,chf_g18
05:46:19 235  ,chf_g19
05:46:19 236  ,chf_g20
05:46:19 237  ,chf_g21
05:46:19 238  ,chf_g22
05:46:19 239  ,chf_g23
05:46:19 240  ,chf_g24
05:46:19 241  ,chf_g25
05:46:19 242  ,chf_g26
05:46:19 243  ,chf_g27
05:46:19 244  ,chf_g28
05:46:19 245  ,chf_g29
05:46:19 246  ,chf_g30
05:46:19 247  ,chf_g31
05:46:19 248  ,chf_g32
05:46:19 249  ,chf_g33
05:46:19 250  ,chf_g34
05:46:19 251  ,chf_g35
05:46:19 252  ,chf_g36
05:46:19 253  ,chf_g37
05:46:19 254  ,chf_g38
05:46:19 255  ,chf_g39
05:46:19 256  ,chf_g40
05:46:19 257  ,chf_g41
05:46:19 258  FROM aud_ms6 m
05:46:19 259  WHERE m.ydate = '&1'||' '||'&2'
05:46:19 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2011-01-03'||' '||'05:20:00'

View created.

Elapsed: 00:00:00.12
05:46:19 SQL> 
05:46:19 SQL> -- rpt
05:46:19 SQL> -- We should see just 1 row:
05:46:19 SQL> 
05:46:19 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.01
05:46:19 SQL> 
05:46:19 SQL> -- Build the model:
05:46:19 SQL> CREATE OR REPLACE VIEW bme AS
05:46:19   2  SELECT
05:46:19   3  'aud'||m.ydate prdate
05:46:19   4  ,gattn
05:46:19   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
05:46:19   6  ,eur_g00
05:46:19   7  ,eur_g01
05:46:19   8  ,eur_g02
05:46:19   9  ,eur_g03
05:46:19  10  ,eur_g04
05:46:19  11  ,eur_g05
05:46:19  12  ,eur_g06
05:46:19  13  ,eur_g07
05:46:19  14  ,eur_g08
05:46:19  15  ,eur_g09
05:46:19  16  ,eur_g10
05:46:19  17  ,eur_g11
05:46:19  18  ,eur_g12
05:46:19  19  ,eur_g13
05:46:19  20  ,eur_g14
05:46:19  21  ,eur_g15
05:46:19  22  ,eur_g16
05:46:19  23  ,eur_g17
05:46:19  24  ,eur_g18
05:46:19  25  ,eur_g19
05:46:19  26  ,eur_g20
05:46:19  27  ,eur_g21
05:46:19  28  ,eur_g22
05:46:19  29  ,eur_g23
05:46:19  30  ,eur_g24
05:46:19  31  ,eur_g25
05:46:19  32  ,eur_g26
05:46:19  33  ,eur_g27
05:46:19  34  ,eur_g28
05:46:19  35  ,eur_g29
05:46:19  36  ,eur_g30
05:46:19  37  ,eur_g31
05:46:19  38  ,eur_g32
05:46:19  39  ,eur_g33
05:46:19  40  ,eur_g34
05:46:19  41  ,eur_g35
05:46:19  42  ,eur_g36
05:46:19  43  ,eur_g37
05:46:19  44  ,eur_g38
05:46:19  45  ,eur_g39
05:46:19  46  ,eur_g40
05:46:19  47  ,eur_g41
05:46:19  48  ,aud_g00
05:46:19  49  ,aud_g01
05:46:19  50  ,aud_g02
05:46:19  51  ,aud_g03
05:46:19  52  ,aud_g04
05:46:19  53  ,aud_g05
05:46:19  54  ,aud_g06
05:46:19  55  ,aud_g07
05:46:19  56  ,aud_g08
05:46:19  57  ,aud_g09
05:46:19  58  ,aud_g10
05:46:19  59  ,aud_g11
05:46:19  60  ,aud_g12
05:46:19  61  ,aud_g13
05:46:19  62  ,aud_g14
05:46:19  63  ,aud_g15
05:46:19  64  ,aud_g16
05:46:19  65  ,aud_g17
05:46:19  66  ,aud_g18
05:46:19  67  ,aud_g19
05:46:19  68  ,aud_g20
05:46:19  69  ,aud_g21
05:46:19  70  ,aud_g22
05:46:19  71  ,aud_g23
05:46:19  72  ,aud_g24
05:46:19  73  ,aud_g25
05:46:19  74  ,aud_g26
05:46:19  75  ,aud_g27
05:46:19  76  ,aud_g28
05:46:19  77  ,aud_g29
05:46:19  78  ,aud_g30
05:46:19  79  ,aud_g31
05:46:19  80  ,aud_g32
05:46:19  81  ,aud_g33
05:46:19  82  ,aud_g34
05:46:19  83  ,aud_g35
05:46:19  84  ,aud_g36
05:46:19  85  ,aud_g37
05:46:19  86  ,aud_g38
05:46:19  87  ,aud_g39
05:46:19  88  ,aud_g40
05:46:19  89  ,aud_g41
05:46:19  90  ,gbp_g00
05:46:19  91  ,gbp_g01
05:46:19  92  ,gbp_g02
05:46:19  93  ,gbp_g03
05:46:19  94  ,gbp_g04
05:46:19  95  ,gbp_g05
05:46:19  96  ,gbp_g06
05:46:19  97  ,gbp_g07
05:46:19  98  ,gbp_g08
05:46:19  99  ,gbp_g09
05:46:19 100  ,gbp_g10
05:46:19 101  ,gbp_g11
05:46:19 102  ,gbp_g12
05:46:19 103  ,gbp_g13
05:46:19 104  ,gbp_g14
05:46:19 105  ,gbp_g15
05:46:19 106  ,gbp_g16
05:46:19 107  ,gbp_g17
05:46:19 108  ,gbp_g18
05:46:19 109  ,gbp_g19
05:46:19 110  ,gbp_g20
05:46:19 111  ,gbp_g21
05:46:19 112  ,gbp_g22
05:46:19 113  ,gbp_g23
05:46:19 114  ,gbp_g24
05:46:19 115  ,gbp_g25
05:46:19 116  ,gbp_g26
05:46:19 117  ,gbp_g27
05:46:19 118  ,gbp_g28
05:46:19 119  ,gbp_g29
05:46:19 120  ,gbp_g30
05:46:19 121  ,gbp_g31
05:46:19 122  ,gbp_g32
05:46:19 123  ,gbp_g33
05:46:19 124  ,gbp_g34
05:46:19 125  ,gbp_g35
05:46:19 126  ,gbp_g36
05:46:19 127  ,gbp_g37
05:46:19 128  ,gbp_g38
05:46:19 129  ,gbp_g39
05:46:19 130  ,gbp_g40
05:46:19 131  ,gbp_g41
05:46:19 132  ,jpy_g00
05:46:19 133  ,jpy_g01
05:46:19 134  ,jpy_g02
05:46:19 135  ,jpy_g03
05:46:19 136  ,jpy_g04
05:46:19 137  ,jpy_g05
05:46:19 138  ,jpy_g06
05:46:19 139  ,jpy_g07
05:46:19 140  ,jpy_g08
05:46:19 141  ,jpy_g09
05:46:19 142  ,jpy_g10
05:46:19 143  ,jpy_g11
05:46:19 144  ,jpy_g12
05:46:19 145  ,jpy_g13
05:46:19 146  ,jpy_g14
05:46:19 147  ,jpy_g15
05:46:19 148  ,jpy_g16
05:46:19 149  ,jpy_g17
05:46:19 150  ,jpy_g18
05:46:19 151  ,jpy_g19
05:46:19 152  ,jpy_g20
05:46:19 153  ,jpy_g21
05:46:19 154  ,jpy_g22
05:46:19 155  ,jpy_g23
05:46:19 156  ,jpy_g24
05:46:19 157  ,jpy_g25
05:46:19 158  ,jpy_g26
05:46:19 159  ,jpy_g27
05:46:19 160  ,jpy_g28
05:46:19 161  ,jpy_g29
05:46:19 162  ,jpy_g30
05:46:19 163  ,jpy_g31
05:46:19 164  ,jpy_g32
05:46:19 165  ,jpy_g33
05:46:19 166  ,jpy_g34
05:46:19 167  ,jpy_g35
05:46:19 168  ,jpy_g36
05:46:19 169  ,jpy_g37
05:46:19 170  ,jpy_g38
05:46:19 171  ,jpy_g39
05:46:19 172  ,jpy_g40
05:46:19 173  ,jpy_g41
05:46:19 174  ,cad_g00
05:46:19 175  ,cad_g01
05:46:19 176  ,cad_g02
05:46:19 177  ,cad_g03
05:46:19 178  ,cad_g04
05:46:19 179  ,cad_g05
05:46:19 180  ,cad_g06
05:46:19 181  ,cad_g07
05:46:19 182  ,cad_g08
05:46:19 183  ,cad_g09
05:46:19 184  ,cad_g10
05:46:19 185  ,cad_g11
05:46:19 186  ,cad_g12
05:46:19 187  ,cad_g13
05:46:19 188  ,cad_g14
05:46:19 189  ,cad_g15
05:46:19 190  ,cad_g16
05:46:19 191  ,cad_g17
05:46:19 192  ,cad_g18
05:46:19 193  ,cad_g19
05:46:19 194  ,cad_g20
05:46:19 195  ,cad_g21
05:46:19 196  ,cad_g22
05:46:19 197  ,cad_g23
05:46:19 198  ,cad_g24
05:46:19 199  ,cad_g25
05:46:19 200  ,cad_g26
05:46:19 201  ,cad_g27
05:46:19 202  ,cad_g28
05:46:19 203  ,cad_g29
05:46:19 204  ,cad_g30
05:46:19 205  ,cad_g31
05:46:19 206  ,cad_g32
05:46:19 207  ,cad_g33
05:46:19 208  ,cad_g34
05:46:19 209  ,cad_g35
05:46:19 210  ,cad_g36
05:46:19 211  ,cad_g37
05:46:19 212  ,cad_g38
05:46:19 213  ,cad_g39
05:46:19 214  ,cad_g40
05:46:19 215  ,cad_g41
05:46:19 216  ,chf_g00
05:46:19 217  ,chf_g01
05:46:19 218  ,chf_g02
05:46:19 219  ,chf_g03
05:46:19 220  ,chf_g04
05:46:19 221  ,chf_g05
05:46:19 222  ,chf_g06
05:46:19 223  ,chf_g07
05:46:19 224  ,chf_g08
05:46:19 225  ,chf_g09
05:46:19 226  ,chf_g10
05:46:19 227  ,chf_g11
05:46:19 228  ,chf_g12
05:46:19 229  ,chf_g13
05:46:19 230  ,chf_g14
05:46:19 231  ,chf_g15
05:46:19 232  ,chf_g16
05:46:19 233  ,chf_g17
05:46:19 234  ,chf_g18
05:46:19 235  ,chf_g19
05:46:19 236  ,chf_g20
05:46:19 237  ,chf_g21
05:46:19 238  ,chf_g22
05:46:19 239  ,chf_g23
05:46:19 240  ,chf_g24
05:46:19 241  ,chf_g25
05:46:19 242  ,chf_g26
05:46:19 243  ,chf_g27
05:46:19 244  ,chf_g28
05:46:19 245  ,chf_g29
05:46:19 246  ,chf_g30
05:46:19 247  ,chf_g31
05:46:19 248  ,chf_g32
05:46:19 249  ,chf_g33
05:46:19 250  ,chf_g34
05:46:19 251  ,chf_g35
05:46:19 252  ,chf_g36
05:46:19 253  ,chf_g37
05:46:19 254  ,chf_g38
05:46:19 255  ,chf_g39
05:46:19 256  ,chf_g40
05:46:19 257  ,chf_g41
05:46:19 258  FROM aud_ms6 m
05:46:19 259  WHERE gattn IN('nup','up')
05:46:19 260  AND 1+m.ydate < '&1'||' '||'&2'
05:46:19 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2011-01-03'||' '||'05:20:00'

View created.

Elapsed: 00:00:00.12
05:46:19 SQL> 
05:46:19 SQL> -- rpt
05:46:19 SQL> 
05:46:19 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	    12823
up	     6334

Elapsed: 00:00:00.04
05:46:19 SQL> 
05:46:19 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
aud2010-12-31 21:55:00

Elapsed: 00:00:00.03
05:46:19 SQL> 
05:46:19 SQL> -- Now build model from bme and score sme
05:46:19 SQL> @score1gattn.sql
05:46:19 SQL> -- score1gattn.sql
05:46:19 SQL> 
05:46:19 SQL> -- Does the 1st SVM score
05:46:19 SQL> 
05:46:19 SQL> -- Fill up svmc_apply_prep
05:46:19 SQL> @score_gattn.sql
05:46:19 SQL> --
05:46:19 SQL> -- score_gattn.sql
05:46:19 SQL> --
05:46:19 SQL> 
05:46:19 SQL> -- usage: score_gattn.sql
05:46:19 SQL> 
05:46:19 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
05:46:19 SQL> 
05:46:19 SQL> DEFINE target	= 'gattn'
05:46:19 SQL> DEFINE model_name = 'forex14'
05:46:19 SQL> DEFINE bldtable	= 'bme'
05:46:19 SQL> DEFINE scoretable = 'sme'
05:46:19 SQL> DEFINE case_id	= 'prdate'
05:46:19 SQL> 
05:46:19 SQL> -- Define a variable to help me exclude some columns from some data mining calls
05:46:19 SQL> DEFINE exclude1 = "'&target','&case_id'"
05:46:19 SQL> 
05:46:19 SQL> -- Builds an SVM model using pl/sql.
05:46:19 SQL> 
05:46:19 SQL> -----------------------------------------------------------------------
05:46:19 SQL> --			    BUILD THE MODEL
05:46:19 SQL> -----------------------------------------------------------------------
05:46:19 SQL> 
05:46:19 SQL> -- Cleanup old build data preparation objects for repeat runs
05:46:19 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.00
05:46:19 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
05:46:19 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.01
05:46:19 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.00
05:46:19 SQL> 
05:46:19 SQL> 
05:46:19 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
05:46:19 SQL> --
05:46:19 SQL> -- DROP	TABLE svmc_settings ;
05:46:19 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
05:46:19 SQL> -- DELETE svmc_settings;
05:46:19 SQL> 
05:46:19 SQL> -- The default classification algorithm is Naive Bayes. So override
05:46:19 SQL> -- this choice to SVM using a settings table.
05:46:19 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
05:46:19 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
05:46:19 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
05:46:19 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
05:46:19 SQL> -- models.
05:46:19 SQL> --
05:46:19 SQL> 
05:46:19 SQL> -- Do this once and then comment it out.
05:46:19 SQL> -- That makes script go faster.
05:46:19 SQL> -- BEGIN
05:46:19 SQL> -- -- Populate settings table
05:46:19 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
05:46:19 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
05:46:19 SQL> --
05:46:19 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
05:46:19 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
05:46:19 SQL> --
05:46:19 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
05:46:19 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
05:46:19 SQL> --   COMMIT;
05:46:19 SQL> -- END;
05:46:19 SQL> -- /
05:46:19 SQL> 
05:46:19 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
05:46:19 SQL> 
05:46:19 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
05:46:19   2  EXCEPTION WHEN OTHERS THEN NULL; END;
05:46:19   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.13
05:46:19 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
05:46:19   2  EXCEPTION WHEN OTHERS THEN NULL; END;
05:46:19   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
05:46:19 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
05:46:19   2  EXCEPTION WHEN OTHERS THEN NULL; END;
05:46:19   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
05:46:19 SQL> 
05:46:19 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
05:46:19   2  EXCEPTION WHEN OTHERS THEN NULL; END;
05:46:19   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
05:46:20 SQL> 
05:46:20 SQL> --------------------------------
05:46:20 SQL> -- PREPARE BUILD (TRAINING) DATA
05:46:20 SQL> --
05:46:20 SQL> 
05:46:20 SQL> -- 1. Missing Value treatment for all Predictors and
05:46:20 SQL> -- 2. Outlier Treatment and
05:46:20 SQL> -- 3. Normalization are performed below.
05:46:20 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
05:46:20 SQL> --    normalized here.
05:46:20 SQL> 
05:46:20 SQL> BEGIN
05:46:20   2  	-- Perform missing value treatment for all predictors
05:46:20   3  	-- create miss tables
05:46:20   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
05:46:20   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
05:46:20   6  
05:46:20   7  	-- populate miss tables
05:46:20   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
05:46:20   9  	  miss_table_name => 'svmc_miss_num',
05:46:20  10  	  data_table_name => '&bldtable',
05:46:20  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
05:46:20  12  
05:46:20  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
05:46:20  14  	  miss_table_name => 'svmc_miss_cat',
05:46:20  15  	  data_table_name => '&bldtable',
05:46:20  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
05:46:20  17  
05:46:20  18  	-- xform input data to replace missing values
05:46:20  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
05:46:20  20  	  miss_table_name => 'svmc_miss_num',
05:46:20  21  	  data_table_name => '&bldtable',
05:46:20  22  	  xform_view_name => 'xformed_build_miss_num');
05:46:20  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
05:46:20  24  	  miss_table_name => 'svmc_miss_cat',
05:46:20  25  	  data_table_name => '&bldtable',
05:46:20  26  	  xform_view_name => 'xformed_build_miss_cat');
05:46:20  27  
05:46:20  28  	-- Perform outlier treatment.
05:46:20  29  	-- create clip table
05:46:20  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
05:46:20  31  
05:46:20  32  	-- populate clip table
05:46:20  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
05:46:20  34  	  clip_table_name => 'svmc_clip',
05:46:20  35  	  data_table_name => '&bldtable',
05:46:20  36  	  tail_frac	  => 0.025,
05:46:20  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
05:46:20  38  
05:46:20  39  	-- xform input data to winsorized data
05:46:20  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
05:46:20  41  	  clip_table_name => 'svmc_clip',
05:46:20  42  	  data_table_name => '&bldtable',
05:46:20  43  	  xform_view_name => 'svmc_winsor');
05:46:20  44  
05:46:20  45  	-- create normalization table
05:46:20  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
05:46:20  47  
05:46:20  48  	-- populate normalization table based on winsorized data
05:46:20  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
05:46:20  50  	  norm_table_name => 'svmc_norm',
05:46:20  51  	  data_table_name => 'svmc_winsor',
05:46:20  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
05:46:20  53  
05:46:20  54  	-- normalize the original data
05:46:20  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
05:46:20  56  	  norm_table_name => 'svmc_norm',
05:46:20  57  	  data_table_name => '&bldtable',
05:46:20  58  	  xform_view_name => 'svmc_build_prep');
05:46:20  59  END;
05:46:20  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:18.11
05:46:38 SQL> 
05:46:38 SQL> ---------------------
05:46:38 SQL> -- CREATE A NEW MODEL
05:46:38 SQL> --
05:46:38 SQL> -- Cleanup old model with the same name for repeat runs
05:46:38 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
05:46:38   2  EXCEPTION WHEN OTHERS THEN NULL; END;
05:46:38   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.24
05:46:39 SQL> 
05:46:39 SQL> -- Build a new SVM Model
05:46:39 SQL> BEGIN
05:46:39   2  	DBMS_DATA_MINING.CREATE_MODEL(
05:46:39   3  	  model_name	      => '&model_name',
05:46:39   4  	  mining_function     => dbms_data_mining.classification,
05:46:39   5  	  data_table_name     => 'svmc_build_prep',
05:46:39   6  	  case_id_column_name => '&case_id',
05:46:39   7  	  target_column_name  => '&target',
05:46:39   8  	  settings_table_name => 'svmc_settings');
05:46:39   9  END;
05:46:39  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:25.97
05:47:05 SQL> 
05:47:05 SQL> -----------------------------------------------------------------------
05:47:05 SQL> --			       APPLY/score THE MODEL
05:47:05 SQL> -----------------------------------------------------------------------
05:47:05 SQL> 
05:47:05 SQL> -- Cleanup old scoring data preparation objects for repeat runs
05:47:05 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
05:47:05   2  EXCEPTION WHEN OTHERS THEN NULL; END;
05:47:05   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
05:47:05 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
05:47:05   2  EXCEPTION WHEN OTHERS THEN NULL; END;
05:47:05   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
05:47:05 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
05:47:05   2  EXCEPTION WHEN OTHERS THEN NULL; END;
05:47:05   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
05:47:05 SQL> -----------------------
05:47:05 SQL> -- PREPARE SCORING DATA
05:47:05 SQL> --
05:47:05 SQL> -- If the data for model creation has been prepared, then the data
05:47:05 SQL> -- to be scored using the model must be prepared in the same manner
05:47:05 SQL> -- in order to obtain meaningful results.
05:47:05 SQL> --
05:47:05 SQL> -- 1. Missing Value treatment for all Predictors and
05:47:05 SQL> -- 2. Normalization
05:47:05 SQL> -- No outlier treatment will be performed during test and apply. The
05:47:05 SQL> -- normalization step is sufficient, since the normalization parameters
05:47:05 SQL> -- already capture the effects of outlier treatment done with build data.
05:47:05 SQL> --
05:47:05 SQL> BEGIN
05:47:05   2  	-- Xform Test data to replace missing values
05:47:05   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
05:47:05   4  	  miss_table_name => 'svmc_miss_num',
05:47:05   5  	  data_table_name => '&scoretable',
05:47:05   6  	  xform_view_name => 'xformed_apply_miss_num');
05:47:05   7  
05:47:05   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
05:47:05   9  	  miss_table_name => 'svmc_miss_cat',
05:47:05  10  	  data_table_name => '&scoretable',
05:47:05  11  	  xform_view_name => 'xformed_apply_miss_cat');
05:47:05  12  
05:47:05  13  	-- Normalize the data to be scored
05:47:05  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
05:47:05  15  	  norm_table_name => 'svmc_norm',
05:47:05  16  	  data_table_name => '&scoretable',
05:47:05  17  	  xform_view_name => 'svmc_apply_prep');
05:47:05  18  END;
05:47:05  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.24
05:47:06 SQL> 
05:47:06 SQL> -- Use same model_name used in score_gattn.sql
05:47:06 SQL> DEFINE model_name = 'forex14'
05:47:06 SQL> 
05:47:06 SQL> DELETE fxscores6_gattn WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.09
05:47:06 SQL> 
05:47:06 SQL> INSERT INTO fxscores6_gattn (prdate,score,rundate,pair,ydate)
05:47:06   2  SELECT
05:47:06   3  prdate
05:47:06   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
05:47:06   5  ,sysdate
05:47:06   6  ,SUBSTR(prdate,1,3)pair
05:47:06   7  ,SUBSTR(prdate,4,19)ydate
05:47:06   8  FROM svmc_apply_prep
05:47:06   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.28
05:47:07 SQL> @aud_score1day_gattn.sql	2011-01-03 05:25:00
05:47:07 SQL> --
05:47:07 SQL> -- aud_score1day_gattn.sql
05:47:07 SQL> --
05:47:07 SQL> 
05:47:07 SQL> CREATE OR REPLACE VIEW sme AS
05:47:07   2  SELECT
05:47:07   3  'aud'||m.ydate prdate
05:47:07   4  ,NULL gattn
05:47:07   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
05:47:07   6  ,eur_g00
05:47:07   7  ,eur_g01
05:47:07   8  ,eur_g02
05:47:07   9  ,eur_g03
05:47:07  10  ,eur_g04
05:47:07  11  ,eur_g05
05:47:07  12  ,eur_g06
05:47:07  13  ,eur_g07
05:47:07  14  ,eur_g08
05:47:07  15  ,eur_g09
05:47:07  16  ,eur_g10
05:47:07  17  ,eur_g11
05:47:07  18  ,eur_g12
05:47:07  19  ,eur_g13
05:47:07  20  ,eur_g14
05:47:07  21  ,eur_g15
05:47:07  22  ,eur_g16
05:47:07  23  ,eur_g17
05:47:07  24  ,eur_g18
05:47:07  25  ,eur_g19
05:47:07  26  ,eur_g20
05:47:07  27  ,eur_g21
05:47:07  28  ,eur_g22
05:47:07  29  ,eur_g23
05:47:07  30  ,eur_g24
05:47:07  31  ,eur_g25
05:47:07  32  ,eur_g26
05:47:07  33  ,eur_g27
05:47:07  34  ,eur_g28
05:47:07  35  ,eur_g29
05:47:07  36  ,eur_g30
05:47:07  37  ,eur_g31
05:47:07  38  ,eur_g32
05:47:07  39  ,eur_g33
05:47:07  40  ,eur_g34
05:47:07  41  ,eur_g35
05:47:07  42  ,eur_g36
05:47:07  43  ,eur_g37
05:47:07  44  ,eur_g38
05:47:07  45  ,eur_g39
05:47:07  46  ,eur_g40
05:47:07  47  ,eur_g41
05:47:07  48  ,aud_g00
05:47:07  49  ,aud_g01
05:47:07  50  ,aud_g02
05:47:07  51  ,aud_g03
05:47:07  52  ,aud_g04
05:47:07  53  ,aud_g05
05:47:07  54  ,aud_g06
05:47:07  55  ,aud_g07
05:47:07  56  ,aud_g08
05:47:07  57  ,aud_g09
05:47:07  58  ,aud_g10
05:47:07  59  ,aud_g11
05:47:07  60  ,aud_g12
05:47:07  61  ,aud_g13
05:47:07  62  ,aud_g14
05:47:07  63  ,aud_g15
05:47:07  64  ,aud_g16
05:47:07  65  ,aud_g17
05:47:07  66  ,aud_g18
05:47:07  67  ,aud_g19
05:47:07  68  ,aud_g20
05:47:07  69  ,aud_g21
05:47:07  70  ,aud_g22
05:47:07  71  ,aud_g23
05:47:07  72  ,aud_g24
05:47:07  73  ,aud_g25
05:47:07  74  ,aud_g26
05:47:07  75  ,aud_g27
05:47:07  76  ,aud_g28
05:47:07  77  ,aud_g29
05:47:07  78  ,aud_g30
05:47:07  79  ,aud_g31
05:47:07  80  ,aud_g32
05:47:07  81  ,aud_g33
05:47:07  82  ,aud_g34
05:47:07  83  ,aud_g35
05:47:07  84  ,aud_g36
05:47:07  85  ,aud_g37
05:47:07  86  ,aud_g38
05:47:07  87  ,aud_g39
05:47:07  88  ,aud_g40
05:47:07  89  ,aud_g41
05:47:07  90  ,gbp_g00
05:47:07  91  ,gbp_g01
05:47:07  92  ,gbp_g02
05:47:07  93  ,gbp_g03
05:47:07  94  ,gbp_g04
05:47:07  95  ,gbp_g05
05:47:07  96  ,gbp_g06
05:47:07  97  ,gbp_g07
05:47:07  98  ,gbp_g08
05:47:07  99  ,gbp_g09
05:47:07 100  ,gbp_g10
05:47:07 101  ,gbp_g11
05:47:07 102  ,gbp_g12
05:47:07 103  ,gbp_g13
05:47:07 104  ,gbp_g14
05:47:07 105  ,gbp_g15
05:47:07 106  ,gbp_g16
05:47:07 107  ,gbp_g17
05:47:07 108  ,gbp_g18
05:47:07 109  ,gbp_g19
05:47:07 110  ,gbp_g20
05:47:07 111  ,gbp_g21
05:47:07 112  ,gbp_g22
05:47:07 113  ,gbp_g23
05:47:07 114  ,gbp_g24
05:47:07 115  ,gbp_g25
05:47:07 116  ,gbp_g26
05:47:07 117  ,gbp_g27
05:47:07 118  ,gbp_g28
05:47:07 119  ,gbp_g29
05:47:07 120  ,gbp_g30
05:47:07 121  ,gbp_g31
05:47:07 122  ,gbp_g32
05:47:07 123  ,gbp_g33
05:47:07 124  ,gbp_g34
05:47:07 125  ,gbp_g35
05:47:07 126  ,gbp_g36
05:47:07 127  ,gbp_g37
05:47:07 128  ,gbp_g38
05:47:07 129  ,gbp_g39
05:47:07 130  ,gbp_g40
05:47:07 131  ,gbp_g41
05:47:07 132  ,jpy_g00
05:47:07 133  ,jpy_g01
05:47:07 134  ,jpy_g02
05:47:07 135  ,jpy_g03
05:47:07 136  ,jpy_g04
05:47:07 137  ,jpy_g05
05:47:07 138  ,jpy_g06
05:47:07 139  ,jpy_g07
05:47:07 140  ,jpy_g08
05:47:07 141  ,jpy_g09
05:47:07 142  ,jpy_g10
05:47:07 143  ,jpy_g11
05:47:07 144  ,jpy_g12
05:47:07 145  ,jpy_g13
05:47:07 146  ,jpy_g14
05:47:07 147  ,jpy_g15
05:47:07 148  ,jpy_g16
05:47:07 149  ,jpy_g17
05:47:07 150  ,jpy_g18
05:47:07 151  ,jpy_g19
05:47:07 152  ,jpy_g20
05:47:07 153  ,jpy_g21
05:47:07 154  ,jpy_g22
05:47:07 155  ,jpy_g23
05:47:07 156  ,jpy_g24
05:47:07 157  ,jpy_g25
05:47:07 158  ,jpy_g26
05:47:07 159  ,jpy_g27
05:47:07 160  ,jpy_g28
05:47:07 161  ,jpy_g29
05:47:07 162  ,jpy_g30
05:47:07 163  ,jpy_g31
05:47:07 164  ,jpy_g32
05:47:07 165  ,jpy_g33
05:47:07 166  ,jpy_g34
05:47:07 167  ,jpy_g35
05:47:07 168  ,jpy_g36
05:47:07 169  ,jpy_g37
05:47:07 170  ,jpy_g38
05:47:07 171  ,jpy_g39
05:47:07 172  ,jpy_g40
05:47:07 173  ,jpy_g41
05:47:07 174  ,cad_g00
05:47:07 175  ,cad_g01
05:47:07 176  ,cad_g02
05:47:07 177  ,cad_g03
05:47:07 178  ,cad_g04
05:47:07 179  ,cad_g05
05:47:07 180  ,cad_g06
05:47:07 181  ,cad_g07
05:47:07 182  ,cad_g08
05:47:07 183  ,cad_g09
05:47:07 184  ,cad_g10
05:47:07 185  ,cad_g11
05:47:07 186  ,cad_g12
05:47:07 187  ,cad_g13
05:47:07 188  ,cad_g14
05:47:07 189  ,cad_g15
05:47:07 190  ,cad_g16
05:47:07 191  ,cad_g17
05:47:07 192  ,cad_g18
05:47:07 193  ,cad_g19
05:47:07 194  ,cad_g20
05:47:07 195  ,cad_g21
05:47:07 196  ,cad_g22
05:47:07 197  ,cad_g23
05:47:07 198  ,cad_g24
05:47:07 199  ,cad_g25
05:47:07 200  ,cad_g26
05:47:07 201  ,cad_g27
05:47:07 202  ,cad_g28
05:47:07 203  ,cad_g29
05:47:07 204  ,cad_g30
05:47:07 205  ,cad_g31
05:47:07 206  ,cad_g32
05:47:07 207  ,cad_g33
05:47:07 208  ,cad_g34
05:47:07 209  ,cad_g35
05:47:07 210  ,cad_g36
05:47:07 211  ,cad_g37
05:47:07 212  ,cad_g38
05:47:07 213  ,cad_g39
05:47:07 214  ,cad_g40
05:47:07 215  ,cad_g41
05:47:07 216  ,chf_g00
05:47:07 217  ,chf_g01
05:47:07 218  ,chf_g02
05:47:07 219  ,chf_g03
05:47:07 220  ,chf_g04
05:47:07 221  ,chf_g05
05:47:07 222  ,chf_g06
05:47:07 223  ,chf_g07
05:47:07 224  ,chf_g08
05:47:07 225  ,chf_g09
05:47:07 226  ,chf_g10
05:47:07 227  ,chf_g11
05:47:07 228  ,chf_g12
05:47:07 229  ,chf_g13
05:47:07 230  ,chf_g14
05:47:07 231  ,chf_g15
05:47:07 232  ,chf_g16
05:47:07 233  ,chf_g17
05:47:07 234  ,chf_g18
05:47:07 235  ,chf_g19
05:47:07 236  ,chf_g20
05:47:07 237  ,chf_g21
05:47:07 238  ,chf_g22
05:47:07 239  ,chf_g23
05:47:07 240  ,chf_g24
05:47:07 241  ,chf_g25
05:47:07 242  ,chf_g26
05:47:07 243  ,chf_g27
05:47:07 244  ,chf_g28
05:47:07 245  ,chf_g29
05:47:07 246  ,chf_g30
05:47:07 247  ,chf_g31
05:47:07 248  ,chf_g32
05:47:07 249  ,chf_g33
05:47:07 250  ,chf_g34
05:47:07 251  ,chf_g35
05:47:07 252  ,chf_g36
05:47:07 253  ,chf_g37
05:47:07 254  ,chf_g38
05:47:07 255  ,chf_g39
05:47:07 256  ,chf_g40
05:47:07 257  ,chf_g41
05:47:07 258  FROM aud_ms6 m
05:47:07 259  WHERE m.ydate = '&1'||' '||'&2'
05:47:07 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2011-01-03'||' '||'05:25:00'

View created.

Elapsed: 00:00:00.13
05:47:07 SQL> 
05:47:07 SQL> -- rpt
05:47:07 SQL> -- We should see just 1 row:
05:47:07 SQL> 
05:47:07 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
05:47:07 SQL> 
05:47:07 SQL> -- Build the model:
05:47:07 SQL> CREATE OR REPLACE VIEW bme AS
05:47:07   2  SELECT
05:47:07   3  'aud'||m.ydate prdate
05:47:07   4  ,gattn
05:47:07   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
05:47:07   6  ,eur_g00
05:47:07   7  ,eur_g01
05:47:07   8  ,eur_g02
05:47:07   9  ,eur_g03
05:47:07  10  ,eur_g04
05:47:07  11  ,eur_g05
05:47:07  12  ,eur_g06
05:47:07  13  ,eur_g07
05:47:07  14  ,eur_g08
05:47:07  15  ,eur_g09
05:47:07  16  ,eur_g10
05:47:07  17  ,eur_g11
05:47:07  18  ,eur_g12
05:47:07  19  ,eur_g13
05:47:07  20  ,eur_g14
05:47:07  21  ,eur_g15
05:47:07  22  ,eur_g16
05:47:07  23  ,eur_g17
05:47:07  24  ,eur_g18
05:47:07  25  ,eur_g19
05:47:07  26  ,eur_g20
05:47:07  27  ,eur_g21
05:47:07  28  ,eur_g22
05:47:07  29  ,eur_g23
05:47:07  30  ,eur_g24
05:47:07  31  ,eur_g25
05:47:07  32  ,eur_g26
05:47:07  33  ,eur_g27
05:47:07  34  ,eur_g28
05:47:07  35  ,eur_g29
05:47:07  36  ,eur_g30
05:47:07  37  ,eur_g31
05:47:07  38  ,eur_g32
05:47:07  39  ,eur_g33
05:47:07  40  ,eur_g34
05:47:07  41  ,eur_g35
05:47:07  42  ,eur_g36
05:47:07  43  ,eur_g37
05:47:07  44  ,eur_g38
05:47:07  45  ,eur_g39
05:47:07  46  ,eur_g40
05:47:07  47  ,eur_g41
05:47:07  48  ,aud_g00
05:47:07  49  ,aud_g01
05:47:07  50  ,aud_g02
05:47:07  51  ,aud_g03
05:47:07  52  ,aud_g04
05:47:07  53  ,aud_g05
05:47:07  54  ,aud_g06
05:47:07  55  ,aud_g07
05:47:07  56  ,aud_g08
05:47:07  57  ,aud_g09
05:47:07  58  ,aud_g10
05:47:07  59  ,aud_g11
05:47:07  60  ,aud_g12
05:47:07  61  ,aud_g13
05:47:07  62  ,aud_g14
05:47:07  63  ,aud_g15
05:47:07  64  ,aud_g16
05:47:07  65  ,aud_g17
05:47:07  66  ,aud_g18
05:47:07  67  ,aud_g19
05:47:07  68  ,aud_g20
05:47:07  69  ,aud_g21
05:47:07  70  ,aud_g22
05:47:07  71  ,aud_g23
05:47:07  72  ,aud_g24
05:47:07  73  ,aud_g25
05:47:07  74  ,aud_g26
05:47:07  75  ,aud_g27
05:47:07  76  ,aud_g28
05:47:07  77  ,aud_g29
05:47:07  78  ,aud_g30
05:47:07  79  ,aud_g31
05:47:07  80  ,aud_g32
05:47:07  81  ,aud_g33
05:47:07  82  ,aud_g34
05:47:07  83  ,aud_g35
05:47:07  84  ,aud_g36
05:47:07  85  ,aud_g37
05:47:07  86  ,aud_g38
05:47:07  87  ,aud_g39
05:47:07  88  ,aud_g40
05:47:07  89  ,aud_g41
05:47:07  90  ,gbp_g00
05:47:07  91  ,gbp_g01
05:47:07  92  ,gbp_g02
05:47:07  93  ,gbp_g03
05:47:07  94  ,gbp_g04
05:47:07  95  ,gbp_g05
05:47:07  96  ,gbp_g06
05:47:07  97  ,gbp_g07
05:47:07  98  ,gbp_g08
05:47:07  99  ,gbp_g09
05:47:07 100  ,gbp_g10
05:47:07 101  ,gbp_g11
05:47:07 102  ,gbp_g12
05:47:07 103  ,gbp_g13
05:47:07 104  ,gbp_g14
05:47:07 105  ,gbp_g15
05:47:07 106  ,gbp_g16
05:47:07 107  ,gbp_g17
05:47:07 108  ,gbp_g18
05:47:07 109  ,gbp_g19
05:47:07 110  ,gbp_g20
05:47:07 111  ,gbp_g21
05:47:07 112  ,gbp_g22
05:47:07 113  ,gbp_g23
05:47:07 114  ,gbp_g24
05:47:07 115  ,gbp_g25
05:47:07 116  ,gbp_g26
05:47:07 117  ,gbp_g27
05:47:07 118  ,gbp_g28
05:47:07 119  ,gbp_g29
05:47:07 120  ,gbp_g30
05:47:07 121  ,gbp_g31
05:47:07 122  ,gbp_g32
05:47:07 123  ,gbp_g33
05:47:07 124  ,gbp_g34
05:47:07 125  ,gbp_g35
05:47:07 126  ,gbp_g36
05:47:07 127  ,gbp_g37
05:47:07 128  ,gbp_g38
05:47:07 129  ,gbp_g39
05:47:07 130  ,gbp_g40
05:47:07 131  ,gbp_g41
05:47:07 132  ,jpy_g00
05:47:07 133  ,jpy_g01
05:47:07 134  ,jpy_g02
05:47:07 135  ,jpy_g03
05:47:07 136  ,jpy_g04
05:47:07 137  ,jpy_g05
05:47:07 138  ,jpy_g06
05:47:07 139  ,jpy_g07
05:47:07 140  ,jpy_g08
05:47:07 141  ,jpy_g09
05:47:07 142  ,jpy_g10
05:47:07 143  ,jpy_g11
05:47:07 144  ,jpy_g12
05:47:07 145  ,jpy_g13
05:47:07 146  ,jpy_g14
05:47:07 147  ,jpy_g15
05:47:07 148  ,jpy_g16
05:47:07 149  ,jpy_g17
05:47:07 150  ,jpy_g18
05:47:07 151  ,jpy_g19
05:47:07 152  ,jpy_g20
05:47:07 153  ,jpy_g21
05:47:07 154  ,jpy_g22
05:47:07 155  ,jpy_g23
05:47:07 156  ,jpy_g24
05:47:07 157  ,jpy_g25
05:47:07 158  ,jpy_g26
05:47:07 159  ,jpy_g27
05:47:07 160  ,jpy_g28
05:47:07 161  ,jpy_g29
05:47:07 162  ,jpy_g30
05:47:07 163  ,jpy_g31
05:47:07 164  ,jpy_g32
05:47:07 165  ,jpy_g33
05:47:07 166  ,jpy_g34
05:47:07 167  ,jpy_g35
05:47:07 168  ,jpy_g36
05:47:07 169  ,jpy_g37
05:47:07 170  ,jpy_g38
05:47:07 171  ,jpy_g39
05:47:07 172  ,jpy_g40
05:47:07 173  ,jpy_g41
05:47:07 174  ,cad_g00
05:47:07 175  ,cad_g01
05:47:07 176  ,cad_g02
05:47:07 177  ,cad_g03
05:47:07 178  ,cad_g04
05:47:07 179  ,cad_g05
05:47:07 180  ,cad_g06
05:47:07 181  ,cad_g07
05:47:07 182  ,cad_g08
05:47:07 183  ,cad_g09
05:47:07 184  ,cad_g10
05:47:07 185  ,cad_g11
05:47:07 186  ,cad_g12
05:47:07 187  ,cad_g13
05:47:07 188  ,cad_g14
05:47:07 189  ,cad_g15
05:47:07 190  ,cad_g16
05:47:07 191  ,cad_g17
05:47:07 192  ,cad_g18
05:47:07 193  ,cad_g19
05:47:07 194  ,cad_g20
05:47:07 195  ,cad_g21
05:47:07 196  ,cad_g22
05:47:07 197  ,cad_g23
05:47:07 198  ,cad_g24
05:47:07 199  ,cad_g25
05:47:07 200  ,cad_g26
05:47:07 201  ,cad_g27
05:47:07 202  ,cad_g28
05:47:07 203  ,cad_g29
05:47:07 204  ,cad_g30
05:47:07 205  ,cad_g31
05:47:07 206  ,cad_g32
05:47:07 207  ,cad_g33
05:47:07 208  ,cad_g34
05:47:07 209  ,cad_g35
05:47:07 210  ,cad_g36
05:47:07 211  ,cad_g37
05:47:07 212  ,cad_g38
05:47:07 213  ,cad_g39
05:47:07 214  ,cad_g40
05:47:07 215  ,cad_g41
05:47:07 216  ,chf_g00
05:47:07 217  ,chf_g01
05:47:07 218  ,chf_g02
05:47:07 219  ,chf_g03
05:47:07 220  ,chf_g04
05:47:07 221  ,chf_g05
05:47:07 222  ,chf_g06
05:47:07 223  ,chf_g07
05:47:07 224  ,chf_g08
05:47:07 225  ,chf_g09
05:47:07 226  ,chf_g10
05:47:07 227  ,chf_g11
05:47:07 228  ,chf_g12
05:47:07 229  ,chf_g13
05:47:07 230  ,chf_g14
05:47:07 231  ,chf_g15
05:47:07 232  ,chf_g16
05:47:07 233  ,chf_g17
05:47:07 234  ,chf_g18
05:47:07 235  ,chf_g19
05:47:07 236  ,chf_g20
05:47:07 237  ,chf_g21
05:47:07 238  ,chf_g22
05:47:07 239  ,chf_g23
05:47:07 240  ,chf_g24
05:47:07 241  ,chf_g25
05:47:07 242  ,chf_g26
05:47:07 243  ,chf_g27
05:47:07 244  ,chf_g28
05:47:07 245  ,chf_g29
05:47:07 246  ,chf_g30
05:47:07 247  ,chf_g31
05:47:07 248  ,chf_g32
05:47:07 249  ,chf_g33
05:47:07 250  ,chf_g34
05:47:07 251  ,chf_g35
05:47:07 252  ,chf_g36
05:47:07 253  ,chf_g37
05:47:07 254  ,chf_g38
05:47:07 255  ,chf_g39
05:47:07 256  ,chf_g40
05:47:07 257  ,chf_g41
05:47:07 258  FROM aud_ms6 m
05:47:07 259  WHERE gattn IN('nup','up')
05:47:07 260  AND 1+m.ydate < '&1'||' '||'&2'
05:47:07 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2011-01-03'||' '||'05:25:00'

View created.

Elapsed: 00:00:00.17
05:47:07 SQL> 
05:47:07 SQL> -- rpt
05:47:07 SQL> 
05:47:07 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	    12823
up	     6334

Elapsed: 00:00:00.04
05:47:07 SQL> 
05:47:07 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
aud2010-12-31 21:55:00

Elapsed: 00:00:00.04
05:47:07 SQL> 
05:47:07 SQL> -- Now build model from bme and score sme
05:47:07 SQL> @score1gattn.sql
05:47:07 SQL> -- score1gattn.sql
05:47:07 SQL> 
05:47:07 SQL> -- Does the 1st SVM score
05:47:07 SQL> 
05:47:07 SQL> -- Fill up svmc_apply_prep
05:47:07 SQL> @score_gattn.sql
05:47:07 SQL> --
05:47:07 SQL> -- score_gattn.sql
05:47:07 SQL> --
05:47:07 SQL> 
05:47:07 SQL> -- usage: score_gattn.sql
05:47:07 SQL> 
05:47:07 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
05:47:07 SQL> 
05:47:07 SQL> DEFINE target	= 'gattn'
05:47:07 SQL> DEFINE model_name = 'forex14'
05:47:07 SQL> DEFINE bldtable	= 'bme'
05:47:07 SQL> DEFINE scoretable = 'sme'
05:47:07 SQL> DEFINE case_id	= 'prdate'
05:47:07 SQL> 
05:47:07 SQL> -- Define a variable to help me exclude some columns from some data mining calls
05:47:07 SQL> DEFINE exclude1 = "'&target','&case_id'"
05:47:07 SQL> 
05:47:07 SQL> -- Builds an SVM model using pl/sql.
05:47:07 SQL> 
05:47:07 SQL> -----------------------------------------------------------------------
05:47:07 SQL> --			    BUILD THE MODEL
05:47:07 SQL> -----------------------------------------------------------------------
05:47:07 SQL> 
05:47:07 SQL> -- Cleanup old build data preparation objects for repeat runs
05:47:07 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.00
05:47:07 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
05:47:07 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.01
05:47:07 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.00
05:47:07 SQL> 
05:47:07 SQL> 
05:47:07 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
05:47:07 SQL> --
05:47:07 SQL> -- DROP	TABLE svmc_settings ;
05:47:07 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
05:47:07 SQL> -- DELETE svmc_settings;
05:47:07 SQL> 
05:47:07 SQL> -- The default classification algorithm is Naive Bayes. So override
05:47:07 SQL> -- this choice to SVM using a settings table.
05:47:07 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
05:47:07 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
05:47:07 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
05:47:07 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
05:47:07 SQL> -- models.
05:47:07 SQL> --
05:47:07 SQL> 
05:47:07 SQL> -- Do this once and then comment it out.
05:47:07 SQL> -- That makes script go faster.
05:47:07 SQL> -- BEGIN
05:47:07 SQL> -- -- Populate settings table
05:47:07 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
05:47:07 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
05:47:07 SQL> --
05:47:07 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
05:47:07 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
05:47:07 SQL> --
05:47:07 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
05:47:07 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
05:47:07 SQL> --   COMMIT;
05:47:07 SQL> -- END;
05:47:07 SQL> -- /
05:47:07 SQL> 
05:47:07 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
05:47:07 SQL> 
05:47:07 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
05:47:07   2  EXCEPTION WHEN OTHERS THEN NULL; END;
05:47:07   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.10
05:47:07 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
05:47:07   2  EXCEPTION WHEN OTHERS THEN NULL; END;
05:47:07   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
05:47:07 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
05:47:07   2  EXCEPTION WHEN OTHERS THEN NULL; END;
05:47:07   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
05:47:07 SQL> 
05:47:07 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
05:47:07   2  EXCEPTION WHEN OTHERS THEN NULL; END;
05:47:07   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
05:47:07 SQL> 
05:47:07 SQL> --------------------------------
05:47:07 SQL> -- PREPARE BUILD (TRAINING) DATA
05:47:07 SQL> --
05:47:07 SQL> 
05:47:07 SQL> -- 1. Missing Value treatment for all Predictors and
05:47:07 SQL> -- 2. Outlier Treatment and
05:47:07 SQL> -- 3. Normalization are performed below.
05:47:07 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
05:47:07 SQL> --    normalized here.
05:47:07 SQL> 
05:47:07 SQL> BEGIN
05:47:07   2  	-- Perform missing value treatment for all predictors
05:47:07   3  	-- create miss tables
05:47:07   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
05:47:07   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
05:47:07   6  
05:47:07   7  	-- populate miss tables
05:47:07   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
05:47:07   9  	  miss_table_name => 'svmc_miss_num',
05:47:07  10  	  data_table_name => '&bldtable',
05:47:07  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
05:47:07  12  
05:47:07  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
05:47:07  14  	  miss_table_name => 'svmc_miss_cat',
05:47:07  15  	  data_table_name => '&bldtable',
05:47:07  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
05:47:07  17  
05:47:07  18  	-- xform input data to replace missing values
05:47:07  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
05:47:07  20  	  miss_table_name => 'svmc_miss_num',
05:47:07  21  	  data_table_name => '&bldtable',
05:47:07  22  	  xform_view_name => 'xformed_build_miss_num');
05:47:07  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
05:47:07  24  	  miss_table_name => 'svmc_miss_cat',
05:47:07  25  	  data_table_name => '&bldtable',
05:47:07  26  	  xform_view_name => 'xformed_build_miss_cat');
05:47:07  27  
05:47:07  28  	-- Perform outlier treatment.
05:47:07  29  	-- create clip table
05:47:07  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
05:47:07  31  
05:47:07  32  	-- populate clip table
05:47:07  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
05:47:07  34  	  clip_table_name => 'svmc_clip',
05:47:07  35  	  data_table_name => '&bldtable',
05:47:07  36  	  tail_frac	  => 0.025,
05:47:07  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
05:47:07  38  
05:47:07  39  	-- xform input data to winsorized data
05:47:07  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
05:47:07  41  	  clip_table_name => 'svmc_clip',
05:47:07  42  	  data_table_name => '&bldtable',
05:47:07  43  	  xform_view_name => 'svmc_winsor');
05:47:07  44  
05:47:07  45  	-- create normalization table
05:47:07  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
05:47:07  47  
05:47:07  48  	-- populate normalization table based on winsorized data
05:47:07  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
05:47:07  50  	  norm_table_name => 'svmc_norm',
05:47:07  51  	  data_table_name => 'svmc_winsor',
05:47:07  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
05:47:07  53  
05:47:07  54  	-- normalize the original data
05:47:07  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
05:47:07  56  	  norm_table_name => 'svmc_norm',
05:47:07  57  	  data_table_name => '&bldtable',
05:47:07  58  	  xform_view_name => 'svmc_build_prep');
05:47:07  59  END;
05:47:07  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:18.28
05:47:26 SQL> 
05:47:26 SQL> ---------------------
05:47:26 SQL> -- CREATE A NEW MODEL
05:47:26 SQL> --
05:47:26 SQL> -- Cleanup old model with the same name for repeat runs
05:47:26 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
05:47:26   2  EXCEPTION WHEN OTHERS THEN NULL; END;
05:47:26   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.32
05:47:27 SQL> 
05:47:27 SQL> -- Build a new SVM Model
05:47:27 SQL> BEGIN
05:47:27   2  	DBMS_DATA_MINING.CREATE_MODEL(
05:47:27   3  	  model_name	      => '&model_name',
05:47:27   4  	  mining_function     => dbms_data_mining.classification,
05:47:27   5  	  data_table_name     => 'svmc_build_prep',
05:47:27   6  	  case_id_column_name => '&case_id',
05:47:27   7  	  target_column_name  => '&target',
05:47:27   8  	  settings_table_name => 'svmc_settings');
05:47:27   9  END;
05:47:27  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:27.42
05:47:54 SQL> 
05:47:54 SQL> -----------------------------------------------------------------------
05:47:54 SQL> --			       APPLY/score THE MODEL
05:47:54 SQL> -----------------------------------------------------------------------
05:47:54 SQL> 
05:47:54 SQL> -- Cleanup old scoring data preparation objects for repeat runs
05:47:54 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
05:47:54   2  EXCEPTION WHEN OTHERS THEN NULL; END;
05:47:54   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
05:47:54 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
05:47:54   2  EXCEPTION WHEN OTHERS THEN NULL; END;
05:47:54   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
05:47:55 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
05:47:55   2  EXCEPTION WHEN OTHERS THEN NULL; END;
05:47:55   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
05:47:55 SQL> -----------------------
05:47:55 SQL> -- PREPARE SCORING DATA
05:47:55 SQL> --
05:47:55 SQL> -- If the data for model creation has been prepared, then the data
05:47:55 SQL> -- to be scored using the model must be prepared in the same manner
05:47:55 SQL> -- in order to obtain meaningful results.
05:47:55 SQL> --
05:47:55 SQL> -- 1. Missing Value treatment for all Predictors and
05:47:55 SQL> -- 2. Normalization
05:47:55 SQL> -- No outlier treatment will be performed during test and apply. The
05:47:55 SQL> -- normalization step is sufficient, since the normalization parameters
05:47:55 SQL> -- already capture the effects of outlier treatment done with build data.
05:47:55 SQL> --
05:47:55 SQL> BEGIN
05:47:55   2  	-- Xform Test data to replace missing values
05:47:55   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
05:47:55   4  	  miss_table_name => 'svmc_miss_num',
05:47:55   5  	  data_table_name => '&scoretable',
05:47:55   6  	  xform_view_name => 'xformed_apply_miss_num');
05:47:55   7  
05:47:55   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
05:47:55   9  	  miss_table_name => 'svmc_miss_cat',
05:47:55  10  	  data_table_name => '&scoretable',
05:47:55  11  	  xform_view_name => 'xformed_apply_miss_cat');
05:47:55  12  
05:47:55  13  	-- Normalize the data to be scored
05:47:55  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
05:47:55  15  	  norm_table_name => 'svmc_norm',
05:47:55  16  	  data_table_name => '&scoretable',
05:47:55  17  	  xform_view_name => 'svmc_apply_prep');
05:47:55  18  END;
05:47:55  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.46
05:47:56 SQL> 
05:47:56 SQL> -- Use same model_name used in score_gattn.sql
05:47:56 SQL> DEFINE model_name = 'forex14'
05:47:56 SQL> 
05:47:56 SQL> DELETE fxscores6_gattn WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.13
05:47:56 SQL> 
05:47:56 SQL> INSERT INTO fxscores6_gattn (prdate,score,rundate,pair,ydate)
05:47:56   2  SELECT
05:47:56   3  prdate
05:47:56   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
05:47:56   5  ,sysdate
05:47:56   6  ,SUBSTR(prdate,1,3)pair
05:47:56   7  ,SUBSTR(prdate,4,19)ydate
05:47:56   8  FROM svmc_apply_prep
05:47:56   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.22
05:47:56 SQL> @aud_score1day_gattn.sql	2011-01-03 05:30:00
05:47:56 SQL> --
05:47:56 SQL> -- aud_score1day_gattn.sql
05:47:56 SQL> --
05:47:56 SQL> 
05:47:56 SQL> CREATE OR REPLACE VIEW sme AS
05:47:56   2  SELECT
05:47:56   3  'aud'||m.ydate prdate
05:47:56   4  ,NULL gattn
05:47:56   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
05:47:56   6  ,eur_g00
05:47:56   7  ,eur_g01
05:47:56   8  ,eur_g02
05:47:56   9  ,eur_g03
05:47:56  10  ,eur_g04
05:47:56  11  ,eur_g05
05:47:56  12  ,eur_g06
05:47:56  13  ,eur_g07
05:47:56  14  ,eur_g08
05:47:56  15  ,eur_g09
05:47:56  16  ,eur_g10
05:47:56  17  ,eur_g11
05:47:56  18  ,eur_g12
05:47:56  19  ,eur_g13
05:47:56  20  ,eur_g14
05:47:56  21  ,eur_g15
05:47:56  22  ,eur_g16
05:47:56  23  ,eur_g17
05:47:56  24  ,eur_g18
05:47:56  25  ,eur_g19
05:47:56  26  ,eur_g20
05:47:56  27  ,eur_g21
05:47:56  28  ,eur_g22
05:47:56  29  ,eur_g23
05:47:56  30  ,eur_g24
05:47:56  31  ,eur_g25
05:47:56  32  ,eur_g26
05:47:56  33  ,eur_g27
05:47:56  34  ,eur_g28
05:47:56  35  ,eur_g29
05:47:56  36  ,eur_g30
05:47:56  37  ,eur_g31
05:47:56  38  ,eur_g32
05:47:56  39  ,eur_g33
05:47:56  40  ,eur_g34
05:47:56  41  ,eur_g35
05:47:56  42  ,eur_g36
05:47:56  43  ,eur_g37
05:47:56  44  ,eur_g38
05:47:56  45  ,eur_g39
05:47:56  46  ,eur_g40
05:47:56  47  ,eur_g41
05:47:56  48  ,aud_g00
05:47:56  49  ,aud_g01
05:47:56  50  ,aud_g02
05:47:56  51  ,aud_g03
05:47:56  52  ,aud_g04
05:47:56  53  ,aud_g05
05:47:56  54  ,aud_g06
05:47:56  55  ,aud_g07
05:47:56  56  ,aud_g08
05:47:56  57  ,aud_g09
05:47:56  58  ,aud_g10
05:47:56  59  ,aud_g11
05:47:56  60  ,aud_g12
05:47:56  61  ,aud_g13
05:47:56  62  ,aud_g14
05:47:56  63  ,aud_g15
05:47:56  64  ,aud_g16
05:47:56  65  ,aud_g17
05:47:56  66  ,aud_g18
05:47:56  67  ,aud_g19
05:47:56  68  ,aud_g20
05:47:56  69  ,aud_g21
05:47:56  70  ,aud_g22
05:47:56  71  ,aud_g23
05:47:56  72  ,aud_g24
05:47:56  73  ,aud_g25
05:47:56  74  ,aud_g26
05:47:56  75  ,aud_g27
05:47:56  76  ,aud_g28
05:47:56  77  ,aud_g29
05:47:56  78  ,aud_g30
05:47:56  79  ,aud_g31
05:47:56  80  ,aud_g32
05:47:56  81  ,aud_g33
05:47:56  82  ,aud_g34
05:47:56  83  ,aud_g35
05:47:56  84  ,aud_g36
05:47:56  85  ,aud_g37
05:47:56  86  ,aud_g38
05:47:56  87  ,aud_g39
05:47:56  88  ,aud_g40
05:47:56  89  ,aud_g41
05:47:56  90  ,gbp_g00
05:47:56  91  ,gbp_g01
05:47:56  92  ,gbp_g02
05:47:56  93  ,gbp_g03
05:47:56  94  ,gbp_g04
05:47:56  95  ,gbp_g05
05:47:56  96  ,gbp_g06
05:47:56  97  ,gbp_g07
05:47:56  98  ,gbp_g08
05:47:56  99  ,gbp_g09
05:47:56 100  ,gbp_g10
05:47:56 101  ,gbp_g11
05:47:56 102  ,gbp_g12
05:47:56 103  ,gbp_g13
05:47:56 104  ,gbp_g14
05:47:56 105  ,gbp_g15
05:47:56 106  ,gbp_g16
05:47:56 107  ,gbp_g17
05:47:56 108  ,gbp_g18
05:47:56 109  ,gbp_g19
05:47:56 110  ,gbp_g20
05:47:56 111  ,gbp_g21
05:47:56 112  ,gbp_g22
05:47:56 113  ,gbp_g23
05:47:56 114  ,gbp_g24
05:47:56 115  ,gbp_g25
05:47:56 116  ,gbp_g26
05:47:56 117  ,gbp_g27
05:47:56 118  ,gbp_g28
05:47:56 119  ,gbp_g29
05:47:56 120  ,gbp_g30
05:47:56 121  ,gbp_g31
05:47:56 122  ,gbp_g32
05:47:56 123  ,gbp_g33
05:47:56 124  ,gbp_g34
05:47:56 125  ,gbp_g35
05:47:56 126  ,gbp_g36
05:47:56 127  ,gbp_g37
05:47:56 128  ,gbp_g38
05:47:56 129  ,gbp_g39
05:47:56 130  ,gbp_g40
05:47:56 131  ,gbp_g41
05:47:56 132  ,jpy_g00
05:47:56 133  ,jpy_g01
05:47:56 134  ,jpy_g02
05:47:56 135  ,jpy_g03
05:47:56 136  ,jpy_g04
05:47:56 137  ,jpy_g05
05:47:56 138  ,jpy_g06
05:47:56 139  ,jpy_g07
05:47:56 140  ,jpy_g08
05:47:56 141  ,jpy_g09
05:47:56 142  ,jpy_g10
05:47:56 143  ,jpy_g11
05:47:56 144  ,jpy_g12
05:47:56 145  ,jpy_g13
05:47:56 146  ,jpy_g14
05:47:56 147  ,jpy_g15
05:47:56 148  ,jpy_g16
05:47:56 149  ,jpy_g17
05:47:56 150  ,jpy_g18
05:47:56 151  ,jpy_g19
05:47:56 152  ,jpy_g20
05:47:56 153  ,jpy_g21
05:47:56 154  ,jpy_g22
05:47:56 155  ,jpy_g23
05:47:56 156  ,jpy_g24
05:47:56 157  ,jpy_g25
05:47:56 158  ,jpy_g26
05:47:56 159  ,jpy_g27
05:47:56 160  ,jpy_g28
05:47:56 161  ,jpy_g29
05:47:56 162  ,jpy_g30
05:47:56 163  ,jpy_g31
05:47:56 164  ,jpy_g32
05:47:56 165  ,jpy_g33
05:47:56 166  ,jpy_g34
05:47:56 167  ,jpy_g35
05:47:56 168  ,jpy_g36
05:47:56 169  ,jpy_g37
05:47:56 170  ,jpy_g38
05:47:56 171  ,jpy_g39
05:47:56 172  ,jpy_g40
05:47:56 173  ,jpy_g41
05:47:56 174  ,cad_g00
05:47:56 175  ,cad_g01
05:47:56 176  ,cad_g02
05:47:56 177  ,cad_g03
05:47:56 178  ,cad_g04
05:47:56 179  ,cad_g05
05:47:56 180  ,cad_g06
05:47:56 181  ,cad_g07
05:47:56 182  ,cad_g08
05:47:56 183  ,cad_g09
05:47:56 184  ,cad_g10
05:47:56 185  ,cad_g11
05:47:56 186  ,cad_g12
05:47:56 187  ,cad_g13
05:47:56 188  ,cad_g14
05:47:56 189  ,cad_g15
05:47:56 190  ,cad_g16
05:47:56 191  ,cad_g17
05:47:56 192  ,cad_g18
05:47:56 193  ,cad_g19
05:47:56 194  ,cad_g20
05:47:56 195  ,cad_g21
05:47:56 196  ,cad_g22
05:47:56 197  ,cad_g23
05:47:56 198  ,cad_g24
05:47:56 199  ,cad_g25
05:47:56 200  ,cad_g26
05:47:56 201  ,cad_g27
05:47:56 202  ,cad_g28
05:47:56 203  ,cad_g29
05:47:56 204  ,cad_g30
05:47:56 205  ,cad_g31
05:47:56 206  ,cad_g32
05:47:56 207  ,cad_g33
05:47:56 208  ,cad_g34
05:47:56 209  ,cad_g35
05:47:56 210  ,cad_g36
05:47:56 211  ,cad_g37
05:47:56 212  ,cad_g38
05:47:56 213  ,cad_g39
05:47:56 214  ,cad_g40
05:47:56 215  ,cad_g41
05:47:56 216  ,chf_g00
05:47:56 217  ,chf_g01
05:47:56 218  ,chf_g02
05:47:56 219  ,chf_g03
05:47:56 220  ,chf_g04
05:47:56 221  ,chf_g05
05:47:56 222  ,chf_g06
05:47:56 223  ,chf_g07
05:47:56 224  ,chf_g08
05:47:56 225  ,chf_g09
05:47:56 226  ,chf_g10
05:47:56 227  ,chf_g11
05:47:56 228  ,chf_g12
05:47:56 229  ,chf_g13
05:47:56 230  ,chf_g14
05:47:56 231  ,chf_g15
05:47:56 232  ,chf_g16
05:47:56 233  ,chf_g17
05:47:56 234  ,chf_g18
05:47:56 235  ,chf_g19
05:47:56 236  ,chf_g20
05:47:56 237  ,chf_g21
05:47:56 238  ,chf_g22
05:47:56 239  ,chf_g23
05:47:56 240  ,chf_g24
05:47:56 241  ,chf_g25
05:47:56 242  ,chf_g26
05:47:56 243  ,chf_g27
05:47:56 244  ,chf_g28
05:47:56 245  ,chf_g29
05:47:56 246  ,chf_g30
05:47:56 247  ,chf_g31
05:47:56 248  ,chf_g32
05:47:56 249  ,chf_g33
05:47:56 250  ,chf_g34
05:47:56 251  ,chf_g35
05:47:56 252  ,chf_g36
05:47:56 253  ,chf_g37
05:47:56 254  ,chf_g38
05:47:56 255  ,chf_g39
05:47:56 256  ,chf_g40
05:47:56 257  ,chf_g41
05:47:56 258  FROM aud_ms6 m
05:47:56 259  WHERE m.ydate = '&1'||' '||'&2'
05:47:56 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2011-01-03'||' '||'05:30:00'

View created.

Elapsed: 00:00:00.11
05:47:57 SQL> 
05:47:57 SQL> -- rpt
05:47:57 SQL> -- We should see just 1 row:
05:47:57 SQL> 
05:47:57 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
05:47:57 SQL> 
05:47:57 SQL> -- Build the model:
05:47:57 SQL> CREATE OR REPLACE VIEW bme AS
05:47:57   2  SELECT
05:47:57   3  'aud'||m.ydate prdate
05:47:57   4  ,gattn
05:47:57   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
05:47:57   6  ,eur_g00
05:47:57   7  ,eur_g01
05:47:57   8  ,eur_g02
05:47:57   9  ,eur_g03
05:47:57  10  ,eur_g04
05:47:57  11  ,eur_g05
05:47:57  12  ,eur_g06
05:47:57  13  ,eur_g07
05:47:57  14  ,eur_g08
05:47:57  15  ,eur_g09
05:47:57  16  ,eur_g10
05:47:57  17  ,eur_g11
05:47:57  18  ,eur_g12
05:47:57  19  ,eur_g13
05:47:57  20  ,eur_g14
05:47:57  21  ,eur_g15
05:47:57  22  ,eur_g16
05:47:57  23  ,eur_g17
05:47:57  24  ,eur_g18
05:47:57  25  ,eur_g19
05:47:57  26  ,eur_g20
05:47:57  27  ,eur_g21
05:47:57  28  ,eur_g22
05:47:57  29  ,eur_g23
05:47:57  30  ,eur_g24
05:47:57  31  ,eur_g25
05:47:57  32  ,eur_g26
05:47:57  33  ,eur_g27
05:47:57  34  ,eur_g28
05:47:57  35  ,eur_g29
05:47:57  36  ,eur_g30
05:47:57  37  ,eur_g31
05:47:57  38  ,eur_g32
05:47:57  39  ,eur_g33
05:47:57  40  ,eur_g34
05:47:57  41  ,eur_g35
05:47:57  42  ,eur_g36
05:47:57  43  ,eur_g37
05:47:57  44  ,eur_g38
05:47:57  45  ,eur_g39
05:47:57  46  ,eur_g40
05:47:57  47  ,eur_g41
05:47:57  48  ,aud_g00
05:47:57  49  ,aud_g01
05:47:57  50  ,aud_g02
05:47:57  51  ,aud_g03
05:47:57  52  ,aud_g04
05:47:57  53  ,aud_g05
05:47:57  54  ,aud_g06
05:47:57  55  ,aud_g07
05:47:57  56  ,aud_g08
05:47:57  57  ,aud_g09
05:47:57  58  ,aud_g10
05:47:57  59  ,aud_g11
05:47:57  60  ,aud_g12
05:47:57  61  ,aud_g13
05:47:57  62  ,aud_g14
05:47:57  63  ,aud_g15
05:47:57  64  ,aud_g16
05:47:57  65  ,aud_g17
05:47:57  66  ,aud_g18
05:47:57  67  ,aud_g19
05:47:57  68  ,aud_g20
05:47:57  69  ,aud_g21
05:47:57  70  ,aud_g22
05:47:57  71  ,aud_g23
05:47:57  72  ,aud_g24
05:47:57  73  ,aud_g25
05:47:57  74  ,aud_g26
05:47:57  75  ,aud_g27
05:47:57  76  ,aud_g28
05:47:57  77  ,aud_g29
05:47:57  78  ,aud_g30
05:47:57  79  ,aud_g31
05:47:57  80  ,aud_g32
05:47:57  81  ,aud_g33
05:47:57  82  ,aud_g34
05:47:57  83  ,aud_g35
05:47:57  84  ,aud_g36
05:47:57  85  ,aud_g37
05:47:57  86  ,aud_g38
05:47:57  87  ,aud_g39
05:47:57  88  ,aud_g40
05:47:57  89  ,aud_g41
05:47:57  90  ,gbp_g00
05:47:57  91  ,gbp_g01
05:47:57  92  ,gbp_g02
05:47:57  93  ,gbp_g03
05:47:57  94  ,gbp_g04
05:47:57  95  ,gbp_g05
05:47:57  96  ,gbp_g06
05:47:57  97  ,gbp_g07
05:47:57  98  ,gbp_g08
05:47:57  99  ,gbp_g09
05:47:57 100  ,gbp_g10
05:47:57 101  ,gbp_g11
05:47:57 102  ,gbp_g12
05:47:57 103  ,gbp_g13
05:47:57 104  ,gbp_g14
05:47:57 105  ,gbp_g15
05:47:57 106  ,gbp_g16
05:47:57 107  ,gbp_g17
05:47:57 108  ,gbp_g18
05:47:57 109  ,gbp_g19
05:47:57 110  ,gbp_g20
05:47:57 111  ,gbp_g21
05:47:57 112  ,gbp_g22
05:47:57 113  ,gbp_g23
05:47:57 114  ,gbp_g24
05:47:57 115  ,gbp_g25
05:47:57 116  ,gbp_g26
05:47:57 117  ,gbp_g27
05:47:57 118  ,gbp_g28
05:47:57 119  ,gbp_g29
05:47:57 120  ,gbp_g30
05:47:57 121  ,gbp_g31
05:47:57 122  ,gbp_g32
05:47:57 123  ,gbp_g33
05:47:57 124  ,gbp_g34
05:47:57 125  ,gbp_g35
05:47:57 126  ,gbp_g36
05:47:57 127  ,gbp_g37
05:47:57 128  ,gbp_g38
05:47:57 129  ,gbp_g39
05:47:57 130  ,gbp_g40
05:47:57 131  ,gbp_g41
05:47:57 132  ,jpy_g00
05:47:57 133  ,jpy_g01
05:47:57 134  ,jpy_g02
05:47:57 135  ,jpy_g03
05:47:57 136  ,jpy_g04
05:47:57 137  ,jpy_g05
05:47:57 138  ,jpy_g06
05:47:57 139  ,jpy_g07
05:47:57 140  ,jpy_g08
05:47:57 141  ,jpy_g09
05:47:57 142  ,jpy_g10
05:47:57 143  ,jpy_g11
05:47:57 144  ,jpy_g12
05:47:57 145  ,jpy_g13
05:47:57 146  ,jpy_g14
05:47:57 147  ,jpy_g15
05:47:57 148  ,jpy_g16
05:47:57 149  ,jpy_g17
05:47:57 150  ,jpy_g18
05:47:57 151  ,jpy_g19
05:47:57 152  ,jpy_g20
05:47:57 153  ,jpy_g21
05:47:57 154  ,jpy_g22
05:47:57 155  ,jpy_g23
05:47:57 156  ,jpy_g24
05:47:57 157  ,jpy_g25
05:47:57 158  ,jpy_g26
05:47:57 159  ,jpy_g27
05:47:57 160  ,jpy_g28
05:47:57 161  ,jpy_g29
05:47:57 162  ,jpy_g30
05:47:57 163  ,jpy_g31
05:47:57 164  ,jpy_g32
05:47:57 165  ,jpy_g33
05:47:57 166  ,jpy_g34
05:47:57 167  ,jpy_g35
05:47:57 168  ,jpy_g36
05:47:57 169  ,jpy_g37
05:47:57 170  ,jpy_g38
05:47:57 171  ,jpy_g39
05:47:57 172  ,jpy_g40
05:47:57 173  ,jpy_g41
05:47:57 174  ,cad_g00
05:47:57 175  ,cad_g01
05:47:57 176  ,cad_g02
05:47:57 177  ,cad_g03
05:47:57 178  ,cad_g04
05:47:57 179  ,cad_g05
05:47:57 180  ,cad_g06
05:47:57 181  ,cad_g07
05:47:57 182  ,cad_g08
05:47:57 183  ,cad_g09
05:47:57 184  ,cad_g10
05:47:57 185  ,cad_g11
05:47:57 186  ,cad_g12
05:47:57 187  ,cad_g13
05:47:57 188  ,cad_g14
05:47:57 189  ,cad_g15
05:47:57 190  ,cad_g16
05:47:57 191  ,cad_g17
05:47:57 192  ,cad_g18
05:47:57 193  ,cad_g19
05:47:57 194  ,cad_g20
05:47:57 195  ,cad_g21
05:47:57 196  ,cad_g22
05:47:57 197  ,cad_g23
05:47:57 198  ,cad_g24
05:47:57 199  ,cad_g25
05:47:57 200  ,cad_g26
05:47:57 201  ,cad_g27
05:47:57 202  ,cad_g28
05:47:57 203  ,cad_g29
05:47:57 204  ,cad_g30
05:47:57 205  ,cad_g31
05:47:57 206  ,cad_g32
05:47:57 207  ,cad_g33
05:47:57 208  ,cad_g34
05:47:57 209  ,cad_g35
05:47:57 210  ,cad_g36
05:47:57 211  ,cad_g37
05:47:57 212  ,cad_g38
05:47:57 213  ,cad_g39
05:47:57 214  ,cad_g40
05:47:57 215  ,cad_g41
05:47:57 216  ,chf_g00
05:47:57 217  ,chf_g01
05:47:57 218  ,chf_g02
05:47:57 219  ,chf_g03
05:47:57 220  ,chf_g04
05:47:57 221  ,chf_g05
05:47:57 222  ,chf_g06
05:47:57 223  ,chf_g07
05:47:57 224  ,chf_g08
05:47:57 225  ,chf_g09
05:47:57 226  ,chf_g10
05:47:57 227  ,chf_g11
05:47:57 228  ,chf_g12
05:47:57 229  ,chf_g13
05:47:57 230  ,chf_g14
05:47:57 231  ,chf_g15
05:47:57 232  ,chf_g16
05:47:57 233  ,chf_g17
05:47:57 234  ,chf_g18
05:47:57 235  ,chf_g19
05:47:57 236  ,chf_g20
05:47:57 237  ,chf_g21
05:47:57 238  ,chf_g22
05:47:57 239  ,chf_g23
05:47:57 240  ,chf_g24
05:47:57 241  ,chf_g25
05:47:57 242  ,chf_g26
05:47:57 243  ,chf_g27
05:47:57 244  ,chf_g28
05:47:57 245  ,chf_g29
05:47:57 246  ,chf_g30
05:47:57 247  ,chf_g31
05:47:57 248  ,chf_g32
05:47:57 249  ,chf_g33
05:47:57 250  ,chf_g34
05:47:57 251  ,chf_g35
05:47:57 252  ,chf_g36
05:47:57 253  ,chf_g37
05:47:57 254  ,chf_g38
05:47:57 255  ,chf_g39
05:47:57 256  ,chf_g40
05:47:57 257  ,chf_g41
05:47:57 258  FROM aud_ms6 m
05:47:57 259  WHERE gattn IN('nup','up')
05:47:57 260  AND 1+m.ydate < '&1'||' '||'&2'
05:47:57 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2011-01-03'||' '||'05:30:00'

View created.

Elapsed: 00:00:00.14
05:47:57 SQL> 
05:47:57 SQL> -- rpt
05:47:57 SQL> 
05:47:57 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	    12823
up	     6334

Elapsed: 00:00:00.04
05:47:57 SQL> 
05:47:57 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
aud2010-12-31 21:55:00

Elapsed: 00:00:00.04
05:47:57 SQL> 
05:47:57 SQL> -- Now build model from bme and score sme
05:47:57 SQL> @score1gattn.sql
05:47:57 SQL> -- score1gattn.sql
05:47:57 SQL> 
05:47:57 SQL> -- Does the 1st SVM score
05:47:57 SQL> 
05:47:57 SQL> -- Fill up svmc_apply_prep
05:47:57 SQL> @score_gattn.sql
05:47:57 SQL> --
05:47:57 SQL> -- score_gattn.sql
05:47:57 SQL> --
05:47:57 SQL> 
05:47:57 SQL> -- usage: score_gattn.sql
05:47:57 SQL> 
05:47:57 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
05:47:57 SQL> 
05:47:57 SQL> DEFINE target	= 'gattn'
05:47:57 SQL> DEFINE model_name = 'forex14'
05:47:57 SQL> DEFINE bldtable	= 'bme'
05:47:57 SQL> DEFINE scoretable = 'sme'
05:47:57 SQL> DEFINE case_id	= 'prdate'
05:47:57 SQL> 
05:47:57 SQL> -- Define a variable to help me exclude some columns from some data mining calls
05:47:57 SQL> DEFINE exclude1 = "'&target','&case_id'"
05:47:57 SQL> 
05:47:57 SQL> -- Builds an SVM model using pl/sql.
05:47:57 SQL> 
05:47:57 SQL> -----------------------------------------------------------------------
05:47:57 SQL> --			    BUILD THE MODEL
05:47:57 SQL> -----------------------------------------------------------------------
05:47:57 SQL> 
05:47:57 SQL> -- Cleanup old build data preparation objects for repeat runs
05:47:57 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.01
05:47:57 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
05:47:57 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.00
05:47:57 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.01
05:47:57 SQL> 
05:47:57 SQL> 
05:47:57 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
05:47:57 SQL> --
05:47:57 SQL> -- DROP	TABLE svmc_settings ;
05:47:57 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
05:47:57 SQL> -- DELETE svmc_settings;
05:47:57 SQL> 
05:47:57 SQL> -- The default classification algorithm is Naive Bayes. So override
05:47:57 SQL> -- this choice to SVM using a settings table.
05:47:57 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
05:47:57 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
05:47:57 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
05:47:57 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
05:47:57 SQL> -- models.
05:47:57 SQL> --
05:47:57 SQL> 
05:47:57 SQL> -- Do this once and then comment it out.
05:47:57 SQL> -- That makes script go faster.
05:47:57 SQL> -- BEGIN
05:47:57 SQL> -- -- Populate settings table
05:47:57 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
05:47:57 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
05:47:57 SQL> --
05:47:57 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
05:47:57 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
05:47:57 SQL> --
05:47:57 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
05:47:57 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
05:47:57 SQL> --   COMMIT;
05:47:57 SQL> -- END;
05:47:57 SQL> -- /
05:47:57 SQL> 
05:47:57 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
05:47:57 SQL> 
05:47:57 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
05:47:57   2  EXCEPTION WHEN OTHERS THEN NULL; END;
05:47:57   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
05:47:57 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
05:47:57   2  EXCEPTION WHEN OTHERS THEN NULL; END;
05:47:57   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
05:47:57 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
05:47:57   2  EXCEPTION WHEN OTHERS THEN NULL; END;
05:47:57   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
05:47:57 SQL> 
05:47:57 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
05:47:57   2  EXCEPTION WHEN OTHERS THEN NULL; END;
05:47:57   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
05:47:57 SQL> 
05:47:57 SQL> --------------------------------
05:47:57 SQL> -- PREPARE BUILD (TRAINING) DATA
05:47:57 SQL> --
05:47:57 SQL> 
05:47:57 SQL> -- 1. Missing Value treatment for all Predictors and
05:47:57 SQL> -- 2. Outlier Treatment and
05:47:57 SQL> -- 3. Normalization are performed below.
05:47:57 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
05:47:57 SQL> --    normalized here.
05:47:57 SQL> 
05:47:57 SQL> BEGIN
05:47:57   2  	-- Perform missing value treatment for all predictors
05:47:57   3  	-- create miss tables
05:47:57   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
05:47:57   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
05:47:57   6  
05:47:57   7  	-- populate miss tables
05:47:57   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
05:47:57   9  	  miss_table_name => 'svmc_miss_num',
05:47:57  10  	  data_table_name => '&bldtable',
05:47:57  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
05:47:57  12  
05:47:57  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
05:47:57  14  	  miss_table_name => 'svmc_miss_cat',
05:47:57  15  	  data_table_name => '&bldtable',
05:47:57  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
05:47:57  17  
05:47:57  18  	-- xform input data to replace missing values
05:47:57  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
05:47:57  20  	  miss_table_name => 'svmc_miss_num',
05:47:57  21  	  data_table_name => '&bldtable',
05:47:57  22  	  xform_view_name => 'xformed_build_miss_num');
05:47:57  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
05:47:57  24  	  miss_table_name => 'svmc_miss_cat',
05:47:57  25  	  data_table_name => '&bldtable',
05:47:57  26  	  xform_view_name => 'xformed_build_miss_cat');
05:47:57  27  
05:47:57  28  	-- Perform outlier treatment.
05:47:57  29  	-- create clip table
05:47:57  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
05:47:57  31  
05:47:57  32  	-- populate clip table
05:47:57  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
05:47:57  34  	  clip_table_name => 'svmc_clip',
05:47:57  35  	  data_table_name => '&bldtable',
05:47:57  36  	  tail_frac	  => 0.025,
05:47:57  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
05:47:57  38  
05:47:57  39  	-- xform input data to winsorized data
05:47:57  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
05:47:57  41  	  clip_table_name => 'svmc_clip',
05:47:57  42  	  data_table_name => '&bldtable',
05:47:57  43  	  xform_view_name => 'svmc_winsor');
05:47:57  44  
05:47:57  45  	-- create normalization table
05:47:57  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
05:47:57  47  
05:47:57  48  	-- populate normalization table based on winsorized data
05:47:57  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
05:47:57  50  	  norm_table_name => 'svmc_norm',
05:47:57  51  	  data_table_name => 'svmc_winsor',
05:47:57  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
05:47:57  53  
05:47:57  54  	-- normalize the original data
05:47:57  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
05:47:57  56  	  norm_table_name => 'svmc_norm',
05:47:57  57  	  data_table_name => '&bldtable',
05:47:57  58  	  xform_view_name => 'svmc_build_prep');
05:47:57  59  END;
05:47:57  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:18.39
05:48:15 SQL> 
05:48:15 SQL> ---------------------
05:48:15 SQL> -- CREATE A NEW MODEL
05:48:15 SQL> --
05:48:15 SQL> -- Cleanup old model with the same name for repeat runs
05:48:15 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
05:48:15   2  EXCEPTION WHEN OTHERS THEN NULL; END;
05:48:15   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex14');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.14
05:48:17 SQL> 
05:48:17 SQL> -- Build a new SVM Model
05:48:17 SQL> BEGIN
05:48:17   2  	DBMS_DATA_MINING.CREATE_MODEL(
05:48:17   3  	  model_name	      => '&model_name',
05:48:17   4  	  mining_function     => dbms_data_mining.classification,
05:48:17   5  	  data_table_name     => 'svmc_build_prep',
05:48:17   6  	  case_id_column_name => '&case_id',
05:48:17   7  	  target_column_name  => '&target',
05:48:17   8  	  settings_table_name => 'svmc_settings');
05:48:17   9  END;
05:48:17  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex14',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:26.68
05:48:43 SQL> 
05:48:43 SQL> -----------------------------------------------------------------------
05:48:43 SQL> --			       APPLY/score THE MODEL
05:48:43 SQL> -----------------------------------------------------------------------
05:48:43 SQL> 
05:48:43 SQL> -- Cleanup old scoring data preparation objects for repeat runs
05:48:43 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
05:48:43   2  EXCEPTION WHEN OTHERS THEN NULL; END;
05:48:43   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
05:48:43 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
05:48:43   2  EXCEPTION WHEN OTHERS THEN NULL; END;
05:48:43   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
05:48:43 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
05:48:43   2  EXCEPTION WHEN OTHERS THEN NULL; END;
05:48:43   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
05:48:43 SQL> -----------------------
05:48:43 SQL> -- PREPARE SCORING DATA
05:48:43 SQL> --
05:48:43 SQL> -- If the data for model creation has been prepared, then the data
05:48:43 SQL> -- to be scored using the model must be prepared in the same manner
05:48:43 SQL> -- in order to obtain meaningful results.
05:48:43 SQL> --
05:48:43 SQL> -- 1. Missing Value treatment for all Predictors and
05:48:43 SQL> -- 2. Normalization
05:48:43 SQL> -- No outlier treatment will be performed during test and apply. The
05:48:43 SQL> -- normalization step is sufficient, since the normalization parameters
05:48:43 SQL> -- already capture the effects of outlier treatment done with build data.
05:48:43 SQL> --
05:48:43 SQL> BEGIN
05:48:43   2  	-- Xform Test data to replace missing values
05:48:43   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
05:48:43   4  	  miss_table_name => 'svmc_miss_num',
05:48:43   5  	  data_table_name => '&scoretable',
05:48:43   6  	  xform_view_name => 'xformed_apply_miss_num');
05:48:43   7  
05:48:43   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
05:48:43   9  	  miss_table_name => 'svmc_miss_cat',
05:48:43  10  	  data_table_name => '&scoretable',
05:48:43  11  	  xform_view_name => 'xformed_apply_miss_cat');
05:48:43  12  
05:48:43  13  	-- Normalize the data to be scored
05:48:43  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
05:48:43  15  	  norm_table_name => 'svmc_norm',
05:48:43  16  	  data_table_name => '&scoretable',
05:48:43  17  	  xform_view_name => 'svmc_apply_prep');
05:48:43  18  END;
05:48:43  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.25
05:48:45 SQL> 
05:48:45 SQL> -- Use same model_name used in score_gattn.sql
05:48:45 SQL> DEFINE model_name = 'forex14'
05:48:45 SQL> 
05:48:45 SQL> DELETE fxscores6_gattn WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.04
05:48:45 SQL> 
05:48:45 SQL> INSERT INTO fxscores6_gattn (prdate,score,rundate,pair,ydate)
05:48:45   2  SELECT
05:48:45   3  prdate
05:48:45   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
05:48:45   5  ,sysdate
05:48:45   6  ,SUBSTR(prdate,1,3)pair
05:48:45   7  ,SUBSTR(prdate,4,19)ydate
05:48:45   8  FROM svmc_apply_prep
05:48:45   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex14,'up' USING *)score

1 row created.

Elapsed: 00:00:00.16
05:48:45 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
