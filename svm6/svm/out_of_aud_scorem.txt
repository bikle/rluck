
SQL*Plus: Release 11.2.0.1.0 Production on Wed Jan 5 03:04:06 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

03:04:06 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
03:04:06 SQL> 03:04:06 SQL> @aud_score1day.sql  2011-01-05 02:40:00
03:04:06 SQL> --
03:04:06 SQL> -- aud_score1day.sql
03:04:06 SQL> --
03:04:06 SQL> 
03:04:06 SQL> CREATE OR REPLACE VIEW sme AS
03:04:06   2  SELECT
03:04:06   3  'aud'||m.ydate prdate
03:04:06   4  ,NULL gatt
03:04:06   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
03:04:06   6  ,eur_g00
03:04:06   7  ,eur_g01
03:04:06   8  ,eur_g02
03:04:06   9  ,eur_g03
03:04:06  10  ,eur_g04
03:04:06  11  ,eur_g05
03:04:06  12  ,eur_g06
03:04:06  13  ,eur_g07
03:04:06  14  ,eur_g08
03:04:06  15  ,eur_g09
03:04:06  16  ,eur_g10
03:04:06  17  ,eur_g11
03:04:06  18  ,eur_g12
03:04:06  19  ,eur_g13
03:04:06  20  ,eur_g14
03:04:06  21  ,eur_g15
03:04:06  22  ,eur_g16
03:04:06  23  ,eur_g17
03:04:06  24  ,eur_g18
03:04:06  25  ,eur_g19
03:04:06  26  ,eur_g20
03:04:06  27  ,eur_g21
03:04:06  28  ,eur_g22
03:04:06  29  ,eur_g23
03:04:06  30  ,eur_g24
03:04:06  31  ,eur_g25
03:04:06  32  ,eur_g26
03:04:06  33  ,eur_g27
03:04:06  34  ,eur_g28
03:04:06  35  ,eur_g29
03:04:06  36  ,eur_g30
03:04:06  37  ,eur_g31
03:04:06  38  ,eur_g32
03:04:06  39  ,eur_g33
03:04:06  40  ,eur_g34
03:04:06  41  ,eur_g35
03:04:06  42  ,eur_g36
03:04:06  43  ,eur_g37
03:04:06  44  ,eur_g38
03:04:06  45  ,eur_g39
03:04:06  46  ,eur_g40
03:04:06  47  ,eur_g41
03:04:06  48  ,aud_g00
03:04:06  49  ,aud_g01
03:04:06  50  ,aud_g02
03:04:06  51  ,aud_g03
03:04:06  52  ,aud_g04
03:04:06  53  ,aud_g05
03:04:06  54  ,aud_g06
03:04:06  55  ,aud_g07
03:04:06  56  ,aud_g08
03:04:06  57  ,aud_g09
03:04:06  58  ,aud_g10
03:04:06  59  ,aud_g11
03:04:06  60  ,aud_g12
03:04:06  61  ,aud_g13
03:04:06  62  ,aud_g14
03:04:06  63  ,aud_g15
03:04:06  64  ,aud_g16
03:04:06  65  ,aud_g17
03:04:06  66  ,aud_g18
03:04:06  67  ,aud_g19
03:04:06  68  ,aud_g20
03:04:06  69  ,aud_g21
03:04:06  70  ,aud_g22
03:04:06  71  ,aud_g23
03:04:06  72  ,aud_g24
03:04:06  73  ,aud_g25
03:04:06  74  ,aud_g26
03:04:06  75  ,aud_g27
03:04:06  76  ,aud_g28
03:04:06  77  ,aud_g29
03:04:06  78  ,aud_g30
03:04:06  79  ,aud_g31
03:04:06  80  ,aud_g32
03:04:06  81  ,aud_g33
03:04:06  82  ,aud_g34
03:04:06  83  ,aud_g35
03:04:06  84  ,aud_g36
03:04:06  85  ,aud_g37
03:04:06  86  ,aud_g38
03:04:06  87  ,aud_g39
03:04:06  88  ,aud_g40
03:04:06  89  ,aud_g41
03:04:06  90  ,gbp_g00
03:04:06  91  ,gbp_g01
03:04:06  92  ,gbp_g02
03:04:06  93  ,gbp_g03
03:04:06  94  ,gbp_g04
03:04:06  95  ,gbp_g05
03:04:06  96  ,gbp_g06
03:04:06  97  ,gbp_g07
03:04:06  98  ,gbp_g08
03:04:06  99  ,gbp_g09
03:04:06 100  ,gbp_g10
03:04:06 101  ,gbp_g11
03:04:06 102  ,gbp_g12
03:04:06 103  ,gbp_g13
03:04:06 104  ,gbp_g14
03:04:06 105  ,gbp_g15
03:04:06 106  ,gbp_g16
03:04:06 107  ,gbp_g17
03:04:06 108  ,gbp_g18
03:04:06 109  ,gbp_g19
03:04:06 110  ,gbp_g20
03:04:06 111  ,gbp_g21
03:04:06 112  ,gbp_g22
03:04:06 113  ,gbp_g23
03:04:06 114  ,gbp_g24
03:04:06 115  ,gbp_g25
03:04:06 116  ,gbp_g26
03:04:06 117  ,gbp_g27
03:04:06 118  ,gbp_g28
03:04:06 119  ,gbp_g29
03:04:06 120  ,gbp_g30
03:04:06 121  ,gbp_g31
03:04:06 122  ,gbp_g32
03:04:06 123  ,gbp_g33
03:04:06 124  ,gbp_g34
03:04:06 125  ,gbp_g35
03:04:06 126  ,gbp_g36
03:04:06 127  ,gbp_g37
03:04:06 128  ,gbp_g38
03:04:06 129  ,gbp_g39
03:04:06 130  ,gbp_g40
03:04:06 131  ,gbp_g41
03:04:06 132  ,jpy_g00
03:04:06 133  ,jpy_g01
03:04:06 134  ,jpy_g02
03:04:06 135  ,jpy_g03
03:04:06 136  ,jpy_g04
03:04:06 137  ,jpy_g05
03:04:06 138  ,jpy_g06
03:04:06 139  ,jpy_g07
03:04:06 140  ,jpy_g08
03:04:06 141  ,jpy_g09
03:04:06 142  ,jpy_g10
03:04:06 143  ,jpy_g11
03:04:06 144  ,jpy_g12
03:04:06 145  ,jpy_g13
03:04:06 146  ,jpy_g14
03:04:06 147  ,jpy_g15
03:04:06 148  ,jpy_g16
03:04:06 149  ,jpy_g17
03:04:06 150  ,jpy_g18
03:04:06 151  ,jpy_g19
03:04:06 152  ,jpy_g20
03:04:06 153  ,jpy_g21
03:04:06 154  ,jpy_g22
03:04:06 155  ,jpy_g23
03:04:06 156  ,jpy_g24
03:04:06 157  ,jpy_g25
03:04:06 158  ,jpy_g26
03:04:06 159  ,jpy_g27
03:04:06 160  ,jpy_g28
03:04:06 161  ,jpy_g29
03:04:06 162  ,jpy_g30
03:04:06 163  ,jpy_g31
03:04:06 164  ,jpy_g32
03:04:06 165  ,jpy_g33
03:04:06 166  ,jpy_g34
03:04:06 167  ,jpy_g35
03:04:06 168  ,jpy_g36
03:04:06 169  ,jpy_g37
03:04:06 170  ,jpy_g38
03:04:06 171  ,jpy_g39
03:04:06 172  ,jpy_g40
03:04:06 173  ,jpy_g41
03:04:06 174  ,cad_g00
03:04:06 175  ,cad_g01
03:04:06 176  ,cad_g02
03:04:06 177  ,cad_g03
03:04:06 178  ,cad_g04
03:04:06 179  ,cad_g05
03:04:06 180  ,cad_g06
03:04:06 181  ,cad_g07
03:04:06 182  ,cad_g08
03:04:06 183  ,cad_g09
03:04:06 184  ,cad_g10
03:04:06 185  ,cad_g11
03:04:06 186  ,cad_g12
03:04:06 187  ,cad_g13
03:04:06 188  ,cad_g14
03:04:06 189  ,cad_g15
03:04:06 190  ,cad_g16
03:04:06 191  ,cad_g17
03:04:06 192  ,cad_g18
03:04:06 193  ,cad_g19
03:04:06 194  ,cad_g20
03:04:06 195  ,cad_g21
03:04:06 196  ,cad_g22
03:04:06 197  ,cad_g23
03:04:06 198  ,cad_g24
03:04:06 199  ,cad_g25
03:04:06 200  ,cad_g26
03:04:06 201  ,cad_g27
03:04:06 202  ,cad_g28
03:04:06 203  ,cad_g29
03:04:06 204  ,cad_g30
03:04:06 205  ,cad_g31
03:04:06 206  ,cad_g32
03:04:06 207  ,cad_g33
03:04:06 208  ,cad_g34
03:04:06 209  ,cad_g35
03:04:06 210  ,cad_g36
03:04:06 211  ,cad_g37
03:04:06 212  ,cad_g38
03:04:06 213  ,cad_g39
03:04:06 214  ,cad_g40
03:04:06 215  ,cad_g41
03:04:06 216  ,chf_g00
03:04:06 217  ,chf_g01
03:04:06 218  ,chf_g02
03:04:06 219  ,chf_g03
03:04:06 220  ,chf_g04
03:04:06 221  ,chf_g05
03:04:06 222  ,chf_g06
03:04:06 223  ,chf_g07
03:04:06 224  ,chf_g08
03:04:06 225  ,chf_g09
03:04:06 226  ,chf_g10
03:04:06 227  ,chf_g11
03:04:06 228  ,chf_g12
03:04:06 229  ,chf_g13
03:04:06 230  ,chf_g14
03:04:06 231  ,chf_g15
03:04:06 232  ,chf_g16
03:04:06 233  ,chf_g17
03:04:06 234  ,chf_g18
03:04:06 235  ,chf_g19
03:04:06 236  ,chf_g20
03:04:06 237  ,chf_g21
03:04:06 238  ,chf_g22
03:04:06 239  ,chf_g23
03:04:06 240  ,chf_g24
03:04:06 241  ,chf_g25
03:04:06 242  ,chf_g26
03:04:06 243  ,chf_g27
03:04:06 244  ,chf_g28
03:04:06 245  ,chf_g29
03:04:06 246  ,chf_g30
03:04:06 247  ,chf_g31
03:04:06 248  ,chf_g32
03:04:06 249  ,chf_g33
03:04:06 250  ,chf_g34
03:04:06 251  ,chf_g35
03:04:06 252  ,chf_g36
03:04:06 253  ,chf_g37
03:04:06 254  ,chf_g38
03:04:06 255  ,chf_g39
03:04:06 256  ,chf_g40
03:04:06 257  ,chf_g41
03:04:06 258  FROM aud_ms6 m
03:04:06 259  WHERE m.ydate = '&1'||' '||'&2'
03:04:06 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2011-01-05'||' '||'02:40:00'

View created.

Elapsed: 00:00:00.12
03:04:06 SQL> 
03:04:06 SQL> -- rpt
03:04:06 SQL> -- We should see just 1 row:
03:04:06 SQL> 
03:04:06 SQL> SELECT COUNT(prdate) FROM sme
03:04:06   2  
03:04:06 SQL> -- Build the model:
03:04:06 SQL> CREATE OR REPLACE VIEW bme AS
03:04:06   2  SELECT
03:04:06   3  'aud'||m.ydate prdate
03:04:06   4  ,gatt
03:04:06   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
03:04:06   6  ,eur_g00
03:04:06   7  ,eur_g01
03:04:06   8  ,eur_g02
03:04:06   9  ,eur_g03
03:04:06  10  ,eur_g04
03:04:06  11  ,eur_g05
03:04:06  12  ,eur_g06
03:04:06  13  ,eur_g07
03:04:06  14  ,eur_g08
03:04:06  15  ,eur_g09
03:04:06  16  ,eur_g10
03:04:06  17  ,eur_g11
03:04:06  18  ,eur_g12
03:04:06  19  ,eur_g13
03:04:06  20  ,eur_g14
03:04:06  21  ,eur_g15
03:04:06  22  ,eur_g16
03:04:06  23  ,eur_g17
03:04:06  24  ,eur_g18
03:04:06  25  ,eur_g19
03:04:06  26  ,eur_g20
03:04:06  27  ,eur_g21
03:04:06  28  ,eur_g22
03:04:06  29  ,eur_g23
03:04:06  30  ,eur_g24
03:04:06  31  ,eur_g25
03:04:06  32  ,eur_g26
03:04:06  33  ,eur_g27
03:04:06  34  ,eur_g28
03:04:06  35  ,eur_g29
03:04:06  36  ,eur_g30
03:04:06  37  ,eur_g31
03:04:06  38  ,eur_g32
03:04:06  39  ,eur_g33
03:04:06  40  ,eur_g34
03:04:06  41  ,eur_g35
03:04:06  42  ,eur_g36
03:04:06  43  ,eur_g37
03:04:06  44  ,eur_g38
03:04:06  45  ,eur_g39
03:04:06  46  ,eur_g40
03:04:06  47  ,eur_g41
03:04:06  48  ,aud_g00
03:04:06  49  ,aud_g01
03:04:06  50  ,aud_g02
03:04:06  51  ,aud_g03
03:04:06  52  ,aud_g04
03:04:06  53  ,aud_g05
03:04:06  54  ,aud_g06
03:04:06  55  ,aud_g07
03:04:06  56  ,aud_g08
03:04:06  57  ,aud_g09
03:04:06  58  ,aud_g10
03:04:06  59  ,aud_g11
03:04:06  60  ,aud_g12
03:04:06  61  ,aud_g13
03:04:06  62  ,aud_g14
03:04:06  63  ,aud_g15
03:04:06  64  ,aud_g16
03:04:06  65  ,aud_g17
03:04:06  66  ,aud_g18
03:04:06  67  ,aud_g19
03:04:06  68  ,aud_g20
03:04:06  69  ,aud_g21
03:04:06  70  ,aud_g22
03:04:06  71  ,aud_g23
03:04:06  72  ,aud_g24
03:04:06  73  ,aud_g25
03:04:06  74  ,aud_g26
03:04:06  75  ,aud_g27
03:04:06  76  ,aud_g28
03:04:06  77  ,aud_g29
03:04:06  78  ,aud_g30
03:04:06  79  ,aud_g31
03:04:06  80  ,aud_g32
03:04:06  81  ,aud_g33
03:04:06  82  ,aud_g34
03:04:06  83  ,aud_g35
03:04:06  84  ,aud_g36
03:04:06  85  ,aud_g37
03:04:06  86  ,aud_g38
03:04:06  87  ,aud_g39
03:04:06  88  ,aud_g40
03:04:06  89  ,aud_g41
03:04:06  90  ,gbp_g00
03:04:06  91  ,gbp_g01
03:04:06  92  ,gbp_g02
03:04:06  93  ,gbp_g03
03:04:06  94  ,gbp_g04
03:04:06  95  ,gbp_g05
03:04:06  96  ,gbp_g06
03:04:06  97  ,gbp_g07
03:04:06  98  ,gbp_g08
03:04:06  99  ,gbp_g09
03:04:06 100  ,gbp_g10
03:04:06 101  ,gbp_g11
03:04:06 102  ,gbp_g12
03:04:06 103  ,gbp_g13
03:04:06 104  ,gbp_g14
03:04:06 105  ,gbp_g15
03:04:06 106  ,gbp_g16
03:04:06 107  ,gbp_g17
03:04:06 108  ,gbp_g18
03:04:06 109  ,gbp_g19
03:04:06 110  ,gbp_g20
03:04:06 111  ,gbp_g21
03:04:06 112  ,gbp_g22
03:04:06 113  ,gbp_g23
03:04:06 114  ,gbp_g24
03:04:06 115  ,gbp_g25
03:04:06 116  ,gbp_g26
03:04:06 117  ,gbp_g27
03:04:06 118  ,gbp_g28
03:04:06 119  ,gbp_g29
03:04:06 120  ,gbp_g30
03:04:06 121  ,gbp_g31
03:04:06 122  ,gbp_g32
03:04:06 123  ,gbp_g33
03:04:06 124  ,gbp_g34
03:04:06 125  ,gbp_g35
03:04:06 126  ,gbp_g36
03:04:06 127  ,gbp_g37
03:04:06 128  ,gbp_g38
03:04:06 129  ,gbp_g39
03:04:06 130  ,gbp_g40
03:04:06 131  ,gbp_g41
03:04:06 132  ,jpy_g00
03:04:06 133  ,jpy_g01
03:04:06 134  ,jpy_g02
03:04:06 135  ,jpy_g03
03:04:06 136  ,jpy_g04
03:04:06 137  ,jpy_g05
03:04:06 138  ,jpy_g06
03:04:06 139  ,jpy_g07
03:04:06 140  ,jpy_g08
03:04:06 141  ,jpy_g09
03:04:06 142  ,jpy_g10
03:04:06 143  ,jpy_g11
03:04:06 144  ,jpy_g12
03:04:06 145  ,jpy_g13
03:04:06 146  ,jpy_g14
03:04:06 147  ,jpy_g15
03:04:06 148  ,jpy_g16
03:04:06 149  ,jpy_g17
03:04:06 150  ,jpy_g18
03:04:06 151  ,jpy_g19
03:04:06 152  ,jpy_g20
03:04:06 153  ,jpy_g21
03:04:06 154  ,jpy_g22
03:04:06 155  ,jpy_g23
03:04:06 156  ,jpy_g24
03:04:06 157  ,jpy_g25
03:04:06 158  ,jpy_g26
03:04:06 159  ,jpy_g27
03:04:06 160  ,jpy_g28
03:04:06 161  ,jpy_g29
03:04:06 162  ,jpy_g30
03:04:06 163  ,jpy_g31
03:04:06 164  ,jpy_g32
03:04:06 165  ,jpy_g33
03:04:06 166  ,jpy_g34
03:04:06 167  ,jpy_g35
03:04:06 168  ,jpy_g36
03:04:06 169  ,jpy_g37
03:04:06 170  ,jpy_g38
03:04:06 171  ,jpy_g39
03:04:06 172  ,jpy_g40
03:04:06 173  ,jpy_g41
03:04:06 174  ,cad_g00
03:04:06 175  ,cad_g01
03:04:06 176  ,cad_g02
03:04:06 177  ,cad_g03
03:04:06 178  ,cad_g04
03:04:06 179  ,cad_g05
03:04:06 180  ,cad_g06
03:04:06 181  ,cad_g07
03:04:06 182  ,cad_g08
03:04:06 183  ,cad_g09
03:04:06 184  ,cad_g10
03:04:06 185  ,cad_g11
03:04:06 186  ,cad_g12
03:04:06 187  ,cad_g13
03:04:06 188  ,cad_g14
03:04:06 189  ,cad_g15
03:04:06 190  ,cad_g16
03:04:06 191  ,cad_g17
03:04:06 192  ,cad_g18
03:04:06 193  ,cad_g19
03:04:06 194  ,cad_g20
03:04:06 195  ,cad_g21
03:04:06 196  ,cad_g22
03:04:06 197  ,cad_g23
03:04:06 198  ,cad_g24
03:04:06 199  ,cad_g25
03:04:06 200  ,cad_g26
03:04:06 201  ,cad_g27
03:04:06 202  ,cad_g28
03:04:06 203  ,cad_g29
03:04:06 204  ,cad_g30
03:04:06 205  ,cad_g31
03:04:06 206  ,cad_g32
03:04:06 207  ,cad_g33
03:04:06 208  ,cad_g34
03:04:06 209  ,cad_g35
03:04:06 210  ,cad_g36
03:04:06 211  ,cad_g37
03:04:06 212  ,cad_g38
03:04:06 213  ,cad_g39
03:04:06 214  ,cad_g40
03:04:06 215  ,cad_g41
03:04:06 216  ,chf_g00
03:04:06 217  ,chf_g01
03:04:06 218  ,chf_g02
03:04:06 219  ,chf_g03
03:04:06 220  ,chf_g04
03:04:06 221  ,chf_g05
03:04:06 222  ,chf_g06
03:04:06 223  ,chf_g07
03:04:06 224  ,chf_g08
03:04:06 225  ,chf_g09
03:04:06 226  ,chf_g10
03:04:06 227  ,chf_g11
03:04:06 228  ,chf_g12
03:04:06 229  ,chf_g13
03:04:06 230  ,chf_g14
03:04:06 231  ,chf_g15
03:04:06 232  ,chf_g16
03:04:06 233  ,chf_g17
03:04:06 234  ,chf_g18
03:04:06 235  ,chf_g19
03:04:06 236  ,chf_g20
03:04:06 237  ,chf_g21
03:04:06 238  ,chf_g22
03:04:06 239  ,chf_g23
03:04:06 240  ,chf_g24
03:04:06 241  ,chf_g25
03:04:06 242  ,chf_g26
03:04:06 243  ,chf_g27
03:04:06 244  ,chf_g28
03:04:06 245  ,chf_g29
03:04:06 246  ,chf_g30
03:04:06 247  ,chf_g31
03:04:06 248  ,chf_g32
03:04:06 249  ,chf_g33
03:04:06 250  ,chf_g34
03:04:06 251  ,chf_g35
03:04:06 252  ,chf_g36
03:04:06 253  ,chf_g37
03:04:06 254  ,chf_g38
03:04:06 255  ,chf_g39
03:04:06 256  ,chf_g40
03:04:06 257  ,chf_g41
03:04:06 258  FROM aud_ms6 m
03:04:06 259  WHERE gatt IN('nup','up')
03:04:06 260  AND 1+m.ydate < '&1'||' '||'&2'
03:04:06 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2011-01-05'||' '||'02:40:00'

View created.

Elapsed: 00:00:00.13
03:04:06 SQL> 
03:04:06 SQL> -- rpt
03:04:06 SQL> 
03:04:06 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt
03:04:06   2  
03:04:06 SQL> SELECT MAX(prdate) FROM bme
03:04:06   2  
03:04:06 SQL> -- Now build model from bme and score sme
03:04:06 SQL> @score1.sql
03:04:06 SQL> -- score1.sql
03:04:06 SQL> 
03:04:06 SQL> -- Does the 1st SVM score
03:04:06 SQL> 
03:04:06 SQL> -- Fill up svmc_apply_prep
03:04:06 SQL> @score.sql
03:04:06 SQL> --
03:04:06 SQL> -- score.sql
03:04:06 SQL> --
03:04:06 SQL> 
03:04:06 SQL> -- usage: score.sql
03:04:06 SQL> 
03:04:06 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
03:04:06 SQL> 
03:04:06 SQL> DEFINE target	= 'gatt'
03:04:06 SQL> DEFINE model_name = 'forex15'
03:04:06 SQL> DEFINE bldtable	= 'bme'
03:04:06 SQL> DEFINE scoretable = 'sme'
03:04:06 SQL> DEFINE case_id	= 'prdate'
03:04:06 SQL> 
03:04:06 SQL> -- Define a variable to help me exclude some columns from some data mining calls
03:04:06 SQL> DEFINE exclude1 = "'&target','&case_id'"
03:04:06 SQL> 
03:04:06 SQL> -- Builds an SVM model using pl/sql.
03:04:06 SQL> 
03:04:06 SQL> -----------------------------------------------------------------------
03:04:06 SQL> --			    BUILD THE MODEL
03:04:06 SQL> -----------------------------------------------------------------------
03:04:06 SQL> 
03:04:06 SQL> -- Cleanup old build data preparation objects for repeat runs
03:04:06 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.00
03:04:06 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
03:04:06 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.01
03:04:06 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.01
03:04:06 SQL> 
03:04:06 SQL> 
03:04:06 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
03:04:06 SQL> --
03:04:06 SQL> -- DROP	TABLE svmc_settings ;
03:04:06 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
03:04:06 SQL> -- DELETE svmc_settings;
03:04:06 SQL> 
03:04:06 SQL> -- The default classification algorithm is Naive Bayes. So override
03:04:06 SQL> -- this choice to SVM using a settings table.
03:04:06 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
03:04:06 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
03:04:06 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
03:04:06 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
03:04:06 SQL> -- models.
03:04:06 SQL> --
03:04:06 SQL> 
03:04:06 SQL> -- Do this once and then comment it out.
03:04:06 SQL> -- That makes script go faster.
03:04:06 SQL> -- BEGIN
03:04:06 SQL> -- -- Populate settings table
03:04:06 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
03:04:06 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
03:04:06 SQL> --
03:04:06 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
03:04:06 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
03:04:06 SQL> --
03:04:06 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
03:04:06 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
03:04:06 SQL> --   COMMIT;
03:04:06 SQL> -- END;
03:04:06 SQL> -- /
03:04:06 SQL> 
03:04:06 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
03:04:06 SQL> 
03:04:06 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
03:04:06   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:04:06   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
03:04:06 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
03:04:06   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:04:06   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
03:04:06 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
03:04:06   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:04:06   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
03:04:06 SQL> 
03:04:06 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
03:04:06   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:04:06   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
03:04:06 SQL> 
03:04:06 SQL> --------------------------------
03:04:06 SQL> -- PREPARE BUILD (TRAINING) DATA
03:04:06 SQL> --
03:04:06 SQL> 
03:04:06 SQL> -- 1. Missing Value treatment for all Predictors and
03:04:06 SQL> -- 2. Outlier Treatment and
03:04:06 SQL> -- 3. Normalization are performed below.
03:04:06 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
03:04:06 SQL> --    normalized here.
03:04:06 SQL> 
03:04:06 SQL> BEGIN
03:04:06   2  	-- Perform missing value treatment for all predictors
03:04:06   3  	-- create miss tables
03:04:06   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
03:04:06   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
03:04:06   6  
03:04:06   7  	-- populate miss tables
03:04:06   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
03:04:06   9  	  miss_table_name => 'svmc_miss_num',
03:04:06  10  	  data_table_name => '&bldtable',
03:04:06  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:04:06  12  
03:04:06  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
03:04:06  14  	  miss_table_name => 'svmc_miss_cat',
03:04:06  15  	  data_table_name => '&bldtable',
03:04:06  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:04:06  17  
03:04:06  18  	-- xform input data to replace missing values
03:04:06  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
03:04:06  20  	  miss_table_name => 'svmc_miss_num',
03:04:06  21  	  data_table_name => '&bldtable',
03:04:06  22  	  xform_view_name => 'xformed_build_miss_num');
03:04:06  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
03:04:06  24  	  miss_table_name => 'svmc_miss_cat',
03:04:06  25  	  data_table_name => '&bldtable',
03:04:06  26  	  xform_view_name => 'xformed_build_miss_cat');
03:04:06  27  
03:04:06  28  	-- Perform outlier treatment.
03:04:06  29  	-- create clip table
03:04:06  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
03:04:06  31  
03:04:06  32  	-- populate clip table
03:04:06  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
03:04:06  34  	  clip_table_name => 'svmc_clip',
03:04:06  35  	  data_table_name => '&bldtable',
03:04:06  36  	  tail_frac	  => 0.025,
03:04:06  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:04:06  38  
03:04:06  39  	-- xform input data to winsorized data
03:04:06  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
03:04:06  41  	  clip_table_name => 'svmc_clip',
03:04:06  42  	  data_table_name => '&bldtable',
03:04:06  43  	  xform_view_name => 'svmc_winsor');
03:04:06  44  
03:04:06  45  	-- create normalization table
03:04:06  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
03:04:06  47  
03:04:06  48  	-- populate normalization table based on winsorized data
03:04:06  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
03:04:06  50  	  norm_table_name => 'svmc_norm',
03:04:06  51  	  data_table_name => 'svmc_winsor',
03:04:06  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:04:06  53  
03:04:06  54  	-- normalize the original data
03:04:06  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
03:04:06  56  	  norm_table_name => 'svmc_norm',
03:04:06  57  	  data_table_name => '&bldtable',
03:04:06  58  	  xform_view_name => 'svmc_build_prep');
03:04:06  59  END;
03:04:06  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:18.60
03:04:25 SQL> 
03:04:25 SQL> ---------------------
03:04:25 SQL> -- CREATE A NEW MODEL
03:04:25 SQL> --
03:04:25 SQL> -- Cleanup old model with the same name for repeat runs
03:04:25 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
03:04:25   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:04:25   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex15');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.63
03:04:25 SQL> 
03:04:25 SQL> -- Build a new SVM Model
03:04:25 SQL> BEGIN
03:04:25   2  	DBMS_DATA_MINING.CREATE_MODEL(
03:04:25   3  	  model_name	      => '&model_name',
03:04:25   4  	  mining_function     => dbms_data_mining.classification,
03:04:25   5  	  data_table_name     => 'svmc_build_prep',
03:04:25   6  	  case_id_column_name => '&case_id',
03:04:25   7  	  target_column_name  => '&target',
03:04:25   8  	  settings_table_name => 'svmc_settings');
03:04:25   9  END;
03:04:25  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex15',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:29.53
03:04:55 SQL> 
03:04:55 SQL> -----------------------------------------------------------------------
03:04:55 SQL> --			       APPLY/score THE MODEL
03:04:55 SQL> -----------------------------------------------------------------------
03:04:55 SQL> 
03:04:55 SQL> -- Cleanup old scoring data preparation objects for repeat runs
03:04:55 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
03:04:55   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:04:55   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.09
03:04:55 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
03:04:55   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:04:55   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
03:04:55 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
03:04:55   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:04:55   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.12
03:04:55 SQL> -----------------------
03:04:55 SQL> -- PREPARE SCORING DATA
03:04:55 SQL> --
03:04:55 SQL> -- If the data for model creation has been prepared, then the data
03:04:55 SQL> -- to be scored using the model must be prepared in the same manner
03:04:55 SQL> -- in order to obtain meaningful results.
03:04:55 SQL> --
03:04:55 SQL> -- 1. Missing Value treatment for all Predictors and
03:04:55 SQL> -- 2. Normalization
03:04:55 SQL> -- No outlier treatment will be performed during test and apply. The
03:04:55 SQL> -- normalization step is sufficient, since the normalization parameters
03:04:55 SQL> -- already capture the effects of outlier treatment done with build data.
03:04:55 SQL> --
03:04:55 SQL> BEGIN
03:04:55   2  	-- Xform Test data to replace missing values
03:04:55   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
03:04:55   4  	  miss_table_name => 'svmc_miss_num',
03:04:55   5  	  data_table_name => '&scoretable',
03:04:55   6  	  xform_view_name => 'xformed_apply_miss_num');
03:04:55   7  
03:04:55   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
03:04:55   9  	  miss_table_name => 'svmc_miss_cat',
03:04:55  10  	  data_table_name => '&scoretable',
03:04:55  11  	  xform_view_name => 'xformed_apply_miss_cat');
03:04:55  12  
03:04:55  13  	-- Normalize the data to be scored
03:04:55  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
03:04:55  15  	  norm_table_name => 'svmc_norm',
03:04:55  16  	  data_table_name => '&scoretable',
03:04:55  17  	  xform_view_name => 'svmc_apply_prep');
03:04:55  18  END;
03:04:55  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.34
03:04:57 SQL> 
03:04:57 SQL> -- Use same model_name used in score.sql
03:04:57 SQL> DEFINE model_name = 'forex15'
03:04:57 SQL> 
03:04:57 SQL> -- CREATE TABLE fxscores6 (prdate VARCHAR2(30),score NUMBER,rundate DATE,pair VARCHAR2(8),ydate DATE);
03:04:57 SQL> 
03:04:57 SQL> DELETE fxscores6 WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.05
03:04:57 SQL> 
03:04:57 SQL> INSERT INTO fxscores6 (prdate,score,rundate,pair,ydate)
03:04:57   2  SELECT
03:04:57   3  prdate
03:04:57   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
03:04:57   5  ,sysdate
03:04:57   6  ,SUBSTR(prdate,1,3)pair
03:04:57   7  ,SUBSTR(prdate,4,19)ydate
03:04:57   8  FROM svmc_apply_prep
03:04:57   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex15,'up' USING *)score

1 row created.

Elapsed: 00:00:00.22
03:04:57 SQL> @aud_score1day.sql  2011-01-05 02:45:00
03:04:57 SQL> --
03:04:57 SQL> -- aud_score1day.sql
03:04:57 SQL> --
03:04:57 SQL> 
03:04:57 SQL> CREATE OR REPLACE VIEW sme AS
03:04:57   2  SELECT
03:04:57   3  'aud'||m.ydate prdate
03:04:57   4  ,NULL gatt
03:04:57   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
03:04:57   6  ,eur_g00
03:04:57   7  ,eur_g01
03:04:57   8  ,eur_g02
03:04:57   9  ,eur_g03
03:04:57  10  ,eur_g04
03:04:57  11  ,eur_g05
03:04:57  12  ,eur_g06
03:04:57  13  ,eur_g07
03:04:57  14  ,eur_g08
03:04:57  15  ,eur_g09
03:04:57  16  ,eur_g10
03:04:57  17  ,eur_g11
03:04:57  18  ,eur_g12
03:04:57  19  ,eur_g13
03:04:57  20  ,eur_g14
03:04:57  21  ,eur_g15
03:04:57  22  ,eur_g16
03:04:57  23  ,eur_g17
03:04:57  24  ,eur_g18
03:04:57  25  ,eur_g19
03:04:57  26  ,eur_g20
03:04:57  27  ,eur_g21
03:04:57  28  ,eur_g22
03:04:57  29  ,eur_g23
03:04:57  30  ,eur_g24
03:04:57  31  ,eur_g25
03:04:57  32  ,eur_g26
03:04:57  33  ,eur_g27
03:04:57  34  ,eur_g28
03:04:57  35  ,eur_g29
03:04:57  36  ,eur_g30
03:04:57  37  ,eur_g31
03:04:57  38  ,eur_g32
03:04:57  39  ,eur_g33
03:04:57  40  ,eur_g34
03:04:57  41  ,eur_g35
03:04:57  42  ,eur_g36
03:04:57  43  ,eur_g37
03:04:57  44  ,eur_g38
03:04:57  45  ,eur_g39
03:04:57  46  ,eur_g40
03:04:57  47  ,eur_g41
03:04:57  48  ,aud_g00
03:04:57  49  ,aud_g01
03:04:57  50  ,aud_g02
03:04:57  51  ,aud_g03
03:04:57  52  ,aud_g04
03:04:57  53  ,aud_g05
03:04:57  54  ,aud_g06
03:04:57  55  ,aud_g07
03:04:57  56  ,aud_g08
03:04:57  57  ,aud_g09
03:04:57  58  ,aud_g10
03:04:57  59  ,aud_g11
03:04:57  60  ,aud_g12
03:04:57  61  ,aud_g13
03:04:57  62  ,aud_g14
03:04:57  63  ,aud_g15
03:04:57  64  ,aud_g16
03:04:57  65  ,aud_g17
03:04:57  66  ,aud_g18
03:04:57  67  ,aud_g19
03:04:57  68  ,aud_g20
03:04:57  69  ,aud_g21
03:04:57  70  ,aud_g22
03:04:57  71  ,aud_g23
03:04:57  72  ,aud_g24
03:04:57  73  ,aud_g25
03:04:57  74  ,aud_g26
03:04:57  75  ,aud_g27
03:04:57  76  ,aud_g28
03:04:57  77  ,aud_g29
03:04:57  78  ,aud_g30
03:04:57  79  ,aud_g31
03:04:57  80  ,aud_g32
03:04:57  81  ,aud_g33
03:04:57  82  ,aud_g34
03:04:57  83  ,aud_g35
03:04:57  84  ,aud_g36
03:04:57  85  ,aud_g37
03:04:57  86  ,aud_g38
03:04:57  87  ,aud_g39
03:04:57  88  ,aud_g40
03:04:57  89  ,aud_g41
03:04:57  90  ,gbp_g00
03:04:57  91  ,gbp_g01
03:04:57  92  ,gbp_g02
03:04:57  93  ,gbp_g03
03:04:57  94  ,gbp_g04
03:04:57  95  ,gbp_g05
03:04:57  96  ,gbp_g06
03:04:57  97  ,gbp_g07
03:04:57  98  ,gbp_g08
03:04:57  99  ,gbp_g09
03:04:57 100  ,gbp_g10
03:04:57 101  ,gbp_g11
03:04:57 102  ,gbp_g12
03:04:57 103  ,gbp_g13
03:04:57 104  ,gbp_g14
03:04:57 105  ,gbp_g15
03:04:57 106  ,gbp_g16
03:04:57 107  ,gbp_g17
03:04:57 108  ,gbp_g18
03:04:57 109  ,gbp_g19
03:04:57 110  ,gbp_g20
03:04:57 111  ,gbp_g21
03:04:57 112  ,gbp_g22
03:04:57 113  ,gbp_g23
03:04:57 114  ,gbp_g24
03:04:57 115  ,gbp_g25
03:04:57 116  ,gbp_g26
03:04:57 117  ,gbp_g27
03:04:57 118  ,gbp_g28
03:04:57 119  ,gbp_g29
03:04:57 120  ,gbp_g30
03:04:57 121  ,gbp_g31
03:04:57 122  ,gbp_g32
03:04:57 123  ,gbp_g33
03:04:57 124  ,gbp_g34
03:04:57 125  ,gbp_g35
03:04:57 126  ,gbp_g36
03:04:57 127  ,gbp_g37
03:04:57 128  ,gbp_g38
03:04:57 129  ,gbp_g39
03:04:57 130  ,gbp_g40
03:04:57 131  ,gbp_g41
03:04:57 132  ,jpy_g00
03:04:57 133  ,jpy_g01
03:04:57 134  ,jpy_g02
03:04:57 135  ,jpy_g03
03:04:57 136  ,jpy_g04
03:04:57 137  ,jpy_g05
03:04:57 138  ,jpy_g06
03:04:57 139  ,jpy_g07
03:04:57 140  ,jpy_g08
03:04:57 141  ,jpy_g09
03:04:57 142  ,jpy_g10
03:04:57 143  ,jpy_g11
03:04:57 144  ,jpy_g12
03:04:57 145  ,jpy_g13
03:04:57 146  ,jpy_g14
03:04:57 147  ,jpy_g15
03:04:57 148  ,jpy_g16
03:04:57 149  ,jpy_g17
03:04:57 150  ,jpy_g18
03:04:57 151  ,jpy_g19
03:04:57 152  ,jpy_g20
03:04:57 153  ,jpy_g21
03:04:57 154  ,jpy_g22
03:04:57 155  ,jpy_g23
03:04:57 156  ,jpy_g24
03:04:57 157  ,jpy_g25
03:04:57 158  ,jpy_g26
03:04:57 159  ,jpy_g27
03:04:57 160  ,jpy_g28
03:04:57 161  ,jpy_g29
03:04:57 162  ,jpy_g30
03:04:57 163  ,jpy_g31
03:04:57 164  ,jpy_g32
03:04:57 165  ,jpy_g33
03:04:57 166  ,jpy_g34
03:04:57 167  ,jpy_g35
03:04:57 168  ,jpy_g36
03:04:57 169  ,jpy_g37
03:04:57 170  ,jpy_g38
03:04:57 171  ,jpy_g39
03:04:57 172  ,jpy_g40
03:04:57 173  ,jpy_g41
03:04:57 174  ,cad_g00
03:04:57 175  ,cad_g01
03:04:57 176  ,cad_g02
03:04:57 177  ,cad_g03
03:04:57 178  ,cad_g04
03:04:57 179  ,cad_g05
03:04:57 180  ,cad_g06
03:04:57 181  ,cad_g07
03:04:57 182  ,cad_g08
03:04:57 183  ,cad_g09
03:04:57 184  ,cad_g10
03:04:57 185  ,cad_g11
03:04:57 186  ,cad_g12
03:04:57 187  ,cad_g13
03:04:57 188  ,cad_g14
03:04:57 189  ,cad_g15
03:04:57 190  ,cad_g16
03:04:57 191  ,cad_g17
03:04:57 192  ,cad_g18
03:04:57 193  ,cad_g19
03:04:57 194  ,cad_g20
03:04:57 195  ,cad_g21
03:04:57 196  ,cad_g22
03:04:57 197  ,cad_g23
03:04:57 198  ,cad_g24
03:04:57 199  ,cad_g25
03:04:57 200  ,cad_g26
03:04:57 201  ,cad_g27
03:04:57 202  ,cad_g28
03:04:57 203  ,cad_g29
03:04:57 204  ,cad_g30
03:04:57 205  ,cad_g31
03:04:57 206  ,cad_g32
03:04:57 207  ,cad_g33
03:04:57 208  ,cad_g34
03:04:57 209  ,cad_g35
03:04:57 210  ,cad_g36
03:04:57 211  ,cad_g37
03:04:57 212  ,cad_g38
03:04:57 213  ,cad_g39
03:04:57 214  ,cad_g40
03:04:57 215  ,cad_g41
03:04:57 216  ,chf_g00
03:04:57 217  ,chf_g01
03:04:57 218  ,chf_g02
03:04:57 219  ,chf_g03
03:04:57 220  ,chf_g04
03:04:57 221  ,chf_g05
03:04:57 222  ,chf_g06
03:04:57 223  ,chf_g07
03:04:57 224  ,chf_g08
03:04:57 225  ,chf_g09
03:04:57 226  ,chf_g10
03:04:57 227  ,chf_g11
03:04:57 228  ,chf_g12
03:04:57 229  ,chf_g13
03:04:57 230  ,chf_g14
03:04:57 231  ,chf_g15
03:04:57 232  ,chf_g16
03:04:57 233  ,chf_g17
03:04:57 234  ,chf_g18
03:04:57 235  ,chf_g19
03:04:57 236  ,chf_g20
03:04:57 237  ,chf_g21
03:04:57 238  ,chf_g22
03:04:57 239  ,chf_g23
03:04:57 240  ,chf_g24
03:04:57 241  ,chf_g25
03:04:57 242  ,chf_g26
03:04:57 243  ,chf_g27
03:04:57 244  ,chf_g28
03:04:57 245  ,chf_g29
03:04:57 246  ,chf_g30
03:04:57 247  ,chf_g31
03:04:57 248  ,chf_g32
03:04:57 249  ,chf_g33
03:04:57 250  ,chf_g34
03:04:57 251  ,chf_g35
03:04:57 252  ,chf_g36
03:04:57 253  ,chf_g37
03:04:57 254  ,chf_g38
03:04:57 255  ,chf_g39
03:04:57 256  ,chf_g40
03:04:57 257  ,chf_g41
03:04:57 258  FROM aud_ms6 m
03:04:57 259  WHERE m.ydate = '&1'||' '||'&2'
03:04:57 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2011-01-05'||' '||'02:45:00'

View created.

Elapsed: 00:00:00.14
03:04:57 SQL> 
03:04:57 SQL> -- rpt
03:04:57 SQL> -- We should see just 1 row:
03:04:57 SQL> 
03:04:57 SQL> SELECT COUNT(prdate) FROM sme
03:04:57   2  
03:04:57 SQL> -- Build the model:
03:04:57 SQL> CREATE OR REPLACE VIEW bme AS
03:04:57   2  SELECT
03:04:57   3  'aud'||m.ydate prdate
03:04:57   4  ,gatt
03:04:57   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
03:04:57   6  ,eur_g00
03:04:57   7  ,eur_g01
03:04:57   8  ,eur_g02
03:04:57   9  ,eur_g03
03:04:57  10  ,eur_g04
03:04:57  11  ,eur_g05
03:04:57  12  ,eur_g06
03:04:57  13  ,eur_g07
03:04:57  14  ,eur_g08
03:04:57  15  ,eur_g09
03:04:57  16  ,eur_g10
03:04:57  17  ,eur_g11
03:04:57  18  ,eur_g12
03:04:57  19  ,eur_g13
03:04:57  20  ,eur_g14
03:04:57  21  ,eur_g15
03:04:57  22  ,eur_g16
03:04:57  23  ,eur_g17
03:04:57  24  ,eur_g18
03:04:57  25  ,eur_g19
03:04:57  26  ,eur_g20
03:04:57  27  ,eur_g21
03:04:57  28  ,eur_g22
03:04:57  29  ,eur_g23
03:04:57  30  ,eur_g24
03:04:57  31  ,eur_g25
03:04:57  32  ,eur_g26
03:04:57  33  ,eur_g27
03:04:57  34  ,eur_g28
03:04:57  35  ,eur_g29
03:04:57  36  ,eur_g30
03:04:57  37  ,eur_g31
03:04:57  38  ,eur_g32
03:04:57  39  ,eur_g33
03:04:57  40  ,eur_g34
03:04:57  41  ,eur_g35
03:04:57  42  ,eur_g36
03:04:57  43  ,eur_g37
03:04:57  44  ,eur_g38
03:04:57  45  ,eur_g39
03:04:57  46  ,eur_g40
03:04:57  47  ,eur_g41
03:04:57  48  ,aud_g00
03:04:57  49  ,aud_g01
03:04:57  50  ,aud_g02
03:04:57  51  ,aud_g03
03:04:57  52  ,aud_g04
03:04:57  53  ,aud_g05
03:04:57  54  ,aud_g06
03:04:57  55  ,aud_g07
03:04:57  56  ,aud_g08
03:04:57  57  ,aud_g09
03:04:57  58  ,aud_g10
03:04:57  59  ,aud_g11
03:04:57  60  ,aud_g12
03:04:57  61  ,aud_g13
03:04:57  62  ,aud_g14
03:04:57  63  ,aud_g15
03:04:57  64  ,aud_g16
03:04:57  65  ,aud_g17
03:04:57  66  ,aud_g18
03:04:57  67  ,aud_g19
03:04:57  68  ,aud_g20
03:04:57  69  ,aud_g21
03:04:57  70  ,aud_g22
03:04:57  71  ,aud_g23
03:04:57  72  ,aud_g24
03:04:57  73  ,aud_g25
03:04:57  74  ,aud_g26
03:04:57  75  ,aud_g27
03:04:57  76  ,aud_g28
03:04:57  77  ,aud_g29
03:04:57  78  ,aud_g30
03:04:57  79  ,aud_g31
03:04:57  80  ,aud_g32
03:04:57  81  ,aud_g33
03:04:57  82  ,aud_g34
03:04:57  83  ,aud_g35
03:04:57  84  ,aud_g36
03:04:57  85  ,aud_g37
03:04:57  86  ,aud_g38
03:04:57  87  ,aud_g39
03:04:57  88  ,aud_g40
03:04:57  89  ,aud_g41
03:04:57  90  ,gbp_g00
03:04:57  91  ,gbp_g01
03:04:57  92  ,gbp_g02
03:04:57  93  ,gbp_g03
03:04:57  94  ,gbp_g04
03:04:57  95  ,gbp_g05
03:04:57  96  ,gbp_g06
03:04:57  97  ,gbp_g07
03:04:57  98  ,gbp_g08
03:04:57  99  ,gbp_g09
03:04:57 100  ,gbp_g10
03:04:57 101  ,gbp_g11
03:04:57 102  ,gbp_g12
03:04:57 103  ,gbp_g13
03:04:57 104  ,gbp_g14
03:04:57 105  ,gbp_g15
03:04:57 106  ,gbp_g16
03:04:57 107  ,gbp_g17
03:04:57 108  ,gbp_g18
03:04:57 109  ,gbp_g19
03:04:57 110  ,gbp_g20
03:04:57 111  ,gbp_g21
03:04:57 112  ,gbp_g22
03:04:57 113  ,gbp_g23
03:04:57 114  ,gbp_g24
03:04:57 115  ,gbp_g25
03:04:57 116  ,gbp_g26
03:04:57 117  ,gbp_g27
03:04:57 118  ,gbp_g28
03:04:57 119  ,gbp_g29
03:04:57 120  ,gbp_g30
03:04:57 121  ,gbp_g31
03:04:57 122  ,gbp_g32
03:04:57 123  ,gbp_g33
03:04:57 124  ,gbp_g34
03:04:57 125  ,gbp_g35
03:04:57 126  ,gbp_g36
03:04:57 127  ,gbp_g37
03:04:57 128  ,gbp_g38
03:04:57 129  ,gbp_g39
03:04:57 130  ,gbp_g40
03:04:57 131  ,gbp_g41
03:04:57 132  ,jpy_g00
03:04:57 133  ,jpy_g01
03:04:57 134  ,jpy_g02
03:04:57 135  ,jpy_g03
03:04:57 136  ,jpy_g04
03:04:57 137  ,jpy_g05
03:04:57 138  ,jpy_g06
03:04:57 139  ,jpy_g07
03:04:57 140  ,jpy_g08
03:04:57 141  ,jpy_g09
03:04:57 142  ,jpy_g10
03:04:57 143  ,jpy_g11
03:04:57 144  ,jpy_g12
03:04:57 145  ,jpy_g13
03:04:57 146  ,jpy_g14
03:04:57 147  ,jpy_g15
03:04:57 148  ,jpy_g16
03:04:57 149  ,jpy_g17
03:04:57 150  ,jpy_g18
03:04:57 151  ,jpy_g19
03:04:57 152  ,jpy_g20
03:04:57 153  ,jpy_g21
03:04:57 154  ,jpy_g22
03:04:57 155  ,jpy_g23
03:04:57 156  ,jpy_g24
03:04:57 157  ,jpy_g25
03:04:57 158  ,jpy_g26
03:04:57 159  ,jpy_g27
03:04:57 160  ,jpy_g28
03:04:57 161  ,jpy_g29
03:04:57 162  ,jpy_g30
03:04:57 163  ,jpy_g31
03:04:57 164  ,jpy_g32
03:04:57 165  ,jpy_g33
03:04:57 166  ,jpy_g34
03:04:57 167  ,jpy_g35
03:04:57 168  ,jpy_g36
03:04:57 169  ,jpy_g37
03:04:57 170  ,jpy_g38
03:04:57 171  ,jpy_g39
03:04:57 172  ,jpy_g40
03:04:57 173  ,jpy_g41
03:04:57 174  ,cad_g00
03:04:57 175  ,cad_g01
03:04:57 176  ,cad_g02
03:04:57 177  ,cad_g03
03:04:57 178  ,cad_g04
03:04:57 179  ,cad_g05
03:04:57 180  ,cad_g06
03:04:57 181  ,cad_g07
03:04:57 182  ,cad_g08
03:04:57 183  ,cad_g09
03:04:57 184  ,cad_g10
03:04:57 185  ,cad_g11
03:04:57 186  ,cad_g12
03:04:57 187  ,cad_g13
03:04:57 188  ,cad_g14
03:04:57 189  ,cad_g15
03:04:57 190  ,cad_g16
03:04:57 191  ,cad_g17
03:04:57 192  ,cad_g18
03:04:57 193  ,cad_g19
03:04:57 194  ,cad_g20
03:04:57 195  ,cad_g21
03:04:57 196  ,cad_g22
03:04:57 197  ,cad_g23
03:04:57 198  ,cad_g24
03:04:57 199  ,cad_g25
03:04:57 200  ,cad_g26
03:04:57 201  ,cad_g27
03:04:57 202  ,cad_g28
03:04:57 203  ,cad_g29
03:04:57 204  ,cad_g30
03:04:57 205  ,cad_g31
03:04:57 206  ,cad_g32
03:04:57 207  ,cad_g33
03:04:57 208  ,cad_g34
03:04:57 209  ,cad_g35
03:04:57 210  ,cad_g36
03:04:57 211  ,cad_g37
03:04:57 212  ,cad_g38
03:04:57 213  ,cad_g39
03:04:57 214  ,cad_g40
03:04:57 215  ,cad_g41
03:04:57 216  ,chf_g00
03:04:57 217  ,chf_g01
03:04:57 218  ,chf_g02
03:04:57 219  ,chf_g03
03:04:57 220  ,chf_g04
03:04:57 221  ,chf_g05
03:04:57 222  ,chf_g06
03:04:57 223  ,chf_g07
03:04:57 224  ,chf_g08
03:04:57 225  ,chf_g09
03:04:57 226  ,chf_g10
03:04:57 227  ,chf_g11
03:04:57 228  ,chf_g12
03:04:57 229  ,chf_g13
03:04:57 230  ,chf_g14
03:04:57 231  ,chf_g15
03:04:57 232  ,chf_g16
03:04:57 233  ,chf_g17
03:04:57 234  ,chf_g18
03:04:57 235  ,chf_g19
03:04:57 236  ,chf_g20
03:04:57 237  ,chf_g21
03:04:57 238  ,chf_g22
03:04:57 239  ,chf_g23
03:04:57 240  ,chf_g24
03:04:57 241  ,chf_g25
03:04:57 242  ,chf_g26
03:04:57 243  ,chf_g27
03:04:57 244  ,chf_g28
03:04:57 245  ,chf_g29
03:04:57 246  ,chf_g30
03:04:57 247  ,chf_g31
03:04:57 248  ,chf_g32
03:04:57 249  ,chf_g33
03:04:57 250  ,chf_g34
03:04:57 251  ,chf_g35
03:04:57 252  ,chf_g36
03:04:57 253  ,chf_g37
03:04:57 254  ,chf_g38
03:04:57 255  ,chf_g39
03:04:57 256  ,chf_g40
03:04:57 257  ,chf_g41
03:04:57 258  FROM aud_ms6 m
03:04:57 259  WHERE gatt IN('nup','up')
03:04:57 260  AND 1+m.ydate < '&1'||' '||'&2'
03:04:57 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2011-01-05'||' '||'02:45:00'

View created.

Elapsed: 00:00:00.12
03:04:57 SQL> 
03:04:57 SQL> -- rpt
03:04:57 SQL> 
03:04:57 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt
03:04:57   2  
03:04:57 SQL> SELECT MAX(prdate) FROM bme
03:04:57   2  
03:04:57 SQL> -- Now build model from bme and score sme
03:04:57 SQL> @score1.sql
03:04:57 SQL> -- score1.sql
03:04:57 SQL> 
03:04:57 SQL> -- Does the 1st SVM score
03:04:57 SQL> 
03:04:57 SQL> -- Fill up svmc_apply_prep
03:04:57 SQL> @score.sql
03:04:57 SQL> --
03:04:57 SQL> -- score.sql
03:04:57 SQL> --
03:04:57 SQL> 
03:04:57 SQL> -- usage: score.sql
03:04:57 SQL> 
03:04:57 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
03:04:57 SQL> 
03:04:57 SQL> DEFINE target	= 'gatt'
03:04:57 SQL> DEFINE model_name = 'forex15'
03:04:57 SQL> DEFINE bldtable	= 'bme'
03:04:57 SQL> DEFINE scoretable = 'sme'
03:04:57 SQL> DEFINE case_id	= 'prdate'
03:04:57 SQL> 
03:04:57 SQL> -- Define a variable to help me exclude some columns from some data mining calls
03:04:57 SQL> DEFINE exclude1 = "'&target','&case_id'"
03:04:57 SQL> 
03:04:57 SQL> -- Builds an SVM model using pl/sql.
03:04:57 SQL> 
03:04:57 SQL> -----------------------------------------------------------------------
03:04:57 SQL> --			    BUILD THE MODEL
03:04:57 SQL> -----------------------------------------------------------------------
03:04:57 SQL> 
03:04:57 SQL> -- Cleanup old build data preparation objects for repeat runs
03:04:57 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.00
03:04:57 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
03:04:57 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.01
03:04:57 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.00
03:04:57 SQL> 
03:04:57 SQL> 
03:04:57 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
03:04:57 SQL> --
03:04:57 SQL> -- DROP	TABLE svmc_settings ;
03:04:57 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
03:04:57 SQL> -- DELETE svmc_settings;
03:04:57 SQL> 
03:04:57 SQL> -- The default classification algorithm is Naive Bayes. So override
03:04:57 SQL> -- this choice to SVM using a settings table.
03:04:57 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
03:04:57 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
03:04:57 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
03:04:57 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
03:04:57 SQL> -- models.
03:04:57 SQL> --
03:04:57 SQL> 
03:04:57 SQL> -- Do this once and then comment it out.
03:04:57 SQL> -- That makes script go faster.
03:04:57 SQL> -- BEGIN
03:04:57 SQL> -- -- Populate settings table
03:04:57 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
03:04:57 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
03:04:57 SQL> --
03:04:57 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
03:04:57 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
03:04:57 SQL> --
03:04:57 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
03:04:57 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
03:04:57 SQL> --   COMMIT;
03:04:57 SQL> -- END;
03:04:57 SQL> -- /
03:04:57 SQL> 
03:04:57 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
03:04:57 SQL> 
03:04:57 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
03:04:57   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:04:57   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
03:04:57 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
03:04:57   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:04:57   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
03:04:57 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
03:04:57   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:04:57   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
03:04:57 SQL> 
03:04:57 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
03:04:57   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:04:57   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
03:04:57 SQL> 
03:04:57 SQL> --------------------------------
03:04:57 SQL> -- PREPARE BUILD (TRAINING) DATA
03:04:57 SQL> --
03:04:57 SQL> 
03:04:57 SQL> -- 1. Missing Value treatment for all Predictors and
03:04:57 SQL> -- 2. Outlier Treatment and
03:04:57 SQL> -- 3. Normalization are performed below.
03:04:57 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
03:04:57 SQL> --    normalized here.
03:04:57 SQL> 
03:04:57 SQL> BEGIN
03:04:57   2  	-- Perform missing value treatment for all predictors
03:04:57   3  	-- create miss tables
03:04:57   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
03:04:57   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
03:04:57   6  
03:04:57   7  	-- populate miss tables
03:04:57   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
03:04:57   9  	  miss_table_name => 'svmc_miss_num',
03:04:57  10  	  data_table_name => '&bldtable',
03:04:57  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:04:57  12  
03:04:57  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
03:04:57  14  	  miss_table_name => 'svmc_miss_cat',
03:04:57  15  	  data_table_name => '&bldtable',
03:04:57  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:04:57  17  
03:04:57  18  	-- xform input data to replace missing values
03:04:57  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
03:04:57  20  	  miss_table_name => 'svmc_miss_num',
03:04:57  21  	  data_table_name => '&bldtable',
03:04:57  22  	  xform_view_name => 'xformed_build_miss_num');
03:04:57  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
03:04:57  24  	  miss_table_name => 'svmc_miss_cat',
03:04:57  25  	  data_table_name => '&bldtable',
03:04:57  26  	  xform_view_name => 'xformed_build_miss_cat');
03:04:57  27  
03:04:57  28  	-- Perform outlier treatment.
03:04:57  29  	-- create clip table
03:04:57  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
03:04:57  31  
03:04:57  32  	-- populate clip table
03:04:57  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
03:04:57  34  	  clip_table_name => 'svmc_clip',
03:04:57  35  	  data_table_name => '&bldtable',
03:04:57  36  	  tail_frac	  => 0.025,
03:04:57  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:04:57  38  
03:04:57  39  	-- xform input data to winsorized data
03:04:57  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
03:04:57  41  	  clip_table_name => 'svmc_clip',
03:04:57  42  	  data_table_name => '&bldtable',
03:04:57  43  	  xform_view_name => 'svmc_winsor');
03:04:57  44  
03:04:57  45  	-- create normalization table
03:04:57  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
03:04:57  47  
03:04:57  48  	-- populate normalization table based on winsorized data
03:04:57  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
03:04:57  50  	  norm_table_name => 'svmc_norm',
03:04:57  51  	  data_table_name => 'svmc_winsor',
03:04:57  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:04:57  53  
03:04:57  54  	-- normalize the original data
03:04:57  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
03:04:57  56  	  norm_table_name => 'svmc_norm',
03:04:57  57  	  data_table_name => '&bldtable',
03:04:57  58  	  xform_view_name => 'svmc_build_prep');
03:04:57  59  END;
03:04:57  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:18.11
03:05:15 SQL> 
03:05:15 SQL> ---------------------
03:05:15 SQL> -- CREATE A NEW MODEL
03:05:15 SQL> --
03:05:15 SQL> -- Cleanup old model with the same name for repeat runs
03:05:15 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
03:05:15   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:05:15   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex15');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.03
03:05:17 SQL> 
03:05:17 SQL> -- Build a new SVM Model
03:05:17 SQL> BEGIN
03:05:17   2  	DBMS_DATA_MINING.CREATE_MODEL(
03:05:17   3  	  model_name	      => '&model_name',
03:05:17   4  	  mining_function     => dbms_data_mining.classification,
03:05:17   5  	  data_table_name     => 'svmc_build_prep',
03:05:17   6  	  case_id_column_name => '&case_id',
03:05:17   7  	  target_column_name  => '&target',
03:05:17   8  	  settings_table_name => 'svmc_settings');
03:05:17   9  END;
03:05:17  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex15',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:27.38
03:05:44 SQL> 
03:05:44 SQL> -----------------------------------------------------------------------
03:05:44 SQL> --			       APPLY/score THE MODEL
03:05:44 SQL> -----------------------------------------------------------------------
03:05:44 SQL> 
03:05:44 SQL> -- Cleanup old scoring data preparation objects for repeat runs
03:05:44 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
03:05:44   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:05:44   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
03:05:44 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
03:05:44   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:05:44   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
03:05:44 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
03:05:44   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:05:44   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
03:05:44 SQL> -----------------------
03:05:44 SQL> -- PREPARE SCORING DATA
03:05:44 SQL> --
03:05:44 SQL> -- If the data for model creation has been prepared, then the data
03:05:44 SQL> -- to be scored using the model must be prepared in the same manner
03:05:44 SQL> -- in order to obtain meaningful results.
03:05:44 SQL> --
03:05:44 SQL> -- 1. Missing Value treatment for all Predictors and
03:05:44 SQL> -- 2. Normalization
03:05:44 SQL> -- No outlier treatment will be performed during test and apply. The
03:05:44 SQL> -- normalization step is sufficient, since the normalization parameters
03:05:44 SQL> -- already capture the effects of outlier treatment done with build data.
03:05:44 SQL> --
03:05:44 SQL> BEGIN
03:05:44   2  	-- Xform Test data to replace missing values
03:05:44   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
03:05:44   4  	  miss_table_name => 'svmc_miss_num',
03:05:44   5  	  data_table_name => '&scoretable',
03:05:44   6  	  xform_view_name => 'xformed_apply_miss_num');
03:05:44   7  
03:05:44   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
03:05:44   9  	  miss_table_name => 'svmc_miss_cat',
03:05:44  10  	  data_table_name => '&scoretable',
03:05:44  11  	  xform_view_name => 'xformed_apply_miss_cat');
03:05:44  12  
03:05:44  13  	-- Normalize the data to be scored
03:05:44  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
03:05:44  15  	  norm_table_name => 'svmc_norm',
03:05:44  16  	  data_table_name => '&scoretable',
03:05:44  17  	  xform_view_name => 'svmc_apply_prep');
03:05:44  18  END;
03:05:44  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.23
03:05:45 SQL> 
03:05:45 SQL> -- Use same model_name used in score.sql
03:05:45 SQL> DEFINE model_name = 'forex15'
03:05:45 SQL> 
03:05:45 SQL> -- CREATE TABLE fxscores6 (prdate VARCHAR2(30),score NUMBER,rundate DATE,pair VARCHAR2(8),ydate DATE);
03:05:45 SQL> 
03:05:45 SQL> DELETE fxscores6 WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.04
03:05:45 SQL> 
03:05:45 SQL> INSERT INTO fxscores6 (prdate,score,rundate,pair,ydate)
03:05:45   2  SELECT
03:05:45   3  prdate
03:05:45   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
03:05:45   5  ,sysdate
03:05:45   6  ,SUBSTR(prdate,1,3)pair
03:05:45   7  ,SUBSTR(prdate,4,19)ydate
03:05:45   8  FROM svmc_apply_prep
03:05:45   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex15,'up' USING *)score

1 row created.

Elapsed: 00:00:00.18
03:05:46 SQL> @aud_score1day.sql  2011-01-05 02:50:00
03:05:46 SQL> --
03:05:46 SQL> -- aud_score1day.sql
03:05:46 SQL> --
03:05:46 SQL> 
03:05:46 SQL> CREATE OR REPLACE VIEW sme AS
03:05:46   2  SELECT
03:05:46   3  'aud'||m.ydate prdate
03:05:46   4  ,NULL gatt
03:05:46   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
03:05:46   6  ,eur_g00
03:05:46   7  ,eur_g01
03:05:46   8  ,eur_g02
03:05:46   9  ,eur_g03
03:05:46  10  ,eur_g04
03:05:46  11  ,eur_g05
03:05:46  12  ,eur_g06
03:05:46  13  ,eur_g07
03:05:46  14  ,eur_g08
03:05:46  15  ,eur_g09
03:05:46  16  ,eur_g10
03:05:46  17  ,eur_g11
03:05:46  18  ,eur_g12
03:05:46  19  ,eur_g13
03:05:46  20  ,eur_g14
03:05:46  21  ,eur_g15
03:05:46  22  ,eur_g16
03:05:46  23  ,eur_g17
03:05:46  24  ,eur_g18
03:05:46  25  ,eur_g19
03:05:46  26  ,eur_g20
03:05:46  27  ,eur_g21
03:05:46  28  ,eur_g22
03:05:46  29  ,eur_g23
03:05:46  30  ,eur_g24
03:05:46  31  ,eur_g25
03:05:46  32  ,eur_g26
03:05:46  33  ,eur_g27
03:05:46  34  ,eur_g28
03:05:46  35  ,eur_g29
03:05:46  36  ,eur_g30
03:05:46  37  ,eur_g31
03:05:46  38  ,eur_g32
03:05:46  39  ,eur_g33
03:05:46  40  ,eur_g34
03:05:46  41  ,eur_g35
03:05:46  42  ,eur_g36
03:05:46  43  ,eur_g37
03:05:46  44  ,eur_g38
03:05:46  45  ,eur_g39
03:05:46  46  ,eur_g40
03:05:46  47  ,eur_g41
03:05:46  48  ,aud_g00
03:05:46  49  ,aud_g01
03:05:46  50  ,aud_g02
03:05:46  51  ,aud_g03
03:05:46  52  ,aud_g04
03:05:46  53  ,aud_g05
03:05:46  54  ,aud_g06
03:05:46  55  ,aud_g07
03:05:46  56  ,aud_g08
03:05:46  57  ,aud_g09
03:05:46  58  ,aud_g10
03:05:46  59  ,aud_g11
03:05:46  60  ,aud_g12
03:05:46  61  ,aud_g13
03:05:46  62  ,aud_g14
03:05:46  63  ,aud_g15
03:05:46  64  ,aud_g16
03:05:46  65  ,aud_g17
03:05:46  66  ,aud_g18
03:05:46  67  ,aud_g19
03:05:46  68  ,aud_g20
03:05:46  69  ,aud_g21
03:05:46  70  ,aud_g22
03:05:46  71  ,aud_g23
03:05:46  72  ,aud_g24
03:05:46  73  ,aud_g25
03:05:46  74  ,aud_g26
03:05:46  75  ,aud_g27
03:05:46  76  ,aud_g28
03:05:46  77  ,aud_g29
03:05:46  78  ,aud_g30
03:05:46  79  ,aud_g31
03:05:46  80  ,aud_g32
03:05:46  81  ,aud_g33
03:05:46  82  ,aud_g34
03:05:46  83  ,aud_g35
03:05:46  84  ,aud_g36
03:05:46  85  ,aud_g37
03:05:46  86  ,aud_g38
03:05:46  87  ,aud_g39
03:05:46  88  ,aud_g40
03:05:46  89  ,aud_g41
03:05:46  90  ,gbp_g00
03:05:46  91  ,gbp_g01
03:05:46  92  ,gbp_g02
03:05:46  93  ,gbp_g03
03:05:46  94  ,gbp_g04
03:05:46  95  ,gbp_g05
03:05:46  96  ,gbp_g06
03:05:46  97  ,gbp_g07
03:05:46  98  ,gbp_g08
03:05:46  99  ,gbp_g09
03:05:46 100  ,gbp_g10
03:05:46 101  ,gbp_g11
03:05:46 102  ,gbp_g12
03:05:46 103  ,gbp_g13
03:05:46 104  ,gbp_g14
03:05:46 105  ,gbp_g15
03:05:46 106  ,gbp_g16
03:05:46 107  ,gbp_g17
03:05:46 108  ,gbp_g18
03:05:46 109  ,gbp_g19
03:05:46 110  ,gbp_g20
03:05:46 111  ,gbp_g21
03:05:46 112  ,gbp_g22
03:05:46 113  ,gbp_g23
03:05:46 114  ,gbp_g24
03:05:46 115  ,gbp_g25
03:05:46 116  ,gbp_g26
03:05:46 117  ,gbp_g27
03:05:46 118  ,gbp_g28
03:05:46 119  ,gbp_g29
03:05:46 120  ,gbp_g30
03:05:46 121  ,gbp_g31
03:05:46 122  ,gbp_g32
03:05:46 123  ,gbp_g33
03:05:46 124  ,gbp_g34
03:05:46 125  ,gbp_g35
03:05:46 126  ,gbp_g36
03:05:46 127  ,gbp_g37
03:05:46 128  ,gbp_g38
03:05:46 129  ,gbp_g39
03:05:46 130  ,gbp_g40
03:05:46 131  ,gbp_g41
03:05:46 132  ,jpy_g00
03:05:46 133  ,jpy_g01
03:05:46 134  ,jpy_g02
03:05:46 135  ,jpy_g03
03:05:46 136  ,jpy_g04
03:05:46 137  ,jpy_g05
03:05:46 138  ,jpy_g06
03:05:46 139  ,jpy_g07
03:05:46 140  ,jpy_g08
03:05:46 141  ,jpy_g09
03:05:46 142  ,jpy_g10
03:05:46 143  ,jpy_g11
03:05:46 144  ,jpy_g12
03:05:46 145  ,jpy_g13
03:05:46 146  ,jpy_g14
03:05:46 147  ,jpy_g15
03:05:46 148  ,jpy_g16
03:05:46 149  ,jpy_g17
03:05:46 150  ,jpy_g18
03:05:46 151  ,jpy_g19
03:05:46 152  ,jpy_g20
03:05:46 153  ,jpy_g21
03:05:46 154  ,jpy_g22
03:05:46 155  ,jpy_g23
03:05:46 156  ,jpy_g24
03:05:46 157  ,jpy_g25
03:05:46 158  ,jpy_g26
03:05:46 159  ,jpy_g27
03:05:46 160  ,jpy_g28
03:05:46 161  ,jpy_g29
03:05:46 162  ,jpy_g30
03:05:46 163  ,jpy_g31
03:05:46 164  ,jpy_g32
03:05:46 165  ,jpy_g33
03:05:46 166  ,jpy_g34
03:05:46 167  ,jpy_g35
03:05:46 168  ,jpy_g36
03:05:46 169  ,jpy_g37
03:05:46 170  ,jpy_g38
03:05:46 171  ,jpy_g39
03:05:46 172  ,jpy_g40
03:05:46 173  ,jpy_g41
03:05:46 174  ,cad_g00
03:05:46 175  ,cad_g01
03:05:46 176  ,cad_g02
03:05:46 177  ,cad_g03
03:05:46 178  ,cad_g04
03:05:46 179  ,cad_g05
03:05:46 180  ,cad_g06
03:05:46 181  ,cad_g07
03:05:46 182  ,cad_g08
03:05:46 183  ,cad_g09
03:05:46 184  ,cad_g10
03:05:46 185  ,cad_g11
03:05:46 186  ,cad_g12
03:05:46 187  ,cad_g13
03:05:46 188  ,cad_g14
03:05:46 189  ,cad_g15
03:05:46 190  ,cad_g16
03:05:46 191  ,cad_g17
03:05:46 192  ,cad_g18
03:05:46 193  ,cad_g19
03:05:46 194  ,cad_g20
03:05:46 195  ,cad_g21
03:05:46 196  ,cad_g22
03:05:46 197  ,cad_g23
03:05:46 198  ,cad_g24
03:05:46 199  ,cad_g25
03:05:46 200  ,cad_g26
03:05:46 201  ,cad_g27
03:05:46 202  ,cad_g28
03:05:46 203  ,cad_g29
03:05:46 204  ,cad_g30
03:05:46 205  ,cad_g31
03:05:46 206  ,cad_g32
03:05:46 207  ,cad_g33
03:05:46 208  ,cad_g34
03:05:46 209  ,cad_g35
03:05:46 210  ,cad_g36
03:05:46 211  ,cad_g37
03:05:46 212  ,cad_g38
03:05:46 213  ,cad_g39
03:05:46 214  ,cad_g40
03:05:46 215  ,cad_g41
03:05:46 216  ,chf_g00
03:05:46 217  ,chf_g01
03:05:46 218  ,chf_g02
03:05:46 219  ,chf_g03
03:05:46 220  ,chf_g04
03:05:46 221  ,chf_g05
03:05:46 222  ,chf_g06
03:05:46 223  ,chf_g07
03:05:46 224  ,chf_g08
03:05:46 225  ,chf_g09
03:05:46 226  ,chf_g10
03:05:46 227  ,chf_g11
03:05:46 228  ,chf_g12
03:05:46 229  ,chf_g13
03:05:46 230  ,chf_g14
03:05:46 231  ,chf_g15
03:05:46 232  ,chf_g16
03:05:46 233  ,chf_g17
03:05:46 234  ,chf_g18
03:05:46 235  ,chf_g19
03:05:46 236  ,chf_g20
03:05:46 237  ,chf_g21
03:05:46 238  ,chf_g22
03:05:46 239  ,chf_g23
03:05:46 240  ,chf_g24
03:05:46 241  ,chf_g25
03:05:46 242  ,chf_g26
03:05:46 243  ,chf_g27
03:05:46 244  ,chf_g28
03:05:46 245  ,chf_g29
03:05:46 246  ,chf_g30
03:05:46 247  ,chf_g31
03:05:46 248  ,chf_g32
03:05:46 249  ,chf_g33
03:05:46 250  ,chf_g34
03:05:46 251  ,chf_g35
03:05:46 252  ,chf_g36
03:05:46 253  ,chf_g37
03:05:46 254  ,chf_g38
03:05:46 255  ,chf_g39
03:05:46 256  ,chf_g40
03:05:46 257  ,chf_g41
03:05:46 258  FROM aud_ms6 m
03:05:46 259  WHERE m.ydate = '&1'||' '||'&2'
03:05:46 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2011-01-05'||' '||'02:50:00'

View created.

Elapsed: 00:00:00.13
03:05:46 SQL> 
03:05:46 SQL> -- rpt
03:05:46 SQL> -- We should see just 1 row:
03:05:46 SQL> 
03:05:46 SQL> SELECT COUNT(prdate) FROM sme
03:05:46   2  
03:05:46 SQL> -- Build the model:
03:05:46 SQL> CREATE OR REPLACE VIEW bme AS
03:05:46   2  SELECT
03:05:46   3  'aud'||m.ydate prdate
03:05:46   4  ,gatt
03:05:46   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
03:05:46   6  ,eur_g00
03:05:46   7  ,eur_g01
03:05:46   8  ,eur_g02
03:05:46   9  ,eur_g03
03:05:46  10  ,eur_g04
03:05:46  11  ,eur_g05
03:05:46  12  ,eur_g06
03:05:46  13  ,eur_g07
03:05:46  14  ,eur_g08
03:05:46  15  ,eur_g09
03:05:46  16  ,eur_g10
03:05:46  17  ,eur_g11
03:05:46  18  ,eur_g12
03:05:46  19  ,eur_g13
03:05:46  20  ,eur_g14
03:05:46  21  ,eur_g15
03:05:46  22  ,eur_g16
03:05:46  23  ,eur_g17
03:05:46  24  ,eur_g18
03:05:46  25  ,eur_g19
03:05:46  26  ,eur_g20
03:05:46  27  ,eur_g21
03:05:46  28  ,eur_g22
03:05:46  29  ,eur_g23
03:05:46  30  ,eur_g24
03:05:46  31  ,eur_g25
03:05:46  32  ,eur_g26
03:05:46  33  ,eur_g27
03:05:46  34  ,eur_g28
03:05:46  35  ,eur_g29
03:05:46  36  ,eur_g30
03:05:46  37  ,eur_g31
03:05:46  38  ,eur_g32
03:05:46  39  ,eur_g33
03:05:46  40  ,eur_g34
03:05:46  41  ,eur_g35
03:05:46  42  ,eur_g36
03:05:46  43  ,eur_g37
03:05:46  44  ,eur_g38
03:05:46  45  ,eur_g39
03:05:46  46  ,eur_g40
03:05:46  47  ,eur_g41
03:05:46  48  ,aud_g00
03:05:46  49  ,aud_g01
03:05:46  50  ,aud_g02
03:05:46  51  ,aud_g03
03:05:46  52  ,aud_g04
03:05:46  53  ,aud_g05
03:05:46  54  ,aud_g06
03:05:46  55  ,aud_g07
03:05:46  56  ,aud_g08
03:05:46  57  ,aud_g09
03:05:46  58  ,aud_g10
03:05:46  59  ,aud_g11
03:05:46  60  ,aud_g12
03:05:46  61  ,aud_g13
03:05:46  62  ,aud_g14
03:05:46  63  ,aud_g15
03:05:46  64  ,aud_g16
03:05:46  65  ,aud_g17
03:05:46  66  ,aud_g18
03:05:46  67  ,aud_g19
03:05:46  68  ,aud_g20
03:05:46  69  ,aud_g21
03:05:46  70  ,aud_g22
03:05:46  71  ,aud_g23
03:05:46  72  ,aud_g24
03:05:46  73  ,aud_g25
03:05:46  74  ,aud_g26
03:05:46  75  ,aud_g27
03:05:46  76  ,aud_g28
03:05:46  77  ,aud_g29
03:05:46  78  ,aud_g30
03:05:46  79  ,aud_g31
03:05:46  80  ,aud_g32
03:05:46  81  ,aud_g33
03:05:46  82  ,aud_g34
03:05:46  83  ,aud_g35
03:05:46  84  ,aud_g36
03:05:46  85  ,aud_g37
03:05:46  86  ,aud_g38
03:05:46  87  ,aud_g39
03:05:46  88  ,aud_g40
03:05:46  89  ,aud_g41
03:05:46  90  ,gbp_g00
03:05:46  91  ,gbp_g01
03:05:46  92  ,gbp_g02
03:05:46  93  ,gbp_g03
03:05:46  94  ,gbp_g04
03:05:46  95  ,gbp_g05
03:05:46  96  ,gbp_g06
03:05:46  97  ,gbp_g07
03:05:46  98  ,gbp_g08
03:05:46  99  ,gbp_g09
03:05:46 100  ,gbp_g10
03:05:46 101  ,gbp_g11
03:05:46 102  ,gbp_g12
03:05:46 103  ,gbp_g13
03:05:46 104  ,gbp_g14
03:05:46 105  ,gbp_g15
03:05:46 106  ,gbp_g16
03:05:46 107  ,gbp_g17
03:05:46 108  ,gbp_g18
03:05:46 109  ,gbp_g19
03:05:46 110  ,gbp_g20
03:05:46 111  ,gbp_g21
03:05:46 112  ,gbp_g22
03:05:46 113  ,gbp_g23
03:05:46 114  ,gbp_g24
03:05:46 115  ,gbp_g25
03:05:46 116  ,gbp_g26
03:05:46 117  ,gbp_g27
03:05:46 118  ,gbp_g28
03:05:46 119  ,gbp_g29
03:05:46 120  ,gbp_g30
03:05:46 121  ,gbp_g31
03:05:46 122  ,gbp_g32
03:05:46 123  ,gbp_g33
03:05:46 124  ,gbp_g34
03:05:46 125  ,gbp_g35
03:05:46 126  ,gbp_g36
03:05:46 127  ,gbp_g37
03:05:46 128  ,gbp_g38
03:05:46 129  ,gbp_g39
03:05:46 130  ,gbp_g40
03:05:46 131  ,gbp_g41
03:05:46 132  ,jpy_g00
03:05:46 133  ,jpy_g01
03:05:46 134  ,jpy_g02
03:05:46 135  ,jpy_g03
03:05:46 136  ,jpy_g04
03:05:46 137  ,jpy_g05
03:05:46 138  ,jpy_g06
03:05:46 139  ,jpy_g07
03:05:46 140  ,jpy_g08
03:05:46 141  ,jpy_g09
03:05:46 142  ,jpy_g10
03:05:46 143  ,jpy_g11
03:05:46 144  ,jpy_g12
03:05:46 145  ,jpy_g13
03:05:46 146  ,jpy_g14
03:05:46 147  ,jpy_g15
03:05:46 148  ,jpy_g16
03:05:46 149  ,jpy_g17
03:05:46 150  ,jpy_g18
03:05:46 151  ,jpy_g19
03:05:46 152  ,jpy_g20
03:05:46 153  ,jpy_g21
03:05:46 154  ,jpy_g22
03:05:46 155  ,jpy_g23
03:05:46 156  ,jpy_g24
03:05:46 157  ,jpy_g25
03:05:46 158  ,jpy_g26
03:05:46 159  ,jpy_g27
03:05:46 160  ,jpy_g28
03:05:46 161  ,jpy_g29
03:05:46 162  ,jpy_g30
03:05:46 163  ,jpy_g31
03:05:46 164  ,jpy_g32
03:05:46 165  ,jpy_g33
03:05:46 166  ,jpy_g34
03:05:46 167  ,jpy_g35
03:05:46 168  ,jpy_g36
03:05:46 169  ,jpy_g37
03:05:46 170  ,jpy_g38
03:05:46 171  ,jpy_g39
03:05:46 172  ,jpy_g40
03:05:46 173  ,jpy_g41
03:05:46 174  ,cad_g00
03:05:46 175  ,cad_g01
03:05:46 176  ,cad_g02
03:05:46 177  ,cad_g03
03:05:46 178  ,cad_g04
03:05:46 179  ,cad_g05
03:05:46 180  ,cad_g06
03:05:46 181  ,cad_g07
03:05:46 182  ,cad_g08
03:05:46 183  ,cad_g09
03:05:46 184  ,cad_g10
03:05:46 185  ,cad_g11
03:05:46 186  ,cad_g12
03:05:46 187  ,cad_g13
03:05:46 188  ,cad_g14
03:05:46 189  ,cad_g15
03:05:46 190  ,cad_g16
03:05:46 191  ,cad_g17
03:05:46 192  ,cad_g18
03:05:46 193  ,cad_g19
03:05:46 194  ,cad_g20
03:05:46 195  ,cad_g21
03:05:46 196  ,cad_g22
03:05:46 197  ,cad_g23
03:05:46 198  ,cad_g24
03:05:46 199  ,cad_g25
03:05:46 200  ,cad_g26
03:05:46 201  ,cad_g27
03:05:46 202  ,cad_g28
03:05:46 203  ,cad_g29
03:05:46 204  ,cad_g30
03:05:46 205  ,cad_g31
03:05:46 206  ,cad_g32
03:05:46 207  ,cad_g33
03:05:46 208  ,cad_g34
03:05:46 209  ,cad_g35
03:05:46 210  ,cad_g36
03:05:46 211  ,cad_g37
03:05:46 212  ,cad_g38
03:05:46 213  ,cad_g39
03:05:46 214  ,cad_g40
03:05:46 215  ,cad_g41
03:05:46 216  ,chf_g00
03:05:46 217  ,chf_g01
03:05:46 218  ,chf_g02
03:05:46 219  ,chf_g03
03:05:46 220  ,chf_g04
03:05:46 221  ,chf_g05
03:05:46 222  ,chf_g06
03:05:46 223  ,chf_g07
03:05:46 224  ,chf_g08
03:05:46 225  ,chf_g09
03:05:46 226  ,chf_g10
03:05:46 227  ,chf_g11
03:05:46 228  ,chf_g12
03:05:46 229  ,chf_g13
03:05:46 230  ,chf_g14
03:05:46 231  ,chf_g15
03:05:46 232  ,chf_g16
03:05:46 233  ,chf_g17
03:05:46 234  ,chf_g18
03:05:46 235  ,chf_g19
03:05:46 236  ,chf_g20
03:05:46 237  ,chf_g21
03:05:46 238  ,chf_g22
03:05:46 239  ,chf_g23
03:05:46 240  ,chf_g24
03:05:46 241  ,chf_g25
03:05:46 242  ,chf_g26
03:05:46 243  ,chf_g27
03:05:46 244  ,chf_g28
03:05:46 245  ,chf_g29
03:05:46 246  ,chf_g30
03:05:46 247  ,chf_g31
03:05:46 248  ,chf_g32
03:05:46 249  ,chf_g33
03:05:46 250  ,chf_g34
03:05:46 251  ,chf_g35
03:05:46 252  ,chf_g36
03:05:46 253  ,chf_g37
03:05:46 254  ,chf_g38
03:05:46 255  ,chf_g39
03:05:46 256  ,chf_g40
03:05:46 257  ,chf_g41
03:05:46 258  FROM aud_ms6 m
03:05:46 259  WHERE gatt IN('nup','up')
03:05:46 260  AND 1+m.ydate < '&1'||' '||'&2'
03:05:46 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2011-01-05'||' '||'02:50:00'

View created.

Elapsed: 00:00:00.12
03:05:46 SQL> 
03:05:46 SQL> -- rpt
03:05:46 SQL> 
03:05:46 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt
03:05:46   2  
03:05:46 SQL> SELECT MAX(prdate) FROM bme
03:05:46   2  
03:05:46 SQL> -- Now build model from bme and score sme
03:05:46 SQL> @score1.sql
03:05:46 SQL> -- score1.sql
03:05:46 SQL> 
03:05:46 SQL> -- Does the 1st SVM score
03:05:46 SQL> 
03:05:46 SQL> -- Fill up svmc_apply_prep
03:05:46 SQL> @score.sql
03:05:46 SQL> --
03:05:46 SQL> -- score.sql
03:05:46 SQL> --
03:05:46 SQL> 
03:05:46 SQL> -- usage: score.sql
03:05:46 SQL> 
03:05:46 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
03:05:46 SQL> 
03:05:46 SQL> DEFINE target	= 'gatt'
03:05:46 SQL> DEFINE model_name = 'forex15'
03:05:46 SQL> DEFINE bldtable	= 'bme'
03:05:46 SQL> DEFINE scoretable = 'sme'
03:05:46 SQL> DEFINE case_id	= 'prdate'
03:05:46 SQL> 
03:05:46 SQL> -- Define a variable to help me exclude some columns from some data mining calls
03:05:46 SQL> DEFINE exclude1 = "'&target','&case_id'"
03:05:46 SQL> 
03:05:46 SQL> -- Builds an SVM model using pl/sql.
03:05:46 SQL> 
03:05:46 SQL> -----------------------------------------------------------------------
03:05:46 SQL> --			    BUILD THE MODEL
03:05:46 SQL> -----------------------------------------------------------------------
03:05:46 SQL> 
03:05:46 SQL> -- Cleanup old build data preparation objects for repeat runs
03:05:46 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.01
03:05:46 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
03:05:46 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.00
03:05:46 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.01
03:05:46 SQL> 
03:05:46 SQL> 
03:05:46 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
03:05:46 SQL> --
03:05:46 SQL> -- DROP	TABLE svmc_settings ;
03:05:46 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
03:05:46 SQL> -- DELETE svmc_settings;
03:05:46 SQL> 
03:05:46 SQL> -- The default classification algorithm is Naive Bayes. So override
03:05:46 SQL> -- this choice to SVM using a settings table.
03:05:46 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
03:05:46 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
03:05:46 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
03:05:46 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
03:05:46 SQL> -- models.
03:05:46 SQL> --
03:05:46 SQL> 
03:05:46 SQL> -- Do this once and then comment it out.
03:05:46 SQL> -- That makes script go faster.
03:05:46 SQL> -- BEGIN
03:05:46 SQL> -- -- Populate settings table
03:05:46 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
03:05:46 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
03:05:46 SQL> --
03:05:46 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
03:05:46 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
03:05:46 SQL> --
03:05:46 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
03:05:46 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
03:05:46 SQL> --   COMMIT;
03:05:46 SQL> -- END;
03:05:46 SQL> -- /
03:05:46 SQL> 
03:05:46 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
03:05:46 SQL> 
03:05:46 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
03:05:46   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:05:46   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
03:05:46 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
03:05:46   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:05:46   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
03:05:46 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
03:05:46   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:05:46   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
03:05:46 SQL> 
03:05:46 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
03:05:46   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:05:46   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
03:05:46 SQL> 
03:05:46 SQL> --------------------------------
03:05:46 SQL> -- PREPARE BUILD (TRAINING) DATA
03:05:46 SQL> --
03:05:46 SQL> 
03:05:46 SQL> -- 1. Missing Value treatment for all Predictors and
03:05:46 SQL> -- 2. Outlier Treatment and
03:05:46 SQL> -- 3. Normalization are performed below.
03:05:46 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
03:05:46 SQL> --    normalized here.
03:05:46 SQL> 
03:05:46 SQL> BEGIN
03:05:46   2  	-- Perform missing value treatment for all predictors
03:05:46   3  	-- create miss tables
03:05:46   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
03:05:46   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
03:05:46   6  
03:05:46   7  	-- populate miss tables
03:05:46   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
03:05:46   9  	  miss_table_name => 'svmc_miss_num',
03:05:46  10  	  data_table_name => '&bldtable',
03:05:46  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:05:46  12  
03:05:46  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
03:05:46  14  	  miss_table_name => 'svmc_miss_cat',
03:05:46  15  	  data_table_name => '&bldtable',
03:05:46  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:05:46  17  
03:05:46  18  	-- xform input data to replace missing values
03:05:46  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
03:05:46  20  	  miss_table_name => 'svmc_miss_num',
03:05:46  21  	  data_table_name => '&bldtable',
03:05:46  22  	  xform_view_name => 'xformed_build_miss_num');
03:05:46  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
03:05:46  24  	  miss_table_name => 'svmc_miss_cat',
03:05:46  25  	  data_table_name => '&bldtable',
03:05:46  26  	  xform_view_name => 'xformed_build_miss_cat');
03:05:46  27  
03:05:46  28  	-- Perform outlier treatment.
03:05:46  29  	-- create clip table
03:05:46  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
03:05:46  31  
03:05:46  32  	-- populate clip table
03:05:46  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
03:05:46  34  	  clip_table_name => 'svmc_clip',
03:05:46  35  	  data_table_name => '&bldtable',
03:05:46  36  	  tail_frac	  => 0.025,
03:05:46  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:05:46  38  
03:05:46  39  	-- xform input data to winsorized data
03:05:46  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
03:05:46  41  	  clip_table_name => 'svmc_clip',
03:05:46  42  	  data_table_name => '&bldtable',
03:05:46  43  	  xform_view_name => 'svmc_winsor');
03:05:46  44  
03:05:46  45  	-- create normalization table
03:05:46  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
03:05:46  47  
03:05:46  48  	-- populate normalization table based on winsorized data
03:05:46  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
03:05:46  50  	  norm_table_name => 'svmc_norm',
03:05:46  51  	  data_table_name => 'svmc_winsor',
03:05:46  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:05:46  53  
03:05:46  54  	-- normalize the original data
03:05:46  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
03:05:46  56  	  norm_table_name => 'svmc_norm',
03:05:46  57  	  data_table_name => '&bldtable',
03:05:46  58  	  xform_view_name => 'svmc_build_prep');
03:05:46  59  END;
03:05:46  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:18.61
03:06:05 SQL> 
03:06:05 SQL> ---------------------
03:06:05 SQL> -- CREATE A NEW MODEL
03:06:05 SQL> --
03:06:05 SQL> -- Cleanup old model with the same name for repeat runs
03:06:05 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
03:06:05   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:06:05   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex15');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.20
03:06:06 SQL> 
03:06:06 SQL> -- Build a new SVM Model
03:06:06 SQL> BEGIN
03:06:06   2  	DBMS_DATA_MINING.CREATE_MODEL(
03:06:06   3  	  model_name	      => '&model_name',
03:06:06   4  	  mining_function     => dbms_data_mining.classification,
03:06:06   5  	  data_table_name     => 'svmc_build_prep',
03:06:06   6  	  case_id_column_name => '&case_id',
03:06:06   7  	  target_column_name  => '&target',
03:06:06   8  	  settings_table_name => 'svmc_settings');
03:06:06   9  END;
03:06:06  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex15',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:27.45
03:06:33 SQL> 
03:06:33 SQL> -----------------------------------------------------------------------
03:06:33 SQL> --			       APPLY/score THE MODEL
03:06:33 SQL> -----------------------------------------------------------------------
03:06:33 SQL> 
03:06:33 SQL> -- Cleanup old scoring data preparation objects for repeat runs
03:06:33 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
03:06:33   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:06:33   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
03:06:33 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
03:06:33   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:06:33   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
03:06:33 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
03:06:33   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:06:33   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
03:06:33 SQL> -----------------------
03:06:33 SQL> -- PREPARE SCORING DATA
03:06:33 SQL> --
03:06:33 SQL> -- If the data for model creation has been prepared, then the data
03:06:33 SQL> -- to be scored using the model must be prepared in the same manner
03:06:33 SQL> -- in order to obtain meaningful results.
03:06:33 SQL> --
03:06:33 SQL> -- 1. Missing Value treatment for all Predictors and
03:06:33 SQL> -- 2. Normalization
03:06:33 SQL> -- No outlier treatment will be performed during test and apply. The
03:06:33 SQL> -- normalization step is sufficient, since the normalization parameters
03:06:33 SQL> -- already capture the effects of outlier treatment done with build data.
03:06:33 SQL> --
03:06:33 SQL> BEGIN
03:06:33   2  	-- Xform Test data to replace missing values
03:06:33   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
03:06:33   4  	  miss_table_name => 'svmc_miss_num',
03:06:33   5  	  data_table_name => '&scoretable',
03:06:33   6  	  xform_view_name => 'xformed_apply_miss_num');
03:06:33   7  
03:06:33   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
03:06:33   9  	  miss_table_name => 'svmc_miss_cat',
03:06:33  10  	  data_table_name => '&scoretable',
03:06:33  11  	  xform_view_name => 'xformed_apply_miss_cat');
03:06:33  12  
03:06:33  13  	-- Normalize the data to be scored
03:06:33  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
03:06:33  15  	  norm_table_name => 'svmc_norm',
03:06:33  16  	  data_table_name => '&scoretable',
03:06:33  17  	  xform_view_name => 'svmc_apply_prep');
03:06:33  18  END;
03:06:33  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.20
03:06:35 SQL> 
03:06:35 SQL> -- Use same model_name used in score.sql
03:06:35 SQL> DEFINE model_name = 'forex15'
03:06:35 SQL> 
03:06:35 SQL> -- CREATE TABLE fxscores6 (prdate VARCHAR2(30),score NUMBER,rundate DATE,pair VARCHAR2(8),ydate DATE);
03:06:35 SQL> 
03:06:35 SQL> DELETE fxscores6 WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.04
03:06:35 SQL> 
03:06:35 SQL> INSERT INTO fxscores6 (prdate,score,rundate,pair,ydate)
03:06:35   2  SELECT
03:06:35   3  prdate
03:06:35   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
03:06:35   5  ,sysdate
03:06:35   6  ,SUBSTR(prdate,1,3)pair
03:06:35   7  ,SUBSTR(prdate,4,19)ydate
03:06:35   8  FROM svmc_apply_prep
03:06:35   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex15,'up' USING *)score

1 row created.

Elapsed: 00:00:00.17
03:06:35 SQL> @aud_score1day.sql  2011-01-05 02:55:00
03:06:35 SQL> --
03:06:35 SQL> -- aud_score1day.sql
03:06:35 SQL> --
03:06:35 SQL> 
03:06:35 SQL> CREATE OR REPLACE VIEW sme AS
03:06:35   2  SELECT
03:06:35   3  'aud'||m.ydate prdate
03:06:35   4  ,NULL gatt
03:06:35   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
03:06:35   6  ,eur_g00
03:06:35   7  ,eur_g01
03:06:35   8  ,eur_g02
03:06:35   9  ,eur_g03
03:06:35  10  ,eur_g04
03:06:35  11  ,eur_g05
03:06:35  12  ,eur_g06
03:06:35  13  ,eur_g07
03:06:35  14  ,eur_g08
03:06:35  15  ,eur_g09
03:06:35  16  ,eur_g10
03:06:35  17  ,eur_g11
03:06:35  18  ,eur_g12
03:06:35  19  ,eur_g13
03:06:35  20  ,eur_g14
03:06:35  21  ,eur_g15
03:06:35  22  ,eur_g16
03:06:35  23  ,eur_g17
03:06:35  24  ,eur_g18
03:06:35  25  ,eur_g19
03:06:35  26  ,eur_g20
03:06:35  27  ,eur_g21
03:06:35  28  ,eur_g22
03:06:35  29  ,eur_g23
03:06:35  30  ,eur_g24
03:06:35  31  ,eur_g25
03:06:35  32  ,eur_g26
03:06:35  33  ,eur_g27
03:06:35  34  ,eur_g28
03:06:35  35  ,eur_g29
03:06:35  36  ,eur_g30
03:06:35  37  ,eur_g31
03:06:35  38  ,eur_g32
03:06:35  39  ,eur_g33
03:06:35  40  ,eur_g34
03:06:35  41  ,eur_g35
03:06:35  42  ,eur_g36
03:06:35  43  ,eur_g37
03:06:35  44  ,eur_g38
03:06:35  45  ,eur_g39
03:06:35  46  ,eur_g40
03:06:35  47  ,eur_g41
03:06:35  48  ,aud_g00
03:06:35  49  ,aud_g01
03:06:35  50  ,aud_g02
03:06:35  51  ,aud_g03
03:06:35  52  ,aud_g04
03:06:35  53  ,aud_g05
03:06:35  54  ,aud_g06
03:06:35  55  ,aud_g07
03:06:35  56  ,aud_g08
03:06:35  57  ,aud_g09
03:06:35  58  ,aud_g10
03:06:35  59  ,aud_g11
03:06:35  60  ,aud_g12
03:06:35  61  ,aud_g13
03:06:35  62  ,aud_g14
03:06:35  63  ,aud_g15
03:06:35  64  ,aud_g16
03:06:35  65  ,aud_g17
03:06:35  66  ,aud_g18
03:06:35  67  ,aud_g19
03:06:35  68  ,aud_g20
03:06:35  69  ,aud_g21
03:06:35  70  ,aud_g22
03:06:35  71  ,aud_g23
03:06:35  72  ,aud_g24
03:06:35  73  ,aud_g25
03:06:35  74  ,aud_g26
03:06:35  75  ,aud_g27
03:06:35  76  ,aud_g28
03:06:35  77  ,aud_g29
03:06:35  78  ,aud_g30
03:06:35  79  ,aud_g31
03:06:35  80  ,aud_g32
03:06:35  81  ,aud_g33
03:06:35  82  ,aud_g34
03:06:35  83  ,aud_g35
03:06:35  84  ,aud_g36
03:06:35  85  ,aud_g37
03:06:35  86  ,aud_g38
03:06:35  87  ,aud_g39
03:06:35  88  ,aud_g40
03:06:35  89  ,aud_g41
03:06:35  90  ,gbp_g00
03:06:35  91  ,gbp_g01
03:06:35  92  ,gbp_g02
03:06:35  93  ,gbp_g03
03:06:35  94  ,gbp_g04
03:06:35  95  ,gbp_g05
03:06:35  96  ,gbp_g06
03:06:35  97  ,gbp_g07
03:06:35  98  ,gbp_g08
03:06:35  99  ,gbp_g09
03:06:35 100  ,gbp_g10
03:06:35 101  ,gbp_g11
03:06:35 102  ,gbp_g12
03:06:35 103  ,gbp_g13
03:06:35 104  ,gbp_g14
03:06:35 105  ,gbp_g15
03:06:35 106  ,gbp_g16
03:06:35 107  ,gbp_g17
03:06:35 108  ,gbp_g18
03:06:35 109  ,gbp_g19
03:06:35 110  ,gbp_g20
03:06:35 111  ,gbp_g21
03:06:35 112  ,gbp_g22
03:06:35 113  ,gbp_g23
03:06:35 114  ,gbp_g24
03:06:35 115  ,gbp_g25
03:06:35 116  ,gbp_g26
03:06:35 117  ,gbp_g27
03:06:35 118  ,gbp_g28
03:06:35 119  ,gbp_g29
03:06:35 120  ,gbp_g30
03:06:35 121  ,gbp_g31
03:06:35 122  ,gbp_g32
03:06:35 123  ,gbp_g33
03:06:35 124  ,gbp_g34
03:06:35 125  ,gbp_g35
03:06:35 126  ,gbp_g36
03:06:35 127  ,gbp_g37
03:06:35 128  ,gbp_g38
03:06:35 129  ,gbp_g39
03:06:35 130  ,gbp_g40
03:06:35 131  ,gbp_g41
03:06:35 132  ,jpy_g00
03:06:35 133  ,jpy_g01
03:06:35 134  ,jpy_g02
03:06:35 135  ,jpy_g03
03:06:35 136  ,jpy_g04
03:06:35 137  ,jpy_g05
03:06:35 138  ,jpy_g06
03:06:35 139  ,jpy_g07
03:06:35 140  ,jpy_g08
03:06:35 141  ,jpy_g09
03:06:35 142  ,jpy_g10
03:06:35 143  ,jpy_g11
03:06:35 144  ,jpy_g12
03:06:35 145  ,jpy_g13
03:06:35 146  ,jpy_g14
03:06:35 147  ,jpy_g15
03:06:35 148  ,jpy_g16
03:06:35 149  ,jpy_g17
03:06:35 150  ,jpy_g18
03:06:35 151  ,jpy_g19
03:06:35 152  ,jpy_g20
03:06:35 153  ,jpy_g21
03:06:35 154  ,jpy_g22
03:06:35 155  ,jpy_g23
03:06:35 156  ,jpy_g24
03:06:35 157  ,jpy_g25
03:06:35 158  ,jpy_g26
03:06:35 159  ,jpy_g27
03:06:35 160  ,jpy_g28
03:06:35 161  ,jpy_g29
03:06:35 162  ,jpy_g30
03:06:35 163  ,jpy_g31
03:06:35 164  ,jpy_g32
03:06:35 165  ,jpy_g33
03:06:35 166  ,jpy_g34
03:06:35 167  ,jpy_g35
03:06:35 168  ,jpy_g36
03:06:35 169  ,jpy_g37
03:06:35 170  ,jpy_g38
03:06:35 171  ,jpy_g39
03:06:35 172  ,jpy_g40
03:06:35 173  ,jpy_g41
03:06:35 174  ,cad_g00
03:06:35 175  ,cad_g01
03:06:35 176  ,cad_g02
03:06:35 177  ,cad_g03
03:06:35 178  ,cad_g04
03:06:35 179  ,cad_g05
03:06:35 180  ,cad_g06
03:06:35 181  ,cad_g07
03:06:35 182  ,cad_g08
03:06:35 183  ,cad_g09
03:06:35 184  ,cad_g10
03:06:35 185  ,cad_g11
03:06:35 186  ,cad_g12
03:06:35 187  ,cad_g13
03:06:35 188  ,cad_g14
03:06:35 189  ,cad_g15
03:06:35 190  ,cad_g16
03:06:35 191  ,cad_g17
03:06:35 192  ,cad_g18
03:06:35 193  ,cad_g19
03:06:35 194  ,cad_g20
03:06:35 195  ,cad_g21
03:06:35 196  ,cad_g22
03:06:35 197  ,cad_g23
03:06:35 198  ,cad_g24
03:06:35 199  ,cad_g25
03:06:35 200  ,cad_g26
03:06:35 201  ,cad_g27
03:06:35 202  ,cad_g28
03:06:35 203  ,cad_g29
03:06:35 204  ,cad_g30
03:06:35 205  ,cad_g31
03:06:35 206  ,cad_g32
03:06:35 207  ,cad_g33
03:06:35 208  ,cad_g34
03:06:35 209  ,cad_g35
03:06:35 210  ,cad_g36
03:06:35 211  ,cad_g37
03:06:35 212  ,cad_g38
03:06:35 213  ,cad_g39
03:06:35 214  ,cad_g40
03:06:35 215  ,cad_g41
03:06:35 216  ,chf_g00
03:06:35 217  ,chf_g01
03:06:35 218  ,chf_g02
03:06:35 219  ,chf_g03
03:06:35 220  ,chf_g04
03:06:35 221  ,chf_g05
03:06:35 222  ,chf_g06
03:06:35 223  ,chf_g07
03:06:35 224  ,chf_g08
03:06:35 225  ,chf_g09
03:06:35 226  ,chf_g10
03:06:35 227  ,chf_g11
03:06:35 228  ,chf_g12
03:06:35 229  ,chf_g13
03:06:35 230  ,chf_g14
03:06:35 231  ,chf_g15
03:06:35 232  ,chf_g16
03:06:35 233  ,chf_g17
03:06:35 234  ,chf_g18
03:06:35 235  ,chf_g19
03:06:35 236  ,chf_g20
03:06:35 237  ,chf_g21
03:06:35 238  ,chf_g22
03:06:35 239  ,chf_g23
03:06:35 240  ,chf_g24
03:06:35 241  ,chf_g25
03:06:35 242  ,chf_g26
03:06:35 243  ,chf_g27
03:06:35 244  ,chf_g28
03:06:35 245  ,chf_g29
03:06:35 246  ,chf_g30
03:06:35 247  ,chf_g31
03:06:35 248  ,chf_g32
03:06:35 249  ,chf_g33
03:06:35 250  ,chf_g34
03:06:35 251  ,chf_g35
03:06:35 252  ,chf_g36
03:06:35 253  ,chf_g37
03:06:35 254  ,chf_g38
03:06:35 255  ,chf_g39
03:06:35 256  ,chf_g40
03:06:35 257  ,chf_g41
03:06:35 258  FROM aud_ms6 m
03:06:35 259  WHERE m.ydate = '&1'||' '||'&2'
03:06:35 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2011-01-05'||' '||'02:55:00'

View created.

Elapsed: 00:00:00.12
03:06:35 SQL> 
03:06:35 SQL> -- rpt
03:06:35 SQL> -- We should see just 1 row:
03:06:35 SQL> 
03:06:35 SQL> SELECT COUNT(prdate) FROM sme
03:06:35   2  
03:06:35 SQL> -- Build the model:
03:06:35 SQL> CREATE OR REPLACE VIEW bme AS
03:06:35   2  SELECT
03:06:35   3  'aud'||m.ydate prdate
03:06:35   4  ,gatt
03:06:35   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
03:06:35   6  ,eur_g00
03:06:35   7  ,eur_g01
03:06:35   8  ,eur_g02
03:06:35   9  ,eur_g03
03:06:35  10  ,eur_g04
03:06:35  11  ,eur_g05
03:06:35  12  ,eur_g06
03:06:35  13  ,eur_g07
03:06:35  14  ,eur_g08
03:06:35  15  ,eur_g09
03:06:35  16  ,eur_g10
03:06:35  17  ,eur_g11
03:06:35  18  ,eur_g12
03:06:35  19  ,eur_g13
03:06:35  20  ,eur_g14
03:06:35  21  ,eur_g15
03:06:35  22  ,eur_g16
03:06:35  23  ,eur_g17
03:06:35  24  ,eur_g18
03:06:35  25  ,eur_g19
03:06:35  26  ,eur_g20
03:06:35  27  ,eur_g21
03:06:35  28  ,eur_g22
03:06:35  29  ,eur_g23
03:06:35  30  ,eur_g24
03:06:35  31  ,eur_g25
03:06:35  32  ,eur_g26
03:06:35  33  ,eur_g27
03:06:35  34  ,eur_g28
03:06:35  35  ,eur_g29
03:06:35  36  ,eur_g30
03:06:35  37  ,eur_g31
03:06:35  38  ,eur_g32
03:06:35  39  ,eur_g33
03:06:35  40  ,eur_g34
03:06:35  41  ,eur_g35
03:06:35  42  ,eur_g36
03:06:35  43  ,eur_g37
03:06:35  44  ,eur_g38
03:06:35  45  ,eur_g39
03:06:35  46  ,eur_g40
03:06:35  47  ,eur_g41
03:06:35  48  ,aud_g00
03:06:35  49  ,aud_g01
03:06:35  50  ,aud_g02
03:06:35  51  ,aud_g03
03:06:35  52  ,aud_g04
03:06:35  53  ,aud_g05
03:06:35  54  ,aud_g06
03:06:35  55  ,aud_g07
03:06:35  56  ,aud_g08
03:06:35  57  ,aud_g09
03:06:35  58  ,aud_g10
03:06:35  59  ,aud_g11
03:06:35  60  ,aud_g12
03:06:35  61  ,aud_g13
03:06:35  62  ,aud_g14
03:06:35  63  ,aud_g15
03:06:35  64  ,aud_g16
03:06:35  65  ,aud_g17
03:06:35  66  ,aud_g18
03:06:35  67  ,aud_g19
03:06:35  68  ,aud_g20
03:06:35  69  ,aud_g21
03:06:35  70  ,aud_g22
03:06:35  71  ,aud_g23
03:06:35  72  ,aud_g24
03:06:35  73  ,aud_g25
03:06:35  74  ,aud_g26
03:06:35  75  ,aud_g27
03:06:35  76  ,aud_g28
03:06:35  77  ,aud_g29
03:06:35  78  ,aud_g30
03:06:35  79  ,aud_g31
03:06:35  80  ,aud_g32
03:06:35  81  ,aud_g33
03:06:35  82  ,aud_g34
03:06:35  83  ,aud_g35
03:06:35  84  ,aud_g36
03:06:35  85  ,aud_g37
03:06:35  86  ,aud_g38
03:06:35  87  ,aud_g39
03:06:35  88  ,aud_g40
03:06:35  89  ,aud_g41
03:06:35  90  ,gbp_g00
03:06:35  91  ,gbp_g01
03:06:35  92  ,gbp_g02
03:06:35  93  ,gbp_g03
03:06:35  94  ,gbp_g04
03:06:35  95  ,gbp_g05
03:06:35  96  ,gbp_g06
03:06:35  97  ,gbp_g07
03:06:35  98  ,gbp_g08
03:06:35  99  ,gbp_g09
03:06:35 100  ,gbp_g10
03:06:35 101  ,gbp_g11
03:06:35 102  ,gbp_g12
03:06:35 103  ,gbp_g13
03:06:35 104  ,gbp_g14
03:06:35 105  ,gbp_g15
03:06:35 106  ,gbp_g16
03:06:35 107  ,gbp_g17
03:06:35 108  ,gbp_g18
03:06:35 109  ,gbp_g19
03:06:35 110  ,gbp_g20
03:06:35 111  ,gbp_g21
03:06:35 112  ,gbp_g22
03:06:35 113  ,gbp_g23
03:06:35 114  ,gbp_g24
03:06:35 115  ,gbp_g25
03:06:35 116  ,gbp_g26
03:06:35 117  ,gbp_g27
03:06:35 118  ,gbp_g28
03:06:35 119  ,gbp_g29
03:06:35 120  ,gbp_g30
03:06:35 121  ,gbp_g31
03:06:35 122  ,gbp_g32
03:06:35 123  ,gbp_g33
03:06:35 124  ,gbp_g34
03:06:35 125  ,gbp_g35
03:06:35 126  ,gbp_g36
03:06:35 127  ,gbp_g37
03:06:35 128  ,gbp_g38
03:06:35 129  ,gbp_g39
03:06:35 130  ,gbp_g40
03:06:35 131  ,gbp_g41
03:06:35 132  ,jpy_g00
03:06:35 133  ,jpy_g01
03:06:35 134  ,jpy_g02
03:06:35 135  ,jpy_g03
03:06:35 136  ,jpy_g04
03:06:35 137  ,jpy_g05
03:06:35 138  ,jpy_g06
03:06:35 139  ,jpy_g07
03:06:35 140  ,jpy_g08
03:06:35 141  ,jpy_g09
03:06:35 142  ,jpy_g10
03:06:35 143  ,jpy_g11
03:06:35 144  ,jpy_g12
03:06:35 145  ,jpy_g13
03:06:35 146  ,jpy_g14
03:06:35 147  ,jpy_g15
03:06:35 148  ,jpy_g16
03:06:35 149  ,jpy_g17
03:06:35 150  ,jpy_g18
03:06:35 151  ,jpy_g19
03:06:35 152  ,jpy_g20
03:06:35 153  ,jpy_g21
03:06:35 154  ,jpy_g22
03:06:35 155  ,jpy_g23
03:06:35 156  ,jpy_g24
03:06:35 157  ,jpy_g25
03:06:35 158  ,jpy_g26
03:06:35 159  ,jpy_g27
03:06:35 160  ,jpy_g28
03:06:35 161  ,jpy_g29
03:06:35 162  ,jpy_g30
03:06:35 163  ,jpy_g31
03:06:35 164  ,jpy_g32
03:06:35 165  ,jpy_g33
03:06:35 166  ,jpy_g34
03:06:35 167  ,jpy_g35
03:06:35 168  ,jpy_g36
03:06:35 169  ,jpy_g37
03:06:35 170  ,jpy_g38
03:06:35 171  ,jpy_g39
03:06:35 172  ,jpy_g40
03:06:35 173  ,jpy_g41
03:06:35 174  ,cad_g00
03:06:35 175  ,cad_g01
03:06:35 176  ,cad_g02
03:06:35 177  ,cad_g03
03:06:35 178  ,cad_g04
03:06:35 179  ,cad_g05
03:06:35 180  ,cad_g06
03:06:35 181  ,cad_g07
03:06:35 182  ,cad_g08
03:06:35 183  ,cad_g09
03:06:35 184  ,cad_g10
03:06:35 185  ,cad_g11
03:06:35 186  ,cad_g12
03:06:35 187  ,cad_g13
03:06:35 188  ,cad_g14
03:06:35 189  ,cad_g15
03:06:35 190  ,cad_g16
03:06:35 191  ,cad_g17
03:06:35 192  ,cad_g18
03:06:35 193  ,cad_g19
03:06:35 194  ,cad_g20
03:06:35 195  ,cad_g21
03:06:35 196  ,cad_g22
03:06:35 197  ,cad_g23
03:06:35 198  ,cad_g24
03:06:35 199  ,cad_g25
03:06:35 200  ,cad_g26
03:06:35 201  ,cad_g27
03:06:35 202  ,cad_g28
03:06:35 203  ,cad_g29
03:06:35 204  ,cad_g30
03:06:35 205  ,cad_g31
03:06:35 206  ,cad_g32
03:06:35 207  ,cad_g33
03:06:35 208  ,cad_g34
03:06:35 209  ,cad_g35
03:06:35 210  ,cad_g36
03:06:35 211  ,cad_g37
03:06:35 212  ,cad_g38
03:06:35 213  ,cad_g39
03:06:35 214  ,cad_g40
03:06:35 215  ,cad_g41
03:06:35 216  ,chf_g00
03:06:35 217  ,chf_g01
03:06:35 218  ,chf_g02
03:06:35 219  ,chf_g03
03:06:35 220  ,chf_g04
03:06:35 221  ,chf_g05
03:06:35 222  ,chf_g06
03:06:35 223  ,chf_g07
03:06:35 224  ,chf_g08
03:06:35 225  ,chf_g09
03:06:35 226  ,chf_g10
03:06:35 227  ,chf_g11
03:06:35 228  ,chf_g12
03:06:35 229  ,chf_g13
03:06:35 230  ,chf_g14
03:06:35 231  ,chf_g15
03:06:35 232  ,chf_g16
03:06:35 233  ,chf_g17
03:06:35 234  ,chf_g18
03:06:35 235  ,chf_g19
03:06:35 236  ,chf_g20
03:06:35 237  ,chf_g21
03:06:35 238  ,chf_g22
03:06:35 239  ,chf_g23
03:06:35 240  ,chf_g24
03:06:35 241  ,chf_g25
03:06:35 242  ,chf_g26
03:06:35 243  ,chf_g27
03:06:35 244  ,chf_g28
03:06:35 245  ,chf_g29
03:06:35 246  ,chf_g30
03:06:35 247  ,chf_g31
03:06:35 248  ,chf_g32
03:06:35 249  ,chf_g33
03:06:35 250  ,chf_g34
03:06:35 251  ,chf_g35
03:06:35 252  ,chf_g36
03:06:35 253  ,chf_g37
03:06:35 254  ,chf_g38
03:06:35 255  ,chf_g39
03:06:35 256  ,chf_g40
03:06:35 257  ,chf_g41
03:06:35 258  FROM aud_ms6 m
03:06:35 259  WHERE gatt IN('nup','up')
03:06:35 260  AND 1+m.ydate < '&1'||' '||'&2'
03:06:35 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2011-01-05'||' '||'02:55:00'

View created.

Elapsed: 00:00:00.13
03:06:35 SQL> 
03:06:35 SQL> -- rpt
03:06:35 SQL> 
03:06:35 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt
03:06:35   2  
03:06:35 SQL> SELECT MAX(prdate) FROM bme
03:06:35   2  
03:06:35 SQL> -- Now build model from bme and score sme
03:06:35 SQL> @score1.sql
03:06:35 SQL> -- score1.sql
03:06:35 SQL> 
03:06:35 SQL> -- Does the 1st SVM score
03:06:35 SQL> 
03:06:35 SQL> -- Fill up svmc_apply_prep
03:06:35 SQL> @score.sql
03:06:35 SQL> --
03:06:35 SQL> -- score.sql
03:06:35 SQL> --
03:06:35 SQL> 
03:06:35 SQL> -- usage: score.sql
03:06:35 SQL> 
03:06:35 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
03:06:35 SQL> 
03:06:35 SQL> DEFINE target	= 'gatt'
03:06:35 SQL> DEFINE model_name = 'forex15'
03:06:35 SQL> DEFINE bldtable	= 'bme'
03:06:35 SQL> DEFINE scoretable = 'sme'
03:06:35 SQL> DEFINE case_id	= 'prdate'
03:06:35 SQL> 
03:06:35 SQL> -- Define a variable to help me exclude some columns from some data mining calls
03:06:35 SQL> DEFINE exclude1 = "'&target','&case_id'"
03:06:35 SQL> 
03:06:35 SQL> -- Builds an SVM model using pl/sql.
03:06:35 SQL> 
03:06:35 SQL> -----------------------------------------------------------------------
03:06:35 SQL> --			    BUILD THE MODEL
03:06:35 SQL> -----------------------------------------------------------------------
03:06:35 SQL> 
03:06:35 SQL> -- Cleanup old build data preparation objects for repeat runs
03:06:35 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.01
03:06:35 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
03:06:35 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.00
03:06:35 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.01
03:06:35 SQL> 
03:06:35 SQL> 
03:06:35 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
03:06:35 SQL> --
03:06:35 SQL> -- DROP	TABLE svmc_settings ;
03:06:35 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
03:06:35 SQL> -- DELETE svmc_settings;
03:06:35 SQL> 
03:06:35 SQL> -- The default classification algorithm is Naive Bayes. So override
03:06:35 SQL> -- this choice to SVM using a settings table.
03:06:35 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
03:06:35 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
03:06:35 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
03:06:35 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
03:06:35 SQL> -- models.
03:06:35 SQL> --
03:06:35 SQL> 
03:06:35 SQL> -- Do this once and then comment it out.
03:06:35 SQL> -- That makes script go faster.
03:06:35 SQL> -- BEGIN
03:06:35 SQL> -- -- Populate settings table
03:06:35 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
03:06:35 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
03:06:35 SQL> --
03:06:35 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
03:06:35 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
03:06:35 SQL> --
03:06:35 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
03:06:35 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
03:06:35 SQL> --   COMMIT;
03:06:35 SQL> -- END;
03:06:35 SQL> -- /
03:06:35 SQL> 
03:06:35 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
03:06:35 SQL> 
03:06:35 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
03:06:35   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:06:35   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
03:06:35 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
03:06:35   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:06:35   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
03:06:35 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
03:06:35   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:06:35   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
03:06:35 SQL> 
03:06:35 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
03:06:35   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:06:35   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
03:06:35 SQL> 
03:06:35 SQL> --------------------------------
03:06:35 SQL> -- PREPARE BUILD (TRAINING) DATA
03:06:35 SQL> --
03:06:35 SQL> 
03:06:35 SQL> -- 1. Missing Value treatment for all Predictors and
03:06:35 SQL> -- 2. Outlier Treatment and
03:06:35 SQL> -- 3. Normalization are performed below.
03:06:35 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
03:06:35 SQL> --    normalized here.
03:06:35 SQL> 
03:06:35 SQL> BEGIN
03:06:35   2  	-- Perform missing value treatment for all predictors
03:06:35   3  	-- create miss tables
03:06:35   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
03:06:35   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
03:06:35   6  
03:06:35   7  	-- populate miss tables
03:06:35   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
03:06:35   9  	  miss_table_name => 'svmc_miss_num',
03:06:35  10  	  data_table_name => '&bldtable',
03:06:35  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:06:35  12  
03:06:35  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
03:06:35  14  	  miss_table_name => 'svmc_miss_cat',
03:06:35  15  	  data_table_name => '&bldtable',
03:06:35  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:06:35  17  
03:06:35  18  	-- xform input data to replace missing values
03:06:35  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
03:06:35  20  	  miss_table_name => 'svmc_miss_num',
03:06:35  21  	  data_table_name => '&bldtable',
03:06:35  22  	  xform_view_name => 'xformed_build_miss_num');
03:06:35  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
03:06:35  24  	  miss_table_name => 'svmc_miss_cat',
03:06:35  25  	  data_table_name => '&bldtable',
03:06:35  26  	  xform_view_name => 'xformed_build_miss_cat');
03:06:35  27  
03:06:35  28  	-- Perform outlier treatment.
03:06:35  29  	-- create clip table
03:06:35  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
03:06:35  31  
03:06:35  32  	-- populate clip table
03:06:35  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
03:06:35  34  	  clip_table_name => 'svmc_clip',
03:06:35  35  	  data_table_name => '&bldtable',
03:06:35  36  	  tail_frac	  => 0.025,
03:06:35  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:06:35  38  
03:06:35  39  	-- xform input data to winsorized data
03:06:35  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
03:06:35  41  	  clip_table_name => 'svmc_clip',
03:06:35  42  	  data_table_name => '&bldtable',
03:06:35  43  	  xform_view_name => 'svmc_winsor');
03:06:35  44  
03:06:35  45  	-- create normalization table
03:06:35  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
03:06:35  47  
03:06:35  48  	-- populate normalization table based on winsorized data
03:06:35  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
03:06:35  50  	  norm_table_name => 'svmc_norm',
03:06:35  51  	  data_table_name => 'svmc_winsor',
03:06:35  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:06:35  53  
03:06:35  54  	-- normalize the original data
03:06:35  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
03:06:35  56  	  norm_table_name => 'svmc_norm',
03:06:35  57  	  data_table_name => '&bldtable',
03:06:35  58  	  xform_view_name => 'svmc_build_prep');
03:06:35  59  END;
03:06:35  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:18.07
03:06:54 SQL> 
03:06:54 SQL> ---------------------
03:06:54 SQL> -- CREATE A NEW MODEL
03:06:54 SQL> --
03:06:54 SQL> -- Cleanup old model with the same name for repeat runs
03:06:54 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
03:06:54   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:06:54   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex15');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.99
03:06:55 SQL> 
03:06:55 SQL> -- Build a new SVM Model
03:06:55 SQL> BEGIN
03:06:55   2  	DBMS_DATA_MINING.CREATE_MODEL(
03:06:55   3  	  model_name	      => '&model_name',
03:06:55   4  	  mining_function     => dbms_data_mining.classification,
03:06:55   5  	  data_table_name     => 'svmc_build_prep',
03:06:55   6  	  case_id_column_name => '&case_id',
03:06:55   7  	  target_column_name  => '&target',
03:06:55   8  	  settings_table_name => 'svmc_settings');
03:06:55   9  END;
03:06:55  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex15',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:27.15
03:07:22 SQL> 
03:07:22 SQL> -----------------------------------------------------------------------
03:07:22 SQL> --			       APPLY/score THE MODEL
03:07:22 SQL> -----------------------------------------------------------------------
03:07:22 SQL> 
03:07:22 SQL> -- Cleanup old scoring data preparation objects for repeat runs
03:07:22 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
03:07:22   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:07:22   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
03:07:22 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
03:07:22   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:07:22   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
03:07:22 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
03:07:22   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:07:22   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
03:07:22 SQL> -----------------------
03:07:22 SQL> -- PREPARE SCORING DATA
03:07:22 SQL> --
03:07:22 SQL> -- If the data for model creation has been prepared, then the data
03:07:22 SQL> -- to be scored using the model must be prepared in the same manner
03:07:22 SQL> -- in order to obtain meaningful results.
03:07:22 SQL> --
03:07:22 SQL> -- 1. Missing Value treatment for all Predictors and
03:07:22 SQL> -- 2. Normalization
03:07:22 SQL> -- No outlier treatment will be performed during test and apply. The
03:07:22 SQL> -- normalization step is sufficient, since the normalization parameters
03:07:22 SQL> -- already capture the effects of outlier treatment done with build data.
03:07:22 SQL> --
03:07:22 SQL> BEGIN
03:07:22   2  	-- Xform Test data to replace missing values
03:07:22   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
03:07:22   4  	  miss_table_name => 'svmc_miss_num',
03:07:22   5  	  data_table_name => '&scoretable',
03:07:22   6  	  xform_view_name => 'xformed_apply_miss_num');
03:07:22   7  
03:07:22   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
03:07:22   9  	  miss_table_name => 'svmc_miss_cat',
03:07:22  10  	  data_table_name => '&scoretable',
03:07:22  11  	  xform_view_name => 'xformed_apply_miss_cat');
03:07:22  12  
03:07:22  13  	-- Normalize the data to be scored
03:07:22  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
03:07:22  15  	  norm_table_name => 'svmc_norm',
03:07:22  16  	  data_table_name => '&scoretable',
03:07:22  17  	  xform_view_name => 'svmc_apply_prep');
03:07:22  18  END;
03:07:22  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.19
03:07:23 SQL> 
03:07:23 SQL> -- Use same model_name used in score.sql
03:07:23 SQL> DEFINE model_name = 'forex15'
03:07:23 SQL> 
03:07:23 SQL> -- CREATE TABLE fxscores6 (prdate VARCHAR2(30),score NUMBER,rundate DATE,pair VARCHAR2(8),ydate DATE);
03:07:23 SQL> 
03:07:23 SQL> DELETE fxscores6 WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.04
03:07:23 SQL> 
03:07:23 SQL> INSERT INTO fxscores6 (prdate,score,rundate,pair,ydate)
03:07:23   2  SELECT
03:07:23   3  prdate
03:07:23   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
03:07:23   5  ,sysdate
03:07:23   6  ,SUBSTR(prdate,1,3)pair
03:07:23   7  ,SUBSTR(prdate,4,19)ydate
03:07:23   8  FROM svmc_apply_prep
03:07:23   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex15,'up' USING *)score

1 row created.

Elapsed: 00:00:00.17
03:07:23 SQL> @aud_score1day_gattn.sql	2011-01-05 02:40:00
03:07:23 SQL> --
03:07:23 SQL> -- aud_score1day_gattn.sql
03:07:23 SQL> --
03:07:23 SQL> 
03:07:23 SQL> CREATE OR REPLACE VIEW sme AS
03:07:23   2  SELECT
03:07:23   3  'aud'||m.ydate prdate
03:07:23   4  ,NULL gattn
03:07:23   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
03:07:23   6  ,eur_g00
03:07:23   7  ,eur_g01
03:07:23   8  ,eur_g02
03:07:23   9  ,eur_g03
03:07:23  10  ,eur_g04
03:07:23  11  ,eur_g05
03:07:23  12  ,eur_g06
03:07:23  13  ,eur_g07
03:07:23  14  ,eur_g08
03:07:23  15  ,eur_g09
03:07:23  16  ,eur_g10
03:07:23  17  ,eur_g11
03:07:23  18  ,eur_g12
03:07:23  19  ,eur_g13
03:07:23  20  ,eur_g14
03:07:23  21  ,eur_g15
03:07:23  22  ,eur_g16
03:07:23  23  ,eur_g17
03:07:23  24  ,eur_g18
03:07:23  25  ,eur_g19
03:07:23  26  ,eur_g20
03:07:23  27  ,eur_g21
03:07:23  28  ,eur_g22
03:07:23  29  ,eur_g23
03:07:23  30  ,eur_g24
03:07:23  31  ,eur_g25
03:07:23  32  ,eur_g26
03:07:23  33  ,eur_g27
03:07:23  34  ,eur_g28
03:07:23  35  ,eur_g29
03:07:23  36  ,eur_g30
03:07:23  37  ,eur_g31
03:07:23  38  ,eur_g32
03:07:23  39  ,eur_g33
03:07:23  40  ,eur_g34
03:07:23  41  ,eur_g35
03:07:23  42  ,eur_g36
03:07:23  43  ,eur_g37
03:07:23  44  ,eur_g38
03:07:23  45  ,eur_g39
03:07:23  46  ,eur_g40
03:07:23  47  ,eur_g41
03:07:23  48  ,aud_g00
03:07:23  49  ,aud_g01
03:07:23  50  ,aud_g02
03:07:23  51  ,aud_g03
03:07:23  52  ,aud_g04
03:07:23  53  ,aud_g05
03:07:23  54  ,aud_g06
03:07:23  55  ,aud_g07
03:07:23  56  ,aud_g08
03:07:23  57  ,aud_g09
03:07:23  58  ,aud_g10
03:07:23  59  ,aud_g11
03:07:23  60  ,aud_g12
03:07:23  61  ,aud_g13
03:07:23  62  ,aud_g14
03:07:23  63  ,aud_g15
03:07:23  64  ,aud_g16
03:07:23  65  ,aud_g17
03:07:23  66  ,aud_g18
03:07:23  67  ,aud_g19
03:07:23  68  ,aud_g20
03:07:23  69  ,aud_g21
03:07:23  70  ,aud_g22
03:07:23  71  ,aud_g23
03:07:23  72  ,aud_g24
03:07:23  73  ,aud_g25
03:07:23  74  ,aud_g26
03:07:23  75  ,aud_g27
03:07:23  76  ,aud_g28
03:07:23  77  ,aud_g29
03:07:23  78  ,aud_g30
03:07:23  79  ,aud_g31
03:07:23  80  ,aud_g32
03:07:23  81  ,aud_g33
03:07:23  82  ,aud_g34
03:07:23  83  ,aud_g35
03:07:23  84  ,aud_g36
03:07:23  85  ,aud_g37
03:07:23  86  ,aud_g38
03:07:23  87  ,aud_g39
03:07:23  88  ,aud_g40
03:07:23  89  ,aud_g41
03:07:23  90  ,gbp_g00
03:07:23  91  ,gbp_g01
03:07:23  92  ,gbp_g02
03:07:23  93  ,gbp_g03
03:07:23  94  ,gbp_g04
03:07:23  95  ,gbp_g05
03:07:23  96  ,gbp_g06
03:07:23  97  ,gbp_g07
03:07:23  98  ,gbp_g08
03:07:23  99  ,gbp_g09
03:07:23 100  ,gbp_g10
03:07:23 101  ,gbp_g11
03:07:23 102  ,gbp_g12
03:07:23 103  ,gbp_g13
03:07:23 104  ,gbp_g14
03:07:23 105  ,gbp_g15
03:07:23 106  ,gbp_g16
03:07:23 107  ,gbp_g17
03:07:23 108  ,gbp_g18
03:07:23 109  ,gbp_g19
03:07:23 110  ,gbp_g20
03:07:23 111  ,gbp_g21
03:07:23 112  ,gbp_g22
03:07:23 113  ,gbp_g23
03:07:23 114  ,gbp_g24
03:07:23 115  ,gbp_g25
03:07:23 116  ,gbp_g26
03:07:23 117  ,gbp_g27
03:07:23 118  ,gbp_g28
03:07:23 119  ,gbp_g29
03:07:23 120  ,gbp_g30
03:07:23 121  ,gbp_g31
03:07:23 122  ,gbp_g32
03:07:23 123  ,gbp_g33
03:07:23 124  ,gbp_g34
03:07:23 125  ,gbp_g35
03:07:23 126  ,gbp_g36
03:07:23 127  ,gbp_g37
03:07:23 128  ,gbp_g38
03:07:23 129  ,gbp_g39
03:07:23 130  ,gbp_g40
03:07:23 131  ,gbp_g41
03:07:23 132  ,jpy_g00
03:07:23 133  ,jpy_g01
03:07:23 134  ,jpy_g02
03:07:23 135  ,jpy_g03
03:07:23 136  ,jpy_g04
03:07:23 137  ,jpy_g05
03:07:23 138  ,jpy_g06
03:07:23 139  ,jpy_g07
03:07:23 140  ,jpy_g08
03:07:23 141  ,jpy_g09
03:07:23 142  ,jpy_g10
03:07:23 143  ,jpy_g11
03:07:23 144  ,jpy_g12
03:07:23 145  ,jpy_g13
03:07:23 146  ,jpy_g14
03:07:23 147  ,jpy_g15
03:07:23 148  ,jpy_g16
03:07:23 149  ,jpy_g17
03:07:23 150  ,jpy_g18
03:07:23 151  ,jpy_g19
03:07:23 152  ,jpy_g20
03:07:23 153  ,jpy_g21
03:07:23 154  ,jpy_g22
03:07:23 155  ,jpy_g23
03:07:23 156  ,jpy_g24
03:07:23 157  ,jpy_g25
03:07:23 158  ,jpy_g26
03:07:23 159  ,jpy_g27
03:07:23 160  ,jpy_g28
03:07:23 161  ,jpy_g29
03:07:23 162  ,jpy_g30
03:07:23 163  ,jpy_g31
03:07:23 164  ,jpy_g32
03:07:23 165  ,jpy_g33
03:07:23 166  ,jpy_g34
03:07:23 167  ,jpy_g35
03:07:23 168  ,jpy_g36
03:07:23 169  ,jpy_g37
03:07:23 170  ,jpy_g38
03:07:23 171  ,jpy_g39
03:07:23 172  ,jpy_g40
03:07:23 173  ,jpy_g41
03:07:23 174  ,cad_g00
03:07:23 175  ,cad_g01
03:07:23 176  ,cad_g02
03:07:23 177  ,cad_g03
03:07:23 178  ,cad_g04
03:07:23 179  ,cad_g05
03:07:23 180  ,cad_g06
03:07:23 181  ,cad_g07
03:07:23 182  ,cad_g08
03:07:23 183  ,cad_g09
03:07:23 184  ,cad_g10
03:07:23 185  ,cad_g11
03:07:23 186  ,cad_g12
03:07:23 187  ,cad_g13
03:07:23 188  ,cad_g14
03:07:23 189  ,cad_g15
03:07:23 190  ,cad_g16
03:07:23 191  ,cad_g17
03:07:23 192  ,cad_g18
03:07:23 193  ,cad_g19
03:07:23 194  ,cad_g20
03:07:23 195  ,cad_g21
03:07:23 196  ,cad_g22
03:07:23 197  ,cad_g23
03:07:23 198  ,cad_g24
03:07:23 199  ,cad_g25
03:07:23 200  ,cad_g26
03:07:23 201  ,cad_g27
03:07:23 202  ,cad_g28
03:07:23 203  ,cad_g29
03:07:23 204  ,cad_g30
03:07:23 205  ,cad_g31
03:07:23 206  ,cad_g32
03:07:23 207  ,cad_g33
03:07:23 208  ,cad_g34
03:07:23 209  ,cad_g35
03:07:23 210  ,cad_g36
03:07:23 211  ,cad_g37
03:07:23 212  ,cad_g38
03:07:23 213  ,cad_g39
03:07:23 214  ,cad_g40
03:07:23 215  ,cad_g41
03:07:23 216  ,chf_g00
03:07:23 217  ,chf_g01
03:07:23 218  ,chf_g02
03:07:23 219  ,chf_g03
03:07:23 220  ,chf_g04
03:07:23 221  ,chf_g05
03:07:23 222  ,chf_g06
03:07:23 223  ,chf_g07
03:07:23 224  ,chf_g08
03:07:23 225  ,chf_g09
03:07:23 226  ,chf_g10
03:07:23 227  ,chf_g11
03:07:23 228  ,chf_g12
03:07:23 229  ,chf_g13
03:07:23 230  ,chf_g14
03:07:23 231  ,chf_g15
03:07:23 232  ,chf_g16
03:07:23 233  ,chf_g17
03:07:23 234  ,chf_g18
03:07:23 235  ,chf_g19
03:07:23 236  ,chf_g20
03:07:23 237  ,chf_g21
03:07:23 238  ,chf_g22
03:07:23 239  ,chf_g23
03:07:23 240  ,chf_g24
03:07:23 241  ,chf_g25
03:07:23 242  ,chf_g26
03:07:23 243  ,chf_g27
03:07:23 244  ,chf_g28
03:07:23 245  ,chf_g29
03:07:23 246  ,chf_g30
03:07:23 247  ,chf_g31
03:07:23 248  ,chf_g32
03:07:23 249  ,chf_g33
03:07:23 250  ,chf_g34
03:07:23 251  ,chf_g35
03:07:23 252  ,chf_g36
03:07:23 253  ,chf_g37
03:07:23 254  ,chf_g38
03:07:23 255  ,chf_g39
03:07:23 256  ,chf_g40
03:07:23 257  ,chf_g41
03:07:23 258  FROM aud_ms6 m
03:07:23 259  WHERE m.ydate = '&1'||' '||'&2'
03:07:23 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2011-01-05'||' '||'02:40:00'

View created.

Elapsed: 00:00:00.16
03:07:23 SQL> 
03:07:23 SQL> -- rpt
03:07:23 SQL> -- We should see just 1 row:
03:07:23 SQL> 
03:07:23 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.03
03:07:23 SQL> 
03:07:23 SQL> -- Build the model:
03:07:23 SQL> CREATE OR REPLACE VIEW bme AS
03:07:23   2  SELECT
03:07:23   3  'aud'||m.ydate prdate
03:07:23   4  ,gattn
03:07:23   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
03:07:23   6  ,eur_g00
03:07:23   7  ,eur_g01
03:07:23   8  ,eur_g02
03:07:23   9  ,eur_g03
03:07:23  10  ,eur_g04
03:07:23  11  ,eur_g05
03:07:23  12  ,eur_g06
03:07:23  13  ,eur_g07
03:07:23  14  ,eur_g08
03:07:23  15  ,eur_g09
03:07:23  16  ,eur_g10
03:07:23  17  ,eur_g11
03:07:23  18  ,eur_g12
03:07:23  19  ,eur_g13
03:07:23  20  ,eur_g14
03:07:23  21  ,eur_g15
03:07:23  22  ,eur_g16
03:07:23  23  ,eur_g17
03:07:23  24  ,eur_g18
03:07:23  25  ,eur_g19
03:07:23  26  ,eur_g20
03:07:23  27  ,eur_g21
03:07:23  28  ,eur_g22
03:07:23  29  ,eur_g23
03:07:23  30  ,eur_g24
03:07:23  31  ,eur_g25
03:07:23  32  ,eur_g26
03:07:23  33  ,eur_g27
03:07:23  34  ,eur_g28
03:07:23  35  ,eur_g29
03:07:23  36  ,eur_g30
03:07:23  37  ,eur_g31
03:07:23  38  ,eur_g32
03:07:23  39  ,eur_g33
03:07:23  40  ,eur_g34
03:07:23  41  ,eur_g35
03:07:23  42  ,eur_g36
03:07:23  43  ,eur_g37
03:07:23  44  ,eur_g38
03:07:23  45  ,eur_g39
03:07:23  46  ,eur_g40
03:07:23  47  ,eur_g41
03:07:23  48  ,aud_g00
03:07:23  49  ,aud_g01
03:07:23  50  ,aud_g02
03:07:23  51  ,aud_g03
03:07:23  52  ,aud_g04
03:07:23  53  ,aud_g05
03:07:23  54  ,aud_g06
03:07:23  55  ,aud_g07
03:07:23  56  ,aud_g08
03:07:23  57  ,aud_g09
03:07:23  58  ,aud_g10
03:07:23  59  ,aud_g11
03:07:23  60  ,aud_g12
03:07:23  61  ,aud_g13
03:07:23  62  ,aud_g14
03:07:23  63  ,aud_g15
03:07:23  64  ,aud_g16
03:07:23  65  ,aud_g17
03:07:23  66  ,aud_g18
03:07:23  67  ,aud_g19
03:07:23  68  ,aud_g20
03:07:23  69  ,aud_g21
03:07:23  70  ,aud_g22
03:07:23  71  ,aud_g23
03:07:23  72  ,aud_g24
03:07:23  73  ,aud_g25
03:07:23  74  ,aud_g26
03:07:23  75  ,aud_g27
03:07:23  76  ,aud_g28
03:07:23  77  ,aud_g29
03:07:23  78  ,aud_g30
03:07:23  79  ,aud_g31
03:07:23  80  ,aud_g32
03:07:23  81  ,aud_g33
03:07:23  82  ,aud_g34
03:07:23  83  ,aud_g35
03:07:23  84  ,aud_g36
03:07:23  85  ,aud_g37
03:07:23  86  ,aud_g38
03:07:23  87  ,aud_g39
03:07:23  88  ,aud_g40
03:07:23  89  ,aud_g41
03:07:23  90  ,gbp_g00
03:07:23  91  ,gbp_g01
03:07:23  92  ,gbp_g02
03:07:23  93  ,gbp_g03
03:07:23  94  ,gbp_g04
03:07:23  95  ,gbp_g05
03:07:23  96  ,gbp_g06
03:07:23  97  ,gbp_g07
03:07:23  98  ,gbp_g08
03:07:23  99  ,gbp_g09
03:07:23 100  ,gbp_g10
03:07:23 101  ,gbp_g11
03:07:23 102  ,gbp_g12
03:07:23 103  ,gbp_g13
03:07:23 104  ,gbp_g14
03:07:23 105  ,gbp_g15
03:07:23 106  ,gbp_g16
03:07:23 107  ,gbp_g17
03:07:23 108  ,gbp_g18
03:07:23 109  ,gbp_g19
03:07:23 110  ,gbp_g20
03:07:23 111  ,gbp_g21
03:07:23 112  ,gbp_g22
03:07:23 113  ,gbp_g23
03:07:23 114  ,gbp_g24
03:07:23 115  ,gbp_g25
03:07:23 116  ,gbp_g26
03:07:23 117  ,gbp_g27
03:07:23 118  ,gbp_g28
03:07:23 119  ,gbp_g29
03:07:23 120  ,gbp_g30
03:07:23 121  ,gbp_g31
03:07:23 122  ,gbp_g32
03:07:23 123  ,gbp_g33
03:07:23 124  ,gbp_g34
03:07:23 125  ,gbp_g35
03:07:23 126  ,gbp_g36
03:07:23 127  ,gbp_g37
03:07:23 128  ,gbp_g38
03:07:23 129  ,gbp_g39
03:07:23 130  ,gbp_g40
03:07:23 131  ,gbp_g41
03:07:23 132  ,jpy_g00
03:07:23 133  ,jpy_g01
03:07:23 134  ,jpy_g02
03:07:23 135  ,jpy_g03
03:07:23 136  ,jpy_g04
03:07:23 137  ,jpy_g05
03:07:23 138  ,jpy_g06
03:07:23 139  ,jpy_g07
03:07:23 140  ,jpy_g08
03:07:23 141  ,jpy_g09
03:07:23 142  ,jpy_g10
03:07:23 143  ,jpy_g11
03:07:23 144  ,jpy_g12
03:07:23 145  ,jpy_g13
03:07:23 146  ,jpy_g14
03:07:23 147  ,jpy_g15
03:07:23 148  ,jpy_g16
03:07:23 149  ,jpy_g17
03:07:23 150  ,jpy_g18
03:07:23 151  ,jpy_g19
03:07:23 152  ,jpy_g20
03:07:23 153  ,jpy_g21
03:07:23 154  ,jpy_g22
03:07:23 155  ,jpy_g23
03:07:23 156  ,jpy_g24
03:07:23 157  ,jpy_g25
03:07:23 158  ,jpy_g26
03:07:23 159  ,jpy_g27
03:07:23 160  ,jpy_g28
03:07:23 161  ,jpy_g29
03:07:23 162  ,jpy_g30
03:07:23 163  ,jpy_g31
03:07:23 164  ,jpy_g32
03:07:23 165  ,jpy_g33
03:07:23 166  ,jpy_g34
03:07:23 167  ,jpy_g35
03:07:23 168  ,jpy_g36
03:07:23 169  ,jpy_g37
03:07:23 170  ,jpy_g38
03:07:23 171  ,jpy_g39
03:07:23 172  ,jpy_g40
03:07:23 173  ,jpy_g41
03:07:23 174  ,cad_g00
03:07:23 175  ,cad_g01
03:07:23 176  ,cad_g02
03:07:23 177  ,cad_g03
03:07:23 178  ,cad_g04
03:07:23 179  ,cad_g05
03:07:23 180  ,cad_g06
03:07:23 181  ,cad_g07
03:07:23 182  ,cad_g08
03:07:23 183  ,cad_g09
03:07:23 184  ,cad_g10
03:07:23 185  ,cad_g11
03:07:23 186  ,cad_g12
03:07:23 187  ,cad_g13
03:07:23 188  ,cad_g14
03:07:23 189  ,cad_g15
03:07:23 190  ,cad_g16
03:07:23 191  ,cad_g17
03:07:23 192  ,cad_g18
03:07:23 193  ,cad_g19
03:07:23 194  ,cad_g20
03:07:23 195  ,cad_g21
03:07:23 196  ,cad_g22
03:07:23 197  ,cad_g23
03:07:23 198  ,cad_g24
03:07:23 199  ,cad_g25
03:07:23 200  ,cad_g26
03:07:23 201  ,cad_g27
03:07:23 202  ,cad_g28
03:07:23 203  ,cad_g29
03:07:23 204  ,cad_g30
03:07:23 205  ,cad_g31
03:07:23 206  ,cad_g32
03:07:23 207  ,cad_g33
03:07:23 208  ,cad_g34
03:07:23 209  ,cad_g35
03:07:23 210  ,cad_g36
03:07:23 211  ,cad_g37
03:07:23 212  ,cad_g38
03:07:23 213  ,cad_g39
03:07:23 214  ,cad_g40
03:07:23 215  ,cad_g41
03:07:23 216  ,chf_g00
03:07:23 217  ,chf_g01
03:07:23 218  ,chf_g02
03:07:23 219  ,chf_g03
03:07:23 220  ,chf_g04
03:07:23 221  ,chf_g05
03:07:23 222  ,chf_g06
03:07:23 223  ,chf_g07
03:07:23 224  ,chf_g08
03:07:23 225  ,chf_g09
03:07:23 226  ,chf_g10
03:07:23 227  ,chf_g11
03:07:23 228  ,chf_g12
03:07:23 229  ,chf_g13
03:07:23 230  ,chf_g14
03:07:23 231  ,chf_g15
03:07:23 232  ,chf_g16
03:07:23 233  ,chf_g17
03:07:23 234  ,chf_g18
03:07:23 235  ,chf_g19
03:07:23 236  ,chf_g20
03:07:23 237  ,chf_g21
03:07:23 238  ,chf_g22
03:07:23 239  ,chf_g23
03:07:23 240  ,chf_g24
03:07:23 241  ,chf_g25
03:07:23 242  ,chf_g26
03:07:23 243  ,chf_g27
03:07:23 244  ,chf_g28
03:07:23 245  ,chf_g29
03:07:23 246  ,chf_g30
03:07:23 247  ,chf_g31
03:07:23 248  ,chf_g32
03:07:23 249  ,chf_g33
03:07:23 250  ,chf_g34
03:07:23 251  ,chf_g35
03:07:23 252  ,chf_g36
03:07:23 253  ,chf_g37
03:07:23 254  ,chf_g38
03:07:23 255  ,chf_g39
03:07:23 256  ,chf_g40
03:07:23 257  ,chf_g41
03:07:23 258  FROM aud_ms6 m
03:07:23 259  WHERE gattn IN('nup','up')
03:07:23 260  AND 1+m.ydate < '&1'||' '||'&2'
03:07:23 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2011-01-05'||' '||'02:40:00'

View created.

Elapsed: 00:00:00.12
03:07:24 SQL> 
03:07:24 SQL> -- rpt
03:07:24 SQL> 
03:07:24 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	    12651
up	     6361

Elapsed: 00:00:00.04
03:07:24 SQL> 
03:07:24 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
aud2011-01-04 02:35:00

Elapsed: 00:00:00.03
03:07:24 SQL> 
03:07:24 SQL> -- Now build model from bme and score sme
03:07:24 SQL> @score1gattn.sql
03:07:24 SQL> -- score1gattn.sql
03:07:24 SQL> 
03:07:24 SQL> -- Does the 1st SVM score
03:07:24 SQL> 
03:07:24 SQL> -- Fill up svmc_apply_prep
03:07:24 SQL> @score_gattn.sql
03:07:24 SQL> --
03:07:24 SQL> -- score_gattn.sql
03:07:24 SQL> --
03:07:24 SQL> 
03:07:24 SQL> -- usage: score_gattn.sql
03:07:24 SQL> 
03:07:24 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
03:07:24 SQL> 
03:07:24 SQL> DEFINE target	= 'gattn'
03:07:24 SQL> DEFINE model_name = 'forex15'
03:07:24 SQL> DEFINE bldtable	= 'bme'
03:07:24 SQL> DEFINE scoretable = 'sme'
03:07:24 SQL> DEFINE case_id	= 'prdate'
03:07:24 SQL> 
03:07:24 SQL> -- Define a variable to help me exclude some columns from some data mining calls
03:07:24 SQL> DEFINE exclude1 = "'&target','&case_id'"
03:07:24 SQL> 
03:07:24 SQL> -- Builds an SVM model using pl/sql.
03:07:24 SQL> 
03:07:24 SQL> -----------------------------------------------------------------------
03:07:24 SQL> --			    BUILD THE MODEL
03:07:24 SQL> -----------------------------------------------------------------------
03:07:24 SQL> 
03:07:24 SQL> -- Cleanup old build data preparation objects for repeat runs
03:07:24 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.00
03:07:24 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
03:07:24 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.01
03:07:24 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.00
03:07:24 SQL> 
03:07:24 SQL> 
03:07:24 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
03:07:24 SQL> --
03:07:24 SQL> -- DROP	TABLE svmc_settings ;
03:07:24 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
03:07:24 SQL> -- DELETE svmc_settings;
03:07:24 SQL> 
03:07:24 SQL> -- The default classification algorithm is Naive Bayes. So override
03:07:24 SQL> -- this choice to SVM using a settings table.
03:07:24 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
03:07:24 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
03:07:24 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
03:07:24 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
03:07:24 SQL> -- models.
03:07:24 SQL> --
03:07:24 SQL> 
03:07:24 SQL> -- Do this once and then comment it out.
03:07:24 SQL> -- That makes script go faster.
03:07:24 SQL> -- BEGIN
03:07:24 SQL> -- -- Populate settings table
03:07:24 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
03:07:24 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
03:07:24 SQL> --
03:07:24 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
03:07:24 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
03:07:24 SQL> --
03:07:24 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
03:07:24 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
03:07:24 SQL> --   COMMIT;
03:07:24 SQL> -- END;
03:07:24 SQL> -- /
03:07:24 SQL> 
03:07:24 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
03:07:24 SQL> 
03:07:24 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
03:07:24   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:07:24   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
03:07:24 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
03:07:24   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:07:24   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
03:07:24 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
03:07:24   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:07:24   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
03:07:24 SQL> 
03:07:24 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
03:07:24   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:07:24   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
03:07:24 SQL> 
03:07:24 SQL> --------------------------------
03:07:24 SQL> -- PREPARE BUILD (TRAINING) DATA
03:07:24 SQL> --
03:07:24 SQL> 
03:07:24 SQL> -- 1. Missing Value treatment for all Predictors and
03:07:24 SQL> -- 2. Outlier Treatment and
03:07:24 SQL> -- 3. Normalization are performed below.
03:07:24 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
03:07:24 SQL> --    normalized here.
03:07:24 SQL> 
03:07:24 SQL> BEGIN
03:07:24   2  	-- Perform missing value treatment for all predictors
03:07:24   3  	-- create miss tables
03:07:24   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
03:07:24   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
03:07:24   6  
03:07:24   7  	-- populate miss tables
03:07:24   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
03:07:24   9  	  miss_table_name => 'svmc_miss_num',
03:07:24  10  	  data_table_name => '&bldtable',
03:07:24  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:07:24  12  
03:07:24  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
03:07:24  14  	  miss_table_name => 'svmc_miss_cat',
03:07:24  15  	  data_table_name => '&bldtable',
03:07:24  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:07:24  17  
03:07:24  18  	-- xform input data to replace missing values
03:07:24  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
03:07:24  20  	  miss_table_name => 'svmc_miss_num',
03:07:24  21  	  data_table_name => '&bldtable',
03:07:24  22  	  xform_view_name => 'xformed_build_miss_num');
03:07:24  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
03:07:24  24  	  miss_table_name => 'svmc_miss_cat',
03:07:24  25  	  data_table_name => '&bldtable',
03:07:24  26  	  xform_view_name => 'xformed_build_miss_cat');
03:07:24  27  
03:07:24  28  	-- Perform outlier treatment.
03:07:24  29  	-- create clip table
03:07:24  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
03:07:24  31  
03:07:24  32  	-- populate clip table
03:07:24  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
03:07:24  34  	  clip_table_name => 'svmc_clip',
03:07:24  35  	  data_table_name => '&bldtable',
03:07:24  36  	  tail_frac	  => 0.025,
03:07:24  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:07:24  38  
03:07:24  39  	-- xform input data to winsorized data
03:07:24  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
03:07:24  41  	  clip_table_name => 'svmc_clip',
03:07:24  42  	  data_table_name => '&bldtable',
03:07:24  43  	  xform_view_name => 'svmc_winsor');
03:07:24  44  
03:07:24  45  	-- create normalization table
03:07:24  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
03:07:24  47  
03:07:24  48  	-- populate normalization table based on winsorized data
03:07:24  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
03:07:24  50  	  norm_table_name => 'svmc_norm',
03:07:24  51  	  data_table_name => 'svmc_winsor',
03:07:24  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:07:24  53  
03:07:24  54  	-- normalize the original data
03:07:24  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
03:07:24  56  	  norm_table_name => 'svmc_norm',
03:07:24  57  	  data_table_name => '&bldtable',
03:07:24  58  	  xform_view_name => 'svmc_build_prep');
03:07:24  59  END;
03:07:24  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:18.50
03:07:42 SQL> 
03:07:42 SQL> ---------------------
03:07:42 SQL> -- CREATE A NEW MODEL
03:07:42 SQL> --
03:07:42 SQL> -- Cleanup old model with the same name for repeat runs
03:07:42 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
03:07:42   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:07:42   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex15');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.96
03:07:43 SQL> 
03:07:43 SQL> -- Build a new SVM Model
03:07:43 SQL> BEGIN
03:07:43   2  	DBMS_DATA_MINING.CREATE_MODEL(
03:07:43   3  	  model_name	      => '&model_name',
03:07:43   4  	  mining_function     => dbms_data_mining.classification,
03:07:43   5  	  data_table_name     => 'svmc_build_prep',
03:07:43   6  	  case_id_column_name => '&case_id',
03:07:43   7  	  target_column_name  => '&target',
03:07:43   8  	  settings_table_name => 'svmc_settings');
03:07:43   9  END;
03:07:43  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex15',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:28.71
03:08:12 SQL> 
03:08:12 SQL> -----------------------------------------------------------------------
03:08:12 SQL> --			       APPLY/score THE MODEL
03:08:12 SQL> -----------------------------------------------------------------------
03:08:12 SQL> 
03:08:12 SQL> -- Cleanup old scoring data preparation objects for repeat runs
03:08:12 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
03:08:12   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:08:12   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
03:08:12 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
03:08:12   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:08:12   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
03:08:12 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
03:08:12   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:08:12   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
03:08:12 SQL> -----------------------
03:08:12 SQL> -- PREPARE SCORING DATA
03:08:12 SQL> --
03:08:12 SQL> -- If the data for model creation has been prepared, then the data
03:08:12 SQL> -- to be scored using the model must be prepared in the same manner
03:08:12 SQL> -- in order to obtain meaningful results.
03:08:12 SQL> --
03:08:12 SQL> -- 1. Missing Value treatment for all Predictors and
03:08:12 SQL> -- 2. Normalization
03:08:12 SQL> -- No outlier treatment will be performed during test and apply. The
03:08:12 SQL> -- normalization step is sufficient, since the normalization parameters
03:08:12 SQL> -- already capture the effects of outlier treatment done with build data.
03:08:12 SQL> --
03:08:12 SQL> BEGIN
03:08:12   2  	-- Xform Test data to replace missing values
03:08:12   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
03:08:12   4  	  miss_table_name => 'svmc_miss_num',
03:08:12   5  	  data_table_name => '&scoretable',
03:08:12   6  	  xform_view_name => 'xformed_apply_miss_num');
03:08:12   7  
03:08:12   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
03:08:12   9  	  miss_table_name => 'svmc_miss_cat',
03:08:12  10  	  data_table_name => '&scoretable',
03:08:12  11  	  xform_view_name => 'xformed_apply_miss_cat');
03:08:12  12  
03:08:12  13  	-- Normalize the data to be scored
03:08:12  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
03:08:12  15  	  norm_table_name => 'svmc_norm',
03:08:12  16  	  data_table_name => '&scoretable',
03:08:12  17  	  xform_view_name => 'svmc_apply_prep');
03:08:12  18  END;
03:08:12  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.26
03:08:14 SQL> 
03:08:14 SQL> -- Use same model_name used in score_gattn.sql
03:08:14 SQL> DEFINE model_name = 'forex15'
03:08:14 SQL> 
03:08:14 SQL> DELETE fxscores6_gattn WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.04
03:08:14 SQL> 
03:08:14 SQL> INSERT INTO fxscores6_gattn (prdate,score,rundate,pair,ydate)
03:08:14   2  SELECT
03:08:14   3  prdate
03:08:14   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
03:08:14   5  ,sysdate
03:08:14   6  ,SUBSTR(prdate,1,3)pair
03:08:14   7  ,SUBSTR(prdate,4,19)ydate
03:08:14   8  FROM svmc_apply_prep
03:08:14   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex15,'up' USING *)score

1 row created.

Elapsed: 00:00:00.18
03:08:14 SQL> @aud_score1day_gattn.sql	2011-01-05 02:45:00
03:08:14 SQL> --
03:08:14 SQL> -- aud_score1day_gattn.sql
03:08:14 SQL> --
03:08:14 SQL> 
03:08:14 SQL> CREATE OR REPLACE VIEW sme AS
03:08:14   2  SELECT
03:08:14   3  'aud'||m.ydate prdate
03:08:14   4  ,NULL gattn
03:08:14   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
03:08:14   6  ,eur_g00
03:08:14   7  ,eur_g01
03:08:14   8  ,eur_g02
03:08:14   9  ,eur_g03
03:08:14  10  ,eur_g04
03:08:14  11  ,eur_g05
03:08:14  12  ,eur_g06
03:08:14  13  ,eur_g07
03:08:14  14  ,eur_g08
03:08:14  15  ,eur_g09
03:08:14  16  ,eur_g10
03:08:14  17  ,eur_g11
03:08:14  18  ,eur_g12
03:08:14  19  ,eur_g13
03:08:14  20  ,eur_g14
03:08:14  21  ,eur_g15
03:08:14  22  ,eur_g16
03:08:14  23  ,eur_g17
03:08:14  24  ,eur_g18
03:08:14  25  ,eur_g19
03:08:14  26  ,eur_g20
03:08:14  27  ,eur_g21
03:08:14  28  ,eur_g22
03:08:14  29  ,eur_g23
03:08:14  30  ,eur_g24
03:08:14  31  ,eur_g25
03:08:14  32  ,eur_g26
03:08:14  33  ,eur_g27
03:08:14  34  ,eur_g28
03:08:14  35  ,eur_g29
03:08:14  36  ,eur_g30
03:08:14  37  ,eur_g31
03:08:14  38  ,eur_g32
03:08:14  39  ,eur_g33
03:08:14  40  ,eur_g34
03:08:14  41  ,eur_g35
03:08:14  42  ,eur_g36
03:08:14  43  ,eur_g37
03:08:14  44  ,eur_g38
03:08:14  45  ,eur_g39
03:08:14  46  ,eur_g40
03:08:14  47  ,eur_g41
03:08:14  48  ,aud_g00
03:08:14  49  ,aud_g01
03:08:14  50  ,aud_g02
03:08:14  51  ,aud_g03
03:08:14  52  ,aud_g04
03:08:14  53  ,aud_g05
03:08:14  54  ,aud_g06
03:08:14  55  ,aud_g07
03:08:14  56  ,aud_g08
03:08:14  57  ,aud_g09
03:08:14  58  ,aud_g10
03:08:14  59  ,aud_g11
03:08:14  60  ,aud_g12
03:08:14  61  ,aud_g13
03:08:14  62  ,aud_g14
03:08:14  63  ,aud_g15
03:08:14  64  ,aud_g16
03:08:14  65  ,aud_g17
03:08:14  66  ,aud_g18
03:08:14  67  ,aud_g19
03:08:14  68  ,aud_g20
03:08:14  69  ,aud_g21
03:08:14  70  ,aud_g22
03:08:14  71  ,aud_g23
03:08:14  72  ,aud_g24
03:08:14  73  ,aud_g25
03:08:14  74  ,aud_g26
03:08:14  75  ,aud_g27
03:08:14  76  ,aud_g28
03:08:14  77  ,aud_g29
03:08:14  78  ,aud_g30
03:08:14  79  ,aud_g31
03:08:14  80  ,aud_g32
03:08:14  81  ,aud_g33
03:08:14  82  ,aud_g34
03:08:14  83  ,aud_g35
03:08:14  84  ,aud_g36
03:08:14  85  ,aud_g37
03:08:14  86  ,aud_g38
03:08:14  87  ,aud_g39
03:08:14  88  ,aud_g40
03:08:14  89  ,aud_g41
03:08:14  90  ,gbp_g00
03:08:14  91  ,gbp_g01
03:08:14  92  ,gbp_g02
03:08:14  93  ,gbp_g03
03:08:14  94  ,gbp_g04
03:08:14  95  ,gbp_g05
03:08:14  96  ,gbp_g06
03:08:14  97  ,gbp_g07
03:08:14  98  ,gbp_g08
03:08:14  99  ,gbp_g09
03:08:14 100  ,gbp_g10
03:08:14 101  ,gbp_g11
03:08:14 102  ,gbp_g12
03:08:14 103  ,gbp_g13
03:08:14 104  ,gbp_g14
03:08:14 105  ,gbp_g15
03:08:14 106  ,gbp_g16
03:08:14 107  ,gbp_g17
03:08:14 108  ,gbp_g18
03:08:14 109  ,gbp_g19
03:08:14 110  ,gbp_g20
03:08:14 111  ,gbp_g21
03:08:14 112  ,gbp_g22
03:08:14 113  ,gbp_g23
03:08:14 114  ,gbp_g24
03:08:14 115  ,gbp_g25
03:08:14 116  ,gbp_g26
03:08:14 117  ,gbp_g27
03:08:14 118  ,gbp_g28
03:08:14 119  ,gbp_g29
03:08:14 120  ,gbp_g30
03:08:14 121  ,gbp_g31
03:08:14 122  ,gbp_g32
03:08:14 123  ,gbp_g33
03:08:14 124  ,gbp_g34
03:08:14 125  ,gbp_g35
03:08:14 126  ,gbp_g36
03:08:14 127  ,gbp_g37
03:08:14 128  ,gbp_g38
03:08:14 129  ,gbp_g39
03:08:14 130  ,gbp_g40
03:08:14 131  ,gbp_g41
03:08:14 132  ,jpy_g00
03:08:14 133  ,jpy_g01
03:08:14 134  ,jpy_g02
03:08:14 135  ,jpy_g03
03:08:14 136  ,jpy_g04
03:08:14 137  ,jpy_g05
03:08:14 138  ,jpy_g06
03:08:14 139  ,jpy_g07
03:08:14 140  ,jpy_g08
03:08:14 141  ,jpy_g09
03:08:14 142  ,jpy_g10
03:08:14 143  ,jpy_g11
03:08:14 144  ,jpy_g12
03:08:14 145  ,jpy_g13
03:08:14 146  ,jpy_g14
03:08:14 147  ,jpy_g15
03:08:14 148  ,jpy_g16
03:08:14 149  ,jpy_g17
03:08:14 150  ,jpy_g18
03:08:14 151  ,jpy_g19
03:08:14 152  ,jpy_g20
03:08:14 153  ,jpy_g21
03:08:14 154  ,jpy_g22
03:08:14 155  ,jpy_g23
03:08:14 156  ,jpy_g24
03:08:14 157  ,jpy_g25
03:08:14 158  ,jpy_g26
03:08:14 159  ,jpy_g27
03:08:14 160  ,jpy_g28
03:08:14 161  ,jpy_g29
03:08:14 162  ,jpy_g30
03:08:14 163  ,jpy_g31
03:08:14 164  ,jpy_g32
03:08:14 165  ,jpy_g33
03:08:14 166  ,jpy_g34
03:08:14 167  ,jpy_g35
03:08:14 168  ,jpy_g36
03:08:14 169  ,jpy_g37
03:08:14 170  ,jpy_g38
03:08:14 171  ,jpy_g39
03:08:14 172  ,jpy_g40
03:08:14 173  ,jpy_g41
03:08:14 174  ,cad_g00
03:08:14 175  ,cad_g01
03:08:14 176  ,cad_g02
03:08:14 177  ,cad_g03
03:08:14 178  ,cad_g04
03:08:14 179  ,cad_g05
03:08:14 180  ,cad_g06
03:08:14 181  ,cad_g07
03:08:14 182  ,cad_g08
03:08:14 183  ,cad_g09
03:08:14 184  ,cad_g10
03:08:14 185  ,cad_g11
03:08:14 186  ,cad_g12
03:08:14 187  ,cad_g13
03:08:14 188  ,cad_g14
03:08:14 189  ,cad_g15
03:08:14 190  ,cad_g16
03:08:14 191  ,cad_g17
03:08:14 192  ,cad_g18
03:08:14 193  ,cad_g19
03:08:14 194  ,cad_g20
03:08:14 195  ,cad_g21
03:08:14 196  ,cad_g22
03:08:14 197  ,cad_g23
03:08:14 198  ,cad_g24
03:08:14 199  ,cad_g25
03:08:14 200  ,cad_g26
03:08:14 201  ,cad_g27
03:08:14 202  ,cad_g28
03:08:14 203  ,cad_g29
03:08:14 204  ,cad_g30
03:08:14 205  ,cad_g31
03:08:14 206  ,cad_g32
03:08:14 207  ,cad_g33
03:08:14 208  ,cad_g34
03:08:14 209  ,cad_g35
03:08:14 210  ,cad_g36
03:08:14 211  ,cad_g37
03:08:14 212  ,cad_g38
03:08:14 213  ,cad_g39
03:08:14 214  ,cad_g40
03:08:14 215  ,cad_g41
03:08:14 216  ,chf_g00
03:08:14 217  ,chf_g01
03:08:14 218  ,chf_g02
03:08:14 219  ,chf_g03
03:08:14 220  ,chf_g04
03:08:14 221  ,chf_g05
03:08:14 222  ,chf_g06
03:08:14 223  ,chf_g07
03:08:14 224  ,chf_g08
03:08:14 225  ,chf_g09
03:08:14 226  ,chf_g10
03:08:14 227  ,chf_g11
03:08:14 228  ,chf_g12
03:08:14 229  ,chf_g13
03:08:14 230  ,chf_g14
03:08:14 231  ,chf_g15
03:08:14 232  ,chf_g16
03:08:14 233  ,chf_g17
03:08:14 234  ,chf_g18
03:08:14 235  ,chf_g19
03:08:14 236  ,chf_g20
03:08:14 237  ,chf_g21
03:08:14 238  ,chf_g22
03:08:14 239  ,chf_g23
03:08:14 240  ,chf_g24
03:08:14 241  ,chf_g25
03:08:14 242  ,chf_g26
03:08:14 243  ,chf_g27
03:08:14 244  ,chf_g28
03:08:14 245  ,chf_g29
03:08:14 246  ,chf_g30
03:08:14 247  ,chf_g31
03:08:14 248  ,chf_g32
03:08:14 249  ,chf_g33
03:08:14 250  ,chf_g34
03:08:14 251  ,chf_g35
03:08:14 252  ,chf_g36
03:08:14 253  ,chf_g37
03:08:14 254  ,chf_g38
03:08:14 255  ,chf_g39
03:08:14 256  ,chf_g40
03:08:14 257  ,chf_g41
03:08:14 258  FROM aud_ms6 m
03:08:14 259  WHERE m.ydate = '&1'||' '||'&2'
03:08:14 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2011-01-05'||' '||'02:45:00'

View created.

Elapsed: 00:00:00.13
03:08:14 SQL> 
03:08:14 SQL> -- rpt
03:08:14 SQL> -- We should see just 1 row:
03:08:14 SQL> 
03:08:14 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
03:08:14 SQL> 
03:08:14 SQL> -- Build the model:
03:08:14 SQL> CREATE OR REPLACE VIEW bme AS
03:08:14   2  SELECT
03:08:14   3  'aud'||m.ydate prdate
03:08:14   4  ,gattn
03:08:14   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
03:08:14   6  ,eur_g00
03:08:14   7  ,eur_g01
03:08:14   8  ,eur_g02
03:08:14   9  ,eur_g03
03:08:14  10  ,eur_g04
03:08:14  11  ,eur_g05
03:08:14  12  ,eur_g06
03:08:14  13  ,eur_g07
03:08:14  14  ,eur_g08
03:08:14  15  ,eur_g09
03:08:14  16  ,eur_g10
03:08:14  17  ,eur_g11
03:08:14  18  ,eur_g12
03:08:14  19  ,eur_g13
03:08:14  20  ,eur_g14
03:08:14  21  ,eur_g15
03:08:14  22  ,eur_g16
03:08:14  23  ,eur_g17
03:08:14  24  ,eur_g18
03:08:14  25  ,eur_g19
03:08:14  26  ,eur_g20
03:08:14  27  ,eur_g21
03:08:14  28  ,eur_g22
03:08:14  29  ,eur_g23
03:08:14  30  ,eur_g24
03:08:14  31  ,eur_g25
03:08:14  32  ,eur_g26
03:08:14  33  ,eur_g27
03:08:14  34  ,eur_g28
03:08:14  35  ,eur_g29
03:08:14  36  ,eur_g30
03:08:14  37  ,eur_g31
03:08:14  38  ,eur_g32
03:08:14  39  ,eur_g33
03:08:14  40  ,eur_g34
03:08:14  41  ,eur_g35
03:08:14  42  ,eur_g36
03:08:14  43  ,eur_g37
03:08:14  44  ,eur_g38
03:08:14  45  ,eur_g39
03:08:14  46  ,eur_g40
03:08:14  47  ,eur_g41
03:08:14  48  ,aud_g00
03:08:14  49  ,aud_g01
03:08:14  50  ,aud_g02
03:08:14  51  ,aud_g03
03:08:14  52  ,aud_g04
03:08:14  53  ,aud_g05
03:08:14  54  ,aud_g06
03:08:14  55  ,aud_g07
03:08:14  56  ,aud_g08
03:08:14  57  ,aud_g09
03:08:14  58  ,aud_g10
03:08:14  59  ,aud_g11
03:08:14  60  ,aud_g12
03:08:14  61  ,aud_g13
03:08:14  62  ,aud_g14
03:08:14  63  ,aud_g15
03:08:14  64  ,aud_g16
03:08:14  65  ,aud_g17
03:08:14  66  ,aud_g18
03:08:14  67  ,aud_g19
03:08:14  68  ,aud_g20
03:08:14  69  ,aud_g21
03:08:14  70  ,aud_g22
03:08:14  71  ,aud_g23
03:08:14  72  ,aud_g24
03:08:14  73  ,aud_g25
03:08:14  74  ,aud_g26
03:08:14  75  ,aud_g27
03:08:14  76  ,aud_g28
03:08:14  77  ,aud_g29
03:08:14  78  ,aud_g30
03:08:14  79  ,aud_g31
03:08:14  80  ,aud_g32
03:08:14  81  ,aud_g33
03:08:14  82  ,aud_g34
03:08:14  83  ,aud_g35
03:08:14  84  ,aud_g36
03:08:14  85  ,aud_g37
03:08:14  86  ,aud_g38
03:08:14  87  ,aud_g39
03:08:14  88  ,aud_g40
03:08:14  89  ,aud_g41
03:08:14  90  ,gbp_g00
03:08:14  91  ,gbp_g01
03:08:14  92  ,gbp_g02
03:08:14  93  ,gbp_g03
03:08:14  94  ,gbp_g04
03:08:14  95  ,gbp_g05
03:08:14  96  ,gbp_g06
03:08:14  97  ,gbp_g07
03:08:14  98  ,gbp_g08
03:08:14  99  ,gbp_g09
03:08:14 100  ,gbp_g10
03:08:14 101  ,gbp_g11
03:08:14 102  ,gbp_g12
03:08:14 103  ,gbp_g13
03:08:14 104  ,gbp_g14
03:08:14 105  ,gbp_g15
03:08:14 106  ,gbp_g16
03:08:14 107  ,gbp_g17
03:08:14 108  ,gbp_g18
03:08:14 109  ,gbp_g19
03:08:14 110  ,gbp_g20
03:08:14 111  ,gbp_g21
03:08:14 112  ,gbp_g22
03:08:14 113  ,gbp_g23
03:08:14 114  ,gbp_g24
03:08:14 115  ,gbp_g25
03:08:14 116  ,gbp_g26
03:08:14 117  ,gbp_g27
03:08:14 118  ,gbp_g28
03:08:14 119  ,gbp_g29
03:08:14 120  ,gbp_g30
03:08:14 121  ,gbp_g31
03:08:14 122  ,gbp_g32
03:08:14 123  ,gbp_g33
03:08:14 124  ,gbp_g34
03:08:14 125  ,gbp_g35
03:08:14 126  ,gbp_g36
03:08:14 127  ,gbp_g37
03:08:14 128  ,gbp_g38
03:08:14 129  ,gbp_g39
03:08:14 130  ,gbp_g40
03:08:14 131  ,gbp_g41
03:08:14 132  ,jpy_g00
03:08:14 133  ,jpy_g01
03:08:14 134  ,jpy_g02
03:08:14 135  ,jpy_g03
03:08:14 136  ,jpy_g04
03:08:14 137  ,jpy_g05
03:08:14 138  ,jpy_g06
03:08:14 139  ,jpy_g07
03:08:14 140  ,jpy_g08
03:08:14 141  ,jpy_g09
03:08:14 142  ,jpy_g10
03:08:14 143  ,jpy_g11
03:08:14 144  ,jpy_g12
03:08:14 145  ,jpy_g13
03:08:14 146  ,jpy_g14
03:08:14 147  ,jpy_g15
03:08:14 148  ,jpy_g16
03:08:14 149  ,jpy_g17
03:08:14 150  ,jpy_g18
03:08:14 151  ,jpy_g19
03:08:14 152  ,jpy_g20
03:08:14 153  ,jpy_g21
03:08:14 154  ,jpy_g22
03:08:14 155  ,jpy_g23
03:08:14 156  ,jpy_g24
03:08:14 157  ,jpy_g25
03:08:14 158  ,jpy_g26
03:08:14 159  ,jpy_g27
03:08:14 160  ,jpy_g28
03:08:14 161  ,jpy_g29
03:08:14 162  ,jpy_g30
03:08:14 163  ,jpy_g31
03:08:14 164  ,jpy_g32
03:08:14 165  ,jpy_g33
03:08:14 166  ,jpy_g34
03:08:14 167  ,jpy_g35
03:08:14 168  ,jpy_g36
03:08:14 169  ,jpy_g37
03:08:14 170  ,jpy_g38
03:08:14 171  ,jpy_g39
03:08:14 172  ,jpy_g40
03:08:14 173  ,jpy_g41
03:08:14 174  ,cad_g00
03:08:14 175  ,cad_g01
03:08:14 176  ,cad_g02
03:08:14 177  ,cad_g03
03:08:14 178  ,cad_g04
03:08:14 179  ,cad_g05
03:08:14 180  ,cad_g06
03:08:14 181  ,cad_g07
03:08:14 182  ,cad_g08
03:08:14 183  ,cad_g09
03:08:14 184  ,cad_g10
03:08:14 185  ,cad_g11
03:08:14 186  ,cad_g12
03:08:14 187  ,cad_g13
03:08:14 188  ,cad_g14
03:08:14 189  ,cad_g15
03:08:14 190  ,cad_g16
03:08:14 191  ,cad_g17
03:08:14 192  ,cad_g18
03:08:14 193  ,cad_g19
03:08:14 194  ,cad_g20
03:08:14 195  ,cad_g21
03:08:14 196  ,cad_g22
03:08:14 197  ,cad_g23
03:08:14 198  ,cad_g24
03:08:14 199  ,cad_g25
03:08:14 200  ,cad_g26
03:08:14 201  ,cad_g27
03:08:14 202  ,cad_g28
03:08:14 203  ,cad_g29
03:08:14 204  ,cad_g30
03:08:14 205  ,cad_g31
03:08:14 206  ,cad_g32
03:08:14 207  ,cad_g33
03:08:14 208  ,cad_g34
03:08:14 209  ,cad_g35
03:08:14 210  ,cad_g36
03:08:14 211  ,cad_g37
03:08:14 212  ,cad_g38
03:08:14 213  ,cad_g39
03:08:14 214  ,cad_g40
03:08:14 215  ,cad_g41
03:08:14 216  ,chf_g00
03:08:14 217  ,chf_g01
03:08:14 218  ,chf_g02
03:08:14 219  ,chf_g03
03:08:14 220  ,chf_g04
03:08:14 221  ,chf_g05
03:08:14 222  ,chf_g06
03:08:14 223  ,chf_g07
03:08:14 224  ,chf_g08
03:08:14 225  ,chf_g09
03:08:14 226  ,chf_g10
03:08:14 227  ,chf_g11
03:08:14 228  ,chf_g12
03:08:14 229  ,chf_g13
03:08:14 230  ,chf_g14
03:08:14 231  ,chf_g15
03:08:14 232  ,chf_g16
03:08:14 233  ,chf_g17
03:08:14 234  ,chf_g18
03:08:14 235  ,chf_g19
03:08:14 236  ,chf_g20
03:08:14 237  ,chf_g21
03:08:14 238  ,chf_g22
03:08:14 239  ,chf_g23
03:08:14 240  ,chf_g24
03:08:14 241  ,chf_g25
03:08:14 242  ,chf_g26
03:08:14 243  ,chf_g27
03:08:14 244  ,chf_g28
03:08:14 245  ,chf_g29
03:08:14 246  ,chf_g30
03:08:14 247  ,chf_g31
03:08:14 248  ,chf_g32
03:08:14 249  ,chf_g33
03:08:14 250  ,chf_g34
03:08:14 251  ,chf_g35
03:08:14 252  ,chf_g36
03:08:14 253  ,chf_g37
03:08:14 254  ,chf_g38
03:08:14 255  ,chf_g39
03:08:14 256  ,chf_g40
03:08:14 257  ,chf_g41
03:08:14 258  FROM aud_ms6 m
03:08:14 259  WHERE gattn IN('nup','up')
03:08:14 260  AND 1+m.ydate < '&1'||' '||'&2'
03:08:14 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2011-01-05'||' '||'02:45:00'

View created.

Elapsed: 00:00:00.12
03:08:14 SQL> 
03:08:14 SQL> -- rpt
03:08:14 SQL> 
03:08:14 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	    12651
up	     6362

Elapsed: 00:00:00.04
03:08:14 SQL> 
03:08:14 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
aud2011-01-04 02:40:00

Elapsed: 00:00:00.04
03:08:14 SQL> 
03:08:14 SQL> -- Now build model from bme and score sme
03:08:14 SQL> @score1gattn.sql
03:08:14 SQL> -- score1gattn.sql
03:08:14 SQL> 
03:08:14 SQL> -- Does the 1st SVM score
03:08:14 SQL> 
03:08:14 SQL> -- Fill up svmc_apply_prep
03:08:14 SQL> @score_gattn.sql
03:08:14 SQL> --
03:08:14 SQL> -- score_gattn.sql
03:08:14 SQL> --
03:08:14 SQL> 
03:08:14 SQL> -- usage: score_gattn.sql
03:08:14 SQL> 
03:08:14 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
03:08:14 SQL> 
03:08:14 SQL> DEFINE target	= 'gattn'
03:08:14 SQL> DEFINE model_name = 'forex15'
03:08:14 SQL> DEFINE bldtable	= 'bme'
03:08:14 SQL> DEFINE scoretable = 'sme'
03:08:14 SQL> DEFINE case_id	= 'prdate'
03:08:14 SQL> 
03:08:14 SQL> -- Define a variable to help me exclude some columns from some data mining calls
03:08:14 SQL> DEFINE exclude1 = "'&target','&case_id'"
03:08:14 SQL> 
03:08:14 SQL> -- Builds an SVM model using pl/sql.
03:08:14 SQL> 
03:08:14 SQL> -----------------------------------------------------------------------
03:08:14 SQL> --			    BUILD THE MODEL
03:08:14 SQL> -----------------------------------------------------------------------
03:08:14 SQL> 
03:08:14 SQL> -- Cleanup old build data preparation objects for repeat runs
03:08:14 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.00
03:08:14 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.01
03:08:14 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.00
03:08:14 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.00
03:08:14 SQL> 
03:08:14 SQL> 
03:08:14 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
03:08:14 SQL> --
03:08:14 SQL> -- DROP	TABLE svmc_settings ;
03:08:14 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
03:08:14 SQL> -- DELETE svmc_settings;
03:08:14 SQL> 
03:08:14 SQL> -- The default classification algorithm is Naive Bayes. So override
03:08:14 SQL> -- this choice to SVM using a settings table.
03:08:14 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
03:08:14 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
03:08:14 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
03:08:14 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
03:08:14 SQL> -- models.
03:08:14 SQL> --
03:08:14 SQL> 
03:08:14 SQL> -- Do this once and then comment it out.
03:08:14 SQL> -- That makes script go faster.
03:08:14 SQL> -- BEGIN
03:08:14 SQL> -- -- Populate settings table
03:08:14 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
03:08:14 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
03:08:14 SQL> --
03:08:14 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
03:08:14 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
03:08:14 SQL> --
03:08:14 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
03:08:14 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
03:08:14 SQL> --   COMMIT;
03:08:14 SQL> -- END;
03:08:14 SQL> -- /
03:08:14 SQL> 
03:08:14 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.01
03:08:14 SQL> 
03:08:14 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
03:08:14   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:08:14   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.12
03:08:14 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
03:08:14   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:08:14   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
03:08:14 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
03:08:14   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:08:14   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
03:08:14 SQL> 
03:08:14 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
03:08:14   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:08:14   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
03:08:14 SQL> 
03:08:14 SQL> --------------------------------
03:08:14 SQL> -- PREPARE BUILD (TRAINING) DATA
03:08:14 SQL> --
03:08:14 SQL> 
03:08:14 SQL> -- 1. Missing Value treatment for all Predictors and
03:08:14 SQL> -- 2. Outlier Treatment and
03:08:14 SQL> -- 3. Normalization are performed below.
03:08:14 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
03:08:14 SQL> --    normalized here.
03:08:14 SQL> 
03:08:14 SQL> BEGIN
03:08:14   2  	-- Perform missing value treatment for all predictors
03:08:14   3  	-- create miss tables
03:08:14   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
03:08:14   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
03:08:14   6  
03:08:14   7  	-- populate miss tables
03:08:14   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
03:08:14   9  	  miss_table_name => 'svmc_miss_num',
03:08:14  10  	  data_table_name => '&bldtable',
03:08:14  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:08:14  12  
03:08:14  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
03:08:14  14  	  miss_table_name => 'svmc_miss_cat',
03:08:14  15  	  data_table_name => '&bldtable',
03:08:14  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:08:14  17  
03:08:14  18  	-- xform input data to replace missing values
03:08:14  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
03:08:14  20  	  miss_table_name => 'svmc_miss_num',
03:08:14  21  	  data_table_name => '&bldtable',
03:08:14  22  	  xform_view_name => 'xformed_build_miss_num');
03:08:14  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
03:08:14  24  	  miss_table_name => 'svmc_miss_cat',
03:08:14  25  	  data_table_name => '&bldtable',
03:08:14  26  	  xform_view_name => 'xformed_build_miss_cat');
03:08:14  27  
03:08:14  28  	-- Perform outlier treatment.
03:08:14  29  	-- create clip table
03:08:14  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
03:08:14  31  
03:08:14  32  	-- populate clip table
03:08:14  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
03:08:14  34  	  clip_table_name => 'svmc_clip',
03:08:14  35  	  data_table_name => '&bldtable',
03:08:14  36  	  tail_frac	  => 0.025,
03:08:14  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:08:14  38  
03:08:14  39  	-- xform input data to winsorized data
03:08:14  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
03:08:14  41  	  clip_table_name => 'svmc_clip',
03:08:14  42  	  data_table_name => '&bldtable',
03:08:14  43  	  xform_view_name => 'svmc_winsor');
03:08:14  44  
03:08:14  45  	-- create normalization table
03:08:14  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
03:08:14  47  
03:08:14  48  	-- populate normalization table based on winsorized data
03:08:14  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
03:08:14  50  	  norm_table_name => 'svmc_norm',
03:08:14  51  	  data_table_name => 'svmc_winsor',
03:08:14  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:08:14  53  
03:08:14  54  	-- normalize the original data
03:08:14  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
03:08:14  56  	  norm_table_name => 'svmc_norm',
03:08:14  57  	  data_table_name => '&bldtable',
03:08:14  58  	  xform_view_name => 'svmc_build_prep');
03:08:14  59  END;
03:08:14  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:17.73
03:08:32 SQL> 
03:08:32 SQL> ---------------------
03:08:32 SQL> -- CREATE A NEW MODEL
03:08:32 SQL> --
03:08:32 SQL> -- Cleanup old model with the same name for repeat runs
03:08:32 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
03:08:32   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:08:32   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex15');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.96
03:08:33 SQL> 
03:08:33 SQL> -- Build a new SVM Model
03:08:33 SQL> BEGIN
03:08:33   2  	DBMS_DATA_MINING.CREATE_MODEL(
03:08:33   3  	  model_name	      => '&model_name',
03:08:33   4  	  mining_function     => dbms_data_mining.classification,
03:08:33   5  	  data_table_name     => 'svmc_build_prep',
03:08:33   6  	  case_id_column_name => '&case_id',
03:08:33   7  	  target_column_name  => '&target',
03:08:33   8  	  settings_table_name => 'svmc_settings');
03:08:33   9  END;
03:08:33  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex15',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:27.91
03:09:01 SQL> 
03:09:01 SQL> -----------------------------------------------------------------------
03:09:01 SQL> --			       APPLY/score THE MODEL
03:09:01 SQL> -----------------------------------------------------------------------
03:09:01 SQL> 
03:09:01 SQL> -- Cleanup old scoring data preparation objects for repeat runs
03:09:01 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
03:09:01   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:09:01   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
03:09:01 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
03:09:01   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:09:01   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
03:09:01 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
03:09:01   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:09:01   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
03:09:01 SQL> -----------------------
03:09:01 SQL> -- PREPARE SCORING DATA
03:09:01 SQL> --
03:09:01 SQL> -- If the data for model creation has been prepared, then the data
03:09:01 SQL> -- to be scored using the model must be prepared in the same manner
03:09:01 SQL> -- in order to obtain meaningful results.
03:09:01 SQL> --
03:09:01 SQL> -- 1. Missing Value treatment for all Predictors and
03:09:01 SQL> -- 2. Normalization
03:09:01 SQL> -- No outlier treatment will be performed during test and apply. The
03:09:01 SQL> -- normalization step is sufficient, since the normalization parameters
03:09:01 SQL> -- already capture the effects of outlier treatment done with build data.
03:09:01 SQL> --
03:09:01 SQL> BEGIN
03:09:01   2  	-- Xform Test data to replace missing values
03:09:01   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
03:09:01   4  	  miss_table_name => 'svmc_miss_num',
03:09:01   5  	  data_table_name => '&scoretable',
03:09:01   6  	  xform_view_name => 'xformed_apply_miss_num');
03:09:01   7  
03:09:01   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
03:09:01   9  	  miss_table_name => 'svmc_miss_cat',
03:09:01  10  	  data_table_name => '&scoretable',
03:09:01  11  	  xform_view_name => 'xformed_apply_miss_cat');
03:09:01  12  
03:09:01  13  	-- Normalize the data to be scored
03:09:01  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
03:09:01  15  	  norm_table_name => 'svmc_norm',
03:09:01  16  	  data_table_name => '&scoretable',
03:09:01  17  	  xform_view_name => 'svmc_apply_prep');
03:09:01  18  END;
03:09:01  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.23
03:09:02 SQL> 
03:09:02 SQL> -- Use same model_name used in score_gattn.sql
03:09:02 SQL> DEFINE model_name = 'forex15'
03:09:02 SQL> 
03:09:02 SQL> DELETE fxscores6_gattn WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.04
03:09:03 SQL> 
03:09:03 SQL> INSERT INTO fxscores6_gattn (prdate,score,rundate,pair,ydate)
03:09:03   2  SELECT
03:09:03   3  prdate
03:09:03   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
03:09:03   5  ,sysdate
03:09:03   6  ,SUBSTR(prdate,1,3)pair
03:09:03   7  ,SUBSTR(prdate,4,19)ydate
03:09:03   8  FROM svmc_apply_prep
03:09:03   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex15,'up' USING *)score

1 row created.

Elapsed: 00:00:00.17
03:09:03 SQL> @aud_score1day_gattn.sql	2011-01-05 02:50:00
03:09:03 SQL> --
03:09:03 SQL> -- aud_score1day_gattn.sql
03:09:03 SQL> --
03:09:03 SQL> 
03:09:03 SQL> CREATE OR REPLACE VIEW sme AS
03:09:03   2  SELECT
03:09:03   3  'aud'||m.ydate prdate
03:09:03   4  ,NULL gattn
03:09:03   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
03:09:03   6  ,eur_g00
03:09:03   7  ,eur_g01
03:09:03   8  ,eur_g02
03:09:03   9  ,eur_g03
03:09:03  10  ,eur_g04
03:09:03  11  ,eur_g05
03:09:03  12  ,eur_g06
03:09:03  13  ,eur_g07
03:09:03  14  ,eur_g08
03:09:03  15  ,eur_g09
03:09:03  16  ,eur_g10
03:09:03  17  ,eur_g11
03:09:03  18  ,eur_g12
03:09:03  19  ,eur_g13
03:09:03  20  ,eur_g14
03:09:03  21  ,eur_g15
03:09:03  22  ,eur_g16
03:09:03  23  ,eur_g17
03:09:03  24  ,eur_g18
03:09:03  25  ,eur_g19
03:09:03  26  ,eur_g20
03:09:03  27  ,eur_g21
03:09:03  28  ,eur_g22
03:09:03  29  ,eur_g23
03:09:03  30  ,eur_g24
03:09:03  31  ,eur_g25
03:09:03  32  ,eur_g26
03:09:03  33  ,eur_g27
03:09:03  34  ,eur_g28
03:09:03  35  ,eur_g29
03:09:03  36  ,eur_g30
03:09:03  37  ,eur_g31
03:09:03  38  ,eur_g32
03:09:03  39  ,eur_g33
03:09:03  40  ,eur_g34
03:09:03  41  ,eur_g35
03:09:03  42  ,eur_g36
03:09:03  43  ,eur_g37
03:09:03  44  ,eur_g38
03:09:03  45  ,eur_g39
03:09:03  46  ,eur_g40
03:09:03  47  ,eur_g41
03:09:03  48  ,aud_g00
03:09:03  49  ,aud_g01
03:09:03  50  ,aud_g02
03:09:03  51  ,aud_g03
03:09:03  52  ,aud_g04
03:09:03  53  ,aud_g05
03:09:03  54  ,aud_g06
03:09:03  55  ,aud_g07
03:09:03  56  ,aud_g08
03:09:03  57  ,aud_g09
03:09:03  58  ,aud_g10
03:09:03  59  ,aud_g11
03:09:03  60  ,aud_g12
03:09:03  61  ,aud_g13
03:09:03  62  ,aud_g14
03:09:03  63  ,aud_g15
03:09:03  64  ,aud_g16
03:09:03  65  ,aud_g17
03:09:03  66  ,aud_g18
03:09:03  67  ,aud_g19
03:09:03  68  ,aud_g20
03:09:03  69  ,aud_g21
03:09:03  70  ,aud_g22
03:09:03  71  ,aud_g23
03:09:03  72  ,aud_g24
03:09:03  73  ,aud_g25
03:09:03  74  ,aud_g26
03:09:03  75  ,aud_g27
03:09:03  76  ,aud_g28
03:09:03  77  ,aud_g29
03:09:03  78  ,aud_g30
03:09:03  79  ,aud_g31
03:09:03  80  ,aud_g32
03:09:03  81  ,aud_g33
03:09:03  82  ,aud_g34
03:09:03  83  ,aud_g35
03:09:03  84  ,aud_g36
03:09:03  85  ,aud_g37
03:09:03  86  ,aud_g38
03:09:03  87  ,aud_g39
03:09:03  88  ,aud_g40
03:09:03  89  ,aud_g41
03:09:03  90  ,gbp_g00
03:09:03  91  ,gbp_g01
03:09:03  92  ,gbp_g02
03:09:03  93  ,gbp_g03
03:09:03  94  ,gbp_g04
03:09:03  95  ,gbp_g05
03:09:03  96  ,gbp_g06
03:09:03  97  ,gbp_g07
03:09:03  98  ,gbp_g08
03:09:03  99  ,gbp_g09
03:09:03 100  ,gbp_g10
03:09:03 101  ,gbp_g11
03:09:03 102  ,gbp_g12
03:09:03 103  ,gbp_g13
03:09:03 104  ,gbp_g14
03:09:03 105  ,gbp_g15
03:09:03 106  ,gbp_g16
03:09:03 107  ,gbp_g17
03:09:03 108  ,gbp_g18
03:09:03 109  ,gbp_g19
03:09:03 110  ,gbp_g20
03:09:03 111  ,gbp_g21
03:09:03 112  ,gbp_g22
03:09:03 113  ,gbp_g23
03:09:03 114  ,gbp_g24
03:09:03 115  ,gbp_g25
03:09:03 116  ,gbp_g26
03:09:03 117  ,gbp_g27
03:09:03 118  ,gbp_g28
03:09:03 119  ,gbp_g29
03:09:03 120  ,gbp_g30
03:09:03 121  ,gbp_g31
03:09:03 122  ,gbp_g32
03:09:03 123  ,gbp_g33
03:09:03 124  ,gbp_g34
03:09:03 125  ,gbp_g35
03:09:03 126  ,gbp_g36
03:09:03 127  ,gbp_g37
03:09:03 128  ,gbp_g38
03:09:03 129  ,gbp_g39
03:09:03 130  ,gbp_g40
03:09:03 131  ,gbp_g41
03:09:03 132  ,jpy_g00
03:09:03 133  ,jpy_g01
03:09:03 134  ,jpy_g02
03:09:03 135  ,jpy_g03
03:09:03 136  ,jpy_g04
03:09:03 137  ,jpy_g05
03:09:03 138  ,jpy_g06
03:09:03 139  ,jpy_g07
03:09:03 140  ,jpy_g08
03:09:03 141  ,jpy_g09
03:09:03 142  ,jpy_g10
03:09:03 143  ,jpy_g11
03:09:03 144  ,jpy_g12
03:09:03 145  ,jpy_g13
03:09:03 146  ,jpy_g14
03:09:03 147  ,jpy_g15
03:09:03 148  ,jpy_g16
03:09:03 149  ,jpy_g17
03:09:03 150  ,jpy_g18
03:09:03 151  ,jpy_g19
03:09:03 152  ,jpy_g20
03:09:03 153  ,jpy_g21
03:09:03 154  ,jpy_g22
03:09:03 155  ,jpy_g23
03:09:03 156  ,jpy_g24
03:09:03 157  ,jpy_g25
03:09:03 158  ,jpy_g26
03:09:03 159  ,jpy_g27
03:09:03 160  ,jpy_g28
03:09:03 161  ,jpy_g29
03:09:03 162  ,jpy_g30
03:09:03 163  ,jpy_g31
03:09:03 164  ,jpy_g32
03:09:03 165  ,jpy_g33
03:09:03 166  ,jpy_g34
03:09:03 167  ,jpy_g35
03:09:03 168  ,jpy_g36
03:09:03 169  ,jpy_g37
03:09:03 170  ,jpy_g38
03:09:03 171  ,jpy_g39
03:09:03 172  ,jpy_g40
03:09:03 173  ,jpy_g41
03:09:03 174  ,cad_g00
03:09:03 175  ,cad_g01
03:09:03 176  ,cad_g02
03:09:03 177  ,cad_g03
03:09:03 178  ,cad_g04
03:09:03 179  ,cad_g05
03:09:03 180  ,cad_g06
03:09:03 181  ,cad_g07
03:09:03 182  ,cad_g08
03:09:03 183  ,cad_g09
03:09:03 184  ,cad_g10
03:09:03 185  ,cad_g11
03:09:03 186  ,cad_g12
03:09:03 187  ,cad_g13
03:09:03 188  ,cad_g14
03:09:03 189  ,cad_g15
03:09:03 190  ,cad_g16
03:09:03 191  ,cad_g17
03:09:03 192  ,cad_g18
03:09:03 193  ,cad_g19
03:09:03 194  ,cad_g20
03:09:03 195  ,cad_g21
03:09:03 196  ,cad_g22
03:09:03 197  ,cad_g23
03:09:03 198  ,cad_g24
03:09:03 199  ,cad_g25
03:09:03 200  ,cad_g26
03:09:03 201  ,cad_g27
03:09:03 202  ,cad_g28
03:09:03 203  ,cad_g29
03:09:03 204  ,cad_g30
03:09:03 205  ,cad_g31
03:09:03 206  ,cad_g32
03:09:03 207  ,cad_g33
03:09:03 208  ,cad_g34
03:09:03 209  ,cad_g35
03:09:03 210  ,cad_g36
03:09:03 211  ,cad_g37
03:09:03 212  ,cad_g38
03:09:03 213  ,cad_g39
03:09:03 214  ,cad_g40
03:09:03 215  ,cad_g41
03:09:03 216  ,chf_g00
03:09:03 217  ,chf_g01
03:09:03 218  ,chf_g02
03:09:03 219  ,chf_g03
03:09:03 220  ,chf_g04
03:09:03 221  ,chf_g05
03:09:03 222  ,chf_g06
03:09:03 223  ,chf_g07
03:09:03 224  ,chf_g08
03:09:03 225  ,chf_g09
03:09:03 226  ,chf_g10
03:09:03 227  ,chf_g11
03:09:03 228  ,chf_g12
03:09:03 229  ,chf_g13
03:09:03 230  ,chf_g14
03:09:03 231  ,chf_g15
03:09:03 232  ,chf_g16
03:09:03 233  ,chf_g17
03:09:03 234  ,chf_g18
03:09:03 235  ,chf_g19
03:09:03 236  ,chf_g20
03:09:03 237  ,chf_g21
03:09:03 238  ,chf_g22
03:09:03 239  ,chf_g23
03:09:03 240  ,chf_g24
03:09:03 241  ,chf_g25
03:09:03 242  ,chf_g26
03:09:03 243  ,chf_g27
03:09:03 244  ,chf_g28
03:09:03 245  ,chf_g29
03:09:03 246  ,chf_g30
03:09:03 247  ,chf_g31
03:09:03 248  ,chf_g32
03:09:03 249  ,chf_g33
03:09:03 250  ,chf_g34
03:09:03 251  ,chf_g35
03:09:03 252  ,chf_g36
03:09:03 253  ,chf_g37
03:09:03 254  ,chf_g38
03:09:03 255  ,chf_g39
03:09:03 256  ,chf_g40
03:09:03 257  ,chf_g41
03:09:03 258  FROM aud_ms6 m
03:09:03 259  WHERE m.ydate = '&1'||' '||'&2'
03:09:03 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2011-01-05'||' '||'02:50:00'

View created.

Elapsed: 00:00:00.12
03:09:03 SQL> 
03:09:03 SQL> -- rpt
03:09:03 SQL> -- We should see just 1 row:
03:09:03 SQL> 
03:09:03 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
03:09:03 SQL> 
03:09:03 SQL> -- Build the model:
03:09:03 SQL> CREATE OR REPLACE VIEW bme AS
03:09:03   2  SELECT
03:09:03   3  'aud'||m.ydate prdate
03:09:03   4  ,gattn
03:09:03   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
03:09:03   6  ,eur_g00
03:09:03   7  ,eur_g01
03:09:03   8  ,eur_g02
03:09:03   9  ,eur_g03
03:09:03  10  ,eur_g04
03:09:03  11  ,eur_g05
03:09:03  12  ,eur_g06
03:09:03  13  ,eur_g07
03:09:03  14  ,eur_g08
03:09:03  15  ,eur_g09
03:09:03  16  ,eur_g10
03:09:03  17  ,eur_g11
03:09:03  18  ,eur_g12
03:09:03  19  ,eur_g13
03:09:03  20  ,eur_g14
03:09:03  21  ,eur_g15
03:09:03  22  ,eur_g16
03:09:03  23  ,eur_g17
03:09:03  24  ,eur_g18
03:09:03  25  ,eur_g19
03:09:03  26  ,eur_g20
03:09:03  27  ,eur_g21
03:09:03  28  ,eur_g22
03:09:03  29  ,eur_g23
03:09:03  30  ,eur_g24
03:09:03  31  ,eur_g25
03:09:03  32  ,eur_g26
03:09:03  33  ,eur_g27
03:09:03  34  ,eur_g28
03:09:03  35  ,eur_g29
03:09:03  36  ,eur_g30
03:09:03  37  ,eur_g31
03:09:03  38  ,eur_g32
03:09:03  39  ,eur_g33
03:09:03  40  ,eur_g34
03:09:03  41  ,eur_g35
03:09:03  42  ,eur_g36
03:09:03  43  ,eur_g37
03:09:03  44  ,eur_g38
03:09:03  45  ,eur_g39
03:09:03  46  ,eur_g40
03:09:03  47  ,eur_g41
03:09:03  48  ,aud_g00
03:09:03  49  ,aud_g01
03:09:03  50  ,aud_g02
03:09:03  51  ,aud_g03
03:09:03  52  ,aud_g04
03:09:03  53  ,aud_g05
03:09:03  54  ,aud_g06
03:09:03  55  ,aud_g07
03:09:03  56  ,aud_g08
03:09:03  57  ,aud_g09
03:09:03  58  ,aud_g10
03:09:03  59  ,aud_g11
03:09:03  60  ,aud_g12
03:09:03  61  ,aud_g13
03:09:03  62  ,aud_g14
03:09:03  63  ,aud_g15
03:09:03  64  ,aud_g16
03:09:03  65  ,aud_g17
03:09:03  66  ,aud_g18
03:09:03  67  ,aud_g19
03:09:03  68  ,aud_g20
03:09:03  69  ,aud_g21
03:09:03  70  ,aud_g22
03:09:03  71  ,aud_g23
03:09:03  72  ,aud_g24
03:09:03  73  ,aud_g25
03:09:03  74  ,aud_g26
03:09:03  75  ,aud_g27
03:09:03  76  ,aud_g28
03:09:03  77  ,aud_g29
03:09:03  78  ,aud_g30
03:09:03  79  ,aud_g31
03:09:03  80  ,aud_g32
03:09:03  81  ,aud_g33
03:09:03  82  ,aud_g34
03:09:03  83  ,aud_g35
03:09:03  84  ,aud_g36
03:09:03  85  ,aud_g37
03:09:03  86  ,aud_g38
03:09:03  87  ,aud_g39
03:09:03  88  ,aud_g40
03:09:03  89  ,aud_g41
03:09:03  90  ,gbp_g00
03:09:03  91  ,gbp_g01
03:09:03  92  ,gbp_g02
03:09:03  93  ,gbp_g03
03:09:03  94  ,gbp_g04
03:09:03  95  ,gbp_g05
03:09:03  96  ,gbp_g06
03:09:03  97  ,gbp_g07
03:09:03  98  ,gbp_g08
03:09:03  99  ,gbp_g09
03:09:03 100  ,gbp_g10
03:09:03 101  ,gbp_g11
03:09:03 102  ,gbp_g12
03:09:03 103  ,gbp_g13
03:09:03 104  ,gbp_g14
03:09:03 105  ,gbp_g15
03:09:03 106  ,gbp_g16
03:09:03 107  ,gbp_g17
03:09:03 108  ,gbp_g18
03:09:03 109  ,gbp_g19
03:09:03 110  ,gbp_g20
03:09:03 111  ,gbp_g21
03:09:03 112  ,gbp_g22
03:09:03 113  ,gbp_g23
03:09:03 114  ,gbp_g24
03:09:03 115  ,gbp_g25
03:09:03 116  ,gbp_g26
03:09:03 117  ,gbp_g27
03:09:03 118  ,gbp_g28
03:09:03 119  ,gbp_g29
03:09:03 120  ,gbp_g30
03:09:03 121  ,gbp_g31
03:09:03 122  ,gbp_g32
03:09:03 123  ,gbp_g33
03:09:03 124  ,gbp_g34
03:09:03 125  ,gbp_g35
03:09:03 126  ,gbp_g36
03:09:03 127  ,gbp_g37
03:09:03 128  ,gbp_g38
03:09:03 129  ,gbp_g39
03:09:03 130  ,gbp_g40
03:09:03 131  ,gbp_g41
03:09:03 132  ,jpy_g00
03:09:03 133  ,jpy_g01
03:09:03 134  ,jpy_g02
03:09:03 135  ,jpy_g03
03:09:03 136  ,jpy_g04
03:09:03 137  ,jpy_g05
03:09:03 138  ,jpy_g06
03:09:03 139  ,jpy_g07
03:09:03 140  ,jpy_g08
03:09:03 141  ,jpy_g09
03:09:03 142  ,jpy_g10
03:09:03 143  ,jpy_g11
03:09:03 144  ,jpy_g12
03:09:03 145  ,jpy_g13
03:09:03 146  ,jpy_g14
03:09:03 147  ,jpy_g15
03:09:03 148  ,jpy_g16
03:09:03 149  ,jpy_g17
03:09:03 150  ,jpy_g18
03:09:03 151  ,jpy_g19
03:09:03 152  ,jpy_g20
03:09:03 153  ,jpy_g21
03:09:03 154  ,jpy_g22
03:09:03 155  ,jpy_g23
03:09:03 156  ,jpy_g24
03:09:03 157  ,jpy_g25
03:09:03 158  ,jpy_g26
03:09:03 159  ,jpy_g27
03:09:03 160  ,jpy_g28
03:09:03 161  ,jpy_g29
03:09:03 162  ,jpy_g30
03:09:03 163  ,jpy_g31
03:09:03 164  ,jpy_g32
03:09:03 165  ,jpy_g33
03:09:03 166  ,jpy_g34
03:09:03 167  ,jpy_g35
03:09:03 168  ,jpy_g36
03:09:03 169  ,jpy_g37
03:09:03 170  ,jpy_g38
03:09:03 171  ,jpy_g39
03:09:03 172  ,jpy_g40
03:09:03 173  ,jpy_g41
03:09:03 174  ,cad_g00
03:09:03 175  ,cad_g01
03:09:03 176  ,cad_g02
03:09:03 177  ,cad_g03
03:09:03 178  ,cad_g04
03:09:03 179  ,cad_g05
03:09:03 180  ,cad_g06
03:09:03 181  ,cad_g07
03:09:03 182  ,cad_g08
03:09:03 183  ,cad_g09
03:09:03 184  ,cad_g10
03:09:03 185  ,cad_g11
03:09:03 186  ,cad_g12
03:09:03 187  ,cad_g13
03:09:03 188  ,cad_g14
03:09:03 189  ,cad_g15
03:09:03 190  ,cad_g16
03:09:03 191  ,cad_g17
03:09:03 192  ,cad_g18
03:09:03 193  ,cad_g19
03:09:03 194  ,cad_g20
03:09:03 195  ,cad_g21
03:09:03 196  ,cad_g22
03:09:03 197  ,cad_g23
03:09:03 198  ,cad_g24
03:09:03 199  ,cad_g25
03:09:03 200  ,cad_g26
03:09:03 201  ,cad_g27
03:09:03 202  ,cad_g28
03:09:03 203  ,cad_g29
03:09:03 204  ,cad_g30
03:09:03 205  ,cad_g31
03:09:03 206  ,cad_g32
03:09:03 207  ,cad_g33
03:09:03 208  ,cad_g34
03:09:03 209  ,cad_g35
03:09:03 210  ,cad_g36
03:09:03 211  ,cad_g37
03:09:03 212  ,cad_g38
03:09:03 213  ,cad_g39
03:09:03 214  ,cad_g40
03:09:03 215  ,cad_g41
03:09:03 216  ,chf_g00
03:09:03 217  ,chf_g01
03:09:03 218  ,chf_g02
03:09:03 219  ,chf_g03
03:09:03 220  ,chf_g04
03:09:03 221  ,chf_g05
03:09:03 222  ,chf_g06
03:09:03 223  ,chf_g07
03:09:03 224  ,chf_g08
03:09:03 225  ,chf_g09
03:09:03 226  ,chf_g10
03:09:03 227  ,chf_g11
03:09:03 228  ,chf_g12
03:09:03 229  ,chf_g13
03:09:03 230  ,chf_g14
03:09:03 231  ,chf_g15
03:09:03 232  ,chf_g16
03:09:03 233  ,chf_g17
03:09:03 234  ,chf_g18
03:09:03 235  ,chf_g19
03:09:03 236  ,chf_g20
03:09:03 237  ,chf_g21
03:09:03 238  ,chf_g22
03:09:03 239  ,chf_g23
03:09:03 240  ,chf_g24
03:09:03 241  ,chf_g25
03:09:03 242  ,chf_g26
03:09:03 243  ,chf_g27
03:09:03 244  ,chf_g28
03:09:03 245  ,chf_g29
03:09:03 246  ,chf_g30
03:09:03 247  ,chf_g31
03:09:03 248  ,chf_g32
03:09:03 249  ,chf_g33
03:09:03 250  ,chf_g34
03:09:03 251  ,chf_g35
03:09:03 252  ,chf_g36
03:09:03 253  ,chf_g37
03:09:03 254  ,chf_g38
03:09:03 255  ,chf_g39
03:09:03 256  ,chf_g40
03:09:03 257  ,chf_g41
03:09:03 258  FROM aud_ms6 m
03:09:03 259  WHERE gattn IN('nup','up')
03:09:03 260  AND 1+m.ydate < '&1'||' '||'&2'
03:09:03 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2011-01-05'||' '||'02:50:00'

View created.

Elapsed: 00:00:00.15
03:09:03 SQL> 
03:09:03 SQL> -- rpt
03:09:03 SQL> 
03:09:03 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	    12651
up	     6363

Elapsed: 00:00:00.04
03:09:03 SQL> 
03:09:03 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
aud2011-01-04 02:45:00

Elapsed: 00:00:00.03
03:09:03 SQL> 
03:09:03 SQL> -- Now build model from bme and score sme
03:09:03 SQL> @score1gattn.sql
03:09:03 SQL> -- score1gattn.sql
03:09:03 SQL> 
03:09:03 SQL> -- Does the 1st SVM score
03:09:03 SQL> 
03:09:03 SQL> -- Fill up svmc_apply_prep
03:09:03 SQL> @score_gattn.sql
03:09:03 SQL> --
03:09:03 SQL> -- score_gattn.sql
03:09:03 SQL> --
03:09:03 SQL> 
03:09:03 SQL> -- usage: score_gattn.sql
03:09:03 SQL> 
03:09:03 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
03:09:03 SQL> 
03:09:03 SQL> DEFINE target	= 'gattn'
03:09:03 SQL> DEFINE model_name = 'forex15'
03:09:03 SQL> DEFINE bldtable	= 'bme'
03:09:03 SQL> DEFINE scoretable = 'sme'
03:09:03 SQL> DEFINE case_id	= 'prdate'
03:09:03 SQL> 
03:09:03 SQL> -- Define a variable to help me exclude some columns from some data mining calls
03:09:03 SQL> DEFINE exclude1 = "'&target','&case_id'"
03:09:03 SQL> 
03:09:03 SQL> -- Builds an SVM model using pl/sql.
03:09:03 SQL> 
03:09:03 SQL> -----------------------------------------------------------------------
03:09:03 SQL> --			    BUILD THE MODEL
03:09:03 SQL> -----------------------------------------------------------------------
03:09:03 SQL> 
03:09:03 SQL> -- Cleanup old build data preparation objects for repeat runs
03:09:03 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.00
03:09:03 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
03:09:03 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.01
03:09:03 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.00
03:09:03 SQL> 
03:09:03 SQL> 
03:09:03 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
03:09:03 SQL> --
03:09:03 SQL> -- DROP	TABLE svmc_settings ;
03:09:03 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
03:09:03 SQL> -- DELETE svmc_settings;
03:09:03 SQL> 
03:09:03 SQL> -- The default classification algorithm is Naive Bayes. So override
03:09:03 SQL> -- this choice to SVM using a settings table.
03:09:03 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
03:09:03 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
03:09:03 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
03:09:03 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
03:09:03 SQL> -- models.
03:09:03 SQL> --
03:09:03 SQL> 
03:09:03 SQL> -- Do this once and then comment it out.
03:09:03 SQL> -- That makes script go faster.
03:09:03 SQL> -- BEGIN
03:09:03 SQL> -- -- Populate settings table
03:09:03 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
03:09:03 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
03:09:03 SQL> --
03:09:03 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
03:09:03 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
03:09:03 SQL> --
03:09:03 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
03:09:03 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
03:09:03 SQL> --   COMMIT;
03:09:03 SQL> -- END;
03:09:03 SQL> -- /
03:09:03 SQL> 
03:09:03 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
03:09:03 SQL> 
03:09:03 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
03:09:03   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:09:03   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
03:09:03 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
03:09:03   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:09:03   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
03:09:03 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
03:09:03   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:09:03   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
03:09:03 SQL> 
03:09:03 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
03:09:03   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:09:03   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
03:09:03 SQL> 
03:09:03 SQL> --------------------------------
03:09:03 SQL> -- PREPARE BUILD (TRAINING) DATA
03:09:03 SQL> --
03:09:03 SQL> 
03:09:03 SQL> -- 1. Missing Value treatment for all Predictors and
03:09:03 SQL> -- 2. Outlier Treatment and
03:09:03 SQL> -- 3. Normalization are performed below.
03:09:03 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
03:09:03 SQL> --    normalized here.
03:09:03 SQL> 
03:09:03 SQL> BEGIN
03:09:03   2  	-- Perform missing value treatment for all predictors
03:09:03   3  	-- create miss tables
03:09:03   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
03:09:03   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
03:09:03   6  
03:09:03   7  	-- populate miss tables
03:09:03   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
03:09:03   9  	  miss_table_name => 'svmc_miss_num',
03:09:03  10  	  data_table_name => '&bldtable',
03:09:03  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:09:03  12  
03:09:03  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
03:09:03  14  	  miss_table_name => 'svmc_miss_cat',
03:09:03  15  	  data_table_name => '&bldtable',
03:09:03  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:09:03  17  
03:09:03  18  	-- xform input data to replace missing values
03:09:03  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
03:09:03  20  	  miss_table_name => 'svmc_miss_num',
03:09:03  21  	  data_table_name => '&bldtable',
03:09:03  22  	  xform_view_name => 'xformed_build_miss_num');
03:09:03  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
03:09:03  24  	  miss_table_name => 'svmc_miss_cat',
03:09:03  25  	  data_table_name => '&bldtable',
03:09:03  26  	  xform_view_name => 'xformed_build_miss_cat');
03:09:03  27  
03:09:03  28  	-- Perform outlier treatment.
03:09:03  29  	-- create clip table
03:09:03  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
03:09:03  31  
03:09:03  32  	-- populate clip table
03:09:03  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
03:09:03  34  	  clip_table_name => 'svmc_clip',
03:09:03  35  	  data_table_name => '&bldtable',
03:09:03  36  	  tail_frac	  => 0.025,
03:09:03  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:09:03  38  
03:09:03  39  	-- xform input data to winsorized data
03:09:03  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
03:09:03  41  	  clip_table_name => 'svmc_clip',
03:09:03  42  	  data_table_name => '&bldtable',
03:09:03  43  	  xform_view_name => 'svmc_winsor');
03:09:03  44  
03:09:03  45  	-- create normalization table
03:09:03  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
03:09:03  47  
03:09:03  48  	-- populate normalization table based on winsorized data
03:09:03  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
03:09:03  50  	  norm_table_name => 'svmc_norm',
03:09:03  51  	  data_table_name => 'svmc_winsor',
03:09:03  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:09:03  53  
03:09:03  54  	-- normalize the original data
03:09:03  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
03:09:03  56  	  norm_table_name => 'svmc_norm',
03:09:03  57  	  data_table_name => '&bldtable',
03:09:03  58  	  xform_view_name => 'svmc_build_prep');
03:09:03  59  END;
03:09:03  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:18.13
03:09:21 SQL> 
03:09:21 SQL> ---------------------
03:09:21 SQL> -- CREATE A NEW MODEL
03:09:21 SQL> --
03:09:21 SQL> -- Cleanup old model with the same name for repeat runs
03:09:21 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
03:09:21   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:09:21   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex15');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.99
03:09:22 SQL> 
03:09:22 SQL> -- Build a new SVM Model
03:09:22 SQL> BEGIN
03:09:22   2  	DBMS_DATA_MINING.CREATE_MODEL(
03:09:22   3  	  model_name	      => '&model_name',
03:09:22   4  	  mining_function     => dbms_data_mining.classification,
03:09:22   5  	  data_table_name     => 'svmc_build_prep',
03:09:22   6  	  case_id_column_name => '&case_id',
03:09:22   7  	  target_column_name  => '&target',
03:09:22   8  	  settings_table_name => 'svmc_settings');
03:09:22   9  END;
03:09:22  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex15',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:28.39
03:09:51 SQL> 
03:09:51 SQL> -----------------------------------------------------------------------
03:09:51 SQL> --			       APPLY/score THE MODEL
03:09:51 SQL> -----------------------------------------------------------------------
03:09:51 SQL> 
03:09:51 SQL> -- Cleanup old scoring data preparation objects for repeat runs
03:09:51 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
03:09:51   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:09:51   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
03:09:51 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
03:09:51   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:09:51   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
03:09:51 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
03:09:51   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:09:51   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
03:09:51 SQL> -----------------------
03:09:51 SQL> -- PREPARE SCORING DATA
03:09:51 SQL> --
03:09:51 SQL> -- If the data for model creation has been prepared, then the data
03:09:51 SQL> -- to be scored using the model must be prepared in the same manner
03:09:51 SQL> -- in order to obtain meaningful results.
03:09:51 SQL> --
03:09:51 SQL> -- 1. Missing Value treatment for all Predictors and
03:09:51 SQL> -- 2. Normalization
03:09:51 SQL> -- No outlier treatment will be performed during test and apply. The
03:09:51 SQL> -- normalization step is sufficient, since the normalization parameters
03:09:51 SQL> -- already capture the effects of outlier treatment done with build data.
03:09:51 SQL> --
03:09:51 SQL> BEGIN
03:09:51   2  	-- Xform Test data to replace missing values
03:09:51   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
03:09:51   4  	  miss_table_name => 'svmc_miss_num',
03:09:51   5  	  data_table_name => '&scoretable',
03:09:51   6  	  xform_view_name => 'xformed_apply_miss_num');
03:09:51   7  
03:09:51   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
03:09:51   9  	  miss_table_name => 'svmc_miss_cat',
03:09:51  10  	  data_table_name => '&scoretable',
03:09:51  11  	  xform_view_name => 'xformed_apply_miss_cat');
03:09:51  12  
03:09:51  13  	-- Normalize the data to be scored
03:09:51  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
03:09:51  15  	  norm_table_name => 'svmc_norm',
03:09:51  16  	  data_table_name => '&scoretable',
03:09:51  17  	  xform_view_name => 'svmc_apply_prep');
03:09:51  18  END;
03:09:51  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.27
03:09:52 SQL> 
03:09:52 SQL> -- Use same model_name used in score_gattn.sql
03:09:52 SQL> DEFINE model_name = 'forex15'
03:09:52 SQL> 
03:09:52 SQL> DELETE fxscores6_gattn WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.03
03:09:52 SQL> 
03:09:52 SQL> INSERT INTO fxscores6_gattn (prdate,score,rundate,pair,ydate)
03:09:52   2  SELECT
03:09:52   3  prdate
03:09:52   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
03:09:52   5  ,sysdate
03:09:52   6  ,SUBSTR(prdate,1,3)pair
03:09:52   7  ,SUBSTR(prdate,4,19)ydate
03:09:52   8  FROM svmc_apply_prep
03:09:52   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex15,'up' USING *)score

1 row created.

Elapsed: 00:00:00.18
03:09:53 SQL> @aud_score1day_gattn.sql	2011-01-05 02:55:00
03:09:53 SQL> --
03:09:53 SQL> -- aud_score1day_gattn.sql
03:09:53 SQL> --
03:09:53 SQL> 
03:09:53 SQL> CREATE OR REPLACE VIEW sme AS
03:09:53   2  SELECT
03:09:53   3  'aud'||m.ydate prdate
03:09:53   4  ,NULL gattn
03:09:53   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
03:09:53   6  ,eur_g00
03:09:53   7  ,eur_g01
03:09:53   8  ,eur_g02
03:09:53   9  ,eur_g03
03:09:53  10  ,eur_g04
03:09:53  11  ,eur_g05
03:09:53  12  ,eur_g06
03:09:53  13  ,eur_g07
03:09:53  14  ,eur_g08
03:09:53  15  ,eur_g09
03:09:53  16  ,eur_g10
03:09:53  17  ,eur_g11
03:09:53  18  ,eur_g12
03:09:53  19  ,eur_g13
03:09:53  20  ,eur_g14
03:09:53  21  ,eur_g15
03:09:53  22  ,eur_g16
03:09:53  23  ,eur_g17
03:09:53  24  ,eur_g18
03:09:53  25  ,eur_g19
03:09:53  26  ,eur_g20
03:09:53  27  ,eur_g21
03:09:53  28  ,eur_g22
03:09:53  29  ,eur_g23
03:09:53  30  ,eur_g24
03:09:53  31  ,eur_g25
03:09:53  32  ,eur_g26
03:09:53  33  ,eur_g27
03:09:53  34  ,eur_g28
03:09:53  35  ,eur_g29
03:09:53  36  ,eur_g30
03:09:53  37  ,eur_g31
03:09:53  38  ,eur_g32
03:09:53  39  ,eur_g33
03:09:53  40  ,eur_g34
03:09:53  41  ,eur_g35
03:09:53  42  ,eur_g36
03:09:53  43  ,eur_g37
03:09:53  44  ,eur_g38
03:09:53  45  ,eur_g39
03:09:53  46  ,eur_g40
03:09:53  47  ,eur_g41
03:09:53  48  ,aud_g00
03:09:53  49  ,aud_g01
03:09:53  50  ,aud_g02
03:09:53  51  ,aud_g03
03:09:53  52  ,aud_g04
03:09:53  53  ,aud_g05
03:09:53  54  ,aud_g06
03:09:53  55  ,aud_g07
03:09:53  56  ,aud_g08
03:09:53  57  ,aud_g09
03:09:53  58  ,aud_g10
03:09:53  59  ,aud_g11
03:09:53  60  ,aud_g12
03:09:53  61  ,aud_g13
03:09:53  62  ,aud_g14
03:09:53  63  ,aud_g15
03:09:53  64  ,aud_g16
03:09:53  65  ,aud_g17
03:09:53  66  ,aud_g18
03:09:53  67  ,aud_g19
03:09:53  68  ,aud_g20
03:09:53  69  ,aud_g21
03:09:53  70  ,aud_g22
03:09:53  71  ,aud_g23
03:09:53  72  ,aud_g24
03:09:53  73  ,aud_g25
03:09:53  74  ,aud_g26
03:09:53  75  ,aud_g27
03:09:53  76  ,aud_g28
03:09:53  77  ,aud_g29
03:09:53  78  ,aud_g30
03:09:53  79  ,aud_g31
03:09:53  80  ,aud_g32
03:09:53  81  ,aud_g33
03:09:53  82  ,aud_g34
03:09:53  83  ,aud_g35
03:09:53  84  ,aud_g36
03:09:53  85  ,aud_g37
03:09:53  86  ,aud_g38
03:09:53  87  ,aud_g39
03:09:53  88  ,aud_g40
03:09:53  89  ,aud_g41
03:09:53  90  ,gbp_g00
03:09:53  91  ,gbp_g01
03:09:53  92  ,gbp_g02
03:09:53  93  ,gbp_g03
03:09:53  94  ,gbp_g04
03:09:53  95  ,gbp_g05
03:09:53  96  ,gbp_g06
03:09:53  97  ,gbp_g07
03:09:53  98  ,gbp_g08
03:09:53  99  ,gbp_g09
03:09:53 100  ,gbp_g10
03:09:53 101  ,gbp_g11
03:09:53 102  ,gbp_g12
03:09:53 103  ,gbp_g13
03:09:53 104  ,gbp_g14
03:09:53 105  ,gbp_g15
03:09:53 106  ,gbp_g16
03:09:53 107  ,gbp_g17
03:09:53 108  ,gbp_g18
03:09:53 109  ,gbp_g19
03:09:53 110  ,gbp_g20
03:09:53 111  ,gbp_g21
03:09:53 112  ,gbp_g22
03:09:53 113  ,gbp_g23
03:09:53 114  ,gbp_g24
03:09:53 115  ,gbp_g25
03:09:53 116  ,gbp_g26
03:09:53 117  ,gbp_g27
03:09:53 118  ,gbp_g28
03:09:53 119  ,gbp_g29
03:09:53 120  ,gbp_g30
03:09:53 121  ,gbp_g31
03:09:53 122  ,gbp_g32
03:09:53 123  ,gbp_g33
03:09:53 124  ,gbp_g34
03:09:53 125  ,gbp_g35
03:09:53 126  ,gbp_g36
03:09:53 127  ,gbp_g37
03:09:53 128  ,gbp_g38
03:09:53 129  ,gbp_g39
03:09:53 130  ,gbp_g40
03:09:53 131  ,gbp_g41
03:09:53 132  ,jpy_g00
03:09:53 133  ,jpy_g01
03:09:53 134  ,jpy_g02
03:09:53 135  ,jpy_g03
03:09:53 136  ,jpy_g04
03:09:53 137  ,jpy_g05
03:09:53 138  ,jpy_g06
03:09:53 139  ,jpy_g07
03:09:53 140  ,jpy_g08
03:09:53 141  ,jpy_g09
03:09:53 142  ,jpy_g10
03:09:53 143  ,jpy_g11
03:09:53 144  ,jpy_g12
03:09:53 145  ,jpy_g13
03:09:53 146  ,jpy_g14
03:09:53 147  ,jpy_g15
03:09:53 148  ,jpy_g16
03:09:53 149  ,jpy_g17
03:09:53 150  ,jpy_g18
03:09:53 151  ,jpy_g19
03:09:53 152  ,jpy_g20
03:09:53 153  ,jpy_g21
03:09:53 154  ,jpy_g22
03:09:53 155  ,jpy_g23
03:09:53 156  ,jpy_g24
03:09:53 157  ,jpy_g25
03:09:53 158  ,jpy_g26
03:09:53 159  ,jpy_g27
03:09:53 160  ,jpy_g28
03:09:53 161  ,jpy_g29
03:09:53 162  ,jpy_g30
03:09:53 163  ,jpy_g31
03:09:53 164  ,jpy_g32
03:09:53 165  ,jpy_g33
03:09:53 166  ,jpy_g34
03:09:53 167  ,jpy_g35
03:09:53 168  ,jpy_g36
03:09:53 169  ,jpy_g37
03:09:53 170  ,jpy_g38
03:09:53 171  ,jpy_g39
03:09:53 172  ,jpy_g40
03:09:53 173  ,jpy_g41
03:09:53 174  ,cad_g00
03:09:53 175  ,cad_g01
03:09:53 176  ,cad_g02
03:09:53 177  ,cad_g03
03:09:53 178  ,cad_g04
03:09:53 179  ,cad_g05
03:09:53 180  ,cad_g06
03:09:53 181  ,cad_g07
03:09:53 182  ,cad_g08
03:09:53 183  ,cad_g09
03:09:53 184  ,cad_g10
03:09:53 185  ,cad_g11
03:09:53 186  ,cad_g12
03:09:53 187  ,cad_g13
03:09:53 188  ,cad_g14
03:09:53 189  ,cad_g15
03:09:53 190  ,cad_g16
03:09:53 191  ,cad_g17
03:09:53 192  ,cad_g18
03:09:53 193  ,cad_g19
03:09:53 194  ,cad_g20
03:09:53 195  ,cad_g21
03:09:53 196  ,cad_g22
03:09:53 197  ,cad_g23
03:09:53 198  ,cad_g24
03:09:53 199  ,cad_g25
03:09:53 200  ,cad_g26
03:09:53 201  ,cad_g27
03:09:53 202  ,cad_g28
03:09:53 203  ,cad_g29
03:09:53 204  ,cad_g30
03:09:53 205  ,cad_g31
03:09:53 206  ,cad_g32
03:09:53 207  ,cad_g33
03:09:53 208  ,cad_g34
03:09:53 209  ,cad_g35
03:09:53 210  ,cad_g36
03:09:53 211  ,cad_g37
03:09:53 212  ,cad_g38
03:09:53 213  ,cad_g39
03:09:53 214  ,cad_g40
03:09:53 215  ,cad_g41
03:09:53 216  ,chf_g00
03:09:53 217  ,chf_g01
03:09:53 218  ,chf_g02
03:09:53 219  ,chf_g03
03:09:53 220  ,chf_g04
03:09:53 221  ,chf_g05
03:09:53 222  ,chf_g06
03:09:53 223  ,chf_g07
03:09:53 224  ,chf_g08
03:09:53 225  ,chf_g09
03:09:53 226  ,chf_g10
03:09:53 227  ,chf_g11
03:09:53 228  ,chf_g12
03:09:53 229  ,chf_g13
03:09:53 230  ,chf_g14
03:09:53 231  ,chf_g15
03:09:53 232  ,chf_g16
03:09:53 233  ,chf_g17
03:09:53 234  ,chf_g18
03:09:53 235  ,chf_g19
03:09:53 236  ,chf_g20
03:09:53 237  ,chf_g21
03:09:53 238  ,chf_g22
03:09:53 239  ,chf_g23
03:09:53 240  ,chf_g24
03:09:53 241  ,chf_g25
03:09:53 242  ,chf_g26
03:09:53 243  ,chf_g27
03:09:53 244  ,chf_g28
03:09:53 245  ,chf_g29
03:09:53 246  ,chf_g30
03:09:53 247  ,chf_g31
03:09:53 248  ,chf_g32
03:09:53 249  ,chf_g33
03:09:53 250  ,chf_g34
03:09:53 251  ,chf_g35
03:09:53 252  ,chf_g36
03:09:53 253  ,chf_g37
03:09:53 254  ,chf_g38
03:09:53 255  ,chf_g39
03:09:53 256  ,chf_g40
03:09:53 257  ,chf_g41
03:09:53 258  FROM aud_ms6 m
03:09:53 259  WHERE m.ydate = '&1'||' '||'&2'
03:09:53 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2011-01-05'||' '||'02:55:00'

View created.

Elapsed: 00:00:00.12
03:09:53 SQL> 
03:09:53 SQL> -- rpt
03:09:53 SQL> -- We should see just 1 row:
03:09:53 SQL> 
03:09:53 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
03:09:53 SQL> 
03:09:53 SQL> -- Build the model:
03:09:53 SQL> CREATE OR REPLACE VIEW bme AS
03:09:53   2  SELECT
03:09:53   3  'aud'||m.ydate prdate
03:09:53   4  ,gattn
03:09:53   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
03:09:53   6  ,eur_g00
03:09:53   7  ,eur_g01
03:09:53   8  ,eur_g02
03:09:53   9  ,eur_g03
03:09:53  10  ,eur_g04
03:09:53  11  ,eur_g05
03:09:53  12  ,eur_g06
03:09:53  13  ,eur_g07
03:09:53  14  ,eur_g08
03:09:53  15  ,eur_g09
03:09:53  16  ,eur_g10
03:09:53  17  ,eur_g11
03:09:53  18  ,eur_g12
03:09:53  19  ,eur_g13
03:09:53  20  ,eur_g14
03:09:53  21  ,eur_g15
03:09:53  22  ,eur_g16
03:09:53  23  ,eur_g17
03:09:53  24  ,eur_g18
03:09:53  25  ,eur_g19
03:09:53  26  ,eur_g20
03:09:53  27  ,eur_g21
03:09:53  28  ,eur_g22
03:09:53  29  ,eur_g23
03:09:53  30  ,eur_g24
03:09:53  31  ,eur_g25
03:09:53  32  ,eur_g26
03:09:53  33  ,eur_g27
03:09:53  34  ,eur_g28
03:09:53  35  ,eur_g29
03:09:53  36  ,eur_g30
03:09:53  37  ,eur_g31
03:09:53  38  ,eur_g32
03:09:53  39  ,eur_g33
03:09:53  40  ,eur_g34
03:09:53  41  ,eur_g35
03:09:53  42  ,eur_g36
03:09:53  43  ,eur_g37
03:09:53  44  ,eur_g38
03:09:53  45  ,eur_g39
03:09:53  46  ,eur_g40
03:09:53  47  ,eur_g41
03:09:53  48  ,aud_g00
03:09:53  49  ,aud_g01
03:09:53  50  ,aud_g02
03:09:53  51  ,aud_g03
03:09:53  52  ,aud_g04
03:09:53  53  ,aud_g05
03:09:53  54  ,aud_g06
03:09:53  55  ,aud_g07
03:09:53  56  ,aud_g08
03:09:53  57  ,aud_g09
03:09:53  58  ,aud_g10
03:09:53  59  ,aud_g11
03:09:53  60  ,aud_g12
03:09:53  61  ,aud_g13
03:09:53  62  ,aud_g14
03:09:53  63  ,aud_g15
03:09:53  64  ,aud_g16
03:09:53  65  ,aud_g17
03:09:53  66  ,aud_g18
03:09:53  67  ,aud_g19
03:09:53  68  ,aud_g20
03:09:53  69  ,aud_g21
03:09:53  70  ,aud_g22
03:09:53  71  ,aud_g23
03:09:53  72  ,aud_g24
03:09:53  73  ,aud_g25
03:09:53  74  ,aud_g26
03:09:53  75  ,aud_g27
03:09:53  76  ,aud_g28
03:09:53  77  ,aud_g29
03:09:53  78  ,aud_g30
03:09:53  79  ,aud_g31
03:09:53  80  ,aud_g32
03:09:53  81  ,aud_g33
03:09:53  82  ,aud_g34
03:09:53  83  ,aud_g35
03:09:53  84  ,aud_g36
03:09:53  85  ,aud_g37
03:09:53  86  ,aud_g38
03:09:53  87  ,aud_g39
03:09:53  88  ,aud_g40
03:09:53  89  ,aud_g41
03:09:53  90  ,gbp_g00
03:09:53  91  ,gbp_g01
03:09:53  92  ,gbp_g02
03:09:53  93  ,gbp_g03
03:09:53  94  ,gbp_g04
03:09:53  95  ,gbp_g05
03:09:53  96  ,gbp_g06
03:09:53  97  ,gbp_g07
03:09:53  98  ,gbp_g08
03:09:53  99  ,gbp_g09
03:09:53 100  ,gbp_g10
03:09:53 101  ,gbp_g11
03:09:53 102  ,gbp_g12
03:09:53 103  ,gbp_g13
03:09:53 104  ,gbp_g14
03:09:53 105  ,gbp_g15
03:09:53 106  ,gbp_g16
03:09:53 107  ,gbp_g17
03:09:53 108  ,gbp_g18
03:09:53 109  ,gbp_g19
03:09:53 110  ,gbp_g20
03:09:53 111  ,gbp_g21
03:09:53 112  ,gbp_g22
03:09:53 113  ,gbp_g23
03:09:53 114  ,gbp_g24
03:09:53 115  ,gbp_g25
03:09:53 116  ,gbp_g26
03:09:53 117  ,gbp_g27
03:09:53 118  ,gbp_g28
03:09:53 119  ,gbp_g29
03:09:53 120  ,gbp_g30
03:09:53 121  ,gbp_g31
03:09:53 122  ,gbp_g32
03:09:53 123  ,gbp_g33
03:09:53 124  ,gbp_g34
03:09:53 125  ,gbp_g35
03:09:53 126  ,gbp_g36
03:09:53 127  ,gbp_g37
03:09:53 128  ,gbp_g38
03:09:53 129  ,gbp_g39
03:09:53 130  ,gbp_g40
03:09:53 131  ,gbp_g41
03:09:53 132  ,jpy_g00
03:09:53 133  ,jpy_g01
03:09:53 134  ,jpy_g02
03:09:53 135  ,jpy_g03
03:09:53 136  ,jpy_g04
03:09:53 137  ,jpy_g05
03:09:53 138  ,jpy_g06
03:09:53 139  ,jpy_g07
03:09:53 140  ,jpy_g08
03:09:53 141  ,jpy_g09
03:09:53 142  ,jpy_g10
03:09:53 143  ,jpy_g11
03:09:53 144  ,jpy_g12
03:09:53 145  ,jpy_g13
03:09:53 146  ,jpy_g14
03:09:53 147  ,jpy_g15
03:09:53 148  ,jpy_g16
03:09:53 149  ,jpy_g17
03:09:53 150  ,jpy_g18
03:09:53 151  ,jpy_g19
03:09:53 152  ,jpy_g20
03:09:53 153  ,jpy_g21
03:09:53 154  ,jpy_g22
03:09:53 155  ,jpy_g23
03:09:53 156  ,jpy_g24
03:09:53 157  ,jpy_g25
03:09:53 158  ,jpy_g26
03:09:53 159  ,jpy_g27
03:09:53 160  ,jpy_g28
03:09:53 161  ,jpy_g29
03:09:53 162  ,jpy_g30
03:09:53 163  ,jpy_g31
03:09:53 164  ,jpy_g32
03:09:53 165  ,jpy_g33
03:09:53 166  ,jpy_g34
03:09:53 167  ,jpy_g35
03:09:53 168  ,jpy_g36
03:09:53 169  ,jpy_g37
03:09:53 170  ,jpy_g38
03:09:53 171  ,jpy_g39
03:09:53 172  ,jpy_g40
03:09:53 173  ,jpy_g41
03:09:53 174  ,cad_g00
03:09:53 175  ,cad_g01
03:09:53 176  ,cad_g02
03:09:53 177  ,cad_g03
03:09:53 178  ,cad_g04
03:09:53 179  ,cad_g05
03:09:53 180  ,cad_g06
03:09:53 181  ,cad_g07
03:09:53 182  ,cad_g08
03:09:53 183  ,cad_g09
03:09:53 184  ,cad_g10
03:09:53 185  ,cad_g11
03:09:53 186  ,cad_g12
03:09:53 187  ,cad_g13
03:09:53 188  ,cad_g14
03:09:53 189  ,cad_g15
03:09:53 190  ,cad_g16
03:09:53 191  ,cad_g17
03:09:53 192  ,cad_g18
03:09:53 193  ,cad_g19
03:09:53 194  ,cad_g20
03:09:53 195  ,cad_g21
03:09:53 196  ,cad_g22
03:09:53 197  ,cad_g23
03:09:53 198  ,cad_g24
03:09:53 199  ,cad_g25
03:09:53 200  ,cad_g26
03:09:53 201  ,cad_g27
03:09:53 202  ,cad_g28
03:09:53 203  ,cad_g29
03:09:53 204  ,cad_g30
03:09:53 205  ,cad_g31
03:09:53 206  ,cad_g32
03:09:53 207  ,cad_g33
03:09:53 208  ,cad_g34
03:09:53 209  ,cad_g35
03:09:53 210  ,cad_g36
03:09:53 211  ,cad_g37
03:09:53 212  ,cad_g38
03:09:53 213  ,cad_g39
03:09:53 214  ,cad_g40
03:09:53 215  ,cad_g41
03:09:53 216  ,chf_g00
03:09:53 217  ,chf_g01
03:09:53 218  ,chf_g02
03:09:53 219  ,chf_g03
03:09:53 220  ,chf_g04
03:09:53 221  ,chf_g05
03:09:53 222  ,chf_g06
03:09:53 223  ,chf_g07
03:09:53 224  ,chf_g08
03:09:53 225  ,chf_g09
03:09:53 226  ,chf_g10
03:09:53 227  ,chf_g11
03:09:53 228  ,chf_g12
03:09:53 229  ,chf_g13
03:09:53 230  ,chf_g14
03:09:53 231  ,chf_g15
03:09:53 232  ,chf_g16
03:09:53 233  ,chf_g17
03:09:53 234  ,chf_g18
03:09:53 235  ,chf_g19
03:09:53 236  ,chf_g20
03:09:53 237  ,chf_g21
03:09:53 238  ,chf_g22
03:09:53 239  ,chf_g23
03:09:53 240  ,chf_g24
03:09:53 241  ,chf_g25
03:09:53 242  ,chf_g26
03:09:53 243  ,chf_g27
03:09:53 244  ,chf_g28
03:09:53 245  ,chf_g29
03:09:53 246  ,chf_g30
03:09:53 247  ,chf_g31
03:09:53 248  ,chf_g32
03:09:53 249  ,chf_g33
03:09:53 250  ,chf_g34
03:09:53 251  ,chf_g35
03:09:53 252  ,chf_g36
03:09:53 253  ,chf_g37
03:09:53 254  ,chf_g38
03:09:53 255  ,chf_g39
03:09:53 256  ,chf_g40
03:09:53 257  ,chf_g41
03:09:53 258  FROM aud_ms6 m
03:09:53 259  WHERE gattn IN('nup','up')
03:09:53 260  AND 1+m.ydate < '&1'||' '||'&2'
03:09:53 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2011-01-05'||' '||'02:55:00'

View created.

Elapsed: 00:00:00.17
03:09:53 SQL> 
03:09:53 SQL> -- rpt
03:09:53 SQL> 
03:09:53 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	    12651
up	     6364

Elapsed: 00:00:00.05
03:09:53 SQL> 
03:09:53 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
aud2011-01-04 02:50:00

Elapsed: 00:00:00.03
03:09:53 SQL> 
03:09:53 SQL> -- Now build model from bme and score sme
03:09:53 SQL> @score1gattn.sql
03:09:53 SQL> -- score1gattn.sql
03:09:53 SQL> 
03:09:53 SQL> -- Does the 1st SVM score
03:09:53 SQL> 
03:09:53 SQL> -- Fill up svmc_apply_prep
03:09:53 SQL> @score_gattn.sql
03:09:53 SQL> --
03:09:53 SQL> -- score_gattn.sql
03:09:53 SQL> --
03:09:53 SQL> 
03:09:53 SQL> -- usage: score_gattn.sql
03:09:53 SQL> 
03:09:53 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
03:09:53 SQL> 
03:09:53 SQL> DEFINE target	= 'gattn'
03:09:53 SQL> DEFINE model_name = 'forex15'
03:09:53 SQL> DEFINE bldtable	= 'bme'
03:09:53 SQL> DEFINE scoretable = 'sme'
03:09:53 SQL> DEFINE case_id	= 'prdate'
03:09:53 SQL> 
03:09:53 SQL> -- Define a variable to help me exclude some columns from some data mining calls
03:09:53 SQL> DEFINE exclude1 = "'&target','&case_id'"
03:09:53 SQL> 
03:09:53 SQL> -- Builds an SVM model using pl/sql.
03:09:53 SQL> 
03:09:53 SQL> -----------------------------------------------------------------------
03:09:53 SQL> --			    BUILD THE MODEL
03:09:53 SQL> -----------------------------------------------------------------------
03:09:53 SQL> 
03:09:53 SQL> -- Cleanup old build data preparation objects for repeat runs
03:09:53 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.01
03:09:53 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
03:09:53 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.00
03:09:53 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.00
03:09:53 SQL> 
03:09:53 SQL> 
03:09:53 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
03:09:53 SQL> --
03:09:53 SQL> -- DROP	TABLE svmc_settings ;
03:09:53 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
03:09:53 SQL> -- DELETE svmc_settings;
03:09:53 SQL> 
03:09:53 SQL> -- The default classification algorithm is Naive Bayes. So override
03:09:53 SQL> -- this choice to SVM using a settings table.
03:09:53 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
03:09:53 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
03:09:53 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
03:09:53 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
03:09:53 SQL> -- models.
03:09:53 SQL> --
03:09:53 SQL> 
03:09:53 SQL> -- Do this once and then comment it out.
03:09:53 SQL> -- That makes script go faster.
03:09:53 SQL> -- BEGIN
03:09:53 SQL> -- -- Populate settings table
03:09:53 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
03:09:53 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
03:09:53 SQL> --
03:09:53 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
03:09:53 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
03:09:53 SQL> --
03:09:53 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
03:09:53 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
03:09:53 SQL> --   COMMIT;
03:09:53 SQL> -- END;
03:09:53 SQL> -- /
03:09:53 SQL> 
03:09:53 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
03:09:53 SQL> 
03:09:53 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
03:09:53   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:09:53   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
03:09:53 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
03:09:53   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:09:53   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
03:09:53 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
03:09:53   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:09:53   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
03:09:53 SQL> 
03:09:53 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
03:09:53   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:09:53   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
03:09:53 SQL> 
03:09:53 SQL> --------------------------------
03:09:53 SQL> -- PREPARE BUILD (TRAINING) DATA
03:09:53 SQL> --
03:09:53 SQL> 
03:09:53 SQL> -- 1. Missing Value treatment for all Predictors and
03:09:53 SQL> -- 2. Outlier Treatment and
03:09:53 SQL> -- 3. Normalization are performed below.
03:09:53 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
03:09:53 SQL> --    normalized here.
03:09:53 SQL> 
03:09:53 SQL> BEGIN
03:09:53   2  	-- Perform missing value treatment for all predictors
03:09:53   3  	-- create miss tables
03:09:53   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
03:09:53   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
03:09:53   6  
03:09:53   7  	-- populate miss tables
03:09:53   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
03:09:53   9  	  miss_table_name => 'svmc_miss_num',
03:09:53  10  	  data_table_name => '&bldtable',
03:09:53  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:09:53  12  
03:09:53  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
03:09:53  14  	  miss_table_name => 'svmc_miss_cat',
03:09:53  15  	  data_table_name => '&bldtable',
03:09:53  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:09:53  17  
03:09:53  18  	-- xform input data to replace missing values
03:09:53  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
03:09:53  20  	  miss_table_name => 'svmc_miss_num',
03:09:53  21  	  data_table_name => '&bldtable',
03:09:53  22  	  xform_view_name => 'xformed_build_miss_num');
03:09:53  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
03:09:53  24  	  miss_table_name => 'svmc_miss_cat',
03:09:53  25  	  data_table_name => '&bldtable',
03:09:53  26  	  xform_view_name => 'xformed_build_miss_cat');
03:09:53  27  
03:09:53  28  	-- Perform outlier treatment.
03:09:53  29  	-- create clip table
03:09:53  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
03:09:53  31  
03:09:53  32  	-- populate clip table
03:09:53  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
03:09:53  34  	  clip_table_name => 'svmc_clip',
03:09:53  35  	  data_table_name => '&bldtable',
03:09:53  36  	  tail_frac	  => 0.025,
03:09:53  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:09:53  38  
03:09:53  39  	-- xform input data to winsorized data
03:09:53  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
03:09:53  41  	  clip_table_name => 'svmc_clip',
03:09:53  42  	  data_table_name => '&bldtable',
03:09:53  43  	  xform_view_name => 'svmc_winsor');
03:09:53  44  
03:09:53  45  	-- create normalization table
03:09:53  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
03:09:53  47  
03:09:53  48  	-- populate normalization table based on winsorized data
03:09:53  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
03:09:53  50  	  norm_table_name => 'svmc_norm',
03:09:53  51  	  data_table_name => 'svmc_winsor',
03:09:53  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
03:09:53  53  
03:09:53  54  	-- normalize the original data
03:09:53  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
03:09:53  56  	  norm_table_name => 'svmc_norm',
03:09:53  57  	  data_table_name => '&bldtable',
03:09:53  58  	  xform_view_name => 'svmc_build_prep');
03:09:53  59  END;
03:09:53  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:18.15
03:10:11 SQL> 
03:10:11 SQL> ---------------------
03:10:11 SQL> -- CREATE A NEW MODEL
03:10:11 SQL> --
03:10:11 SQL> -- Cleanup old model with the same name for repeat runs
03:10:11 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
03:10:11   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:10:11   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex15');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.03
03:10:12 SQL> 
03:10:12 SQL> -- Build a new SVM Model
03:10:12 SQL> BEGIN
03:10:12   2  	DBMS_DATA_MINING.CREATE_MODEL(
03:10:12   3  	  model_name	      => '&model_name',
03:10:12   4  	  mining_function     => dbms_data_mining.classification,
03:10:12   5  	  data_table_name     => 'svmc_build_prep',
03:10:12   6  	  case_id_column_name => '&case_id',
03:10:12   7  	  target_column_name  => '&target',
03:10:12   8  	  settings_table_name => 'svmc_settings');
03:10:12   9  END;
03:10:12  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex15',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:27.60
03:10:40 SQL> 
03:10:40 SQL> -----------------------------------------------------------------------
03:10:40 SQL> --			       APPLY/score THE MODEL
03:10:40 SQL> -----------------------------------------------------------------------
03:10:40 SQL> 
03:10:40 SQL> -- Cleanup old scoring data preparation objects for repeat runs
03:10:40 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
03:10:40   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:10:40   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
03:10:40 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
03:10:40   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:10:40   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
03:10:40 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
03:10:40   2  EXCEPTION WHEN OTHERS THEN NULL; END;
03:10:40   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
03:10:40 SQL> -----------------------
03:10:40 SQL> -- PREPARE SCORING DATA
03:10:40 SQL> --
03:10:40 SQL> -- If the data for model creation has been prepared, then the data
03:10:40 SQL> -- to be scored using the model must be prepared in the same manner
03:10:40 SQL> -- in order to obtain meaningful results.
03:10:40 SQL> --
03:10:40 SQL> -- 1. Missing Value treatment for all Predictors and
03:10:40 SQL> -- 2. Normalization
03:10:40 SQL> -- No outlier treatment will be performed during test and apply. The
03:10:40 SQL> -- normalization step is sufficient, since the normalization parameters
03:10:40 SQL> -- already capture the effects of outlier treatment done with build data.
03:10:40 SQL> --
03:10:40 SQL> BEGIN
03:10:40   2  	-- Xform Test data to replace missing values
03:10:40   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
03:10:40   4  	  miss_table_name => 'svmc_miss_num',
03:10:40   5  	  data_table_name => '&scoretable',
03:10:40   6  	  xform_view_name => 'xformed_apply_miss_num');
03:10:40   7  
03:10:40   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
03:10:40   9  	  miss_table_name => 'svmc_miss_cat',
03:10:40  10  	  data_table_name => '&scoretable',
03:10:40  11  	  xform_view_name => 'xformed_apply_miss_cat');
03:10:40  12  
03:10:40  13  	-- Normalize the data to be scored
03:10:40  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
03:10:40  15  	  norm_table_name => 'svmc_norm',
03:10:40  16  	  data_table_name => '&scoretable',
03:10:40  17  	  xform_view_name => 'svmc_apply_prep');
03:10:40  18  END;
03:10:40  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.30
03:10:42 SQL> 
03:10:42 SQL> -- Use same model_name used in score_gattn.sql
03:10:42 SQL> DEFINE model_name = 'forex15'
03:10:42 SQL> 
03:10:42 SQL> DELETE fxscores6_gattn WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.04
03:10:42 SQL> 
03:10:42 SQL> INSERT INTO fxscores6_gattn (prdate,score,rundate,pair,ydate)
03:10:42   2  SELECT
03:10:42   3  prdate
03:10:42   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
03:10:42   5  ,sysdate
03:10:42   6  ,SUBSTR(prdate,1,3)pair
03:10:42   7  ,SUBSTR(prdate,4,19)ydate
03:10:42   8  FROM svmc_apply_prep
03:10:42   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex15,'up' USING *)score

1 row created.

Elapsed: 00:00:00.17
03:10:42 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
