
SQL*Plus: Release 11.2.0.1.0 Production on Thu Jan 6 10:44:33 2011

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

10:44:33 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
10:44:33 SQL> 10:44:33 SQL> @aud_score1day.sql  2011-01-06 10:20:00
10:44:33 SQL> --
10:44:33 SQL> -- aud_score1day.sql
10:44:33 SQL> --
10:44:33 SQL> 
10:44:33 SQL> CREATE OR REPLACE VIEW sme AS
10:44:33   2  SELECT
10:44:33   3  'aud'||m.ydate prdate
10:44:33   4  ,NULL gatt
10:44:33   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
10:44:33   6  ,eur_g00
10:44:33   7  ,eur_g01
10:44:33   8  ,eur_g02
10:44:33   9  ,eur_g03
10:44:33  10  ,eur_g04
10:44:33  11  ,eur_g05
10:44:33  12  ,eur_g06
10:44:33  13  ,eur_g07
10:44:33  14  ,eur_g08
10:44:33  15  ,eur_g09
10:44:33  16  ,eur_g10
10:44:33  17  ,eur_g11
10:44:33  18  ,eur_g12
10:44:33  19  ,eur_g13
10:44:33  20  ,eur_g14
10:44:33  21  ,eur_g15
10:44:33  22  ,eur_g16
10:44:33  23  ,eur_g17
10:44:33  24  ,eur_g18
10:44:33  25  ,eur_g19
10:44:33  26  ,eur_g20
10:44:33  27  ,eur_g21
10:44:33  28  ,eur_g22
10:44:33  29  ,eur_g23
10:44:33  30  ,eur_g24
10:44:33  31  ,eur_g25
10:44:33  32  ,eur_g26
10:44:33  33  ,eur_g27
10:44:33  34  ,eur_g28
10:44:33  35  ,eur_g29
10:44:33  36  ,eur_g30
10:44:33  37  ,eur_g31
10:44:33  38  ,eur_g32
10:44:33  39  ,eur_g33
10:44:33  40  ,eur_g34
10:44:33  41  ,eur_g35
10:44:33  42  ,eur_g36
10:44:33  43  ,eur_g37
10:44:33  44  ,eur_g38
10:44:33  45  ,eur_g39
10:44:33  46  ,eur_g40
10:44:33  47  ,eur_g41
10:44:33  48  ,aud_g00
10:44:33  49  ,aud_g01
10:44:33  50  ,aud_g02
10:44:33  51  ,aud_g03
10:44:33  52  ,aud_g04
10:44:33  53  ,aud_g05
10:44:33  54  ,aud_g06
10:44:33  55  ,aud_g07
10:44:33  56  ,aud_g08
10:44:33  57  ,aud_g09
10:44:33  58  ,aud_g10
10:44:33  59  ,aud_g11
10:44:33  60  ,aud_g12
10:44:33  61  ,aud_g13
10:44:33  62  ,aud_g14
10:44:33  63  ,aud_g15
10:44:33  64  ,aud_g16
10:44:33  65  ,aud_g17
10:44:33  66  ,aud_g18
10:44:33  67  ,aud_g19
10:44:33  68  ,aud_g20
10:44:33  69  ,aud_g21
10:44:33  70  ,aud_g22
10:44:33  71  ,aud_g23
10:44:33  72  ,aud_g24
10:44:33  73  ,aud_g25
10:44:33  74  ,aud_g26
10:44:33  75  ,aud_g27
10:44:33  76  ,aud_g28
10:44:33  77  ,aud_g29
10:44:33  78  ,aud_g30
10:44:33  79  ,aud_g31
10:44:33  80  ,aud_g32
10:44:33  81  ,aud_g33
10:44:33  82  ,aud_g34
10:44:33  83  ,aud_g35
10:44:33  84  ,aud_g36
10:44:33  85  ,aud_g37
10:44:33  86  ,aud_g38
10:44:33  87  ,aud_g39
10:44:33  88  ,aud_g40
10:44:33  89  ,aud_g41
10:44:33  90  ,gbp_g00
10:44:33  91  ,gbp_g01
10:44:33  92  ,gbp_g02
10:44:33  93  ,gbp_g03
10:44:33  94  ,gbp_g04
10:44:33  95  ,gbp_g05
10:44:33  96  ,gbp_g06
10:44:33  97  ,gbp_g07
10:44:33  98  ,gbp_g08
10:44:33  99  ,gbp_g09
10:44:33 100  ,gbp_g10
10:44:33 101  ,gbp_g11
10:44:33 102  ,gbp_g12
10:44:33 103  ,gbp_g13
10:44:33 104  ,gbp_g14
10:44:33 105  ,gbp_g15
10:44:33 106  ,gbp_g16
10:44:33 107  ,gbp_g17
10:44:33 108  ,gbp_g18
10:44:33 109  ,gbp_g19
10:44:33 110  ,gbp_g20
10:44:33 111  ,gbp_g21
10:44:33 112  ,gbp_g22
10:44:33 113  ,gbp_g23
10:44:33 114  ,gbp_g24
10:44:33 115  ,gbp_g25
10:44:33 116  ,gbp_g26
10:44:33 117  ,gbp_g27
10:44:33 118  ,gbp_g28
10:44:33 119  ,gbp_g29
10:44:33 120  ,gbp_g30
10:44:33 121  ,gbp_g31
10:44:33 122  ,gbp_g32
10:44:33 123  ,gbp_g33
10:44:33 124  ,gbp_g34
10:44:33 125  ,gbp_g35
10:44:33 126  ,gbp_g36
10:44:33 127  ,gbp_g37
10:44:33 128  ,gbp_g38
10:44:33 129  ,gbp_g39
10:44:33 130  ,gbp_g40
10:44:33 131  ,gbp_g41
10:44:33 132  ,jpy_g00
10:44:33 133  ,jpy_g01
10:44:33 134  ,jpy_g02
10:44:33 135  ,jpy_g03
10:44:33 136  ,jpy_g04
10:44:33 137  ,jpy_g05
10:44:33 138  ,jpy_g06
10:44:33 139  ,jpy_g07
10:44:33 140  ,jpy_g08
10:44:33 141  ,jpy_g09
10:44:33 142  ,jpy_g10
10:44:33 143  ,jpy_g11
10:44:33 144  ,jpy_g12
10:44:33 145  ,jpy_g13
10:44:33 146  ,jpy_g14
10:44:33 147  ,jpy_g15
10:44:33 148  ,jpy_g16
10:44:33 149  ,jpy_g17
10:44:33 150  ,jpy_g18
10:44:33 151  ,jpy_g19
10:44:33 152  ,jpy_g20
10:44:33 153  ,jpy_g21
10:44:33 154  ,jpy_g22
10:44:33 155  ,jpy_g23
10:44:33 156  ,jpy_g24
10:44:33 157  ,jpy_g25
10:44:33 158  ,jpy_g26
10:44:33 159  ,jpy_g27
10:44:33 160  ,jpy_g28
10:44:33 161  ,jpy_g29
10:44:33 162  ,jpy_g30
10:44:33 163  ,jpy_g31
10:44:33 164  ,jpy_g32
10:44:33 165  ,jpy_g33
10:44:33 166  ,jpy_g34
10:44:33 167  ,jpy_g35
10:44:33 168  ,jpy_g36
10:44:33 169  ,jpy_g37
10:44:33 170  ,jpy_g38
10:44:33 171  ,jpy_g39
10:44:33 172  ,jpy_g40
10:44:33 173  ,jpy_g41
10:44:33 174  ,cad_g00
10:44:33 175  ,cad_g01
10:44:33 176  ,cad_g02
10:44:33 177  ,cad_g03
10:44:33 178  ,cad_g04
10:44:33 179  ,cad_g05
10:44:33 180  ,cad_g06
10:44:33 181  ,cad_g07
10:44:33 182  ,cad_g08
10:44:33 183  ,cad_g09
10:44:33 184  ,cad_g10
10:44:33 185  ,cad_g11
10:44:33 186  ,cad_g12
10:44:33 187  ,cad_g13
10:44:33 188  ,cad_g14
10:44:33 189  ,cad_g15
10:44:33 190  ,cad_g16
10:44:33 191  ,cad_g17
10:44:33 192  ,cad_g18
10:44:33 193  ,cad_g19
10:44:33 194  ,cad_g20
10:44:33 195  ,cad_g21
10:44:33 196  ,cad_g22
10:44:33 197  ,cad_g23
10:44:33 198  ,cad_g24
10:44:33 199  ,cad_g25
10:44:33 200  ,cad_g26
10:44:33 201  ,cad_g27
10:44:33 202  ,cad_g28
10:44:33 203  ,cad_g29
10:44:33 204  ,cad_g30
10:44:33 205  ,cad_g31
10:44:33 206  ,cad_g32
10:44:33 207  ,cad_g33
10:44:33 208  ,cad_g34
10:44:33 209  ,cad_g35
10:44:33 210  ,cad_g36
10:44:33 211  ,cad_g37
10:44:33 212  ,cad_g38
10:44:33 213  ,cad_g39
10:44:33 214  ,cad_g40
10:44:33 215  ,cad_g41
10:44:33 216  ,chf_g00
10:44:33 217  ,chf_g01
10:44:33 218  ,chf_g02
10:44:33 219  ,chf_g03
10:44:33 220  ,chf_g04
10:44:33 221  ,chf_g05
10:44:33 222  ,chf_g06
10:44:33 223  ,chf_g07
10:44:33 224  ,chf_g08
10:44:33 225  ,chf_g09
10:44:33 226  ,chf_g10
10:44:33 227  ,chf_g11
10:44:33 228  ,chf_g12
10:44:33 229  ,chf_g13
10:44:33 230  ,chf_g14
10:44:33 231  ,chf_g15
10:44:33 232  ,chf_g16
10:44:33 233  ,chf_g17
10:44:33 234  ,chf_g18
10:44:33 235  ,chf_g19
10:44:33 236  ,chf_g20
10:44:33 237  ,chf_g21
10:44:33 238  ,chf_g22
10:44:33 239  ,chf_g23
10:44:33 240  ,chf_g24
10:44:33 241  ,chf_g25
10:44:33 242  ,chf_g26
10:44:33 243  ,chf_g27
10:44:33 244  ,chf_g28
10:44:33 245  ,chf_g29
10:44:33 246  ,chf_g30
10:44:33 247  ,chf_g31
10:44:33 248  ,chf_g32
10:44:33 249  ,chf_g33
10:44:33 250  ,chf_g34
10:44:33 251  ,chf_g35
10:44:33 252  ,chf_g36
10:44:33 253  ,chf_g37
10:44:33 254  ,chf_g38
10:44:33 255  ,chf_g39
10:44:33 256  ,chf_g40
10:44:33 257  ,chf_g41
10:44:33 258  FROM aud_ms6 m
10:44:33 259  WHERE m.ydate = '&1'||' '||'&2'
10:44:33 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2011-01-06'||' '||'10:20:00'

View created.

Elapsed: 00:00:00.12
10:44:33 SQL> 
10:44:33 SQL> -- rpt
10:44:33 SQL> -- We should see just 1 row:
10:44:33 SQL> 
10:44:33 SQL> SELECT COUNT(prdate) FROM sme
10:44:33   2  
10:44:33 SQL> -- Build the model:
10:44:33 SQL> CREATE OR REPLACE VIEW bme AS
10:44:33   2  SELECT
10:44:33   3  'aud'||m.ydate prdate
10:44:33   4  ,gatt
10:44:33   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
10:44:33   6  ,eur_g00
10:44:33   7  ,eur_g01
10:44:33   8  ,eur_g02
10:44:33   9  ,eur_g03
10:44:33  10  ,eur_g04
10:44:33  11  ,eur_g05
10:44:33  12  ,eur_g06
10:44:33  13  ,eur_g07
10:44:33  14  ,eur_g08
10:44:33  15  ,eur_g09
10:44:33  16  ,eur_g10
10:44:33  17  ,eur_g11
10:44:33  18  ,eur_g12
10:44:33  19  ,eur_g13
10:44:33  20  ,eur_g14
10:44:33  21  ,eur_g15
10:44:33  22  ,eur_g16
10:44:33  23  ,eur_g17
10:44:33  24  ,eur_g18
10:44:33  25  ,eur_g19
10:44:33  26  ,eur_g20
10:44:33  27  ,eur_g21
10:44:33  28  ,eur_g22
10:44:33  29  ,eur_g23
10:44:33  30  ,eur_g24
10:44:33  31  ,eur_g25
10:44:33  32  ,eur_g26
10:44:33  33  ,eur_g27
10:44:33  34  ,eur_g28
10:44:33  35  ,eur_g29
10:44:33  36  ,eur_g30
10:44:33  37  ,eur_g31
10:44:33  38  ,eur_g32
10:44:33  39  ,eur_g33
10:44:33  40  ,eur_g34
10:44:33  41  ,eur_g35
10:44:33  42  ,eur_g36
10:44:33  43  ,eur_g37
10:44:33  44  ,eur_g38
10:44:33  45  ,eur_g39
10:44:33  46  ,eur_g40
10:44:33  47  ,eur_g41
10:44:33  48  ,aud_g00
10:44:33  49  ,aud_g01
10:44:33  50  ,aud_g02
10:44:33  51  ,aud_g03
10:44:33  52  ,aud_g04
10:44:33  53  ,aud_g05
10:44:33  54  ,aud_g06
10:44:33  55  ,aud_g07
10:44:33  56  ,aud_g08
10:44:33  57  ,aud_g09
10:44:33  58  ,aud_g10
10:44:33  59  ,aud_g11
10:44:33  60  ,aud_g12
10:44:33  61  ,aud_g13
10:44:33  62  ,aud_g14
10:44:33  63  ,aud_g15
10:44:33  64  ,aud_g16
10:44:33  65  ,aud_g17
10:44:33  66  ,aud_g18
10:44:33  67  ,aud_g19
10:44:33  68  ,aud_g20
10:44:33  69  ,aud_g21
10:44:33  70  ,aud_g22
10:44:33  71  ,aud_g23
10:44:33  72  ,aud_g24
10:44:33  73  ,aud_g25
10:44:33  74  ,aud_g26
10:44:33  75  ,aud_g27
10:44:33  76  ,aud_g28
10:44:33  77  ,aud_g29
10:44:33  78  ,aud_g30
10:44:33  79  ,aud_g31
10:44:33  80  ,aud_g32
10:44:33  81  ,aud_g33
10:44:33  82  ,aud_g34
10:44:33  83  ,aud_g35
10:44:33  84  ,aud_g36
10:44:33  85  ,aud_g37
10:44:33  86  ,aud_g38
10:44:33  87  ,aud_g39
10:44:33  88  ,aud_g40
10:44:33  89  ,aud_g41
10:44:33  90  ,gbp_g00
10:44:33  91  ,gbp_g01
10:44:33  92  ,gbp_g02
10:44:33  93  ,gbp_g03
10:44:33  94  ,gbp_g04
10:44:33  95  ,gbp_g05
10:44:33  96  ,gbp_g06
10:44:33  97  ,gbp_g07
10:44:33  98  ,gbp_g08
10:44:33  99  ,gbp_g09
10:44:33 100  ,gbp_g10
10:44:33 101  ,gbp_g11
10:44:33 102  ,gbp_g12
10:44:33 103  ,gbp_g13
10:44:33 104  ,gbp_g14
10:44:33 105  ,gbp_g15
10:44:33 106  ,gbp_g16
10:44:33 107  ,gbp_g17
10:44:33 108  ,gbp_g18
10:44:33 109  ,gbp_g19
10:44:33 110  ,gbp_g20
10:44:33 111  ,gbp_g21
10:44:33 112  ,gbp_g22
10:44:33 113  ,gbp_g23
10:44:33 114  ,gbp_g24
10:44:33 115  ,gbp_g25
10:44:33 116  ,gbp_g26
10:44:33 117  ,gbp_g27
10:44:33 118  ,gbp_g28
10:44:33 119  ,gbp_g29
10:44:33 120  ,gbp_g30
10:44:33 121  ,gbp_g31
10:44:33 122  ,gbp_g32
10:44:33 123  ,gbp_g33
10:44:33 124  ,gbp_g34
10:44:33 125  ,gbp_g35
10:44:33 126  ,gbp_g36
10:44:33 127  ,gbp_g37
10:44:33 128  ,gbp_g38
10:44:33 129  ,gbp_g39
10:44:33 130  ,gbp_g40
10:44:33 131  ,gbp_g41
10:44:33 132  ,jpy_g00
10:44:33 133  ,jpy_g01
10:44:33 134  ,jpy_g02
10:44:33 135  ,jpy_g03
10:44:33 136  ,jpy_g04
10:44:33 137  ,jpy_g05
10:44:33 138  ,jpy_g06
10:44:33 139  ,jpy_g07
10:44:33 140  ,jpy_g08
10:44:33 141  ,jpy_g09
10:44:33 142  ,jpy_g10
10:44:33 143  ,jpy_g11
10:44:33 144  ,jpy_g12
10:44:33 145  ,jpy_g13
10:44:33 146  ,jpy_g14
10:44:33 147  ,jpy_g15
10:44:33 148  ,jpy_g16
10:44:33 149  ,jpy_g17
10:44:33 150  ,jpy_g18
10:44:33 151  ,jpy_g19
10:44:33 152  ,jpy_g20
10:44:33 153  ,jpy_g21
10:44:33 154  ,jpy_g22
10:44:33 155  ,jpy_g23
10:44:33 156  ,jpy_g24
10:44:33 157  ,jpy_g25
10:44:33 158  ,jpy_g26
10:44:33 159  ,jpy_g27
10:44:33 160  ,jpy_g28
10:44:33 161  ,jpy_g29
10:44:33 162  ,jpy_g30
10:44:33 163  ,jpy_g31
10:44:33 164  ,jpy_g32
10:44:33 165  ,jpy_g33
10:44:33 166  ,jpy_g34
10:44:33 167  ,jpy_g35
10:44:33 168  ,jpy_g36
10:44:33 169  ,jpy_g37
10:44:33 170  ,jpy_g38
10:44:33 171  ,jpy_g39
10:44:33 172  ,jpy_g40
10:44:33 173  ,jpy_g41
10:44:33 174  ,cad_g00
10:44:33 175  ,cad_g01
10:44:33 176  ,cad_g02
10:44:33 177  ,cad_g03
10:44:33 178  ,cad_g04
10:44:33 179  ,cad_g05
10:44:33 180  ,cad_g06
10:44:33 181  ,cad_g07
10:44:33 182  ,cad_g08
10:44:33 183  ,cad_g09
10:44:33 184  ,cad_g10
10:44:33 185  ,cad_g11
10:44:33 186  ,cad_g12
10:44:33 187  ,cad_g13
10:44:33 188  ,cad_g14
10:44:33 189  ,cad_g15
10:44:33 190  ,cad_g16
10:44:33 191  ,cad_g17
10:44:33 192  ,cad_g18
10:44:33 193  ,cad_g19
10:44:33 194  ,cad_g20
10:44:33 195  ,cad_g21
10:44:33 196  ,cad_g22
10:44:33 197  ,cad_g23
10:44:33 198  ,cad_g24
10:44:33 199  ,cad_g25
10:44:33 200  ,cad_g26
10:44:33 201  ,cad_g27
10:44:33 202  ,cad_g28
10:44:33 203  ,cad_g29
10:44:33 204  ,cad_g30
10:44:33 205  ,cad_g31
10:44:33 206  ,cad_g32
10:44:33 207  ,cad_g33
10:44:33 208  ,cad_g34
10:44:33 209  ,cad_g35
10:44:33 210  ,cad_g36
10:44:33 211  ,cad_g37
10:44:33 212  ,cad_g38
10:44:33 213  ,cad_g39
10:44:33 214  ,cad_g40
10:44:33 215  ,cad_g41
10:44:33 216  ,chf_g00
10:44:33 217  ,chf_g01
10:44:33 218  ,chf_g02
10:44:33 219  ,chf_g03
10:44:33 220  ,chf_g04
10:44:33 221  ,chf_g05
10:44:33 222  ,chf_g06
10:44:33 223  ,chf_g07
10:44:33 224  ,chf_g08
10:44:33 225  ,chf_g09
10:44:33 226  ,chf_g10
10:44:33 227  ,chf_g11
10:44:33 228  ,chf_g12
10:44:33 229  ,chf_g13
10:44:33 230  ,chf_g14
10:44:33 231  ,chf_g15
10:44:33 232  ,chf_g16
10:44:33 233  ,chf_g17
10:44:33 234  ,chf_g18
10:44:33 235  ,chf_g19
10:44:33 236  ,chf_g20
10:44:33 237  ,chf_g21
10:44:33 238  ,chf_g22
10:44:33 239  ,chf_g23
10:44:33 240  ,chf_g24
10:44:33 241  ,chf_g25
10:44:33 242  ,chf_g26
10:44:33 243  ,chf_g27
10:44:33 244  ,chf_g28
10:44:33 245  ,chf_g29
10:44:33 246  ,chf_g30
10:44:33 247  ,chf_g31
10:44:33 248  ,chf_g32
10:44:33 249  ,chf_g33
10:44:33 250  ,chf_g34
10:44:33 251  ,chf_g35
10:44:33 252  ,chf_g36
10:44:33 253  ,chf_g37
10:44:33 254  ,chf_g38
10:44:33 255  ,chf_g39
10:44:33 256  ,chf_g40
10:44:33 257  ,chf_g41
10:44:33 258  FROM aud_ms6 m
10:44:33 259  WHERE gatt IN('nup','up')
10:44:33 260  AND 1+m.ydate < '&1'||' '||'&2'
10:44:33 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2011-01-06'||' '||'10:20:00'

View created.

Elapsed: 00:00:00.13
10:44:34 SQL> 
10:44:34 SQL> -- rpt
10:44:34 SQL> 
10:44:34 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt
10:44:34   2  
10:44:34 SQL> SELECT MAX(prdate) FROM bme
10:44:34   2  
10:44:34 SQL> -- Now build model from bme and score sme
10:44:34 SQL> @score1.sql
10:44:34 SQL> -- score1.sql
10:44:34 SQL> 
10:44:34 SQL> -- Does the 1st SVM score
10:44:34 SQL> 
10:44:34 SQL> -- Fill up svmc_apply_prep
10:44:34 SQL> @score.sql
10:44:34 SQL> --
10:44:34 SQL> -- score.sql
10:44:34 SQL> --
10:44:34 SQL> 
10:44:34 SQL> -- usage: score.sql
10:44:34 SQL> 
10:44:34 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
10:44:34 SQL> 
10:44:34 SQL> DEFINE target	= 'gatt'
10:44:34 SQL> DEFINE model_name = 'forex15'
10:44:34 SQL> DEFINE bldtable	= 'bme'
10:44:34 SQL> DEFINE scoretable = 'sme'
10:44:34 SQL> DEFINE case_id	= 'prdate'
10:44:34 SQL> 
10:44:34 SQL> -- Define a variable to help me exclude some columns from some data mining calls
10:44:34 SQL> DEFINE exclude1 = "'&target','&case_id'"
10:44:34 SQL> 
10:44:34 SQL> -- Builds an SVM model using pl/sql.
10:44:34 SQL> 
10:44:34 SQL> -----------------------------------------------------------------------
10:44:34 SQL> --			    BUILD THE MODEL
10:44:34 SQL> -----------------------------------------------------------------------
10:44:34 SQL> 
10:44:34 SQL> -- Cleanup old build data preparation objects for repeat runs
10:44:34 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.00
10:44:34 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
10:44:34 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.00
10:44:34 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.01
10:44:34 SQL> 
10:44:34 SQL> 
10:44:34 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
10:44:34 SQL> --
10:44:34 SQL> -- DROP	TABLE svmc_settings ;
10:44:34 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
10:44:34 SQL> -- DELETE svmc_settings;
10:44:34 SQL> 
10:44:34 SQL> -- The default classification algorithm is Naive Bayes. So override
10:44:34 SQL> -- this choice to SVM using a settings table.
10:44:34 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
10:44:34 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
10:44:34 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
10:44:34 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
10:44:34 SQL> -- models.
10:44:34 SQL> --
10:44:34 SQL> 
10:44:34 SQL> -- Do this once and then comment it out.
10:44:34 SQL> -- That makes script go faster.
10:44:34 SQL> -- BEGIN
10:44:34 SQL> -- -- Populate settings table
10:44:34 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
10:44:34 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
10:44:34 SQL> --
10:44:34 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
10:44:34 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
10:44:34 SQL> --
10:44:34 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
10:44:34 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
10:44:34 SQL> --   COMMIT;
10:44:34 SQL> -- END;
10:44:34 SQL> -- /
10:44:34 SQL> 
10:44:34 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
10:44:34 SQL> 
10:44:34 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
10:44:34   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:44:34   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.11
10:44:34 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
10:44:34   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:44:34   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
10:44:34 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
10:44:34   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:44:34   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.09
10:44:34 SQL> 
10:44:34 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
10:44:34   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:44:34   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
10:44:34 SQL> 
10:44:34 SQL> --------------------------------
10:44:34 SQL> -- PREPARE BUILD (TRAINING) DATA
10:44:34 SQL> --
10:44:34 SQL> 
10:44:34 SQL> -- 1. Missing Value treatment for all Predictors and
10:44:34 SQL> -- 2. Outlier Treatment and
10:44:34 SQL> -- 3. Normalization are performed below.
10:44:34 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
10:44:34 SQL> --    normalized here.
10:44:34 SQL> 
10:44:34 SQL> BEGIN
10:44:34   2  	-- Perform missing value treatment for all predictors
10:44:34   3  	-- create miss tables
10:44:34   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
10:44:34   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
10:44:34   6  
10:44:34   7  	-- populate miss tables
10:44:34   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
10:44:34   9  	  miss_table_name => 'svmc_miss_num',
10:44:34  10  	  data_table_name => '&bldtable',
10:44:34  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:44:34  12  
10:44:34  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
10:44:34  14  	  miss_table_name => 'svmc_miss_cat',
10:44:34  15  	  data_table_name => '&bldtable',
10:44:34  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:44:34  17  
10:44:34  18  	-- xform input data to replace missing values
10:44:34  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
10:44:34  20  	  miss_table_name => 'svmc_miss_num',
10:44:34  21  	  data_table_name => '&bldtable',
10:44:34  22  	  xform_view_name => 'xformed_build_miss_num');
10:44:34  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
10:44:34  24  	  miss_table_name => 'svmc_miss_cat',
10:44:34  25  	  data_table_name => '&bldtable',
10:44:34  26  	  xform_view_name => 'xformed_build_miss_cat');
10:44:34  27  
10:44:34  28  	-- Perform outlier treatment.
10:44:34  29  	-- create clip table
10:44:34  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
10:44:34  31  
10:44:34  32  	-- populate clip table
10:44:34  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
10:44:34  34  	  clip_table_name => 'svmc_clip',
10:44:34  35  	  data_table_name => '&bldtable',
10:44:34  36  	  tail_frac	  => 0.025,
10:44:34  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:44:34  38  
10:44:34  39  	-- xform input data to winsorized data
10:44:34  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
10:44:34  41  	  clip_table_name => 'svmc_clip',
10:44:34  42  	  data_table_name => '&bldtable',
10:44:34  43  	  xform_view_name => 'svmc_winsor');
10:44:34  44  
10:44:34  45  	-- create normalization table
10:44:34  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
10:44:34  47  
10:44:34  48  	-- populate normalization table based on winsorized data
10:44:34  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
10:44:34  50  	  norm_table_name => 'svmc_norm',
10:44:34  51  	  data_table_name => 'svmc_winsor',
10:44:34  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:44:34  53  
10:44:34  54  	-- normalize the original data
10:44:34  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
10:44:34  56  	  norm_table_name => 'svmc_norm',
10:44:34  57  	  data_table_name => '&bldtable',
10:44:34  58  	  xform_view_name => 'svmc_build_prep');
10:44:34  59  END;
10:44:34  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:18.82
10:44:53 SQL> 
10:44:53 SQL> ---------------------
10:44:53 SQL> -- CREATE A NEW MODEL
10:44:53 SQL> --
10:44:53 SQL> -- Cleanup old model with the same name for repeat runs
10:44:53 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
10:44:53   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:44:53   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex15');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.59
10:44:53 SQL> 
10:44:53 SQL> -- Build a new SVM Model
10:44:53 SQL> BEGIN
10:44:53   2  	DBMS_DATA_MINING.CREATE_MODEL(
10:44:53   3  	  model_name	      => '&model_name',
10:44:53   4  	  mining_function     => dbms_data_mining.classification,
10:44:53   5  	  data_table_name     => 'svmc_build_prep',
10:44:53   6  	  case_id_column_name => '&case_id',
10:44:53   7  	  target_column_name  => '&target',
10:44:53   8  	  settings_table_name => 'svmc_settings');
10:44:53   9  END;
10:44:53  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex15',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:28.90
10:45:22 SQL> 
10:45:22 SQL> -----------------------------------------------------------------------
10:45:22 SQL> --			       APPLY/score THE MODEL
10:45:22 SQL> -----------------------------------------------------------------------
10:45:22 SQL> 
10:45:22 SQL> -- Cleanup old scoring data preparation objects for repeat runs
10:45:22 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
10:45:22   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:45:22   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
10:45:22 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
10:45:22   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:45:22   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
10:45:22 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
10:45:22   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:45:22   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.09
10:45:22 SQL> -----------------------
10:45:22 SQL> -- PREPARE SCORING DATA
10:45:22 SQL> --
10:45:22 SQL> -- If the data for model creation has been prepared, then the data
10:45:22 SQL> -- to be scored using the model must be prepared in the same manner
10:45:22 SQL> -- in order to obtain meaningful results.
10:45:22 SQL> --
10:45:22 SQL> -- 1. Missing Value treatment for all Predictors and
10:45:22 SQL> -- 2. Normalization
10:45:22 SQL> -- No outlier treatment will be performed during test and apply. The
10:45:22 SQL> -- normalization step is sufficient, since the normalization parameters
10:45:22 SQL> -- already capture the effects of outlier treatment done with build data.
10:45:22 SQL> --
10:45:22 SQL> BEGIN
10:45:22   2  	-- Xform Test data to replace missing values
10:45:22   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
10:45:22   4  	  miss_table_name => 'svmc_miss_num',
10:45:22   5  	  data_table_name => '&scoretable',
10:45:22   6  	  xform_view_name => 'xformed_apply_miss_num');
10:45:22   7  
10:45:22   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
10:45:22   9  	  miss_table_name => 'svmc_miss_cat',
10:45:22  10  	  data_table_name => '&scoretable',
10:45:22  11  	  xform_view_name => 'xformed_apply_miss_cat');
10:45:22  12  
10:45:22  13  	-- Normalize the data to be scored
10:45:22  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
10:45:22  15  	  norm_table_name => 'svmc_norm',
10:45:22  16  	  data_table_name => '&scoretable',
10:45:22  17  	  xform_view_name => 'svmc_apply_prep');
10:45:22  18  END;
10:45:22  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.39
10:45:24 SQL> 
10:45:24 SQL> -- Use same model_name used in score.sql
10:45:24 SQL> DEFINE model_name = 'forex15'
10:45:24 SQL> 
10:45:24 SQL> -- CREATE TABLE fxscores6 (prdate VARCHAR2(30),score NUMBER,rundate DATE,pair VARCHAR2(8),ydate DATE);
10:45:24 SQL> 
10:45:24 SQL> DELETE fxscores6 WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.04
10:45:24 SQL> 
10:45:24 SQL> INSERT INTO fxscores6 (prdate,score,rundate,pair,ydate)
10:45:24   2  SELECT
10:45:24   3  prdate
10:45:24   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
10:45:24   5  ,sysdate
10:45:24   6  ,SUBSTR(prdate,1,3)pair
10:45:24   7  ,SUBSTR(prdate,4,19)ydate
10:45:24   8  FROM svmc_apply_prep
10:45:24   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex15,'up' USING *)score

1 row created.

Elapsed: 00:00:00.19
10:45:24 SQL> @aud_score1day.sql  2011-01-06 10:25:00
10:45:24 SQL> --
10:45:24 SQL> -- aud_score1day.sql
10:45:24 SQL> --
10:45:24 SQL> 
10:45:24 SQL> CREATE OR REPLACE VIEW sme AS
10:45:24   2  SELECT
10:45:24   3  'aud'||m.ydate prdate
10:45:24   4  ,NULL gatt
10:45:24   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
10:45:24   6  ,eur_g00
10:45:24   7  ,eur_g01
10:45:24   8  ,eur_g02
10:45:24   9  ,eur_g03
10:45:24  10  ,eur_g04
10:45:24  11  ,eur_g05
10:45:24  12  ,eur_g06
10:45:24  13  ,eur_g07
10:45:24  14  ,eur_g08
10:45:24  15  ,eur_g09
10:45:24  16  ,eur_g10
10:45:24  17  ,eur_g11
10:45:24  18  ,eur_g12
10:45:24  19  ,eur_g13
10:45:24  20  ,eur_g14
10:45:24  21  ,eur_g15
10:45:24  22  ,eur_g16
10:45:24  23  ,eur_g17
10:45:24  24  ,eur_g18
10:45:24  25  ,eur_g19
10:45:24  26  ,eur_g20
10:45:24  27  ,eur_g21
10:45:24  28  ,eur_g22
10:45:24  29  ,eur_g23
10:45:24  30  ,eur_g24
10:45:24  31  ,eur_g25
10:45:24  32  ,eur_g26
10:45:24  33  ,eur_g27
10:45:24  34  ,eur_g28
10:45:24  35  ,eur_g29
10:45:24  36  ,eur_g30
10:45:24  37  ,eur_g31
10:45:24  38  ,eur_g32
10:45:24  39  ,eur_g33
10:45:24  40  ,eur_g34
10:45:24  41  ,eur_g35
10:45:24  42  ,eur_g36
10:45:24  43  ,eur_g37
10:45:24  44  ,eur_g38
10:45:24  45  ,eur_g39
10:45:24  46  ,eur_g40
10:45:24  47  ,eur_g41
10:45:24  48  ,aud_g00
10:45:24  49  ,aud_g01
10:45:24  50  ,aud_g02
10:45:24  51  ,aud_g03
10:45:24  52  ,aud_g04
10:45:24  53  ,aud_g05
10:45:24  54  ,aud_g06
10:45:24  55  ,aud_g07
10:45:24  56  ,aud_g08
10:45:24  57  ,aud_g09
10:45:24  58  ,aud_g10
10:45:24  59  ,aud_g11
10:45:24  60  ,aud_g12
10:45:24  61  ,aud_g13
10:45:24  62  ,aud_g14
10:45:24  63  ,aud_g15
10:45:24  64  ,aud_g16
10:45:24  65  ,aud_g17
10:45:24  66  ,aud_g18
10:45:24  67  ,aud_g19
10:45:24  68  ,aud_g20
10:45:24  69  ,aud_g21
10:45:24  70  ,aud_g22
10:45:24  71  ,aud_g23
10:45:24  72  ,aud_g24
10:45:24  73  ,aud_g25
10:45:24  74  ,aud_g26
10:45:24  75  ,aud_g27
10:45:24  76  ,aud_g28
10:45:24  77  ,aud_g29
10:45:24  78  ,aud_g30
10:45:24  79  ,aud_g31
10:45:24  80  ,aud_g32
10:45:24  81  ,aud_g33
10:45:24  82  ,aud_g34
10:45:24  83  ,aud_g35
10:45:24  84  ,aud_g36
10:45:24  85  ,aud_g37
10:45:24  86  ,aud_g38
10:45:24  87  ,aud_g39
10:45:24  88  ,aud_g40
10:45:24  89  ,aud_g41
10:45:24  90  ,gbp_g00
10:45:24  91  ,gbp_g01
10:45:24  92  ,gbp_g02
10:45:24  93  ,gbp_g03
10:45:24  94  ,gbp_g04
10:45:24  95  ,gbp_g05
10:45:24  96  ,gbp_g06
10:45:24  97  ,gbp_g07
10:45:24  98  ,gbp_g08
10:45:24  99  ,gbp_g09
10:45:24 100  ,gbp_g10
10:45:24 101  ,gbp_g11
10:45:24 102  ,gbp_g12
10:45:24 103  ,gbp_g13
10:45:24 104  ,gbp_g14
10:45:24 105  ,gbp_g15
10:45:24 106  ,gbp_g16
10:45:24 107  ,gbp_g17
10:45:24 108  ,gbp_g18
10:45:24 109  ,gbp_g19
10:45:24 110  ,gbp_g20
10:45:24 111  ,gbp_g21
10:45:24 112  ,gbp_g22
10:45:24 113  ,gbp_g23
10:45:24 114  ,gbp_g24
10:45:24 115  ,gbp_g25
10:45:24 116  ,gbp_g26
10:45:24 117  ,gbp_g27
10:45:24 118  ,gbp_g28
10:45:24 119  ,gbp_g29
10:45:24 120  ,gbp_g30
10:45:24 121  ,gbp_g31
10:45:24 122  ,gbp_g32
10:45:24 123  ,gbp_g33
10:45:24 124  ,gbp_g34
10:45:24 125  ,gbp_g35
10:45:24 126  ,gbp_g36
10:45:24 127  ,gbp_g37
10:45:24 128  ,gbp_g38
10:45:24 129  ,gbp_g39
10:45:24 130  ,gbp_g40
10:45:24 131  ,gbp_g41
10:45:24 132  ,jpy_g00
10:45:24 133  ,jpy_g01
10:45:24 134  ,jpy_g02
10:45:24 135  ,jpy_g03
10:45:24 136  ,jpy_g04
10:45:24 137  ,jpy_g05
10:45:24 138  ,jpy_g06
10:45:24 139  ,jpy_g07
10:45:24 140  ,jpy_g08
10:45:24 141  ,jpy_g09
10:45:24 142  ,jpy_g10
10:45:24 143  ,jpy_g11
10:45:24 144  ,jpy_g12
10:45:24 145  ,jpy_g13
10:45:24 146  ,jpy_g14
10:45:24 147  ,jpy_g15
10:45:24 148  ,jpy_g16
10:45:24 149  ,jpy_g17
10:45:24 150  ,jpy_g18
10:45:24 151  ,jpy_g19
10:45:24 152  ,jpy_g20
10:45:24 153  ,jpy_g21
10:45:24 154  ,jpy_g22
10:45:24 155  ,jpy_g23
10:45:24 156  ,jpy_g24
10:45:24 157  ,jpy_g25
10:45:24 158  ,jpy_g26
10:45:24 159  ,jpy_g27
10:45:24 160  ,jpy_g28
10:45:24 161  ,jpy_g29
10:45:24 162  ,jpy_g30
10:45:24 163  ,jpy_g31
10:45:24 164  ,jpy_g32
10:45:24 165  ,jpy_g33
10:45:24 166  ,jpy_g34
10:45:24 167  ,jpy_g35
10:45:24 168  ,jpy_g36
10:45:24 169  ,jpy_g37
10:45:24 170  ,jpy_g38
10:45:24 171  ,jpy_g39
10:45:24 172  ,jpy_g40
10:45:24 173  ,jpy_g41
10:45:24 174  ,cad_g00
10:45:24 175  ,cad_g01
10:45:24 176  ,cad_g02
10:45:24 177  ,cad_g03
10:45:24 178  ,cad_g04
10:45:24 179  ,cad_g05
10:45:24 180  ,cad_g06
10:45:24 181  ,cad_g07
10:45:24 182  ,cad_g08
10:45:24 183  ,cad_g09
10:45:24 184  ,cad_g10
10:45:24 185  ,cad_g11
10:45:24 186  ,cad_g12
10:45:24 187  ,cad_g13
10:45:24 188  ,cad_g14
10:45:24 189  ,cad_g15
10:45:24 190  ,cad_g16
10:45:24 191  ,cad_g17
10:45:24 192  ,cad_g18
10:45:24 193  ,cad_g19
10:45:24 194  ,cad_g20
10:45:24 195  ,cad_g21
10:45:24 196  ,cad_g22
10:45:24 197  ,cad_g23
10:45:24 198  ,cad_g24
10:45:24 199  ,cad_g25
10:45:24 200  ,cad_g26
10:45:24 201  ,cad_g27
10:45:24 202  ,cad_g28
10:45:24 203  ,cad_g29
10:45:24 204  ,cad_g30
10:45:24 205  ,cad_g31
10:45:24 206  ,cad_g32
10:45:24 207  ,cad_g33
10:45:24 208  ,cad_g34
10:45:24 209  ,cad_g35
10:45:24 210  ,cad_g36
10:45:24 211  ,cad_g37
10:45:24 212  ,cad_g38
10:45:24 213  ,cad_g39
10:45:24 214  ,cad_g40
10:45:24 215  ,cad_g41
10:45:24 216  ,chf_g00
10:45:24 217  ,chf_g01
10:45:24 218  ,chf_g02
10:45:24 219  ,chf_g03
10:45:24 220  ,chf_g04
10:45:24 221  ,chf_g05
10:45:24 222  ,chf_g06
10:45:24 223  ,chf_g07
10:45:24 224  ,chf_g08
10:45:24 225  ,chf_g09
10:45:24 226  ,chf_g10
10:45:24 227  ,chf_g11
10:45:24 228  ,chf_g12
10:45:24 229  ,chf_g13
10:45:24 230  ,chf_g14
10:45:24 231  ,chf_g15
10:45:24 232  ,chf_g16
10:45:24 233  ,chf_g17
10:45:24 234  ,chf_g18
10:45:24 235  ,chf_g19
10:45:24 236  ,chf_g20
10:45:24 237  ,chf_g21
10:45:24 238  ,chf_g22
10:45:24 239  ,chf_g23
10:45:24 240  ,chf_g24
10:45:24 241  ,chf_g25
10:45:24 242  ,chf_g26
10:45:24 243  ,chf_g27
10:45:24 244  ,chf_g28
10:45:24 245  ,chf_g29
10:45:24 246  ,chf_g30
10:45:24 247  ,chf_g31
10:45:24 248  ,chf_g32
10:45:24 249  ,chf_g33
10:45:24 250  ,chf_g34
10:45:24 251  ,chf_g35
10:45:24 252  ,chf_g36
10:45:24 253  ,chf_g37
10:45:24 254  ,chf_g38
10:45:24 255  ,chf_g39
10:45:24 256  ,chf_g40
10:45:24 257  ,chf_g41
10:45:24 258  FROM aud_ms6 m
10:45:24 259  WHERE m.ydate = '&1'||' '||'&2'
10:45:24 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2011-01-06'||' '||'10:25:00'

View created.

Elapsed: 00:00:00.12
10:45:24 SQL> 
10:45:24 SQL> -- rpt
10:45:24 SQL> -- We should see just 1 row:
10:45:24 SQL> 
10:45:24 SQL> SELECT COUNT(prdate) FROM sme
10:45:24   2  
10:45:24 SQL> -- Build the model:
10:45:24 SQL> CREATE OR REPLACE VIEW bme AS
10:45:24   2  SELECT
10:45:24   3  'aud'||m.ydate prdate
10:45:24   4  ,gatt
10:45:24   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
10:45:24   6  ,eur_g00
10:45:24   7  ,eur_g01
10:45:24   8  ,eur_g02
10:45:24   9  ,eur_g03
10:45:24  10  ,eur_g04
10:45:24  11  ,eur_g05
10:45:24  12  ,eur_g06
10:45:24  13  ,eur_g07
10:45:24  14  ,eur_g08
10:45:24  15  ,eur_g09
10:45:24  16  ,eur_g10
10:45:24  17  ,eur_g11
10:45:24  18  ,eur_g12
10:45:24  19  ,eur_g13
10:45:24  20  ,eur_g14
10:45:24  21  ,eur_g15
10:45:24  22  ,eur_g16
10:45:24  23  ,eur_g17
10:45:24  24  ,eur_g18
10:45:24  25  ,eur_g19
10:45:24  26  ,eur_g20
10:45:24  27  ,eur_g21
10:45:24  28  ,eur_g22
10:45:24  29  ,eur_g23
10:45:24  30  ,eur_g24
10:45:24  31  ,eur_g25
10:45:24  32  ,eur_g26
10:45:24  33  ,eur_g27
10:45:24  34  ,eur_g28
10:45:24  35  ,eur_g29
10:45:24  36  ,eur_g30
10:45:24  37  ,eur_g31
10:45:24  38  ,eur_g32
10:45:24  39  ,eur_g33
10:45:24  40  ,eur_g34
10:45:24  41  ,eur_g35
10:45:24  42  ,eur_g36
10:45:24  43  ,eur_g37
10:45:24  44  ,eur_g38
10:45:24  45  ,eur_g39
10:45:24  46  ,eur_g40
10:45:24  47  ,eur_g41
10:45:24  48  ,aud_g00
10:45:24  49  ,aud_g01
10:45:24  50  ,aud_g02
10:45:24  51  ,aud_g03
10:45:24  52  ,aud_g04
10:45:24  53  ,aud_g05
10:45:24  54  ,aud_g06
10:45:24  55  ,aud_g07
10:45:24  56  ,aud_g08
10:45:24  57  ,aud_g09
10:45:24  58  ,aud_g10
10:45:24  59  ,aud_g11
10:45:24  60  ,aud_g12
10:45:24  61  ,aud_g13
10:45:24  62  ,aud_g14
10:45:24  63  ,aud_g15
10:45:24  64  ,aud_g16
10:45:24  65  ,aud_g17
10:45:24  66  ,aud_g18
10:45:24  67  ,aud_g19
10:45:24  68  ,aud_g20
10:45:24  69  ,aud_g21
10:45:24  70  ,aud_g22
10:45:24  71  ,aud_g23
10:45:24  72  ,aud_g24
10:45:24  73  ,aud_g25
10:45:24  74  ,aud_g26
10:45:24  75  ,aud_g27
10:45:24  76  ,aud_g28
10:45:24  77  ,aud_g29
10:45:24  78  ,aud_g30
10:45:24  79  ,aud_g31
10:45:24  80  ,aud_g32
10:45:24  81  ,aud_g33
10:45:24  82  ,aud_g34
10:45:24  83  ,aud_g35
10:45:24  84  ,aud_g36
10:45:24  85  ,aud_g37
10:45:24  86  ,aud_g38
10:45:24  87  ,aud_g39
10:45:24  88  ,aud_g40
10:45:24  89  ,aud_g41
10:45:24  90  ,gbp_g00
10:45:24  91  ,gbp_g01
10:45:24  92  ,gbp_g02
10:45:24  93  ,gbp_g03
10:45:24  94  ,gbp_g04
10:45:24  95  ,gbp_g05
10:45:24  96  ,gbp_g06
10:45:24  97  ,gbp_g07
10:45:24  98  ,gbp_g08
10:45:24  99  ,gbp_g09
10:45:24 100  ,gbp_g10
10:45:24 101  ,gbp_g11
10:45:24 102  ,gbp_g12
10:45:24 103  ,gbp_g13
10:45:24 104  ,gbp_g14
10:45:24 105  ,gbp_g15
10:45:24 106  ,gbp_g16
10:45:24 107  ,gbp_g17
10:45:24 108  ,gbp_g18
10:45:24 109  ,gbp_g19
10:45:24 110  ,gbp_g20
10:45:24 111  ,gbp_g21
10:45:24 112  ,gbp_g22
10:45:24 113  ,gbp_g23
10:45:24 114  ,gbp_g24
10:45:24 115  ,gbp_g25
10:45:24 116  ,gbp_g26
10:45:24 117  ,gbp_g27
10:45:24 118  ,gbp_g28
10:45:24 119  ,gbp_g29
10:45:24 120  ,gbp_g30
10:45:24 121  ,gbp_g31
10:45:24 122  ,gbp_g32
10:45:24 123  ,gbp_g33
10:45:24 124  ,gbp_g34
10:45:24 125  ,gbp_g35
10:45:24 126  ,gbp_g36
10:45:24 127  ,gbp_g37
10:45:24 128  ,gbp_g38
10:45:24 129  ,gbp_g39
10:45:24 130  ,gbp_g40
10:45:24 131  ,gbp_g41
10:45:24 132  ,jpy_g00
10:45:24 133  ,jpy_g01
10:45:24 134  ,jpy_g02
10:45:24 135  ,jpy_g03
10:45:24 136  ,jpy_g04
10:45:24 137  ,jpy_g05
10:45:24 138  ,jpy_g06
10:45:24 139  ,jpy_g07
10:45:24 140  ,jpy_g08
10:45:24 141  ,jpy_g09
10:45:24 142  ,jpy_g10
10:45:24 143  ,jpy_g11
10:45:24 144  ,jpy_g12
10:45:24 145  ,jpy_g13
10:45:24 146  ,jpy_g14
10:45:24 147  ,jpy_g15
10:45:24 148  ,jpy_g16
10:45:24 149  ,jpy_g17
10:45:24 150  ,jpy_g18
10:45:24 151  ,jpy_g19
10:45:24 152  ,jpy_g20
10:45:24 153  ,jpy_g21
10:45:24 154  ,jpy_g22
10:45:24 155  ,jpy_g23
10:45:24 156  ,jpy_g24
10:45:24 157  ,jpy_g25
10:45:24 158  ,jpy_g26
10:45:24 159  ,jpy_g27
10:45:24 160  ,jpy_g28
10:45:24 161  ,jpy_g29
10:45:24 162  ,jpy_g30
10:45:24 163  ,jpy_g31
10:45:24 164  ,jpy_g32
10:45:24 165  ,jpy_g33
10:45:24 166  ,jpy_g34
10:45:24 167  ,jpy_g35
10:45:24 168  ,jpy_g36
10:45:24 169  ,jpy_g37
10:45:24 170  ,jpy_g38
10:45:24 171  ,jpy_g39
10:45:24 172  ,jpy_g40
10:45:24 173  ,jpy_g41
10:45:24 174  ,cad_g00
10:45:24 175  ,cad_g01
10:45:24 176  ,cad_g02
10:45:24 177  ,cad_g03
10:45:24 178  ,cad_g04
10:45:24 179  ,cad_g05
10:45:24 180  ,cad_g06
10:45:24 181  ,cad_g07
10:45:24 182  ,cad_g08
10:45:24 183  ,cad_g09
10:45:24 184  ,cad_g10
10:45:24 185  ,cad_g11
10:45:24 186  ,cad_g12
10:45:24 187  ,cad_g13
10:45:24 188  ,cad_g14
10:45:24 189  ,cad_g15
10:45:24 190  ,cad_g16
10:45:24 191  ,cad_g17
10:45:24 192  ,cad_g18
10:45:24 193  ,cad_g19
10:45:24 194  ,cad_g20
10:45:24 195  ,cad_g21
10:45:24 196  ,cad_g22
10:45:24 197  ,cad_g23
10:45:24 198  ,cad_g24
10:45:24 199  ,cad_g25
10:45:24 200  ,cad_g26
10:45:24 201  ,cad_g27
10:45:24 202  ,cad_g28
10:45:24 203  ,cad_g29
10:45:24 204  ,cad_g30
10:45:24 205  ,cad_g31
10:45:24 206  ,cad_g32
10:45:24 207  ,cad_g33
10:45:24 208  ,cad_g34
10:45:24 209  ,cad_g35
10:45:24 210  ,cad_g36
10:45:24 211  ,cad_g37
10:45:24 212  ,cad_g38
10:45:24 213  ,cad_g39
10:45:24 214  ,cad_g40
10:45:24 215  ,cad_g41
10:45:24 216  ,chf_g00
10:45:24 217  ,chf_g01
10:45:24 218  ,chf_g02
10:45:24 219  ,chf_g03
10:45:24 220  ,chf_g04
10:45:24 221  ,chf_g05
10:45:24 222  ,chf_g06
10:45:24 223  ,chf_g07
10:45:24 224  ,chf_g08
10:45:24 225  ,chf_g09
10:45:24 226  ,chf_g10
10:45:24 227  ,chf_g11
10:45:24 228  ,chf_g12
10:45:24 229  ,chf_g13
10:45:24 230  ,chf_g14
10:45:24 231  ,chf_g15
10:45:24 232  ,chf_g16
10:45:24 233  ,chf_g17
10:45:24 234  ,chf_g18
10:45:24 235  ,chf_g19
10:45:24 236  ,chf_g20
10:45:24 237  ,chf_g21
10:45:24 238  ,chf_g22
10:45:24 239  ,chf_g23
10:45:24 240  ,chf_g24
10:45:24 241  ,chf_g25
10:45:24 242  ,chf_g26
10:45:24 243  ,chf_g27
10:45:24 244  ,chf_g28
10:45:24 245  ,chf_g29
10:45:24 246  ,chf_g30
10:45:24 247  ,chf_g31
10:45:24 248  ,chf_g32
10:45:24 249  ,chf_g33
10:45:24 250  ,chf_g34
10:45:24 251  ,chf_g35
10:45:24 252  ,chf_g36
10:45:24 253  ,chf_g37
10:45:24 254  ,chf_g38
10:45:24 255  ,chf_g39
10:45:24 256  ,chf_g40
10:45:24 257  ,chf_g41
10:45:24 258  FROM aud_ms6 m
10:45:24 259  WHERE gatt IN('nup','up')
10:45:24 260  AND 1+m.ydate < '&1'||' '||'&2'
10:45:24 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2011-01-06'||' '||'10:25:00'

View created.

Elapsed: 00:00:00.12
10:45:24 SQL> 
10:45:24 SQL> -- rpt
10:45:24 SQL> 
10:45:24 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt
10:45:24   2  
10:45:24 SQL> SELECT MAX(prdate) FROM bme
10:45:24   2  
10:45:24 SQL> -- Now build model from bme and score sme
10:45:24 SQL> @score1.sql
10:45:24 SQL> -- score1.sql
10:45:24 SQL> 
10:45:24 SQL> -- Does the 1st SVM score
10:45:24 SQL> 
10:45:24 SQL> -- Fill up svmc_apply_prep
10:45:24 SQL> @score.sql
10:45:24 SQL> --
10:45:24 SQL> -- score.sql
10:45:24 SQL> --
10:45:24 SQL> 
10:45:24 SQL> -- usage: score.sql
10:45:24 SQL> 
10:45:24 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
10:45:24 SQL> 
10:45:24 SQL> DEFINE target	= 'gatt'
10:45:24 SQL> DEFINE model_name = 'forex15'
10:45:24 SQL> DEFINE bldtable	= 'bme'
10:45:24 SQL> DEFINE scoretable = 'sme'
10:45:24 SQL> DEFINE case_id	= 'prdate'
10:45:24 SQL> 
10:45:24 SQL> -- Define a variable to help me exclude some columns from some data mining calls
10:45:24 SQL> DEFINE exclude1 = "'&target','&case_id'"
10:45:24 SQL> 
10:45:24 SQL> -- Builds an SVM model using pl/sql.
10:45:24 SQL> 
10:45:24 SQL> -----------------------------------------------------------------------
10:45:24 SQL> --			    BUILD THE MODEL
10:45:24 SQL> -----------------------------------------------------------------------
10:45:24 SQL> 
10:45:24 SQL> -- Cleanup old build data preparation objects for repeat runs
10:45:24 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.01
10:45:24 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
10:45:24 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.01
10:45:24 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.00
10:45:24 SQL> 
10:45:24 SQL> 
10:45:24 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
10:45:24 SQL> --
10:45:24 SQL> -- DROP	TABLE svmc_settings ;
10:45:24 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
10:45:24 SQL> -- DELETE svmc_settings;
10:45:24 SQL> 
10:45:24 SQL> -- The default classification algorithm is Naive Bayes. So override
10:45:24 SQL> -- this choice to SVM using a settings table.
10:45:24 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
10:45:24 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
10:45:24 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
10:45:24 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
10:45:24 SQL> -- models.
10:45:24 SQL> --
10:45:24 SQL> 
10:45:24 SQL> -- Do this once and then comment it out.
10:45:24 SQL> -- That makes script go faster.
10:45:24 SQL> -- BEGIN
10:45:24 SQL> -- -- Populate settings table
10:45:24 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
10:45:24 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
10:45:24 SQL> --
10:45:24 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
10:45:24 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
10:45:24 SQL> --
10:45:24 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
10:45:24 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
10:45:24 SQL> --   COMMIT;
10:45:24 SQL> -- END;
10:45:24 SQL> -- /
10:45:24 SQL> 
10:45:24 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
10:45:24 SQL> 
10:45:24 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
10:45:24   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:45:24   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
10:45:24 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
10:45:24   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:45:24   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
10:45:25 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
10:45:25   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:45:25   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
10:45:25 SQL> 
10:45:25 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
10:45:25   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:45:25   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
10:45:25 SQL> 
10:45:25 SQL> --------------------------------
10:45:25 SQL> -- PREPARE BUILD (TRAINING) DATA
10:45:25 SQL> --
10:45:25 SQL> 
10:45:25 SQL> -- 1. Missing Value treatment for all Predictors and
10:45:25 SQL> -- 2. Outlier Treatment and
10:45:25 SQL> -- 3. Normalization are performed below.
10:45:25 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
10:45:25 SQL> --    normalized here.
10:45:25 SQL> 
10:45:25 SQL> BEGIN
10:45:25   2  	-- Perform missing value treatment for all predictors
10:45:25   3  	-- create miss tables
10:45:25   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
10:45:25   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
10:45:25   6  
10:45:25   7  	-- populate miss tables
10:45:25   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
10:45:25   9  	  miss_table_name => 'svmc_miss_num',
10:45:25  10  	  data_table_name => '&bldtable',
10:45:25  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:45:25  12  
10:45:25  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
10:45:25  14  	  miss_table_name => 'svmc_miss_cat',
10:45:25  15  	  data_table_name => '&bldtable',
10:45:25  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:45:25  17  
10:45:25  18  	-- xform input data to replace missing values
10:45:25  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
10:45:25  20  	  miss_table_name => 'svmc_miss_num',
10:45:25  21  	  data_table_name => '&bldtable',
10:45:25  22  	  xform_view_name => 'xformed_build_miss_num');
10:45:25  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
10:45:25  24  	  miss_table_name => 'svmc_miss_cat',
10:45:25  25  	  data_table_name => '&bldtable',
10:45:25  26  	  xform_view_name => 'xformed_build_miss_cat');
10:45:25  27  
10:45:25  28  	-- Perform outlier treatment.
10:45:25  29  	-- create clip table
10:45:25  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
10:45:25  31  
10:45:25  32  	-- populate clip table
10:45:25  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
10:45:25  34  	  clip_table_name => 'svmc_clip',
10:45:25  35  	  data_table_name => '&bldtable',
10:45:25  36  	  tail_frac	  => 0.025,
10:45:25  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:45:25  38  
10:45:25  39  	-- xform input data to winsorized data
10:45:25  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
10:45:25  41  	  clip_table_name => 'svmc_clip',
10:45:25  42  	  data_table_name => '&bldtable',
10:45:25  43  	  xform_view_name => 'svmc_winsor');
10:45:25  44  
10:45:25  45  	-- create normalization table
10:45:25  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
10:45:25  47  
10:45:25  48  	-- populate normalization table based on winsorized data
10:45:25  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
10:45:25  50  	  norm_table_name => 'svmc_norm',
10:45:25  51  	  data_table_name => 'svmc_winsor',
10:45:25  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:45:25  53  
10:45:25  54  	-- normalize the original data
10:45:25  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
10:45:25  56  	  norm_table_name => 'svmc_norm',
10:45:25  57  	  data_table_name => '&bldtable',
10:45:25  58  	  xform_view_name => 'svmc_build_prep');
10:45:25  59  END;
10:45:25  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:18.18
10:45:43 SQL> 
10:45:43 SQL> ---------------------
10:45:43 SQL> -- CREATE A NEW MODEL
10:45:43 SQL> --
10:45:43 SQL> -- Cleanup old model with the same name for repeat runs
10:45:43 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
10:45:43   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:45:43   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex15');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.11
10:45:44 SQL> 
10:45:44 SQL> -- Build a new SVM Model
10:45:44 SQL> BEGIN
10:45:44   2  	DBMS_DATA_MINING.CREATE_MODEL(
10:45:44   3  	  model_name	      => '&model_name',
10:45:44   4  	  mining_function     => dbms_data_mining.classification,
10:45:44   5  	  data_table_name     => 'svmc_build_prep',
10:45:44   6  	  case_id_column_name => '&case_id',
10:45:44   7  	  target_column_name  => '&target',
10:45:44   8  	  settings_table_name => 'svmc_settings');
10:45:44   9  END;
10:45:44  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex15',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:27.94
10:46:12 SQL> 
10:46:12 SQL> -----------------------------------------------------------------------
10:46:12 SQL> --			       APPLY/score THE MODEL
10:46:12 SQL> -----------------------------------------------------------------------
10:46:12 SQL> 
10:46:12 SQL> -- Cleanup old scoring data preparation objects for repeat runs
10:46:12 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
10:46:12   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:46:12   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
10:46:12 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
10:46:12   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:46:12   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
10:46:12 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
10:46:12   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:46:12   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
10:46:12 SQL> -----------------------
10:46:12 SQL> -- PREPARE SCORING DATA
10:46:12 SQL> --
10:46:12 SQL> -- If the data for model creation has been prepared, then the data
10:46:12 SQL> -- to be scored using the model must be prepared in the same manner
10:46:12 SQL> -- in order to obtain meaningful results.
10:46:12 SQL> --
10:46:12 SQL> -- 1. Missing Value treatment for all Predictors and
10:46:12 SQL> -- 2. Normalization
10:46:12 SQL> -- No outlier treatment will be performed during test and apply. The
10:46:12 SQL> -- normalization step is sufficient, since the normalization parameters
10:46:12 SQL> -- already capture the effects of outlier treatment done with build data.
10:46:12 SQL> --
10:46:12 SQL> BEGIN
10:46:12   2  	-- Xform Test data to replace missing values
10:46:12   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
10:46:12   4  	  miss_table_name => 'svmc_miss_num',
10:46:12   5  	  data_table_name => '&scoretable',
10:46:12   6  	  xform_view_name => 'xformed_apply_miss_num');
10:46:12   7  
10:46:12   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
10:46:12   9  	  miss_table_name => 'svmc_miss_cat',
10:46:12  10  	  data_table_name => '&scoretable',
10:46:12  11  	  xform_view_name => 'xformed_apply_miss_cat');
10:46:12  12  
10:46:12  13  	-- Normalize the data to be scored
10:46:12  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
10:46:12  15  	  norm_table_name => 'svmc_norm',
10:46:12  16  	  data_table_name => '&scoretable',
10:46:12  17  	  xform_view_name => 'svmc_apply_prep');
10:46:12  18  END;
10:46:12  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.38
10:46:13 SQL> 
10:46:13 SQL> -- Use same model_name used in score.sql
10:46:13 SQL> DEFINE model_name = 'forex15'
10:46:13 SQL> 
10:46:13 SQL> -- CREATE TABLE fxscores6 (prdate VARCHAR2(30),score NUMBER,rundate DATE,pair VARCHAR2(8),ydate DATE);
10:46:13 SQL> 
10:46:13 SQL> DELETE fxscores6 WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.04
10:46:13 SQL> 
10:46:13 SQL> INSERT INTO fxscores6 (prdate,score,rundate,pair,ydate)
10:46:13   2  SELECT
10:46:13   3  prdate
10:46:13   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
10:46:13   5  ,sysdate
10:46:13   6  ,SUBSTR(prdate,1,3)pair
10:46:13   7  ,SUBSTR(prdate,4,19)ydate
10:46:13   8  FROM svmc_apply_prep
10:46:13   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex15,'up' USING *)score

1 row created.

Elapsed: 00:00:00.18
10:46:14 SQL> @aud_score1day.sql  2011-01-06 10:30:00
10:46:14 SQL> --
10:46:14 SQL> -- aud_score1day.sql
10:46:14 SQL> --
10:46:14 SQL> 
10:46:14 SQL> CREATE OR REPLACE VIEW sme AS
10:46:14   2  SELECT
10:46:14   3  'aud'||m.ydate prdate
10:46:14   4  ,NULL gatt
10:46:14   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
10:46:14   6  ,eur_g00
10:46:14   7  ,eur_g01
10:46:14   8  ,eur_g02
10:46:14   9  ,eur_g03
10:46:14  10  ,eur_g04
10:46:14  11  ,eur_g05
10:46:14  12  ,eur_g06
10:46:14  13  ,eur_g07
10:46:14  14  ,eur_g08
10:46:14  15  ,eur_g09
10:46:14  16  ,eur_g10
10:46:14  17  ,eur_g11
10:46:14  18  ,eur_g12
10:46:14  19  ,eur_g13
10:46:14  20  ,eur_g14
10:46:14  21  ,eur_g15
10:46:14  22  ,eur_g16
10:46:14  23  ,eur_g17
10:46:14  24  ,eur_g18
10:46:14  25  ,eur_g19
10:46:14  26  ,eur_g20
10:46:14  27  ,eur_g21
10:46:14  28  ,eur_g22
10:46:14  29  ,eur_g23
10:46:14  30  ,eur_g24
10:46:14  31  ,eur_g25
10:46:14  32  ,eur_g26
10:46:14  33  ,eur_g27
10:46:14  34  ,eur_g28
10:46:14  35  ,eur_g29
10:46:14  36  ,eur_g30
10:46:14  37  ,eur_g31
10:46:14  38  ,eur_g32
10:46:14  39  ,eur_g33
10:46:14  40  ,eur_g34
10:46:14  41  ,eur_g35
10:46:14  42  ,eur_g36
10:46:14  43  ,eur_g37
10:46:14  44  ,eur_g38
10:46:14  45  ,eur_g39
10:46:14  46  ,eur_g40
10:46:14  47  ,eur_g41
10:46:14  48  ,aud_g00
10:46:14  49  ,aud_g01
10:46:14  50  ,aud_g02
10:46:14  51  ,aud_g03
10:46:14  52  ,aud_g04
10:46:14  53  ,aud_g05
10:46:14  54  ,aud_g06
10:46:14  55  ,aud_g07
10:46:14  56  ,aud_g08
10:46:14  57  ,aud_g09
10:46:14  58  ,aud_g10
10:46:14  59  ,aud_g11
10:46:14  60  ,aud_g12
10:46:14  61  ,aud_g13
10:46:14  62  ,aud_g14
10:46:14  63  ,aud_g15
10:46:14  64  ,aud_g16
10:46:14  65  ,aud_g17
10:46:14  66  ,aud_g18
10:46:14  67  ,aud_g19
10:46:14  68  ,aud_g20
10:46:14  69  ,aud_g21
10:46:14  70  ,aud_g22
10:46:14  71  ,aud_g23
10:46:14  72  ,aud_g24
10:46:14  73  ,aud_g25
10:46:14  74  ,aud_g26
10:46:14  75  ,aud_g27
10:46:14  76  ,aud_g28
10:46:14  77  ,aud_g29
10:46:14  78  ,aud_g30
10:46:14  79  ,aud_g31
10:46:14  80  ,aud_g32
10:46:14  81  ,aud_g33
10:46:14  82  ,aud_g34
10:46:14  83  ,aud_g35
10:46:14  84  ,aud_g36
10:46:14  85  ,aud_g37
10:46:14  86  ,aud_g38
10:46:14  87  ,aud_g39
10:46:14  88  ,aud_g40
10:46:14  89  ,aud_g41
10:46:14  90  ,gbp_g00
10:46:14  91  ,gbp_g01
10:46:14  92  ,gbp_g02
10:46:14  93  ,gbp_g03
10:46:14  94  ,gbp_g04
10:46:14  95  ,gbp_g05
10:46:14  96  ,gbp_g06
10:46:14  97  ,gbp_g07
10:46:14  98  ,gbp_g08
10:46:14  99  ,gbp_g09
10:46:14 100  ,gbp_g10
10:46:14 101  ,gbp_g11
10:46:14 102  ,gbp_g12
10:46:14 103  ,gbp_g13
10:46:14 104  ,gbp_g14
10:46:14 105  ,gbp_g15
10:46:14 106  ,gbp_g16
10:46:14 107  ,gbp_g17
10:46:14 108  ,gbp_g18
10:46:14 109  ,gbp_g19
10:46:14 110  ,gbp_g20
10:46:14 111  ,gbp_g21
10:46:14 112  ,gbp_g22
10:46:14 113  ,gbp_g23
10:46:14 114  ,gbp_g24
10:46:14 115  ,gbp_g25
10:46:14 116  ,gbp_g26
10:46:14 117  ,gbp_g27
10:46:14 118  ,gbp_g28
10:46:14 119  ,gbp_g29
10:46:14 120  ,gbp_g30
10:46:14 121  ,gbp_g31
10:46:14 122  ,gbp_g32
10:46:14 123  ,gbp_g33
10:46:14 124  ,gbp_g34
10:46:14 125  ,gbp_g35
10:46:14 126  ,gbp_g36
10:46:14 127  ,gbp_g37
10:46:14 128  ,gbp_g38
10:46:14 129  ,gbp_g39
10:46:14 130  ,gbp_g40
10:46:14 131  ,gbp_g41
10:46:14 132  ,jpy_g00
10:46:14 133  ,jpy_g01
10:46:14 134  ,jpy_g02
10:46:14 135  ,jpy_g03
10:46:14 136  ,jpy_g04
10:46:14 137  ,jpy_g05
10:46:14 138  ,jpy_g06
10:46:14 139  ,jpy_g07
10:46:14 140  ,jpy_g08
10:46:14 141  ,jpy_g09
10:46:14 142  ,jpy_g10
10:46:14 143  ,jpy_g11
10:46:14 144  ,jpy_g12
10:46:14 145  ,jpy_g13
10:46:14 146  ,jpy_g14
10:46:14 147  ,jpy_g15
10:46:14 148  ,jpy_g16
10:46:14 149  ,jpy_g17
10:46:14 150  ,jpy_g18
10:46:14 151  ,jpy_g19
10:46:14 152  ,jpy_g20
10:46:14 153  ,jpy_g21
10:46:14 154  ,jpy_g22
10:46:14 155  ,jpy_g23
10:46:14 156  ,jpy_g24
10:46:14 157  ,jpy_g25
10:46:14 158  ,jpy_g26
10:46:14 159  ,jpy_g27
10:46:14 160  ,jpy_g28
10:46:14 161  ,jpy_g29
10:46:14 162  ,jpy_g30
10:46:14 163  ,jpy_g31
10:46:14 164  ,jpy_g32
10:46:14 165  ,jpy_g33
10:46:14 166  ,jpy_g34
10:46:14 167  ,jpy_g35
10:46:14 168  ,jpy_g36
10:46:14 169  ,jpy_g37
10:46:14 170  ,jpy_g38
10:46:14 171  ,jpy_g39
10:46:14 172  ,jpy_g40
10:46:14 173  ,jpy_g41
10:46:14 174  ,cad_g00
10:46:14 175  ,cad_g01
10:46:14 176  ,cad_g02
10:46:14 177  ,cad_g03
10:46:14 178  ,cad_g04
10:46:14 179  ,cad_g05
10:46:14 180  ,cad_g06
10:46:14 181  ,cad_g07
10:46:14 182  ,cad_g08
10:46:14 183  ,cad_g09
10:46:14 184  ,cad_g10
10:46:14 185  ,cad_g11
10:46:14 186  ,cad_g12
10:46:14 187  ,cad_g13
10:46:14 188  ,cad_g14
10:46:14 189  ,cad_g15
10:46:14 190  ,cad_g16
10:46:14 191  ,cad_g17
10:46:14 192  ,cad_g18
10:46:14 193  ,cad_g19
10:46:14 194  ,cad_g20
10:46:14 195  ,cad_g21
10:46:14 196  ,cad_g22
10:46:14 197  ,cad_g23
10:46:14 198  ,cad_g24
10:46:14 199  ,cad_g25
10:46:14 200  ,cad_g26
10:46:14 201  ,cad_g27
10:46:14 202  ,cad_g28
10:46:14 203  ,cad_g29
10:46:14 204  ,cad_g30
10:46:14 205  ,cad_g31
10:46:14 206  ,cad_g32
10:46:14 207  ,cad_g33
10:46:14 208  ,cad_g34
10:46:14 209  ,cad_g35
10:46:14 210  ,cad_g36
10:46:14 211  ,cad_g37
10:46:14 212  ,cad_g38
10:46:14 213  ,cad_g39
10:46:14 214  ,cad_g40
10:46:14 215  ,cad_g41
10:46:14 216  ,chf_g00
10:46:14 217  ,chf_g01
10:46:14 218  ,chf_g02
10:46:14 219  ,chf_g03
10:46:14 220  ,chf_g04
10:46:14 221  ,chf_g05
10:46:14 222  ,chf_g06
10:46:14 223  ,chf_g07
10:46:14 224  ,chf_g08
10:46:14 225  ,chf_g09
10:46:14 226  ,chf_g10
10:46:14 227  ,chf_g11
10:46:14 228  ,chf_g12
10:46:14 229  ,chf_g13
10:46:14 230  ,chf_g14
10:46:14 231  ,chf_g15
10:46:14 232  ,chf_g16
10:46:14 233  ,chf_g17
10:46:14 234  ,chf_g18
10:46:14 235  ,chf_g19
10:46:14 236  ,chf_g20
10:46:14 237  ,chf_g21
10:46:14 238  ,chf_g22
10:46:14 239  ,chf_g23
10:46:14 240  ,chf_g24
10:46:14 241  ,chf_g25
10:46:14 242  ,chf_g26
10:46:14 243  ,chf_g27
10:46:14 244  ,chf_g28
10:46:14 245  ,chf_g29
10:46:14 246  ,chf_g30
10:46:14 247  ,chf_g31
10:46:14 248  ,chf_g32
10:46:14 249  ,chf_g33
10:46:14 250  ,chf_g34
10:46:14 251  ,chf_g35
10:46:14 252  ,chf_g36
10:46:14 253  ,chf_g37
10:46:14 254  ,chf_g38
10:46:14 255  ,chf_g39
10:46:14 256  ,chf_g40
10:46:14 257  ,chf_g41
10:46:14 258  FROM aud_ms6 m
10:46:14 259  WHERE m.ydate = '&1'||' '||'&2'
10:46:14 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2011-01-06'||' '||'10:30:00'

View created.

Elapsed: 00:00:00.12
10:46:14 SQL> 
10:46:14 SQL> -- rpt
10:46:14 SQL> -- We should see just 1 row:
10:46:14 SQL> 
10:46:14 SQL> SELECT COUNT(prdate) FROM sme
10:46:14   2  
10:46:14 SQL> -- Build the model:
10:46:14 SQL> CREATE OR REPLACE VIEW bme AS
10:46:14   2  SELECT
10:46:14   3  'aud'||m.ydate prdate
10:46:14   4  ,gatt
10:46:14   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
10:46:14   6  ,eur_g00
10:46:14   7  ,eur_g01
10:46:14   8  ,eur_g02
10:46:14   9  ,eur_g03
10:46:14  10  ,eur_g04
10:46:14  11  ,eur_g05
10:46:14  12  ,eur_g06
10:46:14  13  ,eur_g07
10:46:14  14  ,eur_g08
10:46:14  15  ,eur_g09
10:46:14  16  ,eur_g10
10:46:14  17  ,eur_g11
10:46:14  18  ,eur_g12
10:46:14  19  ,eur_g13
10:46:14  20  ,eur_g14
10:46:14  21  ,eur_g15
10:46:14  22  ,eur_g16
10:46:14  23  ,eur_g17
10:46:14  24  ,eur_g18
10:46:14  25  ,eur_g19
10:46:14  26  ,eur_g20
10:46:14  27  ,eur_g21
10:46:14  28  ,eur_g22
10:46:14  29  ,eur_g23
10:46:14  30  ,eur_g24
10:46:14  31  ,eur_g25
10:46:14  32  ,eur_g26
10:46:14  33  ,eur_g27
10:46:14  34  ,eur_g28
10:46:14  35  ,eur_g29
10:46:14  36  ,eur_g30
10:46:14  37  ,eur_g31
10:46:14  38  ,eur_g32
10:46:14  39  ,eur_g33
10:46:14  40  ,eur_g34
10:46:14  41  ,eur_g35
10:46:14  42  ,eur_g36
10:46:14  43  ,eur_g37
10:46:14  44  ,eur_g38
10:46:14  45  ,eur_g39
10:46:14  46  ,eur_g40
10:46:14  47  ,eur_g41
10:46:14  48  ,aud_g00
10:46:14  49  ,aud_g01
10:46:14  50  ,aud_g02
10:46:14  51  ,aud_g03
10:46:14  52  ,aud_g04
10:46:14  53  ,aud_g05
10:46:14  54  ,aud_g06
10:46:14  55  ,aud_g07
10:46:14  56  ,aud_g08
10:46:14  57  ,aud_g09
10:46:14  58  ,aud_g10
10:46:14  59  ,aud_g11
10:46:14  60  ,aud_g12
10:46:14  61  ,aud_g13
10:46:14  62  ,aud_g14
10:46:14  63  ,aud_g15
10:46:14  64  ,aud_g16
10:46:14  65  ,aud_g17
10:46:14  66  ,aud_g18
10:46:14  67  ,aud_g19
10:46:14  68  ,aud_g20
10:46:14  69  ,aud_g21
10:46:14  70  ,aud_g22
10:46:14  71  ,aud_g23
10:46:14  72  ,aud_g24
10:46:14  73  ,aud_g25
10:46:14  74  ,aud_g26
10:46:14  75  ,aud_g27
10:46:14  76  ,aud_g28
10:46:14  77  ,aud_g29
10:46:14  78  ,aud_g30
10:46:14  79  ,aud_g31
10:46:14  80  ,aud_g32
10:46:14  81  ,aud_g33
10:46:14  82  ,aud_g34
10:46:14  83  ,aud_g35
10:46:14  84  ,aud_g36
10:46:14  85  ,aud_g37
10:46:14  86  ,aud_g38
10:46:14  87  ,aud_g39
10:46:14  88  ,aud_g40
10:46:14  89  ,aud_g41
10:46:14  90  ,gbp_g00
10:46:14  91  ,gbp_g01
10:46:14  92  ,gbp_g02
10:46:14  93  ,gbp_g03
10:46:14  94  ,gbp_g04
10:46:14  95  ,gbp_g05
10:46:14  96  ,gbp_g06
10:46:14  97  ,gbp_g07
10:46:14  98  ,gbp_g08
10:46:14  99  ,gbp_g09
10:46:14 100  ,gbp_g10
10:46:14 101  ,gbp_g11
10:46:14 102  ,gbp_g12
10:46:14 103  ,gbp_g13
10:46:14 104  ,gbp_g14
10:46:14 105  ,gbp_g15
10:46:14 106  ,gbp_g16
10:46:14 107  ,gbp_g17
10:46:14 108  ,gbp_g18
10:46:14 109  ,gbp_g19
10:46:14 110  ,gbp_g20
10:46:14 111  ,gbp_g21
10:46:14 112  ,gbp_g22
10:46:14 113  ,gbp_g23
10:46:14 114  ,gbp_g24
10:46:14 115  ,gbp_g25
10:46:14 116  ,gbp_g26
10:46:14 117  ,gbp_g27
10:46:14 118  ,gbp_g28
10:46:14 119  ,gbp_g29
10:46:14 120  ,gbp_g30
10:46:14 121  ,gbp_g31
10:46:14 122  ,gbp_g32
10:46:14 123  ,gbp_g33
10:46:14 124  ,gbp_g34
10:46:14 125  ,gbp_g35
10:46:14 126  ,gbp_g36
10:46:14 127  ,gbp_g37
10:46:14 128  ,gbp_g38
10:46:14 129  ,gbp_g39
10:46:14 130  ,gbp_g40
10:46:14 131  ,gbp_g41
10:46:14 132  ,jpy_g00
10:46:14 133  ,jpy_g01
10:46:14 134  ,jpy_g02
10:46:14 135  ,jpy_g03
10:46:14 136  ,jpy_g04
10:46:14 137  ,jpy_g05
10:46:14 138  ,jpy_g06
10:46:14 139  ,jpy_g07
10:46:14 140  ,jpy_g08
10:46:14 141  ,jpy_g09
10:46:14 142  ,jpy_g10
10:46:14 143  ,jpy_g11
10:46:14 144  ,jpy_g12
10:46:14 145  ,jpy_g13
10:46:14 146  ,jpy_g14
10:46:14 147  ,jpy_g15
10:46:14 148  ,jpy_g16
10:46:14 149  ,jpy_g17
10:46:14 150  ,jpy_g18
10:46:14 151  ,jpy_g19
10:46:14 152  ,jpy_g20
10:46:14 153  ,jpy_g21
10:46:14 154  ,jpy_g22
10:46:14 155  ,jpy_g23
10:46:14 156  ,jpy_g24
10:46:14 157  ,jpy_g25
10:46:14 158  ,jpy_g26
10:46:14 159  ,jpy_g27
10:46:14 160  ,jpy_g28
10:46:14 161  ,jpy_g29
10:46:14 162  ,jpy_g30
10:46:14 163  ,jpy_g31
10:46:14 164  ,jpy_g32
10:46:14 165  ,jpy_g33
10:46:14 166  ,jpy_g34
10:46:14 167  ,jpy_g35
10:46:14 168  ,jpy_g36
10:46:14 169  ,jpy_g37
10:46:14 170  ,jpy_g38
10:46:14 171  ,jpy_g39
10:46:14 172  ,jpy_g40
10:46:14 173  ,jpy_g41
10:46:14 174  ,cad_g00
10:46:14 175  ,cad_g01
10:46:14 176  ,cad_g02
10:46:14 177  ,cad_g03
10:46:14 178  ,cad_g04
10:46:14 179  ,cad_g05
10:46:14 180  ,cad_g06
10:46:14 181  ,cad_g07
10:46:14 182  ,cad_g08
10:46:14 183  ,cad_g09
10:46:14 184  ,cad_g10
10:46:14 185  ,cad_g11
10:46:14 186  ,cad_g12
10:46:14 187  ,cad_g13
10:46:14 188  ,cad_g14
10:46:14 189  ,cad_g15
10:46:14 190  ,cad_g16
10:46:14 191  ,cad_g17
10:46:14 192  ,cad_g18
10:46:14 193  ,cad_g19
10:46:14 194  ,cad_g20
10:46:14 195  ,cad_g21
10:46:14 196  ,cad_g22
10:46:14 197  ,cad_g23
10:46:14 198  ,cad_g24
10:46:14 199  ,cad_g25
10:46:14 200  ,cad_g26
10:46:14 201  ,cad_g27
10:46:14 202  ,cad_g28
10:46:14 203  ,cad_g29
10:46:14 204  ,cad_g30
10:46:14 205  ,cad_g31
10:46:14 206  ,cad_g32
10:46:14 207  ,cad_g33
10:46:14 208  ,cad_g34
10:46:14 209  ,cad_g35
10:46:14 210  ,cad_g36
10:46:14 211  ,cad_g37
10:46:14 212  ,cad_g38
10:46:14 213  ,cad_g39
10:46:14 214  ,cad_g40
10:46:14 215  ,cad_g41
10:46:14 216  ,chf_g00
10:46:14 217  ,chf_g01
10:46:14 218  ,chf_g02
10:46:14 219  ,chf_g03
10:46:14 220  ,chf_g04
10:46:14 221  ,chf_g05
10:46:14 222  ,chf_g06
10:46:14 223  ,chf_g07
10:46:14 224  ,chf_g08
10:46:14 225  ,chf_g09
10:46:14 226  ,chf_g10
10:46:14 227  ,chf_g11
10:46:14 228  ,chf_g12
10:46:14 229  ,chf_g13
10:46:14 230  ,chf_g14
10:46:14 231  ,chf_g15
10:46:14 232  ,chf_g16
10:46:14 233  ,chf_g17
10:46:14 234  ,chf_g18
10:46:14 235  ,chf_g19
10:46:14 236  ,chf_g20
10:46:14 237  ,chf_g21
10:46:14 238  ,chf_g22
10:46:14 239  ,chf_g23
10:46:14 240  ,chf_g24
10:46:14 241  ,chf_g25
10:46:14 242  ,chf_g26
10:46:14 243  ,chf_g27
10:46:14 244  ,chf_g28
10:46:14 245  ,chf_g29
10:46:14 246  ,chf_g30
10:46:14 247  ,chf_g31
10:46:14 248  ,chf_g32
10:46:14 249  ,chf_g33
10:46:14 250  ,chf_g34
10:46:14 251  ,chf_g35
10:46:14 252  ,chf_g36
10:46:14 253  ,chf_g37
10:46:14 254  ,chf_g38
10:46:14 255  ,chf_g39
10:46:14 256  ,chf_g40
10:46:14 257  ,chf_g41
10:46:14 258  FROM aud_ms6 m
10:46:14 259  WHERE gatt IN('nup','up')
10:46:14 260  AND 1+m.ydate < '&1'||' '||'&2'
10:46:14 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2011-01-06'||' '||'10:30:00'

View created.

Elapsed: 00:00:00.18
10:46:14 SQL> 
10:46:14 SQL> -- rpt
10:46:14 SQL> 
10:46:14 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt
10:46:14   2  
10:46:14 SQL> SELECT MAX(prdate) FROM bme
10:46:14   2  
10:46:14 SQL> -- Now build model from bme and score sme
10:46:14 SQL> @score1.sql
10:46:14 SQL> -- score1.sql
10:46:14 SQL> 
10:46:14 SQL> -- Does the 1st SVM score
10:46:14 SQL> 
10:46:14 SQL> -- Fill up svmc_apply_prep
10:46:14 SQL> @score.sql
10:46:14 SQL> --
10:46:14 SQL> -- score.sql
10:46:14 SQL> --
10:46:14 SQL> 
10:46:14 SQL> -- usage: score.sql
10:46:14 SQL> 
10:46:14 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
10:46:14 SQL> 
10:46:14 SQL> DEFINE target	= 'gatt'
10:46:14 SQL> DEFINE model_name = 'forex15'
10:46:14 SQL> DEFINE bldtable	= 'bme'
10:46:14 SQL> DEFINE scoretable = 'sme'
10:46:14 SQL> DEFINE case_id	= 'prdate'
10:46:14 SQL> 
10:46:14 SQL> -- Define a variable to help me exclude some columns from some data mining calls
10:46:14 SQL> DEFINE exclude1 = "'&target','&case_id'"
10:46:14 SQL> 
10:46:14 SQL> -- Builds an SVM model using pl/sql.
10:46:14 SQL> 
10:46:14 SQL> -----------------------------------------------------------------------
10:46:14 SQL> --			    BUILD THE MODEL
10:46:14 SQL> -----------------------------------------------------------------------
10:46:14 SQL> 
10:46:14 SQL> -- Cleanup old build data preparation objects for repeat runs
10:46:14 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.01
10:46:14 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
10:46:14 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.01
10:46:14 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.01
10:46:14 SQL> 
10:46:14 SQL> 
10:46:14 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
10:46:14 SQL> --
10:46:14 SQL> -- DROP	TABLE svmc_settings ;
10:46:14 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
10:46:14 SQL> -- DELETE svmc_settings;
10:46:14 SQL> 
10:46:14 SQL> -- The default classification algorithm is Naive Bayes. So override
10:46:14 SQL> -- this choice to SVM using a settings table.
10:46:14 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
10:46:14 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
10:46:14 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
10:46:14 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
10:46:14 SQL> -- models.
10:46:14 SQL> --
10:46:14 SQL> 
10:46:14 SQL> -- Do this once and then comment it out.
10:46:14 SQL> -- That makes script go faster.
10:46:14 SQL> -- BEGIN
10:46:14 SQL> -- -- Populate settings table
10:46:14 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
10:46:14 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
10:46:14 SQL> --
10:46:14 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
10:46:14 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
10:46:14 SQL> --
10:46:14 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
10:46:14 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
10:46:14 SQL> --   COMMIT;
10:46:14 SQL> -- END;
10:46:14 SQL> -- /
10:46:14 SQL> 
10:46:14 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
10:46:14 SQL> 
10:46:14 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
10:46:14   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:46:14   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
10:46:14 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
10:46:14   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:46:14   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
10:46:14 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
10:46:14   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:46:14   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
10:46:14 SQL> 
10:46:14 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
10:46:14   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:46:14   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
10:46:14 SQL> 
10:46:14 SQL> --------------------------------
10:46:14 SQL> -- PREPARE BUILD (TRAINING) DATA
10:46:14 SQL> --
10:46:14 SQL> 
10:46:14 SQL> -- 1. Missing Value treatment for all Predictors and
10:46:14 SQL> -- 2. Outlier Treatment and
10:46:14 SQL> -- 3. Normalization are performed below.
10:46:14 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
10:46:14 SQL> --    normalized here.
10:46:14 SQL> 
10:46:14 SQL> BEGIN
10:46:14   2  	-- Perform missing value treatment for all predictors
10:46:14   3  	-- create miss tables
10:46:14   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
10:46:14   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
10:46:14   6  
10:46:14   7  	-- populate miss tables
10:46:14   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
10:46:14   9  	  miss_table_name => 'svmc_miss_num',
10:46:14  10  	  data_table_name => '&bldtable',
10:46:14  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:46:14  12  
10:46:14  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
10:46:14  14  	  miss_table_name => 'svmc_miss_cat',
10:46:14  15  	  data_table_name => '&bldtable',
10:46:14  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:46:14  17  
10:46:14  18  	-- xform input data to replace missing values
10:46:14  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
10:46:14  20  	  miss_table_name => 'svmc_miss_num',
10:46:14  21  	  data_table_name => '&bldtable',
10:46:14  22  	  xform_view_name => 'xformed_build_miss_num');
10:46:14  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
10:46:14  24  	  miss_table_name => 'svmc_miss_cat',
10:46:14  25  	  data_table_name => '&bldtable',
10:46:14  26  	  xform_view_name => 'xformed_build_miss_cat');
10:46:14  27  
10:46:14  28  	-- Perform outlier treatment.
10:46:14  29  	-- create clip table
10:46:14  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
10:46:14  31  
10:46:14  32  	-- populate clip table
10:46:14  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
10:46:14  34  	  clip_table_name => 'svmc_clip',
10:46:14  35  	  data_table_name => '&bldtable',
10:46:14  36  	  tail_frac	  => 0.025,
10:46:14  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:46:14  38  
10:46:14  39  	-- xform input data to winsorized data
10:46:14  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
10:46:14  41  	  clip_table_name => 'svmc_clip',
10:46:14  42  	  data_table_name => '&bldtable',
10:46:14  43  	  xform_view_name => 'svmc_winsor');
10:46:14  44  
10:46:14  45  	-- create normalization table
10:46:14  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
10:46:14  47  
10:46:14  48  	-- populate normalization table based on winsorized data
10:46:14  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
10:46:14  50  	  norm_table_name => 'svmc_norm',
10:46:14  51  	  data_table_name => 'svmc_winsor',
10:46:14  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:46:14  53  
10:46:14  54  	-- normalize the original data
10:46:14  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
10:46:14  56  	  norm_table_name => 'svmc_norm',
10:46:14  57  	  data_table_name => '&bldtable',
10:46:14  58  	  xform_view_name => 'svmc_build_prep');
10:46:14  59  END;
10:46:14  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:18.17
10:46:32 SQL> 
10:46:32 SQL> ---------------------
10:46:32 SQL> -- CREATE A NEW MODEL
10:46:32 SQL> --
10:46:32 SQL> -- Cleanup old model with the same name for repeat runs
10:46:32 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
10:46:32   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:46:32   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex15');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.09
10:46:34 SQL> 
10:46:34 SQL> -- Build a new SVM Model
10:46:34 SQL> BEGIN
10:46:34   2  	DBMS_DATA_MINING.CREATE_MODEL(
10:46:34   3  	  model_name	      => '&model_name',
10:46:34   4  	  mining_function     => dbms_data_mining.classification,
10:46:34   5  	  data_table_name     => 'svmc_build_prep',
10:46:34   6  	  case_id_column_name => '&case_id',
10:46:34   7  	  target_column_name  => '&target',
10:46:34   8  	  settings_table_name => 'svmc_settings');
10:46:34   9  END;
10:46:34  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex15',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:27.58
10:47:01 SQL> 
10:47:01 SQL> -----------------------------------------------------------------------
10:47:01 SQL> --			       APPLY/score THE MODEL
10:47:01 SQL> -----------------------------------------------------------------------
10:47:01 SQL> 
10:47:01 SQL> -- Cleanup old scoring data preparation objects for repeat runs
10:47:01 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
10:47:01   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:47:01   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
10:47:01 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
10:47:01   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:47:01   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
10:47:01 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
10:47:01   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:47:01   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
10:47:01 SQL> -----------------------
10:47:01 SQL> -- PREPARE SCORING DATA
10:47:01 SQL> --
10:47:01 SQL> -- If the data for model creation has been prepared, then the data
10:47:01 SQL> -- to be scored using the model must be prepared in the same manner
10:47:01 SQL> -- in order to obtain meaningful results.
10:47:01 SQL> --
10:47:01 SQL> -- 1. Missing Value treatment for all Predictors and
10:47:01 SQL> -- 2. Normalization
10:47:01 SQL> -- No outlier treatment will be performed during test and apply. The
10:47:01 SQL> -- normalization step is sufficient, since the normalization parameters
10:47:01 SQL> -- already capture the effects of outlier treatment done with build data.
10:47:01 SQL> --
10:47:01 SQL> BEGIN
10:47:01   2  	-- Xform Test data to replace missing values
10:47:01   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
10:47:01   4  	  miss_table_name => 'svmc_miss_num',
10:47:01   5  	  data_table_name => '&scoretable',
10:47:01   6  	  xform_view_name => 'xformed_apply_miss_num');
10:47:01   7  
10:47:01   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
10:47:01   9  	  miss_table_name => 'svmc_miss_cat',
10:47:01  10  	  data_table_name => '&scoretable',
10:47:01  11  	  xform_view_name => 'xformed_apply_miss_cat');
10:47:01  12  
10:47:01  13  	-- Normalize the data to be scored
10:47:01  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
10:47:01  15  	  norm_table_name => 'svmc_norm',
10:47:01  16  	  data_table_name => '&scoretable',
10:47:01  17  	  xform_view_name => 'svmc_apply_prep');
10:47:01  18  END;
10:47:01  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.28
10:47:03 SQL> 
10:47:03 SQL> -- Use same model_name used in score.sql
10:47:03 SQL> DEFINE model_name = 'forex15'
10:47:03 SQL> 
10:47:03 SQL> -- CREATE TABLE fxscores6 (prdate VARCHAR2(30),score NUMBER,rundate DATE,pair VARCHAR2(8),ydate DATE);
10:47:03 SQL> 
10:47:03 SQL> DELETE fxscores6 WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.03
10:47:03 SQL> 
10:47:03 SQL> INSERT INTO fxscores6 (prdate,score,rundate,pair,ydate)
10:47:03   2  SELECT
10:47:03   3  prdate
10:47:03   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
10:47:03   5  ,sysdate
10:47:03   6  ,SUBSTR(prdate,1,3)pair
10:47:03   7  ,SUBSTR(prdate,4,19)ydate
10:47:03   8  FROM svmc_apply_prep
10:47:03   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex15,'up' USING *)score

1 row created.

Elapsed: 00:00:00.17
10:47:03 SQL> @aud_score1day.sql  2011-01-06 10:35:00
10:47:03 SQL> --
10:47:03 SQL> -- aud_score1day.sql
10:47:03 SQL> --
10:47:03 SQL> 
10:47:03 SQL> CREATE OR REPLACE VIEW sme AS
10:47:03   2  SELECT
10:47:03   3  'aud'||m.ydate prdate
10:47:03   4  ,NULL gatt
10:47:03   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
10:47:03   6  ,eur_g00
10:47:03   7  ,eur_g01
10:47:03   8  ,eur_g02
10:47:03   9  ,eur_g03
10:47:03  10  ,eur_g04
10:47:03  11  ,eur_g05
10:47:03  12  ,eur_g06
10:47:03  13  ,eur_g07
10:47:03  14  ,eur_g08
10:47:03  15  ,eur_g09
10:47:03  16  ,eur_g10
10:47:03  17  ,eur_g11
10:47:03  18  ,eur_g12
10:47:03  19  ,eur_g13
10:47:03  20  ,eur_g14
10:47:03  21  ,eur_g15
10:47:03  22  ,eur_g16
10:47:03  23  ,eur_g17
10:47:03  24  ,eur_g18
10:47:03  25  ,eur_g19
10:47:03  26  ,eur_g20
10:47:03  27  ,eur_g21
10:47:03  28  ,eur_g22
10:47:03  29  ,eur_g23
10:47:03  30  ,eur_g24
10:47:03  31  ,eur_g25
10:47:03  32  ,eur_g26
10:47:03  33  ,eur_g27
10:47:03  34  ,eur_g28
10:47:03  35  ,eur_g29
10:47:03  36  ,eur_g30
10:47:03  37  ,eur_g31
10:47:03  38  ,eur_g32
10:47:03  39  ,eur_g33
10:47:03  40  ,eur_g34
10:47:03  41  ,eur_g35
10:47:03  42  ,eur_g36
10:47:03  43  ,eur_g37
10:47:03  44  ,eur_g38
10:47:03  45  ,eur_g39
10:47:03  46  ,eur_g40
10:47:03  47  ,eur_g41
10:47:03  48  ,aud_g00
10:47:03  49  ,aud_g01
10:47:03  50  ,aud_g02
10:47:03  51  ,aud_g03
10:47:03  52  ,aud_g04
10:47:03  53  ,aud_g05
10:47:03  54  ,aud_g06
10:47:03  55  ,aud_g07
10:47:03  56  ,aud_g08
10:47:03  57  ,aud_g09
10:47:03  58  ,aud_g10
10:47:03  59  ,aud_g11
10:47:03  60  ,aud_g12
10:47:03  61  ,aud_g13
10:47:03  62  ,aud_g14
10:47:03  63  ,aud_g15
10:47:03  64  ,aud_g16
10:47:03  65  ,aud_g17
10:47:03  66  ,aud_g18
10:47:03  67  ,aud_g19
10:47:03  68  ,aud_g20
10:47:03  69  ,aud_g21
10:47:03  70  ,aud_g22
10:47:03  71  ,aud_g23
10:47:03  72  ,aud_g24
10:47:03  73  ,aud_g25
10:47:03  74  ,aud_g26
10:47:03  75  ,aud_g27
10:47:03  76  ,aud_g28
10:47:03  77  ,aud_g29
10:47:03  78  ,aud_g30
10:47:03  79  ,aud_g31
10:47:03  80  ,aud_g32
10:47:03  81  ,aud_g33
10:47:03  82  ,aud_g34
10:47:03  83  ,aud_g35
10:47:03  84  ,aud_g36
10:47:03  85  ,aud_g37
10:47:03  86  ,aud_g38
10:47:03  87  ,aud_g39
10:47:03  88  ,aud_g40
10:47:03  89  ,aud_g41
10:47:03  90  ,gbp_g00
10:47:03  91  ,gbp_g01
10:47:03  92  ,gbp_g02
10:47:03  93  ,gbp_g03
10:47:03  94  ,gbp_g04
10:47:03  95  ,gbp_g05
10:47:03  96  ,gbp_g06
10:47:03  97  ,gbp_g07
10:47:03  98  ,gbp_g08
10:47:03  99  ,gbp_g09
10:47:03 100  ,gbp_g10
10:47:03 101  ,gbp_g11
10:47:03 102  ,gbp_g12
10:47:03 103  ,gbp_g13
10:47:03 104  ,gbp_g14
10:47:03 105  ,gbp_g15
10:47:03 106  ,gbp_g16
10:47:03 107  ,gbp_g17
10:47:03 108  ,gbp_g18
10:47:03 109  ,gbp_g19
10:47:03 110  ,gbp_g20
10:47:03 111  ,gbp_g21
10:47:03 112  ,gbp_g22
10:47:03 113  ,gbp_g23
10:47:03 114  ,gbp_g24
10:47:03 115  ,gbp_g25
10:47:03 116  ,gbp_g26
10:47:03 117  ,gbp_g27
10:47:03 118  ,gbp_g28
10:47:03 119  ,gbp_g29
10:47:03 120  ,gbp_g30
10:47:03 121  ,gbp_g31
10:47:03 122  ,gbp_g32
10:47:03 123  ,gbp_g33
10:47:03 124  ,gbp_g34
10:47:03 125  ,gbp_g35
10:47:03 126  ,gbp_g36
10:47:03 127  ,gbp_g37
10:47:03 128  ,gbp_g38
10:47:03 129  ,gbp_g39
10:47:03 130  ,gbp_g40
10:47:03 131  ,gbp_g41
10:47:03 132  ,jpy_g00
10:47:03 133  ,jpy_g01
10:47:03 134  ,jpy_g02
10:47:03 135  ,jpy_g03
10:47:03 136  ,jpy_g04
10:47:03 137  ,jpy_g05
10:47:03 138  ,jpy_g06
10:47:03 139  ,jpy_g07
10:47:03 140  ,jpy_g08
10:47:03 141  ,jpy_g09
10:47:03 142  ,jpy_g10
10:47:03 143  ,jpy_g11
10:47:03 144  ,jpy_g12
10:47:03 145  ,jpy_g13
10:47:03 146  ,jpy_g14
10:47:03 147  ,jpy_g15
10:47:03 148  ,jpy_g16
10:47:03 149  ,jpy_g17
10:47:03 150  ,jpy_g18
10:47:03 151  ,jpy_g19
10:47:03 152  ,jpy_g20
10:47:03 153  ,jpy_g21
10:47:03 154  ,jpy_g22
10:47:03 155  ,jpy_g23
10:47:03 156  ,jpy_g24
10:47:03 157  ,jpy_g25
10:47:03 158  ,jpy_g26
10:47:03 159  ,jpy_g27
10:47:03 160  ,jpy_g28
10:47:03 161  ,jpy_g29
10:47:03 162  ,jpy_g30
10:47:03 163  ,jpy_g31
10:47:03 164  ,jpy_g32
10:47:03 165  ,jpy_g33
10:47:03 166  ,jpy_g34
10:47:03 167  ,jpy_g35
10:47:03 168  ,jpy_g36
10:47:03 169  ,jpy_g37
10:47:03 170  ,jpy_g38
10:47:03 171  ,jpy_g39
10:47:03 172  ,jpy_g40
10:47:03 173  ,jpy_g41
10:47:03 174  ,cad_g00
10:47:03 175  ,cad_g01
10:47:03 176  ,cad_g02
10:47:03 177  ,cad_g03
10:47:03 178  ,cad_g04
10:47:03 179  ,cad_g05
10:47:03 180  ,cad_g06
10:47:03 181  ,cad_g07
10:47:03 182  ,cad_g08
10:47:03 183  ,cad_g09
10:47:03 184  ,cad_g10
10:47:03 185  ,cad_g11
10:47:03 186  ,cad_g12
10:47:03 187  ,cad_g13
10:47:03 188  ,cad_g14
10:47:03 189  ,cad_g15
10:47:03 190  ,cad_g16
10:47:03 191  ,cad_g17
10:47:03 192  ,cad_g18
10:47:03 193  ,cad_g19
10:47:03 194  ,cad_g20
10:47:03 195  ,cad_g21
10:47:03 196  ,cad_g22
10:47:03 197  ,cad_g23
10:47:03 198  ,cad_g24
10:47:03 199  ,cad_g25
10:47:03 200  ,cad_g26
10:47:03 201  ,cad_g27
10:47:03 202  ,cad_g28
10:47:03 203  ,cad_g29
10:47:03 204  ,cad_g30
10:47:03 205  ,cad_g31
10:47:03 206  ,cad_g32
10:47:03 207  ,cad_g33
10:47:03 208  ,cad_g34
10:47:03 209  ,cad_g35
10:47:03 210  ,cad_g36
10:47:03 211  ,cad_g37
10:47:03 212  ,cad_g38
10:47:03 213  ,cad_g39
10:47:03 214  ,cad_g40
10:47:03 215  ,cad_g41
10:47:03 216  ,chf_g00
10:47:03 217  ,chf_g01
10:47:03 218  ,chf_g02
10:47:03 219  ,chf_g03
10:47:03 220  ,chf_g04
10:47:03 221  ,chf_g05
10:47:03 222  ,chf_g06
10:47:03 223  ,chf_g07
10:47:03 224  ,chf_g08
10:47:03 225  ,chf_g09
10:47:03 226  ,chf_g10
10:47:03 227  ,chf_g11
10:47:03 228  ,chf_g12
10:47:03 229  ,chf_g13
10:47:03 230  ,chf_g14
10:47:03 231  ,chf_g15
10:47:03 232  ,chf_g16
10:47:03 233  ,chf_g17
10:47:03 234  ,chf_g18
10:47:03 235  ,chf_g19
10:47:03 236  ,chf_g20
10:47:03 237  ,chf_g21
10:47:03 238  ,chf_g22
10:47:03 239  ,chf_g23
10:47:03 240  ,chf_g24
10:47:03 241  ,chf_g25
10:47:03 242  ,chf_g26
10:47:03 243  ,chf_g27
10:47:03 244  ,chf_g28
10:47:03 245  ,chf_g29
10:47:03 246  ,chf_g30
10:47:03 247  ,chf_g31
10:47:03 248  ,chf_g32
10:47:03 249  ,chf_g33
10:47:03 250  ,chf_g34
10:47:03 251  ,chf_g35
10:47:03 252  ,chf_g36
10:47:03 253  ,chf_g37
10:47:03 254  ,chf_g38
10:47:03 255  ,chf_g39
10:47:03 256  ,chf_g40
10:47:03 257  ,chf_g41
10:47:03 258  FROM aud_ms6 m
10:47:03 259  WHERE m.ydate = '&1'||' '||'&2'
10:47:03 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2011-01-06'||' '||'10:35:00'

View created.

Elapsed: 00:00:00.13
10:47:03 SQL> 
10:47:03 SQL> -- rpt
10:47:03 SQL> -- We should see just 1 row:
10:47:03 SQL> 
10:47:03 SQL> SELECT COUNT(prdate) FROM sme
10:47:03   2  
10:47:03 SQL> -- Build the model:
10:47:03 SQL> CREATE OR REPLACE VIEW bme AS
10:47:03   2  SELECT
10:47:03   3  'aud'||m.ydate prdate
10:47:03   4  ,gatt
10:47:03   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
10:47:03   6  ,eur_g00
10:47:03   7  ,eur_g01
10:47:03   8  ,eur_g02
10:47:03   9  ,eur_g03
10:47:03  10  ,eur_g04
10:47:03  11  ,eur_g05
10:47:03  12  ,eur_g06
10:47:03  13  ,eur_g07
10:47:03  14  ,eur_g08
10:47:03  15  ,eur_g09
10:47:03  16  ,eur_g10
10:47:03  17  ,eur_g11
10:47:03  18  ,eur_g12
10:47:03  19  ,eur_g13
10:47:03  20  ,eur_g14
10:47:03  21  ,eur_g15
10:47:03  22  ,eur_g16
10:47:03  23  ,eur_g17
10:47:03  24  ,eur_g18
10:47:03  25  ,eur_g19
10:47:03  26  ,eur_g20
10:47:03  27  ,eur_g21
10:47:03  28  ,eur_g22
10:47:03  29  ,eur_g23
10:47:03  30  ,eur_g24
10:47:03  31  ,eur_g25
10:47:03  32  ,eur_g26
10:47:03  33  ,eur_g27
10:47:03  34  ,eur_g28
10:47:03  35  ,eur_g29
10:47:03  36  ,eur_g30
10:47:03  37  ,eur_g31
10:47:03  38  ,eur_g32
10:47:03  39  ,eur_g33
10:47:03  40  ,eur_g34
10:47:03  41  ,eur_g35
10:47:03  42  ,eur_g36
10:47:03  43  ,eur_g37
10:47:03  44  ,eur_g38
10:47:03  45  ,eur_g39
10:47:03  46  ,eur_g40
10:47:03  47  ,eur_g41
10:47:03  48  ,aud_g00
10:47:03  49  ,aud_g01
10:47:03  50  ,aud_g02
10:47:03  51  ,aud_g03
10:47:03  52  ,aud_g04
10:47:03  53  ,aud_g05
10:47:03  54  ,aud_g06
10:47:03  55  ,aud_g07
10:47:03  56  ,aud_g08
10:47:03  57  ,aud_g09
10:47:03  58  ,aud_g10
10:47:03  59  ,aud_g11
10:47:03  60  ,aud_g12
10:47:03  61  ,aud_g13
10:47:03  62  ,aud_g14
10:47:03  63  ,aud_g15
10:47:03  64  ,aud_g16
10:47:03  65  ,aud_g17
10:47:03  66  ,aud_g18
10:47:03  67  ,aud_g19
10:47:03  68  ,aud_g20
10:47:03  69  ,aud_g21
10:47:03  70  ,aud_g22
10:47:03  71  ,aud_g23
10:47:03  72  ,aud_g24
10:47:03  73  ,aud_g25
10:47:03  74  ,aud_g26
10:47:03  75  ,aud_g27
10:47:03  76  ,aud_g28
10:47:03  77  ,aud_g29
10:47:03  78  ,aud_g30
10:47:03  79  ,aud_g31
10:47:03  80  ,aud_g32
10:47:03  81  ,aud_g33
10:47:03  82  ,aud_g34
10:47:03  83  ,aud_g35
10:47:03  84  ,aud_g36
10:47:03  85  ,aud_g37
10:47:03  86  ,aud_g38
10:47:03  87  ,aud_g39
10:47:03  88  ,aud_g40
10:47:03  89  ,aud_g41
10:47:03  90  ,gbp_g00
10:47:03  91  ,gbp_g01
10:47:03  92  ,gbp_g02
10:47:03  93  ,gbp_g03
10:47:03  94  ,gbp_g04
10:47:03  95  ,gbp_g05
10:47:03  96  ,gbp_g06
10:47:03  97  ,gbp_g07
10:47:03  98  ,gbp_g08
10:47:03  99  ,gbp_g09
10:47:03 100  ,gbp_g10
10:47:03 101  ,gbp_g11
10:47:03 102  ,gbp_g12
10:47:03 103  ,gbp_g13
10:47:03 104  ,gbp_g14
10:47:03 105  ,gbp_g15
10:47:03 106  ,gbp_g16
10:47:03 107  ,gbp_g17
10:47:03 108  ,gbp_g18
10:47:03 109  ,gbp_g19
10:47:03 110  ,gbp_g20
10:47:03 111  ,gbp_g21
10:47:03 112  ,gbp_g22
10:47:03 113  ,gbp_g23
10:47:03 114  ,gbp_g24
10:47:03 115  ,gbp_g25
10:47:03 116  ,gbp_g26
10:47:03 117  ,gbp_g27
10:47:03 118  ,gbp_g28
10:47:03 119  ,gbp_g29
10:47:03 120  ,gbp_g30
10:47:03 121  ,gbp_g31
10:47:03 122  ,gbp_g32
10:47:03 123  ,gbp_g33
10:47:03 124  ,gbp_g34
10:47:03 125  ,gbp_g35
10:47:03 126  ,gbp_g36
10:47:03 127  ,gbp_g37
10:47:03 128  ,gbp_g38
10:47:03 129  ,gbp_g39
10:47:03 130  ,gbp_g40
10:47:03 131  ,gbp_g41
10:47:03 132  ,jpy_g00
10:47:03 133  ,jpy_g01
10:47:03 134  ,jpy_g02
10:47:03 135  ,jpy_g03
10:47:03 136  ,jpy_g04
10:47:03 137  ,jpy_g05
10:47:03 138  ,jpy_g06
10:47:03 139  ,jpy_g07
10:47:03 140  ,jpy_g08
10:47:03 141  ,jpy_g09
10:47:03 142  ,jpy_g10
10:47:03 143  ,jpy_g11
10:47:03 144  ,jpy_g12
10:47:03 145  ,jpy_g13
10:47:03 146  ,jpy_g14
10:47:03 147  ,jpy_g15
10:47:03 148  ,jpy_g16
10:47:03 149  ,jpy_g17
10:47:03 150  ,jpy_g18
10:47:03 151  ,jpy_g19
10:47:03 152  ,jpy_g20
10:47:03 153  ,jpy_g21
10:47:03 154  ,jpy_g22
10:47:03 155  ,jpy_g23
10:47:03 156  ,jpy_g24
10:47:03 157  ,jpy_g25
10:47:03 158  ,jpy_g26
10:47:03 159  ,jpy_g27
10:47:03 160  ,jpy_g28
10:47:03 161  ,jpy_g29
10:47:03 162  ,jpy_g30
10:47:03 163  ,jpy_g31
10:47:03 164  ,jpy_g32
10:47:03 165  ,jpy_g33
10:47:03 166  ,jpy_g34
10:47:03 167  ,jpy_g35
10:47:03 168  ,jpy_g36
10:47:03 169  ,jpy_g37
10:47:03 170  ,jpy_g38
10:47:03 171  ,jpy_g39
10:47:03 172  ,jpy_g40
10:47:03 173  ,jpy_g41
10:47:03 174  ,cad_g00
10:47:03 175  ,cad_g01
10:47:03 176  ,cad_g02
10:47:03 177  ,cad_g03
10:47:03 178  ,cad_g04
10:47:03 179  ,cad_g05
10:47:03 180  ,cad_g06
10:47:03 181  ,cad_g07
10:47:03 182  ,cad_g08
10:47:03 183  ,cad_g09
10:47:03 184  ,cad_g10
10:47:03 185  ,cad_g11
10:47:03 186  ,cad_g12
10:47:03 187  ,cad_g13
10:47:03 188  ,cad_g14
10:47:03 189  ,cad_g15
10:47:03 190  ,cad_g16
10:47:03 191  ,cad_g17
10:47:03 192  ,cad_g18
10:47:03 193  ,cad_g19
10:47:03 194  ,cad_g20
10:47:03 195  ,cad_g21
10:47:03 196  ,cad_g22
10:47:03 197  ,cad_g23
10:47:03 198  ,cad_g24
10:47:03 199  ,cad_g25
10:47:03 200  ,cad_g26
10:47:03 201  ,cad_g27
10:47:03 202  ,cad_g28
10:47:03 203  ,cad_g29
10:47:03 204  ,cad_g30
10:47:03 205  ,cad_g31
10:47:03 206  ,cad_g32
10:47:03 207  ,cad_g33
10:47:03 208  ,cad_g34
10:47:03 209  ,cad_g35
10:47:03 210  ,cad_g36
10:47:03 211  ,cad_g37
10:47:03 212  ,cad_g38
10:47:03 213  ,cad_g39
10:47:03 214  ,cad_g40
10:47:03 215  ,cad_g41
10:47:03 216  ,chf_g00
10:47:03 217  ,chf_g01
10:47:03 218  ,chf_g02
10:47:03 219  ,chf_g03
10:47:03 220  ,chf_g04
10:47:03 221  ,chf_g05
10:47:03 222  ,chf_g06
10:47:03 223  ,chf_g07
10:47:03 224  ,chf_g08
10:47:03 225  ,chf_g09
10:47:03 226  ,chf_g10
10:47:03 227  ,chf_g11
10:47:03 228  ,chf_g12
10:47:03 229  ,chf_g13
10:47:03 230  ,chf_g14
10:47:03 231  ,chf_g15
10:47:03 232  ,chf_g16
10:47:03 233  ,chf_g17
10:47:03 234  ,chf_g18
10:47:03 235  ,chf_g19
10:47:03 236  ,chf_g20
10:47:03 237  ,chf_g21
10:47:03 238  ,chf_g22
10:47:03 239  ,chf_g23
10:47:03 240  ,chf_g24
10:47:03 241  ,chf_g25
10:47:03 242  ,chf_g26
10:47:03 243  ,chf_g27
10:47:03 244  ,chf_g28
10:47:03 245  ,chf_g29
10:47:03 246  ,chf_g30
10:47:03 247  ,chf_g31
10:47:03 248  ,chf_g32
10:47:03 249  ,chf_g33
10:47:03 250  ,chf_g34
10:47:03 251  ,chf_g35
10:47:03 252  ,chf_g36
10:47:03 253  ,chf_g37
10:47:03 254  ,chf_g38
10:47:03 255  ,chf_g39
10:47:03 256  ,chf_g40
10:47:03 257  ,chf_g41
10:47:03 258  FROM aud_ms6 m
10:47:03 259  WHERE gatt IN('nup','up')
10:47:03 260  AND 1+m.ydate < '&1'||' '||'&2'
10:47:03 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2011-01-06'||' '||'10:35:00'

View created.

Elapsed: 00:00:00.13
10:47:03 SQL> 
10:47:03 SQL> -- rpt
10:47:03 SQL> 
10:47:03 SQL> SELECT gatt, COUNT(prdate) FROM bme GROUP BY gatt
10:47:03   2  
10:47:03 SQL> SELECT MAX(prdate) FROM bme
10:47:03   2  
10:47:03 SQL> -- Now build model from bme and score sme
10:47:03 SQL> @score1.sql
10:47:03 SQL> -- score1.sql
10:47:03 SQL> 
10:47:03 SQL> -- Does the 1st SVM score
10:47:03 SQL> 
10:47:03 SQL> -- Fill up svmc_apply_prep
10:47:03 SQL> @score.sql
10:47:03 SQL> --
10:47:03 SQL> -- score.sql
10:47:03 SQL> --
10:47:03 SQL> 
10:47:03 SQL> -- usage: score.sql
10:47:03 SQL> 
10:47:03 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
10:47:03 SQL> 
10:47:03 SQL> DEFINE target	= 'gatt'
10:47:03 SQL> DEFINE model_name = 'forex15'
10:47:03 SQL> DEFINE bldtable	= 'bme'
10:47:03 SQL> DEFINE scoretable = 'sme'
10:47:03 SQL> DEFINE case_id	= 'prdate'
10:47:03 SQL> 
10:47:03 SQL> -- Define a variable to help me exclude some columns from some data mining calls
10:47:03 SQL> DEFINE exclude1 = "'&target','&case_id'"
10:47:03 SQL> 
10:47:03 SQL> -- Builds an SVM model using pl/sql.
10:47:03 SQL> 
10:47:03 SQL> -----------------------------------------------------------------------
10:47:03 SQL> --			    BUILD THE MODEL
10:47:03 SQL> -----------------------------------------------------------------------
10:47:03 SQL> 
10:47:03 SQL> -- Cleanup old build data preparation objects for repeat runs
10:47:03 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.00
10:47:03 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
10:47:03 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.01
10:47:03 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.00
10:47:03 SQL> 
10:47:03 SQL> 
10:47:03 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
10:47:03 SQL> --
10:47:03 SQL> -- DROP	TABLE svmc_settings ;
10:47:03 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
10:47:03 SQL> -- DELETE svmc_settings;
10:47:03 SQL> 
10:47:03 SQL> -- The default classification algorithm is Naive Bayes. So override
10:47:03 SQL> -- this choice to SVM using a settings table.
10:47:03 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
10:47:03 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
10:47:03 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
10:47:03 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
10:47:03 SQL> -- models.
10:47:03 SQL> --
10:47:03 SQL> 
10:47:03 SQL> -- Do this once and then comment it out.
10:47:03 SQL> -- That makes script go faster.
10:47:03 SQL> -- BEGIN
10:47:03 SQL> -- -- Populate settings table
10:47:03 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
10:47:03 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
10:47:03 SQL> --
10:47:03 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
10:47:03 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
10:47:03 SQL> --
10:47:03 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
10:47:03 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
10:47:03 SQL> --   COMMIT;
10:47:03 SQL> -- END;
10:47:03 SQL> -- /
10:47:03 SQL> 
10:47:03 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
10:47:03 SQL> 
10:47:03 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
10:47:03   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:47:03   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
10:47:03 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
10:47:03   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:47:03   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
10:47:03 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
10:47:03   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:47:03   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
10:47:03 SQL> 
10:47:03 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
10:47:03   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:47:03   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.10
10:47:03 SQL> 
10:47:03 SQL> --------------------------------
10:47:03 SQL> -- PREPARE BUILD (TRAINING) DATA
10:47:03 SQL> --
10:47:03 SQL> 
10:47:03 SQL> -- 1. Missing Value treatment for all Predictors and
10:47:03 SQL> -- 2. Outlier Treatment and
10:47:03 SQL> -- 3. Normalization are performed below.
10:47:03 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
10:47:03 SQL> --    normalized here.
10:47:03 SQL> 
10:47:03 SQL> BEGIN
10:47:03   2  	-- Perform missing value treatment for all predictors
10:47:03   3  	-- create miss tables
10:47:03   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
10:47:03   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
10:47:03   6  
10:47:03   7  	-- populate miss tables
10:47:03   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
10:47:03   9  	  miss_table_name => 'svmc_miss_num',
10:47:03  10  	  data_table_name => '&bldtable',
10:47:03  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:47:03  12  
10:47:03  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
10:47:03  14  	  miss_table_name => 'svmc_miss_cat',
10:47:03  15  	  data_table_name => '&bldtable',
10:47:03  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:47:03  17  
10:47:03  18  	-- xform input data to replace missing values
10:47:03  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
10:47:03  20  	  miss_table_name => 'svmc_miss_num',
10:47:03  21  	  data_table_name => '&bldtable',
10:47:03  22  	  xform_view_name => 'xformed_build_miss_num');
10:47:03  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
10:47:03  24  	  miss_table_name => 'svmc_miss_cat',
10:47:03  25  	  data_table_name => '&bldtable',
10:47:03  26  	  xform_view_name => 'xformed_build_miss_cat');
10:47:03  27  
10:47:03  28  	-- Perform outlier treatment.
10:47:03  29  	-- create clip table
10:47:03  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
10:47:03  31  
10:47:03  32  	-- populate clip table
10:47:03  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
10:47:03  34  	  clip_table_name => 'svmc_clip',
10:47:03  35  	  data_table_name => '&bldtable',
10:47:03  36  	  tail_frac	  => 0.025,
10:47:03  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:47:03  38  
10:47:03  39  	-- xform input data to winsorized data
10:47:03  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
10:47:03  41  	  clip_table_name => 'svmc_clip',
10:47:03  42  	  data_table_name => '&bldtable',
10:47:03  43  	  xform_view_name => 'svmc_winsor');
10:47:03  44  
10:47:03  45  	-- create normalization table
10:47:03  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
10:47:03  47  
10:47:03  48  	-- populate normalization table based on winsorized data
10:47:03  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
10:47:03  50  	  norm_table_name => 'svmc_norm',
10:47:03  51  	  data_table_name => 'svmc_winsor',
10:47:03  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:47:03  53  
10:47:03  54  	-- normalize the original data
10:47:03  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
10:47:03  56  	  norm_table_name => 'svmc_norm',
10:47:03  57  	  data_table_name => '&bldtable',
10:47:03  58  	  xform_view_name => 'svmc_build_prep');
10:47:03  59  END;
10:47:03  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gatt','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:18.08
10:47:22 SQL> 
10:47:22 SQL> ---------------------
10:47:22 SQL> -- CREATE A NEW MODEL
10:47:22 SQL> --
10:47:22 SQL> -- Cleanup old model with the same name for repeat runs
10:47:22 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
10:47:22   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:47:22   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex15');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.04
10:47:23 SQL> 
10:47:23 SQL> -- Build a new SVM Model
10:47:23 SQL> BEGIN
10:47:23   2  	DBMS_DATA_MINING.CREATE_MODEL(
10:47:23   3  	  model_name	      => '&model_name',
10:47:23   4  	  mining_function     => dbms_data_mining.classification,
10:47:23   5  	  data_table_name     => 'svmc_build_prep',
10:47:23   6  	  case_id_column_name => '&case_id',
10:47:23   7  	  target_column_name  => '&target',
10:47:23   8  	  settings_table_name => 'svmc_settings');
10:47:23   9  END;
10:47:23  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex15',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gatt',

PL/SQL procedure successfully completed.

Elapsed: 00:00:27.46
10:47:50 SQL> 
10:47:50 SQL> -----------------------------------------------------------------------
10:47:50 SQL> --			       APPLY/score THE MODEL
10:47:50 SQL> -----------------------------------------------------------------------
10:47:50 SQL> 
10:47:50 SQL> -- Cleanup old scoring data preparation objects for repeat runs
10:47:50 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
10:47:50   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:47:50   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.04
10:47:50 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
10:47:50   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:47:50   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
10:47:50 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
10:47:50   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:47:50   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
10:47:50 SQL> -----------------------
10:47:50 SQL> -- PREPARE SCORING DATA
10:47:50 SQL> --
10:47:50 SQL> -- If the data for model creation has been prepared, then the data
10:47:50 SQL> -- to be scored using the model must be prepared in the same manner
10:47:50 SQL> -- in order to obtain meaningful results.
10:47:50 SQL> --
10:47:50 SQL> -- 1. Missing Value treatment for all Predictors and
10:47:50 SQL> -- 2. Normalization
10:47:50 SQL> -- No outlier treatment will be performed during test and apply. The
10:47:50 SQL> -- normalization step is sufficient, since the normalization parameters
10:47:50 SQL> -- already capture the effects of outlier treatment done with build data.
10:47:50 SQL> --
10:47:50 SQL> BEGIN
10:47:50   2  	-- Xform Test data to replace missing values
10:47:50   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
10:47:50   4  	  miss_table_name => 'svmc_miss_num',
10:47:50   5  	  data_table_name => '&scoretable',
10:47:50   6  	  xform_view_name => 'xformed_apply_miss_num');
10:47:50   7  
10:47:50   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
10:47:50   9  	  miss_table_name => 'svmc_miss_cat',
10:47:50  10  	  data_table_name => '&scoretable',
10:47:50  11  	  xform_view_name => 'xformed_apply_miss_cat');
10:47:50  12  
10:47:50  13  	-- Normalize the data to be scored
10:47:50  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
10:47:50  15  	  norm_table_name => 'svmc_norm',
10:47:50  16  	  data_table_name => '&scoretable',
10:47:50  17  	  xform_view_name => 'svmc_apply_prep');
10:47:50  18  END;
10:47:50  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.24
10:47:51 SQL> 
10:47:51 SQL> -- Use same model_name used in score.sql
10:47:51 SQL> DEFINE model_name = 'forex15'
10:47:51 SQL> 
10:47:51 SQL> -- CREATE TABLE fxscores6 (prdate VARCHAR2(30),score NUMBER,rundate DATE,pair VARCHAR2(8),ydate DATE);
10:47:51 SQL> 
10:47:51 SQL> DELETE fxscores6 WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.04
10:47:51 SQL> 
10:47:51 SQL> INSERT INTO fxscores6 (prdate,score,rundate,pair,ydate)
10:47:51   2  SELECT
10:47:51   3  prdate
10:47:51   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
10:47:51   5  ,sysdate
10:47:51   6  ,SUBSTR(prdate,1,3)pair
10:47:51   7  ,SUBSTR(prdate,4,19)ydate
10:47:51   8  FROM svmc_apply_prep
10:47:51   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex15,'up' USING *)score

1 row created.

Elapsed: 00:00:00.17
10:47:52 SQL> @aud_score1day_gattn.sql	2011-01-06 10:20:00
10:47:52 SQL> --
10:47:52 SQL> -- aud_score1day_gattn.sql
10:47:52 SQL> --
10:47:52 SQL> 
10:47:52 SQL> CREATE OR REPLACE VIEW sme AS
10:47:52   2  SELECT
10:47:52   3  'aud'||m.ydate prdate
10:47:52   4  ,NULL gattn
10:47:52   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
10:47:52   6  ,eur_g00
10:47:52   7  ,eur_g01
10:47:52   8  ,eur_g02
10:47:52   9  ,eur_g03
10:47:52  10  ,eur_g04
10:47:52  11  ,eur_g05
10:47:52  12  ,eur_g06
10:47:52  13  ,eur_g07
10:47:52  14  ,eur_g08
10:47:52  15  ,eur_g09
10:47:52  16  ,eur_g10
10:47:52  17  ,eur_g11
10:47:52  18  ,eur_g12
10:47:52  19  ,eur_g13
10:47:52  20  ,eur_g14
10:47:52  21  ,eur_g15
10:47:52  22  ,eur_g16
10:47:52  23  ,eur_g17
10:47:52  24  ,eur_g18
10:47:52  25  ,eur_g19
10:47:52  26  ,eur_g20
10:47:52  27  ,eur_g21
10:47:52  28  ,eur_g22
10:47:52  29  ,eur_g23
10:47:52  30  ,eur_g24
10:47:52  31  ,eur_g25
10:47:52  32  ,eur_g26
10:47:52  33  ,eur_g27
10:47:52  34  ,eur_g28
10:47:52  35  ,eur_g29
10:47:52  36  ,eur_g30
10:47:52  37  ,eur_g31
10:47:52  38  ,eur_g32
10:47:52  39  ,eur_g33
10:47:52  40  ,eur_g34
10:47:52  41  ,eur_g35
10:47:52  42  ,eur_g36
10:47:52  43  ,eur_g37
10:47:52  44  ,eur_g38
10:47:52  45  ,eur_g39
10:47:52  46  ,eur_g40
10:47:52  47  ,eur_g41
10:47:52  48  ,aud_g00
10:47:52  49  ,aud_g01
10:47:52  50  ,aud_g02
10:47:52  51  ,aud_g03
10:47:52  52  ,aud_g04
10:47:52  53  ,aud_g05
10:47:52  54  ,aud_g06
10:47:52  55  ,aud_g07
10:47:52  56  ,aud_g08
10:47:52  57  ,aud_g09
10:47:52  58  ,aud_g10
10:47:52  59  ,aud_g11
10:47:52  60  ,aud_g12
10:47:52  61  ,aud_g13
10:47:52  62  ,aud_g14
10:47:52  63  ,aud_g15
10:47:52  64  ,aud_g16
10:47:52  65  ,aud_g17
10:47:52  66  ,aud_g18
10:47:52  67  ,aud_g19
10:47:52  68  ,aud_g20
10:47:52  69  ,aud_g21
10:47:52  70  ,aud_g22
10:47:52  71  ,aud_g23
10:47:52  72  ,aud_g24
10:47:52  73  ,aud_g25
10:47:52  74  ,aud_g26
10:47:52  75  ,aud_g27
10:47:52  76  ,aud_g28
10:47:52  77  ,aud_g29
10:47:52  78  ,aud_g30
10:47:52  79  ,aud_g31
10:47:52  80  ,aud_g32
10:47:52  81  ,aud_g33
10:47:52  82  ,aud_g34
10:47:52  83  ,aud_g35
10:47:52  84  ,aud_g36
10:47:52  85  ,aud_g37
10:47:52  86  ,aud_g38
10:47:52  87  ,aud_g39
10:47:52  88  ,aud_g40
10:47:52  89  ,aud_g41
10:47:52  90  ,gbp_g00
10:47:52  91  ,gbp_g01
10:47:52  92  ,gbp_g02
10:47:52  93  ,gbp_g03
10:47:52  94  ,gbp_g04
10:47:52  95  ,gbp_g05
10:47:52  96  ,gbp_g06
10:47:52  97  ,gbp_g07
10:47:52  98  ,gbp_g08
10:47:52  99  ,gbp_g09
10:47:52 100  ,gbp_g10
10:47:52 101  ,gbp_g11
10:47:52 102  ,gbp_g12
10:47:52 103  ,gbp_g13
10:47:52 104  ,gbp_g14
10:47:52 105  ,gbp_g15
10:47:52 106  ,gbp_g16
10:47:52 107  ,gbp_g17
10:47:52 108  ,gbp_g18
10:47:52 109  ,gbp_g19
10:47:52 110  ,gbp_g20
10:47:52 111  ,gbp_g21
10:47:52 112  ,gbp_g22
10:47:52 113  ,gbp_g23
10:47:52 114  ,gbp_g24
10:47:52 115  ,gbp_g25
10:47:52 116  ,gbp_g26
10:47:52 117  ,gbp_g27
10:47:52 118  ,gbp_g28
10:47:52 119  ,gbp_g29
10:47:52 120  ,gbp_g30
10:47:52 121  ,gbp_g31
10:47:52 122  ,gbp_g32
10:47:52 123  ,gbp_g33
10:47:52 124  ,gbp_g34
10:47:52 125  ,gbp_g35
10:47:52 126  ,gbp_g36
10:47:52 127  ,gbp_g37
10:47:52 128  ,gbp_g38
10:47:52 129  ,gbp_g39
10:47:52 130  ,gbp_g40
10:47:52 131  ,gbp_g41
10:47:52 132  ,jpy_g00
10:47:52 133  ,jpy_g01
10:47:52 134  ,jpy_g02
10:47:52 135  ,jpy_g03
10:47:52 136  ,jpy_g04
10:47:52 137  ,jpy_g05
10:47:52 138  ,jpy_g06
10:47:52 139  ,jpy_g07
10:47:52 140  ,jpy_g08
10:47:52 141  ,jpy_g09
10:47:52 142  ,jpy_g10
10:47:52 143  ,jpy_g11
10:47:52 144  ,jpy_g12
10:47:52 145  ,jpy_g13
10:47:52 146  ,jpy_g14
10:47:52 147  ,jpy_g15
10:47:52 148  ,jpy_g16
10:47:52 149  ,jpy_g17
10:47:52 150  ,jpy_g18
10:47:52 151  ,jpy_g19
10:47:52 152  ,jpy_g20
10:47:52 153  ,jpy_g21
10:47:52 154  ,jpy_g22
10:47:52 155  ,jpy_g23
10:47:52 156  ,jpy_g24
10:47:52 157  ,jpy_g25
10:47:52 158  ,jpy_g26
10:47:52 159  ,jpy_g27
10:47:52 160  ,jpy_g28
10:47:52 161  ,jpy_g29
10:47:52 162  ,jpy_g30
10:47:52 163  ,jpy_g31
10:47:52 164  ,jpy_g32
10:47:52 165  ,jpy_g33
10:47:52 166  ,jpy_g34
10:47:52 167  ,jpy_g35
10:47:52 168  ,jpy_g36
10:47:52 169  ,jpy_g37
10:47:52 170  ,jpy_g38
10:47:52 171  ,jpy_g39
10:47:52 172  ,jpy_g40
10:47:52 173  ,jpy_g41
10:47:52 174  ,cad_g00
10:47:52 175  ,cad_g01
10:47:52 176  ,cad_g02
10:47:52 177  ,cad_g03
10:47:52 178  ,cad_g04
10:47:52 179  ,cad_g05
10:47:52 180  ,cad_g06
10:47:52 181  ,cad_g07
10:47:52 182  ,cad_g08
10:47:52 183  ,cad_g09
10:47:52 184  ,cad_g10
10:47:52 185  ,cad_g11
10:47:52 186  ,cad_g12
10:47:52 187  ,cad_g13
10:47:52 188  ,cad_g14
10:47:52 189  ,cad_g15
10:47:52 190  ,cad_g16
10:47:52 191  ,cad_g17
10:47:52 192  ,cad_g18
10:47:52 193  ,cad_g19
10:47:52 194  ,cad_g20
10:47:52 195  ,cad_g21
10:47:52 196  ,cad_g22
10:47:52 197  ,cad_g23
10:47:52 198  ,cad_g24
10:47:52 199  ,cad_g25
10:47:52 200  ,cad_g26
10:47:52 201  ,cad_g27
10:47:52 202  ,cad_g28
10:47:52 203  ,cad_g29
10:47:52 204  ,cad_g30
10:47:52 205  ,cad_g31
10:47:52 206  ,cad_g32
10:47:52 207  ,cad_g33
10:47:52 208  ,cad_g34
10:47:52 209  ,cad_g35
10:47:52 210  ,cad_g36
10:47:52 211  ,cad_g37
10:47:52 212  ,cad_g38
10:47:52 213  ,cad_g39
10:47:52 214  ,cad_g40
10:47:52 215  ,cad_g41
10:47:52 216  ,chf_g00
10:47:52 217  ,chf_g01
10:47:52 218  ,chf_g02
10:47:52 219  ,chf_g03
10:47:52 220  ,chf_g04
10:47:52 221  ,chf_g05
10:47:52 222  ,chf_g06
10:47:52 223  ,chf_g07
10:47:52 224  ,chf_g08
10:47:52 225  ,chf_g09
10:47:52 226  ,chf_g10
10:47:52 227  ,chf_g11
10:47:52 228  ,chf_g12
10:47:52 229  ,chf_g13
10:47:52 230  ,chf_g14
10:47:52 231  ,chf_g15
10:47:52 232  ,chf_g16
10:47:52 233  ,chf_g17
10:47:52 234  ,chf_g18
10:47:52 235  ,chf_g19
10:47:52 236  ,chf_g20
10:47:52 237  ,chf_g21
10:47:52 238  ,chf_g22
10:47:52 239  ,chf_g23
10:47:52 240  ,chf_g24
10:47:52 241  ,chf_g25
10:47:52 242  ,chf_g26
10:47:52 243  ,chf_g27
10:47:52 244  ,chf_g28
10:47:52 245  ,chf_g29
10:47:52 246  ,chf_g30
10:47:52 247  ,chf_g31
10:47:52 248  ,chf_g32
10:47:52 249  ,chf_g33
10:47:52 250  ,chf_g34
10:47:52 251  ,chf_g35
10:47:52 252  ,chf_g36
10:47:52 253  ,chf_g37
10:47:52 254  ,chf_g38
10:47:52 255  ,chf_g39
10:47:52 256  ,chf_g40
10:47:52 257  ,chf_g41
10:47:52 258  FROM aud_ms6 m
10:47:52 259  WHERE m.ydate = '&1'||' '||'&2'
10:47:52 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2011-01-06'||' '||'10:20:00'

View created.

Elapsed: 00:00:00.12
10:47:52 SQL> 
10:47:52 SQL> -- rpt
10:47:52 SQL> -- We should see just 1 row:
10:47:52 SQL> 
10:47:52 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
10:47:52 SQL> 
10:47:52 SQL> -- Build the model:
10:47:52 SQL> CREATE OR REPLACE VIEW bme AS
10:47:52   2  SELECT
10:47:52   3  'aud'||m.ydate prdate
10:47:52   4  ,gattn
10:47:52   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
10:47:52   6  ,eur_g00
10:47:52   7  ,eur_g01
10:47:52   8  ,eur_g02
10:47:52   9  ,eur_g03
10:47:52  10  ,eur_g04
10:47:52  11  ,eur_g05
10:47:52  12  ,eur_g06
10:47:52  13  ,eur_g07
10:47:52  14  ,eur_g08
10:47:52  15  ,eur_g09
10:47:52  16  ,eur_g10
10:47:52  17  ,eur_g11
10:47:52  18  ,eur_g12
10:47:52  19  ,eur_g13
10:47:52  20  ,eur_g14
10:47:52  21  ,eur_g15
10:47:52  22  ,eur_g16
10:47:52  23  ,eur_g17
10:47:52  24  ,eur_g18
10:47:52  25  ,eur_g19
10:47:52  26  ,eur_g20
10:47:52  27  ,eur_g21
10:47:52  28  ,eur_g22
10:47:52  29  ,eur_g23
10:47:52  30  ,eur_g24
10:47:52  31  ,eur_g25
10:47:52  32  ,eur_g26
10:47:52  33  ,eur_g27
10:47:52  34  ,eur_g28
10:47:52  35  ,eur_g29
10:47:52  36  ,eur_g30
10:47:52  37  ,eur_g31
10:47:52  38  ,eur_g32
10:47:52  39  ,eur_g33
10:47:52  40  ,eur_g34
10:47:52  41  ,eur_g35
10:47:52  42  ,eur_g36
10:47:52  43  ,eur_g37
10:47:52  44  ,eur_g38
10:47:52  45  ,eur_g39
10:47:52  46  ,eur_g40
10:47:52  47  ,eur_g41
10:47:52  48  ,aud_g00
10:47:52  49  ,aud_g01
10:47:52  50  ,aud_g02
10:47:52  51  ,aud_g03
10:47:52  52  ,aud_g04
10:47:52  53  ,aud_g05
10:47:52  54  ,aud_g06
10:47:52  55  ,aud_g07
10:47:52  56  ,aud_g08
10:47:52  57  ,aud_g09
10:47:52  58  ,aud_g10
10:47:52  59  ,aud_g11
10:47:52  60  ,aud_g12
10:47:52  61  ,aud_g13
10:47:52  62  ,aud_g14
10:47:52  63  ,aud_g15
10:47:52  64  ,aud_g16
10:47:52  65  ,aud_g17
10:47:52  66  ,aud_g18
10:47:52  67  ,aud_g19
10:47:52  68  ,aud_g20
10:47:52  69  ,aud_g21
10:47:52  70  ,aud_g22
10:47:52  71  ,aud_g23
10:47:52  72  ,aud_g24
10:47:52  73  ,aud_g25
10:47:52  74  ,aud_g26
10:47:52  75  ,aud_g27
10:47:52  76  ,aud_g28
10:47:52  77  ,aud_g29
10:47:52  78  ,aud_g30
10:47:52  79  ,aud_g31
10:47:52  80  ,aud_g32
10:47:52  81  ,aud_g33
10:47:52  82  ,aud_g34
10:47:52  83  ,aud_g35
10:47:52  84  ,aud_g36
10:47:52  85  ,aud_g37
10:47:52  86  ,aud_g38
10:47:52  87  ,aud_g39
10:47:52  88  ,aud_g40
10:47:52  89  ,aud_g41
10:47:52  90  ,gbp_g00
10:47:52  91  ,gbp_g01
10:47:52  92  ,gbp_g02
10:47:52  93  ,gbp_g03
10:47:52  94  ,gbp_g04
10:47:52  95  ,gbp_g05
10:47:52  96  ,gbp_g06
10:47:52  97  ,gbp_g07
10:47:52  98  ,gbp_g08
10:47:52  99  ,gbp_g09
10:47:52 100  ,gbp_g10
10:47:52 101  ,gbp_g11
10:47:52 102  ,gbp_g12
10:47:52 103  ,gbp_g13
10:47:52 104  ,gbp_g14
10:47:52 105  ,gbp_g15
10:47:52 106  ,gbp_g16
10:47:52 107  ,gbp_g17
10:47:52 108  ,gbp_g18
10:47:52 109  ,gbp_g19
10:47:52 110  ,gbp_g20
10:47:52 111  ,gbp_g21
10:47:52 112  ,gbp_g22
10:47:52 113  ,gbp_g23
10:47:52 114  ,gbp_g24
10:47:52 115  ,gbp_g25
10:47:52 116  ,gbp_g26
10:47:52 117  ,gbp_g27
10:47:52 118  ,gbp_g28
10:47:52 119  ,gbp_g29
10:47:52 120  ,gbp_g30
10:47:52 121  ,gbp_g31
10:47:52 122  ,gbp_g32
10:47:52 123  ,gbp_g33
10:47:52 124  ,gbp_g34
10:47:52 125  ,gbp_g35
10:47:52 126  ,gbp_g36
10:47:52 127  ,gbp_g37
10:47:52 128  ,gbp_g38
10:47:52 129  ,gbp_g39
10:47:52 130  ,gbp_g40
10:47:52 131  ,gbp_g41
10:47:52 132  ,jpy_g00
10:47:52 133  ,jpy_g01
10:47:52 134  ,jpy_g02
10:47:52 135  ,jpy_g03
10:47:52 136  ,jpy_g04
10:47:52 137  ,jpy_g05
10:47:52 138  ,jpy_g06
10:47:52 139  ,jpy_g07
10:47:52 140  ,jpy_g08
10:47:52 141  ,jpy_g09
10:47:52 142  ,jpy_g10
10:47:52 143  ,jpy_g11
10:47:52 144  ,jpy_g12
10:47:52 145  ,jpy_g13
10:47:52 146  ,jpy_g14
10:47:52 147  ,jpy_g15
10:47:52 148  ,jpy_g16
10:47:52 149  ,jpy_g17
10:47:52 150  ,jpy_g18
10:47:52 151  ,jpy_g19
10:47:52 152  ,jpy_g20
10:47:52 153  ,jpy_g21
10:47:52 154  ,jpy_g22
10:47:52 155  ,jpy_g23
10:47:52 156  ,jpy_g24
10:47:52 157  ,jpy_g25
10:47:52 158  ,jpy_g26
10:47:52 159  ,jpy_g27
10:47:52 160  ,jpy_g28
10:47:52 161  ,jpy_g29
10:47:52 162  ,jpy_g30
10:47:52 163  ,jpy_g31
10:47:52 164  ,jpy_g32
10:47:52 165  ,jpy_g33
10:47:52 166  ,jpy_g34
10:47:52 167  ,jpy_g35
10:47:52 168  ,jpy_g36
10:47:52 169  ,jpy_g37
10:47:52 170  ,jpy_g38
10:47:52 171  ,jpy_g39
10:47:52 172  ,jpy_g40
10:47:52 173  ,jpy_g41
10:47:52 174  ,cad_g00
10:47:52 175  ,cad_g01
10:47:52 176  ,cad_g02
10:47:52 177  ,cad_g03
10:47:52 178  ,cad_g04
10:47:52 179  ,cad_g05
10:47:52 180  ,cad_g06
10:47:52 181  ,cad_g07
10:47:52 182  ,cad_g08
10:47:52 183  ,cad_g09
10:47:52 184  ,cad_g10
10:47:52 185  ,cad_g11
10:47:52 186  ,cad_g12
10:47:52 187  ,cad_g13
10:47:52 188  ,cad_g14
10:47:52 189  ,cad_g15
10:47:52 190  ,cad_g16
10:47:52 191  ,cad_g17
10:47:52 192  ,cad_g18
10:47:52 193  ,cad_g19
10:47:52 194  ,cad_g20
10:47:52 195  ,cad_g21
10:47:52 196  ,cad_g22
10:47:52 197  ,cad_g23
10:47:52 198  ,cad_g24
10:47:52 199  ,cad_g25
10:47:52 200  ,cad_g26
10:47:52 201  ,cad_g27
10:47:52 202  ,cad_g28
10:47:52 203  ,cad_g29
10:47:52 204  ,cad_g30
10:47:52 205  ,cad_g31
10:47:52 206  ,cad_g32
10:47:52 207  ,cad_g33
10:47:52 208  ,cad_g34
10:47:52 209  ,cad_g35
10:47:52 210  ,cad_g36
10:47:52 211  ,cad_g37
10:47:52 212  ,cad_g38
10:47:52 213  ,cad_g39
10:47:52 214  ,cad_g40
10:47:52 215  ,cad_g41
10:47:52 216  ,chf_g00
10:47:52 217  ,chf_g01
10:47:52 218  ,chf_g02
10:47:52 219  ,chf_g03
10:47:52 220  ,chf_g04
10:47:52 221  ,chf_g05
10:47:52 222  ,chf_g06
10:47:52 223  ,chf_g07
10:47:52 224  ,chf_g08
10:47:52 225  ,chf_g09
10:47:52 226  ,chf_g10
10:47:52 227  ,chf_g11
10:47:52 228  ,chf_g12
10:47:52 229  ,chf_g13
10:47:52 230  ,chf_g14
10:47:52 231  ,chf_g15
10:47:52 232  ,chf_g16
10:47:52 233  ,chf_g17
10:47:52 234  ,chf_g18
10:47:52 235  ,chf_g19
10:47:52 236  ,chf_g20
10:47:52 237  ,chf_g21
10:47:52 238  ,chf_g22
10:47:52 239  ,chf_g23
10:47:52 240  ,chf_g24
10:47:52 241  ,chf_g25
10:47:52 242  ,chf_g26
10:47:52 243  ,chf_g27
10:47:52 244  ,chf_g28
10:47:52 245  ,chf_g29
10:47:52 246  ,chf_g30
10:47:52 247  ,chf_g31
10:47:52 248  ,chf_g32
10:47:52 249  ,chf_g33
10:47:52 250  ,chf_g34
10:47:52 251  ,chf_g35
10:47:52 252  ,chf_g36
10:47:52 253  ,chf_g37
10:47:52 254  ,chf_g38
10:47:52 255  ,chf_g39
10:47:52 256  ,chf_g40
10:47:52 257  ,chf_g41
10:47:52 258  FROM aud_ms6 m
10:47:52 259  WHERE gattn IN('nup','up')
10:47:52 260  AND 1+m.ydate < '&1'||' '||'&2'
10:47:52 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2011-01-06'||' '||'10:20:00'

View created.

Elapsed: 00:00:00.13
10:47:52 SQL> 
10:47:52 SQL> -- rpt
10:47:52 SQL> 
10:47:52 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	    12775
up	     6614

Elapsed: 00:00:00.04
10:47:52 SQL> 
10:47:52 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
aud2011-01-05 10:15:00

Elapsed: 00:00:00.04
10:47:52 SQL> 
10:47:52 SQL> -- Now build model from bme and score sme
10:47:52 SQL> @score1gattn.sql
10:47:52 SQL> -- score1gattn.sql
10:47:52 SQL> 
10:47:52 SQL> -- Does the 1st SVM score
10:47:52 SQL> 
10:47:52 SQL> -- Fill up svmc_apply_prep
10:47:52 SQL> @score_gattn.sql
10:47:52 SQL> --
10:47:52 SQL> -- score_gattn.sql
10:47:52 SQL> --
10:47:52 SQL> 
10:47:52 SQL> -- usage: score_gattn.sql
10:47:52 SQL> 
10:47:52 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
10:47:52 SQL> 
10:47:52 SQL> DEFINE target	= 'gattn'
10:47:52 SQL> DEFINE model_name = 'forex15'
10:47:52 SQL> DEFINE bldtable	= 'bme'
10:47:52 SQL> DEFINE scoretable = 'sme'
10:47:52 SQL> DEFINE case_id	= 'prdate'
10:47:52 SQL> 
10:47:52 SQL> -- Define a variable to help me exclude some columns from some data mining calls
10:47:52 SQL> DEFINE exclude1 = "'&target','&case_id'"
10:47:52 SQL> 
10:47:52 SQL> -- Builds an SVM model using pl/sql.
10:47:52 SQL> 
10:47:52 SQL> -----------------------------------------------------------------------
10:47:52 SQL> --			    BUILD THE MODEL
10:47:52 SQL> -----------------------------------------------------------------------
10:47:52 SQL> 
10:47:52 SQL> -- Cleanup old build data preparation objects for repeat runs
10:47:52 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.01
10:47:52 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
10:47:52 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.00
10:47:52 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.00
10:47:52 SQL> 
10:47:52 SQL> 
10:47:52 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
10:47:52 SQL> --
10:47:52 SQL> -- DROP	TABLE svmc_settings ;
10:47:52 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
10:47:52 SQL> -- DELETE svmc_settings;
10:47:52 SQL> 
10:47:52 SQL> -- The default classification algorithm is Naive Bayes. So override
10:47:52 SQL> -- this choice to SVM using a settings table.
10:47:52 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
10:47:52 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
10:47:52 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
10:47:52 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
10:47:52 SQL> -- models.
10:47:52 SQL> --
10:47:52 SQL> 
10:47:52 SQL> -- Do this once and then comment it out.
10:47:52 SQL> -- That makes script go faster.
10:47:52 SQL> -- BEGIN
10:47:52 SQL> -- -- Populate settings table
10:47:52 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
10:47:52 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
10:47:52 SQL> --
10:47:52 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
10:47:52 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
10:47:52 SQL> --
10:47:52 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
10:47:52 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
10:47:52 SQL> --   COMMIT;
10:47:52 SQL> -- END;
10:47:52 SQL> -- /
10:47:52 SQL> 
10:47:52 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
10:47:52 SQL> 
10:47:52 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
10:47:52   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:47:52   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
10:47:52 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
10:47:52   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:47:52   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
10:47:52 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
10:47:52   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:47:52   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
10:47:52 SQL> 
10:47:52 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
10:47:52   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:47:52   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
10:47:52 SQL> 
10:47:52 SQL> --------------------------------
10:47:52 SQL> -- PREPARE BUILD (TRAINING) DATA
10:47:52 SQL> --
10:47:52 SQL> 
10:47:52 SQL> -- 1. Missing Value treatment for all Predictors and
10:47:52 SQL> -- 2. Outlier Treatment and
10:47:52 SQL> -- 3. Normalization are performed below.
10:47:52 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
10:47:52 SQL> --    normalized here.
10:47:52 SQL> 
10:47:52 SQL> BEGIN
10:47:52   2  	-- Perform missing value treatment for all predictors
10:47:52   3  	-- create miss tables
10:47:52   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
10:47:52   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
10:47:52   6  
10:47:52   7  	-- populate miss tables
10:47:52   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
10:47:52   9  	  miss_table_name => 'svmc_miss_num',
10:47:52  10  	  data_table_name => '&bldtable',
10:47:52  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:47:52  12  
10:47:52  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
10:47:52  14  	  miss_table_name => 'svmc_miss_cat',
10:47:52  15  	  data_table_name => '&bldtable',
10:47:52  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:47:52  17  
10:47:52  18  	-- xform input data to replace missing values
10:47:52  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
10:47:52  20  	  miss_table_name => 'svmc_miss_num',
10:47:52  21  	  data_table_name => '&bldtable',
10:47:52  22  	  xform_view_name => 'xformed_build_miss_num');
10:47:52  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
10:47:52  24  	  miss_table_name => 'svmc_miss_cat',
10:47:52  25  	  data_table_name => '&bldtable',
10:47:52  26  	  xform_view_name => 'xformed_build_miss_cat');
10:47:52  27  
10:47:52  28  	-- Perform outlier treatment.
10:47:52  29  	-- create clip table
10:47:52  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
10:47:52  31  
10:47:52  32  	-- populate clip table
10:47:52  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
10:47:52  34  	  clip_table_name => 'svmc_clip',
10:47:52  35  	  data_table_name => '&bldtable',
10:47:52  36  	  tail_frac	  => 0.025,
10:47:52  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:47:52  38  
10:47:52  39  	-- xform input data to winsorized data
10:47:52  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
10:47:52  41  	  clip_table_name => 'svmc_clip',
10:47:52  42  	  data_table_name => '&bldtable',
10:47:52  43  	  xform_view_name => 'svmc_winsor');
10:47:52  44  
10:47:52  45  	-- create normalization table
10:47:52  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
10:47:52  47  
10:47:52  48  	-- populate normalization table based on winsorized data
10:47:52  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
10:47:52  50  	  norm_table_name => 'svmc_norm',
10:47:52  51  	  data_table_name => 'svmc_winsor',
10:47:52  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:47:52  53  
10:47:52  54  	-- normalize the original data
10:47:52  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
10:47:52  56  	  norm_table_name => 'svmc_norm',
10:47:52  57  	  data_table_name => '&bldtable',
10:47:52  58  	  xform_view_name => 'svmc_build_prep');
10:47:52  59  END;
10:47:52  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:18.58
10:48:11 SQL> 
10:48:11 SQL> ---------------------
10:48:11 SQL> -- CREATE A NEW MODEL
10:48:11 SQL> --
10:48:11 SQL> -- Cleanup old model with the same name for repeat runs
10:48:11 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
10:48:11   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:48:11   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex15');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.98
10:48:12 SQL> 
10:48:12 SQL> -- Build a new SVM Model
10:48:12 SQL> BEGIN
10:48:12   2  	DBMS_DATA_MINING.CREATE_MODEL(
10:48:12   3  	  model_name	      => '&model_name',
10:48:12   4  	  mining_function     => dbms_data_mining.classification,
10:48:12   5  	  data_table_name     => 'svmc_build_prep',
10:48:12   6  	  case_id_column_name => '&case_id',
10:48:12   7  	  target_column_name  => '&target',
10:48:12   8  	  settings_table_name => 'svmc_settings');
10:48:12   9  END;
10:48:12  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex15',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:28.52
10:48:40 SQL> 
10:48:40 SQL> -----------------------------------------------------------------------
10:48:40 SQL> --			       APPLY/score THE MODEL
10:48:40 SQL> -----------------------------------------------------------------------
10:48:40 SQL> 
10:48:40 SQL> -- Cleanup old scoring data preparation objects for repeat runs
10:48:40 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
10:48:40   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:48:40   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.19
10:48:41 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
10:48:41   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:48:41   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.25
10:48:41 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
10:48:41   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:48:41   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.39
10:48:41 SQL> -----------------------
10:48:41 SQL> -- PREPARE SCORING DATA
10:48:41 SQL> --
10:48:41 SQL> -- If the data for model creation has been prepared, then the data
10:48:41 SQL> -- to be scored using the model must be prepared in the same manner
10:48:41 SQL> -- in order to obtain meaningful results.
10:48:41 SQL> --
10:48:41 SQL> -- 1. Missing Value treatment for all Predictors and
10:48:41 SQL> -- 2. Normalization
10:48:41 SQL> -- No outlier treatment will be performed during test and apply. The
10:48:41 SQL> -- normalization step is sufficient, since the normalization parameters
10:48:41 SQL> -- already capture the effects of outlier treatment done with build data.
10:48:41 SQL> --
10:48:41 SQL> BEGIN
10:48:41   2  	-- Xform Test data to replace missing values
10:48:41   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
10:48:41   4  	  miss_table_name => 'svmc_miss_num',
10:48:41   5  	  data_table_name => '&scoretable',
10:48:41   6  	  xform_view_name => 'xformed_apply_miss_num');
10:48:41   7  
10:48:41   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
10:48:41   9  	  miss_table_name => 'svmc_miss_cat',
10:48:41  10  	  data_table_name => '&scoretable',
10:48:41  11  	  xform_view_name => 'xformed_apply_miss_cat');
10:48:41  12  
10:48:41  13  	-- Normalize the data to be scored
10:48:41  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
10:48:41  15  	  norm_table_name => 'svmc_norm',
10:48:41  16  	  data_table_name => '&scoretable',
10:48:41  17  	  xform_view_name => 'svmc_apply_prep');
10:48:41  18  END;
10:48:41  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.27
10:48:42 SQL> 
10:48:42 SQL> -- Use same model_name used in score_gattn.sql
10:48:42 SQL> DEFINE model_name = 'forex15'
10:48:42 SQL> 
10:48:42 SQL> DELETE fxscores6_gattn WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.04
10:48:43 SQL> 
10:48:43 SQL> INSERT INTO fxscores6_gattn (prdate,score,rundate,pair,ydate)
10:48:43   2  SELECT
10:48:43   3  prdate
10:48:43   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
10:48:43   5  ,sysdate
10:48:43   6  ,SUBSTR(prdate,1,3)pair
10:48:43   7  ,SUBSTR(prdate,4,19)ydate
10:48:43   8  FROM svmc_apply_prep
10:48:43   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex15,'up' USING *)score

1 row created.

Elapsed: 00:00:00.18
10:48:43 SQL> @aud_score1day_gattn.sql	2011-01-06 10:25:00
10:48:43 SQL> --
10:48:43 SQL> -- aud_score1day_gattn.sql
10:48:43 SQL> --
10:48:43 SQL> 
10:48:43 SQL> CREATE OR REPLACE VIEW sme AS
10:48:43   2  SELECT
10:48:43   3  'aud'||m.ydate prdate
10:48:43   4  ,NULL gattn
10:48:43   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
10:48:43   6  ,eur_g00
10:48:43   7  ,eur_g01
10:48:43   8  ,eur_g02
10:48:43   9  ,eur_g03
10:48:43  10  ,eur_g04
10:48:43  11  ,eur_g05
10:48:43  12  ,eur_g06
10:48:43  13  ,eur_g07
10:48:43  14  ,eur_g08
10:48:43  15  ,eur_g09
10:48:43  16  ,eur_g10
10:48:43  17  ,eur_g11
10:48:43  18  ,eur_g12
10:48:43  19  ,eur_g13
10:48:43  20  ,eur_g14
10:48:43  21  ,eur_g15
10:48:43  22  ,eur_g16
10:48:43  23  ,eur_g17
10:48:43  24  ,eur_g18
10:48:43  25  ,eur_g19
10:48:43  26  ,eur_g20
10:48:43  27  ,eur_g21
10:48:43  28  ,eur_g22
10:48:43  29  ,eur_g23
10:48:43  30  ,eur_g24
10:48:43  31  ,eur_g25
10:48:43  32  ,eur_g26
10:48:43  33  ,eur_g27
10:48:43  34  ,eur_g28
10:48:43  35  ,eur_g29
10:48:43  36  ,eur_g30
10:48:43  37  ,eur_g31
10:48:43  38  ,eur_g32
10:48:43  39  ,eur_g33
10:48:43  40  ,eur_g34
10:48:43  41  ,eur_g35
10:48:43  42  ,eur_g36
10:48:43  43  ,eur_g37
10:48:43  44  ,eur_g38
10:48:43  45  ,eur_g39
10:48:43  46  ,eur_g40
10:48:43  47  ,eur_g41
10:48:43  48  ,aud_g00
10:48:43  49  ,aud_g01
10:48:43  50  ,aud_g02
10:48:43  51  ,aud_g03
10:48:43  52  ,aud_g04
10:48:43  53  ,aud_g05
10:48:43  54  ,aud_g06
10:48:43  55  ,aud_g07
10:48:43  56  ,aud_g08
10:48:43  57  ,aud_g09
10:48:43  58  ,aud_g10
10:48:43  59  ,aud_g11
10:48:43  60  ,aud_g12
10:48:43  61  ,aud_g13
10:48:43  62  ,aud_g14
10:48:43  63  ,aud_g15
10:48:43  64  ,aud_g16
10:48:43  65  ,aud_g17
10:48:43  66  ,aud_g18
10:48:43  67  ,aud_g19
10:48:43  68  ,aud_g20
10:48:43  69  ,aud_g21
10:48:43  70  ,aud_g22
10:48:43  71  ,aud_g23
10:48:43  72  ,aud_g24
10:48:43  73  ,aud_g25
10:48:43  74  ,aud_g26
10:48:43  75  ,aud_g27
10:48:43  76  ,aud_g28
10:48:43  77  ,aud_g29
10:48:43  78  ,aud_g30
10:48:43  79  ,aud_g31
10:48:43  80  ,aud_g32
10:48:43  81  ,aud_g33
10:48:43  82  ,aud_g34
10:48:43  83  ,aud_g35
10:48:43  84  ,aud_g36
10:48:43  85  ,aud_g37
10:48:43  86  ,aud_g38
10:48:43  87  ,aud_g39
10:48:43  88  ,aud_g40
10:48:43  89  ,aud_g41
10:48:43  90  ,gbp_g00
10:48:43  91  ,gbp_g01
10:48:43  92  ,gbp_g02
10:48:43  93  ,gbp_g03
10:48:43  94  ,gbp_g04
10:48:43  95  ,gbp_g05
10:48:43  96  ,gbp_g06
10:48:43  97  ,gbp_g07
10:48:43  98  ,gbp_g08
10:48:43  99  ,gbp_g09
10:48:43 100  ,gbp_g10
10:48:43 101  ,gbp_g11
10:48:43 102  ,gbp_g12
10:48:43 103  ,gbp_g13
10:48:43 104  ,gbp_g14
10:48:43 105  ,gbp_g15
10:48:43 106  ,gbp_g16
10:48:43 107  ,gbp_g17
10:48:43 108  ,gbp_g18
10:48:43 109  ,gbp_g19
10:48:43 110  ,gbp_g20
10:48:43 111  ,gbp_g21
10:48:43 112  ,gbp_g22
10:48:43 113  ,gbp_g23
10:48:43 114  ,gbp_g24
10:48:43 115  ,gbp_g25
10:48:43 116  ,gbp_g26
10:48:43 117  ,gbp_g27
10:48:43 118  ,gbp_g28
10:48:43 119  ,gbp_g29
10:48:43 120  ,gbp_g30
10:48:43 121  ,gbp_g31
10:48:43 122  ,gbp_g32
10:48:43 123  ,gbp_g33
10:48:43 124  ,gbp_g34
10:48:43 125  ,gbp_g35
10:48:43 126  ,gbp_g36
10:48:43 127  ,gbp_g37
10:48:43 128  ,gbp_g38
10:48:43 129  ,gbp_g39
10:48:43 130  ,gbp_g40
10:48:43 131  ,gbp_g41
10:48:43 132  ,jpy_g00
10:48:43 133  ,jpy_g01
10:48:43 134  ,jpy_g02
10:48:43 135  ,jpy_g03
10:48:43 136  ,jpy_g04
10:48:43 137  ,jpy_g05
10:48:43 138  ,jpy_g06
10:48:43 139  ,jpy_g07
10:48:43 140  ,jpy_g08
10:48:43 141  ,jpy_g09
10:48:43 142  ,jpy_g10
10:48:43 143  ,jpy_g11
10:48:43 144  ,jpy_g12
10:48:43 145  ,jpy_g13
10:48:43 146  ,jpy_g14
10:48:43 147  ,jpy_g15
10:48:43 148  ,jpy_g16
10:48:43 149  ,jpy_g17
10:48:43 150  ,jpy_g18
10:48:43 151  ,jpy_g19
10:48:43 152  ,jpy_g20
10:48:43 153  ,jpy_g21
10:48:43 154  ,jpy_g22
10:48:43 155  ,jpy_g23
10:48:43 156  ,jpy_g24
10:48:43 157  ,jpy_g25
10:48:43 158  ,jpy_g26
10:48:43 159  ,jpy_g27
10:48:43 160  ,jpy_g28
10:48:43 161  ,jpy_g29
10:48:43 162  ,jpy_g30
10:48:43 163  ,jpy_g31
10:48:43 164  ,jpy_g32
10:48:43 165  ,jpy_g33
10:48:43 166  ,jpy_g34
10:48:43 167  ,jpy_g35
10:48:43 168  ,jpy_g36
10:48:43 169  ,jpy_g37
10:48:43 170  ,jpy_g38
10:48:43 171  ,jpy_g39
10:48:43 172  ,jpy_g40
10:48:43 173  ,jpy_g41
10:48:43 174  ,cad_g00
10:48:43 175  ,cad_g01
10:48:43 176  ,cad_g02
10:48:43 177  ,cad_g03
10:48:43 178  ,cad_g04
10:48:43 179  ,cad_g05
10:48:43 180  ,cad_g06
10:48:43 181  ,cad_g07
10:48:43 182  ,cad_g08
10:48:43 183  ,cad_g09
10:48:43 184  ,cad_g10
10:48:43 185  ,cad_g11
10:48:43 186  ,cad_g12
10:48:43 187  ,cad_g13
10:48:43 188  ,cad_g14
10:48:43 189  ,cad_g15
10:48:43 190  ,cad_g16
10:48:43 191  ,cad_g17
10:48:43 192  ,cad_g18
10:48:43 193  ,cad_g19
10:48:43 194  ,cad_g20
10:48:43 195  ,cad_g21
10:48:43 196  ,cad_g22
10:48:43 197  ,cad_g23
10:48:43 198  ,cad_g24
10:48:43 199  ,cad_g25
10:48:43 200  ,cad_g26
10:48:43 201  ,cad_g27
10:48:43 202  ,cad_g28
10:48:43 203  ,cad_g29
10:48:43 204  ,cad_g30
10:48:43 205  ,cad_g31
10:48:43 206  ,cad_g32
10:48:43 207  ,cad_g33
10:48:43 208  ,cad_g34
10:48:43 209  ,cad_g35
10:48:43 210  ,cad_g36
10:48:43 211  ,cad_g37
10:48:43 212  ,cad_g38
10:48:43 213  ,cad_g39
10:48:43 214  ,cad_g40
10:48:43 215  ,cad_g41
10:48:43 216  ,chf_g00
10:48:43 217  ,chf_g01
10:48:43 218  ,chf_g02
10:48:43 219  ,chf_g03
10:48:43 220  ,chf_g04
10:48:43 221  ,chf_g05
10:48:43 222  ,chf_g06
10:48:43 223  ,chf_g07
10:48:43 224  ,chf_g08
10:48:43 225  ,chf_g09
10:48:43 226  ,chf_g10
10:48:43 227  ,chf_g11
10:48:43 228  ,chf_g12
10:48:43 229  ,chf_g13
10:48:43 230  ,chf_g14
10:48:43 231  ,chf_g15
10:48:43 232  ,chf_g16
10:48:43 233  ,chf_g17
10:48:43 234  ,chf_g18
10:48:43 235  ,chf_g19
10:48:43 236  ,chf_g20
10:48:43 237  ,chf_g21
10:48:43 238  ,chf_g22
10:48:43 239  ,chf_g23
10:48:43 240  ,chf_g24
10:48:43 241  ,chf_g25
10:48:43 242  ,chf_g26
10:48:43 243  ,chf_g27
10:48:43 244  ,chf_g28
10:48:43 245  ,chf_g29
10:48:43 246  ,chf_g30
10:48:43 247  ,chf_g31
10:48:43 248  ,chf_g32
10:48:43 249  ,chf_g33
10:48:43 250  ,chf_g34
10:48:43 251  ,chf_g35
10:48:43 252  ,chf_g36
10:48:43 253  ,chf_g37
10:48:43 254  ,chf_g38
10:48:43 255  ,chf_g39
10:48:43 256  ,chf_g40
10:48:43 257  ,chf_g41
10:48:43 258  FROM aud_ms6 m
10:48:43 259  WHERE m.ydate = '&1'||' '||'&2'
10:48:43 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2011-01-06'||' '||'10:25:00'

View created.

Elapsed: 00:00:00.13
10:48:43 SQL> 
10:48:43 SQL> -- rpt
10:48:43 SQL> -- We should see just 1 row:
10:48:43 SQL> 
10:48:43 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.03
10:48:43 SQL> 
10:48:43 SQL> -- Build the model:
10:48:43 SQL> CREATE OR REPLACE VIEW bme AS
10:48:43   2  SELECT
10:48:43   3  'aud'||m.ydate prdate
10:48:43   4  ,gattn
10:48:43   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
10:48:43   6  ,eur_g00
10:48:43   7  ,eur_g01
10:48:43   8  ,eur_g02
10:48:43   9  ,eur_g03
10:48:43  10  ,eur_g04
10:48:43  11  ,eur_g05
10:48:43  12  ,eur_g06
10:48:43  13  ,eur_g07
10:48:43  14  ,eur_g08
10:48:43  15  ,eur_g09
10:48:43  16  ,eur_g10
10:48:43  17  ,eur_g11
10:48:43  18  ,eur_g12
10:48:43  19  ,eur_g13
10:48:43  20  ,eur_g14
10:48:43  21  ,eur_g15
10:48:43  22  ,eur_g16
10:48:43  23  ,eur_g17
10:48:43  24  ,eur_g18
10:48:43  25  ,eur_g19
10:48:43  26  ,eur_g20
10:48:43  27  ,eur_g21
10:48:43  28  ,eur_g22
10:48:43  29  ,eur_g23
10:48:43  30  ,eur_g24
10:48:43  31  ,eur_g25
10:48:43  32  ,eur_g26
10:48:43  33  ,eur_g27
10:48:43  34  ,eur_g28
10:48:43  35  ,eur_g29
10:48:43  36  ,eur_g30
10:48:43  37  ,eur_g31
10:48:43  38  ,eur_g32
10:48:43  39  ,eur_g33
10:48:43  40  ,eur_g34
10:48:43  41  ,eur_g35
10:48:43  42  ,eur_g36
10:48:43  43  ,eur_g37
10:48:43  44  ,eur_g38
10:48:43  45  ,eur_g39
10:48:43  46  ,eur_g40
10:48:43  47  ,eur_g41
10:48:43  48  ,aud_g00
10:48:43  49  ,aud_g01
10:48:43  50  ,aud_g02
10:48:43  51  ,aud_g03
10:48:43  52  ,aud_g04
10:48:43  53  ,aud_g05
10:48:43  54  ,aud_g06
10:48:43  55  ,aud_g07
10:48:43  56  ,aud_g08
10:48:43  57  ,aud_g09
10:48:43  58  ,aud_g10
10:48:43  59  ,aud_g11
10:48:43  60  ,aud_g12
10:48:43  61  ,aud_g13
10:48:43  62  ,aud_g14
10:48:43  63  ,aud_g15
10:48:43  64  ,aud_g16
10:48:43  65  ,aud_g17
10:48:43  66  ,aud_g18
10:48:43  67  ,aud_g19
10:48:43  68  ,aud_g20
10:48:43  69  ,aud_g21
10:48:43  70  ,aud_g22
10:48:43  71  ,aud_g23
10:48:43  72  ,aud_g24
10:48:43  73  ,aud_g25
10:48:43  74  ,aud_g26
10:48:43  75  ,aud_g27
10:48:43  76  ,aud_g28
10:48:43  77  ,aud_g29
10:48:43  78  ,aud_g30
10:48:43  79  ,aud_g31
10:48:43  80  ,aud_g32
10:48:43  81  ,aud_g33
10:48:43  82  ,aud_g34
10:48:43  83  ,aud_g35
10:48:43  84  ,aud_g36
10:48:43  85  ,aud_g37
10:48:43  86  ,aud_g38
10:48:43  87  ,aud_g39
10:48:43  88  ,aud_g40
10:48:43  89  ,aud_g41
10:48:43  90  ,gbp_g00
10:48:43  91  ,gbp_g01
10:48:43  92  ,gbp_g02
10:48:43  93  ,gbp_g03
10:48:43  94  ,gbp_g04
10:48:43  95  ,gbp_g05
10:48:43  96  ,gbp_g06
10:48:43  97  ,gbp_g07
10:48:43  98  ,gbp_g08
10:48:43  99  ,gbp_g09
10:48:43 100  ,gbp_g10
10:48:43 101  ,gbp_g11
10:48:43 102  ,gbp_g12
10:48:43 103  ,gbp_g13
10:48:43 104  ,gbp_g14
10:48:43 105  ,gbp_g15
10:48:43 106  ,gbp_g16
10:48:43 107  ,gbp_g17
10:48:43 108  ,gbp_g18
10:48:43 109  ,gbp_g19
10:48:43 110  ,gbp_g20
10:48:43 111  ,gbp_g21
10:48:43 112  ,gbp_g22
10:48:43 113  ,gbp_g23
10:48:43 114  ,gbp_g24
10:48:43 115  ,gbp_g25
10:48:43 116  ,gbp_g26
10:48:43 117  ,gbp_g27
10:48:43 118  ,gbp_g28
10:48:43 119  ,gbp_g29
10:48:43 120  ,gbp_g30
10:48:43 121  ,gbp_g31
10:48:43 122  ,gbp_g32
10:48:43 123  ,gbp_g33
10:48:43 124  ,gbp_g34
10:48:43 125  ,gbp_g35
10:48:43 126  ,gbp_g36
10:48:43 127  ,gbp_g37
10:48:43 128  ,gbp_g38
10:48:43 129  ,gbp_g39
10:48:43 130  ,gbp_g40
10:48:43 131  ,gbp_g41
10:48:43 132  ,jpy_g00
10:48:43 133  ,jpy_g01
10:48:43 134  ,jpy_g02
10:48:43 135  ,jpy_g03
10:48:43 136  ,jpy_g04
10:48:43 137  ,jpy_g05
10:48:43 138  ,jpy_g06
10:48:43 139  ,jpy_g07
10:48:43 140  ,jpy_g08
10:48:43 141  ,jpy_g09
10:48:43 142  ,jpy_g10
10:48:43 143  ,jpy_g11
10:48:43 144  ,jpy_g12
10:48:43 145  ,jpy_g13
10:48:43 146  ,jpy_g14
10:48:43 147  ,jpy_g15
10:48:43 148  ,jpy_g16
10:48:43 149  ,jpy_g17
10:48:43 150  ,jpy_g18
10:48:43 151  ,jpy_g19
10:48:43 152  ,jpy_g20
10:48:43 153  ,jpy_g21
10:48:43 154  ,jpy_g22
10:48:43 155  ,jpy_g23
10:48:43 156  ,jpy_g24
10:48:43 157  ,jpy_g25
10:48:43 158  ,jpy_g26
10:48:43 159  ,jpy_g27
10:48:43 160  ,jpy_g28
10:48:43 161  ,jpy_g29
10:48:43 162  ,jpy_g30
10:48:43 163  ,jpy_g31
10:48:43 164  ,jpy_g32
10:48:43 165  ,jpy_g33
10:48:43 166  ,jpy_g34
10:48:43 167  ,jpy_g35
10:48:43 168  ,jpy_g36
10:48:43 169  ,jpy_g37
10:48:43 170  ,jpy_g38
10:48:43 171  ,jpy_g39
10:48:43 172  ,jpy_g40
10:48:43 173  ,jpy_g41
10:48:43 174  ,cad_g00
10:48:43 175  ,cad_g01
10:48:43 176  ,cad_g02
10:48:43 177  ,cad_g03
10:48:43 178  ,cad_g04
10:48:43 179  ,cad_g05
10:48:43 180  ,cad_g06
10:48:43 181  ,cad_g07
10:48:43 182  ,cad_g08
10:48:43 183  ,cad_g09
10:48:43 184  ,cad_g10
10:48:43 185  ,cad_g11
10:48:43 186  ,cad_g12
10:48:43 187  ,cad_g13
10:48:43 188  ,cad_g14
10:48:43 189  ,cad_g15
10:48:43 190  ,cad_g16
10:48:43 191  ,cad_g17
10:48:43 192  ,cad_g18
10:48:43 193  ,cad_g19
10:48:43 194  ,cad_g20
10:48:43 195  ,cad_g21
10:48:43 196  ,cad_g22
10:48:43 197  ,cad_g23
10:48:43 198  ,cad_g24
10:48:43 199  ,cad_g25
10:48:43 200  ,cad_g26
10:48:43 201  ,cad_g27
10:48:43 202  ,cad_g28
10:48:43 203  ,cad_g29
10:48:43 204  ,cad_g30
10:48:43 205  ,cad_g31
10:48:43 206  ,cad_g32
10:48:43 207  ,cad_g33
10:48:43 208  ,cad_g34
10:48:43 209  ,cad_g35
10:48:43 210  ,cad_g36
10:48:43 211  ,cad_g37
10:48:43 212  ,cad_g38
10:48:43 213  ,cad_g39
10:48:43 214  ,cad_g40
10:48:43 215  ,cad_g41
10:48:43 216  ,chf_g00
10:48:43 217  ,chf_g01
10:48:43 218  ,chf_g02
10:48:43 219  ,chf_g03
10:48:43 220  ,chf_g04
10:48:43 221  ,chf_g05
10:48:43 222  ,chf_g06
10:48:43 223  ,chf_g07
10:48:43 224  ,chf_g08
10:48:43 225  ,chf_g09
10:48:43 226  ,chf_g10
10:48:43 227  ,chf_g11
10:48:43 228  ,chf_g12
10:48:43 229  ,chf_g13
10:48:43 230  ,chf_g14
10:48:43 231  ,chf_g15
10:48:43 232  ,chf_g16
10:48:43 233  ,chf_g17
10:48:43 234  ,chf_g18
10:48:43 235  ,chf_g19
10:48:43 236  ,chf_g20
10:48:43 237  ,chf_g21
10:48:43 238  ,chf_g22
10:48:43 239  ,chf_g23
10:48:43 240  ,chf_g24
10:48:43 241  ,chf_g25
10:48:43 242  ,chf_g26
10:48:43 243  ,chf_g27
10:48:43 244  ,chf_g28
10:48:43 245  ,chf_g29
10:48:43 246  ,chf_g30
10:48:43 247  ,chf_g31
10:48:43 248  ,chf_g32
10:48:43 249  ,chf_g33
10:48:43 250  ,chf_g34
10:48:43 251  ,chf_g35
10:48:43 252  ,chf_g36
10:48:43 253  ,chf_g37
10:48:43 254  ,chf_g38
10:48:43 255  ,chf_g39
10:48:43 256  ,chf_g40
10:48:43 257  ,chf_g41
10:48:43 258  FROM aud_ms6 m
10:48:43 259  WHERE gattn IN('nup','up')
10:48:43 260  AND 1+m.ydate < '&1'||' '||'&2'
10:48:43 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2011-01-06'||' '||'10:25:00'

View created.

Elapsed: 00:00:00.16
10:48:43 SQL> 
10:48:43 SQL> -- rpt
10:48:43 SQL> 
10:48:43 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	    12775
up	     6615

Elapsed: 00:00:00.04
10:48:43 SQL> 
10:48:43 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
aud2011-01-05 10:20:00

Elapsed: 00:00:00.03
10:48:43 SQL> 
10:48:43 SQL> -- Now build model from bme and score sme
10:48:43 SQL> @score1gattn.sql
10:48:43 SQL> -- score1gattn.sql
10:48:43 SQL> 
10:48:43 SQL> -- Does the 1st SVM score
10:48:43 SQL> 
10:48:43 SQL> -- Fill up svmc_apply_prep
10:48:43 SQL> @score_gattn.sql
10:48:43 SQL> --
10:48:43 SQL> -- score_gattn.sql
10:48:43 SQL> --
10:48:43 SQL> 
10:48:43 SQL> -- usage: score_gattn.sql
10:48:43 SQL> 
10:48:43 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
10:48:43 SQL> 
10:48:43 SQL> DEFINE target	= 'gattn'
10:48:43 SQL> DEFINE model_name = 'forex15'
10:48:43 SQL> DEFINE bldtable	= 'bme'
10:48:43 SQL> DEFINE scoretable = 'sme'
10:48:43 SQL> DEFINE case_id	= 'prdate'
10:48:43 SQL> 
10:48:43 SQL> -- Define a variable to help me exclude some columns from some data mining calls
10:48:43 SQL> DEFINE exclude1 = "'&target','&case_id'"
10:48:43 SQL> 
10:48:43 SQL> -- Builds an SVM model using pl/sql.
10:48:43 SQL> 
10:48:43 SQL> -----------------------------------------------------------------------
10:48:43 SQL> --			    BUILD THE MODEL
10:48:43 SQL> -----------------------------------------------------------------------
10:48:43 SQL> 
10:48:43 SQL> -- Cleanup old build data preparation objects for repeat runs
10:48:43 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.01
10:48:43 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
10:48:43 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.00
10:48:43 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.00
10:48:43 SQL> 
10:48:43 SQL> 
10:48:43 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
10:48:43 SQL> --
10:48:43 SQL> -- DROP	TABLE svmc_settings ;
10:48:43 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
10:48:43 SQL> -- DELETE svmc_settings;
10:48:43 SQL> 
10:48:43 SQL> -- The default classification algorithm is Naive Bayes. So override
10:48:43 SQL> -- this choice to SVM using a settings table.
10:48:43 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
10:48:43 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
10:48:43 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
10:48:43 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
10:48:43 SQL> -- models.
10:48:43 SQL> --
10:48:43 SQL> 
10:48:43 SQL> -- Do this once and then comment it out.
10:48:43 SQL> -- That makes script go faster.
10:48:43 SQL> -- BEGIN
10:48:43 SQL> -- -- Populate settings table
10:48:43 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
10:48:43 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
10:48:43 SQL> --
10:48:43 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
10:48:43 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
10:48:43 SQL> --
10:48:43 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
10:48:43 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
10:48:43 SQL> --   COMMIT;
10:48:43 SQL> -- END;
10:48:43 SQL> -- /
10:48:43 SQL> 
10:48:43 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
10:48:43 SQL> 
10:48:43 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
10:48:43   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:48:43   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
10:48:43 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
10:48:43   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:48:43   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
10:48:43 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
10:48:43   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:48:43   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
10:48:43 SQL> 
10:48:43 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
10:48:43   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:48:43   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.09
10:48:43 SQL> 
10:48:43 SQL> --------------------------------
10:48:43 SQL> -- PREPARE BUILD (TRAINING) DATA
10:48:43 SQL> --
10:48:43 SQL> 
10:48:43 SQL> -- 1. Missing Value treatment for all Predictors and
10:48:43 SQL> -- 2. Outlier Treatment and
10:48:43 SQL> -- 3. Normalization are performed below.
10:48:43 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
10:48:43 SQL> --    normalized here.
10:48:43 SQL> 
10:48:43 SQL> BEGIN
10:48:43   2  	-- Perform missing value treatment for all predictors
10:48:43   3  	-- create miss tables
10:48:43   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
10:48:43   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
10:48:43   6  
10:48:43   7  	-- populate miss tables
10:48:43   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
10:48:43   9  	  miss_table_name => 'svmc_miss_num',
10:48:43  10  	  data_table_name => '&bldtable',
10:48:43  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:48:43  12  
10:48:43  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
10:48:43  14  	  miss_table_name => 'svmc_miss_cat',
10:48:43  15  	  data_table_name => '&bldtable',
10:48:43  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:48:43  17  
10:48:43  18  	-- xform input data to replace missing values
10:48:43  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
10:48:43  20  	  miss_table_name => 'svmc_miss_num',
10:48:43  21  	  data_table_name => '&bldtable',
10:48:43  22  	  xform_view_name => 'xformed_build_miss_num');
10:48:43  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
10:48:43  24  	  miss_table_name => 'svmc_miss_cat',
10:48:43  25  	  data_table_name => '&bldtable',
10:48:43  26  	  xform_view_name => 'xformed_build_miss_cat');
10:48:43  27  
10:48:43  28  	-- Perform outlier treatment.
10:48:43  29  	-- create clip table
10:48:43  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
10:48:43  31  
10:48:43  32  	-- populate clip table
10:48:43  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
10:48:43  34  	  clip_table_name => 'svmc_clip',
10:48:43  35  	  data_table_name => '&bldtable',
10:48:43  36  	  tail_frac	  => 0.025,
10:48:43  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:48:43  38  
10:48:43  39  	-- xform input data to winsorized data
10:48:43  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
10:48:43  41  	  clip_table_name => 'svmc_clip',
10:48:43  42  	  data_table_name => '&bldtable',
10:48:43  43  	  xform_view_name => 'svmc_winsor');
10:48:43  44  
10:48:43  45  	-- create normalization table
10:48:43  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
10:48:43  47  
10:48:43  48  	-- populate normalization table based on winsorized data
10:48:43  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
10:48:43  50  	  norm_table_name => 'svmc_norm',
10:48:43  51  	  data_table_name => 'svmc_winsor',
10:48:43  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:48:43  53  
10:48:43  54  	-- normalize the original data
10:48:43  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
10:48:43  56  	  norm_table_name => 'svmc_norm',
10:48:43  57  	  data_table_name => '&bldtable',
10:48:43  58  	  xform_view_name => 'svmc_build_prep');
10:48:43  59  END;
10:48:43  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:18.69
10:49:02 SQL> 
10:49:02 SQL> ---------------------
10:49:02 SQL> -- CREATE A NEW MODEL
10:49:02 SQL> --
10:49:02 SQL> -- Cleanup old model with the same name for repeat runs
10:49:02 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
10:49:02   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:49:02   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex15');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.98
10:49:03 SQL> 
10:49:03 SQL> -- Build a new SVM Model
10:49:03 SQL> BEGIN
10:49:03   2  	DBMS_DATA_MINING.CREATE_MODEL(
10:49:03   3  	  model_name	      => '&model_name',
10:49:03   4  	  mining_function     => dbms_data_mining.classification,
10:49:03   5  	  data_table_name     => 'svmc_build_prep',
10:49:03   6  	  case_id_column_name => '&case_id',
10:49:03   7  	  target_column_name  => '&target',
10:49:03   8  	  settings_table_name => 'svmc_settings');
10:49:03   9  END;
10:49:03  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex15',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:29.74
10:49:33 SQL> 
10:49:33 SQL> -----------------------------------------------------------------------
10:49:33 SQL> --			       APPLY/score THE MODEL
10:49:33 SQL> -----------------------------------------------------------------------
10:49:33 SQL> 
10:49:33 SQL> -- Cleanup old scoring data preparation objects for repeat runs
10:49:33 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
10:49:33   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:49:33   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
10:49:33 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
10:49:33   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:49:33   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
10:49:33 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
10:49:33   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:49:33   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
10:49:33 SQL> -----------------------
10:49:33 SQL> -- PREPARE SCORING DATA
10:49:33 SQL> --
10:49:33 SQL> -- If the data for model creation has been prepared, then the data
10:49:33 SQL> -- to be scored using the model must be prepared in the same manner
10:49:33 SQL> -- in order to obtain meaningful results.
10:49:33 SQL> --
10:49:33 SQL> -- 1. Missing Value treatment for all Predictors and
10:49:33 SQL> -- 2. Normalization
10:49:33 SQL> -- No outlier treatment will be performed during test and apply. The
10:49:33 SQL> -- normalization step is sufficient, since the normalization parameters
10:49:33 SQL> -- already capture the effects of outlier treatment done with build data.
10:49:33 SQL> --
10:49:33 SQL> BEGIN
10:49:33   2  	-- Xform Test data to replace missing values
10:49:33   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
10:49:33   4  	  miss_table_name => 'svmc_miss_num',
10:49:33   5  	  data_table_name => '&scoretable',
10:49:33   6  	  xform_view_name => 'xformed_apply_miss_num');
10:49:33   7  
10:49:33   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
10:49:33   9  	  miss_table_name => 'svmc_miss_cat',
10:49:33  10  	  data_table_name => '&scoretable',
10:49:33  11  	  xform_view_name => 'xformed_apply_miss_cat');
10:49:33  12  
10:49:33  13  	-- Normalize the data to be scored
10:49:33  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
10:49:33  15  	  norm_table_name => 'svmc_norm',
10:49:33  16  	  data_table_name => '&scoretable',
10:49:33  17  	  xform_view_name => 'svmc_apply_prep');
10:49:33  18  END;
10:49:33  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.23
10:49:34 SQL> 
10:49:34 SQL> -- Use same model_name used in score_gattn.sql
10:49:34 SQL> DEFINE model_name = 'forex15'
10:49:34 SQL> 
10:49:34 SQL> DELETE fxscores6_gattn WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.04
10:49:34 SQL> 
10:49:34 SQL> INSERT INTO fxscores6_gattn (prdate,score,rundate,pair,ydate)
10:49:34   2  SELECT
10:49:34   3  prdate
10:49:34   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
10:49:34   5  ,sysdate
10:49:34   6  ,SUBSTR(prdate,1,3)pair
10:49:34   7  ,SUBSTR(prdate,4,19)ydate
10:49:34   8  FROM svmc_apply_prep
10:49:34   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex15,'up' USING *)score

1 row created.

Elapsed: 00:00:00.17
10:49:34 SQL> @aud_score1day_gattn.sql	2011-01-06 10:30:00
10:49:34 SQL> --
10:49:34 SQL> -- aud_score1day_gattn.sql
10:49:34 SQL> --
10:49:34 SQL> 
10:49:34 SQL> CREATE OR REPLACE VIEW sme AS
10:49:34   2  SELECT
10:49:34   3  'aud'||m.ydate prdate
10:49:34   4  ,NULL gattn
10:49:34   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
10:49:34   6  ,eur_g00
10:49:34   7  ,eur_g01
10:49:34   8  ,eur_g02
10:49:34   9  ,eur_g03
10:49:34  10  ,eur_g04
10:49:34  11  ,eur_g05
10:49:34  12  ,eur_g06
10:49:34  13  ,eur_g07
10:49:34  14  ,eur_g08
10:49:34  15  ,eur_g09
10:49:34  16  ,eur_g10
10:49:34  17  ,eur_g11
10:49:34  18  ,eur_g12
10:49:34  19  ,eur_g13
10:49:34  20  ,eur_g14
10:49:34  21  ,eur_g15
10:49:34  22  ,eur_g16
10:49:34  23  ,eur_g17
10:49:34  24  ,eur_g18
10:49:34  25  ,eur_g19
10:49:34  26  ,eur_g20
10:49:34  27  ,eur_g21
10:49:34  28  ,eur_g22
10:49:34  29  ,eur_g23
10:49:34  30  ,eur_g24
10:49:34  31  ,eur_g25
10:49:34  32  ,eur_g26
10:49:34  33  ,eur_g27
10:49:34  34  ,eur_g28
10:49:34  35  ,eur_g29
10:49:34  36  ,eur_g30
10:49:34  37  ,eur_g31
10:49:34  38  ,eur_g32
10:49:34  39  ,eur_g33
10:49:34  40  ,eur_g34
10:49:34  41  ,eur_g35
10:49:34  42  ,eur_g36
10:49:34  43  ,eur_g37
10:49:34  44  ,eur_g38
10:49:34  45  ,eur_g39
10:49:34  46  ,eur_g40
10:49:34  47  ,eur_g41
10:49:34  48  ,aud_g00
10:49:34  49  ,aud_g01
10:49:34  50  ,aud_g02
10:49:34  51  ,aud_g03
10:49:34  52  ,aud_g04
10:49:34  53  ,aud_g05
10:49:34  54  ,aud_g06
10:49:34  55  ,aud_g07
10:49:34  56  ,aud_g08
10:49:34  57  ,aud_g09
10:49:34  58  ,aud_g10
10:49:34  59  ,aud_g11
10:49:34  60  ,aud_g12
10:49:34  61  ,aud_g13
10:49:34  62  ,aud_g14
10:49:34  63  ,aud_g15
10:49:34  64  ,aud_g16
10:49:34  65  ,aud_g17
10:49:34  66  ,aud_g18
10:49:34  67  ,aud_g19
10:49:34  68  ,aud_g20
10:49:34  69  ,aud_g21
10:49:34  70  ,aud_g22
10:49:34  71  ,aud_g23
10:49:34  72  ,aud_g24
10:49:34  73  ,aud_g25
10:49:34  74  ,aud_g26
10:49:34  75  ,aud_g27
10:49:34  76  ,aud_g28
10:49:34  77  ,aud_g29
10:49:34  78  ,aud_g30
10:49:34  79  ,aud_g31
10:49:34  80  ,aud_g32
10:49:34  81  ,aud_g33
10:49:34  82  ,aud_g34
10:49:34  83  ,aud_g35
10:49:34  84  ,aud_g36
10:49:34  85  ,aud_g37
10:49:34  86  ,aud_g38
10:49:34  87  ,aud_g39
10:49:34  88  ,aud_g40
10:49:34  89  ,aud_g41
10:49:34  90  ,gbp_g00
10:49:34  91  ,gbp_g01
10:49:34  92  ,gbp_g02
10:49:34  93  ,gbp_g03
10:49:34  94  ,gbp_g04
10:49:34  95  ,gbp_g05
10:49:34  96  ,gbp_g06
10:49:34  97  ,gbp_g07
10:49:34  98  ,gbp_g08
10:49:34  99  ,gbp_g09
10:49:34 100  ,gbp_g10
10:49:34 101  ,gbp_g11
10:49:34 102  ,gbp_g12
10:49:34 103  ,gbp_g13
10:49:34 104  ,gbp_g14
10:49:34 105  ,gbp_g15
10:49:34 106  ,gbp_g16
10:49:34 107  ,gbp_g17
10:49:34 108  ,gbp_g18
10:49:34 109  ,gbp_g19
10:49:34 110  ,gbp_g20
10:49:34 111  ,gbp_g21
10:49:34 112  ,gbp_g22
10:49:34 113  ,gbp_g23
10:49:34 114  ,gbp_g24
10:49:34 115  ,gbp_g25
10:49:34 116  ,gbp_g26
10:49:34 117  ,gbp_g27
10:49:34 118  ,gbp_g28
10:49:34 119  ,gbp_g29
10:49:34 120  ,gbp_g30
10:49:34 121  ,gbp_g31
10:49:34 122  ,gbp_g32
10:49:34 123  ,gbp_g33
10:49:34 124  ,gbp_g34
10:49:34 125  ,gbp_g35
10:49:34 126  ,gbp_g36
10:49:34 127  ,gbp_g37
10:49:34 128  ,gbp_g38
10:49:34 129  ,gbp_g39
10:49:34 130  ,gbp_g40
10:49:34 131  ,gbp_g41
10:49:34 132  ,jpy_g00
10:49:34 133  ,jpy_g01
10:49:34 134  ,jpy_g02
10:49:34 135  ,jpy_g03
10:49:34 136  ,jpy_g04
10:49:34 137  ,jpy_g05
10:49:34 138  ,jpy_g06
10:49:34 139  ,jpy_g07
10:49:34 140  ,jpy_g08
10:49:34 141  ,jpy_g09
10:49:34 142  ,jpy_g10
10:49:34 143  ,jpy_g11
10:49:34 144  ,jpy_g12
10:49:34 145  ,jpy_g13
10:49:34 146  ,jpy_g14
10:49:34 147  ,jpy_g15
10:49:34 148  ,jpy_g16
10:49:34 149  ,jpy_g17
10:49:34 150  ,jpy_g18
10:49:34 151  ,jpy_g19
10:49:34 152  ,jpy_g20
10:49:34 153  ,jpy_g21
10:49:34 154  ,jpy_g22
10:49:34 155  ,jpy_g23
10:49:34 156  ,jpy_g24
10:49:34 157  ,jpy_g25
10:49:34 158  ,jpy_g26
10:49:34 159  ,jpy_g27
10:49:34 160  ,jpy_g28
10:49:34 161  ,jpy_g29
10:49:34 162  ,jpy_g30
10:49:34 163  ,jpy_g31
10:49:34 164  ,jpy_g32
10:49:34 165  ,jpy_g33
10:49:34 166  ,jpy_g34
10:49:34 167  ,jpy_g35
10:49:34 168  ,jpy_g36
10:49:34 169  ,jpy_g37
10:49:34 170  ,jpy_g38
10:49:34 171  ,jpy_g39
10:49:34 172  ,jpy_g40
10:49:34 173  ,jpy_g41
10:49:34 174  ,cad_g00
10:49:34 175  ,cad_g01
10:49:34 176  ,cad_g02
10:49:34 177  ,cad_g03
10:49:34 178  ,cad_g04
10:49:34 179  ,cad_g05
10:49:34 180  ,cad_g06
10:49:34 181  ,cad_g07
10:49:34 182  ,cad_g08
10:49:34 183  ,cad_g09
10:49:34 184  ,cad_g10
10:49:34 185  ,cad_g11
10:49:34 186  ,cad_g12
10:49:34 187  ,cad_g13
10:49:34 188  ,cad_g14
10:49:34 189  ,cad_g15
10:49:34 190  ,cad_g16
10:49:34 191  ,cad_g17
10:49:34 192  ,cad_g18
10:49:34 193  ,cad_g19
10:49:34 194  ,cad_g20
10:49:34 195  ,cad_g21
10:49:34 196  ,cad_g22
10:49:34 197  ,cad_g23
10:49:34 198  ,cad_g24
10:49:34 199  ,cad_g25
10:49:34 200  ,cad_g26
10:49:34 201  ,cad_g27
10:49:34 202  ,cad_g28
10:49:34 203  ,cad_g29
10:49:34 204  ,cad_g30
10:49:34 205  ,cad_g31
10:49:34 206  ,cad_g32
10:49:34 207  ,cad_g33
10:49:34 208  ,cad_g34
10:49:34 209  ,cad_g35
10:49:34 210  ,cad_g36
10:49:34 211  ,cad_g37
10:49:34 212  ,cad_g38
10:49:34 213  ,cad_g39
10:49:34 214  ,cad_g40
10:49:34 215  ,cad_g41
10:49:34 216  ,chf_g00
10:49:34 217  ,chf_g01
10:49:34 218  ,chf_g02
10:49:34 219  ,chf_g03
10:49:34 220  ,chf_g04
10:49:34 221  ,chf_g05
10:49:34 222  ,chf_g06
10:49:34 223  ,chf_g07
10:49:34 224  ,chf_g08
10:49:34 225  ,chf_g09
10:49:34 226  ,chf_g10
10:49:34 227  ,chf_g11
10:49:34 228  ,chf_g12
10:49:34 229  ,chf_g13
10:49:34 230  ,chf_g14
10:49:34 231  ,chf_g15
10:49:34 232  ,chf_g16
10:49:34 233  ,chf_g17
10:49:34 234  ,chf_g18
10:49:34 235  ,chf_g19
10:49:34 236  ,chf_g20
10:49:34 237  ,chf_g21
10:49:34 238  ,chf_g22
10:49:34 239  ,chf_g23
10:49:34 240  ,chf_g24
10:49:34 241  ,chf_g25
10:49:34 242  ,chf_g26
10:49:34 243  ,chf_g27
10:49:34 244  ,chf_g28
10:49:34 245  ,chf_g29
10:49:34 246  ,chf_g30
10:49:34 247  ,chf_g31
10:49:34 248  ,chf_g32
10:49:34 249  ,chf_g33
10:49:34 250  ,chf_g34
10:49:34 251  ,chf_g35
10:49:34 252  ,chf_g36
10:49:34 253  ,chf_g37
10:49:34 254  ,chf_g38
10:49:34 255  ,chf_g39
10:49:34 256  ,chf_g40
10:49:34 257  ,chf_g41
10:49:34 258  FROM aud_ms6 m
10:49:34 259  WHERE m.ydate = '&1'||' '||'&2'
10:49:34 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2011-01-06'||' '||'10:30:00'

View created.

Elapsed: 00:00:00.15
10:49:35 SQL> 
10:49:35 SQL> -- rpt
10:49:35 SQL> -- We should see just 1 row:
10:49:35 SQL> 
10:49:35 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
10:49:35 SQL> 
10:49:35 SQL> -- Build the model:
10:49:35 SQL> CREATE OR REPLACE VIEW bme AS
10:49:35   2  SELECT
10:49:35   3  'aud'||m.ydate prdate
10:49:35   4  ,gattn
10:49:35   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
10:49:35   6  ,eur_g00
10:49:35   7  ,eur_g01
10:49:35   8  ,eur_g02
10:49:35   9  ,eur_g03
10:49:35  10  ,eur_g04
10:49:35  11  ,eur_g05
10:49:35  12  ,eur_g06
10:49:35  13  ,eur_g07
10:49:35  14  ,eur_g08
10:49:35  15  ,eur_g09
10:49:35  16  ,eur_g10
10:49:35  17  ,eur_g11
10:49:35  18  ,eur_g12
10:49:35  19  ,eur_g13
10:49:35  20  ,eur_g14
10:49:35  21  ,eur_g15
10:49:35  22  ,eur_g16
10:49:35  23  ,eur_g17
10:49:35  24  ,eur_g18
10:49:35  25  ,eur_g19
10:49:35  26  ,eur_g20
10:49:35  27  ,eur_g21
10:49:35  28  ,eur_g22
10:49:35  29  ,eur_g23
10:49:35  30  ,eur_g24
10:49:35  31  ,eur_g25
10:49:35  32  ,eur_g26
10:49:35  33  ,eur_g27
10:49:35  34  ,eur_g28
10:49:35  35  ,eur_g29
10:49:35  36  ,eur_g30
10:49:35  37  ,eur_g31
10:49:35  38  ,eur_g32
10:49:35  39  ,eur_g33
10:49:35  40  ,eur_g34
10:49:35  41  ,eur_g35
10:49:35  42  ,eur_g36
10:49:35  43  ,eur_g37
10:49:35  44  ,eur_g38
10:49:35  45  ,eur_g39
10:49:35  46  ,eur_g40
10:49:35  47  ,eur_g41
10:49:35  48  ,aud_g00
10:49:35  49  ,aud_g01
10:49:35  50  ,aud_g02
10:49:35  51  ,aud_g03
10:49:35  52  ,aud_g04
10:49:35  53  ,aud_g05
10:49:35  54  ,aud_g06
10:49:35  55  ,aud_g07
10:49:35  56  ,aud_g08
10:49:35  57  ,aud_g09
10:49:35  58  ,aud_g10
10:49:35  59  ,aud_g11
10:49:35  60  ,aud_g12
10:49:35  61  ,aud_g13
10:49:35  62  ,aud_g14
10:49:35  63  ,aud_g15
10:49:35  64  ,aud_g16
10:49:35  65  ,aud_g17
10:49:35  66  ,aud_g18
10:49:35  67  ,aud_g19
10:49:35  68  ,aud_g20
10:49:35  69  ,aud_g21
10:49:35  70  ,aud_g22
10:49:35  71  ,aud_g23
10:49:35  72  ,aud_g24
10:49:35  73  ,aud_g25
10:49:35  74  ,aud_g26
10:49:35  75  ,aud_g27
10:49:35  76  ,aud_g28
10:49:35  77  ,aud_g29
10:49:35  78  ,aud_g30
10:49:35  79  ,aud_g31
10:49:35  80  ,aud_g32
10:49:35  81  ,aud_g33
10:49:35  82  ,aud_g34
10:49:35  83  ,aud_g35
10:49:35  84  ,aud_g36
10:49:35  85  ,aud_g37
10:49:35  86  ,aud_g38
10:49:35  87  ,aud_g39
10:49:35  88  ,aud_g40
10:49:35  89  ,aud_g41
10:49:35  90  ,gbp_g00
10:49:35  91  ,gbp_g01
10:49:35  92  ,gbp_g02
10:49:35  93  ,gbp_g03
10:49:35  94  ,gbp_g04
10:49:35  95  ,gbp_g05
10:49:35  96  ,gbp_g06
10:49:35  97  ,gbp_g07
10:49:35  98  ,gbp_g08
10:49:35  99  ,gbp_g09
10:49:35 100  ,gbp_g10
10:49:35 101  ,gbp_g11
10:49:35 102  ,gbp_g12
10:49:35 103  ,gbp_g13
10:49:35 104  ,gbp_g14
10:49:35 105  ,gbp_g15
10:49:35 106  ,gbp_g16
10:49:35 107  ,gbp_g17
10:49:35 108  ,gbp_g18
10:49:35 109  ,gbp_g19
10:49:35 110  ,gbp_g20
10:49:35 111  ,gbp_g21
10:49:35 112  ,gbp_g22
10:49:35 113  ,gbp_g23
10:49:35 114  ,gbp_g24
10:49:35 115  ,gbp_g25
10:49:35 116  ,gbp_g26
10:49:35 117  ,gbp_g27
10:49:35 118  ,gbp_g28
10:49:35 119  ,gbp_g29
10:49:35 120  ,gbp_g30
10:49:35 121  ,gbp_g31
10:49:35 122  ,gbp_g32
10:49:35 123  ,gbp_g33
10:49:35 124  ,gbp_g34
10:49:35 125  ,gbp_g35
10:49:35 126  ,gbp_g36
10:49:35 127  ,gbp_g37
10:49:35 128  ,gbp_g38
10:49:35 129  ,gbp_g39
10:49:35 130  ,gbp_g40
10:49:35 131  ,gbp_g41
10:49:35 132  ,jpy_g00
10:49:35 133  ,jpy_g01
10:49:35 134  ,jpy_g02
10:49:35 135  ,jpy_g03
10:49:35 136  ,jpy_g04
10:49:35 137  ,jpy_g05
10:49:35 138  ,jpy_g06
10:49:35 139  ,jpy_g07
10:49:35 140  ,jpy_g08
10:49:35 141  ,jpy_g09
10:49:35 142  ,jpy_g10
10:49:35 143  ,jpy_g11
10:49:35 144  ,jpy_g12
10:49:35 145  ,jpy_g13
10:49:35 146  ,jpy_g14
10:49:35 147  ,jpy_g15
10:49:35 148  ,jpy_g16
10:49:35 149  ,jpy_g17
10:49:35 150  ,jpy_g18
10:49:35 151  ,jpy_g19
10:49:35 152  ,jpy_g20
10:49:35 153  ,jpy_g21
10:49:35 154  ,jpy_g22
10:49:35 155  ,jpy_g23
10:49:35 156  ,jpy_g24
10:49:35 157  ,jpy_g25
10:49:35 158  ,jpy_g26
10:49:35 159  ,jpy_g27
10:49:35 160  ,jpy_g28
10:49:35 161  ,jpy_g29
10:49:35 162  ,jpy_g30
10:49:35 163  ,jpy_g31
10:49:35 164  ,jpy_g32
10:49:35 165  ,jpy_g33
10:49:35 166  ,jpy_g34
10:49:35 167  ,jpy_g35
10:49:35 168  ,jpy_g36
10:49:35 169  ,jpy_g37
10:49:35 170  ,jpy_g38
10:49:35 171  ,jpy_g39
10:49:35 172  ,jpy_g40
10:49:35 173  ,jpy_g41
10:49:35 174  ,cad_g00
10:49:35 175  ,cad_g01
10:49:35 176  ,cad_g02
10:49:35 177  ,cad_g03
10:49:35 178  ,cad_g04
10:49:35 179  ,cad_g05
10:49:35 180  ,cad_g06
10:49:35 181  ,cad_g07
10:49:35 182  ,cad_g08
10:49:35 183  ,cad_g09
10:49:35 184  ,cad_g10
10:49:35 185  ,cad_g11
10:49:35 186  ,cad_g12
10:49:35 187  ,cad_g13
10:49:35 188  ,cad_g14
10:49:35 189  ,cad_g15
10:49:35 190  ,cad_g16
10:49:35 191  ,cad_g17
10:49:35 192  ,cad_g18
10:49:35 193  ,cad_g19
10:49:35 194  ,cad_g20
10:49:35 195  ,cad_g21
10:49:35 196  ,cad_g22
10:49:35 197  ,cad_g23
10:49:35 198  ,cad_g24
10:49:35 199  ,cad_g25
10:49:35 200  ,cad_g26
10:49:35 201  ,cad_g27
10:49:35 202  ,cad_g28
10:49:35 203  ,cad_g29
10:49:35 204  ,cad_g30
10:49:35 205  ,cad_g31
10:49:35 206  ,cad_g32
10:49:35 207  ,cad_g33
10:49:35 208  ,cad_g34
10:49:35 209  ,cad_g35
10:49:35 210  ,cad_g36
10:49:35 211  ,cad_g37
10:49:35 212  ,cad_g38
10:49:35 213  ,cad_g39
10:49:35 214  ,cad_g40
10:49:35 215  ,cad_g41
10:49:35 216  ,chf_g00
10:49:35 217  ,chf_g01
10:49:35 218  ,chf_g02
10:49:35 219  ,chf_g03
10:49:35 220  ,chf_g04
10:49:35 221  ,chf_g05
10:49:35 222  ,chf_g06
10:49:35 223  ,chf_g07
10:49:35 224  ,chf_g08
10:49:35 225  ,chf_g09
10:49:35 226  ,chf_g10
10:49:35 227  ,chf_g11
10:49:35 228  ,chf_g12
10:49:35 229  ,chf_g13
10:49:35 230  ,chf_g14
10:49:35 231  ,chf_g15
10:49:35 232  ,chf_g16
10:49:35 233  ,chf_g17
10:49:35 234  ,chf_g18
10:49:35 235  ,chf_g19
10:49:35 236  ,chf_g20
10:49:35 237  ,chf_g21
10:49:35 238  ,chf_g22
10:49:35 239  ,chf_g23
10:49:35 240  ,chf_g24
10:49:35 241  ,chf_g25
10:49:35 242  ,chf_g26
10:49:35 243  ,chf_g27
10:49:35 244  ,chf_g28
10:49:35 245  ,chf_g29
10:49:35 246  ,chf_g30
10:49:35 247  ,chf_g31
10:49:35 248  ,chf_g32
10:49:35 249  ,chf_g33
10:49:35 250  ,chf_g34
10:49:35 251  ,chf_g35
10:49:35 252  ,chf_g36
10:49:35 253  ,chf_g37
10:49:35 254  ,chf_g38
10:49:35 255  ,chf_g39
10:49:35 256  ,chf_g40
10:49:35 257  ,chf_g41
10:49:35 258  FROM aud_ms6 m
10:49:35 259  WHERE gattn IN('nup','up')
10:49:35 260  AND 1+m.ydate < '&1'||' '||'&2'
10:49:35 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2011-01-06'||' '||'10:30:00'

View created.

Elapsed: 00:00:00.11
10:49:35 SQL> 
10:49:35 SQL> -- rpt
10:49:35 SQL> 
10:49:35 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	    12775
up	     6616

Elapsed: 00:00:00.04
10:49:35 SQL> 
10:49:35 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
aud2011-01-05 10:25:00

Elapsed: 00:00:00.03
10:49:35 SQL> 
10:49:35 SQL> -- Now build model from bme and score sme
10:49:35 SQL> @score1gattn.sql
10:49:35 SQL> -- score1gattn.sql
10:49:35 SQL> 
10:49:35 SQL> -- Does the 1st SVM score
10:49:35 SQL> 
10:49:35 SQL> -- Fill up svmc_apply_prep
10:49:35 SQL> @score_gattn.sql
10:49:35 SQL> --
10:49:35 SQL> -- score_gattn.sql
10:49:35 SQL> --
10:49:35 SQL> 
10:49:35 SQL> -- usage: score_gattn.sql
10:49:35 SQL> 
10:49:35 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
10:49:35 SQL> 
10:49:35 SQL> DEFINE target	= 'gattn'
10:49:35 SQL> DEFINE model_name = 'forex15'
10:49:35 SQL> DEFINE bldtable	= 'bme'
10:49:35 SQL> DEFINE scoretable = 'sme'
10:49:35 SQL> DEFINE case_id	= 'prdate'
10:49:35 SQL> 
10:49:35 SQL> -- Define a variable to help me exclude some columns from some data mining calls
10:49:35 SQL> DEFINE exclude1 = "'&target','&case_id'"
10:49:35 SQL> 
10:49:35 SQL> -- Builds an SVM model using pl/sql.
10:49:35 SQL> 
10:49:35 SQL> -----------------------------------------------------------------------
10:49:35 SQL> --			    BUILD THE MODEL
10:49:35 SQL> -----------------------------------------------------------------------
10:49:35 SQL> 
10:49:35 SQL> -- Cleanup old build data preparation objects for repeat runs
10:49:35 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.01
10:49:35 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
10:49:35 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.00
10:49:35 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.00
10:49:35 SQL> 
10:49:35 SQL> 
10:49:35 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
10:49:35 SQL> --
10:49:35 SQL> -- DROP	TABLE svmc_settings ;
10:49:35 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
10:49:35 SQL> -- DELETE svmc_settings;
10:49:35 SQL> 
10:49:35 SQL> -- The default classification algorithm is Naive Bayes. So override
10:49:35 SQL> -- this choice to SVM using a settings table.
10:49:35 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
10:49:35 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
10:49:35 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
10:49:35 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
10:49:35 SQL> -- models.
10:49:35 SQL> --
10:49:35 SQL> 
10:49:35 SQL> -- Do this once and then comment it out.
10:49:35 SQL> -- That makes script go faster.
10:49:35 SQL> -- BEGIN
10:49:35 SQL> -- -- Populate settings table
10:49:35 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
10:49:35 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
10:49:35 SQL> --
10:49:35 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
10:49:35 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
10:49:35 SQL> --
10:49:35 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
10:49:35 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
10:49:35 SQL> --   COMMIT;
10:49:35 SQL> -- END;
10:49:35 SQL> -- /
10:49:35 SQL> 
10:49:35 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.00
10:49:35 SQL> 
10:49:35 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
10:49:35   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:49:35   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
10:49:35 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
10:49:35   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:49:35   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
10:49:35 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
10:49:35   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:49:35   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
10:49:35 SQL> 
10:49:35 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
10:49:35   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:49:35   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
10:49:35 SQL> 
10:49:35 SQL> --------------------------------
10:49:35 SQL> -- PREPARE BUILD (TRAINING) DATA
10:49:35 SQL> --
10:49:35 SQL> 
10:49:35 SQL> -- 1. Missing Value treatment for all Predictors and
10:49:35 SQL> -- 2. Outlier Treatment and
10:49:35 SQL> -- 3. Normalization are performed below.
10:49:35 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
10:49:35 SQL> --    normalized here.
10:49:35 SQL> 
10:49:35 SQL> BEGIN
10:49:35   2  	-- Perform missing value treatment for all predictors
10:49:35   3  	-- create miss tables
10:49:35   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
10:49:35   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
10:49:35   6  
10:49:35   7  	-- populate miss tables
10:49:35   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
10:49:35   9  	  miss_table_name => 'svmc_miss_num',
10:49:35  10  	  data_table_name => '&bldtable',
10:49:35  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:49:35  12  
10:49:35  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
10:49:35  14  	  miss_table_name => 'svmc_miss_cat',
10:49:35  15  	  data_table_name => '&bldtable',
10:49:35  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:49:35  17  
10:49:35  18  	-- xform input data to replace missing values
10:49:35  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
10:49:35  20  	  miss_table_name => 'svmc_miss_num',
10:49:35  21  	  data_table_name => '&bldtable',
10:49:35  22  	  xform_view_name => 'xformed_build_miss_num');
10:49:35  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
10:49:35  24  	  miss_table_name => 'svmc_miss_cat',
10:49:35  25  	  data_table_name => '&bldtable',
10:49:35  26  	  xform_view_name => 'xformed_build_miss_cat');
10:49:35  27  
10:49:35  28  	-- Perform outlier treatment.
10:49:35  29  	-- create clip table
10:49:35  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
10:49:35  31  
10:49:35  32  	-- populate clip table
10:49:35  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
10:49:35  34  	  clip_table_name => 'svmc_clip',
10:49:35  35  	  data_table_name => '&bldtable',
10:49:35  36  	  tail_frac	  => 0.025,
10:49:35  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:49:35  38  
10:49:35  39  	-- xform input data to winsorized data
10:49:35  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
10:49:35  41  	  clip_table_name => 'svmc_clip',
10:49:35  42  	  data_table_name => '&bldtable',
10:49:35  43  	  xform_view_name => 'svmc_winsor');
10:49:35  44  
10:49:35  45  	-- create normalization table
10:49:35  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
10:49:35  47  
10:49:35  48  	-- populate normalization table based on winsorized data
10:49:35  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
10:49:35  50  	  norm_table_name => 'svmc_norm',
10:49:35  51  	  data_table_name => 'svmc_winsor',
10:49:35  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:49:35  53  
10:49:35  54  	-- normalize the original data
10:49:35  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
10:49:35  56  	  norm_table_name => 'svmc_norm',
10:49:35  57  	  data_table_name => '&bldtable',
10:49:35  58  	  xform_view_name => 'svmc_build_prep');
10:49:35  59  END;
10:49:35  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:19.24
10:49:54 SQL> 
10:49:54 SQL> ---------------------
10:49:54 SQL> -- CREATE A NEW MODEL
10:49:54 SQL> --
10:49:54 SQL> -- Cleanup old model with the same name for repeat runs
10:49:54 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
10:49:54   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:49:54   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex15');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.86
10:49:55 SQL> 
10:49:55 SQL> -- Build a new SVM Model
10:49:55 SQL> BEGIN
10:49:55   2  	DBMS_DATA_MINING.CREATE_MODEL(
10:49:55   3  	  model_name	      => '&model_name',
10:49:55   4  	  mining_function     => dbms_data_mining.classification,
10:49:55   5  	  data_table_name     => 'svmc_build_prep',
10:49:55   6  	  case_id_column_name => '&case_id',
10:49:55   7  	  target_column_name  => '&target',
10:49:55   8  	  settings_table_name => 'svmc_settings');
10:49:55   9  END;
10:49:55  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex15',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:29.42
10:50:25 SQL> 
10:50:25 SQL> -----------------------------------------------------------------------
10:50:25 SQL> --			       APPLY/score THE MODEL
10:50:25 SQL> -----------------------------------------------------------------------
10:50:25 SQL> 
10:50:25 SQL> -- Cleanup old scoring data preparation objects for repeat runs
10:50:25 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
10:50:25   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:50:25   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
10:50:25 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
10:50:25   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:50:25   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
10:50:25 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
10:50:25   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:50:25   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
10:50:25 SQL> -----------------------
10:50:25 SQL> -- PREPARE SCORING DATA
10:50:25 SQL> --
10:50:25 SQL> -- If the data for model creation has been prepared, then the data
10:50:25 SQL> -- to be scored using the model must be prepared in the same manner
10:50:25 SQL> -- in order to obtain meaningful results.
10:50:25 SQL> --
10:50:25 SQL> -- 1. Missing Value treatment for all Predictors and
10:50:25 SQL> -- 2. Normalization
10:50:25 SQL> -- No outlier treatment will be performed during test and apply. The
10:50:25 SQL> -- normalization step is sufficient, since the normalization parameters
10:50:25 SQL> -- already capture the effects of outlier treatment done with build data.
10:50:25 SQL> --
10:50:25 SQL> BEGIN
10:50:25   2  	-- Xform Test data to replace missing values
10:50:25   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
10:50:25   4  	  miss_table_name => 'svmc_miss_num',
10:50:25   5  	  data_table_name => '&scoretable',
10:50:25   6  	  xform_view_name => 'xformed_apply_miss_num');
10:50:25   7  
10:50:25   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
10:50:25   9  	  miss_table_name => 'svmc_miss_cat',
10:50:25  10  	  data_table_name => '&scoretable',
10:50:25  11  	  xform_view_name => 'xformed_apply_miss_cat');
10:50:25  12  
10:50:25  13  	-- Normalize the data to be scored
10:50:25  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
10:50:25  15  	  norm_table_name => 'svmc_norm',
10:50:25  16  	  data_table_name => '&scoretable',
10:50:25  17  	  xform_view_name => 'svmc_apply_prep');
10:50:25  18  END;
10:50:25  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.17
10:50:26 SQL> 
10:50:26 SQL> -- Use same model_name used in score_gattn.sql
10:50:26 SQL> DEFINE model_name = 'forex15'
10:50:26 SQL> 
10:50:26 SQL> DELETE fxscores6_gattn WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.03
10:50:26 SQL> 
10:50:26 SQL> INSERT INTO fxscores6_gattn (prdate,score,rundate,pair,ydate)
10:50:26   2  SELECT
10:50:26   3  prdate
10:50:26   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
10:50:26   5  ,sysdate
10:50:26   6  ,SUBSTR(prdate,1,3)pair
10:50:26   7  ,SUBSTR(prdate,4,19)ydate
10:50:26   8  FROM svmc_apply_prep
10:50:26   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex15,'up' USING *)score

1 row created.

Elapsed: 00:00:00.17
10:50:26 SQL> @aud_score1day_gattn.sql	2011-01-06 10:35:00
10:50:26 SQL> --
10:50:26 SQL> -- aud_score1day_gattn.sql
10:50:26 SQL> --
10:50:26 SQL> 
10:50:26 SQL> CREATE OR REPLACE VIEW sme AS
10:50:26   2  SELECT
10:50:26   3  'aud'||m.ydate prdate
10:50:26   4  ,NULL gattn
10:50:26   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
10:50:26   6  ,eur_g00
10:50:26   7  ,eur_g01
10:50:26   8  ,eur_g02
10:50:26   9  ,eur_g03
10:50:26  10  ,eur_g04
10:50:26  11  ,eur_g05
10:50:26  12  ,eur_g06
10:50:26  13  ,eur_g07
10:50:26  14  ,eur_g08
10:50:26  15  ,eur_g09
10:50:26  16  ,eur_g10
10:50:26  17  ,eur_g11
10:50:26  18  ,eur_g12
10:50:26  19  ,eur_g13
10:50:26  20  ,eur_g14
10:50:26  21  ,eur_g15
10:50:26  22  ,eur_g16
10:50:26  23  ,eur_g17
10:50:26  24  ,eur_g18
10:50:26  25  ,eur_g19
10:50:26  26  ,eur_g20
10:50:26  27  ,eur_g21
10:50:26  28  ,eur_g22
10:50:26  29  ,eur_g23
10:50:26  30  ,eur_g24
10:50:26  31  ,eur_g25
10:50:26  32  ,eur_g26
10:50:26  33  ,eur_g27
10:50:26  34  ,eur_g28
10:50:26  35  ,eur_g29
10:50:26  36  ,eur_g30
10:50:26  37  ,eur_g31
10:50:26  38  ,eur_g32
10:50:26  39  ,eur_g33
10:50:26  40  ,eur_g34
10:50:26  41  ,eur_g35
10:50:26  42  ,eur_g36
10:50:26  43  ,eur_g37
10:50:26  44  ,eur_g38
10:50:26  45  ,eur_g39
10:50:26  46  ,eur_g40
10:50:26  47  ,eur_g41
10:50:26  48  ,aud_g00
10:50:26  49  ,aud_g01
10:50:26  50  ,aud_g02
10:50:26  51  ,aud_g03
10:50:26  52  ,aud_g04
10:50:26  53  ,aud_g05
10:50:26  54  ,aud_g06
10:50:26  55  ,aud_g07
10:50:26  56  ,aud_g08
10:50:26  57  ,aud_g09
10:50:26  58  ,aud_g10
10:50:26  59  ,aud_g11
10:50:26  60  ,aud_g12
10:50:26  61  ,aud_g13
10:50:26  62  ,aud_g14
10:50:26  63  ,aud_g15
10:50:26  64  ,aud_g16
10:50:26  65  ,aud_g17
10:50:26  66  ,aud_g18
10:50:26  67  ,aud_g19
10:50:26  68  ,aud_g20
10:50:26  69  ,aud_g21
10:50:26  70  ,aud_g22
10:50:26  71  ,aud_g23
10:50:26  72  ,aud_g24
10:50:26  73  ,aud_g25
10:50:26  74  ,aud_g26
10:50:26  75  ,aud_g27
10:50:26  76  ,aud_g28
10:50:26  77  ,aud_g29
10:50:26  78  ,aud_g30
10:50:26  79  ,aud_g31
10:50:26  80  ,aud_g32
10:50:26  81  ,aud_g33
10:50:26  82  ,aud_g34
10:50:26  83  ,aud_g35
10:50:26  84  ,aud_g36
10:50:26  85  ,aud_g37
10:50:26  86  ,aud_g38
10:50:26  87  ,aud_g39
10:50:26  88  ,aud_g40
10:50:26  89  ,aud_g41
10:50:26  90  ,gbp_g00
10:50:26  91  ,gbp_g01
10:50:26  92  ,gbp_g02
10:50:26  93  ,gbp_g03
10:50:26  94  ,gbp_g04
10:50:26  95  ,gbp_g05
10:50:26  96  ,gbp_g06
10:50:26  97  ,gbp_g07
10:50:26  98  ,gbp_g08
10:50:26  99  ,gbp_g09
10:50:26 100  ,gbp_g10
10:50:26 101  ,gbp_g11
10:50:26 102  ,gbp_g12
10:50:26 103  ,gbp_g13
10:50:26 104  ,gbp_g14
10:50:26 105  ,gbp_g15
10:50:26 106  ,gbp_g16
10:50:26 107  ,gbp_g17
10:50:26 108  ,gbp_g18
10:50:26 109  ,gbp_g19
10:50:26 110  ,gbp_g20
10:50:26 111  ,gbp_g21
10:50:26 112  ,gbp_g22
10:50:26 113  ,gbp_g23
10:50:26 114  ,gbp_g24
10:50:26 115  ,gbp_g25
10:50:26 116  ,gbp_g26
10:50:26 117  ,gbp_g27
10:50:26 118  ,gbp_g28
10:50:26 119  ,gbp_g29
10:50:26 120  ,gbp_g30
10:50:26 121  ,gbp_g31
10:50:26 122  ,gbp_g32
10:50:26 123  ,gbp_g33
10:50:26 124  ,gbp_g34
10:50:26 125  ,gbp_g35
10:50:26 126  ,gbp_g36
10:50:26 127  ,gbp_g37
10:50:26 128  ,gbp_g38
10:50:26 129  ,gbp_g39
10:50:26 130  ,gbp_g40
10:50:26 131  ,gbp_g41
10:50:26 132  ,jpy_g00
10:50:26 133  ,jpy_g01
10:50:26 134  ,jpy_g02
10:50:26 135  ,jpy_g03
10:50:26 136  ,jpy_g04
10:50:26 137  ,jpy_g05
10:50:26 138  ,jpy_g06
10:50:26 139  ,jpy_g07
10:50:26 140  ,jpy_g08
10:50:26 141  ,jpy_g09
10:50:26 142  ,jpy_g10
10:50:26 143  ,jpy_g11
10:50:26 144  ,jpy_g12
10:50:26 145  ,jpy_g13
10:50:26 146  ,jpy_g14
10:50:26 147  ,jpy_g15
10:50:26 148  ,jpy_g16
10:50:26 149  ,jpy_g17
10:50:26 150  ,jpy_g18
10:50:26 151  ,jpy_g19
10:50:26 152  ,jpy_g20
10:50:26 153  ,jpy_g21
10:50:26 154  ,jpy_g22
10:50:26 155  ,jpy_g23
10:50:26 156  ,jpy_g24
10:50:26 157  ,jpy_g25
10:50:26 158  ,jpy_g26
10:50:26 159  ,jpy_g27
10:50:26 160  ,jpy_g28
10:50:26 161  ,jpy_g29
10:50:26 162  ,jpy_g30
10:50:26 163  ,jpy_g31
10:50:26 164  ,jpy_g32
10:50:26 165  ,jpy_g33
10:50:26 166  ,jpy_g34
10:50:26 167  ,jpy_g35
10:50:26 168  ,jpy_g36
10:50:26 169  ,jpy_g37
10:50:26 170  ,jpy_g38
10:50:26 171  ,jpy_g39
10:50:26 172  ,jpy_g40
10:50:26 173  ,jpy_g41
10:50:26 174  ,cad_g00
10:50:26 175  ,cad_g01
10:50:26 176  ,cad_g02
10:50:26 177  ,cad_g03
10:50:26 178  ,cad_g04
10:50:26 179  ,cad_g05
10:50:26 180  ,cad_g06
10:50:26 181  ,cad_g07
10:50:26 182  ,cad_g08
10:50:26 183  ,cad_g09
10:50:26 184  ,cad_g10
10:50:26 185  ,cad_g11
10:50:26 186  ,cad_g12
10:50:26 187  ,cad_g13
10:50:26 188  ,cad_g14
10:50:26 189  ,cad_g15
10:50:26 190  ,cad_g16
10:50:26 191  ,cad_g17
10:50:26 192  ,cad_g18
10:50:26 193  ,cad_g19
10:50:26 194  ,cad_g20
10:50:26 195  ,cad_g21
10:50:26 196  ,cad_g22
10:50:26 197  ,cad_g23
10:50:26 198  ,cad_g24
10:50:26 199  ,cad_g25
10:50:26 200  ,cad_g26
10:50:26 201  ,cad_g27
10:50:26 202  ,cad_g28
10:50:26 203  ,cad_g29
10:50:26 204  ,cad_g30
10:50:26 205  ,cad_g31
10:50:26 206  ,cad_g32
10:50:26 207  ,cad_g33
10:50:26 208  ,cad_g34
10:50:26 209  ,cad_g35
10:50:26 210  ,cad_g36
10:50:26 211  ,cad_g37
10:50:26 212  ,cad_g38
10:50:26 213  ,cad_g39
10:50:26 214  ,cad_g40
10:50:26 215  ,cad_g41
10:50:26 216  ,chf_g00
10:50:26 217  ,chf_g01
10:50:26 218  ,chf_g02
10:50:26 219  ,chf_g03
10:50:26 220  ,chf_g04
10:50:26 221  ,chf_g05
10:50:26 222  ,chf_g06
10:50:26 223  ,chf_g07
10:50:26 224  ,chf_g08
10:50:26 225  ,chf_g09
10:50:26 226  ,chf_g10
10:50:26 227  ,chf_g11
10:50:26 228  ,chf_g12
10:50:26 229  ,chf_g13
10:50:26 230  ,chf_g14
10:50:26 231  ,chf_g15
10:50:26 232  ,chf_g16
10:50:26 233  ,chf_g17
10:50:26 234  ,chf_g18
10:50:26 235  ,chf_g19
10:50:26 236  ,chf_g20
10:50:26 237  ,chf_g21
10:50:26 238  ,chf_g22
10:50:26 239  ,chf_g23
10:50:26 240  ,chf_g24
10:50:26 241  ,chf_g25
10:50:26 242  ,chf_g26
10:50:26 243  ,chf_g27
10:50:26 244  ,chf_g28
10:50:26 245  ,chf_g29
10:50:26 246  ,chf_g30
10:50:26 247  ,chf_g31
10:50:26 248  ,chf_g32
10:50:26 249  ,chf_g33
10:50:26 250  ,chf_g34
10:50:26 251  ,chf_g35
10:50:26 252  ,chf_g36
10:50:26 253  ,chf_g37
10:50:26 254  ,chf_g38
10:50:26 255  ,chf_g39
10:50:26 256  ,chf_g40
10:50:26 257  ,chf_g41
10:50:26 258  FROM aud_ms6 m
10:50:26 259  WHERE m.ydate = '&1'||' '||'&2'
10:50:26 260  /
old 259: WHERE m.ydate = '&1'||' '||'&2'
new 259: WHERE m.ydate = '2011-01-06'||' '||'10:35:00'

View created.

Elapsed: 00:00:00.13
10:50:26 SQL> 
10:50:26 SQL> -- rpt
10:50:26 SQL> -- We should see just 1 row:
10:50:26 SQL> 
10:50:26 SQL> SELECT COUNT(prdate) FROM sme;

COUNT(PRDATE)
-------------
	    1

Elapsed: 00:00:00.02
10:50:26 SQL> 
10:50:26 SQL> -- Build the model:
10:50:26 SQL> CREATE OR REPLACE VIEW bme AS
10:50:26   2  SELECT
10:50:26   3  'aud'||m.ydate prdate
10:50:26   4  ,gattn
10:50:26   5  ,m.ydate - TO_DATE('2000-01-01','YYYY-MM-DD')daycount
10:50:26   6  ,eur_g00
10:50:26   7  ,eur_g01
10:50:26   8  ,eur_g02
10:50:26   9  ,eur_g03
10:50:26  10  ,eur_g04
10:50:26  11  ,eur_g05
10:50:26  12  ,eur_g06
10:50:26  13  ,eur_g07
10:50:26  14  ,eur_g08
10:50:26  15  ,eur_g09
10:50:26  16  ,eur_g10
10:50:26  17  ,eur_g11
10:50:26  18  ,eur_g12
10:50:26  19  ,eur_g13
10:50:26  20  ,eur_g14
10:50:26  21  ,eur_g15
10:50:26  22  ,eur_g16
10:50:26  23  ,eur_g17
10:50:26  24  ,eur_g18
10:50:26  25  ,eur_g19
10:50:26  26  ,eur_g20
10:50:26  27  ,eur_g21
10:50:26  28  ,eur_g22
10:50:26  29  ,eur_g23
10:50:26  30  ,eur_g24
10:50:26  31  ,eur_g25
10:50:26  32  ,eur_g26
10:50:26  33  ,eur_g27
10:50:26  34  ,eur_g28
10:50:26  35  ,eur_g29
10:50:26  36  ,eur_g30
10:50:26  37  ,eur_g31
10:50:26  38  ,eur_g32
10:50:26  39  ,eur_g33
10:50:26  40  ,eur_g34
10:50:26  41  ,eur_g35
10:50:26  42  ,eur_g36
10:50:26  43  ,eur_g37
10:50:26  44  ,eur_g38
10:50:26  45  ,eur_g39
10:50:26  46  ,eur_g40
10:50:26  47  ,eur_g41
10:50:26  48  ,aud_g00
10:50:26  49  ,aud_g01
10:50:26  50  ,aud_g02
10:50:26  51  ,aud_g03
10:50:26  52  ,aud_g04
10:50:26  53  ,aud_g05
10:50:26  54  ,aud_g06
10:50:26  55  ,aud_g07
10:50:26  56  ,aud_g08
10:50:26  57  ,aud_g09
10:50:26  58  ,aud_g10
10:50:26  59  ,aud_g11
10:50:26  60  ,aud_g12
10:50:26  61  ,aud_g13
10:50:26  62  ,aud_g14
10:50:26  63  ,aud_g15
10:50:26  64  ,aud_g16
10:50:26  65  ,aud_g17
10:50:26  66  ,aud_g18
10:50:26  67  ,aud_g19
10:50:26  68  ,aud_g20
10:50:26  69  ,aud_g21
10:50:26  70  ,aud_g22
10:50:26  71  ,aud_g23
10:50:26  72  ,aud_g24
10:50:26  73  ,aud_g25
10:50:26  74  ,aud_g26
10:50:26  75  ,aud_g27
10:50:26  76  ,aud_g28
10:50:26  77  ,aud_g29
10:50:26  78  ,aud_g30
10:50:26  79  ,aud_g31
10:50:26  80  ,aud_g32
10:50:26  81  ,aud_g33
10:50:26  82  ,aud_g34
10:50:26  83  ,aud_g35
10:50:26  84  ,aud_g36
10:50:26  85  ,aud_g37
10:50:26  86  ,aud_g38
10:50:26  87  ,aud_g39
10:50:26  88  ,aud_g40
10:50:26  89  ,aud_g41
10:50:26  90  ,gbp_g00
10:50:26  91  ,gbp_g01
10:50:26  92  ,gbp_g02
10:50:26  93  ,gbp_g03
10:50:26  94  ,gbp_g04
10:50:26  95  ,gbp_g05
10:50:26  96  ,gbp_g06
10:50:26  97  ,gbp_g07
10:50:26  98  ,gbp_g08
10:50:26  99  ,gbp_g09
10:50:26 100  ,gbp_g10
10:50:26 101  ,gbp_g11
10:50:26 102  ,gbp_g12
10:50:26 103  ,gbp_g13
10:50:26 104  ,gbp_g14
10:50:26 105  ,gbp_g15
10:50:26 106  ,gbp_g16
10:50:26 107  ,gbp_g17
10:50:26 108  ,gbp_g18
10:50:26 109  ,gbp_g19
10:50:26 110  ,gbp_g20
10:50:26 111  ,gbp_g21
10:50:26 112  ,gbp_g22
10:50:26 113  ,gbp_g23
10:50:26 114  ,gbp_g24
10:50:26 115  ,gbp_g25
10:50:26 116  ,gbp_g26
10:50:26 117  ,gbp_g27
10:50:26 118  ,gbp_g28
10:50:26 119  ,gbp_g29
10:50:26 120  ,gbp_g30
10:50:26 121  ,gbp_g31
10:50:26 122  ,gbp_g32
10:50:26 123  ,gbp_g33
10:50:26 124  ,gbp_g34
10:50:26 125  ,gbp_g35
10:50:26 126  ,gbp_g36
10:50:26 127  ,gbp_g37
10:50:26 128  ,gbp_g38
10:50:26 129  ,gbp_g39
10:50:26 130  ,gbp_g40
10:50:26 131  ,gbp_g41
10:50:26 132  ,jpy_g00
10:50:26 133  ,jpy_g01
10:50:26 134  ,jpy_g02
10:50:26 135  ,jpy_g03
10:50:26 136  ,jpy_g04
10:50:26 137  ,jpy_g05
10:50:26 138  ,jpy_g06
10:50:26 139  ,jpy_g07
10:50:26 140  ,jpy_g08
10:50:26 141  ,jpy_g09
10:50:26 142  ,jpy_g10
10:50:26 143  ,jpy_g11
10:50:26 144  ,jpy_g12
10:50:26 145  ,jpy_g13
10:50:26 146  ,jpy_g14
10:50:26 147  ,jpy_g15
10:50:26 148  ,jpy_g16
10:50:26 149  ,jpy_g17
10:50:26 150  ,jpy_g18
10:50:26 151  ,jpy_g19
10:50:26 152  ,jpy_g20
10:50:26 153  ,jpy_g21
10:50:26 154  ,jpy_g22
10:50:26 155  ,jpy_g23
10:50:26 156  ,jpy_g24
10:50:26 157  ,jpy_g25
10:50:26 158  ,jpy_g26
10:50:26 159  ,jpy_g27
10:50:26 160  ,jpy_g28
10:50:26 161  ,jpy_g29
10:50:26 162  ,jpy_g30
10:50:26 163  ,jpy_g31
10:50:26 164  ,jpy_g32
10:50:26 165  ,jpy_g33
10:50:26 166  ,jpy_g34
10:50:26 167  ,jpy_g35
10:50:26 168  ,jpy_g36
10:50:26 169  ,jpy_g37
10:50:26 170  ,jpy_g38
10:50:26 171  ,jpy_g39
10:50:26 172  ,jpy_g40
10:50:26 173  ,jpy_g41
10:50:26 174  ,cad_g00
10:50:26 175  ,cad_g01
10:50:26 176  ,cad_g02
10:50:26 177  ,cad_g03
10:50:26 178  ,cad_g04
10:50:26 179  ,cad_g05
10:50:26 180  ,cad_g06
10:50:26 181  ,cad_g07
10:50:26 182  ,cad_g08
10:50:26 183  ,cad_g09
10:50:26 184  ,cad_g10
10:50:26 185  ,cad_g11
10:50:26 186  ,cad_g12
10:50:26 187  ,cad_g13
10:50:26 188  ,cad_g14
10:50:26 189  ,cad_g15
10:50:26 190  ,cad_g16
10:50:26 191  ,cad_g17
10:50:26 192  ,cad_g18
10:50:26 193  ,cad_g19
10:50:26 194  ,cad_g20
10:50:26 195  ,cad_g21
10:50:26 196  ,cad_g22
10:50:26 197  ,cad_g23
10:50:26 198  ,cad_g24
10:50:26 199  ,cad_g25
10:50:26 200  ,cad_g26
10:50:26 201  ,cad_g27
10:50:26 202  ,cad_g28
10:50:26 203  ,cad_g29
10:50:26 204  ,cad_g30
10:50:26 205  ,cad_g31
10:50:26 206  ,cad_g32
10:50:26 207  ,cad_g33
10:50:26 208  ,cad_g34
10:50:26 209  ,cad_g35
10:50:26 210  ,cad_g36
10:50:26 211  ,cad_g37
10:50:26 212  ,cad_g38
10:50:26 213  ,cad_g39
10:50:26 214  ,cad_g40
10:50:26 215  ,cad_g41
10:50:26 216  ,chf_g00
10:50:26 217  ,chf_g01
10:50:26 218  ,chf_g02
10:50:26 219  ,chf_g03
10:50:26 220  ,chf_g04
10:50:26 221  ,chf_g05
10:50:26 222  ,chf_g06
10:50:26 223  ,chf_g07
10:50:26 224  ,chf_g08
10:50:26 225  ,chf_g09
10:50:26 226  ,chf_g10
10:50:26 227  ,chf_g11
10:50:26 228  ,chf_g12
10:50:26 229  ,chf_g13
10:50:26 230  ,chf_g14
10:50:26 231  ,chf_g15
10:50:26 232  ,chf_g16
10:50:26 233  ,chf_g17
10:50:26 234  ,chf_g18
10:50:26 235  ,chf_g19
10:50:26 236  ,chf_g20
10:50:26 237  ,chf_g21
10:50:26 238  ,chf_g22
10:50:26 239  ,chf_g23
10:50:26 240  ,chf_g24
10:50:26 241  ,chf_g25
10:50:26 242  ,chf_g26
10:50:26 243  ,chf_g27
10:50:26 244  ,chf_g28
10:50:26 245  ,chf_g29
10:50:26 246  ,chf_g30
10:50:26 247  ,chf_g31
10:50:26 248  ,chf_g32
10:50:26 249  ,chf_g33
10:50:26 250  ,chf_g34
10:50:26 251  ,chf_g35
10:50:26 252  ,chf_g36
10:50:26 253  ,chf_g37
10:50:26 254  ,chf_g38
10:50:26 255  ,chf_g39
10:50:26 256  ,chf_g40
10:50:26 257  ,chf_g41
10:50:26 258  FROM aud_ms6 m
10:50:26 259  WHERE gattn IN('nup','up')
10:50:26 260  AND 1+m.ydate < '&1'||' '||'&2'
10:50:26 261  /
old 260: AND 1+m.ydate < '&1'||' '||'&2'
new 260: AND 1+m.ydate < '2011-01-06'||' '||'10:35:00'

View created.

Elapsed: 00:00:00.11
10:50:26 SQL> 
10:50:26 SQL> -- rpt
10:50:26 SQL> 
10:50:26 SQL> SELECT gattn, COUNT(prdate) FROM bme GROUP BY gattn;

GAT COUNT(PRDATE)
--- -------------
nup	    12776
up	     6616

Elapsed: 00:00:00.05
10:50:26 SQL> 
10:50:26 SQL> SELECT MAX(prdate) FROM bme;

MAX(PRDATE)
----------------------
aud2011-01-05 10:30:00

Elapsed: 00:00:00.03
10:50:26 SQL> 
10:50:26 SQL> -- Now build model from bme and score sme
10:50:26 SQL> @score1gattn.sql
10:50:26 SQL> -- score1gattn.sql
10:50:26 SQL> 
10:50:26 SQL> -- Does the 1st SVM score
10:50:26 SQL> 
10:50:26 SQL> -- Fill up svmc_apply_prep
10:50:26 SQL> @score_gattn.sql
10:50:26 SQL> --
10:50:26 SQL> -- score_gattn.sql
10:50:26 SQL> --
10:50:26 SQL> 
10:50:26 SQL> -- usage: score_gattn.sql
10:50:26 SQL> 
10:50:26 SQL> -- A script which feeds data to SVM and captures the results in table svmc_apply_prep
10:50:26 SQL> 
10:50:26 SQL> DEFINE target	= 'gattn'
10:50:26 SQL> DEFINE model_name = 'forex15'
10:50:26 SQL> DEFINE bldtable	= 'bme'
10:50:26 SQL> DEFINE scoretable = 'sme'
10:50:26 SQL> DEFINE case_id	= 'prdate'
10:50:26 SQL> 
10:50:26 SQL> -- Define a variable to help me exclude some columns from some data mining calls
10:50:26 SQL> DEFINE exclude1 = "'&target','&case_id'"
10:50:26 SQL> 
10:50:26 SQL> -- Builds an SVM model using pl/sql.
10:50:26 SQL> 
10:50:26 SQL> -----------------------------------------------------------------------
10:50:26 SQL> --			    BUILD THE MODEL
10:50:26 SQL> -----------------------------------------------------------------------
10:50:26 SQL> 
10:50:26 SQL> -- Cleanup old build data preparation objects for repeat runs
10:50:26 SQL> DELETE svmc_miss_num;

253 rows deleted.

Elapsed: 00:00:00.01
10:50:26 SQL> DELETE svmc_miss_cat;

0 rows deleted.

Elapsed: 00:00:00.00
10:50:26 SQL> DELETE svmc_clip;

253 rows deleted.

Elapsed: 00:00:00.00
10:50:26 SQL> DELETE svmc_norm;

253 rows deleted.

Elapsed: 00:00:00.00
10:50:26 SQL> 
10:50:26 SQL> 
10:50:26 SQL> -- CREATE AND POPULATE A SETTINGS TABLE
10:50:26 SQL> --
10:50:26 SQL> -- DROP	TABLE svmc_settings ;
10:50:26 SQL> -- CREATE TABLE svmc_settings ( setting_name  VARCHAR2(30), setting_value VARCHAR2(30));
10:50:26 SQL> -- DELETE svmc_settings;
10:50:26 SQL> 
10:50:26 SQL> -- The default classification algorithm is Naive Bayes. So override
10:50:26 SQL> -- this choice to SVM using a settings table.
10:50:26 SQL> -- SVM chooses a kernel type automatically. This choice can be overriden
10:50:26 SQL> -- by the user. Linear kernel is preferred high dimensional data, and
10:50:26 SQL> -- Gaussian kernel for low dimensional data. Here we use linear kernel
10:50:26 SQL> -- to demonstrate the get_model_details_svm() API, which applies only for
10:50:26 SQL> -- models.
10:50:26 SQL> --
10:50:26 SQL> 
10:50:26 SQL> -- Do this once and then comment it out.
10:50:26 SQL> -- That makes script go faster.
10:50:26 SQL> -- BEGIN
10:50:26 SQL> -- -- Populate settings table
10:50:26 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
10:50:26 SQL> --   (dbms_data_mining.algo_name, dbms_data_mining.algo_support_vector_machines);
10:50:26 SQL> --
10:50:26 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
10:50:26 SQL> --   (dbms_data_mining.svms_kernel_function, dbms_data_mining.svms_gaussian);
10:50:26 SQL> --
10:50:26 SQL> --   INSERT INTO svmc_settings (setting_name, setting_value) VALUES
10:50:26 SQL> --   (dbms_data_mining.svms_kernel_cache_size,190123123);
10:50:26 SQL> --   COMMIT;
10:50:26 SQL> -- END;
10:50:26 SQL> -- /
10:50:26 SQL> 
10:50:26 SQL> SELECT * FROM svmc_settings;

SETTING_NAME		       SETTING_VALUE
------------------------------ ------------------------------
ALGO_NAME		       ALGO_SUPPORT_VECTOR_MACHINES
SVMS_KERNEL_FUNCTION	       SVMS_GAUSSIAN
SVMS_KERNEL_CACHE_SIZE	       320123123

Elapsed: 00:00:00.01
10:50:26 SQL> 
10:50:26 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_winsor';
10:50:26   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:50:26   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
10:50:27 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_build_prep';
10:50:27   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:50:27   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.15
10:50:27 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_num';
10:50:27   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:50:27   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.17
10:50:27 SQL> 
10:50:27 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_build_miss_cat';
10:50:27   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:50:27   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.11
10:50:27 SQL> 
10:50:27 SQL> --------------------------------
10:50:27 SQL> -- PREPARE BUILD (TRAINING) DATA
10:50:27 SQL> --
10:50:27 SQL> 
10:50:27 SQL> -- 1. Missing Value treatment for all Predictors and
10:50:27 SQL> -- 2. Outlier Treatment and
10:50:27 SQL> -- 3. Normalization are performed below.
10:50:27 SQL> --    NOTE: that unlike SVM regression, the classification target is NOT
10:50:27 SQL> --    normalized here.
10:50:27 SQL> 
10:50:27 SQL> BEGIN
10:50:27   2  	-- Perform missing value treatment for all predictors
10:50:27   3  	-- create miss tables
10:50:27   4  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_NUM (miss_table_name => 'svmc_miss_num');
10:50:27   5  	--  DBMS_DATA_MINING_TRANSFORM.CREATE_MISS_CAT (miss_table_name => 'svmc_miss_cat');
10:50:27   6  
10:50:27   7  	-- populate miss tables
10:50:27   8  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_NUM_MEAN (
10:50:27   9  	  miss_table_name => 'svmc_miss_num',
10:50:27  10  	  data_table_name => '&bldtable',
10:50:27  11  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:50:27  12  
10:50:27  13  	DBMS_DATA_MINING_TRANSFORM.INSERT_MISS_CAT_MODE (
10:50:27  14  	  miss_table_name => 'svmc_miss_cat',
10:50:27  15  	  data_table_name => '&bldtable',
10:50:27  16  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:50:27  17  
10:50:27  18  	-- xform input data to replace missing values
10:50:27  19  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
10:50:27  20  	  miss_table_name => 'svmc_miss_num',
10:50:27  21  	  data_table_name => '&bldtable',
10:50:27  22  	  xform_view_name => 'xformed_build_miss_num');
10:50:27  23  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
10:50:27  24  	  miss_table_name => 'svmc_miss_cat',
10:50:27  25  	  data_table_name => '&bldtable',
10:50:27  26  	  xform_view_name => 'xformed_build_miss_cat');
10:50:27  27  
10:50:27  28  	-- Perform outlier treatment.
10:50:27  29  	-- create clip table
10:50:27  30  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_CLIP (clip_table_name => 'svmc_clip');
10:50:27  31  
10:50:27  32  	-- populate clip table
10:50:27  33  	DBMS_DATA_MINING_TRANSFORM.INSERT_CLIP_WINSOR_TAIL (
10:50:27  34  	  clip_table_name => 'svmc_clip',
10:50:27  35  	  data_table_name => '&bldtable',
10:50:27  36  	  tail_frac	  => 0.025,
10:50:27  37  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:50:27  38  
10:50:27  39  	-- xform input data to winsorized data
10:50:27  40  	DBMS_DATA_MINING_TRANSFORM.XFORM_CLIP(
10:50:27  41  	  clip_table_name => 'svmc_clip',
10:50:27  42  	  data_table_name => '&bldtable',
10:50:27  43  	  xform_view_name => 'svmc_winsor');
10:50:27  44  
10:50:27  45  	-- create normalization table
10:50:27  46  	-- DBMS_DATA_MINING_TRANSFORM.CREATE_NORM_LIN (norm_table_name => 'svmc_norm');
10:50:27  47  
10:50:27  48  	-- populate normalization table based on winsorized data
10:50:27  49  	DBMS_DATA_MINING_TRANSFORM.INSERT_NORM_LIN_MINMAX (
10:50:27  50  	  norm_table_name => 'svmc_norm',
10:50:27  51  	  data_table_name => 'svmc_winsor',
10:50:27  52  	  exclude_list	  => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
10:50:27  53  
10:50:27  54  	-- normalize the original data
10:50:27  55  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
10:50:27  56  	  norm_table_name => 'svmc_norm',
10:50:27  57  	  data_table_name => '&bldtable',
10:50:27  58  	  xform_view_name => 'svmc_build_prep');
10:50:27  59  END;
10:50:27  60  /
old  10:     data_table_name => '&bldtable',
new  10:     data_table_name => 'bme',
old  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  11:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  15:     data_table_name => '&bldtable',
new  15:     data_table_name => 'bme',
old  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  16:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  21:     data_table_name => '&bldtable',
new  21:     data_table_name => 'bme',
old  25:     data_table_name => '&bldtable',
new  25:     data_table_name => 'bme',
old  35:     data_table_name => '&bldtable',
new  35:     data_table_name => 'bme',
old  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  37:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  42:     data_table_name => '&bldtable',
new  42:     data_table_name => 'bme',
old  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST (&exclude1));
new  52:     exclude_list    => DBMS_DATA_MINING_TRANSFORM.COLUMN_LIST ('gattn','prdate'));
old  57:     data_table_name => '&bldtable',
new  57:     data_table_name => 'bme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:18.28
10:50:45 SQL> 
10:50:45 SQL> ---------------------
10:50:45 SQL> -- CREATE A NEW MODEL
10:50:45 SQL> --
10:50:45 SQL> -- Cleanup old model with the same name for repeat runs
10:50:45 SQL> BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
10:50:45   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:50:45   3  /
old   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('&model_name');
new   1: BEGIN DBMS_DATA_MINING.DROP_MODEL('forex15');

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.12
10:50:46 SQL> 
10:50:46 SQL> -- Build a new SVM Model
10:50:46 SQL> BEGIN
10:50:46   2  	DBMS_DATA_MINING.CREATE_MODEL(
10:50:46   3  	  model_name	      => '&model_name',
10:50:46   4  	  mining_function     => dbms_data_mining.classification,
10:50:46   5  	  data_table_name     => 'svmc_build_prep',
10:50:46   6  	  case_id_column_name => '&case_id',
10:50:46   7  	  target_column_name  => '&target',
10:50:46   8  	  settings_table_name => 'svmc_settings');
10:50:46   9  END;
10:50:46  10  /
old   3:     model_name 	 => '&model_name',
new   3:     model_name 	 => 'forex15',
old   6:     case_id_column_name => '&case_id',
new   6:     case_id_column_name => 'prdate',
old   7:     target_column_name  => '&target',
new   7:     target_column_name  => 'gattn',

PL/SQL procedure successfully completed.

Elapsed: 00:00:27.84
10:51:14 SQL> 
10:51:14 SQL> -----------------------------------------------------------------------
10:51:14 SQL> --			       APPLY/score THE MODEL
10:51:14 SQL> -----------------------------------------------------------------------
10:51:14 SQL> 
10:51:14 SQL> -- Cleanup old scoring data preparation objects for repeat runs
10:51:14 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_num';
10:51:14   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:51:14   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.05
10:51:14 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW xformed_apply_miss_cat';
10:51:14   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:51:14   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
10:51:14 SQL> BEGIN EXECUTE IMMEDIATE 'DROP VIEW svmc_apply_prep';
10:51:14   2  EXCEPTION WHEN OTHERS THEN NULL; END;
10:51:14   3  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
10:51:14 SQL> -----------------------
10:51:14 SQL> -- PREPARE SCORING DATA
10:51:14 SQL> --
10:51:14 SQL> -- If the data for model creation has been prepared, then the data
10:51:14 SQL> -- to be scored using the model must be prepared in the same manner
10:51:14 SQL> -- in order to obtain meaningful results.
10:51:14 SQL> --
10:51:14 SQL> -- 1. Missing Value treatment for all Predictors and
10:51:14 SQL> -- 2. Normalization
10:51:14 SQL> -- No outlier treatment will be performed during test and apply. The
10:51:14 SQL> -- normalization step is sufficient, since the normalization parameters
10:51:14 SQL> -- already capture the effects of outlier treatment done with build data.
10:51:14 SQL> --
10:51:14 SQL> BEGIN
10:51:14   2  	-- Xform Test data to replace missing values
10:51:14   3  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_NUM(
10:51:14   4  	  miss_table_name => 'svmc_miss_num',
10:51:14   5  	  data_table_name => '&scoretable',
10:51:14   6  	  xform_view_name => 'xformed_apply_miss_num');
10:51:14   7  
10:51:14   8  	DBMS_DATA_MINING_TRANSFORM.XFORM_MISS_CAT(
10:51:14   9  	  miss_table_name => 'svmc_miss_cat',
10:51:14  10  	  data_table_name => '&scoretable',
10:51:14  11  	  xform_view_name => 'xformed_apply_miss_cat');
10:51:14  12  
10:51:14  13  	-- Normalize the data to be scored
10:51:14  14  	DBMS_DATA_MINING_TRANSFORM.XFORM_NORM_LIN (
10:51:14  15  	  norm_table_name => 'svmc_norm',
10:51:14  16  	  data_table_name => '&scoretable',
10:51:14  17  	  xform_view_name => 'svmc_apply_prep');
10:51:14  18  END;
10:51:14  19  /
old   5:     data_table_name => '&scoretable',
new   5:     data_table_name => 'sme',
old  10:     data_table_name => '&scoretable',
new  10:     data_table_name => 'sme',
old  16:     data_table_name => '&scoretable',
new  16:     data_table_name => 'sme',

PL/SQL procedure successfully completed.

Elapsed: 00:00:01.19
10:51:16 SQL> 
10:51:16 SQL> -- Use same model_name used in score_gattn.sql
10:51:16 SQL> DEFINE model_name = 'forex15'
10:51:16 SQL> 
10:51:16 SQL> DELETE fxscores6_gattn WHERE score > 0 AND prdate IN(SELECT prdate FROM svmc_apply_prep);

0 rows deleted.

Elapsed: 00:00:00.04
10:51:16 SQL> 
10:51:16 SQL> INSERT INTO fxscores6_gattn (prdate,score,rundate,pair,ydate)
10:51:16   2  SELECT
10:51:16   3  prdate
10:51:16   4  ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
10:51:16   5  ,sysdate
10:51:16   6  ,SUBSTR(prdate,1,3)pair
10:51:16   7  ,SUBSTR(prdate,4,19)ydate
10:51:16   8  FROM svmc_apply_prep
10:51:16   9  /
old   4: ,PREDICTION_PROBABILITY(&model_name,'up' USING *)score
new   4: ,PREDICTION_PROBABILITY(forex15,'up' USING *)score

1 row created.

Elapsed: 00:00:00.17
10:51:16 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
