
SQL*Plus: Release 11.2.0.1.0 Production on Fri Dec 24 07:00:40 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

07:00:40 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
07:00:40 SQL> 07:00:40 SQL> --
07:00:40 SQL> -- eur10.sql
07:00:40 SQL> --
07:00:40 SQL> 
07:00:40 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:00:40 SQL> 
07:00:40 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.03
07:00:40 SQL> 
07:00:40 SQL> -- I created di5min here:
07:00:40 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:00:40 SQL> 
07:00:40 SQL> CREATE OR REPLACE VIEW q11 AS
07:00:40   2  SELECT
07:00:40   3  pair
07:00:40   4  ,ydate
07:00:40   5  ,prdate
07:00:40   6  ,rownum rnum -- acts as t in my time-series
07:00:40   7  ,clse
07:00:40   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
07:00:40   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
07:00:40  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
07:00:40  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
07:00:40  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
07:00:40  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
07:00:40  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
07:00:40  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
07:00:40  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
07:00:40  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
07:00:40  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
07:00:40  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
07:00:40  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
07:00:40  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
07:00:40  22  FROM di5min WHERE pair LIKE'%eur%'
07:00:40  23  ORDER BY ydate
07:00:40  24  /

View created.

Elapsed: 00:00:00.06
07:00:40 SQL> 
07:00:40 SQL> -- rpt
07:00:40 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
eur_usd        20742

Elapsed: 00:00:00.37
07:00:41 SQL> 
07:00:41 SQL> -- Calc deltas and gains
07:00:41 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.26
07:00:41 SQL> 
07:00:41 SQL> CREATE TABLE q13 COMPRESS AS
07:00:41   2  SELECT
07:00:41   3  pair
07:00:41   4  ,ydate
07:00:41   5  ,prdate
07:00:41   6  ,rnum
07:00:41   7  ,ld8
07:00:41   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
07:00:41   9  -- step by 2
07:00:41  10  ,clse-lg6  d06
07:00:41  11  ,lg6 -lg8  d68
07:00:41  12  ,lg8 -lg10 d810
07:00:41  13  ,lg10-lg12 d1012
07:00:41  14  ,lg12-lg14 d1214
07:00:41  15  ,lg14-lg16 d1416
07:00:41  16  ,lg16-lg18 d1618
07:00:41  17  -- step by 4
07:00:41  18  ,lg6 -lg10 d610
07:00:41  19  ,lg8 -lg12 d812
07:00:41  20  ,lg10-lg14 d1014
07:00:41  21  ,lg12-lg16 d1216
07:00:41  22  --
07:00:41  23  ,ABS(clse-lg6 )dc6
07:00:41  24  ,ABS(clse-lg8 )dc8
07:00:41  25  ,ABS(clse-lg10)dc10
07:00:41  26  ,ABS(clse-lg12)dc12
07:00:41  27  ,ABS(clse-lg14)dc14
07:00:41  28  ,ABS(clse-lg16)dc16
07:00:41  29  ,ABS(clse-lg18)dc18
07:00:41  30  ,ABS(clse-lg20)dc20
07:00:41  31  ,ABS(clse-lg22)dc22
07:00:41  32  ,(ld8-clse) ug8
07:00:41  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:00:41  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:00:41  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:00:41  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:00:41  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:00:41  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:00:41  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:00:41  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
07:00:41  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
07:00:41  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
07:00:41  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
07:00:41  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
07:00:41  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
07:00:41  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:00:41  47  ,0+TO_CHAR(ydate,'D')d
07:00:41  48  ,0+TO_CHAR(ydate,'W')w
07:00:41  49  -- mpm stands for minutes-past-midnight:
07:00:41  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:00:41  51  FROM q11
07:00:41  52  -- I dont want any NULL values from the LAG() functions:
07:00:41  53  WHERE lg32 > 0
07:00:41  54  ORDER BY pair,ydate
07:00:41  55  /

Table created.

Elapsed: 00:00:02.08
07:00:43 SQL> 
07:00:43 SQL> -- rpt
07:00:43 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	   10119
	-1	   10239

Elapsed: 00:00:00.04
07:00:43 SQL> 
07:00:43 SQL> -- Calc gains and ntiles
07:00:43 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.18
07:00:43 SQL> CREATE TABLE q15 COMPRESS AS
07:00:43   2  SELECT
07:00:43   3  pair
07:00:43   4  ,ydate
07:00:43   5  ,prdate -- Should be unique
07:00:43   6  ,trend -- +1 or -1
07:00:43   7  -- Use NTILE() to derive some attributes
07:00:43   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
07:00:43   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
07:00:43  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
07:00:43  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
07:00:43  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
07:00:43  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
07:00:43  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
07:00:43  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
07:00:43  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
07:00:43  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
07:00:43  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
07:00:43  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
07:00:43  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
07:00:43  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
07:00:43  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
07:00:43  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
07:00:43  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
07:00:43  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
07:00:43  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
07:00:43  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
07:00:43  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
07:00:43  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
07:00:43  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
07:00:43  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
07:00:43  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
07:00:43  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
07:00:43  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
07:00:43  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
07:00:43  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
07:00:43  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
07:00:43  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
07:00:43  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
07:00:43  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
07:00:43  41  ,hh    att32
07:00:43  42  ,d     att33
07:00:43  43  ,w     att34
07:00:43  44  ,mpm   att35
07:00:43  45  ,trend att36
07:00:43  46  ,ug8 g8
07:00:43  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
07:00:43  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
07:00:43  49  FROM q13
07:00:43  50  ORDER BY pair,ydate
07:00:43  51  /

Table created.

Elapsed: 00:00:05.37
07:00:49 SQL> 
07:00:49 SQL> -- rpt
07:00:49 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
07:00:49   2  GROUP BY pair,trend,gatt,gattn
07:00:49   3  ORDER BY pair,trend,gatt,gattn
07:00:49   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
eur_usd 	-1 nup nup .000025712	    3021
eur_usd 	-1 nup up  -.00602802	    3651
eur_usd 	-1 up  nup .005756878	    3564
eur_usd 	-1			       0
eur_usd 	 1 nup nup -.00007853	    2949
eur_usd 	 1 nup up  -.00626215	    3463
eur_usd 	 1 up  nup .006576823	    3614
eur_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
07:00:49 SQL> 
07:00:49 SQL> -- rpt
07:00:49 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
eur_usd 2010-12-24 06:55:00

Elapsed: 00:00:00.02
07:00:49 SQL> 
07:00:49 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
07:00:49 SQL> CREATE TABLE modsrc COMPRESS AS
07:00:49   2  SELECT
07:00:49   3  pair
07:00:49   4  ,ydate
07:00:49   5  ,prdate
07:00:49   6  ,trend
07:00:49   7  ,g8
07:00:49   8  ,gatt
07:00:49   9  ,gattn
07:00:49  10  FROM q15
07:00:49  11  /

Table created.

Elapsed: 00:00:00.09
07:00:49 SQL> 
07:00:49 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
07:00:49 SQL> 
07:00:49 SQL> -- rpt
07:00:49 SQL> 
07:00:49 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20742

Elapsed: 00:00:00.37
07:00:50 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.01
07:00:50 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.00
07:00:50 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.01
07:00:50 SQL> 
07:00:50 SQL> DROP   TABLE eur_ms10 ;

Table dropped.

Elapsed: 00:00:00.03
07:00:50 SQL> CREATE TABLE eur_ms10 COMPRESS AS
07:00:50   2  SELECT
07:00:50   3  ydate
07:00:50   4  ,trend eur_trend
07:00:50   5  ,g8    eur_g8
07:00:50   6  ,gatt  eur_gatt
07:00:50   7  ,gattn eur_gattn
07:00:50   8  FROM modsrc
07:00:50   9  /

Table created.

Elapsed: 00:00:00.07
07:00:50 SQL> 
07:00:50 SQL> ANALYZE TABLE eur_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
07:00:50 SQL> 
07:00:50 SQL> -- rpt
07:00:50 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 15:05:01 2010-12-24 06:55:00	10026	  -.0218     .02165
	-1 2010-09-16 17:15:01 2010-12-24 01:50:00	10236	 -.02085      .0196

Elapsed: 00:00:00.02
07:00:50 SQL> SELECT eur_trend,MIN(ydate),MAX(ydate),COUNT(eur_trend),MIN(eur_g8),MAX(eur_g8)FROM eur_ms10 GROUP BY eur_trend;

 EUR_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(EUR_TREND) MIN(EUR_G8) MAX(EUR_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 15:05:01 2010-12-24 06:55:00	      10119	 -.0218      .02165
	-1 2010-09-16 17:15:01 2010-12-24 01:50:00	      10239	-.02085       .0196

Elapsed: 00:00:00.01
07:00:50 SQL> 
07:00:50 SQL> -- I need a copy of q15 attributes
07:00:50 SQL> 
07:00:50 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.04
07:00:50 SQL> CREATE TABLE eur_att COMPRESS AS
07:00:50   2  SELECT
07:00:50   3  ydate
07:00:50   4  ,att00 eur_att00
07:00:50   5  ,att01 eur_att01
07:00:50   6  ,att02 eur_att02
07:00:50   7  ,att03 eur_att03
07:00:50   8  ,att04 eur_att04
07:00:50   9  ,att05 eur_att05
07:00:50  10  ,att06 eur_att06
07:00:50  11  ,att07 eur_att07
07:00:50  12  ,att08 eur_att08
07:00:50  13  ,att09 eur_att09
07:00:50  14  ,att10 eur_att10
07:00:50  15  ,att11 eur_att11
07:00:50  16  ,att12 eur_att12
07:00:50  17  ,att13 eur_att13
07:00:50  18  ,att14 eur_att14
07:00:50  19  ,att15 eur_att15
07:00:50  20  ,att16 eur_att16
07:00:50  21  ,att17 eur_att17
07:00:50  22  ,att18 eur_att18
07:00:50  23  ,att19 eur_att19
07:00:50  24  ,att20 eur_att20
07:00:50  25  ,att21 eur_att21
07:00:50  26  ,att22 eur_att22
07:00:50  27  ,att23 eur_att23
07:00:50  28  ,att24 eur_att24
07:00:50  29  ,att25 eur_att25
07:00:50  30  ,att26 eur_att26
07:00:50  31  ,att27 eur_att27
07:00:50  32  ,att28 eur_att28
07:00:50  33  ,att29 eur_att29
07:00:50  34  ,att30 eur_att30
07:00:50  35  ,att31 eur_att31
07:00:50  36  ,att32 eur_att32
07:00:50  37  ,att33 eur_att33
07:00:50  38  ,att34 eur_att34
07:00:50  39  ,att35 eur_att35
07:00:50  40  ,att36 eur_att36
07:00:50  41  FROM q15
07:00:50  42  /

Table created.

Elapsed: 00:00:00.17
07:00:50 SQL> 
07:00:50 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.50
07:00:51 SQL> 
07:00:51 SQL> -- rpt
07:00:51 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     20358

Elapsed: 00:00:00.00
07:00:51 SQL> 
07:00:51 SQL> --
07:00:51 SQL> -- aud10.sql
07:00:51 SQL> --
07:00:51 SQL> 
07:00:51 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:00:51 SQL> 
07:00:51 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
07:00:51 SQL> 
07:00:51 SQL> -- I created di5min here:
07:00:51 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:00:51 SQL> 
07:00:51 SQL> CREATE OR REPLACE VIEW q11 AS
07:00:51   2  SELECT
07:00:51   3  pair
07:00:51   4  ,ydate
07:00:51   5  ,prdate
07:00:51   6  ,rownum rnum -- acts as t in my time-series
07:00:51   7  ,clse
07:00:51   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
07:00:51   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
07:00:51  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
07:00:51  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
07:00:51  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
07:00:51  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
07:00:51  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
07:00:51  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
07:00:51  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
07:00:51  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
07:00:51  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
07:00:51  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
07:00:51  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
07:00:51  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
07:00:51  22  FROM di5min WHERE pair LIKE'%aud%'
07:00:51  23  ORDER BY ydate
07:00:51  24  /

View created.

Elapsed: 00:00:00.05
07:00:51 SQL> 
07:00:51 SQL> -- rpt
07:00:51 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
aud_usd        20739

Elapsed: 00:00:00.34
07:00:51 SQL> 
07:00:51 SQL> -- Calc deltas and gains
07:00:51 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.19
07:00:52 SQL> 
07:00:52 SQL> CREATE TABLE q13 COMPRESS AS
07:00:52   2  SELECT
07:00:52   3  pair
07:00:52   4  ,ydate
07:00:52   5  ,prdate
07:00:52   6  ,rnum
07:00:52   7  ,ld8
07:00:52   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
07:00:52   9  -- step by 2
07:00:52  10  ,clse-lg6  d06
07:00:52  11  ,lg6 -lg8  d68
07:00:52  12  ,lg8 -lg10 d810
07:00:52  13  ,lg10-lg12 d1012
07:00:52  14  ,lg12-lg14 d1214
07:00:52  15  ,lg14-lg16 d1416
07:00:52  16  ,lg16-lg18 d1618
07:00:52  17  -- step by 4
07:00:52  18  ,lg6 -lg10 d610
07:00:52  19  ,lg8 -lg12 d812
07:00:52  20  ,lg10-lg14 d1014
07:00:52  21  ,lg12-lg16 d1216
07:00:52  22  --
07:00:52  23  ,ABS(clse-lg6 )dc6
07:00:52  24  ,ABS(clse-lg8 )dc8
07:00:52  25  ,ABS(clse-lg10)dc10
07:00:52  26  ,ABS(clse-lg12)dc12
07:00:52  27  ,ABS(clse-lg14)dc14
07:00:52  28  ,ABS(clse-lg16)dc16
07:00:52  29  ,ABS(clse-lg18)dc18
07:00:52  30  ,ABS(clse-lg20)dc20
07:00:52  31  ,ABS(clse-lg22)dc22
07:00:52  32  ,(ld8-clse) ug8
07:00:52  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:00:52  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:00:52  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:00:52  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:00:52  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:00:52  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:00:52  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:00:52  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
07:00:52  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
07:00:52  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
07:00:52  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
07:00:52  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
07:00:52  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
07:00:52  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:00:52  47  ,0+TO_CHAR(ydate,'D')d
07:00:52  48  ,0+TO_CHAR(ydate,'W')w
07:00:52  49  -- mpm stands for minutes-past-midnight:
07:00:52  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:00:52  51  FROM q11
07:00:52  52  -- I dont want any NULL values from the LAG() functions:
07:00:52  53  WHERE lg32 > 0
07:00:52  54  ORDER BY pair,ydate
07:00:52  55  /

Table created.

Elapsed: 00:00:01.70
07:00:53 SQL> 
07:00:53 SQL> -- rpt
07:00:53 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	   10806
	-1	    9549

Elapsed: 00:00:00.03
07:00:53 SQL> 
07:00:53 SQL> -- Calc gains and ntiles
07:00:53 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.13
07:00:53 SQL> CREATE TABLE q15 COMPRESS AS
07:00:53   2  SELECT
07:00:53   3  pair
07:00:53   4  ,ydate
07:00:53   5  ,prdate -- Should be unique
07:00:53   6  ,trend -- +1 or -1
07:00:53   7  -- Use NTILE() to derive some attributes
07:00:53   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
07:00:53   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
07:00:53  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
07:00:53  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
07:00:53  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
07:00:53  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
07:00:53  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
07:00:53  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
07:00:53  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
07:00:53  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
07:00:53  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
07:00:53  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
07:00:53  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
07:00:53  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
07:00:53  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
07:00:53  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
07:00:53  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
07:00:53  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
07:00:53  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
07:00:53  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
07:00:53  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
07:00:53  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
07:00:53  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
07:00:53  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
07:00:53  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
07:00:53  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
07:00:53  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
07:00:53  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
07:00:53  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
07:00:53  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
07:00:53  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
07:00:53  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
07:00:53  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
07:00:53  41  ,hh    att32
07:00:53  42  ,d     att33
07:00:53  43  ,w     att34
07:00:53  44  ,mpm   att35
07:00:53  45  ,trend att36
07:00:53  46  ,ug8 g8
07:00:53  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
07:00:53  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
07:00:53  49  FROM q13
07:00:53  50  ORDER BY pair,ydate
07:00:53  51  /

Table created.

Elapsed: 00:00:05.44
07:00:59 SQL> 
07:00:59 SQL> -- rpt
07:00:59 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
07:00:59   2  GROUP BY pair,trend,gatt,gattn
07:00:59   3  ORDER BY pair,trend,gatt,gattn
07:00:59   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
aud_usd 	-1 nup nup .000032912	    3550
aud_usd 	-1 nup up  -.00525835	    2519
aud_usd 	-1 up  nup .005173898	    3402
aud_usd 	-1			       0
aud_usd 	 1 nup nup .000026096	    4347
aud_usd 	 1 nup up  -.00500047	    3062
aud_usd 	 1 up  nup .005093811	    3379
aud_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.02
07:00:59 SQL> 
07:00:59 SQL> -- rpt
07:00:59 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
aud_usd 2010-12-24 06:55:00

Elapsed: 00:00:00.01
07:00:59 SQL> 
07:00:59 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
07:00:59 SQL> CREATE TABLE modsrc COMPRESS AS
07:00:59   2  SELECT
07:00:59   3  pair
07:00:59   4  ,ydate
07:00:59   5  ,prdate
07:00:59   6  ,trend
07:00:59   7  ,g8
07:00:59   8  ,gatt
07:00:59   9  ,gattn
07:00:59  10  FROM q15
07:00:59  11  /

Table created.

Elapsed: 00:00:00.08
07:00:59 SQL> 
07:00:59 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
07:00:59 SQL> 
07:00:59 SQL> -- rpt
07:00:59 SQL> 
07:00:59 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20739

Elapsed: 00:00:00.34
07:01:00 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20355

Elapsed: 00:00:00.01
07:01:00 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20355

Elapsed: 00:00:00.00
07:01:00 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20355

Elapsed: 00:00:00.00
07:01:00 SQL> 
07:01:00 SQL> DROP   TABLE aud_ms10 ;

Table dropped.

Elapsed: 00:00:00.14
07:01:00 SQL> CREATE TABLE aud_ms10 COMPRESS AS
07:01:00   2  SELECT
07:01:00   3  ydate
07:01:00   4  ,trend aud_trend
07:01:00   5  ,g8    aud_g8
07:01:00   6  ,gatt  aud_gatt
07:01:00   7  ,gattn aud_gattn
07:01:00   8  FROM modsrc
07:01:00   9  /

Table created.

Elapsed: 00:00:00.07
07:01:00 SQL> 
07:01:00 SQL> ANALYZE TABLE aud_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
07:01:00 SQL> 
07:01:00 SQL> -- rpt
07:01:00 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 15:05:01 2010-12-24 06:55:00	10788	  -.0203      .0136
	-1 2010-09-16 15:15:01 2010-12-24 06:10:00	 9471	  -.0196      .0148

Elapsed: 00:00:00.02
07:01:00 SQL> SELECT aud_trend,MIN(ydate),MAX(ydate),COUNT(aud_trend),MIN(aud_g8),MAX(aud_g8)FROM aud_ms10 GROUP BY aud_trend;

 AUD_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(AUD_TREND) MIN(AUD_G8) MAX(AUD_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 15:05:01 2010-12-24 06:55:00	      10806	 -.0203       .0136
	-1 2010-09-16 15:15:01 2010-12-24 06:10:00	       9549	 -.0196       .0148

Elapsed: 00:00:00.01
07:01:00 SQL> 
07:01:00 SQL> -- I need a copy of q15 attributes
07:01:00 SQL> 
07:01:00 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.04
07:01:00 SQL> CREATE TABLE aud_att COMPRESS AS
07:01:00   2  SELECT
07:01:00   3  ydate
07:01:00   4  ,att00 aud_att00
07:01:00   5  ,att01 aud_att01
07:01:00   6  ,att02 aud_att02
07:01:00   7  ,att03 aud_att03
07:01:00   8  ,att04 aud_att04
07:01:00   9  ,att05 aud_att05
07:01:00  10  ,att06 aud_att06
07:01:00  11  ,att07 aud_att07
07:01:00  12  ,att08 aud_att08
07:01:00  13  ,att09 aud_att09
07:01:00  14  ,att10 aud_att10
07:01:00  15  ,att11 aud_att11
07:01:00  16  ,att12 aud_att12
07:01:00  17  ,att13 aud_att13
07:01:00  18  ,att14 aud_att14
07:01:00  19  ,att15 aud_att15
07:01:00  20  ,att16 aud_att16
07:01:00  21  ,att17 aud_att17
07:01:00  22  ,att18 aud_att18
07:01:00  23  ,att19 aud_att19
07:01:00  24  ,att20 aud_att20
07:01:00  25  ,att21 aud_att21
07:01:00  26  ,att22 aud_att22
07:01:00  27  ,att23 aud_att23
07:01:00  28  ,att24 aud_att24
07:01:00  29  ,att25 aud_att25
07:01:00  30  ,att26 aud_att26
07:01:00  31  ,att27 aud_att27
07:01:00  32  ,att28 aud_att28
07:01:00  33  ,att29 aud_att29
07:01:00  34  ,att30 aud_att30
07:01:00  35  ,att31 aud_att31
07:01:00  36  ,att32 aud_att32
07:01:00  37  ,att33 aud_att33
07:01:00  38  ,att34 aud_att34
07:01:00  39  ,att35 aud_att35
07:01:00  40  ,att36 aud_att36
07:01:00  41  FROM q15
07:01:00  42  /

Table created.

Elapsed: 00:00:00.17
07:01:00 SQL> 
07:01:00 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
07:01:01 SQL> 
07:01:01 SQL> -- rpt
07:01:01 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     20355

Elapsed: 00:00:00.00
07:01:01 SQL> 
07:01:01 SQL> --
07:01:01 SQL> -- gbp10.sql
07:01:01 SQL> --
07:01:01 SQL> 
07:01:01 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:01:01 SQL> 
07:01:01 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.33
07:01:01 SQL> 
07:01:01 SQL> -- I created di5min here:
07:01:01 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:01:01 SQL> 
07:01:01 SQL> CREATE OR REPLACE VIEW q11 AS
07:01:01   2  SELECT
07:01:01   3  pair
07:01:01   4  ,ydate
07:01:01   5  ,prdate
07:01:01   6  ,rownum rnum -- acts as t in my time-series
07:01:01   7  ,clse
07:01:01   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
07:01:01   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
07:01:01  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
07:01:01  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
07:01:01  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
07:01:01  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
07:01:01  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
07:01:01  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
07:01:01  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
07:01:01  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
07:01:01  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
07:01:01  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
07:01:01  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
07:01:01  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
07:01:01  22  FROM di5min WHERE pair LIKE'%gbp%'
07:01:01  23  ORDER BY ydate
07:01:01  24  /

View created.

Elapsed: 00:00:00.05
07:01:01 SQL> 
07:01:01 SQL> -- rpt
07:01:01 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
gbp_usd        20741

Elapsed: 00:00:00.34
07:01:01 SQL> 
07:01:01 SQL> -- Calc deltas and gains
07:01:01 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.21
07:01:02 SQL> 
07:01:02 SQL> CREATE TABLE q13 COMPRESS AS
07:01:02   2  SELECT
07:01:02   3  pair
07:01:02   4  ,ydate
07:01:02   5  ,prdate
07:01:02   6  ,rnum
07:01:02   7  ,ld8
07:01:02   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
07:01:02   9  -- step by 2
07:01:02  10  ,clse-lg6  d06
07:01:02  11  ,lg6 -lg8  d68
07:01:02  12  ,lg8 -lg10 d810
07:01:02  13  ,lg10-lg12 d1012
07:01:02  14  ,lg12-lg14 d1214
07:01:02  15  ,lg14-lg16 d1416
07:01:02  16  ,lg16-lg18 d1618
07:01:02  17  -- step by 4
07:01:02  18  ,lg6 -lg10 d610
07:01:02  19  ,lg8 -lg12 d812
07:01:02  20  ,lg10-lg14 d1014
07:01:02  21  ,lg12-lg16 d1216
07:01:02  22  --
07:01:02  23  ,ABS(clse-lg6 )dc6
07:01:02  24  ,ABS(clse-lg8 )dc8
07:01:02  25  ,ABS(clse-lg10)dc10
07:01:02  26  ,ABS(clse-lg12)dc12
07:01:02  27  ,ABS(clse-lg14)dc14
07:01:02  28  ,ABS(clse-lg16)dc16
07:01:02  29  ,ABS(clse-lg18)dc18
07:01:02  30  ,ABS(clse-lg20)dc20
07:01:02  31  ,ABS(clse-lg22)dc22
07:01:02  32  ,(ld8-clse) ug8
07:01:02  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:01:02  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:01:02  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:01:02  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:01:02  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:01:02  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:01:02  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:01:02  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
07:01:02  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
07:01:02  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
07:01:02  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
07:01:02  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
07:01:02  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
07:01:02  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:01:02  47  ,0+TO_CHAR(ydate,'D')d
07:01:02  48  ,0+TO_CHAR(ydate,'W')w
07:01:02  49  -- mpm stands for minutes-past-midnight:
07:01:02  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:01:02  51  FROM q11
07:01:02  52  -- I dont want any NULL values from the LAG() functions:
07:01:02  53  WHERE lg32 > 0
07:01:02  54  ORDER BY pair,ydate
07:01:02  55  /

Table created.

Elapsed: 00:00:01.68
07:01:03 SQL> 
07:01:03 SQL> -- rpt
07:01:03 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9980
	-1	   10377

Elapsed: 00:00:00.03
07:01:03 SQL> 
07:01:03 SQL> -- Calc gains and ntiles
07:01:03 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.18
07:01:04 SQL> CREATE TABLE q15 COMPRESS AS
07:01:04   2  SELECT
07:01:04   3  pair
07:01:04   4  ,ydate
07:01:04   5  ,prdate -- Should be unique
07:01:04   6  ,trend -- +1 or -1
07:01:04   7  -- Use NTILE() to derive some attributes
07:01:04   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
07:01:04   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
07:01:04  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
07:01:04  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
07:01:04  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
07:01:04  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
07:01:04  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
07:01:04  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
07:01:04  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
07:01:04  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
07:01:04  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
07:01:04  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
07:01:04  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
07:01:04  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
07:01:04  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
07:01:04  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
07:01:04  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
07:01:04  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
07:01:04  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
07:01:04  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
07:01:04  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
07:01:04  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
07:01:04  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
07:01:04  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
07:01:04  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
07:01:04  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
07:01:04  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
07:01:04  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
07:01:04  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
07:01:04  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
07:01:04  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
07:01:04  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
07:01:04  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
07:01:04  41  ,hh    att32
07:01:04  42  ,d     att33
07:01:04  43  ,w     att34
07:01:04  44  ,mpm   att35
07:01:04  45  ,trend att36
07:01:04  46  ,ug8 g8
07:01:04  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
07:01:04  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
07:01:04  49  FROM q13
07:01:04  50  ORDER BY pair,ydate
07:01:04  51  /

Table created.

Elapsed: 00:00:05.35
07:01:09 SQL> 
07:01:09 SQL> -- rpt
07:01:09 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
07:01:09   2  GROUP BY pair,trend,gatt,gattn
07:01:09   3  ORDER BY pair,trend,gatt,gattn
07:01:09   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
gbp_usd 	-1 nup nup .000093646	    3840
gbp_usd 	-1 nup up   -.0059004	    3270
gbp_usd 	-1 up  nup .005468704	    3260
gbp_usd 	-1			       0
gbp_usd 	 1 nup nup -.00008046	    3647
gbp_usd 	 1 nup up  -.00554744	    3271
gbp_usd 	 1 up  nup .005975832	    2973
gbp_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
07:01:09 SQL> 
07:01:09 SQL> -- rpt
07:01:09 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
gbp_usd 2010-12-24 06:55:00

Elapsed: 00:00:00.02
07:01:09 SQL> 
07:01:09 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
07:01:09 SQL> CREATE TABLE modsrc COMPRESS AS
07:01:09   2  SELECT
07:01:09   3  pair
07:01:09   4  ,ydate
07:01:09   5  ,prdate
07:01:09   6  ,trend
07:01:09   7  ,g8
07:01:09   8  ,gatt
07:01:09   9  ,gattn
07:01:09  10  FROM q15
07:01:09  11  /

Table created.

Elapsed: 00:00:00.08
07:01:09 SQL> 
07:01:09 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
07:01:09 SQL> 
07:01:09 SQL> -- rpt
07:01:09 SQL> 
07:01:09 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20741

Elapsed: 00:00:00.34
07:01:10 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20357

Elapsed: 00:00:00.01
07:01:10 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20357

Elapsed: 00:00:00.00
07:01:10 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20357

Elapsed: 00:00:00.01
07:01:10 SQL> 
07:01:10 SQL> DROP   TABLE gbp_ms10 ;

Table dropped.

Elapsed: 00:00:00.03
07:01:10 SQL> CREATE TABLE gbp_ms10 COMPRESS AS
07:01:10   2  SELECT
07:01:10   3  ydate
07:01:10   4  ,trend gbp_trend
07:01:10   5  ,g8    gbp_g8
07:01:10   6  ,gatt  gbp_gatt
07:01:10   7  ,gattn gbp_gattn
07:01:10   8  FROM modsrc
07:01:10   9  /

Table created.

Elapsed: 00:00:00.06
07:01:10 SQL> 
07:01:10 SQL> ANALYZE TABLE gbp_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
07:01:10 SQL> 
07:01:10 SQL> -- rpt
07:01:10 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 15:05:01 2010-12-24 06:55:00	 9891	  -.0231       .019
	-1 2010-09-16 15:25:01 2010-12-24 06:05:00	10370	    -.02      .0204

Elapsed: 00:00:00.02
07:01:10 SQL> SELECT gbp_trend,MIN(ydate),MAX(ydate),COUNT(gbp_trend),MIN(gbp_g8),MAX(gbp_g8)FROM gbp_ms10 GROUP BY gbp_trend;

 GBP_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(GBP_TREND) MIN(GBP_G8) MAX(GBP_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 15:05:01 2010-12-24 06:55:00	       9980	 -.0231        .019
	-1 2010-09-16 15:25:01 2010-12-24 06:05:00	      10377	   -.02       .0204

Elapsed: 00:00:00.01
07:01:10 SQL> 
07:01:10 SQL> -- I need a copy of q15 attributes
07:01:10 SQL> 
07:01:10 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.03
07:01:10 SQL> CREATE TABLE gbp_att COMPRESS AS
07:01:10   2  SELECT
07:01:10   3  ydate
07:01:10   4  ,att00 gbp_att00
07:01:10   5  ,att01 gbp_att01
07:01:10   6  ,att02 gbp_att02
07:01:10   7  ,att03 gbp_att03
07:01:10   8  ,att04 gbp_att04
07:01:10   9  ,att05 gbp_att05
07:01:10  10  ,att06 gbp_att06
07:01:10  11  ,att07 gbp_att07
07:01:10  12  ,att08 gbp_att08
07:01:10  13  ,att09 gbp_att09
07:01:10  14  ,att10 gbp_att10
07:01:10  15  ,att11 gbp_att11
07:01:10  16  ,att12 gbp_att12
07:01:10  17  ,att13 gbp_att13
07:01:10  18  ,att14 gbp_att14
07:01:10  19  ,att15 gbp_att15
07:01:10  20  ,att16 gbp_att16
07:01:10  21  ,att17 gbp_att17
07:01:10  22  ,att18 gbp_att18
07:01:10  23  ,att19 gbp_att19
07:01:10  24  ,att20 gbp_att20
07:01:10  25  ,att21 gbp_att21
07:01:10  26  ,att22 gbp_att22
07:01:10  27  ,att23 gbp_att23
07:01:10  28  ,att24 gbp_att24
07:01:10  29  ,att25 gbp_att25
07:01:10  30  ,att26 gbp_att26
07:01:10  31  ,att27 gbp_att27
07:01:10  32  ,att28 gbp_att28
07:01:10  33  ,att29 gbp_att29
07:01:10  34  ,att30 gbp_att30
07:01:10  35  ,att31 gbp_att31
07:01:10  36  ,att32 gbp_att32
07:01:10  37  ,att33 gbp_att33
07:01:10  38  ,att34 gbp_att34
07:01:10  39  ,att35 gbp_att35
07:01:10  40  ,att36 gbp_att36
07:01:10  41  FROM q15
07:01:10  42  /

Table created.

Elapsed: 00:00:00.18
07:01:10 SQL> 
07:01:10 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
07:01:11 SQL> 
07:01:11 SQL> -- rpt
07:01:11 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     20357

Elapsed: 00:00:00.00
07:01:11 SQL> 
07:01:11 SQL> --
07:01:11 SQL> -- jpy10.sql
07:01:11 SQL> --
07:01:11 SQL> 
07:01:11 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:01:11 SQL> 
07:01:11 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.33
07:01:11 SQL> 
07:01:11 SQL> -- I created di5min here:
07:01:11 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:01:11 SQL> 
07:01:11 SQL> CREATE OR REPLACE VIEW q11 AS
07:01:11   2  SELECT
07:01:11   3  pair
07:01:11   4  ,ydate
07:01:11   5  ,prdate
07:01:11   6  ,rownum rnum -- acts as t in my time-series
07:01:11   7  ,clse
07:01:11   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
07:01:11   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
07:01:11  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
07:01:11  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
07:01:11  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
07:01:11  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
07:01:11  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
07:01:11  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
07:01:11  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
07:01:11  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
07:01:11  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
07:01:11  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
07:01:11  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
07:01:11  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
07:01:11  22  FROM di5min WHERE pair LIKE'%jpy%'
07:01:11  23  ORDER BY ydate
07:01:11  24  /

View created.

Elapsed: 00:00:00.03
07:01:11 SQL> 
07:01:11 SQL> -- rpt
07:01:11 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_jpy        20740

Elapsed: 00:00:00.34
07:01:11 SQL> 
07:01:11 SQL> -- Calc deltas and gains
07:01:11 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.28
07:01:12 SQL> 
07:01:12 SQL> CREATE TABLE q13 COMPRESS AS
07:01:12   2  SELECT
07:01:12   3  pair
07:01:12   4  ,ydate
07:01:12   5  ,prdate
07:01:12   6  ,rnum
07:01:12   7  ,ld8
07:01:12   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
07:01:12   9  -- step by 2
07:01:12  10  ,clse-lg6  d06
07:01:12  11  ,lg6 -lg8  d68
07:01:12  12  ,lg8 -lg10 d810
07:01:12  13  ,lg10-lg12 d1012
07:01:12  14  ,lg12-lg14 d1214
07:01:12  15  ,lg14-lg16 d1416
07:01:12  16  ,lg16-lg18 d1618
07:01:12  17  -- step by 4
07:01:12  18  ,lg6 -lg10 d610
07:01:12  19  ,lg8 -lg12 d812
07:01:12  20  ,lg10-lg14 d1014
07:01:12  21  ,lg12-lg16 d1216
07:01:12  22  --
07:01:12  23  ,ABS(clse-lg6 )dc6
07:01:12  24  ,ABS(clse-lg8 )dc8
07:01:12  25  ,ABS(clse-lg10)dc10
07:01:12  26  ,ABS(clse-lg12)dc12
07:01:12  27  ,ABS(clse-lg14)dc14
07:01:12  28  ,ABS(clse-lg16)dc16
07:01:12  29  ,ABS(clse-lg18)dc18
07:01:12  30  ,ABS(clse-lg20)dc20
07:01:12  31  ,ABS(clse-lg22)dc22
07:01:12  32  ,(ld8-clse) ug8
07:01:12  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:01:12  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:01:12  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:01:12  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:01:12  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:01:12  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:01:12  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:01:12  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
07:01:12  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
07:01:12  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
07:01:12  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
07:01:12  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
07:01:12  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
07:01:12  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:01:12  47  ,0+TO_CHAR(ydate,'D')d
07:01:12  48  ,0+TO_CHAR(ydate,'W')w
07:01:12  49  -- mpm stands for minutes-past-midnight:
07:01:12  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:01:12  51  FROM q11
07:01:12  52  -- I dont want any NULL values from the LAG() functions:
07:01:12  53  WHERE lg32 > 0
07:01:12  54  ORDER BY pair,ydate
07:01:12  55  /

Table created.

Elapsed: 00:00:01.66
07:01:13 SQL> 
07:01:13 SQL> -- rpt
07:01:13 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9416
	-1	   10940

Elapsed: 00:00:00.03
07:01:13 SQL> 
07:01:13 SQL> -- Calc gains and ntiles
07:01:13 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.25
07:01:14 SQL> CREATE TABLE q15 COMPRESS AS
07:01:14   2  SELECT
07:01:14   3  pair
07:01:14   4  ,ydate
07:01:14   5  ,prdate -- Should be unique
07:01:14   6  ,trend -- +1 or -1
07:01:14   7  -- Use NTILE() to derive some attributes
07:01:14   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
07:01:14   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
07:01:14  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
07:01:14  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
07:01:14  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
07:01:14  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
07:01:14  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
07:01:14  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
07:01:14  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
07:01:14  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
07:01:14  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
07:01:14  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
07:01:14  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
07:01:14  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
07:01:14  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
07:01:14  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
07:01:14  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
07:01:14  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
07:01:14  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
07:01:14  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
07:01:14  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
07:01:14  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
07:01:14  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
07:01:14  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
07:01:14  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
07:01:14  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
07:01:14  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
07:01:14  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
07:01:14  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
07:01:14  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
07:01:14  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
07:01:14  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
07:01:14  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
07:01:14  41  ,hh    att32
07:01:14  42  ,d     att33
07:01:14  43  ,w     att34
07:01:14  44  ,mpm   att35
07:01:14  45  ,trend att36
07:01:14  46  ,ug8 g8
07:01:14  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
07:01:14  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
07:01:14  49  FROM q13
07:01:14  50  ORDER BY pair,ydate
07:01:14  51  /

Table created.

Elapsed: 00:00:05.57
07:01:19 SQL> 
07:01:19 SQL> -- rpt
07:01:19 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
07:01:19   2  GROUP BY pair,trend,gatt,gattn
07:01:19   3  ORDER BY pair,trend,gatt,gattn
07:01:19   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_jpy 	-1 nup nup -7.437E-06	     168
usd_jpy 	-1 nup up  -.18440685	    5520
usd_jpy 	-1 up  nup  .17958365	    5233
usd_jpy 	-1			       0
usd_jpy 	 1 nup nup	    0	     118
usd_jpy 	 1 nup up   -.1887496	    5135
usd_jpy 	 1 up  nup .191958821	    4086
usd_jpy 	 1			       0

8 rows selected.

Elapsed: 00:00:00.02
07:01:19 SQL> 
07:01:19 SQL> -- rpt
07:01:19 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_jpy 2010-12-24 06:55:00

Elapsed: 00:00:00.02
07:01:19 SQL> 
07:01:19 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
07:01:19 SQL> CREATE TABLE modsrc COMPRESS AS
07:01:19   2  SELECT
07:01:19   3  pair
07:01:19   4  ,ydate
07:01:19   5  ,prdate
07:01:19   6  ,trend
07:01:19   7  ,g8
07:01:19   8  ,gatt
07:01:19   9  ,gattn
07:01:19  10  FROM q15
07:01:19  11  /

Table created.

Elapsed: 00:00:00.08
07:01:19 SQL> 
07:01:19 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
07:01:20 SQL> 
07:01:20 SQL> -- rpt
07:01:20 SQL> 
07:01:20 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20740

Elapsed: 00:00:00.34
07:01:20 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20356

Elapsed: 00:00:00.01
07:01:20 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20356

Elapsed: 00:00:00.00
07:01:20 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20356

Elapsed: 00:00:00.00
07:01:20 SQL> 
07:01:20 SQL> DROP   TABLE jpy_ms10 ;

Table dropped.

Elapsed: 00:00:00.04
07:01:20 SQL> CREATE TABLE jpy_ms10 COMPRESS AS
07:01:20   2  SELECT
07:01:20   3  ydate
07:01:20   4  ,trend jpy_trend
07:01:20   5  ,g8    jpy_g8
07:01:20   6  ,gatt  jpy_gatt
07:01:20   7  ,gattn jpy_gattn
07:01:20   8  FROM modsrc
07:01:20   9  /

Table created.

Elapsed: 00:00:00.07
07:01:20 SQL> 
07:01:20 SQL> ANALYZE TABLE jpy_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
07:01:20 SQL> 
07:01:20 SQL> -- rpt
07:01:20 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 15:05:01 2010-12-24 06:30:00	 9339	  -1.185	  1
	-1 2010-09-17 00:15:01 2010-12-24 06:55:00	10921	 -1.0575       1.32

Elapsed: 00:00:00.02
07:01:20 SQL> SELECT jpy_trend,MIN(ydate),MAX(ydate),COUNT(jpy_trend),MIN(jpy_g8),MAX(jpy_g8)FROM jpy_ms10 GROUP BY jpy_trend;

 JPY_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(JPY_TREND) MIN(JPY_G8) MAX(JPY_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 15:05:01 2010-12-24 06:30:00	       9416	 -1.185 	  1
	-1 2010-09-17 00:15:01 2010-12-24 06:55:00	      10940	-1.0575        1.32

Elapsed: 00:00:00.01
07:01:20 SQL> 
07:01:20 SQL> -- I need a copy of q15 attributes
07:01:20 SQL> 
07:01:20 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.04
07:01:20 SQL> CREATE TABLE jpy_att COMPRESS AS
07:01:20   2  SELECT
07:01:20   3  ydate
07:01:20   4  ,att00 jpy_att00
07:01:20   5  ,att01 jpy_att01
07:01:20   6  ,att02 jpy_att02
07:01:20   7  ,att03 jpy_att03
07:01:20   8  ,att04 jpy_att04
07:01:20   9  ,att05 jpy_att05
07:01:20  10  ,att06 jpy_att06
07:01:20  11  ,att07 jpy_att07
07:01:20  12  ,att08 jpy_att08
07:01:20  13  ,att09 jpy_att09
07:01:20  14  ,att10 jpy_att10
07:01:20  15  ,att11 jpy_att11
07:01:20  16  ,att12 jpy_att12
07:01:20  17  ,att13 jpy_att13
07:01:20  18  ,att14 jpy_att14
07:01:20  19  ,att15 jpy_att15
07:01:20  20  ,att16 jpy_att16
07:01:20  21  ,att17 jpy_att17
07:01:20  22  ,att18 jpy_att18
07:01:20  23  ,att19 jpy_att19
07:01:20  24  ,att20 jpy_att20
07:01:20  25  ,att21 jpy_att21
07:01:20  26  ,att22 jpy_att22
07:01:20  27  ,att23 jpy_att23
07:01:20  28  ,att24 jpy_att24
07:01:20  29  ,att25 jpy_att25
07:01:20  30  ,att26 jpy_att26
07:01:20  31  ,att27 jpy_att27
07:01:20  32  ,att28 jpy_att28
07:01:20  33  ,att29 jpy_att29
07:01:20  34  ,att30 jpy_att30
07:01:20  35  ,att31 jpy_att31
07:01:20  36  ,att32 jpy_att32
07:01:20  37  ,att33 jpy_att33
07:01:20  38  ,att34 jpy_att34
07:01:20  39  ,att35 jpy_att35
07:01:20  40  ,att36 jpy_att36
07:01:20  41  FROM q15
07:01:20  42  /

Table created.

Elapsed: 00:00:00.18
07:01:20 SQL> 
07:01:20 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.49
07:01:21 SQL> 
07:01:21 SQL> -- rpt
07:01:21 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     20356

Elapsed: 00:00:00.00
07:01:21 SQL> 
07:01:21 SQL> --
07:01:21 SQL> -- cad10.sql
07:01:21 SQL> --
07:01:21 SQL> 
07:01:21 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:01:21 SQL> 
07:01:21 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.34
07:01:21 SQL> 
07:01:21 SQL> -- I created di5min here:
07:01:21 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:01:21 SQL> 
07:01:21 SQL> CREATE OR REPLACE VIEW q11 AS
07:01:21   2  SELECT
07:01:21   3  pair
07:01:21   4  ,ydate
07:01:21   5  ,prdate
07:01:21   6  ,rownum rnum -- acts as t in my time-series
07:01:21   7  ,clse
07:01:21   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
07:01:21   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
07:01:21  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
07:01:21  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
07:01:21  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
07:01:21  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
07:01:21  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
07:01:21  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
07:01:21  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
07:01:21  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
07:01:21  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
07:01:21  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
07:01:21  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
07:01:21  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
07:01:21  22  FROM di5min WHERE pair LIKE'%cad%'
07:01:21  23  ORDER BY ydate
07:01:21  24  /

View created.

Elapsed: 00:00:00.05
07:01:21 SQL> 
07:01:21 SQL> -- rpt
07:01:21 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_cad        20738

Elapsed: 00:00:00.34
07:01:22 SQL> 
07:01:22 SQL> -- Calc deltas and gains
07:01:22 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.18
07:01:22 SQL> 
07:01:22 SQL> CREATE TABLE q13 COMPRESS AS
07:01:22   2  SELECT
07:01:22   3  pair
07:01:22   4  ,ydate
07:01:22   5  ,prdate
07:01:22   6  ,rnum
07:01:22   7  ,ld8
07:01:22   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
07:01:22   9  -- step by 2
07:01:22  10  ,clse-lg6  d06
07:01:22  11  ,lg6 -lg8  d68
07:01:22  12  ,lg8 -lg10 d810
07:01:22  13  ,lg10-lg12 d1012
07:01:22  14  ,lg12-lg14 d1214
07:01:22  15  ,lg14-lg16 d1416
07:01:22  16  ,lg16-lg18 d1618
07:01:22  17  -- step by 4
07:01:22  18  ,lg6 -lg10 d610
07:01:22  19  ,lg8 -lg12 d812
07:01:22  20  ,lg10-lg14 d1014
07:01:22  21  ,lg12-lg16 d1216
07:01:22  22  --
07:01:22  23  ,ABS(clse-lg6 )dc6
07:01:22  24  ,ABS(clse-lg8 )dc8
07:01:22  25  ,ABS(clse-lg10)dc10
07:01:22  26  ,ABS(clse-lg12)dc12
07:01:22  27  ,ABS(clse-lg14)dc14
07:01:22  28  ,ABS(clse-lg16)dc16
07:01:22  29  ,ABS(clse-lg18)dc18
07:01:22  30  ,ABS(clse-lg20)dc20
07:01:22  31  ,ABS(clse-lg22)dc22
07:01:22  32  ,(ld8-clse) ug8
07:01:22  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:01:22  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:01:22  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:01:22  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:01:22  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:01:22  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:01:22  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:01:22  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
07:01:22  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
07:01:22  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
07:01:22  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
07:01:22  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
07:01:22  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
07:01:22  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:01:22  47  ,0+TO_CHAR(ydate,'D')d
07:01:22  48  ,0+TO_CHAR(ydate,'W')w
07:01:22  49  -- mpm stands for minutes-past-midnight:
07:01:22  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:01:22  51  FROM q11
07:01:22  52  -- I dont want any NULL values from the LAG() functions:
07:01:22  53  WHERE lg32 > 0
07:01:22  54  ORDER BY pair,ydate
07:01:22  55  /

Table created.

Elapsed: 00:00:01.80
07:01:24 SQL> 
07:01:24 SQL> -- rpt
07:01:24 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9416
	-1	   10938

Elapsed: 00:00:00.03
07:01:24 SQL> 
07:01:24 SQL> -- Calc gains and ntiles
07:01:24 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.16
07:01:24 SQL> CREATE TABLE q15 COMPRESS AS
07:01:24   2  SELECT
07:01:24   3  pair
07:01:24   4  ,ydate
07:01:24   5  ,prdate -- Should be unique
07:01:24   6  ,trend -- +1 or -1
07:01:24   7  -- Use NTILE() to derive some attributes
07:01:24   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
07:01:24   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
07:01:24  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
07:01:24  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
07:01:24  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
07:01:24  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
07:01:24  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
07:01:24  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
07:01:24  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
07:01:24  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
07:01:24  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
07:01:24  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
07:01:24  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
07:01:24  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
07:01:24  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
07:01:24  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
07:01:24  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
07:01:24  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
07:01:24  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
07:01:24  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
07:01:24  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
07:01:24  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
07:01:24  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
07:01:24  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
07:01:24  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
07:01:24  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
07:01:24  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
07:01:24  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
07:01:24  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
07:01:24  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
07:01:24  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
07:01:24  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
07:01:24  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
07:01:24  41  ,hh    att32
07:01:24  42  ,d     att33
07:01:24  43  ,w     att34
07:01:24  44  ,mpm   att35
07:01:24  45  ,trend att36
07:01:24  46  ,ug8 g8
07:01:24  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
07:01:24  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
07:01:24  49  FROM q13
07:01:24  50  ORDER BY pair,ydate
07:01:24  51  /

Table created.

Elapsed: 00:00:05.53
07:01:29 SQL> 
07:01:29 SQL> -- rpt
07:01:29 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
07:01:29   2  GROUP BY pair,trend,gatt,gattn
07:01:29   3  ORDER BY pair,trend,gatt,gattn
07:01:29   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_cad 	-1 nup nup  -.0000244	    5673
usd_cad 	-1 nup up  -.00400805	    2627
usd_cad 	-1 up  nup .004683688	    2565
usd_cad 	-1			       0
usd_cad 	 1 nup nup -.00011678	    4657
usd_cad 	 1 nup up  -.00422802	    2754
usd_cad 	 1 up  nup .004613081	    1982
usd_cad 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
07:01:29 SQL> 
07:01:29 SQL> -- rpt
07:01:29 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_cad 2010-12-24 06:55:00

Elapsed: 00:00:00.02
07:01:29 SQL> 
07:01:29 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.43
07:01:30 SQL> CREATE TABLE modsrc COMPRESS AS
07:01:30   2  SELECT
07:01:30   3  pair
07:01:30   4  ,ydate
07:01:30   5  ,prdate
07:01:30   6  ,trend
07:01:30   7  ,g8
07:01:30   8  ,gatt
07:01:30   9  ,gattn
07:01:30  10  FROM q15
07:01:30  11  /

Table created.

Elapsed: 00:00:00.13
07:01:30 SQL> 
07:01:30 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.24
07:01:30 SQL> 
07:01:30 SQL> -- rpt
07:01:30 SQL> 
07:01:30 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20738

Elapsed: 00:00:00.38
07:01:31 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20354

Elapsed: 00:00:00.00
07:01:31 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20354

Elapsed: 00:00:00.01
07:01:31 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20354

Elapsed: 00:00:00.00
07:01:31 SQL> 
07:01:31 SQL> DROP   TABLE cad_ms10 ;

Table dropped.

Elapsed: 00:00:00.03
07:01:31 SQL> CREATE TABLE cad_ms10 COMPRESS AS
07:01:31   2  SELECT
07:01:31   3  ydate
07:01:31   4  ,trend cad_trend
07:01:31   5  ,g8    cad_g8
07:01:31   6  ,gatt  cad_gatt
07:01:31   7  ,gattn cad_gattn
07:01:31   8  FROM modsrc
07:01:31   9  /

Table created.

Elapsed: 00:00:00.07
07:01:31 SQL> 
07:01:31 SQL> ANALYZE TABLE cad_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
07:01:31 SQL> 
07:01:31 SQL> -- rpt
07:01:31 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 15:05:01 2010-12-24 04:55:00	 9393	  -.0122      .0159
	-1 2010-09-16 20:05:01 2010-12-24 06:55:00	10865	 -.01105      .0176

Elapsed: 00:00:00.02
07:01:31 SQL> SELECT cad_trend,MIN(ydate),MAX(ydate),COUNT(cad_trend),MIN(cad_g8),MAX(cad_g8)FROM cad_ms10 GROUP BY cad_trend;

 CAD_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(CAD_TREND) MIN(CAD_G8) MAX(CAD_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 15:05:01 2010-12-24 04:55:00	       9416	 -.0122       .0159
	-1 2010-09-16 20:05:01 2010-12-24 06:55:00	      10938	-.01105       .0176

Elapsed: 00:00:00.01
07:01:31 SQL> 
07:01:31 SQL> -- I need a copy of q15 attributes
07:01:31 SQL> 
07:01:31 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.04
07:01:31 SQL> CREATE TABLE cad_att COMPRESS AS
07:01:31   2  SELECT
07:01:31   3  ydate
07:01:31   4  ,att00 cad_att00
07:01:31   5  ,att01 cad_att01
07:01:31   6  ,att02 cad_att02
07:01:31   7  ,att03 cad_att03
07:01:31   8  ,att04 cad_att04
07:01:31   9  ,att05 cad_att05
07:01:31  10  ,att06 cad_att06
07:01:31  11  ,att07 cad_att07
07:01:31  12  ,att08 cad_att08
07:01:31  13  ,att09 cad_att09
07:01:31  14  ,att10 cad_att10
07:01:31  15  ,att11 cad_att11
07:01:31  16  ,att12 cad_att12
07:01:31  17  ,att13 cad_att13
07:01:31  18  ,att14 cad_att14
07:01:31  19  ,att15 cad_att15
07:01:31  20  ,att16 cad_att16
07:01:31  21  ,att17 cad_att17
07:01:31  22  ,att18 cad_att18
07:01:31  23  ,att19 cad_att19
07:01:31  24  ,att20 cad_att20
07:01:31  25  ,att21 cad_att21
07:01:31  26  ,att22 cad_att22
07:01:31  27  ,att23 cad_att23
07:01:31  28  ,att24 cad_att24
07:01:31  29  ,att25 cad_att25
07:01:31  30  ,att26 cad_att26
07:01:31  31  ,att27 cad_att27
07:01:31  32  ,att28 cad_att28
07:01:31  33  ,att29 cad_att29
07:01:31  34  ,att30 cad_att30
07:01:31  35  ,att31 cad_att31
07:01:31  36  ,att32 cad_att32
07:01:31  37  ,att33 cad_att33
07:01:31  38  ,att34 cad_att34
07:01:31  39  ,att35 cad_att35
07:01:31  40  ,att36 cad_att36
07:01:31  41  FROM q15
07:01:31  42  /

Table created.

Elapsed: 00:00:00.17
07:01:31 SQL> 
07:01:31 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
07:01:32 SQL> 
07:01:32 SQL> -- rpt
07:01:32 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     20354

Elapsed: 00:00:00.01
07:01:32 SQL> 
07:01:32 SQL> --
07:01:32 SQL> -- chf10.sql
07:01:32 SQL> --
07:01:32 SQL> 
07:01:32 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:01:32 SQL> 
07:01:32 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.33
07:01:32 SQL> 
07:01:32 SQL> -- I created di5min here:
07:01:32 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:01:32 SQL> 
07:01:32 SQL> CREATE OR REPLACE VIEW q11 AS
07:01:32   2  SELECT
07:01:32   3  pair
07:01:32   4  ,ydate
07:01:32   5  ,prdate
07:01:32   6  ,rownum rnum -- acts as t in my time-series
07:01:32   7  ,clse
07:01:32   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
07:01:32   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
07:01:32  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
07:01:32  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
07:01:32  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
07:01:32  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
07:01:32  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
07:01:32  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
07:01:32  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
07:01:32  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
07:01:32  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
07:01:32  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
07:01:32  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
07:01:32  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
07:01:32  22  FROM di5min WHERE pair LIKE'%chf%'
07:01:32  23  ORDER BY ydate
07:01:32  24  /

View created.

Elapsed: 00:00:00.03
07:01:32 SQL> 
07:01:32 SQL> -- rpt
07:01:32 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_chf        20741

Elapsed: 00:00:00.34
07:01:32 SQL> 
07:01:32 SQL> -- Calc deltas and gains
07:01:32 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.25
07:01:33 SQL> 
07:01:33 SQL> CREATE TABLE q13 COMPRESS AS
07:01:33   2  SELECT
07:01:33   3  pair
07:01:33   4  ,ydate
07:01:33   5  ,prdate
07:01:33   6  ,rnum
07:01:33   7  ,ld8
07:01:33   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
07:01:33   9  -- step by 2
07:01:33  10  ,clse-lg6  d06
07:01:33  11  ,lg6 -lg8  d68
07:01:33  12  ,lg8 -lg10 d810
07:01:33  13  ,lg10-lg12 d1012
07:01:33  14  ,lg12-lg14 d1214
07:01:33  15  ,lg14-lg16 d1416
07:01:33  16  ,lg16-lg18 d1618
07:01:33  17  -- step by 4
07:01:33  18  ,lg6 -lg10 d610
07:01:33  19  ,lg8 -lg12 d812
07:01:33  20  ,lg10-lg14 d1014
07:01:33  21  ,lg12-lg16 d1216
07:01:33  22  --
07:01:33  23  ,ABS(clse-lg6 )dc6
07:01:33  24  ,ABS(clse-lg8 )dc8
07:01:33  25  ,ABS(clse-lg10)dc10
07:01:33  26  ,ABS(clse-lg12)dc12
07:01:33  27  ,ABS(clse-lg14)dc14
07:01:33  28  ,ABS(clse-lg16)dc16
07:01:33  29  ,ABS(clse-lg18)dc18
07:01:33  30  ,ABS(clse-lg20)dc20
07:01:33  31  ,ABS(clse-lg22)dc22
07:01:33  32  ,(ld8-clse) ug8
07:01:33  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:01:33  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:01:33  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:01:33  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:01:33  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:01:33  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:01:33  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:01:33  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
07:01:33  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
07:01:33  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
07:01:33  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
07:01:33  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
07:01:33  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
07:01:33  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:01:33  47  ,0+TO_CHAR(ydate,'D')d
07:01:33  48  ,0+TO_CHAR(ydate,'W')w
07:01:33  49  -- mpm stands for minutes-past-midnight:
07:01:33  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:01:33  51  FROM q11
07:01:33  52  -- I dont want any NULL values from the LAG() functions:
07:01:33  53  WHERE lg32 > 0
07:01:33  54  ORDER BY pair,ydate
07:01:33  55  /

Table created.

Elapsed: 00:00:01.75
07:01:34 SQL> 
07:01:34 SQL> -- rpt
07:01:34 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9560
	-1	   10797

Elapsed: 00:00:00.03
07:01:34 SQL> 
07:01:34 SQL> -- Calc gains and ntiles
07:01:34 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.31
07:01:35 SQL> CREATE TABLE q15 COMPRESS AS
07:01:35   2  SELECT
07:01:35   3  pair
07:01:35   4  ,ydate
07:01:35   5  ,prdate -- Should be unique
07:01:35   6  ,trend -- +1 or -1
07:01:35   7  -- Use NTILE() to derive some attributes
07:01:35   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
07:01:35   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
07:01:35  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
07:01:35  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
07:01:35  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
07:01:35  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
07:01:35  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
07:01:35  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
07:01:35  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
07:01:35  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
07:01:35  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
07:01:35  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
07:01:35  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
07:01:35  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
07:01:35  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
07:01:35  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
07:01:35  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
07:01:35  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
07:01:35  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
07:01:35  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
07:01:35  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
07:01:35  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
07:01:35  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
07:01:35  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
07:01:35  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
07:01:35  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
07:01:35  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
07:01:35  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
07:01:35  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
07:01:35  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
07:01:35  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
07:01:35  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
07:01:35  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
07:01:35  41  ,hh    att32
07:01:35  42  ,d     att33
07:01:35  43  ,w     att34
07:01:35  44  ,mpm   att35
07:01:35  45  ,trend att36
07:01:35  46  ,ug8 g8
07:01:35  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
07:01:35  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
07:01:35  49  FROM q13
07:01:35  50  ORDER BY pair,ydate
07:01:35  51  /

Table created.

Elapsed: 00:00:05.43
07:01:40 SQL> 
07:01:40 SQL> -- rpt
07:01:40 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
07:01:40   2  GROUP BY pair,trend,gatt,gattn
07:01:40   3  ORDER BY pair,trend,gatt,gattn
07:01:40   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_chf 	-1 nup nup .000023328	    4903
usd_chf 	-1 nup up  -.00495126	    3140
usd_chf 	-1 up  nup .005077328	    2658
usd_chf 	-1			       0
usd_chf 	 1 nup nup -.00001961	    4533
usd_chf 	 1 nup up  -.00452925	    2921
usd_chf 	 1 up  nup .004632283	    2106

7 rows selected.

Elapsed: 00:00:00.03
07:01:40 SQL> 
07:01:40 SQL> -- rpt
07:01:40 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_chf 2010-12-24 06:55:00

Elapsed: 00:00:00.01
07:01:40 SQL> 
07:01:40 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.20
07:01:40 SQL> CREATE TABLE modsrc COMPRESS AS
07:01:40   2  SELECT
07:01:40   3  pair
07:01:40   4  ,ydate
07:01:40   5  ,prdate
07:01:40   6  ,trend
07:01:40   7  ,g8
07:01:40   8  ,gatt
07:01:40   9  ,gattn
07:01:40  10  FROM q15
07:01:40  11  /

Table created.

Elapsed: 00:00:00.08
07:01:40 SQL> 
07:01:40 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
07:01:41 SQL> 
07:01:41 SQL> -- rpt
07:01:41 SQL> 
07:01:41 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20741

Elapsed: 00:00:00.35
07:01:41 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20357

Elapsed: 00:00:00.01
07:01:41 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20357

Elapsed: 00:00:00.00
07:01:41 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20357

Elapsed: 00:00:00.01
07:01:41 SQL> 
07:01:41 SQL> DROP   TABLE chf_ms10 ;

Table dropped.

Elapsed: 00:00:00.03
07:01:41 SQL> CREATE TABLE chf_ms10 COMPRESS AS
07:01:41   2  SELECT
07:01:41   3  ydate
07:01:41   4  ,trend chf_trend
07:01:41   5  ,g8    chf_g8
07:01:41   6  ,gatt  chf_gatt
07:01:41   7  ,gattn chf_gattn
07:01:41   8  FROM modsrc
07:01:41   9  /

Table created.

Elapsed: 00:00:00.06
07:01:41 SQL> 
07:01:41 SQL> ANALYZE TABLE chf_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
07:01:41 SQL> 
07:01:41 SQL> -- rpt
07:01:41 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 15:05:01 2010-12-23 21:45:00	 9560	 -.01775      .0155
	-1 2010-09-16 20:55:01 2010-12-24 06:55:00	10701	 -.01825     .01545

Elapsed: 00:00:00.02
07:01:41 SQL> SELECT chf_trend,MIN(ydate),MAX(ydate),COUNT(chf_trend),MIN(chf_g8),MAX(chf_g8)FROM chf_ms10 GROUP BY chf_trend;

 CHF_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(CHF_TREND) MIN(CHF_G8) MAX(CHF_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 15:05:01 2010-12-23 21:45:00	       9560	-.01775       .0155
	-1 2010-09-16 20:55:01 2010-12-24 06:55:00	      10797	-.01825      .01545

Elapsed: 00:00:00.01
07:01:41 SQL> 
07:01:41 SQL> -- I need a copy of q15 attributes
07:01:41 SQL> 
07:01:41 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.04
07:01:41 SQL> CREATE TABLE chf_att COMPRESS AS
07:01:41   2  SELECT
07:01:41   3  ydate
07:01:41   4  ,att00 chf_att00
07:01:41   5  ,att01 chf_att01
07:01:41   6  ,att02 chf_att02
07:01:41   7  ,att03 chf_att03
07:01:41   8  ,att04 chf_att04
07:01:41   9  ,att05 chf_att05
07:01:41  10  ,att06 chf_att06
07:01:41  11  ,att07 chf_att07
07:01:41  12  ,att08 chf_att08
07:01:41  13  ,att09 chf_att09
07:01:41  14  ,att10 chf_att10
07:01:41  15  ,att11 chf_att11
07:01:41  16  ,att12 chf_att12
07:01:41  17  ,att13 chf_att13
07:01:41  18  ,att14 chf_att14
07:01:41  19  ,att15 chf_att15
07:01:41  20  ,att16 chf_att16
07:01:41  21  ,att17 chf_att17
07:01:41  22  ,att18 chf_att18
07:01:41  23  ,att19 chf_att19
07:01:41  24  ,att20 chf_att20
07:01:41  25  ,att21 chf_att21
07:01:41  26  ,att22 chf_att22
07:01:41  27  ,att23 chf_att23
07:01:41  28  ,att24 chf_att24
07:01:41  29  ,att25 chf_att25
07:01:41  30  ,att26 chf_att26
07:01:41  31  ,att27 chf_att27
07:01:41  32  ,att28 chf_att28
07:01:41  33  ,att29 chf_att29
07:01:41  34  ,att30 chf_att30
07:01:41  35  ,att31 chf_att31
07:01:41  36  ,att32 chf_att32
07:01:41  37  ,att33 chf_att33
07:01:41  38  ,att34 chf_att34
07:01:41  39  ,att35 chf_att35
07:01:41  40  ,att36 chf_att36
07:01:41  41  FROM q15
07:01:41  42  /

Table created.

Elapsed: 00:00:00.18
07:01:42 SQL> 
07:01:42 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
07:01:42 SQL> 
07:01:42 SQL> -- rpt
07:01:42 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     20357

Elapsed: 00:00:00.00
07:01:42 SQL> 
07:01:42 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
