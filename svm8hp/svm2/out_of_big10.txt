
SQL*Plus: Release 11.2.0.1.0 Production on Fri Dec 24 21:20:16 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

21:20:17 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
21:20:17 SQL> 21:20:17 SQL> --
21:20:17 SQL> -- eur10.sql
21:20:17 SQL> --
21:20:17 SQL> 
21:20:17 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:20:17 SQL> 
21:20:17 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.05
21:20:17 SQL> 
21:20:17 SQL> -- I created di5min here:
21:20:17 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:20:17 SQL> 
21:20:17 SQL> CREATE OR REPLACE VIEW q11 AS
21:20:17   2  SELECT
21:20:17   3  pair
21:20:17   4  ,ydate
21:20:17   5  ,prdate
21:20:17   6  ,rownum rnum -- acts as t in my time-series
21:20:17   7  ,clse
21:20:17   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
21:20:17   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
21:20:17  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
21:20:17  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
21:20:17  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
21:20:17  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
21:20:17  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
21:20:17  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
21:20:17  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
21:20:17  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
21:20:17  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
21:20:17  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
21:20:17  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
21:20:17  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
21:20:17  22  FROM di5min WHERE pair LIKE'%eur%'
21:20:17  23  ORDER BY ydate
21:20:17  24  /

View created.

Elapsed: 00:00:00.16
21:20:17 SQL> 
21:20:17 SQL> -- rpt
21:20:17 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
eur_usd        20742

Elapsed: 00:00:00.36
21:20:17 SQL> 
21:20:17 SQL> -- Calc deltas and gains
21:20:17 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.16
21:20:17 SQL> 
21:20:17 SQL> CREATE TABLE q13 COMPRESS AS
21:20:17   2  SELECT
21:20:17   3  pair
21:20:17   4  ,ydate
21:20:17   5  ,prdate
21:20:17   6  ,rnum
21:20:17   7  ,ld8
21:20:17   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
21:20:17   9  -- step by 2
21:20:17  10  ,clse-lg6  d06
21:20:17  11  ,lg6 -lg8  d68
21:20:17  12  ,lg8 -lg10 d810
21:20:17  13  ,lg10-lg12 d1012
21:20:17  14  ,lg12-lg14 d1214
21:20:17  15  ,lg14-lg16 d1416
21:20:17  16  ,lg16-lg18 d1618
21:20:17  17  -- step by 4
21:20:17  18  ,lg6 -lg10 d610
21:20:17  19  ,lg8 -lg12 d812
21:20:17  20  ,lg10-lg14 d1014
21:20:17  21  ,lg12-lg16 d1216
21:20:17  22  --
21:20:17  23  ,ABS(clse-lg6 )dc6
21:20:17  24  ,ABS(clse-lg8 )dc8
21:20:17  25  ,ABS(clse-lg10)dc10
21:20:17  26  ,ABS(clse-lg12)dc12
21:20:17  27  ,ABS(clse-lg14)dc14
21:20:17  28  ,ABS(clse-lg16)dc16
21:20:17  29  ,ABS(clse-lg18)dc18
21:20:17  30  ,ABS(clse-lg20)dc20
21:20:17  31  ,ABS(clse-lg22)dc22
21:20:17  32  ,(ld8-clse) ug8
21:20:17  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:20:17  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:20:17  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:20:17  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:20:17  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:20:17  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:20:17  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:20:17  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
21:20:17  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
21:20:17  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
21:20:17  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
21:20:17  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
21:20:17  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
21:20:17  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:20:17  47  ,0+TO_CHAR(ydate,'D')d
21:20:17  48  ,0+TO_CHAR(ydate,'W')w
21:20:17  49  -- mpm stands for minutes-past-midnight:
21:20:17  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:20:17  51  FROM q11
21:20:17  52  -- I dont want any NULL values from the LAG() functions:
21:20:17  53  WHERE lg32 > 0
21:20:17  54  ORDER BY pair,ydate
21:20:17  55  /

Table created.

Elapsed: 00:00:02.08
21:20:19 SQL> 
21:20:19 SQL> -- rpt
21:20:19 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	   10067
	-1	   10291

Elapsed: 00:00:00.06
21:20:19 SQL> 
21:20:19 SQL> -- Calc gains and ntiles
21:20:19 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.48
21:20:20 SQL> CREATE TABLE q15 COMPRESS AS
21:20:20   2  SELECT
21:20:20   3  pair
21:20:20   4  ,ydate
21:20:20   5  ,prdate -- Should be unique
21:20:20   6  ,trend -- +1 or -1
21:20:20   7  -- Use NTILE() to derive some attributes
21:20:20   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
21:20:20   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
21:20:20  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
21:20:20  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
21:20:20  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
21:20:20  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
21:20:20  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
21:20:20  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
21:20:20  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
21:20:20  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
21:20:20  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
21:20:20  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
21:20:20  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
21:20:20  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
21:20:20  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
21:20:20  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
21:20:20  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
21:20:20  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
21:20:20  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
21:20:20  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
21:20:20  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
21:20:20  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
21:20:20  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
21:20:20  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
21:20:20  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
21:20:20  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
21:20:20  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
21:20:20  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
21:20:20  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
21:20:20  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
21:20:20  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
21:20:20  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
21:20:20  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
21:20:20  41  ,hh    att32
21:20:20  42  ,d     att33
21:20:20  43  ,w     att34
21:20:20  44  ,mpm   att35
21:20:20  45  ,trend att36
21:20:20  46  ,ug8 g8
21:20:20  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
21:20:20  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
21:20:20  49  FROM q13
21:20:20  50  ORDER BY pair,ydate
21:20:20  51  /

Table created.

Elapsed: 00:00:05.74
21:20:26 SQL> 
21:20:26 SQL> -- rpt
21:20:26 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
21:20:26   2  GROUP BY pair,trend,gatt,gattn
21:20:26   3  ORDER BY pair,trend,gatt,gattn
21:20:26   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
eur_usd 	-1 nup nup .000014612	    3048
eur_usd 	-1 nup up  -.00602802	    3651
eur_usd 	-1 up  nup .005753384	    3502
eur_usd 	-1			       0
eur_usd 	 1 nup nup -.00008564	    3001
eur_usd 	 1 nup up  -.00625159	    3456
eur_usd 	 1 up  nup .006573807	    3604
eur_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
21:20:26 SQL> 
21:20:26 SQL> -- rpt
21:20:26 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
eur_usd 2010-12-24 21:15:00

Elapsed: 00:00:00.02
21:20:26 SQL> 
21:20:26 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
21:20:26 SQL> CREATE TABLE modsrc COMPRESS AS
21:20:26   2  SELECT
21:20:26   3  pair
21:20:26   4  ,ydate
21:20:26   5  ,prdate
21:20:26   6  ,trend
21:20:26   7  ,g8
21:20:26   8  ,gatt
21:20:26   9  ,gattn
21:20:26  10  FROM q15
21:20:26  11  /

Table created.

Elapsed: 00:00:00.09
21:20:26 SQL> 
21:20:26 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
21:20:26 SQL> 
21:20:26 SQL> -- rpt
21:20:26 SQL> 
21:20:26 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20742

Elapsed: 00:00:00.35
21:20:27 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.00
21:20:27 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.00
21:20:27 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.00
21:20:27 SQL> 
21:20:27 SQL> DROP   TABLE eur_ms10 ;

Table dropped.

Elapsed: 00:00:00.04
21:20:27 SQL> CREATE TABLE eur_ms10 COMPRESS AS
21:20:27   2  SELECT
21:20:27   3  ydate
21:20:27   4  ,trend eur_trend
21:20:27   5  ,g8    eur_g8
21:20:27   6  ,gatt  eur_gatt
21:20:27   7  ,gattn eur_gattn
21:20:27   8  FROM modsrc
21:20:27   9  /

Table created.

Elapsed: 00:00:00.07
21:20:27 SQL> 
21:20:27 SQL> ANALYZE TABLE eur_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
21:20:27 SQL> 
21:20:27 SQL> -- rpt
21:20:27 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-17 05:25:01 2010-12-24 21:15:00	10061	  -.0218     .02165
	-1 2010-09-17 11:05:01 2010-12-24 21:00:00	10201	 -.02085      .0196

Elapsed: 00:00:00.02
21:20:27 SQL> SELECT eur_trend,MIN(ydate),MAX(ydate),COUNT(eur_trend),MIN(eur_g8),MAX(eur_g8)FROM eur_ms10 GROUP BY eur_trend;

 EUR_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(EUR_TREND) MIN(EUR_G8) MAX(EUR_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-17 05:25:01 2010-12-24 21:15:00	      10067	 -.0218      .02165
	-1 2010-09-17 11:05:01 2010-12-24 21:00:00	      10291	-.02085       .0196

Elapsed: 00:00:00.01
21:20:27 SQL> 
21:20:27 SQL> -- I need a copy of q15 attributes
21:20:27 SQL> 
21:20:27 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.22
21:20:27 SQL> CREATE TABLE eur_att COMPRESS AS
21:20:27   2  SELECT
21:20:27   3  ydate
21:20:27   4  ,att00 eur_att00
21:20:27   5  ,att01 eur_att01
21:20:27   6  ,att02 eur_att02
21:20:27   7  ,att03 eur_att03
21:20:27   8  ,att04 eur_att04
21:20:27   9  ,att05 eur_att05
21:20:27  10  ,att06 eur_att06
21:20:27  11  ,att07 eur_att07
21:20:27  12  ,att08 eur_att08
21:20:27  13  ,att09 eur_att09
21:20:27  14  ,att10 eur_att10
21:20:27  15  ,att11 eur_att11
21:20:27  16  ,att12 eur_att12
21:20:27  17  ,att13 eur_att13
21:20:27  18  ,att14 eur_att14
21:20:27  19  ,att15 eur_att15
21:20:27  20  ,att16 eur_att16
21:20:27  21  ,att17 eur_att17
21:20:27  22  ,att18 eur_att18
21:20:27  23  ,att19 eur_att19
21:20:27  24  ,att20 eur_att20
21:20:27  25  ,att21 eur_att21
21:20:27  26  ,att22 eur_att22
21:20:27  27  ,att23 eur_att23
21:20:27  28  ,att24 eur_att24
21:20:27  29  ,att25 eur_att25
21:20:27  30  ,att26 eur_att26
21:20:27  31  ,att27 eur_att27
21:20:27  32  ,att28 eur_att28
21:20:27  33  ,att29 eur_att29
21:20:27  34  ,att30 eur_att30
21:20:27  35  ,att31 eur_att31
21:20:27  36  ,att32 eur_att32
21:20:27  37  ,att33 eur_att33
21:20:27  38  ,att34 eur_att34
21:20:27  39  ,att35 eur_att35
21:20:27  40  ,att36 eur_att36
21:20:27  41  FROM q15
21:20:27  42  /

Table created.

Elapsed: 00:00:00.18
21:20:27 SQL> 
21:20:27 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
21:20:28 SQL> 
21:20:28 SQL> -- rpt
21:20:28 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     20358

Elapsed: 00:00:00.00
21:20:28 SQL> 
21:20:28 SQL> --
21:20:28 SQL> -- aud10.sql
21:20:28 SQL> --
21:20:28 SQL> 
21:20:28 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:20:28 SQL> 
21:20:28 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.30
21:20:28 SQL> 
21:20:28 SQL> -- I created di5min here:
21:20:28 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:20:28 SQL> 
21:20:28 SQL> CREATE OR REPLACE VIEW q11 AS
21:20:28   2  SELECT
21:20:28   3  pair
21:20:28   4  ,ydate
21:20:28   5  ,prdate
21:20:28   6  ,rownum rnum -- acts as t in my time-series
21:20:28   7  ,clse
21:20:28   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
21:20:28   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
21:20:28  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
21:20:28  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
21:20:28  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
21:20:28  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
21:20:28  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
21:20:28  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
21:20:28  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
21:20:28  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
21:20:28  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
21:20:28  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
21:20:28  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
21:20:28  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
21:20:28  22  FROM di5min WHERE pair LIKE'%aud%'
21:20:28  23  ORDER BY ydate
21:20:28  24  /

View created.

Elapsed: 00:00:00.05
21:20:28 SQL> 
21:20:28 SQL> -- rpt
21:20:28 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
aud_usd        20739

Elapsed: 00:00:00.34
21:20:28 SQL> 
21:20:28 SQL> -- Calc deltas and gains
21:20:28 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.24
21:20:29 SQL> 
21:20:29 SQL> CREATE TABLE q13 COMPRESS AS
21:20:29   2  SELECT
21:20:29   3  pair
21:20:29   4  ,ydate
21:20:29   5  ,prdate
21:20:29   6  ,rnum
21:20:29   7  ,ld8
21:20:29   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
21:20:29   9  -- step by 2
21:20:29  10  ,clse-lg6  d06
21:20:29  11  ,lg6 -lg8  d68
21:20:29  12  ,lg8 -lg10 d810
21:20:29  13  ,lg10-lg12 d1012
21:20:29  14  ,lg12-lg14 d1214
21:20:29  15  ,lg14-lg16 d1416
21:20:29  16  ,lg16-lg18 d1618
21:20:29  17  -- step by 4
21:20:29  18  ,lg6 -lg10 d610
21:20:29  19  ,lg8 -lg12 d812
21:20:29  20  ,lg10-lg14 d1014
21:20:29  21  ,lg12-lg16 d1216
21:20:29  22  --
21:20:29  23  ,ABS(clse-lg6 )dc6
21:20:29  24  ,ABS(clse-lg8 )dc8
21:20:29  25  ,ABS(clse-lg10)dc10
21:20:29  26  ,ABS(clse-lg12)dc12
21:20:29  27  ,ABS(clse-lg14)dc14
21:20:29  28  ,ABS(clse-lg16)dc16
21:20:29  29  ,ABS(clse-lg18)dc18
21:20:29  30  ,ABS(clse-lg20)dc20
21:20:29  31  ,ABS(clse-lg22)dc22
21:20:29  32  ,(ld8-clse) ug8
21:20:29  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:20:29  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:20:29  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:20:29  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:20:29  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:20:29  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:20:29  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:20:29  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
21:20:29  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
21:20:29  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
21:20:29  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
21:20:29  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
21:20:29  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
21:20:29  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:20:29  47  ,0+TO_CHAR(ydate,'D')d
21:20:29  48  ,0+TO_CHAR(ydate,'W')w
21:20:29  49  -- mpm stands for minutes-past-midnight:
21:20:29  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:20:29  51  FROM q11
21:20:29  52  -- I dont want any NULL values from the LAG() functions:
21:20:29  53  WHERE lg32 > 0
21:20:29  54  ORDER BY pair,ydate
21:20:29  55  /

Table created.

Elapsed: 00:00:01.71
21:20:30 SQL> 
21:20:30 SQL> -- rpt
21:20:30 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	   10877
	-1	    9478

Elapsed: 00:00:00.03
21:20:30 SQL> 
21:20:30 SQL> -- Calc gains and ntiles
21:20:30 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.18
21:20:31 SQL> CREATE TABLE q15 COMPRESS AS
21:20:31   2  SELECT
21:20:31   3  pair
21:20:31   4  ,ydate
21:20:31   5  ,prdate -- Should be unique
21:20:31   6  ,trend -- +1 or -1
21:20:31   7  -- Use NTILE() to derive some attributes
21:20:31   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
21:20:31   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
21:20:31  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
21:20:31  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
21:20:31  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
21:20:31  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
21:20:31  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
21:20:31  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
21:20:31  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
21:20:31  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
21:20:31  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
21:20:31  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
21:20:31  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
21:20:31  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
21:20:31  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
21:20:31  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
21:20:31  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
21:20:31  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
21:20:31  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
21:20:31  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
21:20:31  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
21:20:31  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
21:20:31  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
21:20:31  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
21:20:31  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
21:20:31  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
21:20:31  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
21:20:31  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
21:20:31  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
21:20:31  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
21:20:31  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
21:20:31  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
21:20:31  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
21:20:31  41  ,hh    att32
21:20:31  42  ,d     att33
21:20:31  43  ,w     att34
21:20:31  44  ,mpm   att35
21:20:31  45  ,trend att36
21:20:31  46  ,ug8 g8
21:20:31  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
21:20:31  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
21:20:31  49  FROM q13
21:20:31  50  ORDER BY pair,ydate
21:20:31  51  /

Table created.

Elapsed: 00:00:05.34
21:20:36 SQL> 
21:20:36 SQL> -- rpt
21:20:36 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
21:20:36   2  GROUP BY pair,trend,gatt,gattn
21:20:36   3  ORDER BY pair,trend,gatt,gattn
21:20:36   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
aud_usd 	-1 nup nup .000053661	    3612
aud_usd 	-1 nup up  -.00525835	    2519
aud_usd 	-1 up  nup .005159668	    3337
aud_usd 	-1			       0
aud_usd 	 1 nup nup .000038105	    4424
aud_usd 	 1 nup up  -.00500578	    3054
aud_usd 	 1 up  nup .005059519	    3313
aud_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
21:20:36 SQL> 
21:20:36 SQL> -- rpt
21:20:36 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
aud_usd 2010-12-24 21:15:00

Elapsed: 00:00:00.02
21:20:36 SQL> 
21:20:36 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
21:20:36 SQL> CREATE TABLE modsrc COMPRESS AS
21:20:36   2  SELECT
21:20:36   3  pair
21:20:36   4  ,ydate
21:20:36   5  ,prdate
21:20:36   6  ,trend
21:20:36   7  ,g8
21:20:36   8  ,gatt
21:20:36   9  ,gattn
21:20:36  10  FROM q15
21:20:36  11  /

Table created.

Elapsed: 00:00:00.10
21:20:36 SQL> 
21:20:36 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
21:20:36 SQL> 
21:20:36 SQL> -- rpt
21:20:36 SQL> 
21:20:36 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20739

Elapsed: 00:00:00.34
21:20:37 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20355

Elapsed: 00:00:00.00
21:20:37 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20355

Elapsed: 00:00:00.01
21:20:37 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20355

Elapsed: 00:00:00.00
21:20:37 SQL> 
21:20:37 SQL> DROP   TABLE aud_ms10 ;

Table dropped.

Elapsed: 00:00:00.05
21:20:37 SQL> CREATE TABLE aud_ms10 COMPRESS AS
21:20:37   2  SELECT
21:20:37   3  ydate
21:20:37   4  ,trend aud_trend
21:20:37   5  ,g8    aud_g8
21:20:37   6  ,gatt  aud_gatt
21:20:37   7  ,gattn aud_gattn
21:20:37   8  FROM modsrc
21:20:37   9  /

Table created.

Elapsed: 00:00:00.06
21:20:37 SQL> 
21:20:37 SQL> ANALYZE TABLE aud_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
21:20:37 SQL> 
21:20:37 SQL> -- rpt
21:20:37 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-17 05:25:01 2010-12-24 21:15:00	10791	  -.0203      .0136
	-1 2010-09-17 11:50:01 2010-12-24 17:55:00	 9468	  -.0196      .0148

Elapsed: 00:00:00.02
21:20:37 SQL> SELECT aud_trend,MIN(ydate),MAX(ydate),COUNT(aud_trend),MIN(aud_g8),MAX(aud_g8)FROM aud_ms10 GROUP BY aud_trend;

 AUD_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(AUD_TREND) MIN(AUD_G8) MAX(AUD_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-17 05:25:01 2010-12-24 21:15:00	      10877	 -.0203       .0136
	-1 2010-09-17 11:50:01 2010-12-24 17:55:00	       9478	 -.0196       .0148

Elapsed: 00:00:00.01
21:20:37 SQL> 
21:20:37 SQL> -- I need a copy of q15 attributes
21:20:37 SQL> 
21:20:37 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.16
21:20:37 SQL> CREATE TABLE aud_att COMPRESS AS
21:20:37   2  SELECT
21:20:37   3  ydate
21:20:37   4  ,att00 aud_att00
21:20:37   5  ,att01 aud_att01
21:20:37   6  ,att02 aud_att02
21:20:37   7  ,att03 aud_att03
21:20:37   8  ,att04 aud_att04
21:20:37   9  ,att05 aud_att05
21:20:37  10  ,att06 aud_att06
21:20:37  11  ,att07 aud_att07
21:20:37  12  ,att08 aud_att08
21:20:37  13  ,att09 aud_att09
21:20:37  14  ,att10 aud_att10
21:20:37  15  ,att11 aud_att11
21:20:37  16  ,att12 aud_att12
21:20:37  17  ,att13 aud_att13
21:20:37  18  ,att14 aud_att14
21:20:37  19  ,att15 aud_att15
21:20:37  20  ,att16 aud_att16
21:20:37  21  ,att17 aud_att17
21:20:37  22  ,att18 aud_att18
21:20:37  23  ,att19 aud_att19
21:20:37  24  ,att20 aud_att20
21:20:37  25  ,att21 aud_att21
21:20:37  26  ,att22 aud_att22
21:20:37  27  ,att23 aud_att23
21:20:37  28  ,att24 aud_att24
21:20:37  29  ,att25 aud_att25
21:20:37  30  ,att26 aud_att26
21:20:37  31  ,att27 aud_att27
21:20:37  32  ,att28 aud_att28
21:20:37  33  ,att29 aud_att29
21:20:37  34  ,att30 aud_att30
21:20:37  35  ,att31 aud_att31
21:20:37  36  ,att32 aud_att32
21:20:37  37  ,att33 aud_att33
21:20:37  38  ,att34 aud_att34
21:20:37  39  ,att35 aud_att35
21:20:37  40  ,att36 aud_att36
21:20:37  41  FROM q15
21:20:37  42  /

Table created.

Elapsed: 00:00:00.18
21:20:37 SQL> 
21:20:37 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
21:20:38 SQL> 
21:20:38 SQL> -- rpt
21:20:38 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     20355

Elapsed: 00:00:00.00
21:20:38 SQL> 
21:20:38 SQL> --
21:20:38 SQL> -- gbp10.sql
21:20:38 SQL> --
21:20:38 SQL> 
21:20:38 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:20:38 SQL> 
21:20:38 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.40
21:20:38 SQL> 
21:20:38 SQL> -- I created di5min here:
21:20:38 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:20:38 SQL> 
21:20:38 SQL> CREATE OR REPLACE VIEW q11 AS
21:20:38   2  SELECT
21:20:38   3  pair
21:20:38   4  ,ydate
21:20:38   5  ,prdate
21:20:38   6  ,rownum rnum -- acts as t in my time-series
21:20:38   7  ,clse
21:20:38   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
21:20:38   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
21:20:38  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
21:20:38  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
21:20:38  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
21:20:38  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
21:20:38  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
21:20:38  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
21:20:38  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
21:20:38  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
21:20:38  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
21:20:38  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
21:20:38  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
21:20:38  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
21:20:38  22  FROM di5min WHERE pair LIKE'%gbp%'
21:20:38  23  ORDER BY ydate
21:20:38  24  /

View created.

Elapsed: 00:00:00.03
21:20:38 SQL> 
21:20:38 SQL> -- rpt
21:20:38 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
gbp_usd        20741

Elapsed: 00:00:00.33
21:20:39 SQL> 
21:20:39 SQL> -- Calc deltas and gains
21:20:39 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.28
21:20:39 SQL> 
21:20:39 SQL> CREATE TABLE q13 COMPRESS AS
21:20:39   2  SELECT
21:20:39   3  pair
21:20:39   4  ,ydate
21:20:39   5  ,prdate
21:20:39   6  ,rnum
21:20:39   7  ,ld8
21:20:39   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
21:20:39   9  -- step by 2
21:20:39  10  ,clse-lg6  d06
21:20:39  11  ,lg6 -lg8  d68
21:20:39  12  ,lg8 -lg10 d810
21:20:39  13  ,lg10-lg12 d1012
21:20:39  14  ,lg12-lg14 d1214
21:20:39  15  ,lg14-lg16 d1416
21:20:39  16  ,lg16-lg18 d1618
21:20:39  17  -- step by 4
21:20:39  18  ,lg6 -lg10 d610
21:20:39  19  ,lg8 -lg12 d812
21:20:39  20  ,lg10-lg14 d1014
21:20:39  21  ,lg12-lg16 d1216
21:20:39  22  --
21:20:39  23  ,ABS(clse-lg6 )dc6
21:20:39  24  ,ABS(clse-lg8 )dc8
21:20:39  25  ,ABS(clse-lg10)dc10
21:20:39  26  ,ABS(clse-lg12)dc12
21:20:39  27  ,ABS(clse-lg14)dc14
21:20:39  28  ,ABS(clse-lg16)dc16
21:20:39  29  ,ABS(clse-lg18)dc18
21:20:39  30  ,ABS(clse-lg20)dc20
21:20:39  31  ,ABS(clse-lg22)dc22
21:20:39  32  ,(ld8-clse) ug8
21:20:39  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:20:39  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:20:39  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:20:39  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:20:39  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:20:39  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:20:39  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:20:39  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
21:20:39  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
21:20:39  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
21:20:39  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
21:20:39  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
21:20:39  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
21:20:39  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:20:39  47  ,0+TO_CHAR(ydate,'D')d
21:20:39  48  ,0+TO_CHAR(ydate,'W')w
21:20:39  49  -- mpm stands for minutes-past-midnight:
21:20:39  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:20:39  51  FROM q11
21:20:39  52  -- I dont want any NULL values from the LAG() functions:
21:20:39  53  WHERE lg32 > 0
21:20:39  54  ORDER BY pair,ydate
21:20:39  55  /

Table created.

Elapsed: 00:00:02.12
21:20:41 SQL> 
21:20:41 SQL> -- rpt
21:20:41 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9960
	-1	   10397

Elapsed: 00:00:00.08
21:20:41 SQL> 
21:20:41 SQL> -- Calc gains and ntiles
21:20:41 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.37
21:20:41 SQL> CREATE TABLE q15 COMPRESS AS
21:20:41   2  SELECT
21:20:41   3  pair
21:20:41   4  ,ydate
21:20:41   5  ,prdate -- Should be unique
21:20:41   6  ,trend -- +1 or -1
21:20:41   7  -- Use NTILE() to derive some attributes
21:20:41   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
21:20:41   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
21:20:41  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
21:20:41  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
21:20:41  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
21:20:41  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
21:20:41  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
21:20:41  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
21:20:41  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
21:20:41  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
21:20:41  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
21:20:41  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
21:20:41  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
21:20:41  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
21:20:41  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
21:20:41  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
21:20:41  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
21:20:41  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
21:20:41  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
21:20:41  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
21:20:41  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
21:20:41  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
21:20:41  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
21:20:41  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
21:20:41  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
21:20:41  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
21:20:41  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
21:20:41  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
21:20:41  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
21:20:41  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
21:20:41  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
21:20:41  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
21:20:41  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
21:20:41  41  ,hh    att32
21:20:41  42  ,d     att33
21:20:41  43  ,w     att34
21:20:41  44  ,mpm   att35
21:20:41  45  ,trend att36
21:20:41  46  ,ug8 g8
21:20:41  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
21:20:41  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
21:20:41  49  FROM q13
21:20:41  50  ORDER BY pair,ydate
21:20:41  51  /

Table created.

Elapsed: 00:00:05.40
21:20:47 SQL> 
21:20:47 SQL> -- rpt
21:20:47 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
21:20:47   2  GROUP BY pair,trend,gatt,gattn
21:20:47   3  ORDER BY pair,trend,gatt,gattn
21:20:47   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
gbp_usd 	-1 nup nup .000096448	    3853
gbp_usd 	-1 nup up   -.0059004	    3270
gbp_usd 	-1 up  nup .005424502	    3211
gbp_usd 	-1			       0
gbp_usd 	 1 nup nup -.00007676	    3689
gbp_usd 	 1 nup up  -.00554228	    3276
gbp_usd 	 1 up  nup .005946801	    2962
gbp_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
21:20:47 SQL> 
21:20:47 SQL> -- rpt
21:20:47 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
gbp_usd 2010-12-24 21:15:00

Elapsed: 00:00:00.02
21:20:47 SQL> 
21:20:47 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
21:20:47 SQL> CREATE TABLE modsrc COMPRESS AS
21:20:47   2  SELECT
21:20:47   3  pair
21:20:47   4  ,ydate
21:20:47   5  ,prdate
21:20:47   6  ,trend
21:20:47   7  ,g8
21:20:47   8  ,gatt
21:20:47   9  ,gattn
21:20:47  10  FROM q15
21:20:47  11  /

Table created.

Elapsed: 00:00:00.12
21:20:47 SQL> 
21:20:47 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
21:20:47 SQL> 
21:20:47 SQL> -- rpt
21:20:47 SQL> 
21:20:47 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20741

Elapsed: 00:00:00.34
21:20:48 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20357

Elapsed: 00:00:00.01
21:20:48 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20357

Elapsed: 00:00:00.00
21:20:48 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20357

Elapsed: 00:00:00.01
21:20:48 SQL> 
21:20:48 SQL> DROP   TABLE gbp_ms10 ;

Table dropped.

Elapsed: 00:00:00.03
21:20:48 SQL> CREATE TABLE gbp_ms10 COMPRESS AS
21:20:48   2  SELECT
21:20:48   3  ydate
21:20:48   4  ,trend gbp_trend
21:20:48   5  ,g8    gbp_g8
21:20:48   6  ,gatt  gbp_gatt
21:20:48   7  ,gattn gbp_gattn
21:20:48   8  FROM modsrc
21:20:48   9  /

Table created.

Elapsed: 00:00:00.08
21:20:48 SQL> 
21:20:48 SQL> ANALYZE TABLE gbp_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
21:20:48 SQL> 
21:20:48 SQL> -- rpt
21:20:48 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-17 05:25:01 2010-12-24 21:15:00	 9927	  -.0231       .019
	-1 2010-09-17 11:55:01 2010-12-24 20:50:00	10334	    -.02      .0204

Elapsed: 00:00:00.01
21:20:48 SQL> SELECT gbp_trend,MIN(ydate),MAX(ydate),COUNT(gbp_trend),MIN(gbp_g8),MAX(gbp_g8)FROM gbp_ms10 GROUP BY gbp_trend;

 GBP_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(GBP_TREND) MIN(GBP_G8) MAX(GBP_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-17 05:25:01 2010-12-24 21:15:00	       9960	 -.0231        .019
	-1 2010-09-17 11:55:01 2010-12-24 20:50:00	      10397	   -.02       .0204

Elapsed: 00:00:00.02
21:20:48 SQL> 
21:20:48 SQL> -- I need a copy of q15 attributes
21:20:48 SQL> 
21:20:48 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.05
21:20:48 SQL> CREATE TABLE gbp_att COMPRESS AS
21:20:48   2  SELECT
21:20:48   3  ydate
21:20:48   4  ,att00 gbp_att00
21:20:48   5  ,att01 gbp_att01
21:20:48   6  ,att02 gbp_att02
21:20:48   7  ,att03 gbp_att03
21:20:48   8  ,att04 gbp_att04
21:20:48   9  ,att05 gbp_att05
21:20:48  10  ,att06 gbp_att06
21:20:48  11  ,att07 gbp_att07
21:20:48  12  ,att08 gbp_att08
21:20:48  13  ,att09 gbp_att09
21:20:48  14  ,att10 gbp_att10
21:20:48  15  ,att11 gbp_att11
21:20:48  16  ,att12 gbp_att12
21:20:48  17  ,att13 gbp_att13
21:20:48  18  ,att14 gbp_att14
21:20:48  19  ,att15 gbp_att15
21:20:48  20  ,att16 gbp_att16
21:20:48  21  ,att17 gbp_att17
21:20:48  22  ,att18 gbp_att18
21:20:48  23  ,att19 gbp_att19
21:20:48  24  ,att20 gbp_att20
21:20:48  25  ,att21 gbp_att21
21:20:48  26  ,att22 gbp_att22
21:20:48  27  ,att23 gbp_att23
21:20:48  28  ,att24 gbp_att24
21:20:48  29  ,att25 gbp_att25
21:20:48  30  ,att26 gbp_att26
21:20:48  31  ,att27 gbp_att27
21:20:48  32  ,att28 gbp_att28
21:20:48  33  ,att29 gbp_att29
21:20:48  34  ,att30 gbp_att30
21:20:48  35  ,att31 gbp_att31
21:20:48  36  ,att32 gbp_att32
21:20:48  37  ,att33 gbp_att33
21:20:48  38  ,att34 gbp_att34
21:20:48  39  ,att35 gbp_att35
21:20:48  40  ,att36 gbp_att36
21:20:48  41  FROM q15
21:20:48  42  /

Table created.

Elapsed: 00:00:00.17
21:20:48 SQL> 
21:20:48 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
21:20:49 SQL> 
21:20:49 SQL> -- rpt
21:20:49 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     20357

Elapsed: 00:00:00.00
21:20:49 SQL> 
21:20:49 SQL> --
21:20:49 SQL> -- jpy10.sql
21:20:49 SQL> --
21:20:49 SQL> 
21:20:49 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:20:49 SQL> 
21:20:49 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.41
21:20:49 SQL> 
21:20:49 SQL> -- I created di5min here:
21:20:49 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:20:49 SQL> 
21:20:49 SQL> CREATE OR REPLACE VIEW q11 AS
21:20:49   2  SELECT
21:20:49   3  pair
21:20:49   4  ,ydate
21:20:49   5  ,prdate
21:20:49   6  ,rownum rnum -- acts as t in my time-series
21:20:49   7  ,clse
21:20:49   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
21:20:49   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
21:20:49  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
21:20:49  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
21:20:49  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
21:20:49  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
21:20:49  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
21:20:49  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
21:20:49  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
21:20:49  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
21:20:49  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
21:20:49  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
21:20:49  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
21:20:49  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
21:20:49  22  FROM di5min WHERE pair LIKE'%jpy%'
21:20:49  23  ORDER BY ydate
21:20:49  24  /

View created.

Elapsed: 00:00:00.05
21:20:49 SQL> 
21:20:49 SQL> -- rpt
21:20:49 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_jpy        20740

Elapsed: 00:00:00.36
21:20:50 SQL> 
21:20:50 SQL> -- Calc deltas and gains
21:20:50 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.16
21:20:50 SQL> 
21:20:50 SQL> CREATE TABLE q13 COMPRESS AS
21:20:50   2  SELECT
21:20:50   3  pair
21:20:50   4  ,ydate
21:20:50   5  ,prdate
21:20:50   6  ,rnum
21:20:50   7  ,ld8
21:20:50   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
21:20:50   9  -- step by 2
21:20:50  10  ,clse-lg6  d06
21:20:50  11  ,lg6 -lg8  d68
21:20:50  12  ,lg8 -lg10 d810
21:20:50  13  ,lg10-lg12 d1012
21:20:50  14  ,lg12-lg14 d1214
21:20:50  15  ,lg14-lg16 d1416
21:20:50  16  ,lg16-lg18 d1618
21:20:50  17  -- step by 4
21:20:50  18  ,lg6 -lg10 d610
21:20:50  19  ,lg8 -lg12 d812
21:20:50  20  ,lg10-lg14 d1014
21:20:50  21  ,lg12-lg16 d1216
21:20:50  22  --
21:20:50  23  ,ABS(clse-lg6 )dc6
21:20:50  24  ,ABS(clse-lg8 )dc8
21:20:50  25  ,ABS(clse-lg10)dc10
21:20:50  26  ,ABS(clse-lg12)dc12
21:20:50  27  ,ABS(clse-lg14)dc14
21:20:50  28  ,ABS(clse-lg16)dc16
21:20:50  29  ,ABS(clse-lg18)dc18
21:20:50  30  ,ABS(clse-lg20)dc20
21:20:50  31  ,ABS(clse-lg22)dc22
21:20:50  32  ,(ld8-clse) ug8
21:20:50  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:20:50  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:20:50  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:20:50  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:20:50  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:20:50  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:20:50  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:20:50  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
21:20:50  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
21:20:50  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
21:20:50  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
21:20:50  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
21:20:50  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
21:20:50  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:20:50  47  ,0+TO_CHAR(ydate,'D')d
21:20:50  48  ,0+TO_CHAR(ydate,'W')w
21:20:50  49  -- mpm stands for minutes-past-midnight:
21:20:50  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:20:50  51  FROM q11
21:20:50  52  -- I dont want any NULL values from the LAG() functions:
21:20:50  53  WHERE lg32 > 0
21:20:50  54  ORDER BY pair,ydate
21:20:50  55  /

Table created.

Elapsed: 00:00:01.70
21:20:51 SQL> 
21:20:51 SQL> -- rpt
21:20:51 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9304
	-1	   11052

Elapsed: 00:00:00.04
21:20:51 SQL> 
21:20:51 SQL> -- Calc gains and ntiles
21:20:51 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.10
21:20:52 SQL> CREATE TABLE q15 COMPRESS AS
21:20:52   2  SELECT
21:20:52   3  pair
21:20:52   4  ,ydate
21:20:52   5  ,prdate -- Should be unique
21:20:52   6  ,trend -- +1 or -1
21:20:52   7  -- Use NTILE() to derive some attributes
21:20:52   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
21:20:52   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
21:20:52  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
21:20:52  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
21:20:52  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
21:20:52  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
21:20:52  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
21:20:52  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
21:20:52  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
21:20:52  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
21:20:52  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
21:20:52  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
21:20:52  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
21:20:52  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
21:20:52  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
21:20:52  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
21:20:52  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
21:20:52  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
21:20:52  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
21:20:52  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
21:20:52  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
21:20:52  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
21:20:52  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
21:20:52  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
21:20:52  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
21:20:52  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
21:20:52  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
21:20:52  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
21:20:52  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
21:20:52  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
21:20:52  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
21:20:52  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
21:20:52  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
21:20:52  41  ,hh    att32
21:20:52  42  ,d     att33
21:20:52  43  ,w     att34
21:20:52  44  ,mpm   att35
21:20:52  45  ,trend att36
21:20:52  46  ,ug8 g8
21:20:52  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
21:20:52  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
21:20:52  49  FROM q13
21:20:52  50  ORDER BY pair,ydate
21:20:52  51  /

Table created.

Elapsed: 00:00:05.49
21:20:57 SQL> 
21:20:57 SQL> -- rpt
21:20:57 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
21:20:57   2  GROUP BY pair,trend,gatt,gattn
21:20:57   3  ORDER BY pair,trend,gatt,gattn
21:20:57   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_jpy 	-1 nup nup 3.6257E-09	     169
usd_jpy 	-1 nup up  -.18272909	    5590
usd_jpy 	-1 up  nup .179969871	    5208
usd_jpy 	-1			       0
usd_jpy 	 1 nup nup	    0	     115
usd_jpy 	 1 nup up  -.18911464	    5142
usd_jpy 	 1 up  nup .193533515	    4036
usd_jpy 	 1			       0

8 rows selected.

Elapsed: 00:00:00.02
21:20:57 SQL> 
21:20:57 SQL> -- rpt
21:20:57 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_jpy 2010-12-24 21:15:00

Elapsed: 00:00:00.02
21:20:57 SQL> 
21:20:57 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.14
21:20:57 SQL> CREATE TABLE modsrc COMPRESS AS
21:20:57   2  SELECT
21:20:57   3  pair
21:20:57   4  ,ydate
21:20:57   5  ,prdate
21:20:57   6  ,trend
21:20:57   7  ,g8
21:20:57   8  ,gatt
21:20:57   9  ,gattn
21:20:57  10  FROM q15
21:20:57  11  /

Table created.

Elapsed: 00:00:00.08
21:20:57 SQL> 
21:20:57 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
21:20:58 SQL> 
21:20:58 SQL> -- rpt
21:20:58 SQL> 
21:20:58 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20740

Elapsed: 00:00:00.35
21:20:58 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20356

Elapsed: 00:00:00.01
21:20:58 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20356

Elapsed: 00:00:00.00
21:20:58 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20356

Elapsed: 00:00:00.01
21:20:58 SQL> 
21:20:58 SQL> DROP   TABLE jpy_ms10 ;

Table dropped.

Elapsed: 00:00:00.04
21:20:58 SQL> CREATE TABLE jpy_ms10 COMPRESS AS
21:20:58   2  SELECT
21:20:58   3  ydate
21:20:58   4  ,trend jpy_trend
21:20:58   5  ,g8    jpy_g8
21:20:58   6  ,gatt  jpy_gatt
21:20:58   7  ,gattn jpy_gattn
21:20:58   8  FROM modsrc
21:20:58   9  /

Table created.

Elapsed: 00:00:00.07
21:20:58 SQL> 
21:20:58 SQL> ANALYZE TABLE jpy_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
21:20:58 SQL> 
21:20:58 SQL> -- rpt
21:20:58 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-17 07:15:01 2010-12-24 20:50:00	 9293	  -1.185	  1
	-1 2010-09-17 05:25:01 2010-12-24 21:15:00	10967	 -1.0575       1.32

Elapsed: 00:00:00.02
21:20:58 SQL> SELECT jpy_trend,MIN(ydate),MAX(ydate),COUNT(jpy_trend),MIN(jpy_g8),MAX(jpy_g8)FROM jpy_ms10 GROUP BY jpy_trend;

 JPY_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(JPY_TREND) MIN(JPY_G8) MAX(JPY_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-17 07:15:01 2010-12-24 20:50:00	       9304	 -1.185 	  1
	-1 2010-09-17 05:25:01 2010-12-24 21:15:00	      11052	-1.0575        1.32

Elapsed: 00:00:00.01
21:20:58 SQL> 
21:20:58 SQL> -- I need a copy of q15 attributes
21:20:58 SQL> 
21:20:58 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.03
21:20:58 SQL> CREATE TABLE jpy_att COMPRESS AS
21:20:58   2  SELECT
21:20:58   3  ydate
21:20:58   4  ,att00 jpy_att00
21:20:58   5  ,att01 jpy_att01
21:20:58   6  ,att02 jpy_att02
21:20:58   7  ,att03 jpy_att03
21:20:58   8  ,att04 jpy_att04
21:20:58   9  ,att05 jpy_att05
21:20:58  10  ,att06 jpy_att06
21:20:58  11  ,att07 jpy_att07
21:20:58  12  ,att08 jpy_att08
21:20:58  13  ,att09 jpy_att09
21:20:58  14  ,att10 jpy_att10
21:20:58  15  ,att11 jpy_att11
21:20:58  16  ,att12 jpy_att12
21:20:58  17  ,att13 jpy_att13
21:20:58  18  ,att14 jpy_att14
21:20:58  19  ,att15 jpy_att15
21:20:58  20  ,att16 jpy_att16
21:20:58  21  ,att17 jpy_att17
21:20:58  22  ,att18 jpy_att18
21:20:58  23  ,att19 jpy_att19
21:20:58  24  ,att20 jpy_att20
21:20:58  25  ,att21 jpy_att21
21:20:58  26  ,att22 jpy_att22
21:20:58  27  ,att23 jpy_att23
21:20:58  28  ,att24 jpy_att24
21:20:58  29  ,att25 jpy_att25
21:20:58  30  ,att26 jpy_att26
21:20:58  31  ,att27 jpy_att27
21:20:58  32  ,att28 jpy_att28
21:20:58  33  ,att29 jpy_att29
21:20:58  34  ,att30 jpy_att30
21:20:58  35  ,att31 jpy_att31
21:20:58  36  ,att32 jpy_att32
21:20:58  37  ,att33 jpy_att33
21:20:58  38  ,att34 jpy_att34
21:20:58  39  ,att35 jpy_att35
21:20:58  40  ,att36 jpy_att36
21:20:58  41  FROM q15
21:20:58  42  /

Table created.

Elapsed: 00:00:00.17
21:20:58 SQL> 
21:20:58 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.42
21:20:59 SQL> 
21:20:59 SQL> -- rpt
21:20:59 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     20356

Elapsed: 00:00:00.00
21:20:59 SQL> 
21:20:59 SQL> --
21:20:59 SQL> -- cad10.sql
21:20:59 SQL> --
21:20:59 SQL> 
21:20:59 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:20:59 SQL> 
21:20:59 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.33
21:20:59 SQL> 
21:20:59 SQL> -- I created di5min here:
21:20:59 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:20:59 SQL> 
21:20:59 SQL> CREATE OR REPLACE VIEW q11 AS
21:20:59   2  SELECT
21:20:59   3  pair
21:20:59   4  ,ydate
21:20:59   5  ,prdate
21:20:59   6  ,rownum rnum -- acts as t in my time-series
21:20:59   7  ,clse
21:20:59   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
21:20:59   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
21:20:59  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
21:20:59  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
21:20:59  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
21:20:59  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
21:20:59  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
21:20:59  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
21:20:59  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
21:20:59  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
21:20:59  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
21:20:59  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
21:20:59  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
21:20:59  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
21:20:59  22  FROM di5min WHERE pair LIKE'%cad%'
21:20:59  23  ORDER BY ydate
21:20:59  24  /

View created.

Elapsed: 00:00:00.12
21:20:59 SQL> 
21:20:59 SQL> -- rpt
21:20:59 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_cad        20738

Elapsed: 00:00:00.35
21:21:00 SQL> 
21:21:00 SQL> -- Calc deltas and gains
21:21:00 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.18
21:21:00 SQL> 
21:21:00 SQL> CREATE TABLE q13 COMPRESS AS
21:21:00   2  SELECT
21:21:00   3  pair
21:21:00   4  ,ydate
21:21:00   5  ,prdate
21:21:00   6  ,rnum
21:21:00   7  ,ld8
21:21:00   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
21:21:00   9  -- step by 2
21:21:00  10  ,clse-lg6  d06
21:21:00  11  ,lg6 -lg8  d68
21:21:00  12  ,lg8 -lg10 d810
21:21:00  13  ,lg10-lg12 d1012
21:21:00  14  ,lg12-lg14 d1214
21:21:00  15  ,lg14-lg16 d1416
21:21:00  16  ,lg16-lg18 d1618
21:21:00  17  -- step by 4
21:21:00  18  ,lg6 -lg10 d610
21:21:00  19  ,lg8 -lg12 d812
21:21:00  20  ,lg10-lg14 d1014
21:21:00  21  ,lg12-lg16 d1216
21:21:00  22  --
21:21:00  23  ,ABS(clse-lg6 )dc6
21:21:00  24  ,ABS(clse-lg8 )dc8
21:21:00  25  ,ABS(clse-lg10)dc10
21:21:00  26  ,ABS(clse-lg12)dc12
21:21:00  27  ,ABS(clse-lg14)dc14
21:21:00  28  ,ABS(clse-lg16)dc16
21:21:00  29  ,ABS(clse-lg18)dc18
21:21:00  30  ,ABS(clse-lg20)dc20
21:21:00  31  ,ABS(clse-lg22)dc22
21:21:00  32  ,(ld8-clse) ug8
21:21:00  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:21:00  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:21:00  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:21:00  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:21:00  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:21:00  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:21:00  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:21:00  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
21:21:00  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
21:21:00  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
21:21:00  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
21:21:00  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
21:21:00  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
21:21:00  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:21:00  47  ,0+TO_CHAR(ydate,'D')d
21:21:00  48  ,0+TO_CHAR(ydate,'W')w
21:21:00  49  -- mpm stands for minutes-past-midnight:
21:21:00  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:21:00  51  FROM q11
21:21:00  52  -- I dont want any NULL values from the LAG() functions:
21:21:00  53  WHERE lg32 > 0
21:21:00  54  ORDER BY pair,ydate
21:21:00  55  /

Table created.

Elapsed: 00:00:01.73
21:21:02 SQL> 
21:21:02 SQL> -- rpt
21:21:02 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9388
	-1	   10966

Elapsed: 00:00:00.04
21:21:02 SQL> 
21:21:02 SQL> -- Calc gains and ntiles
21:21:02 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.27
21:21:02 SQL> CREATE TABLE q15 COMPRESS AS
21:21:02   2  SELECT
21:21:02   3  pair
21:21:02   4  ,ydate
21:21:02   5  ,prdate -- Should be unique
21:21:02   6  ,trend -- +1 or -1
21:21:02   7  -- Use NTILE() to derive some attributes
21:21:02   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
21:21:02   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
21:21:02  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
21:21:02  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
21:21:02  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
21:21:02  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
21:21:02  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
21:21:02  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
21:21:02  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
21:21:02  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
21:21:02  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
21:21:02  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
21:21:02  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
21:21:02  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
21:21:02  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
21:21:02  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
21:21:02  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
21:21:02  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
21:21:02  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
21:21:02  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
21:21:02  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
21:21:02  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
21:21:02  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
21:21:02  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
21:21:02  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
21:21:02  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
21:21:02  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
21:21:02  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
21:21:02  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
21:21:02  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
21:21:02  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
21:21:02  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
21:21:02  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
21:21:02  41  ,hh    att32
21:21:02  42  ,d     att33
21:21:02  43  ,w     att34
21:21:02  44  ,mpm   att35
21:21:02  45  ,trend att36
21:21:02  46  ,ug8 g8
21:21:02  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
21:21:02  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
21:21:02  49  FROM q13
21:21:02  50  ORDER BY pair,ydate
21:21:02  51  /

Table created.

Elapsed: 00:00:05.32
21:21:07 SQL> 
21:21:07 SQL> -- rpt
21:21:07 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
21:21:07   2  GROUP BY pair,trend,gatt,gattn
21:21:07   3  ORDER BY pair,trend,gatt,gattn
21:21:07   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_cad 	-1 nup nup -.00003422	    5754
usd_cad 	-1 nup up  -.00400214	    2592
usd_cad 	-1 up  nup .004681961	    2557
usd_cad 	-1			       0
usd_cad 	 1 nup nup -.00010943	    4618
usd_cad 	 1 nup up  -.00422654	    2755
usd_cad 	 1 up  nup .004613092	    1982
usd_cad 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
21:21:07 SQL> 
21:21:07 SQL> -- rpt
21:21:07 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_cad 2010-12-24 21:15:00

Elapsed: 00:00:00.01
21:21:07 SQL> 
21:21:07 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
21:21:07 SQL> CREATE TABLE modsrc COMPRESS AS
21:21:07   2  SELECT
21:21:07   3  pair
21:21:07   4  ,ydate
21:21:07   5  ,prdate
21:21:07   6  ,trend
21:21:07   7  ,g8
21:21:07   8  ,gatt
21:21:07   9  ,gattn
21:21:07  10  FROM q15
21:21:07  11  /

Table created.

Elapsed: 00:00:00.08
21:21:08 SQL> 
21:21:08 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
21:21:08 SQL> 
21:21:08 SQL> -- rpt
21:21:08 SQL> 
21:21:08 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20738

Elapsed: 00:00:00.34
21:21:08 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20354

Elapsed: 00:00:00.01
21:21:08 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20354

Elapsed: 00:00:00.01
21:21:08 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20354

Elapsed: 00:00:00.00
21:21:08 SQL> 
21:21:08 SQL> DROP   TABLE cad_ms10 ;

Table dropped.

Elapsed: 00:00:00.04
21:21:08 SQL> CREATE TABLE cad_ms10 COMPRESS AS
21:21:08   2  SELECT
21:21:08   3  ydate
21:21:08   4  ,trend cad_trend
21:21:08   5  ,g8    cad_g8
21:21:08   6  ,gatt  cad_gatt
21:21:08   7  ,gattn cad_gattn
21:21:08   8  FROM modsrc
21:21:08   9  /

Table created.

Elapsed: 00:00:00.06
21:21:08 SQL> 
21:21:08 SQL> ANALYZE TABLE cad_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
21:21:08 SQL> 
21:21:08 SQL> -- rpt
21:21:08 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-17 11:50:01 2010-12-24 21:05:00	 9355	  -.0122      .0159
	-1 2010-09-17 05:25:01 2010-12-24 21:15:00	10903	 -.01105      .0176

Elapsed: 00:00:00.02
21:21:08 SQL> SELECT cad_trend,MIN(ydate),MAX(ydate),COUNT(cad_trend),MIN(cad_g8),MAX(cad_g8)FROM cad_ms10 GROUP BY cad_trend;

 CAD_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(CAD_TREND) MIN(CAD_G8) MAX(CAD_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-17 11:50:01 2010-12-24 21:05:00	       9388	 -.0122       .0159
	-1 2010-09-17 05:25:01 2010-12-24 21:15:00	      10966	-.01105       .0176

Elapsed: 00:00:00.01
21:21:08 SQL> 
21:21:08 SQL> -- I need a copy of q15 attributes
21:21:08 SQL> 
21:21:08 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.33
21:21:09 SQL> CREATE TABLE cad_att COMPRESS AS
21:21:09   2  SELECT
21:21:09   3  ydate
21:21:09   4  ,att00 cad_att00
21:21:09   5  ,att01 cad_att01
21:21:09   6  ,att02 cad_att02
21:21:09   7  ,att03 cad_att03
21:21:09   8  ,att04 cad_att04
21:21:09   9  ,att05 cad_att05
21:21:09  10  ,att06 cad_att06
21:21:09  11  ,att07 cad_att07
21:21:09  12  ,att08 cad_att08
21:21:09  13  ,att09 cad_att09
21:21:09  14  ,att10 cad_att10
21:21:09  15  ,att11 cad_att11
21:21:09  16  ,att12 cad_att12
21:21:09  17  ,att13 cad_att13
21:21:09  18  ,att14 cad_att14
21:21:09  19  ,att15 cad_att15
21:21:09  20  ,att16 cad_att16
21:21:09  21  ,att17 cad_att17
21:21:09  22  ,att18 cad_att18
21:21:09  23  ,att19 cad_att19
21:21:09  24  ,att20 cad_att20
21:21:09  25  ,att21 cad_att21
21:21:09  26  ,att22 cad_att22
21:21:09  27  ,att23 cad_att23
21:21:09  28  ,att24 cad_att24
21:21:09  29  ,att25 cad_att25
21:21:09  30  ,att26 cad_att26
21:21:09  31  ,att27 cad_att27
21:21:09  32  ,att28 cad_att28
21:21:09  33  ,att29 cad_att29
21:21:09  34  ,att30 cad_att30
21:21:09  35  ,att31 cad_att31
21:21:09  36  ,att32 cad_att32
21:21:09  37  ,att33 cad_att33
21:21:09  38  ,att34 cad_att34
21:21:09  39  ,att35 cad_att35
21:21:09  40  ,att36 cad_att36
21:21:09  41  FROM q15
21:21:09  42  /

Table created.

Elapsed: 00:00:00.20
21:21:09 SQL> 
21:21:09 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.51
21:21:09 SQL> 
21:21:09 SQL> -- rpt
21:21:09 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     20354

Elapsed: 00:00:00.01
21:21:09 SQL> 
21:21:09 SQL> --
21:21:09 SQL> -- chf10.sql
21:21:09 SQL> --
21:21:09 SQL> 
21:21:09 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:21:09 SQL> 
21:21:09 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.32
21:21:10 SQL> 
21:21:10 SQL> -- I created di5min here:
21:21:10 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:21:10 SQL> 
21:21:10 SQL> CREATE OR REPLACE VIEW q11 AS
21:21:10   2  SELECT
21:21:10   3  pair
21:21:10   4  ,ydate
21:21:10   5  ,prdate
21:21:10   6  ,rownum rnum -- acts as t in my time-series
21:21:10   7  ,clse
21:21:10   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
21:21:10   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
21:21:10  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
21:21:10  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
21:21:10  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
21:21:10  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
21:21:10  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
21:21:10  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
21:21:10  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
21:21:10  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
21:21:10  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
21:21:10  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
21:21:10  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
21:21:10  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
21:21:10  22  FROM di5min WHERE pair LIKE'%chf%'
21:21:10  23  ORDER BY ydate
21:21:10  24  /

View created.

Elapsed: 00:00:00.05
21:21:10 SQL> 
21:21:10 SQL> -- rpt
21:21:10 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_chf        20741

Elapsed: 00:00:00.35
21:21:10 SQL> 
21:21:10 SQL> -- Calc deltas and gains
21:21:10 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:01.09
21:21:11 SQL> 
21:21:11 SQL> CREATE TABLE q13 COMPRESS AS
21:21:11   2  SELECT
21:21:11   3  pair
21:21:11   4  ,ydate
21:21:11   5  ,prdate
21:21:11   6  ,rnum
21:21:11   7  ,ld8
21:21:11   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
21:21:11   9  -- step by 2
21:21:11  10  ,clse-lg6  d06
21:21:11  11  ,lg6 -lg8  d68
21:21:11  12  ,lg8 -lg10 d810
21:21:11  13  ,lg10-lg12 d1012
21:21:11  14  ,lg12-lg14 d1214
21:21:11  15  ,lg14-lg16 d1416
21:21:11  16  ,lg16-lg18 d1618
21:21:11  17  -- step by 4
21:21:11  18  ,lg6 -lg10 d610
21:21:11  19  ,lg8 -lg12 d812
21:21:11  20  ,lg10-lg14 d1014
21:21:11  21  ,lg12-lg16 d1216
21:21:11  22  --
21:21:11  23  ,ABS(clse-lg6 )dc6
21:21:11  24  ,ABS(clse-lg8 )dc8
21:21:11  25  ,ABS(clse-lg10)dc10
21:21:11  26  ,ABS(clse-lg12)dc12
21:21:11  27  ,ABS(clse-lg14)dc14
21:21:11  28  ,ABS(clse-lg16)dc16
21:21:11  29  ,ABS(clse-lg18)dc18
21:21:11  30  ,ABS(clse-lg20)dc20
21:21:11  31  ,ABS(clse-lg22)dc22
21:21:11  32  ,(ld8-clse) ug8
21:21:11  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:21:11  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:21:11  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:21:11  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:21:11  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:21:11  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:21:11  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:21:11  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
21:21:11  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
21:21:11  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
21:21:11  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
21:21:11  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
21:21:11  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
21:21:11  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:21:11  47  ,0+TO_CHAR(ydate,'D')d
21:21:11  48  ,0+TO_CHAR(ydate,'W')w
21:21:11  49  -- mpm stands for minutes-past-midnight:
21:21:11  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:21:11  51  FROM q11
21:21:11  52  -- I dont want any NULL values from the LAG() functions:
21:21:11  53  WHERE lg32 > 0
21:21:11  54  ORDER BY pair,ydate
21:21:11  55  /

Table created.

Elapsed: 00:00:01.72
21:21:13 SQL> 
21:21:13 SQL> -- rpt
21:21:13 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9558
	-1	   10799

Elapsed: 00:00:00.03
21:21:13 SQL> 
21:21:13 SQL> -- Calc gains and ntiles
21:21:13 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.33
21:21:13 SQL> CREATE TABLE q15 COMPRESS AS
21:21:13   2  SELECT
21:21:13   3  pair
21:21:13   4  ,ydate
21:21:13   5  ,prdate -- Should be unique
21:21:13   6  ,trend -- +1 or -1
21:21:13   7  -- Use NTILE() to derive some attributes
21:21:13   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
21:21:13   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
21:21:13  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
21:21:13  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
21:21:13  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
21:21:13  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
21:21:13  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
21:21:13  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
21:21:13  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
21:21:13  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
21:21:13  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
21:21:13  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
21:21:13  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
21:21:13  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
21:21:13  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
21:21:13  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
21:21:13  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
21:21:13  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
21:21:13  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
21:21:13  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
21:21:13  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
21:21:13  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
21:21:13  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
21:21:13  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
21:21:13  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
21:21:13  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
21:21:13  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
21:21:13  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
21:21:13  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
21:21:13  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
21:21:13  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
21:21:13  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
21:21:13  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
21:21:13  41  ,hh    att32
21:21:13  42  ,d     att33
21:21:13  43  ,w     att34
21:21:13  44  ,mpm   att35
21:21:13  45  ,trend att36
21:21:13  46  ,ug8 g8
21:21:13  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
21:21:13  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
21:21:13  49  FROM q13
21:21:13  50  ORDER BY pair,ydate
21:21:13  51  /

Table created.

Elapsed: 00:00:05.35
21:21:19 SQL> 
21:21:19 SQL> -- rpt
21:21:19 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
21:21:19   2  GROUP BY pair,trend,gatt,gattn
21:21:19   3  ORDER BY pair,trend,gatt,gattn
21:21:19   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_chf 	-1 nup nup .000025291	    4911
usd_chf 	-1 nup up  -.00495404	    3130
usd_chf 	-1 up  nup .005054835	    2748
usd_chf 	-1			       0
usd_chf 	 1 nup nup -.00001497	    4478
usd_chf 	 1 nup up  -.00453113	    2904
usd_chf 	 1 up  nup .004647949	    2090
usd_chf 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
21:21:19 SQL> 
21:21:19 SQL> -- rpt
21:21:19 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_chf 2010-12-24 21:15:00

Elapsed: 00:00:00.02
21:21:19 SQL> 
21:21:19 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
21:21:19 SQL> CREATE TABLE modsrc COMPRESS AS
21:21:19   2  SELECT
21:21:19   3  pair
21:21:19   4  ,ydate
21:21:19   5  ,prdate
21:21:19   6  ,trend
21:21:19   7  ,g8
21:21:19   8  ,gatt
21:21:19   9  ,gattn
21:21:19  10  FROM q15
21:21:19  11  /

Table created.

Elapsed: 00:00:00.08
21:21:19 SQL> 
21:21:19 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
21:21:19 SQL> 
21:21:19 SQL> -- rpt
21:21:19 SQL> 
21:21:19 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20741

Elapsed: 00:00:00.34
21:21:20 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20357

Elapsed: 00:00:00.01
21:21:20 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20357

Elapsed: 00:00:00.01
21:21:20 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20357

Elapsed: 00:00:00.00
21:21:20 SQL> 
21:21:20 SQL> DROP   TABLE chf_ms10 ;

Table dropped.

Elapsed: 00:00:00.03
21:21:20 SQL> CREATE TABLE chf_ms10 COMPRESS AS
21:21:20   2  SELECT
21:21:20   3  ydate
21:21:20   4  ,trend chf_trend
21:21:20   5  ,g8    chf_g8
21:21:20   6  ,gatt  chf_gatt
21:21:20   7  ,gattn chf_gattn
21:21:20   8  FROM modsrc
21:21:20   9  /

Table created.

Elapsed: 00:00:00.08
21:21:20 SQL> 
21:21:20 SQL> ANALYZE TABLE chf_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
21:21:20 SQL> 
21:21:20 SQL> -- rpt
21:21:20 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-17 07:35:01 2010-12-24 21:05:00	 9472	 -.01775      .0155
	-1 2010-09-17 05:25:01 2010-12-24 21:15:00	10789	 -.01825     .01545

Elapsed: 00:00:00.02
21:21:20 SQL> SELECT chf_trend,MIN(ydate),MAX(ydate),COUNT(chf_trend),MIN(chf_g8),MAX(chf_g8)FROM chf_ms10 GROUP BY chf_trend;

 CHF_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(CHF_TREND) MIN(CHF_G8) MAX(CHF_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-17 07:35:01 2010-12-24 21:05:00	       9558	-.01775       .0155
	-1 2010-09-17 05:25:01 2010-12-24 21:15:00	      10799	-.01825      .01545

Elapsed: 00:00:00.01
21:21:20 SQL> 
21:21:20 SQL> -- I need a copy of q15 attributes
21:21:20 SQL> 
21:21:20 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.04
21:21:20 SQL> CREATE TABLE chf_att COMPRESS AS
21:21:20   2  SELECT
21:21:20   3  ydate
21:21:20   4  ,att00 chf_att00
21:21:20   5  ,att01 chf_att01
21:21:20   6  ,att02 chf_att02
21:21:20   7  ,att03 chf_att03
21:21:20   8  ,att04 chf_att04
21:21:20   9  ,att05 chf_att05
21:21:20  10  ,att06 chf_att06
21:21:20  11  ,att07 chf_att07
21:21:20  12  ,att08 chf_att08
21:21:20  13  ,att09 chf_att09
21:21:20  14  ,att10 chf_att10
21:21:20  15  ,att11 chf_att11
21:21:20  16  ,att12 chf_att12
21:21:20  17  ,att13 chf_att13
21:21:20  18  ,att14 chf_att14
21:21:20  19  ,att15 chf_att15
21:21:20  20  ,att16 chf_att16
21:21:20  21  ,att17 chf_att17
21:21:20  22  ,att18 chf_att18
21:21:20  23  ,att19 chf_att19
21:21:20  24  ,att20 chf_att20
21:21:20  25  ,att21 chf_att21
21:21:20  26  ,att22 chf_att22
21:21:20  27  ,att23 chf_att23
21:21:20  28  ,att24 chf_att24
21:21:20  29  ,att25 chf_att25
21:21:20  30  ,att26 chf_att26
21:21:20  31  ,att27 chf_att27
21:21:20  32  ,att28 chf_att28
21:21:20  33  ,att29 chf_att29
21:21:20  34  ,att30 chf_att30
21:21:20  35  ,att31 chf_att31
21:21:20  36  ,att32 chf_att32
21:21:20  37  ,att33 chf_att33
21:21:20  38  ,att34 chf_att34
21:21:20  39  ,att35 chf_att35
21:21:20  40  ,att36 chf_att36
21:21:20  41  FROM q15
21:21:20  42  /

Table created.

Elapsed: 00:00:00.17
21:21:20 SQL> 
21:21:20 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
21:21:21 SQL> 
21:21:21 SQL> -- rpt
21:21:21 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     20357

Elapsed: 00:00:00.00
21:21:21 SQL> 
21:21:21 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
