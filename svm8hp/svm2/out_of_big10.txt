
SQL*Plus: Release 11.2.0.1.0 Production on Thu Dec 23 21:58:32 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

21:58:33 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
21:58:33 SQL> 21:58:33 SQL> --
21:58:33 SQL> -- eur10.sql
21:58:33 SQL> --
21:58:33 SQL> 
21:58:33 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:58:33 SQL> 
21:58:33 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.02
21:58:33 SQL> 
21:58:33 SQL> -- I created di5min here:
21:58:33 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:58:33 SQL> 
21:58:33 SQL> CREATE OR REPLACE VIEW q11 AS
21:58:33   2  SELECT
21:58:33   3  pair
21:58:33   4  ,ydate
21:58:33   5  ,prdate
21:58:33   6  ,rownum rnum -- acts as t in my time-series
21:58:33   7  ,clse
21:58:33   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
21:58:33   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
21:58:33  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
21:58:33  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
21:58:33  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
21:58:33  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
21:58:33  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
21:58:33  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
21:58:33  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
21:58:33  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
21:58:33  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
21:58:33  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
21:58:33  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
21:58:33  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
21:58:33  22  FROM di5min WHERE pair LIKE'%eur%'
21:58:33  23  ORDER BY ydate
21:58:33  24  /

View created.

Elapsed: 00:00:00.09
21:58:33 SQL> 
21:58:33 SQL> -- rpt
21:58:33 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
eur_usd        20746

Elapsed: 00:00:00.36
21:58:33 SQL> 
21:58:33 SQL> -- Calc deltas and gains
21:58:33 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.05
21:58:33 SQL> 
21:58:33 SQL> CREATE TABLE q13 COMPRESS AS
21:58:33   2  SELECT
21:58:33   3  pair
21:58:33   4  ,ydate
21:58:33   5  ,prdate
21:58:33   6  ,rnum
21:58:33   7  ,ld8
21:58:33   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
21:58:33   9  -- step by 2
21:58:33  10  ,clse-lg6  d06
21:58:33  11  ,lg6 -lg8  d68
21:58:33  12  ,lg8 -lg10 d810
21:58:33  13  ,lg10-lg12 d1012
21:58:33  14  ,lg12-lg14 d1214
21:58:33  15  ,lg14-lg16 d1416
21:58:33  16  ,lg16-lg18 d1618
21:58:33  17  -- step by 4
21:58:33  18  ,lg6 -lg10 d610
21:58:33  19  ,lg8 -lg12 d812
21:58:33  20  ,lg10-lg14 d1014
21:58:33  21  ,lg12-lg16 d1216
21:58:33  22  --
21:58:33  23  ,ABS(clse-lg6 )dc6
21:58:33  24  ,ABS(clse-lg8 )dc8
21:58:33  25  ,ABS(clse-lg10)dc10
21:58:33  26  ,ABS(clse-lg12)dc12
21:58:33  27  ,ABS(clse-lg14)dc14
21:58:33  28  ,ABS(clse-lg16)dc16
21:58:33  29  ,ABS(clse-lg18)dc18
21:58:33  30  ,ABS(clse-lg20)dc20
21:58:33  31  ,ABS(clse-lg22)dc22
21:58:33  32  ,(ld8-clse) ug8
21:58:33  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:58:33  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:58:33  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:58:33  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:58:33  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:58:33  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:58:33  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:58:33  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
21:58:33  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
21:58:33  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
21:58:33  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
21:58:33  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
21:58:33  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
21:58:33  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:58:33  47  ,0+TO_CHAR(ydate,'D')d
21:58:33  48  ,0+TO_CHAR(ydate,'W')w
21:58:33  49  -- mpm stands for minutes-past-midnight:
21:58:33  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:58:33  51  FROM q11
21:58:33  52  -- I dont want any NULL values from the LAG() functions:
21:58:33  53  WHERE lg32 > 0
21:58:33  54  ORDER BY pair,ydate
21:58:33  55  /

Table created.

Elapsed: 00:00:01.98
21:58:35 SQL> 
21:58:35 SQL> -- rpt
21:58:35 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	   10112
	-1	   10250

Elapsed: 00:00:00.03
21:58:35 SQL> 
21:58:35 SQL> -- Calc gains and ntiles
21:58:35 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.11
21:58:35 SQL> CREATE TABLE q15 COMPRESS AS
21:58:35   2  SELECT
21:58:35   3  pair
21:58:35   4  ,ydate
21:58:35   5  ,prdate -- Should be unique
21:58:35   6  ,trend -- +1 or -1
21:58:35   7  -- Use NTILE() to derive some attributes
21:58:35   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
21:58:35   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
21:58:35  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
21:58:35  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
21:58:35  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
21:58:35  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
21:58:35  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
21:58:35  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
21:58:35  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
21:58:35  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
21:58:35  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
21:58:35  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
21:58:35  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
21:58:35  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
21:58:35  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
21:58:35  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
21:58:35  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
21:58:35  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
21:58:35  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
21:58:35  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
21:58:35  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
21:58:35  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
21:58:35  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
21:58:35  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
21:58:35  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
21:58:35  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
21:58:35  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
21:58:35  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
21:58:35  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
21:58:35  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
21:58:35  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
21:58:35  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
21:58:35  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
21:58:35  41  ,hh    att32
21:58:35  42  ,d     att33
21:58:35  43  ,w     att34
21:58:35  44  ,mpm   att35
21:58:35  45  ,trend att36
21:58:35  46  ,ug8 g8
21:58:35  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
21:58:35  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
21:58:35  49  FROM q13
21:58:35  50  ORDER BY pair,ydate
21:58:35  51  /

Table created.

Elapsed: 00:00:05.45
21:58:41 SQL> 
21:58:41 SQL> -- rpt
21:58:41 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
21:58:41   2  GROUP BY pair,trend,gatt,gattn
21:58:41   3  ORDER BY pair,trend,gatt,gattn
21:58:41   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
eur_usd 	-1 nup nup .000024743	    3019
eur_usd 	-1 nup up  -.00602802	    3651
eur_usd 	-1 up  nup .005785023	    3547
eur_usd 	-1			       0
eur_usd 	 1 nup nup -.00009925	    2951
eur_usd 	 1 nup up  -.00625215	    3472
eur_usd 	 1 up  nup .006580195	    3626
eur_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
21:58:41 SQL> 
21:58:41 SQL> -- rpt
21:58:41 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
eur_usd 2010-12-23 21:55:00

Elapsed: 00:00:00.02
21:58:41 SQL> 
21:58:41 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.35
21:58:41 SQL> CREATE TABLE modsrc COMPRESS AS
21:58:41   2  SELECT
21:58:41   3  pair
21:58:41   4  ,ydate
21:58:41   5  ,prdate
21:58:41   6  ,trend
21:58:41   7  ,g8
21:58:41   8  ,gatt
21:58:41   9  ,gattn
21:58:41  10  FROM q15
21:58:41  11  /

Table created.

Elapsed: 00:00:00.09
21:58:41 SQL> 
21:58:41 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.24
21:58:41 SQL> 
21:58:41 SQL> -- rpt
21:58:41 SQL> 
21:58:41 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20746

Elapsed: 00:00:00.35
21:58:42 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20362

Elapsed: 00:00:00.01
21:58:42 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20362

Elapsed: 00:00:00.00
21:58:42 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20362

Elapsed: 00:00:00.01
21:58:42 SQL> 
21:58:42 SQL> DROP   TABLE eur_ms10 ;

Table dropped.

Elapsed: 00:00:00.03
21:58:42 SQL> CREATE TABLE eur_ms10 COMPRESS AS
21:58:42   2  SELECT
21:58:42   3  ydate
21:58:42   4  ,trend eur_trend
21:58:42   5  ,g8    eur_g8
21:58:42   6  ,gatt  eur_gatt
21:58:42   7  ,gattn eur_gattn
21:58:42   8  FROM modsrc
21:58:42   9  /

Table created.

Elapsed: 00:00:00.07
21:58:42 SQL> 
21:58:42 SQL> ANALYZE TABLE eur_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
21:58:42 SQL> 
21:58:42 SQL> -- rpt
21:58:42 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 07:10:01 2010-12-23 21:55:00	10049	  -.0218     .02165
	-1 2010-09-16 06:00:01 2010-12-23 18:05:00	10217	 -.02085      .0196

Elapsed: 00:00:00.02
21:58:42 SQL> SELECT eur_trend,MIN(ydate),MAX(ydate),COUNT(eur_trend),MIN(eur_g8),MAX(eur_g8)FROM eur_ms10 GROUP BY eur_trend;

 EUR_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(EUR_TREND) MIN(EUR_G8) MAX(EUR_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 07:10:01 2010-12-23 21:55:00	      10112	 -.0218      .02165
	-1 2010-09-16 06:00:01 2010-12-23 18:05:00	      10250	-.02085       .0196

Elapsed: 00:00:00.01
21:58:42 SQL> 
21:58:42 SQL> -- I need a copy of q15 attributes
21:58:42 SQL> 
21:58:42 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.24
21:58:42 SQL> CREATE TABLE eur_att COMPRESS AS
21:58:42   2  SELECT
21:58:42   3  ydate
21:58:42   4  ,att00 eur_att00
21:58:42   5  ,att01 eur_att01
21:58:42   6  ,att02 eur_att02
21:58:42   7  ,att03 eur_att03
21:58:42   8  ,att04 eur_att04
21:58:42   9  ,att05 eur_att05
21:58:42  10  ,att06 eur_att06
21:58:42  11  ,att07 eur_att07
21:58:42  12  ,att08 eur_att08
21:58:42  13  ,att09 eur_att09
21:58:42  14  ,att10 eur_att10
21:58:42  15  ,att11 eur_att11
21:58:42  16  ,att12 eur_att12
21:58:42  17  ,att13 eur_att13
21:58:42  18  ,att14 eur_att14
21:58:42  19  ,att15 eur_att15
21:58:42  20  ,att16 eur_att16
21:58:42  21  ,att17 eur_att17
21:58:42  22  ,att18 eur_att18
21:58:42  23  ,att19 eur_att19
21:58:42  24  ,att20 eur_att20
21:58:42  25  ,att21 eur_att21
21:58:42  26  ,att22 eur_att22
21:58:42  27  ,att23 eur_att23
21:58:42  28  ,att24 eur_att24
21:58:42  29  ,att25 eur_att25
21:58:42  30  ,att26 eur_att26
21:58:42  31  ,att27 eur_att27
21:58:42  32  ,att28 eur_att28
21:58:42  33  ,att29 eur_att29
21:58:42  34  ,att30 eur_att30
21:58:42  35  ,att31 eur_att31
21:58:42  36  ,att32 eur_att32
21:58:42  37  ,att33 eur_att33
21:58:42  38  ,att34 eur_att34
21:58:42  39  ,att35 eur_att35
21:58:42  40  ,att36 eur_att36
21:58:42  41  FROM q15
21:58:42  42  /

Table created.

Elapsed: 00:00:00.18
21:58:42 SQL> 
21:58:42 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.52
21:58:43 SQL> 
21:58:43 SQL> -- rpt
21:58:43 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     20362

Elapsed: 00:00:00.01
21:58:43 SQL> 
21:58:43 SQL> --
21:58:43 SQL> -- aud10.sql
21:58:43 SQL> --
21:58:43 SQL> 
21:58:43 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:58:43 SQL> 
21:58:43 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.33
21:58:43 SQL> 
21:58:43 SQL> -- I created di5min here:
21:58:43 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:58:43 SQL> 
21:58:43 SQL> CREATE OR REPLACE VIEW q11 AS
21:58:43   2  SELECT
21:58:43   3  pair
21:58:43   4  ,ydate
21:58:43   5  ,prdate
21:58:43   6  ,rownum rnum -- acts as t in my time-series
21:58:43   7  ,clse
21:58:43   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
21:58:43   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
21:58:43  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
21:58:43  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
21:58:43  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
21:58:43  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
21:58:43  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
21:58:43  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
21:58:43  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
21:58:43  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
21:58:43  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
21:58:43  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
21:58:43  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
21:58:43  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
21:58:43  22  FROM di5min WHERE pair LIKE'%aud%'
21:58:43  23  ORDER BY ydate
21:58:43  24  /

View created.

Elapsed: 00:00:00.05
21:58:43 SQL> 
21:58:43 SQL> -- rpt
21:58:43 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
aud_usd        20743

Elapsed: 00:00:00.35
21:58:44 SQL> 
21:58:44 SQL> -- Calc deltas and gains
21:58:44 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.16
21:58:44 SQL> 
21:58:44 SQL> CREATE TABLE q13 COMPRESS AS
21:58:44   2  SELECT
21:58:44   3  pair
21:58:44   4  ,ydate
21:58:44   5  ,prdate
21:58:44   6  ,rnum
21:58:44   7  ,ld8
21:58:44   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
21:58:44   9  -- step by 2
21:58:44  10  ,clse-lg6  d06
21:58:44  11  ,lg6 -lg8  d68
21:58:44  12  ,lg8 -lg10 d810
21:58:44  13  ,lg10-lg12 d1012
21:58:44  14  ,lg12-lg14 d1214
21:58:44  15  ,lg14-lg16 d1416
21:58:44  16  ,lg16-lg18 d1618
21:58:44  17  -- step by 4
21:58:44  18  ,lg6 -lg10 d610
21:58:44  19  ,lg8 -lg12 d812
21:58:44  20  ,lg10-lg14 d1014
21:58:44  21  ,lg12-lg16 d1216
21:58:44  22  --
21:58:44  23  ,ABS(clse-lg6 )dc6
21:58:44  24  ,ABS(clse-lg8 )dc8
21:58:44  25  ,ABS(clse-lg10)dc10
21:58:44  26  ,ABS(clse-lg12)dc12
21:58:44  27  ,ABS(clse-lg14)dc14
21:58:44  28  ,ABS(clse-lg16)dc16
21:58:44  29  ,ABS(clse-lg18)dc18
21:58:44  30  ,ABS(clse-lg20)dc20
21:58:44  31  ,ABS(clse-lg22)dc22
21:58:44  32  ,(ld8-clse) ug8
21:58:44  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:58:44  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:58:44  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:58:44  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:58:44  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:58:44  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:58:44  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:58:44  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
21:58:44  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
21:58:44  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
21:58:44  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
21:58:44  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
21:58:44  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
21:58:44  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:58:44  47  ,0+TO_CHAR(ydate,'D')d
21:58:44  48  ,0+TO_CHAR(ydate,'W')w
21:58:44  49  -- mpm stands for minutes-past-midnight:
21:58:44  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:58:44  51  FROM q11
21:58:44  52  -- I dont want any NULL values from the LAG() functions:
21:58:44  53  WHERE lg32 > 0
21:58:44  54  ORDER BY pair,ydate
21:58:44  55  /

Table created.

Elapsed: 00:00:01.67
21:58:46 SQL> 
21:58:46 SQL> -- rpt
21:58:46 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	   10834
	-1	    9525

Elapsed: 00:00:00.03
21:58:46 SQL> 
21:58:46 SQL> -- Calc gains and ntiles
21:58:46 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.13
21:58:46 SQL> CREATE TABLE q15 COMPRESS AS
21:58:46   2  SELECT
21:58:46   3  pair
21:58:46   4  ,ydate
21:58:46   5  ,prdate -- Should be unique
21:58:46   6  ,trend -- +1 or -1
21:58:46   7  -- Use NTILE() to derive some attributes
21:58:46   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
21:58:46   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
21:58:46  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
21:58:46  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
21:58:46  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
21:58:46  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
21:58:46  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
21:58:46  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
21:58:46  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
21:58:46  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
21:58:46  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
21:58:46  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
21:58:46  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
21:58:46  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
21:58:46  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
21:58:46  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
21:58:46  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
21:58:46  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
21:58:46  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
21:58:46  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
21:58:46  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
21:58:46  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
21:58:46  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
21:58:46  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
21:58:46  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
21:58:46  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
21:58:46  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
21:58:46  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
21:58:46  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
21:58:46  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
21:58:46  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
21:58:46  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
21:58:46  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
21:58:46  41  ,hh    att32
21:58:46  42  ,d     att33
21:58:46  43  ,w     att34
21:58:46  44  ,mpm   att35
21:58:46  45  ,trend att36
21:58:46  46  ,ug8 g8
21:58:46  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
21:58:46  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
21:58:46  49  FROM q13
21:58:46  50  ORDER BY pair,ydate
21:58:46  51  /

Table created.

Elapsed: 00:00:05.45
21:58:51 SQL> 
21:58:51 SQL> -- rpt
21:58:51 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
21:58:51   2  GROUP BY pair,trend,gatt,gattn
21:58:51   3  ORDER BY pair,trend,gatt,gattn
21:58:51   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
aud_usd 	-1 nup nup .000033305	    3531
aud_usd 	-1 nup up  -.00523332	    2544
aud_usd 	-1 up  nup  .00516911	    3412
aud_usd 	-1			       0
aud_usd 	 1 nup nup .000032913	    4336
aud_usd 	 1 nup up  -.00500133	    3061
aud_usd 	 1 up  nup  .00509381	    3379
aud_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
21:58:51 SQL> 
21:58:51 SQL> -- rpt
21:58:51 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
aud_usd 2010-12-23 21:55:00

Elapsed: 00:00:00.02
21:58:51 SQL> 
21:58:51 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.22
21:58:51 SQL> CREATE TABLE modsrc COMPRESS AS
21:58:51   2  SELECT
21:58:51   3  pair
21:58:51   4  ,ydate
21:58:51   5  ,prdate
21:58:51   6  ,trend
21:58:51   7  ,g8
21:58:51   8  ,gatt
21:58:51   9  ,gattn
21:58:51  10  FROM q15
21:58:51  11  /

Table created.

Elapsed: 00:00:00.08
21:58:52 SQL> 
21:58:52 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
21:58:52 SQL> 
21:58:52 SQL> -- rpt
21:58:52 SQL> 
21:58:52 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20743

Elapsed: 00:00:00.35
21:58:52 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20359

Elapsed: 00:00:00.01
21:58:52 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20359

Elapsed: 00:00:00.00
21:58:52 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20359

Elapsed: 00:00:00.01
21:58:52 SQL> 
21:58:52 SQL> DROP   TABLE aud_ms10 ;

Table dropped.

Elapsed: 00:00:00.03
21:58:52 SQL> CREATE TABLE aud_ms10 COMPRESS AS
21:58:52   2  SELECT
21:58:52   3  ydate
21:58:52   4  ,trend aud_trend
21:58:52   5  ,g8    aud_g8
21:58:52   6  ,gatt  aud_gatt
21:58:52   7  ,gattn aud_gattn
21:58:52   8  FROM modsrc
21:58:52   9  /

Table created.

Elapsed: 00:00:00.07
21:58:52 SQL> 
21:58:52 SQL> ANALYZE TABLE aud_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
21:58:52 SQL> 
21:58:52 SQL> -- rpt
21:58:52 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 09:00:01 2010-12-23 21:55:00	10776	  -.0203      .0136
	-1 2010-09-16 06:00:01 2010-12-23 20:15:00	 9487	  -.0196      .0148

Elapsed: 00:00:00.02
21:58:52 SQL> SELECT aud_trend,MIN(ydate),MAX(ydate),COUNT(aud_trend),MIN(aud_g8),MAX(aud_g8)FROM aud_ms10 GROUP BY aud_trend;

 AUD_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(AUD_TREND) MIN(AUD_G8) MAX(AUD_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 09:00:01 2010-12-23 21:55:00	      10834	 -.0203       .0136
	-1 2010-09-16 06:00:01 2010-12-23 20:15:00	       9525	 -.0196       .0148

Elapsed: 00:00:00.01
21:58:52 SQL> 
21:58:52 SQL> -- I need a copy of q15 attributes
21:58:52 SQL> 
21:58:52 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.12
21:58:53 SQL> CREATE TABLE aud_att COMPRESS AS
21:58:53   2  SELECT
21:58:53   3  ydate
21:58:53   4  ,att00 aud_att00
21:58:53   5  ,att01 aud_att01
21:58:53   6  ,att02 aud_att02
21:58:53   7  ,att03 aud_att03
21:58:53   8  ,att04 aud_att04
21:58:53   9  ,att05 aud_att05
21:58:53  10  ,att06 aud_att06
21:58:53  11  ,att07 aud_att07
21:58:53  12  ,att08 aud_att08
21:58:53  13  ,att09 aud_att09
21:58:53  14  ,att10 aud_att10
21:58:53  15  ,att11 aud_att11
21:58:53  16  ,att12 aud_att12
21:58:53  17  ,att13 aud_att13
21:58:53  18  ,att14 aud_att14
21:58:53  19  ,att15 aud_att15
21:58:53  20  ,att16 aud_att16
21:58:53  21  ,att17 aud_att17
21:58:53  22  ,att18 aud_att18
21:58:53  23  ,att19 aud_att19
21:58:53  24  ,att20 aud_att20
21:58:53  25  ,att21 aud_att21
21:58:53  26  ,att22 aud_att22
21:58:53  27  ,att23 aud_att23
21:58:53  28  ,att24 aud_att24
21:58:53  29  ,att25 aud_att25
21:58:53  30  ,att26 aud_att26
21:58:53  31  ,att27 aud_att27
21:58:53  32  ,att28 aud_att28
21:58:53  33  ,att29 aud_att29
21:58:53  34  ,att30 aud_att30
21:58:53  35  ,att31 aud_att31
21:58:53  36  ,att32 aud_att32
21:58:53  37  ,att33 aud_att33
21:58:53  38  ,att34 aud_att34
21:58:53  39  ,att35 aud_att35
21:58:53  40  ,att36 aud_att36
21:58:53  41  FROM q15
21:58:53  42  /

Table created.

Elapsed: 00:00:00.17
21:58:53 SQL> 
21:58:53 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
21:58:53 SQL> 
21:58:53 SQL> -- rpt
21:58:53 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     20359

Elapsed: 00:00:00.00
21:58:53 SQL> 
21:58:53 SQL> --
21:58:53 SQL> -- gbp10.sql
21:58:53 SQL> --
21:58:53 SQL> 
21:58:53 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:58:53 SQL> 
21:58:53 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.30
21:58:53 SQL> 
21:58:53 SQL> -- I created di5min here:
21:58:53 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:58:53 SQL> 
21:58:53 SQL> CREATE OR REPLACE VIEW q11 AS
21:58:53   2  SELECT
21:58:53   3  pair
21:58:53   4  ,ydate
21:58:53   5  ,prdate
21:58:53   6  ,rownum rnum -- acts as t in my time-series
21:58:53   7  ,clse
21:58:53   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
21:58:53   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
21:58:53  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
21:58:53  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
21:58:53  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
21:58:53  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
21:58:53  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
21:58:53  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
21:58:53  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
21:58:53  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
21:58:53  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
21:58:53  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
21:58:53  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
21:58:53  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
21:58:53  22  FROM di5min WHERE pair LIKE'%gbp%'
21:58:53  23  ORDER BY ydate
21:58:53  24  /

View created.

Elapsed: 00:00:00.04
21:58:54 SQL> 
21:58:54 SQL> -- rpt
21:58:54 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
gbp_usd        20745

Elapsed: 00:00:00.34
21:58:54 SQL> 
21:58:54 SQL> -- Calc deltas and gains
21:58:54 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.18
21:58:54 SQL> 
21:58:54 SQL> CREATE TABLE q13 COMPRESS AS
21:58:54   2  SELECT
21:58:54   3  pair
21:58:54   4  ,ydate
21:58:54   5  ,prdate
21:58:54   6  ,rnum
21:58:54   7  ,ld8
21:58:54   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
21:58:54   9  -- step by 2
21:58:54  10  ,clse-lg6  d06
21:58:54  11  ,lg6 -lg8  d68
21:58:54  12  ,lg8 -lg10 d810
21:58:54  13  ,lg10-lg12 d1012
21:58:54  14  ,lg12-lg14 d1214
21:58:54  15  ,lg14-lg16 d1416
21:58:54  16  ,lg16-lg18 d1618
21:58:54  17  -- step by 4
21:58:54  18  ,lg6 -lg10 d610
21:58:54  19  ,lg8 -lg12 d812
21:58:54  20  ,lg10-lg14 d1014
21:58:54  21  ,lg12-lg16 d1216
21:58:54  22  --
21:58:54  23  ,ABS(clse-lg6 )dc6
21:58:54  24  ,ABS(clse-lg8 )dc8
21:58:54  25  ,ABS(clse-lg10)dc10
21:58:54  26  ,ABS(clse-lg12)dc12
21:58:54  27  ,ABS(clse-lg14)dc14
21:58:54  28  ,ABS(clse-lg16)dc16
21:58:54  29  ,ABS(clse-lg18)dc18
21:58:54  30  ,ABS(clse-lg20)dc20
21:58:54  31  ,ABS(clse-lg22)dc22
21:58:54  32  ,(ld8-clse) ug8
21:58:54  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:58:54  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:58:54  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:58:54  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:58:54  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:58:54  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:58:54  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:58:54  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
21:58:54  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
21:58:54  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
21:58:54  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
21:58:54  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
21:58:54  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
21:58:54  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:58:54  47  ,0+TO_CHAR(ydate,'D')d
21:58:54  48  ,0+TO_CHAR(ydate,'W')w
21:58:54  49  -- mpm stands for minutes-past-midnight:
21:58:54  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:58:54  51  FROM q11
21:58:54  52  -- I dont want any NULL values from the LAG() functions:
21:58:54  53  WHERE lg32 > 0
21:58:54  54  ORDER BY pair,ydate
21:58:54  55  /

Table created.

Elapsed: 00:00:01.71
21:58:56 SQL> 
21:58:56 SQL> -- rpt
21:58:56 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9917
	-1	   10444

Elapsed: 00:00:00.03
21:58:56 SQL> 
21:58:56 SQL> -- Calc gains and ntiles
21:58:56 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.13
21:58:56 SQL> CREATE TABLE q15 COMPRESS AS
21:58:56   2  SELECT
21:58:56   3  pair
21:58:56   4  ,ydate
21:58:56   5  ,prdate -- Should be unique
21:58:56   6  ,trend -- +1 or -1
21:58:56   7  -- Use NTILE() to derive some attributes
21:58:56   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
21:58:56   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
21:58:56  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
21:58:56  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
21:58:56  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
21:58:56  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
21:58:56  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
21:58:56  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
21:58:56  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
21:58:56  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
21:58:56  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
21:58:56  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
21:58:56  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
21:58:56  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
21:58:56  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
21:58:56  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
21:58:56  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
21:58:56  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
21:58:56  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
21:58:56  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
21:58:56  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
21:58:56  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
21:58:56  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
21:58:56  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
21:58:56  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
21:58:56  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
21:58:56  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
21:58:56  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
21:58:56  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
21:58:56  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
21:58:56  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
21:58:56  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
21:58:56  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
21:58:56  41  ,hh    att32
21:58:56  42  ,d     att33
21:58:56  43  ,w     att34
21:58:56  44  ,mpm   att35
21:58:56  45  ,trend att36
21:58:56  46  ,ug8 g8
21:58:56  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
21:58:56  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
21:58:56  49  FROM q13
21:58:56  50  ORDER BY pair,ydate
21:58:56  51  /

Table created.

Elapsed: 00:00:05.47
21:59:01 SQL> 
21:59:01 SQL> -- rpt
21:59:01 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
21:59:01   2  GROUP BY pair,trend,gatt,gattn
21:59:01   3  ORDER BY pair,trend,gatt,gattn
21:59:01   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
gbp_usd 	-1 nup nup .000094113	    3852
gbp_usd 	-1 nup up   -.0059004	    3270
gbp_usd 	-1 up  nup .005444008	    3300
gbp_usd 	-1			       0
gbp_usd 	 1 nup nup -.00008296	    3633
gbp_usd 	 1 nup up  -.00554744	    3271
gbp_usd 	 1 up  nup .006010675	    2939
gbp_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.04
21:59:01 SQL> 
21:59:01 SQL> -- rpt
21:59:01 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
gbp_usd 2010-12-23 21:55:00

Elapsed: 00:00:00.02
21:59:01 SQL> 
21:59:01 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.16
21:59:02 SQL> CREATE TABLE modsrc COMPRESS AS
21:59:02   2  SELECT
21:59:02   3  pair
21:59:02   4  ,ydate
21:59:02   5  ,prdate
21:59:02   6  ,trend
21:59:02   7  ,g8
21:59:02   8  ,gatt
21:59:02   9  ,gattn
21:59:02  10  FROM q15
21:59:02  11  /

Table created.

Elapsed: 00:00:00.09
21:59:02 SQL> 
21:59:02 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
21:59:02 SQL> 
21:59:02 SQL> -- rpt
21:59:02 SQL> 
21:59:02 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20745

Elapsed: 00:00:00.35
21:59:02 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20361

Elapsed: 00:00:00.01
21:59:02 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20361

Elapsed: 00:00:00.00
21:59:02 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20361

Elapsed: 00:00:00.01
21:59:02 SQL> 
21:59:02 SQL> DROP   TABLE gbp_ms10 ;

Table dropped.

Elapsed: 00:00:00.05
21:59:02 SQL> CREATE TABLE gbp_ms10 COMPRESS AS
21:59:02   2  SELECT
21:59:02   3  ydate
21:59:02   4  ,trend gbp_trend
21:59:02   5  ,g8    gbp_g8
21:59:02   6  ,gatt  gbp_gatt
21:59:02   7  ,gattn gbp_gattn
21:59:02   8  FROM modsrc
21:59:02   9  /

Table created.

Elapsed: 00:00:00.06
21:59:02 SQL> 
21:59:02 SQL> ANALYZE TABLE gbp_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
21:59:03 SQL> 
21:59:03 SQL> -- rpt
21:59:03 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 10:50:01 2010-12-23 21:55:00	 9843	  -.0231       .019
	-1 2010-09-16 06:00:01 2010-12-23 16:00:00	10422	    -.02      .0204

Elapsed: 00:00:00.03
21:59:03 SQL> SELECT gbp_trend,MIN(ydate),MAX(ydate),COUNT(gbp_trend),MIN(gbp_g8),MAX(gbp_g8)FROM gbp_ms10 GROUP BY gbp_trend;

 GBP_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(GBP_TREND) MIN(GBP_G8) MAX(GBP_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 10:50:01 2010-12-23 21:55:00	       9917	 -.0231        .019
	-1 2010-09-16 06:00:01 2010-12-23 16:00:00	      10444	   -.02       .0204

Elapsed: 00:00:00.01
21:59:03 SQL> 
21:59:03 SQL> -- I need a copy of q15 attributes
21:59:03 SQL> 
21:59:03 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.03
21:59:03 SQL> CREATE TABLE gbp_att COMPRESS AS
21:59:03   2  SELECT
21:59:03   3  ydate
21:59:03   4  ,att00 gbp_att00
21:59:03   5  ,att01 gbp_att01
21:59:03   6  ,att02 gbp_att02
21:59:03   7  ,att03 gbp_att03
21:59:03   8  ,att04 gbp_att04
21:59:03   9  ,att05 gbp_att05
21:59:03  10  ,att06 gbp_att06
21:59:03  11  ,att07 gbp_att07
21:59:03  12  ,att08 gbp_att08
21:59:03  13  ,att09 gbp_att09
21:59:03  14  ,att10 gbp_att10
21:59:03  15  ,att11 gbp_att11
21:59:03  16  ,att12 gbp_att12
21:59:03  17  ,att13 gbp_att13
21:59:03  18  ,att14 gbp_att14
21:59:03  19  ,att15 gbp_att15
21:59:03  20  ,att16 gbp_att16
21:59:03  21  ,att17 gbp_att17
21:59:03  22  ,att18 gbp_att18
21:59:03  23  ,att19 gbp_att19
21:59:03  24  ,att20 gbp_att20
21:59:03  25  ,att21 gbp_att21
21:59:03  26  ,att22 gbp_att22
21:59:03  27  ,att23 gbp_att23
21:59:03  28  ,att24 gbp_att24
21:59:03  29  ,att25 gbp_att25
21:59:03  30  ,att26 gbp_att26
21:59:03  31  ,att27 gbp_att27
21:59:03  32  ,att28 gbp_att28
21:59:03  33  ,att29 gbp_att29
21:59:03  34  ,att30 gbp_att30
21:59:03  35  ,att31 gbp_att31
21:59:03  36  ,att32 gbp_att32
21:59:03  37  ,att33 gbp_att33
21:59:03  38  ,att34 gbp_att34
21:59:03  39  ,att35 gbp_att35
21:59:03  40  ,att36 gbp_att36
21:59:03  41  FROM q15
21:59:03  42  /

Table created.

Elapsed: 00:00:00.17
21:59:03 SQL> 
21:59:03 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
21:59:03 SQL> 
21:59:03 SQL> -- rpt
21:59:03 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     20361

Elapsed: 00:00:00.00
21:59:03 SQL> 
21:59:03 SQL> --
21:59:03 SQL> -- jpy10.sql
21:59:03 SQL> --
21:59:03 SQL> 
21:59:03 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:59:03 SQL> 
21:59:03 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.32
21:59:04 SQL> 
21:59:04 SQL> -- I created di5min here:
21:59:04 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:59:04 SQL> 
21:59:04 SQL> CREATE OR REPLACE VIEW q11 AS
21:59:04   2  SELECT
21:59:04   3  pair
21:59:04   4  ,ydate
21:59:04   5  ,prdate
21:59:04   6  ,rownum rnum -- acts as t in my time-series
21:59:04   7  ,clse
21:59:04   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
21:59:04   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
21:59:04  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
21:59:04  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
21:59:04  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
21:59:04  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
21:59:04  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
21:59:04  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
21:59:04  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
21:59:04  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
21:59:04  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
21:59:04  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
21:59:04  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
21:59:04  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
21:59:04  22  FROM di5min WHERE pair LIKE'%jpy%'
21:59:04  23  ORDER BY ydate
21:59:04  24  /

View created.

Elapsed: 00:00:00.05
21:59:04 SQL> 
21:59:04 SQL> -- rpt
21:59:04 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_jpy        20744

Elapsed: 00:00:00.34
21:59:04 SQL> 
21:59:04 SQL> -- Calc deltas and gains
21:59:04 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.17
21:59:04 SQL> 
21:59:04 SQL> CREATE TABLE q13 COMPRESS AS
21:59:04   2  SELECT
21:59:04   3  pair
21:59:04   4  ,ydate
21:59:04   5  ,prdate
21:59:04   6  ,rnum
21:59:04   7  ,ld8
21:59:04   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
21:59:04   9  -- step by 2
21:59:04  10  ,clse-lg6  d06
21:59:04  11  ,lg6 -lg8  d68
21:59:04  12  ,lg8 -lg10 d810
21:59:04  13  ,lg10-lg12 d1012
21:59:04  14  ,lg12-lg14 d1214
21:59:04  15  ,lg14-lg16 d1416
21:59:04  16  ,lg16-lg18 d1618
21:59:04  17  -- step by 4
21:59:04  18  ,lg6 -lg10 d610
21:59:04  19  ,lg8 -lg12 d812
21:59:04  20  ,lg10-lg14 d1014
21:59:04  21  ,lg12-lg16 d1216
21:59:04  22  --
21:59:04  23  ,ABS(clse-lg6 )dc6
21:59:04  24  ,ABS(clse-lg8 )dc8
21:59:04  25  ,ABS(clse-lg10)dc10
21:59:04  26  ,ABS(clse-lg12)dc12
21:59:04  27  ,ABS(clse-lg14)dc14
21:59:04  28  ,ABS(clse-lg16)dc16
21:59:04  29  ,ABS(clse-lg18)dc18
21:59:04  30  ,ABS(clse-lg20)dc20
21:59:04  31  ,ABS(clse-lg22)dc22
21:59:04  32  ,(ld8-clse) ug8
21:59:04  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:59:04  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:59:04  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:59:04  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:59:04  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:59:04  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:59:04  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:59:04  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
21:59:04  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
21:59:04  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
21:59:04  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
21:59:04  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
21:59:04  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
21:59:04  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:59:04  47  ,0+TO_CHAR(ydate,'D')d
21:59:04  48  ,0+TO_CHAR(ydate,'W')w
21:59:04  49  -- mpm stands for minutes-past-midnight:
21:59:04  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:59:04  51  FROM q11
21:59:04  52  -- I dont want any NULL values from the LAG() functions:
21:59:04  53  WHERE lg32 > 0
21:59:04  54  ORDER BY pair,ydate
21:59:04  55  /

Table created.

Elapsed: 00:00:01.95
21:59:06 SQL> 
21:59:06 SQL> -- rpt
21:59:06 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9417
	-1	   10943

Elapsed: 00:00:00.03
21:59:06 SQL> 
21:59:06 SQL> -- Calc gains and ntiles
21:59:06 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.41
21:59:07 SQL> CREATE TABLE q15 COMPRESS AS
21:59:07   2  SELECT
21:59:07   3  pair
21:59:07   4  ,ydate
21:59:07   5  ,prdate -- Should be unique
21:59:07   6  ,trend -- +1 or -1
21:59:07   7  -- Use NTILE() to derive some attributes
21:59:07   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
21:59:07   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
21:59:07  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
21:59:07  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
21:59:07  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
21:59:07  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
21:59:07  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
21:59:07  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
21:59:07  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
21:59:07  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
21:59:07  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
21:59:07  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
21:59:07  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
21:59:07  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
21:59:07  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
21:59:07  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
21:59:07  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
21:59:07  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
21:59:07  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
21:59:07  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
21:59:07  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
21:59:07  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
21:59:07  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
21:59:07  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
21:59:07  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
21:59:07  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
21:59:07  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
21:59:07  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
21:59:07  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
21:59:07  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
21:59:07  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
21:59:07  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
21:59:07  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
21:59:07  41  ,hh    att32
21:59:07  42  ,d     att33
21:59:07  43  ,w     att34
21:59:07  44  ,mpm   att35
21:59:07  45  ,trend att36
21:59:07  46  ,ug8 g8
21:59:07  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
21:59:07  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
21:59:07  49  FROM q13
21:59:07  50  ORDER BY pair,ydate
21:59:07  51  /

Table created.

Elapsed: 00:00:05.45
21:59:12 SQL> 
21:59:12 SQL> -- rpt
21:59:12 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
21:59:12   2  GROUP BY pair,trend,gatt,gattn
21:59:12   3  ORDER BY pair,trend,gatt,gattn
21:59:12   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_jpy 	-1 nup nup 7.5567E-06	     168
usd_jpy 	-1 nup up    -.184776	    5504
usd_jpy 	-1 up  nup .181307333	    5204
usd_jpy 	-1			       0
usd_jpy 	 1 nup nup	    0	     118
usd_jpy 	 1 nup up  -.18892439	    5124
usd_jpy 	 1 up  nup .191490546	    4146
usd_jpy 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
21:59:12 SQL> 
21:59:12 SQL> -- rpt
21:59:12 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_jpy 2010-12-23 21:55:00

Elapsed: 00:00:00.01
21:59:12 SQL> 
21:59:12 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
21:59:12 SQL> CREATE TABLE modsrc COMPRESS AS
21:59:12   2  SELECT
21:59:12   3  pair
21:59:12   4  ,ydate
21:59:12   5  ,prdate
21:59:12   6  ,trend
21:59:12   7  ,g8
21:59:12   8  ,gatt
21:59:12   9  ,gattn
21:59:12  10  FROM q15
21:59:12  11  /

Table created.

Elapsed: 00:00:00.09
21:59:12 SQL> 
21:59:12 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.30
21:59:13 SQL> 
21:59:13 SQL> -- rpt
21:59:13 SQL> 
21:59:13 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20744

Elapsed: 00:00:00.36
21:59:13 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20360

Elapsed: 00:00:00.01
21:59:13 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20360

Elapsed: 00:00:00.01
21:59:13 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20360

Elapsed: 00:00:00.00
21:59:13 SQL> 
21:59:13 SQL> DROP   TABLE jpy_ms10 ;

Table dropped.

Elapsed: 00:00:00.03
21:59:13 SQL> CREATE TABLE jpy_ms10 COMPRESS AS
21:59:13   2  SELECT
21:59:13   3  ydate
21:59:13   4  ,trend jpy_trend
21:59:13   5  ,g8    jpy_g8
21:59:13   6  ,gatt  jpy_gatt
21:59:13   7  ,gattn jpy_gattn
21:59:13   8  FROM modsrc
21:59:13   9  /

Table created.

Elapsed: 00:00:00.08
21:59:13 SQL> 
21:59:13 SQL> ANALYZE TABLE jpy_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
21:59:13 SQL> 
21:59:13 SQL> -- rpt
21:59:13 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 08:15:01 2010-12-23 19:45:00	 9388	  -1.185	  1
	-1 2010-09-16 06:00:01 2010-12-23 21:55:00	10876	 -1.0575       1.32

Elapsed: 00:00:00.02
21:59:13 SQL> SELECT jpy_trend,MIN(ydate),MAX(ydate),COUNT(jpy_trend),MIN(jpy_g8),MAX(jpy_g8)FROM jpy_ms10 GROUP BY jpy_trend;

 JPY_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(JPY_TREND) MIN(JPY_G8) MAX(JPY_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 08:15:01 2010-12-23 19:45:00	       9417	 -1.185 	  1
	-1 2010-09-16 06:00:01 2010-12-23 21:55:00	      10943	-1.0575        1.32

Elapsed: 00:00:00.01
21:59:13 SQL> 
21:59:13 SQL> -- I need a copy of q15 attributes
21:59:13 SQL> 
21:59:13 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.03
21:59:13 SQL> CREATE TABLE jpy_att COMPRESS AS
21:59:13   2  SELECT
21:59:13   3  ydate
21:59:13   4  ,att00 jpy_att00
21:59:13   5  ,att01 jpy_att01
21:59:13   6  ,att02 jpy_att02
21:59:13   7  ,att03 jpy_att03
21:59:13   8  ,att04 jpy_att04
21:59:13   9  ,att05 jpy_att05
21:59:13  10  ,att06 jpy_att06
21:59:13  11  ,att07 jpy_att07
21:59:13  12  ,att08 jpy_att08
21:59:13  13  ,att09 jpy_att09
21:59:13  14  ,att10 jpy_att10
21:59:13  15  ,att11 jpy_att11
21:59:13  16  ,att12 jpy_att12
21:59:13  17  ,att13 jpy_att13
21:59:13  18  ,att14 jpy_att14
21:59:13  19  ,att15 jpy_att15
21:59:13  20  ,att16 jpy_att16
21:59:13  21  ,att17 jpy_att17
21:59:13  22  ,att18 jpy_att18
21:59:13  23  ,att19 jpy_att19
21:59:13  24  ,att20 jpy_att20
21:59:13  25  ,att21 jpy_att21
21:59:13  26  ,att22 jpy_att22
21:59:13  27  ,att23 jpy_att23
21:59:13  28  ,att24 jpy_att24
21:59:13  29  ,att25 jpy_att25
21:59:13  30  ,att26 jpy_att26
21:59:13  31  ,att27 jpy_att27
21:59:13  32  ,att28 jpy_att28
21:59:13  33  ,att29 jpy_att29
21:59:13  34  ,att30 jpy_att30
21:59:13  35  ,att31 jpy_att31
21:59:13  36  ,att32 jpy_att32
21:59:13  37  ,att33 jpy_att33
21:59:13  38  ,att34 jpy_att34
21:59:13  39  ,att35 jpy_att35
21:59:13  40  ,att36 jpy_att36
21:59:13  41  FROM q15
21:59:13  42  /

Table created.

Elapsed: 00:00:00.15
21:59:13 SQL> 
21:59:13 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
21:59:14 SQL> 
21:59:14 SQL> -- rpt
21:59:14 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     20360

Elapsed: 00:00:00.00
21:59:14 SQL> 
21:59:14 SQL> --
21:59:14 SQL> -- cad10.sql
21:59:14 SQL> --
21:59:14 SQL> 
21:59:14 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:59:14 SQL> 
21:59:14 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.30
21:59:14 SQL> 
21:59:14 SQL> -- I created di5min here:
21:59:14 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:59:14 SQL> 
21:59:14 SQL> CREATE OR REPLACE VIEW q11 AS
21:59:14   2  SELECT
21:59:14   3  pair
21:59:14   4  ,ydate
21:59:14   5  ,prdate
21:59:14   6  ,rownum rnum -- acts as t in my time-series
21:59:14   7  ,clse
21:59:14   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
21:59:14   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
21:59:14  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
21:59:14  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
21:59:14  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
21:59:14  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
21:59:14  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
21:59:14  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
21:59:14  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
21:59:14  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
21:59:14  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
21:59:14  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
21:59:14  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
21:59:14  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
21:59:14  22  FROM di5min WHERE pair LIKE'%cad%'
21:59:14  23  ORDER BY ydate
21:59:14  24  /

View created.

Elapsed: 00:00:00.05
21:59:14 SQL> 
21:59:14 SQL> -- rpt
21:59:14 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_cad        20742

Elapsed: 00:00:00.34
21:59:15 SQL> 
21:59:15 SQL> -- Calc deltas and gains
21:59:15 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.35
21:59:15 SQL> 
21:59:15 SQL> CREATE TABLE q13 COMPRESS AS
21:59:15   2  SELECT
21:59:15   3  pair
21:59:15   4  ,ydate
21:59:15   5  ,prdate
21:59:15   6  ,rnum
21:59:15   7  ,ld8
21:59:15   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
21:59:15   9  -- step by 2
21:59:15  10  ,clse-lg6  d06
21:59:15  11  ,lg6 -lg8  d68
21:59:15  12  ,lg8 -lg10 d810
21:59:15  13  ,lg10-lg12 d1012
21:59:15  14  ,lg12-lg14 d1214
21:59:15  15  ,lg14-lg16 d1416
21:59:15  16  ,lg16-lg18 d1618
21:59:15  17  -- step by 4
21:59:15  18  ,lg6 -lg10 d610
21:59:15  19  ,lg8 -lg12 d812
21:59:15  20  ,lg10-lg14 d1014
21:59:15  21  ,lg12-lg16 d1216
21:59:15  22  --
21:59:15  23  ,ABS(clse-lg6 )dc6
21:59:15  24  ,ABS(clse-lg8 )dc8
21:59:15  25  ,ABS(clse-lg10)dc10
21:59:15  26  ,ABS(clse-lg12)dc12
21:59:15  27  ,ABS(clse-lg14)dc14
21:59:15  28  ,ABS(clse-lg16)dc16
21:59:15  29  ,ABS(clse-lg18)dc18
21:59:15  30  ,ABS(clse-lg20)dc20
21:59:15  31  ,ABS(clse-lg22)dc22
21:59:15  32  ,(ld8-clse) ug8
21:59:15  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:59:15  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:59:15  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:59:15  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:59:15  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:59:15  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:59:15  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:59:15  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
21:59:15  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
21:59:15  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
21:59:15  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
21:59:15  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
21:59:15  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
21:59:15  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:59:15  47  ,0+TO_CHAR(ydate,'D')d
21:59:15  48  ,0+TO_CHAR(ydate,'W')w
21:59:15  49  -- mpm stands for minutes-past-midnight:
21:59:15  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:59:15  51  FROM q11
21:59:15  52  -- I dont want any NULL values from the LAG() functions:
21:59:15  53  WHERE lg32 > 0
21:59:15  54  ORDER BY pair,ydate
21:59:15  55  /

Table created.

Elapsed: 00:00:01.69
21:59:17 SQL> 
21:59:17 SQL> -- rpt
21:59:17 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9411
	-1	   10947

Elapsed: 00:00:00.03
21:59:17 SQL> 
21:59:17 SQL> -- Calc gains and ntiles
21:59:17 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.16
21:59:17 SQL> CREATE TABLE q15 COMPRESS AS
21:59:17   2  SELECT
21:59:17   3  pair
21:59:17   4  ,ydate
21:59:17   5  ,prdate -- Should be unique
21:59:17   6  ,trend -- +1 or -1
21:59:17   7  -- Use NTILE() to derive some attributes
21:59:17   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
21:59:17   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
21:59:17  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
21:59:17  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
21:59:17  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
21:59:17  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
21:59:17  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
21:59:17  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
21:59:17  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
21:59:17  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
21:59:17  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
21:59:17  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
21:59:17  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
21:59:17  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
21:59:17  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
21:59:17  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
21:59:17  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
21:59:17  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
21:59:17  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
21:59:17  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
21:59:17  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
21:59:17  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
21:59:17  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
21:59:17  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
21:59:17  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
21:59:17  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
21:59:17  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
21:59:17  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
21:59:17  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
21:59:17  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
21:59:17  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
21:59:17  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
21:59:17  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
21:59:17  41  ,hh    att32
21:59:17  42  ,d     att33
21:59:17  43  ,w     att34
21:59:17  44  ,mpm   att35
21:59:17  45  ,trend att36
21:59:17  46  ,ug8 g8
21:59:17  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
21:59:17  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
21:59:17  49  FROM q13
21:59:17  50  ORDER BY pair,ydate
21:59:17  51  /

Table created.

Elapsed: 00:00:05.35
21:59:22 SQL> 
21:59:22 SQL> -- rpt
21:59:22 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
21:59:22   2  GROUP BY pair,trend,gatt,gattn
21:59:22   3  ORDER BY pair,trend,gatt,gattn
21:59:22   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_cad 	-1 nup nup -.00001655	    5658
usd_cad 	-1 nup up   -.0040141	    2618
usd_cad 	-1 up  nup .004660255	    2593
usd_cad 	-1			       0
usd_cad 	 1 nup nup -.00011628	    4673
usd_cad 	 1 nup up   -.0042332	    2738
usd_cad 	 1 up  nup .004612983	    1982
usd_cad 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
21:59:22 SQL> 
21:59:22 SQL> -- rpt
21:59:22 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_cad 2010-12-23 21:55:00

Elapsed: 00:00:00.02
21:59:22 SQL> 
21:59:22 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
21:59:22 SQL> CREATE TABLE modsrc COMPRESS AS
21:59:22   2  SELECT
21:59:22   3  pair
21:59:22   4  ,ydate
21:59:22   5  ,prdate
21:59:22   6  ,trend
21:59:22   7  ,g8
21:59:22   8  ,gatt
21:59:22   9  ,gattn
21:59:22  10  FROM q15
21:59:22  11  /

Table created.

Elapsed: 00:00:00.09
21:59:23 SQL> 
21:59:23 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
21:59:23 SQL> 
21:59:23 SQL> -- rpt
21:59:23 SQL> 
21:59:23 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20742

Elapsed: 00:00:00.35
21:59:23 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.01
21:59:23 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.00
21:59:23 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.01
21:59:23 SQL> 
21:59:23 SQL> DROP   TABLE cad_ms10 ;

Table dropped.

Elapsed: 00:00:00.03
21:59:23 SQL> CREATE TABLE cad_ms10 COMPRESS AS
21:59:23   2  SELECT
21:59:23   3  ydate
21:59:23   4  ,trend cad_trend
21:59:23   5  ,g8    cad_g8
21:59:23   6  ,gatt  cad_gatt
21:59:23   7  ,gattn cad_gattn
21:59:23   8  FROM modsrc
21:59:23   9  /

Table created.

Elapsed: 00:00:00.07
21:59:23 SQL> 
21:59:23 SQL> ANALYZE TABLE cad_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
21:59:23 SQL> 
21:59:23 SQL> -- rpt
21:59:23 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 06:00:01 2010-12-23 15:30:00	 9393	  -.0122      .0159
	-1 2010-09-16 07:15:01 2010-12-23 21:55:00	10869	 -.01105      .0176

Elapsed: 00:00:00.02
21:59:23 SQL> SELECT cad_trend,MIN(ydate),MAX(ydate),COUNT(cad_trend),MIN(cad_g8),MAX(cad_g8)FROM cad_ms10 GROUP BY cad_trend;

 CAD_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(CAD_TREND) MIN(CAD_G8) MAX(CAD_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 06:00:01 2010-12-23 15:30:00	       9411	 -.0122       .0159
	-1 2010-09-16 07:15:01 2010-12-23 21:55:00	      10947	-.01105       .0176

Elapsed: 00:00:00.01
21:59:23 SQL> 
21:59:23 SQL> -- I need a copy of q15 attributes
21:59:23 SQL> 
21:59:23 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.04
21:59:23 SQL> CREATE TABLE cad_att COMPRESS AS
21:59:23   2  SELECT
21:59:23   3  ydate
21:59:23   4  ,att00 cad_att00
21:59:23   5  ,att01 cad_att01
21:59:23   6  ,att02 cad_att02
21:59:23   7  ,att03 cad_att03
21:59:23   8  ,att04 cad_att04
21:59:23   9  ,att05 cad_att05
21:59:23  10  ,att06 cad_att06
21:59:23  11  ,att07 cad_att07
21:59:23  12  ,att08 cad_att08
21:59:23  13  ,att09 cad_att09
21:59:23  14  ,att10 cad_att10
21:59:23  15  ,att11 cad_att11
21:59:23  16  ,att12 cad_att12
21:59:23  17  ,att13 cad_att13
21:59:23  18  ,att14 cad_att14
21:59:23  19  ,att15 cad_att15
21:59:23  20  ,att16 cad_att16
21:59:23  21  ,att17 cad_att17
21:59:23  22  ,att18 cad_att18
21:59:23  23  ,att19 cad_att19
21:59:23  24  ,att20 cad_att20
21:59:23  25  ,att21 cad_att21
21:59:23  26  ,att22 cad_att22
21:59:23  27  ,att23 cad_att23
21:59:23  28  ,att24 cad_att24
21:59:23  29  ,att25 cad_att25
21:59:23  30  ,att26 cad_att26
21:59:23  31  ,att27 cad_att27
21:59:23  32  ,att28 cad_att28
21:59:23  33  ,att29 cad_att29
21:59:23  34  ,att30 cad_att30
21:59:23  35  ,att31 cad_att31
21:59:23  36  ,att32 cad_att32
21:59:23  37  ,att33 cad_att33
21:59:23  38  ,att34 cad_att34
21:59:23  39  ,att35 cad_att35
21:59:23  40  ,att36 cad_att36
21:59:23  41  FROM q15
21:59:23  42  /

Table created.

Elapsed: 00:00:00.19
21:59:24 SQL> 
21:59:24 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
21:59:24 SQL> 
21:59:24 SQL> -- rpt
21:59:24 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     20358

Elapsed: 00:00:00.01
21:59:24 SQL> 
21:59:24 SQL> --
21:59:24 SQL> -- chf10.sql
21:59:24 SQL> --
21:59:24 SQL> 
21:59:24 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:59:24 SQL> 
21:59:24 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.37
21:59:24 SQL> 
21:59:24 SQL> -- I created di5min here:
21:59:24 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:59:24 SQL> 
21:59:24 SQL> CREATE OR REPLACE VIEW q11 AS
21:59:24   2  SELECT
21:59:24   3  pair
21:59:24   4  ,ydate
21:59:24   5  ,prdate
21:59:24   6  ,rownum rnum -- acts as t in my time-series
21:59:24   7  ,clse
21:59:24   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
21:59:24   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
21:59:24  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
21:59:24  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
21:59:24  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
21:59:24  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
21:59:24  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
21:59:24  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
21:59:24  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
21:59:24  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
21:59:24  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
21:59:24  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
21:59:24  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
21:59:24  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
21:59:24  22  FROM di5min WHERE pair LIKE'%chf%'
21:59:24  23  ORDER BY ydate
21:59:24  24  /

View created.

Elapsed: 00:00:00.05
21:59:25 SQL> 
21:59:25 SQL> -- rpt
21:59:25 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_chf        20745

Elapsed: 00:00:00.34
21:59:25 SQL> 
21:59:25 SQL> -- Calc deltas and gains
21:59:25 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.23
21:59:25 SQL> 
21:59:25 SQL> CREATE TABLE q13 COMPRESS AS
21:59:25   2  SELECT
21:59:25   3  pair
21:59:25   4  ,ydate
21:59:25   5  ,prdate
21:59:25   6  ,rnum
21:59:25   7  ,ld8
21:59:25   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
21:59:25   9  -- step by 2
21:59:25  10  ,clse-lg6  d06
21:59:25  11  ,lg6 -lg8  d68
21:59:25  12  ,lg8 -lg10 d810
21:59:25  13  ,lg10-lg12 d1012
21:59:25  14  ,lg12-lg14 d1214
21:59:25  15  ,lg14-lg16 d1416
21:59:25  16  ,lg16-lg18 d1618
21:59:25  17  -- step by 4
21:59:25  18  ,lg6 -lg10 d610
21:59:25  19  ,lg8 -lg12 d812
21:59:25  20  ,lg10-lg14 d1014
21:59:25  21  ,lg12-lg16 d1216
21:59:25  22  --
21:59:25  23  ,ABS(clse-lg6 )dc6
21:59:25  24  ,ABS(clse-lg8 )dc8
21:59:25  25  ,ABS(clse-lg10)dc10
21:59:25  26  ,ABS(clse-lg12)dc12
21:59:25  27  ,ABS(clse-lg14)dc14
21:59:25  28  ,ABS(clse-lg16)dc16
21:59:25  29  ,ABS(clse-lg18)dc18
21:59:25  30  ,ABS(clse-lg20)dc20
21:59:25  31  ,ABS(clse-lg22)dc22
21:59:25  32  ,(ld8-clse) ug8
21:59:25  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:59:25  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:59:25  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:59:25  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:59:25  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:59:25  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:59:25  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:59:25  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
21:59:25  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
21:59:25  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
21:59:25  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
21:59:25  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
21:59:25  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
21:59:25  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:59:25  47  ,0+TO_CHAR(ydate,'D')d
21:59:25  48  ,0+TO_CHAR(ydate,'W')w
21:59:25  49  -- mpm stands for minutes-past-midnight:
21:59:25  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:59:25  51  FROM q11
21:59:25  52  -- I dont want any NULL values from the LAG() functions:
21:59:25  53  WHERE lg32 > 0
21:59:25  54  ORDER BY pair,ydate
21:59:25  55  /

Table created.

Elapsed: 00:00:01.66
21:59:27 SQL> 
21:59:27 SQL> -- rpt
21:59:27 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9625
	-1	   10736

Elapsed: 00:00:00.03
21:59:27 SQL> 
21:59:27 SQL> -- Calc gains and ntiles
21:59:27 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.20
21:59:27 SQL> CREATE TABLE q15 COMPRESS AS
21:59:27   2  SELECT
21:59:27   3  pair
21:59:27   4  ,ydate
21:59:27   5  ,prdate -- Should be unique
21:59:27   6  ,trend -- +1 or -1
21:59:27   7  -- Use NTILE() to derive some attributes
21:59:27   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
21:59:27   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
21:59:27  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
21:59:27  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
21:59:27  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
21:59:27  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
21:59:27  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
21:59:27  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
21:59:27  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
21:59:27  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
21:59:27  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
21:59:27  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
21:59:27  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
21:59:27  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
21:59:27  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
21:59:27  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
21:59:27  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
21:59:27  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
21:59:27  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
21:59:27  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
21:59:27  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
21:59:27  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
21:59:27  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
21:59:27  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
21:59:27  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
21:59:27  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
21:59:27  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
21:59:27  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
21:59:27  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
21:59:27  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
21:59:27  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
21:59:27  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
21:59:27  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
21:59:27  41  ,hh    att32
21:59:27  42  ,d     att33
21:59:27  43  ,w     att34
21:59:27  44  ,mpm   att35
21:59:27  45  ,trend att36
21:59:27  46  ,ug8 g8
21:59:27  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
21:59:27  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
21:59:27  49  FROM q13
21:59:27  50  ORDER BY pair,ydate
21:59:27  51  /

Table created.

Elapsed: 00:00:05.32
21:59:32 SQL> 
21:59:32 SQL> -- rpt
21:59:32 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
21:59:32   2  GROUP BY pair,trend,gatt,gattn
21:59:32   3  ORDER BY pair,trend,gatt,gattn
21:59:32   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_chf 	-1 nup nup .000029724	    4879
usd_chf 	-1 nup up  -.00495187	    3139
usd_chf 	-1 up  nup .005195516	    2701
usd_chf 	-1			       0
usd_chf 	 1 nup nup -9.989E-06	    4537
usd_chf 	 1 nup up  -.00455704	    2857
usd_chf 	 1 up  nup .004717722	    2152
usd_chf 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
21:59:32 SQL> 
21:59:32 SQL> -- rpt
21:59:32 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_chf 2010-12-23 21:55:00

Elapsed: 00:00:00.01
21:59:32 SQL> 
21:59:32 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
21:59:33 SQL> CREATE TABLE modsrc COMPRESS AS
21:59:33   2  SELECT
21:59:33   3  pair
21:59:33   4  ,ydate
21:59:33   5  ,prdate
21:59:33   6  ,trend
21:59:33   7  ,g8
21:59:33   8  ,gatt
21:59:33   9  ,gattn
21:59:33  10  FROM q15
21:59:33  11  /

Table created.

Elapsed: 00:00:00.08
21:59:33 SQL> 
21:59:33 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
21:59:33 SQL> 
21:59:33 SQL> -- rpt
21:59:33 SQL> 
21:59:33 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20745

Elapsed: 00:00:00.35
21:59:33 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20361

Elapsed: 00:00:00.01
21:59:33 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20361

Elapsed: 00:00:00.00
21:59:33 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20361

Elapsed: 00:00:00.01
21:59:33 SQL> 
21:59:33 SQL> DROP   TABLE chf_ms10 ;

Table dropped.

Elapsed: 00:00:00.04
21:59:33 SQL> CREATE TABLE chf_ms10 COMPRESS AS
21:59:33   2  SELECT
21:59:33   3  ydate
21:59:33   4  ,trend chf_trend
21:59:33   5  ,g8    chf_g8
21:59:33   6  ,gatt  chf_gatt
21:59:33   7  ,gattn chf_gattn
21:59:33   8  FROM modsrc
21:59:33   9  /

Table created.

Elapsed: 00:00:00.07
21:59:33 SQL> 
21:59:33 SQL> ANALYZE TABLE chf_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.24
21:59:34 SQL> 
21:59:34 SQL> -- rpt
21:59:34 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 08:00:01 2010-12-23 21:45:00	 9546	 -.01775      .0155
	-1 2010-09-16 06:00:01 2010-12-23 21:55:00	10719	 -.01825     .01545

Elapsed: 00:00:00.02
21:59:34 SQL> SELECT chf_trend,MIN(ydate),MAX(ydate),COUNT(chf_trend),MIN(chf_g8),MAX(chf_g8)FROM chf_ms10 GROUP BY chf_trend;

 CHF_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(CHF_TREND) MIN(CHF_G8) MAX(CHF_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 08:00:01 2010-12-23 21:45:00	       9625	-.01775       .0155
	-1 2010-09-16 06:00:01 2010-12-23 21:55:00	      10736	-.01825      .01545

Elapsed: 00:00:00.01
21:59:34 SQL> 
21:59:34 SQL> -- I need a copy of q15 attributes
21:59:34 SQL> 
21:59:34 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.04
21:59:34 SQL> CREATE TABLE chf_att COMPRESS AS
21:59:34   2  SELECT
21:59:34   3  ydate
21:59:34   4  ,att00 chf_att00
21:59:34   5  ,att01 chf_att01
21:59:34   6  ,att02 chf_att02
21:59:34   7  ,att03 chf_att03
21:59:34   8  ,att04 chf_att04
21:59:34   9  ,att05 chf_att05
21:59:34  10  ,att06 chf_att06
21:59:34  11  ,att07 chf_att07
21:59:34  12  ,att08 chf_att08
21:59:34  13  ,att09 chf_att09
21:59:34  14  ,att10 chf_att10
21:59:34  15  ,att11 chf_att11
21:59:34  16  ,att12 chf_att12
21:59:34  17  ,att13 chf_att13
21:59:34  18  ,att14 chf_att14
21:59:34  19  ,att15 chf_att15
21:59:34  20  ,att16 chf_att16
21:59:34  21  ,att17 chf_att17
21:59:34  22  ,att18 chf_att18
21:59:34  23  ,att19 chf_att19
21:59:34  24  ,att20 chf_att20
21:59:34  25  ,att21 chf_att21
21:59:34  26  ,att22 chf_att22
21:59:34  27  ,att23 chf_att23
21:59:34  28  ,att24 chf_att24
21:59:34  29  ,att25 chf_att25
21:59:34  30  ,att26 chf_att26
21:59:34  31  ,att27 chf_att27
21:59:34  32  ,att28 chf_att28
21:59:34  33  ,att29 chf_att29
21:59:34  34  ,att30 chf_att30
21:59:34  35  ,att31 chf_att31
21:59:34  36  ,att32 chf_att32
21:59:34  37  ,att33 chf_att33
21:59:34  38  ,att34 chf_att34
21:59:34  39  ,att35 chf_att35
21:59:34  40  ,att36 chf_att36
21:59:34  41  FROM q15
21:59:34  42  /

Table created.

Elapsed: 00:00:00.20
21:59:34 SQL> 
21:59:34 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
21:59:34 SQL> 
21:59:34 SQL> -- rpt
21:59:34 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     20361

Elapsed: 00:00:00.00
21:59:34 SQL> 
21:59:34 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
