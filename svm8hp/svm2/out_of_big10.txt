
SQL*Plus: Release 11.2.0.1.0 Production on Mon Dec 20 22:41:04 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

22:41:04 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
22:41:04 SQL> 22:41:04 SQL> --
22:41:04 SQL> -- eur10.sql
22:41:04 SQL> --
22:41:04 SQL> 
22:41:04 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:41:04 SQL> 
22:41:04 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.01
22:41:04 SQL> 
22:41:04 SQL> -- I created di5min here:
22:41:04 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:41:04 SQL> 
22:41:04 SQL> CREATE OR REPLACE VIEW q11 AS
22:41:04   2  SELECT
22:41:04   3  pair
22:41:04   4  ,ydate
22:41:04   5  ,prdate
22:41:04   6  ,rownum rnum -- acts as t in my time-series
22:41:04   7  ,clse
22:41:04   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
22:41:04   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
22:41:04  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
22:41:04  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
22:41:04  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
22:41:04  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
22:41:04  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
22:41:04  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
22:41:04  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
22:41:04  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
22:41:04  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
22:41:04  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
22:41:04  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
22:41:04  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
22:41:04  22  FROM di5min WHERE pair LIKE'%eur%'
22:41:04  23  ORDER BY ydate
22:41:04  24  /

View created.

Elapsed: 00:00:00.05
22:41:04 SQL> 
22:41:04 SQL> -- rpt
22:41:04 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
eur_usd        20538

Elapsed: 00:00:00.36
22:41:04 SQL> 
22:41:04 SQL> -- Calc deltas and gains
22:41:04 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.06
22:41:04 SQL> 
22:41:04 SQL> CREATE TABLE q13 COMPRESS AS
22:41:04   2  SELECT
22:41:04   3  pair
22:41:04   4  ,ydate
22:41:04   5  ,prdate
22:41:04   6  ,rnum
22:41:04   7  ,ld8
22:41:04   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
22:41:04   9  -- step by 2
22:41:04  10  ,clse-lg6  d06
22:41:04  11  ,lg6 -lg8  d68
22:41:04  12  ,lg8 -lg10 d810
22:41:04  13  ,lg10-lg12 d1012
22:41:04  14  ,lg12-lg14 d1214
22:41:04  15  ,lg14-lg16 d1416
22:41:04  16  ,lg16-lg18 d1618
22:41:04  17  -- step by 4
22:41:04  18  ,lg6 -lg10 d610
22:41:04  19  ,lg8 -lg12 d812
22:41:04  20  ,lg10-lg14 d1014
22:41:04  21  ,lg12-lg16 d1216
22:41:04  22  --
22:41:04  23  ,ABS(clse-lg6 )dc6
22:41:04  24  ,ABS(clse-lg8 )dc8
22:41:04  25  ,ABS(clse-lg10)dc10
22:41:04  26  ,ABS(clse-lg12)dc12
22:41:04  27  ,ABS(clse-lg14)dc14
22:41:04  28  ,ABS(clse-lg16)dc16
22:41:04  29  ,ABS(clse-lg18)dc18
22:41:04  30  ,ABS(clse-lg20)dc20
22:41:04  31  ,ABS(clse-lg22)dc22
22:41:04  32  ,(ld8-clse) ug8
22:41:04  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:41:04  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:41:04  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:41:04  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:41:04  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:41:04  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:41:04  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:41:04  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
22:41:04  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
22:41:04  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
22:41:04  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
22:41:04  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
22:41:04  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
22:41:04  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:41:04  47  ,0+TO_CHAR(ydate,'D')d
22:41:04  48  ,0+TO_CHAR(ydate,'W')w
22:41:04  49  -- mpm stands for minutes-past-midnight:
22:41:04  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:41:04  51  FROM q11
22:41:04  52  -- I dont want any NULL values from the LAG() functions:
22:41:04  53  WHERE lg32 > 0
22:41:04  54  ORDER BY pair,ydate
22:41:04  55  /

Table created.

Elapsed: 00:00:01.97
22:41:06 SQL> 
22:41:06 SQL> -- rpt
22:41:06 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	   10024
	-1	   10130

Elapsed: 00:00:00.03
22:41:06 SQL> 
22:41:06 SQL> -- Calc gains and ntiles
22:41:06 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.04
22:41:06 SQL> CREATE TABLE q15 COMPRESS AS
22:41:06   2  SELECT
22:41:06   3  pair
22:41:06   4  ,ydate
22:41:06   5  ,prdate -- Should be unique
22:41:06   6  ,trend -- +1 or -1
22:41:06   7  -- Use NTILE() to derive some attributes
22:41:06   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
22:41:06   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
22:41:06  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
22:41:06  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
22:41:06  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
22:41:06  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
22:41:06  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
22:41:06  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
22:41:06  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
22:41:06  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
22:41:06  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
22:41:06  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
22:41:06  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
22:41:06  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
22:41:06  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
22:41:06  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
22:41:06  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
22:41:06  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
22:41:06  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
22:41:06  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
22:41:06  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
22:41:06  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
22:41:06  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
22:41:06  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
22:41:06  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
22:41:06  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
22:41:06  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
22:41:06  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
22:41:06  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
22:41:06  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
22:41:06  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
22:41:06  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
22:41:06  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
22:41:06  41  ,hh    att32
22:41:06  42  ,d     att33
22:41:06  43  ,w     att34
22:41:06  44  ,mpm   att35
22:41:06  45  ,trend att36
22:41:06  46  ,ug8 g8
22:41:06  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
22:41:06  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
22:41:06  49  FROM q13
22:41:06  50  ORDER BY pair,ydate
22:41:06  51  /

Table created.

Elapsed: 00:00:05.28
22:41:12 SQL> 
22:41:12 SQL> -- rpt
22:41:12 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
22:41:12   2  GROUP BY pair,trend,gatt,gattn
22:41:12   3  ORDER BY pair,trend,gatt,gattn
22:41:12   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
eur_usd 	-1 nup nup 7.6415E-06	    2951
eur_usd 	-1 nup up  -.00602513	    3600
eur_usd 	-1 up  nup .006086058	    3484
eur_usd 	-1			       0
eur_usd 	 1 nup nup -.00009725	    2987
eur_usd 	 1 nup up  -.00626424	    3356
eur_usd 	 1 up  nup .006596746	    3680
eur_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
22:41:12 SQL> 
22:41:12 SQL> -- rpt
22:41:12 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
eur_usd 2010-12-20 22:35:00

Elapsed: 00:00:00.01
22:41:12 SQL> 
22:41:12 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.04
22:41:12 SQL> CREATE TABLE modsrc COMPRESS AS
22:41:12   2  SELECT
22:41:12   3  pair
22:41:12   4  ,ydate
22:41:12   5  ,prdate
22:41:12   6  ,trend
22:41:12   7  ,g8
22:41:12   8  ,gatt
22:41:12   9  ,gattn
22:41:12  10  FROM q15
22:41:12  11  /

Table created.

Elapsed: 00:00:00.08
22:41:12 SQL> 
22:41:12 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
22:41:12 SQL> 
22:41:12 SQL> -- rpt
22:41:12 SQL> 
22:41:12 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20538

Elapsed: 00:00:00.33
22:41:12 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20154

Elapsed: 00:00:00.01
22:41:12 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20154

Elapsed: 00:00:00.01
22:41:12 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20154

Elapsed: 00:00:00.00
22:41:12 SQL> 
22:41:12 SQL> DROP   TABLE eur_ms10 ;

Table dropped.

Elapsed: 00:00:00.03
22:41:12 SQL> CREATE TABLE eur_ms10 COMPRESS AS
22:41:12   2  SELECT
22:41:12   3  ydate
22:41:12   4  ,trend eur_trend
22:41:12   5  ,g8    eur_g8
22:41:12   6  ,gatt  eur_gatt
22:41:12   7  ,gattn eur_gattn
22:41:12   8  FROM modsrc
22:41:12   9  /

Table created.

Elapsed: 00:00:00.07
22:41:12 SQL> 
22:41:12 SQL> ANALYZE TABLE eur_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
22:41:13 SQL> 
22:41:13 SQL> -- rpt
22:41:13 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-14 05:00:01 2010-12-20 14:55:00	10023	  -.0218     .02165
	-1 2010-09-14 04:55:01 2010-12-20 22:35:00	10035	 -.02085      .0196

Elapsed: 00:00:00.02
22:41:13 SQL> SELECT eur_trend,MIN(ydate),MAX(ydate),COUNT(eur_trend),MIN(eur_g8),MAX(eur_g8)FROM eur_ms10 GROUP BY eur_trend;

 EUR_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(EUR_TREND) MIN(EUR_G8) MAX(EUR_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-14 05:00:01 2010-12-20 14:55:00	      10024	 -.0218      .02165
	-1 2010-09-14 04:55:01 2010-12-20 22:35:00	      10130	-.02085       .0196

Elapsed: 00:00:00.01
22:41:13 SQL> 
22:41:13 SQL> -- I need a copy of q15 attributes
22:41:13 SQL> 
22:41:13 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.03
22:41:13 SQL> CREATE TABLE eur_att COMPRESS AS
22:41:13   2  SELECT
22:41:13   3  ydate
22:41:13   4  ,att00 eur_att00
22:41:13   5  ,att01 eur_att01
22:41:13   6  ,att02 eur_att02
22:41:13   7  ,att03 eur_att03
22:41:13   8  ,att04 eur_att04
22:41:13   9  ,att05 eur_att05
22:41:13  10  ,att06 eur_att06
22:41:13  11  ,att07 eur_att07
22:41:13  12  ,att08 eur_att08
22:41:13  13  ,att09 eur_att09
22:41:13  14  ,att10 eur_att10
22:41:13  15  ,att11 eur_att11
22:41:13  16  ,att12 eur_att12
22:41:13  17  ,att13 eur_att13
22:41:13  18  ,att14 eur_att14
22:41:13  19  ,att15 eur_att15
22:41:13  20  ,att16 eur_att16
22:41:13  21  ,att17 eur_att17
22:41:13  22  ,att18 eur_att18
22:41:13  23  ,att19 eur_att19
22:41:13  24  ,att20 eur_att20
22:41:13  25  ,att21 eur_att21
22:41:13  26  ,att22 eur_att22
22:41:13  27  ,att23 eur_att23
22:41:13  28  ,att24 eur_att24
22:41:13  29  ,att25 eur_att25
22:41:13  30  ,att26 eur_att26
22:41:13  31  ,att27 eur_att27
22:41:13  32  ,att28 eur_att28
22:41:13  33  ,att29 eur_att29
22:41:13  34  ,att30 eur_att30
22:41:13  35  ,att31 eur_att31
22:41:13  36  ,att32 eur_att32
22:41:13  37  ,att33 eur_att33
22:41:13  38  ,att34 eur_att34
22:41:13  39  ,att35 eur_att35
22:41:13  40  ,att36 eur_att36
22:41:13  41  FROM q15
22:41:13  42  /

Table created.

Elapsed: 00:00:00.15
22:41:13 SQL> 
22:41:13 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
22:41:13 SQL> 
22:41:13 SQL> -- rpt
22:41:13 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     20154

Elapsed: 00:00:00.01
22:41:13 SQL> 
22:41:13 SQL> --
22:41:13 SQL> -- aud10.sql
22:41:13 SQL> --
22:41:13 SQL> 
22:41:13 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:41:13 SQL> 
22:41:13 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.35
22:41:14 SQL> 
22:41:14 SQL> -- I created di5min here:
22:41:14 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:41:14 SQL> 
22:41:14 SQL> CREATE OR REPLACE VIEW q11 AS
22:41:14   2  SELECT
22:41:14   3  pair
22:41:14   4  ,ydate
22:41:14   5  ,prdate
22:41:14   6  ,rownum rnum -- acts as t in my time-series
22:41:14   7  ,clse
22:41:14   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
22:41:14   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
22:41:14  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
22:41:14  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
22:41:14  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
22:41:14  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
22:41:14  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
22:41:14  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
22:41:14  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
22:41:14  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
22:41:14  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
22:41:14  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
22:41:14  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
22:41:14  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
22:41:14  22  FROM di5min WHERE pair LIKE'%aud%'
22:41:14  23  ORDER BY ydate
22:41:14  24  /

View created.

Elapsed: 00:00:00.05
22:41:14 SQL> 
22:41:14 SQL> -- rpt
22:41:14 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
aud_usd        20535

Elapsed: 00:00:00.34
22:41:14 SQL> 
22:41:14 SQL> -- Calc deltas and gains
22:41:14 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.23
22:41:14 SQL> 
22:41:14 SQL> CREATE TABLE q13 COMPRESS AS
22:41:14   2  SELECT
22:41:14   3  pair
22:41:14   4  ,ydate
22:41:14   5  ,prdate
22:41:14   6  ,rnum
22:41:14   7  ,ld8
22:41:14   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
22:41:14   9  -- step by 2
22:41:14  10  ,clse-lg6  d06
22:41:14  11  ,lg6 -lg8  d68
22:41:14  12  ,lg8 -lg10 d810
22:41:14  13  ,lg10-lg12 d1012
22:41:14  14  ,lg12-lg14 d1214
22:41:14  15  ,lg14-lg16 d1416
22:41:14  16  ,lg16-lg18 d1618
22:41:14  17  -- step by 4
22:41:14  18  ,lg6 -lg10 d610
22:41:14  19  ,lg8 -lg12 d812
22:41:14  20  ,lg10-lg14 d1014
22:41:14  21  ,lg12-lg16 d1216
22:41:14  22  --
22:41:14  23  ,ABS(clse-lg6 )dc6
22:41:14  24  ,ABS(clse-lg8 )dc8
22:41:14  25  ,ABS(clse-lg10)dc10
22:41:14  26  ,ABS(clse-lg12)dc12
22:41:14  27  ,ABS(clse-lg14)dc14
22:41:14  28  ,ABS(clse-lg16)dc16
22:41:14  29  ,ABS(clse-lg18)dc18
22:41:14  30  ,ABS(clse-lg20)dc20
22:41:14  31  ,ABS(clse-lg22)dc22
22:41:14  32  ,(ld8-clse) ug8
22:41:14  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:41:14  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:41:14  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:41:14  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:41:14  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:41:14  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:41:14  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:41:14  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
22:41:14  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
22:41:14  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
22:41:14  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
22:41:14  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
22:41:14  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
22:41:14  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:41:14  47  ,0+TO_CHAR(ydate,'D')d
22:41:14  48  ,0+TO_CHAR(ydate,'W')w
22:41:14  49  -- mpm stands for minutes-past-midnight:
22:41:14  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:41:14  51  FROM q11
22:41:14  52  -- I dont want any NULL values from the LAG() functions:
22:41:14  53  WHERE lg32 > 0
22:41:14  54  ORDER BY pair,ydate
22:41:14  55  /

Table created.

Elapsed: 00:00:01.65
22:41:16 SQL> 
22:41:16 SQL> -- rpt
22:41:16 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	   10509
	-1	    9642

Elapsed: 00:00:00.03
22:41:16 SQL> 
22:41:16 SQL> -- Calc gains and ntiles
22:41:16 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.13
22:41:16 SQL> CREATE TABLE q15 COMPRESS AS
22:41:16   2  SELECT
22:41:16   3  pair
22:41:16   4  ,ydate
22:41:16   5  ,prdate -- Should be unique
22:41:16   6  ,trend -- +1 or -1
22:41:16   7  -- Use NTILE() to derive some attributes
22:41:16   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
22:41:16   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
22:41:16  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
22:41:16  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
22:41:16  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
22:41:16  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
22:41:16  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
22:41:16  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
22:41:16  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
22:41:16  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
22:41:16  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
22:41:16  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
22:41:16  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
22:41:16  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
22:41:16  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
22:41:16  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
22:41:16  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
22:41:16  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
22:41:16  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
22:41:16  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
22:41:16  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
22:41:16  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
22:41:16  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
22:41:16  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
22:41:16  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
22:41:16  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
22:41:16  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
22:41:16  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
22:41:16  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
22:41:16  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
22:41:16  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
22:41:16  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
22:41:16  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
22:41:16  41  ,hh    att32
22:41:16  42  ,d     att33
22:41:16  43  ,w     att34
22:41:16  44  ,mpm   att35
22:41:16  45  ,trend att36
22:41:16  46  ,ug8 g8
22:41:16  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
22:41:16  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
22:41:16  49  FROM q13
22:41:16  50  ORDER BY pair,ydate
22:41:16  51  /

Table created.

Elapsed: 00:00:05.33
22:41:21 SQL> 
22:41:21 SQL> -- rpt
22:41:21 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
22:41:21   2  GROUP BY pair,trend,gatt,gattn
22:41:21   3  ORDER BY pair,trend,gatt,gattn
22:41:21   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
aud_usd 	-1 nup nup .000015409	    3618
aud_usd 	-1 nup up  -.00519991	    2596
aud_usd 	-1 up  nup  .00527164	    3415
aud_usd 	-1			       0
aud_usd 	 1 nup nup .000013539	    3981
aud_usd 	 1 nup up  -.00495997	    3189
aud_usd 	 1 up  nup .005221245	    3256
aud_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
22:41:21 SQL> 
22:41:21 SQL> -- rpt
22:41:21 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
aud_usd 2010-12-20 22:35:00

Elapsed: 00:00:00.02
22:41:21 SQL> 
22:41:21 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.14
22:41:22 SQL> CREATE TABLE modsrc COMPRESS AS
22:41:22   2  SELECT
22:41:22   3  pair
22:41:22   4  ,ydate
22:41:22   5  ,prdate
22:41:22   6  ,trend
22:41:22   7  ,g8
22:41:22   8  ,gatt
22:41:22   9  ,gattn
22:41:22  10  FROM q15
22:41:22  11  /

Table created.

Elapsed: 00:00:00.08
22:41:22 SQL> 
22:41:22 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
22:41:22 SQL> 
22:41:22 SQL> -- rpt
22:41:22 SQL> 
22:41:22 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20535

Elapsed: 00:00:00.34
22:41:22 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20151

Elapsed: 00:00:00.01
22:41:22 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20151

Elapsed: 00:00:00.00
22:41:22 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20151

Elapsed: 00:00:00.00
22:41:22 SQL> 
22:41:22 SQL> DROP   TABLE aud_ms10 ;

Table dropped.

Elapsed: 00:00:00.17
22:41:22 SQL> CREATE TABLE aud_ms10 COMPRESS AS
22:41:22   2  SELECT
22:41:22   3  ydate
22:41:22   4  ,trend aud_trend
22:41:22   5  ,g8    aud_g8
22:41:22   6  ,gatt  aud_gatt
22:41:22   7  ,gattn aud_gattn
22:41:22   8  FROM modsrc
22:41:22   9  /

Table created.

Elapsed: 00:00:00.08
22:41:23 SQL> 
22:41:23 SQL> ANALYZE TABLE aud_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
22:41:23 SQL> 
22:41:23 SQL> -- rpt
22:41:23 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-14 07:10:01 2010-12-20 21:45:00	10426	  -.0203      .0136
	-1 2010-09-14 04:55:01 2010-12-20 22:35:00	 9629	  -.0196      .0148

Elapsed: 00:00:00.02
22:41:23 SQL> SELECT aud_trend,MIN(ydate),MAX(ydate),COUNT(aud_trend),MIN(aud_g8),MAX(aud_g8)FROM aud_ms10 GROUP BY aud_trend;

 AUD_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(AUD_TREND) MIN(AUD_G8) MAX(AUD_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-14 07:10:01 2010-12-20 21:45:00	      10509	 -.0203       .0136
	-1 2010-09-14 04:55:01 2010-12-20 22:35:00	       9642	 -.0196       .0148

Elapsed: 00:00:00.02
22:41:23 SQL> 
22:41:23 SQL> -- I need a copy of q15 attributes
22:41:23 SQL> 
22:41:23 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.03
22:41:23 SQL> CREATE TABLE aud_att COMPRESS AS
22:41:23   2  SELECT
22:41:23   3  ydate
22:41:23   4  ,att00 aud_att00
22:41:23   5  ,att01 aud_att01
22:41:23   6  ,att02 aud_att02
22:41:23   7  ,att03 aud_att03
22:41:23   8  ,att04 aud_att04
22:41:23   9  ,att05 aud_att05
22:41:23  10  ,att06 aud_att06
22:41:23  11  ,att07 aud_att07
22:41:23  12  ,att08 aud_att08
22:41:23  13  ,att09 aud_att09
22:41:23  14  ,att10 aud_att10
22:41:23  15  ,att11 aud_att11
22:41:23  16  ,att12 aud_att12
22:41:23  17  ,att13 aud_att13
22:41:23  18  ,att14 aud_att14
22:41:23  19  ,att15 aud_att15
22:41:23  20  ,att16 aud_att16
22:41:23  21  ,att17 aud_att17
22:41:23  22  ,att18 aud_att18
22:41:23  23  ,att19 aud_att19
22:41:23  24  ,att20 aud_att20
22:41:23  25  ,att21 aud_att21
22:41:23  26  ,att22 aud_att22
22:41:23  27  ,att23 aud_att23
22:41:23  28  ,att24 aud_att24
22:41:23  29  ,att25 aud_att25
22:41:23  30  ,att26 aud_att26
22:41:23  31  ,att27 aud_att27
22:41:23  32  ,att28 aud_att28
22:41:23  33  ,att29 aud_att29
22:41:23  34  ,att30 aud_att30
22:41:23  35  ,att31 aud_att31
22:41:23  36  ,att32 aud_att32
22:41:23  37  ,att33 aud_att33
22:41:23  38  ,att34 aud_att34
22:41:23  39  ,att35 aud_att35
22:41:23  40  ,att36 aud_att36
22:41:23  41  FROM q15
22:41:23  42  /

Table created.

Elapsed: 00:00:00.17
22:41:23 SQL> 
22:41:23 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
22:41:23 SQL> 
22:41:23 SQL> -- rpt
22:41:23 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     20151

Elapsed: 00:00:00.00
22:41:23 SQL> 
22:41:23 SQL> --
22:41:23 SQL> -- gbp10.sql
22:41:23 SQL> --
22:41:23 SQL> 
22:41:23 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:41:23 SQL> 
22:41:23 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.40
22:41:24 SQL> 
22:41:24 SQL> -- I created di5min here:
22:41:24 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:41:24 SQL> 
22:41:24 SQL> CREATE OR REPLACE VIEW q11 AS
22:41:24   2  SELECT
22:41:24   3  pair
22:41:24   4  ,ydate
22:41:24   5  ,prdate
22:41:24   6  ,rownum rnum -- acts as t in my time-series
22:41:24   7  ,clse
22:41:24   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
22:41:24   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
22:41:24  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
22:41:24  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
22:41:24  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
22:41:24  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
22:41:24  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
22:41:24  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
22:41:24  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
22:41:24  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
22:41:24  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
22:41:24  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
22:41:24  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
22:41:24  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
22:41:24  22  FROM di5min WHERE pair LIKE'%gbp%'
22:41:24  23  ORDER BY ydate
22:41:24  24  /

View created.

Elapsed: 00:00:00.07
22:41:24 SQL> 
22:41:24 SQL> -- rpt
22:41:24 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
gbp_usd        20537

Elapsed: 00:00:00.35
22:41:24 SQL> 
22:41:24 SQL> -- Calc deltas and gains
22:41:24 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.24
22:41:24 SQL> 
22:41:24 SQL> CREATE TABLE q13 COMPRESS AS
22:41:24   2  SELECT
22:41:24   3  pair
22:41:24   4  ,ydate
22:41:24   5  ,prdate
22:41:24   6  ,rnum
22:41:24   7  ,ld8
22:41:24   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
22:41:24   9  -- step by 2
22:41:24  10  ,clse-lg6  d06
22:41:24  11  ,lg6 -lg8  d68
22:41:24  12  ,lg8 -lg10 d810
22:41:24  13  ,lg10-lg12 d1012
22:41:24  14  ,lg12-lg14 d1214
22:41:24  15  ,lg14-lg16 d1416
22:41:24  16  ,lg16-lg18 d1618
22:41:24  17  -- step by 4
22:41:24  18  ,lg6 -lg10 d610
22:41:24  19  ,lg8 -lg12 d812
22:41:24  20  ,lg10-lg14 d1014
22:41:24  21  ,lg12-lg16 d1216
22:41:24  22  --
22:41:24  23  ,ABS(clse-lg6 )dc6
22:41:24  24  ,ABS(clse-lg8 )dc8
22:41:24  25  ,ABS(clse-lg10)dc10
22:41:24  26  ,ABS(clse-lg12)dc12
22:41:24  27  ,ABS(clse-lg14)dc14
22:41:24  28  ,ABS(clse-lg16)dc16
22:41:24  29  ,ABS(clse-lg18)dc18
22:41:24  30  ,ABS(clse-lg20)dc20
22:41:24  31  ,ABS(clse-lg22)dc22
22:41:24  32  ,(ld8-clse) ug8
22:41:24  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:41:24  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:41:24  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:41:24  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:41:24  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:41:24  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:41:24  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:41:24  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
22:41:24  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
22:41:24  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
22:41:24  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
22:41:24  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
22:41:24  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
22:41:24  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:41:24  47  ,0+TO_CHAR(ydate,'D')d
22:41:24  48  ,0+TO_CHAR(ydate,'W')w
22:41:24  49  -- mpm stands for minutes-past-midnight:
22:41:24  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:41:24  51  FROM q11
22:41:24  52  -- I dont want any NULL values from the LAG() functions:
22:41:24  53  WHERE lg32 > 0
22:41:24  54  ORDER BY pair,ydate
22:41:24  55  /

Table created.

Elapsed: 00:00:01.68
22:41:26 SQL> 
22:41:26 SQL> -- rpt
22:41:26 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9909
	-1	   10244

Elapsed: 00:00:00.03
22:41:26 SQL> 
22:41:26 SQL> -- Calc gains and ntiles
22:41:26 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.16
22:41:26 SQL> CREATE TABLE q15 COMPRESS AS
22:41:26   2  SELECT
22:41:26   3  pair
22:41:26   4  ,ydate
22:41:26   5  ,prdate -- Should be unique
22:41:26   6  ,trend -- +1 or -1
22:41:26   7  -- Use NTILE() to derive some attributes
22:41:26   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
22:41:26   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
22:41:26  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
22:41:26  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
22:41:26  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
22:41:26  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
22:41:26  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
22:41:26  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
22:41:26  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
22:41:26  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
22:41:26  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
22:41:26  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
22:41:26  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
22:41:26  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
22:41:26  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
22:41:26  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
22:41:26  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
22:41:26  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
22:41:26  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
22:41:26  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
22:41:26  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
22:41:26  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
22:41:26  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
22:41:26  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
22:41:26  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
22:41:26  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
22:41:26  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
22:41:26  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
22:41:26  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
22:41:26  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
22:41:26  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
22:41:26  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
22:41:26  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
22:41:26  41  ,hh    att32
22:41:26  42  ,d     att33
22:41:26  43  ,w     att34
22:41:26  44  ,mpm   att35
22:41:26  45  ,trend att36
22:41:26  46  ,ug8 g8
22:41:26  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
22:41:26  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
22:41:26  49  FROM q13
22:41:26  50  ORDER BY pair,ydate
22:41:26  51  /

Table created.

Elapsed: 00:00:05.49
22:41:32 SQL> 
22:41:32 SQL> -- rpt
22:41:32 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
22:41:32   2  GROUP BY pair,trend,gatt,gattn
22:41:32   3  ORDER BY pair,trend,gatt,gattn
22:41:32   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
gbp_usd 	-1 nup nup .000079539	    3762
gbp_usd 	-1 nup up  -.00589459	    3177
gbp_usd 	-1 up  nup .005777751	    3217
gbp_usd 	-1			       0
gbp_usd 	 1 nup nup -.00007623	    3650
gbp_usd 	 1 nup up  -.00552005	    3205
gbp_usd 	 1 up  nup .006213854	    3046
gbp_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.05
22:41:32 SQL> 
22:41:32 SQL> -- rpt
22:41:32 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
gbp_usd 2010-12-20 22:35:00

Elapsed: 00:00:00.01
22:41:32 SQL> 
22:41:32 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
22:41:32 SQL> CREATE TABLE modsrc COMPRESS AS
22:41:32   2  SELECT
22:41:32   3  pair
22:41:32   4  ,ydate
22:41:32   5  ,prdate
22:41:32   6  ,trend
22:41:32   7  ,g8
22:41:32   8  ,gatt
22:41:32   9  ,gattn
22:41:32  10  FROM q15
22:41:32  11  /

Table created.

Elapsed: 00:00:00.09
22:41:32 SQL> 
22:41:32 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
22:41:32 SQL> 
22:41:32 SQL> -- rpt
22:41:32 SQL> 
22:41:32 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20537

Elapsed: 00:00:00.34
22:41:33 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20153

Elapsed: 00:00:00.00
22:41:33 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20153

Elapsed: 00:00:00.01
22:41:33 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20153

Elapsed: 00:00:00.00
22:41:33 SQL> 
22:41:33 SQL> DROP   TABLE gbp_ms10 ;

Table dropped.

Elapsed: 00:00:00.05
22:41:33 SQL> CREATE TABLE gbp_ms10 COMPRESS AS
22:41:33   2  SELECT
22:41:33   3  ydate
22:41:33   4  ,trend gbp_trend
22:41:33   5  ,g8    gbp_g8
22:41:33   6  ,gatt  gbp_gatt
22:41:33   7  ,gattn gbp_gattn
22:41:33   8  FROM modsrc
22:41:33   9  /

Table created.

Elapsed: 00:00:00.08
22:41:33 SQL> 
22:41:33 SQL> ANALYZE TABLE gbp_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.73
22:41:34 SQL> 
22:41:34 SQL> -- rpt
22:41:34 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-14 07:35:01 2010-12-20 15:00:00	 9901	  -.0231       .019
	-1 2010-09-14 04:55:01 2010-12-20 22:35:00	10156	    -.02      .0204

Elapsed: 00:00:00.02
22:41:34 SQL> SELECT gbp_trend,MIN(ydate),MAX(ydate),COUNT(gbp_trend),MIN(gbp_g8),MAX(gbp_g8)FROM gbp_ms10 GROUP BY gbp_trend;

 GBP_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(GBP_TREND) MIN(GBP_G8) MAX(GBP_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-14 07:35:01 2010-12-20 15:00:00	       9909	 -.0231        .019
	-1 2010-09-14 04:55:01 2010-12-20 22:35:00	      10244	   -.02       .0204

Elapsed: 00:00:00.02
22:41:34 SQL> 
22:41:34 SQL> -- I need a copy of q15 attributes
22:41:34 SQL> 
22:41:34 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.04
22:41:34 SQL> CREATE TABLE gbp_att COMPRESS AS
22:41:34   2  SELECT
22:41:34   3  ydate
22:41:34   4  ,att00 gbp_att00
22:41:34   5  ,att01 gbp_att01
22:41:34   6  ,att02 gbp_att02
22:41:34   7  ,att03 gbp_att03
22:41:34   8  ,att04 gbp_att04
22:41:34   9  ,att05 gbp_att05
22:41:34  10  ,att06 gbp_att06
22:41:34  11  ,att07 gbp_att07
22:41:34  12  ,att08 gbp_att08
22:41:34  13  ,att09 gbp_att09
22:41:34  14  ,att10 gbp_att10
22:41:34  15  ,att11 gbp_att11
22:41:34  16  ,att12 gbp_att12
22:41:34  17  ,att13 gbp_att13
22:41:34  18  ,att14 gbp_att14
22:41:34  19  ,att15 gbp_att15
22:41:34  20  ,att16 gbp_att16
22:41:34  21  ,att17 gbp_att17
22:41:34  22  ,att18 gbp_att18
22:41:34  23  ,att19 gbp_att19
22:41:34  24  ,att20 gbp_att20
22:41:34  25  ,att21 gbp_att21
22:41:34  26  ,att22 gbp_att22
22:41:34  27  ,att23 gbp_att23
22:41:34  28  ,att24 gbp_att24
22:41:34  29  ,att25 gbp_att25
22:41:34  30  ,att26 gbp_att26
22:41:34  31  ,att27 gbp_att27
22:41:34  32  ,att28 gbp_att28
22:41:34  33  ,att29 gbp_att29
22:41:34  34  ,att30 gbp_att30
22:41:34  35  ,att31 gbp_att31
22:41:34  36  ,att32 gbp_att32
22:41:34  37  ,att33 gbp_att33
22:41:34  38  ,att34 gbp_att34
22:41:34  39  ,att35 gbp_att35
22:41:34  40  ,att36 gbp_att36
22:41:34  41  FROM q15
22:41:34  42  /

Table created.

Elapsed: 00:00:00.19
22:41:34 SQL> 
22:41:34 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
22:41:34 SQL> 
22:41:34 SQL> -- rpt
22:41:34 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     20153

Elapsed: 00:00:00.00
22:41:34 SQL> 
22:41:34 SQL> --
22:41:34 SQL> -- jpy10.sql
22:41:34 SQL> --
22:41:34 SQL> 
22:41:34 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:41:34 SQL> 
22:41:34 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.32
22:41:35 SQL> 
22:41:35 SQL> -- I created di5min here:
22:41:35 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:41:35 SQL> 
22:41:35 SQL> CREATE OR REPLACE VIEW q11 AS
22:41:35   2  SELECT
22:41:35   3  pair
22:41:35   4  ,ydate
22:41:35   5  ,prdate
22:41:35   6  ,rownum rnum -- acts as t in my time-series
22:41:35   7  ,clse
22:41:35   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
22:41:35   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
22:41:35  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
22:41:35  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
22:41:35  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
22:41:35  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
22:41:35  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
22:41:35  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
22:41:35  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
22:41:35  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
22:41:35  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
22:41:35  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
22:41:35  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
22:41:35  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
22:41:35  22  FROM di5min WHERE pair LIKE'%jpy%'
22:41:35  23  ORDER BY ydate
22:41:35  24  /

View created.

Elapsed: 00:00:00.05
22:41:35 SQL> 
22:41:35 SQL> -- rpt
22:41:35 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_jpy        20539

Elapsed: 00:00:00.35
22:41:35 SQL> 
22:41:35 SQL> -- Calc deltas and gains
22:41:35 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.24
22:41:35 SQL> 
22:41:35 SQL> CREATE TABLE q13 COMPRESS AS
22:41:35   2  SELECT
22:41:35   3  pair
22:41:35   4  ,ydate
22:41:35   5  ,prdate
22:41:35   6  ,rnum
22:41:35   7  ,ld8
22:41:35   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
22:41:35   9  -- step by 2
22:41:35  10  ,clse-lg6  d06
22:41:35  11  ,lg6 -lg8  d68
22:41:35  12  ,lg8 -lg10 d810
22:41:35  13  ,lg10-lg12 d1012
22:41:35  14  ,lg12-lg14 d1214
22:41:35  15  ,lg14-lg16 d1416
22:41:35  16  ,lg16-lg18 d1618
22:41:35  17  -- step by 4
22:41:35  18  ,lg6 -lg10 d610
22:41:35  19  ,lg8 -lg12 d812
22:41:35  20  ,lg10-lg14 d1014
22:41:35  21  ,lg12-lg16 d1216
22:41:35  22  --
22:41:35  23  ,ABS(clse-lg6 )dc6
22:41:35  24  ,ABS(clse-lg8 )dc8
22:41:35  25  ,ABS(clse-lg10)dc10
22:41:35  26  ,ABS(clse-lg12)dc12
22:41:35  27  ,ABS(clse-lg14)dc14
22:41:35  28  ,ABS(clse-lg16)dc16
22:41:35  29  ,ABS(clse-lg18)dc18
22:41:35  30  ,ABS(clse-lg20)dc20
22:41:35  31  ,ABS(clse-lg22)dc22
22:41:35  32  ,(ld8-clse) ug8
22:41:35  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:41:35  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:41:35  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:41:35  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:41:35  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:41:35  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:41:35  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:41:35  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
22:41:35  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
22:41:35  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
22:41:35  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
22:41:35  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
22:41:35  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
22:41:35  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:41:35  47  ,0+TO_CHAR(ydate,'D')d
22:41:35  48  ,0+TO_CHAR(ydate,'W')w
22:41:35  49  -- mpm stands for minutes-past-midnight:
22:41:35  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:41:35  51  FROM q11
22:41:35  52  -- I dont want any NULL values from the LAG() functions:
22:41:35  53  WHERE lg32 > 0
22:41:35  54  ORDER BY pair,ydate
22:41:35  55  /

Table created.

Elapsed: 00:00:01.79
22:41:37 SQL> 
22:41:37 SQL> -- rpt
22:41:37 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9440
	-1	   10715

Elapsed: 00:00:00.03
22:41:37 SQL> 
22:41:37 SQL> -- Calc gains and ntiles
22:41:37 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.18
22:41:37 SQL> CREATE TABLE q15 COMPRESS AS
22:41:37   2  SELECT
22:41:37   3  pair
22:41:37   4  ,ydate
22:41:37   5  ,prdate -- Should be unique
22:41:37   6  ,trend -- +1 or -1
22:41:37   7  -- Use NTILE() to derive some attributes
22:41:37   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
22:41:37   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
22:41:37  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
22:41:37  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
22:41:37  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
22:41:37  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
22:41:37  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
22:41:37  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
22:41:37  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
22:41:37  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
22:41:37  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
22:41:37  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
22:41:37  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
22:41:37  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
22:41:37  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
22:41:37  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
22:41:37  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
22:41:37  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
22:41:37  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
22:41:37  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
22:41:37  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
22:41:37  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
22:41:37  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
22:41:37  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
22:41:37  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
22:41:37  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
22:41:37  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
22:41:37  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
22:41:37  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
22:41:37  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
22:41:37  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
22:41:37  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
22:41:37  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
22:41:37  41  ,hh    att32
22:41:37  42  ,d     att33
22:41:37  43  ,w     att34
22:41:37  44  ,mpm   att35
22:41:37  45  ,trend att36
22:41:37  46  ,ug8 g8
22:41:37  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
22:41:37  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
22:41:37  49  FROM q13
22:41:37  50  ORDER BY pair,ydate
22:41:37  51  /

Table created.

Elapsed: 00:00:05.43
22:41:43 SQL> 
22:41:43 SQL> -- rpt
22:41:43 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
22:41:43   2  GROUP BY pair,trend,gatt,gattn
22:41:43   3  ORDER BY pair,trend,gatt,gattn
22:41:43   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_jpy 	-1 nup nup	    0	     165
usd_jpy 	-1 nup up  -.18652585	    5338
usd_jpy 	-1 up  nup .206938617	    5148
usd_jpy 	-1			       0
usd_jpy 	 1 nup nup	    0	     119
usd_jpy 	 1 nup up  -.18828932	    4998
usd_jpy 	 1 up  nup .213079702	    4291
usd_jpy 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
22:41:43 SQL> 
22:41:43 SQL> -- rpt
22:41:43 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_jpy 2010-12-20 22:40:00

Elapsed: 00:00:00.01
22:41:43 SQL> 
22:41:43 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.16
22:41:43 SQL> CREATE TABLE modsrc COMPRESS AS
22:41:43   2  SELECT
22:41:43   3  pair
22:41:43   4  ,ydate
22:41:43   5  ,prdate
22:41:43   6  ,trend
22:41:43   7  ,g8
22:41:43   8  ,gatt
22:41:43   9  ,gattn
22:41:43  10  FROM q15
22:41:43  11  /

Table created.

Elapsed: 00:00:00.08
22:41:43 SQL> 
22:41:43 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
22:41:43 SQL> 
22:41:43 SQL> -- rpt
22:41:43 SQL> 
22:41:43 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20539

Elapsed: 00:00:00.34
22:41:44 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20155

Elapsed: 00:00:00.00
22:41:44 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20155

Elapsed: 00:00:00.01
22:41:44 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20155

Elapsed: 00:00:00.00
22:41:44 SQL> 
22:41:44 SQL> DROP   TABLE jpy_ms10 ;

Table dropped.

Elapsed: 00:00:00.04
22:41:44 SQL> CREATE TABLE jpy_ms10 COMPRESS AS
22:41:44   2  SELECT
22:41:44   3  ydate
22:41:44   4  ,trend jpy_trend
22:41:44   5  ,g8    jpy_g8
22:41:44   6  ,gatt  jpy_gatt
22:41:44   7  ,gattn jpy_gattn
22:41:44   8  FROM modsrc
22:41:44   9  /

Table created.

Elapsed: 00:00:00.07
22:41:44 SQL> 
22:41:44 SQL> ANALYZE TABLE jpy_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
22:41:44 SQL> 
22:41:44 SQL> -- rpt
22:41:44 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-14 08:50:01 2010-12-20 22:40:00	 9408	  -1.185       2.42
	-1 2010-09-14 04:55:01 2010-12-20 21:25:00	10651	 -1.0575       2.49

Elapsed: 00:00:00.01
22:41:44 SQL> SELECT jpy_trend,MIN(ydate),MAX(ydate),COUNT(jpy_trend),MIN(jpy_g8),MAX(jpy_g8)FROM jpy_ms10 GROUP BY jpy_trend;

 JPY_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(JPY_TREND) MIN(JPY_G8) MAX(JPY_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-14 08:50:01 2010-12-20 22:40:00	       9440	 -1.185        2.42
	-1 2010-09-14 04:55:01 2010-12-20 21:25:00	      10715	-1.0575        2.49

Elapsed: 00:00:00.02
22:41:44 SQL> 
22:41:44 SQL> -- I need a copy of q15 attributes
22:41:44 SQL> 
22:41:44 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.17
22:41:44 SQL> CREATE TABLE jpy_att COMPRESS AS
22:41:44   2  SELECT
22:41:44   3  ydate
22:41:44   4  ,att00 jpy_att00
22:41:44   5  ,att01 jpy_att01
22:41:44   6  ,att02 jpy_att02
22:41:44   7  ,att03 jpy_att03
22:41:44   8  ,att04 jpy_att04
22:41:44   9  ,att05 jpy_att05
22:41:44  10  ,att06 jpy_att06
22:41:44  11  ,att07 jpy_att07
22:41:44  12  ,att08 jpy_att08
22:41:44  13  ,att09 jpy_att09
22:41:44  14  ,att10 jpy_att10
22:41:44  15  ,att11 jpy_att11
22:41:44  16  ,att12 jpy_att12
22:41:44  17  ,att13 jpy_att13
22:41:44  18  ,att14 jpy_att14
22:41:44  19  ,att15 jpy_att15
22:41:44  20  ,att16 jpy_att16
22:41:44  21  ,att17 jpy_att17
22:41:44  22  ,att18 jpy_att18
22:41:44  23  ,att19 jpy_att19
22:41:44  24  ,att20 jpy_att20
22:41:44  25  ,att21 jpy_att21
22:41:44  26  ,att22 jpy_att22
22:41:44  27  ,att23 jpy_att23
22:41:44  28  ,att24 jpy_att24
22:41:44  29  ,att25 jpy_att25
22:41:44  30  ,att26 jpy_att26
22:41:44  31  ,att27 jpy_att27
22:41:44  32  ,att28 jpy_att28
22:41:44  33  ,att29 jpy_att29
22:41:44  34  ,att30 jpy_att30
22:41:44  35  ,att31 jpy_att31
22:41:44  36  ,att32 jpy_att32
22:41:44  37  ,att33 jpy_att33
22:41:44  38  ,att34 jpy_att34
22:41:44  39  ,att35 jpy_att35
22:41:44  40  ,att36 jpy_att36
22:41:44  41  FROM q15
22:41:44  42  /

Table created.

Elapsed: 00:00:00.18
22:41:44 SQL> 
22:41:44 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
22:41:45 SQL> 
22:41:45 SQL> -- rpt
22:41:45 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     20155

Elapsed: 00:00:00.00
22:41:45 SQL> 
22:41:45 SQL> --
22:41:45 SQL> -- cad10.sql
22:41:45 SQL> --
22:41:45 SQL> 
22:41:45 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:41:45 SQL> 
22:41:45 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.31
22:41:45 SQL> 
22:41:45 SQL> -- I created di5min here:
22:41:45 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:41:45 SQL> 
22:41:45 SQL> CREATE OR REPLACE VIEW q11 AS
22:41:45   2  SELECT
22:41:45   3  pair
22:41:45   4  ,ydate
22:41:45   5  ,prdate
22:41:45   6  ,rownum rnum -- acts as t in my time-series
22:41:45   7  ,clse
22:41:45   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
22:41:45   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
22:41:45  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
22:41:45  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
22:41:45  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
22:41:45  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
22:41:45  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
22:41:45  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
22:41:45  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
22:41:45  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
22:41:45  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
22:41:45  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
22:41:45  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
22:41:45  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
22:41:45  22  FROM di5min WHERE pair LIKE'%cad%'
22:41:45  23  ORDER BY ydate
22:41:45  24  /

View created.

Elapsed: 00:00:00.04
22:41:45 SQL> 
22:41:45 SQL> -- rpt
22:41:45 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_cad        20534

Elapsed: 00:00:00.35
22:41:45 SQL> 
22:41:45 SQL> -- Calc deltas and gains
22:41:45 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.19
22:41:46 SQL> 
22:41:46 SQL> CREATE TABLE q13 COMPRESS AS
22:41:46   2  SELECT
22:41:46   3  pair
22:41:46   4  ,ydate
22:41:46   5  ,prdate
22:41:46   6  ,rnum
22:41:46   7  ,ld8
22:41:46   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
22:41:46   9  -- step by 2
22:41:46  10  ,clse-lg6  d06
22:41:46  11  ,lg6 -lg8  d68
22:41:46  12  ,lg8 -lg10 d810
22:41:46  13  ,lg10-lg12 d1012
22:41:46  14  ,lg12-lg14 d1214
22:41:46  15  ,lg14-lg16 d1416
22:41:46  16  ,lg16-lg18 d1618
22:41:46  17  -- step by 4
22:41:46  18  ,lg6 -lg10 d610
22:41:46  19  ,lg8 -lg12 d812
22:41:46  20  ,lg10-lg14 d1014
22:41:46  21  ,lg12-lg16 d1216
22:41:46  22  --
22:41:46  23  ,ABS(clse-lg6 )dc6
22:41:46  24  ,ABS(clse-lg8 )dc8
22:41:46  25  ,ABS(clse-lg10)dc10
22:41:46  26  ,ABS(clse-lg12)dc12
22:41:46  27  ,ABS(clse-lg14)dc14
22:41:46  28  ,ABS(clse-lg16)dc16
22:41:46  29  ,ABS(clse-lg18)dc18
22:41:46  30  ,ABS(clse-lg20)dc20
22:41:46  31  ,ABS(clse-lg22)dc22
22:41:46  32  ,(ld8-clse) ug8
22:41:46  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:41:46  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:41:46  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:41:46  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:41:46  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:41:46  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:41:46  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:41:46  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
22:41:46  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
22:41:46  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
22:41:46  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
22:41:46  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
22:41:46  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
22:41:46  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:41:46  47  ,0+TO_CHAR(ydate,'D')d
22:41:46  48  ,0+TO_CHAR(ydate,'W')w
22:41:46  49  -- mpm stands for minutes-past-midnight:
22:41:46  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:41:46  51  FROM q11
22:41:46  52  -- I dont want any NULL values from the LAG() functions:
22:41:46  53  WHERE lg32 > 0
22:41:46  54  ORDER BY pair,ydate
22:41:46  55  /

Table created.

Elapsed: 00:00:01.67
22:41:47 SQL> 
22:41:47 SQL> -- rpt
22:41:47 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9385
	-1	   10765

Elapsed: 00:00:00.03
22:41:47 SQL> 
22:41:47 SQL> -- Calc gains and ntiles
22:41:47 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.18
22:41:47 SQL> CREATE TABLE q15 COMPRESS AS
22:41:47   2  SELECT
22:41:47   3  pair
22:41:47   4  ,ydate
22:41:47   5  ,prdate -- Should be unique
22:41:47   6  ,trend -- +1 or -1
22:41:47   7  -- Use NTILE() to derive some attributes
22:41:47   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
22:41:47   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
22:41:47  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
22:41:47  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
22:41:47  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
22:41:47  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
22:41:47  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
22:41:47  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
22:41:47  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
22:41:47  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
22:41:47  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
22:41:47  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
22:41:47  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
22:41:47  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
22:41:47  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
22:41:47  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
22:41:47  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
22:41:47  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
22:41:47  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
22:41:47  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
22:41:47  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
22:41:47  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
22:41:47  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
22:41:47  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
22:41:47  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
22:41:47  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
22:41:47  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
22:41:47  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
22:41:47  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
22:41:47  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
22:41:47  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
22:41:47  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
22:41:47  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
22:41:47  41  ,hh    att32
22:41:47  42  ,d     att33
22:41:47  43  ,w     att34
22:41:47  44  ,mpm   att35
22:41:47  45  ,trend att36
22:41:47  46  ,ug8 g8
22:41:47  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
22:41:47  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
22:41:47  49  FROM q13
22:41:47  50  ORDER BY pair,ydate
22:41:47  51  /

Table created.

Elapsed: 00:00:05.26
22:41:53 SQL> 
22:41:53 SQL> -- rpt
22:41:53 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
22:41:53   2  GROUP BY pair,trend,gatt,gattn
22:41:53   3  ORDER BY pair,trend,gatt,gattn
22:41:53   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_cad 	-1 nup nup -.00002437	    5569
usd_cad 	-1 nup up  -.00402052	    2605
usd_cad 	-1 up  nup .004686193	    2591
usd_cad 	 1 nup nup -.00009007	    4551
usd_cad 	 1 nup up  -.00422249	    2705
usd_cad 	 1 up  nup .004587088	    2033
usd_cad 	 1			       0

7 rows selected.

Elapsed: 00:00:00.03
22:41:53 SQL> 
22:41:53 SQL> -- rpt
22:41:53 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_cad 2010-12-20 22:35:00

Elapsed: 00:00:00.02
22:41:53 SQL> 
22:41:53 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.16
22:41:53 SQL> CREATE TABLE modsrc COMPRESS AS
22:41:53   2  SELECT
22:41:53   3  pair
22:41:53   4  ,ydate
22:41:53   5  ,prdate
22:41:53   6  ,trend
22:41:53   7  ,g8
22:41:53   8  ,gatt
22:41:53   9  ,gattn
22:41:53  10  FROM q15
22:41:53  11  /

Table created.

Elapsed: 00:00:00.08
22:41:53 SQL> 
22:41:53 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
22:41:53 SQL> 
22:41:53 SQL> -- rpt
22:41:53 SQL> 
22:41:53 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20534

Elapsed: 00:00:00.34
22:41:54 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20150

Elapsed: 00:00:00.01
22:41:54 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20150

Elapsed: 00:00:00.00
22:41:54 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20150

Elapsed: 00:00:00.00
22:41:54 SQL> 
22:41:54 SQL> DROP   TABLE cad_ms10 ;

Table dropped.

Elapsed: 00:00:00.12
22:41:54 SQL> CREATE TABLE cad_ms10 COMPRESS AS
22:41:54   2  SELECT
22:41:54   3  ydate
22:41:54   4  ,trend cad_trend
22:41:54   5  ,g8    cad_g8
22:41:54   6  ,gatt  cad_gatt
22:41:54   7  ,gattn cad_gattn
22:41:54   8  FROM modsrc
22:41:54   9  /

Table created.

Elapsed: 00:00:00.07
22:41:54 SQL> 
22:41:54 SQL> ANALYZE TABLE cad_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
22:41:54 SQL> 
22:41:54 SQL> -- rpt
22:41:54 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-14 04:55:01 2010-12-20 22:35:00	 9289	  -.0122      .0159
	-1 2010-09-14 07:10:01 2010-12-20 13:45:00	10765	 -.01105      .0176

Elapsed: 00:00:00.02
22:41:54 SQL> SELECT cad_trend,MIN(ydate),MAX(ydate),COUNT(cad_trend),MIN(cad_g8),MAX(cad_g8)FROM cad_ms10 GROUP BY cad_trend;

 CAD_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(CAD_TREND) MIN(CAD_G8) MAX(CAD_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-14 04:55:01 2010-12-20 22:35:00	       9385	 -.0122       .0159
	-1 2010-09-14 07:10:01 2010-12-20 13:45:00	      10765	-.01105       .0176

Elapsed: 00:00:00.02
22:41:54 SQL> 
22:41:54 SQL> -- I need a copy of q15 attributes
22:41:54 SQL> 
22:41:54 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.04
22:41:54 SQL> CREATE TABLE cad_att COMPRESS AS
22:41:54   2  SELECT
22:41:54   3  ydate
22:41:54   4  ,att00 cad_att00
22:41:54   5  ,att01 cad_att01
22:41:54   6  ,att02 cad_att02
22:41:54   7  ,att03 cad_att03
22:41:54   8  ,att04 cad_att04
22:41:54   9  ,att05 cad_att05
22:41:54  10  ,att06 cad_att06
22:41:54  11  ,att07 cad_att07
22:41:54  12  ,att08 cad_att08
22:41:54  13  ,att09 cad_att09
22:41:54  14  ,att10 cad_att10
22:41:54  15  ,att11 cad_att11
22:41:54  16  ,att12 cad_att12
22:41:54  17  ,att13 cad_att13
22:41:54  18  ,att14 cad_att14
22:41:54  19  ,att15 cad_att15
22:41:54  20  ,att16 cad_att16
22:41:54  21  ,att17 cad_att17
22:41:54  22  ,att18 cad_att18
22:41:54  23  ,att19 cad_att19
22:41:54  24  ,att20 cad_att20
22:41:54  25  ,att21 cad_att21
22:41:54  26  ,att22 cad_att22
22:41:54  27  ,att23 cad_att23
22:41:54  28  ,att24 cad_att24
22:41:54  29  ,att25 cad_att25
22:41:54  30  ,att26 cad_att26
22:41:54  31  ,att27 cad_att27
22:41:54  32  ,att28 cad_att28
22:41:54  33  ,att29 cad_att29
22:41:54  34  ,att30 cad_att30
22:41:54  35  ,att31 cad_att31
22:41:54  36  ,att32 cad_att32
22:41:54  37  ,att33 cad_att33
22:41:54  38  ,att34 cad_att34
22:41:54  39  ,att35 cad_att35
22:41:54  40  ,att36 cad_att36
22:41:54  41  FROM q15
22:41:54  42  /

Table created.

Elapsed: 00:00:00.17
22:41:54 SQL> 
22:41:54 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
22:41:55 SQL> 
22:41:55 SQL> -- rpt
22:41:55 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     20150

Elapsed: 00:00:00.00
22:41:55 SQL> 
22:41:55 SQL> --
22:41:55 SQL> -- chf10.sql
22:41:55 SQL> --
22:41:55 SQL> 
22:41:55 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:41:55 SQL> 
22:41:55 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.34
22:41:55 SQL> 
22:41:55 SQL> -- I created di5min here:
22:41:55 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:41:55 SQL> 
22:41:55 SQL> CREATE OR REPLACE VIEW q11 AS
22:41:55   2  SELECT
22:41:55   3  pair
22:41:55   4  ,ydate
22:41:55   5  ,prdate
22:41:55   6  ,rownum rnum -- acts as t in my time-series
22:41:55   7  ,clse
22:41:55   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
22:41:55   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
22:41:55  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
22:41:55  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
22:41:55  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
22:41:55  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
22:41:55  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
22:41:55  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
22:41:55  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
22:41:55  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
22:41:55  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
22:41:55  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
22:41:55  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
22:41:55  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
22:41:55  22  FROM di5min WHERE pair LIKE'%chf%'
22:41:55  23  ORDER BY ydate
22:41:55  24  /

View created.

Elapsed: 00:00:00.05
22:41:55 SQL> 
22:41:55 SQL> -- rpt
22:41:55 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_chf        20538

Elapsed: 00:00:00.35
22:41:55 SQL> 
22:41:55 SQL> -- Calc deltas and gains
22:41:55 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.16
22:41:56 SQL> 
22:41:56 SQL> CREATE TABLE q13 COMPRESS AS
22:41:56   2  SELECT
22:41:56   3  pair
22:41:56   4  ,ydate
22:41:56   5  ,prdate
22:41:56   6  ,rnum
22:41:56   7  ,ld8
22:41:56   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
22:41:56   9  -- step by 2
22:41:56  10  ,clse-lg6  d06
22:41:56  11  ,lg6 -lg8  d68
22:41:56  12  ,lg8 -lg10 d810
22:41:56  13  ,lg10-lg12 d1012
22:41:56  14  ,lg12-lg14 d1214
22:41:56  15  ,lg14-lg16 d1416
22:41:56  16  ,lg16-lg18 d1618
22:41:56  17  -- step by 4
22:41:56  18  ,lg6 -lg10 d610
22:41:56  19  ,lg8 -lg12 d812
22:41:56  20  ,lg10-lg14 d1014
22:41:56  21  ,lg12-lg16 d1216
22:41:56  22  --
22:41:56  23  ,ABS(clse-lg6 )dc6
22:41:56  24  ,ABS(clse-lg8 )dc8
22:41:56  25  ,ABS(clse-lg10)dc10
22:41:56  26  ,ABS(clse-lg12)dc12
22:41:56  27  ,ABS(clse-lg14)dc14
22:41:56  28  ,ABS(clse-lg16)dc16
22:41:56  29  ,ABS(clse-lg18)dc18
22:41:56  30  ,ABS(clse-lg20)dc20
22:41:56  31  ,ABS(clse-lg22)dc22
22:41:56  32  ,(ld8-clse) ug8
22:41:56  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:41:56  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:41:56  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:41:56  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:41:56  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:41:56  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:41:56  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:41:56  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
22:41:56  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
22:41:56  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
22:41:56  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
22:41:56  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
22:41:56  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
22:41:56  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:41:56  47  ,0+TO_CHAR(ydate,'D')d
22:41:56  48  ,0+TO_CHAR(ydate,'W')w
22:41:56  49  -- mpm stands for minutes-past-midnight:
22:41:56  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:41:56  51  FROM q11
22:41:56  52  -- I dont want any NULL values from the LAG() functions:
22:41:56  53  WHERE lg32 > 0
22:41:56  54  ORDER BY pair,ydate
22:41:56  55  /

Table created.

Elapsed: 00:00:01.74
22:41:57 SQL> 
22:41:57 SQL> -- rpt
22:41:57 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9685
	-1	   10469

Elapsed: 00:00:00.02
22:41:57 SQL> 
22:41:57 SQL> -- Calc gains and ntiles
22:41:57 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.19
22:41:58 SQL> CREATE TABLE q15 COMPRESS AS
22:41:58   2  SELECT
22:41:58   3  pair
22:41:58   4  ,ydate
22:41:58   5  ,prdate -- Should be unique
22:41:58   6  ,trend -- +1 or -1
22:41:58   7  -- Use NTILE() to derive some attributes
22:41:58   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
22:41:58   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
22:41:58  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
22:41:58  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
22:41:58  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
22:41:58  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
22:41:58  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
22:41:58  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
22:41:58  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
22:41:58  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
22:41:58  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
22:41:58  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
22:41:58  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
22:41:58  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
22:41:58  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
22:41:58  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
22:41:58  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
22:41:58  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
22:41:58  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
22:41:58  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
22:41:58  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
22:41:58  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
22:41:58  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
22:41:58  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
22:41:58  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
22:41:58  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
22:41:58  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
22:41:58  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
22:41:58  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
22:41:58  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
22:41:58  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
22:41:58  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
22:41:58  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
22:41:58  41  ,hh    att32
22:41:58  42  ,d     att33
22:41:58  43  ,w     att34
22:41:58  44  ,mpm   att35
22:41:58  45  ,trend att36
22:41:58  46  ,ug8 g8
22:41:58  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
22:41:58  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
22:41:58  49  FROM q13
22:41:58  50  ORDER BY pair,ydate
22:41:58  51  /

Table created.

Elapsed: 00:00:05.29
22:42:03 SQL> 
22:42:03 SQL> -- rpt
22:42:03 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
22:42:03   2  GROUP BY pair,trend,gatt,gattn
22:42:03   3  ORDER BY pair,trend,gatt,gattn
22:42:03   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_chf 	-1 nup nup .000070881	    4734
usd_chf 	-1 nup up  -.00512207	    2954
usd_chf 	-1 up  nup  .00521724	    2716
usd_chf 	-1			       0
usd_chf 	 1 nup nup -9.145E-06	    4680
usd_chf 	 1 nup up  -.00461967	    2825
usd_chf 	 1 up  nup  .00470655	    2149
usd_chf 	 1			       0

8 rows selected.

Elapsed: 00:00:00.02
22:42:03 SQL> 
22:42:03 SQL> -- rpt
22:42:03 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_chf 2010-12-20 22:40:00

Elapsed: 00:00:00.02
22:42:03 SQL> 
22:42:03 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.91
22:42:04 SQL> CREATE TABLE modsrc COMPRESS AS
22:42:04   2  SELECT
22:42:04   3  pair
22:42:04   4  ,ydate
22:42:04   5  ,prdate
22:42:04   6  ,trend
22:42:04   7  ,g8
22:42:04   8  ,gatt
22:42:04   9  ,gattn
22:42:04  10  FROM q15
22:42:04  11  /

Table created.

Elapsed: 00:00:00.08
22:42:04 SQL> 
22:42:04 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
22:42:04 SQL> 
22:42:04 SQL> -- rpt
22:42:04 SQL> 
22:42:04 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20538

Elapsed: 00:00:00.33
22:42:04 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20154

Elapsed: 00:00:00.01
22:42:04 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20154

Elapsed: 00:00:00.01
22:42:04 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20154

Elapsed: 00:00:00.00
22:42:04 SQL> 
22:42:04 SQL> DROP   TABLE chf_ms10 ;

Table dropped.

Elapsed: 00:00:00.02
22:42:04 SQL> CREATE TABLE chf_ms10 COMPRESS AS
22:42:04   2  SELECT
22:42:04   3  ydate
22:42:04   4  ,trend chf_trend
22:42:04   5  ,g8    chf_g8
22:42:04   6  ,gatt  chf_gatt
22:42:04   7  ,gattn chf_gattn
22:42:04   8  FROM modsrc
22:42:04   9  /

Table created.

Elapsed: 00:00:00.06
22:42:05 SQL> 
22:42:05 SQL> ANALYZE TABLE chf_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
22:42:05 SQL> 
22:42:05 SQL> -- rpt
22:42:05 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-14 11:10:01 2010-12-20 22:40:00	 9654	 -.01775      .0155
	-1 2010-09-14 04:55:01 2010-12-20 21:50:00	10404	 -.01825     .01545

Elapsed: 00:00:00.02
22:42:05 SQL> SELECT chf_trend,MIN(ydate),MAX(ydate),COUNT(chf_trend),MIN(chf_g8),MAX(chf_g8)FROM chf_ms10 GROUP BY chf_trend;

 CHF_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(CHF_TREND) MIN(CHF_G8) MAX(CHF_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-14 11:10:01 2010-12-20 22:40:00	       9685	-.01775       .0155
	-1 2010-09-14 04:55:01 2010-12-20 21:50:00	      10469	-.01825      .01545

Elapsed: 00:00:00.01
22:42:05 SQL> 
22:42:05 SQL> -- I need a copy of q15 attributes
22:42:05 SQL> 
22:42:05 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.03
22:42:05 SQL> CREATE TABLE chf_att COMPRESS AS
22:42:05   2  SELECT
22:42:05   3  ydate
22:42:05   4  ,att00 chf_att00
22:42:05   5  ,att01 chf_att01
22:42:05   6  ,att02 chf_att02
22:42:05   7  ,att03 chf_att03
22:42:05   8  ,att04 chf_att04
22:42:05   9  ,att05 chf_att05
22:42:05  10  ,att06 chf_att06
22:42:05  11  ,att07 chf_att07
22:42:05  12  ,att08 chf_att08
22:42:05  13  ,att09 chf_att09
22:42:05  14  ,att10 chf_att10
22:42:05  15  ,att11 chf_att11
22:42:05  16  ,att12 chf_att12
22:42:05  17  ,att13 chf_att13
22:42:05  18  ,att14 chf_att14
22:42:05  19  ,att15 chf_att15
22:42:05  20  ,att16 chf_att16
22:42:05  21  ,att17 chf_att17
22:42:05  22  ,att18 chf_att18
22:42:05  23  ,att19 chf_att19
22:42:05  24  ,att20 chf_att20
22:42:05  25  ,att21 chf_att21
22:42:05  26  ,att22 chf_att22
22:42:05  27  ,att23 chf_att23
22:42:05  28  ,att24 chf_att24
22:42:05  29  ,att25 chf_att25
22:42:05  30  ,att26 chf_att26
22:42:05  31  ,att27 chf_att27
22:42:05  32  ,att28 chf_att28
22:42:05  33  ,att29 chf_att29
22:42:05  34  ,att30 chf_att30
22:42:05  35  ,att31 chf_att31
22:42:05  36  ,att32 chf_att32
22:42:05  37  ,att33 chf_att33
22:42:05  38  ,att34 chf_att34
22:42:05  39  ,att35 chf_att35
22:42:05  40  ,att36 chf_att36
22:42:05  41  FROM q15
22:42:05  42  /

Table created.

Elapsed: 00:00:00.19
22:42:05 SQL> 
22:42:05 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.54
22:42:05 SQL> 
22:42:05 SQL> -- rpt
22:42:05 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     20154

Elapsed: 00:00:00.00
22:42:05 SQL> 
22:42:05 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
