
SQL*Plus: Release 11.2.0.1.0 Production on Fri Dec 24 07:11:27 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

07:11:27 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
07:11:27 SQL> 07:11:27 SQL> --
07:11:27 SQL> -- eur10.sql
07:11:27 SQL> --
07:11:27 SQL> 
07:11:27 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:11:27 SQL> 
07:11:27 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.00
07:11:27 SQL> 
07:11:27 SQL> -- I created di5min here:
07:11:27 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:11:27 SQL> 
07:11:27 SQL> CREATE OR REPLACE VIEW q11 AS
07:11:27   2  SELECT
07:11:27   3  pair
07:11:27   4  ,ydate
07:11:27   5  ,prdate
07:11:27   6  ,rownum rnum -- acts as t in my time-series
07:11:27   7  ,clse
07:11:27   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
07:11:27   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
07:11:27  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
07:11:27  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
07:11:27  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
07:11:27  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
07:11:27  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
07:11:27  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
07:11:27  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
07:11:27  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
07:11:27  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
07:11:27  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
07:11:27  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
07:11:27  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
07:11:27  22  FROM di5min WHERE pair LIKE'%eur%'
07:11:27  23  ORDER BY ydate
07:11:27  24  /

View created.

Elapsed: 00:00:00.04
07:11:27 SQL> 
07:11:27 SQL> -- rpt
07:11:27 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
eur_usd        20742

Elapsed: 00:00:00.36
07:11:28 SQL> 
07:11:28 SQL> -- Calc deltas and gains
07:11:28 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.25
07:11:28 SQL> 
07:11:28 SQL> CREATE TABLE q13 COMPRESS AS
07:11:28   2  SELECT
07:11:28   3  pair
07:11:28   4  ,ydate
07:11:28   5  ,prdate
07:11:28   6  ,rnum
07:11:28   7  ,ld8
07:11:28   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
07:11:28   9  -- step by 2
07:11:28  10  ,clse-lg6  d06
07:11:28  11  ,lg6 -lg8  d68
07:11:28  12  ,lg8 -lg10 d810
07:11:28  13  ,lg10-lg12 d1012
07:11:28  14  ,lg12-lg14 d1214
07:11:28  15  ,lg14-lg16 d1416
07:11:28  16  ,lg16-lg18 d1618
07:11:28  17  -- step by 4
07:11:28  18  ,lg6 -lg10 d610
07:11:28  19  ,lg8 -lg12 d812
07:11:28  20  ,lg10-lg14 d1014
07:11:28  21  ,lg12-lg16 d1216
07:11:28  22  --
07:11:28  23  ,ABS(clse-lg6 )dc6
07:11:28  24  ,ABS(clse-lg8 )dc8
07:11:28  25  ,ABS(clse-lg10)dc10
07:11:28  26  ,ABS(clse-lg12)dc12
07:11:28  27  ,ABS(clse-lg14)dc14
07:11:28  28  ,ABS(clse-lg16)dc16
07:11:28  29  ,ABS(clse-lg18)dc18
07:11:28  30  ,ABS(clse-lg20)dc20
07:11:28  31  ,ABS(clse-lg22)dc22
07:11:28  32  ,(ld8-clse) ug8
07:11:28  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:11:28  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:11:28  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:11:28  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:11:28  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:11:28  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:11:28  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:11:28  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
07:11:28  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
07:11:28  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
07:11:28  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
07:11:28  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
07:11:28  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
07:11:28  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:11:28  47  ,0+TO_CHAR(ydate,'D')d
07:11:28  48  ,0+TO_CHAR(ydate,'W')w
07:11:28  49  -- mpm stands for minutes-past-midnight:
07:11:28  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:11:28  51  FROM q11
07:11:28  52  -- I dont want any NULL values from the LAG() functions:
07:11:28  53  WHERE lg32 > 0
07:11:28  54  ORDER BY pair,ydate
07:11:28  55  /

Table created.

Elapsed: 00:00:02.04
07:11:30 SQL> 
07:11:30 SQL> -- rpt
07:11:30 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	   10119
	-1	   10239

Elapsed: 00:00:00.03
07:11:30 SQL> 
07:11:30 SQL> -- Calc gains and ntiles
07:11:30 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.04
07:11:30 SQL> CREATE TABLE q15 COMPRESS AS
07:11:30   2  SELECT
07:11:30   3  pair
07:11:30   4  ,ydate
07:11:30   5  ,prdate -- Should be unique
07:11:30   6  ,trend -- +1 or -1
07:11:30   7  -- Use NTILE() to derive some attributes
07:11:30   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
07:11:30   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
07:11:30  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
07:11:30  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
07:11:30  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
07:11:30  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
07:11:30  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
07:11:30  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
07:11:30  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
07:11:30  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
07:11:30  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
07:11:30  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
07:11:30  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
07:11:30  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
07:11:30  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
07:11:30  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
07:11:30  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
07:11:30  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
07:11:30  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
07:11:30  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
07:11:30  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
07:11:30  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
07:11:30  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
07:11:30  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
07:11:30  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
07:11:30  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
07:11:30  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
07:11:30  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
07:11:30  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
07:11:30  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
07:11:30  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
07:11:30  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
07:11:30  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
07:11:30  41  ,hh    att32
07:11:30  42  ,d     att33
07:11:30  43  ,w     att34
07:11:30  44  ,mpm   att35
07:11:30  45  ,trend att36
07:11:30  46  ,ug8 g8
07:11:30  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
07:11:30  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
07:11:30  49  FROM q13
07:11:30  50  ORDER BY pair,ydate
07:11:30  51  /

Table created.

Elapsed: 00:00:05.41
07:11:36 SQL> 
07:11:36 SQL> -- rpt
07:11:36 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
07:11:36   2  GROUP BY pair,trend,gatt,gattn
07:11:36   3  ORDER BY pair,trend,gatt,gattn
07:11:36   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
eur_usd 	-1 nup nup .000025712	    3021
eur_usd 	-1 nup up  -.00602802	    3651
eur_usd 	-1 up  nup .005756878	    3564
eur_usd 	-1			       0
eur_usd 	 1 nup nup -.00007785	    2951
eur_usd 	 1 nup up  -.00626446	    3461
eur_usd 	 1 up  nup .006576823	    3614
eur_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.02
07:11:36 SQL> 
07:11:36 SQL> -- rpt
07:11:36 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
eur_usd 2010-12-24 07:05:00

Elapsed: 00:00:00.02
07:11:36 SQL> 
07:11:36 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.04
07:11:36 SQL> CREATE TABLE modsrc COMPRESS AS
07:11:36   2  SELECT
07:11:36   3  pair
07:11:36   4  ,ydate
07:11:36   5  ,prdate
07:11:36   6  ,trend
07:11:36   7  ,g8
07:11:36   8  ,gatt
07:11:36   9  ,gattn
07:11:36  10  FROM q15
07:11:36  11  /

Table created.

Elapsed: 00:00:00.08
07:11:36 SQL> 
07:11:36 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
07:11:36 SQL> 
07:11:36 SQL> -- rpt
07:11:36 SQL> 
07:11:36 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20742

Elapsed: 00:00:00.36
07:11:36 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.00
07:11:36 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.01
07:11:36 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.00
07:11:36 SQL> 
07:11:36 SQL> DROP   TABLE eur_ms10 ;

Table dropped.

Elapsed: 00:00:00.11
07:11:36 SQL> CREATE TABLE eur_ms10 COMPRESS AS
07:11:36   2  SELECT
07:11:36   3  ydate
07:11:36   4  ,trend eur_trend
07:11:36   5  ,g8    eur_g8
07:11:36   6  ,gatt  eur_gatt
07:11:36   7  ,gattn eur_gattn
07:11:36   8  FROM modsrc
07:11:36   9  /

Table created.

Elapsed: 00:00:00.07
07:11:36 SQL> 
07:11:36 SQL> ANALYZE TABLE eur_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
07:11:37 SQL> 
07:11:37 SQL> -- rpt
07:11:37 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 15:15:01 2010-12-24 07:05:00	10026	  -.0218     .02165
	-1 2010-09-16 17:15:01 2010-12-24 01:50:00	10236	 -.02085      .0196

Elapsed: 00:00:00.01
07:11:37 SQL> SELECT eur_trend,MIN(ydate),MAX(ydate),COUNT(eur_trend),MIN(eur_g8),MAX(eur_g8)FROM eur_ms10 GROUP BY eur_trend;

 EUR_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(EUR_TREND) MIN(EUR_G8) MAX(EUR_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 15:15:01 2010-12-24 07:05:00	      10119	 -.0218      .02165
	-1 2010-09-16 17:15:01 2010-12-24 01:50:00	      10239	-.02085       .0196

Elapsed: 00:00:00.02
07:11:37 SQL> 
07:11:37 SQL> -- I need a copy of q15 attributes
07:11:37 SQL> 
07:11:37 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.16
07:11:37 SQL> CREATE TABLE eur_att COMPRESS AS
07:11:37   2  SELECT
07:11:37   3  ydate
07:11:37   4  ,att00 eur_att00
07:11:37   5  ,att01 eur_att01
07:11:37   6  ,att02 eur_att02
07:11:37   7  ,att03 eur_att03
07:11:37   8  ,att04 eur_att04
07:11:37   9  ,att05 eur_att05
07:11:37  10  ,att06 eur_att06
07:11:37  11  ,att07 eur_att07
07:11:37  12  ,att08 eur_att08
07:11:37  13  ,att09 eur_att09
07:11:37  14  ,att10 eur_att10
07:11:37  15  ,att11 eur_att11
07:11:37  16  ,att12 eur_att12
07:11:37  17  ,att13 eur_att13
07:11:37  18  ,att14 eur_att14
07:11:37  19  ,att15 eur_att15
07:11:37  20  ,att16 eur_att16
07:11:37  21  ,att17 eur_att17
07:11:37  22  ,att18 eur_att18
07:11:37  23  ,att19 eur_att19
07:11:37  24  ,att20 eur_att20
07:11:37  25  ,att21 eur_att21
07:11:37  26  ,att22 eur_att22
07:11:37  27  ,att23 eur_att23
07:11:37  28  ,att24 eur_att24
07:11:37  29  ,att25 eur_att25
07:11:37  30  ,att26 eur_att26
07:11:37  31  ,att27 eur_att27
07:11:37  32  ,att28 eur_att28
07:11:37  33  ,att29 eur_att29
07:11:37  34  ,att30 eur_att30
07:11:37  35  ,att31 eur_att31
07:11:37  36  ,att32 eur_att32
07:11:37  37  ,att33 eur_att33
07:11:37  38  ,att34 eur_att34
07:11:37  39  ,att35 eur_att35
07:11:37  40  ,att36 eur_att36
07:11:37  41  FROM q15
07:11:37  42  /

Table created.

Elapsed: 00:00:00.19
07:11:37 SQL> 
07:11:37 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.58
07:11:38 SQL> 
07:11:38 SQL> -- rpt
07:11:38 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     20358

Elapsed: 00:00:00.00
07:11:38 SQL> 
07:11:38 SQL> --
07:11:38 SQL> -- aud10.sql
07:11:38 SQL> --
07:11:38 SQL> 
07:11:38 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:11:38 SQL> 
07:11:38 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.57
07:11:38 SQL> 
07:11:38 SQL> -- I created di5min here:
07:11:38 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:11:38 SQL> 
07:11:38 SQL> CREATE OR REPLACE VIEW q11 AS
07:11:38   2  SELECT
07:11:38   3  pair
07:11:38   4  ,ydate
07:11:38   5  ,prdate
07:11:38   6  ,rownum rnum -- acts as t in my time-series
07:11:38   7  ,clse
07:11:38   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
07:11:38   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
07:11:38  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
07:11:38  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
07:11:38  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
07:11:38  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
07:11:38  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
07:11:38  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
07:11:38  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
07:11:38  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
07:11:38  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
07:11:38  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
07:11:38  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
07:11:38  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
07:11:38  22  FROM di5min WHERE pair LIKE'%aud%'
07:11:38  23  ORDER BY ydate
07:11:38  24  /

View created.

Elapsed: 00:00:00.02
07:11:38 SQL> 
07:11:38 SQL> -- rpt
07:11:38 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
aud_usd        20739

Elapsed: 00:00:00.33
07:11:39 SQL> 
07:11:39 SQL> -- Calc deltas and gains
07:11:39 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.23
07:11:39 SQL> 
07:11:39 SQL> CREATE TABLE q13 COMPRESS AS
07:11:39   2  SELECT
07:11:39   3  pair
07:11:39   4  ,ydate
07:11:39   5  ,prdate
07:11:39   6  ,rnum
07:11:39   7  ,ld8
07:11:39   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
07:11:39   9  -- step by 2
07:11:39  10  ,clse-lg6  d06
07:11:39  11  ,lg6 -lg8  d68
07:11:39  12  ,lg8 -lg10 d810
07:11:39  13  ,lg10-lg12 d1012
07:11:39  14  ,lg12-lg14 d1214
07:11:39  15  ,lg14-lg16 d1416
07:11:39  16  ,lg16-lg18 d1618
07:11:39  17  -- step by 4
07:11:39  18  ,lg6 -lg10 d610
07:11:39  19  ,lg8 -lg12 d812
07:11:39  20  ,lg10-lg14 d1014
07:11:39  21  ,lg12-lg16 d1216
07:11:39  22  --
07:11:39  23  ,ABS(clse-lg6 )dc6
07:11:39  24  ,ABS(clse-lg8 )dc8
07:11:39  25  ,ABS(clse-lg10)dc10
07:11:39  26  ,ABS(clse-lg12)dc12
07:11:39  27  ,ABS(clse-lg14)dc14
07:11:39  28  ,ABS(clse-lg16)dc16
07:11:39  29  ,ABS(clse-lg18)dc18
07:11:39  30  ,ABS(clse-lg20)dc20
07:11:39  31  ,ABS(clse-lg22)dc22
07:11:39  32  ,(ld8-clse) ug8
07:11:39  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:11:39  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:11:39  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:11:39  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:11:39  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:11:39  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:11:39  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:11:39  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
07:11:39  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
07:11:39  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
07:11:39  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
07:11:39  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
07:11:39  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
07:11:39  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:11:39  47  ,0+TO_CHAR(ydate,'D')d
07:11:39  48  ,0+TO_CHAR(ydate,'W')w
07:11:39  49  -- mpm stands for minutes-past-midnight:
07:11:39  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:11:39  51  FROM q11
07:11:39  52  -- I dont want any NULL values from the LAG() functions:
07:11:39  53  WHERE lg32 > 0
07:11:39  54  ORDER BY pair,ydate
07:11:39  55  /

Table created.

Elapsed: 00:00:01.69
07:11:40 SQL> 
07:11:40 SQL> -- rpt
07:11:40 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	   10806
	-1	    9549

Elapsed: 00:00:00.03
07:11:40 SQL> 
07:11:40 SQL> -- Calc gains and ntiles
07:11:40 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.20
07:11:41 SQL> CREATE TABLE q15 COMPRESS AS
07:11:41   2  SELECT
07:11:41   3  pair
07:11:41   4  ,ydate
07:11:41   5  ,prdate -- Should be unique
07:11:41   6  ,trend -- +1 or -1
07:11:41   7  -- Use NTILE() to derive some attributes
07:11:41   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
07:11:41   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
07:11:41  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
07:11:41  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
07:11:41  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
07:11:41  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
07:11:41  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
07:11:41  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
07:11:41  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
07:11:41  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
07:11:41  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
07:11:41  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
07:11:41  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
07:11:41  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
07:11:41  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
07:11:41  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
07:11:41  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
07:11:41  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
07:11:41  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
07:11:41  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
07:11:41  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
07:11:41  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
07:11:41  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
07:11:41  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
07:11:41  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
07:11:41  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
07:11:41  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
07:11:41  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
07:11:41  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
07:11:41  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
07:11:41  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
07:11:41  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
07:11:41  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
07:11:41  41  ,hh    att32
07:11:41  42  ,d     att33
07:11:41  43  ,w     att34
07:11:41  44  ,mpm   att35
07:11:41  45  ,trend att36
07:11:41  46  ,ug8 g8
07:11:41  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
07:11:41  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
07:11:41  49  FROM q13
07:11:41  50  ORDER BY pair,ydate
07:11:41  51  /

Table created.

Elapsed: 00:00:05.67
07:11:46 SQL> 
07:11:46 SQL> -- rpt
07:11:46 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
07:11:46   2  GROUP BY pair,trend,gatt,gattn
07:11:46   3  ORDER BY pair,trend,gatt,gattn
07:11:46   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
aud_usd 	-1 nup nup  .00003292	    3551
aud_usd 	-1 nup up  -.00525835	    2519
aud_usd 	-1 up  nup .005173898	    3402
aud_usd 	-1			       0
aud_usd 	 1 nup nup .000026953	    4346
aud_usd 	 1 nup up  -.00500047	    3062
aud_usd 	 1 up  nup .005093811	    3379
aud_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.02
07:11:46 SQL> 
07:11:46 SQL> -- rpt
07:11:46 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
aud_usd 2010-12-24 07:05:00

Elapsed: 00:00:00.02
07:11:46 SQL> 
07:11:46 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
07:11:47 SQL> CREATE TABLE modsrc COMPRESS AS
07:11:47   2  SELECT
07:11:47   3  pair
07:11:47   4  ,ydate
07:11:47   5  ,prdate
07:11:47   6  ,trend
07:11:47   7  ,g8
07:11:47   8  ,gatt
07:11:47   9  ,gattn
07:11:47  10  FROM q15
07:11:47  11  /

Table created.

Elapsed: 00:00:00.08
07:11:47 SQL> 
07:11:47 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
07:11:47 SQL> 
07:11:47 SQL> -- rpt
07:11:47 SQL> 
07:11:47 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20739

Elapsed: 00:00:00.36
07:11:47 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20355

Elapsed: 00:00:00.00
07:11:47 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20355

Elapsed: 00:00:00.01
07:11:47 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20355

Elapsed: 00:00:00.00
07:11:47 SQL> 
07:11:47 SQL> DROP   TABLE aud_ms10 ;

Table dropped.

Elapsed: 00:00:00.14
07:11:47 SQL> CREATE TABLE aud_ms10 COMPRESS AS
07:11:47   2  SELECT
07:11:47   3  ydate
07:11:47   4  ,trend aud_trend
07:11:47   5  ,g8    aud_g8
07:11:47   6  ,gatt  aud_gatt
07:11:47   7  ,gattn aud_gattn
07:11:47   8  FROM modsrc
07:11:47   9  /

Table created.

Elapsed: 00:00:00.08
07:11:47 SQL> 
07:11:47 SQL> ANALYZE TABLE aud_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
07:11:48 SQL> 
07:11:48 SQL> -- rpt
07:11:48 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 19:30:01 2010-12-24 07:05:00	10787	  -.0203      .0136
	-1 2010-09-16 15:15:01 2010-12-24 06:10:00	 9472	  -.0196      .0148

Elapsed: 00:00:00.02
07:11:48 SQL> SELECT aud_trend,MIN(ydate),MAX(ydate),COUNT(aud_trend),MIN(aud_g8),MAX(aud_g8)FROM aud_ms10 GROUP BY aud_trend;

 AUD_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(AUD_TREND) MIN(AUD_G8) MAX(AUD_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 19:30:01 2010-12-24 07:05:00	      10806	 -.0203       .0136
	-1 2010-09-16 15:15:01 2010-12-24 06:10:00	       9549	 -.0196       .0148

Elapsed: 00:00:00.01
07:11:48 SQL> 
07:11:48 SQL> -- I need a copy of q15 attributes
07:11:48 SQL> 
07:11:48 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.11
07:11:48 SQL> CREATE TABLE aud_att COMPRESS AS
07:11:48   2  SELECT
07:11:48   3  ydate
07:11:48   4  ,att00 aud_att00
07:11:48   5  ,att01 aud_att01
07:11:48   6  ,att02 aud_att02
07:11:48   7  ,att03 aud_att03
07:11:48   8  ,att04 aud_att04
07:11:48   9  ,att05 aud_att05
07:11:48  10  ,att06 aud_att06
07:11:48  11  ,att07 aud_att07
07:11:48  12  ,att08 aud_att08
07:11:48  13  ,att09 aud_att09
07:11:48  14  ,att10 aud_att10
07:11:48  15  ,att11 aud_att11
07:11:48  16  ,att12 aud_att12
07:11:48  17  ,att13 aud_att13
07:11:48  18  ,att14 aud_att14
07:11:48  19  ,att15 aud_att15
07:11:48  20  ,att16 aud_att16
07:11:48  21  ,att17 aud_att17
07:11:48  22  ,att18 aud_att18
07:11:48  23  ,att19 aud_att19
07:11:48  24  ,att20 aud_att20
07:11:48  25  ,att21 aud_att21
07:11:48  26  ,att22 aud_att22
07:11:48  27  ,att23 aud_att23
07:11:48  28  ,att24 aud_att24
07:11:48  29  ,att25 aud_att25
07:11:48  30  ,att26 aud_att26
07:11:48  31  ,att27 aud_att27
07:11:48  32  ,att28 aud_att28
07:11:48  33  ,att29 aud_att29
07:11:48  34  ,att30 aud_att30
07:11:48  35  ,att31 aud_att31
07:11:48  36  ,att32 aud_att32
07:11:48  37  ,att33 aud_att33
07:11:48  38  ,att34 aud_att34
07:11:48  39  ,att35 aud_att35
07:11:48  40  ,att36 aud_att36
07:11:48  41  FROM q15
07:11:48  42  /

Table created.

Elapsed: 00:00:00.17
07:11:48 SQL> 
07:11:48 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
07:11:48 SQL> 
07:11:48 SQL> -- rpt
07:11:48 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     20355

Elapsed: 00:00:00.01
07:11:48 SQL> 
07:11:48 SQL> --
07:11:48 SQL> -- gbp10.sql
07:11:48 SQL> --
07:11:48 SQL> 
07:11:48 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:11:48 SQL> 
07:11:48 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.33
07:11:49 SQL> 
07:11:49 SQL> -- I created di5min here:
07:11:49 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:11:49 SQL> 
07:11:49 SQL> CREATE OR REPLACE VIEW q11 AS
07:11:49   2  SELECT
07:11:49   3  pair
07:11:49   4  ,ydate
07:11:49   5  ,prdate
07:11:49   6  ,rownum rnum -- acts as t in my time-series
07:11:49   7  ,clse
07:11:49   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
07:11:49   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
07:11:49  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
07:11:49  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
07:11:49  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
07:11:49  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
07:11:49  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
07:11:49  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
07:11:49  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
07:11:49  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
07:11:49  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
07:11:49  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
07:11:49  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
07:11:49  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
07:11:49  22  FROM di5min WHERE pair LIKE'%gbp%'
07:11:49  23  ORDER BY ydate
07:11:49  24  /

View created.

Elapsed: 00:00:00.04
07:11:49 SQL> 
07:11:49 SQL> -- rpt
07:11:49 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
gbp_usd        20741

Elapsed: 00:00:00.34
07:11:49 SQL> 
07:11:49 SQL> -- Calc deltas and gains
07:11:49 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.16
07:11:49 SQL> 
07:11:49 SQL> CREATE TABLE q13 COMPRESS AS
07:11:49   2  SELECT
07:11:49   3  pair
07:11:49   4  ,ydate
07:11:49   5  ,prdate
07:11:49   6  ,rnum
07:11:49   7  ,ld8
07:11:49   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
07:11:49   9  -- step by 2
07:11:49  10  ,clse-lg6  d06
07:11:49  11  ,lg6 -lg8  d68
07:11:49  12  ,lg8 -lg10 d810
07:11:49  13  ,lg10-lg12 d1012
07:11:49  14  ,lg12-lg14 d1214
07:11:49  15  ,lg14-lg16 d1416
07:11:49  16  ,lg16-lg18 d1618
07:11:49  17  -- step by 4
07:11:49  18  ,lg6 -lg10 d610
07:11:49  19  ,lg8 -lg12 d812
07:11:49  20  ,lg10-lg14 d1014
07:11:49  21  ,lg12-lg16 d1216
07:11:49  22  --
07:11:49  23  ,ABS(clse-lg6 )dc6
07:11:49  24  ,ABS(clse-lg8 )dc8
07:11:49  25  ,ABS(clse-lg10)dc10
07:11:49  26  ,ABS(clse-lg12)dc12
07:11:49  27  ,ABS(clse-lg14)dc14
07:11:49  28  ,ABS(clse-lg16)dc16
07:11:49  29  ,ABS(clse-lg18)dc18
07:11:49  30  ,ABS(clse-lg20)dc20
07:11:49  31  ,ABS(clse-lg22)dc22
07:11:49  32  ,(ld8-clse) ug8
07:11:49  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:11:49  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:11:49  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:11:49  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:11:49  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:11:49  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:11:49  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:11:49  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
07:11:49  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
07:11:49  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
07:11:49  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
07:11:49  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
07:11:49  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
07:11:49  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:11:49  47  ,0+TO_CHAR(ydate,'D')d
07:11:49  48  ,0+TO_CHAR(ydate,'W')w
07:11:49  49  -- mpm stands for minutes-past-midnight:
07:11:49  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:11:49  51  FROM q11
07:11:49  52  -- I dont want any NULL values from the LAG() functions:
07:11:49  53  WHERE lg32 > 0
07:11:49  54  ORDER BY pair,ydate
07:11:49  55  /

Table created.

Elapsed: 00:00:01.75
07:11:51 SQL> 
07:11:51 SQL> -- rpt
07:11:51 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9980
	-1	   10377

Elapsed: 00:00:00.03
07:11:51 SQL> 
07:11:51 SQL> -- Calc gains and ntiles
07:11:51 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.19
07:11:51 SQL> CREATE TABLE q15 COMPRESS AS
07:11:51   2  SELECT
07:11:51   3  pair
07:11:51   4  ,ydate
07:11:51   5  ,prdate -- Should be unique
07:11:51   6  ,trend -- +1 or -1
07:11:51   7  -- Use NTILE() to derive some attributes
07:11:51   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
07:11:51   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
07:11:51  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
07:11:51  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
07:11:51  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
07:11:51  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
07:11:51  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
07:11:51  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
07:11:51  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
07:11:51  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
07:11:51  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
07:11:51  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
07:11:51  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
07:11:51  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
07:11:51  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
07:11:51  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
07:11:51  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
07:11:51  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
07:11:51  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
07:11:51  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
07:11:51  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
07:11:51  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
07:11:51  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
07:11:51  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
07:11:51  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
07:11:51  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
07:11:51  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
07:11:51  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
07:11:51  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
07:11:51  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
07:11:51  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
07:11:51  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
07:11:51  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
07:11:51  41  ,hh    att32
07:11:51  42  ,d     att33
07:11:51  43  ,w     att34
07:11:51  44  ,mpm   att35
07:11:51  45  ,trend att36
07:11:51  46  ,ug8 g8
07:11:51  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
07:11:51  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
07:11:51  49  FROM q13
07:11:51  50  ORDER BY pair,ydate
07:11:51  51  /

Table created.

Elapsed: 00:00:05.43
07:11:57 SQL> 
07:11:57 SQL> -- rpt
07:11:57 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
07:11:57   2  GROUP BY pair,trend,gatt,gattn
07:11:57   3  ORDER BY pair,trend,gatt,gattn
07:11:57   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
gbp_usd 	-1 nup nup .000093646	    3840
gbp_usd 	-1 nup up   -.0059004	    3270
gbp_usd 	-1 up  nup .005468704	    3260
gbp_usd 	-1			       0
gbp_usd 	 1 nup nup -.00008005	    3645
gbp_usd 	 1 nup up  -.00554744	    3271
gbp_usd 	 1 up  nup .005974639	    2975
gbp_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
07:11:57 SQL> 
07:11:57 SQL> -- rpt
07:11:57 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
gbp_usd 2010-12-24 07:05:00

Elapsed: 00:00:00.02
07:11:57 SQL> 
07:11:57 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.11
07:11:57 SQL> CREATE TABLE modsrc COMPRESS AS
07:11:57   2  SELECT
07:11:57   3  pair
07:11:57   4  ,ydate
07:11:57   5  ,prdate
07:11:57   6  ,trend
07:11:57   7  ,g8
07:11:57   8  ,gatt
07:11:57   9  ,gattn
07:11:57  10  FROM q15
07:11:57  11  /

Table created.

Elapsed: 00:00:00.08
07:11:57 SQL> 
07:11:57 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
07:11:57 SQL> 
07:11:57 SQL> -- rpt
07:11:57 SQL> 
07:11:57 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20741

Elapsed: 00:00:00.34
07:11:58 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20357

Elapsed: 00:00:00.00
07:11:58 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20357

Elapsed: 00:00:00.01
07:11:58 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20357

Elapsed: 00:00:00.00
07:11:58 SQL> 
07:11:58 SQL> DROP   TABLE gbp_ms10 ;

Table dropped.

Elapsed: 00:00:00.03
07:11:58 SQL> CREATE TABLE gbp_ms10 COMPRESS AS
07:11:58   2  SELECT
07:11:58   3  ydate
07:11:58   4  ,trend gbp_trend
07:11:58   5  ,g8    gbp_g8
07:11:58   6  ,gatt  gbp_gatt
07:11:58   7  ,gattn gbp_gattn
07:11:58   8  FROM modsrc
07:11:58   9  /

Table created.

Elapsed: 00:00:00.06
07:11:58 SQL> 
07:11:58 SQL> ANALYZE TABLE gbp_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
07:11:58 SQL> 
07:11:58 SQL> -- rpt
07:11:58 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 15:15:01 2010-12-24 07:05:00	 9891	  -.0231       .019
	-1 2010-09-16 15:25:01 2010-12-24 06:05:00	10370	    -.02      .0204

Elapsed: 00:00:00.02
07:11:58 SQL> SELECT gbp_trend,MIN(ydate),MAX(ydate),COUNT(gbp_trend),MIN(gbp_g8),MAX(gbp_g8)FROM gbp_ms10 GROUP BY gbp_trend;

 GBP_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(GBP_TREND) MIN(GBP_G8) MAX(GBP_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 15:15:01 2010-12-24 07:05:00	       9980	 -.0231        .019
	-1 2010-09-16 15:25:01 2010-12-24 06:05:00	      10377	   -.02       .0204

Elapsed: 00:00:00.01
07:11:58 SQL> 
07:11:58 SQL> -- I need a copy of q15 attributes
07:11:58 SQL> 
07:11:58 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.23
07:11:58 SQL> CREATE TABLE gbp_att COMPRESS AS
07:11:58   2  SELECT
07:11:58   3  ydate
07:11:58   4  ,att00 gbp_att00
07:11:58   5  ,att01 gbp_att01
07:11:58   6  ,att02 gbp_att02
07:11:58   7  ,att03 gbp_att03
07:11:58   8  ,att04 gbp_att04
07:11:58   9  ,att05 gbp_att05
07:11:58  10  ,att06 gbp_att06
07:11:58  11  ,att07 gbp_att07
07:11:58  12  ,att08 gbp_att08
07:11:58  13  ,att09 gbp_att09
07:11:58  14  ,att10 gbp_att10
07:11:58  15  ,att11 gbp_att11
07:11:58  16  ,att12 gbp_att12
07:11:58  17  ,att13 gbp_att13
07:11:58  18  ,att14 gbp_att14
07:11:58  19  ,att15 gbp_att15
07:11:58  20  ,att16 gbp_att16
07:11:58  21  ,att17 gbp_att17
07:11:58  22  ,att18 gbp_att18
07:11:58  23  ,att19 gbp_att19
07:11:58  24  ,att20 gbp_att20
07:11:58  25  ,att21 gbp_att21
07:11:58  26  ,att22 gbp_att22
07:11:58  27  ,att23 gbp_att23
07:11:58  28  ,att24 gbp_att24
07:11:58  29  ,att25 gbp_att25
07:11:58  30  ,att26 gbp_att26
07:11:58  31  ,att27 gbp_att27
07:11:58  32  ,att28 gbp_att28
07:11:58  33  ,att29 gbp_att29
07:11:58  34  ,att30 gbp_att30
07:11:58  35  ,att31 gbp_att31
07:11:58  36  ,att32 gbp_att32
07:11:58  37  ,att33 gbp_att33
07:11:58  38  ,att34 gbp_att34
07:11:58  39  ,att35 gbp_att35
07:11:58  40  ,att36 gbp_att36
07:11:58  41  FROM q15
07:11:58  42  /

Table created.

Elapsed: 00:00:00.17
07:11:58 SQL> 
07:11:58 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
07:11:59 SQL> 
07:11:59 SQL> -- rpt
07:11:59 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     20357

Elapsed: 00:00:00.00
07:11:59 SQL> 
07:11:59 SQL> --
07:11:59 SQL> -- jpy10.sql
07:11:59 SQL> --
07:11:59 SQL> 
07:11:59 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:11:59 SQL> 
07:11:59 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.32
07:11:59 SQL> 
07:11:59 SQL> -- I created di5min here:
07:11:59 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:11:59 SQL> 
07:11:59 SQL> CREATE OR REPLACE VIEW q11 AS
07:11:59   2  SELECT
07:11:59   3  pair
07:11:59   4  ,ydate
07:11:59   5  ,prdate
07:11:59   6  ,rownum rnum -- acts as t in my time-series
07:11:59   7  ,clse
07:11:59   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
07:11:59   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
07:11:59  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
07:11:59  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
07:11:59  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
07:11:59  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
07:11:59  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
07:11:59  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
07:11:59  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
07:11:59  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
07:11:59  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
07:11:59  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
07:11:59  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
07:11:59  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
07:11:59  22  FROM di5min WHERE pair LIKE'%jpy%'
07:11:59  23  ORDER BY ydate
07:11:59  24  /

View created.

Elapsed: 00:00:00.05
07:11:59 SQL> 
07:11:59 SQL> -- rpt
07:11:59 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_jpy        20741

Elapsed: 00:00:00.34
07:11:59 SQL> 
07:11:59 SQL> -- Calc deltas and gains
07:11:59 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.21
07:12:00 SQL> 
07:12:00 SQL> CREATE TABLE q13 COMPRESS AS
07:12:00   2  SELECT
07:12:00   3  pair
07:12:00   4  ,ydate
07:12:00   5  ,prdate
07:12:00   6  ,rnum
07:12:00   7  ,ld8
07:12:00   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
07:12:00   9  -- step by 2
07:12:00  10  ,clse-lg6  d06
07:12:00  11  ,lg6 -lg8  d68
07:12:00  12  ,lg8 -lg10 d810
07:12:00  13  ,lg10-lg12 d1012
07:12:00  14  ,lg12-lg14 d1214
07:12:00  15  ,lg14-lg16 d1416
07:12:00  16  ,lg16-lg18 d1618
07:12:00  17  -- step by 4
07:12:00  18  ,lg6 -lg10 d610
07:12:00  19  ,lg8 -lg12 d812
07:12:00  20  ,lg10-lg14 d1014
07:12:00  21  ,lg12-lg16 d1216
07:12:00  22  --
07:12:00  23  ,ABS(clse-lg6 )dc6
07:12:00  24  ,ABS(clse-lg8 )dc8
07:12:00  25  ,ABS(clse-lg10)dc10
07:12:00  26  ,ABS(clse-lg12)dc12
07:12:00  27  ,ABS(clse-lg14)dc14
07:12:00  28  ,ABS(clse-lg16)dc16
07:12:00  29  ,ABS(clse-lg18)dc18
07:12:00  30  ,ABS(clse-lg20)dc20
07:12:00  31  ,ABS(clse-lg22)dc22
07:12:00  32  ,(ld8-clse) ug8
07:12:00  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:12:00  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:12:00  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:12:00  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:12:00  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:12:00  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:12:00  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:12:00  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
07:12:00  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
07:12:00  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
07:12:00  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
07:12:00  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
07:12:00  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
07:12:00  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:12:00  47  ,0+TO_CHAR(ydate,'D')d
07:12:00  48  ,0+TO_CHAR(ydate,'W')w
07:12:00  49  -- mpm stands for minutes-past-midnight:
07:12:00  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:12:00  51  FROM q11
07:12:00  52  -- I dont want any NULL values from the LAG() functions:
07:12:00  53  WHERE lg32 > 0
07:12:00  54  ORDER BY pair,ydate
07:12:00  55  /

Table created.

Elapsed: 00:00:01.66
07:12:01 SQL> 
07:12:01 SQL> -- rpt
07:12:01 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9414
	-1	   10943

Elapsed: 00:00:00.02
07:12:01 SQL> 
07:12:01 SQL> -- Calc gains and ntiles
07:12:01 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.20
07:12:01 SQL> CREATE TABLE q15 COMPRESS AS
07:12:01   2  SELECT
07:12:01   3  pair
07:12:01   4  ,ydate
07:12:01   5  ,prdate -- Should be unique
07:12:01   6  ,trend -- +1 or -1
07:12:01   7  -- Use NTILE() to derive some attributes
07:12:01   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
07:12:01   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
07:12:01  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
07:12:01  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
07:12:01  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
07:12:01  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
07:12:01  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
07:12:01  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
07:12:01  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
07:12:01  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
07:12:01  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
07:12:01  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
07:12:01  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
07:12:01  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
07:12:01  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
07:12:01  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
07:12:01  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
07:12:01  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
07:12:01  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
07:12:01  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
07:12:01  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
07:12:01  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
07:12:01  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
07:12:01  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
07:12:01  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
07:12:01  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
07:12:01  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
07:12:01  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
07:12:01  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
07:12:01  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
07:12:01  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
07:12:01  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
07:12:01  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
07:12:01  41  ,hh    att32
07:12:01  42  ,d     att33
07:12:01  43  ,w     att34
07:12:01  44  ,mpm   att35
07:12:01  45  ,trend att36
07:12:01  46  ,ug8 g8
07:12:01  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
07:12:01  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
07:12:01  49  FROM q13
07:12:01  50  ORDER BY pair,ydate
07:12:01  51  /

Table created.

Elapsed: 00:00:05.59
07:12:07 SQL> 
07:12:07 SQL> -- rpt
07:12:07 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
07:12:07   2  GROUP BY pair,trend,gatt,gattn
07:12:07   3  ORDER BY pair,trend,gatt,gattn
07:12:07   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_jpy 	-1 nup nup -7.437E-06	     168
usd_jpy 	-1 nup up  -.18432155	    5523
usd_jpy 	-1 up  nup  .17958365	    5233
usd_jpy 	-1			       0
usd_jpy 	 1 nup nup	    0	     118
usd_jpy 	 1 nup up  -.18874992	    5135
usd_jpy 	 1 up  nup .191994061	    4084
usd_jpy 	 1			       0

8 rows selected.

Elapsed: 00:00:00.04
07:12:07 SQL> 
07:12:07 SQL> -- rpt
07:12:07 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_jpy 2010-12-24 07:10:00

Elapsed: 00:00:00.02
07:12:07 SQL> 
07:12:07 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.74
07:12:08 SQL> CREATE TABLE modsrc COMPRESS AS
07:12:08   2  SELECT
07:12:08   3  pair
07:12:08   4  ,ydate
07:12:08   5  ,prdate
07:12:08   6  ,trend
07:12:08   7  ,g8
07:12:08   8  ,gatt
07:12:08   9  ,gattn
07:12:08  10  FROM q15
07:12:08  11  /

Table created.

Elapsed: 00:00:00.09
07:12:08 SQL> 
07:12:08 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.28
07:12:08 SQL> 
07:12:08 SQL> -- rpt
07:12:08 SQL> 
07:12:08 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20741

Elapsed: 00:00:00.34
07:12:09 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20357

Elapsed: 00:00:00.01
07:12:09 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20357

Elapsed: 00:00:00.01
07:12:09 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20357

Elapsed: 00:00:00.00
07:12:09 SQL> 
07:12:09 SQL> DROP   TABLE jpy_ms10 ;

Table dropped.

Elapsed: 00:00:00.06
07:12:09 SQL> CREATE TABLE jpy_ms10 COMPRESS AS
07:12:09   2  SELECT
07:12:09   3  ydate
07:12:09   4  ,trend jpy_trend
07:12:09   5  ,g8    jpy_g8
07:12:09   6  ,gatt  jpy_gatt
07:12:09   7  ,gattn jpy_gattn
07:12:09   8  FROM modsrc
07:12:09   9  /

Table created.

Elapsed: 00:00:00.08
07:12:09 SQL> 
07:12:09 SQL> ANALYZE TABLE jpy_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
07:12:09 SQL> 
07:12:09 SQL> -- rpt
07:12:09 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 15:15:01 2010-12-24 06:30:00	 9337	  -1.185	  1
	-1 2010-09-17 00:15:01 2010-12-24 07:10:00	10924	 -1.0575       1.32

Elapsed: 00:00:00.02
07:12:09 SQL> SELECT jpy_trend,MIN(ydate),MAX(ydate),COUNT(jpy_trend),MIN(jpy_g8),MAX(jpy_g8)FROM jpy_ms10 GROUP BY jpy_trend;

 JPY_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(JPY_TREND) MIN(JPY_G8) MAX(JPY_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 15:15:01 2010-12-24 06:30:00	       9414	 -1.185 	  1
	-1 2010-09-17 00:15:01 2010-12-24 07:10:00	      10943	-1.0575        1.32

Elapsed: 00:00:00.02
07:12:09 SQL> 
07:12:09 SQL> -- I need a copy of q15 attributes
07:12:09 SQL> 
07:12:09 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.04
07:12:09 SQL> CREATE TABLE jpy_att COMPRESS AS
07:12:09   2  SELECT
07:12:09   3  ydate
07:12:09   4  ,att00 jpy_att00
07:12:09   5  ,att01 jpy_att01
07:12:09   6  ,att02 jpy_att02
07:12:09   7  ,att03 jpy_att03
07:12:09   8  ,att04 jpy_att04
07:12:09   9  ,att05 jpy_att05
07:12:09  10  ,att06 jpy_att06
07:12:09  11  ,att07 jpy_att07
07:12:09  12  ,att08 jpy_att08
07:12:09  13  ,att09 jpy_att09
07:12:09  14  ,att10 jpy_att10
07:12:09  15  ,att11 jpy_att11
07:12:09  16  ,att12 jpy_att12
07:12:09  17  ,att13 jpy_att13
07:12:09  18  ,att14 jpy_att14
07:12:09  19  ,att15 jpy_att15
07:12:09  20  ,att16 jpy_att16
07:12:09  21  ,att17 jpy_att17
07:12:09  22  ,att18 jpy_att18
07:12:09  23  ,att19 jpy_att19
07:12:09  24  ,att20 jpy_att20
07:12:09  25  ,att21 jpy_att21
07:12:09  26  ,att22 jpy_att22
07:12:09  27  ,att23 jpy_att23
07:12:09  28  ,att24 jpy_att24
07:12:09  29  ,att25 jpy_att25
07:12:09  30  ,att26 jpy_att26
07:12:09  31  ,att27 jpy_att27
07:12:09  32  ,att28 jpy_att28
07:12:09  33  ,att29 jpy_att29
07:12:09  34  ,att30 jpy_att30
07:12:09  35  ,att31 jpy_att31
07:12:09  36  ,att32 jpy_att32
07:12:09  37  ,att33 jpy_att33
07:12:09  38  ,att34 jpy_att34
07:12:09  39  ,att35 jpy_att35
07:12:09  40  ,att36 jpy_att36
07:12:09  41  FROM q15
07:12:09  42  /

Table created.

Elapsed: 00:00:00.19
07:12:09 SQL> 
07:12:09 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.50
07:12:10 SQL> 
07:12:10 SQL> -- rpt
07:12:10 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     20357

Elapsed: 00:00:00.01
07:12:10 SQL> 
07:12:10 SQL> --
07:12:10 SQL> -- cad10.sql
07:12:10 SQL> --
07:12:10 SQL> 
07:12:10 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:12:10 SQL> 
07:12:10 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.34
07:12:10 SQL> 
07:12:10 SQL> -- I created di5min here:
07:12:10 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:12:10 SQL> 
07:12:10 SQL> CREATE OR REPLACE VIEW q11 AS
07:12:10   2  SELECT
07:12:10   3  pair
07:12:10   4  ,ydate
07:12:10   5  ,prdate
07:12:10   6  ,rownum rnum -- acts as t in my time-series
07:12:10   7  ,clse
07:12:10   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
07:12:10   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
07:12:10  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
07:12:10  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
07:12:10  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
07:12:10  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
07:12:10  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
07:12:10  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
07:12:10  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
07:12:10  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
07:12:10  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
07:12:10  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
07:12:10  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
07:12:10  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
07:12:10  22  FROM di5min WHERE pair LIKE'%cad%'
07:12:10  23  ORDER BY ydate
07:12:10  24  /

View created.

Elapsed: 00:00:00.05
07:12:10 SQL> 
07:12:10 SQL> -- rpt
07:12:10 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_cad        20739

Elapsed: 00:00:00.38
07:12:10 SQL> 
07:12:10 SQL> -- Calc deltas and gains
07:12:10 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.31
07:12:11 SQL> 
07:12:11 SQL> CREATE TABLE q13 COMPRESS AS
07:12:11   2  SELECT
07:12:11   3  pair
07:12:11   4  ,ydate
07:12:11   5  ,prdate
07:12:11   6  ,rnum
07:12:11   7  ,ld8
07:12:11   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
07:12:11   9  -- step by 2
07:12:11  10  ,clse-lg6  d06
07:12:11  11  ,lg6 -lg8  d68
07:12:11  12  ,lg8 -lg10 d810
07:12:11  13  ,lg10-lg12 d1012
07:12:11  14  ,lg12-lg14 d1214
07:12:11  15  ,lg14-lg16 d1416
07:12:11  16  ,lg16-lg18 d1618
07:12:11  17  -- step by 4
07:12:11  18  ,lg6 -lg10 d610
07:12:11  19  ,lg8 -lg12 d812
07:12:11  20  ,lg10-lg14 d1014
07:12:11  21  ,lg12-lg16 d1216
07:12:11  22  --
07:12:11  23  ,ABS(clse-lg6 )dc6
07:12:11  24  ,ABS(clse-lg8 )dc8
07:12:11  25  ,ABS(clse-lg10)dc10
07:12:11  26  ,ABS(clse-lg12)dc12
07:12:11  27  ,ABS(clse-lg14)dc14
07:12:11  28  ,ABS(clse-lg16)dc16
07:12:11  29  ,ABS(clse-lg18)dc18
07:12:11  30  ,ABS(clse-lg20)dc20
07:12:11  31  ,ABS(clse-lg22)dc22
07:12:11  32  ,(ld8-clse) ug8
07:12:11  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:12:11  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:12:11  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:12:11  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:12:11  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:12:11  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:12:11  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:12:11  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
07:12:11  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
07:12:11  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
07:12:11  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
07:12:11  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
07:12:11  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
07:12:11  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:12:11  47  ,0+TO_CHAR(ydate,'D')d
07:12:11  48  ,0+TO_CHAR(ydate,'W')w
07:12:11  49  -- mpm stands for minutes-past-midnight:
07:12:11  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:12:11  51  FROM q11
07:12:11  52  -- I dont want any NULL values from the LAG() functions:
07:12:11  53  WHERE lg32 > 0
07:12:11  54  ORDER BY pair,ydate
07:12:11  55  /

Table created.

Elapsed: 00:00:01.74
07:12:13 SQL> 
07:12:13 SQL> -- rpt
07:12:13 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9414
	-1	   10941

Elapsed: 00:00:00.03
07:12:13 SQL> 
07:12:13 SQL> -- Calc gains and ntiles
07:12:13 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.26
07:12:13 SQL> CREATE TABLE q15 COMPRESS AS
07:12:13   2  SELECT
07:12:13   3  pair
07:12:13   4  ,ydate
07:12:13   5  ,prdate -- Should be unique
07:12:13   6  ,trend -- +1 or -1
07:12:13   7  -- Use NTILE() to derive some attributes
07:12:13   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
07:12:13   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
07:12:13  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
07:12:13  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
07:12:13  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
07:12:13  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
07:12:13  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
07:12:13  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
07:12:13  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
07:12:13  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
07:12:13  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
07:12:13  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
07:12:13  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
07:12:13  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
07:12:13  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
07:12:13  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
07:12:13  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
07:12:13  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
07:12:13  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
07:12:13  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
07:12:13  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
07:12:13  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
07:12:13  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
07:12:13  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
07:12:13  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
07:12:13  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
07:12:13  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
07:12:13  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
07:12:13  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
07:12:13  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
07:12:13  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
07:12:13  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
07:12:13  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
07:12:13  41  ,hh    att32
07:12:13  42  ,d     att33
07:12:13  43  ,w     att34
07:12:13  44  ,mpm   att35
07:12:13  45  ,trend att36
07:12:13  46  ,ug8 g8
07:12:13  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
07:12:13  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
07:12:13  49  FROM q13
07:12:13  50  ORDER BY pair,ydate
07:12:13  51  /

Table created.

Elapsed: 00:00:05.42
07:12:18 SQL> 
07:12:18 SQL> -- rpt
07:12:18 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
07:12:18   2  GROUP BY pair,trend,gatt,gattn
07:12:18   3  ORDER BY pair,trend,gatt,gattn
07:12:18   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_cad 	-1 nup nup -.00002509	    5676
usd_cad 	-1 nup up  -.00400805	    2627
usd_cad 	-1 up  nup .004683676	    2565
usd_cad 	-1			       0
usd_cad 	 1 nup nup -.00011639	    4655
usd_cad 	 1 nup up  -.00422802	    2754
usd_cad 	 1 up  nup .004613081	    1982
usd_cad 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
07:12:18 SQL> 
07:12:18 SQL> -- rpt
07:12:18 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_cad 2010-12-24 07:10:00

Elapsed: 00:00:00.02
07:12:18 SQL> 
07:12:18 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.22
07:12:19 SQL> CREATE TABLE modsrc COMPRESS AS
07:12:19   2  SELECT
07:12:19   3  pair
07:12:19   4  ,ydate
07:12:19   5  ,prdate
07:12:19   6  ,trend
07:12:19   7  ,g8
07:12:19   8  ,gatt
07:12:19   9  ,gattn
07:12:19  10  FROM q15
07:12:19  11  /

Table created.

Elapsed: 00:00:00.09
07:12:19 SQL> 
07:12:19 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
07:12:19 SQL> 
07:12:19 SQL> -- rpt
07:12:19 SQL> 
07:12:19 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20739

Elapsed: 00:00:00.33
07:12:19 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20355

Elapsed: 00:00:00.01
07:12:19 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20355

Elapsed: 00:00:00.00
07:12:19 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20355

Elapsed: 00:00:00.01
07:12:19 SQL> 
07:12:19 SQL> DROP   TABLE cad_ms10 ;

Table dropped.

Elapsed: 00:00:00.03
07:12:19 SQL> CREATE TABLE cad_ms10 COMPRESS AS
07:12:19   2  SELECT
07:12:19   3  ydate
07:12:19   4  ,trend cad_trend
07:12:19   5  ,g8    cad_g8
07:12:19   6  ,gatt  cad_gatt
07:12:19   7  ,gattn cad_gattn
07:12:19   8  FROM modsrc
07:12:19   9  /

Table created.

Elapsed: 00:00:00.07
07:12:19 SQL> 
07:12:19 SQL> ANALYZE TABLE cad_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
07:12:19 SQL> 
07:12:19 SQL> -- rpt
07:12:19 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 15:15:01 2010-12-24 04:55:00	 9391	  -.0122      .0159
	-1 2010-09-16 20:05:01 2010-12-24 07:10:00	10868	 -.01105      .0176

Elapsed: 00:00:00.02
07:12:19 SQL> SELECT cad_trend,MIN(ydate),MAX(ydate),COUNT(cad_trend),MIN(cad_g8),MAX(cad_g8)FROM cad_ms10 GROUP BY cad_trend;

 CAD_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(CAD_TREND) MIN(CAD_G8) MAX(CAD_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 15:15:01 2010-12-24 04:55:00	       9414	 -.0122       .0159
	-1 2010-09-16 20:05:01 2010-12-24 07:10:00	      10941	-.01105       .0176

Elapsed: 00:00:00.01
07:12:19 SQL> 
07:12:19 SQL> -- I need a copy of q15 attributes
07:12:19 SQL> 
07:12:19 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.04
07:12:19 SQL> CREATE TABLE cad_att COMPRESS AS
07:12:19   2  SELECT
07:12:19   3  ydate
07:12:19   4  ,att00 cad_att00
07:12:19   5  ,att01 cad_att01
07:12:19   6  ,att02 cad_att02
07:12:19   7  ,att03 cad_att03
07:12:19   8  ,att04 cad_att04
07:12:19   9  ,att05 cad_att05
07:12:19  10  ,att06 cad_att06
07:12:19  11  ,att07 cad_att07
07:12:19  12  ,att08 cad_att08
07:12:19  13  ,att09 cad_att09
07:12:19  14  ,att10 cad_att10
07:12:19  15  ,att11 cad_att11
07:12:19  16  ,att12 cad_att12
07:12:19  17  ,att13 cad_att13
07:12:19  18  ,att14 cad_att14
07:12:19  19  ,att15 cad_att15
07:12:19  20  ,att16 cad_att16
07:12:19  21  ,att17 cad_att17
07:12:19  22  ,att18 cad_att18
07:12:19  23  ,att19 cad_att19
07:12:19  24  ,att20 cad_att20
07:12:19  25  ,att21 cad_att21
07:12:19  26  ,att22 cad_att22
07:12:19  27  ,att23 cad_att23
07:12:19  28  ,att24 cad_att24
07:12:19  29  ,att25 cad_att25
07:12:19  30  ,att26 cad_att26
07:12:19  31  ,att27 cad_att27
07:12:19  32  ,att28 cad_att28
07:12:19  33  ,att29 cad_att29
07:12:19  34  ,att30 cad_att30
07:12:19  35  ,att31 cad_att31
07:12:19  36  ,att32 cad_att32
07:12:19  37  ,att33 cad_att33
07:12:19  38  ,att34 cad_att34
07:12:19  39  ,att35 cad_att35
07:12:19  40  ,att36 cad_att36
07:12:19  41  FROM q15
07:12:19  42  /

Table created.

Elapsed: 00:00:00.19
07:12:20 SQL> 
07:12:20 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
07:12:20 SQL> 
07:12:20 SQL> -- rpt
07:12:20 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     20355

Elapsed: 00:00:00.00
07:12:20 SQL> 
07:12:20 SQL> --
07:12:20 SQL> -- chf10.sql
07:12:20 SQL> --
07:12:20 SQL> 
07:12:20 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:12:20 SQL> 
07:12:20 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
07:12:20 SQL> 
07:12:20 SQL> -- I created di5min here:
07:12:20 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:12:20 SQL> 
07:12:20 SQL> CREATE OR REPLACE VIEW q11 AS
07:12:20   2  SELECT
07:12:20   3  pair
07:12:20   4  ,ydate
07:12:20   5  ,prdate
07:12:20   6  ,rownum rnum -- acts as t in my time-series
07:12:20   7  ,clse
07:12:20   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
07:12:20   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
07:12:20  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
07:12:20  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
07:12:20  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
07:12:20  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
07:12:20  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
07:12:20  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
07:12:20  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
07:12:20  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
07:12:20  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
07:12:20  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
07:12:20  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
07:12:20  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
07:12:20  22  FROM di5min WHERE pair LIKE'%chf%'
07:12:20  23  ORDER BY ydate
07:12:20  24  /

View created.

Elapsed: 00:00:00.09
07:12:21 SQL> 
07:12:21 SQL> -- rpt
07:12:21 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_chf        20742

Elapsed: 00:00:00.35
07:12:21 SQL> 
07:12:21 SQL> -- Calc deltas and gains
07:12:21 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.24
07:12:21 SQL> 
07:12:21 SQL> CREATE TABLE q13 COMPRESS AS
07:12:21   2  SELECT
07:12:21   3  pair
07:12:21   4  ,ydate
07:12:21   5  ,prdate
07:12:21   6  ,rnum
07:12:21   7  ,ld8
07:12:21   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
07:12:21   9  -- step by 2
07:12:21  10  ,clse-lg6  d06
07:12:21  11  ,lg6 -lg8  d68
07:12:21  12  ,lg8 -lg10 d810
07:12:21  13  ,lg10-lg12 d1012
07:12:21  14  ,lg12-lg14 d1214
07:12:21  15  ,lg14-lg16 d1416
07:12:21  16  ,lg16-lg18 d1618
07:12:21  17  -- step by 4
07:12:21  18  ,lg6 -lg10 d610
07:12:21  19  ,lg8 -lg12 d812
07:12:21  20  ,lg10-lg14 d1014
07:12:21  21  ,lg12-lg16 d1216
07:12:21  22  --
07:12:21  23  ,ABS(clse-lg6 )dc6
07:12:21  24  ,ABS(clse-lg8 )dc8
07:12:21  25  ,ABS(clse-lg10)dc10
07:12:21  26  ,ABS(clse-lg12)dc12
07:12:21  27  ,ABS(clse-lg14)dc14
07:12:21  28  ,ABS(clse-lg16)dc16
07:12:21  29  ,ABS(clse-lg18)dc18
07:12:21  30  ,ABS(clse-lg20)dc20
07:12:21  31  ,ABS(clse-lg22)dc22
07:12:21  32  ,(ld8-clse) ug8
07:12:21  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:12:21  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:12:21  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:12:21  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:12:21  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:12:21  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:12:21  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:12:21  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
07:12:21  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
07:12:21  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
07:12:21  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
07:12:21  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
07:12:21  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
07:12:21  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:12:21  47  ,0+TO_CHAR(ydate,'D')d
07:12:21  48  ,0+TO_CHAR(ydate,'W')w
07:12:21  49  -- mpm stands for minutes-past-midnight:
07:12:21  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:12:21  51  FROM q11
07:12:21  52  -- I dont want any NULL values from the LAG() functions:
07:12:21  53  WHERE lg32 > 0
07:12:21  54  ORDER BY pair,ydate
07:12:21  55  /

Table created.

Elapsed: 00:00:01.67
07:12:23 SQL> 
07:12:23 SQL> -- rpt
07:12:23 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9558
	-1	   10800

Elapsed: 00:00:00.03
07:12:23 SQL> 
07:12:23 SQL> -- Calc gains and ntiles
07:12:23 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.15
07:12:23 SQL> CREATE TABLE q15 COMPRESS AS
07:12:23   2  SELECT
07:12:23   3  pair
07:12:23   4  ,ydate
07:12:23   5  ,prdate -- Should be unique
07:12:23   6  ,trend -- +1 or -1
07:12:23   7  -- Use NTILE() to derive some attributes
07:12:23   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
07:12:23   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
07:12:23  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
07:12:23  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
07:12:23  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
07:12:23  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
07:12:23  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
07:12:23  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
07:12:23  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
07:12:23  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
07:12:23  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
07:12:23  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
07:12:23  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
07:12:23  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
07:12:23  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
07:12:23  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
07:12:23  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
07:12:23  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
07:12:23  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
07:12:23  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
07:12:23  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
07:12:23  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
07:12:23  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
07:12:23  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
07:12:23  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
07:12:23  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
07:12:23  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
07:12:23  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
07:12:23  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
07:12:23  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
07:12:23  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
07:12:23  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
07:12:23  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
07:12:23  41  ,hh    att32
07:12:23  42  ,d     att33
07:12:23  43  ,w     att34
07:12:23  44  ,mpm   att35
07:12:23  45  ,trend att36
07:12:23  46  ,ug8 g8
07:12:23  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
07:12:23  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
07:12:23  49  FROM q13
07:12:23  50  ORDER BY pair,ydate
07:12:23  51  /

Table created.

Elapsed: 00:00:05.35
07:12:28 SQL> 
07:12:28 SQL> -- rpt
07:12:28 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
07:12:28   2  GROUP BY pair,trend,gatt,gattn
07:12:28   3  ORDER BY pair,trend,gatt,gattn
07:12:28   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_chf 	-1 nup nup .000023056	    4906
usd_chf 	-1 nup up  -.00495126	    3140
usd_chf 	-1 up  nup .005077328	    2658
usd_chf 	-1			       0
usd_chf 	 1 nup nup -.00001961	    4533
usd_chf 	 1 nup up  -.00452926	    2921
usd_chf 	 1 up  nup .004634476	    2104

7 rows selected.

Elapsed: 00:00:00.03
07:12:28 SQL> 
07:12:28 SQL> -- rpt
07:12:28 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_chf 2010-12-24 07:10:00

Elapsed: 00:00:00.02
07:12:28 SQL> 
07:12:28 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
07:12:29 SQL> CREATE TABLE modsrc COMPRESS AS
07:12:29   2  SELECT
07:12:29   3  pair
07:12:29   4  ,ydate
07:12:29   5  ,prdate
07:12:29   6  ,trend
07:12:29   7  ,g8
07:12:29   8  ,gatt
07:12:29   9  ,gattn
07:12:29  10  FROM q15
07:12:29  11  /

Table created.

Elapsed: 00:00:00.09
07:12:29 SQL> 
07:12:29 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.26
07:12:29 SQL> 
07:12:29 SQL> -- rpt
07:12:29 SQL> 
07:12:29 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20742

Elapsed: 00:00:00.33
07:12:29 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.01
07:12:29 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.01
07:12:29 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.00
07:12:29 SQL> 
07:12:29 SQL> DROP   TABLE chf_ms10 ;

Table dropped.

Elapsed: 00:00:00.03
07:12:29 SQL> CREATE TABLE chf_ms10 COMPRESS AS
07:12:29   2  SELECT
07:12:29   3  ydate
07:12:29   4  ,trend chf_trend
07:12:29   5  ,g8    chf_g8
07:12:29   6  ,gatt  chf_gatt
07:12:29   7  ,gattn chf_gattn
07:12:29   8  FROM modsrc
07:12:29   9  /

Table created.

Elapsed: 00:00:00.07
07:12:29 SQL> 
07:12:29 SQL> ANALYZE TABLE chf_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
07:12:30 SQL> 
07:12:30 SQL> -- rpt
07:12:30 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 15:15:01 2010-12-23 21:45:00	 9558	 -.01775      .0155
	-1 2010-09-16 20:55:01 2010-12-24 07:10:00	10704	 -.01825     .01545

Elapsed: 00:00:00.03
07:12:30 SQL> SELECT chf_trend,MIN(ydate),MAX(ydate),COUNT(chf_trend),MIN(chf_g8),MAX(chf_g8)FROM chf_ms10 GROUP BY chf_trend;

 CHF_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(CHF_TREND) MIN(CHF_G8) MAX(CHF_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 15:15:01 2010-12-23 21:45:00	       9558	-.01775       .0155
	-1 2010-09-16 20:55:01 2010-12-24 07:10:00	      10800	-.01825      .01545

Elapsed: 00:00:00.01
07:12:30 SQL> 
07:12:30 SQL> -- I need a copy of q15 attributes
07:12:30 SQL> 
07:12:30 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.17
07:12:30 SQL> CREATE TABLE chf_att COMPRESS AS
07:12:30   2  SELECT
07:12:30   3  ydate
07:12:30   4  ,att00 chf_att00
07:12:30   5  ,att01 chf_att01
07:12:30   6  ,att02 chf_att02
07:12:30   7  ,att03 chf_att03
07:12:30   8  ,att04 chf_att04
07:12:30   9  ,att05 chf_att05
07:12:30  10  ,att06 chf_att06
07:12:30  11  ,att07 chf_att07
07:12:30  12  ,att08 chf_att08
07:12:30  13  ,att09 chf_att09
07:12:30  14  ,att10 chf_att10
07:12:30  15  ,att11 chf_att11
07:12:30  16  ,att12 chf_att12
07:12:30  17  ,att13 chf_att13
07:12:30  18  ,att14 chf_att14
07:12:30  19  ,att15 chf_att15
07:12:30  20  ,att16 chf_att16
07:12:30  21  ,att17 chf_att17
07:12:30  22  ,att18 chf_att18
07:12:30  23  ,att19 chf_att19
07:12:30  24  ,att20 chf_att20
07:12:30  25  ,att21 chf_att21
07:12:30  26  ,att22 chf_att22
07:12:30  27  ,att23 chf_att23
07:12:30  28  ,att24 chf_att24
07:12:30  29  ,att25 chf_att25
07:12:30  30  ,att26 chf_att26
07:12:30  31  ,att27 chf_att27
07:12:30  32  ,att28 chf_att28
07:12:30  33  ,att29 chf_att29
07:12:30  34  ,att30 chf_att30
07:12:30  35  ,att31 chf_att31
07:12:30  36  ,att32 chf_att32
07:12:30  37  ,att33 chf_att33
07:12:30  38  ,att34 chf_att34
07:12:30  39  ,att35 chf_att35
07:12:30  40  ,att36 chf_att36
07:12:30  41  FROM q15
07:12:30  42  /

Table created.

Elapsed: 00:00:00.20
07:12:30 SQL> 
07:12:30 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
07:12:30 SQL> 
07:12:30 SQL> -- rpt
07:12:30 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     20358

Elapsed: 00:00:00.00
07:12:30 SQL> 
07:12:30 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
