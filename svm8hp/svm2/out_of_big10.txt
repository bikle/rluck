
SQL*Plus: Release 11.2.0.1.0 Production on Thu Dec 23 23:51:44 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

23:51:44 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
23:51:44 SQL> 23:51:44 SQL> --
23:51:44 SQL> -- eur10.sql
23:51:44 SQL> --
23:51:44 SQL> 
23:51:44 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:51:44 SQL> 
23:51:44 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.05
23:51:44 SQL> 
23:51:44 SQL> -- I created di5min here:
23:51:44 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:51:44 SQL> 
23:51:44 SQL> CREATE OR REPLACE VIEW q11 AS
23:51:44   2  SELECT
23:51:44   3  pair
23:51:44   4  ,ydate
23:51:44   5  ,prdate
23:51:44   6  ,rownum rnum -- acts as t in my time-series
23:51:44   7  ,clse
23:51:44   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
23:51:44   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
23:51:44  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
23:51:44  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
23:51:44  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
23:51:44  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
23:51:44  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
23:51:44  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
23:51:44  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
23:51:44  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
23:51:44  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
23:51:44  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
23:51:44  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
23:51:44  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
23:51:44  22  FROM di5min WHERE pair LIKE'%eur%'
23:51:44  23  ORDER BY ydate
23:51:44  24  /

View created.

Elapsed: 00:00:00.04
23:51:44 SQL> 
23:51:44 SQL> -- rpt
23:51:44 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
eur_usd        20742

Elapsed: 00:00:00.37
23:51:44 SQL> 
23:51:44 SQL> -- Calc deltas and gains
23:51:44 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.54
23:51:45 SQL> 
23:51:45 SQL> CREATE TABLE q13 COMPRESS AS
23:51:45   2  SELECT
23:51:45   3  pair
23:51:45   4  ,ydate
23:51:45   5  ,prdate
23:51:45   6  ,rnum
23:51:45   7  ,ld8
23:51:45   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
23:51:45   9  -- step by 2
23:51:45  10  ,clse-lg6  d06
23:51:45  11  ,lg6 -lg8  d68
23:51:45  12  ,lg8 -lg10 d810
23:51:45  13  ,lg10-lg12 d1012
23:51:45  14  ,lg12-lg14 d1214
23:51:45  15  ,lg14-lg16 d1416
23:51:45  16  ,lg16-lg18 d1618
23:51:45  17  -- step by 4
23:51:45  18  ,lg6 -lg10 d610
23:51:45  19  ,lg8 -lg12 d812
23:51:45  20  ,lg10-lg14 d1014
23:51:45  21  ,lg12-lg16 d1216
23:51:45  22  --
23:51:45  23  ,ABS(clse-lg6 )dc6
23:51:45  24  ,ABS(clse-lg8 )dc8
23:51:45  25  ,ABS(clse-lg10)dc10
23:51:45  26  ,ABS(clse-lg12)dc12
23:51:45  27  ,ABS(clse-lg14)dc14
23:51:45  28  ,ABS(clse-lg16)dc16
23:51:45  29  ,ABS(clse-lg18)dc18
23:51:45  30  ,ABS(clse-lg20)dc20
23:51:45  31  ,ABS(clse-lg22)dc22
23:51:45  32  ,(ld8-clse) ug8
23:51:45  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:51:45  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:51:45  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:51:45  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:51:45  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:51:45  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:51:45  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:51:45  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
23:51:45  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
23:51:45  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
23:51:45  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
23:51:45  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
23:51:45  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
23:51:45  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:51:45  47  ,0+TO_CHAR(ydate,'D')d
23:51:45  48  ,0+TO_CHAR(ydate,'W')w
23:51:45  49  -- mpm stands for minutes-past-midnight:
23:51:45  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:51:45  51  FROM q11
23:51:45  52  -- I dont want any NULL values from the LAG() functions:
23:51:45  53  WHERE lg32 > 0
23:51:45  54  ORDER BY pair,ydate
23:51:45  55  /

Table created.

Elapsed: 00:00:02.15
23:51:47 SQL> 
23:51:47 SQL> -- rpt
23:51:47 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	   10122
	-1	   10236

Elapsed: 00:00:00.04
23:51:47 SQL> 
23:51:47 SQL> -- Calc gains and ntiles
23:51:47 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.22
23:51:47 SQL> CREATE TABLE q15 COMPRESS AS
23:51:47   2  SELECT
23:51:47   3  pair
23:51:47   4  ,ydate
23:51:47   5  ,prdate -- Should be unique
23:51:47   6  ,trend -- +1 or -1
23:51:47   7  -- Use NTILE() to derive some attributes
23:51:47   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
23:51:47   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
23:51:47  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
23:51:47  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
23:51:47  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
23:51:47  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
23:51:47  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
23:51:47  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
23:51:47  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
23:51:47  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
23:51:47  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
23:51:47  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
23:51:47  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
23:51:47  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
23:51:47  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
23:51:47  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
23:51:47  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
23:51:47  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
23:51:47  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
23:51:47  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
23:51:47  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
23:51:47  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
23:51:47  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
23:51:47  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
23:51:47  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
23:51:47  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
23:51:47  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
23:51:47  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
23:51:47  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
23:51:47  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
23:51:47  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
23:51:47  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
23:51:47  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
23:51:47  41  ,hh    att32
23:51:47  42  ,d     att33
23:51:47  43  ,w     att34
23:51:47  44  ,mpm   att35
23:51:47  45  ,trend att36
23:51:47  46  ,ug8 g8
23:51:47  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
23:51:47  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
23:51:47  49  FROM q13
23:51:47  50  ORDER BY pair,ydate
23:51:47  51  /

Table created.

Elapsed: 00:00:05.55
23:51:53 SQL> 
23:51:53 SQL> -- rpt
23:51:53 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
23:51:53   2  GROUP BY pair,trend,gatt,gattn
23:51:53   3  ORDER BY pair,trend,gatt,gattn
23:51:53   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
eur_usd 	-1 nup nup .000024743	    3019
eur_usd 	-1 nup up  -.00602802	    3651
eur_usd 	-1 up  nup  .00576199	    3552
eur_usd 	-1			       0
eur_usd 	 1 nup nup -.00009925	    2951
eur_usd 	 1 nup up  -.00625215	    3472
eur_usd 	 1 up  nup .006581445	    3617
eur_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
23:51:53 SQL> 
23:51:53 SQL> -- rpt
23:51:53 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
eur_usd 2010-12-23 23:45:00

Elapsed: 00:00:00.01
23:51:53 SQL> 
23:51:53 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
23:51:53 SQL> CREATE TABLE modsrc COMPRESS AS
23:51:53   2  SELECT
23:51:53   3  pair
23:51:53   4  ,ydate
23:51:53   5  ,prdate
23:51:53   6  ,trend
23:51:53   7  ,g8
23:51:53   8  ,gatt
23:51:53   9  ,gattn
23:51:53  10  FROM q15
23:51:53  11  /

Table created.

Elapsed: 00:00:00.09
23:51:53 SQL> 
23:51:53 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
23:51:53 SQL> 
23:51:53 SQL> -- rpt
23:51:53 SQL> 
23:51:53 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20742

Elapsed: 00:00:00.35
23:51:54 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.01
23:51:54 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.00
23:51:54 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.01
23:51:54 SQL> 
23:51:54 SQL> DROP   TABLE eur_ms10 ;

Table dropped.

Elapsed: 00:00:00.04
23:51:54 SQL> CREATE TABLE eur_ms10 COMPRESS AS
23:51:54   2  SELECT
23:51:54   3  ydate
23:51:54   4  ,trend eur_trend
23:51:54   5  ,g8    eur_g8
23:51:54   6  ,gatt  eur_gatt
23:51:54   7  ,gattn eur_gattn
23:51:54   8  FROM modsrc
23:51:54   9  /

Table created.

Elapsed: 00:00:00.08
23:51:54 SQL> 
23:51:54 SQL> ANALYZE TABLE eur_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
23:51:54 SQL> 
23:51:54 SQL> -- rpt
23:51:54 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 07:55:01 2010-12-23 23:45:00	10040	  -.0218     .02165
	-1 2010-09-16 17:15:01 2010-12-23 18:05:00	10222	 -.02085      .0196

Elapsed: 00:00:00.03
23:51:54 SQL> SELECT eur_trend,MIN(ydate),MAX(ydate),COUNT(eur_trend),MIN(eur_g8),MAX(eur_g8)FROM eur_ms10 GROUP BY eur_trend;

 EUR_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(EUR_TREND) MIN(EUR_G8) MAX(EUR_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 07:55:01 2010-12-23 23:45:00	      10122	 -.0218      .02165
	-1 2010-09-16 17:15:01 2010-12-23 18:05:00	      10236	-.02085       .0196

Elapsed: 00:00:00.01
23:51:54 SQL> 
23:51:54 SQL> -- I need a copy of q15 attributes
23:51:54 SQL> 
23:51:54 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.09
23:51:54 SQL> CREATE TABLE eur_att COMPRESS AS
23:51:54   2  SELECT
23:51:54   3  ydate
23:51:54   4  ,att00 eur_att00
23:51:54   5  ,att01 eur_att01
23:51:54   6  ,att02 eur_att02
23:51:54   7  ,att03 eur_att03
23:51:54   8  ,att04 eur_att04
23:51:54   9  ,att05 eur_att05
23:51:54  10  ,att06 eur_att06
23:51:54  11  ,att07 eur_att07
23:51:54  12  ,att08 eur_att08
23:51:54  13  ,att09 eur_att09
23:51:54  14  ,att10 eur_att10
23:51:54  15  ,att11 eur_att11
23:51:54  16  ,att12 eur_att12
23:51:54  17  ,att13 eur_att13
23:51:54  18  ,att14 eur_att14
23:51:54  19  ,att15 eur_att15
23:51:54  20  ,att16 eur_att16
23:51:54  21  ,att17 eur_att17
23:51:54  22  ,att18 eur_att18
23:51:54  23  ,att19 eur_att19
23:51:54  24  ,att20 eur_att20
23:51:54  25  ,att21 eur_att21
23:51:54  26  ,att22 eur_att22
23:51:54  27  ,att23 eur_att23
23:51:54  28  ,att24 eur_att24
23:51:54  29  ,att25 eur_att25
23:51:54  30  ,att26 eur_att26
23:51:54  31  ,att27 eur_att27
23:51:54  32  ,att28 eur_att28
23:51:54  33  ,att29 eur_att29
23:51:54  34  ,att30 eur_att30
23:51:54  35  ,att31 eur_att31
23:51:54  36  ,att32 eur_att32
23:51:54  37  ,att33 eur_att33
23:51:54  38  ,att34 eur_att34
23:51:54  39  ,att35 eur_att35
23:51:54  40  ,att36 eur_att36
23:51:54  41  FROM q15
23:51:54  42  /

Table created.

Elapsed: 00:00:00.19
23:51:54 SQL> 
23:51:54 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.53
23:51:55 SQL> 
23:51:55 SQL> -- rpt
23:51:55 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     20358

Elapsed: 00:00:00.00
23:51:55 SQL> 
23:51:55 SQL> --
23:51:55 SQL> -- aud10.sql
23:51:55 SQL> --
23:51:55 SQL> 
23:51:55 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:51:55 SQL> 
23:51:55 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.32
23:51:55 SQL> 
23:51:55 SQL> -- I created di5min here:
23:51:55 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:51:55 SQL> 
23:51:55 SQL> CREATE OR REPLACE VIEW q11 AS
23:51:55   2  SELECT
23:51:55   3  pair
23:51:55   4  ,ydate
23:51:55   5  ,prdate
23:51:55   6  ,rownum rnum -- acts as t in my time-series
23:51:55   7  ,clse
23:51:55   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
23:51:55   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
23:51:55  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
23:51:55  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
23:51:55  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
23:51:55  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
23:51:55  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
23:51:55  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
23:51:55  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
23:51:55  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
23:51:55  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
23:51:55  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
23:51:55  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
23:51:55  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
23:51:55  22  FROM di5min WHERE pair LIKE'%aud%'
23:51:55  23  ORDER BY ydate
23:51:55  24  /

View created.

Elapsed: 00:00:00.04
23:51:55 SQL> 
23:51:55 SQL> -- rpt
23:51:55 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
aud_usd        20739

Elapsed: 00:00:00.38
23:51:56 SQL> 
23:51:56 SQL> -- Calc deltas and gains
23:51:56 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.23
23:51:56 SQL> 
23:51:56 SQL> CREATE TABLE q13 COMPRESS AS
23:51:56   2  SELECT
23:51:56   3  pair
23:51:56   4  ,ydate
23:51:56   5  ,prdate
23:51:56   6  ,rnum
23:51:56   7  ,ld8
23:51:56   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
23:51:56   9  -- step by 2
23:51:56  10  ,clse-lg6  d06
23:51:56  11  ,lg6 -lg8  d68
23:51:56  12  ,lg8 -lg10 d810
23:51:56  13  ,lg10-lg12 d1012
23:51:56  14  ,lg12-lg14 d1214
23:51:56  15  ,lg14-lg16 d1416
23:51:56  16  ,lg16-lg18 d1618
23:51:56  17  -- step by 4
23:51:56  18  ,lg6 -lg10 d610
23:51:56  19  ,lg8 -lg12 d812
23:51:56  20  ,lg10-lg14 d1014
23:51:56  21  ,lg12-lg16 d1216
23:51:56  22  --
23:51:56  23  ,ABS(clse-lg6 )dc6
23:51:56  24  ,ABS(clse-lg8 )dc8
23:51:56  25  ,ABS(clse-lg10)dc10
23:51:56  26  ,ABS(clse-lg12)dc12
23:51:56  27  ,ABS(clse-lg14)dc14
23:51:56  28  ,ABS(clse-lg16)dc16
23:51:56  29  ,ABS(clse-lg18)dc18
23:51:56  30  ,ABS(clse-lg20)dc20
23:51:56  31  ,ABS(clse-lg22)dc22
23:51:56  32  ,(ld8-clse) ug8
23:51:56  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:51:56  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:51:56  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:51:56  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:51:56  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:51:56  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:51:56  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:51:56  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
23:51:56  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
23:51:56  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
23:51:56  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
23:51:56  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
23:51:56  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
23:51:56  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:51:56  47  ,0+TO_CHAR(ydate,'D')d
23:51:56  48  ,0+TO_CHAR(ydate,'W')w
23:51:56  49  -- mpm stands for minutes-past-midnight:
23:51:56  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:51:56  51  FROM q11
23:51:56  52  -- I dont want any NULL values from the LAG() functions:
23:51:56  53  WHERE lg32 > 0
23:51:56  54  ORDER BY pair,ydate
23:51:56  55  /

Table created.

Elapsed: 00:00:01.76
23:51:58 SQL> 
23:51:58 SQL> -- rpt
23:51:58 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	   10847
	-1	    9508

Elapsed: 00:00:00.03
23:51:58 SQL> 
23:51:58 SQL> -- Calc gains and ntiles
23:51:58 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.13
23:51:58 SQL> CREATE TABLE q15 COMPRESS AS
23:51:58   2  SELECT
23:51:58   3  pair
23:51:58   4  ,ydate
23:51:58   5  ,prdate -- Should be unique
23:51:58   6  ,trend -- +1 or -1
23:51:58   7  -- Use NTILE() to derive some attributes
23:51:58   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
23:51:58   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
23:51:58  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
23:51:58  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
23:51:58  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
23:51:58  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
23:51:58  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
23:51:58  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
23:51:58  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
23:51:58  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
23:51:58  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
23:51:58  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
23:51:58  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
23:51:58  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
23:51:58  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
23:51:58  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
23:51:58  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
23:51:58  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
23:51:58  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
23:51:58  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
23:51:58  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
23:51:58  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
23:51:58  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
23:51:58  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
23:51:58  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
23:51:58  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
23:51:58  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
23:51:58  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
23:51:58  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
23:51:58  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
23:51:58  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
23:51:58  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
23:51:58  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
23:51:58  41  ,hh    att32
23:51:58  42  ,d     att33
23:51:58  43  ,w     att34
23:51:58  44  ,mpm   att35
23:51:58  45  ,trend att36
23:51:58  46  ,ug8 g8
23:51:58  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
23:51:58  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
23:51:58  49  FROM q13
23:51:58  50  ORDER BY pair,ydate
23:51:58  51  /

Table created.

Elapsed: 00:00:05.31
23:52:03 SQL> 
23:52:03 SQL> -- rpt
23:52:03 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
23:52:03   2  GROUP BY pair,trend,gatt,gattn
23:52:03   3  ORDER BY pair,trend,gatt,gattn
23:52:03   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
aud_usd 	-1 nup nup  .00003651	    3534
aud_usd 	-1 nup up  -.00523332	    2544
aud_usd 	-1 up  nup .005173898	    3402
aud_usd 	-1			       0
aud_usd 	 1 nup nup .000033092	    4339
aud_usd 	 1 nup up  -.00500133	    3061
aud_usd 	 1 up  nup .005093811	    3379
aud_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
23:52:03 SQL> 
23:52:03 SQL> -- rpt
23:52:03 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
aud_usd 2010-12-23 23:45:00

Elapsed: 00:00:00.02
23:52:03 SQL> 
23:52:03 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.16
23:52:03 SQL> CREATE TABLE modsrc COMPRESS AS
23:52:03   2  SELECT
23:52:03   3  pair
23:52:03   4  ,ydate
23:52:03   5  ,prdate
23:52:03   6  ,trend
23:52:03   7  ,g8
23:52:03   8  ,gatt
23:52:03   9  ,gattn
23:52:03  10  FROM q15
23:52:03  11  /

Table created.

Elapsed: 00:00:00.08
23:52:04 SQL> 
23:52:04 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
23:52:04 SQL> 
23:52:04 SQL> -- rpt
23:52:04 SQL> 
23:52:04 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20739

Elapsed: 00:00:00.35
23:52:04 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20355

Elapsed: 00:00:00.01
23:52:04 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20355

Elapsed: 00:00:00.00
23:52:04 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20355

Elapsed: 00:00:00.01
23:52:04 SQL> 
23:52:04 SQL> DROP   TABLE aud_ms10 ;

Table dropped.

Elapsed: 00:00:00.04
23:52:04 SQL> CREATE TABLE aud_ms10 COMPRESS AS
23:52:04   2  SELECT
23:52:04   3  ydate
23:52:04   4  ,trend aud_trend
23:52:04   5  ,g8    aud_g8
23:52:04   6  ,gatt  aud_gatt
23:52:04   7  ,gattn aud_gattn
23:52:04   8  FROM modsrc
23:52:04   9  /

Table created.

Elapsed: 00:00:00.07
23:52:04 SQL> 
23:52:04 SQL> ANALYZE TABLE aud_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
23:52:04 SQL> 
23:52:04 SQL> -- rpt
23:52:04 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 09:00:01 2010-12-23 23:45:00	10779	  -.0203      .0136
	-1 2010-09-16 07:55:01 2010-12-23 23:25:00	 9480	  -.0196      .0148

Elapsed: 00:00:00.02
23:52:04 SQL> SELECT aud_trend,MIN(ydate),MAX(ydate),COUNT(aud_trend),MIN(aud_g8),MAX(aud_g8)FROM aud_ms10 GROUP BY aud_trend;

 AUD_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(AUD_TREND) MIN(AUD_G8) MAX(AUD_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 09:00:01 2010-12-23 23:45:00	      10847	 -.0203       .0136
	-1 2010-09-16 07:55:01 2010-12-23 23:25:00	       9508	 -.0196       .0148

Elapsed: 00:00:00.01
23:52:04 SQL> 
23:52:04 SQL> -- I need a copy of q15 attributes
23:52:04 SQL> 
23:52:04 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.20
23:52:05 SQL> CREATE TABLE aud_att COMPRESS AS
23:52:05   2  SELECT
23:52:05   3  ydate
23:52:05   4  ,att00 aud_att00
23:52:05   5  ,att01 aud_att01
23:52:05   6  ,att02 aud_att02
23:52:05   7  ,att03 aud_att03
23:52:05   8  ,att04 aud_att04
23:52:05   9  ,att05 aud_att05
23:52:05  10  ,att06 aud_att06
23:52:05  11  ,att07 aud_att07
23:52:05  12  ,att08 aud_att08
23:52:05  13  ,att09 aud_att09
23:52:05  14  ,att10 aud_att10
23:52:05  15  ,att11 aud_att11
23:52:05  16  ,att12 aud_att12
23:52:05  17  ,att13 aud_att13
23:52:05  18  ,att14 aud_att14
23:52:05  19  ,att15 aud_att15
23:52:05  20  ,att16 aud_att16
23:52:05  21  ,att17 aud_att17
23:52:05  22  ,att18 aud_att18
23:52:05  23  ,att19 aud_att19
23:52:05  24  ,att20 aud_att20
23:52:05  25  ,att21 aud_att21
23:52:05  26  ,att22 aud_att22
23:52:05  27  ,att23 aud_att23
23:52:05  28  ,att24 aud_att24
23:52:05  29  ,att25 aud_att25
23:52:05  30  ,att26 aud_att26
23:52:05  31  ,att27 aud_att27
23:52:05  32  ,att28 aud_att28
23:52:05  33  ,att29 aud_att29
23:52:05  34  ,att30 aud_att30
23:52:05  35  ,att31 aud_att31
23:52:05  36  ,att32 aud_att32
23:52:05  37  ,att33 aud_att33
23:52:05  38  ,att34 aud_att34
23:52:05  39  ,att35 aud_att35
23:52:05  40  ,att36 aud_att36
23:52:05  41  FROM q15
23:52:05  42  /

Table created.

Elapsed: 00:00:00.19
23:52:05 SQL> 
23:52:05 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
23:52:05 SQL> 
23:52:05 SQL> -- rpt
23:52:05 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     20355

Elapsed: 00:00:00.00
23:52:05 SQL> 
23:52:05 SQL> --
23:52:05 SQL> -- gbp10.sql
23:52:05 SQL> --
23:52:05 SQL> 
23:52:05 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:52:05 SQL> 
23:52:05 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.97
23:52:06 SQL> 
23:52:06 SQL> -- I created di5min here:
23:52:06 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:52:06 SQL> 
23:52:06 SQL> CREATE OR REPLACE VIEW q11 AS
23:52:06   2  SELECT
23:52:06   3  pair
23:52:06   4  ,ydate
23:52:06   5  ,prdate
23:52:06   6  ,rownum rnum -- acts as t in my time-series
23:52:06   7  ,clse
23:52:06   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
23:52:06   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
23:52:06  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
23:52:06  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
23:52:06  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
23:52:06  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
23:52:06  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
23:52:06  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
23:52:06  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
23:52:06  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
23:52:06  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
23:52:06  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
23:52:06  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
23:52:06  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
23:52:06  22  FROM di5min WHERE pair LIKE'%gbp%'
23:52:06  23  ORDER BY ydate
23:52:06  24  /

View created.

Elapsed: 00:00:00.04
23:52:06 SQL> 
23:52:06 SQL> -- rpt
23:52:06 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
gbp_usd        20742

Elapsed: 00:00:00.35
23:52:07 SQL> 
23:52:07 SQL> -- Calc deltas and gains
23:52:07 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.24
23:52:07 SQL> 
23:52:07 SQL> CREATE TABLE q13 COMPRESS AS
23:52:07   2  SELECT
23:52:07   3  pair
23:52:07   4  ,ydate
23:52:07   5  ,prdate
23:52:07   6  ,rnum
23:52:07   7  ,ld8
23:52:07   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
23:52:07   9  -- step by 2
23:52:07  10  ,clse-lg6  d06
23:52:07  11  ,lg6 -lg8  d68
23:52:07  12  ,lg8 -lg10 d810
23:52:07  13  ,lg10-lg12 d1012
23:52:07  14  ,lg12-lg14 d1214
23:52:07  15  ,lg14-lg16 d1416
23:52:07  16  ,lg16-lg18 d1618
23:52:07  17  -- step by 4
23:52:07  18  ,lg6 -lg10 d610
23:52:07  19  ,lg8 -lg12 d812
23:52:07  20  ,lg10-lg14 d1014
23:52:07  21  ,lg12-lg16 d1216
23:52:07  22  --
23:52:07  23  ,ABS(clse-lg6 )dc6
23:52:07  24  ,ABS(clse-lg8 )dc8
23:52:07  25  ,ABS(clse-lg10)dc10
23:52:07  26  ,ABS(clse-lg12)dc12
23:52:07  27  ,ABS(clse-lg14)dc14
23:52:07  28  ,ABS(clse-lg16)dc16
23:52:07  29  ,ABS(clse-lg18)dc18
23:52:07  30  ,ABS(clse-lg20)dc20
23:52:07  31  ,ABS(clse-lg22)dc22
23:52:07  32  ,(ld8-clse) ug8
23:52:07  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:52:07  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:52:07  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:52:07  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:52:07  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:52:07  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:52:07  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:52:07  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
23:52:07  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
23:52:07  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
23:52:07  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
23:52:07  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
23:52:07  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
23:52:07  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:52:07  47  ,0+TO_CHAR(ydate,'D')d
23:52:07  48  ,0+TO_CHAR(ydate,'W')w
23:52:07  49  -- mpm stands for minutes-past-midnight:
23:52:07  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:52:07  51  FROM q11
23:52:07  52  -- I dont want any NULL values from the LAG() functions:
23:52:07  53  WHERE lg32 > 0
23:52:07  54  ORDER BY pair,ydate
23:52:07  55  /

Table created.

Elapsed: 00:00:01.71
23:52:09 SQL> 
23:52:09 SQL> -- rpt
23:52:09 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9936
	-1	   10422

Elapsed: 00:00:00.03
23:52:09 SQL> 
23:52:09 SQL> -- Calc gains and ntiles
23:52:09 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.16
23:52:09 SQL> CREATE TABLE q15 COMPRESS AS
23:52:09   2  SELECT
23:52:09   3  pair
23:52:09   4  ,ydate
23:52:09   5  ,prdate -- Should be unique
23:52:09   6  ,trend -- +1 or -1
23:52:09   7  -- Use NTILE() to derive some attributes
23:52:09   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
23:52:09   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
23:52:09  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
23:52:09  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
23:52:09  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
23:52:09  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
23:52:09  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
23:52:09  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
23:52:09  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
23:52:09  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
23:52:09  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
23:52:09  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
23:52:09  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
23:52:09  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
23:52:09  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
23:52:09  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
23:52:09  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
23:52:09  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
23:52:09  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
23:52:09  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
23:52:09  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
23:52:09  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
23:52:09  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
23:52:09  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
23:52:09  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
23:52:09  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
23:52:09  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
23:52:09  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
23:52:09  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
23:52:09  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
23:52:09  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
23:52:09  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
23:52:09  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
23:52:09  41  ,hh    att32
23:52:09  42  ,d     att33
23:52:09  43  ,w     att34
23:52:09  44  ,mpm   att35
23:52:09  45  ,trend att36
23:52:09  46  ,ug8 g8
23:52:09  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
23:52:09  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
23:52:09  49  FROM q13
23:52:09  50  ORDER BY pair,ydate
23:52:09  51  /

Table created.

Elapsed: 00:00:05.64
23:52:14 SQL> 
23:52:14 SQL> -- rpt
23:52:14 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
23:52:14   2  GROUP BY pair,trend,gatt,gattn
23:52:14   3  ORDER BY pair,trend,gatt,gattn
23:52:14   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
gbp_usd 	-1 nup nup .000096235	    3851
gbp_usd 	-1 nup up   -.0059004	    3270
gbp_usd 	-1 up  nup .005448676	    3295
gbp_usd 	-1			       0
gbp_usd 	 1 nup nup  -.0000827	    3636
gbp_usd 	 1 nup up  -.00554744	    3271
gbp_usd 	 1 up  nup .006010675	    2939
gbp_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
23:52:14 SQL> 
23:52:14 SQL> -- rpt
23:52:14 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
gbp_usd 2010-12-23 23:50:00

Elapsed: 00:00:00.02
23:52:14 SQL> 
23:52:14 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.31
23:52:15 SQL> CREATE TABLE modsrc COMPRESS AS
23:52:15   2  SELECT
23:52:15   3  pair
23:52:15   4  ,ydate
23:52:15   5  ,prdate
23:52:15   6  ,trend
23:52:15   7  ,g8
23:52:15   8  ,gatt
23:52:15   9  ,gattn
23:52:15  10  FROM q15
23:52:15  11  /

Table created.

Elapsed: 00:00:00.21
23:52:15 SQL> 
23:52:15 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.28
23:52:15 SQL> 
23:52:15 SQL> -- rpt
23:52:15 SQL> 
23:52:15 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20742

Elapsed: 00:00:00.38
23:52:16 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.00
23:52:16 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.02
23:52:16 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.00
23:52:16 SQL> 
23:52:16 SQL> DROP   TABLE gbp_ms10 ;

Table dropped.

Elapsed: 00:00:00.04
23:52:16 SQL> CREATE TABLE gbp_ms10 COMPRESS AS
23:52:16   2  SELECT
23:52:16   3  ydate
23:52:16   4  ,trend gbp_trend
23:52:16   5  ,g8    gbp_g8
23:52:16   6  ,gatt  gbp_gatt
23:52:16   7  ,gattn gbp_gattn
23:52:16   8  FROM modsrc
23:52:16   9  /

Table created.

Elapsed: 00:00:00.07
23:52:16 SQL> 
23:52:16 SQL> ANALYZE TABLE gbp_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
23:52:16 SQL> 
23:52:16 SQL> -- rpt
23:52:16 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 10:50:01 2010-12-23 23:50:00	 9846	  -.0231       .019
	-1 2010-09-16 07:55:01 2010-12-23 22:50:00	10416	    -.02      .0204

Elapsed: 00:00:00.03
23:52:16 SQL> SELECT gbp_trend,MIN(ydate),MAX(ydate),COUNT(gbp_trend),MIN(gbp_g8),MAX(gbp_g8)FROM gbp_ms10 GROUP BY gbp_trend;

 GBP_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(GBP_TREND) MIN(GBP_G8) MAX(GBP_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 10:50:01 2010-12-23 23:50:00	       9936	 -.0231        .019
	-1 2010-09-16 07:55:01 2010-12-23 22:50:00	      10422	   -.02       .0204

Elapsed: 00:00:00.01
23:52:16 SQL> 
23:52:16 SQL> -- I need a copy of q15 attributes
23:52:16 SQL> 
23:52:16 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.06
23:52:16 SQL> CREATE TABLE gbp_att COMPRESS AS
23:52:16   2  SELECT
23:52:16   3  ydate
23:52:16   4  ,att00 gbp_att00
23:52:16   5  ,att01 gbp_att01
23:52:16   6  ,att02 gbp_att02
23:52:16   7  ,att03 gbp_att03
23:52:16   8  ,att04 gbp_att04
23:52:16   9  ,att05 gbp_att05
23:52:16  10  ,att06 gbp_att06
23:52:16  11  ,att07 gbp_att07
23:52:16  12  ,att08 gbp_att08
23:52:16  13  ,att09 gbp_att09
23:52:16  14  ,att10 gbp_att10
23:52:16  15  ,att11 gbp_att11
23:52:16  16  ,att12 gbp_att12
23:52:16  17  ,att13 gbp_att13
23:52:16  18  ,att14 gbp_att14
23:52:16  19  ,att15 gbp_att15
23:52:16  20  ,att16 gbp_att16
23:52:16  21  ,att17 gbp_att17
23:52:16  22  ,att18 gbp_att18
23:52:16  23  ,att19 gbp_att19
23:52:16  24  ,att20 gbp_att20
23:52:16  25  ,att21 gbp_att21
23:52:16  26  ,att22 gbp_att22
23:52:16  27  ,att23 gbp_att23
23:52:16  28  ,att24 gbp_att24
23:52:16  29  ,att25 gbp_att25
23:52:16  30  ,att26 gbp_att26
23:52:16  31  ,att27 gbp_att27
23:52:16  32  ,att28 gbp_att28
23:52:16  33  ,att29 gbp_att29
23:52:16  34  ,att30 gbp_att30
23:52:16  35  ,att31 gbp_att31
23:52:16  36  ,att32 gbp_att32
23:52:16  37  ,att33 gbp_att33
23:52:16  38  ,att34 gbp_att34
23:52:16  39  ,att35 gbp_att35
23:52:16  40  ,att36 gbp_att36
23:52:16  41  FROM q15
23:52:16  42  /

Table created.

Elapsed: 00:00:00.20
23:52:16 SQL> 
23:52:16 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.60
23:52:17 SQL> 
23:52:17 SQL> -- rpt
23:52:17 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     20358

Elapsed: 00:00:00.01
23:52:17 SQL> 
23:52:17 SQL> --
23:52:17 SQL> -- jpy10.sql
23:52:17 SQL> --
23:52:17 SQL> 
23:52:17 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:52:17 SQL> 
23:52:17 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.02
23:52:17 SQL> 
23:52:17 SQL> -- I created di5min here:
23:52:17 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:52:17 SQL> 
23:52:17 SQL> CREATE OR REPLACE VIEW q11 AS
23:52:17   2  SELECT
23:52:17   3  pair
23:52:17   4  ,ydate
23:52:17   5  ,prdate
23:52:17   6  ,rownum rnum -- acts as t in my time-series
23:52:17   7  ,clse
23:52:17   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
23:52:17   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
23:52:17  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
23:52:17  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
23:52:17  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
23:52:17  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
23:52:17  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
23:52:17  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
23:52:17  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
23:52:17  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
23:52:17  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
23:52:17  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
23:52:17  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
23:52:17  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
23:52:17  22  FROM di5min WHERE pair LIKE'%jpy%'
23:52:17  23  ORDER BY ydate
23:52:17  24  /

View created.

Elapsed: 00:00:00.14
23:52:17 SQL> 
23:52:17 SQL> -- rpt
23:52:17 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_jpy        20741

Elapsed: 00:00:00.35
23:52:17 SQL> 
23:52:17 SQL> -- Calc deltas and gains
23:52:17 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.28
23:52:18 SQL> 
23:52:18 SQL> CREATE TABLE q13 COMPRESS AS
23:52:18   2  SELECT
23:52:18   3  pair
23:52:18   4  ,ydate
23:52:18   5  ,prdate
23:52:18   6  ,rnum
23:52:18   7  ,ld8
23:52:18   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
23:52:18   9  -- step by 2
23:52:18  10  ,clse-lg6  d06
23:52:18  11  ,lg6 -lg8  d68
23:52:18  12  ,lg8 -lg10 d810
23:52:18  13  ,lg10-lg12 d1012
23:52:18  14  ,lg12-lg14 d1214
23:52:18  15  ,lg14-lg16 d1416
23:52:18  16  ,lg16-lg18 d1618
23:52:18  17  -- step by 4
23:52:18  18  ,lg6 -lg10 d610
23:52:18  19  ,lg8 -lg12 d812
23:52:18  20  ,lg10-lg14 d1014
23:52:18  21  ,lg12-lg16 d1216
23:52:18  22  --
23:52:18  23  ,ABS(clse-lg6 )dc6
23:52:18  24  ,ABS(clse-lg8 )dc8
23:52:18  25  ,ABS(clse-lg10)dc10
23:52:18  26  ,ABS(clse-lg12)dc12
23:52:18  27  ,ABS(clse-lg14)dc14
23:52:18  28  ,ABS(clse-lg16)dc16
23:52:18  29  ,ABS(clse-lg18)dc18
23:52:18  30  ,ABS(clse-lg20)dc20
23:52:18  31  ,ABS(clse-lg22)dc22
23:52:18  32  ,(ld8-clse) ug8
23:52:18  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:52:18  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:52:18  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:52:18  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:52:18  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:52:18  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:52:18  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:52:18  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
23:52:18  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
23:52:18  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
23:52:18  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
23:52:18  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
23:52:18  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
23:52:18  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:52:18  47  ,0+TO_CHAR(ydate,'D')d
23:52:18  48  ,0+TO_CHAR(ydate,'W')w
23:52:18  49  -- mpm stands for minutes-past-midnight:
23:52:18  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:52:18  51  FROM q11
23:52:18  52  -- I dont want any NULL values from the LAG() functions:
23:52:18  53  WHERE lg32 > 0
23:52:18  54  ORDER BY pair,ydate
23:52:18  55  /

Table created.

Elapsed: 00:00:01.74
23:52:19 SQL> 
23:52:19 SQL> -- rpt
23:52:19 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9417
	-1	   10940

Elapsed: 00:00:00.03
23:52:19 SQL> 
23:52:19 SQL> -- Calc gains and ntiles
23:52:19 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.23
23:52:20 SQL> CREATE TABLE q15 COMPRESS AS
23:52:20   2  SELECT
23:52:20   3  pair
23:52:20   4  ,ydate
23:52:20   5  ,prdate -- Should be unique
23:52:20   6  ,trend -- +1 or -1
23:52:20   7  -- Use NTILE() to derive some attributes
23:52:20   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
23:52:20   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
23:52:20  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
23:52:20  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
23:52:20  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
23:52:20  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
23:52:20  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
23:52:20  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
23:52:20  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
23:52:20  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
23:52:20  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
23:52:20  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
23:52:20  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
23:52:20  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
23:52:20  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
23:52:20  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
23:52:20  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
23:52:20  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
23:52:20  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
23:52:20  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
23:52:20  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
23:52:20  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
23:52:20  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
23:52:20  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
23:52:20  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
23:52:20  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
23:52:20  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
23:52:20  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
23:52:20  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
23:52:20  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
23:52:20  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
23:52:20  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
23:52:20  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
23:52:20  41  ,hh    att32
23:52:20  42  ,d     att33
23:52:20  43  ,w     att34
23:52:20  44  ,mpm   att35
23:52:20  45  ,trend att36
23:52:20  46  ,ug8 g8
23:52:20  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
23:52:20  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
23:52:20  49  FROM q13
23:52:20  50  ORDER BY pair,ydate
23:52:20  51  /

Table created.

Elapsed: 00:00:05.55
23:52:25 SQL> 
23:52:25 SQL> -- rpt
23:52:25 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
23:52:25   2  GROUP BY pair,trend,gatt,gattn
23:52:25   3  ORDER BY pair,trend,gatt,gattn
23:52:25   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_jpy 	-1 nup nup 7.4441E-06	     168
usd_jpy 	-1 nup up  -.18457766	    5514
usd_jpy 	-1 up  nup .180699619	    5181
usd_jpy 	-1			       0
usd_jpy 	 1 nup nup	    0	     118
usd_jpy 	 1 nup up  -.18877989	    5134
usd_jpy 	 1 up  nup .191490592	    4146
usd_jpy 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
23:52:25 SQL> 
23:52:25 SQL> -- rpt
23:52:25 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_jpy 2010-12-23 23:50:00

Elapsed: 00:00:00.02
23:52:25 SQL> 
23:52:25 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
23:52:25 SQL> CREATE TABLE modsrc COMPRESS AS
23:52:25   2  SELECT
23:52:25   3  pair
23:52:25   4  ,ydate
23:52:25   5  ,prdate
23:52:25   6  ,trend
23:52:25   7  ,g8
23:52:25   8  ,gatt
23:52:25   9  ,gattn
23:52:25  10  FROM q15
23:52:25  11  /

Table created.

Elapsed: 00:00:00.12
23:52:26 SQL> 
23:52:26 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
23:52:26 SQL> 
23:52:26 SQL> -- rpt
23:52:26 SQL> 
23:52:26 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20741

Elapsed: 00:00:00.38
23:52:26 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20357

Elapsed: 00:00:00.00
23:52:26 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20357

Elapsed: 00:00:00.01
23:52:26 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20357

Elapsed: 00:00:00.00
23:52:26 SQL> 
23:52:26 SQL> DROP   TABLE jpy_ms10 ;

Table dropped.

Elapsed: 00:00:00.04
23:52:26 SQL> CREATE TABLE jpy_ms10 COMPRESS AS
23:52:26   2  SELECT
23:52:26   3  ydate
23:52:26   4  ,trend jpy_trend
23:52:26   5  ,g8    jpy_g8
23:52:26   6  ,gatt  jpy_gatt
23:52:26   7  ,gattn jpy_gattn
23:52:26   8  FROM modsrc
23:52:26   9  /

Table created.

Elapsed: 00:00:00.10
23:52:26 SQL> 
23:52:26 SQL> ANALYZE TABLE jpy_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
23:52:26 SQL> 
23:52:26 SQL> -- rpt
23:52:26 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 08:15:01 2010-12-23 19:45:00	 9398	  -1.185	  1
	-1 2010-09-16 07:55:01 2010-12-23 23:50:00	10863	 -1.0575       1.32

Elapsed: 00:00:00.03
23:52:26 SQL> SELECT jpy_trend,MIN(ydate),MAX(ydate),COUNT(jpy_trend),MIN(jpy_g8),MAX(jpy_g8)FROM jpy_ms10 GROUP BY jpy_trend;

 JPY_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(JPY_TREND) MIN(JPY_G8) MAX(JPY_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 08:15:01 2010-12-23 19:45:00	       9417	 -1.185 	  1
	-1 2010-09-16 07:55:01 2010-12-23 23:50:00	      10940	-1.0575        1.32

Elapsed: 00:00:00.01
23:52:26 SQL> 
23:52:26 SQL> -- I need a copy of q15 attributes
23:52:26 SQL> 
23:52:26 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.04
23:52:26 SQL> CREATE TABLE jpy_att COMPRESS AS
23:52:26   2  SELECT
23:52:26   3  ydate
23:52:26   4  ,att00 jpy_att00
23:52:26   5  ,att01 jpy_att01
23:52:26   6  ,att02 jpy_att02
23:52:26   7  ,att03 jpy_att03
23:52:26   8  ,att04 jpy_att04
23:52:26   9  ,att05 jpy_att05
23:52:26  10  ,att06 jpy_att06
23:52:26  11  ,att07 jpy_att07
23:52:26  12  ,att08 jpy_att08
23:52:26  13  ,att09 jpy_att09
23:52:26  14  ,att10 jpy_att10
23:52:26  15  ,att11 jpy_att11
23:52:26  16  ,att12 jpy_att12
23:52:26  17  ,att13 jpy_att13
23:52:26  18  ,att14 jpy_att14
23:52:26  19  ,att15 jpy_att15
23:52:26  20  ,att16 jpy_att16
23:52:26  21  ,att17 jpy_att17
23:52:26  22  ,att18 jpy_att18
23:52:26  23  ,att19 jpy_att19
23:52:26  24  ,att20 jpy_att20
23:52:26  25  ,att21 jpy_att21
23:52:26  26  ,att22 jpy_att22
23:52:26  27  ,att23 jpy_att23
23:52:26  28  ,att24 jpy_att24
23:52:26  29  ,att25 jpy_att25
23:52:26  30  ,att26 jpy_att26
23:52:26  31  ,att27 jpy_att27
23:52:26  32  ,att28 jpy_att28
23:52:26  33  ,att29 jpy_att29
23:52:26  34  ,att30 jpy_att30
23:52:26  35  ,att31 jpy_att31
23:52:26  36  ,att32 jpy_att32
23:52:26  37  ,att33 jpy_att33
23:52:26  38  ,att34 jpy_att34
23:52:26  39  ,att35 jpy_att35
23:52:26  40  ,att36 jpy_att36
23:52:26  41  FROM q15
23:52:26  42  /

Table created.

Elapsed: 00:00:00.18
23:52:27 SQL> 
23:52:27 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
23:52:27 SQL> 
23:52:27 SQL> -- rpt
23:52:27 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     20357

Elapsed: 00:00:00.00
23:52:27 SQL> 
23:52:27 SQL> --
23:52:27 SQL> -- cad10.sql
23:52:27 SQL> --
23:52:27 SQL> 
23:52:27 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:52:27 SQL> 
23:52:27 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.59
23:52:28 SQL> 
23:52:28 SQL> -- I created di5min here:
23:52:28 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:52:28 SQL> 
23:52:28 SQL> CREATE OR REPLACE VIEW q11 AS
23:52:28   2  SELECT
23:52:28   3  pair
23:52:28   4  ,ydate
23:52:28   5  ,prdate
23:52:28   6  ,rownum rnum -- acts as t in my time-series
23:52:28   7  ,clse
23:52:28   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
23:52:28   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
23:52:28  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
23:52:28  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
23:52:28  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
23:52:28  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
23:52:28  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
23:52:28  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
23:52:28  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
23:52:28  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
23:52:28  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
23:52:28  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
23:52:28  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
23:52:28  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
23:52:28  22  FROM di5min WHERE pair LIKE'%cad%'
23:52:28  23  ORDER BY ydate
23:52:28  24  /

View created.

Elapsed: 00:00:00.05
23:52:28 SQL> 
23:52:28 SQL> -- rpt
23:52:28 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_cad        20739

Elapsed: 00:00:00.34
23:52:28 SQL> 
23:52:28 SQL> -- Calc deltas and gains
23:52:28 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.21
23:52:28 SQL> 
23:52:28 SQL> CREATE TABLE q13 COMPRESS AS
23:52:28   2  SELECT
23:52:28   3  pair
23:52:28   4  ,ydate
23:52:28   5  ,prdate
23:52:28   6  ,rnum
23:52:28   7  ,ld8
23:52:28   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
23:52:28   9  -- step by 2
23:52:28  10  ,clse-lg6  d06
23:52:28  11  ,lg6 -lg8  d68
23:52:28  12  ,lg8 -lg10 d810
23:52:28  13  ,lg10-lg12 d1012
23:52:28  14  ,lg12-lg14 d1214
23:52:28  15  ,lg14-lg16 d1416
23:52:28  16  ,lg16-lg18 d1618
23:52:28  17  -- step by 4
23:52:28  18  ,lg6 -lg10 d610
23:52:28  19  ,lg8 -lg12 d812
23:52:28  20  ,lg10-lg14 d1014
23:52:28  21  ,lg12-lg16 d1216
23:52:28  22  --
23:52:28  23  ,ABS(clse-lg6 )dc6
23:52:28  24  ,ABS(clse-lg8 )dc8
23:52:28  25  ,ABS(clse-lg10)dc10
23:52:28  26  ,ABS(clse-lg12)dc12
23:52:28  27  ,ABS(clse-lg14)dc14
23:52:28  28  ,ABS(clse-lg16)dc16
23:52:28  29  ,ABS(clse-lg18)dc18
23:52:28  30  ,ABS(clse-lg20)dc20
23:52:28  31  ,ABS(clse-lg22)dc22
23:52:28  32  ,(ld8-clse) ug8
23:52:28  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:52:28  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:52:28  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:52:28  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:52:28  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:52:28  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:52:28  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:52:28  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
23:52:28  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
23:52:28  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
23:52:28  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
23:52:28  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
23:52:28  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
23:52:28  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:52:28  47  ,0+TO_CHAR(ydate,'D')d
23:52:28  48  ,0+TO_CHAR(ydate,'W')w
23:52:28  49  -- mpm stands for minutes-past-midnight:
23:52:28  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:52:28  51  FROM q11
23:52:28  52  -- I dont want any NULL values from the LAG() functions:
23:52:28  53  WHERE lg32 > 0
23:52:28  54  ORDER BY pair,ydate
23:52:28  55  /

Table created.

Elapsed: 00:00:01.69
23:52:30 SQL> 
23:52:30 SQL> -- rpt
23:52:30 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9396
	-1	   10959

Elapsed: 00:00:00.03
23:52:30 SQL> 
23:52:30 SQL> -- Calc gains and ntiles
23:52:30 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.18
23:52:30 SQL> CREATE TABLE q15 COMPRESS AS
23:52:30   2  SELECT
23:52:30   3  pair
23:52:30   4  ,ydate
23:52:30   5  ,prdate -- Should be unique
23:52:30   6  ,trend -- +1 or -1
23:52:30   7  -- Use NTILE() to derive some attributes
23:52:30   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
23:52:30   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
23:52:30  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
23:52:30  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
23:52:30  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
23:52:30  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
23:52:30  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
23:52:30  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
23:52:30  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
23:52:30  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
23:52:30  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
23:52:30  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
23:52:30  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
23:52:30  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
23:52:30  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
23:52:30  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
23:52:30  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
23:52:30  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
23:52:30  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
23:52:30  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
23:52:30  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
23:52:30  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
23:52:30  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
23:52:30  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
23:52:30  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
23:52:30  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
23:52:30  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
23:52:30  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
23:52:30  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
23:52:30  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
23:52:30  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
23:52:30  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
23:52:30  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
23:52:30  41  ,hh    att32
23:52:30  42  ,d     att33
23:52:30  43  ,w     att34
23:52:30  44  ,mpm   att35
23:52:30  45  ,trend att36
23:52:30  46  ,ug8 g8
23:52:30  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
23:52:30  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
23:52:30  49  FROM q13
23:52:30  50  ORDER BY pair,ydate
23:52:30  51  /

Table created.

Elapsed: 00:00:06.26
23:52:36 SQL> 
23:52:36 SQL> -- rpt
23:52:36 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
23:52:36   2  GROUP BY pair,trend,gatt,gattn
23:52:36   3  ORDER BY pair,trend,gatt,gattn
23:52:36   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_cad 	-1 nup nup -.00001687	    5657
usd_cad 	-1 nup up  -.00401274	    2620
usd_cad 	-1 up  nup .004665646	    2586
usd_cad 	-1			       0
usd_cad 	 1 nup nup -.00011764	    4661
usd_cad 	 1 nup up  -.00422882	    2753
usd_cad 	 1 up  nup .004613081	    1982

7 rows selected.

Elapsed: 00:00:00.03
23:52:36 SQL> 
23:52:36 SQL> -- rpt
23:52:36 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_cad 2010-12-23 23:50:00

Elapsed: 00:00:00.02
23:52:37 SQL> 
23:52:37 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.19
23:52:37 SQL> CREATE TABLE modsrc COMPRESS AS
23:52:37   2  SELECT
23:52:37   3  pair
23:52:37   4  ,ydate
23:52:37   5  ,prdate
23:52:37   6  ,trend
23:52:37   7  ,g8
23:52:37   8  ,gatt
23:52:37   9  ,gattn
23:52:37  10  FROM q15
23:52:37  11  /

Table created.

Elapsed: 00:00:00.13
23:52:37 SQL> 
23:52:37 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.28
23:52:37 SQL> 
23:52:37 SQL> -- rpt
23:52:37 SQL> 
23:52:37 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20739

Elapsed: 00:00:00.36
23:52:37 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20355

Elapsed: 00:00:00.01
23:52:37 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20355

Elapsed: 00:00:00.00
23:52:37 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20355

Elapsed: 00:00:00.01
23:52:37 SQL> 
23:52:37 SQL> DROP   TABLE cad_ms10 ;

Table dropped.

Elapsed: 00:00:00.04
23:52:38 SQL> CREATE TABLE cad_ms10 COMPRESS AS
23:52:38   2  SELECT
23:52:38   3  ydate
23:52:38   4  ,trend cad_trend
23:52:38   5  ,g8    cad_g8
23:52:38   6  ,gatt  cad_gatt
23:52:38   7  ,gattn cad_gattn
23:52:38   8  FROM modsrc
23:52:38   9  /

Table created.

Elapsed: 00:00:00.07
23:52:38 SQL> 
23:52:38 SQL> ANALYZE TABLE cad_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
23:52:38 SQL> 
23:52:38 SQL> -- rpt
23:52:38 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 14:30:01 2010-12-23 15:30:00	 9396	  -.0122      .0159
	-1 2010-09-16 07:55:01 2010-12-23 23:50:00	10863	 -.01105      .0176

Elapsed: 00:00:00.02
23:52:38 SQL> SELECT cad_trend,MIN(ydate),MAX(ydate),COUNT(cad_trend),MIN(cad_g8),MAX(cad_g8)FROM cad_ms10 GROUP BY cad_trend;

 CAD_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(CAD_TREND) MIN(CAD_G8) MAX(CAD_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 14:30:01 2010-12-23 15:30:00	       9396	 -.0122       .0159
	-1 2010-09-16 07:55:01 2010-12-23 23:50:00	      10959	-.01105       .0176

Elapsed: 00:00:00.01
23:52:38 SQL> 
23:52:38 SQL> -- I need a copy of q15 attributes
23:52:38 SQL> 
23:52:38 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.03
23:52:38 SQL> CREATE TABLE cad_att COMPRESS AS
23:52:38   2  SELECT
23:52:38   3  ydate
23:52:38   4  ,att00 cad_att00
23:52:38   5  ,att01 cad_att01
23:52:38   6  ,att02 cad_att02
23:52:38   7  ,att03 cad_att03
23:52:38   8  ,att04 cad_att04
23:52:38   9  ,att05 cad_att05
23:52:38  10  ,att06 cad_att06
23:52:38  11  ,att07 cad_att07
23:52:38  12  ,att08 cad_att08
23:52:38  13  ,att09 cad_att09
23:52:38  14  ,att10 cad_att10
23:52:38  15  ,att11 cad_att11
23:52:38  16  ,att12 cad_att12
23:52:38  17  ,att13 cad_att13
23:52:38  18  ,att14 cad_att14
23:52:38  19  ,att15 cad_att15
23:52:38  20  ,att16 cad_att16
23:52:38  21  ,att17 cad_att17
23:52:38  22  ,att18 cad_att18
23:52:38  23  ,att19 cad_att19
23:52:38  24  ,att20 cad_att20
23:52:38  25  ,att21 cad_att21
23:52:38  26  ,att22 cad_att22
23:52:38  27  ,att23 cad_att23
23:52:38  28  ,att24 cad_att24
23:52:38  29  ,att25 cad_att25
23:52:38  30  ,att26 cad_att26
23:52:38  31  ,att27 cad_att27
23:52:38  32  ,att28 cad_att28
23:52:38  33  ,att29 cad_att29
23:52:38  34  ,att30 cad_att30
23:52:38  35  ,att31 cad_att31
23:52:38  36  ,att32 cad_att32
23:52:38  37  ,att33 cad_att33
23:52:38  38  ,att34 cad_att34
23:52:38  39  ,att35 cad_att35
23:52:38  40  ,att36 cad_att36
23:52:38  41  FROM q15
23:52:38  42  /

Table created.

Elapsed: 00:00:00.20
23:52:38 SQL> 
23:52:38 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
23:52:39 SQL> 
23:52:39 SQL> -- rpt
23:52:39 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     20355

Elapsed: 00:00:00.00
23:52:39 SQL> 
23:52:39 SQL> --
23:52:39 SQL> -- chf10.sql
23:52:39 SQL> --
23:52:39 SQL> 
23:52:39 SQL> -- Creates views and tables for backtesting a forex SVM strategy
23:52:39 SQL> 
23:52:39 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.55
23:52:39 SQL> 
23:52:39 SQL> -- I created di5min here:
23:52:39 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
23:52:39 SQL> 
23:52:39 SQL> CREATE OR REPLACE VIEW q11 AS
23:52:39   2  SELECT
23:52:39   3  pair
23:52:39   4  ,ydate
23:52:39   5  ,prdate
23:52:39   6  ,rownum rnum -- acts as t in my time-series
23:52:39   7  ,clse
23:52:39   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
23:52:39   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
23:52:39  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
23:52:39  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
23:52:39  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
23:52:39  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
23:52:39  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
23:52:39  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
23:52:39  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
23:52:39  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
23:52:39  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
23:52:39  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
23:52:39  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
23:52:39  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
23:52:39  22  FROM di5min WHERE pair LIKE'%chf%'
23:52:39  23  ORDER BY ydate
23:52:39  24  /

View created.

Elapsed: 00:00:00.03
23:52:39 SQL> 
23:52:39 SQL> -- rpt
23:52:39 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_chf        20742

Elapsed: 00:00:00.34
23:52:39 SQL> 
23:52:39 SQL> -- Calc deltas and gains
23:52:39 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.19
23:52:40 SQL> 
23:52:40 SQL> CREATE TABLE q13 COMPRESS AS
23:52:40   2  SELECT
23:52:40   3  pair
23:52:40   4  ,ydate
23:52:40   5  ,prdate
23:52:40   6  ,rnum
23:52:40   7  ,ld8
23:52:40   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
23:52:40   9  -- step by 2
23:52:40  10  ,clse-lg6  d06
23:52:40  11  ,lg6 -lg8  d68
23:52:40  12  ,lg8 -lg10 d810
23:52:40  13  ,lg10-lg12 d1012
23:52:40  14  ,lg12-lg14 d1214
23:52:40  15  ,lg14-lg16 d1416
23:52:40  16  ,lg16-lg18 d1618
23:52:40  17  -- step by 4
23:52:40  18  ,lg6 -lg10 d610
23:52:40  19  ,lg8 -lg12 d812
23:52:40  20  ,lg10-lg14 d1014
23:52:40  21  ,lg12-lg16 d1216
23:52:40  22  --
23:52:40  23  ,ABS(clse-lg6 )dc6
23:52:40  24  ,ABS(clse-lg8 )dc8
23:52:40  25  ,ABS(clse-lg10)dc10
23:52:40  26  ,ABS(clse-lg12)dc12
23:52:40  27  ,ABS(clse-lg14)dc14
23:52:40  28  ,ABS(clse-lg16)dc16
23:52:40  29  ,ABS(clse-lg18)dc18
23:52:40  30  ,ABS(clse-lg20)dc20
23:52:40  31  ,ABS(clse-lg22)dc22
23:52:40  32  ,(ld8-clse) ug8
23:52:40  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
23:52:40  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
23:52:40  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
23:52:40  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
23:52:40  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
23:52:40  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
23:52:40  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
23:52:40  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
23:52:40  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
23:52:40  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
23:52:40  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
23:52:40  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
23:52:40  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
23:52:40  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
23:52:40  47  ,0+TO_CHAR(ydate,'D')d
23:52:40  48  ,0+TO_CHAR(ydate,'W')w
23:52:40  49  -- mpm stands for minutes-past-midnight:
23:52:40  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
23:52:40  51  FROM q11
23:52:40  52  -- I dont want any NULL values from the LAG() functions:
23:52:40  53  WHERE lg32 > 0
23:52:40  54  ORDER BY pair,ydate
23:52:40  55  /

Table created.

Elapsed: 00:00:01.68
23:52:41 SQL> 
23:52:41 SQL> -- rpt
23:52:41 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9625
	-1	   10733

Elapsed: 00:00:00.04
23:52:41 SQL> 
23:52:41 SQL> -- Calc gains and ntiles
23:52:41 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.13
23:52:41 SQL> CREATE TABLE q15 COMPRESS AS
23:52:41   2  SELECT
23:52:41   3  pair
23:52:41   4  ,ydate
23:52:41   5  ,prdate -- Should be unique
23:52:41   6  ,trend -- +1 or -1
23:52:41   7  -- Use NTILE() to derive some attributes
23:52:41   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
23:52:41   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
23:52:41  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
23:52:41  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
23:52:41  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
23:52:41  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
23:52:41  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
23:52:41  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
23:52:41  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
23:52:41  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
23:52:41  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
23:52:41  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
23:52:41  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
23:52:41  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
23:52:41  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
23:52:41  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
23:52:41  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
23:52:41  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
23:52:41  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
23:52:41  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
23:52:41  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
23:52:41  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
23:52:41  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
23:52:41  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
23:52:41  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
23:52:41  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
23:52:41  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
23:52:41  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
23:52:41  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
23:52:41  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
23:52:41  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
23:52:41  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
23:52:41  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
23:52:41  41  ,hh    att32
23:52:41  42  ,d     att33
23:52:41  43  ,w     att34
23:52:41  44  ,mpm   att35
23:52:41  45  ,trend att36
23:52:41  46  ,ug8 g8
23:52:41  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
23:52:41  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
23:52:41  49  FROM q13
23:52:41  50  ORDER BY pair,ydate
23:52:41  51  /

Table created.

Elapsed: 00:00:05.53
23:52:47 SQL> 
23:52:47 SQL> -- rpt
23:52:47 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
23:52:47   2  GROUP BY pair,trend,gatt,gattn
23:52:47   3  ORDER BY pair,trend,gatt,gattn
23:52:47   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_chf 	-1 nup nup .000029675	    4879
usd_chf 	-1 nup up  -.00495188	    3139
usd_chf 	-1 up  nup .005136403	    2678
usd_chf 	-1			       0
usd_chf 	 1 nup nup -.00001296	    4545
usd_chf 	 1 nup up  -.00454921	    2869
usd_chf 	 1 up  nup .004717722	    2152
usd_chf 	 1			       0

8 rows selected.

Elapsed: 00:00:00.04
23:52:47 SQL> 
23:52:47 SQL> -- rpt
23:52:47 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_chf 2010-12-23 23:50:00

Elapsed: 00:00:00.02
23:52:47 SQL> 
23:52:47 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
23:52:47 SQL> CREATE TABLE modsrc COMPRESS AS
23:52:47   2  SELECT
23:52:47   3  pair
23:52:47   4  ,ydate
23:52:47   5  ,prdate
23:52:47   6  ,trend
23:52:47   7  ,g8
23:52:47   8  ,gatt
23:52:47   9  ,gattn
23:52:47  10  FROM q15
23:52:47  11  /

Table created.

Elapsed: 00:00:00.09
23:52:47 SQL> 
23:52:47 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
23:52:48 SQL> 
23:52:48 SQL> -- rpt
23:52:48 SQL> 
23:52:48 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20742

Elapsed: 00:00:00.37
23:52:48 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.00
23:52:48 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.01
23:52:48 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.00
23:52:48 SQL> 
23:52:48 SQL> DROP   TABLE chf_ms10 ;

Table dropped.

Elapsed: 00:00:00.03
23:52:48 SQL> CREATE TABLE chf_ms10 COMPRESS AS
23:52:48   2  SELECT
23:52:48   3  ydate
23:52:48   4  ,trend chf_trend
23:52:48   5  ,g8    chf_g8
23:52:48   6  ,gatt  chf_gatt
23:52:48   7  ,gattn chf_gattn
23:52:48   8  FROM modsrc
23:52:48   9  /

Table created.

Elapsed: 00:00:00.07
23:52:48 SQL> 
23:52:48 SQL> ANALYZE TABLE chf_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
23:52:48 SQL> 
23:52:48 SQL> -- rpt
23:52:48 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 08:00:01 2010-12-23 21:45:00	 9566	 -.01775      .0155
	-1 2010-09-16 07:55:01 2010-12-23 23:50:00	10696	 -.01825     .01545

Elapsed: 00:00:00.02
23:52:48 SQL> SELECT chf_trend,MIN(ydate),MAX(ydate),COUNT(chf_trend),MIN(chf_g8),MAX(chf_g8)FROM chf_ms10 GROUP BY chf_trend;

 CHF_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(CHF_TREND) MIN(CHF_G8) MAX(CHF_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 08:00:01 2010-12-23 21:45:00	       9625	-.01775       .0155
	-1 2010-09-16 07:55:01 2010-12-23 23:50:00	      10733	-.01825      .01545

Elapsed: 00:00:00.01
23:52:48 SQL> 
23:52:48 SQL> -- I need a copy of q15 attributes
23:52:48 SQL> 
23:52:48 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.04
23:52:48 SQL> CREATE TABLE chf_att COMPRESS AS
23:52:48   2  SELECT
23:52:48   3  ydate
23:52:48   4  ,att00 chf_att00
23:52:48   5  ,att01 chf_att01
23:52:48   6  ,att02 chf_att02
23:52:48   7  ,att03 chf_att03
23:52:48   8  ,att04 chf_att04
23:52:48   9  ,att05 chf_att05
23:52:48  10  ,att06 chf_att06
23:52:48  11  ,att07 chf_att07
23:52:48  12  ,att08 chf_att08
23:52:48  13  ,att09 chf_att09
23:52:48  14  ,att10 chf_att10
23:52:48  15  ,att11 chf_att11
23:52:48  16  ,att12 chf_att12
23:52:48  17  ,att13 chf_att13
23:52:48  18  ,att14 chf_att14
23:52:48  19  ,att15 chf_att15
23:52:48  20  ,att16 chf_att16
23:52:48  21  ,att17 chf_att17
23:52:48  22  ,att18 chf_att18
23:52:48  23  ,att19 chf_att19
23:52:48  24  ,att20 chf_att20
23:52:48  25  ,att21 chf_att21
23:52:48  26  ,att22 chf_att22
23:52:48  27  ,att23 chf_att23
23:52:48  28  ,att24 chf_att24
23:52:48  29  ,att25 chf_att25
23:52:48  30  ,att26 chf_att26
23:52:48  31  ,att27 chf_att27
23:52:48  32  ,att28 chf_att28
23:52:48  33  ,att29 chf_att29
23:52:48  34  ,att30 chf_att30
23:52:48  35  ,att31 chf_att31
23:52:48  36  ,att32 chf_att32
23:52:48  37  ,att33 chf_att33
23:52:48  38  ,att34 chf_att34
23:52:48  39  ,att35 chf_att35
23:52:48  40  ,att36 chf_att36
23:52:48  41  FROM q15
23:52:48  42  /

Table created.

Elapsed: 00:00:00.20
23:52:48 SQL> 
23:52:48 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
23:52:49 SQL> 
23:52:49 SQL> -- rpt
23:52:49 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     20358

Elapsed: 00:00:00.00
23:52:49 SQL> 
23:52:49 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
