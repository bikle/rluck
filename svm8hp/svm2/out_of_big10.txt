
SQL*Plus: Release 11.2.0.1.0 Production on Mon Dec 20 03:12:16 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

03:12:16 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
03:12:16 SQL> 03:12:16 SQL> --
03:12:16 SQL> -- eur10.sql
03:12:16 SQL> --
03:12:16 SQL> 
03:12:16 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:12:16 SQL> 
03:12:16 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.03
03:12:16 SQL> 
03:12:16 SQL> -- I created di5min here:
03:12:16 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:12:16 SQL> 
03:12:16 SQL> CREATE OR REPLACE VIEW q11 AS
03:12:16   2  SELECT
03:12:16   3  pair
03:12:16   4  ,ydate
03:12:16   5  ,prdate
03:12:16   6  ,rownum rnum -- acts as t in my time-series
03:12:16   7  ,clse
03:12:16   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
03:12:16   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
03:12:16  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
03:12:16  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
03:12:16  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
03:12:16  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
03:12:16  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
03:12:16  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
03:12:16  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
03:12:16  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
03:12:16  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
03:12:16  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
03:12:16  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
03:12:16  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
03:12:16  22  FROM di5min WHERE pair LIKE'%eur%'
03:12:16  23  ORDER BY ydate
03:12:16  24  /

View created.

Elapsed: 00:00:00.04
03:12:16 SQL> 
03:12:16 SQL> -- rpt
03:12:16 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
eur_usd        20308

Elapsed: 00:00:00.36
03:12:16 SQL> 
03:12:16 SQL> -- Calc deltas and gains
03:12:16 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.04
03:12:16 SQL> 
03:12:16 SQL> CREATE TABLE q13 COMPRESS AS
03:12:16   2  SELECT
03:12:16   3  pair
03:12:16   4  ,ydate
03:12:16   5  ,prdate
03:12:16   6  ,rnum
03:12:16   7  ,ld8
03:12:16   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
03:12:16   9  -- step by 2
03:12:16  10  ,clse-lg6  d06
03:12:16  11  ,lg6 -lg8  d68
03:12:16  12  ,lg8 -lg10 d810
03:12:16  13  ,lg10-lg12 d1012
03:12:16  14  ,lg12-lg14 d1214
03:12:16  15  ,lg14-lg16 d1416
03:12:16  16  ,lg16-lg18 d1618
03:12:16  17  -- step by 4
03:12:16  18  ,lg6 -lg10 d610
03:12:16  19  ,lg8 -lg12 d812
03:12:16  20  ,lg10-lg14 d1014
03:12:16  21  ,lg12-lg16 d1216
03:12:16  22  --
03:12:16  23  ,ABS(clse-lg6 )dc6
03:12:16  24  ,ABS(clse-lg8 )dc8
03:12:16  25  ,ABS(clse-lg10)dc10
03:12:16  26  ,ABS(clse-lg12)dc12
03:12:16  27  ,ABS(clse-lg14)dc14
03:12:16  28  ,ABS(clse-lg16)dc16
03:12:16  29  ,ABS(clse-lg18)dc18
03:12:16  30  ,ABS(clse-lg20)dc20
03:12:16  31  ,ABS(clse-lg22)dc22
03:12:16  32  ,(ld8-clse) ug8
03:12:16  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:12:16  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:12:16  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:12:16  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:12:16  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:12:16  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:12:16  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:12:16  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
03:12:16  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
03:12:16  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
03:12:16  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
03:12:16  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
03:12:16  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
03:12:16  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:12:16  47  ,0+TO_CHAR(ydate,'D')d
03:12:16  48  ,0+TO_CHAR(ydate,'W')w
03:12:16  49  -- mpm stands for minutes-past-midnight:
03:12:16  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:12:16  51  FROM q11
03:12:16  52  -- I dont want any NULL values from the LAG() functions:
03:12:16  53  WHERE lg32 > 0
03:12:16  54  ORDER BY pair,ydate
03:12:16  55  /

Table created.

Elapsed: 00:00:01.91
03:12:18 SQL> 
03:12:18 SQL> -- rpt
03:12:18 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9962
	-1	    9962

Elapsed: 00:00:00.03
03:12:18 SQL> 
03:12:18 SQL> -- Calc gains and ntiles
03:12:18 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.03
03:12:18 SQL> CREATE TABLE q15 COMPRESS AS
03:12:18   2  SELECT
03:12:18   3  pair
03:12:18   4  ,ydate
03:12:18   5  ,prdate -- Should be unique
03:12:18   6  ,trend -- +1 or -1
03:12:18   7  -- Use NTILE() to derive some attributes
03:12:18   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
03:12:18   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
03:12:18  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
03:12:18  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
03:12:18  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
03:12:18  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
03:12:18  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
03:12:18  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
03:12:18  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
03:12:18  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
03:12:18  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
03:12:18  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
03:12:18  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
03:12:18  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
03:12:18  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
03:12:18  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
03:12:18  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
03:12:18  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
03:12:18  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
03:12:18  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
03:12:18  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
03:12:18  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
03:12:18  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
03:12:18  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
03:12:18  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
03:12:18  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
03:12:18  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
03:12:18  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
03:12:18  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
03:12:18  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
03:12:18  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
03:12:18  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
03:12:18  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
03:12:18  41  ,hh    att32
03:12:18  42  ,d     att33
03:12:18  43  ,w     att34
03:12:18  44  ,mpm   att35
03:12:18  45  ,trend att36
03:12:18  46  ,ug8 g8
03:12:18  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
03:12:18  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
03:12:18  49  FROM q13
03:12:18  50  ORDER BY pair,ydate
03:12:18  51  /

Table created.

Elapsed: 00:00:05.26
03:12:24 SQL> 
03:12:24 SQL> -- rpt
03:12:24 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
03:12:24   2  GROUP BY pair,trend,gatt,gattn
03:12:24   3  ORDER BY pair,trend,gatt,gattn
03:12:24   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
eur_usd 	-1 nup nup .000011964	    2867
eur_usd 	-1 nup up  -.00606924	    3545
eur_usd 	-1 up  nup .006103152	    3466
eur_usd 	-1			       0
eur_usd 	 1 nup nup -.00009763	    2975
eur_usd 	 1 nup up  -.00630061	    3295
eur_usd 	 1 up  nup .006596746	    3680
eur_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
03:12:24 SQL> 
03:12:24 SQL> -- rpt
03:12:24 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
eur_usd 2010-12-20 03:10:00

Elapsed: 00:00:00.01
03:12:24 SQL> 
03:12:24 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.04
03:12:24 SQL> CREATE TABLE modsrc COMPRESS AS
03:12:24   2  SELECT
03:12:24   3  pair
03:12:24   4  ,ydate
03:12:24   5  ,prdate
03:12:24   6  ,trend
03:12:24   7  ,g8
03:12:24   8  ,gatt
03:12:24   9  ,gattn
03:12:24  10  FROM q15
03:12:24  11  /

Table created.

Elapsed: 00:00:00.11
03:12:24 SQL> 
03:12:24 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
03:12:24 SQL> 
03:12:24 SQL> -- rpt
03:12:24 SQL> 
03:12:24 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20308

Elapsed: 00:00:00.34
03:12:24 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      19924

Elapsed: 00:00:00.01
03:12:24 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      19924

Elapsed: 00:00:00.00
03:12:24 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      19924

Elapsed: 00:00:00.01
03:12:24 SQL> 
03:12:24 SQL> DROP   TABLE eur_ms10 ;

Table dropped.

Elapsed: 00:00:00.04
03:12:24 SQL> CREATE TABLE eur_ms10 COMPRESS AS
03:12:24   2  SELECT
03:12:24   3  ydate
03:12:24   4  ,trend eur_trend
03:12:24   5  ,g8    eur_g8
03:12:24   6  ,gatt  eur_gatt
03:12:24   7  ,gattn eur_gattn
03:12:24   8  FROM modsrc
03:12:24   9  /

Table created.

Elapsed: 00:00:00.06
03:12:25 SQL> 
03:12:25 SQL> ANALYZE TABLE eur_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
03:12:25 SQL> 
03:12:25 SQL> -- rpt
03:12:25 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-14 05:00:01 2010-12-20 02:15:00	 9950	  -.0218     .02165
	-1 2010-09-14 04:55:01 2010-12-20 03:10:00	 9878	 -.02085      .0196

Elapsed: 00:00:00.02
03:12:25 SQL> SELECT eur_trend,MIN(ydate),MAX(ydate),COUNT(eur_trend),MIN(eur_g8),MAX(eur_g8)FROM eur_ms10 GROUP BY eur_trend;

 EUR_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(EUR_TREND) MIN(EUR_G8) MAX(EUR_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-14 05:00:01 2010-12-20 02:15:00	       9962	 -.0218      .02165
	-1 2010-09-14 04:55:01 2010-12-20 03:10:00	       9962	-.02085       .0196

Elapsed: 00:00:00.02
03:12:25 SQL> 
03:12:25 SQL> -- I need a copy of q15 attributes
03:12:25 SQL> 
03:12:25 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.04
03:12:25 SQL> CREATE TABLE eur_att COMPRESS AS
03:12:25   2  SELECT
03:12:25   3  ydate
03:12:25   4  ,att00 eur_att00
03:12:25   5  ,att01 eur_att01
03:12:25   6  ,att02 eur_att02
03:12:25   7  ,att03 eur_att03
03:12:25   8  ,att04 eur_att04
03:12:25   9  ,att05 eur_att05
03:12:25  10  ,att06 eur_att06
03:12:25  11  ,att07 eur_att07
03:12:25  12  ,att08 eur_att08
03:12:25  13  ,att09 eur_att09
03:12:25  14  ,att10 eur_att10
03:12:25  15  ,att11 eur_att11
03:12:25  16  ,att12 eur_att12
03:12:25  17  ,att13 eur_att13
03:12:25  18  ,att14 eur_att14
03:12:25  19  ,att15 eur_att15
03:12:25  20  ,att16 eur_att16
03:12:25  21  ,att17 eur_att17
03:12:25  22  ,att18 eur_att18
03:12:25  23  ,att19 eur_att19
03:12:25  24  ,att20 eur_att20
03:12:25  25  ,att21 eur_att21
03:12:25  26  ,att22 eur_att22
03:12:25  27  ,att23 eur_att23
03:12:25  28  ,att24 eur_att24
03:12:25  29  ,att25 eur_att25
03:12:25  30  ,att26 eur_att26
03:12:25  31  ,att27 eur_att27
03:12:25  32  ,att28 eur_att28
03:12:25  33  ,att29 eur_att29
03:12:25  34  ,att30 eur_att30
03:12:25  35  ,att31 eur_att31
03:12:25  36  ,att32 eur_att32
03:12:25  37  ,att33 eur_att33
03:12:25  38  ,att34 eur_att34
03:12:25  39  ,att35 eur_att35
03:12:25  40  ,att36 eur_att36
03:12:25  41  FROM q15
03:12:25  42  /

Table created.

Elapsed: 00:00:00.16
03:12:25 SQL> 
03:12:25 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
03:12:25 SQL> 
03:12:25 SQL> -- rpt
03:12:25 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     19924

Elapsed: 00:00:00.01
03:12:25 SQL> 
03:12:25 SQL> --
03:12:25 SQL> -- aud10.sql
03:12:25 SQL> --
03:12:25 SQL> 
03:12:25 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:12:25 SQL> 
03:12:25 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.31
03:12:26 SQL> 
03:12:26 SQL> -- I created di5min here:
03:12:26 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:12:26 SQL> 
03:12:26 SQL> CREATE OR REPLACE VIEW q11 AS
03:12:26   2  SELECT
03:12:26   3  pair
03:12:26   4  ,ydate
03:12:26   5  ,prdate
03:12:26   6  ,rownum rnum -- acts as t in my time-series
03:12:26   7  ,clse
03:12:26   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
03:12:26   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
03:12:26  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
03:12:26  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
03:12:26  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
03:12:26  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
03:12:26  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
03:12:26  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
03:12:26  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
03:12:26  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
03:12:26  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
03:12:26  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
03:12:26  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
03:12:26  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
03:12:26  22  FROM di5min WHERE pair LIKE'%aud%'
03:12:26  23  ORDER BY ydate
03:12:26  24  /

View created.

Elapsed: 00:00:00.07
03:12:26 SQL> 
03:12:26 SQL> -- rpt
03:12:26 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
aud_usd        20305

Elapsed: 00:00:00.34
03:12:26 SQL> 
03:12:26 SQL> -- Calc deltas and gains
03:12:26 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.23
03:12:26 SQL> 
03:12:26 SQL> CREATE TABLE q13 COMPRESS AS
03:12:26   2  SELECT
03:12:26   3  pair
03:12:26   4  ,ydate
03:12:26   5  ,prdate
03:12:26   6  ,rnum
03:12:26   7  ,ld8
03:12:26   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
03:12:26   9  -- step by 2
03:12:26  10  ,clse-lg6  d06
03:12:26  11  ,lg6 -lg8  d68
03:12:26  12  ,lg8 -lg10 d810
03:12:26  13  ,lg10-lg12 d1012
03:12:26  14  ,lg12-lg14 d1214
03:12:26  15  ,lg14-lg16 d1416
03:12:26  16  ,lg16-lg18 d1618
03:12:26  17  -- step by 4
03:12:26  18  ,lg6 -lg10 d610
03:12:26  19  ,lg8 -lg12 d812
03:12:26  20  ,lg10-lg14 d1014
03:12:26  21  ,lg12-lg16 d1216
03:12:26  22  --
03:12:26  23  ,ABS(clse-lg6 )dc6
03:12:26  24  ,ABS(clse-lg8 )dc8
03:12:26  25  ,ABS(clse-lg10)dc10
03:12:26  26  ,ABS(clse-lg12)dc12
03:12:26  27  ,ABS(clse-lg14)dc14
03:12:26  28  ,ABS(clse-lg16)dc16
03:12:26  29  ,ABS(clse-lg18)dc18
03:12:26  30  ,ABS(clse-lg20)dc20
03:12:26  31  ,ABS(clse-lg22)dc22
03:12:26  32  ,(ld8-clse) ug8
03:12:26  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:12:26  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:12:26  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:12:26  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:12:26  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:12:26  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:12:26  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:12:26  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
03:12:26  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
03:12:26  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
03:12:26  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
03:12:26  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
03:12:26  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
03:12:26  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:12:26  47  ,0+TO_CHAR(ydate,'D')d
03:12:26  48  ,0+TO_CHAR(ydate,'W')w
03:12:26  49  -- mpm stands for minutes-past-midnight:
03:12:26  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:12:26  51  FROM q11
03:12:26  52  -- I dont want any NULL values from the LAG() functions:
03:12:26  53  WHERE lg32 > 0
03:12:26  54  ORDER BY pair,ydate
03:12:26  55  /

Table created.

Elapsed: 00:00:01.70
03:12:28 SQL> 
03:12:28 SQL> -- rpt
03:12:28 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	   10325
	-1	    9596

Elapsed: 00:00:00.02
03:12:28 SQL> 
03:12:28 SQL> -- Calc gains and ntiles
03:12:28 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.15
03:12:28 SQL> CREATE TABLE q15 COMPRESS AS
03:12:28   2  SELECT
03:12:28   3  pair
03:12:28   4  ,ydate
03:12:28   5  ,prdate -- Should be unique
03:12:28   6  ,trend -- +1 or -1
03:12:28   7  -- Use NTILE() to derive some attributes
03:12:28   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
03:12:28   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
03:12:28  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
03:12:28  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
03:12:28  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
03:12:28  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
03:12:28  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
03:12:28  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
03:12:28  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
03:12:28  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
03:12:28  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
03:12:28  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
03:12:28  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
03:12:28  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
03:12:28  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
03:12:28  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
03:12:28  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
03:12:28  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
03:12:28  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
03:12:28  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
03:12:28  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
03:12:28  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
03:12:28  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
03:12:28  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
03:12:28  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
03:12:28  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
03:12:28  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
03:12:28  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
03:12:28  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
03:12:28  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
03:12:28  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
03:12:28  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
03:12:28  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
03:12:28  41  ,hh    att32
03:12:28  42  ,d     att33
03:12:28  43  ,w     att34
03:12:28  44  ,mpm   att35
03:12:28  45  ,trend att36
03:12:28  46  ,ug8 g8
03:12:28  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
03:12:28  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
03:12:28  49  FROM q13
03:12:28  50  ORDER BY pair,ydate
03:12:28  51  /

Table created.

Elapsed: 00:00:05.26
03:12:33 SQL> 
03:12:33 SQL> -- rpt
03:12:33 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
03:12:33   2  GROUP BY pair,trend,gatt,gattn
03:12:33   3  ORDER BY pair,trend,gatt,gattn
03:12:33   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
aud_usd 	-1 nup nup .000014606	    3615
aud_usd 	-1 nup up  -.00519991	    2596
aud_usd 	-1 up  nup .005269042	    3382
aud_usd 	-1			       0
aud_usd 	 1 nup nup 7.9654E-06	    3873
aud_usd 	 1 nup up  -.00496245	    3186
aud_usd 	 1 up  nup .005268917	    3173
aud_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.02
03:12:33 SQL> 
03:12:33 SQL> -- rpt
03:12:33 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
aud_usd 2010-12-20 03:10:00

Elapsed: 00:00:00.02
03:12:34 SQL> 
03:12:34 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
03:12:34 SQL> CREATE TABLE modsrc COMPRESS AS
03:12:34   2  SELECT
03:12:34   3  pair
03:12:34   4  ,ydate
03:12:34   5  ,prdate
03:12:34   6  ,trend
03:12:34   7  ,g8
03:12:34   8  ,gatt
03:12:34   9  ,gattn
03:12:34  10  FROM q15
03:12:34  11  /

Table created.

Elapsed: 00:00:00.08
03:12:34 SQL> 
03:12:34 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
03:12:34 SQL> 
03:12:34 SQL> -- rpt
03:12:34 SQL> 
03:12:34 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20305

Elapsed: 00:00:00.34
03:12:34 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      19921

Elapsed: 00:00:00.00
03:12:34 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      19921

Elapsed: 00:00:00.01
03:12:34 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      19921

Elapsed: 00:00:00.00
03:12:34 SQL> 
03:12:34 SQL> DROP   TABLE aud_ms10 ;

Table dropped.

Elapsed: 00:00:00.03
03:12:34 SQL> CREATE TABLE aud_ms10 COMPRESS AS
03:12:34   2  SELECT
03:12:34   3  ydate
03:12:34   4  ,trend aud_trend
03:12:34   5  ,g8    aud_g8
03:12:34   6  ,gatt  aud_gatt
03:12:34   7  ,gattn aud_gattn
03:12:34   8  FROM modsrc
03:12:34   9  /

Table created.

Elapsed: 00:00:00.07
03:12:34 SQL> 
03:12:34 SQL> ANALYZE TABLE aud_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
03:12:35 SQL> 
03:12:35 SQL> -- rpt
03:12:35 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-14 07:10:01 2010-12-20 03:10:00	10232	  -.0203      .0136
	-1 2010-09-14 04:55:01 2010-12-19 22:50:00	 9593	  -.0196      .0148

Elapsed: 00:00:00.02
03:12:35 SQL> SELECT aud_trend,MIN(ydate),MAX(ydate),COUNT(aud_trend),MIN(aud_g8),MAX(aud_g8)FROM aud_ms10 GROUP BY aud_trend;

 AUD_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(AUD_TREND) MIN(AUD_G8) MAX(AUD_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-14 07:10:01 2010-12-20 03:10:00	      10325	 -.0203       .0136
	-1 2010-09-14 04:55:01 2010-12-19 22:50:00	       9596	 -.0196       .0148

Elapsed: 00:00:00.01
03:12:35 SQL> 
03:12:35 SQL> -- I need a copy of q15 attributes
03:12:35 SQL> 
03:12:35 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.04
03:12:35 SQL> CREATE TABLE aud_att COMPRESS AS
03:12:35   2  SELECT
03:12:35   3  ydate
03:12:35   4  ,att00 aud_att00
03:12:35   5  ,att01 aud_att01
03:12:35   6  ,att02 aud_att02
03:12:35   7  ,att03 aud_att03
03:12:35   8  ,att04 aud_att04
03:12:35   9  ,att05 aud_att05
03:12:35  10  ,att06 aud_att06
03:12:35  11  ,att07 aud_att07
03:12:35  12  ,att08 aud_att08
03:12:35  13  ,att09 aud_att09
03:12:35  14  ,att10 aud_att10
03:12:35  15  ,att11 aud_att11
03:12:35  16  ,att12 aud_att12
03:12:35  17  ,att13 aud_att13
03:12:35  18  ,att14 aud_att14
03:12:35  19  ,att15 aud_att15
03:12:35  20  ,att16 aud_att16
03:12:35  21  ,att17 aud_att17
03:12:35  22  ,att18 aud_att18
03:12:35  23  ,att19 aud_att19
03:12:35  24  ,att20 aud_att20
03:12:35  25  ,att21 aud_att21
03:12:35  26  ,att22 aud_att22
03:12:35  27  ,att23 aud_att23
03:12:35  28  ,att24 aud_att24
03:12:35  29  ,att25 aud_att25
03:12:35  30  ,att26 aud_att26
03:12:35  31  ,att27 aud_att27
03:12:35  32  ,att28 aud_att28
03:12:35  33  ,att29 aud_att29
03:12:35  34  ,att30 aud_att30
03:12:35  35  ,att31 aud_att31
03:12:35  36  ,att32 aud_att32
03:12:35  37  ,att33 aud_att33
03:12:35  38  ,att34 aud_att34
03:12:35  39  ,att35 aud_att35
03:12:35  40  ,att36 aud_att36
03:12:35  41  FROM q15
03:12:35  42  /

Table created.

Elapsed: 00:00:00.17
03:12:35 SQL> 
03:12:35 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
03:12:35 SQL> 
03:12:35 SQL> -- rpt
03:12:35 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     19921

Elapsed: 00:00:00.00
03:12:35 SQL> 
03:12:35 SQL> --
03:12:35 SQL> -- gbp10.sql
03:12:35 SQL> --
03:12:35 SQL> 
03:12:35 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:12:35 SQL> 
03:12:35 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.31
03:12:36 SQL> 
03:12:36 SQL> -- I created di5min here:
03:12:36 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:12:36 SQL> 
03:12:36 SQL> CREATE OR REPLACE VIEW q11 AS
03:12:36   2  SELECT
03:12:36   3  pair
03:12:36   4  ,ydate
03:12:36   5  ,prdate
03:12:36   6  ,rownum rnum -- acts as t in my time-series
03:12:36   7  ,clse
03:12:36   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
03:12:36   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
03:12:36  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
03:12:36  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
03:12:36  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
03:12:36  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
03:12:36  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
03:12:36  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
03:12:36  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
03:12:36  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
03:12:36  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
03:12:36  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
03:12:36  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
03:12:36  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
03:12:36  22  FROM di5min WHERE pair LIKE'%gbp%'
03:12:36  23  ORDER BY ydate
03:12:36  24  /

View created.

Elapsed: 00:00:00.03
03:12:36 SQL> 
03:12:36 SQL> -- rpt
03:12:36 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
gbp_usd        20307

Elapsed: 00:00:00.33
03:12:36 SQL> 
03:12:36 SQL> -- Calc deltas and gains
03:12:36 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.28
03:12:36 SQL> 
03:12:36 SQL> CREATE TABLE q13 COMPRESS AS
03:12:36   2  SELECT
03:12:36   3  pair
03:12:36   4  ,ydate
03:12:36   5  ,prdate
03:12:36   6  ,rnum
03:12:36   7  ,ld8
03:12:36   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
03:12:36   9  -- step by 2
03:12:36  10  ,clse-lg6  d06
03:12:36  11  ,lg6 -lg8  d68
03:12:36  12  ,lg8 -lg10 d810
03:12:36  13  ,lg10-lg12 d1012
03:12:36  14  ,lg12-lg14 d1214
03:12:36  15  ,lg14-lg16 d1416
03:12:36  16  ,lg16-lg18 d1618
03:12:36  17  -- step by 4
03:12:36  18  ,lg6 -lg10 d610
03:12:36  19  ,lg8 -lg12 d812
03:12:36  20  ,lg10-lg14 d1014
03:12:36  21  ,lg12-lg16 d1216
03:12:36  22  --
03:12:36  23  ,ABS(clse-lg6 )dc6
03:12:36  24  ,ABS(clse-lg8 )dc8
03:12:36  25  ,ABS(clse-lg10)dc10
03:12:36  26  ,ABS(clse-lg12)dc12
03:12:36  27  ,ABS(clse-lg14)dc14
03:12:36  28  ,ABS(clse-lg16)dc16
03:12:36  29  ,ABS(clse-lg18)dc18
03:12:36  30  ,ABS(clse-lg20)dc20
03:12:36  31  ,ABS(clse-lg22)dc22
03:12:36  32  ,(ld8-clse) ug8
03:12:36  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:12:36  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:12:36  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:12:36  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:12:36  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:12:36  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:12:36  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:12:36  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
03:12:36  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
03:12:36  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
03:12:36  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
03:12:36  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
03:12:36  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
03:12:36  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:12:36  47  ,0+TO_CHAR(ydate,'D')d
03:12:36  48  ,0+TO_CHAR(ydate,'W')w
03:12:36  49  -- mpm stands for minutes-past-midnight:
03:12:36  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:12:36  51  FROM q11
03:12:36  52  -- I dont want any NULL values from the LAG() functions:
03:12:36  53  WHERE lg32 > 0
03:12:36  54  ORDER BY pair,ydate
03:12:36  55  /

Table created.

Elapsed: 00:00:01.67
03:12:38 SQL> 
03:12:38 SQL> -- rpt
03:12:38 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9804
	-1	   10119

Elapsed: 00:00:00.02
03:12:38 SQL> 
03:12:38 SQL> -- Calc gains and ntiles
03:12:38 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.14
03:12:38 SQL> CREATE TABLE q15 COMPRESS AS
03:12:38   2  SELECT
03:12:38   3  pair
03:12:38   4  ,ydate
03:12:38   5  ,prdate -- Should be unique
03:12:38   6  ,trend -- +1 or -1
03:12:38   7  -- Use NTILE() to derive some attributes
03:12:38   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
03:12:38   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
03:12:38  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
03:12:38  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
03:12:38  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
03:12:38  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
03:12:38  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
03:12:38  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
03:12:38  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
03:12:38  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
03:12:38  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
03:12:38  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
03:12:38  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
03:12:38  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
03:12:38  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
03:12:38  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
03:12:38  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
03:12:38  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
03:12:38  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
03:12:38  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
03:12:38  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
03:12:38  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
03:12:38  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
03:12:38  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
03:12:38  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
03:12:38  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
03:12:38  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
03:12:38  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
03:12:38  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
03:12:38  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
03:12:38  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
03:12:38  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
03:12:38  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
03:12:38  41  ,hh    att32
03:12:38  42  ,d     att33
03:12:38  43  ,w     att34
03:12:38  44  ,mpm   att35
03:12:38  45  ,trend att36
03:12:38  46  ,ug8 g8
03:12:38  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
03:12:38  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
03:12:38  49  FROM q13
03:12:38  50  ORDER BY pair,ydate
03:12:38  51  /

Table created.

Elapsed: 00:00:05.23
03:12:43 SQL> 
03:12:43 SQL> -- rpt
03:12:43 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
03:12:43   2  GROUP BY pair,trend,gatt,gattn
03:12:43   3  ORDER BY pair,trend,gatt,gattn
03:12:43   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
gbp_usd 	-1 nup nup  .00008407	    3724
gbp_usd 	-1 nup up  -.00590001	    3172
gbp_usd 	-1 up  nup .005797512	    3175
gbp_usd 	-1			       0
gbp_usd 	 1 nup nup -.00007666	    3635
gbp_usd 	 1 nup up   -.0055598	    3120
gbp_usd 	 1 up  nup .006246143	    3001
gbp_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.04
03:12:43 SQL> 
03:12:43 SQL> -- rpt
03:12:43 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
gbp_usd 2010-12-20 03:10:00

Elapsed: 00:00:00.02
03:12:43 SQL> 
03:12:43 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.20
03:12:43 SQL> CREATE TABLE modsrc COMPRESS AS
03:12:43   2  SELECT
03:12:43   3  pair
03:12:44   4  ,ydate
03:12:44   5  ,prdate
03:12:44   6  ,trend
03:12:44   7  ,g8
03:12:44   8  ,gatt
03:12:44   9  ,gattn
03:12:44  10  FROM q15
03:12:44  11  /

Table created.

Elapsed: 00:00:00.18
03:12:44 SQL> 
03:12:44 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
03:12:44 SQL> 
03:12:44 SQL> -- rpt
03:12:44 SQL> 
03:12:44 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20307

Elapsed: 00:00:00.34
03:12:44 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      19923

Elapsed: 00:00:00.00
03:12:44 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      19923

Elapsed: 00:00:00.01
03:12:44 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      19923

Elapsed: 00:00:00.00
03:12:44 SQL> 
03:12:44 SQL> DROP   TABLE gbp_ms10 ;

Table dropped.

Elapsed: 00:00:00.15
03:12:44 SQL> CREATE TABLE gbp_ms10 COMPRESS AS
03:12:44   2  SELECT
03:12:44   3  ydate
03:12:44   4  ,trend gbp_trend
03:12:44   5  ,g8    gbp_g8
03:12:44   6  ,gatt  gbp_gatt
03:12:44   7  ,gattn gbp_gattn
03:12:44   8  FROM modsrc
03:12:44   9  /

Table created.

Elapsed: 00:00:00.12
03:12:45 SQL> 
03:12:45 SQL> ANALYZE TABLE gbp_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
03:12:45 SQL> 
03:12:45 SQL> -- rpt
03:12:45 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-14 07:35:01 2010-12-20 03:10:00	 9756	  -.0231       .019
	-1 2010-09-14 04:55:01 2010-12-20 01:00:00	10071	    -.02      .0204

Elapsed: 00:00:00.02
03:12:45 SQL> SELECT gbp_trend,MIN(ydate),MAX(ydate),COUNT(gbp_trend),MIN(gbp_g8),MAX(gbp_g8)FROM gbp_ms10 GROUP BY gbp_trend;

 GBP_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(GBP_TREND) MIN(GBP_G8) MAX(GBP_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-14 07:35:01 2010-12-20 03:10:00	       9804	 -.0231        .019
	-1 2010-09-14 04:55:01 2010-12-20 01:00:00	      10119	   -.02       .0204

Elapsed: 00:00:00.02
03:12:45 SQL> 
03:12:45 SQL> -- I need a copy of q15 attributes
03:12:45 SQL> 
03:12:45 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.15
03:12:45 SQL> CREATE TABLE gbp_att COMPRESS AS
03:12:45   2  SELECT
03:12:45   3  ydate
03:12:45   4  ,att00 gbp_att00
03:12:45   5  ,att01 gbp_att01
03:12:45   6  ,att02 gbp_att02
03:12:45   7  ,att03 gbp_att03
03:12:45   8  ,att04 gbp_att04
03:12:45   9  ,att05 gbp_att05
03:12:45  10  ,att06 gbp_att06
03:12:45  11  ,att07 gbp_att07
03:12:45  12  ,att08 gbp_att08
03:12:45  13  ,att09 gbp_att09
03:12:45  14  ,att10 gbp_att10
03:12:45  15  ,att11 gbp_att11
03:12:45  16  ,att12 gbp_att12
03:12:45  17  ,att13 gbp_att13
03:12:45  18  ,att14 gbp_att14
03:12:45  19  ,att15 gbp_att15
03:12:45  20  ,att16 gbp_att16
03:12:45  21  ,att17 gbp_att17
03:12:45  22  ,att18 gbp_att18
03:12:45  23  ,att19 gbp_att19
03:12:45  24  ,att20 gbp_att20
03:12:45  25  ,att21 gbp_att21
03:12:45  26  ,att22 gbp_att22
03:12:45  27  ,att23 gbp_att23
03:12:45  28  ,att24 gbp_att24
03:12:45  29  ,att25 gbp_att25
03:12:45  30  ,att26 gbp_att26
03:12:45  31  ,att27 gbp_att27
03:12:45  32  ,att28 gbp_att28
03:12:45  33  ,att29 gbp_att29
03:12:45  34  ,att30 gbp_att30
03:12:45  35  ,att31 gbp_att31
03:12:45  36  ,att32 gbp_att32
03:12:45  37  ,att33 gbp_att33
03:12:45  38  ,att34 gbp_att34
03:12:45  39  ,att35 gbp_att35
03:12:45  40  ,att36 gbp_att36
03:12:45  41  FROM q15
03:12:45  42  /

Table created.

Elapsed: 00:00:00.18
03:12:45 SQL> 
03:12:45 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
03:12:46 SQL> 
03:12:46 SQL> -- rpt
03:12:46 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     19923

Elapsed: 00:00:00.00
03:12:46 SQL> 
03:12:46 SQL> --
03:12:46 SQL> -- jpy10.sql
03:12:46 SQL> --
03:12:46 SQL> 
03:12:46 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:12:46 SQL> 
03:12:46 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.34
03:12:46 SQL> 
03:12:46 SQL> -- I created di5min here:
03:12:46 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:12:46 SQL> 
03:12:46 SQL> CREATE OR REPLACE VIEW q11 AS
03:12:46   2  SELECT
03:12:46   3  pair
03:12:46   4  ,ydate
03:12:46   5  ,prdate
03:12:46   6  ,rownum rnum -- acts as t in my time-series
03:12:46   7  ,clse
03:12:46   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
03:12:46   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
03:12:46  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
03:12:46  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
03:12:46  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
03:12:46  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
03:12:46  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
03:12:46  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
03:12:46  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
03:12:46  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
03:12:46  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
03:12:46  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
03:12:46  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
03:12:46  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
03:12:46  22  FROM di5min WHERE pair LIKE'%jpy%'
03:12:46  23  ORDER BY ydate
03:12:46  24  /

View created.

Elapsed: 00:00:00.05
03:12:46 SQL> 
03:12:46 SQL> -- rpt
03:12:46 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_jpy        20308

Elapsed: 00:00:00.34
03:12:46 SQL> 
03:12:46 SQL> -- Calc deltas and gains
03:12:46 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.25
03:12:47 SQL> 
03:12:47 SQL> CREATE TABLE q13 COMPRESS AS
03:12:47   2  SELECT
03:12:47   3  pair
03:12:47   4  ,ydate
03:12:47   5  ,prdate
03:12:47   6  ,rnum
03:12:47   7  ,ld8
03:12:47   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
03:12:47   9  -- step by 2
03:12:47  10  ,clse-lg6  d06
03:12:47  11  ,lg6 -lg8  d68
03:12:47  12  ,lg8 -lg10 d810
03:12:47  13  ,lg10-lg12 d1012
03:12:47  14  ,lg12-lg14 d1214
03:12:47  15  ,lg14-lg16 d1416
03:12:47  16  ,lg16-lg18 d1618
03:12:47  17  -- step by 4
03:12:47  18  ,lg6 -lg10 d610
03:12:47  19  ,lg8 -lg12 d812
03:12:47  20  ,lg10-lg14 d1014
03:12:47  21  ,lg12-lg16 d1216
03:12:47  22  --
03:12:47  23  ,ABS(clse-lg6 )dc6
03:12:47  24  ,ABS(clse-lg8 )dc8
03:12:47  25  ,ABS(clse-lg10)dc10
03:12:47  26  ,ABS(clse-lg12)dc12
03:12:47  27  ,ABS(clse-lg14)dc14
03:12:47  28  ,ABS(clse-lg16)dc16
03:12:47  29  ,ABS(clse-lg18)dc18
03:12:47  30  ,ABS(clse-lg20)dc20
03:12:47  31  ,ABS(clse-lg22)dc22
03:12:47  32  ,(ld8-clse) ug8
03:12:47  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:12:47  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:12:47  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:12:47  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:12:47  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:12:47  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:12:47  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:12:47  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
03:12:47  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
03:12:47  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
03:12:47  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
03:12:47  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
03:12:47  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
03:12:47  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:12:47  47  ,0+TO_CHAR(ydate,'D')d
03:12:47  48  ,0+TO_CHAR(ydate,'W')w
03:12:47  49  -- mpm stands for minutes-past-midnight:
03:12:47  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:12:47  51  FROM q11
03:12:47  52  -- I dont want any NULL values from the LAG() functions:
03:12:47  53  WHERE lg32 > 0
03:12:47  54  ORDER BY pair,ydate
03:12:47  55  /

Table created.

Elapsed: 00:00:01.76
03:12:48 SQL> 
03:12:48 SQL> -- rpt
03:12:48 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9400
	-1	   10524

Elapsed: 00:00:00.03
03:12:48 SQL> 
03:12:48 SQL> -- Calc gains and ntiles
03:12:48 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.13
03:12:49 SQL> CREATE TABLE q15 COMPRESS AS
03:12:49   2  SELECT
03:12:49   3  pair
03:12:49   4  ,ydate
03:12:49   5  ,prdate -- Should be unique
03:12:49   6  ,trend -- +1 or -1
03:12:49   7  -- Use NTILE() to derive some attributes
03:12:49   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
03:12:49   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
03:12:49  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
03:12:49  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
03:12:49  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
03:12:49  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
03:12:49  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
03:12:49  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
03:12:49  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
03:12:49  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
03:12:49  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
03:12:49  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
03:12:49  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
03:12:49  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
03:12:49  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
03:12:49  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
03:12:49  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
03:12:49  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
03:12:49  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
03:12:49  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
03:12:49  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
03:12:49  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
03:12:49  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
03:12:49  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
03:12:49  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
03:12:49  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
03:12:49  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
03:12:49  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
03:12:49  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
03:12:49  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
03:12:49  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
03:12:49  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
03:12:49  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
03:12:49  41  ,hh    att32
03:12:49  42  ,d     att33
03:12:49  43  ,w     att34
03:12:49  44  ,mpm   att35
03:12:49  45  ,trend att36
03:12:49  46  ,ug8 g8
03:12:49  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
03:12:49  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
03:12:49  49  FROM q13
03:12:49  50  ORDER BY pair,ydate
03:12:49  51  /

Table created.

Elapsed: 00:00:05.40
03:12:54 SQL> 
03:12:54 SQL> -- rpt
03:12:54 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
03:12:54   2  GROUP BY pair,trend,gatt,gattn
03:12:54   3  ORDER BY pair,trend,gatt,gattn
03:12:54   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_jpy 	-1 nup nup	    0	     160
usd_jpy 	-1 nup up  -.18866731	    5170
usd_jpy 	-1 up  nup .208237569	    5108
usd_jpy 	-1			       0
usd_jpy 	 1 nup nup	    0	     119
usd_jpy 	 1 nup up  -.18862199	    4980
usd_jpy 	 1 up  nup .213079702	    4291
usd_jpy 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
03:12:54 SQL> 
03:12:54 SQL> -- rpt
03:12:54 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_jpy 2010-12-20 03:10:00

Elapsed: 00:00:00.01
03:12:54 SQL> 
03:12:54 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.11
03:12:54 SQL> CREATE TABLE modsrc COMPRESS AS
03:12:54   2  SELECT
03:12:54   3  pair
03:12:54   4  ,ydate
03:12:54   5  ,prdate
03:12:54   6  ,trend
03:12:54   7  ,g8
03:12:54   8  ,gatt
03:12:54   9  ,gattn
03:12:54  10  FROM q15
03:12:54  11  /

Table created.

Elapsed: 00:00:00.09
03:12:54 SQL> 
03:12:54 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
03:12:54 SQL> 
03:12:54 SQL> -- rpt
03:12:54 SQL> 
03:12:54 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20308

Elapsed: 00:00:00.33
03:12:55 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      19924

Elapsed: 00:00:00.00
03:12:55 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      19924

Elapsed: 00:00:00.01
03:12:55 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      19924

Elapsed: 00:00:00.00
03:12:55 SQL> 
03:12:55 SQL> DROP   TABLE jpy_ms10 ;

Table dropped.

Elapsed: 00:00:00.04
03:12:55 SQL> CREATE TABLE jpy_ms10 COMPRESS AS
03:12:55   2  SELECT
03:12:55   3  ydate
03:12:55   4  ,trend jpy_trend
03:12:55   5  ,g8    jpy_g8
03:12:55   6  ,gatt  jpy_gatt
03:12:55   7  ,gattn jpy_gattn
03:12:55   8  FROM modsrc
03:12:55   9  /

Table created.

Elapsed: 00:00:00.07
03:12:55 SQL> 
03:12:55 SQL> ANALYZE TABLE jpy_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
03:12:55 SQL> 
03:12:55 SQL> -- rpt
03:12:55 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-14 08:50:01 2010-12-19 23:20:00	 9390	  -1.185       2.42
	-1 2010-09-14 04:55:01 2010-12-20 03:10:00	10438	 -1.0575       2.49

Elapsed: 00:00:00.01
03:12:55 SQL> SELECT jpy_trend,MIN(ydate),MAX(ydate),COUNT(jpy_trend),MIN(jpy_g8),MAX(jpy_g8)FROM jpy_ms10 GROUP BY jpy_trend;

 JPY_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(JPY_TREND) MIN(JPY_G8) MAX(JPY_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-14 08:50:01 2010-12-19 23:20:00	       9400	 -1.185        2.42
	-1 2010-09-14 04:55:01 2010-12-20 03:10:00	      10524	-1.0575        2.49

Elapsed: 00:00:00.02
03:12:55 SQL> 
03:12:55 SQL> -- I need a copy of q15 attributes
03:12:55 SQL> 
03:12:55 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.03
03:12:55 SQL> CREATE TABLE jpy_att COMPRESS AS
03:12:55   2  SELECT
03:12:55   3  ydate
03:12:55   4  ,att00 jpy_att00
03:12:55   5  ,att01 jpy_att01
03:12:55   6  ,att02 jpy_att02
03:12:55   7  ,att03 jpy_att03
03:12:55   8  ,att04 jpy_att04
03:12:55   9  ,att05 jpy_att05
03:12:55  10  ,att06 jpy_att06
03:12:55  11  ,att07 jpy_att07
03:12:55  12  ,att08 jpy_att08
03:12:55  13  ,att09 jpy_att09
03:12:55  14  ,att10 jpy_att10
03:12:55  15  ,att11 jpy_att11
03:12:55  16  ,att12 jpy_att12
03:12:55  17  ,att13 jpy_att13
03:12:55  18  ,att14 jpy_att14
03:12:55  19  ,att15 jpy_att15
03:12:55  20  ,att16 jpy_att16
03:12:55  21  ,att17 jpy_att17
03:12:55  22  ,att18 jpy_att18
03:12:55  23  ,att19 jpy_att19
03:12:55  24  ,att20 jpy_att20
03:12:55  25  ,att21 jpy_att21
03:12:55  26  ,att22 jpy_att22
03:12:55  27  ,att23 jpy_att23
03:12:55  28  ,att24 jpy_att24
03:12:55  29  ,att25 jpy_att25
03:12:55  30  ,att26 jpy_att26
03:12:55  31  ,att27 jpy_att27
03:12:55  32  ,att28 jpy_att28
03:12:55  33  ,att29 jpy_att29
03:12:55  34  ,att30 jpy_att30
03:12:55  35  ,att31 jpy_att31
03:12:55  36  ,att32 jpy_att32
03:12:55  37  ,att33 jpy_att33
03:12:55  38  ,att34 jpy_att34
03:12:55  39  ,att35 jpy_att35
03:12:55  40  ,att36 jpy_att36
03:12:55  41  FROM q15
03:12:55  42  /

Table created.

Elapsed: 00:00:00.17
03:12:55 SQL> 
03:12:55 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
03:12:56 SQL> 
03:12:56 SQL> -- rpt
03:12:56 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     19924

Elapsed: 00:00:00.00
03:12:56 SQL> 
03:12:56 SQL> --
03:12:56 SQL> -- cad10.sql
03:12:56 SQL> --
03:12:56 SQL> 
03:12:56 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:12:56 SQL> 
03:12:56 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.34
03:12:56 SQL> 
03:12:56 SQL> -- I created di5min here:
03:12:56 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:12:56 SQL> 
03:12:56 SQL> CREATE OR REPLACE VIEW q11 AS
03:12:56   2  SELECT
03:12:56   3  pair
03:12:56   4  ,ydate
03:12:56   5  ,prdate
03:12:56   6  ,rownum rnum -- acts as t in my time-series
03:12:56   7  ,clse
03:12:56   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
03:12:56   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
03:12:56  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
03:12:56  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
03:12:56  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
03:12:56  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
03:12:56  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
03:12:56  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
03:12:56  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
03:12:56  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
03:12:56  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
03:12:56  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
03:12:56  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
03:12:56  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
03:12:56  22  FROM di5min WHERE pair LIKE'%cad%'
03:12:56  23  ORDER BY ydate
03:12:56  24  /

View created.

Elapsed: 00:00:00.05
03:12:56 SQL> 
03:12:56 SQL> -- rpt
03:12:56 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_cad        20304

Elapsed: 00:00:00.36
03:12:56 SQL> 
03:12:56 SQL> -- Calc deltas and gains
03:12:56 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.20
03:12:57 SQL> 
03:12:57 SQL> CREATE TABLE q13 COMPRESS AS
03:12:57   2  SELECT
03:12:57   3  pair
03:12:57   4  ,ydate
03:12:57   5  ,prdate
03:12:57   6  ,rnum
03:12:57   7  ,ld8
03:12:57   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
03:12:57   9  -- step by 2
03:12:57  10  ,clse-lg6  d06
03:12:57  11  ,lg6 -lg8  d68
03:12:57  12  ,lg8 -lg10 d810
03:12:57  13  ,lg10-lg12 d1012
03:12:57  14  ,lg12-lg14 d1214
03:12:57  15  ,lg14-lg16 d1416
03:12:57  16  ,lg16-lg18 d1618
03:12:57  17  -- step by 4
03:12:57  18  ,lg6 -lg10 d610
03:12:57  19  ,lg8 -lg12 d812
03:12:57  20  ,lg10-lg14 d1014
03:12:57  21  ,lg12-lg16 d1216
03:12:57  22  --
03:12:57  23  ,ABS(clse-lg6 )dc6
03:12:57  24  ,ABS(clse-lg8 )dc8
03:12:57  25  ,ABS(clse-lg10)dc10
03:12:57  26  ,ABS(clse-lg12)dc12
03:12:57  27  ,ABS(clse-lg14)dc14
03:12:57  28  ,ABS(clse-lg16)dc16
03:12:57  29  ,ABS(clse-lg18)dc18
03:12:57  30  ,ABS(clse-lg20)dc20
03:12:57  31  ,ABS(clse-lg22)dc22
03:12:57  32  ,(ld8-clse) ug8
03:12:57  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:12:57  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:12:57  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:12:57  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:12:57  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:12:57  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:12:57  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:12:57  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
03:12:57  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
03:12:57  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
03:12:57  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
03:12:57  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
03:12:57  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
03:12:57  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:12:57  47  ,0+TO_CHAR(ydate,'D')d
03:12:57  48  ,0+TO_CHAR(ydate,'W')w
03:12:57  49  -- mpm stands for minutes-past-midnight:
03:12:57  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:12:57  51  FROM q11
03:12:57  52  -- I dont want any NULL values from the LAG() functions:
03:12:57  53  WHERE lg32 > 0
03:12:57  54  ORDER BY pair,ydate
03:12:57  55  /

Table created.

Elapsed: 00:00:01.64
03:12:58 SQL> 
03:12:58 SQL> -- rpt
03:12:58 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9233
	-1	   10687

Elapsed: 00:00:00.03
03:12:58 SQL> 
03:12:58 SQL> -- Calc gains and ntiles
03:12:58 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.16
03:12:58 SQL> CREATE TABLE q15 COMPRESS AS
03:12:58   2  SELECT
03:12:58   3  pair
03:12:58   4  ,ydate
03:12:58   5  ,prdate -- Should be unique
03:12:58   6  ,trend -- +1 or -1
03:12:58   7  -- Use NTILE() to derive some attributes
03:12:58   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
03:12:58   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
03:12:58  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
03:12:58  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
03:12:58  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
03:12:58  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
03:12:58  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
03:12:58  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
03:12:58  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
03:12:58  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
03:12:58  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
03:12:58  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
03:12:58  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
03:12:58  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
03:12:58  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
03:12:58  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
03:12:58  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
03:12:58  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
03:12:58  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
03:12:58  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
03:12:58  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
03:12:58  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
03:12:58  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
03:12:58  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
03:12:58  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
03:12:58  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
03:12:58  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
03:12:58  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
03:12:58  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
03:12:58  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
03:12:58  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
03:12:58  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
03:12:58  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
03:12:58  41  ,hh    att32
03:12:58  42  ,d     att33
03:12:58  43  ,w     att34
03:12:58  44  ,mpm   att35
03:12:58  45  ,trend att36
03:12:58  46  ,ug8 g8
03:12:58  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
03:12:58  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
03:12:58  49  FROM q13
03:12:58  50  ORDER BY pair,ydate
03:12:58  51  /

Table created.

Elapsed: 00:00:05.33
03:13:04 SQL> 
03:13:04 SQL> -- rpt
03:13:04 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
03:13:04   2  GROUP BY pair,trend,gatt,gattn
03:13:04   3  ORDER BY pair,trend,gatt,gattn
03:13:04   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_cad 	-1 nup nup -.00002778	    5534
usd_cad 	-1 nup up  -.00402052	    2605
usd_cad 	-1 up  nup .004652368	    2523
usd_cad 	-1			       0
usd_cad 	 1 nup nup -.00008714	    4459
usd_cad 	 1 nup up  -.00422395	    2703
usd_cad 	 1 up  nup .004591138	    2000
usd_cad 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
03:13:04 SQL> 
03:13:04 SQL> -- rpt
03:13:04 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_cad 2010-12-20 03:10:00

Elapsed: 00:00:00.02
03:13:04 SQL> 
03:13:04 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
03:13:04 SQL> CREATE TABLE modsrc COMPRESS AS
03:13:04   2  SELECT
03:13:04   3  pair
03:13:04   4  ,ydate
03:13:04   5  ,prdate
03:13:04   6  ,trend
03:13:04   7  ,g8
03:13:04   8  ,gatt
03:13:04   9  ,gattn
03:13:04  10  FROM q15
03:13:04  11  /

Table created.

Elapsed: 00:00:00.09
03:13:04 SQL> 
03:13:04 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
03:13:04 SQL> 
03:13:04 SQL> -- rpt
03:13:04 SQL> 
03:13:04 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20304

Elapsed: 00:00:00.34
03:13:05 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      19920

Elapsed: 00:00:00.01
03:13:05 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      19920

Elapsed: 00:00:00.00
03:13:05 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      19920

Elapsed: 00:00:00.01
03:13:05 SQL> 
03:13:05 SQL> DROP   TABLE cad_ms10 ;

Table dropped.

Elapsed: 00:00:00.10
03:13:05 SQL> CREATE TABLE cad_ms10 COMPRESS AS
03:13:05   2  SELECT
03:13:05   3  ydate
03:13:05   4  ,trend cad_trend
03:13:05   5  ,g8    cad_g8
03:13:05   6  ,gatt  cad_gatt
03:13:05   7  ,gattn cad_gattn
03:13:05   8  FROM modsrc
03:13:05   9  /

Table created.

Elapsed: 00:00:00.06
03:13:05 SQL> 
03:13:05 SQL> ANALYZE TABLE cad_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
03:13:05 SQL> 
03:13:05 SQL> -- rpt
03:13:05 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-14 04:55:01 2010-12-20 03:10:00	 9162	  -.0122      .0159
	-1 2010-09-14 07:10:01 2010-12-20 02:55:00	10662	 -.01105      .0176

Elapsed: 00:00:00.02
03:13:05 SQL> SELECT cad_trend,MIN(ydate),MAX(ydate),COUNT(cad_trend),MIN(cad_g8),MAX(cad_g8)FROM cad_ms10 GROUP BY cad_trend;

 CAD_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(CAD_TREND) MIN(CAD_G8) MAX(CAD_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-14 04:55:01 2010-12-20 03:10:00	       9233	 -.0122       .0159
	-1 2010-09-14 07:10:01 2010-12-20 02:55:00	      10687	-.01105       .0176

Elapsed: 00:00:00.02
03:13:05 SQL> 
03:13:05 SQL> -- I need a copy of q15 attributes
03:13:05 SQL> 
03:13:05 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.03
03:13:05 SQL> CREATE TABLE cad_att COMPRESS AS
03:13:05   2  SELECT
03:13:05   3  ydate
03:13:05   4  ,att00 cad_att00
03:13:05   5  ,att01 cad_att01
03:13:05   6  ,att02 cad_att02
03:13:05   7  ,att03 cad_att03
03:13:05   8  ,att04 cad_att04
03:13:05   9  ,att05 cad_att05
03:13:05  10  ,att06 cad_att06
03:13:05  11  ,att07 cad_att07
03:13:05  12  ,att08 cad_att08
03:13:05  13  ,att09 cad_att09
03:13:05  14  ,att10 cad_att10
03:13:05  15  ,att11 cad_att11
03:13:05  16  ,att12 cad_att12
03:13:05  17  ,att13 cad_att13
03:13:05  18  ,att14 cad_att14
03:13:05  19  ,att15 cad_att15
03:13:05  20  ,att16 cad_att16
03:13:05  21  ,att17 cad_att17
03:13:05  22  ,att18 cad_att18
03:13:05  23  ,att19 cad_att19
03:13:05  24  ,att20 cad_att20
03:13:05  25  ,att21 cad_att21
03:13:05  26  ,att22 cad_att22
03:13:05  27  ,att23 cad_att23
03:13:05  28  ,att24 cad_att24
03:13:05  29  ,att25 cad_att25
03:13:05  30  ,att26 cad_att26
03:13:05  31  ,att27 cad_att27
03:13:05  32  ,att28 cad_att28
03:13:05  33  ,att29 cad_att29
03:13:05  34  ,att30 cad_att30
03:13:05  35  ,att31 cad_att31
03:13:05  36  ,att32 cad_att32
03:13:05  37  ,att33 cad_att33
03:13:05  38  ,att34 cad_att34
03:13:05  39  ,att35 cad_att35
03:13:05  40  ,att36 cad_att36
03:13:05  41  FROM q15
03:13:05  42  /

Table created.

Elapsed: 00:00:00.21
03:13:05 SQL> 
03:13:05 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
03:13:06 SQL> 
03:13:06 SQL> -- rpt
03:13:06 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     19920

Elapsed: 00:00:00.00
03:13:06 SQL> 
03:13:06 SQL> --
03:13:06 SQL> -- chf10.sql
03:13:06 SQL> --
03:13:06 SQL> 
03:13:06 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:13:06 SQL> 
03:13:06 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.31
03:13:06 SQL> 
03:13:06 SQL> -- I created di5min here:
03:13:06 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:13:06 SQL> 
03:13:06 SQL> CREATE OR REPLACE VIEW q11 AS
03:13:06   2  SELECT
03:13:06   3  pair
03:13:06   4  ,ydate
03:13:06   5  ,prdate
03:13:06   6  ,rownum rnum -- acts as t in my time-series
03:13:06   7  ,clse
03:13:06   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
03:13:06   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
03:13:06  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
03:13:06  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
03:13:06  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
03:13:06  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
03:13:06  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
03:13:06  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
03:13:06  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
03:13:06  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
03:13:06  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
03:13:06  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
03:13:06  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
03:13:06  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
03:13:06  22  FROM di5min WHERE pair LIKE'%chf%'
03:13:06  23  ORDER BY ydate
03:13:06  24  /

View created.

Elapsed: 00:00:00.03
03:13:06 SQL> 
03:13:06 SQL> -- rpt
03:13:06 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_chf        20307

Elapsed: 00:00:00.33
03:13:06 SQL> 
03:13:06 SQL> -- Calc deltas and gains
03:13:06 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.19
03:13:07 SQL> 
03:13:07 SQL> CREATE TABLE q13 COMPRESS AS
03:13:07   2  SELECT
03:13:07   3  pair
03:13:07   4  ,ydate
03:13:07   5  ,prdate
03:13:07   6  ,rnum
03:13:07   7  ,ld8
03:13:07   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
03:13:07   9  -- step by 2
03:13:07  10  ,clse-lg6  d06
03:13:07  11  ,lg6 -lg8  d68
03:13:07  12  ,lg8 -lg10 d810
03:13:07  13  ,lg10-lg12 d1012
03:13:07  14  ,lg12-lg14 d1214
03:13:07  15  ,lg14-lg16 d1416
03:13:07  16  ,lg16-lg18 d1618
03:13:07  17  -- step by 4
03:13:07  18  ,lg6 -lg10 d610
03:13:07  19  ,lg8 -lg12 d812
03:13:07  20  ,lg10-lg14 d1014
03:13:07  21  ,lg12-lg16 d1216
03:13:07  22  --
03:13:07  23  ,ABS(clse-lg6 )dc6
03:13:07  24  ,ABS(clse-lg8 )dc8
03:13:07  25  ,ABS(clse-lg10)dc10
03:13:07  26  ,ABS(clse-lg12)dc12
03:13:07  27  ,ABS(clse-lg14)dc14
03:13:07  28  ,ABS(clse-lg16)dc16
03:13:07  29  ,ABS(clse-lg18)dc18
03:13:07  30  ,ABS(clse-lg20)dc20
03:13:07  31  ,ABS(clse-lg22)dc22
03:13:07  32  ,(ld8-clse) ug8
03:13:07  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:13:07  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:13:07  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:13:07  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:13:07  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:13:07  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:13:07  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:13:07  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
03:13:07  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
03:13:07  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
03:13:07  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
03:13:07  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
03:13:07  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
03:13:07  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:13:07  47  ,0+TO_CHAR(ydate,'D')d
03:13:07  48  ,0+TO_CHAR(ydate,'W')w
03:13:07  49  -- mpm stands for minutes-past-midnight:
03:13:07  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:13:07  51  FROM q11
03:13:07  52  -- I dont want any NULL values from the LAG() functions:
03:13:07  53  WHERE lg32 > 0
03:13:07  54  ORDER BY pair,ydate
03:13:07  55  /

Table created.

Elapsed: 00:00:01.65
03:13:08 SQL> 
03:13:08 SQL> -- rpt
03:13:08 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9639
	-1	   10284

Elapsed: 00:00:00.03
03:13:08 SQL> 
03:13:08 SQL> -- Calc gains and ntiles
03:13:08 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.19
03:13:08 SQL> CREATE TABLE q15 COMPRESS AS
03:13:08   2  SELECT
03:13:08   3  pair
03:13:08   4  ,ydate
03:13:08   5  ,prdate -- Should be unique
03:13:08   6  ,trend -- +1 or -1
03:13:08   7  -- Use NTILE() to derive some attributes
03:13:08   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
03:13:08   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
03:13:08  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
03:13:08  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
03:13:08  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
03:13:08  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
03:13:08  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
03:13:08  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
03:13:08  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
03:13:08  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
03:13:08  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
03:13:08  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
03:13:08  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
03:13:08  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
03:13:08  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
03:13:08  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
03:13:08  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
03:13:08  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
03:13:08  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
03:13:08  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
03:13:08  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
03:13:08  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
03:13:08  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
03:13:08  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
03:13:08  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
03:13:08  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
03:13:08  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
03:13:08  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
03:13:08  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
03:13:08  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
03:13:08  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
03:13:08  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
03:13:08  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
03:13:08  41  ,hh    att32
03:13:08  42  ,d     att33
03:13:08  43  ,w     att34
03:13:08  44  ,mpm   att35
03:13:08  45  ,trend att36
03:13:08  46  ,ug8 g8
03:13:08  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
03:13:08  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
03:13:08  49  FROM q13
03:13:08  50  ORDER BY pair,ydate
03:13:08  51  /

Table created.

Elapsed: 00:00:05.28
03:13:14 SQL> 
03:13:14 SQL> -- rpt
03:13:14 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
03:13:14   2  GROUP BY pair,trend,gatt,gattn
03:13:14   3  ORDER BY pair,trend,gatt,gattn
03:13:14   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_chf 	-1 nup nup .000079771	    4648
usd_chf 	-1 nup up  -.00516123	    2887
usd_chf 	-1 up  nup  .00521724	    2716
usd_chf 	-1			       0
usd_chf 	 1 nup nup -6.817E-06	    4639
usd_chf 	 1 nup up  -.00463492	    2788
usd_chf 	 1 up  nup  .00470655	    2149
usd_chf 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
03:13:14 SQL> 
03:13:14 SQL> -- rpt
03:13:14 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_chf 2010-12-20 03:10:00

Elapsed: 00:00:00.02
03:13:14 SQL> 
03:13:14 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.16
03:13:14 SQL> CREATE TABLE modsrc COMPRESS AS
03:13:14   2  SELECT
03:13:14   3  pair
03:13:14   4  ,ydate
03:13:14   5  ,prdate
03:13:14   6  ,trend
03:13:14   7  ,g8
03:13:14   8  ,gatt
03:13:14   9  ,gattn
03:13:14  10  FROM q15
03:13:14  11  /

Table created.

Elapsed: 00:00:00.08
03:13:14 SQL> 
03:13:14 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
03:13:14 SQL> 
03:13:14 SQL> -- rpt
03:13:14 SQL> 
03:13:14 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20307

Elapsed: 00:00:00.34
03:13:15 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      19923

Elapsed: 00:00:00.01
03:13:15 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      19923

Elapsed: 00:00:00.00
03:13:15 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      19923

Elapsed: 00:00:00.01
03:13:15 SQL> 
03:13:15 SQL> DROP   TABLE chf_ms10 ;

Table dropped.

Elapsed: 00:00:00.03
03:13:15 SQL> CREATE TABLE chf_ms10 COMPRESS AS
03:13:15   2  SELECT
03:13:15   3  ydate
03:13:15   4  ,trend chf_trend
03:13:15   5  ,g8    chf_g8
03:13:15   6  ,gatt  chf_gatt
03:13:15   7  ,gattn chf_gattn
03:13:15   8  FROM modsrc
03:13:15   9  /

Table created.

Elapsed: 00:00:00.07
03:13:15 SQL> 
03:13:15 SQL> ANALYZE TABLE chf_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.14
03:13:15 SQL> 
03:13:15 SQL> -- rpt
03:13:15 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-14 11:10:01 2010-12-20 01:30:00	 9576	 -.01775      .0155
	-1 2010-09-14 04:55:01 2010-12-20 03:10:00	10251	 -.01825     .01545

Elapsed: 00:00:00.02
03:13:15 SQL> SELECT chf_trend,MIN(ydate),MAX(ydate),COUNT(chf_trend),MIN(chf_g8),MAX(chf_g8)FROM chf_ms10 GROUP BY chf_trend;

 CHF_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(CHF_TREND) MIN(CHF_G8) MAX(CHF_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-14 11:10:01 2010-12-20 01:30:00	       9639	-.01775       .0155
	-1 2010-09-14 04:55:01 2010-12-20 03:10:00	      10284	-.01825      .01545

Elapsed: 00:00:00.01
03:13:15 SQL> 
03:13:15 SQL> -- I need a copy of q15 attributes
03:13:15 SQL> 
03:13:15 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.05
03:13:15 SQL> CREATE TABLE chf_att COMPRESS AS
03:13:15   2  SELECT
03:13:15   3  ydate
03:13:15   4  ,att00 chf_att00
03:13:15   5  ,att01 chf_att01
03:13:15   6  ,att02 chf_att02
03:13:15   7  ,att03 chf_att03
03:13:15   8  ,att04 chf_att04
03:13:15   9  ,att05 chf_att05
03:13:15  10  ,att06 chf_att06
03:13:15  11  ,att07 chf_att07
03:13:15  12  ,att08 chf_att08
03:13:15  13  ,att09 chf_att09
03:13:15  14  ,att10 chf_att10
03:13:15  15  ,att11 chf_att11
03:13:15  16  ,att12 chf_att12
03:13:15  17  ,att13 chf_att13
03:13:15  18  ,att14 chf_att14
03:13:15  19  ,att15 chf_att15
03:13:15  20  ,att16 chf_att16
03:13:15  21  ,att17 chf_att17
03:13:15  22  ,att18 chf_att18
03:13:15  23  ,att19 chf_att19
03:13:15  24  ,att20 chf_att20
03:13:15  25  ,att21 chf_att21
03:13:15  26  ,att22 chf_att22
03:13:15  27  ,att23 chf_att23
03:13:15  28  ,att24 chf_att24
03:13:15  29  ,att25 chf_att25
03:13:15  30  ,att26 chf_att26
03:13:15  31  ,att27 chf_att27
03:13:15  32  ,att28 chf_att28
03:13:15  33  ,att29 chf_att29
03:13:15  34  ,att30 chf_att30
03:13:15  35  ,att31 chf_att31
03:13:15  36  ,att32 chf_att32
03:13:15  37  ,att33 chf_att33
03:13:15  38  ,att34 chf_att34
03:13:15  39  ,att35 chf_att35
03:13:15  40  ,att36 chf_att36
03:13:15  41  FROM q15
03:13:15  42  /

Table created.

Elapsed: 00:00:00.18
03:13:15 SQL> 
03:13:15 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
03:13:16 SQL> 
03:13:16 SQL> -- rpt
03:13:16 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     19923

Elapsed: 00:00:00.01
03:13:16 SQL> 
03:13:16 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
