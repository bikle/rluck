
SQL*Plus: Release 11.2.0.1.0 Production on Fri Dec 24 07:28:05 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

07:28:06 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
07:28:06 SQL> 07:28:06 SQL> --
07:28:06 SQL> -- eur10.sql
07:28:06 SQL> --
07:28:06 SQL> 
07:28:06 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:28:06 SQL> 
07:28:06 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.01
07:28:06 SQL> 
07:28:06 SQL> -- I created di5min here:
07:28:06 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:28:06 SQL> 
07:28:06 SQL> CREATE OR REPLACE VIEW q11 AS
07:28:06   2  SELECT
07:28:06   3  pair
07:28:06   4  ,ydate
07:28:06   5  ,prdate
07:28:06   6  ,rownum rnum -- acts as t in my time-series
07:28:06   7  ,clse
07:28:06   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
07:28:06   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
07:28:06  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
07:28:06  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
07:28:06  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
07:28:06  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
07:28:06  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
07:28:06  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
07:28:06  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
07:28:06  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
07:28:06  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
07:28:06  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
07:28:06  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
07:28:06  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
07:28:06  22  FROM di5min WHERE pair LIKE'%eur%'
07:28:06  23  ORDER BY ydate
07:28:06  24  /

View created.

Elapsed: 00:00:00.05
07:28:06 SQL> 
07:28:06 SQL> -- rpt
07:28:06 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
eur_usd        20743

Elapsed: 00:00:00.37
07:28:06 SQL> 
07:28:06 SQL> -- Calc deltas and gains
07:28:06 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.24
07:28:06 SQL> 
07:28:06 SQL> CREATE TABLE q13 COMPRESS AS
07:28:06   2  SELECT
07:28:06   3  pair
07:28:06   4  ,ydate
07:28:06   5  ,prdate
07:28:06   6  ,rnum
07:28:06   7  ,ld8
07:28:06   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
07:28:06   9  -- step by 2
07:28:06  10  ,clse-lg6  d06
07:28:06  11  ,lg6 -lg8  d68
07:28:06  12  ,lg8 -lg10 d810
07:28:06  13  ,lg10-lg12 d1012
07:28:06  14  ,lg12-lg14 d1214
07:28:06  15  ,lg14-lg16 d1416
07:28:06  16  ,lg16-lg18 d1618
07:28:06  17  -- step by 4
07:28:06  18  ,lg6 -lg10 d610
07:28:06  19  ,lg8 -lg12 d812
07:28:06  20  ,lg10-lg14 d1014
07:28:06  21  ,lg12-lg16 d1216
07:28:06  22  --
07:28:06  23  ,ABS(clse-lg6 )dc6
07:28:06  24  ,ABS(clse-lg8 )dc8
07:28:06  25  ,ABS(clse-lg10)dc10
07:28:06  26  ,ABS(clse-lg12)dc12
07:28:06  27  ,ABS(clse-lg14)dc14
07:28:06  28  ,ABS(clse-lg16)dc16
07:28:06  29  ,ABS(clse-lg18)dc18
07:28:06  30  ,ABS(clse-lg20)dc20
07:28:06  31  ,ABS(clse-lg22)dc22
07:28:06  32  ,(ld8-clse) ug8
07:28:06  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:28:06  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:28:06  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:28:06  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:28:06  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:28:06  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:28:06  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:28:06  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
07:28:06  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
07:28:06  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
07:28:06  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
07:28:06  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
07:28:06  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
07:28:06  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:28:06  47  ,0+TO_CHAR(ydate,'D')d
07:28:06  48  ,0+TO_CHAR(ydate,'W')w
07:28:06  49  -- mpm stands for minutes-past-midnight:
07:28:06  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:28:06  51  FROM q11
07:28:06  52  -- I dont want any NULL values from the LAG() functions:
07:28:06  53  WHERE lg32 > 0
07:28:06  54  ORDER BY pair,ydate
07:28:06  55  /

Table created.

Elapsed: 00:00:01.94
07:28:08 SQL> 
07:28:08 SQL> -- rpt
07:28:08 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	   10120
	-1	   10239

Elapsed: 00:00:00.03
07:28:08 SQL> 
07:28:08 SQL> -- Calc gains and ntiles
07:28:08 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.03
07:28:08 SQL> CREATE TABLE q15 COMPRESS AS
07:28:08   2  SELECT
07:28:08   3  pair
07:28:08   4  ,ydate
07:28:08   5  ,prdate -- Should be unique
07:28:08   6  ,trend -- +1 or -1
07:28:08   7  -- Use NTILE() to derive some attributes
07:28:08   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
07:28:08   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
07:28:08  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
07:28:08  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
07:28:08  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
07:28:08  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
07:28:08  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
07:28:08  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
07:28:08  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
07:28:08  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
07:28:08  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
07:28:08  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
07:28:08  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
07:28:08  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
07:28:08  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
07:28:08  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
07:28:08  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
07:28:08  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
07:28:08  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
07:28:08  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
07:28:08  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
07:28:08  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
07:28:08  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
07:28:08  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
07:28:08  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
07:28:08  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
07:28:08  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
07:28:08  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
07:28:08  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
07:28:08  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
07:28:08  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
07:28:08  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
07:28:08  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
07:28:08  41  ,hh    att32
07:28:08  42  ,d     att33
07:28:08  43  ,w     att34
07:28:08  44  ,mpm   att35
07:28:08  45  ,trend att36
07:28:08  46  ,ug8 g8
07:28:08  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
07:28:08  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
07:28:08  49  FROM q13
07:28:08  50  ORDER BY pair,ydate
07:28:08  51  /

Table created.

Elapsed: 00:00:05.38
07:28:14 SQL> 
07:28:14 SQL> -- rpt
07:28:14 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
07:28:14   2  GROUP BY pair,trend,gatt,gattn
07:28:14   3  ORDER BY pair,trend,gatt,gattn
07:28:14   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
eur_usd 	-1 nup nup .000025712	    3021
eur_usd 	-1 nup up  -.00602802	    3651
eur_usd 	-1 up  nup .005756878	    3564
eur_usd 	-1			       0
eur_usd 	 1 nup nup -.00007588	    2949
eur_usd 	 1 nup up  -.00626446	    3461
eur_usd 	 1 up  nup .006573542	    3617
eur_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
07:28:14 SQL> 
07:28:14 SQL> -- rpt
07:28:14 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
eur_usd 2010-12-24 07:25:00

Elapsed: 00:00:00.01
07:28:14 SQL> 
07:28:14 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
07:28:14 SQL> CREATE TABLE modsrc COMPRESS AS
07:28:14   2  SELECT
07:28:14   3  pair
07:28:14   4  ,ydate
07:28:14   5  ,prdate
07:28:14   6  ,trend
07:28:14   7  ,g8
07:28:14   8  ,gatt
07:28:14   9  ,gattn
07:28:14  10  FROM q15
07:28:14  11  /

Table created.

Elapsed: 00:00:00.08
07:28:14 SQL> 
07:28:14 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
07:28:14 SQL> 
07:28:14 SQL> -- rpt
07:28:14 SQL> 
07:28:14 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20743

Elapsed: 00:00:00.34
07:28:14 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20359

Elapsed: 00:00:00.01
07:28:14 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20359

Elapsed: 00:00:00.00
07:28:14 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20359

Elapsed: 00:00:00.01
07:28:15 SQL> 
07:28:15 SQL> DROP   TABLE eur_ms10 ;

Table dropped.

Elapsed: 00:00:00.11
07:28:15 SQL> CREATE TABLE eur_ms10 COMPRESS AS
07:28:15   2  SELECT
07:28:15   3  ydate
07:28:15   4  ,trend eur_trend
07:28:15   5  ,g8    eur_g8
07:28:15   6  ,gatt  eur_gatt
07:28:15   7  ,gattn eur_gattn
07:28:15   8  FROM modsrc
07:28:15   9  /

Table created.

Elapsed: 00:00:00.07
07:28:15 SQL> 
07:28:15 SQL> ANALYZE TABLE eur_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
07:28:15 SQL> 
07:28:15 SQL> -- rpt
07:28:15 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 15:30:01 2010-12-24 07:25:00	10027	  -.0218     .02165
	-1 2010-09-16 17:15:01 2010-12-24 01:50:00	10236	 -.02085      .0196

Elapsed: 00:00:00.02
07:28:15 SQL> SELECT eur_trend,MIN(ydate),MAX(ydate),COUNT(eur_trend),MIN(eur_g8),MAX(eur_g8)FROM eur_ms10 GROUP BY eur_trend;

 EUR_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(EUR_TREND) MIN(EUR_G8) MAX(EUR_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 15:30:01 2010-12-24 07:25:00	      10120	 -.0218      .02165
	-1 2010-09-16 17:15:01 2010-12-24 01:50:00	      10239	-.02085       .0196

Elapsed: 00:00:00.01
07:28:15 SQL> 
07:28:15 SQL> -- I need a copy of q15 attributes
07:28:15 SQL> 
07:28:15 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.03
07:28:15 SQL> CREATE TABLE eur_att COMPRESS AS
07:28:15   2  SELECT
07:28:15   3  ydate
07:28:15   4  ,att00 eur_att00
07:28:15   5  ,att01 eur_att01
07:28:15   6  ,att02 eur_att02
07:28:15   7  ,att03 eur_att03
07:28:15   8  ,att04 eur_att04
07:28:15   9  ,att05 eur_att05
07:28:15  10  ,att06 eur_att06
07:28:15  11  ,att07 eur_att07
07:28:15  12  ,att08 eur_att08
07:28:15  13  ,att09 eur_att09
07:28:15  14  ,att10 eur_att10
07:28:15  15  ,att11 eur_att11
07:28:15  16  ,att12 eur_att12
07:28:15  17  ,att13 eur_att13
07:28:15  18  ,att14 eur_att14
07:28:15  19  ,att15 eur_att15
07:28:15  20  ,att16 eur_att16
07:28:15  21  ,att17 eur_att17
07:28:15  22  ,att18 eur_att18
07:28:15  23  ,att19 eur_att19
07:28:15  24  ,att20 eur_att20
07:28:15  25  ,att21 eur_att21
07:28:15  26  ,att22 eur_att22
07:28:15  27  ,att23 eur_att23
07:28:15  28  ,att24 eur_att24
07:28:15  29  ,att25 eur_att25
07:28:15  30  ,att26 eur_att26
07:28:15  31  ,att27 eur_att27
07:28:15  32  ,att28 eur_att28
07:28:15  33  ,att29 eur_att29
07:28:15  34  ,att30 eur_att30
07:28:15  35  ,att31 eur_att31
07:28:15  36  ,att32 eur_att32
07:28:15  37  ,att33 eur_att33
07:28:15  38  ,att34 eur_att34
07:28:15  39  ,att35 eur_att35
07:28:15  40  ,att36 eur_att36
07:28:15  41  FROM q15
07:28:15  42  /

Table created.

Elapsed: 00:00:00.19
07:28:15 SQL> 
07:28:15 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
07:28:16 SQL> 
07:28:16 SQL> -- rpt
07:28:16 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     20359

Elapsed: 00:00:00.00
07:28:16 SQL> 
07:28:16 SQL> --
07:28:16 SQL> -- aud10.sql
07:28:16 SQL> --
07:28:16 SQL> 
07:28:16 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:28:16 SQL> 
07:28:16 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.42
07:28:16 SQL> 
07:28:16 SQL> -- I created di5min here:
07:28:16 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:28:16 SQL> 
07:28:16 SQL> CREATE OR REPLACE VIEW q11 AS
07:28:16   2  SELECT
07:28:16   3  pair
07:28:16   4  ,ydate
07:28:16   5  ,prdate
07:28:16   6  ,rownum rnum -- acts as t in my time-series
07:28:16   7  ,clse
07:28:16   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
07:28:16   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
07:28:16  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
07:28:16  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
07:28:16  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
07:28:16  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
07:28:16  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
07:28:16  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
07:28:16  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
07:28:16  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
07:28:16  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
07:28:16  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
07:28:16  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
07:28:16  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
07:28:16  22  FROM di5min WHERE pair LIKE'%aud%'
07:28:16  23  ORDER BY ydate
07:28:16  24  /

View created.

Elapsed: 00:00:00.05
07:28:16 SQL> 
07:28:16 SQL> -- rpt
07:28:16 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
aud_usd        20740

Elapsed: 00:00:00.34
07:28:16 SQL> 
07:28:16 SQL> -- Calc deltas and gains
07:28:16 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.18
07:28:17 SQL> 
07:28:17 SQL> CREATE TABLE q13 COMPRESS AS
07:28:17   2  SELECT
07:28:17   3  pair
07:28:17   4  ,ydate
07:28:17   5  ,prdate
07:28:17   6  ,rnum
07:28:17   7  ,ld8
07:28:17   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
07:28:17   9  -- step by 2
07:28:17  10  ,clse-lg6  d06
07:28:17  11  ,lg6 -lg8  d68
07:28:17  12  ,lg8 -lg10 d810
07:28:17  13  ,lg10-lg12 d1012
07:28:17  14  ,lg12-lg14 d1214
07:28:17  15  ,lg14-lg16 d1416
07:28:17  16  ,lg16-lg18 d1618
07:28:17  17  -- step by 4
07:28:17  18  ,lg6 -lg10 d610
07:28:17  19  ,lg8 -lg12 d812
07:28:17  20  ,lg10-lg14 d1014
07:28:17  21  ,lg12-lg16 d1216
07:28:17  22  --
07:28:17  23  ,ABS(clse-lg6 )dc6
07:28:17  24  ,ABS(clse-lg8 )dc8
07:28:17  25  ,ABS(clse-lg10)dc10
07:28:17  26  ,ABS(clse-lg12)dc12
07:28:17  27  ,ABS(clse-lg14)dc14
07:28:17  28  ,ABS(clse-lg16)dc16
07:28:17  29  ,ABS(clse-lg18)dc18
07:28:17  30  ,ABS(clse-lg20)dc20
07:28:17  31  ,ABS(clse-lg22)dc22
07:28:17  32  ,(ld8-clse) ug8
07:28:17  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:28:17  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:28:17  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:28:17  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:28:17  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:28:17  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:28:17  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:28:17  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
07:28:17  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
07:28:17  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
07:28:17  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
07:28:17  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
07:28:17  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
07:28:17  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:28:17  47  ,0+TO_CHAR(ydate,'D')d
07:28:17  48  ,0+TO_CHAR(ydate,'W')w
07:28:17  49  -- mpm stands for minutes-past-midnight:
07:28:17  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:28:17  51  FROM q11
07:28:17  52  -- I dont want any NULL values from the LAG() functions:
07:28:17  53  WHERE lg32 > 0
07:28:17  54  ORDER BY pair,ydate
07:28:17  55  /

Table created.

Elapsed: 00:00:01.76
07:28:18 SQL> 
07:28:18 SQL> -- rpt
07:28:18 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	   10810
	-1	    9546

Elapsed: 00:00:00.03
07:28:18 SQL> 
07:28:18 SQL> -- Calc gains and ntiles
07:28:18 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.34
07:28:19 SQL> CREATE TABLE q15 COMPRESS AS
07:28:19   2  SELECT
07:28:19   3  pair
07:28:19   4  ,ydate
07:28:19   5  ,prdate -- Should be unique
07:28:19   6  ,trend -- +1 or -1
07:28:19   7  -- Use NTILE() to derive some attributes
07:28:19   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
07:28:19   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
07:28:19  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
07:28:19  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
07:28:19  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
07:28:19  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
07:28:19  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
07:28:19  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
07:28:19  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
07:28:19  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
07:28:19  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
07:28:19  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
07:28:19  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
07:28:19  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
07:28:19  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
07:28:19  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
07:28:19  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
07:28:19  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
07:28:19  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
07:28:19  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
07:28:19  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
07:28:19  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
07:28:19  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
07:28:19  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
07:28:19  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
07:28:19  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
07:28:19  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
07:28:19  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
07:28:19  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
07:28:19  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
07:28:19  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
07:28:19  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
07:28:19  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
07:28:19  41  ,hh    att32
07:28:19  42  ,d     att33
07:28:19  43  ,w     att34
07:28:19  44  ,mpm   att35
07:28:19  45  ,trend att36
07:28:19  46  ,ug8 g8
07:28:19  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
07:28:19  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
07:28:19  49  FROM q13
07:28:19  50  ORDER BY pair,ydate
07:28:19  51  /

Table created.

Elapsed: 00:00:05.28
07:28:24 SQL> 
07:28:24 SQL> -- rpt
07:28:24 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
07:28:24   2  GROUP BY pair,trend,gatt,gattn
07:28:24   3  ORDER BY pair,trend,gatt,gattn
07:28:24   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
aud_usd 	-1 nup nup .000035737	    3552
aud_usd 	-1 nup up  -.00525835	    2519
aud_usd 	-1 up  nup .005173898	    3402
aud_usd 	-1			       0
aud_usd 	 1 nup nup .000026953	    4346
aud_usd 	 1 nup up  -.00500047	    3062
aud_usd 	 1 up  nup .005093811	    3379
aud_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.02
07:28:24 SQL> 
07:28:24 SQL> -- rpt
07:28:24 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
aud_usd 2010-12-24 07:25:00

Elapsed: 00:00:00.02
07:28:24 SQL> 
07:28:24 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.22
07:28:24 SQL> CREATE TABLE modsrc COMPRESS AS
07:28:24   2  SELECT
07:28:24   3  pair
07:28:24   4  ,ydate
07:28:24   5  ,prdate
07:28:24   6  ,trend
07:28:24   7  ,g8
07:28:24   8  ,gatt
07:28:24   9  ,gattn
07:28:24  10  FROM q15
07:28:24  11  /

Table created.

Elapsed: 00:00:00.08
07:28:24 SQL> 
07:28:24 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
07:28:25 SQL> 
07:28:25 SQL> -- rpt
07:28:25 SQL> 
07:28:25 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20740

Elapsed: 00:00:00.44
07:28:25 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20356

Elapsed: 00:00:00.02
07:28:25 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20356

Elapsed: 00:00:00.01
07:28:25 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20356

Elapsed: 00:00:00.03
07:28:25 SQL> 
07:28:25 SQL> DROP   TABLE aud_ms10 ;

Table dropped.

Elapsed: 00:00:00.04
07:28:25 SQL> CREATE TABLE aud_ms10 COMPRESS AS
07:28:25   2  SELECT
07:28:25   3  ydate
07:28:25   4  ,trend aud_trend
07:28:25   5  ,g8    aud_g8
07:28:25   6  ,gatt  aud_gatt
07:28:25   7  ,gattn aud_gattn
07:28:25   8  FROM modsrc
07:28:25   9  /

Table created.

Elapsed: 00:00:00.12
07:28:25 SQL> 
07:28:25 SQL> ANALYZE TABLE aud_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
07:28:25 SQL> 
07:28:25 SQL> -- rpt
07:28:25 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 19:30:01 2010-12-24 07:25:00	10787	  -.0203      .0136
	-1 2010-09-16 15:30:01 2010-12-24 06:10:00	 9473	  -.0196      .0148

Elapsed: 00:00:00.02
07:28:25 SQL> SELECT aud_trend,MIN(ydate),MAX(ydate),COUNT(aud_trend),MIN(aud_g8),MAX(aud_g8)FROM aud_ms10 GROUP BY aud_trend;

 AUD_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(AUD_TREND) MIN(AUD_G8) MAX(AUD_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 19:30:01 2010-12-24 07:25:00	      10810	 -.0203       .0136
	-1 2010-09-16 15:30:01 2010-12-24 06:10:00	       9546	 -.0196       .0148

Elapsed: 00:00:00.01
07:28:25 SQL> 
07:28:25 SQL> -- I need a copy of q15 attributes
07:28:25 SQL> 
07:28:25 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.04
07:28:25 SQL> CREATE TABLE aud_att COMPRESS AS
07:28:25   2  SELECT
07:28:25   3  ydate
07:28:25   4  ,att00 aud_att00
07:28:25   5  ,att01 aud_att01
07:28:25   6  ,att02 aud_att02
07:28:25   7  ,att03 aud_att03
07:28:25   8  ,att04 aud_att04
07:28:25   9  ,att05 aud_att05
07:28:25  10  ,att06 aud_att06
07:28:25  11  ,att07 aud_att07
07:28:25  12  ,att08 aud_att08
07:28:25  13  ,att09 aud_att09
07:28:25  14  ,att10 aud_att10
07:28:25  15  ,att11 aud_att11
07:28:25  16  ,att12 aud_att12
07:28:25  17  ,att13 aud_att13
07:28:25  18  ,att14 aud_att14
07:28:25  19  ,att15 aud_att15
07:28:25  20  ,att16 aud_att16
07:28:25  21  ,att17 aud_att17
07:28:25  22  ,att18 aud_att18
07:28:25  23  ,att19 aud_att19
07:28:25  24  ,att20 aud_att20
07:28:25  25  ,att21 aud_att21
07:28:25  26  ,att22 aud_att22
07:28:25  27  ,att23 aud_att23
07:28:25  28  ,att24 aud_att24
07:28:25  29  ,att25 aud_att25
07:28:25  30  ,att26 aud_att26
07:28:25  31  ,att27 aud_att27
07:28:25  32  ,att28 aud_att28
07:28:25  33  ,att29 aud_att29
07:28:25  34  ,att30 aud_att30
07:28:25  35  ,att31 aud_att31
07:28:25  36  ,att32 aud_att32
07:28:25  37  ,att33 aud_att33
07:28:25  38  ,att34 aud_att34
07:28:25  39  ,att35 aud_att35
07:28:25  40  ,att36 aud_att36
07:28:25  41  FROM q15
07:28:25  42  /

Table created.

Elapsed: 00:00:00.17
07:28:26 SQL> 
07:28:26 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
07:28:26 SQL> 
07:28:26 SQL> -- rpt
07:28:26 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     20356

Elapsed: 00:00:00.00
07:28:26 SQL> 
07:28:26 SQL> --
07:28:26 SQL> -- gbp10.sql
07:28:26 SQL> --
07:28:26 SQL> 
07:28:26 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:28:26 SQL> 
07:28:26 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.34
07:28:26 SQL> 
07:28:26 SQL> -- I created di5min here:
07:28:26 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:28:26 SQL> 
07:28:26 SQL> CREATE OR REPLACE VIEW q11 AS
07:28:26   2  SELECT
07:28:26   3  pair
07:28:26   4  ,ydate
07:28:26   5  ,prdate
07:28:26   6  ,rownum rnum -- acts as t in my time-series
07:28:26   7  ,clse
07:28:26   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
07:28:26   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
07:28:26  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
07:28:26  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
07:28:26  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
07:28:26  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
07:28:26  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
07:28:26  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
07:28:26  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
07:28:26  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
07:28:26  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
07:28:26  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
07:28:26  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
07:28:26  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
07:28:26  22  FROM di5min WHERE pair LIKE'%gbp%'
07:28:26  23  ORDER BY ydate
07:28:26  24  /

View created.

Elapsed: 00:00:00.05
07:28:26 SQL> 
07:28:26 SQL> -- rpt
07:28:26 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
gbp_usd        20742

Elapsed: 00:00:00.36
07:28:27 SQL> 
07:28:27 SQL> -- Calc deltas and gains
07:28:27 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.20
07:28:27 SQL> 
07:28:27 SQL> CREATE TABLE q13 COMPRESS AS
07:28:27   2  SELECT
07:28:27   3  pair
07:28:27   4  ,ydate
07:28:27   5  ,prdate
07:28:27   6  ,rnum
07:28:27   7  ,ld8
07:28:27   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
07:28:27   9  -- step by 2
07:28:27  10  ,clse-lg6  d06
07:28:27  11  ,lg6 -lg8  d68
07:28:27  12  ,lg8 -lg10 d810
07:28:27  13  ,lg10-lg12 d1012
07:28:27  14  ,lg12-lg14 d1214
07:28:27  15  ,lg14-lg16 d1416
07:28:27  16  ,lg16-lg18 d1618
07:28:27  17  -- step by 4
07:28:27  18  ,lg6 -lg10 d610
07:28:27  19  ,lg8 -lg12 d812
07:28:27  20  ,lg10-lg14 d1014
07:28:27  21  ,lg12-lg16 d1216
07:28:27  22  --
07:28:27  23  ,ABS(clse-lg6 )dc6
07:28:27  24  ,ABS(clse-lg8 )dc8
07:28:27  25  ,ABS(clse-lg10)dc10
07:28:27  26  ,ABS(clse-lg12)dc12
07:28:27  27  ,ABS(clse-lg14)dc14
07:28:27  28  ,ABS(clse-lg16)dc16
07:28:27  29  ,ABS(clse-lg18)dc18
07:28:27  30  ,ABS(clse-lg20)dc20
07:28:27  31  ,ABS(clse-lg22)dc22
07:28:27  32  ,(ld8-clse) ug8
07:28:27  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:28:27  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:28:27  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:28:27  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:28:27  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:28:27  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:28:27  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:28:27  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
07:28:27  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
07:28:27  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
07:28:27  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
07:28:27  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
07:28:27  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
07:28:27  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:28:27  47  ,0+TO_CHAR(ydate,'D')d
07:28:27  48  ,0+TO_CHAR(ydate,'W')w
07:28:27  49  -- mpm stands for minutes-past-midnight:
07:28:27  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:28:27  51  FROM q11
07:28:27  52  -- I dont want any NULL values from the LAG() functions:
07:28:27  53  WHERE lg32 > 0
07:28:27  54  ORDER BY pair,ydate
07:28:27  55  /

Table created.

Elapsed: 00:00:02.48
07:28:29 SQL> 
07:28:29 SQL> -- rpt
07:28:29 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9982
	-1	   10376

Elapsed: 00:00:00.03
07:28:30 SQL> 
07:28:30 SQL> -- Calc gains and ntiles
07:28:30 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.19
07:28:30 SQL> CREATE TABLE q15 COMPRESS AS
07:28:30   2  SELECT
07:28:30   3  pair
07:28:30   4  ,ydate
07:28:30   5  ,prdate -- Should be unique
07:28:30   6  ,trend -- +1 or -1
07:28:30   7  -- Use NTILE() to derive some attributes
07:28:30   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
07:28:30   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
07:28:30  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
07:28:30  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
07:28:30  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
07:28:30  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
07:28:30  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
07:28:30  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
07:28:30  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
07:28:30  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
07:28:30  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
07:28:30  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
07:28:30  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
07:28:30  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
07:28:30  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
07:28:30  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
07:28:30  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
07:28:30  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
07:28:30  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
07:28:30  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
07:28:30  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
07:28:30  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
07:28:30  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
07:28:30  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
07:28:30  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
07:28:30  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
07:28:30  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
07:28:30  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
07:28:30  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
07:28:30  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
07:28:30  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
07:28:30  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
07:28:30  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
07:28:30  41  ,hh    att32
07:28:30  42  ,d     att33
07:28:30  43  ,w     att34
07:28:30  44  ,mpm   att35
07:28:30  45  ,trend att36
07:28:30  46  ,ug8 g8
07:28:30  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
07:28:30  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
07:28:30  49  FROM q13
07:28:30  50  ORDER BY pair,ydate
07:28:30  51  /

Table created.

Elapsed: 00:00:05.35
07:28:35 SQL> 
07:28:35 SQL> -- rpt
07:28:35 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
07:28:35   2  GROUP BY pair,trend,gatt,gattn
07:28:35   3  ORDER BY pair,trend,gatt,gattn
07:28:35   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
gbp_usd 	-1 nup nup .000093748	    3839
gbp_usd 	-1 nup up   -.0059004	    3270
gbp_usd 	-1 up  nup .005468704	    3260
gbp_usd 	-1			       0
gbp_usd 	 1 nup nup -.00007956	    3643
gbp_usd 	 1 nup up  -.00554744	    3271
gbp_usd 	 1 up  nup .005972957	    2979
gbp_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
07:28:35 SQL> 
07:28:35 SQL> -- rpt
07:28:35 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
gbp_usd 2010-12-24 07:25:00

Elapsed: 00:00:00.01
07:28:35 SQL> 
07:28:35 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.19
07:28:35 SQL> CREATE TABLE modsrc COMPRESS AS
07:28:35   2  SELECT
07:28:35   3  pair
07:28:35   4  ,ydate
07:28:35   5  ,prdate
07:28:35   6  ,trend
07:28:35   7  ,g8
07:28:35   8  ,gatt
07:28:35   9  ,gattn
07:28:35  10  FROM q15
07:28:35  11  /

Table created.

Elapsed: 00:00:00.10
07:28:35 SQL> 
07:28:35 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
07:28:36 SQL> 
07:28:36 SQL> -- rpt
07:28:36 SQL> 
07:28:36 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20742

Elapsed: 00:00:00.36
07:28:36 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.01
07:28:36 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.00
07:28:36 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.01
07:28:36 SQL> 
07:28:36 SQL> DROP   TABLE gbp_ms10 ;

Table dropped.

Elapsed: 00:00:00.03
07:28:36 SQL> CREATE TABLE gbp_ms10 COMPRESS AS
07:28:36   2  SELECT
07:28:36   3  ydate
07:28:36   4  ,trend gbp_trend
07:28:36   5  ,g8    gbp_g8
07:28:36   6  ,gatt  gbp_gatt
07:28:36   7  ,gattn gbp_gattn
07:28:36   8  FROM modsrc
07:28:36   9  /

Table created.

Elapsed: 00:00:00.07
07:28:36 SQL> 
07:28:36 SQL> ANALYZE TABLE gbp_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
07:28:36 SQL> 
07:28:36 SQL> -- rpt
07:28:36 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 16:05:01 2010-12-24 07:25:00	 9893	  -.0231       .019
	-1 2010-09-16 15:30:01 2010-12-24 06:05:00	10369	    -.02      .0204

Elapsed: 00:00:00.03
07:28:36 SQL> SELECT gbp_trend,MIN(ydate),MAX(ydate),COUNT(gbp_trend),MIN(gbp_g8),MAX(gbp_g8)FROM gbp_ms10 GROUP BY gbp_trend;

 GBP_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(GBP_TREND) MIN(GBP_G8) MAX(GBP_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 16:05:01 2010-12-24 07:25:00	       9982	 -.0231        .019
	-1 2010-09-16 15:30:01 2010-12-24 06:05:00	      10376	   -.02       .0204

Elapsed: 00:00:00.01
07:28:36 SQL> 
07:28:36 SQL> -- I need a copy of q15 attributes
07:28:36 SQL> 
07:28:36 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.04
07:28:36 SQL> CREATE TABLE gbp_att COMPRESS AS
07:28:36   2  SELECT
07:28:36   3  ydate
07:28:36   4  ,att00 gbp_att00
07:28:36   5  ,att01 gbp_att01
07:28:36   6  ,att02 gbp_att02
07:28:36   7  ,att03 gbp_att03
07:28:36   8  ,att04 gbp_att04
07:28:36   9  ,att05 gbp_att05
07:28:36  10  ,att06 gbp_att06
07:28:36  11  ,att07 gbp_att07
07:28:36  12  ,att08 gbp_att08
07:28:36  13  ,att09 gbp_att09
07:28:36  14  ,att10 gbp_att10
07:28:36  15  ,att11 gbp_att11
07:28:36  16  ,att12 gbp_att12
07:28:36  17  ,att13 gbp_att13
07:28:36  18  ,att14 gbp_att14
07:28:36  19  ,att15 gbp_att15
07:28:36  20  ,att16 gbp_att16
07:28:36  21  ,att17 gbp_att17
07:28:36  22  ,att18 gbp_att18
07:28:36  23  ,att19 gbp_att19
07:28:36  24  ,att20 gbp_att20
07:28:36  25  ,att21 gbp_att21
07:28:36  26  ,att22 gbp_att22
07:28:36  27  ,att23 gbp_att23
07:28:36  28  ,att24 gbp_att24
07:28:36  29  ,att25 gbp_att25
07:28:36  30  ,att26 gbp_att26
07:28:36  31  ,att27 gbp_att27
07:28:36  32  ,att28 gbp_att28
07:28:36  33  ,att29 gbp_att29
07:28:36  34  ,att30 gbp_att30
07:28:36  35  ,att31 gbp_att31
07:28:36  36  ,att32 gbp_att32
07:28:36  37  ,att33 gbp_att33
07:28:36  38  ,att34 gbp_att34
07:28:36  39  ,att35 gbp_att35
07:28:36  40  ,att36 gbp_att36
07:28:36  41  FROM q15
07:28:36  42  /

Table created.

Elapsed: 00:00:00.17
07:28:37 SQL> 
07:28:37 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
07:28:37 SQL> 
07:28:37 SQL> -- rpt
07:28:37 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     20358

Elapsed: 00:00:00.01
07:28:37 SQL> 
07:28:37 SQL> --
07:28:37 SQL> -- jpy10.sql
07:28:37 SQL> --
07:28:37 SQL> 
07:28:37 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:28:37 SQL> 
07:28:37 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.32
07:28:37 SQL> 
07:28:37 SQL> -- I created di5min here:
07:28:37 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:28:37 SQL> 
07:28:37 SQL> CREATE OR REPLACE VIEW q11 AS
07:28:37   2  SELECT
07:28:37   3  pair
07:28:37   4  ,ydate
07:28:37   5  ,prdate
07:28:37   6  ,rownum rnum -- acts as t in my time-series
07:28:37   7  ,clse
07:28:37   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
07:28:37   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
07:28:37  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
07:28:37  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
07:28:37  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
07:28:37  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
07:28:37  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
07:28:37  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
07:28:37  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
07:28:37  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
07:28:37  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
07:28:37  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
07:28:37  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
07:28:37  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
07:28:37  22  FROM di5min WHERE pair LIKE'%jpy%'
07:28:37  23  ORDER BY ydate
07:28:37  24  /

View created.

Elapsed: 00:00:00.05
07:28:37 SQL> 
07:28:37 SQL> -- rpt
07:28:37 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_jpy        20741

Elapsed: 00:00:00.34
07:28:38 SQL> 
07:28:38 SQL> -- Calc deltas and gains
07:28:38 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.24
07:28:38 SQL> 
07:28:38 SQL> CREATE TABLE q13 COMPRESS AS
07:28:38   2  SELECT
07:28:38   3  pair
07:28:38   4  ,ydate
07:28:38   5  ,prdate
07:28:38   6  ,rnum
07:28:38   7  ,ld8
07:28:38   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
07:28:38   9  -- step by 2
07:28:38  10  ,clse-lg6  d06
07:28:38  11  ,lg6 -lg8  d68
07:28:38  12  ,lg8 -lg10 d810
07:28:38  13  ,lg10-lg12 d1012
07:28:38  14  ,lg12-lg14 d1214
07:28:38  15  ,lg14-lg16 d1416
07:28:38  16  ,lg16-lg18 d1618
07:28:38  17  -- step by 4
07:28:38  18  ,lg6 -lg10 d610
07:28:38  19  ,lg8 -lg12 d812
07:28:38  20  ,lg10-lg14 d1014
07:28:38  21  ,lg12-lg16 d1216
07:28:38  22  --
07:28:38  23  ,ABS(clse-lg6 )dc6
07:28:38  24  ,ABS(clse-lg8 )dc8
07:28:38  25  ,ABS(clse-lg10)dc10
07:28:38  26  ,ABS(clse-lg12)dc12
07:28:38  27  ,ABS(clse-lg14)dc14
07:28:38  28  ,ABS(clse-lg16)dc16
07:28:38  29  ,ABS(clse-lg18)dc18
07:28:38  30  ,ABS(clse-lg20)dc20
07:28:38  31  ,ABS(clse-lg22)dc22
07:28:38  32  ,(ld8-clse) ug8
07:28:38  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:28:38  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:28:38  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:28:38  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:28:38  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:28:38  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:28:38  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:28:38  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
07:28:38  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
07:28:38  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
07:28:38  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
07:28:38  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
07:28:38  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
07:28:38  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:28:38  47  ,0+TO_CHAR(ydate,'D')d
07:28:38  48  ,0+TO_CHAR(ydate,'W')w
07:28:38  49  -- mpm stands for minutes-past-midnight:
07:28:38  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:28:38  51  FROM q11
07:28:38  52  -- I dont want any NULL values from the LAG() functions:
07:28:38  53  WHERE lg32 > 0
07:28:38  54  ORDER BY pair,ydate
07:28:38  55  /

Table created.

Elapsed: 00:00:01.67
07:28:40 SQL> 
07:28:40 SQL> -- rpt
07:28:40 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9411
	-1	   10946

Elapsed: 00:00:00.03
07:28:40 SQL> 
07:28:40 SQL> -- Calc gains and ntiles
07:28:40 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.11
07:28:40 SQL> CREATE TABLE q15 COMPRESS AS
07:28:40   2  SELECT
07:28:40   3  pair
07:28:40   4  ,ydate
07:28:40   5  ,prdate -- Should be unique
07:28:40   6  ,trend -- +1 or -1
07:28:40   7  -- Use NTILE() to derive some attributes
07:28:40   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
07:28:40   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
07:28:40  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
07:28:40  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
07:28:40  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
07:28:40  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
07:28:40  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
07:28:40  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
07:28:40  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
07:28:40  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
07:28:40  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
07:28:40  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
07:28:40  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
07:28:40  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
07:28:40  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
07:28:40  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
07:28:40  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
07:28:40  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
07:28:40  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
07:28:40  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
07:28:40  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
07:28:40  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
07:28:40  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
07:28:40  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
07:28:40  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
07:28:40  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
07:28:40  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
07:28:40  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
07:28:40  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
07:28:40  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
07:28:40  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
07:28:40  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
07:28:40  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
07:28:40  41  ,hh    att32
07:28:40  42  ,d     att33
07:28:40  43  ,w     att34
07:28:40  44  ,mpm   att35
07:28:40  45  ,trend att36
07:28:40  46  ,ug8 g8
07:28:40  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
07:28:40  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
07:28:40  49  FROM q13
07:28:40  50  ORDER BY pair,ydate
07:28:40  51  /

Table created.

Elapsed: 00:00:05.50
07:28:45 SQL> 
07:28:45 SQL> -- rpt
07:28:45 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
07:28:45   2  GROUP BY pair,trend,gatt,gattn
07:28:45   3  ORDER BY pair,trend,gatt,gattn
07:28:45   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_jpy 	-1 nup nup -7.437E-06	     168
usd_jpy 	-1 nup up  -.18426989	    5526
usd_jpy 	-1 up  nup  .17958138	    5233
usd_jpy 	-1			       0
usd_jpy 	 1 nup nup	    0	     118
usd_jpy 	 1 nup up  -.18874785	    5135
usd_jpy 	 1 up  nup .192094767	    4081
usd_jpy 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
07:28:45 SQL> 
07:28:45 SQL> -- rpt
07:28:45 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_jpy 2010-12-24 07:25:00

Elapsed: 00:00:00.01
07:28:45 SQL> 
07:28:45 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.21
07:28:46 SQL> CREATE TABLE modsrc COMPRESS AS
07:28:46   2  SELECT
07:28:46   3  pair
07:28:46   4  ,ydate
07:28:46   5  ,prdate
07:28:46   6  ,trend
07:28:46   7  ,g8
07:28:46   8  ,gatt
07:28:46   9  ,gattn
07:28:46  10  FROM q15
07:28:46  11  /

Table created.

Elapsed: 00:00:00.09
07:28:46 SQL> 
07:28:46 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
07:28:46 SQL> 
07:28:46 SQL> -- rpt
07:28:46 SQL> 
07:28:46 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20741

Elapsed: 00:00:00.38
07:28:46 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20357

Elapsed: 00:00:00.01
07:28:46 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20357

Elapsed: 00:00:00.00
07:28:46 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20357

Elapsed: 00:00:00.01
07:28:46 SQL> 
07:28:46 SQL> DROP   TABLE jpy_ms10 ;

Table dropped.

Elapsed: 00:00:00.03
07:28:46 SQL> CREATE TABLE jpy_ms10 COMPRESS AS
07:28:46   2  SELECT
07:28:46   3  ydate
07:28:46   4  ,trend jpy_trend
07:28:46   5  ,g8    jpy_g8
07:28:46   6  ,gatt  jpy_gatt
07:28:46   7  ,gattn jpy_gattn
07:28:46   8  FROM modsrc
07:28:46   9  /

Table created.

Elapsed: 00:00:00.07
07:28:46 SQL> 
07:28:46 SQL> ANALYZE TABLE jpy_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
07:28:47 SQL> 
07:28:47 SQL> -- rpt
07:28:47 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 15:30:01 2010-12-24 06:30:00	 9334	  -1.185	  1
	-1 2010-09-17 00:15:01 2010-12-24 07:25:00	10927	 -1.0575       1.32

Elapsed: 00:00:00.02
07:28:47 SQL> SELECT jpy_trend,MIN(ydate),MAX(ydate),COUNT(jpy_trend),MIN(jpy_g8),MAX(jpy_g8)FROM jpy_ms10 GROUP BY jpy_trend;

 JPY_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(JPY_TREND) MIN(JPY_G8) MAX(JPY_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 15:30:01 2010-12-24 06:30:00	       9411	 -1.185 	  1
	-1 2010-09-17 00:15:01 2010-12-24 07:25:00	      10946	-1.0575        1.32

Elapsed: 00:00:00.02
07:28:47 SQL> 
07:28:47 SQL> -- I need a copy of q15 attributes
07:28:47 SQL> 
07:28:47 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.18
07:28:47 SQL> CREATE TABLE jpy_att COMPRESS AS
07:28:47   2  SELECT
07:28:47   3  ydate
07:28:47   4  ,att00 jpy_att00
07:28:47   5  ,att01 jpy_att01
07:28:47   6  ,att02 jpy_att02
07:28:47   7  ,att03 jpy_att03
07:28:47   8  ,att04 jpy_att04
07:28:47   9  ,att05 jpy_att05
07:28:47  10  ,att06 jpy_att06
07:28:47  11  ,att07 jpy_att07
07:28:47  12  ,att08 jpy_att08
07:28:47  13  ,att09 jpy_att09
07:28:47  14  ,att10 jpy_att10
07:28:47  15  ,att11 jpy_att11
07:28:47  16  ,att12 jpy_att12
07:28:47  17  ,att13 jpy_att13
07:28:47  18  ,att14 jpy_att14
07:28:47  19  ,att15 jpy_att15
07:28:47  20  ,att16 jpy_att16
07:28:47  21  ,att17 jpy_att17
07:28:47  22  ,att18 jpy_att18
07:28:47  23  ,att19 jpy_att19
07:28:47  24  ,att20 jpy_att20
07:28:47  25  ,att21 jpy_att21
07:28:47  26  ,att22 jpy_att22
07:28:47  27  ,att23 jpy_att23
07:28:47  28  ,att24 jpy_att24
07:28:47  29  ,att25 jpy_att25
07:28:47  30  ,att26 jpy_att26
07:28:47  31  ,att27 jpy_att27
07:28:47  32  ,att28 jpy_att28
07:28:47  33  ,att29 jpy_att29
07:28:47  34  ,att30 jpy_att30
07:28:47  35  ,att31 jpy_att31
07:28:47  36  ,att32 jpy_att32
07:28:47  37  ,att33 jpy_att33
07:28:47  38  ,att34 jpy_att34
07:28:47  39  ,att35 jpy_att35
07:28:47  40  ,att36 jpy_att36
07:28:47  41  FROM q15
07:28:47  42  /

Table created.

Elapsed: 00:00:00.22
07:28:47 SQL> 
07:28:47 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.49
07:28:47 SQL> 
07:28:47 SQL> -- rpt
07:28:47 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     20357

Elapsed: 00:00:00.00
07:28:47 SQL> 
07:28:47 SQL> --
07:28:47 SQL> -- cad10.sql
07:28:47 SQL> --
07:28:47 SQL> 
07:28:47 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:28:47 SQL> 
07:28:47 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.34
07:28:48 SQL> 
07:28:48 SQL> -- I created di5min here:
07:28:48 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:28:48 SQL> 
07:28:48 SQL> CREATE OR REPLACE VIEW q11 AS
07:28:48   2  SELECT
07:28:48   3  pair
07:28:48   4  ,ydate
07:28:48   5  ,prdate
07:28:48   6  ,rownum rnum -- acts as t in my time-series
07:28:48   7  ,clse
07:28:48   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
07:28:48   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
07:28:48  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
07:28:48  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
07:28:48  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
07:28:48  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
07:28:48  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
07:28:48  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
07:28:48  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
07:28:48  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
07:28:48  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
07:28:48  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
07:28:48  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
07:28:48  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
07:28:48  22  FROM di5min WHERE pair LIKE'%cad%'
07:28:48  23  ORDER BY ydate
07:28:48  24  /

View created.

Elapsed: 00:00:00.05
07:28:48 SQL> 
07:28:48 SQL> -- rpt
07:28:48 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_cad        20739

Elapsed: 00:00:00.34
07:28:48 SQL> 
07:28:48 SQL> -- Calc deltas and gains
07:28:48 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.18
07:28:48 SQL> 
07:28:48 SQL> CREATE TABLE q13 COMPRESS AS
07:28:48   2  SELECT
07:28:48   3  pair
07:28:48   4  ,ydate
07:28:48   5  ,prdate
07:28:48   6  ,rnum
07:28:48   7  ,ld8
07:28:48   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
07:28:48   9  -- step by 2
07:28:48  10  ,clse-lg6  d06
07:28:48  11  ,lg6 -lg8  d68
07:28:48  12  ,lg8 -lg10 d810
07:28:48  13  ,lg10-lg12 d1012
07:28:48  14  ,lg12-lg14 d1214
07:28:48  15  ,lg14-lg16 d1416
07:28:48  16  ,lg16-lg18 d1618
07:28:48  17  -- step by 4
07:28:48  18  ,lg6 -lg10 d610
07:28:48  19  ,lg8 -lg12 d812
07:28:48  20  ,lg10-lg14 d1014
07:28:48  21  ,lg12-lg16 d1216
07:28:48  22  --
07:28:48  23  ,ABS(clse-lg6 )dc6
07:28:48  24  ,ABS(clse-lg8 )dc8
07:28:48  25  ,ABS(clse-lg10)dc10
07:28:48  26  ,ABS(clse-lg12)dc12
07:28:48  27  ,ABS(clse-lg14)dc14
07:28:48  28  ,ABS(clse-lg16)dc16
07:28:48  29  ,ABS(clse-lg18)dc18
07:28:48  30  ,ABS(clse-lg20)dc20
07:28:48  31  ,ABS(clse-lg22)dc22
07:28:48  32  ,(ld8-clse) ug8
07:28:48  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:28:48  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:28:48  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:28:48  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:28:48  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:28:48  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:28:48  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:28:48  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
07:28:48  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
07:28:48  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
07:28:48  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
07:28:48  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
07:28:48  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
07:28:48  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:28:48  47  ,0+TO_CHAR(ydate,'D')d
07:28:48  48  ,0+TO_CHAR(ydate,'W')w
07:28:48  49  -- mpm stands for minutes-past-midnight:
07:28:48  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:28:48  51  FROM q11
07:28:48  52  -- I dont want any NULL values from the LAG() functions:
07:28:48  53  WHERE lg32 > 0
07:28:48  54  ORDER BY pair,ydate
07:28:48  55  /

Table created.

Elapsed: 00:00:01.72
07:28:50 SQL> 
07:28:50 SQL> -- rpt
07:28:50 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9411
	-1	   10944

Elapsed: 00:00:00.03
07:28:50 SQL> 
07:28:50 SQL> -- Calc gains and ntiles
07:28:50 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.12
07:28:50 SQL> CREATE TABLE q15 COMPRESS AS
07:28:50   2  SELECT
07:28:50   3  pair
07:28:50   4  ,ydate
07:28:50   5  ,prdate -- Should be unique
07:28:50   6  ,trend -- +1 or -1
07:28:50   7  -- Use NTILE() to derive some attributes
07:28:50   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
07:28:50   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
07:28:50  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
07:28:50  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
07:28:50  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
07:28:50  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
07:28:50  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
07:28:50  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
07:28:50  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
07:28:50  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
07:28:50  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
07:28:50  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
07:28:50  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
07:28:50  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
07:28:50  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
07:28:50  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
07:28:50  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
07:28:50  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
07:28:50  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
07:28:50  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
07:28:50  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
07:28:50  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
07:28:50  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
07:28:50  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
07:28:50  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
07:28:50  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
07:28:50  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
07:28:50  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
07:28:50  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
07:28:50  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
07:28:50  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
07:28:50  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
07:28:50  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
07:28:50  41  ,hh    att32
07:28:50  42  ,d     att33
07:28:50  43  ,w     att34
07:28:50  44  ,mpm   att35
07:28:50  45  ,trend att36
07:28:50  46  ,ug8 g8
07:28:50  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
07:28:50  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
07:28:50  49  FROM q13
07:28:50  50  ORDER BY pair,ydate
07:28:50  51  /

Table created.

Elapsed: 00:00:05.51
07:28:56 SQL> 
07:28:56 SQL> -- rpt
07:28:56 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
07:28:56   2  GROUP BY pair,trend,gatt,gattn
07:28:56   3  ORDER BY pair,trend,gatt,gattn
07:28:56   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_cad 	-1 nup nup -.00002543	    5677
usd_cad 	-1 nup up  -.00400672	    2629
usd_cad 	-1 up  nup .004683711	    2565
usd_cad 	-1			       0
usd_cad 	 1 nup nup -.00011566	    4652
usd_cad 	 1 nup up  -.00422802	    2754
usd_cad 	 1 up  nup .004613081	    1982
usd_cad 	 1			       0

8 rows selected.

Elapsed: 00:00:00.04
07:28:56 SQL> 
07:28:56 SQL> -- rpt
07:28:56 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_cad 2010-12-24 07:25:00

Elapsed: 00:00:00.02
07:28:56 SQL> 
07:28:56 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
07:28:56 SQL> CREATE TABLE modsrc COMPRESS AS
07:28:56   2  SELECT
07:28:56   3  pair
07:28:56   4  ,ydate
07:28:56   5  ,prdate
07:28:56   6  ,trend
07:28:56   7  ,g8
07:28:56   8  ,gatt
07:28:56   9  ,gattn
07:28:56  10  FROM q15
07:28:56  11  /

Table created.

Elapsed: 00:00:00.10
07:28:56 SQL> 
07:28:56 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
07:28:56 SQL> 
07:28:56 SQL> -- rpt
07:28:56 SQL> 
07:28:56 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20739

Elapsed: 00:00:00.36
07:28:57 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20355

Elapsed: 00:00:00.00
07:28:57 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20355

Elapsed: 00:00:00.01
07:28:57 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20355

Elapsed: 00:00:00.00
07:28:57 SQL> 
07:28:57 SQL> DROP   TABLE cad_ms10 ;

Table dropped.

Elapsed: 00:00:00.03
07:28:57 SQL> CREATE TABLE cad_ms10 COMPRESS AS
07:28:57   2  SELECT
07:28:57   3  ydate
07:28:57   4  ,trend cad_trend
07:28:57   5  ,g8    cad_g8
07:28:57   6  ,gatt  cad_gatt
07:28:57   7  ,gattn cad_gattn
07:28:57   8  FROM modsrc
07:28:57   9  /

Table created.

Elapsed: 00:00:00.07
07:28:57 SQL> 
07:28:57 SQL> ANALYZE TABLE cad_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
07:28:57 SQL> 
07:28:57 SQL> -- rpt
07:28:57 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 15:30:01 2010-12-24 04:55:00	 9388	  -.0122      .0159
	-1 2010-09-16 20:05:01 2010-12-24 07:25:00	10871	 -.01105      .0176

Elapsed: 00:00:00.02
07:28:57 SQL> SELECT cad_trend,MIN(ydate),MAX(ydate),COUNT(cad_trend),MIN(cad_g8),MAX(cad_g8)FROM cad_ms10 GROUP BY cad_trend;

 CAD_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(CAD_TREND) MIN(CAD_G8) MAX(CAD_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 15:30:01 2010-12-24 04:55:00	       9411	 -.0122       .0159
	-1 2010-09-16 20:05:01 2010-12-24 07:25:00	      10944	-.01105       .0176

Elapsed: 00:00:00.01
07:28:57 SQL> 
07:28:57 SQL> -- I need a copy of q15 attributes
07:28:57 SQL> 
07:28:57 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.12
07:28:57 SQL> CREATE TABLE cad_att COMPRESS AS
07:28:57   2  SELECT
07:28:57   3  ydate
07:28:57   4  ,att00 cad_att00
07:28:57   5  ,att01 cad_att01
07:28:57   6  ,att02 cad_att02
07:28:57   7  ,att03 cad_att03
07:28:57   8  ,att04 cad_att04
07:28:57   9  ,att05 cad_att05
07:28:57  10  ,att06 cad_att06
07:28:57  11  ,att07 cad_att07
07:28:57  12  ,att08 cad_att08
07:28:57  13  ,att09 cad_att09
07:28:57  14  ,att10 cad_att10
07:28:57  15  ,att11 cad_att11
07:28:57  16  ,att12 cad_att12
07:28:57  17  ,att13 cad_att13
07:28:57  18  ,att14 cad_att14
07:28:57  19  ,att15 cad_att15
07:28:57  20  ,att16 cad_att16
07:28:57  21  ,att17 cad_att17
07:28:57  22  ,att18 cad_att18
07:28:57  23  ,att19 cad_att19
07:28:57  24  ,att20 cad_att20
07:28:57  25  ,att21 cad_att21
07:28:57  26  ,att22 cad_att22
07:28:57  27  ,att23 cad_att23
07:28:57  28  ,att24 cad_att24
07:28:57  29  ,att25 cad_att25
07:28:57  30  ,att26 cad_att26
07:28:57  31  ,att27 cad_att27
07:28:57  32  ,att28 cad_att28
07:28:57  33  ,att29 cad_att29
07:28:57  34  ,att30 cad_att30
07:28:57  35  ,att31 cad_att31
07:28:57  36  ,att32 cad_att32
07:28:57  37  ,att33 cad_att33
07:28:57  38  ,att34 cad_att34
07:28:57  39  ,att35 cad_att35
07:28:57  40  ,att36 cad_att36
07:28:57  41  FROM q15
07:28:57  42  /

Table created.

Elapsed: 00:00:00.17
07:28:57 SQL> 
07:28:57 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
07:28:58 SQL> 
07:28:58 SQL> -- rpt
07:28:58 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     20355

Elapsed: 00:00:00.00
07:28:58 SQL> 
07:28:58 SQL> --
07:28:58 SQL> -- chf10.sql
07:28:58 SQL> --
07:28:58 SQL> 
07:28:58 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:28:58 SQL> 
07:28:58 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.57
07:28:58 SQL> 
07:28:58 SQL> -- I created di5min here:
07:28:58 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:28:58 SQL> 
07:28:58 SQL> CREATE OR REPLACE VIEW q11 AS
07:28:58   2  SELECT
07:28:58   3  pair
07:28:58   4  ,ydate
07:28:58   5  ,prdate
07:28:58   6  ,rownum rnum -- acts as t in my time-series
07:28:58   7  ,clse
07:28:58   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
07:28:58   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
07:28:58  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
07:28:58  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
07:28:58  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
07:28:58  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
07:28:58  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
07:28:58  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
07:28:58  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
07:28:58  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
07:28:58  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
07:28:58  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
07:28:58  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
07:28:58  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
07:28:58  22  FROM di5min WHERE pair LIKE'%chf%'
07:28:58  23  ORDER BY ydate
07:28:58  24  /

View created.

Elapsed: 00:00:00.05
07:28:58 SQL> 
07:28:58 SQL> -- rpt
07:28:58 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_chf        20742

Elapsed: 00:00:00.36
07:28:59 SQL> 
07:28:59 SQL> -- Calc deltas and gains
07:28:59 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.75
07:28:59 SQL> 
07:28:59 SQL> CREATE TABLE q13 COMPRESS AS
07:28:59   2  SELECT
07:28:59   3  pair
07:28:59   4  ,ydate
07:28:59   5  ,prdate
07:28:59   6  ,rnum
07:28:59   7  ,ld8
07:28:59   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
07:28:59   9  -- step by 2
07:28:59  10  ,clse-lg6  d06
07:28:59  11  ,lg6 -lg8  d68
07:28:59  12  ,lg8 -lg10 d810
07:28:59  13  ,lg10-lg12 d1012
07:28:59  14  ,lg12-lg14 d1214
07:28:59  15  ,lg14-lg16 d1416
07:28:59  16  ,lg16-lg18 d1618
07:28:59  17  -- step by 4
07:28:59  18  ,lg6 -lg10 d610
07:28:59  19  ,lg8 -lg12 d812
07:28:59  20  ,lg10-lg14 d1014
07:28:59  21  ,lg12-lg16 d1216
07:28:59  22  --
07:28:59  23  ,ABS(clse-lg6 )dc6
07:28:59  24  ,ABS(clse-lg8 )dc8
07:28:59  25  ,ABS(clse-lg10)dc10
07:28:59  26  ,ABS(clse-lg12)dc12
07:28:59  27  ,ABS(clse-lg14)dc14
07:28:59  28  ,ABS(clse-lg16)dc16
07:28:59  29  ,ABS(clse-lg18)dc18
07:28:59  30  ,ABS(clse-lg20)dc20
07:28:59  31  ,ABS(clse-lg22)dc22
07:28:59  32  ,(ld8-clse) ug8
07:28:59  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:28:59  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:28:59  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:28:59  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:28:59  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:28:59  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:28:59  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:28:59  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
07:28:59  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
07:28:59  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
07:28:59  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
07:28:59  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
07:28:59  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
07:28:59  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:28:59  47  ,0+TO_CHAR(ydate,'D')d
07:28:59  48  ,0+TO_CHAR(ydate,'W')w
07:28:59  49  -- mpm stands for minutes-past-midnight:
07:28:59  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:28:59  51  FROM q11
07:28:59  52  -- I dont want any NULL values from the LAG() functions:
07:28:59  53  WHERE lg32 > 0
07:28:59  54  ORDER BY pair,ydate
07:28:59  55  /

Table created.

Elapsed: 00:00:01.75
07:29:01 SQL> 
07:29:01 SQL> -- rpt
07:29:01 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9555
	-1	   10803

Elapsed: 00:00:00.03
07:29:01 SQL> 
07:29:01 SQL> -- Calc gains and ntiles
07:29:01 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.13
07:29:01 SQL> CREATE TABLE q15 COMPRESS AS
07:29:01   2  SELECT
07:29:01   3  pair
07:29:01   4  ,ydate
07:29:01   5  ,prdate -- Should be unique
07:29:01   6  ,trend -- +1 or -1
07:29:01   7  -- Use NTILE() to derive some attributes
07:29:01   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
07:29:01   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
07:29:01  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
07:29:01  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
07:29:01  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
07:29:01  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
07:29:01  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
07:29:01  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
07:29:01  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
07:29:01  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
07:29:01  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
07:29:01  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
07:29:01  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
07:29:01  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
07:29:01  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
07:29:01  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
07:29:01  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
07:29:01  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
07:29:01  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
07:29:01  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
07:29:01  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
07:29:01  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
07:29:01  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
07:29:01  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
07:29:01  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
07:29:01  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
07:29:01  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
07:29:01  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
07:29:01  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
07:29:01  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
07:29:01  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
07:29:01  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
07:29:01  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
07:29:01  41  ,hh    att32
07:29:01  42  ,d     att33
07:29:01  43  ,w     att34
07:29:01  44  ,mpm   att35
07:29:01  45  ,trend att36
07:29:01  46  ,ug8 g8
07:29:01  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
07:29:01  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
07:29:01  49  FROM q13
07:29:01  50  ORDER BY pair,ydate
07:29:01  51  /

Table created.

Elapsed: 00:00:05.34
07:29:07 SQL> 
07:29:07 SQL> -- rpt
07:29:07 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
07:29:07   2  GROUP BY pair,trend,gatt,gattn
07:29:07   3  ORDER BY pair,trend,gatt,gattn
07:29:07   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_chf 	-1 nup nup .000022864	    4909
usd_chf 	-1 nup up  -.00495131	    3140
usd_chf 	-1 up  nup .005077328	    2658
usd_chf 	-1			       0
usd_chf 	 1 nup nup -.00002049	    4530
usd_chf 	 1 nup up  -.00452926	    2921
usd_chf 	 1 up  nup .004634476	    2104

7 rows selected.

Elapsed: 00:00:00.02
07:29:07 SQL> 
07:29:07 SQL> -- rpt
07:29:07 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_chf 2010-12-24 07:25:00

Elapsed: 00:00:00.02
07:29:07 SQL> 
07:29:07 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
07:29:07 SQL> CREATE TABLE modsrc COMPRESS AS
07:29:07   2  SELECT
07:29:07   3  pair
07:29:07   4  ,ydate
07:29:07   5  ,prdate
07:29:07   6  ,trend
07:29:07   7  ,g8
07:29:07   8  ,gatt
07:29:07   9  ,gattn
07:29:07  10  FROM q15
07:29:07  11  /

Table created.

Elapsed: 00:00:00.09
07:29:07 SQL> 
07:29:07 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
07:29:07 SQL> 
07:29:07 SQL> -- rpt
07:29:07 SQL> 
07:29:07 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20742

Elapsed: 00:00:00.34
07:29:08 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.00
07:29:08 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.01
07:29:08 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.00
07:29:08 SQL> 
07:29:08 SQL> DROP   TABLE chf_ms10 ;

Table dropped.

Elapsed: 00:00:00.03
07:29:08 SQL> CREATE TABLE chf_ms10 COMPRESS AS
07:29:08   2  SELECT
07:29:08   3  ydate
07:29:08   4  ,trend chf_trend
07:29:08   5  ,g8    chf_g8
07:29:08   6  ,gatt  chf_gatt
07:29:08   7  ,gattn chf_gattn
07:29:08   8  FROM modsrc
07:29:08   9  /

Table created.

Elapsed: 00:00:00.07
07:29:08 SQL> 
07:29:08 SQL> ANALYZE TABLE chf_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
07:29:08 SQL> 
07:29:08 SQL> -- rpt
07:29:08 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 15:30:01 2010-12-23 21:45:00	 9555	 -.01775      .0155
	-1 2010-09-16 20:55:01 2010-12-24 07:25:00	10707	 -.01825     .01545

Elapsed: 00:00:00.02
07:29:08 SQL> SELECT chf_trend,MIN(ydate),MAX(ydate),COUNT(chf_trend),MIN(chf_g8),MAX(chf_g8)FROM chf_ms10 GROUP BY chf_trend;

 CHF_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(CHF_TREND) MIN(CHF_G8) MAX(CHF_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 15:30:01 2010-12-23 21:45:00	       9555	-.01775       .0155
	-1 2010-09-16 20:55:01 2010-12-24 07:25:00	      10803	-.01825      .01545

Elapsed: 00:00:00.02
07:29:08 SQL> 
07:29:08 SQL> -- I need a copy of q15 attributes
07:29:08 SQL> 
07:29:08 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.03
07:29:08 SQL> CREATE TABLE chf_att COMPRESS AS
07:29:08   2  SELECT
07:29:08   3  ydate
07:29:08   4  ,att00 chf_att00
07:29:08   5  ,att01 chf_att01
07:29:08   6  ,att02 chf_att02
07:29:08   7  ,att03 chf_att03
07:29:08   8  ,att04 chf_att04
07:29:08   9  ,att05 chf_att05
07:29:08  10  ,att06 chf_att06
07:29:08  11  ,att07 chf_att07
07:29:08  12  ,att08 chf_att08
07:29:08  13  ,att09 chf_att09
07:29:08  14  ,att10 chf_att10
07:29:08  15  ,att11 chf_att11
07:29:08  16  ,att12 chf_att12
07:29:08  17  ,att13 chf_att13
07:29:08  18  ,att14 chf_att14
07:29:08  19  ,att15 chf_att15
07:29:08  20  ,att16 chf_att16
07:29:08  21  ,att17 chf_att17
07:29:08  22  ,att18 chf_att18
07:29:08  23  ,att19 chf_att19
07:29:08  24  ,att20 chf_att20
07:29:08  25  ,att21 chf_att21
07:29:08  26  ,att22 chf_att22
07:29:08  27  ,att23 chf_att23
07:29:08  28  ,att24 chf_att24
07:29:08  29  ,att25 chf_att25
07:29:08  30  ,att26 chf_att26
07:29:08  31  ,att27 chf_att27
07:29:08  32  ,att28 chf_att28
07:29:08  33  ,att29 chf_att29
07:29:08  34  ,att30 chf_att30
07:29:08  35  ,att31 chf_att31
07:29:08  36  ,att32 chf_att32
07:29:08  37  ,att33 chf_att33
07:29:08  38  ,att34 chf_att34
07:29:08  39  ,att35 chf_att35
07:29:08  40  ,att36 chf_att36
07:29:08  41  FROM q15
07:29:08  42  /

Table created.

Elapsed: 00:00:00.16
07:29:08 SQL> 
07:29:08 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
07:29:08 SQL> 
07:29:08 SQL> -- rpt
07:29:08 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     20358

Elapsed: 00:00:00.00
07:29:08 SQL> 
07:29:08 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
