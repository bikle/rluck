
SQL*Plus: Release 11.2.0.1.0 Production on Thu Dec 23 21:26:20 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

21:26:20 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
21:26:20 SQL> 21:26:20 SQL> --
21:26:20 SQL> -- eur10.sql
21:26:20 SQL> --
21:26:20 SQL> 
21:26:20 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:26:20 SQL> 
21:26:20 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.01
21:26:20 SQL> 
21:26:20 SQL> -- I created di5min here:
21:26:20 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:26:20 SQL> 
21:26:20 SQL> CREATE OR REPLACE VIEW q11 AS
21:26:20   2  SELECT
21:26:20   3  pair
21:26:20   4  ,ydate
21:26:20   5  ,prdate
21:26:20   6  ,rownum rnum -- acts as t in my time-series
21:26:20   7  ,clse
21:26:20   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
21:26:20   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
21:26:20  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
21:26:20  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
21:26:20  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
21:26:20  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
21:26:20  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
21:26:20  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
21:26:20  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
21:26:20  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
21:26:20  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
21:26:20  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
21:26:20  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
21:26:20  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
21:26:20  22  FROM di5min WHERE pair LIKE'%eur%'
21:26:20  23  ORDER BY ydate
21:26:20  24  /

View created.

Elapsed: 00:00:00.05
21:26:20 SQL> 
21:26:20 SQL> -- rpt
21:26:20 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
eur_usd        20745

Elapsed: 00:00:00.35
21:26:21 SQL> 
21:26:21 SQL> -- Calc deltas and gains
21:26:21 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.11
21:26:21 SQL> 
21:26:21 SQL> CREATE TABLE q13 COMPRESS AS
21:26:21   2  SELECT
21:26:21   3  pair
21:26:21   4  ,ydate
21:26:21   5  ,prdate
21:26:21   6  ,rnum
21:26:21   7  ,ld8
21:26:21   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
21:26:21   9  -- step by 2
21:26:21  10  ,clse-lg6  d06
21:26:21  11  ,lg6 -lg8  d68
21:26:21  12  ,lg8 -lg10 d810
21:26:21  13  ,lg10-lg12 d1012
21:26:21  14  ,lg12-lg14 d1214
21:26:21  15  ,lg14-lg16 d1416
21:26:21  16  ,lg16-lg18 d1618
21:26:21  17  -- step by 4
21:26:21  18  ,lg6 -lg10 d610
21:26:21  19  ,lg8 -lg12 d812
21:26:21  20  ,lg10-lg14 d1014
21:26:21  21  ,lg12-lg16 d1216
21:26:21  22  --
21:26:21  23  ,ABS(clse-lg6 )dc6
21:26:21  24  ,ABS(clse-lg8 )dc8
21:26:21  25  ,ABS(clse-lg10)dc10
21:26:21  26  ,ABS(clse-lg12)dc12
21:26:21  27  ,ABS(clse-lg14)dc14
21:26:21  28  ,ABS(clse-lg16)dc16
21:26:21  29  ,ABS(clse-lg18)dc18
21:26:21  30  ,ABS(clse-lg20)dc20
21:26:21  31  ,ABS(clse-lg22)dc22
21:26:21  32  ,(ld8-clse) ug8
21:26:21  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:26:21  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:26:21  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:26:21  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:26:21  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:26:21  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:26:21  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:26:21  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
21:26:21  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
21:26:21  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
21:26:21  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
21:26:21  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
21:26:21  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
21:26:21  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:26:21  47  ,0+TO_CHAR(ydate,'D')d
21:26:21  48  ,0+TO_CHAR(ydate,'W')w
21:26:21  49  -- mpm stands for minutes-past-midnight:
21:26:21  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:26:21  51  FROM q11
21:26:21  52  -- I dont want any NULL values from the LAG() functions:
21:26:21  53  WHERE lg32 > 0
21:26:21  54  ORDER BY pair,ydate
21:26:21  55  /

Table created.

Elapsed: 00:00:01.96
21:26:23 SQL> 
21:26:23 SQL> -- rpt
21:26:23 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	   10105
	-1	   10256

Elapsed: 00:00:00.03
21:26:23 SQL> 
21:26:23 SQL> -- Calc gains and ntiles
21:26:23 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.10
21:26:23 SQL> CREATE TABLE q15 COMPRESS AS
21:26:23   2  SELECT
21:26:23   3  pair
21:26:23   4  ,ydate
21:26:23   5  ,prdate -- Should be unique
21:26:23   6  ,trend -- +1 or -1
21:26:23   7  -- Use NTILE() to derive some attributes
21:26:23   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
21:26:23   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
21:26:23  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
21:26:23  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
21:26:23  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
21:26:23  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
21:26:23  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
21:26:23  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
21:26:23  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
21:26:23  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
21:26:23  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
21:26:23  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
21:26:23  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
21:26:23  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
21:26:23  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
21:26:23  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
21:26:23  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
21:26:23  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
21:26:23  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
21:26:23  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
21:26:23  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
21:26:23  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
21:26:23  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
21:26:23  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
21:26:23  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
21:26:23  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
21:26:23  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
21:26:23  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
21:26:23  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
21:26:23  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
21:26:23  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
21:26:23  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
21:26:23  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
21:26:23  41  ,hh    att32
21:26:23  42  ,d     att33
21:26:23  43  ,w     att34
21:26:23  44  ,mpm   att35
21:26:23  45  ,trend att36
21:26:23  46  ,ug8 g8
21:26:23  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
21:26:23  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
21:26:23  49  FROM q13
21:26:23  50  ORDER BY pair,ydate
21:26:23  51  /

Table created.

Elapsed: 00:00:05.56
21:26:29 SQL> 
21:26:29 SQL> -- rpt
21:26:29 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
21:26:29   2  GROUP BY pair,trend,gatt,gattn
21:26:29   3  ORDER BY pair,trend,gatt,gattn
21:26:29   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
eur_usd 	-1 nup nup .000024743	    3019
eur_usd 	-1 nup up  -.00602802	    3651
eur_usd 	-1 up  nup .005791635	    3546
eur_usd 	-1			       0
eur_usd 	 1 nup nup -.00009925	    2951
eur_usd 	 1 nup up  -.00625215	    3472
eur_usd 	 1 up  nup .006580195	    3626
eur_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.04
21:26:29 SQL> 
21:26:29 SQL> -- rpt
21:26:29 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
eur_usd 2010-12-23 21:20:00

Elapsed: 00:00:00.02
21:26:29 SQL> 
21:26:29 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.22
21:26:29 SQL> CREATE TABLE modsrc COMPRESS AS
21:26:29   2  SELECT
21:26:29   3  pair
21:26:29   4  ,ydate
21:26:29   5  ,prdate
21:26:29   6  ,trend
21:26:29   7  ,g8
21:26:29   8  ,gatt
21:26:29   9  ,gattn
21:26:29  10  FROM q15
21:26:29  11  /

Table created.

Elapsed: 00:00:00.10
21:26:29 SQL> 
21:26:29 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
21:26:29 SQL> 
21:26:29 SQL> -- rpt
21:26:29 SQL> 
21:26:29 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20745

Elapsed: 00:00:00.36
21:26:30 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20361

Elapsed: 00:00:00.00
21:26:30 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20361

Elapsed: 00:00:00.01
21:26:30 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20361

Elapsed: 00:00:00.00
21:26:30 SQL> 
21:26:30 SQL> DROP   TABLE eur_ms10 ;

Table dropped.

Elapsed: 00:00:00.17
21:26:30 SQL> CREATE TABLE eur_ms10 COMPRESS AS
21:26:30   2  SELECT
21:26:30   3  ydate
21:26:30   4  ,trend eur_trend
21:26:30   5  ,g8    eur_g8
21:26:30   6  ,gatt  eur_gatt
21:26:30   7  ,gattn eur_gattn
21:26:30   8  FROM modsrc
21:26:30   9  /

Table created.

Elapsed: 00:00:00.12
21:26:30 SQL> 
21:26:30 SQL> ANALYZE TABLE eur_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
21:26:30 SQL> 
21:26:30 SQL> -- rpt
21:26:30 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 07:10:01 2010-12-23 21:20:00	10049	  -.0218     .02165
	-1 2010-09-16 05:30:01 2010-12-23 18:05:00	10216	 -.02085      .0196

Elapsed: 00:00:00.02
21:26:30 SQL> SELECT eur_trend,MIN(ydate),MAX(ydate),COUNT(eur_trend),MIN(eur_g8),MAX(eur_g8)FROM eur_ms10 GROUP BY eur_trend;

 EUR_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(EUR_TREND) MIN(EUR_G8) MAX(EUR_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 07:10:01 2010-12-23 21:20:00	      10105	 -.0218      .02165
	-1 2010-09-16 05:30:01 2010-12-23 18:05:00	      10256	-.02085       .0196

Elapsed: 00:00:00.01
21:26:30 SQL> 
21:26:30 SQL> -- I need a copy of q15 attributes
21:26:30 SQL> 
21:26:30 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.03
21:26:30 SQL> CREATE TABLE eur_att COMPRESS AS
21:26:30   2  SELECT
21:26:30   3  ydate
21:26:30   4  ,att00 eur_att00
21:26:30   5  ,att01 eur_att01
21:26:30   6  ,att02 eur_att02
21:26:30   7  ,att03 eur_att03
21:26:30   8  ,att04 eur_att04
21:26:30   9  ,att05 eur_att05
21:26:30  10  ,att06 eur_att06
21:26:30  11  ,att07 eur_att07
21:26:30  12  ,att08 eur_att08
21:26:30  13  ,att09 eur_att09
21:26:30  14  ,att10 eur_att10
21:26:30  15  ,att11 eur_att11
21:26:30  16  ,att12 eur_att12
21:26:30  17  ,att13 eur_att13
21:26:30  18  ,att14 eur_att14
21:26:30  19  ,att15 eur_att15
21:26:30  20  ,att16 eur_att16
21:26:30  21  ,att17 eur_att17
21:26:30  22  ,att18 eur_att18
21:26:30  23  ,att19 eur_att19
21:26:30  24  ,att20 eur_att20
21:26:30  25  ,att21 eur_att21
21:26:30  26  ,att22 eur_att22
21:26:30  27  ,att23 eur_att23
21:26:30  28  ,att24 eur_att24
21:26:30  29  ,att25 eur_att25
21:26:30  30  ,att26 eur_att26
21:26:30  31  ,att27 eur_att27
21:26:30  32  ,att28 eur_att28
21:26:30  33  ,att29 eur_att29
21:26:30  34  ,att30 eur_att30
21:26:30  35  ,att31 eur_att31
21:26:30  36  ,att32 eur_att32
21:26:30  37  ,att33 eur_att33
21:26:30  38  ,att34 eur_att34
21:26:30  39  ,att35 eur_att35
21:26:30  40  ,att36 eur_att36
21:26:30  41  FROM q15
21:26:30  42  /

Table created.

Elapsed: 00:00:00.18
21:26:30 SQL> 
21:26:30 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
21:26:31 SQL> 
21:26:31 SQL> -- rpt
21:26:31 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     20361

Elapsed: 00:00:00.00
21:26:31 SQL> 
21:26:31 SQL> --
21:26:31 SQL> -- aud10.sql
21:26:31 SQL> --
21:26:31 SQL> 
21:26:31 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:26:31 SQL> 
21:26:31 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.64
21:26:31 SQL> 
21:26:31 SQL> -- I created di5min here:
21:26:31 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:26:31 SQL> 
21:26:31 SQL> CREATE OR REPLACE VIEW q11 AS
21:26:31   2  SELECT
21:26:31   3  pair
21:26:31   4  ,ydate
21:26:31   5  ,prdate
21:26:31   6  ,rownum rnum -- acts as t in my time-series
21:26:31   7  ,clse
21:26:31   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
21:26:31   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
21:26:31  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
21:26:31  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
21:26:31  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
21:26:31  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
21:26:31  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
21:26:31  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
21:26:31  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
21:26:31  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
21:26:31  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
21:26:31  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
21:26:31  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
21:26:31  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
21:26:31  22  FROM di5min WHERE pair LIKE'%aud%'
21:26:31  23  ORDER BY ydate
21:26:31  24  /

View created.

Elapsed: 00:00:00.09
21:26:31 SQL> 
21:26:31 SQL> -- rpt
21:26:31 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
aud_usd        20742

Elapsed: 00:00:00.35
21:26:32 SQL> 
21:26:32 SQL> -- Calc deltas and gains
21:26:32 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.17
21:26:32 SQL> 
21:26:32 SQL> CREATE TABLE q13 COMPRESS AS
21:26:32   2  SELECT
21:26:32   3  pair
21:26:32   4  ,ydate
21:26:32   5  ,prdate
21:26:32   6  ,rnum
21:26:32   7  ,ld8
21:26:32   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
21:26:32   9  -- step by 2
21:26:32  10  ,clse-lg6  d06
21:26:32  11  ,lg6 -lg8  d68
21:26:32  12  ,lg8 -lg10 d810
21:26:32  13  ,lg10-lg12 d1012
21:26:32  14  ,lg12-lg14 d1214
21:26:32  15  ,lg14-lg16 d1416
21:26:32  16  ,lg16-lg18 d1618
21:26:32  17  -- step by 4
21:26:32  18  ,lg6 -lg10 d610
21:26:32  19  ,lg8 -lg12 d812
21:26:32  20  ,lg10-lg14 d1014
21:26:32  21  ,lg12-lg16 d1216
21:26:32  22  --
21:26:32  23  ,ABS(clse-lg6 )dc6
21:26:32  24  ,ABS(clse-lg8 )dc8
21:26:32  25  ,ABS(clse-lg10)dc10
21:26:32  26  ,ABS(clse-lg12)dc12
21:26:32  27  ,ABS(clse-lg14)dc14
21:26:32  28  ,ABS(clse-lg16)dc16
21:26:32  29  ,ABS(clse-lg18)dc18
21:26:32  30  ,ABS(clse-lg20)dc20
21:26:32  31  ,ABS(clse-lg22)dc22
21:26:32  32  ,(ld8-clse) ug8
21:26:32  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:26:32  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:26:32  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:26:32  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:26:32  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:26:32  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:26:32  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:26:32  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
21:26:32  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
21:26:32  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
21:26:32  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
21:26:32  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
21:26:32  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
21:26:32  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:26:32  47  ,0+TO_CHAR(ydate,'D')d
21:26:32  48  ,0+TO_CHAR(ydate,'W')w
21:26:32  49  -- mpm stands for minutes-past-midnight:
21:26:32  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:26:32  51  FROM q11
21:26:32  52  -- I dont want any NULL values from the LAG() functions:
21:26:32  53  WHERE lg32 > 0
21:26:32  54  ORDER BY pair,ydate
21:26:32  55  /

Table created.

Elapsed: 00:00:01.73
21:26:34 SQL> 
21:26:34 SQL> -- rpt
21:26:34 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	   10827
	-1	    9531

Elapsed: 00:00:00.03
21:26:34 SQL> 
21:26:34 SQL> -- Calc gains and ntiles
21:26:34 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.16
21:26:34 SQL> CREATE TABLE q15 COMPRESS AS
21:26:34   2  SELECT
21:26:34   3  pair
21:26:34   4  ,ydate
21:26:34   5  ,prdate -- Should be unique
21:26:34   6  ,trend -- +1 or -1
21:26:34   7  -- Use NTILE() to derive some attributes
21:26:34   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
21:26:34   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
21:26:34  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
21:26:34  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
21:26:34  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
21:26:34  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
21:26:34  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
21:26:34  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
21:26:34  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
21:26:34  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
21:26:34  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
21:26:34  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
21:26:34  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
21:26:34  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
21:26:34  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
21:26:34  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
21:26:34  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
21:26:34  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
21:26:34  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
21:26:34  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
21:26:34  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
21:26:34  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
21:26:34  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
21:26:34  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
21:26:34  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
21:26:34  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
21:26:34  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
21:26:34  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
21:26:34  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
21:26:34  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
21:26:34  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
21:26:34  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
21:26:34  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
21:26:34  41  ,hh    att32
21:26:34  42  ,d     att33
21:26:34  43  ,w     att34
21:26:34  44  ,mpm   att35
21:26:34  45  ,trend att36
21:26:34  46  ,ug8 g8
21:26:34  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
21:26:34  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
21:26:34  49  FROM q13
21:26:34  50  ORDER BY pair,ydate
21:26:34  51  /

Table created.

Elapsed: 00:00:05.38
21:26:39 SQL> 
21:26:39 SQL> -- rpt
21:26:39 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
21:26:39   2  GROUP BY pair,trend,gatt,gattn
21:26:39   3  ORDER BY pair,trend,gatt,gattn
21:26:39   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
aud_usd 	-1 nup nup .000031935	    3528
aud_usd 	-1 nup up  -.00523332	    2544
aud_usd 	-1 up  nup .005167556	    3415
aud_usd 	-1			       0
aud_usd 	 1 nup nup .000032703	    4335
aud_usd 	 1 nup up  -.00500133	    3061
aud_usd 	 1 up  nup .005093797	    3379
aud_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
21:26:39 SQL> 
21:26:39 SQL> -- rpt
21:26:39 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
aud_usd 2010-12-23 21:20:00

Elapsed: 00:00:00.02
21:26:39 SQL> 
21:26:39 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
21:26:39 SQL> CREATE TABLE modsrc COMPRESS AS
21:26:39   2  SELECT
21:26:39   3  pair
21:26:39   4  ,ydate
21:26:39   5  ,prdate
21:26:39   6  ,trend
21:26:39   7  ,g8
21:26:39   8  ,gatt
21:26:39   9  ,gattn
21:26:39  10  FROM q15
21:26:39  11  /

Table created.

Elapsed: 00:00:00.10
21:26:40 SQL> 
21:26:40 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
21:26:40 SQL> 
21:26:40 SQL> -- rpt
21:26:40 SQL> 
21:26:40 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20742

Elapsed: 00:00:00.34
21:26:40 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.00
21:26:40 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.01
21:26:40 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.00
21:26:40 SQL> 
21:26:40 SQL> DROP   TABLE aud_ms10 ;

Table dropped.

Elapsed: 00:00:00.04
21:26:40 SQL> CREATE TABLE aud_ms10 COMPRESS AS
21:26:40   2  SELECT
21:26:40   3  ydate
21:26:40   4  ,trend aud_trend
21:26:40   5  ,g8    aud_g8
21:26:40   6  ,gatt  aud_gatt
21:26:40   7  ,gattn aud_gattn
21:26:40   8  FROM modsrc
21:26:40   9  /

Table created.

Elapsed: 00:00:00.06
21:26:40 SQL> 
21:26:40 SQL> ANALYZE TABLE aud_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
21:26:40 SQL> 
21:26:40 SQL> -- rpt
21:26:40 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 09:00:01 2010-12-23 21:20:00	10775	  -.0203      .0136
	-1 2010-09-16 05:30:01 2010-12-23 20:15:00	 9487	  -.0196      .0148

Elapsed: 00:00:00.03
21:26:40 SQL> SELECT aud_trend,MIN(ydate),MAX(ydate),COUNT(aud_trend),MIN(aud_g8),MAX(aud_g8)FROM aud_ms10 GROUP BY aud_trend;

 AUD_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(AUD_TREND) MIN(AUD_G8) MAX(AUD_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 09:00:01 2010-12-23 21:20:00	      10827	 -.0203       .0136
	-1 2010-09-16 05:30:01 2010-12-23 20:15:00	       9531	 -.0196       .0148

Elapsed: 00:00:00.01
21:26:40 SQL> 
21:26:40 SQL> -- I need a copy of q15 attributes
21:26:40 SQL> 
21:26:40 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.04
21:26:40 SQL> CREATE TABLE aud_att COMPRESS AS
21:26:40   2  SELECT
21:26:40   3  ydate
21:26:40   4  ,att00 aud_att00
21:26:40   5  ,att01 aud_att01
21:26:40   6  ,att02 aud_att02
21:26:40   7  ,att03 aud_att03
21:26:40   8  ,att04 aud_att04
21:26:40   9  ,att05 aud_att05
21:26:40  10  ,att06 aud_att06
21:26:40  11  ,att07 aud_att07
21:26:40  12  ,att08 aud_att08
21:26:40  13  ,att09 aud_att09
21:26:40  14  ,att10 aud_att10
21:26:40  15  ,att11 aud_att11
21:26:40  16  ,att12 aud_att12
21:26:40  17  ,att13 aud_att13
21:26:40  18  ,att14 aud_att14
21:26:40  19  ,att15 aud_att15
21:26:40  20  ,att16 aud_att16
21:26:40  21  ,att17 aud_att17
21:26:40  22  ,att18 aud_att18
21:26:40  23  ,att19 aud_att19
21:26:40  24  ,att20 aud_att20
21:26:40  25  ,att21 aud_att21
21:26:40  26  ,att22 aud_att22
21:26:40  27  ,att23 aud_att23
21:26:40  28  ,att24 aud_att24
21:26:40  29  ,att25 aud_att25
21:26:40  30  ,att26 aud_att26
21:26:40  31  ,att27 aud_att27
21:26:40  32  ,att28 aud_att28
21:26:40  33  ,att29 aud_att29
21:26:40  34  ,att30 aud_att30
21:26:40  35  ,att31 aud_att31
21:26:40  36  ,att32 aud_att32
21:26:40  37  ,att33 aud_att33
21:26:40  38  ,att34 aud_att34
21:26:40  39  ,att35 aud_att35
21:26:40  40  ,att36 aud_att36
21:26:40  41  FROM q15
21:26:40  42  /

Table created.

Elapsed: 00:00:00.17
21:26:41 SQL> 
21:26:41 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
21:26:41 SQL> 
21:26:41 SQL> -- rpt
21:26:41 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     20358

Elapsed: 00:00:00.00
21:26:41 SQL> 
21:26:41 SQL> --
21:26:41 SQL> -- gbp10.sql
21:26:41 SQL> --
21:26:41 SQL> 
21:26:41 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:26:41 SQL> 
21:26:41 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.37
21:26:41 SQL> 
21:26:41 SQL> -- I created di5min here:
21:26:41 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:26:41 SQL> 
21:26:41 SQL> CREATE OR REPLACE VIEW q11 AS
21:26:41   2  SELECT
21:26:41   3  pair
21:26:41   4  ,ydate
21:26:41   5  ,prdate
21:26:41   6  ,rownum rnum -- acts as t in my time-series
21:26:41   7  ,clse
21:26:41   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
21:26:41   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
21:26:41  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
21:26:41  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
21:26:41  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
21:26:41  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
21:26:41  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
21:26:41  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
21:26:41  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
21:26:41  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
21:26:41  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
21:26:41  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
21:26:41  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
21:26:41  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
21:26:41  22  FROM di5min WHERE pair LIKE'%gbp%'
21:26:41  23  ORDER BY ydate
21:26:41  24  /

View created.

Elapsed: 00:00:00.04
21:26:42 SQL> 
21:26:42 SQL> -- rpt
21:26:42 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
gbp_usd        20744

Elapsed: 00:00:00.36
21:26:42 SQL> 
21:26:42 SQL> -- Calc deltas and gains
21:26:42 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.24
21:26:42 SQL> 
21:26:42 SQL> CREATE TABLE q13 COMPRESS AS
21:26:42   2  SELECT
21:26:42   3  pair
21:26:42   4  ,ydate
21:26:42   5  ,prdate
21:26:42   6  ,rnum
21:26:42   7  ,ld8
21:26:42   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
21:26:42   9  -- step by 2
21:26:42  10  ,clse-lg6  d06
21:26:42  11  ,lg6 -lg8  d68
21:26:42  12  ,lg8 -lg10 d810
21:26:42  13  ,lg10-lg12 d1012
21:26:42  14  ,lg12-lg14 d1214
21:26:42  15  ,lg14-lg16 d1416
21:26:42  16  ,lg16-lg18 d1618
21:26:42  17  -- step by 4
21:26:42  18  ,lg6 -lg10 d610
21:26:42  19  ,lg8 -lg12 d812
21:26:42  20  ,lg10-lg14 d1014
21:26:42  21  ,lg12-lg16 d1216
21:26:42  22  --
21:26:42  23  ,ABS(clse-lg6 )dc6
21:26:42  24  ,ABS(clse-lg8 )dc8
21:26:42  25  ,ABS(clse-lg10)dc10
21:26:42  26  ,ABS(clse-lg12)dc12
21:26:42  27  ,ABS(clse-lg14)dc14
21:26:42  28  ,ABS(clse-lg16)dc16
21:26:42  29  ,ABS(clse-lg18)dc18
21:26:42  30  ,ABS(clse-lg20)dc20
21:26:42  31  ,ABS(clse-lg22)dc22
21:26:42  32  ,(ld8-clse) ug8
21:26:42  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:26:42  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:26:42  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:26:42  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:26:42  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:26:42  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:26:42  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:26:42  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
21:26:42  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
21:26:42  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
21:26:42  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
21:26:42  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
21:26:42  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
21:26:42  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:26:42  47  ,0+TO_CHAR(ydate,'D')d
21:26:42  48  ,0+TO_CHAR(ydate,'W')w
21:26:42  49  -- mpm stands for minutes-past-midnight:
21:26:42  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:26:42  51  FROM q11
21:26:42  52  -- I dont want any NULL values from the LAG() functions:
21:26:42  53  WHERE lg32 > 0
21:26:42  54  ORDER BY pair,ydate
21:26:42  55  /

Table created.

Elapsed: 00:00:01.72
21:26:44 SQL> 
21:26:44 SQL> -- rpt
21:26:44 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9910
	-1	   10450

Elapsed: 00:00:00.04
21:26:44 SQL> 
21:26:44 SQL> -- Calc gains and ntiles
21:26:44 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.20
21:26:44 SQL> CREATE TABLE q15 COMPRESS AS
21:26:44   2  SELECT
21:26:44   3  pair
21:26:44   4  ,ydate
21:26:44   5  ,prdate -- Should be unique
21:26:44   6  ,trend -- +1 or -1
21:26:44   7  -- Use NTILE() to derive some attributes
21:26:44   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
21:26:44   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
21:26:44  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
21:26:44  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
21:26:44  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
21:26:44  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
21:26:44  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
21:26:44  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
21:26:44  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
21:26:44  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
21:26:44  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
21:26:44  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
21:26:44  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
21:26:44  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
21:26:44  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
21:26:44  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
21:26:44  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
21:26:44  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
21:26:44  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
21:26:44  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
21:26:44  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
21:26:44  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
21:26:44  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
21:26:44  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
21:26:44  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
21:26:44  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
21:26:44  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
21:26:44  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
21:26:44  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
21:26:44  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
21:26:44  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
21:26:44  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
21:26:44  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
21:26:44  41  ,hh    att32
21:26:44  42  ,d     att33
21:26:44  43  ,w     att34
21:26:44  44  ,mpm   att35
21:26:44  45  ,trend att36
21:26:44  46  ,ug8 g8
21:26:44  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
21:26:44  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
21:26:44  49  FROM q13
21:26:44  50  ORDER BY pair,ydate
21:26:44  51  /

Table created.

Elapsed: 00:00:05.41
21:26:50 SQL> 
21:26:50 SQL> -- rpt
21:26:50 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
21:26:50   2  GROUP BY pair,trend,gatt,gattn
21:26:50   3  ORDER BY pair,trend,gatt,gattn
21:26:50   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
gbp_usd 	-1 nup nup .000093476	    3853
gbp_usd 	-1 nup up   -.0059004	    3270
gbp_usd 	-1 up  nup .005444008	    3300
gbp_usd 	-1			       0
gbp_usd 	 1 nup nup -.00008334	    3631
gbp_usd 	 1 nup up  -.00554744	    3271
gbp_usd 	 1 up  nup .006010675	    2939
gbp_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.02
21:26:50 SQL> 
21:26:50 SQL> -- rpt
21:26:50 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
gbp_usd 2010-12-23 21:20:00

Elapsed: 00:00:00.02
21:26:50 SQL> 
21:26:50 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
21:26:50 SQL> CREATE TABLE modsrc COMPRESS AS
21:26:50   2  SELECT
21:26:50   3  pair
21:26:50   4  ,ydate
21:26:50   5  ,prdate
21:26:50   6  ,trend
21:26:50   7  ,g8
21:26:50   8  ,gatt
21:26:50   9  ,gattn
21:26:50  10  FROM q15
21:26:50  11  /

Table created.

Elapsed: 00:00:00.09
21:26:50 SQL> 
21:26:50 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.26
21:26:50 SQL> 
21:26:50 SQL> -- rpt
21:26:50 SQL> 
21:26:50 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20744

Elapsed: 00:00:00.35
21:26:50 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20360

Elapsed: 00:00:00.00
21:26:50 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20360

Elapsed: 00:00:00.01
21:26:50 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20360

Elapsed: 00:00:00.00
21:26:50 SQL> 
21:26:50 SQL> DROP   TABLE gbp_ms10 ;

Table dropped.

Elapsed: 00:00:00.04
21:26:50 SQL> CREATE TABLE gbp_ms10 COMPRESS AS
21:26:50   2  SELECT
21:26:50   3  ydate
21:26:50   4  ,trend gbp_trend
21:26:50   5  ,g8    gbp_g8
21:26:50   6  ,gatt  gbp_gatt
21:26:50   7  ,gattn gbp_gattn
21:26:50   8  FROM modsrc
21:26:50   9  /

Table created.

Elapsed: 00:00:00.06
21:26:51 SQL> 
21:26:51 SQL> ANALYZE TABLE gbp_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.14
21:26:51 SQL> 
21:26:51 SQL> -- rpt
21:26:51 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 10:50:01 2010-12-23 21:20:00	 9841	  -.0231       .019
	-1 2010-09-16 05:30:01 2010-12-23 16:00:00	10423	    -.02      .0204

Elapsed: 00:00:00.02
21:26:51 SQL> SELECT gbp_trend,MIN(ydate),MAX(ydate),COUNT(gbp_trend),MIN(gbp_g8),MAX(gbp_g8)FROM gbp_ms10 GROUP BY gbp_trend;

 GBP_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(GBP_TREND) MIN(GBP_G8) MAX(GBP_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 10:50:01 2010-12-23 21:20:00	       9910	 -.0231        .019
	-1 2010-09-16 05:30:01 2010-12-23 16:00:00	      10450	   -.02       .0204

Elapsed: 00:00:00.01
21:26:51 SQL> 
21:26:51 SQL> -- I need a copy of q15 attributes
21:26:51 SQL> 
21:26:51 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.04
21:26:51 SQL> CREATE TABLE gbp_att COMPRESS AS
21:26:51   2  SELECT
21:26:51   3  ydate
21:26:51   4  ,att00 gbp_att00
21:26:51   5  ,att01 gbp_att01
21:26:51   6  ,att02 gbp_att02
21:26:51   7  ,att03 gbp_att03
21:26:51   8  ,att04 gbp_att04
21:26:51   9  ,att05 gbp_att05
21:26:51  10  ,att06 gbp_att06
21:26:51  11  ,att07 gbp_att07
21:26:51  12  ,att08 gbp_att08
21:26:51  13  ,att09 gbp_att09
21:26:51  14  ,att10 gbp_att10
21:26:51  15  ,att11 gbp_att11
21:26:51  16  ,att12 gbp_att12
21:26:51  17  ,att13 gbp_att13
21:26:51  18  ,att14 gbp_att14
21:26:51  19  ,att15 gbp_att15
21:26:51  20  ,att16 gbp_att16
21:26:51  21  ,att17 gbp_att17
21:26:51  22  ,att18 gbp_att18
21:26:51  23  ,att19 gbp_att19
21:26:51  24  ,att20 gbp_att20
21:26:51  25  ,att21 gbp_att21
21:26:51  26  ,att22 gbp_att22
21:26:51  27  ,att23 gbp_att23
21:26:51  28  ,att24 gbp_att24
21:26:51  29  ,att25 gbp_att25
21:26:51  30  ,att26 gbp_att26
21:26:51  31  ,att27 gbp_att27
21:26:51  32  ,att28 gbp_att28
21:26:51  33  ,att29 gbp_att29
21:26:51  34  ,att30 gbp_att30
21:26:51  35  ,att31 gbp_att31
21:26:51  36  ,att32 gbp_att32
21:26:51  37  ,att33 gbp_att33
21:26:51  38  ,att34 gbp_att34
21:26:51  39  ,att35 gbp_att35
21:26:51  40  ,att36 gbp_att36
21:26:51  41  FROM q15
21:26:51  42  /

Table created.

Elapsed: 00:00:00.18
21:26:51 SQL> 
21:26:51 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
21:26:51 SQL> 
21:26:51 SQL> -- rpt
21:26:51 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     20360

Elapsed: 00:00:00.00
21:26:51 SQL> 
21:26:51 SQL> --
21:26:51 SQL> -- jpy10.sql
21:26:51 SQL> --
21:26:51 SQL> 
21:26:51 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:26:51 SQL> 
21:26:51 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.35
21:26:52 SQL> 
21:26:52 SQL> -- I created di5min here:
21:26:52 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:26:52 SQL> 
21:26:52 SQL> CREATE OR REPLACE VIEW q11 AS
21:26:52   2  SELECT
21:26:52   3  pair
21:26:52   4  ,ydate
21:26:52   5  ,prdate
21:26:52   6  ,rownum rnum -- acts as t in my time-series
21:26:52   7  ,clse
21:26:52   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
21:26:52   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
21:26:52  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
21:26:52  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
21:26:52  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
21:26:52  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
21:26:52  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
21:26:52  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
21:26:52  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
21:26:52  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
21:26:52  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
21:26:52  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
21:26:52  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
21:26:52  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
21:26:52  22  FROM di5min WHERE pair LIKE'%jpy%'
21:26:52  23  ORDER BY ydate
21:26:52  24  /

View created.

Elapsed: 00:00:00.04
21:26:52 SQL> 
21:26:52 SQL> -- rpt
21:26:52 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_jpy        20744

Elapsed: 00:00:00.35
21:26:52 SQL> 
21:26:52 SQL> -- Calc deltas and gains
21:26:52 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.30
21:26:52 SQL> 
21:26:52 SQL> CREATE TABLE q13 COMPRESS AS
21:26:52   2  SELECT
21:26:52   3  pair
21:26:52   4  ,ydate
21:26:52   5  ,prdate
21:26:52   6  ,rnum
21:26:52   7  ,ld8
21:26:52   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
21:26:52   9  -- step by 2
21:26:52  10  ,clse-lg6  d06
21:26:52  11  ,lg6 -lg8  d68
21:26:52  12  ,lg8 -lg10 d810
21:26:52  13  ,lg10-lg12 d1012
21:26:52  14  ,lg12-lg14 d1214
21:26:52  15  ,lg14-lg16 d1416
21:26:52  16  ,lg16-lg18 d1618
21:26:52  17  -- step by 4
21:26:52  18  ,lg6 -lg10 d610
21:26:52  19  ,lg8 -lg12 d812
21:26:52  20  ,lg10-lg14 d1014
21:26:52  21  ,lg12-lg16 d1216
21:26:52  22  --
21:26:52  23  ,ABS(clse-lg6 )dc6
21:26:52  24  ,ABS(clse-lg8 )dc8
21:26:52  25  ,ABS(clse-lg10)dc10
21:26:52  26  ,ABS(clse-lg12)dc12
21:26:52  27  ,ABS(clse-lg14)dc14
21:26:52  28  ,ABS(clse-lg16)dc16
21:26:52  29  ,ABS(clse-lg18)dc18
21:26:52  30  ,ABS(clse-lg20)dc20
21:26:52  31  ,ABS(clse-lg22)dc22
21:26:52  32  ,(ld8-clse) ug8
21:26:52  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:26:52  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:26:52  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:26:52  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:26:52  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:26:52  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:26:52  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:26:52  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
21:26:52  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
21:26:52  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
21:26:52  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
21:26:52  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
21:26:52  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
21:26:52  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:26:52  47  ,0+TO_CHAR(ydate,'D')d
21:26:52  48  ,0+TO_CHAR(ydate,'W')w
21:26:52  49  -- mpm stands for minutes-past-midnight:
21:26:52  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:26:52  51  FROM q11
21:26:52  52  -- I dont want any NULL values from the LAG() functions:
21:26:52  53  WHERE lg32 > 0
21:26:52  54  ORDER BY pair,ydate
21:26:52  55  /

Table created.

Elapsed: 00:00:01.73
21:26:54 SQL> 
21:26:54 SQL> -- rpt
21:26:54 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9416
	-1	   10944

Elapsed: 00:00:00.03
21:26:54 SQL> 
21:26:54 SQL> -- Calc gains and ntiles
21:26:54 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.14
21:26:54 SQL> CREATE TABLE q15 COMPRESS AS
21:26:54   2  SELECT
21:26:54   3  pair
21:26:54   4  ,ydate
21:26:54   5  ,prdate -- Should be unique
21:26:54   6  ,trend -- +1 or -1
21:26:54   7  -- Use NTILE() to derive some attributes
21:26:54   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
21:26:54   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
21:26:54  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
21:26:54  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
21:26:54  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
21:26:54  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
21:26:54  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
21:26:54  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
21:26:54  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
21:26:54  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
21:26:54  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
21:26:54  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
21:26:54  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
21:26:54  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
21:26:54  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
21:26:54  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
21:26:54  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
21:26:54  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
21:26:54  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
21:26:54  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
21:26:54  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
21:26:54  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
21:26:54  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
21:26:54  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
21:26:54  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
21:26:54  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
21:26:54  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
21:26:54  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
21:26:54  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
21:26:54  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
21:26:54  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
21:26:54  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
21:26:54  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
21:26:54  41  ,hh    att32
21:26:54  42  ,d     att33
21:26:54  43  ,w     att34
21:26:54  44  ,mpm   att35
21:26:54  45  ,trend att36
21:26:54  46  ,ug8 g8
21:26:54  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
21:26:54  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
21:26:54  49  FROM q13
21:26:54  50  ORDER BY pair,ydate
21:26:54  51  /

Table created.

Elapsed: 00:00:05.59
21:27:00 SQL> 
21:27:00 SQL> -- rpt
21:27:00 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
21:27:00   2  GROUP BY pair,trend,gatt,gattn
21:27:00   3  ORDER BY pair,trend,gatt,gattn
21:27:00   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_jpy 	-1 nup nup -7.353E-06	     170
usd_jpy 	-1 nup up  -.18487688	    5500
usd_jpy 	-1 up  nup .181534069	    5210
usd_jpy 	-1			       0
usd_jpy 	 1 nup nup -5.252E-06	     119
usd_jpy 	 1 nup up  -.18888556	    5120
usd_jpy 	 1 up  nup .191536188	    4145
usd_jpy 	 1			       0

8 rows selected.

Elapsed: 00:00:00.06
21:27:00 SQL> 
21:27:00 SQL> -- rpt
21:27:00 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_jpy 2010-12-23 21:25:00

Elapsed: 00:00:00.01
21:27:00 SQL> 
21:27:00 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.25
21:27:00 SQL> CREATE TABLE modsrc COMPRESS AS
21:27:00   2  SELECT
21:27:00   3  pair
21:27:00   4  ,ydate
21:27:00   5  ,prdate
21:27:00   6  ,trend
21:27:00   7  ,g8
21:27:00   8  ,gatt
21:27:00   9  ,gattn
21:27:00  10  FROM q15
21:27:00  11  /

Table created.

Elapsed: 00:00:00.08
21:27:00 SQL> 
21:27:00 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
21:27:00 SQL> 
21:27:00 SQL> -- rpt
21:27:00 SQL> 
21:27:00 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20744

Elapsed: 00:00:00.35
21:27:01 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20360

Elapsed: 00:00:00.01
21:27:01 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20360

Elapsed: 00:00:00.00
21:27:01 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20360

Elapsed: 00:00:00.01
21:27:01 SQL> 
21:27:01 SQL> DROP   TABLE jpy_ms10 ;

Table dropped.

Elapsed: 00:00:00.03
21:27:01 SQL> CREATE TABLE jpy_ms10 COMPRESS AS
21:27:01   2  SELECT
21:27:01   3  ydate
21:27:01   4  ,trend jpy_trend
21:27:01   5  ,g8    jpy_g8
21:27:01   6  ,gatt  jpy_gatt
21:27:01   7  ,gattn jpy_gattn
21:27:01   8  FROM modsrc
21:27:01   9  /

Table created.

Elapsed: 00:00:00.08
21:27:01 SQL> 
21:27:01 SQL> ANALYZE TABLE jpy_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
21:27:01 SQL> 
21:27:01 SQL> -- rpt
21:27:01 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 08:15:01 2010-12-23 19:45:00	 9384	  -1.185	  1
	-1 2010-09-16 05:30:01 2010-12-23 21:25:00	10880	 -1.0575       1.32

Elapsed: 00:00:00.02
21:27:01 SQL> SELECT jpy_trend,MIN(ydate),MAX(ydate),COUNT(jpy_trend),MIN(jpy_g8),MAX(jpy_g8)FROM jpy_ms10 GROUP BY jpy_trend;

 JPY_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(JPY_TREND) MIN(JPY_G8) MAX(JPY_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 08:15:01 2010-12-23 19:45:00	       9416	 -1.185 	  1
	-1 2010-09-16 05:30:01 2010-12-23 21:25:00	      10944	-1.0575        1.32

Elapsed: 00:00:00.01
21:27:01 SQL> 
21:27:01 SQL> -- I need a copy of q15 attributes
21:27:01 SQL> 
21:27:01 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.04
21:27:01 SQL> CREATE TABLE jpy_att COMPRESS AS
21:27:01   2  SELECT
21:27:01   3  ydate
21:27:01   4  ,att00 jpy_att00
21:27:01   5  ,att01 jpy_att01
21:27:01   6  ,att02 jpy_att02
21:27:01   7  ,att03 jpy_att03
21:27:01   8  ,att04 jpy_att04
21:27:01   9  ,att05 jpy_att05
21:27:01  10  ,att06 jpy_att06
21:27:01  11  ,att07 jpy_att07
21:27:01  12  ,att08 jpy_att08
21:27:01  13  ,att09 jpy_att09
21:27:01  14  ,att10 jpy_att10
21:27:01  15  ,att11 jpy_att11
21:27:01  16  ,att12 jpy_att12
21:27:01  17  ,att13 jpy_att13
21:27:01  18  ,att14 jpy_att14
21:27:01  19  ,att15 jpy_att15
21:27:01  20  ,att16 jpy_att16
21:27:01  21  ,att17 jpy_att17
21:27:01  22  ,att18 jpy_att18
21:27:01  23  ,att19 jpy_att19
21:27:01  24  ,att20 jpy_att20
21:27:01  25  ,att21 jpy_att21
21:27:01  26  ,att22 jpy_att22
21:27:01  27  ,att23 jpy_att23
21:27:01  28  ,att24 jpy_att24
21:27:01  29  ,att25 jpy_att25
21:27:01  30  ,att26 jpy_att26
21:27:01  31  ,att27 jpy_att27
21:27:01  32  ,att28 jpy_att28
21:27:01  33  ,att29 jpy_att29
21:27:01  34  ,att30 jpy_att30
21:27:01  35  ,att31 jpy_att31
21:27:01  36  ,att32 jpy_att32
21:27:01  37  ,att33 jpy_att33
21:27:01  38  ,att34 jpy_att34
21:27:01  39  ,att35 jpy_att35
21:27:01  40  ,att36 jpy_att36
21:27:01  41  FROM q15
21:27:01  42  /

Table created.

Elapsed: 00:00:00.17
21:27:01 SQL> 
21:27:01 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
21:27:02 SQL> 
21:27:02 SQL> -- rpt
21:27:02 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     20360

Elapsed: 00:00:00.00
21:27:02 SQL> 
21:27:02 SQL> --
21:27:02 SQL> -- cad10.sql
21:27:02 SQL> --
21:27:02 SQL> 
21:27:02 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:27:02 SQL> 
21:27:02 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.42
21:27:02 SQL> 
21:27:02 SQL> -- I created di5min here:
21:27:02 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:27:02 SQL> 
21:27:02 SQL> CREATE OR REPLACE VIEW q11 AS
21:27:02   2  SELECT
21:27:02   3  pair
21:27:02   4  ,ydate
21:27:02   5  ,prdate
21:27:02   6  ,rownum rnum -- acts as t in my time-series
21:27:02   7  ,clse
21:27:02   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
21:27:02   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
21:27:02  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
21:27:02  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
21:27:02  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
21:27:02  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
21:27:02  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
21:27:02  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
21:27:02  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
21:27:02  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
21:27:02  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
21:27:02  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
21:27:02  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
21:27:02  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
21:27:02  22  FROM di5min WHERE pair LIKE'%cad%'
21:27:02  23  ORDER BY ydate
21:27:02  24  /

View created.

Elapsed: 00:00:00.03
21:27:02 SQL> 
21:27:02 SQL> -- rpt
21:27:02 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_cad        20742

Elapsed: 00:00:00.35
21:27:03 SQL> 
21:27:03 SQL> -- Calc deltas and gains
21:27:03 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.24
21:27:03 SQL> 
21:27:03 SQL> CREATE TABLE q13 COMPRESS AS
21:27:03   2  SELECT
21:27:03   3  pair
21:27:03   4  ,ydate
21:27:03   5  ,prdate
21:27:03   6  ,rnum
21:27:03   7  ,ld8
21:27:03   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
21:27:03   9  -- step by 2
21:27:03  10  ,clse-lg6  d06
21:27:03  11  ,lg6 -lg8  d68
21:27:03  12  ,lg8 -lg10 d810
21:27:03  13  ,lg10-lg12 d1012
21:27:03  14  ,lg12-lg14 d1214
21:27:03  15  ,lg14-lg16 d1416
21:27:03  16  ,lg16-lg18 d1618
21:27:03  17  -- step by 4
21:27:03  18  ,lg6 -lg10 d610
21:27:03  19  ,lg8 -lg12 d812
21:27:03  20  ,lg10-lg14 d1014
21:27:03  21  ,lg12-lg16 d1216
21:27:03  22  --
21:27:03  23  ,ABS(clse-lg6 )dc6
21:27:03  24  ,ABS(clse-lg8 )dc8
21:27:03  25  ,ABS(clse-lg10)dc10
21:27:03  26  ,ABS(clse-lg12)dc12
21:27:03  27  ,ABS(clse-lg14)dc14
21:27:03  28  ,ABS(clse-lg16)dc16
21:27:03  29  ,ABS(clse-lg18)dc18
21:27:03  30  ,ABS(clse-lg20)dc20
21:27:03  31  ,ABS(clse-lg22)dc22
21:27:03  32  ,(ld8-clse) ug8
21:27:03  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:27:03  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:27:03  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:27:03  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:27:03  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:27:03  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:27:03  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:27:03  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
21:27:03  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
21:27:03  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
21:27:03  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
21:27:03  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
21:27:03  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
21:27:03  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:27:03  47  ,0+TO_CHAR(ydate,'D')d
21:27:03  48  ,0+TO_CHAR(ydate,'W')w
21:27:03  49  -- mpm stands for minutes-past-midnight:
21:27:03  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:27:03  51  FROM q11
21:27:03  52  -- I dont want any NULL values from the LAG() functions:
21:27:03  53  WHERE lg32 > 0
21:27:03  54  ORDER BY pair,ydate
21:27:03  55  /

Table created.

Elapsed: 00:00:01.71
21:27:05 SQL> 
21:27:05 SQL> -- rpt
21:27:05 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9417
	-1	   10941

Elapsed: 00:00:00.04
21:27:05 SQL> 
21:27:05 SQL> -- Calc gains and ntiles
21:27:05 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.22
21:27:05 SQL> CREATE TABLE q15 COMPRESS AS
21:27:05   2  SELECT
21:27:05   3  pair
21:27:05   4  ,ydate
21:27:05   5  ,prdate -- Should be unique
21:27:05   6  ,trend -- +1 or -1
21:27:05   7  -- Use NTILE() to derive some attributes
21:27:05   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
21:27:05   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
21:27:05  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
21:27:05  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
21:27:05  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
21:27:05  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
21:27:05  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
21:27:05  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
21:27:05  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
21:27:05  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
21:27:05  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
21:27:05  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
21:27:05  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
21:27:05  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
21:27:05  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
21:27:05  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
21:27:05  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
21:27:05  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
21:27:05  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
21:27:05  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
21:27:05  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
21:27:05  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
21:27:05  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
21:27:05  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
21:27:05  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
21:27:05  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
21:27:05  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
21:27:05  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
21:27:05  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
21:27:05  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
21:27:05  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
21:27:05  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
21:27:05  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
21:27:05  41  ,hh    att32
21:27:05  42  ,d     att33
21:27:05  43  ,w     att34
21:27:05  44  ,mpm   att35
21:27:05  45  ,trend att36
21:27:05  46  ,ug8 g8
21:27:05  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
21:27:05  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
21:27:05  49  FROM q13
21:27:05  50  ORDER BY pair,ydate
21:27:05  51  /

Table created.

Elapsed: 00:00:05.34
21:27:10 SQL> 
21:27:10 SQL> -- rpt
21:27:10 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
21:27:10   2  GROUP BY pair,trend,gatt,gattn
21:27:10   3  ORDER BY pair,trend,gatt,gattn
21:27:10   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_cad 	-1 nup nup -.00001657	    5658
usd_cad 	-1 nup up   -.0040141	    2618
usd_cad 	-1 up  nup .004660129	    2593
usd_cad 	-1			       0
usd_cad 	 1 nup nup -.00011783	    4679
usd_cad 	 1 nup up  -.00423187	    2732
usd_cad 	 1 up  nup .004613128	    1982
usd_cad 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
21:27:10 SQL> 
21:27:10 SQL> -- rpt
21:27:10 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_cad 2010-12-23 21:25:00

Elapsed: 00:00:00.01
21:27:10 SQL> 
21:27:10 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
21:27:10 SQL> CREATE TABLE modsrc COMPRESS AS
21:27:10   2  SELECT
21:27:10   3  pair
21:27:10   4  ,ydate
21:27:10   5  ,prdate
21:27:10   6  ,trend
21:27:10   7  ,g8
21:27:10   8  ,gatt
21:27:10   9  ,gattn
21:27:10  10  FROM q15
21:27:10  11  /

Table created.

Elapsed: 00:00:00.08
21:27:10 SQL> 
21:27:10 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
21:27:11 SQL> 
21:27:11 SQL> -- rpt
21:27:11 SQL> 
21:27:11 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20742

Elapsed: 00:00:00.33
21:27:11 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.01
21:27:11 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.00
21:27:11 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.01
21:27:11 SQL> 
21:27:11 SQL> DROP   TABLE cad_ms10 ;

Table dropped.

Elapsed: 00:00:00.03
21:27:11 SQL> CREATE TABLE cad_ms10 COMPRESS AS
21:27:11   2  SELECT
21:27:11   3  ydate
21:27:11   4  ,trend cad_trend
21:27:11   5  ,g8    cad_g8
21:27:11   6  ,gatt  cad_gatt
21:27:11   7  ,gattn cad_gattn
21:27:11   8  FROM modsrc
21:27:11   9  /

Table created.

Elapsed: 00:00:00.07
21:27:11 SQL> 
21:27:11 SQL> ANALYZE TABLE cad_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
21:27:11 SQL> 
21:27:11 SQL> -- rpt
21:27:11 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 05:30:01 2010-12-23 15:30:00	 9393	  -.0122      .0159
	-1 2010-09-16 07:15:01 2010-12-23 21:25:00	10869	 -.01105      .0176

Elapsed: 00:00:00.02
21:27:11 SQL> SELECT cad_trend,MIN(ydate),MAX(ydate),COUNT(cad_trend),MIN(cad_g8),MAX(cad_g8)FROM cad_ms10 GROUP BY cad_trend;

 CAD_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(CAD_TREND) MIN(CAD_G8) MAX(CAD_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 05:30:01 2010-12-23 15:30:00	       9417	 -.0122       .0159
	-1 2010-09-16 07:15:01 2010-12-23 21:25:00	      10941	-.01105       .0176

Elapsed: 00:00:00.01
21:27:11 SQL> 
21:27:11 SQL> -- I need a copy of q15 attributes
21:27:11 SQL> 
21:27:11 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.04
21:27:11 SQL> CREATE TABLE cad_att COMPRESS AS
21:27:11   2  SELECT
21:27:11   3  ydate
21:27:11   4  ,att00 cad_att00
21:27:11   5  ,att01 cad_att01
21:27:11   6  ,att02 cad_att02
21:27:11   7  ,att03 cad_att03
21:27:11   8  ,att04 cad_att04
21:27:11   9  ,att05 cad_att05
21:27:11  10  ,att06 cad_att06
21:27:11  11  ,att07 cad_att07
21:27:11  12  ,att08 cad_att08
21:27:11  13  ,att09 cad_att09
21:27:11  14  ,att10 cad_att10
21:27:11  15  ,att11 cad_att11
21:27:11  16  ,att12 cad_att12
21:27:11  17  ,att13 cad_att13
21:27:11  18  ,att14 cad_att14
21:27:11  19  ,att15 cad_att15
21:27:11  20  ,att16 cad_att16
21:27:11  21  ,att17 cad_att17
21:27:11  22  ,att18 cad_att18
21:27:11  23  ,att19 cad_att19
21:27:11  24  ,att20 cad_att20
21:27:11  25  ,att21 cad_att21
21:27:11  26  ,att22 cad_att22
21:27:11  27  ,att23 cad_att23
21:27:11  28  ,att24 cad_att24
21:27:11  29  ,att25 cad_att25
21:27:11  30  ,att26 cad_att26
21:27:11  31  ,att27 cad_att27
21:27:11  32  ,att28 cad_att28
21:27:11  33  ,att29 cad_att29
21:27:11  34  ,att30 cad_att30
21:27:11  35  ,att31 cad_att31
21:27:11  36  ,att32 cad_att32
21:27:11  37  ,att33 cad_att33
21:27:11  38  ,att34 cad_att34
21:27:11  39  ,att35 cad_att35
21:27:11  40  ,att36 cad_att36
21:27:11  41  FROM q15
21:27:11  42  /

Table created.

Elapsed: 00:00:00.18
21:27:11 SQL> 
21:27:11 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
21:27:12 SQL> 
21:27:12 SQL> -- rpt
21:27:12 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     20358

Elapsed: 00:00:00.00
21:27:12 SQL> 
21:27:12 SQL> --
21:27:12 SQL> -- chf10.sql
21:27:12 SQL> --
21:27:12 SQL> 
21:27:12 SQL> -- Creates views and tables for backtesting a forex SVM strategy
21:27:12 SQL> 
21:27:12 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.32
21:27:12 SQL> 
21:27:12 SQL> -- I created di5min here:
21:27:12 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
21:27:12 SQL> 
21:27:12 SQL> CREATE OR REPLACE VIEW q11 AS
21:27:12   2  SELECT
21:27:12   3  pair
21:27:12   4  ,ydate
21:27:12   5  ,prdate
21:27:12   6  ,rownum rnum -- acts as t in my time-series
21:27:12   7  ,clse
21:27:12   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
21:27:12   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
21:27:12  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
21:27:12  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
21:27:12  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
21:27:12  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
21:27:12  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
21:27:12  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
21:27:12  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
21:27:12  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
21:27:12  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
21:27:12  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
21:27:12  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
21:27:12  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
21:27:12  22  FROM di5min WHERE pair LIKE'%chf%'
21:27:12  23  ORDER BY ydate
21:27:12  24  /

View created.

Elapsed: 00:00:00.03
21:27:12 SQL> 
21:27:12 SQL> -- rpt
21:27:12 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_chf        20745

Elapsed: 00:00:00.34
21:27:13 SQL> 
21:27:13 SQL> -- Calc deltas and gains
21:27:13 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.17
21:27:13 SQL> 
21:27:13 SQL> CREATE TABLE q13 COMPRESS AS
21:27:13   2  SELECT
21:27:13   3  pair
21:27:13   4  ,ydate
21:27:13   5  ,prdate
21:27:13   6  ,rnum
21:27:13   7  ,ld8
21:27:13   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
21:27:13   9  -- step by 2
21:27:13  10  ,clse-lg6  d06
21:27:13  11  ,lg6 -lg8  d68
21:27:13  12  ,lg8 -lg10 d810
21:27:13  13  ,lg10-lg12 d1012
21:27:13  14  ,lg12-lg14 d1214
21:27:13  15  ,lg14-lg16 d1416
21:27:13  16  ,lg16-lg18 d1618
21:27:13  17  -- step by 4
21:27:13  18  ,lg6 -lg10 d610
21:27:13  19  ,lg8 -lg12 d812
21:27:13  20  ,lg10-lg14 d1014
21:27:13  21  ,lg12-lg16 d1216
21:27:13  22  --
21:27:13  23  ,ABS(clse-lg6 )dc6
21:27:13  24  ,ABS(clse-lg8 )dc8
21:27:13  25  ,ABS(clse-lg10)dc10
21:27:13  26  ,ABS(clse-lg12)dc12
21:27:13  27  ,ABS(clse-lg14)dc14
21:27:13  28  ,ABS(clse-lg16)dc16
21:27:13  29  ,ABS(clse-lg18)dc18
21:27:13  30  ,ABS(clse-lg20)dc20
21:27:13  31  ,ABS(clse-lg22)dc22
21:27:13  32  ,(ld8-clse) ug8
21:27:13  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
21:27:13  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
21:27:13  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
21:27:13  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
21:27:13  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
21:27:13  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
21:27:13  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
21:27:13  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
21:27:13  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
21:27:13  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
21:27:13  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
21:27:13  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
21:27:13  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
21:27:13  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
21:27:13  47  ,0+TO_CHAR(ydate,'D')d
21:27:13  48  ,0+TO_CHAR(ydate,'W')w
21:27:13  49  -- mpm stands for minutes-past-midnight:
21:27:13  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
21:27:13  51  FROM q11
21:27:13  52  -- I dont want any NULL values from the LAG() functions:
21:27:13  53  WHERE lg32 > 0
21:27:13  54  ORDER BY pair,ydate
21:27:13  55  /

Table created.

Elapsed: 00:00:01.69
21:27:15 SQL> 
21:27:15 SQL> -- rpt
21:27:15 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9624
	-1	   10737

Elapsed: 00:00:00.08
21:27:15 SQL> 
21:27:15 SQL> -- Calc gains and ntiles
21:27:15 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.19
21:27:15 SQL> CREATE TABLE q15 COMPRESS AS
21:27:15   2  SELECT
21:27:15   3  pair
21:27:15   4  ,ydate
21:27:15   5  ,prdate -- Should be unique
21:27:15   6  ,trend -- +1 or -1
21:27:15   7  -- Use NTILE() to derive some attributes
21:27:15   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
21:27:15   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
21:27:15  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
21:27:15  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
21:27:15  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
21:27:15  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
21:27:15  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
21:27:15  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
21:27:15  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
21:27:15  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
21:27:15  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
21:27:15  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
21:27:15  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
21:27:15  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
21:27:15  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
21:27:15  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
21:27:15  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
21:27:15  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
21:27:15  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
21:27:15  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
21:27:15  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
21:27:15  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
21:27:15  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
21:27:15  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
21:27:15  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
21:27:15  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
21:27:15  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
21:27:15  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
21:27:15  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
21:27:15  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
21:27:15  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
21:27:15  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
21:27:15  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
21:27:15  41  ,hh    att32
21:27:15  42  ,d     att33
21:27:15  43  ,w     att34
21:27:15  44  ,mpm   att35
21:27:15  45  ,trend att36
21:27:15  46  ,ug8 g8
21:27:15  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
21:27:15  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
21:27:15  49  FROM q13
21:27:15  50  ORDER BY pair,ydate
21:27:15  51  /

Table created.

Elapsed: 00:00:05.41
21:27:20 SQL> 
21:27:20 SQL> -- rpt
21:27:20 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
21:27:20   2  GROUP BY pair,trend,gatt,gattn
21:27:20   3  ORDER BY pair,trend,gatt,gattn
21:27:20   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_chf 	-1 nup nup .000029712	    4879
usd_chf 	-1 nup up  -.00495181	    3139
usd_chf 	-1 up  nup .005212759	    2707
usd_chf 	-1			       0
usd_chf 	 1 nup nup -9.105E-06	    4531
usd_chf 	 1 nup up  -.00455711	    2857
usd_chf 	 1 up  nup .004717726	    2152
usd_chf 	 1			       0

8 rows selected.

Elapsed: 00:00:00.02
21:27:20 SQL> 
21:27:20 SQL> -- rpt
21:27:20 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_chf 2010-12-23 21:25:00

Elapsed: 00:00:00.02
21:27:20 SQL> 
21:27:20 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.23
21:27:20 SQL> CREATE TABLE modsrc COMPRESS AS
21:27:20   2  SELECT
21:27:20   3  pair
21:27:20   4  ,ydate
21:27:20   5  ,prdate
21:27:20   6  ,trend
21:27:20   7  ,g8
21:27:20   8  ,gatt
21:27:20   9  ,gattn
21:27:20  10  FROM q15
21:27:20  11  /

Table created.

Elapsed: 00:00:00.12
21:27:21 SQL> 
21:27:21 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.30
21:27:21 SQL> 
21:27:21 SQL> -- rpt
21:27:21 SQL> 
21:27:21 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20745

Elapsed: 00:00:00.35
21:27:21 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20361

Elapsed: 00:00:00.01
21:27:21 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20361

Elapsed: 00:00:00.00
21:27:21 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20361

Elapsed: 00:00:00.00
21:27:21 SQL> 
21:27:21 SQL> DROP   TABLE chf_ms10 ;

Table dropped.

Elapsed: 00:00:00.05
21:27:21 SQL> CREATE TABLE chf_ms10 COMPRESS AS
21:27:21   2  SELECT
21:27:21   3  ydate
21:27:21   4  ,trend chf_trend
21:27:21   5  ,g8    chf_g8
21:27:21   6  ,gatt  chf_gatt
21:27:21   7  ,gattn chf_gattn
21:27:21   8  FROM modsrc
21:27:21   9  /

Table created.

Elapsed: 00:00:00.08
21:27:21 SQL> 
21:27:21 SQL> ANALYZE TABLE chf_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
21:27:22 SQL> 
21:27:22 SQL> -- rpt
21:27:22 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 08:00:01 2010-12-23 20:30:00	 9540	 -.01775      .0155
	-1 2010-09-16 05:30:01 2010-12-23 21:25:00	10725	 -.01825     .01545

Elapsed: 00:00:00.02
21:27:22 SQL> SELECT chf_trend,MIN(ydate),MAX(ydate),COUNT(chf_trend),MIN(chf_g8),MAX(chf_g8)FROM chf_ms10 GROUP BY chf_trend;

 CHF_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(CHF_TREND) MIN(CHF_G8) MAX(CHF_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 08:00:01 2010-12-23 20:30:00	       9624	-.01775       .0155
	-1 2010-09-16 05:30:01 2010-12-23 21:25:00	      10737	-.01825      .01545

Elapsed: 00:00:00.01
21:27:22 SQL> 
21:27:22 SQL> -- I need a copy of q15 attributes
21:27:22 SQL> 
21:27:22 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.04
21:27:22 SQL> CREATE TABLE chf_att COMPRESS AS
21:27:22   2  SELECT
21:27:22   3  ydate
21:27:22   4  ,att00 chf_att00
21:27:22   5  ,att01 chf_att01
21:27:22   6  ,att02 chf_att02
21:27:22   7  ,att03 chf_att03
21:27:22   8  ,att04 chf_att04
21:27:22   9  ,att05 chf_att05
21:27:22  10  ,att06 chf_att06
21:27:22  11  ,att07 chf_att07
21:27:22  12  ,att08 chf_att08
21:27:22  13  ,att09 chf_att09
21:27:22  14  ,att10 chf_att10
21:27:22  15  ,att11 chf_att11
21:27:22  16  ,att12 chf_att12
21:27:22  17  ,att13 chf_att13
21:27:22  18  ,att14 chf_att14
21:27:22  19  ,att15 chf_att15
21:27:22  20  ,att16 chf_att16
21:27:22  21  ,att17 chf_att17
21:27:22  22  ,att18 chf_att18
21:27:22  23  ,att19 chf_att19
21:27:22  24  ,att20 chf_att20
21:27:22  25  ,att21 chf_att21
21:27:22  26  ,att22 chf_att22
21:27:22  27  ,att23 chf_att23
21:27:22  28  ,att24 chf_att24
21:27:22  29  ,att25 chf_att25
21:27:22  30  ,att26 chf_att26
21:27:22  31  ,att27 chf_att27
21:27:22  32  ,att28 chf_att28
21:27:22  33  ,att29 chf_att29
21:27:22  34  ,att30 chf_att30
21:27:22  35  ,att31 chf_att31
21:27:22  36  ,att32 chf_att32
21:27:22  37  ,att33 chf_att33
21:27:22  38  ,att34 chf_att34
21:27:22  39  ,att35 chf_att35
21:27:22  40  ,att36 chf_att36
21:27:22  41  FROM q15
21:27:22  42  /

Table created.

Elapsed: 00:00:00.18
21:27:22 SQL> 
21:27:22 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
21:27:22 SQL> 
21:27:22 SQL> -- rpt
21:27:22 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     20361

Elapsed: 00:00:00.00
21:27:22 SQL> 
21:27:22 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
