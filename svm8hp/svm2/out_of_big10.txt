
SQL*Plus: Release 11.2.0.1.0 Production on Wed Dec 22 13:20:45 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

13:20:45 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
13:20:45 SQL> 13:20:45 SQL> --
13:20:45 SQL> -- eur10.sql
13:20:45 SQL> --
13:20:45 SQL> 
13:20:45 SQL> -- Creates views and tables for backtesting a forex SVM strategy
13:20:45 SQL> 
13:20:45 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.01
13:20:45 SQL> 
13:20:45 SQL> -- I created di5min here:
13:20:45 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
13:20:45 SQL> 
13:20:45 SQL> CREATE OR REPLACE VIEW q11 AS
13:20:45   2  SELECT
13:20:45   3  pair
13:20:45   4  ,ydate
13:20:45   5  ,prdate
13:20:45   6  ,rownum rnum -- acts as t in my time-series
13:20:45   7  ,clse
13:20:45   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
13:20:45   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
13:20:45  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
13:20:45  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
13:20:45  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
13:20:45  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
13:20:45  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
13:20:45  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
13:20:45  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
13:20:45  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
13:20:45  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
13:20:45  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
13:20:45  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
13:20:45  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
13:20:45  22  FROM di5min WHERE pair LIKE'%eur%'
13:20:45  23  ORDER BY ydate
13:20:45  24  /

View created.

Elapsed: 00:00:00.12
13:20:45 SQL> 
13:20:45 SQL> -- rpt
13:20:45 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
eur_usd        20773

Elapsed: 00:00:00.35
13:20:45 SQL> 
13:20:45 SQL> -- Calc deltas and gains
13:20:45 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.10
13:20:46 SQL> 
13:20:46 SQL> CREATE TABLE q13 COMPRESS AS
13:20:46   2  SELECT
13:20:46   3  pair
13:20:46   4  ,ydate
13:20:46   5  ,prdate
13:20:46   6  ,rnum
13:20:46   7  ,ld8
13:20:46   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
13:20:46   9  -- step by 2
13:20:46  10  ,clse-lg6  d06
13:20:46  11  ,lg6 -lg8  d68
13:20:46  12  ,lg8 -lg10 d810
13:20:46  13  ,lg10-lg12 d1012
13:20:46  14  ,lg12-lg14 d1214
13:20:46  15  ,lg14-lg16 d1416
13:20:46  16  ,lg16-lg18 d1618
13:20:46  17  -- step by 4
13:20:46  18  ,lg6 -lg10 d610
13:20:46  19  ,lg8 -lg12 d812
13:20:46  20  ,lg10-lg14 d1014
13:20:46  21  ,lg12-lg16 d1216
13:20:46  22  --
13:20:46  23  ,ABS(clse-lg6 )dc6
13:20:46  24  ,ABS(clse-lg8 )dc8
13:20:46  25  ,ABS(clse-lg10)dc10
13:20:46  26  ,ABS(clse-lg12)dc12
13:20:46  27  ,ABS(clse-lg14)dc14
13:20:46  28  ,ABS(clse-lg16)dc16
13:20:46  29  ,ABS(clse-lg18)dc18
13:20:46  30  ,ABS(clse-lg20)dc20
13:20:46  31  ,ABS(clse-lg22)dc22
13:20:46  32  ,(ld8-clse) ug8
13:20:46  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
13:20:46  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
13:20:46  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
13:20:46  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
13:20:46  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
13:20:46  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
13:20:46  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
13:20:46  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
13:20:46  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
13:20:46  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
13:20:46  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
13:20:46  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
13:20:46  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
13:20:46  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
13:20:46  47  ,0+TO_CHAR(ydate,'D')d
13:20:46  48  ,0+TO_CHAR(ydate,'W')w
13:20:46  49  -- mpm stands for minutes-past-midnight:
13:20:46  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
13:20:46  51  FROM q11
13:20:46  52  -- I dont want any NULL values from the LAG() functions:
13:20:46  53  WHERE lg32 > 0
13:20:46  54  ORDER BY pair,ydate
13:20:46  55  /

Table created.

Elapsed: 00:00:02.08
13:20:48 SQL> 
13:20:48 SQL> -- rpt
13:20:48 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	   10135
	-1	   10254

Elapsed: 00:00:00.03
13:20:48 SQL> 
13:20:48 SQL> -- Calc gains and ntiles
13:20:48 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.04
13:20:48 SQL> CREATE TABLE q15 COMPRESS AS
13:20:48   2  SELECT
13:20:48   3  pair
13:20:48   4  ,ydate
13:20:48   5  ,prdate -- Should be unique
13:20:48   6  ,trend -- +1 or -1
13:20:48   7  -- Use NTILE() to derive some attributes
13:20:48   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
13:20:48   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
13:20:48  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
13:20:48  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
13:20:48  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
13:20:48  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
13:20:48  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
13:20:48  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
13:20:48  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
13:20:48  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
13:20:48  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
13:20:48  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
13:20:48  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
13:20:48  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
13:20:48  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
13:20:48  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
13:20:48  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
13:20:48  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
13:20:48  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
13:20:48  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
13:20:48  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
13:20:48  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
13:20:48  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
13:20:48  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
13:20:48  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
13:20:48  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
13:20:48  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
13:20:48  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
13:20:48  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
13:20:48  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
13:20:48  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
13:20:48  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
13:20:48  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
13:20:48  41  ,hh    att32
13:20:48  42  ,d     att33
13:20:48  43  ,w     att34
13:20:48  44  ,mpm   att35
13:20:48  45  ,trend att36
13:20:48  46  ,ug8 g8
13:20:48  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
13:20:48  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
13:20:48  49  FROM q13
13:20:48  50  ORDER BY pair,ydate
13:20:48  51  /

Table created.

Elapsed: 00:00:05.42
13:20:53 SQL> 
13:20:53 SQL> -- rpt
13:20:53 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
13:20:53   2  GROUP BY pair,trend,gatt,gattn
13:20:53   3  ORDER BY pair,trend,gatt,gattn
13:20:53   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
eur_usd 	-1 nup nup .000016231	    3019
eur_usd 	-1 nup up  -.00601556	    3667
eur_usd 	-1 up  nup .005870208	    3563
eur_usd 	-1			       0
eur_usd 	 1 nup nup -.00009408	    3018
eur_usd 	 1 nup up   -.0062575	    3368
eur_usd 	 1 up  nup .006550188	    3658
eur_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
13:20:53 SQL> 
13:20:53 SQL> -- rpt
13:20:53 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
eur_usd 2010-12-22 13:15:00

Elapsed: 00:00:00.02
13:20:53 SQL> 
13:20:53 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.06
13:20:53 SQL> CREATE TABLE modsrc COMPRESS AS
13:20:53   2  SELECT
13:20:53   3  pair
13:20:53   4  ,ydate
13:20:53   5  ,prdate
13:20:53   6  ,trend
13:20:53   7  ,g8
13:20:53   8  ,gatt
13:20:53   9  ,gattn
13:20:53  10  FROM q15
13:20:53  11  /

Table created.

Elapsed: 00:00:00.14
13:20:53 SQL> 
13:20:53 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
13:20:54 SQL> 
13:20:54 SQL> -- rpt
13:20:54 SQL> 
13:20:54 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20773

Elapsed: 00:00:00.34
13:20:54 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20389

Elapsed: 00:00:00.01
13:20:54 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20389

Elapsed: 00:00:00.00
13:20:54 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20389

Elapsed: 00:00:00.01
13:20:54 SQL> 
13:20:54 SQL> DROP   TABLE eur_ms10 ;

Table dropped.

Elapsed: 00:00:00.06
13:20:54 SQL> CREATE TABLE eur_ms10 COMPRESS AS
13:20:54   2  SELECT
13:20:54   3  ydate
13:20:54   4  ,trend eur_trend
13:20:54   5  ,g8    eur_g8
13:20:54   6  ,gatt  eur_gatt
13:20:54   7  ,gattn eur_gattn
13:20:54   8  FROM modsrc
13:20:54   9  /

Table created.

Elapsed: 00:00:00.09
13:20:54 SQL> 
13:20:54 SQL> ANALYZE TABLE eur_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
13:20:54 SQL> 
13:20:54 SQL> -- rpt
13:20:54 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-14 21:25:01 2010-12-22 12:55:00	10044	  -.0218     .02165
	-1 2010-09-14 23:00:01 2010-12-22 13:15:00	10249	 -.02085      .0196

Elapsed: 00:00:00.02
13:20:54 SQL> SELECT eur_trend,MIN(ydate),MAX(ydate),COUNT(eur_trend),MIN(eur_g8),MAX(eur_g8)FROM eur_ms10 GROUP BY eur_trend;

 EUR_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(EUR_TREND) MIN(EUR_G8) MAX(EUR_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-14 21:25:01 2010-12-22 12:55:00	      10135	 -.0218      .02165
	-1 2010-09-14 23:00:01 2010-12-22 13:15:00	      10254	-.02085       .0196

Elapsed: 00:00:00.01
13:20:54 SQL> 
13:20:54 SQL> -- I need a copy of q15 attributes
13:20:54 SQL> 
13:20:54 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.06
13:20:54 SQL> CREATE TABLE eur_att COMPRESS AS
13:20:54   2  SELECT
13:20:54   3  ydate
13:20:54   4  ,att00 eur_att00
13:20:54   5  ,att01 eur_att01
13:20:54   6  ,att02 eur_att02
13:20:54   7  ,att03 eur_att03
13:20:54   8  ,att04 eur_att04
13:20:54   9  ,att05 eur_att05
13:20:54  10  ,att06 eur_att06
13:20:54  11  ,att07 eur_att07
13:20:54  12  ,att08 eur_att08
13:20:54  13  ,att09 eur_att09
13:20:54  14  ,att10 eur_att10
13:20:54  15  ,att11 eur_att11
13:20:54  16  ,att12 eur_att12
13:20:54  17  ,att13 eur_att13
13:20:54  18  ,att14 eur_att14
13:20:54  19  ,att15 eur_att15
13:20:54  20  ,att16 eur_att16
13:20:54  21  ,att17 eur_att17
13:20:54  22  ,att18 eur_att18
13:20:54  23  ,att19 eur_att19
13:20:54  24  ,att20 eur_att20
13:20:54  25  ,att21 eur_att21
13:20:54  26  ,att22 eur_att22
13:20:54  27  ,att23 eur_att23
13:20:54  28  ,att24 eur_att24
13:20:54  29  ,att25 eur_att25
13:20:54  30  ,att26 eur_att26
13:20:54  31  ,att27 eur_att27
13:20:54  32  ,att28 eur_att28
13:20:54  33  ,att29 eur_att29
13:20:54  34  ,att30 eur_att30
13:20:54  35  ,att31 eur_att31
13:20:54  36  ,att32 eur_att32
13:20:54  37  ,att33 eur_att33
13:20:54  38  ,att34 eur_att34
13:20:54  39  ,att35 eur_att35
13:20:54  40  ,att36 eur_att36
13:20:54  41  FROM q15
13:20:54  42  /

Table created.

Elapsed: 00:00:00.18
13:20:55 SQL> 
13:20:55 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
13:20:55 SQL> 
13:20:55 SQL> -- rpt
13:20:55 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     20389

Elapsed: 00:00:00.00
13:20:55 SQL> 
13:20:55 SQL> --
13:20:55 SQL> -- aud10.sql
13:20:55 SQL> --
13:20:55 SQL> 
13:20:55 SQL> -- Creates views and tables for backtesting a forex SVM strategy
13:20:55 SQL> 
13:20:55 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.47
13:20:55 SQL> 
13:20:55 SQL> -- I created di5min here:
13:20:55 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
13:20:55 SQL> 
13:20:55 SQL> CREATE OR REPLACE VIEW q11 AS
13:20:55   2  SELECT
13:20:55   3  pair
13:20:55   4  ,ydate
13:20:55   5  ,prdate
13:20:55   6  ,rownum rnum -- acts as t in my time-series
13:20:55   7  ,clse
13:20:55   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
13:20:55   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
13:20:55  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
13:20:55  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
13:20:55  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
13:20:55  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
13:20:55  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
13:20:55  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
13:20:55  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
13:20:55  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
13:20:55  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
13:20:55  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
13:20:55  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
13:20:55  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
13:20:55  22  FROM di5min WHERE pair LIKE'%aud%'
13:20:55  23  ORDER BY ydate
13:20:55  24  /

View created.

Elapsed: 00:00:00.05
13:20:56 SQL> 
13:20:56 SQL> -- rpt
13:20:56 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
aud_usd        20770

Elapsed: 00:00:00.34
13:20:56 SQL> 
13:20:56 SQL> -- Calc deltas and gains
13:20:56 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.29
13:20:56 SQL> 
13:20:56 SQL> CREATE TABLE q13 COMPRESS AS
13:20:56   2  SELECT
13:20:56   3  pair
13:20:56   4  ,ydate
13:20:56   5  ,prdate
13:20:56   6  ,rnum
13:20:56   7  ,ld8
13:20:56   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
13:20:56   9  -- step by 2
13:20:56  10  ,clse-lg6  d06
13:20:56  11  ,lg6 -lg8  d68
13:20:56  12  ,lg8 -lg10 d810
13:20:56  13  ,lg10-lg12 d1012
13:20:56  14  ,lg12-lg14 d1214
13:20:56  15  ,lg14-lg16 d1416
13:20:56  16  ,lg16-lg18 d1618
13:20:56  17  -- step by 4
13:20:56  18  ,lg6 -lg10 d610
13:20:56  19  ,lg8 -lg12 d812
13:20:56  20  ,lg10-lg14 d1014
13:20:56  21  ,lg12-lg16 d1216
13:20:56  22  --
13:20:56  23  ,ABS(clse-lg6 )dc6
13:20:56  24  ,ABS(clse-lg8 )dc8
13:20:56  25  ,ABS(clse-lg10)dc10
13:20:56  26  ,ABS(clse-lg12)dc12
13:20:56  27  ,ABS(clse-lg14)dc14
13:20:56  28  ,ABS(clse-lg16)dc16
13:20:56  29  ,ABS(clse-lg18)dc18
13:20:56  30  ,ABS(clse-lg20)dc20
13:20:56  31  ,ABS(clse-lg22)dc22
13:20:56  32  ,(ld8-clse) ug8
13:20:56  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
13:20:56  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
13:20:56  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
13:20:56  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
13:20:56  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
13:20:56  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
13:20:56  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
13:20:56  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
13:20:56  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
13:20:56  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
13:20:56  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
13:20:56  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
13:20:56  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
13:20:56  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
13:20:56  47  ,0+TO_CHAR(ydate,'D')d
13:20:56  48  ,0+TO_CHAR(ydate,'W')w
13:20:56  49  -- mpm stands for minutes-past-midnight:
13:20:56  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
13:20:56  51  FROM q11
13:20:56  52  -- I dont want any NULL values from the LAG() functions:
13:20:56  53  WHERE lg32 > 0
13:20:56  54  ORDER BY pair,ydate
13:20:56  55  /

Table created.

Elapsed: 00:00:01.74
13:20:58 SQL> 
13:20:58 SQL> -- rpt
13:20:58 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	   10687
	-1	    9699

Elapsed: 00:00:00.02
13:20:58 SQL> 
13:20:58 SQL> -- Calc gains and ntiles
13:20:58 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.19
13:20:58 SQL> CREATE TABLE q15 COMPRESS AS
13:20:58   2  SELECT
13:20:58   3  pair
13:20:58   4  ,ydate
13:20:58   5  ,prdate -- Should be unique
13:20:58   6  ,trend -- +1 or -1
13:20:58   7  -- Use NTILE() to derive some attributes
13:20:58   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
13:20:58   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
13:20:58  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
13:20:58  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
13:20:58  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
13:20:58  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
13:20:58  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
13:20:58  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
13:20:58  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
13:20:58  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
13:20:58  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
13:20:58  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
13:20:58  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
13:20:58  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
13:20:58  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
13:20:58  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
13:20:58  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
13:20:58  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
13:20:58  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
13:20:58  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
13:20:58  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
13:20:58  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
13:20:58  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
13:20:58  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
13:20:58  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
13:20:58  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
13:20:58  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
13:20:58  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
13:20:58  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
13:20:58  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
13:20:58  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
13:20:58  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
13:20:58  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
13:20:58  41  ,hh    att32
13:20:58  42  ,d     att33
13:20:58  43  ,w     att34
13:20:58  44  ,mpm   att35
13:20:58  45  ,trend att36
13:20:58  46  ,ug8 g8
13:20:58  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
13:20:58  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
13:20:58  49  FROM q13
13:20:58  50  ORDER BY pair,ydate
13:20:58  51  /

Table created.

Elapsed: 00:00:05.53
13:21:04 SQL> 
13:21:04 SQL> -- rpt
13:21:04 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
13:21:04   2  GROUP BY pair,trend,gatt,gattn
13:21:04   3  ORDER BY pair,trend,gatt,gattn
13:21:04   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
aud_usd 	-1 nup nup .000028627	    3674
aud_usd 	-1 nup up  -.00519991	    2596
aud_usd 	-1 up  nup .005160854	    3417
aud_usd 	-1			       0
aud_usd 	 1 nup nup 9.4325E-06	    4185
aud_usd 	 1 nup up  -.00496329	    3122
aud_usd 	 1 up  nup .005137219	    3296
aud_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
13:21:04 SQL> 
13:21:04 SQL> -- rpt
13:21:04 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
aud_usd 2010-12-22 13:15:00

Elapsed: 00:00:00.02
13:21:04 SQL> 
13:21:04 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
13:21:04 SQL> CREATE TABLE modsrc COMPRESS AS
13:21:04   2  SELECT
13:21:04   3  pair
13:21:04   4  ,ydate
13:21:04   5  ,prdate
13:21:04   6  ,trend
13:21:04   7  ,g8
13:21:04   8  ,gatt
13:21:04   9  ,gattn
13:21:04  10  FROM q15
13:21:04  11  /

Table created.

Elapsed: 00:00:00.09
13:21:04 SQL> 
13:21:04 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
13:21:04 SQL> 
13:21:04 SQL> -- rpt
13:21:04 SQL> 
13:21:04 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20770

Elapsed: 00:00:00.34
13:21:04 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20386

Elapsed: 00:00:00.00
13:21:04 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20386

Elapsed: 00:00:00.01
13:21:04 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20386

Elapsed: 00:00:00.00
13:21:04 SQL> 
13:21:04 SQL> DROP   TABLE aud_ms10 ;

Table dropped.

Elapsed: 00:00:00.13
13:21:05 SQL> CREATE TABLE aud_ms10 COMPRESS AS
13:21:05   2  SELECT
13:21:05   3  ydate
13:21:05   4  ,trend aud_trend
13:21:05   5  ,g8    aud_g8
13:21:05   6  ,gatt  aud_gatt
13:21:05   7  ,gattn aud_gattn
13:21:05   8  FROM modsrc
13:21:05   9  /

Table created.

Elapsed: 00:00:00.08
13:21:05 SQL> 
13:21:05 SQL> ANALYZE TABLE aud_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
13:21:05 SQL> 
13:21:05 SQL> -- rpt
13:21:05 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-14 21:25:01 2010-12-22 13:15:00	10603	  -.0203      .0136
	-1 2010-09-14 22:50:01 2010-12-22 07:05:00	 9687	  -.0196      .0148

Elapsed: 00:00:00.03
13:21:05 SQL> SELECT aud_trend,MIN(ydate),MAX(ydate),COUNT(aud_trend),MIN(aud_g8),MAX(aud_g8)FROM aud_ms10 GROUP BY aud_trend;

 AUD_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(AUD_TREND) MIN(AUD_G8) MAX(AUD_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-14 21:25:01 2010-12-22 13:15:00	      10687	 -.0203       .0136
	-1 2010-09-14 22:50:01 2010-12-22 07:05:00	       9699	 -.0196       .0148

Elapsed: 00:00:00.01
13:21:05 SQL> 
13:21:05 SQL> -- I need a copy of q15 attributes
13:21:05 SQL> 
13:21:05 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.05
13:21:05 SQL> CREATE TABLE aud_att COMPRESS AS
13:21:05   2  SELECT
13:21:05   3  ydate
13:21:05   4  ,att00 aud_att00
13:21:05   5  ,att01 aud_att01
13:21:05   6  ,att02 aud_att02
13:21:05   7  ,att03 aud_att03
13:21:05   8  ,att04 aud_att04
13:21:05   9  ,att05 aud_att05
13:21:05  10  ,att06 aud_att06
13:21:05  11  ,att07 aud_att07
13:21:05  12  ,att08 aud_att08
13:21:05  13  ,att09 aud_att09
13:21:05  14  ,att10 aud_att10
13:21:05  15  ,att11 aud_att11
13:21:05  16  ,att12 aud_att12
13:21:05  17  ,att13 aud_att13
13:21:05  18  ,att14 aud_att14
13:21:05  19  ,att15 aud_att15
13:21:05  20  ,att16 aud_att16
13:21:05  21  ,att17 aud_att17
13:21:05  22  ,att18 aud_att18
13:21:05  23  ,att19 aud_att19
13:21:05  24  ,att20 aud_att20
13:21:05  25  ,att21 aud_att21
13:21:05  26  ,att22 aud_att22
13:21:05  27  ,att23 aud_att23
13:21:05  28  ,att24 aud_att24
13:21:05  29  ,att25 aud_att25
13:21:05  30  ,att26 aud_att26
13:21:05  31  ,att27 aud_att27
13:21:05  32  ,att28 aud_att28
13:21:05  33  ,att29 aud_att29
13:21:05  34  ,att30 aud_att30
13:21:05  35  ,att31 aud_att31
13:21:05  36  ,att32 aud_att32
13:21:05  37  ,att33 aud_att33
13:21:05  38  ,att34 aud_att34
13:21:05  39  ,att35 aud_att35
13:21:05  40  ,att36 aud_att36
13:21:05  41  FROM q15
13:21:05  42  /

Table created.

Elapsed: 00:00:00.16
13:21:05 SQL> 
13:21:05 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.49
13:21:06 SQL> 
13:21:06 SQL> -- rpt
13:21:06 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     20386

Elapsed: 00:00:00.00
13:21:06 SQL> 
13:21:06 SQL> --
13:21:06 SQL> -- gbp10.sql
13:21:06 SQL> --
13:21:06 SQL> 
13:21:06 SQL> -- Creates views and tables for backtesting a forex SVM strategy
13:21:06 SQL> 
13:21:06 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.77
13:21:06 SQL> 
13:21:06 SQL> -- I created di5min here:
13:21:06 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
13:21:06 SQL> 
13:21:06 SQL> CREATE OR REPLACE VIEW q11 AS
13:21:06   2  SELECT
13:21:06   3  pair
13:21:06   4  ,ydate
13:21:06   5  ,prdate
13:21:06   6  ,rownum rnum -- acts as t in my time-series
13:21:06   7  ,clse
13:21:06   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
13:21:06   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
13:21:06  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
13:21:06  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
13:21:06  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
13:21:06  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
13:21:06  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
13:21:06  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
13:21:06  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
13:21:06  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
13:21:06  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
13:21:06  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
13:21:06  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
13:21:06  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
13:21:06  22  FROM di5min WHERE pair LIKE'%gbp%'
13:21:06  23  ORDER BY ydate
13:21:06  24  /

View created.

Elapsed: 00:00:00.04
13:21:06 SQL> 
13:21:06 SQL> -- rpt
13:21:06 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
gbp_usd        20772

Elapsed: 00:00:00.33
13:21:07 SQL> 
13:21:07 SQL> -- Calc deltas and gains
13:21:07 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.20
13:21:07 SQL> 
13:21:07 SQL> CREATE TABLE q13 COMPRESS AS
13:21:07   2  SELECT
13:21:07   3  pair
13:21:07   4  ,ydate
13:21:07   5  ,prdate
13:21:07   6  ,rnum
13:21:07   7  ,ld8
13:21:07   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
13:21:07   9  -- step by 2
13:21:07  10  ,clse-lg6  d06
13:21:07  11  ,lg6 -lg8  d68
13:21:07  12  ,lg8 -lg10 d810
13:21:07  13  ,lg10-lg12 d1012
13:21:07  14  ,lg12-lg14 d1214
13:21:07  15  ,lg14-lg16 d1416
13:21:07  16  ,lg16-lg18 d1618
13:21:07  17  -- step by 4
13:21:07  18  ,lg6 -lg10 d610
13:21:07  19  ,lg8 -lg12 d812
13:21:07  20  ,lg10-lg14 d1014
13:21:07  21  ,lg12-lg16 d1216
13:21:07  22  --
13:21:07  23  ,ABS(clse-lg6 )dc6
13:21:07  24  ,ABS(clse-lg8 )dc8
13:21:07  25  ,ABS(clse-lg10)dc10
13:21:07  26  ,ABS(clse-lg12)dc12
13:21:07  27  ,ABS(clse-lg14)dc14
13:21:07  28  ,ABS(clse-lg16)dc16
13:21:07  29  ,ABS(clse-lg18)dc18
13:21:07  30  ,ABS(clse-lg20)dc20
13:21:07  31  ,ABS(clse-lg22)dc22
13:21:07  32  ,(ld8-clse) ug8
13:21:07  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
13:21:07  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
13:21:07  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
13:21:07  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
13:21:07  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
13:21:07  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
13:21:07  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
13:21:07  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
13:21:07  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
13:21:07  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
13:21:07  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
13:21:07  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
13:21:07  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
13:21:07  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
13:21:07  47  ,0+TO_CHAR(ydate,'D')d
13:21:07  48  ,0+TO_CHAR(ydate,'W')w
13:21:07  49  -- mpm stands for minutes-past-midnight:
13:21:07  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
13:21:07  51  FROM q11
13:21:07  52  -- I dont want any NULL values from the LAG() functions:
13:21:07  53  WHERE lg32 > 0
13:21:07  54  ORDER BY pair,ydate
13:21:07  55  /

Table created.

Elapsed: 00:00:01.73
13:21:09 SQL> 
13:21:09 SQL> -- rpt
13:21:09 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9969
	-1	   10419

Elapsed: 00:00:00.03
13:21:09 SQL> 
13:21:09 SQL> -- Calc gains and ntiles
13:21:09 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.14
13:21:09 SQL> CREATE TABLE q15 COMPRESS AS
13:21:09   2  SELECT
13:21:09   3  pair
13:21:09   4  ,ydate
13:21:09   5  ,prdate -- Should be unique
13:21:09   6  ,trend -- +1 or -1
13:21:09   7  -- Use NTILE() to derive some attributes
13:21:09   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
13:21:09   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
13:21:09  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
13:21:09  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
13:21:09  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
13:21:09  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
13:21:09  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
13:21:09  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
13:21:09  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
13:21:09  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
13:21:09  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
13:21:09  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
13:21:09  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
13:21:09  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
13:21:09  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
13:21:09  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
13:21:09  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
13:21:09  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
13:21:09  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
13:21:09  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
13:21:09  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
13:21:09  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
13:21:09  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
13:21:09  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
13:21:09  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
13:21:09  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
13:21:09  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
13:21:09  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
13:21:09  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
13:21:09  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
13:21:09  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
13:21:09  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
13:21:09  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
13:21:09  41  ,hh    att32
13:21:09  42  ,d     att33
13:21:09  43  ,w     att34
13:21:09  44  ,mpm   att35
13:21:09  45  ,trend att36
13:21:09  46  ,ug8 g8
13:21:09  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
13:21:09  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
13:21:09  49  FROM q13
13:21:09  50  ORDER BY pair,ydate
13:21:09  51  /

Table created.

Elapsed: 00:00:05.46
13:21:14 SQL> 
13:21:14 SQL> -- rpt
13:21:14 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
13:21:14   2  GROUP BY pair,trend,gatt,gattn
13:21:14   3  ORDER BY pair,trend,gatt,gattn
13:21:14   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
gbp_usd 	-1 nup nup .000083188	    3861
gbp_usd 	-1 nup up  -.00586158	    3235
gbp_usd 	-1 up  nup .005586212	    3271
gbp_usd 	-1			       0
gbp_usd 	 1 nup nup -.00007728	    3658
gbp_usd 	 1 nup up  -.00550591	    3264
gbp_usd 	 1 up  nup .006064028	    3003
gbp_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.02
13:21:14 SQL> 
13:21:14 SQL> -- rpt
13:21:14 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
gbp_usd 2010-12-22 13:15:00

Elapsed: 00:00:00.02
13:21:14 SQL> 
13:21:14 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.16
13:21:14 SQL> CREATE TABLE modsrc COMPRESS AS
13:21:14   2  SELECT
13:21:14   3  pair
13:21:14   4  ,ydate
13:21:14   5  ,prdate
13:21:14   6  ,trend
13:21:14   7  ,g8
13:21:14   8  ,gatt
13:21:14   9  ,gattn
13:21:14  10  FROM q15
13:21:14  11  /

Table created.

Elapsed: 00:00:00.08
13:21:15 SQL> 
13:21:15 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
13:21:15 SQL> 
13:21:15 SQL> -- rpt
13:21:15 SQL> 
13:21:15 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20772

Elapsed: 00:00:00.34
13:21:15 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20388

Elapsed: 00:00:00.00
13:21:15 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20388

Elapsed: 00:00:00.01
13:21:15 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20388

Elapsed: 00:00:00.00
13:21:15 SQL> 
13:21:15 SQL> DROP   TABLE gbp_ms10 ;

Table dropped.

Elapsed: 00:00:00.15
13:21:15 SQL> CREATE TABLE gbp_ms10 COMPRESS AS
13:21:15   2  SELECT
13:21:15   3  ydate
13:21:15   4  ,trend gbp_trend
13:21:15   5  ,g8    gbp_g8
13:21:15   6  ,gatt  gbp_gatt
13:21:15   7  ,gattn gbp_gattn
13:21:15   8  FROM modsrc
13:21:15   9  /

Table created.

Elapsed: 00:00:00.07
13:21:15 SQL> 
13:21:15 SQL> ANALYZE TABLE gbp_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
13:21:16 SQL> 
13:21:16 SQL> -- rpt
13:21:16 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-14 21:25:01 2010-12-22 10:45:00	 9925	  -.0231       .019
	-1 2010-09-14 23:35:01 2010-12-22 13:15:00	10367	    -.02      .0204

Elapsed: 00:00:00.01
13:21:16 SQL> SELECT gbp_trend,MIN(ydate),MAX(ydate),COUNT(gbp_trend),MIN(gbp_g8),MAX(gbp_g8)FROM gbp_ms10 GROUP BY gbp_trend;

 GBP_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(GBP_TREND) MIN(GBP_G8) MAX(GBP_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-14 21:25:01 2010-12-22 10:45:00	       9969	 -.0231        .019
	-1 2010-09-14 23:35:01 2010-12-22 13:15:00	      10419	   -.02       .0204

Elapsed: 00:00:00.02
13:21:16 SQL> 
13:21:16 SQL> -- I need a copy of q15 attributes
13:21:16 SQL> 
13:21:16 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.03
13:21:16 SQL> CREATE TABLE gbp_att COMPRESS AS
13:21:16   2  SELECT
13:21:16   3  ydate
13:21:16   4  ,att00 gbp_att00
13:21:16   5  ,att01 gbp_att01
13:21:16   6  ,att02 gbp_att02
13:21:16   7  ,att03 gbp_att03
13:21:16   8  ,att04 gbp_att04
13:21:16   9  ,att05 gbp_att05
13:21:16  10  ,att06 gbp_att06
13:21:16  11  ,att07 gbp_att07
13:21:16  12  ,att08 gbp_att08
13:21:16  13  ,att09 gbp_att09
13:21:16  14  ,att10 gbp_att10
13:21:16  15  ,att11 gbp_att11
13:21:16  16  ,att12 gbp_att12
13:21:16  17  ,att13 gbp_att13
13:21:16  18  ,att14 gbp_att14
13:21:16  19  ,att15 gbp_att15
13:21:16  20  ,att16 gbp_att16
13:21:16  21  ,att17 gbp_att17
13:21:16  22  ,att18 gbp_att18
13:21:16  23  ,att19 gbp_att19
13:21:16  24  ,att20 gbp_att20
13:21:16  25  ,att21 gbp_att21
13:21:16  26  ,att22 gbp_att22
13:21:16  27  ,att23 gbp_att23
13:21:16  28  ,att24 gbp_att24
13:21:16  29  ,att25 gbp_att25
13:21:16  30  ,att26 gbp_att26
13:21:16  31  ,att27 gbp_att27
13:21:16  32  ,att28 gbp_att28
13:21:16  33  ,att29 gbp_att29
13:21:16  34  ,att30 gbp_att30
13:21:16  35  ,att31 gbp_att31
13:21:16  36  ,att32 gbp_att32
13:21:16  37  ,att33 gbp_att33
13:21:16  38  ,att34 gbp_att34
13:21:16  39  ,att35 gbp_att35
13:21:16  40  ,att36 gbp_att36
13:21:16  41  FROM q15
13:21:16  42  /

Table created.

Elapsed: 00:00:00.19
13:21:16 SQL> 
13:21:16 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
13:21:16 SQL> 
13:21:16 SQL> -- rpt
13:21:16 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     20388

Elapsed: 00:00:00.00
13:21:16 SQL> 
13:21:16 SQL> --
13:21:16 SQL> -- jpy10.sql
13:21:16 SQL> --
13:21:16 SQL> 
13:21:16 SQL> -- Creates views and tables for backtesting a forex SVM strategy
13:21:16 SQL> 
13:21:16 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.39
13:21:17 SQL> 
13:21:17 SQL> -- I created di5min here:
13:21:17 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
13:21:17 SQL> 
13:21:17 SQL> CREATE OR REPLACE VIEW q11 AS
13:21:17   2  SELECT
13:21:17   3  pair
13:21:17   4  ,ydate
13:21:17   5  ,prdate
13:21:17   6  ,rownum rnum -- acts as t in my time-series
13:21:17   7  ,clse
13:21:17   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
13:21:17   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
13:21:17  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
13:21:17  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
13:21:17  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
13:21:17  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
13:21:17  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
13:21:17  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
13:21:17  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
13:21:17  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
13:21:17  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
13:21:17  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
13:21:17  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
13:21:17  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
13:21:17  22  FROM di5min WHERE pair LIKE'%jpy%'
13:21:17  23  ORDER BY ydate
13:21:17  24  /

View created.

Elapsed: 00:00:00.05
13:21:17 SQL> 
13:21:17 SQL> -- rpt
13:21:17 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_jpy        20772

Elapsed: 00:00:00.35
13:21:17 SQL> 
13:21:17 SQL> -- Calc deltas and gains
13:21:17 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.25
13:21:17 SQL> 
13:21:17 SQL> CREATE TABLE q13 COMPRESS AS
13:21:17   2  SELECT
13:21:17   3  pair
13:21:17   4  ,ydate
13:21:17   5  ,prdate
13:21:17   6  ,rnum
13:21:17   7  ,ld8
13:21:17   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
13:21:17   9  -- step by 2
13:21:17  10  ,clse-lg6  d06
13:21:17  11  ,lg6 -lg8  d68
13:21:17  12  ,lg8 -lg10 d810
13:21:17  13  ,lg10-lg12 d1012
13:21:17  14  ,lg12-lg14 d1214
13:21:17  15  ,lg14-lg16 d1416
13:21:17  16  ,lg16-lg18 d1618
13:21:17  17  -- step by 4
13:21:17  18  ,lg6 -lg10 d610
13:21:17  19  ,lg8 -lg12 d812
13:21:17  20  ,lg10-lg14 d1014
13:21:17  21  ,lg12-lg16 d1216
13:21:17  22  --
13:21:17  23  ,ABS(clse-lg6 )dc6
13:21:17  24  ,ABS(clse-lg8 )dc8
13:21:17  25  ,ABS(clse-lg10)dc10
13:21:17  26  ,ABS(clse-lg12)dc12
13:21:17  27  ,ABS(clse-lg14)dc14
13:21:17  28  ,ABS(clse-lg16)dc16
13:21:17  29  ,ABS(clse-lg18)dc18
13:21:17  30  ,ABS(clse-lg20)dc20
13:21:17  31  ,ABS(clse-lg22)dc22
13:21:17  32  ,(ld8-clse) ug8
13:21:17  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
13:21:17  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
13:21:17  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
13:21:17  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
13:21:17  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
13:21:17  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
13:21:17  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
13:21:17  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
13:21:17  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
13:21:17  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
13:21:17  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
13:21:17  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
13:21:17  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
13:21:17  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
13:21:17  47  ,0+TO_CHAR(ydate,'D')d
13:21:17  48  ,0+TO_CHAR(ydate,'W')w
13:21:17  49  -- mpm stands for minutes-past-midnight:
13:21:17  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
13:21:17  51  FROM q11
13:21:17  52  -- I dont want any NULL values from the LAG() functions:
13:21:17  53  WHERE lg32 > 0
13:21:17  54  ORDER BY pair,ydate
13:21:17  55  /

Table created.

Elapsed: 00:00:01.70
13:21:19 SQL> 
13:21:19 SQL> -- rpt
13:21:19 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9625
	-1	   10763

Elapsed: 00:00:00.03
13:21:19 SQL> 
13:21:19 SQL> -- Calc gains and ntiles
13:21:19 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.22
13:21:19 SQL> CREATE TABLE q15 COMPRESS AS
13:21:19   2  SELECT
13:21:19   3  pair
13:21:19   4  ,ydate
13:21:19   5  ,prdate -- Should be unique
13:21:19   6  ,trend -- +1 or -1
13:21:19   7  -- Use NTILE() to derive some attributes
13:21:19   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
13:21:19   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
13:21:19  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
13:21:19  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
13:21:19  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
13:21:19  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
13:21:19  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
13:21:19  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
13:21:19  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
13:21:19  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
13:21:19  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
13:21:19  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
13:21:19  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
13:21:19  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
13:21:19  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
13:21:19  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
13:21:19  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
13:21:19  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
13:21:19  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
13:21:19  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
13:21:19  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
13:21:19  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
13:21:19  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
13:21:19  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
13:21:19  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
13:21:19  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
13:21:19  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
13:21:19  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
13:21:19  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
13:21:19  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
13:21:19  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
13:21:19  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
13:21:19  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
13:21:19  41  ,hh    att32
13:21:19  42  ,d     att33
13:21:19  43  ,w     att34
13:21:19  44  ,mpm   att35
13:21:19  45  ,trend att36
13:21:19  46  ,ug8 g8
13:21:19  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
13:21:19  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
13:21:19  49  FROM q13
13:21:19  50  ORDER BY pair,ydate
13:21:19  51  /

Table created.

Elapsed: 00:00:06.17
13:21:25 SQL> 
13:21:25 SQL> -- rpt
13:21:25 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
13:21:25   2  GROUP BY pair,trend,gatt,gattn
13:21:25   3  ORDER BY pair,trend,gatt,gattn
13:21:25   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_jpy 	-1 nup nup .000015337	     163
usd_jpy 	-1 nup up  -.18490927	    5304
usd_jpy 	-1 up  nup  .19213149	    5200
usd_jpy 	-1			       0
usd_jpy 	 1 nup nup	    0	     119
usd_jpy 	 1 nup up  -.18640755	    5157
usd_jpy 	 1 up  nup .211735456	    4349

7 rows selected.

Elapsed: 00:00:00.02
13:21:25 SQL> 
13:21:25 SQL> -- rpt
13:21:25 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_jpy 2010-12-22 13:20:00

Elapsed: 00:00:00.02
13:21:25 SQL> 
13:21:25 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
13:21:26 SQL> CREATE TABLE modsrc COMPRESS AS
13:21:26   2  SELECT
13:21:26   3  pair
13:21:26   4  ,ydate
13:21:26   5  ,prdate
13:21:26   6  ,trend
13:21:26   7  ,g8
13:21:26   8  ,gatt
13:21:26   9  ,gattn
13:21:26  10  FROM q15
13:21:26  11  /

Table created.

Elapsed: 00:00:00.08
13:21:26 SQL> 
13:21:26 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
13:21:26 SQL> 
13:21:26 SQL> -- rpt
13:21:26 SQL> 
13:21:26 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20772

Elapsed: 00:00:00.34
13:21:26 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20388

Elapsed: 00:00:00.01
13:21:26 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20388

Elapsed: 00:00:00.00
13:21:26 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20388

Elapsed: 00:00:00.01
13:21:26 SQL> 
13:21:26 SQL> DROP   TABLE jpy_ms10 ;

Table dropped.

Elapsed: 00:00:00.14
13:21:26 SQL> CREATE TABLE jpy_ms10 COMPRESS AS
13:21:26   2  SELECT
13:21:26   3  ydate
13:21:26   4  ,trend jpy_trend
13:21:26   5  ,g8    jpy_g8
13:21:26   6  ,gatt  jpy_gatt
13:21:26   7  ,gattn jpy_gattn
13:21:26   8  FROM modsrc
13:21:26   9  /

Table created.

Elapsed: 00:00:00.07
13:21:27 SQL> 
13:21:27 SQL> ANALYZE TABLE jpy_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
13:21:27 SQL> 
13:21:27 SQL> -- rpt
13:21:27 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-14 22:15:01 2010-12-22 03:50:00	 9625	  -1.185       2.42
	-1 2010-09-14 21:25:01 2010-12-22 13:20:00	10667	 -1.0575       2.49

Elapsed: 00:00:00.02
13:21:27 SQL> SELECT jpy_trend,MIN(ydate),MAX(ydate),COUNT(jpy_trend),MIN(jpy_g8),MAX(jpy_g8)FROM jpy_ms10 GROUP BY jpy_trend;

 JPY_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(JPY_TREND) MIN(JPY_G8) MAX(JPY_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-14 22:15:01 2010-12-22 03:50:00	       9625	 -1.185        2.42
	-1 2010-09-14 21:25:01 2010-12-22 13:20:00	      10763	-1.0575        2.49

Elapsed: 00:00:00.01
13:21:27 SQL> 
13:21:27 SQL> -- I need a copy of q15 attributes
13:21:27 SQL> 
13:21:27 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.05
13:21:27 SQL> CREATE TABLE jpy_att COMPRESS AS
13:21:27   2  SELECT
13:21:27   3  ydate
13:21:27   4  ,att00 jpy_att00
13:21:27   5  ,att01 jpy_att01
13:21:27   6  ,att02 jpy_att02
13:21:27   7  ,att03 jpy_att03
13:21:27   8  ,att04 jpy_att04
13:21:27   9  ,att05 jpy_att05
13:21:27  10  ,att06 jpy_att06
13:21:27  11  ,att07 jpy_att07
13:21:27  12  ,att08 jpy_att08
13:21:27  13  ,att09 jpy_att09
13:21:27  14  ,att10 jpy_att10
13:21:27  15  ,att11 jpy_att11
13:21:27  16  ,att12 jpy_att12
13:21:27  17  ,att13 jpy_att13
13:21:27  18  ,att14 jpy_att14
13:21:27  19  ,att15 jpy_att15
13:21:27  20  ,att16 jpy_att16
13:21:27  21  ,att17 jpy_att17
13:21:27  22  ,att18 jpy_att18
13:21:27  23  ,att19 jpy_att19
13:21:27  24  ,att20 jpy_att20
13:21:27  25  ,att21 jpy_att21
13:21:27  26  ,att22 jpy_att22
13:21:27  27  ,att23 jpy_att23
13:21:27  28  ,att24 jpy_att24
13:21:27  29  ,att25 jpy_att25
13:21:27  30  ,att26 jpy_att26
13:21:27  31  ,att27 jpy_att27
13:21:27  32  ,att28 jpy_att28
13:21:27  33  ,att29 jpy_att29
13:21:27  34  ,att30 jpy_att30
13:21:27  35  ,att31 jpy_att31
13:21:27  36  ,att32 jpy_att32
13:21:27  37  ,att33 jpy_att33
13:21:27  38  ,att34 jpy_att34
13:21:27  39  ,att35 jpy_att35
13:21:27  40  ,att36 jpy_att36
13:21:27  41  FROM q15
13:21:27  42  /

Table created.

Elapsed: 00:00:00.17
13:21:27 SQL> 
13:21:27 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
13:21:27 SQL> 
13:21:27 SQL> -- rpt
13:21:27 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     20388

Elapsed: 00:00:00.01
13:21:27 SQL> 
13:21:27 SQL> --
13:21:27 SQL> -- cad10.sql
13:21:27 SQL> --
13:21:27 SQL> 
13:21:27 SQL> -- Creates views and tables for backtesting a forex SVM strategy
13:21:27 SQL> 
13:21:27 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.32
13:21:28 SQL> 
13:21:28 SQL> -- I created di5min here:
13:21:28 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
13:21:28 SQL> 
13:21:28 SQL> CREATE OR REPLACE VIEW q11 AS
13:21:28   2  SELECT
13:21:28   3  pair
13:21:28   4  ,ydate
13:21:28   5  ,prdate
13:21:28   6  ,rownum rnum -- acts as t in my time-series
13:21:28   7  ,clse
13:21:28   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
13:21:28   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
13:21:28  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
13:21:28  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
13:21:28  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
13:21:28  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
13:21:28  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
13:21:28  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
13:21:28  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
13:21:28  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
13:21:28  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
13:21:28  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
13:21:28  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
13:21:28  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
13:21:28  22  FROM di5min WHERE pair LIKE'%cad%'
13:21:28  23  ORDER BY ydate
13:21:28  24  /

View created.

Elapsed: 00:00:00.03
13:21:28 SQL> 
13:21:28 SQL> -- rpt
13:21:28 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_cad        20769

Elapsed: 00:00:00.34
13:21:28 SQL> 
13:21:28 SQL> -- Calc deltas and gains
13:21:28 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.20
13:21:28 SQL> 
13:21:28 SQL> CREATE TABLE q13 COMPRESS AS
13:21:28   2  SELECT
13:21:28   3  pair
13:21:28   4  ,ydate
13:21:28   5  ,prdate
13:21:28   6  ,rnum
13:21:28   7  ,ld8
13:21:28   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
13:21:28   9  -- step by 2
13:21:28  10  ,clse-lg6  d06
13:21:28  11  ,lg6 -lg8  d68
13:21:28  12  ,lg8 -lg10 d810
13:21:28  13  ,lg10-lg12 d1012
13:21:28  14  ,lg12-lg14 d1214
13:21:28  15  ,lg14-lg16 d1416
13:21:28  16  ,lg16-lg18 d1618
13:21:28  17  -- step by 4
13:21:28  18  ,lg6 -lg10 d610
13:21:28  19  ,lg8 -lg12 d812
13:21:28  20  ,lg10-lg14 d1014
13:21:28  21  ,lg12-lg16 d1216
13:21:28  22  --
13:21:28  23  ,ABS(clse-lg6 )dc6
13:21:28  24  ,ABS(clse-lg8 )dc8
13:21:28  25  ,ABS(clse-lg10)dc10
13:21:28  26  ,ABS(clse-lg12)dc12
13:21:28  27  ,ABS(clse-lg14)dc14
13:21:28  28  ,ABS(clse-lg16)dc16
13:21:28  29  ,ABS(clse-lg18)dc18
13:21:28  30  ,ABS(clse-lg20)dc20
13:21:28  31  ,ABS(clse-lg22)dc22
13:21:28  32  ,(ld8-clse) ug8
13:21:28  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
13:21:28  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
13:21:28  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
13:21:28  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
13:21:28  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
13:21:28  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
13:21:28  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
13:21:28  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
13:21:28  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
13:21:28  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
13:21:28  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
13:21:28  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
13:21:28  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
13:21:28  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
13:21:28  47  ,0+TO_CHAR(ydate,'D')d
13:21:28  48  ,0+TO_CHAR(ydate,'W')w
13:21:28  49  -- mpm stands for minutes-past-midnight:
13:21:28  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
13:21:28  51  FROM q11
13:21:28  52  -- I dont want any NULL values from the LAG() functions:
13:21:28  53  WHERE lg32 > 0
13:21:28  54  ORDER BY pair,ydate
13:21:28  55  /

Table created.

Elapsed: 00:00:01.72
13:21:30 SQL> 
13:21:30 SQL> -- rpt
13:21:30 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9460
	-1	   10925

Elapsed: 00:00:00.03
13:21:30 SQL> 
13:21:30 SQL> -- Calc gains and ntiles
13:21:30 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.13
13:21:30 SQL> CREATE TABLE q15 COMPRESS AS
13:21:30   2  SELECT
13:21:30   3  pair
13:21:30   4  ,ydate
13:21:30   5  ,prdate -- Should be unique
13:21:30   6  ,trend -- +1 or -1
13:21:30   7  -- Use NTILE() to derive some attributes
13:21:30   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
13:21:30   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
13:21:30  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
13:21:30  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
13:21:30  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
13:21:30  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
13:21:30  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
13:21:30  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
13:21:30  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
13:21:30  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
13:21:30  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
13:21:30  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
13:21:30  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
13:21:30  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
13:21:30  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
13:21:30  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
13:21:30  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
13:21:30  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
13:21:30  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
13:21:30  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
13:21:30  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
13:21:30  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
13:21:30  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
13:21:30  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
13:21:30  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
13:21:30  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
13:21:30  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
13:21:30  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
13:21:30  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
13:21:30  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
13:21:30  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
13:21:30  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
13:21:30  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
13:21:30  41  ,hh    att32
13:21:30  42  ,d     att33
13:21:30  43  ,w     att34
13:21:30  44  ,mpm   att35
13:21:30  45  ,trend att36
13:21:30  46  ,ug8 g8
13:21:30  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
13:21:30  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
13:21:30  49  FROM q13
13:21:30  50  ORDER BY pair,ydate
13:21:30  51  /

Table created.

Elapsed: 00:00:05.39
13:21:36 SQL> 
13:21:36 SQL> -- rpt
13:21:36 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
13:21:36   2  GROUP BY pair,trend,gatt,gattn
13:21:36   3  ORDER BY pair,trend,gatt,gattn
13:21:36   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_cad 	-1 nup nup  -.0000335	    5618
usd_cad 	-1 nup up  -.00400967	    2632
usd_cad 	-1 up  nup .004670373	    2580
usd_cad 	-1			       0
usd_cad 	 1 nup nup -.00012034	    4732
usd_cad 	 1 nup up  -.00420177	    2701
usd_cad 	 1 up  nup .004588055	    2026
usd_cad 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
13:21:36 SQL> 
13:21:36 SQL> -- rpt
13:21:36 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_cad 2010-12-22 13:15:00

Elapsed: 00:00:00.02
13:21:36 SQL> 
13:21:36 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.16
13:21:36 SQL> CREATE TABLE modsrc COMPRESS AS
13:21:36   2  SELECT
13:21:36   3  pair
13:21:36   4  ,ydate
13:21:36   5  ,prdate
13:21:36   6  ,trend
13:21:36   7  ,g8
13:21:36   8  ,gatt
13:21:36   9  ,gattn
13:21:36  10  FROM q15
13:21:36  11  /

Table created.

Elapsed: 00:00:00.08
13:21:36 SQL> 
13:21:36 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
13:21:36 SQL> 
13:21:36 SQL> -- rpt
13:21:36 SQL> 
13:21:36 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20769

Elapsed: 00:00:00.34
13:21:36 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20385

Elapsed: 00:00:00.00
13:21:36 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20385

Elapsed: 00:00:00.01
13:21:36 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20385

Elapsed: 00:00:00.00
13:21:36 SQL> 
13:21:36 SQL> DROP   TABLE cad_ms10 ;

Table dropped.

Elapsed: 00:00:00.06
13:21:37 SQL> CREATE TABLE cad_ms10 COMPRESS AS
13:21:37   2  SELECT
13:21:37   3  ydate
13:21:37   4  ,trend cad_trend
13:21:37   5  ,g8    cad_g8
13:21:37   6  ,gatt  cad_gatt
13:21:37   7  ,gattn cad_gattn
13:21:37   8  FROM modsrc
13:21:37   9  /

Table created.

Elapsed: 00:00:00.05
13:21:37 SQL> 
13:21:37 SQL> ANALYZE TABLE cad_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
13:21:37 SQL> 
13:21:37 SQL> -- rpt
13:21:37 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-14 21:25:01 2010-12-22 13:15:00	 9459	  -.0122      .0159
	-1 2010-09-15 10:10:01 2010-12-22 13:10:00	10830	 -.01105      .0176

Elapsed: 00:00:00.03
13:21:37 SQL> SELECT cad_trend,MIN(ydate),MAX(ydate),COUNT(cad_trend),MIN(cad_g8),MAX(cad_g8)FROM cad_ms10 GROUP BY cad_trend;

 CAD_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(CAD_TREND) MIN(CAD_G8) MAX(CAD_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-14 21:25:01 2010-12-22 13:15:00	       9460	 -.0122       .0159
	-1 2010-09-15 10:10:01 2010-12-22 13:10:00	      10925	-.01105       .0176

Elapsed: 00:00:00.01
13:21:37 SQL> 
13:21:37 SQL> -- I need a copy of q15 attributes
13:21:37 SQL> 
13:21:37 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.04
13:21:37 SQL> CREATE TABLE cad_att COMPRESS AS
13:21:37   2  SELECT
13:21:37   3  ydate
13:21:37   4  ,att00 cad_att00
13:21:37   5  ,att01 cad_att01
13:21:37   6  ,att02 cad_att02
13:21:37   7  ,att03 cad_att03
13:21:37   8  ,att04 cad_att04
13:21:37   9  ,att05 cad_att05
13:21:37  10  ,att06 cad_att06
13:21:37  11  ,att07 cad_att07
13:21:37  12  ,att08 cad_att08
13:21:37  13  ,att09 cad_att09
13:21:37  14  ,att10 cad_att10
13:21:37  15  ,att11 cad_att11
13:21:37  16  ,att12 cad_att12
13:21:37  17  ,att13 cad_att13
13:21:37  18  ,att14 cad_att14
13:21:37  19  ,att15 cad_att15
13:21:37  20  ,att16 cad_att16
13:21:37  21  ,att17 cad_att17
13:21:37  22  ,att18 cad_att18
13:21:37  23  ,att19 cad_att19
13:21:37  24  ,att20 cad_att20
13:21:37  25  ,att21 cad_att21
13:21:37  26  ,att22 cad_att22
13:21:37  27  ,att23 cad_att23
13:21:37  28  ,att24 cad_att24
13:21:37  29  ,att25 cad_att25
13:21:37  30  ,att26 cad_att26
13:21:37  31  ,att27 cad_att27
13:21:37  32  ,att28 cad_att28
13:21:37  33  ,att29 cad_att29
13:21:37  34  ,att30 cad_att30
13:21:37  35  ,att31 cad_att31
13:21:37  36  ,att32 cad_att32
13:21:37  37  ,att33 cad_att33
13:21:37  38  ,att34 cad_att34
13:21:37  39  ,att35 cad_att35
13:21:37  40  ,att36 cad_att36
13:21:37  41  FROM q15
13:21:37  42  /

Table created.

Elapsed: 00:00:00.18
13:21:37 SQL> 
13:21:37 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
13:21:37 SQL> 
13:21:37 SQL> -- rpt
13:21:37 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     20385

Elapsed: 00:00:00.01
13:21:37 SQL> 
13:21:37 SQL> --
13:21:37 SQL> -- chf10.sql
13:21:37 SQL> --
13:21:37 SQL> 
13:21:37 SQL> -- Creates views and tables for backtesting a forex SVM strategy
13:21:37 SQL> 
13:21:37 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.35
13:21:38 SQL> 
13:21:38 SQL> -- I created di5min here:
13:21:38 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
13:21:38 SQL> 
13:21:38 SQL> CREATE OR REPLACE VIEW q11 AS
13:21:38   2  SELECT
13:21:38   3  pair
13:21:38   4  ,ydate
13:21:38   5  ,prdate
13:21:38   6  ,rownum rnum -- acts as t in my time-series
13:21:38   7  ,clse
13:21:38   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
13:21:38   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
13:21:38  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
13:21:38  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
13:21:38  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
13:21:38  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
13:21:38  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
13:21:38  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
13:21:38  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
13:21:38  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
13:21:38  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
13:21:38  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
13:21:38  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
13:21:38  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
13:21:38  22  FROM di5min WHERE pair LIKE'%chf%'
13:21:38  23  ORDER BY ydate
13:21:38  24  /

View created.

Elapsed: 00:00:00.05
13:21:38 SQL> 
13:21:38 SQL> -- rpt
13:21:38 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_chf        20773

Elapsed: 00:00:00.34
13:21:38 SQL> 
13:21:38 SQL> -- Calc deltas and gains
13:21:38 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.17
13:21:38 SQL> 
13:21:38 SQL> CREATE TABLE q13 COMPRESS AS
13:21:38   2  SELECT
13:21:38   3  pair
13:21:38   4  ,ydate
13:21:38   5  ,prdate
13:21:38   6  ,rnum
13:21:38   7  ,ld8
13:21:38   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
13:21:38   9  -- step by 2
13:21:38  10  ,clse-lg6  d06
13:21:38  11  ,lg6 -lg8  d68
13:21:38  12  ,lg8 -lg10 d810
13:21:38  13  ,lg10-lg12 d1012
13:21:38  14  ,lg12-lg14 d1214
13:21:38  15  ,lg14-lg16 d1416
13:21:38  16  ,lg16-lg18 d1618
13:21:38  17  -- step by 4
13:21:38  18  ,lg6 -lg10 d610
13:21:38  19  ,lg8 -lg12 d812
13:21:38  20  ,lg10-lg14 d1014
13:21:38  21  ,lg12-lg16 d1216
13:21:38  22  --
13:21:38  23  ,ABS(clse-lg6 )dc6
13:21:38  24  ,ABS(clse-lg8 )dc8
13:21:38  25  ,ABS(clse-lg10)dc10
13:21:38  26  ,ABS(clse-lg12)dc12
13:21:38  27  ,ABS(clse-lg14)dc14
13:21:38  28  ,ABS(clse-lg16)dc16
13:21:38  29  ,ABS(clse-lg18)dc18
13:21:38  30  ,ABS(clse-lg20)dc20
13:21:38  31  ,ABS(clse-lg22)dc22
13:21:38  32  ,(ld8-clse) ug8
13:21:38  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
13:21:38  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
13:21:38  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
13:21:38  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
13:21:38  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
13:21:38  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
13:21:38  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
13:21:38  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
13:21:38  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
13:21:38  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
13:21:38  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
13:21:38  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
13:21:38  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
13:21:38  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
13:21:38  47  ,0+TO_CHAR(ydate,'D')d
13:21:38  48  ,0+TO_CHAR(ydate,'W')w
13:21:38  49  -- mpm stands for minutes-past-midnight:
13:21:38  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
13:21:38  51  FROM q11
13:21:38  52  -- I dont want any NULL values from the LAG() functions:
13:21:38  53  WHERE lg32 > 0
13:21:38  54  ORDER BY pair,ydate
13:21:38  55  /

Table created.

Elapsed: 00:00:01.79
13:21:40 SQL> 
13:21:40 SQL> -- rpt
13:21:40 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9678
	-1	   10711

Elapsed: 00:00:00.03
13:21:40 SQL> 
13:21:40 SQL> -- Calc gains and ntiles
13:21:40 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.13
13:21:40 SQL> CREATE TABLE q15 COMPRESS AS
13:21:40   2  SELECT
13:21:40   3  pair
13:21:40   4  ,ydate
13:21:40   5  ,prdate -- Should be unique
13:21:40   6  ,trend -- +1 or -1
13:21:40   7  -- Use NTILE() to derive some attributes
13:21:40   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
13:21:40   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
13:21:40  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
13:21:40  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
13:21:40  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
13:21:40  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
13:21:40  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
13:21:40  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
13:21:40  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
13:21:40  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
13:21:40  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
13:21:40  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
13:21:40  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
13:21:40  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
13:21:40  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
13:21:40  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
13:21:40  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
13:21:40  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
13:21:40  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
13:21:40  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
13:21:40  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
13:21:40  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
13:21:40  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
13:21:40  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
13:21:40  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
13:21:40  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
13:21:40  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
13:21:40  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
13:21:40  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
13:21:40  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
13:21:40  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
13:21:40  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
13:21:40  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
13:21:40  41  ,hh    att32
13:21:40  42  ,d     att33
13:21:40  43  ,w     att34
13:21:40  44  ,mpm   att35
13:21:40  45  ,trend att36
13:21:40  46  ,ug8 g8
13:21:40  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
13:21:40  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
13:21:40  49  FROM q13
13:21:40  50  ORDER BY pair,ydate
13:21:40  51  /

Table created.

Elapsed: 00:00:05.45
13:21:46 SQL> 
13:21:46 SQL> -- rpt
13:21:46 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
13:21:46   2  GROUP BY pair,trend,gatt,gattn
13:21:46   3  ORDER BY pair,trend,gatt,gattn
13:21:46   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_chf 	-1 nup nup .000037916	    4839
usd_chf 	-1 nup up  -.00496911	    3109
usd_chf 	-1 up  nup  .00520434	    2667
usd_chf 	-1			       0
usd_chf 	 1 nup nup -.00001062	    4682
usd_chf 	 1 nup up  -.00455237	    2847
usd_chf 	 1 up  nup  .00470652	    2149

7 rows selected.

Elapsed: 00:00:00.03
13:21:46 SQL> 
13:21:46 SQL> -- rpt
13:21:46 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_chf 2010-12-22 13:20:00

Elapsed: 00:00:00.02
13:21:46 SQL> 
13:21:46 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.20
13:21:46 SQL> CREATE TABLE modsrc COMPRESS AS
13:21:46   2  SELECT
13:21:46   3  pair
13:21:46   4  ,ydate
13:21:46   5  ,prdate
13:21:46   6  ,trend
13:21:46   7  ,g8
13:21:46   8  ,gatt
13:21:46   9  ,gattn
13:21:46  10  FROM q15
13:21:46  11  /

Table created.

Elapsed: 00:00:00.10
13:21:46 SQL> 
13:21:46 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
13:21:46 SQL> 
13:21:46 SQL> -- rpt
13:21:46 SQL> 
13:21:46 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20773

Elapsed: 00:00:00.34
13:21:47 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20389

Elapsed: 00:00:00.00
13:21:47 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20389

Elapsed: 00:00:00.01
13:21:47 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20389

Elapsed: 00:00:00.00
13:21:47 SQL> 
13:21:47 SQL> DROP   TABLE chf_ms10 ;

Table dropped.

Elapsed: 00:00:00.09
13:21:47 SQL> CREATE TABLE chf_ms10 COMPRESS AS
13:21:47   2  SELECT
13:21:47   3  ydate
13:21:47   4  ,trend chf_trend
13:21:47   5  ,g8    chf_g8
13:21:47   6  ,gatt  chf_gatt
13:21:47   7  ,gattn chf_gattn
13:21:47   8  FROM modsrc
13:21:47   9  /

Table created.

Elapsed: 00:00:00.10
13:21:47 SQL> 
13:21:47 SQL> ANALYZE TABLE chf_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
13:21:47 SQL> 
13:21:47 SQL> -- rpt
13:21:47 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-14 22:35:01 2010-12-22 02:15:00	 9678	 -.01775      .0155
	-1 2010-09-14 21:25:01 2010-12-22 13:20:00	10615	 -.01825     .01545

Elapsed: 00:00:00.02
13:21:47 SQL> SELECT chf_trend,MIN(ydate),MAX(ydate),COUNT(chf_trend),MIN(chf_g8),MAX(chf_g8)FROM chf_ms10 GROUP BY chf_trend;

 CHF_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(CHF_TREND) MIN(CHF_G8) MAX(CHF_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-14 22:35:01 2010-12-22 02:15:00	       9678	-.01775       .0155
	-1 2010-09-14 21:25:01 2010-12-22 13:20:00	      10711	-.01825      .01545

Elapsed: 00:00:00.01
13:21:47 SQL> 
13:21:47 SQL> -- I need a copy of q15 attributes
13:21:47 SQL> 
13:21:47 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.05
13:21:47 SQL> CREATE TABLE chf_att COMPRESS AS
13:21:47   2  SELECT
13:21:47   3  ydate
13:21:47   4  ,att00 chf_att00
13:21:47   5  ,att01 chf_att01
13:21:47   6  ,att02 chf_att02
13:21:47   7  ,att03 chf_att03
13:21:47   8  ,att04 chf_att04
13:21:47   9  ,att05 chf_att05
13:21:47  10  ,att06 chf_att06
13:21:47  11  ,att07 chf_att07
13:21:47  12  ,att08 chf_att08
13:21:47  13  ,att09 chf_att09
13:21:47  14  ,att10 chf_att10
13:21:47  15  ,att11 chf_att11
13:21:47  16  ,att12 chf_att12
13:21:47  17  ,att13 chf_att13
13:21:47  18  ,att14 chf_att14
13:21:47  19  ,att15 chf_att15
13:21:47  20  ,att16 chf_att16
13:21:47  21  ,att17 chf_att17
13:21:47  22  ,att18 chf_att18
13:21:47  23  ,att19 chf_att19
13:21:47  24  ,att20 chf_att20
13:21:47  25  ,att21 chf_att21
13:21:47  26  ,att22 chf_att22
13:21:47  27  ,att23 chf_att23
13:21:47  28  ,att24 chf_att24
13:21:47  29  ,att25 chf_att25
13:21:47  30  ,att26 chf_att26
13:21:47  31  ,att27 chf_att27
13:21:47  32  ,att28 chf_att28
13:21:47  33  ,att29 chf_att29
13:21:47  34  ,att30 chf_att30
13:21:47  35  ,att31 chf_att31
13:21:47  36  ,att32 chf_att32
13:21:47  37  ,att33 chf_att33
13:21:47  38  ,att34 chf_att34
13:21:47  39  ,att35 chf_att35
13:21:47  40  ,att36 chf_att36
13:21:47  41  FROM q15
13:21:47  42  /

Table created.

Elapsed: 00:00:00.19
13:21:47 SQL> 
13:21:47 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
13:21:48 SQL> 
13:21:48 SQL> -- rpt
13:21:48 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     20389

Elapsed: 00:00:00.00
13:21:48 SQL> 
13:21:48 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
