
SQL*Plus: Release 11.2.0.1.0 Production on Fri Dec 24 09:56:10 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

09:56:10 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.01
09:56:10 SQL> 09:56:10 SQL> --
09:56:10 SQL> -- eur10.sql
09:56:10 SQL> --
09:56:10 SQL> 
09:56:10 SQL> -- Creates views and tables for backtesting a forex SVM strategy
09:56:10 SQL> 
09:56:10 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.00
09:56:10 SQL> 
09:56:10 SQL> -- I created di5min here:
09:56:10 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
09:56:10 SQL> 
09:56:10 SQL> CREATE OR REPLACE VIEW q11 AS
09:56:10   2  SELECT
09:56:10   3  pair
09:56:10   4  ,ydate
09:56:10   5  ,prdate
09:56:10   6  ,rownum rnum -- acts as t in my time-series
09:56:10   7  ,clse
09:56:10   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
09:56:10   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
09:56:10  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
09:56:10  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
09:56:10  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
09:56:10  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
09:56:10  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
09:56:10  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
09:56:10  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
09:56:10  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
09:56:10  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
09:56:10  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
09:56:10  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
09:56:10  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
09:56:10  22  FROM di5min WHERE pair LIKE'%eur%'
09:56:10  23  ORDER BY ydate
09:56:10  24  /

View created.

Elapsed: 00:00:00.07
09:56:10 SQL> 
09:56:10 SQL> -- rpt
09:56:10 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
eur_usd        20742

Elapsed: 00:00:00.36
09:56:11 SQL> 
09:56:11 SQL> -- Calc deltas and gains
09:56:11 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.05
09:56:11 SQL> 
09:56:11 SQL> CREATE TABLE q13 COMPRESS AS
09:56:11   2  SELECT
09:56:11   3  pair
09:56:11   4  ,ydate
09:56:11   5  ,prdate
09:56:11   6  ,rnum
09:56:11   7  ,ld8
09:56:11   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
09:56:11   9  -- step by 2
09:56:11  10  ,clse-lg6  d06
09:56:11  11  ,lg6 -lg8  d68
09:56:11  12  ,lg8 -lg10 d810
09:56:11  13  ,lg10-lg12 d1012
09:56:11  14  ,lg12-lg14 d1214
09:56:11  15  ,lg14-lg16 d1416
09:56:11  16  ,lg16-lg18 d1618
09:56:11  17  -- step by 4
09:56:11  18  ,lg6 -lg10 d610
09:56:11  19  ,lg8 -lg12 d812
09:56:11  20  ,lg10-lg14 d1014
09:56:11  21  ,lg12-lg16 d1216
09:56:11  22  --
09:56:11  23  ,ABS(clse-lg6 )dc6
09:56:11  24  ,ABS(clse-lg8 )dc8
09:56:11  25  ,ABS(clse-lg10)dc10
09:56:11  26  ,ABS(clse-lg12)dc12
09:56:11  27  ,ABS(clse-lg14)dc14
09:56:11  28  ,ABS(clse-lg16)dc16
09:56:11  29  ,ABS(clse-lg18)dc18
09:56:11  30  ,ABS(clse-lg20)dc20
09:56:11  31  ,ABS(clse-lg22)dc22
09:56:11  32  ,(ld8-clse) ug8
09:56:11  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
09:56:11  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
09:56:11  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
09:56:11  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
09:56:11  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
09:56:11  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
09:56:11  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
09:56:11  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
09:56:11  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
09:56:11  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
09:56:11  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
09:56:11  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
09:56:11  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
09:56:11  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
09:56:11  47  ,0+TO_CHAR(ydate,'D')d
09:56:11  48  ,0+TO_CHAR(ydate,'W')w
09:56:11  49  -- mpm stands for minutes-past-midnight:
09:56:11  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
09:56:11  51  FROM q11
09:56:11  52  -- I dont want any NULL values from the LAG() functions:
09:56:11  53  WHERE lg32 > 0
09:56:11  54  ORDER BY pair,ydate
09:56:11  55  /

Table created.

Elapsed: 00:00:02.02
09:56:13 SQL> 
09:56:13 SQL> -- rpt
09:56:13 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	   10122
	-1	   10236

Elapsed: 00:00:00.03
09:56:13 SQL> 
09:56:13 SQL> -- Calc gains and ntiles
09:56:13 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.20
09:56:13 SQL> CREATE TABLE q15 COMPRESS AS
09:56:13   2  SELECT
09:56:13   3  pair
09:56:13   4  ,ydate
09:56:13   5  ,prdate -- Should be unique
09:56:13   6  ,trend -- +1 or -1
09:56:13   7  -- Use NTILE() to derive some attributes
09:56:13   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
09:56:13   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
09:56:13  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
09:56:13  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
09:56:13  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
09:56:13  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
09:56:13  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
09:56:13  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
09:56:13  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
09:56:13  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
09:56:13  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
09:56:13  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
09:56:13  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
09:56:13  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
09:56:13  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
09:56:13  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
09:56:13  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
09:56:13  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
09:56:13  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
09:56:13  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
09:56:13  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
09:56:13  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
09:56:13  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
09:56:13  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
09:56:13  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
09:56:13  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
09:56:13  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
09:56:13  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
09:56:13  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
09:56:13  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
09:56:13  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
09:56:13  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
09:56:13  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
09:56:13  41  ,hh    att32
09:56:13  42  ,d     att33
09:56:13  43  ,w     att34
09:56:13  44  ,mpm   att35
09:56:13  45  ,trend att36
09:56:13  46  ,ug8 g8
09:56:13  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
09:56:13  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
09:56:13  49  FROM q13
09:56:13  50  ORDER BY pair,ydate
09:56:13  51  /

Table created.

Elapsed: 00:00:05.48
09:56:19 SQL> 
09:56:19 SQL> -- rpt
09:56:19 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
09:56:19   2  GROUP BY pair,trend,gatt,gattn
09:56:19   3  ORDER BY pair,trend,gatt,gattn
09:56:19   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
eur_usd 	-1 nup nup .000026268	    3016
eur_usd 	-1 nup up  -.00602802	    3651
eur_usd 	-1 up  nup .005755672	    3566
eur_usd 	-1			       0
eur_usd 	 1 nup nup  -.0000635	    2943
eur_usd 	 1 nup up  -.00626446	    3461
eur_usd 	 1 up  nup .006564552	    3625
eur_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
09:56:19 SQL> 
09:56:19 SQL> -- rpt
09:56:19 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
eur_usd 2010-12-24 09:50:00

Elapsed: 00:00:00.02
09:56:19 SQL> 
09:56:19 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.25
09:56:19 SQL> CREATE TABLE modsrc COMPRESS AS
09:56:19   2  SELECT
09:56:19   3  pair
09:56:19   4  ,ydate
09:56:19   5  ,prdate
09:56:19   6  ,trend
09:56:19   7  ,g8
09:56:19   8  ,gatt
09:56:19   9  ,gattn
09:56:19  10  FROM q15
09:56:19  11  /

Table created.

Elapsed: 00:00:00.08
09:56:19 SQL> 
09:56:19 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
09:56:19 SQL> 
09:56:19 SQL> -- rpt
09:56:19 SQL> 
09:56:19 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20742

Elapsed: 00:00:00.35
09:56:20 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.00
09:56:20 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.01
09:56:20 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.01
09:56:20 SQL> 
09:56:20 SQL> DROP   TABLE eur_ms10 ;

Table dropped.

Elapsed: 00:00:00.03
09:56:20 SQL> CREATE TABLE eur_ms10 COMPRESS AS
09:56:20   2  SELECT
09:56:20   3  ydate
09:56:20   4  ,trend eur_trend
09:56:20   5  ,g8    eur_g8
09:56:20   6  ,gatt  eur_gatt
09:56:20   7  ,gattn eur_gattn
09:56:20   8  FROM modsrc
09:56:20   9  /

Table created.

Elapsed: 00:00:00.08
09:56:20 SQL> 
09:56:20 SQL> ANALYZE TABLE eur_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
09:56:20 SQL> 
09:56:20 SQL> -- rpt
09:56:20 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 18:00:01 2010-12-24 09:35:00	10029	  -.0218     .02165
	-1 2010-09-16 18:35:01 2010-12-24 09:50:00	10233	 -.02085      .0196

Elapsed: 00:00:00.02
09:56:20 SQL> SELECT eur_trend,MIN(ydate),MAX(ydate),COUNT(eur_trend),MIN(eur_g8),MAX(eur_g8)FROM eur_ms10 GROUP BY eur_trend;

 EUR_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(EUR_TREND) MIN(EUR_G8) MAX(EUR_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 18:00:01 2010-12-24 09:35:00	      10122	 -.0218      .02165
	-1 2010-09-16 18:35:01 2010-12-24 09:50:00	      10236	-.02085       .0196

Elapsed: 00:00:00.01
09:56:20 SQL> 
09:56:20 SQL> -- I need a copy of q15 attributes
09:56:20 SQL> 
09:56:20 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.04
09:56:20 SQL> CREATE TABLE eur_att COMPRESS AS
09:56:20   2  SELECT
09:56:20   3  ydate
09:56:20   4  ,att00 eur_att00
09:56:20   5  ,att01 eur_att01
09:56:20   6  ,att02 eur_att02
09:56:20   7  ,att03 eur_att03
09:56:20   8  ,att04 eur_att04
09:56:20   9  ,att05 eur_att05
09:56:20  10  ,att06 eur_att06
09:56:20  11  ,att07 eur_att07
09:56:20  12  ,att08 eur_att08
09:56:20  13  ,att09 eur_att09
09:56:20  14  ,att10 eur_att10
09:56:20  15  ,att11 eur_att11
09:56:20  16  ,att12 eur_att12
09:56:20  17  ,att13 eur_att13
09:56:20  18  ,att14 eur_att14
09:56:20  19  ,att15 eur_att15
09:56:20  20  ,att16 eur_att16
09:56:20  21  ,att17 eur_att17
09:56:20  22  ,att18 eur_att18
09:56:20  23  ,att19 eur_att19
09:56:20  24  ,att20 eur_att20
09:56:20  25  ,att21 eur_att21
09:56:20  26  ,att22 eur_att22
09:56:20  27  ,att23 eur_att23
09:56:20  28  ,att24 eur_att24
09:56:20  29  ,att25 eur_att25
09:56:20  30  ,att26 eur_att26
09:56:20  31  ,att27 eur_att27
09:56:20  32  ,att28 eur_att28
09:56:20  33  ,att29 eur_att29
09:56:20  34  ,att30 eur_att30
09:56:20  35  ,att31 eur_att31
09:56:20  36  ,att32 eur_att32
09:56:20  37  ,att33 eur_att33
09:56:20  38  ,att34 eur_att34
09:56:20  39  ,att35 eur_att35
09:56:20  40  ,att36 eur_att36
09:56:20  41  FROM q15
09:56:20  42  /

Table created.

Elapsed: 00:00:00.18
09:56:20 SQL> 
09:56:20 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
09:56:21 SQL> 
09:56:21 SQL> -- rpt
09:56:21 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     20358

Elapsed: 00:00:00.00
09:56:21 SQL> 
09:56:21 SQL> --
09:56:21 SQL> -- aud10.sql
09:56:21 SQL> --
09:56:21 SQL> 
09:56:21 SQL> -- Creates views and tables for backtesting a forex SVM strategy
09:56:21 SQL> 
09:56:21 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.17
09:56:21 SQL> 
09:56:21 SQL> -- I created di5min here:
09:56:21 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
09:56:21 SQL> 
09:56:21 SQL> CREATE OR REPLACE VIEW q11 AS
09:56:21   2  SELECT
09:56:21   3  pair
09:56:21   4  ,ydate
09:56:21   5  ,prdate
09:56:21   6  ,rownum rnum -- acts as t in my time-series
09:56:21   7  ,clse
09:56:21   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
09:56:21   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
09:56:21  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
09:56:21  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
09:56:21  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
09:56:21  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
09:56:21  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
09:56:21  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
09:56:21  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
09:56:21  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
09:56:21  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
09:56:21  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
09:56:21  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
09:56:21  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
09:56:21  22  FROM di5min WHERE pair LIKE'%aud%'
09:56:21  23  ORDER BY ydate
09:56:21  24  /

View created.

Elapsed: 00:00:00.05
09:56:21 SQL> 
09:56:21 SQL> -- rpt
09:56:21 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
aud_usd        20739

Elapsed: 00:00:00.35
09:56:21 SQL> 
09:56:21 SQL> -- Calc deltas and gains
09:56:21 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.24
09:56:21 SQL> 
09:56:21 SQL> CREATE TABLE q13 COMPRESS AS
09:56:21   2  SELECT
09:56:21   3  pair
09:56:21   4  ,ydate
09:56:21   5  ,prdate
09:56:21   6  ,rnum
09:56:21   7  ,ld8
09:56:21   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
09:56:21   9  -- step by 2
09:56:21  10  ,clse-lg6  d06
09:56:21  11  ,lg6 -lg8  d68
09:56:21  12  ,lg8 -lg10 d810
09:56:21  13  ,lg10-lg12 d1012
09:56:21  14  ,lg12-lg14 d1214
09:56:21  15  ,lg14-lg16 d1416
09:56:21  16  ,lg16-lg18 d1618
09:56:21  17  -- step by 4
09:56:21  18  ,lg6 -lg10 d610
09:56:21  19  ,lg8 -lg12 d812
09:56:21  20  ,lg10-lg14 d1014
09:56:21  21  ,lg12-lg16 d1216
09:56:21  22  --
09:56:21  23  ,ABS(clse-lg6 )dc6
09:56:21  24  ,ABS(clse-lg8 )dc8
09:56:21  25  ,ABS(clse-lg10)dc10
09:56:21  26  ,ABS(clse-lg12)dc12
09:56:21  27  ,ABS(clse-lg14)dc14
09:56:21  28  ,ABS(clse-lg16)dc16
09:56:21  29  ,ABS(clse-lg18)dc18
09:56:21  30  ,ABS(clse-lg20)dc20
09:56:21  31  ,ABS(clse-lg22)dc22
09:56:21  32  ,(ld8-clse) ug8
09:56:21  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
09:56:21  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
09:56:21  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
09:56:21  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
09:56:21  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
09:56:21  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
09:56:21  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
09:56:21  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
09:56:21  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
09:56:21  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
09:56:21  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
09:56:21  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
09:56:21  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
09:56:21  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
09:56:21  47  ,0+TO_CHAR(ydate,'D')d
09:56:21  48  ,0+TO_CHAR(ydate,'W')w
09:56:21  49  -- mpm stands for minutes-past-midnight:
09:56:21  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
09:56:21  51  FROM q11
09:56:21  52  -- I dont want any NULL values from the LAG() functions:
09:56:21  53  WHERE lg32 > 0
09:56:21  54  ORDER BY pair,ydate
09:56:21  55  /

Table created.

Elapsed: 00:00:01.82
09:56:23 SQL> 
09:56:23 SQL> -- rpt
09:56:23 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	   10838
	-1	    9517

Elapsed: 00:00:00.03
09:56:23 SQL> 
09:56:23 SQL> -- Calc gains and ntiles
09:56:23 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.13
09:56:23 SQL> CREATE TABLE q15 COMPRESS AS
09:56:23   2  SELECT
09:56:23   3  pair
09:56:23   4  ,ydate
09:56:23   5  ,prdate -- Should be unique
09:56:23   6  ,trend -- +1 or -1
09:56:23   7  -- Use NTILE() to derive some attributes
09:56:23   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
09:56:23   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
09:56:23  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
09:56:23  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
09:56:23  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
09:56:23  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
09:56:23  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
09:56:23  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
09:56:23  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
09:56:23  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
09:56:23  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
09:56:23  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
09:56:23  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
09:56:23  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
09:56:23  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
09:56:23  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
09:56:23  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
09:56:23  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
09:56:23  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
09:56:23  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
09:56:23  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
09:56:23  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
09:56:23  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
09:56:23  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
09:56:23  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
09:56:23  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
09:56:23  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
09:56:23  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
09:56:23  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
09:56:23  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
09:56:23  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
09:56:23  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
09:56:23  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
09:56:23  41  ,hh    att32
09:56:23  42  ,d     att33
09:56:23  43  ,w     att34
09:56:23  44  ,mpm   att35
09:56:23  45  ,trend att36
09:56:23  46  ,ug8 g8
09:56:23  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
09:56:23  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
09:56:23  49  FROM q13
09:56:23  50  ORDER BY pair,ydate
09:56:23  51  /

Table created.

Elapsed: 00:00:05.49
09:56:29 SQL> 
09:56:29 SQL> -- rpt
09:56:29 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
09:56:29   2  GROUP BY pair,trend,gatt,gattn
09:56:29   3  ORDER BY pair,trend,gatt,gattn
09:56:29   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
aud_usd 	-1 nup nup .000038659	    3559
aud_usd 	-1 nup up  -.00525835	    2519
aud_usd 	-1 up  nup .005184528	    3386
aud_usd 	-1			       0
aud_usd 	 1 nup nup .000028006	    4354
aud_usd 	 1 nup up  -.00500047	    3062
aud_usd 	 1 up  nup .005093811	    3379
aud_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
09:56:29 SQL> 
09:56:29 SQL> -- rpt
09:56:29 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
aud_usd 2010-12-24 09:50:00

Elapsed: 00:00:00.02
09:56:29 SQL> 
09:56:29 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
09:56:29 SQL> CREATE TABLE modsrc COMPRESS AS
09:56:29   2  SELECT
09:56:29   3  pair
09:56:29   4  ,ydate
09:56:29   5  ,prdate
09:56:29   6  ,trend
09:56:29   7  ,g8
09:56:29   8  ,gatt
09:56:29   9  ,gattn
09:56:29  10  FROM q15
09:56:29  11  /

Table created.

Elapsed: 00:00:00.09
09:56:29 SQL> 
09:56:29 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
09:56:29 SQL> 
09:56:29 SQL> -- rpt
09:56:29 SQL> 
09:56:29 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20739

Elapsed: 00:00:00.35
09:56:30 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20355

Elapsed: 00:00:00.00
09:56:30 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20355

Elapsed: 00:00:00.01
09:56:30 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20355

Elapsed: 00:00:00.00
09:56:30 SQL> 
09:56:30 SQL> DROP   TABLE aud_ms10 ;

Table dropped.

Elapsed: 00:00:00.21
09:56:30 SQL> CREATE TABLE aud_ms10 COMPRESS AS
09:56:30   2  SELECT
09:56:30   3  ydate
09:56:30   4  ,trend aud_trend
09:56:30   5  ,g8    aud_g8
09:56:30   6  ,gatt  aud_gatt
09:56:30   7  ,gattn aud_gattn
09:56:30   8  FROM modsrc
09:56:30   9  /

Table created.

Elapsed: 00:00:00.08
09:56:30 SQL> 
09:56:30 SQL> ANALYZE TABLE aud_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
09:56:30 SQL> 
09:56:30 SQL> -- rpt
09:56:30 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 19:30:01 2010-12-24 09:50:00	10795	  -.0203      .0136
	-1 2010-09-16 18:00:01 2010-12-24 08:00:00	 9464	  -.0196      .0148

Elapsed: 00:00:00.02
09:56:30 SQL> SELECT aud_trend,MIN(ydate),MAX(ydate),COUNT(aud_trend),MIN(aud_g8),MAX(aud_g8)FROM aud_ms10 GROUP BY aud_trend;

 AUD_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(AUD_TREND) MIN(AUD_G8) MAX(AUD_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 19:30:01 2010-12-24 09:50:00	      10838	 -.0203       .0136
	-1 2010-09-16 18:00:01 2010-12-24 08:00:00	       9517	 -.0196       .0148

Elapsed: 00:00:00.01
09:56:30 SQL> 
09:56:30 SQL> -- I need a copy of q15 attributes
09:56:30 SQL> 
09:56:30 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.04
09:56:30 SQL> CREATE TABLE aud_att COMPRESS AS
09:56:30   2  SELECT
09:56:30   3  ydate
09:56:30   4  ,att00 aud_att00
09:56:30   5  ,att01 aud_att01
09:56:30   6  ,att02 aud_att02
09:56:30   7  ,att03 aud_att03
09:56:30   8  ,att04 aud_att04
09:56:30   9  ,att05 aud_att05
09:56:30  10  ,att06 aud_att06
09:56:30  11  ,att07 aud_att07
09:56:30  12  ,att08 aud_att08
09:56:30  13  ,att09 aud_att09
09:56:30  14  ,att10 aud_att10
09:56:30  15  ,att11 aud_att11
09:56:30  16  ,att12 aud_att12
09:56:30  17  ,att13 aud_att13
09:56:30  18  ,att14 aud_att14
09:56:30  19  ,att15 aud_att15
09:56:30  20  ,att16 aud_att16
09:56:30  21  ,att17 aud_att17
09:56:30  22  ,att18 aud_att18
09:56:30  23  ,att19 aud_att19
09:56:30  24  ,att20 aud_att20
09:56:30  25  ,att21 aud_att21
09:56:30  26  ,att22 aud_att22
09:56:30  27  ,att23 aud_att23
09:56:30  28  ,att24 aud_att24
09:56:30  29  ,att25 aud_att25
09:56:30  30  ,att26 aud_att26
09:56:30  31  ,att27 aud_att27
09:56:30  32  ,att28 aud_att28
09:56:30  33  ,att29 aud_att29
09:56:30  34  ,att30 aud_att30
09:56:30  35  ,att31 aud_att31
09:56:30  36  ,att32 aud_att32
09:56:30  37  ,att33 aud_att33
09:56:30  38  ,att34 aud_att34
09:56:30  39  ,att35 aud_att35
09:56:30  40  ,att36 aud_att36
09:56:30  41  FROM q15
09:56:30  42  /

Table created.

Elapsed: 00:00:00.15
09:56:30 SQL> 
09:56:30 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
09:56:31 SQL> 
09:56:31 SQL> -- rpt
09:56:31 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     20355

Elapsed: 00:00:00.00
09:56:31 SQL> 
09:56:31 SQL> --
09:56:31 SQL> -- gbp10.sql
09:56:31 SQL> --
09:56:31 SQL> 
09:56:31 SQL> -- Creates views and tables for backtesting a forex SVM strategy
09:56:31 SQL> 
09:56:31 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.35
09:56:31 SQL> 
09:56:31 SQL> -- I created di5min here:
09:56:31 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
09:56:31 SQL> 
09:56:31 SQL> CREATE OR REPLACE VIEW q11 AS
09:56:31   2  SELECT
09:56:31   3  pair
09:56:31   4  ,ydate
09:56:31   5  ,prdate
09:56:31   6  ,rownum rnum -- acts as t in my time-series
09:56:31   7  ,clse
09:56:31   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
09:56:31   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
09:56:31  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
09:56:31  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
09:56:31  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
09:56:31  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
09:56:31  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
09:56:31  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
09:56:31  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
09:56:31  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
09:56:31  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
09:56:31  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
09:56:31  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
09:56:31  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
09:56:31  22  FROM di5min WHERE pair LIKE'%gbp%'
09:56:31  23  ORDER BY ydate
09:56:31  24  /

View created.

Elapsed: 00:00:00.04
09:56:31 SQL> 
09:56:31 SQL> -- rpt
09:56:31 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
gbp_usd        20741

Elapsed: 00:00:00.34
09:56:32 SQL> 
09:56:32 SQL> -- Calc deltas and gains
09:56:32 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.19
09:56:32 SQL> 
09:56:32 SQL> CREATE TABLE q13 COMPRESS AS
09:56:32   2  SELECT
09:56:32   3  pair
09:56:32   4  ,ydate
09:56:32   5  ,prdate
09:56:32   6  ,rnum
09:56:32   7  ,ld8
09:56:32   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
09:56:32   9  -- step by 2
09:56:32  10  ,clse-lg6  d06
09:56:32  11  ,lg6 -lg8  d68
09:56:32  12  ,lg8 -lg10 d810
09:56:32  13  ,lg10-lg12 d1012
09:56:32  14  ,lg12-lg14 d1214
09:56:32  15  ,lg14-lg16 d1416
09:56:32  16  ,lg16-lg18 d1618
09:56:32  17  -- step by 4
09:56:32  18  ,lg6 -lg10 d610
09:56:32  19  ,lg8 -lg12 d812
09:56:32  20  ,lg10-lg14 d1014
09:56:32  21  ,lg12-lg16 d1216
09:56:32  22  --
09:56:32  23  ,ABS(clse-lg6 )dc6
09:56:32  24  ,ABS(clse-lg8 )dc8
09:56:32  25  ,ABS(clse-lg10)dc10
09:56:32  26  ,ABS(clse-lg12)dc12
09:56:32  27  ,ABS(clse-lg14)dc14
09:56:32  28  ,ABS(clse-lg16)dc16
09:56:32  29  ,ABS(clse-lg18)dc18
09:56:32  30  ,ABS(clse-lg20)dc20
09:56:32  31  ,ABS(clse-lg22)dc22
09:56:32  32  ,(ld8-clse) ug8
09:56:32  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
09:56:32  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
09:56:32  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
09:56:32  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
09:56:32  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
09:56:32  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
09:56:32  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
09:56:32  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
09:56:32  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
09:56:32  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
09:56:32  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
09:56:32  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
09:56:32  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
09:56:32  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
09:56:32  47  ,0+TO_CHAR(ydate,'D')d
09:56:32  48  ,0+TO_CHAR(ydate,'W')w
09:56:32  49  -- mpm stands for minutes-past-midnight:
09:56:32  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
09:56:32  51  FROM q11
09:56:32  52  -- I dont want any NULL values from the LAG() functions:
09:56:32  53  WHERE lg32 > 0
09:56:32  54  ORDER BY pair,ydate
09:56:32  55  /

Table created.

Elapsed: 00:00:01.70
09:56:33 SQL> 
09:56:33 SQL> -- rpt
09:56:33 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9986
	-1	   10371

Elapsed: 00:00:00.03
09:56:33 SQL> 
09:56:33 SQL> -- Calc gains and ntiles
09:56:33 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.33
09:56:34 SQL> CREATE TABLE q15 COMPRESS AS
09:56:34   2  SELECT
09:56:34   3  pair
09:56:34   4  ,ydate
09:56:34   5  ,prdate -- Should be unique
09:56:34   6  ,trend -- +1 or -1
09:56:34   7  -- Use NTILE() to derive some attributes
09:56:34   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
09:56:34   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
09:56:34  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
09:56:34  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
09:56:34  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
09:56:34  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
09:56:34  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
09:56:34  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
09:56:34  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
09:56:34  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
09:56:34  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
09:56:34  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
09:56:34  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
09:56:34  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
09:56:34  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
09:56:34  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
09:56:34  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
09:56:34  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
09:56:34  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
09:56:34  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
09:56:34  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
09:56:34  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
09:56:34  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
09:56:34  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
09:56:34  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
09:56:34  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
09:56:34  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
09:56:34  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
09:56:34  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
09:56:34  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
09:56:34  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
09:56:34  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
09:56:34  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
09:56:34  41  ,hh    att32
09:56:34  42  ,d     att33
09:56:34  43  ,w     att34
09:56:34  44  ,mpm   att35
09:56:34  45  ,trend att36
09:56:34  46  ,ug8 g8
09:56:34  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
09:56:34  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
09:56:34  49  FROM q13
09:56:34  50  ORDER BY pair,ydate
09:56:34  51  /

Table created.

Elapsed: 00:00:05.40
09:56:39 SQL> 
09:56:39 SQL> -- rpt
09:56:39 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
09:56:39   2  GROUP BY pair,trend,gatt,gattn
09:56:39   3  ORDER BY pair,trend,gatt,gattn
09:56:39   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
gbp_usd 	-1 nup nup .000094428	    3832
gbp_usd 	-1 nup up   -.0059004	    3270
gbp_usd 	-1 up  nup .005468704	    3260
gbp_usd 	-1			       0
gbp_usd 	 1 nup nup -.00007192	    3630
gbp_usd 	 1 nup up  -.00555039	    3268
gbp_usd 	 1 up  nup .005948134	    3001
gbp_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
09:56:39 SQL> 
09:56:39 SQL> -- rpt
09:56:39 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
gbp_usd 2010-12-24 09:50:00

Elapsed: 00:00:00.01
09:56:39 SQL> 
09:56:39 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
09:56:39 SQL> CREATE TABLE modsrc COMPRESS AS
09:56:39   2  SELECT
09:56:39   3  pair
09:56:39   4  ,ydate
09:56:39   5  ,prdate
09:56:39   6  ,trend
09:56:39   7  ,g8
09:56:39   8  ,gatt
09:56:39   9  ,gattn
09:56:39  10  FROM q15
09:56:39  11  /

Table created.

Elapsed: 00:00:00.08
09:56:39 SQL> 
09:56:39 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
09:56:40 SQL> 
09:56:40 SQL> -- rpt
09:56:40 SQL> 
09:56:40 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20741

Elapsed: 00:00:00.33
09:56:40 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20357

Elapsed: 00:00:00.01
09:56:40 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20357

Elapsed: 00:00:00.00
09:56:40 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20357

Elapsed: 00:00:00.01
09:56:40 SQL> 
09:56:40 SQL> DROP   TABLE gbp_ms10 ;

Table dropped.

Elapsed: 00:00:00.04
09:56:40 SQL> CREATE TABLE gbp_ms10 COMPRESS AS
09:56:40   2  SELECT
09:56:40   3  ydate
09:56:40   4  ,trend gbp_trend
09:56:40   5  ,g8    gbp_g8
09:56:40   6  ,gatt  gbp_gatt
09:56:40   7  ,gattn gbp_gattn
09:56:40   8  FROM modsrc
09:56:40   9  /

Table created.

Elapsed: 00:00:00.06
09:56:40 SQL> 
09:56:40 SQL> ANALYZE TABLE gbp_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
09:56:40 SQL> 
09:56:40 SQL> -- rpt
09:56:40 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 18:00:01 2010-12-24 09:40:00	 9899	  -.0231       .019
	-1 2010-09-16 22:20:01 2010-12-24 09:50:00	10362	    -.02      .0204

Elapsed: 00:00:00.02
09:56:40 SQL> SELECT gbp_trend,MIN(ydate),MAX(ydate),COUNT(gbp_trend),MIN(gbp_g8),MAX(gbp_g8)FROM gbp_ms10 GROUP BY gbp_trend;

 GBP_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(GBP_TREND) MIN(GBP_G8) MAX(GBP_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 18:00:01 2010-12-24 09:40:00	       9986	 -.0231        .019
	-1 2010-09-16 22:20:01 2010-12-24 09:50:00	      10371	   -.02       .0204

Elapsed: 00:00:00.01
09:56:40 SQL> 
09:56:40 SQL> -- I need a copy of q15 attributes
09:56:40 SQL> 
09:56:40 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.05
09:56:40 SQL> CREATE TABLE gbp_att COMPRESS AS
09:56:40   2  SELECT
09:56:40   3  ydate
09:56:40   4  ,att00 gbp_att00
09:56:40   5  ,att01 gbp_att01
09:56:40   6  ,att02 gbp_att02
09:56:40   7  ,att03 gbp_att03
09:56:40   8  ,att04 gbp_att04
09:56:40   9  ,att05 gbp_att05
09:56:40  10  ,att06 gbp_att06
09:56:40  11  ,att07 gbp_att07
09:56:40  12  ,att08 gbp_att08
09:56:40  13  ,att09 gbp_att09
09:56:40  14  ,att10 gbp_att10
09:56:40  15  ,att11 gbp_att11
09:56:40  16  ,att12 gbp_att12
09:56:40  17  ,att13 gbp_att13
09:56:40  18  ,att14 gbp_att14
09:56:40  19  ,att15 gbp_att15
09:56:40  20  ,att16 gbp_att16
09:56:40  21  ,att17 gbp_att17
09:56:40  22  ,att18 gbp_att18
09:56:40  23  ,att19 gbp_att19
09:56:40  24  ,att20 gbp_att20
09:56:40  25  ,att21 gbp_att21
09:56:40  26  ,att22 gbp_att22
09:56:40  27  ,att23 gbp_att23
09:56:40  28  ,att24 gbp_att24
09:56:40  29  ,att25 gbp_att25
09:56:40  30  ,att26 gbp_att26
09:56:40  31  ,att27 gbp_att27
09:56:40  32  ,att28 gbp_att28
09:56:40  33  ,att29 gbp_att29
09:56:40  34  ,att30 gbp_att30
09:56:40  35  ,att31 gbp_att31
09:56:40  36  ,att32 gbp_att32
09:56:40  37  ,att33 gbp_att33
09:56:40  38  ,att34 gbp_att34
09:56:40  39  ,att35 gbp_att35
09:56:40  40  ,att36 gbp_att36
09:56:40  41  FROM q15
09:56:40  42  /

Table created.

Elapsed: 00:00:00.17
09:56:41 SQL> 
09:56:41 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
09:56:41 SQL> 
09:56:41 SQL> -- rpt
09:56:41 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     20357

Elapsed: 00:00:00.01
09:56:41 SQL> 
09:56:41 SQL> --
09:56:41 SQL> -- jpy10.sql
09:56:41 SQL> --
09:56:41 SQL> 
09:56:41 SQL> -- Creates views and tables for backtesting a forex SVM strategy
09:56:41 SQL> 
09:56:41 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.35
09:56:41 SQL> 
09:56:41 SQL> -- I created di5min here:
09:56:41 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
09:56:41 SQL> 
09:56:41 SQL> CREATE OR REPLACE VIEW q11 AS
09:56:41   2  SELECT
09:56:41   3  pair
09:56:41   4  ,ydate
09:56:41   5  ,prdate
09:56:41   6  ,rownum rnum -- acts as t in my time-series
09:56:41   7  ,clse
09:56:41   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
09:56:41   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
09:56:41  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
09:56:41  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
09:56:41  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
09:56:41  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
09:56:41  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
09:56:41  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
09:56:41  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
09:56:41  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
09:56:41  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
09:56:41  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
09:56:41  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
09:56:41  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
09:56:41  22  FROM di5min WHERE pair LIKE'%jpy%'
09:56:41  23  ORDER BY ydate
09:56:41  24  /

View created.

Elapsed: 00:00:00.05
09:56:41 SQL> 
09:56:41 SQL> -- rpt
09:56:41 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_jpy        20741

Elapsed: 00:00:00.35
09:56:42 SQL> 
09:56:42 SQL> -- Calc deltas and gains
09:56:42 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.24
09:56:42 SQL> 
09:56:42 SQL> CREATE TABLE q13 COMPRESS AS
09:56:42   2  SELECT
09:56:42   3  pair
09:56:42   4  ,ydate
09:56:42   5  ,prdate
09:56:42   6  ,rnum
09:56:42   7  ,ld8
09:56:42   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
09:56:42   9  -- step by 2
09:56:42  10  ,clse-lg6  d06
09:56:42  11  ,lg6 -lg8  d68
09:56:42  12  ,lg8 -lg10 d810
09:56:42  13  ,lg10-lg12 d1012
09:56:42  14  ,lg12-lg14 d1214
09:56:42  15  ,lg14-lg16 d1416
09:56:42  16  ,lg16-lg18 d1618
09:56:42  17  -- step by 4
09:56:42  18  ,lg6 -lg10 d610
09:56:42  19  ,lg8 -lg12 d812
09:56:42  20  ,lg10-lg14 d1014
09:56:42  21  ,lg12-lg16 d1216
09:56:42  22  --
09:56:42  23  ,ABS(clse-lg6 )dc6
09:56:42  24  ,ABS(clse-lg8 )dc8
09:56:42  25  ,ABS(clse-lg10)dc10
09:56:42  26  ,ABS(clse-lg12)dc12
09:56:42  27  ,ABS(clse-lg14)dc14
09:56:42  28  ,ABS(clse-lg16)dc16
09:56:42  29  ,ABS(clse-lg18)dc18
09:56:42  30  ,ABS(clse-lg20)dc20
09:56:42  31  ,ABS(clse-lg22)dc22
09:56:42  32  ,(ld8-clse) ug8
09:56:42  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
09:56:42  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
09:56:42  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
09:56:42  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
09:56:42  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
09:56:42  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
09:56:42  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
09:56:42  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
09:56:42  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
09:56:42  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
09:56:42  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
09:56:42  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
09:56:42  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
09:56:42  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
09:56:42  47  ,0+TO_CHAR(ydate,'D')d
09:56:42  48  ,0+TO_CHAR(ydate,'W')w
09:56:42  49  -- mpm stands for minutes-past-midnight:
09:56:42  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
09:56:42  51  FROM q11
09:56:42  52  -- I dont want any NULL values from the LAG() functions:
09:56:42  53  WHERE lg32 > 0
09:56:42  54  ORDER BY pair,ydate
09:56:42  55  /

Table created.

Elapsed: 00:00:01.67
09:56:44 SQL> 
09:56:44 SQL> -- rpt
09:56:44 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9382
	-1	   10975

Elapsed: 00:00:00.03
09:56:44 SQL> 
09:56:44 SQL> -- Calc gains and ntiles
09:56:44 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.12
09:56:44 SQL> CREATE TABLE q15 COMPRESS AS
09:56:44   2  SELECT
09:56:44   3  pair
09:56:44   4  ,ydate
09:56:44   5  ,prdate -- Should be unique
09:56:44   6  ,trend -- +1 or -1
09:56:44   7  -- Use NTILE() to derive some attributes
09:56:44   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
09:56:44   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
09:56:44  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
09:56:44  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
09:56:44  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
09:56:44  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
09:56:44  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
09:56:44  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
09:56:44  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
09:56:44  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
09:56:44  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
09:56:44  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
09:56:44  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
09:56:44  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
09:56:44  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
09:56:44  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
09:56:44  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
09:56:44  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
09:56:44  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
09:56:44  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
09:56:44  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
09:56:44  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
09:56:44  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
09:56:44  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
09:56:44  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
09:56:44  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
09:56:44  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
09:56:44  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
09:56:44  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
09:56:44  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
09:56:44  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
09:56:44  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
09:56:44  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
09:56:44  41  ,hh    att32
09:56:44  42  ,d     att33
09:56:44  43  ,w     att34
09:56:44  44  ,mpm   att35
09:56:44  45  ,trend att36
09:56:44  46  ,ug8 g8
09:56:44  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
09:56:44  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
09:56:44  49  FROM q13
09:56:44  50  ORDER BY pair,ydate
09:56:44  51  /

Table created.

Elapsed: 00:00:05.48
09:56:49 SQL> 
09:56:49 SQL> -- rpt
09:56:49 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
09:56:49   2  GROUP BY pair,trend,gatt,gattn
09:56:49   3  ORDER BY pair,trend,gatt,gattn
09:56:49   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_jpy 	-1 nup nup 7.2661E-09	     168
usd_jpy 	-1 nup up  -.18409514	    5534
usd_jpy 	-1 up  nup .179597976	    5232
usd_jpy 	-1			       0
usd_jpy 	 1 nup nup	    0	     118
usd_jpy 	 1 nup up  -.18891706	    5148
usd_jpy 	 1 up  nup .192752313	    4061
usd_jpy 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
09:56:49 SQL> 
09:56:49 SQL> -- rpt
09:56:49 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_jpy 2010-12-24 09:55:00

Elapsed: 00:00:00.02
09:56:49 SQL> 
09:56:49 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.10
09:56:49 SQL> CREATE TABLE modsrc COMPRESS AS
09:56:49   2  SELECT
09:56:49   3  pair
09:56:49   4  ,ydate
09:56:49   5  ,prdate
09:56:49   6  ,trend
09:56:49   7  ,g8
09:56:49   8  ,gatt
09:56:49   9  ,gattn
09:56:49  10  FROM q15
09:56:49  11  /

Table created.

Elapsed: 00:00:00.09
09:56:50 SQL> 
09:56:50 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
09:56:50 SQL> 
09:56:50 SQL> -- rpt
09:56:50 SQL> 
09:56:50 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20741

Elapsed: 00:00:00.33
09:56:50 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20357

Elapsed: 00:00:00.01
09:56:50 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20357

Elapsed: 00:00:00.00
09:56:50 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20357

Elapsed: 00:00:00.01
09:56:50 SQL> 
09:56:50 SQL> DROP   TABLE jpy_ms10 ;

Table dropped.

Elapsed: 00:00:00.04
09:56:50 SQL> CREATE TABLE jpy_ms10 COMPRESS AS
09:56:50   2  SELECT
09:56:50   3  ydate
09:56:50   4  ,trend jpy_trend
09:56:50   5  ,g8    jpy_g8
09:56:50   6  ,gatt  jpy_gatt
09:56:50   7  ,gattn jpy_gattn
09:56:50   8  FROM modsrc
09:56:50   9  /

Table created.

Elapsed: 00:00:00.08
09:56:50 SQL> 
09:56:50 SQL> ANALYZE TABLE jpy_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
09:56:50 SQL> 
09:56:50 SQL> -- rpt
09:56:50 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 18:00:01 2010-12-24 06:30:00	 9327	  -1.185	  1
	-1 2010-09-17 00:15:01 2010-12-24 09:55:00	10934	 -1.0575       1.32

Elapsed: 00:00:00.02
09:56:50 SQL> SELECT jpy_trend,MIN(ydate),MAX(ydate),COUNT(jpy_trend),MIN(jpy_g8),MAX(jpy_g8)FROM jpy_ms10 GROUP BY jpy_trend;

 JPY_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(JPY_TREND) MIN(JPY_G8) MAX(JPY_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 18:00:01 2010-12-24 06:30:00	       9382	 -1.185 	  1
	-1 2010-09-17 00:15:01 2010-12-24 09:55:00	      10975	-1.0575        1.32

Elapsed: 00:00:00.01
09:56:50 SQL> 
09:56:50 SQL> -- I need a copy of q15 attributes
09:56:50 SQL> 
09:56:50 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.04
09:56:50 SQL> CREATE TABLE jpy_att COMPRESS AS
09:56:50   2  SELECT
09:56:50   3  ydate
09:56:50   4  ,att00 jpy_att00
09:56:50   5  ,att01 jpy_att01
09:56:50   6  ,att02 jpy_att02
09:56:50   7  ,att03 jpy_att03
09:56:50   8  ,att04 jpy_att04
09:56:50   9  ,att05 jpy_att05
09:56:50  10  ,att06 jpy_att06
09:56:50  11  ,att07 jpy_att07
09:56:50  12  ,att08 jpy_att08
09:56:50  13  ,att09 jpy_att09
09:56:50  14  ,att10 jpy_att10
09:56:50  15  ,att11 jpy_att11
09:56:50  16  ,att12 jpy_att12
09:56:50  17  ,att13 jpy_att13
09:56:50  18  ,att14 jpy_att14
09:56:50  19  ,att15 jpy_att15
09:56:50  20  ,att16 jpy_att16
09:56:50  21  ,att17 jpy_att17
09:56:50  22  ,att18 jpy_att18
09:56:50  23  ,att19 jpy_att19
09:56:50  24  ,att20 jpy_att20
09:56:50  25  ,att21 jpy_att21
09:56:50  26  ,att22 jpy_att22
09:56:50  27  ,att23 jpy_att23
09:56:50  28  ,att24 jpy_att24
09:56:50  29  ,att25 jpy_att25
09:56:50  30  ,att26 jpy_att26
09:56:50  31  ,att27 jpy_att27
09:56:50  32  ,att28 jpy_att28
09:56:50  33  ,att29 jpy_att29
09:56:50  34  ,att30 jpy_att30
09:56:50  35  ,att31 jpy_att31
09:56:50  36  ,att32 jpy_att32
09:56:50  37  ,att33 jpy_att33
09:56:50  38  ,att34 jpy_att34
09:56:50  39  ,att35 jpy_att35
09:56:50  40  ,att36 jpy_att36
09:56:50  41  FROM q15
09:56:50  42  /

Table created.

Elapsed: 00:00:00.17
09:56:51 SQL> 
09:56:51 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
09:56:51 SQL> 
09:56:51 SQL> -- rpt
09:56:51 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     20357

Elapsed: 00:00:00.01
09:56:51 SQL> 
09:56:51 SQL> --
09:56:51 SQL> -- cad10.sql
09:56:51 SQL> --
09:56:51 SQL> 
09:56:51 SQL> -- Creates views and tables for backtesting a forex SVM strategy
09:56:51 SQL> 
09:56:51 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.32
09:56:51 SQL> 
09:56:51 SQL> -- I created di5min here:
09:56:51 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
09:56:51 SQL> 
09:56:51 SQL> CREATE OR REPLACE VIEW q11 AS
09:56:51   2  SELECT
09:56:51   3  pair
09:56:51   4  ,ydate
09:56:51   5  ,prdate
09:56:51   6  ,rownum rnum -- acts as t in my time-series
09:56:51   7  ,clse
09:56:51   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
09:56:51   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
09:56:51  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
09:56:51  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
09:56:51  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
09:56:51  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
09:56:51  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
09:56:51  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
09:56:51  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
09:56:51  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
09:56:51  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
09:56:51  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
09:56:51  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
09:56:51  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
09:56:51  22  FROM di5min WHERE pair LIKE'%cad%'
09:56:51  23  ORDER BY ydate
09:56:51  24  /

View created.

Elapsed: 00:00:00.05
09:56:51 SQL> 
09:56:51 SQL> -- rpt
09:56:51 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_cad        20738

Elapsed: 00:00:00.35
09:56:52 SQL> 
09:56:52 SQL> -- Calc deltas and gains
09:56:52 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.25
09:56:52 SQL> 
09:56:52 SQL> CREATE TABLE q13 COMPRESS AS
09:56:52   2  SELECT
09:56:52   3  pair
09:56:52   4  ,ydate
09:56:52   5  ,prdate
09:56:52   6  ,rnum
09:56:52   7  ,ld8
09:56:52   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
09:56:52   9  -- step by 2
09:56:52  10  ,clse-lg6  d06
09:56:52  11  ,lg6 -lg8  d68
09:56:52  12  ,lg8 -lg10 d810
09:56:52  13  ,lg10-lg12 d1012
09:56:52  14  ,lg12-lg14 d1214
09:56:52  15  ,lg14-lg16 d1416
09:56:52  16  ,lg16-lg18 d1618
09:56:52  17  -- step by 4
09:56:52  18  ,lg6 -lg10 d610
09:56:52  19  ,lg8 -lg12 d812
09:56:52  20  ,lg10-lg14 d1014
09:56:52  21  ,lg12-lg16 d1216
09:56:52  22  --
09:56:52  23  ,ABS(clse-lg6 )dc6
09:56:52  24  ,ABS(clse-lg8 )dc8
09:56:52  25  ,ABS(clse-lg10)dc10
09:56:52  26  ,ABS(clse-lg12)dc12
09:56:52  27  ,ABS(clse-lg14)dc14
09:56:52  28  ,ABS(clse-lg16)dc16
09:56:52  29  ,ABS(clse-lg18)dc18
09:56:52  30  ,ABS(clse-lg20)dc20
09:56:52  31  ,ABS(clse-lg22)dc22
09:56:52  32  ,(ld8-clse) ug8
09:56:52  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
09:56:52  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
09:56:52  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
09:56:52  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
09:56:52  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
09:56:52  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
09:56:52  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
09:56:52  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
09:56:52  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
09:56:52  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
09:56:52  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
09:56:52  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
09:56:52  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
09:56:52  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
09:56:52  47  ,0+TO_CHAR(ydate,'D')d
09:56:52  48  ,0+TO_CHAR(ydate,'W')w
09:56:52  49  -- mpm stands for minutes-past-midnight:
09:56:52  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
09:56:52  51  FROM q11
09:56:52  52  -- I dont want any NULL values from the LAG() functions:
09:56:52  53  WHERE lg32 > 0
09:56:52  54  ORDER BY pair,ydate
09:56:52  55  /

Table created.

Elapsed: 00:00:01.74
09:56:54 SQL> 
09:56:54 SQL> -- rpt
09:56:54 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9382
	-1	   10972

Elapsed: 00:00:00.04
09:56:54 SQL> 
09:56:54 SQL> -- Calc gains and ntiles
09:56:54 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.13
09:56:54 SQL> CREATE TABLE q15 COMPRESS AS
09:56:54   2  SELECT
09:56:54   3  pair
09:56:54   4  ,ydate
09:56:54   5  ,prdate -- Should be unique
09:56:54   6  ,trend -- +1 or -1
09:56:54   7  -- Use NTILE() to derive some attributes
09:56:54   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
09:56:54   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
09:56:54  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
09:56:54  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
09:56:54  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
09:56:54  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
09:56:54  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
09:56:54  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
09:56:54  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
09:56:54  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
09:56:54  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
09:56:54  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
09:56:54  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
09:56:54  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
09:56:54  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
09:56:54  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
09:56:54  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
09:56:54  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
09:56:54  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
09:56:54  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
09:56:54  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
09:56:54  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
09:56:54  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
09:56:54  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
09:56:54  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
09:56:54  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
09:56:54  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
09:56:54  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
09:56:54  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
09:56:54  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
09:56:54  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
09:56:54  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
09:56:54  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
09:56:54  41  ,hh    att32
09:56:54  42  ,d     att33
09:56:54  43  ,w     att34
09:56:54  44  ,mpm   att35
09:56:54  45  ,trend att36
09:56:54  46  ,ug8 g8
09:56:54  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
09:56:54  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
09:56:54  49  FROM q13
09:56:54  50  ORDER BY pair,ydate
09:56:54  51  /

Table created.

Elapsed: 00:00:05.36
09:56:59 SQL> 
09:56:59 SQL> -- rpt
09:56:59 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
09:56:59   2  GROUP BY pair,trend,gatt,gattn
09:56:59   3  ORDER BY pair,trend,gatt,gattn
09:56:59   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_cad 	-1 nup nup -.00002754	    5687
usd_cad 	-1 nup up  -.00400673	    2629
usd_cad 	-1 up  nup .004683752	    2565
usd_cad 	-1			       0
usd_cad 	 1 nup nup -.00011417	    4639
usd_cad 	 1 nup up  -.00422651	    2756
usd_cad 	 1 up  nup .004613081	    1982
usd_cad 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
09:56:59 SQL> 
09:56:59 SQL> -- rpt
09:56:59 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_cad 2010-12-24 09:50:00

Elapsed: 00:00:00.02
09:56:59 SQL> 
09:56:59 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
09:57:00 SQL> CREATE TABLE modsrc COMPRESS AS
09:57:00   2  SELECT
09:57:00   3  pair
09:57:00   4  ,ydate
09:57:00   5  ,prdate
09:57:00   6  ,trend
09:57:00   7  ,g8
09:57:00   8  ,gatt
09:57:00   9  ,gattn
09:57:00  10  FROM q15
09:57:00  11  /

Table created.

Elapsed: 00:00:00.10
09:57:00 SQL> 
09:57:00 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
09:57:00 SQL> 
09:57:00 SQL> -- rpt
09:57:00 SQL> 
09:57:00 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20738

Elapsed: 00:00:00.34
09:57:00 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20354

Elapsed: 00:00:00.00
09:57:00 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20354

Elapsed: 00:00:00.01
09:57:00 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20354

Elapsed: 00:00:00.00
09:57:00 SQL> 
09:57:00 SQL> DROP   TABLE cad_ms10 ;

Table dropped.

Elapsed: 00:00:00.03
09:57:00 SQL> CREATE TABLE cad_ms10 COMPRESS AS
09:57:00   2  SELECT
09:57:00   3  ydate
09:57:00   4  ,trend cad_trend
09:57:00   5  ,g8    cad_g8
09:57:00   6  ,gatt  cad_gatt
09:57:00   7  ,gattn cad_gattn
09:57:00   8  FROM modsrc
09:57:00   9  /

Table created.

Elapsed: 00:00:00.08
09:57:00 SQL> 
09:57:00 SQL> ANALYZE TABLE cad_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
09:57:00 SQL> 
09:57:00 SQL> -- rpt
09:57:00 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 18:00:01 2010-12-24 04:55:00	 9377	  -.0122      .0159
	-1 2010-09-16 20:05:01 2010-12-24 09:50:00	10881	 -.01105      .0176

Elapsed: 00:00:00.02
09:57:00 SQL> SELECT cad_trend,MIN(ydate),MAX(ydate),COUNT(cad_trend),MIN(cad_g8),MAX(cad_g8)FROM cad_ms10 GROUP BY cad_trend;

 CAD_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(CAD_TREND) MIN(CAD_G8) MAX(CAD_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 18:00:01 2010-12-24 04:55:00	       9382	 -.0122       .0159
	-1 2010-09-16 20:05:01 2010-12-24 09:50:00	      10972	-.01105       .0176

Elapsed: 00:00:00.01
09:57:00 SQL> 
09:57:00 SQL> -- I need a copy of q15 attributes
09:57:00 SQL> 
09:57:00 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.13
09:57:01 SQL> CREATE TABLE cad_att COMPRESS AS
09:57:01   2  SELECT
09:57:01   3  ydate
09:57:01   4  ,att00 cad_att00
09:57:01   5  ,att01 cad_att01
09:57:01   6  ,att02 cad_att02
09:57:01   7  ,att03 cad_att03
09:57:01   8  ,att04 cad_att04
09:57:01   9  ,att05 cad_att05
09:57:01  10  ,att06 cad_att06
09:57:01  11  ,att07 cad_att07
09:57:01  12  ,att08 cad_att08
09:57:01  13  ,att09 cad_att09
09:57:01  14  ,att10 cad_att10
09:57:01  15  ,att11 cad_att11
09:57:01  16  ,att12 cad_att12
09:57:01  17  ,att13 cad_att13
09:57:01  18  ,att14 cad_att14
09:57:01  19  ,att15 cad_att15
09:57:01  20  ,att16 cad_att16
09:57:01  21  ,att17 cad_att17
09:57:01  22  ,att18 cad_att18
09:57:01  23  ,att19 cad_att19
09:57:01  24  ,att20 cad_att20
09:57:01  25  ,att21 cad_att21
09:57:01  26  ,att22 cad_att22
09:57:01  27  ,att23 cad_att23
09:57:01  28  ,att24 cad_att24
09:57:01  29  ,att25 cad_att25
09:57:01  30  ,att26 cad_att26
09:57:01  31  ,att27 cad_att27
09:57:01  32  ,att28 cad_att28
09:57:01  33  ,att29 cad_att29
09:57:01  34  ,att30 cad_att30
09:57:01  35  ,att31 cad_att31
09:57:01  36  ,att32 cad_att32
09:57:01  37  ,att33 cad_att33
09:57:01  38  ,att34 cad_att34
09:57:01  39  ,att35 cad_att35
09:57:01  40  ,att36 cad_att36
09:57:01  41  FROM q15
09:57:01  42  /

Table created.

Elapsed: 00:00:00.16
09:57:01 SQL> 
09:57:01 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.53
09:57:01 SQL> 
09:57:01 SQL> -- rpt
09:57:01 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     20354

Elapsed: 00:00:00.00
09:57:01 SQL> 
09:57:01 SQL> --
09:57:01 SQL> -- chf10.sql
09:57:01 SQL> --
09:57:01 SQL> 
09:57:01 SQL> -- Creates views and tables for backtesting a forex SVM strategy
09:57:01 SQL> 
09:57:01 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.33
09:57:02 SQL> 
09:57:02 SQL> -- I created di5min here:
09:57:02 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
09:57:02 SQL> 
09:57:02 SQL> CREATE OR REPLACE VIEW q11 AS
09:57:02   2  SELECT
09:57:02   3  pair
09:57:02   4  ,ydate
09:57:02   5  ,prdate
09:57:02   6  ,rownum rnum -- acts as t in my time-series
09:57:02   7  ,clse
09:57:02   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
09:57:02   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
09:57:02  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
09:57:02  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
09:57:02  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
09:57:02  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
09:57:02  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
09:57:02  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
09:57:02  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
09:57:02  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
09:57:02  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
09:57:02  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
09:57:02  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
09:57:02  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
09:57:02  22  FROM di5min WHERE pair LIKE'%chf%'
09:57:02  23  ORDER BY ydate
09:57:02  24  /

View created.

Elapsed: 00:00:00.05
09:57:02 SQL> 
09:57:02 SQL> -- rpt
09:57:02 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_chf        20741

Elapsed: 00:00:00.33
09:57:02 SQL> 
09:57:02 SQL> -- Calc deltas and gains
09:57:02 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.18
09:57:02 SQL> 
09:57:02 SQL> CREATE TABLE q13 COMPRESS AS
09:57:02   2  SELECT
09:57:02   3  pair
09:57:02   4  ,ydate
09:57:02   5  ,prdate
09:57:02   6  ,rnum
09:57:02   7  ,ld8
09:57:02   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
09:57:02   9  -- step by 2
09:57:02  10  ,clse-lg6  d06
09:57:02  11  ,lg6 -lg8  d68
09:57:02  12  ,lg8 -lg10 d810
09:57:02  13  ,lg10-lg12 d1012
09:57:02  14  ,lg12-lg14 d1214
09:57:02  15  ,lg14-lg16 d1416
09:57:02  16  ,lg16-lg18 d1618
09:57:02  17  -- step by 4
09:57:02  18  ,lg6 -lg10 d610
09:57:02  19  ,lg8 -lg12 d812
09:57:02  20  ,lg10-lg14 d1014
09:57:02  21  ,lg12-lg16 d1216
09:57:02  22  --
09:57:02  23  ,ABS(clse-lg6 )dc6
09:57:02  24  ,ABS(clse-lg8 )dc8
09:57:02  25  ,ABS(clse-lg10)dc10
09:57:02  26  ,ABS(clse-lg12)dc12
09:57:02  27  ,ABS(clse-lg14)dc14
09:57:02  28  ,ABS(clse-lg16)dc16
09:57:02  29  ,ABS(clse-lg18)dc18
09:57:02  30  ,ABS(clse-lg20)dc20
09:57:02  31  ,ABS(clse-lg22)dc22
09:57:02  32  ,(ld8-clse) ug8
09:57:02  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
09:57:02  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
09:57:02  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
09:57:02  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
09:57:02  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
09:57:02  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
09:57:02  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
09:57:02  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
09:57:02  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
09:57:02  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
09:57:02  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
09:57:02  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
09:57:02  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
09:57:02  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
09:57:02  47  ,0+TO_CHAR(ydate,'D')d
09:57:02  48  ,0+TO_CHAR(ydate,'W')w
09:57:02  49  -- mpm stands for minutes-past-midnight:
09:57:02  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
09:57:02  51  FROM q11
09:57:02  52  -- I dont want any NULL values from the LAG() functions:
09:57:02  53  WHERE lg32 > 0
09:57:02  54  ORDER BY pair,ydate
09:57:02  55  /

Table created.

Elapsed: 00:00:01.69
09:57:04 SQL> 
09:57:04 SQL> -- rpt
09:57:04 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9554
	-1	   10803

Elapsed: 00:00:00.03
09:57:04 SQL> 
09:57:04 SQL> -- Calc gains and ntiles
09:57:04 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.22
09:57:04 SQL> CREATE TABLE q15 COMPRESS AS
09:57:04   2  SELECT
09:57:04   3  pair
09:57:04   4  ,ydate
09:57:04   5  ,prdate -- Should be unique
09:57:04   6  ,trend -- +1 or -1
09:57:04   7  -- Use NTILE() to derive some attributes
09:57:04   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
09:57:04   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
09:57:04  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
09:57:04  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
09:57:04  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
09:57:04  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
09:57:04  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
09:57:04  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
09:57:04  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
09:57:04  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
09:57:04  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
09:57:04  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
09:57:04  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
09:57:04  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
09:57:04  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
09:57:04  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
09:57:04  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
09:57:04  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
09:57:04  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
09:57:04  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
09:57:04  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
09:57:04  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
09:57:04  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
09:57:04  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
09:57:04  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
09:57:04  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
09:57:04  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
09:57:04  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
09:57:04  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
09:57:04  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
09:57:04  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
09:57:04  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
09:57:04  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
09:57:04  41  ,hh    att32
09:57:04  42  ,d     att33
09:57:04  43  ,w     att34
09:57:04  44  ,mpm   att35
09:57:04  45  ,trend att36
09:57:04  46  ,ug8 g8
09:57:04  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
09:57:04  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
09:57:04  49  FROM q13
09:57:04  50  ORDER BY pair,ydate
09:57:04  51  /

Table created.

Elapsed: 00:00:05.34
09:57:10 SQL> 
09:57:10 SQL> -- rpt
09:57:10 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
09:57:10   2  GROUP BY pair,trend,gatt,gattn
09:57:10   3  ORDER BY pair,trend,gatt,gattn
09:57:10   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_chf 	-1 nup nup .000024511	    4914
usd_chf 	-1 nup up  -.00495047	    3141
usd_chf 	-1 up  nup .005058523	    2681
usd_chf 	-1			       0
usd_chf 	 1 nup nup -.00002585	    4516
usd_chf 	 1 nup up  -.00452926	    2921
usd_chf 	 1 up  nup   .0046493	    2088
usd_chf 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
09:57:10 SQL> 
09:57:10 SQL> -- rpt
09:57:10 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_chf 2010-12-24 09:50:00

Elapsed: 00:00:00.02
09:57:10 SQL> 
09:57:10 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.16
09:57:10 SQL> CREATE TABLE modsrc COMPRESS AS
09:57:10   2  SELECT
09:57:10   3  pair
09:57:10   4  ,ydate
09:57:10   5  ,prdate
09:57:10   6  ,trend
09:57:10   7  ,g8
09:57:10   8  ,gatt
09:57:10   9  ,gattn
09:57:10  10  FROM q15
09:57:10  11  /

Table created.

Elapsed: 00:00:00.09
09:57:10 SQL> 
09:57:10 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
09:57:10 SQL> 
09:57:10 SQL> -- rpt
09:57:10 SQL> 
09:57:10 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20741

Elapsed: 00:00:00.34
09:57:10 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20357

Elapsed: 00:00:00.00
09:57:10 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20357

Elapsed: 00:00:00.01
09:57:10 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20357

Elapsed: 00:00:00.00
09:57:10 SQL> 
09:57:10 SQL> DROP   TABLE chf_ms10 ;

Table dropped.

Elapsed: 00:00:00.05
09:57:10 SQL> CREATE TABLE chf_ms10 COMPRESS AS
09:57:10   2  SELECT
09:57:10   3  ydate
09:57:10   4  ,trend chf_trend
09:57:10   5  ,g8    chf_g8
09:57:10   6  ,gatt  chf_gatt
09:57:10   7  ,gattn chf_gattn
09:57:10   8  FROM modsrc
09:57:10   9  /

Table created.

Elapsed: 00:00:00.07
09:57:11 SQL> 
09:57:11 SQL> ANALYZE TABLE chf_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
09:57:11 SQL> 
09:57:11 SQL> -- rpt
09:57:11 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 18:00:01 2010-12-24 09:50:00	 9525	 -.01775      .0155
	-1 2010-09-16 20:55:01 2010-12-24 07:25:00	10736	 -.01825     .01545

Elapsed: 00:00:00.02
09:57:11 SQL> SELECT chf_trend,MIN(ydate),MAX(ydate),COUNT(chf_trend),MIN(chf_g8),MAX(chf_g8)FROM chf_ms10 GROUP BY chf_trend;

 CHF_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(CHF_TREND) MIN(CHF_G8) MAX(CHF_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 18:00:01 2010-12-24 09:50:00	       9554	-.01775       .0155
	-1 2010-09-16 20:55:01 2010-12-24 07:25:00	      10803	-.01825      .01545

Elapsed: 00:00:00.01
09:57:11 SQL> 
09:57:11 SQL> -- I need a copy of q15 attributes
09:57:11 SQL> 
09:57:11 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.03
09:57:11 SQL> CREATE TABLE chf_att COMPRESS AS
09:57:11   2  SELECT
09:57:11   3  ydate
09:57:11   4  ,att00 chf_att00
09:57:11   5  ,att01 chf_att01
09:57:11   6  ,att02 chf_att02
09:57:11   7  ,att03 chf_att03
09:57:11   8  ,att04 chf_att04
09:57:11   9  ,att05 chf_att05
09:57:11  10  ,att06 chf_att06
09:57:11  11  ,att07 chf_att07
09:57:11  12  ,att08 chf_att08
09:57:11  13  ,att09 chf_att09
09:57:11  14  ,att10 chf_att10
09:57:11  15  ,att11 chf_att11
09:57:11  16  ,att12 chf_att12
09:57:11  17  ,att13 chf_att13
09:57:11  18  ,att14 chf_att14
09:57:11  19  ,att15 chf_att15
09:57:11  20  ,att16 chf_att16
09:57:11  21  ,att17 chf_att17
09:57:11  22  ,att18 chf_att18
09:57:11  23  ,att19 chf_att19
09:57:11  24  ,att20 chf_att20
09:57:11  25  ,att21 chf_att21
09:57:11  26  ,att22 chf_att22
09:57:11  27  ,att23 chf_att23
09:57:11  28  ,att24 chf_att24
09:57:11  29  ,att25 chf_att25
09:57:11  30  ,att26 chf_att26
09:57:11  31  ,att27 chf_att27
09:57:11  32  ,att28 chf_att28
09:57:11  33  ,att29 chf_att29
09:57:11  34  ,att30 chf_att30
09:57:11  35  ,att31 chf_att31
09:57:11  36  ,att32 chf_att32
09:57:11  37  ,att33 chf_att33
09:57:11  38  ,att34 chf_att34
09:57:11  39  ,att35 chf_att35
09:57:11  40  ,att36 chf_att36
09:57:11  41  FROM q15
09:57:11  42  /

Table created.

Elapsed: 00:00:00.17
09:57:11 SQL> 
09:57:11 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.61
09:57:12 SQL> 
09:57:12 SQL> -- rpt
09:57:12 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     20357

Elapsed: 00:00:00.00
09:57:12 SQL> 
09:57:12 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
