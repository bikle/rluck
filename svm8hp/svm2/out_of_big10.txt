
SQL*Plus: Release 11.2.0.1.0 Production on Fri Dec 24 07:39:02 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

07:39:02 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.01
07:39:02 SQL> 07:39:02 SQL> --
07:39:02 SQL> -- eur10.sql
07:39:02 SQL> --
07:39:02 SQL> 
07:39:02 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:39:02 SQL> 
07:39:02 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.00
07:39:02 SQL> 
07:39:02 SQL> -- I created di5min here:
07:39:02 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:39:02 SQL> 
07:39:02 SQL> CREATE OR REPLACE VIEW q11 AS
07:39:02   2  SELECT
07:39:02   3  pair
07:39:02   4  ,ydate
07:39:02   5  ,prdate
07:39:02   6  ,rownum rnum -- acts as t in my time-series
07:39:02   7  ,clse
07:39:02   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
07:39:02   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
07:39:02  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
07:39:02  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
07:39:02  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
07:39:02  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
07:39:02  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
07:39:02  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
07:39:02  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
07:39:02  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
07:39:02  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
07:39:02  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
07:39:02  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
07:39:02  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
07:39:02  22  FROM di5min WHERE pair LIKE'%eur%'
07:39:02  23  ORDER BY ydate
07:39:02  24  /

View created.

Elapsed: 00:00:00.07
07:39:02 SQL> 
07:39:02 SQL> -- rpt
07:39:02 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
eur_usd        20743

Elapsed: 00:00:00.37
07:39:02 SQL> 
07:39:02 SQL> -- Calc deltas and gains
07:39:02 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.25
07:39:03 SQL> 
07:39:03 SQL> CREATE TABLE q13 COMPRESS AS
07:39:03   2  SELECT
07:39:03   3  pair
07:39:03   4  ,ydate
07:39:03   5  ,prdate
07:39:03   6  ,rnum
07:39:03   7  ,ld8
07:39:03   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
07:39:03   9  -- step by 2
07:39:03  10  ,clse-lg6  d06
07:39:03  11  ,lg6 -lg8  d68
07:39:03  12  ,lg8 -lg10 d810
07:39:03  13  ,lg10-lg12 d1012
07:39:03  14  ,lg12-lg14 d1214
07:39:03  15  ,lg14-lg16 d1416
07:39:03  16  ,lg16-lg18 d1618
07:39:03  17  -- step by 4
07:39:03  18  ,lg6 -lg10 d610
07:39:03  19  ,lg8 -lg12 d812
07:39:03  20  ,lg10-lg14 d1014
07:39:03  21  ,lg12-lg16 d1216
07:39:03  22  --
07:39:03  23  ,ABS(clse-lg6 )dc6
07:39:03  24  ,ABS(clse-lg8 )dc8
07:39:03  25  ,ABS(clse-lg10)dc10
07:39:03  26  ,ABS(clse-lg12)dc12
07:39:03  27  ,ABS(clse-lg14)dc14
07:39:03  28  ,ABS(clse-lg16)dc16
07:39:03  29  ,ABS(clse-lg18)dc18
07:39:03  30  ,ABS(clse-lg20)dc20
07:39:03  31  ,ABS(clse-lg22)dc22
07:39:03  32  ,(ld8-clse) ug8
07:39:03  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:39:03  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:39:03  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:39:03  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:39:03  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:39:03  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:39:03  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:39:03  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
07:39:03  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
07:39:03  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
07:39:03  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
07:39:03  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
07:39:03  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
07:39:03  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:39:03  47  ,0+TO_CHAR(ydate,'D')d
07:39:03  48  ,0+TO_CHAR(ydate,'W')w
07:39:03  49  -- mpm stands for minutes-past-midnight:
07:39:03  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:39:03  51  FROM q11
07:39:03  52  -- I dont want any NULL values from the LAG() functions:
07:39:03  53  WHERE lg32 > 0
07:39:03  54  ORDER BY pair,ydate
07:39:03  55  /

Table created.

Elapsed: 00:00:01.95
07:39:05 SQL> 
07:39:05 SQL> -- rpt
07:39:05 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	   10120
	-1	   10239

Elapsed: 00:00:00.03
07:39:05 SQL> 
07:39:05 SQL> -- Calc gains and ntiles
07:39:05 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.09
07:39:05 SQL> CREATE TABLE q15 COMPRESS AS
07:39:05   2  SELECT
07:39:05   3  pair
07:39:05   4  ,ydate
07:39:05   5  ,prdate -- Should be unique
07:39:05   6  ,trend -- +1 or -1
07:39:05   7  -- Use NTILE() to derive some attributes
07:39:05   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
07:39:05   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
07:39:05  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
07:39:05  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
07:39:05  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
07:39:05  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
07:39:05  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
07:39:05  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
07:39:05  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
07:39:05  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
07:39:05  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
07:39:05  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
07:39:05  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
07:39:05  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
07:39:05  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
07:39:05  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
07:39:05  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
07:39:05  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
07:39:05  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
07:39:05  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
07:39:05  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
07:39:05  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
07:39:05  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
07:39:05  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
07:39:05  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
07:39:05  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
07:39:05  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
07:39:05  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
07:39:05  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
07:39:05  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
07:39:05  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
07:39:05  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
07:39:05  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
07:39:05  41  ,hh    att32
07:39:05  42  ,d     att33
07:39:05  43  ,w     att34
07:39:05  44  ,mpm   att35
07:39:05  45  ,trend att36
07:39:05  46  ,ug8 g8
07:39:05  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
07:39:05  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
07:39:05  49  FROM q13
07:39:05  50  ORDER BY pair,ydate
07:39:05  51  /

Table created.

Elapsed: 00:00:05.32
07:39:10 SQL> 
07:39:10 SQL> -- rpt
07:39:10 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
07:39:10   2  GROUP BY pair,trend,gatt,gattn
07:39:10   3  ORDER BY pair,trend,gatt,gattn
07:39:10   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
eur_usd 	-1 nup nup .000025712	    3021
eur_usd 	-1 nup up  -.00602802	    3651
eur_usd 	-1 up  nup .005756878	    3564
eur_usd 	-1			       0
eur_usd 	 1 nup nup -.00007434	    2949
eur_usd 	 1 nup up  -.00626446	    3461
eur_usd 	 1 up  nup .006573479	    3617
eur_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
07:39:10 SQL> 
07:39:10 SQL> -- rpt
07:39:10 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
eur_usd 2010-12-24 07:35:00

Elapsed: 00:00:00.02
07:39:10 SQL> 
07:39:10 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
07:39:10 SQL> CREATE TABLE modsrc COMPRESS AS
07:39:10   2  SELECT
07:39:10   3  pair
07:39:10   4  ,ydate
07:39:10   5  ,prdate
07:39:10   6  ,trend
07:39:10   7  ,g8
07:39:10   8  ,gatt
07:39:10   9  ,gattn
07:39:10  10  FROM q15
07:39:10  11  /

Table created.

Elapsed: 00:00:00.09
07:39:10 SQL> 
07:39:10 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
07:39:11 SQL> 
07:39:11 SQL> -- rpt
07:39:11 SQL> 
07:39:11 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20743

Elapsed: 00:00:00.36
07:39:11 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20359

Elapsed: 00:00:00.00
07:39:11 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20359

Elapsed: 00:00:00.01
07:39:11 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20359

Elapsed: 00:00:00.00
07:39:11 SQL> 
07:39:11 SQL> DROP   TABLE eur_ms10 ;

Table dropped.

Elapsed: 00:00:00.03
07:39:11 SQL> CREATE TABLE eur_ms10 COMPRESS AS
07:39:11   2  SELECT
07:39:11   3  ydate
07:39:11   4  ,trend eur_trend
07:39:11   5  ,g8    eur_g8
07:39:11   6  ,gatt  eur_gatt
07:39:11   7  ,gattn eur_gattn
07:39:11   8  FROM modsrc
07:39:11   9  /

Table created.

Elapsed: 00:00:00.10
07:39:11 SQL> 
07:39:11 SQL> ANALYZE TABLE eur_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.25
07:39:11 SQL> 
07:39:11 SQL> -- rpt
07:39:11 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 15:40:01 2010-12-24 07:35:00	10027	  -.0218     .02165
	-1 2010-09-16 17:15:01 2010-12-24 01:50:00	10236	 -.02085      .0196

Elapsed: 00:00:00.02
07:39:11 SQL> SELECT eur_trend,MIN(ydate),MAX(ydate),COUNT(eur_trend),MIN(eur_g8),MAX(eur_g8)FROM eur_ms10 GROUP BY eur_trend;

 EUR_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(EUR_TREND) MIN(EUR_G8) MAX(EUR_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 15:40:01 2010-12-24 07:35:00	      10120	 -.0218      .02165
	-1 2010-09-16 17:15:01 2010-12-24 01:50:00	      10239	-.02085       .0196

Elapsed: 00:00:00.02
07:39:11 SQL> 
07:39:11 SQL> -- I need a copy of q15 attributes
07:39:11 SQL> 
07:39:11 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.04
07:39:11 SQL> CREATE TABLE eur_att COMPRESS AS
07:39:11   2  SELECT
07:39:11   3  ydate
07:39:11   4  ,att00 eur_att00
07:39:11   5  ,att01 eur_att01
07:39:11   6  ,att02 eur_att02
07:39:11   7  ,att03 eur_att03
07:39:11   8  ,att04 eur_att04
07:39:11   9  ,att05 eur_att05
07:39:11  10  ,att06 eur_att06
07:39:11  11  ,att07 eur_att07
07:39:11  12  ,att08 eur_att08
07:39:11  13  ,att09 eur_att09
07:39:11  14  ,att10 eur_att10
07:39:11  15  ,att11 eur_att11
07:39:11  16  ,att12 eur_att12
07:39:11  17  ,att13 eur_att13
07:39:11  18  ,att14 eur_att14
07:39:11  19  ,att15 eur_att15
07:39:11  20  ,att16 eur_att16
07:39:11  21  ,att17 eur_att17
07:39:11  22  ,att18 eur_att18
07:39:11  23  ,att19 eur_att19
07:39:11  24  ,att20 eur_att20
07:39:11  25  ,att21 eur_att21
07:39:11  26  ,att22 eur_att22
07:39:11  27  ,att23 eur_att23
07:39:11  28  ,att24 eur_att24
07:39:11  29  ,att25 eur_att25
07:39:11  30  ,att26 eur_att26
07:39:11  31  ,att27 eur_att27
07:39:11  32  ,att28 eur_att28
07:39:11  33  ,att29 eur_att29
07:39:11  34  ,att30 eur_att30
07:39:11  35  ,att31 eur_att31
07:39:11  36  ,att32 eur_att32
07:39:11  37  ,att33 eur_att33
07:39:11  38  ,att34 eur_att34
07:39:11  39  ,att35 eur_att35
07:39:11  40  ,att36 eur_att36
07:39:11  41  FROM q15
07:39:11  42  /

Table created.

Elapsed: 00:00:00.17
07:39:12 SQL> 
07:39:12 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.50
07:39:12 SQL> 
07:39:12 SQL> -- rpt
07:39:12 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     20359

Elapsed: 00:00:00.00
07:39:12 SQL> 
07:39:12 SQL> --
07:39:12 SQL> -- aud10.sql
07:39:12 SQL> --
07:39:12 SQL> 
07:39:12 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:39:12 SQL> 
07:39:12 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.47
07:39:13 SQL> 
07:39:13 SQL> -- I created di5min here:
07:39:13 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:39:13 SQL> 
07:39:13 SQL> CREATE OR REPLACE VIEW q11 AS
07:39:13   2  SELECT
07:39:13   3  pair
07:39:13   4  ,ydate
07:39:13   5  ,prdate
07:39:13   6  ,rownum rnum -- acts as t in my time-series
07:39:13   7  ,clse
07:39:13   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
07:39:13   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
07:39:13  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
07:39:13  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
07:39:13  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
07:39:13  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
07:39:13  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
07:39:13  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
07:39:13  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
07:39:13  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
07:39:13  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
07:39:13  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
07:39:13  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
07:39:13  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
07:39:13  22  FROM di5min WHERE pair LIKE'%aud%'
07:39:13  23  ORDER BY ydate
07:39:13  24  /

View created.

Elapsed: 00:00:00.05
07:39:13 SQL> 
07:39:13 SQL> -- rpt
07:39:13 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
aud_usd        20740

Elapsed: 00:00:00.34
07:39:13 SQL> 
07:39:13 SQL> -- Calc deltas and gains
07:39:13 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.19
07:39:13 SQL> 
07:39:13 SQL> CREATE TABLE q13 COMPRESS AS
07:39:13   2  SELECT
07:39:13   3  pair
07:39:13   4  ,ydate
07:39:13   5  ,prdate
07:39:13   6  ,rnum
07:39:13   7  ,ld8
07:39:13   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
07:39:13   9  -- step by 2
07:39:13  10  ,clse-lg6  d06
07:39:13  11  ,lg6 -lg8  d68
07:39:13  12  ,lg8 -lg10 d810
07:39:13  13  ,lg10-lg12 d1012
07:39:13  14  ,lg12-lg14 d1214
07:39:13  15  ,lg14-lg16 d1416
07:39:13  16  ,lg16-lg18 d1618
07:39:13  17  -- step by 4
07:39:13  18  ,lg6 -lg10 d610
07:39:13  19  ,lg8 -lg12 d812
07:39:13  20  ,lg10-lg14 d1014
07:39:13  21  ,lg12-lg16 d1216
07:39:13  22  --
07:39:13  23  ,ABS(clse-lg6 )dc6
07:39:13  24  ,ABS(clse-lg8 )dc8
07:39:13  25  ,ABS(clse-lg10)dc10
07:39:13  26  ,ABS(clse-lg12)dc12
07:39:13  27  ,ABS(clse-lg14)dc14
07:39:13  28  ,ABS(clse-lg16)dc16
07:39:13  29  ,ABS(clse-lg18)dc18
07:39:13  30  ,ABS(clse-lg20)dc20
07:39:13  31  ,ABS(clse-lg22)dc22
07:39:13  32  ,(ld8-clse) ug8
07:39:13  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:39:13  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:39:13  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:39:13  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:39:13  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:39:13  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:39:13  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:39:13  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
07:39:13  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
07:39:13  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
07:39:13  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
07:39:13  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
07:39:13  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
07:39:13  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:39:13  47  ,0+TO_CHAR(ydate,'D')d
07:39:13  48  ,0+TO_CHAR(ydate,'W')w
07:39:13  49  -- mpm stands for minutes-past-midnight:
07:39:13  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:39:13  51  FROM q11
07:39:13  52  -- I dont want any NULL values from the LAG() functions:
07:39:13  53  WHERE lg32 > 0
07:39:13  54  ORDER BY pair,ydate
07:39:13  55  /

Table created.

Elapsed: 00:00:01.69
07:39:15 SQL> 
07:39:15 SQL> -- rpt
07:39:15 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	   10812
	-1	    9544

Elapsed: 00:00:00.03
07:39:15 SQL> 
07:39:15 SQL> -- Calc gains and ntiles
07:39:15 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.19
07:39:15 SQL> CREATE TABLE q15 COMPRESS AS
07:39:15   2  SELECT
07:39:15   3  pair
07:39:15   4  ,ydate
07:39:15   5  ,prdate -- Should be unique
07:39:15   6  ,trend -- +1 or -1
07:39:15   7  -- Use NTILE() to derive some attributes
07:39:15   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
07:39:15   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
07:39:15  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
07:39:15  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
07:39:15  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
07:39:15  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
07:39:15  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
07:39:15  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
07:39:15  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
07:39:15  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
07:39:15  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
07:39:15  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
07:39:15  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
07:39:15  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
07:39:15  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
07:39:15  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
07:39:15  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
07:39:15  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
07:39:15  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
07:39:15  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
07:39:15  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
07:39:15  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
07:39:15  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
07:39:15  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
07:39:15  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
07:39:15  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
07:39:15  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
07:39:15  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
07:39:15  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
07:39:15  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
07:39:15  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
07:39:15  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
07:39:15  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
07:39:15  41  ,hh    att32
07:39:15  42  ,d     att33
07:39:15  43  ,w     att34
07:39:15  44  ,mpm   att35
07:39:15  45  ,trend att36
07:39:15  46  ,ug8 g8
07:39:15  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
07:39:15  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
07:39:15  49  FROM q13
07:39:15  50  ORDER BY pair,ydate
07:39:15  51  /

Table created.

Elapsed: 00:00:05.52
07:39:21 SQL> 
07:39:21 SQL> -- rpt
07:39:21 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
07:39:21   2  GROUP BY pair,trend,gatt,gattn
07:39:21   3  ORDER BY pair,trend,gatt,gattn
07:39:21   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
aud_usd 	-1 nup nup .000035951	    3550
aud_usd 	-1 nup up  -.00525835	    2519
aud_usd 	-1 up  nup .005173898	    3402
aud_usd 	-1			       0
aud_usd 	 1 nup nup  .00002751	    4348
aud_usd 	 1 nup up  -.00500047	    3062
aud_usd 	 1 up  nup .005093811	    3379
aud_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
07:39:21 SQL> 
07:39:21 SQL> -- rpt
07:39:21 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
aud_usd 2010-12-24 07:35:00

Elapsed: 00:00:00.02
07:39:21 SQL> 
07:39:21 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.11
07:39:21 SQL> CREATE TABLE modsrc COMPRESS AS
07:39:21   2  SELECT
07:39:21   3  pair
07:39:21   4  ,ydate
07:39:21   5  ,prdate
07:39:21   6  ,trend
07:39:21   7  ,g8
07:39:21   8  ,gatt
07:39:21   9  ,gattn
07:39:21  10  FROM q15
07:39:21  11  /

Table created.

Elapsed: 00:00:00.09
07:39:21 SQL> 
07:39:21 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.24
07:39:21 SQL> 
07:39:21 SQL> -- rpt
07:39:21 SQL> 
07:39:21 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20740

Elapsed: 00:00:00.35
07:39:21 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20356

Elapsed: 00:00:00.02
07:39:21 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20356

Elapsed: 00:00:00.00
07:39:21 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20356

Elapsed: 00:00:00.00
07:39:21 SQL> 
07:39:21 SQL> DROP   TABLE aud_ms10 ;

Table dropped.

Elapsed: 00:00:00.08
07:39:22 SQL> CREATE TABLE aud_ms10 COMPRESS AS
07:39:22   2  SELECT
07:39:22   3  ydate
07:39:22   4  ,trend aud_trend
07:39:22   5  ,g8    aud_g8
07:39:22   6  ,gatt  aud_gatt
07:39:22   7  ,gattn aud_gattn
07:39:22   8  FROM modsrc
07:39:22   9  /

Table created.

Elapsed: 00:00:00.07
07:39:22 SQL> 
07:39:22 SQL> ANALYZE TABLE aud_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
07:39:22 SQL> 
07:39:22 SQL> -- rpt
07:39:22 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 19:30:01 2010-12-24 07:35:00	10789	  -.0203      .0136
	-1 2010-09-16 15:40:01 2010-12-24 06:10:00	 9471	  -.0196      .0148

Elapsed: 00:00:00.02
07:39:22 SQL> SELECT aud_trend,MIN(ydate),MAX(ydate),COUNT(aud_trend),MIN(aud_g8),MAX(aud_g8)FROM aud_ms10 GROUP BY aud_trend;

 AUD_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(AUD_TREND) MIN(AUD_G8) MAX(AUD_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 19:30:01 2010-12-24 07:35:00	      10812	 -.0203       .0136
	-1 2010-09-16 15:40:01 2010-12-24 06:10:00	       9544	 -.0196       .0148

Elapsed: 00:00:00.01
07:39:22 SQL> 
07:39:22 SQL> -- I need a copy of q15 attributes
07:39:22 SQL> 
07:39:22 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.04
07:39:22 SQL> CREATE TABLE aud_att COMPRESS AS
07:39:22   2  SELECT
07:39:22   3  ydate
07:39:22   4  ,att00 aud_att00
07:39:22   5  ,att01 aud_att01
07:39:22   6  ,att02 aud_att02
07:39:22   7  ,att03 aud_att03
07:39:22   8  ,att04 aud_att04
07:39:22   9  ,att05 aud_att05
07:39:22  10  ,att06 aud_att06
07:39:22  11  ,att07 aud_att07
07:39:22  12  ,att08 aud_att08
07:39:22  13  ,att09 aud_att09
07:39:22  14  ,att10 aud_att10
07:39:22  15  ,att11 aud_att11
07:39:22  16  ,att12 aud_att12
07:39:22  17  ,att13 aud_att13
07:39:22  18  ,att14 aud_att14
07:39:22  19  ,att15 aud_att15
07:39:22  20  ,att16 aud_att16
07:39:22  21  ,att17 aud_att17
07:39:22  22  ,att18 aud_att18
07:39:22  23  ,att19 aud_att19
07:39:22  24  ,att20 aud_att20
07:39:22  25  ,att21 aud_att21
07:39:22  26  ,att22 aud_att22
07:39:22  27  ,att23 aud_att23
07:39:22  28  ,att24 aud_att24
07:39:22  29  ,att25 aud_att25
07:39:22  30  ,att26 aud_att26
07:39:22  31  ,att27 aud_att27
07:39:22  32  ,att28 aud_att28
07:39:22  33  ,att29 aud_att29
07:39:22  34  ,att30 aud_att30
07:39:22  35  ,att31 aud_att31
07:39:22  36  ,att32 aud_att32
07:39:22  37  ,att33 aud_att33
07:39:22  38  ,att34 aud_att34
07:39:22  39  ,att35 aud_att35
07:39:22  40  ,att36 aud_att36
07:39:22  41  FROM q15
07:39:22  42  /

Table created.

Elapsed: 00:00:00.19
07:39:22 SQL> 
07:39:22 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.52
07:39:23 SQL> 
07:39:23 SQL> -- rpt
07:39:23 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     20356

Elapsed: 00:00:00.00
07:39:23 SQL> 
07:39:23 SQL> --
07:39:23 SQL> -- gbp10.sql
07:39:23 SQL> --
07:39:23 SQL> 
07:39:23 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:39:23 SQL> 
07:39:23 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.32
07:39:23 SQL> 
07:39:23 SQL> -- I created di5min here:
07:39:23 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:39:23 SQL> 
07:39:23 SQL> CREATE OR REPLACE VIEW q11 AS
07:39:23   2  SELECT
07:39:23   3  pair
07:39:23   4  ,ydate
07:39:23   5  ,prdate
07:39:23   6  ,rownum rnum -- acts as t in my time-series
07:39:23   7  ,clse
07:39:23   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
07:39:23   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
07:39:23  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
07:39:23  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
07:39:23  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
07:39:23  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
07:39:23  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
07:39:23  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
07:39:23  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
07:39:23  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
07:39:23  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
07:39:23  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
07:39:23  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
07:39:23  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
07:39:23  22  FROM di5min WHERE pair LIKE'%gbp%'
07:39:23  23  ORDER BY ydate
07:39:23  24  /

View created.

Elapsed: 00:00:00.03
07:39:23 SQL> 
07:39:23 SQL> -- rpt
07:39:23 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
gbp_usd        20742

Elapsed: 00:00:00.34
07:39:23 SQL> 
07:39:23 SQL> -- Calc deltas and gains
07:39:23 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.25
07:39:24 SQL> 
07:39:24 SQL> CREATE TABLE q13 COMPRESS AS
07:39:24   2  SELECT
07:39:24   3  pair
07:39:24   4  ,ydate
07:39:24   5  ,prdate
07:39:24   6  ,rnum
07:39:24   7  ,ld8
07:39:24   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
07:39:24   9  -- step by 2
07:39:24  10  ,clse-lg6  d06
07:39:24  11  ,lg6 -lg8  d68
07:39:24  12  ,lg8 -lg10 d810
07:39:24  13  ,lg10-lg12 d1012
07:39:24  14  ,lg12-lg14 d1214
07:39:24  15  ,lg14-lg16 d1416
07:39:24  16  ,lg16-lg18 d1618
07:39:24  17  -- step by 4
07:39:24  18  ,lg6 -lg10 d610
07:39:24  19  ,lg8 -lg12 d812
07:39:24  20  ,lg10-lg14 d1014
07:39:24  21  ,lg12-lg16 d1216
07:39:24  22  --
07:39:24  23  ,ABS(clse-lg6 )dc6
07:39:24  24  ,ABS(clse-lg8 )dc8
07:39:24  25  ,ABS(clse-lg10)dc10
07:39:24  26  ,ABS(clse-lg12)dc12
07:39:24  27  ,ABS(clse-lg14)dc14
07:39:24  28  ,ABS(clse-lg16)dc16
07:39:24  29  ,ABS(clse-lg18)dc18
07:39:24  30  ,ABS(clse-lg20)dc20
07:39:24  31  ,ABS(clse-lg22)dc22
07:39:24  32  ,(ld8-clse) ug8
07:39:24  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:39:24  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:39:24  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:39:24  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:39:24  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:39:24  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:39:24  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:39:24  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
07:39:24  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
07:39:24  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
07:39:24  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
07:39:24  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
07:39:24  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
07:39:24  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:39:24  47  ,0+TO_CHAR(ydate,'D')d
07:39:24  48  ,0+TO_CHAR(ydate,'W')w
07:39:24  49  -- mpm stands for minutes-past-midnight:
07:39:24  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:39:24  51  FROM q11
07:39:24  52  -- I dont want any NULL values from the LAG() functions:
07:39:24  53  WHERE lg32 > 0
07:39:24  54  ORDER BY pair,ydate
07:39:24  55  /

Table created.

Elapsed: 00:00:01.77
07:39:25 SQL> 
07:39:25 SQL> -- rpt
07:39:25 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9984
	-1	   10374

Elapsed: 00:00:00.03
07:39:25 SQL> 
07:39:25 SQL> -- Calc gains and ntiles
07:39:25 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.30
07:39:26 SQL> CREATE TABLE q15 COMPRESS AS
07:39:26   2  SELECT
07:39:26   3  pair
07:39:26   4  ,ydate
07:39:26   5  ,prdate -- Should be unique
07:39:26   6  ,trend -- +1 or -1
07:39:26   7  -- Use NTILE() to derive some attributes
07:39:26   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
07:39:26   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
07:39:26  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
07:39:26  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
07:39:26  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
07:39:26  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
07:39:26  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
07:39:26  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
07:39:26  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
07:39:26  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
07:39:26  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
07:39:26  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
07:39:26  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
07:39:26  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
07:39:26  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
07:39:26  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
07:39:26  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
07:39:26  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
07:39:26  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
07:39:26  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
07:39:26  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
07:39:26  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
07:39:26  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
07:39:26  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
07:39:26  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
07:39:26  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
07:39:26  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
07:39:26  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
07:39:26  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
07:39:26  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
07:39:26  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
07:39:26  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
07:39:26  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
07:39:26  41  ,hh    att32
07:39:26  42  ,d     att33
07:39:26  43  ,w     att34
07:39:26  44  ,mpm   att35
07:39:26  45  ,trend att36
07:39:26  46  ,ug8 g8
07:39:26  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
07:39:26  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
07:39:26  49  FROM q13
07:39:26  50  ORDER BY pair,ydate
07:39:26  51  /

Table created.

Elapsed: 00:00:05.51
07:39:31 SQL> 
07:39:31 SQL> -- rpt
07:39:31 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
07:39:31   2  GROUP BY pair,trend,gatt,gattn
07:39:31   3  ORDER BY pair,trend,gatt,gattn
07:39:31   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
gbp_usd 	-1 nup nup .000093706	    3837
gbp_usd 	-1 nup up   -.0059004	    3270
gbp_usd 	-1 up  nup .005468704	    3260
gbp_usd 	-1			       0
gbp_usd 	 1 nup nup -.00007956	    3643
gbp_usd 	 1 nup up  -.00554744	    3271
gbp_usd 	 1 up  nup .005970769	    2981
gbp_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
07:39:31 SQL> 
07:39:31 SQL> -- rpt
07:39:31 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
gbp_usd 2010-12-24 07:35:00

Elapsed: 00:00:00.02
07:39:31 SQL> 
07:39:31 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
07:39:31 SQL> CREATE TABLE modsrc COMPRESS AS
07:39:31   2  SELECT
07:39:31   3  pair
07:39:31   4  ,ydate
07:39:31   5  ,prdate
07:39:31   6  ,trend
07:39:31   7  ,g8
07:39:31   8  ,gatt
07:39:31   9  ,gattn
07:39:31  10  FROM q15
07:39:31  11  /

Table created.

Elapsed: 00:00:00.07
07:39:31 SQL> 
07:39:31 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
07:39:32 SQL> 
07:39:32 SQL> -- rpt
07:39:32 SQL> 
07:39:32 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20742

Elapsed: 00:00:00.37
07:39:32 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.01
07:39:32 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.00
07:39:32 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.01
07:39:32 SQL> 
07:39:32 SQL> DROP   TABLE gbp_ms10 ;

Table dropped.

Elapsed: 00:00:00.03
07:39:32 SQL> CREATE TABLE gbp_ms10 COMPRESS AS
07:39:32   2  SELECT
07:39:32   3  ydate
07:39:32   4  ,trend gbp_trend
07:39:32   5  ,g8    gbp_g8
07:39:32   6  ,gatt  gbp_gatt
07:39:32   7  ,gattn gbp_gattn
07:39:32   8  FROM modsrc
07:39:32   9  /

Table created.

Elapsed: 00:00:00.08
07:39:32 SQL> 
07:39:32 SQL> ANALYZE TABLE gbp_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
07:39:32 SQL> 
07:39:32 SQL> -- rpt
07:39:32 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 16:05:01 2010-12-24 07:35:00	 9895	  -.0231       .019
	-1 2010-09-16 15:40:01 2010-12-24 06:05:00	10367	    -.02      .0204

Elapsed: 00:00:00.03
07:39:32 SQL> SELECT gbp_trend,MIN(ydate),MAX(ydate),COUNT(gbp_trend),MIN(gbp_g8),MAX(gbp_g8)FROM gbp_ms10 GROUP BY gbp_trend;

 GBP_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(GBP_TREND) MIN(GBP_G8) MAX(GBP_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 16:05:01 2010-12-24 07:35:00	       9984	 -.0231        .019
	-1 2010-09-16 15:40:01 2010-12-24 06:05:00	      10374	   -.02       .0204

Elapsed: 00:00:00.01
07:39:32 SQL> 
07:39:32 SQL> -- I need a copy of q15 attributes
07:39:32 SQL> 
07:39:32 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.05
07:39:32 SQL> CREATE TABLE gbp_att COMPRESS AS
07:39:32   2  SELECT
07:39:32   3  ydate
07:39:32   4  ,att00 gbp_att00
07:39:32   5  ,att01 gbp_att01
07:39:32   6  ,att02 gbp_att02
07:39:32   7  ,att03 gbp_att03
07:39:32   8  ,att04 gbp_att04
07:39:32   9  ,att05 gbp_att05
07:39:32  10  ,att06 gbp_att06
07:39:32  11  ,att07 gbp_att07
07:39:32  12  ,att08 gbp_att08
07:39:32  13  ,att09 gbp_att09
07:39:32  14  ,att10 gbp_att10
07:39:32  15  ,att11 gbp_att11
07:39:32  16  ,att12 gbp_att12
07:39:32  17  ,att13 gbp_att13
07:39:32  18  ,att14 gbp_att14
07:39:32  19  ,att15 gbp_att15
07:39:32  20  ,att16 gbp_att16
07:39:32  21  ,att17 gbp_att17
07:39:32  22  ,att18 gbp_att18
07:39:32  23  ,att19 gbp_att19
07:39:32  24  ,att20 gbp_att20
07:39:32  25  ,att21 gbp_att21
07:39:32  26  ,att22 gbp_att22
07:39:32  27  ,att23 gbp_att23
07:39:32  28  ,att24 gbp_att24
07:39:32  29  ,att25 gbp_att25
07:39:32  30  ,att26 gbp_att26
07:39:32  31  ,att27 gbp_att27
07:39:32  32  ,att28 gbp_att28
07:39:32  33  ,att29 gbp_att29
07:39:32  34  ,att30 gbp_att30
07:39:32  35  ,att31 gbp_att31
07:39:32  36  ,att32 gbp_att32
07:39:32  37  ,att33 gbp_att33
07:39:32  38  ,att34 gbp_att34
07:39:32  39  ,att35 gbp_att35
07:39:32  40  ,att36 gbp_att36
07:39:32  41  FROM q15
07:39:32  42  /

Table created.

Elapsed: 00:00:00.18
07:39:33 SQL> 
07:39:33 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.52
07:39:33 SQL> 
07:39:33 SQL> -- rpt
07:39:33 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     20358

Elapsed: 00:00:00.01
07:39:33 SQL> 
07:39:33 SQL> --
07:39:33 SQL> -- jpy10.sql
07:39:33 SQL> --
07:39:33 SQL> 
07:39:33 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:39:33 SQL> 
07:39:33 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.75
07:39:34 SQL> 
07:39:34 SQL> -- I created di5min here:
07:39:34 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:39:34 SQL> 
07:39:34 SQL> CREATE OR REPLACE VIEW q11 AS
07:39:34   2  SELECT
07:39:34   3  pair
07:39:34   4  ,ydate
07:39:34   5  ,prdate
07:39:34   6  ,rownum rnum -- acts as t in my time-series
07:39:34   7  ,clse
07:39:34   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
07:39:34   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
07:39:34  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
07:39:34  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
07:39:34  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
07:39:34  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
07:39:34  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
07:39:34  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
07:39:34  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
07:39:34  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
07:39:34  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
07:39:34  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
07:39:34  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
07:39:34  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
07:39:34  22  FROM di5min WHERE pair LIKE'%jpy%'
07:39:34  23  ORDER BY ydate
07:39:34  24  /

View created.

Elapsed: 00:00:00.05
07:39:34 SQL> 
07:39:34 SQL> -- rpt
07:39:34 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_jpy        20741

Elapsed: 00:00:00.36
07:39:34 SQL> 
07:39:34 SQL> -- Calc deltas and gains
07:39:34 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.24
07:39:34 SQL> 
07:39:34 SQL> CREATE TABLE q13 COMPRESS AS
07:39:34   2  SELECT
07:39:34   3  pair
07:39:34   4  ,ydate
07:39:34   5  ,prdate
07:39:34   6  ,rnum
07:39:34   7  ,ld8
07:39:34   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
07:39:34   9  -- step by 2
07:39:34  10  ,clse-lg6  d06
07:39:34  11  ,lg6 -lg8  d68
07:39:34  12  ,lg8 -lg10 d810
07:39:34  13  ,lg10-lg12 d1012
07:39:34  14  ,lg12-lg14 d1214
07:39:34  15  ,lg14-lg16 d1416
07:39:34  16  ,lg16-lg18 d1618
07:39:34  17  -- step by 4
07:39:34  18  ,lg6 -lg10 d610
07:39:34  19  ,lg8 -lg12 d812
07:39:34  20  ,lg10-lg14 d1014
07:39:34  21  ,lg12-lg16 d1216
07:39:34  22  --
07:39:34  23  ,ABS(clse-lg6 )dc6
07:39:34  24  ,ABS(clse-lg8 )dc8
07:39:34  25  ,ABS(clse-lg10)dc10
07:39:34  26  ,ABS(clse-lg12)dc12
07:39:34  27  ,ABS(clse-lg14)dc14
07:39:34  28  ,ABS(clse-lg16)dc16
07:39:34  29  ,ABS(clse-lg18)dc18
07:39:34  30  ,ABS(clse-lg20)dc20
07:39:34  31  ,ABS(clse-lg22)dc22
07:39:34  32  ,(ld8-clse) ug8
07:39:34  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:39:34  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:39:34  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:39:34  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:39:34  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:39:34  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:39:34  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:39:34  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
07:39:34  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
07:39:34  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
07:39:34  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
07:39:34  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
07:39:34  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
07:39:34  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:39:34  47  ,0+TO_CHAR(ydate,'D')d
07:39:34  48  ,0+TO_CHAR(ydate,'W')w
07:39:34  49  -- mpm stands for minutes-past-midnight:
07:39:34  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:39:34  51  FROM q11
07:39:34  52  -- I dont want any NULL values from the LAG() functions:
07:39:34  53  WHERE lg32 > 0
07:39:34  54  ORDER BY pair,ydate
07:39:34  55  /

Table created.

Elapsed: 00:00:01.69
07:39:36 SQL> 
07:39:36 SQL> -- rpt
07:39:36 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9409
	-1	   10948

Elapsed: 00:00:00.03
07:39:36 SQL> 
07:39:36 SQL> -- Calc gains and ntiles
07:39:36 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.14
07:39:36 SQL> CREATE TABLE q15 COMPRESS AS
07:39:36   2  SELECT
07:39:36   3  pair
07:39:36   4  ,ydate
07:39:36   5  ,prdate -- Should be unique
07:39:36   6  ,trend -- +1 or -1
07:39:36   7  -- Use NTILE() to derive some attributes
07:39:36   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
07:39:36   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
07:39:36  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
07:39:36  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
07:39:36  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
07:39:36  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
07:39:36  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
07:39:36  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
07:39:36  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
07:39:36  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
07:39:36  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
07:39:36  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
07:39:36  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
07:39:36  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
07:39:36  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
07:39:36  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
07:39:36  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
07:39:36  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
07:39:36  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
07:39:36  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
07:39:36  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
07:39:36  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
07:39:36  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
07:39:36  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
07:39:36  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
07:39:36  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
07:39:36  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
07:39:36  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
07:39:36  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
07:39:36  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
07:39:36  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
07:39:36  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
07:39:36  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
07:39:36  41  ,hh    att32
07:39:36  42  ,d     att33
07:39:36  43  ,w     att34
07:39:36  44  ,mpm   att35
07:39:36  45  ,trend att36
07:39:36  46  ,ug8 g8
07:39:36  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
07:39:36  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
07:39:36  49  FROM q13
07:39:36  50  ORDER BY pair,ydate
07:39:36  51  /

Table created.

Elapsed: 00:00:05.73
07:39:42 SQL> 
07:39:42 SQL> -- rpt
07:39:42 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
07:39:42   2  GROUP BY pair,trend,gatt,gattn
07:39:42   3  ORDER BY pair,trend,gatt,gattn
07:39:42   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_jpy 	-1 nup nup -7.437E-06	     168
usd_jpy 	-1 nup up  -.18422489	    5528
usd_jpy 	-1 up  nup .179580365	    5233
usd_jpy 	-1			       0
usd_jpy 	 1 nup nup	    0	     118
usd_jpy 	 1 nup up  -.18874685	    5135
usd_jpy 	 1 up  nup .192164438	    4079
usd_jpy 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
07:39:42 SQL> 
07:39:42 SQL> -- rpt
07:39:42 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_jpy 2010-12-24 07:35:00

Elapsed: 00:00:00.01
07:39:42 SQL> 
07:39:42 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.24
07:39:42 SQL> CREATE TABLE modsrc COMPRESS AS
07:39:42   2  SELECT
07:39:42   3  pair
07:39:42   4  ,ydate
07:39:42   5  ,prdate
07:39:42   6  ,trend
07:39:42   7  ,g8
07:39:42   8  ,gatt
07:39:42   9  ,gattn
07:39:42  10  FROM q15
07:39:42  11  /

Table created.

Elapsed: 00:00:00.49
07:39:43 SQL> 
07:39:43 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
07:39:43 SQL> 
07:39:43 SQL> -- rpt
07:39:43 SQL> 
07:39:43 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20741

Elapsed: 00:00:00.40
07:39:44 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20357

Elapsed: 00:00:00.00
07:39:44 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20357

Elapsed: 00:00:00.01
07:39:44 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20357

Elapsed: 00:00:00.00
07:39:44 SQL> 
07:39:44 SQL> DROP   TABLE jpy_ms10 ;

Table dropped.

Elapsed: 00:00:00.08
07:39:44 SQL> CREATE TABLE jpy_ms10 COMPRESS AS
07:39:44   2  SELECT
07:39:44   3  ydate
07:39:44   4  ,trend jpy_trend
07:39:44   5  ,g8    jpy_g8
07:39:44   6  ,gatt  jpy_gatt
07:39:44   7  ,gattn jpy_gattn
07:39:44   8  FROM modsrc
07:39:44   9  /

Table created.

Elapsed: 00:00:00.28
07:39:44 SQL> 
07:39:44 SQL> ANALYZE TABLE jpy_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
07:39:44 SQL> 
07:39:44 SQL> -- rpt
07:39:44 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 15:40:01 2010-12-24 06:30:00	 9332	  -1.185	  1
	-1 2010-09-17 00:15:01 2010-12-24 07:35:00	10929	 -1.0575       1.32

Elapsed: 00:00:00.02
07:39:44 SQL> SELECT jpy_trend,MIN(ydate),MAX(ydate),COUNT(jpy_trend),MIN(jpy_g8),MAX(jpy_g8)FROM jpy_ms10 GROUP BY jpy_trend;

 JPY_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(JPY_TREND) MIN(JPY_G8) MAX(JPY_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 15:40:01 2010-12-24 06:30:00	       9409	 -1.185 	  1
	-1 2010-09-17 00:15:01 2010-12-24 07:35:00	      10948	-1.0575        1.32

Elapsed: 00:00:00.03
07:39:44 SQL> 
07:39:44 SQL> -- I need a copy of q15 attributes
07:39:44 SQL> 
07:39:44 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.07
07:39:44 SQL> CREATE TABLE jpy_att COMPRESS AS
07:39:44   2  SELECT
07:39:44   3  ydate
07:39:44   4  ,att00 jpy_att00
07:39:44   5  ,att01 jpy_att01
07:39:44   6  ,att02 jpy_att02
07:39:44   7  ,att03 jpy_att03
07:39:44   8  ,att04 jpy_att04
07:39:44   9  ,att05 jpy_att05
07:39:44  10  ,att06 jpy_att06
07:39:44  11  ,att07 jpy_att07
07:39:44  12  ,att08 jpy_att08
07:39:44  13  ,att09 jpy_att09
07:39:44  14  ,att10 jpy_att10
07:39:44  15  ,att11 jpy_att11
07:39:44  16  ,att12 jpy_att12
07:39:44  17  ,att13 jpy_att13
07:39:44  18  ,att14 jpy_att14
07:39:44  19  ,att15 jpy_att15
07:39:44  20  ,att16 jpy_att16
07:39:44  21  ,att17 jpy_att17
07:39:44  22  ,att18 jpy_att18
07:39:44  23  ,att19 jpy_att19
07:39:44  24  ,att20 jpy_att20
07:39:44  25  ,att21 jpy_att21
07:39:44  26  ,att22 jpy_att22
07:39:44  27  ,att23 jpy_att23
07:39:44  28  ,att24 jpy_att24
07:39:44  29  ,att25 jpy_att25
07:39:44  30  ,att26 jpy_att26
07:39:44  31  ,att27 jpy_att27
07:39:44  32  ,att28 jpy_att28
07:39:44  33  ,att29 jpy_att29
07:39:44  34  ,att30 jpy_att30
07:39:44  35  ,att31 jpy_att31
07:39:44  36  ,att32 jpy_att32
07:39:44  37  ,att33 jpy_att33
07:39:44  38  ,att34 jpy_att34
07:39:44  39  ,att35 jpy_att35
07:39:44  40  ,att36 jpy_att36
07:39:44  41  FROM q15
07:39:44  42  /

Table created.

Elapsed: 00:00:00.27
07:39:44 SQL> 
07:39:44 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
07:39:45 SQL> 
07:39:45 SQL> -- rpt
07:39:45 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     20357

Elapsed: 00:00:00.00
07:39:45 SQL> 
07:39:45 SQL> --
07:39:45 SQL> -- cad10.sql
07:39:45 SQL> --
07:39:45 SQL> 
07:39:45 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:39:45 SQL> 
07:39:45 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.35
07:39:45 SQL> 
07:39:45 SQL> -- I created di5min here:
07:39:45 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:39:45 SQL> 
07:39:45 SQL> CREATE OR REPLACE VIEW q11 AS
07:39:45   2  SELECT
07:39:45   3  pair
07:39:45   4  ,ydate
07:39:45   5  ,prdate
07:39:45   6  ,rownum rnum -- acts as t in my time-series
07:39:45   7  ,clse
07:39:45   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
07:39:45   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
07:39:45  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
07:39:45  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
07:39:45  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
07:39:45  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
07:39:45  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
07:39:45  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
07:39:45  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
07:39:45  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
07:39:45  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
07:39:45  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
07:39:45  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
07:39:45  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
07:39:45  22  FROM di5min WHERE pair LIKE'%cad%'
07:39:45  23  ORDER BY ydate
07:39:45  24  /

View created.

Elapsed: 00:00:00.05
07:39:45 SQL> 
07:39:45 SQL> -- rpt
07:39:45 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_cad        20739

Elapsed: 00:00:00.35
07:39:46 SQL> 
07:39:46 SQL> -- Calc deltas and gains
07:39:46 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.17
07:39:46 SQL> 
07:39:46 SQL> CREATE TABLE q13 COMPRESS AS
07:39:46   2  SELECT
07:39:46   3  pair
07:39:46   4  ,ydate
07:39:46   5  ,prdate
07:39:46   6  ,rnum
07:39:46   7  ,ld8
07:39:46   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
07:39:46   9  -- step by 2
07:39:46  10  ,clse-lg6  d06
07:39:46  11  ,lg6 -lg8  d68
07:39:46  12  ,lg8 -lg10 d810
07:39:46  13  ,lg10-lg12 d1012
07:39:46  14  ,lg12-lg14 d1214
07:39:46  15  ,lg14-lg16 d1416
07:39:46  16  ,lg16-lg18 d1618
07:39:46  17  -- step by 4
07:39:46  18  ,lg6 -lg10 d610
07:39:46  19  ,lg8 -lg12 d812
07:39:46  20  ,lg10-lg14 d1014
07:39:46  21  ,lg12-lg16 d1216
07:39:46  22  --
07:39:46  23  ,ABS(clse-lg6 )dc6
07:39:46  24  ,ABS(clse-lg8 )dc8
07:39:46  25  ,ABS(clse-lg10)dc10
07:39:46  26  ,ABS(clse-lg12)dc12
07:39:46  27  ,ABS(clse-lg14)dc14
07:39:46  28  ,ABS(clse-lg16)dc16
07:39:46  29  ,ABS(clse-lg18)dc18
07:39:46  30  ,ABS(clse-lg20)dc20
07:39:46  31  ,ABS(clse-lg22)dc22
07:39:46  32  ,(ld8-clse) ug8
07:39:46  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:39:46  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:39:46  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:39:46  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:39:46  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:39:46  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:39:46  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:39:46  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
07:39:46  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
07:39:46  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
07:39:46  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
07:39:46  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
07:39:46  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
07:39:46  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:39:46  47  ,0+TO_CHAR(ydate,'D')d
07:39:46  48  ,0+TO_CHAR(ydate,'W')w
07:39:46  49  -- mpm stands for minutes-past-midnight:
07:39:46  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:39:46  51  FROM q11
07:39:46  52  -- I dont want any NULL values from the LAG() functions:
07:39:46  53  WHERE lg32 > 0
07:39:46  54  ORDER BY pair,ydate
07:39:46  55  /

Table created.

Elapsed: 00:00:01.69
07:39:48 SQL> 
07:39:48 SQL> -- rpt
07:39:48 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9409
	-1	   10946

Elapsed: 00:00:00.03
07:39:48 SQL> 
07:39:48 SQL> -- Calc gains and ntiles
07:39:48 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.18
07:39:48 SQL> CREATE TABLE q15 COMPRESS AS
07:39:48   2  SELECT
07:39:48   3  pair
07:39:48   4  ,ydate
07:39:48   5  ,prdate -- Should be unique
07:39:48   6  ,trend -- +1 or -1
07:39:48   7  -- Use NTILE() to derive some attributes
07:39:48   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
07:39:48   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
07:39:48  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
07:39:48  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
07:39:48  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
07:39:48  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
07:39:48  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
07:39:48  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
07:39:48  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
07:39:48  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
07:39:48  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
07:39:48  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
07:39:48  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
07:39:48  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
07:39:48  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
07:39:48  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
07:39:48  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
07:39:48  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
07:39:48  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
07:39:48  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
07:39:48  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
07:39:48  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
07:39:48  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
07:39:48  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
07:39:48  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
07:39:48  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
07:39:48  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
07:39:48  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
07:39:48  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
07:39:48  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
07:39:48  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
07:39:48  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
07:39:48  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
07:39:48  41  ,hh    att32
07:39:48  42  ,d     att33
07:39:48  43  ,w     att34
07:39:48  44  ,mpm   att35
07:39:48  45  ,trend att36
07:39:48  46  ,ug8 g8
07:39:48  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
07:39:48  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
07:39:48  49  FROM q13
07:39:48  50  ORDER BY pair,ydate
07:39:48  51  /

Table created.

Elapsed: 00:00:05.63
07:39:53 SQL> 
07:39:53 SQL> -- rpt
07:39:53 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
07:39:53   2  GROUP BY pair,trend,gatt,gattn
07:39:53   3  ORDER BY pair,trend,gatt,gattn
07:39:53   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_cad 	-1 nup nup -.00002603	    5679
usd_cad 	-1 nup up  -.00400673	    2629
usd_cad 	-1 up  nup .004683724	    2565
usd_cad 	-1			       0
usd_cad 	 1 nup nup -.00011517	    4650
usd_cad 	 1 nup up  -.00422802	    2754
usd_cad 	 1 up  nup .004613081	    1982
usd_cad 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
07:39:53 SQL> 
07:39:53 SQL> -- rpt
07:39:53 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_cad 2010-12-24 07:35:00

Elapsed: 00:00:00.01
07:39:53 SQL> 
07:39:53 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.25
07:39:54 SQL> CREATE TABLE modsrc COMPRESS AS
07:39:54   2  SELECT
07:39:54   3  pair
07:39:54   4  ,ydate
07:39:54   5  ,prdate
07:39:54   6  ,trend
07:39:54   7  ,g8
07:39:54   8  ,gatt
07:39:54   9  ,gattn
07:39:54  10  FROM q15
07:39:54  11  /

Table created.

Elapsed: 00:00:00.08
07:39:54 SQL> 
07:39:54 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.29
07:39:54 SQL> 
07:39:54 SQL> -- rpt
07:39:54 SQL> 
07:39:54 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20739

Elapsed: 00:00:00.52
07:39:55 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20355

Elapsed: 00:00:00.00
07:39:55 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20355

Elapsed: 00:00:00.01
07:39:55 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20355

Elapsed: 00:00:00.00
07:39:55 SQL> 
07:39:55 SQL> DROP   TABLE cad_ms10 ;

Table dropped.

Elapsed: 00:00:00.20
07:39:55 SQL> CREATE TABLE cad_ms10 COMPRESS AS
07:39:55   2  SELECT
07:39:55   3  ydate
07:39:55   4  ,trend cad_trend
07:39:55   5  ,g8    cad_g8
07:39:55   6  ,gatt  cad_gatt
07:39:55   7  ,gattn cad_gattn
07:39:55   8  FROM modsrc
07:39:55   9  /

Table created.

Elapsed: 00:00:00.10
07:39:55 SQL> 
07:39:55 SQL> ANALYZE TABLE cad_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
07:39:55 SQL> 
07:39:55 SQL> -- rpt
07:39:55 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 15:40:01 2010-12-24 04:55:00	 9386	  -.0122      .0159
	-1 2010-09-16 20:05:01 2010-12-24 07:35:00	10873	 -.01105      .0176

Elapsed: 00:00:00.06
07:39:55 SQL> SELECT cad_trend,MIN(ydate),MAX(ydate),COUNT(cad_trend),MIN(cad_g8),MAX(cad_g8)FROM cad_ms10 GROUP BY cad_trend;

 CAD_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(CAD_TREND) MIN(CAD_G8) MAX(CAD_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 15:40:01 2010-12-24 04:55:00	       9409	 -.0122       .0159
	-1 2010-09-16 20:05:01 2010-12-24 07:35:00	      10946	-.01105       .0176

Elapsed: 00:00:00.03
07:39:55 SQL> 
07:39:55 SQL> -- I need a copy of q15 attributes
07:39:55 SQL> 
07:39:55 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.08
07:39:55 SQL> CREATE TABLE cad_att COMPRESS AS
07:39:55   2  SELECT
07:39:55   3  ydate
07:39:55   4  ,att00 cad_att00
07:39:55   5  ,att01 cad_att01
07:39:55   6  ,att02 cad_att02
07:39:55   7  ,att03 cad_att03
07:39:55   8  ,att04 cad_att04
07:39:55   9  ,att05 cad_att05
07:39:55  10  ,att06 cad_att06
07:39:55  11  ,att07 cad_att07
07:39:55  12  ,att08 cad_att08
07:39:55  13  ,att09 cad_att09
07:39:55  14  ,att10 cad_att10
07:39:55  15  ,att11 cad_att11
07:39:55  16  ,att12 cad_att12
07:39:55  17  ,att13 cad_att13
07:39:55  18  ,att14 cad_att14
07:39:55  19  ,att15 cad_att15
07:39:55  20  ,att16 cad_att16
07:39:55  21  ,att17 cad_att17
07:39:55  22  ,att18 cad_att18
07:39:55  23  ,att19 cad_att19
07:39:55  24  ,att20 cad_att20
07:39:55  25  ,att21 cad_att21
07:39:55  26  ,att22 cad_att22
07:39:55  27  ,att23 cad_att23
07:39:55  28  ,att24 cad_att24
07:39:55  29  ,att25 cad_att25
07:39:55  30  ,att26 cad_att26
07:39:55  31  ,att27 cad_att27
07:39:55  32  ,att28 cad_att28
07:39:55  33  ,att29 cad_att29
07:39:55  34  ,att30 cad_att30
07:39:55  35  ,att31 cad_att31
07:39:55  36  ,att32 cad_att32
07:39:55  37  ,att33 cad_att33
07:39:55  38  ,att34 cad_att34
07:39:55  39  ,att35 cad_att35
07:39:55  40  ,att36 cad_att36
07:39:55  41  FROM q15
07:39:55  42  /

Table created.

Elapsed: 00:00:00.20
07:39:55 SQL> 
07:39:55 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.62
07:39:56 SQL> 
07:39:56 SQL> -- rpt
07:39:56 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     20355

Elapsed: 00:00:00.00
07:39:56 SQL> 
07:39:56 SQL> --
07:39:56 SQL> -- chf10.sql
07:39:56 SQL> --
07:39:56 SQL> 
07:39:56 SQL> -- Creates views and tables for backtesting a forex SVM strategy
07:39:56 SQL> 
07:39:56 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.61
07:39:57 SQL> 
07:39:57 SQL> -- I created di5min here:
07:39:57 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
07:39:57 SQL> 
07:39:57 SQL> CREATE OR REPLACE VIEW q11 AS
07:39:57   2  SELECT
07:39:57   3  pair
07:39:57   4  ,ydate
07:39:57   5  ,prdate
07:39:57   6  ,rownum rnum -- acts as t in my time-series
07:39:57   7  ,clse
07:39:57   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
07:39:57   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
07:39:57  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
07:39:57  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
07:39:57  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
07:39:57  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
07:39:57  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
07:39:57  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
07:39:57  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
07:39:57  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
07:39:57  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
07:39:57  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
07:39:57  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
07:39:57  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
07:39:57  22  FROM di5min WHERE pair LIKE'%chf%'
07:39:57  23  ORDER BY ydate
07:39:57  24  /

View created.

Elapsed: 00:00:00.05
07:39:57 SQL> 
07:39:57 SQL> -- rpt
07:39:57 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_chf        20742

Elapsed: 00:00:00.38
07:39:57 SQL> 
07:39:57 SQL> -- Calc deltas and gains
07:39:57 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.17
07:39:57 SQL> 
07:39:57 SQL> CREATE TABLE q13 COMPRESS AS
07:39:57   2  SELECT
07:39:57   3  pair
07:39:57   4  ,ydate
07:39:57   5  ,prdate
07:39:57   6  ,rnum
07:39:57   7  ,ld8
07:39:57   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
07:39:57   9  -- step by 2
07:39:57  10  ,clse-lg6  d06
07:39:57  11  ,lg6 -lg8  d68
07:39:57  12  ,lg8 -lg10 d810
07:39:57  13  ,lg10-lg12 d1012
07:39:57  14  ,lg12-lg14 d1214
07:39:57  15  ,lg14-lg16 d1416
07:39:57  16  ,lg16-lg18 d1618
07:39:57  17  -- step by 4
07:39:57  18  ,lg6 -lg10 d610
07:39:57  19  ,lg8 -lg12 d812
07:39:57  20  ,lg10-lg14 d1014
07:39:57  21  ,lg12-lg16 d1216
07:39:57  22  --
07:39:57  23  ,ABS(clse-lg6 )dc6
07:39:57  24  ,ABS(clse-lg8 )dc8
07:39:57  25  ,ABS(clse-lg10)dc10
07:39:57  26  ,ABS(clse-lg12)dc12
07:39:57  27  ,ABS(clse-lg14)dc14
07:39:57  28  ,ABS(clse-lg16)dc16
07:39:57  29  ,ABS(clse-lg18)dc18
07:39:57  30  ,ABS(clse-lg20)dc20
07:39:57  31  ,ABS(clse-lg22)dc22
07:39:57  32  ,(ld8-clse) ug8
07:39:57  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
07:39:57  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
07:39:57  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
07:39:57  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
07:39:57  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
07:39:57  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
07:39:57  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
07:39:57  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
07:39:57  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
07:39:57  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
07:39:57  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
07:39:57  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
07:39:57  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
07:39:57  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
07:39:57  47  ,0+TO_CHAR(ydate,'D')d
07:39:57  48  ,0+TO_CHAR(ydate,'W')w
07:39:57  49  -- mpm stands for minutes-past-midnight:
07:39:57  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
07:39:57  51  FROM q11
07:39:57  52  -- I dont want any NULL values from the LAG() functions:
07:39:57  53  WHERE lg32 > 0
07:39:57  54  ORDER BY pair,ydate
07:39:57  55  /

Table created.

Elapsed: 00:00:02.24
07:40:00 SQL> 
07:40:00 SQL> -- rpt
07:40:00 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9555
	-1	   10803

Elapsed: 00:00:00.03
07:40:00 SQL> 
07:40:00 SQL> -- Calc gains and ntiles
07:40:00 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.21
07:40:00 SQL> CREATE TABLE q15 COMPRESS AS
07:40:00   2  SELECT
07:40:00   3  pair
07:40:00   4  ,ydate
07:40:00   5  ,prdate -- Should be unique
07:40:00   6  ,trend -- +1 or -1
07:40:00   7  -- Use NTILE() to derive some attributes
07:40:00   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
07:40:00   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
07:40:00  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
07:40:00  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
07:40:00  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
07:40:00  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
07:40:00  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
07:40:00  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
07:40:00  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
07:40:00  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
07:40:00  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
07:40:00  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
07:40:00  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
07:40:00  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
07:40:00  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
07:40:00  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
07:40:00  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
07:40:00  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
07:40:00  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
07:40:00  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
07:40:00  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
07:40:00  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
07:40:00  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
07:40:00  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
07:40:00  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
07:40:00  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
07:40:00  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
07:40:00  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
07:40:00  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
07:40:00  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
07:40:00  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
07:40:00  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
07:40:00  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
07:40:00  41  ,hh    att32
07:40:00  42  ,d     att33
07:40:00  43  ,w     att34
07:40:00  44  ,mpm   att35
07:40:00  45  ,trend att36
07:40:00  46  ,ug8 g8
07:40:00  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
07:40:00  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
07:40:00  49  FROM q13
07:40:00  50  ORDER BY pair,ydate
07:40:00  51  /

Table created.

Elapsed: 00:00:05.38
07:40:05 SQL> 
07:40:05 SQL> -- rpt
07:40:05 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
07:40:05   2  GROUP BY pair,trend,gatt,gattn
07:40:05   3  ORDER BY pair,trend,gatt,gattn
07:40:05   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_chf 	-1 nup nup .000023398	    4911
usd_chf 	-1 nup up  -.00495135	    3140
usd_chf 	-1 up  nup .005077328	    2658
usd_chf 	-1			       0
usd_chf 	 1 nup nup -.00002108	    4528
usd_chf 	 1 nup up  -.00452927	    2921
usd_chf 	 1 up  nup .004634476	    2104
usd_chf 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
07:40:05 SQL> 
07:40:05 SQL> -- rpt
07:40:05 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_chf 2010-12-24 07:35:00

Elapsed: 00:00:00.02
07:40:05 SQL> 
07:40:05 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.11
07:40:05 SQL> CREATE TABLE modsrc COMPRESS AS
07:40:05   2  SELECT
07:40:05   3  pair
07:40:05   4  ,ydate
07:40:05   5  ,prdate
07:40:05   6  ,trend
07:40:05   7  ,g8
07:40:05   8  ,gatt
07:40:05   9  ,gattn
07:40:05  10  FROM q15
07:40:05  11  /

Table created.

Elapsed: 00:00:00.10
07:40:05 SQL> 
07:40:05 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
07:40:06 SQL> 
07:40:06 SQL> -- rpt
07:40:06 SQL> 
07:40:06 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20742

Elapsed: 00:00:00.35
07:40:06 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.00
07:40:06 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.01
07:40:06 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.00
07:40:06 SQL> 
07:40:06 SQL> DROP   TABLE chf_ms10 ;

Table dropped.

Elapsed: 00:00:00.03
07:40:06 SQL> CREATE TABLE chf_ms10 COMPRESS AS
07:40:06   2  SELECT
07:40:06   3  ydate
07:40:06   4  ,trend chf_trend
07:40:06   5  ,g8    chf_g8
07:40:06   6  ,gatt  chf_gatt
07:40:06   7  ,gattn chf_gattn
07:40:06   8  FROM modsrc
07:40:06   9  /

Table created.

Elapsed: 00:00:00.06
07:40:06 SQL> 
07:40:06 SQL> ANALYZE TABLE chf_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
07:40:06 SQL> 
07:40:06 SQL> -- rpt
07:40:06 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 15:40:01 2010-12-24 07:35:00	 9553	 -.01775      .0155
	-1 2010-09-16 20:55:01 2010-12-24 07:25:00	10709	 -.01825     .01545

Elapsed: 00:00:00.02
07:40:06 SQL> SELECT chf_trend,MIN(ydate),MAX(ydate),COUNT(chf_trend),MIN(chf_g8),MAX(chf_g8)FROM chf_ms10 GROUP BY chf_trend;

 CHF_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(CHF_TREND) MIN(CHF_G8) MAX(CHF_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 15:40:01 2010-12-24 07:35:00	       9555	-.01775       .0155
	-1 2010-09-16 20:55:01 2010-12-24 07:25:00	      10803	-.01825      .01545

Elapsed: 00:00:00.01
07:40:06 SQL> 
07:40:06 SQL> -- I need a copy of q15 attributes
07:40:06 SQL> 
07:40:06 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.08
07:40:06 SQL> CREATE TABLE chf_att COMPRESS AS
07:40:06   2  SELECT
07:40:06   3  ydate
07:40:06   4  ,att00 chf_att00
07:40:06   5  ,att01 chf_att01
07:40:06   6  ,att02 chf_att02
07:40:06   7  ,att03 chf_att03
07:40:06   8  ,att04 chf_att04
07:40:06   9  ,att05 chf_att05
07:40:06  10  ,att06 chf_att06
07:40:06  11  ,att07 chf_att07
07:40:06  12  ,att08 chf_att08
07:40:06  13  ,att09 chf_att09
07:40:06  14  ,att10 chf_att10
07:40:06  15  ,att11 chf_att11
07:40:06  16  ,att12 chf_att12
07:40:06  17  ,att13 chf_att13
07:40:06  18  ,att14 chf_att14
07:40:06  19  ,att15 chf_att15
07:40:06  20  ,att16 chf_att16
07:40:06  21  ,att17 chf_att17
07:40:06  22  ,att18 chf_att18
07:40:06  23  ,att19 chf_att19
07:40:06  24  ,att20 chf_att20
07:40:06  25  ,att21 chf_att21
07:40:06  26  ,att22 chf_att22
07:40:06  27  ,att23 chf_att23
07:40:06  28  ,att24 chf_att24
07:40:06  29  ,att25 chf_att25
07:40:06  30  ,att26 chf_att26
07:40:06  31  ,att27 chf_att27
07:40:06  32  ,att28 chf_att28
07:40:06  33  ,att29 chf_att29
07:40:06  34  ,att30 chf_att30
07:40:06  35  ,att31 chf_att31
07:40:06  36  ,att32 chf_att32
07:40:06  37  ,att33 chf_att33
07:40:06  38  ,att34 chf_att34
07:40:06  39  ,att35 chf_att35
07:40:06  40  ,att36 chf_att36
07:40:06  41  FROM q15
07:40:06  42  /

Table created.

Elapsed: 00:00:00.18
07:40:07 SQL> 
07:40:07 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.50
07:40:07 SQL> 
07:40:07 SQL> -- rpt
07:40:07 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     20358

Elapsed: 00:00:00.00
07:40:07 SQL> 
07:40:07 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
