
SQL*Plus: Release 11.2.0.1.0 Production on Tue Dec 21 02:03:38 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

02:03:38 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
02:03:38 SQL> 02:03:38 SQL> --
02:03:38 SQL> -- eur10.sql
02:03:38 SQL> --
02:03:38 SQL> 
02:03:38 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:03:38 SQL> 
02:03:38 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.02
02:03:38 SQL> 
02:03:38 SQL> -- I created di5min here:
02:03:38 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:03:38 SQL> 
02:03:38 SQL> CREATE OR REPLACE VIEW q11 AS
02:03:38   2  SELECT
02:03:38   3  pair
02:03:38   4  ,ydate
02:03:38   5  ,prdate
02:03:38   6  ,rownum rnum -- acts as t in my time-series
02:03:38   7  ,clse
02:03:38   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
02:03:38   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
02:03:38  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
02:03:38  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
02:03:38  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
02:03:38  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
02:03:38  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
02:03:38  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
02:03:38  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
02:03:38  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
02:03:38  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
02:03:38  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
02:03:38  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
02:03:38  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
02:03:38  22  FROM di5min WHERE pair LIKE'%eur%'
02:03:38  23  ORDER BY ydate
02:03:38  24  /

View created.

Elapsed: 00:00:00.05
02:03:38 SQL> 
02:03:38 SQL> -- rpt
02:03:38 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
eur_usd        20579

Elapsed: 00:00:00.35
02:03:38 SQL> 
02:03:38 SQL> -- Calc deltas and gains
02:03:38 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.04
02:03:38 SQL> 
02:03:38 SQL> CREATE TABLE q13 COMPRESS AS
02:03:38   2  SELECT
02:03:38   3  pair
02:03:38   4  ,ydate
02:03:38   5  ,prdate
02:03:38   6  ,rnum
02:03:38   7  ,ld8
02:03:38   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
02:03:38   9  -- step by 2
02:03:38  10  ,clse-lg6  d06
02:03:38  11  ,lg6 -lg8  d68
02:03:38  12  ,lg8 -lg10 d810
02:03:38  13  ,lg10-lg12 d1012
02:03:38  14  ,lg12-lg14 d1214
02:03:38  15  ,lg14-lg16 d1416
02:03:38  16  ,lg16-lg18 d1618
02:03:38  17  -- step by 4
02:03:38  18  ,lg6 -lg10 d610
02:03:38  19  ,lg8 -lg12 d812
02:03:38  20  ,lg10-lg14 d1014
02:03:38  21  ,lg12-lg16 d1216
02:03:38  22  --
02:03:38  23  ,ABS(clse-lg6 )dc6
02:03:38  24  ,ABS(clse-lg8 )dc8
02:03:38  25  ,ABS(clse-lg10)dc10
02:03:38  26  ,ABS(clse-lg12)dc12
02:03:38  27  ,ABS(clse-lg14)dc14
02:03:38  28  ,ABS(clse-lg16)dc16
02:03:38  29  ,ABS(clse-lg18)dc18
02:03:38  30  ,ABS(clse-lg20)dc20
02:03:38  31  ,ABS(clse-lg22)dc22
02:03:38  32  ,(ld8-clse) ug8
02:03:38  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:03:38  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:03:38  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:03:38  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:03:38  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:03:38  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:03:38  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:03:38  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
02:03:38  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
02:03:38  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
02:03:38  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
02:03:38  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
02:03:38  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
02:03:38  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:03:38  47  ,0+TO_CHAR(ydate,'D')d
02:03:38  48  ,0+TO_CHAR(ydate,'W')w
02:03:38  49  -- mpm stands for minutes-past-midnight:
02:03:38  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:03:38  51  FROM q11
02:03:38  52  -- I dont want any NULL values from the LAG() functions:
02:03:38  53  WHERE lg32 > 0
02:03:38  54  ORDER BY pair,ydate
02:03:38  55  /

Table created.

Elapsed: 00:00:01.94
02:03:40 SQL> 
02:03:40 SQL> -- rpt
02:03:40 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	   10051
	-1	   10144

Elapsed: 00:00:00.04
02:03:40 SQL> 
02:03:40 SQL> -- Calc gains and ntiles
02:03:40 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.30
02:03:41 SQL> CREATE TABLE q15 COMPRESS AS
02:03:41   2  SELECT
02:03:41   3  pair
02:03:41   4  ,ydate
02:03:41   5  ,prdate -- Should be unique
02:03:41   6  ,trend -- +1 or -1
02:03:41   7  -- Use NTILE() to derive some attributes
02:03:41   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
02:03:41   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
02:03:41  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
02:03:41  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
02:03:41  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
02:03:41  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
02:03:41  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
02:03:41  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
02:03:41  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
02:03:41  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
02:03:41  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
02:03:41  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
02:03:41  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
02:03:41  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
02:03:41  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
02:03:41  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
02:03:41  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
02:03:41  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
02:03:41  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
02:03:41  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
02:03:41  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
02:03:41  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
02:03:41  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
02:03:41  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
02:03:41  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
02:03:41  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
02:03:41  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
02:03:41  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
02:03:41  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
02:03:41  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
02:03:41  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
02:03:41  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
02:03:41  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
02:03:41  41  ,hh    att32
02:03:41  42  ,d     att33
02:03:41  43  ,w     att34
02:03:41  44  ,mpm   att35
02:03:41  45  ,trend att36
02:03:41  46  ,ug8 g8
02:03:41  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
02:03:41  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
02:03:41  49  FROM q13
02:03:41  50  ORDER BY pair,ydate
02:03:41  51  /

Table created.

Elapsed: 00:00:05.28
02:03:46 SQL> 
02:03:46 SQL> -- rpt
02:03:46 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
02:03:46   2  GROUP BY pair,trend,gatt,gattn
02:03:46   3  ORDER BY pair,trend,gatt,gattn
02:03:46   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
eur_usd 	-1 nup nup .000012723	    2971
eur_usd 	-1 nup up  -.00601767	    3611
eur_usd 	-1 up  nup .006085451	    3495
eur_usd 	-1			       0
eur_usd 	 1 nup nup -.00009744	    2987
eur_usd 	 1 nup up  -.00626447	    3355
eur_usd 	 1 up  nup .006596746	    3680
eur_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
02:03:46 SQL> 
02:03:46 SQL> -- rpt
02:03:46 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
eur_usd 2010-12-21 02:00:00

Elapsed: 00:00:00.01
02:03:46 SQL> 
02:03:46 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.04
02:03:46 SQL> CREATE TABLE modsrc COMPRESS AS
02:03:46   2  SELECT
02:03:46   3  pair
02:03:46   4  ,ydate
02:03:46   5  ,prdate
02:03:46   6  ,trend
02:03:46   7  ,g8
02:03:46   8  ,gatt
02:03:46   9  ,gattn
02:03:46  10  FROM q15
02:03:46  11  /

Table created.

Elapsed: 00:00:00.09
02:03:46 SQL> 
02:03:46 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
02:03:46 SQL> 
02:03:46 SQL> -- rpt
02:03:46 SQL> 
02:03:46 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20579

Elapsed: 00:00:00.34
02:03:47 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20195

Elapsed: 00:00:00.00
02:03:47 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20195

Elapsed: 00:00:00.00
02:03:47 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20195

Elapsed: 00:00:00.00
02:03:47 SQL> 
02:03:47 SQL> DROP   TABLE eur_ms10 ;

Table dropped.

Elapsed: 00:00:00.04
02:03:47 SQL> CREATE TABLE eur_ms10 COMPRESS AS
02:03:47   2  SELECT
02:03:47   3  ydate
02:03:47   4  ,trend eur_trend
02:03:47   5  ,g8    eur_g8
02:03:47   6  ,gatt  eur_gatt
02:03:47   7  ,gattn eur_gattn
02:03:47   8  FROM modsrc
02:03:47   9  /

Table created.

Elapsed: 00:00:00.06
02:03:47 SQL> 
02:03:47 SQL> ANALYZE TABLE eur_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
02:03:47 SQL> 
02:03:47 SQL> -- rpt
02:03:47 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-14 05:00:01 2010-12-21 02:00:00	10022	  -.0218     .02165
	-1 2010-09-14 04:55:01 2010-12-21 00:45:00	10077	 -.02085      .0196

Elapsed: 00:00:00.02
02:03:47 SQL> SELECT eur_trend,MIN(ydate),MAX(ydate),COUNT(eur_trend),MIN(eur_g8),MAX(eur_g8)FROM eur_ms10 GROUP BY eur_trend;

 EUR_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(EUR_TREND) MIN(EUR_G8) MAX(EUR_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-14 05:00:01 2010-12-21 02:00:00	      10051	 -.0218      .02165
	-1 2010-09-14 04:55:01 2010-12-21 00:45:00	      10144	-.02085       .0196

Elapsed: 00:00:00.01
02:03:47 SQL> 
02:03:47 SQL> -- I need a copy of q15 attributes
02:03:47 SQL> 
02:03:47 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.03
02:03:47 SQL> CREATE TABLE eur_att COMPRESS AS
02:03:47   2  SELECT
02:03:47   3  ydate
02:03:47   4  ,att00 eur_att00
02:03:47   5  ,att01 eur_att01
02:03:47   6  ,att02 eur_att02
02:03:47   7  ,att03 eur_att03
02:03:47   8  ,att04 eur_att04
02:03:47   9  ,att05 eur_att05
02:03:47  10  ,att06 eur_att06
02:03:47  11  ,att07 eur_att07
02:03:47  12  ,att08 eur_att08
02:03:47  13  ,att09 eur_att09
02:03:47  14  ,att10 eur_att10
02:03:47  15  ,att11 eur_att11
02:03:47  16  ,att12 eur_att12
02:03:47  17  ,att13 eur_att13
02:03:47  18  ,att14 eur_att14
02:03:47  19  ,att15 eur_att15
02:03:47  20  ,att16 eur_att16
02:03:47  21  ,att17 eur_att17
02:03:47  22  ,att18 eur_att18
02:03:47  23  ,att19 eur_att19
02:03:47  24  ,att20 eur_att20
02:03:47  25  ,att21 eur_att21
02:03:47  26  ,att22 eur_att22
02:03:47  27  ,att23 eur_att23
02:03:47  28  ,att24 eur_att24
02:03:47  29  ,att25 eur_att25
02:03:47  30  ,att26 eur_att26
02:03:47  31  ,att27 eur_att27
02:03:47  32  ,att28 eur_att28
02:03:47  33  ,att29 eur_att29
02:03:47  34  ,att30 eur_att30
02:03:47  35  ,att31 eur_att31
02:03:47  36  ,att32 eur_att32
02:03:47  37  ,att33 eur_att33
02:03:47  38  ,att34 eur_att34
02:03:47  39  ,att35 eur_att35
02:03:47  40  ,att36 eur_att36
02:03:47  41  FROM q15
02:03:47  42  /

Table created.

Elapsed: 00:00:00.17
02:03:47 SQL> 
02:03:47 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
02:03:48 SQL> 
02:03:48 SQL> -- rpt
02:03:48 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     20195

Elapsed: 00:00:00.00
02:03:48 SQL> 
02:03:48 SQL> --
02:03:48 SQL> -- aud10.sql
02:03:48 SQL> --
02:03:48 SQL> 
02:03:48 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:03:48 SQL> 
02:03:48 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.32
02:03:48 SQL> 
02:03:48 SQL> -- I created di5min here:
02:03:48 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:03:48 SQL> 
02:03:48 SQL> CREATE OR REPLACE VIEW q11 AS
02:03:48   2  SELECT
02:03:48   3  pair
02:03:48   4  ,ydate
02:03:48   5  ,prdate
02:03:48   6  ,rownum rnum -- acts as t in my time-series
02:03:48   7  ,clse
02:03:48   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
02:03:48   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
02:03:48  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
02:03:48  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
02:03:48  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
02:03:48  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
02:03:48  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
02:03:48  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
02:03:48  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
02:03:48  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
02:03:48  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
02:03:48  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
02:03:48  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
02:03:48  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
02:03:48  22  FROM di5min WHERE pair LIKE'%aud%'
02:03:48  23  ORDER BY ydate
02:03:48  24  /

View created.

Elapsed: 00:00:00.05
02:03:48 SQL> 
02:03:48 SQL> -- rpt
02:03:48 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
aud_usd        20576

Elapsed: 00:00:00.35
02:03:48 SQL> 
02:03:48 SQL> -- Calc deltas and gains
02:03:48 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.24
02:03:49 SQL> 
02:03:49 SQL> CREATE TABLE q13 COMPRESS AS
02:03:49   2  SELECT
02:03:49   3  pair
02:03:49   4  ,ydate
02:03:49   5  ,prdate
02:03:49   6  ,rnum
02:03:49   7  ,ld8
02:03:49   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
02:03:49   9  -- step by 2
02:03:49  10  ,clse-lg6  d06
02:03:49  11  ,lg6 -lg8  d68
02:03:49  12  ,lg8 -lg10 d810
02:03:49  13  ,lg10-lg12 d1012
02:03:49  14  ,lg12-lg14 d1214
02:03:49  15  ,lg14-lg16 d1416
02:03:49  16  ,lg16-lg18 d1618
02:03:49  17  -- step by 4
02:03:49  18  ,lg6 -lg10 d610
02:03:49  19  ,lg8 -lg12 d812
02:03:49  20  ,lg10-lg14 d1014
02:03:49  21  ,lg12-lg16 d1216
02:03:49  22  --
02:03:49  23  ,ABS(clse-lg6 )dc6
02:03:49  24  ,ABS(clse-lg8 )dc8
02:03:49  25  ,ABS(clse-lg10)dc10
02:03:49  26  ,ABS(clse-lg12)dc12
02:03:49  27  ,ABS(clse-lg14)dc14
02:03:49  28  ,ABS(clse-lg16)dc16
02:03:49  29  ,ABS(clse-lg18)dc18
02:03:49  30  ,ABS(clse-lg20)dc20
02:03:49  31  ,ABS(clse-lg22)dc22
02:03:49  32  ,(ld8-clse) ug8
02:03:49  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:03:49  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:03:49  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:03:49  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:03:49  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:03:49  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:03:49  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:03:49  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
02:03:49  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
02:03:49  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
02:03:49  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
02:03:49  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
02:03:49  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
02:03:49  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:03:49  47  ,0+TO_CHAR(ydate,'D')d
02:03:49  48  ,0+TO_CHAR(ydate,'W')w
02:03:49  49  -- mpm stands for minutes-past-midnight:
02:03:49  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:03:49  51  FROM q11
02:03:49  52  -- I dont want any NULL values from the LAG() functions:
02:03:49  53  WHERE lg32 > 0
02:03:49  54  ORDER BY pair,ydate
02:03:49  55  /

Table created.

Elapsed: 00:00:01.71
02:03:50 SQL> 
02:03:50 SQL> -- rpt
02:03:50 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	   10539
	-1	    9653

Elapsed: 00:00:00.02
02:03:50 SQL> 
02:03:50 SQL> -- Calc gains and ntiles
02:03:50 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.15
02:03:50 SQL> CREATE TABLE q15 COMPRESS AS
02:03:50   2  SELECT
02:03:50   3  pair
02:03:50   4  ,ydate
02:03:50   5  ,prdate -- Should be unique
02:03:50   6  ,trend -- +1 or -1
02:03:50   7  -- Use NTILE() to derive some attributes
02:03:50   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
02:03:50   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
02:03:50  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
02:03:50  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
02:03:50  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
02:03:50  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
02:03:50  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
02:03:50  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
02:03:50  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
02:03:50  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
02:03:50  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
02:03:50  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
02:03:50  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
02:03:50  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
02:03:50  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
02:03:50  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
02:03:50  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
02:03:50  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
02:03:50  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
02:03:50  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
02:03:50  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
02:03:50  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
02:03:50  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
02:03:50  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
02:03:50  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
02:03:50  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
02:03:50  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
02:03:50  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
02:03:50  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
02:03:50  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
02:03:50  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
02:03:50  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
02:03:50  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
02:03:50  41  ,hh    att32
02:03:50  42  ,d     att33
02:03:50  43  ,w     att34
02:03:50  44  ,mpm   att35
02:03:50  45  ,trend att36
02:03:50  46  ,ug8 g8
02:03:50  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
02:03:50  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
02:03:50  49  FROM q13
02:03:50  50  ORDER BY pair,ydate
02:03:50  51  /

Table created.

Elapsed: 00:00:05.30
02:03:56 SQL> 
02:03:56 SQL> -- rpt
02:03:56 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
02:03:56   2  GROUP BY pair,trend,gatt,gattn
02:03:56   3  ORDER BY pair,trend,gatt,gattn
02:03:56   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
aud_usd 	-1 nup nup .000015319	    3618
aud_usd 	-1 nup up  -.00519991	    2596
aud_usd 	-1 up  nup .005271094	    3415
aud_usd 	-1			       0
aud_usd 	 1 nup nup .000013513	    4010
aud_usd 	 1 nup up  -.00495998	    3189
aud_usd 	 1 up  nup .005213215	    3268
aud_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
02:03:56 SQL> 
02:03:56 SQL> -- rpt
02:03:56 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
aud_usd 2010-12-21 02:00:00

Elapsed: 00:00:00.01
02:03:56 SQL> 
02:03:56 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
02:03:56 SQL> CREATE TABLE modsrc COMPRESS AS
02:03:56   2  SELECT
02:03:56   3  pair
02:03:56   4  ,ydate
02:03:56   5  ,prdate
02:03:56   6  ,trend
02:03:56   7  ,g8
02:03:56   8  ,gatt
02:03:56   9  ,gattn
02:03:56  10  FROM q15
02:03:56  11  /

Table created.

Elapsed: 00:00:00.09
02:03:56 SQL> 
02:03:56 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
02:03:56 SQL> 
02:03:56 SQL> -- rpt
02:03:56 SQL> 
02:03:56 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20576

Elapsed: 00:00:00.35
02:03:57 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20192

Elapsed: 00:00:00.00
02:03:57 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20192

Elapsed: 00:00:00.01
02:03:57 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20192

Elapsed: 00:00:00.00
02:03:57 SQL> 
02:03:57 SQL> DROP   TABLE aud_ms10 ;

Table dropped.

Elapsed: 00:00:00.11
02:03:57 SQL> CREATE TABLE aud_ms10 COMPRESS AS
02:03:57   2  SELECT
02:03:57   3  ydate
02:03:57   4  ,trend aud_trend
02:03:57   5  ,g8    aud_g8
02:03:57   6  ,gatt  aud_gatt
02:03:57   7  ,gattn aud_gattn
02:03:57   8  FROM modsrc
02:03:57   9  /

Table created.

Elapsed: 00:00:00.06
02:03:57 SQL> 
02:03:57 SQL> ANALYZE TABLE aud_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
02:03:57 SQL> 
02:03:57 SQL> -- rpt
02:03:57 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-14 07:10:01 2010-12-21 02:00:00	10467	  -.0203      .0136
	-1 2010-09-14 04:55:01 2010-12-21 00:50:00	 9629	  -.0196      .0148

Elapsed: 00:00:00.01
02:03:57 SQL> SELECT aud_trend,MIN(ydate),MAX(ydate),COUNT(aud_trend),MIN(aud_g8),MAX(aud_g8)FROM aud_ms10 GROUP BY aud_trend;

 AUD_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(AUD_TREND) MIN(AUD_G8) MAX(AUD_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-14 07:10:01 2010-12-21 02:00:00	      10539	 -.0203       .0136
	-1 2010-09-14 04:55:01 2010-12-21 00:50:00	       9653	 -.0196       .0148

Elapsed: 00:00:00.02
02:03:57 SQL> 
02:03:57 SQL> -- I need a copy of q15 attributes
02:03:57 SQL> 
02:03:57 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.04
02:03:57 SQL> CREATE TABLE aud_att COMPRESS AS
02:03:57   2  SELECT
02:03:57   3  ydate
02:03:57   4  ,att00 aud_att00
02:03:57   5  ,att01 aud_att01
02:03:57   6  ,att02 aud_att02
02:03:57   7  ,att03 aud_att03
02:03:57   8  ,att04 aud_att04
02:03:57   9  ,att05 aud_att05
02:03:57  10  ,att06 aud_att06
02:03:57  11  ,att07 aud_att07
02:03:57  12  ,att08 aud_att08
02:03:57  13  ,att09 aud_att09
02:03:57  14  ,att10 aud_att10
02:03:57  15  ,att11 aud_att11
02:03:57  16  ,att12 aud_att12
02:03:57  17  ,att13 aud_att13
02:03:57  18  ,att14 aud_att14
02:03:57  19  ,att15 aud_att15
02:03:57  20  ,att16 aud_att16
02:03:57  21  ,att17 aud_att17
02:03:57  22  ,att18 aud_att18
02:03:57  23  ,att19 aud_att19
02:03:57  24  ,att20 aud_att20
02:03:57  25  ,att21 aud_att21
02:03:57  26  ,att22 aud_att22
02:03:57  27  ,att23 aud_att23
02:03:57  28  ,att24 aud_att24
02:03:57  29  ,att25 aud_att25
02:03:57  30  ,att26 aud_att26
02:03:57  31  ,att27 aud_att27
02:03:57  32  ,att28 aud_att28
02:03:57  33  ,att29 aud_att29
02:03:57  34  ,att30 aud_att30
02:03:57  35  ,att31 aud_att31
02:03:57  36  ,att32 aud_att32
02:03:57  37  ,att33 aud_att33
02:03:57  38  ,att34 aud_att34
02:03:57  39  ,att35 aud_att35
02:03:57  40  ,att36 aud_att36
02:03:57  41  FROM q15
02:03:57  42  /

Table created.

Elapsed: 00:00:00.18
02:03:57 SQL> 
02:03:57 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
02:03:58 SQL> 
02:03:58 SQL> -- rpt
02:03:58 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     20192

Elapsed: 00:00:00.00
02:03:58 SQL> 
02:03:58 SQL> --
02:03:58 SQL> -- gbp10.sql
02:03:58 SQL> --
02:03:58 SQL> 
02:03:58 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:03:58 SQL> 
02:03:58 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.40
02:03:58 SQL> 
02:03:58 SQL> -- I created di5min here:
02:03:58 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:03:58 SQL> 
02:03:58 SQL> CREATE OR REPLACE VIEW q11 AS
02:03:58   2  SELECT
02:03:58   3  pair
02:03:58   4  ,ydate
02:03:58   5  ,prdate
02:03:58   6  ,rownum rnum -- acts as t in my time-series
02:03:58   7  ,clse
02:03:58   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
02:03:58   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
02:03:58  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
02:03:58  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
02:03:58  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
02:03:58  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
02:03:58  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
02:03:58  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
02:03:58  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
02:03:58  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
02:03:58  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
02:03:58  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
02:03:58  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
02:03:58  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
02:03:58  22  FROM di5min WHERE pair LIKE'%gbp%'
02:03:58  23  ORDER BY ydate
02:03:58  24  /

View created.

Elapsed: 00:00:00.05
02:03:58 SQL> 
02:03:58 SQL> -- rpt
02:03:58 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
gbp_usd        20578

Elapsed: 00:00:00.34
02:03:59 SQL> 
02:03:59 SQL> -- Calc deltas and gains
02:03:59 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.18
02:03:59 SQL> 
02:03:59 SQL> CREATE TABLE q13 COMPRESS AS
02:03:59   2  SELECT
02:03:59   3  pair
02:03:59   4  ,ydate
02:03:59   5  ,prdate
02:03:59   6  ,rnum
02:03:59   7  ,ld8
02:03:59   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
02:03:59   9  -- step by 2
02:03:59  10  ,clse-lg6  d06
02:03:59  11  ,lg6 -lg8  d68
02:03:59  12  ,lg8 -lg10 d810
02:03:59  13  ,lg10-lg12 d1012
02:03:59  14  ,lg12-lg14 d1214
02:03:59  15  ,lg14-lg16 d1416
02:03:59  16  ,lg16-lg18 d1618
02:03:59  17  -- step by 4
02:03:59  18  ,lg6 -lg10 d610
02:03:59  19  ,lg8 -lg12 d812
02:03:59  20  ,lg10-lg14 d1014
02:03:59  21  ,lg12-lg16 d1216
02:03:59  22  --
02:03:59  23  ,ABS(clse-lg6 )dc6
02:03:59  24  ,ABS(clse-lg8 )dc8
02:03:59  25  ,ABS(clse-lg10)dc10
02:03:59  26  ,ABS(clse-lg12)dc12
02:03:59  27  ,ABS(clse-lg14)dc14
02:03:59  28  ,ABS(clse-lg16)dc16
02:03:59  29  ,ABS(clse-lg18)dc18
02:03:59  30  ,ABS(clse-lg20)dc20
02:03:59  31  ,ABS(clse-lg22)dc22
02:03:59  32  ,(ld8-clse) ug8
02:03:59  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:03:59  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:03:59  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:03:59  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:03:59  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:03:59  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:03:59  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:03:59  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
02:03:59  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
02:03:59  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
02:03:59  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
02:03:59  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
02:03:59  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
02:03:59  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:03:59  47  ,0+TO_CHAR(ydate,'D')d
02:03:59  48  ,0+TO_CHAR(ydate,'W')w
02:03:59  49  -- mpm stands for minutes-past-midnight:
02:03:59  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:03:59  51  FROM q11
02:03:59  52  -- I dont want any NULL values from the LAG() functions:
02:03:59  53  WHERE lg32 > 0
02:03:59  54  ORDER BY pair,ydate
02:03:59  55  /

Table created.

Elapsed: 00:00:01.73
02:04:00 SQL> 
02:04:00 SQL> -- rpt
02:04:00 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9938
	-1	   10256

Elapsed: 00:00:00.06
02:04:01 SQL> 
02:04:01 SQL> -- Calc gains and ntiles
02:04:01 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.18
02:04:01 SQL> CREATE TABLE q15 COMPRESS AS
02:04:01   2  SELECT
02:04:01   3  pair
02:04:01   4  ,ydate
02:04:01   5  ,prdate -- Should be unique
02:04:01   6  ,trend -- +1 or -1
02:04:01   7  -- Use NTILE() to derive some attributes
02:04:01   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
02:04:01   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
02:04:01  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
02:04:01  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
02:04:01  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
02:04:01  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
02:04:01  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
02:04:01  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
02:04:01  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
02:04:01  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
02:04:01  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
02:04:01  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
02:04:01  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
02:04:01  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
02:04:01  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
02:04:01  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
02:04:01  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
02:04:01  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
02:04:01  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
02:04:01  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
02:04:01  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
02:04:01  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
02:04:01  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
02:04:01  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
02:04:01  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
02:04:01  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
02:04:01  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
02:04:01  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
02:04:01  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
02:04:01  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
02:04:01  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
02:04:01  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
02:04:01  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
02:04:01  41  ,hh    att32
02:04:01  42  ,d     att33
02:04:01  43  ,w     att34
02:04:01  44  ,mpm   att35
02:04:01  45  ,trend att36
02:04:01  46  ,ug8 g8
02:04:01  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
02:04:01  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
02:04:01  49  FROM q13
02:04:01  50  ORDER BY pair,ydate
02:04:01  51  /

Table created.

Elapsed: 00:00:05.41
02:04:06 SQL> 
02:04:06 SQL> -- rpt
02:04:06 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
02:04:06   2  GROUP BY pair,trend,gatt,gattn
02:04:06   3  ORDER BY pair,trend,gatt,gattn
02:04:06   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
gbp_usd 	-1 nup nup .000083147	    3785
gbp_usd 	-1 nup up  -.00589463	    3177
gbp_usd 	-1 up  nup .005769348	    3229
gbp_usd 	-1			       0
gbp_usd 	 1 nup nup -.00007572	    3649
gbp_usd 	 1 nup up  -.00551363	    3214
gbp_usd 	 1 up  nup .006215711	    3044
gbp_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
02:04:06 SQL> 
02:04:06 SQL> -- rpt
02:04:06 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
gbp_usd 2010-12-21 02:00:00

Elapsed: 00:00:00.02
02:04:06 SQL> 
02:04:06 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
02:04:06 SQL> CREATE TABLE modsrc COMPRESS AS
02:04:06   2  SELECT
02:04:06   3  pair
02:04:06   4  ,ydate
02:04:06   5  ,prdate
02:04:06   6  ,trend
02:04:06   7  ,g8
02:04:06   8  ,gatt
02:04:06   9  ,gattn
02:04:06  10  FROM q15
02:04:06  11  /

Table created.

Elapsed: 00:00:00.09
02:04:06 SQL> 
02:04:06 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
02:04:07 SQL> 
02:04:07 SQL> -- rpt
02:04:07 SQL> 
02:04:07 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20578

Elapsed: 00:00:00.34
02:04:07 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20194

Elapsed: 00:00:00.01
02:04:07 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20194

Elapsed: 00:00:00.00
02:04:07 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20194

Elapsed: 00:00:00.01
02:04:07 SQL> 
02:04:07 SQL> DROP   TABLE gbp_ms10 ;

Table dropped.

Elapsed: 00:00:00.12
02:04:07 SQL> CREATE TABLE gbp_ms10 COMPRESS AS
02:04:07   2  SELECT
02:04:07   3  ydate
02:04:07   4  ,trend gbp_trend
02:04:07   5  ,g8    gbp_g8
02:04:07   6  ,gatt  gbp_gatt
02:04:07   7  ,gattn gbp_gattn
02:04:07   8  FROM modsrc
02:04:07   9  /

Table created.

Elapsed: 00:00:00.07
02:04:07 SQL> 
02:04:07 SQL> ANALYZE TABLE gbp_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
02:04:07 SQL> 
02:04:07 SQL> -- rpt
02:04:07 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-14 07:35:01 2010-12-21 02:00:00	 9907	  -.0231       .019
	-1 2010-09-14 04:55:01 2010-12-20 23:25:00	10191	    -.02      .0204

Elapsed: 00:00:00.02
02:04:07 SQL> SELECT gbp_trend,MIN(ydate),MAX(ydate),COUNT(gbp_trend),MIN(gbp_g8),MAX(gbp_g8)FROM gbp_ms10 GROUP BY gbp_trend;

 GBP_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(GBP_TREND) MIN(GBP_G8) MAX(GBP_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-14 07:35:01 2010-12-21 02:00:00	       9938	 -.0231        .019
	-1 2010-09-14 04:55:01 2010-12-20 23:25:00	      10256	   -.02       .0204

Elapsed: 00:00:00.02
02:04:07 SQL> 
02:04:07 SQL> -- I need a copy of q15 attributes
02:04:07 SQL> 
02:04:07 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.04
02:04:07 SQL> CREATE TABLE gbp_att COMPRESS AS
02:04:07   2  SELECT
02:04:07   3  ydate
02:04:07   4  ,att00 gbp_att00
02:04:07   5  ,att01 gbp_att01
02:04:07   6  ,att02 gbp_att02
02:04:07   7  ,att03 gbp_att03
02:04:07   8  ,att04 gbp_att04
02:04:07   9  ,att05 gbp_att05
02:04:07  10  ,att06 gbp_att06
02:04:07  11  ,att07 gbp_att07
02:04:07  12  ,att08 gbp_att08
02:04:07  13  ,att09 gbp_att09
02:04:07  14  ,att10 gbp_att10
02:04:07  15  ,att11 gbp_att11
02:04:07  16  ,att12 gbp_att12
02:04:07  17  ,att13 gbp_att13
02:04:07  18  ,att14 gbp_att14
02:04:07  19  ,att15 gbp_att15
02:04:07  20  ,att16 gbp_att16
02:04:07  21  ,att17 gbp_att17
02:04:07  22  ,att18 gbp_att18
02:04:07  23  ,att19 gbp_att19
02:04:07  24  ,att20 gbp_att20
02:04:07  25  ,att21 gbp_att21
02:04:07  26  ,att22 gbp_att22
02:04:07  27  ,att23 gbp_att23
02:04:07  28  ,att24 gbp_att24
02:04:07  29  ,att25 gbp_att25
02:04:07  30  ,att26 gbp_att26
02:04:07  31  ,att27 gbp_att27
02:04:07  32  ,att28 gbp_att28
02:04:07  33  ,att29 gbp_att29
02:04:07  34  ,att30 gbp_att30
02:04:07  35  ,att31 gbp_att31
02:04:07  36  ,att32 gbp_att32
02:04:07  37  ,att33 gbp_att33
02:04:07  38  ,att34 gbp_att34
02:04:07  39  ,att35 gbp_att35
02:04:07  40  ,att36 gbp_att36
02:04:07  41  FROM q15
02:04:07  42  /

Table created.

Elapsed: 00:00:00.17
02:04:08 SQL> 
02:04:08 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
02:04:08 SQL> 
02:04:08 SQL> -- rpt
02:04:08 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     20194

Elapsed: 00:00:00.00
02:04:08 SQL> 
02:04:08 SQL> --
02:04:08 SQL> -- jpy10.sql
02:04:08 SQL> --
02:04:08 SQL> 
02:04:08 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:04:08 SQL> 
02:04:08 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.32
02:04:08 SQL> 
02:04:08 SQL> -- I created di5min here:
02:04:08 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:04:08 SQL> 
02:04:08 SQL> CREATE OR REPLACE VIEW q11 AS
02:04:08   2  SELECT
02:04:08   3  pair
02:04:08   4  ,ydate
02:04:08   5  ,prdate
02:04:08   6  ,rownum rnum -- acts as t in my time-series
02:04:08   7  ,clse
02:04:08   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
02:04:08   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
02:04:08  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
02:04:08  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
02:04:08  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
02:04:08  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
02:04:08  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
02:04:08  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
02:04:08  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
02:04:08  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
02:04:08  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
02:04:08  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
02:04:08  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
02:04:08  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
02:04:08  22  FROM di5min WHERE pair LIKE'%jpy%'
02:04:08  23  ORDER BY ydate
02:04:08  24  /

View created.

Elapsed: 00:00:00.05
02:04:08 SQL> 
02:04:08 SQL> -- rpt
02:04:08 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_jpy        20579

Elapsed: 00:00:00.35
02:04:09 SQL> 
02:04:09 SQL> -- Calc deltas and gains
02:04:09 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.20
02:04:09 SQL> 
02:04:09 SQL> CREATE TABLE q13 COMPRESS AS
02:04:09   2  SELECT
02:04:09   3  pair
02:04:09   4  ,ydate
02:04:09   5  ,prdate
02:04:09   6  ,rnum
02:04:09   7  ,ld8
02:04:09   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
02:04:09   9  -- step by 2
02:04:09  10  ,clse-lg6  d06
02:04:09  11  ,lg6 -lg8  d68
02:04:09  12  ,lg8 -lg10 d810
02:04:09  13  ,lg10-lg12 d1012
02:04:09  14  ,lg12-lg14 d1214
02:04:09  15  ,lg14-lg16 d1416
02:04:09  16  ,lg16-lg18 d1618
02:04:09  17  -- step by 4
02:04:09  18  ,lg6 -lg10 d610
02:04:09  19  ,lg8 -lg12 d812
02:04:09  20  ,lg10-lg14 d1014
02:04:09  21  ,lg12-lg16 d1216
02:04:09  22  --
02:04:09  23  ,ABS(clse-lg6 )dc6
02:04:09  24  ,ABS(clse-lg8 )dc8
02:04:09  25  ,ABS(clse-lg10)dc10
02:04:09  26  ,ABS(clse-lg12)dc12
02:04:09  27  ,ABS(clse-lg14)dc14
02:04:09  28  ,ABS(clse-lg16)dc16
02:04:09  29  ,ABS(clse-lg18)dc18
02:04:09  30  ,ABS(clse-lg20)dc20
02:04:09  31  ,ABS(clse-lg22)dc22
02:04:09  32  ,(ld8-clse) ug8
02:04:09  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:04:09  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:04:09  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:04:09  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:04:09  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:04:09  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:04:09  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:04:09  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
02:04:09  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
02:04:09  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
02:04:09  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
02:04:09  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
02:04:09  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
02:04:09  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:04:09  47  ,0+TO_CHAR(ydate,'D')d
02:04:09  48  ,0+TO_CHAR(ydate,'W')w
02:04:09  49  -- mpm stands for minutes-past-midnight:
02:04:09  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:04:09  51  FROM q11
02:04:09  52  -- I dont want any NULL values from the LAG() functions:
02:04:09  53  WHERE lg32 > 0
02:04:09  54  ORDER BY pair,ydate
02:04:09  55  /

Table created.

Elapsed: 00:00:01.91
02:04:11 SQL> 
02:04:11 SQL> -- rpt
02:04:11 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9471
	-1	   10724

Elapsed: 00:00:00.06
02:04:11 SQL> 
02:04:11 SQL> -- Calc gains and ntiles
02:04:11 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.14
02:04:11 SQL> CREATE TABLE q15 COMPRESS AS
02:04:11   2  SELECT
02:04:11   3  pair
02:04:11   4  ,ydate
02:04:11   5  ,prdate -- Should be unique
02:04:11   6  ,trend -- +1 or -1
02:04:11   7  -- Use NTILE() to derive some attributes
02:04:11   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
02:04:11   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
02:04:11  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
02:04:11  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
02:04:11  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
02:04:11  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
02:04:11  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
02:04:11  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
02:04:11  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
02:04:11  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
02:04:11  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
02:04:11  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
02:04:11  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
02:04:11  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
02:04:11  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
02:04:11  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
02:04:11  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
02:04:11  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
02:04:11  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
02:04:11  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
02:04:11  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
02:04:11  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
02:04:11  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
02:04:11  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
02:04:11  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
02:04:11  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
02:04:11  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
02:04:11  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
02:04:11  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
02:04:11  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
02:04:11  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
02:04:11  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
02:04:11  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
02:04:11  41  ,hh    att32
02:04:11  42  ,d     att33
02:04:11  43  ,w     att34
02:04:11  44  ,mpm   att35
02:04:11  45  ,trend att36
02:04:11  46  ,ug8 g8
02:04:11  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
02:04:11  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
02:04:11  49  FROM q13
02:04:11  50  ORDER BY pair,ydate
02:04:11  51  /

Table created.

Elapsed: 00:00:05.43
02:04:16 SQL> 
02:04:16 SQL> -- rpt
02:04:16 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
02:04:16   2  GROUP BY pair,trend,gatt,gattn
02:04:16   3  ORDER BY pair,trend,gatt,gattn
02:04:16   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_jpy 	-1 nup nup 7.6687E-06	     163
usd_jpy 	-1 nup up  -.18652913	    5347
usd_jpy 	-1 up  nup .206144285	    5179
usd_jpy 	-1			       0
usd_jpy 	 1 nup nup	    0	     119
usd_jpy 	 1 nup up  -.18827435	    5001
usd_jpy 	 1 up  nup .213128788	    4290
usd_jpy 	 1			       0

8 rows selected.

Elapsed: 00:00:00.02
02:04:16 SQL> 
02:04:16 SQL> -- rpt
02:04:16 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_jpy 2010-12-21 02:00:00

Elapsed: 00:00:00.02
02:04:17 SQL> 
02:04:17 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.10
02:04:17 SQL> CREATE TABLE modsrc COMPRESS AS
02:04:17   2  SELECT
02:04:17   3  pair
02:04:17   4  ,ydate
02:04:17   5  ,prdate
02:04:17   6  ,trend
02:04:17   7  ,g8
02:04:17   8  ,gatt
02:04:17   9  ,gattn
02:04:17  10  FROM q15
02:04:17  11  /

Table created.

Elapsed: 00:00:00.10
02:04:17 SQL> 
02:04:17 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
02:04:17 SQL> 
02:04:17 SQL> -- rpt
02:04:17 SQL> 
02:04:17 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20579

Elapsed: 00:00:00.33
02:04:17 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20195

Elapsed: 00:00:00.01
02:04:17 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20195

Elapsed: 00:00:00.01
02:04:17 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20195

Elapsed: 00:00:00.00
02:04:17 SQL> 
02:04:17 SQL> DROP   TABLE jpy_ms10 ;

Table dropped.

Elapsed: 00:00:00.04
02:04:17 SQL> CREATE TABLE jpy_ms10 COMPRESS AS
02:04:17   2  SELECT
02:04:17   3  ydate
02:04:17   4  ,trend jpy_trend
02:04:17   5  ,g8    jpy_g8
02:04:17   6  ,gatt  jpy_gatt
02:04:17   7  ,gattn jpy_gattn
02:04:17   8  FROM modsrc
02:04:17   9  /

Table created.

Elapsed: 00:00:00.07
02:04:17 SQL> 
02:04:17 SQL> ANALYZE TABLE jpy_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
02:04:18 SQL> 
02:04:18 SQL> -- rpt
02:04:18 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-14 08:50:01 2010-12-21 00:55:00	 9410	  -1.185       2.42
	-1 2010-09-14 04:55:01 2010-12-21 02:00:00	10689	 -1.0575       2.49

Elapsed: 00:00:00.02
02:04:18 SQL> SELECT jpy_trend,MIN(ydate),MAX(ydate),COUNT(jpy_trend),MIN(jpy_g8),MAX(jpy_g8)FROM jpy_ms10 GROUP BY jpy_trend;

 JPY_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(JPY_TREND) MIN(JPY_G8) MAX(JPY_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-14 08:50:01 2010-12-21 00:55:00	       9471	 -1.185        2.42
	-1 2010-09-14 04:55:01 2010-12-21 02:00:00	      10724	-1.0575        2.49

Elapsed: 00:00:00.01
02:04:18 SQL> 
02:04:18 SQL> -- I need a copy of q15 attributes
02:04:18 SQL> 
02:04:18 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.03
02:04:18 SQL> CREATE TABLE jpy_att COMPRESS AS
02:04:18   2  SELECT
02:04:18   3  ydate
02:04:18   4  ,att00 jpy_att00
02:04:18   5  ,att01 jpy_att01
02:04:18   6  ,att02 jpy_att02
02:04:18   7  ,att03 jpy_att03
02:04:18   8  ,att04 jpy_att04
02:04:18   9  ,att05 jpy_att05
02:04:18  10  ,att06 jpy_att06
02:04:18  11  ,att07 jpy_att07
02:04:18  12  ,att08 jpy_att08
02:04:18  13  ,att09 jpy_att09
02:04:18  14  ,att10 jpy_att10
02:04:18  15  ,att11 jpy_att11
02:04:18  16  ,att12 jpy_att12
02:04:18  17  ,att13 jpy_att13
02:04:18  18  ,att14 jpy_att14
02:04:18  19  ,att15 jpy_att15
02:04:18  20  ,att16 jpy_att16
02:04:18  21  ,att17 jpy_att17
02:04:18  22  ,att18 jpy_att18
02:04:18  23  ,att19 jpy_att19
02:04:18  24  ,att20 jpy_att20
02:04:18  25  ,att21 jpy_att21
02:04:18  26  ,att22 jpy_att22
02:04:18  27  ,att23 jpy_att23
02:04:18  28  ,att24 jpy_att24
02:04:18  29  ,att25 jpy_att25
02:04:18  30  ,att26 jpy_att26
02:04:18  31  ,att27 jpy_att27
02:04:18  32  ,att28 jpy_att28
02:04:18  33  ,att29 jpy_att29
02:04:18  34  ,att30 jpy_att30
02:04:18  35  ,att31 jpy_att31
02:04:18  36  ,att32 jpy_att32
02:04:18  37  ,att33 jpy_att33
02:04:18  38  ,att34 jpy_att34
02:04:18  39  ,att35 jpy_att35
02:04:18  40  ,att36 jpy_att36
02:04:18  41  FROM q15
02:04:18  42  /

Table created.

Elapsed: 00:00:00.17
02:04:18 SQL> 
02:04:18 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
02:04:18 SQL> 
02:04:18 SQL> -- rpt
02:04:18 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     20195

Elapsed: 00:00:00.01
02:04:18 SQL> 
02:04:18 SQL> --
02:04:18 SQL> -- cad10.sql
02:04:18 SQL> --
02:04:18 SQL> 
02:04:18 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:04:18 SQL> 
02:04:18 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.34
02:04:19 SQL> 
02:04:19 SQL> -- I created di5min here:
02:04:19 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:04:19 SQL> 
02:04:19 SQL> CREATE OR REPLACE VIEW q11 AS
02:04:19   2  SELECT
02:04:19   3  pair
02:04:19   4  ,ydate
02:04:19   5  ,prdate
02:04:19   6  ,rownum rnum -- acts as t in my time-series
02:04:19   7  ,clse
02:04:19   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
02:04:19   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
02:04:19  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
02:04:19  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
02:04:19  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
02:04:19  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
02:04:19  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
02:04:19  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
02:04:19  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
02:04:19  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
02:04:19  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
02:04:19  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
02:04:19  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
02:04:19  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
02:04:19  22  FROM di5min WHERE pair LIKE'%cad%'
02:04:19  23  ORDER BY ydate
02:04:19  24  /

View created.

Elapsed: 00:00:00.05
02:04:19 SQL> 
02:04:19 SQL> -- rpt
02:04:19 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_cad        20575

Elapsed: 00:00:00.35
02:04:19 SQL> 
02:04:19 SQL> -- Calc deltas and gains
02:04:19 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.26
02:04:19 SQL> 
02:04:19 SQL> CREATE TABLE q13 COMPRESS AS
02:04:19   2  SELECT
02:04:19   3  pair
02:04:19   4  ,ydate
02:04:19   5  ,prdate
02:04:19   6  ,rnum
02:04:19   7  ,ld8
02:04:19   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
02:04:19   9  -- step by 2
02:04:19  10  ,clse-lg6  d06
02:04:19  11  ,lg6 -lg8  d68
02:04:19  12  ,lg8 -lg10 d810
02:04:19  13  ,lg10-lg12 d1012
02:04:19  14  ,lg12-lg14 d1214
02:04:19  15  ,lg14-lg16 d1416
02:04:19  16  ,lg16-lg18 d1618
02:04:19  17  -- step by 4
02:04:19  18  ,lg6 -lg10 d610
02:04:19  19  ,lg8 -lg12 d812
02:04:19  20  ,lg10-lg14 d1014
02:04:19  21  ,lg12-lg16 d1216
02:04:19  22  --
02:04:19  23  ,ABS(clse-lg6 )dc6
02:04:19  24  ,ABS(clse-lg8 )dc8
02:04:19  25  ,ABS(clse-lg10)dc10
02:04:19  26  ,ABS(clse-lg12)dc12
02:04:19  27  ,ABS(clse-lg14)dc14
02:04:19  28  ,ABS(clse-lg16)dc16
02:04:19  29  ,ABS(clse-lg18)dc18
02:04:19  30  ,ABS(clse-lg20)dc20
02:04:19  31  ,ABS(clse-lg22)dc22
02:04:19  32  ,(ld8-clse) ug8
02:04:19  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:04:19  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:04:19  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:04:19  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:04:19  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:04:19  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:04:19  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:04:19  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
02:04:19  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
02:04:19  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
02:04:19  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
02:04:19  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
02:04:19  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
02:04:19  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:04:19  47  ,0+TO_CHAR(ydate,'D')d
02:04:19  48  ,0+TO_CHAR(ydate,'W')w
02:04:19  49  -- mpm stands for minutes-past-midnight:
02:04:19  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:04:19  51  FROM q11
02:04:19  52  -- I dont want any NULL values from the LAG() functions:
02:04:19  53  WHERE lg32 > 0
02:04:19  54  ORDER BY pair,ydate
02:04:19  55  /

Table created.

Elapsed: 00:00:01.69
02:04:21 SQL> 
02:04:21 SQL> -- rpt
02:04:21 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9392
	-1	   10799

Elapsed: 00:00:00.07
02:04:21 SQL> 
02:04:21 SQL> -- Calc gains and ntiles
02:04:21 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.18
02:04:21 SQL> CREATE TABLE q15 COMPRESS AS
02:04:21   2  SELECT
02:04:21   3  pair
02:04:21   4  ,ydate
02:04:21   5  ,prdate -- Should be unique
02:04:21   6  ,trend -- +1 or -1
02:04:21   7  -- Use NTILE() to derive some attributes
02:04:21   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
02:04:21   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
02:04:21  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
02:04:21  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
02:04:21  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
02:04:21  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
02:04:21  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
02:04:21  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
02:04:21  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
02:04:21  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
02:04:21  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
02:04:21  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
02:04:21  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
02:04:21  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
02:04:21  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
02:04:21  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
02:04:21  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
02:04:21  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
02:04:21  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
02:04:21  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
02:04:21  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
02:04:21  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
02:04:21  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
02:04:21  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
02:04:21  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
02:04:21  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
02:04:21  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
02:04:21  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
02:04:21  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
02:04:21  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
02:04:21  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
02:04:21  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
02:04:21  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
02:04:21  41  ,hh    att32
02:04:21  42  ,d     att33
02:04:21  43  ,w     att34
02:04:21  44  ,mpm   att35
02:04:21  45  ,trend att36
02:04:21  46  ,ug8 g8
02:04:21  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
02:04:21  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
02:04:21  49  FROM q13
02:04:21  50  ORDER BY pair,ydate
02:04:21  51  /

Table created.

Elapsed: 00:00:05.23
02:04:26 SQL> 
02:04:26 SQL> -- rpt
02:04:26 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
02:04:26   2  GROUP BY pair,trend,gatt,gattn
02:04:26   3  ORDER BY pair,trend,gatt,gattn
02:04:26   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_cad 	-1 nup nup -.00002458	    5570
usd_cad 	-1 nup up  -.00402052	    2605
usd_cad 	-1 up  nup .004685044	    2591
usd_cad 	-1			       0
usd_cad 	 1 nup nup -.00009708	    4580
usd_cad 	 1 nup up  -.00421802	    2711
usd_cad 	 1 up  nup .004584685	    2038
usd_cad 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
02:04:26 SQL> 
02:04:26 SQL> -- rpt
02:04:26 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_cad 2010-12-21 02:00:00

Elapsed: 00:00:00.02
02:04:26 SQL> 
02:04:26 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
02:04:27 SQL> CREATE TABLE modsrc COMPRESS AS
02:04:27   2  SELECT
02:04:27   3  pair
02:04:27   4  ,ydate
02:04:27   5  ,prdate
02:04:27   6  ,trend
02:04:27   7  ,g8
02:04:27   8  ,gatt
02:04:27   9  ,gattn
02:04:27  10  FROM q15
02:04:27  11  /

Table created.

Elapsed: 00:00:00.09
02:04:27 SQL> 
02:04:27 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
02:04:27 SQL> 
02:04:27 SQL> -- rpt
02:04:27 SQL> 
02:04:27 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20575

Elapsed: 00:00:00.35
02:04:27 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20191

Elapsed: 00:00:00.00
02:04:27 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20191

Elapsed: 00:00:00.01
02:04:27 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20191

Elapsed: 00:00:00.00
02:04:27 SQL> 
02:04:27 SQL> DROP   TABLE cad_ms10 ;

Table dropped.

Elapsed: 00:00:00.02
02:04:27 SQL> CREATE TABLE cad_ms10 COMPRESS AS
02:04:27   2  SELECT
02:04:27   3  ydate
02:04:27   4  ,trend cad_trend
02:04:27   5  ,g8    cad_g8
02:04:27   6  ,gatt  cad_gatt
02:04:27   7  ,gattn cad_gattn
02:04:27   8  FROM modsrc
02:04:27   9  /

Table created.

Elapsed: 00:00:00.05
02:04:27 SQL> 
02:04:27 SQL> ANALYZE TABLE cad_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
02:04:28 SQL> 
02:04:28 SQL> -- rpt
02:04:28 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-14 04:55:01 2010-12-20 23:15:00	 9329	  -.0122      .0159
	-1 2010-09-14 07:10:01 2010-12-21 02:00:00	10766	 -.01105      .0176

Elapsed: 00:00:00.02
02:04:28 SQL> SELECT cad_trend,MIN(ydate),MAX(ydate),COUNT(cad_trend),MIN(cad_g8),MAX(cad_g8)FROM cad_ms10 GROUP BY cad_trend;

 CAD_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(CAD_TREND) MIN(CAD_G8) MAX(CAD_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-14 04:55:01 2010-12-20 23:15:00	       9392	 -.0122       .0159
	-1 2010-09-14 07:10:01 2010-12-21 02:00:00	      10799	-.01105       .0176

Elapsed: 00:00:00.02
02:04:28 SQL> 
02:04:28 SQL> -- I need a copy of q15 attributes
02:04:28 SQL> 
02:04:28 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.03
02:04:28 SQL> CREATE TABLE cad_att COMPRESS AS
02:04:28   2  SELECT
02:04:28   3  ydate
02:04:28   4  ,att00 cad_att00
02:04:28   5  ,att01 cad_att01
02:04:28   6  ,att02 cad_att02
02:04:28   7  ,att03 cad_att03
02:04:28   8  ,att04 cad_att04
02:04:28   9  ,att05 cad_att05
02:04:28  10  ,att06 cad_att06
02:04:28  11  ,att07 cad_att07
02:04:28  12  ,att08 cad_att08
02:04:28  13  ,att09 cad_att09
02:04:28  14  ,att10 cad_att10
02:04:28  15  ,att11 cad_att11
02:04:28  16  ,att12 cad_att12
02:04:28  17  ,att13 cad_att13
02:04:28  18  ,att14 cad_att14
02:04:28  19  ,att15 cad_att15
02:04:28  20  ,att16 cad_att16
02:04:28  21  ,att17 cad_att17
02:04:28  22  ,att18 cad_att18
02:04:28  23  ,att19 cad_att19
02:04:28  24  ,att20 cad_att20
02:04:28  25  ,att21 cad_att21
02:04:28  26  ,att22 cad_att22
02:04:28  27  ,att23 cad_att23
02:04:28  28  ,att24 cad_att24
02:04:28  29  ,att25 cad_att25
02:04:28  30  ,att26 cad_att26
02:04:28  31  ,att27 cad_att27
02:04:28  32  ,att28 cad_att28
02:04:28  33  ,att29 cad_att29
02:04:28  34  ,att30 cad_att30
02:04:28  35  ,att31 cad_att31
02:04:28  36  ,att32 cad_att32
02:04:28  37  ,att33 cad_att33
02:04:28  38  ,att34 cad_att34
02:04:28  39  ,att35 cad_att35
02:04:28  40  ,att36 cad_att36
02:04:28  41  FROM q15
02:04:28  42  /

Table created.

Elapsed: 00:00:00.16
02:04:28 SQL> 
02:04:28 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
02:04:28 SQL> 
02:04:28 SQL> -- rpt
02:04:28 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     20191

Elapsed: 00:00:00.00
02:04:28 SQL> 
02:04:28 SQL> --
02:04:28 SQL> -- chf10.sql
02:04:28 SQL> --
02:04:28 SQL> 
02:04:28 SQL> -- Creates views and tables for backtesting a forex SVM strategy
02:04:28 SQL> 
02:04:28 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.45
02:04:29 SQL> 
02:04:29 SQL> -- I created di5min here:
02:04:29 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
02:04:29 SQL> 
02:04:29 SQL> CREATE OR REPLACE VIEW q11 AS
02:04:29   2  SELECT
02:04:29   3  pair
02:04:29   4  ,ydate
02:04:29   5  ,prdate
02:04:29   6  ,rownum rnum -- acts as t in my time-series
02:04:29   7  ,clse
02:04:29   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
02:04:29   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
02:04:29  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
02:04:29  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
02:04:29  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
02:04:29  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
02:04:29  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
02:04:29  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
02:04:29  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
02:04:29  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
02:04:29  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
02:04:29  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
02:04:29  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
02:04:29  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
02:04:29  22  FROM di5min WHERE pair LIKE'%chf%'
02:04:29  23  ORDER BY ydate
02:04:29  24  /

View created.

Elapsed: 00:00:00.07
02:04:29 SQL> 
02:04:29 SQL> -- rpt
02:04:29 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_chf        20578

Elapsed: 00:00:00.35
02:04:29 SQL> 
02:04:29 SQL> -- Calc deltas and gains
02:04:29 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.18
02:04:29 SQL> 
02:04:29 SQL> CREATE TABLE q13 COMPRESS AS
02:04:29   2  SELECT
02:04:29   3  pair
02:04:29   4  ,ydate
02:04:29   5  ,prdate
02:04:29   6  ,rnum
02:04:29   7  ,ld8
02:04:29   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
02:04:29   9  -- step by 2
02:04:29  10  ,clse-lg6  d06
02:04:29  11  ,lg6 -lg8  d68
02:04:29  12  ,lg8 -lg10 d810
02:04:29  13  ,lg10-lg12 d1012
02:04:29  14  ,lg12-lg14 d1214
02:04:29  15  ,lg14-lg16 d1416
02:04:29  16  ,lg16-lg18 d1618
02:04:29  17  -- step by 4
02:04:29  18  ,lg6 -lg10 d610
02:04:29  19  ,lg8 -lg12 d812
02:04:29  20  ,lg10-lg14 d1014
02:04:29  21  ,lg12-lg16 d1216
02:04:29  22  --
02:04:29  23  ,ABS(clse-lg6 )dc6
02:04:29  24  ,ABS(clse-lg8 )dc8
02:04:29  25  ,ABS(clse-lg10)dc10
02:04:29  26  ,ABS(clse-lg12)dc12
02:04:29  27  ,ABS(clse-lg14)dc14
02:04:29  28  ,ABS(clse-lg16)dc16
02:04:29  29  ,ABS(clse-lg18)dc18
02:04:29  30  ,ABS(clse-lg20)dc20
02:04:29  31  ,ABS(clse-lg22)dc22
02:04:29  32  ,(ld8-clse) ug8
02:04:29  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
02:04:29  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
02:04:29  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
02:04:29  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
02:04:29  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
02:04:29  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
02:04:29  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
02:04:29  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
02:04:29  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
02:04:29  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
02:04:29  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
02:04:29  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
02:04:29  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
02:04:29  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
02:04:29  47  ,0+TO_CHAR(ydate,'D')d
02:04:29  48  ,0+TO_CHAR(ydate,'W')w
02:04:29  49  -- mpm stands for minutes-past-midnight:
02:04:29  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
02:04:29  51  FROM q11
02:04:29  52  -- I dont want any NULL values from the LAG() functions:
02:04:29  53  WHERE lg32 > 0
02:04:29  54  ORDER BY pair,ydate
02:04:29  55  /

Table created.

Elapsed: 00:00:01.69
02:04:31 SQL> 
02:04:31 SQL> -- rpt
02:04:31 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9687
	-1	   10507

Elapsed: 00:00:00.03
02:04:31 SQL> 
02:04:31 SQL> -- Calc gains and ntiles
02:04:31 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.18
02:04:31 SQL> CREATE TABLE q15 COMPRESS AS
02:04:31   2  SELECT
02:04:31   3  pair
02:04:31   4  ,ydate
02:04:31   5  ,prdate -- Should be unique
02:04:31   6  ,trend -- +1 or -1
02:04:31   7  -- Use NTILE() to derive some attributes
02:04:31   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
02:04:31   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
02:04:31  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
02:04:31  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
02:04:31  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
02:04:31  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
02:04:31  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
02:04:31  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
02:04:31  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
02:04:31  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
02:04:31  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
02:04:31  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
02:04:31  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
02:04:31  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
02:04:31  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
02:04:31  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
02:04:31  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
02:04:31  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
02:04:31  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
02:04:31  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
02:04:31  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
02:04:31  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
02:04:31  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
02:04:31  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
02:04:31  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
02:04:31  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
02:04:31  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
02:04:31  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
02:04:31  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
02:04:31  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
02:04:31  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
02:04:31  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
02:04:31  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
02:04:31  41  ,hh    att32
02:04:31  42  ,d     att33
02:04:31  43  ,w     att34
02:04:31  44  ,mpm   att35
02:04:31  45  ,trend att36
02:04:31  46  ,ug8 g8
02:04:31  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
02:04:31  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
02:04:31  49  FROM q13
02:04:31  50  ORDER BY pair,ydate
02:04:31  51  /

Table created.

Elapsed: 00:00:05.37
02:04:37 SQL> 
02:04:37 SQL> -- rpt
02:04:37 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
02:04:37   2  GROUP BY pair,trend,gatt,gattn
02:04:37   3  ORDER BY pair,trend,gatt,gattn
02:04:37   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_chf 	-1 nup nup  .00006772	    4763
usd_chf 	-1 nup up  -.00511527	    2963
usd_chf 	-1 up  nup  .00521724	    2716
usd_chf 	-1			       0
usd_chf 	 1 nup nup -9.802E-06	    4680
usd_chf 	 1 nup up  -.00461979	    2827
usd_chf 	 1 up  nup  .00470652	    2149
usd_chf 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
02:04:37 SQL> 
02:04:37 SQL> -- rpt
02:04:37 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_chf 2010-12-21 02:00:00

Elapsed: 00:00:00.01
02:04:37 SQL> 
02:04:37 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.22
02:04:37 SQL> CREATE TABLE modsrc COMPRESS AS
02:04:37   2  SELECT
02:04:37   3  pair
02:04:37   4  ,ydate
02:04:37   5  ,prdate
02:04:37   6  ,trend
02:04:37   7  ,g8
02:04:37   8  ,gatt
02:04:37   9  ,gattn
02:04:37  10  FROM q15
02:04:37  11  /

Table created.

Elapsed: 00:00:00.08
02:04:37 SQL> 
02:04:37 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
02:04:37 SQL> 
02:04:37 SQL> -- rpt
02:04:37 SQL> 
02:04:37 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20578

Elapsed: 00:00:00.34
02:04:37 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20194

Elapsed: 00:00:00.01
02:04:37 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20194

Elapsed: 00:00:00.00
02:04:37 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20194

Elapsed: 00:00:00.01
02:04:37 SQL> 
02:04:37 SQL> DROP   TABLE chf_ms10 ;

Table dropped.

Elapsed: 00:00:00.03
02:04:37 SQL> CREATE TABLE chf_ms10 COMPRESS AS
02:04:37   2  SELECT
02:04:37   3  ydate
02:04:37   4  ,trend chf_trend
02:04:37   5  ,g8    chf_g8
02:04:37   6  ,gatt  chf_gatt
02:04:37   7  ,gattn chf_gattn
02:04:37   8  FROM modsrc
02:04:37   9  /

Table created.

Elapsed: 00:00:00.06
02:04:38 SQL> 
02:04:38 SQL> ANALYZE TABLE chf_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
02:04:38 SQL> 
02:04:38 SQL> -- rpt
02:04:38 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-14 11:10:01 2010-12-20 23:00:00	 9656	 -.01775      .0155
	-1 2010-09-14 04:55:01 2010-12-21 02:00:00	10442	 -.01825     .01545

Elapsed: 00:00:00.02
02:04:38 SQL> SELECT chf_trend,MIN(ydate),MAX(ydate),COUNT(chf_trend),MIN(chf_g8),MAX(chf_g8)FROM chf_ms10 GROUP BY chf_trend;

 CHF_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(CHF_TREND) MIN(CHF_G8) MAX(CHF_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-14 11:10:01 2010-12-20 23:00:00	       9687	-.01775       .0155
	-1 2010-09-14 04:55:01 2010-12-21 02:00:00	      10507	-.01825      .01545

Elapsed: 00:00:00.01
02:04:38 SQL> 
02:04:38 SQL> -- I need a copy of q15 attributes
02:04:38 SQL> 
02:04:38 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.03
02:04:38 SQL> CREATE TABLE chf_att COMPRESS AS
02:04:38   2  SELECT
02:04:38   3  ydate
02:04:38   4  ,att00 chf_att00
02:04:38   5  ,att01 chf_att01
02:04:38   6  ,att02 chf_att02
02:04:38   7  ,att03 chf_att03
02:04:38   8  ,att04 chf_att04
02:04:38   9  ,att05 chf_att05
02:04:38  10  ,att06 chf_att06
02:04:38  11  ,att07 chf_att07
02:04:38  12  ,att08 chf_att08
02:04:38  13  ,att09 chf_att09
02:04:38  14  ,att10 chf_att10
02:04:38  15  ,att11 chf_att11
02:04:38  16  ,att12 chf_att12
02:04:38  17  ,att13 chf_att13
02:04:38  18  ,att14 chf_att14
02:04:38  19  ,att15 chf_att15
02:04:38  20  ,att16 chf_att16
02:04:38  21  ,att17 chf_att17
02:04:38  22  ,att18 chf_att18
02:04:38  23  ,att19 chf_att19
02:04:38  24  ,att20 chf_att20
02:04:38  25  ,att21 chf_att21
02:04:38  26  ,att22 chf_att22
02:04:38  27  ,att23 chf_att23
02:04:38  28  ,att24 chf_att24
02:04:38  29  ,att25 chf_att25
02:04:38  30  ,att26 chf_att26
02:04:38  31  ,att27 chf_att27
02:04:38  32  ,att28 chf_att28
02:04:38  33  ,att29 chf_att29
02:04:38  34  ,att30 chf_att30
02:04:38  35  ,att31 chf_att31
02:04:38  36  ,att32 chf_att32
02:04:38  37  ,att33 chf_att33
02:04:38  38  ,att34 chf_att34
02:04:38  39  ,att35 chf_att35
02:04:38  40  ,att36 chf_att36
02:04:38  41  FROM q15
02:04:38  42  /

Table created.

Elapsed: 00:00:00.16
02:04:38 SQL> 
02:04:38 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
02:04:38 SQL> 
02:04:38 SQL> -- rpt
02:04:38 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     20194

Elapsed: 00:00:00.00
02:04:38 SQL> 
02:04:38 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
