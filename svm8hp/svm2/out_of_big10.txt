
SQL*Plus: Release 11.2.0.1.0 Production on Wed Dec 22 03:13:29 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

03:13:29 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
03:13:29 SQL> 03:13:29 SQL> --
03:13:29 SQL> -- eur10.sql
03:13:29 SQL> --
03:13:29 SQL> 
03:13:29 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:13:29 SQL> 
03:13:29 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.01
03:13:29 SQL> 
03:13:29 SQL> -- I created di5min here:
03:13:29 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:13:29 SQL> 
03:13:29 SQL> CREATE OR REPLACE VIEW q11 AS
03:13:29   2  SELECT
03:13:29   3  pair
03:13:29   4  ,ydate
03:13:29   5  ,prdate
03:13:29   6  ,rownum rnum -- acts as t in my time-series
03:13:29   7  ,clse
03:13:29   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
03:13:29   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
03:13:29  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
03:13:29  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
03:13:29  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
03:13:29  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
03:13:29  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
03:13:29  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
03:13:29  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
03:13:29  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
03:13:29  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
03:13:29  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
03:13:29  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
03:13:29  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
03:13:29  22  FROM di5min WHERE pair LIKE'%eur%'
03:13:29  23  ORDER BY ydate
03:13:29  24  /

View created.

Elapsed: 00:00:00.08
03:13:29 SQL> 
03:13:29 SQL> -- rpt
03:13:29 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
eur_usd        20774

Elapsed: 00:00:00.36
03:13:30 SQL> 
03:13:30 SQL> -- Calc deltas and gains
03:13:30 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.04
03:13:30 SQL> 
03:13:30 SQL> CREATE TABLE q13 COMPRESS AS
03:13:30   2  SELECT
03:13:30   3  pair
03:13:30   4  ,ydate
03:13:30   5  ,prdate
03:13:30   6  ,rnum
03:13:30   7  ,ld8
03:13:30   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
03:13:30   9  -- step by 2
03:13:30  10  ,clse-lg6  d06
03:13:30  11  ,lg6 -lg8  d68
03:13:30  12  ,lg8 -lg10 d810
03:13:30  13  ,lg10-lg12 d1012
03:13:30  14  ,lg12-lg14 d1214
03:13:30  15  ,lg14-lg16 d1416
03:13:30  16  ,lg16-lg18 d1618
03:13:30  17  -- step by 4
03:13:30  18  ,lg6 -lg10 d610
03:13:30  19  ,lg8 -lg12 d812
03:13:30  20  ,lg10-lg14 d1014
03:13:30  21  ,lg12-lg16 d1216
03:13:30  22  --
03:13:30  23  ,ABS(clse-lg6 )dc6
03:13:30  24  ,ABS(clse-lg8 )dc8
03:13:30  25  ,ABS(clse-lg10)dc10
03:13:30  26  ,ABS(clse-lg12)dc12
03:13:30  27  ,ABS(clse-lg14)dc14
03:13:30  28  ,ABS(clse-lg16)dc16
03:13:30  29  ,ABS(clse-lg18)dc18
03:13:30  30  ,ABS(clse-lg20)dc20
03:13:30  31  ,ABS(clse-lg22)dc22
03:13:30  32  ,(ld8-clse) ug8
03:13:30  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:13:30  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:13:30  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:13:30  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:13:30  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:13:30  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:13:30  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:13:30  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
03:13:30  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
03:13:30  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
03:13:30  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
03:13:30  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
03:13:30  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
03:13:30  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:13:30  47  ,0+TO_CHAR(ydate,'D')d
03:13:30  48  ,0+TO_CHAR(ydate,'W')w
03:13:30  49  -- mpm stands for minutes-past-midnight:
03:13:30  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:13:30  51  FROM q11
03:13:30  52  -- I dont want any NULL values from the LAG() functions:
03:13:30  53  WHERE lg32 > 0
03:13:30  54  ORDER BY pair,ydate
03:13:30  55  /

Table created.

Elapsed: 00:00:02.05
03:13:32 SQL> 
03:13:32 SQL> -- rpt
03:13:32 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	   10118
	-1	   10272

Elapsed: 00:00:00.03
03:13:32 SQL> 
03:13:32 SQL> -- Calc gains and ntiles
03:13:32 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.07
03:13:32 SQL> CREATE TABLE q15 COMPRESS AS
03:13:32   2  SELECT
03:13:32   3  pair
03:13:32   4  ,ydate
03:13:32   5  ,prdate -- Should be unique
03:13:32   6  ,trend -- +1 or -1
03:13:32   7  -- Use NTILE() to derive some attributes
03:13:32   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
03:13:32   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
03:13:32  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
03:13:32  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
03:13:32  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
03:13:32  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
03:13:32  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
03:13:32  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
03:13:32  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
03:13:32  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
03:13:32  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
03:13:32  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
03:13:32  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
03:13:32  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
03:13:32  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
03:13:32  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
03:13:32  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
03:13:32  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
03:13:32  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
03:13:32  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
03:13:32  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
03:13:32  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
03:13:32  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
03:13:32  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
03:13:32  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
03:13:32  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
03:13:32  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
03:13:32  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
03:13:32  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
03:13:32  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
03:13:32  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
03:13:32  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
03:13:32  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
03:13:32  41  ,hh    att32
03:13:32  42  ,d     att33
03:13:32  43  ,w     att34
03:13:32  44  ,mpm   att35
03:13:32  45  ,trend att36
03:13:32  46  ,ug8 g8
03:13:32  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
03:13:32  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
03:13:32  49  FROM q13
03:13:32  50  ORDER BY pair,ydate
03:13:32  51  /

Table created.

Elapsed: 00:00:05.34
03:13:37 SQL> 
03:13:37 SQL> -- rpt
03:13:37 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
03:13:37   2  GROUP BY pair,trend,gatt,gattn
03:13:37   3  ORDER BY pair,trend,gatt,gattn
03:13:37   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
eur_usd 	-1 nup nup 6.4571E-06	    2987
eur_usd 	-1 nup up  -.00601556	    3667
eur_usd 	-1 up  nup .005980128	    3527
eur_usd 	-1			       0
eur_usd 	 1 nup nup -.00010746	    3038
eur_usd 	 1 nup up  -.00623479	    3407
eur_usd 	 1 up  nup .006553779	    3668
eur_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
03:13:37 SQL> 
03:13:37 SQL> -- rpt
03:13:37 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
eur_usd 2010-12-22 03:10:00

Elapsed: 00:00:00.02
03:13:37 SQL> 
03:13:37 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.04
03:13:37 SQL> CREATE TABLE modsrc COMPRESS AS
03:13:37   2  SELECT
03:13:37   3  pair
03:13:37   4  ,ydate
03:13:37   5  ,prdate
03:13:37   6  ,trend
03:13:37   7  ,g8
03:13:37   8  ,gatt
03:13:37   9  ,gattn
03:13:37  10  FROM q15
03:13:37  11  /

Table created.

Elapsed: 00:00:00.10
03:13:38 SQL> 
03:13:38 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
03:13:38 SQL> 
03:13:38 SQL> -- rpt
03:13:38 SQL> 
03:13:38 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20774

Elapsed: 00:00:00.34
03:13:38 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20390

Elapsed: 00:00:00.01
03:13:38 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20390

Elapsed: 00:00:00.00
03:13:38 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20390

Elapsed: 00:00:00.00
03:13:38 SQL> 
03:13:38 SQL> DROP   TABLE eur_ms10 ;

Table dropped.

Elapsed: 00:00:00.03
03:13:38 SQL> CREATE TABLE eur_ms10 COMPRESS AS
03:13:38   2  SELECT
03:13:38   3  ydate
03:13:38   4  ,trend eur_trend
03:13:38   5  ,g8    eur_g8
03:13:38   6  ,gatt  eur_gatt
03:13:38   7  ,gattn eur_gattn
03:13:38   8  FROM modsrc
03:13:38   9  /

Table created.

Elapsed: 00:00:00.06
03:13:38 SQL> 
03:13:38 SQL> ANALYZE TABLE eur_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
03:13:38 SQL> 
03:13:38 SQL> -- rpt
03:13:38 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-14 13:40:01 2010-12-22 03:10:00	10113	  -.0218     .02165
	-1 2010-09-14 11:15:01 2010-12-22 03:00:00	10181	 -.02085      .0196

Elapsed: 00:00:00.02
03:13:38 SQL> SELECT eur_trend,MIN(ydate),MAX(ydate),COUNT(eur_trend),MIN(eur_g8),MAX(eur_g8)FROM eur_ms10 GROUP BY eur_trend;

 EUR_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(EUR_TREND) MIN(EUR_G8) MAX(EUR_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-14 13:40:01 2010-12-22 03:10:00	      10118	 -.0218      .02165
	-1 2010-09-14 11:15:01 2010-12-22 03:00:00	      10272	-.02085       .0196

Elapsed: 00:00:00.02
03:13:38 SQL> 
03:13:38 SQL> -- I need a copy of q15 attributes
03:13:38 SQL> 
03:13:38 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.04
03:13:38 SQL> CREATE TABLE eur_att COMPRESS AS
03:13:38   2  SELECT
03:13:38   3  ydate
03:13:38   4  ,att00 eur_att00
03:13:38   5  ,att01 eur_att01
03:13:38   6  ,att02 eur_att02
03:13:38   7  ,att03 eur_att03
03:13:38   8  ,att04 eur_att04
03:13:38   9  ,att05 eur_att05
03:13:38  10  ,att06 eur_att06
03:13:38  11  ,att07 eur_att07
03:13:38  12  ,att08 eur_att08
03:13:38  13  ,att09 eur_att09
03:13:38  14  ,att10 eur_att10
03:13:38  15  ,att11 eur_att11
03:13:38  16  ,att12 eur_att12
03:13:38  17  ,att13 eur_att13
03:13:38  18  ,att14 eur_att14
03:13:38  19  ,att15 eur_att15
03:13:38  20  ,att16 eur_att16
03:13:38  21  ,att17 eur_att17
03:13:38  22  ,att18 eur_att18
03:13:38  23  ,att19 eur_att19
03:13:38  24  ,att20 eur_att20
03:13:38  25  ,att21 eur_att21
03:13:38  26  ,att22 eur_att22
03:13:38  27  ,att23 eur_att23
03:13:38  28  ,att24 eur_att24
03:13:38  29  ,att25 eur_att25
03:13:38  30  ,att26 eur_att26
03:13:38  31  ,att27 eur_att27
03:13:38  32  ,att28 eur_att28
03:13:38  33  ,att29 eur_att29
03:13:38  34  ,att30 eur_att30
03:13:38  35  ,att31 eur_att31
03:13:38  36  ,att32 eur_att32
03:13:38  37  ,att33 eur_att33
03:13:38  38  ,att34 eur_att34
03:13:38  39  ,att35 eur_att35
03:13:38  40  ,att36 eur_att36
03:13:38  41  FROM q15
03:13:38  42  /

Table created.

Elapsed: 00:00:00.17
03:13:39 SQL> 
03:13:39 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
03:13:39 SQL> 
03:13:39 SQL> -- rpt
03:13:39 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     20390

Elapsed: 00:00:00.00
03:13:39 SQL> 
03:13:39 SQL> --
03:13:39 SQL> -- aud10.sql
03:13:39 SQL> --
03:13:39 SQL> 
03:13:39 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:13:39 SQL> 
03:13:39 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.48
03:13:40 SQL> 
03:13:40 SQL> -- I created di5min here:
03:13:40 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:13:40 SQL> 
03:13:40 SQL> CREATE OR REPLACE VIEW q11 AS
03:13:40   2  SELECT
03:13:40   3  pair
03:13:40   4  ,ydate
03:13:40   5  ,prdate
03:13:40   6  ,rownum rnum -- acts as t in my time-series
03:13:40   7  ,clse
03:13:40   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
03:13:40   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
03:13:40  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
03:13:40  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
03:13:40  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
03:13:40  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
03:13:40  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
03:13:40  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
03:13:40  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
03:13:40  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
03:13:40  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
03:13:40  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
03:13:40  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
03:13:40  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
03:13:40  22  FROM di5min WHERE pair LIKE'%aud%'
03:13:40  23  ORDER BY ydate
03:13:40  24  /

View created.

Elapsed: 00:00:00.05
03:13:40 SQL> 
03:13:40 SQL> -- rpt
03:13:40 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
aud_usd        20771

Elapsed: 00:00:00.34
03:13:40 SQL> 
03:13:40 SQL> -- Calc deltas and gains
03:13:40 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.22
03:13:40 SQL> 
03:13:40 SQL> CREATE TABLE q13 COMPRESS AS
03:13:40   2  SELECT
03:13:40   3  pair
03:13:40   4  ,ydate
03:13:40   5  ,prdate
03:13:40   6  ,rnum
03:13:40   7  ,ld8
03:13:40   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
03:13:40   9  -- step by 2
03:13:40  10  ,clse-lg6  d06
03:13:40  11  ,lg6 -lg8  d68
03:13:40  12  ,lg8 -lg10 d810
03:13:40  13  ,lg10-lg12 d1012
03:13:40  14  ,lg12-lg14 d1214
03:13:40  15  ,lg14-lg16 d1416
03:13:40  16  ,lg16-lg18 d1618
03:13:40  17  -- step by 4
03:13:40  18  ,lg6 -lg10 d610
03:13:40  19  ,lg8 -lg12 d812
03:13:40  20  ,lg10-lg14 d1014
03:13:40  21  ,lg12-lg16 d1216
03:13:40  22  --
03:13:40  23  ,ABS(clse-lg6 )dc6
03:13:40  24  ,ABS(clse-lg8 )dc8
03:13:40  25  ,ABS(clse-lg10)dc10
03:13:40  26  ,ABS(clse-lg12)dc12
03:13:40  27  ,ABS(clse-lg14)dc14
03:13:40  28  ,ABS(clse-lg16)dc16
03:13:40  29  ,ABS(clse-lg18)dc18
03:13:40  30  ,ABS(clse-lg20)dc20
03:13:40  31  ,ABS(clse-lg22)dc22
03:13:40  32  ,(ld8-clse) ug8
03:13:40  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:13:40  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:13:40  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:13:40  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:13:40  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:13:40  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:13:40  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:13:40  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
03:13:40  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
03:13:40  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
03:13:40  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
03:13:40  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
03:13:40  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
03:13:40  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:13:40  47  ,0+TO_CHAR(ydate,'D')d
03:13:40  48  ,0+TO_CHAR(ydate,'W')w
03:13:40  49  -- mpm stands for minutes-past-midnight:
03:13:40  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:13:40  51  FROM q11
03:13:40  52  -- I dont want any NULL values from the LAG() functions:
03:13:40  53  WHERE lg32 > 0
03:13:40  54  ORDER BY pair,ydate
03:13:40  55  /

Table created.

Elapsed: 00:00:01.70
03:13:42 SQL> 
03:13:42 SQL> -- rpt
03:13:42 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	   10707
	-1	    9680

Elapsed: 00:00:00.03
03:13:42 SQL> 
03:13:42 SQL> -- Calc gains and ntiles
03:13:42 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.13
03:13:42 SQL> CREATE TABLE q15 COMPRESS AS
03:13:42   2  SELECT
03:13:42   3  pair
03:13:42   4  ,ydate
03:13:42   5  ,prdate -- Should be unique
03:13:42   6  ,trend -- +1 or -1
03:13:42   7  -- Use NTILE() to derive some attributes
03:13:42   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
03:13:42   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
03:13:42  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
03:13:42  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
03:13:42  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
03:13:42  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
03:13:42  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
03:13:42  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
03:13:42  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
03:13:42  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
03:13:42  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
03:13:42  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
03:13:42  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
03:13:42  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
03:13:42  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
03:13:42  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
03:13:42  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
03:13:42  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
03:13:42  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
03:13:42  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
03:13:42  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
03:13:42  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
03:13:42  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
03:13:42  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
03:13:42  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
03:13:42  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
03:13:42  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
03:13:42  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
03:13:42  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
03:13:42  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
03:13:42  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
03:13:42  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
03:13:42  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
03:13:42  41  ,hh    att32
03:13:42  42  ,d     att33
03:13:42  43  ,w     att34
03:13:42  44  ,mpm   att35
03:13:42  45  ,trend att36
03:13:42  46  ,ug8 g8
03:13:42  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
03:13:42  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
03:13:42  49  FROM q13
03:13:42  50  ORDER BY pair,ydate
03:13:42  51  /

Table created.

Elapsed: 00:00:05.30
03:13:47 SQL> 
03:13:47 SQL> -- rpt
03:13:47 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
03:13:47   2  GROUP BY pair,trend,gatt,gattn
03:13:47   3  ORDER BY pair,trend,gatt,gattn
03:13:47   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
aud_usd 	-1 nup nup  .00001865	    3642
aud_usd 	-1 nup up  -.00519991	    2596
aud_usd 	-1 up  nup  .00518733	    3390
aud_usd 	-1			       0
aud_usd 	 1 nup nup 7.9438E-06	    4140
aud_usd 	 1 nup up  -.00495383	    3196
aud_usd 	 1 up  nup .005141997	    3327
aud_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
03:13:47 SQL> 
03:13:47 SQL> -- rpt
03:13:47 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
aud_usd 2010-12-22 03:10:00

Elapsed: 00:00:00.02
03:13:47 SQL> 
03:13:47 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
03:13:48 SQL> CREATE TABLE modsrc COMPRESS AS
03:13:48   2  SELECT
03:13:48   3  pair
03:13:48   4  ,ydate
03:13:48   5  ,prdate
03:13:48   6  ,trend
03:13:48   7  ,g8
03:13:48   8  ,gatt
03:13:48   9  ,gattn
03:13:48  10  FROM q15
03:13:48  11  /

Table created.

Elapsed: 00:00:00.11
03:13:48 SQL> 
03:13:48 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
03:13:48 SQL> 
03:13:48 SQL> -- rpt
03:13:48 SQL> 
03:13:48 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20771

Elapsed: 00:00:00.34
03:13:48 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20387

Elapsed: 00:00:00.01
03:13:48 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20387

Elapsed: 00:00:00.00
03:13:48 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20387

Elapsed: 00:00:00.01
03:13:48 SQL> 
03:13:48 SQL> DROP   TABLE aud_ms10 ;

Table dropped.

Elapsed: 00:00:00.03
03:13:48 SQL> CREATE TABLE aud_ms10 COMPRESS AS
03:13:48   2  SELECT
03:13:48   3  ydate
03:13:48   4  ,trend aud_trend
03:13:48   5  ,g8    aud_g8
03:13:48   6  ,gatt  aud_gatt
03:13:48   7  ,gattn aud_gattn
03:13:48   8  FROM modsrc
03:13:48   9  /

Table created.

Elapsed: 00:00:00.07
03:13:48 SQL> 
03:13:48 SQL> ANALYZE TABLE aud_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
03:13:48 SQL> 
03:13:48 SQL> -- rpt
03:13:48 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-14 11:40:01 2010-12-22 00:50:00	10663	  -.0203      .0136
	-1 2010-09-14 11:15:01 2010-12-22 03:10:00	 9628	  -.0196      .0148

Elapsed: 00:00:00.02
03:13:48 SQL> SELECT aud_trend,MIN(ydate),MAX(ydate),COUNT(aud_trend),MIN(aud_g8),MAX(aud_g8)FROM aud_ms10 GROUP BY aud_trend;

 AUD_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(AUD_TREND) MIN(AUD_G8) MAX(AUD_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-14 11:40:01 2010-12-22 00:50:00	      10707	 -.0203       .0136
	-1 2010-09-14 11:15:01 2010-12-22 03:10:00	       9680	 -.0196       .0148

Elapsed: 00:00:00.01
03:13:48 SQL> 
03:13:48 SQL> -- I need a copy of q15 attributes
03:13:48 SQL> 
03:13:48 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.04
03:13:49 SQL> CREATE TABLE aud_att COMPRESS AS
03:13:49   2  SELECT
03:13:49   3  ydate
03:13:49   4  ,att00 aud_att00
03:13:49   5  ,att01 aud_att01
03:13:49   6  ,att02 aud_att02
03:13:49   7  ,att03 aud_att03
03:13:49   8  ,att04 aud_att04
03:13:49   9  ,att05 aud_att05
03:13:49  10  ,att06 aud_att06
03:13:49  11  ,att07 aud_att07
03:13:49  12  ,att08 aud_att08
03:13:49  13  ,att09 aud_att09
03:13:49  14  ,att10 aud_att10
03:13:49  15  ,att11 aud_att11
03:13:49  16  ,att12 aud_att12
03:13:49  17  ,att13 aud_att13
03:13:49  18  ,att14 aud_att14
03:13:49  19  ,att15 aud_att15
03:13:49  20  ,att16 aud_att16
03:13:49  21  ,att17 aud_att17
03:13:49  22  ,att18 aud_att18
03:13:49  23  ,att19 aud_att19
03:13:49  24  ,att20 aud_att20
03:13:49  25  ,att21 aud_att21
03:13:49  26  ,att22 aud_att22
03:13:49  27  ,att23 aud_att23
03:13:49  28  ,att24 aud_att24
03:13:49  29  ,att25 aud_att25
03:13:49  30  ,att26 aud_att26
03:13:49  31  ,att27 aud_att27
03:13:49  32  ,att28 aud_att28
03:13:49  33  ,att29 aud_att29
03:13:49  34  ,att30 aud_att30
03:13:49  35  ,att31 aud_att31
03:13:49  36  ,att32 aud_att32
03:13:49  37  ,att33 aud_att33
03:13:49  38  ,att34 aud_att34
03:13:49  39  ,att35 aud_att35
03:13:49  40  ,att36 aud_att36
03:13:49  41  FROM q15
03:13:49  42  /

Table created.

Elapsed: 00:00:00.16
03:13:49 SQL> 
03:13:49 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.42
03:13:49 SQL> 
03:13:49 SQL> -- rpt
03:13:49 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     20387

Elapsed: 00:00:00.01
03:13:49 SQL> 
03:13:49 SQL> --
03:13:49 SQL> -- gbp10.sql
03:13:49 SQL> --
03:13:49 SQL> 
03:13:49 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:13:49 SQL> 
03:13:49 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.36
03:13:49 SQL> 
03:13:49 SQL> -- I created di5min here:
03:13:49 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:13:49 SQL> 
03:13:49 SQL> CREATE OR REPLACE VIEW q11 AS
03:13:49   2  SELECT
03:13:49   3  pair
03:13:49   4  ,ydate
03:13:49   5  ,prdate
03:13:49   6  ,rownum rnum -- acts as t in my time-series
03:13:49   7  ,clse
03:13:49   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
03:13:49   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
03:13:49  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
03:13:49  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
03:13:49  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
03:13:49  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
03:13:49  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
03:13:49  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
03:13:49  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
03:13:49  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
03:13:49  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
03:13:49  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
03:13:49  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
03:13:49  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
03:13:49  22  FROM di5min WHERE pair LIKE'%gbp%'
03:13:49  23  ORDER BY ydate
03:13:49  24  /

View created.

Elapsed: 00:00:00.05
03:13:50 SQL> 
03:13:50 SQL> -- rpt
03:13:50 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
gbp_usd        20773

Elapsed: 00:00:00.35
03:13:50 SQL> 
03:13:50 SQL> -- Calc deltas and gains
03:13:50 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.16
03:13:50 SQL> 
03:13:50 SQL> CREATE TABLE q13 COMPRESS AS
03:13:50   2  SELECT
03:13:50   3  pair
03:13:50   4  ,ydate
03:13:50   5  ,prdate
03:13:50   6  ,rnum
03:13:50   7  ,ld8
03:13:50   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
03:13:50   9  -- step by 2
03:13:50  10  ,clse-lg6  d06
03:13:50  11  ,lg6 -lg8  d68
03:13:50  12  ,lg8 -lg10 d810
03:13:50  13  ,lg10-lg12 d1012
03:13:50  14  ,lg12-lg14 d1214
03:13:50  15  ,lg14-lg16 d1416
03:13:50  16  ,lg16-lg18 d1618
03:13:50  17  -- step by 4
03:13:50  18  ,lg6 -lg10 d610
03:13:50  19  ,lg8 -lg12 d812
03:13:50  20  ,lg10-lg14 d1014
03:13:50  21  ,lg12-lg16 d1216
03:13:50  22  --
03:13:50  23  ,ABS(clse-lg6 )dc6
03:13:50  24  ,ABS(clse-lg8 )dc8
03:13:50  25  ,ABS(clse-lg10)dc10
03:13:50  26  ,ABS(clse-lg12)dc12
03:13:50  27  ,ABS(clse-lg14)dc14
03:13:50  28  ,ABS(clse-lg16)dc16
03:13:50  29  ,ABS(clse-lg18)dc18
03:13:50  30  ,ABS(clse-lg20)dc20
03:13:50  31  ,ABS(clse-lg22)dc22
03:13:50  32  ,(ld8-clse) ug8
03:13:50  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:13:50  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:13:50  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:13:50  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:13:50  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:13:50  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:13:50  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:13:50  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
03:13:50  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
03:13:50  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
03:13:50  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
03:13:50  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
03:13:50  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
03:13:50  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:13:50  47  ,0+TO_CHAR(ydate,'D')d
03:13:50  48  ,0+TO_CHAR(ydate,'W')w
03:13:50  49  -- mpm stands for minutes-past-midnight:
03:13:50  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:13:50  51  FROM q11
03:13:50  52  -- I dont want any NULL values from the LAG() functions:
03:13:50  53  WHERE lg32 > 0
03:13:50  54  ORDER BY pair,ydate
03:13:50  55  /

Table created.

Elapsed: 00:00:01.71
03:13:52 SQL> 
03:13:52 SQL> -- rpt
03:13:52 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	   10006
	-1	   10383

Elapsed: 00:00:00.04
03:13:52 SQL> 
03:13:52 SQL> -- Calc gains and ntiles
03:13:52 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.17
03:13:52 SQL> CREATE TABLE q15 COMPRESS AS
03:13:52   2  SELECT
03:13:52   3  pair
03:13:52   4  ,ydate
03:13:52   5  ,prdate -- Should be unique
03:13:52   6  ,trend -- +1 or -1
03:13:52   7  -- Use NTILE() to derive some attributes
03:13:52   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
03:13:52   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
03:13:52  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
03:13:52  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
03:13:52  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
03:13:52  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
03:13:52  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
03:13:52  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
03:13:52  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
03:13:52  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
03:13:52  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
03:13:52  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
03:13:52  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
03:13:52  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
03:13:52  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
03:13:52  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
03:13:52  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
03:13:52  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
03:13:52  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
03:13:52  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
03:13:52  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
03:13:52  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
03:13:52  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
03:13:52  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
03:13:52  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
03:13:52  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
03:13:52  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
03:13:52  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
03:13:52  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
03:13:52  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
03:13:52  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
03:13:52  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
03:13:52  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
03:13:52  41  ,hh    att32
03:13:52  42  ,d     att33
03:13:52  43  ,w     att34
03:13:52  44  ,mpm   att35
03:13:52  45  ,trend att36
03:13:52  46  ,ug8 g8
03:13:52  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
03:13:52  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
03:13:52  49  FROM q13
03:13:52  50  ORDER BY pair,ydate
03:13:52  51  /

Table created.

Elapsed: 00:00:05.45
03:13:57 SQL> 
03:13:57 SQL> -- rpt
03:13:57 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
03:13:57   2  GROUP BY pair,trend,gatt,gattn
03:13:57   3  ORDER BY pair,trend,gatt,gattn
03:13:57   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
gbp_usd 	-1 nup nup .000078589	    3821
gbp_usd 	-1 nup up  -.00587071	    3225
gbp_usd 	-1 up  nup .005661548	    3256
gbp_usd 	-1			       0
gbp_usd 	 1 nup nup -.00007496	    3654
gbp_usd 	 1 nup up  -.00553339	    3309
gbp_usd 	 1 up  nup .006093552	    3028
gbp_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
03:13:57 SQL> 
03:13:57 SQL> -- rpt
03:13:57 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
gbp_usd 2010-12-22 03:10:00

Elapsed: 00:00:00.02
03:13:57 SQL> 
03:13:57 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
03:13:58 SQL> CREATE TABLE modsrc COMPRESS AS
03:13:58   2  SELECT
03:13:58   3  pair
03:13:58   4  ,ydate
03:13:58   5  ,prdate
03:13:58   6  ,trend
03:13:58   7  ,g8
03:13:58   8  ,gatt
03:13:58   9  ,gattn
03:13:58  10  FROM q15
03:13:58  11  /

Table created.

Elapsed: 00:00:00.08
03:13:58 SQL> 
03:13:58 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
03:13:58 SQL> 
03:13:58 SQL> -- rpt
03:13:58 SQL> 
03:13:58 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20773

Elapsed: 00:00:00.35
03:13:58 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20389

Elapsed: 00:00:00.00
03:13:58 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20389

Elapsed: 00:00:00.01
03:13:58 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20389

Elapsed: 00:00:00.00
03:13:58 SQL> 
03:13:58 SQL> DROP   TABLE gbp_ms10 ;

Table dropped.

Elapsed: 00:00:00.03
03:13:58 SQL> CREATE TABLE gbp_ms10 COMPRESS AS
03:13:58   2  SELECT
03:13:58   3  ydate
03:13:58   4  ,trend gbp_trend
03:13:58   5  ,g8    gbp_g8
03:13:58   6  ,gatt  gbp_gatt
03:13:58   7  ,gattn gbp_gattn
03:13:58   8  FROM modsrc
03:13:58   9  /

Table created.

Elapsed: 00:00:00.06
03:13:58 SQL> 
03:13:58 SQL> ANALYZE TABLE gbp_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
03:13:58 SQL> 
03:13:58 SQL> -- rpt
03:13:58 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-14 12:00:01 2010-12-22 03:10:00	 9991	  -.0231       .019
	-1 2010-09-14 11:15:01 2010-12-22 02:35:00	10302	    -.02      .0204

Elapsed: 00:00:00.02
03:13:58 SQL> SELECT gbp_trend,MIN(ydate),MAX(ydate),COUNT(gbp_trend),MIN(gbp_g8),MAX(gbp_g8)FROM gbp_ms10 GROUP BY gbp_trend;

 GBP_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(GBP_TREND) MIN(GBP_G8) MAX(GBP_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-14 12:00:01 2010-12-22 03:10:00	      10006	 -.0231        .019
	-1 2010-09-14 11:15:01 2010-12-22 02:35:00	      10383	   -.02       .0204

Elapsed: 00:00:00.01
03:13:59 SQL> 
03:13:59 SQL> -- I need a copy of q15 attributes
03:13:59 SQL> 
03:13:59 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.05
03:13:59 SQL> CREATE TABLE gbp_att COMPRESS AS
03:13:59   2  SELECT
03:13:59   3  ydate
03:13:59   4  ,att00 gbp_att00
03:13:59   5  ,att01 gbp_att01
03:13:59   6  ,att02 gbp_att02
03:13:59   7  ,att03 gbp_att03
03:13:59   8  ,att04 gbp_att04
03:13:59   9  ,att05 gbp_att05
03:13:59  10  ,att06 gbp_att06
03:13:59  11  ,att07 gbp_att07
03:13:59  12  ,att08 gbp_att08
03:13:59  13  ,att09 gbp_att09
03:13:59  14  ,att10 gbp_att10
03:13:59  15  ,att11 gbp_att11
03:13:59  16  ,att12 gbp_att12
03:13:59  17  ,att13 gbp_att13
03:13:59  18  ,att14 gbp_att14
03:13:59  19  ,att15 gbp_att15
03:13:59  20  ,att16 gbp_att16
03:13:59  21  ,att17 gbp_att17
03:13:59  22  ,att18 gbp_att18
03:13:59  23  ,att19 gbp_att19
03:13:59  24  ,att20 gbp_att20
03:13:59  25  ,att21 gbp_att21
03:13:59  26  ,att22 gbp_att22
03:13:59  27  ,att23 gbp_att23
03:13:59  28  ,att24 gbp_att24
03:13:59  29  ,att25 gbp_att25
03:13:59  30  ,att26 gbp_att26
03:13:59  31  ,att27 gbp_att27
03:13:59  32  ,att28 gbp_att28
03:13:59  33  ,att29 gbp_att29
03:13:59  34  ,att30 gbp_att30
03:13:59  35  ,att31 gbp_att31
03:13:59  36  ,att32 gbp_att32
03:13:59  37  ,att33 gbp_att33
03:13:59  38  ,att34 gbp_att34
03:13:59  39  ,att35 gbp_att35
03:13:59  40  ,att36 gbp_att36
03:13:59  41  FROM q15
03:13:59  42  /

Table created.

Elapsed: 00:00:00.15
03:13:59 SQL> 
03:13:59 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
03:13:59 SQL> 
03:13:59 SQL> -- rpt
03:13:59 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     20389

Elapsed: 00:00:00.00
03:13:59 SQL> 
03:13:59 SQL> --
03:13:59 SQL> -- jpy10.sql
03:13:59 SQL> --
03:13:59 SQL> 
03:13:59 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:13:59 SQL> 
03:13:59 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
03:14:00 SQL> 
03:14:00 SQL> -- I created di5min here:
03:14:00 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:14:00 SQL> 
03:14:00 SQL> CREATE OR REPLACE VIEW q11 AS
03:14:00   2  SELECT
03:14:00   3  pair
03:14:00   4  ,ydate
03:14:00   5  ,prdate
03:14:00   6  ,rownum rnum -- acts as t in my time-series
03:14:00   7  ,clse
03:14:00   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
03:14:00   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
03:14:00  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
03:14:00  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
03:14:00  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
03:14:00  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
03:14:00  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
03:14:00  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
03:14:00  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
03:14:00  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
03:14:00  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
03:14:00  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
03:14:00  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
03:14:00  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
03:14:00  22  FROM di5min WHERE pair LIKE'%jpy%'
03:14:00  23  ORDER BY ydate
03:14:00  24  /

View created.

Elapsed: 00:00:00.04
03:14:00 SQL> 
03:14:00 SQL> -- rpt
03:14:00 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_jpy        20772

Elapsed: 00:00:00.36
03:14:00 SQL> 
03:14:00 SQL> -- Calc deltas and gains
03:14:00 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.17
03:14:00 SQL> 
03:14:00 SQL> CREATE TABLE q13 COMPRESS AS
03:14:00   2  SELECT
03:14:00   3  pair
03:14:00   4  ,ydate
03:14:00   5  ,prdate
03:14:00   6  ,rnum
03:14:00   7  ,ld8
03:14:00   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
03:14:00   9  -- step by 2
03:14:00  10  ,clse-lg6  d06
03:14:00  11  ,lg6 -lg8  d68
03:14:00  12  ,lg8 -lg10 d810
03:14:00  13  ,lg10-lg12 d1012
03:14:00  14  ,lg12-lg14 d1214
03:14:00  15  ,lg14-lg16 d1416
03:14:00  16  ,lg16-lg18 d1618
03:14:00  17  -- step by 4
03:14:00  18  ,lg6 -lg10 d610
03:14:00  19  ,lg8 -lg12 d812
03:14:00  20  ,lg10-lg14 d1014
03:14:00  21  ,lg12-lg16 d1216
03:14:00  22  --
03:14:00  23  ,ABS(clse-lg6 )dc6
03:14:00  24  ,ABS(clse-lg8 )dc8
03:14:00  25  ,ABS(clse-lg10)dc10
03:14:00  26  ,ABS(clse-lg12)dc12
03:14:00  27  ,ABS(clse-lg14)dc14
03:14:00  28  ,ABS(clse-lg16)dc16
03:14:00  29  ,ABS(clse-lg18)dc18
03:14:00  30  ,ABS(clse-lg20)dc20
03:14:00  31  ,ABS(clse-lg22)dc22
03:14:00  32  ,(ld8-clse) ug8
03:14:00  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:14:00  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:14:00  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:14:00  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:14:00  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:14:00  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:14:00  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:14:00  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
03:14:00  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
03:14:00  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
03:14:00  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
03:14:00  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
03:14:00  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
03:14:00  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:14:00  47  ,0+TO_CHAR(ydate,'D')d
03:14:00  48  ,0+TO_CHAR(ydate,'W')w
03:14:00  49  -- mpm stands for minutes-past-midnight:
03:14:00  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:14:00  51  FROM q11
03:14:00  52  -- I dont want any NULL values from the LAG() functions:
03:14:00  53  WHERE lg32 > 0
03:14:00  54  ORDER BY pair,ydate
03:14:00  55  /

Table created.

Elapsed: 00:00:01.66
03:14:02 SQL> 
03:14:02 SQL> -- rpt
03:14:02 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9618
	-1	   10770

Elapsed: 00:00:00.03
03:14:02 SQL> 
03:14:02 SQL> -- Calc gains and ntiles
03:14:02 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.12
03:14:02 SQL> CREATE TABLE q15 COMPRESS AS
03:14:02   2  SELECT
03:14:02   3  pair
03:14:02   4  ,ydate
03:14:02   5  ,prdate -- Should be unique
03:14:02   6  ,trend -- +1 or -1
03:14:02   7  -- Use NTILE() to derive some attributes
03:14:02   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
03:14:02   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
03:14:02  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
03:14:02  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
03:14:02  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
03:14:02  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
03:14:02  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
03:14:02  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
03:14:02  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
03:14:02  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
03:14:02  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
03:14:02  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
03:14:02  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
03:14:02  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
03:14:02  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
03:14:02  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
03:14:02  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
03:14:02  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
03:14:02  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
03:14:02  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
03:14:02  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
03:14:02  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
03:14:02  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
03:14:02  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
03:14:02  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
03:14:02  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
03:14:02  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
03:14:02  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
03:14:02  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
03:14:02  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
03:14:02  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
03:14:02  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
03:14:02  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
03:14:02  41  ,hh    att32
03:14:02  42  ,d     att33
03:14:02  43  ,w     att34
03:14:02  44  ,mpm   att35
03:14:02  45  ,trend att36
03:14:02  46  ,ug8 g8
03:14:02  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
03:14:02  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
03:14:02  49  FROM q13
03:14:02  50  ORDER BY pair,ydate
03:14:02  51  /

Table created.

Elapsed: 00:00:05.57
03:14:08 SQL> 
03:14:08 SQL> -- rpt
03:14:08 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
03:14:08   2  GROUP BY pair,trend,gatt,gattn
03:14:08   3  ORDER BY pair,trend,gatt,gattn
03:14:08   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_jpy 	-1 nup nup .000015244	     164
usd_jpy 	-1 nup up  -.18452129	    5332
usd_jpy 	-1 up  nup .204067419	    5273
usd_jpy 	-1			       0
usd_jpy 	 1 nup nup	    0	     119
usd_jpy 	 1 nup up   -.1871431	    5061
usd_jpy 	 1 up  nup .211972139	    4343
usd_jpy 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
03:14:08 SQL> 
03:14:08 SQL> -- rpt
03:14:08 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_jpy 2010-12-22 03:10:00

Elapsed: 00:00:00.02
03:14:08 SQL> 
03:14:08 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
03:14:08 SQL> CREATE TABLE modsrc COMPRESS AS
03:14:08   2  SELECT
03:14:08   3  pair
03:14:08   4  ,ydate
03:14:08   5  ,prdate
03:14:08   6  ,trend
03:14:08   7  ,g8
03:14:08   8  ,gatt
03:14:08   9  ,gattn
03:14:08  10  FROM q15
03:14:08  11  /

Table created.

Elapsed: 00:00:00.08
03:14:08 SQL> 
03:14:08 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.27
03:14:08 SQL> 
03:14:08 SQL> -- rpt
03:14:08 SQL> 
03:14:08 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20772

Elapsed: 00:00:00.34
03:14:08 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20388

Elapsed: 00:00:00.01
03:14:08 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20388

Elapsed: 00:00:00.00
03:14:08 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20388

Elapsed: 00:00:00.01
03:14:08 SQL> 
03:14:08 SQL> DROP   TABLE jpy_ms10 ;

Table dropped.

Elapsed: 00:00:00.03
03:14:08 SQL> CREATE TABLE jpy_ms10 COMPRESS AS
03:14:08   2  SELECT
03:14:08   3  ydate
03:14:08   4  ,trend jpy_trend
03:14:08   5  ,g8    jpy_g8
03:14:08   6  ,gatt  jpy_gatt
03:14:08   7  ,gattn jpy_gattn
03:14:08   8  FROM modsrc
03:14:08   9  /

Table created.

Elapsed: 00:00:00.07
03:14:09 SQL> 
03:14:09 SQL> ANALYZE TABLE jpy_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
03:14:09 SQL> 
03:14:09 SQL> -- rpt
03:14:09 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-14 22:15:01 2010-12-22 03:10:00	 9523	  -1.185       2.42
	-1 2010-09-14 11:15:01 2010-12-21 16:30:00	10769	 -1.0575       2.49

Elapsed: 00:00:00.01
03:14:09 SQL> SELECT jpy_trend,MIN(ydate),MAX(ydate),COUNT(jpy_trend),MIN(jpy_g8),MAX(jpy_g8)FROM jpy_ms10 GROUP BY jpy_trend;

 JPY_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(JPY_TREND) MIN(JPY_G8) MAX(JPY_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-14 22:15:01 2010-12-22 03:10:00	       9618	 -1.185        2.42
	-1 2010-09-14 11:15:01 2010-12-21 16:30:00	      10770	-1.0575        2.49

Elapsed: 00:00:00.01
03:14:09 SQL> 
03:14:09 SQL> -- I need a copy of q15 attributes
03:14:09 SQL> 
03:14:09 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.04
03:14:09 SQL> CREATE TABLE jpy_att COMPRESS AS
03:14:09   2  SELECT
03:14:09   3  ydate
03:14:09   4  ,att00 jpy_att00
03:14:09   5  ,att01 jpy_att01
03:14:09   6  ,att02 jpy_att02
03:14:09   7  ,att03 jpy_att03
03:14:09   8  ,att04 jpy_att04
03:14:09   9  ,att05 jpy_att05
03:14:09  10  ,att06 jpy_att06
03:14:09  11  ,att07 jpy_att07
03:14:09  12  ,att08 jpy_att08
03:14:09  13  ,att09 jpy_att09
03:14:09  14  ,att10 jpy_att10
03:14:09  15  ,att11 jpy_att11
03:14:09  16  ,att12 jpy_att12
03:14:09  17  ,att13 jpy_att13
03:14:09  18  ,att14 jpy_att14
03:14:09  19  ,att15 jpy_att15
03:14:09  20  ,att16 jpy_att16
03:14:09  21  ,att17 jpy_att17
03:14:09  22  ,att18 jpy_att18
03:14:09  23  ,att19 jpy_att19
03:14:09  24  ,att20 jpy_att20
03:14:09  25  ,att21 jpy_att21
03:14:09  26  ,att22 jpy_att22
03:14:09  27  ,att23 jpy_att23
03:14:09  28  ,att24 jpy_att24
03:14:09  29  ,att25 jpy_att25
03:14:09  30  ,att26 jpy_att26
03:14:09  31  ,att27 jpy_att27
03:14:09  32  ,att28 jpy_att28
03:14:09  33  ,att29 jpy_att29
03:14:09  34  ,att30 jpy_att30
03:14:09  35  ,att31 jpy_att31
03:14:09  36  ,att32 jpy_att32
03:14:09  37  ,att33 jpy_att33
03:14:09  38  ,att34 jpy_att34
03:14:09  39  ,att35 jpy_att35
03:14:09  40  ,att36 jpy_att36
03:14:09  41  FROM q15
03:14:09  42  /

Table created.

Elapsed: 00:00:00.19
03:14:09 SQL> 
03:14:09 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
03:14:09 SQL> 
03:14:09 SQL> -- rpt
03:14:09 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     20388

Elapsed: 00:00:00.01
03:14:09 SQL> 
03:14:09 SQL> --
03:14:09 SQL> -- cad10.sql
03:14:09 SQL> --
03:14:09 SQL> 
03:14:09 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:14:09 SQL> 
03:14:09 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.35
03:14:10 SQL> 
03:14:10 SQL> -- I created di5min here:
03:14:10 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:14:10 SQL> 
03:14:10 SQL> CREATE OR REPLACE VIEW q11 AS
03:14:10   2  SELECT
03:14:10   3  pair
03:14:10   4  ,ydate
03:14:10   5  ,prdate
03:14:10   6  ,rownum rnum -- acts as t in my time-series
03:14:10   7  ,clse
03:14:10   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
03:14:10   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
03:14:10  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
03:14:10  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
03:14:10  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
03:14:10  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
03:14:10  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
03:14:10  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
03:14:10  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
03:14:10  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
03:14:10  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
03:14:10  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
03:14:10  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
03:14:10  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
03:14:10  22  FROM di5min WHERE pair LIKE'%cad%'
03:14:10  23  ORDER BY ydate
03:14:10  24  /

View created.

Elapsed: 00:00:00.05
03:14:10 SQL> 
03:14:10 SQL> -- rpt
03:14:10 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_cad        20770

Elapsed: 00:00:00.37
03:14:10 SQL> 
03:14:10 SQL> -- Calc deltas and gains
03:14:10 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.18
03:14:10 SQL> 
03:14:10 SQL> CREATE TABLE q13 COMPRESS AS
03:14:10   2  SELECT
03:14:10   3  pair
03:14:10   4  ,ydate
03:14:10   5  ,prdate
03:14:10   6  ,rnum
03:14:10   7  ,ld8
03:14:10   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
03:14:10   9  -- step by 2
03:14:10  10  ,clse-lg6  d06
03:14:10  11  ,lg6 -lg8  d68
03:14:10  12  ,lg8 -lg10 d810
03:14:10  13  ,lg10-lg12 d1012
03:14:10  14  ,lg12-lg14 d1214
03:14:10  15  ,lg14-lg16 d1416
03:14:10  16  ,lg16-lg18 d1618
03:14:10  17  -- step by 4
03:14:10  18  ,lg6 -lg10 d610
03:14:10  19  ,lg8 -lg12 d812
03:14:10  20  ,lg10-lg14 d1014
03:14:10  21  ,lg12-lg16 d1216
03:14:10  22  --
03:14:10  23  ,ABS(clse-lg6 )dc6
03:14:10  24  ,ABS(clse-lg8 )dc8
03:14:10  25  ,ABS(clse-lg10)dc10
03:14:10  26  ,ABS(clse-lg12)dc12
03:14:10  27  ,ABS(clse-lg14)dc14
03:14:10  28  ,ABS(clse-lg16)dc16
03:14:10  29  ,ABS(clse-lg18)dc18
03:14:10  30  ,ABS(clse-lg20)dc20
03:14:10  31  ,ABS(clse-lg22)dc22
03:14:10  32  ,(ld8-clse) ug8
03:14:10  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:14:10  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:14:10  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:14:10  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:14:10  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:14:10  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:14:10  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:14:10  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
03:14:10  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
03:14:10  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
03:14:10  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
03:14:10  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
03:14:10  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
03:14:10  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:14:10  47  ,0+TO_CHAR(ydate,'D')d
03:14:10  48  ,0+TO_CHAR(ydate,'W')w
03:14:10  49  -- mpm stands for minutes-past-midnight:
03:14:10  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:14:10  51  FROM q11
03:14:10  52  -- I dont want any NULL values from the LAG() functions:
03:14:10  53  WHERE lg32 > 0
03:14:10  54  ORDER BY pair,ydate
03:14:10  55  /

Table created.

Elapsed: 00:00:01.70
03:14:12 SQL> 
03:14:12 SQL> -- rpt
03:14:12 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9472
	-1	   10914

Elapsed: 00:00:00.02
03:14:12 SQL> 
03:14:12 SQL> -- Calc gains and ntiles
03:14:12 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.12
03:14:12 SQL> CREATE TABLE q15 COMPRESS AS
03:14:12   2  SELECT
03:14:12   3  pair
03:14:12   4  ,ydate
03:14:12   5  ,prdate -- Should be unique
03:14:12   6  ,trend -- +1 or -1
03:14:12   7  -- Use NTILE() to derive some attributes
03:14:12   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
03:14:12   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
03:14:12  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
03:14:12  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
03:14:12  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
03:14:12  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
03:14:12  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
03:14:12  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
03:14:12  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
03:14:12  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
03:14:12  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
03:14:12  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
03:14:12  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
03:14:12  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
03:14:12  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
03:14:12  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
03:14:12  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
03:14:12  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
03:14:12  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
03:14:12  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
03:14:12  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
03:14:12  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
03:14:12  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
03:14:12  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
03:14:12  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
03:14:12  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
03:14:12  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
03:14:12  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
03:14:12  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
03:14:12  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
03:14:12  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
03:14:12  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
03:14:12  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
03:14:12  41  ,hh    att32
03:14:12  42  ,d     att33
03:14:12  43  ,w     att34
03:14:12  44  ,mpm   att35
03:14:12  45  ,trend att36
03:14:12  46  ,ug8 g8
03:14:12  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
03:14:12  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
03:14:12  49  FROM q13
03:14:12  50  ORDER BY pair,ydate
03:14:12  51  /

Table created.

Elapsed: 00:00:05.38
03:14:18 SQL> 
03:14:18 SQL> -- rpt
03:14:18 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
03:14:18   2  GROUP BY pair,trend,gatt,gattn
03:14:18   3  ORDER BY pair,trend,gatt,gattn
03:14:18   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_cad 	-1 nup nup -.00001869	    5639
usd_cad 	-1 nup up  -.00402275	    2575
usd_cad 	-1 up  nup .004656015	    2637
usd_cad 	-1			       0
usd_cad 	 1 nup nup -.00011426	    4704
usd_cad 	 1 nup up  -.00420553	    2695
usd_cad 	 1 up  nup .004582672	    2040
usd_cad 	 1			       0

8 rows selected.

Elapsed: 00:00:00.02
03:14:18 SQL> 
03:14:18 SQL> -- rpt
03:14:18 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_cad 2010-12-22 03:10:00

Elapsed: 00:00:00.02
03:14:18 SQL> 
03:14:18 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
03:14:18 SQL> CREATE TABLE modsrc COMPRESS AS
03:14:18   2  SELECT
03:14:18   3  pair
03:14:18   4  ,ydate
03:14:18   5  ,prdate
03:14:18   6  ,trend
03:14:18   7  ,g8
03:14:18   8  ,gatt
03:14:18   9  ,gattn
03:14:18  10  FROM q15
03:14:18  11  /

Table created.

Elapsed: 00:00:00.08
03:14:18 SQL> 
03:14:18 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
03:14:18 SQL> 
03:14:18 SQL> -- rpt
03:14:18 SQL> 
03:14:18 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20770

Elapsed: 00:00:00.35
03:14:18 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20386

Elapsed: 00:00:00.00
03:14:18 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20386

Elapsed: 00:00:00.01
03:14:18 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20386

Elapsed: 00:00:00.00
03:14:18 SQL> 
03:14:18 SQL> DROP   TABLE cad_ms10 ;

Table dropped.

Elapsed: 00:00:00.03
03:14:18 SQL> CREATE TABLE cad_ms10 COMPRESS AS
03:14:18   2  SELECT
03:14:18   3  ydate
03:14:18   4  ,trend cad_trend
03:14:18   5  ,g8    cad_g8
03:14:18   6  ,gatt  cad_gatt
03:14:18   7  ,gattn cad_gattn
03:14:18   8  FROM modsrc
03:14:18   9  /

Table created.

Elapsed: 00:00:00.06
03:14:19 SQL> 
03:14:19 SQL> ANALYZE TABLE cad_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
03:14:19 SQL> 
03:14:19 SQL> -- rpt
03:14:19 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-14 19:50:01 2010-12-21 19:20:00	 9439	  -.0122      .0159
	-1 2010-09-14 11:15:01 2010-12-22 03:10:00	10851	 -.01105      .0176

Elapsed: 00:00:00.03
03:14:19 SQL> SELECT cad_trend,MIN(ydate),MAX(ydate),COUNT(cad_trend),MIN(cad_g8),MAX(cad_g8)FROM cad_ms10 GROUP BY cad_trend;

 CAD_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(CAD_TREND) MIN(CAD_G8) MAX(CAD_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-14 19:50:01 2010-12-21 19:20:00	       9472	 -.0122       .0159
	-1 2010-09-14 11:15:01 2010-12-22 03:10:00	      10914	-.01105       .0176

Elapsed: 00:00:00.01
03:14:19 SQL> 
03:14:19 SQL> -- I need a copy of q15 attributes
03:14:19 SQL> 
03:14:19 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.05
03:14:19 SQL> CREATE TABLE cad_att COMPRESS AS
03:14:19   2  SELECT
03:14:19   3  ydate
03:14:19   4  ,att00 cad_att00
03:14:19   5  ,att01 cad_att01
03:14:19   6  ,att02 cad_att02
03:14:19   7  ,att03 cad_att03
03:14:19   8  ,att04 cad_att04
03:14:19   9  ,att05 cad_att05
03:14:19  10  ,att06 cad_att06
03:14:19  11  ,att07 cad_att07
03:14:19  12  ,att08 cad_att08
03:14:19  13  ,att09 cad_att09
03:14:19  14  ,att10 cad_att10
03:14:19  15  ,att11 cad_att11
03:14:19  16  ,att12 cad_att12
03:14:19  17  ,att13 cad_att13
03:14:19  18  ,att14 cad_att14
03:14:19  19  ,att15 cad_att15
03:14:19  20  ,att16 cad_att16
03:14:19  21  ,att17 cad_att17
03:14:19  22  ,att18 cad_att18
03:14:19  23  ,att19 cad_att19
03:14:19  24  ,att20 cad_att20
03:14:19  25  ,att21 cad_att21
03:14:19  26  ,att22 cad_att22
03:14:19  27  ,att23 cad_att23
03:14:19  28  ,att24 cad_att24
03:14:19  29  ,att25 cad_att25
03:14:19  30  ,att26 cad_att26
03:14:19  31  ,att27 cad_att27
03:14:19  32  ,att28 cad_att28
03:14:19  33  ,att29 cad_att29
03:14:19  34  ,att30 cad_att30
03:14:19  35  ,att31 cad_att31
03:14:19  36  ,att32 cad_att32
03:14:19  37  ,att33 cad_att33
03:14:19  38  ,att34 cad_att34
03:14:19  39  ,att35 cad_att35
03:14:19  40  ,att36 cad_att36
03:14:19  41  FROM q15
03:14:19  42  /

Table created.

Elapsed: 00:00:00.16
03:14:19 SQL> 
03:14:19 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
03:14:19 SQL> 
03:14:19 SQL> -- rpt
03:14:19 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     20386

Elapsed: 00:00:00.00
03:14:19 SQL> 
03:14:19 SQL> --
03:14:19 SQL> -- chf10.sql
03:14:19 SQL> --
03:14:19 SQL> 
03:14:19 SQL> -- Creates views and tables for backtesting a forex SVM strategy
03:14:19 SQL> 
03:14:19 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.38
03:14:20 SQL> 
03:14:20 SQL> -- I created di5min here:
03:14:20 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
03:14:20 SQL> 
03:14:20 SQL> CREATE OR REPLACE VIEW q11 AS
03:14:20   2  SELECT
03:14:20   3  pair
03:14:20   4  ,ydate
03:14:20   5  ,prdate
03:14:20   6  ,rownum rnum -- acts as t in my time-series
03:14:20   7  ,clse
03:14:20   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
03:14:20   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
03:14:20  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
03:14:20  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
03:14:20  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
03:14:20  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
03:14:20  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
03:14:20  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
03:14:20  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
03:14:20  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
03:14:20  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
03:14:20  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
03:14:20  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
03:14:20  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
03:14:20  22  FROM di5min WHERE pair LIKE'%chf%'
03:14:20  23  ORDER BY ydate
03:14:20  24  /

View created.

Elapsed: 00:00:00.05
03:14:20 SQL> 
03:14:20 SQL> -- rpt
03:14:20 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_chf        20773

Elapsed: 00:00:00.34
03:14:20 SQL> 
03:14:20 SQL> -- Calc deltas and gains
03:14:20 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.18
03:14:20 SQL> 
03:14:20 SQL> CREATE TABLE q13 COMPRESS AS
03:14:20   2  SELECT
03:14:20   3  pair
03:14:20   4  ,ydate
03:14:20   5  ,prdate
03:14:20   6  ,rnum
03:14:20   7  ,ld8
03:14:20   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
03:14:20   9  -- step by 2
03:14:20  10  ,clse-lg6  d06
03:14:20  11  ,lg6 -lg8  d68
03:14:20  12  ,lg8 -lg10 d810
03:14:20  13  ,lg10-lg12 d1012
03:14:20  14  ,lg12-lg14 d1214
03:14:20  15  ,lg14-lg16 d1416
03:14:20  16  ,lg16-lg18 d1618
03:14:20  17  -- step by 4
03:14:20  18  ,lg6 -lg10 d610
03:14:20  19  ,lg8 -lg12 d812
03:14:20  20  ,lg10-lg14 d1014
03:14:20  21  ,lg12-lg16 d1216
03:14:20  22  --
03:14:20  23  ,ABS(clse-lg6 )dc6
03:14:20  24  ,ABS(clse-lg8 )dc8
03:14:20  25  ,ABS(clse-lg10)dc10
03:14:20  26  ,ABS(clse-lg12)dc12
03:14:20  27  ,ABS(clse-lg14)dc14
03:14:20  28  ,ABS(clse-lg16)dc16
03:14:20  29  ,ABS(clse-lg18)dc18
03:14:20  30  ,ABS(clse-lg20)dc20
03:14:20  31  ,ABS(clse-lg22)dc22
03:14:20  32  ,(ld8-clse) ug8
03:14:20  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
03:14:20  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
03:14:20  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
03:14:20  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
03:14:20  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
03:14:20  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
03:14:20  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
03:14:20  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
03:14:20  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
03:14:20  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
03:14:20  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
03:14:20  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
03:14:20  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
03:14:20  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
03:14:20  47  ,0+TO_CHAR(ydate,'D')d
03:14:20  48  ,0+TO_CHAR(ydate,'W')w
03:14:20  49  -- mpm stands for minutes-past-midnight:
03:14:20  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
03:14:20  51  FROM q11
03:14:20  52  -- I dont want any NULL values from the LAG() functions:
03:14:20  53  WHERE lg32 > 0
03:14:20  54  ORDER BY pair,ydate
03:14:20  55  /

Table created.

Elapsed: 00:00:01.69
03:14:22 SQL> 
03:14:22 SQL> -- rpt
03:14:22 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9705
	-1	   10684

Elapsed: 00:00:00.03
03:14:22 SQL> 
03:14:22 SQL> -- Calc gains and ntiles
03:14:22 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.12
03:14:22 SQL> CREATE TABLE q15 COMPRESS AS
03:14:22   2  SELECT
03:14:22   3  pair
03:14:22   4  ,ydate
03:14:22   5  ,prdate -- Should be unique
03:14:22   6  ,trend -- +1 or -1
03:14:22   7  -- Use NTILE() to derive some attributes
03:14:22   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
03:14:22   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
03:14:22  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
03:14:22  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
03:14:22  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
03:14:22  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
03:14:22  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
03:14:22  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
03:14:22  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
03:14:22  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
03:14:22  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
03:14:22  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
03:14:22  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
03:14:22  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
03:14:22  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
03:14:22  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
03:14:22  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
03:14:22  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
03:14:22  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
03:14:22  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
03:14:22  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
03:14:22  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
03:14:22  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
03:14:22  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
03:14:22  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
03:14:22  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
03:14:22  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
03:14:22  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
03:14:22  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
03:14:22  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
03:14:22  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
03:14:22  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
03:14:22  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
03:14:22  41  ,hh    att32
03:14:22  42  ,d     att33
03:14:22  43  ,w     att34
03:14:22  44  ,mpm   att35
03:14:22  45  ,trend att36
03:14:22  46  ,ug8 g8
03:14:22  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
03:14:22  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
03:14:22  49  FROM q13
03:14:22  50  ORDER BY pair,ydate
03:14:22  51  /

Table created.

Elapsed: 00:00:05.31
03:14:28 SQL> 
03:14:28 SQL> -- rpt
03:14:28 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
03:14:28   2  GROUP BY pair,trend,gatt,gattn
03:14:28   3  ORDER BY pair,trend,gatt,gattn
03:14:28   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_chf 	-1 nup nup .000047352	    4858
usd_chf 	-1 nup up  -.00499418	    3036
usd_chf 	-1 up  nup  .00522019	    2713
usd_chf 	-1			       0
usd_chf 	 1 nup nup -.00001062	    4682
usd_chf 	 1 nup up  -.00459708	    2855
usd_chf 	 1 up  nup  .00470652	    2149
usd_chf 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
03:14:28 SQL> 
03:14:28 SQL> -- rpt
03:14:28 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_chf 2010-12-22 03:10:00

Elapsed: 00:00:00.02
03:14:28 SQL> 
03:14:28 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
03:14:28 SQL> CREATE TABLE modsrc COMPRESS AS
03:14:28   2  SELECT
03:14:28   3  pair
03:14:28   4  ,ydate
03:14:28   5  ,prdate
03:14:28   6  ,trend
03:14:28   7  ,g8
03:14:28   8  ,gatt
03:14:28   9  ,gattn
03:14:28  10  FROM q15
03:14:28  11  /

Table created.

Elapsed: 00:00:00.08
03:14:28 SQL> 
03:14:28 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
03:14:28 SQL> 
03:14:28 SQL> -- rpt
03:14:28 SQL> 
03:14:28 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20773

Elapsed: 00:00:00.33
03:14:28 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20389

Elapsed: 00:00:00.01
03:14:28 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20389

Elapsed: 00:00:00.01
03:14:28 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20389

Elapsed: 00:00:00.00
03:14:28 SQL> 
03:14:28 SQL> DROP   TABLE chf_ms10 ;

Table dropped.

Elapsed: 00:00:00.03
03:14:28 SQL> CREATE TABLE chf_ms10 COMPRESS AS
03:14:28   2  SELECT
03:14:28   3  ydate
03:14:28   4  ,trend chf_trend
03:14:28   5  ,g8    chf_g8
03:14:28   6  ,gatt  chf_gatt
03:14:28   7  ,gattn chf_gattn
03:14:28   8  FROM modsrc
03:14:28   9  /

Table created.

Elapsed: 00:00:00.07
03:14:28 SQL> 
03:14:28 SQL> ANALYZE TABLE chf_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
03:14:29 SQL> 
03:14:29 SQL> -- rpt
03:14:29 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-14 11:15:01 2010-12-22 02:15:00	 9686	 -.01775      .0155
	-1 2010-09-14 13:30:01 2010-12-22 03:10:00	10607	 -.01825     .01545

Elapsed: 00:00:00.03
03:14:29 SQL> SELECT chf_trend,MIN(ydate),MAX(ydate),COUNT(chf_trend),MIN(chf_g8),MAX(chf_g8)FROM chf_ms10 GROUP BY chf_trend;

 CHF_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(CHF_TREND) MIN(CHF_G8) MAX(CHF_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-14 11:15:01 2010-12-22 02:15:00	       9705	-.01775       .0155
	-1 2010-09-14 13:30:01 2010-12-22 03:10:00	      10684	-.01825      .01545

Elapsed: 00:00:00.01
03:14:29 SQL> 
03:14:29 SQL> -- I need a copy of q15 attributes
03:14:29 SQL> 
03:14:29 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.05
03:14:29 SQL> CREATE TABLE chf_att COMPRESS AS
03:14:29   2  SELECT
03:14:29   3  ydate
03:14:29   4  ,att00 chf_att00
03:14:29   5  ,att01 chf_att01
03:14:29   6  ,att02 chf_att02
03:14:29   7  ,att03 chf_att03
03:14:29   8  ,att04 chf_att04
03:14:29   9  ,att05 chf_att05
03:14:29  10  ,att06 chf_att06
03:14:29  11  ,att07 chf_att07
03:14:29  12  ,att08 chf_att08
03:14:29  13  ,att09 chf_att09
03:14:29  14  ,att10 chf_att10
03:14:29  15  ,att11 chf_att11
03:14:29  16  ,att12 chf_att12
03:14:29  17  ,att13 chf_att13
03:14:29  18  ,att14 chf_att14
03:14:29  19  ,att15 chf_att15
03:14:29  20  ,att16 chf_att16
03:14:29  21  ,att17 chf_att17
03:14:29  22  ,att18 chf_att18
03:14:29  23  ,att19 chf_att19
03:14:29  24  ,att20 chf_att20
03:14:29  25  ,att21 chf_att21
03:14:29  26  ,att22 chf_att22
03:14:29  27  ,att23 chf_att23
03:14:29  28  ,att24 chf_att24
03:14:29  29  ,att25 chf_att25
03:14:29  30  ,att26 chf_att26
03:14:29  31  ,att27 chf_att27
03:14:29  32  ,att28 chf_att28
03:14:29  33  ,att29 chf_att29
03:14:29  34  ,att30 chf_att30
03:14:29  35  ,att31 chf_att31
03:14:29  36  ,att32 chf_att32
03:14:29  37  ,att33 chf_att33
03:14:29  38  ,att34 chf_att34
03:14:29  39  ,att35 chf_att35
03:14:29  40  ,att36 chf_att36
03:14:29  41  FROM q15
03:14:29  42  /

Table created.

Elapsed: 00:00:00.17
03:14:29 SQL> 
03:14:29 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
03:14:29 SQL> 
03:14:29 SQL> -- rpt
03:14:29 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     20389

Elapsed: 00:00:00.00
03:14:29 SQL> 
03:14:29 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
