
SQL*Plus: Release 11.2.0.1.0 Production on Fri Dec 24 22:17:48 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

22:17:49 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
22:17:49 SQL> 22:17:49 SQL> --
22:17:49 SQL> -- eur10.sql
22:17:49 SQL> --
22:17:49 SQL> 
22:17:49 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:17:49 SQL> 
22:17:49 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.04
22:17:49 SQL> 
22:17:49 SQL> -- I created di5min here:
22:17:49 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:17:49 SQL> 
22:17:49 SQL> CREATE OR REPLACE VIEW q11 AS
22:17:49   2  SELECT
22:17:49   3  pair
22:17:49   4  ,ydate
22:17:49   5  ,prdate
22:17:49   6  ,rownum rnum -- acts as t in my time-series
22:17:49   7  ,clse
22:17:49   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
22:17:49   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
22:17:49  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
22:17:49  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
22:17:49  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
22:17:49  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
22:17:49  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
22:17:49  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
22:17:49  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
22:17:49  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
22:17:49  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
22:17:49  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
22:17:49  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
22:17:49  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
22:17:49  22  FROM di5min WHERE pair LIKE'%eur%'
22:17:49  23  ORDER BY ydate
22:17:49  24  /

View created.

Elapsed: 00:00:00.04
22:17:49 SQL> 
22:17:49 SQL> -- rpt
22:17:49 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
eur_usd        20739

Elapsed: 00:00:00.35
22:17:49 SQL> 
22:17:49 SQL> -- Calc deltas and gains
22:17:49 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.05
22:17:49 SQL> 
22:17:49 SQL> CREATE TABLE q13 COMPRESS AS
22:17:49   2  SELECT
22:17:49   3  pair
22:17:49   4  ,ydate
22:17:49   5  ,prdate
22:17:49   6  ,rnum
22:17:49   7  ,ld8
22:17:49   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
22:17:49   9  -- step by 2
22:17:49  10  ,clse-lg6  d06
22:17:49  11  ,lg6 -lg8  d68
22:17:49  12  ,lg8 -lg10 d810
22:17:49  13  ,lg10-lg12 d1012
22:17:49  14  ,lg12-lg14 d1214
22:17:49  15  ,lg14-lg16 d1416
22:17:49  16  ,lg16-lg18 d1618
22:17:49  17  -- step by 4
22:17:49  18  ,lg6 -lg10 d610
22:17:49  19  ,lg8 -lg12 d812
22:17:49  20  ,lg10-lg14 d1014
22:17:49  21  ,lg12-lg16 d1216
22:17:49  22  --
22:17:49  23  ,ABS(clse-lg6 )dc6
22:17:49  24  ,ABS(clse-lg8 )dc8
22:17:49  25  ,ABS(clse-lg10)dc10
22:17:49  26  ,ABS(clse-lg12)dc12
22:17:49  27  ,ABS(clse-lg14)dc14
22:17:49  28  ,ABS(clse-lg16)dc16
22:17:49  29  ,ABS(clse-lg18)dc18
22:17:49  30  ,ABS(clse-lg20)dc20
22:17:49  31  ,ABS(clse-lg22)dc22
22:17:49  32  ,(ld8-clse) ug8
22:17:49  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:17:49  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:17:49  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:17:49  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:17:49  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:17:49  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:17:49  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:17:49  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
22:17:49  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
22:17:49  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
22:17:49  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
22:17:49  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
22:17:49  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
22:17:49  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:17:49  47  ,0+TO_CHAR(ydate,'D')d
22:17:49  48  ,0+TO_CHAR(ydate,'W')w
22:17:49  49  -- mpm stands for minutes-past-midnight:
22:17:49  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:17:49  51  FROM q11
22:17:49  52  -- I dont want any NULL values from the LAG() functions:
22:17:49  53  WHERE lg32 > 0
22:17:49  54  ORDER BY pair,ydate
22:17:49  55  /

Table created.

Elapsed: 00:00:01.94
22:17:51 SQL> 
22:17:51 SQL> -- rpt
22:17:51 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	   10062
	-1	   10293

Elapsed: 00:00:00.03
22:17:51 SQL> 
22:17:51 SQL> -- Calc gains and ntiles
22:17:51 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.15
22:17:51 SQL> CREATE TABLE q15 COMPRESS AS
22:17:51   2  SELECT
22:17:51   3  pair
22:17:51   4  ,ydate
22:17:51   5  ,prdate -- Should be unique
22:17:51   6  ,trend -- +1 or -1
22:17:51   7  -- Use NTILE() to derive some attributes
22:17:51   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
22:17:51   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
22:17:51  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
22:17:51  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
22:17:51  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
22:17:51  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
22:17:51  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
22:17:51  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
22:17:51  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
22:17:51  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
22:17:51  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
22:17:51  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
22:17:51  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
22:17:51  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
22:17:51  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
22:17:51  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
22:17:51  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
22:17:51  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
22:17:51  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
22:17:51  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
22:17:51  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
22:17:51  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
22:17:51  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
22:17:51  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
22:17:51  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
22:17:51  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
22:17:51  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
22:17:51  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
22:17:51  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
22:17:51  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
22:17:51  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
22:17:51  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
22:17:51  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
22:17:51  41  ,hh    att32
22:17:51  42  ,d     att33
22:17:51  43  ,w     att34
22:17:51  44  ,mpm   att35
22:17:51  45  ,trend att36
22:17:51  46  ,ug8 g8
22:17:51  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
22:17:51  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
22:17:51  49  FROM q13
22:17:51  50  ORDER BY pair,ydate
22:17:51  51  /

Table created.

Elapsed: 00:00:05.35
22:17:57 SQL> 
22:17:57 SQL> -- rpt
22:17:57 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
22:17:57   2  GROUP BY pair,trend,gatt,gattn
22:17:57   3  ORDER BY pair,trend,gatt,gattn
22:17:57   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
eur_usd 	-1 nup nup .000015674	    3056
eur_usd 	-1 nup up  -.00602802	    3651
eur_usd 	-1 up  nup .005753384	    3502
eur_usd 	-1			       0
eur_usd 	 1 nup nup -.00008564	    3001
eur_usd 	 1 nup up  -.00625257	    3445
eur_usd 	 1 up  nup .006573807	    3604
eur_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
22:17:57 SQL> 
22:17:57 SQL> -- rpt
22:17:57 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
eur_usd 2010-12-24 21:55:00

Elapsed: 00:00:00.02
22:17:57 SQL> 
22:17:57 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.03
22:17:57 SQL> CREATE TABLE modsrc COMPRESS AS
22:17:57   2  SELECT
22:17:57   3  pair
22:17:57   4  ,ydate
22:17:57   5  ,prdate
22:17:57   6  ,trend
22:17:57   7  ,g8
22:17:57   8  ,gatt
22:17:57   9  ,gattn
22:17:57  10  FROM q15
22:17:57  11  /

Table created.

Elapsed: 00:00:00.10
22:17:57 SQL> 
22:17:57 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
22:17:57 SQL> 
22:17:57 SQL> -- rpt
22:17:57 SQL> 
22:17:57 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20739

Elapsed: 00:00:00.33
22:17:57 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20355

Elapsed: 00:00:00.01
22:17:57 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20355

Elapsed: 00:00:00.01
22:17:57 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20355

Elapsed: 00:00:00.00
22:17:57 SQL> 
22:17:57 SQL> DROP   TABLE eur_ms10 ;

Table dropped.

Elapsed: 00:00:00.04
22:17:57 SQL> CREATE TABLE eur_ms10 COMPRESS AS
22:17:57   2  SELECT
22:17:57   3  ydate
22:17:57   4  ,trend eur_trend
22:17:57   5  ,g8    eur_g8
22:17:57   6  ,gatt  eur_gatt
22:17:57   7  ,gattn eur_gattn
22:17:57   8  FROM modsrc
22:17:57   9  /

Table created.

Elapsed: 00:00:00.07
22:17:57 SQL> 
22:17:57 SQL> ANALYZE TABLE eur_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
22:17:58 SQL> 
22:17:58 SQL> -- rpt
22:17:58 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-17 06:20:01 2010-12-24 21:55:00	10050	  -.0218     .02165
	-1 2010-09-17 11:05:01 2010-12-24 21:45:00	10209	 -.02085      .0196

Elapsed: 00:00:00.02
22:17:58 SQL> SELECT eur_trend,MIN(ydate),MAX(ydate),COUNT(eur_trend),MIN(eur_g8),MAX(eur_g8)FROM eur_ms10 GROUP BY eur_trend;

 EUR_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(EUR_TREND) MIN(EUR_G8) MAX(EUR_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-17 06:20:01 2010-12-24 21:55:00	      10062	 -.0218      .02165
	-1 2010-09-17 11:05:01 2010-12-24 21:45:00	      10293	-.02085       .0196

Elapsed: 00:00:00.01
22:17:58 SQL> 
22:17:58 SQL> -- I need a copy of q15 attributes
22:17:58 SQL> 
22:17:58 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.03
22:17:58 SQL> CREATE TABLE eur_att COMPRESS AS
22:17:58   2  SELECT
22:17:58   3  ydate
22:17:58   4  ,att00 eur_att00
22:17:58   5  ,att01 eur_att01
22:17:58   6  ,att02 eur_att02
22:17:58   7  ,att03 eur_att03
22:17:58   8  ,att04 eur_att04
22:17:58   9  ,att05 eur_att05
22:17:58  10  ,att06 eur_att06
22:17:58  11  ,att07 eur_att07
22:17:58  12  ,att08 eur_att08
22:17:58  13  ,att09 eur_att09
22:17:58  14  ,att10 eur_att10
22:17:58  15  ,att11 eur_att11
22:17:58  16  ,att12 eur_att12
22:17:58  17  ,att13 eur_att13
22:17:58  18  ,att14 eur_att14
22:17:58  19  ,att15 eur_att15
22:17:58  20  ,att16 eur_att16
22:17:58  21  ,att17 eur_att17
22:17:58  22  ,att18 eur_att18
22:17:58  23  ,att19 eur_att19
22:17:58  24  ,att20 eur_att20
22:17:58  25  ,att21 eur_att21
22:17:58  26  ,att22 eur_att22
22:17:58  27  ,att23 eur_att23
22:17:58  28  ,att24 eur_att24
22:17:58  29  ,att25 eur_att25
22:17:58  30  ,att26 eur_att26
22:17:58  31  ,att27 eur_att27
22:17:58  32  ,att28 eur_att28
22:17:58  33  ,att29 eur_att29
22:17:58  34  ,att30 eur_att30
22:17:58  35  ,att31 eur_att31
22:17:58  36  ,att32 eur_att32
22:17:58  37  ,att33 eur_att33
22:17:58  38  ,att34 eur_att34
22:17:58  39  ,att35 eur_att35
22:17:58  40  ,att36 eur_att36
22:17:58  41  FROM q15
22:17:58  42  /

Table created.

Elapsed: 00:00:00.22
22:17:58 SQL> 
22:17:58 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
22:17:58 SQL> 
22:17:58 SQL> -- rpt
22:17:58 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     20355

Elapsed: 00:00:00.00
22:17:58 SQL> 
22:17:58 SQL> --
22:17:58 SQL> -- aud10.sql
22:17:58 SQL> --
22:17:58 SQL> 
22:17:58 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:17:58 SQL> 
22:17:58 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.34
22:17:59 SQL> 
22:17:59 SQL> -- I created di5min here:
22:17:59 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:17:59 SQL> 
22:17:59 SQL> CREATE OR REPLACE VIEW q11 AS
22:17:59   2  SELECT
22:17:59   3  pair
22:17:59   4  ,ydate
22:17:59   5  ,prdate
22:17:59   6  ,rownum rnum -- acts as t in my time-series
22:17:59   7  ,clse
22:17:59   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
22:17:59   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
22:17:59  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
22:17:59  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
22:17:59  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
22:17:59  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
22:17:59  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
22:17:59  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
22:17:59  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
22:17:59  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
22:17:59  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
22:17:59  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
22:17:59  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
22:17:59  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
22:17:59  22  FROM di5min WHERE pair LIKE'%aud%'
22:17:59  23  ORDER BY ydate
22:17:59  24  /

View created.

Elapsed: 00:00:00.03
22:17:59 SQL> 
22:17:59 SQL> -- rpt
22:17:59 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
aud_usd        20736

Elapsed: 00:00:00.33
22:17:59 SQL> 
22:17:59 SQL> -- Calc deltas and gains
22:17:59 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.23
22:17:59 SQL> 
22:17:59 SQL> CREATE TABLE q13 COMPRESS AS
22:17:59   2  SELECT
22:17:59   3  pair
22:17:59   4  ,ydate
22:17:59   5  ,prdate
22:17:59   6  ,rnum
22:17:59   7  ,ld8
22:17:59   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
22:17:59   9  -- step by 2
22:17:59  10  ,clse-lg6  d06
22:17:59  11  ,lg6 -lg8  d68
22:17:59  12  ,lg8 -lg10 d810
22:17:59  13  ,lg10-lg12 d1012
22:17:59  14  ,lg12-lg14 d1214
22:17:59  15  ,lg14-lg16 d1416
22:17:59  16  ,lg16-lg18 d1618
22:17:59  17  -- step by 4
22:17:59  18  ,lg6 -lg10 d610
22:17:59  19  ,lg8 -lg12 d812
22:17:59  20  ,lg10-lg14 d1014
22:17:59  21  ,lg12-lg16 d1216
22:17:59  22  --
22:17:59  23  ,ABS(clse-lg6 )dc6
22:17:59  24  ,ABS(clse-lg8 )dc8
22:17:59  25  ,ABS(clse-lg10)dc10
22:17:59  26  ,ABS(clse-lg12)dc12
22:17:59  27  ,ABS(clse-lg14)dc14
22:17:59  28  ,ABS(clse-lg16)dc16
22:17:59  29  ,ABS(clse-lg18)dc18
22:17:59  30  ,ABS(clse-lg20)dc20
22:17:59  31  ,ABS(clse-lg22)dc22
22:17:59  32  ,(ld8-clse) ug8
22:17:59  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:17:59  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:17:59  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:17:59  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:17:59  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:17:59  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:17:59  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:17:59  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
22:17:59  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
22:17:59  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
22:17:59  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
22:17:59  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
22:17:59  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
22:17:59  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:17:59  47  ,0+TO_CHAR(ydate,'D')d
22:17:59  48  ,0+TO_CHAR(ydate,'W')w
22:17:59  49  -- mpm stands for minutes-past-midnight:
22:17:59  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:17:59  51  FROM q11
22:17:59  52  -- I dont want any NULL values from the LAG() functions:
22:17:59  53  WHERE lg32 > 0
22:17:59  54  ORDER BY pair,ydate
22:17:59  55  /

Table created.

Elapsed: 00:00:01.71
22:18:01 SQL> 
22:18:01 SQL> -- rpt
22:18:01 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	   10874
	-1	    9478

Elapsed: 00:00:00.03
22:18:01 SQL> 
22:18:01 SQL> -- Calc gains and ntiles
22:18:01 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.12
22:18:01 SQL> CREATE TABLE q15 COMPRESS AS
22:18:01   2  SELECT
22:18:01   3  pair
22:18:01   4  ,ydate
22:18:01   5  ,prdate -- Should be unique
22:18:01   6  ,trend -- +1 or -1
22:18:01   7  -- Use NTILE() to derive some attributes
22:18:01   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
22:18:01   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
22:18:01  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
22:18:01  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
22:18:01  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
22:18:01  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
22:18:01  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
22:18:01  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
22:18:01  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
22:18:01  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
22:18:01  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
22:18:01  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
22:18:01  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
22:18:01  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
22:18:01  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
22:18:01  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
22:18:01  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
22:18:01  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
22:18:01  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
22:18:01  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
22:18:01  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
22:18:01  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
22:18:01  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
22:18:01  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
22:18:01  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
22:18:01  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
22:18:01  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
22:18:01  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
22:18:01  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
22:18:01  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
22:18:01  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
22:18:01  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
22:18:01  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
22:18:01  41  ,hh    att32
22:18:01  42  ,d     att33
22:18:01  43  ,w     att34
22:18:01  44  ,mpm   att35
22:18:01  45  ,trend att36
22:18:01  46  ,ug8 g8
22:18:01  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
22:18:01  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
22:18:01  49  FROM q13
22:18:01  50  ORDER BY pair,ydate
22:18:01  51  /

Table created.

Elapsed: 00:00:05.29
22:18:06 SQL> 
22:18:06 SQL> -- rpt
22:18:06 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
22:18:06   2  GROUP BY pair,trend,gatt,gattn
22:18:06   3  ORDER BY pair,trend,gatt,gattn
22:18:06   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
aud_usd 	-1 nup nup .000053661	    3612
aud_usd 	-1 nup up  -.00525835	    2519
aud_usd 	-1 up  nup .005159668	    3337
aud_usd 	-1			       0
aud_usd 	 1 nup nup .000039046	    4432
aud_usd 	 1 nup up  -.00500882	    3043
aud_usd 	 1 up  nup .005059519	    3313
aud_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.04
22:18:06 SQL> 
22:18:06 SQL> -- rpt
22:18:06 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
aud_usd 2010-12-24 21:55:00

Elapsed: 00:00:00.02
22:18:07 SQL> 
22:18:07 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
22:18:07 SQL> CREATE TABLE modsrc COMPRESS AS
22:18:07   2  SELECT
22:18:07   3  pair
22:18:07   4  ,ydate
22:18:07   5  ,prdate
22:18:07   6  ,trend
22:18:07   7  ,g8
22:18:07   8  ,gatt
22:18:07   9  ,gattn
22:18:07  10  FROM q15
22:18:07  11  /

Table created.

Elapsed: 00:00:00.07
22:18:07 SQL> 
22:18:07 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
22:18:07 SQL> 
22:18:07 SQL> -- rpt
22:18:07 SQL> 
22:18:07 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20736

Elapsed: 00:00:00.34
22:18:07 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20352

Elapsed: 00:00:00.00
22:18:07 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20352

Elapsed: 00:00:00.01
22:18:07 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20352

Elapsed: 00:00:00.00
22:18:07 SQL> 
22:18:07 SQL> DROP   TABLE aud_ms10 ;

Table dropped.

Elapsed: 00:00:00.02
22:18:07 SQL> CREATE TABLE aud_ms10 COMPRESS AS
22:18:07   2  SELECT
22:18:07   3  ydate
22:18:07   4  ,trend aud_trend
22:18:07   5  ,g8    aud_g8
22:18:07   6  ,gatt  aud_gatt
22:18:07   7  ,gattn aud_gattn
22:18:07   8  FROM modsrc
22:18:07   9  /

Table created.

Elapsed: 00:00:00.07
22:18:07 SQL> 
22:18:07 SQL> ANALYZE TABLE aud_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
22:18:08 SQL> 
22:18:08 SQL> -- rpt
22:18:08 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-17 06:20:01 2010-12-24 21:55:00	10788	  -.0203      .0136
	-1 2010-09-17 11:50:01 2010-12-24 17:55:00	 9468	  -.0196      .0148

Elapsed: 00:00:00.02
22:18:08 SQL> SELECT aud_trend,MIN(ydate),MAX(ydate),COUNT(aud_trend),MIN(aud_g8),MAX(aud_g8)FROM aud_ms10 GROUP BY aud_trend;

 AUD_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(AUD_TREND) MIN(AUD_G8) MAX(AUD_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-17 06:20:01 2010-12-24 21:55:00	      10874	 -.0203       .0136
	-1 2010-09-17 11:50:01 2010-12-24 17:55:00	       9478	 -.0196       .0148

Elapsed: 00:00:00.01
22:18:08 SQL> 
22:18:08 SQL> -- I need a copy of q15 attributes
22:18:08 SQL> 
22:18:08 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.03
22:18:08 SQL> CREATE TABLE aud_att COMPRESS AS
22:18:08   2  SELECT
22:18:08   3  ydate
22:18:08   4  ,att00 aud_att00
22:18:08   5  ,att01 aud_att01
22:18:08   6  ,att02 aud_att02
22:18:08   7  ,att03 aud_att03
22:18:08   8  ,att04 aud_att04
22:18:08   9  ,att05 aud_att05
22:18:08  10  ,att06 aud_att06
22:18:08  11  ,att07 aud_att07
22:18:08  12  ,att08 aud_att08
22:18:08  13  ,att09 aud_att09
22:18:08  14  ,att10 aud_att10
22:18:08  15  ,att11 aud_att11
22:18:08  16  ,att12 aud_att12
22:18:08  17  ,att13 aud_att13
22:18:08  18  ,att14 aud_att14
22:18:08  19  ,att15 aud_att15
22:18:08  20  ,att16 aud_att16
22:18:08  21  ,att17 aud_att17
22:18:08  22  ,att18 aud_att18
22:18:08  23  ,att19 aud_att19
22:18:08  24  ,att20 aud_att20
22:18:08  25  ,att21 aud_att21
22:18:08  26  ,att22 aud_att22
22:18:08  27  ,att23 aud_att23
22:18:08  28  ,att24 aud_att24
22:18:08  29  ,att25 aud_att25
22:18:08  30  ,att26 aud_att26
22:18:08  31  ,att27 aud_att27
22:18:08  32  ,att28 aud_att28
22:18:08  33  ,att29 aud_att29
22:18:08  34  ,att30 aud_att30
22:18:08  35  ,att31 aud_att31
22:18:08  36  ,att32 aud_att32
22:18:08  37  ,att33 aud_att33
22:18:08  38  ,att34 aud_att34
22:18:08  39  ,att35 aud_att35
22:18:08  40  ,att36 aud_att36
22:18:08  41  FROM q15
22:18:08  42  /

Table created.

Elapsed: 00:00:00.25
22:18:08 SQL> 
22:18:08 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
22:18:08 SQL> 
22:18:08 SQL> -- rpt
22:18:08 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     20352

Elapsed: 00:00:00.00
22:18:08 SQL> 
22:18:08 SQL> --
22:18:08 SQL> -- gbp10.sql
22:18:08 SQL> --
22:18:08 SQL> 
22:18:08 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:18:08 SQL> 
22:18:08 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.54
22:18:09 SQL> 
22:18:09 SQL> -- I created di5min here:
22:18:09 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:18:09 SQL> 
22:18:09 SQL> CREATE OR REPLACE VIEW q11 AS
22:18:09   2  SELECT
22:18:09   3  pair
22:18:09   4  ,ydate
22:18:09   5  ,prdate
22:18:09   6  ,rownum rnum -- acts as t in my time-series
22:18:09   7  ,clse
22:18:09   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
22:18:09   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
22:18:09  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
22:18:09  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
22:18:09  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
22:18:09  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
22:18:09  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
22:18:09  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
22:18:09  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
22:18:09  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
22:18:09  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
22:18:09  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
22:18:09  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
22:18:09  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
22:18:09  22  FROM di5min WHERE pair LIKE'%gbp%'
22:18:09  23  ORDER BY ydate
22:18:09  24  /

View created.

Elapsed: 00:00:00.04
22:18:09 SQL> 
22:18:09 SQL> -- rpt
22:18:09 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
gbp_usd        20738

Elapsed: 00:00:00.35
22:18:09 SQL> 
22:18:09 SQL> -- Calc deltas and gains
22:18:09 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.25
22:18:09 SQL> 
22:18:09 SQL> CREATE TABLE q13 COMPRESS AS
22:18:09   2  SELECT
22:18:09   3  pair
22:18:09   4  ,ydate
22:18:09   5  ,prdate
22:18:09   6  ,rnum
22:18:09   7  ,ld8
22:18:09   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
22:18:09   9  -- step by 2
22:18:09  10  ,clse-lg6  d06
22:18:09  11  ,lg6 -lg8  d68
22:18:09  12  ,lg8 -lg10 d810
22:18:09  13  ,lg10-lg12 d1012
22:18:09  14  ,lg12-lg14 d1214
22:18:09  15  ,lg14-lg16 d1416
22:18:09  16  ,lg16-lg18 d1618
22:18:09  17  -- step by 4
22:18:09  18  ,lg6 -lg10 d610
22:18:09  19  ,lg8 -lg12 d812
22:18:09  20  ,lg10-lg14 d1014
22:18:09  21  ,lg12-lg16 d1216
22:18:09  22  --
22:18:09  23  ,ABS(clse-lg6 )dc6
22:18:09  24  ,ABS(clse-lg8 )dc8
22:18:09  25  ,ABS(clse-lg10)dc10
22:18:09  26  ,ABS(clse-lg12)dc12
22:18:09  27  ,ABS(clse-lg14)dc14
22:18:09  28  ,ABS(clse-lg16)dc16
22:18:09  29  ,ABS(clse-lg18)dc18
22:18:09  30  ,ABS(clse-lg20)dc20
22:18:09  31  ,ABS(clse-lg22)dc22
22:18:09  32  ,(ld8-clse) ug8
22:18:09  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:18:09  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:18:09  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:18:09  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:18:09  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:18:09  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:18:09  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:18:09  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
22:18:09  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
22:18:09  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
22:18:09  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
22:18:09  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
22:18:09  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
22:18:09  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:18:09  47  ,0+TO_CHAR(ydate,'D')d
22:18:09  48  ,0+TO_CHAR(ydate,'W')w
22:18:09  49  -- mpm stands for minutes-past-midnight:
22:18:09  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:18:09  51  FROM q11
22:18:09  52  -- I dont want any NULL values from the LAG() functions:
22:18:09  53  WHERE lg32 > 0
22:18:09  54  ORDER BY pair,ydate
22:18:09  55  /

Table created.

Elapsed: 00:00:01.73
22:18:11 SQL> 
22:18:11 SQL> -- rpt
22:18:11 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9957
	-1	   10397

Elapsed: 00:00:00.03
22:18:11 SQL> 
22:18:11 SQL> -- Calc gains and ntiles
22:18:11 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.12
22:18:11 SQL> CREATE TABLE q15 COMPRESS AS
22:18:11   2  SELECT
22:18:11   3  pair
22:18:11   4  ,ydate
22:18:11   5  ,prdate -- Should be unique
22:18:11   6  ,trend -- +1 or -1
22:18:11   7  -- Use NTILE() to derive some attributes
22:18:11   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
22:18:11   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
22:18:11  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
22:18:11  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
22:18:11  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
22:18:11  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
22:18:11  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
22:18:11  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
22:18:11  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
22:18:11  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
22:18:11  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
22:18:11  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
22:18:11  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
22:18:11  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
22:18:11  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
22:18:11  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
22:18:11  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
22:18:11  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
22:18:11  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
22:18:11  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
22:18:11  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
22:18:11  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
22:18:11  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
22:18:11  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
22:18:11  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
22:18:11  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
22:18:11  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
22:18:11  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
22:18:11  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
22:18:11  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
22:18:11  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
22:18:11  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
22:18:11  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
22:18:11  41  ,hh    att32
22:18:11  42  ,d     att33
22:18:11  43  ,w     att34
22:18:11  44  ,mpm   att35
22:18:11  45  ,trend att36
22:18:11  46  ,ug8 g8
22:18:11  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
22:18:11  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
22:18:11  49  FROM q13
22:18:11  50  ORDER BY pair,ydate
22:18:11  51  /

Table created.

Elapsed: 00:00:05.33
22:18:17 SQL> 
22:18:17 SQL> -- rpt
22:18:17 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
22:18:17   2  GROUP BY pair,trend,gatt,gattn
22:18:17   3  ORDER BY pair,trend,gatt,gattn
22:18:17   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
gbp_usd 	-1 nup nup .000096883	    3854
gbp_usd 	-1 nup up   -.0059004	    3270
gbp_usd 	-1 up  nup .005424498	    3211
gbp_usd 	-1			       0
gbp_usd 	 1 nup nup  -.0000748	    3696
gbp_usd 	 1 nup up  -.00554629	    3265
gbp_usd 	 1 up  nup .005946801	    2962
gbp_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
22:18:17 SQL> 
22:18:17 SQL> -- rpt
22:18:17 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
gbp_usd 2010-12-24 21:55:00

Elapsed: 00:00:00.02
22:18:17 SQL> 
22:18:17 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
22:18:17 SQL> CREATE TABLE modsrc COMPRESS AS
22:18:17   2  SELECT
22:18:17   3  pair
22:18:17   4  ,ydate
22:18:17   5  ,prdate
22:18:17   6  ,trend
22:18:17   7  ,g8
22:18:17   8  ,gatt
22:18:17   9  ,gattn
22:18:17  10  FROM q15
22:18:17  11  /

Table created.

Elapsed: 00:00:00.08
22:18:17 SQL> 
22:18:17 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
22:18:17 SQL> 
22:18:17 SQL> -- rpt
22:18:17 SQL> 
22:18:17 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20738

Elapsed: 00:00:00.35
22:18:18 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20354

Elapsed: 00:00:00.00
22:18:18 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20354

Elapsed: 00:00:00.01
22:18:18 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20354

Elapsed: 00:00:00.00
22:18:18 SQL> 
22:18:18 SQL> DROP   TABLE gbp_ms10 ;

Table dropped.

Elapsed: 00:00:00.05
22:18:18 SQL> CREATE TABLE gbp_ms10 COMPRESS AS
22:18:18   2  SELECT
22:18:18   3  ydate
22:18:18   4  ,trend gbp_trend
22:18:18   5  ,g8    gbp_g8
22:18:18   6  ,gatt  gbp_gatt
22:18:18   7  ,gattn gbp_gattn
22:18:18   8  FROM modsrc
22:18:18   9  /

Table created.

Elapsed: 00:00:00.06
22:18:18 SQL> 
22:18:18 SQL> ANALYZE TABLE gbp_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
22:18:18 SQL> 
22:18:18 SQL> -- rpt
22:18:18 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-17 06:20:01 2010-12-24 21:55:00	 9923	  -.0231       .019
	-1 2010-09-17 11:55:01 2010-12-24 20:50:00	10335	    -.02      .0204

Elapsed: 00:00:00.02
22:18:18 SQL> SELECT gbp_trend,MIN(ydate),MAX(ydate),COUNT(gbp_trend),MIN(gbp_g8),MAX(gbp_g8)FROM gbp_ms10 GROUP BY gbp_trend;

 GBP_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(GBP_TREND) MIN(GBP_G8) MAX(GBP_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-17 06:20:01 2010-12-24 21:55:00	       9957	 -.0231        .019
	-1 2010-09-17 11:55:01 2010-12-24 20:50:00	      10397	   -.02       .0204

Elapsed: 00:00:00.01
22:18:18 SQL> 
22:18:18 SQL> -- I need a copy of q15 attributes
22:18:18 SQL> 
22:18:18 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.03
22:18:18 SQL> CREATE TABLE gbp_att COMPRESS AS
22:18:18   2  SELECT
22:18:18   3  ydate
22:18:18   4  ,att00 gbp_att00
22:18:18   5  ,att01 gbp_att01
22:18:18   6  ,att02 gbp_att02
22:18:18   7  ,att03 gbp_att03
22:18:18   8  ,att04 gbp_att04
22:18:18   9  ,att05 gbp_att05
22:18:18  10  ,att06 gbp_att06
22:18:18  11  ,att07 gbp_att07
22:18:18  12  ,att08 gbp_att08
22:18:18  13  ,att09 gbp_att09
22:18:18  14  ,att10 gbp_att10
22:18:18  15  ,att11 gbp_att11
22:18:18  16  ,att12 gbp_att12
22:18:18  17  ,att13 gbp_att13
22:18:18  18  ,att14 gbp_att14
22:18:18  19  ,att15 gbp_att15
22:18:18  20  ,att16 gbp_att16
22:18:18  21  ,att17 gbp_att17
22:18:18  22  ,att18 gbp_att18
22:18:18  23  ,att19 gbp_att19
22:18:18  24  ,att20 gbp_att20
22:18:18  25  ,att21 gbp_att21
22:18:18  26  ,att22 gbp_att22
22:18:18  27  ,att23 gbp_att23
22:18:18  28  ,att24 gbp_att24
22:18:18  29  ,att25 gbp_att25
22:18:18  30  ,att26 gbp_att26
22:18:18  31  ,att27 gbp_att27
22:18:18  32  ,att28 gbp_att28
22:18:18  33  ,att29 gbp_att29
22:18:18  34  ,att30 gbp_att30
22:18:18  35  ,att31 gbp_att31
22:18:18  36  ,att32 gbp_att32
22:18:18  37  ,att33 gbp_att33
22:18:18  38  ,att34 gbp_att34
22:18:18  39  ,att35 gbp_att35
22:18:18  40  ,att36 gbp_att36
22:18:18  41  FROM q15
22:18:18  42  /

Table created.

Elapsed: 00:00:00.17
22:18:18 SQL> 
22:18:18 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:01.25
22:18:19 SQL> 
22:18:19 SQL> -- rpt
22:18:19 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     20354

Elapsed: 00:00:00.01
22:18:19 SQL> 
22:18:19 SQL> --
22:18:19 SQL> -- jpy10.sql
22:18:19 SQL> --
22:18:19 SQL> 
22:18:19 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:18:19 SQL> 
22:18:19 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.42
22:18:20 SQL> 
22:18:20 SQL> -- I created di5min here:
22:18:20 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:18:20 SQL> 
22:18:20 SQL> CREATE OR REPLACE VIEW q11 AS
22:18:20   2  SELECT
22:18:20   3  pair
22:18:20   4  ,ydate
22:18:20   5  ,prdate
22:18:20   6  ,rownum rnum -- acts as t in my time-series
22:18:20   7  ,clse
22:18:20   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
22:18:20   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
22:18:20  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
22:18:20  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
22:18:20  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
22:18:20  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
22:18:20  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
22:18:20  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
22:18:20  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
22:18:20  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
22:18:20  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
22:18:20  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
22:18:20  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
22:18:20  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
22:18:20  22  FROM di5min WHERE pair LIKE'%jpy%'
22:18:20  23  ORDER BY ydate
22:18:20  24  /

View created.

Elapsed: 00:00:00.04
22:18:20 SQL> 
22:18:20 SQL> -- rpt
22:18:20 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_jpy        20737

Elapsed: 00:00:00.36
22:18:20 SQL> 
22:18:20 SQL> -- Calc deltas and gains
22:18:20 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.15
22:18:20 SQL> 
22:18:20 SQL> CREATE TABLE q13 COMPRESS AS
22:18:20   2  SELECT
22:18:20   3  pair
22:18:20   4  ,ydate
22:18:20   5  ,prdate
22:18:20   6  ,rnum
22:18:20   7  ,ld8
22:18:20   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
22:18:20   9  -- step by 2
22:18:20  10  ,clse-lg6  d06
22:18:20  11  ,lg6 -lg8  d68
22:18:20  12  ,lg8 -lg10 d810
22:18:20  13  ,lg10-lg12 d1012
22:18:20  14  ,lg12-lg14 d1214
22:18:20  15  ,lg14-lg16 d1416
22:18:20  16  ,lg16-lg18 d1618
22:18:20  17  -- step by 4
22:18:20  18  ,lg6 -lg10 d610
22:18:20  19  ,lg8 -lg12 d812
22:18:20  20  ,lg10-lg14 d1014
22:18:20  21  ,lg12-lg16 d1216
22:18:20  22  --
22:18:20  23  ,ABS(clse-lg6 )dc6
22:18:20  24  ,ABS(clse-lg8 )dc8
22:18:20  25  ,ABS(clse-lg10)dc10
22:18:20  26  ,ABS(clse-lg12)dc12
22:18:20  27  ,ABS(clse-lg14)dc14
22:18:20  28  ,ABS(clse-lg16)dc16
22:18:20  29  ,ABS(clse-lg18)dc18
22:18:20  30  ,ABS(clse-lg20)dc20
22:18:20  31  ,ABS(clse-lg22)dc22
22:18:20  32  ,(ld8-clse) ug8
22:18:20  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:18:20  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:18:20  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:18:20  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:18:20  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:18:20  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:18:20  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:18:20  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
22:18:20  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
22:18:20  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
22:18:20  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
22:18:20  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
22:18:20  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
22:18:20  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:18:20  47  ,0+TO_CHAR(ydate,'D')d
22:18:20  48  ,0+TO_CHAR(ydate,'W')w
22:18:20  49  -- mpm stands for minutes-past-midnight:
22:18:20  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:18:20  51  FROM q11
22:18:20  52  -- I dont want any NULL values from the LAG() functions:
22:18:20  53  WHERE lg32 > 0
22:18:20  54  ORDER BY pair,ydate
22:18:20  55  /

Table created.

Elapsed: 00:00:01.67
22:18:22 SQL> 
22:18:22 SQL> -- rpt
22:18:22 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9304
	-1	   11049

Elapsed: 00:00:00.03
22:18:22 SQL> 
22:18:22 SQL> -- Calc gains and ntiles
22:18:22 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.15
22:18:22 SQL> CREATE TABLE q15 COMPRESS AS
22:18:22   2  SELECT
22:18:22   3  pair
22:18:22   4  ,ydate
22:18:22   5  ,prdate -- Should be unique
22:18:22   6  ,trend -- +1 or -1
22:18:22   7  -- Use NTILE() to derive some attributes
22:18:22   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
22:18:22   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
22:18:22  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
22:18:22  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
22:18:22  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
22:18:22  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
22:18:22  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
22:18:22  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
22:18:22  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
22:18:22  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
22:18:22  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
22:18:22  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
22:18:22  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
22:18:22  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
22:18:22  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
22:18:22  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
22:18:22  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
22:18:22  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
22:18:22  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
22:18:22  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
22:18:22  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
22:18:22  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
22:18:22  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
22:18:22  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
22:18:22  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
22:18:22  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
22:18:22  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
22:18:22  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
22:18:22  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
22:18:22  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
22:18:22  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
22:18:22  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
22:18:22  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
22:18:22  41  ,hh    att32
22:18:22  42  ,d     att33
22:18:22  43  ,w     att34
22:18:22  44  ,mpm   att35
22:18:22  45  ,trend att36
22:18:22  46  ,ug8 g8
22:18:22  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
22:18:22  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
22:18:22  49  FROM q13
22:18:22  50  ORDER BY pair,ydate
22:18:22  51  /

Table created.

Elapsed: 00:00:05.55
22:18:28 SQL> 
22:18:28 SQL> -- rpt
22:18:28 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
22:18:28   2  GROUP BY pair,trend,gatt,gattn
22:18:28   3  ORDER BY pair,trend,gatt,gattn
22:18:28   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_jpy 	-1 nup nup 3.6257E-09	     169
usd_jpy 	-1 nup up  -.18265209	    5593
usd_jpy 	-1 up  nup .180150536	    5202
usd_jpy 	-1			       0
usd_jpy 	 1 nup nup	    0	     115
usd_jpy 	 1 nup up  -.18911464	    5142
usd_jpy 	 1 up  nup .193533515	    4036
usd_jpy 	 1			       0

8 rows selected.

Elapsed: 00:00:00.02
22:18:28 SQL> 
22:18:28 SQL> -- rpt
22:18:28 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_jpy 2010-12-24 21:55:00

Elapsed: 00:00:00.02
22:18:28 SQL> 
22:18:28 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.11
22:18:28 SQL> CREATE TABLE modsrc COMPRESS AS
22:18:28   2  SELECT
22:18:28   3  pair
22:18:28   4  ,ydate
22:18:28   5  ,prdate
22:18:28   6  ,trend
22:18:28   7  ,g8
22:18:28   8  ,gatt
22:18:28   9  ,gattn
22:18:28  10  FROM q15
22:18:28  11  /

Table created.

Elapsed: 00:00:00.09
22:18:28 SQL> 
22:18:28 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
22:18:28 SQL> 
22:18:28 SQL> -- rpt
22:18:28 SQL> 
22:18:28 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20737

Elapsed: 00:00:00.36
22:18:28 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20353

Elapsed: 00:00:00.00
22:18:28 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20353

Elapsed: 00:00:00.01
22:18:29 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20353

Elapsed: 00:00:00.00
22:18:29 SQL> 
22:18:29 SQL> DROP   TABLE jpy_ms10 ;

Table dropped.

Elapsed: 00:00:00.03
22:18:29 SQL> CREATE TABLE jpy_ms10 COMPRESS AS
22:18:29   2  SELECT
22:18:29   3  ydate
22:18:29   4  ,trend jpy_trend
22:18:29   5  ,g8    jpy_g8
22:18:29   6  ,gatt  jpy_gatt
22:18:29   7  ,gattn jpy_gattn
22:18:29   8  FROM modsrc
22:18:29   9  /

Table created.

Elapsed: 00:00:00.07
22:18:29 SQL> 
22:18:29 SQL> ANALYZE TABLE jpy_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
22:18:29 SQL> 
22:18:29 SQL> -- rpt
22:18:29 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-17 07:15:01 2010-12-24 20:50:00	 9293	  -1.185	  1
	-1 2010-09-17 06:20:01 2010-12-24 21:55:00	10964	 -1.0575       1.32

Elapsed: 00:00:00.02
22:18:29 SQL> SELECT jpy_trend,MIN(ydate),MAX(ydate),COUNT(jpy_trend),MIN(jpy_g8),MAX(jpy_g8)FROM jpy_ms10 GROUP BY jpy_trend;

 JPY_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(JPY_TREND) MIN(JPY_G8) MAX(JPY_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-17 07:15:01 2010-12-24 20:50:00	       9304	 -1.185 	  1
	-1 2010-09-17 06:20:01 2010-12-24 21:55:00	      11049	-1.0575        1.32

Elapsed: 00:00:00.01
22:18:29 SQL> 
22:18:29 SQL> -- I need a copy of q15 attributes
22:18:29 SQL> 
22:18:29 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.03
22:18:29 SQL> CREATE TABLE jpy_att COMPRESS AS
22:18:29   2  SELECT
22:18:29   3  ydate
22:18:29   4  ,att00 jpy_att00
22:18:29   5  ,att01 jpy_att01
22:18:29   6  ,att02 jpy_att02
22:18:29   7  ,att03 jpy_att03
22:18:29   8  ,att04 jpy_att04
22:18:29   9  ,att05 jpy_att05
22:18:29  10  ,att06 jpy_att06
22:18:29  11  ,att07 jpy_att07
22:18:29  12  ,att08 jpy_att08
22:18:29  13  ,att09 jpy_att09
22:18:29  14  ,att10 jpy_att10
22:18:29  15  ,att11 jpy_att11
22:18:29  16  ,att12 jpy_att12
22:18:29  17  ,att13 jpy_att13
22:18:29  18  ,att14 jpy_att14
22:18:29  19  ,att15 jpy_att15
22:18:29  20  ,att16 jpy_att16
22:18:29  21  ,att17 jpy_att17
22:18:29  22  ,att18 jpy_att18
22:18:29  23  ,att19 jpy_att19
22:18:29  24  ,att20 jpy_att20
22:18:29  25  ,att21 jpy_att21
22:18:29  26  ,att22 jpy_att22
22:18:29  27  ,att23 jpy_att23
22:18:29  28  ,att24 jpy_att24
22:18:29  29  ,att25 jpy_att25
22:18:29  30  ,att26 jpy_att26
22:18:29  31  ,att27 jpy_att27
22:18:29  32  ,att28 jpy_att28
22:18:29  33  ,att29 jpy_att29
22:18:29  34  ,att30 jpy_att30
22:18:29  35  ,att31 jpy_att31
22:18:29  36  ,att32 jpy_att32
22:18:29  37  ,att33 jpy_att33
22:18:29  38  ,att34 jpy_att34
22:18:29  39  ,att35 jpy_att35
22:18:29  40  ,att36 jpy_att36
22:18:29  41  FROM q15
22:18:29  42  /

Table created.

Elapsed: 00:00:00.19
22:18:29 SQL> 
22:18:29 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
22:18:29 SQL> 
22:18:29 SQL> -- rpt
22:18:29 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     20353

Elapsed: 00:00:00.00
22:18:29 SQL> 
22:18:29 SQL> --
22:18:29 SQL> -- cad10.sql
22:18:29 SQL> --
22:18:29 SQL> 
22:18:29 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:18:29 SQL> 
22:18:29 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.35
22:18:30 SQL> 
22:18:30 SQL> -- I created di5min here:
22:18:30 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:18:30 SQL> 
22:18:30 SQL> CREATE OR REPLACE VIEW q11 AS
22:18:30   2  SELECT
22:18:30   3  pair
22:18:30   4  ,ydate
22:18:30   5  ,prdate
22:18:30   6  ,rownum rnum -- acts as t in my time-series
22:18:30   7  ,clse
22:18:30   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
22:18:30   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
22:18:30  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
22:18:30  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
22:18:30  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
22:18:30  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
22:18:30  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
22:18:30  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
22:18:30  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
22:18:30  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
22:18:30  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
22:18:30  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
22:18:30  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
22:18:30  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
22:18:30  22  FROM di5min WHERE pair LIKE'%cad%'
22:18:30  23  ORDER BY ydate
22:18:30  24  /

View created.

Elapsed: 00:00:00.05
22:18:30 SQL> 
22:18:30 SQL> -- rpt
22:18:30 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_cad        20735

Elapsed: 00:00:00.34
22:18:30 SQL> 
22:18:30 SQL> -- Calc deltas and gains
22:18:30 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.18
22:18:30 SQL> 
22:18:30 SQL> CREATE TABLE q13 COMPRESS AS
22:18:30   2  SELECT
22:18:30   3  pair
22:18:30   4  ,ydate
22:18:30   5  ,prdate
22:18:30   6  ,rnum
22:18:30   7  ,ld8
22:18:30   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
22:18:30   9  -- step by 2
22:18:30  10  ,clse-lg6  d06
22:18:30  11  ,lg6 -lg8  d68
22:18:30  12  ,lg8 -lg10 d810
22:18:30  13  ,lg10-lg12 d1012
22:18:30  14  ,lg12-lg14 d1214
22:18:30  15  ,lg14-lg16 d1416
22:18:30  16  ,lg16-lg18 d1618
22:18:30  17  -- step by 4
22:18:30  18  ,lg6 -lg10 d610
22:18:30  19  ,lg8 -lg12 d812
22:18:30  20  ,lg10-lg14 d1014
22:18:30  21  ,lg12-lg16 d1216
22:18:30  22  --
22:18:30  23  ,ABS(clse-lg6 )dc6
22:18:30  24  ,ABS(clse-lg8 )dc8
22:18:30  25  ,ABS(clse-lg10)dc10
22:18:30  26  ,ABS(clse-lg12)dc12
22:18:30  27  ,ABS(clse-lg14)dc14
22:18:30  28  ,ABS(clse-lg16)dc16
22:18:30  29  ,ABS(clse-lg18)dc18
22:18:30  30  ,ABS(clse-lg20)dc20
22:18:30  31  ,ABS(clse-lg22)dc22
22:18:30  32  ,(ld8-clse) ug8
22:18:30  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:18:30  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:18:30  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:18:30  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:18:30  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:18:30  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:18:30  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:18:30  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
22:18:30  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
22:18:30  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
22:18:30  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
22:18:30  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
22:18:30  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
22:18:30  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:18:30  47  ,0+TO_CHAR(ydate,'D')d
22:18:30  48  ,0+TO_CHAR(ydate,'W')w
22:18:30  49  -- mpm stands for minutes-past-midnight:
22:18:30  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:18:30  51  FROM q11
22:18:30  52  -- I dont want any NULL values from the LAG() functions:
22:18:30  53  WHERE lg32 > 0
22:18:30  54  ORDER BY pair,ydate
22:18:30  55  /

Table created.

Elapsed: 00:00:01.70
22:18:32 SQL> 
22:18:32 SQL> -- rpt
22:18:32 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9392
	-1	   10959

Elapsed: 00:00:00.03
22:18:32 SQL> 
22:18:32 SQL> -- Calc gains and ntiles
22:18:32 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.21
22:18:32 SQL> CREATE TABLE q15 COMPRESS AS
22:18:32   2  SELECT
22:18:32   3  pair
22:18:32   4  ,ydate
22:18:32   5  ,prdate -- Should be unique
22:18:32   6  ,trend -- +1 or -1
22:18:32   7  -- Use NTILE() to derive some attributes
22:18:32   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
22:18:32   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
22:18:32  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
22:18:32  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
22:18:32  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
22:18:32  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
22:18:32  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
22:18:32  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
22:18:32  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
22:18:32  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
22:18:32  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
22:18:32  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
22:18:32  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
22:18:32  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
22:18:32  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
22:18:32  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
22:18:32  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
22:18:32  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
22:18:32  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
22:18:32  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
22:18:32  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
22:18:32  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
22:18:32  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
22:18:32  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
22:18:32  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
22:18:32  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
22:18:32  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
22:18:32  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
22:18:32  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
22:18:32  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
22:18:32  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
22:18:32  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
22:18:32  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
22:18:32  41  ,hh    att32
22:18:32  42  ,d     att33
22:18:32  43  ,w     att34
22:18:32  44  ,mpm   att35
22:18:32  45  ,trend att36
22:18:32  46  ,ug8 g8
22:18:32  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
22:18:32  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
22:18:32  49  FROM q13
22:18:32  50  ORDER BY pair,ydate
22:18:32  51  /

Table created.

Elapsed: 00:00:05.29
22:18:38 SQL> 
22:18:38 SQL> -- rpt
22:18:38 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
22:18:38   2  GROUP BY pair,trend,gatt,gattn
22:18:38   3  ORDER BY pair,trend,gatt,gattn
22:18:38   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_cad 	-1 nup nup -.00003397	    5762
usd_cad 	-1 nup up  -.00400214	    2592
usd_cad 	-1 up  nup .004668804	    2546
usd_cad 	-1			       0
usd_cad 	 1 nup nup -.00010943	    4618
usd_cad 	 1 nup up  -.00422654	    2755
usd_cad 	 1 up  nup .004613092	    1982
usd_cad 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
22:18:38 SQL> 
22:18:38 SQL> -- rpt
22:18:38 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_cad 2010-12-24 21:55:00

Elapsed: 00:00:00.02
22:18:38 SQL> 
22:18:38 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
22:18:38 SQL> CREATE TABLE modsrc COMPRESS AS
22:18:38   2  SELECT
22:18:38   3  pair
22:18:38   4  ,ydate
22:18:38   5  ,prdate
22:18:38   6  ,trend
22:18:38   7  ,g8
22:18:38   8  ,gatt
22:18:38   9  ,gattn
22:18:38  10  FROM q15
22:18:38  11  /

Table created.

Elapsed: 00:00:00.08
22:18:38 SQL> 
22:18:38 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
22:18:38 SQL> 
22:18:38 SQL> -- rpt
22:18:38 SQL> 
22:18:38 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20735

Elapsed: 00:00:00.35
22:18:38 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20351

Elapsed: 00:00:00.01
22:18:38 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20351

Elapsed: 00:00:00.00
22:18:38 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20351

Elapsed: 00:00:00.00
22:18:38 SQL> 
22:18:38 SQL> DROP   TABLE cad_ms10 ;

Table dropped.

Elapsed: 00:00:00.03
22:18:39 SQL> CREATE TABLE cad_ms10 COMPRESS AS
22:18:39   2  SELECT
22:18:39   3  ydate
22:18:39   4  ,trend cad_trend
22:18:39   5  ,g8    cad_g8
22:18:39   6  ,gatt  cad_gatt
22:18:39   7  ,gattn cad_gattn
22:18:39   8  FROM modsrc
22:18:39   9  /

Table created.

Elapsed: 00:00:00.06
22:18:39 SQL> 
22:18:39 SQL> ANALYZE TABLE cad_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
22:18:39 SQL> 
22:18:39 SQL> -- rpt
22:18:39 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-17 11:50:01 2010-12-24 21:55:00	 9355	  -.0122      .0159
	-1 2010-09-17 06:20:01 2010-12-24 21:35:00	10900	 -.01105      .0176

Elapsed: 00:00:00.02
22:18:39 SQL> SELECT cad_trend,MIN(ydate),MAX(ydate),COUNT(cad_trend),MIN(cad_g8),MAX(cad_g8)FROM cad_ms10 GROUP BY cad_trend;

 CAD_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(CAD_TREND) MIN(CAD_G8) MAX(CAD_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-17 11:50:01 2010-12-24 21:55:00	       9392	 -.0122       .0159
	-1 2010-09-17 06:20:01 2010-12-24 21:35:00	      10959	-.01105       .0176

Elapsed: 00:00:00.01
22:18:39 SQL> 
22:18:39 SQL> -- I need a copy of q15 attributes
22:18:39 SQL> 
22:18:39 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.15
22:18:39 SQL> CREATE TABLE cad_att COMPRESS AS
22:18:39   2  SELECT
22:18:39   3  ydate
22:18:39   4  ,att00 cad_att00
22:18:39   5  ,att01 cad_att01
22:18:39   6  ,att02 cad_att02
22:18:39   7  ,att03 cad_att03
22:18:39   8  ,att04 cad_att04
22:18:39   9  ,att05 cad_att05
22:18:39  10  ,att06 cad_att06
22:18:39  11  ,att07 cad_att07
22:18:39  12  ,att08 cad_att08
22:18:39  13  ,att09 cad_att09
22:18:39  14  ,att10 cad_att10
22:18:39  15  ,att11 cad_att11
22:18:39  16  ,att12 cad_att12
22:18:39  17  ,att13 cad_att13
22:18:39  18  ,att14 cad_att14
22:18:39  19  ,att15 cad_att15
22:18:39  20  ,att16 cad_att16
22:18:39  21  ,att17 cad_att17
22:18:39  22  ,att18 cad_att18
22:18:39  23  ,att19 cad_att19
22:18:39  24  ,att20 cad_att20
22:18:39  25  ,att21 cad_att21
22:18:39  26  ,att22 cad_att22
22:18:39  27  ,att23 cad_att23
22:18:39  28  ,att24 cad_att24
22:18:39  29  ,att25 cad_att25
22:18:39  30  ,att26 cad_att26
22:18:39  31  ,att27 cad_att27
22:18:39  32  ,att28 cad_att28
22:18:39  33  ,att29 cad_att29
22:18:39  34  ,att30 cad_att30
22:18:39  35  ,att31 cad_att31
22:18:39  36  ,att32 cad_att32
22:18:39  37  ,att33 cad_att33
22:18:39  38  ,att34 cad_att34
22:18:39  39  ,att35 cad_att35
22:18:39  40  ,att36 cad_att36
22:18:39  41  FROM q15
22:18:39  42  /

Table created.

Elapsed: 00:00:00.16
22:18:39 SQL> 
22:18:39 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
22:18:40 SQL> 
22:18:40 SQL> -- rpt
22:18:40 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     20351

Elapsed: 00:00:00.00
22:18:40 SQL> 
22:18:40 SQL> --
22:18:40 SQL> -- chf10.sql
22:18:40 SQL> --
22:18:40 SQL> 
22:18:40 SQL> -- Creates views and tables for backtesting a forex SVM strategy
22:18:40 SQL> 
22:18:40 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.29
22:18:40 SQL> 
22:18:40 SQL> -- I created di5min here:
22:18:40 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
22:18:40 SQL> 
22:18:40 SQL> CREATE OR REPLACE VIEW q11 AS
22:18:40   2  SELECT
22:18:40   3  pair
22:18:40   4  ,ydate
22:18:40   5  ,prdate
22:18:40   6  ,rownum rnum -- acts as t in my time-series
22:18:40   7  ,clse
22:18:40   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
22:18:40   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
22:18:40  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
22:18:40  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
22:18:40  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
22:18:40  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
22:18:40  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
22:18:40  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
22:18:40  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
22:18:40  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
22:18:40  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
22:18:40  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
22:18:40  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
22:18:40  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
22:18:40  22  FROM di5min WHERE pair LIKE'%chf%'
22:18:40  23  ORDER BY ydate
22:18:40  24  /

View created.

Elapsed: 00:00:00.05
22:18:40 SQL> 
22:18:40 SQL> -- rpt
22:18:40 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_chf        20738

Elapsed: 00:00:00.34
22:18:40 SQL> 
22:18:40 SQL> -- Calc deltas and gains
22:18:40 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.18
22:18:40 SQL> 
22:18:40 SQL> CREATE TABLE q13 COMPRESS AS
22:18:40   2  SELECT
22:18:40   3  pair
22:18:40   4  ,ydate
22:18:40   5  ,prdate
22:18:40   6  ,rnum
22:18:40   7  ,ld8
22:18:40   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
22:18:40   9  -- step by 2
22:18:40  10  ,clse-lg6  d06
22:18:40  11  ,lg6 -lg8  d68
22:18:40  12  ,lg8 -lg10 d810
22:18:40  13  ,lg10-lg12 d1012
22:18:40  14  ,lg12-lg14 d1214
22:18:40  15  ,lg14-lg16 d1416
22:18:40  16  ,lg16-lg18 d1618
22:18:40  17  -- step by 4
22:18:40  18  ,lg6 -lg10 d610
22:18:40  19  ,lg8 -lg12 d812
22:18:40  20  ,lg10-lg14 d1014
22:18:40  21  ,lg12-lg16 d1216
22:18:40  22  --
22:18:40  23  ,ABS(clse-lg6 )dc6
22:18:40  24  ,ABS(clse-lg8 )dc8
22:18:40  25  ,ABS(clse-lg10)dc10
22:18:40  26  ,ABS(clse-lg12)dc12
22:18:40  27  ,ABS(clse-lg14)dc14
22:18:40  28  ,ABS(clse-lg16)dc16
22:18:40  29  ,ABS(clse-lg18)dc18
22:18:40  30  ,ABS(clse-lg20)dc20
22:18:40  31  ,ABS(clse-lg22)dc22
22:18:40  32  ,(ld8-clse) ug8
22:18:40  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
22:18:40  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
22:18:40  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
22:18:40  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
22:18:40  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
22:18:40  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
22:18:40  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
22:18:40  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
22:18:40  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
22:18:40  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
22:18:40  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
22:18:40  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
22:18:40  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
22:18:40  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
22:18:40  47  ,0+TO_CHAR(ydate,'D')d
22:18:40  48  ,0+TO_CHAR(ydate,'W')w
22:18:40  49  -- mpm stands for minutes-past-midnight:
22:18:40  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
22:18:40  51  FROM q11
22:18:40  52  -- I dont want any NULL values from the LAG() functions:
22:18:40  53  WHERE lg32 > 0
22:18:40  54  ORDER BY pair,ydate
22:18:40  55  /

Table created.

Elapsed: 00:00:01.69
22:18:42 SQL> 
22:18:42 SQL> -- rpt
22:18:42 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9562
	-1	   10792

Elapsed: 00:00:00.03
22:18:42 SQL> 
22:18:42 SQL> -- Calc gains and ntiles
22:18:42 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.11
22:18:42 SQL> CREATE TABLE q15 COMPRESS AS
22:18:42   2  SELECT
22:18:42   3  pair
22:18:42   4  ,ydate
22:18:42   5  ,prdate -- Should be unique
22:18:42   6  ,trend -- +1 or -1
22:18:42   7  -- Use NTILE() to derive some attributes
22:18:42   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
22:18:42   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
22:18:42  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
22:18:42  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
22:18:42  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
22:18:42  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
22:18:42  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
22:18:42  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
22:18:42  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
22:18:42  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
22:18:42  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
22:18:42  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
22:18:42  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
22:18:42  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
22:18:42  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
22:18:42  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
22:18:42  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
22:18:42  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
22:18:42  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
22:18:42  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
22:18:42  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
22:18:42  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
22:18:42  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
22:18:42  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
22:18:42  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
22:18:42  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
22:18:42  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
22:18:42  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
22:18:42  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
22:18:42  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
22:18:42  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
22:18:42  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
22:18:42  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
22:18:42  41  ,hh    att32
22:18:42  42  ,d     att33
22:18:42  43  ,w     att34
22:18:42  44  ,mpm   att35
22:18:42  45  ,trend att36
22:18:42  46  ,ug8 g8
22:18:42  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
22:18:42  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
22:18:42  49  FROM q13
22:18:42  50  ORDER BY pair,ydate
22:18:42  51  /

Table created.

Elapsed: 00:00:05.29
22:18:48 SQL> 
22:18:48 SQL> -- rpt
22:18:48 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
22:18:48   2  GROUP BY pair,trend,gatt,gattn
22:18:48   3  ORDER BY pair,trend,gatt,gattn
22:18:48   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_chf 	-1 nup nup .000025291	    4911
usd_chf 	-1 nup up  -.00495285	    3119
usd_chf 	-1 up  nup .005054835	    2748
usd_chf 	-1			       0
usd_chf 	 1 nup nup -.00001474	    4486
usd_chf 	 1 nup up  -.00453113	    2904
usd_chf 	 1 up  nup .004647949	    2090
usd_chf 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
22:18:48 SQL> 
22:18:48 SQL> -- rpt
22:18:48 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_chf 2010-12-24 21:55:00

Elapsed: 00:00:00.02
22:18:48 SQL> 
22:18:48 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.10
22:18:48 SQL> CREATE TABLE modsrc COMPRESS AS
22:18:48   2  SELECT
22:18:48   3  pair
22:18:48   4  ,ydate
22:18:48   5  ,prdate
22:18:48   6  ,trend
22:18:48   7  ,g8
22:18:48   8  ,gatt
22:18:48   9  ,gattn
22:18:48  10  FROM q15
22:18:48  11  /

Table created.

Elapsed: 00:00:00.08
22:18:48 SQL> 
22:18:48 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
22:18:48 SQL> 
22:18:48 SQL> -- rpt
22:18:48 SQL> 
22:18:48 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20738

Elapsed: 00:00:00.34
22:18:48 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20354

Elapsed: 00:00:00.01
22:18:48 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20354

Elapsed: 00:00:00.00
22:18:48 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20354

Elapsed: 00:00:00.00
22:18:48 SQL> 
22:18:48 SQL> DROP   TABLE chf_ms10 ;

Table dropped.

Elapsed: 00:00:00.05
22:18:48 SQL> CREATE TABLE chf_ms10 COMPRESS AS
22:18:48   2  SELECT
22:18:48   3  ydate
22:18:48   4  ,trend chf_trend
22:18:48   5  ,g8    chf_g8
22:18:48   6  ,gatt  chf_gatt
22:18:48   7  ,gattn chf_gattn
22:18:48   8  FROM modsrc
22:18:48   9  /

Table created.

Elapsed: 00:00:00.07
22:18:48 SQL> 
22:18:48 SQL> ANALYZE TABLE chf_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.70
22:18:49 SQL> 
22:18:49 SQL> -- rpt
22:18:49 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-17 07:35:01 2010-12-24 21:55:00	 9480	 -.01775      .0155
	-1 2010-09-17 06:20:01 2010-12-24 21:35:00	10778	 -.01825     .01545

Elapsed: 00:00:00.02
22:18:49 SQL> SELECT chf_trend,MIN(ydate),MAX(ydate),COUNT(chf_trend),MIN(chf_g8),MAX(chf_g8)FROM chf_ms10 GROUP BY chf_trend;

 CHF_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(CHF_TREND) MIN(CHF_G8) MAX(CHF_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-17 07:35:01 2010-12-24 21:55:00	       9562	-.01775       .0155
	-1 2010-09-17 06:20:01 2010-12-24 21:35:00	      10792	-.01825      .01545

Elapsed: 00:00:00.01
22:18:49 SQL> 
22:18:49 SQL> -- I need a copy of q15 attributes
22:18:49 SQL> 
22:18:49 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.13
22:18:49 SQL> CREATE TABLE chf_att COMPRESS AS
22:18:49   2  SELECT
22:18:49   3  ydate
22:18:49   4  ,att00 chf_att00
22:18:49   5  ,att01 chf_att01
22:18:49   6  ,att02 chf_att02
22:18:49   7  ,att03 chf_att03
22:18:49   8  ,att04 chf_att04
22:18:49   9  ,att05 chf_att05
22:18:49  10  ,att06 chf_att06
22:18:49  11  ,att07 chf_att07
22:18:49  12  ,att08 chf_att08
22:18:49  13  ,att09 chf_att09
22:18:49  14  ,att10 chf_att10
22:18:49  15  ,att11 chf_att11
22:18:49  16  ,att12 chf_att12
22:18:49  17  ,att13 chf_att13
22:18:49  18  ,att14 chf_att14
22:18:49  19  ,att15 chf_att15
22:18:49  20  ,att16 chf_att16
22:18:49  21  ,att17 chf_att17
22:18:49  22  ,att18 chf_att18
22:18:49  23  ,att19 chf_att19
22:18:49  24  ,att20 chf_att20
22:18:49  25  ,att21 chf_att21
22:18:49  26  ,att22 chf_att22
22:18:49  27  ,att23 chf_att23
22:18:49  28  ,att24 chf_att24
22:18:49  29  ,att25 chf_att25
22:18:49  30  ,att26 chf_att26
22:18:49  31  ,att27 chf_att27
22:18:49  32  ,att28 chf_att28
22:18:49  33  ,att29 chf_att29
22:18:49  34  ,att30 chf_att30
22:18:49  35  ,att31 chf_att31
22:18:49  36  ,att32 chf_att32
22:18:49  37  ,att33 chf_att33
22:18:49  38  ,att34 chf_att34
22:18:49  39  ,att35 chf_att35
22:18:49  40  ,att36 chf_att36
22:18:49  41  FROM q15
22:18:49  42  /

Table created.

Elapsed: 00:00:00.16
22:18:49 SQL> 
22:18:49 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.52
22:18:50 SQL> 
22:18:50 SQL> -- rpt
22:18:50 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     20354

Elapsed: 00:00:00.00
22:18:50 SQL> 
22:18:50 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
