
SQL*Plus: Release 11.2.0.1.0 Production on Fri Dec 24 08:09:36 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

08:09:36 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
08:09:36 SQL> 08:09:36 SQL> --
08:09:36 SQL> -- eur10.sql
08:09:36 SQL> --
08:09:36 SQL> 
08:09:36 SQL> -- Creates views and tables for backtesting a forex SVM strategy
08:09:36 SQL> 
08:09:36 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.02
08:09:36 SQL> 
08:09:36 SQL> -- I created di5min here:
08:09:36 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
08:09:36 SQL> 
08:09:36 SQL> CREATE OR REPLACE VIEW q11 AS
08:09:36   2  SELECT
08:09:36   3  pair
08:09:36   4  ,ydate
08:09:36   5  ,prdate
08:09:36   6  ,rownum rnum -- acts as t in my time-series
08:09:36   7  ,clse
08:09:36   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
08:09:36   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
08:09:36  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
08:09:36  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
08:09:36  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
08:09:36  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
08:09:36  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
08:09:36  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
08:09:36  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
08:09:36  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
08:09:36  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
08:09:36  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
08:09:36  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
08:09:36  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
08:09:36  22  FROM di5min WHERE pair LIKE'%eur%'
08:09:36  23  ORDER BY ydate
08:09:36  24  /

View created.

Elapsed: 00:00:00.07
08:09:36 SQL> 
08:09:36 SQL> -- rpt
08:09:36 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
eur_usd        20743

Elapsed: 00:00:00.36
08:09:37 SQL> 
08:09:37 SQL> -- Calc deltas and gains
08:09:37 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.45
08:09:37 SQL> 
08:09:37 SQL> CREATE TABLE q13 COMPRESS AS
08:09:37   2  SELECT
08:09:37   3  pair
08:09:37   4  ,ydate
08:09:37   5  ,prdate
08:09:37   6  ,rnum
08:09:37   7  ,ld8
08:09:37   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
08:09:37   9  -- step by 2
08:09:37  10  ,clse-lg6  d06
08:09:37  11  ,lg6 -lg8  d68
08:09:37  12  ,lg8 -lg10 d810
08:09:37  13  ,lg10-lg12 d1012
08:09:37  14  ,lg12-lg14 d1214
08:09:37  15  ,lg14-lg16 d1416
08:09:37  16  ,lg16-lg18 d1618
08:09:37  17  -- step by 4
08:09:37  18  ,lg6 -lg10 d610
08:09:37  19  ,lg8 -lg12 d812
08:09:37  20  ,lg10-lg14 d1014
08:09:37  21  ,lg12-lg16 d1216
08:09:37  22  --
08:09:37  23  ,ABS(clse-lg6 )dc6
08:09:37  24  ,ABS(clse-lg8 )dc8
08:09:37  25  ,ABS(clse-lg10)dc10
08:09:37  26  ,ABS(clse-lg12)dc12
08:09:37  27  ,ABS(clse-lg14)dc14
08:09:37  28  ,ABS(clse-lg16)dc16
08:09:37  29  ,ABS(clse-lg18)dc18
08:09:37  30  ,ABS(clse-lg20)dc20
08:09:37  31  ,ABS(clse-lg22)dc22
08:09:37  32  ,(ld8-clse) ug8
08:09:37  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
08:09:37  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
08:09:37  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
08:09:37  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
08:09:37  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
08:09:37  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
08:09:37  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
08:09:37  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
08:09:37  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
08:09:37  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
08:09:37  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
08:09:37  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
08:09:37  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
08:09:37  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
08:09:37  47  ,0+TO_CHAR(ydate,'D')d
08:09:37  48  ,0+TO_CHAR(ydate,'W')w
08:09:37  49  -- mpm stands for minutes-past-midnight:
08:09:37  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
08:09:37  51  FROM q11
08:09:37  52  -- I dont want any NULL values from the LAG() functions:
08:09:37  53  WHERE lg32 > 0
08:09:37  54  ORDER BY pair,ydate
08:09:37  55  /

Table created.

Elapsed: 00:00:02.13
08:09:39 SQL> 
08:09:39 SQL> -- rpt
08:09:39 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	   10120
	-1	   10239

Elapsed: 00:00:00.04
08:09:39 SQL> 
08:09:39 SQL> -- Calc gains and ntiles
08:09:39 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.10
08:09:39 SQL> CREATE TABLE q15 COMPRESS AS
08:09:39   2  SELECT
08:09:39   3  pair
08:09:39   4  ,ydate
08:09:39   5  ,prdate -- Should be unique
08:09:39   6  ,trend -- +1 or -1
08:09:39   7  -- Use NTILE() to derive some attributes
08:09:39   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
08:09:39   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
08:09:39  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
08:09:39  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
08:09:39  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
08:09:39  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
08:09:39  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
08:09:39  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
08:09:39  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
08:09:39  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
08:09:39  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
08:09:39  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
08:09:39  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
08:09:39  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
08:09:39  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
08:09:39  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
08:09:39  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
08:09:39  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
08:09:39  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
08:09:39  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
08:09:39  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
08:09:39  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
08:09:39  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
08:09:39  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
08:09:39  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
08:09:39  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
08:09:39  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
08:09:39  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
08:09:39  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
08:09:39  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
08:09:39  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
08:09:39  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
08:09:39  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
08:09:39  41  ,hh    att32
08:09:39  42  ,d     att33
08:09:39  43  ,w     att34
08:09:39  44  ,mpm   att35
08:09:39  45  ,trend att36
08:09:39  46  ,ug8 g8
08:09:39  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
08:09:39  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
08:09:39  49  FROM q13
08:09:39  50  ORDER BY pair,ydate
08:09:39  51  /

Table created.

Elapsed: 00:00:05.47
08:09:45 SQL> 
08:09:45 SQL> -- rpt
08:09:45 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
08:09:45   2  GROUP BY pair,trend,gatt,gattn
08:09:45   3  ORDER BY pair,trend,gatt,gattn
08:09:45   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
eur_usd 	-1 nup nup .000025712	    3021
eur_usd 	-1 nup up  -.00602802	    3651
eur_usd 	-1 up  nup .005756878	    3564
eur_usd 	-1			       0
eur_usd 	 1 nup nup -.00007009	    2949
eur_usd 	 1 nup up  -.00626446	    3461
eur_usd 	 1 up  nup .006573479	    3617
eur_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.05
08:09:45 SQL> 
08:09:45 SQL> -- rpt
08:09:45 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
eur_usd 2010-12-24 08:05:00

Elapsed: 00:00:00.02
08:09:45 SQL> 
08:09:45 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.10
08:09:45 SQL> CREATE TABLE modsrc COMPRESS AS
08:09:45   2  SELECT
08:09:45   3  pair
08:09:45   4  ,ydate
08:09:45   5  ,prdate
08:09:45   6  ,trend
08:09:45   7  ,g8
08:09:45   8  ,gatt
08:09:45   9  ,gattn
08:09:45  10  FROM q15
08:09:45  11  /

Table created.

Elapsed: 00:00:00.10
08:09:45 SQL> 
08:09:45 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.24
08:09:45 SQL> 
08:09:45 SQL> -- rpt
08:09:45 SQL> 
08:09:45 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20743

Elapsed: 00:00:00.34
08:09:46 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20359

Elapsed: 00:00:00.01
08:09:46 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20359

Elapsed: 00:00:00.00
08:09:46 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20359

Elapsed: 00:00:00.01
08:09:46 SQL> 
08:09:46 SQL> DROP   TABLE eur_ms10 ;

Table dropped.

Elapsed: 00:00:00.10
08:09:46 SQL> CREATE TABLE eur_ms10 COMPRESS AS
08:09:46   2  SELECT
08:09:46   3  ydate
08:09:46   4  ,trend eur_trend
08:09:46   5  ,g8    eur_g8
08:09:46   6  ,gatt  eur_gatt
08:09:46   7  ,gattn eur_gattn
08:09:46   8  FROM modsrc
08:09:46   9  /

Table created.

Elapsed: 00:00:00.08
08:09:46 SQL> 
08:09:46 SQL> ANALYZE TABLE eur_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
08:09:46 SQL> 
08:09:46 SQL> -- rpt
08:09:46 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 16:10:01 2010-12-24 08:05:00	10027	  -.0218     .02165
	-1 2010-09-16 17:15:01 2010-12-24 01:50:00	10236	 -.02085      .0196

Elapsed: 00:00:00.03
08:09:46 SQL> SELECT eur_trend,MIN(ydate),MAX(ydate),COUNT(eur_trend),MIN(eur_g8),MAX(eur_g8)FROM eur_ms10 GROUP BY eur_trend;

 EUR_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(EUR_TREND) MIN(EUR_G8) MAX(EUR_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 16:10:01 2010-12-24 08:05:00	      10120	 -.0218      .02165
	-1 2010-09-16 17:15:01 2010-12-24 01:50:00	      10239	-.02085       .0196

Elapsed: 00:00:00.01
08:09:46 SQL> 
08:09:46 SQL> -- I need a copy of q15 attributes
08:09:46 SQL> 
08:09:46 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.05
08:09:46 SQL> CREATE TABLE eur_att COMPRESS AS
08:09:46   2  SELECT
08:09:46   3  ydate
08:09:46   4  ,att00 eur_att00
08:09:46   5  ,att01 eur_att01
08:09:46   6  ,att02 eur_att02
08:09:46   7  ,att03 eur_att03
08:09:46   8  ,att04 eur_att04
08:09:46   9  ,att05 eur_att05
08:09:46  10  ,att06 eur_att06
08:09:46  11  ,att07 eur_att07
08:09:46  12  ,att08 eur_att08
08:09:46  13  ,att09 eur_att09
08:09:46  14  ,att10 eur_att10
08:09:46  15  ,att11 eur_att11
08:09:46  16  ,att12 eur_att12
08:09:46  17  ,att13 eur_att13
08:09:46  18  ,att14 eur_att14
08:09:46  19  ,att15 eur_att15
08:09:46  20  ,att16 eur_att16
08:09:46  21  ,att17 eur_att17
08:09:46  22  ,att18 eur_att18
08:09:46  23  ,att19 eur_att19
08:09:46  24  ,att20 eur_att20
08:09:46  25  ,att21 eur_att21
08:09:46  26  ,att22 eur_att22
08:09:46  27  ,att23 eur_att23
08:09:46  28  ,att24 eur_att24
08:09:46  29  ,att25 eur_att25
08:09:46  30  ,att26 eur_att26
08:09:46  31  ,att27 eur_att27
08:09:46  32  ,att28 eur_att28
08:09:46  33  ,att29 eur_att29
08:09:46  34  ,att30 eur_att30
08:09:46  35  ,att31 eur_att31
08:09:46  36  ,att32 eur_att32
08:09:46  37  ,att33 eur_att33
08:09:46  38  ,att34 eur_att34
08:09:46  39  ,att35 eur_att35
08:09:46  40  ,att36 eur_att36
08:09:46  41  FROM q15
08:09:46  42  /

Table created.

Elapsed: 00:00:00.20
08:09:46 SQL> 
08:09:46 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.55
08:09:47 SQL> 
08:09:47 SQL> -- rpt
08:09:47 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     20359

Elapsed: 00:00:00.01
08:09:47 SQL> 
08:09:47 SQL> --
08:09:47 SQL> -- aud10.sql
08:09:47 SQL> --
08:09:47 SQL> 
08:09:47 SQL> -- Creates views and tables for backtesting a forex SVM strategy
08:09:47 SQL> 
08:09:47 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.45
08:09:47 SQL> 
08:09:47 SQL> -- I created di5min here:
08:09:47 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
08:09:47 SQL> 
08:09:47 SQL> CREATE OR REPLACE VIEW q11 AS
08:09:47   2  SELECT
08:09:47   3  pair
08:09:47   4  ,ydate
08:09:47   5  ,prdate
08:09:47   6  ,rownum rnum -- acts as t in my time-series
08:09:47   7  ,clse
08:09:47   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
08:09:47   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
08:09:47  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
08:09:47  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
08:09:47  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
08:09:47  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
08:09:47  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
08:09:47  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
08:09:47  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
08:09:47  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
08:09:47  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
08:09:47  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
08:09:47  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
08:09:47  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
08:09:47  22  FROM di5min WHERE pair LIKE'%aud%'
08:09:47  23  ORDER BY ydate
08:09:47  24  /

View created.

Elapsed: 00:00:00.07
08:09:47 SQL> 
08:09:47 SQL> -- rpt
08:09:47 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
aud_usd        20740

Elapsed: 00:00:00.35
08:09:48 SQL> 
08:09:48 SQL> -- Calc deltas and gains
08:09:48 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.33
08:09:48 SQL> 
08:09:48 SQL> CREATE TABLE q13 COMPRESS AS
08:09:48   2  SELECT
08:09:48   3  pair
08:09:48   4  ,ydate
08:09:48   5  ,prdate
08:09:48   6  ,rnum
08:09:48   7  ,ld8
08:09:48   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
08:09:48   9  -- step by 2
08:09:48  10  ,clse-lg6  d06
08:09:48  11  ,lg6 -lg8  d68
08:09:48  12  ,lg8 -lg10 d810
08:09:48  13  ,lg10-lg12 d1012
08:09:48  14  ,lg12-lg14 d1214
08:09:48  15  ,lg14-lg16 d1416
08:09:48  16  ,lg16-lg18 d1618
08:09:48  17  -- step by 4
08:09:48  18  ,lg6 -lg10 d610
08:09:48  19  ,lg8 -lg12 d812
08:09:48  20  ,lg10-lg14 d1014
08:09:48  21  ,lg12-lg16 d1216
08:09:48  22  --
08:09:48  23  ,ABS(clse-lg6 )dc6
08:09:48  24  ,ABS(clse-lg8 )dc8
08:09:48  25  ,ABS(clse-lg10)dc10
08:09:48  26  ,ABS(clse-lg12)dc12
08:09:48  27  ,ABS(clse-lg14)dc14
08:09:48  28  ,ABS(clse-lg16)dc16
08:09:48  29  ,ABS(clse-lg18)dc18
08:09:48  30  ,ABS(clse-lg20)dc20
08:09:48  31  ,ABS(clse-lg22)dc22
08:09:48  32  ,(ld8-clse) ug8
08:09:48  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
08:09:48  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
08:09:48  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
08:09:48  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
08:09:48  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
08:09:48  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
08:09:48  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
08:09:48  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
08:09:48  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
08:09:48  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
08:09:48  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
08:09:48  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
08:09:48  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
08:09:48  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
08:09:48  47  ,0+TO_CHAR(ydate,'D')d
08:09:48  48  ,0+TO_CHAR(ydate,'W')w
08:09:48  49  -- mpm stands for minutes-past-midnight:
08:09:48  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
08:09:48  51  FROM q11
08:09:48  52  -- I dont want any NULL values from the LAG() functions:
08:09:48  53  WHERE lg32 > 0
08:09:48  54  ORDER BY pair,ydate
08:09:48  55  /

Table created.

Elapsed: 00:00:01.77
08:09:50 SQL> 
08:09:50 SQL> -- rpt
08:09:50 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	   10817
	-1	    9539

Elapsed: 00:00:00.10
08:09:50 SQL> 
08:09:50 SQL> -- Calc gains and ntiles
08:09:50 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.41
08:09:50 SQL> CREATE TABLE q15 COMPRESS AS
08:09:50   2  SELECT
08:09:50   3  pair
08:09:50   4  ,ydate
08:09:50   5  ,prdate -- Should be unique
08:09:50   6  ,trend -- +1 or -1
08:09:50   7  -- Use NTILE() to derive some attributes
08:09:50   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
08:09:50   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
08:09:50  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
08:09:50  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
08:09:50  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
08:09:50  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
08:09:50  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
08:09:50  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
08:09:50  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
08:09:50  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
08:09:50  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
08:09:50  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
08:09:50  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
08:09:50  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
08:09:50  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
08:09:50  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
08:09:50  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
08:09:50  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
08:09:50  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
08:09:50  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
08:09:50  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
08:09:50  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
08:09:50  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
08:09:50  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
08:09:50  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
08:09:50  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
08:09:50  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
08:09:50  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
08:09:50  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
08:09:50  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
08:09:50  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
08:09:50  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
08:09:50  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
08:09:50  41  ,hh    att32
08:09:50  42  ,d     att33
08:09:50  43  ,w     att34
08:09:50  44  ,mpm   att35
08:09:50  45  ,trend att36
08:09:50  46  ,ug8 g8
08:09:50  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
08:09:50  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
08:09:50  49  FROM q13
08:09:50  50  ORDER BY pair,ydate
08:09:50  51  /

Table created.

Elapsed: 00:00:05.55
08:09:56 SQL> 
08:09:56 SQL> -- rpt
08:09:56 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
08:09:56   2  GROUP BY pair,trend,gatt,gattn
08:09:56   3  ORDER BY pair,trend,gatt,gattn
08:09:56   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
aud_usd 	-1 nup nup .000035212	    3545
aud_usd 	-1 nup up  -.00525835	    2519
aud_usd 	-1 up  nup .005174816	    3401
aud_usd 	-1			       0
aud_usd 	 1 nup nup .000027997	    4354
aud_usd 	 1 nup up  -.00500047	    3062
aud_usd 	 1 up  nup .005093811	    3379
aud_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.04
08:09:56 SQL> 
08:09:56 SQL> -- rpt
08:09:56 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
aud_usd 2010-12-24 08:05:00

Elapsed: 00:00:00.02
08:09:56 SQL> 
08:09:56 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.29
08:09:56 SQL> CREATE TABLE modsrc COMPRESS AS
08:09:56   2  SELECT
08:09:56   3  pair
08:09:56   4  ,ydate
08:09:56   5  ,prdate
08:09:56   6  ,trend
08:09:56   7  ,g8
08:09:56   8  ,gatt
08:09:56   9  ,gattn
08:09:56  10  FROM q15
08:09:56  11  /

Table created.

Elapsed: 00:00:00.12
08:09:56 SQL> 
08:09:56 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
08:09:57 SQL> 
08:09:57 SQL> -- rpt
08:09:57 SQL> 
08:09:57 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20740

Elapsed: 00:00:00.35
08:09:57 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20356

Elapsed: 00:00:00.00
08:09:57 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20356

Elapsed: 00:00:00.01
08:09:57 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20356

Elapsed: 00:00:00.00
08:09:57 SQL> 
08:09:57 SQL> DROP   TABLE aud_ms10 ;

Table dropped.

Elapsed: 00:00:00.10
08:09:57 SQL> CREATE TABLE aud_ms10 COMPRESS AS
08:09:57   2  SELECT
08:09:57   3  ydate
08:09:57   4  ,trend aud_trend
08:09:57   5  ,g8    aud_g8
08:09:57   6  ,gatt  aud_gatt
08:09:57   7  ,gattn aud_gattn
08:09:57   8  FROM modsrc
08:09:57   9  /

Table created.

Elapsed: 00:00:00.09
08:09:57 SQL> 
08:09:57 SQL> ANALYZE TABLE aud_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
08:09:57 SQL> 
08:09:57 SQL> -- rpt
08:09:57 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 19:30:01 2010-12-24 08:05:00	10795	  -.0203      .0136
	-1 2010-09-16 16:10:01 2010-12-24 08:00:00	 9465	  -.0196      .0148

Elapsed: 00:00:00.02
08:09:57 SQL> SELECT aud_trend,MIN(ydate),MAX(ydate),COUNT(aud_trend),MIN(aud_g8),MAX(aud_g8)FROM aud_ms10 GROUP BY aud_trend;

 AUD_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(AUD_TREND) MIN(AUD_G8) MAX(AUD_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 19:30:01 2010-12-24 08:05:00	      10817	 -.0203       .0136
	-1 2010-09-16 16:10:01 2010-12-24 08:00:00	       9539	 -.0196       .0148

Elapsed: 00:00:00.02
08:09:57 SQL> 
08:09:57 SQL> -- I need a copy of q15 attributes
08:09:57 SQL> 
08:09:57 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.06
08:09:58 SQL> CREATE TABLE aud_att COMPRESS AS
08:09:58   2  SELECT
08:09:58   3  ydate
08:09:58   4  ,att00 aud_att00
08:09:58   5  ,att01 aud_att01
08:09:58   6  ,att02 aud_att02
08:09:58   7  ,att03 aud_att03
08:09:58   8  ,att04 aud_att04
08:09:58   9  ,att05 aud_att05
08:09:58  10  ,att06 aud_att06
08:09:58  11  ,att07 aud_att07
08:09:58  12  ,att08 aud_att08
08:09:58  13  ,att09 aud_att09
08:09:58  14  ,att10 aud_att10
08:09:58  15  ,att11 aud_att11
08:09:58  16  ,att12 aud_att12
08:09:58  17  ,att13 aud_att13
08:09:58  18  ,att14 aud_att14
08:09:58  19  ,att15 aud_att15
08:09:58  20  ,att16 aud_att16
08:09:58  21  ,att17 aud_att17
08:09:58  22  ,att18 aud_att18
08:09:58  23  ,att19 aud_att19
08:09:58  24  ,att20 aud_att20
08:09:58  25  ,att21 aud_att21
08:09:58  26  ,att22 aud_att22
08:09:58  27  ,att23 aud_att23
08:09:58  28  ,att24 aud_att24
08:09:58  29  ,att25 aud_att25
08:09:58  30  ,att26 aud_att26
08:09:58  31  ,att27 aud_att27
08:09:58  32  ,att28 aud_att28
08:09:58  33  ,att29 aud_att29
08:09:58  34  ,att30 aud_att30
08:09:58  35  ,att31 aud_att31
08:09:58  36  ,att32 aud_att32
08:09:58  37  ,att33 aud_att33
08:09:58  38  ,att34 aud_att34
08:09:58  39  ,att35 aud_att35
08:09:58  40  ,att36 aud_att36
08:09:58  41  FROM q15
08:09:58  42  /

Table created.

Elapsed: 00:00:00.18
08:09:58 SQL> 
08:09:58 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.52
08:09:58 SQL> 
08:09:58 SQL> -- rpt
08:09:58 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     20356

Elapsed: 00:00:00.01
08:09:58 SQL> 
08:09:58 SQL> --
08:09:58 SQL> -- gbp10.sql
08:09:58 SQL> --
08:09:58 SQL> 
08:09:58 SQL> -- Creates views and tables for backtesting a forex SVM strategy
08:09:58 SQL> 
08:09:58 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:01.87
08:10:00 SQL> 
08:10:00 SQL> -- I created di5min here:
08:10:00 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
08:10:00 SQL> 
08:10:00 SQL> CREATE OR REPLACE VIEW q11 AS
08:10:00   2  SELECT
08:10:00   3  pair
08:10:00   4  ,ydate
08:10:00   5  ,prdate
08:10:00   6  ,rownum rnum -- acts as t in my time-series
08:10:00   7  ,clse
08:10:00   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
08:10:00   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
08:10:00  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
08:10:00  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
08:10:00  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
08:10:00  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
08:10:00  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
08:10:00  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
08:10:00  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
08:10:00  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
08:10:00  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
08:10:00  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
08:10:00  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
08:10:00  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
08:10:00  22  FROM di5min WHERE pair LIKE'%gbp%'
08:10:00  23  ORDER BY ydate
08:10:00  24  /

View created.

Elapsed: 00:00:00.13
08:10:00 SQL> 
08:10:00 SQL> -- rpt
08:10:00 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
gbp_usd        20742

Elapsed: 00:00:00.37
08:10:01 SQL> 
08:10:01 SQL> -- Calc deltas and gains
08:10:01 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.59
08:10:01 SQL> 
08:10:01 SQL> CREATE TABLE q13 COMPRESS AS
08:10:01   2  SELECT
08:10:01   3  pair
08:10:01   4  ,ydate
08:10:01   5  ,prdate
08:10:01   6  ,rnum
08:10:01   7  ,ld8
08:10:01   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
08:10:01   9  -- step by 2
08:10:01  10  ,clse-lg6  d06
08:10:01  11  ,lg6 -lg8  d68
08:10:01  12  ,lg8 -lg10 d810
08:10:01  13  ,lg10-lg12 d1012
08:10:01  14  ,lg12-lg14 d1214
08:10:01  15  ,lg14-lg16 d1416
08:10:01  16  ,lg16-lg18 d1618
08:10:01  17  -- step by 4
08:10:01  18  ,lg6 -lg10 d610
08:10:01  19  ,lg8 -lg12 d812
08:10:01  20  ,lg10-lg14 d1014
08:10:01  21  ,lg12-lg16 d1216
08:10:01  22  --
08:10:01  23  ,ABS(clse-lg6 )dc6
08:10:01  24  ,ABS(clse-lg8 )dc8
08:10:01  25  ,ABS(clse-lg10)dc10
08:10:01  26  ,ABS(clse-lg12)dc12
08:10:01  27  ,ABS(clse-lg14)dc14
08:10:01  28  ,ABS(clse-lg16)dc16
08:10:01  29  ,ABS(clse-lg18)dc18
08:10:01  30  ,ABS(clse-lg20)dc20
08:10:01  31  ,ABS(clse-lg22)dc22
08:10:01  32  ,(ld8-clse) ug8
08:10:01  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
08:10:01  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
08:10:01  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
08:10:01  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
08:10:01  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
08:10:01  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
08:10:01  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
08:10:01  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
08:10:01  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
08:10:01  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
08:10:01  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
08:10:01  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
08:10:01  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
08:10:01  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
08:10:01  47  ,0+TO_CHAR(ydate,'D')d
08:10:01  48  ,0+TO_CHAR(ydate,'W')w
08:10:01  49  -- mpm stands for minutes-past-midnight:
08:10:01  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
08:10:01  51  FROM q11
08:10:01  52  -- I dont want any NULL values from the LAG() functions:
08:10:01  53  WHERE lg32 > 0
08:10:01  54  ORDER BY pair,ydate
08:10:01  55  /

Table created.

Elapsed: 00:00:01.76
08:10:03 SQL> 
08:10:03 SQL> -- rpt
08:10:03 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9989
	-1	   10369

Elapsed: 00:00:00.05
08:10:03 SQL> 
08:10:03 SQL> -- Calc gains and ntiles
08:10:03 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.24
08:10:03 SQL> CREATE TABLE q15 COMPRESS AS
08:10:03   2  SELECT
08:10:03   3  pair
08:10:03   4  ,ydate
08:10:03   5  ,prdate -- Should be unique
08:10:03   6  ,trend -- +1 or -1
08:10:03   7  -- Use NTILE() to derive some attributes
08:10:03   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
08:10:03   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
08:10:03  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
08:10:03  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
08:10:03  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
08:10:03  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
08:10:03  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
08:10:03  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
08:10:03  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
08:10:03  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
08:10:03  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
08:10:03  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
08:10:03  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
08:10:03  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
08:10:03  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
08:10:03  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
08:10:03  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
08:10:03  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
08:10:03  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
08:10:03  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
08:10:03  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
08:10:03  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
08:10:03  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
08:10:03  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
08:10:03  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
08:10:03  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
08:10:03  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
08:10:03  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
08:10:03  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
08:10:03  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
08:10:03  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
08:10:03  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
08:10:03  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
08:10:03  41  ,hh    att32
08:10:03  42  ,d     att33
08:10:03  43  ,w     att34
08:10:03  44  ,mpm   att35
08:10:03  45  ,trend att36
08:10:03  46  ,ug8 g8
08:10:03  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
08:10:03  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
08:10:03  49  FROM q13
08:10:03  50  ORDER BY pair,ydate
08:10:03  51  /

Table created.

Elapsed: 00:00:05.59
08:10:09 SQL> 
08:10:09 SQL> -- rpt
08:10:09 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
08:10:09   2  GROUP BY pair,trend,gatt,gattn
08:10:09   3  ORDER BY pair,trend,gatt,gattn
08:10:09   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
gbp_usd 	-1 nup nup .000094428	    3832
gbp_usd 	-1 nup up   -.0059004	    3270
gbp_usd 	-1 up  nup .005468704	    3260
gbp_usd 	-1			       0
gbp_usd 	 1 nup nup -.00007945	    3642
gbp_usd 	 1 nup up  -.00554744	    3271
gbp_usd 	 1 up  nup .005964429	    2987
gbp_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
08:10:09 SQL> 
08:10:09 SQL> -- rpt
08:10:09 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
gbp_usd 2010-12-24 08:05:00

Elapsed: 00:00:00.02
08:10:09 SQL> 
08:10:09 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.33
08:10:09 SQL> CREATE TABLE modsrc COMPRESS AS
08:10:09   2  SELECT
08:10:09   3  pair
08:10:09   4  ,ydate
08:10:09   5  ,prdate
08:10:09   6  ,trend
08:10:09   7  ,g8
08:10:09   8  ,gatt
08:10:09   9  ,gattn
08:10:09  10  FROM q15
08:10:09  11  /

Table created.

Elapsed: 00:00:00.13
08:10:09 SQL> 
08:10:09 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.25
08:10:10 SQL> 
08:10:10 SQL> -- rpt
08:10:10 SQL> 
08:10:10 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20742

Elapsed: 00:00:00.36
08:10:10 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.00
08:10:10 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.01
08:10:10 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.00
08:10:10 SQL> 
08:10:10 SQL> DROP   TABLE gbp_ms10 ;

Table dropped.

Elapsed: 00:00:00.22
08:10:10 SQL> CREATE TABLE gbp_ms10 COMPRESS AS
08:10:10   2  SELECT
08:10:10   3  ydate
08:10:10   4  ,trend gbp_trend
08:10:10   5  ,g8    gbp_g8
08:10:10   6  ,gatt  gbp_gatt
08:10:10   7  ,gattn gbp_gattn
08:10:10   8  FROM modsrc
08:10:10   9  /

Table created.

Elapsed: 00:00:00.10
08:10:10 SQL> 
08:10:10 SQL> ANALYZE TABLE gbp_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
08:10:11 SQL> 
08:10:11 SQL> -- rpt
08:10:11 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 16:10:01 2010-12-24 08:05:00	 9900	  -.0231       .019
	-1 2010-09-16 22:20:01 2010-12-24 06:05:00	10362	    -.02      .0204

Elapsed: 00:00:00.02
08:10:11 SQL> SELECT gbp_trend,MIN(ydate),MAX(ydate),COUNT(gbp_trend),MIN(gbp_g8),MAX(gbp_g8)FROM gbp_ms10 GROUP BY gbp_trend;

 GBP_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(GBP_TREND) MIN(GBP_G8) MAX(GBP_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 16:10:01 2010-12-24 08:05:00	       9989	 -.0231        .019
	-1 2010-09-16 22:20:01 2010-12-24 06:05:00	      10369	   -.02       .0204

Elapsed: 00:00:00.02
08:10:11 SQL> 
08:10:11 SQL> -- I need a copy of q15 attributes
08:10:11 SQL> 
08:10:11 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.07
08:10:11 SQL> CREATE TABLE gbp_att COMPRESS AS
08:10:11   2  SELECT
08:10:11   3  ydate
08:10:11   4  ,att00 gbp_att00
08:10:11   5  ,att01 gbp_att01
08:10:11   6  ,att02 gbp_att02
08:10:11   7  ,att03 gbp_att03
08:10:11   8  ,att04 gbp_att04
08:10:11   9  ,att05 gbp_att05
08:10:11  10  ,att06 gbp_att06
08:10:11  11  ,att07 gbp_att07
08:10:11  12  ,att08 gbp_att08
08:10:11  13  ,att09 gbp_att09
08:10:11  14  ,att10 gbp_att10
08:10:11  15  ,att11 gbp_att11
08:10:11  16  ,att12 gbp_att12
08:10:11  17  ,att13 gbp_att13
08:10:11  18  ,att14 gbp_att14
08:10:11  19  ,att15 gbp_att15
08:10:11  20  ,att16 gbp_att16
08:10:11  21  ,att17 gbp_att17
08:10:11  22  ,att18 gbp_att18
08:10:11  23  ,att19 gbp_att19
08:10:11  24  ,att20 gbp_att20
08:10:11  25  ,att21 gbp_att21
08:10:11  26  ,att22 gbp_att22
08:10:11  27  ,att23 gbp_att23
08:10:11  28  ,att24 gbp_att24
08:10:11  29  ,att25 gbp_att25
08:10:11  30  ,att26 gbp_att26
08:10:11  31  ,att27 gbp_att27
08:10:11  32  ,att28 gbp_att28
08:10:11  33  ,att29 gbp_att29
08:10:11  34  ,att30 gbp_att30
08:10:11  35  ,att31 gbp_att31
08:10:11  36  ,att32 gbp_att32
08:10:11  37  ,att33 gbp_att33
08:10:11  38  ,att34 gbp_att34
08:10:11  39  ,att35 gbp_att35
08:10:11  40  ,att36 gbp_att36
08:10:11  41  FROM q15
08:10:11  42  /

Table created.

Elapsed: 00:00:00.27
08:10:11 SQL> 
08:10:11 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.60
08:10:11 SQL> 
08:10:11 SQL> -- rpt
08:10:11 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     20358

Elapsed: 00:00:00.01
08:10:11 SQL> 
08:10:11 SQL> --
08:10:11 SQL> -- jpy10.sql
08:10:11 SQL> --
08:10:11 SQL> 
08:10:11 SQL> -- Creates views and tables for backtesting a forex SVM strategy
08:10:11 SQL> 
08:10:11 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:01.19
08:10:13 SQL> 
08:10:13 SQL> -- I created di5min here:
08:10:13 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
08:10:13 SQL> 
08:10:13 SQL> CREATE OR REPLACE VIEW q11 AS
08:10:13   2  SELECT
08:10:13   3  pair
08:10:13   4  ,ydate
08:10:13   5  ,prdate
08:10:13   6  ,rownum rnum -- acts as t in my time-series
08:10:13   7  ,clse
08:10:13   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
08:10:13   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
08:10:13  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
08:10:13  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
08:10:13  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
08:10:13  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
08:10:13  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
08:10:13  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
08:10:13  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
08:10:13  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
08:10:13  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
08:10:13  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
08:10:13  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
08:10:13  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
08:10:13  22  FROM di5min WHERE pair LIKE'%jpy%'
08:10:13  23  ORDER BY ydate
08:10:13  24  /

View created.

Elapsed: 00:00:00.13
08:10:13 SQL> 
08:10:13 SQL> -- rpt
08:10:13 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_jpy        20741

Elapsed: 00:00:00.37
08:10:13 SQL> 
08:10:13 SQL> -- Calc deltas and gains
08:10:13 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.44
08:10:14 SQL> 
08:10:14 SQL> CREATE TABLE q13 COMPRESS AS
08:10:14   2  SELECT
08:10:14   3  pair
08:10:14   4  ,ydate
08:10:14   5  ,prdate
08:10:14   6  ,rnum
08:10:14   7  ,ld8
08:10:14   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
08:10:14   9  -- step by 2
08:10:14  10  ,clse-lg6  d06
08:10:14  11  ,lg6 -lg8  d68
08:10:14  12  ,lg8 -lg10 d810
08:10:14  13  ,lg10-lg12 d1012
08:10:14  14  ,lg12-lg14 d1214
08:10:14  15  ,lg14-lg16 d1416
08:10:14  16  ,lg16-lg18 d1618
08:10:14  17  -- step by 4
08:10:14  18  ,lg6 -lg10 d610
08:10:14  19  ,lg8 -lg12 d812
08:10:14  20  ,lg10-lg14 d1014
08:10:14  21  ,lg12-lg16 d1216
08:10:14  22  --
08:10:14  23  ,ABS(clse-lg6 )dc6
08:10:14  24  ,ABS(clse-lg8 )dc8
08:10:14  25  ,ABS(clse-lg10)dc10
08:10:14  26  ,ABS(clse-lg12)dc12
08:10:14  27  ,ABS(clse-lg14)dc14
08:10:14  28  ,ABS(clse-lg16)dc16
08:10:14  29  ,ABS(clse-lg18)dc18
08:10:14  30  ,ABS(clse-lg20)dc20
08:10:14  31  ,ABS(clse-lg22)dc22
08:10:14  32  ,(ld8-clse) ug8
08:10:14  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
08:10:14  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
08:10:14  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
08:10:14  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
08:10:14  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
08:10:14  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
08:10:14  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
08:10:14  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
08:10:14  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
08:10:14  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
08:10:14  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
08:10:14  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
08:10:14  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
08:10:14  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
08:10:14  47  ,0+TO_CHAR(ydate,'D')d
08:10:14  48  ,0+TO_CHAR(ydate,'W')w
08:10:14  49  -- mpm stands for minutes-past-midnight:
08:10:14  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
08:10:14  51  FROM q11
08:10:14  52  -- I dont want any NULL values from the LAG() functions:
08:10:14  53  WHERE lg32 > 0
08:10:14  54  ORDER BY pair,ydate
08:10:14  55  /

Table created.

Elapsed: 00:00:01.84
08:10:15 SQL> 
08:10:15 SQL> -- rpt
08:10:15 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9403
	-1	   10954

Elapsed: 00:00:00.03
08:10:16 SQL> 
08:10:16 SQL> -- Calc gains and ntiles
08:10:16 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.35
08:10:16 SQL> CREATE TABLE q15 COMPRESS AS
08:10:16   2  SELECT
08:10:16   3  pair
08:10:16   4  ,ydate
08:10:16   5  ,prdate -- Should be unique
08:10:16   6  ,trend -- +1 or -1
08:10:16   7  -- Use NTILE() to derive some attributes
08:10:16   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
08:10:16   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
08:10:16  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
08:10:16  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
08:10:16  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
08:10:16  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
08:10:16  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
08:10:16  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
08:10:16  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
08:10:16  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
08:10:16  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
08:10:16  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
08:10:16  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
08:10:16  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
08:10:16  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
08:10:16  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
08:10:16  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
08:10:16  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
08:10:16  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
08:10:16  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
08:10:16  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
08:10:16  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
08:10:16  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
08:10:16  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
08:10:16  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
08:10:16  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
08:10:16  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
08:10:16  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
08:10:16  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
08:10:16  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
08:10:16  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
08:10:16  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
08:10:16  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
08:10:16  41  ,hh    att32
08:10:16  42  ,d     att33
08:10:16  43  ,w     att34
08:10:16  44  ,mpm   att35
08:10:16  45  ,trend att36
08:10:16  46  ,ug8 g8
08:10:16  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
08:10:16  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
08:10:16  49  FROM q13
08:10:16  50  ORDER BY pair,ydate
08:10:16  51  /

Table created.

Elapsed: 00:00:05.65
08:10:22 SQL> 
08:10:22 SQL> -- rpt
08:10:22 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
08:10:22   2  GROUP BY pair,trend,gatt,gattn
08:10:22   3  ORDER BY pair,trend,gatt,gattn
08:10:22   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_jpy 	-1 nup nup -3.695E-06	     169
usd_jpy 	-1 nup up  -.18409537	    5534
usd_jpy 	-1 up  nup .179612486	    5232
usd_jpy 	-1			       0
usd_jpy 	 1 nup nup	    0	     118
usd_jpy 	 1 nup up  -.18874477	    5135
usd_jpy 	 1 up  nup .192332125	    4073
usd_jpy 	 1			       0

8 rows selected.

Elapsed: 00:00:00.06
08:10:22 SQL> 
08:10:22 SQL> -- rpt
08:10:22 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_jpy 2010-12-24 08:05:00

Elapsed: 00:00:00.02
08:10:22 SQL> 
08:10:22 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.23
08:10:22 SQL> CREATE TABLE modsrc COMPRESS AS
08:10:22   2  SELECT
08:10:22   3  pair
08:10:22   4  ,ydate
08:10:22   5  ,prdate
08:10:22   6  ,trend
08:10:22   7  ,g8
08:10:22   8  ,gatt
08:10:22   9  ,gattn
08:10:22  10  FROM q15
08:10:22  11  /

Table created.

Elapsed: 00:00:00.09
08:10:22 SQL> 
08:10:22 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
08:10:22 SQL> 
08:10:22 SQL> -- rpt
08:10:22 SQL> 
08:10:22 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20741

Elapsed: 00:00:00.35
08:10:22 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20357

Elapsed: 00:00:00.01
08:10:22 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20357

Elapsed: 00:00:00.00
08:10:22 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20357

Elapsed: 00:00:00.00
08:10:22 SQL> 
08:10:22 SQL> DROP   TABLE jpy_ms10 ;

Table dropped.

Elapsed: 00:00:00.10
08:10:23 SQL> CREATE TABLE jpy_ms10 COMPRESS AS
08:10:23   2  SELECT
08:10:23   3  ydate
08:10:23   4  ,trend jpy_trend
08:10:23   5  ,g8    jpy_g8
08:10:23   6  ,gatt  jpy_gatt
08:10:23   7  ,gattn jpy_gattn
08:10:23   8  FROM modsrc
08:10:23   9  /

Table created.

Elapsed: 00:00:00.11
08:10:23 SQL> 
08:10:23 SQL> ANALYZE TABLE jpy_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
08:10:23 SQL> 
08:10:23 SQL> -- rpt
08:10:23 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 16:10:01 2010-12-24 06:30:00	 9326	  -1.185	  1
	-1 2010-09-17 00:15:01 2010-12-24 08:05:00	10935	 -1.0575       1.32

Elapsed: 00:00:00.02
08:10:23 SQL> SELECT jpy_trend,MIN(ydate),MAX(ydate),COUNT(jpy_trend),MIN(jpy_g8),MAX(jpy_g8)FROM jpy_ms10 GROUP BY jpy_trend;

 JPY_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(JPY_TREND) MIN(JPY_G8) MAX(JPY_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 16:10:01 2010-12-24 06:30:00	       9403	 -1.185 	  1
	-1 2010-09-17 00:15:01 2010-12-24 08:05:00	      10954	-1.0575        1.32

Elapsed: 00:00:00.02
08:10:23 SQL> 
08:10:23 SQL> -- I need a copy of q15 attributes
08:10:23 SQL> 
08:10:23 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.04
08:10:23 SQL> CREATE TABLE jpy_att COMPRESS AS
08:10:23   2  SELECT
08:10:23   3  ydate
08:10:23   4  ,att00 jpy_att00
08:10:23   5  ,att01 jpy_att01
08:10:23   6  ,att02 jpy_att02
08:10:23   7  ,att03 jpy_att03
08:10:23   8  ,att04 jpy_att04
08:10:23   9  ,att05 jpy_att05
08:10:23  10  ,att06 jpy_att06
08:10:23  11  ,att07 jpy_att07
08:10:23  12  ,att08 jpy_att08
08:10:23  13  ,att09 jpy_att09
08:10:23  14  ,att10 jpy_att10
08:10:23  15  ,att11 jpy_att11
08:10:23  16  ,att12 jpy_att12
08:10:23  17  ,att13 jpy_att13
08:10:23  18  ,att14 jpy_att14
08:10:23  19  ,att15 jpy_att15
08:10:23  20  ,att16 jpy_att16
08:10:23  21  ,att17 jpy_att17
08:10:23  22  ,att18 jpy_att18
08:10:23  23  ,att19 jpy_att19
08:10:23  24  ,att20 jpy_att20
08:10:23  25  ,att21 jpy_att21
08:10:23  26  ,att22 jpy_att22
08:10:23  27  ,att23 jpy_att23
08:10:23  28  ,att24 jpy_att24
08:10:23  29  ,att25 jpy_att25
08:10:23  30  ,att26 jpy_att26
08:10:23  31  ,att27 jpy_att27
08:10:23  32  ,att28 jpy_att28
08:10:23  33  ,att29 jpy_att29
08:10:23  34  ,att30 jpy_att30
08:10:23  35  ,att31 jpy_att31
08:10:23  36  ,att32 jpy_att32
08:10:23  37  ,att33 jpy_att33
08:10:23  38  ,att34 jpy_att34
08:10:23  39  ,att35 jpy_att35
08:10:23  40  ,att36 jpy_att36
08:10:23  41  FROM q15
08:10:23  42  /

Table created.

Elapsed: 00:00:00.24
08:10:23 SQL> 
08:10:23 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.61
08:10:24 SQL> 
08:10:24 SQL> -- rpt
08:10:24 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     20357

Elapsed: 00:00:00.01
08:10:24 SQL> 
08:10:24 SQL> --
08:10:24 SQL> -- cad10.sql
08:10:24 SQL> --
08:10:24 SQL> 
08:10:24 SQL> -- Creates views and tables for backtesting a forex SVM strategy
08:10:24 SQL> 
08:10:24 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.55
08:10:24 SQL> 
08:10:24 SQL> -- I created di5min here:
08:10:24 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
08:10:24 SQL> 
08:10:24 SQL> CREATE OR REPLACE VIEW q11 AS
08:10:24   2  SELECT
08:10:24   3  pair
08:10:24   4  ,ydate
08:10:24   5  ,prdate
08:10:24   6  ,rownum rnum -- acts as t in my time-series
08:10:24   7  ,clse
08:10:24   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
08:10:24   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
08:10:24  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
08:10:24  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
08:10:24  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
08:10:24  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
08:10:24  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
08:10:24  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
08:10:24  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
08:10:24  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
08:10:24  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
08:10:24  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
08:10:24  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
08:10:24  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
08:10:24  22  FROM di5min WHERE pair LIKE'%cad%'
08:10:24  23  ORDER BY ydate
08:10:24  24  /

View created.

Elapsed: 00:00:00.06
08:10:24 SQL> 
08:10:24 SQL> -- rpt
08:10:24 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_cad        20739

Elapsed: 00:00:00.37
08:10:25 SQL> 
08:10:25 SQL> -- Calc deltas and gains
08:10:25 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.44
08:10:25 SQL> 
08:10:25 SQL> CREATE TABLE q13 COMPRESS AS
08:10:25   2  SELECT
08:10:25   3  pair
08:10:25   4  ,ydate
08:10:25   5  ,prdate
08:10:25   6  ,rnum
08:10:25   7  ,ld8
08:10:25   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
08:10:25   9  -- step by 2
08:10:25  10  ,clse-lg6  d06
08:10:25  11  ,lg6 -lg8  d68
08:10:25  12  ,lg8 -lg10 d810
08:10:25  13  ,lg10-lg12 d1012
08:10:25  14  ,lg12-lg14 d1214
08:10:25  15  ,lg14-lg16 d1416
08:10:25  16  ,lg16-lg18 d1618
08:10:25  17  -- step by 4
08:10:25  18  ,lg6 -lg10 d610
08:10:25  19  ,lg8 -lg12 d812
08:10:25  20  ,lg10-lg14 d1014
08:10:25  21  ,lg12-lg16 d1216
08:10:25  22  --
08:10:25  23  ,ABS(clse-lg6 )dc6
08:10:25  24  ,ABS(clse-lg8 )dc8
08:10:25  25  ,ABS(clse-lg10)dc10
08:10:25  26  ,ABS(clse-lg12)dc12
08:10:25  27  ,ABS(clse-lg14)dc14
08:10:25  28  ,ABS(clse-lg16)dc16
08:10:25  29  ,ABS(clse-lg18)dc18
08:10:25  30  ,ABS(clse-lg20)dc20
08:10:25  31  ,ABS(clse-lg22)dc22
08:10:25  32  ,(ld8-clse) ug8
08:10:25  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
08:10:25  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
08:10:25  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
08:10:25  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
08:10:25  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
08:10:25  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
08:10:25  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
08:10:25  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
08:10:25  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
08:10:25  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
08:10:25  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
08:10:25  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
08:10:25  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
08:10:25  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
08:10:25  47  ,0+TO_CHAR(ydate,'D')d
08:10:25  48  ,0+TO_CHAR(ydate,'W')w
08:10:25  49  -- mpm stands for minutes-past-midnight:
08:10:25  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
08:10:25  51  FROM q11
08:10:25  52  -- I dont want any NULL values from the LAG() functions:
08:10:25  53  WHERE lg32 > 0
08:10:25  54  ORDER BY pair,ydate
08:10:25  55  /

Table created.

Elapsed: 00:00:01.82
08:10:27 SQL> 
08:10:27 SQL> -- rpt
08:10:27 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9403
	-1	   10952

Elapsed: 00:00:00.03
08:10:27 SQL> 
08:10:27 SQL> -- Calc gains and ntiles
08:10:27 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.34
08:10:27 SQL> CREATE TABLE q15 COMPRESS AS
08:10:27   2  SELECT
08:10:27   3  pair
08:10:27   4  ,ydate
08:10:27   5  ,prdate -- Should be unique
08:10:27   6  ,trend -- +1 or -1
08:10:27   7  -- Use NTILE() to derive some attributes
08:10:27   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
08:10:27   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
08:10:27  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
08:10:27  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
08:10:27  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
08:10:27  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
08:10:27  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
08:10:27  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
08:10:27  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
08:10:27  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
08:10:27  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
08:10:27  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
08:10:27  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
08:10:27  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
08:10:27  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
08:10:27  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
08:10:27  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
08:10:27  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
08:10:27  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
08:10:27  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
08:10:27  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
08:10:27  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
08:10:27  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
08:10:27  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
08:10:27  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
08:10:27  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
08:10:27  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
08:10:27  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
08:10:27  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
08:10:27  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
08:10:27  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
08:10:27  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
08:10:27  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
08:10:27  41  ,hh    att32
08:10:27  42  ,d     att33
08:10:27  43  ,w     att34
08:10:27  44  ,mpm   att35
08:10:27  45  ,trend att36
08:10:27  46  ,ug8 g8
08:10:27  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
08:10:27  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
08:10:27  49  FROM q13
08:10:27  50  ORDER BY pair,ydate
08:10:27  51  /

Table created.

Elapsed: 00:00:05.55
08:10:33 SQL> 
08:10:33 SQL> -- rpt
08:10:33 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
08:10:33   2  GROUP BY pair,trend,gatt,gattn
08:10:33   3  ORDER BY pair,trend,gatt,gattn
08:10:33   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_cad 	-1 nup nup -.00002706	    5685
usd_cad 	-1 nup up  -.00400674	    2629
usd_cad 	-1 up  nup .004683756	    2565
usd_cad 	-1			       0
usd_cad 	 1 nup nup -.00011409	    4644
usd_cad 	 1 nup up  -.00422802	    2754
usd_cad 	 1 up  nup .004613081	    1982
usd_cad 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
08:10:33 SQL> 
08:10:33 SQL> -- rpt
08:10:33 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_cad 2010-12-24 08:05:00

Elapsed: 00:00:00.02
08:10:33 SQL> 
08:10:33 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.32
08:10:33 SQL> CREATE TABLE modsrc COMPRESS AS
08:10:33   2  SELECT
08:10:33   3  pair
08:10:33   4  ,ydate
08:10:33   5  ,prdate
08:10:33   6  ,trend
08:10:33   7  ,g8
08:10:33   8  ,gatt
08:10:33   9  ,gattn
08:10:33  10  FROM q15
08:10:33  11  /

Table created.

Elapsed: 00:00:00.13
08:10:33 SQL> 
08:10:33 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.26
08:10:34 SQL> 
08:10:34 SQL> -- rpt
08:10:34 SQL> 
08:10:34 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20739

Elapsed: 00:00:00.36
08:10:34 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20355

Elapsed: 00:00:00.01
08:10:34 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20355

Elapsed: 00:00:00.00
08:10:34 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20355

Elapsed: 00:00:00.01
08:10:34 SQL> 
08:10:34 SQL> DROP   TABLE cad_ms10 ;

Table dropped.

Elapsed: 00:00:00.06
08:10:34 SQL> CREATE TABLE cad_ms10 COMPRESS AS
08:10:34   2  SELECT
08:10:34   3  ydate
08:10:34   4  ,trend cad_trend
08:10:34   5  ,g8    cad_g8
08:10:34   6  ,gatt  cad_gatt
08:10:34   7  ,gattn cad_gattn
08:10:34   8  FROM modsrc
08:10:34   9  /

Table created.

Elapsed: 00:00:00.07
08:10:34 SQL> 
08:10:34 SQL> ANALYZE TABLE cad_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
08:10:34 SQL> 
08:10:34 SQL> -- rpt
08:10:34 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 16:10:01 2010-12-24 04:55:00	 9380	  -.0122      .0159
	-1 2010-09-16 20:05:01 2010-12-24 08:05:00	10879	 -.01105      .0176

Elapsed: 00:00:00.02
08:10:35 SQL> SELECT cad_trend,MIN(ydate),MAX(ydate),COUNT(cad_trend),MIN(cad_g8),MAX(cad_g8)FROM cad_ms10 GROUP BY cad_trend;

 CAD_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(CAD_TREND) MIN(CAD_G8) MAX(CAD_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 16:10:01 2010-12-24 04:55:00	       9403	 -.0122       .0159
	-1 2010-09-16 20:05:01 2010-12-24 08:05:00	      10952	-.01105       .0176

Elapsed: 00:00:00.01
08:10:35 SQL> 
08:10:35 SQL> -- I need a copy of q15 attributes
08:10:35 SQL> 
08:10:35 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.23
08:10:35 SQL> CREATE TABLE cad_att COMPRESS AS
08:10:35   2  SELECT
08:10:35   3  ydate
08:10:35   4  ,att00 cad_att00
08:10:35   5  ,att01 cad_att01
08:10:35   6  ,att02 cad_att02
08:10:35   7  ,att03 cad_att03
08:10:35   8  ,att04 cad_att04
08:10:35   9  ,att05 cad_att05
08:10:35  10  ,att06 cad_att06
08:10:35  11  ,att07 cad_att07
08:10:35  12  ,att08 cad_att08
08:10:35  13  ,att09 cad_att09
08:10:35  14  ,att10 cad_att10
08:10:35  15  ,att11 cad_att11
08:10:35  16  ,att12 cad_att12
08:10:35  17  ,att13 cad_att13
08:10:35  18  ,att14 cad_att14
08:10:35  19  ,att15 cad_att15
08:10:35  20  ,att16 cad_att16
08:10:35  21  ,att17 cad_att17
08:10:35  22  ,att18 cad_att18
08:10:35  23  ,att19 cad_att19
08:10:35  24  ,att20 cad_att20
08:10:35  25  ,att21 cad_att21
08:10:35  26  ,att22 cad_att22
08:10:35  27  ,att23 cad_att23
08:10:35  28  ,att24 cad_att24
08:10:35  29  ,att25 cad_att25
08:10:35  30  ,att26 cad_att26
08:10:35  31  ,att27 cad_att27
08:10:35  32  ,att28 cad_att28
08:10:35  33  ,att29 cad_att29
08:10:35  34  ,att30 cad_att30
08:10:35  35  ,att31 cad_att31
08:10:35  36  ,att32 cad_att32
08:10:35  37  ,att33 cad_att33
08:10:35  38  ,att34 cad_att34
08:10:35  39  ,att35 cad_att35
08:10:35  40  ,att36 cad_att36
08:10:35  41  FROM q15
08:10:35  42  /

Table created.

Elapsed: 00:00:00.32
08:10:35 SQL> 
08:10:35 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.60
08:10:36 SQL> 
08:10:36 SQL> -- rpt
08:10:36 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     20355

Elapsed: 00:00:00.01
08:10:36 SQL> 
08:10:36 SQL> --
08:10:36 SQL> -- chf10.sql
08:10:36 SQL> --
08:10:36 SQL> 
08:10:36 SQL> -- Creates views and tables for backtesting a forex SVM strategy
08:10:36 SQL> 
08:10:36 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:02.08
08:10:38 SQL> 
08:10:38 SQL> -- I created di5min here:
08:10:38 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
08:10:38 SQL> 
08:10:38 SQL> CREATE OR REPLACE VIEW q11 AS
08:10:38   2  SELECT
08:10:38   3  pair
08:10:38   4  ,ydate
08:10:38   5  ,prdate
08:10:38   6  ,rownum rnum -- acts as t in my time-series
08:10:38   7  ,clse
08:10:38   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
08:10:38   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
08:10:38  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
08:10:38  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
08:10:38  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
08:10:38  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
08:10:38  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
08:10:38  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
08:10:38  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
08:10:38  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
08:10:38  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
08:10:38  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
08:10:38  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
08:10:38  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
08:10:38  22  FROM di5min WHERE pair LIKE'%chf%'
08:10:38  23  ORDER BY ydate
08:10:38  24  /

View created.

Elapsed: 00:00:00.36
08:10:38 SQL> 
08:10:38 SQL> -- rpt
08:10:38 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_chf        20742

Elapsed: 00:00:00.37
08:10:38 SQL> 
08:10:38 SQL> -- Calc deltas and gains
08:10:38 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:01.33
08:10:40 SQL> 
08:10:40 SQL> CREATE TABLE q13 COMPRESS AS
08:10:40   2  SELECT
08:10:40   3  pair
08:10:40   4  ,ydate
08:10:40   5  ,prdate
08:10:40   6  ,rnum
08:10:40   7  ,ld8
08:10:40   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
08:10:40   9  -- step by 2
08:10:40  10  ,clse-lg6  d06
08:10:40  11  ,lg6 -lg8  d68
08:10:40  12  ,lg8 -lg10 d810
08:10:40  13  ,lg10-lg12 d1012
08:10:40  14  ,lg12-lg14 d1214
08:10:40  15  ,lg14-lg16 d1416
08:10:40  16  ,lg16-lg18 d1618
08:10:40  17  -- step by 4
08:10:40  18  ,lg6 -lg10 d610
08:10:40  19  ,lg8 -lg12 d812
08:10:40  20  ,lg10-lg14 d1014
08:10:40  21  ,lg12-lg16 d1216
08:10:40  22  --
08:10:40  23  ,ABS(clse-lg6 )dc6
08:10:40  24  ,ABS(clse-lg8 )dc8
08:10:40  25  ,ABS(clse-lg10)dc10
08:10:40  26  ,ABS(clse-lg12)dc12
08:10:40  27  ,ABS(clse-lg14)dc14
08:10:40  28  ,ABS(clse-lg16)dc16
08:10:40  29  ,ABS(clse-lg18)dc18
08:10:40  30  ,ABS(clse-lg20)dc20
08:10:40  31  ,ABS(clse-lg22)dc22
08:10:40  32  ,(ld8-clse) ug8
08:10:40  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
08:10:40  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
08:10:40  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
08:10:40  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
08:10:40  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
08:10:40  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
08:10:40  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
08:10:40  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
08:10:40  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
08:10:40  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
08:10:40  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
08:10:40  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
08:10:40  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
08:10:40  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
08:10:40  47  ,0+TO_CHAR(ydate,'D')d
08:10:40  48  ,0+TO_CHAR(ydate,'W')w
08:10:40  49  -- mpm stands for minutes-past-midnight:
08:10:40  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
08:10:40  51  FROM q11
08:10:40  52  -- I dont want any NULL values from the LAG() functions:
08:10:40  53  WHERE lg32 > 0
08:10:40  54  ORDER BY pair,ydate
08:10:40  55  /

Table created.

Elapsed: 00:00:01.76
08:10:42 SQL> 
08:10:42 SQL> -- rpt
08:10:42 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9555
	-1	   10803

Elapsed: 00:00:00.06
08:10:42 SQL> 
08:10:42 SQL> -- Calc gains and ntiles
08:10:42 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.48
08:10:42 SQL> CREATE TABLE q15 COMPRESS AS
08:10:42   2  SELECT
08:10:42   3  pair
08:10:42   4  ,ydate
08:10:42   5  ,prdate -- Should be unique
08:10:42   6  ,trend -- +1 or -1
08:10:42   7  -- Use NTILE() to derive some attributes
08:10:42   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
08:10:42   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
08:10:42  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
08:10:42  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
08:10:42  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
08:10:42  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
08:10:42  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
08:10:42  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
08:10:42  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
08:10:42  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
08:10:42  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
08:10:42  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
08:10:42  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
08:10:42  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
08:10:42  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
08:10:42  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
08:10:42  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
08:10:42  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
08:10:42  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
08:10:42  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
08:10:42  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
08:10:42  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
08:10:42  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
08:10:42  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
08:10:42  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
08:10:42  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
08:10:42  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
08:10:42  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
08:10:42  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
08:10:42  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
08:10:42  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
08:10:42  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
08:10:42  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
08:10:42  41  ,hh    att32
08:10:42  42  ,d     att33
08:10:42  43  ,w     att34
08:10:42  44  ,mpm   att35
08:10:42  45  ,trend att36
08:10:42  46  ,ug8 g8
08:10:42  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
08:10:42  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
08:10:42  49  FROM q13
08:10:42  50  ORDER BY pair,ydate
08:10:42  51  /

Table created.

Elapsed: 00:00:05.51
08:10:48 SQL> 
08:10:48 SQL> -- rpt
08:10:48 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
08:10:48   2  GROUP BY pair,trend,gatt,gattn
08:10:48   3  ORDER BY pair,trend,gatt,gattn
08:10:48   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_chf 	-1 nup nup .000023437	    4911
usd_chf 	-1 nup up   -.0049514	    3140
usd_chf 	-1 up  nup  .00507096	    2664
usd_chf 	-1			       0
usd_chf 	 1 nup nup -.00002325	    4522
usd_chf 	 1 nup up  -.00452927	    2921
usd_chf 	 1 up  nup .004634476	    2104
usd_chf 	 1			       0

8 rows selected.

Elapsed: 00:00:00.02
08:10:48 SQL> 
08:10:48 SQL> -- rpt
08:10:48 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_chf 2010-12-24 08:05:00

Elapsed: 00:00:00.03
08:10:48 SQL> 
08:10:48 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.19
08:10:48 SQL> CREATE TABLE modsrc COMPRESS AS
08:10:48   2  SELECT
08:10:48   3  pair
08:10:48   4  ,ydate
08:10:48   5  ,prdate
08:10:48   6  ,trend
08:10:48   7  ,g8
08:10:48   8  ,gatt
08:10:48   9  ,gattn
08:10:48  10  FROM q15
08:10:48  11  /

Table created.

Elapsed: 00:00:00.16
08:10:48 SQL> 
08:10:48 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.24
08:10:48 SQL> 
08:10:48 SQL> -- rpt
08:10:48 SQL> 
08:10:48 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20742

Elapsed: 00:00:00.35
08:10:49 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.01
08:10:49 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.00
08:10:49 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.01
08:10:49 SQL> 
08:10:49 SQL> DROP   TABLE chf_ms10 ;

Table dropped.

Elapsed: 00:00:00.10
08:10:49 SQL> CREATE TABLE chf_ms10 COMPRESS AS
08:10:49   2  SELECT
08:10:49   3  ydate
08:10:49   4  ,trend chf_trend
08:10:49   5  ,g8    chf_g8
08:10:49   6  ,gatt  chf_gatt
08:10:49   7  ,gattn chf_gattn
08:10:49   8  FROM modsrc
08:10:49   9  /

Table created.

Elapsed: 00:00:00.12
08:10:49 SQL> 
08:10:49 SQL> ANALYZE TABLE chf_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
08:10:49 SQL> 
08:10:49 SQL> -- rpt
08:10:49 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 16:10:01 2010-12-24 08:05:00	 9547	 -.01775      .0155
	-1 2010-09-16 20:55:01 2010-12-24 07:25:00	10715	 -.01825     .01545

Elapsed: 00:00:00.02
08:10:49 SQL> SELECT chf_trend,MIN(ydate),MAX(ydate),COUNT(chf_trend),MIN(chf_g8),MAX(chf_g8)FROM chf_ms10 GROUP BY chf_trend;

 CHF_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(CHF_TREND) MIN(CHF_G8) MAX(CHF_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 16:10:01 2010-12-24 08:05:00	       9555	-.01775       .0155
	-1 2010-09-16 20:55:01 2010-12-24 07:25:00	      10803	-.01825      .01545

Elapsed: 00:00:00.01
08:10:49 SQL> 
08:10:49 SQL> -- I need a copy of q15 attributes
08:10:49 SQL> 
08:10:49 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.14
08:10:49 SQL> CREATE TABLE chf_att COMPRESS AS
08:10:49   2  SELECT
08:10:49   3  ydate
08:10:49   4  ,att00 chf_att00
08:10:49   5  ,att01 chf_att01
08:10:49   6  ,att02 chf_att02
08:10:49   7  ,att03 chf_att03
08:10:49   8  ,att04 chf_att04
08:10:49   9  ,att05 chf_att05
08:10:49  10  ,att06 chf_att06
08:10:49  11  ,att07 chf_att07
08:10:49  12  ,att08 chf_att08
08:10:49  13  ,att09 chf_att09
08:10:49  14  ,att10 chf_att10
08:10:49  15  ,att11 chf_att11
08:10:49  16  ,att12 chf_att12
08:10:49  17  ,att13 chf_att13
08:10:49  18  ,att14 chf_att14
08:10:49  19  ,att15 chf_att15
08:10:49  20  ,att16 chf_att16
08:10:49  21  ,att17 chf_att17
08:10:49  22  ,att18 chf_att18
08:10:49  23  ,att19 chf_att19
08:10:49  24  ,att20 chf_att20
08:10:49  25  ,att21 chf_att21
08:10:49  26  ,att22 chf_att22
08:10:49  27  ,att23 chf_att23
08:10:49  28  ,att24 chf_att24
08:10:49  29  ,att25 chf_att25
08:10:49  30  ,att26 chf_att26
08:10:49  31  ,att27 chf_att27
08:10:49  32  ,att28 chf_att28
08:10:49  33  ,att29 chf_att29
08:10:49  34  ,att30 chf_att30
08:10:49  35  ,att31 chf_att31
08:10:49  36  ,att32 chf_att32
08:10:49  37  ,att33 chf_att33
08:10:49  38  ,att34 chf_att34
08:10:49  39  ,att35 chf_att35
08:10:49  40  ,att36 chf_att36
08:10:49  41  FROM q15
08:10:49  42  /

Table created.

Elapsed: 00:00:00.25
08:10:49 SQL> 
08:10:49 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.49
08:10:50 SQL> 
08:10:50 SQL> -- rpt
08:10:50 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     20358

Elapsed: 00:00:00.01
08:10:50 SQL> 
08:10:50 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
