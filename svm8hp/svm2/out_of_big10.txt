
SQL*Plus: Release 11.2.0.1.0 Production on Fri Dec 24 05:59:09 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

05:59:09 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
05:59:09 SQL> 05:59:09 SQL> --
05:59:09 SQL> -- eur10.sql
05:59:09 SQL> --
05:59:09 SQL> 
05:59:09 SQL> -- Creates views and tables for backtesting a forex SVM strategy
05:59:09 SQL> 
05:59:09 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.01
05:59:09 SQL> 
05:59:09 SQL> -- I created di5min here:
05:59:09 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
05:59:09 SQL> 
05:59:09 SQL> CREATE OR REPLACE VIEW q11 AS
05:59:09   2  SELECT
05:59:09   3  pair
05:59:09   4  ,ydate
05:59:09   5  ,prdate
05:59:09   6  ,rownum rnum -- acts as t in my time-series
05:59:09   7  ,clse
05:59:09   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
05:59:09   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
05:59:09  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
05:59:09  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
05:59:09  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
05:59:09  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
05:59:09  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
05:59:09  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
05:59:09  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
05:59:09  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
05:59:09  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
05:59:09  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
05:59:09  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
05:59:09  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
05:59:09  22  FROM di5min WHERE pair LIKE'%eur%'
05:59:09  23  ORDER BY ydate
05:59:09  24  /

View created.

Elapsed: 00:00:00.05
05:59:09 SQL> 
05:59:09 SQL> -- rpt
05:59:09 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
eur_usd        20743

Elapsed: 00:00:00.37
05:59:09 SQL> 
05:59:09 SQL> -- Calc deltas and gains
05:59:09 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.07
05:59:09 SQL> 
05:59:09 SQL> CREATE TABLE q13 COMPRESS AS
05:59:09   2  SELECT
05:59:09   3  pair
05:59:09   4  ,ydate
05:59:09   5  ,prdate
05:59:09   6  ,rnum
05:59:09   7  ,ld8
05:59:09   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
05:59:09   9  -- step by 2
05:59:09  10  ,clse-lg6  d06
05:59:09  11  ,lg6 -lg8  d68
05:59:09  12  ,lg8 -lg10 d810
05:59:09  13  ,lg10-lg12 d1012
05:59:09  14  ,lg12-lg14 d1214
05:59:09  15  ,lg14-lg16 d1416
05:59:09  16  ,lg16-lg18 d1618
05:59:09  17  -- step by 4
05:59:09  18  ,lg6 -lg10 d610
05:59:09  19  ,lg8 -lg12 d812
05:59:09  20  ,lg10-lg14 d1014
05:59:09  21  ,lg12-lg16 d1216
05:59:09  22  --
05:59:09  23  ,ABS(clse-lg6 )dc6
05:59:09  24  ,ABS(clse-lg8 )dc8
05:59:09  25  ,ABS(clse-lg10)dc10
05:59:09  26  ,ABS(clse-lg12)dc12
05:59:09  27  ,ABS(clse-lg14)dc14
05:59:09  28  ,ABS(clse-lg16)dc16
05:59:09  29  ,ABS(clse-lg18)dc18
05:59:09  30  ,ABS(clse-lg20)dc20
05:59:09  31  ,ABS(clse-lg22)dc22
05:59:09  32  ,(ld8-clse) ug8
05:59:09  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
05:59:09  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
05:59:09  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
05:59:09  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
05:59:09  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
05:59:09  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
05:59:09  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
05:59:09  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
05:59:09  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
05:59:09  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
05:59:09  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
05:59:09  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
05:59:09  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
05:59:09  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
05:59:09  47  ,0+TO_CHAR(ydate,'D')d
05:59:09  48  ,0+TO_CHAR(ydate,'W')w
05:59:09  49  -- mpm stands for minutes-past-midnight:
05:59:09  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
05:59:09  51  FROM q11
05:59:09  52  -- I dont want any NULL values from the LAG() functions:
05:59:09  53  WHERE lg32 > 0
05:59:09  54  ORDER BY pair,ydate
05:59:09  55  /

Table created.

Elapsed: 00:00:01.98
05:59:11 SQL> 
05:59:11 SQL> -- rpt
05:59:11 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	   10120
	-1	   10239

Elapsed: 00:00:00.04
05:59:11 SQL> 
05:59:11 SQL> -- Calc gains and ntiles
05:59:11 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.04
05:59:11 SQL> CREATE TABLE q15 COMPRESS AS
05:59:11   2  SELECT
05:59:11   3  pair
05:59:11   4  ,ydate
05:59:11   5  ,prdate -- Should be unique
05:59:11   6  ,trend -- +1 or -1
05:59:11   7  -- Use NTILE() to derive some attributes
05:59:11   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
05:59:11   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
05:59:11  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
05:59:11  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
05:59:11  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
05:59:11  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
05:59:11  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
05:59:11  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
05:59:11  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
05:59:11  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
05:59:11  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
05:59:11  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
05:59:11  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
05:59:11  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
05:59:11  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
05:59:11  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
05:59:11  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
05:59:11  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
05:59:11  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
05:59:11  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
05:59:11  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
05:59:11  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
05:59:11  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
05:59:11  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
05:59:11  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
05:59:11  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
05:59:11  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
05:59:11  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
05:59:11  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
05:59:11  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
05:59:11  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
05:59:11  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
05:59:11  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
05:59:11  41  ,hh    att32
05:59:11  42  ,d     att33
05:59:11  43  ,w     att34
05:59:11  44  ,mpm   att35
05:59:11  45  ,trend att36
05:59:11  46  ,ug8 g8
05:59:11  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
05:59:11  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
05:59:11  49  FROM q13
05:59:11  50  ORDER BY pair,ydate
05:59:11  51  /

Table created.

Elapsed: 00:00:05.43
05:59:17 SQL> 
05:59:17 SQL> -- rpt
05:59:17 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
05:59:17   2  GROUP BY pair,trend,gatt,gattn
05:59:17   3  ORDER BY pair,trend,gatt,gattn
05:59:17   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
eur_usd 	-1 nup nup .000025712	    3021
eur_usd 	-1 nup up  -.00602802	    3651
eur_usd 	-1 up  nup .005756878	    3564
eur_usd 	-1			       0
eur_usd 	 1 nup nup -.00008549	    2941
eur_usd 	 1 nup up  -.00625218	    3472
eur_usd 	 1 up  nup .006576823	    3614
eur_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
05:59:17 SQL> 
05:59:17 SQL> -- rpt
05:59:17 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
eur_usd 2010-12-24 05:55:00

Elapsed: 00:00:00.02
05:59:17 SQL> 
05:59:17 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.03
05:59:17 SQL> CREATE TABLE modsrc COMPRESS AS
05:59:17   2  SELECT
05:59:17   3  pair
05:59:17   4  ,ydate
05:59:17   5  ,prdate
05:59:17   6  ,trend
05:59:17   7  ,g8
05:59:17   8  ,gatt
05:59:17   9  ,gattn
05:59:17  10  FROM q15
05:59:17  11  /

Table created.

Elapsed: 00:00:00.09
05:59:17 SQL> 
05:59:17 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
05:59:17 SQL> 
05:59:17 SQL> -- rpt
05:59:17 SQL> 
05:59:17 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20743

Elapsed: 00:00:00.34
05:59:17 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20359

Elapsed: 00:00:00.01
05:59:17 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20359

Elapsed: 00:00:00.00
05:59:17 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20359

Elapsed: 00:00:00.00
05:59:17 SQL> 
05:59:17 SQL> DROP   TABLE eur_ms10 ;

Table dropped.

Elapsed: 00:00:00.04
05:59:17 SQL> CREATE TABLE eur_ms10 COMPRESS AS
05:59:17   2  SELECT
05:59:17   3  ydate
05:59:17   4  ,trend eur_trend
05:59:17   5  ,g8    eur_g8
05:59:17   6  ,gatt  eur_gatt
05:59:17   7  ,gattn eur_gattn
05:59:17   8  FROM modsrc
05:59:17   9  /

Table created.

Elapsed: 00:00:00.07
05:59:17 SQL> 
05:59:17 SQL> ANALYZE TABLE eur_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
05:59:18 SQL> 
05:59:18 SQL> -- rpt
05:59:18 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 14:00:01 2010-12-24 05:55:00	10027	  -.0218     .02165
	-1 2010-09-16 17:15:01 2010-12-24 01:50:00	10236	 -.02085      .0196

Elapsed: 00:00:00.03
05:59:18 SQL> SELECT eur_trend,MIN(ydate),MAX(ydate),COUNT(eur_trend),MIN(eur_g8),MAX(eur_g8)FROM eur_ms10 GROUP BY eur_trend;

 EUR_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(EUR_TREND) MIN(EUR_G8) MAX(EUR_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 14:00:01 2010-12-24 05:55:00	      10120	 -.0218      .02165
	-1 2010-09-16 17:15:01 2010-12-24 01:50:00	      10239	-.02085       .0196

Elapsed: 00:00:00.01
05:59:18 SQL> 
05:59:18 SQL> -- I need a copy of q15 attributes
05:59:18 SQL> 
05:59:18 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.05
05:59:18 SQL> CREATE TABLE eur_att COMPRESS AS
05:59:18   2  SELECT
05:59:18   3  ydate
05:59:18   4  ,att00 eur_att00
05:59:18   5  ,att01 eur_att01
05:59:18   6  ,att02 eur_att02
05:59:18   7  ,att03 eur_att03
05:59:18   8  ,att04 eur_att04
05:59:18   9  ,att05 eur_att05
05:59:18  10  ,att06 eur_att06
05:59:18  11  ,att07 eur_att07
05:59:18  12  ,att08 eur_att08
05:59:18  13  ,att09 eur_att09
05:59:18  14  ,att10 eur_att10
05:59:18  15  ,att11 eur_att11
05:59:18  16  ,att12 eur_att12
05:59:18  17  ,att13 eur_att13
05:59:18  18  ,att14 eur_att14
05:59:18  19  ,att15 eur_att15
05:59:18  20  ,att16 eur_att16
05:59:18  21  ,att17 eur_att17
05:59:18  22  ,att18 eur_att18
05:59:18  23  ,att19 eur_att19
05:59:18  24  ,att20 eur_att20
05:59:18  25  ,att21 eur_att21
05:59:18  26  ,att22 eur_att22
05:59:18  27  ,att23 eur_att23
05:59:18  28  ,att24 eur_att24
05:59:18  29  ,att25 eur_att25
05:59:18  30  ,att26 eur_att26
05:59:18  31  ,att27 eur_att27
05:59:18  32  ,att28 eur_att28
05:59:18  33  ,att29 eur_att29
05:59:18  34  ,att30 eur_att30
05:59:18  35  ,att31 eur_att31
05:59:18  36  ,att32 eur_att32
05:59:18  37  ,att33 eur_att33
05:59:18  38  ,att34 eur_att34
05:59:18  39  ,att35 eur_att35
05:59:18  40  ,att36 eur_att36
05:59:18  41  FROM q15
05:59:18  42  /

Table created.

Elapsed: 00:00:00.17
05:59:18 SQL> 
05:59:18 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.54
05:59:18 SQL> 
05:59:18 SQL> -- rpt
05:59:18 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     20359

Elapsed: 00:00:00.01
05:59:18 SQL> 
05:59:18 SQL> --
05:59:18 SQL> -- aud10.sql
05:59:18 SQL> --
05:59:18 SQL> 
05:59:18 SQL> -- Creates views and tables for backtesting a forex SVM strategy
05:59:18 SQL> 
05:59:18 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.88
05:59:19 SQL> 
05:59:19 SQL> -- I created di5min here:
05:59:19 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
05:59:19 SQL> 
05:59:19 SQL> CREATE OR REPLACE VIEW q11 AS
05:59:19   2  SELECT
05:59:19   3  pair
05:59:19   4  ,ydate
05:59:19   5  ,prdate
05:59:19   6  ,rownum rnum -- acts as t in my time-series
05:59:19   7  ,clse
05:59:19   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
05:59:19   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
05:59:19  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
05:59:19  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
05:59:19  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
05:59:19  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
05:59:19  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
05:59:19  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
05:59:19  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
05:59:19  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
05:59:19  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
05:59:19  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
05:59:19  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
05:59:19  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
05:59:19  22  FROM di5min WHERE pair LIKE'%aud%'
05:59:19  23  ORDER BY ydate
05:59:19  24  /

View created.

Elapsed: 00:00:00.06
05:59:19 SQL> 
05:59:19 SQL> -- rpt
05:59:19 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
aud_usd        20740

Elapsed: 00:00:00.36
05:59:20 SQL> 
05:59:20 SQL> -- Calc deltas and gains
05:59:20 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.25
05:59:20 SQL> 
05:59:20 SQL> CREATE TABLE q13 COMPRESS AS
05:59:20   2  SELECT
05:59:20   3  pair
05:59:20   4  ,ydate
05:59:20   5  ,prdate
05:59:20   6  ,rnum
05:59:20   7  ,ld8
05:59:20   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
05:59:20   9  -- step by 2
05:59:20  10  ,clse-lg6  d06
05:59:20  11  ,lg6 -lg8  d68
05:59:20  12  ,lg8 -lg10 d810
05:59:20  13  ,lg10-lg12 d1012
05:59:20  14  ,lg12-lg14 d1214
05:59:20  15  ,lg14-lg16 d1416
05:59:20  16  ,lg16-lg18 d1618
05:59:20  17  -- step by 4
05:59:20  18  ,lg6 -lg10 d610
05:59:20  19  ,lg8 -lg12 d812
05:59:20  20  ,lg10-lg14 d1014
05:59:20  21  ,lg12-lg16 d1216
05:59:20  22  --
05:59:20  23  ,ABS(clse-lg6 )dc6
05:59:20  24  ,ABS(clse-lg8 )dc8
05:59:20  25  ,ABS(clse-lg10)dc10
05:59:20  26  ,ABS(clse-lg12)dc12
05:59:20  27  ,ABS(clse-lg14)dc14
05:59:20  28  ,ABS(clse-lg16)dc16
05:59:20  29  ,ABS(clse-lg18)dc18
05:59:20  30  ,ABS(clse-lg20)dc20
05:59:20  31  ,ABS(clse-lg22)dc22
05:59:20  32  ,(ld8-clse) ug8
05:59:20  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
05:59:20  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
05:59:20  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
05:59:20  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
05:59:20  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
05:59:20  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
05:59:20  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
05:59:20  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
05:59:20  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
05:59:20  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
05:59:20  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
05:59:20  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
05:59:20  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
05:59:20  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
05:59:20  47  ,0+TO_CHAR(ydate,'D')d
05:59:20  48  ,0+TO_CHAR(ydate,'W')w
05:59:20  49  -- mpm stands for minutes-past-midnight:
05:59:20  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
05:59:20  51  FROM q11
05:59:20  52  -- I dont want any NULL values from the LAG() functions:
05:59:20  53  WHERE lg32 > 0
05:59:20  54  ORDER BY pair,ydate
05:59:20  55  /

Table created.

Elapsed: 00:00:01.75
05:59:22 SQL> 
05:59:22 SQL> -- rpt
05:59:22 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	   10810
	-1	    9546

Elapsed: 00:00:00.03
05:59:22 SQL> 
05:59:22 SQL> -- Calc gains and ntiles
05:59:22 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.13
05:59:22 SQL> CREATE TABLE q15 COMPRESS AS
05:59:22   2  SELECT
05:59:22   3  pair
05:59:22   4  ,ydate
05:59:22   5  ,prdate -- Should be unique
05:59:22   6  ,trend -- +1 or -1
05:59:22   7  -- Use NTILE() to derive some attributes
05:59:22   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
05:59:22   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
05:59:22  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
05:59:22  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
05:59:22  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
05:59:22  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
05:59:22  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
05:59:22  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
05:59:22  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
05:59:22  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
05:59:22  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
05:59:22  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
05:59:22  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
05:59:22  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
05:59:22  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
05:59:22  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
05:59:22  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
05:59:22  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
05:59:22  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
05:59:22  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
05:59:22  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
05:59:22  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
05:59:22  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
05:59:22  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
05:59:22  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
05:59:22  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
05:59:22  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
05:59:22  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
05:59:22  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
05:59:22  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
05:59:22  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
05:59:22  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
05:59:22  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
05:59:22  41  ,hh    att32
05:59:22  42  ,d     att33
05:59:22  43  ,w     att34
05:59:22  44  ,mpm   att35
05:59:22  45  ,trend att36
05:59:22  46  ,ug8 g8
05:59:22  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
05:59:22  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
05:59:22  49  FROM q13
05:59:22  50  ORDER BY pair,ydate
05:59:22  51  /

Table created.

Elapsed: 00:00:05.43
05:59:27 SQL> 
05:59:27 SQL> -- rpt
05:59:27 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
05:59:27   2  GROUP BY pair,trend,gatt,gattn
05:59:27   3  ORDER BY pair,trend,gatt,gattn
05:59:27   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
aud_usd 	-1 nup nup .000032548	    3549
aud_usd 	-1 nup up  -.00525835	    2519
aud_usd 	-1 up  nup .005173898	    3402
aud_usd 	-1			       0
aud_usd 	 1 nup nup  .00002192	    4343
aud_usd 	 1 nup up   -.0049956	    3068
aud_usd 	 1 up  nup .005093811	    3379
aud_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.04
05:59:27 SQL> 
05:59:27 SQL> -- rpt
05:59:27 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
aud_usd 2010-12-24 05:55:00

Elapsed: 00:00:00.01
05:59:27 SQL> 
05:59:27 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
05:59:28 SQL> CREATE TABLE modsrc COMPRESS AS
05:59:28   2  SELECT
05:59:28   3  pair
05:59:28   4  ,ydate
05:59:28   5  ,prdate
05:59:28   6  ,trend
05:59:28   7  ,g8
05:59:28   8  ,gatt
05:59:28   9  ,gattn
05:59:28  10  FROM q15
05:59:28  11  /

Table created.

Elapsed: 00:00:00.08
05:59:28 SQL> 
05:59:28 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
05:59:28 SQL> 
05:59:28 SQL> -- rpt
05:59:28 SQL> 
05:59:28 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20740

Elapsed: 00:00:00.35
05:59:28 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20356

Elapsed: 00:00:00.01
05:59:28 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20356

Elapsed: 00:00:00.00
05:59:28 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20356

Elapsed: 00:00:00.01
05:59:28 SQL> 
05:59:28 SQL> DROP   TABLE aud_ms10 ;

Table dropped.

Elapsed: 00:00:00.04
05:59:28 SQL> CREATE TABLE aud_ms10 COMPRESS AS
05:59:28   2  SELECT
05:59:28   3  ydate
05:59:28   4  ,trend aud_trend
05:59:28   5  ,g8    aud_g8
05:59:28   6  ,gatt  aud_gatt
05:59:28   7  ,gattn aud_gattn
05:59:28   8  FROM modsrc
05:59:28   9  /

Table created.

Elapsed: 00:00:00.06
05:59:28 SQL> 
05:59:28 SQL> ANALYZE TABLE aud_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.18
05:59:28 SQL> 
05:59:28 SQL> -- rpt
05:59:28 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 14:00:01 2010-12-24 00:05:00	10790	  -.0203      .0136
	-1 2010-09-16 15:15:01 2010-12-24 05:55:00	 9470	  -.0196      .0148

Elapsed: 00:00:00.02
05:59:28 SQL> SELECT aud_trend,MIN(ydate),MAX(ydate),COUNT(aud_trend),MIN(aud_g8),MAX(aud_g8)FROM aud_ms10 GROUP BY aud_trend;

 AUD_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(AUD_TREND) MIN(AUD_G8) MAX(AUD_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 14:00:01 2010-12-24 00:05:00	      10810	 -.0203       .0136
	-1 2010-09-16 15:15:01 2010-12-24 05:55:00	       9546	 -.0196       .0148

Elapsed: 00:00:00.01
05:59:29 SQL> 
05:59:29 SQL> -- I need a copy of q15 attributes
05:59:29 SQL> 
05:59:29 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.03
05:59:29 SQL> CREATE TABLE aud_att COMPRESS AS
05:59:29   2  SELECT
05:59:29   3  ydate
05:59:29   4  ,att00 aud_att00
05:59:29   5  ,att01 aud_att01
05:59:29   6  ,att02 aud_att02
05:59:29   7  ,att03 aud_att03
05:59:29   8  ,att04 aud_att04
05:59:29   9  ,att05 aud_att05
05:59:29  10  ,att06 aud_att06
05:59:29  11  ,att07 aud_att07
05:59:29  12  ,att08 aud_att08
05:59:29  13  ,att09 aud_att09
05:59:29  14  ,att10 aud_att10
05:59:29  15  ,att11 aud_att11
05:59:29  16  ,att12 aud_att12
05:59:29  17  ,att13 aud_att13
05:59:29  18  ,att14 aud_att14
05:59:29  19  ,att15 aud_att15
05:59:29  20  ,att16 aud_att16
05:59:29  21  ,att17 aud_att17
05:59:29  22  ,att18 aud_att18
05:59:29  23  ,att19 aud_att19
05:59:29  24  ,att20 aud_att20
05:59:29  25  ,att21 aud_att21
05:59:29  26  ,att22 aud_att22
05:59:29  27  ,att23 aud_att23
05:59:29  28  ,att24 aud_att24
05:59:29  29  ,att25 aud_att25
05:59:29  30  ,att26 aud_att26
05:59:29  31  ,att27 aud_att27
05:59:29  32  ,att28 aud_att28
05:59:29  33  ,att29 aud_att29
05:59:29  34  ,att30 aud_att30
05:59:29  35  ,att31 aud_att31
05:59:29  36  ,att32 aud_att32
05:59:29  37  ,att33 aud_att33
05:59:29  38  ,att34 aud_att34
05:59:29  39  ,att35 aud_att35
05:59:29  40  ,att36 aud_att36
05:59:29  41  FROM q15
05:59:29  42  /

Table created.

Elapsed: 00:00:00.17
05:59:29 SQL> 
05:59:29 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
05:59:29 SQL> 
05:59:29 SQL> -- rpt
05:59:29 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     20356

Elapsed: 00:00:00.01
05:59:29 SQL> 
05:59:29 SQL> --
05:59:29 SQL> -- gbp10.sql
05:59:29 SQL> --
05:59:29 SQL> 
05:59:29 SQL> -- Creates views and tables for backtesting a forex SVM strategy
05:59:29 SQL> 
05:59:29 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.32
05:59:30 SQL> 
05:59:30 SQL> -- I created di5min here:
05:59:30 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
05:59:30 SQL> 
05:59:30 SQL> CREATE OR REPLACE VIEW q11 AS
05:59:30   2  SELECT
05:59:30   3  pair
05:59:30   4  ,ydate
05:59:30   5  ,prdate
05:59:30   6  ,rownum rnum -- acts as t in my time-series
05:59:30   7  ,clse
05:59:30   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
05:59:30   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
05:59:30  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
05:59:30  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
05:59:30  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
05:59:30  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
05:59:30  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
05:59:30  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
05:59:30  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
05:59:30  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
05:59:30  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
05:59:30  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
05:59:30  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
05:59:30  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
05:59:30  22  FROM di5min WHERE pair LIKE'%gbp%'
05:59:30  23  ORDER BY ydate
05:59:30  24  /

View created.

Elapsed: 00:00:00.05
05:59:30 SQL> 
05:59:30 SQL> -- rpt
05:59:30 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
gbp_usd        20742

Elapsed: 00:00:00.35
05:59:30 SQL> 
05:59:30 SQL> -- Calc deltas and gains
05:59:30 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.26
05:59:30 SQL> 
05:59:30 SQL> CREATE TABLE q13 COMPRESS AS
05:59:30   2  SELECT
05:59:30   3  pair
05:59:30   4  ,ydate
05:59:30   5  ,prdate
05:59:30   6  ,rnum
05:59:30   7  ,ld8
05:59:30   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
05:59:30   9  -- step by 2
05:59:30  10  ,clse-lg6  d06
05:59:30  11  ,lg6 -lg8  d68
05:59:30  12  ,lg8 -lg10 d810
05:59:30  13  ,lg10-lg12 d1012
05:59:30  14  ,lg12-lg14 d1214
05:59:30  15  ,lg14-lg16 d1416
05:59:30  16  ,lg16-lg18 d1618
05:59:30  17  -- step by 4
05:59:30  18  ,lg6 -lg10 d610
05:59:30  19  ,lg8 -lg12 d812
05:59:30  20  ,lg10-lg14 d1014
05:59:30  21  ,lg12-lg16 d1216
05:59:30  22  --
05:59:30  23  ,ABS(clse-lg6 )dc6
05:59:30  24  ,ABS(clse-lg8 )dc8
05:59:30  25  ,ABS(clse-lg10)dc10
05:59:30  26  ,ABS(clse-lg12)dc12
05:59:30  27  ,ABS(clse-lg14)dc14
05:59:30  28  ,ABS(clse-lg16)dc16
05:59:30  29  ,ABS(clse-lg18)dc18
05:59:30  30  ,ABS(clse-lg20)dc20
05:59:30  31  ,ABS(clse-lg22)dc22
05:59:30  32  ,(ld8-clse) ug8
05:59:30  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
05:59:30  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
05:59:30  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
05:59:30  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
05:59:30  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
05:59:30  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
05:59:30  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
05:59:30  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
05:59:30  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
05:59:30  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
05:59:30  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
05:59:30  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
05:59:30  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
05:59:30  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
05:59:30  47  ,0+TO_CHAR(ydate,'D')d
05:59:30  48  ,0+TO_CHAR(ydate,'W')w
05:59:30  49  -- mpm stands for minutes-past-midnight:
05:59:30  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
05:59:30  51  FROM q11
05:59:30  52  -- I dont want any NULL values from the LAG() functions:
05:59:30  53  WHERE lg32 > 0
05:59:30  54  ORDER BY pair,ydate
05:59:30  55  /

Table created.

Elapsed: 00:00:01.83
05:59:32 SQL> 
05:59:32 SQL> -- rpt
05:59:32 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9983
	-1	   10375

Elapsed: 00:00:00.03
05:59:32 SQL> 
05:59:32 SQL> -- Calc gains and ntiles
05:59:32 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.23
05:59:32 SQL> CREATE TABLE q15 COMPRESS AS
05:59:32   2  SELECT
05:59:32   3  pair
05:59:32   4  ,ydate
05:59:32   5  ,prdate -- Should be unique
05:59:32   6  ,trend -- +1 or -1
05:59:32   7  -- Use NTILE() to derive some attributes
05:59:32   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
05:59:32   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
05:59:32  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
05:59:32  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
05:59:32  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
05:59:32  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
05:59:32  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
05:59:32  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
05:59:32  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
05:59:32  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
05:59:32  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
05:59:32  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
05:59:32  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
05:59:32  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
05:59:32  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
05:59:32  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
05:59:32  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
05:59:32  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
05:59:32  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
05:59:32  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
05:59:32  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
05:59:32  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
05:59:32  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
05:59:32  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
05:59:32  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
05:59:32  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
05:59:32  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
05:59:32  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
05:59:32  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
05:59:32  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
05:59:32  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
05:59:32  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
05:59:32  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
05:59:32  41  ,hh    att32
05:59:32  42  ,d     att33
05:59:32  43  ,w     att34
05:59:32  44  ,mpm   att35
05:59:32  45  ,trend att36
05:59:32  46  ,ug8 g8
05:59:32  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
05:59:32  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
05:59:32  49  FROM q13
05:59:32  50  ORDER BY pair,ydate
05:59:32  51  /

Table created.

Elapsed: 00:00:05.48
05:59:38 SQL> 
05:59:38 SQL> -- rpt
05:59:38 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
05:59:38   2  GROUP BY pair,trend,gatt,gattn
05:59:38   3  ORDER BY pair,trend,gatt,gattn
05:59:38   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
gbp_usd 	-1 nup nup .000093646	    3840
gbp_usd 	-1 nup up   -.0059004	    3270
gbp_usd 	-1 up  nup .005469304	    3259
gbp_usd 	-1			       0
gbp_usd 	 1 nup nup -.00008121	    3656
gbp_usd 	 1 nup up  -.00554744	    3271
gbp_usd 	 1 up  nup   .0059816	    2966
gbp_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
05:59:38 SQL> 
05:59:38 SQL> -- rpt
05:59:38 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
gbp_usd 2010-12-24 05:55:00

Elapsed: 00:00:00.01
05:59:38 SQL> 
05:59:38 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.14
05:59:38 SQL> CREATE TABLE modsrc COMPRESS AS
05:59:38   2  SELECT
05:59:38   3  pair
05:59:38   4  ,ydate
05:59:38   5  ,prdate
05:59:38   6  ,trend
05:59:38   7  ,g8
05:59:38   8  ,gatt
05:59:38   9  ,gattn
05:59:38  10  FROM q15
05:59:38  11  /

Table created.

Elapsed: 00:00:00.08
05:59:38 SQL> 
05:59:38 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
05:59:38 SQL> 
05:59:38 SQL> -- rpt
05:59:38 SQL> 
05:59:38 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20742

Elapsed: 00:00:00.35
05:59:39 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.01
05:59:39 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.01
05:59:39 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.00
05:59:39 SQL> 
05:59:39 SQL> DROP   TABLE gbp_ms10 ;

Table dropped.

Elapsed: 00:00:00.04
05:59:39 SQL> CREATE TABLE gbp_ms10 COMPRESS AS
05:59:39   2  SELECT
05:59:39   3  ydate
05:59:39   4  ,trend gbp_trend
05:59:39   5  ,g8    gbp_g8
05:59:39   6  ,gatt  gbp_gatt
05:59:39   7  ,gattn gbp_gattn
05:59:39   8  FROM modsrc
05:59:39   9  /

Table created.

Elapsed: 00:00:00.13
05:59:39 SQL> 
05:59:39 SQL> ANALYZE TABLE gbp_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
05:59:39 SQL> 
05:59:39 SQL> -- rpt
05:59:39 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 14:00:01 2010-12-24 05:55:00	 9893	  -.0231       .019
	-1 2010-09-16 15:25:01 2010-12-24 05:40:00	10369	    -.02      .0204

Elapsed: 00:00:00.01
05:59:39 SQL> SELECT gbp_trend,MIN(ydate),MAX(ydate),COUNT(gbp_trend),MIN(gbp_g8),MAX(gbp_g8)FROM gbp_ms10 GROUP BY gbp_trend;

 GBP_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(GBP_TREND) MIN(GBP_G8) MAX(GBP_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 14:00:01 2010-12-24 05:55:00	       9983	 -.0231        .019
	-1 2010-09-16 15:25:01 2010-12-24 05:40:00	      10375	   -.02       .0204

Elapsed: 00:00:00.02
05:59:39 SQL> 
05:59:39 SQL> -- I need a copy of q15 attributes
05:59:39 SQL> 
05:59:39 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.03
05:59:39 SQL> CREATE TABLE gbp_att COMPRESS AS
05:59:39   2  SELECT
05:59:39   3  ydate
05:59:39   4  ,att00 gbp_att00
05:59:39   5  ,att01 gbp_att01
05:59:39   6  ,att02 gbp_att02
05:59:39   7  ,att03 gbp_att03
05:59:39   8  ,att04 gbp_att04
05:59:39   9  ,att05 gbp_att05
05:59:39  10  ,att06 gbp_att06
05:59:39  11  ,att07 gbp_att07
05:59:39  12  ,att08 gbp_att08
05:59:39  13  ,att09 gbp_att09
05:59:39  14  ,att10 gbp_att10
05:59:39  15  ,att11 gbp_att11
05:59:39  16  ,att12 gbp_att12
05:59:39  17  ,att13 gbp_att13
05:59:39  18  ,att14 gbp_att14
05:59:39  19  ,att15 gbp_att15
05:59:39  20  ,att16 gbp_att16
05:59:39  21  ,att17 gbp_att17
05:59:39  22  ,att18 gbp_att18
05:59:39  23  ,att19 gbp_att19
05:59:39  24  ,att20 gbp_att20
05:59:39  25  ,att21 gbp_att21
05:59:39  26  ,att22 gbp_att22
05:59:39  27  ,att23 gbp_att23
05:59:39  28  ,att24 gbp_att24
05:59:39  29  ,att25 gbp_att25
05:59:39  30  ,att26 gbp_att26
05:59:39  31  ,att27 gbp_att27
05:59:39  32  ,att28 gbp_att28
05:59:39  33  ,att29 gbp_att29
05:59:39  34  ,att30 gbp_att30
05:59:39  35  ,att31 gbp_att31
05:59:39  36  ,att32 gbp_att32
05:59:39  37  ,att33 gbp_att33
05:59:39  38  ,att34 gbp_att34
05:59:39  39  ,att35 gbp_att35
05:59:39  40  ,att36 gbp_att36
05:59:39  41  FROM q15
05:59:39  42  /

Table created.

Elapsed: 00:00:00.21
05:59:39 SQL> 
05:59:39 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.49
05:59:40 SQL> 
05:59:40 SQL> -- rpt
05:59:40 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     20358

Elapsed: 00:00:00.01
05:59:40 SQL> 
05:59:40 SQL> --
05:59:40 SQL> -- jpy10.sql
05:59:40 SQL> --
05:59:40 SQL> 
05:59:40 SQL> -- Creates views and tables for backtesting a forex SVM strategy
05:59:40 SQL> 
05:59:40 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.32
05:59:40 SQL> 
05:59:40 SQL> -- I created di5min here:
05:59:40 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
05:59:40 SQL> 
05:59:40 SQL> CREATE OR REPLACE VIEW q11 AS
05:59:40   2  SELECT
05:59:40   3  pair
05:59:40   4  ,ydate
05:59:40   5  ,prdate
05:59:40   6  ,rownum rnum -- acts as t in my time-series
05:59:40   7  ,clse
05:59:40   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
05:59:40   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
05:59:40  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
05:59:40  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
05:59:40  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
05:59:40  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
05:59:40  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
05:59:40  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
05:59:40  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
05:59:40  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
05:59:40  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
05:59:40  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
05:59:40  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
05:59:40  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
05:59:40  22  FROM di5min WHERE pair LIKE'%jpy%'
05:59:40  23  ORDER BY ydate
05:59:40  24  /

View created.

Elapsed: 00:00:00.03
05:59:40 SQL> 
05:59:40 SQL> -- rpt
05:59:40 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_jpy        20741

Elapsed: 00:00:00.37
05:59:40 SQL> 
05:59:40 SQL> -- Calc deltas and gains
05:59:40 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.22
05:59:41 SQL> 
05:59:41 SQL> CREATE TABLE q13 COMPRESS AS
05:59:41   2  SELECT
05:59:41   3  pair
05:59:41   4  ,ydate
05:59:41   5  ,prdate
05:59:41   6  ,rnum
05:59:41   7  ,ld8
05:59:41   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
05:59:41   9  -- step by 2
05:59:41  10  ,clse-lg6  d06
05:59:41  11  ,lg6 -lg8  d68
05:59:41  12  ,lg8 -lg10 d810
05:59:41  13  ,lg10-lg12 d1012
05:59:41  14  ,lg12-lg14 d1214
05:59:41  15  ,lg14-lg16 d1416
05:59:41  16  ,lg16-lg18 d1618
05:59:41  17  -- step by 4
05:59:41  18  ,lg6 -lg10 d610
05:59:41  19  ,lg8 -lg12 d812
05:59:41  20  ,lg10-lg14 d1014
05:59:41  21  ,lg12-lg16 d1216
05:59:41  22  --
05:59:41  23  ,ABS(clse-lg6 )dc6
05:59:41  24  ,ABS(clse-lg8 )dc8
05:59:41  25  ,ABS(clse-lg10)dc10
05:59:41  26  ,ABS(clse-lg12)dc12
05:59:41  27  ,ABS(clse-lg14)dc14
05:59:41  28  ,ABS(clse-lg16)dc16
05:59:41  29  ,ABS(clse-lg18)dc18
05:59:41  30  ,ABS(clse-lg20)dc20
05:59:41  31  ,ABS(clse-lg22)dc22
05:59:41  32  ,(ld8-clse) ug8
05:59:41  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
05:59:41  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
05:59:41  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
05:59:41  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
05:59:41  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
05:59:41  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
05:59:41  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
05:59:41  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
05:59:41  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
05:59:41  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
05:59:41  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
05:59:41  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
05:59:41  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
05:59:41  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
05:59:41  47  ,0+TO_CHAR(ydate,'D')d
05:59:41  48  ,0+TO_CHAR(ydate,'W')w
05:59:41  49  -- mpm stands for minutes-past-midnight:
05:59:41  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
05:59:41  51  FROM q11
05:59:41  52  -- I dont want any NULL values from the LAG() functions:
05:59:41  53  WHERE lg32 > 0
05:59:41  54  ORDER BY pair,ydate
05:59:41  55  /

Table created.

Elapsed: 00:00:01.66
05:59:42 SQL> 
05:59:42 SQL> -- rpt
05:59:42 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9422
	-1	   10935

Elapsed: 00:00:00.04
05:59:42 SQL> 
05:59:42 SQL> -- Calc gains and ntiles
05:59:42 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.19
05:59:43 SQL> CREATE TABLE q15 COMPRESS AS
05:59:43   2  SELECT
05:59:43   3  pair
05:59:43   4  ,ydate
05:59:43   5  ,prdate -- Should be unique
05:59:43   6  ,trend -- +1 or -1
05:59:43   7  -- Use NTILE() to derive some attributes
05:59:43   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
05:59:43   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
05:59:43  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
05:59:43  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
05:59:43  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
05:59:43  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
05:59:43  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
05:59:43  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
05:59:43  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
05:59:43  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
05:59:43  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
05:59:43  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
05:59:43  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
05:59:43  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
05:59:43  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
05:59:43  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
05:59:43  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
05:59:43  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
05:59:43  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
05:59:43  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
05:59:43  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
05:59:43  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
05:59:43  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
05:59:43  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
05:59:43  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
05:59:43  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
05:59:43  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
05:59:43  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
05:59:43  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
05:59:43  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
05:59:43  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
05:59:43  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
05:59:43  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
05:59:43  41  ,hh    att32
05:59:43  42  ,d     att33
05:59:43  43  ,w     att34
05:59:43  44  ,mpm   att35
05:59:43  45  ,trend att36
05:59:43  46  ,ug8 g8
05:59:43  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
05:59:43  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
05:59:43  49  FROM q13
05:59:43  50  ORDER BY pair,ydate
05:59:43  51  /

Table created.

Elapsed: 00:00:05.52
05:59:48 SQL> 
05:59:48 SQL> -- rpt
05:59:48 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
05:59:48   2  GROUP BY pair,trend,gatt,gattn
05:59:48   3  ORDER BY pair,trend,gatt,gattn
05:59:48   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_jpy 	-1 nup nup -7.437E-06	     168
usd_jpy 	-1 nup up  -.18455894	    5515
usd_jpy 	-1 up  nup .179778751	    5226
usd_jpy 	-1			       0
usd_jpy 	 1 nup nup	    0	     118
usd_jpy 	 1 nup up   -.1887478	    5135
usd_jpy 	 1 up  nup .191794034	    4099
usd_jpy 	 1			       0

8 rows selected.

Elapsed: 00:00:00.04
05:59:48 SQL> 
05:59:48 SQL> -- rpt
05:59:48 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_jpy 2010-12-24 05:55:00

Elapsed: 00:00:00.01
05:59:48 SQL> 
05:59:48 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
05:59:48 SQL> CREATE TABLE modsrc COMPRESS AS
05:59:48   2  SELECT
05:59:48   3  pair
05:59:48   4  ,ydate
05:59:48   5  ,prdate
05:59:48   6  ,trend
05:59:48   7  ,g8
05:59:48   8  ,gatt
05:59:48   9  ,gattn
05:59:48  10  FROM q15
05:59:48  11  /

Table created.

Elapsed: 00:00:00.09
05:59:48 SQL> 
05:59:48 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.23
05:59:49 SQL> 
05:59:49 SQL> -- rpt
05:59:49 SQL> 
05:59:49 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20741

Elapsed: 00:00:00.34
05:59:49 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20357

Elapsed: 00:00:00.01
05:59:49 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20357

Elapsed: 00:00:00.00
05:59:49 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20357

Elapsed: 00:00:00.00
05:59:49 SQL> 
05:59:49 SQL> DROP   TABLE jpy_ms10 ;

Table dropped.

Elapsed: 00:00:00.05
05:59:49 SQL> CREATE TABLE jpy_ms10 COMPRESS AS
05:59:49   2  SELECT
05:59:49   3  ydate
05:59:49   4  ,trend jpy_trend
05:59:49   5  ,g8    jpy_g8
05:59:49   6  ,gatt  jpy_gatt
05:59:49   7  ,gattn jpy_gattn
05:59:49   8  FROM modsrc
05:59:49   9  /

Table created.

Elapsed: 00:00:00.07
05:59:49 SQL> 
05:59:49 SQL> ANALYZE TABLE jpy_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
05:59:49 SQL> 
05:59:49 SQL> -- rpt
05:59:49 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 14:00:01 2010-12-24 05:55:00	 9352	  -1.185	  1
	-1 2010-09-17 00:15:01 2010-12-24 00:05:00	10909	 -1.0575       1.32

Elapsed: 00:00:00.02
05:59:49 SQL> SELECT jpy_trend,MIN(ydate),MAX(ydate),COUNT(jpy_trend),MIN(jpy_g8),MAX(jpy_g8)FROM jpy_ms10 GROUP BY jpy_trend;

 JPY_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(JPY_TREND) MIN(JPY_G8) MAX(JPY_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 14:00:01 2010-12-24 05:55:00	       9422	 -1.185 	  1
	-1 2010-09-17 00:15:01 2010-12-24 00:05:00	      10935	-1.0575        1.32

Elapsed: 00:00:00.01
05:59:49 SQL> 
05:59:49 SQL> -- I need a copy of q15 attributes
05:59:49 SQL> 
05:59:49 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.05
05:59:49 SQL> CREATE TABLE jpy_att COMPRESS AS
05:59:49   2  SELECT
05:59:49   3  ydate
05:59:49   4  ,att00 jpy_att00
05:59:49   5  ,att01 jpy_att01
05:59:49   6  ,att02 jpy_att02
05:59:49   7  ,att03 jpy_att03
05:59:49   8  ,att04 jpy_att04
05:59:49   9  ,att05 jpy_att05
05:59:49  10  ,att06 jpy_att06
05:59:49  11  ,att07 jpy_att07
05:59:49  12  ,att08 jpy_att08
05:59:49  13  ,att09 jpy_att09
05:59:49  14  ,att10 jpy_att10
05:59:49  15  ,att11 jpy_att11
05:59:49  16  ,att12 jpy_att12
05:59:49  17  ,att13 jpy_att13
05:59:49  18  ,att14 jpy_att14
05:59:49  19  ,att15 jpy_att15
05:59:49  20  ,att16 jpy_att16
05:59:49  21  ,att17 jpy_att17
05:59:49  22  ,att18 jpy_att18
05:59:49  23  ,att19 jpy_att19
05:59:49  24  ,att20 jpy_att20
05:59:49  25  ,att21 jpy_att21
05:59:49  26  ,att22 jpy_att22
05:59:49  27  ,att23 jpy_att23
05:59:49  28  ,att24 jpy_att24
05:59:49  29  ,att25 jpy_att25
05:59:49  30  ,att26 jpy_att26
05:59:49  31  ,att27 jpy_att27
05:59:49  32  ,att28 jpy_att28
05:59:49  33  ,att29 jpy_att29
05:59:49  34  ,att30 jpy_att30
05:59:49  35  ,att31 jpy_att31
05:59:49  36  ,att32 jpy_att32
05:59:49  37  ,att33 jpy_att33
05:59:49  38  ,att34 jpy_att34
05:59:49  39  ,att35 jpy_att35
05:59:49  40  ,att36 jpy_att36
05:59:49  41  FROM q15
05:59:49  42  /

Table created.

Elapsed: 00:00:00.17
05:59:49 SQL> 
05:59:49 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
05:59:50 SQL> 
05:59:50 SQL> -- rpt
05:59:50 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     20357

Elapsed: 00:00:00.00
05:59:50 SQL> 
05:59:50 SQL> --
05:59:50 SQL> -- cad10.sql
05:59:50 SQL> --
05:59:50 SQL> 
05:59:50 SQL> -- Creates views and tables for backtesting a forex SVM strategy
05:59:50 SQL> 
05:59:50 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.32
05:59:50 SQL> 
05:59:50 SQL> -- I created di5min here:
05:59:50 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
05:59:50 SQL> 
05:59:50 SQL> CREATE OR REPLACE VIEW q11 AS
05:59:50   2  SELECT
05:59:50   3  pair
05:59:50   4  ,ydate
05:59:50   5  ,prdate
05:59:50   6  ,rownum rnum -- acts as t in my time-series
05:59:50   7  ,clse
05:59:50   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
05:59:50   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
05:59:50  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
05:59:50  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
05:59:50  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
05:59:50  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
05:59:50  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
05:59:50  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
05:59:50  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
05:59:50  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
05:59:50  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
05:59:50  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
05:59:50  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
05:59:50  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
05:59:50  22  FROM di5min WHERE pair LIKE'%cad%'
05:59:50  23  ORDER BY ydate
05:59:50  24  /

View created.

Elapsed: 00:00:00.05
05:59:50 SQL> 
05:59:50 SQL> -- rpt
05:59:50 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_cad        20739

Elapsed: 00:00:00.34
05:59:51 SQL> 
05:59:51 SQL> -- Calc deltas and gains
05:59:51 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.18
05:59:51 SQL> 
05:59:51 SQL> CREATE TABLE q13 COMPRESS AS
05:59:51   2  SELECT
05:59:51   3  pair
05:59:51   4  ,ydate
05:59:51   5  ,prdate
05:59:51   6  ,rnum
05:59:51   7  ,ld8
05:59:51   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
05:59:51   9  -- step by 2
05:59:51  10  ,clse-lg6  d06
05:59:51  11  ,lg6 -lg8  d68
05:59:51  12  ,lg8 -lg10 d810
05:59:51  13  ,lg10-lg12 d1012
05:59:51  14  ,lg12-lg14 d1214
05:59:51  15  ,lg14-lg16 d1416
05:59:51  16  ,lg16-lg18 d1618
05:59:51  17  -- step by 4
05:59:51  18  ,lg6 -lg10 d610
05:59:51  19  ,lg8 -lg12 d812
05:59:51  20  ,lg10-lg14 d1014
05:59:51  21  ,lg12-lg16 d1216
05:59:51  22  --
05:59:51  23  ,ABS(clse-lg6 )dc6
05:59:51  24  ,ABS(clse-lg8 )dc8
05:59:51  25  ,ABS(clse-lg10)dc10
05:59:51  26  ,ABS(clse-lg12)dc12
05:59:51  27  ,ABS(clse-lg14)dc14
05:59:51  28  ,ABS(clse-lg16)dc16
05:59:51  29  ,ABS(clse-lg18)dc18
05:59:51  30  ,ABS(clse-lg20)dc20
05:59:51  31  ,ABS(clse-lg22)dc22
05:59:51  32  ,(ld8-clse) ug8
05:59:51  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
05:59:51  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
05:59:51  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
05:59:51  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
05:59:51  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
05:59:51  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
05:59:51  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
05:59:51  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
05:59:51  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
05:59:51  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
05:59:51  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
05:59:51  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
05:59:51  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
05:59:51  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
05:59:51  47  ,0+TO_CHAR(ydate,'D')d
05:59:51  48  ,0+TO_CHAR(ydate,'W')w
05:59:51  49  -- mpm stands for minutes-past-midnight:
05:59:51  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
05:59:51  51  FROM q11
05:59:51  52  -- I dont want any NULL values from the LAG() functions:
05:59:51  53  WHERE lg32 > 0
05:59:51  54  ORDER BY pair,ydate
05:59:51  55  /

Table created.

Elapsed: 00:00:01.70
05:59:52 SQL> 
05:59:52 SQL> -- rpt
05:59:52 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9419
	-1	   10936

Elapsed: 00:00:00.03
05:59:53 SQL> 
05:59:53 SQL> -- Calc gains and ntiles
05:59:53 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.12
05:59:53 SQL> CREATE TABLE q15 COMPRESS AS
05:59:53   2  SELECT
05:59:53   3  pair
05:59:53   4  ,ydate
05:59:53   5  ,prdate -- Should be unique
05:59:53   6  ,trend -- +1 or -1
05:59:53   7  -- Use NTILE() to derive some attributes
05:59:53   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
05:59:53   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
05:59:53  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
05:59:53  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
05:59:53  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
05:59:53  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
05:59:53  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
05:59:53  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
05:59:53  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
05:59:53  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
05:59:53  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
05:59:53  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
05:59:53  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
05:59:53  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
05:59:53  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
05:59:53  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
05:59:53  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
05:59:53  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
05:59:53  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
05:59:53  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
05:59:53  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
05:59:53  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
05:59:53  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
05:59:53  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
05:59:53  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
05:59:53  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
05:59:53  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
05:59:53  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
05:59:53  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
05:59:53  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
05:59:53  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
05:59:53  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
05:59:53  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
05:59:53  41  ,hh    att32
05:59:53  42  ,d     att33
05:59:53  43  ,w     att34
05:59:53  44  ,mpm   att35
05:59:53  45  ,trend att36
05:59:53  46  ,ug8 g8
05:59:53  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
05:59:53  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
05:59:53  49  FROM q13
05:59:53  50  ORDER BY pair,ydate
05:59:53  51  /

Table created.

Elapsed: 00:00:05.46
05:59:58 SQL> 
05:59:58 SQL> -- rpt
05:59:58 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
05:59:58   2  GROUP BY pair,trend,gatt,gattn
05:59:58   3  ORDER BY pair,trend,gatt,gattn
05:59:58   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_cad 	-1 nup nup -.00002359	    5671
usd_cad 	-1 nup up  -.00400805	    2627
usd_cad 	-1 up  nup .004683694	    2565
usd_cad 	-1			       0
usd_cad 	 1 nup nup -.00011729	    4660
usd_cad 	 1 nup up  -.00422802	    2754
usd_cad 	 1 up  nup .004613081	    1982
usd_cad 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
05:59:58 SQL> 
05:59:58 SQL> -- rpt
05:59:58 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_cad 2010-12-24 05:55:00

Elapsed: 00:00:00.02
05:59:58 SQL> 
05:59:58 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.14
05:59:58 SQL> CREATE TABLE modsrc COMPRESS AS
05:59:58   2  SELECT
05:59:58   3  pair
05:59:58   4  ,ydate
05:59:58   5  ,prdate
05:59:58   6  ,trend
05:59:58   7  ,g8
05:59:58   8  ,gatt
05:59:58   9  ,gattn
05:59:58  10  FROM q15
05:59:58  11  /

Table created.

Elapsed: 00:00:00.08
05:59:58 SQL> 
05:59:58 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
05:59:59 SQL> 
05:59:59 SQL> -- rpt
05:59:59 SQL> 
05:59:59 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20739

Elapsed: 00:00:00.35
05:59:59 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20355

Elapsed: 00:00:00.00
05:59:59 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20355

Elapsed: 00:00:00.01
05:59:59 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20355

Elapsed: 00:00:00.00
05:59:59 SQL> 
05:59:59 SQL> DROP   TABLE cad_ms10 ;

Table dropped.

Elapsed: 00:00:00.04
05:59:59 SQL> CREATE TABLE cad_ms10 COMPRESS AS
05:59:59   2  SELECT
05:59:59   3  ydate
05:59:59   4  ,trend cad_trend
05:59:59   5  ,g8    cad_g8
05:59:59   6  ,gatt  cad_gatt
05:59:59   7  ,gattn cad_gattn
05:59:59   8  FROM modsrc
05:59:59   9  /

Table created.

Elapsed: 00:00:00.06
05:59:59 SQL> 
05:59:59 SQL> ANALYZE TABLE cad_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
05:59:59 SQL> 
05:59:59 SQL> -- rpt
05:59:59 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 14:30:01 2010-12-24 04:55:00	 9396	  -.0122      .0159
	-1 2010-09-16 14:00:01 2010-12-24 05:55:00	10863	 -.01105      .0176

Elapsed: 00:00:00.02
05:59:59 SQL> SELECT cad_trend,MIN(ydate),MAX(ydate),COUNT(cad_trend),MIN(cad_g8),MAX(cad_g8)FROM cad_ms10 GROUP BY cad_trend;

 CAD_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(CAD_TREND) MIN(CAD_G8) MAX(CAD_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 14:30:01 2010-12-24 04:55:00	       9419	 -.0122       .0159
	-1 2010-09-16 14:00:01 2010-12-24 05:55:00	      10936	-.01105       .0176

Elapsed: 00:00:00.01
05:59:59 SQL> 
05:59:59 SQL> -- I need a copy of q15 attributes
05:59:59 SQL> 
05:59:59 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.05
05:59:59 SQL> CREATE TABLE cad_att COMPRESS AS
05:59:59   2  SELECT
05:59:59   3  ydate
05:59:59   4  ,att00 cad_att00
05:59:59   5  ,att01 cad_att01
05:59:59   6  ,att02 cad_att02
05:59:59   7  ,att03 cad_att03
05:59:59   8  ,att04 cad_att04
05:59:59   9  ,att05 cad_att05
05:59:59  10  ,att06 cad_att06
05:59:59  11  ,att07 cad_att07
05:59:59  12  ,att08 cad_att08
05:59:59  13  ,att09 cad_att09
05:59:59  14  ,att10 cad_att10
05:59:59  15  ,att11 cad_att11
05:59:59  16  ,att12 cad_att12
05:59:59  17  ,att13 cad_att13
05:59:59  18  ,att14 cad_att14
05:59:59  19  ,att15 cad_att15
05:59:59  20  ,att16 cad_att16
05:59:59  21  ,att17 cad_att17
05:59:59  22  ,att18 cad_att18
05:59:59  23  ,att19 cad_att19
05:59:59  24  ,att20 cad_att20
05:59:59  25  ,att21 cad_att21
05:59:59  26  ,att22 cad_att22
05:59:59  27  ,att23 cad_att23
05:59:59  28  ,att24 cad_att24
05:59:59  29  ,att25 cad_att25
05:59:59  30  ,att26 cad_att26
05:59:59  31  ,att27 cad_att27
05:59:59  32  ,att28 cad_att28
05:59:59  33  ,att29 cad_att29
05:59:59  34  ,att30 cad_att30
05:59:59  35  ,att31 cad_att31
05:59:59  36  ,att32 cad_att32
05:59:59  37  ,att33 cad_att33
05:59:59  38  ,att34 cad_att34
05:59:59  39  ,att35 cad_att35
05:59:59  40  ,att36 cad_att36
05:59:59  41  FROM q15
05:59:59  42  /

Table created.

Elapsed: 00:00:00.17
05:59:59 SQL> 
05:59:59 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
06:00:00 SQL> 
06:00:00 SQL> -- rpt
06:00:00 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     20355

Elapsed: 00:00:00.01
06:00:00 SQL> 
06:00:00 SQL> --
06:00:00 SQL> -- chf10.sql
06:00:00 SQL> --
06:00:00 SQL> 
06:00:00 SQL> -- Creates views and tables for backtesting a forex SVM strategy
06:00:00 SQL> 
06:00:00 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.34
06:00:00 SQL> 
06:00:00 SQL> -- I created di5min here:
06:00:00 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
06:00:00 SQL> 
06:00:00 SQL> CREATE OR REPLACE VIEW q11 AS
06:00:00   2  SELECT
06:00:00   3  pair
06:00:00   4  ,ydate
06:00:00   5  ,prdate
06:00:00   6  ,rownum rnum -- acts as t in my time-series
06:00:00   7  ,clse
06:00:00   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
06:00:00   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
06:00:00  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
06:00:00  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
06:00:00  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
06:00:00  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
06:00:00  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
06:00:00  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
06:00:00  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
06:00:00  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
06:00:00  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
06:00:00  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
06:00:00  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
06:00:00  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
06:00:00  22  FROM di5min WHERE pair LIKE'%chf%'
06:00:00  23  ORDER BY ydate
06:00:00  24  /

View created.

Elapsed: 00:00:00.05
06:00:00 SQL> 
06:00:00 SQL> -- rpt
06:00:00 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_chf        20742

Elapsed: 00:00:00.35
06:00:01 SQL> 
06:00:01 SQL> -- Calc deltas and gains
06:00:01 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.25
06:00:01 SQL> 
06:00:01 SQL> CREATE TABLE q13 COMPRESS AS
06:00:01   2  SELECT
06:00:01   3  pair
06:00:01   4  ,ydate
06:00:01   5  ,prdate
06:00:01   6  ,rnum
06:00:01   7  ,ld8
06:00:01   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
06:00:01   9  -- step by 2
06:00:01  10  ,clse-lg6  d06
06:00:01  11  ,lg6 -lg8  d68
06:00:01  12  ,lg8 -lg10 d810
06:00:01  13  ,lg10-lg12 d1012
06:00:01  14  ,lg12-lg14 d1214
06:00:01  15  ,lg14-lg16 d1416
06:00:01  16  ,lg16-lg18 d1618
06:00:01  17  -- step by 4
06:00:01  18  ,lg6 -lg10 d610
06:00:01  19  ,lg8 -lg12 d812
06:00:01  20  ,lg10-lg14 d1014
06:00:01  21  ,lg12-lg16 d1216
06:00:01  22  --
06:00:01  23  ,ABS(clse-lg6 )dc6
06:00:01  24  ,ABS(clse-lg8 )dc8
06:00:01  25  ,ABS(clse-lg10)dc10
06:00:01  26  ,ABS(clse-lg12)dc12
06:00:01  27  ,ABS(clse-lg14)dc14
06:00:01  28  ,ABS(clse-lg16)dc16
06:00:01  29  ,ABS(clse-lg18)dc18
06:00:01  30  ,ABS(clse-lg20)dc20
06:00:01  31  ,ABS(clse-lg22)dc22
06:00:01  32  ,(ld8-clse) ug8
06:00:01  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
06:00:01  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
06:00:01  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
06:00:01  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
06:00:01  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
06:00:01  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
06:00:01  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
06:00:01  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
06:00:01  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
06:00:01  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
06:00:01  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
06:00:01  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
06:00:01  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
06:00:01  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
06:00:01  47  ,0+TO_CHAR(ydate,'D')d
06:00:01  48  ,0+TO_CHAR(ydate,'W')w
06:00:01  49  -- mpm stands for minutes-past-midnight:
06:00:01  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
06:00:01  51  FROM q11
06:00:01  52  -- I dont want any NULL values from the LAG() functions:
06:00:01  53  WHERE lg32 > 0
06:00:01  54  ORDER BY pair,ydate
06:00:01  55  /

Table created.

Elapsed: 00:00:01.74
06:00:03 SQL> 
06:00:03 SQL> -- rpt
06:00:03 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9573
	-1	   10785

Elapsed: 00:00:00.03
06:00:03 SQL> 
06:00:03 SQL> -- Calc gains and ntiles
06:00:03 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.13
06:00:03 SQL> CREATE TABLE q15 COMPRESS AS
06:00:03   2  SELECT
06:00:03   3  pair
06:00:03   4  ,ydate
06:00:03   5  ,prdate -- Should be unique
06:00:03   6  ,trend -- +1 or -1
06:00:03   7  -- Use NTILE() to derive some attributes
06:00:03   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
06:00:03   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
06:00:03  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
06:00:03  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
06:00:03  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
06:00:03  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
06:00:03  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
06:00:03  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
06:00:03  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
06:00:03  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
06:00:03  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
06:00:03  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
06:00:03  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
06:00:03  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
06:00:03  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
06:00:03  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
06:00:03  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
06:00:03  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
06:00:03  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
06:00:03  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
06:00:03  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
06:00:03  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
06:00:03  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
06:00:03  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
06:00:03  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
06:00:03  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
06:00:03  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
06:00:03  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
06:00:03  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
06:00:03  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
06:00:03  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
06:00:03  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
06:00:03  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
06:00:03  41  ,hh    att32
06:00:03  42  ,d     att33
06:00:03  43  ,w     att34
06:00:03  44  ,mpm   att35
06:00:03  45  ,trend att36
06:00:03  46  ,ug8 g8
06:00:03  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
06:00:03  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
06:00:03  49  FROM q13
06:00:03  50  ORDER BY pair,ydate
06:00:03  51  /

Table created.

Elapsed: 00:00:05.54
06:00:08 SQL> 
06:00:08 SQL> -- rpt
06:00:08 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
06:00:08   2  GROUP BY pair,trend,gatt,gattn
06:00:08   3  ORDER BY pair,trend,gatt,gattn
06:00:08   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_chf 	-1 nup nup .000025611	    4892
usd_chf 	-1 nup up  -.00495125	    3140
usd_chf 	-1 up  nup .005077328	    2658
usd_chf 	-1			       0
usd_chf 	 1 nup nup -.00001764	    4536
usd_chf 	 1 nup up  -.00452927	    2921
usd_chf 	 1 up  nup  .00462458	    2115
usd_chf 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
06:00:08 SQL> 
06:00:08 SQL> -- rpt
06:00:08 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_chf 2010-12-24 05:55:00

Elapsed: 00:00:00.02
06:00:08 SQL> 
06:00:08 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.24
06:00:09 SQL> CREATE TABLE modsrc COMPRESS AS
06:00:09   2  SELECT
06:00:09   3  pair
06:00:09   4  ,ydate
06:00:09   5  ,prdate
06:00:09   6  ,trend
06:00:09   7  ,g8
06:00:09   8  ,gatt
06:00:09   9  ,gattn
06:00:09  10  FROM q15
06:00:09  11  /

Table created.

Elapsed: 00:00:00.09
06:00:09 SQL> 
06:00:09 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.24
06:00:09 SQL> 
06:00:09 SQL> -- rpt
06:00:09 SQL> 
06:00:09 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20742

Elapsed: 00:00:00.35
06:00:09 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.00
06:00:09 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.01
06:00:09 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.00
06:00:09 SQL> 
06:00:09 SQL> DROP   TABLE chf_ms10 ;

Table dropped.

Elapsed: 00:00:00.05
06:00:09 SQL> CREATE TABLE chf_ms10 COMPRESS AS
06:00:09   2  SELECT
06:00:09   3  ydate
06:00:09   4  ,trend chf_trend
06:00:09   5  ,g8    chf_g8
06:00:09   6  ,gatt  chf_gatt
06:00:09   7  ,gattn chf_gattn
06:00:09   8  FROM modsrc
06:00:09   9  /

Table created.

Elapsed: 00:00:00.06
06:00:09 SQL> 
06:00:09 SQL> ANALYZE TABLE chf_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
06:00:10 SQL> 
06:00:10 SQL> -- rpt
06:00:10 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 14:00:01 2010-12-23 21:45:00	 9572	 -.01775      .0155
	-1 2010-09-16 20:55:01 2010-12-24 05:55:00	10690	 -.01825     .01545

Elapsed: 00:00:00.02
06:00:10 SQL> SELECT chf_trend,MIN(ydate),MAX(ydate),COUNT(chf_trend),MIN(chf_g8),MAX(chf_g8)FROM chf_ms10 GROUP BY chf_trend;

 CHF_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(CHF_TREND) MIN(CHF_G8) MAX(CHF_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 14:00:01 2010-12-23 21:45:00	       9573	-.01775       .0155
	-1 2010-09-16 20:55:01 2010-12-24 05:55:00	      10785	-.01825      .01545

Elapsed: 00:00:00.01
06:00:10 SQL> 
06:00:10 SQL> -- I need a copy of q15 attributes
06:00:10 SQL> 
06:00:10 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.04
06:00:10 SQL> CREATE TABLE chf_att COMPRESS AS
06:00:10   2  SELECT
06:00:10   3  ydate
06:00:10   4  ,att00 chf_att00
06:00:10   5  ,att01 chf_att01
06:00:10   6  ,att02 chf_att02
06:00:10   7  ,att03 chf_att03
06:00:10   8  ,att04 chf_att04
06:00:10   9  ,att05 chf_att05
06:00:10  10  ,att06 chf_att06
06:00:10  11  ,att07 chf_att07
06:00:10  12  ,att08 chf_att08
06:00:10  13  ,att09 chf_att09
06:00:10  14  ,att10 chf_att10
06:00:10  15  ,att11 chf_att11
06:00:10  16  ,att12 chf_att12
06:00:10  17  ,att13 chf_att13
06:00:10  18  ,att14 chf_att14
06:00:10  19  ,att15 chf_att15
06:00:10  20  ,att16 chf_att16
06:00:10  21  ,att17 chf_att17
06:00:10  22  ,att18 chf_att18
06:00:10  23  ,att19 chf_att19
06:00:10  24  ,att20 chf_att20
06:00:10  25  ,att21 chf_att21
06:00:10  26  ,att22 chf_att22
06:00:10  27  ,att23 chf_att23
06:00:10  28  ,att24 chf_att24
06:00:10  29  ,att25 chf_att25
06:00:10  30  ,att26 chf_att26
06:00:10  31  ,att27 chf_att27
06:00:10  32  ,att28 chf_att28
06:00:10  33  ,att29 chf_att29
06:00:10  34  ,att30 chf_att30
06:00:10  35  ,att31 chf_att31
06:00:10  36  ,att32 chf_att32
06:00:10  37  ,att33 chf_att33
06:00:10  38  ,att34 chf_att34
06:00:10  39  ,att35 chf_att35
06:00:10  40  ,att36 chf_att36
06:00:10  41  FROM q15
06:00:10  42  /

Table created.

Elapsed: 00:00:00.18
06:00:10 SQL> 
06:00:10 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
06:00:10 SQL> 
06:00:10 SQL> -- rpt
06:00:10 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     20358

Elapsed: 00:00:00.00
06:00:10 SQL> 
06:00:10 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
