
SQL*Plus: Release 11.2.0.1.0 Production on Wed Dec 22 19:53:28 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

19:53:28 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
19:53:28 SQL> 19:53:28 SQL> --
19:53:28 SQL> -- eur10.sql
19:53:28 SQL> --
19:53:28 SQL> 
19:53:28 SQL> -- Creates views and tables for backtesting a forex SVM strategy
19:53:28 SQL> 
19:53:28 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.03
19:53:28 SQL> 
19:53:28 SQL> -- I created di5min here:
19:53:28 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
19:53:28 SQL> 
19:53:28 SQL> CREATE OR REPLACE VIEW q11 AS
19:53:28   2  SELECT
19:53:28   3  pair
19:53:28   4  ,ydate
19:53:28   5  ,prdate
19:53:28   6  ,rownum rnum -- acts as t in my time-series
19:53:28   7  ,clse
19:53:28   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
19:53:28   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
19:53:28  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
19:53:28  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
19:53:28  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
19:53:28  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
19:53:28  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
19:53:28  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
19:53:28  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
19:53:28  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
19:53:28  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
19:53:28  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
19:53:28  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
19:53:28  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
19:53:28  22  FROM di5min WHERE pair LIKE'%eur%'
19:53:28  23  ORDER BY ydate
19:53:28  24  /

View created.

Elapsed: 00:00:00.10
19:53:28 SQL> 
19:53:28 SQL> -- rpt
19:53:28 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
eur_usd        20774

Elapsed: 00:00:00.36
19:53:29 SQL> 
19:53:29 SQL> -- Calc deltas and gains
19:53:29 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.08
19:53:29 SQL> 
19:53:29 SQL> CREATE TABLE q13 COMPRESS AS
19:53:29   2  SELECT
19:53:29   3  pair
19:53:29   4  ,ydate
19:53:29   5  ,prdate
19:53:29   6  ,rnum
19:53:29   7  ,ld8
19:53:29   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
19:53:29   9  -- step by 2
19:53:29  10  ,clse-lg6  d06
19:53:29  11  ,lg6 -lg8  d68
19:53:29  12  ,lg8 -lg10 d810
19:53:29  13  ,lg10-lg12 d1012
19:53:29  14  ,lg12-lg14 d1214
19:53:29  15  ,lg14-lg16 d1416
19:53:29  16  ,lg16-lg18 d1618
19:53:29  17  -- step by 4
19:53:29  18  ,lg6 -lg10 d610
19:53:29  19  ,lg8 -lg12 d812
19:53:29  20  ,lg10-lg14 d1014
19:53:29  21  ,lg12-lg16 d1216
19:53:29  22  --
19:53:29  23  ,ABS(clse-lg6 )dc6
19:53:29  24  ,ABS(clse-lg8 )dc8
19:53:29  25  ,ABS(clse-lg10)dc10
19:53:29  26  ,ABS(clse-lg12)dc12
19:53:29  27  ,ABS(clse-lg14)dc14
19:53:29  28  ,ABS(clse-lg16)dc16
19:53:29  29  ,ABS(clse-lg18)dc18
19:53:29  30  ,ABS(clse-lg20)dc20
19:53:29  31  ,ABS(clse-lg22)dc22
19:53:29  32  ,(ld8-clse) ug8
19:53:29  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
19:53:29  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
19:53:29  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
19:53:29  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
19:53:29  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
19:53:29  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
19:53:29  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
19:53:29  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
19:53:29  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
19:53:29  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
19:53:29  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
19:53:29  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
19:53:29  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
19:53:29  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
19:53:29  47  ,0+TO_CHAR(ydate,'D')d
19:53:29  48  ,0+TO_CHAR(ydate,'W')w
19:53:29  49  -- mpm stands for minutes-past-midnight:
19:53:29  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
19:53:29  51  FROM q11
19:53:29  52  -- I dont want any NULL values from the LAG() functions:
19:53:29  53  WHERE lg32 > 0
19:53:29  54  ORDER BY pair,ydate
19:53:29  55  /

Table created.

Elapsed: 00:00:02.04
19:53:31 SQL> 
19:53:31 SQL> -- rpt
19:53:31 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	   10110
	-1	   10280

Elapsed: 00:00:00.03
19:53:31 SQL> 
19:53:31 SQL> -- Calc gains and ntiles
19:53:31 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.08
19:53:31 SQL> CREATE TABLE q15 COMPRESS AS
19:53:31   2  SELECT
19:53:31   3  pair
19:53:31   4  ,ydate
19:53:31   5  ,prdate -- Should be unique
19:53:31   6  ,trend -- +1 or -1
19:53:31   7  -- Use NTILE() to derive some attributes
19:53:31   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
19:53:31   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
19:53:31  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
19:53:31  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
19:53:31  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
19:53:31  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
19:53:31  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
19:53:31  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
19:53:31  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
19:53:31  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
19:53:31  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
19:53:31  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
19:53:31  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
19:53:31  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
19:53:31  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
19:53:31  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
19:53:31  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
19:53:31  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
19:53:31  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
19:53:31  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
19:53:31  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
19:53:31  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
19:53:31  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
19:53:31  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
19:53:31  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
19:53:31  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
19:53:31  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
19:53:31  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
19:53:31  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
19:53:31  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
19:53:31  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
19:53:31  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
19:53:31  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
19:53:31  41  ,hh    att32
19:53:31  42  ,d     att33
19:53:31  43  ,w     att34
19:53:31  44  ,mpm   att35
19:53:31  45  ,trend att36
19:53:31  46  ,ug8 g8
19:53:31  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
19:53:31  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
19:53:31  49  FROM q13
19:53:31  50  ORDER BY pair,ydate
19:53:31  51  /

Table created.

Elapsed: 00:00:05.42
19:53:37 SQL> 
19:53:37 SQL> -- rpt
19:53:37 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
19:53:37   2  GROUP BY pair,trend,gatt,gattn
19:53:37   3  ORDER BY pair,trend,gatt,gattn
19:53:37   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
eur_usd 	-1 nup nup .000020067	    2985
eur_usd 	-1 nup up  -.00602526	    3653
eur_usd 	-1 up  nup .005874052	    3559
eur_usd 	-1			       0
eur_usd 	 1 nup nup -.00009523	    3006
eur_usd 	 1 nup up  -.00624336	    3434
eur_usd 	 1 up  nup .006551405	    3657
eur_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
19:53:37 SQL> 
19:53:37 SQL> -- rpt
19:53:37 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
eur_usd 2010-12-22 19:50:00

Elapsed: 00:00:00.02
19:53:37 SQL> 
19:53:37 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.10
19:53:37 SQL> CREATE TABLE modsrc COMPRESS AS
19:53:37   2  SELECT
19:53:37   3  pair
19:53:37   4  ,ydate
19:53:37   5  ,prdate
19:53:37   6  ,trend
19:53:37   7  ,g8
19:53:37   8  ,gatt
19:53:37   9  ,gattn
19:53:37  10  FROM q15
19:53:37  11  /

Table created.

Elapsed: 00:00:00.10
19:53:37 SQL> 
19:53:37 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
19:53:37 SQL> 
19:53:37 SQL> -- rpt
19:53:37 SQL> 
19:53:37 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20774

Elapsed: 00:00:00.35
19:53:37 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20390

Elapsed: 00:00:00.01
19:53:37 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20390

Elapsed: 00:00:00.00
19:53:37 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20390

Elapsed: 00:00:00.00
19:53:37 SQL> 
19:53:37 SQL> DROP   TABLE eur_ms10 ;

Table dropped.

Elapsed: 00:00:00.06
19:53:37 SQL> CREATE TABLE eur_ms10 COMPRESS AS
19:53:37   2  SELECT
19:53:37   3  ydate
19:53:37   4  ,trend eur_trend
19:53:37   5  ,g8    eur_g8
19:53:37   6  ,gatt  eur_gatt
19:53:37   7  ,gattn eur_gattn
19:53:37   8  FROM modsrc
19:53:37   9  /

Table created.

Elapsed: 00:00:00.07
19:53:37 SQL> 
19:53:37 SQL> ANALYZE TABLE eur_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.25
19:53:38 SQL> 
19:53:38 SQL> -- rpt
19:53:38 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-15 05:45:01 2010-12-22 12:55:00	10097	  -.0218     .02165
	-1 2010-09-15 03:55:01 2010-12-22 19:50:00	10197	 -.02085      .0196

Elapsed: 00:00:00.02
19:53:38 SQL> SELECT eur_trend,MIN(ydate),MAX(ydate),COUNT(eur_trend),MIN(eur_g8),MAX(eur_g8)FROM eur_ms10 GROUP BY eur_trend;

 EUR_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(EUR_TREND) MIN(EUR_G8) MAX(EUR_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-15 05:45:01 2010-12-22 12:55:00	      10110	 -.0218      .02165
	-1 2010-09-15 03:55:01 2010-12-22 19:50:00	      10280	-.02085       .0196

Elapsed: 00:00:00.01
19:53:38 SQL> 
19:53:38 SQL> -- I need a copy of q15 attributes
19:53:38 SQL> 
19:53:38 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.05
19:53:38 SQL> CREATE TABLE eur_att COMPRESS AS
19:53:38   2  SELECT
19:53:38   3  ydate
19:53:38   4  ,att00 eur_att00
19:53:38   5  ,att01 eur_att01
19:53:38   6  ,att02 eur_att02
19:53:38   7  ,att03 eur_att03
19:53:38   8  ,att04 eur_att04
19:53:38   9  ,att05 eur_att05
19:53:38  10  ,att06 eur_att06
19:53:38  11  ,att07 eur_att07
19:53:38  12  ,att08 eur_att08
19:53:38  13  ,att09 eur_att09
19:53:38  14  ,att10 eur_att10
19:53:38  15  ,att11 eur_att11
19:53:38  16  ,att12 eur_att12
19:53:38  17  ,att13 eur_att13
19:53:38  18  ,att14 eur_att14
19:53:38  19  ,att15 eur_att15
19:53:38  20  ,att16 eur_att16
19:53:38  21  ,att17 eur_att17
19:53:38  22  ,att18 eur_att18
19:53:38  23  ,att19 eur_att19
19:53:38  24  ,att20 eur_att20
19:53:38  25  ,att21 eur_att21
19:53:38  26  ,att22 eur_att22
19:53:38  27  ,att23 eur_att23
19:53:38  28  ,att24 eur_att24
19:53:38  29  ,att25 eur_att25
19:53:38  30  ,att26 eur_att26
19:53:38  31  ,att27 eur_att27
19:53:38  32  ,att28 eur_att28
19:53:38  33  ,att29 eur_att29
19:53:38  34  ,att30 eur_att30
19:53:38  35  ,att31 eur_att31
19:53:38  36  ,att32 eur_att32
19:53:38  37  ,att33 eur_att33
19:53:38  38  ,att34 eur_att34
19:53:38  39  ,att35 eur_att35
19:53:38  40  ,att36 eur_att36
19:53:38  41  FROM q15
19:53:38  42  /

Table created.

Elapsed: 00:00:00.18
19:53:38 SQL> 
19:53:38 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
19:53:38 SQL> 
19:53:38 SQL> -- rpt
19:53:38 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     20390

Elapsed: 00:00:00.01
19:53:38 SQL> 
19:53:38 SQL> --
19:53:38 SQL> -- aud10.sql
19:53:38 SQL> --
19:53:38 SQL> 
19:53:38 SQL> -- Creates views and tables for backtesting a forex SVM strategy
19:53:38 SQL> 
19:53:38 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.40
19:53:39 SQL> 
19:53:39 SQL> -- I created di5min here:
19:53:39 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
19:53:39 SQL> 
19:53:39 SQL> CREATE OR REPLACE VIEW q11 AS
19:53:39   2  SELECT
19:53:39   3  pair
19:53:39   4  ,ydate
19:53:39   5  ,prdate
19:53:39   6  ,rownum rnum -- acts as t in my time-series
19:53:39   7  ,clse
19:53:39   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
19:53:39   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
19:53:39  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
19:53:39  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
19:53:39  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
19:53:39  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
19:53:39  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
19:53:39  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
19:53:39  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
19:53:39  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
19:53:39  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
19:53:39  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
19:53:39  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
19:53:39  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
19:53:39  22  FROM di5min WHERE pair LIKE'%aud%'
19:53:39  23  ORDER BY ydate
19:53:39  24  /

View created.

Elapsed: 00:00:00.06
19:53:39 SQL> 
19:53:39 SQL> -- rpt
19:53:39 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
aud_usd        20771

Elapsed: 00:00:00.35
19:53:39 SQL> 
19:53:39 SQL> -- Calc deltas and gains
19:53:39 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.27
19:53:39 SQL> 
19:53:39 SQL> CREATE TABLE q13 COMPRESS AS
19:53:39   2  SELECT
19:53:39   3  pair
19:53:39   4  ,ydate
19:53:39   5  ,prdate
19:53:39   6  ,rnum
19:53:39   7  ,ld8
19:53:39   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
19:53:39   9  -- step by 2
19:53:39  10  ,clse-lg6  d06
19:53:39  11  ,lg6 -lg8  d68
19:53:39  12  ,lg8 -lg10 d810
19:53:39  13  ,lg10-lg12 d1012
19:53:39  14  ,lg12-lg14 d1214
19:53:39  15  ,lg14-lg16 d1416
19:53:39  16  ,lg16-lg18 d1618
19:53:39  17  -- step by 4
19:53:39  18  ,lg6 -lg10 d610
19:53:39  19  ,lg8 -lg12 d812
19:53:39  20  ,lg10-lg14 d1014
19:53:39  21  ,lg12-lg16 d1216
19:53:39  22  --
19:53:39  23  ,ABS(clse-lg6 )dc6
19:53:39  24  ,ABS(clse-lg8 )dc8
19:53:39  25  ,ABS(clse-lg10)dc10
19:53:39  26  ,ABS(clse-lg12)dc12
19:53:39  27  ,ABS(clse-lg14)dc14
19:53:39  28  ,ABS(clse-lg16)dc16
19:53:39  29  ,ABS(clse-lg18)dc18
19:53:39  30  ,ABS(clse-lg20)dc20
19:53:39  31  ,ABS(clse-lg22)dc22
19:53:39  32  ,(ld8-clse) ug8
19:53:39  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
19:53:39  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
19:53:39  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
19:53:39  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
19:53:39  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
19:53:39  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
19:53:39  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
19:53:39  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
19:53:39  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
19:53:39  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
19:53:39  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
19:53:39  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
19:53:39  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
19:53:39  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
19:53:39  47  ,0+TO_CHAR(ydate,'D')d
19:53:39  48  ,0+TO_CHAR(ydate,'W')w
19:53:39  49  -- mpm stands for minutes-past-midnight:
19:53:39  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
19:53:39  51  FROM q11
19:53:39  52  -- I dont want any NULL values from the LAG() functions:
19:53:39  53  WHERE lg32 > 0
19:53:39  54  ORDER BY pair,ydate
19:53:39  55  /

Table created.

Elapsed: 00:00:01.72
19:53:41 SQL> 
19:53:41 SQL> -- rpt
19:53:41 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	   10731
	-1	    9656

Elapsed: 00:00:00.03
19:53:41 SQL> 
19:53:41 SQL> -- Calc gains and ntiles
19:53:41 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.13
19:53:41 SQL> CREATE TABLE q15 COMPRESS AS
19:53:41   2  SELECT
19:53:41   3  pair
19:53:41   4  ,ydate
19:53:41   5  ,prdate -- Should be unique
19:53:41   6  ,trend -- +1 or -1
19:53:41   7  -- Use NTILE() to derive some attributes
19:53:41   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
19:53:41   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
19:53:41  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
19:53:41  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
19:53:41  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
19:53:41  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
19:53:41  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
19:53:41  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
19:53:41  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
19:53:41  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
19:53:41  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
19:53:41  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
19:53:41  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
19:53:41  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
19:53:41  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
19:53:41  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
19:53:41  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
19:53:41  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
19:53:41  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
19:53:41  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
19:53:41  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
19:53:41  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
19:53:41  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
19:53:41  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
19:53:41  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
19:53:41  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
19:53:41  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
19:53:41  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
19:53:41  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
19:53:41  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
19:53:41  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
19:53:41  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
19:53:41  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
19:53:41  41  ,hh    att32
19:53:41  42  ,d     att33
19:53:41  43  ,w     att34
19:53:41  44  ,mpm   att35
19:53:41  45  ,trend att36
19:53:41  46  ,ug8 g8
19:53:41  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
19:53:41  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
19:53:41  49  FROM q13
19:53:41  50  ORDER BY pair,ydate
19:53:41  51  /

Table created.

Elapsed: 00:00:05.31
19:53:47 SQL> 
19:53:47 SQL> -- rpt
19:53:47 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
19:53:47   2  GROUP BY pair,trend,gatt,gattn
19:53:47   3  ORDER BY pair,trend,gatt,gattn
19:53:47   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
aud_usd 	-1 nup nup .000033975	    3649
aud_usd 	-1 nup up   -.0052186	    2560
aud_usd 	-1 up  nup .005151396	    3429
aud_usd 	-1			       0
aud_usd 	 1 nup nup .000014058	    4212
aud_usd 	 1 nup up  -.00496844	    3114
aud_usd 	 1 up  nup .005113751	    3327
aud_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
19:53:47 SQL> 
19:53:47 SQL> -- rpt
19:53:47 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
aud_usd 2010-12-22 19:50:00

Elapsed: 00:00:00.02
19:53:47 SQL> 
19:53:47 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
19:53:47 SQL> CREATE TABLE modsrc COMPRESS AS
19:53:47   2  SELECT
19:53:47   3  pair
19:53:47   4  ,ydate
19:53:47   5  ,prdate
19:53:47   6  ,trend
19:53:47   7  ,g8
19:53:47   8  ,gatt
19:53:47   9  ,gattn
19:53:47  10  FROM q15
19:53:47  11  /

Table created.

Elapsed: 00:00:00.11
19:53:47 SQL> 
19:53:47 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.51
19:53:48 SQL> 
19:53:48 SQL> -- rpt
19:53:48 SQL> 
19:53:48 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20771

Elapsed: 00:00:00.36
19:53:48 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20387

Elapsed: 00:00:00.01
19:53:48 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20387

Elapsed: 00:00:00.00
19:53:48 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20387

Elapsed: 00:00:00.00
19:53:48 SQL> 
19:53:48 SQL> DROP   TABLE aud_ms10 ;

Table dropped.

Elapsed: 00:00:00.26
19:53:48 SQL> CREATE TABLE aud_ms10 COMPRESS AS
19:53:48   2  SELECT
19:53:48   3  ydate
19:53:48   4  ,trend aud_trend
19:53:48   5  ,g8    aud_g8
19:53:48   6  ,gatt  aud_gatt
19:53:48   7  ,gattn aud_gattn
19:53:48   8  FROM modsrc
19:53:48   9  /

Table created.

Elapsed: 00:00:00.11
19:53:48 SQL> 
19:53:48 SQL> ANALYZE TABLE aud_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
19:53:48 SQL> 
19:53:48 SQL> -- rpt
19:53:48 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-15 11:30:01 2010-12-22 19:50:00	10653	  -.0203      .0136
	-1 2010-09-15 03:55:01 2010-12-22 19:40:00	 9638	  -.0196      .0148

Elapsed: 00:00:00.03
19:53:49 SQL> SELECT aud_trend,MIN(ydate),MAX(ydate),COUNT(aud_trend),MIN(aud_g8),MAX(aud_g8)FROM aud_ms10 GROUP BY aud_trend;

 AUD_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(AUD_TREND) MIN(AUD_G8) MAX(AUD_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-15 11:30:01 2010-12-22 19:50:00	      10731	 -.0203       .0136
	-1 2010-09-15 03:55:01 2010-12-22 19:40:00	       9656	 -.0196       .0148

Elapsed: 00:00:00.01
19:53:49 SQL> 
19:53:49 SQL> -- I need a copy of q15 attributes
19:53:49 SQL> 
19:53:49 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.09
19:53:49 SQL> CREATE TABLE aud_att COMPRESS AS
19:53:49   2  SELECT
19:53:49   3  ydate
19:53:49   4  ,att00 aud_att00
19:53:49   5  ,att01 aud_att01
19:53:49   6  ,att02 aud_att02
19:53:49   7  ,att03 aud_att03
19:53:49   8  ,att04 aud_att04
19:53:49   9  ,att05 aud_att05
19:53:49  10  ,att06 aud_att06
19:53:49  11  ,att07 aud_att07
19:53:49  12  ,att08 aud_att08
19:53:49  13  ,att09 aud_att09
19:53:49  14  ,att10 aud_att10
19:53:49  15  ,att11 aud_att11
19:53:49  16  ,att12 aud_att12
19:53:49  17  ,att13 aud_att13
19:53:49  18  ,att14 aud_att14
19:53:49  19  ,att15 aud_att15
19:53:49  20  ,att16 aud_att16
19:53:49  21  ,att17 aud_att17
19:53:49  22  ,att18 aud_att18
19:53:49  23  ,att19 aud_att19
19:53:49  24  ,att20 aud_att20
19:53:49  25  ,att21 aud_att21
19:53:49  26  ,att22 aud_att22
19:53:49  27  ,att23 aud_att23
19:53:49  28  ,att24 aud_att24
19:53:49  29  ,att25 aud_att25
19:53:49  30  ,att26 aud_att26
19:53:49  31  ,att27 aud_att27
19:53:49  32  ,att28 aud_att28
19:53:49  33  ,att29 aud_att29
19:53:49  34  ,att30 aud_att30
19:53:49  35  ,att31 aud_att31
19:53:49  36  ,att32 aud_att32
19:53:49  37  ,att33 aud_att33
19:53:49  38  ,att34 aud_att34
19:53:49  39  ,att35 aud_att35
19:53:49  40  ,att36 aud_att36
19:53:49  41  FROM q15
19:53:49  42  /

Table created.

Elapsed: 00:00:00.19
19:53:49 SQL> 
19:53:49 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.46
19:53:49 SQL> 
19:53:49 SQL> -- rpt
19:53:49 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     20387

Elapsed: 00:00:00.00
19:53:49 SQL> 
19:53:49 SQL> --
19:53:49 SQL> -- gbp10.sql
19:53:49 SQL> --
19:53:49 SQL> 
19:53:49 SQL> -- Creates views and tables for backtesting a forex SVM strategy
19:53:49 SQL> 
19:53:49 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.37
19:53:50 SQL> 
19:53:50 SQL> -- I created di5min here:
19:53:50 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
19:53:50 SQL> 
19:53:50 SQL> CREATE OR REPLACE VIEW q11 AS
19:53:50   2  SELECT
19:53:50   3  pair
19:53:50   4  ,ydate
19:53:50   5  ,prdate
19:53:50   6  ,rownum rnum -- acts as t in my time-series
19:53:50   7  ,clse
19:53:50   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
19:53:50   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
19:53:50  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
19:53:50  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
19:53:50  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
19:53:50  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
19:53:50  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
19:53:50  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
19:53:50  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
19:53:50  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
19:53:50  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
19:53:50  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
19:53:50  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
19:53:50  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
19:53:50  22  FROM di5min WHERE pair LIKE'%gbp%'
19:53:50  23  ORDER BY ydate
19:53:50  24  /

View created.

Elapsed: 00:00:00.05
19:53:50 SQL> 
19:53:50 SQL> -- rpt
19:53:50 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
gbp_usd        20773

Elapsed: 00:00:00.34
19:53:50 SQL> 
19:53:50 SQL> -- Calc deltas and gains
19:53:50 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.25
19:53:50 SQL> 
19:53:50 SQL> CREATE TABLE q13 COMPRESS AS
19:53:50   2  SELECT
19:53:50   3  pair
19:53:50   4  ,ydate
19:53:50   5  ,prdate
19:53:50   6  ,rnum
19:53:50   7  ,ld8
19:53:50   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
19:53:50   9  -- step by 2
19:53:50  10  ,clse-lg6  d06
19:53:50  11  ,lg6 -lg8  d68
19:53:50  12  ,lg8 -lg10 d810
19:53:50  13  ,lg10-lg12 d1012
19:53:50  14  ,lg12-lg14 d1214
19:53:50  15  ,lg14-lg16 d1416
19:53:50  16  ,lg16-lg18 d1618
19:53:50  17  -- step by 4
19:53:50  18  ,lg6 -lg10 d610
19:53:50  19  ,lg8 -lg12 d812
19:53:50  20  ,lg10-lg14 d1014
19:53:50  21  ,lg12-lg16 d1216
19:53:50  22  --
19:53:50  23  ,ABS(clse-lg6 )dc6
19:53:50  24  ,ABS(clse-lg8 )dc8
19:53:50  25  ,ABS(clse-lg10)dc10
19:53:50  26  ,ABS(clse-lg12)dc12
19:53:50  27  ,ABS(clse-lg14)dc14
19:53:50  28  ,ABS(clse-lg16)dc16
19:53:50  29  ,ABS(clse-lg18)dc18
19:53:50  30  ,ABS(clse-lg20)dc20
19:53:50  31  ,ABS(clse-lg22)dc22
19:53:50  32  ,(ld8-clse) ug8
19:53:50  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
19:53:50  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
19:53:50  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
19:53:50  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
19:53:50  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
19:53:50  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
19:53:50  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
19:53:50  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
19:53:50  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
19:53:50  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
19:53:50  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
19:53:50  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
19:53:50  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
19:53:50  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
19:53:50  47  ,0+TO_CHAR(ydate,'D')d
19:53:50  48  ,0+TO_CHAR(ydate,'W')w
19:53:50  49  -- mpm stands for minutes-past-midnight:
19:53:50  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
19:53:50  51  FROM q11
19:53:50  52  -- I dont want any NULL values from the LAG() functions:
19:53:50  53  WHERE lg32 > 0
19:53:50  54  ORDER BY pair,ydate
19:53:50  55  /

Table created.

Elapsed: 00:00:01.75
19:53:52 SQL> 
19:53:52 SQL> -- rpt
19:53:52 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9943
	-1	   10446

Elapsed: 00:00:00.04
19:53:52 SQL> 
19:53:52 SQL> -- Calc gains and ntiles
19:53:52 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.14
19:53:52 SQL> CREATE TABLE q15 COMPRESS AS
19:53:52   2  SELECT
19:53:52   3  pair
19:53:52   4  ,ydate
19:53:52   5  ,prdate -- Should be unique
19:53:52   6  ,trend -- +1 or -1
19:53:52   7  -- Use NTILE() to derive some attributes
19:53:52   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
19:53:52   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
19:53:52  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
19:53:52  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
19:53:52  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
19:53:52  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
19:53:52  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
19:53:52  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
19:53:52  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
19:53:52  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
19:53:52  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
19:53:52  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
19:53:52  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
19:53:52  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
19:53:52  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
19:53:52  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
19:53:52  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
19:53:52  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
19:53:52  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
19:53:52  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
19:53:52  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
19:53:52  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
19:53:52  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
19:53:52  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
19:53:52  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
19:53:52  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
19:53:52  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
19:53:52  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
19:53:52  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
19:53:52  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
19:53:52  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
19:53:52  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
19:53:52  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
19:53:52  41  ,hh    att32
19:53:52  42  ,d     att33
19:53:52  43  ,w     att34
19:53:52  44  ,mpm   att35
19:53:52  45  ,trend att36
19:53:52  46  ,ug8 g8
19:53:52  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
19:53:52  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
19:53:52  49  FROM q13
19:53:52  50  ORDER BY pair,ydate
19:53:52  51  /

Table created.

Elapsed: 00:00:05.32
19:53:58 SQL> 
19:53:58 SQL> -- rpt
19:53:58 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
19:53:58   2  GROUP BY pair,trend,gatt,gattn
19:53:58   3  ORDER BY pair,trend,gatt,gattn
19:53:58   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
gbp_usd 	-1 nup nup .000083421	    3840
gbp_usd 	-1 nup up  -.00589808	    3256
gbp_usd 	-1 up  nup .005590658	    3254
gbp_usd 	-1			       0
gbp_usd 	 1 nup nup  -.0000768	    3657
gbp_usd 	 1 nup up  -.00554578	    3283
gbp_usd 	 1 up  nup .006064028	    3003

7 rows selected.

Elapsed: 00:00:00.03
19:53:58 SQL> 
19:53:58 SQL> -- rpt
19:53:58 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
gbp_usd 2010-12-22 19:50:00

Elapsed: 00:00:00.02
19:53:58 SQL> 
19:53:58 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.16
19:53:58 SQL> CREATE TABLE modsrc COMPRESS AS
19:53:58   2  SELECT
19:53:58   3  pair
19:53:58   4  ,ydate
19:53:58   5  ,prdate
19:53:58   6  ,trend
19:53:58   7  ,g8
19:53:58   8  ,gatt
19:53:58   9  ,gattn
19:53:58  10  FROM q15
19:53:58  11  /

Table created.

Elapsed: 00:00:00.08
19:53:58 SQL> 
19:53:58 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
19:53:58 SQL> 
19:53:58 SQL> -- rpt
19:53:58 SQL> 
19:53:58 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20773

Elapsed: 00:00:00.35
19:53:58 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20389

Elapsed: 00:00:00.01
19:53:58 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20389

Elapsed: 00:00:00.00
19:53:58 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20389

Elapsed: 00:00:00.01
19:53:58 SQL> 
19:53:58 SQL> DROP   TABLE gbp_ms10 ;

Table dropped.

Elapsed: 00:00:00.09
19:53:58 SQL> CREATE TABLE gbp_ms10 COMPRESS AS
19:53:58   2  SELECT
19:53:58   3  ydate
19:53:58   4  ,trend gbp_trend
19:53:58   5  ,g8    gbp_g8
19:53:58   6  ,gatt  gbp_gatt
19:53:58   7  ,gattn gbp_gattn
19:53:58   8  FROM modsrc
19:53:58   9  /

Table created.

Elapsed: 00:00:00.07
19:53:59 SQL> 
19:53:59 SQL> ANALYZE TABLE gbp_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
19:53:59 SQL> 
19:53:59 SQL> -- rpt
19:53:59 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-15 09:15:01 2010-12-22 10:45:00	 9943	  -.0231       .019
	-1 2010-09-15 03:55:01 2010-12-22 19:50:00	10350	    -.02      .0204

Elapsed: 00:00:00.02
19:53:59 SQL> SELECT gbp_trend,MIN(ydate),MAX(ydate),COUNT(gbp_trend),MIN(gbp_g8),MAX(gbp_g8)FROM gbp_ms10 GROUP BY gbp_trend;

 GBP_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(GBP_TREND) MIN(GBP_G8) MAX(GBP_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-15 09:15:01 2010-12-22 10:45:00	       9943	 -.0231        .019
	-1 2010-09-15 03:55:01 2010-12-22 19:50:00	      10446	   -.02       .0204

Elapsed: 00:00:00.01
19:53:59 SQL> 
19:53:59 SQL> -- I need a copy of q15 attributes
19:53:59 SQL> 
19:53:59 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.08
19:53:59 SQL> CREATE TABLE gbp_att COMPRESS AS
19:53:59   2  SELECT
19:53:59   3  ydate
19:53:59   4  ,att00 gbp_att00
19:53:59   5  ,att01 gbp_att01
19:53:59   6  ,att02 gbp_att02
19:53:59   7  ,att03 gbp_att03
19:53:59   8  ,att04 gbp_att04
19:53:59   9  ,att05 gbp_att05
19:53:59  10  ,att06 gbp_att06
19:53:59  11  ,att07 gbp_att07
19:53:59  12  ,att08 gbp_att08
19:53:59  13  ,att09 gbp_att09
19:53:59  14  ,att10 gbp_att10
19:53:59  15  ,att11 gbp_att11
19:53:59  16  ,att12 gbp_att12
19:53:59  17  ,att13 gbp_att13
19:53:59  18  ,att14 gbp_att14
19:53:59  19  ,att15 gbp_att15
19:53:59  20  ,att16 gbp_att16
19:53:59  21  ,att17 gbp_att17
19:53:59  22  ,att18 gbp_att18
19:53:59  23  ,att19 gbp_att19
19:53:59  24  ,att20 gbp_att20
19:53:59  25  ,att21 gbp_att21
19:53:59  26  ,att22 gbp_att22
19:53:59  27  ,att23 gbp_att23
19:53:59  28  ,att24 gbp_att24
19:53:59  29  ,att25 gbp_att25
19:53:59  30  ,att26 gbp_att26
19:53:59  31  ,att27 gbp_att27
19:53:59  32  ,att28 gbp_att28
19:53:59  33  ,att29 gbp_att29
19:53:59  34  ,att30 gbp_att30
19:53:59  35  ,att31 gbp_att31
19:53:59  36  ,att32 gbp_att32
19:53:59  37  ,att33 gbp_att33
19:53:59  38  ,att34 gbp_att34
19:53:59  39  ,att35 gbp_att35
19:53:59  40  ,att36 gbp_att36
19:53:59  41  FROM q15
19:53:59  42  /

Table created.

Elapsed: 00:00:00.21
19:53:59 SQL> 
19:53:59 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
19:54:00 SQL> 
19:54:00 SQL> -- rpt
19:54:00 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     20389

Elapsed: 00:00:00.00
19:54:00 SQL> 
19:54:00 SQL> --
19:54:00 SQL> -- jpy10.sql
19:54:00 SQL> --
19:54:00 SQL> 
19:54:00 SQL> -- Creates views and tables for backtesting a forex SVM strategy
19:54:00 SQL> 
19:54:00 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.31
19:54:00 SQL> 
19:54:00 SQL> -- I created di5min here:
19:54:00 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
19:54:00 SQL> 
19:54:00 SQL> CREATE OR REPLACE VIEW q11 AS
19:54:00   2  SELECT
19:54:00   3  pair
19:54:00   4  ,ydate
19:54:00   5  ,prdate
19:54:00   6  ,rownum rnum -- acts as t in my time-series
19:54:00   7  ,clse
19:54:00   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
19:54:00   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
19:54:00  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
19:54:00  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
19:54:00  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
19:54:00  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
19:54:00  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
19:54:00  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
19:54:00  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
19:54:00  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
19:54:00  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
19:54:00  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
19:54:00  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
19:54:00  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
19:54:00  22  FROM di5min WHERE pair LIKE'%jpy%'
19:54:00  23  ORDER BY ydate
19:54:00  24  /

View created.

Elapsed: 00:00:00.05
19:54:00 SQL> 
19:54:00 SQL> -- rpt
19:54:00 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_jpy        20772

Elapsed: 00:00:00.34
19:54:00 SQL> 
19:54:00 SQL> -- Calc deltas and gains
19:54:00 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.18
19:54:00 SQL> 
19:54:00 SQL> CREATE TABLE q13 COMPRESS AS
19:54:00   2  SELECT
19:54:00   3  pair
19:54:00   4  ,ydate
19:54:00   5  ,prdate
19:54:00   6  ,rnum
19:54:00   7  ,ld8
19:54:00   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
19:54:00   9  -- step by 2
19:54:00  10  ,clse-lg6  d06
19:54:00  11  ,lg6 -lg8  d68
19:54:00  12  ,lg8 -lg10 d810
19:54:00  13  ,lg10-lg12 d1012
19:54:00  14  ,lg12-lg14 d1214
19:54:00  15  ,lg14-lg16 d1416
19:54:00  16  ,lg16-lg18 d1618
19:54:00  17  -- step by 4
19:54:00  18  ,lg6 -lg10 d610
19:54:00  19  ,lg8 -lg12 d812
19:54:00  20  ,lg10-lg14 d1014
19:54:00  21  ,lg12-lg16 d1216
19:54:00  22  --
19:54:00  23  ,ABS(clse-lg6 )dc6
19:54:00  24  ,ABS(clse-lg8 )dc8
19:54:00  25  ,ABS(clse-lg10)dc10
19:54:00  26  ,ABS(clse-lg12)dc12
19:54:00  27  ,ABS(clse-lg14)dc14
19:54:00  28  ,ABS(clse-lg16)dc16
19:54:00  29  ,ABS(clse-lg18)dc18
19:54:00  30  ,ABS(clse-lg20)dc20
19:54:00  31  ,ABS(clse-lg22)dc22
19:54:00  32  ,(ld8-clse) ug8
19:54:00  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
19:54:00  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
19:54:00  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
19:54:00  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
19:54:00  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
19:54:00  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
19:54:00  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
19:54:00  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
19:54:00  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
19:54:00  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
19:54:00  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
19:54:00  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
19:54:00  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
19:54:00  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
19:54:00  47  ,0+TO_CHAR(ydate,'D')d
19:54:00  48  ,0+TO_CHAR(ydate,'W')w
19:54:00  49  -- mpm stands for minutes-past-midnight:
19:54:00  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
19:54:00  51  FROM q11
19:54:00  52  -- I dont want any NULL values from the LAG() functions:
19:54:00  53  WHERE lg32 > 0
19:54:00  54  ORDER BY pair,ydate
19:54:00  55  /

Table created.

Elapsed: 00:00:01.68
19:54:02 SQL> 
19:54:02 SQL> -- rpt
19:54:02 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9596
	-1	   10792

Elapsed: 00:00:00.03
19:54:02 SQL> 
19:54:02 SQL> -- Calc gains and ntiles
19:54:02 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.97
19:54:03 SQL> CREATE TABLE q15 COMPRESS AS
19:54:03   2  SELECT
19:54:03   3  pair
19:54:03   4  ,ydate
19:54:03   5  ,prdate -- Should be unique
19:54:03   6  ,trend -- +1 or -1
19:54:03   7  -- Use NTILE() to derive some attributes
19:54:03   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
19:54:03   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
19:54:03  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
19:54:03  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
19:54:03  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
19:54:03  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
19:54:03  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
19:54:03  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
19:54:03  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
19:54:03  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
19:54:03  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
19:54:03  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
19:54:03  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
19:54:03  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
19:54:03  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
19:54:03  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
19:54:03  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
19:54:03  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
19:54:03  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
19:54:03  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
19:54:03  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
19:54:03  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
19:54:03  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
19:54:03  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
19:54:03  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
19:54:03  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
19:54:03  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
19:54:03  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
19:54:03  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
19:54:03  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
19:54:03  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
19:54:03  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
19:54:03  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
19:54:03  41  ,hh    att32
19:54:03  42  ,d     att33
19:54:03  43  ,w     att34
19:54:03  44  ,mpm   att35
19:54:03  45  ,trend att36
19:54:03  46  ,ug8 g8
19:54:03  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
19:54:03  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
19:54:03  49  FROM q13
19:54:03  50  ORDER BY pair,ydate
19:54:03  51  /

Table created.

Elapsed: 00:00:05.66
19:54:09 SQL> 
19:54:09 SQL> -- rpt
19:54:09 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
19:54:09   2  GROUP BY pair,trend,gatt,gattn
19:54:09   3  ORDER BY pair,trend,gatt,gattn
19:54:09   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_jpy 	-1 nup nup .000015337	     163
usd_jpy 	-1 nup up  -.18481466	    5355
usd_jpy 	-1 up  nup .184037224	    5205
usd_jpy 	-1			       0
usd_jpy 	 1 nup nup	    0	     119
usd_jpy 	 1 nup up  -.18640755	    5157
usd_jpy 	 1 up  nup .195869439	    4293
usd_jpy 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
19:54:09 SQL> 
19:54:09 SQL> -- rpt
19:54:09 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_jpy 2010-12-22 19:50:00

Elapsed: 00:00:00.01
19:54:09 SQL> 
19:54:09 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.14
19:54:09 SQL> CREATE TABLE modsrc COMPRESS AS
19:54:09   2  SELECT
19:54:09   3  pair
19:54:09   4  ,ydate
19:54:09   5  ,prdate
19:54:09   6  ,trend
19:54:09   7  ,g8
19:54:09   8  ,gatt
19:54:09   9  ,gattn
19:54:09  10  FROM q15
19:54:09  11  /

Table created.

Elapsed: 00:00:00.08
19:54:09 SQL> 
19:54:09 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
19:54:09 SQL> 
19:54:09 SQL> -- rpt
19:54:09 SQL> 
19:54:09 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20772

Elapsed: 00:00:00.35
19:54:10 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20388

Elapsed: 00:00:00.00
19:54:10 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20388

Elapsed: 00:00:00.01
19:54:10 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20388

Elapsed: 00:00:00.00
19:54:10 SQL> 
19:54:10 SQL> DROP   TABLE jpy_ms10 ;

Table dropped.

Elapsed: 00:00:00.07
19:54:10 SQL> CREATE TABLE jpy_ms10 COMPRESS AS
19:54:10   2  SELECT
19:54:10   3  ydate
19:54:10   4  ,trend jpy_trend
19:54:10   5  ,g8    jpy_g8
19:54:10   6  ,gatt  jpy_gatt
19:54:10   7  ,gattn jpy_gattn
19:54:10   8  FROM modsrc
19:54:10   9  /

Table created.

Elapsed: 00:00:00.07
19:54:10 SQL> 
19:54:10 SQL> ANALYZE TABLE jpy_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
19:54:10 SQL> 
19:54:10 SQL> -- rpt
19:54:10 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-15 03:55:01 2010-12-22 19:50:00	 9569	  -1.185	  1
	-1 2010-09-15 23:45:01 2010-12-22 17:35:00	10723	 -1.0575       1.32

Elapsed: 00:00:00.02
19:54:10 SQL> SELECT jpy_trend,MIN(ydate),MAX(ydate),COUNT(jpy_trend),MIN(jpy_g8),MAX(jpy_g8)FROM jpy_ms10 GROUP BY jpy_trend;

 JPY_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(JPY_TREND) MIN(JPY_G8) MAX(JPY_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-15 03:55:01 2010-12-22 19:50:00	       9596	 -1.185 	  1
	-1 2010-09-15 23:45:01 2010-12-22 17:35:00	      10792	-1.0575        1.32

Elapsed: 00:00:00.01
19:54:10 SQL> 
19:54:10 SQL> -- I need a copy of q15 attributes
19:54:10 SQL> 
19:54:10 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.06
19:54:10 SQL> CREATE TABLE jpy_att COMPRESS AS
19:54:10   2  SELECT
19:54:10   3  ydate
19:54:10   4  ,att00 jpy_att00
19:54:10   5  ,att01 jpy_att01
19:54:10   6  ,att02 jpy_att02
19:54:10   7  ,att03 jpy_att03
19:54:10   8  ,att04 jpy_att04
19:54:10   9  ,att05 jpy_att05
19:54:10  10  ,att06 jpy_att06
19:54:10  11  ,att07 jpy_att07
19:54:10  12  ,att08 jpy_att08
19:54:10  13  ,att09 jpy_att09
19:54:10  14  ,att10 jpy_att10
19:54:10  15  ,att11 jpy_att11
19:54:10  16  ,att12 jpy_att12
19:54:10  17  ,att13 jpy_att13
19:54:10  18  ,att14 jpy_att14
19:54:10  19  ,att15 jpy_att15
19:54:10  20  ,att16 jpy_att16
19:54:10  21  ,att17 jpy_att17
19:54:10  22  ,att18 jpy_att18
19:54:10  23  ,att19 jpy_att19
19:54:10  24  ,att20 jpy_att20
19:54:10  25  ,att21 jpy_att21
19:54:10  26  ,att22 jpy_att22
19:54:10  27  ,att23 jpy_att23
19:54:10  28  ,att24 jpy_att24
19:54:10  29  ,att25 jpy_att25
19:54:10  30  ,att26 jpy_att26
19:54:10  31  ,att27 jpy_att27
19:54:10  32  ,att28 jpy_att28
19:54:10  33  ,att29 jpy_att29
19:54:10  34  ,att30 jpy_att30
19:54:10  35  ,att31 jpy_att31
19:54:10  36  ,att32 jpy_att32
19:54:10  37  ,att33 jpy_att33
19:54:10  38  ,att34 jpy_att34
19:54:10  39  ,att35 jpy_att35
19:54:10  40  ,att36 jpy_att36
19:54:10  41  FROM q15
19:54:10  42  /

Table created.

Elapsed: 00:00:00.18
19:54:10 SQL> 
19:54:10 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.49
19:54:11 SQL> 
19:54:11 SQL> -- rpt
19:54:11 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     20388

Elapsed: 00:00:00.00
19:54:11 SQL> 
19:54:11 SQL> --
19:54:11 SQL> -- cad10.sql
19:54:11 SQL> --
19:54:11 SQL> 
19:54:11 SQL> -- Creates views and tables for backtesting a forex SVM strategy
19:54:11 SQL> 
19:54:11 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.34
19:54:11 SQL> 
19:54:11 SQL> -- I created di5min here:
19:54:11 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
19:54:11 SQL> 
19:54:11 SQL> CREATE OR REPLACE VIEW q11 AS
19:54:11   2  SELECT
19:54:11   3  pair
19:54:11   4  ,ydate
19:54:11   5  ,prdate
19:54:11   6  ,rownum rnum -- acts as t in my time-series
19:54:11   7  ,clse
19:54:11   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
19:54:11   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
19:54:11  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
19:54:11  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
19:54:11  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
19:54:11  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
19:54:11  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
19:54:11  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
19:54:11  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
19:54:11  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
19:54:11  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
19:54:11  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
19:54:11  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
19:54:11  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
19:54:11  22  FROM di5min WHERE pair LIKE'%cad%'
19:54:11  23  ORDER BY ydate
19:54:11  24  /

View created.

Elapsed: 00:00:00.04
19:54:11 SQL> 
19:54:11 SQL> -- rpt
19:54:11 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_cad        20770

Elapsed: 00:00:00.35
19:54:11 SQL> 
19:54:11 SQL> -- Calc deltas and gains
19:54:11 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.20
19:54:12 SQL> 
19:54:12 SQL> CREATE TABLE q13 COMPRESS AS
19:54:12   2  SELECT
19:54:12   3  pair
19:54:12   4  ,ydate
19:54:12   5  ,prdate
19:54:12   6  ,rnum
19:54:12   7  ,ld8
19:54:12   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
19:54:12   9  -- step by 2
19:54:12  10  ,clse-lg6  d06
19:54:12  11  ,lg6 -lg8  d68
19:54:12  12  ,lg8 -lg10 d810
19:54:12  13  ,lg10-lg12 d1012
19:54:12  14  ,lg12-lg14 d1214
19:54:12  15  ,lg14-lg16 d1416
19:54:12  16  ,lg16-lg18 d1618
19:54:12  17  -- step by 4
19:54:12  18  ,lg6 -lg10 d610
19:54:12  19  ,lg8 -lg12 d812
19:54:12  20  ,lg10-lg14 d1014
19:54:12  21  ,lg12-lg16 d1216
19:54:12  22  --
19:54:12  23  ,ABS(clse-lg6 )dc6
19:54:12  24  ,ABS(clse-lg8 )dc8
19:54:12  25  ,ABS(clse-lg10)dc10
19:54:12  26  ,ABS(clse-lg12)dc12
19:54:12  27  ,ABS(clse-lg14)dc14
19:54:12  28  ,ABS(clse-lg16)dc16
19:54:12  29  ,ABS(clse-lg18)dc18
19:54:12  30  ,ABS(clse-lg20)dc20
19:54:12  31  ,ABS(clse-lg22)dc22
19:54:12  32  ,(ld8-clse) ug8
19:54:12  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
19:54:12  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
19:54:12  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
19:54:12  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
19:54:12  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
19:54:12  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
19:54:12  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
19:54:12  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
19:54:12  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
19:54:12  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
19:54:12  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
19:54:12  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
19:54:12  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
19:54:12  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
19:54:12  47  ,0+TO_CHAR(ydate,'D')d
19:54:12  48  ,0+TO_CHAR(ydate,'W')w
19:54:12  49  -- mpm stands for minutes-past-midnight:
19:54:12  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
19:54:12  51  FROM q11
19:54:12  52  -- I dont want any NULL values from the LAG() functions:
19:54:12  53  WHERE lg32 > 0
19:54:12  54  ORDER BY pair,ydate
19:54:12  55  /

Table created.

Elapsed: 00:00:01.74
19:54:13 SQL> 
19:54:13 SQL> -- rpt
19:54:13 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9443
	-1	   10943

Elapsed: 00:00:00.03
19:54:13 SQL> 
19:54:13 SQL> -- Calc gains and ntiles
19:54:13 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.22
19:54:14 SQL> CREATE TABLE q15 COMPRESS AS
19:54:14   2  SELECT
19:54:14   3  pair
19:54:14   4  ,ydate
19:54:14   5  ,prdate -- Should be unique
19:54:14   6  ,trend -- +1 or -1
19:54:14   7  -- Use NTILE() to derive some attributes
19:54:14   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
19:54:14   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
19:54:14  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
19:54:14  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
19:54:14  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
19:54:14  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
19:54:14  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
19:54:14  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
19:54:14  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
19:54:14  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
19:54:14  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
19:54:14  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
19:54:14  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
19:54:14  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
19:54:14  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
19:54:14  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
19:54:14  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
19:54:14  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
19:54:14  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
19:54:14  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
19:54:14  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
19:54:14  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
19:54:14  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
19:54:14  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
19:54:14  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
19:54:14  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
19:54:14  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
19:54:14  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
19:54:14  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
19:54:14  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
19:54:14  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
19:54:14  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
19:54:14  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
19:54:14  41  ,hh    att32
19:54:14  42  ,d     att33
19:54:14  43  ,w     att34
19:54:14  44  ,mpm   att35
19:54:14  45  ,trend att36
19:54:14  46  ,ug8 g8
19:54:14  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
19:54:14  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
19:54:14  49  FROM q13
19:54:14  50  ORDER BY pair,ydate
19:54:14  51  /

Table created.

Elapsed: 00:00:05.38
19:54:19 SQL> 
19:54:19 SQL> -- rpt
19:54:19 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
19:54:19   2  GROUP BY pair,trend,gatt,gattn
19:54:19   3  ORDER BY pair,trend,gatt,gattn
19:54:19   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_cad 	-1 nup nup -.00002575	    5697
usd_cad 	-1 nup up  -.00400967	    2632
usd_cad 	-1 up  nup .004670373	    2580
usd_cad 	-1			       0
usd_cad 	 1 nup nup -.00012105	    4711
usd_cad 	 1 nup up  -.00420579	    2692
usd_cad 	 1 up  nup .004616835	    1978
usd_cad 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
19:54:19 SQL> 
19:54:19 SQL> -- rpt
19:54:19 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_cad 2010-12-22 19:50:00

Elapsed: 00:00:00.02
19:54:19 SQL> 
19:54:19 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.15
19:54:19 SQL> CREATE TABLE modsrc COMPRESS AS
19:54:19   2  SELECT
19:54:19   3  pair
19:54:19   4  ,ydate
19:54:19   5  ,prdate
19:54:19   6  ,trend
19:54:19   7  ,g8
19:54:19   8  ,gatt
19:54:19   9  ,gattn
19:54:19  10  FROM q15
19:54:19  11  /

Table created.

Elapsed: 00:00:00.08
19:54:19 SQL> 
19:54:19 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
19:54:19 SQL> 
19:54:19 SQL> -- rpt
19:54:19 SQL> 
19:54:19 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20770

Elapsed: 00:00:00.35
19:54:20 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20386

Elapsed: 00:00:00.01
19:54:20 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20386

Elapsed: 00:00:00.00
19:54:20 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20386

Elapsed: 00:00:00.00
19:54:20 SQL> 
19:54:20 SQL> DROP   TABLE cad_ms10 ;

Table dropped.

Elapsed: 00:00:00.06
19:54:20 SQL> CREATE TABLE cad_ms10 COMPRESS AS
19:54:20   2  SELECT
19:54:20   3  ydate
19:54:20   4  ,trend cad_trend
19:54:20   5  ,g8    cad_g8
19:54:20   6  ,gatt  cad_gatt
19:54:20   7  ,gattn cad_gattn
19:54:20   8  FROM modsrc
19:54:20   9  /

Table created.

Elapsed: 00:00:00.06
19:54:20 SQL> 
19:54:20 SQL> ANALYZE TABLE cad_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
19:54:20 SQL> 
19:54:20 SQL> -- rpt
19:54:20 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-15 03:55:01 2010-12-22 19:50:00	 9381	  -.0122      .0159
	-1 2010-09-15 10:10:01 2010-12-22 17:40:00	10909	 -.01105      .0176

Elapsed: 00:00:00.03
19:54:20 SQL> SELECT cad_trend,MIN(ydate),MAX(ydate),COUNT(cad_trend),MIN(cad_g8),MAX(cad_g8)FROM cad_ms10 GROUP BY cad_trend;

 CAD_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(CAD_TREND) MIN(CAD_G8) MAX(CAD_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-15 03:55:01 2010-12-22 19:50:00	       9443	 -.0122       .0159
	-1 2010-09-15 10:10:01 2010-12-22 17:40:00	      10943	-.01105       .0176

Elapsed: 00:00:00.01
19:54:20 SQL> 
19:54:20 SQL> -- I need a copy of q15 attributes
19:54:20 SQL> 
19:54:20 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.06
19:54:20 SQL> CREATE TABLE cad_att COMPRESS AS
19:54:20   2  SELECT
19:54:20   3  ydate
19:54:20   4  ,att00 cad_att00
19:54:20   5  ,att01 cad_att01
19:54:20   6  ,att02 cad_att02
19:54:20   7  ,att03 cad_att03
19:54:20   8  ,att04 cad_att04
19:54:20   9  ,att05 cad_att05
19:54:20  10  ,att06 cad_att06
19:54:20  11  ,att07 cad_att07
19:54:20  12  ,att08 cad_att08
19:54:20  13  ,att09 cad_att09
19:54:20  14  ,att10 cad_att10
19:54:20  15  ,att11 cad_att11
19:54:20  16  ,att12 cad_att12
19:54:20  17  ,att13 cad_att13
19:54:20  18  ,att14 cad_att14
19:54:20  19  ,att15 cad_att15
19:54:20  20  ,att16 cad_att16
19:54:20  21  ,att17 cad_att17
19:54:20  22  ,att18 cad_att18
19:54:20  23  ,att19 cad_att19
19:54:20  24  ,att20 cad_att20
19:54:20  25  ,att21 cad_att21
19:54:20  26  ,att22 cad_att22
19:54:20  27  ,att23 cad_att23
19:54:20  28  ,att24 cad_att24
19:54:20  29  ,att25 cad_att25
19:54:20  30  ,att26 cad_att26
19:54:20  31  ,att27 cad_att27
19:54:20  32  ,att28 cad_att28
19:54:20  33  ,att29 cad_att29
19:54:20  34  ,att30 cad_att30
19:54:20  35  ,att31 cad_att31
19:54:20  36  ,att32 cad_att32
19:54:20  37  ,att33 cad_att33
19:54:20  38  ,att34 cad_att34
19:54:20  39  ,att35 cad_att35
19:54:20  40  ,att36 cad_att36
19:54:20  41  FROM q15
19:54:20  42  /

Table created.

Elapsed: 00:00:00.17
19:54:20 SQL> 
19:54:20 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.44
19:54:21 SQL> 
19:54:21 SQL> -- rpt
19:54:21 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     20386

Elapsed: 00:00:00.00
19:54:21 SQL> 
19:54:21 SQL> --
19:54:21 SQL> -- chf10.sql
19:54:21 SQL> --
19:54:21 SQL> 
19:54:21 SQL> -- Creates views and tables for backtesting a forex SVM strategy
19:54:21 SQL> 
19:54:21 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.36
19:54:21 SQL> 
19:54:21 SQL> -- I created di5min here:
19:54:21 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
19:54:21 SQL> 
19:54:21 SQL> CREATE OR REPLACE VIEW q11 AS
19:54:21   2  SELECT
19:54:21   3  pair
19:54:21   4  ,ydate
19:54:21   5  ,prdate
19:54:21   6  ,rownum rnum -- acts as t in my time-series
19:54:21   7  ,clse
19:54:21   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
19:54:21   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
19:54:21  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
19:54:21  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
19:54:21  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
19:54:21  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
19:54:21  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
19:54:21  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
19:54:21  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
19:54:21  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
19:54:21  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
19:54:21  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
19:54:21  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
19:54:21  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
19:54:21  22  FROM di5min WHERE pair LIKE'%chf%'
19:54:21  23  ORDER BY ydate
19:54:21  24  /

View created.

Elapsed: 00:00:00.07
19:54:21 SQL> 
19:54:21 SQL> -- rpt
19:54:21 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_chf        20773

Elapsed: 00:00:00.33
19:54:22 SQL> 
19:54:22 SQL> -- Calc deltas and gains
19:54:22 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.26
19:54:22 SQL> 
19:54:22 SQL> CREATE TABLE q13 COMPRESS AS
19:54:22   2  SELECT
19:54:22   3  pair
19:54:22   4  ,ydate
19:54:22   5  ,prdate
19:54:22   6  ,rnum
19:54:22   7  ,ld8
19:54:22   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
19:54:22   9  -- step by 2
19:54:22  10  ,clse-lg6  d06
19:54:22  11  ,lg6 -lg8  d68
19:54:22  12  ,lg8 -lg10 d810
19:54:22  13  ,lg10-lg12 d1012
19:54:22  14  ,lg12-lg14 d1214
19:54:22  15  ,lg14-lg16 d1416
19:54:22  16  ,lg16-lg18 d1618
19:54:22  17  -- step by 4
19:54:22  18  ,lg6 -lg10 d610
19:54:22  19  ,lg8 -lg12 d812
19:54:22  20  ,lg10-lg14 d1014
19:54:22  21  ,lg12-lg16 d1216
19:54:22  22  --
19:54:22  23  ,ABS(clse-lg6 )dc6
19:54:22  24  ,ABS(clse-lg8 )dc8
19:54:22  25  ,ABS(clse-lg10)dc10
19:54:22  26  ,ABS(clse-lg12)dc12
19:54:22  27  ,ABS(clse-lg14)dc14
19:54:22  28  ,ABS(clse-lg16)dc16
19:54:22  29  ,ABS(clse-lg18)dc18
19:54:22  30  ,ABS(clse-lg20)dc20
19:54:22  31  ,ABS(clse-lg22)dc22
19:54:22  32  ,(ld8-clse) ug8
19:54:22  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
19:54:22  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
19:54:22  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
19:54:22  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
19:54:22  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
19:54:22  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
19:54:22  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
19:54:22  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
19:54:22  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
19:54:22  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
19:54:22  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
19:54:22  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
19:54:22  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
19:54:22  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
19:54:22  47  ,0+TO_CHAR(ydate,'D')d
19:54:22  48  ,0+TO_CHAR(ydate,'W')w
19:54:22  49  -- mpm stands for minutes-past-midnight:
19:54:22  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
19:54:22  51  FROM q11
19:54:22  52  -- I dont want any NULL values from the LAG() functions:
19:54:22  53  WHERE lg32 > 0
19:54:22  54  ORDER BY pair,ydate
19:54:22  55  /

Table created.

Elapsed: 00:00:01.73
19:54:24 SQL> 
19:54:24 SQL> -- rpt
19:54:24 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9658
	-1	   10731

Elapsed: 00:00:00.03
19:54:24 SQL> 
19:54:24 SQL> -- Calc gains and ntiles
19:54:24 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.22
19:54:24 SQL> CREATE TABLE q15 COMPRESS AS
19:54:24   2  SELECT
19:54:24   3  pair
19:54:24   4  ,ydate
19:54:24   5  ,prdate -- Should be unique
19:54:24   6  ,trend -- +1 or -1
19:54:24   7  -- Use NTILE() to derive some attributes
19:54:24   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
19:54:24   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
19:54:24  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
19:54:24  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
19:54:24  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
19:54:24  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
19:54:24  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
19:54:24  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
19:54:24  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
19:54:24  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
19:54:24  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
19:54:24  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
19:54:24  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
19:54:24  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
19:54:24  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
19:54:24  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
19:54:24  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
19:54:24  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
19:54:24  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
19:54:24  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
19:54:24  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
19:54:24  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
19:54:24  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
19:54:24  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
19:54:24  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
19:54:24  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
19:54:24  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
19:54:24  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
19:54:24  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
19:54:24  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
19:54:24  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
19:54:24  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
19:54:24  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
19:54:24  41  ,hh    att32
19:54:24  42  ,d     att33
19:54:24  43  ,w     att34
19:54:24  44  ,mpm   att35
19:54:24  45  ,trend att36
19:54:24  46  ,ug8 g8
19:54:24  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
19:54:24  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
19:54:24  49  FROM q13
19:54:24  50  ORDER BY pair,ydate
19:54:24  51  /

Table created.

Elapsed: 00:00:05.46
19:54:29 SQL> 
19:54:29 SQL> -- rpt
19:54:29 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
19:54:29   2  GROUP BY pair,trend,gatt,gattn
19:54:29   3  ORDER BY pair,trend,gatt,gattn
19:54:29   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_chf 	-1 nup nup .000038057	    4895
usd_chf 	-1 nup up  -.00495939	    3127
usd_chf 	-1 up  nup .005188912	    2647
usd_chf 	-1			       0
usd_chf 	 1 nup nup -.00001309	    4663
usd_chf 	 1 nup up  -.00455237	    2847
usd_chf 	 1 up  nup .004682362	    2114
usd_chf 	 1			       0

8 rows selected.

Elapsed: 00:00:00.05
19:54:29 SQL> 
19:54:29 SQL> -- rpt
19:54:29 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_chf 2010-12-22 19:50:00

Elapsed: 00:00:00.01
19:54:29 SQL> 
19:54:29 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.14
19:54:30 SQL> CREATE TABLE modsrc COMPRESS AS
19:54:30   2  SELECT
19:54:30   3  pair
19:54:30   4  ,ydate
19:54:30   5  ,prdate
19:54:30   6  ,trend
19:54:30   7  ,g8
19:54:30   8  ,gatt
19:54:30   9  ,gattn
19:54:30  10  FROM q15
19:54:30  11  /

Table created.

Elapsed: 00:00:00.07
19:54:30 SQL> 
19:54:30 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.28
19:54:30 SQL> 
19:54:30 SQL> -- rpt
19:54:30 SQL> 
19:54:30 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20773

Elapsed: 00:00:00.35
19:54:30 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20389

Elapsed: 00:00:00.00
19:54:30 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20389

Elapsed: 00:00:00.01
19:54:30 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20389

Elapsed: 00:00:00.00
19:54:30 SQL> 
19:54:30 SQL> DROP   TABLE chf_ms10 ;

Table dropped.

Elapsed: 00:00:00.12
19:54:30 SQL> CREATE TABLE chf_ms10 COMPRESS AS
19:54:30   2  SELECT
19:54:30   3  ydate
19:54:30   4  ,trend chf_trend
19:54:30   5  ,g8    chf_g8
19:54:30   6  ,gatt  chf_gatt
19:54:30   7  ,gattn chf_gattn
19:54:30   8  FROM modsrc
19:54:30   9  /

Table created.

Elapsed: 00:00:00.18
19:54:31 SQL> 
19:54:31 SQL> ANALYZE TABLE chf_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
19:54:31 SQL> 
19:54:31 SQL> -- rpt
19:54:31 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-15 03:55:01 2010-12-22 19:45:00	 9624	 -.01775      .0155
	-1 2010-09-15 10:10:01 2010-12-22 19:50:00	10669	 -.01825     .01545

Elapsed: 00:00:00.02
19:54:31 SQL> SELECT chf_trend,MIN(ydate),MAX(ydate),COUNT(chf_trend),MIN(chf_g8),MAX(chf_g8)FROM chf_ms10 GROUP BY chf_trend;

 CHF_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(CHF_TREND) MIN(CHF_G8) MAX(CHF_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-15 03:55:01 2010-12-22 19:45:00	       9658	-.01775       .0155
	-1 2010-09-15 10:10:01 2010-12-22 19:50:00	      10731	-.01825      .01545

Elapsed: 00:00:00.01
19:54:31 SQL> 
19:54:31 SQL> -- I need a copy of q15 attributes
19:54:31 SQL> 
19:54:31 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.04
19:54:31 SQL> CREATE TABLE chf_att COMPRESS AS
19:54:31   2  SELECT
19:54:31   3  ydate
19:54:31   4  ,att00 chf_att00
19:54:31   5  ,att01 chf_att01
19:54:31   6  ,att02 chf_att02
19:54:31   7  ,att03 chf_att03
19:54:31   8  ,att04 chf_att04
19:54:31   9  ,att05 chf_att05
19:54:31  10  ,att06 chf_att06
19:54:31  11  ,att07 chf_att07
19:54:31  12  ,att08 chf_att08
19:54:31  13  ,att09 chf_att09
19:54:31  14  ,att10 chf_att10
19:54:31  15  ,att11 chf_att11
19:54:31  16  ,att12 chf_att12
19:54:31  17  ,att13 chf_att13
19:54:31  18  ,att14 chf_att14
19:54:31  19  ,att15 chf_att15
19:54:31  20  ,att16 chf_att16
19:54:31  21  ,att17 chf_att17
19:54:31  22  ,att18 chf_att18
19:54:31  23  ,att19 chf_att19
19:54:31  24  ,att20 chf_att20
19:54:31  25  ,att21 chf_att21
19:54:31  26  ,att22 chf_att22
19:54:31  27  ,att23 chf_att23
19:54:31  28  ,att24 chf_att24
19:54:31  29  ,att25 chf_att25
19:54:31  30  ,att26 chf_att26
19:54:31  31  ,att27 chf_att27
19:54:31  32  ,att28 chf_att28
19:54:31  33  ,att29 chf_att29
19:54:31  34  ,att30 chf_att30
19:54:31  35  ,att31 chf_att31
19:54:31  36  ,att32 chf_att32
19:54:31  37  ,att33 chf_att33
19:54:31  38  ,att34 chf_att34
19:54:31  39  ,att35 chf_att35
19:54:31  40  ,att36 chf_att36
19:54:31  41  FROM q15
19:54:31  42  /

Table created.

Elapsed: 00:00:00.22
19:54:31 SQL> 
19:54:31 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.47
19:54:31 SQL> 
19:54:31 SQL> -- rpt
19:54:31 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     20389

Elapsed: 00:00:00.01
19:54:31 SQL> 
19:54:31 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
