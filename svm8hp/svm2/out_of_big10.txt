
SQL*Plus: Release 11.2.0.1.0 Production on Fri Dec 24 01:50:48 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

01:50:48 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
01:50:48 SQL> 01:50:48 SQL> --
01:50:48 SQL> -- eur10.sql
01:50:48 SQL> --
01:50:48 SQL> 
01:50:48 SQL> -- Creates views and tables for backtesting a forex SVM strategy
01:50:48 SQL> 
01:50:48 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.02
01:50:48 SQL> 
01:50:48 SQL> -- I created di5min here:
01:50:48 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
01:50:48 SQL> 
01:50:48 SQL> CREATE OR REPLACE VIEW q11 AS
01:50:48   2  SELECT
01:50:48   3  pair
01:50:48   4  ,ydate
01:50:48   5  ,prdate
01:50:48   6  ,rownum rnum -- acts as t in my time-series
01:50:48   7  ,clse
01:50:48   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
01:50:48   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
01:50:48  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
01:50:48  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
01:50:48  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
01:50:48  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
01:50:48  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
01:50:48  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
01:50:48  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
01:50:48  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
01:50:48  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
01:50:48  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
01:50:48  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
01:50:48  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
01:50:48  22  FROM di5min WHERE pair LIKE'%eur%'
01:50:48  23  ORDER BY ydate
01:50:48  24  /

View created.

Elapsed: 00:00:00.05
01:50:48 SQL> 
01:50:48 SQL> -- rpt
01:50:48 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
eur_usd        20742

Elapsed: 00:00:00.35
01:50:49 SQL> 
01:50:49 SQL> -- Calc deltas and gains
01:50:49 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.16
01:50:49 SQL> 
01:50:49 SQL> CREATE TABLE q13 COMPRESS AS
01:50:49   2  SELECT
01:50:49   3  pair
01:50:49   4  ,ydate
01:50:49   5  ,prdate
01:50:49   6  ,rnum
01:50:49   7  ,ld8
01:50:49   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
01:50:49   9  -- step by 2
01:50:49  10  ,clse-lg6  d06
01:50:49  11  ,lg6 -lg8  d68
01:50:49  12  ,lg8 -lg10 d810
01:50:49  13  ,lg10-lg12 d1012
01:50:49  14  ,lg12-lg14 d1214
01:50:49  15  ,lg14-lg16 d1416
01:50:49  16  ,lg16-lg18 d1618
01:50:49  17  -- step by 4
01:50:49  18  ,lg6 -lg10 d610
01:50:49  19  ,lg8 -lg12 d812
01:50:49  20  ,lg10-lg14 d1014
01:50:49  21  ,lg12-lg16 d1216
01:50:49  22  --
01:50:49  23  ,ABS(clse-lg6 )dc6
01:50:49  24  ,ABS(clse-lg8 )dc8
01:50:49  25  ,ABS(clse-lg10)dc10
01:50:49  26  ,ABS(clse-lg12)dc12
01:50:49  27  ,ABS(clse-lg14)dc14
01:50:49  28  ,ABS(clse-lg16)dc16
01:50:49  29  ,ABS(clse-lg18)dc18
01:50:49  30  ,ABS(clse-lg20)dc20
01:50:49  31  ,ABS(clse-lg22)dc22
01:50:49  32  ,(ld8-clse) ug8
01:50:49  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
01:50:49  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
01:50:49  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
01:50:49  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
01:50:49  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
01:50:49  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
01:50:49  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
01:50:49  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
01:50:49  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
01:50:49  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
01:50:49  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
01:50:49  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
01:50:49  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
01:50:49  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
01:50:49  47  ,0+TO_CHAR(ydate,'D')d
01:50:49  48  ,0+TO_CHAR(ydate,'W')w
01:50:49  49  -- mpm stands for minutes-past-midnight:
01:50:49  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
01:50:49  51  FROM q11
01:50:49  52  -- I dont want any NULL values from the LAG() functions:
01:50:49  53  WHERE lg32 > 0
01:50:49  54  ORDER BY pair,ydate
01:50:49  55  /

Table created.

Elapsed: 00:00:02.01
01:50:51 SQL> 
01:50:51 SQL> -- rpt
01:50:51 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	   10120
	-1	   10238

Elapsed: 00:00:00.03
01:50:51 SQL> 
01:50:51 SQL> -- Calc gains and ntiles
01:50:51 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.22
01:50:51 SQL> CREATE TABLE q15 COMPRESS AS
01:50:51   2  SELECT
01:50:51   3  pair
01:50:51   4  ,ydate
01:50:51   5  ,prdate -- Should be unique
01:50:51   6  ,trend -- +1 or -1
01:50:51   7  -- Use NTILE() to derive some attributes
01:50:51   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
01:50:51   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
01:50:51  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
01:50:51  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
01:50:51  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
01:50:51  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
01:50:51  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
01:50:51  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
01:50:51  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
01:50:51  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
01:50:51  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
01:50:51  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
01:50:51  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
01:50:51  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
01:50:51  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
01:50:51  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
01:50:51  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
01:50:51  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
01:50:51  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
01:50:51  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
01:50:51  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
01:50:51  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
01:50:51  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
01:50:51  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
01:50:51  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
01:50:51  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
01:50:51  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
01:50:51  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
01:50:51  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
01:50:51  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
01:50:51  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
01:50:51  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
01:50:51  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
01:50:51  41  ,hh    att32
01:50:51  42  ,d     att33
01:50:51  43  ,w     att34
01:50:51  44  ,mpm   att35
01:50:51  45  ,trend att36
01:50:51  46  ,ug8 g8
01:50:51  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
01:50:51  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
01:50:51  49  FROM q13
01:50:51  50  ORDER BY pair,ydate
01:50:51  51  /

Table created.

Elapsed: 00:00:05.30
01:50:57 SQL> 
01:50:57 SQL> -- rpt
01:50:57 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
01:50:57   2  GROUP BY pair,trend,gatt,gattn
01:50:57   3  ORDER BY pair,trend,gatt,gattn
01:50:57   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
eur_usd 	-1 nup nup .000025712	    3021
eur_usd 	-1 nup up  -.00602802	    3651
eur_usd 	-1 up  nup .005757813	    3563
eur_usd 	-1			       0
eur_usd 	 1 nup nup -.00010153	    2942
eur_usd 	 1 nup up  -.00625098	    3473
eur_usd 	 1 up  nup .006579315	    3612
eur_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
01:50:57 SQL> 
01:50:57 SQL> -- rpt
01:50:57 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
eur_usd 2010-12-24 01:45:00

Elapsed: 00:00:00.02
01:50:57 SQL> 
01:50:57 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.20
01:50:57 SQL> CREATE TABLE modsrc COMPRESS AS
01:50:57   2  SELECT
01:50:57   3  pair
01:50:57   4  ,ydate
01:50:57   5  ,prdate
01:50:57   6  ,trend
01:50:57   7  ,g8
01:50:57   8  ,gatt
01:50:57   9  ,gattn
01:50:57  10  FROM q15
01:50:57  11  /

Table created.

Elapsed: 00:00:00.09
01:50:57 SQL> 
01:50:57 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.29
01:50:57 SQL> 
01:50:57 SQL> -- rpt
01:50:57 SQL> 
01:50:57 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20742

Elapsed: 00:00:00.35
01:50:58 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.00
01:50:58 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.01
01:50:58 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.00
01:50:58 SQL> 
01:50:58 SQL> DROP   TABLE eur_ms10 ;

Table dropped.

Elapsed: 00:00:00.06
01:50:58 SQL> CREATE TABLE eur_ms10 COMPRESS AS
01:50:58   2  SELECT
01:50:58   3  ydate
01:50:58   4  ,trend eur_trend
01:50:58   5  ,g8    eur_g8
01:50:58   6  ,gatt  eur_gatt
01:50:58   7  ,gattn eur_gattn
01:50:58   8  FROM modsrc
01:50:58   9  /

Table created.

Elapsed: 00:00:00.07
01:50:58 SQL> 
01:50:58 SQL> ANALYZE TABLE eur_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
01:50:58 SQL> 
01:50:58 SQL> -- rpt
01:50:58 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 09:55:01 2010-12-24 01:45:00	10027	  -.0218     .02165
	-1 2010-09-16 17:15:01 2010-12-24 00:50:00	10235	 -.02085      .0196

Elapsed: 00:00:00.02
01:50:58 SQL> SELECT eur_trend,MIN(ydate),MAX(ydate),COUNT(eur_trend),MIN(eur_g8),MAX(eur_g8)FROM eur_ms10 GROUP BY eur_trend;

 EUR_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(EUR_TREND) MIN(EUR_G8) MAX(EUR_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 09:55:01 2010-12-24 01:45:00	      10120	 -.0218      .02165
	-1 2010-09-16 17:15:01 2010-12-24 00:50:00	      10238	-.02085       .0196

Elapsed: 00:00:00.01
01:50:58 SQL> 
01:50:58 SQL> -- I need a copy of q15 attributes
01:50:58 SQL> 
01:50:58 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.04
01:50:58 SQL> CREATE TABLE eur_att COMPRESS AS
01:50:58   2  SELECT
01:50:58   3  ydate
01:50:58   4  ,att00 eur_att00
01:50:58   5  ,att01 eur_att01
01:50:58   6  ,att02 eur_att02
01:50:58   7  ,att03 eur_att03
01:50:58   8  ,att04 eur_att04
01:50:58   9  ,att05 eur_att05
01:50:58  10  ,att06 eur_att06
01:50:58  11  ,att07 eur_att07
01:50:58  12  ,att08 eur_att08
01:50:58  13  ,att09 eur_att09
01:50:58  14  ,att10 eur_att10
01:50:58  15  ,att11 eur_att11
01:50:58  16  ,att12 eur_att12
01:50:58  17  ,att13 eur_att13
01:50:58  18  ,att14 eur_att14
01:50:58  19  ,att15 eur_att15
01:50:58  20  ,att16 eur_att16
01:50:58  21  ,att17 eur_att17
01:50:58  22  ,att18 eur_att18
01:50:58  23  ,att19 eur_att19
01:50:58  24  ,att20 eur_att20
01:50:58  25  ,att21 eur_att21
01:50:58  26  ,att22 eur_att22
01:50:58  27  ,att23 eur_att23
01:50:58  28  ,att24 eur_att24
01:50:58  29  ,att25 eur_att25
01:50:58  30  ,att26 eur_att26
01:50:58  31  ,att27 eur_att27
01:50:58  32  ,att28 eur_att28
01:50:58  33  ,att29 eur_att29
01:50:58  34  ,att30 eur_att30
01:50:58  35  ,att31 eur_att31
01:50:58  36  ,att32 eur_att32
01:50:58  37  ,att33 eur_att33
01:50:58  38  ,att34 eur_att34
01:50:58  39  ,att35 eur_att35
01:50:58  40  ,att36 eur_att36
01:50:58  41  FROM q15
01:50:58  42  /

Table created.

Elapsed: 00:00:00.16
01:50:58 SQL> 
01:50:58 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
01:50:59 SQL> 
01:50:59 SQL> -- rpt
01:50:59 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     20358

Elapsed: 00:00:00.01
01:50:59 SQL> 
01:50:59 SQL> --
01:50:59 SQL> -- aud10.sql
01:50:59 SQL> --
01:50:59 SQL> 
01:50:59 SQL> -- Creates views and tables for backtesting a forex SVM strategy
01:50:59 SQL> 
01:50:59 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.50
01:50:59 SQL> 
01:50:59 SQL> -- I created di5min here:
01:50:59 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
01:50:59 SQL> 
01:50:59 SQL> CREATE OR REPLACE VIEW q11 AS
01:50:59   2  SELECT
01:50:59   3  pair
01:50:59   4  ,ydate
01:50:59   5  ,prdate
01:50:59   6  ,rownum rnum -- acts as t in my time-series
01:50:59   7  ,clse
01:50:59   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
01:50:59   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
01:50:59  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
01:50:59  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
01:50:59  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
01:50:59  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
01:50:59  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
01:50:59  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
01:50:59  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
01:50:59  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
01:50:59  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
01:50:59  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
01:50:59  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
01:50:59  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
01:50:59  22  FROM di5min WHERE pair LIKE'%aud%'
01:50:59  23  ORDER BY ydate
01:50:59  24  /

View created.

Elapsed: 00:00:00.05
01:50:59 SQL> 
01:50:59 SQL> -- rpt
01:50:59 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
aud_usd        20739

Elapsed: 00:00:00.35
01:50:59 SQL> 
01:50:59 SQL> -- Calc deltas and gains
01:50:59 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.25
01:51:00 SQL> 
01:51:00 SQL> CREATE TABLE q13 COMPRESS AS
01:51:00   2  SELECT
01:51:00   3  pair
01:51:00   4  ,ydate
01:51:00   5  ,prdate
01:51:00   6  ,rnum
01:51:00   7  ,ld8
01:51:00   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
01:51:00   9  -- step by 2
01:51:00  10  ,clse-lg6  d06
01:51:00  11  ,lg6 -lg8  d68
01:51:00  12  ,lg8 -lg10 d810
01:51:00  13  ,lg10-lg12 d1012
01:51:00  14  ,lg12-lg14 d1214
01:51:00  15  ,lg14-lg16 d1416
01:51:00  16  ,lg16-lg18 d1618
01:51:00  17  -- step by 4
01:51:00  18  ,lg6 -lg10 d610
01:51:00  19  ,lg8 -lg12 d812
01:51:00  20  ,lg10-lg14 d1014
01:51:00  21  ,lg12-lg16 d1216
01:51:00  22  --
01:51:00  23  ,ABS(clse-lg6 )dc6
01:51:00  24  ,ABS(clse-lg8 )dc8
01:51:00  25  ,ABS(clse-lg10)dc10
01:51:00  26  ,ABS(clse-lg12)dc12
01:51:00  27  ,ABS(clse-lg14)dc14
01:51:00  28  ,ABS(clse-lg16)dc16
01:51:00  29  ,ABS(clse-lg18)dc18
01:51:00  30  ,ABS(clse-lg20)dc20
01:51:00  31  ,ABS(clse-lg22)dc22
01:51:00  32  ,(ld8-clse) ug8
01:51:00  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
01:51:00  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
01:51:00  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
01:51:00  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
01:51:00  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
01:51:00  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
01:51:00  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
01:51:00  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
01:51:00  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
01:51:00  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
01:51:00  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
01:51:00  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
01:51:00  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
01:51:00  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
01:51:00  47  ,0+TO_CHAR(ydate,'D')d
01:51:00  48  ,0+TO_CHAR(ydate,'W')w
01:51:00  49  -- mpm stands for minutes-past-midnight:
01:51:00  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
01:51:00  51  FROM q11
01:51:00  52  -- I dont want any NULL values from the LAG() functions:
01:51:00  53  WHERE lg32 > 0
01:51:00  54  ORDER BY pair,ydate
01:51:00  55  /

Table created.

Elapsed: 00:00:01.72
01:51:01 SQL> 
01:51:01 SQL> -- rpt
01:51:01 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	   10850
	-1	    9505

Elapsed: 00:00:00.03
01:51:01 SQL> 
01:51:01 SQL> -- Calc gains and ntiles
01:51:01 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.14
01:51:02 SQL> CREATE TABLE q15 COMPRESS AS
01:51:02   2  SELECT
01:51:02   3  pair
01:51:02   4  ,ydate
01:51:02   5  ,prdate -- Should be unique
01:51:02   6  ,trend -- +1 or -1
01:51:02   7  -- Use NTILE() to derive some attributes
01:51:02   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
01:51:02   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
01:51:02  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
01:51:02  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
01:51:02  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
01:51:02  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
01:51:02  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
01:51:02  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
01:51:02  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
01:51:02  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
01:51:02  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
01:51:02  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
01:51:02  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
01:51:02  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
01:51:02  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
01:51:02  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
01:51:02  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
01:51:02  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
01:51:02  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
01:51:02  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
01:51:02  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
01:51:02  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
01:51:02  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
01:51:02  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
01:51:02  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
01:51:02  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
01:51:02  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
01:51:02  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
01:51:02  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
01:51:02  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
01:51:02  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
01:51:02  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
01:51:02  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
01:51:02  41  ,hh    att32
01:51:02  42  ,d     att33
01:51:02  43  ,w     att34
01:51:02  44  ,mpm   att35
01:51:02  45  ,trend att36
01:51:02  46  ,ug8 g8
01:51:02  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
01:51:02  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
01:51:02  49  FROM q13
01:51:02  50  ORDER BY pair,ydate
01:51:02  51  /

Table created.

Elapsed: 00:00:05.39
01:51:07 SQL> 
01:51:07 SQL> -- rpt
01:51:07 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
01:51:07   2  GROUP BY pair,trend,gatt,gattn
01:51:07   3  ORDER BY pair,trend,gatt,gattn
01:51:07   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
aud_usd 	-1 nup nup .000036956	    3536
aud_usd 	-1 nup up  -.00525614	    2521
aud_usd 	-1 up  nup .005173898	    3402
aud_usd 	-1			       0
aud_usd 	 1 nup nup .000028953	    4354
aud_usd 	 1 nup up  -.00499654	    3067
aud_usd 	 1 up  nup .005093811	    3379
aud_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
01:51:07 SQL> 
01:51:07 SQL> -- rpt
01:51:07 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
aud_usd 2010-12-24 01:45:00

Elapsed: 00:00:00.01
01:51:07 SQL> 
01:51:07 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
01:51:07 SQL> CREATE TABLE modsrc COMPRESS AS
01:51:07   2  SELECT
01:51:07   3  pair
01:51:07   4  ,ydate
01:51:07   5  ,prdate
01:51:07   6  ,trend
01:51:07   7  ,g8
01:51:07   8  ,gatt
01:51:07   9  ,gattn
01:51:07  10  FROM q15
01:51:07  11  /

Table created.

Elapsed: 00:00:00.09
01:51:07 SQL> 
01:51:07 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
01:51:07 SQL> 
01:51:07 SQL> -- rpt
01:51:07 SQL> 
01:51:07 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20739

Elapsed: 00:00:00.33
01:51:08 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20355

Elapsed: 00:00:00.01
01:51:08 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20355

Elapsed: 00:00:00.01
01:51:08 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20355

Elapsed: 00:00:00.00
01:51:08 SQL> 
01:51:08 SQL> DROP   TABLE aud_ms10 ;

Table dropped.

Elapsed: 00:00:00.03
01:51:08 SQL> CREATE TABLE aud_ms10 COMPRESS AS
01:51:08   2  SELECT
01:51:08   3  ydate
01:51:08   4  ,trend aud_trend
01:51:08   5  ,g8    aud_g8
01:51:08   6  ,gatt  aud_gatt
01:51:08   7  ,gattn aud_gattn
01:51:08   8  FROM modsrc
01:51:08   9  /

Table created.

Elapsed: 00:00:00.07
01:51:08 SQL> 
01:51:08 SQL> ANALYZE TABLE aud_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.24
01:51:08 SQL> 
01:51:08 SQL> -- rpt
01:51:08 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 10:40:01 2010-12-24 00:05:00	10800	  -.0203      .0136
	-1 2010-09-16 09:55:01 2010-12-24 01:45:00	 9459	  -.0196      .0148

Elapsed: 00:00:00.02
01:51:08 SQL> SELECT aud_trend,MIN(ydate),MAX(ydate),COUNT(aud_trend),MIN(aud_g8),MAX(aud_g8)FROM aud_ms10 GROUP BY aud_trend;

 AUD_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(AUD_TREND) MIN(AUD_G8) MAX(AUD_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 10:40:01 2010-12-24 00:05:00	      10850	 -.0203       .0136
	-1 2010-09-16 09:55:01 2010-12-24 01:45:00	       9505	 -.0196       .0148

Elapsed: 00:00:00.03
01:51:08 SQL> 
01:51:08 SQL> -- I need a copy of q15 attributes
01:51:08 SQL> 
01:51:08 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.04
01:51:08 SQL> CREATE TABLE aud_att COMPRESS AS
01:51:08   2  SELECT
01:51:08   3  ydate
01:51:08   4  ,att00 aud_att00
01:51:08   5  ,att01 aud_att01
01:51:08   6  ,att02 aud_att02
01:51:08   7  ,att03 aud_att03
01:51:08   8  ,att04 aud_att04
01:51:08   9  ,att05 aud_att05
01:51:08  10  ,att06 aud_att06
01:51:08  11  ,att07 aud_att07
01:51:08  12  ,att08 aud_att08
01:51:08  13  ,att09 aud_att09
01:51:08  14  ,att10 aud_att10
01:51:08  15  ,att11 aud_att11
01:51:08  16  ,att12 aud_att12
01:51:08  17  ,att13 aud_att13
01:51:08  18  ,att14 aud_att14
01:51:08  19  ,att15 aud_att15
01:51:08  20  ,att16 aud_att16
01:51:08  21  ,att17 aud_att17
01:51:08  22  ,att18 aud_att18
01:51:08  23  ,att19 aud_att19
01:51:08  24  ,att20 aud_att20
01:51:08  25  ,att21 aud_att21
01:51:08  26  ,att22 aud_att22
01:51:08  27  ,att23 aud_att23
01:51:08  28  ,att24 aud_att24
01:51:08  29  ,att25 aud_att25
01:51:08  30  ,att26 aud_att26
01:51:08  31  ,att27 aud_att27
01:51:08  32  ,att28 aud_att28
01:51:08  33  ,att29 aud_att29
01:51:08  34  ,att30 aud_att30
01:51:08  35  ,att31 aud_att31
01:51:08  36  ,att32 aud_att32
01:51:08  37  ,att33 aud_att33
01:51:08  38  ,att34 aud_att34
01:51:08  39  ,att35 aud_att35
01:51:08  40  ,att36 aud_att36
01:51:08  41  FROM q15
01:51:08  42  /

Table created.

Elapsed: 00:00:00.18
01:51:08 SQL> 
01:51:08 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
01:51:09 SQL> 
01:51:09 SQL> -- rpt
01:51:09 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     20355

Elapsed: 00:00:00.00
01:51:09 SQL> 
01:51:09 SQL> --
01:51:09 SQL> -- gbp10.sql
01:51:09 SQL> --
01:51:09 SQL> 
01:51:09 SQL> -- Creates views and tables for backtesting a forex SVM strategy
01:51:09 SQL> 
01:51:09 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.29
01:51:09 SQL> 
01:51:09 SQL> -- I created di5min here:
01:51:09 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
01:51:09 SQL> 
01:51:09 SQL> CREATE OR REPLACE VIEW q11 AS
01:51:09   2  SELECT
01:51:09   3  pair
01:51:09   4  ,ydate
01:51:09   5  ,prdate
01:51:09   6  ,rownum rnum -- acts as t in my time-series
01:51:09   7  ,clse
01:51:09   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
01:51:09   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
01:51:09  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
01:51:09  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
01:51:09  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
01:51:09  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
01:51:09  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
01:51:09  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
01:51:09  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
01:51:09  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
01:51:09  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
01:51:09  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
01:51:09  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
01:51:09  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
01:51:09  22  FROM di5min WHERE pair LIKE'%gbp%'
01:51:09  23  ORDER BY ydate
01:51:09  24  /

View created.

Elapsed: 00:00:00.04
01:51:09 SQL> 
01:51:09 SQL> -- rpt
01:51:09 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
gbp_usd        20741

Elapsed: 00:00:00.36
01:51:10 SQL> 
01:51:10 SQL> -- Calc deltas and gains
01:51:10 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.36
01:51:10 SQL> 
01:51:10 SQL> CREATE TABLE q13 COMPRESS AS
01:51:10   2  SELECT
01:51:10   3  pair
01:51:10   4  ,ydate
01:51:10   5  ,prdate
01:51:10   6  ,rnum
01:51:10   7  ,ld8
01:51:10   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
01:51:10   9  -- step by 2
01:51:10  10  ,clse-lg6  d06
01:51:10  11  ,lg6 -lg8  d68
01:51:10  12  ,lg8 -lg10 d810
01:51:10  13  ,lg10-lg12 d1012
01:51:10  14  ,lg12-lg14 d1214
01:51:10  15  ,lg14-lg16 d1416
01:51:10  16  ,lg16-lg18 d1618
01:51:10  17  -- step by 4
01:51:10  18  ,lg6 -lg10 d610
01:51:10  19  ,lg8 -lg12 d812
01:51:10  20  ,lg10-lg14 d1014
01:51:10  21  ,lg12-lg16 d1216
01:51:10  22  --
01:51:10  23  ,ABS(clse-lg6 )dc6
01:51:10  24  ,ABS(clse-lg8 )dc8
01:51:10  25  ,ABS(clse-lg10)dc10
01:51:10  26  ,ABS(clse-lg12)dc12
01:51:10  27  ,ABS(clse-lg14)dc14
01:51:10  28  ,ABS(clse-lg16)dc16
01:51:10  29  ,ABS(clse-lg18)dc18
01:51:10  30  ,ABS(clse-lg20)dc20
01:51:10  31  ,ABS(clse-lg22)dc22
01:51:10  32  ,(ld8-clse) ug8
01:51:10  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
01:51:10  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
01:51:10  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
01:51:10  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
01:51:10  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
01:51:10  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
01:51:10  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
01:51:10  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
01:51:10  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
01:51:10  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
01:51:10  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
01:51:10  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
01:51:10  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
01:51:10  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
01:51:10  47  ,0+TO_CHAR(ydate,'D')d
01:51:10  48  ,0+TO_CHAR(ydate,'W')w
01:51:10  49  -- mpm stands for minutes-past-midnight:
01:51:10  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
01:51:10  51  FROM q11
01:51:10  52  -- I dont want any NULL values from the LAG() functions:
01:51:10  53  WHERE lg32 > 0
01:51:10  54  ORDER BY pair,ydate
01:51:10  55  /

Table created.

Elapsed: 00:00:01.76
01:51:12 SQL> 
01:51:12 SQL> -- rpt
01:51:12 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9959
	-1	   10398

Elapsed: 00:00:00.03
01:51:12 SQL> 
01:51:12 SQL> -- Calc gains and ntiles
01:51:12 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.16
01:51:12 SQL> CREATE TABLE q15 COMPRESS AS
01:51:12   2  SELECT
01:51:12   3  pair
01:51:12   4  ,ydate
01:51:12   5  ,prdate -- Should be unique
01:51:12   6  ,trend -- +1 or -1
01:51:12   7  -- Use NTILE() to derive some attributes
01:51:12   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
01:51:12   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
01:51:12  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
01:51:12  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
01:51:12  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
01:51:12  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
01:51:12  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
01:51:12  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
01:51:12  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
01:51:12  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
01:51:12  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
01:51:12  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
01:51:12  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
01:51:12  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
01:51:12  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
01:51:12  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
01:51:12  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
01:51:12  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
01:51:12  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
01:51:12  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
01:51:12  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
01:51:12  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
01:51:12  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
01:51:12  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
01:51:12  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
01:51:12  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
01:51:12  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
01:51:12  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
01:51:12  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
01:51:12  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
01:51:12  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
01:51:12  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
01:51:12  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
01:51:12  41  ,hh    att32
01:51:12  42  ,d     att33
01:51:12  43  ,w     att34
01:51:12  44  ,mpm   att35
01:51:12  45  ,trend att36
01:51:12  46  ,ug8 g8
01:51:12  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
01:51:12  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
01:51:12  49  FROM q13
01:51:12  50  ORDER BY pair,ydate
01:51:12  51  /

Table created.

Elapsed: 00:00:05.49
01:51:17 SQL> 
01:51:17 SQL> -- rpt
01:51:17 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
01:51:17   2  GROUP BY pair,trend,gatt,gattn
01:51:17   3  ORDER BY pair,trend,gatt,gattn
01:51:17   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
gbp_usd 	-1 nup nup .000094927	    3844
gbp_usd 	-1 nup up   -.0059004	    3270
gbp_usd 	-1 up  nup .005455867	    3283
gbp_usd 	-1			       0
gbp_usd 	 1 nup nup  -.0000818	    3638
gbp_usd 	 1 nup up  -.00554744	    3271
gbp_usd 	 1 up  nup .005993794	    2955
gbp_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
01:51:17 SQL> 
01:51:17 SQL> -- rpt
01:51:17 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
gbp_usd 2010-12-24 01:45:00

Elapsed: 00:00:00.02
01:51:17 SQL> 
01:51:17 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.16
01:51:18 SQL> CREATE TABLE modsrc COMPRESS AS
01:51:18   2  SELECT
01:51:18   3  pair
01:51:18   4  ,ydate
01:51:18   5  ,prdate
01:51:18   6  ,trend
01:51:18   7  ,g8
01:51:18   8  ,gatt
01:51:18   9  ,gattn
01:51:18  10  FROM q15
01:51:18  11  /

Table created.

Elapsed: 00:00:00.09
01:51:18 SQL> 
01:51:18 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
01:51:18 SQL> 
01:51:18 SQL> -- rpt
01:51:18 SQL> 
01:51:18 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20741

Elapsed: 00:00:00.33
01:51:18 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20357

Elapsed: 00:00:00.01
01:51:18 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20357

Elapsed: 00:00:00.00
01:51:18 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20357

Elapsed: 00:00:00.01
01:51:18 SQL> 
01:51:18 SQL> DROP   TABLE gbp_ms10 ;

Table dropped.

Elapsed: 00:00:00.03
01:51:18 SQL> CREATE TABLE gbp_ms10 COMPRESS AS
01:51:18   2  SELECT
01:51:18   3  ydate
01:51:18   4  ,trend gbp_trend
01:51:18   5  ,g8    gbp_g8
01:51:18   6  ,gatt  gbp_gatt
01:51:18   7  ,gattn gbp_gattn
01:51:18   8  FROM modsrc
01:51:18   9  /

Table created.

Elapsed: 00:00:00.06
01:51:18 SQL> 
01:51:18 SQL> ANALYZE TABLE gbp_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
01:51:19 SQL> 
01:51:19 SQL> -- rpt
01:51:19 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 10:50:01 2010-12-24 01:45:00	 9864	  -.0231       .019
	-1 2010-09-16 09:55:01 2010-12-23 22:50:00	10397	    -.02      .0204

Elapsed: 00:00:00.03
01:51:19 SQL> SELECT gbp_trend,MIN(ydate),MAX(ydate),COUNT(gbp_trend),MIN(gbp_g8),MAX(gbp_g8)FROM gbp_ms10 GROUP BY gbp_trend;

 GBP_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(GBP_TREND) MIN(GBP_G8) MAX(GBP_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 10:50:01 2010-12-24 01:45:00	       9959	 -.0231        .019
	-1 2010-09-16 09:55:01 2010-12-23 22:50:00	      10398	   -.02       .0204

Elapsed: 00:00:00.01
01:51:19 SQL> 
01:51:19 SQL> -- I need a copy of q15 attributes
01:51:19 SQL> 
01:51:19 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.05
01:51:19 SQL> CREATE TABLE gbp_att COMPRESS AS
01:51:19   2  SELECT
01:51:19   3  ydate
01:51:19   4  ,att00 gbp_att00
01:51:19   5  ,att01 gbp_att01
01:51:19   6  ,att02 gbp_att02
01:51:19   7  ,att03 gbp_att03
01:51:19   8  ,att04 gbp_att04
01:51:19   9  ,att05 gbp_att05
01:51:19  10  ,att06 gbp_att06
01:51:19  11  ,att07 gbp_att07
01:51:19  12  ,att08 gbp_att08
01:51:19  13  ,att09 gbp_att09
01:51:19  14  ,att10 gbp_att10
01:51:19  15  ,att11 gbp_att11
01:51:19  16  ,att12 gbp_att12
01:51:19  17  ,att13 gbp_att13
01:51:19  18  ,att14 gbp_att14
01:51:19  19  ,att15 gbp_att15
01:51:19  20  ,att16 gbp_att16
01:51:19  21  ,att17 gbp_att17
01:51:19  22  ,att18 gbp_att18
01:51:19  23  ,att19 gbp_att19
01:51:19  24  ,att20 gbp_att20
01:51:19  25  ,att21 gbp_att21
01:51:19  26  ,att22 gbp_att22
01:51:19  27  ,att23 gbp_att23
01:51:19  28  ,att24 gbp_att24
01:51:19  29  ,att25 gbp_att25
01:51:19  30  ,att26 gbp_att26
01:51:19  31  ,att27 gbp_att27
01:51:19  32  ,att28 gbp_att28
01:51:19  33  ,att29 gbp_att29
01:51:19  34  ,att30 gbp_att30
01:51:19  35  ,att31 gbp_att31
01:51:19  36  ,att32 gbp_att32
01:51:19  37  ,att33 gbp_att33
01:51:19  38  ,att34 gbp_att34
01:51:19  39  ,att35 gbp_att35
01:51:19  40  ,att36 gbp_att36
01:51:19  41  FROM q15
01:51:19  42  /

Table created.

Elapsed: 00:00:00.17
01:51:19 SQL> 
01:51:19 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.50
01:51:19 SQL> 
01:51:19 SQL> -- rpt
01:51:19 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     20357

Elapsed: 00:00:00.01
01:51:19 SQL> 
01:51:19 SQL> --
01:51:19 SQL> -- jpy10.sql
01:51:19 SQL> --
01:51:19 SQL> 
01:51:19 SQL> -- Creates views and tables for backtesting a forex SVM strategy
01:51:19 SQL> 
01:51:19 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.31
01:51:20 SQL> 
01:51:20 SQL> -- I created di5min here:
01:51:20 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
01:51:20 SQL> 
01:51:20 SQL> CREATE OR REPLACE VIEW q11 AS
01:51:20   2  SELECT
01:51:20   3  pair
01:51:20   4  ,ydate
01:51:20   5  ,prdate
01:51:20   6  ,rownum rnum -- acts as t in my time-series
01:51:20   7  ,clse
01:51:20   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
01:51:20   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
01:51:20  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
01:51:20  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
01:51:20  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
01:51:20  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
01:51:20  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
01:51:20  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
01:51:20  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
01:51:20  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
01:51:20  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
01:51:20  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
01:51:20  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
01:51:20  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
01:51:20  22  FROM di5min WHERE pair LIKE'%jpy%'
01:51:20  23  ORDER BY ydate
01:51:20  24  /

View created.

Elapsed: 00:00:00.05
01:51:20 SQL> 
01:51:20 SQL> -- rpt
01:51:20 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_jpy        20740

Elapsed: 00:00:00.34
01:51:20 SQL> 
01:51:20 SQL> -- Calc deltas and gains
01:51:20 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.19
01:51:20 SQL> 
01:51:20 SQL> CREATE TABLE q13 COMPRESS AS
01:51:20   2  SELECT
01:51:20   3  pair
01:51:20   4  ,ydate
01:51:20   5  ,prdate
01:51:20   6  ,rnum
01:51:20   7  ,ld8
01:51:20   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
01:51:20   9  -- step by 2
01:51:20  10  ,clse-lg6  d06
01:51:20  11  ,lg6 -lg8  d68
01:51:20  12  ,lg8 -lg10 d810
01:51:20  13  ,lg10-lg12 d1012
01:51:20  14  ,lg12-lg14 d1214
01:51:20  15  ,lg14-lg16 d1416
01:51:20  16  ,lg16-lg18 d1618
01:51:20  17  -- step by 4
01:51:20  18  ,lg6 -lg10 d610
01:51:20  19  ,lg8 -lg12 d812
01:51:20  20  ,lg10-lg14 d1014
01:51:20  21  ,lg12-lg16 d1216
01:51:20  22  --
01:51:20  23  ,ABS(clse-lg6 )dc6
01:51:20  24  ,ABS(clse-lg8 )dc8
01:51:20  25  ,ABS(clse-lg10)dc10
01:51:20  26  ,ABS(clse-lg12)dc12
01:51:20  27  ,ABS(clse-lg14)dc14
01:51:20  28  ,ABS(clse-lg16)dc16
01:51:20  29  ,ABS(clse-lg18)dc18
01:51:20  30  ,ABS(clse-lg20)dc20
01:51:20  31  ,ABS(clse-lg22)dc22
01:51:20  32  ,(ld8-clse) ug8
01:51:20  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
01:51:20  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
01:51:20  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
01:51:20  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
01:51:20  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
01:51:20  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
01:51:20  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
01:51:20  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
01:51:20  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
01:51:20  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
01:51:20  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
01:51:20  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
01:51:20  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
01:51:20  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
01:51:20  47  ,0+TO_CHAR(ydate,'D')d
01:51:20  48  ,0+TO_CHAR(ydate,'W')w
01:51:20  49  -- mpm stands for minutes-past-midnight:
01:51:20  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
01:51:20  51  FROM q11
01:51:20  52  -- I dont want any NULL values from the LAG() functions:
01:51:20  53  WHERE lg32 > 0
01:51:20  54  ORDER BY pair,ydate
01:51:20  55  /

Table created.

Elapsed: 00:00:01.70
01:51:22 SQL> 
01:51:22 SQL> -- rpt
01:51:22 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9421
	-1	   10935

Elapsed: 00:00:00.03
01:51:22 SQL> 
01:51:22 SQL> -- Calc gains and ntiles
01:51:22 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.24
01:51:22 SQL> CREATE TABLE q15 COMPRESS AS
01:51:22   2  SELECT
01:51:22   3  pair
01:51:22   4  ,ydate
01:51:22   5  ,prdate -- Should be unique
01:51:22   6  ,trend -- +1 or -1
01:51:22   7  -- Use NTILE() to derive some attributes
01:51:22   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
01:51:22   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
01:51:22  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
01:51:22  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
01:51:22  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
01:51:22  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
01:51:22  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
01:51:22  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
01:51:22  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
01:51:22  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
01:51:22  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
01:51:22  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
01:51:22  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
01:51:22  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
01:51:22  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
01:51:22  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
01:51:22  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
01:51:22  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
01:51:22  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
01:51:22  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
01:51:22  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
01:51:22  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
01:51:22  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
01:51:22  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
01:51:22  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
01:51:22  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
01:51:22  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
01:51:22  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
01:51:22  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
01:51:22  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
01:51:22  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
01:51:22  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
01:51:22  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
01:51:22  41  ,hh    att32
01:51:22  42  ,d     att33
01:51:22  43  ,w     att34
01:51:22  44  ,mpm   att35
01:51:22  45  ,trend att36
01:51:22  46  ,ug8 g8
01:51:22  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
01:51:22  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
01:51:22  49  FROM q13
01:51:22  50  ORDER BY pair,ydate
01:51:22  51  /

Table created.

Elapsed: 00:00:05.46
01:51:28 SQL> 
01:51:28 SQL> -- rpt
01:51:28 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
01:51:28   2  GROUP BY pair,trend,gatt,gattn
01:51:28   3  ORDER BY pair,trend,gatt,gattn
01:51:28   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_jpy 	-1 nup nup -9.209E-07	     169
usd_jpy 	-1 nup up  -.18456148	    5515
usd_jpy 	-1 up  nup .180551894	    5190
usd_jpy 	-1			       0
usd_jpy 	 1 nup nup	    0	     118
usd_jpy 	 1 nup up  -.18874613	    5135
usd_jpy 	 1 up  nup .191723323	    4133
usd_jpy 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
01:51:28 SQL> 
01:51:28 SQL> -- rpt
01:51:28 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_jpy 2010-12-24 01:45:00

Elapsed: 00:00:00.02
01:51:28 SQL> 
01:51:28 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
01:51:28 SQL> CREATE TABLE modsrc COMPRESS AS
01:51:28   2  SELECT
01:51:28   3  pair
01:51:28   4  ,ydate
01:51:28   5  ,prdate
01:51:28   6  ,trend
01:51:28   7  ,g8
01:51:28   8  ,gatt
01:51:28   9  ,gattn
01:51:28  10  FROM q15
01:51:28  11  /

Table created.

Elapsed: 00:00:00.10
01:51:28 SQL> 
01:51:28 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
01:51:28 SQL> 
01:51:28 SQL> -- rpt
01:51:28 SQL> 
01:51:28 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20740

Elapsed: 00:00:00.34
01:51:28 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20356

Elapsed: 00:00:00.00
01:51:28 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20356

Elapsed: 00:00:00.01
01:51:28 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20356

Elapsed: 00:00:00.00
01:51:28 SQL> 
01:51:28 SQL> DROP   TABLE jpy_ms10 ;

Table dropped.

Elapsed: 00:00:00.06
01:51:29 SQL> CREATE TABLE jpy_ms10 COMPRESS AS
01:51:29   2  SELECT
01:51:29   3  ydate
01:51:29   4  ,trend jpy_trend
01:51:29   5  ,g8    jpy_g8
01:51:29   6  ,gatt  jpy_gatt
01:51:29   7  ,gattn jpy_gattn
01:51:29   8  FROM modsrc
01:51:29   9  /

Table created.

Elapsed: 00:00:00.20
01:51:29 SQL> 
01:51:29 SQL> ANALYZE TABLE jpy_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
01:51:29 SQL> 
01:51:29 SQL> -- rpt
01:51:29 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 09:55:01 2010-12-24 01:45:00	 9386	  -1.185	  1
	-1 2010-09-17 00:15:01 2010-12-24 00:05:00	10874	 -1.0575       1.32

Elapsed: 00:00:00.02
01:51:29 SQL> SELECT jpy_trend,MIN(ydate),MAX(ydate),COUNT(jpy_trend),MIN(jpy_g8),MAX(jpy_g8)FROM jpy_ms10 GROUP BY jpy_trend;

 JPY_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(JPY_TREND) MIN(JPY_G8) MAX(JPY_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 09:55:01 2010-12-24 01:45:00	       9421	 -1.185 	  1
	-1 2010-09-17 00:15:01 2010-12-24 00:05:00	      10935	-1.0575        1.32

Elapsed: 00:00:00.01
01:51:29 SQL> 
01:51:29 SQL> -- I need a copy of q15 attributes
01:51:29 SQL> 
01:51:29 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.04
01:51:29 SQL> CREATE TABLE jpy_att COMPRESS AS
01:51:29   2  SELECT
01:51:29   3  ydate
01:51:29   4  ,att00 jpy_att00
01:51:29   5  ,att01 jpy_att01
01:51:29   6  ,att02 jpy_att02
01:51:29   7  ,att03 jpy_att03
01:51:29   8  ,att04 jpy_att04
01:51:29   9  ,att05 jpy_att05
01:51:29  10  ,att06 jpy_att06
01:51:29  11  ,att07 jpy_att07
01:51:29  12  ,att08 jpy_att08
01:51:29  13  ,att09 jpy_att09
01:51:29  14  ,att10 jpy_att10
01:51:29  15  ,att11 jpy_att11
01:51:29  16  ,att12 jpy_att12
01:51:29  17  ,att13 jpy_att13
01:51:29  18  ,att14 jpy_att14
01:51:29  19  ,att15 jpy_att15
01:51:29  20  ,att16 jpy_att16
01:51:29  21  ,att17 jpy_att17
01:51:29  22  ,att18 jpy_att18
01:51:29  23  ,att19 jpy_att19
01:51:29  24  ,att20 jpy_att20
01:51:29  25  ,att21 jpy_att21
01:51:29  26  ,att22 jpy_att22
01:51:29  27  ,att23 jpy_att23
01:51:29  28  ,att24 jpy_att24
01:51:29  29  ,att25 jpy_att25
01:51:29  30  ,att26 jpy_att26
01:51:29  31  ,att27 jpy_att27
01:51:29  32  ,att28 jpy_att28
01:51:29  33  ,att29 jpy_att29
01:51:29  34  ,att30 jpy_att30
01:51:29  35  ,att31 jpy_att31
01:51:29  36  ,att32 jpy_att32
01:51:29  37  ,att33 jpy_att33
01:51:29  38  ,att34 jpy_att34
01:51:29  39  ,att35 jpy_att35
01:51:29  40  ,att36 jpy_att36
01:51:29  41  FROM q15
01:51:29  42  /

Table created.

Elapsed: 00:00:00.19
01:51:29 SQL> 
01:51:29 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
01:51:30 SQL> 
01:51:30 SQL> -- rpt
01:51:30 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     20356

Elapsed: 00:00:00.01
01:51:30 SQL> 
01:51:30 SQL> --
01:51:30 SQL> -- cad10.sql
01:51:30 SQL> --
01:51:30 SQL> 
01:51:30 SQL> -- Creates views and tables for backtesting a forex SVM strategy
01:51:30 SQL> 
01:51:30 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.34
01:51:30 SQL> 
01:51:30 SQL> -- I created di5min here:
01:51:30 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
01:51:30 SQL> 
01:51:30 SQL> CREATE OR REPLACE VIEW q11 AS
01:51:30   2  SELECT
01:51:30   3  pair
01:51:30   4  ,ydate
01:51:30   5  ,prdate
01:51:30   6  ,rownum rnum -- acts as t in my time-series
01:51:30   7  ,clse
01:51:30   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
01:51:30   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
01:51:30  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
01:51:30  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
01:51:30  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
01:51:30  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
01:51:30  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
01:51:30  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
01:51:30  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
01:51:30  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
01:51:30  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
01:51:30  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
01:51:30  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
01:51:30  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
01:51:30  22  FROM di5min WHERE pair LIKE'%cad%'
01:51:30  23  ORDER BY ydate
01:51:30  24  /

View created.

Elapsed: 00:00:00.03
01:51:30 SQL> 
01:51:30 SQL> -- rpt
01:51:30 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_cad        20738

Elapsed: 00:00:00.34
01:51:30 SQL> 
01:51:30 SQL> -- Calc deltas and gains
01:51:30 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.19
01:51:31 SQL> 
01:51:31 SQL> CREATE TABLE q13 COMPRESS AS
01:51:31   2  SELECT
01:51:31   3  pair
01:51:31   4  ,ydate
01:51:31   5  ,prdate
01:51:31   6  ,rnum
01:51:31   7  ,ld8
01:51:31   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
01:51:31   9  -- step by 2
01:51:31  10  ,clse-lg6  d06
01:51:31  11  ,lg6 -lg8  d68
01:51:31  12  ,lg8 -lg10 d810
01:51:31  13  ,lg10-lg12 d1012
01:51:31  14  ,lg12-lg14 d1214
01:51:31  15  ,lg14-lg16 d1416
01:51:31  16  ,lg16-lg18 d1618
01:51:31  17  -- step by 4
01:51:31  18  ,lg6 -lg10 d610
01:51:31  19  ,lg8 -lg12 d812
01:51:31  20  ,lg10-lg14 d1014
01:51:31  21  ,lg12-lg16 d1216
01:51:31  22  --
01:51:31  23  ,ABS(clse-lg6 )dc6
01:51:31  24  ,ABS(clse-lg8 )dc8
01:51:31  25  ,ABS(clse-lg10)dc10
01:51:31  26  ,ABS(clse-lg12)dc12
01:51:31  27  ,ABS(clse-lg14)dc14
01:51:31  28  ,ABS(clse-lg16)dc16
01:51:31  29  ,ABS(clse-lg18)dc18
01:51:31  30  ,ABS(clse-lg20)dc20
01:51:31  31  ,ABS(clse-lg22)dc22
01:51:31  32  ,(ld8-clse) ug8
01:51:31  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
01:51:31  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
01:51:31  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
01:51:31  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
01:51:31  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
01:51:31  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
01:51:31  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
01:51:31  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
01:51:31  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
01:51:31  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
01:51:31  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
01:51:31  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
01:51:31  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
01:51:31  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
01:51:31  47  ,0+TO_CHAR(ydate,'D')d
01:51:31  48  ,0+TO_CHAR(ydate,'W')w
01:51:31  49  -- mpm stands for minutes-past-midnight:
01:51:31  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
01:51:31  51  FROM q11
01:51:31  52  -- I dont want any NULL values from the LAG() functions:
01:51:31  53  WHERE lg32 > 0
01:51:31  54  ORDER BY pair,ydate
01:51:31  55  /

Table created.

Elapsed: 00:00:01.71
01:51:32 SQL> 
01:51:32 SQL> -- rpt
01:51:32 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9413
	-1	   10941

Elapsed: 00:00:00.03
01:51:32 SQL> 
01:51:32 SQL> -- Calc gains and ntiles
01:51:32 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.13
01:51:32 SQL> CREATE TABLE q15 COMPRESS AS
01:51:32   2  SELECT
01:51:32   3  pair
01:51:32   4  ,ydate
01:51:32   5  ,prdate -- Should be unique
01:51:32   6  ,trend -- +1 or -1
01:51:32   7  -- Use NTILE() to derive some attributes
01:51:32   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
01:51:32   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
01:51:32  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
01:51:32  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
01:51:32  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
01:51:32  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
01:51:32  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
01:51:32  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
01:51:32  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
01:51:32  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
01:51:32  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
01:51:32  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
01:51:32  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
01:51:32  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
01:51:32  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
01:51:32  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
01:51:32  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
01:51:32  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
01:51:32  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
01:51:32  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
01:51:32  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
01:51:32  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
01:51:32  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
01:51:32  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
01:51:32  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
01:51:32  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
01:51:32  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
01:51:32  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
01:51:32  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
01:51:32  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
01:51:32  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
01:51:32  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
01:51:32  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
01:51:32  41  ,hh    att32
01:51:32  42  ,d     att33
01:51:32  43  ,w     att34
01:51:32  44  ,mpm   att35
01:51:32  45  ,trend att36
01:51:32  46  ,ug8 g8
01:51:32  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
01:51:32  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
01:51:32  49  FROM q13
01:51:32  50  ORDER BY pair,ydate
01:51:32  51  /

Table created.

Elapsed: 00:00:05.26
01:51:38 SQL> 
01:51:38 SQL> -- rpt
01:51:38 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
01:51:38   2  GROUP BY pair,trend,gatt,gattn
01:51:38   3  ORDER BY pair,trend,gatt,gattn
01:51:38   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_cad 	-1 nup nup -.00001694	    5668
usd_cad 	-1 nup up  -.00401082	    2623
usd_cad 	-1 up  nup .004678243	    2571
usd_cad 	-1			       0
usd_cad 	 1 nup nup -.00011765	    4661
usd_cad 	 1 nup up  -.00422882	    2753
usd_cad 	 1 up  nup .004613081	    1982
usd_cad 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
01:51:38 SQL> 
01:51:38 SQL> -- rpt
01:51:38 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_cad 2010-12-24 01:45:00

Elapsed: 00:00:00.01
01:51:38 SQL> 
01:51:38 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.17
01:51:38 SQL> CREATE TABLE modsrc COMPRESS AS
01:51:38   2  SELECT
01:51:38   3  pair
01:51:38   4  ,ydate
01:51:38   5  ,prdate
01:51:38   6  ,trend
01:51:38   7  ,g8
01:51:38   8  ,gatt
01:51:38   9  ,gattn
01:51:38  10  FROM q15
01:51:38  11  /

Table created.

Elapsed: 00:00:00.10
01:51:38 SQL> 
01:51:38 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
01:51:38 SQL> 
01:51:38 SQL> -- rpt
01:51:38 SQL> 
01:51:38 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20738

Elapsed: 00:00:00.34
01:51:39 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20354

Elapsed: 00:00:00.01
01:51:39 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20354

Elapsed: 00:00:00.00
01:51:39 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20354

Elapsed: 00:00:00.01
01:51:39 SQL> 
01:51:39 SQL> DROP   TABLE cad_ms10 ;

Table dropped.

Elapsed: 00:00:00.03
01:51:39 SQL> CREATE TABLE cad_ms10 COMPRESS AS
01:51:39   2  SELECT
01:51:39   3  ydate
01:51:39   4  ,trend cad_trend
01:51:39   5  ,g8    cad_g8
01:51:39   6  ,gatt  cad_gatt
01:51:39   7  ,gattn cad_gattn
01:51:39   8  FROM modsrc
01:51:39   9  /

Table created.

Elapsed: 00:00:00.07
01:51:39 SQL> 
01:51:39 SQL> ANALYZE TABLE cad_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.17
01:51:39 SQL> 
01:51:39 SQL> -- rpt
01:51:39 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 14:30:01 2010-12-24 01:45:00	 9396	  -.0122      .0159
	-1 2010-09-16 09:55:01 2010-12-24 00:20:00	10862	 -.01105      .0176

Elapsed: 00:00:00.02
01:51:39 SQL> SELECT cad_trend,MIN(ydate),MAX(ydate),COUNT(cad_trend),MIN(cad_g8),MAX(cad_g8)FROM cad_ms10 GROUP BY cad_trend;

 CAD_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(CAD_TREND) MIN(CAD_G8) MAX(CAD_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 14:30:01 2010-12-24 01:45:00	       9413	 -.0122       .0159
	-1 2010-09-16 09:55:01 2010-12-24 00:20:00	      10941	-.01105       .0176

Elapsed: 00:00:00.01
01:51:39 SQL> 
01:51:39 SQL> -- I need a copy of q15 attributes
01:51:39 SQL> 
01:51:39 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.04
01:51:39 SQL> CREATE TABLE cad_att COMPRESS AS
01:51:39   2  SELECT
01:51:39   3  ydate
01:51:39   4  ,att00 cad_att00
01:51:39   5  ,att01 cad_att01
01:51:39   6  ,att02 cad_att02
01:51:39   7  ,att03 cad_att03
01:51:39   8  ,att04 cad_att04
01:51:39   9  ,att05 cad_att05
01:51:39  10  ,att06 cad_att06
01:51:39  11  ,att07 cad_att07
01:51:39  12  ,att08 cad_att08
01:51:39  13  ,att09 cad_att09
01:51:39  14  ,att10 cad_att10
01:51:39  15  ,att11 cad_att11
01:51:39  16  ,att12 cad_att12
01:51:39  17  ,att13 cad_att13
01:51:39  18  ,att14 cad_att14
01:51:39  19  ,att15 cad_att15
01:51:39  20  ,att16 cad_att16
01:51:39  21  ,att17 cad_att17
01:51:39  22  ,att18 cad_att18
01:51:39  23  ,att19 cad_att19
01:51:39  24  ,att20 cad_att20
01:51:39  25  ,att21 cad_att21
01:51:39  26  ,att22 cad_att22
01:51:39  27  ,att23 cad_att23
01:51:39  28  ,att24 cad_att24
01:51:39  29  ,att25 cad_att25
01:51:39  30  ,att26 cad_att26
01:51:39  31  ,att27 cad_att27
01:51:39  32  ,att28 cad_att28
01:51:39  33  ,att29 cad_att29
01:51:39  34  ,att30 cad_att30
01:51:39  35  ,att31 cad_att31
01:51:39  36  ,att32 cad_att32
01:51:39  37  ,att33 cad_att33
01:51:39  38  ,att34 cad_att34
01:51:39  39  ,att35 cad_att35
01:51:39  40  ,att36 cad_att36
01:51:39  41  FROM q15
01:51:39  42  /

Table created.

Elapsed: 00:00:00.17
01:51:39 SQL> 
01:51:39 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.49
01:51:40 SQL> 
01:51:40 SQL> -- rpt
01:51:40 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     20354

Elapsed: 00:00:00.00
01:51:40 SQL> 
01:51:40 SQL> --
01:51:40 SQL> -- chf10.sql
01:51:40 SQL> --
01:51:40 SQL> 
01:51:40 SQL> -- Creates views and tables for backtesting a forex SVM strategy
01:51:40 SQL> 
01:51:40 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.31
01:51:40 SQL> 
01:51:40 SQL> -- I created di5min here:
01:51:40 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
01:51:40 SQL> 
01:51:40 SQL> CREATE OR REPLACE VIEW q11 AS
01:51:40   2  SELECT
01:51:40   3  pair
01:51:40   4  ,ydate
01:51:40   5  ,prdate
01:51:40   6  ,rownum rnum -- acts as t in my time-series
01:51:40   7  ,clse
01:51:40   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
01:51:40   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
01:51:40  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
01:51:40  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
01:51:40  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
01:51:40  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
01:51:40  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
01:51:40  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
01:51:40  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
01:51:40  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
01:51:40  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
01:51:40  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
01:51:40  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
01:51:40  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
01:51:40  22  FROM di5min WHERE pair LIKE'%chf%'
01:51:40  23  ORDER BY ydate
01:51:40  24  /

View created.

Elapsed: 00:00:00.05
01:51:40 SQL> 
01:51:40 SQL> -- rpt
01:51:40 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_chf        20741

Elapsed: 00:00:00.36
01:51:40 SQL> 
01:51:40 SQL> -- Calc deltas and gains
01:51:40 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.31
01:51:41 SQL> 
01:51:41 SQL> CREATE TABLE q13 COMPRESS AS
01:51:41   2  SELECT
01:51:41   3  pair
01:51:41   4  ,ydate
01:51:41   5  ,prdate
01:51:41   6  ,rnum
01:51:41   7  ,ld8
01:51:41   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
01:51:41   9  -- step by 2
01:51:41  10  ,clse-lg6  d06
01:51:41  11  ,lg6 -lg8  d68
01:51:41  12  ,lg8 -lg10 d810
01:51:41  13  ,lg10-lg12 d1012
01:51:41  14  ,lg12-lg14 d1214
01:51:41  15  ,lg14-lg16 d1416
01:51:41  16  ,lg16-lg18 d1618
01:51:41  17  -- step by 4
01:51:41  18  ,lg6 -lg10 d610
01:51:41  19  ,lg8 -lg12 d812
01:51:41  20  ,lg10-lg14 d1014
01:51:41  21  ,lg12-lg16 d1216
01:51:41  22  --
01:51:41  23  ,ABS(clse-lg6 )dc6
01:51:41  24  ,ABS(clse-lg8 )dc8
01:51:41  25  ,ABS(clse-lg10)dc10
01:51:41  26  ,ABS(clse-lg12)dc12
01:51:41  27  ,ABS(clse-lg14)dc14
01:51:41  28  ,ABS(clse-lg16)dc16
01:51:41  29  ,ABS(clse-lg18)dc18
01:51:41  30  ,ABS(clse-lg20)dc20
01:51:41  31  ,ABS(clse-lg22)dc22
01:51:41  32  ,(ld8-clse) ug8
01:51:41  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
01:51:41  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
01:51:41  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
01:51:41  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
01:51:41  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
01:51:41  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
01:51:41  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
01:51:41  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
01:51:41  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
01:51:41  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
01:51:41  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
01:51:41  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
01:51:41  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
01:51:41  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
01:51:41  47  ,0+TO_CHAR(ydate,'D')d
01:51:41  48  ,0+TO_CHAR(ydate,'W')w
01:51:41  49  -- mpm stands for minutes-past-midnight:
01:51:41  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
01:51:41  51  FROM q11
01:51:41  52  -- I dont want any NULL values from the LAG() functions:
01:51:41  53  WHERE lg32 > 0
01:51:41  54  ORDER BY pair,ydate
01:51:41  55  /

Table created.

Elapsed: 00:00:01.84
01:51:42 SQL> 
01:51:42 SQL> -- rpt
01:51:42 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9613
	-1	   10744

Elapsed: 00:00:00.02
01:51:42 SQL> 
01:51:42 SQL> -- Calc gains and ntiles
01:51:42 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.18
01:51:43 SQL> CREATE TABLE q15 COMPRESS AS
01:51:43   2  SELECT
01:51:43   3  pair
01:51:43   4  ,ydate
01:51:43   5  ,prdate -- Should be unique
01:51:43   6  ,trend -- +1 or -1
01:51:43   7  -- Use NTILE() to derive some attributes
01:51:43   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
01:51:43   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
01:51:43  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
01:51:43  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
01:51:43  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
01:51:43  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
01:51:43  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
01:51:43  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
01:51:43  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
01:51:43  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
01:51:43  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
01:51:43  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
01:51:43  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
01:51:43  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
01:51:43  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
01:51:43  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
01:51:43  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
01:51:43  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
01:51:43  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
01:51:43  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
01:51:43  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
01:51:43  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
01:51:43  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
01:51:43  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
01:51:43  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
01:51:43  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
01:51:43  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
01:51:43  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
01:51:43  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
01:51:43  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
01:51:43  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
01:51:43  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
01:51:43  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
01:51:43  41  ,hh    att32
01:51:43  42  ,d     att33
01:51:43  43  ,w     att34
01:51:43  44  ,mpm   att35
01:51:43  45  ,trend att36
01:51:43  46  ,ug8 g8
01:51:43  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
01:51:43  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
01:51:43  49  FROM q13
01:51:43  50  ORDER BY pair,ydate
01:51:43  51  /

Table created.

Elapsed: 00:00:05.44
01:51:48 SQL> 
01:51:48 SQL> -- rpt
01:51:48 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
01:51:48   2  GROUP BY pair,trend,gatt,gattn
01:51:48   3  ORDER BY pair,trend,gatt,gattn
01:51:48   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_chf 	-1 nup nup .000029705	    4879
usd_chf 	-1 nup up   -.0049528	    3138
usd_chf 	-1 up  nup .005104982	    2667
usd_chf 	-1			       0
usd_chf 	 1 nup nup -.00001253	    4544
usd_chf 	 1 nup up  -.00454089	    2894
usd_chf 	 1 up  nup .004674118	    2139
usd_chf 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
01:51:48 SQL> 
01:51:48 SQL> -- rpt
01:51:48 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_chf 2010-12-24 01:45:00

Elapsed: 00:00:00.02
01:51:48 SQL> 
01:51:48 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
01:51:48 SQL> CREATE TABLE modsrc COMPRESS AS
01:51:48   2  SELECT
01:51:48   3  pair
01:51:48   4  ,ydate
01:51:48   5  ,prdate
01:51:48   6  ,trend
01:51:48   7  ,g8
01:51:48   8  ,gatt
01:51:48   9  ,gattn
01:51:48  10  FROM q15
01:51:48  11  /

Table created.

Elapsed: 00:00:00.11
01:51:48 SQL> 
01:51:48 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.22
01:51:49 SQL> 
01:51:49 SQL> -- rpt
01:51:49 SQL> 
01:51:49 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20741

Elapsed: 00:00:00.35
01:51:49 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20357

Elapsed: 00:00:00.01
01:51:49 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20357

Elapsed: 00:00:00.00
01:51:49 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20357

Elapsed: 00:00:00.00
01:51:49 SQL> 
01:51:49 SQL> DROP   TABLE chf_ms10 ;

Table dropped.

Elapsed: 00:00:00.03
01:51:49 SQL> CREATE TABLE chf_ms10 COMPRESS AS
01:51:49   2  SELECT
01:51:49   3  ydate
01:51:49   4  ,trend chf_trend
01:51:49   5  ,g8    chf_g8
01:51:49   6  ,gatt  chf_gatt
01:51:49   7  ,gattn chf_gattn
01:51:49   8  FROM modsrc
01:51:49   9  /

Table created.

Elapsed: 00:00:00.11
01:51:49 SQL> 
01:51:49 SQL> ANALYZE TABLE chf_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
01:51:49 SQL> 
01:51:49 SQL> -- rpt
01:51:49 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 09:55:01 2010-12-23 21:45:00	 9577	 -.01775      .0155
	-1 2010-09-16 10:55:01 2010-12-24 01:45:00	10684	 -.01825     .01545

Elapsed: 00:00:00.02
01:51:49 SQL> SELECT chf_trend,MIN(ydate),MAX(ydate),COUNT(chf_trend),MIN(chf_g8),MAX(chf_g8)FROM chf_ms10 GROUP BY chf_trend;

 CHF_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(CHF_TREND) MIN(CHF_G8) MAX(CHF_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 09:55:01 2010-12-23 21:45:00	       9613	-.01775       .0155
	-1 2010-09-16 10:55:01 2010-12-24 01:45:00	      10744	-.01825      .01545

Elapsed: 00:00:00.01
01:51:49 SQL> 
01:51:49 SQL> -- I need a copy of q15 attributes
01:51:49 SQL> 
01:51:49 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.04
01:51:49 SQL> CREATE TABLE chf_att COMPRESS AS
01:51:49   2  SELECT
01:51:49   3  ydate
01:51:49   4  ,att00 chf_att00
01:51:49   5  ,att01 chf_att01
01:51:49   6  ,att02 chf_att02
01:51:49   7  ,att03 chf_att03
01:51:49   8  ,att04 chf_att04
01:51:49   9  ,att05 chf_att05
01:51:49  10  ,att06 chf_att06
01:51:49  11  ,att07 chf_att07
01:51:49  12  ,att08 chf_att08
01:51:49  13  ,att09 chf_att09
01:51:49  14  ,att10 chf_att10
01:51:49  15  ,att11 chf_att11
01:51:49  16  ,att12 chf_att12
01:51:49  17  ,att13 chf_att13
01:51:49  18  ,att14 chf_att14
01:51:49  19  ,att15 chf_att15
01:51:49  20  ,att16 chf_att16
01:51:49  21  ,att17 chf_att17
01:51:49  22  ,att18 chf_att18
01:51:49  23  ,att19 chf_att19
01:51:49  24  ,att20 chf_att20
01:51:49  25  ,att21 chf_att21
01:51:49  26  ,att22 chf_att22
01:51:49  27  ,att23 chf_att23
01:51:49  28  ,att24 chf_att24
01:51:49  29  ,att25 chf_att25
01:51:49  30  ,att26 chf_att26
01:51:49  31  ,att27 chf_att27
01:51:49  32  ,att28 chf_att28
01:51:49  33  ,att29 chf_att29
01:51:49  34  ,att30 chf_att30
01:51:49  35  ,att31 chf_att31
01:51:49  36  ,att32 chf_att32
01:51:49  37  ,att33 chf_att33
01:51:49  38  ,att34 chf_att34
01:51:49  39  ,att35 chf_att35
01:51:49  40  ,att36 chf_att36
01:51:49  41  FROM q15
01:51:49  42  /

Table created.

Elapsed: 00:00:00.18
01:51:49 SQL> 
01:51:49 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.43
01:51:50 SQL> 
01:51:50 SQL> -- rpt
01:51:50 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     20357

Elapsed: 00:00:00.01
01:51:50 SQL> 
01:51:50 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
