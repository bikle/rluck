
SQL*Plus: Release 11.2.0.1.0 Production on Fri Dec 24 00:59:13 2010

Copyright (c) 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

00:59:13 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';

Session altered.

Elapsed: 00:00:00.00
00:59:13 SQL> 00:59:13 SQL> --
00:59:13 SQL> -- eur10.sql
00:59:13 SQL> --
00:59:13 SQL> 
00:59:13 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:59:13 SQL> 
00:59:13 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.02
00:59:13 SQL> 
00:59:13 SQL> -- I created di5min here:
00:59:13 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
00:59:13 SQL> 
00:59:13 SQL> CREATE OR REPLACE VIEW q11 AS
00:59:13   2  SELECT
00:59:13   3  pair
00:59:13   4  ,ydate
00:59:13   5  ,prdate
00:59:13   6  ,rownum rnum -- acts as t in my time-series
00:59:13   7  ,clse
00:59:13   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
00:59:13   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
00:59:13  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
00:59:13  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
00:59:13  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
00:59:13  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
00:59:13  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
00:59:13  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
00:59:13  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
00:59:13  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
00:59:13  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
00:59:13  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
00:59:13  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
00:59:13  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
00:59:13  22  FROM di5min WHERE pair LIKE'%eur%'
00:59:13  23  ORDER BY ydate
00:59:13  24  /

View created.

Elapsed: 00:00:00.05
00:59:13 SQL> 
00:59:13 SQL> -- rpt
00:59:13 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
eur_usd        20743

Elapsed: 00:00:00.38
00:59:14 SQL> 
00:59:14 SQL> -- Calc deltas and gains
00:59:14 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.25
00:59:14 SQL> 
00:59:14 SQL> CREATE TABLE q13 COMPRESS AS
00:59:14   2  SELECT
00:59:14   3  pair
00:59:14   4  ,ydate
00:59:14   5  ,prdate
00:59:14   6  ,rnum
00:59:14   7  ,ld8
00:59:14   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
00:59:14   9  -- step by 2
00:59:14  10  ,clse-lg6  d06
00:59:14  11  ,lg6 -lg8  d68
00:59:14  12  ,lg8 -lg10 d810
00:59:14  13  ,lg10-lg12 d1012
00:59:14  14  ,lg12-lg14 d1214
00:59:14  15  ,lg14-lg16 d1416
00:59:14  16  ,lg16-lg18 d1618
00:59:14  17  -- step by 4
00:59:14  18  ,lg6 -lg10 d610
00:59:14  19  ,lg8 -lg12 d812
00:59:14  20  ,lg10-lg14 d1014
00:59:14  21  ,lg12-lg16 d1216
00:59:14  22  --
00:59:14  23  ,ABS(clse-lg6 )dc6
00:59:14  24  ,ABS(clse-lg8 )dc8
00:59:14  25  ,ABS(clse-lg10)dc10
00:59:14  26  ,ABS(clse-lg12)dc12
00:59:14  27  ,ABS(clse-lg14)dc14
00:59:14  28  ,ABS(clse-lg16)dc16
00:59:14  29  ,ABS(clse-lg18)dc18
00:59:14  30  ,ABS(clse-lg20)dc20
00:59:14  31  ,ABS(clse-lg22)dc22
00:59:14  32  ,(ld8-clse) ug8
00:59:14  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
00:59:14  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
00:59:14  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
00:59:14  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
00:59:14  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
00:59:14  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
00:59:14  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
00:59:14  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
00:59:14  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
00:59:14  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
00:59:14  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
00:59:14  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
00:59:14  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
00:59:14  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:59:14  47  ,0+TO_CHAR(ydate,'D')d
00:59:14  48  ,0+TO_CHAR(ydate,'W')w
00:59:14  49  -- mpm stands for minutes-past-midnight:
00:59:14  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:59:14  51  FROM q11
00:59:14  52  -- I dont want any NULL values from the LAG() functions:
00:59:14  53  WHERE lg32 > 0
00:59:14  54  ORDER BY pair,ydate
00:59:14  55  /

Table created.

Elapsed: 00:00:01.97
00:59:16 SQL> 
00:59:16 SQL> -- rpt
00:59:16 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	   10121
	-1	   10238

Elapsed: 00:00:00.03
00:59:16 SQL> 
00:59:16 SQL> -- Calc gains and ntiles
00:59:16 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.06
00:59:16 SQL> CREATE TABLE q15 COMPRESS AS
00:59:16   2  SELECT
00:59:16   3  pair
00:59:16   4  ,ydate
00:59:16   5  ,prdate -- Should be unique
00:59:16   6  ,trend -- +1 or -1
00:59:16   7  -- Use NTILE() to derive some attributes
00:59:16   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
00:59:16   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
00:59:16  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
00:59:16  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
00:59:16  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
00:59:16  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
00:59:16  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
00:59:16  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
00:59:16  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
00:59:16  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
00:59:16  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
00:59:16  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
00:59:16  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
00:59:16  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
00:59:16  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
00:59:16  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
00:59:16  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
00:59:16  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
00:59:16  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
00:59:16  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
00:59:16  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
00:59:16  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
00:59:16  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
00:59:16  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
00:59:16  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
00:59:16  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
00:59:16  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
00:59:16  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
00:59:16  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
00:59:16  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
00:59:16  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
00:59:16  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
00:59:16  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
00:59:16  41  ,hh    att32
00:59:16  42  ,d     att33
00:59:16  43  ,w     att34
00:59:16  44  ,mpm   att35
00:59:16  45  ,trend att36
00:59:16  46  ,ug8 g8
00:59:16  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
00:59:16  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
00:59:16  49  FROM q13
00:59:16  50  ORDER BY pair,ydate
00:59:16  51  /

Table created.

Elapsed: 00:00:05.35
00:59:21 SQL> 
00:59:21 SQL> -- rpt
00:59:21 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
00:59:21   2  GROUP BY pair,trend,gatt,gattn
00:59:21   3  ORDER BY pair,trend,gatt,gattn
00:59:21   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
eur_usd 	-1 nup nup .000025232	    3020
eur_usd 	-1 nup up  -.00602802	    3651
eur_usd 	-1 up  nup .005760723	    3560
eur_usd 	-1			       0
eur_usd 	 1 nup nup -.00010189	    2951
eur_usd 	 1 nup up  -.00625098	    3473
eur_usd 	 1 up  nup .006584254	    3608
eur_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
00:59:22 SQL> 
00:59:22 SQL> -- rpt
00:59:22 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
eur_usd 2010-12-24 00:55:00

Elapsed: 00:00:00.02
00:59:22 SQL> 
00:59:22 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.04
00:59:22 SQL> CREATE TABLE modsrc COMPRESS AS
00:59:22   2  SELECT
00:59:22   3  pair
00:59:22   4  ,ydate
00:59:22   5  ,prdate
00:59:22   6  ,trend
00:59:22   7  ,g8
00:59:22   8  ,gatt
00:59:22   9  ,gattn
00:59:22  10  FROM q15
00:59:22  11  /

Table created.

Elapsed: 00:00:00.10
00:59:22 SQL> 
00:59:22 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
00:59:22 SQL> 
00:59:22 SQL> -- rpt
00:59:22 SQL> 
00:59:22 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20743

Elapsed: 00:00:00.35
00:59:22 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20359

Elapsed: 00:00:00.00
00:59:22 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20359

Elapsed: 00:00:00.01
00:59:22 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20359

Elapsed: 00:00:00.00
00:59:22 SQL> 
00:59:22 SQL> DROP   TABLE eur_ms10 ;

Table dropped.

Elapsed: 00:00:00.03
00:59:22 SQL> CREATE TABLE eur_ms10 COMPRESS AS
00:59:22   2  SELECT
00:59:22   3  ydate
00:59:22   4  ,trend eur_trend
00:59:22   5  ,g8    eur_g8
00:59:22   6  ,gatt  eur_gatt
00:59:22   7  ,gattn eur_gattn
00:59:22   8  FROM modsrc
00:59:22   9  /

Table created.

Elapsed: 00:00:00.06
00:59:22 SQL> 
00:59:22 SQL> ANALYZE TABLE eur_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
00:59:22 SQL> 
00:59:22 SQL> -- rpt
00:59:22 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 09:00:01 2010-12-24 00:55:00	10032	  -.0218     .02165
	-1 2010-09-16 17:15:01 2010-12-24 00:50:00	10231	 -.02085      .0196

Elapsed: 00:00:00.02
00:59:23 SQL> SELECT eur_trend,MIN(ydate),MAX(ydate),COUNT(eur_trend),MIN(eur_g8),MAX(eur_g8)FROM eur_ms10 GROUP BY eur_trend;

 EUR_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(EUR_TREND) MIN(EUR_G8) MAX(EUR_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 09:00:01 2010-12-24 00:55:00	      10121	 -.0218      .02165
	-1 2010-09-16 17:15:01 2010-12-24 00:50:00	      10238	-.02085       .0196

Elapsed: 00:00:00.01
00:59:23 SQL> 
00:59:23 SQL> -- I need a copy of q15 attributes
00:59:23 SQL> 
00:59:23 SQL> DROP   TABLE eur_att;

Table dropped.

Elapsed: 00:00:00.04
00:59:23 SQL> CREATE TABLE eur_att COMPRESS AS
00:59:23   2  SELECT
00:59:23   3  ydate
00:59:23   4  ,att00 eur_att00
00:59:23   5  ,att01 eur_att01
00:59:23   6  ,att02 eur_att02
00:59:23   7  ,att03 eur_att03
00:59:23   8  ,att04 eur_att04
00:59:23   9  ,att05 eur_att05
00:59:23  10  ,att06 eur_att06
00:59:23  11  ,att07 eur_att07
00:59:23  12  ,att08 eur_att08
00:59:23  13  ,att09 eur_att09
00:59:23  14  ,att10 eur_att10
00:59:23  15  ,att11 eur_att11
00:59:23  16  ,att12 eur_att12
00:59:23  17  ,att13 eur_att13
00:59:23  18  ,att14 eur_att14
00:59:23  19  ,att15 eur_att15
00:59:23  20  ,att16 eur_att16
00:59:23  21  ,att17 eur_att17
00:59:23  22  ,att18 eur_att18
00:59:23  23  ,att19 eur_att19
00:59:23  24  ,att20 eur_att20
00:59:23  25  ,att21 eur_att21
00:59:23  26  ,att22 eur_att22
00:59:23  27  ,att23 eur_att23
00:59:23  28  ,att24 eur_att24
00:59:23  29  ,att25 eur_att25
00:59:23  30  ,att26 eur_att26
00:59:23  31  ,att27 eur_att27
00:59:23  32  ,att28 eur_att28
00:59:23  33  ,att29 eur_att29
00:59:23  34  ,att30 eur_att30
00:59:23  35  ,att31 eur_att31
00:59:23  36  ,att32 eur_att32
00:59:23  37  ,att33 eur_att33
00:59:23  38  ,att34 eur_att34
00:59:23  39  ,att35 eur_att35
00:59:23  40  ,att36 eur_att36
00:59:23  41  FROM q15
00:59:23  42  /

Table created.

Elapsed: 00:00:00.16
00:59:23 SQL> 
00:59:23 SQL> ANALYZE TABLE eur_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
00:59:23 SQL> 
00:59:23 SQL> -- rpt
00:59:23 SQL> SELECT COUNT(*)FROM eur_att;

  COUNT(*)
----------
     20359

Elapsed: 00:00:00.00
00:59:23 SQL> 
00:59:23 SQL> --
00:59:23 SQL> -- aud10.sql
00:59:23 SQL> --
00:59:23 SQL> 
00:59:23 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:59:23 SQL> 
00:59:23 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.33
00:59:24 SQL> 
00:59:24 SQL> -- I created di5min here:
00:59:24 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
00:59:24 SQL> 
00:59:24 SQL> CREATE OR REPLACE VIEW q11 AS
00:59:24   2  SELECT
00:59:24   3  pair
00:59:24   4  ,ydate
00:59:24   5  ,prdate
00:59:24   6  ,rownum rnum -- acts as t in my time-series
00:59:24   7  ,clse
00:59:24   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
00:59:24   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
00:59:24  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
00:59:24  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
00:59:24  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
00:59:24  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
00:59:24  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
00:59:24  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
00:59:24  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
00:59:24  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
00:59:24  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
00:59:24  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
00:59:24  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
00:59:24  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
00:59:24  22  FROM di5min WHERE pair LIKE'%aud%'
00:59:24  23  ORDER BY ydate
00:59:24  24  /

View created.

Elapsed: 00:00:00.05
00:59:24 SQL> 
00:59:24 SQL> -- rpt
00:59:24 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
aud_usd        20740

Elapsed: 00:00:00.34
00:59:24 SQL> 
00:59:24 SQL> -- Calc deltas and gains
00:59:24 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.19
00:59:24 SQL> 
00:59:24 SQL> CREATE TABLE q13 COMPRESS AS
00:59:24   2  SELECT
00:59:24   3  pair
00:59:24   4  ,ydate
00:59:24   5  ,prdate
00:59:24   6  ,rnum
00:59:24   7  ,ld8
00:59:24   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
00:59:24   9  -- step by 2
00:59:24  10  ,clse-lg6  d06
00:59:24  11  ,lg6 -lg8  d68
00:59:24  12  ,lg8 -lg10 d810
00:59:24  13  ,lg10-lg12 d1012
00:59:24  14  ,lg12-lg14 d1214
00:59:24  15  ,lg14-lg16 d1416
00:59:24  16  ,lg16-lg18 d1618
00:59:24  17  -- step by 4
00:59:24  18  ,lg6 -lg10 d610
00:59:24  19  ,lg8 -lg12 d812
00:59:24  20  ,lg10-lg14 d1014
00:59:24  21  ,lg12-lg16 d1216
00:59:24  22  --
00:59:24  23  ,ABS(clse-lg6 )dc6
00:59:24  24  ,ABS(clse-lg8 )dc8
00:59:24  25  ,ABS(clse-lg10)dc10
00:59:24  26  ,ABS(clse-lg12)dc12
00:59:24  27  ,ABS(clse-lg14)dc14
00:59:24  28  ,ABS(clse-lg16)dc16
00:59:24  29  ,ABS(clse-lg18)dc18
00:59:24  30  ,ABS(clse-lg20)dc20
00:59:24  31  ,ABS(clse-lg22)dc22
00:59:24  32  ,(ld8-clse) ug8
00:59:24  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
00:59:24  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
00:59:24  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
00:59:24  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
00:59:24  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
00:59:24  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
00:59:24  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
00:59:24  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
00:59:24  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
00:59:24  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
00:59:24  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
00:59:24  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
00:59:24  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
00:59:24  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:59:24  47  ,0+TO_CHAR(ydate,'D')d
00:59:24  48  ,0+TO_CHAR(ydate,'W')w
00:59:24  49  -- mpm stands for minutes-past-midnight:
00:59:24  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:59:24  51  FROM q11
00:59:24  52  -- I dont want any NULL values from the LAG() functions:
00:59:24  53  WHERE lg32 > 0
00:59:24  54  ORDER BY pair,ydate
00:59:24  55  /

Table created.

Elapsed: 00:00:01.68
00:59:26 SQL> 
00:59:26 SQL> -- rpt
00:59:26 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	   10851
	-1	    9505

Elapsed: 00:00:00.04
00:59:26 SQL> 
00:59:26 SQL> -- Calc gains and ntiles
00:59:26 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.13
00:59:26 SQL> CREATE TABLE q15 COMPRESS AS
00:59:26   2  SELECT
00:59:26   3  pair
00:59:26   4  ,ydate
00:59:26   5  ,prdate -- Should be unique
00:59:26   6  ,trend -- +1 or -1
00:59:26   7  -- Use NTILE() to derive some attributes
00:59:26   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
00:59:26   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
00:59:26  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
00:59:26  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
00:59:26  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
00:59:26  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
00:59:26  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
00:59:26  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
00:59:26  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
00:59:26  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
00:59:26  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
00:59:26  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
00:59:26  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
00:59:26  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
00:59:26  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
00:59:26  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
00:59:26  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
00:59:26  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
00:59:26  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
00:59:26  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
00:59:26  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
00:59:26  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
00:59:26  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
00:59:26  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
00:59:26  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
00:59:26  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
00:59:26  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
00:59:26  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
00:59:26  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
00:59:26  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
00:59:26  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
00:59:26  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
00:59:26  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
00:59:26  41  ,hh    att32
00:59:26  42  ,d     att33
00:59:26  43  ,w     att34
00:59:26  44  ,mpm   att35
00:59:26  45  ,trend att36
00:59:26  46  ,ug8 g8
00:59:26  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
00:59:26  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
00:59:26  49  FROM q13
00:59:26  50  ORDER BY pair,ydate
00:59:26  51  /

Table created.

Elapsed: 00:00:05.48
00:59:31 SQL> 
00:59:31 SQL> -- rpt
00:59:31 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
00:59:31   2  GROUP BY pair,trend,gatt,gattn
00:59:31   3  ORDER BY pair,trend,gatt,gattn
00:59:31   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
aud_usd 	-1 nup nup .000036956	    3536
aud_usd 	-1 nup up   -.0052475	    2531
aud_usd 	-1 up  nup .005173898	    3402
aud_usd 	-1			       0
aud_usd 	 1 nup nup .000031522	    4347
aud_usd 	 1 nup up  -.00499852	    3065
aud_usd 	 1 up  nup .005093811	    3379
aud_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
00:59:31 SQL> 
00:59:31 SQL> -- rpt
00:59:31 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
aud_usd 2010-12-24 00:55:00

Elapsed: 00:00:00.01
00:59:31 SQL> 
00:59:31 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
00:59:32 SQL> CREATE TABLE modsrc COMPRESS AS
00:59:32   2  SELECT
00:59:32   3  pair
00:59:32   4  ,ydate
00:59:32   5  ,prdate
00:59:32   6  ,trend
00:59:32   7  ,g8
00:59:32   8  ,gatt
00:59:32   9  ,gattn
00:59:32  10  FROM q15
00:59:32  11  /

Table created.

Elapsed: 00:00:00.09
00:59:32 SQL> 
00:59:32 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.30
00:59:32 SQL> 
00:59:32 SQL> -- rpt
00:59:32 SQL> 
00:59:32 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20740

Elapsed: 00:00:00.34
00:59:32 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20356

Elapsed: 00:00:00.01
00:59:32 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20356

Elapsed: 00:00:00.00
00:59:32 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20356

Elapsed: 00:00:00.00
00:59:32 SQL> 
00:59:32 SQL> DROP   TABLE aud_ms10 ;

Table dropped.

Elapsed: 00:00:00.04
00:59:32 SQL> CREATE TABLE aud_ms10 COMPRESS AS
00:59:32   2  SELECT
00:59:32   3  ydate
00:59:32   4  ,trend aud_trend
00:59:32   5  ,g8    aud_g8
00:59:32   6  ,gatt  aud_gatt
00:59:32   7  ,gattn aud_gattn
00:59:32   8  FROM modsrc
00:59:32   9  /

Table created.

Elapsed: 00:00:00.06
00:59:32 SQL> 
00:59:32 SQL> ANALYZE TABLE aud_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
00:59:33 SQL> 
00:59:33 SQL> -- rpt
00:59:33 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 09:00:01 2010-12-24 00:05:00	10791	  -.0203      .0136
	-1 2010-09-16 09:05:01 2010-12-24 00:55:00	 9469	  -.0196      .0148

Elapsed: 00:00:00.01
00:59:33 SQL> SELECT aud_trend,MIN(ydate),MAX(ydate),COUNT(aud_trend),MIN(aud_g8),MAX(aud_g8)FROM aud_ms10 GROUP BY aud_trend;

 AUD_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(AUD_TREND) MIN(AUD_G8) MAX(AUD_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 09:00:01 2010-12-24 00:05:00	      10851	 -.0203       .0136
	-1 2010-09-16 09:05:01 2010-12-24 00:55:00	       9505	 -.0196       .0148

Elapsed: 00:00:00.01
00:59:33 SQL> 
00:59:33 SQL> -- I need a copy of q15 attributes
00:59:33 SQL> 
00:59:33 SQL> DROP   TABLE aud_att;

Table dropped.

Elapsed: 00:00:00.04
00:59:33 SQL> CREATE TABLE aud_att COMPRESS AS
00:59:33   2  SELECT
00:59:33   3  ydate
00:59:33   4  ,att00 aud_att00
00:59:33   5  ,att01 aud_att01
00:59:33   6  ,att02 aud_att02
00:59:33   7  ,att03 aud_att03
00:59:33   8  ,att04 aud_att04
00:59:33   9  ,att05 aud_att05
00:59:33  10  ,att06 aud_att06
00:59:33  11  ,att07 aud_att07
00:59:33  12  ,att08 aud_att08
00:59:33  13  ,att09 aud_att09
00:59:33  14  ,att10 aud_att10
00:59:33  15  ,att11 aud_att11
00:59:33  16  ,att12 aud_att12
00:59:33  17  ,att13 aud_att13
00:59:33  18  ,att14 aud_att14
00:59:33  19  ,att15 aud_att15
00:59:33  20  ,att16 aud_att16
00:59:33  21  ,att17 aud_att17
00:59:33  22  ,att18 aud_att18
00:59:33  23  ,att19 aud_att19
00:59:33  24  ,att20 aud_att20
00:59:33  25  ,att21 aud_att21
00:59:33  26  ,att22 aud_att22
00:59:33  27  ,att23 aud_att23
00:59:33  28  ,att24 aud_att24
00:59:33  29  ,att25 aud_att25
00:59:33  30  ,att26 aud_att26
00:59:33  31  ,att27 aud_att27
00:59:33  32  ,att28 aud_att28
00:59:33  33  ,att29 aud_att29
00:59:33  34  ,att30 aud_att30
00:59:33  35  ,att31 aud_att31
00:59:33  36  ,att32 aud_att32
00:59:33  37  ,att33 aud_att33
00:59:33  38  ,att34 aud_att34
00:59:33  39  ,att35 aud_att35
00:59:33  40  ,att36 aud_att36
00:59:33  41  FROM q15
00:59:33  42  /

Table created.

Elapsed: 00:00:00.18
00:59:33 SQL> 
00:59:33 SQL> ANALYZE TABLE aud_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:01.00
00:59:34 SQL> 
00:59:34 SQL> -- rpt
00:59:34 SQL> SELECT COUNT(*)FROM aud_att;

  COUNT(*)
----------
     20356

Elapsed: 00:00:00.00
00:59:34 SQL> 
00:59:34 SQL> --
00:59:34 SQL> -- gbp10.sql
00:59:34 SQL> --
00:59:34 SQL> 
00:59:34 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:59:34 SQL> 
00:59:34 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.36
00:59:34 SQL> 
00:59:34 SQL> -- I created di5min here:
00:59:34 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
00:59:34 SQL> 
00:59:34 SQL> CREATE OR REPLACE VIEW q11 AS
00:59:34   2  SELECT
00:59:34   3  pair
00:59:34   4  ,ydate
00:59:34   5  ,prdate
00:59:34   6  ,rownum rnum -- acts as t in my time-series
00:59:34   7  ,clse
00:59:34   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
00:59:34   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
00:59:34  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
00:59:34  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
00:59:34  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
00:59:34  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
00:59:34  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
00:59:34  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
00:59:34  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
00:59:34  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
00:59:34  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
00:59:34  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
00:59:34  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
00:59:34  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
00:59:34  22  FROM di5min WHERE pair LIKE'%gbp%'
00:59:34  23  ORDER BY ydate
00:59:34  24  /

View created.

Elapsed: 00:00:00.06
00:59:34 SQL> 
00:59:34 SQL> -- rpt
00:59:34 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
gbp_usd        20742

Elapsed: 00:00:00.35
00:59:35 SQL> 
00:59:35 SQL> -- Calc deltas and gains
00:59:35 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.25
00:59:35 SQL> 
00:59:35 SQL> CREATE TABLE q13 COMPRESS AS
00:59:35   2  SELECT
00:59:35   3  pair
00:59:35   4  ,ydate
00:59:35   5  ,prdate
00:59:35   6  ,rnum
00:59:35   7  ,ld8
00:59:35   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
00:59:35   9  -- step by 2
00:59:35  10  ,clse-lg6  d06
00:59:35  11  ,lg6 -lg8  d68
00:59:35  12  ,lg8 -lg10 d810
00:59:35  13  ,lg10-lg12 d1012
00:59:35  14  ,lg12-lg14 d1214
00:59:35  15  ,lg14-lg16 d1416
00:59:35  16  ,lg16-lg18 d1618
00:59:35  17  -- step by 4
00:59:35  18  ,lg6 -lg10 d610
00:59:35  19  ,lg8 -lg12 d812
00:59:35  20  ,lg10-lg14 d1014
00:59:35  21  ,lg12-lg16 d1216
00:59:35  22  --
00:59:35  23  ,ABS(clse-lg6 )dc6
00:59:35  24  ,ABS(clse-lg8 )dc8
00:59:35  25  ,ABS(clse-lg10)dc10
00:59:35  26  ,ABS(clse-lg12)dc12
00:59:35  27  ,ABS(clse-lg14)dc14
00:59:35  28  ,ABS(clse-lg16)dc16
00:59:35  29  ,ABS(clse-lg18)dc18
00:59:35  30  ,ABS(clse-lg20)dc20
00:59:35  31  ,ABS(clse-lg22)dc22
00:59:35  32  ,(ld8-clse) ug8
00:59:35  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
00:59:35  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
00:59:35  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
00:59:35  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
00:59:35  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
00:59:35  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
00:59:35  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
00:59:35  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
00:59:35  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
00:59:35  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
00:59:35  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
00:59:35  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
00:59:35  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
00:59:35  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:59:35  47  ,0+TO_CHAR(ydate,'D')d
00:59:35  48  ,0+TO_CHAR(ydate,'W')w
00:59:35  49  -- mpm stands for minutes-past-midnight:
00:59:35  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:59:35  51  FROM q11
00:59:35  52  -- I dont want any NULL values from the LAG() functions:
00:59:35  53  WHERE lg32 > 0
00:59:35  54  ORDER BY pair,ydate
00:59:35  55  /

Table created.

Elapsed: 00:00:01.67
00:59:37 SQL> 
00:59:37 SQL> -- rpt
00:59:37 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9949
	-1	   10409

Elapsed: 00:00:00.03
00:59:37 SQL> 
00:59:37 SQL> -- Calc gains and ntiles
00:59:37 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.12
00:59:37 SQL> CREATE TABLE q15 COMPRESS AS
00:59:37   2  SELECT
00:59:37   3  pair
00:59:37   4  ,ydate
00:59:37   5  ,prdate -- Should be unique
00:59:37   6  ,trend -- +1 or -1
00:59:37   7  -- Use NTILE() to derive some attributes
00:59:37   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
00:59:37   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
00:59:37  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
00:59:37  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
00:59:37  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
00:59:37  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
00:59:37  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
00:59:37  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
00:59:37  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
00:59:37  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
00:59:37  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
00:59:37  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
00:59:37  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
00:59:37  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
00:59:37  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
00:59:37  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
00:59:37  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
00:59:37  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
00:59:37  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
00:59:37  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
00:59:37  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
00:59:37  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
00:59:37  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
00:59:37  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
00:59:37  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
00:59:37  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
00:59:37  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
00:59:37  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
00:59:37  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
00:59:37  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
00:59:37  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
00:59:37  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
00:59:37  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
00:59:37  41  ,hh    att32
00:59:37  42  ,d     att33
00:59:37  43  ,w     att34
00:59:37  44  ,mpm   att35
00:59:37  45  ,trend att36
00:59:37  46  ,ug8 g8
00:59:37  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
00:59:37  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
00:59:37  49  FROM q13
00:59:37  50  ORDER BY pair,ydate
00:59:37  51  /

Table created.

Elapsed: 00:00:05.43
00:59:42 SQL> 
00:59:42 SQL> -- rpt
00:59:42 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
00:59:42   2  GROUP BY pair,trend,gatt,gattn
00:59:42   3  ORDER BY pair,trend,gatt,gattn
00:59:42   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
gbp_usd 	-1 nup nup .000095423	    3845
gbp_usd 	-1 nup up   -.0059004	    3270
gbp_usd 	-1 up  nup .005448455	    3293
gbp_usd 	-1			       0
gbp_usd 	 1 nup nup -.00008238	    3637
gbp_usd 	 1 nup up  -.00554744	    3271
gbp_usd 	 1 up  nup .006003276	    2946
gbp_usd 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
00:59:42 SQL> 
00:59:42 SQL> -- rpt
00:59:42 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
gbp_usd 2010-12-24 00:55:00

Elapsed: 00:00:00.02
00:59:42 SQL> 
00:59:42 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.21
00:59:42 SQL> CREATE TABLE modsrc COMPRESS AS
00:59:42   2  SELECT
00:59:42   3  pair
00:59:42   4  ,ydate
00:59:42   5  ,prdate
00:59:42   6  ,trend
00:59:42   7  ,g8
00:59:42   8  ,gatt
00:59:42   9  ,gattn
00:59:42  10  FROM q15
00:59:42  11  /

Table created.

Elapsed: 00:00:00.08
00:59:42 SQL> 
00:59:42 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
00:59:43 SQL> 
00:59:43 SQL> -- rpt
00:59:43 SQL> 
00:59:43 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20742

Elapsed: 00:00:00.36
00:59:43 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.01
00:59:43 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.00
00:59:43 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.01
00:59:43 SQL> 
00:59:43 SQL> DROP   TABLE gbp_ms10 ;

Table dropped.

Elapsed: 00:00:00.03
00:59:43 SQL> CREATE TABLE gbp_ms10 COMPRESS AS
00:59:43   2  SELECT
00:59:43   3  ydate
00:59:43   4  ,trend gbp_trend
00:59:43   5  ,g8    gbp_g8
00:59:43   6  ,gatt  gbp_gatt
00:59:43   7  ,gattn gbp_gattn
00:59:43   8  FROM modsrc
00:59:43   9  /

Table created.

Elapsed: 00:00:00.07
00:59:43 SQL> 
00:59:43 SQL> ANALYZE TABLE gbp_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.15
00:59:43 SQL> 
00:59:43 SQL> -- rpt
00:59:43 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 10:50:01 2010-12-24 00:55:00	 9854	  -.0231       .019
	-1 2010-09-16 09:00:01 2010-12-23 22:50:00	10408	    -.02      .0204

Elapsed: 00:00:00.02
00:59:43 SQL> SELECT gbp_trend,MIN(ydate),MAX(ydate),COUNT(gbp_trend),MIN(gbp_g8),MAX(gbp_g8)FROM gbp_ms10 GROUP BY gbp_trend;

 GBP_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(GBP_TREND) MIN(GBP_G8) MAX(GBP_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 10:50:01 2010-12-24 00:55:00	       9949	 -.0231        .019
	-1 2010-09-16 09:00:01 2010-12-23 22:50:00	      10409	   -.02       .0204

Elapsed: 00:00:00.01
00:59:43 SQL> 
00:59:43 SQL> -- I need a copy of q15 attributes
00:59:43 SQL> 
00:59:43 SQL> DROP   TABLE gbp_att;

Table dropped.

Elapsed: 00:00:00.03
00:59:43 SQL> CREATE TABLE gbp_att COMPRESS AS
00:59:43   2  SELECT
00:59:43   3  ydate
00:59:43   4  ,att00 gbp_att00
00:59:43   5  ,att01 gbp_att01
00:59:43   6  ,att02 gbp_att02
00:59:43   7  ,att03 gbp_att03
00:59:43   8  ,att04 gbp_att04
00:59:43   9  ,att05 gbp_att05
00:59:43  10  ,att06 gbp_att06
00:59:43  11  ,att07 gbp_att07
00:59:43  12  ,att08 gbp_att08
00:59:43  13  ,att09 gbp_att09
00:59:43  14  ,att10 gbp_att10
00:59:43  15  ,att11 gbp_att11
00:59:43  16  ,att12 gbp_att12
00:59:43  17  ,att13 gbp_att13
00:59:43  18  ,att14 gbp_att14
00:59:43  19  ,att15 gbp_att15
00:59:43  20  ,att16 gbp_att16
00:59:43  21  ,att17 gbp_att17
00:59:43  22  ,att18 gbp_att18
00:59:43  23  ,att19 gbp_att19
00:59:43  24  ,att20 gbp_att20
00:59:43  25  ,att21 gbp_att21
00:59:43  26  ,att22 gbp_att22
00:59:43  27  ,att23 gbp_att23
00:59:43  28  ,att24 gbp_att24
00:59:43  29  ,att25 gbp_att25
00:59:43  30  ,att26 gbp_att26
00:59:43  31  ,att27 gbp_att27
00:59:43  32  ,att28 gbp_att28
00:59:43  33  ,att29 gbp_att29
00:59:43  34  ,att30 gbp_att30
00:59:43  35  ,att31 gbp_att31
00:59:43  36  ,att32 gbp_att32
00:59:43  37  ,att33 gbp_att33
00:59:43  38  ,att34 gbp_att34
00:59:43  39  ,att35 gbp_att35
00:59:43  40  ,att36 gbp_att36
00:59:43  41  FROM q15
00:59:43  42  /

Table created.

Elapsed: 00:00:00.18
00:59:44 SQL> 
00:59:44 SQL> ANALYZE TABLE gbp_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.56
00:59:44 SQL> 
00:59:44 SQL> -- rpt
00:59:44 SQL> SELECT COUNT(*)FROM gbp_att;

  COUNT(*)
----------
     20358

Elapsed: 00:00:00.01
00:59:44 SQL> 
00:59:44 SQL> --
00:59:44 SQL> -- jpy10.sql
00:59:44 SQL> --
00:59:44 SQL> 
00:59:44 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:59:44 SQL> 
00:59:44 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.32
00:59:44 SQL> 
00:59:44 SQL> -- I created di5min here:
00:59:44 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
00:59:44 SQL> 
00:59:44 SQL> CREATE OR REPLACE VIEW q11 AS
00:59:44   2  SELECT
00:59:44   3  pair
00:59:44   4  ,ydate
00:59:44   5  ,prdate
00:59:44   6  ,rownum rnum -- acts as t in my time-series
00:59:44   7  ,clse
00:59:44   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
00:59:44   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
00:59:44  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
00:59:44  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
00:59:44  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
00:59:44  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
00:59:44  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
00:59:44  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
00:59:44  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
00:59:44  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
00:59:44  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
00:59:44  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
00:59:44  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
00:59:44  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
00:59:44  22  FROM di5min WHERE pair LIKE'%jpy%'
00:59:44  23  ORDER BY ydate
00:59:44  24  /

View created.

Elapsed: 00:00:00.04
00:59:44 SQL> 
00:59:44 SQL> -- rpt
00:59:44 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_jpy        20741

Elapsed: 00:00:00.34
00:59:45 SQL> 
00:59:45 SQL> -- Calc deltas and gains
00:59:45 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.24
00:59:45 SQL> 
00:59:45 SQL> CREATE TABLE q13 COMPRESS AS
00:59:45   2  SELECT
00:59:45   3  pair
00:59:45   4  ,ydate
00:59:45   5  ,prdate
00:59:45   6  ,rnum
00:59:45   7  ,ld8
00:59:45   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
00:59:45   9  -- step by 2
00:59:45  10  ,clse-lg6  d06
00:59:45  11  ,lg6 -lg8  d68
00:59:45  12  ,lg8 -lg10 d810
00:59:45  13  ,lg10-lg12 d1012
00:59:45  14  ,lg12-lg14 d1214
00:59:45  15  ,lg14-lg16 d1416
00:59:45  16  ,lg16-lg18 d1618
00:59:45  17  -- step by 4
00:59:45  18  ,lg6 -lg10 d610
00:59:45  19  ,lg8 -lg12 d812
00:59:45  20  ,lg10-lg14 d1014
00:59:45  21  ,lg12-lg16 d1216
00:59:45  22  --
00:59:45  23  ,ABS(clse-lg6 )dc6
00:59:45  24  ,ABS(clse-lg8 )dc8
00:59:45  25  ,ABS(clse-lg10)dc10
00:59:45  26  ,ABS(clse-lg12)dc12
00:59:45  27  ,ABS(clse-lg14)dc14
00:59:45  28  ,ABS(clse-lg16)dc16
00:59:45  29  ,ABS(clse-lg18)dc18
00:59:45  30  ,ABS(clse-lg20)dc20
00:59:45  31  ,ABS(clse-lg22)dc22
00:59:45  32  ,(ld8-clse) ug8
00:59:45  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
00:59:45  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
00:59:45  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
00:59:45  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
00:59:45  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
00:59:45  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
00:59:45  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
00:59:45  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
00:59:45  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
00:59:45  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
00:59:45  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
00:59:45  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
00:59:45  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
00:59:45  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:59:45  47  ,0+TO_CHAR(ydate,'D')d
00:59:45  48  ,0+TO_CHAR(ydate,'W')w
00:59:45  49  -- mpm stands for minutes-past-midnight:
00:59:45  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:59:45  51  FROM q11
00:59:45  52  -- I dont want any NULL values from the LAG() functions:
00:59:45  53  WHERE lg32 > 0
00:59:45  54  ORDER BY pair,ydate
00:59:45  55  /

Table created.

Elapsed: 00:00:01.68
00:59:47 SQL> 
00:59:47 SQL> -- rpt
00:59:47 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9422
	-1	   10935

Elapsed: 00:00:00.03
00:59:47 SQL> 
00:59:47 SQL> -- Calc gains and ntiles
00:59:47 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.12
00:59:47 SQL> CREATE TABLE q15 COMPRESS AS
00:59:47   2  SELECT
00:59:47   3  pair
00:59:47   4  ,ydate
00:59:47   5  ,prdate -- Should be unique
00:59:47   6  ,trend -- +1 or -1
00:59:47   7  -- Use NTILE() to derive some attributes
00:59:47   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
00:59:47   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
00:59:47  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
00:59:47  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
00:59:47  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
00:59:47  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
00:59:47  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
00:59:47  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
00:59:47  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
00:59:47  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
00:59:47  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
00:59:47  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
00:59:47  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
00:59:47  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
00:59:47  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
00:59:47  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
00:59:47  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
00:59:47  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
00:59:47  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
00:59:47  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
00:59:47  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
00:59:47  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
00:59:47  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
00:59:47  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
00:59:47  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
00:59:47  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
00:59:47  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
00:59:47  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
00:59:47  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
00:59:47  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
00:59:47  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
00:59:47  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
00:59:47  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
00:59:47  41  ,hh    att32
00:59:47  42  ,d     att33
00:59:47  43  ,w     att34
00:59:47  44  ,mpm   att35
00:59:47  45  ,trend att36
00:59:47  46  ,ug8 g8
00:59:47  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
00:59:47  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
00:59:47  49  FROM q13
00:59:47  50  ORDER BY pair,ydate
00:59:47  51  /

Table created.

Elapsed: 00:00:05.44
00:59:52 SQL> 
00:59:52 SQL> -- rpt
00:59:52 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
00:59:52   2  GROUP BY pair,trend,gatt,gattn
00:59:52   3  ORDER BY pair,trend,gatt,gattn
00:59:52   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_jpy 	-1 nup nup 7.4441E-06	     168
usd_jpy 	-1 nup up  -.18452706	    5516
usd_jpy 	-1 up  nup .180651442	    5180
usd_jpy 	-1			       0
usd_jpy 	 1 nup nup	    0	     118
usd_jpy 	 1 nup up  -.18874649	    5135
usd_jpy 	 1 up  nup .191475023	    4144
usd_jpy 	 1			       0

8 rows selected.

Elapsed: 00:00:00.02
00:59:52 SQL> 
00:59:52 SQL> -- rpt
00:59:52 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_jpy 2010-12-24 00:55:00

Elapsed: 00:00:00.02
00:59:52 SQL> 
00:59:52 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.18
00:59:53 SQL> CREATE TABLE modsrc COMPRESS AS
00:59:53   2  SELECT
00:59:53   3  pair
00:59:53   4  ,ydate
00:59:53   5  ,prdate
00:59:53   6  ,trend
00:59:53   7  ,g8
00:59:53   8  ,gatt
00:59:53   9  ,gattn
00:59:53  10  FROM q15
00:59:53  11  /

Table created.

Elapsed: 00:00:00.08
00:59:53 SQL> 
00:59:53 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.21
00:59:53 SQL> 
00:59:53 SQL> -- rpt
00:59:53 SQL> 
00:59:53 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20741

Elapsed: 00:00:00.36
00:59:53 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20357

Elapsed: 00:00:00.01
00:59:53 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20357

Elapsed: 00:00:00.01
00:59:53 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20357

Elapsed: 00:00:00.00
00:59:53 SQL> 
00:59:53 SQL> DROP   TABLE jpy_ms10 ;

Table dropped.

Elapsed: 00:00:00.04
00:59:53 SQL> CREATE TABLE jpy_ms10 COMPRESS AS
00:59:53   2  SELECT
00:59:53   3  ydate
00:59:53   4  ,trend jpy_trend
00:59:53   5  ,g8    jpy_g8
00:59:53   6  ,gatt  jpy_gatt
00:59:53   7  ,gattn jpy_gattn
00:59:53   8  FROM modsrc
00:59:53   9  /

Table created.

Elapsed: 00:00:00.08
00:59:53 SQL> 
00:59:53 SQL> ANALYZE TABLE jpy_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.14
00:59:53 SQL> 
00:59:53 SQL> -- rpt
00:59:53 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 09:00:01 2010-12-24 00:55:00	 9397	  -1.185	  1
	-1 2010-09-17 00:15:01 2010-12-24 00:05:00	10864	 -1.0575       1.32

Elapsed: 00:00:00.02
00:59:54 SQL> SELECT jpy_trend,MIN(ydate),MAX(ydate),COUNT(jpy_trend),MIN(jpy_g8),MAX(jpy_g8)FROM jpy_ms10 GROUP BY jpy_trend;

 JPY_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(JPY_TREND) MIN(JPY_G8) MAX(JPY_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 09:00:01 2010-12-24 00:55:00	       9422	 -1.185 	  1
	-1 2010-09-17 00:15:01 2010-12-24 00:05:00	      10935	-1.0575        1.32

Elapsed: 00:00:00.01
00:59:54 SQL> 
00:59:54 SQL> -- I need a copy of q15 attributes
00:59:54 SQL> 
00:59:54 SQL> DROP   TABLE jpy_att;

Table dropped.

Elapsed: 00:00:00.05
00:59:54 SQL> CREATE TABLE jpy_att COMPRESS AS
00:59:54   2  SELECT
00:59:54   3  ydate
00:59:54   4  ,att00 jpy_att00
00:59:54   5  ,att01 jpy_att01
00:59:54   6  ,att02 jpy_att02
00:59:54   7  ,att03 jpy_att03
00:59:54   8  ,att04 jpy_att04
00:59:54   9  ,att05 jpy_att05
00:59:54  10  ,att06 jpy_att06
00:59:54  11  ,att07 jpy_att07
00:59:54  12  ,att08 jpy_att08
00:59:54  13  ,att09 jpy_att09
00:59:54  14  ,att10 jpy_att10
00:59:54  15  ,att11 jpy_att11
00:59:54  16  ,att12 jpy_att12
00:59:54  17  ,att13 jpy_att13
00:59:54  18  ,att14 jpy_att14
00:59:54  19  ,att15 jpy_att15
00:59:54  20  ,att16 jpy_att16
00:59:54  21  ,att17 jpy_att17
00:59:54  22  ,att18 jpy_att18
00:59:54  23  ,att19 jpy_att19
00:59:54  24  ,att20 jpy_att20
00:59:54  25  ,att21 jpy_att21
00:59:54  26  ,att22 jpy_att22
00:59:54  27  ,att23 jpy_att23
00:59:54  28  ,att24 jpy_att24
00:59:54  29  ,att25 jpy_att25
00:59:54  30  ,att26 jpy_att26
00:59:54  31  ,att27 jpy_att27
00:59:54  32  ,att28 jpy_att28
00:59:54  33  ,att29 jpy_att29
00:59:54  34  ,att30 jpy_att30
00:59:54  35  ,att31 jpy_att31
00:59:54  36  ,att32 jpy_att32
00:59:54  37  ,att33 jpy_att33
00:59:54  38  ,att34 jpy_att34
00:59:54  39  ,att35 jpy_att35
00:59:54  40  ,att36 jpy_att36
00:59:54  41  FROM q15
00:59:54  42  /

Table created.

Elapsed: 00:00:00.24
00:59:54 SQL> 
00:59:54 SQL> ANALYZE TABLE jpy_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.48
00:59:54 SQL> 
00:59:54 SQL> -- rpt
00:59:54 SQL> SELECT COUNT(*)FROM jpy_att;

  COUNT(*)
----------
     20357

Elapsed: 00:00:00.00
00:59:54 SQL> 
00:59:54 SQL> --
00:59:54 SQL> -- cad10.sql
00:59:54 SQL> --
00:59:54 SQL> 
00:59:54 SQL> -- Creates views and tables for backtesting a forex SVM strategy
00:59:54 SQL> 
00:59:54 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.33
00:59:55 SQL> 
00:59:55 SQL> -- I created di5min here:
00:59:55 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
00:59:55 SQL> 
00:59:55 SQL> CREATE OR REPLACE VIEW q11 AS
00:59:55   2  SELECT
00:59:55   3  pair
00:59:55   4  ,ydate
00:59:55   5  ,prdate
00:59:55   6  ,rownum rnum -- acts as t in my time-series
00:59:55   7  ,clse
00:59:55   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
00:59:55   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
00:59:55  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
00:59:55  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
00:59:55  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
00:59:55  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
00:59:55  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
00:59:55  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
00:59:55  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
00:59:55  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
00:59:55  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
00:59:55  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
00:59:55  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
00:59:55  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
00:59:55  22  FROM di5min WHERE pair LIKE'%cad%'
00:59:55  23  ORDER BY ydate
00:59:55  24  /

View created.

Elapsed: 00:00:00.04
00:59:55 SQL> 
00:59:55 SQL> -- rpt
00:59:55 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_cad        20739

Elapsed: 00:00:00.36
00:59:55 SQL> 
00:59:55 SQL> -- Calc deltas and gains
00:59:55 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.22
00:59:55 SQL> 
00:59:55 SQL> CREATE TABLE q13 COMPRESS AS
00:59:55   2  SELECT
00:59:55   3  pair
00:59:55   4  ,ydate
00:59:55   5  ,prdate
00:59:55   6  ,rnum
00:59:55   7  ,ld8
00:59:55   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
00:59:55   9  -- step by 2
00:59:55  10  ,clse-lg6  d06
00:59:55  11  ,lg6 -lg8  d68
00:59:55  12  ,lg8 -lg10 d810
00:59:55  13  ,lg10-lg12 d1012
00:59:55  14  ,lg12-lg14 d1214
00:59:55  15  ,lg14-lg16 d1416
00:59:55  16  ,lg16-lg18 d1618
00:59:55  17  -- step by 4
00:59:55  18  ,lg6 -lg10 d610
00:59:55  19  ,lg8 -lg12 d812
00:59:55  20  ,lg10-lg14 d1014
00:59:55  21  ,lg12-lg16 d1216
00:59:55  22  --
00:59:55  23  ,ABS(clse-lg6 )dc6
00:59:55  24  ,ABS(clse-lg8 )dc8
00:59:55  25  ,ABS(clse-lg10)dc10
00:59:55  26  ,ABS(clse-lg12)dc12
00:59:55  27  ,ABS(clse-lg14)dc14
00:59:55  28  ,ABS(clse-lg16)dc16
00:59:55  29  ,ABS(clse-lg18)dc18
00:59:55  30  ,ABS(clse-lg20)dc20
00:59:55  31  ,ABS(clse-lg22)dc22
00:59:55  32  ,(ld8-clse) ug8
00:59:55  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
00:59:55  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
00:59:55  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
00:59:55  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
00:59:55  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
00:59:55  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
00:59:55  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
00:59:55  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
00:59:55  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
00:59:55  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
00:59:55  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
00:59:55  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
00:59:55  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
00:59:55  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
00:59:55  47  ,0+TO_CHAR(ydate,'D')d
00:59:55  48  ,0+TO_CHAR(ydate,'W')w
00:59:55  49  -- mpm stands for minutes-past-midnight:
00:59:55  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
00:59:55  51  FROM q11
00:59:55  52  -- I dont want any NULL values from the LAG() functions:
00:59:55  53  WHERE lg32 > 0
00:59:55  54  ORDER BY pair,ydate
00:59:55  55  /

Table created.

Elapsed: 00:00:01.72
00:59:57 SQL> 
00:59:57 SQL> -- rpt
00:59:57 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9403
	-1	   10952

Elapsed: 00:00:00.04
00:59:57 SQL> 
00:59:57 SQL> -- Calc gains and ntiles
00:59:57 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.23
00:59:57 SQL> CREATE TABLE q15 COMPRESS AS
00:59:57   2  SELECT
00:59:57   3  pair
00:59:57   4  ,ydate
00:59:57   5  ,prdate -- Should be unique
00:59:57   6  ,trend -- +1 or -1
00:59:57   7  -- Use NTILE() to derive some attributes
00:59:57   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
00:59:57   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
00:59:57  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
00:59:57  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
00:59:57  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
00:59:57  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
00:59:57  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
00:59:57  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
00:59:57  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
00:59:57  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
00:59:57  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
00:59:57  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
00:59:57  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
00:59:57  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
00:59:57  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
00:59:57  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
00:59:57  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
00:59:57  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
00:59:57  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
00:59:57  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
00:59:57  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
00:59:57  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
00:59:57  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
00:59:57  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
00:59:57  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
00:59:57  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
00:59:57  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
00:59:57  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
00:59:57  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
00:59:57  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
00:59:57  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
00:59:57  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
00:59:57  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
00:59:57  41  ,hh    att32
00:59:57  42  ,d     att33
00:59:57  43  ,w     att34
00:59:57  44  ,mpm   att35
00:59:57  45  ,trend att36
00:59:57  46  ,ug8 g8
00:59:57  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
00:59:57  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
00:59:57  49  FROM q13
00:59:57  50  ORDER BY pair,ydate
00:59:57  51  /

Table created.

Elapsed: 00:00:05.37
01:00:03 SQL> 
01:00:03 SQL> -- rpt
01:00:03 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
01:00:03   2  GROUP BY pair,trend,gatt,gattn
01:00:03   3  ORDER BY pair,trend,gatt,gattn
01:00:03   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_cad 	-1 nup nup  -.0000176	    5662
usd_cad 	-1 nup up  -.00401082	    2623
usd_cad 	-1 up  nup .004672251	    2578
usd_cad 	-1			       0
usd_cad 	 1 nup nup -.00011763	    4661
usd_cad 	 1 nup up  -.00422882	    2753
usd_cad 	 1 up  nup .004613081	    1982
usd_cad 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
01:00:03 SQL> 
01:00:03 SQL> -- rpt
01:00:03 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_cad 2010-12-24 00:55:00

Elapsed: 00:00:00.01
01:00:03 SQL> 
01:00:03 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.13
01:00:03 SQL> CREATE TABLE modsrc COMPRESS AS
01:00:03   2  SELECT
01:00:03   3  pair
01:00:03   4  ,ydate
01:00:03   5  ,prdate
01:00:03   6  ,trend
01:00:03   7  ,g8
01:00:03   8  ,gatt
01:00:03   9  ,gattn
01:00:03  10  FROM q15
01:00:03  11  /

Table created.

Elapsed: 00:00:00.10
01:00:03 SQL> 
01:00:03 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
01:00:03 SQL> 
01:00:03 SQL> -- rpt
01:00:03 SQL> 
01:00:03 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20739

Elapsed: 00:00:00.34
01:00:03 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20355

Elapsed: 00:00:00.01
01:00:03 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20355

Elapsed: 00:00:00.00
01:00:03 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20355

Elapsed: 00:00:00.01
01:00:03 SQL> 
01:00:03 SQL> DROP   TABLE cad_ms10 ;

Table dropped.

Elapsed: 00:00:00.57
01:00:04 SQL> CREATE TABLE cad_ms10 COMPRESS AS
01:00:04   2  SELECT
01:00:04   3  ydate
01:00:04   4  ,trend cad_trend
01:00:04   5  ,g8    cad_g8
01:00:04   6  ,gatt  cad_gatt
01:00:04   7  ,gattn cad_gattn
01:00:04   8  FROM modsrc
01:00:04   9  /

Table created.

Elapsed: 00:00:00.14
01:00:04 SQL> 
01:00:04 SQL> ANALYZE TABLE cad_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.19
01:00:04 SQL> 
01:00:04 SQL> -- rpt
01:00:04 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 14:30:01 2010-12-24 00:55:00	 9396	  -.0122      .0159
	-1 2010-09-16 09:00:01 2010-12-24 00:20:00	10863	 -.01105      .0176

Elapsed: 00:00:00.02
01:00:04 SQL> SELECT cad_trend,MIN(ydate),MAX(ydate),COUNT(cad_trend),MIN(cad_g8),MAX(cad_g8)FROM cad_ms10 GROUP BY cad_trend;

 CAD_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(CAD_TREND) MIN(CAD_G8) MAX(CAD_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 14:30:01 2010-12-24 00:55:00	       9403	 -.0122       .0159
	-1 2010-09-16 09:00:01 2010-12-24 00:20:00	      10952	-.01105       .0176

Elapsed: 00:00:00.01
01:00:04 SQL> 
01:00:04 SQL> -- I need a copy of q15 attributes
01:00:04 SQL> 
01:00:04 SQL> DROP   TABLE cad_att;

Table dropped.

Elapsed: 00:00:00.04
01:00:04 SQL> CREATE TABLE cad_att COMPRESS AS
01:00:04   2  SELECT
01:00:04   3  ydate
01:00:04   4  ,att00 cad_att00
01:00:04   5  ,att01 cad_att01
01:00:04   6  ,att02 cad_att02
01:00:04   7  ,att03 cad_att03
01:00:04   8  ,att04 cad_att04
01:00:04   9  ,att05 cad_att05
01:00:04  10  ,att06 cad_att06
01:00:04  11  ,att07 cad_att07
01:00:04  12  ,att08 cad_att08
01:00:04  13  ,att09 cad_att09
01:00:04  14  ,att10 cad_att10
01:00:04  15  ,att11 cad_att11
01:00:04  16  ,att12 cad_att12
01:00:04  17  ,att13 cad_att13
01:00:04  18  ,att14 cad_att14
01:00:04  19  ,att15 cad_att15
01:00:04  20  ,att16 cad_att16
01:00:04  21  ,att17 cad_att17
01:00:04  22  ,att18 cad_att18
01:00:04  23  ,att19 cad_att19
01:00:04  24  ,att20 cad_att20
01:00:04  25  ,att21 cad_att21
01:00:04  26  ,att22 cad_att22
01:00:04  27  ,att23 cad_att23
01:00:04  28  ,att24 cad_att24
01:00:04  29  ,att25 cad_att25
01:00:04  30  ,att26 cad_att26
01:00:04  31  ,att27 cad_att27
01:00:04  32  ,att28 cad_att28
01:00:04  33  ,att29 cad_att29
01:00:04  34  ,att30 cad_att30
01:00:04  35  ,att31 cad_att31
01:00:04  36  ,att32 cad_att32
01:00:04  37  ,att33 cad_att33
01:00:04  38  ,att34 cad_att34
01:00:04  39  ,att35 cad_att35
01:00:04  40  ,att36 cad_att36
01:00:04  41  FROM q15
01:00:04  42  /

Table created.

Elapsed: 00:00:00.18
01:00:05 SQL> 
01:00:05 SQL> ANALYZE TABLE cad_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.51
01:00:05 SQL> 
01:00:05 SQL> -- rpt
01:00:05 SQL> SELECT COUNT(*)FROM cad_att;

  COUNT(*)
----------
     20355

Elapsed: 00:00:00.00
01:00:05 SQL> 
01:00:05 SQL> --
01:00:05 SQL> -- chf10.sql
01:00:05 SQL> --
01:00:05 SQL> 
01:00:05 SQL> -- Creates views and tables for backtesting a forex SVM strategy
01:00:05 SQL> 
01:00:05 SQL> PURGE RECYCLEBIN;

Recyclebin purged.

Elapsed: 00:00:00.34
01:00:05 SQL> 
01:00:05 SQL> -- I created di5min here:
01:00:05 SQL> -- /pt/s/rlk/svm8hp/update_di5min.sql
01:00:05 SQL> 
01:00:05 SQL> CREATE OR REPLACE VIEW q11 AS
01:00:05   2  SELECT
01:00:05   3  pair
01:00:05   4  ,ydate
01:00:05   5  ,prdate
01:00:05   6  ,rownum rnum -- acts as t in my time-series
01:00:05   7  ,clse
01:00:05   8  ,LAG(clse,12*6 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg6
01:00:05   9  ,LAG(clse,12*8 ,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg8
01:00:05  10  ,LAG(clse,12*10,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg10
01:00:05  11  ,LAG(clse,12*12,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg12
01:00:05  12  ,LAG(clse,12*14,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg14
01:00:05  13  ,LAG(clse,12*16,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg16
01:00:05  14  ,LAG(clse,12*18,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg18
01:00:05  15  ,LAG(clse,12*20,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg20
01:00:05  16  ,LAG(clse,12*22,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg22
01:00:05  17  ,LAG(clse,12*24,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg24
01:00:05  18  ,LAG(clse,12*26,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg26
01:00:05  19  ,LAG(clse,12*28,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg28
01:00:05  20  ,LAG(clse,12*32,NULL)OVER(PARTITION BY pair ORDER BY ydate)lg32
01:00:05  21  ,LEAD(clse,12*8,NULL)OVER(PARTITION BY pair ORDER BY ydate)ld8
01:00:05  22  FROM di5min WHERE pair LIKE'%chf%'
01:00:05  23  ORDER BY ydate
01:00:05  24  /

View created.

Elapsed: 00:00:00.05
01:00:05 SQL> 
01:00:05 SQL> -- rpt
01:00:05 SQL> SELECT pair,COUNT(ydate) FROM q11 GROUP BY pair;

PAIR	COUNT(YDATE)
------- ------------
usd_chf        20742

Elapsed: 00:00:00.44
01:00:06 SQL> 
01:00:06 SQL> -- Calc deltas and gains
01:00:06 SQL> DROP TABLE q13;

Table dropped.

Elapsed: 00:00:00.20
01:00:06 SQL> 
01:00:06 SQL> CREATE TABLE q13 COMPRESS AS
01:00:06   2  SELECT
01:00:06   3  pair
01:00:06   4  ,ydate
01:00:06   5  ,prdate
01:00:06   6  ,rnum
01:00:06   7  ,ld8
01:00:06   8  ,CASE WHEN(clse-lg8)>0 then 1 ELSE -1 END trend
01:00:06   9  -- step by 2
01:00:06  10  ,clse-lg6  d06
01:00:06  11  ,lg6 -lg8  d68
01:00:06  12  ,lg8 -lg10 d810
01:00:06  13  ,lg10-lg12 d1012
01:00:06  14  ,lg12-lg14 d1214
01:00:06  15  ,lg14-lg16 d1416
01:00:06  16  ,lg16-lg18 d1618
01:00:06  17  -- step by 4
01:00:06  18  ,lg6 -lg10 d610
01:00:06  19  ,lg8 -lg12 d812
01:00:06  20  ,lg10-lg14 d1014
01:00:06  21  ,lg12-lg16 d1216
01:00:06  22  --
01:00:06  23  ,ABS(clse-lg6 )dc6
01:00:06  24  ,ABS(clse-lg8 )dc8
01:00:06  25  ,ABS(clse-lg10)dc10
01:00:06  26  ,ABS(clse-lg12)dc12
01:00:06  27  ,ABS(clse-lg14)dc14
01:00:06  28  ,ABS(clse-lg16)dc16
01:00:06  29  ,ABS(clse-lg18)dc18
01:00:06  30  ,ABS(clse-lg20)dc20
01:00:06  31  ,ABS(clse-lg22)dc22
01:00:06  32  ,(ld8-clse) ug8
01:00:06  33  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*6  PRECEDING AND CURRENT ROW)crr6
01:00:06  34  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*8  PRECEDING AND CURRENT ROW)crr8
01:00:06  35  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*10 PRECEDING AND CURRENT ROW)crr10
01:00:06  36  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*12 PRECEDING AND CURRENT ROW)crr12
01:00:06  37  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*14 PRECEDING AND CURRENT ROW)crr14
01:00:06  38  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*16 PRECEDING AND CURRENT ROW)crr16
01:00:06  39  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*18 PRECEDING AND CURRENT ROW)crr18
01:00:06  40  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*20 PRECEDING AND CURRENT ROW)crr20
01:00:06  41  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*22 PRECEDING AND CURRENT ROW)crr22
01:00:06  42  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*24 PRECEDING AND CURRENT ROW)crr24
01:00:06  43  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*26 PRECEDING AND CURRENT ROW)crr26
01:00:06  44  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*28 PRECEDING AND CURRENT ROW)crr28
01:00:06  45  ,COVAR_POP(rnum,clse)OVER(PARTITION BY pair ORDER BY ydate ROWS BETWEEN 12*32 PRECEDING AND CURRENT ROW)crr32
01:00:06  46  ,0+TO_CHAR( ROUND(ydate,'HH24'),'HH24')hh
01:00:06  47  ,0+TO_CHAR(ydate,'D')d
01:00:06  48  ,0+TO_CHAR(ydate,'W')w
01:00:06  49  -- mpm stands for minutes-past-midnight:
01:00:06  50  ,ROUND( (ydate - trunc(ydate))*24*60 )mpm
01:00:06  51  FROM q11
01:00:06  52  -- I dont want any NULL values from the LAG() functions:
01:00:06  53  WHERE lg32 > 0
01:00:06  54  ORDER BY pair,ydate
01:00:06  55  /

Table created.

Elapsed: 00:00:01.73
01:00:08 SQL> 
01:00:08 SQL> -- rpt
01:00:08 SQL> SELECT trend,COUNT(prdate)FROM q13 GROUP BY trend;

     TREND COUNT(PRDATE)
---------- -------------
	 1	    9618
	-1	   10740

Elapsed: 00:00:00.04
01:00:08 SQL> 
01:00:08 SQL> -- Calc gains and ntiles
01:00:08 SQL> DROP TABLE q15;

Table dropped.

Elapsed: 00:00:00.18
01:00:08 SQL> CREATE TABLE q15 COMPRESS AS
01:00:08   2  SELECT
01:00:08   3  pair
01:00:08   4  ,ydate
01:00:08   5  ,prdate -- Should be unique
01:00:08   6  ,trend -- +1 or -1
01:00:08   7  -- Use NTILE() to derive some attributes
01:00:08   8  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d68	))	 att00
01:00:08   9  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d810 ))	 att01
01:00:08  10  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1012))	 att02
01:00:08  11  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1214))	 att03
01:00:08  12  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1416))	 att04
01:00:08  13  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1618))	 att05
01:00:08  14  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d610 ))	 att06
01:00:08  15  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d812 ))	 att07
01:00:08  16  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1014))	 att08
01:00:08  17  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(d1216))	 att09
01:00:08  18  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc6 )		 att10
01:00:08  19  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc8 )		 att11
01:00:08  20  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc10)		 att12
01:00:08  21  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc12)		 att13
01:00:08  22  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc14)		 att14
01:00:08  23  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc16)		 att15
01:00:08  24  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc18)		 att16
01:00:08  25  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc20)		 att17
01:00:08  26  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY dc22)		 att18
01:00:08  27  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr6 ,7)))att19
01:00:08  28  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr8 ,7)))att20
01:00:08  29  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr10,7)))att21
01:00:08  30  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr12,7)))att22
01:00:08  31  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr14,7)))att23
01:00:08  32  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr16,7)))att24
01:00:08  33  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr18,7)))att25
01:00:08  34  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr20,7)))att26
01:00:08  35  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr22,7)))att27
01:00:08  36  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr24,7)))att28
01:00:08  37  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr26,7)))att29
01:00:08  38  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr28,7)))att30
01:00:08  39  ,NTILE(6)OVER(PARTITION BY trend,pair ORDER BY ABS(ROUND(crr32,7)))att31
01:00:08  40  -- date related integers: hour of day, day of week, week of month, minutes-past-midnight:
01:00:08  41  ,hh    att32
01:00:08  42  ,d     att33
01:00:08  43  ,w     att34
01:00:08  44  ,mpm   att35
01:00:08  45  ,trend att36
01:00:08  46  ,ug8 g8
01:00:08  47  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8 > 0.0020 THEN 'up' ELSE 'nup' END gatt
01:00:08  48  ,CASE WHEN ug8 IS NULL THEN NULL WHEN ug8< -0.0020 THEN 'up' ELSE 'nup' END gattn
01:00:08  49  FROM q13
01:00:08  50  ORDER BY pair,ydate
01:00:08  51  /

Table created.

Elapsed: 00:00:05.42
01:00:14 SQL> 
01:00:14 SQL> -- rpt
01:00:14 SQL> SELECT pair,trend,gatt,gattn,AVG(g8),COUNT(g8)FROM q15
01:00:14   2  GROUP BY pair,trend,gatt,gattn
01:00:14   3  ORDER BY pair,trend,gatt,gattn
01:00:14   4  /

PAIR	     TREND GAT GAT    AVG(G8)  COUNT(G8)
------- ---------- --- --- ---------- ----------
usd_chf 	-1 nup nup  .00002968	    4879
usd_chf 	-1 nup up  -.00495279	    3138
usd_chf 	-1 up  nup .005121563	    2673
usd_chf 	-1			       0
usd_chf 	 1 nup nup -.00001296	    4545
usd_chf 	 1 nup up  -.00454305	    2883
usd_chf 	 1 up  nup .004690106	    2144
usd_chf 	 1			       0

8 rows selected.

Elapsed: 00:00:00.03
01:00:14 SQL> 
01:00:14 SQL> -- rpt
01:00:14 SQL> SELECT pair,max(ydate)from q15 group by pair;

PAIR	MAX(YDATE)
------- -------------------
usd_chf 2010-12-24 00:55:00

Elapsed: 00:00:00.02
01:00:14 SQL> 
01:00:14 SQL> DROP TABLE modsrc;

Table dropped.

Elapsed: 00:00:00.12
01:00:14 SQL> CREATE TABLE modsrc COMPRESS AS
01:00:14   2  SELECT
01:00:14   3  pair
01:00:14   4  ,ydate
01:00:14   5  ,prdate
01:00:14   6  ,trend
01:00:14   7  ,g8
01:00:14   8  ,gatt
01:00:14   9  ,gattn
01:00:14  10  FROM q15
01:00:14  11  /

Table created.

Elapsed: 00:00:00.09
01:00:14 SQL> 
01:00:14 SQL> ANALYZE TABLE modsrc COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.20
01:00:14 SQL> 
01:00:14 SQL> -- rpt
01:00:14 SQL> 
01:00:14 SQL> SELECT COUNT(pair)FROM q11;

COUNT(PAIR)
-----------
      20742

Elapsed: 00:00:00.34
01:00:14 SQL> SELECT COUNT(pair)FROM q13;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.00
01:00:14 SQL> SELECT COUNT(pair)FROM q15;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.01
01:00:14 SQL> SELECT COUNT(pair)FROM modsrc;

COUNT(PAIR)
-----------
      20358

Elapsed: 00:00:00.00
01:00:14 SQL> 
01:00:14 SQL> DROP   TABLE chf_ms10 ;

Table dropped.

Elapsed: 00:00:00.03
01:00:14 SQL> CREATE TABLE chf_ms10 COMPRESS AS
01:00:14   2  SELECT
01:00:14   3  ydate
01:00:14   4  ,trend chf_trend
01:00:14   5  ,g8    chf_g8
01:00:14   6  ,gatt  chf_gatt
01:00:14   7  ,gattn chf_gattn
01:00:14   8  FROM modsrc
01:00:14   9  /

Table created.

Elapsed: 00:00:00.07
01:00:14 SQL> 
01:00:14 SQL> ANALYZE TABLE chf_ms10 COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.16
01:00:15 SQL> 
01:00:15 SQL> -- rpt
01:00:15 SQL> SELECT trend,MIN(ydate),MAX(ydate),COUNT(g8),MIN(g8),MAX(g8)FROM modsrc GROUP BY trend;

     TREND MIN(YDATE)	       MAX(YDATE)	    COUNT(G8)	 MIN(G8)    MAX(G8)
---------- ------------------- ------------------- ---------- ---------- ----------
	 1 2010-09-16 09:30:01 2010-12-23 21:45:00	 9572	 -.01775      .0155
	-1 2010-09-16 09:00:01 2010-12-24 00:55:00	10690	 -.01825     .01545

Elapsed: 00:00:00.02
01:00:15 SQL> SELECT chf_trend,MIN(ydate),MAX(ydate),COUNT(chf_trend),MIN(chf_g8),MAX(chf_g8)FROM chf_ms10 GROUP BY chf_trend;

 CHF_TREND MIN(YDATE)	       MAX(YDATE)	   COUNT(CHF_TREND) MIN(CHF_G8) MAX(CHF_G8)
---------- ------------------- ------------------- ---------------- ----------- -----------
	 1 2010-09-16 09:30:01 2010-12-23 21:45:00	       9618	-.01775       .0155
	-1 2010-09-16 09:00:01 2010-12-24 00:55:00	      10740	-.01825      .01545

Elapsed: 00:00:00.01
01:00:15 SQL> 
01:00:15 SQL> -- I need a copy of q15 attributes
01:00:15 SQL> 
01:00:15 SQL> DROP   TABLE chf_att;

Table dropped.

Elapsed: 00:00:00.03
01:00:15 SQL> CREATE TABLE chf_att COMPRESS AS
01:00:15   2  SELECT
01:00:15   3  ydate
01:00:15   4  ,att00 chf_att00
01:00:15   5  ,att01 chf_att01
01:00:15   6  ,att02 chf_att02
01:00:15   7  ,att03 chf_att03
01:00:15   8  ,att04 chf_att04
01:00:15   9  ,att05 chf_att05
01:00:15  10  ,att06 chf_att06
01:00:15  11  ,att07 chf_att07
01:00:15  12  ,att08 chf_att08
01:00:15  13  ,att09 chf_att09
01:00:15  14  ,att10 chf_att10
01:00:15  15  ,att11 chf_att11
01:00:15  16  ,att12 chf_att12
01:00:15  17  ,att13 chf_att13
01:00:15  18  ,att14 chf_att14
01:00:15  19  ,att15 chf_att15
01:00:15  20  ,att16 chf_att16
01:00:15  21  ,att17 chf_att17
01:00:15  22  ,att18 chf_att18
01:00:15  23  ,att19 chf_att19
01:00:15  24  ,att20 chf_att20
01:00:15  25  ,att21 chf_att21
01:00:15  26  ,att22 chf_att22
01:00:15  27  ,att23 chf_att23
01:00:15  28  ,att24 chf_att24
01:00:15  29  ,att25 chf_att25
01:00:15  30  ,att26 chf_att26
01:00:15  31  ,att27 chf_att27
01:00:15  32  ,att28 chf_att28
01:00:15  33  ,att29 chf_att29
01:00:15  34  ,att30 chf_att30
01:00:15  35  ,att31 chf_att31
01:00:15  36  ,att32 chf_att32
01:00:15  37  ,att33 chf_att33
01:00:15  38  ,att34 chf_att34
01:00:15  39  ,att35 chf_att35
01:00:15  40  ,att36 chf_att36
01:00:15  41  FROM q15
01:00:15  42  /

Table created.

Elapsed: 00:00:00.15
01:00:15 SQL> 
01:00:15 SQL> ANALYZE TABLE chf_att COMPUTE STATISTICS;

Table analyzed.

Elapsed: 00:00:00.45
01:00:15 SQL> 
01:00:15 SQL> -- rpt
01:00:15 SQL> SELECT COUNT(*)FROM chf_att;

  COUNT(*)
----------
     20358

Elapsed: 00:00:00.01
01:00:15 SQL> 
01:00:15 SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
